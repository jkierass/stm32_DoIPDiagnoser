
STM32H747I-DISCO_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .shared_ram   000016f8  38000000  38000000  0002b000  2**2
                  ALLOC
  2 .text         00024934  081002a0  081002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00003f84  08124bd4  08124bd4  00025bd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM          00000008  08128b58  08128b58  00029b58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .init_array   00000014  08128b60  08128b60  00029b60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .fini_array   00000014  08128b74  08128b74  00029b74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .data         00000090  10000000  08128b88  0002a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .bss          0000e5c8  10000090  08128c18  0002a090  2**2
                  ALLOC
  9 ._user_heap_stack 00002000  1000e658  08128c18  0002a658  2**0
                  ALLOC
 10 .lwip_sec     00024b83  10020000  10020000  0002b000  2**2
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002a090  2**0
                  CONTENTS, READONLY
 12 .debug_info   00085e09  00000000  00000000  0002a0c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000e359  00000000  00000000  000afec9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00004f58  00000000  00000000  000be228  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00003def  00000000  00000000  000c3180  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00059495  00000000  00000000  000c6f6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0005c5ee  00000000  00000000  00120404  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0020d22f  00000000  00000000  0017c9f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00389c21  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00017154  00000000  00000000  00389c64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008d  00000000  00000000  003a0db8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

081002a0 <__do_global_dtors_aux>:
 81002a0:	b510      	push	{r4, lr}
 81002a2:	4c05      	ldr	r4, [pc, #20]	@ (81002b8 <__do_global_dtors_aux+0x18>)
 81002a4:	7823      	ldrb	r3, [r4, #0]
 81002a6:	b933      	cbnz	r3, 81002b6 <__do_global_dtors_aux+0x16>
 81002a8:	4b04      	ldr	r3, [pc, #16]	@ (81002bc <__do_global_dtors_aux+0x1c>)
 81002aa:	b113      	cbz	r3, 81002b2 <__do_global_dtors_aux+0x12>
 81002ac:	4804      	ldr	r0, [pc, #16]	@ (81002c0 <__do_global_dtors_aux+0x20>)
 81002ae:	f3af 8000 	nop.w
 81002b2:	2301      	movs	r3, #1
 81002b4:	7023      	strb	r3, [r4, #0]
 81002b6:	bd10      	pop	{r4, pc}
 81002b8:	10000090 	.word	0x10000090
 81002bc:	00000000 	.word	0x00000000
 81002c0:	08124bbc 	.word	0x08124bbc

081002c4 <frame_dummy>:
 81002c4:	b508      	push	{r3, lr}
 81002c6:	4b03      	ldr	r3, [pc, #12]	@ (81002d4 <frame_dummy+0x10>)
 81002c8:	b11b      	cbz	r3, 81002d2 <frame_dummy+0xe>
 81002ca:	4903      	ldr	r1, [pc, #12]	@ (81002d8 <frame_dummy+0x14>)
 81002cc:	4803      	ldr	r0, [pc, #12]	@ (81002dc <frame_dummy+0x18>)
 81002ce:	f3af 8000 	nop.w
 81002d2:	bd08      	pop	{r3, pc}
 81002d4:	00000000 	.word	0x00000000
 81002d8:	10000094 	.word	0x10000094
 81002dc:	08124bbc 	.word	0x08124bbc

081002e0 <memchr>:
 81002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 81002e4:	2a10      	cmp	r2, #16
 81002e6:	db2b      	blt.n	8100340 <memchr+0x60>
 81002e8:	f010 0f07 	tst.w	r0, #7
 81002ec:	d008      	beq.n	8100300 <memchr+0x20>
 81002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 81002f2:	3a01      	subs	r2, #1
 81002f4:	428b      	cmp	r3, r1
 81002f6:	d02d      	beq.n	8100354 <memchr+0x74>
 81002f8:	f010 0f07 	tst.w	r0, #7
 81002fc:	b342      	cbz	r2, 8100350 <memchr+0x70>
 81002fe:	d1f6      	bne.n	81002ee <memchr+0xe>
 8100300:	b4f0      	push	{r4, r5, r6, r7}
 8100302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8100306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 810030a:	f022 0407 	bic.w	r4, r2, #7
 810030e:	f07f 0700 	mvns.w	r7, #0
 8100312:	2300      	movs	r3, #0
 8100314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8100318:	3c08      	subs	r4, #8
 810031a:	ea85 0501 	eor.w	r5, r5, r1
 810031e:	ea86 0601 	eor.w	r6, r6, r1
 8100322:	fa85 f547 	uadd8	r5, r5, r7
 8100326:	faa3 f587 	sel	r5, r3, r7
 810032a:	fa86 f647 	uadd8	r6, r6, r7
 810032e:	faa5 f687 	sel	r6, r5, r7
 8100332:	b98e      	cbnz	r6, 8100358 <memchr+0x78>
 8100334:	d1ee      	bne.n	8100314 <memchr+0x34>
 8100336:	bcf0      	pop	{r4, r5, r6, r7}
 8100338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 810033c:	f002 0207 	and.w	r2, r2, #7
 8100340:	b132      	cbz	r2, 8100350 <memchr+0x70>
 8100342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8100346:	3a01      	subs	r2, #1
 8100348:	ea83 0301 	eor.w	r3, r3, r1
 810034c:	b113      	cbz	r3, 8100354 <memchr+0x74>
 810034e:	d1f8      	bne.n	8100342 <memchr+0x62>
 8100350:	2000      	movs	r0, #0
 8100352:	4770      	bx	lr
 8100354:	3801      	subs	r0, #1
 8100356:	4770      	bx	lr
 8100358:	2d00      	cmp	r5, #0
 810035a:	bf06      	itte	eq
 810035c:	4635      	moveq	r5, r6
 810035e:	3803      	subeq	r0, #3
 8100360:	3807      	subne	r0, #7
 8100362:	f015 0f01 	tst.w	r5, #1
 8100366:	d107      	bne.n	8100378 <memchr+0x98>
 8100368:	3001      	adds	r0, #1
 810036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 810036e:	bf02      	ittt	eq
 8100370:	3001      	addeq	r0, #1
 8100372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8100376:	3001      	addeq	r0, #1
 8100378:	bcf0      	pop	{r4, r5, r6, r7}
 810037a:	3801      	subs	r0, #1
 810037c:	4770      	bx	lr
 810037e:	bf00      	nop

08100380 <strlen>:
 8100380:	4603      	mov	r3, r0
 8100382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8100386:	2a00      	cmp	r2, #0
 8100388:	d1fb      	bne.n	8100382 <strlen+0x2>
 810038a:	1a18      	subs	r0, r3, r0
 810038c:	3801      	subs	r0, #1
 810038e:	4770      	bx	lr

08100390 <__aeabi_drsub>:
 8100390:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8100394:	e002      	b.n	810039c <__adddf3>
 8100396:	bf00      	nop

08100398 <__aeabi_dsub>:
 8100398:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0810039c <__adddf3>:
 810039c:	b530      	push	{r4, r5, lr}
 810039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 81003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 81003a6:	ea94 0f05 	teq	r4, r5
 81003aa:	bf08      	it	eq
 81003ac:	ea90 0f02 	teqeq	r0, r2
 81003b0:	bf1f      	itttt	ne
 81003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 81003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 81003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 81003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 81003c2:	f000 80e2 	beq.w	810058a <__adddf3+0x1ee>
 81003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 81003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 81003ce:	bfb8      	it	lt
 81003d0:	426d      	neglt	r5, r5
 81003d2:	dd0c      	ble.n	81003ee <__adddf3+0x52>
 81003d4:	442c      	add	r4, r5
 81003d6:	ea80 0202 	eor.w	r2, r0, r2
 81003da:	ea81 0303 	eor.w	r3, r1, r3
 81003de:	ea82 0000 	eor.w	r0, r2, r0
 81003e2:	ea83 0101 	eor.w	r1, r3, r1
 81003e6:	ea80 0202 	eor.w	r2, r0, r2
 81003ea:	ea81 0303 	eor.w	r3, r1, r3
 81003ee:	2d36      	cmp	r5, #54	@ 0x36
 81003f0:	bf88      	it	hi
 81003f2:	bd30      	pophi	{r4, r5, pc}
 81003f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 81003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 81003fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8100400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8100404:	d002      	beq.n	810040c <__adddf3+0x70>
 8100406:	4240      	negs	r0, r0
 8100408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 810040c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8100410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8100414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8100418:	d002      	beq.n	8100420 <__adddf3+0x84>
 810041a:	4252      	negs	r2, r2
 810041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8100420:	ea94 0f05 	teq	r4, r5
 8100424:	f000 80a7 	beq.w	8100576 <__adddf3+0x1da>
 8100428:	f1a4 0401 	sub.w	r4, r4, #1
 810042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8100430:	db0d      	blt.n	810044e <__adddf3+0xb2>
 8100432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8100436:	fa22 f205 	lsr.w	r2, r2, r5
 810043a:	1880      	adds	r0, r0, r2
 810043c:	f141 0100 	adc.w	r1, r1, #0
 8100440:	fa03 f20e 	lsl.w	r2, r3, lr
 8100444:	1880      	adds	r0, r0, r2
 8100446:	fa43 f305 	asr.w	r3, r3, r5
 810044a:	4159      	adcs	r1, r3
 810044c:	e00e      	b.n	810046c <__adddf3+0xd0>
 810044e:	f1a5 0520 	sub.w	r5, r5, #32
 8100452:	f10e 0e20 	add.w	lr, lr, #32
 8100456:	2a01      	cmp	r2, #1
 8100458:	fa03 fc0e 	lsl.w	ip, r3, lr
 810045c:	bf28      	it	cs
 810045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8100462:	fa43 f305 	asr.w	r3, r3, r5
 8100466:	18c0      	adds	r0, r0, r3
 8100468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 810046c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8100470:	d507      	bpl.n	8100482 <__adddf3+0xe6>
 8100472:	f04f 0e00 	mov.w	lr, #0
 8100476:	f1dc 0c00 	rsbs	ip, ip, #0
 810047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 810047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8100482:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8100486:	d31b      	bcc.n	81004c0 <__adddf3+0x124>
 8100488:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 810048c:	d30c      	bcc.n	81004a8 <__adddf3+0x10c>
 810048e:	0849      	lsrs	r1, r1, #1
 8100490:	ea5f 0030 	movs.w	r0, r0, rrx
 8100494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8100498:	f104 0401 	add.w	r4, r4, #1
 810049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 81004a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 81004a4:	f080 809a 	bcs.w	81005dc <__adddf3+0x240>
 81004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 81004ac:	bf08      	it	eq
 81004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 81004b2:	f150 0000 	adcs.w	r0, r0, #0
 81004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 81004ba:	ea41 0105 	orr.w	r1, r1, r5
 81004be:	bd30      	pop	{r4, r5, pc}
 81004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 81004c4:	4140      	adcs	r0, r0
 81004c6:	eb41 0101 	adc.w	r1, r1, r1
 81004ca:	3c01      	subs	r4, #1
 81004cc:	bf28      	it	cs
 81004ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 81004d2:	d2e9      	bcs.n	81004a8 <__adddf3+0x10c>
 81004d4:	f091 0f00 	teq	r1, #0
 81004d8:	bf04      	itt	eq
 81004da:	4601      	moveq	r1, r0
 81004dc:	2000      	moveq	r0, #0
 81004de:	fab1 f381 	clz	r3, r1
 81004e2:	bf08      	it	eq
 81004e4:	3320      	addeq	r3, #32
 81004e6:	f1a3 030b 	sub.w	r3, r3, #11
 81004ea:	f1b3 0220 	subs.w	r2, r3, #32
 81004ee:	da0c      	bge.n	810050a <__adddf3+0x16e>
 81004f0:	320c      	adds	r2, #12
 81004f2:	dd08      	ble.n	8100506 <__adddf3+0x16a>
 81004f4:	f102 0c14 	add.w	ip, r2, #20
 81004f8:	f1c2 020c 	rsb	r2, r2, #12
 81004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8100500:	fa21 f102 	lsr.w	r1, r1, r2
 8100504:	e00c      	b.n	8100520 <__adddf3+0x184>
 8100506:	f102 0214 	add.w	r2, r2, #20
 810050a:	bfd8      	it	le
 810050c:	f1c2 0c20 	rsble	ip, r2, #32
 8100510:	fa01 f102 	lsl.w	r1, r1, r2
 8100514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8100518:	bfdc      	itt	le
 810051a:	ea41 010c 	orrle.w	r1, r1, ip
 810051e:	4090      	lslle	r0, r2
 8100520:	1ae4      	subs	r4, r4, r3
 8100522:	bfa2      	ittt	ge
 8100524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8100528:	4329      	orrge	r1, r5
 810052a:	bd30      	popge	{r4, r5, pc}
 810052c:	ea6f 0404 	mvn.w	r4, r4
 8100530:	3c1f      	subs	r4, #31
 8100532:	da1c      	bge.n	810056e <__adddf3+0x1d2>
 8100534:	340c      	adds	r4, #12
 8100536:	dc0e      	bgt.n	8100556 <__adddf3+0x1ba>
 8100538:	f104 0414 	add.w	r4, r4, #20
 810053c:	f1c4 0220 	rsb	r2, r4, #32
 8100540:	fa20 f004 	lsr.w	r0, r0, r4
 8100544:	fa01 f302 	lsl.w	r3, r1, r2
 8100548:	ea40 0003 	orr.w	r0, r0, r3
 810054c:	fa21 f304 	lsr.w	r3, r1, r4
 8100550:	ea45 0103 	orr.w	r1, r5, r3
 8100554:	bd30      	pop	{r4, r5, pc}
 8100556:	f1c4 040c 	rsb	r4, r4, #12
 810055a:	f1c4 0220 	rsb	r2, r4, #32
 810055e:	fa20 f002 	lsr.w	r0, r0, r2
 8100562:	fa01 f304 	lsl.w	r3, r1, r4
 8100566:	ea40 0003 	orr.w	r0, r0, r3
 810056a:	4629      	mov	r1, r5
 810056c:	bd30      	pop	{r4, r5, pc}
 810056e:	fa21 f004 	lsr.w	r0, r1, r4
 8100572:	4629      	mov	r1, r5
 8100574:	bd30      	pop	{r4, r5, pc}
 8100576:	f094 0f00 	teq	r4, #0
 810057a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 810057e:	bf06      	itte	eq
 8100580:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8100584:	3401      	addeq	r4, #1
 8100586:	3d01      	subne	r5, #1
 8100588:	e74e      	b.n	8100428 <__adddf3+0x8c>
 810058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 810058e:	bf18      	it	ne
 8100590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8100594:	d029      	beq.n	81005ea <__adddf3+0x24e>
 8100596:	ea94 0f05 	teq	r4, r5
 810059a:	bf08      	it	eq
 810059c:	ea90 0f02 	teqeq	r0, r2
 81005a0:	d005      	beq.n	81005ae <__adddf3+0x212>
 81005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 81005a6:	bf04      	itt	eq
 81005a8:	4619      	moveq	r1, r3
 81005aa:	4610      	moveq	r0, r2
 81005ac:	bd30      	pop	{r4, r5, pc}
 81005ae:	ea91 0f03 	teq	r1, r3
 81005b2:	bf1e      	ittt	ne
 81005b4:	2100      	movne	r1, #0
 81005b6:	2000      	movne	r0, #0
 81005b8:	bd30      	popne	{r4, r5, pc}
 81005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 81005be:	d105      	bne.n	81005cc <__adddf3+0x230>
 81005c0:	0040      	lsls	r0, r0, #1
 81005c2:	4149      	adcs	r1, r1
 81005c4:	bf28      	it	cs
 81005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 81005ca:	bd30      	pop	{r4, r5, pc}
 81005cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 81005d0:	bf3c      	itt	cc
 81005d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 81005d6:	bd30      	popcc	{r4, r5, pc}
 81005d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 81005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 81005e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 81005e4:	f04f 0000 	mov.w	r0, #0
 81005e8:	bd30      	pop	{r4, r5, pc}
 81005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 81005ee:	bf1a      	itte	ne
 81005f0:	4619      	movne	r1, r3
 81005f2:	4610      	movne	r0, r2
 81005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 81005f8:	bf1c      	itt	ne
 81005fa:	460b      	movne	r3, r1
 81005fc:	4602      	movne	r2, r0
 81005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8100602:	bf06      	itte	eq
 8100604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8100608:	ea91 0f03 	teqeq	r1, r3
 810060c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8100610:	bd30      	pop	{r4, r5, pc}
 8100612:	bf00      	nop

08100614 <__aeabi_ui2d>:
 8100614:	f090 0f00 	teq	r0, #0
 8100618:	bf04      	itt	eq
 810061a:	2100      	moveq	r1, #0
 810061c:	4770      	bxeq	lr
 810061e:	b530      	push	{r4, r5, lr}
 8100620:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8100624:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8100628:	f04f 0500 	mov.w	r5, #0
 810062c:	f04f 0100 	mov.w	r1, #0
 8100630:	e750      	b.n	81004d4 <__adddf3+0x138>
 8100632:	bf00      	nop

08100634 <__aeabi_i2d>:
 8100634:	f090 0f00 	teq	r0, #0
 8100638:	bf04      	itt	eq
 810063a:	2100      	moveq	r1, #0
 810063c:	4770      	bxeq	lr
 810063e:	b530      	push	{r4, r5, lr}
 8100640:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8100644:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8100648:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 810064c:	bf48      	it	mi
 810064e:	4240      	negmi	r0, r0
 8100650:	f04f 0100 	mov.w	r1, #0
 8100654:	e73e      	b.n	81004d4 <__adddf3+0x138>
 8100656:	bf00      	nop

08100658 <__aeabi_f2d>:
 8100658:	0042      	lsls	r2, r0, #1
 810065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 810065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8100662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8100666:	bf1f      	itttt	ne
 8100668:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 810066c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8100670:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8100674:	4770      	bxne	lr
 8100676:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 810067a:	bf08      	it	eq
 810067c:	4770      	bxeq	lr
 810067e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8100682:	bf04      	itt	eq
 8100684:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8100688:	4770      	bxeq	lr
 810068a:	b530      	push	{r4, r5, lr}
 810068c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8100690:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8100694:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8100698:	e71c      	b.n	81004d4 <__adddf3+0x138>
 810069a:	bf00      	nop

0810069c <__aeabi_ul2d>:
 810069c:	ea50 0201 	orrs.w	r2, r0, r1
 81006a0:	bf08      	it	eq
 81006a2:	4770      	bxeq	lr
 81006a4:	b530      	push	{r4, r5, lr}
 81006a6:	f04f 0500 	mov.w	r5, #0
 81006aa:	e00a      	b.n	81006c2 <__aeabi_l2d+0x16>

081006ac <__aeabi_l2d>:
 81006ac:	ea50 0201 	orrs.w	r2, r0, r1
 81006b0:	bf08      	it	eq
 81006b2:	4770      	bxeq	lr
 81006b4:	b530      	push	{r4, r5, lr}
 81006b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 81006ba:	d502      	bpl.n	81006c2 <__aeabi_l2d+0x16>
 81006bc:	4240      	negs	r0, r0
 81006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 81006c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 81006c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 81006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 81006ce:	f43f aed8 	beq.w	8100482 <__adddf3+0xe6>
 81006d2:	f04f 0203 	mov.w	r2, #3
 81006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 81006da:	bf18      	it	ne
 81006dc:	3203      	addne	r2, #3
 81006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 81006e2:	bf18      	it	ne
 81006e4:	3203      	addne	r2, #3
 81006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 81006ea:	f1c2 0320 	rsb	r3, r2, #32
 81006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 81006f2:	fa20 f002 	lsr.w	r0, r0, r2
 81006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 81006fa:	ea40 000e 	orr.w	r0, r0, lr
 81006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8100702:	4414      	add	r4, r2
 8100704:	e6bd      	b.n	8100482 <__adddf3+0xe6>
 8100706:	bf00      	nop

08100708 <__aeabi_dmul>:
 8100708:	b570      	push	{r4, r5, r6, lr}
 810070a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 810070e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8100712:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8100716:	bf1d      	ittte	ne
 8100718:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 810071c:	ea94 0f0c 	teqne	r4, ip
 8100720:	ea95 0f0c 	teqne	r5, ip
 8100724:	f000 f8de 	bleq	81008e4 <__aeabi_dmul+0x1dc>
 8100728:	442c      	add	r4, r5
 810072a:	ea81 0603 	eor.w	r6, r1, r3
 810072e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8100732:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8100736:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 810073a:	bf18      	it	ne
 810073c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8100740:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8100744:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8100748:	d038      	beq.n	81007bc <__aeabi_dmul+0xb4>
 810074a:	fba0 ce02 	umull	ip, lr, r0, r2
 810074e:	f04f 0500 	mov.w	r5, #0
 8100752:	fbe1 e502 	umlal	lr, r5, r1, r2
 8100756:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 810075a:	fbe0 e503 	umlal	lr, r5, r0, r3
 810075e:	f04f 0600 	mov.w	r6, #0
 8100762:	fbe1 5603 	umlal	r5, r6, r1, r3
 8100766:	f09c 0f00 	teq	ip, #0
 810076a:	bf18      	it	ne
 810076c:	f04e 0e01 	orrne.w	lr, lr, #1
 8100770:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8100774:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8100778:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 810077c:	d204      	bcs.n	8100788 <__aeabi_dmul+0x80>
 810077e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8100782:	416d      	adcs	r5, r5
 8100784:	eb46 0606 	adc.w	r6, r6, r6
 8100788:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 810078c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8100790:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8100794:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8100798:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 810079c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 81007a0:	bf88      	it	hi
 81007a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 81007a6:	d81e      	bhi.n	81007e6 <__aeabi_dmul+0xde>
 81007a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 81007ac:	bf08      	it	eq
 81007ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 81007b2:	f150 0000 	adcs.w	r0, r0, #0
 81007b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 81007ba:	bd70      	pop	{r4, r5, r6, pc}
 81007bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 81007c0:	ea46 0101 	orr.w	r1, r6, r1
 81007c4:	ea40 0002 	orr.w	r0, r0, r2
 81007c8:	ea81 0103 	eor.w	r1, r1, r3
 81007cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 81007d0:	bfc2      	ittt	gt
 81007d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 81007d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 81007da:	bd70      	popgt	{r4, r5, r6, pc}
 81007dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 81007e0:	f04f 0e00 	mov.w	lr, #0
 81007e4:	3c01      	subs	r4, #1
 81007e6:	f300 80ab 	bgt.w	8100940 <__aeabi_dmul+0x238>
 81007ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 81007ee:	bfde      	ittt	le
 81007f0:	2000      	movle	r0, #0
 81007f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 81007f6:	bd70      	pople	{r4, r5, r6, pc}
 81007f8:	f1c4 0400 	rsb	r4, r4, #0
 81007fc:	3c20      	subs	r4, #32
 81007fe:	da35      	bge.n	810086c <__aeabi_dmul+0x164>
 8100800:	340c      	adds	r4, #12
 8100802:	dc1b      	bgt.n	810083c <__aeabi_dmul+0x134>
 8100804:	f104 0414 	add.w	r4, r4, #20
 8100808:	f1c4 0520 	rsb	r5, r4, #32
 810080c:	fa00 f305 	lsl.w	r3, r0, r5
 8100810:	fa20 f004 	lsr.w	r0, r0, r4
 8100814:	fa01 f205 	lsl.w	r2, r1, r5
 8100818:	ea40 0002 	orr.w	r0, r0, r2
 810081c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8100820:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8100824:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8100828:	fa21 f604 	lsr.w	r6, r1, r4
 810082c:	eb42 0106 	adc.w	r1, r2, r6
 8100830:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8100834:	bf08      	it	eq
 8100836:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 810083a:	bd70      	pop	{r4, r5, r6, pc}
 810083c:	f1c4 040c 	rsb	r4, r4, #12
 8100840:	f1c4 0520 	rsb	r5, r4, #32
 8100844:	fa00 f304 	lsl.w	r3, r0, r4
 8100848:	fa20 f005 	lsr.w	r0, r0, r5
 810084c:	fa01 f204 	lsl.w	r2, r1, r4
 8100850:	ea40 0002 	orr.w	r0, r0, r2
 8100854:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8100858:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 810085c:	f141 0100 	adc.w	r1, r1, #0
 8100860:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8100864:	bf08      	it	eq
 8100866:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 810086a:	bd70      	pop	{r4, r5, r6, pc}
 810086c:	f1c4 0520 	rsb	r5, r4, #32
 8100870:	fa00 f205 	lsl.w	r2, r0, r5
 8100874:	ea4e 0e02 	orr.w	lr, lr, r2
 8100878:	fa20 f304 	lsr.w	r3, r0, r4
 810087c:	fa01 f205 	lsl.w	r2, r1, r5
 8100880:	ea43 0302 	orr.w	r3, r3, r2
 8100884:	fa21 f004 	lsr.w	r0, r1, r4
 8100888:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 810088c:	fa21 f204 	lsr.w	r2, r1, r4
 8100890:	ea20 0002 	bic.w	r0, r0, r2
 8100894:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8100898:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 810089c:	bf08      	it	eq
 810089e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 81008a2:	bd70      	pop	{r4, r5, r6, pc}
 81008a4:	f094 0f00 	teq	r4, #0
 81008a8:	d10f      	bne.n	81008ca <__aeabi_dmul+0x1c2>
 81008aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 81008ae:	0040      	lsls	r0, r0, #1
 81008b0:	eb41 0101 	adc.w	r1, r1, r1
 81008b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 81008b8:	bf08      	it	eq
 81008ba:	3c01      	subeq	r4, #1
 81008bc:	d0f7      	beq.n	81008ae <__aeabi_dmul+0x1a6>
 81008be:	ea41 0106 	orr.w	r1, r1, r6
 81008c2:	f095 0f00 	teq	r5, #0
 81008c6:	bf18      	it	ne
 81008c8:	4770      	bxne	lr
 81008ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 81008ce:	0052      	lsls	r2, r2, #1
 81008d0:	eb43 0303 	adc.w	r3, r3, r3
 81008d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 81008d8:	bf08      	it	eq
 81008da:	3d01      	subeq	r5, #1
 81008dc:	d0f7      	beq.n	81008ce <__aeabi_dmul+0x1c6>
 81008de:	ea43 0306 	orr.w	r3, r3, r6
 81008e2:	4770      	bx	lr
 81008e4:	ea94 0f0c 	teq	r4, ip
 81008e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 81008ec:	bf18      	it	ne
 81008ee:	ea95 0f0c 	teqne	r5, ip
 81008f2:	d00c      	beq.n	810090e <__aeabi_dmul+0x206>
 81008f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 81008f8:	bf18      	it	ne
 81008fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 81008fe:	d1d1      	bne.n	81008a4 <__aeabi_dmul+0x19c>
 8100900:	ea81 0103 	eor.w	r1, r1, r3
 8100904:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8100908:	f04f 0000 	mov.w	r0, #0
 810090c:	bd70      	pop	{r4, r5, r6, pc}
 810090e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8100912:	bf06      	itte	eq
 8100914:	4610      	moveq	r0, r2
 8100916:	4619      	moveq	r1, r3
 8100918:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 810091c:	d019      	beq.n	8100952 <__aeabi_dmul+0x24a>
 810091e:	ea94 0f0c 	teq	r4, ip
 8100922:	d102      	bne.n	810092a <__aeabi_dmul+0x222>
 8100924:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8100928:	d113      	bne.n	8100952 <__aeabi_dmul+0x24a>
 810092a:	ea95 0f0c 	teq	r5, ip
 810092e:	d105      	bne.n	810093c <__aeabi_dmul+0x234>
 8100930:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8100934:	bf1c      	itt	ne
 8100936:	4610      	movne	r0, r2
 8100938:	4619      	movne	r1, r3
 810093a:	d10a      	bne.n	8100952 <__aeabi_dmul+0x24a>
 810093c:	ea81 0103 	eor.w	r1, r1, r3
 8100940:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8100944:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8100948:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 810094c:	f04f 0000 	mov.w	r0, #0
 8100950:	bd70      	pop	{r4, r5, r6, pc}
 8100952:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8100956:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 810095a:	bd70      	pop	{r4, r5, r6, pc}

0810095c <__aeabi_ddiv>:
 810095c:	b570      	push	{r4, r5, r6, lr}
 810095e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8100962:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8100966:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 810096a:	bf1d      	ittte	ne
 810096c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8100970:	ea94 0f0c 	teqne	r4, ip
 8100974:	ea95 0f0c 	teqne	r5, ip
 8100978:	f000 f8a7 	bleq	8100aca <__aeabi_ddiv+0x16e>
 810097c:	eba4 0405 	sub.w	r4, r4, r5
 8100980:	ea81 0e03 	eor.w	lr, r1, r3
 8100984:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8100988:	ea4f 3101 	mov.w	r1, r1, lsl #12
 810098c:	f000 8088 	beq.w	8100aa0 <__aeabi_ddiv+0x144>
 8100990:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8100994:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8100998:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 810099c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 81009a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 81009a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 81009a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 81009ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 81009b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 81009b4:	429d      	cmp	r5, r3
 81009b6:	bf08      	it	eq
 81009b8:	4296      	cmpeq	r6, r2
 81009ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 81009be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 81009c2:	d202      	bcs.n	81009ca <__aeabi_ddiv+0x6e>
 81009c4:	085b      	lsrs	r3, r3, #1
 81009c6:	ea4f 0232 	mov.w	r2, r2, rrx
 81009ca:	1ab6      	subs	r6, r6, r2
 81009cc:	eb65 0503 	sbc.w	r5, r5, r3
 81009d0:	085b      	lsrs	r3, r3, #1
 81009d2:	ea4f 0232 	mov.w	r2, r2, rrx
 81009d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 81009da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 81009de:	ebb6 0e02 	subs.w	lr, r6, r2
 81009e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 81009e6:	bf22      	ittt	cs
 81009e8:	1ab6      	subcs	r6, r6, r2
 81009ea:	4675      	movcs	r5, lr
 81009ec:	ea40 000c 	orrcs.w	r0, r0, ip
 81009f0:	085b      	lsrs	r3, r3, #1
 81009f2:	ea4f 0232 	mov.w	r2, r2, rrx
 81009f6:	ebb6 0e02 	subs.w	lr, r6, r2
 81009fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 81009fe:	bf22      	ittt	cs
 8100a00:	1ab6      	subcs	r6, r6, r2
 8100a02:	4675      	movcs	r5, lr
 8100a04:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8100a08:	085b      	lsrs	r3, r3, #1
 8100a0a:	ea4f 0232 	mov.w	r2, r2, rrx
 8100a0e:	ebb6 0e02 	subs.w	lr, r6, r2
 8100a12:	eb75 0e03 	sbcs.w	lr, r5, r3
 8100a16:	bf22      	ittt	cs
 8100a18:	1ab6      	subcs	r6, r6, r2
 8100a1a:	4675      	movcs	r5, lr
 8100a1c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8100a20:	085b      	lsrs	r3, r3, #1
 8100a22:	ea4f 0232 	mov.w	r2, r2, rrx
 8100a26:	ebb6 0e02 	subs.w	lr, r6, r2
 8100a2a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8100a2e:	bf22      	ittt	cs
 8100a30:	1ab6      	subcs	r6, r6, r2
 8100a32:	4675      	movcs	r5, lr
 8100a34:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8100a38:	ea55 0e06 	orrs.w	lr, r5, r6
 8100a3c:	d018      	beq.n	8100a70 <__aeabi_ddiv+0x114>
 8100a3e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8100a42:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8100a46:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8100a4a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8100a4e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8100a52:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8100a56:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8100a5a:	d1c0      	bne.n	81009de <__aeabi_ddiv+0x82>
 8100a5c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8100a60:	d10b      	bne.n	8100a7a <__aeabi_ddiv+0x11e>
 8100a62:	ea41 0100 	orr.w	r1, r1, r0
 8100a66:	f04f 0000 	mov.w	r0, #0
 8100a6a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8100a6e:	e7b6      	b.n	81009de <__aeabi_ddiv+0x82>
 8100a70:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8100a74:	bf04      	itt	eq
 8100a76:	4301      	orreq	r1, r0
 8100a78:	2000      	moveq	r0, #0
 8100a7a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8100a7e:	bf88      	it	hi
 8100a80:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8100a84:	f63f aeaf 	bhi.w	81007e6 <__aeabi_dmul+0xde>
 8100a88:	ebb5 0c03 	subs.w	ip, r5, r3
 8100a8c:	bf04      	itt	eq
 8100a8e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8100a92:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8100a96:	f150 0000 	adcs.w	r0, r0, #0
 8100a9a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8100a9e:	bd70      	pop	{r4, r5, r6, pc}
 8100aa0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8100aa4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8100aa8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8100aac:	bfc2      	ittt	gt
 8100aae:	ebd4 050c 	rsbsgt	r5, r4, ip
 8100ab2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8100ab6:	bd70      	popgt	{r4, r5, r6, pc}
 8100ab8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8100abc:	f04f 0e00 	mov.w	lr, #0
 8100ac0:	3c01      	subs	r4, #1
 8100ac2:	e690      	b.n	81007e6 <__aeabi_dmul+0xde>
 8100ac4:	ea45 0e06 	orr.w	lr, r5, r6
 8100ac8:	e68d      	b.n	81007e6 <__aeabi_dmul+0xde>
 8100aca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8100ace:	ea94 0f0c 	teq	r4, ip
 8100ad2:	bf08      	it	eq
 8100ad4:	ea95 0f0c 	teqeq	r5, ip
 8100ad8:	f43f af3b 	beq.w	8100952 <__aeabi_dmul+0x24a>
 8100adc:	ea94 0f0c 	teq	r4, ip
 8100ae0:	d10a      	bne.n	8100af8 <__aeabi_ddiv+0x19c>
 8100ae2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8100ae6:	f47f af34 	bne.w	8100952 <__aeabi_dmul+0x24a>
 8100aea:	ea95 0f0c 	teq	r5, ip
 8100aee:	f47f af25 	bne.w	810093c <__aeabi_dmul+0x234>
 8100af2:	4610      	mov	r0, r2
 8100af4:	4619      	mov	r1, r3
 8100af6:	e72c      	b.n	8100952 <__aeabi_dmul+0x24a>
 8100af8:	ea95 0f0c 	teq	r5, ip
 8100afc:	d106      	bne.n	8100b0c <__aeabi_ddiv+0x1b0>
 8100afe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8100b02:	f43f aefd 	beq.w	8100900 <__aeabi_dmul+0x1f8>
 8100b06:	4610      	mov	r0, r2
 8100b08:	4619      	mov	r1, r3
 8100b0a:	e722      	b.n	8100952 <__aeabi_dmul+0x24a>
 8100b0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8100b10:	bf18      	it	ne
 8100b12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8100b16:	f47f aec5 	bne.w	81008a4 <__aeabi_dmul+0x19c>
 8100b1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8100b1e:	f47f af0d 	bne.w	810093c <__aeabi_dmul+0x234>
 8100b22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8100b26:	f47f aeeb 	bne.w	8100900 <__aeabi_dmul+0x1f8>
 8100b2a:	e712      	b.n	8100952 <__aeabi_dmul+0x24a>

08100b2c <__gedf2>:
 8100b2c:	f04f 3cff 	mov.w	ip, #4294967295
 8100b30:	e006      	b.n	8100b40 <__cmpdf2+0x4>
 8100b32:	bf00      	nop

08100b34 <__ledf2>:
 8100b34:	f04f 0c01 	mov.w	ip, #1
 8100b38:	e002      	b.n	8100b40 <__cmpdf2+0x4>
 8100b3a:	bf00      	nop

08100b3c <__cmpdf2>:
 8100b3c:	f04f 0c01 	mov.w	ip, #1
 8100b40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8100b44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100b48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100b50:	bf18      	it	ne
 8100b52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8100b56:	d01b      	beq.n	8100b90 <__cmpdf2+0x54>
 8100b58:	b001      	add	sp, #4
 8100b5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8100b5e:	bf0c      	ite	eq
 8100b60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8100b64:	ea91 0f03 	teqne	r1, r3
 8100b68:	bf02      	ittt	eq
 8100b6a:	ea90 0f02 	teqeq	r0, r2
 8100b6e:	2000      	moveq	r0, #0
 8100b70:	4770      	bxeq	lr
 8100b72:	f110 0f00 	cmn.w	r0, #0
 8100b76:	ea91 0f03 	teq	r1, r3
 8100b7a:	bf58      	it	pl
 8100b7c:	4299      	cmppl	r1, r3
 8100b7e:	bf08      	it	eq
 8100b80:	4290      	cmpeq	r0, r2
 8100b82:	bf2c      	ite	cs
 8100b84:	17d8      	asrcs	r0, r3, #31
 8100b86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8100b8a:	f040 0001 	orr.w	r0, r0, #1
 8100b8e:	4770      	bx	lr
 8100b90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100b94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100b98:	d102      	bne.n	8100ba0 <__cmpdf2+0x64>
 8100b9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8100b9e:	d107      	bne.n	8100bb0 <__cmpdf2+0x74>
 8100ba0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100ba4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100ba8:	d1d6      	bne.n	8100b58 <__cmpdf2+0x1c>
 8100baa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8100bae:	d0d3      	beq.n	8100b58 <__cmpdf2+0x1c>
 8100bb0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8100bb4:	4770      	bx	lr
 8100bb6:	bf00      	nop

08100bb8 <__aeabi_cdrcmple>:
 8100bb8:	4684      	mov	ip, r0
 8100bba:	4610      	mov	r0, r2
 8100bbc:	4662      	mov	r2, ip
 8100bbe:	468c      	mov	ip, r1
 8100bc0:	4619      	mov	r1, r3
 8100bc2:	4663      	mov	r3, ip
 8100bc4:	e000      	b.n	8100bc8 <__aeabi_cdcmpeq>
 8100bc6:	bf00      	nop

08100bc8 <__aeabi_cdcmpeq>:
 8100bc8:	b501      	push	{r0, lr}
 8100bca:	f7ff ffb7 	bl	8100b3c <__cmpdf2>
 8100bce:	2800      	cmp	r0, #0
 8100bd0:	bf48      	it	mi
 8100bd2:	f110 0f00 	cmnmi.w	r0, #0
 8100bd6:	bd01      	pop	{r0, pc}

08100bd8 <__aeabi_dcmpeq>:
 8100bd8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100bdc:	f7ff fff4 	bl	8100bc8 <__aeabi_cdcmpeq>
 8100be0:	bf0c      	ite	eq
 8100be2:	2001      	moveq	r0, #1
 8100be4:	2000      	movne	r0, #0
 8100be6:	f85d fb08 	ldr.w	pc, [sp], #8
 8100bea:	bf00      	nop

08100bec <__aeabi_dcmplt>:
 8100bec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100bf0:	f7ff ffea 	bl	8100bc8 <__aeabi_cdcmpeq>
 8100bf4:	bf34      	ite	cc
 8100bf6:	2001      	movcc	r0, #1
 8100bf8:	2000      	movcs	r0, #0
 8100bfa:	f85d fb08 	ldr.w	pc, [sp], #8
 8100bfe:	bf00      	nop

08100c00 <__aeabi_dcmple>:
 8100c00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c04:	f7ff ffe0 	bl	8100bc8 <__aeabi_cdcmpeq>
 8100c08:	bf94      	ite	ls
 8100c0a:	2001      	movls	r0, #1
 8100c0c:	2000      	movhi	r0, #0
 8100c0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c12:	bf00      	nop

08100c14 <__aeabi_dcmpge>:
 8100c14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c18:	f7ff ffce 	bl	8100bb8 <__aeabi_cdrcmple>
 8100c1c:	bf94      	ite	ls
 8100c1e:	2001      	movls	r0, #1
 8100c20:	2000      	movhi	r0, #0
 8100c22:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c26:	bf00      	nop

08100c28 <__aeabi_dcmpgt>:
 8100c28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c2c:	f7ff ffc4 	bl	8100bb8 <__aeabi_cdrcmple>
 8100c30:	bf34      	ite	cc
 8100c32:	2001      	movcc	r0, #1
 8100c34:	2000      	movcs	r0, #0
 8100c36:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c3a:	bf00      	nop

08100c3c <__aeabi_d2uiz>:
 8100c3c:	004a      	lsls	r2, r1, #1
 8100c3e:	d211      	bcs.n	8100c64 <__aeabi_d2uiz+0x28>
 8100c40:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8100c44:	d211      	bcs.n	8100c6a <__aeabi_d2uiz+0x2e>
 8100c46:	d50d      	bpl.n	8100c64 <__aeabi_d2uiz+0x28>
 8100c48:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8100c4c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8100c50:	d40e      	bmi.n	8100c70 <__aeabi_d2uiz+0x34>
 8100c52:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8100c56:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8100c5a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8100c5e:	fa23 f002 	lsr.w	r0, r3, r2
 8100c62:	4770      	bx	lr
 8100c64:	f04f 0000 	mov.w	r0, #0
 8100c68:	4770      	bx	lr
 8100c6a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8100c6e:	d102      	bne.n	8100c76 <__aeabi_d2uiz+0x3a>
 8100c70:	f04f 30ff 	mov.w	r0, #4294967295
 8100c74:	4770      	bx	lr
 8100c76:	f04f 0000 	mov.w	r0, #0
 8100c7a:	4770      	bx	lr

08100c7c <__aeabi_uldivmod>:
 8100c7c:	b953      	cbnz	r3, 8100c94 <__aeabi_uldivmod+0x18>
 8100c7e:	b94a      	cbnz	r2, 8100c94 <__aeabi_uldivmod+0x18>
 8100c80:	2900      	cmp	r1, #0
 8100c82:	bf08      	it	eq
 8100c84:	2800      	cmpeq	r0, #0
 8100c86:	bf1c      	itt	ne
 8100c88:	f04f 31ff 	movne.w	r1, #4294967295
 8100c8c:	f04f 30ff 	movne.w	r0, #4294967295
 8100c90:	f000 b96a 	b.w	8100f68 <__aeabi_idiv0>
 8100c94:	f1ad 0c08 	sub.w	ip, sp, #8
 8100c98:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8100c9c:	f000 f806 	bl	8100cac <__udivmoddi4>
 8100ca0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8100ca4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8100ca8:	b004      	add	sp, #16
 8100caa:	4770      	bx	lr

08100cac <__udivmoddi4>:
 8100cac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8100cb0:	9d08      	ldr	r5, [sp, #32]
 8100cb2:	460c      	mov	r4, r1
 8100cb4:	2b00      	cmp	r3, #0
 8100cb6:	d14e      	bne.n	8100d56 <__udivmoddi4+0xaa>
 8100cb8:	4694      	mov	ip, r2
 8100cba:	458c      	cmp	ip, r1
 8100cbc:	4686      	mov	lr, r0
 8100cbe:	fab2 f282 	clz	r2, r2
 8100cc2:	d962      	bls.n	8100d8a <__udivmoddi4+0xde>
 8100cc4:	b14a      	cbz	r2, 8100cda <__udivmoddi4+0x2e>
 8100cc6:	f1c2 0320 	rsb	r3, r2, #32
 8100cca:	4091      	lsls	r1, r2
 8100ccc:	fa20 f303 	lsr.w	r3, r0, r3
 8100cd0:	fa0c fc02 	lsl.w	ip, ip, r2
 8100cd4:	4319      	orrs	r1, r3
 8100cd6:	fa00 fe02 	lsl.w	lr, r0, r2
 8100cda:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8100cde:	fa1f f68c 	uxth.w	r6, ip
 8100ce2:	fbb1 f4f7 	udiv	r4, r1, r7
 8100ce6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8100cea:	fb07 1114 	mls	r1, r7, r4, r1
 8100cee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8100cf2:	fb04 f106 	mul.w	r1, r4, r6
 8100cf6:	4299      	cmp	r1, r3
 8100cf8:	d90a      	bls.n	8100d10 <__udivmoddi4+0x64>
 8100cfa:	eb1c 0303 	adds.w	r3, ip, r3
 8100cfe:	f104 30ff 	add.w	r0, r4, #4294967295
 8100d02:	f080 8112 	bcs.w	8100f2a <__udivmoddi4+0x27e>
 8100d06:	4299      	cmp	r1, r3
 8100d08:	f240 810f 	bls.w	8100f2a <__udivmoddi4+0x27e>
 8100d0c:	3c02      	subs	r4, #2
 8100d0e:	4463      	add	r3, ip
 8100d10:	1a59      	subs	r1, r3, r1
 8100d12:	fa1f f38e 	uxth.w	r3, lr
 8100d16:	fbb1 f0f7 	udiv	r0, r1, r7
 8100d1a:	fb07 1110 	mls	r1, r7, r0, r1
 8100d1e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8100d22:	fb00 f606 	mul.w	r6, r0, r6
 8100d26:	429e      	cmp	r6, r3
 8100d28:	d90a      	bls.n	8100d40 <__udivmoddi4+0x94>
 8100d2a:	eb1c 0303 	adds.w	r3, ip, r3
 8100d2e:	f100 31ff 	add.w	r1, r0, #4294967295
 8100d32:	f080 80fc 	bcs.w	8100f2e <__udivmoddi4+0x282>
 8100d36:	429e      	cmp	r6, r3
 8100d38:	f240 80f9 	bls.w	8100f2e <__udivmoddi4+0x282>
 8100d3c:	4463      	add	r3, ip
 8100d3e:	3802      	subs	r0, #2
 8100d40:	1b9b      	subs	r3, r3, r6
 8100d42:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8100d46:	2100      	movs	r1, #0
 8100d48:	b11d      	cbz	r5, 8100d52 <__udivmoddi4+0xa6>
 8100d4a:	40d3      	lsrs	r3, r2
 8100d4c:	2200      	movs	r2, #0
 8100d4e:	e9c5 3200 	strd	r3, r2, [r5]
 8100d52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8100d56:	428b      	cmp	r3, r1
 8100d58:	d905      	bls.n	8100d66 <__udivmoddi4+0xba>
 8100d5a:	b10d      	cbz	r5, 8100d60 <__udivmoddi4+0xb4>
 8100d5c:	e9c5 0100 	strd	r0, r1, [r5]
 8100d60:	2100      	movs	r1, #0
 8100d62:	4608      	mov	r0, r1
 8100d64:	e7f5      	b.n	8100d52 <__udivmoddi4+0xa6>
 8100d66:	fab3 f183 	clz	r1, r3
 8100d6a:	2900      	cmp	r1, #0
 8100d6c:	d146      	bne.n	8100dfc <__udivmoddi4+0x150>
 8100d6e:	42a3      	cmp	r3, r4
 8100d70:	d302      	bcc.n	8100d78 <__udivmoddi4+0xcc>
 8100d72:	4290      	cmp	r0, r2
 8100d74:	f0c0 80f0 	bcc.w	8100f58 <__udivmoddi4+0x2ac>
 8100d78:	1a86      	subs	r6, r0, r2
 8100d7a:	eb64 0303 	sbc.w	r3, r4, r3
 8100d7e:	2001      	movs	r0, #1
 8100d80:	2d00      	cmp	r5, #0
 8100d82:	d0e6      	beq.n	8100d52 <__udivmoddi4+0xa6>
 8100d84:	e9c5 6300 	strd	r6, r3, [r5]
 8100d88:	e7e3      	b.n	8100d52 <__udivmoddi4+0xa6>
 8100d8a:	2a00      	cmp	r2, #0
 8100d8c:	f040 8090 	bne.w	8100eb0 <__udivmoddi4+0x204>
 8100d90:	eba1 040c 	sub.w	r4, r1, ip
 8100d94:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8100d98:	fa1f f78c 	uxth.w	r7, ip
 8100d9c:	2101      	movs	r1, #1
 8100d9e:	fbb4 f6f8 	udiv	r6, r4, r8
 8100da2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8100da6:	fb08 4416 	mls	r4, r8, r6, r4
 8100daa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8100dae:	fb07 f006 	mul.w	r0, r7, r6
 8100db2:	4298      	cmp	r0, r3
 8100db4:	d908      	bls.n	8100dc8 <__udivmoddi4+0x11c>
 8100db6:	eb1c 0303 	adds.w	r3, ip, r3
 8100dba:	f106 34ff 	add.w	r4, r6, #4294967295
 8100dbe:	d202      	bcs.n	8100dc6 <__udivmoddi4+0x11a>
 8100dc0:	4298      	cmp	r0, r3
 8100dc2:	f200 80cd 	bhi.w	8100f60 <__udivmoddi4+0x2b4>
 8100dc6:	4626      	mov	r6, r4
 8100dc8:	1a1c      	subs	r4, r3, r0
 8100dca:	fa1f f38e 	uxth.w	r3, lr
 8100dce:	fbb4 f0f8 	udiv	r0, r4, r8
 8100dd2:	fb08 4410 	mls	r4, r8, r0, r4
 8100dd6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8100dda:	fb00 f707 	mul.w	r7, r0, r7
 8100dde:	429f      	cmp	r7, r3
 8100de0:	d908      	bls.n	8100df4 <__udivmoddi4+0x148>
 8100de2:	eb1c 0303 	adds.w	r3, ip, r3
 8100de6:	f100 34ff 	add.w	r4, r0, #4294967295
 8100dea:	d202      	bcs.n	8100df2 <__udivmoddi4+0x146>
 8100dec:	429f      	cmp	r7, r3
 8100dee:	f200 80b0 	bhi.w	8100f52 <__udivmoddi4+0x2a6>
 8100df2:	4620      	mov	r0, r4
 8100df4:	1bdb      	subs	r3, r3, r7
 8100df6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8100dfa:	e7a5      	b.n	8100d48 <__udivmoddi4+0x9c>
 8100dfc:	f1c1 0620 	rsb	r6, r1, #32
 8100e00:	408b      	lsls	r3, r1
 8100e02:	fa22 f706 	lsr.w	r7, r2, r6
 8100e06:	431f      	orrs	r7, r3
 8100e08:	fa20 fc06 	lsr.w	ip, r0, r6
 8100e0c:	fa04 f301 	lsl.w	r3, r4, r1
 8100e10:	ea43 030c 	orr.w	r3, r3, ip
 8100e14:	40f4      	lsrs	r4, r6
 8100e16:	fa00 f801 	lsl.w	r8, r0, r1
 8100e1a:	0c38      	lsrs	r0, r7, #16
 8100e1c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8100e20:	fbb4 fef0 	udiv	lr, r4, r0
 8100e24:	fa1f fc87 	uxth.w	ip, r7
 8100e28:	fb00 441e 	mls	r4, r0, lr, r4
 8100e2c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8100e30:	fb0e f90c 	mul.w	r9, lr, ip
 8100e34:	45a1      	cmp	r9, r4
 8100e36:	fa02 f201 	lsl.w	r2, r2, r1
 8100e3a:	d90a      	bls.n	8100e52 <__udivmoddi4+0x1a6>
 8100e3c:	193c      	adds	r4, r7, r4
 8100e3e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8100e42:	f080 8084 	bcs.w	8100f4e <__udivmoddi4+0x2a2>
 8100e46:	45a1      	cmp	r9, r4
 8100e48:	f240 8081 	bls.w	8100f4e <__udivmoddi4+0x2a2>
 8100e4c:	f1ae 0e02 	sub.w	lr, lr, #2
 8100e50:	443c      	add	r4, r7
 8100e52:	eba4 0409 	sub.w	r4, r4, r9
 8100e56:	fa1f f983 	uxth.w	r9, r3
 8100e5a:	fbb4 f3f0 	udiv	r3, r4, r0
 8100e5e:	fb00 4413 	mls	r4, r0, r3, r4
 8100e62:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8100e66:	fb03 fc0c 	mul.w	ip, r3, ip
 8100e6a:	45a4      	cmp	ip, r4
 8100e6c:	d907      	bls.n	8100e7e <__udivmoddi4+0x1d2>
 8100e6e:	193c      	adds	r4, r7, r4
 8100e70:	f103 30ff 	add.w	r0, r3, #4294967295
 8100e74:	d267      	bcs.n	8100f46 <__udivmoddi4+0x29a>
 8100e76:	45a4      	cmp	ip, r4
 8100e78:	d965      	bls.n	8100f46 <__udivmoddi4+0x29a>
 8100e7a:	3b02      	subs	r3, #2
 8100e7c:	443c      	add	r4, r7
 8100e7e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8100e82:	fba0 9302 	umull	r9, r3, r0, r2
 8100e86:	eba4 040c 	sub.w	r4, r4, ip
 8100e8a:	429c      	cmp	r4, r3
 8100e8c:	46ce      	mov	lr, r9
 8100e8e:	469c      	mov	ip, r3
 8100e90:	d351      	bcc.n	8100f36 <__udivmoddi4+0x28a>
 8100e92:	d04e      	beq.n	8100f32 <__udivmoddi4+0x286>
 8100e94:	b155      	cbz	r5, 8100eac <__udivmoddi4+0x200>
 8100e96:	ebb8 030e 	subs.w	r3, r8, lr
 8100e9a:	eb64 040c 	sbc.w	r4, r4, ip
 8100e9e:	fa04 f606 	lsl.w	r6, r4, r6
 8100ea2:	40cb      	lsrs	r3, r1
 8100ea4:	431e      	orrs	r6, r3
 8100ea6:	40cc      	lsrs	r4, r1
 8100ea8:	e9c5 6400 	strd	r6, r4, [r5]
 8100eac:	2100      	movs	r1, #0
 8100eae:	e750      	b.n	8100d52 <__udivmoddi4+0xa6>
 8100eb0:	f1c2 0320 	rsb	r3, r2, #32
 8100eb4:	fa20 f103 	lsr.w	r1, r0, r3
 8100eb8:	fa0c fc02 	lsl.w	ip, ip, r2
 8100ebc:	fa24 f303 	lsr.w	r3, r4, r3
 8100ec0:	4094      	lsls	r4, r2
 8100ec2:	430c      	orrs	r4, r1
 8100ec4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8100ec8:	fa00 fe02 	lsl.w	lr, r0, r2
 8100ecc:	fa1f f78c 	uxth.w	r7, ip
 8100ed0:	fbb3 f0f8 	udiv	r0, r3, r8
 8100ed4:	fb08 3110 	mls	r1, r8, r0, r3
 8100ed8:	0c23      	lsrs	r3, r4, #16
 8100eda:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8100ede:	fb00 f107 	mul.w	r1, r0, r7
 8100ee2:	4299      	cmp	r1, r3
 8100ee4:	d908      	bls.n	8100ef8 <__udivmoddi4+0x24c>
 8100ee6:	eb1c 0303 	adds.w	r3, ip, r3
 8100eea:	f100 36ff 	add.w	r6, r0, #4294967295
 8100eee:	d22c      	bcs.n	8100f4a <__udivmoddi4+0x29e>
 8100ef0:	4299      	cmp	r1, r3
 8100ef2:	d92a      	bls.n	8100f4a <__udivmoddi4+0x29e>
 8100ef4:	3802      	subs	r0, #2
 8100ef6:	4463      	add	r3, ip
 8100ef8:	1a5b      	subs	r3, r3, r1
 8100efa:	b2a4      	uxth	r4, r4
 8100efc:	fbb3 f1f8 	udiv	r1, r3, r8
 8100f00:	fb08 3311 	mls	r3, r8, r1, r3
 8100f04:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8100f08:	fb01 f307 	mul.w	r3, r1, r7
 8100f0c:	42a3      	cmp	r3, r4
 8100f0e:	d908      	bls.n	8100f22 <__udivmoddi4+0x276>
 8100f10:	eb1c 0404 	adds.w	r4, ip, r4
 8100f14:	f101 36ff 	add.w	r6, r1, #4294967295
 8100f18:	d213      	bcs.n	8100f42 <__udivmoddi4+0x296>
 8100f1a:	42a3      	cmp	r3, r4
 8100f1c:	d911      	bls.n	8100f42 <__udivmoddi4+0x296>
 8100f1e:	3902      	subs	r1, #2
 8100f20:	4464      	add	r4, ip
 8100f22:	1ae4      	subs	r4, r4, r3
 8100f24:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8100f28:	e739      	b.n	8100d9e <__udivmoddi4+0xf2>
 8100f2a:	4604      	mov	r4, r0
 8100f2c:	e6f0      	b.n	8100d10 <__udivmoddi4+0x64>
 8100f2e:	4608      	mov	r0, r1
 8100f30:	e706      	b.n	8100d40 <__udivmoddi4+0x94>
 8100f32:	45c8      	cmp	r8, r9
 8100f34:	d2ae      	bcs.n	8100e94 <__udivmoddi4+0x1e8>
 8100f36:	ebb9 0e02 	subs.w	lr, r9, r2
 8100f3a:	eb63 0c07 	sbc.w	ip, r3, r7
 8100f3e:	3801      	subs	r0, #1
 8100f40:	e7a8      	b.n	8100e94 <__udivmoddi4+0x1e8>
 8100f42:	4631      	mov	r1, r6
 8100f44:	e7ed      	b.n	8100f22 <__udivmoddi4+0x276>
 8100f46:	4603      	mov	r3, r0
 8100f48:	e799      	b.n	8100e7e <__udivmoddi4+0x1d2>
 8100f4a:	4630      	mov	r0, r6
 8100f4c:	e7d4      	b.n	8100ef8 <__udivmoddi4+0x24c>
 8100f4e:	46d6      	mov	lr, sl
 8100f50:	e77f      	b.n	8100e52 <__udivmoddi4+0x1a6>
 8100f52:	4463      	add	r3, ip
 8100f54:	3802      	subs	r0, #2
 8100f56:	e74d      	b.n	8100df4 <__udivmoddi4+0x148>
 8100f58:	4606      	mov	r6, r0
 8100f5a:	4623      	mov	r3, r4
 8100f5c:	4608      	mov	r0, r1
 8100f5e:	e70f      	b.n	8100d80 <__udivmoddi4+0xd4>
 8100f60:	3e02      	subs	r6, #2
 8100f62:	4463      	add	r3, ip
 8100f64:	e730      	b.n	8100dc8 <__udivmoddi4+0x11c>
 8100f66:	bf00      	nop

08100f68 <__aeabi_idiv0>:
 8100f68:	4770      	bx	lr
 8100f6a:	bf00      	nop

08100f6c <_ZN10LogPrinterC1Ev>:

#include <stdarg.h> // Include this for va_list and related functions

extern osMutexId_t printMutexHandle;

LogPrinter::LogPrinter() : mutexHandle(printMutexHandle) {}
 8100f6c:	b480      	push	{r7}
 8100f6e:	b083      	sub	sp, #12
 8100f70:	af00      	add	r7, sp, #0
 8100f72:	6078      	str	r0, [r7, #4]
 8100f74:	4b05      	ldr	r3, [pc, #20]	@ (8100f8c <_ZN10LogPrinterC1Ev+0x20>)
 8100f76:	681a      	ldr	r2, [r3, #0]
 8100f78:	687b      	ldr	r3, [r7, #4]
 8100f7a:	601a      	str	r2, [r3, #0]
 8100f7c:	687b      	ldr	r3, [r7, #4]
 8100f7e:	4618      	mov	r0, r3
 8100f80:	370c      	adds	r7, #12
 8100f82:	46bd      	mov	sp, r7
 8100f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100f88:	4770      	bx	lr
 8100f8a:	bf00      	nop
 8100f8c:	100001c8 	.word	0x100001c8

08100f90 <_ZN10LogPrinter8instanceEv>:

LogPrinter& LogPrinter::instance()
{
 8100f90:	b580      	push	{r7, lr}
 8100f92:	af00      	add	r7, sp, #0
    static LogPrinter inst;
 8100f94:	4b10      	ldr	r3, [pc, #64]	@ (8100fd8 <_ZN10LogPrinter8instanceEv+0x48>)
 8100f96:	681b      	ldr	r3, [r3, #0]
 8100f98:	f3bf 8f5b 	dmb	ish
 8100f9c:	f003 0301 	and.w	r3, r3, #1
 8100fa0:	2b00      	cmp	r3, #0
 8100fa2:	bf0c      	ite	eq
 8100fa4:	2301      	moveq	r3, #1
 8100fa6:	2300      	movne	r3, #0
 8100fa8:	b2db      	uxtb	r3, r3
 8100faa:	2b00      	cmp	r3, #0
 8100fac:	d010      	beq.n	8100fd0 <_ZN10LogPrinter8instanceEv+0x40>
 8100fae:	480a      	ldr	r0, [pc, #40]	@ (8100fd8 <_ZN10LogPrinter8instanceEv+0x48>)
 8100fb0:	f021 fdcc 	bl	8122b4c <__cxa_guard_acquire>
 8100fb4:	4603      	mov	r3, r0
 8100fb6:	2b00      	cmp	r3, #0
 8100fb8:	bf14      	ite	ne
 8100fba:	2301      	movne	r3, #1
 8100fbc:	2300      	moveq	r3, #0
 8100fbe:	b2db      	uxtb	r3, r3
 8100fc0:	2b00      	cmp	r3, #0
 8100fc2:	d005      	beq.n	8100fd0 <_ZN10LogPrinter8instanceEv+0x40>
 8100fc4:	4805      	ldr	r0, [pc, #20]	@ (8100fdc <_ZN10LogPrinter8instanceEv+0x4c>)
 8100fc6:	f7ff ffd1 	bl	8100f6c <_ZN10LogPrinterC1Ev>
 8100fca:	4803      	ldr	r0, [pc, #12]	@ (8100fd8 <_ZN10LogPrinter8instanceEv+0x48>)
 8100fcc:	f021 fdca 	bl	8122b64 <__cxa_guard_release>
    return inst;
 8100fd0:	4b02      	ldr	r3, [pc, #8]	@ (8100fdc <_ZN10LogPrinter8instanceEv+0x4c>)
}
 8100fd2:	4618      	mov	r0, r3
 8100fd4:	bd80      	pop	{r7, pc}
 8100fd6:	bf00      	nop
 8100fd8:	100000b0 	.word	0x100000b0
 8100fdc:	100000ac 	.word	0x100000ac

08100fe0 <_ZN10LogPrinter10printDebugEPKcz>:

void LogPrinter::printDebug(const char* format, ...)
{
 8100fe0:	b40e      	push	{r1, r2, r3}
 8100fe2:	b580      	push	{r7, lr}
 8100fe4:	b085      	sub	sp, #20
 8100fe6:	af00      	add	r7, sp, #0
 8100fe8:	6078      	str	r0, [r7, #4]
    osMutexAcquire(mutexHandle, portMAX_DELAY);
 8100fea:	687b      	ldr	r3, [r7, #4]
 8100fec:	681b      	ldr	r3, [r3, #0]
 8100fee:	f04f 31ff 	mov.w	r1, #4294967295
 8100ff2:	4618      	mov	r0, r3
 8100ff4:	f011 fe0c 	bl	8112c10 <osMutexAcquire>
    va_list args;
    va_start(args, format); // Initialize args
 8100ff8:	f107 0320 	add.w	r3, r7, #32
 8100ffc:	60fb      	str	r3, [r7, #12]
    vfprintf(stdout, format, args); // Use vfprintf to handle variable arguments
 8100ffe:	4b11      	ldr	r3, [pc, #68]	@ (8101044 <_ZN10LogPrinter10printDebugEPKcz+0x64>)
 8101000:	681b      	ldr	r3, [r3, #0]
 8101002:	689b      	ldr	r3, [r3, #8]
 8101004:	68fa      	ldr	r2, [r7, #12]
 8101006:	69f9      	ldr	r1, [r7, #28]
 8101008:	4618      	mov	r0, r3
 810100a:	f022 fa93 	bl	8123534 <vfiprintf>
    fprintf(stdout, "\r\n");
 810100e:	4b0d      	ldr	r3, [pc, #52]	@ (8101044 <_ZN10LogPrinter10printDebugEPKcz+0x64>)
 8101010:	681b      	ldr	r3, [r3, #0]
 8101012:	689b      	ldr	r3, [r3, #8]
 8101014:	2202      	movs	r2, #2
 8101016:	2101      	movs	r1, #1
 8101018:	480b      	ldr	r0, [pc, #44]	@ (8101048 <_ZN10LogPrinter10printDebugEPKcz+0x68>)
 810101a:	f022 fdf1 	bl	8123c00 <fwrite>
    fflush(stdout);
 810101e:	4b09      	ldr	r3, [pc, #36]	@ (8101044 <_ZN10LogPrinter10printDebugEPKcz+0x64>)
 8101020:	681b      	ldr	r3, [r3, #0]
 8101022:	689b      	ldr	r3, [r3, #8]
 8101024:	4618      	mov	r0, r3
 8101026:	f022 fcc9 	bl	81239bc <fflush>
    va_end(args); // Clean up the va_list
    osMutexRelease(mutexHandle);
 810102a:	687b      	ldr	r3, [r7, #4]
 810102c:	681b      	ldr	r3, [r3, #0]
 810102e:	4618      	mov	r0, r3
 8101030:	f011 fe39 	bl	8112ca6 <osMutexRelease>
}
 8101034:	bf00      	nop
 8101036:	3714      	adds	r7, #20
 8101038:	46bd      	mov	sp, r7
 810103a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 810103e:	b003      	add	sp, #12
 8101040:	4770      	bx	lr
 8101042:	bf00      	nop
 8101044:	10000040 	.word	0x10000040
 8101048:	08124bd4 	.word	0x08124bd4

0810104c <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 810104c:	b580      	push	{r7, lr}
 810104e:	b082      	sub	sp, #8
 8101050:	af00      	add	r7, sp, #0
 8101052:	6078      	str	r0, [r7, #4]
    if((SemMask &  __HAL_HSEM_SEMID_TO_MASK(HSEM_RX_ID))!= 0)
 8101054:	687b      	ldr	r3, [r7, #4]
 8101056:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 810105a:	2b00      	cmp	r3, #0
 810105c:	d005      	beq.n	810106a <HAL_HSEM_FreeCallback+0x1e>
    {
        /* Re-Activate HSEM notification */
        HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_RX_ID));
 810105e:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 8101062:	f00d f999 	bl	810e398 <HAL_HSEM_ActivateNotification>
        /* New message received */
        prvCoreInterruptHandler();
 8101066:	f000 f845 	bl	81010f4 <prvCoreInterruptHandler>
    }

    if((SemMask & __HAL_HSEM_SEMID_TO_MASK(HSEM_TX_WAKEUP)) !=0)
 810106a:	687b      	ldr	r3, [r7, #4]
 810106c:	2b00      	cmp	r3, #0
 810106e:	da05      	bge.n	810107c <HAL_HSEM_FreeCallback+0x30>
    {
        /* Re-Activate HSEM notification */
        HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_TX_WAKEUP));
 8101070:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 8101074:	f00d f990 	bl	810e398 <HAL_HSEM_ActivateNotification>
        /* TX queue is empty => wake-up task trying to send a message */
        prvCoreWakeupInterruptHandler();
 8101078:	f000 f860 	bl	810113c <prvCoreWakeupInterruptHandler>
    }
}
 810107c:	bf00      	nop
 810107e:	3708      	adds	r7, #8
 8101080:	46bd      	mov	sp, r7
 8101082:	bd80      	pop	{r7, pc}

08101084 <ipc_init>:

int ipc_init(void)
{
 8101084:	b580      	push	{r7, lr}
 8101086:	b082      	sub	sp, #8
 8101088:	af02      	add	r7, sp, #8
#ifdef CORE_CM7
	memset((void*)(&shared_ram.cm7_to_cm4_buffer), 0, CM7_TO_CM4_BUFFER_SIZE);
	memset((void*)(&shared_ram.cm4_to_cm7_buffer), 0, CM4_TO_CM7_BUFFER_SIZE);
#endif
    shared_ram.cm7_to_cm4_handle = xMessageBufferCreateStatic(CM7_TO_CM4_BUFFER_SIZE, (uint8_t*)shared_ram.cm7_to_cm4_buffer,(StaticMessageBuffer_t*) &shared_ram.cm7_to_cm4_xmsg);
 810108a:	4b0e      	ldr	r3, [pc, #56]	@ (81010c4 <ipc_init+0x40>)
 810108c:	9300      	str	r3, [sp, #0]
 810108e:	4b0e      	ldr	r3, [pc, #56]	@ (81010c8 <ipc_init+0x44>)
 8101090:	2201      	movs	r2, #1
 8101092:	2100      	movs	r1, #0
 8101094:	f640 3054 	movw	r0, #2900	@ 0xb54
 8101098:	f013 fea4 	bl	8114de4 <xStreamBufferGenericCreateStatic>
 810109c:	4603      	mov	r3, r0
 810109e:	4a0b      	ldr	r2, [pc, #44]	@ (81010cc <ipc_init+0x48>)
 81010a0:	6013      	str	r3, [r2, #0]
    shared_ram.cm4_to_cm7_handle = xMessageBufferCreateStatic(CM4_TO_CM7_BUFFER_SIZE, (uint8_t*)shared_ram.cm4_to_cm7_buffer,(StaticMessageBuffer_t*) &shared_ram.cm4_to_cm7_xmsg);
 81010a2:	4b0b      	ldr	r3, [pc, #44]	@ (81010d0 <ipc_init+0x4c>)
 81010a4:	9300      	str	r3, [sp, #0]
 81010a6:	4b0b      	ldr	r3, [pc, #44]	@ (81010d4 <ipc_init+0x50>)
 81010a8:	2201      	movs	r2, #1
 81010aa:	2100      	movs	r1, #0
 81010ac:	f640 3054 	movw	r0, #2900	@ 0xb54
 81010b0:	f013 fe98 	bl	8114de4 <xStreamBufferGenericCreateStatic>
 81010b4:	4603      	mov	r3, r0
 81010b6:	4a05      	ldr	r2, [pc, #20]	@ (81010cc <ipc_init+0x48>)
 81010b8:	6053      	str	r3, [r2, #4]

    return 0;
 81010ba:	2300      	movs	r3, #0
}
 81010bc:	4618      	mov	r0, r3
 81010be:	46bd      	mov	sp, r7
 81010c0:	bd80      	pop	{r7, pc}
 81010c2:	bf00      	nop
 81010c4:	38000008 	.word	0x38000008
 81010c8:	38000050 	.word	0x38000050
 81010cc:	38000000 	.word	0x38000000
 81010d0:	3800002c 	.word	0x3800002c
 81010d4:	38000ba4 	.word	0x38000ba4

081010d8 <ipc_start>:

int ipc_start(void){
 81010d8:	b580      	push	{r7, lr}
 81010da:	af00      	add	r7, sp, #0
    HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_RX_ID));
 81010dc:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 81010e0:	f00d f95a 	bl	810e398 <HAL_HSEM_ActivateNotification>
    HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_TX_WAKEUP));
 81010e4:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 81010e8:	f00d f956 	bl	810e398 <HAL_HSEM_ActivateNotification>
    return 0;
 81010ec:	2300      	movs	r3, #0
}
 81010ee:	4618      	mov	r0, r3
 81010f0:	bd80      	pop	{r7, pc}
	...

081010f4 <prvCoreInterruptHandler>:

static void prvCoreInterruptHandler(void)
{
 81010f4:	b580      	push	{r7, lr}
 81010f6:	b082      	sub	sp, #8
 81010f8:	af00      	add	r7, sp, #0
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 81010fa:	2300      	movs	r3, #0
 81010fc:	607b      	str	r3, [r7, #4]

    if (!xrx_data_buf)
 81010fe:	4b0d      	ldr	r3, [pc, #52]	@ (8101134 <prvCoreInterruptHandler+0x40>)
 8101100:	681b      	ldr	r3, [r3, #0]
 8101102:	2b00      	cmp	r3, #0
 8101104:	d012      	beq.n	810112c <prvCoreInterruptHandler+0x38>
    {
    	return;
    }

	xMessageBufferSendCompletedFromISR(xrx_data_buf, &xHigherPriorityTaskWoken);
 8101106:	4b0b      	ldr	r3, [pc, #44]	@ (8101134 <prvCoreInterruptHandler+0x40>)
 8101108:	681b      	ldr	r3, [r3, #0]
 810110a:	1d3a      	adds	r2, r7, #4
 810110c:	4611      	mov	r1, r2
 810110e:	4618      	mov	r0, r3
 8101110:	f014 f8c4 	bl	811529c <xStreamBufferSendCompletedFromISR>

    /* Normal FreeRTOS yield from interrupt semantics, where
       xHigherPriorityTaskWoken is initialzed to pdFALSE and will then get set
       to pdTRUE if the interrupt safe API unblocks a task that has a priority
       above that of the currently executing task. */
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8101114:	687b      	ldr	r3, [r7, #4]
 8101116:	2b00      	cmp	r3, #0
 8101118:	d009      	beq.n	810112e <prvCoreInterruptHandler+0x3a>
 810111a:	4b07      	ldr	r3, [pc, #28]	@ (8101138 <prvCoreInterruptHandler+0x44>)
 810111c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8101120:	601a      	str	r2, [r3, #0]
 8101122:	f3bf 8f4f 	dsb	sy
 8101126:	f3bf 8f6f 	isb	sy
 810112a:	e000      	b.n	810112e <prvCoreInterruptHandler+0x3a>
    	return;
 810112c:	bf00      	nop
}
 810112e:	3708      	adds	r7, #8
 8101130:	46bd      	mov	sp, r7
 8101132:	bd80      	pop	{r7, pc}
 8101134:	38000000 	.word	0x38000000
 8101138:	e000ed04 	.word	0xe000ed04

0810113c <prvCoreWakeupInterruptHandler>:

static void prvCoreWakeupInterruptHandler(void)
{
 810113c:	b580      	push	{r7, lr}
 810113e:	b082      	sub	sp, #8
 8101140:	af00      	add	r7, sp, #0
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8101142:	2300      	movs	r3, #0
 8101144:	607b      	str	r3, [r7, #4]

    if (!xtx_data_buf)
 8101146:	4b0d      	ldr	r3, [pc, #52]	@ (810117c <prvCoreWakeupInterruptHandler+0x40>)
 8101148:	685b      	ldr	r3, [r3, #4]
 810114a:	2b00      	cmp	r3, #0
 810114c:	d012      	beq.n	8101174 <prvCoreWakeupInterruptHandler+0x38>
    {
    	return;
    }

	xMessageBufferReceiveCompletedFromISR(xtx_data_buf, &xHigherPriorityTaskWoken);
 810114e:	4b0b      	ldr	r3, [pc, #44]	@ (810117c <prvCoreWakeupInterruptHandler+0x40>)
 8101150:	685b      	ldr	r3, [r3, #4]
 8101152:	1d3a      	adds	r2, r7, #4
 8101154:	4611      	mov	r1, r2
 8101156:	4618      	mov	r0, r3
 8101158:	f014 f8e4 	bl	8115324 <xStreamBufferReceiveCompletedFromISR>

    /* Normal FreeRTOS yield from interrupt semantics, where
       xHigherPriorityTaskWoken is initialzed to pdFALSE and will then get set
       to pdTRUE if the interrupt safe API unblocks a task that has a priority
       above that of the currently executing task. */
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 810115c:	687b      	ldr	r3, [r7, #4]
 810115e:	2b00      	cmp	r3, #0
 8101160:	d009      	beq.n	8101176 <prvCoreWakeupInterruptHandler+0x3a>
 8101162:	4b07      	ldr	r3, [pc, #28]	@ (8101180 <prvCoreWakeupInterruptHandler+0x44>)
 8101164:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8101168:	601a      	str	r2, [r3, #0]
 810116a:	f3bf 8f4f 	dsb	sy
 810116e:	f3bf 8f6f 	isb	sy
 8101172:	e000      	b.n	8101176 <prvCoreWakeupInterruptHandler+0x3a>
    	return;
 8101174:	bf00      	nop
}
 8101176:	3708      	adds	r7, #8
 8101178:	46bd      	mov	sp, r7
 810117a:	bd80      	pop	{r7, pc}
 810117c:	38000000 	.word	0x38000000
 8101180:	e000ed04 	.word	0xe000ed04

08101184 <vGenerateRemoteInterrupt>:

void vGenerateRemoteInterrupt(void * xUpdatedMessageBuffer)
{
 8101184:	b580      	push	{r7, lr}
 8101186:	b084      	sub	sp, #16
 8101188:	af00      	add	r7, sp, #0
 810118a:	6078      	str	r0, [r7, #4]
    MessageBufferHandle_t xUpdatedBuffer =
 810118c:	687b      	ldr	r3, [r7, #4]
 810118e:	60fb      	str	r3, [r7, #12]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8101190:	f3bf 8f4f 	dsb	sy
}
 8101194:	bf00      	nop
        (MessageBufferHandle_t)xUpdatedMessageBuffer;

	__DSB();
    if (xUpdatedBuffer == xtx_data_buf)
 8101196:	4b12      	ldr	r3, [pc, #72]	@ (81011e0 <vGenerateRemoteInterrupt+0x5c>)
 8101198:	685b      	ldr	r3, [r3, #4]
 810119a:	68fa      	ldr	r2, [r7, #12]
 810119c:	429a      	cmp	r2, r3
 810119e:	d10b      	bne.n	81011b8 <vGenerateRemoteInterrupt+0x34>
    {

        /* Take the HW Semaphore with Process1 ID  */
        if(HAL_HSEM_Take(HSEM_TX_ID, HSEM_PROCESS) == HAL_OK)
 81011a0:	211b      	movs	r1, #27
 81011a2:	201d      	movs	r0, #29
 81011a4:	f00d f8c0 	bl	810e328 <HAL_HSEM_Take>
 81011a8:	4603      	mov	r3, r0
 81011aa:	2b00      	cmp	r3, #0
 81011ac:	d114      	bne.n	81011d8 <vGenerateRemoteInterrupt+0x54>
        {
            /* Release the HW Semaphore */
            HAL_HSEM_Release(HSEM_TX_ID, HSEM_PROCESS);
 81011ae:	211b      	movs	r1, #27
 81011b0:	201d      	movs	r0, #29
 81011b2:	f00d f8dd 	bl	810e370 <HAL_HSEM_Release>
		{
			/* Release the HW Semaphore */
			HAL_HSEM_Release(HSEM_RX_WAKEUP, HSEM_PROCESS);
		}
    }
}
 81011b6:	e00f      	b.n	81011d8 <vGenerateRemoteInterrupt+0x54>
    else if(xUpdatedBuffer == xrx_data_buf){
 81011b8:	4b09      	ldr	r3, [pc, #36]	@ (81011e0 <vGenerateRemoteInterrupt+0x5c>)
 81011ba:	681b      	ldr	r3, [r3, #0]
 81011bc:	68fa      	ldr	r2, [r7, #12]
 81011be:	429a      	cmp	r2, r3
 81011c0:	d10a      	bne.n	81011d8 <vGenerateRemoteInterrupt+0x54>
		if(HAL_HSEM_Take(HSEM_RX_WAKEUP, HSEM_PROCESS) == HAL_OK)
 81011c2:	211b      	movs	r1, #27
 81011c4:	201e      	movs	r0, #30
 81011c6:	f00d f8af 	bl	810e328 <HAL_HSEM_Take>
 81011ca:	4603      	mov	r3, r0
 81011cc:	2b00      	cmp	r3, #0
 81011ce:	d103      	bne.n	81011d8 <vGenerateRemoteInterrupt+0x54>
			HAL_HSEM_Release(HSEM_RX_WAKEUP, HSEM_PROCESS);
 81011d0:	211b      	movs	r1, #27
 81011d2:	201e      	movs	r0, #30
 81011d4:	f00d f8cc 	bl	810e370 <HAL_HSEM_Release>
}
 81011d8:	bf00      	nop
 81011da:	3710      	adds	r7, #16
 81011dc:	46bd      	mov	sp, r7
 81011de:	bd80      	pop	{r7, pc}
 81011e0:	38000000 	.word	0x38000000

081011e4 <ipc_sendmsg>:

size_t ipc_sendmsg(ipc_msg* msg, uint32_t size, int32_t timeout)
{
 81011e4:	b580      	push	{r7, lr}
 81011e6:	b086      	sub	sp, #24
 81011e8:	af00      	add	r7, sp, #0
 81011ea:	60f8      	str	r0, [r7, #12]
 81011ec:	60b9      	str	r1, [r7, #8]
 81011ee:	607a      	str	r2, [r7, #4]
	size_t len;

    if(xtx_data_buf == 0)
 81011f0:	4b0f      	ldr	r3, [pc, #60]	@ (8101230 <ipc_sendmsg+0x4c>)
 81011f2:	685b      	ldr	r3, [r3, #4]
 81011f4:	2b00      	cmp	r3, #0
 81011f6:	d101      	bne.n	81011fc <ipc_sendmsg+0x18>
      return 0;
 81011f8:	2300      	movs	r3, #0
 81011fa:	e015      	b.n	8101228 <ipc_sendmsg+0x44>

    if(timeout < 0)
 81011fc:	687b      	ldr	r3, [r7, #4]
 81011fe:	2b00      	cmp	r3, #0
 8101200:	da09      	bge.n	8101216 <ipc_sendmsg+0x32>
    	len = xMessageBufferSend(xtx_data_buf, msg, size, portMAX_DELAY);
 8101202:	4b0b      	ldr	r3, [pc, #44]	@ (8101230 <ipc_sendmsg+0x4c>)
 8101204:	6858      	ldr	r0, [r3, #4]
 8101206:	f04f 33ff 	mov.w	r3, #4294967295
 810120a:	68ba      	ldr	r2, [r7, #8]
 810120c:	68f9      	ldr	r1, [r7, #12]
 810120e:	f013 fea3 	bl	8114f58 <xStreamBufferSend>
 8101212:	6178      	str	r0, [r7, #20]
 8101214:	e007      	b.n	8101226 <ipc_sendmsg+0x42>
    else
    	len = xMessageBufferSend(xtx_data_buf, msg, size, (TickType_t)timeout);
 8101216:	4b06      	ldr	r3, [pc, #24]	@ (8101230 <ipc_sendmsg+0x4c>)
 8101218:	6858      	ldr	r0, [r3, #4]
 810121a:	687b      	ldr	r3, [r7, #4]
 810121c:	68ba      	ldr	r2, [r7, #8]
 810121e:	68f9      	ldr	r1, [r7, #12]
 8101220:	f013 fe9a 	bl	8114f58 <xStreamBufferSend>
 8101224:	6178      	str	r0, [r7, #20]

    return len;
 8101226:	697b      	ldr	r3, [r7, #20]
}
 8101228:	4618      	mov	r0, r3
 810122a:	3718      	adds	r7, #24
 810122c:	46bd      	mov	sp, r7
 810122e:	bd80      	pop	{r7, pc}
 8101230:	38000000 	.word	0x38000000

08101234 <ipc_recvmsg>:

size_t ipc_recvmsg(ipc_msg* msg, uint32_t size, int32_t timeout)
{
 8101234:	b580      	push	{r7, lr}
 8101236:	b086      	sub	sp, #24
 8101238:	af00      	add	r7, sp, #0
 810123a:	60f8      	str	r0, [r7, #12]
 810123c:	60b9      	str	r1, [r7, #8]
 810123e:	607a      	str	r2, [r7, #4]
    size_t len;

    if (timeout < 0)
 8101240:	687b      	ldr	r3, [r7, #4]
 8101242:	2b00      	cmp	r3, #0
 8101244:	da09      	bge.n	810125a <ipc_recvmsg+0x26>
        len = xMessageBufferReceive(xrx_data_buf, msg, size, portMAX_DELAY);
 8101246:	4b0b      	ldr	r3, [pc, #44]	@ (8101274 <ipc_recvmsg+0x40>)
 8101248:	6818      	ldr	r0, [r3, #0]
 810124a:	f04f 33ff 	mov.w	r3, #4294967295
 810124e:	68ba      	ldr	r2, [r7, #8]
 8101250:	68f9      	ldr	r1, [r7, #12]
 8101252:	f013 ff68 	bl	8115126 <xStreamBufferReceive>
 8101256:	6178      	str	r0, [r7, #20]
 8101258:	e007      	b.n	810126a <ipc_recvmsg+0x36>
    else
        len = xMessageBufferReceive(xrx_data_buf, msg, size, (TickType_t)timeout);
 810125a:	4b06      	ldr	r3, [pc, #24]	@ (8101274 <ipc_recvmsg+0x40>)
 810125c:	6818      	ldr	r0, [r3, #0]
 810125e:	687b      	ldr	r3, [r7, #4]
 8101260:	68ba      	ldr	r2, [r7, #8]
 8101262:	68f9      	ldr	r1, [r7, #12]
 8101264:	f013 ff5f 	bl	8115126 <xStreamBufferReceive>
 8101268:	6178      	str	r0, [r7, #20]

    return len;
 810126a:	697b      	ldr	r3, [r7, #20]
}
 810126c:	4618      	mov	r0, r3
 810126e:	3718      	adds	r7, #24
 8101270:	46bd      	mov	sp, r7
 8101272:	bd80      	pop	{r7, pc}
 8101274:	38000000 	.word	0x38000000

08101278 <__is_constant_evaluated>:
  // This can be used without checking if the compiler supports the feature.
  // The macro _GLIBCXX_HAVE_IS_CONSTANT_EVALUATED can be used to check if
  // the compiler support is present to make this function work as expected.
  _GLIBCXX_CONSTEXPR inline bool
  __is_constant_evaluated() _GLIBCXX_NOEXCEPT
  {
 8101278:	b480      	push	{r7}
 810127a:	af00      	add	r7, sp, #0
#if __cpp_if_consteval >= 202106L
# define _GLIBCXX_HAVE_IS_CONSTANT_EVALUATED 1
    if consteval { return true; } else { return false; }
#elif __cplusplus >= 201103L && __has_builtin(__builtin_is_constant_evaluated)
# define _GLIBCXX_HAVE_IS_CONSTANT_EVALUATED 1
    return __builtin_is_constant_evaluated();
 810127c:	2300      	movs	r3, #0
#else
    return false;
#endif
  }
 810127e:	4618      	mov	r0, r3
 8101280:	46bd      	mov	sp, r7
 8101282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101286:	4770      	bx	lr

08101288 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8101288:	b480      	push	{r7}
 810128a:	b083      	sub	sp, #12
 810128c:	af00      	add	r7, sp, #0
 810128e:	6078      	str	r0, [r7, #4]
 8101290:	6039      	str	r1, [r7, #0]
 8101292:	683b      	ldr	r3, [r7, #0]
 8101294:	4618      	mov	r0, r3
 8101296:	370c      	adds	r7, #12
 8101298:	46bd      	mov	sp, r7
 810129a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810129e:	4770      	bx	lr

081012a0 <_ZNKSt4hashIaEclEa>:

  /// Explicit specialization for char.
  _Cxx_hashtable_define_trivial_hash(char)

  /// Explicit specialization for signed char.
  _Cxx_hashtable_define_trivial_hash(signed char)
 81012a0:	b480      	push	{r7}
 81012a2:	b083      	sub	sp, #12
 81012a4:	af00      	add	r7, sp, #0
 81012a6:	6078      	str	r0, [r7, #4]
 81012a8:	460b      	mov	r3, r1
 81012aa:	70fb      	strb	r3, [r7, #3]
 81012ac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 81012b0:	4618      	mov	r0, r3
 81012b2:	370c      	adds	r7, #12
 81012b4:	46bd      	mov	sp, r7
 81012b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81012ba:	4770      	bx	lr

081012bc <_ZNSt8__detail15_Hash_node_baseC1Ev>:
   */
  struct _Hash_node_base
  {
    _Hash_node_base* _M_nxt;

    _Hash_node_base() noexcept : _M_nxt() { }
 81012bc:	b480      	push	{r7}
 81012be:	b083      	sub	sp, #12
 81012c0:	af00      	add	r7, sp, #0
 81012c2:	6078      	str	r0, [r7, #4]
 81012c4:	687b      	ldr	r3, [r7, #4]
 81012c6:	2200      	movs	r2, #0
 81012c8:	601a      	str	r2, [r3, #0]
 81012ca:	687b      	ldr	r3, [r7, #4]
 81012cc:	4618      	mov	r0, r3
 81012ce:	370c      	adds	r7, #12
 81012d0:	46bd      	mov	sp, r7
 81012d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81012d6:	4770      	bx	lr

081012d8 <_ZNKSt8__detail18_Mod_range_hashingclEjj>:
    typedef std::size_t first_argument_type;
    typedef std::size_t second_argument_type;
    typedef std::size_t result_type;

    result_type
    operator()(first_argument_type __num,
 81012d8:	b480      	push	{r7}
 81012da:	b085      	sub	sp, #20
 81012dc:	af00      	add	r7, sp, #0
 81012de:	60f8      	str	r0, [r7, #12]
 81012e0:	60b9      	str	r1, [r7, #8]
 81012e2:	607a      	str	r2, [r7, #4]
	       second_argument_type __den) const noexcept
    { return __num % __den; }
 81012e4:	68bb      	ldr	r3, [r7, #8]
 81012e6:	687a      	ldr	r2, [r7, #4]
 81012e8:	fbb3 f2f2 	udiv	r2, r3, r2
 81012ec:	6879      	ldr	r1, [r7, #4]
 81012ee:	fb01 f202 	mul.w	r2, r1, r2
 81012f2:	1a9b      	subs	r3, r3, r2
 81012f4:	4618      	mov	r0, r3
 81012f6:	3714      	adds	r7, #20
 81012f8:	46bd      	mov	sp, r7
 81012fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 81012fe:	4770      	bx	lr

08101300 <_ZNSt8__detail20_Prime_rehash_policyC1Ef>:
  /// smallest prime that keeps the load factor small enough.
  struct _Prime_rehash_policy
  {
    using __has_load_factor = true_type;

    _Prime_rehash_policy(float __z = 1.0) noexcept
 8101300:	b480      	push	{r7}
 8101302:	b083      	sub	sp, #12
 8101304:	af00      	add	r7, sp, #0
 8101306:	6078      	str	r0, [r7, #4]
 8101308:	ed87 0a00 	vstr	s0, [r7]
    : _M_max_load_factor(__z), _M_next_resize(0) { }
 810130c:	687b      	ldr	r3, [r7, #4]
 810130e:	683a      	ldr	r2, [r7, #0]
 8101310:	601a      	str	r2, [r3, #0]
 8101312:	687b      	ldr	r3, [r7, #4]
 8101314:	2200      	movs	r2, #0
 8101316:	605a      	str	r2, [r3, #4]
 8101318:	687b      	ldr	r3, [r7, #4]
 810131a:	4618      	mov	r0, r3
 810131c:	370c      	adds	r7, #12
 810131e:	46bd      	mov	sp, r7
 8101320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101324:	4770      	bx	lr

08101326 <_ZNKSt8__detail20_Prime_rehash_policy8_M_stateEv>:
		   std::size_t __n_ins) const;

    typedef std::size_t _State;

    _State
    _M_state() const
 8101326:	b480      	push	{r7}
 8101328:	b083      	sub	sp, #12
 810132a:	af00      	add	r7, sp, #0
 810132c:	6078      	str	r0, [r7, #4]
    { return _M_next_resize; }
 810132e:	687b      	ldr	r3, [r7, #4]
 8101330:	685b      	ldr	r3, [r3, #4]
 8101332:	4618      	mov	r0, r3
 8101334:	370c      	adds	r7, #12
 8101336:	46bd      	mov	sp, r7
 8101338:	f85d 7b04 	ldr.w	r7, [sp], #4
 810133c:	4770      	bx	lr

0810133e <_ZNSt4pairIKN7APIDoIP12EDoIPRequestES_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEEC1ERS2_RKS8_>:

    public:

      /// Constructor accepting lvalues of `first_type` and `second_type`
      constexpr explicit(!_S_convertible<const _T1&, const _T2&>())
      pair(const _T1& __x, const _T2& __y)
 810133e:	b480      	push	{r7}
 8101340:	b085      	sub	sp, #20
 8101342:	af00      	add	r7, sp, #0
 8101344:	60f8      	str	r0, [r7, #12]
 8101346:	60b9      	str	r1, [r7, #8]
 8101348:	607a      	str	r2, [r7, #4]
      noexcept(_S_nothrow_constructible<const _T1&, const _T2&>())
      requires (_S_constructible<const _T1&, const _T2&>())
      : first(__x), second(__y)
 810134a:	68bb      	ldr	r3, [r7, #8]
 810134c:	f993 2000 	ldrsb.w	r2, [r3]
 8101350:	68fb      	ldr	r3, [r7, #12]
 8101352:	701a      	strb	r2, [r3, #0]
 8101354:	68fb      	ldr	r3, [r7, #12]
 8101356:	687a      	ldr	r2, [r7, #4]
 8101358:	3304      	adds	r3, #4
 810135a:	ca07      	ldmia	r2, {r0, r1, r2}
 810135c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
      { }
 8101360:	68fb      	ldr	r3, [r7, #12]
 8101362:	4618      	mov	r0, r3
 8101364:	3714      	adds	r7, #20
 8101366:	46bd      	mov	sp, r7
 8101368:	f85d 7b04 	ldr.w	r7, [sp], #4
 810136c:	4770      	bx	lr
	...

08101370 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8101370:	b580      	push	{r7, lr}
 8101372:	b082      	sub	sp, #8
 8101374:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN 1 */
    /* USER CODE END 1 */

    /* USER CODE BEGIN Boot_Mode_Sequence_1 */
    /*HW semaphore Clock enable*/
    __HAL_RCC_HSEM_CLK_ENABLE();
 8101376:	4b34      	ldr	r3, [pc, #208]	@ (8101448 <main+0xd8>)
 8101378:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810137c:	4a32      	ldr	r2, [pc, #200]	@ (8101448 <main+0xd8>)
 810137e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8101382:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8101386:	4b30      	ldr	r3, [pc, #192]	@ (8101448 <main+0xd8>)
 8101388:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810138c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8101390:	607b      	str	r3, [r7, #4]
 8101392:	687b      	ldr	r3, [r7, #4]
    /* Activate HSEM notification for Cortex-M4*/
    HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8101394:	2001      	movs	r0, #1
 8101396:	f00c ffff 	bl	810e398 <HAL_HSEM_ActivateNotification>
    /*
    Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
    perform system initialization (system clock config, external memory configuration.. )
    */
    HAL_PWREx_ClearPendingEvent();
 810139a:	f00d fd99 	bl	810eed0 <HAL_PWREx_ClearPendingEvent>
    HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE, PWR_D2_DOMAIN);
 810139e:	2201      	movs	r2, #1
 81013a0:	2102      	movs	r1, #2
 81013a2:	2000      	movs	r0, #0
 81013a4:	f00d fd1a 	bl	810eddc <HAL_PWREx_EnterSTOPMode>
    /* Clear HSEM flag */
    __HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 81013a8:	4b28      	ldr	r3, [pc, #160]	@ (810144c <main+0xdc>)
 81013aa:	681b      	ldr	r3, [r3, #0]
 81013ac:	091b      	lsrs	r3, r3, #4
 81013ae:	f003 030f 	and.w	r3, r3, #15
 81013b2:	2b07      	cmp	r3, #7
 81013b4:	d108      	bne.n	81013c8 <main+0x58>
 81013b6:	4b26      	ldr	r3, [pc, #152]	@ (8101450 <main+0xe0>)
 81013b8:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 81013bc:	4a24      	ldr	r2, [pc, #144]	@ (8101450 <main+0xe0>)
 81013be:	f043 0301 	orr.w	r3, r3, #1
 81013c2:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104
 81013c6:	e007      	b.n	81013d8 <main+0x68>
 81013c8:	4b21      	ldr	r3, [pc, #132]	@ (8101450 <main+0xe0>)
 81013ca:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 81013ce:	4a20      	ldr	r2, [pc, #128]	@ (8101450 <main+0xe0>)
 81013d0:	f043 0301 	orr.w	r3, r3, #1
 81013d4:	f8c2 3114 	str.w	r3, [r2, #276]	@ 0x114

    /* USER CODE END Boot_Mode_Sequence_1 */
    /* MCU Configuration--------------------------------------------------------*/

    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 81013d8:	f00a fde8 	bl	810bfac <HAL_Init>
    /* USER CODE BEGIN SysInit */

    /* USER CODE END SysInit */

    /* Initialize all configured peripherals */
    MX_MDMA_Init();
 81013dc:	f000 f904 	bl	81015e8 <_ZL12MX_MDMA_Initv>
    MX_GPIO_Init();
 81013e0:	f000 f91c 	bl	810161c <_ZL12MX_GPIO_Initv>
    MX_I2C4_Init();
 81013e4:	f000 f852 	bl	810148c <_ZL12MX_I2C4_Initv>
    MX_USART1_UART_Init();
 81013e8:	f000 f89e 	bl	8101528 <MX_USART1_UART_Init>
    /* USER CODE BEGIN 2 */
    ipc_init();
 81013ec:	f7ff fe4a 	bl	8101084 <ipc_init>
    /* USER CODE END 2 */

    /* Init scheduler */
    osKernelInitialize();
 81013f0:	f011 fa7c 	bl	81128ec <osKernelInitialize>

    /* USER CODE BEGIN RTOS_MUTEX */
    /* add mutexes, ... */\
	printMutexHandle = osMutexNew(&printMutex_attributes);
 81013f4:	4817      	ldr	r0, [pc, #92]	@ (8101454 <main+0xe4>)
 81013f6:	f011 fb85 	bl	8112b04 <osMutexNew>
 81013fa:	4603      	mov	r3, r0
 81013fc:	4a16      	ldr	r2, [pc, #88]	@ (8101458 <main+0xe8>)
 81013fe:	6013      	str	r3, [r2, #0]
    /* add queues, ... */
    /* USER CODE END RTOS_QUEUES */

    /* Create the thread(s) */
    /* creation of Task_EDaemonN */
    Task_EDaemonNHandle = osThreadNew(StartTask_EDaemonN, NULL, &Task_EDaemonN_attributes);
 8101400:	4a16      	ldr	r2, [pc, #88]	@ (810145c <main+0xec>)
 8101402:	2100      	movs	r1, #0
 8101404:	4816      	ldr	r0, [pc, #88]	@ (8101460 <main+0xf0>)
 8101406:	f011 fad0 	bl	81129aa <osThreadNew>
 810140a:	4603      	mov	r3, r0
 810140c:	4a15      	ldr	r2, [pc, #84]	@ (8101464 <main+0xf4>)
 810140e:	6013      	str	r3, [r2, #0]

    /* creation of Task_EventMgrM4 */
    Task_EventMgrM4Handle = osThreadNew(StartTask_EventMgrM4, NULL, &Task_EventMgrM4_attributes);
 8101410:	4a15      	ldr	r2, [pc, #84]	@ (8101468 <main+0xf8>)
 8101412:	2100      	movs	r1, #0
 8101414:	4815      	ldr	r0, [pc, #84]	@ (810146c <main+0xfc>)
 8101416:	f011 fac8 	bl	81129aa <osThreadNew>
 810141a:	4603      	mov	r3, r0
 810141c:	4a14      	ldr	r2, [pc, #80]	@ (8101470 <main+0x100>)
 810141e:	6013      	str	r3, [r2, #0]

    /* creation of Task_EConnMgr */
    Task_EConnMgrHandle = osThreadNew(StartTask_DoIPDaemonTask, NULL, &Task_EConnMgr_attributes);
 8101420:	4a14      	ldr	r2, [pc, #80]	@ (8101474 <main+0x104>)
 8101422:	2100      	movs	r1, #0
 8101424:	4814      	ldr	r0, [pc, #80]	@ (8101478 <main+0x108>)
 8101426:	f011 fac0 	bl	81129aa <osThreadNew>
 810142a:	4603      	mov	r3, r0
 810142c:	4a13      	ldr	r2, [pc, #76]	@ (810147c <main+0x10c>)
 810142e:	6013      	str	r3, [r2, #0]

    /* creation of Task_CTemp */
    Task_CTempHandle = osThreadNew(StartTask_CTemp, NULL, &Task_CTemp_attributes);
 8101430:	4a13      	ldr	r2, [pc, #76]	@ (8101480 <main+0x110>)
 8101432:	2100      	movs	r1, #0
 8101434:	4813      	ldr	r0, [pc, #76]	@ (8101484 <main+0x114>)
 8101436:	f011 fab8 	bl	81129aa <osThreadNew>
 810143a:	4603      	mov	r3, r0
 810143c:	4a12      	ldr	r2, [pc, #72]	@ (8101488 <main+0x118>)
 810143e:	6013      	str	r3, [r2, #0]
    /* USER CODE BEGIN RTOS_EVENTS */
    /* add events, ... */
    /* USER CODE END RTOS_EVENTS */

    /* Start scheduler */
    osKernelStart();
 8101440:	f011 fa78 	bl	8112934 <osKernelStart>

    /* We should never get here as control is now taken by the scheduler */

    /* Infinite loop */
    /* USER CODE BEGIN WHILE */
    while (1)
 8101444:	bf00      	nop
 8101446:	e7fd      	b.n	8101444 <main+0xd4>
 8101448:	58024400 	.word	0x58024400
 810144c:	e000ed00 	.word	0xe000ed00
 8101450:	58026400 	.word	0x58026400
 8101454:	081283c8 	.word	0x081283c8
 8101458:	100001c8 	.word	0x100001c8
 810145c:	08128338 	.word	0x08128338
 8101460:	0810847f 	.word	0x0810847f
 8101464:	100001b8 	.word	0x100001b8
 8101468:	0812835c 	.word	0x0812835c
 810146c:	08105e79 	.word	0x08105e79
 8101470:	100001bc 	.word	0x100001bc
 8101474:	08128380 	.word	0x08128380
 8101478:	08104fdb 	.word	0x08104fdb
 810147c:	100001c0 	.word	0x100001c0
 8101480:	081283a4 	.word	0x081283a4
 8101484:	081097b1 	.word	0x081097b1
 8101488:	100001c4 	.word	0x100001c4

0810148c <_ZL12MX_I2C4_Initv>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 810148c:	b580      	push	{r7, lr}
 810148e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8101490:	4b22      	ldr	r3, [pc, #136]	@ (810151c <_ZL12MX_I2C4_Initv+0x90>)
 8101492:	4a23      	ldr	r2, [pc, #140]	@ (8101520 <_ZL12MX_I2C4_Initv+0x94>)
 8101494:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x10C0ECFF;
 8101496:	4b21      	ldr	r3, [pc, #132]	@ (810151c <_ZL12MX_I2C4_Initv+0x90>)
 8101498:	4a22      	ldr	r2, [pc, #136]	@ (8101524 <_ZL12MX_I2C4_Initv+0x98>)
 810149a:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 810149c:	4b1f      	ldr	r3, [pc, #124]	@ (810151c <_ZL12MX_I2C4_Initv+0x90>)
 810149e:	2200      	movs	r2, #0
 81014a0:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 81014a2:	4b1e      	ldr	r3, [pc, #120]	@ (810151c <_ZL12MX_I2C4_Initv+0x90>)
 81014a4:	2201      	movs	r2, #1
 81014a6:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 81014a8:	4b1c      	ldr	r3, [pc, #112]	@ (810151c <_ZL12MX_I2C4_Initv+0x90>)
 81014aa:	2200      	movs	r2, #0
 81014ac:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 81014ae:	4b1b      	ldr	r3, [pc, #108]	@ (810151c <_ZL12MX_I2C4_Initv+0x90>)
 81014b0:	2200      	movs	r2, #0
 81014b2:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 81014b4:	4b19      	ldr	r3, [pc, #100]	@ (810151c <_ZL12MX_I2C4_Initv+0x90>)
 81014b6:	2200      	movs	r2, #0
 81014b8:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 81014ba:	4b18      	ldr	r3, [pc, #96]	@ (810151c <_ZL12MX_I2C4_Initv+0x90>)
 81014bc:	2200      	movs	r2, #0
 81014be:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 81014c0:	4b16      	ldr	r3, [pc, #88]	@ (810151c <_ZL12MX_I2C4_Initv+0x90>)
 81014c2:	2200      	movs	r2, #0
 81014c4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 81014c6:	4815      	ldr	r0, [pc, #84]	@ (810151c <_ZL12MX_I2C4_Initv+0x90>)
 81014c8:	f00c ff92 	bl	810e3f0 <HAL_I2C_Init>
 81014cc:	4603      	mov	r3, r0
 81014ce:	2b00      	cmp	r3, #0
 81014d0:	bf14      	ite	ne
 81014d2:	2301      	movne	r3, #1
 81014d4:	2300      	moveq	r3, #0
 81014d6:	b2db      	uxtb	r3, r3
 81014d8:	2b00      	cmp	r3, #0
 81014da:	d001      	beq.n	81014e0 <_ZL12MX_I2C4_Initv+0x54>
  {
    Error_Handler();
 81014dc:	f000 f936 	bl	810174c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 81014e0:	2100      	movs	r1, #0
 81014e2:	480e      	ldr	r0, [pc, #56]	@ (810151c <_ZL12MX_I2C4_Initv+0x90>)
 81014e4:	f00d fbe2 	bl	810ecac <HAL_I2CEx_ConfigAnalogFilter>
 81014e8:	4603      	mov	r3, r0
 81014ea:	2b00      	cmp	r3, #0
 81014ec:	bf14      	ite	ne
 81014ee:	2301      	movne	r3, #1
 81014f0:	2300      	moveq	r3, #0
 81014f2:	b2db      	uxtb	r3, r3
 81014f4:	2b00      	cmp	r3, #0
 81014f6:	d001      	beq.n	81014fc <_ZL12MX_I2C4_Initv+0x70>
  {
    Error_Handler();
 81014f8:	f000 f928 	bl	810174c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 2) != HAL_OK)
 81014fc:	2102      	movs	r1, #2
 81014fe:	4807      	ldr	r0, [pc, #28]	@ (810151c <_ZL12MX_I2C4_Initv+0x90>)
 8101500:	f00d fc1f 	bl	810ed42 <HAL_I2CEx_ConfigDigitalFilter>
 8101504:	4603      	mov	r3, r0
 8101506:	2b00      	cmp	r3, #0
 8101508:	bf14      	ite	ne
 810150a:	2301      	movne	r3, #1
 810150c:	2300      	moveq	r3, #0
 810150e:	b2db      	uxtb	r3, r3
 8101510:	2b00      	cmp	r3, #0
 8101512:	d001      	beq.n	8101518 <_ZL12MX_I2C4_Initv+0x8c>
  {
    Error_Handler();
 8101514:	f000 f91a 	bl	810174c <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8101518:	bf00      	nop
 810151a:	bd80      	pop	{r7, pc}
 810151c:	100000d0 	.word	0x100000d0
 8101520:	58001c00 	.word	0x58001c00
 8101524:	10c0ecff 	.word	0x10c0ecff

08101528 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART1_UART_Init(void)
{
 8101528:	b580      	push	{r7, lr}
 810152a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 810152c:	4b2c      	ldr	r3, [pc, #176]	@ (81015e0 <MX_USART1_UART_Init+0xb8>)
 810152e:	4a2d      	ldr	r2, [pc, #180]	@ (81015e4 <MX_USART1_UART_Init+0xbc>)
 8101530:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8101532:	4b2b      	ldr	r3, [pc, #172]	@ (81015e0 <MX_USART1_UART_Init+0xb8>)
 8101534:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8101538:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 810153a:	4b29      	ldr	r3, [pc, #164]	@ (81015e0 <MX_USART1_UART_Init+0xb8>)
 810153c:	2200      	movs	r2, #0
 810153e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8101540:	4b27      	ldr	r3, [pc, #156]	@ (81015e0 <MX_USART1_UART_Init+0xb8>)
 8101542:	2200      	movs	r2, #0
 8101544:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8101546:	4b26      	ldr	r3, [pc, #152]	@ (81015e0 <MX_USART1_UART_Init+0xb8>)
 8101548:	2200      	movs	r2, #0
 810154a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 810154c:	4b24      	ldr	r3, [pc, #144]	@ (81015e0 <MX_USART1_UART_Init+0xb8>)
 810154e:	220c      	movs	r2, #12
 8101550:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8101552:	4b23      	ldr	r3, [pc, #140]	@ (81015e0 <MX_USART1_UART_Init+0xb8>)
 8101554:	2200      	movs	r2, #0
 8101556:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8101558:	4b21      	ldr	r3, [pc, #132]	@ (81015e0 <MX_USART1_UART_Init+0xb8>)
 810155a:	2200      	movs	r2, #0
 810155c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 810155e:	4b20      	ldr	r3, [pc, #128]	@ (81015e0 <MX_USART1_UART_Init+0xb8>)
 8101560:	2200      	movs	r2, #0
 8101562:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8101564:	4b1e      	ldr	r3, [pc, #120]	@ (81015e0 <MX_USART1_UART_Init+0xb8>)
 8101566:	2200      	movs	r2, #0
 8101568:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 810156a:	4b1d      	ldr	r3, [pc, #116]	@ (81015e0 <MX_USART1_UART_Init+0xb8>)
 810156c:	2200      	movs	r2, #0
 810156e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8101570:	481b      	ldr	r0, [pc, #108]	@ (81015e0 <MX_USART1_UART_Init+0xb8>)
 8101572:	f010 f80f 	bl	8111594 <HAL_UART_Init>
 8101576:	4603      	mov	r3, r0
 8101578:	2b00      	cmp	r3, #0
 810157a:	bf14      	ite	ne
 810157c:	2301      	movne	r3, #1
 810157e:	2300      	moveq	r3, #0
 8101580:	b2db      	uxtb	r3, r3
 8101582:	2b00      	cmp	r3, #0
 8101584:	d001      	beq.n	810158a <MX_USART1_UART_Init+0x62>
  {
    Error_Handler();
 8101586:	f000 f8e1 	bl	810174c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 810158a:	2100      	movs	r1, #0
 810158c:	4814      	ldr	r0, [pc, #80]	@ (81015e0 <MX_USART1_UART_Init+0xb8>)
 810158e:	f011 f89f 	bl	81126d0 <HAL_UARTEx_SetTxFifoThreshold>
 8101592:	4603      	mov	r3, r0
 8101594:	2b00      	cmp	r3, #0
 8101596:	bf14      	ite	ne
 8101598:	2301      	movne	r3, #1
 810159a:	2300      	moveq	r3, #0
 810159c:	b2db      	uxtb	r3, r3
 810159e:	2b00      	cmp	r3, #0
 81015a0:	d001      	beq.n	81015a6 <MX_USART1_UART_Init+0x7e>
  {
    Error_Handler();
 81015a2:	f000 f8d3 	bl	810174c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 81015a6:	2100      	movs	r1, #0
 81015a8:	480d      	ldr	r0, [pc, #52]	@ (81015e0 <MX_USART1_UART_Init+0xb8>)
 81015aa:	f011 f8cf 	bl	811274c <HAL_UARTEx_SetRxFifoThreshold>
 81015ae:	4603      	mov	r3, r0
 81015b0:	2b00      	cmp	r3, #0
 81015b2:	bf14      	ite	ne
 81015b4:	2301      	movne	r3, #1
 81015b6:	2300      	moveq	r3, #0
 81015b8:	b2db      	uxtb	r3, r3
 81015ba:	2b00      	cmp	r3, #0
 81015bc:	d001      	beq.n	81015c2 <MX_USART1_UART_Init+0x9a>
  {
    Error_Handler();
 81015be:	f000 f8c5 	bl	810174c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 81015c2:	4807      	ldr	r0, [pc, #28]	@ (81015e0 <MX_USART1_UART_Init+0xb8>)
 81015c4:	f011 f84b 	bl	811265e <HAL_UARTEx_DisableFifoMode>
 81015c8:	4603      	mov	r3, r0
 81015ca:	2b00      	cmp	r3, #0
 81015cc:	bf14      	ite	ne
 81015ce:	2301      	movne	r3, #1
 81015d0:	2300      	moveq	r3, #0
 81015d2:	b2db      	uxtb	r3, r3
 81015d4:	2b00      	cmp	r3, #0
 81015d6:	d001      	beq.n	81015dc <MX_USART1_UART_Init+0xb4>
  {
    Error_Handler();
 81015d8:	f000 f8b8 	bl	810174c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 81015dc:	bf00      	nop
 81015de:	bd80      	pop	{r7, pc}
 81015e0:	10000124 	.word	0x10000124
 81015e4:	40011000 	.word	0x40011000

081015e8 <_ZL12MX_MDMA_Initv>:

/**
  * Enable MDMA controller clock
  */
static void MX_MDMA_Init(void)
{
 81015e8:	b480      	push	{r7}
 81015ea:	b083      	sub	sp, #12
 81015ec:	af00      	add	r7, sp, #0

  /* MDMA controller clock enable */
  __HAL_RCC_MDMA_CLK_ENABLE();
 81015ee:	4b0a      	ldr	r3, [pc, #40]	@ (8101618 <_ZL12MX_MDMA_Initv+0x30>)
 81015f0:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 81015f4:	4a08      	ldr	r2, [pc, #32]	@ (8101618 <_ZL12MX_MDMA_Initv+0x30>)
 81015f6:	f043 0301 	orr.w	r3, r3, #1
 81015fa:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 81015fe:	4b06      	ldr	r3, [pc, #24]	@ (8101618 <_ZL12MX_MDMA_Initv+0x30>)
 8101600:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8101604:	f003 0301 	and.w	r3, r3, #1
 8101608:	607b      	str	r3, [r7, #4]
 810160a:	687b      	ldr	r3, [r7, #4]
  /* Local variables */

}
 810160c:	bf00      	nop
 810160e:	370c      	adds	r7, #12
 8101610:	46bd      	mov	sp, r7
 8101612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101616:	4770      	bx	lr
 8101618:	58024400 	.word	0x58024400

0810161c <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 810161c:	b480      	push	{r7}
 810161e:	b089      	sub	sp, #36	@ 0x24
 8101620:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8101622:	4b37      	ldr	r3, [pc, #220]	@ (8101700 <_ZL12MX_GPIO_Initv+0xe4>)
 8101624:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101628:	4a35      	ldr	r2, [pc, #212]	@ (8101700 <_ZL12MX_GPIO_Initv+0xe4>)
 810162a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 810162e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8101632:	4b33      	ldr	r3, [pc, #204]	@ (8101700 <_ZL12MX_GPIO_Initv+0xe4>)
 8101634:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101638:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 810163c:	61fb      	str	r3, [r7, #28]
 810163e:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8101640:	4b2f      	ldr	r3, [pc, #188]	@ (8101700 <_ZL12MX_GPIO_Initv+0xe4>)
 8101642:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101646:	4a2e      	ldr	r2, [pc, #184]	@ (8101700 <_ZL12MX_GPIO_Initv+0xe4>)
 8101648:	f043 0310 	orr.w	r3, r3, #16
 810164c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8101650:	4b2b      	ldr	r3, [pc, #172]	@ (8101700 <_ZL12MX_GPIO_Initv+0xe4>)
 8101652:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101656:	f003 0310 	and.w	r3, r3, #16
 810165a:	61bb      	str	r3, [r7, #24]
 810165c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 810165e:	4b28      	ldr	r3, [pc, #160]	@ (8101700 <_ZL12MX_GPIO_Initv+0xe4>)
 8101660:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101664:	4a26      	ldr	r2, [pc, #152]	@ (8101700 <_ZL12MX_GPIO_Initv+0xe4>)
 8101666:	f043 0304 	orr.w	r3, r3, #4
 810166a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 810166e:	4b24      	ldr	r3, [pc, #144]	@ (8101700 <_ZL12MX_GPIO_Initv+0xe4>)
 8101670:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101674:	f003 0304 	and.w	r3, r3, #4
 8101678:	617b      	str	r3, [r7, #20]
 810167a:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 810167c:	4b20      	ldr	r3, [pc, #128]	@ (8101700 <_ZL12MX_GPIO_Initv+0xe4>)
 810167e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101682:	4a1f      	ldr	r2, [pc, #124]	@ (8101700 <_ZL12MX_GPIO_Initv+0xe4>)
 8101684:	f043 0301 	orr.w	r3, r3, #1
 8101688:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 810168c:	4b1c      	ldr	r3, [pc, #112]	@ (8101700 <_ZL12MX_GPIO_Initv+0xe4>)
 810168e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101692:	f003 0301 	and.w	r3, r3, #1
 8101696:	613b      	str	r3, [r7, #16]
 8101698:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 810169a:	4b19      	ldr	r3, [pc, #100]	@ (8101700 <_ZL12MX_GPIO_Initv+0xe4>)
 810169c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81016a0:	4a17      	ldr	r2, [pc, #92]	@ (8101700 <_ZL12MX_GPIO_Initv+0xe4>)
 81016a2:	f043 0302 	orr.w	r3, r3, #2
 81016a6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81016aa:	4b15      	ldr	r3, [pc, #84]	@ (8101700 <_ZL12MX_GPIO_Initv+0xe4>)
 81016ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81016b0:	f003 0302 	and.w	r3, r3, #2
 81016b4:	60fb      	str	r3, [r7, #12]
 81016b6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 81016b8:	4b11      	ldr	r3, [pc, #68]	@ (8101700 <_ZL12MX_GPIO_Initv+0xe4>)
 81016ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81016be:	4a10      	ldr	r2, [pc, #64]	@ (8101700 <_ZL12MX_GPIO_Initv+0xe4>)
 81016c0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 81016c4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81016c8:	4b0d      	ldr	r3, [pc, #52]	@ (8101700 <_ZL12MX_GPIO_Initv+0xe4>)
 81016ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81016ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 81016d2:	60bb      	str	r3, [r7, #8]
 81016d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 81016d6:	4b0a      	ldr	r3, [pc, #40]	@ (8101700 <_ZL12MX_GPIO_Initv+0xe4>)
 81016d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81016dc:	4a08      	ldr	r2, [pc, #32]	@ (8101700 <_ZL12MX_GPIO_Initv+0xe4>)
 81016de:	f043 0308 	orr.w	r3, r3, #8
 81016e2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81016e6:	4b06      	ldr	r3, [pc, #24]	@ (8101700 <_ZL12MX_GPIO_Initv+0xe4>)
 81016e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81016ec:	f003 0308 	and.w	r3, r3, #8
 81016f0:	607b      	str	r3, [r7, #4]
 81016f2:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 81016f4:	bf00      	nop
 81016f6:	3724      	adds	r7, #36	@ 0x24
 81016f8:	46bd      	mov	sp, r7
 81016fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 81016fe:	4770      	bx	lr
 8101700:	58024400 	.word	0x58024400

08101704 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  *   None
  * @retval None
  */
extern "C" int __io_putchar(int ch)
{
 8101704:	b580      	push	{r7, lr}
 8101706:	b082      	sub	sp, #8
 8101708:	af00      	add	r7, sp, #0
 810170a:	6078      	str	r0, [r7, #4]
    /* Place your implementation of fputc here */
    /* e.g. write a character to the USART1 and Loop until the end of transmission */
    HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 810170c:	1d39      	adds	r1, r7, #4
 810170e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8101712:	2201      	movs	r2, #1
 8101714:	4803      	ldr	r0, [pc, #12]	@ (8101724 <__io_putchar+0x20>)
 8101716:	f00f ff8d 	bl	8111634 <HAL_UART_Transmit>

    return ch;
 810171a:	687b      	ldr	r3, [r7, #4]
}
 810171c:	4618      	mov	r0, r3
 810171e:	3708      	adds	r7, #8
 8101720:	46bd      	mov	sp, r7
 8101722:	bd80      	pop	{r7, pc}
 8101724:	10000124 	.word	0x10000124

08101728 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8101728:	b580      	push	{r7, lr}
 810172a:	b082      	sub	sp, #8
 810172c:	af00      	add	r7, sp, #0
 810172e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8101730:	687b      	ldr	r3, [r7, #4]
 8101732:	681b      	ldr	r3, [r3, #0]
 8101734:	4a04      	ldr	r2, [pc, #16]	@ (8101748 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8101736:	4293      	cmp	r3, r2
 8101738:	d101      	bne.n	810173e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 810173a:	f00a fc95 	bl	810c068 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 810173e:	bf00      	nop
 8101740:	3708      	adds	r7, #8
 8101742:	46bd      	mov	sp, r7
 8101744:	bd80      	pop	{r7, pc}
 8101746:	bf00      	nop
 8101748:	40001000 	.word	0x40001000

0810174c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 810174c:	b480      	push	{r7}
 810174e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8101750:	b672      	cpsid	i
}
 8101752:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8101754:	bf00      	nop
 8101756:	e7fd      	b.n	8101754 <Error_Handler+0x8>

08101758 <_ZNSaISt4pairIKN7APIDoIP12EDoIPRequestES_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEEEC1Ev>:
#endif

      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 3035. std::allocator's constructors should be constexpr
      _GLIBCXX20_CONSTEXPR
      allocator() _GLIBCXX_NOTHROW { }
 8101758:	b580      	push	{r7, lr}
 810175a:	b082      	sub	sp, #8
 810175c:	af00      	add	r7, sp, #0
 810175e:	6078      	str	r0, [r7, #4]
 8101760:	6878      	ldr	r0, [r7, #4]
 8101762:	f000 f834 	bl	81017ce <_ZNSt15__new_allocatorISt4pairIKN7APIDoIP12EDoIPRequestES0_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEEEC1Ev>
 8101766:	687b      	ldr	r3, [r7, #4]
 8101768:	4618      	mov	r0, r3
 810176a:	3708      	adds	r7, #8
 810176c:	46bd      	mov	sp, r7
 810176e:	bd80      	pop	{r7, pc}

08101770 <_ZNSaISt4pairIKN7APIDoIP12EDoIPRequestES_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEEED1Ev>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

#if __cpp_constexpr_dynamic_alloc
      constexpr
#endif
      ~allocator() _GLIBCXX_NOTHROW { }
 8101770:	b480      	push	{r7}
 8101772:	b083      	sub	sp, #12
 8101774:	af00      	add	r7, sp, #0
 8101776:	6078      	str	r0, [r7, #4]
 8101778:	687b      	ldr	r3, [r7, #4]
 810177a:	4618      	mov	r0, r3
 810177c:	370c      	adds	r7, #12
 810177e:	46bd      	mov	sp, r7
 8101780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101784:	4770      	bx	lr

08101786 <_ZNSt13unordered_mapIN7APIDoIP12EDoIPRequestESt4pairISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressESt4hashIS1_ESt8equal_toIS1_ESaIS2_IKS1_S8_EEEC1ESt16initializer_listISE_EjRKSA_RKSC_RKSF_>:
       *  @param  __a  An allocator object.
       *
       *  Create an %unordered_map consisting of copies of the elements in the
       *  list. This is linear in N (where N is @a __l.size()).
       */
      unordered_map(initializer_list<value_type> __l,
 8101786:	b580      	push	{r7, lr}
 8101788:	b088      	sub	sp, #32
 810178a:	af04      	add	r7, sp, #16
 810178c:	60f8      	str	r0, [r7, #12]
 810178e:	1d38      	adds	r0, r7, #4
 8101790:	e880 0006 	stmia.w	r0, {r1, r2}
 8101794:	603b      	str	r3, [r7, #0]
		    size_type __n = 0,
		    const hasher& __hf = hasher(),
		    const key_equal& __eql = key_equal(),
		    const allocator_type& __a = allocator_type())
      : _M_h(__l, __n, __hf, __eql, __a)
 8101796:	68f8      	ldr	r0, [r7, #12]
 8101798:	6a3b      	ldr	r3, [r7, #32]
 810179a:	9302      	str	r3, [sp, #8]
 810179c:	69fb      	ldr	r3, [r7, #28]
 810179e:	9301      	str	r3, [sp, #4]
 81017a0:	69bb      	ldr	r3, [r7, #24]
 81017a2:	9300      	str	r3, [sp, #0]
 81017a4:	683b      	ldr	r3, [r7, #0]
 81017a6:	1d3a      	adds	r2, r7, #4
 81017a8:	ca06      	ldmia	r2, {r1, r2}
 81017aa:	f000 f81b 	bl	81017e4 <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEEC1ESt16initializer_listISA_EjRKSH_RKSF_RKSB_>
      { }
 81017ae:	68fb      	ldr	r3, [r7, #12]
 81017b0:	4618      	mov	r0, r3
 81017b2:	3710      	adds	r7, #16
 81017b4:	46bd      	mov	sp, r7
 81017b6:	bd80      	pop	{r7, pc}

081017b8 <_ZSt7forwardIbEOT_RNSt16remove_referenceIS0_E4typeE>:
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    _GLIBCXX_NODISCARD
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 81017b8:	b480      	push	{r7}
 81017ba:	b083      	sub	sp, #12
 81017bc:	af00      	add	r7, sp, #0
 81017be:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 81017c0:	687b      	ldr	r3, [r7, #4]
 81017c2:	4618      	mov	r0, r3
 81017c4:	370c      	adds	r7, #12
 81017c6:	46bd      	mov	sp, r7
 81017c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81017cc:	4770      	bx	lr

081017ce <_ZNSt15__new_allocatorISt4pairIKN7APIDoIP12EDoIPRequestES0_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEEEC1Ev>:
      // 2103. propagate_on_container_move_assignment
      typedef std::true_type propagate_on_container_move_assignment;
#endif

      _GLIBCXX20_CONSTEXPR
      __new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 81017ce:	b480      	push	{r7}
 81017d0:	b083      	sub	sp, #12
 81017d2:	af00      	add	r7, sp, #0
 81017d4:	6078      	str	r0, [r7, #4]
 81017d6:	687b      	ldr	r3, [r7, #4]
 81017d8:	4618      	mov	r0, r3
 81017da:	370c      	adds	r7, #12
 81017dc:	46bd      	mov	sp, r7
 81017de:	f85d 7b04 	ldr.w	r7, [sp], #4
 81017e2:	4770      	bx	lr

081017e4 <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEEC1ESt16initializer_listISA_EjRKSH_RKSF_RKSB_>:
		   const allocator_type& __a = allocator_type())
	: _Hashtable(__f, __l, __bkt_count_hint, __hf, __eql, __a,
		     __unique_keys{})
	{ }

      _Hashtable(initializer_list<value_type> __l,
 81017e4:	b5b0      	push	{r4, r5, r7, lr}
 81017e6:	b088      	sub	sp, #32
 81017e8:	af04      	add	r7, sp, #16
 81017ea:	60f8      	str	r0, [r7, #12]
 81017ec:	1d38      	adds	r0, r7, #4
 81017ee:	e880 0006 	stmia.w	r0, {r1, r2}
 81017f2:	603b      	str	r3, [r7, #0]
		 size_type __bkt_count_hint = 0,
		 const _Hash& __hf = _Hash(),
		 const key_equal& __eql = key_equal(),
		 const allocator_type& __a = allocator_type())
      : _Hashtable(__l.begin(), __l.end(), __bkt_count_hint,
		   __hf, __eql, __a, __unique_keys{})
 81017f4:	1d3b      	adds	r3, r7, #4
 81017f6:	4618      	mov	r0, r3
 81017f8:	f000 f842 	bl	8101880 <_ZNKSt16initializer_listISt4pairIKN7APIDoIP12EDoIPRequestES0_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEEE5beginEv>
 81017fc:	4604      	mov	r4, r0
 81017fe:	1d3b      	adds	r3, r7, #4
 8101800:	4618      	mov	r0, r3
 8101802:	f000 f849 	bl	8101898 <_ZNKSt16initializer_listISt4pairIKN7APIDoIP12EDoIPRequestES0_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEEE3endEv>
 8101806:	4602      	mov	r2, r0
 8101808:	f88d 500c 	strb.w	r5, [sp, #12]
 810180c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810180e:	9302      	str	r3, [sp, #8]
 8101810:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8101812:	9301      	str	r3, [sp, #4]
 8101814:	6a3b      	ldr	r3, [r7, #32]
 8101816:	9300      	str	r3, [sp, #0]
 8101818:	683b      	ldr	r3, [r7, #0]
 810181a:	4621      	mov	r1, r4
 810181c:	68f8      	ldr	r0, [r7, #12]
 810181e:	f000 f84d 	bl	81018bc <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEEC1IPKSA_EET_SR_jRKSH_RKSF_RKSB_St17integral_constantIbLb1EE>
      { }
 8101822:	68fb      	ldr	r3, [r7, #12]
 8101824:	4618      	mov	r0, r3
 8101826:	3710      	adds	r7, #16
 8101828:	46bd      	mov	sp, r7
 810182a:	bdb0      	pop	{r4, r5, r7, pc}

0810182c <_ZNSt8__detail21_Hashtable_ebo_helperILi0ESaINS_10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEEELb1EED1Ev>:
	   bool __use_ebo = !__is_final(_Tp) && __is_empty(_Tp)>
    struct _Hashtable_ebo_helper;

  /// Specialization using EBO.
  template<int _Nm, typename _Tp>
    struct _Hashtable_ebo_helper<_Nm, _Tp, true>
 810182c:	b580      	push	{r7, lr}
 810182e:	b082      	sub	sp, #8
 8101830:	af00      	add	r7, sp, #0
 8101832:	6078      	str	r0, [r7, #4]
 8101834:	6878      	ldr	r0, [r7, #4]
 8101836:	f000 f864 	bl	8101902 <_ZNSaINSt8__detail10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES1_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEEED1Ev>
 810183a:	687b      	ldr	r3, [r7, #4]
 810183c:	4618      	mov	r0, r3
 810183e:	3708      	adds	r7, #8
 8101840:	46bd      	mov	sp, r7
 8101842:	bd80      	pop	{r7, pc}

08101844 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEEEED1Ev>:
  /**
   * This type deals with all allocation and keeps an allocator instance
   * through inheritance to benefit from EBO when possible.
   */
  template<typename _NodeAlloc>
    struct _Hashtable_alloc : private _Hashtable_ebo_helper<0, _NodeAlloc>
 8101844:	b580      	push	{r7, lr}
 8101846:	b082      	sub	sp, #8
 8101848:	af00      	add	r7, sp, #0
 810184a:	6078      	str	r0, [r7, #4]
 810184c:	6878      	ldr	r0, [r7, #4]
 810184e:	f7ff ffed 	bl	810182c <_ZNSt8__detail21_Hashtable_ebo_helperILi0ESaINS_10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEEELb1EED1Ev>
 8101852:	687b      	ldr	r3, [r7, #4]
 8101854:	4618      	mov	r0, r3
 8101856:	3708      	adds	r7, #8
 8101858:	46bd      	mov	sp, r7
 810185a:	bd80      	pop	{r7, pc}

0810185c <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEED1Ev>:

  template<typename _Key, typename _Value, typename _Alloc,
	   typename _ExtractKey, typename _Equal,
	   typename _Hash, typename _RangeHash, typename _Unused,
	   typename _RehashPolicy, typename _Traits>
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
 810185c:	b580      	push	{r7, lr}
 810185e:	b082      	sub	sp, #8
 8101860:	af00      	add	r7, sp, #0
 8101862:	6078      	str	r0, [r7, #4]
			._M_bucket_index(declval<const __node_value_type&>(),
					 (std::size_t)0)),
		    "Cache the hash code or qualify your functors involved"
		    " in hash code and bucket index computation with noexcept");

      clear();
 8101864:	6878      	ldr	r0, [r7, #4]
 8101866:	f000 f857 	bl	8101918 <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE5clearEv>
      _M_deallocate_buckets();
 810186a:	6878      	ldr	r0, [r7, #4]
 810186c:	f000 f874 	bl	8101958 <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_deallocate_bucketsEv>
    }
 8101870:	6878      	ldr	r0, [r7, #4]
 8101872:	f7ff ffe7 	bl	8101844 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEEEED1Ev>
 8101876:	687b      	ldr	r3, [r7, #4]
 8101878:	4618      	mov	r0, r3
 810187a:	3708      	adds	r7, #8
 810187c:	46bd      	mov	sp, r7
 810187e:	bd80      	pop	{r7, pc}

08101880 <_ZNKSt16initializer_listISt4pairIKN7APIDoIP12EDoIPRequestES0_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEEE5beginEv>:
      constexpr size_type
      size() const noexcept { return _M_len; }

      // First element.
      constexpr const_iterator
      begin() const noexcept { return _M_array; }
 8101880:	b480      	push	{r7}
 8101882:	b083      	sub	sp, #12
 8101884:	af00      	add	r7, sp, #0
 8101886:	6078      	str	r0, [r7, #4]
 8101888:	687b      	ldr	r3, [r7, #4]
 810188a:	681b      	ldr	r3, [r3, #0]
 810188c:	4618      	mov	r0, r3
 810188e:	370c      	adds	r7, #12
 8101890:	46bd      	mov	sp, r7
 8101892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101896:	4770      	bx	lr

08101898 <_ZNKSt16initializer_listISt4pairIKN7APIDoIP12EDoIPRequestES0_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEEE3endEv>:

      // One past the last element.
      constexpr const_iterator
      end() const noexcept { return begin() + size(); }
 8101898:	b590      	push	{r4, r7, lr}
 810189a:	b083      	sub	sp, #12
 810189c:	af00      	add	r7, sp, #0
 810189e:	6078      	str	r0, [r7, #4]
 81018a0:	6878      	ldr	r0, [r7, #4]
 81018a2:	f7ff ffed 	bl	8101880 <_ZNKSt16initializer_listISt4pairIKN7APIDoIP12EDoIPRequestES0_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEEE5beginEv>
 81018a6:	4604      	mov	r4, r0
 81018a8:	6878      	ldr	r0, [r7, #4]
 81018aa:	f000 f865 	bl	8101978 <_ZNKSt16initializer_listISt4pairIKN7APIDoIP12EDoIPRequestES0_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEEE4sizeEv>
 81018ae:	4603      	mov	r3, r0
 81018b0:	011b      	lsls	r3, r3, #4
 81018b2:	4423      	add	r3, r4
 81018b4:	4618      	mov	r0, r3
 81018b6:	370c      	adds	r7, #12
 81018b8:	46bd      	mov	sp, r7
 81018ba:	bd90      	pop	{r4, r7, pc}

081018bc <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEEC1IPKSA_EET_SR_jRKSH_RKSF_RKSB_St17integral_constantIbLb1EE>:
      _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
 81018bc:	b580      	push	{r7, lr}
 81018be:	b088      	sub	sp, #32
 81018c0:	af02      	add	r7, sp, #8
 81018c2:	60f8      	str	r0, [r7, #12]
 81018c4:	60b9      	str	r1, [r7, #8]
 81018c6:	607a      	str	r2, [r7, #4]
 81018c8:	603b      	str	r3, [r7, #0]
      : _Hashtable(__bkt_count_hint, __h, __eq, __a)
 81018ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81018cc:	9300      	str	r3, [sp, #0]
 81018ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81018d0:	6a3a      	ldr	r2, [r7, #32]
 81018d2:	6839      	ldr	r1, [r7, #0]
 81018d4:	68f8      	ldr	r0, [r7, #12]
 81018d6:	f000 f85b 	bl	8101990 <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEEC1EjRKSH_RKSF_RKSB_>
	for (; __f != __l; ++__f)
 81018da:	e009      	b.n	81018f0 <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEEC1IPKSA_EET_SR_jRKSH_RKSF_RKSB_St17integral_constantIbLb1EE+0x34>
	  this->insert(*__f);
 81018dc:	f107 0310 	add.w	r3, r7, #16
 81018e0:	68ba      	ldr	r2, [r7, #8]
 81018e2:	68f9      	ldr	r1, [r7, #12]
 81018e4:	4618      	mov	r0, r3
 81018e6:	f000 f87b 	bl	81019e0 <_ZNSt8__detail12_Insert_baseIN7APIDoIP12EDoIPRequestESt4pairIKS2_S3_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISB_ENS_10_Select1stESt8equal_toIS2_ESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_20_Prime_rehash_policyENS_17_Hashtable_traitsILb0ELb0ELb1EEEE6insertERKSB_>
	for (; __f != __l; ++__f)
 81018ea:	68bb      	ldr	r3, [r7, #8]
 81018ec:	3310      	adds	r3, #16
 81018ee:	60bb      	str	r3, [r7, #8]
 81018f0:	68ba      	ldr	r2, [r7, #8]
 81018f2:	687b      	ldr	r3, [r7, #4]
 81018f4:	429a      	cmp	r2, r3
 81018f6:	d1f1      	bne.n	81018dc <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEEC1IPKSA_EET_SR_jRKSH_RKSF_RKSB_St17integral_constantIbLb1EE+0x20>
      }
 81018f8:	68fb      	ldr	r3, [r7, #12]
 81018fa:	4618      	mov	r0, r3
 81018fc:	3718      	adds	r7, #24
 81018fe:	46bd      	mov	sp, r7
 8101900:	bd80      	pop	{r7, pc}

08101902 <_ZNSaINSt8__detail10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES1_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEEED1Ev>:
 8101902:	b480      	push	{r7}
 8101904:	b083      	sub	sp, #12
 8101906:	af00      	add	r7, sp, #0
 8101908:	6078      	str	r0, [r7, #4]
 810190a:	687b      	ldr	r3, [r7, #4]
 810190c:	4618      	mov	r0, r3
 810190e:	370c      	adds	r7, #12
 8101910:	46bd      	mov	sp, r7
 8101912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101916:	4770      	bx	lr

08101918 <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE5clearEv>:
  template<typename _Key, typename _Value, typename _Alloc,
	   typename _ExtractKey, typename _Equal,
	   typename _Hash, typename _RangeHash, typename _Unused,
	   typename _RehashPolicy, typename _Traits>
    void
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
 8101918:	b580      	push	{r7, lr}
 810191a:	b082      	sub	sp, #8
 810191c:	af00      	add	r7, sp, #0
 810191e:	6078      	str	r0, [r7, #4]
	       _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits>::
    clear() noexcept
    {
      this->_M_deallocate_nodes(_M_begin());
 8101920:	6878      	ldr	r0, [r7, #4]
 8101922:	f000 f87b 	bl	8101a1c <_ZNKSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE8_M_beginEv>
 8101926:	4603      	mov	r3, r0
 8101928:	4619      	mov	r1, r3
 810192a:	6878      	ldr	r0, [r7, #4]
 810192c:	f000 f882 	bl	8101a34 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEEEE19_M_deallocate_nodesEPSD_>
      __builtin_memset(_M_buckets, 0,
 8101930:	687b      	ldr	r3, [r7, #4]
 8101932:	681a      	ldr	r2, [r3, #0]
		       _M_bucket_count * sizeof(__node_base_ptr));
 8101934:	687b      	ldr	r3, [r7, #4]
 8101936:	685b      	ldr	r3, [r3, #4]
      __builtin_memset(_M_buckets, 0,
 8101938:	009b      	lsls	r3, r3, #2
 810193a:	4610      	mov	r0, r2
 810193c:	461a      	mov	r2, r3
 810193e:	2100      	movs	r1, #0
 8101940:	f022 faac 	bl	8123e9c <memset>
      _M_element_count = 0;
 8101944:	687b      	ldr	r3, [r7, #4]
 8101946:	2200      	movs	r2, #0
 8101948:	60da      	str	r2, [r3, #12]
      _M_before_begin._M_nxt = nullptr;
 810194a:	687b      	ldr	r3, [r7, #4]
 810194c:	2200      	movs	r2, #0
 810194e:	609a      	str	r2, [r3, #8]
    }
 8101950:	bf00      	nop
 8101952:	3708      	adds	r7, #8
 8101954:	46bd      	mov	sp, r7
 8101956:	bd80      	pop	{r7, pc}

08101958 <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_deallocate_bucketsEv>:
      _M_deallocate_buckets()
 8101958:	b580      	push	{r7, lr}
 810195a:	b082      	sub	sp, #8
 810195c:	af00      	add	r7, sp, #0
 810195e:	6078      	str	r0, [r7, #4]
      { _M_deallocate_buckets(_M_buckets, _M_bucket_count); }
 8101960:	687b      	ldr	r3, [r7, #4]
 8101962:	6819      	ldr	r1, [r3, #0]
 8101964:	687b      	ldr	r3, [r7, #4]
 8101966:	685b      	ldr	r3, [r3, #4]
 8101968:	461a      	mov	r2, r3
 810196a:	6878      	ldr	r0, [r7, #4]
 810196c:	f000 f87a 	bl	8101a64 <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_deallocate_bucketsEPPNSC_15_Hash_node_baseEj>
 8101970:	bf00      	nop
 8101972:	3708      	adds	r7, #8
 8101974:	46bd      	mov	sp, r7
 8101976:	bd80      	pop	{r7, pc}

08101978 <_ZNKSt16initializer_listISt4pairIKN7APIDoIP12EDoIPRequestES0_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEEE4sizeEv>:
      size() const noexcept { return _M_len; }
 8101978:	b480      	push	{r7}
 810197a:	b083      	sub	sp, #12
 810197c:	af00      	add	r7, sp, #0
 810197e:	6078      	str	r0, [r7, #4]
 8101980:	687b      	ldr	r3, [r7, #4]
 8101982:	685b      	ldr	r3, [r3, #4]
 8101984:	4618      	mov	r0, r3
 8101986:	370c      	adds	r7, #12
 8101988:	46bd      	mov	sp, r7
 810198a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810198e:	4770      	bx	lr

08101990 <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEEC1EjRKSH_RKSF_RKSB_>:
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
 8101990:	b580      	push	{r7, lr}
 8101992:	b086      	sub	sp, #24
 8101994:	af00      	add	r7, sp, #0
 8101996:	60f8      	str	r0, [r7, #12]
 8101998:	60b9      	str	r1, [r7, #8]
 810199a:	607a      	str	r2, [r7, #4]
 810199c:	603b      	str	r3, [r7, #0]
    : _Hashtable(__h, __eq, __a)
 810199e:	6a3b      	ldr	r3, [r7, #32]
 81019a0:	683a      	ldr	r2, [r7, #0]
 81019a2:	6879      	ldr	r1, [r7, #4]
 81019a4:	68f8      	ldr	r0, [r7, #12]
 81019a6:	f000 f874 	bl	8101a92 <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEEC1ERKSH_RKSF_RKSB_>
      auto __bkt_count = _M_rehash_policy._M_next_bkt(__bkt_count_hint);
 81019aa:	68fb      	ldr	r3, [r7, #12]
 81019ac:	3310      	adds	r3, #16
 81019ae:	68b9      	ldr	r1, [r7, #8]
 81019b0:	4618      	mov	r0, r3
 81019b2:	f021 f9b5 	bl	8122d20 <_ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEj>
 81019b6:	6178      	str	r0, [r7, #20]
      if (__bkt_count > _M_bucket_count)
 81019b8:	68fb      	ldr	r3, [r7, #12]
 81019ba:	685b      	ldr	r3, [r3, #4]
 81019bc:	697a      	ldr	r2, [r7, #20]
 81019be:	429a      	cmp	r2, r3
 81019c0:	d909      	bls.n	81019d6 <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEEC1EjRKSH_RKSF_RKSB_+0x46>
	  _M_buckets = _M_allocate_buckets(__bkt_count);
 81019c2:	6979      	ldr	r1, [r7, #20]
 81019c4:	68f8      	ldr	r0, [r7, #12]
 81019c6:	f000 f8a4 	bl	8101b12 <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_allocate_bucketsEj>
 81019ca:	4602      	mov	r2, r0
 81019cc:	68fb      	ldr	r3, [r7, #12]
 81019ce:	601a      	str	r2, [r3, #0]
	  _M_bucket_count = __bkt_count;
 81019d0:	68fb      	ldr	r3, [r7, #12]
 81019d2:	697a      	ldr	r2, [r7, #20]
 81019d4:	605a      	str	r2, [r3, #4]
    }
 81019d6:	68fb      	ldr	r3, [r7, #12]
 81019d8:	4618      	mov	r0, r3
 81019da:	3718      	adds	r7, #24
 81019dc:	46bd      	mov	sp, r7
 81019de:	bd80      	pop	{r7, pc}

081019e0 <_ZNSt8__detail12_Insert_baseIN7APIDoIP12EDoIPRequestESt4pairIKS2_S3_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISB_ENS_10_Select1stESt8equal_toIS2_ESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_20_Prime_rehash_policyENS_17_Hashtable_traitsILb0ELb0ELb1EEEE6insertERKSB_>:
      insert(const value_type& __v)
 81019e0:	b590      	push	{r4, r7, lr}
 81019e2:	b089      	sub	sp, #36	@ 0x24
 81019e4:	af02      	add	r7, sp, #8
 81019e6:	60f8      	str	r0, [r7, #12]
 81019e8:	60b9      	str	r1, [r7, #8]
 81019ea:	607a      	str	r2, [r7, #4]
	__hashtable& __h = _M_conjure_hashtable();
 81019ec:	68b8      	ldr	r0, [r7, #8]
 81019ee:	f000 f8ad 	bl	8101b4c <_ZNSt8__detail12_Insert_baseIN7APIDoIP12EDoIPRequestESt4pairIKS2_S3_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISB_ENS_10_Select1stESt8equal_toIS2_ESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_20_Prime_rehash_policyENS_17_Hashtable_traitsILb0ELb0ELb1EEEE20_M_conjure_hashtableEv>
 81019f2:	6178      	str	r0, [r7, #20]
	__node_gen_type __node_gen(__h);
 81019f4:	f107 0310 	add.w	r3, r7, #16
 81019f8:	6979      	ldr	r1, [r7, #20]
 81019fa:	4618      	mov	r0, r3
 81019fc:	f000 f8b1 	bl	8101b62 <_ZNSt8__detail10_AllocNodeISaINS_10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEEEEC1ERNS_16_Hashtable_allocISE_EE>
	return __h._M_insert(__v, __node_gen, __unique_keys{});
 8101a00:	68f8      	ldr	r0, [r7, #12]
 8101a02:	f107 0310 	add.w	r3, r7, #16
 8101a06:	f88d 4000 	strb.w	r4, [sp]
 8101a0a:	687a      	ldr	r2, [r7, #4]
 8101a0c:	6979      	ldr	r1, [r7, #20]
 8101a0e:	f000 f8b7 	bl	8101b80 <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE9_M_insertIRKSA_NSC_10_AllocNodeISaINSC_10_Hash_nodeISA_Lb0EEEEEEEES2_INSC_14_Node_iteratorISA_Lb0ELb0EEEbEOT_RKT0_St17integral_constantIbLb1EE>
 8101a12:	bf00      	nop
      }
 8101a14:	68f8      	ldr	r0, [r7, #12]
 8101a16:	371c      	adds	r7, #28
 8101a18:	46bd      	mov	sp, r7
 8101a1a:	bd90      	pop	{r4, r7, pc}

08101a1c <_ZNKSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE8_M_beginEv>:
      _M_begin() const
 8101a1c:	b480      	push	{r7}
 8101a1e:	b083      	sub	sp, #12
 8101a20:	af00      	add	r7, sp, #0
 8101a22:	6078      	str	r0, [r7, #4]
      { return static_cast<__node_ptr>(_M_before_begin._M_nxt); }
 8101a24:	687b      	ldr	r3, [r7, #4]
 8101a26:	689b      	ldr	r3, [r3, #8]
 8101a28:	4618      	mov	r0, r3
 8101a2a:	370c      	adds	r7, #12
 8101a2c:	46bd      	mov	sp, r7
 8101a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101a32:	4770      	bx	lr

08101a34 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEEEE19_M_deallocate_nodesEPSD_>:
      __node_alloc_traits::deallocate(_M_node_allocator(), __ptr, 1);
    }

  template<typename _NodeAlloc>
    void
    _Hashtable_alloc<_NodeAlloc>::_M_deallocate_nodes(__node_ptr __n)
 8101a34:	b580      	push	{r7, lr}
 8101a36:	b084      	sub	sp, #16
 8101a38:	af00      	add	r7, sp, #0
 8101a3a:	6078      	str	r0, [r7, #4]
 8101a3c:	6039      	str	r1, [r7, #0]
    {
      while (__n)
 8101a3e:	e009      	b.n	8101a54 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEEEE19_M_deallocate_nodesEPSD_+0x20>
	{
	  __node_ptr __tmp = __n;
 8101a40:	683b      	ldr	r3, [r7, #0]
 8101a42:	60fb      	str	r3, [r7, #12]
	  __n = __n->_M_next();
 8101a44:	6838      	ldr	r0, [r7, #0]
 8101a46:	f000 f8c2 	bl	8101bce <_ZNKSt8__detail10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES1_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EE7_M_nextEv>
 8101a4a:	6038      	str	r0, [r7, #0]
	  _M_deallocate_node(__tmp);
 8101a4c:	68f9      	ldr	r1, [r7, #12]
 8101a4e:	6878      	ldr	r0, [r7, #4]
 8101a50:	f000 f8c9 	bl	8101be6 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEEEE18_M_deallocate_nodeEPSD_>
      while (__n)
 8101a54:	683b      	ldr	r3, [r7, #0]
 8101a56:	2b00      	cmp	r3, #0
 8101a58:	d1f2      	bne.n	8101a40 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEEEE19_M_deallocate_nodesEPSD_+0xc>
	}
    }
 8101a5a:	bf00      	nop
 8101a5c:	bf00      	nop
 8101a5e:	3710      	adds	r7, #16
 8101a60:	46bd      	mov	sp, r7
 8101a62:	bd80      	pop	{r7, pc}

08101a64 <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_deallocate_bucketsEPPNSC_15_Hash_node_baseEj>:
      _M_deallocate_buckets(__buckets_ptr __bkts, size_type __bkt_count)
 8101a64:	b580      	push	{r7, lr}
 8101a66:	b084      	sub	sp, #16
 8101a68:	af00      	add	r7, sp, #0
 8101a6a:	60f8      	str	r0, [r7, #12]
 8101a6c:	60b9      	str	r1, [r7, #8]
 8101a6e:	607a      	str	r2, [r7, #4]
	if (_M_uses_single_bucket(__bkts))
 8101a70:	68b9      	ldr	r1, [r7, #8]
 8101a72:	68f8      	ldr	r0, [r7, #12]
 8101a74:	f000 f8d2 	bl	8101c1c <_ZNKSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_uses_single_bucketEPPNSC_15_Hash_node_baseE>
 8101a78:	4603      	mov	r3, r0
 8101a7a:	2b00      	cmp	r3, #0
 8101a7c:	d105      	bne.n	8101a8a <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_deallocate_bucketsEPPNSC_15_Hash_node_baseEj+0x26>
	__hashtable_alloc::_M_deallocate_buckets(__bkts, __bkt_count);
 8101a7e:	687a      	ldr	r2, [r7, #4]
 8101a80:	68b9      	ldr	r1, [r7, #8]
 8101a82:	68f8      	ldr	r0, [r7, #12]
 8101a84:	f000 f8e2 	bl	8101c4c <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEEEE21_M_deallocate_bucketsEPPNS_15_Hash_node_baseEj>
 8101a88:	e000      	b.n	8101a8c <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_deallocate_bucketsEPPNSC_15_Hash_node_baseEj+0x28>
	  return;
 8101a8a:	bf00      	nop
      }
 8101a8c:	3710      	adds	r7, #16
 8101a8e:	46bd      	mov	sp, r7
 8101a90:	bd80      	pop	{r7, pc}

08101a92 <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEEC1ERKSH_RKSF_RKSB_>:
      _Hashtable(const _Hash& __h, const _Equal& __eq,
 8101a92:	b590      	push	{r4, r7, lr}
 8101a94:	b087      	sub	sp, #28
 8101a96:	af00      	add	r7, sp, #0
 8101a98:	60f8      	str	r0, [r7, #12]
 8101a9a:	60b9      	str	r1, [r7, #8]
 8101a9c:	607a      	str	r2, [r7, #4]
 8101a9e:	603b      	str	r3, [r7, #0]
	__enable_default_ctor(_Enable_default_constructor_tag{})
 8101aa0:	687a      	ldr	r2, [r7, #4]
 8101aa2:	68b9      	ldr	r1, [r7, #8]
 8101aa4:	68f8      	ldr	r0, [r7, #12]
 8101aa6:	f000 f901 	bl	8101cac <_ZNSt8__detail15_Hashtable_baseIN7APIDoIP12EDoIPRequestESt4pairIKS2_S3_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEENS_10_Select1stESt8equal_toIS2_ESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEEC1ERKSG_RKSE_>
	__hashtable_alloc(__node_alloc_type(__a)),
 8101aaa:	f107 0314 	add.w	r3, r7, #20
 8101aae:	6839      	ldr	r1, [r7, #0]
 8101ab0:	4618      	mov	r0, r3
 8101ab2:	f000 f8ee 	bl	8101c92 <_ZNSaINSt8__detail10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES1_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEEEC1ISB_EERKSaIT_E>
	__enable_default_ctor(_Enable_default_constructor_tag{})
 8101ab6:	f107 0314 	add.w	r3, r7, #20
 8101aba:	4619      	mov	r1, r3
 8101abc:	68f8      	ldr	r0, [r7, #12]
 8101abe:	f000 f908 	bl	8101cd2 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEEEEC1ISE_EEOT_>
	__hashtable_alloc(__node_alloc_type(__a)),
 8101ac2:	f107 0314 	add.w	r3, r7, #20
 8101ac6:	4618      	mov	r0, r3
 8101ac8:	f7ff ff1b 	bl	8101902 <_ZNSaINSt8__detail10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES1_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEEED1Ev>
	__enable_default_ctor(_Enable_default_constructor_tag{})
 8101acc:	4621      	mov	r1, r4
 8101ace:	68f8      	ldr	r0, [r7, #12]
 8101ad0:	f000 f911 	bl	8101cf6 <_ZNSt27_Enable_default_constructorILb1ENSt8__detail15_Hash_node_baseEEC1ESt31_Enable_default_constructor_tag>
 8101ad4:	68fb      	ldr	r3, [r7, #12]
 8101ad6:	f103 0218 	add.w	r2, r3, #24
 8101ada:	68fb      	ldr	r3, [r7, #12]
 8101adc:	601a      	str	r2, [r3, #0]
 8101ade:	68fb      	ldr	r3, [r7, #12]
 8101ae0:	2201      	movs	r2, #1
 8101ae2:	605a      	str	r2, [r3, #4]
 8101ae4:	68fb      	ldr	r3, [r7, #12]
 8101ae6:	3308      	adds	r3, #8
 8101ae8:	4618      	mov	r0, r3
 8101aea:	f7ff fbe7 	bl	81012bc <_ZNSt8__detail15_Hash_node_baseC1Ev>
 8101aee:	68fb      	ldr	r3, [r7, #12]
 8101af0:	2200      	movs	r2, #0
 8101af2:	60da      	str	r2, [r3, #12]
 8101af4:	68fb      	ldr	r3, [r7, #12]
 8101af6:	3310      	adds	r3, #16
 8101af8:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8101afc:	4618      	mov	r0, r3
 8101afe:	f7ff fbff 	bl	8101300 <_ZNSt8__detail20_Prime_rehash_policyC1Ef>
 8101b02:	68fb      	ldr	r3, [r7, #12]
 8101b04:	2200      	movs	r2, #0
 8101b06:	619a      	str	r2, [r3, #24]
      { }
 8101b08:	68fb      	ldr	r3, [r7, #12]
 8101b0a:	4618      	mov	r0, r3
 8101b0c:	371c      	adds	r7, #28
 8101b0e:	46bd      	mov	sp, r7
 8101b10:	bd90      	pop	{r4, r7, pc}

08101b12 <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_allocate_bucketsEj>:
      _M_allocate_buckets(size_type __bkt_count)
 8101b12:	b580      	push	{r7, lr}
 8101b14:	b082      	sub	sp, #8
 8101b16:	af00      	add	r7, sp, #0
 8101b18:	6078      	str	r0, [r7, #4]
 8101b1a:	6039      	str	r1, [r7, #0]
	if (__builtin_expect(__bkt_count == 1, false))
 8101b1c:	683b      	ldr	r3, [r7, #0]
 8101b1e:	2b01      	cmp	r3, #1
 8101b20:	bf0c      	ite	eq
 8101b22:	2301      	moveq	r3, #1
 8101b24:	2300      	movne	r3, #0
 8101b26:	b2db      	uxtb	r3, r3
 8101b28:	2b00      	cmp	r3, #0
 8101b2a:	d005      	beq.n	8101b38 <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_allocate_bucketsEj+0x26>
	    _M_single_bucket = nullptr;
 8101b2c:	687b      	ldr	r3, [r7, #4]
 8101b2e:	2200      	movs	r2, #0
 8101b30:	619a      	str	r2, [r3, #24]
	    return &_M_single_bucket;
 8101b32:	687b      	ldr	r3, [r7, #4]
 8101b34:	3318      	adds	r3, #24
 8101b36:	e005      	b.n	8101b44 <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_allocate_bucketsEj+0x32>
	return __hashtable_alloc::_M_allocate_buckets(__bkt_count);
 8101b38:	6839      	ldr	r1, [r7, #0]
 8101b3a:	6878      	ldr	r0, [r7, #4]
 8101b3c:	f000 f8e7 	bl	8101d0e <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEEEE19_M_allocate_bucketsEj>
 8101b40:	4603      	mov	r3, r0
 8101b42:	bf00      	nop
      }
 8101b44:	4618      	mov	r0, r3
 8101b46:	3708      	adds	r7, #8
 8101b48:	46bd      	mov	sp, r7
 8101b4a:	bd80      	pop	{r7, pc}

08101b4c <_ZNSt8__detail12_Insert_baseIN7APIDoIP12EDoIPRequestESt4pairIKS2_S3_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISB_ENS_10_Select1stESt8equal_toIS2_ESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_20_Prime_rehash_policyENS_17_Hashtable_traitsILb0ELb0ELb1EEEE20_M_conjure_hashtableEv>:
      _M_conjure_hashtable()
 8101b4c:	b480      	push	{r7}
 8101b4e:	b083      	sub	sp, #12
 8101b50:	af00      	add	r7, sp, #0
 8101b52:	6078      	str	r0, [r7, #4]
      { return *(static_cast<__hashtable*>(this)); }
 8101b54:	687b      	ldr	r3, [r7, #4]
 8101b56:	4618      	mov	r0, r3
 8101b58:	370c      	adds	r7, #12
 8101b5a:	46bd      	mov	sp, r7
 8101b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101b60:	4770      	bx	lr

08101b62 <_ZNSt8__detail10_AllocNodeISaINS_10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEEEEC1ERNS_16_Hashtable_allocISE_EE>:
      _AllocNode(__hashtable_alloc& __h)
 8101b62:	b480      	push	{r7}
 8101b64:	b083      	sub	sp, #12
 8101b66:	af00      	add	r7, sp, #0
 8101b68:	6078      	str	r0, [r7, #4]
 8101b6a:	6039      	str	r1, [r7, #0]
      : _M_h(__h) { }
 8101b6c:	687b      	ldr	r3, [r7, #4]
 8101b6e:	683a      	ldr	r2, [r7, #0]
 8101b70:	601a      	str	r2, [r3, #0]
 8101b72:	687b      	ldr	r3, [r7, #4]
 8101b74:	4618      	mov	r0, r3
 8101b76:	370c      	adds	r7, #12
 8101b78:	46bd      	mov	sp, r7
 8101b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101b7e:	4770      	bx	lr

08101b80 <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE9_M_insertIRKSA_NSC_10_AllocNodeISaINSC_10_Hash_nodeISA_Lb0EEEEEEEES2_INSC_14_Node_iteratorISA_Lb0ELb0EEEbEOT_RKT0_St17integral_constantIbLb1EE>:
	_M_insert(_Arg&& __arg, const _NodeGenerator& __node_gen,
 8101b80:	b590      	push	{r4, r7, lr}
 8101b82:	b089      	sub	sp, #36	@ 0x24
 8101b84:	af02      	add	r7, sp, #8
 8101b86:	60f8      	str	r0, [r7, #12]
 8101b88:	60b9      	str	r1, [r7, #8]
 8101b8a:	607a      	str	r2, [r7, #4]
 8101b8c:	603b      	str	r3, [r7, #0]
	    _S_forward_key(_ExtractKey{}(std::forward<_Arg>(__arg))),
 8101b8e:	6878      	ldr	r0, [r7, #4]
 8101b90:	f000 f8ea 	bl	8101d68 <_ZSt7forwardIRKSt4pairIKN7APIDoIP12EDoIPRequestES0_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEEEOT_RNSt16remove_referenceISD_E4typeE>
 8101b94:	4602      	mov	r2, r0
 8101b96:	f107 0314 	add.w	r3, r7, #20
 8101b9a:	4611      	mov	r1, r2
 8101b9c:	4618      	mov	r0, r3
 8101b9e:	f000 f8ee 	bl	8101d7e <_ZNKSt8__detail10_Select1stclIRKSt4pairIKN7APIDoIP12EDoIPRequestES2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEEEEONS0_10__1st_typeIT_E4typeEOSG_>
 8101ba2:	4603      	mov	r3, r0
 8101ba4:	4618      	mov	r0, r3
 8101ba6:	f000 f8f7 	bl	8101d98 <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE14_S_forward_keyERS3_>
 8101baa:	4604      	mov	r4, r0
	  return _M_insert_unique(
 8101bac:	6878      	ldr	r0, [r7, #4]
 8101bae:	f000 f8db 	bl	8101d68 <_ZSt7forwardIRKSt4pairIKN7APIDoIP12EDoIPRequestES0_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEEEOT_RNSt16remove_referenceISD_E4typeE>
 8101bb2:	4602      	mov	r2, r0
 8101bb4:	68f8      	ldr	r0, [r7, #12]
 8101bb6:	683b      	ldr	r3, [r7, #0]
 8101bb8:	9300      	str	r3, [sp, #0]
 8101bba:	4613      	mov	r3, r2
 8101bbc:	4622      	mov	r2, r4
 8101bbe:	68b9      	ldr	r1, [r7, #8]
 8101bc0:	f000 f8f5 	bl	8101dae <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE16_M_insert_uniqueIRS3_RKSA_NSC_10_AllocNodeISaINSC_10_Hash_nodeISA_Lb0EEEEEEEES2_INSC_14_Node_iteratorISA_Lb0ELb0EEEbEOT_OT0_RKT1_>
	    std::forward<_Arg>(__arg), __node_gen);
 8101bc4:	bf00      	nop
	}
 8101bc6:	68f8      	ldr	r0, [r7, #12]
 8101bc8:	371c      	adds	r7, #28
 8101bca:	46bd      	mov	sp, r7
 8101bcc:	bd90      	pop	{r4, r7, pc}

08101bce <_ZNKSt8__detail10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES1_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EE7_M_nextEv>:
      _M_next() const noexcept
 8101bce:	b480      	push	{r7}
 8101bd0:	b083      	sub	sp, #12
 8101bd2:	af00      	add	r7, sp, #0
 8101bd4:	6078      	str	r0, [r7, #4]
      { return static_cast<_Hash_node*>(this->_M_nxt); }
 8101bd6:	687b      	ldr	r3, [r7, #4]
 8101bd8:	681b      	ldr	r3, [r3, #0]
 8101bda:	4618      	mov	r0, r3
 8101bdc:	370c      	adds	r7, #12
 8101bde:	46bd      	mov	sp, r7
 8101be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101be4:	4770      	bx	lr

08101be6 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEEEE18_M_deallocate_nodeEPSD_>:
    _Hashtable_alloc<_NodeAlloc>::_M_deallocate_node(__node_ptr __n)
 8101be6:	b590      	push	{r4, r7, lr}
 8101be8:	b083      	sub	sp, #12
 8101bea:	af00      	add	r7, sp, #0
 8101bec:	6078      	str	r0, [r7, #4]
 8101bee:	6039      	str	r1, [r7, #0]
      __node_alloc_traits::destroy(_M_node_allocator(), __n->_M_valptr());
 8101bf0:	6878      	ldr	r0, [r7, #4]
 8101bf2:	f000 f98d 	bl	8101f10 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEEEE17_M_node_allocatorEv>
 8101bf6:	4604      	mov	r4, r0
 8101bf8:	683b      	ldr	r3, [r7, #0]
 8101bfa:	3304      	adds	r3, #4
 8101bfc:	4618      	mov	r0, r3
 8101bfe:	f000 f993 	bl	8101f28 <_ZNSt8__detail21_Hash_node_value_baseISt4pairIKN7APIDoIP12EDoIPRequestES1_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEEE9_M_valptrEv>
 8101c02:	4603      	mov	r3, r0
 8101c04:	4619      	mov	r1, r3
 8101c06:	4620      	mov	r0, r4
 8101c08:	f000 f99b 	bl	8101f42 <_ZNSt16allocator_traitsISaINSt8__detail10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEEEE7destroyISC_EEvRSE_PT_>
      _M_deallocate_node_ptr(__n);
 8101c0c:	6839      	ldr	r1, [r7, #0]
 8101c0e:	6878      	ldr	r0, [r7, #4]
 8101c10:	f000 f9a3 	bl	8101f5a <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEEEE22_M_deallocate_node_ptrEPSD_>
    }
 8101c14:	bf00      	nop
 8101c16:	370c      	adds	r7, #12
 8101c18:	46bd      	mov	sp, r7
 8101c1a:	bd90      	pop	{r4, r7, pc}

08101c1c <_ZNKSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_uses_single_bucketEPPNSC_15_Hash_node_baseE>:
      _M_uses_single_bucket(__buckets_ptr __bkts) const
 8101c1c:	b480      	push	{r7}
 8101c1e:	b083      	sub	sp, #12
 8101c20:	af00      	add	r7, sp, #0
 8101c22:	6078      	str	r0, [r7, #4]
 8101c24:	6039      	str	r1, [r7, #0]
      { return __builtin_expect(__bkts == &_M_single_bucket, false); }
 8101c26:	687b      	ldr	r3, [r7, #4]
 8101c28:	3318      	adds	r3, #24
 8101c2a:	683a      	ldr	r2, [r7, #0]
 8101c2c:	429a      	cmp	r2, r3
 8101c2e:	bf0c      	ite	eq
 8101c30:	2301      	moveq	r3, #1
 8101c32:	2300      	movne	r3, #0
 8101c34:	b2db      	uxtb	r3, r3
 8101c36:	2b00      	cmp	r3, #0
 8101c38:	bf14      	ite	ne
 8101c3a:	2301      	movne	r3, #1
 8101c3c:	2300      	moveq	r3, #0
 8101c3e:	b2db      	uxtb	r3, r3
 8101c40:	4618      	mov	r0, r3
 8101c42:	370c      	adds	r7, #12
 8101c44:	46bd      	mov	sp, r7
 8101c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101c4a:	4770      	bx	lr

08101c4c <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEEEE21_M_deallocate_bucketsEPPNS_15_Hash_node_baseEj>:
      return __p;
    }

  template<typename _NodeAlloc>
    void
    _Hashtable_alloc<_NodeAlloc>::
 8101c4c:	b580      	push	{r7, lr}
 8101c4e:	b086      	sub	sp, #24
 8101c50:	af00      	add	r7, sp, #0
 8101c52:	60f8      	str	r0, [r7, #12]
 8101c54:	60b9      	str	r1, [r7, #8]
 8101c56:	607a      	str	r2, [r7, #4]
    _M_deallocate_buckets(__buckets_ptr __bkts,
			  std::size_t __bkt_count)
    {
      typedef typename __buckets_alloc_traits::pointer _Ptr;
      auto __ptr = std::pointer_traits<_Ptr>::pointer_to(*__bkts);
 8101c58:	68b8      	ldr	r0, [r7, #8]
 8101c5a:	f000 f994 	bl	8101f86 <_ZNSt19__ptr_traits_ptr_toIPPNSt8__detail15_Hash_node_baseES2_Lb0EE10pointer_toERS2_>
 8101c5e:	6178      	str	r0, [r7, #20]
      __buckets_alloc_type __alloc(_M_node_allocator());
 8101c60:	68f8      	ldr	r0, [r7, #12]
 8101c62:	f000 f955 	bl	8101f10 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEEEE17_M_node_allocatorEv>
 8101c66:	4602      	mov	r2, r0
 8101c68:	f107 0310 	add.w	r3, r7, #16
 8101c6c:	4611      	mov	r1, r2
 8101c6e:	4618      	mov	r0, r3
 8101c70:	f000 f995 	bl	8101f9e <_ZNSaIPNSt8__detail15_Hash_node_baseEEC1INS_10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES5_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEEEERKSaIT_E>
      __buckets_alloc_traits::deallocate(__alloc, __ptr, __bkt_count);
 8101c74:	f107 0310 	add.w	r3, r7, #16
 8101c78:	687a      	ldr	r2, [r7, #4]
 8101c7a:	6979      	ldr	r1, [r7, #20]
 8101c7c:	4618      	mov	r0, r3
 8101c7e:	f000 f9a6 	bl	8101fce <_ZNSt16allocator_traitsISaIPNSt8__detail15_Hash_node_baseEEE10deallocateERS3_PS2_j>
    }
 8101c82:	f107 0310 	add.w	r3, r7, #16
 8101c86:	4618      	mov	r0, r3
 8101c88:	f000 f996 	bl	8101fb8 <_ZNSaIPNSt8__detail15_Hash_node_baseEED1Ev>
 8101c8c:	3718      	adds	r7, #24
 8101c8e:	46bd      	mov	sp, r7
 8101c90:	bd80      	pop	{r7, pc}

08101c92 <_ZNSaINSt8__detail10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES1_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEEEC1ISB_EERKSaIT_E>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
 8101c92:	b580      	push	{r7, lr}
 8101c94:	b082      	sub	sp, #8
 8101c96:	af00      	add	r7, sp, #0
 8101c98:	6078      	str	r0, [r7, #4]
 8101c9a:	6039      	str	r1, [r7, #0]
 8101c9c:	6878      	ldr	r0, [r7, #4]
 8101c9e:	f000 f9b5 	bl	810200c <_ZNSt15__new_allocatorINSt8__detail10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEEEC1Ev>
 8101ca2:	687b      	ldr	r3, [r7, #4]
 8101ca4:	4618      	mov	r0, r3
 8101ca6:	3708      	adds	r7, #8
 8101ca8:	46bd      	mov	sp, r7
 8101caa:	bd80      	pop	{r7, pc}

08101cac <_ZNSt8__detail15_Hashtable_baseIN7APIDoIP12EDoIPRequestESt4pairIKS2_S3_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEENS_10_Select1stESt8equal_toIS2_ESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEEC1ERKSG_RKSE_>:
      _Hashtable_base(const _Hash& __hash, const _Equal& __eq)
 8101cac:	b580      	push	{r7, lr}
 8101cae:	b084      	sub	sp, #16
 8101cb0:	af00      	add	r7, sp, #0
 8101cb2:	60f8      	str	r0, [r7, #12]
 8101cb4:	60b9      	str	r1, [r7, #8]
 8101cb6:	607a      	str	r2, [r7, #4]
      : __hash_code_base(__hash), _EqualEBO(__eq)
 8101cb8:	68b9      	ldr	r1, [r7, #8]
 8101cba:	68f8      	ldr	r0, [r7, #12]
 8101cbc:	f000 f9b1 	bl	8102022 <_ZNSt8__detail15_Hash_code_baseIN7APIDoIP12EDoIPRequestESt4pairIKS2_S3_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEENS_10_Select1stESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EEC1ERKSE_>
 8101cc0:	6879      	ldr	r1, [r7, #4]
 8101cc2:	68f8      	ldr	r0, [r7, #12]
 8101cc4:	f000 f9bb 	bl	810203e <_ZNSt8__detail21_Hashtable_ebo_helperILi0ESt8equal_toIN7APIDoIP12EDoIPRequestEELb1EEC1IRKS4_EEOT_>
      { }
 8101cc8:	68fb      	ldr	r3, [r7, #12]
 8101cca:	4618      	mov	r0, r3
 8101ccc:	3710      	adds	r7, #16
 8101cce:	46bd      	mov	sp, r7
 8101cd0:	bd80      	pop	{r7, pc}

08101cd2 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEEEEC1ISE_EEOT_>:
	_Hashtable_alloc(_Alloc&& __a)
 8101cd2:	b580      	push	{r7, lr}
 8101cd4:	b082      	sub	sp, #8
 8101cd6:	af00      	add	r7, sp, #0
 8101cd8:	6078      	str	r0, [r7, #4]
 8101cda:	6039      	str	r1, [r7, #0]
	: __ebo_node_alloc(std::forward<_Alloc>(__a))
 8101cdc:	6838      	ldr	r0, [r7, #0]
 8101cde:	f000 f9bb 	bl	8102058 <_ZSt7forwardISaINSt8__detail10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEEEEOT_RNSt16remove_referenceISF_E4typeE>
 8101ce2:	4603      	mov	r3, r0
 8101ce4:	4619      	mov	r1, r3
 8101ce6:	6878      	ldr	r0, [r7, #4]
 8101ce8:	f000 f9c1 	bl	810206e <_ZNSt8__detail21_Hashtable_ebo_helperILi0ESaINS_10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEEELb1EEC1ISE_EEOT_>
	{ }
 8101cec:	687b      	ldr	r3, [r7, #4]
 8101cee:	4618      	mov	r0, r3
 8101cf0:	3708      	adds	r7, #8
 8101cf2:	46bd      	mov	sp, r7
 8101cf4:	bd80      	pop	{r7, pc}

08101cf6 <_ZNSt27_Enable_default_constructorILb1ENSt8__detail15_Hash_node_baseEEC1ESt31_Enable_default_constructor_tag>:
    _Enable_default_constructor&
    operator=(_Enable_default_constructor&&) noexcept = default;

    // Can be used in other ctors.
    constexpr explicit
    _Enable_default_constructor(_Enable_default_constructor_tag) { }
 8101cf6:	b480      	push	{r7}
 8101cf8:	b083      	sub	sp, #12
 8101cfa:	af00      	add	r7, sp, #0
 8101cfc:	6078      	str	r0, [r7, #4]
 8101cfe:	7039      	strb	r1, [r7, #0]
 8101d00:	687b      	ldr	r3, [r7, #4]
 8101d02:	4618      	mov	r0, r3
 8101d04:	370c      	adds	r7, #12
 8101d06:	46bd      	mov	sp, r7
 8101d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101d0c:	4770      	bx	lr

08101d0e <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEEEE19_M_allocate_bucketsEj>:
    _Hashtable_alloc<_NodeAlloc>::_M_allocate_buckets(std::size_t __bkt_count)
 8101d0e:	b590      	push	{r4, r7, lr}
 8101d10:	b087      	sub	sp, #28
 8101d12:	af00      	add	r7, sp, #0
 8101d14:	6078      	str	r0, [r7, #4]
 8101d16:	6039      	str	r1, [r7, #0]
      __buckets_alloc_type __alloc(_M_node_allocator());
 8101d18:	6878      	ldr	r0, [r7, #4]
 8101d1a:	f000 f8f9 	bl	8101f10 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEEEE17_M_node_allocatorEv>
 8101d1e:	4602      	mov	r2, r0
 8101d20:	f107 030c 	add.w	r3, r7, #12
 8101d24:	4611      	mov	r1, r2
 8101d26:	4618      	mov	r0, r3
 8101d28:	f000 f939 	bl	8101f9e <_ZNSaIPNSt8__detail15_Hash_node_baseEEC1INS_10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES5_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEEEERKSaIT_E>
      auto __ptr = __buckets_alloc_traits::allocate(__alloc, __bkt_count);
 8101d2c:	f107 030c 	add.w	r3, r7, #12
 8101d30:	6839      	ldr	r1, [r7, #0]
 8101d32:	4618      	mov	r0, r3
 8101d34:	f000 f9ad 	bl	8102092 <_ZNSt16allocator_traitsISaIPNSt8__detail15_Hash_node_baseEEE8allocateERS3_j>
 8101d38:	6178      	str	r0, [r7, #20]
      __buckets_ptr __p = std::__to_address(__ptr);
 8101d3a:	6978      	ldr	r0, [r7, #20]
 8101d3c:	f000 f9da 	bl	81020f4 <_ZSt12__to_addressIPNSt8__detail15_Hash_node_baseEEPT_S4_>
 8101d40:	6138      	str	r0, [r7, #16]
      __builtin_memset(__p, 0, __bkt_count * sizeof(__node_base_ptr));
 8101d42:	683b      	ldr	r3, [r7, #0]
 8101d44:	009b      	lsls	r3, r3, #2
 8101d46:	693a      	ldr	r2, [r7, #16]
 8101d48:	4610      	mov	r0, r2
 8101d4a:	461a      	mov	r2, r3
 8101d4c:	2100      	movs	r1, #0
 8101d4e:	f022 f8a5 	bl	8123e9c <memset>
      return __p;
 8101d52:	693c      	ldr	r4, [r7, #16]
    }
 8101d54:	f107 030c 	add.w	r3, r7, #12
 8101d58:	4618      	mov	r0, r3
 8101d5a:	f000 f92d 	bl	8101fb8 <_ZNSaIPNSt8__detail15_Hash_node_baseEED1Ev>
      return __p;
 8101d5e:	4623      	mov	r3, r4
    }
 8101d60:	4618      	mov	r0, r3
 8101d62:	371c      	adds	r7, #28
 8101d64:	46bd      	mov	sp, r7
 8101d66:	bd90      	pop	{r4, r7, pc}

08101d68 <_ZSt7forwardIRKSt4pairIKN7APIDoIP12EDoIPRequestES0_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEEEOT_RNSt16remove_referenceISD_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8101d68:	b480      	push	{r7}
 8101d6a:	b083      	sub	sp, #12
 8101d6c:	af00      	add	r7, sp, #0
 8101d6e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8101d70:	687b      	ldr	r3, [r7, #4]
 8101d72:	4618      	mov	r0, r3
 8101d74:	370c      	adds	r7, #12
 8101d76:	46bd      	mov	sp, r7
 8101d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101d7c:	4770      	bx	lr

08101d7e <_ZNKSt8__detail10_Select1stclIRKSt4pairIKN7APIDoIP12EDoIPRequestES2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEEEEONS0_10__1st_typeIT_E4typeEOSG_>:
      operator()(_Tp&& __x) const noexcept
 8101d7e:	b580      	push	{r7, lr}
 8101d80:	b082      	sub	sp, #8
 8101d82:	af00      	add	r7, sp, #0
 8101d84:	6078      	str	r0, [r7, #4]
 8101d86:	6039      	str	r1, [r7, #0]
      { return std::forward<_Tp>(__x).first; }
 8101d88:	6838      	ldr	r0, [r7, #0]
 8101d8a:	f7ff ffed 	bl	8101d68 <_ZSt7forwardIRKSt4pairIKN7APIDoIP12EDoIPRequestES0_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEEEOT_RNSt16remove_referenceISD_E4typeE>
 8101d8e:	4603      	mov	r3, r0
 8101d90:	4618      	mov	r0, r3
 8101d92:	3708      	adds	r7, #8
 8101d94:	46bd      	mov	sp, r7
 8101d96:	bd80      	pop	{r7, pc}

08101d98 <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE14_S_forward_keyERS3_>:
      _S_forward_key(const key_type& __k)
 8101d98:	b480      	push	{r7}
 8101d9a:	b083      	sub	sp, #12
 8101d9c:	af00      	add	r7, sp, #0
 8101d9e:	6078      	str	r0, [r7, #4]
      { return __k; }
 8101da0:	687b      	ldr	r3, [r7, #4]
 8101da2:	4618      	mov	r0, r3
 8101da4:	370c      	adds	r7, #12
 8101da6:	46bd      	mov	sp, r7
 8101da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101dac:	4770      	bx	lr

08101dae <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE16_M_insert_uniqueIRS3_RKSA_NSC_10_AllocNodeISaINSC_10_Hash_nodeISA_Lb0EEEEEEEES2_INSC_14_Node_iteratorISA_Lb0ELb0EEEbEOT_OT0_RKT1_>:
      _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
 8101dae:	b590      	push	{r4, r7, lr}
 8101db0:	b093      	sub	sp, #76	@ 0x4c
 8101db2:	af02      	add	r7, sp, #8
 8101db4:	60f8      	str	r0, [r7, #12]
 8101db6:	60b9      	str	r1, [r7, #8]
 8101db8:	607a      	str	r2, [r7, #4]
 8101dba:	603b      	str	r3, [r7, #0]
	if (size() <= __small_size_threshold())
 8101dbc:	68b8      	ldr	r0, [r7, #8]
 8101dbe:	f000 f9a4 	bl	810210a <_ZNKSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE4sizeEv>
 8101dc2:	4604      	mov	r4, r0
 8101dc4:	f000 f9ad 	bl	8102122 <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE22__small_size_thresholdEv>
 8101dc8:	4603      	mov	r3, r0
 8101dca:	429c      	cmp	r4, r3
 8101dcc:	bf94      	ite	ls
 8101dce:	2301      	movls	r3, #1
 8101dd0:	2300      	movhi	r3, #0
 8101dd2:	b2db      	uxtb	r3, r3
 8101dd4:	2b00      	cmp	r3, #0
 8101dd6:	d033      	beq.n	8101e40 <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE16_M_insert_uniqueIRS3_RKSA_NSC_10_AllocNodeISaINSC_10_Hash_nodeISA_Lb0EEEEEEEES2_INSC_14_Node_iteratorISA_Lb0ELb0EEEbEOT_OT0_RKT1_+0x92>
	  for (auto __it = begin(); __it != end(); ++__it)
 8101dd8:	68b8      	ldr	r0, [r7, #8]
 8101dda:	f000 f9a9 	bl	8102130 <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE5beginEv>
 8101dde:	4603      	mov	r3, r0
 8101de0:	617b      	str	r3, [r7, #20]
 8101de2:	e01a      	b.n	8101e1a <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE16_M_insert_uniqueIRS3_RKSA_NSC_10_AllocNodeISaINSC_10_Hash_nodeISA_Lb0EEEEEEEES2_INSC_14_Node_iteratorISA_Lb0ELb0EEEbEOT_OT0_RKT1_+0x6c>
	    if (this->_M_key_equals_tr(__k, *__it._M_cur))
 8101de4:	697b      	ldr	r3, [r7, #20]
 8101de6:	3304      	adds	r3, #4
 8101de8:	461a      	mov	r2, r3
 8101dea:	6879      	ldr	r1, [r7, #4]
 8101dec:	68b8      	ldr	r0, [r7, #8]
 8101dee:	f000 f9e2 	bl	81021b6 <_ZNKSt8__detail15_Hashtable_baseIN7APIDoIP12EDoIPRequestESt4pairIKS2_S3_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEENS_10_Select1stESt8equal_toIS2_ESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEE16_M_key_equals_trIS2_EEbRKT_RKNS_16_Hash_node_valueISB_Lb0EEE>
 8101df2:	4603      	mov	r3, r0
 8101df4:	2b00      	cmp	r3, #0
 8101df6:	d00b      	beq.n	8101e10 <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE16_M_insert_uniqueIRS3_RKSA_NSC_10_AllocNodeISaINSC_10_Hash_nodeISA_Lb0EEEEEEEES2_INSC_14_Node_iteratorISA_Lb0ELb0EEEbEOT_OT0_RKT1_+0x62>
	      return { __it, false };
 8101df8:	2300      	movs	r3, #0
 8101dfa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8101dfe:	f107 0227 	add.w	r2, r7, #39	@ 0x27
 8101e02:	f107 0314 	add.w	r3, r7, #20
 8101e06:	4619      	mov	r1, r3
 8101e08:	68f8      	ldr	r0, [r7, #12]
 8101e0a:	f000 f9f4 	bl	81021f6 <_ZNSt4pairINSt8__detail14_Node_iteratorIS_IKN7APIDoIP12EDoIPRequestES_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0ELb0EEEbEC1IRSC_bEEOT_OT0_>
      }
 8101e0e:	e07b      	b.n	8101f08 <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE16_M_insert_uniqueIRS3_RKSA_NSC_10_AllocNodeISaINSC_10_Hash_nodeISA_Lb0EEEEEEEES2_INSC_14_Node_iteratorISA_Lb0ELb0EEEbEOT_OT0_RKT1_+0x15a>
	  for (auto __it = begin(); __it != end(); ++__it)
 8101e10:	f107 0314 	add.w	r3, r7, #20
 8101e14:	4618      	mov	r0, r3
 8101e16:	f000 f9c1 	bl	810219c <_ZNSt8__detail14_Node_iteratorISt4pairIKN7APIDoIP12EDoIPRequestES1_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0ELb0EEppEv>
 8101e1a:	68b8      	ldr	r0, [r7, #8]
 8101e1c:	f000 f99b 	bl	8102156 <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE3endEv>
 8101e20:	4603      	mov	r3, r0
 8101e22:	62bb      	str	r3, [r7, #40]	@ 0x28
 8101e24:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8101e28:	f107 0314 	add.w	r3, r7, #20
 8101e2c:	4611      	mov	r1, r2
 8101e2e:	4618      	mov	r0, r3
 8101e30:	f000 f9a0 	bl	8102174 <_ZNSt8__detaileqERKNS_19_Node_iterator_baseISt4pairIKN7APIDoIP12EDoIPRequestES1_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEESE_>
 8101e34:	4603      	mov	r3, r0
 8101e36:	f083 0301 	eor.w	r3, r3, #1
 8101e3a:	b2db      	uxtb	r3, r3
 8101e3c:	2b00      	cmp	r3, #0
 8101e3e:	d1d1      	bne.n	8101de4 <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE16_M_insert_uniqueIRS3_RKSA_NSC_10_AllocNodeISaINSC_10_Hash_nodeISA_Lb0EEEEEEEES2_INSC_14_Node_iteratorISA_Lb0ELb0EEEbEOT_OT0_RKT1_+0x36>
	__hash_code __code = this->_M_hash_code_tr(__k);
 8101e40:	6879      	ldr	r1, [r7, #4]
 8101e42:	68b8      	ldr	r0, [r7, #8]
 8101e44:	f000 f9f0 	bl	8102228 <_ZNKSt8__detail15_Hash_code_baseIN7APIDoIP12EDoIPRequestESt4pairIKS2_S3_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEENS_10_Select1stESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE15_M_hash_code_trIS2_EEjRKT_>
 8101e48:	63f8      	str	r0, [r7, #60]	@ 0x3c
	size_type __bkt = _M_bucket_index(__code);
 8101e4a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8101e4c:	68b8      	ldr	r0, [r7, #8]
 8101e4e:	f000 fa00 	bl	8102252 <_ZNKSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE15_M_bucket_indexEj>
 8101e52:	63b8      	str	r0, [r7, #56]	@ 0x38
	if (size() > __small_size_threshold())
 8101e54:	68b8      	ldr	r0, [r7, #8]
 8101e56:	f000 f958 	bl	810210a <_ZNKSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE4sizeEv>
 8101e5a:	4604      	mov	r4, r0
 8101e5c:	f000 f961 	bl	8102122 <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE22__small_size_thresholdEv>
 8101e60:	4603      	mov	r3, r0
 8101e62:	429c      	cmp	r4, r3
 8101e64:	bf8c      	ite	hi
 8101e66:	2301      	movhi	r3, #1
 8101e68:	2300      	movls	r3, #0
 8101e6a:	b2db      	uxtb	r3, r3
 8101e6c:	2b00      	cmp	r3, #0
 8101e6e:	d01b      	beq.n	8101ea8 <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE16_M_insert_uniqueIRS3_RKSA_NSC_10_AllocNodeISaINSC_10_Hash_nodeISA_Lb0EEEEEEEES2_INSC_14_Node_iteratorISA_Lb0ELb0EEEbEOT_OT0_RKT1_+0xfa>
	  if (__node_ptr __node = _M_find_node_tr(__bkt, __k, __code))
 8101e70:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8101e72:	687a      	ldr	r2, [r7, #4]
 8101e74:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8101e76:	68b8      	ldr	r0, [r7, #8]
 8101e78:	f000 f9fc 	bl	8102274 <_ZNKSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE15_M_find_node_trIS1_EEPNSC_10_Hash_nodeISA_Lb0EEEjRKT_j>
 8101e7c:	6378      	str	r0, [r7, #52]	@ 0x34
 8101e7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8101e80:	2b00      	cmp	r3, #0
 8101e82:	d011      	beq.n	8101ea8 <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE16_M_insert_uniqueIRS3_RKSA_NSC_10_AllocNodeISaINSC_10_Hash_nodeISA_Lb0EEEEEEEES2_INSC_14_Node_iteratorISA_Lb0ELb0EEEbEOT_OT0_RKT1_+0xfa>
	    return { iterator(__node), false };
 8101e84:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8101e88:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8101e8a:	4618      	mov	r0, r3
 8101e8c:	f000 fa0b 	bl	81022a6 <_ZNSt8__detail14_Node_iteratorISt4pairIKN7APIDoIP12EDoIPRequestES1_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0ELb0EEC1EPNS_10_Hash_nodeISB_Lb0EEE>
 8101e90:	2300      	movs	r3, #0
 8101e92:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
 8101e96:	f107 0232 	add.w	r2, r7, #50	@ 0x32
 8101e9a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8101e9e:	4619      	mov	r1, r3
 8101ea0:	68f8      	ldr	r0, [r7, #12]
 8101ea2:	f000 fa0f 	bl	81022c4 <_ZNSt4pairINSt8__detail14_Node_iteratorIS_IKN7APIDoIP12EDoIPRequestES_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0ELb0EEEbEC1ISC_bEEOT_OT0_>
      }
 8101ea6:	e02f      	b.n	8101f08 <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE16_M_insert_uniqueIRS3_RKSA_NSC_10_AllocNodeISaINSC_10_Hash_nodeISA_Lb0EEEEEEEES2_INSC_14_Node_iteratorISA_Lb0ELb0EEEbEOT_OT0_RKT1_+0x15a>
	_Scoped_node __node {
 8101ea8:	6878      	ldr	r0, [r7, #4]
 8101eaa:	f000 fa24 	bl	81022f6 <_ZSt7forwardIRKN7APIDoIP12EDoIPRequestEEOT_RNSt16remove_referenceIS4_E4typeE>
 8101eae:	4604      	mov	r4, r0
 8101eb0:	6838      	ldr	r0, [r7, #0]
 8101eb2:	f7ff ff59 	bl	8101d68 <_ZSt7forwardIRKSt4pairIKN7APIDoIP12EDoIPRequestES0_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEEEOT_RNSt16remove_referenceISD_E4typeE>
 8101eb6:	4603      	mov	r3, r0
 8101eb8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8101eba:	4619      	mov	r1, r3
 8101ebc:	4620      	mov	r0, r4
 8101ebe:	f000 fa25 	bl	810230c <_ZNSt8__detail12_NodeBuilderINS_10_Select1stEE8_S_buildIRKN7APIDoIP12EDoIPRequestERKSt4pairIS6_S8_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEENS_10_AllocNodeISaINS_10_Hash_nodeISF_Lb0EEEEEEEEPNT1_11__node_typeEOT_OT0_RKSN_>
 8101ec2:	4601      	mov	r1, r0
 8101ec4:	f107 031c 	add.w	r3, r7, #28
 8101ec8:	68ba      	ldr	r2, [r7, #8]
 8101eca:	4618      	mov	r0, r3
 8101ecc:	f000 fa37 	bl	810233e <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE12_Scoped_nodeC1EPNSC_10_Hash_nodeISA_Lb0EEEPNSC_16_Hashtable_allocISaISQ_EEE>
	  = _M_insert_unique_node(__bkt, __code, __node._M_node);
 8101ed0:	6a3b      	ldr	r3, [r7, #32]
 8101ed2:	2201      	movs	r2, #1
 8101ed4:	9200      	str	r2, [sp, #0]
 8101ed6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8101ed8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8101eda:	68b8      	ldr	r0, [r7, #8]
 8101edc:	f000 fa57 	bl	810238e <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_insert_unique_nodeEjjPNSC_10_Hash_nodeISA_Lb0EEEj>
 8101ee0:	4603      	mov	r3, r0
 8101ee2:	61bb      	str	r3, [r7, #24]
	__node._M_node = nullptr;
 8101ee4:	2300      	movs	r3, #0
 8101ee6:	623b      	str	r3, [r7, #32]
	return { __pos, true };
 8101ee8:	2301      	movs	r3, #1
 8101eea:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 8101eee:	f107 0233 	add.w	r2, r7, #51	@ 0x33
 8101ef2:	f107 0318 	add.w	r3, r7, #24
 8101ef6:	4619      	mov	r1, r3
 8101ef8:	68f8      	ldr	r0, [r7, #12]
 8101efa:	f000 f97c 	bl	81021f6 <_ZNSt4pairINSt8__detail14_Node_iteratorIS_IKN7APIDoIP12EDoIPRequestES_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0ELb0EEEbEC1IRSC_bEEOT_OT0_>
      }
 8101efe:	f107 031c 	add.w	r3, r7, #28
 8101f02:	4618      	mov	r0, r3
 8101f04:	f000 fa2e 	bl	8102364 <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE12_Scoped_nodeD1Ev>
 8101f08:	68f8      	ldr	r0, [r7, #12]
 8101f0a:	3744      	adds	r7, #68	@ 0x44
 8101f0c:	46bd      	mov	sp, r7
 8101f0e:	bd90      	pop	{r4, r7, pc}

08101f10 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEEEE17_M_node_allocatorEv>:
      _M_node_allocator()
 8101f10:	b580      	push	{r7, lr}
 8101f12:	b082      	sub	sp, #8
 8101f14:	af00      	add	r7, sp, #0
 8101f16:	6078      	str	r0, [r7, #4]
      { return __ebo_node_alloc::_M_get(); }
 8101f18:	6878      	ldr	r0, [r7, #4]
 8101f1a:	f000 fa81 	bl	8102420 <_ZNSt8__detail21_Hashtable_ebo_helperILi0ESaINS_10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEEELb1EE6_M_getEv>
 8101f1e:	4603      	mov	r3, r0
 8101f20:	4618      	mov	r0, r3
 8101f22:	3708      	adds	r7, #8
 8101f24:	46bd      	mov	sp, r7
 8101f26:	bd80      	pop	{r7, pc}

08101f28 <_ZNSt8__detail21_Hash_node_value_baseISt4pairIKN7APIDoIP12EDoIPRequestES1_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEEE9_M_valptrEv>:
      _M_valptr() noexcept
 8101f28:	b580      	push	{r7, lr}
 8101f2a:	b082      	sub	sp, #8
 8101f2c:	af00      	add	r7, sp, #0
 8101f2e:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 8101f30:	687b      	ldr	r3, [r7, #4]
 8101f32:	4618      	mov	r0, r3
 8101f34:	f000 fa7f 	bl	8102436 <_ZN9__gnu_cxx16__aligned_bufferISt4pairIKN7APIDoIP12EDoIPRequestES1_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEEE6_M_ptrEv>
 8101f38:	4603      	mov	r3, r0
 8101f3a:	4618      	mov	r0, r3
 8101f3c:	3708      	adds	r7, #8
 8101f3e:	46bd      	mov	sp, r7
 8101f40:	bd80      	pop	{r7, pc}

08101f42 <_ZNSt16allocator_traitsISaINSt8__detail10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEEEE7destroyISC_EEvRSE_PT_>:
       *
       *  Calls @c __a.destroy(__p).
      */
      template<typename _Up>
	static _GLIBCXX20_CONSTEXPR void
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 8101f42:	b580      	push	{r7, lr}
 8101f44:	b082      	sub	sp, #8
 8101f46:	af00      	add	r7, sp, #0
 8101f48:	6078      	str	r0, [r7, #4]
 8101f4a:	6039      	str	r1, [r7, #0]
	noexcept(is_nothrow_destructible<_Up>::value)
	{
#if __cplusplus <= 201703L
	  __a.destroy(__p);
#else
	  std::destroy_at(__p);
 8101f4c:	6838      	ldr	r0, [r7, #0]
 8101f4e:	f000 fa7e 	bl	810244e <_ZSt10destroy_atISt4pairIKN7APIDoIP12EDoIPRequestES0_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEEEvPT_>
#endif
	}
 8101f52:	bf00      	nop
 8101f54:	3708      	adds	r7, #8
 8101f56:	46bd      	mov	sp, r7
 8101f58:	bd80      	pop	{r7, pc}

08101f5a <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEEEE22_M_deallocate_node_ptrEPSD_>:
    _Hashtable_alloc<_NodeAlloc>::_M_deallocate_node_ptr(__node_ptr __n)
 8101f5a:	b580      	push	{r7, lr}
 8101f5c:	b084      	sub	sp, #16
 8101f5e:	af00      	add	r7, sp, #0
 8101f60:	6078      	str	r0, [r7, #4]
 8101f62:	6039      	str	r1, [r7, #0]
      auto __ptr = std::pointer_traits<_Ptr>::pointer_to(*__n);
 8101f64:	6838      	ldr	r0, [r7, #0]
 8101f66:	f000 fa7c 	bl	8102462 <_ZNSt19__ptr_traits_ptr_toIPNSt8__detail10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEESD_Lb0EE10pointer_toERSD_>
 8101f6a:	60f8      	str	r0, [r7, #12]
      __node_alloc_traits::deallocate(_M_node_allocator(), __ptr, 1);
 8101f6c:	6878      	ldr	r0, [r7, #4]
 8101f6e:	f7ff ffcf 	bl	8101f10 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEEEE17_M_node_allocatorEv>
 8101f72:	4603      	mov	r3, r0
 8101f74:	2201      	movs	r2, #1
 8101f76:	68f9      	ldr	r1, [r7, #12]
 8101f78:	4618      	mov	r0, r3
 8101f7a:	f000 fa7e 	bl	810247a <_ZNSt16allocator_traitsISaINSt8__detail10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEEEE10deallocateERSE_PSD_j>
    }
 8101f7e:	bf00      	nop
 8101f80:	3710      	adds	r7, #16
 8101f82:	46bd      	mov	sp, r7
 8101f84:	bd80      	pop	{r7, pc}

08101f86 <_ZNSt19__ptr_traits_ptr_toIPPNSt8__detail15_Hash_node_baseES2_Lb0EE10pointer_toERS2_>:
       *  @brief  Obtain a pointer to an object
       *  @param  __r  A reference to an object of type `element_type`
       *  @return `addressof(__r)`
      */
      static _GLIBCXX20_CONSTEXPR pointer
      pointer_to(element_type& __r) noexcept
 8101f86:	b580      	push	{r7, lr}
 8101f88:	b082      	sub	sp, #8
 8101f8a:	af00      	add	r7, sp, #0
 8101f8c:	6078      	str	r0, [r7, #4]
      { return std::addressof(__r); }
 8101f8e:	6878      	ldr	r0, [r7, #4]
 8101f90:	f000 fa92 	bl	81024b8 <_ZSt9addressofIPNSt8__detail15_Hash_node_baseEEPT_RS3_>
 8101f94:	4603      	mov	r3, r0
 8101f96:	4618      	mov	r0, r3
 8101f98:	3708      	adds	r7, #8
 8101f9a:	46bd      	mov	sp, r7
 8101f9c:	bd80      	pop	{r7, pc}

08101f9e <_ZNSaIPNSt8__detail15_Hash_node_baseEEC1INS_10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES5_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEEEERKSaIT_E>:
 8101f9e:	b580      	push	{r7, lr}
 8101fa0:	b082      	sub	sp, #8
 8101fa2:	af00      	add	r7, sp, #0
 8101fa4:	6078      	str	r0, [r7, #4]
 8101fa6:	6039      	str	r1, [r7, #0]
 8101fa8:	6878      	ldr	r0, [r7, #4]
 8101faa:	f000 fa91 	bl	81024d0 <_ZNSt15__new_allocatorIPNSt8__detail15_Hash_node_baseEEC1Ev>
 8101fae:	687b      	ldr	r3, [r7, #4]
 8101fb0:	4618      	mov	r0, r3
 8101fb2:	3708      	adds	r7, #8
 8101fb4:	46bd      	mov	sp, r7
 8101fb6:	bd80      	pop	{r7, pc}

08101fb8 <_ZNSaIPNSt8__detail15_Hash_node_baseEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8101fb8:	b480      	push	{r7}
 8101fba:	b083      	sub	sp, #12
 8101fbc:	af00      	add	r7, sp, #0
 8101fbe:	6078      	str	r0, [r7, #4]
 8101fc0:	687b      	ldr	r3, [r7, #4]
 8101fc2:	4618      	mov	r0, r3
 8101fc4:	370c      	adds	r7, #12
 8101fc6:	46bd      	mov	sp, r7
 8101fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101fcc:	4770      	bx	lr

08101fce <_ZNSt16allocator_traitsISaIPNSt8__detail15_Hash_node_baseEEE10deallocateERS3_PS2_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8101fce:	b580      	push	{r7, lr}
 8101fd0:	b088      	sub	sp, #32
 8101fd2:	af00      	add	r7, sp, #0
 8101fd4:	60f8      	str	r0, [r7, #12]
 8101fd6:	60b9      	str	r1, [r7, #8]
 8101fd8:	607a      	str	r2, [r7, #4]
 8101fda:	68fb      	ldr	r3, [r7, #12]
 8101fdc:	61fb      	str	r3, [r7, #28]
 8101fde:	68bb      	ldr	r3, [r7, #8]
 8101fe0:	61bb      	str	r3, [r7, #24]
 8101fe2:	687b      	ldr	r3, [r7, #4]
 8101fe4:	617b      	str	r3, [r7, #20]

      [[__gnu__::__always_inline__]]
      constexpr void
      deallocate(_Tp* __p, size_t __n)
      {
	if (std::__is_constant_evaluated())
 8101fe6:	f7ff f947 	bl	8101278 <__is_constant_evaluated>
 8101fea:	4603      	mov	r3, r0
 8101fec:	2b00      	cmp	r3, #0
 8101fee:	d003      	beq.n	8101ff8 <_ZNSt16allocator_traitsISaIPNSt8__detail15_Hash_node_baseEEE10deallocateERS3_PS2_j+0x2a>
	  {
	    ::operator delete(__p);
 8101ff0:	69b8      	ldr	r0, [r7, #24]
 8101ff2:	f020 fda7 	bl	8122b44 <_ZdlPv>
	    return;
 8101ff6:	e005      	b.n	8102004 <_ZNSt16allocator_traitsISaIPNSt8__detail15_Hash_node_baseEEE10deallocateERS3_PS2_j+0x36>
	  }
	__allocator_base<_Tp>::deallocate(__p, __n);
 8101ff8:	697a      	ldr	r2, [r7, #20]
 8101ffa:	69b9      	ldr	r1, [r7, #24]
 8101ffc:	69f8      	ldr	r0, [r7, #28]
 8101ffe:	f000 fc18 	bl	8102832 <_ZNSt15__new_allocatorIPNSt8__detail15_Hash_node_baseEE10deallocateEPS2_j>
      { __a.deallocate(__p, __n); }
 8102002:	bf00      	nop
 8102004:	bf00      	nop
 8102006:	3720      	adds	r7, #32
 8102008:	46bd      	mov	sp, r7
 810200a:	bd80      	pop	{r7, pc}

0810200c <_ZNSt15__new_allocatorINSt8__detail10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEEEC1Ev>:
 810200c:	b480      	push	{r7}
 810200e:	b083      	sub	sp, #12
 8102010:	af00      	add	r7, sp, #0
 8102012:	6078      	str	r0, [r7, #4]
 8102014:	687b      	ldr	r3, [r7, #4]
 8102016:	4618      	mov	r0, r3
 8102018:	370c      	adds	r7, #12
 810201a:	46bd      	mov	sp, r7
 810201c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102020:	4770      	bx	lr

08102022 <_ZNSt8__detail15_Hash_code_baseIN7APIDoIP12EDoIPRequestESt4pairIKS2_S3_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEENS_10_Select1stESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EEC1ERKSE_>:
      _Hash_code_base(const _Hash& __hash) : __ebo_hash(__hash) { }
 8102022:	b580      	push	{r7, lr}
 8102024:	b082      	sub	sp, #8
 8102026:	af00      	add	r7, sp, #0
 8102028:	6078      	str	r0, [r7, #4]
 810202a:	6039      	str	r1, [r7, #0]
 810202c:	6839      	ldr	r1, [r7, #0]
 810202e:	6878      	ldr	r0, [r7, #4]
 8102030:	f000 fa59 	bl	81024e6 <_ZNSt8__detail21_Hashtable_ebo_helperILi1ESt4hashIN7APIDoIP12EDoIPRequestEELb1EEC1IRKS4_EEOT_>
 8102034:	687b      	ldr	r3, [r7, #4]
 8102036:	4618      	mov	r0, r3
 8102038:	3708      	adds	r7, #8
 810203a:	46bd      	mov	sp, r7
 810203c:	bd80      	pop	{r7, pc}

0810203e <_ZNSt8__detail21_Hashtable_ebo_helperILi0ESt8equal_toIN7APIDoIP12EDoIPRequestEELb1EEC1IRKS4_EEOT_>:
	_Hashtable_ebo_helper(_OtherTp&& __tp)
 810203e:	b580      	push	{r7, lr}
 8102040:	b082      	sub	sp, #8
 8102042:	af00      	add	r7, sp, #0
 8102044:	6078      	str	r0, [r7, #4]
 8102046:	6039      	str	r1, [r7, #0]
	: _Tp(std::forward<_OtherTp>(__tp))
 8102048:	6838      	ldr	r0, [r7, #0]
 810204a:	f000 fa59 	bl	8102500 <_ZSt7forwardIRKSt8equal_toIN7APIDoIP12EDoIPRequestEEEOT_RNSt16remove_referenceIS6_E4typeE>
	{ }
 810204e:	687b      	ldr	r3, [r7, #4]
 8102050:	4618      	mov	r0, r3
 8102052:	3708      	adds	r7, #8
 8102054:	46bd      	mov	sp, r7
 8102056:	bd80      	pop	{r7, pc}

08102058 <_ZSt7forwardISaINSt8__detail10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEEEEOT_RNSt16remove_referenceISF_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8102058:	b480      	push	{r7}
 810205a:	b083      	sub	sp, #12
 810205c:	af00      	add	r7, sp, #0
 810205e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8102060:	687b      	ldr	r3, [r7, #4]
 8102062:	4618      	mov	r0, r3
 8102064:	370c      	adds	r7, #12
 8102066:	46bd      	mov	sp, r7
 8102068:	f85d 7b04 	ldr.w	r7, [sp], #4
 810206c:	4770      	bx	lr

0810206e <_ZNSt8__detail21_Hashtable_ebo_helperILi0ESaINS_10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEEELb1EEC1ISE_EEOT_>:
	_Hashtable_ebo_helper(_OtherTp&& __tp)
 810206e:	b580      	push	{r7, lr}
 8102070:	b082      	sub	sp, #8
 8102072:	af00      	add	r7, sp, #0
 8102074:	6078      	str	r0, [r7, #4]
 8102076:	6039      	str	r1, [r7, #0]
	: _Tp(std::forward<_OtherTp>(__tp))
 8102078:	6838      	ldr	r0, [r7, #0]
 810207a:	f7ff ffed 	bl	8102058 <_ZSt7forwardISaINSt8__detail10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEEEEOT_RNSt16remove_referenceISF_E4typeE>
 810207e:	4603      	mov	r3, r0
 8102080:	4619      	mov	r1, r3
 8102082:	6878      	ldr	r0, [r7, #4]
 8102084:	f000 fa47 	bl	8102516 <_ZNSaINSt8__detail10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES1_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEEEC1ERKSD_>
	{ }
 8102088:	687b      	ldr	r3, [r7, #4]
 810208a:	4618      	mov	r0, r3
 810208c:	3708      	adds	r7, #8
 810208e:	46bd      	mov	sp, r7
 8102090:	bd80      	pop	{r7, pc}

08102092 <_ZNSt16allocator_traitsISaIPNSt8__detail15_Hash_node_baseEEE8allocateERS3_j>:
      allocate(allocator_type& __a, size_type __n)
 8102092:	b580      	push	{r7, lr}
 8102094:	b084      	sub	sp, #16
 8102096:	af00      	add	r7, sp, #0
 8102098:	6078      	str	r0, [r7, #4]
 810209a:	6039      	str	r1, [r7, #0]
 810209c:	687b      	ldr	r3, [r7, #4]
 810209e:	60fb      	str	r3, [r7, #12]
 81020a0:	683b      	ldr	r3, [r7, #0]
 81020a2:	60bb      	str	r3, [r7, #8]
	if (std::__is_constant_evaluated())
 81020a4:	f7ff f8e8 	bl	8101278 <__is_constant_evaluated>
 81020a8:	4603      	mov	r3, r0
 81020aa:	2b00      	cmp	r3, #0
 81020ac:	d016      	beq.n	81020dc <_ZNSt16allocator_traitsISaIPNSt8__detail15_Hash_node_baseEEE8allocateERS3_j+0x4a>
	    if (__builtin_mul_overflow(__n, sizeof(_Tp), &__n))
 81020ae:	68bb      	ldr	r3, [r7, #8]
 81020b0:	2200      	movs	r2, #0
 81020b2:	0099      	lsls	r1, r3, #2
 81020b4:	0f9b      	lsrs	r3, r3, #30
 81020b6:	2b00      	cmp	r3, #0
 81020b8:	d000      	beq.n	81020bc <_ZNSt16allocator_traitsISaIPNSt8__detail15_Hash_node_baseEEE8allocateERS3_j+0x2a>
 81020ba:	2201      	movs	r2, #1
 81020bc:	460b      	mov	r3, r1
 81020be:	60bb      	str	r3, [r7, #8]
 81020c0:	4613      	mov	r3, r2
 81020c2:	f003 0301 	and.w	r3, r3, #1
 81020c6:	b2db      	uxtb	r3, r3
 81020c8:	2b00      	cmp	r3, #0
 81020ca:	d001      	beq.n	81020d0 <_ZNSt16allocator_traitsISaIPNSt8__detail15_Hash_node_baseEEE8allocateERS3_j+0x3e>
	      std::__throw_bad_array_new_length();
 81020cc:	f020 fe1e 	bl	8122d0c <_ZSt28__throw_bad_array_new_lengthv>
	    return static_cast<_Tp*>(::operator new(__n));
 81020d0:	68bb      	ldr	r3, [r7, #8]
 81020d2:	4618      	mov	r0, r3
 81020d4:	f020 fd49 	bl	8122b6a <_Znwj>
 81020d8:	4603      	mov	r3, r0
 81020da:	e007      	b.n	81020ec <_ZNSt16allocator_traitsISaIPNSt8__detail15_Hash_node_baseEEE8allocateERS3_j+0x5a>
	return __allocator_base<_Tp>::allocate(__n, 0);
 81020dc:	68bb      	ldr	r3, [r7, #8]
 81020de:	2200      	movs	r2, #0
 81020e0:	4619      	mov	r1, r3
 81020e2:	68f8      	ldr	r0, [r7, #12]
 81020e4:	f000 fbcb 	bl	810287e <_ZNSt15__new_allocatorIPNSt8__detail15_Hash_node_baseEE8allocateEjPKv>
 81020e8:	4603      	mov	r3, r0
 81020ea:	bf00      	nop
      { return __a.allocate(__n); }
 81020ec:	4618      	mov	r0, r3
 81020ee:	3710      	adds	r7, #16
 81020f0:	46bd      	mov	sp, r7
 81020f2:	bd80      	pop	{r7, pc}

081020f4 <_ZSt12__to_addressIPNSt8__detail15_Hash_node_baseEEPT_S4_>:
  template<typename _Ptr, typename _Tp>
    using __ptr_rebind = typename pointer_traits<_Ptr>::template rebind<_Tp>;

  template<typename _Tp>
    constexpr _Tp*
    __to_address(_Tp* __ptr) noexcept
 81020f4:	b480      	push	{r7}
 81020f6:	b083      	sub	sp, #12
 81020f8:	af00      	add	r7, sp, #0
 81020fa:	6078      	str	r0, [r7, #4]
    {
      static_assert(!std::is_function<_Tp>::value, "not a function pointer");
      return __ptr;
 81020fc:	687b      	ldr	r3, [r7, #4]
    }
 81020fe:	4618      	mov	r0, r3
 8102100:	370c      	adds	r7, #12
 8102102:	46bd      	mov	sp, r7
 8102104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102108:	4770      	bx	lr

0810210a <_ZNKSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE4sizeEv>:
      size() const noexcept
 810210a:	b480      	push	{r7}
 810210c:	b083      	sub	sp, #12
 810210e:	af00      	add	r7, sp, #0
 8102110:	6078      	str	r0, [r7, #4]
      { return _M_element_count; }
 8102112:	687b      	ldr	r3, [r7, #4]
 8102114:	68db      	ldr	r3, [r3, #12]
 8102116:	4618      	mov	r0, r3
 8102118:	370c      	adds	r7, #12
 810211a:	46bd      	mov	sp, r7
 810211c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102120:	4770      	bx	lr

08102122 <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE22__small_size_thresholdEv>:
      __small_size_threshold() noexcept
 8102122:	b580      	push	{r7, lr}
 8102124:	af00      	add	r7, sp, #0
	  __detail::_Hashtable_hash_traits<_Hash>::__small_size_threshold();
 8102126:	f000 fa04 	bl	8102532 <_ZNSt8__detail22_Hashtable_hash_traitsISt4hashIN7APIDoIP12EDoIPRequestEEE22__small_size_thresholdEv>
 810212a:	4603      	mov	r3, r0
      }
 810212c:	4618      	mov	r0, r3
 810212e:	bd80      	pop	{r7, pc}

08102130 <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE5beginEv>:
      begin() noexcept
 8102130:	b580      	push	{r7, lr}
 8102132:	b084      	sub	sp, #16
 8102134:	af00      	add	r7, sp, #0
 8102136:	6078      	str	r0, [r7, #4]
      { return iterator(_M_begin()); }
 8102138:	6878      	ldr	r0, [r7, #4]
 810213a:	f7ff fc6f 	bl	8101a1c <_ZNKSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE8_M_beginEv>
 810213e:	4602      	mov	r2, r0
 8102140:	f107 030c 	add.w	r3, r7, #12
 8102144:	4611      	mov	r1, r2
 8102146:	4618      	mov	r0, r3
 8102148:	f000 f8ad 	bl	81022a6 <_ZNSt8__detail14_Node_iteratorISt4pairIKN7APIDoIP12EDoIPRequestES1_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0ELb0EEC1EPNS_10_Hash_nodeISB_Lb0EEE>
 810214c:	68fb      	ldr	r3, [r7, #12]
 810214e:	4618      	mov	r0, r3
 8102150:	3710      	adds	r7, #16
 8102152:	46bd      	mov	sp, r7
 8102154:	bd80      	pop	{r7, pc}

08102156 <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE3endEv>:
      end() noexcept
 8102156:	b580      	push	{r7, lr}
 8102158:	b084      	sub	sp, #16
 810215a:	af00      	add	r7, sp, #0
 810215c:	6078      	str	r0, [r7, #4]
      { return iterator(nullptr); }
 810215e:	f107 030c 	add.w	r3, r7, #12
 8102162:	2100      	movs	r1, #0
 8102164:	4618      	mov	r0, r3
 8102166:	f000 f89e 	bl	81022a6 <_ZNSt8__detail14_Node_iteratorISt4pairIKN7APIDoIP12EDoIPRequestES1_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0ELb0EEC1EPNS_10_Hash_nodeISB_Lb0EEE>
 810216a:	68fb      	ldr	r3, [r7, #12]
 810216c:	4618      	mov	r0, r3
 810216e:	3710      	adds	r7, #16
 8102170:	46bd      	mov	sp, r7
 8102172:	bd80      	pop	{r7, pc}

08102174 <_ZNSt8__detaileqERKNS_19_Node_iterator_baseISt4pairIKN7APIDoIP12EDoIPRequestES1_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEESE_>:
      operator==(const _Node_iterator_base& __x, const _Node_iterator_base& __y)
 8102174:	b480      	push	{r7}
 8102176:	b083      	sub	sp, #12
 8102178:	af00      	add	r7, sp, #0
 810217a:	6078      	str	r0, [r7, #4]
 810217c:	6039      	str	r1, [r7, #0]
      { return __x._M_cur == __y._M_cur; }
 810217e:	687b      	ldr	r3, [r7, #4]
 8102180:	681a      	ldr	r2, [r3, #0]
 8102182:	683b      	ldr	r3, [r7, #0]
 8102184:	681b      	ldr	r3, [r3, #0]
 8102186:	429a      	cmp	r2, r3
 8102188:	bf0c      	ite	eq
 810218a:	2301      	moveq	r3, #1
 810218c:	2300      	movne	r3, #0
 810218e:	b2db      	uxtb	r3, r3
 8102190:	4618      	mov	r0, r3
 8102192:	370c      	adds	r7, #12
 8102194:	46bd      	mov	sp, r7
 8102196:	f85d 7b04 	ldr.w	r7, [sp], #4
 810219a:	4770      	bx	lr

0810219c <_ZNSt8__detail14_Node_iteratorISt4pairIKN7APIDoIP12EDoIPRequestES1_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0ELb0EEppEv>:
      operator++() noexcept
 810219c:	b580      	push	{r7, lr}
 810219e:	b082      	sub	sp, #8
 81021a0:	af00      	add	r7, sp, #0
 81021a2:	6078      	str	r0, [r7, #4]
	this->_M_incr();
 81021a4:	687b      	ldr	r3, [r7, #4]
 81021a6:	4618      	mov	r0, r3
 81021a8:	f000 f9cb 	bl	8102542 <_ZNSt8__detail19_Node_iterator_baseISt4pairIKN7APIDoIP12EDoIPRequestES1_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EE7_M_incrEv>
	return *this;
 81021ac:	687b      	ldr	r3, [r7, #4]
      }
 81021ae:	4618      	mov	r0, r3
 81021b0:	3708      	adds	r7, #8
 81021b2:	46bd      	mov	sp, r7
 81021b4:	bd80      	pop	{r7, pc}

081021b6 <_ZNKSt8__detail15_Hashtable_baseIN7APIDoIP12EDoIPRequestESt4pairIKS2_S3_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEENS_10_Select1stESt8equal_toIS2_ESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEE16_M_key_equals_trIS2_EEbRKT_RKNS_16_Hash_node_valueISB_Lb0EEE>:
	_M_key_equals_tr(const _Kt& __k,
 81021b6:	b590      	push	{r4, r7, lr}
 81021b8:	b087      	sub	sp, #28
 81021ba:	af00      	add	r7, sp, #0
 81021bc:	60f8      	str	r0, [r7, #12]
 81021be:	60b9      	str	r1, [r7, #8]
 81021c0:	607a      	str	r2, [r7, #4]
	  return _M_eq()(__k, _ExtractKey{}(__n._M_v()));
 81021c2:	68f8      	ldr	r0, [r7, #12]
 81021c4:	f000 f9cd 	bl	8102562 <_ZNKSt8__detail15_Hashtable_baseIN7APIDoIP12EDoIPRequestESt4pairIKS2_S3_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEENS_10_Select1stESt8equal_toIS2_ESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEE5_M_eqEv>
 81021c8:	4604      	mov	r4, r0
 81021ca:	687b      	ldr	r3, [r7, #4]
 81021cc:	4618      	mov	r0, r3
 81021ce:	f000 f9d4 	bl	810257a <_ZNKSt8__detail21_Hash_node_value_baseISt4pairIKN7APIDoIP12EDoIPRequestES1_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEEE4_M_vEv>
 81021d2:	4602      	mov	r2, r0
 81021d4:	f107 0314 	add.w	r3, r7, #20
 81021d8:	4611      	mov	r1, r2
 81021da:	4618      	mov	r0, r3
 81021dc:	f7ff fdcf 	bl	8101d7e <_ZNKSt8__detail10_Select1stclIRKSt4pairIKN7APIDoIP12EDoIPRequestES2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEEEEONS0_10__1st_typeIT_E4typeEOSG_>
 81021e0:	4603      	mov	r3, r0
 81021e2:	461a      	mov	r2, r3
 81021e4:	68b9      	ldr	r1, [r7, #8]
 81021e6:	4620      	mov	r0, r4
 81021e8:	f000 f9d3 	bl	8102592 <_ZNKSt8equal_toIN7APIDoIP12EDoIPRequestEEclERKS1_S4_>
 81021ec:	4603      	mov	r3, r0
	}
 81021ee:	4618      	mov	r0, r3
 81021f0:	371c      	adds	r7, #28
 81021f2:	46bd      	mov	sp, r7
 81021f4:	bd90      	pop	{r4, r7, pc}

081021f6 <_ZNSt4pairINSt8__detail14_Node_iteratorIS_IKN7APIDoIP12EDoIPRequestES_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0ELb0EEEbEC1IRSC_bEEOT_OT0_>:

      /// Constructor accepting two values of arbitrary types
      template<typename _U1, typename _U2>
	requires (_S_constructible<_U1, _U2>())
	constexpr explicit(!_S_convertible<_U1, _U2>())
	pair(_U1&& __x, _U2&& __y)
 81021f6:	b580      	push	{r7, lr}
 81021f8:	b084      	sub	sp, #16
 81021fa:	af00      	add	r7, sp, #0
 81021fc:	60f8      	str	r0, [r7, #12]
 81021fe:	60b9      	str	r1, [r7, #8]
 8102200:	607a      	str	r2, [r7, #4]
	noexcept(_S_nothrow_constructible<_U1, _U2>())
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y))
 8102202:	68b8      	ldr	r0, [r7, #8]
 8102204:	f000 f9dc 	bl	81025c0 <_ZSt7forwardIRNSt8__detail14_Node_iteratorISt4pairIKN7APIDoIP12EDoIPRequestES2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0ELb0EEEEOT_RNSt16remove_referenceISF_E4typeE>
 8102208:	4602      	mov	r2, r0
 810220a:	68fb      	ldr	r3, [r7, #12]
 810220c:	6812      	ldr	r2, [r2, #0]
 810220e:	601a      	str	r2, [r3, #0]
 8102210:	6878      	ldr	r0, [r7, #4]
 8102212:	f7ff fad1 	bl	81017b8 <_ZSt7forwardIbEOT_RNSt16remove_referenceIS0_E4typeE>
 8102216:	4603      	mov	r3, r0
 8102218:	781a      	ldrb	r2, [r3, #0]
 810221a:	68fb      	ldr	r3, [r7, #12]
 810221c:	711a      	strb	r2, [r3, #4]
	{ }
 810221e:	68fb      	ldr	r3, [r7, #12]
 8102220:	4618      	mov	r0, r3
 8102222:	3710      	adds	r7, #16
 8102224:	46bd      	mov	sp, r7
 8102226:	bd80      	pop	{r7, pc}

08102228 <_ZNKSt8__detail15_Hash_code_baseIN7APIDoIP12EDoIPRequestESt4pairIKS2_S3_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEENS_10_Select1stESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE15_M_hash_code_trIS2_EEjRKT_>:
	_M_hash_code_tr(const _Kt& __k) const
 8102228:	b580      	push	{r7, lr}
 810222a:	b082      	sub	sp, #8
 810222c:	af00      	add	r7, sp, #0
 810222e:	6078      	str	r0, [r7, #4]
 8102230:	6039      	str	r1, [r7, #0]
	  return _M_hash()(__k);
 8102232:	6878      	ldr	r0, [r7, #4]
 8102234:	f000 f9cf 	bl	81025d6 <_ZNKSt8__detail15_Hash_code_baseIN7APIDoIP12EDoIPRequestESt4pairIKS2_S3_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEENS_10_Select1stESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE7_M_hashEv>
 8102238:	4602      	mov	r2, r0
 810223a:	683b      	ldr	r3, [r7, #0]
 810223c:	f993 3000 	ldrsb.w	r3, [r3]
 8102240:	4619      	mov	r1, r3
 8102242:	4610      	mov	r0, r2
 8102244:	f000 f9d3 	bl	81025ee <_ZNKSt11__hash_enumIN7APIDoIP12EDoIPRequestELb1EEclES1_>
 8102248:	4603      	mov	r3, r0
	}
 810224a:	4618      	mov	r0, r3
 810224c:	3708      	adds	r7, #8
 810224e:	46bd      	mov	sp, r7
 8102250:	bd80      	pop	{r7, pc}

08102252 <_ZNKSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE15_M_bucket_indexEj>:
      _M_bucket_index(__hash_code __c) const
 8102252:	b580      	push	{r7, lr}
 8102254:	b082      	sub	sp, #8
 8102256:	af00      	add	r7, sp, #0
 8102258:	6078      	str	r0, [r7, #4]
 810225a:	6039      	str	r1, [r7, #0]
      { return __hash_code_base::_M_bucket_index(__c, _M_bucket_count); }
 810225c:	687b      	ldr	r3, [r7, #4]
 810225e:	685b      	ldr	r3, [r3, #4]
 8102260:	461a      	mov	r2, r3
 8102262:	6839      	ldr	r1, [r7, #0]
 8102264:	6878      	ldr	r0, [r7, #4]
 8102266:	f000 f9d5 	bl	8102614 <_ZNKSt8__detail15_Hash_code_baseIN7APIDoIP12EDoIPRequestESt4pairIKS2_S3_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEENS_10_Select1stESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE15_M_bucket_indexEjj>
 810226a:	4603      	mov	r3, r0
 810226c:	4618      	mov	r0, r3
 810226e:	3708      	adds	r7, #8
 8102270:	46bd      	mov	sp, r7
 8102272:	bd80      	pop	{r7, pc}

08102274 <_ZNKSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE15_M_find_node_trIS1_EEPNSC_10_Hash_nodeISA_Lb0EEEjRKT_j>:
	_M_find_node_tr(size_type __bkt, const _Kt& __key,
 8102274:	b580      	push	{r7, lr}
 8102276:	b086      	sub	sp, #24
 8102278:	af00      	add	r7, sp, #0
 810227a:	60f8      	str	r0, [r7, #12]
 810227c:	60b9      	str	r1, [r7, #8]
 810227e:	607a      	str	r2, [r7, #4]
 8102280:	603b      	str	r3, [r7, #0]
	  auto __before_n = _M_find_before_node_tr(__bkt, __key, __c);
 8102282:	683b      	ldr	r3, [r7, #0]
 8102284:	687a      	ldr	r2, [r7, #4]
 8102286:	68b9      	ldr	r1, [r7, #8]
 8102288:	68f8      	ldr	r0, [r7, #12]
 810228a:	f000 f9d5 	bl	8102638 <_ZNKSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE22_M_find_before_node_trIS1_EEPNSC_15_Hash_node_baseEjRKT_j>
 810228e:	6178      	str	r0, [r7, #20]
	  if (__before_n)
 8102290:	697b      	ldr	r3, [r7, #20]
 8102292:	2b00      	cmp	r3, #0
 8102294:	d002      	beq.n	810229c <_ZNKSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE15_M_find_node_trIS1_EEPNSC_10_Hash_nodeISA_Lb0EEEjRKT_j+0x28>
	    return static_cast<__node_ptr>(__before_n->_M_nxt);
 8102296:	697b      	ldr	r3, [r7, #20]
 8102298:	681b      	ldr	r3, [r3, #0]
 810229a:	e000      	b.n	810229e <_ZNKSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE15_M_find_node_trIS1_EEPNSC_10_Hash_nodeISA_Lb0EEEjRKT_j+0x2a>
	  return nullptr;
 810229c:	2300      	movs	r3, #0
	}
 810229e:	4618      	mov	r0, r3
 81022a0:	3718      	adds	r7, #24
 81022a2:	46bd      	mov	sp, r7
 81022a4:	bd80      	pop	{r7, pc}

081022a6 <_ZNSt8__detail14_Node_iteratorISt4pairIKN7APIDoIP12EDoIPRequestES1_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0ELb0EEC1EPNS_10_Hash_nodeISB_Lb0EEE>:
      _Node_iterator(__node_type* __p) noexcept
 81022a6:	b580      	push	{r7, lr}
 81022a8:	b082      	sub	sp, #8
 81022aa:	af00      	add	r7, sp, #0
 81022ac:	6078      	str	r0, [r7, #4]
 81022ae:	6039      	str	r1, [r7, #0]
      : __base_type(__p) { }
 81022b0:	687b      	ldr	r3, [r7, #4]
 81022b2:	6839      	ldr	r1, [r7, #0]
 81022b4:	4618      	mov	r0, r3
 81022b6:	f000 fa04 	bl	81026c2 <_ZNSt8__detail19_Node_iterator_baseISt4pairIKN7APIDoIP12EDoIPRequestES1_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEC1EPNS_10_Hash_nodeISB_Lb0EEE>
 81022ba:	687b      	ldr	r3, [r7, #4]
 81022bc:	4618      	mov	r0, r3
 81022be:	3708      	adds	r7, #8
 81022c0:	46bd      	mov	sp, r7
 81022c2:	bd80      	pop	{r7, pc}

081022c4 <_ZNSt4pairINSt8__detail14_Node_iteratorIS_IKN7APIDoIP12EDoIPRequestES_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0ELb0EEEbEC1ISC_bEEOT_OT0_>:
	pair(_U1&& __x, _U2&& __y)
 81022c4:	b580      	push	{r7, lr}
 81022c6:	b084      	sub	sp, #16
 81022c8:	af00      	add	r7, sp, #0
 81022ca:	60f8      	str	r0, [r7, #12]
 81022cc:	60b9      	str	r1, [r7, #8]
 81022ce:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y))
 81022d0:	68b8      	ldr	r0, [r7, #8]
 81022d2:	f000 fa05 	bl	81026e0 <_ZSt7forwardINSt8__detail14_Node_iteratorISt4pairIKN7APIDoIP12EDoIPRequestES2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0ELb0EEEEOT_RNSt16remove_referenceISE_E4typeE>
 81022d6:	4602      	mov	r2, r0
 81022d8:	68fb      	ldr	r3, [r7, #12]
 81022da:	6812      	ldr	r2, [r2, #0]
 81022dc:	601a      	str	r2, [r3, #0]
 81022de:	6878      	ldr	r0, [r7, #4]
 81022e0:	f7ff fa6a 	bl	81017b8 <_ZSt7forwardIbEOT_RNSt16remove_referenceIS0_E4typeE>
 81022e4:	4603      	mov	r3, r0
 81022e6:	781a      	ldrb	r2, [r3, #0]
 81022e8:	68fb      	ldr	r3, [r7, #12]
 81022ea:	711a      	strb	r2, [r3, #4]
	{ }
 81022ec:	68fb      	ldr	r3, [r7, #12]
 81022ee:	4618      	mov	r0, r3
 81022f0:	3710      	adds	r7, #16
 81022f2:	46bd      	mov	sp, r7
 81022f4:	bd80      	pop	{r7, pc}

081022f6 <_ZSt7forwardIRKN7APIDoIP12EDoIPRequestEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 81022f6:	b480      	push	{r7}
 81022f8:	b083      	sub	sp, #12
 81022fa:	af00      	add	r7, sp, #0
 81022fc:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 81022fe:	687b      	ldr	r3, [r7, #4]
 8102300:	4618      	mov	r0, r3
 8102302:	370c      	adds	r7, #12
 8102304:	46bd      	mov	sp, r7
 8102306:	f85d 7b04 	ldr.w	r7, [sp], #4
 810230a:	4770      	bx	lr

0810230c <_ZNSt8__detail12_NodeBuilderINS_10_Select1stEE8_S_buildIRKN7APIDoIP12EDoIPRequestERKSt4pairIS6_S8_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEENS_10_AllocNodeISaINS_10_Hash_nodeISF_Lb0EEEEEEEEPNT1_11__node_typeEOT_OT0_RKSN_>:
	_S_build(_Kt&& __k, _Arg&& __arg, const _NodeGenerator& __node_gen)
 810230c:	b590      	push	{r4, r7, lr}
 810230e:	b085      	sub	sp, #20
 8102310:	af00      	add	r7, sp, #0
 8102312:	60f8      	str	r0, [r7, #12]
 8102314:	60b9      	str	r1, [r7, #8]
 8102316:	607a      	str	r2, [r7, #4]
	  return __node_gen(std::forward<_Kt>(__k),
 8102318:	68f8      	ldr	r0, [r7, #12]
 810231a:	f7ff ffec 	bl	81022f6 <_ZSt7forwardIRKN7APIDoIP12EDoIPRequestEEOT_RNSt16remove_referenceIS4_E4typeE>
 810231e:	4604      	mov	r4, r0
			    std::forward<_Arg>(__arg).second);
 8102320:	68b8      	ldr	r0, [r7, #8]
 8102322:	f7ff fd21 	bl	8101d68 <_ZSt7forwardIRKSt4pairIKN7APIDoIP12EDoIPRequestES0_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEEEOT_RNSt16remove_referenceISD_E4typeE>
 8102326:	4603      	mov	r3, r0
 8102328:	3304      	adds	r3, #4
	  return __node_gen(std::forward<_Kt>(__k),
 810232a:	461a      	mov	r2, r3
 810232c:	4621      	mov	r1, r4
 810232e:	6878      	ldr	r0, [r7, #4]
 8102330:	f000 f9e1 	bl	81026f6 <_ZNKSt8__detail10_AllocNodeISaINS_10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEEEEclIJRS5_RKSB_EEEPSD_DpOT_>
 8102334:	4603      	mov	r3, r0
	}
 8102336:	4618      	mov	r0, r3
 8102338:	3714      	adds	r7, #20
 810233a:	46bd      	mov	sp, r7
 810233c:	bd90      	pop	{r4, r7, pc}

0810233e <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE12_Scoped_nodeC1EPNSC_10_Hash_nodeISA_Lb0EEEPNSC_16_Hashtable_allocISaISQ_EEE>:
	_Scoped_node(__node_ptr __n, __hashtable_alloc* __h)
 810233e:	b480      	push	{r7}
 8102340:	b085      	sub	sp, #20
 8102342:	af00      	add	r7, sp, #0
 8102344:	60f8      	str	r0, [r7, #12]
 8102346:	60b9      	str	r1, [r7, #8]
 8102348:	607a      	str	r2, [r7, #4]
	: _M_h(__h), _M_node(__n) { }
 810234a:	68fb      	ldr	r3, [r7, #12]
 810234c:	687a      	ldr	r2, [r7, #4]
 810234e:	601a      	str	r2, [r3, #0]
 8102350:	68fb      	ldr	r3, [r7, #12]
 8102352:	68ba      	ldr	r2, [r7, #8]
 8102354:	605a      	str	r2, [r3, #4]
 8102356:	68fb      	ldr	r3, [r7, #12]
 8102358:	4618      	mov	r0, r3
 810235a:	3714      	adds	r7, #20
 810235c:	46bd      	mov	sp, r7
 810235e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102362:	4770      	bx	lr

08102364 <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE12_Scoped_nodeD1Ev>:
	~_Scoped_node() { if (_M_node) _M_h->_M_deallocate_node(_M_node); };
 8102364:	b580      	push	{r7, lr}
 8102366:	b082      	sub	sp, #8
 8102368:	af00      	add	r7, sp, #0
 810236a:	6078      	str	r0, [r7, #4]
 810236c:	687b      	ldr	r3, [r7, #4]
 810236e:	685b      	ldr	r3, [r3, #4]
 8102370:	2b00      	cmp	r3, #0
 8102372:	d007      	beq.n	8102384 <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE12_Scoped_nodeD1Ev+0x20>
 8102374:	687b      	ldr	r3, [r7, #4]
 8102376:	681a      	ldr	r2, [r3, #0]
 8102378:	687b      	ldr	r3, [r7, #4]
 810237a:	685b      	ldr	r3, [r3, #4]
 810237c:	4619      	mov	r1, r3
 810237e:	4610      	mov	r0, r2
 8102380:	f7ff fc31 	bl	8101be6 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEEEE18_M_deallocate_nodeEPSD_>
 8102384:	687b      	ldr	r3, [r7, #4]
 8102386:	4618      	mov	r0, r3
 8102388:	3708      	adds	r7, #8
 810238a:	46bd      	mov	sp, r7
 810238c:	bd80      	pop	{r7, pc}

0810238e <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_insert_unique_nodeEjjPNSC_10_Hash_nodeISA_Lb0EEEj>:
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
 810238e:	b590      	push	{r4, r7, lr}
 8102390:	b08d      	sub	sp, #52	@ 0x34
 8102392:	af02      	add	r7, sp, #8
 8102394:	60f8      	str	r0, [r7, #12]
 8102396:	60b9      	str	r1, [r7, #8]
 8102398:	607a      	str	r2, [r7, #4]
 810239a:	603b      	str	r3, [r7, #0]
      const __rehash_state& __saved_state = _M_rehash_policy._M_state();
 810239c:	68fb      	ldr	r3, [r7, #12]
 810239e:	3310      	adds	r3, #16
 81023a0:	4618      	mov	r0, r3
 81023a2:	f7fe ffc0 	bl	8101326 <_ZNKSt8__detail20_Prime_rehash_policy8_M_stateEv>
 81023a6:	4603      	mov	r3, r0
 81023a8:	61fb      	str	r3, [r7, #28]
 81023aa:	f107 031c 	add.w	r3, r7, #28
 81023ae:	627b      	str	r3, [r7, #36]	@ 0x24
	= _M_rehash_policy._M_need_rehash(_M_bucket_count, _M_element_count,
 81023b0:	68fb      	ldr	r3, [r7, #12]
 81023b2:	f103 0110 	add.w	r1, r3, #16
 81023b6:	68fb      	ldr	r3, [r7, #12]
 81023b8:	685a      	ldr	r2, [r3, #4]
 81023ba:	68fb      	ldr	r3, [r7, #12]
 81023bc:	68dc      	ldr	r4, [r3, #12]
 81023be:	f107 0014 	add.w	r0, r7, #20
 81023c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81023c4:	9300      	str	r3, [sp, #0]
 81023c6:	4623      	mov	r3, r4
 81023c8:	f020 fcee 	bl	8122da8 <_ZNKSt8__detail20_Prime_rehash_policy14_M_need_rehashEjjj>
      if (__do_rehash.first)
 81023cc:	7d3b      	ldrb	r3, [r7, #20]
 81023ce:	2b00      	cmp	r3, #0
 81023d0:	d00a      	beq.n	81023e8 <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_insert_unique_nodeEjjPNSC_10_Hash_nodeISA_Lb0EEEj+0x5a>
	  _M_rehash(__do_rehash.second, __saved_state);
 81023d2:	69bb      	ldr	r3, [r7, #24]
 81023d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 81023d6:	4619      	mov	r1, r3
 81023d8:	68f8      	ldr	r0, [r7, #12]
 81023da:	f000 f9a6 	bl	810272a <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE9_M_rehashEjRKj>
	  __bkt = _M_bucket_index(__code);
 81023de:	6879      	ldr	r1, [r7, #4]
 81023e0:	68f8      	ldr	r0, [r7, #12]
 81023e2:	f7ff ff36 	bl	8102252 <_ZNKSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE15_M_bucket_indexEj>
 81023e6:	60b8      	str	r0, [r7, #8]
      this->_M_store_code(*__node, __code);
 81023e8:	683b      	ldr	r3, [r7, #0]
 81023ea:	3304      	adds	r3, #4
 81023ec:	687a      	ldr	r2, [r7, #4]
 81023ee:	4619      	mov	r1, r3
 81023f0:	68f8      	ldr	r0, [r7, #12]
 81023f2:	f000 f9a9 	bl	8102748 <_ZNKSt8__detail15_Hash_code_baseIN7APIDoIP12EDoIPRequestESt4pairIKS2_S3_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEENS_10_Select1stESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE13_M_store_codeERNS_21_Hash_node_code_cacheILb0EEEj>
      _M_insert_bucket_begin(__bkt, __node);
 81023f6:	683a      	ldr	r2, [r7, #0]
 81023f8:	68b9      	ldr	r1, [r7, #8]
 81023fa:	68f8      	ldr	r0, [r7, #12]
 81023fc:	f000 f9b0 	bl	8102760 <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE22_M_insert_bucket_beginEjPNSC_10_Hash_nodeISA_Lb0EEE>
      ++_M_element_count;
 8102400:	68fb      	ldr	r3, [r7, #12]
 8102402:	68db      	ldr	r3, [r3, #12]
 8102404:	1c5a      	adds	r2, r3, #1
 8102406:	68fb      	ldr	r3, [r7, #12]
 8102408:	60da      	str	r2, [r3, #12]
      return iterator(__node);
 810240a:	f107 0320 	add.w	r3, r7, #32
 810240e:	6839      	ldr	r1, [r7, #0]
 8102410:	4618      	mov	r0, r3
 8102412:	f7ff ff48 	bl	81022a6 <_ZNSt8__detail14_Node_iteratorISt4pairIKN7APIDoIP12EDoIPRequestES1_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0ELb0EEC1EPNS_10_Hash_nodeISB_Lb0EEE>
 8102416:	6a3b      	ldr	r3, [r7, #32]
    }
 8102418:	4618      	mov	r0, r3
 810241a:	372c      	adds	r7, #44	@ 0x2c
 810241c:	46bd      	mov	sp, r7
 810241e:	bd90      	pop	{r4, r7, pc}

08102420 <_ZNSt8__detail21_Hashtable_ebo_helperILi0ESaINS_10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEEELb1EE6_M_getEv>:
      _Tp& _M_get() { return static_cast<_Tp&>(*this); }
 8102420:	b480      	push	{r7}
 8102422:	b083      	sub	sp, #12
 8102424:	af00      	add	r7, sp, #0
 8102426:	6078      	str	r0, [r7, #4]
 8102428:	687b      	ldr	r3, [r7, #4]
 810242a:	4618      	mov	r0, r3
 810242c:	370c      	adds	r7, #12
 810242e:	46bd      	mov	sp, r7
 8102430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102434:	4770      	bx	lr

08102436 <_ZN9__gnu_cxx16__aligned_bufferISt4pairIKN7APIDoIP12EDoIPRequestES1_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEEE6_M_ptrEv>:
      {
        return static_cast<const void*>(&_M_storage);
      }

      _Tp*
      _M_ptr() noexcept
 8102436:	b580      	push	{r7, lr}
 8102438:	b082      	sub	sp, #8
 810243a:	af00      	add	r7, sp, #0
 810243c:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 810243e:	6878      	ldr	r0, [r7, #4]
 8102440:	f000 f9d5 	bl	81027ee <_ZN9__gnu_cxx16__aligned_bufferISt4pairIKN7APIDoIP12EDoIPRequestES1_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEEE7_M_addrEv>
 8102444:	4603      	mov	r3, r0
 8102446:	4618      	mov	r0, r3
 8102448:	3708      	adds	r7, #8
 810244a:	46bd      	mov	sp, r7
 810244c:	bd80      	pop	{r7, pc}

0810244e <_ZSt10destroy_atISt4pairIKN7APIDoIP12EDoIPRequestES0_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEEEvPT_>:
_GLIBCXX_BEGIN_NAMESPACE_VERSION

#if __cplusplus >= 201703L
  template <typename _Tp>
    _GLIBCXX20_CONSTEXPR inline void
    destroy_at(_Tp* __location)
 810244e:	b480      	push	{r7}
 8102450:	b083      	sub	sp, #12
 8102452:	af00      	add	r7, sp, #0
 8102454:	6078      	str	r0, [r7, #4]
	  for (auto& __x : *__location)
	    std::destroy_at(std::__addressof(__x));
	}
      else
	__location->~_Tp();
    }
 8102456:	bf00      	nop
 8102458:	370c      	adds	r7, #12
 810245a:	46bd      	mov	sp, r7
 810245c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102460:	4770      	bx	lr

08102462 <_ZNSt19__ptr_traits_ptr_toIPNSt8__detail10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEESD_Lb0EE10pointer_toERSD_>:
      pointer_to(element_type& __r) noexcept
 8102462:	b580      	push	{r7, lr}
 8102464:	b082      	sub	sp, #8
 8102466:	af00      	add	r7, sp, #0
 8102468:	6078      	str	r0, [r7, #4]
      { return std::addressof(__r); }
 810246a:	6878      	ldr	r0, [r7, #4]
 810246c:	f000 f9ca 	bl	8102804 <_ZSt9addressofINSt8__detail10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEEEPT_RSE_>
 8102470:	4603      	mov	r3, r0
 8102472:	4618      	mov	r0, r3
 8102474:	3708      	adds	r7, #8
 8102476:	46bd      	mov	sp, r7
 8102478:	bd80      	pop	{r7, pc}

0810247a <_ZNSt16allocator_traitsISaINSt8__detail10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEEEE10deallocateERSE_PSD_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 810247a:	b580      	push	{r7, lr}
 810247c:	b088      	sub	sp, #32
 810247e:	af00      	add	r7, sp, #0
 8102480:	60f8      	str	r0, [r7, #12]
 8102482:	60b9      	str	r1, [r7, #8]
 8102484:	607a      	str	r2, [r7, #4]
 8102486:	68fb      	ldr	r3, [r7, #12]
 8102488:	61fb      	str	r3, [r7, #28]
 810248a:	68bb      	ldr	r3, [r7, #8]
 810248c:	61bb      	str	r3, [r7, #24]
 810248e:	687b      	ldr	r3, [r7, #4]
 8102490:	617b      	str	r3, [r7, #20]
	if (std::__is_constant_evaluated())
 8102492:	f7fe fef1 	bl	8101278 <__is_constant_evaluated>
 8102496:	4603      	mov	r3, r0
 8102498:	2b00      	cmp	r3, #0
 810249a:	d003      	beq.n	81024a4 <_ZNSt16allocator_traitsISaINSt8__detail10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEEEE10deallocateERSE_PSD_j+0x2a>
	    ::operator delete(__p);
 810249c:	69b8      	ldr	r0, [r7, #24]
 810249e:	f020 fb51 	bl	8122b44 <_ZdlPv>
	    return;
 81024a2:	e005      	b.n	81024b0 <_ZNSt16allocator_traitsISaINSt8__detail10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEEEE10deallocateERSE_PSD_j+0x36>
	__allocator_base<_Tp>::deallocate(__p, __n);
 81024a4:	697a      	ldr	r2, [r7, #20]
 81024a6:	69b9      	ldr	r1, [r7, #24]
 81024a8:	69f8      	ldr	r0, [r7, #28]
 81024aa:	f000 fb22 	bl	8102af2 <_ZNSt15__new_allocatorINSt8__detail10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEEE10deallocateEPSD_j>
      { __a.deallocate(__p, __n); }
 81024ae:	bf00      	nop
 81024b0:	bf00      	nop
 81024b2:	3720      	adds	r7, #32
 81024b4:	46bd      	mov	sp, r7
 81024b6:	bd80      	pop	{r7, pc}

081024b8 <_ZSt9addressofIPNSt8__detail15_Hash_node_baseEEPT_RS3_>:
   *  @return   The actual address.
  */
  template<typename _Tp>
    _GLIBCXX_NODISCARD
    inline _GLIBCXX17_CONSTEXPR _Tp*
    addressof(_Tp& __r) noexcept
 81024b8:	b580      	push	{r7, lr}
 81024ba:	b082      	sub	sp, #8
 81024bc:	af00      	add	r7, sp, #0
 81024be:	6078      	str	r0, [r7, #4]
    { return std::__addressof(__r); }
 81024c0:	6878      	ldr	r0, [r7, #4]
 81024c2:	f000 f9ab 	bl	810281c <_ZSt11__addressofIPNSt8__detail15_Hash_node_baseEEPT_RS3_>
 81024c6:	4603      	mov	r3, r0
 81024c8:	4618      	mov	r0, r3
 81024ca:	3708      	adds	r7, #8
 81024cc:	46bd      	mov	sp, r7
 81024ce:	bd80      	pop	{r7, pc}

081024d0 <_ZNSt15__new_allocatorIPNSt8__detail15_Hash_node_baseEEC1Ev>:
 81024d0:	b480      	push	{r7}
 81024d2:	b083      	sub	sp, #12
 81024d4:	af00      	add	r7, sp, #0
 81024d6:	6078      	str	r0, [r7, #4]
 81024d8:	687b      	ldr	r3, [r7, #4]
 81024da:	4618      	mov	r0, r3
 81024dc:	370c      	adds	r7, #12
 81024de:	46bd      	mov	sp, r7
 81024e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81024e4:	4770      	bx	lr

081024e6 <_ZNSt8__detail21_Hashtable_ebo_helperILi1ESt4hashIN7APIDoIP12EDoIPRequestEELb1EEC1IRKS4_EEOT_>:
	_Hashtable_ebo_helper(_OtherTp&& __tp)
 81024e6:	b580      	push	{r7, lr}
 81024e8:	b082      	sub	sp, #8
 81024ea:	af00      	add	r7, sp, #0
 81024ec:	6078      	str	r0, [r7, #4]
 81024ee:	6039      	str	r1, [r7, #0]
	: _Tp(std::forward<_OtherTp>(__tp))
 81024f0:	6838      	ldr	r0, [r7, #0]
 81024f2:	f000 f9ad 	bl	8102850 <_ZSt7forwardIRKSt4hashIN7APIDoIP12EDoIPRequestEEEOT_RNSt16remove_referenceIS6_E4typeE>
	{ }
 81024f6:	687b      	ldr	r3, [r7, #4]
 81024f8:	4618      	mov	r0, r3
 81024fa:	3708      	adds	r7, #8
 81024fc:	46bd      	mov	sp, r7
 81024fe:	bd80      	pop	{r7, pc}

08102500 <_ZSt7forwardIRKSt8equal_toIN7APIDoIP12EDoIPRequestEEEOT_RNSt16remove_referenceIS6_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8102500:	b480      	push	{r7}
 8102502:	b083      	sub	sp, #12
 8102504:	af00      	add	r7, sp, #0
 8102506:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8102508:	687b      	ldr	r3, [r7, #4]
 810250a:	4618      	mov	r0, r3
 810250c:	370c      	adds	r7, #12
 810250e:	46bd      	mov	sp, r7
 8102510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102514:	4770      	bx	lr

08102516 <_ZNSaINSt8__detail10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES1_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEEEC1ERKSD_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 8102516:	b580      	push	{r7, lr}
 8102518:	b082      	sub	sp, #8
 810251a:	af00      	add	r7, sp, #0
 810251c:	6078      	str	r0, [r7, #4]
 810251e:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 8102520:	6839      	ldr	r1, [r7, #0]
 8102522:	6878      	ldr	r0, [r7, #4]
 8102524:	f000 f99f 	bl	8102866 <_ZNSt15__new_allocatorINSt8__detail10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEEEC1ERKSE_>
 8102528:	687b      	ldr	r3, [r7, #4]
 810252a:	4618      	mov	r0, r3
 810252c:	3708      	adds	r7, #8
 810252e:	46bd      	mov	sp, r7
 8102530:	bd80      	pop	{r7, pc}

08102532 <_ZNSt8__detail22_Hashtable_hash_traitsISt4hashIN7APIDoIP12EDoIPRequestEEE22__small_size_thresholdEv>:
      __small_size_threshold() noexcept
 8102532:	b480      	push	{r7}
 8102534:	af00      	add	r7, sp, #0
      { return std::__is_fast_hash<_Hash>::value ? 0 : 20; }
 8102536:	2300      	movs	r3, #0
 8102538:	4618      	mov	r0, r3
 810253a:	46bd      	mov	sp, r7
 810253c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102540:	4770      	bx	lr

08102542 <_ZNSt8__detail19_Node_iterator_baseISt4pairIKN7APIDoIP12EDoIPRequestES1_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EE7_M_incrEv>:
      _M_incr() noexcept
 8102542:	b580      	push	{r7, lr}
 8102544:	b082      	sub	sp, #8
 8102546:	af00      	add	r7, sp, #0
 8102548:	6078      	str	r0, [r7, #4]
      { _M_cur = _M_cur->_M_next(); }
 810254a:	687b      	ldr	r3, [r7, #4]
 810254c:	681b      	ldr	r3, [r3, #0]
 810254e:	4618      	mov	r0, r3
 8102550:	f7ff fb3d 	bl	8101bce <_ZNKSt8__detail10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES1_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EE7_M_nextEv>
 8102554:	4602      	mov	r2, r0
 8102556:	687b      	ldr	r3, [r7, #4]
 8102558:	601a      	str	r2, [r3, #0]
 810255a:	bf00      	nop
 810255c:	3708      	adds	r7, #8
 810255e:	46bd      	mov	sp, r7
 8102560:	bd80      	pop	{r7, pc}

08102562 <_ZNKSt8__detail15_Hashtable_baseIN7APIDoIP12EDoIPRequestESt4pairIKS2_S3_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEENS_10_Select1stESt8equal_toIS2_ESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEE5_M_eqEv>:
      _M_eq() const { return _EqualEBO::_M_cget(); }
 8102562:	b580      	push	{r7, lr}
 8102564:	b082      	sub	sp, #8
 8102566:	af00      	add	r7, sp, #0
 8102568:	6078      	str	r0, [r7, #4]
 810256a:	6878      	ldr	r0, [r7, #4]
 810256c:	f000 f9b1 	bl	81028d2 <_ZNKSt8__detail21_Hashtable_ebo_helperILi0ESt8equal_toIN7APIDoIP12EDoIPRequestEELb1EE7_M_cgetEv>
 8102570:	4603      	mov	r3, r0
 8102572:	4618      	mov	r0, r3
 8102574:	3708      	adds	r7, #8
 8102576:	46bd      	mov	sp, r7
 8102578:	bd80      	pop	{r7, pc}

0810257a <_ZNKSt8__detail21_Hash_node_value_baseISt4pairIKN7APIDoIP12EDoIPRequestES1_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEEE4_M_vEv>:
      _M_v() const noexcept
 810257a:	b580      	push	{r7, lr}
 810257c:	b082      	sub	sp, #8
 810257e:	af00      	add	r7, sp, #0
 8102580:	6078      	str	r0, [r7, #4]
      { return *_M_valptr(); }
 8102582:	6878      	ldr	r0, [r7, #4]
 8102584:	f000 f9b0 	bl	81028e8 <_ZNKSt8__detail21_Hash_node_value_baseISt4pairIKN7APIDoIP12EDoIPRequestES1_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEEE9_M_valptrEv>
 8102588:	4603      	mov	r3, r0
 810258a:	4618      	mov	r0, r3
 810258c:	3708      	adds	r7, #8
 810258e:	46bd      	mov	sp, r7
 8102590:	bd80      	pop	{r7, pc}

08102592 <_ZNKSt8equal_toIN7APIDoIP12EDoIPRequestEEclERKS1_S4_>:
  template<typename _Tp>
    struct equal_to : public binary_function<_Tp, _Tp, bool>
    {
      _GLIBCXX14_CONSTEXPR
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
 8102592:	b480      	push	{r7}
 8102594:	b085      	sub	sp, #20
 8102596:	af00      	add	r7, sp, #0
 8102598:	60f8      	str	r0, [r7, #12]
 810259a:	60b9      	str	r1, [r7, #8]
 810259c:	607a      	str	r2, [r7, #4]
      { return __x == __y; }
 810259e:	68bb      	ldr	r3, [r7, #8]
 81025a0:	f993 2000 	ldrsb.w	r2, [r3]
 81025a4:	687b      	ldr	r3, [r7, #4]
 81025a6:	f993 3000 	ldrsb.w	r3, [r3]
 81025aa:	429a      	cmp	r2, r3
 81025ac:	bf0c      	ite	eq
 81025ae:	2301      	moveq	r3, #1
 81025b0:	2300      	movne	r3, #0
 81025b2:	b2db      	uxtb	r3, r3
 81025b4:	4618      	mov	r0, r3
 81025b6:	3714      	adds	r7, #20
 81025b8:	46bd      	mov	sp, r7
 81025ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 81025be:	4770      	bx	lr

081025c0 <_ZSt7forwardIRNSt8__detail14_Node_iteratorISt4pairIKN7APIDoIP12EDoIPRequestES2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0ELb0EEEEOT_RNSt16remove_referenceISF_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 81025c0:	b480      	push	{r7}
 81025c2:	b083      	sub	sp, #12
 81025c4:	af00      	add	r7, sp, #0
 81025c6:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 81025c8:	687b      	ldr	r3, [r7, #4]
 81025ca:	4618      	mov	r0, r3
 81025cc:	370c      	adds	r7, #12
 81025ce:	46bd      	mov	sp, r7
 81025d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81025d4:	4770      	bx	lr

081025d6 <_ZNKSt8__detail15_Hash_code_baseIN7APIDoIP12EDoIPRequestESt4pairIKS2_S3_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEENS_10_Select1stESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE7_M_hashEv>:
      _M_hash() const { return __ebo_hash::_M_cget(); }
 81025d6:	b580      	push	{r7, lr}
 81025d8:	b082      	sub	sp, #8
 81025da:	af00      	add	r7, sp, #0
 81025dc:	6078      	str	r0, [r7, #4]
 81025de:	6878      	ldr	r0, [r7, #4]
 81025e0:	f000 f98f 	bl	8102902 <_ZNKSt8__detail21_Hashtable_ebo_helperILi1ESt4hashIN7APIDoIP12EDoIPRequestEELb1EE7_M_cgetEv>
 81025e4:	4603      	mov	r3, r0
 81025e6:	4618      	mov	r0, r3
 81025e8:	3708      	adds	r7, #8
 81025ea:	46bd      	mov	sp, r7
 81025ec:	bd80      	pop	{r7, pc}

081025ee <_ZNKSt11__hash_enumIN7APIDoIP12EDoIPRequestELb1EEclES1_>:
      operator()(_Tp __val) const noexcept
 81025ee:	b580      	push	{r7, lr}
 81025f0:	b084      	sub	sp, #16
 81025f2:	af00      	add	r7, sp, #0
 81025f4:	6078      	str	r0, [r7, #4]
 81025f6:	460b      	mov	r3, r1
 81025f8:	70fb      	strb	r3, [r7, #3]
       return hash<__type>{}(static_cast<__type>(__val));
 81025fa:	f997 2003 	ldrsb.w	r2, [r7, #3]
 81025fe:	f107 030c 	add.w	r3, r7, #12
 8102602:	4611      	mov	r1, r2
 8102604:	4618      	mov	r0, r3
 8102606:	f7fe fe4b 	bl	81012a0 <_ZNKSt4hashIaEclEa>
 810260a:	4603      	mov	r3, r0
      }
 810260c:	4618      	mov	r0, r3
 810260e:	3710      	adds	r7, #16
 8102610:	46bd      	mov	sp, r7
 8102612:	bd80      	pop	{r7, pc}

08102614 <_ZNKSt8__detail15_Hash_code_baseIN7APIDoIP12EDoIPRequestESt4pairIKS2_S3_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEENS_10_Select1stESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE15_M_bucket_indexEjj>:
      _M_bucket_index(__hash_code __c, std::size_t __bkt_count) const
 8102614:	b580      	push	{r7, lr}
 8102616:	b086      	sub	sp, #24
 8102618:	af00      	add	r7, sp, #0
 810261a:	60f8      	str	r0, [r7, #12]
 810261c:	60b9      	str	r1, [r7, #8]
 810261e:	607a      	str	r2, [r7, #4]
      { return _RangeHash{}(__c, __bkt_count); }
 8102620:	f107 0314 	add.w	r3, r7, #20
 8102624:	687a      	ldr	r2, [r7, #4]
 8102626:	68b9      	ldr	r1, [r7, #8]
 8102628:	4618      	mov	r0, r3
 810262a:	f7fe fe55 	bl	81012d8 <_ZNKSt8__detail18_Mod_range_hashingclEjj>
 810262e:	4603      	mov	r3, r0
 8102630:	4618      	mov	r0, r3
 8102632:	3718      	adds	r7, #24
 8102634:	46bd      	mov	sp, r7
 8102636:	bd80      	pop	{r7, pc}

08102638 <_ZNKSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE22_M_find_before_node_trIS1_EEPNSC_15_Hash_node_baseEjRKT_j>:
      _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
 8102638:	b580      	push	{r7, lr}
 810263a:	b086      	sub	sp, #24
 810263c:	af00      	add	r7, sp, #0
 810263e:	60f8      	str	r0, [r7, #12]
 8102640:	60b9      	str	r1, [r7, #8]
 8102642:	607a      	str	r2, [r7, #4]
 8102644:	603b      	str	r3, [r7, #0]
	__node_base_ptr __prev_p = _M_buckets[__bkt];
 8102646:	68fb      	ldr	r3, [r7, #12]
 8102648:	681a      	ldr	r2, [r3, #0]
 810264a:	68bb      	ldr	r3, [r7, #8]
 810264c:	009b      	lsls	r3, r3, #2
 810264e:	4413      	add	r3, r2
 8102650:	681b      	ldr	r3, [r3, #0]
 8102652:	617b      	str	r3, [r7, #20]
	if (!__prev_p)
 8102654:	697b      	ldr	r3, [r7, #20]
 8102656:	2b00      	cmp	r3, #0
 8102658:	d101      	bne.n	810265e <_ZNKSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE22_M_find_before_node_trIS1_EEPNSC_15_Hash_node_baseEjRKT_j+0x26>
	  return nullptr;
 810265a:	2300      	movs	r3, #0
 810265c:	e02d      	b.n	81026ba <_ZNKSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE22_M_find_before_node_trIS1_EEPNSC_15_Hash_node_baseEjRKT_j+0x82>
	for (__node_ptr __p = static_cast<__node_ptr>(__prev_p->_M_nxt);;
 810265e:	697b      	ldr	r3, [r7, #20]
 8102660:	681b      	ldr	r3, [r3, #0]
 8102662:	613b      	str	r3, [r7, #16]
	    if (this->_M_equals_tr(__k, __code, *__p))
 8102664:	693b      	ldr	r3, [r7, #16]
 8102666:	3304      	adds	r3, #4
 8102668:	683a      	ldr	r2, [r7, #0]
 810266a:	6879      	ldr	r1, [r7, #4]
 810266c:	68f8      	ldr	r0, [r7, #12]
 810266e:	f000 f953 	bl	8102918 <_ZNKSt8__detail15_Hashtable_baseIN7APIDoIP12EDoIPRequestESt4pairIKS2_S3_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEENS_10_Select1stESt8equal_toIS2_ESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEE12_M_equals_trIS2_EEbRKT_jRKNS_16_Hash_node_valueISB_Lb0EEE>
 8102672:	4603      	mov	r3, r0
 8102674:	2b00      	cmp	r3, #0
 8102676:	d001      	beq.n	810267c <_ZNKSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE22_M_find_before_node_trIS1_EEPNSC_15_Hash_node_baseEjRKT_j+0x44>
	      return __prev_p;
 8102678:	697b      	ldr	r3, [r7, #20]
 810267a:	e01e      	b.n	81026ba <_ZNKSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE22_M_find_before_node_trIS1_EEPNSC_15_Hash_node_baseEjRKT_j+0x82>
	    if (!__p->_M_nxt || _M_bucket_index(*__p->_M_next()) != __bkt)
 810267c:	693b      	ldr	r3, [r7, #16]
 810267e:	681b      	ldr	r3, [r3, #0]
 8102680:	2b00      	cmp	r3, #0
 8102682:	d00c      	beq.n	810269e <_ZNKSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE22_M_find_before_node_trIS1_EEPNSC_15_Hash_node_baseEjRKT_j+0x66>
 8102684:	6938      	ldr	r0, [r7, #16]
 8102686:	f7ff faa2 	bl	8101bce <_ZNKSt8__detail10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES1_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EE7_M_nextEv>
 810268a:	4603      	mov	r3, r0
 810268c:	3304      	adds	r3, #4
 810268e:	4619      	mov	r1, r3
 8102690:	68f8      	ldr	r0, [r7, #12]
 8102692:	f000 f95e 	bl	8102952 <_ZNKSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE15_M_bucket_indexERKNSC_16_Hash_node_valueISA_Lb0EEE>
 8102696:	4602      	mov	r2, r0
 8102698:	68bb      	ldr	r3, [r7, #8]
 810269a:	4293      	cmp	r3, r2
 810269c:	d001      	beq.n	81026a2 <_ZNKSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE22_M_find_before_node_trIS1_EEPNSC_15_Hash_node_baseEjRKT_j+0x6a>
 810269e:	2301      	movs	r3, #1
 81026a0:	e000      	b.n	81026a4 <_ZNKSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE22_M_find_before_node_trIS1_EEPNSC_15_Hash_node_baseEjRKT_j+0x6c>
 81026a2:	2300      	movs	r3, #0
 81026a4:	2b00      	cmp	r3, #0
 81026a6:	d106      	bne.n	81026b6 <_ZNKSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE22_M_find_before_node_trIS1_EEPNSC_15_Hash_node_baseEjRKT_j+0x7e>
	    __prev_p = __p;
 81026a8:	693b      	ldr	r3, [r7, #16]
 81026aa:	617b      	str	r3, [r7, #20]
	     __p = __p->_M_next())
 81026ac:	6938      	ldr	r0, [r7, #16]
 81026ae:	f7ff fa8e 	bl	8101bce <_ZNKSt8__detail10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES1_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EE7_M_nextEv>
 81026b2:	6138      	str	r0, [r7, #16]
	    if (this->_M_equals_tr(__k, __code, *__p))
 81026b4:	e7d6      	b.n	8102664 <_ZNKSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE22_M_find_before_node_trIS1_EEPNSC_15_Hash_node_baseEjRKT_j+0x2c>
	      break;
 81026b6:	bf00      	nop
	return nullptr;
 81026b8:	2300      	movs	r3, #0
      }
 81026ba:	4618      	mov	r0, r3
 81026bc:	3718      	adds	r7, #24
 81026be:	46bd      	mov	sp, r7
 81026c0:	bd80      	pop	{r7, pc}

081026c2 <_ZNSt8__detail19_Node_iterator_baseISt4pairIKN7APIDoIP12EDoIPRequestES1_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEC1EPNS_10_Hash_nodeISB_Lb0EEE>:
      _Node_iterator_base(__node_type* __p) noexcept
 81026c2:	b480      	push	{r7}
 81026c4:	b083      	sub	sp, #12
 81026c6:	af00      	add	r7, sp, #0
 81026c8:	6078      	str	r0, [r7, #4]
 81026ca:	6039      	str	r1, [r7, #0]
      : _M_cur(__p) { }
 81026cc:	687b      	ldr	r3, [r7, #4]
 81026ce:	683a      	ldr	r2, [r7, #0]
 81026d0:	601a      	str	r2, [r3, #0]
 81026d2:	687b      	ldr	r3, [r7, #4]
 81026d4:	4618      	mov	r0, r3
 81026d6:	370c      	adds	r7, #12
 81026d8:	46bd      	mov	sp, r7
 81026da:	f85d 7b04 	ldr.w	r7, [sp], #4
 81026de:	4770      	bx	lr

081026e0 <_ZSt7forwardINSt8__detail14_Node_iteratorISt4pairIKN7APIDoIP12EDoIPRequestES2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0ELb0EEEEOT_RNSt16remove_referenceISE_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 81026e0:	b480      	push	{r7}
 81026e2:	b083      	sub	sp, #12
 81026e4:	af00      	add	r7, sp, #0
 81026e6:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 81026e8:	687b      	ldr	r3, [r7, #4]
 81026ea:	4618      	mov	r0, r3
 81026ec:	370c      	adds	r7, #12
 81026ee:	46bd      	mov	sp, r7
 81026f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81026f4:	4770      	bx	lr

081026f6 <_ZNKSt8__detail10_AllocNodeISaINS_10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEEEEclIJRS5_RKSB_EEEPSD_DpOT_>:
	operator()(_Args&&... __args) const
 81026f6:	b5b0      	push	{r4, r5, r7, lr}
 81026f8:	b084      	sub	sp, #16
 81026fa:	af00      	add	r7, sp, #0
 81026fc:	60f8      	str	r0, [r7, #12]
 81026fe:	60b9      	str	r1, [r7, #8]
 8102700:	607a      	str	r2, [r7, #4]
	{ return _M_h._M_allocate_node(std::forward<_Args>(__args)...); }
 8102702:	68fb      	ldr	r3, [r7, #12]
 8102704:	681c      	ldr	r4, [r3, #0]
 8102706:	68b8      	ldr	r0, [r7, #8]
 8102708:	f7ff fdf5 	bl	81022f6 <_ZSt7forwardIRKN7APIDoIP12EDoIPRequestEEOT_RNSt16remove_referenceIS4_E4typeE>
 810270c:	4605      	mov	r5, r0
 810270e:	6878      	ldr	r0, [r7, #4]
 8102710:	f000 f930 	bl	8102974 <_ZSt7forwardIRKSt4pairISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEEOT_RNSt16remove_referenceIS9_E4typeE>
 8102714:	4603      	mov	r3, r0
 8102716:	461a      	mov	r2, r3
 8102718:	4629      	mov	r1, r5
 810271a:	4620      	mov	r0, r4
 810271c:	f000 f942 	bl	81029a4 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEEEE16_M_allocate_nodeIJRS5_RKSB_EEEPSD_DpOT_>
 8102720:	4603      	mov	r3, r0
 8102722:	4618      	mov	r0, r3
 8102724:	3710      	adds	r7, #16
 8102726:	46bd      	mov	sp, r7
 8102728:	bdb0      	pop	{r4, r5, r7, pc}

0810272a <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE9_M_rehashEjRKj>:
  template<typename _Key, typename _Value, typename _Alloc,
	   typename _ExtractKey, typename _Equal,
	   typename _Hash, typename _RangeHash, typename _Unused,
	   typename _RehashPolicy, typename _Traits>
    void
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
 810272a:	b580      	push	{r7, lr}
 810272c:	b084      	sub	sp, #16
 810272e:	af00      	add	r7, sp, #0
 8102730:	60f8      	str	r0, [r7, #12]
 8102732:	60b9      	str	r1, [r7, #8]
 8102734:	607a      	str	r2, [r7, #4]
	       _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits>::
    _M_rehash(size_type __bkt_count, const __rehash_state& __state)
    {
      __try
	{
	  _M_rehash_aux(__bkt_count, __unique_keys{});
 8102736:	461a      	mov	r2, r3
 8102738:	68b9      	ldr	r1, [r7, #8]
 810273a:	68f8      	ldr	r0, [r7, #12]
 810273c:	f000 f96a 	bl	8102a14 <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE13_M_rehash_auxEjSt17integral_constantIbLb1EE>
	  // A failure here means that buckets allocation failed.  We only
	  // have to restore hash policy previous state.
	  _M_rehash_policy._M_reset(__state);
	  __throw_exception_again;
	}
    }
 8102740:	bf00      	nop
 8102742:	3710      	adds	r7, #16
 8102744:	46bd      	mov	sp, r7
 8102746:	bd80      	pop	{r7, pc}

08102748 <_ZNKSt8__detail15_Hash_code_baseIN7APIDoIP12EDoIPRequestESt4pairIKS2_S3_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEENS_10_Select1stESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE13_M_store_codeERNS_21_Hash_node_code_cacheILb0EEEj>:
      _M_store_code(_Hash_node_code_cache<false>&, __hash_code) const
 8102748:	b480      	push	{r7}
 810274a:	b085      	sub	sp, #20
 810274c:	af00      	add	r7, sp, #0
 810274e:	60f8      	str	r0, [r7, #12]
 8102750:	60b9      	str	r1, [r7, #8]
 8102752:	607a      	str	r2, [r7, #4]
      { }
 8102754:	bf00      	nop
 8102756:	3714      	adds	r7, #20
 8102758:	46bd      	mov	sp, r7
 810275a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810275e:	4770      	bx	lr

08102760 <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE22_M_insert_bucket_beginEjPNSC_10_Hash_nodeISA_Lb0EEE>:
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
 8102760:	b5b0      	push	{r4, r5, r7, lr}
 8102762:	b084      	sub	sp, #16
 8102764:	af00      	add	r7, sp, #0
 8102766:	60f8      	str	r0, [r7, #12]
 8102768:	60b9      	str	r1, [r7, #8]
 810276a:	607a      	str	r2, [r7, #4]
      if (_M_buckets[__bkt])
 810276c:	68fb      	ldr	r3, [r7, #12]
 810276e:	681a      	ldr	r2, [r3, #0]
 8102770:	68bb      	ldr	r3, [r7, #8]
 8102772:	009b      	lsls	r3, r3, #2
 8102774:	4413      	add	r3, r2
 8102776:	681b      	ldr	r3, [r3, #0]
 8102778:	2b00      	cmp	r3, #0
 810277a:	d011      	beq.n	81027a0 <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE22_M_insert_bucket_beginEjPNSC_10_Hash_nodeISA_Lb0EEE+0x40>
	  __node->_M_nxt = _M_buckets[__bkt]->_M_nxt;
 810277c:	68fb      	ldr	r3, [r7, #12]
 810277e:	681a      	ldr	r2, [r3, #0]
 8102780:	68bb      	ldr	r3, [r7, #8]
 8102782:	009b      	lsls	r3, r3, #2
 8102784:	4413      	add	r3, r2
 8102786:	681b      	ldr	r3, [r3, #0]
 8102788:	681a      	ldr	r2, [r3, #0]
 810278a:	687b      	ldr	r3, [r7, #4]
 810278c:	601a      	str	r2, [r3, #0]
	  _M_buckets[__bkt]->_M_nxt = __node;
 810278e:	68fb      	ldr	r3, [r7, #12]
 8102790:	681a      	ldr	r2, [r3, #0]
 8102792:	68bb      	ldr	r3, [r7, #8]
 8102794:	009b      	lsls	r3, r3, #2
 8102796:	4413      	add	r3, r2
 8102798:	681b      	ldr	r3, [r3, #0]
 810279a:	687a      	ldr	r2, [r7, #4]
 810279c:	601a      	str	r2, [r3, #0]
    }
 810279e:	e022      	b.n	81027e6 <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE22_M_insert_bucket_beginEjPNSC_10_Hash_nodeISA_Lb0EEE+0x86>
	  __node->_M_nxt = _M_before_begin._M_nxt;
 81027a0:	68fb      	ldr	r3, [r7, #12]
 81027a2:	689a      	ldr	r2, [r3, #8]
 81027a4:	687b      	ldr	r3, [r7, #4]
 81027a6:	601a      	str	r2, [r3, #0]
	  _M_before_begin._M_nxt = __node;
 81027a8:	68fb      	ldr	r3, [r7, #12]
 81027aa:	687a      	ldr	r2, [r7, #4]
 81027ac:	609a      	str	r2, [r3, #8]
	  if (__node->_M_nxt)
 81027ae:	687b      	ldr	r3, [r7, #4]
 81027b0:	681b      	ldr	r3, [r3, #0]
 81027b2:	2b00      	cmp	r3, #0
 81027b4:	d00f      	beq.n	81027d6 <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE22_M_insert_bucket_beginEjPNSC_10_Hash_nodeISA_Lb0EEE+0x76>
	    _M_buckets[_M_bucket_index(*__node->_M_next())] = __node;
 81027b6:	687c      	ldr	r4, [r7, #4]
 81027b8:	68fb      	ldr	r3, [r7, #12]
 81027ba:	681d      	ldr	r5, [r3, #0]
 81027bc:	6878      	ldr	r0, [r7, #4]
 81027be:	f7ff fa06 	bl	8101bce <_ZNKSt8__detail10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES1_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EE7_M_nextEv>
 81027c2:	4603      	mov	r3, r0
 81027c4:	3304      	adds	r3, #4
 81027c6:	4619      	mov	r1, r3
 81027c8:	68f8      	ldr	r0, [r7, #12]
 81027ca:	f000 f8c2 	bl	8102952 <_ZNKSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE15_M_bucket_indexERKNSC_16_Hash_node_valueISA_Lb0EEE>
 81027ce:	4603      	mov	r3, r0
 81027d0:	009b      	lsls	r3, r3, #2
 81027d2:	442b      	add	r3, r5
 81027d4:	601c      	str	r4, [r3, #0]
	  _M_buckets[__bkt] = &_M_before_begin;
 81027d6:	68fb      	ldr	r3, [r7, #12]
 81027d8:	681a      	ldr	r2, [r3, #0]
 81027da:	68bb      	ldr	r3, [r7, #8]
 81027dc:	009b      	lsls	r3, r3, #2
 81027de:	4413      	add	r3, r2
 81027e0:	68fa      	ldr	r2, [r7, #12]
 81027e2:	3208      	adds	r2, #8
 81027e4:	601a      	str	r2, [r3, #0]
    }
 81027e6:	bf00      	nop
 81027e8:	3710      	adds	r7, #16
 81027ea:	46bd      	mov	sp, r7
 81027ec:	bdb0      	pop	{r4, r5, r7, pc}

081027ee <_ZN9__gnu_cxx16__aligned_bufferISt4pairIKN7APIDoIP12EDoIPRequestES1_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEEE7_M_addrEv>:
      _M_addr() noexcept
 81027ee:	b480      	push	{r7}
 81027f0:	b083      	sub	sp, #12
 81027f2:	af00      	add	r7, sp, #0
 81027f4:	6078      	str	r0, [r7, #4]
        return static_cast<void*>(&_M_storage);
 81027f6:	687b      	ldr	r3, [r7, #4]
      }
 81027f8:	4618      	mov	r0, r3
 81027fa:	370c      	adds	r7, #12
 81027fc:	46bd      	mov	sp, r7
 81027fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102802:	4770      	bx	lr

08102804 <_ZSt9addressofINSt8__detail10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEEEPT_RSE_>:
    addressof(_Tp& __r) noexcept
 8102804:	b580      	push	{r7, lr}
 8102806:	b082      	sub	sp, #8
 8102808:	af00      	add	r7, sp, #0
 810280a:	6078      	str	r0, [r7, #4]
    { return std::__addressof(__r); }
 810280c:	6878      	ldr	r0, [r7, #4]
 810280e:	f000 f965 	bl	8102adc <_ZSt11__addressofINSt8__detail10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEEEPT_RSE_>
 8102812:	4603      	mov	r3, r0
 8102814:	4618      	mov	r0, r3
 8102816:	3708      	adds	r7, #8
 8102818:	46bd      	mov	sp, r7
 810281a:	bd80      	pop	{r7, pc}

0810281c <_ZSt11__addressofIPNSt8__detail15_Hash_node_baseEEPT_RS3_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 810281c:	b480      	push	{r7}
 810281e:	b083      	sub	sp, #12
 8102820:	af00      	add	r7, sp, #0
 8102822:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8102824:	687b      	ldr	r3, [r7, #4]
 8102826:	4618      	mov	r0, r3
 8102828:	370c      	adds	r7, #12
 810282a:	46bd      	mov	sp, r7
 810282c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102830:	4770      	bx	lr

08102832 <_ZNSt15__new_allocatorIPNSt8__detail15_Hash_node_baseEE10deallocateEPS2_j>:
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
 8102832:	b580      	push	{r7, lr}
 8102834:	b084      	sub	sp, #16
 8102836:	af00      	add	r7, sp, #0
 8102838:	60f8      	str	r0, [r7, #12]
 810283a:	60b9      	str	r1, [r7, #8]
 810283c:	607a      	str	r2, [r7, #4]
	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
				     std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 810283e:	687b      	ldr	r3, [r7, #4]
 8102840:	009b      	lsls	r3, r3, #2
 8102842:	4619      	mov	r1, r3
 8102844:	68b8      	ldr	r0, [r7, #8]
 8102846:	f020 f97f 	bl	8122b48 <_ZdlPvj>
      }
 810284a:	3710      	adds	r7, #16
 810284c:	46bd      	mov	sp, r7
 810284e:	bd80      	pop	{r7, pc}

08102850 <_ZSt7forwardIRKSt4hashIN7APIDoIP12EDoIPRequestEEEOT_RNSt16remove_referenceIS6_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8102850:	b480      	push	{r7}
 8102852:	b083      	sub	sp, #12
 8102854:	af00      	add	r7, sp, #0
 8102856:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8102858:	687b      	ldr	r3, [r7, #4]
 810285a:	4618      	mov	r0, r3
 810285c:	370c      	adds	r7, #12
 810285e:	46bd      	mov	sp, r7
 8102860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102864:	4770      	bx	lr

08102866 <_ZNSt15__new_allocatorINSt8__detail10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEEEC1ERKSE_>:
      __new_allocator(const __new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 8102866:	b480      	push	{r7}
 8102868:	b083      	sub	sp, #12
 810286a:	af00      	add	r7, sp, #0
 810286c:	6078      	str	r0, [r7, #4]
 810286e:	6039      	str	r1, [r7, #0]
 8102870:	687b      	ldr	r3, [r7, #4]
 8102872:	4618      	mov	r0, r3
 8102874:	370c      	adds	r7, #12
 8102876:	46bd      	mov	sp, r7
 8102878:	f85d 7b04 	ldr.w	r7, [sp], #4
 810287c:	4770      	bx	lr

0810287e <_ZNSt15__new_allocatorIPNSt8__detail15_Hash_node_baseEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 810287e:	b580      	push	{r7, lr}
 8102880:	b084      	sub	sp, #16
 8102882:	af00      	add	r7, sp, #0
 8102884:	60f8      	str	r0, [r7, #12]
 8102886:	60b9      	str	r1, [r7, #8]
 8102888:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 810288a:	68f8      	ldr	r0, [r7, #12]
 810288c:	f000 f943 	bl	8102b16 <_ZNKSt15__new_allocatorIPNSt8__detail15_Hash_node_baseEE11_M_max_sizeEv>
 8102890:	4602      	mov	r2, r0
 8102892:	68bb      	ldr	r3, [r7, #8]
 8102894:	4293      	cmp	r3, r2
 8102896:	bf8c      	ite	hi
 8102898:	2301      	movhi	r3, #1
 810289a:	2300      	movls	r3, #0
 810289c:	b2db      	uxtb	r3, r3
 810289e:	2b00      	cmp	r3, #0
 81028a0:	bf14      	ite	ne
 81028a2:	2301      	movne	r3, #1
 81028a4:	2300      	moveq	r3, #0
 81028a6:	b2db      	uxtb	r3, r3
 81028a8:	2b00      	cmp	r3, #0
 81028aa:	d007      	beq.n	81028bc <_ZNSt15__new_allocatorIPNSt8__detail15_Hash_node_baseEE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 81028ac:	68bb      	ldr	r3, [r7, #8]
 81028ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 81028b2:	d301      	bcc.n	81028b8 <_ZNSt15__new_allocatorIPNSt8__detail15_Hash_node_baseEE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 81028b4:	f020 fa2a 	bl	8122d0c <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 81028b8:	f020 fa25 	bl	8122d06 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 81028bc:	68bb      	ldr	r3, [r7, #8]
 81028be:	009b      	lsls	r3, r3, #2
 81028c0:	4618      	mov	r0, r3
 81028c2:	f020 f952 	bl	8122b6a <_Znwj>
 81028c6:	4603      	mov	r3, r0
 81028c8:	bf00      	nop
      }
 81028ca:	4618      	mov	r0, r3
 81028cc:	3710      	adds	r7, #16
 81028ce:	46bd      	mov	sp, r7
 81028d0:	bd80      	pop	{r7, pc}

081028d2 <_ZNKSt8__detail21_Hashtable_ebo_helperILi0ESt8equal_toIN7APIDoIP12EDoIPRequestEELb1EE7_M_cgetEv>:
      const _Tp& _M_cget() const { return static_cast<const _Tp&>(*this); }
 81028d2:	b480      	push	{r7}
 81028d4:	b083      	sub	sp, #12
 81028d6:	af00      	add	r7, sp, #0
 81028d8:	6078      	str	r0, [r7, #4]
 81028da:	687b      	ldr	r3, [r7, #4]
 81028dc:	4618      	mov	r0, r3
 81028de:	370c      	adds	r7, #12
 81028e0:	46bd      	mov	sp, r7
 81028e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81028e6:	4770      	bx	lr

081028e8 <_ZNKSt8__detail21_Hash_node_value_baseISt4pairIKN7APIDoIP12EDoIPRequestES1_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEEE9_M_valptrEv>:
      _M_valptr() const noexcept
 81028e8:	b580      	push	{r7, lr}
 81028ea:	b082      	sub	sp, #8
 81028ec:	af00      	add	r7, sp, #0
 81028ee:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 81028f0:	687b      	ldr	r3, [r7, #4]
 81028f2:	4618      	mov	r0, r3
 81028f4:	f000 f91b 	bl	8102b2e <_ZNK9__gnu_cxx16__aligned_bufferISt4pairIKN7APIDoIP12EDoIPRequestES1_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEEE6_M_ptrEv>
 81028f8:	4603      	mov	r3, r0
 81028fa:	4618      	mov	r0, r3
 81028fc:	3708      	adds	r7, #8
 81028fe:	46bd      	mov	sp, r7
 8102900:	bd80      	pop	{r7, pc}

08102902 <_ZNKSt8__detail21_Hashtable_ebo_helperILi1ESt4hashIN7APIDoIP12EDoIPRequestEELb1EE7_M_cgetEv>:
      const _Tp& _M_cget() const { return static_cast<const _Tp&>(*this); }
 8102902:	b480      	push	{r7}
 8102904:	b083      	sub	sp, #12
 8102906:	af00      	add	r7, sp, #0
 8102908:	6078      	str	r0, [r7, #4]
 810290a:	687b      	ldr	r3, [r7, #4]
 810290c:	4618      	mov	r0, r3
 810290e:	370c      	adds	r7, #12
 8102910:	46bd      	mov	sp, r7
 8102912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102916:	4770      	bx	lr

08102918 <_ZNKSt8__detail15_Hashtable_baseIN7APIDoIP12EDoIPRequestESt4pairIKS2_S3_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEENS_10_Select1stESt8equal_toIS2_ESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEE12_M_equals_trIS2_EEbRKT_jRKNS_16_Hash_node_valueISB_Lb0EEE>:
	_M_equals_tr(const _Kt& __k, __hash_code __c,
 8102918:	b580      	push	{r7, lr}
 810291a:	b084      	sub	sp, #16
 810291c:	af00      	add	r7, sp, #0
 810291e:	60f8      	str	r0, [r7, #12]
 8102920:	60b9      	str	r1, [r7, #8]
 8102922:	607a      	str	r2, [r7, #4]
 8102924:	603b      	str	r3, [r7, #0]
	{ return _S_equals(__c, __n) && _M_key_equals_tr(__k, __n); }
 8102926:	6839      	ldr	r1, [r7, #0]
 8102928:	6878      	ldr	r0, [r7, #4]
 810292a:	f000 f90c 	bl	8102b46 <_ZNSt8__detail15_Hashtable_baseIN7APIDoIP12EDoIPRequestESt4pairIKS2_S3_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEENS_10_Select1stESt8equal_toIS2_ESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEE9_S_equalsEjRKNS_21_Hash_node_code_cacheILb0EEE>
 810292e:	4603      	mov	r3, r0
 8102930:	2b00      	cmp	r3, #0
 8102932:	d009      	beq.n	8102948 <_ZNKSt8__detail15_Hashtable_baseIN7APIDoIP12EDoIPRequestESt4pairIKS2_S3_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEENS_10_Select1stESt8equal_toIS2_ESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEE12_M_equals_trIS2_EEbRKT_jRKNS_16_Hash_node_valueISB_Lb0EEE+0x30>
 8102934:	683a      	ldr	r2, [r7, #0]
 8102936:	68b9      	ldr	r1, [r7, #8]
 8102938:	68f8      	ldr	r0, [r7, #12]
 810293a:	f7ff fc3c 	bl	81021b6 <_ZNKSt8__detail15_Hashtable_baseIN7APIDoIP12EDoIPRequestESt4pairIKS2_S3_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEENS_10_Select1stESt8equal_toIS2_ESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEE16_M_key_equals_trIS2_EEbRKT_RKNS_16_Hash_node_valueISB_Lb0EEE>
 810293e:	4603      	mov	r3, r0
 8102940:	2b00      	cmp	r3, #0
 8102942:	d001      	beq.n	8102948 <_ZNKSt8__detail15_Hashtable_baseIN7APIDoIP12EDoIPRequestESt4pairIKS2_S3_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEENS_10_Select1stESt8equal_toIS2_ESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEE12_M_equals_trIS2_EEbRKT_jRKNS_16_Hash_node_valueISB_Lb0EEE+0x30>
 8102944:	2301      	movs	r3, #1
 8102946:	e000      	b.n	810294a <_ZNKSt8__detail15_Hashtable_baseIN7APIDoIP12EDoIPRequestESt4pairIKS2_S3_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEENS_10_Select1stESt8equal_toIS2_ESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEE12_M_equals_trIS2_EEbRKT_jRKNS_16_Hash_node_valueISB_Lb0EEE+0x32>
 8102948:	2300      	movs	r3, #0
 810294a:	4618      	mov	r0, r3
 810294c:	3710      	adds	r7, #16
 810294e:	46bd      	mov	sp, r7
 8102950:	bd80      	pop	{r7, pc}

08102952 <_ZNKSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE15_M_bucket_indexERKNSC_16_Hash_node_valueISA_Lb0EEE>:
      _M_bucket_index(const __node_value_type& __n) const noexcept
 8102952:	b580      	push	{r7, lr}
 8102954:	b082      	sub	sp, #8
 8102956:	af00      	add	r7, sp, #0
 8102958:	6078      	str	r0, [r7, #4]
 810295a:	6039      	str	r1, [r7, #0]
      { return __hash_code_base::_M_bucket_index(__n, _M_bucket_count); }
 810295c:	687b      	ldr	r3, [r7, #4]
 810295e:	685b      	ldr	r3, [r3, #4]
 8102960:	461a      	mov	r2, r3
 8102962:	6839      	ldr	r1, [r7, #0]
 8102964:	6878      	ldr	r0, [r7, #4]
 8102966:	f000 f8fa 	bl	8102b5e <_ZNKSt8__detail15_Hash_code_baseIN7APIDoIP12EDoIPRequestESt4pairIKS2_S3_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEENS_10_Select1stESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE15_M_bucket_indexERKNS_16_Hash_node_valueISB_Lb0EEEj>
 810296a:	4603      	mov	r3, r0
 810296c:	4618      	mov	r0, r3
 810296e:	3708      	adds	r7, #8
 8102970:	46bd      	mov	sp, r7
 8102972:	bd80      	pop	{r7, pc}

08102974 <_ZSt7forwardIRKSt4pairISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEEOT_RNSt16remove_referenceIS9_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8102974:	b480      	push	{r7}
 8102976:	b083      	sub	sp, #12
 8102978:	af00      	add	r7, sp, #0
 810297a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 810297c:	687b      	ldr	r3, [r7, #4]
 810297e:	4618      	mov	r0, r3
 8102980:	370c      	adds	r7, #12
 8102982:	46bd      	mov	sp, r7
 8102984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102988:	4770      	bx	lr

0810298a <_ZNSt8__detail10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES1_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEC1Ev>:
    struct _Hash_node
 810298a:	b580      	push	{r7, lr}
 810298c:	b082      	sub	sp, #8
 810298e:	af00      	add	r7, sp, #0
 8102990:	6078      	str	r0, [r7, #4]
 8102992:	687b      	ldr	r3, [r7, #4]
 8102994:	4618      	mov	r0, r3
 8102996:	f7fe fc91 	bl	81012bc <_ZNSt8__detail15_Hash_node_baseC1Ev>
 810299a:	687b      	ldr	r3, [r7, #4]
 810299c:	4618      	mov	r0, r3
 810299e:	3708      	adds	r7, #8
 81029a0:	46bd      	mov	sp, r7
 81029a2:	bd80      	pop	{r7, pc}

081029a4 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEEEE16_M_allocate_nodeIJRS5_RKSB_EEEPSD_DpOT_>:
      _Hashtable_alloc<_NodeAlloc>::_M_allocate_node(_Args&&... __args)
 81029a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 81029a6:	b087      	sub	sp, #28
 81029a8:	af00      	add	r7, sp, #0
 81029aa:	60f8      	str	r0, [r7, #12]
 81029ac:	60b9      	str	r1, [r7, #8]
 81029ae:	607a      	str	r2, [r7, #4]
	auto __nptr = __node_alloc_traits::allocate(_M_node_allocator(), 1);
 81029b0:	68f8      	ldr	r0, [r7, #12]
 81029b2:	f7ff faad 	bl	8101f10 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEEEE17_M_node_allocatorEv>
 81029b6:	4603      	mov	r3, r0
 81029b8:	2101      	movs	r1, #1
 81029ba:	4618      	mov	r0, r3
 81029bc:	f000 f8f1 	bl	8102ba2 <_ZNSt16allocator_traitsISaINSt8__detail10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEEEE8allocateERSE_j>
 81029c0:	6178      	str	r0, [r7, #20]
	__node_ptr __n = std::__to_address(__nptr);
 81029c2:	6978      	ldr	r0, [r7, #20]
 81029c4:	f000 f925 	bl	8102c12 <_ZSt12__to_addressINSt8__detail10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEEEPT_SF_>
 81029c8:	6138      	str	r0, [r7, #16]
	    ::new ((void*)__n) __node_type;
 81029ca:	693b      	ldr	r3, [r7, #16]
 81029cc:	4619      	mov	r1, r3
 81029ce:	2014      	movs	r0, #20
 81029d0:	f7fe fc5a 	bl	8101288 <_ZnwjPv>
 81029d4:	4603      	mov	r3, r0
 81029d6:	4618      	mov	r0, r3
 81029d8:	f7ff ffd7 	bl	810298a <_ZNSt8__detail10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES1_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEC1Ev>
	    __node_alloc_traits::construct(_M_node_allocator(),
 81029dc:	68f8      	ldr	r0, [r7, #12]
 81029de:	f7ff fa97 	bl	8101f10 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEEEE17_M_node_allocatorEv>
 81029e2:	4604      	mov	r4, r0
 81029e4:	693b      	ldr	r3, [r7, #16]
 81029e6:	3304      	adds	r3, #4
 81029e8:	4618      	mov	r0, r3
 81029ea:	f7ff fa9d 	bl	8101f28 <_ZNSt8__detail21_Hash_node_value_baseISt4pairIKN7APIDoIP12EDoIPRequestES1_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEEE9_M_valptrEv>
 81029ee:	4605      	mov	r5, r0
 81029f0:	68b8      	ldr	r0, [r7, #8]
 81029f2:	f7ff fc80 	bl	81022f6 <_ZSt7forwardIRKN7APIDoIP12EDoIPRequestEEOT_RNSt16remove_referenceIS4_E4typeE>
 81029f6:	4606      	mov	r6, r0
 81029f8:	6878      	ldr	r0, [r7, #4]
 81029fa:	f7ff ffbb 	bl	8102974 <_ZSt7forwardIRKSt4pairISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEEOT_RNSt16remove_referenceIS9_E4typeE>
 81029fe:	4603      	mov	r3, r0
 8102a00:	4632      	mov	r2, r6
 8102a02:	4629      	mov	r1, r5
 8102a04:	4620      	mov	r0, r4
 8102a06:	f000 f90f 	bl	8102c28 <_ZNSt16allocator_traitsISaINSt8__detail10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEEEE9constructISC_JRS5_RKSB_EEEvRSE_PT_DpOT0_>
	    return __n;
 8102a0a:	693b      	ldr	r3, [r7, #16]
      }
 8102a0c:	4618      	mov	r0, r3
 8102a0e:	371c      	adds	r7, #28
 8102a10:	46bd      	mov	sp, r7
 8102a12:	bdf0      	pop	{r4, r5, r6, r7, pc}

08102a14 <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE13_M_rehash_auxEjSt17integral_constantIbLb1EE>:
  template<typename _Key, typename _Value, typename _Alloc,
	   typename _ExtractKey, typename _Equal,
	   typename _Hash, typename _RangeHash, typename _Unused,
	   typename _RehashPolicy, typename _Traits>
    void
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
 8102a14:	b580      	push	{r7, lr}
 8102a16:	b08a      	sub	sp, #40	@ 0x28
 8102a18:	af00      	add	r7, sp, #0
 8102a1a:	60f8      	str	r0, [r7, #12]
 8102a1c:	60b9      	str	r1, [r7, #8]
 8102a1e:	713a      	strb	r2, [r7, #4]
	       _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits>::
    _M_rehash_aux(size_type __bkt_count, true_type /* __uks */)
    {
      __buckets_ptr __new_buckets = _M_allocate_buckets(__bkt_count);
 8102a20:	68b9      	ldr	r1, [r7, #8]
 8102a22:	68f8      	ldr	r0, [r7, #12]
 8102a24:	f7ff f875 	bl	8101b12 <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_allocate_bucketsEj>
 8102a28:	61f8      	str	r0, [r7, #28]
      __node_ptr __p = _M_begin();
 8102a2a:	68f8      	ldr	r0, [r7, #12]
 8102a2c:	f7fe fff6 	bl	8101a1c <_ZNKSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE8_M_beginEv>
 8102a30:	6278      	str	r0, [r7, #36]	@ 0x24
      _M_before_begin._M_nxt = nullptr;
 8102a32:	68fb      	ldr	r3, [r7, #12]
 8102a34:	2200      	movs	r2, #0
 8102a36:	609a      	str	r2, [r3, #8]
      std::size_t __bbegin_bkt = 0;
 8102a38:	2300      	movs	r3, #0
 8102a3a:	623b      	str	r3, [r7, #32]
      while (__p)
 8102a3c:	e03e      	b.n	8102abc <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE13_M_rehash_auxEjSt17integral_constantIbLb1EE+0xa8>
	{
	  __node_ptr __next = __p->_M_next();
 8102a3e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8102a40:	f7ff f8c5 	bl	8101bce <_ZNKSt8__detail10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES1_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EE7_M_nextEv>
 8102a44:	61b8      	str	r0, [r7, #24]
	  std::size_t __bkt
	    = __hash_code_base::_M_bucket_index(*__p, __bkt_count);
 8102a46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8102a48:	3304      	adds	r3, #4
 8102a4a:	68ba      	ldr	r2, [r7, #8]
 8102a4c:	4619      	mov	r1, r3
 8102a4e:	68f8      	ldr	r0, [r7, #12]
 8102a50:	f000 f885 	bl	8102b5e <_ZNKSt8__detail15_Hash_code_baseIN7APIDoIP12EDoIPRequestESt4pairIKS2_S3_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEENS_10_Select1stESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE15_M_bucket_indexERKNS_16_Hash_node_valueISB_Lb0EEEj>
 8102a54:	6178      	str	r0, [r7, #20]
	  if (!__new_buckets[__bkt])
 8102a56:	697b      	ldr	r3, [r7, #20]
 8102a58:	009b      	lsls	r3, r3, #2
 8102a5a:	69fa      	ldr	r2, [r7, #28]
 8102a5c:	4413      	add	r3, r2
 8102a5e:	681b      	ldr	r3, [r3, #0]
 8102a60:	2b00      	cmp	r3, #0
 8102a62:	d11a      	bne.n	8102a9a <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE13_M_rehash_auxEjSt17integral_constantIbLb1EE+0x86>
	    {
	      __p->_M_nxt = _M_before_begin._M_nxt;
 8102a64:	68fb      	ldr	r3, [r7, #12]
 8102a66:	689a      	ldr	r2, [r3, #8]
 8102a68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8102a6a:	601a      	str	r2, [r3, #0]
	      _M_before_begin._M_nxt = __p;
 8102a6c:	68fb      	ldr	r3, [r7, #12]
 8102a6e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8102a70:	609a      	str	r2, [r3, #8]
	      __new_buckets[__bkt] = &_M_before_begin;
 8102a72:	697b      	ldr	r3, [r7, #20]
 8102a74:	009b      	lsls	r3, r3, #2
 8102a76:	69fa      	ldr	r2, [r7, #28]
 8102a78:	4413      	add	r3, r2
 8102a7a:	68fa      	ldr	r2, [r7, #12]
 8102a7c:	3208      	adds	r2, #8
 8102a7e:	601a      	str	r2, [r3, #0]
	      if (__p->_M_nxt)
 8102a80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8102a82:	681b      	ldr	r3, [r3, #0]
 8102a84:	2b00      	cmp	r3, #0
 8102a86:	d005      	beq.n	8102a94 <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE13_M_rehash_auxEjSt17integral_constantIbLb1EE+0x80>
		__new_buckets[__bbegin_bkt] = __p;
 8102a88:	6a3b      	ldr	r3, [r7, #32]
 8102a8a:	009b      	lsls	r3, r3, #2
 8102a8c:	69fa      	ldr	r2, [r7, #28]
 8102a8e:	4413      	add	r3, r2
 8102a90:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8102a92:	601a      	str	r2, [r3, #0]
	      __bbegin_bkt = __bkt;
 8102a94:	697b      	ldr	r3, [r7, #20]
 8102a96:	623b      	str	r3, [r7, #32]
 8102a98:	e00e      	b.n	8102ab8 <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE13_M_rehash_auxEjSt17integral_constantIbLb1EE+0xa4>
	    }
	  else
	    {
	      __p->_M_nxt = __new_buckets[__bkt]->_M_nxt;
 8102a9a:	697b      	ldr	r3, [r7, #20]
 8102a9c:	009b      	lsls	r3, r3, #2
 8102a9e:	69fa      	ldr	r2, [r7, #28]
 8102aa0:	4413      	add	r3, r2
 8102aa2:	681b      	ldr	r3, [r3, #0]
 8102aa4:	681a      	ldr	r2, [r3, #0]
 8102aa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8102aa8:	601a      	str	r2, [r3, #0]
	      __new_buckets[__bkt]->_M_nxt = __p;
 8102aaa:	697b      	ldr	r3, [r7, #20]
 8102aac:	009b      	lsls	r3, r3, #2
 8102aae:	69fa      	ldr	r2, [r7, #28]
 8102ab0:	4413      	add	r3, r2
 8102ab2:	681b      	ldr	r3, [r3, #0]
 8102ab4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8102ab6:	601a      	str	r2, [r3, #0]
	    }

	  __p = __next;
 8102ab8:	69bb      	ldr	r3, [r7, #24]
 8102aba:	627b      	str	r3, [r7, #36]	@ 0x24
      while (__p)
 8102abc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8102abe:	2b00      	cmp	r3, #0
 8102ac0:	d1bd      	bne.n	8102a3e <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE13_M_rehash_auxEjSt17integral_constantIbLb1EE+0x2a>
	}

      _M_deallocate_buckets();
 8102ac2:	68f8      	ldr	r0, [r7, #12]
 8102ac4:	f7fe ff48 	bl	8101958 <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_deallocate_bucketsEv>
      _M_bucket_count = __bkt_count;
 8102ac8:	68fb      	ldr	r3, [r7, #12]
 8102aca:	68ba      	ldr	r2, [r7, #8]
 8102acc:	605a      	str	r2, [r3, #4]
      _M_buckets = __new_buckets;
 8102ace:	68fb      	ldr	r3, [r7, #12]
 8102ad0:	69fa      	ldr	r2, [r7, #28]
 8102ad2:	601a      	str	r2, [r3, #0]
    }
 8102ad4:	bf00      	nop
 8102ad6:	3728      	adds	r7, #40	@ 0x28
 8102ad8:	46bd      	mov	sp, r7
 8102ada:	bd80      	pop	{r7, pc}

08102adc <_ZSt11__addressofINSt8__detail10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEEEPT_RSE_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8102adc:	b480      	push	{r7}
 8102ade:	b083      	sub	sp, #12
 8102ae0:	af00      	add	r7, sp, #0
 8102ae2:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8102ae4:	687b      	ldr	r3, [r7, #4]
 8102ae6:	4618      	mov	r0, r3
 8102ae8:	370c      	adds	r7, #12
 8102aea:	46bd      	mov	sp, r7
 8102aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102af0:	4770      	bx	lr

08102af2 <_ZNSt15__new_allocatorINSt8__detail10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEEE10deallocateEPSD_j>:
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
 8102af2:	b580      	push	{r7, lr}
 8102af4:	b084      	sub	sp, #16
 8102af6:	af00      	add	r7, sp, #0
 8102af8:	60f8      	str	r0, [r7, #12]
 8102afa:	60b9      	str	r1, [r7, #8]
 8102afc:	607a      	str	r2, [r7, #4]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 8102afe:	687a      	ldr	r2, [r7, #4]
 8102b00:	4613      	mov	r3, r2
 8102b02:	009b      	lsls	r3, r3, #2
 8102b04:	4413      	add	r3, r2
 8102b06:	009b      	lsls	r3, r3, #2
 8102b08:	4619      	mov	r1, r3
 8102b0a:	68b8      	ldr	r0, [r7, #8]
 8102b0c:	f020 f81c 	bl	8122b48 <_ZdlPvj>
      }
 8102b10:	3710      	adds	r7, #16
 8102b12:	46bd      	mov	sp, r7
 8102b14:	bd80      	pop	{r7, pc}

08102b16 <_ZNKSt15__new_allocatorIPNSt8__detail15_Hash_node_baseEE11_M_max_sizeEv>:
	{ return false; }
#endif

    private:
      _GLIBCXX_CONSTEXPR size_type
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8102b16:	b480      	push	{r7}
 8102b18:	b083      	sub	sp, #12
 8102b1a:	af00      	add	r7, sp, #0
 8102b1c:	6078      	str	r0, [r7, #4]
      {
#if __PTRDIFF_MAX__ < __SIZE_MAX__
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8102b1e:	f06f 4360 	mvn.w	r3, #3758096384	@ 0xe0000000
#else
	return std::size_t(-1) / sizeof(_Tp);
#endif
      }
 8102b22:	4618      	mov	r0, r3
 8102b24:	370c      	adds	r7, #12
 8102b26:	46bd      	mov	sp, r7
 8102b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102b2c:	4770      	bx	lr

08102b2e <_ZNK9__gnu_cxx16__aligned_bufferISt4pairIKN7APIDoIP12EDoIPRequestES1_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEEE6_M_ptrEv>:

      const _Tp*
      _M_ptr() const noexcept
 8102b2e:	b580      	push	{r7, lr}
 8102b30:	b082      	sub	sp, #8
 8102b32:	af00      	add	r7, sp, #0
 8102b34:	6078      	str	r0, [r7, #4]
      { return static_cast<const _Tp*>(_M_addr()); }
 8102b36:	6878      	ldr	r0, [r7, #4]
 8102b38:	f000 f88e 	bl	8102c58 <_ZNK9__gnu_cxx16__aligned_bufferISt4pairIKN7APIDoIP12EDoIPRequestES1_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEEE7_M_addrEv>
 8102b3c:	4603      	mov	r3, r0
 8102b3e:	4618      	mov	r0, r3
 8102b40:	3708      	adds	r7, #8
 8102b42:	46bd      	mov	sp, r7
 8102b44:	bd80      	pop	{r7, pc}

08102b46 <_ZNSt8__detail15_Hashtable_baseIN7APIDoIP12EDoIPRequestESt4pairIKS2_S3_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEENS_10_Select1stESt8equal_toIS2_ESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEE9_S_equalsEjRKNS_21_Hash_node_code_cacheILb0EEE>:
      _S_equals(__hash_code, const _Hash_node_code_cache<false>&)
 8102b46:	b480      	push	{r7}
 8102b48:	b083      	sub	sp, #12
 8102b4a:	af00      	add	r7, sp, #0
 8102b4c:	6078      	str	r0, [r7, #4]
 8102b4e:	6039      	str	r1, [r7, #0]
      { return true; }
 8102b50:	2301      	movs	r3, #1
 8102b52:	4618      	mov	r0, r3
 8102b54:	370c      	adds	r7, #12
 8102b56:	46bd      	mov	sp, r7
 8102b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102b5c:	4770      	bx	lr

08102b5e <_ZNKSt8__detail15_Hash_code_baseIN7APIDoIP12EDoIPRequestESt4pairIKS2_S3_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEENS_10_Select1stESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE15_M_bucket_indexERKNS_16_Hash_node_valueISB_Lb0EEEj>:
      _M_bucket_index(const _Hash_node_value<_Value, false>& __n,
 8102b5e:	b580      	push	{r7, lr}
 8102b60:	b086      	sub	sp, #24
 8102b62:	af00      	add	r7, sp, #0
 8102b64:	60f8      	str	r0, [r7, #12]
 8102b66:	60b9      	str	r1, [r7, #8]
 8102b68:	607a      	str	r2, [r7, #4]
	return _RangeHash{}(_M_hash_code(_ExtractKey{}(__n._M_v())),
 8102b6a:	68bb      	ldr	r3, [r7, #8]
 8102b6c:	4618      	mov	r0, r3
 8102b6e:	f7ff fd04 	bl	810257a <_ZNKSt8__detail21_Hash_node_value_baseISt4pairIKN7APIDoIP12EDoIPRequestES1_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEEE4_M_vEv>
 8102b72:	4602      	mov	r2, r0
 8102b74:	f107 0314 	add.w	r3, r7, #20
 8102b78:	4611      	mov	r1, r2
 8102b7a:	4618      	mov	r0, r3
 8102b7c:	f7ff f8ff 	bl	8101d7e <_ZNKSt8__detail10_Select1stclIRKSt4pairIKN7APIDoIP12EDoIPRequestES2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEEEEONS0_10__1st_typeIT_E4typeEOSG_>
 8102b80:	4603      	mov	r3, r0
 8102b82:	4619      	mov	r1, r3
 8102b84:	68f8      	ldr	r0, [r7, #12]
 8102b86:	f000 f872 	bl	8102c6e <_ZNKSt8__detail15_Hash_code_baseIN7APIDoIP12EDoIPRequestESt4pairIKS2_S3_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEENS_10_Select1stESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE12_M_hash_codeERS4_>
 8102b8a:	4601      	mov	r1, r0
 8102b8c:	f107 0310 	add.w	r3, r7, #16
 8102b90:	687a      	ldr	r2, [r7, #4]
 8102b92:	4618      	mov	r0, r3
 8102b94:	f7fe fba0 	bl	81012d8 <_ZNKSt8__detail18_Mod_range_hashingclEjj>
 8102b98:	4603      	mov	r3, r0
      }
 8102b9a:	4618      	mov	r0, r3
 8102b9c:	3718      	adds	r7, #24
 8102b9e:	46bd      	mov	sp, r7
 8102ba0:	bd80      	pop	{r7, pc}

08102ba2 <_ZNSt16allocator_traitsISaINSt8__detail10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEEEE8allocateERSE_j>:
      allocate(allocator_type& __a, size_type __n)
 8102ba2:	b5b0      	push	{r4, r5, r7, lr}
 8102ba4:	b084      	sub	sp, #16
 8102ba6:	af00      	add	r7, sp, #0
 8102ba8:	6078      	str	r0, [r7, #4]
 8102baa:	6039      	str	r1, [r7, #0]
 8102bac:	687b      	ldr	r3, [r7, #4]
 8102bae:	60fb      	str	r3, [r7, #12]
 8102bb0:	683b      	ldr	r3, [r7, #0]
 8102bb2:	60bb      	str	r3, [r7, #8]
	if (std::__is_constant_evaluated())
 8102bb4:	f7fe fb60 	bl	8101278 <__is_constant_evaluated>
 8102bb8:	4603      	mov	r3, r0
 8102bba:	2b00      	cmp	r3, #0
 8102bbc:	d01d      	beq.n	8102bfa <_ZNSt16allocator_traitsISaINSt8__detail10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEEEE8allocateERSE_j+0x58>
	    if (__builtin_mul_overflow(__n, sizeof(_Tp), &__n))
 8102bbe:	68bb      	ldr	r3, [r7, #8]
 8102bc0:	2100      	movs	r1, #0
 8102bc2:	2214      	movs	r2, #20
 8102bc4:	fba3 4502 	umull	r4, r5, r3, r2
 8102bc8:	f04f 0200 	mov.w	r2, #0
 8102bcc:	f04f 0300 	mov.w	r3, #0
 8102bd0:	002a      	movs	r2, r5
 8102bd2:	2300      	movs	r3, #0
 8102bd4:	2a00      	cmp	r2, #0
 8102bd6:	d000      	beq.n	8102bda <_ZNSt16allocator_traitsISaINSt8__detail10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEEEE8allocateERSE_j+0x38>
 8102bd8:	2101      	movs	r1, #1
 8102bda:	4623      	mov	r3, r4
 8102bdc:	60bb      	str	r3, [r7, #8]
 8102bde:	460b      	mov	r3, r1
 8102be0:	f003 0301 	and.w	r3, r3, #1
 8102be4:	b2db      	uxtb	r3, r3
 8102be6:	2b00      	cmp	r3, #0
 8102be8:	d001      	beq.n	8102bee <_ZNSt16allocator_traitsISaINSt8__detail10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEEEE8allocateERSE_j+0x4c>
	      std::__throw_bad_array_new_length();
 8102bea:	f020 f88f 	bl	8122d0c <_ZSt28__throw_bad_array_new_lengthv>
	    return static_cast<_Tp*>(::operator new(__n));
 8102bee:	68bb      	ldr	r3, [r7, #8]
 8102bf0:	4618      	mov	r0, r3
 8102bf2:	f01f ffba 	bl	8122b6a <_Znwj>
 8102bf6:	4603      	mov	r3, r0
 8102bf8:	e007      	b.n	8102c0a <_ZNSt16allocator_traitsISaINSt8__detail10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEEEE8allocateERSE_j+0x68>
	return __allocator_base<_Tp>::allocate(__n, 0);
 8102bfa:	68bb      	ldr	r3, [r7, #8]
 8102bfc:	2200      	movs	r2, #0
 8102bfe:	4619      	mov	r1, r3
 8102c00:	68f8      	ldr	r0, [r7, #12]
 8102c02:	f000 f867 	bl	8102cd4 <_ZNSt15__new_allocatorINSt8__detail10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEEE8allocateEjPKv>
 8102c06:	4603      	mov	r3, r0
 8102c08:	bf00      	nop
      { return __a.allocate(__n); }
 8102c0a:	4618      	mov	r0, r3
 8102c0c:	3710      	adds	r7, #16
 8102c0e:	46bd      	mov	sp, r7
 8102c10:	bdb0      	pop	{r4, r5, r7, pc}

08102c12 <_ZSt12__to_addressINSt8__detail10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEEEPT_SF_>:
    __to_address(_Tp* __ptr) noexcept
 8102c12:	b480      	push	{r7}
 8102c14:	b083      	sub	sp, #12
 8102c16:	af00      	add	r7, sp, #0
 8102c18:	6078      	str	r0, [r7, #4]
      return __ptr;
 8102c1a:	687b      	ldr	r3, [r7, #4]
    }
 8102c1c:	4618      	mov	r0, r3
 8102c1e:	370c      	adds	r7, #12
 8102c20:	46bd      	mov	sp, r7
 8102c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102c26:	4770      	bx	lr

08102c28 <_ZNSt16allocator_traitsISaINSt8__detail10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEEEE9constructISC_JRS5_RKSB_EEEvRSE_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8102c28:	b590      	push	{r4, r7, lr}
 8102c2a:	b085      	sub	sp, #20
 8102c2c:	af00      	add	r7, sp, #0
 8102c2e:	60f8      	str	r0, [r7, #12]
 8102c30:	60b9      	str	r1, [r7, #8]
 8102c32:	607a      	str	r2, [r7, #4]
 8102c34:	603b      	str	r3, [r7, #0]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 8102c36:	6878      	ldr	r0, [r7, #4]
 8102c38:	f7ff fb5d 	bl	81022f6 <_ZSt7forwardIRKN7APIDoIP12EDoIPRequestEEOT_RNSt16remove_referenceIS4_E4typeE>
 8102c3c:	4604      	mov	r4, r0
 8102c3e:	6838      	ldr	r0, [r7, #0]
 8102c40:	f7ff fe98 	bl	8102974 <_ZSt7forwardIRKSt4pairISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEEOT_RNSt16remove_referenceIS9_E4typeE>
 8102c44:	4603      	mov	r3, r0
 8102c46:	461a      	mov	r2, r3
 8102c48:	4621      	mov	r1, r4
 8102c4a:	68b8      	ldr	r0, [r7, #8]
 8102c4c:	f000 f824 	bl	8102c98 <_ZSt12construct_atISt4pairIKN7APIDoIP12EDoIPRequestES0_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEEJRS3_RKS9_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPSF_DpOSG_>
	}
 8102c50:	bf00      	nop
 8102c52:	3714      	adds	r7, #20
 8102c54:	46bd      	mov	sp, r7
 8102c56:	bd90      	pop	{r4, r7, pc}

08102c58 <_ZNK9__gnu_cxx16__aligned_bufferISt4pairIKN7APIDoIP12EDoIPRequestES1_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEEE7_M_addrEv>:
      _M_addr() const noexcept
 8102c58:	b480      	push	{r7}
 8102c5a:	b083      	sub	sp, #12
 8102c5c:	af00      	add	r7, sp, #0
 8102c5e:	6078      	str	r0, [r7, #4]
        return static_cast<const void*>(&_M_storage);
 8102c60:	687b      	ldr	r3, [r7, #4]
      }
 8102c62:	4618      	mov	r0, r3
 8102c64:	370c      	adds	r7, #12
 8102c66:	46bd      	mov	sp, r7
 8102c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102c6c:	4770      	bx	lr

08102c6e <_ZNKSt8__detail15_Hash_code_baseIN7APIDoIP12EDoIPRequestESt4pairIKS2_S3_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEENS_10_Select1stESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE12_M_hash_codeERS4_>:
      _M_hash_code(const _Key& __k) const
 8102c6e:	b580      	push	{r7, lr}
 8102c70:	b082      	sub	sp, #8
 8102c72:	af00      	add	r7, sp, #0
 8102c74:	6078      	str	r0, [r7, #4]
 8102c76:	6039      	str	r1, [r7, #0]
	return _M_hash()(__k);
 8102c78:	6878      	ldr	r0, [r7, #4]
 8102c7a:	f7ff fcac 	bl	81025d6 <_ZNKSt8__detail15_Hash_code_baseIN7APIDoIP12EDoIPRequestESt4pairIKS2_S3_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEENS_10_Select1stESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE7_M_hashEv>
 8102c7e:	4602      	mov	r2, r0
 8102c80:	683b      	ldr	r3, [r7, #0]
 8102c82:	f993 3000 	ldrsb.w	r3, [r3]
 8102c86:	4619      	mov	r1, r3
 8102c88:	4610      	mov	r0, r2
 8102c8a:	f7ff fcb0 	bl	81025ee <_ZNKSt11__hash_enumIN7APIDoIP12EDoIPRequestELb1EEclES1_>
 8102c8e:	4603      	mov	r3, r0
      }
 8102c90:	4618      	mov	r0, r3
 8102c92:	3708      	adds	r7, #8
 8102c94:	46bd      	mov	sp, r7
 8102c96:	bd80      	pop	{r7, pc}

08102c98 <_ZSt12construct_atISt4pairIKN7APIDoIP12EDoIPRequestES0_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEEJRS3_RKS9_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPSF_DpOSG_>:

#if __cplusplus >= 202002L
  template<typename _Tp, typename... _Args>
    constexpr auto
    construct_at(_Tp* __location, _Args&&... __args)
 8102c98:	b5b0      	push	{r4, r5, r7, lr}
 8102c9a:	b084      	sub	sp, #16
 8102c9c:	af00      	add	r7, sp, #0
 8102c9e:	60f8      	str	r0, [r7, #12]
 8102ca0:	60b9      	str	r1, [r7, #8]
 8102ca2:	607a      	str	r2, [r7, #4]
    noexcept(noexcept(::new((void*)0) _Tp(std::declval<_Args>()...)))
    -> decltype(::new((void*)0) _Tp(std::declval<_Args>()...))
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 8102ca4:	68fb      	ldr	r3, [r7, #12]
 8102ca6:	4619      	mov	r1, r3
 8102ca8:	2010      	movs	r0, #16
 8102caa:	f7fe faed 	bl	8101288 <_ZnwjPv>
 8102cae:	4604      	mov	r4, r0
 8102cb0:	68b8      	ldr	r0, [r7, #8]
 8102cb2:	f7ff fb20 	bl	81022f6 <_ZSt7forwardIRKN7APIDoIP12EDoIPRequestEEOT_RNSt16remove_referenceIS4_E4typeE>
 8102cb6:	4605      	mov	r5, r0
 8102cb8:	6878      	ldr	r0, [r7, #4]
 8102cba:	f7ff fe5b 	bl	8102974 <_ZSt7forwardIRKSt4pairISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEEOT_RNSt16remove_referenceIS9_E4typeE>
 8102cbe:	4603      	mov	r3, r0
 8102cc0:	461a      	mov	r2, r3
 8102cc2:	4629      	mov	r1, r5
 8102cc4:	4620      	mov	r0, r4
 8102cc6:	f7fe fb3a 	bl	810133e <_ZNSt4pairIKN7APIDoIP12EDoIPRequestES_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEEC1ERS2_RKS8_>
 8102cca:	4623      	mov	r3, r4
 8102ccc:	4618      	mov	r0, r3
 8102cce:	3710      	adds	r7, #16
 8102cd0:	46bd      	mov	sp, r7
 8102cd2:	bdb0      	pop	{r4, r5, r7, pc}

08102cd4 <_ZNSt15__new_allocatorINSt8__detail10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8102cd4:	b580      	push	{r7, lr}
 8102cd6:	b084      	sub	sp, #16
 8102cd8:	af00      	add	r7, sp, #0
 8102cda:	60f8      	str	r0, [r7, #12]
 8102cdc:	60b9      	str	r1, [r7, #8]
 8102cde:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 8102ce0:	68f8      	ldr	r0, [r7, #12]
 8102ce2:	f000 f827 	bl	8102d34 <_ZNKSt15__new_allocatorINSt8__detail10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEEE11_M_max_sizeEv>
 8102ce6:	4602      	mov	r2, r0
 8102ce8:	68bb      	ldr	r3, [r7, #8]
 8102cea:	4293      	cmp	r3, r2
 8102cec:	bf8c      	ite	hi
 8102cee:	2301      	movhi	r3, #1
 8102cf0:	2300      	movls	r3, #0
 8102cf2:	b2db      	uxtb	r3, r3
 8102cf4:	2b00      	cmp	r3, #0
 8102cf6:	bf14      	ite	ne
 8102cf8:	2301      	movne	r3, #1
 8102cfa:	2300      	moveq	r3, #0
 8102cfc:	b2db      	uxtb	r3, r3
 8102cfe:	2b00      	cmp	r3, #0
 8102d00:	d007      	beq.n	8102d12 <_ZNSt15__new_allocatorINSt8__detail10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEEE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 8102d02:	68bb      	ldr	r3, [r7, #8]
 8102d04:	4a0a      	ldr	r2, [pc, #40]	@ (8102d30 <_ZNSt15__new_allocatorINSt8__detail10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEEE8allocateEjPKv+0x5c>)
 8102d06:	4293      	cmp	r3, r2
 8102d08:	d901      	bls.n	8102d0e <_ZNSt15__new_allocatorINSt8__detail10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEEE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 8102d0a:	f01f ffff 	bl	8122d0c <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 8102d0e:	f01f fffa 	bl	8122d06 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 8102d12:	68ba      	ldr	r2, [r7, #8]
 8102d14:	4613      	mov	r3, r2
 8102d16:	009b      	lsls	r3, r3, #2
 8102d18:	4413      	add	r3, r2
 8102d1a:	009b      	lsls	r3, r3, #2
 8102d1c:	4618      	mov	r0, r3
 8102d1e:	f01f ff24 	bl	8122b6a <_Znwj>
 8102d22:	4603      	mov	r3, r0
 8102d24:	bf00      	nop
      }
 8102d26:	4618      	mov	r0, r3
 8102d28:	3710      	adds	r7, #16
 8102d2a:	46bd      	mov	sp, r7
 8102d2c:	bd80      	pop	{r7, pc}
 8102d2e:	bf00      	nop
 8102d30:	0ccccccc 	.word	0x0ccccccc

08102d34 <_ZNKSt15__new_allocatorINSt8__detail10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8102d34:	b480      	push	{r7}
 8102d36:	b083      	sub	sp, #12
 8102d38:	af00      	add	r7, sp, #0
 8102d3a:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8102d3c:	4b03      	ldr	r3, [pc, #12]	@ (8102d4c <_ZNKSt15__new_allocatorINSt8__detail10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEEE11_M_max_sizeEv+0x18>)
      }
 8102d3e:	4618      	mov	r0, r3
 8102d40:	370c      	adds	r7, #12
 8102d42:	46bd      	mov	sp, r7
 8102d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102d48:	4770      	bx	lr
 8102d4a:	bf00      	nop
 8102d4c:	06666666 	.word	0x06666666

08102d50 <_ZNSt13unordered_mapIN7APIDoIP12EDoIPRequestESt4pairISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressESt4hashIS1_ESt8equal_toIS1_ESaIS2_IKS1_S8_EEED1Ev>:
    class unordered_map
 8102d50:	b580      	push	{r7, lr}
 8102d52:	b082      	sub	sp, #8
 8102d54:	af00      	add	r7, sp, #0
 8102d56:	6078      	str	r0, [r7, #4]
 8102d58:	687b      	ldr	r3, [r7, #4]
 8102d5a:	4618      	mov	r0, r3
 8102d5c:	f7fe fd7e 	bl	810185c <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEED1Ev>
 8102d60:	687b      	ldr	r3, [r7, #4]
 8102d62:	4618      	mov	r0, r3
 8102d64:	3708      	adds	r7, #8
 8102d66:	46bd      	mov	sp, r7
 8102d68:	bd80      	pop	{r7, pc}
	...

08102d6c <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8102d6c:	b580      	push	{r7, lr}
 8102d6e:	b094      	sub	sp, #80	@ 0x50
 8102d70:	af04      	add	r7, sp, #16
 8102d72:	6078      	str	r0, [r7, #4]
 8102d74:	6039      	str	r1, [r7, #0]
 8102d76:	687b      	ldr	r3, [r7, #4]
 8102d78:	2b01      	cmp	r3, #1
 8102d7a:	d15a      	bne.n	8102e32 <_Z41__static_initialization_and_destruction_0ii+0xc6>
 8102d7c:	683b      	ldr	r3, [r7, #0]
 8102d7e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8102d82:	4293      	cmp	r3, r2
 8102d84:	d155      	bne.n	8102e32 <_Z41__static_initialization_and_destruction_0ii+0xc6>
        ACCELERATION = EVENT_DATA_UPDATE_ACCELERATION,
        OIL_TEMPERATURE = EVENT_DATA_UPDATE_OIL_TEMPERATURE,
        ECU_DATA_END = EVENT_DATA_UPDATE_END
    };

    const std::unordered_map<EDoIPRequest, std::pair<std::variant<EUDSDID, EDynamicDataIndentifierRequestCode>, EECUAddress>> dataIdentifierMap =
 8102d86:	f107 0314 	add.w	r3, r7, #20
 8102d8a:	2220      	movs	r2, #32
 8102d8c:	2100      	movs	r1, #0
 8102d8e:	4618      	mov	r0, r3
 8102d90:	f021 f884 	bl	8123e9c <memset>
 8102d94:	4b2e      	ldr	r3, [pc, #184]	@ (8102e50 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
 8102d96:	61bb      	str	r3, [r7, #24]
 8102d98:	2301      	movs	r3, #1
 8102d9a:	773b      	strb	r3, [r7, #28]
 8102d9c:	2312      	movs	r3, #18
 8102d9e:	f887 3020 	strb.w	r3, [r7, #32]
 8102da2:	2315      	movs	r3, #21
 8102da4:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
 8102da8:	f24d 1306 	movw	r3, #53510	@ 0xd106
 8102dac:	853b      	strh	r3, [r7, #40]	@ 0x28
 8102dae:	2360      	movs	r3, #96	@ 0x60
 8102db0:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
 8102db4:	f107 0314 	add.w	r3, r7, #20
 8102db8:	60fb      	str	r3, [r7, #12]
 8102dba:	2302      	movs	r3, #2
 8102dbc:	613b      	str	r3, [r7, #16]
 8102dbe:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8102dc2:	4618      	mov	r0, r3
 8102dc4:	f7fe fcc8 	bl	8101758 <_ZNSaISt4pairIKN7APIDoIP12EDoIPRequestES_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEEEC1Ev>
 8102dc8:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8102dcc:	9302      	str	r3, [sp, #8]
 8102dce:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8102dd2:	9301      	str	r3, [sp, #4]
 8102dd4:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8102dd8:	9300      	str	r3, [sp, #0]
 8102dda:	2300      	movs	r3, #0
 8102ddc:	f107 020c 	add.w	r2, r7, #12
 8102de0:	ca06      	ldmia	r2, {r1, r2}
 8102de2:	481c      	ldr	r0, [pc, #112]	@ (8102e54 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
 8102de4:	f7fe fccf 	bl	8101786 <_ZNSt13unordered_mapIN7APIDoIP12EDoIPRequestESt4pairISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressESt4hashIS1_ESt8equal_toIS1_ESaIS2_IKS1_S8_EEEC1ESt16initializer_listISE_EjRKSA_RKSC_RKSF_>
 8102de8:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8102dec:	4618      	mov	r0, r3
 8102dee:	f7fe fcbf 	bl	8101770 <_ZNSaISt4pairIKN7APIDoIP12EDoIPRequestES_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEEED1Ev>
QueueHandle_t queueToEventManagerCM4 = xQueueCreate(64, sizeof(SMessage));
 8102df2:	2200      	movs	r2, #0
 8102df4:	211c      	movs	r1, #28
 8102df6:	2040      	movs	r0, #64	@ 0x40
 8102df8:	f010 fff7 	bl	8113dea <xQueueGenericCreate>
 8102dfc:	4603      	mov	r3, r0
 8102dfe:	4a16      	ldr	r2, [pc, #88]	@ (8102e58 <_Z41__static_initialization_and_destruction_0ii+0xec>)
 8102e00:	6013      	str	r3, [r2, #0]
QueueHandle_t queueToNativeDaemon = xQueueCreate(16, sizeof(SMessage));
 8102e02:	2200      	movs	r2, #0
 8102e04:	211c      	movs	r1, #28
 8102e06:	2010      	movs	r0, #16
 8102e08:	f010 ffef 	bl	8113dea <xQueueGenericCreate>
 8102e0c:	4603      	mov	r3, r0
 8102e0e:	4a13      	ldr	r2, [pc, #76]	@ (8102e5c <_Z41__static_initialization_and_destruction_0ii+0xf0>)
 8102e10:	6013      	str	r3, [r2, #0]
QueueHandle_t queueToDoIPDaemonTask = xQueueCreate(16, sizeof(SMessage));
 8102e12:	2200      	movs	r2, #0
 8102e14:	211c      	movs	r1, #28
 8102e16:	2010      	movs	r0, #16
 8102e18:	f010 ffe7 	bl	8113dea <xQueueGenericCreate>
 8102e1c:	4603      	mov	r3, r0
 8102e1e:	4a10      	ldr	r2, [pc, #64]	@ (8102e60 <_Z41__static_initialization_and_destruction_0ii+0xf4>)
 8102e20:	6013      	str	r3, [r2, #0]
QueueHandle_t queueToTemperature = xQueueCreate(4, sizeof(SMessage));
 8102e22:	2200      	movs	r2, #0
 8102e24:	211c      	movs	r1, #28
 8102e26:	2004      	movs	r0, #4
 8102e28:	f010 ffdf 	bl	8113dea <xQueueGenericCreate>
 8102e2c:	4603      	mov	r3, r0
 8102e2e:	4a0d      	ldr	r2, [pc, #52]	@ (8102e64 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
 8102e30:	6013      	str	r3, [r2, #0]
 8102e32:	687b      	ldr	r3, [r7, #4]
 8102e34:	2b00      	cmp	r3, #0
 8102e36:	d107      	bne.n	8102e48 <_Z41__static_initialization_and_destruction_0ii+0xdc>
 8102e38:	683b      	ldr	r3, [r7, #0]
 8102e3a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8102e3e:	4293      	cmp	r3, r2
 8102e40:	d102      	bne.n	8102e48 <_Z41__static_initialization_and_destruction_0ii+0xdc>
 8102e42:	4804      	ldr	r0, [pc, #16]	@ (8102e54 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
 8102e44:	f7ff ff84 	bl	8102d50 <_ZNSt13unordered_mapIN7APIDoIP12EDoIPRequestESt4pairISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressESt4hashIS1_ESt8equal_toIS1_ESaIS2_IKS1_S8_EEED1Ev>
}
 8102e48:	bf00      	nop
 8102e4a:	3740      	adds	r7, #64	@ 0x40
 8102e4c:	46bd      	mov	sp, r7
 8102e4e:	bd80      	pop	{r7, pc}
 8102e50:	46090101 	.word	0x46090101
 8102e54:	100000b4 	.word	0x100000b4
 8102e58:	100001cc 	.word	0x100001cc
 8102e5c:	100001d0 	.word	0x100001d0
 8102e60:	100001d4 	.word	0x100001d4
 8102e64:	100001d8 	.word	0x100001d8

08102e68 <_GLOBAL__sub_I_hi2c4>:
 8102e68:	b580      	push	{r7, lr}
 8102e6a:	af00      	add	r7, sp, #0
 8102e6c:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8102e70:	2001      	movs	r0, #1
 8102e72:	f7ff ff7b 	bl	8102d6c <_Z41__static_initialization_and_destruction_0ii>
 8102e76:	bd80      	pop	{r7, pc}

08102e78 <_GLOBAL__sub_D_hi2c4>:
 8102e78:	b580      	push	{r7, lr}
 8102e7a:	af00      	add	r7, sp, #0
 8102e7c:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8102e80:	2000      	movs	r0, #0
 8102e82:	f7ff ff73 	bl	8102d6c <_Z41__static_initialization_and_destruction_0ii>
 8102e86:	bd80      	pop	{r7, pc}

08102e88 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8102e88:	b580      	push	{r7, lr}
 8102e8a:	b082      	sub	sp, #8
 8102e8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8102e8e:	4b10      	ldr	r3, [pc, #64]	@ (8102ed0 <HAL_MspInit+0x48>)
 8102e90:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8102e94:	4a0e      	ldr	r2, [pc, #56]	@ (8102ed0 <HAL_MspInit+0x48>)
 8102e96:	f043 0302 	orr.w	r3, r3, #2
 8102e9a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8102e9e:	4b0c      	ldr	r3, [pc, #48]	@ (8102ed0 <HAL_MspInit+0x48>)
 8102ea0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8102ea4:	f003 0302 	and.w	r3, r3, #2
 8102ea8:	607b      	str	r3, [r7, #4]
 8102eaa:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8102eac:	2200      	movs	r2, #0
 8102eae:	210f      	movs	r1, #15
 8102eb0:	f06f 0001 	mvn.w	r0, #1
 8102eb4:	f009 f9c4 	bl	810c240 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* HSEM2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM2_IRQn, 7, 0);
 8102eb8:	2200      	movs	r2, #0
 8102eba:	2107      	movs	r1, #7
 8102ebc:	207e      	movs	r0, #126	@ 0x7e
 8102ebe:	f009 f9bf 	bl	810c240 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM2_IRQn);
 8102ec2:	207e      	movs	r0, #126	@ 0x7e
 8102ec4:	f009 f9d6 	bl	810c274 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8102ec8:	bf00      	nop
 8102eca:	3708      	adds	r7, #8
 8102ecc:	46bd      	mov	sp, r7
 8102ece:	bd80      	pop	{r7, pc}
 8102ed0:	58024400 	.word	0x58024400

08102ed4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8102ed4:	b580      	push	{r7, lr}
 8102ed6:	b0bc      	sub	sp, #240	@ 0xf0
 8102ed8:	af00      	add	r7, sp, #0
 8102eda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8102edc:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8102ee0:	2200      	movs	r2, #0
 8102ee2:	601a      	str	r2, [r3, #0]
 8102ee4:	605a      	str	r2, [r3, #4]
 8102ee6:	609a      	str	r2, [r3, #8]
 8102ee8:	60da      	str	r2, [r3, #12]
 8102eea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8102eec:	f107 0310 	add.w	r3, r7, #16
 8102ef0:	22c8      	movs	r2, #200	@ 0xc8
 8102ef2:	2100      	movs	r1, #0
 8102ef4:	4618      	mov	r0, r3
 8102ef6:	f020 ffd1 	bl	8123e9c <memset>
  if(hi2c->Instance==I2C4)
 8102efa:	687b      	ldr	r3, [r7, #4]
 8102efc:	681b      	ldr	r3, [r3, #0]
 8102efe:	4a27      	ldr	r2, [pc, #156]	@ (8102f9c <HAL_I2C_MspInit+0xc8>)
 8102f00:	4293      	cmp	r3, r2
 8102f02:	d146      	bne.n	8102f92 <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8102f04:	f04f 0210 	mov.w	r2, #16
 8102f08:	f04f 0300 	mov.w	r3, #0
 8102f0c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 8102f10:	2300      	movs	r3, #0
 8102f12:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8102f16:	f107 0310 	add.w	r3, r7, #16
 8102f1a:	4618      	mov	r0, r3
 8102f1c:	f00c fa00 	bl	810f320 <HAL_RCCEx_PeriphCLKConfig>
 8102f20:	4603      	mov	r3, r0
 8102f22:	2b00      	cmp	r3, #0
 8102f24:	d001      	beq.n	8102f2a <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8102f26:	f7fe fc11 	bl	810174c <Error_Handler>
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8102f2a:	4b1d      	ldr	r3, [pc, #116]	@ (8102fa0 <HAL_I2C_MspInit+0xcc>)
 8102f2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8102f30:	4a1b      	ldr	r2, [pc, #108]	@ (8102fa0 <HAL_I2C_MspInit+0xcc>)
 8102f32:	f043 0308 	orr.w	r3, r3, #8
 8102f36:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8102f3a:	4b19      	ldr	r3, [pc, #100]	@ (8102fa0 <HAL_I2C_MspInit+0xcc>)
 8102f3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8102f40:	f003 0308 	and.w	r3, r3, #8
 8102f44:	60fb      	str	r3, [r7, #12]
 8102f46:	68fb      	ldr	r3, [r7, #12]
    /**I2C4 GPIO Configuration
    PD12     ------> I2C4_SCL
    PD13     ------> I2C4_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8102f48:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8102f4c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8102f50:	2312      	movs	r3, #18
 8102f52:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8102f56:	2300      	movs	r3, #0
 8102f58:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8102f5c:	2300      	movs	r3, #0
 8102f5e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8102f62:	2304      	movs	r3, #4
 8102f64:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8102f68:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8102f6c:	4619      	mov	r1, r3
 8102f6e:	480d      	ldr	r0, [pc, #52]	@ (8102fa4 <HAL_I2C_MspInit+0xd0>)
 8102f70:	f00a ff20 	bl	810ddb4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 8102f74:	4b0a      	ldr	r3, [pc, #40]	@ (8102fa0 <HAL_I2C_MspInit+0xcc>)
 8102f76:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8102f7a:	4a09      	ldr	r2, [pc, #36]	@ (8102fa0 <HAL_I2C_MspInit+0xcc>)
 8102f7c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8102f80:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8102f84:	4b06      	ldr	r3, [pc, #24]	@ (8102fa0 <HAL_I2C_MspInit+0xcc>)
 8102f86:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8102f8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8102f8e:	60bb      	str	r3, [r7, #8]
 8102f90:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C4_MspInit 1 */

  }

}
 8102f92:	bf00      	nop
 8102f94:	37f0      	adds	r7, #240	@ 0xf0
 8102f96:	46bd      	mov	sp, r7
 8102f98:	bd80      	pop	{r7, pc}
 8102f9a:	bf00      	nop
 8102f9c:	58001c00 	.word	0x58001c00
 8102fa0:	58024400 	.word	0x58024400
 8102fa4:	58020c00 	.word	0x58020c00

08102fa8 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8102fa8:	b580      	push	{r7, lr}
 8102faa:	b082      	sub	sp, #8
 8102fac:	af00      	add	r7, sp, #0
 8102fae:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C4)
 8102fb0:	687b      	ldr	r3, [r7, #4]
 8102fb2:	681b      	ldr	r3, [r3, #0]
 8102fb4:	4a0c      	ldr	r2, [pc, #48]	@ (8102fe8 <HAL_I2C_MspDeInit+0x40>)
 8102fb6:	4293      	cmp	r3, r2
 8102fb8:	d111      	bne.n	8102fde <HAL_I2C_MspDeInit+0x36>
  {
  /* USER CODE BEGIN I2C4_MspDeInit 0 */

  /* USER CODE END I2C4_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C4_CLK_DISABLE();
 8102fba:	4b0c      	ldr	r3, [pc, #48]	@ (8102fec <HAL_I2C_MspDeInit+0x44>)
 8102fbc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8102fc0:	4a0a      	ldr	r2, [pc, #40]	@ (8102fec <HAL_I2C_MspDeInit+0x44>)
 8102fc2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8102fc6:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4

    /**I2C4 GPIO Configuration
    PD12     ------> I2C4_SCL
    PD13     ------> I2C4_SDA
    */
    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_12);
 8102fca:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8102fce:	4808      	ldr	r0, [pc, #32]	@ (8102ff0 <HAL_I2C_MspDeInit+0x48>)
 8102fd0:	f00b f8a0 	bl	810e114 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_13);
 8102fd4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8102fd8:	4805      	ldr	r0, [pc, #20]	@ (8102ff0 <HAL_I2C_MspDeInit+0x48>)
 8102fda:	f00b f89b 	bl	810e114 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C4_MspDeInit 1 */

  /* USER CODE END I2C4_MspDeInit 1 */
  }

}
 8102fde:	bf00      	nop
 8102fe0:	3708      	adds	r7, #8
 8102fe2:	46bd      	mov	sp, r7
 8102fe4:	bd80      	pop	{r7, pc}
 8102fe6:	bf00      	nop
 8102fe8:	58001c00 	.word	0x58001c00
 8102fec:	58024400 	.word	0x58024400
 8102ff0:	58020c00 	.word	0x58020c00

08102ff4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8102ff4:	b580      	push	{r7, lr}
 8102ff6:	b0bc      	sub	sp, #240	@ 0xf0
 8102ff8:	af00      	add	r7, sp, #0
 8102ffa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8102ffc:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8103000:	2200      	movs	r2, #0
 8103002:	601a      	str	r2, [r3, #0]
 8103004:	605a      	str	r2, [r3, #4]
 8103006:	609a      	str	r2, [r3, #8]
 8103008:	60da      	str	r2, [r3, #12]
 810300a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 810300c:	f107 0310 	add.w	r3, r7, #16
 8103010:	22c8      	movs	r2, #200	@ 0xc8
 8103012:	2100      	movs	r1, #0
 8103014:	4618      	mov	r0, r3
 8103016:	f020 ff41 	bl	8123e9c <memset>
  if(huart->Instance==USART1)
 810301a:	687b      	ldr	r3, [r7, #4]
 810301c:	681b      	ldr	r3, [r3, #0]
 810301e:	4a27      	ldr	r2, [pc, #156]	@ (81030bc <HAL_UART_MspInit+0xc8>)
 8103020:	4293      	cmp	r3, r2
 8103022:	d146      	bne.n	81030b2 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8103024:	f04f 0201 	mov.w	r2, #1
 8103028:	f04f 0300 	mov.w	r3, #0
 810302c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8103030:	2300      	movs	r3, #0
 8103032:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8103036:	f107 0310 	add.w	r3, r7, #16
 810303a:	4618      	mov	r0, r3
 810303c:	f00c f970 	bl	810f320 <HAL_RCCEx_PeriphCLKConfig>
 8103040:	4603      	mov	r3, r0
 8103042:	2b00      	cmp	r3, #0
 8103044:	d001      	beq.n	810304a <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8103046:	f7fe fb81 	bl	810174c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 810304a:	4b1d      	ldr	r3, [pc, #116]	@ (81030c0 <HAL_UART_MspInit+0xcc>)
 810304c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8103050:	4a1b      	ldr	r2, [pc, #108]	@ (81030c0 <HAL_UART_MspInit+0xcc>)
 8103052:	f043 0310 	orr.w	r3, r3, #16
 8103056:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 810305a:	4b19      	ldr	r3, [pc, #100]	@ (81030c0 <HAL_UART_MspInit+0xcc>)
 810305c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8103060:	f003 0310 	and.w	r3, r3, #16
 8103064:	60fb      	str	r3, [r7, #12]
 8103066:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8103068:	4b15      	ldr	r3, [pc, #84]	@ (81030c0 <HAL_UART_MspInit+0xcc>)
 810306a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810306e:	4a14      	ldr	r2, [pc, #80]	@ (81030c0 <HAL_UART_MspInit+0xcc>)
 8103070:	f043 0301 	orr.w	r3, r3, #1
 8103074:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8103078:	4b11      	ldr	r3, [pc, #68]	@ (81030c0 <HAL_UART_MspInit+0xcc>)
 810307a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810307e:	f003 0301 	and.w	r3, r3, #1
 8103082:	60bb      	str	r3, [r7, #8]
 8103084:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
 8103086:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 810308a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 810308e:	2302      	movs	r3, #2
 8103090:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8103094:	2300      	movs	r3, #0
 8103096:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 810309a:	2300      	movs	r3, #0
 810309c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 81030a0:	2307      	movs	r3, #7
 81030a2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 81030a6:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 81030aa:	4619      	mov	r1, r3
 81030ac:	4805      	ldr	r0, [pc, #20]	@ (81030c4 <HAL_UART_MspInit+0xd0>)
 81030ae:	f00a fe81 	bl	810ddb4 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 81030b2:	bf00      	nop
 81030b4:	37f0      	adds	r7, #240	@ 0xf0
 81030b6:	46bd      	mov	sp, r7
 81030b8:	bd80      	pop	{r7, pc}
 81030ba:	bf00      	nop
 81030bc:	40011000 	.word	0x40011000
 81030c0:	58024400 	.word	0x58024400
 81030c4:	58020000 	.word	0x58020000

081030c8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 81030c8:	b580      	push	{r7, lr}
 81030ca:	b090      	sub	sp, #64	@ 0x40
 81030cc:	af00      	add	r7, sp, #0
 81030ce:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 81030d0:	687b      	ldr	r3, [r7, #4]
 81030d2:	2b0f      	cmp	r3, #15
 81030d4:	d827      	bhi.n	8103126 <HAL_InitTick+0x5e>
   {
     HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 81030d6:	2200      	movs	r2, #0
 81030d8:	6879      	ldr	r1, [r7, #4]
 81030da:	2036      	movs	r0, #54	@ 0x36
 81030dc:	f009 f8b0 	bl	810c240 <HAL_NVIC_SetPriority>

     /* Enable the TIM6 global Interrupt */
     HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 81030e0:	2036      	movs	r0, #54	@ 0x36
 81030e2:	f009 f8c7 	bl	810c274 <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 81030e6:	4a29      	ldr	r2, [pc, #164]	@ (810318c <HAL_InitTick+0xc4>)
 81030e8:	687b      	ldr	r3, [r7, #4]
 81030ea:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 81030ec:	4b28      	ldr	r3, [pc, #160]	@ (8103190 <HAL_InitTick+0xc8>)
 81030ee:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 81030f2:	4a27      	ldr	r2, [pc, #156]	@ (8103190 <HAL_InitTick+0xc8>)
 81030f4:	f043 0310 	orr.w	r3, r3, #16
 81030f8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 81030fc:	4b24      	ldr	r3, [pc, #144]	@ (8103190 <HAL_InitTick+0xc8>)
 81030fe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8103102:	f003 0310 	and.w	r3, r3, #16
 8103106:	60fb      	str	r3, [r7, #12]
 8103108:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 810310a:	f107 0210 	add.w	r2, r7, #16
 810310e:	f107 0314 	add.w	r3, r7, #20
 8103112:	4611      	mov	r1, r2
 8103114:	4618      	mov	r0, r3
 8103116:	f00c f8c1 	bl	810f29c <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 810311a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810311c:	63bb      	str	r3, [r7, #56]	@ 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 810311e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8103120:	2b00      	cmp	r3, #0
 8103122:	d106      	bne.n	8103132 <HAL_InitTick+0x6a>
 8103124:	e001      	b.n	810312a <HAL_InitTick+0x62>
    return HAL_ERROR;
 8103126:	2301      	movs	r3, #1
 8103128:	e02b      	b.n	8103182 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 810312a:	f00c f88b 	bl	810f244 <HAL_RCC_GetPCLK1Freq>
 810312e:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8103130:	e004      	b.n	810313c <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8103132:	f00c f887 	bl	810f244 <HAL_RCC_GetPCLK1Freq>
 8103136:	4603      	mov	r3, r0
 8103138:	005b      	lsls	r3, r3, #1
 810313a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 810313c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810313e:	4a15      	ldr	r2, [pc, #84]	@ (8103194 <HAL_InitTick+0xcc>)
 8103140:	fba2 2303 	umull	r2, r3, r2, r3
 8103144:	0c9b      	lsrs	r3, r3, #18
 8103146:	3b01      	subs	r3, #1
 8103148:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 810314a:	4b13      	ldr	r3, [pc, #76]	@ (8103198 <HAL_InitTick+0xd0>)
 810314c:	4a13      	ldr	r2, [pc, #76]	@ (810319c <HAL_InitTick+0xd4>)
 810314e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8103150:	4b11      	ldr	r3, [pc, #68]	@ (8103198 <HAL_InitTick+0xd0>)
 8103152:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8103156:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8103158:	4a0f      	ldr	r2, [pc, #60]	@ (8103198 <HAL_InitTick+0xd0>)
 810315a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810315c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 810315e:	4b0e      	ldr	r3, [pc, #56]	@ (8103198 <HAL_InitTick+0xd0>)
 8103160:	2200      	movs	r2, #0
 8103162:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8103164:	4b0c      	ldr	r3, [pc, #48]	@ (8103198 <HAL_InitTick+0xd0>)
 8103166:	2200      	movs	r2, #0
 8103168:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 810316a:	480b      	ldr	r0, [pc, #44]	@ (8103198 <HAL_InitTick+0xd0>)
 810316c:	f00d ff44 	bl	8110ff8 <HAL_TIM_Base_Init>
 8103170:	4603      	mov	r3, r0
 8103172:	2b00      	cmp	r3, #0
 8103174:	d104      	bne.n	8103180 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8103176:	4808      	ldr	r0, [pc, #32]	@ (8103198 <HAL_InitTick+0xd0>)
 8103178:	f00d ffa0 	bl	81110bc <HAL_TIM_Base_Start_IT>
 810317c:	4603      	mov	r3, r0
 810317e:	e000      	b.n	8103182 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8103180:	2301      	movs	r3, #1
}
 8103182:	4618      	mov	r0, r3
 8103184:	3740      	adds	r7, #64	@ 0x40
 8103186:	46bd      	mov	sp, r7
 8103188:	bd80      	pop	{r7, pc}
 810318a:	bf00      	nop
 810318c:	1000001c 	.word	0x1000001c
 8103190:	58024400 	.word	0x58024400
 8103194:	431bde83 	.word	0x431bde83
 8103198:	100001dc 	.word	0x100001dc
 810319c:	40001000 	.word	0x40001000

081031a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 81031a0:	b480      	push	{r7}
 81031a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 81031a4:	bf00      	nop
 81031a6:	e7fd      	b.n	81031a4 <NMI_Handler+0x4>

081031a8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 81031a8:	b480      	push	{r7}
 81031aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 81031ac:	bf00      	nop
 81031ae:	e7fd      	b.n	81031ac <HardFault_Handler+0x4>

081031b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 81031b0:	b480      	push	{r7}
 81031b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 81031b4:	bf00      	nop
 81031b6:	e7fd      	b.n	81031b4 <MemManage_Handler+0x4>

081031b8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 81031b8:	b480      	push	{r7}
 81031ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 81031bc:	bf00      	nop
 81031be:	e7fd      	b.n	81031bc <BusFault_Handler+0x4>

081031c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 81031c0:	b480      	push	{r7}
 81031c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 81031c4:	bf00      	nop
 81031c6:	e7fd      	b.n	81031c4 <UsageFault_Handler+0x4>

081031c8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 81031c8:	b480      	push	{r7}
 81031ca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 81031cc:	bf00      	nop
 81031ce:	46bd      	mov	sp, r7
 81031d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81031d4:	4770      	bx	lr
	...

081031d8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 81031d8:	b580      	push	{r7, lr}
 81031da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 81031dc:	4802      	ldr	r0, [pc, #8]	@ (81031e8 <TIM6_DAC_IRQHandler+0x10>)
 81031de:	f00d ffe5 	bl	81111ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 81031e2:	bf00      	nop
 81031e4:	bd80      	pop	{r7, pc}
 81031e6:	bf00      	nop
 81031e8:	100001dc 	.word	0x100001dc

081031ec <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 81031ec:	b580      	push	{r7, lr}
 81031ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 81031f0:	4802      	ldr	r0, [pc, #8]	@ (81031fc <ETH_IRQHandler+0x10>)
 81031f2:	f009 fc37 	bl	810ca64 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 81031f6:	bf00      	nop
 81031f8:	bd80      	pop	{r7, pc}
 81031fa:	bf00      	nop
 81031fc:	10000318 	.word	0x10000318

08103200 <ETH_WKUP_IRQHandler>:

/**
  * @brief This function handles Ethernet wake-up interrupt through EXTI line 86.
  */
void ETH_WKUP_IRQHandler(void)
{
 8103200:	b580      	push	{r7, lr}
 8103202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_WKUP_IRQn 0 */

  /* USER CODE END ETH_WKUP_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8103204:	4802      	ldr	r0, [pc, #8]	@ (8103210 <ETH_WKUP_IRQHandler+0x10>)
 8103206:	f009 fc2d 	bl	810ca64 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_WKUP_IRQn 1 */

  /* USER CODE END ETH_WKUP_IRQn 1 */
}
 810320a:	bf00      	nop
 810320c:	bd80      	pop	{r7, pc}
 810320e:	bf00      	nop
 8103210:	10000318 	.word	0x10000318

08103214 <HSEM2_IRQHandler>:

/**
  * @brief This function handles HSEM2 global interrupt.
  */
void HSEM2_IRQHandler(void)
{
 8103214:	b580      	push	{r7, lr}
 8103216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM2_IRQn 0 */

  /* USER CODE END HSEM2_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8103218:	f00b f8d0 	bl	810e3bc <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM2_IRQn 1 */

  /* USER CODE END HSEM2_IRQn 1 */
}
 810321c:	bf00      	nop
 810321e:	bd80      	pop	{r7, pc}

08103220 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8103220:	b480      	push	{r7}
 8103222:	af00      	add	r7, sp, #0
	return 1;
 8103224:	2301      	movs	r3, #1
}
 8103226:	4618      	mov	r0, r3
 8103228:	46bd      	mov	sp, r7
 810322a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810322e:	4770      	bx	lr

08103230 <_kill>:

int _kill(int pid, int sig)
{
 8103230:	b480      	push	{r7}
 8103232:	b083      	sub	sp, #12
 8103234:	af00      	add	r7, sp, #0
 8103236:	6078      	str	r0, [r7, #4]
 8103238:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 810323a:	4b05      	ldr	r3, [pc, #20]	@ (8103250 <_kill+0x20>)
 810323c:	2216      	movs	r2, #22
 810323e:	601a      	str	r2, [r3, #0]
	return -1;
 8103240:	f04f 33ff 	mov.w	r3, #4294967295
}
 8103244:	4618      	mov	r0, r3
 8103246:	370c      	adds	r7, #12
 8103248:	46bd      	mov	sp, r7
 810324a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810324e:	4770      	bx	lr
 8103250:	1000e650 	.word	0x1000e650

08103254 <_exit>:

void _exit (int status)
{
 8103254:	b580      	push	{r7, lr}
 8103256:	b082      	sub	sp, #8
 8103258:	af00      	add	r7, sp, #0
 810325a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 810325c:	f04f 31ff 	mov.w	r1, #4294967295
 8103260:	6878      	ldr	r0, [r7, #4]
 8103262:	f7ff ffe5 	bl	8103230 <_kill>
	while (1) {}		/* Make sure we hang here */
 8103266:	bf00      	nop
 8103268:	e7fd      	b.n	8103266 <_exit+0x12>

0810326a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 810326a:	b580      	push	{r7, lr}
 810326c:	b086      	sub	sp, #24
 810326e:	af00      	add	r7, sp, #0
 8103270:	60f8      	str	r0, [r7, #12]
 8103272:	60b9      	str	r1, [r7, #8]
 8103274:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8103276:	2300      	movs	r3, #0
 8103278:	617b      	str	r3, [r7, #20]
 810327a:	e00a      	b.n	8103292 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 810327c:	f3af 8000 	nop.w
 8103280:	4601      	mov	r1, r0
 8103282:	68bb      	ldr	r3, [r7, #8]
 8103284:	1c5a      	adds	r2, r3, #1
 8103286:	60ba      	str	r2, [r7, #8]
 8103288:	b2ca      	uxtb	r2, r1
 810328a:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 810328c:	697b      	ldr	r3, [r7, #20]
 810328e:	3301      	adds	r3, #1
 8103290:	617b      	str	r3, [r7, #20]
 8103292:	697a      	ldr	r2, [r7, #20]
 8103294:	687b      	ldr	r3, [r7, #4]
 8103296:	429a      	cmp	r2, r3
 8103298:	dbf0      	blt.n	810327c <_read+0x12>
	}

return len;
 810329a:	687b      	ldr	r3, [r7, #4]
}
 810329c:	4618      	mov	r0, r3
 810329e:	3718      	adds	r7, #24
 81032a0:	46bd      	mov	sp, r7
 81032a2:	bd80      	pop	{r7, pc}

081032a4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 81032a4:	b580      	push	{r7, lr}
 81032a6:	b086      	sub	sp, #24
 81032a8:	af00      	add	r7, sp, #0
 81032aa:	60f8      	str	r0, [r7, #12]
 81032ac:	60b9      	str	r1, [r7, #8]
 81032ae:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 81032b0:	2300      	movs	r3, #0
 81032b2:	617b      	str	r3, [r7, #20]
 81032b4:	e009      	b.n	81032ca <_write+0x26>
	{
		__io_putchar(*ptr++);
 81032b6:	68bb      	ldr	r3, [r7, #8]
 81032b8:	1c5a      	adds	r2, r3, #1
 81032ba:	60ba      	str	r2, [r7, #8]
 81032bc:	781b      	ldrb	r3, [r3, #0]
 81032be:	4618      	mov	r0, r3
 81032c0:	f7fe fa20 	bl	8101704 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 81032c4:	697b      	ldr	r3, [r7, #20]
 81032c6:	3301      	adds	r3, #1
 81032c8:	617b      	str	r3, [r7, #20]
 81032ca:	697a      	ldr	r2, [r7, #20]
 81032cc:	687b      	ldr	r3, [r7, #4]
 81032ce:	429a      	cmp	r2, r3
 81032d0:	dbf1      	blt.n	81032b6 <_write+0x12>
	}
	return len;
 81032d2:	687b      	ldr	r3, [r7, #4]
}
 81032d4:	4618      	mov	r0, r3
 81032d6:	3718      	adds	r7, #24
 81032d8:	46bd      	mov	sp, r7
 81032da:	bd80      	pop	{r7, pc}

081032dc <_close>:

int _close(int file)
{
 81032dc:	b480      	push	{r7}
 81032de:	b083      	sub	sp, #12
 81032e0:	af00      	add	r7, sp, #0
 81032e2:	6078      	str	r0, [r7, #4]
	return -1;
 81032e4:	f04f 33ff 	mov.w	r3, #4294967295
}
 81032e8:	4618      	mov	r0, r3
 81032ea:	370c      	adds	r7, #12
 81032ec:	46bd      	mov	sp, r7
 81032ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 81032f2:	4770      	bx	lr

081032f4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 81032f4:	b480      	push	{r7}
 81032f6:	b083      	sub	sp, #12
 81032f8:	af00      	add	r7, sp, #0
 81032fa:	6078      	str	r0, [r7, #4]
 81032fc:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 81032fe:	683b      	ldr	r3, [r7, #0]
 8103300:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8103304:	605a      	str	r2, [r3, #4]
	return 0;
 8103306:	2300      	movs	r3, #0
}
 8103308:	4618      	mov	r0, r3
 810330a:	370c      	adds	r7, #12
 810330c:	46bd      	mov	sp, r7
 810330e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103312:	4770      	bx	lr

08103314 <_isatty>:

int _isatty(int file)
{
 8103314:	b480      	push	{r7}
 8103316:	b083      	sub	sp, #12
 8103318:	af00      	add	r7, sp, #0
 810331a:	6078      	str	r0, [r7, #4]
	return 1;
 810331c:	2301      	movs	r3, #1
}
 810331e:	4618      	mov	r0, r3
 8103320:	370c      	adds	r7, #12
 8103322:	46bd      	mov	sp, r7
 8103324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103328:	4770      	bx	lr

0810332a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 810332a:	b480      	push	{r7}
 810332c:	b085      	sub	sp, #20
 810332e:	af00      	add	r7, sp, #0
 8103330:	60f8      	str	r0, [r7, #12]
 8103332:	60b9      	str	r1, [r7, #8]
 8103334:	607a      	str	r2, [r7, #4]
	return 0;
 8103336:	2300      	movs	r3, #0
}
 8103338:	4618      	mov	r0, r3
 810333a:	3714      	adds	r7, #20
 810333c:	46bd      	mov	sp, r7
 810333e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103342:	4770      	bx	lr

08103344 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8103344:	b480      	push	{r7}
 8103346:	b087      	sub	sp, #28
 8103348:	af00      	add	r7, sp, #0
 810334a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 810334c:	4a14      	ldr	r2, [pc, #80]	@ (81033a0 <_sbrk+0x5c>)
 810334e:	4b15      	ldr	r3, [pc, #84]	@ (81033a4 <_sbrk+0x60>)
 8103350:	1ad3      	subs	r3, r2, r3
 8103352:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8103354:	697b      	ldr	r3, [r7, #20]
 8103356:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8103358:	4b13      	ldr	r3, [pc, #76]	@ (81033a8 <_sbrk+0x64>)
 810335a:	681b      	ldr	r3, [r3, #0]
 810335c:	2b00      	cmp	r3, #0
 810335e:	d102      	bne.n	8103366 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8103360:	4b11      	ldr	r3, [pc, #68]	@ (81033a8 <_sbrk+0x64>)
 8103362:	4a12      	ldr	r2, [pc, #72]	@ (81033ac <_sbrk+0x68>)
 8103364:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8103366:	4b10      	ldr	r3, [pc, #64]	@ (81033a8 <_sbrk+0x64>)
 8103368:	681a      	ldr	r2, [r3, #0]
 810336a:	687b      	ldr	r3, [r7, #4]
 810336c:	4413      	add	r3, r2
 810336e:	693a      	ldr	r2, [r7, #16]
 8103370:	429a      	cmp	r2, r3
 8103372:	d205      	bcs.n	8103380 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8103374:	4b0e      	ldr	r3, [pc, #56]	@ (81033b0 <_sbrk+0x6c>)
 8103376:	220c      	movs	r2, #12
 8103378:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 810337a:	f04f 33ff 	mov.w	r3, #4294967295
 810337e:	e009      	b.n	8103394 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8103380:	4b09      	ldr	r3, [pc, #36]	@ (81033a8 <_sbrk+0x64>)
 8103382:	681b      	ldr	r3, [r3, #0]
 8103384:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8103386:	4b08      	ldr	r3, [pc, #32]	@ (81033a8 <_sbrk+0x64>)
 8103388:	681a      	ldr	r2, [r3, #0]
 810338a:	687b      	ldr	r3, [r7, #4]
 810338c:	4413      	add	r3, r2
 810338e:	4a06      	ldr	r2, [pc, #24]	@ (81033a8 <_sbrk+0x64>)
 8103390:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8103392:	68fb      	ldr	r3, [r7, #12]
}
 8103394:	4618      	mov	r0, r3
 8103396:	371c      	adds	r7, #28
 8103398:	46bd      	mov	sp, r7
 810339a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810339e:	4770      	bx	lr
 81033a0:	10048000 	.word	0x10048000
 81033a4:	00001000 	.word	0x00001000
 81033a8:	10000228 	.word	0x10000228
 81033ac:	1000e658 	.word	0x1000e658
 81033b0:	1000e650 	.word	0x1000e650

081033b4 <_ZSt23__is_constant_evaluatedv>:
  {
 81033b4:	b480      	push	{r7}
 81033b6:	af00      	add	r7, sp, #0
    return __builtin_is_constant_evaluated();
 81033b8:	2300      	movs	r3, #0
  }
 81033ba:	4618      	mov	r0, r3
 81033bc:	46bd      	mov	sp, r7
 81033be:	f85d 7b04 	ldr.w	r7, [sp], #4
 81033c2:	4770      	bx	lr

081033c4 <_ZN7APIDoIP18prepareDataRequestEPh11EECUAddress7EUDSDID>:
#include "APIDoIP.h"
#include "Logger.h"

void APIDoIP::prepareDataRequest(uint8_t preparedPayload[], EECUAddress targetEcuAddr, EUDSDID did)
{
 81033c4:	b480      	push	{r7}
 81033c6:	b083      	sub	sp, #12
 81033c8:	af00      	add	r7, sp, #0
 81033ca:	6078      	str	r0, [r7, #4]
 81033cc:	460b      	mov	r3, r1
 81033ce:	70fb      	strb	r3, [r7, #3]
 81033d0:	4613      	mov	r3, r2
 81033d2:	803b      	strh	r3, [r7, #0]
    // data len
    preparedPayload[0] = 0x00;
 81033d4:	687b      	ldr	r3, [r7, #4]
 81033d6:	2200      	movs	r2, #0
 81033d8:	701a      	strb	r2, [r3, #0]
    preparedPayload[1] = 0x00;
 81033da:	687b      	ldr	r3, [r7, #4]
 81033dc:	3301      	adds	r3, #1
 81033de:	2200      	movs	r2, #0
 81033e0:	701a      	strb	r2, [r3, #0]
    preparedPayload[2] = 0x00;
 81033e2:	687b      	ldr	r3, [r7, #4]
 81033e4:	3302      	adds	r3, #2
 81033e6:	2200      	movs	r2, #0
 81033e8:	701a      	strb	r2, [r3, #0]
    preparedPayload[3] = dataReqDataSize;
 81033ea:	687b      	ldr	r3, [r7, #4]
 81033ec:	3303      	adds	r3, #3
 81033ee:	2205      	movs	r2, #5
 81033f0:	701a      	strb	r2, [r3, #0]

    // "checksum"
    preparedPayload[4] = 0x00;
 81033f2:	687b      	ldr	r3, [r7, #4]
 81033f4:	3304      	adds	r3, #4
 81033f6:	2200      	movs	r2, #0
 81033f8:	701a      	strb	r2, [r3, #0]
    preparedPayload[5] = 0x01;
 81033fa:	687b      	ldr	r3, [r7, #4]
 81033fc:	3305      	adds	r3, #5
 81033fe:	2201      	movs	r2, #1
 8103400:	701a      	strb	r2, [r3, #0]

    // addresses
    preparedPayload[6] = DIAGNOSTIC_TOOL_INTERNAL_ADDR;
 8103402:	687b      	ldr	r3, [r7, #4]
 8103404:	3306      	adds	r3, #6
 8103406:	22f4      	movs	r2, #244	@ 0xf4
 8103408:	701a      	strb	r2, [r3, #0]
    preparedPayload[7] = static_cast<uint8_t>(targetEcuAddr);
 810340a:	687b      	ldr	r3, [r7, #4]
 810340c:	3307      	adds	r3, #7
 810340e:	78fa      	ldrb	r2, [r7, #3]
 8103410:	701a      	strb	r2, [r3, #0]

    // SID
    preparedPayload[8] = static_cast<uint8_t>(EUDSRequestSID::READ_DATA_BY_IDENTIFIER);
 8103412:	687b      	ldr	r3, [r7, #4]
 8103414:	3308      	adds	r3, #8
 8103416:	2222      	movs	r2, #34	@ 0x22
 8103418:	701a      	strb	r2, [r3, #0]

    // DID
    preparedPayload[9] = static_cast<uint8_t>((static_cast<uint16_t>(did) & 0xFF00) >> 8);
 810341a:	883b      	ldrh	r3, [r7, #0]
 810341c:	0a1b      	lsrs	r3, r3, #8
 810341e:	b29a      	uxth	r2, r3
 8103420:	687b      	ldr	r3, [r7, #4]
 8103422:	3309      	adds	r3, #9
 8103424:	b2d2      	uxtb	r2, r2
 8103426:	701a      	strb	r2, [r3, #0]
    preparedPayload[10] = static_cast<uint8_t>(static_cast<uint16_t>(did) & 0x00FF);
 8103428:	687b      	ldr	r3, [r7, #4]
 810342a:	330a      	adds	r3, #10
 810342c:	883a      	ldrh	r2, [r7, #0]
 810342e:	b2d2      	uxtb	r2, r2
 8103430:	701a      	strb	r2, [r3, #0]
}
 8103432:	bf00      	nop
 8103434:	370c      	adds	r7, #12
 8103436:	46bd      	mov	sp, r7
 8103438:	f85d 7b04 	ldr.w	r7, [sp], #4
 810343c:	4770      	bx	lr

0810343e <_ZN7APIDoIP33prepareFirstRequestForDynamicDataEPh11EECUAddress>:

void APIDoIP::prepareFirstRequestForDynamicData(uint8_t preparedPayload[], EECUAddress targetEcuAddr)
{
 810343e:	b480      	push	{r7}
 8103440:	b083      	sub	sp, #12
 8103442:	af00      	add	r7, sp, #0
 8103444:	6078      	str	r0, [r7, #4]
 8103446:	460b      	mov	r3, r1
 8103448:	70fb      	strb	r3, [r7, #3]
    // data len
    preparedPayload[0] = 0x00;
 810344a:	687b      	ldr	r3, [r7, #4]
 810344c:	2200      	movs	r2, #0
 810344e:	701a      	strb	r2, [r3, #0]
    preparedPayload[1] = 0x00;
 8103450:	687b      	ldr	r3, [r7, #4]
 8103452:	3301      	adds	r3, #1
 8103454:	2200      	movs	r2, #0
 8103456:	701a      	strb	r2, [r3, #0]
    preparedPayload[2] = 0x00;
 8103458:	687b      	ldr	r3, [r7, #4]
 810345a:	3302      	adds	r3, #2
 810345c:	2200      	movs	r2, #0
 810345e:	701a      	strb	r2, [r3, #0]
    preparedPayload[3] = firstReqDynDataSize;
 8103460:	687b      	ldr	r3, [r7, #4]
 8103462:	3303      	adds	r3, #3
 8103464:	2206      	movs	r2, #6
 8103466:	701a      	strb	r2, [r3, #0]

    // "checksum"
    preparedPayload[4] = 0x00;
 8103468:	687b      	ldr	r3, [r7, #4]
 810346a:	3304      	adds	r3, #4
 810346c:	2200      	movs	r2, #0
 810346e:	701a      	strb	r2, [r3, #0]
    preparedPayload[5] = 0x01;
 8103470:	687b      	ldr	r3, [r7, #4]
 8103472:	3305      	adds	r3, #5
 8103474:	2201      	movs	r2, #1
 8103476:	701a      	strb	r2, [r3, #0]

    // addresses
    preparedPayload[6] = DIAGNOSTIC_TOOL_INTERNAL_ADDR;
 8103478:	687b      	ldr	r3, [r7, #4]
 810347a:	3306      	adds	r3, #6
 810347c:	22f4      	movs	r2, #244	@ 0xf4
 810347e:	701a      	strb	r2, [r3, #0]
    preparedPayload[7] = static_cast<uint8_t>(targetEcuAddr);
 8103480:	687b      	ldr	r3, [r7, #4]
 8103482:	3307      	adds	r3, #7
 8103484:	78fa      	ldrb	r2, [r7, #3]
 8103486:	701a      	strb	r2, [r3, #0]

    // SID
    preparedPayload[8] = static_cast<uint8_t>(EUDSRequestSID::DYNAMICALLY_DEFINE_DATA_IDENTIFIER);
 8103488:	687b      	ldr	r3, [r7, #4]
 810348a:	3308      	adds	r3, #8
 810348c:	222c      	movs	r2, #44	@ 0x2c
 810348e:	701a      	strb	r2, [r3, #0]
    // sub SID
    preparedPayload[9] = static_cast<uint8_t>(DynamicallyAssignDataSubSID::REQUEST_CLEAR);
 8103490:	687b      	ldr	r3, [r7, #4]
 8103492:	3309      	adds	r3, #9
 8103494:	2203      	movs	r2, #3
 8103496:	701a      	strb	r2, [r3, #0]

    // DID
    preparedPayload[10] = static_cast<uint8_t>((static_cast<uint16_t>(EUDSDID::DYNAMICALLY_DEFINED_DATA_IDENTIFIER_0) & 0xFF00) >> 8);
 8103498:	687b      	ldr	r3, [r7, #4]
 810349a:	330a      	adds	r3, #10
 810349c:	22f3      	movs	r2, #243	@ 0xf3
 810349e:	701a      	strb	r2, [r3, #0]
    preparedPayload[11] = static_cast<uint8_t>(static_cast<uint16_t>(EUDSDID::DYNAMICALLY_DEFINED_DATA_IDENTIFIER_0) & 0x00FF);
 81034a0:	687b      	ldr	r3, [r7, #4]
 81034a2:	330b      	adds	r3, #11
 81034a4:	2200      	movs	r2, #0
 81034a6:	701a      	strb	r2, [r3, #0]
}
 81034a8:	bf00      	nop
 81034aa:	370c      	adds	r7, #12
 81034ac:	46bd      	mov	sp, r7
 81034ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 81034b2:	4770      	bx	lr

081034b4 <_ZN7APIDoIP34prepareSecondRequestForDynamicDataEPh11EECUAddress34EDynamicDataIndentifierRequestCode>:

void APIDoIP::prepareSecondRequestForDynamicData(uint8_t preparedPayload[], EECUAddress targetEcuAddr, EDynamicDataIndentifierRequestCode ddirCode)
{
 81034b4:	b480      	push	{r7}
 81034b6:	b085      	sub	sp, #20
 81034b8:	af00      	add	r7, sp, #0
 81034ba:	60f8      	str	r0, [r7, #12]
 81034bc:	460b      	mov	r3, r1
 81034be:	607a      	str	r2, [r7, #4]
 81034c0:	72fb      	strb	r3, [r7, #11]
    // data len
    preparedPayload[0] = 0x00;
 81034c2:	68fb      	ldr	r3, [r7, #12]
 81034c4:	2200      	movs	r2, #0
 81034c6:	701a      	strb	r2, [r3, #0]
    preparedPayload[1] = 0x00;
 81034c8:	68fb      	ldr	r3, [r7, #12]
 81034ca:	3301      	adds	r3, #1
 81034cc:	2200      	movs	r2, #0
 81034ce:	701a      	strb	r2, [r3, #0]
    preparedPayload[2] = 0x00;
 81034d0:	68fb      	ldr	r3, [r7, #12]
 81034d2:	3302      	adds	r3, #2
 81034d4:	2200      	movs	r2, #0
 81034d6:	701a      	strb	r2, [r3, #0]
    preparedPayload[3] = secondReqDynDataSize;
 81034d8:	68fb      	ldr	r3, [r7, #12]
 81034da:	3303      	adds	r3, #3
 81034dc:	220a      	movs	r2, #10
 81034de:	701a      	strb	r2, [r3, #0]

    // "checksum"
    preparedPayload[4] = 0x00;
 81034e0:	68fb      	ldr	r3, [r7, #12]
 81034e2:	3304      	adds	r3, #4
 81034e4:	2200      	movs	r2, #0
 81034e6:	701a      	strb	r2, [r3, #0]
    preparedPayload[5] = 0x01;
 81034e8:	68fb      	ldr	r3, [r7, #12]
 81034ea:	3305      	adds	r3, #5
 81034ec:	2201      	movs	r2, #1
 81034ee:	701a      	strb	r2, [r3, #0]

    // addresses
    preparedPayload[6] = DIAGNOSTIC_TOOL_INTERNAL_ADDR;
 81034f0:	68fb      	ldr	r3, [r7, #12]
 81034f2:	3306      	adds	r3, #6
 81034f4:	22f4      	movs	r2, #244	@ 0xf4
 81034f6:	701a      	strb	r2, [r3, #0]
    preparedPayload[7] = static_cast<uint8_t>(targetEcuAddr);
 81034f8:	68fb      	ldr	r3, [r7, #12]
 81034fa:	3307      	adds	r3, #7
 81034fc:	7afa      	ldrb	r2, [r7, #11]
 81034fe:	701a      	strb	r2, [r3, #0]

    // SID
    preparedPayload[8] = static_cast<uint8_t>(EUDSRequestSID::DYNAMICALLY_DEFINE_DATA_IDENTIFIER);
 8103500:	68fb      	ldr	r3, [r7, #12]
 8103502:	3308      	adds	r3, #8
 8103504:	222c      	movs	r2, #44	@ 0x2c
 8103506:	701a      	strb	r2, [r3, #0]
    // sub SID
    preparedPayload[9] = static_cast<uint8_t>(DynamicallyAssignDataSubSID::REQUEST_ASSIGN);;
 8103508:	68fb      	ldr	r3, [r7, #12]
 810350a:	3309      	adds	r3, #9
 810350c:	2201      	movs	r2, #1
 810350e:	701a      	strb	r2, [r3, #0]

    // DID
    preparedPayload[10] = static_cast<uint8_t>((static_cast<uint16_t>(EUDSDID::DYNAMICALLY_DEFINED_DATA_IDENTIFIER_0) & 0xFF00) >> 8);
 8103510:	68fb      	ldr	r3, [r7, #12]
 8103512:	330a      	adds	r3, #10
 8103514:	22f3      	movs	r2, #243	@ 0xf3
 8103516:	701a      	strb	r2, [r3, #0]
    preparedPayload[11] = static_cast<uint8_t>(static_cast<uint16_t>(EUDSDID::DYNAMICALLY_DEFINED_DATA_IDENTIFIER_0) & 0x00FF);
 8103518:	68fb      	ldr	r3, [r7, #12]
 810351a:	330b      	adds	r3, #11
 810351c:	2200      	movs	r2, #0
 810351e:	701a      	strb	r2, [r3, #0]

    // Dynamic data identifier request code
    preparedPayload[12] = static_cast<uint8_t>((static_cast<uint32_t>(ddirCode) & 0xFF000000) >> 24);
 8103520:	687b      	ldr	r3, [r7, #4]
 8103522:	0e1a      	lsrs	r2, r3, #24
 8103524:	68fb      	ldr	r3, [r7, #12]
 8103526:	330c      	adds	r3, #12
 8103528:	b2d2      	uxtb	r2, r2
 810352a:	701a      	strb	r2, [r3, #0]
    preparedPayload[13] = static_cast<uint8_t>((static_cast<uint32_t>(ddirCode) & 0x00FF0000) >> 16);
 810352c:	687b      	ldr	r3, [r7, #4]
 810352e:	0c1a      	lsrs	r2, r3, #16
 8103530:	68fb      	ldr	r3, [r7, #12]
 8103532:	330d      	adds	r3, #13
 8103534:	b2d2      	uxtb	r2, r2
 8103536:	701a      	strb	r2, [r3, #0]
    preparedPayload[14] = static_cast<uint8_t>((static_cast<uint32_t>(ddirCode) & 0x0000FF00) >> 8);
 8103538:	687b      	ldr	r3, [r7, #4]
 810353a:	0a1a      	lsrs	r2, r3, #8
 810353c:	68fb      	ldr	r3, [r7, #12]
 810353e:	330e      	adds	r3, #14
 8103540:	b2d2      	uxtb	r2, r2
 8103542:	701a      	strb	r2, [r3, #0]
    preparedPayload[15] = static_cast<uint8_t>(static_cast<uint32_t>(ddirCode) & 0x000000FF);
 8103544:	68fb      	ldr	r3, [r7, #12]
 8103546:	330f      	adds	r3, #15
 8103548:	687a      	ldr	r2, [r7, #4]
 810354a:	b2d2      	uxtb	r2, r2
 810354c:	701a      	strb	r2, [r3, #0]
}
 810354e:	bf00      	nop
 8103550:	3714      	adds	r7, #20
 8103552:	46bd      	mov	sp, r7
 8103554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103558:	4770      	bx	lr
	...

0810355c <_ZN7APIDoIP23extractDataFromResponseEPKhjNS_12EDoIPRequestE>:

std::optional<SMessage> APIDoIP::extractDataFromResponse(const uint8_t dataPayload[], size_t size, EDoIPRequest dataType)
{
 810355c:	b5b0      	push	{r4, r5, r7, lr}
 810355e:	b08c      	sub	sp, #48	@ 0x30
 8103560:	af00      	add	r7, sp, #0
 8103562:	60f8      	str	r0, [r7, #12]
 8103564:	60b9      	str	r1, [r7, #8]
 8103566:	607a      	str	r2, [r7, #4]
 8103568:	70fb      	strb	r3, [r7, #3]
    bool sizeMismatch = false;
 810356a:	2300      	movs	r3, #0
 810356c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    SMessage msg;
    msg.event_sender = EVENT_CLIENT_ETHERNET_CONNECTION_MANAGER;
 8103570:	2303      	movs	r3, #3
 8103572:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    msg.event_receiver = EVENT_CLIENT_FRONTEND;
 8103576:	2300      	movs	r3, #0
 8103578:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29

    switch(dataType)
 810357c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8103580:	2b00      	cmp	r3, #0
 8103582:	d002      	beq.n	810358a <_ZN7APIDoIP23extractDataFromResponseEPKhjNS_12EDoIPRequestE+0x2e>
 8103584:	2b15      	cmp	r3, #21
 8103586:	d00d      	beq.n	81035a4 <_ZN7APIDoIP23extractDataFromResponseEPKhjNS_12EDoIPRequestE+0x48>
 8103588:	e022      	b.n	81035d0 <_ZN7APIDoIP23extractDataFromResponseEPKhjNS_12EDoIPRequestE+0x74>
    {
        case BATTERY_VOLTAGE:
        {
            if(size != 1)
 810358a:	687b      	ldr	r3, [r7, #4]
 810358c:	2b01      	cmp	r3, #1
 810358e:	d003      	beq.n	8103598 <_ZN7APIDoIP23extractDataFromResponseEPKhjNS_12EDoIPRequestE+0x3c>
            {
                sizeMismatch = true;
 8103590:	2301      	movs	r3, #1
 8103592:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            else
            {
                msg.event_type = EVENT_DATA_UPDATE_BATTERY_VOLTAGE;
                msg.message_data.battery_voltage = dataPayload[0];
            }
            break;
 8103596:	e020      	b.n	81035da <_ZN7APIDoIP23extractDataFromResponseEPKhjNS_12EDoIPRequestE+0x7e>
                msg.event_type = EVENT_DATA_UPDATE_BATTERY_VOLTAGE;
 8103598:	2300      	movs	r3, #0
 810359a:	743b      	strb	r3, [r7, #16]
                msg.message_data.battery_voltage = dataPayload[0];
 810359c:	68bb      	ldr	r3, [r7, #8]
 810359e:	781b      	ldrb	r3, [r3, #0]
 81035a0:	753b      	strb	r3, [r7, #20]
            break;
 81035a2:	e01a      	b.n	81035da <_ZN7APIDoIP23extractDataFromResponseEPKhjNS_12EDoIPRequestE+0x7e>
        }
        case RPM:
        {
            if(size != 2)
 81035a4:	687b      	ldr	r3, [r7, #4]
 81035a6:	2b02      	cmp	r3, #2
 81035a8:	d003      	beq.n	81035b2 <_ZN7APIDoIP23extractDataFromResponseEPKhjNS_12EDoIPRequestE+0x56>
            {
                sizeMismatch = true;
 81035aa:	2301      	movs	r3, #1
 81035ac:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            else
            {
                msg.event_type = EVENT_DATA_UPDATE_RPM;
                msg.message_data.rpm = (dataPayload[0] << 8) | dataPayload[1];
            }
            break;
 81035b0:	e013      	b.n	81035da <_ZN7APIDoIP23extractDataFromResponseEPKhjNS_12EDoIPRequestE+0x7e>
                msg.event_type = EVENT_DATA_UPDATE_RPM;
 81035b2:	2315      	movs	r3, #21
 81035b4:	743b      	strb	r3, [r7, #16]
                msg.message_data.rpm = (dataPayload[0] << 8) | dataPayload[1];
 81035b6:	68bb      	ldr	r3, [r7, #8]
 81035b8:	781b      	ldrb	r3, [r3, #0]
 81035ba:	021b      	lsls	r3, r3, #8
 81035bc:	b21a      	sxth	r2, r3
 81035be:	68bb      	ldr	r3, [r7, #8]
 81035c0:	3301      	adds	r3, #1
 81035c2:	781b      	ldrb	r3, [r3, #0]
 81035c4:	b21b      	sxth	r3, r3
 81035c6:	4313      	orrs	r3, r2
 81035c8:	b21b      	sxth	r3, r3
 81035ca:	b29b      	uxth	r3, r3
 81035cc:	82bb      	strh	r3, [r7, #20]
            break;
 81035ce:	e004      	b.n	81035da <_ZN7APIDoIP23extractDataFromResponseEPKhjNS_12EDoIPRequestE+0x7e>
        }
        default:
            // return, because if data was successfully read then we always need to send a connection event (and in this case we have not)
            return std::nullopt;
 81035d0:	4629      	mov	r1, r5
 81035d2:	68f8      	ldr	r0, [r7, #12]
 81035d4:	f000 f848 	bl	8103668 <_ZNSt8optionalI8SMessageEC1ESt9nullopt_t>
 81035d8:	e015      	b.n	8103606 <_ZN7APIDoIP23extractDataFromResponseEPKhjNS_12EDoIPRequestE+0xaa>
    }

    if(sizeMismatch)
 81035da:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 81035de:	2b00      	cmp	r3, #0
 81035e0:	d00b      	beq.n	81035fa <_ZN7APIDoIP23extractDataFromResponseEPKhjNS_12EDoIPRequestE+0x9e>
    {
        LOG_DEBUG("Mismatching data size! Read data by identifier could not be completed!");
 81035e2:	f7fd fcd5 	bl	8100f90 <_ZN10LogPrinter8instanceEv>
 81035e6:	4603      	mov	r3, r0
 81035e8:	4909      	ldr	r1, [pc, #36]	@ (8103610 <_ZN7APIDoIP23extractDataFromResponseEPKhjNS_12EDoIPRequestE+0xb4>)
 81035ea:	4618      	mov	r0, r3
 81035ec:	f7fd fcf8 	bl	8100fe0 <_ZN10LogPrinter10printDebugEPKcz>
        return std::nullopt;
 81035f0:	4621      	mov	r1, r4
 81035f2:	68f8      	ldr	r0, [r7, #12]
 81035f4:	f000 f838 	bl	8103668 <_ZNSt8optionalI8SMessageEC1ESt9nullopt_t>
 81035f8:	e005      	b.n	8103606 <_ZN7APIDoIP23extractDataFromResponseEPKhjNS_12EDoIPRequestE+0xaa>
    }
    else
    {
        return std::optional<SMessage>(msg);
 81035fa:	f107 0310 	add.w	r3, r7, #16
 81035fe:	4619      	mov	r1, r3
 8103600:	68f8      	ldr	r0, [r7, #12]
 8103602:	f000 f83f 	bl	8103684 <_ZNSt8optionalI8SMessageEC1IRS0_Lb1EEEOT_>
    }
 8103606:	68f8      	ldr	r0, [r7, #12]
 8103608:	3730      	adds	r7, #48	@ 0x30
 810360a:	46bd      	mov	sp, r7
 810360c:	bdb0      	pop	{r4, r5, r7, pc}
 810360e:	bf00      	nop
 8103610:	08124c20 	.word	0x08124c20

08103614 <_ZNSt22_Optional_payload_baseI8SMessageEC1Ev>:
  template <typename _Tp>
    struct _Optional_payload_base
    {
      using _Stored_type = remove_const_t<_Tp>;

      _Optional_payload_base() = default;
 8103614:	b580      	push	{r7, lr}
 8103616:	b082      	sub	sp, #8
 8103618:	af00      	add	r7, sp, #0
 810361a:	6078      	str	r0, [r7, #4]
 810361c:	687b      	ldr	r3, [r7, #4]
 810361e:	4618      	mov	r0, r3
 8103620:	f000 f844 	bl	81036ac <_ZNSt22_Optional_payload_baseI8SMessageE8_StorageIS0_Lb1EEC1Ev>
 8103624:	687b      	ldr	r3, [r7, #4]
 8103626:	2200      	movs	r2, #0
 8103628:	771a      	strb	r2, [r3, #28]
 810362a:	687b      	ldr	r3, [r7, #4]
 810362c:	4618      	mov	r0, r3
 810362e:	3708      	adds	r7, #8
 8103630:	46bd      	mov	sp, r7
 8103632:	bd80      	pop	{r7, pc}

08103634 <_ZNSt17_Optional_payloadI8SMessageLb1ELb1ELb1EEC1Ev>:
    struct _Optional_payload<_Tp, true, true, true>
    : _Optional_payload_base<_Tp>
    {
      using _Optional_payload_base<_Tp>::_Optional_payload_base;

      _Optional_payload() = default;
 8103634:	b580      	push	{r7, lr}
 8103636:	b082      	sub	sp, #8
 8103638:	af00      	add	r7, sp, #0
 810363a:	6078      	str	r0, [r7, #4]
 810363c:	687b      	ldr	r3, [r7, #4]
 810363e:	4618      	mov	r0, r3
 8103640:	f7ff ffe8 	bl	8103614 <_ZNSt22_Optional_payload_baseI8SMessageEC1Ev>
 8103644:	687b      	ldr	r3, [r7, #4]
 8103646:	4618      	mov	r0, r3
 8103648:	3708      	adds	r7, #8
 810364a:	46bd      	mov	sp, r7
 810364c:	bd80      	pop	{r7, pc}

0810364e <_ZNSt14_Optional_baseI8SMessageLb1ELb1EEC1Ev>:
  template<typename _Tp>
    struct _Optional_base<_Tp, true, true>
    : _Optional_base_impl<_Tp, _Optional_base<_Tp>>
    {
      // Constructors for disengaged optionals.
      constexpr _Optional_base() = default;
 810364e:	b580      	push	{r7, lr}
 8103650:	b082      	sub	sp, #8
 8103652:	af00      	add	r7, sp, #0
 8103654:	6078      	str	r0, [r7, #4]
 8103656:	687b      	ldr	r3, [r7, #4]
 8103658:	4618      	mov	r0, r3
 810365a:	f7ff ffeb 	bl	8103634 <_ZNSt17_Optional_payloadI8SMessageLb1ELb1ELb1EEC1Ev>
 810365e:	687b      	ldr	r3, [r7, #4]
 8103660:	4618      	mov	r0, r3
 8103662:	3708      	adds	r7, #8
 8103664:	46bd      	mov	sp, r7
 8103666:	bd80      	pop	{r7, pc}

08103668 <_ZNSt8optionalI8SMessageEC1ESt9nullopt_t>:
    public:
      using value_type = _Tp;

      constexpr optional() noexcept { }

      constexpr optional(nullopt_t) noexcept { }
 8103668:	b580      	push	{r7, lr}
 810366a:	b082      	sub	sp, #8
 810366c:	af00      	add	r7, sp, #0
 810366e:	6078      	str	r0, [r7, #4]
 8103670:	7039      	strb	r1, [r7, #0]
 8103672:	687b      	ldr	r3, [r7, #4]
 8103674:	4618      	mov	r0, r3
 8103676:	f7ff ffea 	bl	810364e <_ZNSt14_Optional_baseI8SMessageLb1ELb1EEC1Ev>
 810367a:	687b      	ldr	r3, [r7, #4]
 810367c:	4618      	mov	r0, r3
 810367e:	3708      	adds	r7, #8
 8103680:	46bd      	mov	sp, r7
 8103682:	bd80      	pop	{r7, pc}

08103684 <_ZNSt8optionalI8SMessageEC1IRS0_Lb1EEEOT_>:
      template<typename _Up = _Tp,
	       _Requires<__not_self<_Up>, __not_tag<_Up>,
			 is_constructible<_Tp, _Up>,
			 is_convertible<_Up, _Tp>> = true>
	constexpr
	optional(_Up&& __t)
 8103684:	b5b0      	push	{r4, r5, r7, lr}
 8103686:	b082      	sub	sp, #8
 8103688:	af00      	add	r7, sp, #0
 810368a:	6078      	str	r0, [r7, #4]
 810368c:	6039      	str	r1, [r7, #0]
	noexcept(is_nothrow_constructible_v<_Tp, _Up>)
	: _Base(std::in_place, std::forward<_Up>(__t)) { }
 810368e:	687c      	ldr	r4, [r7, #4]
 8103690:	6838      	ldr	r0, [r7, #0]
 8103692:	f000 f816 	bl	81036c2 <_ZSt7forwardIR8SMessageEOT_RNSt16remove_referenceIS2_E4typeE>
 8103696:	4603      	mov	r3, r0
 8103698:	461a      	mov	r2, r3
 810369a:	4629      	mov	r1, r5
 810369c:	4620      	mov	r0, r4
 810369e:	f000 f82c 	bl	81036fa <_ZNSt14_Optional_baseI8SMessageLb1ELb1EEC1IJRS0_ELb0EEESt10in_place_tDpOT_>
 81036a2:	687b      	ldr	r3, [r7, #4]
 81036a4:	4618      	mov	r0, r3
 81036a6:	3708      	adds	r7, #8
 81036a8:	46bd      	mov	sp, r7
 81036aa:	bdb0      	pop	{r4, r5, r7, pc}

081036ac <_ZNSt22_Optional_payload_baseI8SMessageE8_StorageIS0_Lb1EEC1Ev>:
	  constexpr _Storage() noexcept : _M_empty() { }
 81036ac:	b480      	push	{r7}
 81036ae:	b083      	sub	sp, #12
 81036b0:	af00      	add	r7, sp, #0
 81036b2:	6078      	str	r0, [r7, #4]
 81036b4:	687b      	ldr	r3, [r7, #4]
 81036b6:	4618      	mov	r0, r3
 81036b8:	370c      	adds	r7, #12
 81036ba:	46bd      	mov	sp, r7
 81036bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 81036c0:	4770      	bx	lr

081036c2 <_ZSt7forwardIR8SMessageEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 81036c2:	b480      	push	{r7}
 81036c4:	b083      	sub	sp, #12
 81036c6:	af00      	add	r7, sp, #0
 81036c8:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 81036ca:	687b      	ldr	r3, [r7, #4]
 81036cc:	4618      	mov	r0, r3
 81036ce:	370c      	adds	r7, #12
 81036d0:	46bd      	mov	sp, r7
 81036d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81036d6:	4770      	bx	lr

081036d8 <_ZNSt17_Optional_payloadI8SMessageLb1ELb1ELb1EECI1St22_Optional_payload_baseIS0_EIJRS0_EEESt10in_place_tDpOT_>:
      using _Optional_payload_base<_Tp>::_Optional_payload_base;
 81036d8:	b590      	push	{r4, r7, lr}
 81036da:	b085      	sub	sp, #20
 81036dc:	af00      	add	r7, sp, #0
 81036de:	60f8      	str	r0, [r7, #12]
 81036e0:	7239      	strb	r1, [r7, #8]
 81036e2:	607a      	str	r2, [r7, #4]
 81036e4:	68fb      	ldr	r3, [r7, #12]
 81036e6:	687a      	ldr	r2, [r7, #4]
 81036e8:	4621      	mov	r1, r4
 81036ea:	4618      	mov	r0, r3
 81036ec:	f000 f81a 	bl	8103724 <_ZNSt22_Optional_payload_baseI8SMessageEC1IJRS0_EEESt10in_place_tDpOT_>
 81036f0:	68fb      	ldr	r3, [r7, #12]
 81036f2:	4618      	mov	r0, r3
 81036f4:	3714      	adds	r7, #20
 81036f6:	46bd      	mov	sp, r7
 81036f8:	bd90      	pop	{r4, r7, pc}

081036fa <_ZNSt14_Optional_baseI8SMessageLb1ELb1EEC1IJRS0_ELb0EEESt10in_place_tDpOT_>:
	_Optional_base(in_place_t, _Args&&... __args)
 81036fa:	b5b0      	push	{r4, r5, r7, lr}
 81036fc:	b084      	sub	sp, #16
 81036fe:	af00      	add	r7, sp, #0
 8103700:	60f8      	str	r0, [r7, #12]
 8103702:	7239      	strb	r1, [r7, #8]
 8103704:	607a      	str	r2, [r7, #4]
	: _M_payload(in_place, std::forward<_Args>(__args)...)
 8103706:	68fc      	ldr	r4, [r7, #12]
 8103708:	6878      	ldr	r0, [r7, #4]
 810370a:	f7ff ffda 	bl	81036c2 <_ZSt7forwardIR8SMessageEOT_RNSt16remove_referenceIS2_E4typeE>
 810370e:	4603      	mov	r3, r0
 8103710:	461a      	mov	r2, r3
 8103712:	4629      	mov	r1, r5
 8103714:	4620      	mov	r0, r4
 8103716:	f7ff ffdf 	bl	81036d8 <_ZNSt17_Optional_payloadI8SMessageLb1ELb1ELb1EECI1St22_Optional_payload_baseIS0_EIJRS0_EEESt10in_place_tDpOT_>
	{ }
 810371a:	68fb      	ldr	r3, [r7, #12]
 810371c:	4618      	mov	r0, r3
 810371e:	3710      	adds	r7, #16
 8103720:	46bd      	mov	sp, r7
 8103722:	bdb0      	pop	{r4, r5, r7, pc}

08103724 <_ZNSt22_Optional_payload_baseI8SMessageEC1IJRS0_EEESt10in_place_tDpOT_>:
	_Optional_payload_base(in_place_t __tag, _Args&&... __args)
 8103724:	b5b0      	push	{r4, r5, r7, lr}
 8103726:	b084      	sub	sp, #16
 8103728:	af00      	add	r7, sp, #0
 810372a:	60f8      	str	r0, [r7, #12]
 810372c:	7239      	strb	r1, [r7, #8]
 810372e:	607a      	str	r2, [r7, #4]
	: _M_payload(__tag, std::forward<_Args>(__args)...),
 8103730:	68fc      	ldr	r4, [r7, #12]
 8103732:	6878      	ldr	r0, [r7, #4]
 8103734:	f7ff ffc5 	bl	81036c2 <_ZSt7forwardIR8SMessageEOT_RNSt16remove_referenceIS2_E4typeE>
 8103738:	4603      	mov	r3, r0
 810373a:	461a      	mov	r2, r3
 810373c:	4629      	mov	r1, r5
 810373e:	4620      	mov	r0, r4
 8103740:	f000 f808 	bl	8103754 <_ZNSt22_Optional_payload_baseI8SMessageE8_StorageIS0_Lb1EEC1IJRS0_EEESt10in_place_tDpOT_>
	  _M_engaged(true)
 8103744:	68fb      	ldr	r3, [r7, #12]
 8103746:	2201      	movs	r2, #1
 8103748:	771a      	strb	r2, [r3, #28]
	{ }
 810374a:	68fb      	ldr	r3, [r7, #12]
 810374c:	4618      	mov	r0, r3
 810374e:	3710      	adds	r7, #16
 8103750:	46bd      	mov	sp, r7
 8103752:	bdb0      	pop	{r4, r5, r7, pc}

08103754 <_ZNSt22_Optional_payload_baseI8SMessageE8_StorageIS0_Lb1EEC1IJRS0_EEESt10in_place_tDpOT_>:
	    _Storage(in_place_t, _Args&&... __args)
 8103754:	b5b0      	push	{r4, r5, r7, lr}
 8103756:	b084      	sub	sp, #16
 8103758:	af00      	add	r7, sp, #0
 810375a:	60f8      	str	r0, [r7, #12]
 810375c:	7239      	strb	r1, [r7, #8]
 810375e:	607a      	str	r2, [r7, #4]
	    : _M_value(std::forward<_Args>(__args)...)
 8103760:	6878      	ldr	r0, [r7, #4]
 8103762:	f7ff ffae 	bl	81036c2 <_ZSt7forwardIR8SMessageEOT_RNSt16remove_referenceIS2_E4typeE>
 8103766:	4602      	mov	r2, r0
 8103768:	68fb      	ldr	r3, [r7, #12]
 810376a:	461c      	mov	r4, r3
 810376c:	4615      	mov	r5, r2
 810376e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8103770:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8103772:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8103776:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	    { }
 810377a:	68fb      	ldr	r3, [r7, #12]
 810377c:	4618      	mov	r0, r3
 810377e:	3710      	adds	r7, #16
 8103780:	46bd      	mov	sp, r7
 8103782:	bdb0      	pop	{r4, r5, r7, pc}

08103784 <_Z41__static_initialization_and_destruction_0ii>:
 8103784:	b580      	push	{r7, lr}
 8103786:	b094      	sub	sp, #80	@ 0x50
 8103788:	af04      	add	r7, sp, #16
 810378a:	6078      	str	r0, [r7, #4]
 810378c:	6039      	str	r1, [r7, #0]
 810378e:	687b      	ldr	r3, [r7, #4]
 8103790:	2b01      	cmp	r3, #1
 8103792:	d13a      	bne.n	810380a <_Z41__static_initialization_and_destruction_0ii+0x86>
 8103794:	683b      	ldr	r3, [r7, #0]
 8103796:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 810379a:	4293      	cmp	r3, r2
 810379c:	d135      	bne.n	810380a <_Z41__static_initialization_and_destruction_0ii+0x86>
        ACCELERATION = EVENT_DATA_UPDATE_ACCELERATION,
        OIL_TEMPERATURE = EVENT_DATA_UPDATE_OIL_TEMPERATURE,
        ECU_DATA_END = EVENT_DATA_UPDATE_END
    };

    const std::unordered_map<EDoIPRequest, std::pair<std::variant<EUDSDID, EDynamicDataIndentifierRequestCode>, EECUAddress>> dataIdentifierMap =
 810379e:	f107 0314 	add.w	r3, r7, #20
 81037a2:	2220      	movs	r2, #32
 81037a4:	2100      	movs	r1, #0
 81037a6:	4618      	mov	r0, r3
 81037a8:	f020 fb78 	bl	8123e9c <memset>
 81037ac:	4b1e      	ldr	r3, [pc, #120]	@ (8103828 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 81037ae:	61bb      	str	r3, [r7, #24]
 81037b0:	2301      	movs	r3, #1
 81037b2:	773b      	strb	r3, [r7, #28]
 81037b4:	2312      	movs	r3, #18
 81037b6:	f887 3020 	strb.w	r3, [r7, #32]
 81037ba:	2315      	movs	r3, #21
 81037bc:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
 81037c0:	f24d 1306 	movw	r3, #53510	@ 0xd106
 81037c4:	853b      	strh	r3, [r7, #40]	@ 0x28
 81037c6:	2360      	movs	r3, #96	@ 0x60
 81037c8:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
 81037cc:	f107 0314 	add.w	r3, r7, #20
 81037d0:	60fb      	str	r3, [r7, #12]
 81037d2:	2302      	movs	r3, #2
 81037d4:	613b      	str	r3, [r7, #16]
 81037d6:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 81037da:	4618      	mov	r0, r3
 81037dc:	f7fd ffbc 	bl	8101758 <_ZNSaISt4pairIKN7APIDoIP12EDoIPRequestES_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEEEC1Ev>
 81037e0:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 81037e4:	9302      	str	r3, [sp, #8]
 81037e6:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 81037ea:	9301      	str	r3, [sp, #4]
 81037ec:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 81037f0:	9300      	str	r3, [sp, #0]
 81037f2:	2300      	movs	r3, #0
 81037f4:	f107 020c 	add.w	r2, r7, #12
 81037f8:	ca06      	ldmia	r2, {r1, r2}
 81037fa:	480c      	ldr	r0, [pc, #48]	@ (810382c <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 81037fc:	f7fd ffc3 	bl	8101786 <_ZNSt13unordered_mapIN7APIDoIP12EDoIPRequestESt4pairISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressESt4hashIS1_ESt8equal_toIS1_ESaIS2_IKS1_S8_EEEC1ESt16initializer_listISE_EjRKSA_RKSC_RKSF_>
 8103800:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8103804:	4618      	mov	r0, r3
 8103806:	f7fd ffb3 	bl	8101770 <_ZNSaISt4pairIKN7APIDoIP12EDoIPRequestES_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEEED1Ev>
 810380a:	687b      	ldr	r3, [r7, #4]
 810380c:	2b00      	cmp	r3, #0
 810380e:	d107      	bne.n	8103820 <_Z41__static_initialization_and_destruction_0ii+0x9c>
 8103810:	683b      	ldr	r3, [r7, #0]
 8103812:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8103816:	4293      	cmp	r3, r2
 8103818:	d102      	bne.n	8103820 <_Z41__static_initialization_and_destruction_0ii+0x9c>
 810381a:	4804      	ldr	r0, [pc, #16]	@ (810382c <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 810381c:	f7ff fa98 	bl	8102d50 <_ZNSt13unordered_mapIN7APIDoIP12EDoIPRequestESt4pairISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressESt4hashIS1_ESt8equal_toIS1_ESaIS2_IKS1_S8_EEED1Ev>
 8103820:	bf00      	nop
 8103822:	3740      	adds	r7, #64	@ 0x40
 8103824:	46bd      	mov	sp, r7
 8103826:	bd80      	pop	{r7, pc}
 8103828:	46090101 	.word	0x46090101
 810382c:	1000022c 	.word	0x1000022c

08103830 <_GLOBAL__sub_I__ZN7APIDoIP18prepareDataRequestEPh11EECUAddress7EUDSDID>:
 8103830:	b580      	push	{r7, lr}
 8103832:	af00      	add	r7, sp, #0
 8103834:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8103838:	2001      	movs	r0, #1
 810383a:	f7ff ffa3 	bl	8103784 <_Z41__static_initialization_and_destruction_0ii>
 810383e:	bd80      	pop	{r7, pc}

08103840 <_GLOBAL__sub_D__ZN7APIDoIP18prepareDataRequestEPh11EECUAddress7EUDSDID>:
 8103840:	b580      	push	{r7, lr}
 8103842:	af00      	add	r7, sp, #0
 8103844:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8103848:	2000      	movs	r0, #0
 810384a:	f7ff ff9b 	bl	8103784 <_Z41__static_initialization_and_destruction_0ii>
 810384e:	bd80      	pop	{r7, pc}

08103850 <_ZSt26__throw_bad_variant_accessPKc>:
  };

  // Must only be called with a string literal
  inline void
  __throw_bad_variant_access(const char* __what)
  { _GLIBCXX_THROW_OR_ABORT(bad_variant_access(__what)); }
 8103850:	b580      	push	{r7, lr}
 8103852:	b082      	sub	sp, #8
 8103854:	af00      	add	r7, sp, #0
 8103856:	6078      	str	r0, [r7, #4]
 8103858:	f01f fbaa 	bl	8122fb0 <abort>

0810385c <_ZSt26__throw_bad_variant_accessb>:

  inline void
  __throw_bad_variant_access(bool __valueless)
  {
 810385c:	b580      	push	{r7, lr}
 810385e:	b082      	sub	sp, #8
 8103860:	af00      	add	r7, sp, #0
 8103862:	4603      	mov	r3, r0
 8103864:	71fb      	strb	r3, [r7, #7]
    if (__valueless) [[__unlikely__]]
 8103866:	79fb      	ldrb	r3, [r7, #7]
 8103868:	2b00      	cmp	r3, #0
 810386a:	d003      	beq.n	8103874 <_ZSt26__throw_bad_variant_accessb+0x18>
      __throw_bad_variant_access("std::get: variant is valueless");
 810386c:	4805      	ldr	r0, [pc, #20]	@ (8103884 <_ZSt26__throw_bad_variant_accessb+0x28>)
 810386e:	f7ff ffef 	bl	8103850 <_ZSt26__throw_bad_variant_accessPKc>
    else
      __throw_bad_variant_access("std::get: wrong index for variant");
  }
 8103872:	e002      	b.n	810387a <_ZSt26__throw_bad_variant_accessb+0x1e>
      __throw_bad_variant_access("std::get: wrong index for variant");
 8103874:	4804      	ldr	r0, [pc, #16]	@ (8103888 <_ZSt26__throw_bad_variant_accessb+0x2c>)
 8103876:	f7ff ffeb 	bl	8103850 <_ZSt26__throw_bad_variant_accessPKc>
  }
 810387a:	bf00      	nop
 810387c:	3708      	adds	r7, #8
 810387e:	46bd      	mov	sp, r7
 8103880:	bd80      	pop	{r7, pc}
 8103882:	bf00      	nop
 8103884:	08124c68 	.word	0x08124c68
 8103888:	08124c88 	.word	0x08124c88

0810388c <_ZSt27__throw_bad_optional_accessv>:
  { _GLIBCXX_THROW_OR_ABORT(bad_optional_access()); }
 810388c:	b580      	push	{r7, lr}
 810388e:	af00      	add	r7, sp, #0
 8103890:	f01f fb8e 	bl	8122fb0 <abort>

08103894 <_ZSt24__find_uniq_type_in_packI34EDynamicDataIndentifierRequestCodeJ7EUDSDIDS0_EEjv>:

  // Return the index of _Tp in _Types, if it occurs exactly once.
  // Otherwise, return sizeof...(_Types).
  template<typename _Tp, typename... _Types>
    constexpr size_t
    __find_uniq_type_in_pack()
 8103894:	b480      	push	{r7}
 8103896:	b085      	sub	sp, #20
 8103898:	af00      	add	r7, sp, #0
    {
      constexpr size_t __sz = sizeof...(_Types);
 810389a:	2302      	movs	r3, #2
 810389c:	607b      	str	r3, [r7, #4]
      constexpr bool __found[__sz] = { __is_same(_Tp, _Types) ... };
 810389e:	2300      	movs	r3, #0
 81038a0:	703b      	strb	r3, [r7, #0]
 81038a2:	2301      	movs	r3, #1
 81038a4:	707b      	strb	r3, [r7, #1]
      size_t __n = __sz;
 81038a6:	2302      	movs	r3, #2
 81038a8:	60fb      	str	r3, [r7, #12]
      for (size_t __i = 0; __i < __sz; ++__i)
 81038aa:	2300      	movs	r3, #0
 81038ac:	60bb      	str	r3, [r7, #8]
 81038ae:	e00f      	b.n	81038d0 <_ZSt24__find_uniq_type_in_packI34EDynamicDataIndentifierRequestCodeJ7EUDSDIDS0_EEjv+0x3c>
	{
	  if (__found[__i])
 81038b0:	463a      	mov	r2, r7
 81038b2:	68bb      	ldr	r3, [r7, #8]
 81038b4:	4413      	add	r3, r2
 81038b6:	781b      	ldrb	r3, [r3, #0]
 81038b8:	2b00      	cmp	r3, #0
 81038ba:	d006      	beq.n	81038ca <_ZSt24__find_uniq_type_in_packI34EDynamicDataIndentifierRequestCodeJ7EUDSDIDS0_EEjv+0x36>
	    {
	      if (__n < __sz) // more than one _Tp found
 81038bc:	68fb      	ldr	r3, [r7, #12]
 81038be:	2b01      	cmp	r3, #1
 81038c0:	d801      	bhi.n	81038c6 <_ZSt24__find_uniq_type_in_packI34EDynamicDataIndentifierRequestCodeJ7EUDSDIDS0_EEjv+0x32>
		return __sz;
 81038c2:	2302      	movs	r3, #2
 81038c4:	e008      	b.n	81038d8 <_ZSt24__find_uniq_type_in_packI34EDynamicDataIndentifierRequestCodeJ7EUDSDIDS0_EEjv+0x44>
	      __n = __i;
 81038c6:	68bb      	ldr	r3, [r7, #8]
 81038c8:	60fb      	str	r3, [r7, #12]
      for (size_t __i = 0; __i < __sz; ++__i)
 81038ca:	68bb      	ldr	r3, [r7, #8]
 81038cc:	3301      	adds	r3, #1
 81038ce:	60bb      	str	r3, [r7, #8]
 81038d0:	68bb      	ldr	r3, [r7, #8]
 81038d2:	2b01      	cmp	r3, #1
 81038d4:	d9ec      	bls.n	81038b0 <_ZSt24__find_uniq_type_in_packI34EDynamicDataIndentifierRequestCodeJ7EUDSDIDS0_EEjv+0x1c>
	    }
	}
      return __n;
 81038d6:	68fb      	ldr	r3, [r7, #12]
    }
 81038d8:	4618      	mov	r0, r3
 81038da:	3714      	adds	r7, #20
 81038dc:	46bd      	mov	sp, r7
 81038de:	f85d 7b04 	ldr.w	r7, [sp], #4
 81038e2:	4770      	bx	lr

081038e4 <_ZSt24__find_uniq_type_in_packI7EUDSDIDJS0_34EDynamicDataIndentifierRequestCodeEEjv>:
    __find_uniq_type_in_pack()
 81038e4:	b480      	push	{r7}
 81038e6:	b085      	sub	sp, #20
 81038e8:	af00      	add	r7, sp, #0
      constexpr size_t __sz = sizeof...(_Types);
 81038ea:	2302      	movs	r3, #2
 81038ec:	607b      	str	r3, [r7, #4]
      constexpr bool __found[__sz] = { __is_same(_Tp, _Types) ... };
 81038ee:	2301      	movs	r3, #1
 81038f0:	703b      	strb	r3, [r7, #0]
 81038f2:	2300      	movs	r3, #0
 81038f4:	707b      	strb	r3, [r7, #1]
      size_t __n = __sz;
 81038f6:	2302      	movs	r3, #2
 81038f8:	60fb      	str	r3, [r7, #12]
      for (size_t __i = 0; __i < __sz; ++__i)
 81038fa:	2300      	movs	r3, #0
 81038fc:	60bb      	str	r3, [r7, #8]
 81038fe:	e00f      	b.n	8103920 <_ZSt24__find_uniq_type_in_packI7EUDSDIDJS0_34EDynamicDataIndentifierRequestCodeEEjv+0x3c>
	  if (__found[__i])
 8103900:	463a      	mov	r2, r7
 8103902:	68bb      	ldr	r3, [r7, #8]
 8103904:	4413      	add	r3, r2
 8103906:	781b      	ldrb	r3, [r3, #0]
 8103908:	2b00      	cmp	r3, #0
 810390a:	d006      	beq.n	810391a <_ZSt24__find_uniq_type_in_packI7EUDSDIDJS0_34EDynamicDataIndentifierRequestCodeEEjv+0x36>
	      if (__n < __sz) // more than one _Tp found
 810390c:	68fb      	ldr	r3, [r7, #12]
 810390e:	2b01      	cmp	r3, #1
 8103910:	d801      	bhi.n	8103916 <_ZSt24__find_uniq_type_in_packI7EUDSDIDJS0_34EDynamicDataIndentifierRequestCodeEEjv+0x32>
		return __sz;
 8103912:	2302      	movs	r3, #2
 8103914:	e008      	b.n	8103928 <_ZSt24__find_uniq_type_in_packI7EUDSDIDJS0_34EDynamicDataIndentifierRequestCodeEEjv+0x44>
	      __n = __i;
 8103916:	68bb      	ldr	r3, [r7, #8]
 8103918:	60fb      	str	r3, [r7, #12]
      for (size_t __i = 0; __i < __sz; ++__i)
 810391a:	68bb      	ldr	r3, [r7, #8]
 810391c:	3301      	adds	r3, #1
 810391e:	60bb      	str	r3, [r7, #8]
 8103920:	68bb      	ldr	r3, [r7, #8]
 8103922:	2b01      	cmp	r3, #1
 8103924:	d9ec      	bls.n	8103900 <_ZSt24__find_uniq_type_in_packI7EUDSDIDJS0_34EDynamicDataIndentifierRequestCodeEEjv+0x1c>
      return __n;
 8103926:	68fb      	ldr	r3, [r7, #12]
    }
 8103928:	4618      	mov	r0, r3
 810392a:	3714      	adds	r7, #20
 810392c:	46bd      	mov	sp, r7
 810392e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103932:	4770      	bx	lr

08103934 <_ZN17ConnectionManager8instanceEv>:
        EVENT_DATA_REQUESTED,
        EVENT_NO_DATA_TO_REQUEST,
        EVENT_TCP_READ_DATA_BY_ID_RECEIVED
	};

    static ConnectionManager& instance()
 8103934:	b580      	push	{r7, lr}
 8103936:	af00      	add	r7, sp, #0
    {
        static ConnectionManager connMgrInstance;
 8103938:	4b10      	ldr	r3, [pc, #64]	@ (810397c <_ZN17ConnectionManager8instanceEv+0x48>)
 810393a:	681b      	ldr	r3, [r3, #0]
 810393c:	f3bf 8f5b 	dmb	ish
 8103940:	f003 0301 	and.w	r3, r3, #1
 8103944:	2b00      	cmp	r3, #0
 8103946:	bf0c      	ite	eq
 8103948:	2301      	moveq	r3, #1
 810394a:	2300      	movne	r3, #0
 810394c:	b2db      	uxtb	r3, r3
 810394e:	2b00      	cmp	r3, #0
 8103950:	d010      	beq.n	8103974 <_ZN17ConnectionManager8instanceEv+0x40>
 8103952:	480a      	ldr	r0, [pc, #40]	@ (810397c <_ZN17ConnectionManager8instanceEv+0x48>)
 8103954:	f01f f8fa 	bl	8122b4c <__cxa_guard_acquire>
 8103958:	4603      	mov	r3, r0
 810395a:	2b00      	cmp	r3, #0
 810395c:	bf14      	ite	ne
 810395e:	2301      	movne	r3, #1
 8103960:	2300      	moveq	r3, #0
 8103962:	b2db      	uxtb	r3, r3
 8103964:	2b00      	cmp	r3, #0
 8103966:	d005      	beq.n	8103974 <_ZN17ConnectionManager8instanceEv+0x40>
 8103968:	4805      	ldr	r0, [pc, #20]	@ (8103980 <_ZN17ConnectionManager8instanceEv+0x4c>)
 810396a:	f000 f80b 	bl	8103984 <_ZN17ConnectionManagerC1Ev>
 810396e:	4803      	ldr	r0, [pc, #12]	@ (810397c <_ZN17ConnectionManager8instanceEv+0x48>)
 8103970:	f01f f8f8 	bl	8122b64 <__cxa_guard_release>
        return connMgrInstance;
 8103974:	4b02      	ldr	r3, [pc, #8]	@ (8103980 <_ZN17ConnectionManager8instanceEv+0x4c>)
    }
 8103976:	4618      	mov	r0, r3
 8103978:	bd80      	pop	{r7, pc}
 810397a:	bf00      	nop
 810397c:	10000274 	.word	0x10000274
 8103980:	10000264 	.word	0x10000264

08103984 <_ZN17ConnectionManagerC1Ev>:

    void processUdpDicovery();

private:

    ConnectionManager(){};
 8103984:	b480      	push	{r7}
 8103986:	b083      	sub	sp, #12
 8103988:	af00      	add	r7, sp, #0
 810398a:	6078      	str	r0, [r7, #4]
 810398c:	687b      	ldr	r3, [r7, #4]
 810398e:	2200      	movs	r2, #0
 8103990:	605a      	str	r2, [r3, #4]
 8103992:	687b      	ldr	r3, [r7, #4]
 8103994:	2200      	movs	r2, #0
 8103996:	609a      	str	r2, [r3, #8]
 8103998:	687b      	ldr	r3, [r7, #4]
 810399a:	22ff      	movs	r2, #255	@ 0xff
 810399c:	731a      	strb	r2, [r3, #12]
 810399e:	687b      	ldr	r3, [r7, #4]
 81039a0:	2200      	movs	r2, #0
 81039a2:	735a      	strb	r2, [r3, #13]
 81039a4:	687b      	ldr	r3, [r7, #4]
 81039a6:	4618      	mov	r0, r3
 81039a8:	370c      	adds	r7, #12
 81039aa:	46bd      	mov	sp, r7
 81039ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 81039b0:	4770      	bx	lr

081039b2 <tcpRecvCb>:

extern QueueHandle_t queueToEventManagerCM4;
extern QueueHandle_t connectionEventsQueue;

extern "C" err_t tcpRecvCb(void *arg, struct tcp_pcb *tpcb, struct pbuf *p, err_t err)
{
 81039b2:	b580      	push	{r7, lr}
 81039b4:	b088      	sub	sp, #32
 81039b6:	af02      	add	r7, sp, #8
 81039b8:	60f8      	str	r0, [r7, #12]
 81039ba:	60b9      	str	r1, [r7, #8]
 81039bc:	607a      	str	r2, [r7, #4]
 81039be:	70fb      	strb	r3, [r7, #3]
    ConnectionManager& connMgrInstance = ConnectionManager::instance();
 81039c0:	f7ff ffb8 	bl	8103934 <_ZN17ConnectionManager8instanceEv>
 81039c4:	6178      	str	r0, [r7, #20]
    connMgrInstance.HandleTcpRecvCb(arg, tpcb, p, err);
 81039c6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 81039ca:	9300      	str	r3, [sp, #0]
 81039cc:	687b      	ldr	r3, [r7, #4]
 81039ce:	68ba      	ldr	r2, [r7, #8]
 81039d0:	68f9      	ldr	r1, [r7, #12]
 81039d2:	6978      	ldr	r0, [r7, #20]
 81039d4:	f000 fc48 	bl	8104268 <_ZN17ConnectionManager15HandleTcpRecvCbEPvP7tcp_pcbP4pbufa>
    return ERR_OK;
 81039d8:	2300      	movs	r3, #0
}
 81039da:	4618      	mov	r0, r3
 81039dc:	3718      	adds	r7, #24
 81039de:	46bd      	mov	sp, r7
 81039e0:	bd80      	pop	{r7, pc}

081039e2 <tcpConnectCb>:

extern "C" err_t tcpConnectCb(void *arg, struct tcp_pcb *tpcb, err_t err)
{
 81039e2:	b580      	push	{r7, lr}
 81039e4:	b086      	sub	sp, #24
 81039e6:	af00      	add	r7, sp, #0
 81039e8:	60f8      	str	r0, [r7, #12]
 81039ea:	60b9      	str	r1, [r7, #8]
 81039ec:	4613      	mov	r3, r2
 81039ee:	71fb      	strb	r3, [r7, #7]
    ConnectionManager& connMgrInstance = ConnectionManager::instance();
 81039f0:	f7ff ffa0 	bl	8103934 <_ZN17ConnectionManager8instanceEv>
 81039f4:	6178      	str	r0, [r7, #20]
    connMgrInstance.HandleTcpConnectCb(arg, tpcb, err);
 81039f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 81039fa:	68ba      	ldr	r2, [r7, #8]
 81039fc:	68f9      	ldr	r1, [r7, #12]
 81039fe:	6978      	ldr	r0, [r7, #20]
 8103a00:	f000 fd2e 	bl	8104460 <_ZN17ConnectionManager18HandleTcpConnectCbEPvP7tcp_pcba>
    return ERR_OK;
 8103a04:	2300      	movs	r3, #0
}
 8103a06:	4618      	mov	r0, r3
 8103a08:	3718      	adds	r7, #24
 8103a0a:	46bd      	mov	sp, r7
 8103a0c:	bd80      	pop	{r7, pc}

08103a0e <tcpErrCb>:

extern "C" void tcpErrCb(void *arg, err_t err)
{
 8103a0e:	b580      	push	{r7, lr}
 8103a10:	b084      	sub	sp, #16
 8103a12:	af00      	add	r7, sp, #0
 8103a14:	6078      	str	r0, [r7, #4]
 8103a16:	460b      	mov	r3, r1
 8103a18:	70fb      	strb	r3, [r7, #3]
    ConnectionManager& connMgrInstance = ConnectionManager::instance();
 8103a1a:	f7ff ff8b 	bl	8103934 <_ZN17ConnectionManager8instanceEv>
 8103a1e:	60f8      	str	r0, [r7, #12]
    connMgrInstance.HandleTcpErrCb(arg, err);
 8103a20:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8103a24:	461a      	mov	r2, r3
 8103a26:	6879      	ldr	r1, [r7, #4]
 8103a28:	68f8      	ldr	r0, [r7, #12]
 8103a2a:	f000 fd77 	bl	810451c <_ZN17ConnectionManager14HandleTcpErrCbEPva>
}
 8103a2e:	bf00      	nop
 8103a30:	3710      	adds	r7, #16
 8103a32:	46bd      	mov	sp, r7
 8103a34:	bd80      	pop	{r7, pc}

08103a36 <udpRecvCb>:

extern "C" void udpRecvCb(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 8103a36:	b580      	push	{r7, lr}
 8103a38:	b088      	sub	sp, #32
 8103a3a:	af02      	add	r7, sp, #8
 8103a3c:	60f8      	str	r0, [r7, #12]
 8103a3e:	60b9      	str	r1, [r7, #8]
 8103a40:	607a      	str	r2, [r7, #4]
 8103a42:	603b      	str	r3, [r7, #0]
    ConnectionManager& connMgrInstance = ConnectionManager::instance();
 8103a44:	f7ff ff76 	bl	8103934 <_ZN17ConnectionManager8instanceEv>
 8103a48:	6178      	str	r0, [r7, #20]
    connMgrInstance.HandleUdpRecvCb(arg, pcb, p, addr, port);
 8103a4a:	8c3b      	ldrh	r3, [r7, #32]
 8103a4c:	9301      	str	r3, [sp, #4]
 8103a4e:	683b      	ldr	r3, [r7, #0]
 8103a50:	9300      	str	r3, [sp, #0]
 8103a52:	687b      	ldr	r3, [r7, #4]
 8103a54:	68ba      	ldr	r2, [r7, #8]
 8103a56:	68f9      	ldr	r1, [r7, #12]
 8103a58:	6978      	ldr	r0, [r7, #20]
 8103a5a:	f000 f925 	bl	8103ca8 <_ZN17ConnectionManager15HandleUdpRecvCbEPvP7udp_pcbP4pbufPK8ip4_addrt>
}
 8103a5e:	bf00      	nop
 8103a60:	3718      	adds	r7, #24
 8103a62:	46bd      	mov	sp, r7
 8103a64:	bd80      	pop	{r7, pc}
	...

08103a68 <_ZN17ConnectionManager8sendSSDPEv>:

bool ConnectionManager::sendSSDP()
{
 8103a68:	b580      	push	{r7, lr}
 8103a6a:	b086      	sub	sp, #24
 8103a6c:	af00      	add	r7, sp, #0
 8103a6e:	6078      	str	r0, [r7, #4]
    constexpr const char *ssdpRequest =
 8103a70:	4b23      	ldr	r3, [pc, #140]	@ (8103b00 <_ZN17ConnectionManager8sendSSDPEv+0x98>)
 8103a72:	617b      	str	r3, [r7, #20]

    ip_addr_t multicastIp;
    struct pbuf *p;
    
    // Set the multicast address for SSDP
    ipaddr_aton(SSDP_MULTICAST_IP, &multicastIp);
 8103a74:	f107 030c 	add.w	r3, r7, #12
 8103a78:	4619      	mov	r1, r3
 8103a7a:	4822      	ldr	r0, [pc, #136]	@ (8103b04 <_ZN17ConnectionManager8sendSSDPEv+0x9c>)
 8103a7c:	f015 f9a0 	bl	8118dc0 <ip4addr_aton>

    // Allocate buffer for SSDP data
    p = pbuf_alloc(PBUF_TRANSPORT, strlen(ssdpRequest), PBUF_RAM);
 8103a80:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8103a84:	215e      	movs	r1, #94	@ 0x5e
 8103a86:	2036      	movs	r0, #54	@ 0x36
 8103a88:	f017 fa46 	bl	811af18 <pbuf_alloc>
 8103a8c:	6138      	str	r0, [r7, #16]
    if (!p)
 8103a8e:	693b      	ldr	r3, [r7, #16]
 8103a90:	2b00      	cmp	r3, #0
 8103a92:	d108      	bne.n	8103aa6 <_ZN17ConnectionManager8sendSSDPEv+0x3e>
    {
        LOG_DEBUG("Failed to allocate pbuf for SSDP.");
 8103a94:	f7fd fa7c 	bl	8100f90 <_ZN10LogPrinter8instanceEv>
 8103a98:	4603      	mov	r3, r0
 8103a9a:	491b      	ldr	r1, [pc, #108]	@ (8103b08 <_ZN17ConnectionManager8sendSSDPEv+0xa0>)
 8103a9c:	4618      	mov	r0, r3
 8103a9e:	f7fd fa9f 	bl	8100fe0 <_ZN10LogPrinter10printDebugEPKcz>
        return false;
 8103aa2:	2300      	movs	r3, #0
 8103aa4:	e027      	b.n	8103af6 <_ZN17ConnectionManager8sendSSDPEv+0x8e>
    }

    // Copy data to the buffer
    memcpy(p->payload, ssdpRequest, strlen(ssdpRequest));
 8103aa6:	693b      	ldr	r3, [r7, #16]
 8103aa8:	685b      	ldr	r3, [r3, #4]
 8103aaa:	225e      	movs	r2, #94	@ 0x5e
 8103aac:	4914      	ldr	r1, [pc, #80]	@ (8103b00 <_ZN17ConnectionManager8sendSSDPEv+0x98>)
 8103aae:	4618      	mov	r0, r3
 8103ab0:	f020 fb43 	bl	812413a <memcpy>

    // Send SSDP
    if (udp_sendto(udp_pcb, p, &multicastIp, 1900) != ERR_OK)
 8103ab4:	687b      	ldr	r3, [r7, #4]
 8103ab6:	6858      	ldr	r0, [r3, #4]
 8103ab8:	f107 020c 	add.w	r2, r7, #12
 8103abc:	f240 736c 	movw	r3, #1900	@ 0x76c
 8103ac0:	6939      	ldr	r1, [r7, #16]
 8103ac2:	f01e fd57 	bl	8122574 <udp_sendto>
 8103ac6:	4603      	mov	r3, r0
 8103ac8:	2b00      	cmp	r3, #0
 8103aca:	bf14      	ite	ne
 8103acc:	2301      	movne	r3, #1
 8103ace:	2300      	moveq	r3, #0
 8103ad0:	b2db      	uxtb	r3, r3
 8103ad2:	2b00      	cmp	r3, #0
 8103ad4:	d00b      	beq.n	8103aee <_ZN17ConnectionManager8sendSSDPEv+0x86>
    {
        LOG_DEBUG("Failed to send SSDP request.");
 8103ad6:	f7fd fa5b 	bl	8100f90 <_ZN10LogPrinter8instanceEv>
 8103ada:	4603      	mov	r3, r0
 8103adc:	490b      	ldr	r1, [pc, #44]	@ (8103b0c <_ZN17ConnectionManager8sendSSDPEv+0xa4>)
 8103ade:	4618      	mov	r0, r3
 8103ae0:	f7fd fa7e 	bl	8100fe0 <_ZN10LogPrinter10printDebugEPKcz>
        pbuf_free(p);
 8103ae4:	6938      	ldr	r0, [r7, #16]
 8103ae6:	f017 fcf9 	bl	811b4dc <pbuf_free>
        return false;
 8103aea:	2300      	movs	r3, #0
 8103aec:	e003      	b.n	8103af6 <_ZN17ConnectionManager8sendSSDPEv+0x8e>
    }

    // Release the buffer
    pbuf_free(p);
 8103aee:	6938      	ldr	r0, [r7, #16]
 8103af0:	f017 fcf4 	bl	811b4dc <pbuf_free>
    return true;
 8103af4:	2301      	movs	r3, #1
}
 8103af6:	4618      	mov	r0, r3
 8103af8:	3718      	adds	r7, #24
 8103afa:	46bd      	mov	sp, r7
 8103afc:	bd80      	pop	{r7, pc}
 8103afe:	bf00      	nop
 8103b00:	08124cac 	.word	0x08124cac
 8103b04:	08124d0c 	.word	0x08124d0c
 8103b08:	08124d1c 	.word	0x08124d1c
 8103b0c:	08124d40 	.word	0x08124d40

08103b10 <_ZN17ConnectionManager7sendSLPEv>:

bool ConnectionManager::sendSLP()
{
 8103b10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8103b12:	b08f      	sub	sp, #60	@ 0x3c
 8103b14:	af00      	add	r7, sp, #0
 8103b16:	6078      	str	r0, [r7, #4]
    uint8_t slpRequest[36] =
 8103b18:	4b30      	ldr	r3, [pc, #192]	@ (8103bdc <_ZN17ConnectionManager7sendSLPEv+0xcc>)
 8103b1a:	f107 0410 	add.w	r4, r7, #16
 8103b1e:	461d      	mov	r5, r3
 8103b20:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8103b22:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8103b24:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8103b26:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8103b28:	682b      	ldr	r3, [r5, #0]
 8103b2a:	8023      	strh	r3, [r4, #0]
 8103b2c:	2300      	movs	r3, #0
 8103b2e:	867b      	strh	r3, [r7, #50]	@ 0x32
    };
    ip_addr_t broadcastIp;
    struct pbuf *p;

    // Set the broadcast address
    ipaddr_aton(BROADCAST_IP, &broadcastIp);
 8103b30:	f107 030c 	add.w	r3, r7, #12
 8103b34:	4619      	mov	r1, r3
 8103b36:	482a      	ldr	r0, [pc, #168]	@ (8103be0 <_ZN17ConnectionManager7sendSLPEv+0xd0>)
 8103b38:	f015 f942 	bl	8118dc0 <ip4addr_aton>

    // Allocate buffer for SLP data
    p = pbuf_alloc(PBUF_TRANSPORT, sizeof(slpRequest), PBUF_RAM);
 8103b3c:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8103b40:	2124      	movs	r1, #36	@ 0x24
 8103b42:	2036      	movs	r0, #54	@ 0x36
 8103b44:	f017 f9e8 	bl	811af18 <pbuf_alloc>
 8103b48:	6378      	str	r0, [r7, #52]	@ 0x34
    if (!p)
 8103b4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8103b4c:	2b00      	cmp	r3, #0
 8103b4e:	d108      	bne.n	8103b62 <_ZN17ConnectionManager7sendSLPEv+0x52>
    {
        LOG_DEBUG("Failed to allocate pbuf for SLP.");
 8103b50:	f7fd fa1e 	bl	8100f90 <_ZN10LogPrinter8instanceEv>
 8103b54:	4603      	mov	r3, r0
 8103b56:	4923      	ldr	r1, [pc, #140]	@ (8103be4 <_ZN17ConnectionManager7sendSLPEv+0xd4>)
 8103b58:	4618      	mov	r0, r3
 8103b5a:	f7fd fa41 	bl	8100fe0 <_ZN10LogPrinter10printDebugEPKcz>
        return false;
 8103b5e:	2300      	movs	r3, #0
 8103b60:	e037      	b.n	8103bd2 <_ZN17ConnectionManager7sendSLPEv+0xc2>
    }

    // Copy data to the buffer
    memcpy(p->payload, slpRequest, sizeof(slpRequest));
 8103b62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8103b64:	685b      	ldr	r3, [r3, #4]
 8103b66:	f107 0410 	add.w	r4, r7, #16
 8103b6a:	469c      	mov	ip, r3
 8103b6c:	f104 0e20 	add.w	lr, r4, #32
 8103b70:	4665      	mov	r5, ip
 8103b72:	4626      	mov	r6, r4
 8103b74:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8103b76:	6028      	str	r0, [r5, #0]
 8103b78:	6069      	str	r1, [r5, #4]
 8103b7a:	60aa      	str	r2, [r5, #8]
 8103b7c:	60eb      	str	r3, [r5, #12]
 8103b7e:	3410      	adds	r4, #16
 8103b80:	f10c 0c10 	add.w	ip, ip, #16
 8103b84:	4574      	cmp	r4, lr
 8103b86:	d1f3      	bne.n	8103b70 <_ZN17ConnectionManager7sendSLPEv+0x60>
 8103b88:	4663      	mov	r3, ip
 8103b8a:	4622      	mov	r2, r4
 8103b8c:	6810      	ldr	r0, [r2, #0]
 8103b8e:	6018      	str	r0, [r3, #0]

    // Send SLP
    if (udp_sendto(udp_pcb, p, &broadcastIp, SLP_PORT) != ERR_OK)
 8103b90:	687b      	ldr	r3, [r7, #4]
 8103b92:	6858      	ldr	r0, [r3, #4]
 8103b94:	f107 020c 	add.w	r2, r7, #12
 8103b98:	f240 13ab 	movw	r3, #427	@ 0x1ab
 8103b9c:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8103b9e:	f01e fce9 	bl	8122574 <udp_sendto>
 8103ba2:	4603      	mov	r3, r0
 8103ba4:	2b00      	cmp	r3, #0
 8103ba6:	bf14      	ite	ne
 8103ba8:	2301      	movne	r3, #1
 8103baa:	2300      	moveq	r3, #0
 8103bac:	b2db      	uxtb	r3, r3
 8103bae:	2b00      	cmp	r3, #0
 8103bb0:	d00b      	beq.n	8103bca <_ZN17ConnectionManager7sendSLPEv+0xba>
    {
        LOG_DEBUG("Failed to send SLP request.");
 8103bb2:	f7fd f9ed 	bl	8100f90 <_ZN10LogPrinter8instanceEv>
 8103bb6:	4603      	mov	r3, r0
 8103bb8:	490b      	ldr	r1, [pc, #44]	@ (8103be8 <_ZN17ConnectionManager7sendSLPEv+0xd8>)
 8103bba:	4618      	mov	r0, r3
 8103bbc:	f7fd fa10 	bl	8100fe0 <_ZN10LogPrinter10printDebugEPKcz>
        pbuf_free(p);
 8103bc0:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8103bc2:	f017 fc8b 	bl	811b4dc <pbuf_free>
        return false;
 8103bc6:	2300      	movs	r3, #0
 8103bc8:	e003      	b.n	8103bd2 <_ZN17ConnectionManager7sendSLPEv+0xc2>
    }

    // Release the buffer
    pbuf_free(p);
 8103bca:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8103bcc:	f017 fc86 	bl	811b4dc <pbuf_free>
    return true;
 8103bd0:	2301      	movs	r3, #1
}
 8103bd2:	4618      	mov	r0, r3
 8103bd4:	373c      	adds	r7, #60	@ 0x3c
 8103bd6:	46bd      	mov	sp, r7
 8103bd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8103bda:	bf00      	nop
 8103bdc:	08124db0 	.word	0x08124db0
 8103be0:	08124d60 	.word	0x08124d60
 8103be4:	08124d70 	.word	0x08124d70
 8103be8:	08124d94 	.word	0x08124d94

08103bec <_ZN17ConnectionManager12sendDoIPInitEv>:


bool ConnectionManager::sendDoIPInit()
{
 8103bec:	b580      	push	{r7, lr}
 8103bee:	b086      	sub	sp, #24
 8103bf0:	af00      	add	r7, sp, #0
 8103bf2:	6078      	str	r0, [r7, #4]
    const char doipRequest[] = "\x00\x00\x00\x00\x00\x11";
 8103bf4:	4a28      	ldr	r2, [pc, #160]	@ (8103c98 <_ZN17ConnectionManager12sendDoIPInitEv+0xac>)
 8103bf6:	f107 030c 	add.w	r3, r7, #12
 8103bfa:	e892 0003 	ldmia.w	r2, {r0, r1}
 8103bfe:	6018      	str	r0, [r3, #0]
 8103c00:	3304      	adds	r3, #4
 8103c02:	8019      	strh	r1, [r3, #0]
 8103c04:	3302      	adds	r3, #2
 8103c06:	0c0a      	lsrs	r2, r1, #16
 8103c08:	701a      	strb	r2, [r3, #0]
    ip_addr_t broadcastIp;
    struct pbuf *p;

    // Set the broadcast address for DoIP
    ipaddr_aton(BROADCAST_IP, &broadcastIp);
 8103c0a:	f107 0308 	add.w	r3, r7, #8
 8103c0e:	4619      	mov	r1, r3
 8103c10:	4822      	ldr	r0, [pc, #136]	@ (8103c9c <_ZN17ConnectionManager12sendDoIPInitEv+0xb0>)
 8103c12:	f015 f8d5 	bl	8118dc0 <ip4addr_aton>

    // Allocate buffer for DoIP data
    p = pbuf_alloc(PBUF_TRANSPORT, sizeof(doipRequest) - 1, PBUF_RAM);
 8103c16:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8103c1a:	2106      	movs	r1, #6
 8103c1c:	2036      	movs	r0, #54	@ 0x36
 8103c1e:	f017 f97b 	bl	811af18 <pbuf_alloc>
 8103c22:	6178      	str	r0, [r7, #20]
    if (!p)
 8103c24:	697b      	ldr	r3, [r7, #20]
 8103c26:	2b00      	cmp	r3, #0
 8103c28:	d108      	bne.n	8103c3c <_ZN17ConnectionManager12sendDoIPInitEv+0x50>
    {
        LOG_DEBUG("Failed to allocate pbuf for DoIP init.");
 8103c2a:	f7fd f9b1 	bl	8100f90 <_ZN10LogPrinter8instanceEv>
 8103c2e:	4603      	mov	r3, r0
 8103c30:	491b      	ldr	r1, [pc, #108]	@ (8103ca0 <_ZN17ConnectionManager12sendDoIPInitEv+0xb4>)
 8103c32:	4618      	mov	r0, r3
 8103c34:	f7fd f9d4 	bl	8100fe0 <_ZN10LogPrinter10printDebugEPKcz>
        return false;
 8103c38:	2300      	movs	r3, #0
 8103c3a:	e028      	b.n	8103c8e <_ZN17ConnectionManager12sendDoIPInitEv+0xa2>
    }

    // Copy data to the buffer
    memcpy(p->payload, doipRequest, sizeof(doipRequest) - 1);
 8103c3c:	697b      	ldr	r3, [r7, #20]
 8103c3e:	685b      	ldr	r3, [r3, #4]
 8103c40:	f107 010c 	add.w	r1, r7, #12
 8103c44:	2206      	movs	r2, #6
 8103c46:	4618      	mov	r0, r3
 8103c48:	f020 fa77 	bl	812413a <memcpy>

    // Send DoIP
    if (udp_sendto(udp_pcb, p, &broadcastIp, UDP_PORT) != ERR_OK)
 8103c4c:	687b      	ldr	r3, [r7, #4]
 8103c4e:	6858      	ldr	r0, [r3, #4]
 8103c50:	f107 0208 	add.w	r2, r7, #8
 8103c54:	f641 239b 	movw	r3, #6811	@ 0x1a9b
 8103c58:	6979      	ldr	r1, [r7, #20]
 8103c5a:	f01e fc8b 	bl	8122574 <udp_sendto>
 8103c5e:	4603      	mov	r3, r0
 8103c60:	2b00      	cmp	r3, #0
 8103c62:	bf14      	ite	ne
 8103c64:	2301      	movne	r3, #1
 8103c66:	2300      	moveq	r3, #0
 8103c68:	b2db      	uxtb	r3, r3
 8103c6a:	2b00      	cmp	r3, #0
 8103c6c:	d00b      	beq.n	8103c86 <_ZN17ConnectionManager12sendDoIPInitEv+0x9a>
    {
        LOG_DEBUG("Failed to send DoIP init request.");
 8103c6e:	f7fd f98f 	bl	8100f90 <_ZN10LogPrinter8instanceEv>
 8103c72:	4603      	mov	r3, r0
 8103c74:	490b      	ldr	r1, [pc, #44]	@ (8103ca4 <_ZN17ConnectionManager12sendDoIPInitEv+0xb8>)
 8103c76:	4618      	mov	r0, r3
 8103c78:	f7fd f9b2 	bl	8100fe0 <_ZN10LogPrinter10printDebugEPKcz>
        pbuf_free(p);
 8103c7c:	6978      	ldr	r0, [r7, #20]
 8103c7e:	f017 fc2d 	bl	811b4dc <pbuf_free>
        return false;
 8103c82:	2300      	movs	r3, #0
 8103c84:	e003      	b.n	8103c8e <_ZN17ConnectionManager12sendDoIPInitEv+0xa2>
    }

    // Release the buffer
    pbuf_free(p);
 8103c86:	6978      	ldr	r0, [r7, #20]
 8103c88:	f017 fc28 	bl	811b4dc <pbuf_free>
    return true;
 8103c8c:	2301      	movs	r3, #1
}
 8103c8e:	4618      	mov	r0, r3
 8103c90:	3718      	adds	r7, #24
 8103c92:	46bd      	mov	sp, r7
 8103c94:	bd80      	pop	{r7, pc}
 8103c96:	bf00      	nop
 8103c98:	08124e20 	.word	0x08124e20
 8103c9c:	08124d60 	.word	0x08124d60
 8103ca0:	08124dd4 	.word	0x08124dd4
 8103ca4:	08124dfc 	.word	0x08124dfc

08103ca8 <_ZN17ConnectionManager15HandleUdpRecvCbEPvP7udp_pcbP4pbufPK8ip4_addrt>:

void ConnectionManager::HandleUdpRecvCb(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 8103ca8:	b590      	push	{r4, r7, lr}
 8103caa:	b0a1      	sub	sp, #132	@ 0x84
 8103cac:	af00      	add	r7, sp, #0
 8103cae:	60f8      	str	r0, [r7, #12]
 8103cb0:	60b9      	str	r1, [r7, #8]
 8103cb2:	607a      	str	r2, [r7, #4]
 8103cb4:	603b      	str	r3, [r7, #0]
    if (!p)
 8103cb6:	683b      	ldr	r3, [r7, #0]
 8103cb8:	2b00      	cmp	r3, #0
 8103cba:	d107      	bne.n	8103ccc <_ZN17ConnectionManager15HandleUdpRecvCbEPvP7udp_pcbP4pbufPK8ip4_addrt+0x24>
    {
        LOG_DEBUG("No data received, connection might be closed.");
 8103cbc:	f7fd f968 	bl	8100f90 <_ZN10LogPrinter8instanceEv>
 8103cc0:	4603      	mov	r3, r0
 8103cc2:	49b2      	ldr	r1, [pc, #712]	@ (8103f8c <_ZN17ConnectionManager15HandleUdpRecvCbEPvP7udp_pcbP4pbufPK8ip4_addrt+0x2e4>)
 8103cc4:	4618      	mov	r0, r3
 8103cc6:	f7fd f98b 	bl	8100fe0 <_ZN10LogPrinter10printDebugEPKcz>

        return;
 8103cca:	e19c      	b.n	8104006 <_ZN17ConnectionManager15HandleUdpRecvCbEPvP7udp_pcbP4pbufPK8ip4_addrt+0x35e>
    }

    LOG_DEBUG("Received UDP message from %s:%d", ipaddr_ntoa(addr), port);
 8103ccc:	f7fd f960 	bl	8100f90 <_ZN10LogPrinter8instanceEv>
 8103cd0:	4604      	mov	r4, r0
 8103cd2:	f8d7 0090 	ldr.w	r0, [r7, #144]	@ 0x90
 8103cd6:	f015 f99d 	bl	8119014 <ip4addr_ntoa>
 8103cda:	4602      	mov	r2, r0
 8103cdc:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8103ce0:	49ab      	ldr	r1, [pc, #684]	@ (8103f90 <_ZN17ConnectionManager15HandleUdpRecvCbEPvP7udp_pcbP4pbufPK8ip4_addrt+0x2e8>)
 8103ce2:	4620      	mov	r0, r4
 8103ce4:	f7fd f97c 	bl	8100fe0 <_ZN10LogPrinter10printDebugEPKcz>

    // Validate payload length
    if (p->len < 6)
 8103ce8:	683b      	ldr	r3, [r7, #0]
 8103cea:	895b      	ldrh	r3, [r3, #10]
 8103cec:	2b05      	cmp	r3, #5
 8103cee:	d80b      	bhi.n	8103d08 <_ZN17ConnectionManager15HandleUdpRecvCbEPvP7udp_pcbP4pbufPK8ip4_addrt+0x60>
    {
        LOG_DEBUG("Payload too short to process (length: %d bytes).", p->len);
 8103cf0:	f7fd f94e 	bl	8100f90 <_ZN10LogPrinter8instanceEv>
 8103cf4:	683b      	ldr	r3, [r7, #0]
 8103cf6:	895b      	ldrh	r3, [r3, #10]
 8103cf8:	461a      	mov	r2, r3
 8103cfa:	49a6      	ldr	r1, [pc, #664]	@ (8103f94 <_ZN17ConnectionManager15HandleUdpRecvCbEPvP7udp_pcbP4pbufPK8ip4_addrt+0x2ec>)
 8103cfc:	f7fd f970 	bl	8100fe0 <_ZN10LogPrinter10printDebugEPKcz>
        pbuf_free(p);
 8103d00:	6838      	ldr	r0, [r7, #0]
 8103d02:	f017 fbeb 	bl	811b4dc <pbuf_free>
        return;
 8103d06:	e17e      	b.n	8104006 <_ZN17ConnectionManager15HandleUdpRecvCbEPvP7udp_pcbP4pbufPK8ip4_addrt+0x35e>
    }

    // Cast payload to a uint8_t array for easier processing
    uint8_t *payload = (uint8_t *)p->payload;
 8103d08:	683b      	ldr	r3, [r7, #0]
 8103d0a:	685b      	ldr	r3, [r3, #4]
 8103d0c:	67bb      	str	r3, [r7, #120]	@ 0x78

    // Validate frame type based on first 4 bytes (we expected a specific DoIP identification frame)
    if (!(payload[0] == 0x00 && payload[1] == 0x00 && payload[2] == 0x00 && payload[3] == 0x32))
 8103d0e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8103d10:	781b      	ldrb	r3, [r3, #0]
 8103d12:	2b00      	cmp	r3, #0
 8103d14:	d10e      	bne.n	8103d34 <_ZN17ConnectionManager15HandleUdpRecvCbEPvP7udp_pcbP4pbufPK8ip4_addrt+0x8c>
 8103d16:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8103d18:	3301      	adds	r3, #1
 8103d1a:	781b      	ldrb	r3, [r3, #0]
 8103d1c:	2b00      	cmp	r3, #0
 8103d1e:	d109      	bne.n	8103d34 <_ZN17ConnectionManager15HandleUdpRecvCbEPvP7udp_pcbP4pbufPK8ip4_addrt+0x8c>
 8103d20:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8103d22:	3302      	adds	r3, #2
 8103d24:	781b      	ldrb	r3, [r3, #0]
 8103d26:	2b00      	cmp	r3, #0
 8103d28:	d104      	bne.n	8103d34 <_ZN17ConnectionManager15HandleUdpRecvCbEPvP7udp_pcbP4pbufPK8ip4_addrt+0x8c>
 8103d2a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8103d2c:	3303      	adds	r3, #3
 8103d2e:	781b      	ldrb	r3, [r3, #0]
 8103d30:	2b32      	cmp	r3, #50	@ 0x32
 8103d32:	d00a      	beq.n	8103d4a <_ZN17ConnectionManager15HandleUdpRecvCbEPvP7udp_pcbP4pbufPK8ip4_addrt+0xa2>
    {
        LOG_DEBUG("Unexpected frame type received, ignoring.");
 8103d34:	f7fd f92c 	bl	8100f90 <_ZN10LogPrinter8instanceEv>
 8103d38:	4603      	mov	r3, r0
 8103d3a:	4997      	ldr	r1, [pc, #604]	@ (8103f98 <_ZN17ConnectionManager15HandleUdpRecvCbEPvP7udp_pcbP4pbufPK8ip4_addrt+0x2f0>)
 8103d3c:	4618      	mov	r0, r3
 8103d3e:	f7fd f94f 	bl	8100fe0 <_ZN10LogPrinter10printDebugEPKcz>
        pbuf_free(p);
 8103d42:	6838      	ldr	r0, [r7, #0]
 8103d44:	f017 fbca 	bl	811b4dc <pbuf_free>
        return;
 8103d48:	e15d      	b.n	8104006 <_ZN17ConnectionManager15HandleUdpRecvCbEPvP7udp_pcbP4pbufPK8ip4_addrt+0x35e>
    }

    // Extract length (first 4 bytes) and validate against p->len
    uint32_t dataLength = (payload[0] << 24) | (payload[1] << 16) | (payload[2] << 8) | payload[3];
 8103d4a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8103d4c:	781b      	ldrb	r3, [r3, #0]
 8103d4e:	061a      	lsls	r2, r3, #24
 8103d50:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8103d52:	3301      	adds	r3, #1
 8103d54:	781b      	ldrb	r3, [r3, #0]
 8103d56:	041b      	lsls	r3, r3, #16
 8103d58:	431a      	orrs	r2, r3
 8103d5a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8103d5c:	3302      	adds	r3, #2
 8103d5e:	781b      	ldrb	r3, [r3, #0]
 8103d60:	021b      	lsls	r3, r3, #8
 8103d62:	4313      	orrs	r3, r2
 8103d64:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8103d66:	3203      	adds	r2, #3
 8103d68:	7812      	ldrb	r2, [r2, #0]
 8103d6a:	4313      	orrs	r3, r2
 8103d6c:	677b      	str	r3, [r7, #116]	@ 0x74
    // 6 bytes for header (length + type)
    if (dataLength + 6 > p->len)
 8103d6e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8103d70:	3306      	adds	r3, #6
 8103d72:	683a      	ldr	r2, [r7, #0]
 8103d74:	8952      	ldrh	r2, [r2, #10]
 8103d76:	4293      	cmp	r3, r2
 8103d78:	d90b      	bls.n	8103d92 <_ZN17ConnectionManager15HandleUdpRecvCbEPvP7udp_pcbP4pbufPK8ip4_addrt+0xea>
    {
        LOG_DEBUG("Data length mismatch: declared %u, received %u.", dataLength, p->len);
 8103d7a:	f7fd f909 	bl	8100f90 <_ZN10LogPrinter8instanceEv>
 8103d7e:	683b      	ldr	r3, [r7, #0]
 8103d80:	895b      	ldrh	r3, [r3, #10]
 8103d82:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8103d84:	4985      	ldr	r1, [pc, #532]	@ (8103f9c <_ZN17ConnectionManager15HandleUdpRecvCbEPvP7udp_pcbP4pbufPK8ip4_addrt+0x2f4>)
 8103d86:	f7fd f92b 	bl	8100fe0 <_ZN10LogPrinter10printDebugEPKcz>
        pbuf_free(p);
 8103d8a:	6838      	ldr	r0, [r7, #0]
 8103d8c:	f017 fba6 	bl	811b4dc <pbuf_free>
        return;
 8103d90:	e139      	b.n	8104006 <_ZN17ConnectionManager15HandleUdpRecvCbEPvP7udp_pcbP4pbufPK8ip4_addrt+0x35e>
    }

    // Process diagnostic data if available
    if (p->len > 14)
 8103d92:	683b      	ldr	r3, [r7, #0]
 8103d94:	895b      	ldrh	r3, [r3, #10]
 8103d96:	2b0e      	cmp	r3, #14
 8103d98:	f240 812a 	bls.w	8103ff0 <_ZN17ConnectionManager15HandleUdpRecvCbEPvP7udp_pcbP4pbufPK8ip4_addrt+0x348>
    {
        uint8_t *diagnosticData = &payload[14];
 8103d9c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8103d9e:	330e      	adds	r3, #14
 8103da0:	673b      	str	r3, [r7, #112]	@ 0x70
        size_t diagnosticDataLen = p->len - 14;
 8103da2:	683b      	ldr	r3, [r7, #0]
 8103da4:	895b      	ldrh	r3, [r3, #10]
 8103da6:	3b0e      	subs	r3, #14
 8103da8:	66fb      	str	r3, [r7, #108]	@ 0x6c

        // Search for MAC and VIN keywords
        char *macStart = (char *)strstr((char *)diagnosticData, "MAC");
 8103daa:	497d      	ldr	r1, [pc, #500]	@ (8103fa0 <_ZN17ConnectionManager15HandleUdpRecvCbEPvP7udp_pcbP4pbufPK8ip4_addrt+0x2f8>)
 8103dac:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8103dae:	f020 f890 	bl	8123ed2 <strstr>
 8103db2:	66b8      	str	r0, [r7, #104]	@ 0x68
        char *vinStart = (char *)strstr((char *)diagnosticData, "VIN");
 8103db4:	497b      	ldr	r1, [pc, #492]	@ (8103fa4 <_ZN17ConnectionManager15HandleUdpRecvCbEPvP7udp_pcbP4pbufPK8ip4_addrt+0x2fc>)
 8103db6:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8103db8:	f020 f88b 	bl	8123ed2 <strstr>
 8103dbc:	6678      	str	r0, [r7, #100]	@ 0x64

        if (macStart && vinStart)
 8103dbe:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8103dc0:	2b00      	cmp	r3, #0
 8103dc2:	f000 810d 	beq.w	8103fe0 <_ZN17ConnectionManager15HandleUdpRecvCbEPvP7udp_pcbP4pbufPK8ip4_addrt+0x338>
 8103dc6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8103dc8:	2b00      	cmp	r3, #0
 8103dca:	f000 8109 	beq.w	8103fe0 <_ZN17ConnectionManager15HandleUdpRecvCbEPvP7udp_pcbP4pbufPK8ip4_addrt+0x338>
        {
            macStart += strlen("MAC");
 8103dce:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8103dd0:	3303      	adds	r3, #3
 8103dd2:	66bb      	str	r3, [r7, #104]	@ 0x68
            vinStart += strlen("VIN");
 8103dd4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8103dd6:	3303      	adds	r3, #3
 8103dd8:	667b      	str	r3, [r7, #100]	@ 0x64

            // Safely extract MAC Address (12 characters)
            if (macStart + 12 <= (char *)diagnosticData + diagnosticDataLen)
 8103dda:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8103ddc:	f103 020c 	add.w	r2, r3, #12
 8103de0:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 8103de2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8103de4:	440b      	add	r3, r1
 8103de6:	429a      	cmp	r2, r3
 8103de8:	d871      	bhi.n	8103ece <_ZN17ConnectionManager15HandleUdpRecvCbEPvP7udp_pcbP4pbufPK8ip4_addrt+0x226>
            {
                char macAddressStr[13] = {0};
 8103dea:	2300      	movs	r3, #0
 8103dec:	657b      	str	r3, [r7, #84]	@ 0x54
 8103dee:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8103df2:	2200      	movs	r2, #0
 8103df4:	601a      	str	r2, [r3, #0]
 8103df6:	605a      	str	r2, [r3, #4]
 8103df8:	721a      	strb	r2, [r3, #8]
                strncpy(macAddressStr, macStart, 12);
 8103dfa:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8103dfe:	220c      	movs	r2, #12
 8103e00:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8103e02:	4618      	mov	r0, r3
 8103e04:	f020 f852 	bl	8123eac <strncpy>

                //convert to format accepted by lwip arp
                uint8_t ecuMac[6] = {0};
 8103e08:	2300      	movs	r3, #0
 8103e0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8103e0c:	2300      	movs	r3, #0
 8103e0e:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
                for (int i = 0; i < 6; i++)
 8103e12:	2300      	movs	r3, #0
 8103e14:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8103e16:	e022      	b.n	8103e5e <_ZN17ConnectionManager15HandleUdpRecvCbEPvP7udp_pcbP4pbufPK8ip4_addrt+0x1b6>
                {
                    if (sscanf(&macAddressStr[i * 2], "%2hhx", &ecuMac[i]) != 1)
 8103e18:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8103e1a:	005b      	lsls	r3, r3, #1
 8103e1c:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 8103e20:	18d0      	adds	r0, r2, r3
 8103e22:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 8103e26:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8103e28:	4413      	add	r3, r2
 8103e2a:	461a      	mov	r2, r3
 8103e2c:	495e      	ldr	r1, [pc, #376]	@ (8103fa8 <_ZN17ConnectionManager15HandleUdpRecvCbEPvP7udp_pcbP4pbufPK8ip4_addrt+0x300>)
 8103e2e:	f01f ff07 	bl	8123c40 <siscanf>
 8103e32:	4603      	mov	r3, r0
 8103e34:	2b01      	cmp	r3, #1
 8103e36:	bf14      	ite	ne
 8103e38:	2301      	movne	r3, #1
 8103e3a:	2300      	moveq	r3, #0
 8103e3c:	b2db      	uxtb	r3, r3
 8103e3e:	2b00      	cmp	r3, #0
 8103e40:	d00a      	beq.n	8103e58 <_ZN17ConnectionManager15HandleUdpRecvCbEPvP7udp_pcbP4pbufPK8ip4_addrt+0x1b0>
                    {
                        LOG_DEBUG("Failed to parse MAC address.");
 8103e42:	f7fd f8a5 	bl	8100f90 <_ZN10LogPrinter8instanceEv>
 8103e46:	4603      	mov	r3, r0
 8103e48:	4958      	ldr	r1, [pc, #352]	@ (8103fac <_ZN17ConnectionManager15HandleUdpRecvCbEPvP7udp_pcbP4pbufPK8ip4_addrt+0x304>)
 8103e4a:	4618      	mov	r0, r3
 8103e4c:	f7fd f8c8 	bl	8100fe0 <_ZN10LogPrinter10printDebugEPKcz>
                        pbuf_free(p);
 8103e50:	6838      	ldr	r0, [r7, #0]
 8103e52:	f017 fb43 	bl	811b4dc <pbuf_free>
 8103e56:	e0d6      	b.n	8104006 <_ZN17ConnectionManager15HandleUdpRecvCbEPvP7udp_pcbP4pbufPK8ip4_addrt+0x35e>
                for (int i = 0; i < 6; i++)
 8103e58:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8103e5a:	3301      	adds	r3, #1
 8103e5c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8103e5e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8103e60:	2b05      	cmp	r3, #5
 8103e62:	ddd9      	ble.n	8103e18 <_ZN17ConnectionManager15HandleUdpRecvCbEPvP7udp_pcbP4pbufPK8ip4_addrt+0x170>
                        return;
                    }
                }
                LOG_DEBUG("Extracted MAC Address: %s", macAddressStr);
 8103e64:	f7fd f894 	bl	8100f90 <_ZN10LogPrinter8instanceEv>
 8103e68:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8103e6c:	461a      	mov	r2, r3
 8103e6e:	4950      	ldr	r1, [pc, #320]	@ (8103fb0 <_ZN17ConnectionManager15HandleUdpRecvCbEPvP7udp_pcbP4pbufPK8ip4_addrt+0x308>)
 8103e70:	f7fd f8b6 	bl	8100fe0 <_ZN10LogPrinter10printDebugEPKcz>

                // Add a static ARP entry for ECU
                struct eth_addr ethMac;
                memcpy(ethMac.addr, ecuMac, 6);
 8103e74:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8103e78:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 8103e7c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8103e80:	6018      	str	r0, [r3, #0]
 8103e82:	3304      	adds	r3, #4
 8103e84:	8019      	strh	r1, [r3, #0]
                if (etharp_add_static_entry(addr, &ethMac) == ERR_OK)
 8103e86:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8103e8a:	4619      	mov	r1, r3
 8103e8c:	f8d7 0090 	ldr.w	r0, [r7, #144]	@ 0x90
 8103e90:	f013 fca6 	bl	81177e0 <etharp_add_static_entry>
 8103e94:	4603      	mov	r3, r0
 8103e96:	2b00      	cmp	r3, #0
 8103e98:	bf0c      	ite	eq
 8103e9a:	2301      	moveq	r3, #1
 8103e9c:	2300      	movne	r3, #0
 8103e9e:	b2db      	uxtb	r3, r3
 8103ea0:	2b00      	cmp	r3, #0
 8103ea2:	d00c      	beq.n	8103ebe <_ZN17ConnectionManager15HandleUdpRecvCbEPvP7udp_pcbP4pbufPK8ip4_addrt+0x216>
                {
                    LOG_DEBUG("ARP entry for ECU added successfully.");
 8103ea4:	f7fd f874 	bl	8100f90 <_ZN10LogPrinter8instanceEv>
 8103ea8:	4603      	mov	r3, r0
 8103eaa:	4942      	ldr	r1, [pc, #264]	@ (8103fb4 <_ZN17ConnectionManager15HandleUdpRecvCbEPvP7udp_pcbP4pbufPK8ip4_addrt+0x30c>)
 8103eac:	4618      	mov	r0, r3
 8103eae:	f7fd f897 	bl	8100fe0 <_ZN10LogPrinter10printDebugEPKcz>
                    ecu_ip_addr = *addr;
 8103eb2:	68fb      	ldr	r3, [r7, #12]
 8103eb4:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8103eb8:	6812      	ldr	r2, [r2, #0]
 8103eba:	601a      	str	r2, [r3, #0]
 8103ebc:	e00e      	b.n	8103edc <_ZN17ConnectionManager15HandleUdpRecvCbEPvP7udp_pcbP4pbufPK8ip4_addrt+0x234>
                }
                else
                {
                    LOG_DEBUG("Failed to add ARP entry for ECU.");
 8103ebe:	f7fd f867 	bl	8100f90 <_ZN10LogPrinter8instanceEv>
 8103ec2:	4603      	mov	r3, r0
 8103ec4:	493c      	ldr	r1, [pc, #240]	@ (8103fb8 <_ZN17ConnectionManager15HandleUdpRecvCbEPvP7udp_pcbP4pbufPK8ip4_addrt+0x310>)
 8103ec6:	4618      	mov	r0, r3
 8103ec8:	f7fd f88a 	bl	8100fe0 <_ZN10LogPrinter10printDebugEPKcz>
 8103ecc:	e006      	b.n	8103edc <_ZN17ConnectionManager15HandleUdpRecvCbEPvP7udp_pcbP4pbufPK8ip4_addrt+0x234>
                }
            }
            else
            {
                LOG_DEBUG("MAC address extraction exceeds data boundaries.");
 8103ece:	f7fd f85f 	bl	8100f90 <_ZN10LogPrinter8instanceEv>
 8103ed2:	4603      	mov	r3, r0
 8103ed4:	4939      	ldr	r1, [pc, #228]	@ (8103fbc <_ZN17ConnectionManager15HandleUdpRecvCbEPvP7udp_pcbP4pbufPK8ip4_addrt+0x314>)
 8103ed6:	4618      	mov	r0, r3
 8103ed8:	f7fd f882 	bl	8100fe0 <_ZN10LogPrinter10printDebugEPKcz>
            }

            // Safely extract VIN (17 characters)
            if (vinStart + 17 <= (char *)diagnosticData + diagnosticDataLen)
 8103edc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8103ede:	f103 0211 	add.w	r2, r3, #17
 8103ee2:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 8103ee4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8103ee6:	440b      	add	r3, r1
 8103ee8:	429a      	cmp	r2, r3
 8103eea:	d871      	bhi.n	8103fd0 <_ZN17ConnectionManager15HandleUdpRecvCbEPvP7udp_pcbP4pbufPK8ip4_addrt+0x328>
            {
                char vin[18] = {0};
 8103eec:	2300      	movs	r3, #0
 8103eee:	633b      	str	r3, [r7, #48]	@ 0x30
 8103ef0:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8103ef4:	2200      	movs	r2, #0
 8103ef6:	601a      	str	r2, [r3, #0]
 8103ef8:	605a      	str	r2, [r3, #4]
 8103efa:	609a      	str	r2, [r3, #8]
 8103efc:	819a      	strh	r2, [r3, #12]
                strncpy(vin, vinStart, 17);
 8103efe:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8103f02:	2211      	movs	r2, #17
 8103f04:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8103f06:	4618      	mov	r0, r3
 8103f08:	f01f ffd0 	bl	8123eac <strncpy>
                LOG_DEBUG("Extracted VIN: %s", vin);
 8103f0c:	f7fd f840 	bl	8100f90 <_ZN10LogPrinter8instanceEv>
 8103f10:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8103f14:	461a      	mov	r2, r3
 8103f16:	492a      	ldr	r1, [pc, #168]	@ (8103fc0 <_ZN17ConnectionManager15HandleUdpRecvCbEPvP7udp_pcbP4pbufPK8ip4_addrt+0x318>)
 8103f18:	f7fd f862 	bl	8100fe0 <_ZN10LogPrinter10printDebugEPKcz>

                EConnectionEvent connEvent = EVENT_DISCOVERY_COMPLETED;
 8103f1c:	2302      	movs	r3, #2
 8103f1e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
                if(xQueueSend(connectionEventsQueue, &(connEvent), static_cast<TickType_t>(10000)) != pdPASS)
 8103f22:	4b28      	ldr	r3, [pc, #160]	@ (8103fc4 <_ZN17ConnectionManager15HandleUdpRecvCbEPvP7udp_pcbP4pbufPK8ip4_addrt+0x31c>)
 8103f24:	6818      	ldr	r0, [r3, #0]
 8103f26:	f107 012f 	add.w	r1, r7, #47	@ 0x2f
 8103f2a:	2300      	movs	r3, #0
 8103f2c:	f242 7210 	movw	r2, #10000	@ 0x2710
 8103f30:	f010 f8e0 	bl	81140f4 <xQueueGenericSend>
 8103f34:	4603      	mov	r3, r0
 8103f36:	2b01      	cmp	r3, #1
 8103f38:	bf14      	ite	ne
 8103f3a:	2301      	movne	r3, #1
 8103f3c:	2300      	moveq	r3, #0
 8103f3e:	b2db      	uxtb	r3, r3
 8103f40:	2b00      	cmp	r3, #0
 8103f42:	d009      	beq.n	8103f58 <_ZN17ConnectionManager15HandleUdpRecvCbEPvP7udp_pcbP4pbufPK8ip4_addrt+0x2b0>
                {
                    //In this case do not notify app and just wait for another message from ecu to try on the next call
                    LOG_DEBUG("[FATAL ERROR] Could not send internal connection event: %d", connEvent);
 8103f44:	f7fd f824 	bl	8100f90 <_ZN10LogPrinter8instanceEv>
 8103f48:	4603      	mov	r3, r0
 8103f4a:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8103f4e:	491e      	ldr	r1, [pc, #120]	@ (8103fc8 <_ZN17ConnectionManager15HandleUdpRecvCbEPvP7udp_pcbP4pbufPK8ip4_addrt+0x320>)
 8103f50:	4618      	mov	r0, r3
 8103f52:	f7fd f845 	bl	8100fe0 <_ZN10LogPrinter10printDebugEPKcz>
 8103f56:	e056      	b.n	8104006 <_ZN17ConnectionManager15HandleUdpRecvCbEPvP7udp_pcbP4pbufPK8ip4_addrt+0x35e>
                    return;
                }
                
                SMessage msg;
                msg.event_type = EVENT_ECU_CONNECTION_INITIALISED;
 8103f58:	2380      	movs	r3, #128	@ 0x80
 8103f5a:	743b      	strb	r3, [r7, #16]
                msg.event_sender = EVENT_CLIENT_ETHERNET_CONNECTION_MANAGER;
 8103f5c:	2303      	movs	r3, #3
 8103f5e:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
                msg.event_receiver = EVENT_CLIENT_FRONTEND;
 8103f62:	2300      	movs	r3, #0
 8103f64:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
                strncpy(msg.message_data.ecu_connected_vin, vinStart, 17);
 8103f68:	f107 0310 	add.w	r3, r7, #16
 8103f6c:	3304      	adds	r3, #4
 8103f6e:	2211      	movs	r2, #17
 8103f70:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8103f72:	4618      	mov	r0, r3
 8103f74:	f01f ff9a 	bl	8123eac <strncpy>
                xQueueSend(queueToEventManagerCM4, &(msg), static_cast<TickType_t>(10000));
 8103f78:	4b14      	ldr	r3, [pc, #80]	@ (8103fcc <_ZN17ConnectionManager15HandleUdpRecvCbEPvP7udp_pcbP4pbufPK8ip4_addrt+0x324>)
 8103f7a:	6818      	ldr	r0, [r3, #0]
 8103f7c:	f107 0110 	add.w	r1, r7, #16
 8103f80:	2300      	movs	r3, #0
 8103f82:	f242 7210 	movw	r2, #10000	@ 0x2710
 8103f86:	f010 f8b5 	bl	81140f4 <xQueueGenericSend>
            }
            else
            {
                LOG_DEBUG("VIN extraction exceeds data boundaries.");
            }
        }
 8103f8a:	e039      	b.n	8104000 <_ZN17ConnectionManager15HandleUdpRecvCbEPvP7udp_pcbP4pbufPK8ip4_addrt+0x358>
 8103f8c:	08124e28 	.word	0x08124e28
 8103f90:	08124e58 	.word	0x08124e58
 8103f94:	08124e78 	.word	0x08124e78
 8103f98:	08124eac 	.word	0x08124eac
 8103f9c:	08124ed8 	.word	0x08124ed8
 8103fa0:	08124f08 	.word	0x08124f08
 8103fa4:	08124f0c 	.word	0x08124f0c
 8103fa8:	08124f10 	.word	0x08124f10
 8103fac:	08124f18 	.word	0x08124f18
 8103fb0:	08124f38 	.word	0x08124f38
 8103fb4:	08124f54 	.word	0x08124f54
 8103fb8:	08124f7c 	.word	0x08124f7c
 8103fbc:	08124fa0 	.word	0x08124fa0
 8103fc0:	08124fd0 	.word	0x08124fd0
 8103fc4:	10000294 	.word	0x10000294
 8103fc8:	08124fe4 	.word	0x08124fe4
 8103fcc:	100001cc 	.word	0x100001cc
                LOG_DEBUG("VIN extraction exceeds data boundaries.");
 8103fd0:	f7fc ffde 	bl	8100f90 <_ZN10LogPrinter8instanceEv>
 8103fd4:	4603      	mov	r3, r0
 8103fd6:	490d      	ldr	r1, [pc, #52]	@ (810400c <_ZN17ConnectionManager15HandleUdpRecvCbEPvP7udp_pcbP4pbufPK8ip4_addrt+0x364>)
 8103fd8:	4618      	mov	r0, r3
 8103fda:	f7fd f801 	bl	8100fe0 <_ZN10LogPrinter10printDebugEPKcz>
        }
 8103fde:	e00f      	b.n	8104000 <_ZN17ConnectionManager15HandleUdpRecvCbEPvP7udp_pcbP4pbufPK8ip4_addrt+0x358>
        else
        {
            LOG_DEBUG("MAC or VIN markers not found in diagnostic data.");
 8103fe0:	f7fc ffd6 	bl	8100f90 <_ZN10LogPrinter8instanceEv>
 8103fe4:	4603      	mov	r3, r0
 8103fe6:	490a      	ldr	r1, [pc, #40]	@ (8104010 <_ZN17ConnectionManager15HandleUdpRecvCbEPvP7udp_pcbP4pbufPK8ip4_addrt+0x368>)
 8103fe8:	4618      	mov	r0, r3
 8103fea:	f7fc fff9 	bl	8100fe0 <_ZN10LogPrinter10printDebugEPKcz>
 8103fee:	e007      	b.n	8104000 <_ZN17ConnectionManager15HandleUdpRecvCbEPvP7udp_pcbP4pbufPK8ip4_addrt+0x358>
        }
    }
    else
    {
        LOG_DEBUG("Payload too short to contain diagnostic data (length: %d bytes).", p->len);
 8103ff0:	f7fc ffce 	bl	8100f90 <_ZN10LogPrinter8instanceEv>
 8103ff4:	683b      	ldr	r3, [r7, #0]
 8103ff6:	895b      	ldrh	r3, [r3, #10]
 8103ff8:	461a      	mov	r2, r3
 8103ffa:	4906      	ldr	r1, [pc, #24]	@ (8104014 <_ZN17ConnectionManager15HandleUdpRecvCbEPvP7udp_pcbP4pbufPK8ip4_addrt+0x36c>)
 8103ffc:	f7fc fff0 	bl	8100fe0 <_ZN10LogPrinter10printDebugEPKcz>
    }

    // Free the received buffer
    pbuf_free(p);
 8104000:	6838      	ldr	r0, [r7, #0]
 8104002:	f017 fa6b 	bl	811b4dc <pbuf_free>
}
 8104006:	3784      	adds	r7, #132	@ 0x84
 8104008:	46bd      	mov	sp, r7
 810400a:	bd90      	pop	{r4, r7, pc}
 810400c:	08125020 	.word	0x08125020
 8104010:	08125048 	.word	0x08125048
 8104014:	0812507c 	.word	0x0812507c

08104018 <_ZN17ConnectionManager10udpConnectEv>:

void ConnectionManager::udpConnect()
{
 8104018:	b580      	push	{r7, lr}
 810401a:	b082      	sub	sp, #8
 810401c:	af00      	add	r7, sp, #0
 810401e:	6078      	str	r0, [r7, #4]
    udp_pcb = udp_new();
 8104020:	f01e fd48 	bl	8122ab4 <udp_new>
 8104024:	4602      	mov	r2, r0
 8104026:	687b      	ldr	r3, [r7, #4]
 8104028:	605a      	str	r2, [r3, #4]
    if (udp_pcb)
 810402a:	687b      	ldr	r3, [r7, #4]
 810402c:	685b      	ldr	r3, [r3, #4]
 810402e:	2b00      	cmp	r3, #0
 8104030:	d00e      	beq.n	8104050 <_ZN17ConnectionManager10udpConnectEv+0x38>
    {
        udp_bind(udp_pcb, IP_ADDR_ANY, 0);  // Bind PCB with any port
 8104032:	687b      	ldr	r3, [r7, #4]
 8104034:	685b      	ldr	r3, [r3, #4]
 8104036:	2200      	movs	r2, #0
 8104038:	490b      	ldr	r1, [pc, #44]	@ (8104068 <_ZN17ConnectionManager10udpConnectEv+0x50>)
 810403a:	4618      	mov	r0, r3
 810403c:	f01e fc50 	bl	81228e0 <udp_bind>
        udp_recv(udp_pcb, udpRecvCb, NULL);  // Register the UDP receiver callback (listen for car info)
 8104040:	687b      	ldr	r3, [r7, #4]
 8104042:	685b      	ldr	r3, [r3, #4]
 8104044:	2200      	movs	r2, #0
 8104046:	4909      	ldr	r1, [pc, #36]	@ (810406c <_ZN17ConnectionManager10udpConnectEv+0x54>)
 8104048:	4618      	mov	r0, r3
 810404a:	f01e fcd1 	bl	81229f0 <udp_recv>
    }
    else
    {
        LOG_DEBUG("Failed to create UDP PCB.");
    }
}
 810404e:	e006      	b.n	810405e <_ZN17ConnectionManager10udpConnectEv+0x46>
        LOG_DEBUG("Failed to create UDP PCB.");
 8104050:	f7fc ff9e 	bl	8100f90 <_ZN10LogPrinter8instanceEv>
 8104054:	4603      	mov	r3, r0
 8104056:	4906      	ldr	r1, [pc, #24]	@ (8104070 <_ZN17ConnectionManager10udpConnectEv+0x58>)
 8104058:	4618      	mov	r0, r3
 810405a:	f7fc ffc1 	bl	8100fe0 <_ZN10LogPrinter10printDebugEPKcz>
}
 810405e:	bf00      	nop
 8104060:	3708      	adds	r7, #8
 8104062:	46bd      	mov	sp, r7
 8104064:	bd80      	pop	{r7, pc}
 8104066:	bf00      	nop
 8104068:	08128434 	.word	0x08128434
 810406c:	08103a37 	.word	0x08103a37
 8104070:	081250c0 	.word	0x081250c0

08104074 <_ZN17ConnectionManager13udpDisconnectEv>:


void ConnectionManager::udpDisconnect()
{
 8104074:	b580      	push	{r7, lr}
 8104076:	b082      	sub	sp, #8
 8104078:	af00      	add	r7, sp, #0
 810407a:	6078      	str	r0, [r7, #4]
    if (udp_pcb != nullptr)
 810407c:	687b      	ldr	r3, [r7, #4]
 810407e:	685b      	ldr	r3, [r3, #4]
 8104080:	2b00      	cmp	r3, #0
 8104082:	d016      	beq.n	81040b2 <_ZN17ConnectionManager13udpDisconnectEv+0x3e>
    {
        // Unregister callbacks
        udp_recv(udp_pcb, nullptr, nullptr); // Wyrejestrowanie callbacka
 8104084:	687b      	ldr	r3, [r7, #4]
 8104086:	685b      	ldr	r3, [r3, #4]
 8104088:	2200      	movs	r2, #0
 810408a:	2100      	movs	r1, #0
 810408c:	4618      	mov	r0, r3
 810408e:	f01e fcaf 	bl	81229f0 <udp_recv>
        // Close connection
        udp_remove(udp_pcb);
 8104092:	687b      	ldr	r3, [r7, #4]
 8104094:	685b      	ldr	r3, [r3, #4]
 8104096:	4618      	mov	r0, r3
 8104098:	f01e fcca 	bl	8122a30 <udp_remove>
        udp_pcb = nullptr;
 810409c:	687b      	ldr	r3, [r7, #4]
 810409e:	2200      	movs	r2, #0
 81040a0:	605a      	str	r2, [r3, #4]
        LOG_DEBUG("UDP PCB removed and callback unregistered.");
 81040a2:	f7fc ff75 	bl	8100f90 <_ZN10LogPrinter8instanceEv>
 81040a6:	4603      	mov	r3, r0
 81040a8:	4907      	ldr	r1, [pc, #28]	@ (81040c8 <_ZN17ConnectionManager13udpDisconnectEv+0x54>)
 81040aa:	4618      	mov	r0, r3
 81040ac:	f7fc ff98 	bl	8100fe0 <_ZN10LogPrinter10printDebugEPKcz>
    }
    else
    {
        LOG_DEBUG("udp_pcb is already null, skipping removal.");
    }
}
 81040b0:	e006      	b.n	81040c0 <_ZN17ConnectionManager13udpDisconnectEv+0x4c>
        LOG_DEBUG("udp_pcb is already null, skipping removal.");
 81040b2:	f7fc ff6d 	bl	8100f90 <_ZN10LogPrinter8instanceEv>
 81040b6:	4603      	mov	r3, r0
 81040b8:	4904      	ldr	r1, [pc, #16]	@ (81040cc <_ZN17ConnectionManager13udpDisconnectEv+0x58>)
 81040ba:	4618      	mov	r0, r3
 81040bc:	f7fc ff90 	bl	8100fe0 <_ZN10LogPrinter10printDebugEPKcz>
}
 81040c0:	bf00      	nop
 81040c2:	3708      	adds	r7, #8
 81040c4:	46bd      	mov	sp, r7
 81040c6:	bd80      	pop	{r7, pc}
 81040c8:	081250dc 	.word	0x081250dc
 81040cc:	08125108 	.word	0x08125108

081040d0 <_ZN17ConnectionManager10tcpConnectEv>:

bool ConnectionManager::tcpConnect()
{
 81040d0:	b580      	push	{r7, lr}
 81040d2:	b084      	sub	sp, #16
 81040d4:	af00      	add	r7, sp, #0
 81040d6:	6078      	str	r0, [r7, #4]
    LOCK_TCPIP_CORE();
 81040d8:	483a      	ldr	r0, [pc, #232]	@ (81041c4 <_ZN17ConnectionManager10tcpConnectEv+0xf4>)
 81040da:	f017 fd41 	bl	811bb60 <sys_mutex_lock>
	tcp_pcb = tcp_new();
 81040de:	f019 f975 	bl	811d3cc <tcp_new>
 81040e2:	4602      	mov	r2, r0
 81040e4:	687b      	ldr	r3, [r7, #4]
 81040e6:	609a      	str	r2, [r3, #8]
    if (!tcp_pcb)
 81040e8:	687b      	ldr	r3, [r7, #4]
 81040ea:	689b      	ldr	r3, [r3, #8]
 81040ec:	2b00      	cmp	r3, #0
 81040ee:	d10b      	bne.n	8104108 <_ZN17ConnectionManager10tcpConnectEv+0x38>
    {
        LOG_DEBUG("Failed to create TCP PCB.");
 81040f0:	f7fc ff4e 	bl	8100f90 <_ZN10LogPrinter8instanceEv>
 81040f4:	4603      	mov	r3, r0
 81040f6:	4934      	ldr	r1, [pc, #208]	@ (81041c8 <_ZN17ConnectionManager10tcpConnectEv+0xf8>)
 81040f8:	4618      	mov	r0, r3
 81040fa:	f7fc ff71 	bl	8100fe0 <_ZN10LogPrinter10printDebugEPKcz>
        UNLOCK_TCPIP_CORE();
 81040fe:	4831      	ldr	r0, [pc, #196]	@ (81041c4 <_ZN17ConnectionManager10tcpConnectEv+0xf4>)
 8104100:	f017 fd3d 	bl	811bb7e <sys_mutex_unlock>
        return false;
 8104104:	2300      	movs	r3, #0
 8104106:	e059      	b.n	81041bc <_ZN17ConnectionManager10tcpConnectEv+0xec>
    }

    tcp_nagle_disable(tcp_pcb);
 8104108:	687b      	ldr	r3, [r7, #4]
 810410a:	689b      	ldr	r3, [r3, #8]
 810410c:	8b5a      	ldrh	r2, [r3, #26]
 810410e:	687b      	ldr	r3, [r7, #4]
 8104110:	689b      	ldr	r3, [r3, #8]
 8104112:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8104116:	b292      	uxth	r2, r2
 8104118:	835a      	strh	r2, [r3, #26]

    err_t bindErr = tcp_bind(tcp_pcb, IP_ADDR_ANY, 0); // Automatically assign port number
 810411a:	687b      	ldr	r3, [r7, #4]
 810411c:	689b      	ldr	r3, [r3, #8]
 810411e:	2200      	movs	r2, #0
 8104120:	492a      	ldr	r1, [pc, #168]	@ (81041cc <_ZN17ConnectionManager10tcpConnectEv+0xfc>)
 8104122:	4618      	mov	r0, r3
 8104124:	f018 f87c 	bl	811c220 <tcp_bind>
 8104128:	4603      	mov	r3, r0
 810412a:	73fb      	strb	r3, [r7, #15]
    if (bindErr != ERR_OK)
 810412c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8104130:	2b00      	cmp	r3, #0
 8104132:	d00f      	beq.n	8104154 <_ZN17ConnectionManager10tcpConnectEv+0x84>
    {
        LOG_DEBUG("Failed to bind TCP PCB: %d", bindErr);
 8104134:	f7fc ff2c 	bl	8100f90 <_ZN10LogPrinter8instanceEv>
 8104138:	f997 300f 	ldrsb.w	r3, [r7, #15]
 810413c:	461a      	mov	r2, r3
 810413e:	4924      	ldr	r1, [pc, #144]	@ (81041d0 <_ZN17ConnectionManager10tcpConnectEv+0x100>)
 8104140:	f7fc ff4e 	bl	8100fe0 <_ZN10LogPrinter10printDebugEPKcz>
        tcpDisconnect();
 8104144:	6878      	ldr	r0, [r7, #4]
 8104146:	f000 f84d 	bl	81041e4 <_ZN17ConnectionManager13tcpDisconnectEv>
        UNLOCK_TCPIP_CORE();
 810414a:	481e      	ldr	r0, [pc, #120]	@ (81041c4 <_ZN17ConnectionManager10tcpConnectEv+0xf4>)
 810414c:	f017 fd17 	bl	811bb7e <sys_mutex_unlock>
        return false;
 8104150:	2300      	movs	r3, #0
 8104152:	e033      	b.n	81041bc <_ZN17ConnectionManager10tcpConnectEv+0xec>
    }
    // callback registration
    tcp_arg(tcp_pcb, NULL);
 8104154:	687b      	ldr	r3, [r7, #4]
 8104156:	689b      	ldr	r3, [r3, #8]
 8104158:	2100      	movs	r1, #0
 810415a:	4618      	mov	r0, r3
 810415c:	f019 f93e 	bl	811d3dc <tcp_arg>
    tcp_recv(tcp_pcb, tcpRecvCb);
 8104160:	687b      	ldr	r3, [r7, #4]
 8104162:	689b      	ldr	r3, [r3, #8]
 8104164:	491b      	ldr	r1, [pc, #108]	@ (81041d4 <_ZN17ConnectionManager10tcpConnectEv+0x104>)
 8104166:	4618      	mov	r0, r3
 8104168:	f019 f94a 	bl	811d400 <tcp_recv>
    tcp_err(tcp_pcb, tcpErrCb);
 810416c:	687b      	ldr	r3, [r7, #4]
 810416e:	689b      	ldr	r3, [r3, #8]
 8104170:	4919      	ldr	r1, [pc, #100]	@ (81041d8 <_ZN17ConnectionManager10tcpConnectEv+0x108>)
 8104172:	4618      	mov	r0, r3
 8104174:	f019 f966 	bl	811d444 <tcp_err>

    // establishing connection
    err_t err = tcp_connect(tcp_pcb, &ecu_ip_addr, TCP_PORT_ECU, tcpConnectCb);
 8104178:	687b      	ldr	r3, [r7, #4]
 810417a:	6898      	ldr	r0, [r3, #8]
 810417c:	6879      	ldr	r1, [r7, #4]
 810417e:	4b17      	ldr	r3, [pc, #92]	@ (81041dc <_ZN17ConnectionManager10tcpConnectEv+0x10c>)
 8104180:	f641 2291 	movw	r2, #6801	@ 0x1a91
 8104184:	f018 f9d2 	bl	811c52c <tcp_connect>
 8104188:	4603      	mov	r3, r0
 810418a:	73bb      	strb	r3, [r7, #14]
    if (err != ERR_OK)
 810418c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8104190:	2b00      	cmp	r3, #0
 8104192:	d00f      	beq.n	81041b4 <_ZN17ConnectionManager10tcpConnectEv+0xe4>
    {
        LOG_DEBUG("Failed to connect to ECU: %d", err);
 8104194:	f7fc fefc 	bl	8100f90 <_ZN10LogPrinter8instanceEv>
 8104198:	f997 300e 	ldrsb.w	r3, [r7, #14]
 810419c:	461a      	mov	r2, r3
 810419e:	4910      	ldr	r1, [pc, #64]	@ (81041e0 <_ZN17ConnectionManager10tcpConnectEv+0x110>)
 81041a0:	f7fc ff1e 	bl	8100fe0 <_ZN10LogPrinter10printDebugEPKcz>
        tcpDisconnect();
 81041a4:	6878      	ldr	r0, [r7, #4]
 81041a6:	f000 f81d 	bl	81041e4 <_ZN17ConnectionManager13tcpDisconnectEv>
        UNLOCK_TCPIP_CORE();
 81041aa:	4806      	ldr	r0, [pc, #24]	@ (81041c4 <_ZN17ConnectionManager10tcpConnectEv+0xf4>)
 81041ac:	f017 fce7 	bl	811bb7e <sys_mutex_unlock>
        return false;
 81041b0:	2300      	movs	r3, #0
 81041b2:	e003      	b.n	81041bc <_ZN17ConnectionManager10tcpConnectEv+0xec>
    }
    UNLOCK_TCPIP_CORE();
 81041b4:	4803      	ldr	r0, [pc, #12]	@ (81041c4 <_ZN17ConnectionManager10tcpConnectEv+0xf4>)
 81041b6:	f017 fce2 	bl	811bb7e <sys_mutex_unlock>
    return true;
 81041ba:	2301      	movs	r3, #1
}
 81041bc:	4618      	mov	r0, r3
 81041be:	3710      	adds	r7, #16
 81041c0:	46bd      	mov	sp, r7
 81041c2:	bd80      	pop	{r7, pc}
 81041c4:	1000e4f4 	.word	0x1000e4f4
 81041c8:	08125134 	.word	0x08125134
 81041cc:	08128434 	.word	0x08128434
 81041d0:	08125150 	.word	0x08125150
 81041d4:	081039b3 	.word	0x081039b3
 81041d8:	08103a0f 	.word	0x08103a0f
 81041dc:	081039e3 	.word	0x081039e3
 81041e0:	0812516c 	.word	0x0812516c

081041e4 <_ZN17ConnectionManager13tcpDisconnectEv>:


void ConnectionManager::tcpDisconnect()
{
 81041e4:	b580      	push	{r7, lr}
 81041e6:	b082      	sub	sp, #8
 81041e8:	af00      	add	r7, sp, #0
 81041ea:	6078      	str	r0, [r7, #4]
    LOCK_TCPIP_CORE();
 81041ec:	481b      	ldr	r0, [pc, #108]	@ (810425c <_ZN17ConnectionManager13tcpDisconnectEv+0x78>)
 81041ee:	f017 fcb7 	bl	811bb60 <sys_mutex_lock>
    if (tcp_pcb != nullptr)
 81041f2:	687b      	ldr	r3, [r7, #4]
 81041f4:	689b      	ldr	r3, [r3, #8]
 81041f6:	2b00      	cmp	r3, #0
 81041f8:	d021      	beq.n	810423e <_ZN17ConnectionManager13tcpDisconnectEv+0x5a>
    {
        // Unregister callbacks
        tcp_arg(tcp_pcb, nullptr);
 81041fa:	687b      	ldr	r3, [r7, #4]
 81041fc:	689b      	ldr	r3, [r3, #8]
 81041fe:	2100      	movs	r1, #0
 8104200:	4618      	mov	r0, r3
 8104202:	f019 f8eb 	bl	811d3dc <tcp_arg>
        tcp_recv(tcp_pcb, nullptr);
 8104206:	687b      	ldr	r3, [r7, #4]
 8104208:	689b      	ldr	r3, [r3, #8]
 810420a:	2100      	movs	r1, #0
 810420c:	4618      	mov	r0, r3
 810420e:	f019 f8f7 	bl	811d400 <tcp_recv>
        tcp_err(tcp_pcb, nullptr);
 8104212:	687b      	ldr	r3, [r7, #4]
 8104214:	689b      	ldr	r3, [r3, #8]
 8104216:	2100      	movs	r1, #0
 8104218:	4618      	mov	r0, r3
 810421a:	f019 f913 	bl	811d444 <tcp_err>
        // Close connection
        tcp_close(tcp_pcb);
 810421e:	687b      	ldr	r3, [r7, #4]
 8104220:	689b      	ldr	r3, [r3, #8]
 8104222:	4618      	mov	r0, r3
 8104224:	f017 ff06 	bl	811c034 <tcp_close>
        tcp_pcb = nullptr;
 8104228:	687b      	ldr	r3, [r7, #4]
 810422a:	2200      	movs	r2, #0
 810422c:	609a      	str	r2, [r3, #8]
        LOG_DEBUG("TCP PCB closed and callbacks unregistered.");
 810422e:	f7fc feaf 	bl	8100f90 <_ZN10LogPrinter8instanceEv>
 8104232:	4603      	mov	r3, r0
 8104234:	490a      	ldr	r1, [pc, #40]	@ (8104260 <_ZN17ConnectionManager13tcpDisconnectEv+0x7c>)
 8104236:	4618      	mov	r0, r3
 8104238:	f7fc fed2 	bl	8100fe0 <_ZN10LogPrinter10printDebugEPKcz>
 810423c:	e006      	b.n	810424c <_ZN17ConnectionManager13tcpDisconnectEv+0x68>
    }
    else
    {
        LOG_DEBUG("tcp_pcb is already null, skipping disconnection.");
 810423e:	f7fc fea7 	bl	8100f90 <_ZN10LogPrinter8instanceEv>
 8104242:	4603      	mov	r3, r0
 8104244:	4907      	ldr	r1, [pc, #28]	@ (8104264 <_ZN17ConnectionManager13tcpDisconnectEv+0x80>)
 8104246:	4618      	mov	r0, r3
 8104248:	f7fc feca 	bl	8100fe0 <_ZN10LogPrinter10printDebugEPKcz>
    }
    UNLOCK_TCPIP_CORE();
 810424c:	4803      	ldr	r0, [pc, #12]	@ (810425c <_ZN17ConnectionManager13tcpDisconnectEv+0x78>)
 810424e:	f017 fc96 	bl	811bb7e <sys_mutex_unlock>
}
 8104252:	bf00      	nop
 8104254:	3708      	adds	r7, #8
 8104256:	46bd      	mov	sp, r7
 8104258:	bd80      	pop	{r7, pc}
 810425a:	bf00      	nop
 810425c:	1000e4f4 	.word	0x1000e4f4
 8104260:	0812518c 	.word	0x0812518c
 8104264:	081251b8 	.word	0x081251b8

08104268 <_ZN17ConnectionManager15HandleTcpRecvCbEPvP7tcp_pcbP4pbufa>:

void ConnectionManager::HandleTcpRecvCb(void *arg, struct tcp_pcb *tpcb, struct pbuf *p, err_t err)
{
 8104268:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 810426c:	b08b      	sub	sp, #44	@ 0x2c
 810426e:	af00      	add	r7, sp, #0
 8104270:	60f8      	str	r0, [r7, #12]
 8104272:	60b9      	str	r1, [r7, #8]
 8104274:	607a      	str	r2, [r7, #4]
 8104276:	603b      	str	r3, [r7, #0]
        }
        default:
            // none other messages types are needed to be handled, so discard
            break;
    }
}
 8104278:	466b      	mov	r3, sp
 810427a:	461e      	mov	r6, r3
    if (!p || err != ERR_OK)
 810427c:	683b      	ldr	r3, [r7, #0]
 810427e:	2b00      	cmp	r3, #0
 8104280:	d003      	beq.n	810428a <_ZN17ConnectionManager15HandleTcpRecvCbEPvP7tcp_pcbP4pbufa+0x22>
 8104282:	f997 3048 	ldrsb.w	r3, [r7, #72]	@ 0x48
 8104286:	2b00      	cmp	r3, #0
 8104288:	d03c      	beq.n	8104304 <_ZN17ConnectionManager15HandleTcpRecvCbEPvP7tcp_pcbP4pbufa+0x9c>
        tcp_arg(tcp_pcb, nullptr);
 810428a:	68fb      	ldr	r3, [r7, #12]
 810428c:	689b      	ldr	r3, [r3, #8]
 810428e:	2100      	movs	r1, #0
 8104290:	4618      	mov	r0, r3
 8104292:	f019 f8a3 	bl	811d3dc <tcp_arg>
        tcp_recv(tcp_pcb, nullptr);
 8104296:	68fb      	ldr	r3, [r7, #12]
 8104298:	689b      	ldr	r3, [r3, #8]
 810429a:	2100      	movs	r1, #0
 810429c:	4618      	mov	r0, r3
 810429e:	f019 f8af 	bl	811d400 <tcp_recv>
        tcp_err(tcp_pcb, nullptr);
 81042a2:	68fb      	ldr	r3, [r7, #12]
 81042a4:	689b      	ldr	r3, [r3, #8]
 81042a6:	2100      	movs	r1, #0
 81042a8:	4618      	mov	r0, r3
 81042aa:	f019 f8cb 	bl	811d444 <tcp_err>
        tcp_close(tcp_pcb);
 81042ae:	68fb      	ldr	r3, [r7, #12]
 81042b0:	689b      	ldr	r3, [r3, #8]
 81042b2:	4618      	mov	r0, r3
 81042b4:	f017 febe 	bl	811c034 <tcp_close>
        tcp_pcb = nullptr;
 81042b8:	68fb      	ldr	r3, [r7, #12]
 81042ba:	2200      	movs	r2, #0
 81042bc:	609a      	str	r2, [r3, #8]
        LOG_DEBUG("Connection closed or error occurred.");
 81042be:	f7fc fe67 	bl	8100f90 <_ZN10LogPrinter8instanceEv>
 81042c2:	4603      	mov	r3, r0
 81042c4:	4961      	ldr	r1, [pc, #388]	@ (810444c <_ZN17ConnectionManager15HandleTcpRecvCbEPvP7tcp_pcbP4pbufa+0x1e4>)
 81042c6:	4618      	mov	r0, r3
 81042c8:	f7fc fe8a 	bl	8100fe0 <_ZN10LogPrinter10printDebugEPKcz>
        EConnectionEvent connEvent = EVENT_TCP_CONNECTION_FAILED;
 81042cc:	2304      	movs	r3, #4
 81042ce:	753b      	strb	r3, [r7, #20]
        if(xQueueSend(connectionEventsQueue, &(connEvent), static_cast<TickType_t>(100000)) != pdPASS)
 81042d0:	4b5f      	ldr	r3, [pc, #380]	@ (8104450 <_ZN17ConnectionManager15HandleTcpRecvCbEPvP7tcp_pcbP4pbufa+0x1e8>)
 81042d2:	6818      	ldr	r0, [r3, #0]
 81042d4:	f107 0114 	add.w	r1, r7, #20
 81042d8:	2300      	movs	r3, #0
 81042da:	4a5e      	ldr	r2, [pc, #376]	@ (8104454 <_ZN17ConnectionManager15HandleTcpRecvCbEPvP7tcp_pcbP4pbufa+0x1ec>)
 81042dc:	f00f ff0a 	bl	81140f4 <xQueueGenericSend>
 81042e0:	4603      	mov	r3, r0
 81042e2:	2b01      	cmp	r3, #1
 81042e4:	bf14      	ite	ne
 81042e6:	2301      	movne	r3, #1
 81042e8:	2300      	moveq	r3, #0
 81042ea:	b2db      	uxtb	r3, r3
 81042ec:	2b00      	cmp	r3, #0
 81042ee:	f000 80a8 	beq.w	8104442 <_ZN17ConnectionManager15HandleTcpRecvCbEPvP7tcp_pcbP4pbufa+0x1da>
            LOG_DEBUG("[FATAL ERROR] Could not send internal connection event: %d", connEvent);
 81042f2:	f7fc fe4d 	bl	8100f90 <_ZN10LogPrinter8instanceEv>
 81042f6:	4603      	mov	r3, r0
 81042f8:	7d3a      	ldrb	r2, [r7, #20]
 81042fa:	4957      	ldr	r1, [pc, #348]	@ (8104458 <_ZN17ConnectionManager15HandleTcpRecvCbEPvP7tcp_pcbP4pbufa+0x1f0>)
 81042fc:	4618      	mov	r0, r3
 81042fe:	f7fc fe6f 	bl	8100fe0 <_ZN10LogPrinter10printDebugEPKcz>
 8104302:	e09e      	b.n	8104442 <_ZN17ConnectionManager15HandleTcpRecvCbEPvP7tcp_pcbP4pbufa+0x1da>
    size_t payloadLen = p->len;
 8104304:	683b      	ldr	r3, [r7, #0]
 8104306:	895b      	ldrh	r3, [r3, #10]
 8104308:	627b      	str	r3, [r7, #36]	@ 0x24
    uint8_t data[payloadLen];
 810430a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 810430c:	460b      	mov	r3, r1
 810430e:	3b01      	subs	r3, #1
 8104310:	623b      	str	r3, [r7, #32]
 8104312:	2300      	movs	r3, #0
 8104314:	4688      	mov	r8, r1
 8104316:	4699      	mov	r9, r3
 8104318:	f04f 0200 	mov.w	r2, #0
 810431c:	f04f 0300 	mov.w	r3, #0
 8104320:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8104324:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8104328:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 810432c:	2300      	movs	r3, #0
 810432e:	460c      	mov	r4, r1
 8104330:	461d      	mov	r5, r3
 8104332:	f04f 0200 	mov.w	r2, #0
 8104336:	f04f 0300 	mov.w	r3, #0
 810433a:	00eb      	lsls	r3, r5, #3
 810433c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8104340:	00e2      	lsls	r2, r4, #3
 8104342:	1dcb      	adds	r3, r1, #7
 8104344:	08db      	lsrs	r3, r3, #3
 8104346:	00db      	lsls	r3, r3, #3
 8104348:	ebad 0d03 	sub.w	sp, sp, r3
 810434c:	466b      	mov	r3, sp
 810434e:	3300      	adds	r3, #0
 8104350:	61fb      	str	r3, [r7, #28]
    std::memcpy(data, p->payload, payloadLen);
 8104352:	683b      	ldr	r3, [r7, #0]
 8104354:	685b      	ldr	r3, [r3, #4]
 8104356:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8104358:	4619      	mov	r1, r3
 810435a:	69f8      	ldr	r0, [r7, #28]
 810435c:	f01f feed 	bl	812413a <memcpy>
    tcp_recved(tcp_pcb, p->len);
 8104360:	68fb      	ldr	r3, [r7, #12]
 8104362:	689a      	ldr	r2, [r3, #8]
 8104364:	683b      	ldr	r3, [r7, #0]
 8104366:	895b      	ldrh	r3, [r3, #10]
 8104368:	4619      	mov	r1, r3
 810436a:	4610      	mov	r0, r2
 810436c:	f018 f84a 	bl	811c404 <tcp_recved>
    pbuf_free(p);
 8104370:	6838      	ldr	r0, [r7, #0]
 8104372:	f017 f8b3 	bl	811b4dc <pbuf_free>
    const uint32_t udsPayloadLen = (data[0] << 24) | (data[1] << 16) | (data[2] << 8) | data[3];
 8104376:	69fb      	ldr	r3, [r7, #28]
 8104378:	781b      	ldrb	r3, [r3, #0]
 810437a:	061a      	lsls	r2, r3, #24
 810437c:	69fb      	ldr	r3, [r7, #28]
 810437e:	785b      	ldrb	r3, [r3, #1]
 8104380:	041b      	lsls	r3, r3, #16
 8104382:	431a      	orrs	r2, r3
 8104384:	69fb      	ldr	r3, [r7, #28]
 8104386:	789b      	ldrb	r3, [r3, #2]
 8104388:	021b      	lsls	r3, r3, #8
 810438a:	4313      	orrs	r3, r2
 810438c:	69fa      	ldr	r2, [r7, #28]
 810438e:	78d2      	ldrb	r2, [r2, #3]
 8104390:	4313      	orrs	r3, r2
 8104392:	61bb      	str	r3, [r7, #24]
    if (udsPayloadLen + 6 > payloadLen)
 8104394:	69bb      	ldr	r3, [r7, #24]
 8104396:	3306      	adds	r3, #6
 8104398:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 810439a:	429a      	cmp	r2, r3
 810439c:	d207      	bcs.n	81043ae <_ZN17ConnectionManager15HandleTcpRecvCbEPvP7tcp_pcbP4pbufa+0x146>
        LOG_DEBUG("Data length mismatch: declared %u, received %u.", udsPayloadLen, payloadLen);
 810439e:	f7fc fdf7 	bl	8100f90 <_ZN10LogPrinter8instanceEv>
 81043a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81043a4:	69ba      	ldr	r2, [r7, #24]
 81043a6:	492d      	ldr	r1, [pc, #180]	@ (810445c <_ZN17ConnectionManager15HandleTcpRecvCbEPvP7tcp_pcbP4pbufa+0x1f4>)
 81043a8:	f7fc fe1a 	bl	8100fe0 <_ZN10LogPrinter10printDebugEPKcz>
        return;
 81043ac:	e049      	b.n	8104442 <_ZN17ConnectionManager15HandleTcpRecvCbEPvP7tcp_pcbP4pbufa+0x1da>
    const EECUAddress sourceAddr = static_cast<EECUAddress>(data[6]);
 81043ae:	69fb      	ldr	r3, [r7, #28]
 81043b0:	799b      	ldrb	r3, [r3, #6]
 81043b2:	75fb      	strb	r3, [r7, #23]
    const EECUAddress targetAddr = static_cast<EECUAddress>(data[7]);
 81043b4:	69fb      	ldr	r3, [r7, #28]
 81043b6:	79db      	ldrb	r3, [r3, #7]
 81043b8:	75bb      	strb	r3, [r7, #22]
    if(static_cast<uint8_t>(targetAddr) != DIAGNOSTIC_TOOL_INTERNAL_ADDR)
 81043ba:	7dbb      	ldrb	r3, [r7, #22]
 81043bc:	2bf4      	cmp	r3, #244	@ 0xf4
 81043be:	d13f      	bne.n	8104440 <_ZN17ConnectionManager15HandleTcpRecvCbEPvP7tcp_pcbP4pbufa+0x1d8>
    EUDSResponseSID SID = static_cast<EUDSResponseSID>(data[8]);
 81043c0:	69fb      	ldr	r3, [r7, #28]
 81043c2:	7a1b      	ldrb	r3, [r3, #8]
 81043c4:	757b      	strb	r3, [r7, #21]
    switch(SID)
 81043c6:	7d7b      	ldrb	r3, [r7, #21]
 81043c8:	2b7f      	cmp	r3, #127	@ 0x7f
 81043ca:	d021      	beq.n	8104410 <_ZN17ConnectionManager15HandleTcpRecvCbEPvP7tcp_pcbP4pbufa+0x1a8>
 81043cc:	7d7b      	ldrb	r3, [r7, #21]
 81043ce:	2b7f      	cmp	r3, #127	@ 0x7f
 81043d0:	d833      	bhi.n	810443a <_ZN17ConnectionManager15HandleTcpRecvCbEPvP7tcp_pcbP4pbufa+0x1d2>
 81043d2:	7d7b      	ldrb	r3, [r7, #21]
 81043d4:	2b62      	cmp	r3, #98	@ 0x62
 81043d6:	d003      	beq.n	81043e0 <_ZN17ConnectionManager15HandleTcpRecvCbEPvP7tcp_pcbP4pbufa+0x178>
 81043d8:	7d7b      	ldrb	r3, [r7, #21]
 81043da:	2b6c      	cmp	r3, #108	@ 0x6c
 81043dc:	d00d      	beq.n	81043fa <_ZN17ConnectionManager15HandleTcpRecvCbEPvP7tcp_pcbP4pbufa+0x192>
            break;
 81043de:	e02c      	b.n	810443a <_ZN17ConnectionManager15HandleTcpRecvCbEPvP7tcp_pcbP4pbufa+0x1d2>
            handleReadDataByIdentifier(&data[11], udsPayloadLen - 5); 
 81043e0:	69fb      	ldr	r3, [r7, #28]
 81043e2:	f103 010b 	add.w	r1, r3, #11
 81043e6:	69bb      	ldr	r3, [r7, #24]
 81043e8:	3b05      	subs	r3, #5
 81043ea:	461a      	mov	r2, r3
 81043ec:	68f8      	ldr	r0, [r7, #12]
 81043ee:	f000 f935 	bl	810465c <_ZN17ConnectionManager26handleReadDataByIdentifierEPhm>
            negativeResponseCount = 0;
 81043f2:	68fb      	ldr	r3, [r7, #12]
 81043f4:	2200      	movs	r2, #0
 81043f6:	735a      	strb	r2, [r3, #13]
            break;
 81043f8:	e020      	b.n	810443c <_ZN17ConnectionManager15HandleTcpRecvCbEPvP7tcp_pcbP4pbufa+0x1d4>
            handleDynamicallyDefineDataIdentifier(&data[9], sourceAddr);
 81043fa:	69fb      	ldr	r3, [r7, #28]
 81043fc:	3309      	adds	r3, #9
 81043fe:	7dfa      	ldrb	r2, [r7, #23]
 8104400:	4619      	mov	r1, r3
 8104402:	68f8      	ldr	r0, [r7, #12]
 8104404:	f000 f9a0 	bl	8104748 <_ZN17ConnectionManager37handleDynamicallyDefineDataIdentifierEPh11EECUAddress>
            negativeResponseCount = 0;
 8104408:	68fb      	ldr	r3, [r7, #12]
 810440a:	2200      	movs	r2, #0
 810440c:	735a      	strb	r2, [r3, #13]
            break;
 810440e:	e015      	b.n	810443c <_ZN17ConnectionManager15HandleTcpRecvCbEPvP7tcp_pcbP4pbufa+0x1d4>
            negativeResponseCount++;
 8104410:	68fb      	ldr	r3, [r7, #12]
 8104412:	7b5b      	ldrb	r3, [r3, #13]
 8104414:	3301      	adds	r3, #1
 8104416:	b2da      	uxtb	r2, r3
 8104418:	68fb      	ldr	r3, [r7, #12]
 810441a:	735a      	strb	r2, [r3, #13]
            if(negativeResponseCount >= 10)
 810441c:	68fb      	ldr	r3, [r7, #12]
 810441e:	7b5b      	ldrb	r3, [r3, #13]
 8104420:	2b09      	cmp	r3, #9
 8104422:	d90a      	bls.n	810443a <_ZN17ConnectionManager15HandleTcpRecvCbEPvP7tcp_pcbP4pbufa+0x1d2>
                EConnectionEvent connEvent = EVENT_TCP_CONNECTION_FAILED;
 8104424:	2304      	movs	r3, #4
 8104426:	74fb      	strb	r3, [r7, #19]
                xQueueSend(connectionEventsQueue, &(connEvent), static_cast<TickType_t>(10000));
 8104428:	4b09      	ldr	r3, [pc, #36]	@ (8104450 <_ZN17ConnectionManager15HandleTcpRecvCbEPvP7tcp_pcbP4pbufa+0x1e8>)
 810442a:	6818      	ldr	r0, [r3, #0]
 810442c:	f107 0113 	add.w	r1, r7, #19
 8104430:	2300      	movs	r3, #0
 8104432:	f242 7210 	movw	r2, #10000	@ 0x2710
 8104436:	f00f fe5d 	bl	81140f4 <xQueueGenericSend>
            break;
 810443a:	bf00      	nop
 810443c:	46b5      	mov	sp, r6
 810443e:	e001      	b.n	8104444 <_ZN17ConnectionManager15HandleTcpRecvCbEPvP7tcp_pcbP4pbufa+0x1dc>
        return;
 8104440:	bf00      	nop
 8104442:	46b5      	mov	sp, r6
}
 8104444:	372c      	adds	r7, #44	@ 0x2c
 8104446:	46bd      	mov	sp, r7
 8104448:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 810444c:	081251ec 	.word	0x081251ec
 8104450:	10000294 	.word	0x10000294
 8104454:	000186a0 	.word	0x000186a0
 8104458:	08124fe4 	.word	0x08124fe4
 810445c:	08124ed8 	.word	0x08124ed8

08104460 <_ZN17ConnectionManager18HandleTcpConnectCbEPvP7tcp_pcba>:

void ConnectionManager::HandleTcpConnectCb(void *arg, struct tcp_pcb *tpcb, err_t err)
{
 8104460:	b580      	push	{r7, lr}
 8104462:	b086      	sub	sp, #24
 8104464:	af00      	add	r7, sp, #0
 8104466:	60f8      	str	r0, [r7, #12]
 8104468:	60b9      	str	r1, [r7, #8]
 810446a:	607a      	str	r2, [r7, #4]
 810446c:	70fb      	strb	r3, [r7, #3]
    // accoring to documentation this always call with err == ERR_OK, so this impl is in case of LWiP updates
    if (err != ERR_OK)
 810446e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8104472:	2b00      	cmp	r3, #0
 8104474:	d022      	beq.n	81044bc <_ZN17ConnectionManager18HandleTcpConnectCbEPvP7tcp_pcba+0x5c>
    {
        LOG_DEBUG("Connection failed with error: %d", err);
 8104476:	f7fc fd8b 	bl	8100f90 <_ZN10LogPrinter8instanceEv>
 810447a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 810447e:	461a      	mov	r2, r3
 8104480:	4921      	ldr	r1, [pc, #132]	@ (8104508 <_ZN17ConnectionManager18HandleTcpConnectCbEPvP7tcp_pcba+0xa8>)
 8104482:	f7fc fdad 	bl	8100fe0 <_ZN10LogPrinter10printDebugEPKcz>
        EConnectionEvent connEvent = EVENT_TCP_CONNECTION_FAILED;
 8104486:	2304      	movs	r3, #4
 8104488:	75fb      	strb	r3, [r7, #23]
        if(xQueueSend(connectionEventsQueue, &(connEvent), static_cast<TickType_t>(100000)) != pdPASS)
 810448a:	4b20      	ldr	r3, [pc, #128]	@ (810450c <_ZN17ConnectionManager18HandleTcpConnectCbEPvP7tcp_pcba+0xac>)
 810448c:	6818      	ldr	r0, [r3, #0]
 810448e:	f107 0117 	add.w	r1, r7, #23
 8104492:	2300      	movs	r3, #0
 8104494:	4a1e      	ldr	r2, [pc, #120]	@ (8104510 <_ZN17ConnectionManager18HandleTcpConnectCbEPvP7tcp_pcba+0xb0>)
 8104496:	f00f fe2d 	bl	81140f4 <xQueueGenericSend>
 810449a:	4603      	mov	r3, r0
 810449c:	2b01      	cmp	r3, #1
 810449e:	bf14      	ite	ne
 81044a0:	2301      	movne	r3, #1
 81044a2:	2300      	moveq	r3, #0
 81044a4:	b2db      	uxtb	r3, r3
 81044a6:	2b00      	cmp	r3, #0
 81044a8:	d029      	beq.n	81044fe <_ZN17ConnectionManager18HandleTcpConnectCbEPvP7tcp_pcba+0x9e>
        {
            LOG_DEBUG("[FATAL ERROR] Could not send internal connection event: %d", connEvent);
 81044aa:	f7fc fd71 	bl	8100f90 <_ZN10LogPrinter8instanceEv>
 81044ae:	4603      	mov	r3, r0
 81044b0:	7dfa      	ldrb	r2, [r7, #23]
 81044b2:	4918      	ldr	r1, [pc, #96]	@ (8104514 <_ZN17ConnectionManager18HandleTcpConnectCbEPvP7tcp_pcba+0xb4>)
 81044b4:	4618      	mov	r0, r3
 81044b6:	f7fc fd93 	bl	8100fe0 <_ZN10LogPrinter10printDebugEPKcz>
        if(xQueueSend(connectionEventsQueue, &(connEvent), static_cast<TickType_t>(100000)) != pdPASS)
        {
            LOG_DEBUG("[FATAL ERROR] Could not send internal connection event: %d", connEvent);
        }
    }
}
 81044ba:	e020      	b.n	81044fe <_ZN17ConnectionManager18HandleTcpConnectCbEPvP7tcp_pcba+0x9e>
        LOG_DEBUG("Connected to ECU.");
 81044bc:	f7fc fd68 	bl	8100f90 <_ZN10LogPrinter8instanceEv>
 81044c0:	4603      	mov	r3, r0
 81044c2:	4915      	ldr	r1, [pc, #84]	@ (8104518 <_ZN17ConnectionManager18HandleTcpConnectCbEPvP7tcp_pcba+0xb8>)
 81044c4:	4618      	mov	r0, r3
 81044c6:	f7fc fd8b 	bl	8100fe0 <_ZN10LogPrinter10printDebugEPKcz>
        EConnectionEvent connEvent = EVENT_TCP_CONNECTED;
 81044ca:	2303      	movs	r3, #3
 81044cc:	75bb      	strb	r3, [r7, #22]
        if(xQueueSend(connectionEventsQueue, &(connEvent), static_cast<TickType_t>(100000)) != pdPASS)
 81044ce:	4b0f      	ldr	r3, [pc, #60]	@ (810450c <_ZN17ConnectionManager18HandleTcpConnectCbEPvP7tcp_pcba+0xac>)
 81044d0:	6818      	ldr	r0, [r3, #0]
 81044d2:	f107 0116 	add.w	r1, r7, #22
 81044d6:	2300      	movs	r3, #0
 81044d8:	4a0d      	ldr	r2, [pc, #52]	@ (8104510 <_ZN17ConnectionManager18HandleTcpConnectCbEPvP7tcp_pcba+0xb0>)
 81044da:	f00f fe0b 	bl	81140f4 <xQueueGenericSend>
 81044de:	4603      	mov	r3, r0
 81044e0:	2b01      	cmp	r3, #1
 81044e2:	bf14      	ite	ne
 81044e4:	2301      	movne	r3, #1
 81044e6:	2300      	moveq	r3, #0
 81044e8:	b2db      	uxtb	r3, r3
 81044ea:	2b00      	cmp	r3, #0
 81044ec:	d007      	beq.n	81044fe <_ZN17ConnectionManager18HandleTcpConnectCbEPvP7tcp_pcba+0x9e>
            LOG_DEBUG("[FATAL ERROR] Could not send internal connection event: %d", connEvent);
 81044ee:	f7fc fd4f 	bl	8100f90 <_ZN10LogPrinter8instanceEv>
 81044f2:	4603      	mov	r3, r0
 81044f4:	7dba      	ldrb	r2, [r7, #22]
 81044f6:	4907      	ldr	r1, [pc, #28]	@ (8104514 <_ZN17ConnectionManager18HandleTcpConnectCbEPvP7tcp_pcba+0xb4>)
 81044f8:	4618      	mov	r0, r3
 81044fa:	f7fc fd71 	bl	8100fe0 <_ZN10LogPrinter10printDebugEPKcz>
}
 81044fe:	bf00      	nop
 8104500:	3718      	adds	r7, #24
 8104502:	46bd      	mov	sp, r7
 8104504:	bd80      	pop	{r7, pc}
 8104506:	bf00      	nop
 8104508:	08125214 	.word	0x08125214
 810450c:	10000294 	.word	0x10000294
 8104510:	000186a0 	.word	0x000186a0
 8104514:	08124fe4 	.word	0x08124fe4
 8104518:	08125238 	.word	0x08125238

0810451c <_ZN17ConnectionManager14HandleTcpErrCbEPva>:

void ConnectionManager::HandleTcpErrCb(void *arg, err_t err)
{
 810451c:	b580      	push	{r7, lr}
 810451e:	b086      	sub	sp, #24
 8104520:	af00      	add	r7, sp, #0
 8104522:	60f8      	str	r0, [r7, #12]
 8104524:	60b9      	str	r1, [r7, #8]
 8104526:	4613      	mov	r3, r2
 8104528:	71fb      	strb	r3, [r7, #7]
    LOG_DEBUG("TCP connection error: %d", err);
 810452a:	f7fc fd31 	bl	8100f90 <_ZN10LogPrinter8instanceEv>
 810452e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8104532:	461a      	mov	r2, r3
 8104534:	4910      	ldr	r1, [pc, #64]	@ (8104578 <_ZN17ConnectionManager14HandleTcpErrCbEPva+0x5c>)
 8104536:	f7fc fd53 	bl	8100fe0 <_ZN10LogPrinter10printDebugEPKcz>
    EConnectionEvent connEvent = EVENT_TCP_CONNECTION_FAILED;
 810453a:	2304      	movs	r3, #4
 810453c:	75fb      	strb	r3, [r7, #23]
    if(xQueueSend(connectionEventsQueue, &(connEvent), static_cast<TickType_t>(100000)) != pdPASS)
 810453e:	4b0f      	ldr	r3, [pc, #60]	@ (810457c <_ZN17ConnectionManager14HandleTcpErrCbEPva+0x60>)
 8104540:	6818      	ldr	r0, [r3, #0]
 8104542:	f107 0117 	add.w	r1, r7, #23
 8104546:	2300      	movs	r3, #0
 8104548:	4a0d      	ldr	r2, [pc, #52]	@ (8104580 <_ZN17ConnectionManager14HandleTcpErrCbEPva+0x64>)
 810454a:	f00f fdd3 	bl	81140f4 <xQueueGenericSend>
 810454e:	4603      	mov	r3, r0
 8104550:	2b01      	cmp	r3, #1
 8104552:	bf14      	ite	ne
 8104554:	2301      	movne	r3, #1
 8104556:	2300      	moveq	r3, #0
 8104558:	b2db      	uxtb	r3, r3
 810455a:	2b00      	cmp	r3, #0
 810455c:	d007      	beq.n	810456e <_ZN17ConnectionManager14HandleTcpErrCbEPva+0x52>
    {
        LOG_DEBUG("[FATAL ERROR] Could not send internal connection event: %d", connEvent);
 810455e:	f7fc fd17 	bl	8100f90 <_ZN10LogPrinter8instanceEv>
 8104562:	4603      	mov	r3, r0
 8104564:	7dfa      	ldrb	r2, [r7, #23]
 8104566:	4907      	ldr	r1, [pc, #28]	@ (8104584 <_ZN17ConnectionManager14HandleTcpErrCbEPva+0x68>)
 8104568:	4618      	mov	r0, r3
 810456a:	f7fc fd39 	bl	8100fe0 <_ZN10LogPrinter10printDebugEPKcz>
    }
}
 810456e:	bf00      	nop
 8104570:	3718      	adds	r7, #24
 8104572:	46bd      	mov	sp, r7
 8104574:	bd80      	pop	{r7, pc}
 8104576:	bf00      	nop
 8104578:	0812524c 	.word	0x0812524c
 810457c:	10000294 	.word	0x10000294
 8104580:	000186a0 	.word	0x000186a0
 8104584:	08124fe4 	.word	0x08124fe4

08104588 <_ZN17ConnectionManager7tcpSendEPhjb>:

bool ConnectionManager::tcpSend(uint8_t udsRequest[], size_t sizeOfUdsRequest, const bool tcpipThreadContext)
{
 8104588:	b580      	push	{r7, lr}
 810458a:	b086      	sub	sp, #24
 810458c:	af00      	add	r7, sp, #0
 810458e:	60f8      	str	r0, [r7, #12]
 8104590:	60b9      	str	r1, [r7, #8]
 8104592:	607a      	str	r2, [r7, #4]
 8104594:	70fb      	strb	r3, [r7, #3]
    if(!tcpipThreadContext)
 8104596:	78fb      	ldrb	r3, [r7, #3]
 8104598:	f083 0301 	eor.w	r3, r3, #1
 810459c:	b2db      	uxtb	r3, r3
 810459e:	2b00      	cmp	r3, #0
 81045a0:	d002      	beq.n	81045a8 <_ZN17ConnectionManager7tcpSendEPhjb+0x20>
    {
        LOCK_TCPIP_CORE();
 81045a2:	481b      	ldr	r0, [pc, #108]	@ (8104610 <_ZN17ConnectionManager7tcpSendEPhjb+0x88>)
 81045a4:	f017 fadc 	bl	811bb60 <sys_mutex_lock>
    }
    err_t res = tcp_write(tcp_pcb, udsRequest, sizeOfUdsRequest, TCP_WRITE_FLAG_COPY);
 81045a8:	68fb      	ldr	r3, [r7, #12]
 81045aa:	6898      	ldr	r0, [r3, #8]
 81045ac:	687b      	ldr	r3, [r7, #4]
 81045ae:	b29a      	uxth	r2, r3
 81045b0:	2301      	movs	r3, #1
 81045b2:	68b9      	ldr	r1, [r7, #8]
 81045b4:	f01b fde4 	bl	8120180 <tcp_write>
 81045b8:	4603      	mov	r3, r0
 81045ba:	75fb      	strb	r3, [r7, #23]
    if (res != ERR_OK)
 81045bc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 81045c0:	2b00      	cmp	r3, #0
 81045c2:	d012      	beq.n	81045ea <_ZN17ConnectionManager7tcpSendEPhjb+0x62>
    {
        LOG_DEBUG("Failed to send UDS request: %d", res);
 81045c4:	f7fc fce4 	bl	8100f90 <_ZN10LogPrinter8instanceEv>
 81045c8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 81045cc:	461a      	mov	r2, r3
 81045ce:	4911      	ldr	r1, [pc, #68]	@ (8104614 <_ZN17ConnectionManager7tcpSendEPhjb+0x8c>)
 81045d0:	f7fc fd06 	bl	8100fe0 <_ZN10LogPrinter10printDebugEPKcz>
        if(!tcpipThreadContext)
 81045d4:	78fb      	ldrb	r3, [r7, #3]
 81045d6:	f083 0301 	eor.w	r3, r3, #1
 81045da:	b2db      	uxtb	r3, r3
 81045dc:	2b00      	cmp	r3, #0
 81045de:	d002      	beq.n	81045e6 <_ZN17ConnectionManager7tcpSendEPhjb+0x5e>
        {
            UNLOCK_TCPIP_CORE();
 81045e0:	480b      	ldr	r0, [pc, #44]	@ (8104610 <_ZN17ConnectionManager7tcpSendEPhjb+0x88>)
 81045e2:	f017 facc 	bl	811bb7e <sys_mutex_unlock>
        }
        return false;
 81045e6:	2300      	movs	r3, #0
 81045e8:	e00e      	b.n	8104608 <_ZN17ConnectionManager7tcpSendEPhjb+0x80>
    }

    tcp_output(tcp_pcb);
 81045ea:	68fb      	ldr	r3, [r7, #12]
 81045ec:	689b      	ldr	r3, [r3, #8]
 81045ee:	4618      	mov	r0, r3
 81045f0:	f01c fbb0 	bl	8120d54 <tcp_output>
    if(!tcpipThreadContext)
 81045f4:	78fb      	ldrb	r3, [r7, #3]
 81045f6:	f083 0301 	eor.w	r3, r3, #1
 81045fa:	b2db      	uxtb	r3, r3
 81045fc:	2b00      	cmp	r3, #0
 81045fe:	d002      	beq.n	8104606 <_ZN17ConnectionManager7tcpSendEPhjb+0x7e>
    {
        UNLOCK_TCPIP_CORE();
 8104600:	4803      	ldr	r0, [pc, #12]	@ (8104610 <_ZN17ConnectionManager7tcpSendEPhjb+0x88>)
 8104602:	f017 fabc 	bl	811bb7e <sys_mutex_unlock>
    }
    return true;
 8104606:	2301      	movs	r3, #1
}
 8104608:	4618      	mov	r0, r3
 810460a:	3718      	adds	r7, #24
 810460c:	46bd      	mov	sp, r7
 810460e:	bd80      	pop	{r7, pc}
 8104610:	1000e4f4 	.word	0x1000e4f4
 8104614:	08125268 	.word	0x08125268

08104618 <_ZNRSt8optionalI8SMessageE5valueEv>:
	  return this->_M_get();
	__throw_bad_optional_access();
      }

      constexpr _Tp&
      value()&
 8104618:	b580      	push	{r7, lr}
 810461a:	b082      	sub	sp, #8
 810461c:	af00      	add	r7, sp, #0
 810461e:	6078      	str	r0, [r7, #4]
      {
	if (this->_M_is_engaged())
 8104620:	6878      	ldr	r0, [r7, #4]
 8104622:	f000 f80e 	bl	8104642 <_ZNKSt19_Optional_base_implI8SMessageSt14_Optional_baseIS0_Lb1ELb1EEE13_M_is_engagedEv>
 8104626:	4603      	mov	r3, r0
 8104628:	2b00      	cmp	r3, #0
 810462a:	d004      	beq.n	8104636 <_ZNRSt8optionalI8SMessageE5valueEv+0x1e>
	  return this->_M_get();
 810462c:	6878      	ldr	r0, [r7, #4]
 810462e:	f000 f9c6 	bl	81049be <_ZNSt19_Optional_base_implI8SMessageSt14_Optional_baseIS0_Lb1ELb1EEE6_M_getEv>
 8104632:	4603      	mov	r3, r0
 8104634:	e001      	b.n	810463a <_ZNRSt8optionalI8SMessageE5valueEv+0x22>
	__throw_bad_optional_access();
 8104636:	f7ff f929 	bl	810388c <_ZSt27__throw_bad_optional_accessv>
      }
 810463a:	4618      	mov	r0, r3
 810463c:	3708      	adds	r7, #8
 810463e:	46bd      	mov	sp, r7
 8104640:	bd80      	pop	{r7, pc}

08104642 <_ZNKSt19_Optional_base_implI8SMessageSt14_Optional_baseIS0_Lb1ELb1EEE13_M_is_engagedEv>:
      constexpr bool _M_is_engaged() const noexcept
 8104642:	b480      	push	{r7}
 8104644:	b083      	sub	sp, #12
 8104646:	af00      	add	r7, sp, #0
 8104648:	6078      	str	r0, [r7, #4]
      { return static_cast<const _Dp*>(this)->_M_payload._M_engaged; }
 810464a:	687b      	ldr	r3, [r7, #4]
 810464c:	7f1b      	ldrb	r3, [r3, #28]
 810464e:	4618      	mov	r0, r3
 8104650:	370c      	adds	r7, #12
 8104652:	46bd      	mov	sp, r7
 8104654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104658:	4770      	bx	lr
	...

0810465c <_ZN17ConnectionManager26handleReadDataByIdentifierEPhm>:

void ConnectionManager::handleReadDataByIdentifier(uint8_t dataPayload[], uint32_t size)
{
 810465c:	b5b0      	push	{r4, r5, r7, lr}
 810465e:	b094      	sub	sp, #80	@ 0x50
 8104660:	af00      	add	r7, sp, #0
 8104662:	60f8      	str	r0, [r7, #12]
 8104664:	60b9      	str	r1, [r7, #8]
 8104666:	607a      	str	r2, [r7, #4]
    std::optional<SMessage> optMsg = APIDoIP::extractDataFromResponse(dataPayload, size, currently_processed_request);
 8104668:	68fb      	ldr	r3, [r7, #12]
 810466a:	f993 300c 	ldrsb.w	r3, [r3, #12]
 810466e:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 8104672:	687a      	ldr	r2, [r7, #4]
 8104674:	68b9      	ldr	r1, [r7, #8]
 8104676:	f7fe ff71 	bl	810355c <_ZN7APIDoIP23extractDataFromResponseEPKhjNS_12EDoIPRequestE>
    if(optMsg.has_value())
 810467a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 810467e:	4618      	mov	r0, r3
 8104680:	f000 f991 	bl	81049a6 <_ZNKSt8optionalI8SMessageE9has_valueEv>
 8104684:	4603      	mov	r3, r0
 8104686:	2b00      	cmp	r3, #0
 8104688:	d031      	beq.n	81046ee <_ZN17ConnectionManager26handleReadDataByIdentifierEPhm+0x92>
    {
        SMessage msg = optMsg.value();
 810468a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 810468e:	4618      	mov	r0, r3
 8104690:	f7ff ffc2 	bl	8104618 <_ZNRSt8optionalI8SMessageE5valueEv>
 8104694:	4603      	mov	r3, r0
 8104696:	f107 0414 	add.w	r4, r7, #20
 810469a:	461d      	mov	r5, r3
 810469c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 810469e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 81046a0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 81046a4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        xQueueSend(queueToEventManagerCM4, &(msg), static_cast<TickType_t>(10000));
 81046a8:	4b13      	ldr	r3, [pc, #76]	@ (81046f8 <_ZN17ConnectionManager26handleReadDataByIdentifierEPhm+0x9c>)
 81046aa:	6818      	ldr	r0, [r3, #0]
 81046ac:	f107 0114 	add.w	r1, r7, #20
 81046b0:	2300      	movs	r3, #0
 81046b2:	f242 7210 	movw	r2, #10000	@ 0x2710
 81046b6:	f00f fd1d 	bl	81140f4 <xQueueGenericSend>

        EConnectionEvent connEvent = EVENT_TCP_READ_DATA_BY_ID_RECEIVED;
 81046ba:	2308      	movs	r3, #8
 81046bc:	74fb      	strb	r3, [r7, #19]
        if(xQueueSend(connectionEventsQueue, &(connEvent), static_cast<TickType_t>(100000)) != pdPASS)
 81046be:	4b0f      	ldr	r3, [pc, #60]	@ (81046fc <_ZN17ConnectionManager26handleReadDataByIdentifierEPhm+0xa0>)
 81046c0:	6818      	ldr	r0, [r3, #0]
 81046c2:	f107 0113 	add.w	r1, r7, #19
 81046c6:	2300      	movs	r3, #0
 81046c8:	4a0d      	ldr	r2, [pc, #52]	@ (8104700 <_ZN17ConnectionManager26handleReadDataByIdentifierEPhm+0xa4>)
 81046ca:	f00f fd13 	bl	81140f4 <xQueueGenericSend>
 81046ce:	4603      	mov	r3, r0
 81046d0:	2b01      	cmp	r3, #1
 81046d2:	bf14      	ite	ne
 81046d4:	2301      	movne	r3, #1
 81046d6:	2300      	moveq	r3, #0
 81046d8:	b2db      	uxtb	r3, r3
 81046da:	2b00      	cmp	r3, #0
 81046dc:	d007      	beq.n	81046ee <_ZN17ConnectionManager26handleReadDataByIdentifierEPhm+0x92>
        {
            LOG_DEBUG("[FATAL ERROR] Could not send internal connection event: %d", connEvent);
 81046de:	f7fc fc57 	bl	8100f90 <_ZN10LogPrinter8instanceEv>
 81046e2:	4603      	mov	r3, r0
 81046e4:	7cfa      	ldrb	r2, [r7, #19]
 81046e6:	4907      	ldr	r1, [pc, #28]	@ (8104704 <_ZN17ConnectionManager26handleReadDataByIdentifierEPhm+0xa8>)
 81046e8:	4618      	mov	r0, r3
 81046ea:	f7fc fc79 	bl	8100fe0 <_ZN10LogPrinter10printDebugEPKcz>
        }
    }
}
 81046ee:	bf00      	nop
 81046f0:	3750      	adds	r7, #80	@ 0x50
 81046f2:	46bd      	mov	sp, r7
 81046f4:	bdb0      	pop	{r4, r5, r7, pc}
 81046f6:	bf00      	nop
 81046f8:	100001cc 	.word	0x100001cc
 81046fc:	10000294 	.word	0x10000294
 8104700:	000186a0 	.word	0x000186a0
 8104704:	08124fe4 	.word	0x08124fe4

08104708 <_ZSt17holds_alternativeI34EDynamicDataIndentifierRequestCodeJ7EUDSDIDS0_EEbRKSt7variantIJDpT0_EE>:
    holds_alternative(const variant<_Types...>& __v) noexcept
 8104708:	b590      	push	{r4, r7, lr}
 810470a:	b083      	sub	sp, #12
 810470c:	af00      	add	r7, sp, #0
 810470e:	6078      	str	r0, [r7, #4]
      return __v.index() == std::__find_uniq_type_in_pack<_Tp, _Types...>();
 8104710:	6878      	ldr	r0, [r7, #4]
 8104712:	f000 f80d 	bl	8104730 <_ZNKSt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE5indexEv>
 8104716:	4604      	mov	r4, r0
 8104718:	f7ff f8bc 	bl	8103894 <_ZSt24__find_uniq_type_in_packI34EDynamicDataIndentifierRequestCodeJ7EUDSDIDS0_EEjv>
 810471c:	4603      	mov	r3, r0
 810471e:	429c      	cmp	r4, r3
 8104720:	bf0c      	ite	eq
 8104722:	2301      	moveq	r3, #1
 8104724:	2300      	movne	r3, #0
 8104726:	b2db      	uxtb	r3, r3
    }
 8104728:	4618      	mov	r0, r3
 810472a:	370c      	adds	r7, #12
 810472c:	46bd      	mov	sp, r7
 810472e:	bd90      	pop	{r4, r7, pc}

08104730 <_ZNKSt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE5indexEv>:
	enable_if_t<!__exactly_once<_Tp>> emplace(_Args&&...) = delete;

      constexpr bool valueless_by_exception() const noexcept
      { return !this->_M_valid(); }

      constexpr size_t index() const noexcept
 8104730:	b480      	push	{r7}
 8104732:	b083      	sub	sp, #12
 8104734:	af00      	add	r7, sp, #0
 8104736:	6078      	str	r0, [r7, #4]
      {
	using __index_type = typename _Base::__index_type;
	if constexpr (__detail::__variant::__never_valueless<_Types...>())
	  return this->_M_index;
 8104738:	687b      	ldr	r3, [r7, #4]
 810473a:	791b      	ldrb	r3, [r3, #4]
	else if constexpr (sizeof...(_Types) <= __index_type(-1) / 2)
	  return make_signed_t<__index_type>(this->_M_index);
	else
	  return size_t(__index_type(this->_M_index + 1)) - 1;
      }
 810473c:	4618      	mov	r0, r3
 810473e:	370c      	adds	r7, #12
 8104740:	46bd      	mov	sp, r7
 8104742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104746:	4770      	bx	lr

08104748 <_ZN17ConnectionManager37handleDynamicallyDefineDataIdentifierEPh11EECUAddress>:

void ConnectionManager::handleDynamicallyDefineDataIdentifier(uint8_t dataPayload[], EECUAddress sourceEcuAddr)
{
 8104748:	b580      	push	{r7, lr}
 810474a:	b094      	sub	sp, #80	@ 0x50
 810474c:	af00      	add	r7, sp, #0
 810474e:	60f8      	str	r0, [r7, #12]
 8104750:	60b9      	str	r1, [r7, #8]
 8104752:	4613      	mov	r3, r2
 8104754:	71fb      	strb	r3, [r7, #7]
    const auto subSID = static_cast<DynamicallyAssignDataSubSID>(dataPayload[0]);
 8104756:	68bb      	ldr	r3, [r7, #8]
 8104758:	781b      	ldrb	r3, [r3, #0]
 810475a:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    switch(subSID)
 810475e:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8104762:	2b01      	cmp	r3, #1
 8104764:	d065      	beq.n	8104832 <_ZN17ConnectionManager37handleDynamicallyDefineDataIdentifierEPh11EECUAddress+0xea>
 8104766:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 810476a:	2b03      	cmp	r3, #3
 810476c:	d17b      	bne.n	8104866 <_ZN17ConnectionManager37handleDynamicallyDefineDataIdentifierEPh11EECUAddress+0x11e>
    {
        case DynamicallyAssignDataSubSID::REQUEST_CLEAR:
        {
            const size_t totalUDSRequestSize = APIDoIP::secondReqDynDataSize + 6;
 810476e:	2310      	movs	r3, #16
 8104770:	64bb      	str	r3, [r7, #72]	@ 0x48
            uint8_t payloadToSend[totalUDSRequestSize] = {0}; // + 4 for data len and +2 for "checksum" 
 8104772:	2300      	movs	r3, #0
 8104774:	633b      	str	r3, [r7, #48]	@ 0x30
 8104776:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 810477a:	2200      	movs	r2, #0
 810477c:	601a      	str	r2, [r3, #0]
 810477e:	605a      	str	r2, [r3, #4]
 8104780:	609a      	str	r2, [r3, #8]
            // response for the first dynamic assign sequence, so send next dynamic assign sequence packet

            auto identifierEntry = APIDoIP::dataIdentifierMap.find(currently_processed_request);
 8104782:	68fb      	ldr	r3, [r7, #12]
 8104784:	330c      	adds	r3, #12
 8104786:	4619      	mov	r1, r3
 8104788:	4839      	ldr	r0, [pc, #228]	@ (8104870 <_ZN17ConnectionManager37handleDynamicallyDefineDataIdentifierEPh11EECUAddress+0x128>)
 810478a:	f000 f937 	bl	81049fc <_ZNKSt13unordered_mapIN7APIDoIP12EDoIPRequestESt4pairISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressESt4hashIS1_ESt8equal_toIS1_ESaIS2_IKS1_S8_EEE4findERSD_>
 810478e:	4603      	mov	r3, r0
 8104790:	62fb      	str	r3, [r7, #44]	@ 0x2c
            if(identifierEntry == APIDoIP::dataIdentifierMap.end())
 8104792:	4837      	ldr	r0, [pc, #220]	@ (8104870 <_ZN17ConnectionManager37handleDynamicallyDefineDataIdentifierEPh11EECUAddress+0x128>)
 8104794:	f000 f941 	bl	8104a1a <_ZNKSt13unordered_mapIN7APIDoIP12EDoIPRequestESt4pairISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressESt4hashIS1_ESt8equal_toIS1_ESaIS2_IKS1_S8_EEE3endEv>
 8104798:	4603      	mov	r3, r0
 810479a:	643b      	str	r3, [r7, #64]	@ 0x40
 810479c:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 81047a0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 81047a4:	4611      	mov	r1, r2
 81047a6:	4618      	mov	r0, r3
 81047a8:	f7fd fce4 	bl	8102174 <_ZNSt8__detaileqERKNS_19_Node_iterator_baseISt4pairIKN7APIDoIP12EDoIPRequestES1_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEESE_>
 81047ac:	4603      	mov	r3, r0
 81047ae:	2b00      	cmp	r3, #0
 81047b0:	d009      	beq.n	81047c6 <_ZN17ConnectionManager37handleDynamicallyDefineDataIdentifierEPh11EECUAddress+0x7e>
            {
                LOG_DEBUG("[FATAL ERROR] currently processed request invalid: %d", currently_processed_request);
 81047b2:	f7fc fbed 	bl	8100f90 <_ZN10LogPrinter8instanceEv>
 81047b6:	68fb      	ldr	r3, [r7, #12]
 81047b8:	f993 300c 	ldrsb.w	r3, [r3, #12]
 81047bc:	461a      	mov	r2, r3
 81047be:	492d      	ldr	r1, [pc, #180]	@ (8104874 <_ZN17ConnectionManager37handleDynamicallyDefineDataIdentifierEPh11EECUAddress+0x12c>)
 81047c0:	f7fc fc0e 	bl	8100fe0 <_ZN10LogPrinter10printDebugEPKcz>
                return;
 81047c4:	e050      	b.n	8104868 <_ZN17ConnectionManager37handleDynamicallyDefineDataIdentifierEPh11EECUAddress+0x120>
            }
            auto idenidentifierAttributes = identifierEntry->second;
 81047c6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 81047ca:	4618      	mov	r0, r3
 81047cc:	f000 f932 	bl	8104a34 <_ZNKSt8__detail20_Node_const_iteratorISt4pairIKN7APIDoIP12EDoIPRequestES1_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0ELb0EEptEv>
 81047d0:	4602      	mov	r2, r0
 81047d2:	f107 0320 	add.w	r3, r7, #32
 81047d6:	3204      	adds	r2, #4
 81047d8:	ca07      	ldmia	r2, {r0, r1, r2}
 81047da:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            if(!std::holds_alternative<EDynamicDataIndentifierRequestCode>(idenidentifierAttributes.first))
 81047de:	f107 0320 	add.w	r3, r7, #32
 81047e2:	4618      	mov	r0, r3
 81047e4:	f7ff ff90 	bl	8104708 <_ZSt17holds_alternativeI34EDynamicDataIndentifierRequestCodeJ7EUDSDIDS0_EEbRKSt7variantIJDpT0_EE>
 81047e8:	4603      	mov	r3, r0
 81047ea:	f083 0301 	eor.w	r3, r3, #1
 81047ee:	b2db      	uxtb	r3, r3
 81047f0:	2b00      	cmp	r3, #0
 81047f2:	d009      	beq.n	8104808 <_ZN17ConnectionManager37handleDynamicallyDefineDataIdentifierEPh11EECUAddress+0xc0>
            {
                LOG_DEBUG("[FATAL ERROR] currently processed request has wrong DID assignment: %d", currently_processed_request);
 81047f4:	f7fc fbcc 	bl	8100f90 <_ZN10LogPrinter8instanceEv>
 81047f8:	68fb      	ldr	r3, [r7, #12]
 81047fa:	f993 300c 	ldrsb.w	r3, [r3, #12]
 81047fe:	461a      	mov	r2, r3
 8104800:	491d      	ldr	r1, [pc, #116]	@ (8104878 <_ZN17ConnectionManager37handleDynamicallyDefineDataIdentifierEPh11EECUAddress+0x130>)
 8104802:	f7fc fbed 	bl	8100fe0 <_ZN10LogPrinter10printDebugEPKcz>
                return;
 8104806:	e02f      	b.n	8104868 <_ZN17ConnectionManager37handleDynamicallyDefineDataIdentifierEPh11EECUAddress+0x120>
            }
            APIDoIP::prepareSecondRequestForDynamicData(payloadToSend, sourceEcuAddr, std::get<EDynamicDataIndentifierRequestCode>(idenidentifierAttributes.first)); //TODO BATTERY_VOLTAGE na sztywno
 8104808:	f107 0320 	add.w	r3, r7, #32
 810480c:	4618      	mov	r0, r3
 810480e:	f000 f920 	bl	8104a52 <_ZSt3getI34EDynamicDataIndentifierRequestCodeJ7EUDSDIDS0_EERT_RSt7variantIJDpT0_EE>
 8104812:	4603      	mov	r3, r0
 8104814:	681a      	ldr	r2, [r3, #0]
 8104816:	79f9      	ldrb	r1, [r7, #7]
 8104818:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 810481c:	4618      	mov	r0, r3
 810481e:	f7fe fe49 	bl	81034b4 <_ZN7APIDoIP34prepareSecondRequestForDynamicDataEPh11EECUAddress34EDynamicDataIndentifierRequestCode>
            tcpSend(payloadToSend, totalUDSRequestSize, true);
 8104822:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 8104826:	2301      	movs	r3, #1
 8104828:	2210      	movs	r2, #16
 810482a:	68f8      	ldr	r0, [r7, #12]
 810482c:	f7ff feac 	bl	8104588 <_ZN17ConnectionManager7tcpSendEPhjb>
 8104830:	e01a      	b.n	8104868 <_ZN17ConnectionManager37handleDynamicallyDefineDataIdentifierEPh11EECUAddress+0x120>
            break;
        }
        case DynamicallyAssignDataSubSID::REQUEST_ASSIGN:
        {
            const size_t totalUDSRequestSize = APIDoIP::dataReqDataSize + 6;
 8104832:	230b      	movs	r3, #11
 8104834:	647b      	str	r3, [r7, #68]	@ 0x44
            uint8_t payloadToSend[totalUDSRequestSize] = {0}; // + 4 for data len and +2 for "checksum" 
 8104836:	2300      	movs	r3, #0
 8104838:	617b      	str	r3, [r7, #20]
 810483a:	f107 0318 	add.w	r3, r7, #24
 810483e:	2200      	movs	r2, #0
 8104840:	601a      	str	r2, [r3, #0]
 8104842:	f8c3 2003 	str.w	r2, [r3, #3]
            // response for the second dynamic assign sequence, so send request for data
            APIDoIP::prepareDataRequest(payloadToSend, sourceEcuAddr, EUDSDID::DYNAMICALLY_DEFINED_DATA_IDENTIFIER_0);
 8104846:	79f9      	ldrb	r1, [r7, #7]
 8104848:	f107 0314 	add.w	r3, r7, #20
 810484c:	f44f 4273 	mov.w	r2, #62208	@ 0xf300
 8104850:	4618      	mov	r0, r3
 8104852:	f7fe fdb7 	bl	81033c4 <_ZN7APIDoIP18prepareDataRequestEPh11EECUAddress7EUDSDID>
            tcpSend(payloadToSend, totalUDSRequestSize, true);
 8104856:	f107 0114 	add.w	r1, r7, #20
 810485a:	2301      	movs	r3, #1
 810485c:	220b      	movs	r2, #11
 810485e:	68f8      	ldr	r0, [r7, #12]
 8104860:	f7ff fe92 	bl	8104588 <_ZN17ConnectionManager7tcpSendEPhjb>
            break;
 8104864:	e000      	b.n	8104868 <_ZN17ConnectionManager37handleDynamicallyDefineDataIdentifierEPh11EECUAddress+0x120>
        }
        default:
            break;
 8104866:	bf00      	nop
    }
}
 8104868:	3750      	adds	r7, #80	@ 0x50
 810486a:	46bd      	mov	sp, r7
 810486c:	bd80      	pop	{r7, pc}
 810486e:	bf00      	nop
 8104870:	10000248 	.word	0x10000248
 8104874:	08125288 	.word	0x08125288
 8104878:	081252c0 	.word	0x081252c0

0810487c <_ZN17ConnectionManager18sendRequestForDataEN7APIDoIP12EDoIPRequestE>:

void ConnectionManager::sendRequestForData(APIDoIP::EDoIPRequest request)
{
 810487c:	b590      	push	{r4, r7, lr}
 810487e:	b091      	sub	sp, #68	@ 0x44
 8104880:	af00      	add	r7, sp, #0
 8104882:	6078      	str	r0, [r7, #4]
 8104884:	460b      	mov	r3, r1
 8104886:	70fb      	strb	r3, [r7, #3]
    currently_processed_request = request;
 8104888:	f997 2003 	ldrsb.w	r2, [r7, #3]
 810488c:	687b      	ldr	r3, [r7, #4]
 810488e:	731a      	strb	r2, [r3, #12]
    auto identifierEntry = APIDoIP::dataIdentifierMap.find(request);
 8104890:	1cfb      	adds	r3, r7, #3
 8104892:	4619      	mov	r1, r3
 8104894:	4837      	ldr	r0, [pc, #220]	@ (8104974 <_ZN17ConnectionManager18sendRequestForDataEN7APIDoIP12EDoIPRequestE+0xf8>)
 8104896:	f000 f8b1 	bl	81049fc <_ZNKSt13unordered_mapIN7APIDoIP12EDoIPRequestESt4pairISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressESt4hashIS1_ESt8equal_toIS1_ESaIS2_IKS1_S8_EEE4findERSD_>
 810489a:	4603      	mov	r3, r0
 810489c:	633b      	str	r3, [r7, #48]	@ 0x30
    if(identifierEntry == APIDoIP::dataIdentifierMap.end())
 810489e:	4835      	ldr	r0, [pc, #212]	@ (8104974 <_ZN17ConnectionManager18sendRequestForDataEN7APIDoIP12EDoIPRequestE+0xf8>)
 81048a0:	f000 f8bb 	bl	8104a1a <_ZNKSt13unordered_mapIN7APIDoIP12EDoIPRequestESt4pairISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressESt4hashIS1_ESt8equal_toIS1_ESaIS2_IKS1_S8_EEE3endEv>
 81048a4:	4603      	mov	r3, r0
 81048a6:	637b      	str	r3, [r7, #52]	@ 0x34
 81048a8:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 81048ac:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 81048b0:	4611      	mov	r1, r2
 81048b2:	4618      	mov	r0, r3
 81048b4:	f7fd fc5e 	bl	8102174 <_ZNSt8__detaileqERKNS_19_Node_iterator_baseISt4pairIKN7APIDoIP12EDoIPRequestES1_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEESE_>
 81048b8:	4603      	mov	r3, r0
 81048ba:	2b00      	cmp	r3, #0
 81048bc:	d009      	beq.n	81048d2 <_ZN17ConnectionManager18sendRequestForDataEN7APIDoIP12EDoIPRequestE+0x56>
    {
        LOG_DEBUG("Requested data identifier invalid: %d", request);
 81048be:	f7fc fb67 	bl	8100f90 <_ZN10LogPrinter8instanceEv>
 81048c2:	4603      	mov	r3, r0
 81048c4:	f997 2003 	ldrsb.w	r2, [r7, #3]
 81048c8:	492b      	ldr	r1, [pc, #172]	@ (8104978 <_ZN17ConnectionManager18sendRequestForDataEN7APIDoIP12EDoIPRequestE+0xfc>)
 81048ca:	4618      	mov	r0, r3
 81048cc:	f7fc fb88 	bl	8100fe0 <_ZN10LogPrinter10printDebugEPKcz>
 81048d0:	e04c      	b.n	810496c <_ZN17ConnectionManager18sendRequestForDataEN7APIDoIP12EDoIPRequestE+0xf0>
        return;
    }

    auto idenidentifierAttributes = identifierEntry->second;
 81048d2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 81048d6:	4618      	mov	r0, r3
 81048d8:	f000 f8ac 	bl	8104a34 <_ZNKSt8__detail20_Node_const_iteratorISt4pairIKN7APIDoIP12EDoIPRequestES1_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0ELb0EEptEv>
 81048dc:	4602      	mov	r2, r0
 81048de:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 81048e2:	3204      	adds	r2, #4
 81048e4:	ca07      	ldmia	r2, {r0, r1, r2}
 81048e6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    if(std::holds_alternative<EUDSDID>(idenidentifierAttributes.first))
 81048ea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 81048ee:	4618      	mov	r0, r3
 81048f0:	f000 f8bd 	bl	8104a6e <_ZSt17holds_alternativeI7EUDSDIDJS0_34EDynamicDataIndentifierRequestCodeEEbRKSt7variantIJDpT0_EE>
 81048f4:	4603      	mov	r3, r0
 81048f6:	2b00      	cmp	r3, #0
 81048f8:	d020      	beq.n	810493c <_ZN17ConnectionManager18sendRequestForDataEN7APIDoIP12EDoIPRequestE+0xc0>
    {
        const size_t totalUDSRequestSize = APIDoIP::dataReqDataSize + 6;
 81048fa:	230b      	movs	r3, #11
 81048fc:	63bb      	str	r3, [r7, #56]	@ 0x38
        uint8_t payloadToSend[totalUDSRequestSize] = {0}; // + 4 for data len and +2 for "checksum" 
 81048fe:	2300      	movs	r3, #0
 8104900:	61bb      	str	r3, [r7, #24]
 8104902:	f107 031c 	add.w	r3, r7, #28
 8104906:	2200      	movs	r2, #0
 8104908:	601a      	str	r2, [r3, #0]
 810490a:	f8c3 2003 	str.w	r2, [r3, #3]
        APIDoIP::prepareDataRequest(payloadToSend, idenidentifierAttributes.second, std::get<EUDSDID>(idenidentifierAttributes.first));
 810490e:	f897 402c 	ldrb.w	r4, [r7, #44]	@ 0x2c
 8104912:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8104916:	4618      	mov	r0, r3
 8104918:	f000 f8bd 	bl	8104a96 <_ZSt3getI7EUDSDIDJS0_34EDynamicDataIndentifierRequestCodeEERT_RSt7variantIJDpT0_EE>
 810491c:	4603      	mov	r3, r0
 810491e:	881a      	ldrh	r2, [r3, #0]
 8104920:	f107 0318 	add.w	r3, r7, #24
 8104924:	4621      	mov	r1, r4
 8104926:	4618      	mov	r0, r3
 8104928:	f7fe fd4c 	bl	81033c4 <_ZN7APIDoIP18prepareDataRequestEPh11EECUAddress7EUDSDID>
        tcpSend(payloadToSend, totalUDSRequestSize, false);
 810492c:	f107 0118 	add.w	r1, r7, #24
 8104930:	2300      	movs	r3, #0
 8104932:	220b      	movs	r2, #11
 8104934:	6878      	ldr	r0, [r7, #4]
 8104936:	f7ff fe27 	bl	8104588 <_ZN17ConnectionManager7tcpSendEPhjb>
 810493a:	e017      	b.n	810496c <_ZN17ConnectionManager18sendRequestForDataEN7APIDoIP12EDoIPRequestE+0xf0>
    }
    else
    {
        const size_t totalUDSRequestSize = APIDoIP::firstReqDynDataSize + 6;
 810493c:	230c      	movs	r3, #12
 810493e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        uint8_t payloadToSend[totalUDSRequestSize] = {0}; // + 4 for data len and +2 for "checksum" 
 8104940:	2300      	movs	r3, #0
 8104942:	60fb      	str	r3, [r7, #12]
 8104944:	f107 0310 	add.w	r3, r7, #16
 8104948:	2200      	movs	r2, #0
 810494a:	601a      	str	r2, [r3, #0]
 810494c:	605a      	str	r2, [r3, #4]
        APIDoIP::prepareFirstRequestForDynamicData(payloadToSend, idenidentifierAttributes.second);
 810494e:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8104952:	f107 030c 	add.w	r3, r7, #12
 8104956:	4611      	mov	r1, r2
 8104958:	4618      	mov	r0, r3
 810495a:	f7fe fd70 	bl	810343e <_ZN7APIDoIP33prepareFirstRequestForDynamicDataEPh11EECUAddress>
        tcpSend(payloadToSend, totalUDSRequestSize, false);
 810495e:	f107 010c 	add.w	r1, r7, #12
 8104962:	2300      	movs	r3, #0
 8104964:	220c      	movs	r2, #12
 8104966:	6878      	ldr	r0, [r7, #4]
 8104968:	f7ff fe0e 	bl	8104588 <_ZN17ConnectionManager7tcpSendEPhjb>
    }
}
 810496c:	3744      	adds	r7, #68	@ 0x44
 810496e:	46bd      	mov	sp, r7
 8104970:	bd90      	pop	{r4, r7, pc}
 8104972:	bf00      	nop
 8104974:	10000248 	.word	0x10000248
 8104978:	08125308 	.word	0x08125308

0810497c <_ZN17ConnectionManager18processUdpDicoveryEv>:

void ConnectionManager::processUdpDicovery()
{
 810497c:	b580      	push	{r7, lr}
 810497e:	b082      	sub	sp, #8
 8104980:	af00      	add	r7, sp, #0
 8104982:	6078      	str	r0, [r7, #4]
    sendSSDP();
 8104984:	6878      	ldr	r0, [r7, #4]
 8104986:	f7ff f86f 	bl	8103a68 <_ZN17ConnectionManager8sendSSDPEv>
    sendSLP();
 810498a:	6878      	ldr	r0, [r7, #4]
 810498c:	f7ff f8c0 	bl	8103b10 <_ZN17ConnectionManager7sendSLPEv>
    sendDoIPInit();
 8104990:	6878      	ldr	r0, [r7, #4]
 8104992:	f7ff f92b 	bl	8103bec <_ZN17ConnectionManager12sendDoIPInitEv>
    osDelay(300);
 8104996:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 810499a:	f00e f898 	bl	8112ace <osDelay>
 810499e:	bf00      	nop
 81049a0:	3708      	adds	r7, #8
 81049a2:	46bd      	mov	sp, r7
 81049a4:	bd80      	pop	{r7, pc}

081049a6 <_ZNKSt8optionalI8SMessageE9has_valueEv>:
      constexpr bool has_value() const noexcept
 81049a6:	b580      	push	{r7, lr}
 81049a8:	b082      	sub	sp, #8
 81049aa:	af00      	add	r7, sp, #0
 81049ac:	6078      	str	r0, [r7, #4]
      { return this->_M_is_engaged(); }
 81049ae:	6878      	ldr	r0, [r7, #4]
 81049b0:	f7ff fe47 	bl	8104642 <_ZNKSt19_Optional_base_implI8SMessageSt14_Optional_baseIS0_Lb1ELb1EEE13_M_is_engagedEv>
 81049b4:	4603      	mov	r3, r0
 81049b6:	4618      	mov	r0, r3
 81049b8:	3708      	adds	r7, #8
 81049ba:	46bd      	mov	sp, r7
 81049bc:	bd80      	pop	{r7, pc}

081049be <_ZNSt19_Optional_base_implI8SMessageSt14_Optional_baseIS0_Lb1ELb1EEE6_M_getEv>:
      _M_get() noexcept
 81049be:	b580      	push	{r7, lr}
 81049c0:	b082      	sub	sp, #8
 81049c2:	af00      	add	r7, sp, #0
 81049c4:	6078      	str	r0, [r7, #4]
	__glibcxx_assert(this->_M_is_engaged());
 81049c6:	f7fc fc57 	bl	8101278 <__is_constant_evaluated>
 81049ca:	4603      	mov	r3, r0
 81049cc:	2b00      	cmp	r3, #0
 81049ce:	d00a      	beq.n	81049e6 <_ZNSt19_Optional_base_implI8SMessageSt14_Optional_baseIS0_Lb1ELb1EEE6_M_getEv+0x28>
 81049d0:	6878      	ldr	r0, [r7, #4]
 81049d2:	f7ff fe36 	bl	8104642 <_ZNKSt19_Optional_base_implI8SMessageSt14_Optional_baseIS0_Lb1ELb1EEE13_M_is_engagedEv>
 81049d6:	4603      	mov	r3, r0
 81049d8:	f083 0301 	eor.w	r3, r3, #1
 81049dc:	b2db      	uxtb	r3, r3
 81049de:	2b00      	cmp	r3, #0
 81049e0:	d001      	beq.n	81049e6 <_ZNSt19_Optional_base_implI8SMessageSt14_Optional_baseIS0_Lb1ELb1EEE6_M_getEv+0x28>
 81049e2:	2301      	movs	r3, #1
 81049e4:	e000      	b.n	81049e8 <_ZNSt19_Optional_base_implI8SMessageSt14_Optional_baseIS0_Lb1ELb1EEE6_M_getEv+0x2a>
 81049e6:	2300      	movs	r3, #0
 81049e8:	2b00      	cmp	r3, #0
	return static_cast<_Dp*>(this)->_M_payload._M_get();
 81049ea:	687b      	ldr	r3, [r7, #4]
 81049ec:	4618      	mov	r0, r3
 81049ee:	f000 f860 	bl	8104ab2 <_ZNSt22_Optional_payload_baseI8SMessageE6_M_getEv>
 81049f2:	4603      	mov	r3, r0
      }
 81049f4:	4618      	mov	r0, r3
 81049f6:	3708      	adds	r7, #8
 81049f8:	46bd      	mov	sp, r7
 81049fa:	bd80      	pop	{r7, pc}

081049fc <_ZNKSt13unordered_mapIN7APIDoIP12EDoIPRequestESt4pairISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressESt4hashIS1_ESt8equal_toIS1_ESaIS2_IKS1_S8_EEE4findERSD_>:
	find(const _Kt& __x) -> decltype(_M_h._M_find_tr(__x))
	{ return _M_h._M_find_tr(__x); }
#endif

      const_iterator
      find(const key_type& __x) const
 81049fc:	b580      	push	{r7, lr}
 81049fe:	b082      	sub	sp, #8
 8104a00:	af00      	add	r7, sp, #0
 8104a02:	6078      	str	r0, [r7, #4]
 8104a04:	6039      	str	r1, [r7, #0]
      { return _M_h.find(__x); }
 8104a06:	687b      	ldr	r3, [r7, #4]
 8104a08:	6839      	ldr	r1, [r7, #0]
 8104a0a:	4618      	mov	r0, r3
 8104a0c:	f000 f85c 	bl	8104ac8 <_ZNKSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE4findERS3_>
 8104a10:	4603      	mov	r3, r0
 8104a12:	4618      	mov	r0, r3
 8104a14:	3708      	adds	r7, #8
 8104a16:	46bd      	mov	sp, r7
 8104a18:	bd80      	pop	{r7, pc}

08104a1a <_ZNKSt13unordered_mapIN7APIDoIP12EDoIPRequestESt4pairISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressESt4hashIS1_ESt8equal_toIS1_ESaIS2_IKS1_S8_EEE3endEv>:
      end() const noexcept
 8104a1a:	b580      	push	{r7, lr}
 8104a1c:	b082      	sub	sp, #8
 8104a1e:	af00      	add	r7, sp, #0
 8104a20:	6078      	str	r0, [r7, #4]
      { return _M_h.end(); }
 8104a22:	687b      	ldr	r3, [r7, #4]
 8104a24:	4618      	mov	r0, r3
 8104a26:	f000 f8ad 	bl	8104b84 <_ZNKSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE3endEv>
 8104a2a:	4603      	mov	r3, r0
 8104a2c:	4618      	mov	r0, r3
 8104a2e:	3708      	adds	r7, #8
 8104a30:	46bd      	mov	sp, r7
 8104a32:	bd80      	pop	{r7, pc}

08104a34 <_ZNKSt8__detail20_Node_const_iteratorISt4pairIKN7APIDoIP12EDoIPRequestES1_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0ELb0EEptEv>:
      operator->() const noexcept
 8104a34:	b580      	push	{r7, lr}
 8104a36:	b082      	sub	sp, #8
 8104a38:	af00      	add	r7, sp, #0
 8104a3a:	6078      	str	r0, [r7, #4]
      { return this->_M_cur->_M_valptr(); }
 8104a3c:	687b      	ldr	r3, [r7, #4]
 8104a3e:	681b      	ldr	r3, [r3, #0]
 8104a40:	3304      	adds	r3, #4
 8104a42:	4618      	mov	r0, r3
 8104a44:	f7fd fa70 	bl	8101f28 <_ZNSt8__detail21_Hash_node_value_baseISt4pairIKN7APIDoIP12EDoIPRequestES1_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEEE9_M_valptrEv>
 8104a48:	4603      	mov	r3, r0
 8104a4a:	4618      	mov	r0, r3
 8104a4c:	3708      	adds	r7, #8
 8104a4e:	46bd      	mov	sp, r7
 8104a50:	bd80      	pop	{r7, pc}

08104a52 <_ZSt3getI34EDynamicDataIndentifierRequestCodeJ7EUDSDIDS0_EERT_RSt7variantIJDpT0_EE>:
    get(variant<_Types...>& __v)
 8104a52:	b580      	push	{r7, lr}
 8104a54:	b084      	sub	sp, #16
 8104a56:	af00      	add	r7, sp, #0
 8104a58:	6078      	str	r0, [r7, #4]
      constexpr size_t __n = std::__find_uniq_type_in_pack<_Tp, _Types...>();
 8104a5a:	2301      	movs	r3, #1
 8104a5c:	60fb      	str	r3, [r7, #12]
      return std::get<__n>(__v);
 8104a5e:	6878      	ldr	r0, [r7, #4]
 8104a60:	f000 f8bf 	bl	8104be2 <_ZSt3getILj1EJ7EUDSDID34EDynamicDataIndentifierRequestCodeEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERS6_>
 8104a64:	4603      	mov	r3, r0
    }
 8104a66:	4618      	mov	r0, r3
 8104a68:	3710      	adds	r7, #16
 8104a6a:	46bd      	mov	sp, r7
 8104a6c:	bd80      	pop	{r7, pc}

08104a6e <_ZSt17holds_alternativeI7EUDSDIDJS0_34EDynamicDataIndentifierRequestCodeEEbRKSt7variantIJDpT0_EE>:
    holds_alternative(const variant<_Types...>& __v) noexcept
 8104a6e:	b590      	push	{r4, r7, lr}
 8104a70:	b083      	sub	sp, #12
 8104a72:	af00      	add	r7, sp, #0
 8104a74:	6078      	str	r0, [r7, #4]
      return __v.index() == std::__find_uniq_type_in_pack<_Tp, _Types...>();
 8104a76:	6878      	ldr	r0, [r7, #4]
 8104a78:	f7ff fe5a 	bl	8104730 <_ZNKSt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE5indexEv>
 8104a7c:	4604      	mov	r4, r0
 8104a7e:	f7fe ff31 	bl	81038e4 <_ZSt24__find_uniq_type_in_packI7EUDSDIDJS0_34EDynamicDataIndentifierRequestCodeEEjv>
 8104a82:	4603      	mov	r3, r0
 8104a84:	429c      	cmp	r4, r3
 8104a86:	bf0c      	ite	eq
 8104a88:	2301      	moveq	r3, #1
 8104a8a:	2300      	movne	r3, #0
 8104a8c:	b2db      	uxtb	r3, r3
    }
 8104a8e:	4618      	mov	r0, r3
 8104a90:	370c      	adds	r7, #12
 8104a92:	46bd      	mov	sp, r7
 8104a94:	bd90      	pop	{r4, r7, pc}

08104a96 <_ZSt3getI7EUDSDIDJS0_34EDynamicDataIndentifierRequestCodeEERT_RSt7variantIJDpT0_EE>:
    get(variant<_Types...>& __v)
 8104a96:	b580      	push	{r7, lr}
 8104a98:	b084      	sub	sp, #16
 8104a9a:	af00      	add	r7, sp, #0
 8104a9c:	6078      	str	r0, [r7, #4]
      constexpr size_t __n = std::__find_uniq_type_in_pack<_Tp, _Types...>();
 8104a9e:	2300      	movs	r3, #0
 8104aa0:	60fb      	str	r3, [r7, #12]
      return std::get<__n>(__v);
 8104aa2:	6878      	ldr	r0, [r7, #4]
 8104aa4:	f000 f8db 	bl	8104c5e <_ZSt3getILj0EJ7EUDSDID34EDynamicDataIndentifierRequestCodeEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERS6_>
 8104aa8:	4603      	mov	r3, r0
    }
 8104aaa:	4618      	mov	r0, r3
 8104aac:	3710      	adds	r7, #16
 8104aae:	46bd      	mov	sp, r7
 8104ab0:	bd80      	pop	{r7, pc}

08104ab2 <_ZNSt22_Optional_payload_baseI8SMessageE6_M_getEv>:
      _M_get() noexcept
 8104ab2:	b480      	push	{r7}
 8104ab4:	b083      	sub	sp, #12
 8104ab6:	af00      	add	r7, sp, #0
 8104ab8:	6078      	str	r0, [r7, #4]
      { return this->_M_payload._M_value; }
 8104aba:	687b      	ldr	r3, [r7, #4]
 8104abc:	4618      	mov	r0, r3
 8104abe:	370c      	adds	r7, #12
 8104ac0:	46bd      	mov	sp, r7
 8104ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104ac6:	4770      	bx	lr

08104ac8 <_ZNKSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE4findERS3_>:
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
 8104ac8:	b590      	push	{r4, r7, lr}
 8104aca:	b089      	sub	sp, #36	@ 0x24
 8104acc:	af00      	add	r7, sp, #0
 8104ace:	6078      	str	r0, [r7, #4]
 8104ad0:	6039      	str	r1, [r7, #0]
      if (size() <= __small_size_threshold())
 8104ad2:	6878      	ldr	r0, [r7, #4]
 8104ad4:	f7fd fb19 	bl	810210a <_ZNKSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE4sizeEv>
 8104ad8:	4604      	mov	r4, r0
 8104ada:	f7fd fb22 	bl	8102122 <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE22__small_size_thresholdEv>
 8104ade:	4603      	mov	r3, r0
 8104ae0:	429c      	cmp	r4, r3
 8104ae2:	bf94      	ite	ls
 8104ae4:	2301      	movls	r3, #1
 8104ae6:	2300      	movhi	r3, #0
 8104ae8:	b2db      	uxtb	r3, r3
 8104aea:	2b00      	cmp	r3, #0
 8104aec:	d02e      	beq.n	8104b4c <_ZNKSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE4findERS3_+0x84>
	  for (auto __it = begin(); __it != end(); ++__it)
 8104aee:	6878      	ldr	r0, [r7, #4]
 8104af0:	f000 f8d3 	bl	8104c9a <_ZNKSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE5beginEv>
 8104af4:	4603      	mov	r3, r0
 8104af6:	60fb      	str	r3, [r7, #12]
 8104af8:	e010      	b.n	8104b1c <_ZNKSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE4findERS3_+0x54>
	    if (this->_M_key_equals(__k, *__it._M_cur))
 8104afa:	68fb      	ldr	r3, [r7, #12]
 8104afc:	3304      	adds	r3, #4
 8104afe:	461a      	mov	r2, r3
 8104b00:	6839      	ldr	r1, [r7, #0]
 8104b02:	6878      	ldr	r0, [r7, #4]
 8104b04:	f000 f8e9 	bl	8104cda <_ZNKSt8__detail15_Hashtable_baseIN7APIDoIP12EDoIPRequestESt4pairIKS2_S3_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEENS_10_Select1stESt8equal_toIS2_ESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEE13_M_key_equalsERS4_RKNS_16_Hash_node_valueISB_Lb0EEE>
 8104b08:	4603      	mov	r3, r0
 8104b0a:	2b00      	cmp	r3, #0
 8104b0c:	d001      	beq.n	8104b12 <_ZNKSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE4findERS3_+0x4a>
	      return __it;
 8104b0e:	68fb      	ldr	r3, [r7, #12]
 8104b10:	e034      	b.n	8104b7c <_ZNKSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE4findERS3_+0xb4>
	  for (auto __it = begin(); __it != end(); ++__it)
 8104b12:	f107 030c 	add.w	r3, r7, #12
 8104b16:	4618      	mov	r0, r3
 8104b18:	f000 f8d2 	bl	8104cc0 <_ZNSt8__detail20_Node_const_iteratorISt4pairIKN7APIDoIP12EDoIPRequestES1_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0ELb0EEppEv>
 8104b1c:	6878      	ldr	r0, [r7, #4]
 8104b1e:	f000 f831 	bl	8104b84 <_ZNKSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE3endEv>
 8104b22:	4603      	mov	r3, r0
 8104b24:	613b      	str	r3, [r7, #16]
 8104b26:	f107 0210 	add.w	r2, r7, #16
 8104b2a:	f107 030c 	add.w	r3, r7, #12
 8104b2e:	4611      	mov	r1, r2
 8104b30:	4618      	mov	r0, r3
 8104b32:	f7fd fb1f 	bl	8102174 <_ZNSt8__detaileqERKNS_19_Node_iterator_baseISt4pairIKN7APIDoIP12EDoIPRequestES1_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEESE_>
 8104b36:	4603      	mov	r3, r0
 8104b38:	f083 0301 	eor.w	r3, r3, #1
 8104b3c:	b2db      	uxtb	r3, r3
 8104b3e:	2b00      	cmp	r3, #0
 8104b40:	d1db      	bne.n	8104afa <_ZNKSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE4findERS3_+0x32>
	  return end();
 8104b42:	6878      	ldr	r0, [r7, #4]
 8104b44:	f000 f81e 	bl	8104b84 <_ZNKSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE3endEv>
 8104b48:	4603      	mov	r3, r0
 8104b4a:	e017      	b.n	8104b7c <_ZNKSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE4findERS3_+0xb4>
      __hash_code __code = this->_M_hash_code(__k);
 8104b4c:	6839      	ldr	r1, [r7, #0]
 8104b4e:	6878      	ldr	r0, [r7, #4]
 8104b50:	f7fe f88d 	bl	8102c6e <_ZNKSt8__detail15_Hash_code_baseIN7APIDoIP12EDoIPRequestESt4pairIKS2_S3_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEENS_10_Select1stESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE12_M_hash_codeERS4_>
 8104b54:	61f8      	str	r0, [r7, #28]
      std::size_t __bkt = _M_bucket_index(__code);
 8104b56:	69f9      	ldr	r1, [r7, #28]
 8104b58:	6878      	ldr	r0, [r7, #4]
 8104b5a:	f7fd fb7a 	bl	8102252 <_ZNKSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE15_M_bucket_indexEj>
 8104b5e:	61b8      	str	r0, [r7, #24]
      return const_iterator(_M_find_node(__bkt, __k, __code));
 8104b60:	69fb      	ldr	r3, [r7, #28]
 8104b62:	683a      	ldr	r2, [r7, #0]
 8104b64:	69b9      	ldr	r1, [r7, #24]
 8104b66:	6878      	ldr	r0, [r7, #4]
 8104b68:	f000 f8d7 	bl	8104d1a <_ZNKSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE12_M_find_nodeEjRS3_j>
 8104b6c:	4602      	mov	r2, r0
 8104b6e:	f107 0314 	add.w	r3, r7, #20
 8104b72:	4611      	mov	r1, r2
 8104b74:	4618      	mov	r0, r3
 8104b76:	f000 f8e9 	bl	8104d4c <_ZNSt8__detail20_Node_const_iteratorISt4pairIKN7APIDoIP12EDoIPRequestES1_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0ELb0EEC1EPNS_10_Hash_nodeISB_Lb0EEE>
 8104b7a:	697b      	ldr	r3, [r7, #20]
    }
 8104b7c:	4618      	mov	r0, r3
 8104b7e:	3724      	adds	r7, #36	@ 0x24
 8104b80:	46bd      	mov	sp, r7
 8104b82:	bd90      	pop	{r4, r7, pc}

08104b84 <_ZNKSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE3endEv>:
      end() const noexcept
 8104b84:	b580      	push	{r7, lr}
 8104b86:	b084      	sub	sp, #16
 8104b88:	af00      	add	r7, sp, #0
 8104b8a:	6078      	str	r0, [r7, #4]
      { return const_iterator(nullptr); }
 8104b8c:	f107 030c 	add.w	r3, r7, #12
 8104b90:	2100      	movs	r1, #0
 8104b92:	4618      	mov	r0, r3
 8104b94:	f000 f8da 	bl	8104d4c <_ZNSt8__detail20_Node_const_iteratorISt4pairIKN7APIDoIP12EDoIPRequestES1_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0ELb0EEC1EPNS_10_Hash_nodeISB_Lb0EEE>
 8104b98:	68fb      	ldr	r3, [r7, #12]
 8104b9a:	4618      	mov	r0, r3
 8104b9c:	3710      	adds	r7, #16
 8104b9e:	46bd      	mov	sp, r7
 8104ba0:	bd80      	pop	{r7, pc}

08104ba2 <_ZNSt8__detail9__variant7__get_nILj1ERNS0_15_Variadic_unionIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEEEEEDcOT0_>:
    __get_n(_Union&& __u) noexcept
 8104ba2:	b580      	push	{r7, lr}
 8104ba4:	b082      	sub	sp, #8
 8104ba6:	af00      	add	r7, sp, #0
 8104ba8:	6078      	str	r0, [r7, #4]
	return std::forward<_Union>(__u)._M_rest._M_first._M_get();
 8104baa:	6878      	ldr	r0, [r7, #4]
 8104bac:	f000 f8f8 	bl	8104da0 <_ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEEEEOT_RNSt16remove_referenceIS7_E4typeE>
 8104bb0:	4603      	mov	r3, r0
 8104bb2:	4618      	mov	r0, r3
 8104bb4:	f000 f8ff 	bl	8104db6 <_ZNRSt8__detail9__variant14_UninitializedI34EDynamicDataIndentifierRequestCodeLb1EE6_M_getEv>
 8104bb8:	4603      	mov	r3, r0
    }
 8104bba:	4618      	mov	r0, r3
 8104bbc:	3708      	adds	r7, #8
 8104bbe:	46bd      	mov	sp, r7
 8104bc0:	bd80      	pop	{r7, pc}

08104bc2 <_ZNSt8__detail9__variant5__getILj1ERSt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEEEEDcOT0_>:
    __get(_Variant&& __v) noexcept
 8104bc2:	b580      	push	{r7, lr}
 8104bc4:	b082      	sub	sp, #8
 8104bc6:	af00      	add	r7, sp, #0
 8104bc8:	6078      	str	r0, [r7, #4]
    { return __variant::__get_n<_Np>(std::forward<_Variant>(__v)._M_u); }
 8104bca:	6878      	ldr	r0, [r7, #4]
 8104bcc:	f000 f8dd 	bl	8104d8a <_ZSt7forwardIRSt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEEEOT_RNSt16remove_referenceIS5_E4typeE>
 8104bd0:	4603      	mov	r3, r0
 8104bd2:	4618      	mov	r0, r3
 8104bd4:	f7ff ffe5 	bl	8104ba2 <_ZNSt8__detail9__variant7__get_nILj1ERNS0_15_Variadic_unionIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEEEEEDcOT0_>
 8104bd8:	4603      	mov	r3, r0
 8104bda:	4618      	mov	r0, r3
 8104bdc:	3708      	adds	r7, #8
 8104bde:	46bd      	mov	sp, r7
 8104be0:	bd80      	pop	{r7, pc}

08104be2 <_ZSt3getILj1EJ7EUDSDID34EDynamicDataIndentifierRequestCodeEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERS6_>:
#undef _VARIANT_RELATION_FUNCTION_TEMPLATE
    };

  template<size_t _Np, typename... _Types>
    constexpr variant_alternative_t<_Np, variant<_Types...>>&
    get(variant<_Types...>& __v)
 8104be2:	b580      	push	{r7, lr}
 8104be4:	b082      	sub	sp, #8
 8104be6:	af00      	add	r7, sp, #0
 8104be8:	6078      	str	r0, [r7, #4]
    {
      static_assert(_Np < sizeof...(_Types),
		    "The index must be in [0, number of alternatives)");
      if (__v.index() != _Np)
 8104bea:	6878      	ldr	r0, [r7, #4]
 8104bec:	f7ff fda0 	bl	8104730 <_ZNKSt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE5indexEv>
 8104bf0:	4603      	mov	r3, r0
 8104bf2:	2b01      	cmp	r3, #1
 8104bf4:	bf14      	ite	ne
 8104bf6:	2301      	movne	r3, #1
 8104bf8:	2300      	moveq	r3, #0
 8104bfa:	b2db      	uxtb	r3, r3
 8104bfc:	2b00      	cmp	r3, #0
 8104bfe:	d006      	beq.n	8104c0e <_ZSt3getILj1EJ7EUDSDID34EDynamicDataIndentifierRequestCodeEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERS6_+0x2c>
	__throw_bad_variant_access(__v.valueless_by_exception());
 8104c00:	6878      	ldr	r0, [r7, #4]
 8104c02:	f000 f8b2 	bl	8104d6a <_ZNKSt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE22valueless_by_exceptionEv>
 8104c06:	4603      	mov	r3, r0
 8104c08:	4618      	mov	r0, r3
 8104c0a:	f7fe fe27 	bl	810385c <_ZSt26__throw_bad_variant_accessb>
      return __detail::__variant::__get<_Np>(__v);
 8104c0e:	6878      	ldr	r0, [r7, #4]
 8104c10:	f7ff ffd7 	bl	8104bc2 <_ZNSt8__detail9__variant5__getILj1ERSt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEEEEDcOT0_>
 8104c14:	4603      	mov	r3, r0
    }
 8104c16:	4618      	mov	r0, r3
 8104c18:	3708      	adds	r7, #8
 8104c1a:	46bd      	mov	sp, r7
 8104c1c:	bd80      	pop	{r7, pc}

08104c1e <_ZNSt8__detail9__variant7__get_nILj0ERNS0_15_Variadic_unionIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEEEEEDcOT0_>:
    __get_n(_Union&& __u) noexcept
 8104c1e:	b580      	push	{r7, lr}
 8104c20:	b082      	sub	sp, #8
 8104c22:	af00      	add	r7, sp, #0
 8104c24:	6078      	str	r0, [r7, #4]
	return std::forward<_Union>(__u)._M_first._M_get();
 8104c26:	6878      	ldr	r0, [r7, #4]
 8104c28:	f000 f8ba 	bl	8104da0 <_ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEEEEOT_RNSt16remove_referenceIS7_E4typeE>
 8104c2c:	4603      	mov	r3, r0
 8104c2e:	4618      	mov	r0, r3
 8104c30:	f000 f8cc 	bl	8104dcc <_ZNRSt8__detail9__variant14_UninitializedI7EUDSDIDLb1EE6_M_getEv>
 8104c34:	4603      	mov	r3, r0
    }
 8104c36:	4618      	mov	r0, r3
 8104c38:	3708      	adds	r7, #8
 8104c3a:	46bd      	mov	sp, r7
 8104c3c:	bd80      	pop	{r7, pc}

08104c3e <_ZNSt8__detail9__variant5__getILj0ERSt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEEEEDcOT0_>:
    __get(_Variant&& __v) noexcept
 8104c3e:	b580      	push	{r7, lr}
 8104c40:	b082      	sub	sp, #8
 8104c42:	af00      	add	r7, sp, #0
 8104c44:	6078      	str	r0, [r7, #4]
    { return __variant::__get_n<_Np>(std::forward<_Variant>(__v)._M_u); }
 8104c46:	6878      	ldr	r0, [r7, #4]
 8104c48:	f000 f89f 	bl	8104d8a <_ZSt7forwardIRSt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEEEOT_RNSt16remove_referenceIS5_E4typeE>
 8104c4c:	4603      	mov	r3, r0
 8104c4e:	4618      	mov	r0, r3
 8104c50:	f7ff ffe5 	bl	8104c1e <_ZNSt8__detail9__variant7__get_nILj0ERNS0_15_Variadic_unionIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEEEEEDcOT0_>
 8104c54:	4603      	mov	r3, r0
 8104c56:	4618      	mov	r0, r3
 8104c58:	3708      	adds	r7, #8
 8104c5a:	46bd      	mov	sp, r7
 8104c5c:	bd80      	pop	{r7, pc}

08104c5e <_ZSt3getILj0EJ7EUDSDID34EDynamicDataIndentifierRequestCodeEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERS6_>:
    get(variant<_Types...>& __v)
 8104c5e:	b580      	push	{r7, lr}
 8104c60:	b082      	sub	sp, #8
 8104c62:	af00      	add	r7, sp, #0
 8104c64:	6078      	str	r0, [r7, #4]
      if (__v.index() != _Np)
 8104c66:	6878      	ldr	r0, [r7, #4]
 8104c68:	f7ff fd62 	bl	8104730 <_ZNKSt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE5indexEv>
 8104c6c:	4603      	mov	r3, r0
 8104c6e:	2b00      	cmp	r3, #0
 8104c70:	bf14      	ite	ne
 8104c72:	2301      	movne	r3, #1
 8104c74:	2300      	moveq	r3, #0
 8104c76:	b2db      	uxtb	r3, r3
 8104c78:	2b00      	cmp	r3, #0
 8104c7a:	d006      	beq.n	8104c8a <_ZSt3getILj0EJ7EUDSDID34EDynamicDataIndentifierRequestCodeEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERS6_+0x2c>
	__throw_bad_variant_access(__v.valueless_by_exception());
 8104c7c:	6878      	ldr	r0, [r7, #4]
 8104c7e:	f000 f874 	bl	8104d6a <_ZNKSt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE22valueless_by_exceptionEv>
 8104c82:	4603      	mov	r3, r0
 8104c84:	4618      	mov	r0, r3
 8104c86:	f7fe fde9 	bl	810385c <_ZSt26__throw_bad_variant_accessb>
      return __detail::__variant::__get<_Np>(__v);
 8104c8a:	6878      	ldr	r0, [r7, #4]
 8104c8c:	f7ff ffd7 	bl	8104c3e <_ZNSt8__detail9__variant5__getILj0ERSt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEEEEDcOT0_>
 8104c90:	4603      	mov	r3, r0
    }
 8104c92:	4618      	mov	r0, r3
 8104c94:	3708      	adds	r7, #8
 8104c96:	46bd      	mov	sp, r7
 8104c98:	bd80      	pop	{r7, pc}

08104c9a <_ZNKSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE5beginEv>:
      begin() const noexcept
 8104c9a:	b580      	push	{r7, lr}
 8104c9c:	b084      	sub	sp, #16
 8104c9e:	af00      	add	r7, sp, #0
 8104ca0:	6078      	str	r0, [r7, #4]
      { return const_iterator(_M_begin()); }
 8104ca2:	6878      	ldr	r0, [r7, #4]
 8104ca4:	f7fc feba 	bl	8101a1c <_ZNKSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE8_M_beginEv>
 8104ca8:	4602      	mov	r2, r0
 8104caa:	f107 030c 	add.w	r3, r7, #12
 8104cae:	4611      	mov	r1, r2
 8104cb0:	4618      	mov	r0, r3
 8104cb2:	f000 f84b 	bl	8104d4c <_ZNSt8__detail20_Node_const_iteratorISt4pairIKN7APIDoIP12EDoIPRequestES1_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0ELb0EEC1EPNS_10_Hash_nodeISB_Lb0EEE>
 8104cb6:	68fb      	ldr	r3, [r7, #12]
 8104cb8:	4618      	mov	r0, r3
 8104cba:	3710      	adds	r7, #16
 8104cbc:	46bd      	mov	sp, r7
 8104cbe:	bd80      	pop	{r7, pc}

08104cc0 <_ZNSt8__detail20_Node_const_iteratorISt4pairIKN7APIDoIP12EDoIPRequestES1_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0ELb0EEppEv>:
      operator++() noexcept
 8104cc0:	b580      	push	{r7, lr}
 8104cc2:	b082      	sub	sp, #8
 8104cc4:	af00      	add	r7, sp, #0
 8104cc6:	6078      	str	r0, [r7, #4]
	this->_M_incr();
 8104cc8:	687b      	ldr	r3, [r7, #4]
 8104cca:	4618      	mov	r0, r3
 8104ccc:	f7fd fc39 	bl	8102542 <_ZNSt8__detail19_Node_iterator_baseISt4pairIKN7APIDoIP12EDoIPRequestES1_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EE7_M_incrEv>
	return *this;
 8104cd0:	687b      	ldr	r3, [r7, #4]
      }
 8104cd2:	4618      	mov	r0, r3
 8104cd4:	3708      	adds	r7, #8
 8104cd6:	46bd      	mov	sp, r7
 8104cd8:	bd80      	pop	{r7, pc}

08104cda <_ZNKSt8__detail15_Hashtable_baseIN7APIDoIP12EDoIPRequestESt4pairIKS2_S3_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEENS_10_Select1stESt8equal_toIS2_ESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEE13_M_key_equalsERS4_RKNS_16_Hash_node_valueISB_Lb0EEE>:
      _M_key_equals(const _Key& __k,
 8104cda:	b590      	push	{r4, r7, lr}
 8104cdc:	b087      	sub	sp, #28
 8104cde:	af00      	add	r7, sp, #0
 8104ce0:	60f8      	str	r0, [r7, #12]
 8104ce2:	60b9      	str	r1, [r7, #8]
 8104ce4:	607a      	str	r2, [r7, #4]
	return _M_eq()(__k, _ExtractKey{}(__n._M_v()));
 8104ce6:	68f8      	ldr	r0, [r7, #12]
 8104ce8:	f7fd fc3b 	bl	8102562 <_ZNKSt8__detail15_Hashtable_baseIN7APIDoIP12EDoIPRequestESt4pairIKS2_S3_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEENS_10_Select1stESt8equal_toIS2_ESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEE5_M_eqEv>
 8104cec:	4604      	mov	r4, r0
 8104cee:	687b      	ldr	r3, [r7, #4]
 8104cf0:	4618      	mov	r0, r3
 8104cf2:	f7fd fc42 	bl	810257a <_ZNKSt8__detail21_Hash_node_value_baseISt4pairIKN7APIDoIP12EDoIPRequestES1_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEEE4_M_vEv>
 8104cf6:	4602      	mov	r2, r0
 8104cf8:	f107 0314 	add.w	r3, r7, #20
 8104cfc:	4611      	mov	r1, r2
 8104cfe:	4618      	mov	r0, r3
 8104d00:	f7fd f83d 	bl	8101d7e <_ZNKSt8__detail10_Select1stclIRKSt4pairIKN7APIDoIP12EDoIPRequestES2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEEEEONS0_10__1st_typeIT_E4typeEOSG_>
 8104d04:	4603      	mov	r3, r0
 8104d06:	461a      	mov	r2, r3
 8104d08:	68b9      	ldr	r1, [r7, #8]
 8104d0a:	4620      	mov	r0, r4
 8104d0c:	f7fd fc41 	bl	8102592 <_ZNKSt8equal_toIN7APIDoIP12EDoIPRequestEEclERKS1_S4_>
 8104d10:	4603      	mov	r3, r0
      }
 8104d12:	4618      	mov	r0, r3
 8104d14:	371c      	adds	r7, #28
 8104d16:	46bd      	mov	sp, r7
 8104d18:	bd90      	pop	{r4, r7, pc}

08104d1a <_ZNKSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE12_M_find_nodeEjRS3_j>:
      _M_find_node(size_type __bkt, const key_type& __key,
 8104d1a:	b580      	push	{r7, lr}
 8104d1c:	b086      	sub	sp, #24
 8104d1e:	af00      	add	r7, sp, #0
 8104d20:	60f8      	str	r0, [r7, #12]
 8104d22:	60b9      	str	r1, [r7, #8]
 8104d24:	607a      	str	r2, [r7, #4]
 8104d26:	603b      	str	r3, [r7, #0]
	__node_base_ptr __before_n = _M_find_before_node(__bkt, __key, __c);
 8104d28:	683b      	ldr	r3, [r7, #0]
 8104d2a:	687a      	ldr	r2, [r7, #4]
 8104d2c:	68b9      	ldr	r1, [r7, #8]
 8104d2e:	68f8      	ldr	r0, [r7, #12]
 8104d30:	f000 f857 	bl	8104de2 <_ZNKSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_find_before_nodeEjRS3_j>
 8104d34:	6178      	str	r0, [r7, #20]
	if (__before_n)
 8104d36:	697b      	ldr	r3, [r7, #20]
 8104d38:	2b00      	cmp	r3, #0
 8104d3a:	d002      	beq.n	8104d42 <_ZNKSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE12_M_find_nodeEjRS3_j+0x28>
	  return static_cast<__node_ptr>(__before_n->_M_nxt);
 8104d3c:	697b      	ldr	r3, [r7, #20]
 8104d3e:	681b      	ldr	r3, [r3, #0]
 8104d40:	e000      	b.n	8104d44 <_ZNKSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE12_M_find_nodeEjRS3_j+0x2a>
	return nullptr;
 8104d42:	2300      	movs	r3, #0
      }
 8104d44:	4618      	mov	r0, r3
 8104d46:	3718      	adds	r7, #24
 8104d48:	46bd      	mov	sp, r7
 8104d4a:	bd80      	pop	{r7, pc}

08104d4c <_ZNSt8__detail20_Node_const_iteratorISt4pairIKN7APIDoIP12EDoIPRequestES1_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0ELb0EEC1EPNS_10_Hash_nodeISB_Lb0EEE>:
      _Node_const_iterator(__node_type* __p) noexcept
 8104d4c:	b580      	push	{r7, lr}
 8104d4e:	b082      	sub	sp, #8
 8104d50:	af00      	add	r7, sp, #0
 8104d52:	6078      	str	r0, [r7, #4]
 8104d54:	6039      	str	r1, [r7, #0]
      : __base_type(__p) { }
 8104d56:	687b      	ldr	r3, [r7, #4]
 8104d58:	6839      	ldr	r1, [r7, #0]
 8104d5a:	4618      	mov	r0, r3
 8104d5c:	f7fd fcb1 	bl	81026c2 <_ZNSt8__detail19_Node_iterator_baseISt4pairIKN7APIDoIP12EDoIPRequestES1_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEC1EPNS_10_Hash_nodeISB_Lb0EEE>
 8104d60:	687b      	ldr	r3, [r7, #4]
 8104d62:	4618      	mov	r0, r3
 8104d64:	3708      	adds	r7, #8
 8104d66:	46bd      	mov	sp, r7
 8104d68:	bd80      	pop	{r7, pc}

08104d6a <_ZNKSt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE22valueless_by_exceptionEv>:
      constexpr bool valueless_by_exception() const noexcept
 8104d6a:	b580      	push	{r7, lr}
 8104d6c:	b082      	sub	sp, #8
 8104d6e:	af00      	add	r7, sp, #0
 8104d70:	6078      	str	r0, [r7, #4]
      { return !this->_M_valid(); }
 8104d72:	687b      	ldr	r3, [r7, #4]
 8104d74:	4618      	mov	r0, r3
 8104d76:	f000 f879 	bl	8104e6c <_ZNKSt8__detail9__variant16_Variant_storageILb1EJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE8_M_validEv>
 8104d7a:	4603      	mov	r3, r0
 8104d7c:	f083 0301 	eor.w	r3, r3, #1
 8104d80:	b2db      	uxtb	r3, r3
 8104d82:	4618      	mov	r0, r3
 8104d84:	3708      	adds	r7, #8
 8104d86:	46bd      	mov	sp, r7
 8104d88:	bd80      	pop	{r7, pc}

08104d8a <_ZSt7forwardIRSt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEEEOT_RNSt16remove_referenceIS5_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8104d8a:	b480      	push	{r7}
 8104d8c:	b083      	sub	sp, #12
 8104d8e:	af00      	add	r7, sp, #0
 8104d90:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8104d92:	687b      	ldr	r3, [r7, #4]
 8104d94:	4618      	mov	r0, r3
 8104d96:	370c      	adds	r7, #12
 8104d98:	46bd      	mov	sp, r7
 8104d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104d9e:	4770      	bx	lr

08104da0 <_ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEEEEOT_RNSt16remove_referenceIS7_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8104da0:	b480      	push	{r7}
 8104da2:	b083      	sub	sp, #12
 8104da4:	af00      	add	r7, sp, #0
 8104da6:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8104da8:	687b      	ldr	r3, [r7, #4]
 8104daa:	4618      	mov	r0, r3
 8104dac:	370c      	adds	r7, #12
 8104dae:	46bd      	mov	sp, r7
 8104db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104db4:	4770      	bx	lr

08104db6 <_ZNRSt8__detail9__variant14_UninitializedI34EDynamicDataIndentifierRequestCodeLb1EE6_M_getEv>:
      constexpr _Type& _M_get() & noexcept
 8104db6:	b480      	push	{r7}
 8104db8:	b083      	sub	sp, #12
 8104dba:	af00      	add	r7, sp, #0
 8104dbc:	6078      	str	r0, [r7, #4]
      { return _M_storage; }
 8104dbe:	687b      	ldr	r3, [r7, #4]
 8104dc0:	4618      	mov	r0, r3
 8104dc2:	370c      	adds	r7, #12
 8104dc4:	46bd      	mov	sp, r7
 8104dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104dca:	4770      	bx	lr

08104dcc <_ZNRSt8__detail9__variant14_UninitializedI7EUDSDIDLb1EE6_M_getEv>:
      constexpr _Type& _M_get() & noexcept
 8104dcc:	b480      	push	{r7}
 8104dce:	b083      	sub	sp, #12
 8104dd0:	af00      	add	r7, sp, #0
 8104dd2:	6078      	str	r0, [r7, #4]
      { return _M_storage; }
 8104dd4:	687b      	ldr	r3, [r7, #4]
 8104dd6:	4618      	mov	r0, r3
 8104dd8:	370c      	adds	r7, #12
 8104dda:	46bd      	mov	sp, r7
 8104ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104de0:	4770      	bx	lr

08104de2 <_ZNKSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_find_before_nodeEjRS3_j>:
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
 8104de2:	b580      	push	{r7, lr}
 8104de4:	b086      	sub	sp, #24
 8104de6:	af00      	add	r7, sp, #0
 8104de8:	60f8      	str	r0, [r7, #12]
 8104dea:	60b9      	str	r1, [r7, #8]
 8104dec:	607a      	str	r2, [r7, #4]
 8104dee:	603b      	str	r3, [r7, #0]
      __node_base_ptr __prev_p = _M_buckets[__bkt];
 8104df0:	68fb      	ldr	r3, [r7, #12]
 8104df2:	681a      	ldr	r2, [r3, #0]
 8104df4:	68bb      	ldr	r3, [r7, #8]
 8104df6:	009b      	lsls	r3, r3, #2
 8104df8:	4413      	add	r3, r2
 8104dfa:	681b      	ldr	r3, [r3, #0]
 8104dfc:	617b      	str	r3, [r7, #20]
      if (!__prev_p)
 8104dfe:	697b      	ldr	r3, [r7, #20]
 8104e00:	2b00      	cmp	r3, #0
 8104e02:	d101      	bne.n	8104e08 <_ZNKSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_find_before_nodeEjRS3_j+0x26>
	return nullptr;
 8104e04:	2300      	movs	r3, #0
 8104e06:	e02d      	b.n	8104e64 <_ZNKSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_find_before_nodeEjRS3_j+0x82>
      for (__node_ptr __p = static_cast<__node_ptr>(__prev_p->_M_nxt);;
 8104e08:	697b      	ldr	r3, [r7, #20]
 8104e0a:	681b      	ldr	r3, [r3, #0]
 8104e0c:	613b      	str	r3, [r7, #16]
	  if (this->_M_equals(__k, __code, *__p))
 8104e0e:	693b      	ldr	r3, [r7, #16]
 8104e10:	3304      	adds	r3, #4
 8104e12:	683a      	ldr	r2, [r7, #0]
 8104e14:	6879      	ldr	r1, [r7, #4]
 8104e16:	68f8      	ldr	r0, [r7, #12]
 8104e18:	f000 f833 	bl	8104e82 <_ZNKSt8__detail15_Hashtable_baseIN7APIDoIP12EDoIPRequestESt4pairIKS2_S3_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEENS_10_Select1stESt8equal_toIS2_ESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEE9_M_equalsERS4_jRKNS_16_Hash_node_valueISB_Lb0EEE>
 8104e1c:	4603      	mov	r3, r0
 8104e1e:	2b00      	cmp	r3, #0
 8104e20:	d001      	beq.n	8104e26 <_ZNKSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_find_before_nodeEjRS3_j+0x44>
	    return __prev_p;
 8104e22:	697b      	ldr	r3, [r7, #20]
 8104e24:	e01e      	b.n	8104e64 <_ZNKSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_find_before_nodeEjRS3_j+0x82>
	  if (!__p->_M_nxt || _M_bucket_index(*__p->_M_next()) != __bkt)
 8104e26:	693b      	ldr	r3, [r7, #16]
 8104e28:	681b      	ldr	r3, [r3, #0]
 8104e2a:	2b00      	cmp	r3, #0
 8104e2c:	d00c      	beq.n	8104e48 <_ZNKSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_find_before_nodeEjRS3_j+0x66>
 8104e2e:	6938      	ldr	r0, [r7, #16]
 8104e30:	f7fc fecd 	bl	8101bce <_ZNKSt8__detail10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES1_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EE7_M_nextEv>
 8104e34:	4603      	mov	r3, r0
 8104e36:	3304      	adds	r3, #4
 8104e38:	4619      	mov	r1, r3
 8104e3a:	68f8      	ldr	r0, [r7, #12]
 8104e3c:	f7fd fd89 	bl	8102952 <_ZNKSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE15_M_bucket_indexERKNSC_16_Hash_node_valueISA_Lb0EEE>
 8104e40:	4602      	mov	r2, r0
 8104e42:	68bb      	ldr	r3, [r7, #8]
 8104e44:	4293      	cmp	r3, r2
 8104e46:	d001      	beq.n	8104e4c <_ZNKSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_find_before_nodeEjRS3_j+0x6a>
 8104e48:	2301      	movs	r3, #1
 8104e4a:	e000      	b.n	8104e4e <_ZNKSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_find_before_nodeEjRS3_j+0x6c>
 8104e4c:	2300      	movs	r3, #0
 8104e4e:	2b00      	cmp	r3, #0
 8104e50:	d106      	bne.n	8104e60 <_ZNKSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_find_before_nodeEjRS3_j+0x7e>
	  __prev_p = __p;
 8104e52:	693b      	ldr	r3, [r7, #16]
 8104e54:	617b      	str	r3, [r7, #20]
	   __p = __p->_M_next())
 8104e56:	6938      	ldr	r0, [r7, #16]
 8104e58:	f7fc feb9 	bl	8101bce <_ZNKSt8__detail10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES1_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EE7_M_nextEv>
 8104e5c:	6138      	str	r0, [r7, #16]
	  if (this->_M_equals(__k, __code, *__p))
 8104e5e:	e7d6      	b.n	8104e0e <_ZNKSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_find_before_nodeEjRS3_j+0x2c>
	    break;
 8104e60:	bf00      	nop
      return nullptr;
 8104e62:	2300      	movs	r3, #0
    }
 8104e64:	4618      	mov	r0, r3
 8104e66:	3718      	adds	r7, #24
 8104e68:	46bd      	mov	sp, r7
 8104e6a:	bd80      	pop	{r7, pc}

08104e6c <_ZNKSt8__detail9__variant16_Variant_storageILb1EJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE8_M_validEv>:
      _M_valid() const noexcept
 8104e6c:	b480      	push	{r7}
 8104e6e:	b083      	sub	sp, #12
 8104e70:	af00      	add	r7, sp, #0
 8104e72:	6078      	str	r0, [r7, #4]
	  return true;
 8104e74:	2301      	movs	r3, #1
      }
 8104e76:	4618      	mov	r0, r3
 8104e78:	370c      	adds	r7, #12
 8104e7a:	46bd      	mov	sp, r7
 8104e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104e80:	4770      	bx	lr

08104e82 <_ZNKSt8__detail15_Hashtable_baseIN7APIDoIP12EDoIPRequestESt4pairIKS2_S3_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEENS_10_Select1stESt8equal_toIS2_ESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEE9_M_equalsERS4_jRKNS_16_Hash_node_valueISB_Lb0EEE>:
      _M_equals(const _Key& __k, __hash_code __c,
 8104e82:	b580      	push	{r7, lr}
 8104e84:	b084      	sub	sp, #16
 8104e86:	af00      	add	r7, sp, #0
 8104e88:	60f8      	str	r0, [r7, #12]
 8104e8a:	60b9      	str	r1, [r7, #8]
 8104e8c:	607a      	str	r2, [r7, #4]
 8104e8e:	603b      	str	r3, [r7, #0]
      { return _S_equals(__c, __n) && _M_key_equals(__k, __n); }
 8104e90:	6839      	ldr	r1, [r7, #0]
 8104e92:	6878      	ldr	r0, [r7, #4]
 8104e94:	f7fd fe57 	bl	8102b46 <_ZNSt8__detail15_Hashtable_baseIN7APIDoIP12EDoIPRequestESt4pairIKS2_S3_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEENS_10_Select1stESt8equal_toIS2_ESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEE9_S_equalsEjRKNS_21_Hash_node_code_cacheILb0EEE>
 8104e98:	4603      	mov	r3, r0
 8104e9a:	2b00      	cmp	r3, #0
 8104e9c:	d009      	beq.n	8104eb2 <_ZNKSt8__detail15_Hashtable_baseIN7APIDoIP12EDoIPRequestESt4pairIKS2_S3_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEENS_10_Select1stESt8equal_toIS2_ESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEE9_M_equalsERS4_jRKNS_16_Hash_node_valueISB_Lb0EEE+0x30>
 8104e9e:	683a      	ldr	r2, [r7, #0]
 8104ea0:	68b9      	ldr	r1, [r7, #8]
 8104ea2:	68f8      	ldr	r0, [r7, #12]
 8104ea4:	f7ff ff19 	bl	8104cda <_ZNKSt8__detail15_Hashtable_baseIN7APIDoIP12EDoIPRequestESt4pairIKS2_S3_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEENS_10_Select1stESt8equal_toIS2_ESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEE13_M_key_equalsERS4_RKNS_16_Hash_node_valueISB_Lb0EEE>
 8104ea8:	4603      	mov	r3, r0
 8104eaa:	2b00      	cmp	r3, #0
 8104eac:	d001      	beq.n	8104eb2 <_ZNKSt8__detail15_Hashtable_baseIN7APIDoIP12EDoIPRequestESt4pairIKS2_S3_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEENS_10_Select1stESt8equal_toIS2_ESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEE9_M_equalsERS4_jRKNS_16_Hash_node_valueISB_Lb0EEE+0x30>
 8104eae:	2301      	movs	r3, #1
 8104eb0:	e000      	b.n	8104eb4 <_ZNKSt8__detail15_Hashtable_baseIN7APIDoIP12EDoIPRequestESt4pairIKS2_S3_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEENS_10_Select1stESt8equal_toIS2_ESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEE9_M_equalsERS4_jRKNS_16_Hash_node_valueISB_Lb0EEE+0x32>
 8104eb2:	2300      	movs	r3, #0
 8104eb4:	4618      	mov	r0, r3
 8104eb6:	3710      	adds	r7, #16
 8104eb8:	46bd      	mov	sp, r7
 8104eba:	bd80      	pop	{r7, pc}

08104ebc <_Z41__static_initialization_and_destruction_0ii>:
 8104ebc:	b580      	push	{r7, lr}
 8104ebe:	b094      	sub	sp, #80	@ 0x50
 8104ec0:	af04      	add	r7, sp, #16
 8104ec2:	6078      	str	r0, [r7, #4]
 8104ec4:	6039      	str	r1, [r7, #0]
 8104ec6:	687b      	ldr	r3, [r7, #4]
 8104ec8:	2b01      	cmp	r3, #1
 8104eca:	d13a      	bne.n	8104f42 <_Z41__static_initialization_and_destruction_0ii+0x86>
 8104ecc:	683b      	ldr	r3, [r7, #0]
 8104ece:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8104ed2:	4293      	cmp	r3, r2
 8104ed4:	d135      	bne.n	8104f42 <_Z41__static_initialization_and_destruction_0ii+0x86>
 8104ed6:	f107 0314 	add.w	r3, r7, #20
 8104eda:	2220      	movs	r2, #32
 8104edc:	2100      	movs	r1, #0
 8104ede:	4618      	mov	r0, r3
 8104ee0:	f01e ffdc 	bl	8123e9c <memset>
 8104ee4:	4b1e      	ldr	r3, [pc, #120]	@ (8104f60 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 8104ee6:	61bb      	str	r3, [r7, #24]
 8104ee8:	2301      	movs	r3, #1
 8104eea:	773b      	strb	r3, [r7, #28]
 8104eec:	2312      	movs	r3, #18
 8104eee:	f887 3020 	strb.w	r3, [r7, #32]
 8104ef2:	2315      	movs	r3, #21
 8104ef4:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
 8104ef8:	f24d 1306 	movw	r3, #53510	@ 0xd106
 8104efc:	853b      	strh	r3, [r7, #40]	@ 0x28
 8104efe:	2360      	movs	r3, #96	@ 0x60
 8104f00:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
 8104f04:	f107 0314 	add.w	r3, r7, #20
 8104f08:	60fb      	str	r3, [r7, #12]
 8104f0a:	2302      	movs	r3, #2
 8104f0c:	613b      	str	r3, [r7, #16]
 8104f0e:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8104f12:	4618      	mov	r0, r3
 8104f14:	f7fc fc20 	bl	8101758 <_ZNSaISt4pairIKN7APIDoIP12EDoIPRequestES_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEEEC1Ev>
 8104f18:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8104f1c:	9302      	str	r3, [sp, #8]
 8104f1e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8104f22:	9301      	str	r3, [sp, #4]
 8104f24:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8104f28:	9300      	str	r3, [sp, #0]
 8104f2a:	2300      	movs	r3, #0
 8104f2c:	f107 020c 	add.w	r2, r7, #12
 8104f30:	ca06      	ldmia	r2, {r1, r2}
 8104f32:	480c      	ldr	r0, [pc, #48]	@ (8104f64 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 8104f34:	f7fc fc27 	bl	8101786 <_ZNSt13unordered_mapIN7APIDoIP12EDoIPRequestESt4pairISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressESt4hashIS1_ESt8equal_toIS1_ESaIS2_IKS1_S8_EEEC1ESt16initializer_listISE_EjRKSA_RKSC_RKSF_>
 8104f38:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8104f3c:	4618      	mov	r0, r3
 8104f3e:	f7fc fc17 	bl	8101770 <_ZNSaISt4pairIKN7APIDoIP12EDoIPRequestES_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEEED1Ev>
 8104f42:	687b      	ldr	r3, [r7, #4]
 8104f44:	2b00      	cmp	r3, #0
 8104f46:	d107      	bne.n	8104f58 <_Z41__static_initialization_and_destruction_0ii+0x9c>
 8104f48:	683b      	ldr	r3, [r7, #0]
 8104f4a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8104f4e:	4293      	cmp	r3, r2
 8104f50:	d102      	bne.n	8104f58 <_Z41__static_initialization_and_destruction_0ii+0x9c>
 8104f52:	4804      	ldr	r0, [pc, #16]	@ (8104f64 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 8104f54:	f7fd fefc 	bl	8102d50 <_ZNSt13unordered_mapIN7APIDoIP12EDoIPRequestESt4pairISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressESt4hashIS1_ESt8equal_toIS1_ESaIS2_IKS1_S8_EEED1Ev>
 8104f58:	bf00      	nop
 8104f5a:	3740      	adds	r7, #64	@ 0x40
 8104f5c:	46bd      	mov	sp, r7
 8104f5e:	bd80      	pop	{r7, pc}
 8104f60:	46090101 	.word	0x46090101
 8104f64:	10000248 	.word	0x10000248

08104f68 <_GLOBAL__sub_I_tcpRecvCb>:
 8104f68:	b580      	push	{r7, lr}
 8104f6a:	af00      	add	r7, sp, #0
 8104f6c:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8104f70:	2001      	movs	r0, #1
 8104f72:	f7ff ffa3 	bl	8104ebc <_Z41__static_initialization_and_destruction_0ii>
 8104f76:	bd80      	pop	{r7, pc}

08104f78 <_GLOBAL__sub_D_tcpRecvCb>:
 8104f78:	b580      	push	{r7, lr}
 8104f7a:	af00      	add	r7, sp, #0
 8104f7c:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8104f80:	2000      	movs	r0, #0
 8104f82:	f7ff ff9b 	bl	8104ebc <_Z41__static_initialization_and_destruction_0ii>
 8104f86:	bd80      	pop	{r7, pc}

08104f88 <_ZNSt9_Any_data9_M_accessEv>:
    void (_Undefined_class::*_M_member_pointer)();
  };

  union [[gnu::may_alias]] _Any_data
  {
    void*       _M_access()       noexcept { return &_M_pod_data[0]; }
 8104f88:	b480      	push	{r7}
 8104f8a:	b083      	sub	sp, #12
 8104f8c:	af00      	add	r7, sp, #0
 8104f8e:	6078      	str	r0, [r7, #4]
 8104f90:	687b      	ldr	r3, [r7, #4]
 8104f92:	4618      	mov	r0, r3
 8104f94:	370c      	adds	r7, #12
 8104f96:	46bd      	mov	sp, r7
 8104f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104f9c:	4770      	bx	lr

08104f9e <_ZNKSt9_Any_data9_M_accessEv>:
    const void* _M_access() const noexcept { return &_M_pod_data[0]; }
 8104f9e:	b480      	push	{r7}
 8104fa0:	b083      	sub	sp, #12
 8104fa2:	af00      	add	r7, sp, #0
 8104fa4:	6078      	str	r0, [r7, #4]
 8104fa6:	687b      	ldr	r3, [r7, #4]
 8104fa8:	4618      	mov	r0, r3
 8104faa:	370c      	adds	r7, #12
 8104fac:	46bd      	mov	sp, r7
 8104fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104fb2:	4770      	bx	lr

08104fb4 <_ZNSt14_Function_baseD1Ev>:
	  { return true; }
      };

    _Function_base() = default;

    ~_Function_base()
 8104fb4:	b580      	push	{r7, lr}
 8104fb6:	b082      	sub	sp, #8
 8104fb8:	af00      	add	r7, sp, #0
 8104fba:	6078      	str	r0, [r7, #4]
    {
      if (_M_manager)
 8104fbc:	687b      	ldr	r3, [r7, #4]
 8104fbe:	689b      	ldr	r3, [r3, #8]
 8104fc0:	2b00      	cmp	r3, #0
 8104fc2:	d005      	beq.n	8104fd0 <_ZNSt14_Function_baseD1Ev+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 8104fc4:	687b      	ldr	r3, [r7, #4]
 8104fc6:	689b      	ldr	r3, [r3, #8]
 8104fc8:	6878      	ldr	r0, [r7, #4]
 8104fca:	6879      	ldr	r1, [r7, #4]
 8104fcc:	2203      	movs	r2, #3
 8104fce:	4798      	blx	r3
    }
 8104fd0:	687b      	ldr	r3, [r7, #4]
 8104fd2:	4618      	mov	r0, r3
 8104fd4:	3708      	adds	r7, #8
 8104fd6:	46bd      	mov	sp, r7
 8104fd8:	bd80      	pop	{r7, pc}

08104fda <_Z24StartTask_DoIPDaemonTaskPv>:

extern QueueHandle_t queueToDoIPDaemonTask;
QueueHandle_t connectionEventsQueue = xQueueCreate(16, sizeof(SMessage));

void StartTask_DoIPDaemonTask(void *argument)
{
 8104fda:	b580      	push	{r7, lr}
 8104fdc:	b08c      	sub	sp, #48	@ 0x30
 8104fde:	af00      	add	r7, sp, #0
 8104fe0:	6078      	str	r0, [r7, #4]
    DoIPDaemonTask doipDaemonTask = DoIPDaemonTask();
 8104fe2:	f107 0308 	add.w	r3, r7, #8
 8104fe6:	4618      	mov	r0, r3
 8104fe8:	f000 f80a 	bl	8105000 <_ZN14DoIPDaemonTaskC1Ev>
    /* Infinite loop */
    for (;;) {
        doipDaemonTask.process();
 8104fec:	f107 0308 	add.w	r3, r7, #8
 8104ff0:	4618      	mov	r0, r3
 8104ff2:	f000 f8b3 	bl	810515c <_ZN14DoIPDaemonTask7processEv>
        osDelay(1);
 8104ff6:	2001      	movs	r0, #1
 8104ff8:	f00d fd69 	bl	8112ace <osDelay>
        doipDaemonTask.process();
 8104ffc:	bf00      	nop
 8104ffe:	e7f5      	b.n	8104fec <_Z24StartTask_DoIPDaemonTaskPv+0x12>

08105000 <_ZN14DoIPDaemonTaskC1Ev>:
    }
}


DoIPDaemonTask::DoIPDaemonTask() : event_bus(EventBus(queueToDoIPDaemonTask, EVENT_CLIENT_ETHERNET_CONNECTION_MANAGER)), conn_mgr(CM::instance())
 8105000:	b580      	push	{r7, lr}
 8105002:	b082      	sub	sp, #8
 8105004:	af00      	add	r7, sp, #0
 8105006:	6078      	str	r0, [r7, #4]
 8105008:	687b      	ldr	r3, [r7, #4]
 810500a:	4a10      	ldr	r2, [pc, #64]	@ (810504c <_ZN14DoIPDaemonTaskC1Ev+0x4c>)
 810500c:	6811      	ldr	r1, [r2, #0]
 810500e:	2203      	movs	r2, #3
 8105010:	4618      	mov	r0, r3
 8105012:	f000 fe1b 	bl	8105c4c <_ZN8EventBusC1EP15QueueDefinition12EEventClient>
 8105016:	687b      	ldr	r3, [r7, #4]
 8105018:	2200      	movs	r2, #0
 810501a:	731a      	strb	r2, [r3, #12]
 810501c:	687b      	ldr	r3, [r7, #4]
 810501e:	3310      	adds	r3, #16
 8105020:	2200      	movs	r2, #0
 8105022:	601a      	str	r2, [r3, #0]
 8105024:	605a      	str	r2, [r3, #4]
 8105026:	609a      	str	r2, [r3, #8]
 8105028:	60da      	str	r2, [r3, #12]
 810502a:	687b      	ldr	r3, [r7, #4]
 810502c:	22ff      	movs	r2, #255	@ 0xff
 810502e:	f883 2020 	strb.w	r2, [r3, #32]
 8105032:	f7fe fc7f 	bl	8103934 <_ZN17ConnectionManager8instanceEv>
 8105036:	4602      	mov	r2, r0
 8105038:	687b      	ldr	r3, [r7, #4]
 810503a:	625a      	str	r2, [r3, #36]	@ 0x24
{
    MX_LWIP_Init();
 810503c:	f003 fce4 	bl	8108a08 <MX_LWIP_Init>
}
 8105040:	687b      	ldr	r3, [r7, #4]
 8105042:	4618      	mov	r0, r3
 8105044:	3708      	adds	r7, #8
 8105046:	46bd      	mov	sp, r7
 8105048:	bd80      	pop	{r7, pc}
 810504a:	bf00      	nop
 810504c:	100001d4 	.word	0x100001d4

08105050 <_ZN14DoIPDaemonTask7OnEventE10EEventType12UMessageData12EEventClientS2_>:

void DoIPDaemonTask::OnEvent(EEventType event, UMessageData msg, EEventClient eventSender, [[maybe_unused]] EEventClient eventReceiver)
{
 8105050:	b082      	sub	sp, #8
 8105052:	b580      	push	{r7, lr}
 8105054:	b084      	sub	sp, #16
 8105056:	af00      	add	r7, sp, #0
 8105058:	6078      	str	r0, [r7, #4]
 810505a:	f107 0018 	add.w	r0, r7, #24
 810505e:	e880 000c 	stmia.w	r0, {r2, r3}
 8105062:	460b      	mov	r3, r1
 8105064:	70fb      	strb	r3, [r7, #3]
	switch(event)
 8105066:	78fb      	ldrb	r3, [r7, #3]
 8105068:	2b83      	cmp	r3, #131	@ 0x83
 810506a:	d006      	beq.n	810507a <_ZN14DoIPDaemonTask7OnEventE10EEventType12UMessageData12EEventClientS2_+0x2a>
 810506c:	2b83      	cmp	r3, #131	@ 0x83
 810506e:	dc21      	bgt.n	81050b4 <_ZN14DoIPDaemonTask7OnEventE10EEventType12UMessageData12EEventClientS2_+0x64>
 8105070:	2b81      	cmp	r3, #129	@ 0x81
 8105072:	d013      	beq.n	810509c <_ZN14DoIPDaemonTask7OnEventE10EEventType12UMessageData12EEventClientS2_+0x4c>
 8105074:	2b82      	cmp	r3, #130	@ 0x82
 8105076:	d017      	beq.n	81050a8 <_ZN14DoIPDaemonTask7OnEventE10EEventType12UMessageData12EEventClientS2_+0x58>
        {
            onEventDataUnsubscribe(msg);
            break;
        }
		default:
			break;
 8105078:	e01c      	b.n	81050b4 <_ZN14DoIPDaemonTask7OnEventE10EEventType12UMessageData12EEventClientS2_+0x64>
            CM::EConnectionEvent connEvent = msg.ethernet_plugged ? CM::EConnectionEvent::EVENT_ETHERNET_CONNECTED : CM::EConnectionEvent::EVENT_ETHERNET_DISCONNECTED;
 810507a:	7e3b      	ldrb	r3, [r7, #24]
 810507c:	2b00      	cmp	r3, #0
 810507e:	d001      	beq.n	8105084 <_ZN14DoIPDaemonTask7OnEventE10EEventType12UMessageData12EEventClientS2_+0x34>
 8105080:	2300      	movs	r3, #0
 8105082:	e000      	b.n	8105086 <_ZN14DoIPDaemonTask7OnEventE10EEventType12UMessageData12EEventClientS2_+0x36>
 8105084:	2301      	movs	r3, #1
 8105086:	73fb      	strb	r3, [r7, #15]
            xQueueSend(connectionEventsQueue, &(connEvent), static_cast<TickType_t>(10000));
 8105088:	4b0e      	ldr	r3, [pc, #56]	@ (81050c4 <_ZN14DoIPDaemonTask7OnEventE10EEventType12UMessageData12EEventClientS2_+0x74>)
 810508a:	6818      	ldr	r0, [r3, #0]
 810508c:	f107 010f 	add.w	r1, r7, #15
 8105090:	2300      	movs	r3, #0
 8105092:	f242 7210 	movw	r2, #10000	@ 0x2710
 8105096:	f00f f82d 	bl	81140f4 <xQueueGenericSend>
            break;
 810509a:	e00c      	b.n	81050b6 <_ZN14DoIPDaemonTask7OnEventE10EEventType12UMessageData12EEventClientS2_+0x66>
            onEventDataSubscribe(msg);
 810509c:	f107 0118 	add.w	r1, r7, #24
 81050a0:	6878      	ldr	r0, [r7, #4]
 81050a2:	f000 f9e5 	bl	8105470 <_ZN14DoIPDaemonTask20onEventDataSubscribeERK12UMessageData>
            break;
 81050a6:	e006      	b.n	81050b6 <_ZN14DoIPDaemonTask7OnEventE10EEventType12UMessageData12EEventClientS2_+0x66>
            onEventDataUnsubscribe(msg);
 81050a8:	f107 0118 	add.w	r1, r7, #24
 81050ac:	6878      	ldr	r0, [r7, #4]
 81050ae:	f000 fa73 	bl	8105598 <_ZN14DoIPDaemonTask22onEventDataUnsubscribeERK12UMessageData>
            break;
 81050b2:	e000      	b.n	81050b6 <_ZN14DoIPDaemonTask7OnEventE10EEventType12UMessageData12EEventClientS2_+0x66>
			break;
 81050b4:	bf00      	nop
	}
}
 81050b6:	bf00      	nop
 81050b8:	3710      	adds	r7, #16
 81050ba:	46bd      	mov	sp, r7
 81050bc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 81050c0:	b002      	add	sp, #8
 81050c2:	4770      	bx	lr
 81050c4:	10000294 	.word	0x10000294

081050c8 <_ZN14DoIPDaemonTask17processConnectionEv>:

void DoIPDaemonTask::processConnection()
{
 81050c8:	b580      	push	{r7, lr}
 81050ca:	b082      	sub	sp, #8
 81050cc:	af00      	add	r7, sp, #0
 81050ce:	6078      	str	r0, [r7, #4]
    switch(current_connection_state)
 81050d0:	687b      	ldr	r3, [r7, #4]
 81050d2:	7b1b      	ldrb	r3, [r3, #12]
 81050d4:	2b01      	cmp	r3, #1
 81050d6:	d105      	bne.n	81050e4 <_ZN14DoIPDaemonTask17processConnectionEv+0x1c>
    {
        case STATE_SERVICE_DISCOVERY:
        {
            conn_mgr.processUdpDicovery();
 81050d8:	687b      	ldr	r3, [r7, #4]
 81050da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 81050dc:	4618      	mov	r0, r3
 81050de:	f7ff fc4d 	bl	810497c <_ZN17ConnectionManager18processUdpDicoveryEv>
            break;
 81050e2:	e000      	b.n	81050e6 <_ZN14DoIPDaemonTask17processConnectionEv+0x1e>
        }
        default:
        {
            // do not do anything, wait for events
            break;
 81050e4:	bf00      	nop
        }

    }
}
 81050e6:	bf00      	nop
 81050e8:	3708      	adds	r7, #8
 81050ea:	46bd      	mov	sp, r7
 81050ec:	bd80      	pop	{r7, pc}

081050ee <_ZZN14DoIPDaemonTask7processEvENKUl10EEventType12UMessageData12EEventClientS2_E_clES0_S1_S2_S2_>:

void DoIPDaemonTask::process()
{
	event_bus.receive([this](EEventType event, UMessageData msg, EEventClient eventSender, EEventClient eventReceiver){this->OnEvent(event, msg, eventSender, eventReceiver);});
 81050ee:	b082      	sub	sp, #8
 81050f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 81050f2:	b089      	sub	sp, #36	@ 0x24
 81050f4:	af06      	add	r7, sp, #24
 81050f6:	6078      	str	r0, [r7, #4]
 81050f8:	f107 0020 	add.w	r0, r7, #32
 81050fc:	e880 000c 	stmia.w	r0, {r2, r3}
 8105100:	460b      	mov	r3, r1
 8105102:	70fb      	strb	r3, [r7, #3]
 8105104:	687b      	ldr	r3, [r7, #4]
 8105106:	681d      	ldr	r5, [r3, #0]
 8105108:	78fe      	ldrb	r6, [r7, #3]
 810510a:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 810510e:	9304      	str	r3, [sp, #16]
 8105110:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8105114:	9303      	str	r3, [sp, #12]
 8105116:	466c      	mov	r4, sp
 8105118:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 810511c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8105120:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8105124:	f107 0320 	add.w	r3, r7, #32
 8105128:	cb0c      	ldmia	r3, {r2, r3}
 810512a:	4631      	mov	r1, r6
 810512c:	4628      	mov	r0, r5
 810512e:	f7ff ff8f 	bl	8105050 <_ZN14DoIPDaemonTask7OnEventE10EEventType12UMessageData12EEventClientS2_>
 8105132:	bf00      	nop
 8105134:	370c      	adds	r7, #12
 8105136:	46bd      	mov	sp, r7
 8105138:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 810513c:	b002      	add	sp, #8
 810513e:	4770      	bx	lr

08105140 <_ZNSt8functionIFv10EEventType12UMessageData12EEventClientS2_EED1Ev>:
   *  @brief Polymorphic function wrapper.
   *  @ingroup functors
   *  @since C++11
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8105140:	b580      	push	{r7, lr}
 8105142:	b082      	sub	sp, #8
 8105144:	af00      	add	r7, sp, #0
 8105146:	6078      	str	r0, [r7, #4]
 8105148:	687b      	ldr	r3, [r7, #4]
 810514a:	4618      	mov	r0, r3
 810514c:	f7ff ff32 	bl	8104fb4 <_ZNSt14_Function_baseD1Ev>
 8105150:	687b      	ldr	r3, [r7, #4]
 8105152:	4618      	mov	r0, r3
 8105154:	3708      	adds	r7, #8
 8105156:	46bd      	mov	sp, r7
 8105158:	bd80      	pop	{r7, pc}
	...

0810515c <_ZN14DoIPDaemonTask7processEv>:
{
 810515c:	b590      	push	{r4, r7, lr}
 810515e:	b08b      	sub	sp, #44	@ 0x2c
 8105160:	af00      	add	r7, sp, #0
 8105162:	6078      	str	r0, [r7, #4]
	event_bus.receive([this](EEventType event, UMessageData msg, EEventClient eventSender, EEventClient eventReceiver){this->OnEvent(event, msg, eventSender, eventReceiver);});
 8105164:	687c      	ldr	r4, [r7, #4]
 8105166:	687b      	ldr	r3, [r7, #4]
 8105168:	61fb      	str	r3, [r7, #28]
 810516a:	f107 021c 	add.w	r2, r7, #28
 810516e:	f107 030c 	add.w	r3, r7, #12
 8105172:	4611      	mov	r1, r2
 8105174:	4618      	mov	r0, r3
 8105176:	f000 fadf 	bl	8105738 <_ZNSt8functionIFv10EEventType12UMessageData12EEventClientS2_EEC1IZN14DoIPDaemonTask7processEvEUlS0_S1_S2_S2_E_vEEOT_>
 810517a:	f107 030c 	add.w	r3, r7, #12
 810517e:	4619      	mov	r1, r3
 8105180:	4620      	mov	r0, r4
 8105182:	f000 fdb6 	bl	8105cf2 <_ZN8EventBus7receiveESt8functionIFv10EEventType12UMessageData12EEventClientS3_EE>
 8105186:	f107 030c 	add.w	r3, r7, #12
 810518a:	4618      	mov	r0, r3
 810518c:	f7ff ffd8 	bl	8105140 <_ZNSt8functionIFv10EEventType12UMessageData12EEventClientS2_EED1Ev>
    processConnection();
 8105190:	6878      	ldr	r0, [r7, #4]
 8105192:	f7ff ff99 	bl	81050c8 <_ZN14DoIPDaemonTask17processConnectionEv>
    
    EConnectionState newState;
    CM::EConnectionEvent connEvent;
    BaseType_t received = pdTRUE;
 8105196:	2301      	movs	r3, #1
 8105198:	627b      	str	r3, [r7, #36]	@ 0x24

	do
	{
		received = xQueueReceive(connectionEventsQueue, &(connEvent), static_cast<TickType_t>(0));
 810519a:	4b14      	ldr	r3, [pc, #80]	@ (81051ec <_ZN14DoIPDaemonTask7processEv+0x90>)
 810519c:	681b      	ldr	r3, [r3, #0]
 810519e:	f107 010b 	add.w	r1, r7, #11
 81051a2:	2200      	movs	r2, #0
 81051a4:	4618      	mov	r0, r3
 81051a6:	f00f f9d5 	bl	8114554 <xQueueReceive>
 81051aa:	6278      	str	r0, [r7, #36]	@ 0x24
		if(received == pdTRUE)
 81051ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81051ae:	2b01      	cmp	r3, #1
 81051b0:	d114      	bne.n	81051dc <_ZN14DoIPDaemonTask7processEv+0x80>
		{
			newState = onConnectionEvent(connEvent);
 81051b2:	7afb      	ldrb	r3, [r7, #11]
 81051b4:	4619      	mov	r1, r3
 81051b6:	6878      	ldr	r0, [r7, #4]
 81051b8:	f000 f81a 	bl	81051f0 <_ZN14DoIPDaemonTask17onConnectionEventEN17ConnectionManager16EConnectionEventE>
 81051bc:	4603      	mov	r3, r0
 81051be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
            if(newState != current_connection_state)
 81051c2:	687b      	ldr	r3, [r7, #4]
 81051c4:	7b1b      	ldrb	r3, [r3, #12]
 81051c6:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 81051ca:	429a      	cmp	r2, r3
 81051cc:	d006      	beq.n	81051dc <_ZN14DoIPDaemonTask7processEv+0x80>
            {
                // transtition happened
                current_connection_state = newState;
 81051ce:	687b      	ldr	r3, [r7, #4]
 81051d0:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 81051d4:	731a      	strb	r2, [r3, #12]
                // Process again so that after every onEvent the processing state code is called at least once.
                // The chance of this happening is minimal, but not zero. 
                processConnection();
 81051d6:	6878      	ldr	r0, [r7, #4]
 81051d8:	f7ff ff76 	bl	81050c8 <_ZN14DoIPDaemonTask17processConnectionEv>
            }
		}
	} while(received == pdTRUE);
 81051dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81051de:	2b01      	cmp	r3, #1
 81051e0:	d0db      	beq.n	810519a <_ZN14DoIPDaemonTask7processEv+0x3e>
}
 81051e2:	bf00      	nop
 81051e4:	bf00      	nop
 81051e6:	372c      	adds	r7, #44	@ 0x2c
 81051e8:	46bd      	mov	sp, r7
 81051ea:	bd90      	pop	{r4, r7, pc}
 81051ec:	10000294 	.word	0x10000294

081051f0 <_ZN14DoIPDaemonTask17onConnectionEventEN17ConnectionManager16EConnectionEventE>:

DoIPDaemonTask::EConnectionState DoIPDaemonTask::onConnectionEvent(CM::EConnectionEvent event)
{
 81051f0:	b580      	push	{r7, lr}
 81051f2:	b082      	sub	sp, #8
 81051f4:	af00      	add	r7, sp, #0
 81051f6:	6078      	str	r0, [r7, #4]
 81051f8:	460b      	mov	r3, r1
 81051fa:	70fb      	strb	r3, [r7, #3]
    switch(current_connection_state)
 81051fc:	687b      	ldr	r3, [r7, #4]
 81051fe:	7b1b      	ldrb	r3, [r3, #12]
 8105200:	2b04      	cmp	r3, #4
 8105202:	d830      	bhi.n	8105266 <_ZN14DoIPDaemonTask17onConnectionEventEN17ConnectionManager16EConnectionEventE+0x76>
 8105204:	a201      	add	r2, pc, #4	@ (adr r2, 810520c <_ZN14DoIPDaemonTask17onConnectionEventEN17ConnectionManager16EConnectionEventE+0x1c>)
 8105206:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810520a:	bf00      	nop
 810520c:	08105221 	.word	0x08105221
 8105210:	0810522f 	.word	0x0810522f
 8105214:	0810523d 	.word	0x0810523d
 8105218:	0810524b 	.word	0x0810524b
 810521c:	08105259 	.word	0x08105259
    {
        case STATE_ETHERNET_DISCONNECTED:
        {
            return onEventEthDisconnected(event);
 8105220:	78fb      	ldrb	r3, [r7, #3]
 8105222:	4619      	mov	r1, r3
 8105224:	6878      	ldr	r0, [r7, #4]
 8105226:	f000 f825 	bl	8105274 <_ZN14DoIPDaemonTask22onEventEthDisconnectedEN17ConnectionManager16EConnectionEventE>
 810522a:	4603      	mov	r3, r0
 810522c:	e01d      	b.n	810526a <_ZN14DoIPDaemonTask17onConnectionEventEN17ConnectionManager16EConnectionEventE+0x7a>
        }
        case STATE_SERVICE_DISCOVERY:
        {
            return onEventDiscovery(event);
 810522e:	78fb      	ldrb	r3, [r7, #3]
 8105230:	4619      	mov	r1, r3
 8105232:	6878      	ldr	r0, [r7, #4]
 8105234:	f000 f834 	bl	81052a0 <_ZN14DoIPDaemonTask16onEventDiscoveryEN17ConnectionManager16EConnectionEventE>
 8105238:	4603      	mov	r3, r0
 810523a:	e016      	b.n	810526a <_ZN14DoIPDaemonTask17onConnectionEventEN17ConnectionManager16EConnectionEventE+0x7a>
        }
        case STATE_CONNECTING_TCP:
        {
            return onEventConnectingTCP(event);
 810523c:	78fb      	ldrb	r3, [r7, #3]
 810523e:	4619      	mov	r1, r3
 8105240:	6878      	ldr	r0, [r7, #4]
 8105242:	f000 f853 	bl	81052ec <_ZN14DoIPDaemonTask20onEventConnectingTCPEN17ConnectionManager16EConnectionEventE>
 8105246:	4603      	mov	r3, r0
 8105248:	e00f      	b.n	810526a <_ZN14DoIPDaemonTask17onConnectionEventEN17ConnectionManager16EConnectionEventE+0x7a>
        }
        case STATE_CONNECTED_ECU:
        {
            return onEventConnectedECUDefault(event);
 810524a:	78fb      	ldrb	r3, [r7, #3]
 810524c:	4619      	mov	r1, r3
 810524e:	6878      	ldr	r0, [r7, #4]
 8105250:	f000 f88e 	bl	8105370 <_ZN14DoIPDaemonTask26onEventConnectedECUDefaultEN17ConnectionManager16EConnectionEventE>
 8105254:	4603      	mov	r3, r0
 8105256:	e008      	b.n	810526a <_ZN14DoIPDaemonTask17onConnectionEventEN17ConnectionManager16EConnectionEventE+0x7a>
        }
        case STATE_WAITING_FOR_DATA_FROM_ECU:
        {
            return onEventWaitingForDataFromECU(event);
 8105258:	78fb      	ldrb	r3, [r7, #3]
 810525a:	4619      	mov	r1, r3
 810525c:	6878      	ldr	r0, [r7, #4]
 810525e:	f000 f8c1 	bl	81053e4 <_ZN14DoIPDaemonTask28onEventWaitingForDataFromECUEN17ConnectionManager16EConnectionEventE>
 8105262:	4603      	mov	r3, r0
 8105264:	e001      	b.n	810526a <_ZN14DoIPDaemonTask17onConnectionEventEN17ConnectionManager16EConnectionEventE+0x7a>
        }
        default:
        {
            return current_connection_state;
 8105266:	687b      	ldr	r3, [r7, #4]
 8105268:	7b1b      	ldrb	r3, [r3, #12]
        }
    }
}
 810526a:	4618      	mov	r0, r3
 810526c:	3708      	adds	r7, #8
 810526e:	46bd      	mov	sp, r7
 8105270:	bd80      	pop	{r7, pc}
 8105272:	bf00      	nop

08105274 <_ZN14DoIPDaemonTask22onEventEthDisconnectedEN17ConnectionManager16EConnectionEventE>:

DoIPDaemonTask::EConnectionState DoIPDaemonTask::onEventEthDisconnected(CM::EConnectionEvent event)
{
 8105274:	b580      	push	{r7, lr}
 8105276:	b082      	sub	sp, #8
 8105278:	af00      	add	r7, sp, #0
 810527a:	6078      	str	r0, [r7, #4]
 810527c:	460b      	mov	r3, r1
 810527e:	70fb      	strb	r3, [r7, #3]
    switch(event)
 8105280:	78fb      	ldrb	r3, [r7, #3]
 8105282:	2b00      	cmp	r3, #0
 8105284:	d106      	bne.n	8105294 <_ZN14DoIPDaemonTask22onEventEthDisconnectedEN17ConnectionManager16EConnectionEventE+0x20>
    {
        case CM::EConnectionEvent::EVENT_ETHERNET_CONNECTED:
        {
            conn_mgr.udpConnect();
 8105286:	687b      	ldr	r3, [r7, #4]
 8105288:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810528a:	4618      	mov	r0, r3
 810528c:	f7fe fec4 	bl	8104018 <_ZN17ConnectionManager10udpConnectEv>
            return STATE_SERVICE_DISCOVERY;
 8105290:	2301      	movs	r3, #1
 8105292:	e001      	b.n	8105298 <_ZN14DoIPDaemonTask22onEventEthDisconnectedEN17ConnectionManager16EConnectionEventE+0x24>
        }
        default:
        {
            //no transition
            return current_connection_state;
 8105294:	687b      	ldr	r3, [r7, #4]
 8105296:	7b1b      	ldrb	r3, [r3, #12]
        }
    }
}
 8105298:	4618      	mov	r0, r3
 810529a:	3708      	adds	r7, #8
 810529c:	46bd      	mov	sp, r7
 810529e:	bd80      	pop	{r7, pc}

081052a0 <_ZN14DoIPDaemonTask16onEventDiscoveryEN17ConnectionManager16EConnectionEventE>:

DoIPDaemonTask::EConnectionState DoIPDaemonTask::onEventDiscovery(CM::EConnectionEvent event)
{
 81052a0:	b580      	push	{r7, lr}
 81052a2:	b082      	sub	sp, #8
 81052a4:	af00      	add	r7, sp, #0
 81052a6:	6078      	str	r0, [r7, #4]
 81052a8:	460b      	mov	r3, r1
 81052aa:	70fb      	strb	r3, [r7, #3]
    switch(event)
 81052ac:	78fb      	ldrb	r3, [r7, #3]
 81052ae:	2b01      	cmp	r3, #1
 81052b0:	d002      	beq.n	81052b8 <_ZN14DoIPDaemonTask16onEventDiscoveryEN17ConnectionManager16EConnectionEventE+0x18>
 81052b2:	2b02      	cmp	r3, #2
 81052b4:	d007      	beq.n	81052c6 <_ZN14DoIPDaemonTask16onEventDiscoveryEN17ConnectionManager16EConnectionEventE+0x26>
 81052b6:	e012      	b.n	81052de <_ZN14DoIPDaemonTask16onEventDiscoveryEN17ConnectionManager16EConnectionEventE+0x3e>
    {
        case CM::EConnectionEvent::EVENT_ETHERNET_DISCONNECTED:
        {
            conn_mgr.udpDisconnect();
 81052b8:	687b      	ldr	r3, [r7, #4]
 81052ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 81052bc:	4618      	mov	r0, r3
 81052be:	f7fe fed9 	bl	8104074 <_ZN17ConnectionManager13udpDisconnectEv>
            return STATE_ETHERNET_DISCONNECTED;
 81052c2:	2300      	movs	r3, #0
 81052c4:	e00d      	b.n	81052e2 <_ZN14DoIPDaemonTask16onEventDiscoveryEN17ConnectionManager16EConnectionEventE+0x42>
        }
        case CM::EConnectionEvent::EVENT_DISCOVERY_COMPLETED:
        {
            conn_mgr.udpDisconnect();
 81052c6:	687b      	ldr	r3, [r7, #4]
 81052c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 81052ca:	4618      	mov	r0, r3
 81052cc:	f7fe fed2 	bl	8104074 <_ZN17ConnectionManager13udpDisconnectEv>
            conn_mgr.tcpConnect();
 81052d0:	687b      	ldr	r3, [r7, #4]
 81052d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 81052d4:	4618      	mov	r0, r3
 81052d6:	f7fe fefb 	bl	81040d0 <_ZN17ConnectionManager10tcpConnectEv>
            return STATE_CONNECTING_TCP;
 81052da:	2302      	movs	r3, #2
 81052dc:	e001      	b.n	81052e2 <_ZN14DoIPDaemonTask16onEventDiscoveryEN17ConnectionManager16EConnectionEventE+0x42>
        }
        default:
        {
            //no transition
            return current_connection_state;
 81052de:	687b      	ldr	r3, [r7, #4]
 81052e0:	7b1b      	ldrb	r3, [r3, #12]
        }
    }
}
 81052e2:	4618      	mov	r0, r3
 81052e4:	3708      	adds	r7, #8
 81052e6:	46bd      	mov	sp, r7
 81052e8:	bd80      	pop	{r7, pc}
	...

081052ec <_ZN14DoIPDaemonTask20onEventConnectingTCPEN17ConnectionManager16EConnectionEventE>:

DoIPDaemonTask::EConnectionState DoIPDaemonTask::onEventConnectingTCP(CM::EConnectionEvent event)
{
 81052ec:	b580      	push	{r7, lr}
 81052ee:	b084      	sub	sp, #16
 81052f0:	af00      	add	r7, sp, #0
 81052f2:	6078      	str	r0, [r7, #4]
 81052f4:	460b      	mov	r3, r1
 81052f6:	70fb      	strb	r3, [r7, #3]
    switch(event)
 81052f8:	78fb      	ldrb	r3, [r7, #3]
 81052fa:	2b04      	cmp	r3, #4
 81052fc:	d00d      	beq.n	810531a <_ZN14DoIPDaemonTask20onEventConnectingTCPEN17ConnectionManager16EConnectionEventE+0x2e>
 81052fe:	2b04      	cmp	r3, #4
 8105300:	dc2e      	bgt.n	8105360 <_ZN14DoIPDaemonTask20onEventConnectingTCPEN17ConnectionManager16EConnectionEventE+0x74>
 8105302:	2b01      	cmp	r3, #1
 8105304:	d002      	beq.n	810530c <_ZN14DoIPDaemonTask20onEventConnectingTCPEN17ConnectionManager16EConnectionEventE+0x20>
 8105306:	2b03      	cmp	r3, #3
 8105308:	d013      	beq.n	8105332 <_ZN14DoIPDaemonTask20onEventConnectingTCPEN17ConnectionManager16EConnectionEventE+0x46>
 810530a:	e029      	b.n	8105360 <_ZN14DoIPDaemonTask20onEventConnectingTCPEN17ConnectionManager16EConnectionEventE+0x74>
    {
        case CM::EConnectionEvent::EVENT_ETHERNET_DISCONNECTED:
        {
            conn_mgr.tcpDisconnect();
 810530c:	687b      	ldr	r3, [r7, #4]
 810530e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8105310:	4618      	mov	r0, r3
 8105312:	f7fe ff67 	bl	81041e4 <_ZN17ConnectionManager13tcpDisconnectEv>
            return STATE_ETHERNET_DISCONNECTED;
 8105316:	2300      	movs	r3, #0
 8105318:	e024      	b.n	8105364 <_ZN14DoIPDaemonTask20onEventConnectingTCPEN17ConnectionManager16EConnectionEventE+0x78>
        }
        case CM::EConnectionEvent::EVENT_TCP_CONNECTION_FAILED:
        {
            conn_mgr.tcpDisconnect();
 810531a:	687b      	ldr	r3, [r7, #4]
 810531c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810531e:	4618      	mov	r0, r3
 8105320:	f7fe ff60 	bl	81041e4 <_ZN17ConnectionManager13tcpDisconnectEv>
            conn_mgr.udpConnect();
 8105324:	687b      	ldr	r3, [r7, #4]
 8105326:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8105328:	4618      	mov	r0, r3
 810532a:	f7fe fe75 	bl	8104018 <_ZN17ConnectionManager10udpConnectEv>
            return STATE_SERVICE_DISCOVERY;
 810532e:	2301      	movs	r3, #1
 8105330:	e018      	b.n	8105364 <_ZN14DoIPDaemonTask20onEventConnectingTCPEN17ConnectionManager16EConnectionEventE+0x78>
        }
        case CM::EConnectionEvent::EVENT_TCP_CONNECTED:
        {
        	if((subscribed_data[0] != 0ULL) || (subscribed_data[1] != 0ULL))
 8105332:	687b      	ldr	r3, [r7, #4]
 8105334:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8105338:	4313      	orrs	r3, r2
 810533a:	d104      	bne.n	8105346 <_ZN14DoIPDaemonTask20onEventConnectingTCPEN17ConnectionManager16EConnectionEventE+0x5a>
 810533c:	687b      	ldr	r3, [r7, #4]
 810533e:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8105342:	4313      	orrs	r3, r2
 8105344:	d00a      	beq.n	810535c <_ZN14DoIPDaemonTask20onEventConnectingTCPEN17ConnectionManager16EConnectionEventE+0x70>
        	{
        		CM::EConnectionEvent connEvent = CM::EConnectionEvent::EVENT_DATA_REQUESTED;
 8105346:	2306      	movs	r3, #6
 8105348:	73fb      	strb	r3, [r7, #15]
        		xQueueSend(connectionEventsQueue, &(connEvent), static_cast<TickType_t>(10000));
 810534a:	4b08      	ldr	r3, [pc, #32]	@ (810536c <_ZN14DoIPDaemonTask20onEventConnectingTCPEN17ConnectionManager16EConnectionEventE+0x80>)
 810534c:	6818      	ldr	r0, [r3, #0]
 810534e:	f107 010f 	add.w	r1, r7, #15
 8105352:	2300      	movs	r3, #0
 8105354:	f242 7210 	movw	r2, #10000	@ 0x2710
 8105358:	f00e fecc 	bl	81140f4 <xQueueGenericSend>
        	}
            return STATE_CONNECTED_ECU;
 810535c:	2303      	movs	r3, #3
 810535e:	e001      	b.n	8105364 <_ZN14DoIPDaemonTask20onEventConnectingTCPEN17ConnectionManager16EConnectionEventE+0x78>
        }
        default:
        {
            //no transition
            return current_connection_state;
 8105360:	687b      	ldr	r3, [r7, #4]
 8105362:	7b1b      	ldrb	r3, [r3, #12]
        }
    }
}
 8105364:	4618      	mov	r0, r3
 8105366:	3710      	adds	r7, #16
 8105368:	46bd      	mov	sp, r7
 810536a:	bd80      	pop	{r7, pc}
 810536c:	10000294 	.word	0x10000294

08105370 <_ZN14DoIPDaemonTask26onEventConnectedECUDefaultEN17ConnectionManager16EConnectionEventE>:

DoIPDaemonTask::EConnectionState DoIPDaemonTask::onEventConnectedECUDefault(CM::EConnectionEvent event)
{
 8105370:	b580      	push	{r7, lr}
 8105372:	b082      	sub	sp, #8
 8105374:	af00      	add	r7, sp, #0
 8105376:	6078      	str	r0, [r7, #4]
 8105378:	460b      	mov	r3, r1
 810537a:	70fb      	strb	r3, [r7, #3]
    switch(event)
 810537c:	78fb      	ldrb	r3, [r7, #3]
 810537e:	2b06      	cmp	r3, #6
 8105380:	d019      	beq.n	81053b6 <_ZN14DoIPDaemonTask26onEventConnectedECUDefaultEN17ConnectionManager16EConnectionEventE+0x46>
 8105382:	2b06      	cmp	r3, #6
 8105384:	dc28      	bgt.n	81053d8 <_ZN14DoIPDaemonTask26onEventConnectedECUDefaultEN17ConnectionManager16EConnectionEventE+0x68>
 8105386:	2b01      	cmp	r3, #1
 8105388:	d002      	beq.n	8105390 <_ZN14DoIPDaemonTask26onEventConnectedECUDefaultEN17ConnectionManager16EConnectionEventE+0x20>
 810538a:	2b04      	cmp	r3, #4
 810538c:	d007      	beq.n	810539e <_ZN14DoIPDaemonTask26onEventConnectedECUDefaultEN17ConnectionManager16EConnectionEventE+0x2e>
 810538e:	e023      	b.n	81053d8 <_ZN14DoIPDaemonTask26onEventConnectedECUDefaultEN17ConnectionManager16EConnectionEventE+0x68>
    {
		case CM::EConnectionEvent::EVENT_ETHERNET_DISCONNECTED:
		{
			conn_mgr.tcpDisconnect();
 8105390:	687b      	ldr	r3, [r7, #4]
 8105392:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8105394:	4618      	mov	r0, r3
 8105396:	f7fe ff25 	bl	81041e4 <_ZN17ConnectionManager13tcpDisconnectEv>
			return STATE_ETHERNET_DISCONNECTED;
 810539a:	2300      	movs	r3, #0
 810539c:	e01e      	b.n	81053dc <_ZN14DoIPDaemonTask26onEventConnectedECUDefaultEN17ConnectionManager16EConnectionEventE+0x6c>
		}
        case CM::EConnectionEvent::EVENT_TCP_CONNECTION_FAILED:
        {
            conn_mgr.tcpDisconnect();
 810539e:	687b      	ldr	r3, [r7, #4]
 81053a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 81053a2:	4618      	mov	r0, r3
 81053a4:	f7fe ff1e 	bl	81041e4 <_ZN17ConnectionManager13tcpDisconnectEv>
            conn_mgr.udpConnect();
 81053a8:	687b      	ldr	r3, [r7, #4]
 81053aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 81053ac:	4618      	mov	r0, r3
 81053ae:	f7fe fe33 	bl	8104018 <_ZN17ConnectionManager10udpConnectEv>
            return STATE_SERVICE_DISCOVERY;
 81053b2:	2301      	movs	r3, #1
 81053b4:	e012      	b.n	81053dc <_ZN14DoIPDaemonTask26onEventConnectedECUDefaultEN17ConnectionManager16EConnectionEventE+0x6c>
        }
        case CM::EConnectionEvent::EVENT_DATA_REQUESTED:
        {
            if(subscribed_data[0] == 0ULL && subscribed_data[1] == 0ULL)
 81053b6:	687b      	ldr	r3, [r7, #4]
 81053b8:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 81053bc:	4313      	orrs	r3, r2
 81053be:	d106      	bne.n	81053ce <_ZN14DoIPDaemonTask26onEventConnectedECUDefaultEN17ConnectionManager16EConnectionEventE+0x5e>
 81053c0:	687b      	ldr	r3, [r7, #4]
 81053c2:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 81053c6:	4313      	orrs	r3, r2
 81053c8:	d101      	bne.n	81053ce <_ZN14DoIPDaemonTask26onEventConnectedECUDefaultEN17ConnectionManager16EConnectionEventE+0x5e>
            {
                return STATE_CONNECTED_ECU;
 81053ca:	2303      	movs	r3, #3
 81053cc:	e006      	b.n	81053dc <_ZN14DoIPDaemonTask26onEventConnectedECUDefaultEN17ConnectionManager16EConnectionEventE+0x6c>
            }
            else
            {
                sendNextRequest();
 81053ce:	6878      	ldr	r0, [r7, #4]
 81053d0:	f000 f928 	bl	8105624 <_ZN14DoIPDaemonTask15sendNextRequestEv>
            }
            return STATE_WAITING_FOR_DATA_FROM_ECU;
 81053d4:	2304      	movs	r3, #4
 81053d6:	e001      	b.n	81053dc <_ZN14DoIPDaemonTask26onEventConnectedECUDefaultEN17ConnectionManager16EConnectionEventE+0x6c>
        }
        default:
        {
            //no transition
            return current_connection_state;
 81053d8:	687b      	ldr	r3, [r7, #4]
 81053da:	7b1b      	ldrb	r3, [r3, #12]
        }
    }
}
 81053dc:	4618      	mov	r0, r3
 81053de:	3708      	adds	r7, #8
 81053e0:	46bd      	mov	sp, r7
 81053e2:	bd80      	pop	{r7, pc}

081053e4 <_ZN14DoIPDaemonTask28onEventWaitingForDataFromECUEN17ConnectionManager16EConnectionEventE>:

DoIPDaemonTask::EConnectionState DoIPDaemonTask::onEventWaitingForDataFromECU(CM::EConnectionEvent event)
{
 81053e4:	b580      	push	{r7, lr}
 81053e6:	b082      	sub	sp, #8
 81053e8:	af00      	add	r7, sp, #0
 81053ea:	6078      	str	r0, [r7, #4]
 81053ec:	460b      	mov	r3, r1
 81053ee:	70fb      	strb	r3, [r7, #3]
    switch(event)
 81053f0:	78fb      	ldrb	r3, [r7, #3]
 81053f2:	3b01      	subs	r3, #1
 81053f4:	2b07      	cmp	r3, #7
 81053f6:	d834      	bhi.n	8105462 <_ZN14DoIPDaemonTask28onEventWaitingForDataFromECUEN17ConnectionManager16EConnectionEventE+0x7e>
 81053f8:	a201      	add	r2, pc, #4	@ (adr r2, 8105400 <_ZN14DoIPDaemonTask28onEventWaitingForDataFromECUEN17ConnectionManager16EConnectionEventE+0x1c>)
 81053fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81053fe:	bf00      	nop
 8105400:	08105421 	.word	0x08105421
 8105404:	08105463 	.word	0x08105463
 8105408:	08105463 	.word	0x08105463
 810540c:	08105425 	.word	0x08105425
 8105410:	08105463 	.word	0x08105463
 8105414:	08105463 	.word	0x08105463
 8105418:	0810545f 	.word	0x0810545f
 810541c:	0810543d 	.word	0x0810543d
    {
        case CM::EConnectionEvent::EVENT_ETHERNET_DISCONNECTED:
        {
            return STATE_ETHERNET_DISCONNECTED;
 8105420:	2300      	movs	r3, #0
 8105422:	e020      	b.n	8105466 <_ZN14DoIPDaemonTask28onEventWaitingForDataFromECUEN17ConnectionManager16EConnectionEventE+0x82>
        }
        case CM::EConnectionEvent::EVENT_TCP_CONNECTION_FAILED:
        {
            conn_mgr.tcpDisconnect();
 8105424:	687b      	ldr	r3, [r7, #4]
 8105426:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8105428:	4618      	mov	r0, r3
 810542a:	f7fe fedb 	bl	81041e4 <_ZN17ConnectionManager13tcpDisconnectEv>
            conn_mgr.udpConnect();
 810542e:	687b      	ldr	r3, [r7, #4]
 8105430:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8105432:	4618      	mov	r0, r3
 8105434:	f7fe fdf0 	bl	8104018 <_ZN17ConnectionManager10udpConnectEv>
            return STATE_SERVICE_DISCOVERY;
 8105438:	2301      	movs	r3, #1
 810543a:	e014      	b.n	8105466 <_ZN14DoIPDaemonTask28onEventWaitingForDataFromECUEN17ConnectionManager16EConnectionEventE+0x82>
        }
        case CM::EConnectionEvent::EVENT_TCP_READ_DATA_BY_ID_RECEIVED:
        {
            if(subscribed_data[0] == 0ULL && subscribed_data[1] == 0ULL)
 810543c:	687b      	ldr	r3, [r7, #4]
 810543e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8105442:	4313      	orrs	r3, r2
 8105444:	d106      	bne.n	8105454 <_ZN14DoIPDaemonTask28onEventWaitingForDataFromECUEN17ConnectionManager16EConnectionEventE+0x70>
 8105446:	687b      	ldr	r3, [r7, #4]
 8105448:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 810544c:	4313      	orrs	r3, r2
 810544e:	d101      	bne.n	8105454 <_ZN14DoIPDaemonTask28onEventWaitingForDataFromECUEN17ConnectionManager16EConnectionEventE+0x70>
            {
                return STATE_CONNECTED_ECU;
 8105450:	2303      	movs	r3, #3
 8105452:	e008      	b.n	8105466 <_ZN14DoIPDaemonTask28onEventWaitingForDataFromECUEN17ConnectionManager16EConnectionEventE+0x82>
            }
            else
            {
                sendNextRequest();
 8105454:	6878      	ldr	r0, [r7, #4]
 8105456:	f000 f8e5 	bl	8105624 <_ZN14DoIPDaemonTask15sendNextRequestEv>
            }
            return STATE_WAITING_FOR_DATA_FROM_ECU;
 810545a:	2304      	movs	r3, #4
 810545c:	e003      	b.n	8105466 <_ZN14DoIPDaemonTask28onEventWaitingForDataFromECUEN17ConnectionManager16EConnectionEventE+0x82>
        }
        case CM::EConnectionEvent::EVENT_NO_DATA_TO_REQUEST:
        {
            return STATE_CONNECTED_ECU;
 810545e:	2303      	movs	r3, #3
 8105460:	e001      	b.n	8105466 <_ZN14DoIPDaemonTask28onEventWaitingForDataFromECUEN17ConnectionManager16EConnectionEventE+0x82>
        }
        default:
        {
            //no transition
            return current_connection_state;
 8105462:	687b      	ldr	r3, [r7, #4]
 8105464:	7b1b      	ldrb	r3, [r3, #12]
        }
    }   
}
 8105466:	4618      	mov	r0, r3
 8105468:	3708      	adds	r7, #8
 810546a:	46bd      	mov	sp, r7
 810546c:	bd80      	pop	{r7, pc}
 810546e:	bf00      	nop

08105470 <_ZN14DoIPDaemonTask20onEventDataSubscribeERK12UMessageData>:

void DoIPDaemonTask::onEventDataSubscribe(const UMessageData& data)
{
 8105470:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8105474:	b089      	sub	sp, #36	@ 0x24
 8105476:	af00      	add	r7, sp, #0
 8105478:	6178      	str	r0, [r7, #20]
 810547a:	6139      	str	r1, [r7, #16]
    for(int i = 1; i <= data.event_subscriptions[0]; i++)
 810547c:	2301      	movs	r3, #1
 810547e:	61fb      	str	r3, [r7, #28]
 8105480:	e072      	b.n	8105568 <_ZN14DoIPDaemonTask20onEventDataSubscribeERK12UMessageData+0xf8>
    {
        if(data.event_subscriptions[i] > 63)
 8105482:	693a      	ldr	r2, [r7, #16]
 8105484:	69fb      	ldr	r3, [r7, #28]
 8105486:	4413      	add	r3, r2
 8105488:	781b      	ldrb	r3, [r3, #0]
 810548a:	2b3f      	cmp	r3, #63	@ 0x3f
 810548c:	d934      	bls.n	81054f8 <_ZN14DoIPDaemonTask20onEventDataSubscribeERK12UMessageData+0x88>
        {
            subscribed_data[1] |= 1ULL << (data.event_subscriptions[i] - 64);
 810548e:	697b      	ldr	r3, [r7, #20]
 8105490:	e9d3 ab06 	ldrd	sl, fp, [r3, #24]
 8105494:	693a      	ldr	r2, [r7, #16]
 8105496:	69fb      	ldr	r3, [r7, #28]
 8105498:	4413      	add	r3, r2
 810549a:	781b      	ldrb	r3, [r3, #0]
 810549c:	f1a3 0040 	sub.w	r0, r3, #64	@ 0x40
 81054a0:	f04f 0201 	mov.w	r2, #1
 81054a4:	f04f 0300 	mov.w	r3, #0
 81054a8:	f1a0 0620 	sub.w	r6, r0, #32
 81054ac:	f1c0 0120 	rsb	r1, r0, #32
 81054b0:	fa03 f500 	lsl.w	r5, r3, r0
 81054b4:	fa02 f606 	lsl.w	r6, r2, r6
 81054b8:	4335      	orrs	r5, r6
 81054ba:	fa22 f101 	lsr.w	r1, r2, r1
 81054be:	430d      	orrs	r5, r1
 81054c0:	fa02 f400 	lsl.w	r4, r2, r0
 81054c4:	ea4a 0304 	orr.w	r3, sl, r4
 81054c8:	60bb      	str	r3, [r7, #8]
 81054ca:	ea4b 0305 	orr.w	r3, fp, r5
 81054ce:	60fb      	str	r3, [r7, #12]
 81054d0:	697b      	ldr	r3, [r7, #20]
 81054d2:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 81054d6:	e9c3 1206 	strd	r1, r2, [r3, #24]
            if(currently_processed_request == REQUEST_INVALID)
 81054da:	697b      	ldr	r3, [r7, #20]
 81054dc:	f993 3020 	ldrsb.w	r3, [r3, #32]
 81054e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 81054e4:	d13d      	bne.n	8105562 <_ZN14DoIPDaemonTask20onEventDataSubscribeERK12UMessageData+0xf2>
            {
                currently_processed_request = static_cast<EDoIPRequest>(data.event_subscriptions[i]);
 81054e6:	693a      	ldr	r2, [r7, #16]
 81054e8:	69fb      	ldr	r3, [r7, #28]
 81054ea:	4413      	add	r3, r2
 81054ec:	781b      	ldrb	r3, [r3, #0]
 81054ee:	b25a      	sxtb	r2, r3
 81054f0:	697b      	ldr	r3, [r7, #20]
 81054f2:	f883 2020 	strb.w	r2, [r3, #32]
 81054f6:	e034      	b.n	8105562 <_ZN14DoIPDaemonTask20onEventDataSubscribeERK12UMessageData+0xf2>
            }
        }
        else
        {
            subscribed_data[0] |= 1ULL << data.event_subscriptions[i];
 81054f8:	697b      	ldr	r3, [r7, #20]
 81054fa:	e9d3 ab04 	ldrd	sl, fp, [r3, #16]
 81054fe:	693a      	ldr	r2, [r7, #16]
 8105500:	69fb      	ldr	r3, [r7, #28]
 8105502:	4413      	add	r3, r2
 8105504:	781b      	ldrb	r3, [r3, #0]
 8105506:	4618      	mov	r0, r3
 8105508:	f04f 0201 	mov.w	r2, #1
 810550c:	f04f 0300 	mov.w	r3, #0
 8105510:	f1a0 0620 	sub.w	r6, r0, #32
 8105514:	f1c0 0120 	rsb	r1, r0, #32
 8105518:	fa03 f900 	lsl.w	r9, r3, r0
 810551c:	fa02 f606 	lsl.w	r6, r2, r6
 8105520:	ea49 0906 	orr.w	r9, r9, r6
 8105524:	fa22 f101 	lsr.w	r1, r2, r1
 8105528:	ea49 0901 	orr.w	r9, r9, r1
 810552c:	fa02 f800 	lsl.w	r8, r2, r0
 8105530:	ea4a 0308 	orr.w	r3, sl, r8
 8105534:	603b      	str	r3, [r7, #0]
 8105536:	ea4b 0309 	orr.w	r3, fp, r9
 810553a:	607b      	str	r3, [r7, #4]
 810553c:	697b      	ldr	r3, [r7, #20]
 810553e:	e9d7 1200 	ldrd	r1, r2, [r7]
 8105542:	e9c3 1204 	strd	r1, r2, [r3, #16]
            if(currently_processed_request == REQUEST_INVALID)
 8105546:	697b      	ldr	r3, [r7, #20]
 8105548:	f993 3020 	ldrsb.w	r3, [r3, #32]
 810554c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8105550:	d107      	bne.n	8105562 <_ZN14DoIPDaemonTask20onEventDataSubscribeERK12UMessageData+0xf2>
            {
                currently_processed_request = static_cast<EDoIPRequest>(data.event_subscriptions[i]);
 8105552:	693a      	ldr	r2, [r7, #16]
 8105554:	69fb      	ldr	r3, [r7, #28]
 8105556:	4413      	add	r3, r2
 8105558:	781b      	ldrb	r3, [r3, #0]
 810555a:	b25a      	sxtb	r2, r3
 810555c:	697b      	ldr	r3, [r7, #20]
 810555e:	f883 2020 	strb.w	r2, [r3, #32]
    for(int i = 1; i <= data.event_subscriptions[0]; i++)
 8105562:	69fb      	ldr	r3, [r7, #28]
 8105564:	3301      	adds	r3, #1
 8105566:	61fb      	str	r3, [r7, #28]
 8105568:	693b      	ldr	r3, [r7, #16]
 810556a:	781b      	ldrb	r3, [r3, #0]
 810556c:	461a      	mov	r2, r3
 810556e:	69fb      	ldr	r3, [r7, #28]
 8105570:	4293      	cmp	r3, r2
 8105572:	dd86      	ble.n	8105482 <_ZN14DoIPDaemonTask20onEventDataSubscribeERK12UMessageData+0x12>
            }
        }
    }

    CM::EConnectionEvent connEvent = CM::EConnectionEvent::EVENT_DATA_REQUESTED;
 8105574:	2306      	movs	r3, #6
 8105576:	76fb      	strb	r3, [r7, #27]
    xQueueSend(connectionEventsQueue, &(connEvent), static_cast<TickType_t>(10000));
 8105578:	4b06      	ldr	r3, [pc, #24]	@ (8105594 <_ZN14DoIPDaemonTask20onEventDataSubscribeERK12UMessageData+0x124>)
 810557a:	6818      	ldr	r0, [r3, #0]
 810557c:	f107 011b 	add.w	r1, r7, #27
 8105580:	2300      	movs	r3, #0
 8105582:	f242 7210 	movw	r2, #10000	@ 0x2710
 8105586:	f00e fdb5 	bl	81140f4 <xQueueGenericSend>
}
 810558a:	bf00      	nop
 810558c:	3724      	adds	r7, #36	@ 0x24
 810558e:	46bd      	mov	sp, r7
 8105590:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8105594:	10000294 	.word	0x10000294

08105598 <_ZN14DoIPDaemonTask22onEventDataUnsubscribeERK12UMessageData>:

void DoIPDaemonTask::onEventDataUnsubscribe(const UMessageData& data)
{
 8105598:	b580      	push	{r7, lr}
 810559a:	b084      	sub	sp, #16
 810559c:	af00      	add	r7, sp, #0
 810559e:	6078      	str	r0, [r7, #4]
 81055a0:	6039      	str	r1, [r7, #0]
    for (int i = 1; i <= data.event_subscriptions[0]; i++)
 81055a2:	2301      	movs	r3, #1
 81055a4:	60fb      	str	r3, [r7, #12]
 81055a6:	e017      	b.n	81055d8 <_ZN14DoIPDaemonTask22onEventDataUnsubscribeERK12UMessageData+0x40>
    {
        if (data.event_subscriptions[i] > 63)
 81055a8:	683a      	ldr	r2, [r7, #0]
 81055aa:	68fb      	ldr	r3, [r7, #12]
 81055ac:	4413      	add	r3, r2
 81055ae:	781b      	ldrb	r3, [r3, #0]
 81055b0:	2b3f      	cmp	r3, #63	@ 0x3f
 81055b2:	d907      	bls.n	81055c4 <_ZN14DoIPDaemonTask22onEventDataUnsubscribeERK12UMessageData+0x2c>
        {
            subscribed_data[1] &= 0ULL << (data.event_subscriptions[i] - 64);
 81055b4:	6879      	ldr	r1, [r7, #4]
 81055b6:	f04f 0200 	mov.w	r2, #0
 81055ba:	f04f 0300 	mov.w	r3, #0
 81055be:	e9c1 2306 	strd	r2, r3, [r1, #24]
 81055c2:	e006      	b.n	81055d2 <_ZN14DoIPDaemonTask22onEventDataUnsubscribeERK12UMessageData+0x3a>
        }
        else
        {
            subscribed_data[0] &= 0ULL << data.event_subscriptions[i];
 81055c4:	6879      	ldr	r1, [r7, #4]
 81055c6:	f04f 0200 	mov.w	r2, #0
 81055ca:	f04f 0300 	mov.w	r3, #0
 81055ce:	e9c1 2304 	strd	r2, r3, [r1, #16]
    for (int i = 1; i <= data.event_subscriptions[0]; i++)
 81055d2:	68fb      	ldr	r3, [r7, #12]
 81055d4:	3301      	adds	r3, #1
 81055d6:	60fb      	str	r3, [r7, #12]
 81055d8:	683b      	ldr	r3, [r7, #0]
 81055da:	781b      	ldrb	r3, [r3, #0]
 81055dc:	461a      	mov	r2, r3
 81055de:	68fb      	ldr	r3, [r7, #12]
 81055e0:	4293      	cmp	r3, r2
 81055e2:	dde1      	ble.n	81055a8 <_ZN14DoIPDaemonTask22onEventDataUnsubscribeERK12UMessageData+0x10>
        }
    }

    if(subscribed_data[0] == 0ULL && subscribed_data[1] == 0ULL)
 81055e4:	687b      	ldr	r3, [r7, #4]
 81055e6:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 81055ea:	4313      	orrs	r3, r2
 81055ec:	d113      	bne.n	8105616 <_ZN14DoIPDaemonTask22onEventDataUnsubscribeERK12UMessageData+0x7e>
 81055ee:	687b      	ldr	r3, [r7, #4]
 81055f0:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 81055f4:	4313      	orrs	r3, r2
 81055f6:	d10e      	bne.n	8105616 <_ZN14DoIPDaemonTask22onEventDataUnsubscribeERK12UMessageData+0x7e>
    {
        currently_processed_request = REQUEST_INVALID;
 81055f8:	687b      	ldr	r3, [r7, #4]
 81055fa:	22ff      	movs	r2, #255	@ 0xff
 81055fc:	f883 2020 	strb.w	r2, [r3, #32]
        CM::EConnectionEvent connEvent = CM::EConnectionEvent::EVENT_NO_DATA_TO_REQUEST;
 8105600:	2307      	movs	r3, #7
 8105602:	72fb      	strb	r3, [r7, #11]
        xQueueSend(connectionEventsQueue, &(connEvent), static_cast<TickType_t>(10000));
 8105604:	4b06      	ldr	r3, [pc, #24]	@ (8105620 <_ZN14DoIPDaemonTask22onEventDataUnsubscribeERK12UMessageData+0x88>)
 8105606:	6818      	ldr	r0, [r3, #0]
 8105608:	f107 010b 	add.w	r1, r7, #11
 810560c:	2300      	movs	r3, #0
 810560e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8105612:	f00e fd6f 	bl	81140f4 <xQueueGenericSend>
    }
}
 8105616:	bf00      	nop
 8105618:	3710      	adds	r7, #16
 810561a:	46bd      	mov	sp, r7
 810561c:	bd80      	pop	{r7, pc}
 810561e:	bf00      	nop
 8105620:	10000294 	.word	0x10000294

08105624 <_ZN14DoIPDaemonTask15sendNextRequestEv>:

void DoIPDaemonTask::sendNextRequest()
{
 8105624:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8105628:	b085      	sub	sp, #20
 810562a:	af00      	add	r7, sp, #0
 810562c:	6078      	str	r0, [r7, #4]
    // it is ugly, but it is fast, which is critical here
    for (int i = currently_processed_request + 1; i < 129; i++) //it is 129 on purpose, because after 127th param is processed we will reset index to 0
 810562e:	6879      	ldr	r1, [r7, #4]
 8105630:	f991 1020 	ldrsb.w	r1, [r1, #32]
 8105634:	3101      	adds	r1, #1
 8105636:	60f9      	str	r1, [r7, #12]
 8105638:	e062      	b.n	8105700 <_ZN14DoIPDaemonTask15sendNextRequestEv+0xdc>
    {
        if(i > 127)
 810563a:	68f9      	ldr	r1, [r7, #12]
 810563c:	297f      	cmp	r1, #127	@ 0x7f
 810563e:	dd01      	ble.n	8105644 <_ZN14DoIPDaemonTask15sendNextRequestEv+0x20>
        {
            i = 0;
 8105640:	2100      	movs	r1, #0
 8105642:	60f9      	str	r1, [r7, #12]
        }
        if(i < 64)
 8105644:	68f9      	ldr	r1, [r7, #12]
 8105646:	293f      	cmp	r1, #63	@ 0x3f
 8105648:	dc29      	bgt.n	810569e <_ZN14DoIPDaemonTask15sendNextRequestEv+0x7a>
        {
            if (subscribed_data[0] & (1ULL << i))
 810564a:	6879      	ldr	r1, [r7, #4]
 810564c:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
 8105650:	68fe      	ldr	r6, [r7, #12]
 8105652:	f1c6 0e20 	rsb	lr, r6, #32
 8105656:	f1a6 0c20 	sub.w	ip, r6, #32
 810565a:	fa20 f206 	lsr.w	r2, r0, r6
 810565e:	fa01 fe0e 	lsl.w	lr, r1, lr
 8105662:	ea42 020e 	orr.w	r2, r2, lr
 8105666:	fa21 fc0c 	lsr.w	ip, r1, ip
 810566a:	ea42 020c 	orr.w	r2, r2, ip
 810566e:	fa21 f306 	lsr.w	r3, r1, r6
 8105672:	f002 0801 	and.w	r8, r2, #1
 8105676:	f04f 0900 	mov.w	r9, #0
 810567a:	ea58 0109 	orrs.w	r1, r8, r9
 810567e:	d03c      	beq.n	81056fa <_ZN14DoIPDaemonTask15sendNextRequestEv+0xd6>
            {
                auto dataType = static_cast<EDoIPRequest>(i);
 8105680:	68fb      	ldr	r3, [r7, #12]
 8105682:	72bb      	strb	r3, [r7, #10]
                currently_processed_request = dataType;
 8105684:	687b      	ldr	r3, [r7, #4]
 8105686:	7aba      	ldrb	r2, [r7, #10]
 8105688:	f883 2020 	strb.w	r2, [r3, #32]
                conn_mgr.sendRequestForData(dataType);
 810568c:	687b      	ldr	r3, [r7, #4]
 810568e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8105690:	f997 200a 	ldrsb.w	r2, [r7, #10]
 8105694:	4611      	mov	r1, r2
 8105696:	4618      	mov	r0, r3
 8105698:	f7ff f8f0 	bl	810487c <_ZN17ConnectionManager18sendRequestForDataEN7APIDoIP12EDoIPRequestE>
                break;
 810569c:	e034      	b.n	8105708 <_ZN14DoIPDaemonTask15sendNextRequestEv+0xe4>
            }
        }
        else
        {
            if (subscribed_data[1] & (1ULL << (i - 64)))
 810569e:	6879      	ldr	r1, [r7, #4]
 81056a0:	e9d1 0106 	ldrd	r0, r1, [r1, #24]
 81056a4:	68fe      	ldr	r6, [r7, #12]
 81056a6:	3e40      	subs	r6, #64	@ 0x40
 81056a8:	f1c6 0e20 	rsb	lr, r6, #32
 81056ac:	f1a6 0c20 	sub.w	ip, r6, #32
 81056b0:	fa20 f406 	lsr.w	r4, r0, r6
 81056b4:	fa01 fe0e 	lsl.w	lr, r1, lr
 81056b8:	ea44 040e 	orr.w	r4, r4, lr
 81056bc:	fa21 fc0c 	lsr.w	ip, r1, ip
 81056c0:	ea44 040c 	orr.w	r4, r4, ip
 81056c4:	fa21 f506 	lsr.w	r5, r1, r6
 81056c8:	f004 0a01 	and.w	sl, r4, #1
 81056cc:	f04f 0b00 	mov.w	fp, #0
 81056d0:	ea5a 010b 	orrs.w	r1, sl, fp
 81056d4:	d011      	beq.n	81056fa <_ZN14DoIPDaemonTask15sendNextRequestEv+0xd6>
            {
                auto dataType = static_cast<EDoIPRequest>(i - 64);
 81056d6:	68fb      	ldr	r3, [r7, #12]
 81056d8:	b2db      	uxtb	r3, r3
 81056da:	3b40      	subs	r3, #64	@ 0x40
 81056dc:	b2db      	uxtb	r3, r3
 81056de:	72fb      	strb	r3, [r7, #11]
                currently_processed_request = dataType;
 81056e0:	687b      	ldr	r3, [r7, #4]
 81056e2:	7afa      	ldrb	r2, [r7, #11]
 81056e4:	f883 2020 	strb.w	r2, [r3, #32]
                conn_mgr.sendRequestForData(dataType);
 81056e8:	687b      	ldr	r3, [r7, #4]
 81056ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 81056ec:	f997 200b 	ldrsb.w	r2, [r7, #11]
 81056f0:	4611      	mov	r1, r2
 81056f2:	4618      	mov	r0, r3
 81056f4:	f7ff f8c2 	bl	810487c <_ZN17ConnectionManager18sendRequestForDataEN7APIDoIP12EDoIPRequestE>
                break;
 81056f8:	e006      	b.n	8105708 <_ZN14DoIPDaemonTask15sendNextRequestEv+0xe4>
    for (int i = currently_processed_request + 1; i < 129; i++) //it is 129 on purpose, because after 127th param is processed we will reset index to 0
 81056fa:	68f9      	ldr	r1, [r7, #12]
 81056fc:	3101      	adds	r1, #1
 81056fe:	60f9      	str	r1, [r7, #12]
 8105700:	68f9      	ldr	r1, [r7, #12]
 8105702:	2980      	cmp	r1, #128	@ 0x80
 8105704:	dd99      	ble.n	810563a <_ZN14DoIPDaemonTask15sendNextRequestEv+0x16>
            }
        }
    }
}
 8105706:	bf00      	nop
 8105708:	bf00      	nop
 810570a:	3714      	adds	r7, #20
 810570c:	46bd      	mov	sp, r7
 810570e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08105712 <_ZNSt14_Function_baseC1Ev>:
    _Function_base() = default;
 8105712:	b480      	push	{r7}
 8105714:	b083      	sub	sp, #12
 8105716:	af00      	add	r7, sp, #0
 8105718:	6078      	str	r0, [r7, #4]
 810571a:	687b      	ldr	r3, [r7, #4]
 810571c:	461a      	mov	r2, r3
 810571e:	2300      	movs	r3, #0
 8105720:	6013      	str	r3, [r2, #0]
 8105722:	6053      	str	r3, [r2, #4]
 8105724:	687b      	ldr	r3, [r7, #4]
 8105726:	2200      	movs	r2, #0
 8105728:	609a      	str	r2, [r3, #8]
 810572a:	687b      	ldr	r3, [r7, #4]
 810572c:	4618      	mov	r0, r3
 810572e:	370c      	adds	r7, #12
 8105730:	46bd      	mov	sp, r7
 8105732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105736:	4770      	bx	lr

08105738 <_ZNSt8functionIFv10EEventType12UMessageData12EEventClientS2_EEC1IZN14DoIPDaemonTask7processEvEUlS0_S1_S2_S2_E_vEEOT_>:
       */
      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 2774. std::function construction vs assignment
      template<typename _Functor,
	       typename _Constraints = _Requires<_Callable<_Functor>>>
	function(_Functor&& __f)
 8105738:	b590      	push	{r4, r7, lr}
 810573a:	b083      	sub	sp, #12
 810573c:	af00      	add	r7, sp, #0
 810573e:	6078      	str	r0, [r7, #4]
 8105740:	6039      	str	r1, [r7, #0]
	noexcept(_Handler<_Functor>::template _S_nothrow_init<_Functor>())
	: _Function_base()
 8105742:	687b      	ldr	r3, [r7, #4]
 8105744:	461a      	mov	r2, r3
 8105746:	2300      	movs	r3, #0
 8105748:	6013      	str	r3, [r2, #0]
 810574a:	6053      	str	r3, [r2, #4]
 810574c:	6093      	str	r3, [r2, #8]
 810574e:	687b      	ldr	r3, [r7, #4]
 8105750:	4618      	mov	r0, r3
 8105752:	f7ff ffde 	bl	8105712 <_ZNSt14_Function_baseC1Ev>
 8105756:	687b      	ldr	r3, [r7, #4]
 8105758:	2200      	movs	r2, #0
 810575a:	60da      	str	r2, [r3, #12]
	      "std::function target must be constructible from the "
	      "constructor argument");

	  using _My_handler = _Handler<_Functor>;

	  if (_My_handler::_M_not_empty_function(__f))
 810575c:	6838      	ldr	r0, [r7, #0]
 810575e:	f000 f81b 	bl	8105798 <_ZNSt14_Function_base13_Base_managerIZN14DoIPDaemonTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E21_M_not_empty_functionIS5_EEbRKT_>
 8105762:	4603      	mov	r3, r0
 8105764:	2b00      	cmp	r3, #0
 8105766:	d00e      	beq.n	8105786 <_ZNSt8functionIFv10EEventType12UMessageData12EEventClientS2_EEC1IZN14DoIPDaemonTask7processEvEUlS0_S1_S2_S2_E_vEEOT_+0x4e>
	    {
	      _My_handler::_M_init_functor(_M_functor,
 8105768:	687c      	ldr	r4, [r7, #4]
 810576a:	6838      	ldr	r0, [r7, #0]
 810576c:	f000 f81f 	bl	81057ae <_ZSt7forwardIZN14DoIPDaemonTask7processEvEUl10EEventType12UMessageData12EEventClientS3_E_EOT_RNSt16remove_referenceIS5_E4typeE>
 8105770:	4603      	mov	r3, r0
 8105772:	4619      	mov	r1, r3
 8105774:	4620      	mov	r0, r4
 8105776:	f000 f825 	bl	81057c4 <_ZNSt14_Function_base13_Base_managerIZN14DoIPDaemonTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E15_M_init_functorIS5_EEvRSt9_Any_dataOT_>
					   std::forward<_Functor>(__f));
	      _M_invoker = &_My_handler::_M_invoke;
 810577a:	687b      	ldr	r3, [r7, #4]
 810577c:	4a04      	ldr	r2, [pc, #16]	@ (8105790 <_ZNSt8functionIFv10EEventType12UMessageData12EEventClientS2_EEC1IZN14DoIPDaemonTask7processEvEUlS0_S1_S2_S2_E_vEEOT_+0x58>)
 810577e:	60da      	str	r2, [r3, #12]
	      _M_manager = &_My_handler::_M_manager;
 8105780:	687b      	ldr	r3, [r7, #4]
 8105782:	4a04      	ldr	r2, [pc, #16]	@ (8105794 <_ZNSt8functionIFv10EEventType12UMessageData12EEventClientS2_EEC1IZN14DoIPDaemonTask7processEvEUlS0_S1_S2_S2_E_vEEOT_+0x5c>)
 8105784:	609a      	str	r2, [r3, #8]
	    }
	}
 8105786:	687b      	ldr	r3, [r7, #4]
 8105788:	4618      	mov	r0, r3
 810578a:	370c      	adds	r7, #12
 810578c:	46bd      	mov	sp, r7
 810578e:	bd90      	pop	{r4, r7, pc}
 8105790:	081057e9 	.word	0x081057e9
 8105794:	08105839 	.word	0x08105839

08105798 <_ZNSt14_Function_base13_Base_managerIZN14DoIPDaemonTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E21_M_not_empty_functionIS5_EEbRKT_>:
	  _M_not_empty_function(const _Tp&) noexcept
 8105798:	b480      	push	{r7}
 810579a:	b083      	sub	sp, #12
 810579c:	af00      	add	r7, sp, #0
 810579e:	6078      	str	r0, [r7, #4]
	  { return true; }
 81057a0:	2301      	movs	r3, #1
 81057a2:	4618      	mov	r0, r3
 81057a4:	370c      	adds	r7, #12
 81057a6:	46bd      	mov	sp, r7
 81057a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81057ac:	4770      	bx	lr

081057ae <_ZSt7forwardIZN14DoIPDaemonTask7processEvEUl10EEventType12UMessageData12EEventClientS3_E_EOT_RNSt16remove_referenceIS5_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 81057ae:	b480      	push	{r7}
 81057b0:	b083      	sub	sp, #12
 81057b2:	af00      	add	r7, sp, #0
 81057b4:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 81057b6:	687b      	ldr	r3, [r7, #4]
 81057b8:	4618      	mov	r0, r3
 81057ba:	370c      	adds	r7, #12
 81057bc:	46bd      	mov	sp, r7
 81057be:	f85d 7b04 	ldr.w	r7, [sp], #4
 81057c2:	4770      	bx	lr

081057c4 <_ZNSt14_Function_base13_Base_managerIZN14DoIPDaemonTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E15_M_init_functorIS5_EEvRSt9_Any_dataOT_>:
	  _M_init_functor(_Any_data& __functor, _Fn&& __f)
 81057c4:	b590      	push	{r4, r7, lr}
 81057c6:	b083      	sub	sp, #12
 81057c8:	af00      	add	r7, sp, #0
 81057ca:	6078      	str	r0, [r7, #4]
 81057cc:	6039      	str	r1, [r7, #0]
	    _M_create(__functor, std::forward<_Fn>(__f), _Local_storage());
 81057ce:	6838      	ldr	r0, [r7, #0]
 81057d0:	f7ff ffed 	bl	81057ae <_ZSt7forwardIZN14DoIPDaemonTask7processEvEUl10EEventType12UMessageData12EEventClientS3_E_EOT_RNSt16remove_referenceIS5_E4typeE>
 81057d4:	4603      	mov	r3, r0
 81057d6:	4622      	mov	r2, r4
 81057d8:	4619      	mov	r1, r3
 81057da:	6878      	ldr	r0, [r7, #4]
 81057dc:	f000 f84b 	bl	8105876 <_ZNSt14_Function_base13_Base_managerIZN14DoIPDaemonTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E9_M_createIS5_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>
	  }
 81057e0:	bf00      	nop
 81057e2:	370c      	adds	r7, #12
 81057e4:	46bd      	mov	sp, r7
 81057e6:	bd90      	pop	{r4, r7, pc}

081057e8 <_ZNSt17_Function_handlerIFv10EEventType12UMessageData12EEventClientS2_EZN14DoIPDaemonTask7processEvEUlS0_S1_S2_S2_E_E9_M_invokeERKSt9_Any_dataOS0_OS1_OS2_SC_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 81057e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 81057ec:	b086      	sub	sp, #24
 81057ee:	af02      	add	r7, sp, #8
 81057f0:	60f8      	str	r0, [r7, #12]
 81057f2:	60b9      	str	r1, [r7, #8]
 81057f4:	607a      	str	r2, [r7, #4]
 81057f6:	603b      	str	r3, [r7, #0]
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
 81057f8:	68f8      	ldr	r0, [r7, #12]
 81057fa:	f000 f855 	bl	81058a8 <_ZNSt14_Function_base13_Base_managerIZN14DoIPDaemonTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E14_M_get_pointerERKSt9_Any_data>
 81057fe:	4604      	mov	r4, r0
 8105800:	68b8      	ldr	r0, [r7, #8]
 8105802:	f000 f861 	bl	81058c8 <_ZSt7forwardI10EEventTypeEOT_RNSt16remove_referenceIS1_E4typeE>
 8105806:	4605      	mov	r5, r0
 8105808:	6878      	ldr	r0, [r7, #4]
 810580a:	f000 f868 	bl	81058de <_ZSt7forwardI12UMessageDataEOT_RNSt16remove_referenceIS1_E4typeE>
 810580e:	4606      	mov	r6, r0
 8105810:	6838      	ldr	r0, [r7, #0]
 8105812:	f000 f86f 	bl	81058f4 <_ZSt7forwardI12EEventClientEOT_RNSt16remove_referenceIS1_E4typeE>
 8105816:	4680      	mov	r8, r0
 8105818:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 810581a:	f000 f86b 	bl	81058f4 <_ZSt7forwardI12EEventClientEOT_RNSt16remove_referenceIS1_E4typeE>
 810581e:	4603      	mov	r3, r0
 8105820:	9300      	str	r3, [sp, #0]
 8105822:	4643      	mov	r3, r8
 8105824:	4632      	mov	r2, r6
 8105826:	4629      	mov	r1, r5
 8105828:	4620      	mov	r0, r4
 810582a:	f000 f86e 	bl	810590a <_ZSt10__invoke_rIvRZN14DoIPDaemonTask7processEvEUl10EEventType12UMessageData12EEventClientS3_E_JS1_S2_S3_S3_EENSt9enable_ifIX16is_invocable_r_vIT_T0_DpT1_EES7_E4typeEOS8_DpOS9_>
				     std::forward<_ArgTypes>(__args)...);
 810582e:	bf00      	nop
      }
 8105830:	3710      	adds	r7, #16
 8105832:	46bd      	mov	sp, r7
 8105834:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08105838 <_ZNSt17_Function_handlerIFv10EEventType12UMessageData12EEventClientS2_EZN14DoIPDaemonTask7processEvEUlS0_S1_S2_S2_E_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 8105838:	b590      	push	{r4, r7, lr}
 810583a:	b085      	sub	sp, #20
 810583c:	af00      	add	r7, sp, #0
 810583e:	60f8      	str	r0, [r7, #12]
 8105840:	60b9      	str	r1, [r7, #8]
 8105842:	4613      	mov	r3, r2
 8105844:	71fb      	strb	r3, [r7, #7]
	switch (__op)
 8105846:	79fb      	ldrb	r3, [r7, #7]
 8105848:	2b01      	cmp	r3, #1
 810584a:	d109      	bne.n	8105860 <_ZNSt17_Function_handlerIFv10EEventType12UMessageData12EEventClientS2_EZN14DoIPDaemonTask7processEvEUlS0_S1_S2_S2_E_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x28>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 810584c:	68b8      	ldr	r0, [r7, #8]
 810584e:	f000 f82b 	bl	81058a8 <_ZNSt14_Function_base13_Base_managerIZN14DoIPDaemonTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E14_M_get_pointerERKSt9_Any_data>
 8105852:	4604      	mov	r4, r0
 8105854:	68f8      	ldr	r0, [r7, #12]
 8105856:	f000 f881 	bl	810595c <_ZNSt9_Any_data9_M_accessIPZN14DoIPDaemonTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_EERT_v>
 810585a:	4603      	mov	r3, r0
 810585c:	601c      	str	r4, [r3, #0]
	    break;
 810585e:	e005      	b.n	810586c <_ZNSt17_Function_handlerIFv10EEventType12UMessageData12EEventClientS2_EZN14DoIPDaemonTask7processEvEUlS0_S1_S2_S2_E_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x34>
	    _Base::_M_manager(__dest, __source, __op);
 8105860:	79fb      	ldrb	r3, [r7, #7]
 8105862:	461a      	mov	r2, r3
 8105864:	68b9      	ldr	r1, [r7, #8]
 8105866:	68f8      	ldr	r0, [r7, #12]
 8105868:	f000 f884 	bl	8105974 <_ZNSt14_Function_base13_Base_managerIZN14DoIPDaemonTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation>
	return false;
 810586c:	2300      	movs	r3, #0
      }
 810586e:	4618      	mov	r0, r3
 8105870:	3714      	adds	r7, #20
 8105872:	46bd      	mov	sp, r7
 8105874:	bd90      	pop	{r4, r7, pc}

08105876 <_ZNSt14_Function_base13_Base_managerIZN14DoIPDaemonTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E9_M_createIS5_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>:
	  _M_create(_Any_data& __dest, _Fn&& __f, true_type)
 8105876:	b590      	push	{r4, r7, lr}
 8105878:	b085      	sub	sp, #20
 810587a:	af00      	add	r7, sp, #0
 810587c:	60f8      	str	r0, [r7, #12]
 810587e:	60b9      	str	r1, [r7, #8]
 8105880:	713a      	strb	r2, [r7, #4]
	    ::new (__dest._M_access()) _Functor(std::forward<_Fn>(__f));
 8105882:	68f8      	ldr	r0, [r7, #12]
 8105884:	f7ff fb80 	bl	8104f88 <_ZNSt9_Any_data9_M_accessEv>
 8105888:	4603      	mov	r3, r0
 810588a:	4619      	mov	r1, r3
 810588c:	2004      	movs	r0, #4
 810588e:	f7fb fcfb 	bl	8101288 <_ZnwjPv>
 8105892:	4604      	mov	r4, r0
 8105894:	68b8      	ldr	r0, [r7, #8]
 8105896:	f7ff ff8a 	bl	81057ae <_ZSt7forwardIZN14DoIPDaemonTask7processEvEUl10EEventType12UMessageData12EEventClientS3_E_EOT_RNSt16remove_referenceIS5_E4typeE>
 810589a:	4603      	mov	r3, r0
 810589c:	681b      	ldr	r3, [r3, #0]
 810589e:	6023      	str	r3, [r4, #0]
	  }
 81058a0:	bf00      	nop
 81058a2:	3714      	adds	r7, #20
 81058a4:	46bd      	mov	sp, r7
 81058a6:	bd90      	pop	{r4, r7, pc}

081058a8 <_ZNSt14_Function_base13_Base_managerIZN14DoIPDaemonTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source) noexcept
 81058a8:	b580      	push	{r7, lr}
 81058aa:	b084      	sub	sp, #16
 81058ac:	af00      	add	r7, sp, #0
 81058ae:	6078      	str	r0, [r7, #4]
	      const _Functor& __f = __source._M_access<_Functor>();
 81058b0:	6878      	ldr	r0, [r7, #4]
 81058b2:	f000 f899 	bl	81059e8 <_ZNKSt9_Any_data9_M_accessIZN14DoIPDaemonTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_EERKT_v>
 81058b6:	60f8      	str	r0, [r7, #12]
	      return const_cast<_Functor*>(std::__addressof(__f));
 81058b8:	68f8      	ldr	r0, [r7, #12]
 81058ba:	f000 f8a1 	bl	8105a00 <_ZSt11__addressofIKZN14DoIPDaemonTask7processEvEUl10EEventType12UMessageData12EEventClientS3_E_EPT_RS6_>
 81058be:	4603      	mov	r3, r0
	}
 81058c0:	4618      	mov	r0, r3
 81058c2:	3710      	adds	r7, #16
 81058c4:	46bd      	mov	sp, r7
 81058c6:	bd80      	pop	{r7, pc}

081058c8 <_ZSt7forwardI10EEventTypeEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 81058c8:	b480      	push	{r7}
 81058ca:	b083      	sub	sp, #12
 81058cc:	af00      	add	r7, sp, #0
 81058ce:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 81058d0:	687b      	ldr	r3, [r7, #4]
 81058d2:	4618      	mov	r0, r3
 81058d4:	370c      	adds	r7, #12
 81058d6:	46bd      	mov	sp, r7
 81058d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81058dc:	4770      	bx	lr

081058de <_ZSt7forwardI12UMessageDataEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 81058de:	b480      	push	{r7}
 81058e0:	b083      	sub	sp, #12
 81058e2:	af00      	add	r7, sp, #0
 81058e4:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 81058e6:	687b      	ldr	r3, [r7, #4]
 81058e8:	4618      	mov	r0, r3
 81058ea:	370c      	adds	r7, #12
 81058ec:	46bd      	mov	sp, r7
 81058ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 81058f2:	4770      	bx	lr

081058f4 <_ZSt7forwardI12EEventClientEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 81058f4:	b480      	push	{r7}
 81058f6:	b083      	sub	sp, #12
 81058f8:	af00      	add	r7, sp, #0
 81058fa:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 81058fc:	687b      	ldr	r3, [r7, #4]
 81058fe:	4618      	mov	r0, r3
 8105900:	370c      	adds	r7, #12
 8105902:	46bd      	mov	sp, r7
 8105904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105908:	4770      	bx	lr

0810590a <_ZSt10__invoke_rIvRZN14DoIPDaemonTask7processEvEUl10EEventType12UMessageData12EEventClientS3_E_JS1_S2_S3_S3_EENSt9enable_ifIX16is_invocable_r_vIT_T0_DpT1_EES7_E4typeEOS8_DpOS9_>:

#if __cplusplus >= 201703L
  // INVOKE<R>: Invoke a callable object and convert the result to R.
  template<typename _Res, typename _Callable, typename... _Args>
    constexpr enable_if_t<is_invocable_r_v<_Res, _Callable, _Args...>, _Res>
    __invoke_r(_Callable&& __fn, _Args&&... __args)
 810590a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 810590e:	b087      	sub	sp, #28
 8105910:	af02      	add	r7, sp, #8
 8105912:	60f8      	str	r0, [r7, #12]
 8105914:	60b9      	str	r1, [r7, #8]
 8105916:	607a      	str	r2, [r7, #4]
 8105918:	603b      	str	r3, [r7, #0]
    {
      using __result = __invoke_result<_Callable, _Args...>;
      using __type = typename __result::type;
      using __tag = typename __result::__invoke_type;
      if constexpr (is_void_v<_Res>)
	std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 810591a:	68f8      	ldr	r0, [r7, #12]
 810591c:	f000 f87b 	bl	8105a16 <_ZSt7forwardIRZN14DoIPDaemonTask7processEvEUl10EEventType12UMessageData12EEventClientS3_E_EOT_RNSt16remove_referenceIS6_E4typeE>
 8105920:	4605      	mov	r5, r0
 8105922:	68b8      	ldr	r0, [r7, #8]
 8105924:	f7ff ffd0 	bl	81058c8 <_ZSt7forwardI10EEventTypeEOT_RNSt16remove_referenceIS1_E4typeE>
 8105928:	4606      	mov	r6, r0
 810592a:	6878      	ldr	r0, [r7, #4]
 810592c:	f7ff ffd7 	bl	81058de <_ZSt7forwardI12UMessageDataEOT_RNSt16remove_referenceIS1_E4typeE>
 8105930:	4680      	mov	r8, r0
 8105932:	6838      	ldr	r0, [r7, #0]
 8105934:	f7ff ffde 	bl	81058f4 <_ZSt7forwardI12EEventClientEOT_RNSt16remove_referenceIS1_E4typeE>
 8105938:	4604      	mov	r4, r0
 810593a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 810593c:	f7ff ffda 	bl	81058f4 <_ZSt7forwardI12EEventClientEOT_RNSt16remove_referenceIS1_E4typeE>
 8105940:	4603      	mov	r3, r0
 8105942:	9301      	str	r3, [sp, #4]
 8105944:	9400      	str	r4, [sp, #0]
 8105946:	4643      	mov	r3, r8
 8105948:	4632      	mov	r2, r6
 810594a:	4629      	mov	r1, r5
 810594c:	4648      	mov	r0, r9
 810594e:	f000 f86d 	bl	8105a2c <_ZSt13__invoke_implIvRZN14DoIPDaemonTask7processEvEUl10EEventType12UMessageData12EEventClientS3_E_JS1_S2_S3_S3_EET_St14__invoke_otherOT0_DpOT1_>
					std::forward<_Args>(__args)...);
      else
	return std::__invoke_impl<__type>(__tag{},
					  std::forward<_Callable>(__fn),
					  std::forward<_Args>(__args)...);
    }
 8105952:	bf00      	nop
 8105954:	3714      	adds	r7, #20
 8105956:	46bd      	mov	sp, r7
 8105958:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0810595c <_ZNSt9_Any_data9_M_accessIPZN14DoIPDaemonTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_EERT_v>:
      _M_access() noexcept
 810595c:	b580      	push	{r7, lr}
 810595e:	b082      	sub	sp, #8
 8105960:	af00      	add	r7, sp, #0
 8105962:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8105964:	6878      	ldr	r0, [r7, #4]
 8105966:	f7ff fb0f 	bl	8104f88 <_ZNSt9_Any_data9_M_accessEv>
 810596a:	4603      	mov	r3, r0
 810596c:	4618      	mov	r0, r3
 810596e:	3708      	adds	r7, #8
 8105970:	46bd      	mov	sp, r7
 8105972:	bd80      	pop	{r7, pc}

08105974 <_ZNSt14_Function_base13_Base_managerIZN14DoIPDaemonTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 8105974:	b590      	push	{r4, r7, lr}
 8105976:	b085      	sub	sp, #20
 8105978:	af00      	add	r7, sp, #0
 810597a:	60f8      	str	r0, [r7, #12]
 810597c:	60b9      	str	r1, [r7, #8]
 810597e:	4613      	mov	r3, r2
 8105980:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
 8105982:	79fb      	ldrb	r3, [r7, #7]
 8105984:	2b03      	cmp	r3, #3
 8105986:	d82a      	bhi.n	81059de <_ZNSt14_Function_base13_Base_managerIZN14DoIPDaemonTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x6a>
 8105988:	a201      	add	r2, pc, #4	@ (adr r2, 8105990 <_ZNSt14_Function_base13_Base_managerIZN14DoIPDaemonTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x1c>)
 810598a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810598e:	bf00      	nop
 8105990:	081059a1 	.word	0x081059a1
 8105994:	081059af 	.word	0x081059af
 8105998:	081059c3 	.word	0x081059c3
 810599c:	081059d5 	.word	0x081059d5
	      __dest._M_access<const type_info*>() = nullptr;
 81059a0:	68f8      	ldr	r0, [r7, #12]
 81059a2:	f000 f876 	bl	8105a92 <_ZNSt9_Any_data9_M_accessIPKSt9type_infoEERT_v>
 81059a6:	4603      	mov	r3, r0
 81059a8:	2200      	movs	r2, #0
 81059aa:	601a      	str	r2, [r3, #0]
	      break;
 81059ac:	e017      	b.n	81059de <_ZNSt14_Function_base13_Base_managerIZN14DoIPDaemonTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x6a>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 81059ae:	68b8      	ldr	r0, [r7, #8]
 81059b0:	f7ff ff7a 	bl	81058a8 <_ZNSt14_Function_base13_Base_managerIZN14DoIPDaemonTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E14_M_get_pointerERKSt9_Any_data>
 81059b4:	4604      	mov	r4, r0
 81059b6:	68f8      	ldr	r0, [r7, #12]
 81059b8:	f7ff ffd0 	bl	810595c <_ZNSt9_Any_data9_M_accessIPZN14DoIPDaemonTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_EERT_v>
 81059bc:	4603      	mov	r3, r0
 81059be:	601c      	str	r4, [r3, #0]
	      break;
 81059c0:	e00d      	b.n	81059de <_ZNSt14_Function_base13_Base_managerIZN14DoIPDaemonTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x6a>
		  *const_cast<const _Functor*>(_M_get_pointer(__source)));
 81059c2:	68b8      	ldr	r0, [r7, #8]
 81059c4:	f7ff ff70 	bl	81058a8 <_ZNSt14_Function_base13_Base_managerIZN14DoIPDaemonTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E14_M_get_pointerERKSt9_Any_data>
 81059c8:	4603      	mov	r3, r0
	      _M_init_functor(__dest,
 81059ca:	4619      	mov	r1, r3
 81059cc:	68f8      	ldr	r0, [r7, #12]
 81059ce:	f000 f86c 	bl	8105aaa <_ZNSt14_Function_base13_Base_managerIZN14DoIPDaemonTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E15_M_init_functorIRKS5_EEvRSt9_Any_dataOT_>
	      break;
 81059d2:	e004      	b.n	81059de <_ZNSt14_Function_base13_Base_managerIZN14DoIPDaemonTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x6a>
	      _M_destroy(__dest, _Local_storage());
 81059d4:	4621      	mov	r1, r4
 81059d6:	68f8      	ldr	r0, [r7, #12]
 81059d8:	f000 f879 	bl	8105ace <_ZNSt14_Function_base13_Base_managerIZN14DoIPDaemonTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>
	      break;
 81059dc:	bf00      	nop
	  return false;
 81059de:	2300      	movs	r3, #0
	}
 81059e0:	4618      	mov	r0, r3
 81059e2:	3714      	adds	r7, #20
 81059e4:	46bd      	mov	sp, r7
 81059e6:	bd90      	pop	{r4, r7, pc}

081059e8 <_ZNKSt9_Any_data9_M_accessIZN14DoIPDaemonTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_EERKT_v>:
      _M_access() const noexcept
 81059e8:	b580      	push	{r7, lr}
 81059ea:	b082      	sub	sp, #8
 81059ec:	af00      	add	r7, sp, #0
 81059ee:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 81059f0:	6878      	ldr	r0, [r7, #4]
 81059f2:	f7ff fad4 	bl	8104f9e <_ZNKSt9_Any_data9_M_accessEv>
 81059f6:	4603      	mov	r3, r0
 81059f8:	4618      	mov	r0, r3
 81059fa:	3708      	adds	r7, #8
 81059fc:	46bd      	mov	sp, r7
 81059fe:	bd80      	pop	{r7, pc}

08105a00 <_ZSt11__addressofIKZN14DoIPDaemonTask7processEvEUl10EEventType12UMessageData12EEventClientS3_E_EPT_RS6_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8105a00:	b480      	push	{r7}
 8105a02:	b083      	sub	sp, #12
 8105a04:	af00      	add	r7, sp, #0
 8105a06:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8105a08:	687b      	ldr	r3, [r7, #4]
 8105a0a:	4618      	mov	r0, r3
 8105a0c:	370c      	adds	r7, #12
 8105a0e:	46bd      	mov	sp, r7
 8105a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105a14:	4770      	bx	lr

08105a16 <_ZSt7forwardIRZN14DoIPDaemonTask7processEvEUl10EEventType12UMessageData12EEventClientS3_E_EOT_RNSt16remove_referenceIS6_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8105a16:	b480      	push	{r7}
 8105a18:	b083      	sub	sp, #12
 8105a1a:	af00      	add	r7, sp, #0
 8105a1c:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8105a1e:	687b      	ldr	r3, [r7, #4]
 8105a20:	4618      	mov	r0, r3
 8105a22:	370c      	adds	r7, #12
 8105a24:	46bd      	mov	sp, r7
 8105a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105a2a:	4770      	bx	lr

08105a2c <_ZSt13__invoke_implIvRZN14DoIPDaemonTask7processEvEUl10EEventType12UMessageData12EEventClientS3_E_JS1_S2_S3_S3_EET_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 8105a2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8105a30:	b08a      	sub	sp, #40	@ 0x28
 8105a32:	af06      	add	r7, sp, #24
 8105a34:	7338      	strb	r0, [r7, #12]
 8105a36:	60b9      	str	r1, [r7, #8]
 8105a38:	607a      	str	r2, [r7, #4]
 8105a3a:	603b      	str	r3, [r7, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 8105a3c:	68b8      	ldr	r0, [r7, #8]
 8105a3e:	f7ff ffea 	bl	8105a16 <_ZSt7forwardIRZN14DoIPDaemonTask7processEvEUl10EEventType12UMessageData12EEventClientS3_E_EOT_RNSt16remove_referenceIS6_E4typeE>
 8105a42:	4680      	mov	r8, r0
 8105a44:	6878      	ldr	r0, [r7, #4]
 8105a46:	f7ff ff3f 	bl	81058c8 <_ZSt7forwardI10EEventTypeEOT_RNSt16remove_referenceIS1_E4typeE>
 8105a4a:	4603      	mov	r3, r0
 8105a4c:	781e      	ldrb	r6, [r3, #0]
 8105a4e:	6838      	ldr	r0, [r7, #0]
 8105a50:	f7ff ff45 	bl	81058de <_ZSt7forwardI12UMessageDataEOT_RNSt16remove_referenceIS1_E4typeE>
 8105a54:	4604      	mov	r4, r0
 8105a56:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8105a58:	f7ff ff4c 	bl	81058f4 <_ZSt7forwardI12EEventClientEOT_RNSt16remove_referenceIS1_E4typeE>
 8105a5c:	4603      	mov	r3, r0
 8105a5e:	781d      	ldrb	r5, [r3, #0]
 8105a60:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8105a62:	f7ff ff47 	bl	81058f4 <_ZSt7forwardI12EEventClientEOT_RNSt16remove_referenceIS1_E4typeE>
 8105a66:	4603      	mov	r3, r0
 8105a68:	781b      	ldrb	r3, [r3, #0]
 8105a6a:	9304      	str	r3, [sp, #16]
 8105a6c:	9503      	str	r5, [sp, #12]
 8105a6e:	466d      	mov	r5, sp
 8105a70:	f104 0308 	add.w	r3, r4, #8
 8105a74:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8105a78:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8105a7c:	e894 000c 	ldmia.w	r4, {r2, r3}
 8105a80:	4631      	mov	r1, r6
 8105a82:	4640      	mov	r0, r8
 8105a84:	f7ff fb33 	bl	81050ee <_ZZN14DoIPDaemonTask7processEvENKUl10EEventType12UMessageData12EEventClientS2_E_clES0_S1_S2_S2_>
 8105a88:	bf00      	nop
 8105a8a:	3710      	adds	r7, #16
 8105a8c:	46bd      	mov	sp, r7
 8105a8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08105a92 <_ZNSt9_Any_data9_M_accessIPKSt9type_infoEERT_v>:
      _M_access() noexcept
 8105a92:	b580      	push	{r7, lr}
 8105a94:	b082      	sub	sp, #8
 8105a96:	af00      	add	r7, sp, #0
 8105a98:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8105a9a:	6878      	ldr	r0, [r7, #4]
 8105a9c:	f7ff fa74 	bl	8104f88 <_ZNSt9_Any_data9_M_accessEv>
 8105aa0:	4603      	mov	r3, r0
 8105aa2:	4618      	mov	r0, r3
 8105aa4:	3708      	adds	r7, #8
 8105aa6:	46bd      	mov	sp, r7
 8105aa8:	bd80      	pop	{r7, pc}

08105aaa <_ZNSt14_Function_base13_Base_managerIZN14DoIPDaemonTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E15_M_init_functorIRKS5_EEvRSt9_Any_dataOT_>:
	  _M_init_functor(_Any_data& __functor, _Fn&& __f)
 8105aaa:	b590      	push	{r4, r7, lr}
 8105aac:	b083      	sub	sp, #12
 8105aae:	af00      	add	r7, sp, #0
 8105ab0:	6078      	str	r0, [r7, #4]
 8105ab2:	6039      	str	r1, [r7, #0]
	    _M_create(__functor, std::forward<_Fn>(__f), _Local_storage());
 8105ab4:	6838      	ldr	r0, [r7, #0]
 8105ab6:	f000 f816 	bl	8105ae6 <_ZSt7forwardIRKZN14DoIPDaemonTask7processEvEUl10EEventType12UMessageData12EEventClientS3_E_EOT_RNSt16remove_referenceIS7_E4typeE>
 8105aba:	4603      	mov	r3, r0
 8105abc:	4622      	mov	r2, r4
 8105abe:	4619      	mov	r1, r3
 8105ac0:	6878      	ldr	r0, [r7, #4]
 8105ac2:	f000 f81b 	bl	8105afc <_ZNSt14_Function_base13_Base_managerIZN14DoIPDaemonTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E9_M_createIRKS5_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>
	  }
 8105ac6:	bf00      	nop
 8105ac8:	370c      	adds	r7, #12
 8105aca:	46bd      	mov	sp, r7
 8105acc:	bd90      	pop	{r4, r7, pc}

08105ace <_ZNSt14_Function_base13_Base_managerIZN14DoIPDaemonTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>:
	_M_destroy(_Any_data& __victim, true_type)
 8105ace:	b580      	push	{r7, lr}
 8105ad0:	b082      	sub	sp, #8
 8105ad2:	af00      	add	r7, sp, #0
 8105ad4:	6078      	str	r0, [r7, #4]
 8105ad6:	7039      	strb	r1, [r7, #0]
	  __victim._M_access<_Functor>().~_Functor();
 8105ad8:	6878      	ldr	r0, [r7, #4]
 8105ada:	f000 f828 	bl	8105b2e <_ZNSt9_Any_data9_M_accessIZN14DoIPDaemonTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_EERT_v>
	}
 8105ade:	bf00      	nop
 8105ae0:	3708      	adds	r7, #8
 8105ae2:	46bd      	mov	sp, r7
 8105ae4:	bd80      	pop	{r7, pc}

08105ae6 <_ZSt7forwardIRKZN14DoIPDaemonTask7processEvEUl10EEventType12UMessageData12EEventClientS3_E_EOT_RNSt16remove_referenceIS7_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8105ae6:	b480      	push	{r7}
 8105ae8:	b083      	sub	sp, #12
 8105aea:	af00      	add	r7, sp, #0
 8105aec:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8105aee:	687b      	ldr	r3, [r7, #4]
 8105af0:	4618      	mov	r0, r3
 8105af2:	370c      	adds	r7, #12
 8105af4:	46bd      	mov	sp, r7
 8105af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105afa:	4770      	bx	lr

08105afc <_ZNSt14_Function_base13_Base_managerIZN14DoIPDaemonTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E9_M_createIRKS5_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>:
	  _M_create(_Any_data& __dest, _Fn&& __f, true_type)
 8105afc:	b590      	push	{r4, r7, lr}
 8105afe:	b085      	sub	sp, #20
 8105b00:	af00      	add	r7, sp, #0
 8105b02:	60f8      	str	r0, [r7, #12]
 8105b04:	60b9      	str	r1, [r7, #8]
 8105b06:	713a      	strb	r2, [r7, #4]
	    ::new (__dest._M_access()) _Functor(std::forward<_Fn>(__f));
 8105b08:	68f8      	ldr	r0, [r7, #12]
 8105b0a:	f7ff fa3d 	bl	8104f88 <_ZNSt9_Any_data9_M_accessEv>
 8105b0e:	4603      	mov	r3, r0
 8105b10:	4619      	mov	r1, r3
 8105b12:	2004      	movs	r0, #4
 8105b14:	f7fb fbb8 	bl	8101288 <_ZnwjPv>
 8105b18:	4604      	mov	r4, r0
 8105b1a:	68b8      	ldr	r0, [r7, #8]
 8105b1c:	f7ff ffe3 	bl	8105ae6 <_ZSt7forwardIRKZN14DoIPDaemonTask7processEvEUl10EEventType12UMessageData12EEventClientS3_E_EOT_RNSt16remove_referenceIS7_E4typeE>
 8105b20:	4603      	mov	r3, r0
 8105b22:	681b      	ldr	r3, [r3, #0]
 8105b24:	6023      	str	r3, [r4, #0]
	  }
 8105b26:	bf00      	nop
 8105b28:	3714      	adds	r7, #20
 8105b2a:	46bd      	mov	sp, r7
 8105b2c:	bd90      	pop	{r4, r7, pc}

08105b2e <_ZNSt9_Any_data9_M_accessIZN14DoIPDaemonTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_EERT_v>:
      _M_access() noexcept
 8105b2e:	b580      	push	{r7, lr}
 8105b30:	b082      	sub	sp, #8
 8105b32:	af00      	add	r7, sp, #0
 8105b34:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8105b36:	6878      	ldr	r0, [r7, #4]
 8105b38:	f7ff fa26 	bl	8104f88 <_ZNSt9_Any_data9_M_accessEv>
 8105b3c:	4603      	mov	r3, r0
 8105b3e:	4618      	mov	r0, r3
 8105b40:	3708      	adds	r7, #8
 8105b42:	46bd      	mov	sp, r7
 8105b44:	bd80      	pop	{r7, pc}
	...

08105b48 <_Z41__static_initialization_and_destruction_0ii>:
 8105b48:	b580      	push	{r7, lr}
 8105b4a:	b094      	sub	sp, #80	@ 0x50
 8105b4c:	af04      	add	r7, sp, #16
 8105b4e:	6078      	str	r0, [r7, #4]
 8105b50:	6039      	str	r1, [r7, #0]
 8105b52:	687b      	ldr	r3, [r7, #4]
 8105b54:	2b01      	cmp	r3, #1
 8105b56:	d142      	bne.n	8105bde <_Z41__static_initialization_and_destruction_0ii+0x96>
 8105b58:	683b      	ldr	r3, [r7, #0]
 8105b5a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8105b5e:	4293      	cmp	r3, r2
 8105b60:	d13d      	bne.n	8105bde <_Z41__static_initialization_and_destruction_0ii+0x96>
        ACCELERATION = EVENT_DATA_UPDATE_ACCELERATION,
        OIL_TEMPERATURE = EVENT_DATA_UPDATE_OIL_TEMPERATURE,
        ECU_DATA_END = EVENT_DATA_UPDATE_END
    };

    const std::unordered_map<EDoIPRequest, std::pair<std::variant<EUDSDID, EDynamicDataIndentifierRequestCode>, EECUAddress>> dataIdentifierMap =
 8105b62:	f107 0314 	add.w	r3, r7, #20
 8105b66:	2220      	movs	r2, #32
 8105b68:	2100      	movs	r1, #0
 8105b6a:	4618      	mov	r0, r3
 8105b6c:	f01e f996 	bl	8123e9c <memset>
 8105b70:	4b22      	ldr	r3, [pc, #136]	@ (8105bfc <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 8105b72:	61bb      	str	r3, [r7, #24]
 8105b74:	2301      	movs	r3, #1
 8105b76:	773b      	strb	r3, [r7, #28]
 8105b78:	2312      	movs	r3, #18
 8105b7a:	f887 3020 	strb.w	r3, [r7, #32]
 8105b7e:	2315      	movs	r3, #21
 8105b80:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
 8105b84:	f24d 1306 	movw	r3, #53510	@ 0xd106
 8105b88:	853b      	strh	r3, [r7, #40]	@ 0x28
 8105b8a:	2360      	movs	r3, #96	@ 0x60
 8105b8c:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
 8105b90:	f107 0314 	add.w	r3, r7, #20
 8105b94:	60fb      	str	r3, [r7, #12]
 8105b96:	2302      	movs	r3, #2
 8105b98:	613b      	str	r3, [r7, #16]
 8105b9a:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8105b9e:	4618      	mov	r0, r3
 8105ba0:	f7fb fdda 	bl	8101758 <_ZNSaISt4pairIKN7APIDoIP12EDoIPRequestES_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEEEC1Ev>
 8105ba4:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8105ba8:	9302      	str	r3, [sp, #8]
 8105baa:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8105bae:	9301      	str	r3, [sp, #4]
 8105bb0:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8105bb4:	9300      	str	r3, [sp, #0]
 8105bb6:	2300      	movs	r3, #0
 8105bb8:	f107 020c 	add.w	r2, r7, #12
 8105bbc:	ca06      	ldmia	r2, {r1, r2}
 8105bbe:	4810      	ldr	r0, [pc, #64]	@ (8105c00 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 8105bc0:	f7fb fde1 	bl	8101786 <_ZNSt13unordered_mapIN7APIDoIP12EDoIPRequestESt4pairISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressESt4hashIS1_ESt8equal_toIS1_ESaIS2_IKS1_S8_EEEC1ESt16initializer_listISE_EjRKSA_RKSC_RKSF_>
 8105bc4:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8105bc8:	4618      	mov	r0, r3
 8105bca:	f7fb fdd1 	bl	8101770 <_ZNSaISt4pairIKN7APIDoIP12EDoIPRequestES_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEEED1Ev>
QueueHandle_t connectionEventsQueue = xQueueCreate(16, sizeof(SMessage));
 8105bce:	2200      	movs	r2, #0
 8105bd0:	211c      	movs	r1, #28
 8105bd2:	2010      	movs	r0, #16
 8105bd4:	f00e f909 	bl	8113dea <xQueueGenericCreate>
 8105bd8:	4603      	mov	r3, r0
 8105bda:	4a0a      	ldr	r2, [pc, #40]	@ (8105c04 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 8105bdc:	6013      	str	r3, [r2, #0]
 8105bde:	687b      	ldr	r3, [r7, #4]
 8105be0:	2b00      	cmp	r3, #0
 8105be2:	d107      	bne.n	8105bf4 <_Z41__static_initialization_and_destruction_0ii+0xac>
 8105be4:	683b      	ldr	r3, [r7, #0]
 8105be6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8105bea:	4293      	cmp	r3, r2
 8105bec:	d102      	bne.n	8105bf4 <_Z41__static_initialization_and_destruction_0ii+0xac>
 8105bee:	4804      	ldr	r0, [pc, #16]	@ (8105c00 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 8105bf0:	f7fd f8ae 	bl	8102d50 <_ZNSt13unordered_mapIN7APIDoIP12EDoIPRequestESt4pairISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressESt4hashIS1_ESt8equal_toIS1_ESaIS2_IKS1_S8_EEED1Ev>
}
 8105bf4:	bf00      	nop
 8105bf6:	3740      	adds	r7, #64	@ 0x40
 8105bf8:	46bd      	mov	sp, r7
 8105bfa:	bd80      	pop	{r7, pc}
 8105bfc:	46090101 	.word	0x46090101
 8105c00:	10000278 	.word	0x10000278
 8105c04:	10000294 	.word	0x10000294

08105c08 <_GLOBAL__sub_I_connectionEventsQueue>:
 8105c08:	b580      	push	{r7, lr}
 8105c0a:	af00      	add	r7, sp, #0
 8105c0c:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8105c10:	2001      	movs	r0, #1
 8105c12:	f7ff ff99 	bl	8105b48 <_Z41__static_initialization_and_destruction_0ii>
 8105c16:	bd80      	pop	{r7, pc}

08105c18 <_GLOBAL__sub_D_connectionEventsQueue>:
 8105c18:	b580      	push	{r7, lr}
 8105c1a:	af00      	add	r7, sp, #0
 8105c1c:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8105c20:	2000      	movs	r0, #0
 8105c22:	f7ff ff91 	bl	8105b48 <_Z41__static_initialization_and_destruction_0ii>
 8105c26:	bd80      	pop	{r7, pc}

08105c28 <_ZNKSt14_Function_base8_M_emptyEv>:
    bool _M_empty() const { return !_M_manager; }
 8105c28:	b480      	push	{r7}
 8105c2a:	b083      	sub	sp, #12
 8105c2c:	af00      	add	r7, sp, #0
 8105c2e:	6078      	str	r0, [r7, #4]
 8105c30:	687b      	ldr	r3, [r7, #4]
 8105c32:	689b      	ldr	r3, [r3, #8]
 8105c34:	2b00      	cmp	r3, #0
 8105c36:	bf0c      	ite	eq
 8105c38:	2301      	moveq	r3, #1
 8105c3a:	2300      	movne	r3, #0
 8105c3c:	b2db      	uxtb	r3, r3
 8105c3e:	4618      	mov	r0, r3
 8105c40:	370c      	adds	r7, #12
 8105c42:	46bd      	mov	sp, r7
 8105c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105c48:	4770      	bx	lr
	...

08105c4c <_ZN8EventBusC1EP15QueueDefinition12EEventClient>:
#include "EventBus.h"

extern QueueHandle_t queueToEventManagerCM4;

EventBus::EventBus(QueueHandle_t queueSelf, EEventClient senderSelf)
 8105c4c:	b480      	push	{r7}
 8105c4e:	b085      	sub	sp, #20
 8105c50:	af00      	add	r7, sp, #0
 8105c52:	60f8      	str	r0, [r7, #12]
 8105c54:	60b9      	str	r1, [r7, #8]
 8105c56:	4613      	mov	r3, r2
 8105c58:	71fb      	strb	r3, [r7, #7]
					 : queue_self(queueSelf),
 8105c5a:	68fb      	ldr	r3, [r7, #12]
 8105c5c:	68ba      	ldr	r2, [r7, #8]
 8105c5e:	601a      	str	r2, [r3, #0]
					   sender_self(senderSelf),
 8105c60:	68fb      	ldr	r3, [r7, #12]
 8105c62:	79fa      	ldrb	r2, [r7, #7]
 8105c64:	711a      	strb	r2, [r3, #4]
					   queue_event_manager(queueToEventManagerCM4){}
 8105c66:	4b05      	ldr	r3, [pc, #20]	@ (8105c7c <_ZN8EventBusC1EP15QueueDefinition12EEventClient+0x30>)
 8105c68:	681a      	ldr	r2, [r3, #0]
 8105c6a:	68fb      	ldr	r3, [r7, #12]
 8105c6c:	609a      	str	r2, [r3, #8]
 8105c6e:	68fb      	ldr	r3, [r7, #12]
 8105c70:	4618      	mov	r0, r3
 8105c72:	3714      	adds	r7, #20
 8105c74:	46bd      	mov	sp, r7
 8105c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105c7a:	4770      	bx	lr
 8105c7c:	100001cc 	.word	0x100001cc

08105c80 <_ZN8EventBus4sendE10EEventType12UMessageData12EEventClient>:

bool EventBus::send(EEventType event, UMessageData message, EEventClient eventReceiver)
{
 8105c80:	b082      	sub	sp, #8
 8105c82:	b5b0      	push	{r4, r5, r7, lr}
 8105c84:	b08a      	sub	sp, #40	@ 0x28
 8105c86:	af00      	add	r7, sp, #0
 8105c88:	6078      	str	r0, [r7, #4]
 8105c8a:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 8105c8e:	e880 000c 	stmia.w	r0, {r2, r3}
 8105c92:	460b      	mov	r3, r1
 8105c94:	70fb      	strb	r3, [r7, #3]
	if(queue_event_manager)
 8105c96:	687b      	ldr	r3, [r7, #4]
 8105c98:	689b      	ldr	r3, [r3, #8]
 8105c9a:	2b00      	cmp	r3, #0
 8105c9c:	d021      	beq.n	8105ce2 <_ZN8EventBus4sendE10EEventType12UMessageData12EEventClient+0x62>
	{
		SMessage msg = {event, message, sender_self, eventReceiver};
 8105c9e:	78fb      	ldrb	r3, [r7, #3]
 8105ca0:	723b      	strb	r3, [r7, #8]
 8105ca2:	f107 040c 	add.w	r4, r7, #12
 8105ca6:	f107 0538 	add.w	r5, r7, #56	@ 0x38
 8105caa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8105cac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8105cae:	682b      	ldr	r3, [r5, #0]
 8105cb0:	6023      	str	r3, [r4, #0]
 8105cb2:	687b      	ldr	r3, [r7, #4]
 8105cb4:	791b      	ldrb	r3, [r3, #4]
 8105cb6:	f887 3020 	strb.w	r3, [r7, #32]
 8105cba:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8105cbe:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
		BaseType_t ret = xQueueSend(queue_event_manager, static_cast<void*>(&msg), static_cast<TickType_t>(10));
 8105cc2:	687b      	ldr	r3, [r7, #4]
 8105cc4:	6898      	ldr	r0, [r3, #8]
 8105cc6:	f107 0108 	add.w	r1, r7, #8
 8105cca:	2300      	movs	r3, #0
 8105ccc:	220a      	movs	r2, #10
 8105cce:	f00e fa11 	bl	81140f4 <xQueueGenericSend>
 8105cd2:	6278      	str	r0, [r7, #36]	@ 0x24
		if( ret != pdPASS)
 8105cd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8105cd6:	2b01      	cmp	r3, #1
 8105cd8:	d001      	beq.n	8105cde <_ZN8EventBus4sendE10EEventType12UMessageData12EEventClient+0x5e>
		{
			return false;
 8105cda:	2300      	movs	r3, #0
 8105cdc:	e002      	b.n	8105ce4 <_ZN8EventBus4sendE10EEventType12UMessageData12EEventClient+0x64>
		}
		return true;
 8105cde:	2301      	movs	r3, #1
 8105ce0:	e000      	b.n	8105ce4 <_ZN8EventBus4sendE10EEventType12UMessageData12EEventClient+0x64>
	}
	return false;
 8105ce2:	2300      	movs	r3, #0
}
 8105ce4:	4618      	mov	r0, r3
 8105ce6:	3728      	adds	r7, #40	@ 0x28
 8105ce8:	46bd      	mov	sp, r7
 8105cea:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8105cee:	b002      	add	sp, #8
 8105cf0:	4770      	bx	lr

08105cf2 <_ZN8EventBus7receiveESt8functionIFv10EEventType12UMessageData12EEventClientS3_EE>:

void EventBus::receive(OnEventFunction on_event_function)
{
 8105cf2:	b5b0      	push	{r4, r5, r7, lr}
 8105cf4:	b090      	sub	sp, #64	@ 0x40
 8105cf6:	af06      	add	r7, sp, #24
 8105cf8:	6078      	str	r0, [r7, #4]
 8105cfa:	6039      	str	r1, [r7, #0]
	if(queue_self)
 8105cfc:	687b      	ldr	r3, [r7, #4]
 8105cfe:	681b      	ldr	r3, [r3, #0]
 8105d00:	2b00      	cmp	r3, #0
 8105d02:	d025      	beq.n	8105d50 <_ZN8EventBus7receiveESt8functionIFv10EEventType12UMessageData12EEventClientS3_EE+0x5e>
	{
		SMessage msg;

		while(xQueueReceive(queue_self, &(msg), static_cast<TickType_t>(0)) == pdTRUE)
 8105d04:	e014      	b.n	8105d30 <_ZN8EventBus7receiveESt8functionIFv10EEventType12UMessageData12EEventClientS3_EE+0x3e>
		{
			on_event_function(msg.event_type, msg.message_data, msg.event_sender, msg.event_receiver);
 8105d06:	7b3d      	ldrb	r5, [r7, #12]
 8105d08:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8105d0c:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 8105d10:	9204      	str	r2, [sp, #16]
 8105d12:	9303      	str	r3, [sp, #12]
 8105d14:	466c      	mov	r4, sp
 8105d16:	f107 0318 	add.w	r3, r7, #24
 8105d1a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8105d1e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8105d22:	f107 0310 	add.w	r3, r7, #16
 8105d26:	cb0c      	ldmia	r3, {r2, r3}
 8105d28:	4629      	mov	r1, r5
 8105d2a:	6838      	ldr	r0, [r7, #0]
 8105d2c:	f000 f814 	bl	8105d58 <_ZNKSt8functionIFv10EEventType12UMessageData12EEventClientS2_EEclES0_S1_S2_S2_>
		while(xQueueReceive(queue_self, &(msg), static_cast<TickType_t>(0)) == pdTRUE)
 8105d30:	687b      	ldr	r3, [r7, #4]
 8105d32:	681b      	ldr	r3, [r3, #0]
 8105d34:	f107 010c 	add.w	r1, r7, #12
 8105d38:	2200      	movs	r2, #0
 8105d3a:	4618      	mov	r0, r3
 8105d3c:	f00e fc0a 	bl	8114554 <xQueueReceive>
 8105d40:	4603      	mov	r3, r0
 8105d42:	2b01      	cmp	r3, #1
 8105d44:	bf0c      	ite	eq
 8105d46:	2301      	moveq	r3, #1
 8105d48:	2300      	movne	r3, #0
 8105d4a:	b2db      	uxtb	r3, r3
 8105d4c:	2b00      	cmp	r3, #0
 8105d4e:	d1da      	bne.n	8105d06 <_ZN8EventBus7receiveESt8functionIFv10EEventType12UMessageData12EEventClientS3_EE+0x14>
		}
	}
}
 8105d50:	bf00      	nop
 8105d52:	3728      	adds	r7, #40	@ 0x28
 8105d54:	46bd      	mov	sp, r7
 8105d56:	bdb0      	pop	{r4, r5, r7, pc}

08105d58 <_ZNKSt8functionIFv10EEventType12UMessageData12EEventClientS2_EEclES0_S1_S2_S2_>:
       *
       *  The function call operator invokes the target function object
       *  stored by `this`.
       */
      _Res
      operator()(_ArgTypes... __args) const
 8105d58:	b082      	sub	sp, #8
 8105d5a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8105d5e:	b085      	sub	sp, #20
 8105d60:	af02      	add	r7, sp, #8
 8105d62:	6078      	str	r0, [r7, #4]
 8105d64:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 8105d68:	e880 000c 	stmia.w	r0, {r2, r3}
 8105d6c:	460b      	mov	r3, r1
 8105d6e:	70fb      	strb	r3, [r7, #3]
      {
	if (_M_empty())
 8105d70:	687b      	ldr	r3, [r7, #4]
 8105d72:	4618      	mov	r0, r3
 8105d74:	f7ff ff58 	bl	8105c28 <_ZNKSt14_Function_base8_M_emptyEv>
 8105d78:	4603      	mov	r3, r0
 8105d7a:	2b00      	cmp	r3, #0
 8105d7c:	d001      	beq.n	8105d82 <_ZNKSt8functionIFv10EEventType12UMessageData12EEventClientS2_EEclES0_S1_S2_S2_+0x2a>
	  __throw_bad_function_call();
 8105d7e:	f01c ffcb 	bl	8122d18 <_ZSt25__throw_bad_function_callv>
	return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8105d82:	687b      	ldr	r3, [r7, #4]
 8105d84:	68dc      	ldr	r4, [r3, #12]
 8105d86:	687d      	ldr	r5, [r7, #4]
 8105d88:	1cfb      	adds	r3, r7, #3
 8105d8a:	4618      	mov	r0, r3
 8105d8c:	f7ff fd9c 	bl	81058c8 <_ZSt7forwardI10EEventTypeEOT_RNSt16remove_referenceIS1_E4typeE>
 8105d90:	4606      	mov	r6, r0
 8105d92:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 8105d96:	f7ff fda2 	bl	81058de <_ZSt7forwardI12UMessageDataEOT_RNSt16remove_referenceIS1_E4typeE>
 8105d9a:	4680      	mov	r8, r0
 8105d9c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8105da0:	4618      	mov	r0, r3
 8105da2:	f7ff fda7 	bl	81058f4 <_ZSt7forwardI12EEventClientEOT_RNSt16remove_referenceIS1_E4typeE>
 8105da6:	4681      	mov	r9, r0
 8105da8:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8105dac:	4618      	mov	r0, r3
 8105dae:	f7ff fda1 	bl	81058f4 <_ZSt7forwardI12EEventClientEOT_RNSt16remove_referenceIS1_E4typeE>
 8105db2:	4603      	mov	r3, r0
 8105db4:	9300      	str	r3, [sp, #0]
 8105db6:	464b      	mov	r3, r9
 8105db8:	4642      	mov	r2, r8
 8105dba:	4631      	mov	r1, r6
 8105dbc:	4628      	mov	r0, r5
 8105dbe:	47a0      	blx	r4
 8105dc0:	bf00      	nop
      }
 8105dc2:	370c      	adds	r7, #12
 8105dc4:	46bd      	mov	sp, r7
 8105dc6:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8105dca:	b002      	add	sp, #8
 8105dcc:	4770      	bx	lr

08105dce <_ZSt21is_constant_evaluatedv>:

  /// Returns true only when called during constant evaluation.
  /// @since C++20
  constexpr inline bool
  is_constant_evaluated() noexcept
  {
 8105dce:	b480      	push	{r7}
 8105dd0:	af00      	add	r7, sp, #0
#if __cpp_if_consteval >= 202106L
    if consteval { return true; } else { return false; }
#else
    return __builtin_is_constant_evaluated();
 8105dd2:	2300      	movs	r3, #0
#endif
  }
 8105dd4:	4618      	mov	r0, r3
 8105dd6:	46bd      	mov	sp, r7
 8105dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105ddc:	4770      	bx	lr

08105dde <_ZNSt15_Rb_tree_headerC1Ev>:
  struct _Rb_tree_header
  {
    _Rb_tree_node_base	_M_header;
    size_t		_M_node_count; // Keeps track of size of tree.

    _Rb_tree_header() _GLIBCXX_NOEXCEPT
 8105dde:	b580      	push	{r7, lr}
 8105de0:	b082      	sub	sp, #8
 8105de2:	af00      	add	r7, sp, #0
 8105de4:	6078      	str	r0, [r7, #4]
    {
      _M_header._M_color = _S_red;
 8105de6:	687b      	ldr	r3, [r7, #4]
 8105de8:	2200      	movs	r2, #0
 8105dea:	701a      	strb	r2, [r3, #0]
      _M_reset();
 8105dec:	6878      	ldr	r0, [r7, #4]
 8105dee:	f000 f805 	bl	8105dfc <_ZNSt15_Rb_tree_header8_M_resetEv>
    }
 8105df2:	687b      	ldr	r3, [r7, #4]
 8105df4:	4618      	mov	r0, r3
 8105df6:	3708      	adds	r7, #8
 8105df8:	46bd      	mov	sp, r7
 8105dfa:	bd80      	pop	{r7, pc}

08105dfc <_ZNSt15_Rb_tree_header8_M_resetEv>:

      __from._M_reset();
    }

    void
    _M_reset()
 8105dfc:	b480      	push	{r7}
 8105dfe:	b083      	sub	sp, #12
 8105e00:	af00      	add	r7, sp, #0
 8105e02:	6078      	str	r0, [r7, #4]
    {
      _M_header._M_parent = 0;
 8105e04:	687b      	ldr	r3, [r7, #4]
 8105e06:	2200      	movs	r2, #0
 8105e08:	605a      	str	r2, [r3, #4]
      _M_header._M_left = &_M_header;
 8105e0a:	687a      	ldr	r2, [r7, #4]
 8105e0c:	687b      	ldr	r3, [r7, #4]
 8105e0e:	609a      	str	r2, [r3, #8]
      _M_header._M_right = &_M_header;
 8105e10:	687a      	ldr	r2, [r7, #4]
 8105e12:	687b      	ldr	r3, [r7, #4]
 8105e14:	60da      	str	r2, [r3, #12]
      _M_node_count = 0;
 8105e16:	687b      	ldr	r3, [r7, #4]
 8105e18:	2200      	movs	r2, #0
 8105e1a:	611a      	str	r2, [r3, #16]
    }
 8105e1c:	bf00      	nop
 8105e1e:	370c      	adds	r7, #12
 8105e20:	46bd      	mov	sp, r7
 8105e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105e26:	4770      	bx	lr

08105e28 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EEC1Ev>:
    public:
      // allocation/deallocation
#if __cplusplus < 201103L
      _Rb_tree() { }
#else
      _Rb_tree() = default;
 8105e28:	b580      	push	{r7, lr}
 8105e2a:	b082      	sub	sp, #8
 8105e2c:	af00      	add	r7, sp, #0
 8105e2e:	6078      	str	r0, [r7, #4]
 8105e30:	687b      	ldr	r3, [r7, #4]
 8105e32:	4618      	mov	r0, r3
 8105e34:	f000 f955 	bl	81060e2 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE13_Rb_tree_implISA_Lb1EEC1Ev>
 8105e38:	687b      	ldr	r3, [r7, #4]
 8105e3a:	4618      	mov	r0, r3
 8105e3c:	3708      	adds	r7, #8
 8105e3e:	46bd      	mov	sp, r7
 8105e40:	bd80      	pop	{r7, pc}

08105e42 <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEEC1Ev>:
       *  @brief  Default constructor creates no elements.
       */
#if __cplusplus < 201103L
      map() : _M_t() { }
#else
      map() = default;
 8105e42:	b580      	push	{r7, lr}
 8105e44:	b082      	sub	sp, #8
 8105e46:	af00      	add	r7, sp, #0
 8105e48:	6078      	str	r0, [r7, #4]
 8105e4a:	687b      	ldr	r3, [r7, #4]
 8105e4c:	4618      	mov	r0, r3
 8105e4e:	f7ff ffeb 	bl	8105e28 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EEC1Ev>
 8105e52:	687b      	ldr	r3, [r7, #4]
 8105e54:	4618      	mov	r0, r3
 8105e56:	3708      	adds	r7, #8
 8105e58:	46bd      	mov	sp, r7
 8105e5a:	bd80      	pop	{r7, pc}

08105e5c <_ZN19EventManagerCM4TaskC1Ev>:
		/* event queues of clients */
		EVENT_QUEUE_DAEMON_NATIVE = EVENT_CLIENT_DAEMON_NATIVE,
		EVENT_QUEUE_ETHERNET_CONNECTION_MANAGER = EVENT_CLIENT_ETHERNET_CONNECTION_MANAGER
	};

	EventManagerCM4Task() {};
 8105e5c:	b580      	push	{r7, lr}
 8105e5e:	b082      	sub	sp, #8
 8105e60:	af00      	add	r7, sp, #0
 8105e62:	6078      	str	r0, [r7, #4]
 8105e64:	687b      	ldr	r3, [r7, #4]
 8105e66:	4618      	mov	r0, r3
 8105e68:	f7ff ffeb 	bl	8105e42 <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEEC1Ev>
 8105e6c:	687b      	ldr	r3, [r7, #4]
 8105e6e:	4618      	mov	r0, r3
 8105e70:	3708      	adds	r7, #8
 8105e72:	46bd      	mov	sp, r7
 8105e74:	bd80      	pop	{r7, pc}
	...

08105e78 <_Z20StartTask_EventMgrM4Pv>:
extern QueueHandle_t queueToEventManagerCM4;
extern QueueHandle_t queueToNativeDaemon;
extern QueueHandle_t queueToDoIPDaemonTask;

void StartTask_EventMgrM4(void *argument)
{
 8105e78:	b580      	push	{r7, lr}
 8105e7a:	b088      	sub	sp, #32
 8105e7c:	af00      	add	r7, sp, #0
 8105e7e:	6078      	str	r0, [r7, #4]
	EventManagerCM4Task eventManagerInstance;
 8105e80:	f107 0308 	add.w	r3, r7, #8
 8105e84:	4618      	mov	r0, r3
 8105e86:	f7ff ffe9 	bl	8105e5c <_ZN19EventManagerCM4TaskC1Ev>
	eventManagerInstance.addQueue(EventManagerCM4Task::EVENT_QUEUE_DAEMON_NATIVE, queueToNativeDaemon);
 8105e8a:	4b0d      	ldr	r3, [pc, #52]	@ (8105ec0 <_Z20StartTask_EventMgrM4Pv+0x48>)
 8105e8c:	681a      	ldr	r2, [r3, #0]
 8105e8e:	f107 0308 	add.w	r3, r7, #8
 8105e92:	2107      	movs	r1, #7
 8105e94:	4618      	mov	r0, r3
 8105e96:	f000 f817 	bl	8105ec8 <_ZN19EventManagerCM4Task8addQueueENS_11EEventQueueEP15QueueDefinition>
	eventManagerInstance.addQueue(EventManagerCM4Task::EVENT_QUEUE_ETHERNET_CONNECTION_MANAGER, queueToDoIPDaemonTask);
 8105e9a:	4b0a      	ldr	r3, [pc, #40]	@ (8105ec4 <_Z20StartTask_EventMgrM4Pv+0x4c>)
 8105e9c:	681a      	ldr	r2, [r3, #0]
 8105e9e:	f107 0308 	add.w	r3, r7, #8
 8105ea2:	2103      	movs	r1, #3
 8105ea4:	4618      	mov	r0, r3
 8105ea6:	f000 f80f 	bl	8105ec8 <_ZN19EventManagerCM4Task8addQueueENS_11EEventQueueEP15QueueDefinition>

	for(;;)
	{
		eventManagerInstance.process();
 8105eaa:	f107 0308 	add.w	r3, r7, #8
 8105eae:	4618      	mov	r0, r3
 8105eb0:	f000 f81d 	bl	8105eee <_ZN19EventManagerCM4Task7processEv>
		osDelay(1);
 8105eb4:	2001      	movs	r0, #1
 8105eb6:	f00c fe0a 	bl	8112ace <osDelay>
		eventManagerInstance.process();
 8105eba:	bf00      	nop
 8105ebc:	e7f5      	b.n	8105eaa <_Z20StartTask_EventMgrM4Pv+0x32>
 8105ebe:	bf00      	nop
 8105ec0:	100001d0 	.word	0x100001d0
 8105ec4:	100001d4 	.word	0x100001d4

08105ec8 <_ZN19EventManagerCM4Task8addQueueENS_11EEventQueueEP15QueueDefinition>:
	}
}


void EventManagerCM4Task::addQueue(EEventQueue eventClient, QueueHandle_t queueHandle)
{
 8105ec8:	b580      	push	{r7, lr}
 8105eca:	b086      	sub	sp, #24
 8105ecc:	af00      	add	r7, sp, #0
 8105ece:	60f8      	str	r0, [r7, #12]
 8105ed0:	460b      	mov	r3, r1
 8105ed2:	607a      	str	r2, [r7, #4]
 8105ed4:	72fb      	strb	r3, [r7, #11]
	queue_handles.emplace(eventClient, queueHandle);
 8105ed6:	68f9      	ldr	r1, [r7, #12]
 8105ed8:	f107 0010 	add.w	r0, r7, #16
 8105edc:	1d3b      	adds	r3, r7, #4
 8105ede:	f107 020b 	add.w	r2, r7, #11
 8105ee2:	f000 f946 	bl	8106172 <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEE7emplaceIJRS1_RS3_EEES6_ISt17_Rb_tree_iteratorIS8_EbEDpOT_>
}
 8105ee6:	bf00      	nop
 8105ee8:	3718      	adds	r7, #24
 8105eea:	46bd      	mov	sp, r7
 8105eec:	bd80      	pop	{r7, pc}

08105eee <_ZN19EventManagerCM4Task7processEv>:
	queue_handles.erase(eventClient);
}


void EventManagerCM4Task::process()
{
 8105eee:	b580      	push	{r7, lr}
 8105ef0:	b086      	sub	sp, #24
 8105ef2:	af00      	add	r7, sp, #0
 8105ef4:	6078      	str	r0, [r7, #4]
	send(receive());
 8105ef6:	f107 030c 	add.w	r3, r7, #12
 8105efa:	6879      	ldr	r1, [r7, #4]
 8105efc:	4618      	mov	r0, r3
 8105efe:	f000 f81b 	bl	8105f38 <_ZN19EventManagerCM4Task7receiveEv>
 8105f02:	f107 030c 	add.w	r3, r7, #12
 8105f06:	4619      	mov	r1, r3
 8105f08:	6878      	ldr	r0, [r7, #4]
 8105f0a:	f000 f86e 	bl	8105fea <_ZN19EventManagerCM4Task4sendERKSt6vectorI8SMessageSaIS1_EE>
 8105f0e:	f107 030c 	add.w	r3, r7, #12
 8105f12:	4618      	mov	r0, r3
 8105f14:	f000 f9a8 	bl	8106268 <_ZNSt6vectorI8SMessageSaIS0_EED1Ev>
}
 8105f18:	bf00      	nop
 8105f1a:	3718      	adds	r7, #24
 8105f1c:	46bd      	mov	sp, r7
 8105f1e:	bd80      	pop	{r7, pc}

08105f20 <_ZNSt12_Vector_baseI8SMessageSaIS0_EE12_Vector_implD1Ev>:
	  _M_copy_data(__x);
	  __x._M_copy_data(__tmp);
	}
      };

      struct _Vector_impl
 8105f20:	b580      	push	{r7, lr}
 8105f22:	b082      	sub	sp, #8
 8105f24:	af00      	add	r7, sp, #0
 8105f26:	6078      	str	r0, [r7, #4]
 8105f28:	6878      	ldr	r0, [r7, #4]
 8105f2a:	f000 f9b8 	bl	810629e <_ZNSaI8SMessageED1Ev>
 8105f2e:	687b      	ldr	r3, [r7, #4]
 8105f30:	4618      	mov	r0, r3
 8105f32:	3708      	adds	r7, #8
 8105f34:	46bd      	mov	sp, r7
 8105f36:	bd80      	pop	{r7, pc}

08105f38 <_ZN19EventManagerCM4Task7receiveEv>:

std::vector<SMessage> EventManagerCM4Task::receive()
{
 8105f38:	b580      	push	{r7, lr}
 8105f3a:	b08a      	sub	sp, #40	@ 0x28
 8105f3c:	af00      	add	r7, sp, #0
 8105f3e:	6078      	str	r0, [r7, #4]
 8105f40:	6039      	str	r1, [r7, #0]
	std::vector<SMessage> receivedMessages;
 8105f42:	687b      	ldr	r3, [r7, #4]
 8105f44:	461a      	mov	r2, r3
 8105f46:	2300      	movs	r3, #0
 8105f48:	6013      	str	r3, [r2, #0]
 8105f4a:	6053      	str	r3, [r2, #4]
 8105f4c:	6093      	str	r3, [r2, #8]
	SMessage msg;

	BaseType_t ret = pdTRUE;
 8105f4e:	2301      	movs	r3, #1
 8105f50:	627b      	str	r3, [r7, #36]	@ 0x24
	do
	{
		ret = xQueueReceive(queueToEventManagerCM4, &(msg), static_cast<TickType_t>(0));
 8105f52:	4b0d      	ldr	r3, [pc, #52]	@ (8105f88 <_ZN19EventManagerCM4Task7receiveEv+0x50>)
 8105f54:	681b      	ldr	r3, [r3, #0]
 8105f56:	f107 0108 	add.w	r1, r7, #8
 8105f5a:	2200      	movs	r2, #0
 8105f5c:	4618      	mov	r0, r3
 8105f5e:	f00e faf9 	bl	8114554 <xQueueReceive>
 8105f62:	6278      	str	r0, [r7, #36]	@ 0x24
		if(ret == pdTRUE)
 8105f64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8105f66:	2b01      	cmp	r3, #1
 8105f68:	d105      	bne.n	8105f76 <_ZN19EventManagerCM4Task7receiveEv+0x3e>
		{
			receivedMessages.push_back(msg);
 8105f6a:	f107 0308 	add.w	r3, r7, #8
 8105f6e:	4619      	mov	r1, r3
 8105f70:	6878      	ldr	r0, [r7, #4]
 8105f72:	f000 f9bd 	bl	81062f0 <_ZNSt6vectorI8SMessageSaIS0_EE9push_backERKS0_>
		}
	} while(ret == pdTRUE);
 8105f76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8105f78:	2b01      	cmp	r3, #1
 8105f7a:	d0ea      	beq.n	8105f52 <_ZN19EventManagerCM4Task7receiveEv+0x1a>

	return receivedMessages;
 8105f7c:	bf00      	nop
}
 8105f7e:	6878      	ldr	r0, [r7, #4]
 8105f80:	3728      	adds	r7, #40	@ 0x28
 8105f82:	46bd      	mov	sp, r7
 8105f84:	bd80      	pop	{r7, pc}
 8105f86:	bf00      	nop
 8105f88:	100001cc 	.word	0x100001cc

08105f8c <_ZN9__gnu_cxxeqIPK8SMessageSt6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>:
    { return std::__detail::__synth3way(__lhs.base(), __rhs.base()); }

  template<typename _Iterator, typename _Container>
    [[nodiscard]]
    constexpr bool
    operator==(const __normal_iterator<_Iterator, _Container>& __lhs,
 8105f8c:	b590      	push	{r4, r7, lr}
 8105f8e:	b083      	sub	sp, #12
 8105f90:	af00      	add	r7, sp, #0
 8105f92:	6078      	str	r0, [r7, #4]
 8105f94:	6039      	str	r1, [r7, #0]
	       const __normal_iterator<_Iterator, _Container>& __rhs)
    noexcept(noexcept(__lhs.base() == __rhs.base()))
    requires requires {
      { __lhs.base() == __rhs.base() } -> std::convertible_to<bool>;
    }
    { return __lhs.base() == __rhs.base(); }
 8105f96:	6878      	ldr	r0, [r7, #4]
 8105f98:	f000 f810 	bl	8105fbc <_ZNK9__gnu_cxx17__normal_iteratorIPK8SMessageSt6vectorIS1_SaIS1_EEE4baseEv>
 8105f9c:	4603      	mov	r3, r0
 8105f9e:	681c      	ldr	r4, [r3, #0]
 8105fa0:	6838      	ldr	r0, [r7, #0]
 8105fa2:	f000 f80b 	bl	8105fbc <_ZNK9__gnu_cxx17__normal_iteratorIPK8SMessageSt6vectorIS1_SaIS1_EEE4baseEv>
 8105fa6:	4603      	mov	r3, r0
 8105fa8:	681b      	ldr	r3, [r3, #0]
 8105faa:	429c      	cmp	r4, r3
 8105fac:	bf0c      	ite	eq
 8105fae:	2301      	moveq	r3, #1
 8105fb0:	2300      	movne	r3, #0
 8105fb2:	b2db      	uxtb	r3, r3
 8105fb4:	4618      	mov	r0, r3
 8105fb6:	370c      	adds	r7, #12
 8105fb8:	46bd      	mov	sp, r7
 8105fba:	bd90      	pop	{r4, r7, pc}

08105fbc <_ZNK9__gnu_cxx17__normal_iteratorIPK8SMessageSt6vectorIS1_SaIS1_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8105fbc:	b480      	push	{r7}
 8105fbe:	b083      	sub	sp, #12
 8105fc0:	af00      	add	r7, sp, #0
 8105fc2:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8105fc4:	687b      	ldr	r3, [r7, #4]
 8105fc6:	4618      	mov	r0, r3
 8105fc8:	370c      	adds	r7, #12
 8105fca:	46bd      	mov	sp, r7
 8105fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105fd0:	4770      	bx	lr

08105fd2 <_ZNK9__gnu_cxx17__normal_iteratorIPK8SMessageSt6vectorIS1_SaIS1_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8105fd2:	b480      	push	{r7}
 8105fd4:	b083      	sub	sp, #12
 8105fd6:	af00      	add	r7, sp, #0
 8105fd8:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 8105fda:	687b      	ldr	r3, [r7, #4]
 8105fdc:	681b      	ldr	r3, [r3, #0]
 8105fde:	4618      	mov	r0, r3
 8105fe0:	370c      	adds	r7, #12
 8105fe2:	46bd      	mov	sp, r7
 8105fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105fe8:	4770      	bx	lr

08105fea <_ZN19EventManagerCM4Task4sendERKSt6vectorI8SMessageSaIS1_EE>:

void EventManagerCM4Task::send(const std::vector<SMessage>& messages)
{
 8105fea:	b5b0      	push	{r4, r5, r7, lr}
 8105fec:	b092      	sub	sp, #72	@ 0x48
 8105fee:	af00      	add	r7, sp, #0
 8105ff0:	6078      	str	r0, [r7, #4]
 8105ff2:	6039      	str	r1, [r7, #0]
	for(auto msg : messages)
 8105ff4:	683b      	ldr	r3, [r7, #0]
 8105ff6:	643b      	str	r3, [r7, #64]	@ 0x40
 8105ff8:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8105ffa:	f000 f99f 	bl	810633c <_ZNKSt6vectorI8SMessageSaIS0_EE5beginEv>
 8105ffe:	4603      	mov	r3, r0
 8106000:	61bb      	str	r3, [r7, #24]
 8106002:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8106004:	f000 f9aa 	bl	810635c <_ZNKSt6vectorI8SMessageSaIS0_EE3endEv>
 8106008:	4603      	mov	r3, r0
 810600a:	617b      	str	r3, [r7, #20]
 810600c:	e056      	b.n	81060bc <_ZN19EventManagerCM4Task4sendERKSt6vectorI8SMessageSaIS1_EE+0xd2>
 810600e:	f107 0318 	add.w	r3, r7, #24
 8106012:	4618      	mov	r0, r3
 8106014:	f7ff ffdd 	bl	8105fd2 <_ZNK9__gnu_cxx17__normal_iteratorIPK8SMessageSt6vectorIS1_SaIS1_EEEdeEv>
 8106018:	4603      	mov	r3, r0
 810601a:	f107 041c 	add.w	r4, r7, #28
 810601e:	461d      	mov	r5, r3
 8106020:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8106022:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8106024:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8106028:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	{
		auto eventReceiver = static_cast<EEventQueue>(msg.event_receiver);
 810602c:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8106030:	74fb      	strb	r3, [r7, #19]
		auto it = queue_handles.find(eventReceiver);
 8106032:	687b      	ldr	r3, [r7, #4]
 8106034:	f107 0213 	add.w	r2, r7, #19
 8106038:	4611      	mov	r1, r2
 810603a:	4618      	mov	r0, r3
 810603c:	f000 f9b0 	bl	81063a0 <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEE4findERS7_>
 8106040:	4603      	mov	r3, r0
 8106042:	60fb      	str	r3, [r7, #12]

		QueueHandle_t targetQueue;

		if(it != queue_handles.end())
 8106044:	687b      	ldr	r3, [r7, #4]
 8106046:	4618      	mov	r0, r3
 8106048:	f000 f9b9 	bl	81063be <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEE3endEv>
 810604c:	4603      	mov	r3, r0
 810604e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8106050:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 8106054:	f107 030c 	add.w	r3, r7, #12
 8106058:	4611      	mov	r1, r2
 810605a:	4618      	mov	r0, r3
 810605c:	f000 f9bc 	bl	81063d8 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEES9_>
 8106060:	4603      	mov	r3, r0
 8106062:	f083 0301 	eor.w	r3, r3, #1
 8106066:	b2db      	uxtb	r3, r3
 8106068:	2b00      	cmp	r3, #0
 810606a:	d00a      	beq.n	8106082 <_ZN19EventManagerCM4Task4sendERKSt6vectorI8SMessageSaIS1_EE+0x98>
		{
			targetQueue = queue_handles[eventReceiver];
 810606c:	687b      	ldr	r3, [r7, #4]
 810606e:	f107 0213 	add.w	r2, r7, #19
 8106072:	4611      	mov	r1, r2
 8106074:	4618      	mov	r0, r3
 8106076:	f000 f9c3 	bl	8106400 <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_>
 810607a:	4603      	mov	r3, r0
 810607c:	681b      	ldr	r3, [r3, #0]
 810607e:	647b      	str	r3, [r7, #68]	@ 0x44
 8106080:	e00c      	b.n	810609c <_ZN19EventManagerCM4Task4sendERKSt6vectorI8SMessageSaIS1_EE+0xb2>
		}
		else
		{
			// if receiver not found, then it means i has to be on CM7 side, so send to IPC connection damon.
			targetQueue = queue_handles[EVENT_QUEUE_DAEMON_NATIVE];
 8106082:	687b      	ldr	r3, [r7, #4]
 8106084:	2207      	movs	r2, #7
 8106086:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 810608a:	f107 023f 	add.w	r2, r7, #63	@ 0x3f
 810608e:	4611      	mov	r1, r2
 8106090:	4618      	mov	r0, r3
 8106092:	f000 fa11 	bl	81064b8 <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEEixEOS1_>
 8106096:	4603      	mov	r3, r0
 8106098:	681b      	ldr	r3, [r3, #0]
 810609a:	647b      	str	r3, [r7, #68]	@ 0x44
		}

		if(targetQueue)
 810609c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 810609e:	2b00      	cmp	r3, #0
 81060a0:	d007      	beq.n	81060b2 <_ZN19EventManagerCM4Task4sendERKSt6vectorI8SMessageSaIS1_EE+0xc8>
		{
			xQueueSend(targetQueue, static_cast<void*>(&msg), portMAX_DELAY);
 81060a2:	f107 011c 	add.w	r1, r7, #28
 81060a6:	2300      	movs	r3, #0
 81060a8:	f04f 32ff 	mov.w	r2, #4294967295
 81060ac:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 81060ae:	f00e f821 	bl	81140f4 <xQueueGenericSend>
	for(auto msg : messages)
 81060b2:	f107 0318 	add.w	r3, r7, #24
 81060b6:	4618      	mov	r0, r3
 81060b8:	f000 f961 	bl	810637e <_ZN9__gnu_cxx17__normal_iteratorIPK8SMessageSt6vectorIS1_SaIS1_EEEppEv>
 81060bc:	f107 0214 	add.w	r2, r7, #20
 81060c0:	f107 0318 	add.w	r3, r7, #24
 81060c4:	4611      	mov	r1, r2
 81060c6:	4618      	mov	r0, r3
 81060c8:	f7ff ff60 	bl	8105f8c <_ZN9__gnu_cxxeqIPK8SMessageSt6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>
 81060cc:	4603      	mov	r3, r0
 81060ce:	f083 0301 	eor.w	r3, r3, #1
 81060d2:	b2db      	uxtb	r3, r3
 81060d4:	2b00      	cmp	r3, #0
 81060d6:	d19a      	bne.n	810600e <_ZN19EventManagerCM4Task4sendERKSt6vectorI8SMessageSaIS1_EE+0x24>
		}
	}
}
 81060d8:	bf00      	nop
 81060da:	bf00      	nop
 81060dc:	3748      	adds	r7, #72	@ 0x48
 81060de:	46bd      	mov	sp, r7
 81060e0:	bdb0      	pop	{r4, r5, r7, pc}

081060e2 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE13_Rb_tree_implISA_Lb1EEC1Ev>:
	  _Rb_tree_impl()
 81060e2:	b580      	push	{r7, lr}
 81060e4:	b082      	sub	sp, #8
 81060e6:	af00      	add	r7, sp, #0
 81060e8:	6078      	str	r0, [r7, #4]
	  : _Node_allocator()
 81060ea:	6878      	ldr	r0, [r7, #4]
 81060ec:	f000 fa44 	bl	8106578 <_ZNSaISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEEC1Ev>
 81060f0:	687b      	ldr	r3, [r7, #4]
 81060f2:	4618      	mov	r0, r3
 81060f4:	f000 fa4c 	bl	8106590 <_ZNSt20_Rb_tree_key_compareISt4lessIN19EventManagerCM4Task11EEventQueueEEEC1Ev>
 81060f8:	687b      	ldr	r3, [r7, #4]
 81060fa:	3304      	adds	r3, #4
 81060fc:	4618      	mov	r0, r3
 81060fe:	f7ff fe6e 	bl	8105dde <_ZNSt15_Rb_tree_headerC1Ev>
	  { }
 8106102:	687b      	ldr	r3, [r7, #4]
 8106104:	4618      	mov	r0, r3
 8106106:	3708      	adds	r7, #8
 8106108:	46bd      	mov	sp, r7
 810610a:	bd80      	pop	{r7, pc}

0810610c <_ZNSt4pairIRN19EventManagerCM4Task11EEventQueueERP15QueueDefinitionEC1ES2_S5_>:
      pair(const _T1& __x, const _T2& __y)
 810610c:	b480      	push	{r7}
 810610e:	b085      	sub	sp, #20
 8106110:	af00      	add	r7, sp, #0
 8106112:	60f8      	str	r0, [r7, #12]
 8106114:	60b9      	str	r1, [r7, #8]
 8106116:	607a      	str	r2, [r7, #4]
      : first(__x), second(__y)
 8106118:	68fb      	ldr	r3, [r7, #12]
 810611a:	68ba      	ldr	r2, [r7, #8]
 810611c:	601a      	str	r2, [r3, #0]
 810611e:	68fb      	ldr	r3, [r7, #12]
 8106120:	687a      	ldr	r2, [r7, #4]
 8106122:	605a      	str	r2, [r3, #4]
      { }
 8106124:	68fb      	ldr	r3, [r7, #12]
 8106126:	4618      	mov	r0, r3
 8106128:	3714      	adds	r7, #20
 810612a:	46bd      	mov	sp, r7
 810612c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106130:	4770      	bx	lr

08106132 <_ZSt3getILj0ERN19EventManagerCM4Task11EEventQueueERP15QueueDefinitionEONSt13tuple_elementIXT_ESt4pairIT0_T1_EE4typeEOSA_>:
    get(pair<_Tp1, _Tp2>& __in) noexcept
    { return __pair_get<_Int>::__get(__in); }

  template<size_t _Int, class _Tp1, class _Tp2>
    constexpr typename tuple_element<_Int, pair<_Tp1, _Tp2>>::type&&
    get(pair<_Tp1, _Tp2>&& __in) noexcept
 8106132:	b580      	push	{r7, lr}
 8106134:	b082      	sub	sp, #8
 8106136:	af00      	add	r7, sp, #0
 8106138:	6078      	str	r0, [r7, #4]
    { return __pair_get<_Int>::__move_get(std::move(__in)); }
 810613a:	6878      	ldr	r0, [r7, #4]
 810613c:	f000 fa3f 	bl	81065be <_ZSt4moveIRSt4pairIRN19EventManagerCM4Task11EEventQueueERP15QueueDefinitionEEONSt16remove_referenceIT_E4typeEOSA_>
 8106140:	4603      	mov	r3, r0
 8106142:	4618      	mov	r0, r3
 8106144:	f000 fa46 	bl	81065d4 <_ZNSt10__pair_getILj0EE10__move_getIRN19EventManagerCM4Task11EEventQueueERP15QueueDefinitionEEOT_OSt4pairIS8_T0_E>
 8106148:	4603      	mov	r3, r0
 810614a:	4618      	mov	r0, r3
 810614c:	3708      	adds	r7, #8
 810614e:	46bd      	mov	sp, r7
 8106150:	bd80      	pop	{r7, pc}

08106152 <_ZSt3getILj1ERN19EventManagerCM4Task11EEventQueueERP15QueueDefinitionEONSt13tuple_elementIXT_ESt4pairIT0_T1_EE4typeEOSA_>:
    get(pair<_Tp1, _Tp2>&& __in) noexcept
 8106152:	b580      	push	{r7, lr}
 8106154:	b082      	sub	sp, #8
 8106156:	af00      	add	r7, sp, #0
 8106158:	6078      	str	r0, [r7, #4]
    { return __pair_get<_Int>::__move_get(std::move(__in)); }
 810615a:	6878      	ldr	r0, [r7, #4]
 810615c:	f000 fa2f 	bl	81065be <_ZSt4moveIRSt4pairIRN19EventManagerCM4Task11EEventQueueERP15QueueDefinitionEEONSt16remove_referenceIT_E4typeEOSA_>
 8106160:	4603      	mov	r3, r0
 8106162:	4618      	mov	r0, r3
 8106164:	f000 fa44 	bl	81065f0 <_ZNSt10__pair_getILj1EE10__move_getIRN19EventManagerCM4Task11EEventQueueERP15QueueDefinitionEEOT0_OSt4pairIT_S8_E>
 8106168:	4603      	mov	r3, r0
 810616a:	4618      	mov	r0, r3
 810616c:	3708      	adds	r7, #8
 810616e:	46bd      	mov	sp, r7
 8106170:	bd80      	pop	{r7, pc}

08106172 <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEE7emplaceIJRS1_RS3_EEES6_ISt17_Rb_tree_iteratorIS8_EbEDpOT_>:
       *
       *  Insertion requires logarithmic time.
       */
      template<typename... _Args>
	std::pair<iterator, bool>
	emplace(_Args&&... __args)
 8106172:	b590      	push	{r4, r7, lr}
 8106174:	b091      	sub	sp, #68	@ 0x44
 8106176:	af00      	add	r7, sp, #0
 8106178:	60f8      	str	r0, [r7, #12]
 810617a:	60b9      	str	r1, [r7, #8]
 810617c:	607a      	str	r2, [r7, #4]
 810617e:	603b      	str	r3, [r7, #0]
	{
#if __cplusplus >= 201703L
	  if constexpr (sizeof...(_Args) == 2)
	    if constexpr (is_same_v<allocator_type, allocator<value_type>>)
	      {
		auto&& [__a, __v] = pair<_Args&...>(__args...);
 8106180:	f107 0318 	add.w	r3, r7, #24
 8106184:	683a      	ldr	r2, [r7, #0]
 8106186:	6879      	ldr	r1, [r7, #4]
 8106188:	4618      	mov	r0, r3
 810618a:	f7ff ffbf 	bl	810610c <_ZNSt4pairIRN19EventManagerCM4Task11EEventQueueERP15QueueDefinitionEC1ES2_S5_>
 810618e:	f107 0318 	add.w	r3, r7, #24
 8106192:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8106194:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8106196:	f7ff ffcc 	bl	8106132 <_ZSt3getILj0ERN19EventManagerCM4Task11EEventQueueERP15QueueDefinitionEONSt13tuple_elementIXT_ESt4pairIT0_T1_EE4typeEOSA_>
 810619a:	63b8      	str	r0, [r7, #56]	@ 0x38
 810619c:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 810619e:	f7ff ffd8 	bl	8106152 <_ZSt3getILj1ERN19EventManagerCM4Task11EEventQueueERP15QueueDefinitionEONSt13tuple_elementIXT_ESt4pairIT0_T1_EE4typeEOSA_>
 81061a2:	6378      	str	r0, [r7, #52]	@ 0x34
		if constexpr (__usable_key<decltype(__a)>)
		  {
		    const key_type& __k = __a;
 81061a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81061a6:	633b      	str	r3, [r7, #48]	@ 0x30
		    iterator __i = lower_bound(__k);
 81061a8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 81061aa:	68b8      	ldr	r0, [r7, #8]
 81061ac:	f000 fa2e 	bl	810660c <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEE11lower_boundERS7_>
 81061b0:	4603      	mov	r3, r0
 81061b2:	617b      	str	r3, [r7, #20]
		    if (__i == end() || key_comp()(__k, (*__i).first))
 81061b4:	68b8      	ldr	r0, [r7, #8]
 81061b6:	f000 f902 	bl	81063be <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEE3endEv>
 81061ba:	4603      	mov	r3, r0
 81061bc:	623b      	str	r3, [r7, #32]
 81061be:	f107 0220 	add.w	r2, r7, #32
 81061c2:	f107 0314 	add.w	r3, r7, #20
 81061c6:	4611      	mov	r1, r2
 81061c8:	4618      	mov	r0, r3
 81061ca:	f000 f905 	bl	81063d8 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEES9_>
 81061ce:	4603      	mov	r3, r0
 81061d0:	2b00      	cmp	r3, #0
 81061d2:	d112      	bne.n	81061fa <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEE7emplaceIJRS1_RS3_EEES6_ISt17_Rb_tree_iteratorIS8_EbEDpOT_+0x88>
 81061d4:	68b8      	ldr	r0, [r7, #8]
 81061d6:	f000 fa28 	bl	810662a <_ZNKSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEE8key_compEv>
 81061da:	f107 0314 	add.w	r3, r7, #20
 81061de:	4618      	mov	r0, r3
 81061e0:	f000 fa30 	bl	8106644 <_ZNKSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEdeEv>
 81061e4:	4603      	mov	r3, r0
 81061e6:	461a      	mov	r2, r3
 81061e8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 81061ec:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 81061ee:	4618      	mov	r0, r3
 81061f0:	f000 fa36 	bl	8106660 <_ZNKSt4lessIN19EventManagerCM4Task11EEventQueueEEclERKS1_S4_>
 81061f4:	4603      	mov	r3, r0
 81061f6:	2b00      	cmp	r3, #0
 81061f8:	d001      	beq.n	81061fe <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEE7emplaceIJRS1_RS3_EEES6_ISt17_Rb_tree_iteratorIS8_EbEDpOT_+0x8c>
 81061fa:	2301      	movs	r3, #1
 81061fc:	e000      	b.n	8106200 <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEE7emplaceIJRS1_RS3_EEES6_ISt17_Rb_tree_iteratorIS8_EbEDpOT_+0x8e>
 81061fe:	2300      	movs	r3, #0
 8106200:	2b00      	cmp	r3, #0
 8106202:	d022      	beq.n	810624a <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEE7emplaceIJRS1_RS3_EEES6_ISt17_Rb_tree_iteratorIS8_EbEDpOT_+0xd8>
		      {
			__i = emplace_hint(__i, std::forward<_Args>(__args)...);
 8106204:	f107 0214 	add.w	r2, r7, #20
 8106208:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 810620c:	4611      	mov	r1, r2
 810620e:	4618      	mov	r0, r3
 8106210:	f000 fa51 	bl	81066b6 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEC1ERKSt17_Rb_tree_iteratorIS6_E>
 8106214:	6878      	ldr	r0, [r7, #4]
 8106216:	f000 fa38 	bl	810668a <_ZSt7forwardIRN19EventManagerCM4Task11EEventQueueEEOT_RNSt16remove_referenceIS3_E4typeE>
 810621a:	4604      	mov	r4, r0
 810621c:	6838      	ldr	r0, [r7, #0]
 810621e:	f000 fa3f 	bl	81066a0 <_ZSt7forwardIRP15QueueDefinitionEOT_RNSt16remove_referenceIS3_E4typeE>
 8106222:	4603      	mov	r3, r0
 8106224:	4622      	mov	r2, r4
 8106226:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8106228:	68b8      	ldr	r0, [r7, #8]
 810622a:	f000 fa54 	bl	81066d6 <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEE12emplace_hintIJRS1_RS3_EEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EDpOT_>
 810622e:	4603      	mov	r3, r0
 8106230:	617b      	str	r3, [r7, #20]
			return {__i, true};
 8106232:	2301      	movs	r3, #1
 8106234:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8106238:	f107 022e 	add.w	r2, r7, #46	@ 0x2e
 810623c:	f107 0314 	add.w	r3, r7, #20
 8106240:	4619      	mov	r1, r3
 8106242:	68f8      	ldr	r0, [r7, #12]
 8106244:	f000 fa61 	bl	810670a <_ZNSt4pairISt17_Rb_tree_iteratorIS_IKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEbEC1IRS7_bEEOT_OT0_>
		    return {__i, false};
		  }
	      }
#endif
	  return _M_t._M_emplace_unique(std::forward<_Args>(__args)...);
	}
 8106248:	e00a      	b.n	8106260 <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEE7emplaceIJRS1_RS3_EEES6_ISt17_Rb_tree_iteratorIS8_EbEDpOT_+0xee>
		    return {__i, false};
 810624a:	2300      	movs	r3, #0
 810624c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8106250:	f107 022f 	add.w	r2, r7, #47	@ 0x2f
 8106254:	f107 0314 	add.w	r3, r7, #20
 8106258:	4619      	mov	r1, r3
 810625a:	68f8      	ldr	r0, [r7, #12]
 810625c:	f000 fa55 	bl	810670a <_ZNSt4pairISt17_Rb_tree_iteratorIS_IKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEbEC1IRS7_bEEOT_OT0_>
	}
 8106260:	68f8      	ldr	r0, [r7, #12]
 8106262:	3744      	adds	r7, #68	@ 0x44
 8106264:	46bd      	mov	sp, r7
 8106266:	bd90      	pop	{r4, r7, pc}

08106268 <_ZNSt6vectorI8SMessageSaIS0_EED1Ev>:
       *  elements themselves are pointers, the pointed-to memory is
       *  not touched in any way.  Managing the pointer is the user's
       *  responsibility.
       */
      _GLIBCXX20_CONSTEXPR
      ~vector() _GLIBCXX_NOEXCEPT
 8106268:	b5b0      	push	{r4, r5, r7, lr}
 810626a:	b082      	sub	sp, #8
 810626c:	af00      	add	r7, sp, #0
 810626e:	6078      	str	r0, [r7, #4]
      {
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8106270:	687b      	ldr	r3, [r7, #4]
 8106272:	681c      	ldr	r4, [r3, #0]
 8106274:	687b      	ldr	r3, [r7, #4]
 8106276:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 8106278:	687b      	ldr	r3, [r7, #4]
 810627a:	4618      	mov	r0, r3
 810627c:	f000 fa5e 	bl	810673c <_ZNSt12_Vector_baseI8SMessageSaIS0_EE19_M_get_Tp_allocatorEv>
 8106280:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8106282:	461a      	mov	r2, r3
 8106284:	4629      	mov	r1, r5
 8106286:	4620      	mov	r0, r4
 8106288:	f000 fa63 	bl	8106752 <_ZSt8_DestroyIP8SMessageS0_EvT_S2_RSaIT0_E>
	_GLIBCXX_ASAN_ANNOTATE_BEFORE_DEALLOC;
      }
 810628c:	687b      	ldr	r3, [r7, #4]
 810628e:	4618      	mov	r0, r3
 8106290:	f000 f810 	bl	81062b4 <_ZNSt12_Vector_baseI8SMessageSaIS0_EED1Ev>
 8106294:	687b      	ldr	r3, [r7, #4]
 8106296:	4618      	mov	r0, r3
 8106298:	3708      	adds	r7, #8
 810629a:	46bd      	mov	sp, r7
 810629c:	bdb0      	pop	{r4, r5, r7, pc}

0810629e <_ZNSaI8SMessageED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 810629e:	b480      	push	{r7}
 81062a0:	b083      	sub	sp, #12
 81062a2:	af00      	add	r7, sp, #0
 81062a4:	6078      	str	r0, [r7, #4]
 81062a6:	687b      	ldr	r3, [r7, #4]
 81062a8:	4618      	mov	r0, r3
 81062aa:	370c      	adds	r7, #12
 81062ac:	46bd      	mov	sp, r7
 81062ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 81062b2:	4770      	bx	lr

081062b4 <_ZNSt12_Vector_baseI8SMessageSaIS0_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 81062b4:	b580      	push	{r7, lr}
 81062b6:	b082      	sub	sp, #8
 81062b8:	af00      	add	r7, sp, #0
 81062ba:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 81062bc:	687b      	ldr	r3, [r7, #4]
 81062be:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 81062c0:	687b      	ldr	r3, [r7, #4]
 81062c2:	689a      	ldr	r2, [r3, #8]
 81062c4:	687b      	ldr	r3, [r7, #4]
 81062c6:	681b      	ldr	r3, [r3, #0]
 81062c8:	1ad3      	subs	r3, r2, r3
 81062ca:	109b      	asrs	r3, r3, #2
 81062cc:	4a07      	ldr	r2, [pc, #28]	@ (81062ec <_ZNSt12_Vector_baseI8SMessageSaIS0_EED1Ev+0x38>)
 81062ce:	fb02 f303 	mul.w	r3, r2, r3
	_M_deallocate(_M_impl._M_start,
 81062d2:	461a      	mov	r2, r3
 81062d4:	6878      	ldr	r0, [r7, #4]
 81062d6:	f000 fa4a 	bl	810676e <_ZNSt12_Vector_baseI8SMessageSaIS0_EE13_M_deallocateEPS0_j>
      }
 81062da:	687b      	ldr	r3, [r7, #4]
 81062dc:	4618      	mov	r0, r3
 81062de:	f7ff fe1f 	bl	8105f20 <_ZNSt12_Vector_baseI8SMessageSaIS0_EE12_Vector_implD1Ev>
 81062e2:	687b      	ldr	r3, [r7, #4]
 81062e4:	4618      	mov	r0, r3
 81062e6:	3708      	adds	r7, #8
 81062e8:	46bd      	mov	sp, r7
 81062ea:	bd80      	pop	{r7, pc}
 81062ec:	b6db6db7 	.word	0xb6db6db7

081062f0 <_ZNSt6vectorI8SMessageSaIS0_EE9push_backERKS0_>:
       *  done in constant time if the %vector has preallocated space
       *  available.
       */
      _GLIBCXX20_CONSTEXPR
      void
      push_back(const value_type& __x)
 81062f0:	b580      	push	{r7, lr}
 81062f2:	b082      	sub	sp, #8
 81062f4:	af00      	add	r7, sp, #0
 81062f6:	6078      	str	r0, [r7, #4]
 81062f8:	6039      	str	r1, [r7, #0]
      {
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 81062fa:	687b      	ldr	r3, [r7, #4]
 81062fc:	685a      	ldr	r2, [r3, #4]
 81062fe:	687b      	ldr	r3, [r7, #4]
 8106300:	689b      	ldr	r3, [r3, #8]
 8106302:	429a      	cmp	r2, r3
 8106304:	d00d      	beq.n	8106322 <_ZNSt6vectorI8SMessageSaIS0_EE9push_backERKS0_+0x32>
	  {
	    _GLIBCXX_ASAN_ANNOTATE_GROW(1);
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 8106306:	6878      	ldr	r0, [r7, #4]
 8106308:	687b      	ldr	r3, [r7, #4]
 810630a:	685b      	ldr	r3, [r3, #4]
 810630c:	683a      	ldr	r2, [r7, #0]
 810630e:	4619      	mov	r1, r3
 8106310:	f000 fa40 	bl	8106794 <_ZNSt16allocator_traitsISaI8SMessageEE9constructIS0_JRKS0_EEEvRS1_PT_DpOT0_>
				     __x);
	    ++this->_M_impl._M_finish;
 8106314:	687b      	ldr	r3, [r7, #4]
 8106316:	685b      	ldr	r3, [r3, #4]
 8106318:	f103 021c 	add.w	r2, r3, #28
 810631c:	687b      	ldr	r3, [r7, #4]
 810631e:	605a      	str	r2, [r3, #4]
	    _GLIBCXX_ASAN_ANNOTATE_GREW(1);
	  }
	else
	  _M_realloc_insert(end(), __x);
      }
 8106320:	e008      	b.n	8106334 <_ZNSt6vectorI8SMessageSaIS0_EE9push_backERKS0_+0x44>
	  _M_realloc_insert(end(), __x);
 8106322:	6878      	ldr	r0, [r7, #4]
 8106324:	f000 fa48 	bl	81067b8 <_ZNSt6vectorI8SMessageSaIS0_EE3endEv>
 8106328:	4603      	mov	r3, r0
 810632a:	683a      	ldr	r2, [r7, #0]
 810632c:	4619      	mov	r1, r3
 810632e:	6878      	ldr	r0, [r7, #4]
 8106330:	f000 faf0 	bl	8106914 <_ZNSt6vectorI8SMessageSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>
      }
 8106334:	bf00      	nop
 8106336:	3708      	adds	r7, #8
 8106338:	46bd      	mov	sp, r7
 810633a:	bd80      	pop	{r7, pc}

0810633c <_ZNKSt6vectorI8SMessageSaIS0_EE5beginEv>:
      begin() const _GLIBCXX_NOEXCEPT
 810633c:	b580      	push	{r7, lr}
 810633e:	b084      	sub	sp, #16
 8106340:	af00      	add	r7, sp, #0
 8106342:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_start); }
 8106344:	687a      	ldr	r2, [r7, #4]
 8106346:	f107 030c 	add.w	r3, r7, #12
 810634a:	4611      	mov	r1, r2
 810634c:	4618      	mov	r0, r3
 810634e:	f000 fb6b 	bl	8106a28 <_ZN9__gnu_cxx17__normal_iteratorIPK8SMessageSt6vectorIS1_SaIS1_EEEC1ERKS3_>
 8106352:	68fb      	ldr	r3, [r7, #12]
 8106354:	4618      	mov	r0, r3
 8106356:	3710      	adds	r7, #16
 8106358:	46bd      	mov	sp, r7
 810635a:	bd80      	pop	{r7, pc}

0810635c <_ZNKSt6vectorI8SMessageSaIS0_EE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
 810635c:	b580      	push	{r7, lr}
 810635e:	b084      	sub	sp, #16
 8106360:	af00      	add	r7, sp, #0
 8106362:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_finish); }
 8106364:	687b      	ldr	r3, [r7, #4]
 8106366:	1d1a      	adds	r2, r3, #4
 8106368:	f107 030c 	add.w	r3, r7, #12
 810636c:	4611      	mov	r1, r2
 810636e:	4618      	mov	r0, r3
 8106370:	f000 fb5a 	bl	8106a28 <_ZN9__gnu_cxx17__normal_iteratorIPK8SMessageSt6vectorIS1_SaIS1_EEEC1ERKS3_>
 8106374:	68fb      	ldr	r3, [r7, #12]
 8106376:	4618      	mov	r0, r3
 8106378:	3710      	adds	r7, #16
 810637a:	46bd      	mov	sp, r7
 810637c:	bd80      	pop	{r7, pc}

0810637e <_ZN9__gnu_cxx17__normal_iteratorIPK8SMessageSt6vectorIS1_SaIS1_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 810637e:	b480      	push	{r7}
 8106380:	b083      	sub	sp, #12
 8106382:	af00      	add	r7, sp, #0
 8106384:	6078      	str	r0, [r7, #4]
	++_M_current;
 8106386:	687b      	ldr	r3, [r7, #4]
 8106388:	681b      	ldr	r3, [r3, #0]
 810638a:	f103 021c 	add.w	r2, r3, #28
 810638e:	687b      	ldr	r3, [r7, #4]
 8106390:	601a      	str	r2, [r3, #0]
	return *this;
 8106392:	687b      	ldr	r3, [r7, #4]
      }
 8106394:	4618      	mov	r0, r3
 8106396:	370c      	adds	r7, #12
 8106398:	46bd      	mov	sp, r7
 810639a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810639e:	4770      	bx	lr

081063a0 <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEE4findERS7_>:
       *  pointing to the sought after %pair.  If unsuccessful it returns the
       *  past-the-end ( @c end() ) iterator.
       */

      iterator
      find(const key_type& __x)
 81063a0:	b580      	push	{r7, lr}
 81063a2:	b082      	sub	sp, #8
 81063a4:	af00      	add	r7, sp, #0
 81063a6:	6078      	str	r0, [r7, #4]
 81063a8:	6039      	str	r1, [r7, #0]
      { return _M_t.find(__x); }
 81063aa:	687b      	ldr	r3, [r7, #4]
 81063ac:	6839      	ldr	r1, [r7, #0]
 81063ae:	4618      	mov	r0, r3
 81063b0:	f000 fb4a 	bl	8106a48 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4findERS3_>
 81063b4:	4603      	mov	r3, r0
 81063b6:	4618      	mov	r0, r3
 81063b8:	3708      	adds	r7, #8
 81063ba:	46bd      	mov	sp, r7
 81063bc:	bd80      	pop	{r7, pc}

081063be <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 81063be:	b580      	push	{r7, lr}
 81063c0:	b082      	sub	sp, #8
 81063c2:	af00      	add	r7, sp, #0
 81063c4:	6078      	str	r0, [r7, #4]
      { return _M_t.end(); }
 81063c6:	687b      	ldr	r3, [r7, #4]
 81063c8:	4618      	mov	r0, r3
 81063ca:	f000 fb79 	bl	8106ac0 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE3endEv>
 81063ce:	4603      	mov	r3, r0
 81063d0:	4618      	mov	r0, r3
 81063d2:	3708      	adds	r7, #8
 81063d4:	46bd      	mov	sp, r7
 81063d6:	bd80      	pop	{r7, pc}

081063d8 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEES9_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 81063d8:	b480      	push	{r7}
 81063da:	b083      	sub	sp, #12
 81063dc:	af00      	add	r7, sp, #0
 81063de:	6078      	str	r0, [r7, #4]
 81063e0:	6039      	str	r1, [r7, #0]
      { return __x._M_node == __y._M_node; }
 81063e2:	687b      	ldr	r3, [r7, #4]
 81063e4:	681a      	ldr	r2, [r3, #0]
 81063e6:	683b      	ldr	r3, [r7, #0]
 81063e8:	681b      	ldr	r3, [r3, #0]
 81063ea:	429a      	cmp	r2, r3
 81063ec:	bf0c      	ite	eq
 81063ee:	2301      	moveq	r3, #1
 81063f0:	2300      	movne	r3, #0
 81063f2:	b2db      	uxtb	r3, r3
 81063f4:	4618      	mov	r0, r3
 81063f6:	370c      	adds	r7, #12
 81063f8:	46bd      	mov	sp, r7
 81063fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 81063fe:	4770      	bx	lr

08106400 <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_>:
      operator[](const key_type& __k)
 8106400:	b590      	push	{r4, r7, lr}
 8106402:	b08b      	sub	sp, #44	@ 0x2c
 8106404:	af02      	add	r7, sp, #8
 8106406:	6078      	str	r0, [r7, #4]
 8106408:	6039      	str	r1, [r7, #0]
	iterator __i = lower_bound(__k);
 810640a:	6839      	ldr	r1, [r7, #0]
 810640c:	6878      	ldr	r0, [r7, #4]
 810640e:	f000 f8fd 	bl	810660c <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEE11lower_boundERS7_>
 8106412:	4603      	mov	r3, r0
 8106414:	60bb      	str	r3, [r7, #8]
	if (__i == end() || key_comp()(__k, (*__i).first))
 8106416:	6878      	ldr	r0, [r7, #4]
 8106418:	f7ff ffd1 	bl	81063be <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEE3endEv>
 810641c:	4603      	mov	r3, r0
 810641e:	60fb      	str	r3, [r7, #12]
 8106420:	f107 020c 	add.w	r2, r7, #12
 8106424:	f107 0308 	add.w	r3, r7, #8
 8106428:	4611      	mov	r1, r2
 810642a:	4618      	mov	r0, r3
 810642c:	f7ff ffd4 	bl	81063d8 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEES9_>
 8106430:	4603      	mov	r3, r0
 8106432:	2b00      	cmp	r3, #0
 8106434:	d112      	bne.n	810645c <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_+0x5c>
 8106436:	6878      	ldr	r0, [r7, #4]
 8106438:	f000 f8f7 	bl	810662a <_ZNKSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEE8key_compEv>
 810643c:	f107 0308 	add.w	r3, r7, #8
 8106440:	4618      	mov	r0, r3
 8106442:	f000 f8ff 	bl	8106644 <_ZNKSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEdeEv>
 8106446:	4603      	mov	r3, r0
 8106448:	461a      	mov	r2, r3
 810644a:	f107 0310 	add.w	r3, r7, #16
 810644e:	6839      	ldr	r1, [r7, #0]
 8106450:	4618      	mov	r0, r3
 8106452:	f000 f905 	bl	8106660 <_ZNKSt4lessIN19EventManagerCM4Task11EEventQueueEEclERKS1_S4_>
 8106456:	4603      	mov	r3, r0
 8106458:	2b00      	cmp	r3, #0
 810645a:	d001      	beq.n	8106460 <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_+0x60>
 810645c:	2301      	movs	r3, #1
 810645e:	e000      	b.n	8106462 <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_+0x62>
 8106460:	2300      	movs	r3, #0
 8106462:	2b00      	cmp	r3, #0
 8106464:	d01b      	beq.n	810649e <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_+0x9e>
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
 8106466:	687c      	ldr	r4, [r7, #4]
 8106468:	f107 0208 	add.w	r2, r7, #8
 810646c:	f107 0314 	add.w	r3, r7, #20
 8106470:	4611      	mov	r1, r2
 8106472:	4618      	mov	r0, r3
 8106474:	f000 f91f 	bl	81066b6 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEC1ERKSt17_Rb_tree_iteratorIS6_E>
					    std::tuple<const key_type&>(__k),
 8106478:	f107 0318 	add.w	r3, r7, #24
 810647c:	6839      	ldr	r1, [r7, #0]
 810647e:	4618      	mov	r0, r3
 8106480:	f000 fb2f 	bl	8106ae2 <_ZNSt5tupleIJRKN19EventManagerCM4Task11EEventQueueEEEC1ILb1ELb1EEES3_>
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
 8106484:	f107 0218 	add.w	r2, r7, #24
 8106488:	f107 031c 	add.w	r3, r7, #28
 810648c:	9300      	str	r3, [sp, #0]
 810648e:	4613      	mov	r3, r2
 8106490:	4a08      	ldr	r2, [pc, #32]	@ (81064b4 <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_+0xb4>)
 8106492:	6979      	ldr	r1, [r7, #20]
 8106494:	4620      	mov	r0, r4
 8106496:	f000 fb33 	bl	8106b00 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EDpOT_>
 810649a:	4603      	mov	r3, r0
 810649c:	60bb      	str	r3, [r7, #8]
	return (*__i).second;
 810649e:	f107 0308 	add.w	r3, r7, #8
 81064a2:	4618      	mov	r0, r3
 81064a4:	f000 f8ce 	bl	8106644 <_ZNKSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEdeEv>
 81064a8:	4603      	mov	r3, r0
 81064aa:	3304      	adds	r3, #4
      }
 81064ac:	4618      	mov	r0, r3
 81064ae:	3724      	adds	r7, #36	@ 0x24
 81064b0:	46bd      	mov	sp, r7
 81064b2:	bd90      	pop	{r4, r7, pc}
 81064b4:	081283d8 	.word	0x081283d8

081064b8 <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEEixEOS1_>:
      operator[](key_type&& __k)
 81064b8:	b590      	push	{r4, r7, lr}
 81064ba:	b08b      	sub	sp, #44	@ 0x2c
 81064bc:	af02      	add	r7, sp, #8
 81064be:	6078      	str	r0, [r7, #4]
 81064c0:	6039      	str	r1, [r7, #0]
	iterator __i = lower_bound(__k);
 81064c2:	6839      	ldr	r1, [r7, #0]
 81064c4:	6878      	ldr	r0, [r7, #4]
 81064c6:	f000 f8a1 	bl	810660c <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEE11lower_boundERS7_>
 81064ca:	4603      	mov	r3, r0
 81064cc:	60bb      	str	r3, [r7, #8]
	if (__i == end() || key_comp()(__k, (*__i).first))
 81064ce:	6878      	ldr	r0, [r7, #4]
 81064d0:	f7ff ff75 	bl	81063be <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEE3endEv>
 81064d4:	4603      	mov	r3, r0
 81064d6:	60fb      	str	r3, [r7, #12]
 81064d8:	f107 020c 	add.w	r2, r7, #12
 81064dc:	f107 0308 	add.w	r3, r7, #8
 81064e0:	4611      	mov	r1, r2
 81064e2:	4618      	mov	r0, r3
 81064e4:	f7ff ff78 	bl	81063d8 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEES9_>
 81064e8:	4603      	mov	r3, r0
 81064ea:	2b00      	cmp	r3, #0
 81064ec:	d112      	bne.n	8106514 <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEEixEOS1_+0x5c>
 81064ee:	6878      	ldr	r0, [r7, #4]
 81064f0:	f000 f89b 	bl	810662a <_ZNKSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEE8key_compEv>
 81064f4:	f107 0308 	add.w	r3, r7, #8
 81064f8:	4618      	mov	r0, r3
 81064fa:	f000 f8a3 	bl	8106644 <_ZNKSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEdeEv>
 81064fe:	4603      	mov	r3, r0
 8106500:	461a      	mov	r2, r3
 8106502:	f107 0310 	add.w	r3, r7, #16
 8106506:	6839      	ldr	r1, [r7, #0]
 8106508:	4618      	mov	r0, r3
 810650a:	f000 f8a9 	bl	8106660 <_ZNKSt4lessIN19EventManagerCM4Task11EEventQueueEEclERKS1_S4_>
 810650e:	4603      	mov	r3, r0
 8106510:	2b00      	cmp	r3, #0
 8106512:	d001      	beq.n	8106518 <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEEixEOS1_+0x60>
 8106514:	2301      	movs	r3, #1
 8106516:	e000      	b.n	810651a <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEEixEOS1_+0x62>
 8106518:	2300      	movs	r3, #0
 810651a:	2b00      	cmp	r3, #0
 810651c:	d01f      	beq.n	810655e <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEEixEOS1_+0xa6>
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
 810651e:	687c      	ldr	r4, [r7, #4]
 8106520:	f107 0208 	add.w	r2, r7, #8
 8106524:	f107 0314 	add.w	r3, r7, #20
 8106528:	4611      	mov	r1, r2
 810652a:	4618      	mov	r0, r3
 810652c:	f000 f8c3 	bl	81066b6 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEC1ERKSt17_Rb_tree_iteratorIS6_E>
					std::forward_as_tuple(std::move(__k)),
 8106530:	6838      	ldr	r0, [r7, #0]
 8106532:	f000 fb2b 	bl	8106b8c <_ZSt4moveIRN19EventManagerCM4Task11EEventQueueEEONSt16remove_referenceIT_E4typeEOS4_>
 8106536:	4602      	mov	r2, r0
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
 8106538:	f107 0318 	add.w	r3, r7, #24
 810653c:	4611      	mov	r1, r2
 810653e:	4618      	mov	r0, r3
 8106540:	f000 fb2f 	bl	8106ba2 <_ZSt16forward_as_tupleIJN19EventManagerCM4Task11EEventQueueEEESt5tupleIJDpOT_EES5_>
 8106544:	f107 0218 	add.w	r2, r7, #24
 8106548:	f107 031c 	add.w	r3, r7, #28
 810654c:	9300      	str	r3, [sp, #0]
 810654e:	4613      	mov	r3, r2
 8106550:	4a08      	ldr	r2, [pc, #32]	@ (8106574 <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEEixEOS1_+0xbc>)
 8106552:	6979      	ldr	r1, [r7, #20]
 8106554:	4620      	mov	r0, r4
 8106556:	f000 fb35 	bl	8106bc4 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJOS1_EESH_IJEEEEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EDpOT_>
 810655a:	4603      	mov	r3, r0
 810655c:	60bb      	str	r3, [r7, #8]
	return (*__i).second;
 810655e:	f107 0308 	add.w	r3, r7, #8
 8106562:	4618      	mov	r0, r3
 8106564:	f000 f86e 	bl	8106644 <_ZNKSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEdeEv>
 8106568:	4603      	mov	r3, r0
 810656a:	3304      	adds	r3, #4
      }
 810656c:	4618      	mov	r0, r3
 810656e:	3724      	adds	r7, #36	@ 0x24
 8106570:	46bd      	mov	sp, r7
 8106572:	bd90      	pop	{r4, r7, pc}
 8106574:	081283d8 	.word	0x081283d8

08106578 <_ZNSaISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8106578:	b580      	push	{r7, lr}
 810657a:	b082      	sub	sp, #8
 810657c:	af00      	add	r7, sp, #0
 810657e:	6078      	str	r0, [r7, #4]
 8106580:	6878      	ldr	r0, [r7, #4]
 8106582:	f000 fb65 	bl	8106c50 <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEEC1Ev>
 8106586:	687b      	ldr	r3, [r7, #4]
 8106588:	4618      	mov	r0, r3
 810658a:	3708      	adds	r7, #8
 810658c:	46bd      	mov	sp, r7
 810658e:	bd80      	pop	{r7, pc}

08106590 <_ZNSt20_Rb_tree_key_compareISt4lessIN19EventManagerCM4Task11EEventQueueEEEC1Ev>:
      _Rb_tree_key_compare()
 8106590:	b480      	push	{r7}
 8106592:	b083      	sub	sp, #12
 8106594:	af00      	add	r7, sp, #0
 8106596:	6078      	str	r0, [r7, #4]
      { }
 8106598:	687b      	ldr	r3, [r7, #4]
 810659a:	4618      	mov	r0, r3
 810659c:	370c      	adds	r7, #12
 810659e:	46bd      	mov	sp, r7
 81065a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81065a4:	4770      	bx	lr

081065a6 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_beginEv>:
      _M_begin() _GLIBCXX_NOEXCEPT
 81065a6:	b580      	push	{r7, lr}
 81065a8:	b082      	sub	sp, #8
 81065aa:	af00      	add	r7, sp, #0
 81065ac:	6078      	str	r0, [r7, #4]
      { return _M_mbegin(); }
 81065ae:	6878      	ldr	r0, [r7, #4]
 81065b0:	f000 fb82 	bl	8106cb8 <_ZNKSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE9_M_mbeginEv>
 81065b4:	4603      	mov	r3, r0
 81065b6:	4618      	mov	r0, r3
 81065b8:	3708      	adds	r7, #8
 81065ba:	46bd      	mov	sp, r7
 81065bc:	bd80      	pop	{r7, pc}

081065be <_ZSt4moveIRSt4pairIRN19EventManagerCM4Task11EEventQueueERP15QueueDefinitionEEONSt16remove_referenceIT_E4typeEOSA_>:
    move(_Tp&& __t) noexcept
 81065be:	b480      	push	{r7}
 81065c0:	b083      	sub	sp, #12
 81065c2:	af00      	add	r7, sp, #0
 81065c4:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 81065c6:	687b      	ldr	r3, [r7, #4]
 81065c8:	4618      	mov	r0, r3
 81065ca:	370c      	adds	r7, #12
 81065cc:	46bd      	mov	sp, r7
 81065ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 81065d2:	4770      	bx	lr

081065d4 <_ZNSt10__pair_getILj0EE10__move_getIRN19EventManagerCM4Task11EEventQueueERP15QueueDefinitionEEOT_OSt4pairIS8_T0_E>:
	__move_get(pair<_Tp1, _Tp2>&& __pair) noexcept
 81065d4:	b580      	push	{r7, lr}
 81065d6:	b082      	sub	sp, #8
 81065d8:	af00      	add	r7, sp, #0
 81065da:	6078      	str	r0, [r7, #4]
	{ return std::forward<_Tp1>(__pair.first); }
 81065dc:	687b      	ldr	r3, [r7, #4]
 81065de:	681b      	ldr	r3, [r3, #0]
 81065e0:	4618      	mov	r0, r3
 81065e2:	f000 f852 	bl	810668a <_ZSt7forwardIRN19EventManagerCM4Task11EEventQueueEEOT_RNSt16remove_referenceIS3_E4typeE>
 81065e6:	4603      	mov	r3, r0
 81065e8:	4618      	mov	r0, r3
 81065ea:	3708      	adds	r7, #8
 81065ec:	46bd      	mov	sp, r7
 81065ee:	bd80      	pop	{r7, pc}

081065f0 <_ZNSt10__pair_getILj1EE10__move_getIRN19EventManagerCM4Task11EEventQueueERP15QueueDefinitionEEOT0_OSt4pairIT_S8_E>:
	__move_get(pair<_Tp1, _Tp2>&& __pair) noexcept
 81065f0:	b580      	push	{r7, lr}
 81065f2:	b082      	sub	sp, #8
 81065f4:	af00      	add	r7, sp, #0
 81065f6:	6078      	str	r0, [r7, #4]
	{ return std::forward<_Tp2>(__pair.second); }
 81065f8:	687b      	ldr	r3, [r7, #4]
 81065fa:	685b      	ldr	r3, [r3, #4]
 81065fc:	4618      	mov	r0, r3
 81065fe:	f000 f84f 	bl	81066a0 <_ZSt7forwardIRP15QueueDefinitionEOT_RNSt16remove_referenceIS3_E4typeE>
 8106602:	4603      	mov	r3, r0
 8106604:	4618      	mov	r0, r3
 8106606:	3708      	adds	r7, #8
 8106608:	46bd      	mov	sp, r7
 810660a:	bd80      	pop	{r7, pc}

0810660c <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEE11lower_boundERS7_>:
       *  that matches the given key.  If unsuccessful it returns an iterator
       *  pointing to the first element that has a greater value than given key
       *  or end() if no such element exists.
       */
      iterator
      lower_bound(const key_type& __x)
 810660c:	b580      	push	{r7, lr}
 810660e:	b082      	sub	sp, #8
 8106610:	af00      	add	r7, sp, #0
 8106612:	6078      	str	r0, [r7, #4]
 8106614:	6039      	str	r1, [r7, #0]
      { return _M_t.lower_bound(__x); }
 8106616:	687b      	ldr	r3, [r7, #4]
 8106618:	6839      	ldr	r1, [r7, #0]
 810661a:	4618      	mov	r0, r3
 810661c:	f000 fb58 	bl	8106cd0 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11lower_boundERS3_>
 8106620:	4603      	mov	r3, r0
 8106622:	4618      	mov	r0, r3
 8106624:	3708      	adds	r7, #8
 8106626:	46bd      	mov	sp, r7
 8106628:	bd80      	pop	{r7, pc}

0810662a <_ZNKSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEE8key_compEv>:
      key_comp() const
 810662a:	b590      	push	{r4, r7, lr}
 810662c:	b083      	sub	sp, #12
 810662e:	af00      	add	r7, sp, #0
 8106630:	6078      	str	r0, [r7, #4]
      { return _M_t.key_comp(); }
 8106632:	687b      	ldr	r3, [r7, #4]
 8106634:	4618      	mov	r0, r3
 8106636:	f000 fb62 	bl	8106cfe <_ZNKSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8key_compEv>
 810663a:	bf00      	nop
 810663c:	4620      	mov	r0, r4
 810663e:	370c      	adds	r7, #12
 8106640:	46bd      	mov	sp, r7
 8106642:	bd90      	pop	{r4, r7, pc}

08106644 <_ZNKSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8106644:	b580      	push	{r7, lr}
 8106646:	b082      	sub	sp, #8
 8106648:	af00      	add	r7, sp, #0
 810664a:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Link_type>(_M_node)->_M_valptr(); }
 810664c:	687b      	ldr	r3, [r7, #4]
 810664e:	681b      	ldr	r3, [r3, #0]
 8106650:	4618      	mov	r0, r3
 8106652:	f000 fb5f 	bl	8106d14 <_ZNSt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEE9_M_valptrEv>
 8106656:	4603      	mov	r3, r0
 8106658:	4618      	mov	r0, r3
 810665a:	3708      	adds	r7, #8
 810665c:	46bd      	mov	sp, r7
 810665e:	bd80      	pop	{r7, pc}

08106660 <_ZNKSt4lessIN19EventManagerCM4Task11EEventQueueEEclERKS1_S4_>:
  template<typename _Tp>
    struct less : public binary_function<_Tp, _Tp, bool>
    {
      _GLIBCXX14_CONSTEXPR
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
 8106660:	b480      	push	{r7}
 8106662:	b085      	sub	sp, #20
 8106664:	af00      	add	r7, sp, #0
 8106666:	60f8      	str	r0, [r7, #12]
 8106668:	60b9      	str	r1, [r7, #8]
 810666a:	607a      	str	r2, [r7, #4]
      { return __x < __y; }
 810666c:	68bb      	ldr	r3, [r7, #8]
 810666e:	781a      	ldrb	r2, [r3, #0]
 8106670:	687b      	ldr	r3, [r7, #4]
 8106672:	781b      	ldrb	r3, [r3, #0]
 8106674:	429a      	cmp	r2, r3
 8106676:	bf34      	ite	cc
 8106678:	2301      	movcc	r3, #1
 810667a:	2300      	movcs	r3, #0
 810667c:	b2db      	uxtb	r3, r3
 810667e:	4618      	mov	r0, r3
 8106680:	3714      	adds	r7, #20
 8106682:	46bd      	mov	sp, r7
 8106684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106688:	4770      	bx	lr

0810668a <_ZSt7forwardIRN19EventManagerCM4Task11EEventQueueEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 810668a:	b480      	push	{r7}
 810668c:	b083      	sub	sp, #12
 810668e:	af00      	add	r7, sp, #0
 8106690:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8106692:	687b      	ldr	r3, [r7, #4]
 8106694:	4618      	mov	r0, r3
 8106696:	370c      	adds	r7, #12
 8106698:	46bd      	mov	sp, r7
 810669a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810669e:	4770      	bx	lr

081066a0 <_ZSt7forwardIRP15QueueDefinitionEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 81066a0:	b480      	push	{r7}
 81066a2:	b083      	sub	sp, #12
 81066a4:	af00      	add	r7, sp, #0
 81066a6:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 81066a8:	687b      	ldr	r3, [r7, #4]
 81066aa:	4618      	mov	r0, r3
 81066ac:	370c      	adds	r7, #12
 81066ae:	46bd      	mov	sp, r7
 81066b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81066b4:	4770      	bx	lr

081066b6 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEC1ERKSt17_Rb_tree_iteratorIS6_E>:
      _Rb_tree_const_iterator(const iterator& __it) _GLIBCXX_NOEXCEPT
 81066b6:	b480      	push	{r7}
 81066b8:	b083      	sub	sp, #12
 81066ba:	af00      	add	r7, sp, #0
 81066bc:	6078      	str	r0, [r7, #4]
 81066be:	6039      	str	r1, [r7, #0]
      : _M_node(__it._M_node) { }
 81066c0:	683b      	ldr	r3, [r7, #0]
 81066c2:	681a      	ldr	r2, [r3, #0]
 81066c4:	687b      	ldr	r3, [r7, #4]
 81066c6:	601a      	str	r2, [r3, #0]
 81066c8:	687b      	ldr	r3, [r7, #4]
 81066ca:	4618      	mov	r0, r3
 81066cc:	370c      	adds	r7, #12
 81066ce:	46bd      	mov	sp, r7
 81066d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81066d4:	4770      	bx	lr

081066d6 <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEE12emplace_hintIJRS1_RS3_EEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EDpOT_>:
	emplace_hint(const_iterator __pos, _Args&&... __args)
 81066d6:	b5b0      	push	{r4, r5, r7, lr}
 81066d8:	b084      	sub	sp, #16
 81066da:	af00      	add	r7, sp, #0
 81066dc:	60f8      	str	r0, [r7, #12]
 81066de:	60b9      	str	r1, [r7, #8]
 81066e0:	607a      	str	r2, [r7, #4]
 81066e2:	603b      	str	r3, [r7, #0]
	  return _M_t._M_emplace_hint_unique(__pos,
 81066e4:	68fc      	ldr	r4, [r7, #12]
 81066e6:	6878      	ldr	r0, [r7, #4]
 81066e8:	f7ff ffcf 	bl	810668a <_ZSt7forwardIRN19EventManagerCM4Task11EEventQueueEEOT_RNSt16remove_referenceIS3_E4typeE>
 81066ec:	4605      	mov	r5, r0
 81066ee:	6838      	ldr	r0, [r7, #0]
 81066f0:	f7ff ffd6 	bl	81066a0 <_ZSt7forwardIRP15QueueDefinitionEOT_RNSt16remove_referenceIS3_E4typeE>
 81066f4:	4603      	mov	r3, r0
 81066f6:	462a      	mov	r2, r5
 81066f8:	68b9      	ldr	r1, [r7, #8]
 81066fa:	4620      	mov	r0, r4
 81066fc:	f000 fb18 	bl	8106d30 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE22_M_emplace_hint_uniqueIJRS1_RS5_EEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EDpOT_>
 8106700:	4603      	mov	r3, r0
	}
 8106702:	4618      	mov	r0, r3
 8106704:	3710      	adds	r7, #16
 8106706:	46bd      	mov	sp, r7
 8106708:	bdb0      	pop	{r4, r5, r7, pc}

0810670a <_ZNSt4pairISt17_Rb_tree_iteratorIS_IKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEbEC1IRS7_bEEOT_OT0_>:
	pair(_U1&& __x, _U2&& __y)
 810670a:	b580      	push	{r7, lr}
 810670c:	b084      	sub	sp, #16
 810670e:	af00      	add	r7, sp, #0
 8106710:	60f8      	str	r0, [r7, #12]
 8106712:	60b9      	str	r1, [r7, #8]
 8106714:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y))
 8106716:	68b8      	ldr	r0, [r7, #8]
 8106718:	f000 fb4a 	bl	8106db0 <_ZSt7forwardIRSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEEOT_RNSt16remove_referenceISA_E4typeE>
 810671c:	4602      	mov	r2, r0
 810671e:	68fb      	ldr	r3, [r7, #12]
 8106720:	6812      	ldr	r2, [r2, #0]
 8106722:	601a      	str	r2, [r3, #0]
 8106724:	6878      	ldr	r0, [r7, #4]
 8106726:	f7fb f847 	bl	81017b8 <_ZSt7forwardIbEOT_RNSt16remove_referenceIS0_E4typeE>
 810672a:	4603      	mov	r3, r0
 810672c:	781a      	ldrb	r2, [r3, #0]
 810672e:	68fb      	ldr	r3, [r7, #12]
 8106730:	711a      	strb	r2, [r3, #4]
	{ }
 8106732:	68fb      	ldr	r3, [r7, #12]
 8106734:	4618      	mov	r0, r3
 8106736:	3710      	adds	r7, #16
 8106738:	46bd      	mov	sp, r7
 810673a:	bd80      	pop	{r7, pc}

0810673c <_ZNSt12_Vector_baseI8SMessageSaIS0_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 810673c:	b480      	push	{r7}
 810673e:	b083      	sub	sp, #12
 8106740:	af00      	add	r7, sp, #0
 8106742:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8106744:	687b      	ldr	r3, [r7, #4]
 8106746:	4618      	mov	r0, r3
 8106748:	370c      	adds	r7, #12
 810674a:	46bd      	mov	sp, r7
 810674c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106750:	4770      	bx	lr

08106752 <_ZSt8_DestroyIP8SMessageS0_EvT_S2_RSaIT0_E>:
    }

  template<typename _ForwardIterator, typename _Tp>
    _GLIBCXX20_CONSTEXPR
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8106752:	b580      	push	{r7, lr}
 8106754:	b084      	sub	sp, #16
 8106756:	af00      	add	r7, sp, #0
 8106758:	60f8      	str	r0, [r7, #12]
 810675a:	60b9      	str	r1, [r7, #8]
 810675c:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 810675e:	68b9      	ldr	r1, [r7, #8]
 8106760:	68f8      	ldr	r0, [r7, #12]
 8106762:	f000 fc2b 	bl	8106fbc <_ZSt8_DestroyIP8SMessageEvT_S2_>
    }
 8106766:	bf00      	nop
 8106768:	3710      	adds	r7, #16
 810676a:	46bd      	mov	sp, r7
 810676c:	bd80      	pop	{r7, pc}

0810676e <_ZNSt12_Vector_baseI8SMessageSaIS0_EE13_M_deallocateEPS0_j>:
      _M_deallocate(pointer __p, size_t __n)
 810676e:	b580      	push	{r7, lr}
 8106770:	b084      	sub	sp, #16
 8106772:	af00      	add	r7, sp, #0
 8106774:	60f8      	str	r0, [r7, #12]
 8106776:	60b9      	str	r1, [r7, #8]
 8106778:	607a      	str	r2, [r7, #4]
	if (__p)
 810677a:	68bb      	ldr	r3, [r7, #8]
 810677c:	2b00      	cmp	r3, #0
 810677e:	d005      	beq.n	810678c <_ZNSt12_Vector_baseI8SMessageSaIS0_EE13_M_deallocateEPS0_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8106780:	68fb      	ldr	r3, [r7, #12]
 8106782:	687a      	ldr	r2, [r7, #4]
 8106784:	68b9      	ldr	r1, [r7, #8]
 8106786:	4618      	mov	r0, r3
 8106788:	f000 fc2e 	bl	8106fe8 <_ZNSt16allocator_traitsISaI8SMessageEE10deallocateERS1_PS0_j>
      }
 810678c:	bf00      	nop
 810678e:	3710      	adds	r7, #16
 8106790:	46bd      	mov	sp, r7
 8106792:	bd80      	pop	{r7, pc}

08106794 <_ZNSt16allocator_traitsISaI8SMessageEE9constructIS0_JRKS0_EEEvRS1_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8106794:	b580      	push	{r7, lr}
 8106796:	b084      	sub	sp, #16
 8106798:	af00      	add	r7, sp, #0
 810679a:	60f8      	str	r0, [r7, #12]
 810679c:	60b9      	str	r1, [r7, #8]
 810679e:	607a      	str	r2, [r7, #4]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 81067a0:	6878      	ldr	r0, [r7, #4]
 81067a2:	f000 fc40 	bl	8107026 <_ZSt7forwardIRK8SMessageEOT_RNSt16remove_referenceIS3_E4typeE>
 81067a6:	4603      	mov	r3, r0
 81067a8:	4619      	mov	r1, r3
 81067aa:	68b8      	ldr	r0, [r7, #8]
 81067ac:	f000 fc46 	bl	810703c <_ZSt12construct_atI8SMessageJRKS0_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS4_DpOS5_>
	}
 81067b0:	bf00      	nop
 81067b2:	3710      	adds	r7, #16
 81067b4:	46bd      	mov	sp, r7
 81067b6:	bd80      	pop	{r7, pc}

081067b8 <_ZNSt6vectorI8SMessageSaIS0_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 81067b8:	b580      	push	{r7, lr}
 81067ba:	b084      	sub	sp, #16
 81067bc:	af00      	add	r7, sp, #0
 81067be:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 81067c0:	687b      	ldr	r3, [r7, #4]
 81067c2:	1d1a      	adds	r2, r3, #4
 81067c4:	f107 030c 	add.w	r3, r7, #12
 81067c8:	4611      	mov	r1, r2
 81067ca:	4618      	mov	r0, r3
 81067cc:	f000 fc52 	bl	8107074 <_ZN9__gnu_cxx17__normal_iteratorIP8SMessageSt6vectorIS1_SaIS1_EEEC1ERKS2_>
 81067d0:	68fb      	ldr	r3, [r7, #12]
 81067d2:	4618      	mov	r0, r3
 81067d4:	3710      	adds	r7, #16
 81067d6:	46bd      	mov	sp, r7
 81067d8:	bd80      	pop	{r7, pc}
	...

081067dc <_ZNKSt6vectorI8SMessageSaIS0_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 81067dc:	b480      	push	{r7}
 81067de:	b083      	sub	sp, #12
 81067e0:	af00      	add	r7, sp, #0
 81067e2:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 81067e4:	687b      	ldr	r3, [r7, #4]
 81067e6:	685a      	ldr	r2, [r3, #4]
 81067e8:	687b      	ldr	r3, [r7, #4]
 81067ea:	681b      	ldr	r3, [r3, #0]
 81067ec:	1ad3      	subs	r3, r2, r3
 81067ee:	109b      	asrs	r3, r3, #2
 81067f0:	4a04      	ldr	r2, [pc, #16]	@ (8106804 <_ZNKSt6vectorI8SMessageSaIS0_EE4sizeEv+0x28>)
 81067f2:	fb02 f303 	mul.w	r3, r2, r3
 81067f6:	4618      	mov	r0, r3
 81067f8:	370c      	adds	r7, #12
 81067fa:	46bd      	mov	sp, r7
 81067fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106800:	4770      	bx	lr
 8106802:	bf00      	nop
 8106804:	b6db6db7 	.word	0xb6db6db7

08106808 <_ZSt3maxIjERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
 8106808:	b480      	push	{r7}
 810680a:	b083      	sub	sp, #12
 810680c:	af00      	add	r7, sp, #0
 810680e:	6078      	str	r0, [r7, #4]
 8106810:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 8106812:	687b      	ldr	r3, [r7, #4]
 8106814:	681a      	ldr	r2, [r3, #0]
 8106816:	683b      	ldr	r3, [r7, #0]
 8106818:	681b      	ldr	r3, [r3, #0]
 810681a:	429a      	cmp	r2, r3
 810681c:	d201      	bcs.n	8106822 <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 810681e:	683b      	ldr	r3, [r7, #0]
 8106820:	e000      	b.n	8106824 <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 8106822:	687b      	ldr	r3, [r7, #4]
    }
 8106824:	4618      	mov	r0, r3
 8106826:	370c      	adds	r7, #12
 8106828:	46bd      	mov	sp, r7
 810682a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810682e:	4770      	bx	lr

08106830 <_ZNKSt6vectorI8SMessageSaIS0_EE12_M_check_lenEjPKc>:
#endif

      // Called by _M_fill_insert, _M_insert_aux etc.
      _GLIBCXX20_CONSTEXPR
      size_type
      _M_check_len(size_type __n, const char* __s) const
 8106830:	b590      	push	{r4, r7, lr}
 8106832:	b087      	sub	sp, #28
 8106834:	af00      	add	r7, sp, #0
 8106836:	60f8      	str	r0, [r7, #12]
 8106838:	60b9      	str	r1, [r7, #8]
 810683a:	607a      	str	r2, [r7, #4]
      {
	if (max_size() - size() < __n)
 810683c:	68f8      	ldr	r0, [r7, #12]
 810683e:	f000 fc29 	bl	8107094 <_ZNKSt6vectorI8SMessageSaIS0_EE8max_sizeEv>
 8106842:	4604      	mov	r4, r0
 8106844:	68f8      	ldr	r0, [r7, #12]
 8106846:	f7ff ffc9 	bl	81067dc <_ZNKSt6vectorI8SMessageSaIS0_EE4sizeEv>
 810684a:	4603      	mov	r3, r0
 810684c:	1ae2      	subs	r2, r4, r3
 810684e:	68bb      	ldr	r3, [r7, #8]
 8106850:	429a      	cmp	r2, r3
 8106852:	bf34      	ite	cc
 8106854:	2301      	movcc	r3, #1
 8106856:	2300      	movcs	r3, #0
 8106858:	b2db      	uxtb	r3, r3
 810685a:	2b00      	cmp	r3, #0
 810685c:	d002      	beq.n	8106864 <_ZNKSt6vectorI8SMessageSaIS0_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 810685e:	6878      	ldr	r0, [r7, #4]
 8106860:	f01c fa57 	bl	8122d12 <_ZSt20__throw_length_errorPKc>

	const size_type __len = size() + (std::max)(size(), __n);
 8106864:	68f8      	ldr	r0, [r7, #12]
 8106866:	f7ff ffb9 	bl	81067dc <_ZNKSt6vectorI8SMessageSaIS0_EE4sizeEv>
 810686a:	4604      	mov	r4, r0
 810686c:	68f8      	ldr	r0, [r7, #12]
 810686e:	f7ff ffb5 	bl	81067dc <_ZNKSt6vectorI8SMessageSaIS0_EE4sizeEv>
 8106872:	4603      	mov	r3, r0
 8106874:	613b      	str	r3, [r7, #16]
 8106876:	f107 0208 	add.w	r2, r7, #8
 810687a:	f107 0310 	add.w	r3, r7, #16
 810687e:	4611      	mov	r1, r2
 8106880:	4618      	mov	r0, r3
 8106882:	f7ff ffc1 	bl	8106808 <_ZSt3maxIjERKT_S2_S2_>
 8106886:	4603      	mov	r3, r0
 8106888:	681b      	ldr	r3, [r3, #0]
 810688a:	4423      	add	r3, r4
 810688c:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 810688e:	68f8      	ldr	r0, [r7, #12]
 8106890:	f7ff ffa4 	bl	81067dc <_ZNKSt6vectorI8SMessageSaIS0_EE4sizeEv>
 8106894:	4602      	mov	r2, r0
 8106896:	697b      	ldr	r3, [r7, #20]
 8106898:	4293      	cmp	r3, r2
 810689a:	d306      	bcc.n	81068aa <_ZNKSt6vectorI8SMessageSaIS0_EE12_M_check_lenEjPKc+0x7a>
 810689c:	68f8      	ldr	r0, [r7, #12]
 810689e:	f000 fbf9 	bl	8107094 <_ZNKSt6vectorI8SMessageSaIS0_EE8max_sizeEv>
 81068a2:	4602      	mov	r2, r0
 81068a4:	697b      	ldr	r3, [r7, #20]
 81068a6:	4293      	cmp	r3, r2
 81068a8:	d904      	bls.n	81068b4 <_ZNKSt6vectorI8SMessageSaIS0_EE12_M_check_lenEjPKc+0x84>
 81068aa:	68f8      	ldr	r0, [r7, #12]
 81068ac:	f000 fbf2 	bl	8107094 <_ZNKSt6vectorI8SMessageSaIS0_EE8max_sizeEv>
 81068b0:	4603      	mov	r3, r0
 81068b2:	e000      	b.n	81068b6 <_ZNKSt6vectorI8SMessageSaIS0_EE12_M_check_lenEjPKc+0x86>
 81068b4:	697b      	ldr	r3, [r7, #20]
      }
 81068b6:	4618      	mov	r0, r3
 81068b8:	371c      	adds	r7, #28
 81068ba:	46bd      	mov	sp, r7
 81068bc:	bd90      	pop	{r4, r7, pc}
	...

081068c0 <_ZN9__gnu_cxxmiIP8SMessageSt6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS9_SC_>:
    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
    _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 81068c0:	b590      	push	{r4, r7, lr}
 81068c2:	b083      	sub	sp, #12
 81068c4:	af00      	add	r7, sp, #0
 81068c6:	6078      	str	r0, [r7, #4]
 81068c8:	6039      	str	r1, [r7, #0]
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
 81068ca:	6878      	ldr	r0, [r7, #4]
 81068cc:	f000 fbf3 	bl	81070b6 <_ZNK9__gnu_cxx17__normal_iteratorIP8SMessageSt6vectorIS1_SaIS1_EEE4baseEv>
 81068d0:	4603      	mov	r3, r0
 81068d2:	681c      	ldr	r4, [r3, #0]
 81068d4:	6838      	ldr	r0, [r7, #0]
 81068d6:	f000 fbee 	bl	81070b6 <_ZNK9__gnu_cxx17__normal_iteratorIP8SMessageSt6vectorIS1_SaIS1_EEE4baseEv>
 81068da:	4603      	mov	r3, r0
 81068dc:	681b      	ldr	r3, [r3, #0]
 81068de:	1ae3      	subs	r3, r4, r3
 81068e0:	109b      	asrs	r3, r3, #2
 81068e2:	4a03      	ldr	r2, [pc, #12]	@ (81068f0 <_ZN9__gnu_cxxmiIP8SMessageSt6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS9_SC_+0x30>)
 81068e4:	fb02 f303 	mul.w	r3, r2, r3
 81068e8:	4618      	mov	r0, r3
 81068ea:	370c      	adds	r7, #12
 81068ec:	46bd      	mov	sp, r7
 81068ee:	bd90      	pop	{r4, r7, pc}
 81068f0:	b6db6db7 	.word	0xb6db6db7

081068f4 <_ZNSt6vectorI8SMessageSaIS0_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 81068f4:	b580      	push	{r7, lr}
 81068f6:	b084      	sub	sp, #16
 81068f8:	af00      	add	r7, sp, #0
 81068fa:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 81068fc:	687a      	ldr	r2, [r7, #4]
 81068fe:	f107 030c 	add.w	r3, r7, #12
 8106902:	4611      	mov	r1, r2
 8106904:	4618      	mov	r0, r3
 8106906:	f000 fbb5 	bl	8107074 <_ZN9__gnu_cxx17__normal_iteratorIP8SMessageSt6vectorIS1_SaIS1_EEEC1ERKS2_>
 810690a:	68fb      	ldr	r3, [r7, #12]
 810690c:	4618      	mov	r0, r3
 810690e:	3710      	adds	r7, #16
 8106910:	46bd      	mov	sp, r7
 8106912:	bd80      	pop	{r7, pc}

08106914 <_ZNSt6vectorI8SMessageSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>:
#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      _GLIBCXX20_CONSTEXPR
      void
      vector<_Tp, _Alloc>::
 8106914:	b5b0      	push	{r4, r5, r7, lr}
 8106916:	b08c      	sub	sp, #48	@ 0x30
 8106918:	af00      	add	r7, sp, #0
 810691a:	60f8      	str	r0, [r7, #12]
 810691c:	60b9      	str	r1, [r7, #8]
 810691e:	607a      	str	r2, [r7, #4]
    vector<_Tp, _Alloc>::
    _M_realloc_insert(iterator __position, const _Tp& __x)
#endif
    {
      const size_type __len =
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 8106920:	4a3f      	ldr	r2, [pc, #252]	@ (8106a20 <_ZNSt6vectorI8SMessageSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x10c>)
 8106922:	2101      	movs	r1, #1
 8106924:	68f8      	ldr	r0, [r7, #12]
 8106926:	f7ff ff83 	bl	8106830 <_ZNKSt6vectorI8SMessageSaIS0_EE12_M_check_lenEjPKc>
 810692a:	62f8      	str	r0, [r7, #44]	@ 0x2c
      pointer __old_start = this->_M_impl._M_start;
 810692c:	68fb      	ldr	r3, [r7, #12]
 810692e:	681b      	ldr	r3, [r3, #0]
 8106930:	62bb      	str	r3, [r7, #40]	@ 0x28
      pointer __old_finish = this->_M_impl._M_finish;
 8106932:	68fb      	ldr	r3, [r7, #12]
 8106934:	685b      	ldr	r3, [r3, #4]
 8106936:	627b      	str	r3, [r7, #36]	@ 0x24
      const size_type __elems_before = __position - begin();
 8106938:	68f8      	ldr	r0, [r7, #12]
 810693a:	f7ff ffdb 	bl	81068f4 <_ZNSt6vectorI8SMessageSaIS0_EE5beginEv>
 810693e:	4603      	mov	r3, r0
 8106940:	617b      	str	r3, [r7, #20]
 8106942:	f107 0214 	add.w	r2, r7, #20
 8106946:	f107 0308 	add.w	r3, r7, #8
 810694a:	4611      	mov	r1, r2
 810694c:	4618      	mov	r0, r3
 810694e:	f7ff ffb7 	bl	81068c0 <_ZN9__gnu_cxxmiIP8SMessageSt6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS9_SC_>
 8106952:	4603      	mov	r3, r0
 8106954:	623b      	str	r3, [r7, #32]
      pointer __new_start(this->_M_allocate(__len));
 8106956:	68fb      	ldr	r3, [r7, #12]
 8106958:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 810695a:	4618      	mov	r0, r3
 810695c:	f000 fbb6 	bl	81070cc <_ZNSt12_Vector_baseI8SMessageSaIS0_EE11_M_allocateEj>
 8106960:	61f8      	str	r0, [r7, #28]
      pointer __new_finish(__new_start);
 8106962:	69fb      	ldr	r3, [r7, #28]
 8106964:	61bb      	str	r3, [r7, #24]
	  // The order of the three operations is dictated by the C++11
	  // case, where the moves could alter a new element belonging
	  // to the existing vector.  This is an issue only for callers
	  // taking the element by lvalue ref (see last bullet of C++11
	  // [res.on.arguments]).
	  _Alloc_traits::construct(this->_M_impl,
 8106966:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 8106968:	6a3a      	ldr	r2, [r7, #32]
 810696a:	4613      	mov	r3, r2
 810696c:	00db      	lsls	r3, r3, #3
 810696e:	1a9b      	subs	r3, r3, r2
 8106970:	009b      	lsls	r3, r3, #2
 8106972:	461a      	mov	r2, r3
	  _Alloc_traits::construct(this->_M_impl,
 8106974:	69fb      	ldr	r3, [r7, #28]
 8106976:	189d      	adds	r5, r3, r2
 8106978:	6878      	ldr	r0, [r7, #4]
 810697a:	f000 fb54 	bl	8107026 <_ZSt7forwardIRK8SMessageEOT_RNSt16remove_referenceIS3_E4typeE>
 810697e:	4603      	mov	r3, r0
 8106980:	461a      	mov	r2, r3
 8106982:	4629      	mov	r1, r5
 8106984:	4620      	mov	r0, r4
 8106986:	f7ff ff05 	bl	8106794 <_ZNSt16allocator_traitsISaI8SMessageEE9constructIS0_JRKS0_EEEvRS1_PT_DpOT0_>
#if __cplusplus >= 201103L
				   std::forward<_Args>(__args)...);
#else
				   __x);
#endif
	  __new_finish = pointer();
 810698a:	2300      	movs	r3, #0
 810698c:	61bb      	str	r3, [r7, #24]

#if __cplusplus >= 201103L
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
	    {
	      __new_finish = _S_relocate(__old_start, __position.base(),
 810698e:	f107 0308 	add.w	r3, r7, #8
 8106992:	4618      	mov	r0, r3
 8106994:	f000 fb8f 	bl	81070b6 <_ZNK9__gnu_cxx17__normal_iteratorIP8SMessageSt6vectorIS1_SaIS1_EEE4baseEv>
 8106998:	4603      	mov	r3, r0
 810699a:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 810699c:	68fb      	ldr	r3, [r7, #12]
 810699e:	4618      	mov	r0, r3
 81069a0:	f7ff fecc 	bl	810673c <_ZNSt12_Vector_baseI8SMessageSaIS0_EE19_M_get_Tp_allocatorEv>
 81069a4:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 81069a6:	69fa      	ldr	r2, [r7, #28]
 81069a8:	4621      	mov	r1, r4
 81069aa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 81069ac:	f000 fba2 	bl	81070f4 <_ZNSt6vectorI8SMessageSaIS0_EE11_S_relocateEPS0_S3_S3_RS1_>
 81069b0:	61b8      	str	r0, [r7, #24]

	      ++__new_finish;
 81069b2:	69bb      	ldr	r3, [r7, #24]
 81069b4:	331c      	adds	r3, #28
 81069b6:	61bb      	str	r3, [r7, #24]

	      __new_finish = _S_relocate(__position.base(), __old_finish,
 81069b8:	f107 0308 	add.w	r3, r7, #8
 81069bc:	4618      	mov	r0, r3
 81069be:	f000 fb7a 	bl	81070b6 <_ZNK9__gnu_cxx17__normal_iteratorIP8SMessageSt6vectorIS1_SaIS1_EEE4baseEv>
 81069c2:	4603      	mov	r3, r0
 81069c4:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 81069c6:	68fb      	ldr	r3, [r7, #12]
 81069c8:	4618      	mov	r0, r3
 81069ca:	f7ff feb7 	bl	810673c <_ZNSt12_Vector_baseI8SMessageSaIS0_EE19_M_get_Tp_allocatorEv>
 81069ce:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 81069d0:	69ba      	ldr	r2, [r7, #24]
 81069d2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 81069d4:	4620      	mov	r0, r4
 81069d6:	f000 fb8d 	bl	81070f4 <_ZNSt6vectorI8SMessageSaIS0_EE11_S_relocateEPS0_S3_S3_RS1_>
 81069da:	61b8      	str	r0, [r7, #24]
#if __cplusplus >= 201103L
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
#endif
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
      _GLIBCXX_ASAN_ANNOTATE_REINIT;
      _M_deallocate(__old_start,
 81069dc:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 81069de:	68fb      	ldr	r3, [r7, #12]
 81069e0:	689a      	ldr	r2, [r3, #8]
 81069e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81069e4:	1ad3      	subs	r3, r2, r3
 81069e6:	109b      	asrs	r3, r3, #2
 81069e8:	4a0e      	ldr	r2, [pc, #56]	@ (8106a24 <_ZNSt6vectorI8SMessageSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x110>)
 81069ea:	fb02 f303 	mul.w	r3, r2, r3
      _M_deallocate(__old_start,
 81069ee:	461a      	mov	r2, r3
 81069f0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 81069f2:	f7ff febc 	bl	810676e <_ZNSt12_Vector_baseI8SMessageSaIS0_EE13_M_deallocateEPS0_j>
      this->_M_impl._M_start = __new_start;
 81069f6:	68fb      	ldr	r3, [r7, #12]
 81069f8:	69fa      	ldr	r2, [r7, #28]
 81069fa:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 81069fc:	68fb      	ldr	r3, [r7, #12]
 81069fe:	69ba      	ldr	r2, [r7, #24]
 8106a00:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8106a02:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8106a04:	4613      	mov	r3, r2
 8106a06:	00db      	lsls	r3, r3, #3
 8106a08:	1a9b      	subs	r3, r3, r2
 8106a0a:	009b      	lsls	r3, r3, #2
 8106a0c:	461a      	mov	r2, r3
 8106a0e:	69fb      	ldr	r3, [r7, #28]
 8106a10:	441a      	add	r2, r3
 8106a12:	68fb      	ldr	r3, [r7, #12]
 8106a14:	609a      	str	r2, [r3, #8]
    }
 8106a16:	bf00      	nop
 8106a18:	3730      	adds	r7, #48	@ 0x30
 8106a1a:	46bd      	mov	sp, r7
 8106a1c:	bdb0      	pop	{r4, r5, r7, pc}
 8106a1e:	bf00      	nop
 8106a20:	08125330 	.word	0x08125330
 8106a24:	b6db6db7 	.word	0xb6db6db7

08106a28 <_ZN9__gnu_cxx17__normal_iteratorIPK8SMessageSt6vectorIS1_SaIS1_EEEC1ERKS3_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8106a28:	b480      	push	{r7}
 8106a2a:	b083      	sub	sp, #12
 8106a2c:	af00      	add	r7, sp, #0
 8106a2e:	6078      	str	r0, [r7, #4]
 8106a30:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8106a32:	683b      	ldr	r3, [r7, #0]
 8106a34:	681a      	ldr	r2, [r3, #0]
 8106a36:	687b      	ldr	r3, [r7, #4]
 8106a38:	601a      	str	r2, [r3, #0]
 8106a3a:	687b      	ldr	r3, [r7, #4]
 8106a3c:	4618      	mov	r0, r3
 8106a3e:	370c      	adds	r7, #12
 8106a40:	46bd      	mov	sp, r7
 8106a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106a46:	4770      	bx	lr

08106a48 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4findERS3_>:

  template<typename _Key, typename _Val, typename _KeyOfValue,
	   typename _Compare, typename _Alloc>
    typename _Rb_tree<_Key, _Val, _KeyOfValue,
		      _Compare, _Alloc>::iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8106a48:	b590      	push	{r4, r7, lr}
 8106a4a:	b085      	sub	sp, #20
 8106a4c:	af00      	add	r7, sp, #0
 8106a4e:	6078      	str	r0, [r7, #4]
 8106a50:	6039      	str	r1, [r7, #0]
    find(const _Key& __k)
    {
      iterator __j = _M_lower_bound(_M_begin(), _M_end(), __k);
 8106a52:	6878      	ldr	r0, [r7, #4]
 8106a54:	f7ff fda7 	bl	81065a6 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_beginEv>
 8106a58:	4604      	mov	r4, r0
 8106a5a:	6878      	ldr	r0, [r7, #4]
 8106a5c:	f000 fb68 	bl	8107130 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>
 8106a60:	4602      	mov	r2, r0
 8106a62:	683b      	ldr	r3, [r7, #0]
 8106a64:	4621      	mov	r1, r4
 8106a66:	6878      	ldr	r0, [r7, #4]
 8106a68:	f000 fb6e 	bl	8107148 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_>
 8106a6c:	4603      	mov	r3, r0
 8106a6e:	60bb      	str	r3, [r7, #8]
      return (__j == end()
 8106a70:	6878      	ldr	r0, [r7, #4]
 8106a72:	f000 f825 	bl	8106ac0 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE3endEv>
 8106a76:	4603      	mov	r3, r0
 8106a78:	60fb      	str	r3, [r7, #12]
 8106a7a:	f107 020c 	add.w	r2, r7, #12
 8106a7e:	f107 0308 	add.w	r3, r7, #8
 8106a82:	4611      	mov	r1, r2
 8106a84:	4618      	mov	r0, r3
 8106a86:	f7ff fca7 	bl	81063d8 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEES9_>
 8106a8a:	4603      	mov	r3, r0
	      || _M_impl._M_key_compare(__k,
					_S_key(__j._M_node))) ? end() : __j;
 8106a8c:	2b00      	cmp	r3, #0
 8106a8e:	d10d      	bne.n	8106aac <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4findERS3_+0x64>
	      || _M_impl._M_key_compare(__k,
 8106a90:	687c      	ldr	r4, [r7, #4]
					_S_key(__j._M_node))) ? end() : __j;
 8106a92:	68bb      	ldr	r3, [r7, #8]
	      || _M_impl._M_key_compare(__k,
 8106a94:	4618      	mov	r0, r3
 8106a96:	f000 fb88 	bl	81071aa <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8106a9a:	4603      	mov	r3, r0
 8106a9c:	461a      	mov	r2, r3
 8106a9e:	6839      	ldr	r1, [r7, #0]
 8106aa0:	4620      	mov	r0, r4
 8106aa2:	f7ff fddd 	bl	8106660 <_ZNKSt4lessIN19EventManagerCM4Task11EEventQueueEEclERKS1_S4_>
 8106aa6:	4603      	mov	r3, r0
 8106aa8:	2b00      	cmp	r3, #0
 8106aaa:	d004      	beq.n	8106ab6 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4findERS3_+0x6e>
					_S_key(__j._M_node))) ? end() : __j;
 8106aac:	6878      	ldr	r0, [r7, #4]
 8106aae:	f000 f807 	bl	8106ac0 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE3endEv>
 8106ab2:	4603      	mov	r3, r0
 8106ab4:	e000      	b.n	8106ab8 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4findERS3_+0x70>
 8106ab6:	68bb      	ldr	r3, [r7, #8]
    }
 8106ab8:	4618      	mov	r0, r3
 8106aba:	3714      	adds	r7, #20
 8106abc:	46bd      	mov	sp, r7
 8106abe:	bd90      	pop	{r4, r7, pc}

08106ac0 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8106ac0:	b580      	push	{r7, lr}
 8106ac2:	b084      	sub	sp, #16
 8106ac4:	af00      	add	r7, sp, #0
 8106ac6:	6078      	str	r0, [r7, #4]
      { return iterator(&this->_M_impl._M_header); }
 8106ac8:	687b      	ldr	r3, [r7, #4]
 8106aca:	1d1a      	adds	r2, r3, #4
 8106acc:	f107 030c 	add.w	r3, r7, #12
 8106ad0:	4611      	mov	r1, r2
 8106ad2:	4618      	mov	r0, r3
 8106ad4:	f000 fa57 	bl	8106f86 <_ZNSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEC1EPSt18_Rb_tree_node_base>
 8106ad8:	68fb      	ldr	r3, [r7, #12]
 8106ada:	4618      	mov	r0, r3
 8106adc:	3710      	adds	r7, #16
 8106ade:	46bd      	mov	sp, r7
 8106ae0:	bd80      	pop	{r7, pc}

08106ae2 <_ZNSt5tupleIJRKN19EventManagerCM4Task11EEventQueueEEEC1ILb1ELb1EEES3_>:
	: _Inherited() { }

      template<bool _NotEmpty = (sizeof...(_Elements) >= 1),
	       _ImplicitCtor<_NotEmpty, const _Elements&...> = true>
	constexpr
	tuple(const _Elements&... __elements)
 8106ae2:	b580      	push	{r7, lr}
 8106ae4:	b082      	sub	sp, #8
 8106ae6:	af00      	add	r7, sp, #0
 8106ae8:	6078      	str	r0, [r7, #4]
 8106aea:	6039      	str	r1, [r7, #0]
	noexcept(__nothrow_constructible<const _Elements&...>())
	: _Inherited(__elements...) { }
 8106aec:	687b      	ldr	r3, [r7, #4]
 8106aee:	6839      	ldr	r1, [r7, #0]
 8106af0:	4618      	mov	r0, r3
 8106af2:	f000 fb66 	bl	81071c2 <_ZNSt11_Tuple_implILj0EJRKN19EventManagerCM4Task11EEventQueueEEEC1ES3_>
 8106af6:	687b      	ldr	r3, [r7, #4]
 8106af8:	4618      	mov	r0, r3
 8106afa:	3708      	adds	r7, #8
 8106afc:	46bd      	mov	sp, r7
 8106afe:	bd80      	pop	{r7, pc}

08106b00 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EDpOT_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8106b00:	b5b0      	push	{r4, r5, r7, lr}
 8106b02:	b08c      	sub	sp, #48	@ 0x30
 8106b04:	af02      	add	r7, sp, #8
 8106b06:	60f8      	str	r0, [r7, #12]
 8106b08:	60b9      	str	r1, [r7, #8]
 8106b0a:	607a      	str	r2, [r7, #4]
 8106b0c:	603b      	str	r3, [r7, #0]
	_Auto_node __z(*this, std::forward<_Args>(__args)...);
 8106b0e:	6878      	ldr	r0, [r7, #4]
 8106b10:	f000 fb66 	bl	81071e0 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8106b14:	4604      	mov	r4, r0
 8106b16:	6838      	ldr	r0, [r7, #0]
 8106b18:	f000 fb6d 	bl	81071f6 <_ZSt7forwardISt5tupleIJRKN19EventManagerCM4Task11EEventQueueEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8106b1c:	4605      	mov	r5, r0
 8106b1e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8106b20:	f000 fb74 	bl	810720c <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8106b24:	4603      	mov	r3, r0
 8106b26:	f107 001c 	add.w	r0, r7, #28
 8106b2a:	9300      	str	r3, [sp, #0]
 8106b2c:	462b      	mov	r3, r5
 8106b2e:	4622      	mov	r2, r4
 8106b30:	68f9      	ldr	r1, [r7, #12]
 8106b32:	f000 fb76 	bl	8107222 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE10_Auto_nodeC1IJRKSt21piecewise_construct_tSt5tupleIJRS3_EESI_IJEEEEERSC_DpOT_>
	auto __res = _M_get_insert_hint_unique_pos(__pos, __z._M_key());
 8106b36:	f107 031c 	add.w	r3, r7, #28
 8106b3a:	4618      	mov	r0, r3
 8106b3c:	f000 f9fc 	bl	8106f38 <_ZNKSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE10_Auto_node6_M_keyEv>
 8106b40:	4603      	mov	r3, r0
 8106b42:	f107 0014 	add.w	r0, r7, #20
 8106b46:	68ba      	ldr	r2, [r7, #8]
 8106b48:	68f9      	ldr	r1, [r7, #12]
 8106b4a:	f000 fb8d 	bl	8107268 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_>
	if (__res.second)
 8106b4e:	69bb      	ldr	r3, [r7, #24]
 8106b50:	2b00      	cmp	r3, #0
 8106b52:	d009      	beq.n	8106b68 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EDpOT_+0x68>
	  return __z._M_insert(__res);
 8106b54:	f107 001c 	add.w	r0, r7, #28
 8106b58:	f107 0314 	add.w	r3, r7, #20
 8106b5c:	e893 0006 	ldmia.w	r3, {r1, r2}
 8106b60:	f000 f9f8 	bl	8106f54 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE10_Auto_node9_M_insertES2_IPSt18_Rb_tree_node_baseSF_E>
 8106b64:	4604      	mov	r4, r0
 8106b66:	e007      	b.n	8106b78 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EDpOT_+0x78>
	return iterator(__res.first);
 8106b68:	697a      	ldr	r2, [r7, #20]
 8106b6a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8106b6e:	4611      	mov	r1, r2
 8106b70:	4618      	mov	r0, r3
 8106b72:	f000 fa08 	bl	8106f86 <_ZNSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEC1EPSt18_Rb_tree_node_base>
 8106b76:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
      }
 8106b78:	f107 031c 	add.w	r3, r7, #28
 8106b7c:	4618      	mov	r0, r3
 8106b7e:	f000 f941 	bl	8106e04 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE10_Auto_nodeD1Ev>
 8106b82:	4623      	mov	r3, r4
 8106b84:	4618      	mov	r0, r3
 8106b86:	3728      	adds	r7, #40	@ 0x28
 8106b88:	46bd      	mov	sp, r7
 8106b8a:	bdb0      	pop	{r4, r5, r7, pc}

08106b8c <_ZSt4moveIRN19EventManagerCM4Task11EEventQueueEEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 8106b8c:	b480      	push	{r7}
 8106b8e:	b083      	sub	sp, #12
 8106b90:	af00      	add	r7, sp, #0
 8106b92:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8106b94:	687b      	ldr	r3, [r7, #4]
 8106b96:	4618      	mov	r0, r3
 8106b98:	370c      	adds	r7, #12
 8106b9a:	46bd      	mov	sp, r7
 8106b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106ba0:	4770      	bx	lr

08106ba2 <_ZSt16forward_as_tupleIJN19EventManagerCM4Task11EEventQueueEEESt5tupleIJDpOT_EES5_>:
  // _GLIBCXX_RESOLVE_LIB_DEFECTS
  // 2275. Why is forward_as_tuple not constexpr?
  /// std::forward_as_tuple
  template<typename... _Elements>
    constexpr tuple<_Elements&&...>
    forward_as_tuple(_Elements&&... __args) noexcept
 8106ba2:	b580      	push	{r7, lr}
 8106ba4:	b082      	sub	sp, #8
 8106ba6:	af00      	add	r7, sp, #0
 8106ba8:	6078      	str	r0, [r7, #4]
 8106baa:	6039      	str	r1, [r7, #0]
    { return tuple<_Elements&&...>(std::forward<_Elements>(__args)...); }
 8106bac:	6838      	ldr	r0, [r7, #0]
 8106bae:	f000 fc7e 	bl	81074ae <_ZSt7forwardIN19EventManagerCM4Task11EEventQueueEEOT_RNSt16remove_referenceIS2_E4typeE>
 8106bb2:	4603      	mov	r3, r0
 8106bb4:	4619      	mov	r1, r3
 8106bb6:	6878      	ldr	r0, [r7, #4]
 8106bb8:	f000 fc84 	bl	81074c4 <_ZNSt5tupleIJON19EventManagerCM4Task11EEventQueueEEEC1IJS1_ELb1ELb1EEEDpOT_>
 8106bbc:	6878      	ldr	r0, [r7, #4]
 8106bbe:	3708      	adds	r7, #8
 8106bc0:	46bd      	mov	sp, r7
 8106bc2:	bd80      	pop	{r7, pc}

08106bc4 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJOS1_EESH_IJEEEEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EDpOT_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8106bc4:	b5b0      	push	{r4, r5, r7, lr}
 8106bc6:	b08c      	sub	sp, #48	@ 0x30
 8106bc8:	af02      	add	r7, sp, #8
 8106bca:	60f8      	str	r0, [r7, #12]
 8106bcc:	60b9      	str	r1, [r7, #8]
 8106bce:	607a      	str	r2, [r7, #4]
 8106bd0:	603b      	str	r3, [r7, #0]
	_Auto_node __z(*this, std::forward<_Args>(__args)...);
 8106bd2:	6878      	ldr	r0, [r7, #4]
 8106bd4:	f000 fb04 	bl	81071e0 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8106bd8:	4604      	mov	r4, r0
 8106bda:	6838      	ldr	r0, [r7, #0]
 8106bdc:	f000 fc85 	bl	81074ea <_ZSt7forwardISt5tupleIJON19EventManagerCM4Task11EEventQueueEEEEOT_RNSt16remove_referenceIS5_E4typeE>
 8106be0:	4605      	mov	r5, r0
 8106be2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8106be4:	f000 fb12 	bl	810720c <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8106be8:	4603      	mov	r3, r0
 8106bea:	f107 001c 	add.w	r0, r7, #28
 8106bee:	9300      	str	r3, [sp, #0]
 8106bf0:	462b      	mov	r3, r5
 8106bf2:	4622      	mov	r2, r4
 8106bf4:	68f9      	ldr	r1, [r7, #12]
 8106bf6:	f000 fc83 	bl	8107500 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE10_Auto_nodeC1IJRKSt21piecewise_construct_tSt5tupleIJOS1_EESI_IJEEEEERSC_DpOT_>
	auto __res = _M_get_insert_hint_unique_pos(__pos, __z._M_key());
 8106bfa:	f107 031c 	add.w	r3, r7, #28
 8106bfe:	4618      	mov	r0, r3
 8106c00:	f000 f99a 	bl	8106f38 <_ZNKSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE10_Auto_node6_M_keyEv>
 8106c04:	4603      	mov	r3, r0
 8106c06:	f107 0014 	add.w	r0, r7, #20
 8106c0a:	68ba      	ldr	r2, [r7, #8]
 8106c0c:	68f9      	ldr	r1, [r7, #12]
 8106c0e:	f000 fb2b 	bl	8107268 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_>
	if (__res.second)
 8106c12:	69bb      	ldr	r3, [r7, #24]
 8106c14:	2b00      	cmp	r3, #0
 8106c16:	d009      	beq.n	8106c2c <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJOS1_EESH_IJEEEEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EDpOT_+0x68>
	  return __z._M_insert(__res);
 8106c18:	f107 001c 	add.w	r0, r7, #28
 8106c1c:	f107 0314 	add.w	r3, r7, #20
 8106c20:	e893 0006 	ldmia.w	r3, {r1, r2}
 8106c24:	f000 f996 	bl	8106f54 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE10_Auto_node9_M_insertES2_IPSt18_Rb_tree_node_baseSF_E>
 8106c28:	4604      	mov	r4, r0
 8106c2a:	e007      	b.n	8106c3c <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJOS1_EESH_IJEEEEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EDpOT_+0x78>
	return iterator(__res.first);
 8106c2c:	697a      	ldr	r2, [r7, #20]
 8106c2e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8106c32:	4611      	mov	r1, r2
 8106c34:	4618      	mov	r0, r3
 8106c36:	f000 f9a6 	bl	8106f86 <_ZNSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEC1EPSt18_Rb_tree_node_base>
 8106c3a:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
      }
 8106c3c:	f107 031c 	add.w	r3, r7, #28
 8106c40:	4618      	mov	r0, r3
 8106c42:	f000 f8df 	bl	8106e04 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE10_Auto_nodeD1Ev>
 8106c46:	4623      	mov	r3, r4
 8106c48:	4618      	mov	r0, r3
 8106c4a:	3728      	adds	r7, #40	@ 0x28
 8106c4c:	46bd      	mov	sp, r7
 8106c4e:	bdb0      	pop	{r4, r5, r7, pc}

08106c50 <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEEC1Ev>:
      __new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8106c50:	b480      	push	{r7}
 8106c52:	b083      	sub	sp, #12
 8106c54:	af00      	add	r7, sp, #0
 8106c56:	6078      	str	r0, [r7, #4]
 8106c58:	687b      	ldr	r3, [r7, #4]
 8106c5a:	4618      	mov	r0, r3
 8106c5c:	370c      	adds	r7, #12
 8106c5e:	46bd      	mov	sp, r7
 8106c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106c64:	4770      	bx	lr

08106c66 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>:
      _S_right(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8106c66:	b480      	push	{r7}
 8106c68:	b083      	sub	sp, #12
 8106c6a:	af00      	add	r7, sp, #0
 8106c6c:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_right); }
 8106c6e:	687b      	ldr	r3, [r7, #4]
 8106c70:	68db      	ldr	r3, [r3, #12]
 8106c72:	4618      	mov	r0, r3
 8106c74:	370c      	adds	r7, #12
 8106c76:	46bd      	mov	sp, r7
 8106c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106c7c:	4770      	bx	lr

08106c7e <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE7_S_leftEPSt18_Rb_tree_node_base>:
      _S_left(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8106c7e:	b480      	push	{r7}
 8106c80:	b083      	sub	sp, #12
 8106c82:	af00      	add	r7, sp, #0
 8106c84:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_left); }
 8106c86:	687b      	ldr	r3, [r7, #4]
 8106c88:	689b      	ldr	r3, [r3, #8]
 8106c8a:	4618      	mov	r0, r3
 8106c8c:	370c      	adds	r7, #12
 8106c8e:	46bd      	mov	sp, r7
 8106c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106c94:	4770      	bx	lr

08106c96 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS6_E>:
      _M_drop_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8106c96:	b580      	push	{r7, lr}
 8106c98:	b082      	sub	sp, #8
 8106c9a:	af00      	add	r7, sp, #0
 8106c9c:	6078      	str	r0, [r7, #4]
 8106c9e:	6039      	str	r1, [r7, #0]
	_M_destroy_node(__p);
 8106ca0:	6839      	ldr	r1, [r7, #0]
 8106ca2:	6878      	ldr	r0, [r7, #4]
 8106ca4:	f000 fc4f 	bl	8107546 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS6_E>
	_M_put_node(__p);
 8106ca8:	6839      	ldr	r1, [r7, #0]
 8106caa:	6878      	ldr	r0, [r7, #4]
 8106cac:	f000 fc60 	bl	8107570 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS6_E>
      }
 8106cb0:	bf00      	nop
 8106cb2:	3708      	adds	r7, #8
 8106cb4:	46bd      	mov	sp, r7
 8106cb6:	bd80      	pop	{r7, pc}

08106cb8 <_ZNKSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE9_M_mbeginEv>:
      _M_mbegin() const _GLIBCXX_NOEXCEPT
 8106cb8:	b480      	push	{r7}
 8106cba:	b083      	sub	sp, #12
 8106cbc:	af00      	add	r7, sp, #0
 8106cbe:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
 8106cc0:	687b      	ldr	r3, [r7, #4]
 8106cc2:	689b      	ldr	r3, [r3, #8]
 8106cc4:	4618      	mov	r0, r3
 8106cc6:	370c      	adds	r7, #12
 8106cc8:	46bd      	mov	sp, r7
 8106cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106cce:	4770      	bx	lr

08106cd0 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11lower_boundERS3_>:
      lower_bound(const key_type& __k)
 8106cd0:	b590      	push	{r4, r7, lr}
 8106cd2:	b083      	sub	sp, #12
 8106cd4:	af00      	add	r7, sp, #0
 8106cd6:	6078      	str	r0, [r7, #4]
 8106cd8:	6039      	str	r1, [r7, #0]
      { return _M_lower_bound(_M_begin(), _M_end(), __k); }
 8106cda:	6878      	ldr	r0, [r7, #4]
 8106cdc:	f7ff fc63 	bl	81065a6 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_beginEv>
 8106ce0:	4604      	mov	r4, r0
 8106ce2:	6878      	ldr	r0, [r7, #4]
 8106ce4:	f000 fa24 	bl	8107130 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>
 8106ce8:	4602      	mov	r2, r0
 8106cea:	683b      	ldr	r3, [r7, #0]
 8106cec:	4621      	mov	r1, r4
 8106cee:	6878      	ldr	r0, [r7, #4]
 8106cf0:	f000 fa2a 	bl	8107148 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_>
 8106cf4:	4603      	mov	r3, r0
 8106cf6:	4618      	mov	r0, r3
 8106cf8:	370c      	adds	r7, #12
 8106cfa:	46bd      	mov	sp, r7
 8106cfc:	bd90      	pop	{r4, r7, pc}

08106cfe <_ZNKSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8key_compEv>:
      key_comp() const
 8106cfe:	b480      	push	{r7}
 8106d00:	b083      	sub	sp, #12
 8106d02:	af00      	add	r7, sp, #0
 8106d04:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_key_compare; }
 8106d06:	bf00      	nop
 8106d08:	4618      	mov	r0, r3
 8106d0a:	370c      	adds	r7, #12
 8106d0c:	46bd      	mov	sp, r7
 8106d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106d12:	4770      	bx	lr

08106d14 <_ZNSt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEE9_M_valptrEv>:
      _M_valptr()
 8106d14:	b580      	push	{r7, lr}
 8106d16:	b082      	sub	sp, #8
 8106d18:	af00      	add	r7, sp, #0
 8106d1a:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 8106d1c:	687b      	ldr	r3, [r7, #4]
 8106d1e:	3310      	adds	r3, #16
 8106d20:	4618      	mov	r0, r3
 8106d22:	f000 fc37 	bl	8107594 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEE6_M_ptrEv>
 8106d26:	4603      	mov	r3, r0
 8106d28:	4618      	mov	r0, r3
 8106d2a:	3708      	adds	r7, #8
 8106d2c:	46bd      	mov	sp, r7
 8106d2e:	bd80      	pop	{r7, pc}

08106d30 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE22_M_emplace_hint_uniqueIJRS1_RS5_EEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EDpOT_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8106d30:	b590      	push	{r4, r7, lr}
 8106d32:	b08b      	sub	sp, #44	@ 0x2c
 8106d34:	af00      	add	r7, sp, #0
 8106d36:	60f8      	str	r0, [r7, #12]
 8106d38:	60b9      	str	r1, [r7, #8]
 8106d3a:	607a      	str	r2, [r7, #4]
 8106d3c:	603b      	str	r3, [r7, #0]
	_Auto_node __z(*this, std::forward<_Args>(__args)...);
 8106d3e:	6878      	ldr	r0, [r7, #4]
 8106d40:	f7ff fca3 	bl	810668a <_ZSt7forwardIRN19EventManagerCM4Task11EEventQueueEEOT_RNSt16remove_referenceIS3_E4typeE>
 8106d44:	4604      	mov	r4, r0
 8106d46:	6838      	ldr	r0, [r7, #0]
 8106d48:	f7ff fcaa 	bl	81066a0 <_ZSt7forwardIRP15QueueDefinitionEOT_RNSt16remove_referenceIS3_E4typeE>
 8106d4c:	4603      	mov	r3, r0
 8106d4e:	f107 001c 	add.w	r0, r7, #28
 8106d52:	4622      	mov	r2, r4
 8106d54:	68f9      	ldr	r1, [r7, #12]
 8106d56:	f000 f836 	bl	8106dc6 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE10_Auto_nodeC1IJRS1_RS5_EEERSC_DpOT_>
	auto __res = _M_get_insert_hint_unique_pos(__pos, __z._M_key());
 8106d5a:	f107 031c 	add.w	r3, r7, #28
 8106d5e:	4618      	mov	r0, r3
 8106d60:	f000 f8ea 	bl	8106f38 <_ZNKSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE10_Auto_node6_M_keyEv>
 8106d64:	4603      	mov	r3, r0
 8106d66:	f107 0014 	add.w	r0, r7, #20
 8106d6a:	68ba      	ldr	r2, [r7, #8]
 8106d6c:	68f9      	ldr	r1, [r7, #12]
 8106d6e:	f000 fa7b 	bl	8107268 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_>
	if (__res.second)
 8106d72:	69bb      	ldr	r3, [r7, #24]
 8106d74:	2b00      	cmp	r3, #0
 8106d76:	d009      	beq.n	8106d8c <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE22_M_emplace_hint_uniqueIJRS1_RS5_EEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EDpOT_+0x5c>
	  return __z._M_insert(__res);
 8106d78:	f107 001c 	add.w	r0, r7, #28
 8106d7c:	f107 0314 	add.w	r3, r7, #20
 8106d80:	e893 0006 	ldmia.w	r3, {r1, r2}
 8106d84:	f000 f8e6 	bl	8106f54 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE10_Auto_node9_M_insertES2_IPSt18_Rb_tree_node_baseSF_E>
 8106d88:	4604      	mov	r4, r0
 8106d8a:	e007      	b.n	8106d9c <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE22_M_emplace_hint_uniqueIJRS1_RS5_EEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EDpOT_+0x6c>
	return iterator(__res.first);
 8106d8c:	697a      	ldr	r2, [r7, #20]
 8106d8e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8106d92:	4611      	mov	r1, r2
 8106d94:	4618      	mov	r0, r3
 8106d96:	f000 f8f6 	bl	8106f86 <_ZNSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEC1EPSt18_Rb_tree_node_base>
 8106d9a:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
      }
 8106d9c:	f107 031c 	add.w	r3, r7, #28
 8106da0:	4618      	mov	r0, r3
 8106da2:	f000 f82f 	bl	8106e04 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE10_Auto_nodeD1Ev>
 8106da6:	4623      	mov	r3, r4
 8106da8:	4618      	mov	r0, r3
 8106daa:	372c      	adds	r7, #44	@ 0x2c
 8106dac:	46bd      	mov	sp, r7
 8106dae:	bd90      	pop	{r4, r7, pc}

08106db0 <_ZSt7forwardIRSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEEOT_RNSt16remove_referenceISA_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8106db0:	b480      	push	{r7}
 8106db2:	b083      	sub	sp, #12
 8106db4:	af00      	add	r7, sp, #0
 8106db6:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8106db8:	687b      	ldr	r3, [r7, #4]
 8106dba:	4618      	mov	r0, r3
 8106dbc:	370c      	adds	r7, #12
 8106dbe:	46bd      	mov	sp, r7
 8106dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106dc4:	4770      	bx	lr

08106dc6 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE10_Auto_nodeC1IJRS1_RS5_EEERSC_DpOT_>:
	  _Auto_node(_Rb_tree& __t, _Args&&... __args)
 8106dc6:	b590      	push	{r4, r7, lr}
 8106dc8:	b085      	sub	sp, #20
 8106dca:	af00      	add	r7, sp, #0
 8106dcc:	60f8      	str	r0, [r7, #12]
 8106dce:	60b9      	str	r1, [r7, #8]
 8106dd0:	607a      	str	r2, [r7, #4]
 8106dd2:	603b      	str	r3, [r7, #0]
	  : _M_t(__t),
 8106dd4:	68fb      	ldr	r3, [r7, #12]
 8106dd6:	68ba      	ldr	r2, [r7, #8]
 8106dd8:	601a      	str	r2, [r3, #0]
	    _M_node(__t._M_create_node(std::forward<_Args>(__args)...))
 8106dda:	6878      	ldr	r0, [r7, #4]
 8106ddc:	f7ff fc55 	bl	810668a <_ZSt7forwardIRN19EventManagerCM4Task11EEventQueueEEOT_RNSt16remove_referenceIS3_E4typeE>
 8106de0:	4604      	mov	r4, r0
 8106de2:	6838      	ldr	r0, [r7, #0]
 8106de4:	f7ff fc5c 	bl	81066a0 <_ZSt7forwardIRP15QueueDefinitionEOT_RNSt16remove_referenceIS3_E4typeE>
 8106de8:	4603      	mov	r3, r0
 8106dea:	461a      	mov	r2, r3
 8106dec:	4621      	mov	r1, r4
 8106dee:	68b8      	ldr	r0, [r7, #8]
 8106df0:	f000 fbdc 	bl	81075ac <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_create_nodeIJRS1_RS5_EEEPSt13_Rb_tree_nodeIS6_EDpOT_>
 8106df4:	4602      	mov	r2, r0
 8106df6:	68fb      	ldr	r3, [r7, #12]
 8106df8:	605a      	str	r2, [r3, #4]
	  { }
 8106dfa:	68fb      	ldr	r3, [r7, #12]
 8106dfc:	4618      	mov	r0, r3
 8106dfe:	3714      	adds	r7, #20
 8106e00:	46bd      	mov	sp, r7
 8106e02:	bd90      	pop	{r4, r7, pc}

08106e04 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE10_Auto_nodeD1Ev>:
	~_Auto_node()
 8106e04:	b580      	push	{r7, lr}
 8106e06:	b082      	sub	sp, #8
 8106e08:	af00      	add	r7, sp, #0
 8106e0a:	6078      	str	r0, [r7, #4]
	  if (_M_node)
 8106e0c:	687b      	ldr	r3, [r7, #4]
 8106e0e:	685b      	ldr	r3, [r3, #4]
 8106e10:	2b00      	cmp	r3, #0
 8106e12:	d007      	beq.n	8106e24 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE10_Auto_nodeD1Ev+0x20>
	    _M_t._M_drop_node(_M_node);
 8106e14:	687b      	ldr	r3, [r7, #4]
 8106e16:	681a      	ldr	r2, [r3, #0]
 8106e18:	687b      	ldr	r3, [r7, #4]
 8106e1a:	685b      	ldr	r3, [r3, #4]
 8106e1c:	4619      	mov	r1, r3
 8106e1e:	4610      	mov	r0, r2
 8106e20:	f7ff ff39 	bl	8106c96 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS6_E>
	}
 8106e24:	687b      	ldr	r3, [r7, #4]
 8106e26:	4618      	mov	r0, r3
 8106e28:	3708      	adds	r7, #8
 8106e2a:	46bd      	mov	sp, r7
 8106e2c:	bd80      	pop	{r7, pc}

08106e2e <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8106e2e:	b590      	push	{r4, r7, lr}
 8106e30:	b08b      	sub	sp, #44	@ 0x2c
 8106e32:	af00      	add	r7, sp, #0
 8106e34:	60f8      	str	r0, [r7, #12]
 8106e36:	60b9      	str	r1, [r7, #8]
 8106e38:	607a      	str	r2, [r7, #4]
      _Link_type __x = _M_begin();
 8106e3a:	68b8      	ldr	r0, [r7, #8]
 8106e3c:	f7ff fbb3 	bl	81065a6 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_beginEv>
 8106e40:	4603      	mov	r3, r0
 8106e42:	61bb      	str	r3, [r7, #24]
      _Base_ptr __y = _M_end();
 8106e44:	68b8      	ldr	r0, [r7, #8]
 8106e46:	f000 f973 	bl	8107130 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>
 8106e4a:	4603      	mov	r3, r0
 8106e4c:	617b      	str	r3, [r7, #20]
      bool __comp = true;
 8106e4e:	2301      	movs	r3, #1
 8106e50:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      while (__x != 0)
 8106e54:	e01f      	b.n	8106e96 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x68>
	  __y = __x;
 8106e56:	69bb      	ldr	r3, [r7, #24]
 8106e58:	617b      	str	r3, [r7, #20]
	  __comp = _M_impl._M_key_compare(__k, _S_key(__x));
 8106e5a:	68bc      	ldr	r4, [r7, #8]
 8106e5c:	69bb      	ldr	r3, [r7, #24]
 8106e5e:	4618      	mov	r0, r3
 8106e60:	f000 fbc0 	bl	81075e4 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 8106e64:	4603      	mov	r3, r0
 8106e66:	461a      	mov	r2, r3
 8106e68:	6879      	ldr	r1, [r7, #4]
 8106e6a:	4620      	mov	r0, r4
 8106e6c:	f7ff fbf8 	bl	8106660 <_ZNKSt4lessIN19EventManagerCM4Task11EEventQueueEEclERKS1_S4_>
 8106e70:	4603      	mov	r3, r0
 8106e72:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	  __x = __comp ? _S_left(__x) : _S_right(__x);
 8106e76:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8106e7a:	2b00      	cmp	r3, #0
 8106e7c:	d005      	beq.n	8106e8a <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x5c>
 8106e7e:	69bb      	ldr	r3, [r7, #24]
 8106e80:	4618      	mov	r0, r3
 8106e82:	f7ff fefc 	bl	8106c7e <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE7_S_leftEPSt18_Rb_tree_node_base>
 8106e86:	4603      	mov	r3, r0
 8106e88:	e004      	b.n	8106e94 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x66>
 8106e8a:	69bb      	ldr	r3, [r7, #24]
 8106e8c:	4618      	mov	r0, r3
 8106e8e:	f7ff feea 	bl	8106c66 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 8106e92:	4603      	mov	r3, r0
 8106e94:	61bb      	str	r3, [r7, #24]
      while (__x != 0)
 8106e96:	69bb      	ldr	r3, [r7, #24]
 8106e98:	2b00      	cmp	r3, #0
 8106e9a:	d1dc      	bne.n	8106e56 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x28>
      iterator __j = iterator(__y);
 8106e9c:	697a      	ldr	r2, [r7, #20]
 8106e9e:	f107 0310 	add.w	r3, r7, #16
 8106ea2:	4611      	mov	r1, r2
 8106ea4:	4618      	mov	r0, r3
 8106ea6:	f000 f86e 	bl	8106f86 <_ZNSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEC1EPSt18_Rb_tree_node_base>
      if (__comp)
 8106eaa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8106eae:	2b00      	cmp	r3, #0
 8106eb0:	d01d      	beq.n	8106eee <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0xc0>
	  if (__j == begin())
 8106eb2:	68b8      	ldr	r0, [r7, #8]
 8106eb4:	f000 fba9 	bl	810760a <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE5beginEv>
 8106eb8:	4603      	mov	r3, r0
 8106eba:	61fb      	str	r3, [r7, #28]
 8106ebc:	f107 021c 	add.w	r2, r7, #28
 8106ec0:	f107 0310 	add.w	r3, r7, #16
 8106ec4:	4611      	mov	r1, r2
 8106ec6:	4618      	mov	r0, r3
 8106ec8:	f7ff fa86 	bl	81063d8 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEES9_>
 8106ecc:	4603      	mov	r3, r0
 8106ece:	2b00      	cmp	r3, #0
 8106ed0:	d008      	beq.n	8106ee4 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0xb6>
	    return _Res(__x, __y);
 8106ed2:	f107 0214 	add.w	r2, r7, #20
 8106ed6:	f107 0318 	add.w	r3, r7, #24
 8106eda:	4619      	mov	r1, r3
 8106edc:	68f8      	ldr	r0, [r7, #12]
 8106ede:	f000 fba5 	bl	810762c <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEERS1_EEOT_OT0_>
 8106ee2:	e025      	b.n	8106f30 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x102>
	    --__j;
 8106ee4:	f107 0310 	add.w	r3, r7, #16
 8106ee8:	4618      	mov	r0, r3
 8106eea:	f000 fbb8 	bl	810765e <_ZNSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEmmEv>
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
 8106eee:	68bc      	ldr	r4, [r7, #8]
 8106ef0:	693b      	ldr	r3, [r7, #16]
 8106ef2:	4618      	mov	r0, r3
 8106ef4:	f000 f959 	bl	81071aa <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8106ef8:	4603      	mov	r3, r0
 8106efa:	687a      	ldr	r2, [r7, #4]
 8106efc:	4619      	mov	r1, r3
 8106efe:	4620      	mov	r0, r4
 8106f00:	f7ff fbae 	bl	8106660 <_ZNKSt4lessIN19EventManagerCM4Task11EEventQueueEEclERKS1_S4_>
 8106f04:	4603      	mov	r3, r0
 8106f06:	2b00      	cmp	r3, #0
 8106f08:	d008      	beq.n	8106f1c <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0xee>
	return _Res(__x, __y);
 8106f0a:	f107 0214 	add.w	r2, r7, #20
 8106f0e:	f107 0318 	add.w	r3, r7, #24
 8106f12:	4619      	mov	r1, r3
 8106f14:	68f8      	ldr	r0, [r7, #12]
 8106f16:	f000 fb89 	bl	810762c <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEERS1_EEOT_OT0_>
 8106f1a:	e009      	b.n	8106f30 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x102>
      return _Res(__j._M_node, 0);
 8106f1c:	2300      	movs	r3, #0
 8106f1e:	623b      	str	r3, [r7, #32]
 8106f20:	f107 0220 	add.w	r2, r7, #32
 8106f24:	f107 0310 	add.w	r3, r7, #16
 8106f28:	4619      	mov	r1, r3
 8106f2a:	68f8      	ldr	r0, [r7, #12]
 8106f2c:	f000 fba8 	bl	8107680 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1ERKS1_S4_>
    }
 8106f30:	68f8      	ldr	r0, [r7, #12]
 8106f32:	372c      	adds	r7, #44	@ 0x2c
 8106f34:	46bd      	mov	sp, r7
 8106f36:	bd90      	pop	{r4, r7, pc}

08106f38 <_ZNKSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE10_Auto_node6_M_keyEv>:
	_M_key() const
 8106f38:	b580      	push	{r7, lr}
 8106f3a:	b082      	sub	sp, #8
 8106f3c:	af00      	add	r7, sp, #0
 8106f3e:	6078      	str	r0, [r7, #4]
	{ return _S_key(_M_node); }
 8106f40:	687b      	ldr	r3, [r7, #4]
 8106f42:	685b      	ldr	r3, [r3, #4]
 8106f44:	4618      	mov	r0, r3
 8106f46:	f000 fb4d 	bl	81075e4 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 8106f4a:	4603      	mov	r3, r0
 8106f4c:	4618      	mov	r0, r3
 8106f4e:	3708      	adds	r7, #8
 8106f50:	46bd      	mov	sp, r7
 8106f52:	bd80      	pop	{r7, pc}

08106f54 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE10_Auto_node9_M_insertES2_IPSt18_Rb_tree_node_baseSF_E>:
	_M_insert(pair<_Base_ptr, _Base_ptr> __p)
 8106f54:	b580      	push	{r7, lr}
 8106f56:	b086      	sub	sp, #24
 8106f58:	af00      	add	r7, sp, #0
 8106f5a:	60f8      	str	r0, [r7, #12]
 8106f5c:	1d3b      	adds	r3, r7, #4
 8106f5e:	e883 0006 	stmia.w	r3, {r1, r2}
	  auto __it = _M_t._M_insert_node(__p.first, __p.second, _M_node);
 8106f62:	68fb      	ldr	r3, [r7, #12]
 8106f64:	6818      	ldr	r0, [r3, #0]
 8106f66:	6879      	ldr	r1, [r7, #4]
 8106f68:	68ba      	ldr	r2, [r7, #8]
 8106f6a:	68fb      	ldr	r3, [r7, #12]
 8106f6c:	685b      	ldr	r3, [r3, #4]
 8106f6e:	f000 fb9c 	bl	81076aa <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E>
 8106f72:	4603      	mov	r3, r0
 8106f74:	617b      	str	r3, [r7, #20]
	  _M_node = nullptr;
 8106f76:	68fb      	ldr	r3, [r7, #12]
 8106f78:	2200      	movs	r2, #0
 8106f7a:	605a      	str	r2, [r3, #4]
	  return __it;
 8106f7c:	697b      	ldr	r3, [r7, #20]
	}
 8106f7e:	4618      	mov	r0, r3
 8106f80:	3718      	adds	r7, #24
 8106f82:	46bd      	mov	sp, r7
 8106f84:	bd80      	pop	{r7, pc}

08106f86 <_ZNSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEC1EPSt18_Rb_tree_node_base>:
      _Rb_tree_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8106f86:	b480      	push	{r7}
 8106f88:	b083      	sub	sp, #12
 8106f8a:	af00      	add	r7, sp, #0
 8106f8c:	6078      	str	r0, [r7, #4]
 8106f8e:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 8106f90:	687b      	ldr	r3, [r7, #4]
 8106f92:	683a      	ldr	r2, [r7, #0]
 8106f94:	601a      	str	r2, [r3, #0]
 8106f96:	687b      	ldr	r3, [r7, #4]
 8106f98:	4618      	mov	r0, r3
 8106f9a:	370c      	adds	r7, #12
 8106f9c:	46bd      	mov	sp, r7
 8106f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106fa2:	4770      	bx	lr

08106fa4 <_ZNKSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8106fa4:	b480      	push	{r7}
 8106fa6:	b083      	sub	sp, #12
 8106fa8:	af00      	add	r7, sp, #0
 8106faa:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_node_count; }
 8106fac:	687b      	ldr	r3, [r7, #4]
 8106fae:	695b      	ldr	r3, [r3, #20]
 8106fb0:	4618      	mov	r0, r3
 8106fb2:	370c      	adds	r7, #12
 8106fb4:	46bd      	mov	sp, r7
 8106fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106fba:	4770      	bx	lr

08106fbc <_ZSt8_DestroyIP8SMessageEvT_S2_>:
   * a trivial destructor, the compiler should optimize all of this
   * away, otherwise the objects' destructors must be invoked.
   */
  template<typename _ForwardIterator>
    _GLIBCXX20_CONSTEXPR inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8106fbc:	b580      	push	{r7, lr}
 8106fbe:	b082      	sub	sp, #8
 8106fc0:	af00      	add	r7, sp, #0
 8106fc2:	6078      	str	r0, [r7, #4]
 8106fc4:	6039      	str	r1, [r7, #0]
      // A deleted destructor is trivial, this ensures we reject such types:
      static_assert(is_destructible<_Value_type>::value,
		    "value type is destructible");
#endif
#if __cplusplus >= 202002L
      if (std::__is_constant_evaluated())
 8106fc6:	f7fc f9f5 	bl	81033b4 <_ZSt23__is_constant_evaluatedv>
 8106fca:	4603      	mov	r3, r0
 8106fcc:	2b00      	cmp	r3, #0
 8106fce:	d004      	beq.n	8106fda <_ZSt8_DestroyIP8SMessageEvT_S2_+0x1e>
	return _Destroy_aux<false>::__destroy(__first, __last);
 8106fd0:	6839      	ldr	r1, [r7, #0]
 8106fd2:	6878      	ldr	r0, [r7, #4]
 8106fd4:	f000 fba6 	bl	8107724 <_ZNSt12_Destroy_auxILb0EE9__destroyIP8SMessageEEvT_S4_>
 8106fd8:	e003      	b.n	8106fe2 <_ZSt8_DestroyIP8SMessageEvT_S2_+0x26>
#endif
      std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
	__destroy(__first, __last);
 8106fda:	6839      	ldr	r1, [r7, #0]
 8106fdc:	6878      	ldr	r0, [r7, #4]
 8106fde:	f000 fbba 	bl	8107756 <_ZNSt12_Destroy_auxILb1EE9__destroyIP8SMessageEEvT_S4_>
    }
 8106fe2:	3708      	adds	r7, #8
 8106fe4:	46bd      	mov	sp, r7
 8106fe6:	bd80      	pop	{r7, pc}

08106fe8 <_ZNSt16allocator_traitsISaI8SMessageEE10deallocateERS1_PS0_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8106fe8:	b580      	push	{r7, lr}
 8106fea:	b088      	sub	sp, #32
 8106fec:	af00      	add	r7, sp, #0
 8106fee:	60f8      	str	r0, [r7, #12]
 8106ff0:	60b9      	str	r1, [r7, #8]
 8106ff2:	607a      	str	r2, [r7, #4]
 8106ff4:	68fb      	ldr	r3, [r7, #12]
 8106ff6:	61fb      	str	r3, [r7, #28]
 8106ff8:	68bb      	ldr	r3, [r7, #8]
 8106ffa:	61bb      	str	r3, [r7, #24]
 8106ffc:	687b      	ldr	r3, [r7, #4]
 8106ffe:	617b      	str	r3, [r7, #20]
	if (std::__is_constant_evaluated())
 8107000:	f7fc f9d8 	bl	81033b4 <_ZSt23__is_constant_evaluatedv>
 8107004:	4603      	mov	r3, r0
 8107006:	2b00      	cmp	r3, #0
 8107008:	d003      	beq.n	8107012 <_ZNSt16allocator_traitsISaI8SMessageEE10deallocateERS1_PS0_j+0x2a>
	    ::operator delete(__p);
 810700a:	69b8      	ldr	r0, [r7, #24]
 810700c:	f01b fd9a 	bl	8122b44 <_ZdlPv>
	    return;
 8107010:	e005      	b.n	810701e <_ZNSt16allocator_traitsISaI8SMessageEE10deallocateERS1_PS0_j+0x36>
	__allocator_base<_Tp>::deallocate(__p, __n);
 8107012:	697a      	ldr	r2, [r7, #20]
 8107014:	69b9      	ldr	r1, [r7, #24]
 8107016:	69f8      	ldr	r0, [r7, #28]
 8107018:	f000 fdb4 	bl	8107b84 <_ZNSt15__new_allocatorI8SMessageE10deallocateEPS0_j>
      { __a.deallocate(__p, __n); }
 810701c:	bf00      	nop
 810701e:	bf00      	nop
 8107020:	3720      	adds	r7, #32
 8107022:	46bd      	mov	sp, r7
 8107024:	bd80      	pop	{r7, pc}

08107026 <_ZSt7forwardIRK8SMessageEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8107026:	b480      	push	{r7}
 8107028:	b083      	sub	sp, #12
 810702a:	af00      	add	r7, sp, #0
 810702c:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 810702e:	687b      	ldr	r3, [r7, #4]
 8107030:	4618      	mov	r0, r3
 8107032:	370c      	adds	r7, #12
 8107034:	46bd      	mov	sp, r7
 8107036:	f85d 7b04 	ldr.w	r7, [sp], #4
 810703a:	4770      	bx	lr

0810703c <_ZSt12construct_atI8SMessageJRKS0_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS4_DpOS5_>:
    construct_at(_Tp* __location, _Args&&... __args)
 810703c:	b5f0      	push	{r4, r5, r6, r7, lr}
 810703e:	b083      	sub	sp, #12
 8107040:	af00      	add	r7, sp, #0
 8107042:	6078      	str	r0, [r7, #4]
 8107044:	6039      	str	r1, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 8107046:	687b      	ldr	r3, [r7, #4]
 8107048:	4619      	mov	r1, r3
 810704a:	201c      	movs	r0, #28
 810704c:	f7fa f91c 	bl	8101288 <_ZnwjPv>
 8107050:	4606      	mov	r6, r0
 8107052:	6838      	ldr	r0, [r7, #0]
 8107054:	f7ff ffe7 	bl	8107026 <_ZSt7forwardIRK8SMessageEOT_RNSt16remove_referenceIS3_E4typeE>
 8107058:	4603      	mov	r3, r0
 810705a:	4634      	mov	r4, r6
 810705c:	461d      	mov	r5, r3
 810705e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8107060:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8107062:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8107066:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 810706a:	4633      	mov	r3, r6
 810706c:	4618      	mov	r0, r3
 810706e:	370c      	adds	r7, #12
 8107070:	46bd      	mov	sp, r7
 8107072:	bdf0      	pop	{r4, r5, r6, r7, pc}

08107074 <_ZN9__gnu_cxx17__normal_iteratorIP8SMessageSt6vectorIS1_SaIS1_EEEC1ERKS2_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8107074:	b480      	push	{r7}
 8107076:	b083      	sub	sp, #12
 8107078:	af00      	add	r7, sp, #0
 810707a:	6078      	str	r0, [r7, #4]
 810707c:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 810707e:	683b      	ldr	r3, [r7, #0]
 8107080:	681a      	ldr	r2, [r3, #0]
 8107082:	687b      	ldr	r3, [r7, #4]
 8107084:	601a      	str	r2, [r3, #0]
 8107086:	687b      	ldr	r3, [r7, #4]
 8107088:	4618      	mov	r0, r3
 810708a:	370c      	adds	r7, #12
 810708c:	46bd      	mov	sp, r7
 810708e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107092:	4770      	bx	lr

08107094 <_ZNKSt6vectorI8SMessageSaIS0_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8107094:	b580      	push	{r7, lr}
 8107096:	b082      	sub	sp, #8
 8107098:	af00      	add	r7, sp, #0
 810709a:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 810709c:	687b      	ldr	r3, [r7, #4]
 810709e:	4618      	mov	r0, r3
 81070a0:	f000 fb8e 	bl	81077c0 <_ZNKSt12_Vector_baseI8SMessageSaIS0_EE19_M_get_Tp_allocatorEv>
 81070a4:	4603      	mov	r3, r0
 81070a6:	4618      	mov	r0, r3
 81070a8:	f000 fb6e 	bl	8107788 <_ZNSt6vectorI8SMessageSaIS0_EE11_S_max_sizeERKS1_>
 81070ac:	4603      	mov	r3, r0
 81070ae:	4618      	mov	r0, r3
 81070b0:	3708      	adds	r7, #8
 81070b2:	46bd      	mov	sp, r7
 81070b4:	bd80      	pop	{r7, pc}

081070b6 <_ZNK9__gnu_cxx17__normal_iteratorIP8SMessageSt6vectorIS1_SaIS1_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 81070b6:	b480      	push	{r7}
 81070b8:	b083      	sub	sp, #12
 81070ba:	af00      	add	r7, sp, #0
 81070bc:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 81070be:	687b      	ldr	r3, [r7, #4]
 81070c0:	4618      	mov	r0, r3
 81070c2:	370c      	adds	r7, #12
 81070c4:	46bd      	mov	sp, r7
 81070c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81070ca:	4770      	bx	lr

081070cc <_ZNSt12_Vector_baseI8SMessageSaIS0_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 81070cc:	b580      	push	{r7, lr}
 81070ce:	b082      	sub	sp, #8
 81070d0:	af00      	add	r7, sp, #0
 81070d2:	6078      	str	r0, [r7, #4]
 81070d4:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 81070d6:	683b      	ldr	r3, [r7, #0]
 81070d8:	2b00      	cmp	r3, #0
 81070da:	d006      	beq.n	81070ea <_ZNSt12_Vector_baseI8SMessageSaIS0_EE11_M_allocateEj+0x1e>
 81070dc:	687b      	ldr	r3, [r7, #4]
 81070de:	6839      	ldr	r1, [r7, #0]
 81070e0:	4618      	mov	r0, r3
 81070e2:	f000 fb78 	bl	81077d6 <_ZNSt16allocator_traitsISaI8SMessageEE8allocateERS1_j>
 81070e6:	4603      	mov	r3, r0
 81070e8:	e000      	b.n	81070ec <_ZNSt12_Vector_baseI8SMessageSaIS0_EE11_M_allocateEj+0x20>
 81070ea:	2300      	movs	r3, #0
      }
 81070ec:	4618      	mov	r0, r3
 81070ee:	3708      	adds	r7, #8
 81070f0:	46bd      	mov	sp, r7
 81070f2:	bd80      	pop	{r7, pc}

081070f4 <_ZNSt6vectorI8SMessageSaIS0_EE11_S_relocateEPS0_S3_S3_RS1_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 81070f4:	b580      	push	{r7, lr}
 81070f6:	b084      	sub	sp, #16
 81070f8:	af00      	add	r7, sp, #0
 81070fa:	60f8      	str	r0, [r7, #12]
 81070fc:	60b9      	str	r1, [r7, #8]
 81070fe:	607a      	str	r2, [r7, #4]
 8107100:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 8107102:	683b      	ldr	r3, [r7, #0]
 8107104:	687a      	ldr	r2, [r7, #4]
 8107106:	68b9      	ldr	r1, [r7, #8]
 8107108:	68f8      	ldr	r0, [r7, #12]
 810710a:	f000 fb9c 	bl	8107846 <_ZSt12__relocate_aIP8SMessageS1_SaIS0_EET0_T_S4_S3_RT1_>
 810710e:	4603      	mov	r3, r0
      }
 8107110:	4618      	mov	r0, r3
 8107112:	3710      	adds	r7, #16
 8107114:	46bd      	mov	sp, r7
 8107116:	bd80      	pop	{r7, pc}

08107118 <_ZNSt16allocator_traitsISaI8SMessageEE7destroyIS0_EEvRS1_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 8107118:	b580      	push	{r7, lr}
 810711a:	b082      	sub	sp, #8
 810711c:	af00      	add	r7, sp, #0
 810711e:	6078      	str	r0, [r7, #4]
 8107120:	6039      	str	r1, [r7, #0]
	  std::destroy_at(__p);
 8107122:	6838      	ldr	r0, [r7, #0]
 8107124:	f000 fbac 	bl	8107880 <_ZSt10destroy_atI8SMessageEvPT_>
	}
 8107128:	bf00      	nop
 810712a:	3708      	adds	r7, #8
 810712c:	46bd      	mov	sp, r7
 810712e:	bd80      	pop	{r7, pc}

08107130 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>:
      _M_end() _GLIBCXX_NOEXCEPT
 8107130:	b480      	push	{r7}
 8107132:	b083      	sub	sp, #12
 8107134:	af00      	add	r7, sp, #0
 8107136:	6078      	str	r0, [r7, #4]
      { return &this->_M_impl._M_header; }
 8107138:	687b      	ldr	r3, [r7, #4]
 810713a:	3304      	adds	r3, #4
 810713c:	4618      	mov	r0, r3
 810713e:	370c      	adds	r7, #12
 8107140:	46bd      	mov	sp, r7
 8107142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107146:	4770      	bx	lr

08107148 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8107148:	b590      	push	{r4, r7, lr}
 810714a:	b087      	sub	sp, #28
 810714c:	af00      	add	r7, sp, #0
 810714e:	60f8      	str	r0, [r7, #12]
 8107150:	60b9      	str	r1, [r7, #8]
 8107152:	607a      	str	r2, [r7, #4]
 8107154:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 8107156:	e01a      	b.n	810718e <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_+0x46>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
 8107158:	68fc      	ldr	r4, [r7, #12]
 810715a:	68b8      	ldr	r0, [r7, #8]
 810715c:	f000 fa42 	bl	81075e4 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 8107160:	4603      	mov	r3, r0
 8107162:	683a      	ldr	r2, [r7, #0]
 8107164:	4619      	mov	r1, r3
 8107166:	4620      	mov	r0, r4
 8107168:	f7ff fa7a 	bl	8106660 <_ZNKSt4lessIN19EventManagerCM4Task11EEventQueueEEclERKS1_S4_>
 810716c:	4603      	mov	r3, r0
 810716e:	f083 0301 	eor.w	r3, r3, #1
 8107172:	b2db      	uxtb	r3, r3
 8107174:	2b00      	cmp	r3, #0
 8107176:	d006      	beq.n	8107186 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_+0x3e>
	  __y = __x, __x = _S_left(__x);
 8107178:	68bb      	ldr	r3, [r7, #8]
 810717a:	607b      	str	r3, [r7, #4]
 810717c:	68b8      	ldr	r0, [r7, #8]
 810717e:	f7ff fd7e 	bl	8106c7e <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE7_S_leftEPSt18_Rb_tree_node_base>
 8107182:	60b8      	str	r0, [r7, #8]
 8107184:	e003      	b.n	810718e <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_+0x46>
	  __x = _S_right(__x);
 8107186:	68b8      	ldr	r0, [r7, #8]
 8107188:	f7ff fd6d 	bl	8106c66 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 810718c:	60b8      	str	r0, [r7, #8]
      while (__x != 0)
 810718e:	68bb      	ldr	r3, [r7, #8]
 8107190:	2b00      	cmp	r3, #0
 8107192:	d1e1      	bne.n	8107158 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_+0x10>
      return iterator(__y);
 8107194:	f107 0314 	add.w	r3, r7, #20
 8107198:	6879      	ldr	r1, [r7, #4]
 810719a:	4618      	mov	r0, r3
 810719c:	f7ff fef3 	bl	8106f86 <_ZNSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEC1EPSt18_Rb_tree_node_base>
 81071a0:	697b      	ldr	r3, [r7, #20]
    }
 81071a2:	4618      	mov	r0, r3
 81071a4:	371c      	adds	r7, #28
 81071a6:	46bd      	mov	sp, r7
 81071a8:	bd90      	pop	{r4, r7, pc}

081071aa <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>:
      _S_key(_Const_Base_ptr __x)
 81071aa:	b580      	push	{r7, lr}
 81071ac:	b082      	sub	sp, #8
 81071ae:	af00      	add	r7, sp, #0
 81071b0:	6078      	str	r0, [r7, #4]
      { return _S_key(static_cast<_Const_Link_type>(__x)); }
 81071b2:	6878      	ldr	r0, [r7, #4]
 81071b4:	f000 fa16 	bl	81075e4 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 81071b8:	4603      	mov	r3, r0
 81071ba:	4618      	mov	r0, r3
 81071bc:	3708      	adds	r7, #8
 81071be:	46bd      	mov	sp, r7
 81071c0:	bd80      	pop	{r7, pc}

081071c2 <_ZNSt11_Tuple_implILj0EJRKN19EventManagerCM4Task11EEventQueueEEEC1ES3_>:
      _Tuple_impl(const _Head& __head)
 81071c2:	b580      	push	{r7, lr}
 81071c4:	b082      	sub	sp, #8
 81071c6:	af00      	add	r7, sp, #0
 81071c8:	6078      	str	r0, [r7, #4]
 81071ca:	6039      	str	r1, [r7, #0]
      : _Base(__head)
 81071cc:	687b      	ldr	r3, [r7, #4]
 81071ce:	6839      	ldr	r1, [r7, #0]
 81071d0:	4618      	mov	r0, r3
 81071d2:	f000 fb5f 	bl	8107894 <_ZNSt10_Head_baseILj0ERKN19EventManagerCM4Task11EEventQueueELb0EEC1ES3_>
      { }
 81071d6:	687b      	ldr	r3, [r7, #4]
 81071d8:	4618      	mov	r0, r3
 81071da:	3708      	adds	r7, #8
 81071dc:	46bd      	mov	sp, r7
 81071de:	bd80      	pop	{r7, pc}

081071e0 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 81071e0:	b480      	push	{r7}
 81071e2:	b083      	sub	sp, #12
 81071e4:	af00      	add	r7, sp, #0
 81071e6:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 81071e8:	687b      	ldr	r3, [r7, #4]
 81071ea:	4618      	mov	r0, r3
 81071ec:	370c      	adds	r7, #12
 81071ee:	46bd      	mov	sp, r7
 81071f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81071f4:	4770      	bx	lr

081071f6 <_ZSt7forwardISt5tupleIJRKN19EventManagerCM4Task11EEventQueueEEEEOT_RNSt16remove_referenceIS6_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 81071f6:	b480      	push	{r7}
 81071f8:	b083      	sub	sp, #12
 81071fa:	af00      	add	r7, sp, #0
 81071fc:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 81071fe:	687b      	ldr	r3, [r7, #4]
 8107200:	4618      	mov	r0, r3
 8107202:	370c      	adds	r7, #12
 8107204:	46bd      	mov	sp, r7
 8107206:	f85d 7b04 	ldr.w	r7, [sp], #4
 810720a:	4770      	bx	lr

0810720c <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 810720c:	b480      	push	{r7}
 810720e:	b083      	sub	sp, #12
 8107210:	af00      	add	r7, sp, #0
 8107212:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8107214:	687b      	ldr	r3, [r7, #4]
 8107216:	4618      	mov	r0, r3
 8107218:	370c      	adds	r7, #12
 810721a:	46bd      	mov	sp, r7
 810721c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107220:	4770      	bx	lr

08107222 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE10_Auto_nodeC1IJRKSt21piecewise_construct_tSt5tupleIJRS3_EESI_IJEEEEERSC_DpOT_>:
	  _Auto_node(_Rb_tree& __t, _Args&&... __args)
 8107222:	b5b0      	push	{r4, r5, r7, lr}
 8107224:	b084      	sub	sp, #16
 8107226:	af00      	add	r7, sp, #0
 8107228:	60f8      	str	r0, [r7, #12]
 810722a:	60b9      	str	r1, [r7, #8]
 810722c:	607a      	str	r2, [r7, #4]
 810722e:	603b      	str	r3, [r7, #0]
	  : _M_t(__t),
 8107230:	68fb      	ldr	r3, [r7, #12]
 8107232:	68ba      	ldr	r2, [r7, #8]
 8107234:	601a      	str	r2, [r3, #0]
	    _M_node(__t._M_create_node(std::forward<_Args>(__args)...))
 8107236:	6878      	ldr	r0, [r7, #4]
 8107238:	f7ff ffd2 	bl	81071e0 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 810723c:	4604      	mov	r4, r0
 810723e:	6838      	ldr	r0, [r7, #0]
 8107240:	f7ff ffd9 	bl	81071f6 <_ZSt7forwardISt5tupleIJRKN19EventManagerCM4Task11EEventQueueEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8107244:	4605      	mov	r5, r0
 8107246:	6a38      	ldr	r0, [r7, #32]
 8107248:	f7ff ffe0 	bl	810720c <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 810724c:	4603      	mov	r3, r0
 810724e:	462a      	mov	r2, r5
 8107250:	4621      	mov	r1, r4
 8107252:	68b8      	ldr	r0, [r7, #8]
 8107254:	f000 fb2d 	bl	81078b2 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEEPSt13_Rb_tree_nodeIS6_EDpOT_>
 8107258:	4602      	mov	r2, r0
 810725a:	68fb      	ldr	r3, [r7, #12]
 810725c:	605a      	str	r2, [r3, #4]
	  { }
 810725e:	68fb      	ldr	r3, [r7, #12]
 8107260:	4618      	mov	r0, r3
 8107262:	3710      	adds	r7, #16
 8107264:	46bd      	mov	sp, r7
 8107266:	bdb0      	pop	{r4, r5, r7, pc}

08107268 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8107268:	b590      	push	{r4, r7, lr}
 810726a:	b08d      	sub	sp, #52	@ 0x34
 810726c:	af00      	add	r7, sp, #0
 810726e:	60f8      	str	r0, [r7, #12]
 8107270:	60b9      	str	r1, [r7, #8]
 8107272:	607a      	str	r2, [r7, #4]
 8107274:	603b      	str	r3, [r7, #0]
      iterator __pos = __position._M_const_cast();
 8107276:	1d3b      	adds	r3, r7, #4
 8107278:	4618      	mov	r0, r3
 810727a:	f000 fb3d 	bl	81078f8 <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEE13_M_const_castEv>
 810727e:	4603      	mov	r3, r0
 8107280:	61bb      	str	r3, [r7, #24]
      if (__pos._M_node == _M_end())
 8107282:	69bc      	ldr	r4, [r7, #24]
 8107284:	68b8      	ldr	r0, [r7, #8]
 8107286:	f7ff ff53 	bl	8107130 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>
 810728a:	4603      	mov	r3, r0
 810728c:	429c      	cmp	r4, r3
 810728e:	bf0c      	ite	eq
 8107290:	2301      	moveq	r3, #1
 8107292:	2300      	movne	r3, #0
 8107294:	b2db      	uxtb	r3, r3
 8107296:	2b00      	cmp	r3, #0
 8107298:	d030      	beq.n	81072fc <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x94>
	  if (size() > 0
 810729a:	68b8      	ldr	r0, [r7, #8]
 810729c:	f7ff fe82 	bl	8106fa4 <_ZNKSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4sizeEv>
 81072a0:	4603      	mov	r3, r0
	      && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
 81072a2:	2b00      	cmp	r3, #0
 81072a4:	d013      	beq.n	81072ce <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x66>
 81072a6:	68bc      	ldr	r4, [r7, #8]
 81072a8:	68b8      	ldr	r0, [r7, #8]
 81072aa:	f000 fb36 	bl	810791a <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_rightmostEv>
 81072ae:	4603      	mov	r3, r0
 81072b0:	681b      	ldr	r3, [r3, #0]
 81072b2:	4618      	mov	r0, r3
 81072b4:	f7ff ff79 	bl	81071aa <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 81072b8:	4603      	mov	r3, r0
 81072ba:	683a      	ldr	r2, [r7, #0]
 81072bc:	4619      	mov	r1, r3
 81072be:	4620      	mov	r0, r4
 81072c0:	f7ff f9ce 	bl	8106660 <_ZNKSt4lessIN19EventManagerCM4Task11EEventQueueEEclERKS1_S4_>
 81072c4:	4603      	mov	r3, r0
 81072c6:	2b00      	cmp	r3, #0
 81072c8:	d001      	beq.n	81072ce <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x66>
 81072ca:	2301      	movs	r3, #1
 81072cc:	e000      	b.n	81072d0 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x68>
 81072ce:	2300      	movs	r3, #0
	  if (size() > 0
 81072d0:	2b00      	cmp	r3, #0
 81072d2:	d00c      	beq.n	81072ee <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x86>
	    return _Res(0, _M_rightmost());
 81072d4:	2300      	movs	r3, #0
 81072d6:	61fb      	str	r3, [r7, #28]
 81072d8:	68b8      	ldr	r0, [r7, #8]
 81072da:	f000 fb1e 	bl	810791a <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_rightmostEv>
 81072de:	4602      	mov	r2, r0
 81072e0:	f107 031c 	add.w	r3, r7, #28
 81072e4:	4619      	mov	r1, r3
 81072e6:	68f8      	ldr	r0, [r7, #12]
 81072e8:	f000 f9ca 	bl	8107680 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1ERKS1_S4_>
    }
 81072ec:	e0db      	b.n	81074a6 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 81072ee:	68fb      	ldr	r3, [r7, #12]
 81072f0:	683a      	ldr	r2, [r7, #0]
 81072f2:	68b9      	ldr	r1, [r7, #8]
 81072f4:	4618      	mov	r0, r3
 81072f6:	f7ff fd9a 	bl	8106e2e <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_>
 81072fa:	e0d4      	b.n	81074a6 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x23e>
      else if (_M_impl._M_key_compare(__k, _S_key(__pos._M_node)))
 81072fc:	68bc      	ldr	r4, [r7, #8]
 81072fe:	69bb      	ldr	r3, [r7, #24]
 8107300:	4618      	mov	r0, r3
 8107302:	f7ff ff52 	bl	81071aa <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8107306:	4603      	mov	r3, r0
 8107308:	461a      	mov	r2, r3
 810730a:	6839      	ldr	r1, [r7, #0]
 810730c:	4620      	mov	r0, r4
 810730e:	f7ff f9a7 	bl	8106660 <_ZNKSt4lessIN19EventManagerCM4Task11EEventQueueEEclERKS1_S4_>
 8107312:	4603      	mov	r3, r0
 8107314:	2b00      	cmp	r3, #0
 8107316:	d057      	beq.n	81073c8 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x160>
	  iterator __before = __pos;
 8107318:	69bb      	ldr	r3, [r7, #24]
 810731a:	617b      	str	r3, [r7, #20]
	  if (__pos._M_node == _M_leftmost()) // begin()
 810731c:	69bc      	ldr	r4, [r7, #24]
 810731e:	68b8      	ldr	r0, [r7, #8]
 8107320:	f000 fb07 	bl	8107932 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_leftmostEv>
 8107324:	4603      	mov	r3, r0
 8107326:	681b      	ldr	r3, [r3, #0]
 8107328:	429c      	cmp	r4, r3
 810732a:	bf0c      	ite	eq
 810732c:	2301      	moveq	r3, #1
 810732e:	2300      	movne	r3, #0
 8107330:	b2db      	uxtb	r3, r3
 8107332:	2b00      	cmp	r3, #0
 8107334:	d00d      	beq.n	8107352 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0xea>
	    return _Res(_M_leftmost(), _M_leftmost());
 8107336:	68b8      	ldr	r0, [r7, #8]
 8107338:	f000 fafb 	bl	8107932 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_leftmostEv>
 810733c:	4604      	mov	r4, r0
 810733e:	68b8      	ldr	r0, [r7, #8]
 8107340:	f000 faf7 	bl	8107932 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_leftmostEv>
 8107344:	4603      	mov	r3, r0
 8107346:	461a      	mov	r2, r3
 8107348:	4621      	mov	r1, r4
 810734a:	68f8      	ldr	r0, [r7, #12]
 810734c:	f000 fafd 	bl	810794a <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_EEOT_OT0_>
 8107350:	e0a9      	b.n	81074a6 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x23e>
	  else if (_M_impl._M_key_compare(_S_key((--__before)._M_node), __k))
 8107352:	68bc      	ldr	r4, [r7, #8]
 8107354:	f107 0314 	add.w	r3, r7, #20
 8107358:	4618      	mov	r0, r3
 810735a:	f000 f980 	bl	810765e <_ZNSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEmmEv>
 810735e:	4603      	mov	r3, r0
 8107360:	681b      	ldr	r3, [r3, #0]
 8107362:	4618      	mov	r0, r3
 8107364:	f7ff ff21 	bl	81071aa <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8107368:	4603      	mov	r3, r0
 810736a:	683a      	ldr	r2, [r7, #0]
 810736c:	4619      	mov	r1, r3
 810736e:	4620      	mov	r0, r4
 8107370:	f7ff f976 	bl	8106660 <_ZNKSt4lessIN19EventManagerCM4Task11EEventQueueEEclERKS1_S4_>
 8107374:	4603      	mov	r3, r0
 8107376:	2b00      	cmp	r3, #0
 8107378:	d01f      	beq.n	81073ba <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x152>
	      if (_S_right(__before._M_node) == 0)
 810737a:	697b      	ldr	r3, [r7, #20]
 810737c:	4618      	mov	r0, r3
 810737e:	f7ff fc72 	bl	8106c66 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 8107382:	4603      	mov	r3, r0
 8107384:	2b00      	cmp	r3, #0
 8107386:	bf0c      	ite	eq
 8107388:	2301      	moveq	r3, #1
 810738a:	2300      	movne	r3, #0
 810738c:	b2db      	uxtb	r3, r3
 810738e:	2b00      	cmp	r3, #0
 8107390:	d00a      	beq.n	81073a8 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x140>
		return _Res(0, __before._M_node);
 8107392:	2300      	movs	r3, #0
 8107394:	623b      	str	r3, [r7, #32]
 8107396:	f107 0214 	add.w	r2, r7, #20
 810739a:	f107 0320 	add.w	r3, r7, #32
 810739e:	4619      	mov	r1, r3
 81073a0:	68f8      	ldr	r0, [r7, #12]
 81073a2:	f000 f96d 	bl	8107680 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1ERKS1_S4_>
    }
 81073a6:	e07e      	b.n	81074a6 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x23e>
		return _Res(__pos._M_node, __pos._M_node);
 81073a8:	f107 0218 	add.w	r2, r7, #24
 81073ac:	f107 0318 	add.w	r3, r7, #24
 81073b0:	4619      	mov	r1, r3
 81073b2:	68f8      	ldr	r0, [r7, #12]
 81073b4:	f000 fac9 	bl	810794a <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_EEOT_OT0_>
 81073b8:	e075      	b.n	81074a6 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 81073ba:	68fb      	ldr	r3, [r7, #12]
 81073bc:	683a      	ldr	r2, [r7, #0]
 81073be:	68b9      	ldr	r1, [r7, #8]
 81073c0:	4618      	mov	r0, r3
 81073c2:	f7ff fd34 	bl	8106e2e <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_>
 81073c6:	e06e      	b.n	81074a6 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x23e>
      else if (_M_impl._M_key_compare(_S_key(__pos._M_node), __k))
 81073c8:	68bc      	ldr	r4, [r7, #8]
 81073ca:	69bb      	ldr	r3, [r7, #24]
 81073cc:	4618      	mov	r0, r3
 81073ce:	f7ff feec 	bl	81071aa <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 81073d2:	4603      	mov	r3, r0
 81073d4:	683a      	ldr	r2, [r7, #0]
 81073d6:	4619      	mov	r1, r3
 81073d8:	4620      	mov	r0, r4
 81073da:	f7ff f941 	bl	8106660 <_ZNKSt4lessIN19EventManagerCM4Task11EEventQueueEEclERKS1_S4_>
 81073de:	4603      	mov	r3, r0
 81073e0:	2b00      	cmp	r3, #0
 81073e2:	d056      	beq.n	8107492 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x22a>
	  iterator __after = __pos;
 81073e4:	69bb      	ldr	r3, [r7, #24]
 81073e6:	613b      	str	r3, [r7, #16]
	  if (__pos._M_node == _M_rightmost())
 81073e8:	69bc      	ldr	r4, [r7, #24]
 81073ea:	68b8      	ldr	r0, [r7, #8]
 81073ec:	f000 fa95 	bl	810791a <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_rightmostEv>
 81073f0:	4603      	mov	r3, r0
 81073f2:	681b      	ldr	r3, [r3, #0]
 81073f4:	429c      	cmp	r4, r3
 81073f6:	bf0c      	ite	eq
 81073f8:	2301      	moveq	r3, #1
 81073fa:	2300      	movne	r3, #0
 81073fc:	b2db      	uxtb	r3, r3
 81073fe:	2b00      	cmp	r3, #0
 8107400:	d00c      	beq.n	810741c <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x1b4>
	    return _Res(0, _M_rightmost());
 8107402:	2300      	movs	r3, #0
 8107404:	627b      	str	r3, [r7, #36]	@ 0x24
 8107406:	68b8      	ldr	r0, [r7, #8]
 8107408:	f000 fa87 	bl	810791a <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_rightmostEv>
 810740c:	4602      	mov	r2, r0
 810740e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8107412:	4619      	mov	r1, r3
 8107414:	68f8      	ldr	r0, [r7, #12]
 8107416:	f000 f933 	bl	8107680 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1ERKS1_S4_>
    }
 810741a:	e044      	b.n	81074a6 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x23e>
	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
 810741c:	68bc      	ldr	r4, [r7, #8]
 810741e:	f107 0310 	add.w	r3, r7, #16
 8107422:	4618      	mov	r0, r3
 8107424:	f000 faaa 	bl	810797c <_ZNSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEppEv>
 8107428:	4603      	mov	r3, r0
 810742a:	681b      	ldr	r3, [r3, #0]
 810742c:	4618      	mov	r0, r3
 810742e:	f7ff febc 	bl	81071aa <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8107432:	4603      	mov	r3, r0
 8107434:	461a      	mov	r2, r3
 8107436:	6839      	ldr	r1, [r7, #0]
 8107438:	4620      	mov	r0, r4
 810743a:	f7ff f911 	bl	8106660 <_ZNKSt4lessIN19EventManagerCM4Task11EEventQueueEEclERKS1_S4_>
 810743e:	4603      	mov	r3, r0
 8107440:	2b00      	cmp	r3, #0
 8107442:	d01f      	beq.n	8107484 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x21c>
	      if (_S_right(__pos._M_node) == 0)
 8107444:	69bb      	ldr	r3, [r7, #24]
 8107446:	4618      	mov	r0, r3
 8107448:	f7ff fc0d 	bl	8106c66 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 810744c:	4603      	mov	r3, r0
 810744e:	2b00      	cmp	r3, #0
 8107450:	bf0c      	ite	eq
 8107452:	2301      	moveq	r3, #1
 8107454:	2300      	movne	r3, #0
 8107456:	b2db      	uxtb	r3, r3
 8107458:	2b00      	cmp	r3, #0
 810745a:	d00a      	beq.n	8107472 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x20a>
		return _Res(0, __pos._M_node);
 810745c:	2300      	movs	r3, #0
 810745e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8107460:	f107 0218 	add.w	r2, r7, #24
 8107464:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8107468:	4619      	mov	r1, r3
 810746a:	68f8      	ldr	r0, [r7, #12]
 810746c:	f000 f908 	bl	8107680 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1ERKS1_S4_>
    }
 8107470:	e019      	b.n	81074a6 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x23e>
		return _Res(__after._M_node, __after._M_node);
 8107472:	f107 0210 	add.w	r2, r7, #16
 8107476:	f107 0310 	add.w	r3, r7, #16
 810747a:	4619      	mov	r1, r3
 810747c:	68f8      	ldr	r0, [r7, #12]
 810747e:	f000 fa64 	bl	810794a <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_EEOT_OT0_>
 8107482:	e010      	b.n	81074a6 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 8107484:	68fb      	ldr	r3, [r7, #12]
 8107486:	683a      	ldr	r2, [r7, #0]
 8107488:	68b9      	ldr	r1, [r7, #8]
 810748a:	4618      	mov	r0, r3
 810748c:	f7ff fccf 	bl	8106e2e <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_>
 8107490:	e009      	b.n	81074a6 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x23e>
	return _Res(__pos._M_node, 0);
 8107492:	2300      	movs	r3, #0
 8107494:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8107496:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 810749a:	f107 0318 	add.w	r3, r7, #24
 810749e:	4619      	mov	r1, r3
 81074a0:	68f8      	ldr	r0, [r7, #12]
 81074a2:	f000 f8ed 	bl	8107680 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1ERKS1_S4_>
    }
 81074a6:	68f8      	ldr	r0, [r7, #12]
 81074a8:	3734      	adds	r7, #52	@ 0x34
 81074aa:	46bd      	mov	sp, r7
 81074ac:	bd90      	pop	{r4, r7, pc}

081074ae <_ZSt7forwardIN19EventManagerCM4Task11EEventQueueEEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 81074ae:	b480      	push	{r7}
 81074b0:	b083      	sub	sp, #12
 81074b2:	af00      	add	r7, sp, #0
 81074b4:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 81074b6:	687b      	ldr	r3, [r7, #4]
 81074b8:	4618      	mov	r0, r3
 81074ba:	370c      	adds	r7, #12
 81074bc:	46bd      	mov	sp, r7
 81074be:	f85d 7b04 	ldr.w	r7, [sp], #4
 81074c2:	4770      	bx	lr

081074c4 <_ZNSt5tupleIJON19EventManagerCM4Task11EEventQueueEEEC1IJS1_ELb1ELb1EEEDpOT_>:
	tuple(_UElements&&... __elements)
 81074c4:	b590      	push	{r4, r7, lr}
 81074c6:	b083      	sub	sp, #12
 81074c8:	af00      	add	r7, sp, #0
 81074ca:	6078      	str	r0, [r7, #4]
 81074cc:	6039      	str	r1, [r7, #0]
	: _Inherited(std::forward<_UElements>(__elements)...) { }
 81074ce:	687c      	ldr	r4, [r7, #4]
 81074d0:	6838      	ldr	r0, [r7, #0]
 81074d2:	f7ff ffec 	bl	81074ae <_ZSt7forwardIN19EventManagerCM4Task11EEventQueueEEOT_RNSt16remove_referenceIS2_E4typeE>
 81074d6:	4603      	mov	r3, r0
 81074d8:	4619      	mov	r1, r3
 81074da:	4620      	mov	r0, r4
 81074dc:	f000 fa5f 	bl	810799e <_ZNSt11_Tuple_implILj0EJON19EventManagerCM4Task11EEventQueueEEEC1IS1_EEOT_>
 81074e0:	687b      	ldr	r3, [r7, #4]
 81074e2:	4618      	mov	r0, r3
 81074e4:	370c      	adds	r7, #12
 81074e6:	46bd      	mov	sp, r7
 81074e8:	bd90      	pop	{r4, r7, pc}

081074ea <_ZSt7forwardISt5tupleIJON19EventManagerCM4Task11EEventQueueEEEEOT_RNSt16remove_referenceIS5_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 81074ea:	b480      	push	{r7}
 81074ec:	b083      	sub	sp, #12
 81074ee:	af00      	add	r7, sp, #0
 81074f0:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 81074f2:	687b      	ldr	r3, [r7, #4]
 81074f4:	4618      	mov	r0, r3
 81074f6:	370c      	adds	r7, #12
 81074f8:	46bd      	mov	sp, r7
 81074fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 81074fe:	4770      	bx	lr

08107500 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE10_Auto_nodeC1IJRKSt21piecewise_construct_tSt5tupleIJOS1_EESI_IJEEEEERSC_DpOT_>:
	  _Auto_node(_Rb_tree& __t, _Args&&... __args)
 8107500:	b5b0      	push	{r4, r5, r7, lr}
 8107502:	b084      	sub	sp, #16
 8107504:	af00      	add	r7, sp, #0
 8107506:	60f8      	str	r0, [r7, #12]
 8107508:	60b9      	str	r1, [r7, #8]
 810750a:	607a      	str	r2, [r7, #4]
 810750c:	603b      	str	r3, [r7, #0]
	  : _M_t(__t),
 810750e:	68fb      	ldr	r3, [r7, #12]
 8107510:	68ba      	ldr	r2, [r7, #8]
 8107512:	601a      	str	r2, [r3, #0]
	    _M_node(__t._M_create_node(std::forward<_Args>(__args)...))
 8107514:	6878      	ldr	r0, [r7, #4]
 8107516:	f7ff fe63 	bl	81071e0 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 810751a:	4604      	mov	r4, r0
 810751c:	6838      	ldr	r0, [r7, #0]
 810751e:	f7ff ffe4 	bl	81074ea <_ZSt7forwardISt5tupleIJON19EventManagerCM4Task11EEventQueueEEEEOT_RNSt16remove_referenceIS5_E4typeE>
 8107522:	4605      	mov	r5, r0
 8107524:	6a38      	ldr	r0, [r7, #32]
 8107526:	f7ff fe71 	bl	810720c <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 810752a:	4603      	mov	r3, r0
 810752c:	462a      	mov	r2, r5
 810752e:	4621      	mov	r1, r4
 8107530:	68b8      	ldr	r0, [r7, #8]
 8107532:	f000 fa47 	bl	81079c4 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJOS1_EESH_IJEEEEEPSt13_Rb_tree_nodeIS6_EDpOT_>
 8107536:	4602      	mov	r2, r0
 8107538:	68fb      	ldr	r3, [r7, #12]
 810753a:	605a      	str	r2, [r3, #4]
	  { }
 810753c:	68fb      	ldr	r3, [r7, #12]
 810753e:	4618      	mov	r0, r3
 8107540:	3710      	adds	r7, #16
 8107542:	46bd      	mov	sp, r7
 8107544:	bdb0      	pop	{r4, r5, r7, pc}

08107546 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS6_E>:
      _M_destroy_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8107546:	b590      	push	{r4, r7, lr}
 8107548:	b083      	sub	sp, #12
 810754a:	af00      	add	r7, sp, #0
 810754c:	6078      	str	r0, [r7, #4]
 810754e:	6039      	str	r1, [r7, #0]
	_Alloc_traits::destroy(_M_get_Node_allocator(), __p->_M_valptr());
 8107550:	6878      	ldr	r0, [r7, #4]
 8107552:	f000 fa5a 	bl	8107a0a <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>
 8107556:	4604      	mov	r4, r0
 8107558:	6838      	ldr	r0, [r7, #0]
 810755a:	f7ff fbdb 	bl	8106d14 <_ZNSt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEE9_M_valptrEv>
 810755e:	4603      	mov	r3, r0
 8107560:	4619      	mov	r1, r3
 8107562:	4620      	mov	r0, r4
 8107564:	f000 fa5c 	bl	8107a20 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEEE7destroyIS7_EEvRS9_PT_>
      }
 8107568:	bf00      	nop
 810756a:	370c      	adds	r7, #12
 810756c:	46bd      	mov	sp, r7
 810756e:	bd90      	pop	{r4, r7, pc}

08107570 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS6_E>:
      _M_put_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8107570:	b580      	push	{r7, lr}
 8107572:	b082      	sub	sp, #8
 8107574:	af00      	add	r7, sp, #0
 8107576:	6078      	str	r0, [r7, #4]
 8107578:	6039      	str	r1, [r7, #0]
      { _Alloc_traits::deallocate(_M_get_Node_allocator(), __p, 1); }
 810757a:	6878      	ldr	r0, [r7, #4]
 810757c:	f000 fa45 	bl	8107a0a <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>
 8107580:	4603      	mov	r3, r0
 8107582:	2201      	movs	r2, #1
 8107584:	6839      	ldr	r1, [r7, #0]
 8107586:	4618      	mov	r0, r3
 8107588:	f000 fa56 	bl	8107a38 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEEE10deallocateERS9_PS8_j>
 810758c:	bf00      	nop
 810758e:	3708      	adds	r7, #8
 8107590:	46bd      	mov	sp, r7
 8107592:	bd80      	pop	{r7, pc}

08107594 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEE6_M_ptrEv>:
      _M_ptr() noexcept
 8107594:	b580      	push	{r7, lr}
 8107596:	b082      	sub	sp, #8
 8107598:	af00      	add	r7, sp, #0
 810759a:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 810759c:	6878      	ldr	r0, [r7, #4]
 810759e:	f000 fa6a 	bl	8107a76 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEE7_M_addrEv>
 81075a2:	4603      	mov	r3, r0
 81075a4:	4618      	mov	r0, r3
 81075a6:	3708      	adds	r7, #8
 81075a8:	46bd      	mov	sp, r7
 81075aa:	bd80      	pop	{r7, pc}

081075ac <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_create_nodeIJRS1_RS5_EEEPSt13_Rb_tree_nodeIS6_EDpOT_>:
	_M_create_node(_Args&&... __args)
 81075ac:	b590      	push	{r4, r7, lr}
 81075ae:	b087      	sub	sp, #28
 81075b0:	af00      	add	r7, sp, #0
 81075b2:	60f8      	str	r0, [r7, #12]
 81075b4:	60b9      	str	r1, [r7, #8]
 81075b6:	607a      	str	r2, [r7, #4]
	  _Link_type __tmp = _M_get_node();
 81075b8:	68f8      	ldr	r0, [r7, #12]
 81075ba:	f000 fa67 	bl	8107a8c <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_get_nodeEv>
 81075be:	6178      	str	r0, [r7, #20]
	  _M_construct_node(__tmp, std::forward<_Args>(__args)...);
 81075c0:	68b8      	ldr	r0, [r7, #8]
 81075c2:	f7ff f862 	bl	810668a <_ZSt7forwardIRN19EventManagerCM4Task11EEventQueueEEOT_RNSt16remove_referenceIS3_E4typeE>
 81075c6:	4604      	mov	r4, r0
 81075c8:	6878      	ldr	r0, [r7, #4]
 81075ca:	f7ff f869 	bl	81066a0 <_ZSt7forwardIRP15QueueDefinitionEOT_RNSt16remove_referenceIS3_E4typeE>
 81075ce:	4603      	mov	r3, r0
 81075d0:	4622      	mov	r2, r4
 81075d2:	6979      	ldr	r1, [r7, #20]
 81075d4:	68f8      	ldr	r0, [r7, #12]
 81075d6:	f000 fa6a 	bl	8107aae <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE17_M_construct_nodeIJRS1_RS5_EEEvPSt13_Rb_tree_nodeIS6_EDpOT_>
	  return __tmp;
 81075da:	697b      	ldr	r3, [r7, #20]
	}
 81075dc:	4618      	mov	r0, r3
 81075de:	371c      	adds	r7, #28
 81075e0:	46bd      	mov	sp, r7
 81075e2:	bd90      	pop	{r4, r7, pc}

081075e4 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>:
      _S_key(_Const_Link_type __x)
 81075e4:	b580      	push	{r7, lr}
 81075e6:	b084      	sub	sp, #16
 81075e8:	af00      	add	r7, sp, #0
 81075ea:	6078      	str	r0, [r7, #4]
	return _KeyOfValue()(*__x->_M_valptr());
 81075ec:	6878      	ldr	r0, [r7, #4]
 81075ee:	f000 fa83 	bl	8107af8 <_ZNKSt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEE9_M_valptrEv>
 81075f2:	4602      	mov	r2, r0
 81075f4:	f107 030c 	add.w	r3, r7, #12
 81075f8:	4611      	mov	r1, r2
 81075fa:	4618      	mov	r0, r3
 81075fc:	f000 fa8a 	bl	8107b14 <_ZNKSt10_Select1stISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEclERKS6_>
 8107600:	4603      	mov	r3, r0
      }
 8107602:	4618      	mov	r0, r3
 8107604:	3710      	adds	r7, #16
 8107606:	46bd      	mov	sp, r7
 8107608:	bd80      	pop	{r7, pc}

0810760a <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 810760a:	b580      	push	{r7, lr}
 810760c:	b084      	sub	sp, #16
 810760e:	af00      	add	r7, sp, #0
 8107610:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_header._M_left); }
 8107612:	687b      	ldr	r3, [r7, #4]
 8107614:	68da      	ldr	r2, [r3, #12]
 8107616:	f107 030c 	add.w	r3, r7, #12
 810761a:	4611      	mov	r1, r2
 810761c:	4618      	mov	r0, r3
 810761e:	f7ff fcb2 	bl	8106f86 <_ZNSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEC1EPSt18_Rb_tree_node_base>
 8107622:	68fb      	ldr	r3, [r7, #12]
 8107624:	4618      	mov	r0, r3
 8107626:	3710      	adds	r7, #16
 8107628:	46bd      	mov	sp, r7
 810762a:	bd80      	pop	{r7, pc}

0810762c <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEERS1_EEOT_OT0_>:
	pair(_U1&& __x, _U2&& __y)
 810762c:	b580      	push	{r7, lr}
 810762e:	b084      	sub	sp, #16
 8107630:	af00      	add	r7, sp, #0
 8107632:	60f8      	str	r0, [r7, #12]
 8107634:	60b9      	str	r1, [r7, #8]
 8107636:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y))
 8107638:	68b8      	ldr	r0, [r7, #8]
 810763a:	f000 fa77 	bl	8107b2c <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEEOT_RNSt16remove_referenceISB_E4typeE>
 810763e:	4603      	mov	r3, r0
 8107640:	681a      	ldr	r2, [r3, #0]
 8107642:	68fb      	ldr	r3, [r7, #12]
 8107644:	601a      	str	r2, [r3, #0]
 8107646:	6878      	ldr	r0, [r7, #4]
 8107648:	f000 fa7b 	bl	8107b42 <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 810764c:	4603      	mov	r3, r0
 810764e:	681a      	ldr	r2, [r3, #0]
 8107650:	68fb      	ldr	r3, [r7, #12]
 8107652:	605a      	str	r2, [r3, #4]
	{ }
 8107654:	68fb      	ldr	r3, [r7, #12]
 8107656:	4618      	mov	r0, r3
 8107658:	3710      	adds	r7, #16
 810765a:	46bd      	mov	sp, r7
 810765c:	bd80      	pop	{r7, pc}

0810765e <_ZNSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEmmEv>:
      operator--() _GLIBCXX_NOEXCEPT
 810765e:	b580      	push	{r7, lr}
 8107660:	b082      	sub	sp, #8
 8107662:	af00      	add	r7, sp, #0
 8107664:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_decrement(_M_node);
 8107666:	687b      	ldr	r3, [r7, #4]
 8107668:	681b      	ldr	r3, [r3, #0]
 810766a:	4618      	mov	r0, r3
 810766c:	f01b fae5 	bl	8122c3a <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
 8107670:	4602      	mov	r2, r0
 8107672:	687b      	ldr	r3, [r7, #4]
 8107674:	601a      	str	r2, [r3, #0]
	return *this;
 8107676:	687b      	ldr	r3, [r7, #4]
      }
 8107678:	4618      	mov	r0, r3
 810767a:	3708      	adds	r7, #8
 810767c:	46bd      	mov	sp, r7
 810767e:	bd80      	pop	{r7, pc}

08107680 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1ERKS1_S4_>:
      pair(const _T1& __x, const _T2& __y)
 8107680:	b480      	push	{r7}
 8107682:	b085      	sub	sp, #20
 8107684:	af00      	add	r7, sp, #0
 8107686:	60f8      	str	r0, [r7, #12]
 8107688:	60b9      	str	r1, [r7, #8]
 810768a:	607a      	str	r2, [r7, #4]
      : first(__x), second(__y)
 810768c:	68bb      	ldr	r3, [r7, #8]
 810768e:	681a      	ldr	r2, [r3, #0]
 8107690:	68fb      	ldr	r3, [r7, #12]
 8107692:	601a      	str	r2, [r3, #0]
 8107694:	687b      	ldr	r3, [r7, #4]
 8107696:	681a      	ldr	r2, [r3, #0]
 8107698:	68fb      	ldr	r3, [r7, #12]
 810769a:	605a      	str	r2, [r3, #4]
      { }
 810769c:	68fb      	ldr	r3, [r7, #12]
 810769e:	4618      	mov	r0, r3
 81076a0:	3714      	adds	r7, #20
 81076a2:	46bd      	mov	sp, r7
 81076a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81076a8:	4770      	bx	lr

081076aa <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 81076aa:	b5b0      	push	{r4, r5, r7, lr}
 81076ac:	b086      	sub	sp, #24
 81076ae:	af00      	add	r7, sp, #0
 81076b0:	60f8      	str	r0, [r7, #12]
 81076b2:	60b9      	str	r1, [r7, #8]
 81076b4:	607a      	str	r2, [r7, #4]
 81076b6:	603b      	str	r3, [r7, #0]
			    || _M_impl._M_key_compare(_S_key(__z),
 81076b8:	68bb      	ldr	r3, [r7, #8]
 81076ba:	2b00      	cmp	r3, #0
 81076bc:	d117      	bne.n	81076ee <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E+0x44>
      bool __insert_left = (__x != 0 || __p == _M_end()
 81076be:	68f8      	ldr	r0, [r7, #12]
 81076c0:	f7ff fd36 	bl	8107130 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>
 81076c4:	4602      	mov	r2, r0
 81076c6:	687b      	ldr	r3, [r7, #4]
 81076c8:	4293      	cmp	r3, r2
 81076ca:	d010      	beq.n	81076ee <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E+0x44>
			    || _M_impl._M_key_compare(_S_key(__z),
 81076cc:	68fc      	ldr	r4, [r7, #12]
 81076ce:	6838      	ldr	r0, [r7, #0]
 81076d0:	f7ff ff88 	bl	81075e4 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 81076d4:	4605      	mov	r5, r0
 81076d6:	6878      	ldr	r0, [r7, #4]
 81076d8:	f7ff fd67 	bl	81071aa <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 81076dc:	4603      	mov	r3, r0
 81076de:	461a      	mov	r2, r3
 81076e0:	4629      	mov	r1, r5
 81076e2:	4620      	mov	r0, r4
 81076e4:	f7fe ffbc 	bl	8106660 <_ZNKSt4lessIN19EventManagerCM4Task11EEventQueueEEclERKS1_S4_>
 81076e8:	4603      	mov	r3, r0
 81076ea:	2b00      	cmp	r3, #0
 81076ec:	d001      	beq.n	81076f2 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E+0x48>
 81076ee:	2301      	movs	r3, #1
 81076f0:	e000      	b.n	81076f4 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E+0x4a>
 81076f2:	2300      	movs	r3, #0
      bool __insert_left = (__x != 0 || __p == _M_end()
 81076f4:	75fb      	strb	r3, [r7, #23]
				    this->_M_impl._M_header);
 81076f6:	68fb      	ldr	r3, [r7, #12]
 81076f8:	3304      	adds	r3, #4
      _Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
 81076fa:	7df8      	ldrb	r0, [r7, #23]
 81076fc:	687a      	ldr	r2, [r7, #4]
 81076fe:	6839      	ldr	r1, [r7, #0]
 8107700:	f01b fa9d 	bl	8122c3e <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
      ++_M_impl._M_node_count;
 8107704:	68fb      	ldr	r3, [r7, #12]
 8107706:	695b      	ldr	r3, [r3, #20]
 8107708:	1c5a      	adds	r2, r3, #1
 810770a:	68fb      	ldr	r3, [r7, #12]
 810770c:	615a      	str	r2, [r3, #20]
      return iterator(__z);
 810770e:	f107 0310 	add.w	r3, r7, #16
 8107712:	6839      	ldr	r1, [r7, #0]
 8107714:	4618      	mov	r0, r3
 8107716:	f7ff fc36 	bl	8106f86 <_ZNSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEC1EPSt18_Rb_tree_node_base>
 810771a:	693b      	ldr	r3, [r7, #16]
    }
 810771c:	4618      	mov	r0, r3
 810771e:	3718      	adds	r7, #24
 8107720:	46bd      	mov	sp, r7
 8107722:	bdb0      	pop	{r4, r5, r7, pc}

08107724 <_ZNSt12_Destroy_auxILb0EE9__destroyIP8SMessageEEvT_S4_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
 8107724:	b580      	push	{r7, lr}
 8107726:	b082      	sub	sp, #8
 8107728:	af00      	add	r7, sp, #0
 810772a:	6078      	str	r0, [r7, #4]
 810772c:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 810772e:	e009      	b.n	8107744 <_ZNSt12_Destroy_auxILb0EE9__destroyIP8SMessageEEvT_S4_+0x20>
	    std::_Destroy(std::__addressof(*__first));
 8107730:	6878      	ldr	r0, [r7, #4]
 8107732:	f000 fa11 	bl	8107b58 <_ZSt11__addressofI8SMessageEPT_RS1_>
 8107736:	4603      	mov	r3, r0
 8107738:	4618      	mov	r0, r3
 810773a:	f000 fa18 	bl	8107b6e <_ZSt8_DestroyI8SMessageEvPT_>
	  for (; __first != __last; ++__first)
 810773e:	687b      	ldr	r3, [r7, #4]
 8107740:	331c      	adds	r3, #28
 8107742:	607b      	str	r3, [r7, #4]
 8107744:	687a      	ldr	r2, [r7, #4]
 8107746:	683b      	ldr	r3, [r7, #0]
 8107748:	429a      	cmp	r2, r3
 810774a:	d1f1      	bne.n	8107730 <_ZNSt12_Destroy_auxILb0EE9__destroyIP8SMessageEEvT_S4_+0xc>
	}
 810774c:	bf00      	nop
 810774e:	bf00      	nop
 8107750:	3708      	adds	r7, #8
 8107752:	46bd      	mov	sp, r7
 8107754:	bd80      	pop	{r7, pc}

08107756 <_ZNSt12_Destroy_auxILb1EE9__destroyIP8SMessageEEvT_S4_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 8107756:	b480      	push	{r7}
 8107758:	b083      	sub	sp, #12
 810775a:	af00      	add	r7, sp, #0
 810775c:	6078      	str	r0, [r7, #4]
 810775e:	6039      	str	r1, [r7, #0]
 8107760:	bf00      	nop
 8107762:	370c      	adds	r7, #12
 8107764:	46bd      	mov	sp, r7
 8107766:	f85d 7b04 	ldr.w	r7, [sp], #4
 810776a:	4770      	bx	lr

0810776c <_ZNSt16allocator_traitsISaI8SMessageEE8max_sizeERKS1_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 810776c:	b480      	push	{r7}
 810776e:	b083      	sub	sp, #12
 8107770:	af00      	add	r7, sp, #0
 8107772:	6078      	str	r0, [r7, #4]
	return size_t(-1) / sizeof(value_type);
 8107774:	4b03      	ldr	r3, [pc, #12]	@ (8107784 <_ZNSt16allocator_traitsISaI8SMessageEE8max_sizeERKS1_+0x18>)
      }
 8107776:	4618      	mov	r0, r3
 8107778:	370c      	adds	r7, #12
 810777a:	46bd      	mov	sp, r7
 810777c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107780:	4770      	bx	lr
 8107782:	bf00      	nop
 8107784:	09249249 	.word	0x09249249

08107788 <_ZNSt6vectorI8SMessageSaIS0_EE11_S_max_sizeERKS1_>:
	      __N("cannot create std::vector larger than max_size()"));
	return __n;
      }

      static _GLIBCXX20_CONSTEXPR size_type
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8107788:	b580      	push	{r7, lr}
 810778a:	b084      	sub	sp, #16
 810778c:	af00      	add	r7, sp, #0
 810778e:	6078      	str	r0, [r7, #4]
      {
	// std::distance(begin(), end()) cannot be greater than PTRDIFF_MAX,
	// and realistically we can't store more than PTRDIFF_MAX/sizeof(T)
	// (even if std::allocator_traits::max_size says we can).
	const size_t __diffmax
 8107790:	4b0a      	ldr	r3, [pc, #40]	@ (81077bc <_ZNSt6vectorI8SMessageSaIS0_EE11_S_max_sizeERKS1_+0x34>)
 8107792:	60fb      	str	r3, [r7, #12]
	  = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max / sizeof(_Tp);
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8107794:	6878      	ldr	r0, [r7, #4]
 8107796:	f7ff ffe9 	bl	810776c <_ZNSt16allocator_traitsISaI8SMessageEE8max_sizeERKS1_>
 810779a:	4603      	mov	r3, r0
 810779c:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 810779e:	f107 0208 	add.w	r2, r7, #8
 81077a2:	f107 030c 	add.w	r3, r7, #12
 81077a6:	4611      	mov	r1, r2
 81077a8:	4618      	mov	r0, r3
 81077aa:	f000 f9fd 	bl	8107ba8 <_ZSt3minIjERKT_S2_S2_>
 81077ae:	4603      	mov	r3, r0
 81077b0:	681b      	ldr	r3, [r3, #0]
      }
 81077b2:	4618      	mov	r0, r3
 81077b4:	3710      	adds	r7, #16
 81077b6:	46bd      	mov	sp, r7
 81077b8:	bd80      	pop	{r7, pc}
 81077ba:	bf00      	nop
 81077bc:	04924924 	.word	0x04924924

081077c0 <_ZNKSt12_Vector_baseI8SMessageSaIS0_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 81077c0:	b480      	push	{r7}
 81077c2:	b083      	sub	sp, #12
 81077c4:	af00      	add	r7, sp, #0
 81077c6:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 81077c8:	687b      	ldr	r3, [r7, #4]
 81077ca:	4618      	mov	r0, r3
 81077cc:	370c      	adds	r7, #12
 81077ce:	46bd      	mov	sp, r7
 81077d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81077d4:	4770      	bx	lr

081077d6 <_ZNSt16allocator_traitsISaI8SMessageEE8allocateERS1_j>:
      allocate(allocator_type& __a, size_type __n)
 81077d6:	b5b0      	push	{r4, r5, r7, lr}
 81077d8:	b084      	sub	sp, #16
 81077da:	af00      	add	r7, sp, #0
 81077dc:	6078      	str	r0, [r7, #4]
 81077de:	6039      	str	r1, [r7, #0]
 81077e0:	687b      	ldr	r3, [r7, #4]
 81077e2:	60fb      	str	r3, [r7, #12]
 81077e4:	683b      	ldr	r3, [r7, #0]
 81077e6:	60bb      	str	r3, [r7, #8]
	if (std::__is_constant_evaluated())
 81077e8:	f7fb fde4 	bl	81033b4 <_ZSt23__is_constant_evaluatedv>
 81077ec:	4603      	mov	r3, r0
 81077ee:	2b00      	cmp	r3, #0
 81077f0:	d01d      	beq.n	810782e <_ZNSt16allocator_traitsISaI8SMessageEE8allocateERS1_j+0x58>
	    if (__builtin_mul_overflow(__n, sizeof(_Tp), &__n))
 81077f2:	68bb      	ldr	r3, [r7, #8]
 81077f4:	2100      	movs	r1, #0
 81077f6:	221c      	movs	r2, #28
 81077f8:	fba3 4502 	umull	r4, r5, r3, r2
 81077fc:	f04f 0200 	mov.w	r2, #0
 8107800:	f04f 0300 	mov.w	r3, #0
 8107804:	002a      	movs	r2, r5
 8107806:	2300      	movs	r3, #0
 8107808:	2a00      	cmp	r2, #0
 810780a:	d000      	beq.n	810780e <_ZNSt16allocator_traitsISaI8SMessageEE8allocateERS1_j+0x38>
 810780c:	2101      	movs	r1, #1
 810780e:	4623      	mov	r3, r4
 8107810:	60bb      	str	r3, [r7, #8]
 8107812:	460b      	mov	r3, r1
 8107814:	f003 0301 	and.w	r3, r3, #1
 8107818:	b2db      	uxtb	r3, r3
 810781a:	2b00      	cmp	r3, #0
 810781c:	d001      	beq.n	8107822 <_ZNSt16allocator_traitsISaI8SMessageEE8allocateERS1_j+0x4c>
	      std::__throw_bad_array_new_length();
 810781e:	f01b fa75 	bl	8122d0c <_ZSt28__throw_bad_array_new_lengthv>
	    return static_cast<_Tp*>(::operator new(__n));
 8107822:	68bb      	ldr	r3, [r7, #8]
 8107824:	4618      	mov	r0, r3
 8107826:	f01b f9a0 	bl	8122b6a <_Znwj>
 810782a:	4603      	mov	r3, r0
 810782c:	e007      	b.n	810783e <_ZNSt16allocator_traitsISaI8SMessageEE8allocateERS1_j+0x68>
	return __allocator_base<_Tp>::allocate(__n, 0);
 810782e:	68bb      	ldr	r3, [r7, #8]
 8107830:	2200      	movs	r2, #0
 8107832:	4619      	mov	r1, r3
 8107834:	68f8      	ldr	r0, [r7, #12]
 8107836:	f000 fafd 	bl	8107e34 <_ZNSt15__new_allocatorI8SMessageE8allocateEjPKv>
 810783a:	4603      	mov	r3, r0
 810783c:	bf00      	nop
      { return __a.allocate(__n); }
 810783e:	4618      	mov	r0, r3
 8107840:	3710      	adds	r7, #16
 8107842:	46bd      	mov	sp, r7
 8107844:	bdb0      	pop	{r4, r5, r7, pc}

08107846 <_ZSt12__relocate_aIP8SMessageS1_SaIS0_EET0_T_S4_S3_RT1_>:

  template <typename _InputIterator, typename _ForwardIterator,
	    typename _Allocator>
    _GLIBCXX20_CONSTEXPR
    inline _ForwardIterator
    __relocate_a(_InputIterator __first, _InputIterator __last,
 8107846:	b5b0      	push	{r4, r5, r7, lr}
 8107848:	b084      	sub	sp, #16
 810784a:	af00      	add	r7, sp, #0
 810784c:	60f8      	str	r0, [r7, #12]
 810784e:	60b9      	str	r1, [r7, #8]
 8107850:	607a      	str	r2, [r7, #4]
 8107852:	603b      	str	r3, [r7, #0]
		 _ForwardIterator __result, _Allocator& __alloc)
    noexcept(noexcept(__relocate_a_1(std::__niter_base(__first),
				     std::__niter_base(__last),
				     std::__niter_base(__result), __alloc)))
    {
      return std::__relocate_a_1(std::__niter_base(__first),
 8107854:	68f8      	ldr	r0, [r7, #12]
 8107856:	f000 f9bb 	bl	8107bd0 <_ZSt12__niter_baseIP8SMessageET_S2_>
 810785a:	4604      	mov	r4, r0
 810785c:	68b8      	ldr	r0, [r7, #8]
 810785e:	f000 f9b7 	bl	8107bd0 <_ZSt12__niter_baseIP8SMessageET_S2_>
 8107862:	4605      	mov	r5, r0
 8107864:	6878      	ldr	r0, [r7, #4]
 8107866:	f000 f9b3 	bl	8107bd0 <_ZSt12__niter_baseIP8SMessageET_S2_>
 810786a:	4602      	mov	r2, r0
 810786c:	683b      	ldr	r3, [r7, #0]
 810786e:	4629      	mov	r1, r5
 8107870:	4620      	mov	r0, r4
 8107872:	f000 f9c9 	bl	8107c08 <_ZSt14__relocate_a_1I8SMessageS0_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS3_E4typeES5_S5_S5_RSaIT0_E>
 8107876:	4603      	mov	r3, r0
				 std::__niter_base(__last),
				 std::__niter_base(__result), __alloc);
    }
 8107878:	4618      	mov	r0, r3
 810787a:	3710      	adds	r7, #16
 810787c:	46bd      	mov	sp, r7
 810787e:	bdb0      	pop	{r4, r5, r7, pc}

08107880 <_ZSt10destroy_atI8SMessageEvPT_>:
    destroy_at(_Tp* __location)
 8107880:	b480      	push	{r7}
 8107882:	b083      	sub	sp, #12
 8107884:	af00      	add	r7, sp, #0
 8107886:	6078      	str	r0, [r7, #4]
    }
 8107888:	bf00      	nop
 810788a:	370c      	adds	r7, #12
 810788c:	46bd      	mov	sp, r7
 810788e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107892:	4770      	bx	lr

08107894 <_ZNSt10_Head_baseILj0ERKN19EventManagerCM4Task11EEventQueueELb0EEC1ES3_>:
      constexpr _Head_base(const _Head& __h)
 8107894:	b480      	push	{r7}
 8107896:	b083      	sub	sp, #12
 8107898:	af00      	add	r7, sp, #0
 810789a:	6078      	str	r0, [r7, #4]
 810789c:	6039      	str	r1, [r7, #0]
      : _M_head_impl(__h) { }
 810789e:	687b      	ldr	r3, [r7, #4]
 81078a0:	683a      	ldr	r2, [r7, #0]
 81078a2:	601a      	str	r2, [r3, #0]
 81078a4:	687b      	ldr	r3, [r7, #4]
 81078a6:	4618      	mov	r0, r3
 81078a8:	370c      	adds	r7, #12
 81078aa:	46bd      	mov	sp, r7
 81078ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 81078b0:	4770      	bx	lr

081078b2 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEEPSt13_Rb_tree_nodeIS6_EDpOT_>:
	_M_create_node(_Args&&... __args)
 81078b2:	b5b0      	push	{r4, r5, r7, lr}
 81078b4:	b088      	sub	sp, #32
 81078b6:	af02      	add	r7, sp, #8
 81078b8:	60f8      	str	r0, [r7, #12]
 81078ba:	60b9      	str	r1, [r7, #8]
 81078bc:	607a      	str	r2, [r7, #4]
 81078be:	603b      	str	r3, [r7, #0]
	  _Link_type __tmp = _M_get_node();
 81078c0:	68f8      	ldr	r0, [r7, #12]
 81078c2:	f000 f8e3 	bl	8107a8c <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_get_nodeEv>
 81078c6:	6178      	str	r0, [r7, #20]
	  _M_construct_node(__tmp, std::forward<_Args>(__args)...);
 81078c8:	68b8      	ldr	r0, [r7, #8]
 81078ca:	f7ff fc89 	bl	81071e0 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 81078ce:	4604      	mov	r4, r0
 81078d0:	6878      	ldr	r0, [r7, #4]
 81078d2:	f7ff fc90 	bl	81071f6 <_ZSt7forwardISt5tupleIJRKN19EventManagerCM4Task11EEventQueueEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 81078d6:	4605      	mov	r5, r0
 81078d8:	6838      	ldr	r0, [r7, #0]
 81078da:	f7ff fc97 	bl	810720c <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 81078de:	4603      	mov	r3, r0
 81078e0:	9300      	str	r3, [sp, #0]
 81078e2:	462b      	mov	r3, r5
 81078e4:	4622      	mov	r2, r4
 81078e6:	6979      	ldr	r1, [r7, #20]
 81078e8:	68f8      	ldr	r0, [r7, #12]
 81078ea:	f000 f9d3 	bl	8107c94 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEEvPSt13_Rb_tree_nodeIS6_EDpOT_>
	  return __tmp;
 81078ee:	697b      	ldr	r3, [r7, #20]
	}
 81078f0:	4618      	mov	r0, r3
 81078f2:	3718      	adds	r7, #24
 81078f4:	46bd      	mov	sp, r7
 81078f6:	bdb0      	pop	{r4, r5, r7, pc}

081078f8 <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEE13_M_const_castEv>:
      _M_const_cast() const _GLIBCXX_NOEXCEPT
 81078f8:	b580      	push	{r7, lr}
 81078fa:	b084      	sub	sp, #16
 81078fc:	af00      	add	r7, sp, #0
 81078fe:	6078      	str	r0, [r7, #4]
      { return iterator(const_cast<typename iterator::_Base_ptr>(_M_node)); }
 8107900:	687b      	ldr	r3, [r7, #4]
 8107902:	681a      	ldr	r2, [r3, #0]
 8107904:	f107 030c 	add.w	r3, r7, #12
 8107908:	4611      	mov	r1, r2
 810790a:	4618      	mov	r0, r3
 810790c:	f7ff fb3b 	bl	8106f86 <_ZNSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEC1EPSt18_Rb_tree_node_base>
 8107910:	68fb      	ldr	r3, [r7, #12]
 8107912:	4618      	mov	r0, r3
 8107914:	3710      	adds	r7, #16
 8107916:	46bd      	mov	sp, r7
 8107918:	bd80      	pop	{r7, pc}

0810791a <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_rightmostEv>:
      _M_rightmost() _GLIBCXX_NOEXCEPT
 810791a:	b480      	push	{r7}
 810791c:	b083      	sub	sp, #12
 810791e:	af00      	add	r7, sp, #0
 8107920:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_right; }
 8107922:	687b      	ldr	r3, [r7, #4]
 8107924:	3310      	adds	r3, #16
 8107926:	4618      	mov	r0, r3
 8107928:	370c      	adds	r7, #12
 810792a:	46bd      	mov	sp, r7
 810792c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107930:	4770      	bx	lr

08107932 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_leftmostEv>:
      _M_leftmost() _GLIBCXX_NOEXCEPT
 8107932:	b480      	push	{r7}
 8107934:	b083      	sub	sp, #12
 8107936:	af00      	add	r7, sp, #0
 8107938:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_left; }
 810793a:	687b      	ldr	r3, [r7, #4]
 810793c:	330c      	adds	r3, #12
 810793e:	4618      	mov	r0, r3
 8107940:	370c      	adds	r7, #12
 8107942:	46bd      	mov	sp, r7
 8107944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107948:	4770      	bx	lr

0810794a <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_EEOT_OT0_>:
	pair(_U1&& __x, _U2&& __y)
 810794a:	b580      	push	{r7, lr}
 810794c:	b084      	sub	sp, #16
 810794e:	af00      	add	r7, sp, #0
 8107950:	60f8      	str	r0, [r7, #12]
 8107952:	60b9      	str	r1, [r7, #8]
 8107954:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y))
 8107956:	68b8      	ldr	r0, [r7, #8]
 8107958:	f000 f8f3 	bl	8107b42 <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 810795c:	4603      	mov	r3, r0
 810795e:	681a      	ldr	r2, [r3, #0]
 8107960:	68fb      	ldr	r3, [r7, #12]
 8107962:	601a      	str	r2, [r3, #0]
 8107964:	6878      	ldr	r0, [r7, #4]
 8107966:	f000 f8ec 	bl	8107b42 <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 810796a:	4603      	mov	r3, r0
 810796c:	681a      	ldr	r2, [r3, #0]
 810796e:	68fb      	ldr	r3, [r7, #12]
 8107970:	605a      	str	r2, [r3, #4]
	{ }
 8107972:	68fb      	ldr	r3, [r7, #12]
 8107974:	4618      	mov	r0, r3
 8107976:	3710      	adds	r7, #16
 8107978:	46bd      	mov	sp, r7
 810797a:	bd80      	pop	{r7, pc}

0810797c <_ZNSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 810797c:	b580      	push	{r7, lr}
 810797e:	b082      	sub	sp, #8
 8107980:	af00      	add	r7, sp, #0
 8107982:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_increment(_M_node);
 8107984:	687b      	ldr	r3, [r7, #4]
 8107986:	681b      	ldr	r3, [r3, #0]
 8107988:	4618      	mov	r0, r3
 810798a:	f01b f954 	bl	8122c36 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>
 810798e:	4602      	mov	r2, r0
 8107990:	687b      	ldr	r3, [r7, #4]
 8107992:	601a      	str	r2, [r3, #0]
	return *this;
 8107994:	687b      	ldr	r3, [r7, #4]
      }
 8107996:	4618      	mov	r0, r3
 8107998:	3708      	adds	r7, #8
 810799a:	46bd      	mov	sp, r7
 810799c:	bd80      	pop	{r7, pc}

0810799e <_ZNSt11_Tuple_implILj0EJON19EventManagerCM4Task11EEventQueueEEEC1IS1_EEOT_>:
	_Tuple_impl(_UHead&& __head)
 810799e:	b590      	push	{r4, r7, lr}
 81079a0:	b083      	sub	sp, #12
 81079a2:	af00      	add	r7, sp, #0
 81079a4:	6078      	str	r0, [r7, #4]
 81079a6:	6039      	str	r1, [r7, #0]
	: _Base(std::forward<_UHead>(__head))
 81079a8:	687c      	ldr	r4, [r7, #4]
 81079aa:	6838      	ldr	r0, [r7, #0]
 81079ac:	f7ff fd7f 	bl	81074ae <_ZSt7forwardIN19EventManagerCM4Task11EEventQueueEEOT_RNSt16remove_referenceIS2_E4typeE>
 81079b0:	4603      	mov	r3, r0
 81079b2:	4619      	mov	r1, r3
 81079b4:	4620      	mov	r0, r4
 81079b6:	f000 f99a 	bl	8107cee <_ZNSt10_Head_baseILj0EON19EventManagerCM4Task11EEventQueueELb0EEC1IS1_EEOT_>
	{ }
 81079ba:	687b      	ldr	r3, [r7, #4]
 81079bc:	4618      	mov	r0, r3
 81079be:	370c      	adds	r7, #12
 81079c0:	46bd      	mov	sp, r7
 81079c2:	bd90      	pop	{r4, r7, pc}

081079c4 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJOS1_EESH_IJEEEEEPSt13_Rb_tree_nodeIS6_EDpOT_>:
	_M_create_node(_Args&&... __args)
 81079c4:	b5b0      	push	{r4, r5, r7, lr}
 81079c6:	b088      	sub	sp, #32
 81079c8:	af02      	add	r7, sp, #8
 81079ca:	60f8      	str	r0, [r7, #12]
 81079cc:	60b9      	str	r1, [r7, #8]
 81079ce:	607a      	str	r2, [r7, #4]
 81079d0:	603b      	str	r3, [r7, #0]
	  _Link_type __tmp = _M_get_node();
 81079d2:	68f8      	ldr	r0, [r7, #12]
 81079d4:	f000 f85a 	bl	8107a8c <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_get_nodeEv>
 81079d8:	6178      	str	r0, [r7, #20]
	  _M_construct_node(__tmp, std::forward<_Args>(__args)...);
 81079da:	68b8      	ldr	r0, [r7, #8]
 81079dc:	f7ff fc00 	bl	81071e0 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 81079e0:	4604      	mov	r4, r0
 81079e2:	6878      	ldr	r0, [r7, #4]
 81079e4:	f7ff fd81 	bl	81074ea <_ZSt7forwardISt5tupleIJON19EventManagerCM4Task11EEventQueueEEEEOT_RNSt16remove_referenceIS5_E4typeE>
 81079e8:	4605      	mov	r5, r0
 81079ea:	6838      	ldr	r0, [r7, #0]
 81079ec:	f7ff fc0e 	bl	810720c <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 81079f0:	4603      	mov	r3, r0
 81079f2:	9300      	str	r3, [sp, #0]
 81079f4:	462b      	mov	r3, r5
 81079f6:	4622      	mov	r2, r4
 81079f8:	6979      	ldr	r1, [r7, #20]
 81079fa:	68f8      	ldr	r0, [r7, #12]
 81079fc:	f000 f987 	bl	8107d0e <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJOS1_EESH_IJEEEEEvPSt13_Rb_tree_nodeIS6_EDpOT_>
	  return __tmp;
 8107a00:	697b      	ldr	r3, [r7, #20]
	}
 8107a02:	4618      	mov	r0, r3
 8107a04:	3718      	adds	r7, #24
 8107a06:	46bd      	mov	sp, r7
 8107a08:	bdb0      	pop	{r4, r5, r7, pc}

08107a0a <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>:
      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
 8107a0a:	b480      	push	{r7}
 8107a0c:	b083      	sub	sp, #12
 8107a0e:	af00      	add	r7, sp, #0
 8107a10:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8107a12:	687b      	ldr	r3, [r7, #4]
 8107a14:	4618      	mov	r0, r3
 8107a16:	370c      	adds	r7, #12
 8107a18:	46bd      	mov	sp, r7
 8107a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107a1e:	4770      	bx	lr

08107a20 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEEE7destroyIS7_EEvRS9_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 8107a20:	b580      	push	{r7, lr}
 8107a22:	b082      	sub	sp, #8
 8107a24:	af00      	add	r7, sp, #0
 8107a26:	6078      	str	r0, [r7, #4]
 8107a28:	6039      	str	r1, [r7, #0]
	  std::destroy_at(__p);
 8107a2a:	6838      	ldr	r0, [r7, #0]
 8107a2c:	f000 f99c 	bl	8107d68 <_ZSt10destroy_atISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEvPT_>
	}
 8107a30:	bf00      	nop
 8107a32:	3708      	adds	r7, #8
 8107a34:	46bd      	mov	sp, r7
 8107a36:	bd80      	pop	{r7, pc}

08107a38 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEEE10deallocateERS9_PS8_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8107a38:	b580      	push	{r7, lr}
 8107a3a:	b088      	sub	sp, #32
 8107a3c:	af00      	add	r7, sp, #0
 8107a3e:	60f8      	str	r0, [r7, #12]
 8107a40:	60b9      	str	r1, [r7, #8]
 8107a42:	607a      	str	r2, [r7, #4]
 8107a44:	68fb      	ldr	r3, [r7, #12]
 8107a46:	61fb      	str	r3, [r7, #28]
 8107a48:	68bb      	ldr	r3, [r7, #8]
 8107a4a:	61bb      	str	r3, [r7, #24]
 8107a4c:	687b      	ldr	r3, [r7, #4]
 8107a4e:	617b      	str	r3, [r7, #20]
	if (std::__is_constant_evaluated())
 8107a50:	f7fb fcb0 	bl	81033b4 <_ZSt23__is_constant_evaluatedv>
 8107a54:	4603      	mov	r3, r0
 8107a56:	2b00      	cmp	r3, #0
 8107a58:	d003      	beq.n	8107a62 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEEE10deallocateERS9_PS8_j+0x2a>
	    ::operator delete(__p);
 8107a5a:	69b8      	ldr	r0, [r7, #24]
 8107a5c:	f01b f872 	bl	8122b44 <_ZdlPv>
	    return;
 8107a60:	e005      	b.n	8107a6e <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEEE10deallocateERS9_PS8_j+0x36>
	__allocator_base<_Tp>::deallocate(__p, __n);
 8107a62:	697a      	ldr	r2, [r7, #20]
 8107a64:	69b9      	ldr	r1, [r7, #24]
 8107a66:	69f8      	ldr	r0, [r7, #28]
 8107a68:	f000 fa85 	bl	8107f76 <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEE10deallocateEPS8_j>
      { __a.deallocate(__p, __n); }
 8107a6c:	bf00      	nop
 8107a6e:	bf00      	nop
 8107a70:	3720      	adds	r7, #32
 8107a72:	46bd      	mov	sp, r7
 8107a74:	bd80      	pop	{r7, pc}

08107a76 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEE7_M_addrEv>:
      _M_addr() noexcept
 8107a76:	b480      	push	{r7}
 8107a78:	b083      	sub	sp, #12
 8107a7a:	af00      	add	r7, sp, #0
 8107a7c:	6078      	str	r0, [r7, #4]
      { return static_cast<void*>(&_M_storage); }
 8107a7e:	687b      	ldr	r3, [r7, #4]
 8107a80:	4618      	mov	r0, r3
 8107a82:	370c      	adds	r7, #12
 8107a84:	46bd      	mov	sp, r7
 8107a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107a8a:	4770      	bx	lr

08107a8c <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_get_nodeEv>:
      _M_get_node()
 8107a8c:	b580      	push	{r7, lr}
 8107a8e:	b082      	sub	sp, #8
 8107a90:	af00      	add	r7, sp, #0
 8107a92:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::allocate(_M_get_Node_allocator(), 1); }
 8107a94:	6878      	ldr	r0, [r7, #4]
 8107a96:	f7ff ffb8 	bl	8107a0a <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>
 8107a9a:	4603      	mov	r3, r0
 8107a9c:	2101      	movs	r1, #1
 8107a9e:	4618      	mov	r0, r3
 8107aa0:	f000 f96c 	bl	8107d7c <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEEE8allocateERS9_j>
 8107aa4:	4603      	mov	r3, r0
 8107aa6:	4618      	mov	r0, r3
 8107aa8:	3708      	adds	r7, #8
 8107aaa:	46bd      	mov	sp, r7
 8107aac:	bd80      	pop	{r7, pc}

08107aae <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE17_M_construct_nodeIJRS1_RS5_EEEvPSt13_Rb_tree_nodeIS6_EDpOT_>:
	_M_construct_node(_Link_type __node, _Args&&... __args)
 8107aae:	b5f0      	push	{r4, r5, r6, r7, lr}
 8107ab0:	b085      	sub	sp, #20
 8107ab2:	af00      	add	r7, sp, #0
 8107ab4:	60f8      	str	r0, [r7, #12]
 8107ab6:	60b9      	str	r1, [r7, #8]
 8107ab8:	607a      	str	r2, [r7, #4]
 8107aba:	603b      	str	r3, [r7, #0]
	      ::new(__node) _Rb_tree_node<_Val>;
 8107abc:	68bb      	ldr	r3, [r7, #8]
 8107abe:	4619      	mov	r1, r3
 8107ac0:	2018      	movs	r0, #24
 8107ac2:	f7f9 fbe1 	bl	8101288 <_ZnwjPv>
	      _Alloc_traits::construct(_M_get_Node_allocator(),
 8107ac6:	68f8      	ldr	r0, [r7, #12]
 8107ac8:	f7ff ff9f 	bl	8107a0a <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>
 8107acc:	4604      	mov	r4, r0
 8107ace:	68b8      	ldr	r0, [r7, #8]
 8107ad0:	f7ff f920 	bl	8106d14 <_ZNSt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEE9_M_valptrEv>
 8107ad4:	4605      	mov	r5, r0
 8107ad6:	6878      	ldr	r0, [r7, #4]
 8107ad8:	f7fe fdd7 	bl	810668a <_ZSt7forwardIRN19EventManagerCM4Task11EEventQueueEEOT_RNSt16remove_referenceIS3_E4typeE>
 8107adc:	4606      	mov	r6, r0
 8107ade:	6838      	ldr	r0, [r7, #0]
 8107ae0:	f7fe fdde 	bl	81066a0 <_ZSt7forwardIRP15QueueDefinitionEOT_RNSt16remove_referenceIS3_E4typeE>
 8107ae4:	4603      	mov	r3, r0
 8107ae6:	4632      	mov	r2, r6
 8107ae8:	4629      	mov	r1, r5
 8107aea:	4620      	mov	r0, r4
 8107aec:	f000 f97e 	bl	8107dec <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEEE9constructIS7_JRS3_RS6_EEEvRS9_PT_DpOT0_>
	}
 8107af0:	bf00      	nop
 8107af2:	3714      	adds	r7, #20
 8107af4:	46bd      	mov	sp, r7
 8107af6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08107af8 <_ZNKSt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEE9_M_valptrEv>:
      _M_valptr() const
 8107af8:	b580      	push	{r7, lr}
 8107afa:	b082      	sub	sp, #8
 8107afc:	af00      	add	r7, sp, #0
 8107afe:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 8107b00:	687b      	ldr	r3, [r7, #4]
 8107b02:	3310      	adds	r3, #16
 8107b04:	4618      	mov	r0, r3
 8107b06:	f000 f989 	bl	8107e1c <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEE6_M_ptrEv>
 8107b0a:	4603      	mov	r3, r0
 8107b0c:	4618      	mov	r0, r3
 8107b0e:	3708      	adds	r7, #8
 8107b10:	46bd      	mov	sp, r7
 8107b12:	bd80      	pop	{r7, pc}

08107b14 <_ZNKSt10_Select1stISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEclERKS6_>:
      typename _Pair::first_type&
      operator()(_Pair& __x) const
      { return __x.first; }

      const typename _Pair::first_type&
      operator()(const _Pair& __x) const
 8107b14:	b480      	push	{r7}
 8107b16:	b083      	sub	sp, #12
 8107b18:	af00      	add	r7, sp, #0
 8107b1a:	6078      	str	r0, [r7, #4]
 8107b1c:	6039      	str	r1, [r7, #0]
      { return __x.first; }
 8107b1e:	683b      	ldr	r3, [r7, #0]
 8107b20:	4618      	mov	r0, r3
 8107b22:	370c      	adds	r7, #12
 8107b24:	46bd      	mov	sp, r7
 8107b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107b2a:	4770      	bx	lr

08107b2c <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEEOT_RNSt16remove_referenceISB_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8107b2c:	b480      	push	{r7}
 8107b2e:	b083      	sub	sp, #12
 8107b30:	af00      	add	r7, sp, #0
 8107b32:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8107b34:	687b      	ldr	r3, [r7, #4]
 8107b36:	4618      	mov	r0, r3
 8107b38:	370c      	adds	r7, #12
 8107b3a:	46bd      	mov	sp, r7
 8107b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107b40:	4770      	bx	lr

08107b42 <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8107b42:	b480      	push	{r7}
 8107b44:	b083      	sub	sp, #12
 8107b46:	af00      	add	r7, sp, #0
 8107b48:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8107b4a:	687b      	ldr	r3, [r7, #4]
 8107b4c:	4618      	mov	r0, r3
 8107b4e:	370c      	adds	r7, #12
 8107b50:	46bd      	mov	sp, r7
 8107b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107b56:	4770      	bx	lr

08107b58 <_ZSt11__addressofI8SMessageEPT_RS1_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8107b58:	b480      	push	{r7}
 8107b5a:	b083      	sub	sp, #12
 8107b5c:	af00      	add	r7, sp, #0
 8107b5e:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8107b60:	687b      	ldr	r3, [r7, #4]
 8107b62:	4618      	mov	r0, r3
 8107b64:	370c      	adds	r7, #12
 8107b66:	46bd      	mov	sp, r7
 8107b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107b6c:	4770      	bx	lr

08107b6e <_ZSt8_DestroyI8SMessageEvPT_>:
    _Destroy(_Tp* __pointer)
 8107b6e:	b580      	push	{r7, lr}
 8107b70:	b082      	sub	sp, #8
 8107b72:	af00      	add	r7, sp, #0
 8107b74:	6078      	str	r0, [r7, #4]
      std::destroy_at(__pointer);
 8107b76:	6878      	ldr	r0, [r7, #4]
 8107b78:	f7ff fe82 	bl	8107880 <_ZSt10destroy_atI8SMessageEvPT_>
    }
 8107b7c:	bf00      	nop
 8107b7e:	3708      	adds	r7, #8
 8107b80:	46bd      	mov	sp, r7
 8107b82:	bd80      	pop	{r7, pc}

08107b84 <_ZNSt15__new_allocatorI8SMessageE10deallocateEPS0_j>:
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
 8107b84:	b580      	push	{r7, lr}
 8107b86:	b084      	sub	sp, #16
 8107b88:	af00      	add	r7, sp, #0
 8107b8a:	60f8      	str	r0, [r7, #12]
 8107b8c:	60b9      	str	r1, [r7, #8]
 8107b8e:	607a      	str	r2, [r7, #4]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 8107b90:	687a      	ldr	r2, [r7, #4]
 8107b92:	4613      	mov	r3, r2
 8107b94:	00db      	lsls	r3, r3, #3
 8107b96:	1a9b      	subs	r3, r3, r2
 8107b98:	009b      	lsls	r3, r3, #2
 8107b9a:	4619      	mov	r1, r3
 8107b9c:	68b8      	ldr	r0, [r7, #8]
 8107b9e:	f01a ffd3 	bl	8122b48 <_ZdlPvj>
      }
 8107ba2:	3710      	adds	r7, #16
 8107ba4:	46bd      	mov	sp, r7
 8107ba6:	bd80      	pop	{r7, pc}

08107ba8 <_ZSt3minIjERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 8107ba8:	b480      	push	{r7}
 8107baa:	b083      	sub	sp, #12
 8107bac:	af00      	add	r7, sp, #0
 8107bae:	6078      	str	r0, [r7, #4]
 8107bb0:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 8107bb2:	683b      	ldr	r3, [r7, #0]
 8107bb4:	681a      	ldr	r2, [r3, #0]
 8107bb6:	687b      	ldr	r3, [r7, #4]
 8107bb8:	681b      	ldr	r3, [r3, #0]
 8107bba:	429a      	cmp	r2, r3
 8107bbc:	d201      	bcs.n	8107bc2 <_ZSt3minIjERKT_S2_S2_+0x1a>
	return __b;
 8107bbe:	683b      	ldr	r3, [r7, #0]
 8107bc0:	e000      	b.n	8107bc4 <_ZSt3minIjERKT_S2_S2_+0x1c>
      return __a;
 8107bc2:	687b      	ldr	r3, [r7, #4]
    }
 8107bc4:	4618      	mov	r0, r3
 8107bc6:	370c      	adds	r7, #12
 8107bc8:	46bd      	mov	sp, r7
 8107bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107bce:	4770      	bx	lr

08107bd0 <_ZSt12__niter_baseIP8SMessageET_S2_>:
  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the __normal_iterator wrapper. See copy, fill, ...
  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __niter_base(_Iterator __it)
 8107bd0:	b480      	push	{r7}
 8107bd2:	b083      	sub	sp, #12
 8107bd4:	af00      	add	r7, sp, #0
 8107bd6:	6078      	str	r0, [r7, #4]
    _GLIBCXX_NOEXCEPT_IF(std::is_nothrow_copy_constructible<_Iterator>::value)
    { return __it; }
 8107bd8:	687b      	ldr	r3, [r7, #4]
 8107bda:	4618      	mov	r0, r3
 8107bdc:	370c      	adds	r7, #12
 8107bde:	46bd      	mov	sp, r7
 8107be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107be4:	4770      	bx	lr

08107be6 <_ZN9__gnu_cxx17__normal_iteratorIP8SMessagevEC1ERKS2_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8107be6:	b480      	push	{r7}
 8107be8:	b083      	sub	sp, #12
 8107bea:	af00      	add	r7, sp, #0
 8107bec:	6078      	str	r0, [r7, #4]
 8107bee:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8107bf0:	683b      	ldr	r3, [r7, #0]
 8107bf2:	681a      	ldr	r2, [r3, #0]
 8107bf4:	687b      	ldr	r3, [r7, #4]
 8107bf6:	601a      	str	r2, [r3, #0]
 8107bf8:	687b      	ldr	r3, [r7, #4]
 8107bfa:	4618      	mov	r0, r3
 8107bfc:	370c      	adds	r7, #12
 8107bfe:	46bd      	mov	sp, r7
 8107c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107c04:	4770      	bx	lr
	...

08107c08 <_ZSt14__relocate_a_1I8SMessageS0_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS3_E4typeES5_S5_S5_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
 8107c08:	b580      	push	{r7, lr}
 8107c0a:	b086      	sub	sp, #24
 8107c0c:	af00      	add	r7, sp, #0
 8107c0e:	60f8      	str	r0, [r7, #12]
 8107c10:	60b9      	str	r1, [r7, #8]
 8107c12:	607a      	str	r2, [r7, #4]
 8107c14:	603b      	str	r3, [r7, #0]
      ptrdiff_t __count = __last - __first;
 8107c16:	68ba      	ldr	r2, [r7, #8]
 8107c18:	68fb      	ldr	r3, [r7, #12]
 8107c1a:	1ad3      	subs	r3, r2, r3
 8107c1c:	109b      	asrs	r3, r3, #2
 8107c1e:	4a1c      	ldr	r2, [pc, #112]	@ (8107c90 <_ZSt14__relocate_a_1I8SMessageS0_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS3_E4typeES5_S5_S5_RSaIT0_E+0x88>)
 8107c20:	fb02 f303 	mul.w	r3, r2, r3
 8107c24:	617b      	str	r3, [r7, #20]
      if (__count > 0)
 8107c26:	697b      	ldr	r3, [r7, #20]
 8107c28:	2b00      	cmp	r3, #0
 8107c2a:	dd25      	ble.n	8107c78 <_ZSt14__relocate_a_1I8SMessageS0_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS3_E4typeES5_S5_S5_RSaIT0_E+0x70>
	  if (std::is_constant_evaluated())
 8107c2c:	f7fe f8cf 	bl	8105dce <_ZSt21is_constant_evaluatedv>
 8107c30:	4603      	mov	r3, r0
 8107c32:	2b00      	cmp	r3, #0
 8107c34:	d016      	beq.n	8107c64 <_ZSt14__relocate_a_1I8SMessageS0_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS3_E4typeES5_S5_S5_RSaIT0_E+0x5c>
	      __gnu_cxx::__normal_iterator<_Tp*, void> __out(__result);
 8107c36:	1d3a      	adds	r2, r7, #4
 8107c38:	f107 0310 	add.w	r3, r7, #16
 8107c3c:	4611      	mov	r1, r2
 8107c3e:	4618      	mov	r0, r3
 8107c40:	f7ff ffd1 	bl	8107be6 <_ZN9__gnu_cxx17__normal_iteratorIP8SMessagevEC1ERKS2_>
	      __out = std::__relocate_a_1(__first, __last, __out, __alloc);
 8107c44:	683b      	ldr	r3, [r7, #0]
 8107c46:	693a      	ldr	r2, [r7, #16]
 8107c48:	68b9      	ldr	r1, [r7, #8]
 8107c4a:	68f8      	ldr	r0, [r7, #12]
 8107c4c:	f000 f922 	bl	8107e94 <_ZSt14__relocate_a_1IP8SMessageN9__gnu_cxx17__normal_iteratorIS1_vEESaIS0_EET0_T_S7_S6_RT1_>
 8107c50:	4603      	mov	r3, r0
 8107c52:	613b      	str	r3, [r7, #16]
	      return __out.base();
 8107c54:	f107 0310 	add.w	r3, r7, #16
 8107c58:	4618      	mov	r0, r3
 8107c5a:	f000 f949 	bl	8107ef0 <_ZNK9__gnu_cxx17__normal_iteratorIP8SMessagevE4baseEv>
 8107c5e:	4603      	mov	r3, r0
 8107c60:	681b      	ldr	r3, [r3, #0]
 8107c62:	e010      	b.n	8107c86 <_ZSt14__relocate_a_1I8SMessageS0_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS3_E4typeES5_S5_S5_RSaIT0_E+0x7e>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8107c64:	6878      	ldr	r0, [r7, #4]
 8107c66:	697a      	ldr	r2, [r7, #20]
 8107c68:	4613      	mov	r3, r2
 8107c6a:	00db      	lsls	r3, r3, #3
 8107c6c:	1a9b      	subs	r3, r3, r2
 8107c6e:	009b      	lsls	r3, r3, #2
 8107c70:	461a      	mov	r2, r3
 8107c72:	68f9      	ldr	r1, [r7, #12]
 8107c74:	f01c f8f8 	bl	8123e68 <memmove>
      return __result + __count;
 8107c78:	6879      	ldr	r1, [r7, #4]
 8107c7a:	697a      	ldr	r2, [r7, #20]
 8107c7c:	4613      	mov	r3, r2
 8107c7e:	00db      	lsls	r3, r3, #3
 8107c80:	1a9b      	subs	r3, r3, r2
 8107c82:	009b      	lsls	r3, r3, #2
 8107c84:	440b      	add	r3, r1
    }
 8107c86:	4618      	mov	r0, r3
 8107c88:	3718      	adds	r7, #24
 8107c8a:	46bd      	mov	sp, r7
 8107c8c:	bd80      	pop	{r7, pc}
 8107c8e:	bf00      	nop
 8107c90:	b6db6db7 	.word	0xb6db6db7

08107c94 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEEvPSt13_Rb_tree_nodeIS6_EDpOT_>:
	_M_construct_node(_Link_type __node, _Args&&... __args)
 8107c94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8107c98:	b086      	sub	sp, #24
 8107c9a:	af02      	add	r7, sp, #8
 8107c9c:	60f8      	str	r0, [r7, #12]
 8107c9e:	60b9      	str	r1, [r7, #8]
 8107ca0:	607a      	str	r2, [r7, #4]
 8107ca2:	603b      	str	r3, [r7, #0]
	      ::new(__node) _Rb_tree_node<_Val>;
 8107ca4:	68bb      	ldr	r3, [r7, #8]
 8107ca6:	4619      	mov	r1, r3
 8107ca8:	2018      	movs	r0, #24
 8107caa:	f7f9 faed 	bl	8101288 <_ZnwjPv>
	      _Alloc_traits::construct(_M_get_Node_allocator(),
 8107cae:	68f8      	ldr	r0, [r7, #12]
 8107cb0:	f7ff feab 	bl	8107a0a <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>
 8107cb4:	4604      	mov	r4, r0
 8107cb6:	68b8      	ldr	r0, [r7, #8]
 8107cb8:	f7ff f82c 	bl	8106d14 <_ZNSt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEE9_M_valptrEv>
 8107cbc:	4605      	mov	r5, r0
 8107cbe:	6878      	ldr	r0, [r7, #4]
 8107cc0:	f7ff fa8e 	bl	81071e0 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8107cc4:	4606      	mov	r6, r0
 8107cc6:	6838      	ldr	r0, [r7, #0]
 8107cc8:	f7ff fa95 	bl	81071f6 <_ZSt7forwardISt5tupleIJRKN19EventManagerCM4Task11EEventQueueEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8107ccc:	4680      	mov	r8, r0
 8107cce:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8107cd0:	f7ff fa9c 	bl	810720c <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8107cd4:	4603      	mov	r3, r0
 8107cd6:	9300      	str	r3, [sp, #0]
 8107cd8:	4643      	mov	r3, r8
 8107cda:	4632      	mov	r2, r6
 8107cdc:	4629      	mov	r1, r5
 8107cde:	4620      	mov	r0, r4
 8107ce0:	f000 f911 	bl	8107f06 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEEE9constructIS7_JRKSt21piecewise_construct_tSt5tupleIJRS4_EESF_IJEEEEEvRS9_PT_DpOT0_>
	}
 8107ce4:	bf00      	nop
 8107ce6:	3710      	adds	r7, #16
 8107ce8:	46bd      	mov	sp, r7
 8107cea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08107cee <_ZNSt10_Head_baseILj0EON19EventManagerCM4Task11EEventQueueELb0EEC1IS1_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 8107cee:	b580      	push	{r7, lr}
 8107cf0:	b082      	sub	sp, #8
 8107cf2:	af00      	add	r7, sp, #0
 8107cf4:	6078      	str	r0, [r7, #4]
 8107cf6:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 8107cf8:	6838      	ldr	r0, [r7, #0]
 8107cfa:	f7ff fbd8 	bl	81074ae <_ZSt7forwardIN19EventManagerCM4Task11EEventQueueEEOT_RNSt16remove_referenceIS2_E4typeE>
 8107cfe:	4602      	mov	r2, r0
 8107d00:	687b      	ldr	r3, [r7, #4]
 8107d02:	601a      	str	r2, [r3, #0]
 8107d04:	687b      	ldr	r3, [r7, #4]
 8107d06:	4618      	mov	r0, r3
 8107d08:	3708      	adds	r7, #8
 8107d0a:	46bd      	mov	sp, r7
 8107d0c:	bd80      	pop	{r7, pc}

08107d0e <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJOS1_EESH_IJEEEEEvPSt13_Rb_tree_nodeIS6_EDpOT_>:
	_M_construct_node(_Link_type __node, _Args&&... __args)
 8107d0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8107d12:	b086      	sub	sp, #24
 8107d14:	af02      	add	r7, sp, #8
 8107d16:	60f8      	str	r0, [r7, #12]
 8107d18:	60b9      	str	r1, [r7, #8]
 8107d1a:	607a      	str	r2, [r7, #4]
 8107d1c:	603b      	str	r3, [r7, #0]
	      ::new(__node) _Rb_tree_node<_Val>;
 8107d1e:	68bb      	ldr	r3, [r7, #8]
 8107d20:	4619      	mov	r1, r3
 8107d22:	2018      	movs	r0, #24
 8107d24:	f7f9 fab0 	bl	8101288 <_ZnwjPv>
	      _Alloc_traits::construct(_M_get_Node_allocator(),
 8107d28:	68f8      	ldr	r0, [r7, #12]
 8107d2a:	f7ff fe6e 	bl	8107a0a <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>
 8107d2e:	4604      	mov	r4, r0
 8107d30:	68b8      	ldr	r0, [r7, #8]
 8107d32:	f7fe ffef 	bl	8106d14 <_ZNSt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEE9_M_valptrEv>
 8107d36:	4605      	mov	r5, r0
 8107d38:	6878      	ldr	r0, [r7, #4]
 8107d3a:	f7ff fa51 	bl	81071e0 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8107d3e:	4606      	mov	r6, r0
 8107d40:	6838      	ldr	r0, [r7, #0]
 8107d42:	f7ff fbd2 	bl	81074ea <_ZSt7forwardISt5tupleIJON19EventManagerCM4Task11EEventQueueEEEEOT_RNSt16remove_referenceIS5_E4typeE>
 8107d46:	4680      	mov	r8, r0
 8107d48:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8107d4a:	f7ff fa5f 	bl	810720c <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8107d4e:	4603      	mov	r3, r0
 8107d50:	9300      	str	r3, [sp, #0]
 8107d52:	4643      	mov	r3, r8
 8107d54:	4632      	mov	r2, r6
 8107d56:	4629      	mov	r1, r5
 8107d58:	4620      	mov	r0, r4
 8107d5a:	f000 f8f0 	bl	8107f3e <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEEE9constructIS7_JRKSt21piecewise_construct_tSt5tupleIJOS3_EESF_IJEEEEEvRS9_PT_DpOT0_>
	}
 8107d5e:	bf00      	nop
 8107d60:	3710      	adds	r7, #16
 8107d62:	46bd      	mov	sp, r7
 8107d64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08107d68 <_ZSt10destroy_atISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEvPT_>:
    destroy_at(_Tp* __location)
 8107d68:	b480      	push	{r7}
 8107d6a:	b083      	sub	sp, #12
 8107d6c:	af00      	add	r7, sp, #0
 8107d6e:	6078      	str	r0, [r7, #4]
    }
 8107d70:	bf00      	nop
 8107d72:	370c      	adds	r7, #12
 8107d74:	46bd      	mov	sp, r7
 8107d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107d7a:	4770      	bx	lr

08107d7c <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEEE8allocateERS9_j>:
      allocate(allocator_type& __a, size_type __n)
 8107d7c:	b5b0      	push	{r4, r5, r7, lr}
 8107d7e:	b084      	sub	sp, #16
 8107d80:	af00      	add	r7, sp, #0
 8107d82:	6078      	str	r0, [r7, #4]
 8107d84:	6039      	str	r1, [r7, #0]
 8107d86:	687b      	ldr	r3, [r7, #4]
 8107d88:	60fb      	str	r3, [r7, #12]
 8107d8a:	683b      	ldr	r3, [r7, #0]
 8107d8c:	60bb      	str	r3, [r7, #8]
	if (std::__is_constant_evaluated())
 8107d8e:	f7fb fb11 	bl	81033b4 <_ZSt23__is_constant_evaluatedv>
 8107d92:	4603      	mov	r3, r0
 8107d94:	2b00      	cmp	r3, #0
 8107d96:	d01d      	beq.n	8107dd4 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEEE8allocateERS9_j+0x58>
	    if (__builtin_mul_overflow(__n, sizeof(_Tp), &__n))
 8107d98:	68bb      	ldr	r3, [r7, #8]
 8107d9a:	2100      	movs	r1, #0
 8107d9c:	2218      	movs	r2, #24
 8107d9e:	fba3 4502 	umull	r4, r5, r3, r2
 8107da2:	f04f 0200 	mov.w	r2, #0
 8107da6:	f04f 0300 	mov.w	r3, #0
 8107daa:	002a      	movs	r2, r5
 8107dac:	2300      	movs	r3, #0
 8107dae:	2a00      	cmp	r2, #0
 8107db0:	d000      	beq.n	8107db4 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEEE8allocateERS9_j+0x38>
 8107db2:	2101      	movs	r1, #1
 8107db4:	4623      	mov	r3, r4
 8107db6:	60bb      	str	r3, [r7, #8]
 8107db8:	460b      	mov	r3, r1
 8107dba:	f003 0301 	and.w	r3, r3, #1
 8107dbe:	b2db      	uxtb	r3, r3
 8107dc0:	2b00      	cmp	r3, #0
 8107dc2:	d001      	beq.n	8107dc8 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEEE8allocateERS9_j+0x4c>
	      std::__throw_bad_array_new_length();
 8107dc4:	f01a ffa2 	bl	8122d0c <_ZSt28__throw_bad_array_new_lengthv>
	    return static_cast<_Tp*>(::operator new(__n));
 8107dc8:	68bb      	ldr	r3, [r7, #8]
 8107dca:	4618      	mov	r0, r3
 8107dcc:	f01a fecd 	bl	8122b6a <_Znwj>
 8107dd0:	4603      	mov	r3, r0
 8107dd2:	e007      	b.n	8107de4 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEEE8allocateERS9_j+0x68>
	return __allocator_base<_Tp>::allocate(__n, 0);
 8107dd4:	68bb      	ldr	r3, [r7, #8]
 8107dd6:	2200      	movs	r2, #0
 8107dd8:	4619      	mov	r1, r3
 8107dda:	68f8      	ldr	r0, [r7, #12]
 8107ddc:	f000 f9be 	bl	810815c <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEE8allocateEjPKv>
 8107de0:	4603      	mov	r3, r0
 8107de2:	bf00      	nop
      { return __a.allocate(__n); }
 8107de4:	4618      	mov	r0, r3
 8107de6:	3710      	adds	r7, #16
 8107de8:	46bd      	mov	sp, r7
 8107dea:	bdb0      	pop	{r4, r5, r7, pc}

08107dec <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEEE9constructIS7_JRS3_RS6_EEEvRS9_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8107dec:	b590      	push	{r4, r7, lr}
 8107dee:	b085      	sub	sp, #20
 8107df0:	af00      	add	r7, sp, #0
 8107df2:	60f8      	str	r0, [r7, #12]
 8107df4:	60b9      	str	r1, [r7, #8]
 8107df6:	607a      	str	r2, [r7, #4]
 8107df8:	603b      	str	r3, [r7, #0]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 8107dfa:	6878      	ldr	r0, [r7, #4]
 8107dfc:	f7fe fc45 	bl	810668a <_ZSt7forwardIRN19EventManagerCM4Task11EEventQueueEEOT_RNSt16remove_referenceIS3_E4typeE>
 8107e00:	4604      	mov	r4, r0
 8107e02:	6838      	ldr	r0, [r7, #0]
 8107e04:	f7fe fc4c 	bl	81066a0 <_ZSt7forwardIRP15QueueDefinitionEOT_RNSt16remove_referenceIS3_E4typeE>
 8107e08:	4603      	mov	r3, r0
 8107e0a:	461a      	mov	r2, r3
 8107e0c:	4621      	mov	r1, r4
 8107e0e:	68b8      	ldr	r0, [r7, #8]
 8107e10:	f000 f8c3 	bl	8107f9a <_ZSt12construct_atISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEJRS2_RS5_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPSA_DpOSB_>
	}
 8107e14:	bf00      	nop
 8107e16:	3714      	adds	r7, #20
 8107e18:	46bd      	mov	sp, r7
 8107e1a:	bd90      	pop	{r4, r7, pc}

08107e1c <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEE6_M_ptrEv>:
      _M_ptr() const noexcept
 8107e1c:	b580      	push	{r7, lr}
 8107e1e:	b082      	sub	sp, #8
 8107e20:	af00      	add	r7, sp, #0
 8107e22:	6078      	str	r0, [r7, #4]
      { return static_cast<const _Tp*>(_M_addr()); }
 8107e24:	6878      	ldr	r0, [r7, #4]
 8107e26:	f000 f8d6 	bl	8107fd6 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEE7_M_addrEv>
 8107e2a:	4603      	mov	r3, r0
 8107e2c:	4618      	mov	r0, r3
 8107e2e:	3708      	adds	r7, #8
 8107e30:	46bd      	mov	sp, r7
 8107e32:	bd80      	pop	{r7, pc}

08107e34 <_ZNSt15__new_allocatorI8SMessageE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8107e34:	b580      	push	{r7, lr}
 8107e36:	b084      	sub	sp, #16
 8107e38:	af00      	add	r7, sp, #0
 8107e3a:	60f8      	str	r0, [r7, #12]
 8107e3c:	60b9      	str	r1, [r7, #8]
 8107e3e:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 8107e40:	68f8      	ldr	r0, [r7, #12]
 8107e42:	f000 f8d3 	bl	8107fec <_ZNKSt15__new_allocatorI8SMessageE11_M_max_sizeEv>
 8107e46:	4602      	mov	r2, r0
 8107e48:	68bb      	ldr	r3, [r7, #8]
 8107e4a:	4293      	cmp	r3, r2
 8107e4c:	bf8c      	ite	hi
 8107e4e:	2301      	movhi	r3, #1
 8107e50:	2300      	movls	r3, #0
 8107e52:	b2db      	uxtb	r3, r3
 8107e54:	2b00      	cmp	r3, #0
 8107e56:	bf14      	ite	ne
 8107e58:	2301      	movne	r3, #1
 8107e5a:	2300      	moveq	r3, #0
 8107e5c:	b2db      	uxtb	r3, r3
 8107e5e:	2b00      	cmp	r3, #0
 8107e60:	d007      	beq.n	8107e72 <_ZNSt15__new_allocatorI8SMessageE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 8107e62:	68bb      	ldr	r3, [r7, #8]
 8107e64:	4a0a      	ldr	r2, [pc, #40]	@ (8107e90 <_ZNSt15__new_allocatorI8SMessageE8allocateEjPKv+0x5c>)
 8107e66:	4293      	cmp	r3, r2
 8107e68:	d901      	bls.n	8107e6e <_ZNSt15__new_allocatorI8SMessageE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 8107e6a:	f01a ff4f 	bl	8122d0c <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 8107e6e:	f01a ff4a 	bl	8122d06 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 8107e72:	68ba      	ldr	r2, [r7, #8]
 8107e74:	4613      	mov	r3, r2
 8107e76:	00db      	lsls	r3, r3, #3
 8107e78:	1a9b      	subs	r3, r3, r2
 8107e7a:	009b      	lsls	r3, r3, #2
 8107e7c:	4618      	mov	r0, r3
 8107e7e:	f01a fe74 	bl	8122b6a <_Znwj>
 8107e82:	4603      	mov	r3, r0
 8107e84:	bf00      	nop
      }
 8107e86:	4618      	mov	r0, r3
 8107e88:	3710      	adds	r7, #16
 8107e8a:	46bd      	mov	sp, r7
 8107e8c:	bd80      	pop	{r7, pc}
 8107e8e:	bf00      	nop
 8107e90:	09249249 	.word	0x09249249

08107e94 <_ZSt14__relocate_a_1IP8SMessageN9__gnu_cxx17__normal_iteratorIS1_vEESaIS0_EET0_T_S7_S6_RT1_>:
    __relocate_a_1(_InputIterator __first, _InputIterator __last,
 8107e94:	b590      	push	{r4, r7, lr}
 8107e96:	b087      	sub	sp, #28
 8107e98:	af00      	add	r7, sp, #0
 8107e9a:	60f8      	str	r0, [r7, #12]
 8107e9c:	60b9      	str	r1, [r7, #8]
 8107e9e:	607a      	str	r2, [r7, #4]
 8107ea0:	603b      	str	r3, [r7, #0]
      _ForwardIterator __cur = __result;
 8107ea2:	687b      	ldr	r3, [r7, #4]
 8107ea4:	617b      	str	r3, [r7, #20]
      for (; __first != __last; ++__first, (void)++__cur)
 8107ea6:	e01a      	b.n	8107ede <_ZSt14__relocate_a_1IP8SMessageN9__gnu_cxx17__normal_iteratorIS1_vEESaIS0_EET0_T_S7_S6_RT1_+0x4a>
	std::__relocate_object_a(std::__addressof(*__cur),
 8107ea8:	f107 0314 	add.w	r3, r7, #20
 8107eac:	4618      	mov	r0, r3
 8107eae:	f000 f8bc 	bl	810802a <_ZNK9__gnu_cxx17__normal_iteratorIP8SMessagevEdeEv>
 8107eb2:	4603      	mov	r3, r0
 8107eb4:	4618      	mov	r0, r3
 8107eb6:	f7ff fe4f 	bl	8107b58 <_ZSt11__addressofI8SMessageEPT_RS1_>
 8107eba:	4604      	mov	r4, r0
 8107ebc:	68f8      	ldr	r0, [r7, #12]
 8107ebe:	f7ff fe4b 	bl	8107b58 <_ZSt11__addressofI8SMessageEPT_RS1_>
 8107ec2:	4603      	mov	r3, r0
 8107ec4:	683a      	ldr	r2, [r7, #0]
 8107ec6:	4619      	mov	r1, r3
 8107ec8:	4620      	mov	r0, r4
 8107eca:	f000 f8ba 	bl	8108042 <_ZSt19__relocate_object_aI8SMessageS0_SaIS0_EEvPT_PT0_RT1_>
      for (; __first != __last; ++__first, (void)++__cur)
 8107ece:	68fb      	ldr	r3, [r7, #12]
 8107ed0:	331c      	adds	r3, #28
 8107ed2:	60fb      	str	r3, [r7, #12]
 8107ed4:	f107 0314 	add.w	r3, r7, #20
 8107ed8:	4618      	mov	r0, r3
 8107eda:	f000 f895 	bl	8108008 <_ZN9__gnu_cxx17__normal_iteratorIP8SMessagevEppEv>
 8107ede:	68fa      	ldr	r2, [r7, #12]
 8107ee0:	68bb      	ldr	r3, [r7, #8]
 8107ee2:	429a      	cmp	r2, r3
 8107ee4:	d1e0      	bne.n	8107ea8 <_ZSt14__relocate_a_1IP8SMessageN9__gnu_cxx17__normal_iteratorIS1_vEESaIS0_EET0_T_S7_S6_RT1_+0x14>
      return __cur;
 8107ee6:	697b      	ldr	r3, [r7, #20]
    }
 8107ee8:	4618      	mov	r0, r3
 8107eea:	371c      	adds	r7, #28
 8107eec:	46bd      	mov	sp, r7
 8107eee:	bd90      	pop	{r4, r7, pc}

08107ef0 <_ZNK9__gnu_cxx17__normal_iteratorIP8SMessagevE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8107ef0:	b480      	push	{r7}
 8107ef2:	b083      	sub	sp, #12
 8107ef4:	af00      	add	r7, sp, #0
 8107ef6:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8107ef8:	687b      	ldr	r3, [r7, #4]
 8107efa:	4618      	mov	r0, r3
 8107efc:	370c      	adds	r7, #12
 8107efe:	46bd      	mov	sp, r7
 8107f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107f04:	4770      	bx	lr

08107f06 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEEE9constructIS7_JRKSt21piecewise_construct_tSt5tupleIJRS4_EESF_IJEEEEEvRS9_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8107f06:	b5b0      	push	{r4, r5, r7, lr}
 8107f08:	b084      	sub	sp, #16
 8107f0a:	af00      	add	r7, sp, #0
 8107f0c:	60f8      	str	r0, [r7, #12]
 8107f0e:	60b9      	str	r1, [r7, #8]
 8107f10:	607a      	str	r2, [r7, #4]
 8107f12:	603b      	str	r3, [r7, #0]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 8107f14:	6878      	ldr	r0, [r7, #4]
 8107f16:	f7ff f963 	bl	81071e0 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8107f1a:	4604      	mov	r4, r0
 8107f1c:	6838      	ldr	r0, [r7, #0]
 8107f1e:	f7ff f96a 	bl	81071f6 <_ZSt7forwardISt5tupleIJRKN19EventManagerCM4Task11EEventQueueEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8107f22:	4605      	mov	r5, r0
 8107f24:	6a38      	ldr	r0, [r7, #32]
 8107f26:	f7ff f971 	bl	810720c <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8107f2a:	4603      	mov	r3, r0
 8107f2c:	462a      	mov	r2, r5
 8107f2e:	4621      	mov	r1, r4
 8107f30:	68b8      	ldr	r0, [r7, #8]
 8107f32:	f000 f8b1 	bl	8108098 <_ZSt12construct_atISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEJRKSt21piecewise_construct_tSt5tupleIJRS3_EESA_IJEEEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPSF_DpOSG_>
	}
 8107f36:	bf00      	nop
 8107f38:	3710      	adds	r7, #16
 8107f3a:	46bd      	mov	sp, r7
 8107f3c:	bdb0      	pop	{r4, r5, r7, pc}

08107f3e <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEEE9constructIS7_JRKSt21piecewise_construct_tSt5tupleIJOS3_EESF_IJEEEEEvRS9_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8107f3e:	b5b0      	push	{r4, r5, r7, lr}
 8107f40:	b084      	sub	sp, #16
 8107f42:	af00      	add	r7, sp, #0
 8107f44:	60f8      	str	r0, [r7, #12]
 8107f46:	60b9      	str	r1, [r7, #8]
 8107f48:	607a      	str	r2, [r7, #4]
 8107f4a:	603b      	str	r3, [r7, #0]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 8107f4c:	6878      	ldr	r0, [r7, #4]
 8107f4e:	f7ff f947 	bl	81071e0 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8107f52:	4604      	mov	r4, r0
 8107f54:	6838      	ldr	r0, [r7, #0]
 8107f56:	f7ff fac8 	bl	81074ea <_ZSt7forwardISt5tupleIJON19EventManagerCM4Task11EEventQueueEEEEOT_RNSt16remove_referenceIS5_E4typeE>
 8107f5a:	4605      	mov	r5, r0
 8107f5c:	6a38      	ldr	r0, [r7, #32]
 8107f5e:	f7ff f955 	bl	810720c <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8107f62:	4603      	mov	r3, r0
 8107f64:	462a      	mov	r2, r5
 8107f66:	4621      	mov	r1, r4
 8107f68:	68b8      	ldr	r0, [r7, #8]
 8107f6a:	f000 f8ce 	bl	810810a <_ZSt12construct_atISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEJRKSt21piecewise_construct_tSt5tupleIJOS2_EESA_IJEEEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPSF_DpOSG_>
	}
 8107f6e:	bf00      	nop
 8107f70:	3710      	adds	r7, #16
 8107f72:	46bd      	mov	sp, r7
 8107f74:	bdb0      	pop	{r4, r5, r7, pc}

08107f76 <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEE10deallocateEPS8_j>:
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
 8107f76:	b580      	push	{r7, lr}
 8107f78:	b084      	sub	sp, #16
 8107f7a:	af00      	add	r7, sp, #0
 8107f7c:	60f8      	str	r0, [r7, #12]
 8107f7e:	60b9      	str	r1, [r7, #8]
 8107f80:	607a      	str	r2, [r7, #4]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 8107f82:	687a      	ldr	r2, [r7, #4]
 8107f84:	4613      	mov	r3, r2
 8107f86:	005b      	lsls	r3, r3, #1
 8107f88:	4413      	add	r3, r2
 8107f8a:	00db      	lsls	r3, r3, #3
 8107f8c:	4619      	mov	r1, r3
 8107f8e:	68b8      	ldr	r0, [r7, #8]
 8107f90:	f01a fdda 	bl	8122b48 <_ZdlPvj>
      }
 8107f94:	3710      	adds	r7, #16
 8107f96:	46bd      	mov	sp, r7
 8107f98:	bd80      	pop	{r7, pc}

08107f9a <_ZSt12construct_atISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEJRS2_RS5_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPSA_DpOSB_>:
    construct_at(_Tp* __location, _Args&&... __args)
 8107f9a:	b5b0      	push	{r4, r5, r7, lr}
 8107f9c:	b084      	sub	sp, #16
 8107f9e:	af00      	add	r7, sp, #0
 8107fa0:	60f8      	str	r0, [r7, #12]
 8107fa2:	60b9      	str	r1, [r7, #8]
 8107fa4:	607a      	str	r2, [r7, #4]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 8107fa6:	68fb      	ldr	r3, [r7, #12]
 8107fa8:	4619      	mov	r1, r3
 8107faa:	2008      	movs	r0, #8
 8107fac:	f7f9 f96c 	bl	8101288 <_ZnwjPv>
 8107fb0:	4604      	mov	r4, r0
 8107fb2:	68b8      	ldr	r0, [r7, #8]
 8107fb4:	f7fe fb69 	bl	810668a <_ZSt7forwardIRN19EventManagerCM4Task11EEventQueueEEOT_RNSt16remove_referenceIS3_E4typeE>
 8107fb8:	4605      	mov	r5, r0
 8107fba:	6878      	ldr	r0, [r7, #4]
 8107fbc:	f7fe fb70 	bl	81066a0 <_ZSt7forwardIRP15QueueDefinitionEOT_RNSt16remove_referenceIS3_E4typeE>
 8107fc0:	4603      	mov	r3, r0
 8107fc2:	461a      	mov	r2, r3
 8107fc4:	4629      	mov	r1, r5
 8107fc6:	4620      	mov	r0, r4
 8107fc8:	f000 f8f8 	bl	81081bc <_ZNSt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEC1IRS1_RS4_EEOT_OT0_>
 8107fcc:	4623      	mov	r3, r4
 8107fce:	4618      	mov	r0, r3
 8107fd0:	3710      	adds	r7, #16
 8107fd2:	46bd      	mov	sp, r7
 8107fd4:	bdb0      	pop	{r4, r5, r7, pc}

08107fd6 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEE7_M_addrEv>:
      _M_addr() const noexcept
 8107fd6:	b480      	push	{r7}
 8107fd8:	b083      	sub	sp, #12
 8107fda:	af00      	add	r7, sp, #0
 8107fdc:	6078      	str	r0, [r7, #4]
      { return static_cast<const void*>(&_M_storage); }
 8107fde:	687b      	ldr	r3, [r7, #4]
 8107fe0:	4618      	mov	r0, r3
 8107fe2:	370c      	adds	r7, #12
 8107fe4:	46bd      	mov	sp, r7
 8107fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107fea:	4770      	bx	lr

08107fec <_ZNKSt15__new_allocatorI8SMessageE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8107fec:	b480      	push	{r7}
 8107fee:	b083      	sub	sp, #12
 8107ff0:	af00      	add	r7, sp, #0
 8107ff2:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8107ff4:	4b03      	ldr	r3, [pc, #12]	@ (8108004 <_ZNKSt15__new_allocatorI8SMessageE11_M_max_sizeEv+0x18>)
      }
 8107ff6:	4618      	mov	r0, r3
 8107ff8:	370c      	adds	r7, #12
 8107ffa:	46bd      	mov	sp, r7
 8107ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108000:	4770      	bx	lr
 8108002:	bf00      	nop
 8108004:	04924924 	.word	0x04924924

08108008 <_ZN9__gnu_cxx17__normal_iteratorIP8SMessagevEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8108008:	b480      	push	{r7}
 810800a:	b083      	sub	sp, #12
 810800c:	af00      	add	r7, sp, #0
 810800e:	6078      	str	r0, [r7, #4]
	++_M_current;
 8108010:	687b      	ldr	r3, [r7, #4]
 8108012:	681b      	ldr	r3, [r3, #0]
 8108014:	f103 021c 	add.w	r2, r3, #28
 8108018:	687b      	ldr	r3, [r7, #4]
 810801a:	601a      	str	r2, [r3, #0]
	return *this;
 810801c:	687b      	ldr	r3, [r7, #4]
      }
 810801e:	4618      	mov	r0, r3
 8108020:	370c      	adds	r7, #12
 8108022:	46bd      	mov	sp, r7
 8108024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108028:	4770      	bx	lr

0810802a <_ZNK9__gnu_cxx17__normal_iteratorIP8SMessagevEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 810802a:	b480      	push	{r7}
 810802c:	b083      	sub	sp, #12
 810802e:	af00      	add	r7, sp, #0
 8108030:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 8108032:	687b      	ldr	r3, [r7, #4]
 8108034:	681b      	ldr	r3, [r3, #0]
 8108036:	4618      	mov	r0, r3
 8108038:	370c      	adds	r7, #12
 810803a:	46bd      	mov	sp, r7
 810803c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108040:	4770      	bx	lr

08108042 <_ZSt19__relocate_object_aI8SMessageS0_SaIS0_EEvPT_PT0_RT1_>:
    __relocate_object_a(_Tp* __restrict __dest, _Up* __restrict __orig,
 8108042:	b580      	push	{r7, lr}
 8108044:	b084      	sub	sp, #16
 8108046:	af00      	add	r7, sp, #0
 8108048:	60f8      	str	r0, [r7, #12]
 810804a:	60b9      	str	r1, [r7, #8]
 810804c:	607a      	str	r2, [r7, #4]
      __traits::construct(__alloc, __dest, std::move(*__orig));
 810804e:	68b8      	ldr	r0, [r7, #8]
 8108050:	f000 f8cd 	bl	81081ee <_ZSt4moveIR8SMessageEONSt16remove_referenceIT_E4typeEOS3_>
 8108054:	4603      	mov	r3, r0
 8108056:	461a      	mov	r2, r3
 8108058:	68f9      	ldr	r1, [r7, #12]
 810805a:	6878      	ldr	r0, [r7, #4]
 810805c:	f000 f8d2 	bl	8108204 <_ZNSt16allocator_traitsISaI8SMessageEE9constructIS0_JS0_EEEvRS1_PT_DpOT0_>
      __traits::destroy(__alloc, std::__addressof(*__orig));
 8108060:	68b8      	ldr	r0, [r7, #8]
 8108062:	f7ff fd79 	bl	8107b58 <_ZSt11__addressofI8SMessageEPT_RS1_>
 8108066:	4603      	mov	r3, r0
 8108068:	4619      	mov	r1, r3
 810806a:	6878      	ldr	r0, [r7, #4]
 810806c:	f7ff f854 	bl	8107118 <_ZNSt16allocator_traitsISaI8SMessageEE7destroyIS0_EEvRS1_PT_>
    }
 8108070:	bf00      	nop
 8108072:	3710      	adds	r7, #16
 8108074:	46bd      	mov	sp, r7
 8108076:	bd80      	pop	{r7, pc}

08108078 <_ZNSt5tupleIJRKN19EventManagerCM4Task11EEventQueueEEEC1EOS4_>:
      constexpr tuple(tuple&&) = default;
 8108078:	b580      	push	{r7, lr}
 810807a:	b082      	sub	sp, #8
 810807c:	af00      	add	r7, sp, #0
 810807e:	6078      	str	r0, [r7, #4]
 8108080:	6039      	str	r1, [r7, #0]
 8108082:	687b      	ldr	r3, [r7, #4]
 8108084:	683a      	ldr	r2, [r7, #0]
 8108086:	4611      	mov	r1, r2
 8108088:	4618      	mov	r0, r3
 810808a:	f000 f8cd 	bl	8108228 <_ZNSt11_Tuple_implILj0EJRKN19EventManagerCM4Task11EEventQueueEEEC1EOS4_>
 810808e:	687b      	ldr	r3, [r7, #4]
 8108090:	4618      	mov	r0, r3
 8108092:	3708      	adds	r7, #8
 8108094:	46bd      	mov	sp, r7
 8108096:	bd80      	pop	{r7, pc}

08108098 <_ZSt12construct_atISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEJRKSt21piecewise_construct_tSt5tupleIJRS3_EESA_IJEEEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPSF_DpOSG_>:
    construct_at(_Tp* __location, _Args&&... __args)
 8108098:	b5f0      	push	{r4, r5, r6, r7, lr}
 810809a:	b087      	sub	sp, #28
 810809c:	af00      	add	r7, sp, #0
 810809e:	60f8      	str	r0, [r7, #12]
 81080a0:	60b9      	str	r1, [r7, #8]
 81080a2:	607a      	str	r2, [r7, #4]
 81080a4:	603b      	str	r3, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 81080a6:	68fb      	ldr	r3, [r7, #12]
 81080a8:	4619      	mov	r1, r3
 81080aa:	2008      	movs	r0, #8
 81080ac:	f7f9 f8ec 	bl	8101288 <_ZnwjPv>
 81080b0:	4604      	mov	r4, r0
 81080b2:	68b8      	ldr	r0, [r7, #8]
 81080b4:	f7ff f894 	bl	81071e0 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 81080b8:	6878      	ldr	r0, [r7, #4]
 81080ba:	f7ff f89c 	bl	81071f6 <_ZSt7forwardISt5tupleIJRKN19EventManagerCM4Task11EEventQueueEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 81080be:	4602      	mov	r2, r0
 81080c0:	f107 0314 	add.w	r3, r7, #20
 81080c4:	4611      	mov	r1, r2
 81080c6:	4618      	mov	r0, r3
 81080c8:	f7ff ffd6 	bl	8108078 <_ZNSt5tupleIJRKN19EventManagerCM4Task11EEventQueueEEEC1EOS4_>
 81080cc:	6838      	ldr	r0, [r7, #0]
 81080ce:	f7ff f89d 	bl	810720c <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 81080d2:	f107 0214 	add.w	r2, r7, #20
 81080d6:	4633      	mov	r3, r6
 81080d8:	4629      	mov	r1, r5
 81080da:	4620      	mov	r0, r4
 81080dc:	f000 f8b4 	bl	8108248 <_ZNSt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEC1IJRS2_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EES9_IJDpT0_EE>
 81080e0:	4623      	mov	r3, r4
 81080e2:	4618      	mov	r0, r3
 81080e4:	371c      	adds	r7, #28
 81080e6:	46bd      	mov	sp, r7
 81080e8:	bdf0      	pop	{r4, r5, r6, r7, pc}

081080ea <_ZNSt5tupleIJON19EventManagerCM4Task11EEventQueueEEEC1EOS3_>:
 81080ea:	b580      	push	{r7, lr}
 81080ec:	b082      	sub	sp, #8
 81080ee:	af00      	add	r7, sp, #0
 81080f0:	6078      	str	r0, [r7, #4]
 81080f2:	6039      	str	r1, [r7, #0]
 81080f4:	687b      	ldr	r3, [r7, #4]
 81080f6:	683a      	ldr	r2, [r7, #0]
 81080f8:	4611      	mov	r1, r2
 81080fa:	4618      	mov	r0, r3
 81080fc:	f000 f8b8 	bl	8108270 <_ZNSt11_Tuple_implILj0EJON19EventManagerCM4Task11EEventQueueEEEC1EOS3_>
 8108100:	687b      	ldr	r3, [r7, #4]
 8108102:	4618      	mov	r0, r3
 8108104:	3708      	adds	r7, #8
 8108106:	46bd      	mov	sp, r7
 8108108:	bd80      	pop	{r7, pc}

0810810a <_ZSt12construct_atISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEJRKSt21piecewise_construct_tSt5tupleIJOS2_EESA_IJEEEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPSF_DpOSG_>:
    construct_at(_Tp* __location, _Args&&... __args)
 810810a:	b5f0      	push	{r4, r5, r6, r7, lr}
 810810c:	b087      	sub	sp, #28
 810810e:	af00      	add	r7, sp, #0
 8108110:	60f8      	str	r0, [r7, #12]
 8108112:	60b9      	str	r1, [r7, #8]
 8108114:	607a      	str	r2, [r7, #4]
 8108116:	603b      	str	r3, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 8108118:	68fb      	ldr	r3, [r7, #12]
 810811a:	4619      	mov	r1, r3
 810811c:	2008      	movs	r0, #8
 810811e:	f7f9 f8b3 	bl	8101288 <_ZnwjPv>
 8108122:	4604      	mov	r4, r0
 8108124:	68b8      	ldr	r0, [r7, #8]
 8108126:	f7ff f85b 	bl	81071e0 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 810812a:	6878      	ldr	r0, [r7, #4]
 810812c:	f7ff f9dd 	bl	81074ea <_ZSt7forwardISt5tupleIJON19EventManagerCM4Task11EEventQueueEEEEOT_RNSt16remove_referenceIS5_E4typeE>
 8108130:	4602      	mov	r2, r0
 8108132:	f107 0314 	add.w	r3, r7, #20
 8108136:	4611      	mov	r1, r2
 8108138:	4618      	mov	r0, r3
 810813a:	f7ff ffd6 	bl	81080ea <_ZNSt5tupleIJON19EventManagerCM4Task11EEventQueueEEEC1EOS3_>
 810813e:	6838      	ldr	r0, [r7, #0]
 8108140:	f7ff f864 	bl	810720c <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8108144:	f107 0214 	add.w	r2, r7, #20
 8108148:	4633      	mov	r3, r6
 810814a:	4629      	mov	r1, r5
 810814c:	4620      	mov	r0, r4
 810814e:	f000 f89f 	bl	8108290 <_ZNSt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEC1IJOS1_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EES9_IJDpT0_EE>
 8108152:	4623      	mov	r3, r4
 8108154:	4618      	mov	r0, r3
 8108156:	371c      	adds	r7, #28
 8108158:	46bd      	mov	sp, r7
 810815a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0810815c <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 810815c:	b580      	push	{r7, lr}
 810815e:	b084      	sub	sp, #16
 8108160:	af00      	add	r7, sp, #0
 8108162:	60f8      	str	r0, [r7, #12]
 8108164:	60b9      	str	r1, [r7, #8]
 8108166:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 8108168:	68f8      	ldr	r0, [r7, #12]
 810816a:	f000 f8a5 	bl	81082b8 <_ZNKSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEE11_M_max_sizeEv>
 810816e:	4602      	mov	r2, r0
 8108170:	68bb      	ldr	r3, [r7, #8]
 8108172:	4293      	cmp	r3, r2
 8108174:	bf8c      	ite	hi
 8108176:	2301      	movhi	r3, #1
 8108178:	2300      	movls	r3, #0
 810817a:	b2db      	uxtb	r3, r3
 810817c:	2b00      	cmp	r3, #0
 810817e:	bf14      	ite	ne
 8108180:	2301      	movne	r3, #1
 8108182:	2300      	moveq	r3, #0
 8108184:	b2db      	uxtb	r3, r3
 8108186:	2b00      	cmp	r3, #0
 8108188:	d007      	beq.n	810819a <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 810818a:	68bb      	ldr	r3, [r7, #8]
 810818c:	4a0a      	ldr	r2, [pc, #40]	@ (81081b8 <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEE8allocateEjPKv+0x5c>)
 810818e:	4293      	cmp	r3, r2
 8108190:	d901      	bls.n	8108196 <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 8108192:	f01a fdbb 	bl	8122d0c <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 8108196:	f01a fdb6 	bl	8122d06 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 810819a:	68ba      	ldr	r2, [r7, #8]
 810819c:	4613      	mov	r3, r2
 810819e:	005b      	lsls	r3, r3, #1
 81081a0:	4413      	add	r3, r2
 81081a2:	00db      	lsls	r3, r3, #3
 81081a4:	4618      	mov	r0, r3
 81081a6:	f01a fce0 	bl	8122b6a <_Znwj>
 81081aa:	4603      	mov	r3, r0
 81081ac:	bf00      	nop
      }
 81081ae:	4618      	mov	r0, r3
 81081b0:	3710      	adds	r7, #16
 81081b2:	46bd      	mov	sp, r7
 81081b4:	bd80      	pop	{r7, pc}
 81081b6:	bf00      	nop
 81081b8:	0aaaaaaa 	.word	0x0aaaaaaa

081081bc <_ZNSt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEC1IRS1_RS4_EEOT_OT0_>:
	pair(_U1&& __x, _U2&& __y)
 81081bc:	b580      	push	{r7, lr}
 81081be:	b084      	sub	sp, #16
 81081c0:	af00      	add	r7, sp, #0
 81081c2:	60f8      	str	r0, [r7, #12]
 81081c4:	60b9      	str	r1, [r7, #8]
 81081c6:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y))
 81081c8:	68b8      	ldr	r0, [r7, #8]
 81081ca:	f7fe fa5e 	bl	810668a <_ZSt7forwardIRN19EventManagerCM4Task11EEventQueueEEOT_RNSt16remove_referenceIS3_E4typeE>
 81081ce:	4603      	mov	r3, r0
 81081d0:	781a      	ldrb	r2, [r3, #0]
 81081d2:	68fb      	ldr	r3, [r7, #12]
 81081d4:	701a      	strb	r2, [r3, #0]
 81081d6:	6878      	ldr	r0, [r7, #4]
 81081d8:	f7fe fa62 	bl	81066a0 <_ZSt7forwardIRP15QueueDefinitionEOT_RNSt16remove_referenceIS3_E4typeE>
 81081dc:	4603      	mov	r3, r0
 81081de:	681a      	ldr	r2, [r3, #0]
 81081e0:	68fb      	ldr	r3, [r7, #12]
 81081e2:	605a      	str	r2, [r3, #4]
	{ }
 81081e4:	68fb      	ldr	r3, [r7, #12]
 81081e6:	4618      	mov	r0, r3
 81081e8:	3710      	adds	r7, #16
 81081ea:	46bd      	mov	sp, r7
 81081ec:	bd80      	pop	{r7, pc}

081081ee <_ZSt4moveIR8SMessageEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 81081ee:	b480      	push	{r7}
 81081f0:	b083      	sub	sp, #12
 81081f2:	af00      	add	r7, sp, #0
 81081f4:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 81081f6:	687b      	ldr	r3, [r7, #4]
 81081f8:	4618      	mov	r0, r3
 81081fa:	370c      	adds	r7, #12
 81081fc:	46bd      	mov	sp, r7
 81081fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108202:	4770      	bx	lr

08108204 <_ZNSt16allocator_traitsISaI8SMessageEE9constructIS0_JS0_EEEvRS1_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8108204:	b580      	push	{r7, lr}
 8108206:	b084      	sub	sp, #16
 8108208:	af00      	add	r7, sp, #0
 810820a:	60f8      	str	r0, [r7, #12]
 810820c:	60b9      	str	r1, [r7, #8]
 810820e:	607a      	str	r2, [r7, #4]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 8108210:	6878      	ldr	r0, [r7, #4]
 8108212:	f000 f85f 	bl	81082d4 <_ZSt7forwardI8SMessageEOT_RNSt16remove_referenceIS1_E4typeE>
 8108216:	4603      	mov	r3, r0
 8108218:	4619      	mov	r1, r3
 810821a:	68b8      	ldr	r0, [r7, #8]
 810821c:	f000 f865 	bl	81082ea <_ZSt12construct_atI8SMessageJS0_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS2_DpOS3_>
	}
 8108220:	bf00      	nop
 8108222:	3710      	adds	r7, #16
 8108224:	46bd      	mov	sp, r7
 8108226:	bd80      	pop	{r7, pc}

08108228 <_ZNSt11_Tuple_implILj0EJRKN19EventManagerCM4Task11EEventQueueEEEC1EOS4_>:
      _Tuple_impl(_Tuple_impl&& __in)
 8108228:	b480      	push	{r7}
 810822a:	b083      	sub	sp, #12
 810822c:	af00      	add	r7, sp, #0
 810822e:	6078      	str	r0, [r7, #4]
 8108230:	6039      	str	r1, [r7, #0]
      : _Base(static_cast<_Base&&>(__in))
 8108232:	687b      	ldr	r3, [r7, #4]
 8108234:	683a      	ldr	r2, [r7, #0]
 8108236:	6812      	ldr	r2, [r2, #0]
 8108238:	601a      	str	r2, [r3, #0]
      { }
 810823a:	687b      	ldr	r3, [r7, #4]
 810823c:	4618      	mov	r0, r3
 810823e:	370c      	adds	r7, #12
 8108240:	46bd      	mov	sp, r7
 8108242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108246:	4770      	bx	lr

08108248 <_ZNSt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEC1IJRS2_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EES9_IJDpT0_EE>:
  */
  template<class _T1, class _T2>
    template<typename... _Args1, typename... _Args2>
      _GLIBCXX20_CONSTEXPR
      inline
      pair<_T1, _T2>::
 8108248:	b5b0      	push	{r4, r5, r7, lr}
 810824a:	b086      	sub	sp, #24
 810824c:	af02      	add	r7, sp, #8
 810824e:	60f8      	str	r0, [r7, #12]
 8108250:	7239      	strb	r1, [r7, #8]
 8108252:	607a      	str	r2, [r7, #4]
 8108254:	703b      	strb	r3, [r7, #0]
      pair(piecewise_construct_t,
	   tuple<_Args1...> __first, tuple<_Args2...> __second)
      : pair(__first, __second,
	     typename _Build_index_tuple<sizeof...(_Args1)>::__type(),
	     typename _Build_index_tuple<sizeof...(_Args2)>::__type())
 8108256:	463a      	mov	r2, r7
 8108258:	f88d 4000 	strb.w	r4, [sp]
 810825c:	462b      	mov	r3, r5
 810825e:	6879      	ldr	r1, [r7, #4]
 8108260:	68f8      	ldr	r0, [r7, #12]
 8108262:	f000 f85e 	bl	8108322 <_ZNSt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEC1IJRS2_EJLj0EEJEJEEERSt5tupleIJDpT_EERS8_IJDpT1_EESt12_Index_tupleIJXspT0_EEESH_IJXspT2_EEE>
      { }
 8108266:	68fb      	ldr	r3, [r7, #12]
 8108268:	4618      	mov	r0, r3
 810826a:	3710      	adds	r7, #16
 810826c:	46bd      	mov	sp, r7
 810826e:	bdb0      	pop	{r4, r5, r7, pc}

08108270 <_ZNSt11_Tuple_implILj0EJON19EventManagerCM4Task11EEventQueueEEEC1EOS3_>:
      _Tuple_impl(_Tuple_impl&& __in)
 8108270:	b480      	push	{r7}
 8108272:	b083      	sub	sp, #12
 8108274:	af00      	add	r7, sp, #0
 8108276:	6078      	str	r0, [r7, #4]
 8108278:	6039      	str	r1, [r7, #0]
      : _Base(static_cast<_Base&&>(__in))
 810827a:	687b      	ldr	r3, [r7, #4]
 810827c:	683a      	ldr	r2, [r7, #0]
 810827e:	6812      	ldr	r2, [r2, #0]
 8108280:	601a      	str	r2, [r3, #0]
      { }
 8108282:	687b      	ldr	r3, [r7, #4]
 8108284:	4618      	mov	r0, r3
 8108286:	370c      	adds	r7, #12
 8108288:	46bd      	mov	sp, r7
 810828a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810828e:	4770      	bx	lr

08108290 <_ZNSt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEC1IJOS1_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EES9_IJDpT0_EE>:
      pair<_T1, _T2>::
 8108290:	b5b0      	push	{r4, r5, r7, lr}
 8108292:	b086      	sub	sp, #24
 8108294:	af02      	add	r7, sp, #8
 8108296:	60f8      	str	r0, [r7, #12]
 8108298:	7239      	strb	r1, [r7, #8]
 810829a:	607a      	str	r2, [r7, #4]
 810829c:	703b      	strb	r3, [r7, #0]
	     typename _Build_index_tuple<sizeof...(_Args2)>::__type())
 810829e:	463a      	mov	r2, r7
 81082a0:	f88d 4000 	strb.w	r4, [sp]
 81082a4:	462b      	mov	r3, r5
 81082a6:	6879      	ldr	r1, [r7, #4]
 81082a8:	68f8      	ldr	r0, [r7, #12]
 81082aa:	f000 f854 	bl	8108356 <_ZNSt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEC1IJOS1_EJLj0EEJEJEEERSt5tupleIJDpT_EERS8_IJDpT1_EESt12_Index_tupleIJXspT0_EEESH_IJXspT2_EEE>
      { }
 81082ae:	68fb      	ldr	r3, [r7, #12]
 81082b0:	4618      	mov	r0, r3
 81082b2:	3710      	adds	r7, #16
 81082b4:	46bd      	mov	sp, r7
 81082b6:	bdb0      	pop	{r4, r5, r7, pc}

081082b8 <_ZNKSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 81082b8:	b480      	push	{r7}
 81082ba:	b083      	sub	sp, #12
 81082bc:	af00      	add	r7, sp, #0
 81082be:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 81082c0:	4b03      	ldr	r3, [pc, #12]	@ (81082d0 <_ZNKSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEE11_M_max_sizeEv+0x18>)
      }
 81082c2:	4618      	mov	r0, r3
 81082c4:	370c      	adds	r7, #12
 81082c6:	46bd      	mov	sp, r7
 81082c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81082cc:	4770      	bx	lr
 81082ce:	bf00      	nop
 81082d0:	05555555 	.word	0x05555555

081082d4 <_ZSt7forwardI8SMessageEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 81082d4:	b480      	push	{r7}
 81082d6:	b083      	sub	sp, #12
 81082d8:	af00      	add	r7, sp, #0
 81082da:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 81082dc:	687b      	ldr	r3, [r7, #4]
 81082de:	4618      	mov	r0, r3
 81082e0:	370c      	adds	r7, #12
 81082e2:	46bd      	mov	sp, r7
 81082e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81082e8:	4770      	bx	lr

081082ea <_ZSt12construct_atI8SMessageJS0_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS2_DpOS3_>:
    construct_at(_Tp* __location, _Args&&... __args)
 81082ea:	b5f0      	push	{r4, r5, r6, r7, lr}
 81082ec:	b083      	sub	sp, #12
 81082ee:	af00      	add	r7, sp, #0
 81082f0:	6078      	str	r0, [r7, #4]
 81082f2:	6039      	str	r1, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 81082f4:	687b      	ldr	r3, [r7, #4]
 81082f6:	4619      	mov	r1, r3
 81082f8:	201c      	movs	r0, #28
 81082fa:	f7f8 ffc5 	bl	8101288 <_ZnwjPv>
 81082fe:	4606      	mov	r6, r0
 8108300:	6838      	ldr	r0, [r7, #0]
 8108302:	f7ff ffe7 	bl	81082d4 <_ZSt7forwardI8SMessageEOT_RNSt16remove_referenceIS1_E4typeE>
 8108306:	4603      	mov	r3, r0
 8108308:	4634      	mov	r4, r6
 810830a:	461d      	mov	r5, r3
 810830c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 810830e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8108310:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8108314:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8108318:	4633      	mov	r3, r6
 810831a:	4618      	mov	r0, r3
 810831c:	370c      	adds	r7, #12
 810831e:	46bd      	mov	sp, r7
 8108320:	bdf0      	pop	{r4, r5, r6, r7, pc}

08108322 <_ZNSt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEC1IJRS2_EJLj0EEJEJEEERSt5tupleIJDpT_EERS8_IJDpT1_EESt12_Index_tupleIJXspT0_EEESH_IJXspT2_EEE>:

  template<class _T1, class _T2>
    template<typename... _Args1, size_t... _Indexes1,
	     typename... _Args2, size_t... _Indexes2>
      _GLIBCXX20_CONSTEXPR inline
      pair<_T1, _T2>::
 8108322:	b580      	push	{r7, lr}
 8108324:	b084      	sub	sp, #16
 8108326:	af00      	add	r7, sp, #0
 8108328:	60f8      	str	r0, [r7, #12]
 810832a:	60b9      	str	r1, [r7, #8]
 810832c:	607a      	str	r2, [r7, #4]
 810832e:	703b      	strb	r3, [r7, #0]
      pair(tuple<_Args1...>& __tuple1, tuple<_Args2...>& __tuple2,
	   _Index_tuple<_Indexes1...>, _Index_tuple<_Indexes2...>)
      : first(std::forward<_Args1>(std::get<_Indexes1>(__tuple1))...),
 8108330:	68b8      	ldr	r0, [r7, #8]
 8108332:	f000 f82a 	bl	810838a <_ZSt3getILj0EJRKN19EventManagerCM4Task11EEventQueueEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 8108336:	4603      	mov	r3, r0
 8108338:	4618      	mov	r0, r3
 810833a:	f000 f833 	bl	81083a4 <_ZSt7forwardIRKN19EventManagerCM4Task11EEventQueueEEOT_RNSt16remove_referenceIS4_E4typeE>
 810833e:	4603      	mov	r3, r0
 8108340:	781a      	ldrb	r2, [r3, #0]
 8108342:	68fb      	ldr	r3, [r7, #12]
 8108344:	701a      	strb	r2, [r3, #0]
	second(std::forward<_Args2>(std::get<_Indexes2>(__tuple2))...)
 8108346:	68fb      	ldr	r3, [r7, #12]
 8108348:	2200      	movs	r2, #0
 810834a:	605a      	str	r2, [r3, #4]
      { }
 810834c:	68fb      	ldr	r3, [r7, #12]
 810834e:	4618      	mov	r0, r3
 8108350:	3710      	adds	r7, #16
 8108352:	46bd      	mov	sp, r7
 8108354:	bd80      	pop	{r7, pc}

08108356 <_ZNSt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEC1IJOS1_EJLj0EEJEJEEERSt5tupleIJDpT_EERS8_IJDpT1_EESt12_Index_tupleIJXspT0_EEESH_IJXspT2_EEE>:
      pair<_T1, _T2>::
 8108356:	b580      	push	{r7, lr}
 8108358:	b084      	sub	sp, #16
 810835a:	af00      	add	r7, sp, #0
 810835c:	60f8      	str	r0, [r7, #12]
 810835e:	60b9      	str	r1, [r7, #8]
 8108360:	607a      	str	r2, [r7, #4]
 8108362:	703b      	strb	r3, [r7, #0]
      : first(std::forward<_Args1>(std::get<_Indexes1>(__tuple1))...),
 8108364:	68b8      	ldr	r0, [r7, #8]
 8108366:	f000 f828 	bl	81083ba <_ZSt3getILj0EJON19EventManagerCM4Task11EEventQueueEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS7_>
 810836a:	4603      	mov	r3, r0
 810836c:	4618      	mov	r0, r3
 810836e:	f000 f831 	bl	81083d4 <_ZSt7forwardION19EventManagerCM4Task11EEventQueueEEOT_RNSt16remove_referenceIS3_E4typeE>
 8108372:	4603      	mov	r3, r0
 8108374:	781a      	ldrb	r2, [r3, #0]
 8108376:	68fb      	ldr	r3, [r7, #12]
 8108378:	701a      	strb	r2, [r3, #0]
	second(std::forward<_Args2>(std::get<_Indexes2>(__tuple2))...)
 810837a:	68fb      	ldr	r3, [r7, #12]
 810837c:	2200      	movs	r2, #0
 810837e:	605a      	str	r2, [r3, #4]
      { }
 8108380:	68fb      	ldr	r3, [r7, #12]
 8108382:	4618      	mov	r0, r3
 8108384:	3710      	adds	r7, #16
 8108386:	46bd      	mov	sp, r7
 8108388:	bd80      	pop	{r7, pc}

0810838a <_ZSt3getILj0EJRKN19EventManagerCM4Task11EEventQueueEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 810838a:	b580      	push	{r7, lr}
 810838c:	b082      	sub	sp, #8
 810838e:	af00      	add	r7, sp, #0
 8108390:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8108392:	687b      	ldr	r3, [r7, #4]
 8108394:	4618      	mov	r0, r3
 8108396:	f000 f828 	bl	81083ea <_ZSt12__get_helperILj0ERKN19EventManagerCM4Task11EEventQueueEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 810839a:	4603      	mov	r3, r0
 810839c:	4618      	mov	r0, r3
 810839e:	3708      	adds	r7, #8
 81083a0:	46bd      	mov	sp, r7
 81083a2:	bd80      	pop	{r7, pc}

081083a4 <_ZSt7forwardIRKN19EventManagerCM4Task11EEventQueueEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 81083a4:	b480      	push	{r7}
 81083a6:	b083      	sub	sp, #12
 81083a8:	af00      	add	r7, sp, #0
 81083aa:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 81083ac:	687b      	ldr	r3, [r7, #4]
 81083ae:	4618      	mov	r0, r3
 81083b0:	370c      	adds	r7, #12
 81083b2:	46bd      	mov	sp, r7
 81083b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81083b8:	4770      	bx	lr

081083ba <_ZSt3getILj0EJON19EventManagerCM4Task11EEventQueueEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS7_>:
    get(tuple<_Elements...>& __t) noexcept
 81083ba:	b580      	push	{r7, lr}
 81083bc:	b082      	sub	sp, #8
 81083be:	af00      	add	r7, sp, #0
 81083c0:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 81083c2:	687b      	ldr	r3, [r7, #4]
 81083c4:	4618      	mov	r0, r3
 81083c6:	f000 f81c 	bl	8108402 <_ZSt12__get_helperILj0EON19EventManagerCM4Task11EEventQueueEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 81083ca:	4603      	mov	r3, r0
 81083cc:	4618      	mov	r0, r3
 81083ce:	3708      	adds	r7, #8
 81083d0:	46bd      	mov	sp, r7
 81083d2:	bd80      	pop	{r7, pc}

081083d4 <_ZSt7forwardION19EventManagerCM4Task11EEventQueueEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 81083d4:	b480      	push	{r7}
 81083d6:	b083      	sub	sp, #12
 81083d8:	af00      	add	r7, sp, #0
 81083da:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 81083dc:	687b      	ldr	r3, [r7, #4]
 81083de:	4618      	mov	r0, r3
 81083e0:	370c      	adds	r7, #12
 81083e2:	46bd      	mov	sp, r7
 81083e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81083e8:	4770      	bx	lr

081083ea <_ZSt12__get_helperILj0ERKN19EventManagerCM4Task11EEventQueueEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 81083ea:	b580      	push	{r7, lr}
 81083ec:	b082      	sub	sp, #8
 81083ee:	af00      	add	r7, sp, #0
 81083f0:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 81083f2:	6878      	ldr	r0, [r7, #4]
 81083f4:	f000 f811 	bl	810841a <_ZNSt11_Tuple_implILj0EJRKN19EventManagerCM4Task11EEventQueueEEE7_M_headERS4_>
 81083f8:	4603      	mov	r3, r0
 81083fa:	4618      	mov	r0, r3
 81083fc:	3708      	adds	r7, #8
 81083fe:	46bd      	mov	sp, r7
 8108400:	bd80      	pop	{r7, pc}

08108402 <_ZSt12__get_helperILj0EON19EventManagerCM4Task11EEventQueueEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8108402:	b580      	push	{r7, lr}
 8108404:	b082      	sub	sp, #8
 8108406:	af00      	add	r7, sp, #0
 8108408:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 810840a:	6878      	ldr	r0, [r7, #4]
 810840c:	f000 f812 	bl	8108434 <_ZNSt11_Tuple_implILj0EJON19EventManagerCM4Task11EEventQueueEEE7_M_headERS3_>
 8108410:	4603      	mov	r3, r0
 8108412:	4618      	mov	r0, r3
 8108414:	3708      	adds	r7, #8
 8108416:	46bd      	mov	sp, r7
 8108418:	bd80      	pop	{r7, pc}

0810841a <_ZNSt11_Tuple_implILj0EJRKN19EventManagerCM4Task11EEventQueueEEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 810841a:	b580      	push	{r7, lr}
 810841c:	b082      	sub	sp, #8
 810841e:	af00      	add	r7, sp, #0
 8108420:	6078      	str	r0, [r7, #4]
 8108422:	687b      	ldr	r3, [r7, #4]
 8108424:	4618      	mov	r0, r3
 8108426:	f000 f812 	bl	810844e <_ZNSt10_Head_baseILj0ERKN19EventManagerCM4Task11EEventQueueELb0EE7_M_headERS4_>
 810842a:	4603      	mov	r3, r0
 810842c:	4618      	mov	r0, r3
 810842e:	3708      	adds	r7, #8
 8108430:	46bd      	mov	sp, r7
 8108432:	bd80      	pop	{r7, pc}

08108434 <_ZNSt11_Tuple_implILj0EJON19EventManagerCM4Task11EEventQueueEEE7_M_headERS3_>:
 8108434:	b580      	push	{r7, lr}
 8108436:	b082      	sub	sp, #8
 8108438:	af00      	add	r7, sp, #0
 810843a:	6078      	str	r0, [r7, #4]
 810843c:	687b      	ldr	r3, [r7, #4]
 810843e:	4618      	mov	r0, r3
 8108440:	f000 f811 	bl	8108466 <_ZNSt10_Head_baseILj0EON19EventManagerCM4Task11EEventQueueELb0EE7_M_headERS3_>
 8108444:	4603      	mov	r3, r0
 8108446:	4618      	mov	r0, r3
 8108448:	3708      	adds	r7, #8
 810844a:	46bd      	mov	sp, r7
 810844c:	bd80      	pop	{r7, pc}

0810844e <_ZNSt10_Head_baseILj0ERKN19EventManagerCM4Task11EEventQueueELb0EE7_M_headERS4_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 810844e:	b480      	push	{r7}
 8108450:	b083      	sub	sp, #12
 8108452:	af00      	add	r7, sp, #0
 8108454:	6078      	str	r0, [r7, #4]
 8108456:	687b      	ldr	r3, [r7, #4]
 8108458:	681b      	ldr	r3, [r3, #0]
 810845a:	4618      	mov	r0, r3
 810845c:	370c      	adds	r7, #12
 810845e:	46bd      	mov	sp, r7
 8108460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108464:	4770      	bx	lr

08108466 <_ZNSt10_Head_baseILj0EON19EventManagerCM4Task11EEventQueueELb0EE7_M_headERS3_>:
 8108466:	b480      	push	{r7}
 8108468:	b083      	sub	sp, #12
 810846a:	af00      	add	r7, sp, #0
 810846c:	6078      	str	r0, [r7, #4]
 810846e:	687b      	ldr	r3, [r7, #4]
 8108470:	681b      	ldr	r3, [r3, #0]
 8108472:	4618      	mov	r0, r3
 8108474:	370c      	adds	r7, #12
 8108476:	46bd      	mov	sp, r7
 8108478:	f85d 7b04 	ldr.w	r7, [sp], #4
 810847c:	4770      	bx	lr

0810847e <_Z18StartTask_EDaemonNPv>:
#include "cm_ipc.h"

extern QueueHandle_t queueToNativeDaemon;

void StartTask_EDaemonN(void *argument)
{
 810847e:	b580      	push	{r7, lr}
 8108480:	b086      	sub	sp, #24
 8108482:	af00      	add	r7, sp, #0
 8108484:	6078      	str	r0, [r7, #4]
	ipc_start();
 8108486:	f7f8 fe27 	bl	81010d8 <ipc_start>
	IPCDaemonNativeTask IPCDaemonNativeTaskInstance;
 810848a:	f107 030c 	add.w	r3, r7, #12
 810848e:	4618      	mov	r0, r3
 8108490:	f000 f80a 	bl	81084a8 <_ZN19IPCDaemonNativeTaskC1Ev>

	for(;;)
	{
		IPCDaemonNativeTaskInstance.process();
 8108494:	f107 030c 	add.w	r3, r7, #12
 8108498:	4618      	mov	r0, r3
 810849a:	f000 f8b8 	bl	810860e <_ZN19IPCDaemonNativeTask7processEv>
		osDelay(1);
 810849e:	2001      	movs	r0, #1
 81084a0:	f00a fb15 	bl	8112ace <osDelay>
		IPCDaemonNativeTaskInstance.process();
 81084a4:	bf00      	nop
 81084a6:	e7f5      	b.n	8108494 <_Z18StartTask_EDaemonNPv+0x16>

081084a8 <_ZN19IPCDaemonNativeTaskC1Ev>:
	}
}

IPCDaemonNativeTask::IPCDaemonNativeTask() : event_bus(EventBus(queueToNativeDaemon, EVENT_CLIENT_DAEMON_NATIVE)) {}
 81084a8:	b580      	push	{r7, lr}
 81084aa:	b082      	sub	sp, #8
 81084ac:	af00      	add	r7, sp, #0
 81084ae:	6078      	str	r0, [r7, #4]
 81084b0:	687b      	ldr	r3, [r7, #4]
 81084b2:	4a05      	ldr	r2, [pc, #20]	@ (81084c8 <_ZN19IPCDaemonNativeTaskC1Ev+0x20>)
 81084b4:	6811      	ldr	r1, [r2, #0]
 81084b6:	2207      	movs	r2, #7
 81084b8:	4618      	mov	r0, r3
 81084ba:	f7fd fbc7 	bl	8105c4c <_ZN8EventBusC1EP15QueueDefinition12EEventClient>
 81084be:	687b      	ldr	r3, [r7, #4]
 81084c0:	4618      	mov	r0, r3
 81084c2:	3708      	adds	r7, #8
 81084c4:	46bd      	mov	sp, r7
 81084c6:	bd80      	pop	{r7, pc}
 81084c8:	100001d0 	.word	0x100001d0

081084cc <_ZN19IPCDaemonNativeTask7OnEventE10EEventType12UMessageData12EEventClientS2_>:

void IPCDaemonNativeTask::OnEvent(EEventType event, UMessageData msg, EEventClient eventSender, EEventClient eventReceiver)
{
 81084cc:	b082      	sub	sp, #8
 81084ce:	b5f0      	push	{r4, r5, r6, r7, lr}
 81084d0:	b08f      	sub	sp, #60	@ 0x3c
 81084d2:	af04      	add	r7, sp, #16
 81084d4:	6078      	str	r0, [r7, #4]
 81084d6:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 81084da:	e880 000c 	stmia.w	r0, {r2, r3}
 81084de:	460b      	mov	r3, r1
 81084e0:	70fb      	strb	r3, [r7, #3]
	switch(eventReceiver)
 81084e2:	f897 3058 	ldrb.w	r3, [r7, #88]	@ 0x58
 81084e6:	2b00      	cmp	r3, #0
 81084e8:	d005      	beq.n	81084f6 <_ZN19IPCDaemonNativeTask7OnEventE10EEventType12UMessageData12EEventClientS2_+0x2a>
 81084ea:	2b00      	cmp	r3, #0
 81084ec:	db33      	blt.n	8108556 <_ZN19IPCDaemonNativeTask7OnEventE10EEventType12UMessageData12EEventClientS2_+0x8a>
 81084ee:	3b03      	subs	r3, #3
 81084f0:	2b01      	cmp	r3, #1
 81084f2:	d830      	bhi.n	8108556 <_ZN19IPCDaemonNativeTask7OnEventE10EEventType12UMessageData12EEventClientS2_+0x8a>
 81084f4:	e01c      	b.n	8108530 <_ZN19IPCDaemonNativeTask7OnEventE10EEventType12UMessageData12EEventClientS2_+0x64>
	{
	// if recipient is on CM7 side, then send message through IPC.
	case EVENT_CLIENT_FRONTEND:
	{
		SMessage sMsg;
		sMsg.event_type = event;
 81084f6:	78fb      	ldrb	r3, [r7, #3]
 81084f8:	723b      	strb	r3, [r7, #8]
		sMsg.message_data = msg;
 81084fa:	f107 040c 	add.w	r4, r7, #12
 81084fe:	f107 0540 	add.w	r5, r7, #64	@ 0x40
 8108502:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8108504:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8108506:	682b      	ldr	r3, [r5, #0]
 8108508:	6023      	str	r3, [r4, #0]
		sMsg.event_sender = eventSender;
 810850a:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 810850e:	f887 3020 	strb.w	r3, [r7, #32]
		sMsg.event_receiver = eventReceiver;
 8108512:	f897 3058 	ldrb.w	r3, [r7, #88]	@ 0x58
 8108516:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
		size_t len = sizeof(sMsg);
 810851a:	231c      	movs	r3, #28
 810851c:	627b      	str	r3, [r7, #36]	@ 0x24
		ipc_sendmsg(&sMsg, len, 1000);
 810851e:	f107 0308 	add.w	r3, r7, #8
 8108522:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8108526:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8108528:	4618      	mov	r0, r3
 810852a:	f7f8 fe5b 	bl	81011e4 <ipc_sendmsg>
		break;
 810852e:	e013      	b.n	8108558 <_ZN19IPCDaemonNativeTask7OnEventE10EEventType12UMessageData12EEventClientS2_+0x8c>
	}
	// if recipient is on CM4 side, then forward to event manager.
	case EVENT_CLIENT_ETHERNET_CONNECTION_MANAGER:
	case EVENT_CLIENT_THERMOMETER:
		event_bus.send(event, msg, eventReceiver);
 8108530:	687d      	ldr	r5, [r7, #4]
 8108532:	78fe      	ldrb	r6, [r7, #3]
 8108534:	f897 3058 	ldrb.w	r3, [r7, #88]	@ 0x58
 8108538:	9303      	str	r3, [sp, #12]
 810853a:	466c      	mov	r4, sp
 810853c:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8108540:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8108544:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8108548:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 810854c:	cb0c      	ldmia	r3, {r2, r3}
 810854e:	4631      	mov	r1, r6
 8108550:	4628      	mov	r0, r5
 8108552:	f7fd fb95 	bl	8105c80 <_ZN8EventBus4sendE10EEventType12UMessageData12EEventClient>
	default:
		break;;
 8108556:	bf00      	nop
	}
}
 8108558:	bf00      	nop
 810855a:	372c      	adds	r7, #44	@ 0x2c
 810855c:	46bd      	mov	sp, r7
 810855e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8108562:	b002      	add	sp, #8
 8108564:	4770      	bx	lr

08108566 <_ZN19IPCDaemonNativeTask17processIpcReceiveEv>:

void IPCDaemonNativeTask::processIpcReceive()
{
 8108566:	b5b0      	push	{r4, r5, r7, lr}
 8108568:	b092      	sub	sp, #72	@ 0x48
 810856a:	af06      	add	r7, sp, #24
 810856c:	6078      	str	r0, [r7, #4]
	SMessage sMsg;
	size_t len = sizeof(sMsg);
 810856e:	231c      	movs	r3, #28
 8108570:	62fb      	str	r3, [r7, #44]	@ 0x2c
	size_t ret = ipc_recvmsg(&sMsg, len, 0);
 8108572:	f107 030c 	add.w	r3, r7, #12
 8108576:	2200      	movs	r2, #0
 8108578:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 810857a:	4618      	mov	r0, r3
 810857c:	f7f8 fe5a 	bl	8101234 <ipc_recvmsg>
 8108580:	62b8      	str	r0, [r7, #40]	@ 0x28
	if(ret == len)
 8108582:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8108584:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8108586:	429a      	cmp	r2, r3
 8108588:	d114      	bne.n	81085b4 <_ZN19IPCDaemonNativeTask17processIpcReceiveEv+0x4e>
	{
		OnEvent(sMsg.event_type, sMsg.message_data, sMsg.event_sender, sMsg.event_receiver);
 810858a:	7b3d      	ldrb	r5, [r7, #12]
 810858c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8108590:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 8108594:	9204      	str	r2, [sp, #16]
 8108596:	9303      	str	r3, [sp, #12]
 8108598:	466c      	mov	r4, sp
 810859a:	f107 0318 	add.w	r3, r7, #24
 810859e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 81085a2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 81085a6:	f107 0310 	add.w	r3, r7, #16
 81085aa:	cb0c      	ldmia	r3, {r2, r3}
 81085ac:	4629      	mov	r1, r5
 81085ae:	6878      	ldr	r0, [r7, #4]
 81085b0:	f7ff ff8c 	bl	81084cc <_ZN19IPCDaemonNativeTask7OnEventE10EEventType12UMessageData12EEventClientS2_>
	}
}
 81085b4:	bf00      	nop
 81085b6:	3730      	adds	r7, #48	@ 0x30
 81085b8:	46bd      	mov	sp, r7
 81085ba:	bdb0      	pop	{r4, r5, r7, pc}

081085bc <_ZZN19IPCDaemonNativeTask7processEvENKUl10EEventType12UMessageData12EEventClientS2_E_clES0_S1_S2_S2_>:

void IPCDaemonNativeTask::process()
{
	processIpcReceive();
	event_bus.receive([this](EEventType event, UMessageData msg, EEventClient eventSender, EEventClient eventReceiver)
 81085bc:	b082      	sub	sp, #8
 81085be:	b5f0      	push	{r4, r5, r6, r7, lr}
 81085c0:	b089      	sub	sp, #36	@ 0x24
 81085c2:	af06      	add	r7, sp, #24
 81085c4:	6078      	str	r0, [r7, #4]
 81085c6:	f107 0020 	add.w	r0, r7, #32
 81085ca:	e880 000c 	stmia.w	r0, {r2, r3}
 81085ce:	460b      	mov	r3, r1
 81085d0:	70fb      	strb	r3, [r7, #3]
 81085d2:	687b      	ldr	r3, [r7, #4]
 81085d4:	681d      	ldr	r5, [r3, #0]
                      {this->OnEvent(event, msg, eventSender, eventReceiver);});
 81085d6:	78fe      	ldrb	r6, [r7, #3]
 81085d8:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 81085dc:	9304      	str	r3, [sp, #16]
 81085de:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 81085e2:	9303      	str	r3, [sp, #12]
 81085e4:	466c      	mov	r4, sp
 81085e6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 81085ea:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 81085ee:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 81085f2:	f107 0320 	add.w	r3, r7, #32
 81085f6:	cb0c      	ldmia	r3, {r2, r3}
 81085f8:	4631      	mov	r1, r6
 81085fa:	4628      	mov	r0, r5
 81085fc:	f7ff ff66 	bl	81084cc <_ZN19IPCDaemonNativeTask7OnEventE10EEventType12UMessageData12EEventClientS2_>
 8108600:	bf00      	nop
 8108602:	370c      	adds	r7, #12
 8108604:	46bd      	mov	sp, r7
 8108606:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 810860a:	b002      	add	sp, #8
 810860c:	4770      	bx	lr

0810860e <_ZN19IPCDaemonNativeTask7processEv>:
{
 810860e:	b590      	push	{r4, r7, lr}
 8108610:	b089      	sub	sp, #36	@ 0x24
 8108612:	af00      	add	r7, sp, #0
 8108614:	6078      	str	r0, [r7, #4]
	processIpcReceive();
 8108616:	6878      	ldr	r0, [r7, #4]
 8108618:	f7ff ffa5 	bl	8108566 <_ZN19IPCDaemonNativeTask17processIpcReceiveEv>
	event_bus.receive([this](EEventType event, UMessageData msg, EEventClient eventSender, EEventClient eventReceiver)
 810861c:	687c      	ldr	r4, [r7, #4]
 810861e:	687b      	ldr	r3, [r7, #4]
 8108620:	61fb      	str	r3, [r7, #28]
 8108622:	f107 021c 	add.w	r2, r7, #28
 8108626:	f107 030c 	add.w	r3, r7, #12
 810862a:	4611      	mov	r1, r2
 810862c:	4618      	mov	r0, r3
 810862e:	f000 f80f 	bl	8108650 <_ZNSt8functionIFv10EEventType12UMessageData12EEventClientS2_EEC1IZN19IPCDaemonNativeTask7processEvEUlS0_S1_S2_S2_E_vEEOT_>
 8108632:	f107 030c 	add.w	r3, r7, #12
 8108636:	4619      	mov	r1, r3
 8108638:	4620      	mov	r0, r4
 810863a:	f7fd fb5a 	bl	8105cf2 <_ZN8EventBus7receiveESt8functionIFv10EEventType12UMessageData12EEventClientS3_EE>
 810863e:	f107 030c 	add.w	r3, r7, #12
 8108642:	4618      	mov	r0, r3
 8108644:	f7fc fd7c 	bl	8105140 <_ZNSt8functionIFv10EEventType12UMessageData12EEventClientS2_EED1Ev>
}
 8108648:	bf00      	nop
 810864a:	3724      	adds	r7, #36	@ 0x24
 810864c:	46bd      	mov	sp, r7
 810864e:	bd90      	pop	{r4, r7, pc}

08108650 <_ZNSt8functionIFv10EEventType12UMessageData12EEventClientS2_EEC1IZN19IPCDaemonNativeTask7processEvEUlS0_S1_S2_S2_E_vEEOT_>:
	function(_Functor&& __f)
 8108650:	b590      	push	{r4, r7, lr}
 8108652:	b083      	sub	sp, #12
 8108654:	af00      	add	r7, sp, #0
 8108656:	6078      	str	r0, [r7, #4]
 8108658:	6039      	str	r1, [r7, #0]
	: _Function_base()
 810865a:	687b      	ldr	r3, [r7, #4]
 810865c:	461a      	mov	r2, r3
 810865e:	2300      	movs	r3, #0
 8108660:	6013      	str	r3, [r2, #0]
 8108662:	6053      	str	r3, [r2, #4]
 8108664:	6093      	str	r3, [r2, #8]
 8108666:	687b      	ldr	r3, [r7, #4]
 8108668:	4618      	mov	r0, r3
 810866a:	f7fd f852 	bl	8105712 <_ZNSt14_Function_baseC1Ev>
 810866e:	687b      	ldr	r3, [r7, #4]
 8108670:	2200      	movs	r2, #0
 8108672:	60da      	str	r2, [r3, #12]
	  if (_My_handler::_M_not_empty_function(__f))
 8108674:	6838      	ldr	r0, [r7, #0]
 8108676:	f000 f81b 	bl	81086b0 <_ZNSt14_Function_base13_Base_managerIZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E21_M_not_empty_functionIS5_EEbRKT_>
 810867a:	4603      	mov	r3, r0
 810867c:	2b00      	cmp	r3, #0
 810867e:	d00e      	beq.n	810869e <_ZNSt8functionIFv10EEventType12UMessageData12EEventClientS2_EEC1IZN19IPCDaemonNativeTask7processEvEUlS0_S1_S2_S2_E_vEEOT_+0x4e>
	      _My_handler::_M_init_functor(_M_functor,
 8108680:	687c      	ldr	r4, [r7, #4]
 8108682:	6838      	ldr	r0, [r7, #0]
 8108684:	f000 f81f 	bl	81086c6 <_ZSt7forwardIZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS3_E_EOT_RNSt16remove_referenceIS5_E4typeE>
 8108688:	4603      	mov	r3, r0
 810868a:	4619      	mov	r1, r3
 810868c:	4620      	mov	r0, r4
 810868e:	f000 f825 	bl	81086dc <_ZNSt14_Function_base13_Base_managerIZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E15_M_init_functorIS5_EEvRSt9_Any_dataOT_>
	      _M_invoker = &_My_handler::_M_invoke;
 8108692:	687b      	ldr	r3, [r7, #4]
 8108694:	4a04      	ldr	r2, [pc, #16]	@ (81086a8 <_ZNSt8functionIFv10EEventType12UMessageData12EEventClientS2_EEC1IZN19IPCDaemonNativeTask7processEvEUlS0_S1_S2_S2_E_vEEOT_+0x58>)
 8108696:	60da      	str	r2, [r3, #12]
	      _M_manager = &_My_handler::_M_manager;
 8108698:	687b      	ldr	r3, [r7, #4]
 810869a:	4a04      	ldr	r2, [pc, #16]	@ (81086ac <_ZNSt8functionIFv10EEventType12UMessageData12EEventClientS2_EEC1IZN19IPCDaemonNativeTask7processEvEUlS0_S1_S2_S2_E_vEEOT_+0x5c>)
 810869c:	609a      	str	r2, [r3, #8]
	}
 810869e:	687b      	ldr	r3, [r7, #4]
 81086a0:	4618      	mov	r0, r3
 81086a2:	370c      	adds	r7, #12
 81086a4:	46bd      	mov	sp, r7
 81086a6:	bd90      	pop	{r4, r7, pc}
 81086a8:	08108701 	.word	0x08108701
 81086ac:	08108751 	.word	0x08108751

081086b0 <_ZNSt14_Function_base13_Base_managerIZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E21_M_not_empty_functionIS5_EEbRKT_>:
	  _M_not_empty_function(const _Tp&) noexcept
 81086b0:	b480      	push	{r7}
 81086b2:	b083      	sub	sp, #12
 81086b4:	af00      	add	r7, sp, #0
 81086b6:	6078      	str	r0, [r7, #4]
	  { return true; }
 81086b8:	2301      	movs	r3, #1
 81086ba:	4618      	mov	r0, r3
 81086bc:	370c      	adds	r7, #12
 81086be:	46bd      	mov	sp, r7
 81086c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81086c4:	4770      	bx	lr

081086c6 <_ZSt7forwardIZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS3_E_EOT_RNSt16remove_referenceIS5_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 81086c6:	b480      	push	{r7}
 81086c8:	b083      	sub	sp, #12
 81086ca:	af00      	add	r7, sp, #0
 81086cc:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 81086ce:	687b      	ldr	r3, [r7, #4]
 81086d0:	4618      	mov	r0, r3
 81086d2:	370c      	adds	r7, #12
 81086d4:	46bd      	mov	sp, r7
 81086d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81086da:	4770      	bx	lr

081086dc <_ZNSt14_Function_base13_Base_managerIZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E15_M_init_functorIS5_EEvRSt9_Any_dataOT_>:
	  _M_init_functor(_Any_data& __functor, _Fn&& __f)
 81086dc:	b590      	push	{r4, r7, lr}
 81086de:	b083      	sub	sp, #12
 81086e0:	af00      	add	r7, sp, #0
 81086e2:	6078      	str	r0, [r7, #4]
 81086e4:	6039      	str	r1, [r7, #0]
	    _M_create(__functor, std::forward<_Fn>(__f), _Local_storage());
 81086e6:	6838      	ldr	r0, [r7, #0]
 81086e8:	f7ff ffed 	bl	81086c6 <_ZSt7forwardIZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS3_E_EOT_RNSt16remove_referenceIS5_E4typeE>
 81086ec:	4603      	mov	r3, r0
 81086ee:	4622      	mov	r2, r4
 81086f0:	4619      	mov	r1, r3
 81086f2:	6878      	ldr	r0, [r7, #4]
 81086f4:	f000 f84b 	bl	810878e <_ZNSt14_Function_base13_Base_managerIZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E9_M_createIS5_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>
	  }
 81086f8:	bf00      	nop
 81086fa:	370c      	adds	r7, #12
 81086fc:	46bd      	mov	sp, r7
 81086fe:	bd90      	pop	{r4, r7, pc}

08108700 <_ZNSt17_Function_handlerIFv10EEventType12UMessageData12EEventClientS2_EZN19IPCDaemonNativeTask7processEvEUlS0_S1_S2_S2_E_E9_M_invokeERKSt9_Any_dataOS0_OS1_OS2_SC_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 8108700:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8108704:	b086      	sub	sp, #24
 8108706:	af02      	add	r7, sp, #8
 8108708:	60f8      	str	r0, [r7, #12]
 810870a:	60b9      	str	r1, [r7, #8]
 810870c:	607a      	str	r2, [r7, #4]
 810870e:	603b      	str	r3, [r7, #0]
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
 8108710:	68f8      	ldr	r0, [r7, #12]
 8108712:	f000 f855 	bl	81087c0 <_ZNSt14_Function_base13_Base_managerIZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E14_M_get_pointerERKSt9_Any_data>
 8108716:	4604      	mov	r4, r0
 8108718:	68b8      	ldr	r0, [r7, #8]
 810871a:	f7fd f8d5 	bl	81058c8 <_ZSt7forwardI10EEventTypeEOT_RNSt16remove_referenceIS1_E4typeE>
 810871e:	4605      	mov	r5, r0
 8108720:	6878      	ldr	r0, [r7, #4]
 8108722:	f7fd f8dc 	bl	81058de <_ZSt7forwardI12UMessageDataEOT_RNSt16remove_referenceIS1_E4typeE>
 8108726:	4606      	mov	r6, r0
 8108728:	6838      	ldr	r0, [r7, #0]
 810872a:	f7fd f8e3 	bl	81058f4 <_ZSt7forwardI12EEventClientEOT_RNSt16remove_referenceIS1_E4typeE>
 810872e:	4680      	mov	r8, r0
 8108730:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8108732:	f7fd f8df 	bl	81058f4 <_ZSt7forwardI12EEventClientEOT_RNSt16remove_referenceIS1_E4typeE>
 8108736:	4603      	mov	r3, r0
 8108738:	9300      	str	r3, [sp, #0]
 810873a:	4643      	mov	r3, r8
 810873c:	4632      	mov	r2, r6
 810873e:	4629      	mov	r1, r5
 8108740:	4620      	mov	r0, r4
 8108742:	f000 f84d 	bl	81087e0 <_ZSt10__invoke_rIvRZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS3_E_JS1_S2_S3_S3_EENSt9enable_ifIX16is_invocable_r_vIT_T0_DpT1_EES7_E4typeEOS8_DpOS9_>
				     std::forward<_ArgTypes>(__args)...);
 8108746:	bf00      	nop
      }
 8108748:	3710      	adds	r7, #16
 810874a:	46bd      	mov	sp, r7
 810874c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08108750 <_ZNSt17_Function_handlerIFv10EEventType12UMessageData12EEventClientS2_EZN19IPCDaemonNativeTask7processEvEUlS0_S1_S2_S2_E_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 8108750:	b590      	push	{r4, r7, lr}
 8108752:	b085      	sub	sp, #20
 8108754:	af00      	add	r7, sp, #0
 8108756:	60f8      	str	r0, [r7, #12]
 8108758:	60b9      	str	r1, [r7, #8]
 810875a:	4613      	mov	r3, r2
 810875c:	71fb      	strb	r3, [r7, #7]
	switch (__op)
 810875e:	79fb      	ldrb	r3, [r7, #7]
 8108760:	2b01      	cmp	r3, #1
 8108762:	d109      	bne.n	8108778 <_ZNSt17_Function_handlerIFv10EEventType12UMessageData12EEventClientS2_EZN19IPCDaemonNativeTask7processEvEUlS0_S1_S2_S2_E_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x28>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 8108764:	68b8      	ldr	r0, [r7, #8]
 8108766:	f000 f82b 	bl	81087c0 <_ZNSt14_Function_base13_Base_managerIZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E14_M_get_pointerERKSt9_Any_data>
 810876a:	4604      	mov	r4, r0
 810876c:	68f8      	ldr	r0, [r7, #12]
 810876e:	f000 f860 	bl	8108832 <_ZNSt9_Any_data9_M_accessIPZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_EERT_v>
 8108772:	4603      	mov	r3, r0
 8108774:	601c      	str	r4, [r3, #0]
	    break;
 8108776:	e005      	b.n	8108784 <_ZNSt17_Function_handlerIFv10EEventType12UMessageData12EEventClientS2_EZN19IPCDaemonNativeTask7processEvEUlS0_S1_S2_S2_E_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x34>
	    _Base::_M_manager(__dest, __source, __op);
 8108778:	79fb      	ldrb	r3, [r7, #7]
 810877a:	461a      	mov	r2, r3
 810877c:	68b9      	ldr	r1, [r7, #8]
 810877e:	68f8      	ldr	r0, [r7, #12]
 8108780:	f000 f864 	bl	810884c <_ZNSt14_Function_base13_Base_managerIZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation>
	return false;
 8108784:	2300      	movs	r3, #0
      }
 8108786:	4618      	mov	r0, r3
 8108788:	3714      	adds	r7, #20
 810878a:	46bd      	mov	sp, r7
 810878c:	bd90      	pop	{r4, r7, pc}

0810878e <_ZNSt14_Function_base13_Base_managerIZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E9_M_createIS5_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>:
	  _M_create(_Any_data& __dest, _Fn&& __f, true_type)
 810878e:	b590      	push	{r4, r7, lr}
 8108790:	b085      	sub	sp, #20
 8108792:	af00      	add	r7, sp, #0
 8108794:	60f8      	str	r0, [r7, #12]
 8108796:	60b9      	str	r1, [r7, #8]
 8108798:	713a      	strb	r2, [r7, #4]
	    ::new (__dest._M_access()) _Functor(std::forward<_Fn>(__f));
 810879a:	68f8      	ldr	r0, [r7, #12]
 810879c:	f7fc fbf4 	bl	8104f88 <_ZNSt9_Any_data9_M_accessEv>
 81087a0:	4603      	mov	r3, r0
 81087a2:	4619      	mov	r1, r3
 81087a4:	2004      	movs	r0, #4
 81087a6:	f7f8 fd6f 	bl	8101288 <_ZnwjPv>
 81087aa:	4604      	mov	r4, r0
 81087ac:	68b8      	ldr	r0, [r7, #8]
 81087ae:	f7ff ff8a 	bl	81086c6 <_ZSt7forwardIZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS3_E_EOT_RNSt16remove_referenceIS5_E4typeE>
 81087b2:	4603      	mov	r3, r0
 81087b4:	681b      	ldr	r3, [r3, #0]
 81087b6:	6023      	str	r3, [r4, #0]
	  }
 81087b8:	bf00      	nop
 81087ba:	3714      	adds	r7, #20
 81087bc:	46bd      	mov	sp, r7
 81087be:	bd90      	pop	{r4, r7, pc}

081087c0 <_ZNSt14_Function_base13_Base_managerIZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source) noexcept
 81087c0:	b580      	push	{r7, lr}
 81087c2:	b084      	sub	sp, #16
 81087c4:	af00      	add	r7, sp, #0
 81087c6:	6078      	str	r0, [r7, #4]
	      const _Functor& __f = __source._M_access<_Functor>();
 81087c8:	6878      	ldr	r0, [r7, #4]
 81087ca:	f000 f879 	bl	81088c0 <_ZNKSt9_Any_data9_M_accessIZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_EERKT_v>
 81087ce:	60f8      	str	r0, [r7, #12]
	      return const_cast<_Functor*>(std::__addressof(__f));
 81087d0:	68f8      	ldr	r0, [r7, #12]
 81087d2:	f000 f881 	bl	81088d8 <_ZSt11__addressofIKZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS3_E_EPT_RS6_>
 81087d6:	4603      	mov	r3, r0
	}
 81087d8:	4618      	mov	r0, r3
 81087da:	3710      	adds	r7, #16
 81087dc:	46bd      	mov	sp, r7
 81087de:	bd80      	pop	{r7, pc}

081087e0 <_ZSt10__invoke_rIvRZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS3_E_JS1_S2_S3_S3_EENSt9enable_ifIX16is_invocable_r_vIT_T0_DpT1_EES7_E4typeEOS8_DpOS9_>:
    __invoke_r(_Callable&& __fn, _Args&&... __args)
 81087e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 81087e4:	b087      	sub	sp, #28
 81087e6:	af02      	add	r7, sp, #8
 81087e8:	60f8      	str	r0, [r7, #12]
 81087ea:	60b9      	str	r1, [r7, #8]
 81087ec:	607a      	str	r2, [r7, #4]
 81087ee:	603b      	str	r3, [r7, #0]
	std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 81087f0:	68f8      	ldr	r0, [r7, #12]
 81087f2:	f000 f87c 	bl	81088ee <_ZSt7forwardIRZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS3_E_EOT_RNSt16remove_referenceIS6_E4typeE>
 81087f6:	4605      	mov	r5, r0
 81087f8:	68b8      	ldr	r0, [r7, #8]
 81087fa:	f7fd f865 	bl	81058c8 <_ZSt7forwardI10EEventTypeEOT_RNSt16remove_referenceIS1_E4typeE>
 81087fe:	4606      	mov	r6, r0
 8108800:	6878      	ldr	r0, [r7, #4]
 8108802:	f7fd f86c 	bl	81058de <_ZSt7forwardI12UMessageDataEOT_RNSt16remove_referenceIS1_E4typeE>
 8108806:	4680      	mov	r8, r0
 8108808:	6838      	ldr	r0, [r7, #0]
 810880a:	f7fd f873 	bl	81058f4 <_ZSt7forwardI12EEventClientEOT_RNSt16remove_referenceIS1_E4typeE>
 810880e:	4604      	mov	r4, r0
 8108810:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8108812:	f7fd f86f 	bl	81058f4 <_ZSt7forwardI12EEventClientEOT_RNSt16remove_referenceIS1_E4typeE>
 8108816:	4603      	mov	r3, r0
 8108818:	9301      	str	r3, [sp, #4]
 810881a:	9400      	str	r4, [sp, #0]
 810881c:	4643      	mov	r3, r8
 810881e:	4632      	mov	r2, r6
 8108820:	4629      	mov	r1, r5
 8108822:	4648      	mov	r0, r9
 8108824:	f000 f86e 	bl	8108904 <_ZSt13__invoke_implIvRZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS3_E_JS1_S2_S3_S3_EET_St14__invoke_otherOT0_DpOT1_>
    }
 8108828:	bf00      	nop
 810882a:	3714      	adds	r7, #20
 810882c:	46bd      	mov	sp, r7
 810882e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08108832 <_ZNSt9_Any_data9_M_accessIPZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_EERT_v>:
      _M_access() noexcept
 8108832:	b580      	push	{r7, lr}
 8108834:	b082      	sub	sp, #8
 8108836:	af00      	add	r7, sp, #0
 8108838:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 810883a:	6878      	ldr	r0, [r7, #4]
 810883c:	f7fc fba4 	bl	8104f88 <_ZNSt9_Any_data9_M_accessEv>
 8108840:	4603      	mov	r3, r0
 8108842:	4618      	mov	r0, r3
 8108844:	3708      	adds	r7, #8
 8108846:	46bd      	mov	sp, r7
 8108848:	bd80      	pop	{r7, pc}
	...

0810884c <_ZNSt14_Function_base13_Base_managerIZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 810884c:	b590      	push	{r4, r7, lr}
 810884e:	b085      	sub	sp, #20
 8108850:	af00      	add	r7, sp, #0
 8108852:	60f8      	str	r0, [r7, #12]
 8108854:	60b9      	str	r1, [r7, #8]
 8108856:	4613      	mov	r3, r2
 8108858:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
 810885a:	79fb      	ldrb	r3, [r7, #7]
 810885c:	2b03      	cmp	r3, #3
 810885e:	d82a      	bhi.n	81088b6 <_ZNSt14_Function_base13_Base_managerIZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x6a>
 8108860:	a201      	add	r2, pc, #4	@ (adr r2, 8108868 <_ZNSt14_Function_base13_Base_managerIZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x1c>)
 8108862:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8108866:	bf00      	nop
 8108868:	08108879 	.word	0x08108879
 810886c:	08108887 	.word	0x08108887
 8108870:	0810889b 	.word	0x0810889b
 8108874:	081088ad 	.word	0x081088ad
	      __dest._M_access<const type_info*>() = nullptr;
 8108878:	68f8      	ldr	r0, [r7, #12]
 810887a:	f7fd f90a 	bl	8105a92 <_ZNSt9_Any_data9_M_accessIPKSt9type_infoEERT_v>
 810887e:	4603      	mov	r3, r0
 8108880:	2200      	movs	r2, #0
 8108882:	601a      	str	r2, [r3, #0]
	      break;
 8108884:	e017      	b.n	81088b6 <_ZNSt14_Function_base13_Base_managerIZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x6a>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 8108886:	68b8      	ldr	r0, [r7, #8]
 8108888:	f7ff ff9a 	bl	81087c0 <_ZNSt14_Function_base13_Base_managerIZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E14_M_get_pointerERKSt9_Any_data>
 810888c:	4604      	mov	r4, r0
 810888e:	68f8      	ldr	r0, [r7, #12]
 8108890:	f7ff ffcf 	bl	8108832 <_ZNSt9_Any_data9_M_accessIPZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_EERT_v>
 8108894:	4603      	mov	r3, r0
 8108896:	601c      	str	r4, [r3, #0]
	      break;
 8108898:	e00d      	b.n	81088b6 <_ZNSt14_Function_base13_Base_managerIZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x6a>
		  *const_cast<const _Functor*>(_M_get_pointer(__source)));
 810889a:	68b8      	ldr	r0, [r7, #8]
 810889c:	f7ff ff90 	bl	81087c0 <_ZNSt14_Function_base13_Base_managerIZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E14_M_get_pointerERKSt9_Any_data>
 81088a0:	4603      	mov	r3, r0
	      _M_init_functor(__dest,
 81088a2:	4619      	mov	r1, r3
 81088a4:	68f8      	ldr	r0, [r7, #12]
 81088a6:	f000 f860 	bl	810896a <_ZNSt14_Function_base13_Base_managerIZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E15_M_init_functorIRKS5_EEvRSt9_Any_dataOT_>
	      break;
 81088aa:	e004      	b.n	81088b6 <_ZNSt14_Function_base13_Base_managerIZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x6a>
	      _M_destroy(__dest, _Local_storage());
 81088ac:	4621      	mov	r1, r4
 81088ae:	68f8      	ldr	r0, [r7, #12]
 81088b0:	f000 f86d 	bl	810898e <_ZNSt14_Function_base13_Base_managerIZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>
	      break;
 81088b4:	bf00      	nop
	  return false;
 81088b6:	2300      	movs	r3, #0
	}
 81088b8:	4618      	mov	r0, r3
 81088ba:	3714      	adds	r7, #20
 81088bc:	46bd      	mov	sp, r7
 81088be:	bd90      	pop	{r4, r7, pc}

081088c0 <_ZNKSt9_Any_data9_M_accessIZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_EERKT_v>:
      _M_access() const noexcept
 81088c0:	b580      	push	{r7, lr}
 81088c2:	b082      	sub	sp, #8
 81088c4:	af00      	add	r7, sp, #0
 81088c6:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 81088c8:	6878      	ldr	r0, [r7, #4]
 81088ca:	f7fc fb68 	bl	8104f9e <_ZNKSt9_Any_data9_M_accessEv>
 81088ce:	4603      	mov	r3, r0
 81088d0:	4618      	mov	r0, r3
 81088d2:	3708      	adds	r7, #8
 81088d4:	46bd      	mov	sp, r7
 81088d6:	bd80      	pop	{r7, pc}

081088d8 <_ZSt11__addressofIKZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS3_E_EPT_RS6_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 81088d8:	b480      	push	{r7}
 81088da:	b083      	sub	sp, #12
 81088dc:	af00      	add	r7, sp, #0
 81088de:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 81088e0:	687b      	ldr	r3, [r7, #4]
 81088e2:	4618      	mov	r0, r3
 81088e4:	370c      	adds	r7, #12
 81088e6:	46bd      	mov	sp, r7
 81088e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81088ec:	4770      	bx	lr

081088ee <_ZSt7forwardIRZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS3_E_EOT_RNSt16remove_referenceIS6_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 81088ee:	b480      	push	{r7}
 81088f0:	b083      	sub	sp, #12
 81088f2:	af00      	add	r7, sp, #0
 81088f4:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 81088f6:	687b      	ldr	r3, [r7, #4]
 81088f8:	4618      	mov	r0, r3
 81088fa:	370c      	adds	r7, #12
 81088fc:	46bd      	mov	sp, r7
 81088fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108902:	4770      	bx	lr

08108904 <_ZSt13__invoke_implIvRZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS3_E_JS1_S2_S3_S3_EET_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 8108904:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8108908:	b08a      	sub	sp, #40	@ 0x28
 810890a:	af06      	add	r7, sp, #24
 810890c:	7338      	strb	r0, [r7, #12]
 810890e:	60b9      	str	r1, [r7, #8]
 8108910:	607a      	str	r2, [r7, #4]
 8108912:	603b      	str	r3, [r7, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 8108914:	68b8      	ldr	r0, [r7, #8]
 8108916:	f7ff ffea 	bl	81088ee <_ZSt7forwardIRZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS3_E_EOT_RNSt16remove_referenceIS6_E4typeE>
 810891a:	4680      	mov	r8, r0
 810891c:	6878      	ldr	r0, [r7, #4]
 810891e:	f7fc ffd3 	bl	81058c8 <_ZSt7forwardI10EEventTypeEOT_RNSt16remove_referenceIS1_E4typeE>
 8108922:	4603      	mov	r3, r0
 8108924:	781e      	ldrb	r6, [r3, #0]
 8108926:	6838      	ldr	r0, [r7, #0]
 8108928:	f7fc ffd9 	bl	81058de <_ZSt7forwardI12UMessageDataEOT_RNSt16remove_referenceIS1_E4typeE>
 810892c:	4604      	mov	r4, r0
 810892e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8108930:	f7fc ffe0 	bl	81058f4 <_ZSt7forwardI12EEventClientEOT_RNSt16remove_referenceIS1_E4typeE>
 8108934:	4603      	mov	r3, r0
 8108936:	781d      	ldrb	r5, [r3, #0]
 8108938:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 810893a:	f7fc ffdb 	bl	81058f4 <_ZSt7forwardI12EEventClientEOT_RNSt16remove_referenceIS1_E4typeE>
 810893e:	4603      	mov	r3, r0
 8108940:	781b      	ldrb	r3, [r3, #0]
 8108942:	9304      	str	r3, [sp, #16]
 8108944:	9503      	str	r5, [sp, #12]
 8108946:	466d      	mov	r5, sp
 8108948:	f104 0308 	add.w	r3, r4, #8
 810894c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8108950:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8108954:	e894 000c 	ldmia.w	r4, {r2, r3}
 8108958:	4631      	mov	r1, r6
 810895a:	4640      	mov	r0, r8
 810895c:	f7ff fe2e 	bl	81085bc <_ZZN19IPCDaemonNativeTask7processEvENKUl10EEventType12UMessageData12EEventClientS2_E_clES0_S1_S2_S2_>
 8108960:	bf00      	nop
 8108962:	3710      	adds	r7, #16
 8108964:	46bd      	mov	sp, r7
 8108966:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0810896a <_ZNSt14_Function_base13_Base_managerIZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E15_M_init_functorIRKS5_EEvRSt9_Any_dataOT_>:
	  _M_init_functor(_Any_data& __functor, _Fn&& __f)
 810896a:	b590      	push	{r4, r7, lr}
 810896c:	b083      	sub	sp, #12
 810896e:	af00      	add	r7, sp, #0
 8108970:	6078      	str	r0, [r7, #4]
 8108972:	6039      	str	r1, [r7, #0]
	    _M_create(__functor, std::forward<_Fn>(__f), _Local_storage());
 8108974:	6838      	ldr	r0, [r7, #0]
 8108976:	f000 f816 	bl	81089a6 <_ZSt7forwardIRKZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS3_E_EOT_RNSt16remove_referenceIS7_E4typeE>
 810897a:	4603      	mov	r3, r0
 810897c:	4622      	mov	r2, r4
 810897e:	4619      	mov	r1, r3
 8108980:	6878      	ldr	r0, [r7, #4]
 8108982:	f000 f81b 	bl	81089bc <_ZNSt14_Function_base13_Base_managerIZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E9_M_createIRKS5_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>
	  }
 8108986:	bf00      	nop
 8108988:	370c      	adds	r7, #12
 810898a:	46bd      	mov	sp, r7
 810898c:	bd90      	pop	{r4, r7, pc}

0810898e <_ZNSt14_Function_base13_Base_managerIZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>:
	_M_destroy(_Any_data& __victim, true_type)
 810898e:	b580      	push	{r7, lr}
 8108990:	b082      	sub	sp, #8
 8108992:	af00      	add	r7, sp, #0
 8108994:	6078      	str	r0, [r7, #4]
 8108996:	7039      	strb	r1, [r7, #0]
	  __victim._M_access<_Functor>().~_Functor();
 8108998:	6878      	ldr	r0, [r7, #4]
 810899a:	f000 f828 	bl	81089ee <_ZNSt9_Any_data9_M_accessIZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_EERT_v>
	}
 810899e:	bf00      	nop
 81089a0:	3708      	adds	r7, #8
 81089a2:	46bd      	mov	sp, r7
 81089a4:	bd80      	pop	{r7, pc}

081089a6 <_ZSt7forwardIRKZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS3_E_EOT_RNSt16remove_referenceIS7_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 81089a6:	b480      	push	{r7}
 81089a8:	b083      	sub	sp, #12
 81089aa:	af00      	add	r7, sp, #0
 81089ac:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 81089ae:	687b      	ldr	r3, [r7, #4]
 81089b0:	4618      	mov	r0, r3
 81089b2:	370c      	adds	r7, #12
 81089b4:	46bd      	mov	sp, r7
 81089b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81089ba:	4770      	bx	lr

081089bc <_ZNSt14_Function_base13_Base_managerIZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E9_M_createIRKS5_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>:
	  _M_create(_Any_data& __dest, _Fn&& __f, true_type)
 81089bc:	b590      	push	{r4, r7, lr}
 81089be:	b085      	sub	sp, #20
 81089c0:	af00      	add	r7, sp, #0
 81089c2:	60f8      	str	r0, [r7, #12]
 81089c4:	60b9      	str	r1, [r7, #8]
 81089c6:	713a      	strb	r2, [r7, #4]
	    ::new (__dest._M_access()) _Functor(std::forward<_Fn>(__f));
 81089c8:	68f8      	ldr	r0, [r7, #12]
 81089ca:	f7fc fadd 	bl	8104f88 <_ZNSt9_Any_data9_M_accessEv>
 81089ce:	4603      	mov	r3, r0
 81089d0:	4619      	mov	r1, r3
 81089d2:	2004      	movs	r0, #4
 81089d4:	f7f8 fc58 	bl	8101288 <_ZnwjPv>
 81089d8:	4604      	mov	r4, r0
 81089da:	68b8      	ldr	r0, [r7, #8]
 81089dc:	f7ff ffe3 	bl	81089a6 <_ZSt7forwardIRKZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS3_E_EOT_RNSt16remove_referenceIS7_E4typeE>
 81089e0:	4603      	mov	r3, r0
 81089e2:	681b      	ldr	r3, [r3, #0]
 81089e4:	6023      	str	r3, [r4, #0]
	  }
 81089e6:	bf00      	nop
 81089e8:	3714      	adds	r7, #20
 81089ea:	46bd      	mov	sp, r7
 81089ec:	bd90      	pop	{r4, r7, pc}

081089ee <_ZNSt9_Any_data9_M_accessIZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_EERT_v>:
      _M_access() noexcept
 81089ee:	b580      	push	{r7, lr}
 81089f0:	b082      	sub	sp, #8
 81089f2:	af00      	add	r7, sp, #0
 81089f4:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 81089f6:	6878      	ldr	r0, [r7, #4]
 81089f8:	f7fc fac6 	bl	8104f88 <_ZNSt9_Any_data9_M_accessEv>
 81089fc:	4603      	mov	r3, r0
 81089fe:	4618      	mov	r0, r3
 8108a00:	3708      	adds	r7, #8
 8108a02:	46bd      	mov	sp, r7
 8108a04:	bd80      	pop	{r7, pc}
	...

08108a08 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8108a08:	b580      	push	{r7, lr}
 8108a0a:	b084      	sub	sp, #16
 8108a0c:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 169;
 8108a0e:	4b92      	ldr	r3, [pc, #584]	@ (8108c58 <MX_LWIP_Init+0x250>)
 8108a10:	22a9      	movs	r2, #169	@ 0xa9
 8108a12:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 254;
 8108a14:	4b90      	ldr	r3, [pc, #576]	@ (8108c58 <MX_LWIP_Init+0x250>)
 8108a16:	22fe      	movs	r2, #254	@ 0xfe
 8108a18:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 8108a1a:	4b8f      	ldr	r3, [pc, #572]	@ (8108c58 <MX_LWIP_Init+0x250>)
 8108a1c:	2201      	movs	r2, #1
 8108a1e:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 1;
 8108a20:	4b8d      	ldr	r3, [pc, #564]	@ (8108c58 <MX_LWIP_Init+0x250>)
 8108a22:	2201      	movs	r2, #1
 8108a24:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8108a26:	4b8d      	ldr	r3, [pc, #564]	@ (8108c5c <MX_LWIP_Init+0x254>)
 8108a28:	22ff      	movs	r2, #255	@ 0xff
 8108a2a:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8108a2c:	4b8b      	ldr	r3, [pc, #556]	@ (8108c5c <MX_LWIP_Init+0x254>)
 8108a2e:	22ff      	movs	r2, #255	@ 0xff
 8108a30:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 0;
 8108a32:	4b8a      	ldr	r3, [pc, #552]	@ (8108c5c <MX_LWIP_Init+0x254>)
 8108a34:	2200      	movs	r2, #0
 8108a36:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8108a38:	4b88      	ldr	r3, [pc, #544]	@ (8108c5c <MX_LWIP_Init+0x254>)
 8108a3a:	2200      	movs	r2, #0
 8108a3c:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 0;
 8108a3e:	4b88      	ldr	r3, [pc, #544]	@ (8108c60 <MX_LWIP_Init+0x258>)
 8108a40:	2200      	movs	r2, #0
 8108a42:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 0;
 8108a44:	4b86      	ldr	r3, [pc, #536]	@ (8108c60 <MX_LWIP_Init+0x258>)
 8108a46:	2200      	movs	r2, #0
 8108a48:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 8108a4a:	4b85      	ldr	r3, [pc, #532]	@ (8108c60 <MX_LWIP_Init+0x258>)
 8108a4c:	2200      	movs	r2, #0
 8108a4e:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 0;
 8108a50:	4b83      	ldr	r3, [pc, #524]	@ (8108c60 <MX_LWIP_Init+0x258>)
 8108a52:	2200      	movs	r2, #0
 8108a54:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 8108a56:	2100      	movs	r1, #0
 8108a58:	2000      	movs	r0, #0
 8108a5a:	f019 f9e1 	bl	8121e20 <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8108a5e:	4b7e      	ldr	r3, [pc, #504]	@ (8108c58 <MX_LWIP_Init+0x250>)
 8108a60:	781b      	ldrb	r3, [r3, #0]
 8108a62:	061a      	lsls	r2, r3, #24
 8108a64:	4b7c      	ldr	r3, [pc, #496]	@ (8108c58 <MX_LWIP_Init+0x250>)
 8108a66:	785b      	ldrb	r3, [r3, #1]
 8108a68:	041b      	lsls	r3, r3, #16
 8108a6a:	431a      	orrs	r2, r3
 8108a6c:	4b7a      	ldr	r3, [pc, #488]	@ (8108c58 <MX_LWIP_Init+0x250>)
 8108a6e:	789b      	ldrb	r3, [r3, #2]
 8108a70:	021b      	lsls	r3, r3, #8
 8108a72:	4313      	orrs	r3, r2
 8108a74:	4a78      	ldr	r2, [pc, #480]	@ (8108c58 <MX_LWIP_Init+0x250>)
 8108a76:	78d2      	ldrb	r2, [r2, #3]
 8108a78:	4313      	orrs	r3, r2
 8108a7a:	061a      	lsls	r2, r3, #24
 8108a7c:	4b76      	ldr	r3, [pc, #472]	@ (8108c58 <MX_LWIP_Init+0x250>)
 8108a7e:	781b      	ldrb	r3, [r3, #0]
 8108a80:	0619      	lsls	r1, r3, #24
 8108a82:	4b75      	ldr	r3, [pc, #468]	@ (8108c58 <MX_LWIP_Init+0x250>)
 8108a84:	785b      	ldrb	r3, [r3, #1]
 8108a86:	041b      	lsls	r3, r3, #16
 8108a88:	4319      	orrs	r1, r3
 8108a8a:	4b73      	ldr	r3, [pc, #460]	@ (8108c58 <MX_LWIP_Init+0x250>)
 8108a8c:	789b      	ldrb	r3, [r3, #2]
 8108a8e:	021b      	lsls	r3, r3, #8
 8108a90:	430b      	orrs	r3, r1
 8108a92:	4971      	ldr	r1, [pc, #452]	@ (8108c58 <MX_LWIP_Init+0x250>)
 8108a94:	78c9      	ldrb	r1, [r1, #3]
 8108a96:	430b      	orrs	r3, r1
 8108a98:	021b      	lsls	r3, r3, #8
 8108a9a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8108a9e:	431a      	orrs	r2, r3
 8108aa0:	4b6d      	ldr	r3, [pc, #436]	@ (8108c58 <MX_LWIP_Init+0x250>)
 8108aa2:	781b      	ldrb	r3, [r3, #0]
 8108aa4:	0619      	lsls	r1, r3, #24
 8108aa6:	4b6c      	ldr	r3, [pc, #432]	@ (8108c58 <MX_LWIP_Init+0x250>)
 8108aa8:	785b      	ldrb	r3, [r3, #1]
 8108aaa:	041b      	lsls	r3, r3, #16
 8108aac:	4319      	orrs	r1, r3
 8108aae:	4b6a      	ldr	r3, [pc, #424]	@ (8108c58 <MX_LWIP_Init+0x250>)
 8108ab0:	789b      	ldrb	r3, [r3, #2]
 8108ab2:	021b      	lsls	r3, r3, #8
 8108ab4:	430b      	orrs	r3, r1
 8108ab6:	4968      	ldr	r1, [pc, #416]	@ (8108c58 <MX_LWIP_Init+0x250>)
 8108ab8:	78c9      	ldrb	r1, [r1, #3]
 8108aba:	430b      	orrs	r3, r1
 8108abc:	0a1b      	lsrs	r3, r3, #8
 8108abe:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8108ac2:	431a      	orrs	r2, r3
 8108ac4:	4b64      	ldr	r3, [pc, #400]	@ (8108c58 <MX_LWIP_Init+0x250>)
 8108ac6:	781b      	ldrb	r3, [r3, #0]
 8108ac8:	0619      	lsls	r1, r3, #24
 8108aca:	4b63      	ldr	r3, [pc, #396]	@ (8108c58 <MX_LWIP_Init+0x250>)
 8108acc:	785b      	ldrb	r3, [r3, #1]
 8108ace:	041b      	lsls	r3, r3, #16
 8108ad0:	4319      	orrs	r1, r3
 8108ad2:	4b61      	ldr	r3, [pc, #388]	@ (8108c58 <MX_LWIP_Init+0x250>)
 8108ad4:	789b      	ldrb	r3, [r3, #2]
 8108ad6:	021b      	lsls	r3, r3, #8
 8108ad8:	430b      	orrs	r3, r1
 8108ada:	495f      	ldr	r1, [pc, #380]	@ (8108c58 <MX_LWIP_Init+0x250>)
 8108adc:	78c9      	ldrb	r1, [r1, #3]
 8108ade:	430b      	orrs	r3, r1
 8108ae0:	0e1b      	lsrs	r3, r3, #24
 8108ae2:	4313      	orrs	r3, r2
 8108ae4:	4a5f      	ldr	r2, [pc, #380]	@ (8108c64 <MX_LWIP_Init+0x25c>)
 8108ae6:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8108ae8:	4b5c      	ldr	r3, [pc, #368]	@ (8108c5c <MX_LWIP_Init+0x254>)
 8108aea:	781b      	ldrb	r3, [r3, #0]
 8108aec:	061a      	lsls	r2, r3, #24
 8108aee:	4b5b      	ldr	r3, [pc, #364]	@ (8108c5c <MX_LWIP_Init+0x254>)
 8108af0:	785b      	ldrb	r3, [r3, #1]
 8108af2:	041b      	lsls	r3, r3, #16
 8108af4:	431a      	orrs	r2, r3
 8108af6:	4b59      	ldr	r3, [pc, #356]	@ (8108c5c <MX_LWIP_Init+0x254>)
 8108af8:	789b      	ldrb	r3, [r3, #2]
 8108afa:	021b      	lsls	r3, r3, #8
 8108afc:	4313      	orrs	r3, r2
 8108afe:	4a57      	ldr	r2, [pc, #348]	@ (8108c5c <MX_LWIP_Init+0x254>)
 8108b00:	78d2      	ldrb	r2, [r2, #3]
 8108b02:	4313      	orrs	r3, r2
 8108b04:	061a      	lsls	r2, r3, #24
 8108b06:	4b55      	ldr	r3, [pc, #340]	@ (8108c5c <MX_LWIP_Init+0x254>)
 8108b08:	781b      	ldrb	r3, [r3, #0]
 8108b0a:	0619      	lsls	r1, r3, #24
 8108b0c:	4b53      	ldr	r3, [pc, #332]	@ (8108c5c <MX_LWIP_Init+0x254>)
 8108b0e:	785b      	ldrb	r3, [r3, #1]
 8108b10:	041b      	lsls	r3, r3, #16
 8108b12:	4319      	orrs	r1, r3
 8108b14:	4b51      	ldr	r3, [pc, #324]	@ (8108c5c <MX_LWIP_Init+0x254>)
 8108b16:	789b      	ldrb	r3, [r3, #2]
 8108b18:	021b      	lsls	r3, r3, #8
 8108b1a:	430b      	orrs	r3, r1
 8108b1c:	494f      	ldr	r1, [pc, #316]	@ (8108c5c <MX_LWIP_Init+0x254>)
 8108b1e:	78c9      	ldrb	r1, [r1, #3]
 8108b20:	430b      	orrs	r3, r1
 8108b22:	021b      	lsls	r3, r3, #8
 8108b24:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8108b28:	431a      	orrs	r2, r3
 8108b2a:	4b4c      	ldr	r3, [pc, #304]	@ (8108c5c <MX_LWIP_Init+0x254>)
 8108b2c:	781b      	ldrb	r3, [r3, #0]
 8108b2e:	0619      	lsls	r1, r3, #24
 8108b30:	4b4a      	ldr	r3, [pc, #296]	@ (8108c5c <MX_LWIP_Init+0x254>)
 8108b32:	785b      	ldrb	r3, [r3, #1]
 8108b34:	041b      	lsls	r3, r3, #16
 8108b36:	4319      	orrs	r1, r3
 8108b38:	4b48      	ldr	r3, [pc, #288]	@ (8108c5c <MX_LWIP_Init+0x254>)
 8108b3a:	789b      	ldrb	r3, [r3, #2]
 8108b3c:	021b      	lsls	r3, r3, #8
 8108b3e:	430b      	orrs	r3, r1
 8108b40:	4946      	ldr	r1, [pc, #280]	@ (8108c5c <MX_LWIP_Init+0x254>)
 8108b42:	78c9      	ldrb	r1, [r1, #3]
 8108b44:	430b      	orrs	r3, r1
 8108b46:	0a1b      	lsrs	r3, r3, #8
 8108b48:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8108b4c:	431a      	orrs	r2, r3
 8108b4e:	4b43      	ldr	r3, [pc, #268]	@ (8108c5c <MX_LWIP_Init+0x254>)
 8108b50:	781b      	ldrb	r3, [r3, #0]
 8108b52:	0619      	lsls	r1, r3, #24
 8108b54:	4b41      	ldr	r3, [pc, #260]	@ (8108c5c <MX_LWIP_Init+0x254>)
 8108b56:	785b      	ldrb	r3, [r3, #1]
 8108b58:	041b      	lsls	r3, r3, #16
 8108b5a:	4319      	orrs	r1, r3
 8108b5c:	4b3f      	ldr	r3, [pc, #252]	@ (8108c5c <MX_LWIP_Init+0x254>)
 8108b5e:	789b      	ldrb	r3, [r3, #2]
 8108b60:	021b      	lsls	r3, r3, #8
 8108b62:	430b      	orrs	r3, r1
 8108b64:	493d      	ldr	r1, [pc, #244]	@ (8108c5c <MX_LWIP_Init+0x254>)
 8108b66:	78c9      	ldrb	r1, [r1, #3]
 8108b68:	430b      	orrs	r3, r1
 8108b6a:	0e1b      	lsrs	r3, r3, #24
 8108b6c:	4313      	orrs	r3, r2
 8108b6e:	4a3e      	ldr	r2, [pc, #248]	@ (8108c68 <MX_LWIP_Init+0x260>)
 8108b70:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8108b72:	4b3b      	ldr	r3, [pc, #236]	@ (8108c60 <MX_LWIP_Init+0x258>)
 8108b74:	781b      	ldrb	r3, [r3, #0]
 8108b76:	061a      	lsls	r2, r3, #24
 8108b78:	4b39      	ldr	r3, [pc, #228]	@ (8108c60 <MX_LWIP_Init+0x258>)
 8108b7a:	785b      	ldrb	r3, [r3, #1]
 8108b7c:	041b      	lsls	r3, r3, #16
 8108b7e:	431a      	orrs	r2, r3
 8108b80:	4b37      	ldr	r3, [pc, #220]	@ (8108c60 <MX_LWIP_Init+0x258>)
 8108b82:	789b      	ldrb	r3, [r3, #2]
 8108b84:	021b      	lsls	r3, r3, #8
 8108b86:	4313      	orrs	r3, r2
 8108b88:	4a35      	ldr	r2, [pc, #212]	@ (8108c60 <MX_LWIP_Init+0x258>)
 8108b8a:	78d2      	ldrb	r2, [r2, #3]
 8108b8c:	4313      	orrs	r3, r2
 8108b8e:	061a      	lsls	r2, r3, #24
 8108b90:	4b33      	ldr	r3, [pc, #204]	@ (8108c60 <MX_LWIP_Init+0x258>)
 8108b92:	781b      	ldrb	r3, [r3, #0]
 8108b94:	0619      	lsls	r1, r3, #24
 8108b96:	4b32      	ldr	r3, [pc, #200]	@ (8108c60 <MX_LWIP_Init+0x258>)
 8108b98:	785b      	ldrb	r3, [r3, #1]
 8108b9a:	041b      	lsls	r3, r3, #16
 8108b9c:	4319      	orrs	r1, r3
 8108b9e:	4b30      	ldr	r3, [pc, #192]	@ (8108c60 <MX_LWIP_Init+0x258>)
 8108ba0:	789b      	ldrb	r3, [r3, #2]
 8108ba2:	021b      	lsls	r3, r3, #8
 8108ba4:	430b      	orrs	r3, r1
 8108ba6:	492e      	ldr	r1, [pc, #184]	@ (8108c60 <MX_LWIP_Init+0x258>)
 8108ba8:	78c9      	ldrb	r1, [r1, #3]
 8108baa:	430b      	orrs	r3, r1
 8108bac:	021b      	lsls	r3, r3, #8
 8108bae:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8108bb2:	431a      	orrs	r2, r3
 8108bb4:	4b2a      	ldr	r3, [pc, #168]	@ (8108c60 <MX_LWIP_Init+0x258>)
 8108bb6:	781b      	ldrb	r3, [r3, #0]
 8108bb8:	0619      	lsls	r1, r3, #24
 8108bba:	4b29      	ldr	r3, [pc, #164]	@ (8108c60 <MX_LWIP_Init+0x258>)
 8108bbc:	785b      	ldrb	r3, [r3, #1]
 8108bbe:	041b      	lsls	r3, r3, #16
 8108bc0:	4319      	orrs	r1, r3
 8108bc2:	4b27      	ldr	r3, [pc, #156]	@ (8108c60 <MX_LWIP_Init+0x258>)
 8108bc4:	789b      	ldrb	r3, [r3, #2]
 8108bc6:	021b      	lsls	r3, r3, #8
 8108bc8:	430b      	orrs	r3, r1
 8108bca:	4925      	ldr	r1, [pc, #148]	@ (8108c60 <MX_LWIP_Init+0x258>)
 8108bcc:	78c9      	ldrb	r1, [r1, #3]
 8108bce:	430b      	orrs	r3, r1
 8108bd0:	0a1b      	lsrs	r3, r3, #8
 8108bd2:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8108bd6:	431a      	orrs	r2, r3
 8108bd8:	4b21      	ldr	r3, [pc, #132]	@ (8108c60 <MX_LWIP_Init+0x258>)
 8108bda:	781b      	ldrb	r3, [r3, #0]
 8108bdc:	0619      	lsls	r1, r3, #24
 8108bde:	4b20      	ldr	r3, [pc, #128]	@ (8108c60 <MX_LWIP_Init+0x258>)
 8108be0:	785b      	ldrb	r3, [r3, #1]
 8108be2:	041b      	lsls	r3, r3, #16
 8108be4:	4319      	orrs	r1, r3
 8108be6:	4b1e      	ldr	r3, [pc, #120]	@ (8108c60 <MX_LWIP_Init+0x258>)
 8108be8:	789b      	ldrb	r3, [r3, #2]
 8108bea:	021b      	lsls	r3, r3, #8
 8108bec:	430b      	orrs	r3, r1
 8108bee:	491c      	ldr	r1, [pc, #112]	@ (8108c60 <MX_LWIP_Init+0x258>)
 8108bf0:	78c9      	ldrb	r1, [r1, #3]
 8108bf2:	430b      	orrs	r3, r1
 8108bf4:	0e1b      	lsrs	r3, r3, #24
 8108bf6:	4313      	orrs	r3, r2
 8108bf8:	4a1c      	ldr	r2, [pc, #112]	@ (8108c6c <MX_LWIP_Init+0x264>)
 8108bfa:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8108bfc:	4b1c      	ldr	r3, [pc, #112]	@ (8108c70 <MX_LWIP_Init+0x268>)
 8108bfe:	9302      	str	r3, [sp, #8]
 8108c00:	4b1c      	ldr	r3, [pc, #112]	@ (8108c74 <MX_LWIP_Init+0x26c>)
 8108c02:	9301      	str	r3, [sp, #4]
 8108c04:	2300      	movs	r3, #0
 8108c06:	9300      	str	r3, [sp, #0]
 8108c08:	4b18      	ldr	r3, [pc, #96]	@ (8108c6c <MX_LWIP_Init+0x264>)
 8108c0a:	4a17      	ldr	r2, [pc, #92]	@ (8108c68 <MX_LWIP_Init+0x260>)
 8108c0c:	4915      	ldr	r1, [pc, #84]	@ (8108c64 <MX_LWIP_Init+0x25c>)
 8108c0e:	481a      	ldr	r0, [pc, #104]	@ (8108c78 <MX_LWIP_Init+0x270>)
 8108c10:	f011 fdf4 	bl	811a7fc <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8108c14:	4818      	ldr	r0, [pc, #96]	@ (8108c78 <MX_LWIP_Init+0x270>)
 8108c16:	f011 ffa3 	bl	811ab60 <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 8108c1a:	4817      	ldr	r0, [pc, #92]	@ (8108c78 <MX_LWIP_Init+0x270>)
 8108c1c:	f011 ffb0 	bl	811ab80 <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8108c20:	4916      	ldr	r1, [pc, #88]	@ (8108c7c <MX_LWIP_Init+0x274>)
 8108c22:	4815      	ldr	r0, [pc, #84]	@ (8108c78 <MX_LWIP_Init+0x270>)
 8108c24:	f012 f8ae 	bl	811ad84 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 8108c28:	2224      	movs	r2, #36	@ 0x24
 8108c2a:	2100      	movs	r1, #0
 8108c2c:	4814      	ldr	r0, [pc, #80]	@ (8108c80 <MX_LWIP_Init+0x278>)
 8108c2e:	f01b f935 	bl	8123e9c <memset>
  attributes.name = "EthLink";
 8108c32:	4b13      	ldr	r3, [pc, #76]	@ (8108c80 <MX_LWIP_Init+0x278>)
 8108c34:	4a13      	ldr	r2, [pc, #76]	@ (8108c84 <MX_LWIP_Init+0x27c>)
 8108c36:	601a      	str	r2, [r3, #0]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 8108c38:	4b11      	ldr	r3, [pc, #68]	@ (8108c80 <MX_LWIP_Init+0x278>)
 8108c3a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8108c3e:	615a      	str	r2, [r3, #20]
  attributes.priority = osPriorityBelowNormal;
 8108c40:	4b0f      	ldr	r3, [pc, #60]	@ (8108c80 <MX_LWIP_Init+0x278>)
 8108c42:	2210      	movs	r2, #16
 8108c44:	619a      	str	r2, [r3, #24]
  osThreadNew(ethernet_link_thread, &gnetif, &attributes);
 8108c46:	4a0e      	ldr	r2, [pc, #56]	@ (8108c80 <MX_LWIP_Init+0x278>)
 8108c48:	490b      	ldr	r1, [pc, #44]	@ (8108c78 <MX_LWIP_Init+0x270>)
 8108c4a:	480f      	ldr	r0, [pc, #60]	@ (8108c88 <MX_LWIP_Init+0x280>)
 8108c4c:	f009 fead 	bl	81129aa <osThreadNew>
/* USER CODE END H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8108c50:	bf00      	nop
 8108c52:	46bd      	mov	sp, r7
 8108c54:	bd80      	pop	{r7, pc}
 8108c56:	bf00      	nop
 8108c58:	100002d8 	.word	0x100002d8
 8108c5c:	100002dc 	.word	0x100002dc
 8108c60:	100002e0 	.word	0x100002e0
 8108c64:	100002cc 	.word	0x100002cc
 8108c68:	100002d0 	.word	0x100002d0
 8108c6c:	100002d4 	.word	0x100002d4
 8108c70:	08121d5d 	.word	0x08121d5d
 8108c74:	081091d9 	.word	0x081091d9
 8108c78:	10000298 	.word	0x10000298
 8108c7c:	08108c8d 	.word	0x08108c8d
 8108c80:	100002e4 	.word	0x100002e4
 8108c84:	0812534c 	.word	0x0812534c
 8108c88:	08109499 	.word	0x08109499

08108c8c <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8108c8c:	b580      	push	{r7, lr}
 8108c8e:	b090      	sub	sp, #64	@ 0x40
 8108c90:	af00      	add	r7, sp, #0
 8108c92:	6078      	str	r0, [r7, #4]
  if (netif_is_up(netif))
 8108c94:	687b      	ldr	r3, [r7, #4]
 8108c96:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8108c9a:	f003 0301 	and.w	r3, r3, #1
 8108c9e:	b2db      	uxtb	r3, r3
 8108ca0:	2b00      	cmp	r3, #0
 8108ca2:	d015      	beq.n	8108cd0 <ethernet_link_status_updated+0x44>
  {
/* USER CODE BEGIN 5 */
	SMessage msg;
	msg.event_type = EVENT_ETHERNET_PLUGGED;
 8108ca4:	2383      	movs	r3, #131	@ 0x83
 8108ca6:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
	msg.message_data.ethernet_plugged = true;
 8108caa:	2301      	movs	r3, #1
 8108cac:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
	msg.event_sender = EVENT_CLIENT_LWIP_LINK_STATE_MANAGER;
 8108cb0:	2305      	movs	r3, #5
 8108cb2:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
	msg.event_receiver = EVENT_CLIENT_ETHERNET_CONNECTION_MANAGER;
 8108cb6:	2303      	movs	r3, #3
 8108cb8:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
	xQueueSend(queueToEventManagerCM4, (void*)&msg, portMAX_DELAY);
 8108cbc:	4b10      	ldr	r3, [pc, #64]	@ (8108d00 <ethernet_link_status_updated+0x74>)
 8108cbe:	6818      	ldr	r0, [r3, #0]
 8108cc0:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 8108cc4:	2300      	movs	r3, #0
 8108cc6:	f04f 32ff 	mov.w	r2, #4294967295
 8108cca:	f00b fa13 	bl	81140f4 <xQueueGenericSend>
	msg.event_sender = EVENT_CLIENT_LWIP_LINK_STATE_MANAGER;
	msg.event_receiver = EVENT_CLIENT_ETHERNET_CONNECTION_MANAGER;
    xQueueSend(queueToEventManagerCM4, (void*)&msg, portMAX_DELAY);
/* USER CODE END 6 */
  }
}
 8108cce:	e012      	b.n	8108cf6 <ethernet_link_status_updated+0x6a>
	msg.event_type = EVENT_ETHERNET_PLUGGED;
 8108cd0:	2383      	movs	r3, #131	@ 0x83
 8108cd2:	723b      	strb	r3, [r7, #8]
	msg.message_data.ethernet_plugged = false;
 8108cd4:	2300      	movs	r3, #0
 8108cd6:	733b      	strb	r3, [r7, #12]
	msg.event_sender = EVENT_CLIENT_LWIP_LINK_STATE_MANAGER;
 8108cd8:	2305      	movs	r3, #5
 8108cda:	f887 3020 	strb.w	r3, [r7, #32]
	msg.event_receiver = EVENT_CLIENT_ETHERNET_CONNECTION_MANAGER;
 8108cde:	2303      	movs	r3, #3
 8108ce0:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
    xQueueSend(queueToEventManagerCM4, (void*)&msg, portMAX_DELAY);
 8108ce4:	4b06      	ldr	r3, [pc, #24]	@ (8108d00 <ethernet_link_status_updated+0x74>)
 8108ce6:	6818      	ldr	r0, [r3, #0]
 8108ce8:	f107 0108 	add.w	r1, r7, #8
 8108cec:	2300      	movs	r3, #0
 8108cee:	f04f 32ff 	mov.w	r2, #4294967295
 8108cf2:	f00b f9ff 	bl	81140f4 <xQueueGenericSend>
}
 8108cf6:	bf00      	nop
 8108cf8:	3740      	adds	r7, #64	@ 0x40
 8108cfa:	46bd      	mov	sp, r7
 8108cfc:	bd80      	pop	{r7, pc}
 8108cfe:	bf00      	nop
 8108d00:	100001cc 	.word	0x100001cc

08108d04 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8108d04:	b580      	push	{r7, lr}
 8108d06:	b082      	sub	sp, #8
 8108d08:	af00      	add	r7, sp, #0
 8108d0a:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 8108d0c:	4b04      	ldr	r3, [pc, #16]	@ (8108d20 <HAL_ETH_RxCpltCallback+0x1c>)
 8108d0e:	681b      	ldr	r3, [r3, #0]
 8108d10:	4618      	mov	r0, r3
 8108d12:	f00a f8e1 	bl	8112ed8 <osSemaphoreRelease>
}
 8108d16:	bf00      	nop
 8108d18:	3708      	adds	r7, #8
 8108d1a:	46bd      	mov	sp, r7
 8108d1c:	bd80      	pop	{r7, pc}
 8108d1e:	bf00      	nop
 8108d20:	10000310 	.word	0x10000310

08108d24 <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8108d24:	b580      	push	{r7, lr}
 8108d26:	b082      	sub	sp, #8
 8108d28:	af00      	add	r7, sp, #0
 8108d2a:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 8108d2c:	4b04      	ldr	r3, [pc, #16]	@ (8108d40 <HAL_ETH_TxCpltCallback+0x1c>)
 8108d2e:	681b      	ldr	r3, [r3, #0]
 8108d30:	4618      	mov	r0, r3
 8108d32:	f00a f8d1 	bl	8112ed8 <osSemaphoreRelease>
}
 8108d36:	bf00      	nop
 8108d38:	3708      	adds	r7, #8
 8108d3a:	46bd      	mov	sp, r7
 8108d3c:	bd80      	pop	{r7, pc}
 8108d3e:	bf00      	nop
 8108d40:	10000314 	.word	0x10000314

08108d44 <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 8108d44:	b580      	push	{r7, lr}
 8108d46:	b082      	sub	sp, #8
 8108d48:	af00      	add	r7, sp, #0
 8108d4a:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMACSR_RBU) == ETH_DMACSR_RBU)
 8108d4c:	6878      	ldr	r0, [r7, #4]
 8108d4e:	f004 faa4 	bl	810d29a <HAL_ETH_GetDMAError>
 8108d52:	4603      	mov	r3, r0
 8108d54:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8108d58:	2b80      	cmp	r3, #128	@ 0x80
 8108d5a:	d104      	bne.n	8108d66 <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 8108d5c:	4b04      	ldr	r3, [pc, #16]	@ (8108d70 <HAL_ETH_ErrorCallback+0x2c>)
 8108d5e:	681b      	ldr	r3, [r3, #0]
 8108d60:	4618      	mov	r0, r3
 8108d62:	f00a f8b9 	bl	8112ed8 <osSemaphoreRelease>
  }
}
 8108d66:	bf00      	nop
 8108d68:	3708      	adds	r7, #8
 8108d6a:	46bd      	mov	sp, r7
 8108d6c:	bd80      	pop	{r7, pc}
 8108d6e:	bf00      	nop
 8108d70:	10000310 	.word	0x10000310

08108d74 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8108d74:	b580      	push	{r7, lr}
 8108d76:	b0aa      	sub	sp, #168	@ 0xa8
 8108d78:	af00      	add	r7, sp, #0
 8108d7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8108d7c:	2300      	movs	r3, #0
 8108d7e:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
/* USER CODE BEGIN OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  osThreadAttr_t attributes;
/* USER CODE END OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  uint32_t duplex, speed = 0;
 8108d82:	2300      	movs	r3, #0
 8108d84:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  int32_t PHYLinkState = 0;
 8108d88:	2300      	movs	r3, #0
 8108d8a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  ETH_MACConfigTypeDef MACConf = {0};
 8108d8e:	f107 0310 	add.w	r3, r7, #16
 8108d92:	2264      	movs	r2, #100	@ 0x64
 8108d94:	2100      	movs	r1, #0
 8108d96:	4618      	mov	r0, r3
 8108d98:	f01b f880 	bl	8123e9c <memset>
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8108d9c:	4b89      	ldr	r3, [pc, #548]	@ (8108fc4 <low_level_init+0x250>)
 8108d9e:	4a8a      	ldr	r2, [pc, #552]	@ (8108fc8 <low_level_init+0x254>)
 8108da0:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8108da2:	2300      	movs	r3, #0
 8108da4:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 8108da6:	2380      	movs	r3, #128	@ 0x80
 8108da8:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 8108daa:	23e1      	movs	r3, #225	@ 0xe1
 8108dac:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 8108dae:	2300      	movs	r3, #0
 8108db0:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 8108db2:	2300      	movs	r3, #0
 8108db4:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 8108db6:	2300      	movs	r3, #0
 8108db8:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8108dba:	4a82      	ldr	r2, [pc, #520]	@ (8108fc4 <low_level_init+0x250>)
 8108dbc:	f107 0308 	add.w	r3, r7, #8
 8108dc0:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8108dc2:	4b80      	ldr	r3, [pc, #512]	@ (8108fc4 <low_level_init+0x250>)
 8108dc4:	2201      	movs	r2, #1
 8108dc6:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8108dc8:	4b7e      	ldr	r3, [pc, #504]	@ (8108fc4 <low_level_init+0x250>)
 8108dca:	4a80      	ldr	r2, [pc, #512]	@ (8108fcc <low_level_init+0x258>)
 8108dcc:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8108dce:	4b7d      	ldr	r3, [pc, #500]	@ (8108fc4 <low_level_init+0x250>)
 8108dd0:	4a7f      	ldr	r2, [pc, #508]	@ (8108fd0 <low_level_init+0x25c>)
 8108dd2:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 8108dd4:	4b7b      	ldr	r3, [pc, #492]	@ (8108fc4 <low_level_init+0x250>)
 8108dd6:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8108dda:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8108ddc:	4879      	ldr	r0, [pc, #484]	@ (8108fc4 <low_level_init+0x250>)
 8108dde:	f003 fa6b 	bl	810c2b8 <HAL_ETH_Init>
 8108de2:	4603      	mov	r3, r0
 8108de4:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8108de8:	2238      	movs	r2, #56	@ 0x38
 8108dea:	2100      	movs	r1, #0
 8108dec:	4879      	ldr	r0, [pc, #484]	@ (8108fd4 <low_level_init+0x260>)
 8108dee:	f01b f855 	bl	8123e9c <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8108df2:	4b78      	ldr	r3, [pc, #480]	@ (8108fd4 <low_level_init+0x260>)
 8108df4:	2221      	movs	r2, #33	@ 0x21
 8108df6:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8108df8:	4b76      	ldr	r3, [pc, #472]	@ (8108fd4 <low_level_init+0x260>)
 8108dfa:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8108dfe:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8108e00:	4b74      	ldr	r3, [pc, #464]	@ (8108fd4 <low_level_init+0x260>)
 8108e02:	2200      	movs	r2, #0
 8108e04:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8108e06:	4874      	ldr	r0, [pc, #464]	@ (8108fd8 <low_level_init+0x264>)
 8108e08:	f011 fbb2 	bl	811a570 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8108e0c:	687b      	ldr	r3, [r7, #4]
 8108e0e:	2206      	movs	r2, #6
 8108e10:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8108e14:	4b6b      	ldr	r3, [pc, #428]	@ (8108fc4 <low_level_init+0x250>)
 8108e16:	685b      	ldr	r3, [r3, #4]
 8108e18:	781a      	ldrb	r2, [r3, #0]
 8108e1a:	687b      	ldr	r3, [r7, #4]
 8108e1c:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8108e20:	4b68      	ldr	r3, [pc, #416]	@ (8108fc4 <low_level_init+0x250>)
 8108e22:	685b      	ldr	r3, [r3, #4]
 8108e24:	785a      	ldrb	r2, [r3, #1]
 8108e26:	687b      	ldr	r3, [r7, #4]
 8108e28:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8108e2c:	4b65      	ldr	r3, [pc, #404]	@ (8108fc4 <low_level_init+0x250>)
 8108e2e:	685b      	ldr	r3, [r3, #4]
 8108e30:	789a      	ldrb	r2, [r3, #2]
 8108e32:	687b      	ldr	r3, [r7, #4]
 8108e34:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8108e38:	4b62      	ldr	r3, [pc, #392]	@ (8108fc4 <low_level_init+0x250>)
 8108e3a:	685b      	ldr	r3, [r3, #4]
 8108e3c:	78da      	ldrb	r2, [r3, #3]
 8108e3e:	687b      	ldr	r3, [r7, #4]
 8108e40:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8108e44:	4b5f      	ldr	r3, [pc, #380]	@ (8108fc4 <low_level_init+0x250>)
 8108e46:	685b      	ldr	r3, [r3, #4]
 8108e48:	791a      	ldrb	r2, [r3, #4]
 8108e4a:	687b      	ldr	r3, [r7, #4]
 8108e4c:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8108e50:	4b5c      	ldr	r3, [pc, #368]	@ (8108fc4 <low_level_init+0x250>)
 8108e52:	685b      	ldr	r3, [r3, #4]
 8108e54:	795a      	ldrb	r2, [r3, #5]
 8108e56:	687b      	ldr	r3, [r7, #4]
 8108e58:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8108e5c:	687b      	ldr	r3, [r7, #4]
 8108e5e:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8108e62:	849a      	strh	r2, [r3, #36]	@ 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8108e64:	687b      	ldr	r3, [r7, #4]
 8108e66:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8108e6a:	f043 030a 	orr.w	r3, r3, #10
 8108e6e:	b2da      	uxtb	r2, r3
 8108e70:	687b      	ldr	r3, [r7, #4]
 8108e72:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  RxPktSemaphore = osSemaphoreNew(1, 0, NULL);
 8108e76:	2200      	movs	r2, #0
 8108e78:	2100      	movs	r1, #0
 8108e7a:	2001      	movs	r0, #1
 8108e7c:	f009 ff50 	bl	8112d20 <osSemaphoreNew>
 8108e80:	4603      	mov	r3, r0
 8108e82:	4a56      	ldr	r2, [pc, #344]	@ (8108fdc <low_level_init+0x268>)
 8108e84:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  TxPktSemaphore = osSemaphoreNew(1, 0, NULL);
 8108e86:	2200      	movs	r2, #0
 8108e88:	2100      	movs	r1, #0
 8108e8a:	2001      	movs	r0, #1
 8108e8c:	f009 ff48 	bl	8112d20 <osSemaphoreNew>
 8108e90:	4603      	mov	r3, r0
 8108e92:	4a53      	ldr	r2, [pc, #332]	@ (8108fe0 <low_level_init+0x26c>)
 8108e94:	6013      	str	r3, [r2, #0]

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 8108e96:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8108e9a:	2224      	movs	r2, #36	@ 0x24
 8108e9c:	2100      	movs	r1, #0
 8108e9e:	4618      	mov	r0, r3
 8108ea0:	f01a fffc 	bl	8123e9c <memset>
  attributes.name = "EthIf";
 8108ea4:	4b4f      	ldr	r3, [pc, #316]	@ (8108fe4 <low_level_init+0x270>)
 8108ea6:	677b      	str	r3, [r7, #116]	@ 0x74
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 8108ea8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8108eac:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  attributes.priority = osPriorityRealtime;
 8108eb0:	2330      	movs	r3, #48	@ 0x30
 8108eb2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  osThreadNew(ethernetif_input, netif, &attributes);
 8108eb6:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8108eba:	461a      	mov	r2, r3
 8108ebc:	6879      	ldr	r1, [r7, #4]
 8108ebe:	484a      	ldr	r0, [pc, #296]	@ (8108fe8 <low_level_init+0x274>)
 8108ec0:	f009 fd73 	bl	81129aa <osThreadNew>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8108ec4:	4949      	ldr	r1, [pc, #292]	@ (8108fec <low_level_init+0x278>)
 8108ec6:	484a      	ldr	r0, [pc, #296]	@ (8108ff0 <low_level_init+0x27c>)
 8108ec8:	f002 ff4d 	bl	810bd66 <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  if(LAN8742_Init(&LAN8742) != LAN8742_STATUS_OK)
 8108ecc:	4848      	ldr	r0, [pc, #288]	@ (8108ff0 <low_level_init+0x27c>)
 8108ece:	f002 ff7c 	bl	810bdca <LAN8742_Init>
 8108ed2:	4603      	mov	r3, r0
 8108ed4:	2b00      	cmp	r3, #0
 8108ed6:	d006      	beq.n	8108ee6 <low_level_init+0x172>
  {
    netif_set_link_down(netif);
 8108ed8:	6878      	ldr	r0, [r7, #4]
 8108eda:	f011 ff23 	bl	811ad24 <netif_set_link_down>
    netif_set_down(netif);
 8108ede:	6878      	ldr	r0, [r7, #4]
 8108ee0:	f011 feba 	bl	811ac58 <netif_set_down>
 8108ee4:	e06b      	b.n	8108fbe <low_level_init+0x24a>
    return;
  }

  if (hal_eth_init_status == HAL_OK)
 8108ee6:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 8108eea:	2b00      	cmp	r3, #0
 8108eec:	d165      	bne.n	8108fba <low_level_init+0x246>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8108eee:	4840      	ldr	r0, [pc, #256]	@ (8108ff0 <low_level_init+0x27c>)
 8108ef0:	f002 ffb8 	bl	810be64 <LAN8742_GetLinkState>
 8108ef4:	f8c7 0098 	str.w	r0, [r7, #152]	@ 0x98

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 8108ef8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8108efc:	2b01      	cmp	r3, #1
 8108efe:	dc06      	bgt.n	8108f0e <low_level_init+0x19a>
    {
      netif_set_link_down(netif);
 8108f00:	6878      	ldr	r0, [r7, #4]
 8108f02:	f011 ff0f 	bl	811ad24 <netif_set_link_down>
      netif_set_down(netif);
 8108f06:	6878      	ldr	r0, [r7, #4]
 8108f08:	f011 fea6 	bl	811ac58 <netif_set_down>
 8108f0c:	e057      	b.n	8108fbe <low_level_init+0x24a>
    }
    else
    {
      switch (PHYLinkState)
 8108f0e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8108f12:	3b02      	subs	r3, #2
 8108f14:	2b03      	cmp	r3, #3
 8108f16:	d82b      	bhi.n	8108f70 <low_level_init+0x1fc>
 8108f18:	a201      	add	r2, pc, #4	@ (adr r2, 8108f20 <low_level_init+0x1ac>)
 8108f1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8108f1e:	bf00      	nop
 8108f20:	08108f31 	.word	0x08108f31
 8108f24:	08108f43 	.word	0x08108f43
 8108f28:	08108f53 	.word	0x08108f53
 8108f2c:	08108f63 	.word	0x08108f63
      {
      case LAN8742_STATUS_100MBITS_FULLDUPLEX:
        duplex = ETH_FULLDUPLEX_MODE;
 8108f30:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8108f34:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_100M;
 8108f38:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8108f3c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 8108f40:	e01f      	b.n	8108f82 <low_level_init+0x20e>
      case LAN8742_STATUS_100MBITS_HALFDUPLEX:
        duplex = ETH_HALFDUPLEX_MODE;
 8108f42:	2300      	movs	r3, #0
 8108f44:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_100M;
 8108f48:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8108f4c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 8108f50:	e017      	b.n	8108f82 <low_level_init+0x20e>
      case LAN8742_STATUS_10MBITS_FULLDUPLEX:
        duplex = ETH_FULLDUPLEX_MODE;
 8108f52:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8108f56:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_10M;
 8108f5a:	2300      	movs	r3, #0
 8108f5c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 8108f60:	e00f      	b.n	8108f82 <low_level_init+0x20e>
      case LAN8742_STATUS_10MBITS_HALFDUPLEX:
        duplex = ETH_HALFDUPLEX_MODE;
 8108f62:	2300      	movs	r3, #0
 8108f64:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_10M;
 8108f68:	2300      	movs	r3, #0
 8108f6a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 8108f6e:	e008      	b.n	8108f82 <low_level_init+0x20e>
      default:
        duplex = ETH_FULLDUPLEX_MODE;
 8108f70:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8108f74:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_100M;
 8108f78:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8108f7c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 8108f80:	bf00      	nop
      }

    /* Get MAC Config MAC */
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 8108f82:	f107 0310 	add.w	r3, r7, #16
 8108f86:	4619      	mov	r1, r3
 8108f88:	480e      	ldr	r0, [pc, #56]	@ (8108fc4 <low_level_init+0x250>)
 8108f8a:	f003 ff3b 	bl	810ce04 <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 8108f8e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8108f92:	62bb      	str	r3, [r7, #40]	@ 0x28
    MACConf.Speed = speed;
 8108f94:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8108f98:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 8108f9a:	f107 0310 	add.w	r3, r7, #16
 8108f9e:	4619      	mov	r1, r3
 8108fa0:	4808      	ldr	r0, [pc, #32]	@ (8108fc4 <low_level_init+0x250>)
 8108fa2:	f004 f903 	bl	810d1ac <HAL_ETH_SetMACConfig>

    HAL_ETH_Start_IT(&heth);
 8108fa6:	4807      	ldr	r0, [pc, #28]	@ (8108fc4 <low_level_init+0x250>)
 8108fa8:	f003 fa84 	bl	810c4b4 <HAL_ETH_Start_IT>
    netif_set_up(netif);
 8108fac:	6878      	ldr	r0, [r7, #4]
 8108fae:	f011 fde7 	bl	811ab80 <netif_set_up>
    netif_set_link_up(netif);
 8108fb2:	6878      	ldr	r0, [r7, #4]
 8108fb4:	f011 fe82 	bl	811acbc <netif_set_link_up>
 8108fb8:	e001      	b.n	8108fbe <low_level_init+0x24a>
    }

  }
  else
  {
    Error_Handler();
 8108fba:	f7f8 fbc7 	bl	810174c <Error_Handler>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8108fbe:	37a8      	adds	r7, #168	@ 0xa8
 8108fc0:	46bd      	mov	sp, r7
 8108fc2:	bd80      	pop	{r7, pc}
 8108fc4:	10000318 	.word	0x10000318
 8108fc8:	40028000 	.word	0x40028000
 8108fcc:	10040100 	.word	0x10040100
 8108fd0:	10040000 	.word	0x10040000
 8108fd4:	100003c8 	.word	0x100003c8
 8108fd8:	081283dc 	.word	0x081283dc
 8108fdc:	10000310 	.word	0x10000310
 8108fe0:	10000314 	.word	0x10000314
 8108fe4:	08125354 	.word	0x08125354
 8108fe8:	08109185 	.word	0x08109185
 8108fec:	10000000 	.word	0x10000000
 8108ff0:	10000400 	.word	0x10000400

08108ff4 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8108ff4:	b580      	push	{r7, lr}
 8108ff6:	b092      	sub	sp, #72	@ 0x48
 8108ff8:	af00      	add	r7, sp, #0
 8108ffa:	6078      	str	r0, [r7, #4]
 8108ffc:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 8108ffe:	2300      	movs	r3, #0
 8109000:	647b      	str	r3, [r7, #68]	@ 0x44
  struct pbuf *q = NULL;
 8109002:	2300      	movs	r3, #0
 8109004:	643b      	str	r3, [r7, #64]	@ 0x40
  err_t errval = ERR_OK;
 8109006:	2300      	movs	r3, #0
 8109008:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 810900c:	f107 030c 	add.w	r3, r7, #12
 8109010:	2230      	movs	r2, #48	@ 0x30
 8109012:	2100      	movs	r1, #0
 8109014:	4618      	mov	r0, r3
 8109016:	f01a ff41 	bl	8123e9c <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 810901a:	f107 030c 	add.w	r3, r7, #12
 810901e:	2230      	movs	r2, #48	@ 0x30
 8109020:	2100      	movs	r1, #0
 8109022:	4618      	mov	r0, r3
 8109024:	f01a ff3a 	bl	8123e9c <memset>

  for(q = p; q != NULL; q = q->next)
 8109028:	683b      	ldr	r3, [r7, #0]
 810902a:	643b      	str	r3, [r7, #64]	@ 0x40
 810902c:	e045      	b.n	81090ba <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 810902e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8109030:	2b03      	cmp	r3, #3
 8109032:	d902      	bls.n	810903a <low_level_output+0x46>
      return ERR_IF;
 8109034:	f06f 030b 	mvn.w	r3, #11
 8109038:	e07f      	b.n	810913a <low_level_output+0x146>

    Txbuffer[i].buffer = q->payload;
 810903a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 810903c:	6859      	ldr	r1, [r3, #4]
 810903e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8109040:	4613      	mov	r3, r2
 8109042:	005b      	lsls	r3, r3, #1
 8109044:	4413      	add	r3, r2
 8109046:	009b      	lsls	r3, r3, #2
 8109048:	3348      	adds	r3, #72	@ 0x48
 810904a:	443b      	add	r3, r7
 810904c:	3b3c      	subs	r3, #60	@ 0x3c
 810904e:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8109050:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8109052:	895b      	ldrh	r3, [r3, #10]
 8109054:	4619      	mov	r1, r3
 8109056:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8109058:	4613      	mov	r3, r2
 810905a:	005b      	lsls	r3, r3, #1
 810905c:	4413      	add	r3, r2
 810905e:	009b      	lsls	r3, r3, #2
 8109060:	3348      	adds	r3, #72	@ 0x48
 8109062:	443b      	add	r3, r7
 8109064:	3b38      	subs	r3, #56	@ 0x38
 8109066:	6019      	str	r1, [r3, #0]

    if(i>0)
 8109068:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 810906a:	2b00      	cmp	r3, #0
 810906c:	d011      	beq.n	8109092 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 810906e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8109070:	1e5a      	subs	r2, r3, #1
 8109072:	f107 000c 	add.w	r0, r7, #12
 8109076:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8109078:	460b      	mov	r3, r1
 810907a:	005b      	lsls	r3, r3, #1
 810907c:	440b      	add	r3, r1
 810907e:	009b      	lsls	r3, r3, #2
 8109080:	18c1      	adds	r1, r0, r3
 8109082:	4613      	mov	r3, r2
 8109084:	005b      	lsls	r3, r3, #1
 8109086:	4413      	add	r3, r2
 8109088:	009b      	lsls	r3, r3, #2
 810908a:	3348      	adds	r3, #72	@ 0x48
 810908c:	443b      	add	r3, r7
 810908e:	3b34      	subs	r3, #52	@ 0x34
 8109090:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 8109092:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8109094:	681b      	ldr	r3, [r3, #0]
 8109096:	2b00      	cmp	r3, #0
 8109098:	d109      	bne.n	81090ae <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 810909a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 810909c:	4613      	mov	r3, r2
 810909e:	005b      	lsls	r3, r3, #1
 81090a0:	4413      	add	r3, r2
 81090a2:	009b      	lsls	r3, r3, #2
 81090a4:	3348      	adds	r3, #72	@ 0x48
 81090a6:	443b      	add	r3, r7
 81090a8:	3b34      	subs	r3, #52	@ 0x34
 81090aa:	2200      	movs	r2, #0
 81090ac:	601a      	str	r2, [r3, #0]
    }

    i++;
 81090ae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 81090b0:	3301      	adds	r3, #1
 81090b2:	647b      	str	r3, [r7, #68]	@ 0x44
  for(q = p; q != NULL; q = q->next)
 81090b4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 81090b6:	681b      	ldr	r3, [r3, #0]
 81090b8:	643b      	str	r3, [r7, #64]	@ 0x40
 81090ba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 81090bc:	2b00      	cmp	r3, #0
 81090be:	d1b6      	bne.n	810902e <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 81090c0:	683b      	ldr	r3, [r7, #0]
 81090c2:	891b      	ldrh	r3, [r3, #8]
 81090c4:	461a      	mov	r2, r3
 81090c6:	4b1f      	ldr	r3, [pc, #124]	@ (8109144 <low_level_output+0x150>)
 81090c8:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 81090ca:	4a1e      	ldr	r2, [pc, #120]	@ (8109144 <low_level_output+0x150>)
 81090cc:	f107 030c 	add.w	r3, r7, #12
 81090d0:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 81090d2:	4a1c      	ldr	r2, [pc, #112]	@ (8109144 <low_level_output+0x150>)
 81090d4:	683b      	ldr	r3, [r7, #0]
 81090d6:	6353      	str	r3, [r2, #52]	@ 0x34

  pbuf_ref(p);
 81090d8:	6838      	ldr	r0, [r7, #0]
 81090da:	f012 faa5 	bl	811b628 <pbuf_ref>

  do
  {
    if(HAL_ETH_Transmit_IT(&heth, &TxConfig) == HAL_OK)
 81090de:	4919      	ldr	r1, [pc, #100]	@ (8109144 <low_level_output+0x150>)
 81090e0:	4819      	ldr	r0, [pc, #100]	@ (8109148 <low_level_output+0x154>)
 81090e2:	f003 fad4 	bl	810c68e <HAL_ETH_Transmit_IT>
 81090e6:	4603      	mov	r3, r0
 81090e8:	2b00      	cmp	r3, #0
 81090ea:	d103      	bne.n	81090f4 <low_level_output+0x100>
    {
      errval = ERR_OK;
 81090ec:	2300      	movs	r3, #0
 81090ee:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 81090f2:	e01b      	b.n	810912c <low_level_output+0x138>
    }
    else
    {

      if(HAL_ETH_GetError(&heth) & HAL_ETH_ERROR_BUSY)
 81090f4:	4814      	ldr	r0, [pc, #80]	@ (8109148 <low_level_output+0x154>)
 81090f6:	f004 f8c3 	bl	810d280 <HAL_ETH_GetError>
 81090fa:	4603      	mov	r3, r0
 81090fc:	f003 0302 	and.w	r3, r3, #2
 8109100:	2b00      	cmp	r3, #0
 8109102:	d00d      	beq.n	8109120 <low_level_output+0x12c>
      {
        /* Wait for descriptors to become available */
        osSemaphoreAcquire(TxPktSemaphore, ETHIF_TX_TIMEOUT);
 8109104:	4b11      	ldr	r3, [pc, #68]	@ (810914c <low_level_output+0x158>)
 8109106:	681b      	ldr	r3, [r3, #0]
 8109108:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 810910c:	4618      	mov	r0, r3
 810910e:	f009 fe91 	bl	8112e34 <osSemaphoreAcquire>
        HAL_ETH_ReleaseTxPacket(&heth);
 8109112:	480d      	ldr	r0, [pc, #52]	@ (8109148 <low_level_output+0x154>)
 8109114:	f003 fc42 	bl	810c99c <HAL_ETH_ReleaseTxPacket>
        errval = ERR_BUF;
 8109118:	23fe      	movs	r3, #254	@ 0xfe
 810911a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 810911e:	e005      	b.n	810912c <low_level_output+0x138>
      }
      else
      {
        /* Other error */
        pbuf_free(p);
 8109120:	6838      	ldr	r0, [r7, #0]
 8109122:	f012 f9db 	bl	811b4dc <pbuf_free>
        errval =  ERR_IF;
 8109126:	23f4      	movs	r3, #244	@ 0xf4
 8109128:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
      }
    }
  }while(errval == ERR_BUF);
 810912c:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8109130:	f113 0f02 	cmn.w	r3, #2
 8109134:	d0d3      	beq.n	81090de <low_level_output+0xea>

  return errval;
 8109136:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 810913a:	4618      	mov	r0, r3
 810913c:	3748      	adds	r7, #72	@ 0x48
 810913e:	46bd      	mov	sp, r7
 8109140:	bd80      	pop	{r7, pc}
 8109142:	bf00      	nop
 8109144:	100003c8 	.word	0x100003c8
 8109148:	10000318 	.word	0x10000318
 810914c:	10000314 	.word	0x10000314

08109150 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8109150:	b580      	push	{r7, lr}
 8109152:	b084      	sub	sp, #16
 8109154:	af00      	add	r7, sp, #0
 8109156:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8109158:	2300      	movs	r3, #0
 810915a:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 810915c:	4b07      	ldr	r3, [pc, #28]	@ (810917c <low_level_input+0x2c>)
 810915e:	781b      	ldrb	r3, [r3, #0]
 8109160:	2b00      	cmp	r3, #0
 8109162:	d105      	bne.n	8109170 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 8109164:	f107 030c 	add.w	r3, r7, #12
 8109168:	4619      	mov	r1, r3
 810916a:	4805      	ldr	r0, [pc, #20]	@ (8109180 <low_level_input+0x30>)
 810916c:	f003 fae0 	bl	810c730 <HAL_ETH_ReadData>
  }

  return p;
 8109170:	68fb      	ldr	r3, [r7, #12]
}
 8109172:	4618      	mov	r0, r3
 8109174:	3710      	adds	r7, #16
 8109176:	46bd      	mov	sp, r7
 8109178:	bd80      	pop	{r7, pc}
 810917a:	bf00      	nop
 810917c:	1000030c 	.word	0x1000030c
 8109180:	10000318 	.word	0x10000318

08109184 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void* argument)
{
 8109184:	b580      	push	{r7, lr}
 8109186:	b084      	sub	sp, #16
 8109188:	af00      	add	r7, sp, #0
 810918a:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 810918c:	2300      	movs	r3, #0
 810918e:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 8109190:	687b      	ldr	r3, [r7, #4]
 8109192:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8109194:	4b0f      	ldr	r3, [pc, #60]	@ (81091d4 <ethernetif_input+0x50>)
 8109196:	681b      	ldr	r3, [r3, #0]
 8109198:	f04f 31ff 	mov.w	r1, #4294967295
 810919c:	4618      	mov	r0, r3
 810919e:	f009 fe49 	bl	8112e34 <osSemaphoreAcquire>
 81091a2:	4603      	mov	r3, r0
 81091a4:	2b00      	cmp	r3, #0
 81091a6:	d1f5      	bne.n	8109194 <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 81091a8:	68b8      	ldr	r0, [r7, #8]
 81091aa:	f7ff ffd1 	bl	8109150 <low_level_input>
 81091ae:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 81091b0:	68fb      	ldr	r3, [r7, #12]
 81091b2:	2b00      	cmp	r3, #0
 81091b4:	d00a      	beq.n	81091cc <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 81091b6:	68bb      	ldr	r3, [r7, #8]
 81091b8:	691b      	ldr	r3, [r3, #16]
 81091ba:	68b9      	ldr	r1, [r7, #8]
 81091bc:	68f8      	ldr	r0, [r7, #12]
 81091be:	4798      	blx	r3
 81091c0:	4603      	mov	r3, r0
 81091c2:	2b00      	cmp	r3, #0
 81091c4:	d002      	beq.n	81091cc <ethernetif_input+0x48>
          {
            pbuf_free(p);
 81091c6:	68f8      	ldr	r0, [r7, #12]
 81091c8:	f012 f988 	bl	811b4dc <pbuf_free>
          }
        }
      } while(p!=NULL);
 81091cc:	68fb      	ldr	r3, [r7, #12]
 81091ce:	2b00      	cmp	r3, #0
 81091d0:	d1ea      	bne.n	81091a8 <ethernetif_input+0x24>
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 81091d2:	e7df      	b.n	8109194 <ethernetif_input+0x10>
 81091d4:	10000310 	.word	0x10000310

081091d8 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 81091d8:	b580      	push	{r7, lr}
 81091da:	b082      	sub	sp, #8
 81091dc:	af00      	add	r7, sp, #0
 81091de:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 81091e0:	687b      	ldr	r3, [r7, #4]
 81091e2:	2b00      	cmp	r3, #0
 81091e4:	d106      	bne.n	81091f4 <ethernetif_init+0x1c>
 81091e6:	4b0e      	ldr	r3, [pc, #56]	@ (8109220 <ethernetif_init+0x48>)
 81091e8:	f44f 7206 	mov.w	r2, #536	@ 0x218
 81091ec:	490d      	ldr	r1, [pc, #52]	@ (8109224 <ethernetif_init+0x4c>)
 81091ee:	480e      	ldr	r0, [pc, #56]	@ (8109228 <ethernetif_init+0x50>)
 81091f0:	f01a fd14 	bl	8123c1c <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 81091f4:	687b      	ldr	r3, [r7, #4]
 81091f6:	2273      	movs	r2, #115	@ 0x73
 81091f8:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
  netif->name[1] = IFNAME1;
 81091fc:	687b      	ldr	r3, [r7, #4]
 81091fe:	2274      	movs	r2, #116	@ 0x74
 8109200:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8109204:	687b      	ldr	r3, [r7, #4]
 8109206:	4a09      	ldr	r2, [pc, #36]	@ (810922c <ethernetif_init+0x54>)
 8109208:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 810920a:	687b      	ldr	r3, [r7, #4]
 810920c:	4a08      	ldr	r2, [pc, #32]	@ (8109230 <ethernetif_init+0x58>)
 810920e:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8109210:	6878      	ldr	r0, [r7, #4]
 8109212:	f7ff fdaf 	bl	8108d74 <low_level_init>

  return ERR_OK;
 8109216:	2300      	movs	r3, #0
}
 8109218:	4618      	mov	r0, r3
 810921a:	3708      	adds	r7, #8
 810921c:	46bd      	mov	sp, r7
 810921e:	bd80      	pop	{r7, pc}
 8109220:	0812535c 	.word	0x0812535c
 8109224:	081253bc 	.word	0x081253bc
 8109228:	081253cc 	.word	0x081253cc
 810922c:	08117abd 	.word	0x08117abd
 8109230:	08108ff5 	.word	0x08108ff5

08109234 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8109234:	b580      	push	{r7, lr}
 8109236:	b084      	sub	sp, #16
 8109238:	af00      	add	r7, sp, #0
 810923a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 810923c:	687b      	ldr	r3, [r7, #4]
 810923e:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8109240:	68f9      	ldr	r1, [r7, #12]
 8109242:	4809      	ldr	r0, [pc, #36]	@ (8109268 <pbuf_free_custom+0x34>)
 8109244:	f011 fa84 	bl	811a750 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 8109248:	4b08      	ldr	r3, [pc, #32]	@ (810926c <pbuf_free_custom+0x38>)
 810924a:	781b      	ldrb	r3, [r3, #0]
 810924c:	2b01      	cmp	r3, #1
 810924e:	d107      	bne.n	8109260 <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 8109250:	4b06      	ldr	r3, [pc, #24]	@ (810926c <pbuf_free_custom+0x38>)
 8109252:	2200      	movs	r2, #0
 8109254:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 8109256:	4b06      	ldr	r3, [pc, #24]	@ (8109270 <pbuf_free_custom+0x3c>)
 8109258:	681b      	ldr	r3, [r3, #0]
 810925a:	4618      	mov	r0, r3
 810925c:	f009 fe3c 	bl	8112ed8 <osSemaphoreRelease>
  }
}
 8109260:	bf00      	nop
 8109262:	3710      	adds	r7, #16
 8109264:	46bd      	mov	sp, r7
 8109266:	bd80      	pop	{r7, pc}
 8109268:	081283dc 	.word	0x081283dc
 810926c:	1000030c 	.word	0x1000030c
 8109270:	10000310 	.word	0x10000310

08109274 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8109274:	b580      	push	{r7, lr}
 8109276:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8109278:	f002 ff0a 	bl	810c090 <HAL_GetTick>
 810927c:	4603      	mov	r3, r0
}
 810927e:	4618      	mov	r0, r3
 8109280:	bd80      	pop	{r7, pc}
	...

08109284 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8109284:	b580      	push	{r7, lr}
 8109286:	b08e      	sub	sp, #56	@ 0x38
 8109288:	af00      	add	r7, sp, #0
 810928a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 810928c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8109290:	2200      	movs	r2, #0
 8109292:	601a      	str	r2, [r3, #0]
 8109294:	605a      	str	r2, [r3, #4]
 8109296:	609a      	str	r2, [r3, #8]
 8109298:	60da      	str	r2, [r3, #12]
 810929a:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 810929c:	687b      	ldr	r3, [r7, #4]
 810929e:	681b      	ldr	r3, [r3, #0]
 81092a0:	4a51      	ldr	r2, [pc, #324]	@ (81093e8 <HAL_ETH_MspInit+0x164>)
 81092a2:	4293      	cmp	r3, r2
 81092a4:	f040 809b 	bne.w	81093de <HAL_ETH_MspInit+0x15a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 81092a8:	4b50      	ldr	r3, [pc, #320]	@ (81093ec <HAL_ETH_MspInit+0x168>)
 81092aa:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 81092ae:	4a4f      	ldr	r2, [pc, #316]	@ (81093ec <HAL_ETH_MspInit+0x168>)
 81092b0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 81092b4:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 81092b8:	4b4c      	ldr	r3, [pc, #304]	@ (81093ec <HAL_ETH_MspInit+0x168>)
 81092ba:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 81092be:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 81092c2:	623b      	str	r3, [r7, #32]
 81092c4:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 81092c6:	4b49      	ldr	r3, [pc, #292]	@ (81093ec <HAL_ETH_MspInit+0x168>)
 81092c8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 81092cc:	4a47      	ldr	r2, [pc, #284]	@ (81093ec <HAL_ETH_MspInit+0x168>)
 81092ce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 81092d2:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 81092d6:	4b45      	ldr	r3, [pc, #276]	@ (81093ec <HAL_ETH_MspInit+0x168>)
 81092d8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 81092dc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 81092e0:	61fb      	str	r3, [r7, #28]
 81092e2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 81092e4:	4b41      	ldr	r3, [pc, #260]	@ (81093ec <HAL_ETH_MspInit+0x168>)
 81092e6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 81092ea:	4a40      	ldr	r2, [pc, #256]	@ (81093ec <HAL_ETH_MspInit+0x168>)
 81092ec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 81092f0:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 81092f4:	4b3d      	ldr	r3, [pc, #244]	@ (81093ec <HAL_ETH_MspInit+0x168>)
 81092f6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 81092fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 81092fe:	61bb      	str	r3, [r7, #24]
 8109300:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8109302:	4b3a      	ldr	r3, [pc, #232]	@ (81093ec <HAL_ETH_MspInit+0x168>)
 8109304:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8109308:	4a38      	ldr	r2, [pc, #224]	@ (81093ec <HAL_ETH_MspInit+0x168>)
 810930a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 810930e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8109312:	4b36      	ldr	r3, [pc, #216]	@ (81093ec <HAL_ETH_MspInit+0x168>)
 8109314:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8109318:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 810931c:	617b      	str	r3, [r7, #20]
 810931e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8109320:	4b32      	ldr	r3, [pc, #200]	@ (81093ec <HAL_ETH_MspInit+0x168>)
 8109322:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8109326:	4a31      	ldr	r2, [pc, #196]	@ (81093ec <HAL_ETH_MspInit+0x168>)
 8109328:	f043 0304 	orr.w	r3, r3, #4
 810932c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8109330:	4b2e      	ldr	r3, [pc, #184]	@ (81093ec <HAL_ETH_MspInit+0x168>)
 8109332:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8109336:	f003 0304 	and.w	r3, r3, #4
 810933a:	613b      	str	r3, [r7, #16]
 810933c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 810933e:	4b2b      	ldr	r3, [pc, #172]	@ (81093ec <HAL_ETH_MspInit+0x168>)
 8109340:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8109344:	4a29      	ldr	r2, [pc, #164]	@ (81093ec <HAL_ETH_MspInit+0x168>)
 8109346:	f043 0301 	orr.w	r3, r3, #1
 810934a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 810934e:	4b27      	ldr	r3, [pc, #156]	@ (81093ec <HAL_ETH_MspInit+0x168>)
 8109350:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8109354:	f003 0301 	and.w	r3, r3, #1
 8109358:	60fb      	str	r3, [r7, #12]
 810935a:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> ETH_REF_CLK
    PA7     ------> ETH_CRS_DV
    PC4     ------> ETH_RXD0
    PC5     ------> ETH_RXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 810935c:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 8109360:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8109362:	2302      	movs	r3, #2
 8109364:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8109366:	2300      	movs	r3, #0
 8109368:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 810936a:	2303      	movs	r3, #3
 810936c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 810936e:	230b      	movs	r3, #11
 8109370:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8109372:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8109376:	4619      	mov	r1, r3
 8109378:	481d      	ldr	r0, [pc, #116]	@ (81093f0 <HAL_ETH_MspInit+0x16c>)
 810937a:	f004 fd1b 	bl	810ddb4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 810937e:	2332      	movs	r3, #50	@ 0x32
 8109380:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8109382:	2302      	movs	r3, #2
 8109384:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8109386:	2300      	movs	r3, #0
 8109388:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 810938a:	2303      	movs	r3, #3
 810938c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 810938e:	230b      	movs	r3, #11
 8109390:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8109392:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8109396:	4619      	mov	r1, r3
 8109398:	4816      	ldr	r0, [pc, #88]	@ (81093f4 <HAL_ETH_MspInit+0x170>)
 810939a:	f004 fd0b 	bl	810ddb4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_7;
 810939e:	2386      	movs	r3, #134	@ 0x86
 81093a0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81093a2:	2302      	movs	r3, #2
 81093a4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81093a6:	2300      	movs	r3, #0
 81093a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 81093aa:	2303      	movs	r3, #3
 81093ac:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 81093ae:	230b      	movs	r3, #11
 81093b0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 81093b2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 81093b6:	4619      	mov	r1, r3
 81093b8:	480f      	ldr	r0, [pc, #60]	@ (81093f8 <HAL_ETH_MspInit+0x174>)
 81093ba:	f004 fcfb 	bl	810ddb4 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 81093be:	2200      	movs	r2, #0
 81093c0:	2105      	movs	r1, #5
 81093c2:	203d      	movs	r0, #61	@ 0x3d
 81093c4:	f002 ff3c 	bl	810c240 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 81093c8:	203d      	movs	r0, #61	@ 0x3d
 81093ca:	f002 ff53 	bl	810c274 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(ETH_WKUP_IRQn, 6, 0);
 81093ce:	2200      	movs	r2, #0
 81093d0:	2106      	movs	r1, #6
 81093d2:	203e      	movs	r0, #62	@ 0x3e
 81093d4:	f002 ff34 	bl	810c240 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_WKUP_IRQn);
 81093d8:	203e      	movs	r0, #62	@ 0x3e
 81093da:	f002 ff4b 	bl	810c274 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 81093de:	bf00      	nop
 81093e0:	3738      	adds	r7, #56	@ 0x38
 81093e2:	46bd      	mov	sp, r7
 81093e4:	bd80      	pop	{r7, pc}
 81093e6:	bf00      	nop
 81093e8:	40028000 	.word	0x40028000
 81093ec:	58024400 	.word	0x58024400
 81093f0:	58021800 	.word	0x58021800
 81093f4:	58020800 	.word	0x58020800
 81093f8:	58020000 	.word	0x58020000

081093fc <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 81093fc:	b580      	push	{r7, lr}
 81093fe:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 8109400:	4802      	ldr	r0, [pc, #8]	@ (810940c <ETH_PHY_IO_Init+0x10>)
 8109402:	f003 feed 	bl	810d1e0 <HAL_ETH_SetMDIOClockRange>

  return 0;
 8109406:	2300      	movs	r3, #0
}
 8109408:	4618      	mov	r0, r3
 810940a:	bd80      	pop	{r7, pc}
 810940c:	10000318 	.word	0x10000318

08109410 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 8109410:	b480      	push	{r7}
 8109412:	af00      	add	r7, sp, #0
  return 0;
 8109414:	2300      	movs	r3, #0
}
 8109416:	4618      	mov	r0, r3
 8109418:	46bd      	mov	sp, r7
 810941a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810941e:	4770      	bx	lr

08109420 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8109420:	b580      	push	{r7, lr}
 8109422:	b084      	sub	sp, #16
 8109424:	af00      	add	r7, sp, #0
 8109426:	60f8      	str	r0, [r7, #12]
 8109428:	60b9      	str	r1, [r7, #8]
 810942a:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 810942c:	687b      	ldr	r3, [r7, #4]
 810942e:	68ba      	ldr	r2, [r7, #8]
 8109430:	68f9      	ldr	r1, [r7, #12]
 8109432:	4807      	ldr	r0, [pc, #28]	@ (8109450 <ETH_PHY_IO_ReadReg+0x30>)
 8109434:	f003 fc3e 	bl	810ccb4 <HAL_ETH_ReadPHYRegister>
 8109438:	4603      	mov	r3, r0
 810943a:	2b00      	cmp	r3, #0
 810943c:	d002      	beq.n	8109444 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 810943e:	f04f 33ff 	mov.w	r3, #4294967295
 8109442:	e000      	b.n	8109446 <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 8109444:	2300      	movs	r3, #0
}
 8109446:	4618      	mov	r0, r3
 8109448:	3710      	adds	r7, #16
 810944a:	46bd      	mov	sp, r7
 810944c:	bd80      	pop	{r7, pc}
 810944e:	bf00      	nop
 8109450:	10000318 	.word	0x10000318

08109454 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8109454:	b580      	push	{r7, lr}
 8109456:	b084      	sub	sp, #16
 8109458:	af00      	add	r7, sp, #0
 810945a:	60f8      	str	r0, [r7, #12]
 810945c:	60b9      	str	r1, [r7, #8]
 810945e:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8109460:	687b      	ldr	r3, [r7, #4]
 8109462:	68ba      	ldr	r2, [r7, #8]
 8109464:	68f9      	ldr	r1, [r7, #12]
 8109466:	4807      	ldr	r0, [pc, #28]	@ (8109484 <ETH_PHY_IO_WriteReg+0x30>)
 8109468:	f003 fc78 	bl	810cd5c <HAL_ETH_WritePHYRegister>
 810946c:	4603      	mov	r3, r0
 810946e:	2b00      	cmp	r3, #0
 8109470:	d002      	beq.n	8109478 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 8109472:	f04f 33ff 	mov.w	r3, #4294967295
 8109476:	e000      	b.n	810947a <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 8109478:	2300      	movs	r3, #0
}
 810947a:	4618      	mov	r0, r3
 810947c:	3710      	adds	r7, #16
 810947e:	46bd      	mov	sp, r7
 8109480:	bd80      	pop	{r7, pc}
 8109482:	bf00      	nop
 8109484:	10000318 	.word	0x10000318

08109488 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8109488:	b580      	push	{r7, lr}
 810948a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 810948c:	f002 fe00 	bl	810c090 <HAL_GetTick>
 8109490:	4603      	mov	r3, r0
}
 8109492:	4618      	mov	r0, r3
 8109494:	bd80      	pop	{r7, pc}
	...

08109498 <ethernet_link_thread>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_thread(void* argument)
{
 8109498:	b580      	push	{r7, lr}
 810949a:	b0a0      	sub	sp, #128	@ 0x80
 810949c:	af00      	add	r7, sp, #0
 810949e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 81094a0:	f107 0308 	add.w	r3, r7, #8
 81094a4:	2264      	movs	r2, #100	@ 0x64
 81094a6:	2100      	movs	r1, #0
 81094a8:	4618      	mov	r0, r3
 81094aa:	f01a fcf7 	bl	8123e9c <memset>
  int32_t PHYLinkState = 0;
 81094ae:	2300      	movs	r3, #0
 81094b0:	673b      	str	r3, [r7, #112]	@ 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 81094b2:	2300      	movs	r3, #0
 81094b4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 81094b6:	2300      	movs	r3, #0
 81094b8:	67bb      	str	r3, [r7, #120]	@ 0x78
 81094ba:	2300      	movs	r3, #0
 81094bc:	677b      	str	r3, [r7, #116]	@ 0x74

  struct netif *netif = (struct netif *) argument;
 81094be:	687b      	ldr	r3, [r7, #4]
 81094c0:	66fb      	str	r3, [r7, #108]	@ 0x6c

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 81094c2:	483a      	ldr	r0, [pc, #232]	@ (81095ac <ethernet_link_thread+0x114>)
 81094c4:	f002 fcce 	bl	810be64 <LAN8742_GetLinkState>
 81094c8:	6738      	str	r0, [r7, #112]	@ 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 81094ca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 81094cc:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 81094d0:	089b      	lsrs	r3, r3, #2
 81094d2:	f003 0301 	and.w	r3, r3, #1
 81094d6:	b2db      	uxtb	r3, r3
 81094d8:	2b00      	cmp	r3, #0
 81094da:	d00c      	beq.n	81094f6 <ethernet_link_thread+0x5e>
 81094dc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 81094de:	2b01      	cmp	r3, #1
 81094e0:	dc09      	bgt.n	81094f6 <ethernet_link_thread+0x5e>
  {
    HAL_ETH_Stop_IT(&heth);
 81094e2:	4833      	ldr	r0, [pc, #204]	@ (81095b0 <ethernet_link_thread+0x118>)
 81094e4:	f003 f85b 	bl	810c59e <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 81094e8:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 81094ea:	f011 fbb5 	bl	811ac58 <netif_set_down>
    netif_set_link_down(netif);
 81094ee:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 81094f0:	f011 fc18 	bl	811ad24 <netif_set_link_down>
 81094f4:	e055      	b.n	81095a2 <ethernet_link_thread+0x10a>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 81094f6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 81094f8:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 81094fc:	f003 0304 	and.w	r3, r3, #4
 8109500:	2b00      	cmp	r3, #0
 8109502:	d14e      	bne.n	81095a2 <ethernet_link_thread+0x10a>
 8109504:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8109506:	2b01      	cmp	r3, #1
 8109508:	dd4b      	ble.n	81095a2 <ethernet_link_thread+0x10a>
  {
    switch (PHYLinkState)
 810950a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 810950c:	3b02      	subs	r3, #2
 810950e:	2b03      	cmp	r3, #3
 8109510:	d82a      	bhi.n	8109568 <ethernet_link_thread+0xd0>
 8109512:	a201      	add	r2, pc, #4	@ (adr r2, 8109518 <ethernet_link_thread+0x80>)
 8109514:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8109518:	08109529 	.word	0x08109529
 810951c:	0810953b 	.word	0x0810953b
 8109520:	0810954b 	.word	0x0810954b
 8109524:	0810955b 	.word	0x0810955b
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 8109528:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 810952c:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 810952e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8109532:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8109534:	2301      	movs	r3, #1
 8109536:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8109538:	e017      	b.n	810956a <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 810953a:	2300      	movs	r3, #0
 810953c:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 810953e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8109542:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8109544:	2301      	movs	r3, #1
 8109546:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8109548:	e00f      	b.n	810956a <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 810954a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 810954e:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 8109550:	2300      	movs	r3, #0
 8109552:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8109554:	2301      	movs	r3, #1
 8109556:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8109558:	e007      	b.n	810956a <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 810955a:	2300      	movs	r3, #0
 810955c:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 810955e:	2300      	movs	r3, #0
 8109560:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8109562:	2301      	movs	r3, #1
 8109564:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8109566:	e000      	b.n	810956a <ethernet_link_thread+0xd2>
    default:
      break;
 8109568:	bf00      	nop
    }

    if(linkchanged)
 810956a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 810956c:	2b00      	cmp	r3, #0
 810956e:	d018      	beq.n	81095a2 <ethernet_link_thread+0x10a>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8109570:	f107 0308 	add.w	r3, r7, #8
 8109574:	4619      	mov	r1, r3
 8109576:	480e      	ldr	r0, [pc, #56]	@ (81095b0 <ethernet_link_thread+0x118>)
 8109578:	f003 fc44 	bl	810ce04 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 810957c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 810957e:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 8109580:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8109582:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8109584:	f107 0308 	add.w	r3, r7, #8
 8109588:	4619      	mov	r1, r3
 810958a:	4809      	ldr	r0, [pc, #36]	@ (81095b0 <ethernet_link_thread+0x118>)
 810958c:	f003 fe0e 	bl	810d1ac <HAL_ETH_SetMACConfig>
      HAL_ETH_Start_IT(&heth);
 8109590:	4807      	ldr	r0, [pc, #28]	@ (81095b0 <ethernet_link_thread+0x118>)
 8109592:	f002 ff8f 	bl	810c4b4 <HAL_ETH_Start_IT>
      netif_set_up(netif);
 8109596:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8109598:	f011 faf2 	bl	811ab80 <netif_set_up>
      netif_set_link_up(netif);
 810959c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 810959e:	f011 fb8d 	bl	811acbc <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 81095a2:	2064      	movs	r0, #100	@ 0x64
 81095a4:	f009 fa93 	bl	8112ace <osDelay>
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 81095a8:	e78b      	b.n	81094c2 <ethernet_link_thread+0x2a>
 81095aa:	bf00      	nop
 81095ac:	10000400 	.word	0x10000400
 81095b0:	10000318 	.word	0x10000318

081095b4 <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 81095b4:	b580      	push	{r7, lr}
 81095b6:	b086      	sub	sp, #24
 81095b8:	af02      	add	r7, sp, #8
 81095ba:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 81095bc:	4812      	ldr	r0, [pc, #72]	@ (8109608 <HAL_ETH_RxAllocateCallback+0x54>)
 81095be:	f011 f853 	bl	811a668 <memp_malloc_pool>
 81095c2:	60f8      	str	r0, [r7, #12]
  if (p)
 81095c4:	68fb      	ldr	r3, [r7, #12]
 81095c6:	2b00      	cmp	r3, #0
 81095c8:	d014      	beq.n	81095f4 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 81095ca:	68fb      	ldr	r3, [r7, #12]
 81095cc:	f103 0220 	add.w	r2, r3, #32
 81095d0:	687b      	ldr	r3, [r7, #4]
 81095d2:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 81095d4:	68fb      	ldr	r3, [r7, #12]
 81095d6:	4a0d      	ldr	r2, [pc, #52]	@ (810960c <HAL_ETH_RxAllocateCallback+0x58>)
 81095d8:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 81095da:	687b      	ldr	r3, [r7, #4]
 81095dc:	681b      	ldr	r3, [r3, #0]
 81095de:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 81095e2:	9201      	str	r2, [sp, #4]
 81095e4:	9300      	str	r3, [sp, #0]
 81095e6:	68fb      	ldr	r3, [r7, #12]
 81095e8:	2241      	movs	r2, #65	@ 0x41
 81095ea:	2100      	movs	r1, #0
 81095ec:	2000      	movs	r0, #0
 81095ee:	f011 fdbd 	bl	811b16c <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 81095f2:	e005      	b.n	8109600 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 81095f4:	4b06      	ldr	r3, [pc, #24]	@ (8109610 <HAL_ETH_RxAllocateCallback+0x5c>)
 81095f6:	2201      	movs	r2, #1
 81095f8:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 81095fa:	687b      	ldr	r3, [r7, #4]
 81095fc:	2200      	movs	r2, #0
 81095fe:	601a      	str	r2, [r3, #0]
}
 8109600:	bf00      	nop
 8109602:	3710      	adds	r7, #16
 8109604:	46bd      	mov	sp, r7
 8109606:	bd80      	pop	{r7, pc}
 8109608:	081283dc 	.word	0x081283dc
 810960c:	08109235 	.word	0x08109235
 8109610:	1000030c 	.word	0x1000030c

08109614 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 8109614:	b480      	push	{r7}
 8109616:	b089      	sub	sp, #36	@ 0x24
 8109618:	af00      	add	r7, sp, #0
 810961a:	60f8      	str	r0, [r7, #12]
 810961c:	60b9      	str	r1, [r7, #8]
 810961e:	607a      	str	r2, [r7, #4]
 8109620:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 8109622:	68fb      	ldr	r3, [r7, #12]
 8109624:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 8109626:	68bb      	ldr	r3, [r7, #8]
 8109628:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 810962a:	2300      	movs	r3, #0
 810962c:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 810962e:	687b      	ldr	r3, [r7, #4]
 8109630:	3b20      	subs	r3, #32
 8109632:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 8109634:	69fb      	ldr	r3, [r7, #28]
 8109636:	2200      	movs	r2, #0
 8109638:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 810963a:	69fb      	ldr	r3, [r7, #28]
 810963c:	2200      	movs	r2, #0
 810963e:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 8109640:	69fb      	ldr	r3, [r7, #28]
 8109642:	887a      	ldrh	r2, [r7, #2]
 8109644:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 8109646:	69bb      	ldr	r3, [r7, #24]
 8109648:	681b      	ldr	r3, [r3, #0]
 810964a:	2b00      	cmp	r3, #0
 810964c:	d103      	bne.n	8109656 <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 810964e:	69bb      	ldr	r3, [r7, #24]
 8109650:	69fa      	ldr	r2, [r7, #28]
 8109652:	601a      	str	r2, [r3, #0]
 8109654:	e003      	b.n	810965e <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 8109656:	697b      	ldr	r3, [r7, #20]
 8109658:	681b      	ldr	r3, [r3, #0]
 810965a:	69fa      	ldr	r2, [r7, #28]
 810965c:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 810965e:	697b      	ldr	r3, [r7, #20]
 8109660:	69fa      	ldr	r2, [r7, #28]
 8109662:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 8109664:	69bb      	ldr	r3, [r7, #24]
 8109666:	681b      	ldr	r3, [r3, #0]
 8109668:	61fb      	str	r3, [r7, #28]
 810966a:	e009      	b.n	8109680 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 810966c:	69fb      	ldr	r3, [r7, #28]
 810966e:	891a      	ldrh	r2, [r3, #8]
 8109670:	887b      	ldrh	r3, [r7, #2]
 8109672:	4413      	add	r3, r2
 8109674:	b29a      	uxth	r2, r3
 8109676:	69fb      	ldr	r3, [r7, #28]
 8109678:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 810967a:	69fb      	ldr	r3, [r7, #28]
 810967c:	681b      	ldr	r3, [r3, #0]
 810967e:	61fb      	str	r3, [r7, #28]
 8109680:	69fb      	ldr	r3, [r7, #28]
 8109682:	2b00      	cmp	r3, #0
 8109684:	d1f2      	bne.n	810966c <HAL_ETH_RxLinkCallback+0x58>
  }

/* USER CODE END HAL ETH RxLinkCallback */
}
 8109686:	bf00      	nop
 8109688:	bf00      	nop
 810968a:	3724      	adds	r7, #36	@ 0x24
 810968c:	46bd      	mov	sp, r7
 810968e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109692:	4770      	bx	lr

08109694 <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 8109694:	b580      	push	{r7, lr}
 8109696:	b082      	sub	sp, #8
 8109698:	af00      	add	r7, sp, #0
 810969a:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 810969c:	6878      	ldr	r0, [r7, #4]
 810969e:	f011 ff1d 	bl	811b4dc <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 81096a2:	bf00      	nop
 81096a4:	3708      	adds	r7, #8
 81096a6:	46bd      	mov	sp, r7
 81096a8:	bd80      	pop	{r7, pc}
	...

081096ac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 81096ac:	f8df d034 	ldr.w	sp, [pc, #52]	@ 81096e4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 81096b0:	f002 fc60 	bl	810bf74 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 81096b4:	480c      	ldr	r0, [pc, #48]	@ (81096e8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 81096b6:	490d      	ldr	r1, [pc, #52]	@ (81096ec <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 81096b8:	4a0d      	ldr	r2, [pc, #52]	@ (81096f0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 81096ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 81096bc:	e002      	b.n	81096c4 <LoopCopyDataInit>

081096be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 81096be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 81096c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 81096c2:	3304      	adds	r3, #4

081096c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 81096c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 81096c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 81096c8:	d3f9      	bcc.n	81096be <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 81096ca:	4a0a      	ldr	r2, [pc, #40]	@ (81096f4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 81096cc:	4c0a      	ldr	r4, [pc, #40]	@ (81096f8 <LoopFillZerobss+0x22>)
  movs r3, #0
 81096ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 81096d0:	e001      	b.n	81096d6 <LoopFillZerobss>

081096d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 81096d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 81096d4:	3204      	adds	r2, #4

081096d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 81096d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 81096d8:	d3fb      	bcc.n	81096d2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 81096da:	f01a fd07 	bl	81240ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 81096de:	f7f7 fe47 	bl	8101370 <main>
  bx  lr
 81096e2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 81096e4:	10048000 	.word	0x10048000
  ldr r0, =_sdata
 81096e8:	10000000 	.word	0x10000000
  ldr r1, =_edata
 81096ec:	10000090 	.word	0x10000090
  ldr r2, =_sidata
 81096f0:	08128b88 	.word	0x08128b88
  ldr r2, =_sbss
 81096f4:	10000090 	.word	0x10000090
  ldr r4, =_ebss
 81096f8:	1000e658 	.word	0x1000e658

081096fc <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 81096fc:	e7fe      	b.n	81096fc <ADC3_IRQHandler>

081096fe <_ZNSt9__cmp_cat8__unspecC1EPS0_>:

    enum class _Ncmp : type { _Unordered = 2 };

    struct __unspec
    {
      constexpr __unspec(__unspec*) noexcept { }
 81096fe:	b480      	push	{r7}
 8109700:	b083      	sub	sp, #12
 8109702:	af00      	add	r7, sp, #0
 8109704:	6078      	str	r0, [r7, #4]
 8109706:	6039      	str	r1, [r7, #0]
 8109708:	687b      	ldr	r3, [r7, #4]
 810970a:	4618      	mov	r0, r3
 810970c:	370c      	adds	r7, #12
 810970e:	46bd      	mov	sp, r7
 8109710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109714:	4770      	bx	lr

08109716 <_ZStltSt15strong_orderingNSt9__cmp_cat8__unspecE>:
    friend constexpr bool
    operator==(strong_ordering, strong_ordering) noexcept = default;

    [[nodiscard]]
    friend constexpr bool
    operator< (strong_ordering __v, __cmp_cat::__unspec) noexcept
 8109716:	b480      	push	{r7}
 8109718:	b083      	sub	sp, #12
 810971a:	af00      	add	r7, sp, #0
 810971c:	7138      	strb	r0, [r7, #4]
 810971e:	7039      	strb	r1, [r7, #0]
    { return __v._M_value < 0; }
 8109720:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8109724:	b2db      	uxtb	r3, r3
 8109726:	09db      	lsrs	r3, r3, #7
 8109728:	b2db      	uxtb	r3, r3
 810972a:	4618      	mov	r0, r3
 810972c:	370c      	adds	r7, #12
 810972e:	46bd      	mov	sp, r7
 8109730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109734:	4770      	bx	lr

08109736 <_ZN9__gnu_cxx5__ops16__iter_less_iterEv>:
  };

  _GLIBCXX14_CONSTEXPR
  inline _Iter_less_iter
  __iter_less_iter()
  { return _Iter_less_iter(); }
 8109736:	b480      	push	{r7}
 8109738:	af00      	add	r7, sp, #0
 810973a:	bf00      	nop
 810973c:	4618      	mov	r0, r3
 810973e:	46bd      	mov	sp, r7
 8109740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109744:	4770      	bx	lr

08109746 <_ZN9__gnu_cxx5__ops15__val_comp_iterENS0_15_Iter_less_iterE>:
  { return _Val_less_iter(); }

  _GLIBCXX20_CONSTEXPR
  inline _Val_less_iter
  __val_comp_iter(_Iter_less_iter)
  { return _Val_less_iter(); }
 8109746:	b480      	push	{r7}
 8109748:	b083      	sub	sp, #12
 810974a:	af00      	add	r7, sp, #0
 810974c:	7138      	strb	r0, [r7, #4]
 810974e:	bf00      	nop
 8109750:	4618      	mov	r0, r3
 8109752:	370c      	adds	r7, #12
 8109754:	46bd      	mov	sp, r7
 8109756:	f85d 7b04 	ldr.w	r7, [sp], #4
 810975a:	4770      	bx	lr

0810975c <_ZSt4__lgi>:

  /// This is a helper function for the sort routines and for random.tcc.
  //  Precondition: __n > 0.
  inline _GLIBCXX_CONSTEXPR int
  __lg(int __n)
  { return (int)sizeof(int) * __CHAR_BIT__  - 1 - __builtin_clz(__n); }
 810975c:	b480      	push	{r7}
 810975e:	b083      	sub	sp, #12
 8109760:	af00      	add	r7, sp, #0
 8109762:	6078      	str	r0, [r7, #4]
 8109764:	687b      	ldr	r3, [r7, #4]
 8109766:	fab3 f383 	clz	r3, r3
 810976a:	f1c3 031f 	rsb	r3, r3, #31
 810976e:	4618      	mov	r0, r3
 8109770:	370c      	adds	r7, #12
 8109772:	46bd      	mov	sp, r7
 8109774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109778:	4770      	bx	lr

0810977a <_ZSt5roundf>:
#endif

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  constexpr float
  round(float __x)
  { return __builtin_roundf(__x); }
 810977a:	b580      	push	{r7, lr}
 810977c:	b082      	sub	sp, #8
 810977e:	af00      	add	r7, sp, #0
 8109780:	ed87 0a01 	vstr	s0, [r7, #4]
 8109784:	ed97 0a01 	vldr	s0, [r7, #4]
 8109788:	f019 fbee 	bl	8122f68 <roundf>
 810978c:	eef0 7a40 	vmov.f32	s15, s0
 8109790:	eeb0 0a67 	vmov.f32	s0, s15
 8109794:	3708      	adds	r7, #8
 8109796:	46bd      	mov	sp, r7
 8109798:	bd80      	pop	{r7, pc}
	...

0810979c <_ZNSt14numeric_limitsIsE3minEv>:
    struct numeric_limits<short>
    {
      static _GLIBCXX_USE_CONSTEXPR bool is_specialized = true;

      static _GLIBCXX_CONSTEXPR short
      min() _GLIBCXX_USE_NOEXCEPT { return -__SHRT_MAX__ - 1; }
 810979c:	b480      	push	{r7}
 810979e:	af00      	add	r7, sp, #0
 81097a0:	4b02      	ldr	r3, [pc, #8]	@ (81097ac <_ZNSt14numeric_limitsIsE3minEv+0x10>)
 81097a2:	4618      	mov	r0, r3
 81097a4:	46bd      	mov	sp, r7
 81097a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81097aa:	4770      	bx	lr
 81097ac:	ffff8000 	.word	0xffff8000

081097b0 <_Z15StartTask_CTempPv>:
constexpr uint16_t MCP9808_I2C_ADDRESS 	= 0x18 << 1;  // MCP9808 address (shift for HAL I2C)
constexpr uint8_t  MCP9808_TEMP_REG    	= 0x05;       // Temperature register


void StartTask_CTemp(void *argument)
{
 81097b0:	b580      	push	{r7, lr}
 81097b2:	b088      	sub	sp, #32
 81097b4:	af00      	add	r7, sp, #0
 81097b6:	6078      	str	r0, [r7, #4]
	TemperatureTask TemperatureTaskInstance;
 81097b8:	f107 0308 	add.w	r3, r7, #8
 81097bc:	4618      	mov	r0, r3
 81097be:	f000 f831 	bl	8109824 <_ZN15TemperatureTaskC1Ev>

    for (;;)
    {
    	TemperatureTaskInstance.process();
 81097c2:	f107 0308 	add.w	r3, r7, #8
 81097c6:	4618      	mov	r0, r3
 81097c8:	f000 f848 	bl	810985c <_ZN15TemperatureTask7processEv>
    	osDelay(2000);
 81097cc:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 81097d0:	f009 f97d 	bl	8112ace <osDelay>
    	TemperatureTaskInstance.process();
 81097d4:	bf00      	nop
 81097d6:	e7f4      	b.n	81097c2 <_Z15StartTask_CTempPv+0x12>

081097d8 <_ZNSt12_Vector_baseIfSaIfEE12_Vector_implD1Ev>:
      struct _Vector_impl
 81097d8:	b580      	push	{r7, lr}
 81097da:	b082      	sub	sp, #8
 81097dc:	af00      	add	r7, sp, #0
 81097de:	6078      	str	r0, [r7, #4]
 81097e0:	6878      	ldr	r0, [r7, #4]
 81097e2:	f000 f9da 	bl	8109b9a <_ZNSaIfED1Ev>
 81097e6:	687b      	ldr	r3, [r7, #4]
 81097e8:	4618      	mov	r0, r3
 81097ea:	3708      	adds	r7, #8
 81097ec:	46bd      	mov	sp, r7
 81097ee:	bd80      	pop	{r7, pc}

081097f0 <_ZNSt12_Vector_baseIfSaIfEEC1Ev>:
      _Vector_base() = default;
 81097f0:	b580      	push	{r7, lr}
 81097f2:	b082      	sub	sp, #8
 81097f4:	af00      	add	r7, sp, #0
 81097f6:	6078      	str	r0, [r7, #4]
 81097f8:	687b      	ldr	r3, [r7, #4]
 81097fa:	4618      	mov	r0, r3
 81097fc:	f000 f9bd 	bl	8109b7a <_ZNSt12_Vector_baseIfSaIfEE12_Vector_implC1Ev>
 8109800:	687b      	ldr	r3, [r7, #4]
 8109802:	4618      	mov	r0, r3
 8109804:	3708      	adds	r7, #8
 8109806:	46bd      	mov	sp, r7
 8109808:	bd80      	pop	{r7, pc}

0810980a <_ZNSt6vectorIfSaIfEEC1Ev>:
      vector() = default;
 810980a:	b580      	push	{r7, lr}
 810980c:	b082      	sub	sp, #8
 810980e:	af00      	add	r7, sp, #0
 8109810:	6078      	str	r0, [r7, #4]
 8109812:	687b      	ldr	r3, [r7, #4]
 8109814:	4618      	mov	r0, r3
 8109816:	f7ff ffeb 	bl	81097f0 <_ZNSt12_Vector_baseIfSaIfEEC1Ev>
 810981a:	687b      	ldr	r3, [r7, #4]
 810981c:	4618      	mov	r0, r3
 810981e:	3708      	adds	r7, #8
 8109820:	46bd      	mov	sp, r7
 8109822:	bd80      	pop	{r7, pc}

08109824 <_ZN15TemperatureTaskC1Ev>:
    }
}

TemperatureTask::TemperatureTask() : event_bus(EventBus(queueToTemperature, EVENT_CLIENT_THERMOMETER))
 8109824:	b580      	push	{r7, lr}
 8109826:	b082      	sub	sp, #8
 8109828:	af00      	add	r7, sp, #0
 810982a:	6078      	str	r0, [r7, #4]
 810982c:	687b      	ldr	r3, [r7, #4]
 810982e:	4618      	mov	r0, r3
 8109830:	f7ff ffeb 	bl	810980a <_ZNSt6vectorIfSaIfEEC1Ev>
 8109834:	687b      	ldr	r3, [r7, #4]
 8109836:	330c      	adds	r3, #12
 8109838:	4a07      	ldr	r2, [pc, #28]	@ (8109858 <_ZN15TemperatureTaskC1Ev+0x34>)
 810983a:	6811      	ldr	r1, [r2, #0]
 810983c:	2204      	movs	r2, #4
 810983e:	4618      	mov	r0, r3
 8109840:	f7fc fa04 	bl	8105c4c <_ZN8EventBusC1EP15QueueDefinition12EEventClient>
{
	measurements.reserve(MEASUREMENTS_COUNT);
 8109844:	687b      	ldr	r3, [r7, #4]
 8109846:	2106      	movs	r1, #6
 8109848:	4618      	mov	r0, r3
 810984a:	f000 f9db 	bl	8109c04 <_ZNSt6vectorIfSaIfEE7reserveEj>
}
 810984e:	687b      	ldr	r3, [r7, #4]
 8109850:	4618      	mov	r0, r3
 8109852:	3708      	adds	r7, #8
 8109854:	46bd      	mov	sp, r7
 8109856:	bd80      	pop	{r7, pc}
 8109858:	100001d8 	.word	0x100001d8

0810985c <_ZN15TemperatureTask7processEv>:

void TemperatureTask::process()
{
 810985c:	b5f0      	push	{r4, r5, r6, r7, lr}
 810985e:	b08f      	sub	sp, #60	@ 0x3c
 8109860:	af04      	add	r7, sp, #16
 8109862:	6078      	str	r0, [r7, #4]
	uint32_t err = doMeasurement();
 8109864:	6878      	ldr	r0, [r7, #4]
 8109866:	f000 f8b5 	bl	81099d4 <_ZN15TemperatureTask13doMeasurementEv>
 810986a:	6278      	str	r0, [r7, #36]	@ 0x24
	if( err != HAL_I2C_ERROR_NONE)
 810986c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810986e:	2b00      	cmp	r3, #0
 8109870:	d130      	bne.n	81098d4 <_ZN15TemperatureTask7processEv+0x78>
	{
		return;
	}
	short int measurement = getMedian();
 8109872:	6878      	ldr	r0, [r7, #4]
 8109874:	f000 f834 	bl	81098e0 <_ZN15TemperatureTask9getMedianEv>
 8109878:	4603      	mov	r3, r0
 810987a:	847b      	strh	r3, [r7, #34]	@ 0x22
	if(measurement == std::numeric_limits<short int>::min())
 810987c:	f7ff ff8e 	bl	810979c <_ZNSt14numeric_limitsIsE3minEv>
 8109880:	4603      	mov	r3, r0
 8109882:	461a      	mov	r2, r3
 8109884:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8109888:	4293      	cmp	r3, r2
 810988a:	bf0c      	ite	eq
 810988c:	2301      	moveq	r3, #1
 810988e:	2300      	movne	r3, #0
 8109890:	b2db      	uxtb	r3, r3
 8109892:	2b00      	cmp	r3, #0
 8109894:	d120      	bne.n	81098d8 <_ZN15TemperatureTask7processEv+0x7c>
	{
		return;
	}
	EEventClient receiver = EVENT_CLIENT_FRONTEND;
 8109896:	2300      	movs	r3, #0
 8109898:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
	EEventType event = EVENT_UPDATE_ROOM_TEMPERATURE;
 810989c:	2386      	movs	r3, #134	@ 0x86
 810989e:	f887 3020 	strb.w	r3, [r7, #32]
	UMessageData data;
	data.room_temperature = measurement;
 81098a2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 81098a4:	81bb      	strh	r3, [r7, #12]
	event_bus.send(event, data, receiver);
 81098a6:	687b      	ldr	r3, [r7, #4]
 81098a8:	f103 050c 	add.w	r5, r3, #12
 81098ac:	f897 6020 	ldrb.w	r6, [r7, #32]
 81098b0:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 81098b4:	9303      	str	r3, [sp, #12]
 81098b6:	466c      	mov	r4, sp
 81098b8:	f107 0314 	add.w	r3, r7, #20
 81098bc:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 81098c0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 81098c4:	f107 030c 	add.w	r3, r7, #12
 81098c8:	cb0c      	ldmia	r3, {r2, r3}
 81098ca:	4631      	mov	r1, r6
 81098cc:	4628      	mov	r0, r5
 81098ce:	f7fc f9d7 	bl	8105c80 <_ZN8EventBus4sendE10EEventType12UMessageData12EEventClient>
 81098d2:	e002      	b.n	81098da <_ZN15TemperatureTask7processEv+0x7e>
		return;
 81098d4:	bf00      	nop
 81098d6:	e000      	b.n	81098da <_ZN15TemperatureTask7processEv+0x7e>
		return;
 81098d8:	bf00      	nop
}
 81098da:	372c      	adds	r7, #44	@ 0x2c
 81098dc:	46bd      	mov	sp, r7
 81098de:	bdf0      	pop	{r4, r5, r6, r7, pc}

081098e0 <_ZN15TemperatureTask9getMedianEv>:

short int TemperatureTask::getMedian()
{
 81098e0:	b590      	push	{r4, r7, lr}
 81098e2:	ed2d 8b02 	vpush	{d8}
 81098e6:	b089      	sub	sp, #36	@ 0x24
 81098e8:	af00      	add	r7, sp, #0
 81098ea:	6078      	str	r0, [r7, #4]
	short int median = std::numeric_limits<short>::min();
 81098ec:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 81098f0:	83fb      	strh	r3, [r7, #30]
	size_t currMesSize = measurements.size();
 81098f2:	687b      	ldr	r3, [r7, #4]
 81098f4:	4618      	mov	r0, r3
 81098f6:	f000 f974 	bl	8109be2 <_ZNKSt6vectorIfSaIfEE4sizeEv>
 81098fa:	61b8      	str	r0, [r7, #24]

	if(currMesSize > 0)
 81098fc:	69bb      	ldr	r3, [r7, #24]
 81098fe:	2b00      	cmp	r3, #0
 8109900:	d05f      	beq.n	81099c2 <_ZN15TemperatureTask9getMedianEv+0xe2>
	{
		std::vector<float> sortedCopy = measurements;
 8109902:	687a      	ldr	r2, [r7, #4]
 8109904:	f107 030c 	add.w	r3, r7, #12
 8109908:	4611      	mov	r1, r2
 810990a:	4618      	mov	r0, r3
 810990c:	f000 f9d4 	bl	8109cb8 <_ZNSt6vectorIfSaIfEEC1ERKS1_>
		std::sort(sortedCopy.begin(), sortedCopy.end());
 8109910:	f107 030c 	add.w	r3, r7, #12
 8109914:	4618      	mov	r0, r3
 8109916:	f000 fa0c 	bl	8109d32 <_ZNSt6vectorIfSaIfEE5beginEv>
 810991a:	4604      	mov	r4, r0
 810991c:	f107 030c 	add.w	r3, r7, #12
 8109920:	4618      	mov	r0, r3
 8109922:	f000 fa16 	bl	8109d52 <_ZNSt6vectorIfSaIfEE3endEv>
 8109926:	4603      	mov	r3, r0
 8109928:	4619      	mov	r1, r3
 810992a:	4620      	mov	r0, r4
 810992c:	f000 fa22 	bl	8109d74 <_ZSt4sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEvT_S7_>

		if(currMesSize % 2 == 0)
 8109930:	69bb      	ldr	r3, [r7, #24]
 8109932:	f003 0301 	and.w	r3, r3, #1
 8109936:	2b00      	cmp	r3, #0
 8109938:	d128      	bne.n	810998c <_ZN15TemperatureTask9getMedianEv+0xac>
		{
			median = static_cast<short int>(std::round((sortedCopy[currMesSize / 2 - 1] + sortedCopy[currMesSize / 2]) / 2));
 810993a:	69bb      	ldr	r3, [r7, #24]
 810993c:	085b      	lsrs	r3, r3, #1
 810993e:	1e5a      	subs	r2, r3, #1
 8109940:	f107 030c 	add.w	r3, r7, #12
 8109944:	4611      	mov	r1, r2
 8109946:	4618      	mov	r0, r3
 8109948:	f000 fa24 	bl	8109d94 <_ZNSt6vectorIfSaIfEEixEj>
 810994c:	4603      	mov	r3, r0
 810994e:	ed93 8a00 	vldr	s16, [r3]
 8109952:	69bb      	ldr	r3, [r7, #24]
 8109954:	085a      	lsrs	r2, r3, #1
 8109956:	f107 030c 	add.w	r3, r7, #12
 810995a:	4611      	mov	r1, r2
 810995c:	4618      	mov	r0, r3
 810995e:	f000 fa19 	bl	8109d94 <_ZNSt6vectorIfSaIfEEixEj>
 8109962:	4603      	mov	r3, r0
 8109964:	edd3 7a00 	vldr	s15, [r3]
 8109968:	ee78 7a27 	vadd.f32	s15, s16, s15
 810996c:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8109970:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8109974:	eeb0 0a47 	vmov.f32	s0, s14
 8109978:	f7ff feff 	bl	810977a <_ZSt5roundf>
 810997c:	eef0 7a40 	vmov.f32	s15, s0
 8109980:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8109984:	ee17 3a90 	vmov	r3, s15
 8109988:	83fb      	strh	r3, [r7, #30]
 810998a:	e015      	b.n	81099b8 <_ZN15TemperatureTask9getMedianEv+0xd8>
		}
		else
		{
			median = static_cast<short int>(std::round(sortedCopy[currMesSize / 2]));
 810998c:	69bb      	ldr	r3, [r7, #24]
 810998e:	085a      	lsrs	r2, r3, #1
 8109990:	f107 030c 	add.w	r3, r7, #12
 8109994:	4611      	mov	r1, r2
 8109996:	4618      	mov	r0, r3
 8109998:	f000 f9fc 	bl	8109d94 <_ZNSt6vectorIfSaIfEEixEj>
 810999c:	4603      	mov	r3, r0
 810999e:	edd3 7a00 	vldr	s15, [r3]
 81099a2:	eeb0 0a67 	vmov.f32	s0, s15
 81099a6:	f7ff fee8 	bl	810977a <_ZSt5roundf>
 81099aa:	eef0 7a40 	vmov.f32	s15, s0
 81099ae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 81099b2:	ee17 3a90 	vmov	r3, s15
 81099b6:	83fb      	strh	r3, [r7, #30]
		}
	}
 81099b8:	f107 030c 	add.w	r3, r7, #12
 81099bc:	4618      	mov	r0, r3
 81099be:	f000 f8c1 	bl	8109b44 <_ZNSt6vectorIfSaIfEED1Ev>
	return median;
 81099c2:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
}
 81099c6:	4618      	mov	r0, r3
 81099c8:	3724      	adds	r7, #36	@ 0x24
 81099ca:	46bd      	mov	sp, r7
 81099cc:	ecbd 8b02 	vpop	{d8}
 81099d0:	bd90      	pop	{r4, r7, pc}
	...

081099d4 <_ZN15TemperatureTask13doMeasurementEv>:

uint32_t TemperatureTask::doMeasurement()
{
 81099d4:	b5b0      	push	{r4, r5, r7, lr}
 81099d6:	ed2d 8b02 	vpush	{d8}
 81099da:	b090      	sub	sp, #64	@ 0x40
 81099dc:	af04      	add	r7, sp, #16
 81099de:	6078      	str	r0, [r7, #4]
	uint8_t data[2];

    if (HAL_I2C_Mem_Read(&hi2c4, MCP9808_I2C_ADDRESS, MCP9808_TEMP_REG, I2C_MEMADD_SIZE_8BIT, data, 2, 1000u) != HAL_OK)
 81099e0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 81099e4:	9302      	str	r3, [sp, #8]
 81099e6:	2302      	movs	r3, #2
 81099e8:	9301      	str	r3, [sp, #4]
 81099ea:	f107 030c 	add.w	r3, r7, #12
 81099ee:	9300      	str	r3, [sp, #0]
 81099f0:	2301      	movs	r3, #1
 81099f2:	2205      	movs	r2, #5
 81099f4:	2130      	movs	r1, #48	@ 0x30
 81099f6:	4852      	ldr	r0, [pc, #328]	@ (8109b40 <_ZN15TemperatureTask13doMeasurementEv+0x16c>)
 81099f8:	f004 fdc4 	bl	810e584 <HAL_I2C_Mem_Read>
 81099fc:	4603      	mov	r3, r0
 81099fe:	2b00      	cmp	r3, #0
 8109a00:	bf14      	ite	ne
 8109a02:	2301      	movne	r3, #1
 8109a04:	2300      	moveq	r3, #0
 8109a06:	b2db      	uxtb	r3, r3
 8109a08:	2b00      	cmp	r3, #0
 8109a0a:	d00b      	beq.n	8109a24 <_ZN15TemperatureTask13doMeasurementEv+0x50>
    {
    	uint32_t err = HAL_I2C_GetError(&hi2c4);
 8109a0c:	484c      	ldr	r0, [pc, #304]	@ (8109b40 <_ZN15TemperatureTask13doMeasurementEv+0x16c>)
 8109a0e:	f004 fed3 	bl	810e7b8 <HAL_I2C_GetError>
 8109a12:	61b8      	str	r0, [r7, #24]
        // Error handling - restart I2C4 interface
    	HAL_I2C_DeInit(&hi2c4);
 8109a14:	484a      	ldr	r0, [pc, #296]	@ (8109b40 <_ZN15TemperatureTask13doMeasurementEv+0x16c>)
 8109a16:	f004 fd86 	bl	810e526 <HAL_I2C_DeInit>
    	HAL_I2C_Init(&hi2c4);
 8109a1a:	4849      	ldr	r0, [pc, #292]	@ (8109b40 <_ZN15TemperatureTask13doMeasurementEv+0x16c>)
 8109a1c:	f004 fce8 	bl	810e3f0 <HAL_I2C_Init>
    	//do not block other tasks, try again later.
    	return err;
 8109a20:	69bb      	ldr	r3, [r7, #24]
 8109a22:	e086      	b.n	8109b32 <_ZN15TemperatureTask13doMeasurementEv+0x15e>
    }

	uint16_t dataLong;
	float tmpVal = 0;
 8109a24:	f04f 0300 	mov.w	r3, #0
 8109a28:	62fb      	str	r3, [r7, #44]	@ 0x2c
	float tmpValDec;

	dataLong = ((data[0] << 8u) | data[1]);
 8109a2a:	7b3b      	ldrb	r3, [r7, #12]
 8109a2c:	021b      	lsls	r3, r3, #8
 8109a2e:	b21a      	sxth	r2, r3
 8109a30:	7b7b      	ldrb	r3, [r7, #13]
 8109a32:	b21b      	sxth	r3, r3
 8109a34:	4313      	orrs	r3, r2
 8109a36:	b21b      	sxth	r3, r3
 8109a38:	847b      	strh	r3, [r7, #34]	@ 0x22
	/* Extract the integer part from the fixed point value */
	tmpVal = ((dataLong & 0x0FFF) >> 4);
 8109a3a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8109a3c:	091b      	lsrs	r3, r3, #4
 8109a3e:	b29b      	uxth	r3, r3
 8109a40:	b2db      	uxtb	r3, r3
 8109a42:	ee07 3a90 	vmov	s15, r3
 8109a46:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8109a4a:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c

	/* Extract decimal part */
	tmpValDec = 0.0625;
 8109a4e:	f04f 5376 	mov.w	r3, #1031798784	@ 0x3d800000
 8109a52:	62bb      	str	r3, [r7, #40]	@ 0x28
	for (int i=0; i < 4; i++)
 8109a54:	2300      	movs	r3, #0
 8109a56:	627b      	str	r3, [r7, #36]	@ 0x24
 8109a58:	e01c      	b.n	8109a94 <_ZN15TemperatureTask13doMeasurementEv+0xc0>
	{
		tmpVal += ((dataLong >> i) & 0x0001) * tmpValDec;
 8109a5a:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8109a5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8109a5e:	fa42 f303 	asr.w	r3, r2, r3
 8109a62:	f003 0301 	and.w	r3, r3, #1
 8109a66:	ee07 3a90 	vmov	s15, r3
 8109a6a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8109a6e:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8109a72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8109a76:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8109a7a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8109a7e:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
		tmpValDec *= 2u;
 8109a82:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8109a86:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8109a8a:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
	for (int i=0; i < 4; i++)
 8109a8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8109a90:	3301      	adds	r3, #1
 8109a92:	627b      	str	r3, [r7, #36]	@ 0x24
 8109a94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8109a96:	2b03      	cmp	r3, #3
 8109a98:	dddf      	ble.n	8109a5a <_ZN15TemperatureTask13doMeasurementEv+0x86>
	}

	short int measurement = static_cast<short int>(tmpVal);
 8109a9a:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8109a9e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8109aa2:	ee17 3a90 	vmov	r3, s15
 8109aa6:	843b      	strh	r3, [r7, #32]

	size_t currMesSize = measurements.size();
 8109aa8:	687b      	ldr	r3, [r7, #4]
 8109aaa:	4618      	mov	r0, r3
 8109aac:	f000 f899 	bl	8109be2 <_ZNKSt6vectorIfSaIfEE4sizeEv>
 8109ab0:	61f8      	str	r0, [r7, #28]

	if(currMesSize < MEASUREMENTS_COUNT)
 8109ab2:	69fb      	ldr	r3, [r7, #28]
 8109ab4:	2b05      	cmp	r3, #5
 8109ab6:	d80f      	bhi.n	8109ad8 <_ZN15TemperatureTask13doMeasurementEv+0x104>
	{
		measurements.push_back(measurement);
 8109ab8:	687b      	ldr	r3, [r7, #4]
 8109aba:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8109abe:	ee07 2a90 	vmov	s15, r2
 8109ac2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8109ac6:	edc7 7a04 	vstr	s15, [r7, #16]
 8109aca:	f107 0210 	add.w	r2, r7, #16
 8109ace:	4611      	mov	r1, r2
 8109ad0:	4618      	mov	r0, r3
 8109ad2:	f000 f96f 	bl	8109db4 <_ZNSt6vectorIfSaIfEE9push_backEOf>
 8109ad6:	e02b      	b.n	8109b30 <_ZN15TemperatureTask13doMeasurementEv+0x15c>
	}
	else
	{
		std::rotate(measurements.begin(), measurements.begin() + 1, measurements.end());
 8109ad8:	687b      	ldr	r3, [r7, #4]
 8109ada:	4618      	mov	r0, r3
 8109adc:	f000 f929 	bl	8109d32 <_ZNSt6vectorIfSaIfEE5beginEv>
 8109ae0:	4604      	mov	r4, r0
 8109ae2:	687b      	ldr	r3, [r7, #4]
 8109ae4:	4618      	mov	r0, r3
 8109ae6:	f000 f924 	bl	8109d32 <_ZNSt6vectorIfSaIfEE5beginEv>
 8109aea:	4603      	mov	r3, r0
 8109aec:	617b      	str	r3, [r7, #20]
 8109aee:	f107 0314 	add.w	r3, r7, #20
 8109af2:	2101      	movs	r1, #1
 8109af4:	4618      	mov	r0, r3
 8109af6:	f000 f96e 	bl	8109dd6 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 8109afa:	4605      	mov	r5, r0
 8109afc:	687b      	ldr	r3, [r7, #4]
 8109afe:	4618      	mov	r0, r3
 8109b00:	f000 f927 	bl	8109d52 <_ZNSt6vectorIfSaIfEE3endEv>
 8109b04:	4603      	mov	r3, r0
 8109b06:	461a      	mov	r2, r3
 8109b08:	4629      	mov	r1, r5
 8109b0a:	4620      	mov	r0, r4
 8109b0c:	f000 f97b 	bl	8109e06 <_ZNSt3_V26rotateIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEET_S8_S8_S8_>
		measurements[currMesSize - 1] = measurement;
 8109b10:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8109b14:	ee07 3a90 	vmov	s15, r3
 8109b18:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8109b1c:	687a      	ldr	r2, [r7, #4]
 8109b1e:	69fb      	ldr	r3, [r7, #28]
 8109b20:	3b01      	subs	r3, #1
 8109b22:	4619      	mov	r1, r3
 8109b24:	4610      	mov	r0, r2
 8109b26:	f000 f935 	bl	8109d94 <_ZNSt6vectorIfSaIfEEixEj>
 8109b2a:	4603      	mov	r3, r0
 8109b2c:	ed83 8a00 	vstr	s16, [r3]
	}
	return HAL_I2C_ERROR_NONE;
 8109b30:	2300      	movs	r3, #0
}
 8109b32:	4618      	mov	r0, r3
 8109b34:	3730      	adds	r7, #48	@ 0x30
 8109b36:	46bd      	mov	sp, r7
 8109b38:	ecbd 8b02 	vpop	{d8}
 8109b3c:	bdb0      	pop	{r4, r5, r7, pc}
 8109b3e:	bf00      	nop
 8109b40:	100000d0 	.word	0x100000d0

08109b44 <_ZNSt6vectorIfSaIfEED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 8109b44:	b5b0      	push	{r4, r5, r7, lr}
 8109b46:	b082      	sub	sp, #8
 8109b48:	af00      	add	r7, sp, #0
 8109b4a:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8109b4c:	687b      	ldr	r3, [r7, #4]
 8109b4e:	681c      	ldr	r4, [r3, #0]
 8109b50:	687b      	ldr	r3, [r7, #4]
 8109b52:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 8109b54:	687b      	ldr	r3, [r7, #4]
 8109b56:	4618      	mov	r0, r3
 8109b58:	f000 f96b 	bl	8109e32 <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 8109b5c:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8109b5e:	461a      	mov	r2, r3
 8109b60:	4629      	mov	r1, r5
 8109b62:	4620      	mov	r0, r4
 8109b64:	f000 f970 	bl	8109e48 <_ZSt8_DestroyIPffEvT_S1_RSaIT0_E>
      }
 8109b68:	687b      	ldr	r3, [r7, #4]
 8109b6a:	4618      	mov	r0, r3
 8109b6c:	f000 f820 	bl	8109bb0 <_ZNSt12_Vector_baseIfSaIfEED1Ev>
 8109b70:	687b      	ldr	r3, [r7, #4]
 8109b72:	4618      	mov	r0, r3
 8109b74:	3708      	adds	r7, #8
 8109b76:	46bd      	mov	sp, r7
 8109b78:	bdb0      	pop	{r4, r5, r7, pc}

08109b7a <_ZNSt12_Vector_baseIfSaIfEE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 8109b7a:	b580      	push	{r7, lr}
 8109b7c:	b082      	sub	sp, #8
 8109b7e:	af00      	add	r7, sp, #0
 8109b80:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 8109b82:	6878      	ldr	r0, [r7, #4]
 8109b84:	f000 f96e 	bl	8109e64 <_ZNSaIfEC1Ev>
 8109b88:	687b      	ldr	r3, [r7, #4]
 8109b8a:	4618      	mov	r0, r3
 8109b8c:	f000 f976 	bl	8109e7c <_ZNSt12_Vector_baseIfSaIfEE17_Vector_impl_dataC1Ev>
	{ }
 8109b90:	687b      	ldr	r3, [r7, #4]
 8109b92:	4618      	mov	r0, r3
 8109b94:	3708      	adds	r7, #8
 8109b96:	46bd      	mov	sp, r7
 8109b98:	bd80      	pop	{r7, pc}

08109b9a <_ZNSaIfED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8109b9a:	b480      	push	{r7}
 8109b9c:	b083      	sub	sp, #12
 8109b9e:	af00      	add	r7, sp, #0
 8109ba0:	6078      	str	r0, [r7, #4]
 8109ba2:	687b      	ldr	r3, [r7, #4]
 8109ba4:	4618      	mov	r0, r3
 8109ba6:	370c      	adds	r7, #12
 8109ba8:	46bd      	mov	sp, r7
 8109baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109bae:	4770      	bx	lr

08109bb0 <_ZNSt12_Vector_baseIfSaIfEED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8109bb0:	b580      	push	{r7, lr}
 8109bb2:	b082      	sub	sp, #8
 8109bb4:	af00      	add	r7, sp, #0
 8109bb6:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 8109bb8:	687b      	ldr	r3, [r7, #4]
 8109bba:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8109bbc:	687b      	ldr	r3, [r7, #4]
 8109bbe:	689a      	ldr	r2, [r3, #8]
 8109bc0:	687b      	ldr	r3, [r7, #4]
 8109bc2:	681b      	ldr	r3, [r3, #0]
 8109bc4:	1ad3      	subs	r3, r2, r3
 8109bc6:	109b      	asrs	r3, r3, #2
	_M_deallocate(_M_impl._M_start,
 8109bc8:	461a      	mov	r2, r3
 8109bca:	6878      	ldr	r0, [r7, #4]
 8109bcc:	f000 f96a 	bl	8109ea4 <_ZNSt12_Vector_baseIfSaIfEE13_M_deallocateEPfj>
      }
 8109bd0:	687b      	ldr	r3, [r7, #4]
 8109bd2:	4618      	mov	r0, r3
 8109bd4:	f7ff fe00 	bl	81097d8 <_ZNSt12_Vector_baseIfSaIfEE12_Vector_implD1Ev>
 8109bd8:	687b      	ldr	r3, [r7, #4]
 8109bda:	4618      	mov	r0, r3
 8109bdc:	3708      	adds	r7, #8
 8109bde:	46bd      	mov	sp, r7
 8109be0:	bd80      	pop	{r7, pc}

08109be2 <_ZNKSt6vectorIfSaIfEE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8109be2:	b480      	push	{r7}
 8109be4:	b083      	sub	sp, #12
 8109be6:	af00      	add	r7, sp, #0
 8109be8:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8109bea:	687b      	ldr	r3, [r7, #4]
 8109bec:	685a      	ldr	r2, [r3, #4]
 8109bee:	687b      	ldr	r3, [r7, #4]
 8109bf0:	681b      	ldr	r3, [r3, #0]
 8109bf2:	1ad3      	subs	r3, r2, r3
 8109bf4:	109b      	asrs	r3, r3, #2
 8109bf6:	4618      	mov	r0, r3
 8109bf8:	370c      	adds	r7, #12
 8109bfa:	46bd      	mov	sp, r7
 8109bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109c00:	4770      	bx	lr
	...

08109c04 <_ZNSt6vectorIfSaIfEE7reserveEj>:
    vector<_Tp, _Alloc>::
 8109c04:	b5b0      	push	{r4, r5, r7, lr}
 8109c06:	b084      	sub	sp, #16
 8109c08:	af00      	add	r7, sp, #0
 8109c0a:	6078      	str	r0, [r7, #4]
 8109c0c:	6039      	str	r1, [r7, #0]
      if (__n > this->max_size())
 8109c0e:	6878      	ldr	r0, [r7, #4]
 8109c10:	f000 f95b 	bl	8109eca <_ZNKSt6vectorIfSaIfEE8max_sizeEv>
 8109c14:	4602      	mov	r2, r0
 8109c16:	683b      	ldr	r3, [r7, #0]
 8109c18:	4293      	cmp	r3, r2
 8109c1a:	bf8c      	ite	hi
 8109c1c:	2301      	movhi	r3, #1
 8109c1e:	2300      	movls	r3, #0
 8109c20:	b2db      	uxtb	r3, r3
 8109c22:	2b00      	cmp	r3, #0
 8109c24:	d002      	beq.n	8109c2c <_ZNSt6vectorIfSaIfEE7reserveEj+0x28>
	__throw_length_error(__N("vector::reserve"));
 8109c26:	4823      	ldr	r0, [pc, #140]	@ (8109cb4 <_ZNSt6vectorIfSaIfEE7reserveEj+0xb0>)
 8109c28:	f019 f873 	bl	8122d12 <_ZSt20__throw_length_errorPKc>
      if (this->capacity() < __n)
 8109c2c:	6878      	ldr	r0, [r7, #4]
 8109c2e:	f000 f95d 	bl	8109eec <_ZNKSt6vectorIfSaIfEE8capacityEv>
 8109c32:	4602      	mov	r2, r0
 8109c34:	683b      	ldr	r3, [r7, #0]
 8109c36:	4293      	cmp	r3, r2
 8109c38:	bf8c      	ite	hi
 8109c3a:	2301      	movhi	r3, #1
 8109c3c:	2300      	movls	r3, #0
 8109c3e:	b2db      	uxtb	r3, r3
 8109c40:	2b00      	cmp	r3, #0
 8109c42:	d033      	beq.n	8109cac <_ZNSt6vectorIfSaIfEE7reserveEj+0xa8>
	  const size_type __old_size = size();
 8109c44:	6878      	ldr	r0, [r7, #4]
 8109c46:	f7ff ffcc 	bl	8109be2 <_ZNKSt6vectorIfSaIfEE4sizeEv>
 8109c4a:	60f8      	str	r0, [r7, #12]
	      __tmp = this->_M_allocate(__n);
 8109c4c:	687b      	ldr	r3, [r7, #4]
 8109c4e:	6839      	ldr	r1, [r7, #0]
 8109c50:	4618      	mov	r0, r3
 8109c52:	f000 f95b 	bl	8109f0c <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj>
 8109c56:	60b8      	str	r0, [r7, #8]
	      _S_relocate(this->_M_impl._M_start, this->_M_impl._M_finish,
 8109c58:	687b      	ldr	r3, [r7, #4]
 8109c5a:	681c      	ldr	r4, [r3, #0]
 8109c5c:	687b      	ldr	r3, [r7, #4]
 8109c5e:	685d      	ldr	r5, [r3, #4]
			  __tmp, _M_get_Tp_allocator());
 8109c60:	687b      	ldr	r3, [r7, #4]
 8109c62:	4618      	mov	r0, r3
 8109c64:	f000 f8e5 	bl	8109e32 <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 8109c68:	4603      	mov	r3, r0
	      _S_relocate(this->_M_impl._M_start, this->_M_impl._M_finish,
 8109c6a:	68ba      	ldr	r2, [r7, #8]
 8109c6c:	4629      	mov	r1, r5
 8109c6e:	4620      	mov	r0, r4
 8109c70:	f000 f960 	bl	8109f34 <_ZNSt6vectorIfSaIfEE11_S_relocateEPfS2_S2_RS0_>
	  _M_deallocate(this->_M_impl._M_start,
 8109c74:	6878      	ldr	r0, [r7, #4]
 8109c76:	687b      	ldr	r3, [r7, #4]
 8109c78:	6819      	ldr	r1, [r3, #0]
			this->_M_impl._M_end_of_storage
 8109c7a:	687b      	ldr	r3, [r7, #4]
 8109c7c:	689a      	ldr	r2, [r3, #8]
			- this->_M_impl._M_start);
 8109c7e:	687b      	ldr	r3, [r7, #4]
 8109c80:	681b      	ldr	r3, [r3, #0]
 8109c82:	1ad3      	subs	r3, r2, r3
 8109c84:	109b      	asrs	r3, r3, #2
	  _M_deallocate(this->_M_impl._M_start,
 8109c86:	461a      	mov	r2, r3
 8109c88:	f000 f90c 	bl	8109ea4 <_ZNSt12_Vector_baseIfSaIfEE13_M_deallocateEPfj>
	  this->_M_impl._M_start = __tmp;
 8109c8c:	687b      	ldr	r3, [r7, #4]
 8109c8e:	68ba      	ldr	r2, [r7, #8]
 8109c90:	601a      	str	r2, [r3, #0]
	  this->_M_impl._M_finish = __tmp + __old_size;
 8109c92:	68fb      	ldr	r3, [r7, #12]
 8109c94:	009b      	lsls	r3, r3, #2
 8109c96:	68ba      	ldr	r2, [r7, #8]
 8109c98:	441a      	add	r2, r3
 8109c9a:	687b      	ldr	r3, [r7, #4]
 8109c9c:	605a      	str	r2, [r3, #4]
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8109c9e:	687b      	ldr	r3, [r7, #4]
 8109ca0:	681a      	ldr	r2, [r3, #0]
 8109ca2:	683b      	ldr	r3, [r7, #0]
 8109ca4:	009b      	lsls	r3, r3, #2
 8109ca6:	441a      	add	r2, r3
 8109ca8:	687b      	ldr	r3, [r7, #4]
 8109caa:	609a      	str	r2, [r3, #8]
    }
 8109cac:	bf00      	nop
 8109cae:	3710      	adds	r7, #16
 8109cb0:	46bd      	mov	sp, r7
 8109cb2:	bdb0      	pop	{r4, r5, r7, pc}
 8109cb4:	081253f4 	.word	0x081253f4

08109cb8 <_ZNSt6vectorIfSaIfEEC1ERKS1_>:
      vector(const vector& __x)
 8109cb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8109cba:	b085      	sub	sp, #20
 8109cbc:	af00      	add	r7, sp, #0
 8109cbe:	6078      	str	r0, [r7, #4]
 8109cc0:	6039      	str	r1, [r7, #0]
	_Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()))
 8109cc2:	687c      	ldr	r4, [r7, #4]
 8109cc4:	6838      	ldr	r0, [r7, #0]
 8109cc6:	f7ff ff8c 	bl	8109be2 <_ZNKSt6vectorIfSaIfEE4sizeEv>
 8109cca:	4605      	mov	r5, r0
 8109ccc:	683b      	ldr	r3, [r7, #0]
 8109cce:	4618      	mov	r0, r3
 8109cd0:	f000 f942 	bl	8109f58 <_ZNKSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 8109cd4:	4602      	mov	r2, r0
 8109cd6:	f107 030c 	add.w	r3, r7, #12
 8109cda:	4611      	mov	r1, r2
 8109cdc:	4618      	mov	r0, r3
 8109cde:	f000 f946 	bl	8109f6e <_ZN9__gnu_cxx14__alloc_traitsISaIfEfE17_S_select_on_copyERKS1_>
 8109ce2:	f107 030c 	add.w	r3, r7, #12
 8109ce6:	461a      	mov	r2, r3
 8109ce8:	4629      	mov	r1, r5
 8109cea:	4620      	mov	r0, r4
 8109cec:	f000 f94d 	bl	8109f8a <_ZNSt12_Vector_baseIfSaIfEEC1EjRKS0_>
 8109cf0:	f107 030c 	add.w	r3, r7, #12
 8109cf4:	4618      	mov	r0, r3
 8109cf6:	f7ff ff50 	bl	8109b9a <_ZNSaIfED1Ev>
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 8109cfa:	6838      	ldr	r0, [r7, #0]
 8109cfc:	f000 f959 	bl	8109fb2 <_ZNKSt6vectorIfSaIfEE5beginEv>
 8109d00:	4605      	mov	r5, r0
 8109d02:	6838      	ldr	r0, [r7, #0]
 8109d04:	f000 f965 	bl	8109fd2 <_ZNKSt6vectorIfSaIfEE3endEv>
 8109d08:	4606      	mov	r6, r0
 8109d0a:	687b      	ldr	r3, [r7, #4]
 8109d0c:	681c      	ldr	r4, [r3, #0]
				      _M_get_Tp_allocator());
 8109d0e:	687b      	ldr	r3, [r7, #4]
 8109d10:	4618      	mov	r0, r3
 8109d12:	f000 f88e 	bl	8109e32 <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 8109d16:	4603      	mov	r3, r0
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 8109d18:	4622      	mov	r2, r4
 8109d1a:	4631      	mov	r1, r6
 8109d1c:	4628      	mov	r0, r5
 8109d1e:	f000 f969 	bl	8109ff4 <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPffET0_T_SA_S9_RSaIT1_E>
 8109d22:	4602      	mov	r2, r0
	this->_M_impl._M_finish =
 8109d24:	687b      	ldr	r3, [r7, #4]
 8109d26:	605a      	str	r2, [r3, #4]
      }
 8109d28:	687b      	ldr	r3, [r7, #4]
 8109d2a:	4618      	mov	r0, r3
 8109d2c:	3714      	adds	r7, #20
 8109d2e:	46bd      	mov	sp, r7
 8109d30:	bdf0      	pop	{r4, r5, r6, r7, pc}

08109d32 <_ZNSt6vectorIfSaIfEE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8109d32:	b580      	push	{r7, lr}
 8109d34:	b084      	sub	sp, #16
 8109d36:	af00      	add	r7, sp, #0
 8109d38:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 8109d3a:	687a      	ldr	r2, [r7, #4]
 8109d3c:	f107 030c 	add.w	r3, r7, #12
 8109d40:	4611      	mov	r1, r2
 8109d42:	4618      	mov	r0, r3
 8109d44:	f000 f974 	bl	810a030 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEC1ERKS1_>
 8109d48:	68fb      	ldr	r3, [r7, #12]
 8109d4a:	4618      	mov	r0, r3
 8109d4c:	3710      	adds	r7, #16
 8109d4e:	46bd      	mov	sp, r7
 8109d50:	bd80      	pop	{r7, pc}

08109d52 <_ZNSt6vectorIfSaIfEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8109d52:	b580      	push	{r7, lr}
 8109d54:	b084      	sub	sp, #16
 8109d56:	af00      	add	r7, sp, #0
 8109d58:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 8109d5a:	687b      	ldr	r3, [r7, #4]
 8109d5c:	1d1a      	adds	r2, r3, #4
 8109d5e:	f107 030c 	add.w	r3, r7, #12
 8109d62:	4611      	mov	r1, r2
 8109d64:	4618      	mov	r0, r3
 8109d66:	f000 f963 	bl	810a030 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEC1ERKS1_>
 8109d6a:	68fb      	ldr	r3, [r7, #12]
 8109d6c:	4618      	mov	r0, r3
 8109d6e:	3710      	adds	r7, #16
 8109d70:	46bd      	mov	sp, r7
 8109d72:	bd80      	pop	{r7, pc}

08109d74 <_ZSt4sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEvT_S7_>:
   *  @p stable_sort() if this is needed.
  */
  template<typename _RandomAccessIterator>
    _GLIBCXX20_CONSTEXPR
    inline void
    sort(_RandomAccessIterator __first, _RandomAccessIterator __last)
 8109d74:	b590      	push	{r4, r7, lr}
 8109d76:	b083      	sub	sp, #12
 8109d78:	af00      	add	r7, sp, #0
 8109d7a:	6078      	str	r0, [r7, #4]
 8109d7c:	6039      	str	r1, [r7, #0]
      __glibcxx_function_requires(_LessThanComparableConcept<
	    typename iterator_traits<_RandomAccessIterator>::value_type>)
      __glibcxx_requires_valid_range(__first, __last);
      __glibcxx_requires_irreflexive(__first, __last);

      std::__sort(__first, __last, __gnu_cxx::__ops::__iter_less_iter());
 8109d7e:	f7ff fcda 	bl	8109736 <_ZN9__gnu_cxx5__ops16__iter_less_iterEv>
 8109d82:	4622      	mov	r2, r4
 8109d84:	6839      	ldr	r1, [r7, #0]
 8109d86:	6878      	ldr	r0, [r7, #4]
 8109d88:	f000 f99a 	bl	810a0c0 <_ZSt6__sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_>
    }
 8109d8c:	bf00      	nop
 8109d8e:	370c      	adds	r7, #12
 8109d90:	46bd      	mov	sp, r7
 8109d92:	bd90      	pop	{r4, r7, pc}

08109d94 <_ZNSt6vectorIfSaIfEEixEj>:
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
 8109d94:	b480      	push	{r7}
 8109d96:	b083      	sub	sp, #12
 8109d98:	af00      	add	r7, sp, #0
 8109d9a:	6078      	str	r0, [r7, #4]
 8109d9c:	6039      	str	r1, [r7, #0]
	return *(this->_M_impl._M_start + __n);
 8109d9e:	687b      	ldr	r3, [r7, #4]
 8109da0:	681a      	ldr	r2, [r3, #0]
 8109da2:	683b      	ldr	r3, [r7, #0]
 8109da4:	009b      	lsls	r3, r3, #2
 8109da6:	4413      	add	r3, r2
      }
 8109da8:	4618      	mov	r0, r3
 8109daa:	370c      	adds	r7, #12
 8109dac:	46bd      	mov	sp, r7
 8109dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109db2:	4770      	bx	lr

08109db4 <_ZNSt6vectorIfSaIfEE9push_backEOf>:
      push_back(value_type&& __x)
 8109db4:	b580      	push	{r7, lr}
 8109db6:	b082      	sub	sp, #8
 8109db8:	af00      	add	r7, sp, #0
 8109dba:	6078      	str	r0, [r7, #4]
 8109dbc:	6039      	str	r1, [r7, #0]
      { emplace_back(std::move(__x)); }
 8109dbe:	6838      	ldr	r0, [r7, #0]
 8109dc0:	f000 f9ae 	bl	810a120 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 8109dc4:	4603      	mov	r3, r0
 8109dc6:	4619      	mov	r1, r3
 8109dc8:	6878      	ldr	r0, [r7, #4]
 8109dca:	f000 f9b4 	bl	810a136 <_ZNSt6vectorIfSaIfEE12emplace_backIJfEEERfDpOT_>
 8109dce:	bf00      	nop
 8109dd0:	3708      	adds	r7, #8
 8109dd2:	46bd      	mov	sp, r7
 8109dd4:	bd80      	pop	{r7, pc}

08109dd6 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>:
      operator+(difference_type __n) const _GLIBCXX_NOEXCEPT
 8109dd6:	b580      	push	{r7, lr}
 8109dd8:	b084      	sub	sp, #16
 8109dda:	af00      	add	r7, sp, #0
 8109ddc:	6078      	str	r0, [r7, #4]
 8109dde:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current + __n); }
 8109de0:	687b      	ldr	r3, [r7, #4]
 8109de2:	681a      	ldr	r2, [r3, #0]
 8109de4:	683b      	ldr	r3, [r7, #0]
 8109de6:	009b      	lsls	r3, r3, #2
 8109de8:	4413      	add	r3, r2
 8109dea:	60fb      	str	r3, [r7, #12]
 8109dec:	f107 020c 	add.w	r2, r7, #12
 8109df0:	f107 0308 	add.w	r3, r7, #8
 8109df4:	4611      	mov	r1, r2
 8109df6:	4618      	mov	r0, r3
 8109df8:	f000 f91a 	bl	810a030 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEC1ERKS1_>
 8109dfc:	68bb      	ldr	r3, [r7, #8]
 8109dfe:	4618      	mov	r0, r3
 8109e00:	3710      	adds	r7, #16
 8109e02:	46bd      	mov	sp, r7
 8109e04:	bd80      	pop	{r7, pc}

08109e06 <_ZNSt3_V26rotateIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEET_S8_S8_S8_>:
    rotate(_ForwardIterator __first, _ForwardIterator __middle,
 8109e06:	b590      	push	{r4, r7, lr}
 8109e08:	b085      	sub	sp, #20
 8109e0a:	af00      	add	r7, sp, #0
 8109e0c:	60f8      	str	r0, [r7, #12]
 8109e0e:	60b9      	str	r1, [r7, #8]
 8109e10:	607a      	str	r2, [r7, #4]
			   std::__iterator_category(__first));
 8109e12:	f107 030c 	add.w	r3, r7, #12
 8109e16:	4618      	mov	r0, r3
 8109e18:	f000 f9bf 	bl	810a19a <_ZSt19__iterator_categoryIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEENSt15iterator_traitsIT_E17iterator_categoryERKS8_>
      return std::__rotate(__first, __middle, __last,
 8109e1c:	4623      	mov	r3, r4
 8109e1e:	687a      	ldr	r2, [r7, #4]
 8109e20:	68b9      	ldr	r1, [r7, #8]
 8109e22:	68f8      	ldr	r0, [r7, #12]
 8109e24:	f000 f9c3 	bl	810a1ae <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEET_S8_S8_S8_St26random_access_iterator_tag>
 8109e28:	4603      	mov	r3, r0
    }
 8109e2a:	4618      	mov	r0, r3
 8109e2c:	3714      	adds	r7, #20
 8109e2e:	46bd      	mov	sp, r7
 8109e30:	bd90      	pop	{r4, r7, pc}

08109e32 <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8109e32:	b480      	push	{r7}
 8109e34:	b083      	sub	sp, #12
 8109e36:	af00      	add	r7, sp, #0
 8109e38:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8109e3a:	687b      	ldr	r3, [r7, #4]
 8109e3c:	4618      	mov	r0, r3
 8109e3e:	370c      	adds	r7, #12
 8109e40:	46bd      	mov	sp, r7
 8109e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109e46:	4770      	bx	lr

08109e48 <_ZSt8_DestroyIPffEvT_S1_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8109e48:	b580      	push	{r7, lr}
 8109e4a:	b084      	sub	sp, #16
 8109e4c:	af00      	add	r7, sp, #0
 8109e4e:	60f8      	str	r0, [r7, #12]
 8109e50:	60b9      	str	r1, [r7, #8]
 8109e52:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 8109e54:	68b9      	ldr	r1, [r7, #8]
 8109e56:	68f8      	ldr	r0, [r7, #12]
 8109e58:	f000 fb1a 	bl	810a490 <_ZSt8_DestroyIPfEvT_S1_>
    }
 8109e5c:	bf00      	nop
 8109e5e:	3710      	adds	r7, #16
 8109e60:	46bd      	mov	sp, r7
 8109e62:	bd80      	pop	{r7, pc}

08109e64 <_ZNSaIfEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8109e64:	b580      	push	{r7, lr}
 8109e66:	b082      	sub	sp, #8
 8109e68:	af00      	add	r7, sp, #0
 8109e6a:	6078      	str	r0, [r7, #4]
 8109e6c:	6878      	ldr	r0, [r7, #4]
 8109e6e:	f000 fb25 	bl	810a4bc <_ZNSt15__new_allocatorIfEC1Ev>
 8109e72:	687b      	ldr	r3, [r7, #4]
 8109e74:	4618      	mov	r0, r3
 8109e76:	3708      	adds	r7, #8
 8109e78:	46bd      	mov	sp, r7
 8109e7a:	bd80      	pop	{r7, pc}

08109e7c <_ZNSt12_Vector_baseIfSaIfEE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 8109e7c:	b480      	push	{r7}
 8109e7e:	b083      	sub	sp, #12
 8109e80:	af00      	add	r7, sp, #0
 8109e82:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8109e84:	687b      	ldr	r3, [r7, #4]
 8109e86:	2200      	movs	r2, #0
 8109e88:	601a      	str	r2, [r3, #0]
 8109e8a:	687b      	ldr	r3, [r7, #4]
 8109e8c:	2200      	movs	r2, #0
 8109e8e:	605a      	str	r2, [r3, #4]
 8109e90:	687b      	ldr	r3, [r7, #4]
 8109e92:	2200      	movs	r2, #0
 8109e94:	609a      	str	r2, [r3, #8]
	{ }
 8109e96:	687b      	ldr	r3, [r7, #4]
 8109e98:	4618      	mov	r0, r3
 8109e9a:	370c      	adds	r7, #12
 8109e9c:	46bd      	mov	sp, r7
 8109e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109ea2:	4770      	bx	lr

08109ea4 <_ZNSt12_Vector_baseIfSaIfEE13_M_deallocateEPfj>:
      _M_deallocate(pointer __p, size_t __n)
 8109ea4:	b580      	push	{r7, lr}
 8109ea6:	b084      	sub	sp, #16
 8109ea8:	af00      	add	r7, sp, #0
 8109eaa:	60f8      	str	r0, [r7, #12]
 8109eac:	60b9      	str	r1, [r7, #8]
 8109eae:	607a      	str	r2, [r7, #4]
	if (__p)
 8109eb0:	68bb      	ldr	r3, [r7, #8]
 8109eb2:	2b00      	cmp	r3, #0
 8109eb4:	d005      	beq.n	8109ec2 <_ZNSt12_Vector_baseIfSaIfEE13_M_deallocateEPfj+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8109eb6:	68fb      	ldr	r3, [r7, #12]
 8109eb8:	687a      	ldr	r2, [r7, #4]
 8109eba:	68b9      	ldr	r1, [r7, #8]
 8109ebc:	4618      	mov	r0, r3
 8109ebe:	f000 fb08 	bl	810a4d2 <_ZNSt16allocator_traitsISaIfEE10deallocateERS0_Pfj>
      }
 8109ec2:	bf00      	nop
 8109ec4:	3710      	adds	r7, #16
 8109ec6:	46bd      	mov	sp, r7
 8109ec8:	bd80      	pop	{r7, pc}

08109eca <_ZNKSt6vectorIfSaIfEE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8109eca:	b580      	push	{r7, lr}
 8109ecc:	b082      	sub	sp, #8
 8109ece:	af00      	add	r7, sp, #0
 8109ed0:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 8109ed2:	687b      	ldr	r3, [r7, #4]
 8109ed4:	4618      	mov	r0, r3
 8109ed6:	f000 f83f 	bl	8109f58 <_ZNKSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 8109eda:	4603      	mov	r3, r0
 8109edc:	4618      	mov	r0, r3
 8109ede:	f000 fb23 	bl	810a528 <_ZNSt6vectorIfSaIfEE11_S_max_sizeERKS0_>
 8109ee2:	4603      	mov	r3, r0
 8109ee4:	4618      	mov	r0, r3
 8109ee6:	3708      	adds	r7, #8
 8109ee8:	46bd      	mov	sp, r7
 8109eea:	bd80      	pop	{r7, pc}

08109eec <_ZNKSt6vectorIfSaIfEE8capacityEv>:
      capacity() const _GLIBCXX_NOEXCEPT
 8109eec:	b480      	push	{r7}
 8109eee:	b083      	sub	sp, #12
 8109ef0:	af00      	add	r7, sp, #0
 8109ef2:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_end_of_storage
 8109ef4:	687b      	ldr	r3, [r7, #4]
 8109ef6:	689a      	ldr	r2, [r3, #8]
			 - this->_M_impl._M_start); }
 8109ef8:	687b      	ldr	r3, [r7, #4]
 8109efa:	681b      	ldr	r3, [r3, #0]
 8109efc:	1ad3      	subs	r3, r2, r3
 8109efe:	109b      	asrs	r3, r3, #2
 8109f00:	4618      	mov	r0, r3
 8109f02:	370c      	adds	r7, #12
 8109f04:	46bd      	mov	sp, r7
 8109f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109f0a:	4770      	bx	lr

08109f0c <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8109f0c:	b580      	push	{r7, lr}
 8109f0e:	b082      	sub	sp, #8
 8109f10:	af00      	add	r7, sp, #0
 8109f12:	6078      	str	r0, [r7, #4]
 8109f14:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8109f16:	683b      	ldr	r3, [r7, #0]
 8109f18:	2b00      	cmp	r3, #0
 8109f1a:	d006      	beq.n	8109f2a <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj+0x1e>
 8109f1c:	687b      	ldr	r3, [r7, #4]
 8109f1e:	6839      	ldr	r1, [r7, #0]
 8109f20:	4618      	mov	r0, r3
 8109f22:	f000 fb1b 	bl	810a55c <_ZNSt16allocator_traitsISaIfEE8allocateERS0_j>
 8109f26:	4603      	mov	r3, r0
 8109f28:	e000      	b.n	8109f2c <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj+0x20>
 8109f2a:	2300      	movs	r3, #0
      }
 8109f2c:	4618      	mov	r0, r3
 8109f2e:	3708      	adds	r7, #8
 8109f30:	46bd      	mov	sp, r7
 8109f32:	bd80      	pop	{r7, pc}

08109f34 <_ZNSt6vectorIfSaIfEE11_S_relocateEPfS2_S2_RS0_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 8109f34:	b580      	push	{r7, lr}
 8109f36:	b084      	sub	sp, #16
 8109f38:	af00      	add	r7, sp, #0
 8109f3a:	60f8      	str	r0, [r7, #12]
 8109f3c:	60b9      	str	r1, [r7, #8]
 8109f3e:	607a      	str	r2, [r7, #4]
 8109f40:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 8109f42:	683b      	ldr	r3, [r7, #0]
 8109f44:	687a      	ldr	r2, [r7, #4]
 8109f46:	68b9      	ldr	r1, [r7, #8]
 8109f48:	68f8      	ldr	r0, [r7, #12]
 8109f4a:	f000 fb38 	bl	810a5be <_ZSt12__relocate_aIPfS0_SaIfEET0_T_S3_S2_RT1_>
 8109f4e:	4603      	mov	r3, r0
      }
 8109f50:	4618      	mov	r0, r3
 8109f52:	3710      	adds	r7, #16
 8109f54:	46bd      	mov	sp, r7
 8109f56:	bd80      	pop	{r7, pc}

08109f58 <_ZNKSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8109f58:	b480      	push	{r7}
 8109f5a:	b083      	sub	sp, #12
 8109f5c:	af00      	add	r7, sp, #0
 8109f5e:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8109f60:	687b      	ldr	r3, [r7, #4]
 8109f62:	4618      	mov	r0, r3
 8109f64:	370c      	adds	r7, #12
 8109f66:	46bd      	mov	sp, r7
 8109f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109f6c:	4770      	bx	lr

08109f6e <_ZN9__gnu_cxx14__alloc_traitsISaIfEfE17_S_select_on_copyERKS1_>:
      std::__enable_if_t<__is_custom_pointer<_Ptr>::value>
      destroy(_Alloc& __a, _Ptr __p)
      noexcept(noexcept(_Base_type::destroy(__a, std::__to_address(__p))))
      { _Base_type::destroy(__a, std::__to_address(__p)); }

    static constexpr _Alloc _S_select_on_copy(const _Alloc& __a)
 8109f6e:	b580      	push	{r7, lr}
 8109f70:	b082      	sub	sp, #8
 8109f72:	af00      	add	r7, sp, #0
 8109f74:	6078      	str	r0, [r7, #4]
 8109f76:	6039      	str	r1, [r7, #0]
    { return _Base_type::select_on_container_copy_construction(__a); }
 8109f78:	687b      	ldr	r3, [r7, #4]
 8109f7a:	6839      	ldr	r1, [r7, #0]
 8109f7c:	4618      	mov	r0, r3
 8109f7e:	f000 fb3b 	bl	810a5f8 <_ZNSt16allocator_traitsISaIfEE37select_on_container_copy_constructionERKS0_>
 8109f82:	6878      	ldr	r0, [r7, #4]
 8109f84:	3708      	adds	r7, #8
 8109f86:	46bd      	mov	sp, r7
 8109f88:	bd80      	pop	{r7, pc}

08109f8a <_ZNSt12_Vector_baseIfSaIfEEC1EjRKS0_>:
      _Vector_base(size_t __n, const allocator_type& __a)
 8109f8a:	b580      	push	{r7, lr}
 8109f8c:	b084      	sub	sp, #16
 8109f8e:	af00      	add	r7, sp, #0
 8109f90:	60f8      	str	r0, [r7, #12]
 8109f92:	60b9      	str	r1, [r7, #8]
 8109f94:	607a      	str	r2, [r7, #4]
      : _M_impl(__a)
 8109f96:	68fb      	ldr	r3, [r7, #12]
 8109f98:	6879      	ldr	r1, [r7, #4]
 8109f9a:	4618      	mov	r0, r3
 8109f9c:	f000 fb39 	bl	810a612 <_ZNSt12_Vector_baseIfSaIfEE12_Vector_implC1ERKS0_>
      { _M_create_storage(__n); }
 8109fa0:	68b9      	ldr	r1, [r7, #8]
 8109fa2:	68f8      	ldr	r0, [r7, #12]
 8109fa4:	f000 fb47 	bl	810a636 <_ZNSt12_Vector_baseIfSaIfEE17_M_create_storageEj>
 8109fa8:	68fb      	ldr	r3, [r7, #12]
 8109faa:	4618      	mov	r0, r3
 8109fac:	3710      	adds	r7, #16
 8109fae:	46bd      	mov	sp, r7
 8109fb0:	bd80      	pop	{r7, pc}

08109fb2 <_ZNKSt6vectorIfSaIfEE5beginEv>:
      begin() const _GLIBCXX_NOEXCEPT
 8109fb2:	b580      	push	{r7, lr}
 8109fb4:	b084      	sub	sp, #16
 8109fb6:	af00      	add	r7, sp, #0
 8109fb8:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_start); }
 8109fba:	687a      	ldr	r2, [r7, #4]
 8109fbc:	f107 030c 	add.w	r3, r7, #12
 8109fc0:	4611      	mov	r1, r2
 8109fc2:	4618      	mov	r0, r3
 8109fc4:	f000 fb52 	bl	810a66c <_ZN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEC1ERKS2_>
 8109fc8:	68fb      	ldr	r3, [r7, #12]
 8109fca:	4618      	mov	r0, r3
 8109fcc:	3710      	adds	r7, #16
 8109fce:	46bd      	mov	sp, r7
 8109fd0:	bd80      	pop	{r7, pc}

08109fd2 <_ZNKSt6vectorIfSaIfEE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
 8109fd2:	b580      	push	{r7, lr}
 8109fd4:	b084      	sub	sp, #16
 8109fd6:	af00      	add	r7, sp, #0
 8109fd8:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_finish); }
 8109fda:	687b      	ldr	r3, [r7, #4]
 8109fdc:	1d1a      	adds	r2, r3, #4
 8109fde:	f107 030c 	add.w	r3, r7, #12
 8109fe2:	4611      	mov	r1, r2
 8109fe4:	4618      	mov	r0, r3
 8109fe6:	f000 fb41 	bl	810a66c <_ZN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEC1ERKS2_>
 8109fea:	68fb      	ldr	r3, [r7, #12]
 8109fec:	4618      	mov	r0, r3
 8109fee:	3710      	adds	r7, #16
 8109ff0:	46bd      	mov	sp, r7
 8109ff2:	bd80      	pop	{r7, pc}

08109ff4 <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPffET0_T_SA_S9_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8109ff4:	b580      	push	{r7, lr}
 8109ff6:	b084      	sub	sp, #16
 8109ff8:	af00      	add	r7, sp, #0
 8109ffa:	60f8      	str	r0, [r7, #12]
 8109ffc:	60b9      	str	r1, [r7, #8]
 8109ffe:	607a      	str	r2, [r7, #4]
 810a000:	603b      	str	r3, [r7, #0]
      if (std::is_constant_evaluated())
 810a002:	f7fb fee4 	bl	8105dce <_ZSt21is_constant_evaluatedv>
 810a006:	4603      	mov	r3, r0
 810a008:	2b00      	cmp	r3, #0
 810a00a:	d006      	beq.n	810a01a <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPffET0_T_SA_S9_RSaIT1_E+0x26>
	return std::__do_uninit_copy(__first, __last, __result);
 810a00c:	687a      	ldr	r2, [r7, #4]
 810a00e:	68b9      	ldr	r1, [r7, #8]
 810a010:	68f8      	ldr	r0, [r7, #12]
 810a012:	f000 fb5e 	bl	810a6d2 <_ZSt16__do_uninit_copyIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfET0_T_SA_S9_>
 810a016:	4603      	mov	r3, r0
 810a018:	e006      	b.n	810a028 <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPffET0_T_SA_S9_RSaIT1_E+0x34>
      return std::uninitialized_copy(__first, __last, __result);
 810a01a:	687a      	ldr	r2, [r7, #4]
 810a01c:	68b9      	ldr	r1, [r7, #8]
 810a01e:	68f8      	ldr	r0, [r7, #12]
 810a020:	f000 fb89 	bl	810a736 <_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfET0_T_SA_S9_>
 810a024:	4603      	mov	r3, r0
 810a026:	bf00      	nop
    }
 810a028:	4618      	mov	r0, r3
 810a02a:	3710      	adds	r7, #16
 810a02c:	46bd      	mov	sp, r7
 810a02e:	bd80      	pop	{r7, pc}

0810a030 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEC1ERKS1_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 810a030:	b480      	push	{r7}
 810a032:	b083      	sub	sp, #12
 810a034:	af00      	add	r7, sp, #0
 810a036:	6078      	str	r0, [r7, #4]
 810a038:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 810a03a:	683b      	ldr	r3, [r7, #0]
 810a03c:	681a      	ldr	r2, [r3, #0]
 810a03e:	687b      	ldr	r3, [r7, #4]
 810a040:	601a      	str	r2, [r3, #0]
 810a042:	687b      	ldr	r3, [r7, #4]
 810a044:	4618      	mov	r0, r3
 810a046:	370c      	adds	r7, #12
 810a048:	46bd      	mov	sp, r7
 810a04a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a04e:	4770      	bx	lr

0810a050 <_ZN9__gnu_cxxeqIPfSt6vectorIfSaIfEEEEbRKNS_17__normal_iteratorIT_T0_EESA_>:
    operator==(const __normal_iterator<_Iterator, _Container>& __lhs,
 810a050:	b590      	push	{r4, r7, lr}
 810a052:	b083      	sub	sp, #12
 810a054:	af00      	add	r7, sp, #0
 810a056:	6078      	str	r0, [r7, #4]
 810a058:	6039      	str	r1, [r7, #0]
    { return __lhs.base() == __rhs.base(); }
 810a05a:	6878      	ldr	r0, [r7, #4]
 810a05c:	f000 f810 	bl	810a080 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEE4baseEv>
 810a060:	4603      	mov	r3, r0
 810a062:	681c      	ldr	r4, [r3, #0]
 810a064:	6838      	ldr	r0, [r7, #0]
 810a066:	f000 f80b 	bl	810a080 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEE4baseEv>
 810a06a:	4603      	mov	r3, r0
 810a06c:	681b      	ldr	r3, [r3, #0]
 810a06e:	429c      	cmp	r4, r3
 810a070:	bf0c      	ite	eq
 810a072:	2301      	moveq	r3, #1
 810a074:	2300      	movne	r3, #0
 810a076:	b2db      	uxtb	r3, r3
 810a078:	4618      	mov	r0, r3
 810a07a:	370c      	adds	r7, #12
 810a07c:	46bd      	mov	sp, r7
 810a07e:	bd90      	pop	{r4, r7, pc}

0810a080 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 810a080:	b480      	push	{r7}
 810a082:	b083      	sub	sp, #12
 810a084:	af00      	add	r7, sp, #0
 810a086:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 810a088:	687b      	ldr	r3, [r7, #4]
 810a08a:	4618      	mov	r0, r3
 810a08c:	370c      	adds	r7, #12
 810a08e:	46bd      	mov	sp, r7
 810a090:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a094:	4770      	bx	lr

0810a096 <_ZN9__gnu_cxxmiIPfSt6vectorIfSaIfEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 810a096:	b590      	push	{r4, r7, lr}
 810a098:	b083      	sub	sp, #12
 810a09a:	af00      	add	r7, sp, #0
 810a09c:	6078      	str	r0, [r7, #4]
 810a09e:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 810a0a0:	6878      	ldr	r0, [r7, #4]
 810a0a2:	f7ff ffed 	bl	810a080 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEE4baseEv>
 810a0a6:	4603      	mov	r3, r0
 810a0a8:	681c      	ldr	r4, [r3, #0]
 810a0aa:	6838      	ldr	r0, [r7, #0]
 810a0ac:	f7ff ffe8 	bl	810a080 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEE4baseEv>
 810a0b0:	4603      	mov	r3, r0
 810a0b2:	681b      	ldr	r3, [r3, #0]
 810a0b4:	1ae3      	subs	r3, r4, r3
 810a0b6:	109b      	asrs	r3, r3, #2
 810a0b8:	4618      	mov	r0, r3
 810a0ba:	370c      	adds	r7, #12
 810a0bc:	46bd      	mov	sp, r7
 810a0be:	bd90      	pop	{r4, r7, pc}

0810a0c0 <_ZSt6__sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_>:
    __sort(_RandomAccessIterator __first, _RandomAccessIterator __last,
 810a0c0:	b5b0      	push	{r4, r5, r7, lr}
 810a0c2:	b084      	sub	sp, #16
 810a0c4:	af00      	add	r7, sp, #0
 810a0c6:	60f8      	str	r0, [r7, #12]
 810a0c8:	60b9      	str	r1, [r7, #8]
 810a0ca:	713a      	strb	r2, [r7, #4]
      if (__first != __last)
 810a0cc:	f107 0208 	add.w	r2, r7, #8
 810a0d0:	f107 030c 	add.w	r3, r7, #12
 810a0d4:	4611      	mov	r1, r2
 810a0d6:	4618      	mov	r0, r3
 810a0d8:	f7ff ffba 	bl	810a050 <_ZN9__gnu_cxxeqIPfSt6vectorIfSaIfEEEEbRKNS_17__normal_iteratorIT_T0_EESA_>
 810a0dc:	4603      	mov	r3, r0
 810a0de:	f083 0301 	eor.w	r3, r3, #1
 810a0e2:	b2db      	uxtb	r3, r3
 810a0e4:	2b00      	cmp	r3, #0
 810a0e6:	d017      	beq.n	810a118 <_ZSt6__sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_+0x58>
				std::__lg(__last - __first) * 2,
 810a0e8:	f107 020c 	add.w	r2, r7, #12
 810a0ec:	f107 0308 	add.w	r3, r7, #8
 810a0f0:	4611      	mov	r1, r2
 810a0f2:	4618      	mov	r0, r3
 810a0f4:	f7ff ffcf 	bl	810a096 <_ZN9__gnu_cxxmiIPfSt6vectorIfSaIfEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 810a0f8:	4603      	mov	r3, r0
 810a0fa:	4618      	mov	r0, r3
 810a0fc:	f7ff fb2e 	bl	810975c <_ZSt4__lgi>
 810a100:	4603      	mov	r3, r0
	  std::__introsort_loop(__first, __last,
 810a102:	005a      	lsls	r2, r3, #1
 810a104:	462b      	mov	r3, r5
 810a106:	68b9      	ldr	r1, [r7, #8]
 810a108:	68f8      	ldr	r0, [r7, #12]
 810a10a:	f000 fb28 	bl	810a75e <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEiNS0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_>
	  std::__final_insertion_sort(__first, __last, __comp);
 810a10e:	4622      	mov	r2, r4
 810a110:	68b9      	ldr	r1, [r7, #8]
 810a112:	68f8      	ldr	r0, [r7, #12]
 810a114:	f000 fb5a 	bl	810a7cc <_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_>
    }
 810a118:	bf00      	nop
 810a11a:	3710      	adds	r7, #16
 810a11c:	46bd      	mov	sp, r7
 810a11e:	bdb0      	pop	{r4, r5, r7, pc}

0810a120 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>:
    move(_Tp&& __t) noexcept
 810a120:	b480      	push	{r7}
 810a122:	b083      	sub	sp, #12
 810a124:	af00      	add	r7, sp, #0
 810a126:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 810a128:	687b      	ldr	r3, [r7, #4]
 810a12a:	4618      	mov	r0, r3
 810a12c:	370c      	adds	r7, #12
 810a12e:	46bd      	mov	sp, r7
 810a130:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a134:	4770      	bx	lr

0810a136 <_ZNSt6vectorIfSaIfEE12emplace_backIJfEEERfDpOT_>:
      vector<_Tp, _Alloc>::
 810a136:	b5b0      	push	{r4, r5, r7, lr}
 810a138:	b082      	sub	sp, #8
 810a13a:	af00      	add	r7, sp, #0
 810a13c:	6078      	str	r0, [r7, #4]
 810a13e:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 810a140:	687b      	ldr	r3, [r7, #4]
 810a142:	685a      	ldr	r2, [r3, #4]
 810a144:	687b      	ldr	r3, [r7, #4]
 810a146:	689b      	ldr	r3, [r3, #8]
 810a148:	429a      	cmp	r2, r3
 810a14a:	d011      	beq.n	810a170 <_ZNSt6vectorIfSaIfEE12emplace_backIJfEEERfDpOT_+0x3a>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 810a14c:	687c      	ldr	r4, [r7, #4]
 810a14e:	687b      	ldr	r3, [r7, #4]
 810a150:	685d      	ldr	r5, [r3, #4]
 810a152:	6838      	ldr	r0, [r7, #0]
 810a154:	f000 fb72 	bl	810a83c <_ZSt7forwardIfEOT_RNSt16remove_referenceIS0_E4typeE>
 810a158:	4603      	mov	r3, r0
 810a15a:	461a      	mov	r2, r3
 810a15c:	4629      	mov	r1, r5
 810a15e:	4620      	mov	r0, r4
 810a160:	f000 fb77 	bl	810a852 <_ZNSt16allocator_traitsISaIfEE9constructIfJfEEEvRS0_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
 810a164:	687b      	ldr	r3, [r7, #4]
 810a166:	685b      	ldr	r3, [r3, #4]
 810a168:	1d1a      	adds	r2, r3, #4
 810a16a:	687b      	ldr	r3, [r7, #4]
 810a16c:	605a      	str	r2, [r3, #4]
 810a16e:	e00c      	b.n	810a18a <_ZNSt6vectorIfSaIfEE12emplace_backIJfEEERfDpOT_+0x54>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 810a170:	6878      	ldr	r0, [r7, #4]
 810a172:	f7ff fdee 	bl	8109d52 <_ZNSt6vectorIfSaIfEE3endEv>
 810a176:	4604      	mov	r4, r0
 810a178:	6838      	ldr	r0, [r7, #0]
 810a17a:	f000 fb5f 	bl	810a83c <_ZSt7forwardIfEOT_RNSt16remove_referenceIS0_E4typeE>
 810a17e:	4603      	mov	r3, r0
 810a180:	461a      	mov	r2, r3
 810a182:	4621      	mov	r1, r4
 810a184:	6878      	ldr	r0, [r7, #4]
 810a186:	f000 fbbd 	bl	810a904 <_ZNSt6vectorIfSaIfEE17_M_realloc_insertIJfEEEvN9__gnu_cxx17__normal_iteratorIPfS1_EEDpOT_>
	return back();
 810a18a:	6878      	ldr	r0, [r7, #4]
 810a18c:	f000 fc36 	bl	810a9fc <_ZNSt6vectorIfSaIfEE4backEv>
 810a190:	4603      	mov	r3, r0
      }
 810a192:	4618      	mov	r0, r3
 810a194:	3708      	adds	r7, #8
 810a196:	46bd      	mov	sp, r7
 810a198:	bdb0      	pop	{r4, r5, r7, pc}

0810a19a <_ZSt19__iterator_categoryIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEENSt15iterator_traitsIT_E17iterator_categoryERKS8_>:
   *  sugar for internal library use only.
  */
  template<typename _Iter>
    inline _GLIBCXX_CONSTEXPR
    typename iterator_traits<_Iter>::iterator_category
    __iterator_category(const _Iter&)
 810a19a:	b480      	push	{r7}
 810a19c:	b083      	sub	sp, #12
 810a19e:	af00      	add	r7, sp, #0
 810a1a0:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 810a1a2:	4618      	mov	r0, r3
 810a1a4:	370c      	adds	r7, #12
 810a1a6:	46bd      	mov	sp, r7
 810a1a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a1ac:	4770      	bx	lr

0810a1ae <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEET_S8_S8_S8_St26random_access_iterator_tag>:
    __rotate(_RandomAccessIterator __first,
 810a1ae:	b590      	push	{r4, r7, lr}
 810a1b0:	b095      	sub	sp, #84	@ 0x54
 810a1b2:	af00      	add	r7, sp, #0
 810a1b4:	60f8      	str	r0, [r7, #12]
 810a1b6:	60b9      	str	r1, [r7, #8]
 810a1b8:	607a      	str	r2, [r7, #4]
 810a1ba:	703b      	strb	r3, [r7, #0]
      if (__first == __middle)
 810a1bc:	f107 0208 	add.w	r2, r7, #8
 810a1c0:	f107 030c 	add.w	r3, r7, #12
 810a1c4:	4611      	mov	r1, r2
 810a1c6:	4618      	mov	r0, r3
 810a1c8:	f7ff ff42 	bl	810a050 <_ZN9__gnu_cxxeqIPfSt6vectorIfSaIfEEEEbRKNS_17__normal_iteratorIT_T0_EESA_>
 810a1cc:	4603      	mov	r3, r0
 810a1ce:	2b00      	cmp	r3, #0
 810a1d0:	d001      	beq.n	810a1d6 <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEET_S8_S8_S8_St26random_access_iterator_tag+0x28>
	return __last;
 810a1d2:	687b      	ldr	r3, [r7, #4]
 810a1d4:	e158      	b.n	810a488 <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEET_S8_S8_S8_St26random_access_iterator_tag+0x2da>
      else if (__last == __middle)
 810a1d6:	f107 0208 	add.w	r2, r7, #8
 810a1da:	1d3b      	adds	r3, r7, #4
 810a1dc:	4611      	mov	r1, r2
 810a1de:	4618      	mov	r0, r3
 810a1e0:	f7ff ff36 	bl	810a050 <_ZN9__gnu_cxxeqIPfSt6vectorIfSaIfEEEEbRKNS_17__normal_iteratorIT_T0_EESA_>
 810a1e4:	4603      	mov	r3, r0
 810a1e6:	2b00      	cmp	r3, #0
 810a1e8:	d001      	beq.n	810a1ee <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEET_S8_S8_S8_St26random_access_iterator_tag+0x40>
	return __first;
 810a1ea:	68fb      	ldr	r3, [r7, #12]
 810a1ec:	e14c      	b.n	810a488 <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEET_S8_S8_S8_St26random_access_iterator_tag+0x2da>
      _Distance __n = __last   - __first;
 810a1ee:	f107 020c 	add.w	r2, r7, #12
 810a1f2:	1d3b      	adds	r3, r7, #4
 810a1f4:	4611      	mov	r1, r2
 810a1f6:	4618      	mov	r0, r3
 810a1f8:	f7ff ff4d 	bl	810a096 <_ZN9__gnu_cxxmiIPfSt6vectorIfSaIfEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 810a1fc:	4603      	mov	r3, r0
 810a1fe:	633b      	str	r3, [r7, #48]	@ 0x30
      _Distance __k = __middle - __first;
 810a200:	f107 020c 	add.w	r2, r7, #12
 810a204:	f107 0308 	add.w	r3, r7, #8
 810a208:	4611      	mov	r1, r2
 810a20a:	4618      	mov	r0, r3
 810a20c:	f7ff ff43 	bl	810a096 <_ZN9__gnu_cxxmiIPfSt6vectorIfSaIfEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 810a210:	4603      	mov	r3, r0
 810a212:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (__k == __n - __k)
 810a214:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810a216:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810a218:	1ad2      	subs	r2, r2, r3
 810a21a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810a21c:	429a      	cmp	r2, r3
 810a21e:	d106      	bne.n	810a22e <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEET_S8_S8_S8_St26random_access_iterator_tag+0x80>
	  std::swap_ranges(__first, __middle, __middle);
 810a220:	68ba      	ldr	r2, [r7, #8]
 810a222:	68b9      	ldr	r1, [r7, #8]
 810a224:	68f8      	ldr	r0, [r7, #12]
 810a226:	f000 fc04 	bl	810aa32 <_ZSt11swap_rangesIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_ET0_T_S8_S7_>
	  return __middle;
 810a22a:	68bb      	ldr	r3, [r7, #8]
 810a22c:	e12c      	b.n	810a488 <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEET_S8_S8_S8_St26random_access_iterator_tag+0x2da>
      _RandomAccessIterator __p = __first;
 810a22e:	68fb      	ldr	r3, [r7, #12]
 810a230:	62bb      	str	r3, [r7, #40]	@ 0x28
      _RandomAccessIterator __ret = __first + (__last - __middle);
 810a232:	f107 0208 	add.w	r2, r7, #8
 810a236:	1d3b      	adds	r3, r7, #4
 810a238:	4611      	mov	r1, r2
 810a23a:	4618      	mov	r0, r3
 810a23c:	f7ff ff2b 	bl	810a096 <_ZN9__gnu_cxxmiIPfSt6vectorIfSaIfEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 810a240:	4602      	mov	r2, r0
 810a242:	f107 030c 	add.w	r3, r7, #12
 810a246:	4611      	mov	r1, r2
 810a248:	4618      	mov	r0, r3
 810a24a:	f7ff fdc4 	bl	8109dd6 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 810a24e:	4603      	mov	r3, r0
 810a250:	627b      	str	r3, [r7, #36]	@ 0x24
	  if (__k < __n - __k)
 810a252:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810a254:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810a256:	1ad2      	subs	r2, r2, r3
 810a258:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810a25a:	429a      	cmp	r2, r3
 810a25c:	f340 8081 	ble.w	810a362 <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEET_S8_S8_S8_St26random_access_iterator_tag+0x1b4>
	      if (__is_pod(_ValueType) && __k == 1)
 810a260:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810a262:	2b01      	cmp	r3, #1
 810a264:	d140      	bne.n	810a2e8 <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEET_S8_S8_S8_St26random_access_iterator_tag+0x13a>
		  _ValueType __t = _GLIBCXX_MOVE(*__p);
 810a266:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 810a26a:	4618      	mov	r0, r3
 810a26c:	f000 fc08 	bl	810aa80 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 810a270:	4603      	mov	r3, r0
 810a272:	4618      	mov	r0, r3
 810a274:	f7ff ff54 	bl	810a120 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 810a278:	4603      	mov	r3, r0
 810a27a:	681b      	ldr	r3, [r3, #0]
 810a27c:	61fb      	str	r3, [r7, #28]
		  _GLIBCXX_MOVE3(__p + 1, __p + __n, __p);
 810a27e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 810a282:	2101      	movs	r1, #1
 810a284:	4618      	mov	r0, r3
 810a286:	f7ff fda6 	bl	8109dd6 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 810a28a:	4604      	mov	r4, r0
 810a28c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810a28e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 810a292:	4611      	mov	r1, r2
 810a294:	4618      	mov	r0, r3
 810a296:	f7ff fd9e 	bl	8109dd6 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 810a29a:	4603      	mov	r3, r0
 810a29c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 810a29e:	4619      	mov	r1, r3
 810a2a0:	4620      	mov	r0, r4
 810a2a2:	f000 fbf9 	bl	810aa98 <_ZSt4moveIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_ET0_T_S8_S7_>
		  *(__p + __n - 1) = _GLIBCXX_MOVE(__t);
 810a2a6:	f107 031c 	add.w	r3, r7, #28
 810a2aa:	4618      	mov	r0, r3
 810a2ac:	f7ff ff38 	bl	810a120 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 810a2b0:	4603      	mov	r3, r0
 810a2b2:	681c      	ldr	r4, [r3, #0]
 810a2b4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810a2b6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 810a2ba:	4611      	mov	r1, r2
 810a2bc:	4618      	mov	r0, r3
 810a2be:	f7ff fd8a 	bl	8109dd6 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 810a2c2:	4603      	mov	r3, r0
 810a2c4:	63bb      	str	r3, [r7, #56]	@ 0x38
 810a2c6:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 810a2ca:	2101      	movs	r1, #1
 810a2cc:	4618      	mov	r0, r3
 810a2ce:	f000 fbfb 	bl	810aac8 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEmiEi>
 810a2d2:	4603      	mov	r3, r0
 810a2d4:	637b      	str	r3, [r7, #52]	@ 0x34
 810a2d6:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 810a2da:	4618      	mov	r0, r3
 810a2dc:	f000 fbd0 	bl	810aa80 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 810a2e0:	4603      	mov	r3, r0
 810a2e2:	601c      	str	r4, [r3, #0]
		  return __ret;
 810a2e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810a2e6:	e0cf      	b.n	810a488 <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEET_S8_S8_S8_St26random_access_iterator_tag+0x2da>
	      _RandomAccessIterator __q = __p + __k;
 810a2e8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 810a2ea:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 810a2ee:	4611      	mov	r1, r2
 810a2f0:	4618      	mov	r0, r3
 810a2f2:	f7ff fd70 	bl	8109dd6 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 810a2f6:	4603      	mov	r3, r0
 810a2f8:	623b      	str	r3, [r7, #32]
	      for (_Distance __i = 0; __i < __n - __k; ++ __i)
 810a2fa:	2300      	movs	r3, #0
 810a2fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 810a2fe:	e010      	b.n	810a322 <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEET_S8_S8_S8_St26random_access_iterator_tag+0x174>
		  std::iter_swap(__p, __q);
 810a300:	6a39      	ldr	r1, [r7, #32]
 810a302:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 810a304:	f000 fbf9 	bl	810aafa <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_EvT_T0_>
		  ++__p;
 810a308:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 810a30c:	4618      	mov	r0, r3
 810a30e:	f000 fc0b 	bl	810ab28 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEppEv>
		  ++__q;
 810a312:	f107 0320 	add.w	r3, r7, #32
 810a316:	4618      	mov	r0, r3
 810a318:	f000 fc06 	bl	810ab28 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEppEv>
	      for (_Distance __i = 0; __i < __n - __k; ++ __i)
 810a31c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 810a31e:	3301      	adds	r3, #1
 810a320:	64fb      	str	r3, [r7, #76]	@ 0x4c
 810a322:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810a324:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810a326:	1ad3      	subs	r3, r2, r3
 810a328:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 810a32a:	429a      	cmp	r2, r3
 810a32c:	dbe8      	blt.n	810a300 <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEET_S8_S8_S8_St26random_access_iterator_tag+0x152>
	      __n %= __k;
 810a32e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810a330:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 810a332:	fb93 f1f2 	sdiv	r1, r3, r2
 810a336:	fb01 f202 	mul.w	r2, r1, r2
 810a33a:	1a9b      	subs	r3, r3, r2
 810a33c:	633b      	str	r3, [r7, #48]	@ 0x30
	      if (__n == 0)
 810a33e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810a340:	2b00      	cmp	r3, #0
 810a342:	d101      	bne.n	810a348 <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEET_S8_S8_S8_St26random_access_iterator_tag+0x19a>
		return __ret;
 810a344:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810a346:	e09f      	b.n	810a488 <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEET_S8_S8_S8_St26random_access_iterator_tag+0x2da>
	      std::swap(__n, __k);
 810a348:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 810a34c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 810a350:	4611      	mov	r1, r2
 810a352:	4618      	mov	r0, r3
 810a354:	f000 fbf8 	bl	810ab48 <_ZSt4swapIiENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS4_ESt18is_move_assignableIS4_EEE5valueEvE4typeERS4_SE_>
	      __k = __n - __k;
 810a358:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810a35a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810a35c:	1ad3      	subs	r3, r2, r3
 810a35e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 810a360:	e777      	b.n	810a252 <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEET_S8_S8_S8_St26random_access_iterator_tag+0xa4>
	      __k = __n - __k;
 810a362:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810a364:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810a366:	1ad3      	subs	r3, r2, r3
 810a368:	62fb      	str	r3, [r7, #44]	@ 0x2c
	      if (__is_pod(_ValueType) && __k == 1)
 810a36a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810a36c:	2b01      	cmp	r3, #1
 810a36e:	d149      	bne.n	810a404 <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEET_S8_S8_S8_St26random_access_iterator_tag+0x256>
		  _ValueType __t = _GLIBCXX_MOVE(*(__p + __n - 1));
 810a370:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810a372:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 810a376:	4611      	mov	r1, r2
 810a378:	4618      	mov	r0, r3
 810a37a:	f7ff fd2c 	bl	8109dd6 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 810a37e:	4603      	mov	r3, r0
 810a380:	643b      	str	r3, [r7, #64]	@ 0x40
 810a382:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 810a386:	2101      	movs	r1, #1
 810a388:	4618      	mov	r0, r3
 810a38a:	f000 fb9d 	bl	810aac8 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEmiEi>
 810a38e:	4603      	mov	r3, r0
 810a390:	63fb      	str	r3, [r7, #60]	@ 0x3c
 810a392:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 810a396:	4618      	mov	r0, r3
 810a398:	f000 fb72 	bl	810aa80 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 810a39c:	4603      	mov	r3, r0
 810a39e:	4618      	mov	r0, r3
 810a3a0:	f7ff febe 	bl	810a120 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 810a3a4:	4603      	mov	r3, r0
 810a3a6:	681b      	ldr	r3, [r3, #0]
 810a3a8:	617b      	str	r3, [r7, #20]
		  _GLIBCXX_MOVE_BACKWARD3(__p, __p + __n - 1, __p + __n);
 810a3aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810a3ac:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 810a3b0:	4611      	mov	r1, r2
 810a3b2:	4618      	mov	r0, r3
 810a3b4:	f7ff fd0f 	bl	8109dd6 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 810a3b8:	4603      	mov	r3, r0
 810a3ba:	647b      	str	r3, [r7, #68]	@ 0x44
 810a3bc:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 810a3c0:	2101      	movs	r1, #1
 810a3c2:	4618      	mov	r0, r3
 810a3c4:	f000 fb80 	bl	810aac8 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEmiEi>
 810a3c8:	4604      	mov	r4, r0
 810a3ca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810a3cc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 810a3d0:	4611      	mov	r1, r2
 810a3d2:	4618      	mov	r0, r3
 810a3d4:	f7ff fcff 	bl	8109dd6 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 810a3d8:	4603      	mov	r3, r0
 810a3da:	461a      	mov	r2, r3
 810a3dc:	4621      	mov	r1, r4
 810a3de:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 810a3e0:	f000 fbd1 	bl	810ab86 <_ZSt13move_backwardIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_ET0_T_S8_S7_>
		  *__p = _GLIBCXX_MOVE(__t);
 810a3e4:	f107 0314 	add.w	r3, r7, #20
 810a3e8:	4618      	mov	r0, r3
 810a3ea:	f7ff fe99 	bl	810a120 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 810a3ee:	4603      	mov	r3, r0
 810a3f0:	681c      	ldr	r4, [r3, #0]
 810a3f2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 810a3f6:	4618      	mov	r0, r3
 810a3f8:	f000 fb42 	bl	810aa80 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 810a3fc:	4603      	mov	r3, r0
 810a3fe:	601c      	str	r4, [r3, #0]
		  return __ret;
 810a400:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810a402:	e041      	b.n	810a488 <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEET_S8_S8_S8_St26random_access_iterator_tag+0x2da>
	      _RandomAccessIterator __q = __p + __n;
 810a404:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810a406:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 810a40a:	4611      	mov	r1, r2
 810a40c:	4618      	mov	r0, r3
 810a40e:	f7ff fce2 	bl	8109dd6 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 810a412:	4603      	mov	r3, r0
 810a414:	61bb      	str	r3, [r7, #24]
	      __p = __q - __k;
 810a416:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 810a418:	f107 0318 	add.w	r3, r7, #24
 810a41c:	4611      	mov	r1, r2
 810a41e:	4618      	mov	r0, r3
 810a420:	f000 fb52 	bl	810aac8 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEmiEi>
 810a424:	4603      	mov	r3, r0
 810a426:	62bb      	str	r3, [r7, #40]	@ 0x28
	      for (_Distance __i = 0; __i < __n - __k; ++ __i)
 810a428:	2300      	movs	r3, #0
 810a42a:	64bb      	str	r3, [r7, #72]	@ 0x48
 810a42c:	e010      	b.n	810a450 <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEET_S8_S8_S8_St26random_access_iterator_tag+0x2a2>
		  --__p;
 810a42e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 810a432:	4618      	mov	r0, r3
 810a434:	f000 fbbf 	bl	810abb6 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEmmEv>
		  --__q;
 810a438:	f107 0318 	add.w	r3, r7, #24
 810a43c:	4618      	mov	r0, r3
 810a43e:	f000 fbba 	bl	810abb6 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEmmEv>
		  std::iter_swap(__p, __q);
 810a442:	69b9      	ldr	r1, [r7, #24]
 810a444:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 810a446:	f000 fb58 	bl	810aafa <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_EvT_T0_>
	      for (_Distance __i = 0; __i < __n - __k; ++ __i)
 810a44a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 810a44c:	3301      	adds	r3, #1
 810a44e:	64bb      	str	r3, [r7, #72]	@ 0x48
 810a450:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810a452:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810a454:	1ad3      	subs	r3, r2, r3
 810a456:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 810a458:	429a      	cmp	r2, r3
 810a45a:	dbe8      	blt.n	810a42e <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEET_S8_S8_S8_St26random_access_iterator_tag+0x280>
	      __n %= __k;
 810a45c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810a45e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 810a460:	fb93 f1f2 	sdiv	r1, r3, r2
 810a464:	fb01 f202 	mul.w	r2, r1, r2
 810a468:	1a9b      	subs	r3, r3, r2
 810a46a:	633b      	str	r3, [r7, #48]	@ 0x30
	      if (__n == 0)
 810a46c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810a46e:	2b00      	cmp	r3, #0
 810a470:	d101      	bne.n	810a476 <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEET_S8_S8_S8_St26random_access_iterator_tag+0x2c8>
		return __ret;
 810a472:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810a474:	e008      	b.n	810a488 <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEET_S8_S8_S8_St26random_access_iterator_tag+0x2da>
	      std::swap(__n, __k);
 810a476:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 810a47a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 810a47e:	4611      	mov	r1, r2
 810a480:	4618      	mov	r0, r3
 810a482:	f000 fb61 	bl	810ab48 <_ZSt4swapIiENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS4_ESt18is_move_assignableIS4_EEE5valueEvE4typeERS4_SE_>
      for (;;)
 810a486:	e6e4      	b.n	810a252 <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEET_S8_S8_S8_St26random_access_iterator_tag+0xa4>
    }
 810a488:	4618      	mov	r0, r3
 810a48a:	3754      	adds	r7, #84	@ 0x54
 810a48c:	46bd      	mov	sp, r7
 810a48e:	bd90      	pop	{r4, r7, pc}

0810a490 <_ZSt8_DestroyIPfEvT_S1_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 810a490:	b580      	push	{r7, lr}
 810a492:	b082      	sub	sp, #8
 810a494:	af00      	add	r7, sp, #0
 810a496:	6078      	str	r0, [r7, #4]
 810a498:	6039      	str	r1, [r7, #0]
      if (std::__is_constant_evaluated())
 810a49a:	f7f8 ff8b 	bl	81033b4 <_ZSt23__is_constant_evaluatedv>
 810a49e:	4603      	mov	r3, r0
 810a4a0:	2b00      	cmp	r3, #0
 810a4a2:	d004      	beq.n	810a4ae <_ZSt8_DestroyIPfEvT_S1_+0x1e>
	return _Destroy_aux<false>::__destroy(__first, __last);
 810a4a4:	6839      	ldr	r1, [r7, #0]
 810a4a6:	6878      	ldr	r0, [r7, #4]
 810a4a8:	f000 fb95 	bl	810abd6 <_ZNSt12_Destroy_auxILb0EE9__destroyIPfEEvT_S3_>
 810a4ac:	e003      	b.n	810a4b6 <_ZSt8_DestroyIPfEvT_S1_+0x26>
	__destroy(__first, __last);
 810a4ae:	6839      	ldr	r1, [r7, #0]
 810a4b0:	6878      	ldr	r0, [r7, #4]
 810a4b2:	f000 fba9 	bl	810ac08 <_ZNSt12_Destroy_auxILb1EE9__destroyIPfEEvT_S3_>
    }
 810a4b6:	3708      	adds	r7, #8
 810a4b8:	46bd      	mov	sp, r7
 810a4ba:	bd80      	pop	{r7, pc}

0810a4bc <_ZNSt15__new_allocatorIfEC1Ev>:
      __new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 810a4bc:	b480      	push	{r7}
 810a4be:	b083      	sub	sp, #12
 810a4c0:	af00      	add	r7, sp, #0
 810a4c2:	6078      	str	r0, [r7, #4]
 810a4c4:	687b      	ldr	r3, [r7, #4]
 810a4c6:	4618      	mov	r0, r3
 810a4c8:	370c      	adds	r7, #12
 810a4ca:	46bd      	mov	sp, r7
 810a4cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a4d0:	4770      	bx	lr

0810a4d2 <_ZNSt16allocator_traitsISaIfEE10deallocateERS0_Pfj>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 810a4d2:	b580      	push	{r7, lr}
 810a4d4:	b088      	sub	sp, #32
 810a4d6:	af00      	add	r7, sp, #0
 810a4d8:	60f8      	str	r0, [r7, #12]
 810a4da:	60b9      	str	r1, [r7, #8]
 810a4dc:	607a      	str	r2, [r7, #4]
 810a4de:	68fb      	ldr	r3, [r7, #12]
 810a4e0:	61fb      	str	r3, [r7, #28]
 810a4e2:	68bb      	ldr	r3, [r7, #8]
 810a4e4:	61bb      	str	r3, [r7, #24]
 810a4e6:	687b      	ldr	r3, [r7, #4]
 810a4e8:	617b      	str	r3, [r7, #20]
	if (std::__is_constant_evaluated())
 810a4ea:	f7f8 ff63 	bl	81033b4 <_ZSt23__is_constant_evaluatedv>
 810a4ee:	4603      	mov	r3, r0
 810a4f0:	2b00      	cmp	r3, #0
 810a4f2:	d003      	beq.n	810a4fc <_ZNSt16allocator_traitsISaIfEE10deallocateERS0_Pfj+0x2a>
	    ::operator delete(__p);
 810a4f4:	69b8      	ldr	r0, [r7, #24]
 810a4f6:	f018 fb25 	bl	8122b44 <_ZdlPv>
	    return;
 810a4fa:	e005      	b.n	810a508 <_ZNSt16allocator_traitsISaIfEE10deallocateERS0_Pfj+0x36>
	__allocator_base<_Tp>::deallocate(__p, __n);
 810a4fc:	697a      	ldr	r2, [r7, #20]
 810a4fe:	69b9      	ldr	r1, [r7, #24]
 810a500:	69f8      	ldr	r0, [r7, #28]
 810a502:	f000 fdd4 	bl	810b0ae <_ZNSt15__new_allocatorIfE10deallocateEPfj>
      { __a.deallocate(__p, __n); }
 810a506:	bf00      	nop
 810a508:	bf00      	nop
 810a50a:	3720      	adds	r7, #32
 810a50c:	46bd      	mov	sp, r7
 810a50e:	bd80      	pop	{r7, pc}

0810a510 <_ZNSt16allocator_traitsISaIfEE8max_sizeERKS0_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 810a510:	b480      	push	{r7}
 810a512:	b083      	sub	sp, #12
 810a514:	af00      	add	r7, sp, #0
 810a516:	6078      	str	r0, [r7, #4]
	return size_t(-1) / sizeof(value_type);
 810a518:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
      }
 810a51c:	4618      	mov	r0, r3
 810a51e:	370c      	adds	r7, #12
 810a520:	46bd      	mov	sp, r7
 810a522:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a526:	4770      	bx	lr

0810a528 <_ZNSt6vectorIfSaIfEE11_S_max_sizeERKS0_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 810a528:	b580      	push	{r7, lr}
 810a52a:	b084      	sub	sp, #16
 810a52c:	af00      	add	r7, sp, #0
 810a52e:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 810a530:	f06f 4360 	mvn.w	r3, #3758096384	@ 0xe0000000
 810a534:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 810a536:	6878      	ldr	r0, [r7, #4]
 810a538:	f7ff ffea 	bl	810a510 <_ZNSt16allocator_traitsISaIfEE8max_sizeERKS0_>
 810a53c:	4603      	mov	r3, r0
 810a53e:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 810a540:	f107 0208 	add.w	r2, r7, #8
 810a544:	f107 030c 	add.w	r3, r7, #12
 810a548:	4611      	mov	r1, r2
 810a54a:	4618      	mov	r0, r3
 810a54c:	f7fd fb2c 	bl	8107ba8 <_ZSt3minIjERKT_S2_S2_>
 810a550:	4603      	mov	r3, r0
 810a552:	681b      	ldr	r3, [r3, #0]
      }
 810a554:	4618      	mov	r0, r3
 810a556:	3710      	adds	r7, #16
 810a558:	46bd      	mov	sp, r7
 810a55a:	bd80      	pop	{r7, pc}

0810a55c <_ZNSt16allocator_traitsISaIfEE8allocateERS0_j>:
      allocate(allocator_type& __a, size_type __n)
 810a55c:	b580      	push	{r7, lr}
 810a55e:	b084      	sub	sp, #16
 810a560:	af00      	add	r7, sp, #0
 810a562:	6078      	str	r0, [r7, #4]
 810a564:	6039      	str	r1, [r7, #0]
 810a566:	687b      	ldr	r3, [r7, #4]
 810a568:	60fb      	str	r3, [r7, #12]
 810a56a:	683b      	ldr	r3, [r7, #0]
 810a56c:	60bb      	str	r3, [r7, #8]
	if (std::__is_constant_evaluated())
 810a56e:	f7f8 ff21 	bl	81033b4 <_ZSt23__is_constant_evaluatedv>
 810a572:	4603      	mov	r3, r0
 810a574:	2b00      	cmp	r3, #0
 810a576:	d016      	beq.n	810a5a6 <_ZNSt16allocator_traitsISaIfEE8allocateERS0_j+0x4a>
	    if (__builtin_mul_overflow(__n, sizeof(_Tp), &__n))
 810a578:	68bb      	ldr	r3, [r7, #8]
 810a57a:	2200      	movs	r2, #0
 810a57c:	0099      	lsls	r1, r3, #2
 810a57e:	0f9b      	lsrs	r3, r3, #30
 810a580:	2b00      	cmp	r3, #0
 810a582:	d000      	beq.n	810a586 <_ZNSt16allocator_traitsISaIfEE8allocateERS0_j+0x2a>
 810a584:	2201      	movs	r2, #1
 810a586:	460b      	mov	r3, r1
 810a588:	60bb      	str	r3, [r7, #8]
 810a58a:	4613      	mov	r3, r2
 810a58c:	f003 0301 	and.w	r3, r3, #1
 810a590:	b2db      	uxtb	r3, r3
 810a592:	2b00      	cmp	r3, #0
 810a594:	d001      	beq.n	810a59a <_ZNSt16allocator_traitsISaIfEE8allocateERS0_j+0x3e>
	      std::__throw_bad_array_new_length();
 810a596:	f018 fbb9 	bl	8122d0c <_ZSt28__throw_bad_array_new_lengthv>
	    return static_cast<_Tp*>(::operator new(__n));
 810a59a:	68bb      	ldr	r3, [r7, #8]
 810a59c:	4618      	mov	r0, r3
 810a59e:	f018 fae4 	bl	8122b6a <_Znwj>
 810a5a2:	4603      	mov	r3, r0
 810a5a4:	e007      	b.n	810a5b6 <_ZNSt16allocator_traitsISaIfEE8allocateERS0_j+0x5a>
	return __allocator_base<_Tp>::allocate(__n, 0);
 810a5a6:	68bb      	ldr	r3, [r7, #8]
 810a5a8:	2200      	movs	r2, #0
 810a5aa:	4619      	mov	r1, r3
 810a5ac:	68f8      	ldr	r0, [r7, #12]
 810a5ae:	f000 fd8d 	bl	810b0cc <_ZNSt15__new_allocatorIfE8allocateEjPKv>
 810a5b2:	4603      	mov	r3, r0
 810a5b4:	bf00      	nop
      { return __a.allocate(__n); }
 810a5b6:	4618      	mov	r0, r3
 810a5b8:	3710      	adds	r7, #16
 810a5ba:	46bd      	mov	sp, r7
 810a5bc:	bd80      	pop	{r7, pc}

0810a5be <_ZSt12__relocate_aIPfS0_SaIfEET0_T_S3_S2_RT1_>:
    __relocate_a(_InputIterator __first, _InputIterator __last,
 810a5be:	b5b0      	push	{r4, r5, r7, lr}
 810a5c0:	b084      	sub	sp, #16
 810a5c2:	af00      	add	r7, sp, #0
 810a5c4:	60f8      	str	r0, [r7, #12]
 810a5c6:	60b9      	str	r1, [r7, #8]
 810a5c8:	607a      	str	r2, [r7, #4]
 810a5ca:	603b      	str	r3, [r7, #0]
      return std::__relocate_a_1(std::__niter_base(__first),
 810a5cc:	68f8      	ldr	r0, [r7, #12]
 810a5ce:	f000 fb26 	bl	810ac1e <_ZSt12__niter_baseIPfET_S1_>
 810a5d2:	4604      	mov	r4, r0
 810a5d4:	68b8      	ldr	r0, [r7, #8]
 810a5d6:	f000 fb22 	bl	810ac1e <_ZSt12__niter_baseIPfET_S1_>
 810a5da:	4605      	mov	r5, r0
 810a5dc:	6878      	ldr	r0, [r7, #4]
 810a5de:	f000 fb1e 	bl	810ac1e <_ZSt12__niter_baseIPfET_S1_>
 810a5e2:	4602      	mov	r2, r0
 810a5e4:	683b      	ldr	r3, [r7, #0]
 810a5e6:	4629      	mov	r1, r5
 810a5e8:	4620      	mov	r0, r4
 810a5ea:	f000 fb33 	bl	810ac54 <_ZSt14__relocate_a_1IffENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS2_E4typeES4_S4_S4_RSaIT0_E>
 810a5ee:	4603      	mov	r3, r0
    }
 810a5f0:	4618      	mov	r0, r3
 810a5f2:	3710      	adds	r7, #16
 810a5f4:	46bd      	mov	sp, r7
 810a5f6:	bdb0      	pop	{r4, r5, r7, pc}

0810a5f8 <_ZNSt16allocator_traitsISaIfEE37select_on_container_copy_constructionERKS0_>:
      select_on_container_copy_construction(const allocator_type& __rhs)
 810a5f8:	b580      	push	{r7, lr}
 810a5fa:	b082      	sub	sp, #8
 810a5fc:	af00      	add	r7, sp, #0
 810a5fe:	6078      	str	r0, [r7, #4]
 810a600:	6039      	str	r1, [r7, #0]
      { return __rhs; }
 810a602:	6839      	ldr	r1, [r7, #0]
 810a604:	6878      	ldr	r0, [r7, #4]
 810a606:	f000 fb5f 	bl	810acc8 <_ZNSaIfEC1ERKS_>
 810a60a:	6878      	ldr	r0, [r7, #4]
 810a60c:	3708      	adds	r7, #8
 810a60e:	46bd      	mov	sp, r7
 810a610:	bd80      	pop	{r7, pc}

0810a612 <_ZNSt12_Vector_baseIfSaIfEE12_Vector_implC1ERKS0_>:
	_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT
 810a612:	b580      	push	{r7, lr}
 810a614:	b082      	sub	sp, #8
 810a616:	af00      	add	r7, sp, #0
 810a618:	6078      	str	r0, [r7, #4]
 810a61a:	6039      	str	r1, [r7, #0]
	: _Tp_alloc_type(__a)
 810a61c:	6839      	ldr	r1, [r7, #0]
 810a61e:	6878      	ldr	r0, [r7, #4]
 810a620:	f000 fb52 	bl	810acc8 <_ZNSaIfEC1ERKS_>
 810a624:	687b      	ldr	r3, [r7, #4]
 810a626:	4618      	mov	r0, r3
 810a628:	f7ff fc28 	bl	8109e7c <_ZNSt12_Vector_baseIfSaIfEE17_Vector_impl_dataC1Ev>
	{ }
 810a62c:	687b      	ldr	r3, [r7, #4]
 810a62e:	4618      	mov	r0, r3
 810a630:	3708      	adds	r7, #8
 810a632:	46bd      	mov	sp, r7
 810a634:	bd80      	pop	{r7, pc}

0810a636 <_ZNSt12_Vector_baseIfSaIfEE17_M_create_storageEj>:
      _M_create_storage(size_t __n)
 810a636:	b580      	push	{r7, lr}
 810a638:	b082      	sub	sp, #8
 810a63a:	af00      	add	r7, sp, #0
 810a63c:	6078      	str	r0, [r7, #4]
 810a63e:	6039      	str	r1, [r7, #0]
	this->_M_impl._M_start = this->_M_allocate(__n);
 810a640:	6839      	ldr	r1, [r7, #0]
 810a642:	6878      	ldr	r0, [r7, #4]
 810a644:	f7ff fc62 	bl	8109f0c <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj>
 810a648:	4602      	mov	r2, r0
 810a64a:	687b      	ldr	r3, [r7, #4]
 810a64c:	601a      	str	r2, [r3, #0]
	this->_M_impl._M_finish = this->_M_impl._M_start;
 810a64e:	687b      	ldr	r3, [r7, #4]
 810a650:	681a      	ldr	r2, [r3, #0]
 810a652:	687b      	ldr	r3, [r7, #4]
 810a654:	605a      	str	r2, [r3, #4]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 810a656:	687b      	ldr	r3, [r7, #4]
 810a658:	681a      	ldr	r2, [r3, #0]
 810a65a:	683b      	ldr	r3, [r7, #0]
 810a65c:	009b      	lsls	r3, r3, #2
 810a65e:	441a      	add	r2, r3
 810a660:	687b      	ldr	r3, [r7, #4]
 810a662:	609a      	str	r2, [r3, #8]
      }
 810a664:	bf00      	nop
 810a666:	3708      	adds	r7, #8
 810a668:	46bd      	mov	sp, r7
 810a66a:	bd80      	pop	{r7, pc}

0810a66c <_ZN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEC1ERKS2_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 810a66c:	b480      	push	{r7}
 810a66e:	b083      	sub	sp, #12
 810a670:	af00      	add	r7, sp, #0
 810a672:	6078      	str	r0, [r7, #4]
 810a674:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 810a676:	683b      	ldr	r3, [r7, #0]
 810a678:	681a      	ldr	r2, [r3, #0]
 810a67a:	687b      	ldr	r3, [r7, #4]
 810a67c:	601a      	str	r2, [r3, #0]
 810a67e:	687b      	ldr	r3, [r7, #4]
 810a680:	4618      	mov	r0, r3
 810a682:	370c      	adds	r7, #12
 810a684:	46bd      	mov	sp, r7
 810a686:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a68a:	4770      	bx	lr

0810a68c <_ZN9__gnu_cxxeqIPKfSt6vectorIfSaIfEEEEbRKNS_17__normal_iteratorIT_T0_EESB_>:
    operator==(const __normal_iterator<_Iterator, _Container>& __lhs,
 810a68c:	b590      	push	{r4, r7, lr}
 810a68e:	b083      	sub	sp, #12
 810a690:	af00      	add	r7, sp, #0
 810a692:	6078      	str	r0, [r7, #4]
 810a694:	6039      	str	r1, [r7, #0]
    { return __lhs.base() == __rhs.base(); }
 810a696:	6878      	ldr	r0, [r7, #4]
 810a698:	f000 f810 	bl	810a6bc <_ZNK9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEE4baseEv>
 810a69c:	4603      	mov	r3, r0
 810a69e:	681c      	ldr	r4, [r3, #0]
 810a6a0:	6838      	ldr	r0, [r7, #0]
 810a6a2:	f000 f80b 	bl	810a6bc <_ZNK9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEE4baseEv>
 810a6a6:	4603      	mov	r3, r0
 810a6a8:	681b      	ldr	r3, [r3, #0]
 810a6aa:	429c      	cmp	r4, r3
 810a6ac:	bf0c      	ite	eq
 810a6ae:	2301      	moveq	r3, #1
 810a6b0:	2300      	movne	r3, #0
 810a6b2:	b2db      	uxtb	r3, r3
 810a6b4:	4618      	mov	r0, r3
 810a6b6:	370c      	adds	r7, #12
 810a6b8:	46bd      	mov	sp, r7
 810a6ba:	bd90      	pop	{r4, r7, pc}

0810a6bc <_ZNK9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 810a6bc:	b480      	push	{r7}
 810a6be:	b083      	sub	sp, #12
 810a6c0:	af00      	add	r7, sp, #0
 810a6c2:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 810a6c4:	687b      	ldr	r3, [r7, #4]
 810a6c6:	4618      	mov	r0, r3
 810a6c8:	370c      	adds	r7, #12
 810a6ca:	46bd      	mov	sp, r7
 810a6cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a6d0:	4770      	bx	lr

0810a6d2 <_ZSt16__do_uninit_copyIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfET0_T_SA_S9_>:
    __do_uninit_copy(_InputIterator __first, _InputIterator __last,
 810a6d2:	b590      	push	{r4, r7, lr}
 810a6d4:	b087      	sub	sp, #28
 810a6d6:	af00      	add	r7, sp, #0
 810a6d8:	60f8      	str	r0, [r7, #12]
 810a6da:	60b9      	str	r1, [r7, #8]
 810a6dc:	607a      	str	r2, [r7, #4]
      _ForwardIterator __cur = __result;
 810a6de:	687b      	ldr	r3, [r7, #4]
 810a6e0:	617b      	str	r3, [r7, #20]
	  for (; __first != __last; ++__first, (void)++__cur)
 810a6e2:	e015      	b.n	810a710 <_ZSt16__do_uninit_copyIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfET0_T_SA_S9_+0x3e>
	    std::_Construct(std::__addressof(*__cur), *__first);
 810a6e4:	6978      	ldr	r0, [r7, #20]
 810a6e6:	f000 fb0d 	bl	810ad04 <_ZSt11__addressofIfEPT_RS0_>
 810a6ea:	4604      	mov	r4, r0
 810a6ec:	f107 030c 	add.w	r3, r7, #12
 810a6f0:	4618      	mov	r0, r3
 810a6f2:	f000 fb12 	bl	810ad1a <_ZNK9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEdeEv>
 810a6f6:	4603      	mov	r3, r0
 810a6f8:	4619      	mov	r1, r3
 810a6fa:	4620      	mov	r0, r4
 810a6fc:	f000 fb19 	bl	810ad32 <_ZSt10_ConstructIfJRKfEEvPT_DpOT0_>
	  for (; __first != __last; ++__first, (void)++__cur)
 810a700:	f107 030c 	add.w	r3, r7, #12
 810a704:	4618      	mov	r0, r3
 810a706:	f000 faed 	bl	810ace4 <_ZN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEppEv>
 810a70a:	697b      	ldr	r3, [r7, #20]
 810a70c:	3304      	adds	r3, #4
 810a70e:	617b      	str	r3, [r7, #20]
 810a710:	f107 0208 	add.w	r2, r7, #8
 810a714:	f107 030c 	add.w	r3, r7, #12
 810a718:	4611      	mov	r1, r2
 810a71a:	4618      	mov	r0, r3
 810a71c:	f7ff ffb6 	bl	810a68c <_ZN9__gnu_cxxeqIPKfSt6vectorIfSaIfEEEEbRKNS_17__normal_iteratorIT_T0_EESB_>
 810a720:	4603      	mov	r3, r0
 810a722:	f083 0301 	eor.w	r3, r3, #1
 810a726:	b2db      	uxtb	r3, r3
 810a728:	2b00      	cmp	r3, #0
 810a72a:	d1db      	bne.n	810a6e4 <_ZSt16__do_uninit_copyIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfET0_T_SA_S9_+0x12>
	  return __cur;
 810a72c:	697b      	ldr	r3, [r7, #20]
    }
 810a72e:	4618      	mov	r0, r3
 810a730:	371c      	adds	r7, #28
 810a732:	46bd      	mov	sp, r7
 810a734:	bd90      	pop	{r4, r7, pc}

0810a736 <_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfET0_T_SA_S9_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 810a736:	b580      	push	{r7, lr}
 810a738:	b086      	sub	sp, #24
 810a73a:	af00      	add	r7, sp, #0
 810a73c:	60f8      	str	r0, [r7, #12]
 810a73e:	60b9      	str	r1, [r7, #8]
 810a740:	607a      	str	r2, [r7, #4]
      const bool __can_memmove = __is_trivial(_ValueType1);
 810a742:	2301      	movs	r3, #1
 810a744:	75fb      	strb	r3, [r7, #23]
      const bool __assignable
 810a746:	2301      	movs	r3, #1
 810a748:	75bb      	strb	r3, [r7, #22]
	__uninit_copy(__first, __last, __result);
 810a74a:	687a      	ldr	r2, [r7, #4]
 810a74c:	68b9      	ldr	r1, [r7, #8]
 810a74e:	68f8      	ldr	r0, [r7, #12]
 810a750:	f000 fb11 	bl	810ad76 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfEET0_T_SC_SB_>
 810a754:	4603      	mov	r3, r0
    }
 810a756:	4618      	mov	r0, r3
 810a758:	3718      	adds	r7, #24
 810a75a:	46bd      	mov	sp, r7
 810a75c:	bd80      	pop	{r7, pc}

0810a75e <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEiNS0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_>:
    __introsort_loop(_RandomAccessIterator __first,
 810a75e:	b5f0      	push	{r4, r5, r6, r7, lr}
 810a760:	b087      	sub	sp, #28
 810a762:	af00      	add	r7, sp, #0
 810a764:	60f8      	str	r0, [r7, #12]
 810a766:	60b9      	str	r1, [r7, #8]
 810a768:	607a      	str	r2, [r7, #4]
 810a76a:	703b      	strb	r3, [r7, #0]
      while (__last - __first > int(_S_threshold))
 810a76c:	e01b      	b.n	810a7a6 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEiNS0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_+0x48>
	  if (__depth_limit == 0)
 810a76e:	687b      	ldr	r3, [r7, #4]
 810a770:	2b00      	cmp	r3, #0
 810a772:	d106      	bne.n	810a782 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEiNS0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_+0x24>
	      std::__partial_sort(__first, __last, __last, __comp);
 810a774:	4633      	mov	r3, r6
 810a776:	68ba      	ldr	r2, [r7, #8]
 810a778:	68b9      	ldr	r1, [r7, #8]
 810a77a:	68f8      	ldr	r0, [r7, #12]
 810a77c:	f000 fb0b 	bl	810ad96 <_ZSt14__partial_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_T0_>
 810a780:	e021      	b.n	810a7c6 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEiNS0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_+0x68>
	  --__depth_limit;
 810a782:	687b      	ldr	r3, [r7, #4]
 810a784:	3b01      	subs	r3, #1
 810a786:	607b      	str	r3, [r7, #4]
	    std::__unguarded_partition_pivot(__first, __last, __comp);
 810a788:	462a      	mov	r2, r5
 810a78a:	68b9      	ldr	r1, [r7, #8]
 810a78c:	68f8      	ldr	r0, [r7, #12]
 810a78e:	f000 fb19 	bl	810adc4 <_ZSt27__unguarded_partition_pivotIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEET_S9_S9_T0_>
 810a792:	4603      	mov	r3, r0
 810a794:	617b      	str	r3, [r7, #20]
	  std::__introsort_loop(__cut, __last, __depth_limit, __comp);
 810a796:	4623      	mov	r3, r4
 810a798:	687a      	ldr	r2, [r7, #4]
 810a79a:	68b9      	ldr	r1, [r7, #8]
 810a79c:	6978      	ldr	r0, [r7, #20]
 810a79e:	f7ff ffde 	bl	810a75e <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEiNS0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_>
	  __last = __cut;
 810a7a2:	697b      	ldr	r3, [r7, #20]
 810a7a4:	60bb      	str	r3, [r7, #8]
      while (__last - __first > int(_S_threshold))
 810a7a6:	f107 020c 	add.w	r2, r7, #12
 810a7aa:	f107 0308 	add.w	r3, r7, #8
 810a7ae:	4611      	mov	r1, r2
 810a7b0:	4618      	mov	r0, r3
 810a7b2:	f7ff fc70 	bl	810a096 <_ZN9__gnu_cxxmiIPfSt6vectorIfSaIfEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 810a7b6:	4603      	mov	r3, r0
 810a7b8:	2b10      	cmp	r3, #16
 810a7ba:	bfcc      	ite	gt
 810a7bc:	2301      	movgt	r3, #1
 810a7be:	2300      	movle	r3, #0
 810a7c0:	b2db      	uxtb	r3, r3
 810a7c2:	2b00      	cmp	r3, #0
 810a7c4:	d1d3      	bne.n	810a76e <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEiNS0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_+0x10>
    }
 810a7c6:	371c      	adds	r7, #28
 810a7c8:	46bd      	mov	sp, r7
 810a7ca:	bdf0      	pop	{r4, r5, r6, r7, pc}

0810a7cc <_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_>:
    __final_insertion_sort(_RandomAccessIterator __first,
 810a7cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 810a7ce:	b085      	sub	sp, #20
 810a7d0:	af00      	add	r7, sp, #0
 810a7d2:	60f8      	str	r0, [r7, #12]
 810a7d4:	60b9      	str	r1, [r7, #8]
 810a7d6:	713a      	strb	r2, [r7, #4]
      if (__last - __first > int(_S_threshold))
 810a7d8:	f107 020c 	add.w	r2, r7, #12
 810a7dc:	f107 0308 	add.w	r3, r7, #8
 810a7e0:	4611      	mov	r1, r2
 810a7e2:	4618      	mov	r0, r3
 810a7e4:	f7ff fc57 	bl	810a096 <_ZN9__gnu_cxxmiIPfSt6vectorIfSaIfEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 810a7e8:	4603      	mov	r3, r0
 810a7ea:	2b10      	cmp	r3, #16
 810a7ec:	bfcc      	ite	gt
 810a7ee:	2301      	movgt	r3, #1
 810a7f0:	2300      	movle	r3, #0
 810a7f2:	b2db      	uxtb	r3, r3
 810a7f4:	2b00      	cmp	r3, #0
 810a7f6:	d018      	beq.n	810a82a <_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_+0x5e>
	  std::__insertion_sort(__first, __first + int(_S_threshold), __comp);
 810a7f8:	f107 030c 	add.w	r3, r7, #12
 810a7fc:	2110      	movs	r1, #16
 810a7fe:	4618      	mov	r0, r3
 810a800:	f7ff fae9 	bl	8109dd6 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 810a804:	4603      	mov	r3, r0
 810a806:	4632      	mov	r2, r6
 810a808:	4619      	mov	r1, r3
 810a80a:	68f8      	ldr	r0, [r7, #12]
 810a80c:	f000 fb1a 	bl	810ae44 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_>
	  std::__unguarded_insertion_sort(__first + int(_S_threshold), __last,
 810a810:	f107 030c 	add.w	r3, r7, #12
 810a814:	2110      	movs	r1, #16
 810a816:	4618      	mov	r0, r3
 810a818:	f7ff fadd 	bl	8109dd6 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 810a81c:	4603      	mov	r3, r0
 810a81e:	462a      	mov	r2, r5
 810a820:	68b9      	ldr	r1, [r7, #8]
 810a822:	4618      	mov	r0, r3
 810a824:	f000 fb77 	bl	810af16 <_ZSt26__unguarded_insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_>
    }
 810a828:	e004      	b.n	810a834 <_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_+0x68>
	std::__insertion_sort(__first, __last, __comp);
 810a82a:	4622      	mov	r2, r4
 810a82c:	68b9      	ldr	r1, [r7, #8]
 810a82e:	68f8      	ldr	r0, [r7, #12]
 810a830:	f000 fb08 	bl	810ae44 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_>
    }
 810a834:	bf00      	nop
 810a836:	3714      	adds	r7, #20
 810a838:	46bd      	mov	sp, r7
 810a83a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0810a83c <_ZSt7forwardIfEOT_RNSt16remove_referenceIS0_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 810a83c:	b480      	push	{r7}
 810a83e:	b083      	sub	sp, #12
 810a840:	af00      	add	r7, sp, #0
 810a842:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 810a844:	687b      	ldr	r3, [r7, #4]
 810a846:	4618      	mov	r0, r3
 810a848:	370c      	adds	r7, #12
 810a84a:	46bd      	mov	sp, r7
 810a84c:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a850:	4770      	bx	lr

0810a852 <_ZNSt16allocator_traitsISaIfEE9constructIfJfEEEvRS0_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 810a852:	b580      	push	{r7, lr}
 810a854:	b084      	sub	sp, #16
 810a856:	af00      	add	r7, sp, #0
 810a858:	60f8      	str	r0, [r7, #12]
 810a85a:	60b9      	str	r1, [r7, #8]
 810a85c:	607a      	str	r2, [r7, #4]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 810a85e:	6878      	ldr	r0, [r7, #4]
 810a860:	f7ff ffec 	bl	810a83c <_ZSt7forwardIfEOT_RNSt16remove_referenceIS0_E4typeE>
 810a864:	4603      	mov	r3, r0
 810a866:	4619      	mov	r1, r3
 810a868:	68b8      	ldr	r0, [r7, #8]
 810a86a:	f000 fb7c 	bl	810af66 <_ZSt12construct_atIfJfEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS1_DpOS2_>
	}
 810a86e:	bf00      	nop
 810a870:	3710      	adds	r7, #16
 810a872:	46bd      	mov	sp, r7
 810a874:	bd80      	pop	{r7, pc}

0810a876 <_ZNKSt6vectorIfSaIfEE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 810a876:	b590      	push	{r4, r7, lr}
 810a878:	b087      	sub	sp, #28
 810a87a:	af00      	add	r7, sp, #0
 810a87c:	60f8      	str	r0, [r7, #12]
 810a87e:	60b9      	str	r1, [r7, #8]
 810a880:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 810a882:	68f8      	ldr	r0, [r7, #12]
 810a884:	f7ff fb21 	bl	8109eca <_ZNKSt6vectorIfSaIfEE8max_sizeEv>
 810a888:	4604      	mov	r4, r0
 810a88a:	68f8      	ldr	r0, [r7, #12]
 810a88c:	f7ff f9a9 	bl	8109be2 <_ZNKSt6vectorIfSaIfEE4sizeEv>
 810a890:	4603      	mov	r3, r0
 810a892:	1ae2      	subs	r2, r4, r3
 810a894:	68bb      	ldr	r3, [r7, #8]
 810a896:	429a      	cmp	r2, r3
 810a898:	bf34      	ite	cc
 810a89a:	2301      	movcc	r3, #1
 810a89c:	2300      	movcs	r3, #0
 810a89e:	b2db      	uxtb	r3, r3
 810a8a0:	2b00      	cmp	r3, #0
 810a8a2:	d002      	beq.n	810a8aa <_ZNKSt6vectorIfSaIfEE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 810a8a4:	6878      	ldr	r0, [r7, #4]
 810a8a6:	f018 fa34 	bl	8122d12 <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + (std::max)(size(), __n);
 810a8aa:	68f8      	ldr	r0, [r7, #12]
 810a8ac:	f7ff f999 	bl	8109be2 <_ZNKSt6vectorIfSaIfEE4sizeEv>
 810a8b0:	4604      	mov	r4, r0
 810a8b2:	68f8      	ldr	r0, [r7, #12]
 810a8b4:	f7ff f995 	bl	8109be2 <_ZNKSt6vectorIfSaIfEE4sizeEv>
 810a8b8:	4603      	mov	r3, r0
 810a8ba:	613b      	str	r3, [r7, #16]
 810a8bc:	f107 0208 	add.w	r2, r7, #8
 810a8c0:	f107 0310 	add.w	r3, r7, #16
 810a8c4:	4611      	mov	r1, r2
 810a8c6:	4618      	mov	r0, r3
 810a8c8:	f7fb ff9e 	bl	8106808 <_ZSt3maxIjERKT_S2_S2_>
 810a8cc:	4603      	mov	r3, r0
 810a8ce:	681b      	ldr	r3, [r3, #0]
 810a8d0:	4423      	add	r3, r4
 810a8d2:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 810a8d4:	68f8      	ldr	r0, [r7, #12]
 810a8d6:	f7ff f984 	bl	8109be2 <_ZNKSt6vectorIfSaIfEE4sizeEv>
 810a8da:	4602      	mov	r2, r0
 810a8dc:	697b      	ldr	r3, [r7, #20]
 810a8de:	4293      	cmp	r3, r2
 810a8e0:	d306      	bcc.n	810a8f0 <_ZNKSt6vectorIfSaIfEE12_M_check_lenEjPKc+0x7a>
 810a8e2:	68f8      	ldr	r0, [r7, #12]
 810a8e4:	f7ff faf1 	bl	8109eca <_ZNKSt6vectorIfSaIfEE8max_sizeEv>
 810a8e8:	4602      	mov	r2, r0
 810a8ea:	697b      	ldr	r3, [r7, #20]
 810a8ec:	4293      	cmp	r3, r2
 810a8ee:	d904      	bls.n	810a8fa <_ZNKSt6vectorIfSaIfEE12_M_check_lenEjPKc+0x84>
 810a8f0:	68f8      	ldr	r0, [r7, #12]
 810a8f2:	f7ff faea 	bl	8109eca <_ZNKSt6vectorIfSaIfEE8max_sizeEv>
 810a8f6:	4603      	mov	r3, r0
 810a8f8:	e000      	b.n	810a8fc <_ZNKSt6vectorIfSaIfEE12_M_check_lenEjPKc+0x86>
 810a8fa:	697b      	ldr	r3, [r7, #20]
      }
 810a8fc:	4618      	mov	r0, r3
 810a8fe:	371c      	adds	r7, #28
 810a900:	46bd      	mov	sp, r7
 810a902:	bd90      	pop	{r4, r7, pc}

0810a904 <_ZNSt6vectorIfSaIfEE17_M_realloc_insertIJfEEEvN9__gnu_cxx17__normal_iteratorIPfS1_EEDpOT_>:
      vector<_Tp, _Alloc>::
 810a904:	b5b0      	push	{r4, r5, r7, lr}
 810a906:	b08c      	sub	sp, #48	@ 0x30
 810a908:	af00      	add	r7, sp, #0
 810a90a:	60f8      	str	r0, [r7, #12]
 810a90c:	60b9      	str	r1, [r7, #8]
 810a90e:	607a      	str	r2, [r7, #4]
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 810a910:	4a39      	ldr	r2, [pc, #228]	@ (810a9f8 <_ZNSt6vectorIfSaIfEE17_M_realloc_insertIJfEEEvN9__gnu_cxx17__normal_iteratorIPfS1_EEDpOT_+0xf4>)
 810a912:	2101      	movs	r1, #1
 810a914:	68f8      	ldr	r0, [r7, #12]
 810a916:	f7ff ffae 	bl	810a876 <_ZNKSt6vectorIfSaIfEE12_M_check_lenEjPKc>
 810a91a:	62f8      	str	r0, [r7, #44]	@ 0x2c
      pointer __old_start = this->_M_impl._M_start;
 810a91c:	68fb      	ldr	r3, [r7, #12]
 810a91e:	681b      	ldr	r3, [r3, #0]
 810a920:	62bb      	str	r3, [r7, #40]	@ 0x28
      pointer __old_finish = this->_M_impl._M_finish;
 810a922:	68fb      	ldr	r3, [r7, #12]
 810a924:	685b      	ldr	r3, [r3, #4]
 810a926:	627b      	str	r3, [r7, #36]	@ 0x24
      const size_type __elems_before = __position - begin();
 810a928:	68f8      	ldr	r0, [r7, #12]
 810a92a:	f7ff fa02 	bl	8109d32 <_ZNSt6vectorIfSaIfEE5beginEv>
 810a92e:	4603      	mov	r3, r0
 810a930:	617b      	str	r3, [r7, #20]
 810a932:	f107 0214 	add.w	r2, r7, #20
 810a936:	f107 0308 	add.w	r3, r7, #8
 810a93a:	4611      	mov	r1, r2
 810a93c:	4618      	mov	r0, r3
 810a93e:	f7ff fbaa 	bl	810a096 <_ZN9__gnu_cxxmiIPfSt6vectorIfSaIfEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 810a942:	4603      	mov	r3, r0
 810a944:	623b      	str	r3, [r7, #32]
      pointer __new_start(this->_M_allocate(__len));
 810a946:	68fb      	ldr	r3, [r7, #12]
 810a948:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 810a94a:	4618      	mov	r0, r3
 810a94c:	f7ff fade 	bl	8109f0c <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj>
 810a950:	61f8      	str	r0, [r7, #28]
      pointer __new_finish(__new_start);
 810a952:	69fb      	ldr	r3, [r7, #28]
 810a954:	61bb      	str	r3, [r7, #24]
	  _Alloc_traits::construct(this->_M_impl,
 810a956:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 810a958:	6a3b      	ldr	r3, [r7, #32]
 810a95a:	009b      	lsls	r3, r3, #2
	  _Alloc_traits::construct(this->_M_impl,
 810a95c:	69fa      	ldr	r2, [r7, #28]
 810a95e:	18d5      	adds	r5, r2, r3
 810a960:	6878      	ldr	r0, [r7, #4]
 810a962:	f7ff ff6b 	bl	810a83c <_ZSt7forwardIfEOT_RNSt16remove_referenceIS0_E4typeE>
 810a966:	4603      	mov	r3, r0
 810a968:	461a      	mov	r2, r3
 810a96a:	4629      	mov	r1, r5
 810a96c:	4620      	mov	r0, r4
 810a96e:	f7ff ff70 	bl	810a852 <_ZNSt16allocator_traitsISaIfEE9constructIfJfEEEvRS0_PT_DpOT0_>
	  __new_finish = pointer();
 810a972:	2300      	movs	r3, #0
 810a974:	61bb      	str	r3, [r7, #24]
	      __new_finish = _S_relocate(__old_start, __position.base(),
 810a976:	f107 0308 	add.w	r3, r7, #8
 810a97a:	4618      	mov	r0, r3
 810a97c:	f7ff fb80 	bl	810a080 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEE4baseEv>
 810a980:	4603      	mov	r3, r0
 810a982:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 810a984:	68fb      	ldr	r3, [r7, #12]
 810a986:	4618      	mov	r0, r3
 810a988:	f7ff fa53 	bl	8109e32 <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 810a98c:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 810a98e:	69fa      	ldr	r2, [r7, #28]
 810a990:	4621      	mov	r1, r4
 810a992:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 810a994:	f7ff face 	bl	8109f34 <_ZNSt6vectorIfSaIfEE11_S_relocateEPfS2_S2_RS0_>
 810a998:	61b8      	str	r0, [r7, #24]
	      ++__new_finish;
 810a99a:	69bb      	ldr	r3, [r7, #24]
 810a99c:	3304      	adds	r3, #4
 810a99e:	61bb      	str	r3, [r7, #24]
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 810a9a0:	f107 0308 	add.w	r3, r7, #8
 810a9a4:	4618      	mov	r0, r3
 810a9a6:	f7ff fb6b 	bl	810a080 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEE4baseEv>
 810a9aa:	4603      	mov	r3, r0
 810a9ac:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 810a9ae:	68fb      	ldr	r3, [r7, #12]
 810a9b0:	4618      	mov	r0, r3
 810a9b2:	f7ff fa3e 	bl	8109e32 <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 810a9b6:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 810a9b8:	69ba      	ldr	r2, [r7, #24]
 810a9ba:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 810a9bc:	4620      	mov	r0, r4
 810a9be:	f7ff fab9 	bl	8109f34 <_ZNSt6vectorIfSaIfEE11_S_relocateEPfS2_S2_RS0_>
 810a9c2:	61b8      	str	r0, [r7, #24]
      _M_deallocate(__old_start,
 810a9c4:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 810a9c6:	68fb      	ldr	r3, [r7, #12]
 810a9c8:	689a      	ldr	r2, [r3, #8]
 810a9ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810a9cc:	1ad3      	subs	r3, r2, r3
 810a9ce:	109b      	asrs	r3, r3, #2
      _M_deallocate(__old_start,
 810a9d0:	461a      	mov	r2, r3
 810a9d2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 810a9d4:	f7ff fa66 	bl	8109ea4 <_ZNSt12_Vector_baseIfSaIfEE13_M_deallocateEPfj>
      this->_M_impl._M_start = __new_start;
 810a9d8:	68fb      	ldr	r3, [r7, #12]
 810a9da:	69fa      	ldr	r2, [r7, #28]
 810a9dc:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 810a9de:	68fb      	ldr	r3, [r7, #12]
 810a9e0:	69ba      	ldr	r2, [r7, #24]
 810a9e2:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 810a9e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810a9e6:	009b      	lsls	r3, r3, #2
 810a9e8:	69fa      	ldr	r2, [r7, #28]
 810a9ea:	441a      	add	r2, r3
 810a9ec:	68fb      	ldr	r3, [r7, #12]
 810a9ee:	609a      	str	r2, [r3, #8]
    }
 810a9f0:	bf00      	nop
 810a9f2:	3730      	adds	r7, #48	@ 0x30
 810a9f4:	46bd      	mov	sp, r7
 810a9f6:	bdb0      	pop	{r4, r5, r7, pc}
 810a9f8:	08125404 	.word	0x08125404

0810a9fc <_ZNSt6vectorIfSaIfEE4backEv>:
      back() _GLIBCXX_NOEXCEPT
 810a9fc:	b580      	push	{r7, lr}
 810a9fe:	b084      	sub	sp, #16
 810aa00:	af00      	add	r7, sp, #0
 810aa02:	6078      	str	r0, [r7, #4]
	return *(end() - 1);
 810aa04:	6878      	ldr	r0, [r7, #4]
 810aa06:	f7ff f9a4 	bl	8109d52 <_ZNSt6vectorIfSaIfEE3endEv>
 810aa0a:	4603      	mov	r3, r0
 810aa0c:	60fb      	str	r3, [r7, #12]
 810aa0e:	f107 030c 	add.w	r3, r7, #12
 810aa12:	2101      	movs	r1, #1
 810aa14:	4618      	mov	r0, r3
 810aa16:	f000 f857 	bl	810aac8 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEmiEi>
 810aa1a:	4603      	mov	r3, r0
 810aa1c:	60bb      	str	r3, [r7, #8]
 810aa1e:	f107 0308 	add.w	r3, r7, #8
 810aa22:	4618      	mov	r0, r3
 810aa24:	f000 f82c 	bl	810aa80 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 810aa28:	4603      	mov	r3, r0
      }
 810aa2a:	4618      	mov	r0, r3
 810aa2c:	3710      	adds	r7, #16
 810aa2e:	46bd      	mov	sp, r7
 810aa30:	bd80      	pop	{r7, pc}

0810aa32 <_ZSt11swap_rangesIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_ET0_T_S8_S7_>:
    swap_ranges(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
 810aa32:	b580      	push	{r7, lr}
 810aa34:	b084      	sub	sp, #16
 810aa36:	af00      	add	r7, sp, #0
 810aa38:	60f8      	str	r0, [r7, #12]
 810aa3a:	60b9      	str	r1, [r7, #8]
 810aa3c:	607a      	str	r2, [r7, #4]
      for (; __first1 != __last1; ++__first1, (void)++__first2)
 810aa3e:	e00c      	b.n	810aa5a <_ZSt11swap_rangesIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_ET0_T_S8_S7_+0x28>
	std::iter_swap(__first1, __first2);
 810aa40:	6879      	ldr	r1, [r7, #4]
 810aa42:	68f8      	ldr	r0, [r7, #12]
 810aa44:	f000 f859 	bl	810aafa <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_EvT_T0_>
      for (; __first1 != __last1; ++__first1, (void)++__first2)
 810aa48:	f107 030c 	add.w	r3, r7, #12
 810aa4c:	4618      	mov	r0, r3
 810aa4e:	f000 f86b 	bl	810ab28 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEppEv>
 810aa52:	1d3b      	adds	r3, r7, #4
 810aa54:	4618      	mov	r0, r3
 810aa56:	f000 f867 	bl	810ab28 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEppEv>
 810aa5a:	f107 0208 	add.w	r2, r7, #8
 810aa5e:	f107 030c 	add.w	r3, r7, #12
 810aa62:	4611      	mov	r1, r2
 810aa64:	4618      	mov	r0, r3
 810aa66:	f7ff faf3 	bl	810a050 <_ZN9__gnu_cxxeqIPfSt6vectorIfSaIfEEEEbRKNS_17__normal_iteratorIT_T0_EESA_>
 810aa6a:	4603      	mov	r3, r0
 810aa6c:	f083 0301 	eor.w	r3, r3, #1
 810aa70:	b2db      	uxtb	r3, r3
 810aa72:	2b00      	cmp	r3, #0
 810aa74:	d1e4      	bne.n	810aa40 <_ZSt11swap_rangesIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_ET0_T_S8_S7_+0xe>
      return __first2;
 810aa76:	687b      	ldr	r3, [r7, #4]
    }
 810aa78:	4618      	mov	r0, r3
 810aa7a:	3710      	adds	r7, #16
 810aa7c:	46bd      	mov	sp, r7
 810aa7e:	bd80      	pop	{r7, pc}

0810aa80 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 810aa80:	b480      	push	{r7}
 810aa82:	b083      	sub	sp, #12
 810aa84:	af00      	add	r7, sp, #0
 810aa86:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 810aa88:	687b      	ldr	r3, [r7, #4]
 810aa8a:	681b      	ldr	r3, [r3, #0]
 810aa8c:	4618      	mov	r0, r3
 810aa8e:	370c      	adds	r7, #12
 810aa90:	46bd      	mov	sp, r7
 810aa92:	f85d 7b04 	ldr.w	r7, [sp], #4
 810aa96:	4770      	bx	lr

0810aa98 <_ZSt4moveIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_ET0_T_S8_S7_>:
    move(_II __first, _II __last, _OI __result)
 810aa98:	b590      	push	{r4, r7, lr}
 810aa9a:	b085      	sub	sp, #20
 810aa9c:	af00      	add	r7, sp, #0
 810aa9e:	60f8      	str	r0, [r7, #12]
 810aaa0:	60b9      	str	r1, [r7, #8]
 810aaa2:	607a      	str	r2, [r7, #4]
      return std::__copy_move_a<true>(std::__miter_base(__first),
 810aaa4:	68f8      	ldr	r0, [r7, #12]
 810aaa6:	f000 fa80 	bl	810afaa <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEET_S7_>
 810aaaa:	4604      	mov	r4, r0
 810aaac:	68b8      	ldr	r0, [r7, #8]
 810aaae:	f000 fa7c 	bl	810afaa <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEET_S7_>
 810aab2:	4603      	mov	r3, r0
 810aab4:	687a      	ldr	r2, [r7, #4]
 810aab6:	4619      	mov	r1, r3
 810aab8:	4620      	mov	r0, r4
 810aaba:	f000 fa81 	bl	810afc0 <_ZSt13__copy_move_aILb1EN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_ET1_T0_S8_S7_>
 810aabe:	4603      	mov	r3, r0
    }
 810aac0:	4618      	mov	r0, r3
 810aac2:	3714      	adds	r7, #20
 810aac4:	46bd      	mov	sp, r7
 810aac6:	bd90      	pop	{r4, r7, pc}

0810aac8 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEmiEi>:
      operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
 810aac8:	b580      	push	{r7, lr}
 810aaca:	b084      	sub	sp, #16
 810aacc:	af00      	add	r7, sp, #0
 810aace:	6078      	str	r0, [r7, #4]
 810aad0:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current - __n); }
 810aad2:	687b      	ldr	r3, [r7, #4]
 810aad4:	681a      	ldr	r2, [r3, #0]
 810aad6:	683b      	ldr	r3, [r7, #0]
 810aad8:	009b      	lsls	r3, r3, #2
 810aada:	425b      	negs	r3, r3
 810aadc:	4413      	add	r3, r2
 810aade:	60fb      	str	r3, [r7, #12]
 810aae0:	f107 020c 	add.w	r2, r7, #12
 810aae4:	f107 0308 	add.w	r3, r7, #8
 810aae8:	4611      	mov	r1, r2
 810aaea:	4618      	mov	r0, r3
 810aaec:	f7ff faa0 	bl	810a030 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEC1ERKS1_>
 810aaf0:	68bb      	ldr	r3, [r7, #8]
 810aaf2:	4618      	mov	r0, r3
 810aaf4:	3710      	adds	r7, #16
 810aaf6:	46bd      	mov	sp, r7
 810aaf8:	bd80      	pop	{r7, pc}

0810aafa <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_EvT_T0_>:
    iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
 810aafa:	b590      	push	{r4, r7, lr}
 810aafc:	b083      	sub	sp, #12
 810aafe:	af00      	add	r7, sp, #0
 810ab00:	6078      	str	r0, [r7, #4]
 810ab02:	6039      	str	r1, [r7, #0]
      swap(*__a, *__b);
 810ab04:	1d3b      	adds	r3, r7, #4
 810ab06:	4618      	mov	r0, r3
 810ab08:	f7ff ffba 	bl	810aa80 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 810ab0c:	4604      	mov	r4, r0
 810ab0e:	463b      	mov	r3, r7
 810ab10:	4618      	mov	r0, r3
 810ab12:	f7ff ffb5 	bl	810aa80 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 810ab16:	4603      	mov	r3, r0
 810ab18:	4619      	mov	r1, r3
 810ab1a:	4620      	mov	r0, r4
 810ab1c:	f000 fa71 	bl	810b002 <_ZSt4swapIfENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS4_ESt18is_move_assignableIS4_EEE5valueEvE4typeERS4_SE_>
    }
 810ab20:	bf00      	nop
 810ab22:	370c      	adds	r7, #12
 810ab24:	46bd      	mov	sp, r7
 810ab26:	bd90      	pop	{r4, r7, pc}

0810ab28 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 810ab28:	b480      	push	{r7}
 810ab2a:	b083      	sub	sp, #12
 810ab2c:	af00      	add	r7, sp, #0
 810ab2e:	6078      	str	r0, [r7, #4]
	++_M_current;
 810ab30:	687b      	ldr	r3, [r7, #4]
 810ab32:	681b      	ldr	r3, [r3, #0]
 810ab34:	1d1a      	adds	r2, r3, #4
 810ab36:	687b      	ldr	r3, [r7, #4]
 810ab38:	601a      	str	r2, [r3, #0]
	return *this;
 810ab3a:	687b      	ldr	r3, [r7, #4]
      }
 810ab3c:	4618      	mov	r0, r3
 810ab3e:	370c      	adds	r7, #12
 810ab40:	46bd      	mov	sp, r7
 810ab42:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ab46:	4770      	bx	lr

0810ab48 <_ZSt4swapIiENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS4_ESt18is_move_assignableIS4_EEE5valueEvE4typeERS4_SE_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
 810ab48:	b580      	push	{r7, lr}
 810ab4a:	b084      	sub	sp, #16
 810ab4c:	af00      	add	r7, sp, #0
 810ab4e:	6078      	str	r0, [r7, #4]
 810ab50:	6039      	str	r1, [r7, #0]
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 810ab52:	6878      	ldr	r0, [r7, #4]
 810ab54:	f000 fa74 	bl	810b040 <_ZSt4moveIRiEONSt16remove_referenceIT_E4typeEOS2_>
 810ab58:	4603      	mov	r3, r0
 810ab5a:	681b      	ldr	r3, [r3, #0]
 810ab5c:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 810ab5e:	6838      	ldr	r0, [r7, #0]
 810ab60:	f000 fa6e 	bl	810b040 <_ZSt4moveIRiEONSt16remove_referenceIT_E4typeEOS2_>
 810ab64:	4603      	mov	r3, r0
 810ab66:	681a      	ldr	r2, [r3, #0]
 810ab68:	687b      	ldr	r3, [r7, #4]
 810ab6a:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 810ab6c:	f107 030c 	add.w	r3, r7, #12
 810ab70:	4618      	mov	r0, r3
 810ab72:	f000 fa65 	bl	810b040 <_ZSt4moveIRiEONSt16remove_referenceIT_E4typeEOS2_>
 810ab76:	4603      	mov	r3, r0
 810ab78:	681a      	ldr	r2, [r3, #0]
 810ab7a:	683b      	ldr	r3, [r7, #0]
 810ab7c:	601a      	str	r2, [r3, #0]
    }
 810ab7e:	bf00      	nop
 810ab80:	3710      	adds	r7, #16
 810ab82:	46bd      	mov	sp, r7
 810ab84:	bd80      	pop	{r7, pc}

0810ab86 <_ZSt13move_backwardIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_ET0_T_S8_S7_>:
    move_backward(_BI1 __first, _BI1 __last, _BI2 __result)
 810ab86:	b590      	push	{r4, r7, lr}
 810ab88:	b085      	sub	sp, #20
 810ab8a:	af00      	add	r7, sp, #0
 810ab8c:	60f8      	str	r0, [r7, #12]
 810ab8e:	60b9      	str	r1, [r7, #8]
 810ab90:	607a      	str	r2, [r7, #4]
      return std::__copy_move_backward_a<true>(std::__miter_base(__first),
 810ab92:	68f8      	ldr	r0, [r7, #12]
 810ab94:	f000 fa09 	bl	810afaa <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEET_S7_>
 810ab98:	4604      	mov	r4, r0
 810ab9a:	68b8      	ldr	r0, [r7, #8]
 810ab9c:	f000 fa05 	bl	810afaa <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEET_S7_>
 810aba0:	4603      	mov	r3, r0
 810aba2:	687a      	ldr	r2, [r7, #4]
 810aba4:	4619      	mov	r1, r3
 810aba6:	4620      	mov	r0, r4
 810aba8:	f000 fa55 	bl	810b056 <_ZSt22__copy_move_backward_aILb1EN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_ET1_T0_S8_S7_>
 810abac:	4603      	mov	r3, r0
    }
 810abae:	4618      	mov	r0, r3
 810abb0:	3714      	adds	r7, #20
 810abb2:	46bd      	mov	sp, r7
 810abb4:	bd90      	pop	{r4, r7, pc}

0810abb6 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEmmEv>:
      operator--() _GLIBCXX_NOEXCEPT
 810abb6:	b480      	push	{r7}
 810abb8:	b083      	sub	sp, #12
 810abba:	af00      	add	r7, sp, #0
 810abbc:	6078      	str	r0, [r7, #4]
	--_M_current;
 810abbe:	687b      	ldr	r3, [r7, #4]
 810abc0:	681b      	ldr	r3, [r3, #0]
 810abc2:	1f1a      	subs	r2, r3, #4
 810abc4:	687b      	ldr	r3, [r7, #4]
 810abc6:	601a      	str	r2, [r3, #0]
	return *this;
 810abc8:	687b      	ldr	r3, [r7, #4]
      }
 810abca:	4618      	mov	r0, r3
 810abcc:	370c      	adds	r7, #12
 810abce:	46bd      	mov	sp, r7
 810abd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 810abd4:	4770      	bx	lr

0810abd6 <_ZNSt12_Destroy_auxILb0EE9__destroyIPfEEvT_S3_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
 810abd6:	b580      	push	{r7, lr}
 810abd8:	b082      	sub	sp, #8
 810abda:	af00      	add	r7, sp, #0
 810abdc:	6078      	str	r0, [r7, #4]
 810abde:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 810abe0:	e009      	b.n	810abf6 <_ZNSt12_Destroy_auxILb0EE9__destroyIPfEEvT_S3_+0x20>
	    std::_Destroy(std::__addressof(*__first));
 810abe2:	6878      	ldr	r0, [r7, #4]
 810abe4:	f000 f88e 	bl	810ad04 <_ZSt11__addressofIfEPT_RS0_>
 810abe8:	4603      	mov	r3, r0
 810abea:	4618      	mov	r0, r3
 810abec:	f000 fa54 	bl	810b098 <_ZSt8_DestroyIfEvPT_>
	  for (; __first != __last; ++__first)
 810abf0:	687b      	ldr	r3, [r7, #4]
 810abf2:	3304      	adds	r3, #4
 810abf4:	607b      	str	r3, [r7, #4]
 810abf6:	687a      	ldr	r2, [r7, #4]
 810abf8:	683b      	ldr	r3, [r7, #0]
 810abfa:	429a      	cmp	r2, r3
 810abfc:	d1f1      	bne.n	810abe2 <_ZNSt12_Destroy_auxILb0EE9__destroyIPfEEvT_S3_+0xc>
	}
 810abfe:	bf00      	nop
 810ac00:	bf00      	nop
 810ac02:	3708      	adds	r7, #8
 810ac04:	46bd      	mov	sp, r7
 810ac06:	bd80      	pop	{r7, pc}

0810ac08 <_ZNSt12_Destroy_auxILb1EE9__destroyIPfEEvT_S3_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 810ac08:	b480      	push	{r7}
 810ac0a:	b083      	sub	sp, #12
 810ac0c:	af00      	add	r7, sp, #0
 810ac0e:	6078      	str	r0, [r7, #4]
 810ac10:	6039      	str	r1, [r7, #0]
 810ac12:	bf00      	nop
 810ac14:	370c      	adds	r7, #12
 810ac16:	46bd      	mov	sp, r7
 810ac18:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ac1c:	4770      	bx	lr

0810ac1e <_ZSt12__niter_baseIPfET_S1_>:
    __niter_base(_Iterator __it)
 810ac1e:	b480      	push	{r7}
 810ac20:	b083      	sub	sp, #12
 810ac22:	af00      	add	r7, sp, #0
 810ac24:	6078      	str	r0, [r7, #4]
    { return __it; }
 810ac26:	687b      	ldr	r3, [r7, #4]
 810ac28:	4618      	mov	r0, r3
 810ac2a:	370c      	adds	r7, #12
 810ac2c:	46bd      	mov	sp, r7
 810ac2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ac32:	4770      	bx	lr

0810ac34 <_ZN9__gnu_cxx17__normal_iteratorIPfvEC1ERKS1_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 810ac34:	b480      	push	{r7}
 810ac36:	b083      	sub	sp, #12
 810ac38:	af00      	add	r7, sp, #0
 810ac3a:	6078      	str	r0, [r7, #4]
 810ac3c:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 810ac3e:	683b      	ldr	r3, [r7, #0]
 810ac40:	681a      	ldr	r2, [r3, #0]
 810ac42:	687b      	ldr	r3, [r7, #4]
 810ac44:	601a      	str	r2, [r3, #0]
 810ac46:	687b      	ldr	r3, [r7, #4]
 810ac48:	4618      	mov	r0, r3
 810ac4a:	370c      	adds	r7, #12
 810ac4c:	46bd      	mov	sp, r7
 810ac4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ac52:	4770      	bx	lr

0810ac54 <_ZSt14__relocate_a_1IffENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS2_E4typeES4_S4_S4_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
 810ac54:	b580      	push	{r7, lr}
 810ac56:	b086      	sub	sp, #24
 810ac58:	af00      	add	r7, sp, #0
 810ac5a:	60f8      	str	r0, [r7, #12]
 810ac5c:	60b9      	str	r1, [r7, #8]
 810ac5e:	607a      	str	r2, [r7, #4]
 810ac60:	603b      	str	r3, [r7, #0]
      ptrdiff_t __count = __last - __first;
 810ac62:	68ba      	ldr	r2, [r7, #8]
 810ac64:	68fb      	ldr	r3, [r7, #12]
 810ac66:	1ad3      	subs	r3, r2, r3
 810ac68:	109b      	asrs	r3, r3, #2
 810ac6a:	617b      	str	r3, [r7, #20]
      if (__count > 0)
 810ac6c:	697b      	ldr	r3, [r7, #20]
 810ac6e:	2b00      	cmp	r3, #0
 810ac70:	dd22      	ble.n	810acb8 <_ZSt14__relocate_a_1IffENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS2_E4typeES4_S4_S4_RSaIT0_E+0x64>
	  if (std::is_constant_evaluated())
 810ac72:	f7fb f8ac 	bl	8105dce <_ZSt21is_constant_evaluatedv>
 810ac76:	4603      	mov	r3, r0
 810ac78:	2b00      	cmp	r3, #0
 810ac7a:	d016      	beq.n	810acaa <_ZSt14__relocate_a_1IffENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS2_E4typeES4_S4_S4_RSaIT0_E+0x56>
	      __gnu_cxx::__normal_iterator<_Tp*, void> __out(__result);
 810ac7c:	1d3a      	adds	r2, r7, #4
 810ac7e:	f107 0310 	add.w	r3, r7, #16
 810ac82:	4611      	mov	r1, r2
 810ac84:	4618      	mov	r0, r3
 810ac86:	f7ff ffd5 	bl	810ac34 <_ZN9__gnu_cxx17__normal_iteratorIPfvEC1ERKS1_>
	      __out = std::__relocate_a_1(__first, __last, __out, __alloc);
 810ac8a:	683b      	ldr	r3, [r7, #0]
 810ac8c:	693a      	ldr	r2, [r7, #16]
 810ac8e:	68b9      	ldr	r1, [r7, #8]
 810ac90:	68f8      	ldr	r0, [r7, #12]
 810ac92:	f000 fa45 	bl	810b120 <_ZSt14__relocate_a_1IPfN9__gnu_cxx17__normal_iteratorIS0_vEESaIfEET0_T_S6_S5_RT1_>
 810ac96:	4603      	mov	r3, r0
 810ac98:	613b      	str	r3, [r7, #16]
	      return __out.base();
 810ac9a:	f107 0310 	add.w	r3, r7, #16
 810ac9e:	4618      	mov	r0, r3
 810aca0:	f000 fa6c 	bl	810b17c <_ZNK9__gnu_cxx17__normal_iteratorIPfvE4baseEv>
 810aca4:	4603      	mov	r3, r0
 810aca6:	681b      	ldr	r3, [r3, #0]
 810aca8:	e00a      	b.n	810acc0 <_ZSt14__relocate_a_1IffENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS2_E4typeES4_S4_S4_RSaIT0_E+0x6c>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 810acaa:	6878      	ldr	r0, [r7, #4]
 810acac:	697b      	ldr	r3, [r7, #20]
 810acae:	009b      	lsls	r3, r3, #2
 810acb0:	461a      	mov	r2, r3
 810acb2:	68f9      	ldr	r1, [r7, #12]
 810acb4:	f019 f8d8 	bl	8123e68 <memmove>
      return __result + __count;
 810acb8:	687a      	ldr	r2, [r7, #4]
 810acba:	697b      	ldr	r3, [r7, #20]
 810acbc:	009b      	lsls	r3, r3, #2
 810acbe:	4413      	add	r3, r2
    }
 810acc0:	4618      	mov	r0, r3
 810acc2:	3718      	adds	r7, #24
 810acc4:	46bd      	mov	sp, r7
 810acc6:	bd80      	pop	{r7, pc}

0810acc8 <_ZNSaIfEC1ERKS_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 810acc8:	b580      	push	{r7, lr}
 810acca:	b082      	sub	sp, #8
 810accc:	af00      	add	r7, sp, #0
 810acce:	6078      	str	r0, [r7, #4]
 810acd0:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 810acd2:	6839      	ldr	r1, [r7, #0]
 810acd4:	6878      	ldr	r0, [r7, #4]
 810acd6:	f000 fa5c 	bl	810b192 <_ZNSt15__new_allocatorIfEC1ERKS0_>
 810acda:	687b      	ldr	r3, [r7, #4]
 810acdc:	4618      	mov	r0, r3
 810acde:	3708      	adds	r7, #8
 810ace0:	46bd      	mov	sp, r7
 810ace2:	bd80      	pop	{r7, pc}

0810ace4 <_ZN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 810ace4:	b480      	push	{r7}
 810ace6:	b083      	sub	sp, #12
 810ace8:	af00      	add	r7, sp, #0
 810acea:	6078      	str	r0, [r7, #4]
	++_M_current;
 810acec:	687b      	ldr	r3, [r7, #4]
 810acee:	681b      	ldr	r3, [r3, #0]
 810acf0:	1d1a      	adds	r2, r3, #4
 810acf2:	687b      	ldr	r3, [r7, #4]
 810acf4:	601a      	str	r2, [r3, #0]
	return *this;
 810acf6:	687b      	ldr	r3, [r7, #4]
      }
 810acf8:	4618      	mov	r0, r3
 810acfa:	370c      	adds	r7, #12
 810acfc:	46bd      	mov	sp, r7
 810acfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ad02:	4770      	bx	lr

0810ad04 <_ZSt11__addressofIfEPT_RS0_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 810ad04:	b480      	push	{r7}
 810ad06:	b083      	sub	sp, #12
 810ad08:	af00      	add	r7, sp, #0
 810ad0a:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 810ad0c:	687b      	ldr	r3, [r7, #4]
 810ad0e:	4618      	mov	r0, r3
 810ad10:	370c      	adds	r7, #12
 810ad12:	46bd      	mov	sp, r7
 810ad14:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ad18:	4770      	bx	lr

0810ad1a <_ZNK9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 810ad1a:	b480      	push	{r7}
 810ad1c:	b083      	sub	sp, #12
 810ad1e:	af00      	add	r7, sp, #0
 810ad20:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 810ad22:	687b      	ldr	r3, [r7, #4]
 810ad24:	681b      	ldr	r3, [r3, #0]
 810ad26:	4618      	mov	r0, r3
 810ad28:	370c      	adds	r7, #12
 810ad2a:	46bd      	mov	sp, r7
 810ad2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ad30:	4770      	bx	lr

0810ad32 <_ZSt10_ConstructIfJRKfEEvPT_DpOT0_>:
    _Construct(_Tp* __p, _Args&&... __args)
 810ad32:	b590      	push	{r4, r7, lr}
 810ad34:	b083      	sub	sp, #12
 810ad36:	af00      	add	r7, sp, #0
 810ad38:	6078      	str	r0, [r7, #4]
 810ad3a:	6039      	str	r1, [r7, #0]
      if (std::__is_constant_evaluated())
 810ad3c:	f7f8 fb3a 	bl	81033b4 <_ZSt23__is_constant_evaluatedv>
 810ad40:	4603      	mov	r3, r0
 810ad42:	2b00      	cmp	r3, #0
 810ad44:	d008      	beq.n	810ad58 <_ZSt10_ConstructIfJRKfEEvPT_DpOT0_+0x26>
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 810ad46:	6838      	ldr	r0, [r7, #0]
 810ad48:	f000 fa2f 	bl	810b1aa <_ZSt7forwardIRKfEOT_RNSt16remove_referenceIS2_E4typeE>
 810ad4c:	4603      	mov	r3, r0
 810ad4e:	4619      	mov	r1, r3
 810ad50:	6878      	ldr	r0, [r7, #4]
 810ad52:	f000 fa35 	bl	810b1c0 <_ZSt12construct_atIfJRKfEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>
	  return;
 810ad56:	e00b      	b.n	810ad70 <_ZSt10_ConstructIfJRKfEEvPT_DpOT0_+0x3e>
      ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
 810ad58:	687b      	ldr	r3, [r7, #4]
 810ad5a:	4619      	mov	r1, r3
 810ad5c:	2004      	movs	r0, #4
 810ad5e:	f7f6 fa93 	bl	8101288 <_ZnwjPv>
 810ad62:	4604      	mov	r4, r0
 810ad64:	6838      	ldr	r0, [r7, #0]
 810ad66:	f000 fa20 	bl	810b1aa <_ZSt7forwardIRKfEOT_RNSt16remove_referenceIS2_E4typeE>
 810ad6a:	4603      	mov	r3, r0
 810ad6c:	681b      	ldr	r3, [r3, #0]
 810ad6e:	6023      	str	r3, [r4, #0]
    }
 810ad70:	370c      	adds	r7, #12
 810ad72:	46bd      	mov	sp, r7
 810ad74:	bd90      	pop	{r4, r7, pc}

0810ad76 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfEET0_T_SC_SB_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 810ad76:	b580      	push	{r7, lr}
 810ad78:	b084      	sub	sp, #16
 810ad7a:	af00      	add	r7, sp, #0
 810ad7c:	60f8      	str	r0, [r7, #12]
 810ad7e:	60b9      	str	r1, [r7, #8]
 810ad80:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 810ad82:	687a      	ldr	r2, [r7, #4]
 810ad84:	68b9      	ldr	r1, [r7, #8]
 810ad86:	68f8      	ldr	r0, [r7, #12]
 810ad88:	f000 fa30 	bl	810b1ec <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfET0_T_SA_S9_>
 810ad8c:	4603      	mov	r3, r0
 810ad8e:	4618      	mov	r0, r3
 810ad90:	3710      	adds	r7, #16
 810ad92:	46bd      	mov	sp, r7
 810ad94:	bd80      	pop	{r7, pc}

0810ad96 <_ZSt14__partial_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_T0_>:
    __partial_sort(_RandomAccessIterator __first,
 810ad96:	b590      	push	{r4, r7, lr}
 810ad98:	b085      	sub	sp, #20
 810ad9a:	af00      	add	r7, sp, #0
 810ad9c:	60f8      	str	r0, [r7, #12]
 810ad9e:	60b9      	str	r1, [r7, #8]
 810ada0:	607a      	str	r2, [r7, #4]
 810ada2:	703b      	strb	r3, [r7, #0]
      std::__heap_select(__first, __middle, __last, __comp);
 810ada4:	4623      	mov	r3, r4
 810ada6:	687a      	ldr	r2, [r7, #4]
 810ada8:	68b9      	ldr	r1, [r7, #8]
 810adaa:	68f8      	ldr	r0, [r7, #12]
 810adac:	f000 fa6e 	bl	810b28c <_ZSt13__heap_selectIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_T0_>
      std::__sort_heap(__first, __middle, __comp);
 810adb0:	463b      	mov	r3, r7
 810adb2:	461a      	mov	r2, r3
 810adb4:	68b9      	ldr	r1, [r7, #8]
 810adb6:	68f8      	ldr	r0, [r7, #12]
 810adb8:	f000 faa6 	bl	810b308 <_ZSt11__sort_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_RT0_>
    }
 810adbc:	bf00      	nop
 810adbe:	3714      	adds	r7, #20
 810adc0:	46bd      	mov	sp, r7
 810adc2:	bd90      	pop	{r4, r7, pc}

0810adc4 <_ZSt27__unguarded_partition_pivotIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEET_S9_S9_T0_>:
    __unguarded_partition_pivot(_RandomAccessIterator __first,
 810adc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 810adc6:	b089      	sub	sp, #36	@ 0x24
 810adc8:	af02      	add	r7, sp, #8
 810adca:	60f8      	str	r0, [r7, #12]
 810adcc:	60b9      	str	r1, [r7, #8]
 810adce:	713a      	strb	r2, [r7, #4]
      _RandomAccessIterator __mid = __first + (__last - __first) / 2;
 810add0:	f107 020c 	add.w	r2, r7, #12
 810add4:	f107 0308 	add.w	r3, r7, #8
 810add8:	4611      	mov	r1, r2
 810adda:	4618      	mov	r0, r3
 810addc:	f7ff f95b 	bl	810a096 <_ZN9__gnu_cxxmiIPfSt6vectorIfSaIfEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 810ade0:	4603      	mov	r3, r0
 810ade2:	0fda      	lsrs	r2, r3, #31
 810ade4:	4413      	add	r3, r2
 810ade6:	105b      	asrs	r3, r3, #1
 810ade8:	461a      	mov	r2, r3
 810adea:	f107 030c 	add.w	r3, r7, #12
 810adee:	4611      	mov	r1, r2
 810adf0:	4618      	mov	r0, r3
 810adf2:	f7fe fff0 	bl	8109dd6 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 810adf6:	4603      	mov	r3, r0
 810adf8:	617b      	str	r3, [r7, #20]
      std::__move_median_to_first(__first, __first + 1, __mid, __last - 1,
 810adfa:	f107 030c 	add.w	r3, r7, #12
 810adfe:	2101      	movs	r1, #1
 810ae00:	4618      	mov	r0, r3
 810ae02:	f7fe ffe8 	bl	8109dd6 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 810ae06:	4604      	mov	r4, r0
 810ae08:	f107 0308 	add.w	r3, r7, #8
 810ae0c:	2101      	movs	r1, #1
 810ae0e:	4618      	mov	r0, r3
 810ae10:	f7ff fe5a 	bl	810aac8 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEmiEi>
 810ae14:	4603      	mov	r3, r0
 810ae16:	f88d 5000 	strb.w	r5, [sp]
 810ae1a:	697a      	ldr	r2, [r7, #20]
 810ae1c:	4621      	mov	r1, r4
 810ae1e:	68f8      	ldr	r0, [r7, #12]
 810ae20:	f000 fa99 	bl	810b356 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_S9_T0_>
      return std::__unguarded_partition(__first + 1, __last, __first, __comp);
 810ae24:	f107 030c 	add.w	r3, r7, #12
 810ae28:	2101      	movs	r1, #1
 810ae2a:	4618      	mov	r0, r3
 810ae2c:	f7fe ffd3 	bl	8109dd6 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 810ae30:	4633      	mov	r3, r6
 810ae32:	68fa      	ldr	r2, [r7, #12]
 810ae34:	68b9      	ldr	r1, [r7, #8]
 810ae36:	f000 fae3 	bl	810b400 <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEET_S9_S9_S9_T0_>
 810ae3a:	4603      	mov	r3, r0
    }
 810ae3c:	4618      	mov	r0, r3
 810ae3e:	371c      	adds	r7, #28
 810ae40:	46bd      	mov	sp, r7
 810ae42:	bdf0      	pop	{r4, r5, r6, r7, pc}

0810ae44 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_>:
    __insertion_sort(_RandomAccessIterator __first,
 810ae44:	b5f0      	push	{r4, r5, r6, r7, lr}
 810ae46:	b087      	sub	sp, #28
 810ae48:	af00      	add	r7, sp, #0
 810ae4a:	60f8      	str	r0, [r7, #12]
 810ae4c:	60b9      	str	r1, [r7, #8]
 810ae4e:	713a      	strb	r2, [r7, #4]
      if (__first == __last) return;
 810ae50:	f107 0208 	add.w	r2, r7, #8
 810ae54:	f107 030c 	add.w	r3, r7, #12
 810ae58:	4611      	mov	r1, r2
 810ae5a:	4618      	mov	r0, r3
 810ae5c:	f7ff f8f8 	bl	810a050 <_ZN9__gnu_cxxeqIPfSt6vectorIfSaIfEEEEbRKNS_17__normal_iteratorIT_T0_EESA_>
 810ae60:	4603      	mov	r3, r0
 810ae62:	2b00      	cmp	r3, #0
 810ae64:	d153      	bne.n	810af0e <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_+0xca>
      for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)
 810ae66:	f107 030c 	add.w	r3, r7, #12
 810ae6a:	2101      	movs	r1, #1
 810ae6c:	4618      	mov	r0, r3
 810ae6e:	f7fe ffb2 	bl	8109dd6 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 810ae72:	4603      	mov	r3, r0
 810ae74:	617b      	str	r3, [r7, #20]
 810ae76:	e03b      	b.n	810aef0 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_+0xac>
	  if (__comp(__i, __first))
 810ae78:	1d3b      	adds	r3, r7, #4
 810ae7a:	68fa      	ldr	r2, [r7, #12]
 810ae7c:	6979      	ldr	r1, [r7, #20]
 810ae7e:	4618      	mov	r0, r3
 810ae80:	f000 fb11 	bl	810b4a6 <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPfSt6vectorIfSaIfEEEES8_EEbT_T0_>
 810ae84:	4603      	mov	r3, r0
 810ae86:	2b00      	cmp	r3, #0
 810ae88:	d026      	beq.n	810aed8 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_+0x94>
		__val = _GLIBCXX_MOVE(*__i);
 810ae8a:	f107 0314 	add.w	r3, r7, #20
 810ae8e:	4618      	mov	r0, r3
 810ae90:	f7ff fdf6 	bl	810aa80 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 810ae94:	4603      	mov	r3, r0
 810ae96:	4618      	mov	r0, r3
 810ae98:	f7ff f942 	bl	810a120 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 810ae9c:	4603      	mov	r3, r0
 810ae9e:	681b      	ldr	r3, [r3, #0]
 810aea0:	613b      	str	r3, [r7, #16]
	      _GLIBCXX_MOVE_BACKWARD3(__first, __i, __i + 1);
 810aea2:	f107 0314 	add.w	r3, r7, #20
 810aea6:	2101      	movs	r1, #1
 810aea8:	4618      	mov	r0, r3
 810aeaa:	f7fe ff94 	bl	8109dd6 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 810aeae:	4603      	mov	r3, r0
 810aeb0:	461a      	mov	r2, r3
 810aeb2:	6979      	ldr	r1, [r7, #20]
 810aeb4:	68f8      	ldr	r0, [r7, #12]
 810aeb6:	f7ff fe66 	bl	810ab86 <_ZSt13move_backwardIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_ET0_T_S8_S7_>
	      *__first = _GLIBCXX_MOVE(__val);
 810aeba:	f107 0310 	add.w	r3, r7, #16
 810aebe:	4618      	mov	r0, r3
 810aec0:	f7ff f92e 	bl	810a120 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 810aec4:	4603      	mov	r3, r0
 810aec6:	681c      	ldr	r4, [r3, #0]
 810aec8:	f107 030c 	add.w	r3, r7, #12
 810aecc:	4618      	mov	r0, r3
 810aece:	f7ff fdd7 	bl	810aa80 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 810aed2:	4603      	mov	r3, r0
 810aed4:	601c      	str	r4, [r3, #0]
 810aed6:	e006      	b.n	810aee6 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_+0xa2>
				__gnu_cxx::__ops::__val_comp_iter(__comp));
 810aed8:	4630      	mov	r0, r6
 810aeda:	f7fe fc34 	bl	8109746 <_ZN9__gnu_cxx5__ops15__val_comp_iterENS0_15_Iter_less_iterE>
	    std::__unguarded_linear_insert(__i,
 810aede:	4629      	mov	r1, r5
 810aee0:	6978      	ldr	r0, [r7, #20]
 810aee2:	f000 fb05 	bl	810b4f0 <_ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops14_Val_less_iterEEvT_T0_>
      for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)
 810aee6:	f107 0314 	add.w	r3, r7, #20
 810aeea:	4618      	mov	r0, r3
 810aeec:	f7ff fe1c 	bl	810ab28 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEppEv>
 810aef0:	f107 0208 	add.w	r2, r7, #8
 810aef4:	f107 0314 	add.w	r3, r7, #20
 810aef8:	4611      	mov	r1, r2
 810aefa:	4618      	mov	r0, r3
 810aefc:	f7ff f8a8 	bl	810a050 <_ZN9__gnu_cxxeqIPfSt6vectorIfSaIfEEEEbRKNS_17__normal_iteratorIT_T0_EESA_>
 810af00:	4603      	mov	r3, r0
 810af02:	f083 0301 	eor.w	r3, r3, #1
 810af06:	b2db      	uxtb	r3, r3
 810af08:	2b00      	cmp	r3, #0
 810af0a:	d1b5      	bne.n	810ae78 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_+0x34>
 810af0c:	e000      	b.n	810af10 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_+0xcc>
      if (__first == __last) return;
 810af0e:	bf00      	nop
    }
 810af10:	371c      	adds	r7, #28
 810af12:	46bd      	mov	sp, r7
 810af14:	bdf0      	pop	{r4, r5, r6, r7, pc}

0810af16 <_ZSt26__unguarded_insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_>:
    __unguarded_insertion_sort(_RandomAccessIterator __first,
 810af16:	b5b0      	push	{r4, r5, r7, lr}
 810af18:	b086      	sub	sp, #24
 810af1a:	af00      	add	r7, sp, #0
 810af1c:	60f8      	str	r0, [r7, #12]
 810af1e:	60b9      	str	r1, [r7, #8]
 810af20:	713a      	strb	r2, [r7, #4]
      for (_RandomAccessIterator __i = __first; __i != __last; ++__i)
 810af22:	68fb      	ldr	r3, [r7, #12]
 810af24:	617b      	str	r3, [r7, #20]
 810af26:	e00b      	b.n	810af40 <_ZSt26__unguarded_insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_+0x2a>
				__gnu_cxx::__ops::__val_comp_iter(__comp));
 810af28:	4628      	mov	r0, r5
 810af2a:	f7fe fc0c 	bl	8109746 <_ZN9__gnu_cxx5__ops15__val_comp_iterENS0_15_Iter_less_iterE>
	std::__unguarded_linear_insert(__i,
 810af2e:	4621      	mov	r1, r4
 810af30:	6978      	ldr	r0, [r7, #20]
 810af32:	f000 fadd 	bl	810b4f0 <_ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops14_Val_less_iterEEvT_T0_>
      for (_RandomAccessIterator __i = __first; __i != __last; ++__i)
 810af36:	f107 0314 	add.w	r3, r7, #20
 810af3a:	4618      	mov	r0, r3
 810af3c:	f7ff fdf4 	bl	810ab28 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEppEv>
 810af40:	f107 0208 	add.w	r2, r7, #8
 810af44:	f107 0314 	add.w	r3, r7, #20
 810af48:	4611      	mov	r1, r2
 810af4a:	4618      	mov	r0, r3
 810af4c:	f7ff f880 	bl	810a050 <_ZN9__gnu_cxxeqIPfSt6vectorIfSaIfEEEEbRKNS_17__normal_iteratorIT_T0_EESA_>
 810af50:	4603      	mov	r3, r0
 810af52:	f083 0301 	eor.w	r3, r3, #1
 810af56:	b2db      	uxtb	r3, r3
 810af58:	2b00      	cmp	r3, #0
 810af5a:	d1e5      	bne.n	810af28 <_ZSt26__unguarded_insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_+0x12>
    }
 810af5c:	bf00      	nop
 810af5e:	bf00      	nop
 810af60:	3718      	adds	r7, #24
 810af62:	46bd      	mov	sp, r7
 810af64:	bdb0      	pop	{r4, r5, r7, pc}

0810af66 <_ZSt12construct_atIfJfEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS1_DpOS2_>:
    construct_at(_Tp* __location, _Args&&... __args)
 810af66:	b590      	push	{r4, r7, lr}
 810af68:	b083      	sub	sp, #12
 810af6a:	af00      	add	r7, sp, #0
 810af6c:	6078      	str	r0, [r7, #4]
 810af6e:	6039      	str	r1, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 810af70:	687b      	ldr	r3, [r7, #4]
 810af72:	4619      	mov	r1, r3
 810af74:	2004      	movs	r0, #4
 810af76:	f7f6 f987 	bl	8101288 <_ZnwjPv>
 810af7a:	4604      	mov	r4, r0
 810af7c:	6838      	ldr	r0, [r7, #0]
 810af7e:	f7ff fc5d 	bl	810a83c <_ZSt7forwardIfEOT_RNSt16remove_referenceIS0_E4typeE>
 810af82:	4603      	mov	r3, r0
 810af84:	681b      	ldr	r3, [r3, #0]
 810af86:	6023      	str	r3, [r4, #0]
 810af88:	4623      	mov	r3, r4
 810af8a:	4618      	mov	r0, r3
 810af8c:	370c      	adds	r7, #12
 810af8e:	46bd      	mov	sp, r7
 810af90:	bd90      	pop	{r4, r7, pc}

0810af92 <_ZNSt16allocator_traitsISaIfEE7destroyIfEEvRS0_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 810af92:	b580      	push	{r7, lr}
 810af94:	b082      	sub	sp, #8
 810af96:	af00      	add	r7, sp, #0
 810af98:	6078      	str	r0, [r7, #4]
 810af9a:	6039      	str	r1, [r7, #0]
	  std::destroy_at(__p);
 810af9c:	6838      	ldr	r0, [r7, #0]
 810af9e:	f000 faf2 	bl	810b586 <_ZSt10destroy_atIfEvPT_>
	}
 810afa2:	bf00      	nop
 810afa4:	3708      	adds	r7, #8
 810afa6:	46bd      	mov	sp, r7
 810afa8:	bd80      	pop	{r7, pc}

0810afaa <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEET_S7_>:
  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __miter_base(_Iterator __it)
 810afaa:	b480      	push	{r7}
 810afac:	b083      	sub	sp, #12
 810afae:	af00      	add	r7, sp, #0
 810afb0:	6078      	str	r0, [r7, #4]
    { return __it; }
 810afb2:	687b      	ldr	r3, [r7, #4]
 810afb4:	4618      	mov	r0, r3
 810afb6:	370c      	adds	r7, #12
 810afb8:	46bd      	mov	sp, r7
 810afba:	f85d 7b04 	ldr.w	r7, [sp], #4
 810afbe:	4770      	bx	lr

0810afc0 <_ZSt13__copy_move_aILb1EN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_ET1_T0_S8_S7_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 810afc0:	b5b0      	push	{r4, r5, r7, lr}
 810afc2:	b084      	sub	sp, #16
 810afc4:	af00      	add	r7, sp, #0
 810afc6:	60f8      	str	r0, [r7, #12]
 810afc8:	60b9      	str	r1, [r7, #8]
 810afca:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 810afcc:	68f8      	ldr	r0, [r7, #12]
 810afce:	f000 fae4 	bl	810b59a <_ZSt12__niter_baseIPfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>
 810afd2:	4604      	mov	r4, r0
 810afd4:	68b8      	ldr	r0, [r7, #8]
 810afd6:	f000 fae0 	bl	810b59a <_ZSt12__niter_baseIPfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>
 810afda:	4605      	mov	r5, r0
 810afdc:	6878      	ldr	r0, [r7, #4]
 810afde:	f000 fadc 	bl	810b59a <_ZSt12__niter_baseIPfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>
 810afe2:	4603      	mov	r3, r0
 810afe4:	461a      	mov	r2, r3
 810afe6:	4629      	mov	r1, r5
 810afe8:	4620      	mov	r0, r4
 810afea:	f000 fae4 	bl	810b5b6 <_ZSt14__copy_move_a1ILb1EPfS0_ET1_T0_S2_S1_>
 810afee:	4603      	mov	r3, r0
 810aff0:	4619      	mov	r1, r3
 810aff2:	6878      	ldr	r0, [r7, #4]
 810aff4:	f000 faef 	bl	810b5d6 <_ZSt12__niter_wrapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES2_ET_S7_T0_>
 810aff8:	4603      	mov	r3, r0
    }
 810affa:	4618      	mov	r0, r3
 810affc:	3710      	adds	r7, #16
 810affe:	46bd      	mov	sp, r7
 810b000:	bdb0      	pop	{r4, r5, r7, pc}

0810b002 <_ZSt4swapIfENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS4_ESt18is_move_assignableIS4_EEE5valueEvE4typeERS4_SE_>:
    swap(_Tp& __a, _Tp& __b)
 810b002:	b580      	push	{r7, lr}
 810b004:	b084      	sub	sp, #16
 810b006:	af00      	add	r7, sp, #0
 810b008:	6078      	str	r0, [r7, #4]
 810b00a:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 810b00c:	6878      	ldr	r0, [r7, #4]
 810b00e:	f7ff f887 	bl	810a120 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 810b012:	4603      	mov	r3, r0
 810b014:	681b      	ldr	r3, [r3, #0]
 810b016:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 810b018:	6838      	ldr	r0, [r7, #0]
 810b01a:	f7ff f881 	bl	810a120 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 810b01e:	4603      	mov	r3, r0
 810b020:	681a      	ldr	r2, [r3, #0]
 810b022:	687b      	ldr	r3, [r7, #4]
 810b024:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 810b026:	f107 030c 	add.w	r3, r7, #12
 810b02a:	4618      	mov	r0, r3
 810b02c:	f7ff f878 	bl	810a120 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 810b030:	4603      	mov	r3, r0
 810b032:	681a      	ldr	r2, [r3, #0]
 810b034:	683b      	ldr	r3, [r7, #0]
 810b036:	601a      	str	r2, [r3, #0]
    }
 810b038:	bf00      	nop
 810b03a:	3710      	adds	r7, #16
 810b03c:	46bd      	mov	sp, r7
 810b03e:	bd80      	pop	{r7, pc}

0810b040 <_ZSt4moveIRiEONSt16remove_referenceIT_E4typeEOS2_>:
    move(_Tp&& __t) noexcept
 810b040:	b480      	push	{r7}
 810b042:	b083      	sub	sp, #12
 810b044:	af00      	add	r7, sp, #0
 810b046:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 810b048:	687b      	ldr	r3, [r7, #4]
 810b04a:	4618      	mov	r0, r3
 810b04c:	370c      	adds	r7, #12
 810b04e:	46bd      	mov	sp, r7
 810b050:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b054:	4770      	bx	lr

0810b056 <_ZSt22__copy_move_backward_aILb1EN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_ET1_T0_S8_S7_>:
    __copy_move_backward_a(_II __first, _II __last, _OI __result)
 810b056:	b5b0      	push	{r4, r5, r7, lr}
 810b058:	b084      	sub	sp, #16
 810b05a:	af00      	add	r7, sp, #0
 810b05c:	60f8      	str	r0, [r7, #12]
 810b05e:	60b9      	str	r1, [r7, #8]
 810b060:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 810b062:	68f8      	ldr	r0, [r7, #12]
 810b064:	f000 fa99 	bl	810b59a <_ZSt12__niter_baseIPfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>
 810b068:	4604      	mov	r4, r0
 810b06a:	68b8      	ldr	r0, [r7, #8]
 810b06c:	f000 fa95 	bl	810b59a <_ZSt12__niter_baseIPfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>
 810b070:	4605      	mov	r5, r0
 810b072:	6878      	ldr	r0, [r7, #4]
 810b074:	f000 fa91 	bl	810b59a <_ZSt12__niter_baseIPfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>
 810b078:	4603      	mov	r3, r0
 810b07a:	461a      	mov	r2, r3
 810b07c:	4629      	mov	r1, r5
 810b07e:	4620      	mov	r0, r4
 810b080:	f000 fac0 	bl	810b604 <_ZSt23__copy_move_backward_a1ILb1EPfS0_ET1_T0_S2_S1_>
 810b084:	4603      	mov	r3, r0
 810b086:	4619      	mov	r1, r3
 810b088:	6878      	ldr	r0, [r7, #4]
 810b08a:	f000 faa4 	bl	810b5d6 <_ZSt12__niter_wrapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES2_ET_S7_T0_>
 810b08e:	4603      	mov	r3, r0
    }
 810b090:	4618      	mov	r0, r3
 810b092:	3710      	adds	r7, #16
 810b094:	46bd      	mov	sp, r7
 810b096:	bdb0      	pop	{r4, r5, r7, pc}

0810b098 <_ZSt8_DestroyIfEvPT_>:
    _Destroy(_Tp* __pointer)
 810b098:	b580      	push	{r7, lr}
 810b09a:	b082      	sub	sp, #8
 810b09c:	af00      	add	r7, sp, #0
 810b09e:	6078      	str	r0, [r7, #4]
      std::destroy_at(__pointer);
 810b0a0:	6878      	ldr	r0, [r7, #4]
 810b0a2:	f000 fa70 	bl	810b586 <_ZSt10destroy_atIfEvPT_>
    }
 810b0a6:	bf00      	nop
 810b0a8:	3708      	adds	r7, #8
 810b0aa:	46bd      	mov	sp, r7
 810b0ac:	bd80      	pop	{r7, pc}

0810b0ae <_ZNSt15__new_allocatorIfE10deallocateEPfj>:
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
 810b0ae:	b580      	push	{r7, lr}
 810b0b0:	b084      	sub	sp, #16
 810b0b2:	af00      	add	r7, sp, #0
 810b0b4:	60f8      	str	r0, [r7, #12]
 810b0b6:	60b9      	str	r1, [r7, #8]
 810b0b8:	607a      	str	r2, [r7, #4]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 810b0ba:	687b      	ldr	r3, [r7, #4]
 810b0bc:	009b      	lsls	r3, r3, #2
 810b0be:	4619      	mov	r1, r3
 810b0c0:	68b8      	ldr	r0, [r7, #8]
 810b0c2:	f017 fd41 	bl	8122b48 <_ZdlPvj>
      }
 810b0c6:	3710      	adds	r7, #16
 810b0c8:	46bd      	mov	sp, r7
 810b0ca:	bd80      	pop	{r7, pc}

0810b0cc <_ZNSt15__new_allocatorIfE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 810b0cc:	b580      	push	{r7, lr}
 810b0ce:	b084      	sub	sp, #16
 810b0d0:	af00      	add	r7, sp, #0
 810b0d2:	60f8      	str	r0, [r7, #12]
 810b0d4:	60b9      	str	r1, [r7, #8]
 810b0d6:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 810b0d8:	68f8      	ldr	r0, [r7, #12]
 810b0da:	f000 faa3 	bl	810b624 <_ZNKSt15__new_allocatorIfE11_M_max_sizeEv>
 810b0de:	4602      	mov	r2, r0
 810b0e0:	68bb      	ldr	r3, [r7, #8]
 810b0e2:	4293      	cmp	r3, r2
 810b0e4:	bf8c      	ite	hi
 810b0e6:	2301      	movhi	r3, #1
 810b0e8:	2300      	movls	r3, #0
 810b0ea:	b2db      	uxtb	r3, r3
 810b0ec:	2b00      	cmp	r3, #0
 810b0ee:	bf14      	ite	ne
 810b0f0:	2301      	movne	r3, #1
 810b0f2:	2300      	moveq	r3, #0
 810b0f4:	b2db      	uxtb	r3, r3
 810b0f6:	2b00      	cmp	r3, #0
 810b0f8:	d007      	beq.n	810b10a <_ZNSt15__new_allocatorIfE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 810b0fa:	68bb      	ldr	r3, [r7, #8]
 810b0fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 810b100:	d301      	bcc.n	810b106 <_ZNSt15__new_allocatorIfE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 810b102:	f017 fe03 	bl	8122d0c <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 810b106:	f017 fdfe 	bl	8122d06 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 810b10a:	68bb      	ldr	r3, [r7, #8]
 810b10c:	009b      	lsls	r3, r3, #2
 810b10e:	4618      	mov	r0, r3
 810b110:	f017 fd2b 	bl	8122b6a <_Znwj>
 810b114:	4603      	mov	r3, r0
 810b116:	bf00      	nop
      }
 810b118:	4618      	mov	r0, r3
 810b11a:	3710      	adds	r7, #16
 810b11c:	46bd      	mov	sp, r7
 810b11e:	bd80      	pop	{r7, pc}

0810b120 <_ZSt14__relocate_a_1IPfN9__gnu_cxx17__normal_iteratorIS0_vEESaIfEET0_T_S6_S5_RT1_>:
    __relocate_a_1(_InputIterator __first, _InputIterator __last,
 810b120:	b590      	push	{r4, r7, lr}
 810b122:	b087      	sub	sp, #28
 810b124:	af00      	add	r7, sp, #0
 810b126:	60f8      	str	r0, [r7, #12]
 810b128:	60b9      	str	r1, [r7, #8]
 810b12a:	607a      	str	r2, [r7, #4]
 810b12c:	603b      	str	r3, [r7, #0]
      _ForwardIterator __cur = __result;
 810b12e:	687b      	ldr	r3, [r7, #4]
 810b130:	617b      	str	r3, [r7, #20]
      for (; __first != __last; ++__first, (void)++__cur)
 810b132:	e01a      	b.n	810b16a <_ZSt14__relocate_a_1IPfN9__gnu_cxx17__normal_iteratorIS0_vEESaIfEET0_T_S6_S5_RT1_+0x4a>
	std::__relocate_object_a(std::__addressof(*__cur),
 810b134:	f107 0314 	add.w	r3, r7, #20
 810b138:	4618      	mov	r0, r3
 810b13a:	f000 fa8f 	bl	810b65c <_ZNK9__gnu_cxx17__normal_iteratorIPfvEdeEv>
 810b13e:	4603      	mov	r3, r0
 810b140:	4618      	mov	r0, r3
 810b142:	f7ff fddf 	bl	810ad04 <_ZSt11__addressofIfEPT_RS0_>
 810b146:	4604      	mov	r4, r0
 810b148:	68f8      	ldr	r0, [r7, #12]
 810b14a:	f7ff fddb 	bl	810ad04 <_ZSt11__addressofIfEPT_RS0_>
 810b14e:	4603      	mov	r3, r0
 810b150:	683a      	ldr	r2, [r7, #0]
 810b152:	4619      	mov	r1, r3
 810b154:	4620      	mov	r0, r4
 810b156:	f000 fa8d 	bl	810b674 <_ZSt19__relocate_object_aIffSaIfEEvPT_PT0_RT1_>
      for (; __first != __last; ++__first, (void)++__cur)
 810b15a:	68fb      	ldr	r3, [r7, #12]
 810b15c:	3304      	adds	r3, #4
 810b15e:	60fb      	str	r3, [r7, #12]
 810b160:	f107 0314 	add.w	r3, r7, #20
 810b164:	4618      	mov	r0, r3
 810b166:	f000 fa69 	bl	810b63c <_ZN9__gnu_cxx17__normal_iteratorIPfvEppEv>
 810b16a:	68fa      	ldr	r2, [r7, #12]
 810b16c:	68bb      	ldr	r3, [r7, #8]
 810b16e:	429a      	cmp	r2, r3
 810b170:	d1e0      	bne.n	810b134 <_ZSt14__relocate_a_1IPfN9__gnu_cxx17__normal_iteratorIS0_vEESaIfEET0_T_S6_S5_RT1_+0x14>
      return __cur;
 810b172:	697b      	ldr	r3, [r7, #20]
    }
 810b174:	4618      	mov	r0, r3
 810b176:	371c      	adds	r7, #28
 810b178:	46bd      	mov	sp, r7
 810b17a:	bd90      	pop	{r4, r7, pc}

0810b17c <_ZNK9__gnu_cxx17__normal_iteratorIPfvE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 810b17c:	b480      	push	{r7}
 810b17e:	b083      	sub	sp, #12
 810b180:	af00      	add	r7, sp, #0
 810b182:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 810b184:	687b      	ldr	r3, [r7, #4]
 810b186:	4618      	mov	r0, r3
 810b188:	370c      	adds	r7, #12
 810b18a:	46bd      	mov	sp, r7
 810b18c:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b190:	4770      	bx	lr

0810b192 <_ZNSt15__new_allocatorIfEC1ERKS0_>:
      __new_allocator(const __new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 810b192:	b480      	push	{r7}
 810b194:	b083      	sub	sp, #12
 810b196:	af00      	add	r7, sp, #0
 810b198:	6078      	str	r0, [r7, #4]
 810b19a:	6039      	str	r1, [r7, #0]
 810b19c:	687b      	ldr	r3, [r7, #4]
 810b19e:	4618      	mov	r0, r3
 810b1a0:	370c      	adds	r7, #12
 810b1a2:	46bd      	mov	sp, r7
 810b1a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b1a8:	4770      	bx	lr

0810b1aa <_ZSt7forwardIRKfEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 810b1aa:	b480      	push	{r7}
 810b1ac:	b083      	sub	sp, #12
 810b1ae:	af00      	add	r7, sp, #0
 810b1b0:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 810b1b2:	687b      	ldr	r3, [r7, #4]
 810b1b4:	4618      	mov	r0, r3
 810b1b6:	370c      	adds	r7, #12
 810b1b8:	46bd      	mov	sp, r7
 810b1ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b1be:	4770      	bx	lr

0810b1c0 <_ZSt12construct_atIfJRKfEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>:
    construct_at(_Tp* __location, _Args&&... __args)
 810b1c0:	b590      	push	{r4, r7, lr}
 810b1c2:	b083      	sub	sp, #12
 810b1c4:	af00      	add	r7, sp, #0
 810b1c6:	6078      	str	r0, [r7, #4]
 810b1c8:	6039      	str	r1, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 810b1ca:	687b      	ldr	r3, [r7, #4]
 810b1cc:	4619      	mov	r1, r3
 810b1ce:	2004      	movs	r0, #4
 810b1d0:	f7f6 f85a 	bl	8101288 <_ZnwjPv>
 810b1d4:	4604      	mov	r4, r0
 810b1d6:	6838      	ldr	r0, [r7, #0]
 810b1d8:	f7ff ffe7 	bl	810b1aa <_ZSt7forwardIRKfEOT_RNSt16remove_referenceIS2_E4typeE>
 810b1dc:	4603      	mov	r3, r0
 810b1de:	681b      	ldr	r3, [r3, #0]
 810b1e0:	6023      	str	r3, [r4, #0]
 810b1e2:	4623      	mov	r3, r4
 810b1e4:	4618      	mov	r0, r3
 810b1e6:	370c      	adds	r7, #12
 810b1e8:	46bd      	mov	sp, r7
 810b1ea:	bd90      	pop	{r4, r7, pc}

0810b1ec <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfET0_T_SA_S9_>:
    copy(_II __first, _II __last, _OI __result)
 810b1ec:	b590      	push	{r4, r7, lr}
 810b1ee:	b085      	sub	sp, #20
 810b1f0:	af00      	add	r7, sp, #0
 810b1f2:	60f8      	str	r0, [r7, #12]
 810b1f4:	60b9      	str	r1, [r7, #8]
 810b1f6:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 810b1f8:	68f8      	ldr	r0, [r7, #12]
 810b1fa:	f000 fa56 	bl	810b6aa <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEET_S8_>
 810b1fe:	4604      	mov	r4, r0
 810b200:	68b8      	ldr	r0, [r7, #8]
 810b202:	f000 fa52 	bl	810b6aa <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEET_S8_>
 810b206:	4603      	mov	r3, r0
 810b208:	687a      	ldr	r2, [r7, #4]
 810b20a:	4619      	mov	r1, r3
 810b20c:	4620      	mov	r0, r4
 810b20e:	f000 fa57 	bl	810b6c0 <_ZSt13__copy_move_aILb0EN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfET1_T0_SA_S9_>
 810b212:	4603      	mov	r3, r0
    }
 810b214:	4618      	mov	r0, r3
 810b216:	3714      	adds	r7, #20
 810b218:	46bd      	mov	sp, r7
 810b21a:	bd90      	pop	{r4, r7, pc}

0810b21c <_ZNKSt8__detail10_Synth3wayclIPfS2_EEDaRKT_RKT0_>:
	}

      template<typename _Tp, typename _Up>
	[[nodiscard]]
	constexpr auto
	operator()(const _Tp& __t, const _Up& __u) const
 810b21c:	b480      	push	{r7}
 810b21e:	b085      	sub	sp, #20
 810b220:	af00      	add	r7, sp, #0
 810b222:	60f8      	str	r0, [r7, #12]
 810b224:	60b9      	str	r1, [r7, #8]
 810b226:	607a      	str	r2, [r7, #4]
	  { __t < __u } -> __boolean_testable;
	  { __u < __t } -> __boolean_testable;
	}
	{
	  if constexpr (three_way_comparable_with<_Tp, _Up>)
	    return __t <=> __u;
 810b228:	68bb      	ldr	r3, [r7, #8]
 810b22a:	681a      	ldr	r2, [r3, #0]
 810b22c:	687b      	ldr	r3, [r7, #4]
 810b22e:	681b      	ldr	r3, [r3, #0]
 810b230:	429a      	cmp	r2, r3
 810b232:	d009      	beq.n	810b248 <_ZNKSt8__detail10_Synth3wayclIPfS2_EEDaRKT_RKT0_+0x2c>
 810b234:	68bb      	ldr	r3, [r7, #8]
 810b236:	681a      	ldr	r2, [r3, #0]
 810b238:	687b      	ldr	r3, [r7, #4]
 810b23a:	681b      	ldr	r3, [r3, #0]
 810b23c:	429a      	cmp	r2, r3
 810b23e:	d201      	bcs.n	810b244 <_ZNKSt8__detail10_Synth3wayclIPfS2_EEDaRKT_RKT0_+0x28>
 810b240:	23ff      	movs	r3, #255	@ 0xff
 810b242:	e002      	b.n	810b24a <_ZNKSt8__detail10_Synth3wayclIPfS2_EEDaRKT_RKT0_+0x2e>
 810b244:	2301      	movs	r3, #1
 810b246:	e000      	b.n	810b24a <_ZNKSt8__detail10_Synth3wayclIPfS2_EEDaRKT_RKT0_+0x2e>
 810b248:	2300      	movs	r3, #0
	      else if (__u < __t)
		return weak_ordering::greater;
	      else
		return weak_ordering::equivalent;
	    }
	}
 810b24a:	4618      	mov	r0, r3
 810b24c:	3714      	adds	r7, #20
 810b24e:	46bd      	mov	sp, r7
 810b250:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b254:	4770      	bx	lr
	...

0810b258 <_ZN9__gnu_cxxssIPfSt6vectorIfSaIfEEEEDTclL_ZNSt8__detail11__synth3wayEEcl7declvalIRT_EEcl7declvalIS7_EEEERKNS_17__normal_iteratorIS6_T0_EESD_>:
    operator<=>(const __normal_iterator<_Iterator, _Container>& __lhs,
 810b258:	b590      	push	{r4, r7, lr}
 810b25a:	b083      	sub	sp, #12
 810b25c:	af00      	add	r7, sp, #0
 810b25e:	6078      	str	r0, [r7, #4]
 810b260:	6039      	str	r1, [r7, #0]
    { return std::__detail::__synth3way(__lhs.base(), __rhs.base()); }
 810b262:	6878      	ldr	r0, [r7, #4]
 810b264:	f7fe ff0c 	bl	810a080 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEE4baseEv>
 810b268:	4604      	mov	r4, r0
 810b26a:	6838      	ldr	r0, [r7, #0]
 810b26c:	f7fe ff08 	bl	810a080 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEE4baseEv>
 810b270:	4603      	mov	r3, r0
 810b272:	461a      	mov	r2, r3
 810b274:	4621      	mov	r1, r4
 810b276:	4804      	ldr	r0, [pc, #16]	@ (810b288 <_ZN9__gnu_cxxssIPfSt6vectorIfSaIfEEEEDTclL_ZNSt8__detail11__synth3wayEEcl7declvalIRT_EEcl7declvalIS7_EEEERKNS_17__normal_iteratorIS6_T0_EESD_+0x30>)
 810b278:	f7ff ffd0 	bl	810b21c <_ZNKSt8__detail10_Synth3wayclIPfS2_EEDaRKT_RKT0_>
 810b27c:	4603      	mov	r3, r0
 810b27e:	4618      	mov	r0, r3
 810b280:	370c      	adds	r7, #12
 810b282:	46bd      	mov	sp, r7
 810b284:	bd90      	pop	{r4, r7, pc}
 810b286:	bf00      	nop
 810b288:	081283e8 	.word	0x081283e8

0810b28c <_ZSt13__heap_selectIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_T0_>:
    __heap_select(_RandomAccessIterator __first,
 810b28c:	b590      	push	{r4, r7, lr}
 810b28e:	b087      	sub	sp, #28
 810b290:	af00      	add	r7, sp, #0
 810b292:	60f8      	str	r0, [r7, #12]
 810b294:	60b9      	str	r1, [r7, #8]
 810b296:	607a      	str	r2, [r7, #4]
 810b298:	703b      	strb	r3, [r7, #0]
      std::__make_heap(__first, __middle, __comp);
 810b29a:	463b      	mov	r3, r7
 810b29c:	461a      	mov	r2, r3
 810b29e:	68b9      	ldr	r1, [r7, #8]
 810b2a0:	68f8      	ldr	r0, [r7, #12]
 810b2a2:	f000 fa30 	bl	810b706 <_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_RT0_>
      for (_RandomAccessIterator __i = __middle; __i < __last; ++__i)
 810b2a6:	68bb      	ldr	r3, [r7, #8]
 810b2a8:	613b      	str	r3, [r7, #16]
 810b2aa:	e013      	b.n	810b2d4 <_ZSt13__heap_selectIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_T0_+0x48>
	if (__comp(__i, __first))
 810b2ac:	463b      	mov	r3, r7
 810b2ae:	68fa      	ldr	r2, [r7, #12]
 810b2b0:	6939      	ldr	r1, [r7, #16]
 810b2b2:	4618      	mov	r0, r3
 810b2b4:	f000 f8f7 	bl	810b4a6 <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPfSt6vectorIfSaIfEEEES8_EEbT_T0_>
 810b2b8:	4603      	mov	r3, r0
 810b2ba:	2b00      	cmp	r3, #0
 810b2bc:	d005      	beq.n	810b2ca <_ZSt13__heap_selectIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_T0_+0x3e>
	  std::__pop_heap(__first, __middle, __i, __comp);
 810b2be:	463b      	mov	r3, r7
 810b2c0:	693a      	ldr	r2, [r7, #16]
 810b2c2:	68b9      	ldr	r1, [r7, #8]
 810b2c4:	68f8      	ldr	r0, [r7, #12]
 810b2c6:	f000 fa74 	bl	810b7b2 <_ZSt10__pop_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_RT0_>
      for (_RandomAccessIterator __i = __middle; __i < __last; ++__i)
 810b2ca:	f107 0310 	add.w	r3, r7, #16
 810b2ce:	4618      	mov	r0, r3
 810b2d0:	f7ff fc2a 	bl	810ab28 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEppEv>
 810b2d4:	1d3a      	adds	r2, r7, #4
 810b2d6:	f107 0310 	add.w	r3, r7, #16
 810b2da:	4611      	mov	r1, r2
 810b2dc:	4618      	mov	r0, r3
 810b2de:	f7ff ffbb 	bl	810b258 <_ZN9__gnu_cxxssIPfSt6vectorIfSaIfEEEEDTclL_ZNSt8__detail11__synth3wayEEcl7declvalIRT_EEcl7declvalIS7_EEEERKNS_17__normal_iteratorIS6_T0_EESD_>
 810b2e2:	4604      	mov	r4, r0
 810b2e4:	f107 0314 	add.w	r3, r7, #20
 810b2e8:	2100      	movs	r1, #0
 810b2ea:	4618      	mov	r0, r3
 810b2ec:	f7fe fa07 	bl	81096fe <_ZNSt9__cmp_cat8__unspecC1EPS0_>
 810b2f0:	7d39      	ldrb	r1, [r7, #20]
 810b2f2:	4620      	mov	r0, r4
 810b2f4:	f7fe fa0f 	bl	8109716 <_ZStltSt15strong_orderingNSt9__cmp_cat8__unspecE>
 810b2f8:	4603      	mov	r3, r0
 810b2fa:	2b00      	cmp	r3, #0
 810b2fc:	d1d6      	bne.n	810b2ac <_ZSt13__heap_selectIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_T0_+0x20>
    }
 810b2fe:	bf00      	nop
 810b300:	bf00      	nop
 810b302:	371c      	adds	r7, #28
 810b304:	46bd      	mov	sp, r7
 810b306:	bd90      	pop	{r4, r7, pc}

0810b308 <_ZSt11__sort_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_RT0_>:
    }

  template<typename _RandomAccessIterator, typename _Compare>
    _GLIBCXX20_CONSTEXPR
    void
    __sort_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
 810b308:	b580      	push	{r7, lr}
 810b30a:	b084      	sub	sp, #16
 810b30c:	af00      	add	r7, sp, #0
 810b30e:	60f8      	str	r0, [r7, #12]
 810b310:	60b9      	str	r1, [r7, #8]
 810b312:	607a      	str	r2, [r7, #4]
		_Compare& __comp)
    {
      while (__last - __first > 1)
 810b314:	e00a      	b.n	810b32c <_ZSt11__sort_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_RT0_+0x24>
	{
	  --__last;
 810b316:	f107 0308 	add.w	r3, r7, #8
 810b31a:	4618      	mov	r0, r3
 810b31c:	f7ff fc4b 	bl	810abb6 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEmmEv>
	  std::__pop_heap(__first, __last, __last, __comp);
 810b320:	687b      	ldr	r3, [r7, #4]
 810b322:	68ba      	ldr	r2, [r7, #8]
 810b324:	68b9      	ldr	r1, [r7, #8]
 810b326:	68f8      	ldr	r0, [r7, #12]
 810b328:	f000 fa43 	bl	810b7b2 <_ZSt10__pop_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_RT0_>
      while (__last - __first > 1)
 810b32c:	f107 020c 	add.w	r2, r7, #12
 810b330:	f107 0308 	add.w	r3, r7, #8
 810b334:	4611      	mov	r1, r2
 810b336:	4618      	mov	r0, r3
 810b338:	f7fe fead 	bl	810a096 <_ZN9__gnu_cxxmiIPfSt6vectorIfSaIfEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 810b33c:	4603      	mov	r3, r0
 810b33e:	2b01      	cmp	r3, #1
 810b340:	bfcc      	ite	gt
 810b342:	2301      	movgt	r3, #1
 810b344:	2300      	movle	r3, #0
 810b346:	b2db      	uxtb	r3, r3
 810b348:	2b00      	cmp	r3, #0
 810b34a:	d1e4      	bne.n	810b316 <_ZSt11__sort_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_RT0_+0xe>
	}
    }
 810b34c:	bf00      	nop
 810b34e:	bf00      	nop
 810b350:	3710      	adds	r7, #16
 810b352:	46bd      	mov	sp, r7
 810b354:	bd80      	pop	{r7, pc}

0810b356 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_S9_T0_>:
    __move_median_to_first(_Iterator __result,_Iterator __a, _Iterator __b,
 810b356:	b580      	push	{r7, lr}
 810b358:	b084      	sub	sp, #16
 810b35a:	af00      	add	r7, sp, #0
 810b35c:	60f8      	str	r0, [r7, #12]
 810b35e:	60b9      	str	r1, [r7, #8]
 810b360:	607a      	str	r2, [r7, #4]
 810b362:	603b      	str	r3, [r7, #0]
      if (__comp(__a, __b))
 810b364:	687a      	ldr	r2, [r7, #4]
 810b366:	68b9      	ldr	r1, [r7, #8]
 810b368:	f107 0018 	add.w	r0, r7, #24
 810b36c:	f000 f89b 	bl	810b4a6 <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPfSt6vectorIfSaIfEEEES8_EEbT_T0_>
 810b370:	4603      	mov	r3, r0
 810b372:	2b00      	cmp	r3, #0
 810b374:	d020      	beq.n	810b3b8 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_S9_T0_+0x62>
	  if (__comp(__b, __c))
 810b376:	683a      	ldr	r2, [r7, #0]
 810b378:	6879      	ldr	r1, [r7, #4]
 810b37a:	f107 0018 	add.w	r0, r7, #24
 810b37e:	f000 f892 	bl	810b4a6 <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPfSt6vectorIfSaIfEEEES8_EEbT_T0_>
 810b382:	4603      	mov	r3, r0
 810b384:	2b00      	cmp	r3, #0
 810b386:	d004      	beq.n	810b392 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_S9_T0_+0x3c>
	    std::iter_swap(__result, __b);
 810b388:	6879      	ldr	r1, [r7, #4]
 810b38a:	68f8      	ldr	r0, [r7, #12]
 810b38c:	f7ff fbb5 	bl	810aafa <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_EvT_T0_>
    }
 810b390:	e032      	b.n	810b3f8 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_S9_T0_+0xa2>
	  else if (__comp(__a, __c))
 810b392:	683a      	ldr	r2, [r7, #0]
 810b394:	68b9      	ldr	r1, [r7, #8]
 810b396:	f107 0018 	add.w	r0, r7, #24
 810b39a:	f000 f884 	bl	810b4a6 <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPfSt6vectorIfSaIfEEEES8_EEbT_T0_>
 810b39e:	4603      	mov	r3, r0
 810b3a0:	2b00      	cmp	r3, #0
 810b3a2:	d004      	beq.n	810b3ae <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_S9_T0_+0x58>
	    std::iter_swap(__result, __c);
 810b3a4:	6839      	ldr	r1, [r7, #0]
 810b3a6:	68f8      	ldr	r0, [r7, #12]
 810b3a8:	f7ff fba7 	bl	810aafa <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_EvT_T0_>
    }
 810b3ac:	e024      	b.n	810b3f8 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_S9_T0_+0xa2>
	    std::iter_swap(__result, __a);
 810b3ae:	68b9      	ldr	r1, [r7, #8]
 810b3b0:	68f8      	ldr	r0, [r7, #12]
 810b3b2:	f7ff fba2 	bl	810aafa <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_EvT_T0_>
    }
 810b3b6:	e01f      	b.n	810b3f8 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_S9_T0_+0xa2>
      else if (__comp(__a, __c))
 810b3b8:	683a      	ldr	r2, [r7, #0]
 810b3ba:	68b9      	ldr	r1, [r7, #8]
 810b3bc:	f107 0018 	add.w	r0, r7, #24
 810b3c0:	f000 f871 	bl	810b4a6 <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPfSt6vectorIfSaIfEEEES8_EEbT_T0_>
 810b3c4:	4603      	mov	r3, r0
 810b3c6:	2b00      	cmp	r3, #0
 810b3c8:	d004      	beq.n	810b3d4 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_S9_T0_+0x7e>
	std::iter_swap(__result, __a);
 810b3ca:	68b9      	ldr	r1, [r7, #8]
 810b3cc:	68f8      	ldr	r0, [r7, #12]
 810b3ce:	f7ff fb94 	bl	810aafa <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_EvT_T0_>
    }
 810b3d2:	e011      	b.n	810b3f8 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_S9_T0_+0xa2>
      else if (__comp(__b, __c))
 810b3d4:	683a      	ldr	r2, [r7, #0]
 810b3d6:	6879      	ldr	r1, [r7, #4]
 810b3d8:	f107 0018 	add.w	r0, r7, #24
 810b3dc:	f000 f863 	bl	810b4a6 <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPfSt6vectorIfSaIfEEEES8_EEbT_T0_>
 810b3e0:	4603      	mov	r3, r0
 810b3e2:	2b00      	cmp	r3, #0
 810b3e4:	d004      	beq.n	810b3f0 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_S9_T0_+0x9a>
	std::iter_swap(__result, __c);
 810b3e6:	6839      	ldr	r1, [r7, #0]
 810b3e8:	68f8      	ldr	r0, [r7, #12]
 810b3ea:	f7ff fb86 	bl	810aafa <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_EvT_T0_>
    }
 810b3ee:	e003      	b.n	810b3f8 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_S9_T0_+0xa2>
	std::iter_swap(__result, __b);
 810b3f0:	6879      	ldr	r1, [r7, #4]
 810b3f2:	68f8      	ldr	r0, [r7, #12]
 810b3f4:	f7ff fb81 	bl	810aafa <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_EvT_T0_>
    }
 810b3f8:	bf00      	nop
 810b3fa:	3710      	adds	r7, #16
 810b3fc:	46bd      	mov	sp, r7
 810b3fe:	bd80      	pop	{r7, pc}

0810b400 <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEET_S9_S9_S9_T0_>:
    __unguarded_partition(_RandomAccessIterator __first,
 810b400:	b590      	push	{r4, r7, lr}
 810b402:	b087      	sub	sp, #28
 810b404:	af00      	add	r7, sp, #0
 810b406:	60f8      	str	r0, [r7, #12]
 810b408:	60b9      	str	r1, [r7, #8]
 810b40a:	607a      	str	r2, [r7, #4]
 810b40c:	703b      	strb	r3, [r7, #0]
	  while (__comp(__first, __pivot))
 810b40e:	e004      	b.n	810b41a <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEET_S9_S9_S9_T0_+0x1a>
	    ++__first;
 810b410:	f107 030c 	add.w	r3, r7, #12
 810b414:	4618      	mov	r0, r3
 810b416:	f7ff fb87 	bl	810ab28 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEppEv>
	  while (__comp(__first, __pivot))
 810b41a:	463b      	mov	r3, r7
 810b41c:	687a      	ldr	r2, [r7, #4]
 810b41e:	68f9      	ldr	r1, [r7, #12]
 810b420:	4618      	mov	r0, r3
 810b422:	f000 f840 	bl	810b4a6 <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPfSt6vectorIfSaIfEEEES8_EEbT_T0_>
 810b426:	4603      	mov	r3, r0
 810b428:	2b00      	cmp	r3, #0
 810b42a:	d1f1      	bne.n	810b410 <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEET_S9_S9_S9_T0_+0x10>
	  --__last;
 810b42c:	f107 0308 	add.w	r3, r7, #8
 810b430:	4618      	mov	r0, r3
 810b432:	f7ff fbc0 	bl	810abb6 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEmmEv>
	  while (__comp(__pivot, __last))
 810b436:	e004      	b.n	810b442 <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEET_S9_S9_S9_T0_+0x42>
	    --__last;
 810b438:	f107 0308 	add.w	r3, r7, #8
 810b43c:	4618      	mov	r0, r3
 810b43e:	f7ff fbba 	bl	810abb6 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEmmEv>
	  while (__comp(__pivot, __last))
 810b442:	463b      	mov	r3, r7
 810b444:	68ba      	ldr	r2, [r7, #8]
 810b446:	6879      	ldr	r1, [r7, #4]
 810b448:	4618      	mov	r0, r3
 810b44a:	f000 f82c 	bl	810b4a6 <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPfSt6vectorIfSaIfEEEES8_EEbT_T0_>
 810b44e:	4603      	mov	r3, r0
 810b450:	2b00      	cmp	r3, #0
 810b452:	d1f1      	bne.n	810b438 <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEET_S9_S9_S9_T0_+0x38>
	  if (!(__first < __last))
 810b454:	f107 0208 	add.w	r2, r7, #8
 810b458:	f107 030c 	add.w	r3, r7, #12
 810b45c:	4611      	mov	r1, r2
 810b45e:	4618      	mov	r0, r3
 810b460:	f7ff fefa 	bl	810b258 <_ZN9__gnu_cxxssIPfSt6vectorIfSaIfEEEEDTclL_ZNSt8__detail11__synth3wayEEcl7declvalIRT_EEcl7declvalIS7_EEEERKNS_17__normal_iteratorIS6_T0_EESD_>
 810b464:	4604      	mov	r4, r0
 810b466:	f107 0314 	add.w	r3, r7, #20
 810b46a:	2100      	movs	r1, #0
 810b46c:	4618      	mov	r0, r3
 810b46e:	f7fe f946 	bl	81096fe <_ZNSt9__cmp_cat8__unspecC1EPS0_>
 810b472:	7d39      	ldrb	r1, [r7, #20]
 810b474:	4620      	mov	r0, r4
 810b476:	f7fe f94e 	bl	8109716 <_ZStltSt15strong_orderingNSt9__cmp_cat8__unspecE>
 810b47a:	4603      	mov	r3, r0
 810b47c:	f083 0301 	eor.w	r3, r3, #1
 810b480:	b2db      	uxtb	r3, r3
 810b482:	2b00      	cmp	r3, #0
 810b484:	d001      	beq.n	810b48a <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEET_S9_S9_S9_T0_+0x8a>
	    return __first;
 810b486:	68fb      	ldr	r3, [r7, #12]
 810b488:	e009      	b.n	810b49e <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEET_S9_S9_S9_T0_+0x9e>
	  std::iter_swap(__first, __last);
 810b48a:	68b9      	ldr	r1, [r7, #8]
 810b48c:	68f8      	ldr	r0, [r7, #12]
 810b48e:	f7ff fb34 	bl	810aafa <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_EvT_T0_>
	  ++__first;
 810b492:	f107 030c 	add.w	r3, r7, #12
 810b496:	4618      	mov	r0, r3
 810b498:	f7ff fb46 	bl	810ab28 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEppEv>
	  while (__comp(__first, __pivot))
 810b49c:	e7bd      	b.n	810b41a <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEET_S9_S9_S9_T0_+0x1a>
    }
 810b49e:	4618      	mov	r0, r3
 810b4a0:	371c      	adds	r7, #28
 810b4a2:	46bd      	mov	sp, r7
 810b4a4:	bd90      	pop	{r4, r7, pc}

0810b4a6 <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPfSt6vectorIfSaIfEEEES8_EEbT_T0_>:
      operator()(_Iterator1 __it1, _Iterator2 __it2) const
 810b4a6:	b580      	push	{r7, lr}
 810b4a8:	ed2d 8b02 	vpush	{d8}
 810b4ac:	b084      	sub	sp, #16
 810b4ae:	af00      	add	r7, sp, #0
 810b4b0:	60f8      	str	r0, [r7, #12]
 810b4b2:	60b9      	str	r1, [r7, #8]
 810b4b4:	607a      	str	r2, [r7, #4]
      { return *__it1 < *__it2; }
 810b4b6:	f107 0308 	add.w	r3, r7, #8
 810b4ba:	4618      	mov	r0, r3
 810b4bc:	f7ff fae0 	bl	810aa80 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 810b4c0:	4603      	mov	r3, r0
 810b4c2:	ed93 8a00 	vldr	s16, [r3]
 810b4c6:	1d3b      	adds	r3, r7, #4
 810b4c8:	4618      	mov	r0, r3
 810b4ca:	f7ff fad9 	bl	810aa80 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 810b4ce:	4603      	mov	r3, r0
 810b4d0:	edd3 7a00 	vldr	s15, [r3]
 810b4d4:	eeb4 8ae7 	vcmpe.f32	s16, s15
 810b4d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810b4dc:	bf4c      	ite	mi
 810b4de:	2301      	movmi	r3, #1
 810b4e0:	2300      	movpl	r3, #0
 810b4e2:	b2db      	uxtb	r3, r3
 810b4e4:	4618      	mov	r0, r3
 810b4e6:	3710      	adds	r7, #16
 810b4e8:	46bd      	mov	sp, r7
 810b4ea:	ecbd 8b02 	vpop	{d8}
 810b4ee:	bd80      	pop	{r7, pc}

0810b4f0 <_ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops14_Val_less_iterEEvT_T0_>:
    __unguarded_linear_insert(_RandomAccessIterator __last,
 810b4f0:	b590      	push	{r4, r7, lr}
 810b4f2:	b085      	sub	sp, #20
 810b4f4:	af00      	add	r7, sp, #0
 810b4f6:	6078      	str	r0, [r7, #4]
 810b4f8:	7039      	strb	r1, [r7, #0]
	__val = _GLIBCXX_MOVE(*__last);
 810b4fa:	1d3b      	adds	r3, r7, #4
 810b4fc:	4618      	mov	r0, r3
 810b4fe:	f7ff fabf 	bl	810aa80 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 810b502:	4603      	mov	r3, r0
 810b504:	4618      	mov	r0, r3
 810b506:	f7fe fe0b 	bl	810a120 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 810b50a:	4603      	mov	r3, r0
 810b50c:	681b      	ldr	r3, [r3, #0]
 810b50e:	60fb      	str	r3, [r7, #12]
      _RandomAccessIterator __next = __last;
 810b510:	687b      	ldr	r3, [r7, #4]
 810b512:	60bb      	str	r3, [r7, #8]
      --__next;
 810b514:	f107 0308 	add.w	r3, r7, #8
 810b518:	4618      	mov	r0, r3
 810b51a:	f7ff fb4c 	bl	810abb6 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEmmEv>
      while (__comp(__val, __next))
 810b51e:	e017      	b.n	810b550 <_ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops14_Val_less_iterEEvT_T0_+0x60>
	  *__last = _GLIBCXX_MOVE(*__next);
 810b520:	f107 0308 	add.w	r3, r7, #8
 810b524:	4618      	mov	r0, r3
 810b526:	f7ff faab 	bl	810aa80 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 810b52a:	4603      	mov	r3, r0
 810b52c:	4618      	mov	r0, r3
 810b52e:	f7fe fdf7 	bl	810a120 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 810b532:	4603      	mov	r3, r0
 810b534:	681c      	ldr	r4, [r3, #0]
 810b536:	1d3b      	adds	r3, r7, #4
 810b538:	4618      	mov	r0, r3
 810b53a:	f7ff faa1 	bl	810aa80 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 810b53e:	4603      	mov	r3, r0
 810b540:	601c      	str	r4, [r3, #0]
	  __last = __next;
 810b542:	68bb      	ldr	r3, [r7, #8]
 810b544:	607b      	str	r3, [r7, #4]
	  --__next;
 810b546:	f107 0308 	add.w	r3, r7, #8
 810b54a:	4618      	mov	r0, r3
 810b54c:	f7ff fb33 	bl	810abb6 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEmmEv>
      while (__comp(__val, __next))
 810b550:	f107 010c 	add.w	r1, r7, #12
 810b554:	463b      	mov	r3, r7
 810b556:	68ba      	ldr	r2, [r7, #8]
 810b558:	4618      	mov	r0, r3
 810b55a:	f000 f96a 	bl	810b832 <_ZNK9__gnu_cxx5__ops14_Val_less_iterclIfNS_17__normal_iteratorIPfSt6vectorIfSaIfEEEEEEbRT_T0_>
 810b55e:	4603      	mov	r3, r0
 810b560:	2b00      	cmp	r3, #0
 810b562:	d1dd      	bne.n	810b520 <_ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops14_Val_less_iterEEvT_T0_+0x30>
      *__last = _GLIBCXX_MOVE(__val);
 810b564:	f107 030c 	add.w	r3, r7, #12
 810b568:	4618      	mov	r0, r3
 810b56a:	f7fe fdd9 	bl	810a120 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 810b56e:	4603      	mov	r3, r0
 810b570:	681c      	ldr	r4, [r3, #0]
 810b572:	1d3b      	adds	r3, r7, #4
 810b574:	4618      	mov	r0, r3
 810b576:	f7ff fa83 	bl	810aa80 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 810b57a:	4603      	mov	r3, r0
 810b57c:	601c      	str	r4, [r3, #0]
    }
 810b57e:	bf00      	nop
 810b580:	3714      	adds	r7, #20
 810b582:	46bd      	mov	sp, r7
 810b584:	bd90      	pop	{r4, r7, pc}

0810b586 <_ZSt10destroy_atIfEvPT_>:
    destroy_at(_Tp* __location)
 810b586:	b480      	push	{r7}
 810b588:	b083      	sub	sp, #12
 810b58a:	af00      	add	r7, sp, #0
 810b58c:	6078      	str	r0, [r7, #4]
    }
 810b58e:	bf00      	nop
 810b590:	370c      	adds	r7, #12
 810b592:	46bd      	mov	sp, r7
 810b594:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b598:	4770      	bx	lr

0810b59a <_ZSt12__niter_baseIPfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>:
_GLIBCXX_BEGIN_NAMESPACE_VERSION

  template<typename _Iterator, typename _Container>
    _GLIBCXX20_CONSTEXPR
    _Iterator
    __niter_base(__gnu_cxx::__normal_iterator<_Iterator, _Container> __it)
 810b59a:	b580      	push	{r7, lr}
 810b59c:	b082      	sub	sp, #8
 810b59e:	af00      	add	r7, sp, #0
 810b5a0:	6078      	str	r0, [r7, #4]
    _GLIBCXX_NOEXCEPT_IF(std::is_nothrow_copy_constructible<_Iterator>::value)
    { return __it.base(); }
 810b5a2:	1d3b      	adds	r3, r7, #4
 810b5a4:	4618      	mov	r0, r3
 810b5a6:	f7fe fd6b 	bl	810a080 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEE4baseEv>
 810b5aa:	4603      	mov	r3, r0
 810b5ac:	681b      	ldr	r3, [r3, #0]
 810b5ae:	4618      	mov	r0, r3
 810b5b0:	3708      	adds	r7, #8
 810b5b2:	46bd      	mov	sp, r7
 810b5b4:	bd80      	pop	{r7, pc}

0810b5b6 <_ZSt14__copy_move_a1ILb1EPfS0_ET1_T0_S2_S1_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 810b5b6:	b580      	push	{r7, lr}
 810b5b8:	b084      	sub	sp, #16
 810b5ba:	af00      	add	r7, sp, #0
 810b5bc:	60f8      	str	r0, [r7, #12]
 810b5be:	60b9      	str	r1, [r7, #8]
 810b5c0:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 810b5c2:	687a      	ldr	r2, [r7, #4]
 810b5c4:	68b9      	ldr	r1, [r7, #8]
 810b5c6:	68f8      	ldr	r0, [r7, #12]
 810b5c8:	f000 f953 	bl	810b872 <_ZSt14__copy_move_a2ILb1EPfS0_ET1_T0_S2_S1_>
 810b5cc:	4603      	mov	r3, r0
 810b5ce:	4618      	mov	r0, r3
 810b5d0:	3710      	adds	r7, #16
 810b5d2:	46bd      	mov	sp, r7
 810b5d4:	bd80      	pop	{r7, pc}

0810b5d6 <_ZSt12__niter_wrapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES2_ET_S7_T0_>:
    __niter_wrap(_From __from, _To __res)
 810b5d6:	b580      	push	{r7, lr}
 810b5d8:	b082      	sub	sp, #8
 810b5da:	af00      	add	r7, sp, #0
 810b5dc:	6078      	str	r0, [r7, #4]
 810b5de:	6039      	str	r1, [r7, #0]
    { return __from + (__res - std::__niter_base(__from)); }
 810b5e0:	6878      	ldr	r0, [r7, #4]
 810b5e2:	f7ff ffda 	bl	810b59a <_ZSt12__niter_baseIPfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>
 810b5e6:	4602      	mov	r2, r0
 810b5e8:	683b      	ldr	r3, [r7, #0]
 810b5ea:	1a9b      	subs	r3, r3, r2
 810b5ec:	109b      	asrs	r3, r3, #2
 810b5ee:	461a      	mov	r2, r3
 810b5f0:	1d3b      	adds	r3, r7, #4
 810b5f2:	4611      	mov	r1, r2
 810b5f4:	4618      	mov	r0, r3
 810b5f6:	f7fe fbee 	bl	8109dd6 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 810b5fa:	4603      	mov	r3, r0
 810b5fc:	4618      	mov	r0, r3
 810b5fe:	3708      	adds	r7, #8
 810b600:	46bd      	mov	sp, r7
 810b602:	bd80      	pop	{r7, pc}

0810b604 <_ZSt23__copy_move_backward_a1ILb1EPfS0_ET1_T0_S2_S1_>:
    __copy_move_backward_a1(_BI1 __first, _BI1 __last, _BI2 __result)
 810b604:	b580      	push	{r7, lr}
 810b606:	b084      	sub	sp, #16
 810b608:	af00      	add	r7, sp, #0
 810b60a:	60f8      	str	r0, [r7, #12]
 810b60c:	60b9      	str	r1, [r7, #8]
 810b60e:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_backward_a2<_IsMove>(__first, __last, __result); }
 810b610:	687a      	ldr	r2, [r7, #4]
 810b612:	68b9      	ldr	r1, [r7, #8]
 810b614:	68f8      	ldr	r0, [r7, #12]
 810b616:	f000 f949 	bl	810b8ac <_ZSt23__copy_move_backward_a2ILb1EPfS0_ET1_T0_S2_S1_>
 810b61a:	4603      	mov	r3, r0
 810b61c:	4618      	mov	r0, r3
 810b61e:	3710      	adds	r7, #16
 810b620:	46bd      	mov	sp, r7
 810b622:	bd80      	pop	{r7, pc}

0810b624 <_ZNKSt15__new_allocatorIfE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 810b624:	b480      	push	{r7}
 810b626:	b083      	sub	sp, #12
 810b628:	af00      	add	r7, sp, #0
 810b62a:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 810b62c:	f06f 4360 	mvn.w	r3, #3758096384	@ 0xe0000000
      }
 810b630:	4618      	mov	r0, r3
 810b632:	370c      	adds	r7, #12
 810b634:	46bd      	mov	sp, r7
 810b636:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b63a:	4770      	bx	lr

0810b63c <_ZN9__gnu_cxx17__normal_iteratorIPfvEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 810b63c:	b480      	push	{r7}
 810b63e:	b083      	sub	sp, #12
 810b640:	af00      	add	r7, sp, #0
 810b642:	6078      	str	r0, [r7, #4]
	++_M_current;
 810b644:	687b      	ldr	r3, [r7, #4]
 810b646:	681b      	ldr	r3, [r3, #0]
 810b648:	1d1a      	adds	r2, r3, #4
 810b64a:	687b      	ldr	r3, [r7, #4]
 810b64c:	601a      	str	r2, [r3, #0]
	return *this;
 810b64e:	687b      	ldr	r3, [r7, #4]
      }
 810b650:	4618      	mov	r0, r3
 810b652:	370c      	adds	r7, #12
 810b654:	46bd      	mov	sp, r7
 810b656:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b65a:	4770      	bx	lr

0810b65c <_ZNK9__gnu_cxx17__normal_iteratorIPfvEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 810b65c:	b480      	push	{r7}
 810b65e:	b083      	sub	sp, #12
 810b660:	af00      	add	r7, sp, #0
 810b662:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 810b664:	687b      	ldr	r3, [r7, #4]
 810b666:	681b      	ldr	r3, [r3, #0]
 810b668:	4618      	mov	r0, r3
 810b66a:	370c      	adds	r7, #12
 810b66c:	46bd      	mov	sp, r7
 810b66e:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b672:	4770      	bx	lr

0810b674 <_ZSt19__relocate_object_aIffSaIfEEvPT_PT0_RT1_>:
    __relocate_object_a(_Tp* __restrict __dest, _Up* __restrict __orig,
 810b674:	b580      	push	{r7, lr}
 810b676:	b084      	sub	sp, #16
 810b678:	af00      	add	r7, sp, #0
 810b67a:	60f8      	str	r0, [r7, #12]
 810b67c:	60b9      	str	r1, [r7, #8]
 810b67e:	607a      	str	r2, [r7, #4]
      __traits::construct(__alloc, __dest, std::move(*__orig));
 810b680:	68b8      	ldr	r0, [r7, #8]
 810b682:	f7fe fd4d 	bl	810a120 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 810b686:	4603      	mov	r3, r0
 810b688:	461a      	mov	r2, r3
 810b68a:	68f9      	ldr	r1, [r7, #12]
 810b68c:	6878      	ldr	r0, [r7, #4]
 810b68e:	f7ff f8e0 	bl	810a852 <_ZNSt16allocator_traitsISaIfEE9constructIfJfEEEvRS0_PT_DpOT0_>
      __traits::destroy(__alloc, std::__addressof(*__orig));
 810b692:	68b8      	ldr	r0, [r7, #8]
 810b694:	f7ff fb36 	bl	810ad04 <_ZSt11__addressofIfEPT_RS0_>
 810b698:	4603      	mov	r3, r0
 810b69a:	4619      	mov	r1, r3
 810b69c:	6878      	ldr	r0, [r7, #4]
 810b69e:	f7ff fc78 	bl	810af92 <_ZNSt16allocator_traitsISaIfEE7destroyIfEEvRS0_PT_>
    }
 810b6a2:	bf00      	nop
 810b6a4:	3710      	adds	r7, #16
 810b6a6:	46bd      	mov	sp, r7
 810b6a8:	bd80      	pop	{r7, pc}

0810b6aa <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEET_S8_>:
    __miter_base(_Iterator __it)
 810b6aa:	b480      	push	{r7}
 810b6ac:	b083      	sub	sp, #12
 810b6ae:	af00      	add	r7, sp, #0
 810b6b0:	6078      	str	r0, [r7, #4]
    { return __it; }
 810b6b2:	687b      	ldr	r3, [r7, #4]
 810b6b4:	4618      	mov	r0, r3
 810b6b6:	370c      	adds	r7, #12
 810b6b8:	46bd      	mov	sp, r7
 810b6ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b6be:	4770      	bx	lr

0810b6c0 <_ZSt13__copy_move_aILb0EN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfET1_T0_SA_S9_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 810b6c0:	b5b0      	push	{r4, r5, r7, lr}
 810b6c2:	b084      	sub	sp, #16
 810b6c4:	af00      	add	r7, sp, #0
 810b6c6:	60f8      	str	r0, [r7, #12]
 810b6c8:	60b9      	str	r1, [r7, #8]
 810b6ca:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 810b6cc:	68f8      	ldr	r0, [r7, #12]
 810b6ce:	f000 f90a 	bl	810b8e6 <_ZSt12__niter_baseIPKfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 810b6d2:	4604      	mov	r4, r0
 810b6d4:	68b8      	ldr	r0, [r7, #8]
 810b6d6:	f000 f906 	bl	810b8e6 <_ZSt12__niter_baseIPKfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 810b6da:	4605      	mov	r5, r0
 810b6dc:	687b      	ldr	r3, [r7, #4]
 810b6de:	4618      	mov	r0, r3
 810b6e0:	f7ff fa9d 	bl	810ac1e <_ZSt12__niter_baseIPfET_S1_>
 810b6e4:	4603      	mov	r3, r0
 810b6e6:	461a      	mov	r2, r3
 810b6e8:	4629      	mov	r1, r5
 810b6ea:	4620      	mov	r0, r4
 810b6ec:	f000 f909 	bl	810b902 <_ZSt14__copy_move_a1ILb0EPKfPfET1_T0_S4_S3_>
 810b6f0:	4602      	mov	r2, r0
 810b6f2:	1d3b      	adds	r3, r7, #4
 810b6f4:	4611      	mov	r1, r2
 810b6f6:	4618      	mov	r0, r3
 810b6f8:	f000 f913 	bl	810b922 <_ZSt12__niter_wrapIPfET_RKS1_S1_>
 810b6fc:	4603      	mov	r3, r0
    }
 810b6fe:	4618      	mov	r0, r3
 810b700:	3710      	adds	r7, #16
 810b702:	46bd      	mov	sp, r7
 810b704:	bdb0      	pop	{r4, r5, r7, pc}

0810b706 <_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_RT0_>:
    __make_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
 810b706:	b590      	push	{r4, r7, lr}
 810b708:	b089      	sub	sp, #36	@ 0x24
 810b70a:	af00      	add	r7, sp, #0
 810b70c:	60f8      	str	r0, [r7, #12]
 810b70e:	60b9      	str	r1, [r7, #8]
 810b710:	607a      	str	r2, [r7, #4]
      if (__last - __first < 2)
 810b712:	f107 020c 	add.w	r2, r7, #12
 810b716:	f107 0308 	add.w	r3, r7, #8
 810b71a:	4611      	mov	r1, r2
 810b71c:	4618      	mov	r0, r3
 810b71e:	f7fe fcba 	bl	810a096 <_ZN9__gnu_cxxmiIPfSt6vectorIfSaIfEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 810b722:	4603      	mov	r3, r0
 810b724:	2b01      	cmp	r3, #1
 810b726:	bfd4      	ite	le
 810b728:	2301      	movle	r3, #1
 810b72a:	2300      	movgt	r3, #0
 810b72c:	b2db      	uxtb	r3, r3
 810b72e:	2b00      	cmp	r3, #0
 810b730:	d139      	bne.n	810b7a6 <_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_RT0_+0xa0>
      const _DistanceType __len = __last - __first;
 810b732:	f107 020c 	add.w	r2, r7, #12
 810b736:	f107 0308 	add.w	r3, r7, #8
 810b73a:	4611      	mov	r1, r2
 810b73c:	4618      	mov	r0, r3
 810b73e:	f7fe fcaa 	bl	810a096 <_ZN9__gnu_cxxmiIPfSt6vectorIfSaIfEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 810b742:	61b8      	str	r0, [r7, #24]
      _DistanceType __parent = (__len - 2) / 2;
 810b744:	69bb      	ldr	r3, [r7, #24]
 810b746:	3b02      	subs	r3, #2
 810b748:	0fda      	lsrs	r2, r3, #31
 810b74a:	4413      	add	r3, r2
 810b74c:	105b      	asrs	r3, r3, #1
 810b74e:	61fb      	str	r3, [r7, #28]
	  _ValueType __value = _GLIBCXX_MOVE(*(__first + __parent));
 810b750:	f107 030c 	add.w	r3, r7, #12
 810b754:	69f9      	ldr	r1, [r7, #28]
 810b756:	4618      	mov	r0, r3
 810b758:	f7fe fb3d 	bl	8109dd6 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 810b75c:	4603      	mov	r3, r0
 810b75e:	617b      	str	r3, [r7, #20]
 810b760:	f107 0314 	add.w	r3, r7, #20
 810b764:	4618      	mov	r0, r3
 810b766:	f7ff f98b 	bl	810aa80 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 810b76a:	4603      	mov	r3, r0
 810b76c:	4618      	mov	r0, r3
 810b76e:	f7fe fcd7 	bl	810a120 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 810b772:	4603      	mov	r3, r0
 810b774:	681b      	ldr	r3, [r3, #0]
 810b776:	613b      	str	r3, [r7, #16]
	  std::__adjust_heap(__first, __parent, __len, _GLIBCXX_MOVE(__value),
 810b778:	f107 0310 	add.w	r3, r7, #16
 810b77c:	4618      	mov	r0, r3
 810b77e:	f7fe fccf 	bl	810a120 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 810b782:	4603      	mov	r3, r0
 810b784:	edd3 7a00 	vldr	s15, [r3]
 810b788:	4623      	mov	r3, r4
 810b78a:	eeb0 0a67 	vmov.f32	s0, s15
 810b78e:	69ba      	ldr	r2, [r7, #24]
 810b790:	69f9      	ldr	r1, [r7, #28]
 810b792:	68f8      	ldr	r0, [r7, #12]
 810b794:	f000 f8d1 	bl	810b93a <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEifNS0_5__ops15_Iter_less_iterEEvT_T0_SA_T1_T2_>
	  if (__parent == 0)
 810b798:	69fb      	ldr	r3, [r7, #28]
 810b79a:	2b00      	cmp	r3, #0
 810b79c:	d005      	beq.n	810b7aa <_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_RT0_+0xa4>
	  __parent--;
 810b79e:	69fb      	ldr	r3, [r7, #28]
 810b7a0:	3b01      	subs	r3, #1
 810b7a2:	61fb      	str	r3, [r7, #28]
      while (true)
 810b7a4:	e7d4      	b.n	810b750 <_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_RT0_+0x4a>
	return;
 810b7a6:	bf00      	nop
 810b7a8:	e000      	b.n	810b7ac <_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_RT0_+0xa6>
	    return;
 810b7aa:	bf00      	nop
    }
 810b7ac:	3724      	adds	r7, #36	@ 0x24
 810b7ae:	46bd      	mov	sp, r7
 810b7b0:	bd90      	pop	{r4, r7, pc}

0810b7b2 <_ZSt10__pop_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_RT0_>:
    __pop_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
 810b7b2:	b5b0      	push	{r4, r5, r7, lr}
 810b7b4:	b086      	sub	sp, #24
 810b7b6:	af00      	add	r7, sp, #0
 810b7b8:	60f8      	str	r0, [r7, #12]
 810b7ba:	60b9      	str	r1, [r7, #8]
 810b7bc:	607a      	str	r2, [r7, #4]
 810b7be:	603b      	str	r3, [r7, #0]
      _ValueType __value = _GLIBCXX_MOVE(*__result);
 810b7c0:	1d3b      	adds	r3, r7, #4
 810b7c2:	4618      	mov	r0, r3
 810b7c4:	f7ff f95c 	bl	810aa80 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 810b7c8:	4603      	mov	r3, r0
 810b7ca:	4618      	mov	r0, r3
 810b7cc:	f7fe fca8 	bl	810a120 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 810b7d0:	4603      	mov	r3, r0
 810b7d2:	681b      	ldr	r3, [r3, #0]
 810b7d4:	617b      	str	r3, [r7, #20]
      *__result = _GLIBCXX_MOVE(*__first);
 810b7d6:	f107 030c 	add.w	r3, r7, #12
 810b7da:	4618      	mov	r0, r3
 810b7dc:	f7ff f950 	bl	810aa80 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 810b7e0:	4603      	mov	r3, r0
 810b7e2:	4618      	mov	r0, r3
 810b7e4:	f7fe fc9c 	bl	810a120 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 810b7e8:	4603      	mov	r3, r0
 810b7ea:	681c      	ldr	r4, [r3, #0]
 810b7ec:	1d3b      	adds	r3, r7, #4
 810b7ee:	4618      	mov	r0, r3
 810b7f0:	f7ff f946 	bl	810aa80 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 810b7f4:	4603      	mov	r3, r0
 810b7f6:	601c      	str	r4, [r3, #0]
			 _DistanceType(__last - __first),
 810b7f8:	f107 020c 	add.w	r2, r7, #12
 810b7fc:	f107 0308 	add.w	r3, r7, #8
 810b800:	4611      	mov	r1, r2
 810b802:	4618      	mov	r0, r3
 810b804:	f7fe fc47 	bl	810a096 <_ZN9__gnu_cxxmiIPfSt6vectorIfSaIfEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 810b808:	4604      	mov	r4, r0
			 _GLIBCXX_MOVE(__value), __comp);
 810b80a:	f107 0314 	add.w	r3, r7, #20
 810b80e:	4618      	mov	r0, r3
 810b810:	f7fe fc86 	bl	810a120 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 810b814:	4603      	mov	r3, r0
      std::__adjust_heap(__first, _DistanceType(0),
 810b816:	edd3 7a00 	vldr	s15, [r3]
 810b81a:	462b      	mov	r3, r5
 810b81c:	eeb0 0a67 	vmov.f32	s0, s15
 810b820:	4622      	mov	r2, r4
 810b822:	2100      	movs	r1, #0
 810b824:	68f8      	ldr	r0, [r7, #12]
 810b826:	f000 f888 	bl	810b93a <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEifNS0_5__ops15_Iter_less_iterEEvT_T0_SA_T1_T2_>
    }
 810b82a:	bf00      	nop
 810b82c:	3718      	adds	r7, #24
 810b82e:	46bd      	mov	sp, r7
 810b830:	bdb0      	pop	{r4, r5, r7, pc}

0810b832 <_ZNK9__gnu_cxx5__ops14_Val_less_iterclIfNS_17__normal_iteratorIPfSt6vectorIfSaIfEEEEEEbRT_T0_>:
      operator()(_Value& __val, _Iterator __it) const
 810b832:	b580      	push	{r7, lr}
 810b834:	ed2d 8b02 	vpush	{d8}
 810b838:	b084      	sub	sp, #16
 810b83a:	af00      	add	r7, sp, #0
 810b83c:	60f8      	str	r0, [r7, #12]
 810b83e:	60b9      	str	r1, [r7, #8]
 810b840:	607a      	str	r2, [r7, #4]
      { return __val < *__it; }
 810b842:	68bb      	ldr	r3, [r7, #8]
 810b844:	ed93 8a00 	vldr	s16, [r3]
 810b848:	1d3b      	adds	r3, r7, #4
 810b84a:	4618      	mov	r0, r3
 810b84c:	f7ff f918 	bl	810aa80 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 810b850:	4603      	mov	r3, r0
 810b852:	edd3 7a00 	vldr	s15, [r3]
 810b856:	eeb4 8ae7 	vcmpe.f32	s16, s15
 810b85a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810b85e:	bf4c      	ite	mi
 810b860:	2301      	movmi	r3, #1
 810b862:	2300      	movpl	r3, #0
 810b864:	b2db      	uxtb	r3, r3
 810b866:	4618      	mov	r0, r3
 810b868:	3710      	adds	r7, #16
 810b86a:	46bd      	mov	sp, r7
 810b86c:	ecbd 8b02 	vpop	{d8}
 810b870:	bd80      	pop	{r7, pc}

0810b872 <_ZSt14__copy_move_a2ILb1EPfS0_ET1_T0_S2_S1_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 810b872:	b580      	push	{r7, lr}
 810b874:	b084      	sub	sp, #16
 810b876:	af00      	add	r7, sp, #0
 810b878:	60f8      	str	r0, [r7, #12]
 810b87a:	60b9      	str	r1, [r7, #8]
 810b87c:	607a      	str	r2, [r7, #4]
      if (std::is_constant_evaluated())
 810b87e:	f7fa faa6 	bl	8105dce <_ZSt21is_constant_evaluatedv>
 810b882:	4603      	mov	r3, r0
 810b884:	2b00      	cmp	r3, #0
 810b886:	d006      	beq.n	810b896 <_ZSt14__copy_move_a2ILb1EPfS0_ET1_T0_S2_S1_+0x24>
	  __copy_m(__first, __last, __result);
 810b888:	687a      	ldr	r2, [r7, #4]
 810b88a:	68b9      	ldr	r1, [r7, #8]
 810b88c:	68f8      	ldr	r0, [r7, #12]
 810b88e:	f000 f8fc 	bl	810ba8a <_ZNSt11__copy_moveILb1ELb0ESt26random_access_iterator_tagE8__copy_mIPfS3_EET0_T_S5_S4_>
 810b892:	4603      	mov	r3, r0
 810b894:	e006      	b.n	810b8a4 <_ZSt14__copy_move_a2ILb1EPfS0_ET1_T0_S2_S1_+0x32>
			      _Category>::__copy_m(__first, __last, __result);
 810b896:	687a      	ldr	r2, [r7, #4]
 810b898:	68b9      	ldr	r1, [r7, #8]
 810b89a:	68f8      	ldr	r0, [r7, #12]
 810b89c:	f000 f919 	bl	810bad2 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>
 810b8a0:	4603      	mov	r3, r0
 810b8a2:	bf00      	nop
    }
 810b8a4:	4618      	mov	r0, r3
 810b8a6:	3710      	adds	r7, #16
 810b8a8:	46bd      	mov	sp, r7
 810b8aa:	bd80      	pop	{r7, pc}

0810b8ac <_ZSt23__copy_move_backward_a2ILb1EPfS0_ET1_T0_S2_S1_>:
    __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
 810b8ac:	b580      	push	{r7, lr}
 810b8ae:	b084      	sub	sp, #16
 810b8b0:	af00      	add	r7, sp, #0
 810b8b2:	60f8      	str	r0, [r7, #12]
 810b8b4:	60b9      	str	r1, [r7, #8]
 810b8b6:	607a      	str	r2, [r7, #4]
      if (std::is_constant_evaluated())
 810b8b8:	f7fa fa89 	bl	8105dce <_ZSt21is_constant_evaluatedv>
 810b8bc:	4603      	mov	r3, r0
 810b8be:	2b00      	cmp	r3, #0
 810b8c0:	d006      	beq.n	810b8d0 <_ZSt23__copy_move_backward_a2ILb1EPfS0_ET1_T0_S2_S1_+0x24>
	  __copy_move_b(__first, __last, __result);
 810b8c2:	687a      	ldr	r2, [r7, #4]
 810b8c4:	68b9      	ldr	r1, [r7, #8]
 810b8c6:	68f8      	ldr	r0, [r7, #12]
 810b8c8:	f000 f920 	bl	810bb0c <_ZNSt20__copy_move_backwardILb1ELb0ESt26random_access_iterator_tagE13__copy_move_bIPfS3_EET0_T_S5_S4_>
 810b8cc:	4603      	mov	r3, r0
 810b8ce:	e006      	b.n	810b8de <_ZSt23__copy_move_backward_a2ILb1EPfS0_ET1_T0_S2_S1_+0x32>
				       _Category>::__copy_move_b(__first,
 810b8d0:	687a      	ldr	r2, [r7, #4]
 810b8d2:	68b9      	ldr	r1, [r7, #8]
 810b8d4:	68f8      	ldr	r0, [r7, #12]
 810b8d6:	f000 f93d 	bl	810bb54 <_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bIfEEPT_PKS3_S6_S4_>
 810b8da:	4603      	mov	r3, r0
								 __result);
 810b8dc:	bf00      	nop
    }
 810b8de:	4618      	mov	r0, r3
 810b8e0:	3710      	adds	r7, #16
 810b8e2:	46bd      	mov	sp, r7
 810b8e4:	bd80      	pop	{r7, pc}

0810b8e6 <_ZSt12__niter_baseIPKfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>:
    __niter_base(__gnu_cxx::__normal_iterator<_Iterator, _Container> __it)
 810b8e6:	b580      	push	{r7, lr}
 810b8e8:	b082      	sub	sp, #8
 810b8ea:	af00      	add	r7, sp, #0
 810b8ec:	6078      	str	r0, [r7, #4]
    { return __it.base(); }
 810b8ee:	1d3b      	adds	r3, r7, #4
 810b8f0:	4618      	mov	r0, r3
 810b8f2:	f7fe fee3 	bl	810a6bc <_ZNK9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEE4baseEv>
 810b8f6:	4603      	mov	r3, r0
 810b8f8:	681b      	ldr	r3, [r3, #0]
 810b8fa:	4618      	mov	r0, r3
 810b8fc:	3708      	adds	r7, #8
 810b8fe:	46bd      	mov	sp, r7
 810b900:	bd80      	pop	{r7, pc}

0810b902 <_ZSt14__copy_move_a1ILb0EPKfPfET1_T0_S4_S3_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 810b902:	b580      	push	{r7, lr}
 810b904:	b084      	sub	sp, #16
 810b906:	af00      	add	r7, sp, #0
 810b908:	60f8      	str	r0, [r7, #12]
 810b90a:	60b9      	str	r1, [r7, #8]
 810b90c:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 810b90e:	687a      	ldr	r2, [r7, #4]
 810b910:	68b9      	ldr	r1, [r7, #8]
 810b912:	68f8      	ldr	r0, [r7, #12]
 810b914:	f000 f940 	bl	810bb98 <_ZSt14__copy_move_a2ILb0EPKfPfET1_T0_S4_S3_>
 810b918:	4603      	mov	r3, r0
 810b91a:	4618      	mov	r0, r3
 810b91c:	3710      	adds	r7, #16
 810b91e:	46bd      	mov	sp, r7
 810b920:	bd80      	pop	{r7, pc}

0810b922 <_ZSt12__niter_wrapIPfET_RKS1_S1_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 810b922:	b480      	push	{r7}
 810b924:	b083      	sub	sp, #12
 810b926:	af00      	add	r7, sp, #0
 810b928:	6078      	str	r0, [r7, #4]
 810b92a:	6039      	str	r1, [r7, #0]
    { return __res; }
 810b92c:	683b      	ldr	r3, [r7, #0]
 810b92e:	4618      	mov	r0, r3
 810b930:	370c      	adds	r7, #12
 810b932:	46bd      	mov	sp, r7
 810b934:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b938:	4770      	bx	lr

0810b93a <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEifNS0_5__ops15_Iter_less_iterEEvT_T0_SA_T1_T2_>:
    __adjust_heap(_RandomAccessIterator __first, _Distance __holeIndex,
 810b93a:	b590      	push	{r4, r7, lr}
 810b93c:	b08f      	sub	sp, #60	@ 0x3c
 810b93e:	af00      	add	r7, sp, #0
 810b940:	6178      	str	r0, [r7, #20]
 810b942:	6139      	str	r1, [r7, #16]
 810b944:	60fa      	str	r2, [r7, #12]
 810b946:	ed87 0a02 	vstr	s0, [r7, #8]
 810b94a:	713b      	strb	r3, [r7, #4]
      const _Distance __topIndex = __holeIndex;
 810b94c:	693b      	ldr	r3, [r7, #16]
 810b94e:	633b      	str	r3, [r7, #48]	@ 0x30
      _Distance __secondChild = __holeIndex;
 810b950:	693b      	ldr	r3, [r7, #16]
 810b952:	637b      	str	r3, [r7, #52]	@ 0x34
      while (__secondChild < (__len - 1) / 2)
 810b954:	e042      	b.n	810b9dc <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEifNS0_5__ops15_Iter_less_iterEEvT_T0_SA_T1_T2_+0xa2>
	  __secondChild = 2 * (__secondChild + 1);
 810b956:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810b958:	3301      	adds	r3, #1
 810b95a:	005b      	lsls	r3, r3, #1
 810b95c:	637b      	str	r3, [r7, #52]	@ 0x34
	  if (__comp(__first + __secondChild,
 810b95e:	f107 0314 	add.w	r3, r7, #20
 810b962:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 810b964:	4618      	mov	r0, r3
 810b966:	f7fe fa36 	bl	8109dd6 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 810b96a:	4604      	mov	r4, r0
 810b96c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810b96e:	1e5a      	subs	r2, r3, #1
 810b970:	f107 0314 	add.w	r3, r7, #20
 810b974:	4611      	mov	r1, r2
 810b976:	4618      	mov	r0, r3
 810b978:	f7fe fa2d 	bl	8109dd6 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 810b97c:	4602      	mov	r2, r0
 810b97e:	1d3b      	adds	r3, r7, #4
 810b980:	4621      	mov	r1, r4
 810b982:	4618      	mov	r0, r3
 810b984:	f7ff fd8f 	bl	810b4a6 <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPfSt6vectorIfSaIfEEEES8_EEbT_T0_>
 810b988:	4603      	mov	r3, r0
 810b98a:	2b00      	cmp	r3, #0
 810b98c:	d002      	beq.n	810b994 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEifNS0_5__ops15_Iter_less_iterEEvT_T0_SA_T1_T2_+0x5a>
	    __secondChild--;
 810b98e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810b990:	3b01      	subs	r3, #1
 810b992:	637b      	str	r3, [r7, #52]	@ 0x34
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first + __secondChild));
 810b994:	f107 0314 	add.w	r3, r7, #20
 810b998:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 810b99a:	4618      	mov	r0, r3
 810b99c:	f7fe fa1b 	bl	8109dd6 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 810b9a0:	4603      	mov	r3, r0
 810b9a2:	623b      	str	r3, [r7, #32]
 810b9a4:	f107 0320 	add.w	r3, r7, #32
 810b9a8:	4618      	mov	r0, r3
 810b9aa:	f7ff f869 	bl	810aa80 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 810b9ae:	4603      	mov	r3, r0
 810b9b0:	4618      	mov	r0, r3
 810b9b2:	f7fe fbb5 	bl	810a120 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 810b9b6:	4603      	mov	r3, r0
 810b9b8:	681c      	ldr	r4, [r3, #0]
 810b9ba:	f107 0314 	add.w	r3, r7, #20
 810b9be:	6939      	ldr	r1, [r7, #16]
 810b9c0:	4618      	mov	r0, r3
 810b9c2:	f7fe fa08 	bl	8109dd6 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 810b9c6:	4603      	mov	r3, r0
 810b9c8:	627b      	str	r3, [r7, #36]	@ 0x24
 810b9ca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 810b9ce:	4618      	mov	r0, r3
 810b9d0:	f7ff f856 	bl	810aa80 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 810b9d4:	4603      	mov	r3, r0
 810b9d6:	601c      	str	r4, [r3, #0]
	  __holeIndex = __secondChild;
 810b9d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810b9da:	613b      	str	r3, [r7, #16]
      while (__secondChild < (__len - 1) / 2)
 810b9dc:	68fb      	ldr	r3, [r7, #12]
 810b9de:	3b01      	subs	r3, #1
 810b9e0:	0fda      	lsrs	r2, r3, #31
 810b9e2:	4413      	add	r3, r2
 810b9e4:	105b      	asrs	r3, r3, #1
 810b9e6:	461a      	mov	r2, r3
 810b9e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810b9ea:	4293      	cmp	r3, r2
 810b9ec:	dbb3      	blt.n	810b956 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEifNS0_5__ops15_Iter_less_iterEEvT_T0_SA_T1_T2_+0x1c>
      if ((__len & 1) == 0 && __secondChild == (__len - 2) / 2)
 810b9ee:	68fb      	ldr	r3, [r7, #12]
 810b9f0:	f003 0301 	and.w	r3, r3, #1
 810b9f4:	2b00      	cmp	r3, #0
 810b9f6:	d133      	bne.n	810ba60 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEifNS0_5__ops15_Iter_less_iterEEvT_T0_SA_T1_T2_+0x126>
 810b9f8:	68fb      	ldr	r3, [r7, #12]
 810b9fa:	3b02      	subs	r3, #2
 810b9fc:	0fda      	lsrs	r2, r3, #31
 810b9fe:	4413      	add	r3, r2
 810ba00:	105b      	asrs	r3, r3, #1
 810ba02:	461a      	mov	r2, r3
 810ba04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810ba06:	4293      	cmp	r3, r2
 810ba08:	d12a      	bne.n	810ba60 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEifNS0_5__ops15_Iter_less_iterEEvT_T0_SA_T1_T2_+0x126>
	  __secondChild = 2 * (__secondChild + 1);
 810ba0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810ba0c:	3301      	adds	r3, #1
 810ba0e:	005b      	lsls	r3, r3, #1
 810ba10:	637b      	str	r3, [r7, #52]	@ 0x34
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first
 810ba12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810ba14:	1e5a      	subs	r2, r3, #1
 810ba16:	f107 0314 	add.w	r3, r7, #20
 810ba1a:	4611      	mov	r1, r2
 810ba1c:	4618      	mov	r0, r3
 810ba1e:	f7fe f9da 	bl	8109dd6 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 810ba22:	4603      	mov	r3, r0
 810ba24:	62bb      	str	r3, [r7, #40]	@ 0x28
 810ba26:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 810ba2a:	4618      	mov	r0, r3
 810ba2c:	f7ff f828 	bl	810aa80 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 810ba30:	4603      	mov	r3, r0
 810ba32:	4618      	mov	r0, r3
 810ba34:	f7fe fb74 	bl	810a120 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 810ba38:	4603      	mov	r3, r0
 810ba3a:	681c      	ldr	r4, [r3, #0]
 810ba3c:	f107 0314 	add.w	r3, r7, #20
 810ba40:	6939      	ldr	r1, [r7, #16]
 810ba42:	4618      	mov	r0, r3
 810ba44:	f7fe f9c7 	bl	8109dd6 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 810ba48:	4603      	mov	r3, r0
 810ba4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 810ba4c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 810ba50:	4618      	mov	r0, r3
 810ba52:	f7ff f815 	bl	810aa80 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 810ba56:	4603      	mov	r3, r0
 810ba58:	601c      	str	r4, [r3, #0]
	  __holeIndex = __secondChild - 1;
 810ba5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810ba5c:	3b01      	subs	r3, #1
 810ba5e:	613b      	str	r3, [r7, #16]
		       _GLIBCXX_MOVE(__value), __cmp);
 810ba60:	f107 0308 	add.w	r3, r7, #8
 810ba64:	4618      	mov	r0, r3
 810ba66:	f7fe fb5b 	bl	810a120 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 810ba6a:	4603      	mov	r3, r0
      std::__push_heap(__first, __holeIndex, __topIndex,
 810ba6c:	edd3 7a00 	vldr	s15, [r3]
 810ba70:	f107 031c 	add.w	r3, r7, #28
 810ba74:	eeb0 0a67 	vmov.f32	s0, s15
 810ba78:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810ba7a:	6939      	ldr	r1, [r7, #16]
 810ba7c:	6978      	ldr	r0, [r7, #20]
 810ba7e:	f000 f8a8 	bl	810bbd2 <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEifNS0_5__ops14_Iter_less_valEEvT_T0_SA_T1_RT2_>
    }
 810ba82:	bf00      	nop
 810ba84:	373c      	adds	r7, #60	@ 0x3c
 810ba86:	46bd      	mov	sp, r7
 810ba88:	bd90      	pop	{r4, r7, pc}

0810ba8a <_ZNSt11__copy_moveILb1ELb0ESt26random_access_iterator_tagE8__copy_mIPfS3_EET0_T_S5_S4_>:
	__copy_m(_II __first, _II __last, _OI __result)
 810ba8a:	b580      	push	{r7, lr}
 810ba8c:	b086      	sub	sp, #24
 810ba8e:	af00      	add	r7, sp, #0
 810ba90:	60f8      	str	r0, [r7, #12]
 810ba92:	60b9      	str	r1, [r7, #8]
 810ba94:	607a      	str	r2, [r7, #4]
	  for(_Distance __n = __last - __first; __n > 0; --__n)
 810ba96:	68ba      	ldr	r2, [r7, #8]
 810ba98:	68fb      	ldr	r3, [r7, #12]
 810ba9a:	1ad3      	subs	r3, r2, r3
 810ba9c:	109b      	asrs	r3, r3, #2
 810ba9e:	617b      	str	r3, [r7, #20]
 810baa0:	e00f      	b.n	810bac2 <_ZNSt11__copy_moveILb1ELb0ESt26random_access_iterator_tagE8__copy_mIPfS3_EET0_T_S5_S4_+0x38>
	      *__result = std::move(*__first);
 810baa2:	68f8      	ldr	r0, [r7, #12]
 810baa4:	f7fe fb3c 	bl	810a120 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 810baa8:	4603      	mov	r3, r0
 810baaa:	681a      	ldr	r2, [r3, #0]
 810baac:	687b      	ldr	r3, [r7, #4]
 810baae:	601a      	str	r2, [r3, #0]
	      ++__first;
 810bab0:	68fb      	ldr	r3, [r7, #12]
 810bab2:	3304      	adds	r3, #4
 810bab4:	60fb      	str	r3, [r7, #12]
	      ++__result;
 810bab6:	687b      	ldr	r3, [r7, #4]
 810bab8:	3304      	adds	r3, #4
 810baba:	607b      	str	r3, [r7, #4]
	  for(_Distance __n = __last - __first; __n > 0; --__n)
 810babc:	697b      	ldr	r3, [r7, #20]
 810babe:	3b01      	subs	r3, #1
 810bac0:	617b      	str	r3, [r7, #20]
 810bac2:	697b      	ldr	r3, [r7, #20]
 810bac4:	2b00      	cmp	r3, #0
 810bac6:	dcec      	bgt.n	810baa2 <_ZNSt11__copy_moveILb1ELb0ESt26random_access_iterator_tagE8__copy_mIPfS3_EET0_T_S5_S4_+0x18>
	  return __result;
 810bac8:	687b      	ldr	r3, [r7, #4]
	}
 810baca:	4618      	mov	r0, r3
 810bacc:	3718      	adds	r7, #24
 810bace:	46bd      	mov	sp, r7
 810bad0:	bd80      	pop	{r7, pc}

0810bad2 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 810bad2:	b580      	push	{r7, lr}
 810bad4:	b086      	sub	sp, #24
 810bad6:	af00      	add	r7, sp, #0
 810bad8:	60f8      	str	r0, [r7, #12]
 810bada:	60b9      	str	r1, [r7, #8]
 810badc:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 810bade:	68ba      	ldr	r2, [r7, #8]
 810bae0:	68fb      	ldr	r3, [r7, #12]
 810bae2:	1ad3      	subs	r3, r2, r3
 810bae4:	109b      	asrs	r3, r3, #2
 810bae6:	617b      	str	r3, [r7, #20]
	  if (_Num)
 810bae8:	697b      	ldr	r3, [r7, #20]
 810baea:	2b00      	cmp	r3, #0
 810baec:	d006      	beq.n	810bafc <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 810baee:	697b      	ldr	r3, [r7, #20]
 810baf0:	009b      	lsls	r3, r3, #2
 810baf2:	461a      	mov	r2, r3
 810baf4:	68f9      	ldr	r1, [r7, #12]
 810baf6:	6878      	ldr	r0, [r7, #4]
 810baf8:	f018 f9b6 	bl	8123e68 <memmove>
	  return __result + _Num;
 810bafc:	697b      	ldr	r3, [r7, #20]
 810bafe:	009b      	lsls	r3, r3, #2
 810bb00:	687a      	ldr	r2, [r7, #4]
 810bb02:	4413      	add	r3, r2
	}
 810bb04:	4618      	mov	r0, r3
 810bb06:	3718      	adds	r7, #24
 810bb08:	46bd      	mov	sp, r7
 810bb0a:	bd80      	pop	{r7, pc}

0810bb0c <_ZNSt20__copy_move_backwardILb1ELb0ESt26random_access_iterator_tagE13__copy_move_bIPfS3_EET0_T_S5_S4_>:
	__copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result)
 810bb0c:	b580      	push	{r7, lr}
 810bb0e:	b086      	sub	sp, #24
 810bb10:	af00      	add	r7, sp, #0
 810bb12:	60f8      	str	r0, [r7, #12]
 810bb14:	60b9      	str	r1, [r7, #8]
 810bb16:	607a      	str	r2, [r7, #4]
	    __n = __last - __first;
 810bb18:	68ba      	ldr	r2, [r7, #8]
 810bb1a:	68fb      	ldr	r3, [r7, #12]
 810bb1c:	1ad3      	subs	r3, r2, r3
 810bb1e:	109b      	asrs	r3, r3, #2
 810bb20:	617b      	str	r3, [r7, #20]
	  for (; __n > 0; --__n)
 810bb22:	e00f      	b.n	810bb44 <_ZNSt20__copy_move_backwardILb1ELb0ESt26random_access_iterator_tagE13__copy_move_bIPfS3_EET0_T_S5_S4_+0x38>
	    *--__result = std::move(*--__last);
 810bb24:	68bb      	ldr	r3, [r7, #8]
 810bb26:	3b04      	subs	r3, #4
 810bb28:	60bb      	str	r3, [r7, #8]
 810bb2a:	68b8      	ldr	r0, [r7, #8]
 810bb2c:	f7fe faf8 	bl	810a120 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 810bb30:	4603      	mov	r3, r0
 810bb32:	681a      	ldr	r2, [r3, #0]
 810bb34:	687b      	ldr	r3, [r7, #4]
 810bb36:	3b04      	subs	r3, #4
 810bb38:	607b      	str	r3, [r7, #4]
 810bb3a:	687b      	ldr	r3, [r7, #4]
 810bb3c:	601a      	str	r2, [r3, #0]
	  for (; __n > 0; --__n)
 810bb3e:	697b      	ldr	r3, [r7, #20]
 810bb40:	3b01      	subs	r3, #1
 810bb42:	617b      	str	r3, [r7, #20]
 810bb44:	697b      	ldr	r3, [r7, #20]
 810bb46:	2b00      	cmp	r3, #0
 810bb48:	dcec      	bgt.n	810bb24 <_ZNSt20__copy_move_backwardILb1ELb0ESt26random_access_iterator_tagE13__copy_move_bIPfS3_EET0_T_S5_S4_+0x18>
	  return __result;
 810bb4a:	687b      	ldr	r3, [r7, #4]
	}
 810bb4c:	4618      	mov	r0, r3
 810bb4e:	3718      	adds	r7, #24
 810bb50:	46bd      	mov	sp, r7
 810bb52:	bd80      	pop	{r7, pc}

0810bb54 <_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bIfEEPT_PKS3_S6_S4_>:
	__copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
 810bb54:	b580      	push	{r7, lr}
 810bb56:	b086      	sub	sp, #24
 810bb58:	af00      	add	r7, sp, #0
 810bb5a:	60f8      	str	r0, [r7, #12]
 810bb5c:	60b9      	str	r1, [r7, #8]
 810bb5e:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 810bb60:	68ba      	ldr	r2, [r7, #8]
 810bb62:	68fb      	ldr	r3, [r7, #12]
 810bb64:	1ad3      	subs	r3, r2, r3
 810bb66:	109b      	asrs	r3, r3, #2
 810bb68:	617b      	str	r3, [r7, #20]
	  if (_Num)
 810bb6a:	697b      	ldr	r3, [r7, #20]
 810bb6c:	2b00      	cmp	r3, #0
 810bb6e:	d00a      	beq.n	810bb86 <_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bIfEEPT_PKS3_S6_S4_+0x32>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 810bb70:	697b      	ldr	r3, [r7, #20]
 810bb72:	009b      	lsls	r3, r3, #2
 810bb74:	425b      	negs	r3, r3
 810bb76:	687a      	ldr	r2, [r7, #4]
 810bb78:	18d0      	adds	r0, r2, r3
 810bb7a:	697b      	ldr	r3, [r7, #20]
 810bb7c:	009b      	lsls	r3, r3, #2
 810bb7e:	461a      	mov	r2, r3
 810bb80:	68f9      	ldr	r1, [r7, #12]
 810bb82:	f018 f971 	bl	8123e68 <memmove>
	  return __result - _Num;
 810bb86:	697b      	ldr	r3, [r7, #20]
 810bb88:	009b      	lsls	r3, r3, #2
 810bb8a:	425b      	negs	r3, r3
 810bb8c:	687a      	ldr	r2, [r7, #4]
 810bb8e:	4413      	add	r3, r2
	}
 810bb90:	4618      	mov	r0, r3
 810bb92:	3718      	adds	r7, #24
 810bb94:	46bd      	mov	sp, r7
 810bb96:	bd80      	pop	{r7, pc}

0810bb98 <_ZSt14__copy_move_a2ILb0EPKfPfET1_T0_S4_S3_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 810bb98:	b580      	push	{r7, lr}
 810bb9a:	b084      	sub	sp, #16
 810bb9c:	af00      	add	r7, sp, #0
 810bb9e:	60f8      	str	r0, [r7, #12]
 810bba0:	60b9      	str	r1, [r7, #8]
 810bba2:	607a      	str	r2, [r7, #4]
      if (std::is_constant_evaluated())
 810bba4:	f7fa f913 	bl	8105dce <_ZSt21is_constant_evaluatedv>
 810bba8:	4603      	mov	r3, r0
 810bbaa:	2b00      	cmp	r3, #0
 810bbac:	d006      	beq.n	810bbbc <_ZSt14__copy_move_a2ILb0EPKfPfET1_T0_S4_S3_+0x24>
	  __copy_m(__first, __last, __result);
 810bbae:	687a      	ldr	r2, [r7, #4]
 810bbb0:	68b9      	ldr	r1, [r7, #8]
 810bbb2:	68f8      	ldr	r0, [r7, #12]
 810bbb4:	f000 f87a 	bl	810bcac <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKfPfEET0_T_S7_S6_>
 810bbb8:	4603      	mov	r3, r0
 810bbba:	e006      	b.n	810bbca <_ZSt14__copy_move_a2ILb0EPKfPfET1_T0_S4_S3_+0x32>
			      _Category>::__copy_m(__first, __last, __result);
 810bbbc:	687a      	ldr	r2, [r7, #4]
 810bbbe:	68b9      	ldr	r1, [r7, #8]
 810bbc0:	68f8      	ldr	r0, [r7, #12]
 810bbc2:	f000 f896 	bl	810bcf2 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>
 810bbc6:	4603      	mov	r3, r0
 810bbc8:	bf00      	nop
    }
 810bbca:	4618      	mov	r0, r3
 810bbcc:	3710      	adds	r7, #16
 810bbce:	46bd      	mov	sp, r7
 810bbd0:	bd80      	pop	{r7, pc}

0810bbd2 <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEifNS0_5__ops14_Iter_less_valEEvT_T0_SA_T1_RT2_>:
    __push_heap(_RandomAccessIterator __first,
 810bbd2:	b590      	push	{r4, r7, lr}
 810bbd4:	b08b      	sub	sp, #44	@ 0x2c
 810bbd6:	af00      	add	r7, sp, #0
 810bbd8:	6178      	str	r0, [r7, #20]
 810bbda:	6139      	str	r1, [r7, #16]
 810bbdc:	60fa      	str	r2, [r7, #12]
 810bbde:	ed87 0a02 	vstr	s0, [r7, #8]
 810bbe2:	607b      	str	r3, [r7, #4]
      _Distance __parent = (__holeIndex - 1) / 2;
 810bbe4:	693b      	ldr	r3, [r7, #16]
 810bbe6:	3b01      	subs	r3, #1
 810bbe8:	0fda      	lsrs	r2, r3, #31
 810bbea:	4413      	add	r3, r2
 810bbec:	105b      	asrs	r3, r3, #1
 810bbee:	627b      	str	r3, [r7, #36]	@ 0x24
      while (__holeIndex > __topIndex && __comp(__first + __parent, __value))
 810bbf0:	e029      	b.n	810bc46 <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEifNS0_5__ops14_Iter_less_valEEvT_T0_SA_T1_RT2_+0x74>
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first + __parent));
 810bbf2:	f107 0314 	add.w	r3, r7, #20
 810bbf6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 810bbf8:	4618      	mov	r0, r3
 810bbfa:	f7fe f8ec 	bl	8109dd6 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 810bbfe:	4603      	mov	r3, r0
 810bc00:	61bb      	str	r3, [r7, #24]
 810bc02:	f107 0318 	add.w	r3, r7, #24
 810bc06:	4618      	mov	r0, r3
 810bc08:	f7fe ff3a 	bl	810aa80 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 810bc0c:	4603      	mov	r3, r0
 810bc0e:	4618      	mov	r0, r3
 810bc10:	f7fe fa86 	bl	810a120 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 810bc14:	4603      	mov	r3, r0
 810bc16:	681c      	ldr	r4, [r3, #0]
 810bc18:	f107 0314 	add.w	r3, r7, #20
 810bc1c:	6939      	ldr	r1, [r7, #16]
 810bc1e:	4618      	mov	r0, r3
 810bc20:	f7fe f8d9 	bl	8109dd6 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 810bc24:	4603      	mov	r3, r0
 810bc26:	61fb      	str	r3, [r7, #28]
 810bc28:	f107 031c 	add.w	r3, r7, #28
 810bc2c:	4618      	mov	r0, r3
 810bc2e:	f7fe ff27 	bl	810aa80 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 810bc32:	4603      	mov	r3, r0
 810bc34:	601c      	str	r4, [r3, #0]
	  __holeIndex = __parent;
 810bc36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810bc38:	613b      	str	r3, [r7, #16]
	  __parent = (__holeIndex - 1) / 2;
 810bc3a:	693b      	ldr	r3, [r7, #16]
 810bc3c:	3b01      	subs	r3, #1
 810bc3e:	0fda      	lsrs	r2, r3, #31
 810bc40:	4413      	add	r3, r2
 810bc42:	105b      	asrs	r3, r3, #1
 810bc44:	627b      	str	r3, [r7, #36]	@ 0x24
      while (__holeIndex > __topIndex && __comp(__first + __parent, __value))
 810bc46:	693a      	ldr	r2, [r7, #16]
 810bc48:	68fb      	ldr	r3, [r7, #12]
 810bc4a:	429a      	cmp	r2, r3
 810bc4c:	dd11      	ble.n	810bc72 <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEifNS0_5__ops14_Iter_less_valEEvT_T0_SA_T1_RT2_+0xa0>
 810bc4e:	f107 0314 	add.w	r3, r7, #20
 810bc52:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 810bc54:	4618      	mov	r0, r3
 810bc56:	f7fe f8be 	bl	8109dd6 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 810bc5a:	4601      	mov	r1, r0
 810bc5c:	f107 0308 	add.w	r3, r7, #8
 810bc60:	461a      	mov	r2, r3
 810bc62:	6878      	ldr	r0, [r7, #4]
 810bc64:	f000 f862 	bl	810bd2c <_ZNK9__gnu_cxx5__ops14_Iter_less_valclINS_17__normal_iteratorIPfSt6vectorIfSaIfEEEEfEEbT_RT0_>
 810bc68:	4603      	mov	r3, r0
 810bc6a:	2b00      	cmp	r3, #0
 810bc6c:	d001      	beq.n	810bc72 <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEifNS0_5__ops14_Iter_less_valEEvT_T0_SA_T1_RT2_+0xa0>
 810bc6e:	2301      	movs	r3, #1
 810bc70:	e000      	b.n	810bc74 <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEifNS0_5__ops14_Iter_less_valEEvT_T0_SA_T1_RT2_+0xa2>
 810bc72:	2300      	movs	r3, #0
 810bc74:	2b00      	cmp	r3, #0
 810bc76:	d1bc      	bne.n	810bbf2 <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEifNS0_5__ops14_Iter_less_valEEvT_T0_SA_T1_RT2_+0x20>
      *(__first + __holeIndex) = _GLIBCXX_MOVE(__value);
 810bc78:	f107 0308 	add.w	r3, r7, #8
 810bc7c:	4618      	mov	r0, r3
 810bc7e:	f7fe fa4f 	bl	810a120 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 810bc82:	4603      	mov	r3, r0
 810bc84:	681c      	ldr	r4, [r3, #0]
 810bc86:	f107 0314 	add.w	r3, r7, #20
 810bc8a:	6939      	ldr	r1, [r7, #16]
 810bc8c:	4618      	mov	r0, r3
 810bc8e:	f7fe f8a2 	bl	8109dd6 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 810bc92:	4603      	mov	r3, r0
 810bc94:	623b      	str	r3, [r7, #32]
 810bc96:	f107 0320 	add.w	r3, r7, #32
 810bc9a:	4618      	mov	r0, r3
 810bc9c:	f7fe fef0 	bl	810aa80 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 810bca0:	4603      	mov	r3, r0
 810bca2:	601c      	str	r4, [r3, #0]
    }
 810bca4:	bf00      	nop
 810bca6:	372c      	adds	r7, #44	@ 0x2c
 810bca8:	46bd      	mov	sp, r7
 810bcaa:	bd90      	pop	{r4, r7, pc}

0810bcac <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKfPfEET0_T_S7_S6_>:
	__copy_m(_II __first, _II __last, _OI __result)
 810bcac:	b480      	push	{r7}
 810bcae:	b087      	sub	sp, #28
 810bcb0:	af00      	add	r7, sp, #0
 810bcb2:	60f8      	str	r0, [r7, #12]
 810bcb4:	60b9      	str	r1, [r7, #8]
 810bcb6:	607a      	str	r2, [r7, #4]
	  for(_Distance __n = __last - __first; __n > 0; --__n)
 810bcb8:	68ba      	ldr	r2, [r7, #8]
 810bcba:	68fb      	ldr	r3, [r7, #12]
 810bcbc:	1ad3      	subs	r3, r2, r3
 810bcbe:	109b      	asrs	r3, r3, #2
 810bcc0:	617b      	str	r3, [r7, #20]
 810bcc2:	e00c      	b.n	810bcde <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKfPfEET0_T_S7_S6_+0x32>
	      *__result = *__first;
 810bcc4:	68fb      	ldr	r3, [r7, #12]
 810bcc6:	681a      	ldr	r2, [r3, #0]
 810bcc8:	687b      	ldr	r3, [r7, #4]
 810bcca:	601a      	str	r2, [r3, #0]
	      ++__first;
 810bccc:	68fb      	ldr	r3, [r7, #12]
 810bcce:	3304      	adds	r3, #4
 810bcd0:	60fb      	str	r3, [r7, #12]
	      ++__result;
 810bcd2:	687b      	ldr	r3, [r7, #4]
 810bcd4:	3304      	adds	r3, #4
 810bcd6:	607b      	str	r3, [r7, #4]
	  for(_Distance __n = __last - __first; __n > 0; --__n)
 810bcd8:	697b      	ldr	r3, [r7, #20]
 810bcda:	3b01      	subs	r3, #1
 810bcdc:	617b      	str	r3, [r7, #20]
 810bcde:	697b      	ldr	r3, [r7, #20]
 810bce0:	2b00      	cmp	r3, #0
 810bce2:	dcef      	bgt.n	810bcc4 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKfPfEET0_T_S7_S6_+0x18>
	  return __result;
 810bce4:	687b      	ldr	r3, [r7, #4]
	}
 810bce6:	4618      	mov	r0, r3
 810bce8:	371c      	adds	r7, #28
 810bcea:	46bd      	mov	sp, r7
 810bcec:	f85d 7b04 	ldr.w	r7, [sp], #4
 810bcf0:	4770      	bx	lr

0810bcf2 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 810bcf2:	b580      	push	{r7, lr}
 810bcf4:	b086      	sub	sp, #24
 810bcf6:	af00      	add	r7, sp, #0
 810bcf8:	60f8      	str	r0, [r7, #12]
 810bcfa:	60b9      	str	r1, [r7, #8]
 810bcfc:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 810bcfe:	68ba      	ldr	r2, [r7, #8]
 810bd00:	68fb      	ldr	r3, [r7, #12]
 810bd02:	1ad3      	subs	r3, r2, r3
 810bd04:	109b      	asrs	r3, r3, #2
 810bd06:	617b      	str	r3, [r7, #20]
	  if (_Num)
 810bd08:	697b      	ldr	r3, [r7, #20]
 810bd0a:	2b00      	cmp	r3, #0
 810bd0c:	d006      	beq.n	810bd1c <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 810bd0e:	697b      	ldr	r3, [r7, #20]
 810bd10:	009b      	lsls	r3, r3, #2
 810bd12:	461a      	mov	r2, r3
 810bd14:	68f9      	ldr	r1, [r7, #12]
 810bd16:	6878      	ldr	r0, [r7, #4]
 810bd18:	f018 f8a6 	bl	8123e68 <memmove>
	  return __result + _Num;
 810bd1c:	697b      	ldr	r3, [r7, #20]
 810bd1e:	009b      	lsls	r3, r3, #2
 810bd20:	687a      	ldr	r2, [r7, #4]
 810bd22:	4413      	add	r3, r2
	}
 810bd24:	4618      	mov	r0, r3
 810bd26:	3718      	adds	r7, #24
 810bd28:	46bd      	mov	sp, r7
 810bd2a:	bd80      	pop	{r7, pc}

0810bd2c <_ZNK9__gnu_cxx5__ops14_Iter_less_valclINS_17__normal_iteratorIPfSt6vectorIfSaIfEEEEfEEbT_RT0_>:
      operator()(_Iterator __it, _Value& __val) const
 810bd2c:	b580      	push	{r7, lr}
 810bd2e:	b084      	sub	sp, #16
 810bd30:	af00      	add	r7, sp, #0
 810bd32:	60f8      	str	r0, [r7, #12]
 810bd34:	60b9      	str	r1, [r7, #8]
 810bd36:	607a      	str	r2, [r7, #4]
      { return *__it < __val; }
 810bd38:	f107 0308 	add.w	r3, r7, #8
 810bd3c:	4618      	mov	r0, r3
 810bd3e:	f7fe fe9f 	bl	810aa80 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 810bd42:	4603      	mov	r3, r0
 810bd44:	ed93 7a00 	vldr	s14, [r3]
 810bd48:	687b      	ldr	r3, [r7, #4]
 810bd4a:	edd3 7a00 	vldr	s15, [r3]
 810bd4e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 810bd52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810bd56:	bf4c      	ite	mi
 810bd58:	2301      	movmi	r3, #1
 810bd5a:	2300      	movpl	r3, #0
 810bd5c:	b2db      	uxtb	r3, r3
 810bd5e:	4618      	mov	r0, r3
 810bd60:	3710      	adds	r7, #16
 810bd62:	46bd      	mov	sp, r7
 810bd64:	bd80      	pop	{r7, pc}

0810bd66 <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 810bd66:	b480      	push	{r7}
 810bd68:	b083      	sub	sp, #12
 810bd6a:	af00      	add	r7, sp, #0
 810bd6c:	6078      	str	r0, [r7, #4]
 810bd6e:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 810bd70:	687b      	ldr	r3, [r7, #4]
 810bd72:	2b00      	cmp	r3, #0
 810bd74:	d00b      	beq.n	810bd8e <LAN8742_RegisterBusIO+0x28>
 810bd76:	683b      	ldr	r3, [r7, #0]
 810bd78:	68db      	ldr	r3, [r3, #12]
 810bd7a:	2b00      	cmp	r3, #0
 810bd7c:	d007      	beq.n	810bd8e <LAN8742_RegisterBusIO+0x28>
 810bd7e:	683b      	ldr	r3, [r7, #0]
 810bd80:	689b      	ldr	r3, [r3, #8]
 810bd82:	2b00      	cmp	r3, #0
 810bd84:	d003      	beq.n	810bd8e <LAN8742_RegisterBusIO+0x28>
 810bd86:	683b      	ldr	r3, [r7, #0]
 810bd88:	691b      	ldr	r3, [r3, #16]
 810bd8a:	2b00      	cmp	r3, #0
 810bd8c:	d102      	bne.n	810bd94 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 810bd8e:	f04f 33ff 	mov.w	r3, #4294967295
 810bd92:	e014      	b.n	810bdbe <LAN8742_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 810bd94:	683b      	ldr	r3, [r7, #0]
 810bd96:	681a      	ldr	r2, [r3, #0]
 810bd98:	687b      	ldr	r3, [r7, #4]
 810bd9a:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 810bd9c:	683b      	ldr	r3, [r7, #0]
 810bd9e:	685a      	ldr	r2, [r3, #4]
 810bda0:	687b      	ldr	r3, [r7, #4]
 810bda2:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 810bda4:	683b      	ldr	r3, [r7, #0]
 810bda6:	68da      	ldr	r2, [r3, #12]
 810bda8:	687b      	ldr	r3, [r7, #4]
 810bdaa:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 810bdac:	683b      	ldr	r3, [r7, #0]
 810bdae:	689a      	ldr	r2, [r3, #8]
 810bdb0:	687b      	ldr	r3, [r7, #4]
 810bdb2:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 810bdb4:	683b      	ldr	r3, [r7, #0]
 810bdb6:	691a      	ldr	r2, [r3, #16]
 810bdb8:	687b      	ldr	r3, [r7, #4]
 810bdba:	619a      	str	r2, [r3, #24]

  return LAN8742_STATUS_OK;
 810bdbc:	2300      	movs	r3, #0
}
 810bdbe:	4618      	mov	r0, r3
 810bdc0:	370c      	adds	r7, #12
 810bdc2:	46bd      	mov	sp, r7
 810bdc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 810bdc8:	4770      	bx	lr

0810bdca <LAN8742_Init>:
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ADDRESS_ERROR if cannot find device address
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 810bdca:	b580      	push	{r7, lr}
 810bdcc:	b086      	sub	sp, #24
 810bdce:	af00      	add	r7, sp, #0
 810bdd0:	6078      	str	r0, [r7, #4]
   uint32_t regvalue = 0, addr = 0;
 810bdd2:	2300      	movs	r3, #0
 810bdd4:	60fb      	str	r3, [r7, #12]
 810bdd6:	2300      	movs	r3, #0
 810bdd8:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 810bdda:	2300      	movs	r3, #0
 810bddc:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 810bdde:	687b      	ldr	r3, [r7, #4]
 810bde0:	685b      	ldr	r3, [r3, #4]
 810bde2:	2b00      	cmp	r3, #0
 810bde4:	d139      	bne.n	810be5a <LAN8742_Init+0x90>
   {
     if(pObj->IO.Init != 0)
 810bde6:	687b      	ldr	r3, [r7, #4]
 810bde8:	689b      	ldr	r3, [r3, #8]
 810bdea:	2b00      	cmp	r3, #0
 810bdec:	d002      	beq.n	810bdf4 <LAN8742_Init+0x2a>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 810bdee:	687b      	ldr	r3, [r7, #4]
 810bdf0:	689b      	ldr	r3, [r3, #8]
 810bdf2:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 810bdf4:	687b      	ldr	r3, [r7, #4]
 810bdf6:	2220      	movs	r2, #32
 810bdf8:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 810bdfa:	2300      	movs	r3, #0
 810bdfc:	617b      	str	r3, [r7, #20]
 810bdfe:	e01c      	b.n	810be3a <LAN8742_Init+0x70>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 810be00:	687b      	ldr	r3, [r7, #4]
 810be02:	695b      	ldr	r3, [r3, #20]
 810be04:	f107 020c 	add.w	r2, r7, #12
 810be08:	2112      	movs	r1, #18
 810be0a:	6978      	ldr	r0, [r7, #20]
 810be0c:	4798      	blx	r3
 810be0e:	4603      	mov	r3, r0
 810be10:	2b00      	cmp	r3, #0
 810be12:	da03      	bge.n	810be1c <LAN8742_Init+0x52>
       {
         status = LAN8742_STATUS_READ_ERROR;
 810be14:	f06f 0304 	mvn.w	r3, #4
 810be18:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 810be1a:	e00b      	b.n	810be34 <LAN8742_Init+0x6a>
       }

       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 810be1c:	68fb      	ldr	r3, [r7, #12]
 810be1e:	f003 031f 	and.w	r3, r3, #31
 810be22:	697a      	ldr	r2, [r7, #20]
 810be24:	429a      	cmp	r2, r3
 810be26:	d105      	bne.n	810be34 <LAN8742_Init+0x6a>
       {
         pObj->DevAddr = addr;
 810be28:	687b      	ldr	r3, [r7, #4]
 810be2a:	697a      	ldr	r2, [r7, #20]
 810be2c:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 810be2e:	2300      	movs	r3, #0
 810be30:	613b      	str	r3, [r7, #16]
         break;
 810be32:	e005      	b.n	810be40 <LAN8742_Init+0x76>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 810be34:	697b      	ldr	r3, [r7, #20]
 810be36:	3301      	adds	r3, #1
 810be38:	617b      	str	r3, [r7, #20]
 810be3a:	697b      	ldr	r3, [r7, #20]
 810be3c:	2b1f      	cmp	r3, #31
 810be3e:	d9df      	bls.n	810be00 <LAN8742_Init+0x36>
       }
     }

     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 810be40:	687b      	ldr	r3, [r7, #4]
 810be42:	681b      	ldr	r3, [r3, #0]
 810be44:	2b1f      	cmp	r3, #31
 810be46:	d902      	bls.n	810be4e <LAN8742_Init+0x84>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 810be48:	f06f 0302 	mvn.w	r3, #2
 810be4c:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 810be4e:	693b      	ldr	r3, [r7, #16]
 810be50:	2b00      	cmp	r3, #0
 810be52:	d102      	bne.n	810be5a <LAN8742_Init+0x90>
     {
       pObj->Is_Initialized = 1;
 810be54:	687b      	ldr	r3, [r7, #4]
 810be56:	2201      	movs	r2, #1
 810be58:	605a      	str	r2, [r3, #4]
     }
   }

   return status;
 810be5a:	693b      	ldr	r3, [r7, #16]
 }
 810be5c:	4618      	mov	r0, r3
 810be5e:	3718      	adds	r7, #24
 810be60:	46bd      	mov	sp, r7
 810be62:	bd80      	pop	{r7, pc}

0810be64 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 810be64:	b580      	push	{r7, lr}
 810be66:	b084      	sub	sp, #16
 810be68:	af00      	add	r7, sp, #0
 810be6a:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 810be6c:	2300      	movs	r3, #0
 810be6e:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 810be70:	687b      	ldr	r3, [r7, #4]
 810be72:	695b      	ldr	r3, [r3, #20]
 810be74:	687a      	ldr	r2, [r7, #4]
 810be76:	6810      	ldr	r0, [r2, #0]
 810be78:	f107 020c 	add.w	r2, r7, #12
 810be7c:	2101      	movs	r1, #1
 810be7e:	4798      	blx	r3
 810be80:	4603      	mov	r3, r0
 810be82:	2b00      	cmp	r3, #0
 810be84:	da02      	bge.n	810be8c <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 810be86:	f06f 0304 	mvn.w	r3, #4
 810be8a:	e06e      	b.n	810bf6a <LAN8742_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 810be8c:	687b      	ldr	r3, [r7, #4]
 810be8e:	695b      	ldr	r3, [r3, #20]
 810be90:	687a      	ldr	r2, [r7, #4]
 810be92:	6810      	ldr	r0, [r2, #0]
 810be94:	f107 020c 	add.w	r2, r7, #12
 810be98:	2101      	movs	r1, #1
 810be9a:	4798      	blx	r3
 810be9c:	4603      	mov	r3, r0
 810be9e:	2b00      	cmp	r3, #0
 810bea0:	da02      	bge.n	810bea8 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 810bea2:	f06f 0304 	mvn.w	r3, #4
 810bea6:	e060      	b.n	810bf6a <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 810bea8:	68fb      	ldr	r3, [r7, #12]
 810beaa:	f003 0304 	and.w	r3, r3, #4
 810beae:	2b00      	cmp	r3, #0
 810beb0:	d101      	bne.n	810beb6 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;
 810beb2:	2301      	movs	r3, #1
 810beb4:	e059      	b.n	810bf6a <LAN8742_GetLinkState+0x106>
  }

  /* Check Auto negotiation */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 810beb6:	687b      	ldr	r3, [r7, #4]
 810beb8:	695b      	ldr	r3, [r3, #20]
 810beba:	687a      	ldr	r2, [r7, #4]
 810bebc:	6810      	ldr	r0, [r2, #0]
 810bebe:	f107 020c 	add.w	r2, r7, #12
 810bec2:	2100      	movs	r1, #0
 810bec4:	4798      	blx	r3
 810bec6:	4603      	mov	r3, r0
 810bec8:	2b00      	cmp	r3, #0
 810beca:	da02      	bge.n	810bed2 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 810becc:	f06f 0304 	mvn.w	r3, #4
 810bed0:	e04b      	b.n	810bf6a <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 810bed2:	68fb      	ldr	r3, [r7, #12]
 810bed4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 810bed8:	2b00      	cmp	r3, #0
 810beda:	d11b      	bne.n	810bf14 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE))
 810bedc:	68fb      	ldr	r3, [r7, #12]
 810bede:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 810bee2:	2b00      	cmp	r3, #0
 810bee4:	d006      	beq.n	810bef4 <LAN8742_GetLinkState+0x90>
 810bee6:	68fb      	ldr	r3, [r7, #12]
 810bee8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 810beec:	2b00      	cmp	r3, #0
 810beee:	d001      	beq.n	810bef4 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 810bef0:	2302      	movs	r3, #2
 810bef2:	e03a      	b.n	810bf6a <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 810bef4:	68fb      	ldr	r3, [r7, #12]
 810bef6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 810befa:	2b00      	cmp	r3, #0
 810befc:	d001      	beq.n	810bf02 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 810befe:	2303      	movs	r3, #3
 810bf00:	e033      	b.n	810bf6a <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 810bf02:	68fb      	ldr	r3, [r7, #12]
 810bf04:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 810bf08:	2b00      	cmp	r3, #0
 810bf0a:	d001      	beq.n	810bf10 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 810bf0c:	2304      	movs	r3, #4
 810bf0e:	e02c      	b.n	810bf6a <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 810bf10:	2305      	movs	r3, #5
 810bf12:	e02a      	b.n	810bf6a <LAN8742_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 810bf14:	687b      	ldr	r3, [r7, #4]
 810bf16:	695b      	ldr	r3, [r3, #20]
 810bf18:	687a      	ldr	r2, [r7, #4]
 810bf1a:	6810      	ldr	r0, [r2, #0]
 810bf1c:	f107 020c 	add.w	r2, r7, #12
 810bf20:	211f      	movs	r1, #31
 810bf22:	4798      	blx	r3
 810bf24:	4603      	mov	r3, r0
 810bf26:	2b00      	cmp	r3, #0
 810bf28:	da02      	bge.n	810bf30 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 810bf2a:	f06f 0304 	mvn.w	r3, #4
 810bf2e:	e01c      	b.n	810bf6a <LAN8742_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 810bf30:	68fb      	ldr	r3, [r7, #12]
 810bf32:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 810bf36:	2b00      	cmp	r3, #0
 810bf38:	d101      	bne.n	810bf3e <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 810bf3a:	2306      	movs	r3, #6
 810bf3c:	e015      	b.n	810bf6a <LAN8742_GetLinkState+0x106>
    }

    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 810bf3e:	68fb      	ldr	r3, [r7, #12]
 810bf40:	f003 031c 	and.w	r3, r3, #28
 810bf44:	2b18      	cmp	r3, #24
 810bf46:	d101      	bne.n	810bf4c <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 810bf48:	2302      	movs	r3, #2
 810bf4a:	e00e      	b.n	810bf6a <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 810bf4c:	68fb      	ldr	r3, [r7, #12]
 810bf4e:	f003 031c 	and.w	r3, r3, #28
 810bf52:	2b08      	cmp	r3, #8
 810bf54:	d101      	bne.n	810bf5a <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 810bf56:	2303      	movs	r3, #3
 810bf58:	e007      	b.n	810bf6a <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 810bf5a:	68fb      	ldr	r3, [r7, #12]
 810bf5c:	f003 031c 	and.w	r3, r3, #28
 810bf60:	2b14      	cmp	r3, #20
 810bf62:	d101      	bne.n	810bf68 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 810bf64:	2304      	movs	r3, #4
 810bf66:	e000      	b.n	810bf6a <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 810bf68:	2305      	movs	r3, #5
    }
  }
}
 810bf6a:	4618      	mov	r0, r3
 810bf6c:	3710      	adds	r7, #16
 810bf6e:	46bd      	mov	sp, r7
 810bf70:	bd80      	pop	{r7, pc}
	...

0810bf74 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 810bf74:	b480      	push	{r7}
 810bf76:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 810bf78:	4b0b      	ldr	r3, [pc, #44]	@ (810bfa8 <SystemInit+0x34>)
 810bf7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 810bf7e:	4a0a      	ldr	r2, [pc, #40]	@ (810bfa8 <SystemInit+0x34>)
 810bf80:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 810bf84:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 810bf88:	4b07      	ldr	r3, [pc, #28]	@ (810bfa8 <SystemInit+0x34>)
 810bf8a:	691b      	ldr	r3, [r3, #16]
 810bf8c:	4a06      	ldr	r2, [pc, #24]	@ (810bfa8 <SystemInit+0x34>)
 810bf8e:	f043 0310 	orr.w	r3, r3, #16
 810bf92:	6113      	str	r3, [r2, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D2_AXISRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BANK2_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 810bf94:	4b04      	ldr	r3, [pc, #16]	@ (810bfa8 <SystemInit+0x34>)
 810bf96:	f04f 6201 	mov.w	r2, #135266304	@ 0x8100000
 810bf9a:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 810bf9c:	bf00      	nop
 810bf9e:	46bd      	mov	sp, r7
 810bfa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 810bfa4:	4770      	bx	lr
 810bfa6:	bf00      	nop
 810bfa8:	e000ed00 	.word	0xe000ed00

0810bfac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 810bfac:	b580      	push	{r7, lr}
 810bfae:	b082      	sub	sp, #8
 810bfb0:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 810bfb2:	4b28      	ldr	r3, [pc, #160]	@ (810c054 <HAL_Init+0xa8>)
 810bfb4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 810bfb8:	4a26      	ldr	r2, [pc, #152]	@ (810c054 <HAL_Init+0xa8>)
 810bfba:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 810bfbe:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 810bfc2:	4b24      	ldr	r3, [pc, #144]	@ (810c054 <HAL_Init+0xa8>)
 810bfc4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 810bfc8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 810bfcc:	603b      	str	r3, [r7, #0]
 810bfce:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 810bfd0:	4b21      	ldr	r3, [pc, #132]	@ (810c058 <HAL_Init+0xac>)
 810bfd2:	681b      	ldr	r3, [r3, #0]
 810bfd4:	f423 237f 	bic.w	r3, r3, #1044480	@ 0xff000
 810bfd8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 810bfdc:	4a1e      	ldr	r2, [pc, #120]	@ (810c058 <HAL_Init+0xac>)
 810bfde:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 810bfe2:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 810bfe4:	4b1c      	ldr	r3, [pc, #112]	@ (810c058 <HAL_Init+0xac>)
 810bfe6:	681b      	ldr	r3, [r3, #0]
 810bfe8:	4a1b      	ldr	r2, [pc, #108]	@ (810c058 <HAL_Init+0xac>)
 810bfea:	f043 0301 	orr.w	r3, r3, #1
 810bfee:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 810bff0:	2003      	movs	r0, #3
 810bff2:	f000 f91a 	bl	810c22a <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 810bff6:	f002 ff79 	bl	810eeec <HAL_RCC_GetSysClockFreq>
 810bffa:	4602      	mov	r2, r0
 810bffc:	4b15      	ldr	r3, [pc, #84]	@ (810c054 <HAL_Init+0xa8>)
 810bffe:	699b      	ldr	r3, [r3, #24]
 810c000:	0a1b      	lsrs	r3, r3, #8
 810c002:	f003 030f 	and.w	r3, r3, #15
 810c006:	4915      	ldr	r1, [pc, #84]	@ (810c05c <HAL_Init+0xb0>)
 810c008:	5ccb      	ldrb	r3, [r1, r3]
 810c00a:	f003 031f 	and.w	r3, r3, #31
 810c00e:	fa22 f303 	lsr.w	r3, r2, r3
 810c012:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 810c014:	4b0f      	ldr	r3, [pc, #60]	@ (810c054 <HAL_Init+0xa8>)
 810c016:	699b      	ldr	r3, [r3, #24]
 810c018:	f003 030f 	and.w	r3, r3, #15
 810c01c:	4a0f      	ldr	r2, [pc, #60]	@ (810c05c <HAL_Init+0xb0>)
 810c01e:	5cd3      	ldrb	r3, [r2, r3]
 810c020:	f003 031f 	and.w	r3, r3, #31
 810c024:	687a      	ldr	r2, [r7, #4]
 810c026:	fa22 f303 	lsr.w	r3, r2, r3
 810c02a:	4a0d      	ldr	r2, [pc, #52]	@ (810c060 <HAL_Init+0xb4>)
 810c02c:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 810c02e:	4b0c      	ldr	r3, [pc, #48]	@ (810c060 <HAL_Init+0xb4>)
 810c030:	681b      	ldr	r3, [r3, #0]
 810c032:	4a0c      	ldr	r2, [pc, #48]	@ (810c064 <HAL_Init+0xb8>)
 810c034:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 810c036:	2000      	movs	r0, #0
 810c038:	f7f7 f846 	bl	81030c8 <HAL_InitTick>
 810c03c:	4603      	mov	r3, r0
 810c03e:	2b00      	cmp	r3, #0
 810c040:	d001      	beq.n	810c046 <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 810c042:	2301      	movs	r3, #1
 810c044:	e002      	b.n	810c04c <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 810c046:	f7f6 ff1f 	bl	8102e88 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 810c04a:	2300      	movs	r3, #0
}
 810c04c:	4618      	mov	r0, r3
 810c04e:	3708      	adds	r7, #8
 810c050:	46bd      	mov	sp, r7
 810c052:	bd80      	pop	{r7, pc}
 810c054:	58024400 	.word	0x58024400
 810c058:	40024400 	.word	0x40024400
 810c05c:	081283ec 	.word	0x081283ec
 810c060:	10000018 	.word	0x10000018
 810c064:	10000014 	.word	0x10000014

0810c068 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 810c068:	b480      	push	{r7}
 810c06a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 810c06c:	4b06      	ldr	r3, [pc, #24]	@ (810c088 <HAL_IncTick+0x20>)
 810c06e:	781b      	ldrb	r3, [r3, #0]
 810c070:	461a      	mov	r2, r3
 810c072:	4b06      	ldr	r3, [pc, #24]	@ (810c08c <HAL_IncTick+0x24>)
 810c074:	681b      	ldr	r3, [r3, #0]
 810c076:	4413      	add	r3, r2
 810c078:	4a04      	ldr	r2, [pc, #16]	@ (810c08c <HAL_IncTick+0x24>)
 810c07a:	6013      	str	r3, [r2, #0]
}
 810c07c:	bf00      	nop
 810c07e:	46bd      	mov	sp, r7
 810c080:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c084:	4770      	bx	lr
 810c086:	bf00      	nop
 810c088:	10000020 	.word	0x10000020
 810c08c:	10000420 	.word	0x10000420

0810c090 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 810c090:	b480      	push	{r7}
 810c092:	af00      	add	r7, sp, #0
  return uwTick;
 810c094:	4b03      	ldr	r3, [pc, #12]	@ (810c0a4 <HAL_GetTick+0x14>)
 810c096:	681b      	ldr	r3, [r3, #0]
}
 810c098:	4618      	mov	r0, r3
 810c09a:	46bd      	mov	sp, r7
 810c09c:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c0a0:	4770      	bx	lr
 810c0a2:	bf00      	nop
 810c0a4:	10000420 	.word	0x10000420

0810c0a8 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 810c0a8:	b480      	push	{r7}
 810c0aa:	b083      	sub	sp, #12
 810c0ac:	af00      	add	r7, sp, #0
 810c0ae:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 810c0b0:	4b06      	ldr	r3, [pc, #24]	@ (810c0cc <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 810c0b2:	685b      	ldr	r3, [r3, #4]
 810c0b4:	f423 0260 	bic.w	r2, r3, #14680064	@ 0xe00000
 810c0b8:	4904      	ldr	r1, [pc, #16]	@ (810c0cc <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 810c0ba:	687b      	ldr	r3, [r7, #4]
 810c0bc:	4313      	orrs	r3, r2
 810c0be:	604b      	str	r3, [r1, #4]
}
 810c0c0:	bf00      	nop
 810c0c2:	370c      	adds	r7, #12
 810c0c4:	46bd      	mov	sp, r7
 810c0c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c0ca:	4770      	bx	lr
 810c0cc:	58000400 	.word	0x58000400

0810c0d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 810c0d0:	b480      	push	{r7}
 810c0d2:	b085      	sub	sp, #20
 810c0d4:	af00      	add	r7, sp, #0
 810c0d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 810c0d8:	687b      	ldr	r3, [r7, #4]
 810c0da:	f003 0307 	and.w	r3, r3, #7
 810c0de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 810c0e0:	4b0c      	ldr	r3, [pc, #48]	@ (810c114 <__NVIC_SetPriorityGrouping+0x44>)
 810c0e2:	68db      	ldr	r3, [r3, #12]
 810c0e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 810c0e6:	68ba      	ldr	r2, [r7, #8]
 810c0e8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 810c0ec:	4013      	ands	r3, r2
 810c0ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 810c0f0:	68fb      	ldr	r3, [r7, #12]
 810c0f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 810c0f4:	68bb      	ldr	r3, [r7, #8]
 810c0f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 810c0f8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 810c0fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 810c100:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 810c102:	4a04      	ldr	r2, [pc, #16]	@ (810c114 <__NVIC_SetPriorityGrouping+0x44>)
 810c104:	68bb      	ldr	r3, [r7, #8]
 810c106:	60d3      	str	r3, [r2, #12]
}
 810c108:	bf00      	nop
 810c10a:	3714      	adds	r7, #20
 810c10c:	46bd      	mov	sp, r7
 810c10e:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c112:	4770      	bx	lr
 810c114:	e000ed00 	.word	0xe000ed00

0810c118 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 810c118:	b480      	push	{r7}
 810c11a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 810c11c:	4b04      	ldr	r3, [pc, #16]	@ (810c130 <__NVIC_GetPriorityGrouping+0x18>)
 810c11e:	68db      	ldr	r3, [r3, #12]
 810c120:	0a1b      	lsrs	r3, r3, #8
 810c122:	f003 0307 	and.w	r3, r3, #7
}
 810c126:	4618      	mov	r0, r3
 810c128:	46bd      	mov	sp, r7
 810c12a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c12e:	4770      	bx	lr
 810c130:	e000ed00 	.word	0xe000ed00

0810c134 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 810c134:	b480      	push	{r7}
 810c136:	b083      	sub	sp, #12
 810c138:	af00      	add	r7, sp, #0
 810c13a:	4603      	mov	r3, r0
 810c13c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 810c13e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 810c142:	2b00      	cmp	r3, #0
 810c144:	db0b      	blt.n	810c15e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 810c146:	88fb      	ldrh	r3, [r7, #6]
 810c148:	f003 021f 	and.w	r2, r3, #31
 810c14c:	4907      	ldr	r1, [pc, #28]	@ (810c16c <__NVIC_EnableIRQ+0x38>)
 810c14e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 810c152:	095b      	lsrs	r3, r3, #5
 810c154:	2001      	movs	r0, #1
 810c156:	fa00 f202 	lsl.w	r2, r0, r2
 810c15a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 810c15e:	bf00      	nop
 810c160:	370c      	adds	r7, #12
 810c162:	46bd      	mov	sp, r7
 810c164:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c168:	4770      	bx	lr
 810c16a:	bf00      	nop
 810c16c:	e000e100 	.word	0xe000e100

0810c170 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 810c170:	b480      	push	{r7}
 810c172:	b083      	sub	sp, #12
 810c174:	af00      	add	r7, sp, #0
 810c176:	4603      	mov	r3, r0
 810c178:	6039      	str	r1, [r7, #0]
 810c17a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 810c17c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 810c180:	2b00      	cmp	r3, #0
 810c182:	db0a      	blt.n	810c19a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 810c184:	683b      	ldr	r3, [r7, #0]
 810c186:	b2da      	uxtb	r2, r3
 810c188:	490c      	ldr	r1, [pc, #48]	@ (810c1bc <__NVIC_SetPriority+0x4c>)
 810c18a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 810c18e:	0112      	lsls	r2, r2, #4
 810c190:	b2d2      	uxtb	r2, r2
 810c192:	440b      	add	r3, r1
 810c194:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 810c198:	e00a      	b.n	810c1b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 810c19a:	683b      	ldr	r3, [r7, #0]
 810c19c:	b2da      	uxtb	r2, r3
 810c19e:	4908      	ldr	r1, [pc, #32]	@ (810c1c0 <__NVIC_SetPriority+0x50>)
 810c1a0:	88fb      	ldrh	r3, [r7, #6]
 810c1a2:	f003 030f 	and.w	r3, r3, #15
 810c1a6:	3b04      	subs	r3, #4
 810c1a8:	0112      	lsls	r2, r2, #4
 810c1aa:	b2d2      	uxtb	r2, r2
 810c1ac:	440b      	add	r3, r1
 810c1ae:	761a      	strb	r2, [r3, #24]
}
 810c1b0:	bf00      	nop
 810c1b2:	370c      	adds	r7, #12
 810c1b4:	46bd      	mov	sp, r7
 810c1b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c1ba:	4770      	bx	lr
 810c1bc:	e000e100 	.word	0xe000e100
 810c1c0:	e000ed00 	.word	0xe000ed00

0810c1c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 810c1c4:	b480      	push	{r7}
 810c1c6:	b089      	sub	sp, #36	@ 0x24
 810c1c8:	af00      	add	r7, sp, #0
 810c1ca:	60f8      	str	r0, [r7, #12]
 810c1cc:	60b9      	str	r1, [r7, #8]
 810c1ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 810c1d0:	68fb      	ldr	r3, [r7, #12]
 810c1d2:	f003 0307 	and.w	r3, r3, #7
 810c1d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 810c1d8:	69fb      	ldr	r3, [r7, #28]
 810c1da:	f1c3 0307 	rsb	r3, r3, #7
 810c1de:	2b04      	cmp	r3, #4
 810c1e0:	bf28      	it	cs
 810c1e2:	2304      	movcs	r3, #4
 810c1e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 810c1e6:	69fb      	ldr	r3, [r7, #28]
 810c1e8:	3304      	adds	r3, #4
 810c1ea:	2b06      	cmp	r3, #6
 810c1ec:	d902      	bls.n	810c1f4 <NVIC_EncodePriority+0x30>
 810c1ee:	69fb      	ldr	r3, [r7, #28]
 810c1f0:	3b03      	subs	r3, #3
 810c1f2:	e000      	b.n	810c1f6 <NVIC_EncodePriority+0x32>
 810c1f4:	2300      	movs	r3, #0
 810c1f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 810c1f8:	f04f 32ff 	mov.w	r2, #4294967295
 810c1fc:	69bb      	ldr	r3, [r7, #24]
 810c1fe:	fa02 f303 	lsl.w	r3, r2, r3
 810c202:	43da      	mvns	r2, r3
 810c204:	68bb      	ldr	r3, [r7, #8]
 810c206:	401a      	ands	r2, r3
 810c208:	697b      	ldr	r3, [r7, #20]
 810c20a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 810c20c:	f04f 31ff 	mov.w	r1, #4294967295
 810c210:	697b      	ldr	r3, [r7, #20]
 810c212:	fa01 f303 	lsl.w	r3, r1, r3
 810c216:	43d9      	mvns	r1, r3
 810c218:	687b      	ldr	r3, [r7, #4]
 810c21a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 810c21c:	4313      	orrs	r3, r2
         );
}
 810c21e:	4618      	mov	r0, r3
 810c220:	3724      	adds	r7, #36	@ 0x24
 810c222:	46bd      	mov	sp, r7
 810c224:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c228:	4770      	bx	lr

0810c22a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 810c22a:	b580      	push	{r7, lr}
 810c22c:	b082      	sub	sp, #8
 810c22e:	af00      	add	r7, sp, #0
 810c230:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 810c232:	6878      	ldr	r0, [r7, #4]
 810c234:	f7ff ff4c 	bl	810c0d0 <__NVIC_SetPriorityGrouping>
}
 810c238:	bf00      	nop
 810c23a:	3708      	adds	r7, #8
 810c23c:	46bd      	mov	sp, r7
 810c23e:	bd80      	pop	{r7, pc}

0810c240 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 810c240:	b580      	push	{r7, lr}
 810c242:	b086      	sub	sp, #24
 810c244:	af00      	add	r7, sp, #0
 810c246:	4603      	mov	r3, r0
 810c248:	60b9      	str	r1, [r7, #8]
 810c24a:	607a      	str	r2, [r7, #4]
 810c24c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 810c24e:	f7ff ff63 	bl	810c118 <__NVIC_GetPriorityGrouping>
 810c252:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 810c254:	687a      	ldr	r2, [r7, #4]
 810c256:	68b9      	ldr	r1, [r7, #8]
 810c258:	6978      	ldr	r0, [r7, #20]
 810c25a:	f7ff ffb3 	bl	810c1c4 <NVIC_EncodePriority>
 810c25e:	4602      	mov	r2, r0
 810c260:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 810c264:	4611      	mov	r1, r2
 810c266:	4618      	mov	r0, r3
 810c268:	f7ff ff82 	bl	810c170 <__NVIC_SetPriority>
}
 810c26c:	bf00      	nop
 810c26e:	3718      	adds	r7, #24
 810c270:	46bd      	mov	sp, r7
 810c272:	bd80      	pop	{r7, pc}

0810c274 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 810c274:	b580      	push	{r7, lr}
 810c276:	b082      	sub	sp, #8
 810c278:	af00      	add	r7, sp, #0
 810c27a:	4603      	mov	r3, r0
 810c27c:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 810c27e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 810c282:	4618      	mov	r0, r3
 810c284:	f7ff ff56 	bl	810c134 <__NVIC_EnableIRQ>
}
 810c288:	bf00      	nop
 810c28a:	3708      	adds	r7, #8
 810c28c:	46bd      	mov	sp, r7
 810c28e:	bd80      	pop	{r7, pc}

0810c290 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 810c290:	b480      	push	{r7}
 810c292:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 810c294:	4b07      	ldr	r3, [pc, #28]	@ (810c2b4 <HAL_GetCurrentCPUID+0x24>)
 810c296:	681b      	ldr	r3, [r3, #0]
 810c298:	091b      	lsrs	r3, r3, #4
 810c29a:	f003 030f 	and.w	r3, r3, #15
 810c29e:	2b07      	cmp	r3, #7
 810c2a0:	d101      	bne.n	810c2a6 <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 810c2a2:	2303      	movs	r3, #3
 810c2a4:	e000      	b.n	810c2a8 <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 810c2a6:	2301      	movs	r3, #1
  }
}
 810c2a8:	4618      	mov	r0, r3
 810c2aa:	46bd      	mov	sp, r7
 810c2ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c2b0:	4770      	bx	lr
 810c2b2:	bf00      	nop
 810c2b4:	e000ed00 	.word	0xe000ed00

0810c2b8 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 810c2b8:	b580      	push	{r7, lr}
 810c2ba:	b084      	sub	sp, #16
 810c2bc:	af00      	add	r7, sp, #0
 810c2be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 810c2c0:	687b      	ldr	r3, [r7, #4]
 810c2c2:	2b00      	cmp	r3, #0
 810c2c4:	d101      	bne.n	810c2ca <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 810c2c6:	2301      	movs	r3, #1
 810c2c8:	e0e7      	b.n	810c49a <HAL_ETH_Init+0x1e2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 810c2ca:	687b      	ldr	r3, [r7, #4]
 810c2cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 810c2d0:	2b00      	cmp	r3, #0
 810c2d2:	d106      	bne.n	810c2e2 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 810c2d4:	687b      	ldr	r3, [r7, #4]
 810c2d6:	2223      	movs	r2, #35	@ 0x23
 810c2d8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 810c2dc:	6878      	ldr	r0, [r7, #4]
 810c2de:	f7fc ffd1 	bl	8109284 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 810c2e2:	4b70      	ldr	r3, [pc, #448]	@ (810c4a4 <HAL_ETH_Init+0x1ec>)
 810c2e4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 810c2e8:	4a6e      	ldr	r2, [pc, #440]	@ (810c4a4 <HAL_ETH_Init+0x1ec>)
 810c2ea:	f043 0302 	orr.w	r3, r3, #2
 810c2ee:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 810c2f2:	4b6c      	ldr	r3, [pc, #432]	@ (810c4a4 <HAL_ETH_Init+0x1ec>)
 810c2f4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 810c2f8:	f003 0302 	and.w	r3, r3, #2
 810c2fc:	60bb      	str	r3, [r7, #8]
 810c2fe:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 810c300:	687b      	ldr	r3, [r7, #4]
 810c302:	7a1b      	ldrb	r3, [r3, #8]
 810c304:	2b00      	cmp	r3, #0
 810c306:	d103      	bne.n	810c310 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 810c308:	2000      	movs	r0, #0
 810c30a:	f7ff fecd 	bl	810c0a8 <HAL_SYSCFG_ETHInterfaceSelect>
 810c30e:	e003      	b.n	810c318 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 810c310:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 810c314:	f7ff fec8 	bl	810c0a8 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 810c318:	4b63      	ldr	r3, [pc, #396]	@ (810c4a8 <HAL_ETH_Init+0x1f0>)
 810c31a:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 810c31c:	687b      	ldr	r3, [r7, #4]
 810c31e:	681b      	ldr	r3, [r3, #0]
 810c320:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 810c324:	681b      	ldr	r3, [r3, #0]
 810c326:	687a      	ldr	r2, [r7, #4]
 810c328:	6812      	ldr	r2, [r2, #0]
 810c32a:	f043 0301 	orr.w	r3, r3, #1
 810c32e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 810c332:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 810c334:	f7ff feac 	bl	810c090 <HAL_GetTick>
 810c338:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 810c33a:	e011      	b.n	810c360 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 810c33c:	f7ff fea8 	bl	810c090 <HAL_GetTick>
 810c340:	4602      	mov	r2, r0
 810c342:	68fb      	ldr	r3, [r7, #12]
 810c344:	1ad3      	subs	r3, r2, r3
 810c346:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 810c34a:	d909      	bls.n	810c360 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 810c34c:	687b      	ldr	r3, [r7, #4]
 810c34e:	2204      	movs	r2, #4
 810c350:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 810c354:	687b      	ldr	r3, [r7, #4]
 810c356:	22e0      	movs	r2, #224	@ 0xe0
 810c358:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 810c35c:	2301      	movs	r3, #1
 810c35e:	e09c      	b.n	810c49a <HAL_ETH_Init+0x1e2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 810c360:	687b      	ldr	r3, [r7, #4]
 810c362:	681b      	ldr	r3, [r3, #0]
 810c364:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 810c368:	681b      	ldr	r3, [r3, #0]
 810c36a:	f003 0301 	and.w	r3, r3, #1
 810c36e:	2b00      	cmp	r3, #0
 810c370:	d1e4      	bne.n	810c33c <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 810c372:	6878      	ldr	r0, [r7, #4]
 810c374:	f000 ff34 	bl	810d1e0 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 810c378:	f002 ff32 	bl	810f1e0 <HAL_RCC_GetHCLKFreq>
 810c37c:	4603      	mov	r3, r0
 810c37e:	4a4b      	ldr	r2, [pc, #300]	@ (810c4ac <HAL_ETH_Init+0x1f4>)
 810c380:	fba2 2303 	umull	r2, r3, r2, r3
 810c384:	0c9a      	lsrs	r2, r3, #18
 810c386:	687b      	ldr	r3, [r7, #4]
 810c388:	681b      	ldr	r3, [r3, #0]
 810c38a:	3a01      	subs	r2, #1
 810c38c:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 810c390:	6878      	ldr	r0, [r7, #4]
 810c392:	f001 f931 	bl	810d5f8 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 810c396:	687b      	ldr	r3, [r7, #4]
 810c398:	681b      	ldr	r3, [r3, #0]
 810c39a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 810c39e:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 810c3a2:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
 810c3a6:	687a      	ldr	r2, [r7, #4]
 810c3a8:	6812      	ldr	r2, [r2, #0]
 810c3aa:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 810c3ae:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 810c3b2:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 810c3b6:	687b      	ldr	r3, [r7, #4]
 810c3b8:	695b      	ldr	r3, [r3, #20]
 810c3ba:	f003 0303 	and.w	r3, r3, #3
 810c3be:	2b00      	cmp	r3, #0
 810c3c0:	d009      	beq.n	810c3d6 <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 810c3c2:	687b      	ldr	r3, [r7, #4]
 810c3c4:	2201      	movs	r2, #1
 810c3c6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 810c3ca:	687b      	ldr	r3, [r7, #4]
 810c3cc:	22e0      	movs	r2, #224	@ 0xe0
 810c3ce:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Return Error */
    return HAL_ERROR;
 810c3d2:	2301      	movs	r3, #1
 810c3d4:	e061      	b.n	810c49a <HAL_ETH_Init+0x1e2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 810c3d6:	687b      	ldr	r3, [r7, #4]
 810c3d8:	681b      	ldr	r3, [r3, #0]
 810c3da:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 810c3de:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 810c3e2:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 810c3e6:	f023 037e 	bic.w	r3, r3, #126	@ 0x7e
 810c3ea:	687a      	ldr	r2, [r7, #4]
 810c3ec:	6952      	ldr	r2, [r2, #20]
 810c3ee:	0051      	lsls	r1, r2, #1
 810c3f0:	687a      	ldr	r2, [r7, #4]
 810c3f2:	6812      	ldr	r2, [r2, #0]
 810c3f4:	430b      	orrs	r3, r1
 810c3f6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 810c3fa:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 810c3fe:	6878      	ldr	r0, [r7, #4]
 810c400:	f001 f997 	bl	810d732 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 810c404:	6878      	ldr	r0, [r7, #4]
 810c406:	f001 f9dd 	bl	810d7c4 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 810c40a:	687b      	ldr	r3, [r7, #4]
 810c40c:	685b      	ldr	r3, [r3, #4]
 810c40e:	3305      	adds	r3, #5
 810c410:	781b      	ldrb	r3, [r3, #0]
 810c412:	021a      	lsls	r2, r3, #8
 810c414:	687b      	ldr	r3, [r7, #4]
 810c416:	685b      	ldr	r3, [r3, #4]
 810c418:	3304      	adds	r3, #4
 810c41a:	781b      	ldrb	r3, [r3, #0]
 810c41c:	4619      	mov	r1, r3
 810c41e:	687b      	ldr	r3, [r7, #4]
 810c420:	681b      	ldr	r3, [r3, #0]
 810c422:	430a      	orrs	r2, r1
 810c424:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 810c428:	687b      	ldr	r3, [r7, #4]
 810c42a:	685b      	ldr	r3, [r3, #4]
 810c42c:	3303      	adds	r3, #3
 810c42e:	781b      	ldrb	r3, [r3, #0]
 810c430:	061a      	lsls	r2, r3, #24
 810c432:	687b      	ldr	r3, [r7, #4]
 810c434:	685b      	ldr	r3, [r3, #4]
 810c436:	3302      	adds	r3, #2
 810c438:	781b      	ldrb	r3, [r3, #0]
 810c43a:	041b      	lsls	r3, r3, #16
 810c43c:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 810c43e:	687b      	ldr	r3, [r7, #4]
 810c440:	685b      	ldr	r3, [r3, #4]
 810c442:	3301      	adds	r3, #1
 810c444:	781b      	ldrb	r3, [r3, #0]
 810c446:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 810c448:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 810c44a:	687b      	ldr	r3, [r7, #4]
 810c44c:	685b      	ldr	r3, [r3, #4]
 810c44e:	781b      	ldrb	r3, [r3, #0]
 810c450:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 810c452:	687b      	ldr	r3, [r7, #4]
 810c454:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 810c456:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 810c458:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 810c45c:	687b      	ldr	r3, [r7, #4]
 810c45e:	681b      	ldr	r3, [r3, #0]
 810c460:	f8d3 170c 	ldr.w	r1, [r3, #1804]	@ 0x70c
 810c464:	687b      	ldr	r3, [r7, #4]
 810c466:	681a      	ldr	r2, [r3, #0]
 810c468:	4b11      	ldr	r3, [pc, #68]	@ (810c4b0 <HAL_ETH_Init+0x1f8>)
 810c46a:	430b      	orrs	r3, r1
 810c46c:	f8c2 370c 	str.w	r3, [r2, #1804]	@ 0x70c
          ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 810c470:	687b      	ldr	r3, [r7, #4]
 810c472:	681b      	ldr	r3, [r3, #0]
 810c474:	f8d3 3710 	ldr.w	r3, [r3, #1808]	@ 0x710
 810c478:	687a      	ldr	r2, [r7, #4]
 810c47a:	6812      	ldr	r2, [r2, #0]
 810c47c:	f043 6342 	orr.w	r3, r3, #203423744	@ 0xc200000
 810c480:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 810c484:	f8c2 3710 	str.w	r3, [r2, #1808]	@ 0x710
          ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 810c488:	687b      	ldr	r3, [r7, #4]
 810c48a:	2200      	movs	r2, #0
 810c48c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 810c490:	687b      	ldr	r3, [r7, #4]
 810c492:	2210      	movs	r2, #16
 810c494:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 810c498:	2300      	movs	r3, #0
}
 810c49a:	4618      	mov	r0, r3
 810c49c:	3710      	adds	r7, #16
 810c49e:	46bd      	mov	sp, r7
 810c4a0:	bd80      	pop	{r7, pc}
 810c4a2:	bf00      	nop
 810c4a4:	58024400 	.word	0x58024400
 810c4a8:	58000400 	.word	0x58000400
 810c4ac:	431bde83 	.word	0x431bde83
 810c4b0:	0c020060 	.word	0x0c020060

0810c4b4 <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 810c4b4:	b580      	push	{r7, lr}
 810c4b6:	b082      	sub	sp, #8
 810c4b8:	af00      	add	r7, sp, #0
 810c4ba:	6078      	str	r0, [r7, #4]
  if (heth->gState == HAL_ETH_STATE_READY)
 810c4bc:	687b      	ldr	r3, [r7, #4]
 810c4be:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 810c4c2:	2b10      	cmp	r3, #16
 810c4c4:	d166      	bne.n	810c594 <HAL_ETH_Start_IT+0xe0>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 810c4c6:	687b      	ldr	r3, [r7, #4]
 810c4c8:	2223      	movs	r2, #35	@ 0x23
 810c4ca:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 810c4ce:	687b      	ldr	r3, [r7, #4]
 810c4d0:	2201      	movs	r2, #1
 810c4d2:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 810c4d4:	687b      	ldr	r3, [r7, #4]
 810c4d6:	2204      	movs	r2, #4
 810c4d8:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 810c4da:	6878      	ldr	r0, [r7, #4]
 810c4dc:	f000 f9e5 	bl	810c8aa <ETH_UpdateDescriptor>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 810c4e0:	687b      	ldr	r3, [r7, #4]
 810c4e2:	681b      	ldr	r3, [r3, #0]
 810c4e4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 810c4e8:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 810c4ec:	687a      	ldr	r2, [r7, #4]
 810c4ee:	6812      	ldr	r2, [r2, #0]
 810c4f0:	f043 0301 	orr.w	r3, r3, #1
 810c4f4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 810c4f8:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 810c4fc:	687b      	ldr	r3, [r7, #4]
 810c4fe:	681b      	ldr	r3, [r3, #0]
 810c500:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 810c504:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 810c508:	687a      	ldr	r2, [r7, #4]
 810c50a:	6812      	ldr	r2, [r2, #0]
 810c50c:	f043 0301 	orr.w	r3, r3, #1
 810c510:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 810c514:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108

    /* Clear Tx and Rx process stopped flags */
    heth->Instance->DMACSR |= (ETH_DMACSR_TPS | ETH_DMACSR_RPS);
 810c518:	687b      	ldr	r3, [r7, #4]
 810c51a:	681b      	ldr	r3, [r3, #0]
 810c51c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 810c520:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 810c524:	687a      	ldr	r2, [r7, #4]
 810c526:	6812      	ldr	r2, [r2, #0]
 810c528:	f443 7381 	orr.w	r3, r3, #258	@ 0x102
 810c52c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 810c530:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 810c534:	687b      	ldr	r3, [r7, #4]
 810c536:	681b      	ldr	r3, [r3, #0]
 810c538:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 810c53c:	687b      	ldr	r3, [r7, #4]
 810c53e:	681b      	ldr	r3, [r3, #0]
 810c540:	f042 0201 	orr.w	r2, r2, #1
 810c544:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 810c548:	687b      	ldr	r3, [r7, #4]
 810c54a:	681b      	ldr	r3, [r3, #0]
 810c54c:	681a      	ldr	r2, [r3, #0]
 810c54e:	687b      	ldr	r3, [r7, #4]
 810c550:	681b      	ldr	r3, [r3, #0]
 810c552:	f042 0202 	orr.w	r2, r2, #2
 810c556:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 810c558:	687b      	ldr	r3, [r7, #4]
 810c55a:	681b      	ldr	r3, [r3, #0]
 810c55c:	681a      	ldr	r2, [r3, #0]
 810c55e:	687b      	ldr	r3, [r7, #4]
 810c560:	681b      	ldr	r3, [r3, #0]
 810c562:	f042 0201 	orr.w	r2, r2, #1
 810c566:	601a      	str	r2, [r3, #0]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 810c568:	687b      	ldr	r3, [r7, #4]
 810c56a:	681b      	ldr	r3, [r3, #0]
 810c56c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 810c570:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 810c574:	687a      	ldr	r2, [r7, #4]
 810c576:	6812      	ldr	r2, [r2, #0]
 810c578:	f443 4350 	orr.w	r3, r3, #53248	@ 0xd000
 810c57c:	f043 03c1 	orr.w	r3, r3, #193	@ 0xc1
 810c580:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 810c584:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
                                   ETH_DMACIER_FBEE | ETH_DMACIER_AIE | ETH_DMACIER_RBUE));

    heth->gState = HAL_ETH_STATE_STARTED;
 810c588:	687b      	ldr	r3, [r7, #4]
 810c58a:	2223      	movs	r2, #35	@ 0x23
 810c58c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    return HAL_OK;
 810c590:	2300      	movs	r3, #0
 810c592:	e000      	b.n	810c596 <HAL_ETH_Start_IT+0xe2>
  }
  else
  {
    return HAL_ERROR;
 810c594:	2301      	movs	r3, #1
  }
}
 810c596:	4618      	mov	r0, r3
 810c598:	3708      	adds	r7, #8
 810c59a:	46bd      	mov	sp, r7
 810c59c:	bd80      	pop	{r7, pc}

0810c59e <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 810c59e:	b480      	push	{r7}
 810c5a0:	b085      	sub	sp, #20
 810c5a2:	af00      	add	r7, sp, #0
 810c5a4:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 810c5a6:	687b      	ldr	r3, [r7, #4]
 810c5a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 810c5ac:	2b23      	cmp	r3, #35	@ 0x23
 810c5ae:	d167      	bne.n	810c680 <HAL_ETH_Stop_IT+0xe2>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 810c5b0:	687b      	ldr	r3, [r7, #4]
 810c5b2:	2223      	movs	r2, #35	@ 0x23
 810c5b4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Disable interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 810c5b8:	687b      	ldr	r3, [r7, #4]
 810c5ba:	681b      	ldr	r3, [r3, #0]
 810c5bc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 810c5c0:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 810c5c4:	687a      	ldr	r2, [r7, #4]
 810c5c6:	6812      	ldr	r2, [r2, #0]
 810c5c8:	f423 4350 	bic.w	r3, r3, #53248	@ 0xd000
 810c5cc:	f023 03c1 	bic.w	r3, r3, #193	@ 0xc1
 810c5d0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 810c5d4:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
                                    ETH_DMACIER_FBEE | ETH_DMACIER_AIE | ETH_DMACIER_RBUE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 810c5d8:	687b      	ldr	r3, [r7, #4]
 810c5da:	681b      	ldr	r3, [r3, #0]
 810c5dc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 810c5e0:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 810c5e4:	687a      	ldr	r2, [r7, #4]
 810c5e6:	6812      	ldr	r2, [r2, #0]
 810c5e8:	f023 0301 	bic.w	r3, r3, #1
 810c5ec:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 810c5f0:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 810c5f4:	687b      	ldr	r3, [r7, #4]
 810c5f6:	681b      	ldr	r3, [r3, #0]
 810c5f8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 810c5fc:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 810c600:	687a      	ldr	r2, [r7, #4]
 810c602:	6812      	ldr	r2, [r2, #0]
 810c604:	f023 0301 	bic.w	r3, r3, #1
 810c608:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 810c60c:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 810c610:	687b      	ldr	r3, [r7, #4]
 810c612:	681b      	ldr	r3, [r3, #0]
 810c614:	681a      	ldr	r2, [r3, #0]
 810c616:	687b      	ldr	r3, [r7, #4]
 810c618:	681b      	ldr	r3, [r3, #0]
 810c61a:	f022 0201 	bic.w	r2, r2, #1
 810c61e:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 810c620:	687b      	ldr	r3, [r7, #4]
 810c622:	681b      	ldr	r3, [r3, #0]
 810c624:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 810c628:	687b      	ldr	r3, [r7, #4]
 810c62a:	681b      	ldr	r3, [r3, #0]
 810c62c:	f042 0201 	orr.w	r2, r2, #1
 810c630:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 810c634:	687b      	ldr	r3, [r7, #4]
 810c636:	681b      	ldr	r3, [r3, #0]
 810c638:	681a      	ldr	r2, [r3, #0]
 810c63a:	687b      	ldr	r3, [r7, #4]
 810c63c:	681b      	ldr	r3, [r3, #0]
 810c63e:	f022 0202 	bic.w	r2, r2, #2
 810c642:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 810c644:	2300      	movs	r3, #0
 810c646:	60fb      	str	r3, [r7, #12]
 810c648:	e00e      	b.n	810c668 <HAL_ETH_Stop_IT+0xca>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 810c64a:	687b      	ldr	r3, [r7, #4]
 810c64c:	68fa      	ldr	r2, [r7, #12]
 810c64e:	3212      	adds	r2, #18
 810c650:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 810c654:	60bb      	str	r3, [r7, #8]
      CLEAR_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 810c656:	68bb      	ldr	r3, [r7, #8]
 810c658:	68db      	ldr	r3, [r3, #12]
 810c65a:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 810c65e:	68bb      	ldr	r3, [r7, #8]
 810c660:	60da      	str	r2, [r3, #12]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 810c662:	68fb      	ldr	r3, [r7, #12]
 810c664:	3301      	adds	r3, #1
 810c666:	60fb      	str	r3, [r7, #12]
 810c668:	68fb      	ldr	r3, [r7, #12]
 810c66a:	2b03      	cmp	r3, #3
 810c66c:	d9ed      	bls.n	810c64a <HAL_ETH_Stop_IT+0xac>
    }

    heth->RxDescList.ItMode = 0U;
 810c66e:	687b      	ldr	r3, [r7, #4]
 810c670:	2200      	movs	r2, #0
 810c672:	659a      	str	r2, [r3, #88]	@ 0x58

    heth->gState = HAL_ETH_STATE_READY;
 810c674:	687b      	ldr	r3, [r7, #4]
 810c676:	2210      	movs	r2, #16
 810c678:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Return function status */
    return HAL_OK;
 810c67c:	2300      	movs	r3, #0
 810c67e:	e000      	b.n	810c682 <HAL_ETH_Stop_IT+0xe4>
  }
  else
  {
    return HAL_ERROR;
 810c680:	2301      	movs	r3, #1
  }
}
 810c682:	4618      	mov	r0, r3
 810c684:	3714      	adds	r7, #20
 810c686:	46bd      	mov	sp, r7
 810c688:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c68c:	4770      	bx	lr

0810c68e <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfigTypeDef *pTxConfig)
{
 810c68e:	b580      	push	{r7, lr}
 810c690:	b082      	sub	sp, #8
 810c692:	af00      	add	r7, sp, #0
 810c694:	6078      	str	r0, [r7, #4]
 810c696:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 810c698:	683b      	ldr	r3, [r7, #0]
 810c69a:	2b00      	cmp	r3, #0
 810c69c:	d109      	bne.n	810c6b2 <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 810c69e:	687b      	ldr	r3, [r7, #4]
 810c6a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 810c6a4:	f043 0201 	orr.w	r2, r3, #1
 810c6a8:	687b      	ldr	r3, [r7, #4]
 810c6aa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 810c6ae:	2301      	movs	r3, #1
 810c6b0:	e03a      	b.n	810c728 <HAL_ETH_Transmit_IT+0x9a>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 810c6b2:	687b      	ldr	r3, [r7, #4]
 810c6b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 810c6b8:	2b23      	cmp	r3, #35	@ 0x23
 810c6ba:	d134      	bne.n	810c726 <HAL_ETH_Transmit_IT+0x98>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 810c6bc:	683b      	ldr	r3, [r7, #0]
 810c6be:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 810c6c0:	687b      	ldr	r3, [r7, #4]
 810c6c2:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 810c6c4:	2201      	movs	r2, #1
 810c6c6:	6839      	ldr	r1, [r7, #0]
 810c6c8:	6878      	ldr	r0, [r7, #4]
 810c6ca:	f001 f8d8 	bl	810d87e <ETH_Prepare_Tx_Descriptors>
 810c6ce:	4603      	mov	r3, r0
 810c6d0:	2b00      	cmp	r3, #0
 810c6d2:	d009      	beq.n	810c6e8 <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 810c6d4:	687b      	ldr	r3, [r7, #4]
 810c6d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 810c6da:	f043 0202 	orr.w	r2, r3, #2
 810c6de:	687b      	ldr	r3, [r7, #4]
 810c6e0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      return HAL_ERROR;
 810c6e4:	2301      	movs	r3, #1
 810c6e6:	e01f      	b.n	810c728 <HAL_ETH_Transmit_IT+0x9a>
  __ASM volatile ("dsb 0xF":::"memory");
 810c6e8:	f3bf 8f4f 	dsb	sy
}
 810c6ec:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 810c6ee:	687b      	ldr	r3, [r7, #4]
 810c6f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810c6f2:	1c5a      	adds	r2, r3, #1
 810c6f4:	687b      	ldr	r3, [r7, #4]
 810c6f6:	629a      	str	r2, [r3, #40]	@ 0x28
 810c6f8:	687b      	ldr	r3, [r7, #4]
 810c6fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810c6fc:	2b03      	cmp	r3, #3
 810c6fe:	d904      	bls.n	810c70a <HAL_ETH_Transmit_IT+0x7c>
 810c700:	687b      	ldr	r3, [r7, #4]
 810c702:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810c704:	1f1a      	subs	r2, r3, #4
 810c706:	687b      	ldr	r3, [r7, #4]
 810c708:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 810c70a:	687b      	ldr	r3, [r7, #4]
 810c70c:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 810c70e:	687b      	ldr	r3, [r7, #4]
 810c710:	681a      	ldr	r2, [r3, #0]
 810c712:	687b      	ldr	r3, [r7, #4]
 810c714:	3106      	adds	r1, #6
 810c716:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 810c71a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 810c71e:	f8c2 3120 	str.w	r3, [r2, #288]	@ 0x120

    return HAL_OK;
 810c722:	2300      	movs	r3, #0
 810c724:	e000      	b.n	810c728 <HAL_ETH_Transmit_IT+0x9a>

  }
  else
  {
    return HAL_ERROR;
 810c726:	2301      	movs	r3, #1
  }
}
 810c728:	4618      	mov	r0, r3
 810c72a:	3708      	adds	r7, #8
 810c72c:	46bd      	mov	sp, r7
 810c72e:	bd80      	pop	{r7, pc}

0810c730 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 810c730:	b580      	push	{r7, lr}
 810c732:	b088      	sub	sp, #32
 810c734:	af00      	add	r7, sp, #0
 810c736:	6078      	str	r0, [r7, #4]
 810c738:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 810c73a:	2300      	movs	r3, #0
 810c73c:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 810c73e:	2300      	movs	r3, #0
 810c740:	74fb      	strb	r3, [r7, #19]

  if (pAppBuff == NULL)
 810c742:	683b      	ldr	r3, [r7, #0]
 810c744:	2b00      	cmp	r3, #0
 810c746:	d109      	bne.n	810c75c <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 810c748:	687b      	ldr	r3, [r7, #4]
 810c74a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 810c74e:	f043 0201 	orr.w	r2, r3, #1
 810c752:	687b      	ldr	r3, [r7, #4]
 810c754:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 810c758:	2301      	movs	r3, #1
 810c75a:	e0a2      	b.n	810c8a2 <HAL_ETH_ReadData+0x172>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 810c75c:	687b      	ldr	r3, [r7, #4]
 810c75e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 810c762:	2b23      	cmp	r3, #35	@ 0x23
 810c764:	d001      	beq.n	810c76a <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 810c766:	2301      	movs	r3, #1
 810c768:	e09b      	b.n	810c8a2 <HAL_ETH_ReadData+0x172>
  }

  descidx = heth->RxDescList.RxDescIdx;
 810c76a:	687b      	ldr	r3, [r7, #4]
 810c76c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 810c76e:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 810c770:	687b      	ldr	r3, [r7, #4]
 810c772:	69fa      	ldr	r2, [r7, #28]
 810c774:	3212      	adds	r2, #18
 810c776:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 810c77a:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 810c77c:	687b      	ldr	r3, [r7, #4]
 810c77e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 810c780:	f1c3 0304 	rsb	r3, r3, #4
 810c784:	60fb      	str	r3, [r7, #12]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 810c786:	e064      	b.n	810c852 <HAL_ETH_ReadData+0x122>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_CTXT)  != (uint32_t)RESET)
 810c788:	69bb      	ldr	r3, [r7, #24]
 810c78a:	68db      	ldr	r3, [r3, #12]
 810c78c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 810c790:	2b00      	cmp	r3, #0
 810c792:	d007      	beq.n	810c7a4 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC1;
 810c794:	69bb      	ldr	r3, [r7, #24]
 810c796:	685a      	ldr	r2, [r3, #4]
 810c798:	687b      	ldr	r3, [r7, #4]
 810c79a:	679a      	str	r2, [r3, #120]	@ 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC0;
 810c79c:	69bb      	ldr	r3, [r7, #24]
 810c79e:	681a      	ldr	r2, [r3, #0]
 810c7a0:	687b      	ldr	r3, [r7, #4]
 810c7a2:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 810c7a4:	69bb      	ldr	r3, [r7, #24]
 810c7a6:	68db      	ldr	r3, [r3, #12]
 810c7a8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 810c7ac:	2b00      	cmp	r3, #0
 810c7ae:	d103      	bne.n	810c7b8 <HAL_ETH_ReadData+0x88>
 810c7b0:	687b      	ldr	r3, [r7, #4]
 810c7b2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 810c7b4:	2b00      	cmp	r3, #0
 810c7b6:	d03a      	beq.n	810c82e <HAL_ETH_ReadData+0xfe>
    {
      /* Check if first descriptor */
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET)
 810c7b8:	69bb      	ldr	r3, [r7, #24]
 810c7ba:	68db      	ldr	r3, [r3, #12]
 810c7bc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 810c7c0:	2b00      	cmp	r3, #0
 810c7c2:	d005      	beq.n	810c7d0 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 810c7c4:	687b      	ldr	r3, [r7, #4]
 810c7c6:	2200      	movs	r2, #0
 810c7c8:	661a      	str	r2, [r3, #96]	@ 0x60
        heth->RxDescList.RxDataLength = 0;
 810c7ca:	687b      	ldr	r3, [r7, #4]
 810c7cc:	2200      	movs	r2, #0
 810c7ce:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      bufflength = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL) - heth->RxDescList.RxDataLength;
 810c7d0:	69bb      	ldr	r3, [r7, #24]
 810c7d2:	68db      	ldr	r3, [r3, #12]
 810c7d4:	f3c3 020e 	ubfx	r2, r3, #0, #15
 810c7d8:	687b      	ldr	r3, [r7, #4]
 810c7da:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 810c7dc:	1ad3      	subs	r3, r2, r3
 810c7de:	60bb      	str	r3, [r7, #8]

      /* Check if last descriptor */
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_LD) != (uint32_t)RESET)
 810c7e0:	69bb      	ldr	r3, [r7, #24]
 810c7e2:	68db      	ldr	r3, [r3, #12]
 810c7e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 810c7e8:	2b00      	cmp	r3, #0
 810c7ea:	d005      	beq.n	810c7f8 <HAL_ETH_ReadData+0xc8>
      {
        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC3;
 810c7ec:	69bb      	ldr	r3, [r7, #24]
 810c7ee:	68da      	ldr	r2, [r3, #12]
 810c7f0:	687b      	ldr	r3, [r7, #4]
 810c7f2:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Packet ready */
        rxdataready = 1;
 810c7f4:	2301      	movs	r3, #1
 810c7f6:	74fb      	strb	r3, [r7, #19]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 810c7f8:	687b      	ldr	r3, [r7, #4]
 810c7fa:	f103 007c 	add.w	r0, r3, #124	@ 0x7c
 810c7fe:	687b      	ldr	r3, [r7, #4]
 810c800:	f103 0180 	add.w	r1, r3, #128	@ 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 810c804:	69bb      	ldr	r3, [r7, #24]
 810c806:	691b      	ldr	r3, [r3, #16]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 810c808:	461a      	mov	r2, r3
 810c80a:	68bb      	ldr	r3, [r7, #8]
 810c80c:	b29b      	uxth	r3, r3
 810c80e:	f7fc ff01 	bl	8109614 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 810c812:	687b      	ldr	r3, [r7, #4]
 810c814:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 810c816:	1c5a      	adds	r2, r3, #1
 810c818:	687b      	ldr	r3, [r7, #4]
 810c81a:	661a      	str	r2, [r3, #96]	@ 0x60
      heth->RxDescList.RxDataLength += bufflength;
 810c81c:	687b      	ldr	r3, [r7, #4]
 810c81e:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 810c820:	68bb      	ldr	r3, [r7, #8]
 810c822:	441a      	add	r2, r3
 810c824:	687b      	ldr	r3, [r7, #4]
 810c826:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 810c828:	69bb      	ldr	r3, [r7, #24]
 810c82a:	2200      	movs	r2, #0
 810c82c:	611a      	str	r2, [r3, #16]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 810c82e:	69fb      	ldr	r3, [r7, #28]
 810c830:	3301      	adds	r3, #1
 810c832:	61fb      	str	r3, [r7, #28]
 810c834:	69fb      	ldr	r3, [r7, #28]
 810c836:	2b03      	cmp	r3, #3
 810c838:	d902      	bls.n	810c840 <HAL_ETH_ReadData+0x110>
 810c83a:	69fb      	ldr	r3, [r7, #28]
 810c83c:	3b04      	subs	r3, #4
 810c83e:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 810c840:	687b      	ldr	r3, [r7, #4]
 810c842:	69fa      	ldr	r2, [r7, #28]
 810c844:	3212      	adds	r2, #18
 810c846:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 810c84a:	61bb      	str	r3, [r7, #24]
    desccnt++;
 810c84c:	697b      	ldr	r3, [r7, #20]
 810c84e:	3301      	adds	r3, #1
 810c850:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 810c852:	69bb      	ldr	r3, [r7, #24]
 810c854:	68db      	ldr	r3, [r3, #12]
         && (rxdataready == 0U))
 810c856:	2b00      	cmp	r3, #0
 810c858:	db06      	blt.n	810c868 <HAL_ETH_ReadData+0x138>
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 810c85a:	697a      	ldr	r2, [r7, #20]
 810c85c:	68fb      	ldr	r3, [r7, #12]
 810c85e:	429a      	cmp	r2, r3
 810c860:	d202      	bcs.n	810c868 <HAL_ETH_ReadData+0x138>
         && (rxdataready == 0U))
 810c862:	7cfb      	ldrb	r3, [r7, #19]
 810c864:	2b00      	cmp	r3, #0
 810c866:	d08f      	beq.n	810c788 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 810c868:	687b      	ldr	r3, [r7, #4]
 810c86a:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 810c86c:	697b      	ldr	r3, [r7, #20]
 810c86e:	441a      	add	r2, r3
 810c870:	687b      	ldr	r3, [r7, #4]
 810c872:	66da      	str	r2, [r3, #108]	@ 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 810c874:	687b      	ldr	r3, [r7, #4]
 810c876:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 810c878:	2b00      	cmp	r3, #0
 810c87a:	d002      	beq.n	810c882 <HAL_ETH_ReadData+0x152>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 810c87c:	6878      	ldr	r0, [r7, #4]
 810c87e:	f000 f814 	bl	810c8aa <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 810c882:	687b      	ldr	r3, [r7, #4]
 810c884:	69fa      	ldr	r2, [r7, #28]
 810c886:	65da      	str	r2, [r3, #92]	@ 0x5c

  if (rxdataready == 1U)
 810c888:	7cfb      	ldrb	r3, [r7, #19]
 810c88a:	2b01      	cmp	r3, #1
 810c88c:	d108      	bne.n	810c8a0 <HAL_ETH_ReadData+0x170>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 810c88e:	687b      	ldr	r3, [r7, #4]
 810c890:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 810c892:	683b      	ldr	r3, [r7, #0]
 810c894:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 810c896:	687b      	ldr	r3, [r7, #4]
 810c898:	2200      	movs	r2, #0
 810c89a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 810c89c:	2300      	movs	r3, #0
 810c89e:	e000      	b.n	810c8a2 <HAL_ETH_ReadData+0x172>
  }

  /* Packet not ready */
  return HAL_ERROR;
 810c8a0:	2301      	movs	r3, #1
}
 810c8a2:	4618      	mov	r0, r3
 810c8a4:	3720      	adds	r7, #32
 810c8a6:	46bd      	mov	sp, r7
 810c8a8:	bd80      	pop	{r7, pc}

0810c8aa <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 810c8aa:	b580      	push	{r7, lr}
 810c8ac:	b088      	sub	sp, #32
 810c8ae:	af00      	add	r7, sp, #0
 810c8b0:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t tailidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 810c8b2:	2300      	movs	r3, #0
 810c8b4:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 810c8b6:	2301      	movs	r3, #1
 810c8b8:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 810c8ba:	687b      	ldr	r3, [r7, #4]
 810c8bc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 810c8be:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 810c8c0:	687b      	ldr	r3, [r7, #4]
 810c8c2:	69fa      	ldr	r2, [r7, #28]
 810c8c4:	3212      	adds	r2, #18
 810c8c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 810c8ca:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 810c8cc:	687b      	ldr	r3, [r7, #4]
 810c8ce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 810c8d0:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 810c8d2:	e038      	b.n	810c946 <ETH_UpdateDescriptor+0x9c>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 810c8d4:	697b      	ldr	r3, [r7, #20]
 810c8d6:	691b      	ldr	r3, [r3, #16]
 810c8d8:	2b00      	cmp	r3, #0
 810c8da:	d112      	bne.n	810c902 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 810c8dc:	f107 0308 	add.w	r3, r7, #8
 810c8e0:	4618      	mov	r0, r3
 810c8e2:	f7fc fe67 	bl	81095b4 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 810c8e6:	68bb      	ldr	r3, [r7, #8]
 810c8e8:	2b00      	cmp	r3, #0
 810c8ea:	d102      	bne.n	810c8f2 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 810c8ec:	2300      	movs	r3, #0
 810c8ee:	74fb      	strb	r3, [r7, #19]
 810c8f0:	e007      	b.n	810c902 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 810c8f2:	68bb      	ldr	r3, [r7, #8]
 810c8f4:	461a      	mov	r2, r3
 810c8f6:	697b      	ldr	r3, [r7, #20]
 810c8f8:	611a      	str	r2, [r3, #16]
        WRITE_REG(dmarxdesc->DESC0, (uint32_t)buff);
 810c8fa:	68bb      	ldr	r3, [r7, #8]
 810c8fc:	461a      	mov	r2, r3
 810c8fe:	697b      	ldr	r3, [r7, #20]
 810c900:	601a      	str	r2, [r3, #0]
      }
    }

    if (allocStatus != 0U)
 810c902:	7cfb      	ldrb	r3, [r7, #19]
 810c904:	2b00      	cmp	r3, #0
 810c906:	d01e      	beq.n	810c946 <ETH_UpdateDescriptor+0x9c>
    {

      if (heth->RxDescList.ItMode != 0U)
 810c908:	687b      	ldr	r3, [r7, #4]
 810c90a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810c90c:	2b00      	cmp	r3, #0
 810c90e:	d004      	beq.n	810c91a <ETH_UpdateDescriptor+0x70>
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V | ETH_DMARXNDESCRF_IOC);
 810c910:	697b      	ldr	r3, [r7, #20]
 810c912:	f04f 4241 	mov.w	r2, #3238002688	@ 0xc1000000
 810c916:	60da      	str	r2, [r3, #12]
 810c918:	e003      	b.n	810c922 <ETH_UpdateDescriptor+0x78>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V);
 810c91a:	697b      	ldr	r3, [r7, #20]
 810c91c:	f04f 4201 	mov.w	r2, #2164260864	@ 0x81000000
 810c920:	60da      	str	r2, [r3, #12]
      }

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 810c922:	69fb      	ldr	r3, [r7, #28]
 810c924:	3301      	adds	r3, #1
 810c926:	61fb      	str	r3, [r7, #28]
 810c928:	69fb      	ldr	r3, [r7, #28]
 810c92a:	2b03      	cmp	r3, #3
 810c92c:	d902      	bls.n	810c934 <ETH_UpdateDescriptor+0x8a>
 810c92e:	69fb      	ldr	r3, [r7, #28]
 810c930:	3b04      	subs	r3, #4
 810c932:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 810c934:	687b      	ldr	r3, [r7, #4]
 810c936:	69fa      	ldr	r2, [r7, #28]
 810c938:	3212      	adds	r2, #18
 810c93a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 810c93e:	617b      	str	r3, [r7, #20]
      desccount--;
 810c940:	69bb      	ldr	r3, [r7, #24]
 810c942:	3b01      	subs	r3, #1
 810c944:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 810c946:	69bb      	ldr	r3, [r7, #24]
 810c948:	2b00      	cmp	r3, #0
 810c94a:	d002      	beq.n	810c952 <ETH_UpdateDescriptor+0xa8>
 810c94c:	7cfb      	ldrb	r3, [r7, #19]
 810c94e:	2b00      	cmp	r3, #0
 810c950:	d1c0      	bne.n	810c8d4 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 810c952:	687b      	ldr	r3, [r7, #4]
 810c954:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 810c956:	69ba      	ldr	r2, [r7, #24]
 810c958:	429a      	cmp	r2, r3
 810c95a:	d01b      	beq.n	810c994 <ETH_UpdateDescriptor+0xea>
  {
    /* Set the tail pointer index */
    tailidx = (descidx + 1U) % ETH_RX_DESC_CNT;
 810c95c:	69fb      	ldr	r3, [r7, #28]
 810c95e:	3301      	adds	r3, #1
 810c960:	f003 0303 	and.w	r3, r3, #3
 810c964:	60fb      	str	r3, [r7, #12]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 810c966:	f3bf 8f5f 	dmb	sy
}
 810c96a:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 810c96c:	687b      	ldr	r3, [r7, #4]
 810c96e:	6919      	ldr	r1, [r3, #16]
 810c970:	68fa      	ldr	r2, [r7, #12]
 810c972:	4613      	mov	r3, r2
 810c974:	005b      	lsls	r3, r3, #1
 810c976:	4413      	add	r3, r2
 810c978:	00db      	lsls	r3, r3, #3
 810c97a:	18ca      	adds	r2, r1, r3
 810c97c:	687b      	ldr	r3, [r7, #4]
 810c97e:	681b      	ldr	r3, [r3, #0]
 810c980:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 810c984:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128

    heth->RxDescList.RxBuildDescIdx = descidx;
 810c988:	687b      	ldr	r3, [r7, #4]
 810c98a:	69fa      	ldr	r2, [r7, #28]
 810c98c:	669a      	str	r2, [r3, #104]	@ 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 810c98e:	687b      	ldr	r3, [r7, #4]
 810c990:	69ba      	ldr	r2, [r7, #24]
 810c992:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
}
 810c994:	bf00      	nop
 810c996:	3720      	adds	r7, #32
 810c998:	46bd      	mov	sp, r7
 810c99a:	bd80      	pop	{r7, pc}

0810c99c <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 810c99c:	b580      	push	{r7, lr}
 810c99e:	b086      	sub	sp, #24
 810c9a0:	af00      	add	r7, sp, #0
 810c9a2:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 810c9a4:	687b      	ldr	r3, [r7, #4]
 810c9a6:	3318      	adds	r3, #24
 810c9a8:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 810c9aa:	68bb      	ldr	r3, [r7, #8]
 810c9ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810c9ae:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 810c9b0:	68bb      	ldr	r3, [r7, #8]
 810c9b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810c9b4:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 810c9b6:	2301      	movs	r3, #1
 810c9b8:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 810c9ba:	e047      	b.n	810ca4c <HAL_ETH_ReleaseTxPacket+0xb0>
  {
    pktInUse = 1U;
 810c9bc:	2301      	movs	r3, #1
 810c9be:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 810c9c0:	697b      	ldr	r3, [r7, #20]
 810c9c2:	3b01      	subs	r3, #1
 810c9c4:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 810c9c6:	68ba      	ldr	r2, [r7, #8]
 810c9c8:	693b      	ldr	r3, [r7, #16]
 810c9ca:	3304      	adds	r3, #4
 810c9cc:	009b      	lsls	r3, r3, #2
 810c9ce:	4413      	add	r3, r2
 810c9d0:	685b      	ldr	r3, [r3, #4]
 810c9d2:	2b00      	cmp	r3, #0
 810c9d4:	d10a      	bne.n	810c9ec <HAL_ETH_ReleaseTxPacket+0x50>
    {
      /* No packet in use, skip to next.  */
      INCR_TX_DESC_INDEX(idx, 1U);
 810c9d6:	693b      	ldr	r3, [r7, #16]
 810c9d8:	3301      	adds	r3, #1
 810c9da:	613b      	str	r3, [r7, #16]
 810c9dc:	693b      	ldr	r3, [r7, #16]
 810c9de:	2b03      	cmp	r3, #3
 810c9e0:	d902      	bls.n	810c9e8 <HAL_ETH_ReleaseTxPacket+0x4c>
 810c9e2:	693b      	ldr	r3, [r7, #16]
 810c9e4:	3b04      	subs	r3, #4
 810c9e6:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 810c9e8:	2300      	movs	r3, #0
 810c9ea:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 810c9ec:	7bbb      	ldrb	r3, [r7, #14]
 810c9ee:	2b00      	cmp	r3, #0
 810c9f0:	d02c      	beq.n	810ca4c <HAL_ETH_ReleaseTxPacket+0xb0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC3 & ETH_DMATXNDESCRF_OWN) == 0U)
 810c9f2:	687b      	ldr	r3, [r7, #4]
 810c9f4:	68d9      	ldr	r1, [r3, #12]
 810c9f6:	693a      	ldr	r2, [r7, #16]
 810c9f8:	4613      	mov	r3, r2
 810c9fa:	005b      	lsls	r3, r3, #1
 810c9fc:	4413      	add	r3, r2
 810c9fe:	00db      	lsls	r3, r3, #3
 810ca00:	440b      	add	r3, r1
 810ca02:	68db      	ldr	r3, [r3, #12]
 810ca04:	2b00      	cmp	r3, #0
 810ca06:	db1f      	blt.n	810ca48 <HAL_ETH_ReleaseTxPacket+0xac>
        {
          HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
        }
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 810ca08:	68ba      	ldr	r2, [r7, #8]
 810ca0a:	693b      	ldr	r3, [r7, #16]
 810ca0c:	3304      	adds	r3, #4
 810ca0e:	009b      	lsls	r3, r3, #2
 810ca10:	4413      	add	r3, r2
 810ca12:	685b      	ldr	r3, [r3, #4]
 810ca14:	4618      	mov	r0, r3
 810ca16:	f7fc fe3d 	bl	8109694 <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 810ca1a:	68ba      	ldr	r2, [r7, #8]
 810ca1c:	693b      	ldr	r3, [r7, #16]
 810ca1e:	3304      	adds	r3, #4
 810ca20:	009b      	lsls	r3, r3, #2
 810ca22:	4413      	add	r3, r2
 810ca24:	2200      	movs	r2, #0
 810ca26:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        INCR_TX_DESC_INDEX(idx, 1U);
 810ca28:	693b      	ldr	r3, [r7, #16]
 810ca2a:	3301      	adds	r3, #1
 810ca2c:	613b      	str	r3, [r7, #16]
 810ca2e:	693b      	ldr	r3, [r7, #16]
 810ca30:	2b03      	cmp	r3, #3
 810ca32:	d902      	bls.n	810ca3a <HAL_ETH_ReleaseTxPacket+0x9e>
 810ca34:	693b      	ldr	r3, [r7, #16]
 810ca36:	3b04      	subs	r3, #4
 810ca38:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 810ca3a:	68bb      	ldr	r3, [r7, #8]
 810ca3c:	697a      	ldr	r2, [r7, #20]
 810ca3e:	629a      	str	r2, [r3, #40]	@ 0x28
        dmatxdesclist->releaseIndex = idx;
 810ca40:	68bb      	ldr	r3, [r7, #8]
 810ca42:	693a      	ldr	r2, [r7, #16]
 810ca44:	62da      	str	r2, [r3, #44]	@ 0x2c
 810ca46:	e001      	b.n	810ca4c <HAL_ETH_ReleaseTxPacket+0xb0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 810ca48:	2300      	movs	r3, #0
 810ca4a:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 810ca4c:	697b      	ldr	r3, [r7, #20]
 810ca4e:	2b00      	cmp	r3, #0
 810ca50:	d002      	beq.n	810ca58 <HAL_ETH_ReleaseTxPacket+0xbc>
 810ca52:	7bfb      	ldrb	r3, [r7, #15]
 810ca54:	2b00      	cmp	r3, #0
 810ca56:	d1b1      	bne.n	810c9bc <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 810ca58:	2300      	movs	r3, #0
}
 810ca5a:	4618      	mov	r0, r3
 810ca5c:	3718      	adds	r7, #24
 810ca5e:	46bd      	mov	sp, r7
 810ca60:	bd80      	pop	{r7, pc}
	...

0810ca64 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 810ca64:	b580      	push	{r7, lr}
 810ca66:	b088      	sub	sp, #32
 810ca68:	af00      	add	r7, sp, #0
 810ca6a:	6078      	str	r0, [r7, #4]
  uint32_t mac_flag = READ_REG(heth->Instance->MACISR);
 810ca6c:	687b      	ldr	r3, [r7, #4]
 810ca6e:	681b      	ldr	r3, [r3, #0]
 810ca70:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 810ca74:	61fb      	str	r3, [r7, #28]
  uint32_t dma_flag = READ_REG(heth->Instance->DMACSR);
 810ca76:	687b      	ldr	r3, [r7, #4]
 810ca78:	681b      	ldr	r3, [r3, #0]
 810ca7a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 810ca7e:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 810ca82:	61bb      	str	r3, [r7, #24]
  uint32_t dma_itsource = READ_REG(heth->Instance->DMACIER);
 810ca84:	687b      	ldr	r3, [r7, #4]
 810ca86:	681b      	ldr	r3, [r3, #0]
 810ca88:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 810ca8c:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 810ca90:	617b      	str	r3, [r7, #20]
  uint32_t exti_d1_flag = READ_REG(EXTI_D1->PR3);
 810ca92:	4b77      	ldr	r3, [pc, #476]	@ (810cc70 <HAL_ETH_IRQHandler+0x20c>)
 810ca94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810ca96:	613b      	str	r3, [r7, #16]
#if defined(DUAL_CORE)
  uint32_t exti_d2_flag = READ_REG(EXTI_D2->PR3);
 810ca98:	4b76      	ldr	r3, [pc, #472]	@ (810cc74 <HAL_ETH_IRQHandler+0x210>)
 810ca9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810ca9c:	60fb      	str	r3, [r7, #12]
#endif /* DUAL_CORE */

  /* Packet received */
  if (((dma_flag & ETH_DMACSR_RI) != 0U) && ((dma_itsource & ETH_DMACIER_RIE) != 0U))
 810ca9e:	69bb      	ldr	r3, [r7, #24]
 810caa0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 810caa4:	2b00      	cmp	r3, #0
 810caa6:	d010      	beq.n	810caca <HAL_ETH_IRQHandler+0x66>
 810caa8:	697b      	ldr	r3, [r7, #20]
 810caaa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 810caae:	2b00      	cmp	r3, #0
 810cab0:	d00b      	beq.n	810caca <HAL_ETH_IRQHandler+0x66>
  {
    /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_RI | ETH_DMACSR_NIS);
 810cab2:	687b      	ldr	r3, [r7, #4]
 810cab4:	681b      	ldr	r3, [r3, #0]
 810cab6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 810caba:	461a      	mov	r2, r3
 810cabc:	f248 0340 	movw	r3, #32832	@ 0x8040
 810cac0:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 810cac4:	6878      	ldr	r0, [r7, #4]
 810cac6:	f7fc f91d 	bl	8108d04 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* Packet transmitted */
  if (((dma_flag & ETH_DMACSR_TI) != 0U) && ((dma_itsource & ETH_DMACIER_TIE) != 0U))
 810caca:	69bb      	ldr	r3, [r7, #24]
 810cacc:	f003 0301 	and.w	r3, r3, #1
 810cad0:	2b00      	cmp	r3, #0
 810cad2:	d010      	beq.n	810caf6 <HAL_ETH_IRQHandler+0x92>
 810cad4:	697b      	ldr	r3, [r7, #20]
 810cad6:	f003 0301 	and.w	r3, r3, #1
 810cada:	2b00      	cmp	r3, #0
 810cadc:	d00b      	beq.n	810caf6 <HAL_ETH_IRQHandler+0x92>
  {
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_TI | ETH_DMACSR_NIS);
 810cade:	687b      	ldr	r3, [r7, #4]
 810cae0:	681b      	ldr	r3, [r3, #0]
 810cae2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 810cae6:	461a      	mov	r2, r3
 810cae8:	f248 0301 	movw	r3, #32769	@ 0x8001
 810caec:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Transmit complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 810caf0:	6878      	ldr	r0, [r7, #4]
 810caf2:	f7fc f917 	bl	8108d24 <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* ETH DMA Error */
  if (((dma_flag & ETH_DMACSR_AIS) != 0U) && ((dma_itsource & ETH_DMACIER_AIE) != 0U))
 810caf6:	69bb      	ldr	r3, [r7, #24]
 810caf8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 810cafc:	2b00      	cmp	r3, #0
 810cafe:	d047      	beq.n	810cb90 <HAL_ETH_IRQHandler+0x12c>
 810cb00:	697b      	ldr	r3, [r7, #20]
 810cb02:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 810cb06:	2b00      	cmp	r3, #0
 810cb08:	d042      	beq.n	810cb90 <HAL_ETH_IRQHandler+0x12c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 810cb0a:	687b      	ldr	r3, [r7, #4]
 810cb0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 810cb10:	f043 0208 	orr.w	r2, r3, #8
 810cb14:	687b      	ldr	r3, [r7, #4]
 810cb16:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* if fatal bus error occurred */
    if ((dma_flag & ETH_DMACSR_FBE) != 0U)
 810cb1a:	69bb      	ldr	r3, [r7, #24]
 810cb1c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 810cb20:	2b00      	cmp	r3, #0
 810cb22:	d01e      	beq.n	810cb62 <HAL_ETH_IRQHandler+0xfe>
    {
      /* Get DMA error code  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_FBE | ETH_DMACSR_TPS | ETH_DMACSR_RPS));
 810cb24:	687b      	ldr	r3, [r7, #4]
 810cb26:	681b      	ldr	r3, [r3, #0]
 810cb28:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 810cb2c:	f8d3 2160 	ldr.w	r2, [r3, #352]	@ 0x160
 810cb30:	f241 1302 	movw	r3, #4354	@ 0x1102
 810cb34:	4013      	ands	r3, r2
 810cb36:	687a      	ldr	r2, [r7, #4]
 810cb38:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c

      /* Disable all interrupts */
      __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMACIER_NIE | ETH_DMACIER_AIE);
 810cb3c:	687b      	ldr	r3, [r7, #4]
 810cb3e:	681b      	ldr	r3, [r3, #0]
 810cb40:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 810cb44:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 810cb48:	687a      	ldr	r2, [r7, #4]
 810cb4a:	6812      	ldr	r2, [r2, #0]
 810cb4c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 810cb50:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 810cb54:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134

      /* Set HAL state to ERROR */
      heth->gState = HAL_ETH_STATE_ERROR;
 810cb58:	687b      	ldr	r3, [r7, #4]
 810cb5a:	22e0      	movs	r2, #224	@ 0xe0
 810cb5c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 810cb60:	e013      	b.n	810cb8a <HAL_ETH_IRQHandler+0x126>
    }
    else
    {
      /* Get DMA error status  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 810cb62:	687b      	ldr	r3, [r7, #4]
 810cb64:	681b      	ldr	r3, [r3, #0]
 810cb66:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 810cb6a:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 810cb6e:	f403 42cd 	and.w	r2, r3, #26240	@ 0x6680
 810cb72:	687b      	ldr	r3, [r7, #4]
 810cb74:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
                                                             ETH_DMACSR_RBU | ETH_DMACSR_AIS));

      /* Clear the interrupt summary flag */
      __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 810cb78:	687b      	ldr	r3, [r7, #4]
 810cb7a:	681b      	ldr	r3, [r3, #0]
 810cb7c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 810cb80:	461a      	mov	r2, r3
 810cb82:	f44f 43cd 	mov.w	r3, #26240	@ 0x6680
 810cb86:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet DMA Error callback */
    HAL_ETH_ErrorCallback(heth);
 810cb8a:	6878      	ldr	r0, [r7, #4]
 810cb8c:	f7fc f8da 	bl	8108d44 <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* ETH MAC Error IT */
  if (((mac_flag & ETH_MACIER_RXSTSIE) == ETH_MACIER_RXSTSIE) || \
 810cb90:	69fb      	ldr	r3, [r7, #28]
 810cb92:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 810cb96:	2b00      	cmp	r3, #0
 810cb98:	d104      	bne.n	810cba4 <HAL_ETH_IRQHandler+0x140>
      ((mac_flag & ETH_MACIER_TXSTSIE) == ETH_MACIER_TXSTSIE))
 810cb9a:	69fb      	ldr	r3, [r7, #28]
 810cb9c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((mac_flag & ETH_MACIER_RXSTSIE) == ETH_MACIER_RXSTSIE) || \
 810cba0:	2b00      	cmp	r3, #0
 810cba2:	d019      	beq.n	810cbd8 <HAL_ETH_IRQHandler+0x174>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_MAC;
 810cba4:	687b      	ldr	r3, [r7, #4]
 810cba6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 810cbaa:	f043 0210 	orr.w	r2, r3, #16
 810cbae:	687b      	ldr	r3, [r7, #4]
 810cbb0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Get MAC Rx Tx status and clear Status register pending bit */
    heth->MACErrorCode = READ_REG(heth->Instance->MACRXTXSR);
 810cbb4:	687b      	ldr	r3, [r7, #4]
 810cbb6:	681b      	ldr	r3, [r3, #0]
 810cbb8:	f8d3 20b8 	ldr.w	r2, [r3, #184]	@ 0xb8
 810cbbc:	687b      	ldr	r3, [r7, #4]
 810cbbe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    heth->gState = HAL_ETH_STATE_ERROR;
 810cbc2:	687b      	ldr	r3, [r7, #4]
 810cbc4:	22e0      	movs	r2, #224	@ 0xe0
 810cbc6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 810cbca:	6878      	ldr	r0, [r7, #4]
 810cbcc:	f7fc f8ba 	bl	8108d44 <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    heth->MACErrorCode = (uint32_t)(0x0U);
 810cbd0:	687b      	ldr	r3, [r7, #4]
 810cbd2:	2200      	movs	r2, #0
 810cbd4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  }

  /* ETH PMT IT */
  if ((mac_flag & ETH_MAC_PMT_IT) != 0U)
 810cbd8:	69fb      	ldr	r3, [r7, #28]
 810cbda:	f003 0310 	and.w	r3, r3, #16
 810cbde:	2b00      	cmp	r3, #0
 810cbe0:	d00f      	beq.n	810cc02 <HAL_ETH_IRQHandler+0x19e>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPCSR, (ETH_MACPCSR_RWKPRCVD | ETH_MACPCSR_MGKPRCVD));
 810cbe2:	687b      	ldr	r3, [r7, #4]
 810cbe4:	681b      	ldr	r3, [r3, #0]
 810cbe6:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 810cbea:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 810cbee:	687b      	ldr	r3, [r7, #4]
 810cbf0:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 810cbf4:	6878      	ldr	r0, [r7, #4]
 810cbf6:	f000 f83f 	bl	810cc78 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 810cbfa:	687b      	ldr	r3, [r7, #4]
 810cbfc:	2200      	movs	r2, #0
 810cbfe:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  }

  /* ETH EEE IT */
  if ((mac_flag & ETH_MAC_LPI_IT) != 0U)
 810cc02:	69fb      	ldr	r3, [r7, #28]
 810cc04:	f003 0320 	and.w	r3, r3, #32
 810cc08:	2b00      	cmp	r3, #0
 810cc0a:	d00f      	beq.n	810cc2c <HAL_ETH_IRQHandler+0x1c8>
  {
    /* Get MAC LPI interrupt source and clear the status register pending bit */
    heth->MACLPIEvent = READ_BIT(heth->Instance->MACLCSR, 0x0000000FU);
 810cc0c:	687b      	ldr	r3, [r7, #4]
 810cc0e:	681b      	ldr	r3, [r3, #0]
 810cc10:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 810cc14:	f003 020f 	and.w	r2, r3, #15
 810cc18:	687b      	ldr	r3, [r7, #4]
 810cc1a:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered EEE callback*/
    heth->EEECallback(heth);
#else
    /* Ethernet EEE callback */
    HAL_ETH_EEECallback(heth);
 810cc1e:	6878      	ldr	r0, [r7, #4]
 810cc20:	f000 f834 	bl	810cc8c <HAL_ETH_EEECallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACLPIEvent = (uint32_t)(0x0U);
 810cc24:	687b      	ldr	r3, [r7, #4]
 810cc26:	2200      	movs	r2, #0
 810cc28:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  }

#if defined(DUAL_CORE)
  if (HAL_GetCurrentCPUID() == CM7_CPUID)
 810cc2c:	f7ff fb30 	bl	810c290 <HAL_GetCurrentCPUID>
 810cc30:	4603      	mov	r3, r0
 810cc32:	2b03      	cmp	r3, #3
 810cc34:	d10c      	bne.n	810cc50 <HAL_ETH_IRQHandler+0x1ec>
  {
    /* check ETH WAKEUP exti flag */
    if ((exti_d1_flag & ETH_WAKEUP_EXTI_LINE) != 0U)
 810cc36:	693b      	ldr	r3, [r7, #16]
 810cc38:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 810cc3c:	2b00      	cmp	r3, #0
 810cc3e:	d013      	beq.n	810cc68 <HAL_ETH_IRQHandler+0x204>
    {
      /* Clear ETH WAKEUP Exti pending bit */
      __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 810cc40:	4b0b      	ldr	r3, [pc, #44]	@ (810cc70 <HAL_ETH_IRQHandler+0x20c>)
 810cc42:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 810cc46:	629a      	str	r2, [r3, #40]	@ 0x28
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered WakeUp callback*/
      heth->WakeUpCallback(heth);
#else
      /* ETH WAKEUP callback */
      HAL_ETH_WakeUpCallback(heth);
 810cc48:	6878      	ldr	r0, [r7, #4]
 810cc4a:	f000 f829 	bl	810cca0 <HAL_ETH_WakeUpCallback>
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
#endif /* DUAL_CORE */
}
 810cc4e:	e00b      	b.n	810cc68 <HAL_ETH_IRQHandler+0x204>
    if ((exti_d2_flag & ETH_WAKEUP_EXTI_LINE) != 0U)
 810cc50:	68fb      	ldr	r3, [r7, #12]
 810cc52:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 810cc56:	2b00      	cmp	r3, #0
 810cc58:	d006      	beq.n	810cc68 <HAL_ETH_IRQHandler+0x204>
      __HAL_ETH_WAKEUP_EXTID2_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 810cc5a:	4b06      	ldr	r3, [pc, #24]	@ (810cc74 <HAL_ETH_IRQHandler+0x210>)
 810cc5c:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 810cc60:	629a      	str	r2, [r3, #40]	@ 0x28
      HAL_ETH_WakeUpCallback(heth);
 810cc62:	6878      	ldr	r0, [r7, #4]
 810cc64:	f000 f81c 	bl	810cca0 <HAL_ETH_WakeUpCallback>
}
 810cc68:	bf00      	nop
 810cc6a:	3720      	adds	r7, #32
 810cc6c:	46bd      	mov	sp, r7
 810cc6e:	bd80      	pop	{r7, pc}
 810cc70:	58000080 	.word	0x58000080
 810cc74:	580000c0 	.word	0x580000c0

0810cc78 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 810cc78:	b480      	push	{r7}
 810cc7a:	b083      	sub	sp, #12
 810cc7c:	af00      	add	r7, sp, #0
 810cc7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 810cc80:	bf00      	nop
 810cc82:	370c      	adds	r7, #12
 810cc84:	46bd      	mov	sp, r7
 810cc86:	f85d 7b04 	ldr.w	r7, [sp], #4
 810cc8a:	4770      	bx	lr

0810cc8c <HAL_ETH_EEECallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_EEECallback(ETH_HandleTypeDef *heth)
{
 810cc8c:	b480      	push	{r7}
 810cc8e:	b083      	sub	sp, #12
 810cc90:	af00      	add	r7, sp, #0
 810cc92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_EEECallback could be implemented in the user file
  */
}
 810cc94:	bf00      	nop
 810cc96:	370c      	adds	r7, #12
 810cc98:	46bd      	mov	sp, r7
 810cc9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810cc9e:	4770      	bx	lr

0810cca0 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 810cca0:	b480      	push	{r7}
 810cca2:	b083      	sub	sp, #12
 810cca4:	af00      	add	r7, sp, #0
 810cca6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 810cca8:	bf00      	nop
 810ccaa:	370c      	adds	r7, #12
 810ccac:	46bd      	mov	sp, r7
 810ccae:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ccb2:	4770      	bx	lr

0810ccb4 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 810ccb4:	b580      	push	{r7, lr}
 810ccb6:	b086      	sub	sp, #24
 810ccb8:	af00      	add	r7, sp, #0
 810ccba:	60f8      	str	r0, [r7, #12]
 810ccbc:	60b9      	str	r1, [r7, #8]
 810ccbe:	607a      	str	r2, [r7, #4]
 810ccc0:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 810ccc2:	68fb      	ldr	r3, [r7, #12]
 810ccc4:	681b      	ldr	r3, [r3, #0]
 810ccc6:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 810ccca:	f003 0301 	and.w	r3, r3, #1
 810ccce:	2b00      	cmp	r3, #0
 810ccd0:	d001      	beq.n	810ccd6 <HAL_ETH_ReadPHYRegister+0x22>
  {
    return HAL_ERROR;
 810ccd2:	2301      	movs	r3, #1
 810ccd4:	e03e      	b.n	810cd54 <HAL_ETH_ReadPHYRegister+0xa0>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 810ccd6:	68fb      	ldr	r3, [r7, #12]
 810ccd8:	681b      	ldr	r3, [r3, #0]
 810ccda:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 810ccde:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the read mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 810cce0:	697b      	ldr	r3, [r7, #20]
 810cce2:	f023 7278 	bic.w	r2, r3, #65011712	@ 0x3e00000
 810cce6:	68bb      	ldr	r3, [r7, #8]
 810cce8:	055b      	lsls	r3, r3, #21
 810ccea:	4313      	orrs	r3, r2
 810ccec:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 810ccee:	697b      	ldr	r3, [r7, #20]
 810ccf0:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 810ccf4:	687b      	ldr	r3, [r7, #4]
 810ccf6:	041b      	lsls	r3, r3, #16
 810ccf8:	4313      	orrs	r3, r2
 810ccfa:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_RD);
 810ccfc:	697b      	ldr	r3, [r7, #20]
 810ccfe:	f043 030c 	orr.w	r3, r3, #12
 810cd02:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 810cd04:	697b      	ldr	r3, [r7, #20]
 810cd06:	f043 0301 	orr.w	r3, r3, #1
 810cd0a:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MDII Address register */
  WRITE_REG(heth->Instance->MACMDIOAR, tmpreg);
 810cd0c:	68fb      	ldr	r3, [r7, #12]
 810cd0e:	681b      	ldr	r3, [r3, #0]
 810cd10:	697a      	ldr	r2, [r7, #20]
 810cd12:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

  tickstart = HAL_GetTick();
 810cd16:	f7ff f9bb 	bl	810c090 <HAL_GetTick>
 810cd1a:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 810cd1c:	e009      	b.n	810cd32 <HAL_ETH_ReadPHYRegister+0x7e>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 810cd1e:	f7ff f9b7 	bl	810c090 <HAL_GetTick>
 810cd22:	4602      	mov	r2, r0
 810cd24:	693b      	ldr	r3, [r7, #16]
 810cd26:	1ad3      	subs	r3, r2, r3
 810cd28:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 810cd2c:	d901      	bls.n	810cd32 <HAL_ETH_ReadPHYRegister+0x7e>
    {
      return HAL_ERROR;
 810cd2e:	2301      	movs	r3, #1
 810cd30:	e010      	b.n	810cd54 <HAL_ETH_ReadPHYRegister+0xa0>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 810cd32:	68fb      	ldr	r3, [r7, #12]
 810cd34:	681b      	ldr	r3, [r3, #0]
 810cd36:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 810cd3a:	f003 0301 	and.w	r3, r3, #1
 810cd3e:	2b00      	cmp	r3, #0
 810cd40:	d1ed      	bne.n	810cd1e <HAL_ETH_ReadPHYRegister+0x6a>
    }
  }

  /* Get MACMIIDR value */
  WRITE_REG(*pRegValue, (uint16_t)heth->Instance->MACMDIODR);
 810cd42:	68fb      	ldr	r3, [r7, #12]
 810cd44:	681b      	ldr	r3, [r3, #0]
 810cd46:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 810cd4a:	b29b      	uxth	r3, r3
 810cd4c:	461a      	mov	r2, r3
 810cd4e:	683b      	ldr	r3, [r7, #0]
 810cd50:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 810cd52:	2300      	movs	r3, #0
}
 810cd54:	4618      	mov	r0, r3
 810cd56:	3718      	adds	r7, #24
 810cd58:	46bd      	mov	sp, r7
 810cd5a:	bd80      	pop	{r7, pc}

0810cd5c <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 810cd5c:	b580      	push	{r7, lr}
 810cd5e:	b086      	sub	sp, #24
 810cd60:	af00      	add	r7, sp, #0
 810cd62:	60f8      	str	r0, [r7, #12]
 810cd64:	60b9      	str	r1, [r7, #8]
 810cd66:	607a      	str	r2, [r7, #4]
 810cd68:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 810cd6a:	68fb      	ldr	r3, [r7, #12]
 810cd6c:	681b      	ldr	r3, [r3, #0]
 810cd6e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 810cd72:	f003 0301 	and.w	r3, r3, #1
 810cd76:	2b00      	cmp	r3, #0
 810cd78:	d001      	beq.n	810cd7e <HAL_ETH_WritePHYRegister+0x22>
  {
    return HAL_ERROR;
 810cd7a:	2301      	movs	r3, #1
 810cd7c:	e03c      	b.n	810cdf8 <HAL_ETH_WritePHYRegister+0x9c>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 810cd7e:	68fb      	ldr	r3, [r7, #12]
 810cd80:	681b      	ldr	r3, [r3, #0]
 810cd82:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 810cd86:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the write mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 810cd88:	697b      	ldr	r3, [r7, #20]
 810cd8a:	f023 7278 	bic.w	r2, r3, #65011712	@ 0x3e00000
 810cd8e:	68bb      	ldr	r3, [r7, #8]
 810cd90:	055b      	lsls	r3, r3, #21
 810cd92:	4313      	orrs	r3, r2
 810cd94:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 810cd96:	697b      	ldr	r3, [r7, #20]
 810cd98:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 810cd9c:	687b      	ldr	r3, [r7, #4]
 810cd9e:	041b      	lsls	r3, r3, #16
 810cda0:	4313      	orrs	r3, r2
 810cda2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_WR);
 810cda4:	697b      	ldr	r3, [r7, #20]
 810cda6:	f023 030c 	bic.w	r3, r3, #12
 810cdaa:	f043 0304 	orr.w	r3, r3, #4
 810cdae:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 810cdb0:	697b      	ldr	r3, [r7, #20]
 810cdb2:	f043 0301 	orr.w	r3, r3, #1
 810cdb6:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  WRITE_REG(ETH->MACMDIODR, (uint16_t)RegValue);
 810cdb8:	683b      	ldr	r3, [r7, #0]
 810cdba:	b29a      	uxth	r2, r3
 810cdbc:	4b10      	ldr	r3, [pc, #64]	@ (810ce00 <HAL_ETH_WritePHYRegister+0xa4>)
 810cdbe:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Write the result value into the MII Address register */
  WRITE_REG(ETH->MACMDIOAR, tmpreg);
 810cdc2:	4a0f      	ldr	r2, [pc, #60]	@ (810ce00 <HAL_ETH_WritePHYRegister+0xa4>)
 810cdc4:	697b      	ldr	r3, [r7, #20]
 810cdc6:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200

  tickstart = HAL_GetTick();
 810cdca:	f7ff f961 	bl	810c090 <HAL_GetTick>
 810cdce:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 810cdd0:	e009      	b.n	810cde6 <HAL_ETH_WritePHYRegister+0x8a>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 810cdd2:	f7ff f95d 	bl	810c090 <HAL_GetTick>
 810cdd6:	4602      	mov	r2, r0
 810cdd8:	693b      	ldr	r3, [r7, #16]
 810cdda:	1ad3      	subs	r3, r2, r3
 810cddc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 810cde0:	d901      	bls.n	810cde6 <HAL_ETH_WritePHYRegister+0x8a>
    {
      return HAL_ERROR;
 810cde2:	2301      	movs	r3, #1
 810cde4:	e008      	b.n	810cdf8 <HAL_ETH_WritePHYRegister+0x9c>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 810cde6:	68fb      	ldr	r3, [r7, #12]
 810cde8:	681b      	ldr	r3, [r3, #0]
 810cdea:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 810cdee:	f003 0301 	and.w	r3, r3, #1
 810cdf2:	2b00      	cmp	r3, #0
 810cdf4:	d1ed      	bne.n	810cdd2 <HAL_ETH_WritePHYRegister+0x76>
    }
  }

  return HAL_OK;
 810cdf6:	2300      	movs	r3, #0
}
 810cdf8:	4618      	mov	r0, r3
 810cdfa:	3718      	adds	r7, #24
 810cdfc:	46bd      	mov	sp, r7
 810cdfe:	bd80      	pop	{r7, pc}
 810ce00:	40028000 	.word	0x40028000

0810ce04 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(const ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 810ce04:	b480      	push	{r7}
 810ce06:	b083      	sub	sp, #12
 810ce08:	af00      	add	r7, sp, #0
 810ce0a:	6078      	str	r0, [r7, #4]
 810ce0c:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 810ce0e:	683b      	ldr	r3, [r7, #0]
 810ce10:	2b00      	cmp	r3, #0
 810ce12:	d101      	bne.n	810ce18 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 810ce14:	2301      	movs	r3, #1
 810ce16:	e1c3      	b.n	810d1a0 <HAL_ETH_GetMACConfig+0x39c>
  }

  /* Get MAC parameters */
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 810ce18:	687b      	ldr	r3, [r7, #4]
 810ce1a:	681b      	ldr	r3, [r3, #0]
 810ce1c:	681b      	ldr	r3, [r3, #0]
 810ce1e:	f003 020c 	and.w	r2, r3, #12
 810ce22:	683b      	ldr	r3, [r7, #0]
 810ce24:	62da      	str	r2, [r3, #44]	@ 0x2c
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 810ce26:	687b      	ldr	r3, [r7, #4]
 810ce28:	681b      	ldr	r3, [r3, #0]
 810ce2a:	681b      	ldr	r3, [r3, #0]
 810ce2c:	f003 0310 	and.w	r3, r3, #16
 810ce30:	2b00      	cmp	r3, #0
 810ce32:	bf14      	ite	ne
 810ce34:	2301      	movne	r3, #1
 810ce36:	2300      	moveq	r3, #0
 810ce38:	b2db      	uxtb	r3, r3
 810ce3a:	461a      	mov	r2, r3
 810ce3c:	683b      	ldr	r3, [r7, #0]
 810ce3e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 810ce42:	687b      	ldr	r3, [r7, #4]
 810ce44:	681b      	ldr	r3, [r3, #0]
 810ce46:	681b      	ldr	r3, [r3, #0]
 810ce48:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 810ce4c:	683b      	ldr	r3, [r7, #0]
 810ce4e:	625a      	str	r2, [r3, #36]	@ 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DR) >> 8) == 0U) ? ENABLE : DISABLE;
 810ce50:	687b      	ldr	r3, [r7, #4]
 810ce52:	681b      	ldr	r3, [r3, #0]
 810ce54:	681b      	ldr	r3, [r3, #0]
 810ce56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 810ce5a:	2b00      	cmp	r3, #0
 810ce5c:	bf0c      	ite	eq
 810ce5e:	2301      	moveq	r3, #1
 810ce60:	2300      	movne	r3, #0
 810ce62:	b2db      	uxtb	r3, r3
 810ce64:	461a      	mov	r2, r3
 810ce66:	683b      	ldr	r3, [r7, #0]
 810ce68:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 810ce6c:	687b      	ldr	r3, [r7, #4]
 810ce6e:	681b      	ldr	r3, [r3, #0]
 810ce70:	681b      	ldr	r3, [r3, #0]
 810ce72:	f403 7300 	and.w	r3, r3, #512	@ 0x200
                                        ? ENABLE : DISABLE;
 810ce76:	2b00      	cmp	r3, #0
 810ce78:	bf14      	ite	ne
 810ce7a:	2301      	movne	r3, #1
 810ce7c:	2300      	moveq	r3, #0
 810ce7e:	b2db      	uxtb	r3, r3
 810ce80:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 810ce82:	683b      	ldr	r3, [r7, #0]
 810ce84:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DO) >> 10) == 0U) ? ENABLE : DISABLE;
 810ce86:	687b      	ldr	r3, [r7, #4]
 810ce88:	681b      	ldr	r3, [r3, #0]
 810ce8a:	681b      	ldr	r3, [r3, #0]
 810ce8c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 810ce90:	2b00      	cmp	r3, #0
 810ce92:	bf0c      	ite	eq
 810ce94:	2301      	moveq	r3, #1
 810ce96:	2300      	movne	r3, #0
 810ce98:	b2db      	uxtb	r3, r3
 810ce9a:	461a      	mov	r2, r3
 810ce9c:	683b      	ldr	r3, [r7, #0]
 810ce9e:	779a      	strb	r2, [r3, #30]
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 810cea0:	687b      	ldr	r3, [r7, #4]
 810cea2:	681b      	ldr	r3, [r3, #0]
 810cea4:	681b      	ldr	r3, [r3, #0]
                                                   ETH_MACCR_ECRSFD) >> 11) > 0U) ? ENABLE : DISABLE;
 810cea6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 810ceaa:	2b00      	cmp	r3, #0
 810ceac:	bf14      	ite	ne
 810ceae:	2301      	movne	r3, #1
 810ceb0:	2300      	moveq	r3, #0
 810ceb2:	b2db      	uxtb	r3, r3
 810ceb4:	461a      	mov	r2, r3
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 810ceb6:	683b      	ldr	r3, [r7, #0]
 810ceb8:	775a      	strb	r2, [r3, #29]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 810ceba:	687b      	ldr	r3, [r7, #4]
 810cebc:	681b      	ldr	r3, [r3, #0]
 810cebe:	681b      	ldr	r3, [r3, #0]
 810cec0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 810cec4:	2b00      	cmp	r3, #0
 810cec6:	bf14      	ite	ne
 810cec8:	2301      	movne	r3, #1
 810ceca:	2300      	moveq	r3, #0
 810cecc:	b2db      	uxtb	r3, r3
 810cece:	461a      	mov	r2, r3
 810ced0:	683b      	ldr	r3, [r7, #0]
 810ced2:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 810ced4:	687b      	ldr	r3, [r7, #4]
 810ced6:	681b      	ldr	r3, [r3, #0]
 810ced8:	681b      	ldr	r3, [r3, #0]
 810ceda:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 810cede:	683b      	ldr	r3, [r7, #0]
 810cee0:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 810cee2:	687b      	ldr	r3, [r7, #4]
 810cee4:	681b      	ldr	r3, [r3, #0]
 810cee6:	681b      	ldr	r3, [r3, #0]
 810cee8:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 810ceec:	683b      	ldr	r3, [r7, #0]
 810ceee:	615a      	str	r2, [r3, #20]
  macconf->JumboPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JE) >> 16) > 0U) ? ENABLE : DISABLE;
 810cef0:	687b      	ldr	r3, [r7, #4]
 810cef2:	681b      	ldr	r3, [r3, #0]
 810cef4:	681b      	ldr	r3, [r3, #0]
 810cef6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 810cefa:	2b00      	cmp	r3, #0
 810cefc:	bf14      	ite	ne
 810cefe:	2301      	movne	r3, #1
 810cf00:	2300      	moveq	r3, #0
 810cf02:	b2db      	uxtb	r3, r3
 810cf04:	461a      	mov	r2, r3
 810cf06:	683b      	ldr	r3, [r7, #0]
 810cf08:	749a      	strb	r2, [r3, #18]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 17) == 0U) ? ENABLE : DISABLE;
 810cf0a:	687b      	ldr	r3, [r7, #4]
 810cf0c:	681b      	ldr	r3, [r3, #0]
 810cf0e:	681b      	ldr	r3, [r3, #0]
 810cf10:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 810cf14:	2b00      	cmp	r3, #0
 810cf16:	bf0c      	ite	eq
 810cf18:	2301      	moveq	r3, #1
 810cf1a:	2300      	movne	r3, #0
 810cf1c:	b2db      	uxtb	r3, r3
 810cf1e:	461a      	mov	r2, r3
 810cf20:	683b      	ldr	r3, [r7, #0]
 810cf22:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 19) == 0U) ? ENABLE : DISABLE;
 810cf24:	687b      	ldr	r3, [r7, #4]
 810cf26:	681b      	ldr	r3, [r3, #0]
 810cf28:	681b      	ldr	r3, [r3, #0]
 810cf2a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 810cf2e:	2b00      	cmp	r3, #0
 810cf30:	bf0c      	ite	eq
 810cf32:	2301      	moveq	r3, #1
 810cf34:	2300      	movne	r3, #0
 810cf36:	b2db      	uxtb	r3, r3
 810cf38:	461a      	mov	r2, r3
 810cf3a:	683b      	ldr	r3, [r7, #0]
 810cf3c:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ACS) >> 20) > 0U) ? ENABLE : DISABLE;
 810cf3e:	687b      	ldr	r3, [r7, #4]
 810cf40:	681b      	ldr	r3, [r3, #0]
 810cf42:	681b      	ldr	r3, [r3, #0]
 810cf44:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 810cf48:	2b00      	cmp	r3, #0
 810cf4a:	bf14      	ite	ne
 810cf4c:	2301      	movne	r3, #1
 810cf4e:	2300      	moveq	r3, #0
 810cf50:	b2db      	uxtb	r3, r3
 810cf52:	461a      	mov	r2, r3
 810cf54:	683b      	ldr	r3, [r7, #0]
 810cf56:	73da      	strb	r2, [r3, #15]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CST) >> 21) > 0U) ? ENABLE : DISABLE;
 810cf58:	687b      	ldr	r3, [r7, #4]
 810cf5a:	681b      	ldr	r3, [r3, #0]
 810cf5c:	681b      	ldr	r3, [r3, #0]
 810cf5e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 810cf62:	2b00      	cmp	r3, #0
 810cf64:	bf14      	ite	ne
 810cf66:	2301      	movne	r3, #1
 810cf68:	2300      	moveq	r3, #0
 810cf6a:	b2db      	uxtb	r3, r3
 810cf6c:	461a      	mov	r2, r3
 810cf6e:	683b      	ldr	r3, [r7, #0]
 810cf70:	739a      	strb	r2, [r3, #14]
  macconf->Support2KPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_S2KP) >> 22) > 0U) ? ENABLE : DISABLE;
 810cf72:	687b      	ldr	r3, [r7, #4]
 810cf74:	681b      	ldr	r3, [r3, #0]
 810cf76:	681b      	ldr	r3, [r3, #0]
 810cf78:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 810cf7c:	2b00      	cmp	r3, #0
 810cf7e:	bf14      	ite	ne
 810cf80:	2301      	movne	r3, #1
 810cf82:	2300      	moveq	r3, #0
 810cf84:	b2db      	uxtb	r3, r3
 810cf86:	461a      	mov	r2, r3
 810cf88:	683b      	ldr	r3, [r7, #0]
 810cf8a:	735a      	strb	r2, [r3, #13]
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 810cf8c:	687b      	ldr	r3, [r7, #4]
 810cf8e:	681b      	ldr	r3, [r3, #0]
 810cf90:	681b      	ldr	r3, [r3, #0]
                                                    ETH_MACCR_GPSLCE) >> 23) > 0U) ? ENABLE : DISABLE;
 810cf92:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 810cf96:	2b00      	cmp	r3, #0
 810cf98:	bf14      	ite	ne
 810cf9a:	2301      	movne	r3, #1
 810cf9c:	2300      	moveq	r3, #0
 810cf9e:	b2db      	uxtb	r3, r3
 810cfa0:	461a      	mov	r2, r3
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 810cfa2:	683b      	ldr	r3, [r7, #0]
 810cfa4:	731a      	strb	r2, [r3, #12]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPG);
 810cfa6:	687b      	ldr	r3, [r7, #4]
 810cfa8:	681b      	ldr	r3, [r3, #0]
 810cfaa:	681b      	ldr	r3, [r3, #0]
 810cfac:	f003 62e0 	and.w	r2, r3, #117440512	@ 0x7000000
 810cfb0:	683b      	ldr	r3, [r7, #0]
 810cfb2:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPC) >> 27) > 0U) ? ENABLE : DISABLE;
 810cfb4:	687b      	ldr	r3, [r7, #4]
 810cfb6:	681b      	ldr	r3, [r3, #0]
 810cfb8:	681b      	ldr	r3, [r3, #0]
 810cfba:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 810cfbe:	2b00      	cmp	r3, #0
 810cfc0:	bf14      	ite	ne
 810cfc2:	2301      	movne	r3, #1
 810cfc4:	2300      	moveq	r3, #0
 810cfc6:	b2db      	uxtb	r3, r3
 810cfc8:	461a      	mov	r2, r3
 810cfca:	683b      	ldr	r3, [r7, #0]
 810cfcc:	711a      	strb	r2, [r3, #4]
  macconf->SourceAddrControl = READ_BIT(heth->Instance->MACCR, ETH_MACCR_SARC);
 810cfce:	687b      	ldr	r3, [r7, #4]
 810cfd0:	681b      	ldr	r3, [r3, #0]
 810cfd2:	681b      	ldr	r3, [r3, #0]
 810cfd4:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 810cfd8:	683b      	ldr	r3, [r7, #0]
 810cfda:	601a      	str	r2, [r3, #0]

  macconf->GiantPacketSizeLimit = READ_BIT(heth->Instance->MACECR, ETH_MACECR_GPSL);
 810cfdc:	687b      	ldr	r3, [r7, #4]
 810cfde:	681b      	ldr	r3, [r3, #0]
 810cfe0:	685b      	ldr	r3, [r3, #4]
 810cfe2:	f3c3 020d 	ubfx	r2, r3, #0, #14
 810cfe6:	683b      	ldr	r3, [r7, #0]
 810cfe8:	635a      	str	r2, [r3, #52]	@ 0x34
  macconf->CRCCheckingRxPackets = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_DCRCC) >> 16) == 0U) ? ENABLE : DISABLE;
 810cfea:	687b      	ldr	r3, [r7, #4]
 810cfec:	681b      	ldr	r3, [r3, #0]
 810cfee:	685b      	ldr	r3, [r3, #4]
 810cff0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 810cff4:	2b00      	cmp	r3, #0
 810cff6:	bf0c      	ite	eq
 810cff8:	2301      	moveq	r3, #1
 810cffa:	2300      	movne	r3, #0
 810cffc:	b2db      	uxtb	r3, r3
 810cffe:	461a      	mov	r2, r3
 810d000:	683b      	ldr	r3, [r7, #0]
 810d002:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
  macconf->SlowProtocolDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_SPEN) >> 17) > 0U) ? ENABLE : DISABLE;
 810d006:	687b      	ldr	r3, [r7, #4]
 810d008:	681b      	ldr	r3, [r3, #0]
 810d00a:	685b      	ldr	r3, [r3, #4]
 810d00c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 810d010:	2b00      	cmp	r3, #0
 810d012:	bf14      	ite	ne
 810d014:	2301      	movne	r3, #1
 810d016:	2300      	moveq	r3, #0
 810d018:	b2db      	uxtb	r3, r3
 810d01a:	461a      	mov	r2, r3
 810d01c:	683b      	ldr	r3, [r7, #0]
 810d01e:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 810d022:	687b      	ldr	r3, [r7, #4]
 810d024:	681b      	ldr	r3, [r3, #0]
 810d026:	685b      	ldr	r3, [r3, #4]
                                                        ETH_MACECR_USP) >> 18) > 0U) ? ENABLE : DISABLE;
 810d028:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 810d02c:	2b00      	cmp	r3, #0
 810d02e:	bf14      	ite	ne
 810d030:	2301      	movne	r3, #1
 810d032:	2300      	moveq	r3, #0
 810d034:	b2db      	uxtb	r3, r3
 810d036:	461a      	mov	r2, r3
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 810d038:	683b      	ldr	r3, [r7, #0]
 810d03a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 810d03e:	687b      	ldr	r3, [r7, #4]
 810d040:	681b      	ldr	r3, [r3, #0]
 810d042:	685b      	ldr	r3, [r3, #4]
 810d044:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
                                    ? ENABLE : DISABLE;
 810d048:	2b00      	cmp	r3, #0
 810d04a:	bf14      	ite	ne
 810d04c:	2301      	movne	r3, #1
 810d04e:	2300      	moveq	r3, #0
 810d050:	b2db      	uxtb	r3, r3
 810d052:	461a      	mov	r2, r3
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 810d054:	683b      	ldr	r3, [r7, #0]
 810d056:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  macconf->ExtendedInterPacketGapVal = READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPG) >> 25;
 810d05a:	687b      	ldr	r3, [r7, #4]
 810d05c:	681b      	ldr	r3, [r3, #0]
 810d05e:	685b      	ldr	r3, [r3, #4]
 810d060:	0e5b      	lsrs	r3, r3, #25
 810d062:	f003 021f 	and.w	r2, r3, #31
 810d066:	683b      	ldr	r3, [r7, #0]
 810d068:	63da      	str	r2, [r3, #60]	@ 0x3c

  macconf->ProgrammableWatchdog = ((READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_PWE) >> 8) > 0U) ? ENABLE : DISABLE;
 810d06a:	687b      	ldr	r3, [r7, #4]
 810d06c:	681b      	ldr	r3, [r3, #0]
 810d06e:	68db      	ldr	r3, [r3, #12]
 810d070:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 810d074:	2b00      	cmp	r3, #0
 810d076:	bf14      	ite	ne
 810d078:	2301      	movne	r3, #1
 810d07a:	2300      	moveq	r3, #0
 810d07c:	b2db      	uxtb	r3, r3
 810d07e:	461a      	mov	r2, r3
 810d080:	683b      	ldr	r3, [r7, #0]
 810d082:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  macconf->WatchdogTimeout = READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_WTO);
 810d086:	687b      	ldr	r3, [r7, #4]
 810d088:	681b      	ldr	r3, [r3, #0]
 810d08a:	68db      	ldr	r3, [r3, #12]
 810d08c:	f003 020f 	and.w	r2, r3, #15
 810d090:	683b      	ldr	r3, [r7, #0]
 810d092:	645a      	str	r2, [r3, #68]	@ 0x44

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_TFE) >> 1) > 0U) ? ENABLE : DISABLE;
 810d094:	687b      	ldr	r3, [r7, #4]
 810d096:	681b      	ldr	r3, [r3, #0]
 810d098:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 810d09a:	f003 0302 	and.w	r3, r3, #2
 810d09e:	2b00      	cmp	r3, #0
 810d0a0:	bf14      	ite	ne
 810d0a2:	2301      	movne	r3, #1
 810d0a4:	2300      	moveq	r3, #0
 810d0a6:	b2db      	uxtb	r3, r3
 810d0a8:	461a      	mov	r2, r3
 810d0aa:	683b      	ldr	r3, [r7, #0]
 810d0ac:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_DZPQ) >> 7) == 0U) ? ENABLE : DISABLE;
 810d0b0:	687b      	ldr	r3, [r7, #4]
 810d0b2:	681b      	ldr	r3, [r3, #0]
 810d0b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 810d0b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 810d0ba:	2b00      	cmp	r3, #0
 810d0bc:	bf0c      	ite	eq
 810d0be:	2301      	moveq	r3, #1
 810d0c0:	2300      	movne	r3, #0
 810d0c2:	b2db      	uxtb	r3, r3
 810d0c4:	461a      	mov	r2, r3
 810d0c6:	683b      	ldr	r3, [r7, #0]
 810d0c8:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PLT);
 810d0cc:	687b      	ldr	r3, [r7, #4]
 810d0ce:	681b      	ldr	r3, [r3, #0]
 810d0d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 810d0d2:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 810d0d6:	683b      	ldr	r3, [r7, #0]
 810d0d8:	651a      	str	r2, [r3, #80]	@ 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PT) >> 16);
 810d0da:	687b      	ldr	r3, [r7, #4]
 810d0dc:	681b      	ldr	r3, [r3, #0]
 810d0de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 810d0e0:	0c1b      	lsrs	r3, r3, #16
 810d0e2:	b29a      	uxth	r2, r3
 810d0e4:	683b      	ldr	r3, [r7, #0]
 810d0e6:	649a      	str	r2, [r3, #72]	@ 0x48
  macconf->ReceiveFlowControl = (READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_RFE) > 0U) ? ENABLE : DISABLE;
 810d0e8:	687b      	ldr	r3, [r7, #4]
 810d0ea:	681b      	ldr	r3, [r3, #0]
 810d0ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 810d0f0:	f003 0301 	and.w	r3, r3, #1
 810d0f4:	2b00      	cmp	r3, #0
 810d0f6:	bf14      	ite	ne
 810d0f8:	2301      	movne	r3, #1
 810d0fa:	2300      	moveq	r3, #0
 810d0fc:	b2db      	uxtb	r3, r3
 810d0fe:	461a      	mov	r2, r3
 810d100:	683b      	ldr	r3, [r7, #0]
 810d102:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 810d106:	687b      	ldr	r3, [r7, #4]
 810d108:	681b      	ldr	r3, [r3, #0]
 810d10a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 810d10e:	f003 0302 	and.w	r3, r3, #2
                                      ? ENABLE : DISABLE;
 810d112:	2b00      	cmp	r3, #0
 810d114:	bf14      	ite	ne
 810d116:	2301      	movne	r3, #1
 810d118:	2300      	moveq	r3, #0
 810d11a:	b2db      	uxtb	r3, r3
 810d11c:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 810d11e:	683b      	ldr	r3, [r7, #0]
 810d120:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55

  macconf->TransmitQueueMode = READ_BIT(heth->Instance->MTLTQOMR, (ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF));
 810d124:	687b      	ldr	r3, [r7, #4]
 810d126:	681b      	ldr	r3, [r3, #0]
 810d128:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 810d12c:	f003 0272 	and.w	r2, r3, #114	@ 0x72
 810d130:	683b      	ldr	r3, [r7, #0]
 810d132:	659a      	str	r2, [r3, #88]	@ 0x58

  macconf->ReceiveQueueMode = READ_BIT(heth->Instance->MTLRQOMR, (ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF));
 810d134:	687b      	ldr	r3, [r7, #4]
 810d136:	681b      	ldr	r3, [r3, #0]
 810d138:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 810d13c:	f003 0223 	and.w	r2, r3, #35	@ 0x23
 810d140:	683b      	ldr	r3, [r7, #0]
 810d142:	65da      	str	r2, [r3, #92]	@ 0x5c
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 810d144:	687b      	ldr	r3, [r7, #4]
 810d146:	681b      	ldr	r3, [r3, #0]
 810d148:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
                                                      ETH_MTLRQOMR_FUP) >> 3) > 0U) ? ENABLE : DISABLE;
 810d14c:	f003 0308 	and.w	r3, r3, #8
 810d150:	2b00      	cmp	r3, #0
 810d152:	bf14      	ite	ne
 810d154:	2301      	movne	r3, #1
 810d156:	2300      	moveq	r3, #0
 810d158:	b2db      	uxtb	r3, r3
 810d15a:	461a      	mov	r2, r3
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 810d15c:	683b      	ldr	r3, [r7, #0]
 810d15e:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
  macconf->ForwardRxErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FEP) >> 4) > 0U) ? ENABLE : DISABLE;
 810d162:	687b      	ldr	r3, [r7, #4]
 810d164:	681b      	ldr	r3, [r3, #0]
 810d166:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 810d16a:	f003 0310 	and.w	r3, r3, #16
 810d16e:	2b00      	cmp	r3, #0
 810d170:	bf14      	ite	ne
 810d172:	2301      	movne	r3, #1
 810d174:	2300      	moveq	r3, #0
 810d176:	b2db      	uxtb	r3, r3
 810d178:	461a      	mov	r2, r3
 810d17a:	683b      	ldr	r3, [r7, #0]
 810d17c:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 810d180:	687b      	ldr	r3, [r7, #4]
 810d182:	681b      	ldr	r3, [r3, #0]
 810d184:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
                                                     ETH_MTLRQOMR_DISTCPEF) >> 6) == 0U) ? ENABLE : DISABLE;
 810d188:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 810d18c:	2b00      	cmp	r3, #0
 810d18e:	bf0c      	ite	eq
 810d190:	2301      	moveq	r3, #1
 810d192:	2300      	movne	r3, #0
 810d194:	b2db      	uxtb	r3, r3
 810d196:	461a      	mov	r2, r3
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 810d198:	683b      	ldr	r3, [r7, #0]
 810d19a:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  return HAL_OK;
 810d19e:	2300      	movs	r3, #0
}
 810d1a0:	4618      	mov	r0, r3
 810d1a2:	370c      	adds	r7, #12
 810d1a4:	46bd      	mov	sp, r7
 810d1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d1aa:	4770      	bx	lr

0810d1ac <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 810d1ac:	b580      	push	{r7, lr}
 810d1ae:	b082      	sub	sp, #8
 810d1b0:	af00      	add	r7, sp, #0
 810d1b2:	6078      	str	r0, [r7, #4]
 810d1b4:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 810d1b6:	683b      	ldr	r3, [r7, #0]
 810d1b8:	2b00      	cmp	r3, #0
 810d1ba:	d101      	bne.n	810d1c0 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 810d1bc:	2301      	movs	r3, #1
 810d1be:	e00b      	b.n	810d1d8 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 810d1c0:	687b      	ldr	r3, [r7, #4]
 810d1c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 810d1c6:	2b10      	cmp	r3, #16
 810d1c8:	d105      	bne.n	810d1d6 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 810d1ca:	6839      	ldr	r1, [r7, #0]
 810d1cc:	6878      	ldr	r0, [r7, #4]
 810d1ce:	f000 f871 	bl	810d2b4 <ETH_SetMACConfig>

    return HAL_OK;
 810d1d2:	2300      	movs	r3, #0
 810d1d4:	e000      	b.n	810d1d8 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 810d1d6:	2301      	movs	r3, #1
  }
}
 810d1d8:	4618      	mov	r0, r3
 810d1da:	3708      	adds	r7, #8
 810d1dc:	46bd      	mov	sp, r7
 810d1de:	bd80      	pop	{r7, pc}

0810d1e0 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 810d1e0:	b580      	push	{r7, lr}
 810d1e2:	b084      	sub	sp, #16
 810d1e4:	af00      	add	r7, sp, #0
 810d1e6:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 810d1e8:	687b      	ldr	r3, [r7, #4]
 810d1ea:	681b      	ldr	r3, [r3, #0]
 810d1ec:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 810d1f0:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 810d1f2:	68fb      	ldr	r3, [r7, #12]
 810d1f4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 810d1f8:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 810d1fa:	f001 fff1 	bl	810f1e0 <HAL_RCC_GetHCLKFreq>
 810d1fe:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 810d200:	68bb      	ldr	r3, [r7, #8]
 810d202:	4a1a      	ldr	r2, [pc, #104]	@ (810d26c <HAL_ETH_SetMDIOClockRange+0x8c>)
 810d204:	4293      	cmp	r3, r2
 810d206:	d804      	bhi.n	810d212 <HAL_ETH_SetMDIOClockRange+0x32>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 810d208:	68fb      	ldr	r3, [r7, #12]
 810d20a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 810d20e:	60fb      	str	r3, [r7, #12]
 810d210:	e022      	b.n	810d258 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 60000000U)
 810d212:	68bb      	ldr	r3, [r7, #8]
 810d214:	4a16      	ldr	r2, [pc, #88]	@ (810d270 <HAL_ETH_SetMDIOClockRange+0x90>)
 810d216:	4293      	cmp	r3, r2
 810d218:	d204      	bcs.n	810d224 <HAL_ETH_SetMDIOClockRange+0x44>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 810d21a:	68fb      	ldr	r3, [r7, #12]
 810d21c:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 810d220:	60fb      	str	r3, [r7, #12]
 810d222:	e019      	b.n	810d258 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 100000000U)
 810d224:	68bb      	ldr	r3, [r7, #8]
 810d226:	4a13      	ldr	r2, [pc, #76]	@ (810d274 <HAL_ETH_SetMDIOClockRange+0x94>)
 810d228:	4293      	cmp	r3, r2
 810d22a:	d915      	bls.n	810d258 <HAL_ETH_SetMDIOClockRange+0x78>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if (hclk < 150000000U)
 810d22c:	68bb      	ldr	r3, [r7, #8]
 810d22e:	4a12      	ldr	r2, [pc, #72]	@ (810d278 <HAL_ETH_SetMDIOClockRange+0x98>)
 810d230:	4293      	cmp	r3, r2
 810d232:	d804      	bhi.n	810d23e <HAL_ETH_SetMDIOClockRange+0x5e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 810d234:	68fb      	ldr	r3, [r7, #12]
 810d236:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 810d23a:	60fb      	str	r3, [r7, #12]
 810d23c:	e00c      	b.n	810d258 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 250000000U)
 810d23e:	68bb      	ldr	r3, [r7, #8]
 810d240:	4a0e      	ldr	r2, [pc, #56]	@ (810d27c <HAL_ETH_SetMDIOClockRange+0x9c>)
 810d242:	4293      	cmp	r3, r2
 810d244:	d804      	bhi.n	810d250 <HAL_ETH_SetMDIOClockRange+0x70>
  {
    /* CSR Clock Range between 150-250 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 810d246:	68fb      	ldr	r3, [r7, #12]
 810d248:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 810d24c:	60fb      	str	r3, [r7, #12]
 810d24e:	e003      	b.n	810d258 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else /* (hclk >= 250000000U) */
  {
    /* CSR Clock >= 250 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 810d250:	68fb      	ldr	r3, [r7, #12]
 810d252:	f443 63a0 	orr.w	r3, r3, #1280	@ 0x500
 810d256:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 810d258:	687b      	ldr	r3, [r7, #4]
 810d25a:	681b      	ldr	r3, [r3, #0]
 810d25c:	68fa      	ldr	r2, [r7, #12]
 810d25e:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
}
 810d262:	bf00      	nop
 810d264:	3710      	adds	r7, #16
 810d266:	46bd      	mov	sp, r7
 810d268:	bd80      	pop	{r7, pc}
 810d26a:	bf00      	nop
 810d26c:	02160ebf 	.word	0x02160ebf
 810d270:	03938700 	.word	0x03938700
 810d274:	05f5e0ff 	.word	0x05f5e0ff
 810d278:	08f0d17f 	.word	0x08f0d17f
 810d27c:	0ee6b27f 	.word	0x0ee6b27f

0810d280 <HAL_ETH_GetError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH Error Code
  */
uint32_t HAL_ETH_GetError(const ETH_HandleTypeDef *heth)
{
 810d280:	b480      	push	{r7}
 810d282:	b083      	sub	sp, #12
 810d284:	af00      	add	r7, sp, #0
 810d286:	6078      	str	r0, [r7, #4]
  return heth->ErrorCode;
 810d288:	687b      	ldr	r3, [r7, #4]
 810d28a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
}
 810d28e:	4618      	mov	r0, r3
 810d290:	370c      	adds	r7, #12
 810d292:	46bd      	mov	sp, r7
 810d294:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d298:	4770      	bx	lr

0810d29a <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(const ETH_HandleTypeDef *heth)
{
 810d29a:	b480      	push	{r7}
 810d29c:	b083      	sub	sp, #12
 810d29e:	af00      	add	r7, sp, #0
 810d2a0:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 810d2a2:	687b      	ldr	r3, [r7, #4]
 810d2a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
}
 810d2a8:	4618      	mov	r0, r3
 810d2aa:	370c      	adds	r7, #12
 810d2ac:	46bd      	mov	sp, r7
 810d2ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d2b2:	4770      	bx	lr

0810d2b4 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 810d2b4:	b480      	push	{r7}
 810d2b6:	b085      	sub	sp, #20
 810d2b8:	af00      	add	r7, sp, #0
 810d2ba:	6078      	str	r0, [r7, #4]
 810d2bc:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 810d2be:	683b      	ldr	r3, [r7, #0]
 810d2c0:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 810d2c2:	683b      	ldr	r3, [r7, #0]
 810d2c4:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 810d2c6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 810d2c8:	683b      	ldr	r3, [r7, #0]
 810d2ca:	791b      	ldrb	r3, [r3, #4]
 810d2cc:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 810d2ce:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 810d2d0:	683b      	ldr	r3, [r7, #0]
 810d2d2:	7b1b      	ldrb	r3, [r3, #12]
 810d2d4:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 810d2d6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 810d2d8:	683b      	ldr	r3, [r7, #0]
 810d2da:	7b5b      	ldrb	r3, [r3, #13]
 810d2dc:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 810d2de:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 810d2e0:	683b      	ldr	r3, [r7, #0]
 810d2e2:	7b9b      	ldrb	r3, [r3, #14]
 810d2e4:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 810d2e6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 810d2e8:	683b      	ldr	r3, [r7, #0]
 810d2ea:	7bdb      	ldrb	r3, [r3, #15]
 810d2ec:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 810d2ee:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 810d2f0:	683a      	ldr	r2, [r7, #0]
 810d2f2:	7c12      	ldrb	r2, [r2, #16]
 810d2f4:	2a00      	cmp	r2, #0
 810d2f6:	d102      	bne.n	810d2fe <ETH_SetMACConfig+0x4a>
 810d2f8:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 810d2fc:	e000      	b.n	810d300 <ETH_SetMACConfig+0x4c>
 810d2fe:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 810d300:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 810d302:	683a      	ldr	r2, [r7, #0]
 810d304:	7c52      	ldrb	r2, [r2, #17]
 810d306:	2a00      	cmp	r2, #0
 810d308:	d102      	bne.n	810d310 <ETH_SetMACConfig+0x5c>
 810d30a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 810d30e:	e000      	b.n	810d312 <ETH_SetMACConfig+0x5e>
 810d310:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 810d312:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 810d314:	683b      	ldr	r3, [r7, #0]
 810d316:	7c9b      	ldrb	r3, [r3, #18]
 810d318:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 810d31a:	431a      	orrs	r2, r3
               macconf->Speed |
 810d31c:	683b      	ldr	r3, [r7, #0]
 810d31e:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 810d320:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 810d322:	683b      	ldr	r3, [r7, #0]
 810d324:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 810d326:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 810d328:	683b      	ldr	r3, [r7, #0]
 810d32a:	7f1b      	ldrb	r3, [r3, #28]
 810d32c:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 810d32e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 810d330:	683b      	ldr	r3, [r7, #0]
 810d332:	7f5b      	ldrb	r3, [r3, #29]
 810d334:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 810d336:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 810d338:	683a      	ldr	r2, [r7, #0]
 810d33a:	7f92      	ldrb	r2, [r2, #30]
 810d33c:	2a00      	cmp	r2, #0
 810d33e:	d102      	bne.n	810d346 <ETH_SetMACConfig+0x92>
 810d340:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 810d344:	e000      	b.n	810d348 <ETH_SetMACConfig+0x94>
 810d346:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 810d348:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 810d34a:	683b      	ldr	r3, [r7, #0]
 810d34c:	7fdb      	ldrb	r3, [r3, #31]
 810d34e:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 810d350:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 810d352:	683a      	ldr	r2, [r7, #0]
 810d354:	f892 2020 	ldrb.w	r2, [r2, #32]
 810d358:	2a00      	cmp	r2, #0
 810d35a:	d102      	bne.n	810d362 <ETH_SetMACConfig+0xae>
 810d35c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 810d360:	e000      	b.n	810d364 <ETH_SetMACConfig+0xb0>
 810d362:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 810d364:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 810d366:	683b      	ldr	r3, [r7, #0]
 810d368:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 810d36a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 810d36c:	683b      	ldr	r3, [r7, #0]
 810d36e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 810d372:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 810d374:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 810d376:	683b      	ldr	r3, [r7, #0]
 810d378:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  macregval = (macconf->InterPacketGapVal |
 810d37a:	4313      	orrs	r3, r2
 810d37c:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 810d37e:	687b      	ldr	r3, [r7, #4]
 810d380:	681b      	ldr	r3, [r3, #0]
 810d382:	681a      	ldr	r2, [r3, #0]
 810d384:	4b57      	ldr	r3, [pc, #348]	@ (810d4e4 <ETH_SetMACConfig+0x230>)
 810d386:	4013      	ands	r3, r2
 810d388:	687a      	ldr	r2, [r7, #4]
 810d38a:	6812      	ldr	r2, [r2, #0]
 810d38c:	68f9      	ldr	r1, [r7, #12]
 810d38e:	430b      	orrs	r3, r1
 810d390:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 810d392:	683b      	ldr	r3, [r7, #0]
 810d394:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 810d396:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 810d398:	683b      	ldr	r3, [r7, #0]
 810d39a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 810d39e:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 810d3a0:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 810d3a2:	683b      	ldr	r3, [r7, #0]
 810d3a4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 810d3a8:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 810d3aa:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 810d3ac:	683b      	ldr	r3, [r7, #0]
 810d3ae:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 810d3b2:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 810d3b4:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 810d3b6:	683a      	ldr	r2, [r7, #0]
 810d3b8:	f892 2032 	ldrb.w	r2, [r2, #50]	@ 0x32
 810d3bc:	2a00      	cmp	r2, #0
 810d3be:	d102      	bne.n	810d3c6 <ETH_SetMACConfig+0x112>
 810d3c0:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 810d3c4:	e000      	b.n	810d3c8 <ETH_SetMACConfig+0x114>
 810d3c6:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 810d3c8:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 810d3ca:	683b      	ldr	r3, [r7, #0]
 810d3cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 810d3ce:	4313      	orrs	r3, r2
 810d3d0:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 810d3d2:	687b      	ldr	r3, [r7, #4]
 810d3d4:	681b      	ldr	r3, [r3, #0]
 810d3d6:	685a      	ldr	r2, [r3, #4]
 810d3d8:	4b43      	ldr	r3, [pc, #268]	@ (810d4e8 <ETH_SetMACConfig+0x234>)
 810d3da:	4013      	ands	r3, r2
 810d3dc:	687a      	ldr	r2, [r7, #4]
 810d3de:	6812      	ldr	r2, [r2, #0]
 810d3e0:	68f9      	ldr	r1, [r7, #12]
 810d3e2:	430b      	orrs	r3, r1
 810d3e4:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 810d3e6:	683b      	ldr	r3, [r7, #0]
 810d3e8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 810d3ec:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 810d3ee:	683b      	ldr	r3, [r7, #0]
 810d3f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 810d3f2:	4313      	orrs	r3, r2
 810d3f4:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 810d3f6:	687b      	ldr	r3, [r7, #4]
 810d3f8:	681b      	ldr	r3, [r3, #0]
 810d3fa:	68db      	ldr	r3, [r3, #12]
 810d3fc:	f423 7387 	bic.w	r3, r3, #270	@ 0x10e
 810d400:	f023 0301 	bic.w	r3, r3, #1
 810d404:	687a      	ldr	r2, [r7, #4]
 810d406:	6812      	ldr	r2, [r2, #0]
 810d408:	68f9      	ldr	r1, [r7, #12]
 810d40a:	430b      	orrs	r3, r1
 810d40c:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 810d40e:	683b      	ldr	r3, [r7, #0]
 810d410:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 810d414:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 810d416:	683b      	ldr	r3, [r7, #0]
 810d418:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 810d41a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 810d41c:	683a      	ldr	r2, [r7, #0]
 810d41e:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 810d422:	2a00      	cmp	r2, #0
 810d424:	d101      	bne.n	810d42a <ETH_SetMACConfig+0x176>
 810d426:	2280      	movs	r2, #128	@ 0x80
 810d428:	e000      	b.n	810d42c <ETH_SetMACConfig+0x178>
 810d42a:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 810d42c:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 810d42e:	683b      	ldr	r3, [r7, #0]
 810d430:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 810d432:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 810d434:	4313      	orrs	r3, r2
 810d436:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 810d438:	687b      	ldr	r3, [r7, #4]
 810d43a:	681b      	ldr	r3, [r3, #0]
 810d43c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 810d43e:	f64f 730d 	movw	r3, #65293	@ 0xff0d
 810d442:	4013      	ands	r3, r2
 810d444:	687a      	ldr	r2, [r7, #4]
 810d446:	6812      	ldr	r2, [r2, #0]
 810d448:	68f9      	ldr	r1, [r7, #12]
 810d44a:	430b      	orrs	r3, r1
 810d44c:	6713      	str	r3, [r2, #112]	@ 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 810d44e:	683b      	ldr	r3, [r7, #0]
 810d450:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 810d454:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 810d456:	683b      	ldr	r3, [r7, #0]
 810d458:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 810d45c:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 810d45e:	4313      	orrs	r3, r2
 810d460:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 810d462:	687b      	ldr	r3, [r7, #4]
 810d464:	681b      	ldr	r3, [r3, #0]
 810d466:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 810d46a:	f023 0103 	bic.w	r1, r3, #3
 810d46e:	687b      	ldr	r3, [r7, #4]
 810d470:	681b      	ldr	r3, [r3, #0]
 810d472:	68fa      	ldr	r2, [r7, #12]
 810d474:	430a      	orrs	r2, r1
 810d476:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 810d47a:	687b      	ldr	r3, [r7, #4]
 810d47c:	681b      	ldr	r3, [r3, #0]
 810d47e:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 810d482:	f023 0172 	bic.w	r1, r3, #114	@ 0x72
 810d486:	683b      	ldr	r3, [r7, #0]
 810d488:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 810d48a:	687b      	ldr	r3, [r7, #4]
 810d48c:	681b      	ldr	r3, [r3, #0]
 810d48e:	430a      	orrs	r2, r1
 810d490:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 810d494:	683b      	ldr	r3, [r7, #0]
 810d496:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 810d498:	683a      	ldr	r2, [r7, #0]
 810d49a:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 810d49e:	2a00      	cmp	r2, #0
 810d4a0:	d101      	bne.n	810d4a6 <ETH_SetMACConfig+0x1f2>
 810d4a2:	2240      	movs	r2, #64	@ 0x40
 810d4a4:	e000      	b.n	810d4a8 <ETH_SetMACConfig+0x1f4>
 810d4a6:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 810d4a8:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 810d4aa:	683b      	ldr	r3, [r7, #0]
 810d4ac:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 810d4b0:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 810d4b2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 810d4b4:	683b      	ldr	r3, [r7, #0]
 810d4b6:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 810d4ba:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 810d4bc:	4313      	orrs	r3, r2
 810d4be:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 810d4c0:	687b      	ldr	r3, [r7, #4]
 810d4c2:	681b      	ldr	r3, [r3, #0]
 810d4c4:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 810d4c8:	f023 017b 	bic.w	r1, r3, #123	@ 0x7b
 810d4cc:	687b      	ldr	r3, [r7, #4]
 810d4ce:	681b      	ldr	r3, [r3, #0]
 810d4d0:	68fa      	ldr	r2, [r7, #12]
 810d4d2:	430a      	orrs	r2, r1
 810d4d4:	f8c3 2d30 	str.w	r2, [r3, #3376]	@ 0xd30
}
 810d4d8:	bf00      	nop
 810d4da:	3714      	adds	r7, #20
 810d4dc:	46bd      	mov	sp, r7
 810d4de:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d4e2:	4770      	bx	lr
 810d4e4:	00048083 	.word	0x00048083
 810d4e8:	c0f88000 	.word	0xc0f88000

0810d4ec <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 810d4ec:	b480      	push	{r7}
 810d4ee:	b085      	sub	sp, #20
 810d4f0:	af00      	add	r7, sp, #0
 810d4f2:	6078      	str	r0, [r7, #4]
 810d4f4:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 810d4f6:	687b      	ldr	r3, [r7, #4]
 810d4f8:	681b      	ldr	r3, [r3, #0]
 810d4fa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 810d4fe:	681b      	ldr	r3, [r3, #0]
 810d500:	f423 43f0 	bic.w	r3, r3, #30720	@ 0x7800
 810d504:	f023 0302 	bic.w	r3, r3, #2
 810d508:	683a      	ldr	r2, [r7, #0]
 810d50a:	6811      	ldr	r1, [r2, #0]
 810d50c:	687a      	ldr	r2, [r7, #4]
 810d50e:	6812      	ldr	r2, [r2, #0]
 810d510:	430b      	orrs	r3, r1
 810d512:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 810d516:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 810d518:	683b      	ldr	r3, [r7, #0]
 810d51a:	791b      	ldrb	r3, [r3, #4]
 810d51c:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 810d51e:	683b      	ldr	r3, [r7, #0]
 810d520:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 810d522:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 810d524:	683b      	ldr	r3, [r7, #0]
 810d526:	7b1b      	ldrb	r3, [r3, #12]
 810d528:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 810d52a:	4313      	orrs	r3, r2
 810d52c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 810d52e:	687b      	ldr	r3, [r7, #4]
 810d530:	681b      	ldr	r3, [r3, #0]
 810d532:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 810d536:	685b      	ldr	r3, [r3, #4]
 810d538:	f423 4350 	bic.w	r3, r3, #53248	@ 0xd000
 810d53c:	f023 0301 	bic.w	r3, r3, #1
 810d540:	687a      	ldr	r2, [r7, #4]
 810d542:	6812      	ldr	r2, [r2, #0]
 810d544:	68f9      	ldr	r1, [r7, #12]
 810d546:	430b      	orrs	r3, r1
 810d548:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 810d54c:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 810d54e:	683b      	ldr	r3, [r7, #0]
 810d550:	7b5b      	ldrb	r3, [r3, #13]
 810d552:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 810d554:	683b      	ldr	r3, [r7, #0]
 810d556:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 810d558:	4313      	orrs	r3, r2
 810d55a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 810d55c:	687b      	ldr	r3, [r7, #4]
 810d55e:	681b      	ldr	r3, [r3, #0]
 810d560:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 810d564:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 810d568:	4b21      	ldr	r3, [pc, #132]	@ (810d5f0 <ETH_SetDMAConfig+0x104>)
 810d56a:	4013      	ands	r3, r2
 810d56c:	687a      	ldr	r2, [r7, #4]
 810d56e:	6812      	ldr	r2, [r2, #0]
 810d570:	68f9      	ldr	r1, [r7, #12]
 810d572:	430b      	orrs	r3, r1
 810d574:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 810d578:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 810d57c:	683b      	ldr	r3, [r7, #0]
 810d57e:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 810d580:	683b      	ldr	r3, [r7, #0]
 810d582:	7d1b      	ldrb	r3, [r3, #20]
 810d584:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 810d586:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 810d588:	683b      	ldr	r3, [r7, #0]
 810d58a:	7f5b      	ldrb	r3, [r3, #29]
 810d58c:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 810d58e:	4313      	orrs	r3, r2
 810d590:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 810d592:	687b      	ldr	r3, [r7, #4]
 810d594:	681b      	ldr	r3, [r3, #0]
 810d596:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 810d59a:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 810d59e:	4b15      	ldr	r3, [pc, #84]	@ (810d5f4 <ETH_SetDMAConfig+0x108>)
 810d5a0:	4013      	ands	r3, r2
 810d5a2:	687a      	ldr	r2, [r7, #4]
 810d5a4:	6812      	ldr	r2, [r2, #0]
 810d5a6:	68f9      	ldr	r1, [r7, #12]
 810d5a8:	430b      	orrs	r3, r1
 810d5aa:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 810d5ae:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 810d5b2:	683b      	ldr	r3, [r7, #0]
 810d5b4:	7f1b      	ldrb	r3, [r3, #28]
 810d5b6:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 810d5b8:	683b      	ldr	r3, [r7, #0]
 810d5ba:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 810d5bc:	4313      	orrs	r3, r2
 810d5be:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 810d5c0:	687b      	ldr	r3, [r7, #4]
 810d5c2:	681b      	ldr	r3, [r3, #0]
 810d5c4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 810d5c8:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 810d5cc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 810d5d0:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
 810d5d4:	687a      	ldr	r2, [r7, #4]
 810d5d6:	6812      	ldr	r2, [r2, #0]
 810d5d8:	68f9      	ldr	r1, [r7, #12]
 810d5da:	430b      	orrs	r3, r1
 810d5dc:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 810d5e0:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
}
 810d5e4:	bf00      	nop
 810d5e6:	3714      	adds	r7, #20
 810d5e8:	46bd      	mov	sp, r7
 810d5ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d5ee:	4770      	bx	lr
 810d5f0:	fffec000 	.word	0xfffec000
 810d5f4:	ffc0efef 	.word	0xffc0efef

0810d5f8 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 810d5f8:	b580      	push	{r7, lr}
 810d5fa:	b0a4      	sub	sp, #144	@ 0x90
 810d5fc:	af00      	add	r7, sp, #0
 810d5fe:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 810d600:	2301      	movs	r3, #1
 810d602:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 810d606:	2300      	movs	r3, #0
 810d608:	653b      	str	r3, [r7, #80]	@ 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 810d60a:	2300      	movs	r3, #0
 810d60c:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 810d610:	2300      	movs	r3, #0
 810d612:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 810d616:	2301      	movs	r3, #1
 810d618:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 810d61c:	2301      	movs	r3, #1
 810d61e:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 810d622:	2301      	movs	r3, #1
 810d624:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 810d628:	2300      	movs	r3, #0
 810d62a:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 810d62e:	2301      	movs	r3, #1
 810d630:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 810d634:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 810d638:	647b      	str	r3, [r7, #68]	@ 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 810d63a:	2300      	movs	r3, #0
 810d63c:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 810d640:	2300      	movs	r3, #0
 810d642:	66bb      	str	r3, [r7, #104]	@ 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 810d644:	2300      	movs	r3, #0
 810d646:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 810d64a:	2300      	movs	r3, #0
 810d64c:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 810d650:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
 810d654:	663b      	str	r3, [r7, #96]	@ 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 810d656:	2300      	movs	r3, #0
 810d658:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 810d65c:	2300      	movs	r3, #0
 810d65e:	637b      	str	r3, [r7, #52]	@ 0x34
  macDefaultConf.Jabber = ENABLE;
 810d660:	2301      	movs	r3, #1
 810d662:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 810d666:	2300      	movs	r3, #0
 810d668:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 810d66c:	2300      	movs	r3, #0
 810d66e:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 810d672:	2300      	movs	r3, #0
 810d674:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.PauseTime = 0x0U;
 810d676:	2300      	movs	r3, #0
 810d678:	677b      	str	r3, [r7, #116]	@ 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 810d67a:	2300      	movs	r3, #0
 810d67c:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 810d67e:	2300      	movs	r3, #0
 810d680:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 810d684:	2300      	movs	r3, #0
 810d686:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 810d68a:	2301      	movs	r3, #1
 810d68c:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 810d690:	2320      	movs	r3, #32
 810d692:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 810d696:	2301      	movs	r3, #1
 810d698:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 810d69c:	2300      	movs	r3, #0
 810d69e:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 810d6a2:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 810d6a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 810d6a8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 810d6ac:	643b      	str	r3, [r7, #64]	@ 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 810d6ae:	2300      	movs	r3, #0
 810d6b0:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 810d6b4:	2302      	movs	r3, #2
 810d6b6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 810d6ba:	2300      	movs	r3, #0
 810d6bc:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 810d6c0:	2300      	movs	r3, #0
 810d6c2:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 810d6c6:	2300      	movs	r3, #0
 810d6c8:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.Watchdog = ENABLE;
 810d6cc:	2301      	movs	r3, #1
 810d6ce:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 810d6d2:	2300      	movs	r3, #0
 810d6d4:	673b      	str	r3, [r7, #112]	@ 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 810d6d6:	2301      	movs	r3, #1
 810d6d8:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 810d6dc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 810d6e0:	4619      	mov	r1, r3
 810d6e2:	6878      	ldr	r0, [r7, #4]
 810d6e4:	f7ff fde6 	bl	810d2b4 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 810d6e8:	2301      	movs	r3, #1
 810d6ea:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 810d6ec:	2301      	movs	r3, #1
 810d6ee:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 810d6f0:	2300      	movs	r3, #0
 810d6f2:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 810d6f4:	2300      	movs	r3, #0
 810d6f6:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 810d6fa:	2300      	movs	r3, #0
 810d6fc:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 810d6fe:	2300      	movs	r3, #0
 810d700:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 810d702:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 810d706:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 810d708:	2300      	movs	r3, #0
 810d70a:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 810d70c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 810d710:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 810d712:	2300      	movs	r3, #0
 810d714:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 810d718:	f44f 7306 	mov.w	r3, #536	@ 0x218
 810d71c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 810d71e:	f107 0308 	add.w	r3, r7, #8
 810d722:	4619      	mov	r1, r3
 810d724:	6878      	ldr	r0, [r7, #4]
 810d726:	f7ff fee1 	bl	810d4ec <ETH_SetDMAConfig>
}
 810d72a:	bf00      	nop
 810d72c:	3790      	adds	r7, #144	@ 0x90
 810d72e:	46bd      	mov	sp, r7
 810d730:	bd80      	pop	{r7, pc}

0810d732 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 810d732:	b480      	push	{r7}
 810d734:	b085      	sub	sp, #20
 810d736:	af00      	add	r7, sp, #0
 810d738:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 810d73a:	2300      	movs	r3, #0
 810d73c:	60fb      	str	r3, [r7, #12]
 810d73e:	e01d      	b.n	810d77c <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 810d740:	687b      	ldr	r3, [r7, #4]
 810d742:	68d9      	ldr	r1, [r3, #12]
 810d744:	68fa      	ldr	r2, [r7, #12]
 810d746:	4613      	mov	r3, r2
 810d748:	005b      	lsls	r3, r3, #1
 810d74a:	4413      	add	r3, r2
 810d74c:	00db      	lsls	r3, r3, #3
 810d74e:	440b      	add	r3, r1
 810d750:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 810d752:	68bb      	ldr	r3, [r7, #8]
 810d754:	2200      	movs	r2, #0
 810d756:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 810d758:	68bb      	ldr	r3, [r7, #8]
 810d75a:	2200      	movs	r2, #0
 810d75c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 810d75e:	68bb      	ldr	r3, [r7, #8]
 810d760:	2200      	movs	r2, #0
 810d762:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 810d764:	68bb      	ldr	r3, [r7, #8]
 810d766:	2200      	movs	r2, #0
 810d768:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 810d76a:	68b9      	ldr	r1, [r7, #8]
 810d76c:	687b      	ldr	r3, [r7, #4]
 810d76e:	68fa      	ldr	r2, [r7, #12]
 810d770:	3206      	adds	r2, #6
 810d772:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 810d776:	68fb      	ldr	r3, [r7, #12]
 810d778:	3301      	adds	r3, #1
 810d77a:	60fb      	str	r3, [r7, #12]
 810d77c:	68fb      	ldr	r3, [r7, #12]
 810d77e:	2b03      	cmp	r3, #3
 810d780:	d9de      	bls.n	810d740 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 810d782:	687b      	ldr	r3, [r7, #4]
 810d784:	2200      	movs	r2, #0
 810d786:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 810d788:	687b      	ldr	r3, [r7, #4]
 810d78a:	681b      	ldr	r3, [r3, #0]
 810d78c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 810d790:	461a      	mov	r2, r3
 810d792:	2303      	movs	r3, #3
 810d794:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 810d798:	687b      	ldr	r3, [r7, #4]
 810d79a:	68da      	ldr	r2, [r3, #12]
 810d79c:	687b      	ldr	r3, [r7, #4]
 810d79e:	681b      	ldr	r3, [r3, #0]
 810d7a0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 810d7a4:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 810d7a8:	687b      	ldr	r3, [r7, #4]
 810d7aa:	68da      	ldr	r2, [r3, #12]
 810d7ac:	687b      	ldr	r3, [r7, #4]
 810d7ae:	681b      	ldr	r3, [r3, #0]
 810d7b0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 810d7b4:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
}
 810d7b8:	bf00      	nop
 810d7ba:	3714      	adds	r7, #20
 810d7bc:	46bd      	mov	sp, r7
 810d7be:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d7c2:	4770      	bx	lr

0810d7c4 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 810d7c4:	b480      	push	{r7}
 810d7c6:	b085      	sub	sp, #20
 810d7c8:	af00      	add	r7, sp, #0
 810d7ca:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 810d7cc:	2300      	movs	r3, #0
 810d7ce:	60fb      	str	r3, [r7, #12]
 810d7d0:	e023      	b.n	810d81a <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 810d7d2:	687b      	ldr	r3, [r7, #4]
 810d7d4:	6919      	ldr	r1, [r3, #16]
 810d7d6:	68fa      	ldr	r2, [r7, #12]
 810d7d8:	4613      	mov	r3, r2
 810d7da:	005b      	lsls	r3, r3, #1
 810d7dc:	4413      	add	r3, r2
 810d7de:	00db      	lsls	r3, r3, #3
 810d7e0:	440b      	add	r3, r1
 810d7e2:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 810d7e4:	68bb      	ldr	r3, [r7, #8]
 810d7e6:	2200      	movs	r2, #0
 810d7e8:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 810d7ea:	68bb      	ldr	r3, [r7, #8]
 810d7ec:	2200      	movs	r2, #0
 810d7ee:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 810d7f0:	68bb      	ldr	r3, [r7, #8]
 810d7f2:	2200      	movs	r2, #0
 810d7f4:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 810d7f6:	68bb      	ldr	r3, [r7, #8]
 810d7f8:	2200      	movs	r2, #0
 810d7fa:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 810d7fc:	68bb      	ldr	r3, [r7, #8]
 810d7fe:	2200      	movs	r2, #0
 810d800:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 810d802:	68bb      	ldr	r3, [r7, #8]
 810d804:	2200      	movs	r2, #0
 810d806:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 810d808:	68b9      	ldr	r1, [r7, #8]
 810d80a:	687b      	ldr	r3, [r7, #4]
 810d80c:	68fa      	ldr	r2, [r7, #12]
 810d80e:	3212      	adds	r2, #18
 810d810:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 810d814:	68fb      	ldr	r3, [r7, #12]
 810d816:	3301      	adds	r3, #1
 810d818:	60fb      	str	r3, [r7, #12]
 810d81a:	68fb      	ldr	r3, [r7, #12]
 810d81c:	2b03      	cmp	r3, #3
 810d81e:	d9d8      	bls.n	810d7d2 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 810d820:	687b      	ldr	r3, [r7, #4]
 810d822:	2200      	movs	r2, #0
 810d824:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 810d826:	687b      	ldr	r3, [r7, #4]
 810d828:	2200      	movs	r2, #0
 810d82a:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 810d82c:	687b      	ldr	r3, [r7, #4]
 810d82e:	2200      	movs	r2, #0
 810d830:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 810d832:	687b      	ldr	r3, [r7, #4]
 810d834:	2200      	movs	r2, #0
 810d836:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 810d838:	687b      	ldr	r3, [r7, #4]
 810d83a:	2200      	movs	r2, #0
 810d83c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 810d83e:	687b      	ldr	r3, [r7, #4]
 810d840:	681b      	ldr	r3, [r3, #0]
 810d842:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 810d846:	461a      	mov	r2, r3
 810d848:	2303      	movs	r3, #3
 810d84a:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 810d84e:	687b      	ldr	r3, [r7, #4]
 810d850:	691a      	ldr	r2, [r3, #16]
 810d852:	687b      	ldr	r3, [r7, #4]
 810d854:	681b      	ldr	r3, [r3, #0]
 810d856:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 810d85a:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 810d85e:	687b      	ldr	r3, [r7, #4]
 810d860:	691b      	ldr	r3, [r3, #16]
 810d862:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 810d866:	687b      	ldr	r3, [r7, #4]
 810d868:	681b      	ldr	r3, [r3, #0]
 810d86a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 810d86e:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
}
 810d872:	bf00      	nop
 810d874:	3714      	adds	r7, #20
 810d876:	46bd      	mov	sp, r7
 810d878:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d87c:	4770      	bx	lr

0810d87e <ETH_Prepare_Tx_Descriptors>:
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, const ETH_TxPacketConfigTypeDef *pTxConfig,
                                           uint32_t ItMode)
{
 810d87e:	b480      	push	{r7}
 810d880:	b091      	sub	sp, #68	@ 0x44
 810d882:	af00      	add	r7, sp, #0
 810d884:	60f8      	str	r0, [r7, #12]
 810d886:	60b9      	str	r1, [r7, #8]
 810d888:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 810d88a:	68fb      	ldr	r3, [r7, #12]
 810d88c:	3318      	adds	r3, #24
 810d88e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 810d890:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810d892:	691b      	ldr	r3, [r3, #16]
 810d894:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 810d896:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810d898:	691b      	ldr	r3, [r3, #16]
 810d89a:	623b      	str	r3, [r7, #32]
  uint32_t idx;
  uint32_t descnbr = 0;
 810d89c:	2300      	movs	r3, #0
 810d89e:	637b      	str	r3, [r7, #52]	@ 0x34
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 810d8a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810d8a2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 810d8a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 810d8a8:	633b      	str	r3, [r7, #48]	@ 0x30

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 810d8aa:	68bb      	ldr	r3, [r7, #8]
 810d8ac:	689b      	ldr	r3, [r3, #8]
 810d8ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t           bd_count = 0;
 810d8b0:	2300      	movs	r3, #0
 810d8b2:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t primask_bit;

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 810d8b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810d8b6:	68db      	ldr	r3, [r3, #12]
 810d8b8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 810d8bc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 810d8c0:	d007      	beq.n	810d8d2 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 810d8c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 810d8c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810d8c6:	3304      	adds	r3, #4
 810d8c8:	009b      	lsls	r3, r3, #2
 810d8ca:	4413      	add	r3, r2
 810d8cc:	685b      	ldr	r3, [r3, #4]
 810d8ce:	2b00      	cmp	r3, #0
 810d8d0:	d001      	beq.n	810d8d6 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 810d8d2:	2302      	movs	r3, #2
 810d8d4:	e267      	b.n	810dda6 <ETH_Prepare_Tx_Descriptors+0x528>

  /***************************************************************************/
  /*****************    Context descriptor configuration (Optional) **********/
  /***************************************************************************/
  /* If VLAN tag is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 810d8d6:	68bb      	ldr	r3, [r7, #8]
 810d8d8:	681b      	ldr	r3, [r3, #0]
 810d8da:	f003 0304 	and.w	r3, r3, #4
 810d8de:	2b00      	cmp	r3, #0
 810d8e0:	d044      	beq.n	810d96c <ETH_Prepare_Tx_Descriptors+0xee>
  {
    /* Set vlan tag value */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_VT, pTxConfig->VlanTag);
 810d8e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810d8e4:	68db      	ldr	r3, [r3, #12]
 810d8e6:	0c1b      	lsrs	r3, r3, #16
 810d8e8:	041b      	lsls	r3, r3, #16
 810d8ea:	68ba      	ldr	r2, [r7, #8]
 810d8ec:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 810d8ee:	431a      	orrs	r2, r3
 810d8f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810d8f2:	60da      	str	r2, [r3, #12]
    /* Set vlan tag valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_VLTV);
 810d8f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810d8f6:	68db      	ldr	r3, [r3, #12]
 810d8f8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 810d8fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810d8fe:	60da      	str	r2, [r3, #12]
    /* Set the descriptor as the vlan input source */
    SET_BIT(heth->Instance->MACVIR, ETH_MACVIR_VLTI);
 810d900:	68fb      	ldr	r3, [r7, #12]
 810d902:	681b      	ldr	r3, [r3, #0]
 810d904:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 810d906:	68fb      	ldr	r3, [r7, #12]
 810d908:	681b      	ldr	r3, [r3, #0]
 810d90a:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 810d90e:	661a      	str	r2, [r3, #96]	@ 0x60

    /* if inner VLAN is enabled */
    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_INNERVLANTAG) != (uint32_t)RESET)
 810d910:	68bb      	ldr	r3, [r7, #8]
 810d912:	681b      	ldr	r3, [r3, #0]
 810d914:	f003 0308 	and.w	r3, r3, #8
 810d918:	2b00      	cmp	r3, #0
 810d91a:	d027      	beq.n	810d96c <ETH_Prepare_Tx_Descriptors+0xee>
    {
      /* Set inner vlan tag value */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_IVT, (pTxConfig->InnerVlanTag << 16));
 810d91c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810d91e:	689b      	ldr	r3, [r3, #8]
 810d920:	b29a      	uxth	r2, r3
 810d922:	68bb      	ldr	r3, [r7, #8]
 810d924:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810d926:	041b      	lsls	r3, r3, #16
 810d928:	431a      	orrs	r2, r3
 810d92a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810d92c:	609a      	str	r2, [r3, #8]
      /* Set inner vlan tag valid bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_IVLTV);
 810d92e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810d930:	68db      	ldr	r3, [r3, #12]
 810d932:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 810d936:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810d938:	60da      	str	r2, [r3, #12]

      /* Set Vlan Tag control */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_IVTIR, pTxConfig->InnerVlanCtrl);
 810d93a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810d93c:	68db      	ldr	r3, [r3, #12]
 810d93e:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 810d942:	68bb      	ldr	r3, [r7, #8]
 810d944:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810d946:	431a      	orrs	r2, r3
 810d948:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810d94a:	60da      	str	r2, [r3, #12]

      /* Set the descriptor as the inner vlan input source */
      SET_BIT(heth->Instance->MACIVIR, ETH_MACIVIR_VLTI);
 810d94c:	68fb      	ldr	r3, [r7, #12]
 810d94e:	681b      	ldr	r3, [r3, #0]
 810d950:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 810d952:	68fb      	ldr	r3, [r7, #12]
 810d954:	681b      	ldr	r3, [r3, #0]
 810d956:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 810d95a:	665a      	str	r2, [r3, #100]	@ 0x64
      /* Enable double VLAN processing */
      SET_BIT(heth->Instance->MACVTR, ETH_MACVTR_EDVLP);
 810d95c:	68fb      	ldr	r3, [r7, #12]
 810d95e:	681b      	ldr	r3, [r3, #0]
 810d960:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 810d962:	68fb      	ldr	r3, [r7, #12]
 810d964:	681b      	ldr	r3, [r3, #0]
 810d966:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 810d96a:	651a      	str	r2, [r3, #80]	@ 0x50
    }
  }

  /* if tcp segmentation is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 810d96c:	68bb      	ldr	r3, [r7, #8]
 810d96e:	681b      	ldr	r3, [r3, #0]
 810d970:	f003 0310 	and.w	r3, r3, #16
 810d974:	2b00      	cmp	r3, #0
 810d976:	d010      	beq.n	810d99a <ETH_Prepare_Tx_Descriptors+0x11c>
  {
    /* Set MSS value */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_MSS, pTxConfig->MaxSegmentSize);
 810d978:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810d97a:	689b      	ldr	r3, [r3, #8]
 810d97c:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 810d980:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 810d984:	68ba      	ldr	r2, [r7, #8]
 810d986:	6992      	ldr	r2, [r2, #24]
 810d988:	431a      	orrs	r2, r3
 810d98a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810d98c:	609a      	str	r2, [r3, #8]
    /* Set MSS valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_TCMSSV);
 810d98e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810d990:	68db      	ldr	r3, [r3, #12]
 810d992:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 810d996:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810d998:	60da      	str	r2, [r3, #12]
  }

  if ((READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 810d99a:	68bb      	ldr	r3, [r7, #8]
 810d99c:	681b      	ldr	r3, [r3, #0]
 810d99e:	f003 0304 	and.w	r3, r3, #4
 810d9a2:	2b00      	cmp	r3, #0
 810d9a4:	d105      	bne.n	810d9b2 <ETH_Prepare_Tx_Descriptors+0x134>
      || (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET))
 810d9a6:	68bb      	ldr	r3, [r7, #8]
 810d9a8:	681b      	ldr	r3, [r3, #0]
 810d9aa:	f003 0310 	and.w	r3, r3, #16
 810d9ae:	2b00      	cmp	r3, #0
 810d9b0:	d036      	beq.n	810da20 <ETH_Prepare_Tx_Descriptors+0x1a2>
  {
    /* Set as context descriptor */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_CTXT);
 810d9b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810d9b4:	68db      	ldr	r3, [r3, #12]
 810d9b6:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 810d9ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810d9bc:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 810d9be:	f3bf 8f5f 	dmb	sy
}
 810d9c2:	bf00      	nop
    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 810d9c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810d9c6:	68db      	ldr	r3, [r3, #12]
 810d9c8:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 810d9cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810d9ce:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 810d9d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810d9d2:	3301      	adds	r3, #1
 810d9d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 810d9d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810d9d8:	2b03      	cmp	r3, #3
 810d9da:	d902      	bls.n	810d9e2 <ETH_Prepare_Tx_Descriptors+0x164>
 810d9dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810d9de:	3b04      	subs	r3, #4
 810d9e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 810d9e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810d9e4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 810d9e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 810d9ea:	633b      	str	r3, [r7, #48]	@ 0x30

    descnbr += 1U;
 810d9ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810d9ee:	3301      	adds	r3, #1
 810d9f0:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if (READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 810d9f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810d9f4:	68db      	ldr	r3, [r3, #12]
 810d9f6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 810d9fa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 810d9fe:	d10f      	bne.n	810da20 <ETH_Prepare_Tx_Descriptors+0x1a2>
    {
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 810da00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810da02:	6a3a      	ldr	r2, [r7, #32]
 810da04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 810da08:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("dmb 0xF":::"memory");
 810da0a:	f3bf 8f5f 	dmb	sy
}
 810da0e:	bf00      	nop
      /* Ensure rest of descriptor is written to RAM before the OWN bit */
      __DMB();
      /* Clear own bit */
      CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 810da10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810da12:	68db      	ldr	r3, [r3, #12]
 810da14:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 810da18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810da1a:	60da      	str	r2, [r3, #12]

      return HAL_ETH_ERROR_BUSY;
 810da1c:	2302      	movs	r3, #2
 810da1e:	e1c2      	b.n	810dda6 <ETH_Prepare_Tx_Descriptors+0x528>

  /***************************************************************************/
  /*****************    Normal descriptors configuration     *****************/
  /***************************************************************************/

  descnbr += 1U;
 810da20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810da22:	3301      	adds	r3, #1
 810da24:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 810da26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810da28:	681b      	ldr	r3, [r3, #0]
 810da2a:	461a      	mov	r2, r3
 810da2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810da2e:	601a      	str	r2, [r3, #0]
  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 810da30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810da32:	689b      	ldr	r3, [r3, #8]
 810da34:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 810da38:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 810da3c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 810da3e:	6852      	ldr	r2, [r2, #4]
 810da40:	431a      	orrs	r2, r3
 810da42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810da44:	609a      	str	r2, [r3, #8]

  if (txbuffer->next != NULL)
 810da46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810da48:	689b      	ldr	r3, [r3, #8]
 810da4a:	2b00      	cmp	r3, #0
 810da4c:	d014      	beq.n	810da78 <ETH_Prepare_Tx_Descriptors+0x1fa>
  {
    txbuffer = txbuffer->next;
 810da4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810da50:	689b      	ldr	r3, [r3, #8]
 810da52:	62fb      	str	r3, [r7, #44]	@ 0x2c
    /* Set buffer 2 address */
    WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 810da54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810da56:	681b      	ldr	r3, [r3, #0]
 810da58:	461a      	mov	r2, r3
 810da5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810da5c:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 810da5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810da60:	689b      	ldr	r3, [r3, #8]
 810da62:	f023 537f 	bic.w	r3, r3, #1069547520	@ 0x3fc00000
 810da66:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
 810da6a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 810da6c:	6852      	ldr	r2, [r2, #4]
 810da6e:	0412      	lsls	r2, r2, #16
 810da70:	431a      	orrs	r2, r3
 810da72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810da74:	609a      	str	r2, [r3, #8]
 810da76:	e00a      	b.n	810da8e <ETH_Prepare_Tx_Descriptors+0x210>
  }
  else
  {
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 810da78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810da7a:	2200      	movs	r2, #0
 810da7c:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 810da7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810da80:	689b      	ldr	r3, [r3, #8]
 810da82:	f023 537f 	bic.w	r3, r3, #1069547520	@ 0x3fc00000
 810da86:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
 810da8a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810da8c:	6093      	str	r3, [r2, #8]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 810da8e:	68bb      	ldr	r3, [r7, #8]
 810da90:	681b      	ldr	r3, [r3, #0]
 810da92:	f003 0310 	and.w	r3, r3, #16
 810da96:	2b00      	cmp	r3, #0
 810da98:	d019      	beq.n	810dace <ETH_Prepare_Tx_Descriptors+0x250>
  {
    /* Set TCP Header length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 810da9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810da9c:	68db      	ldr	r3, [r3, #12]
 810da9e:	f423 02f0 	bic.w	r2, r3, #7864320	@ 0x780000
 810daa2:	68bb      	ldr	r3, [r7, #8]
 810daa4:	6a1b      	ldr	r3, [r3, #32]
 810daa6:	04db      	lsls	r3, r3, #19
 810daa8:	431a      	orrs	r2, r3
 810daaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810daac:	60da      	str	r2, [r3, #12]
    /* Set TCP payload length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 810daae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810dab0:	68db      	ldr	r3, [r3, #12]
 810dab2:	0c9b      	lsrs	r3, r3, #18
 810dab4:	049b      	lsls	r3, r3, #18
 810dab6:	68ba      	ldr	r2, [r7, #8]
 810dab8:	69d2      	ldr	r2, [r2, #28]
 810daba:	431a      	orrs	r2, r3
 810dabc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810dabe:	60da      	str	r2, [r3, #12]
    /* Set TCP Segmentation Enabled bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 810dac0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810dac2:	68db      	ldr	r3, [r3, #12]
 810dac4:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 810dac8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810daca:	60da      	str	r2, [r3, #12]
 810dacc:	e028      	b.n	810db20 <ETH_Prepare_Tx_Descriptors+0x2a2>
  }
  else
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 810dace:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810dad0:	68db      	ldr	r3, [r3, #12]
 810dad2:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 810dad6:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 810dada:	68ba      	ldr	r2, [r7, #8]
 810dadc:	6852      	ldr	r2, [r2, #4]
 810dade:	431a      	orrs	r2, r3
 810dae0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810dae2:	60da      	str	r2, [r3, #12]

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 810dae4:	68bb      	ldr	r3, [r7, #8]
 810dae6:	681b      	ldr	r3, [r3, #0]
 810dae8:	f003 0301 	and.w	r3, r3, #1
 810daec:	2b00      	cmp	r3, #0
 810daee:	d008      	beq.n	810db02 <ETH_Prepare_Tx_Descriptors+0x284>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 810daf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810daf2:	68db      	ldr	r3, [r3, #12]
 810daf4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 810daf8:	68bb      	ldr	r3, [r7, #8]
 810dafa:	695b      	ldr	r3, [r3, #20]
 810dafc:	431a      	orrs	r2, r3
 810dafe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810db00:	60da      	str	r2, [r3, #12]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != (uint32_t)RESET)
 810db02:	68bb      	ldr	r3, [r7, #8]
 810db04:	681b      	ldr	r3, [r3, #0]
 810db06:	f003 0320 	and.w	r3, r3, #32
 810db0a:	2b00      	cmp	r3, #0
 810db0c:	d008      	beq.n	810db20 <ETH_Prepare_Tx_Descriptors+0x2a2>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl);
 810db0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810db10:	68db      	ldr	r3, [r3, #12]
 810db12:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 810db16:	68bb      	ldr	r3, [r7, #8]
 810db18:	691b      	ldr	r3, [r3, #16]
 810db1a:	431a      	orrs	r2, r3
 810db1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810db1e:	60da      	str	r2, [r3, #12]
    }
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 810db20:	68bb      	ldr	r3, [r7, #8]
 810db22:	681b      	ldr	r3, [r3, #0]
 810db24:	f003 0304 	and.w	r3, r3, #4
 810db28:	2b00      	cmp	r3, #0
 810db2a:	d008      	beq.n	810db3e <ETH_Prepare_Tx_Descriptors+0x2c0>
  {
    /* Set Vlan Tag control */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_VTIR, pTxConfig->VlanCtrl);
 810db2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810db2e:	689b      	ldr	r3, [r3, #8]
 810db30:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 810db34:	68bb      	ldr	r3, [r7, #8]
 810db36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810db38:	431a      	orrs	r2, r3
 810db3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810db3c:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 810db3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810db40:	68db      	ldr	r3, [r3, #12]
 810db42:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 810db46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810db48:	60da      	str	r2, [r3, #12]
  /* Mark it as NORMAL descriptor */
  CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 810db4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810db4c:	68db      	ldr	r3, [r3, #12]
 810db4e:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 810db52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810db54:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 810db56:	f3bf 8f5f 	dmb	sy
}
 810db5a:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 810db5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810db5e:	68db      	ldr	r3, [r3, #12]
 810db60:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 810db64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810db66:	60da      	str	r2, [r3, #12]

  /* If source address insertion/replacement is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_SAIC) != (uint32_t)RESET)
 810db68:	68bb      	ldr	r3, [r7, #8]
 810db6a:	681b      	ldr	r3, [r3, #0]
 810db6c:	f003 0302 	and.w	r3, r3, #2
 810db70:	2b00      	cmp	r3, #0
 810db72:	f000 80d9 	beq.w	810dd28 <ETH_Prepare_Tx_Descriptors+0x4aa>
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_SAIC, pTxConfig->SrcAddrCtrl);
 810db76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810db78:	68db      	ldr	r3, [r3, #12]
 810db7a:	f023 7260 	bic.w	r2, r3, #58720256	@ 0x3800000
 810db7e:	68bb      	ldr	r3, [r7, #8]
 810db80:	68db      	ldr	r3, [r3, #12]
 810db82:	431a      	orrs	r2, r3
 810db84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810db86:	60da      	str	r2, [r3, #12]
  }

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 810db88:	e0ce      	b.n	810dd28 <ETH_Prepare_Tx_Descriptors+0x4aa>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 810db8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810db8c:	68db      	ldr	r3, [r3, #12]
 810db8e:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 810db92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810db94:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 810db96:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810db98:	3301      	adds	r3, #1
 810db9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 810db9c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810db9e:	2b03      	cmp	r3, #3
 810dba0:	d902      	bls.n	810dba8 <ETH_Prepare_Tx_Descriptors+0x32a>
 810dba2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810dba4:	3b04      	subs	r3, #4
 810dba6:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 810dba8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810dbaa:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 810dbac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 810dbb0:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 810dbb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810dbb4:	68db      	ldr	r3, [r3, #12]
 810dbb6:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 810dbba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810dbbc:	60da      	str	r2, [r3, #12]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN) == ETH_DMATXNDESCRF_OWN)
 810dbbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810dbc0:	68db      	ldr	r3, [r3, #12]
 810dbc2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 810dbc6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 810dbca:	d007      	beq.n	810dbdc <ETH_Prepare_Tx_Descriptors+0x35e>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 810dbcc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 810dbce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810dbd0:	3304      	adds	r3, #4
 810dbd2:	009b      	lsls	r3, r3, #2
 810dbd4:	4413      	add	r3, r2
 810dbd6:	685b      	ldr	r3, [r3, #4]
 810dbd8:	2b00      	cmp	r3, #0
 810dbda:	d029      	beq.n	810dc30 <ETH_Prepare_Tx_Descriptors+0x3b2>
    {
      descidx = firstdescidx;
 810dbdc:	6a3b      	ldr	r3, [r7, #32]
 810dbde:	63fb      	str	r3, [r7, #60]	@ 0x3c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 810dbe0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810dbe2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 810dbe4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 810dbe8:	633b      	str	r3, [r7, #48]	@ 0x30

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 810dbea:	2300      	movs	r3, #0
 810dbec:	63bb      	str	r3, [r7, #56]	@ 0x38
 810dbee:	e019      	b.n	810dc24 <ETH_Prepare_Tx_Descriptors+0x3a6>
  __ASM volatile ("dmb 0xF":::"memory");
 810dbf0:	f3bf 8f5f 	dmb	sy
}
 810dbf4:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 810dbf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810dbf8:	68db      	ldr	r3, [r3, #12]
 810dbfa:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 810dbfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810dc00:	60da      	str	r2, [r3, #12]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 810dc02:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810dc04:	3301      	adds	r3, #1
 810dc06:	63fb      	str	r3, [r7, #60]	@ 0x3c
 810dc08:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810dc0a:	2b03      	cmp	r3, #3
 810dc0c:	d902      	bls.n	810dc14 <ETH_Prepare_Tx_Descriptors+0x396>
 810dc0e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810dc10:	3b04      	subs	r3, #4
 810dc12:	63fb      	str	r3, [r7, #60]	@ 0x3c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 810dc14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810dc16:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 810dc18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 810dc1c:	633b      	str	r3, [r7, #48]	@ 0x30
      for (idx = 0; idx < descnbr; idx ++)
 810dc1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810dc20:	3301      	adds	r3, #1
 810dc22:	63bb      	str	r3, [r7, #56]	@ 0x38
 810dc24:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 810dc26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810dc28:	429a      	cmp	r2, r3
 810dc2a:	d3e1      	bcc.n	810dbf0 <ETH_Prepare_Tx_Descriptors+0x372>
      }

      return HAL_ETH_ERROR_BUSY;
 810dc2c:	2302      	movs	r3, #2
 810dc2e:	e0ba      	b.n	810dda6 <ETH_Prepare_Tx_Descriptors+0x528>
    }

    descnbr += 1U;
 810dc30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810dc32:	3301      	adds	r3, #1
 810dc34:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 810dc36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810dc38:	689b      	ldr	r3, [r3, #8]
 810dc3a:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 810dc3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810dc3e:	681b      	ldr	r3, [r3, #0]
 810dc40:	461a      	mov	r2, r3
 810dc42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810dc44:	601a      	str	r2, [r3, #0]
    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 810dc46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810dc48:	689b      	ldr	r3, [r3, #8]
 810dc4a:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 810dc4e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 810dc52:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 810dc54:	6852      	ldr	r2, [r2, #4]
 810dc56:	431a      	orrs	r2, r3
 810dc58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810dc5a:	609a      	str	r2, [r3, #8]

    if (txbuffer->next != NULL)
 810dc5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810dc5e:	689b      	ldr	r3, [r3, #8]
 810dc60:	2b00      	cmp	r3, #0
 810dc62:	d014      	beq.n	810dc8e <ETH_Prepare_Tx_Descriptors+0x410>
    {
      /* Get the next Tx buffer in the list */
      txbuffer = txbuffer->next;
 810dc64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810dc66:	689b      	ldr	r3, [r3, #8]
 810dc68:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Set buffer 2 address */
      WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 810dc6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810dc6c:	681b      	ldr	r3, [r3, #0]
 810dc6e:	461a      	mov	r2, r3
 810dc70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810dc72:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 810dc74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810dc76:	689b      	ldr	r3, [r3, #8]
 810dc78:	f023 537f 	bic.w	r3, r3, #1069547520	@ 0x3fc00000
 810dc7c:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
 810dc80:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 810dc82:	6852      	ldr	r2, [r2, #4]
 810dc84:	0412      	lsls	r2, r2, #16
 810dc86:	431a      	orrs	r2, r3
 810dc88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810dc8a:	609a      	str	r2, [r3, #8]
 810dc8c:	e00a      	b.n	810dca4 <ETH_Prepare_Tx_Descriptors+0x426>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC1, 0x0U);
 810dc8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810dc90:	2200      	movs	r2, #0
 810dc92:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 810dc94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810dc96:	689b      	ldr	r3, [r3, #8]
 810dc98:	f023 537f 	bic.w	r3, r3, #1069547520	@ 0x3fc00000
 810dc9c:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
 810dca0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810dca2:	6093      	str	r3, [r2, #8]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 810dca4:	68bb      	ldr	r3, [r7, #8]
 810dca6:	681b      	ldr	r3, [r3, #0]
 810dca8:	f003 0310 	and.w	r3, r3, #16
 810dcac:	2b00      	cmp	r3, #0
 810dcae:	d00f      	beq.n	810dcd0 <ETH_Prepare_Tx_Descriptors+0x452>
    {
      /* Set TCP payload length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 810dcb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810dcb2:	68db      	ldr	r3, [r3, #12]
 810dcb4:	0c9b      	lsrs	r3, r3, #18
 810dcb6:	049b      	lsls	r3, r3, #18
 810dcb8:	68ba      	ldr	r2, [r7, #8]
 810dcba:	69d2      	ldr	r2, [r2, #28]
 810dcbc:	431a      	orrs	r2, r3
 810dcbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810dcc0:	60da      	str	r2, [r3, #12]
      /* Set TCP Segmentation Enabled bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 810dcc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810dcc4:	68db      	ldr	r3, [r3, #12]
 810dcc6:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 810dcca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810dccc:	60da      	str	r2, [r3, #12]
 810dcce:	e019      	b.n	810dd04 <ETH_Prepare_Tx_Descriptors+0x486>
    }
    else
    {
      /* Set the packet length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 810dcd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810dcd2:	68db      	ldr	r3, [r3, #12]
 810dcd4:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 810dcd8:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 810dcdc:	68ba      	ldr	r2, [r7, #8]
 810dcde:	6852      	ldr	r2, [r2, #4]
 810dce0:	431a      	orrs	r2, r3
 810dce2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810dce4:	60da      	str	r2, [r3, #12]

      if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 810dce6:	68bb      	ldr	r3, [r7, #8]
 810dce8:	681b      	ldr	r3, [r3, #0]
 810dcea:	f003 0301 	and.w	r3, r3, #1
 810dcee:	2b00      	cmp	r3, #0
 810dcf0:	d008      	beq.n	810dd04 <ETH_Prepare_Tx_Descriptors+0x486>
      {
        /* Checksum Insertion Control */
        MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 810dcf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810dcf4:	68db      	ldr	r3, [r3, #12]
 810dcf6:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 810dcfa:	68bb      	ldr	r3, [r7, #8]
 810dcfc:	695b      	ldr	r3, [r3, #20]
 810dcfe:	431a      	orrs	r2, r3
 810dd00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810dd02:	60da      	str	r2, [r3, #12]
      }
    }

    bd_count += 1U;
 810dd04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810dd06:	3301      	adds	r3, #1
 810dd08:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("dmb 0xF":::"memory");
 810dd0a:	f3bf 8f5f 	dmb	sy
}
 810dd0e:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 810dd10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810dd12:	68db      	ldr	r3, [r3, #12]
 810dd14:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 810dd18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810dd1a:	60da      	str	r2, [r3, #12]
    /* Mark it as NORMAL descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 810dd1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810dd1e:	68db      	ldr	r3, [r3, #12]
 810dd20:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 810dd24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810dd26:	60da      	str	r2, [r3, #12]
  while (txbuffer->next != NULL)
 810dd28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810dd2a:	689b      	ldr	r3, [r3, #8]
 810dd2c:	2b00      	cmp	r3, #0
 810dd2e:	f47f af2c 	bne.w	810db8a <ETH_Prepare_Tx_Descriptors+0x30c>
  }

  if (ItMode != ((uint32_t)RESET))
 810dd32:	687b      	ldr	r3, [r7, #4]
 810dd34:	2b00      	cmp	r3, #0
 810dd36:	d006      	beq.n	810dd46 <ETH_Prepare_Tx_Descriptors+0x4c8>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 810dd38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810dd3a:	689b      	ldr	r3, [r3, #8]
 810dd3c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 810dd40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810dd42:	609a      	str	r2, [r3, #8]
 810dd44:	e005      	b.n	810dd52 <ETH_Prepare_Tx_Descriptors+0x4d4>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 810dd46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810dd48:	689b      	ldr	r3, [r3, #8]
 810dd4a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 810dd4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810dd50:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 810dd52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810dd54:	68db      	ldr	r3, [r3, #12]
 810dd56:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 810dd5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810dd5c:	60da      	str	r2, [r3, #12]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 810dd5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810dd60:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 810dd62:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 810dd64:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810dd66:	3304      	adds	r3, #4
 810dd68:	009b      	lsls	r3, r3, #2
 810dd6a:	440b      	add	r3, r1
 810dd6c:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 810dd6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810dd70:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 810dd72:	611a      	str	r2, [r3, #16]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 810dd74:	f3ef 8310 	mrs	r3, PRIMASK
 810dd78:	613b      	str	r3, [r7, #16]
  return(result);
 810dd7a:	693b      	ldr	r3, [r7, #16]

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 810dd7c:	61fb      	str	r3, [r7, #28]
 810dd7e:	2301      	movs	r3, #1
 810dd80:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 810dd82:	697b      	ldr	r3, [r7, #20]
 810dd84:	f383 8810 	msr	PRIMASK, r3
}
 810dd88:	bf00      	nop
  __set_PRIMASK(1);

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 810dd8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810dd8c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 810dd8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810dd90:	4413      	add	r3, r2
 810dd92:	1c5a      	adds	r2, r3, #1
 810dd94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810dd96:	629a      	str	r2, [r3, #40]	@ 0x28
 810dd98:	69fb      	ldr	r3, [r7, #28]
 810dd9a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 810dd9c:	69bb      	ldr	r3, [r7, #24]
 810dd9e:	f383 8810 	msr	PRIMASK, r3
}
 810dda2:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);

  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 810dda4:	2300      	movs	r3, #0
}
 810dda6:	4618      	mov	r0, r3
 810dda8:	3744      	adds	r7, #68	@ 0x44
 810ddaa:	46bd      	mov	sp, r7
 810ddac:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ddb0:	4770      	bx	lr
	...

0810ddb4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 810ddb4:	b480      	push	{r7}
 810ddb6:	b089      	sub	sp, #36	@ 0x24
 810ddb8:	af00      	add	r7, sp, #0
 810ddba:	6078      	str	r0, [r7, #4]
 810ddbc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 810ddbe:	2300      	movs	r3, #0
 810ddc0:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
 810ddc2:	4b89      	ldr	r3, [pc, #548]	@ (810dfe8 <HAL_GPIO_Init+0x234>)
 810ddc4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 810ddc6:	e194      	b.n	810e0f2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 810ddc8:	683b      	ldr	r3, [r7, #0]
 810ddca:	681a      	ldr	r2, [r3, #0]
 810ddcc:	2101      	movs	r1, #1
 810ddce:	69fb      	ldr	r3, [r7, #28]
 810ddd0:	fa01 f303 	lsl.w	r3, r1, r3
 810ddd4:	4013      	ands	r3, r2
 810ddd6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 810ddd8:	693b      	ldr	r3, [r7, #16]
 810ddda:	2b00      	cmp	r3, #0
 810dddc:	f000 8186 	beq.w	810e0ec <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 810dde0:	683b      	ldr	r3, [r7, #0]
 810dde2:	685b      	ldr	r3, [r3, #4]
 810dde4:	f003 0303 	and.w	r3, r3, #3
 810dde8:	2b01      	cmp	r3, #1
 810ddea:	d005      	beq.n	810ddf8 <HAL_GPIO_Init+0x44>
 810ddec:	683b      	ldr	r3, [r7, #0]
 810ddee:	685b      	ldr	r3, [r3, #4]
 810ddf0:	f003 0303 	and.w	r3, r3, #3
 810ddf4:	2b02      	cmp	r3, #2
 810ddf6:	d130      	bne.n	810de5a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 810ddf8:	687b      	ldr	r3, [r7, #4]
 810ddfa:	689b      	ldr	r3, [r3, #8]
 810ddfc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 810ddfe:	69fb      	ldr	r3, [r7, #28]
 810de00:	005b      	lsls	r3, r3, #1
 810de02:	2203      	movs	r2, #3
 810de04:	fa02 f303 	lsl.w	r3, r2, r3
 810de08:	43db      	mvns	r3, r3
 810de0a:	69ba      	ldr	r2, [r7, #24]
 810de0c:	4013      	ands	r3, r2
 810de0e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 810de10:	683b      	ldr	r3, [r7, #0]
 810de12:	68da      	ldr	r2, [r3, #12]
 810de14:	69fb      	ldr	r3, [r7, #28]
 810de16:	005b      	lsls	r3, r3, #1
 810de18:	fa02 f303 	lsl.w	r3, r2, r3
 810de1c:	69ba      	ldr	r2, [r7, #24]
 810de1e:	4313      	orrs	r3, r2
 810de20:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 810de22:	687b      	ldr	r3, [r7, #4]
 810de24:	69ba      	ldr	r2, [r7, #24]
 810de26:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 810de28:	687b      	ldr	r3, [r7, #4]
 810de2a:	685b      	ldr	r3, [r3, #4]
 810de2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 810de2e:	2201      	movs	r2, #1
 810de30:	69fb      	ldr	r3, [r7, #28]
 810de32:	fa02 f303 	lsl.w	r3, r2, r3
 810de36:	43db      	mvns	r3, r3
 810de38:	69ba      	ldr	r2, [r7, #24]
 810de3a:	4013      	ands	r3, r2
 810de3c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 810de3e:	683b      	ldr	r3, [r7, #0]
 810de40:	685b      	ldr	r3, [r3, #4]
 810de42:	091b      	lsrs	r3, r3, #4
 810de44:	f003 0201 	and.w	r2, r3, #1
 810de48:	69fb      	ldr	r3, [r7, #28]
 810de4a:	fa02 f303 	lsl.w	r3, r2, r3
 810de4e:	69ba      	ldr	r2, [r7, #24]
 810de50:	4313      	orrs	r3, r2
 810de52:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 810de54:	687b      	ldr	r3, [r7, #4]
 810de56:	69ba      	ldr	r2, [r7, #24]
 810de58:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 810de5a:	683b      	ldr	r3, [r7, #0]
 810de5c:	685b      	ldr	r3, [r3, #4]
 810de5e:	f003 0303 	and.w	r3, r3, #3
 810de62:	2b03      	cmp	r3, #3
 810de64:	d017      	beq.n	810de96 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 810de66:	687b      	ldr	r3, [r7, #4]
 810de68:	68db      	ldr	r3, [r3, #12]
 810de6a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 810de6c:	69fb      	ldr	r3, [r7, #28]
 810de6e:	005b      	lsls	r3, r3, #1
 810de70:	2203      	movs	r2, #3
 810de72:	fa02 f303 	lsl.w	r3, r2, r3
 810de76:	43db      	mvns	r3, r3
 810de78:	69ba      	ldr	r2, [r7, #24]
 810de7a:	4013      	ands	r3, r2
 810de7c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 810de7e:	683b      	ldr	r3, [r7, #0]
 810de80:	689a      	ldr	r2, [r3, #8]
 810de82:	69fb      	ldr	r3, [r7, #28]
 810de84:	005b      	lsls	r3, r3, #1
 810de86:	fa02 f303 	lsl.w	r3, r2, r3
 810de8a:	69ba      	ldr	r2, [r7, #24]
 810de8c:	4313      	orrs	r3, r2
 810de8e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 810de90:	687b      	ldr	r3, [r7, #4]
 810de92:	69ba      	ldr	r2, [r7, #24]
 810de94:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 810de96:	683b      	ldr	r3, [r7, #0]
 810de98:	685b      	ldr	r3, [r3, #4]
 810de9a:	f003 0303 	and.w	r3, r3, #3
 810de9e:	2b02      	cmp	r3, #2
 810dea0:	d123      	bne.n	810deea <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 810dea2:	69fb      	ldr	r3, [r7, #28]
 810dea4:	08da      	lsrs	r2, r3, #3
 810dea6:	687b      	ldr	r3, [r7, #4]
 810dea8:	3208      	adds	r2, #8
 810deaa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 810deae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 810deb0:	69fb      	ldr	r3, [r7, #28]
 810deb2:	f003 0307 	and.w	r3, r3, #7
 810deb6:	009b      	lsls	r3, r3, #2
 810deb8:	220f      	movs	r2, #15
 810deba:	fa02 f303 	lsl.w	r3, r2, r3
 810debe:	43db      	mvns	r3, r3
 810dec0:	69ba      	ldr	r2, [r7, #24]
 810dec2:	4013      	ands	r3, r2
 810dec4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 810dec6:	683b      	ldr	r3, [r7, #0]
 810dec8:	691a      	ldr	r2, [r3, #16]
 810deca:	69fb      	ldr	r3, [r7, #28]
 810decc:	f003 0307 	and.w	r3, r3, #7
 810ded0:	009b      	lsls	r3, r3, #2
 810ded2:	fa02 f303 	lsl.w	r3, r2, r3
 810ded6:	69ba      	ldr	r2, [r7, #24]
 810ded8:	4313      	orrs	r3, r2
 810deda:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 810dedc:	69fb      	ldr	r3, [r7, #28]
 810dede:	08da      	lsrs	r2, r3, #3
 810dee0:	687b      	ldr	r3, [r7, #4]
 810dee2:	3208      	adds	r2, #8
 810dee4:	69b9      	ldr	r1, [r7, #24]
 810dee6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 810deea:	687b      	ldr	r3, [r7, #4]
 810deec:	681b      	ldr	r3, [r3, #0]
 810deee:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 810def0:	69fb      	ldr	r3, [r7, #28]
 810def2:	005b      	lsls	r3, r3, #1
 810def4:	2203      	movs	r2, #3
 810def6:	fa02 f303 	lsl.w	r3, r2, r3
 810defa:	43db      	mvns	r3, r3
 810defc:	69ba      	ldr	r2, [r7, #24]
 810defe:	4013      	ands	r3, r2
 810df00:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 810df02:	683b      	ldr	r3, [r7, #0]
 810df04:	685b      	ldr	r3, [r3, #4]
 810df06:	f003 0203 	and.w	r2, r3, #3
 810df0a:	69fb      	ldr	r3, [r7, #28]
 810df0c:	005b      	lsls	r3, r3, #1
 810df0e:	fa02 f303 	lsl.w	r3, r2, r3
 810df12:	69ba      	ldr	r2, [r7, #24]
 810df14:	4313      	orrs	r3, r2
 810df16:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 810df18:	687b      	ldr	r3, [r7, #4]
 810df1a:	69ba      	ldr	r2, [r7, #24]
 810df1c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 810df1e:	683b      	ldr	r3, [r7, #0]
 810df20:	685b      	ldr	r3, [r3, #4]
 810df22:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 810df26:	2b00      	cmp	r3, #0
 810df28:	f000 80e0 	beq.w	810e0ec <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 810df2c:	4b2f      	ldr	r3, [pc, #188]	@ (810dfec <HAL_GPIO_Init+0x238>)
 810df2e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 810df32:	4a2e      	ldr	r2, [pc, #184]	@ (810dfec <HAL_GPIO_Init+0x238>)
 810df34:	f043 0302 	orr.w	r3, r3, #2
 810df38:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 810df3c:	4b2b      	ldr	r3, [pc, #172]	@ (810dfec <HAL_GPIO_Init+0x238>)
 810df3e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 810df42:	f003 0302 	and.w	r3, r3, #2
 810df46:	60fb      	str	r3, [r7, #12]
 810df48:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 810df4a:	4a29      	ldr	r2, [pc, #164]	@ (810dff0 <HAL_GPIO_Init+0x23c>)
 810df4c:	69fb      	ldr	r3, [r7, #28]
 810df4e:	089b      	lsrs	r3, r3, #2
 810df50:	3302      	adds	r3, #2
 810df52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 810df56:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 810df58:	69fb      	ldr	r3, [r7, #28]
 810df5a:	f003 0303 	and.w	r3, r3, #3
 810df5e:	009b      	lsls	r3, r3, #2
 810df60:	220f      	movs	r2, #15
 810df62:	fa02 f303 	lsl.w	r3, r2, r3
 810df66:	43db      	mvns	r3, r3
 810df68:	69ba      	ldr	r2, [r7, #24]
 810df6a:	4013      	ands	r3, r2
 810df6c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 810df6e:	687b      	ldr	r3, [r7, #4]
 810df70:	4a20      	ldr	r2, [pc, #128]	@ (810dff4 <HAL_GPIO_Init+0x240>)
 810df72:	4293      	cmp	r3, r2
 810df74:	d052      	beq.n	810e01c <HAL_GPIO_Init+0x268>
 810df76:	687b      	ldr	r3, [r7, #4]
 810df78:	4a1f      	ldr	r2, [pc, #124]	@ (810dff8 <HAL_GPIO_Init+0x244>)
 810df7a:	4293      	cmp	r3, r2
 810df7c:	d031      	beq.n	810dfe2 <HAL_GPIO_Init+0x22e>
 810df7e:	687b      	ldr	r3, [r7, #4]
 810df80:	4a1e      	ldr	r2, [pc, #120]	@ (810dffc <HAL_GPIO_Init+0x248>)
 810df82:	4293      	cmp	r3, r2
 810df84:	d02b      	beq.n	810dfde <HAL_GPIO_Init+0x22a>
 810df86:	687b      	ldr	r3, [r7, #4]
 810df88:	4a1d      	ldr	r2, [pc, #116]	@ (810e000 <HAL_GPIO_Init+0x24c>)
 810df8a:	4293      	cmp	r3, r2
 810df8c:	d025      	beq.n	810dfda <HAL_GPIO_Init+0x226>
 810df8e:	687b      	ldr	r3, [r7, #4]
 810df90:	4a1c      	ldr	r2, [pc, #112]	@ (810e004 <HAL_GPIO_Init+0x250>)
 810df92:	4293      	cmp	r3, r2
 810df94:	d01f      	beq.n	810dfd6 <HAL_GPIO_Init+0x222>
 810df96:	687b      	ldr	r3, [r7, #4]
 810df98:	4a1b      	ldr	r2, [pc, #108]	@ (810e008 <HAL_GPIO_Init+0x254>)
 810df9a:	4293      	cmp	r3, r2
 810df9c:	d019      	beq.n	810dfd2 <HAL_GPIO_Init+0x21e>
 810df9e:	687b      	ldr	r3, [r7, #4]
 810dfa0:	4a1a      	ldr	r2, [pc, #104]	@ (810e00c <HAL_GPIO_Init+0x258>)
 810dfa2:	4293      	cmp	r3, r2
 810dfa4:	d013      	beq.n	810dfce <HAL_GPIO_Init+0x21a>
 810dfa6:	687b      	ldr	r3, [r7, #4]
 810dfa8:	4a19      	ldr	r2, [pc, #100]	@ (810e010 <HAL_GPIO_Init+0x25c>)
 810dfaa:	4293      	cmp	r3, r2
 810dfac:	d00d      	beq.n	810dfca <HAL_GPIO_Init+0x216>
 810dfae:	687b      	ldr	r3, [r7, #4]
 810dfb0:	4a18      	ldr	r2, [pc, #96]	@ (810e014 <HAL_GPIO_Init+0x260>)
 810dfb2:	4293      	cmp	r3, r2
 810dfb4:	d007      	beq.n	810dfc6 <HAL_GPIO_Init+0x212>
 810dfb6:	687b      	ldr	r3, [r7, #4]
 810dfb8:	4a17      	ldr	r2, [pc, #92]	@ (810e018 <HAL_GPIO_Init+0x264>)
 810dfba:	4293      	cmp	r3, r2
 810dfbc:	d101      	bne.n	810dfc2 <HAL_GPIO_Init+0x20e>
 810dfbe:	2309      	movs	r3, #9
 810dfc0:	e02d      	b.n	810e01e <HAL_GPIO_Init+0x26a>
 810dfc2:	230a      	movs	r3, #10
 810dfc4:	e02b      	b.n	810e01e <HAL_GPIO_Init+0x26a>
 810dfc6:	2308      	movs	r3, #8
 810dfc8:	e029      	b.n	810e01e <HAL_GPIO_Init+0x26a>
 810dfca:	2307      	movs	r3, #7
 810dfcc:	e027      	b.n	810e01e <HAL_GPIO_Init+0x26a>
 810dfce:	2306      	movs	r3, #6
 810dfd0:	e025      	b.n	810e01e <HAL_GPIO_Init+0x26a>
 810dfd2:	2305      	movs	r3, #5
 810dfd4:	e023      	b.n	810e01e <HAL_GPIO_Init+0x26a>
 810dfd6:	2304      	movs	r3, #4
 810dfd8:	e021      	b.n	810e01e <HAL_GPIO_Init+0x26a>
 810dfda:	2303      	movs	r3, #3
 810dfdc:	e01f      	b.n	810e01e <HAL_GPIO_Init+0x26a>
 810dfde:	2302      	movs	r3, #2
 810dfe0:	e01d      	b.n	810e01e <HAL_GPIO_Init+0x26a>
 810dfe2:	2301      	movs	r3, #1
 810dfe4:	e01b      	b.n	810e01e <HAL_GPIO_Init+0x26a>
 810dfe6:	bf00      	nop
 810dfe8:	580000c0 	.word	0x580000c0
 810dfec:	58024400 	.word	0x58024400
 810dff0:	58000400 	.word	0x58000400
 810dff4:	58020000 	.word	0x58020000
 810dff8:	58020400 	.word	0x58020400
 810dffc:	58020800 	.word	0x58020800
 810e000:	58020c00 	.word	0x58020c00
 810e004:	58021000 	.word	0x58021000
 810e008:	58021400 	.word	0x58021400
 810e00c:	58021800 	.word	0x58021800
 810e010:	58021c00 	.word	0x58021c00
 810e014:	58022000 	.word	0x58022000
 810e018:	58022400 	.word	0x58022400
 810e01c:	2300      	movs	r3, #0
 810e01e:	69fa      	ldr	r2, [r7, #28]
 810e020:	f002 0203 	and.w	r2, r2, #3
 810e024:	0092      	lsls	r2, r2, #2
 810e026:	4093      	lsls	r3, r2
 810e028:	69ba      	ldr	r2, [r7, #24]
 810e02a:	4313      	orrs	r3, r2
 810e02c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 810e02e:	4938      	ldr	r1, [pc, #224]	@ (810e110 <HAL_GPIO_Init+0x35c>)
 810e030:	69fb      	ldr	r3, [r7, #28]
 810e032:	089b      	lsrs	r3, r3, #2
 810e034:	3302      	adds	r3, #2
 810e036:	69ba      	ldr	r2, [r7, #24]
 810e038:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 810e03c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 810e040:	681b      	ldr	r3, [r3, #0]
 810e042:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 810e044:	693b      	ldr	r3, [r7, #16]
 810e046:	43db      	mvns	r3, r3
 810e048:	69ba      	ldr	r2, [r7, #24]
 810e04a:	4013      	ands	r3, r2
 810e04c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 810e04e:	683b      	ldr	r3, [r7, #0]
 810e050:	685b      	ldr	r3, [r3, #4]
 810e052:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 810e056:	2b00      	cmp	r3, #0
 810e058:	d003      	beq.n	810e062 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 810e05a:	69ba      	ldr	r2, [r7, #24]
 810e05c:	693b      	ldr	r3, [r7, #16]
 810e05e:	4313      	orrs	r3, r2
 810e060:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 810e062:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 810e066:	69bb      	ldr	r3, [r7, #24]
 810e068:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 810e06a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 810e06e:	685b      	ldr	r3, [r3, #4]
 810e070:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 810e072:	693b      	ldr	r3, [r7, #16]
 810e074:	43db      	mvns	r3, r3
 810e076:	69ba      	ldr	r2, [r7, #24]
 810e078:	4013      	ands	r3, r2
 810e07a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 810e07c:	683b      	ldr	r3, [r7, #0]
 810e07e:	685b      	ldr	r3, [r3, #4]
 810e080:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 810e084:	2b00      	cmp	r3, #0
 810e086:	d003      	beq.n	810e090 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 810e088:	69ba      	ldr	r2, [r7, #24]
 810e08a:	693b      	ldr	r3, [r7, #16]
 810e08c:	4313      	orrs	r3, r2
 810e08e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 810e090:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 810e094:	69bb      	ldr	r3, [r7, #24]
 810e096:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 810e098:	697b      	ldr	r3, [r7, #20]
 810e09a:	685b      	ldr	r3, [r3, #4]
 810e09c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 810e09e:	693b      	ldr	r3, [r7, #16]
 810e0a0:	43db      	mvns	r3, r3
 810e0a2:	69ba      	ldr	r2, [r7, #24]
 810e0a4:	4013      	ands	r3, r2
 810e0a6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 810e0a8:	683b      	ldr	r3, [r7, #0]
 810e0aa:	685b      	ldr	r3, [r3, #4]
 810e0ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 810e0b0:	2b00      	cmp	r3, #0
 810e0b2:	d003      	beq.n	810e0bc <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 810e0b4:	69ba      	ldr	r2, [r7, #24]
 810e0b6:	693b      	ldr	r3, [r7, #16]
 810e0b8:	4313      	orrs	r3, r2
 810e0ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 810e0bc:	697b      	ldr	r3, [r7, #20]
 810e0be:	69ba      	ldr	r2, [r7, #24]
 810e0c0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 810e0c2:	697b      	ldr	r3, [r7, #20]
 810e0c4:	681b      	ldr	r3, [r3, #0]
 810e0c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 810e0c8:	693b      	ldr	r3, [r7, #16]
 810e0ca:	43db      	mvns	r3, r3
 810e0cc:	69ba      	ldr	r2, [r7, #24]
 810e0ce:	4013      	ands	r3, r2
 810e0d0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 810e0d2:	683b      	ldr	r3, [r7, #0]
 810e0d4:	685b      	ldr	r3, [r3, #4]
 810e0d6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 810e0da:	2b00      	cmp	r3, #0
 810e0dc:	d003      	beq.n	810e0e6 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 810e0de:	69ba      	ldr	r2, [r7, #24]
 810e0e0:	693b      	ldr	r3, [r7, #16]
 810e0e2:	4313      	orrs	r3, r2
 810e0e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 810e0e6:	697b      	ldr	r3, [r7, #20]
 810e0e8:	69ba      	ldr	r2, [r7, #24]
 810e0ea:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 810e0ec:	69fb      	ldr	r3, [r7, #28]
 810e0ee:	3301      	adds	r3, #1
 810e0f0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 810e0f2:	683b      	ldr	r3, [r7, #0]
 810e0f4:	681a      	ldr	r2, [r3, #0]
 810e0f6:	69fb      	ldr	r3, [r7, #28]
 810e0f8:	fa22 f303 	lsr.w	r3, r2, r3
 810e0fc:	2b00      	cmp	r3, #0
 810e0fe:	f47f ae63 	bne.w	810ddc8 <HAL_GPIO_Init+0x14>
  }
}
 810e102:	bf00      	nop
 810e104:	bf00      	nop
 810e106:	3724      	adds	r7, #36	@ 0x24
 810e108:	46bd      	mov	sp, r7
 810e10a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810e10e:	4770      	bx	lr
 810e110:	58000400 	.word	0x58000400

0810e114 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 810e114:	b480      	push	{r7}
 810e116:	b087      	sub	sp, #28
 810e118:	af00      	add	r7, sp, #0
 810e11a:	6078      	str	r0, [r7, #4]
 810e11c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 810e11e:	2300      	movs	r3, #0
 810e120:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent;
  uint32_t tmp;
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
 810e122:	4b75      	ldr	r3, [pc, #468]	@ (810e2f8 <HAL_GPIO_DeInit+0x1e4>)
 810e124:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 810e126:	e0d9      	b.n	810e2dc <HAL_GPIO_DeInit+0x1c8>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 810e128:	2201      	movs	r2, #1
 810e12a:	697b      	ldr	r3, [r7, #20]
 810e12c:	fa02 f303 	lsl.w	r3, r2, r3
 810e130:	683a      	ldr	r2, [r7, #0]
 810e132:	4013      	ands	r3, r2
 810e134:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
 810e136:	68fb      	ldr	r3, [r7, #12]
 810e138:	2b00      	cmp	r3, #0
 810e13a:	f000 80cc 	beq.w	810e2d6 <HAL_GPIO_DeInit+0x1c2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
 810e13e:	4a6f      	ldr	r2, [pc, #444]	@ (810e2fc <HAL_GPIO_DeInit+0x1e8>)
 810e140:	697b      	ldr	r3, [r7, #20]
 810e142:	089b      	lsrs	r3, r3, #2
 810e144:	3302      	adds	r3, #2
 810e146:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 810e14a:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 810e14c:	697b      	ldr	r3, [r7, #20]
 810e14e:	f003 0303 	and.w	r3, r3, #3
 810e152:	009b      	lsls	r3, r3, #2
 810e154:	220f      	movs	r2, #15
 810e156:	fa02 f303 	lsl.w	r3, r2, r3
 810e15a:	68ba      	ldr	r2, [r7, #8]
 810e15c:	4013      	ands	r3, r2
 810e15e:	60bb      	str	r3, [r7, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 810e160:	687b      	ldr	r3, [r7, #4]
 810e162:	4a67      	ldr	r2, [pc, #412]	@ (810e300 <HAL_GPIO_DeInit+0x1ec>)
 810e164:	4293      	cmp	r3, r2
 810e166:	d037      	beq.n	810e1d8 <HAL_GPIO_DeInit+0xc4>
 810e168:	687b      	ldr	r3, [r7, #4]
 810e16a:	4a66      	ldr	r2, [pc, #408]	@ (810e304 <HAL_GPIO_DeInit+0x1f0>)
 810e16c:	4293      	cmp	r3, r2
 810e16e:	d031      	beq.n	810e1d4 <HAL_GPIO_DeInit+0xc0>
 810e170:	687b      	ldr	r3, [r7, #4]
 810e172:	4a65      	ldr	r2, [pc, #404]	@ (810e308 <HAL_GPIO_DeInit+0x1f4>)
 810e174:	4293      	cmp	r3, r2
 810e176:	d02b      	beq.n	810e1d0 <HAL_GPIO_DeInit+0xbc>
 810e178:	687b      	ldr	r3, [r7, #4]
 810e17a:	4a64      	ldr	r2, [pc, #400]	@ (810e30c <HAL_GPIO_DeInit+0x1f8>)
 810e17c:	4293      	cmp	r3, r2
 810e17e:	d025      	beq.n	810e1cc <HAL_GPIO_DeInit+0xb8>
 810e180:	687b      	ldr	r3, [r7, #4]
 810e182:	4a63      	ldr	r2, [pc, #396]	@ (810e310 <HAL_GPIO_DeInit+0x1fc>)
 810e184:	4293      	cmp	r3, r2
 810e186:	d01f      	beq.n	810e1c8 <HAL_GPIO_DeInit+0xb4>
 810e188:	687b      	ldr	r3, [r7, #4]
 810e18a:	4a62      	ldr	r2, [pc, #392]	@ (810e314 <HAL_GPIO_DeInit+0x200>)
 810e18c:	4293      	cmp	r3, r2
 810e18e:	d019      	beq.n	810e1c4 <HAL_GPIO_DeInit+0xb0>
 810e190:	687b      	ldr	r3, [r7, #4]
 810e192:	4a61      	ldr	r2, [pc, #388]	@ (810e318 <HAL_GPIO_DeInit+0x204>)
 810e194:	4293      	cmp	r3, r2
 810e196:	d013      	beq.n	810e1c0 <HAL_GPIO_DeInit+0xac>
 810e198:	687b      	ldr	r3, [r7, #4]
 810e19a:	4a60      	ldr	r2, [pc, #384]	@ (810e31c <HAL_GPIO_DeInit+0x208>)
 810e19c:	4293      	cmp	r3, r2
 810e19e:	d00d      	beq.n	810e1bc <HAL_GPIO_DeInit+0xa8>
 810e1a0:	687b      	ldr	r3, [r7, #4]
 810e1a2:	4a5f      	ldr	r2, [pc, #380]	@ (810e320 <HAL_GPIO_DeInit+0x20c>)
 810e1a4:	4293      	cmp	r3, r2
 810e1a6:	d007      	beq.n	810e1b8 <HAL_GPIO_DeInit+0xa4>
 810e1a8:	687b      	ldr	r3, [r7, #4]
 810e1aa:	4a5e      	ldr	r2, [pc, #376]	@ (810e324 <HAL_GPIO_DeInit+0x210>)
 810e1ac:	4293      	cmp	r3, r2
 810e1ae:	d101      	bne.n	810e1b4 <HAL_GPIO_DeInit+0xa0>
 810e1b0:	2309      	movs	r3, #9
 810e1b2:	e012      	b.n	810e1da <HAL_GPIO_DeInit+0xc6>
 810e1b4:	230a      	movs	r3, #10
 810e1b6:	e010      	b.n	810e1da <HAL_GPIO_DeInit+0xc6>
 810e1b8:	2308      	movs	r3, #8
 810e1ba:	e00e      	b.n	810e1da <HAL_GPIO_DeInit+0xc6>
 810e1bc:	2307      	movs	r3, #7
 810e1be:	e00c      	b.n	810e1da <HAL_GPIO_DeInit+0xc6>
 810e1c0:	2306      	movs	r3, #6
 810e1c2:	e00a      	b.n	810e1da <HAL_GPIO_DeInit+0xc6>
 810e1c4:	2305      	movs	r3, #5
 810e1c6:	e008      	b.n	810e1da <HAL_GPIO_DeInit+0xc6>
 810e1c8:	2304      	movs	r3, #4
 810e1ca:	e006      	b.n	810e1da <HAL_GPIO_DeInit+0xc6>
 810e1cc:	2303      	movs	r3, #3
 810e1ce:	e004      	b.n	810e1da <HAL_GPIO_DeInit+0xc6>
 810e1d0:	2302      	movs	r3, #2
 810e1d2:	e002      	b.n	810e1da <HAL_GPIO_DeInit+0xc6>
 810e1d4:	2301      	movs	r3, #1
 810e1d6:	e000      	b.n	810e1da <HAL_GPIO_DeInit+0xc6>
 810e1d8:	2300      	movs	r3, #0
 810e1da:	697a      	ldr	r2, [r7, #20]
 810e1dc:	f002 0203 	and.w	r2, r2, #3
 810e1e0:	0092      	lsls	r2, r2, #2
 810e1e2:	4093      	lsls	r3, r2
 810e1e4:	68ba      	ldr	r2, [r7, #8]
 810e1e6:	429a      	cmp	r2, r3
 810e1e8:	d136      	bne.n	810e258 <HAL_GPIO_DeInit+0x144>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 810e1ea:	693b      	ldr	r3, [r7, #16]
 810e1ec:	681a      	ldr	r2, [r3, #0]
 810e1ee:	68fb      	ldr	r3, [r7, #12]
 810e1f0:	43db      	mvns	r3, r3
 810e1f2:	401a      	ands	r2, r3
 810e1f4:	693b      	ldr	r3, [r7, #16]
 810e1f6:	601a      	str	r2, [r3, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 810e1f8:	693b      	ldr	r3, [r7, #16]
 810e1fa:	685a      	ldr	r2, [r3, #4]
 810e1fc:	68fb      	ldr	r3, [r7, #12]
 810e1fe:	43db      	mvns	r3, r3
 810e200:	401a      	ands	r2, r3
 810e202:	693b      	ldr	r3, [r7, #16]
 810e204:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 810e206:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 810e20a:	685a      	ldr	r2, [r3, #4]
 810e20c:	68fb      	ldr	r3, [r7, #12]
 810e20e:	43db      	mvns	r3, r3
 810e210:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 810e214:	4013      	ands	r3, r2
 810e216:	604b      	str	r3, [r1, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 810e218:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 810e21c:	681a      	ldr	r2, [r3, #0]
 810e21e:	68fb      	ldr	r3, [r7, #12]
 810e220:	43db      	mvns	r3, r3
 810e222:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 810e226:	4013      	ands	r3, r2
 810e228:	600b      	str	r3, [r1, #0]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 810e22a:	697b      	ldr	r3, [r7, #20]
 810e22c:	f003 0303 	and.w	r3, r3, #3
 810e230:	009b      	lsls	r3, r3, #2
 810e232:	220f      	movs	r2, #15
 810e234:	fa02 f303 	lsl.w	r3, r2, r3
 810e238:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 810e23a:	4a30      	ldr	r2, [pc, #192]	@ (810e2fc <HAL_GPIO_DeInit+0x1e8>)
 810e23c:	697b      	ldr	r3, [r7, #20]
 810e23e:	089b      	lsrs	r3, r3, #2
 810e240:	3302      	adds	r3, #2
 810e242:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 810e246:	68bb      	ldr	r3, [r7, #8]
 810e248:	43da      	mvns	r2, r3
 810e24a:	482c      	ldr	r0, [pc, #176]	@ (810e2fc <HAL_GPIO_DeInit+0x1e8>)
 810e24c:	697b      	ldr	r3, [r7, #20]
 810e24e:	089b      	lsrs	r3, r3, #2
 810e250:	400a      	ands	r2, r1
 810e252:	3302      	adds	r3, #2
 810e254:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 810e258:	687b      	ldr	r3, [r7, #4]
 810e25a:	681a      	ldr	r2, [r3, #0]
 810e25c:	697b      	ldr	r3, [r7, #20]
 810e25e:	005b      	lsls	r3, r3, #1
 810e260:	2103      	movs	r1, #3
 810e262:	fa01 f303 	lsl.w	r3, r1, r3
 810e266:	431a      	orrs	r2, r3
 810e268:	687b      	ldr	r3, [r7, #4]
 810e26a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 810e26c:	697b      	ldr	r3, [r7, #20]
 810e26e:	08da      	lsrs	r2, r3, #3
 810e270:	687b      	ldr	r3, [r7, #4]
 810e272:	3208      	adds	r2, #8
 810e274:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 810e278:	697b      	ldr	r3, [r7, #20]
 810e27a:	f003 0307 	and.w	r3, r3, #7
 810e27e:	009b      	lsls	r3, r3, #2
 810e280:	220f      	movs	r2, #15
 810e282:	fa02 f303 	lsl.w	r3, r2, r3
 810e286:	43db      	mvns	r3, r3
 810e288:	697a      	ldr	r2, [r7, #20]
 810e28a:	08d2      	lsrs	r2, r2, #3
 810e28c:	4019      	ands	r1, r3
 810e28e:	687b      	ldr	r3, [r7, #4]
 810e290:	3208      	adds	r2, #8
 810e292:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 810e296:	687b      	ldr	r3, [r7, #4]
 810e298:	68da      	ldr	r2, [r3, #12]
 810e29a:	697b      	ldr	r3, [r7, #20]
 810e29c:	005b      	lsls	r3, r3, #1
 810e29e:	2103      	movs	r1, #3
 810e2a0:	fa01 f303 	lsl.w	r3, r1, r3
 810e2a4:	43db      	mvns	r3, r3
 810e2a6:	401a      	ands	r2, r3
 810e2a8:	687b      	ldr	r3, [r7, #4]
 810e2aa:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 810e2ac:	687b      	ldr	r3, [r7, #4]
 810e2ae:	685a      	ldr	r2, [r3, #4]
 810e2b0:	2101      	movs	r1, #1
 810e2b2:	697b      	ldr	r3, [r7, #20]
 810e2b4:	fa01 f303 	lsl.w	r3, r1, r3
 810e2b8:	43db      	mvns	r3, r3
 810e2ba:	401a      	ands	r2, r3
 810e2bc:	687b      	ldr	r3, [r7, #4]
 810e2be:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 810e2c0:	687b      	ldr	r3, [r7, #4]
 810e2c2:	689a      	ldr	r2, [r3, #8]
 810e2c4:	697b      	ldr	r3, [r7, #20]
 810e2c6:	005b      	lsls	r3, r3, #1
 810e2c8:	2103      	movs	r1, #3
 810e2ca:	fa01 f303 	lsl.w	r3, r1, r3
 810e2ce:	43db      	mvns	r3, r3
 810e2d0:	401a      	ands	r2, r3
 810e2d2:	687b      	ldr	r3, [r7, #4]
 810e2d4:	609a      	str	r2, [r3, #8]
    }

    position++;
 810e2d6:	697b      	ldr	r3, [r7, #20]
 810e2d8:	3301      	adds	r3, #1
 810e2da:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00U)
 810e2dc:	683a      	ldr	r2, [r7, #0]
 810e2de:	697b      	ldr	r3, [r7, #20]
 810e2e0:	fa22 f303 	lsr.w	r3, r2, r3
 810e2e4:	2b00      	cmp	r3, #0
 810e2e6:	f47f af1f 	bne.w	810e128 <HAL_GPIO_DeInit+0x14>
  }
}
 810e2ea:	bf00      	nop
 810e2ec:	bf00      	nop
 810e2ee:	371c      	adds	r7, #28
 810e2f0:	46bd      	mov	sp, r7
 810e2f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 810e2f6:	4770      	bx	lr
 810e2f8:	580000c0 	.word	0x580000c0
 810e2fc:	58000400 	.word	0x58000400
 810e300:	58020000 	.word	0x58020000
 810e304:	58020400 	.word	0x58020400
 810e308:	58020800 	.word	0x58020800
 810e30c:	58020c00 	.word	0x58020c00
 810e310:	58021000 	.word	0x58021000
 810e314:	58021400 	.word	0x58021400
 810e318:	58021800 	.word	0x58021800
 810e31c:	58021c00 	.word	0x58021c00
 810e320:	58022000 	.word	0x58022000
 810e324:	58022400 	.word	0x58022400

0810e328 <HAL_HSEM_Take>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_HSEM_Take(uint32_t SemID, uint32_t ProcessID)
{
 810e328:	b480      	push	{r7}
 810e32a:	b083      	sub	sp, #12
 810e32c:	af00      	add	r7, sp, #0
 810e32e:	6078      	str	r0, [r7, #4]
 810e330:	6039      	str	r1, [r7, #0]
    /*take success when MasterID and ProcessID match and take bit set*/
    return HAL_OK;
  }
#else
  /* First step  write R register with MasterID, processID and take bit=1*/
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT | HSEM_R_LOCK);
 810e332:	490e      	ldr	r1, [pc, #56]	@ (810e36c <HAL_HSEM_Take+0x44>)
 810e334:	683b      	ldr	r3, [r7, #0]
 810e336:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 810e33a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 810e33e:	687a      	ldr	r2, [r7, #4]
 810e340:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  /* second step : read the R register . Take achieved if MasterID and processID match and take bit set to 1 */
  if (HSEM->R[SemID] == (ProcessID | HSEM_CR_COREID_CURRENT | HSEM_R_LOCK))
 810e344:	4a09      	ldr	r2, [pc, #36]	@ (810e36c <HAL_HSEM_Take+0x44>)
 810e346:	687b      	ldr	r3, [r7, #4]
 810e348:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 810e34c:	683b      	ldr	r3, [r7, #0]
 810e34e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 810e352:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 810e356:	429a      	cmp	r2, r3
 810e358:	d101      	bne.n	810e35e <HAL_HSEM_Take+0x36>
  {
    /*take success when MasterID and ProcessID match and take bit set*/
    return HAL_OK;
 810e35a:	2300      	movs	r3, #0
 810e35c:	e000      	b.n	810e360 <HAL_HSEM_Take+0x38>
  }
#endif

  /* Semaphore take fails*/
  return HAL_ERROR;
 810e35e:	2301      	movs	r3, #1
}
 810e360:	4618      	mov	r0, r3
 810e362:	370c      	adds	r7, #12
 810e364:	46bd      	mov	sp, r7
 810e366:	f85d 7b04 	ldr.w	r7, [sp], #4
 810e36a:	4770      	bx	lr
 810e36c:	58026400 	.word	0x58026400

0810e370 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 810e370:	b480      	push	{r7}
 810e372:	b083      	sub	sp, #12
 810e374:	af00      	add	r7, sp, #0
 810e376:	6078      	str	r0, [r7, #4]
 810e378:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 810e37a:	4906      	ldr	r1, [pc, #24]	@ (810e394 <HAL_HSEM_Release+0x24>)
 810e37c:	683b      	ldr	r3, [r7, #0]
 810e37e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 810e382:	687b      	ldr	r3, [r7, #4]
 810e384:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 810e388:	bf00      	nop
 810e38a:	370c      	adds	r7, #12
 810e38c:	46bd      	mov	sp, r7
 810e38e:	f85d 7b04 	ldr.w	r7, [sp], #4
 810e392:	4770      	bx	lr
 810e394:	58026400 	.word	0x58026400

0810e398 <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 810e398:	b480      	push	{r7}
 810e39a:	b083      	sub	sp, #12
 810e39c:	af00      	add	r7, sp, #0
 810e39e:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 810e3a0:	4b05      	ldr	r3, [pc, #20]	@ (810e3b8 <HAL_HSEM_ActivateNotification+0x20>)
 810e3a2:	681a      	ldr	r2, [r3, #0]
 810e3a4:	4904      	ldr	r1, [pc, #16]	@ (810e3b8 <HAL_HSEM_ActivateNotification+0x20>)
 810e3a6:	687b      	ldr	r3, [r7, #4]
 810e3a8:	4313      	orrs	r3, r2
 810e3aa:	600b      	str	r3, [r1, #0]
#endif
}
 810e3ac:	bf00      	nop
 810e3ae:	370c      	adds	r7, #12
 810e3b0:	46bd      	mov	sp, r7
 810e3b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 810e3b6:	4770      	bx	lr
 810e3b8:	58026510 	.word	0x58026510

0810e3bc <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 810e3bc:	b580      	push	{r7, lr}
 810e3be:	b082      	sub	sp, #8
 810e3c0:	af00      	add	r7, sp, #0
    /*Clear Flags*/
    HSEM->C2ICR = ((uint32_t)statusreg);
  }
#else
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 810e3c2:	4b0a      	ldr	r3, [pc, #40]	@ (810e3ec <HAL_HSEM_IRQHandler+0x30>)
 810e3c4:	68db      	ldr	r3, [r3, #12]
 810e3c6:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 810e3c8:	4b08      	ldr	r3, [pc, #32]	@ (810e3ec <HAL_HSEM_IRQHandler+0x30>)
 810e3ca:	681a      	ldr	r2, [r3, #0]
 810e3cc:	687b      	ldr	r3, [r7, #4]
 810e3ce:	43db      	mvns	r3, r3
 810e3d0:	4906      	ldr	r1, [pc, #24]	@ (810e3ec <HAL_HSEM_IRQHandler+0x30>)
 810e3d2:	4013      	ands	r3, r2
 810e3d4:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 810e3d6:	4a05      	ldr	r2, [pc, #20]	@ (810e3ec <HAL_HSEM_IRQHandler+0x30>)
 810e3d8:	687b      	ldr	r3, [r7, #4]
 810e3da:	6053      	str	r3, [r2, #4]

#endif
  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 810e3dc:	6878      	ldr	r0, [r7, #4]
 810e3de:	f7f2 fe35 	bl	810104c <HAL_HSEM_FreeCallback>
}
 810e3e2:	bf00      	nop
 810e3e4:	3708      	adds	r7, #8
 810e3e6:	46bd      	mov	sp, r7
 810e3e8:	bd80      	pop	{r7, pc}
 810e3ea:	bf00      	nop
 810e3ec:	58026510 	.word	0x58026510

0810e3f0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 810e3f0:	b580      	push	{r7, lr}
 810e3f2:	b082      	sub	sp, #8
 810e3f4:	af00      	add	r7, sp, #0
 810e3f6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 810e3f8:	687b      	ldr	r3, [r7, #4]
 810e3fa:	2b00      	cmp	r3, #0
 810e3fc:	d101      	bne.n	810e402 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 810e3fe:	2301      	movs	r3, #1
 810e400:	e08d      	b.n	810e51e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 810e402:	687b      	ldr	r3, [r7, #4]
 810e404:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 810e408:	b2db      	uxtb	r3, r3
 810e40a:	2b00      	cmp	r3, #0
 810e40c:	d106      	bne.n	810e41c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 810e40e:	687b      	ldr	r3, [r7, #4]
 810e410:	2200      	movs	r2, #0
 810e412:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 810e416:	6878      	ldr	r0, [r7, #4]
 810e418:	f7f4 fd5c 	bl	8102ed4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 810e41c:	687b      	ldr	r3, [r7, #4]
 810e41e:	2224      	movs	r2, #36	@ 0x24
 810e420:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 810e424:	687b      	ldr	r3, [r7, #4]
 810e426:	681b      	ldr	r3, [r3, #0]
 810e428:	681a      	ldr	r2, [r3, #0]
 810e42a:	687b      	ldr	r3, [r7, #4]
 810e42c:	681b      	ldr	r3, [r3, #0]
 810e42e:	f022 0201 	bic.w	r2, r2, #1
 810e432:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 810e434:	687b      	ldr	r3, [r7, #4]
 810e436:	685a      	ldr	r2, [r3, #4]
 810e438:	687b      	ldr	r3, [r7, #4]
 810e43a:	681b      	ldr	r3, [r3, #0]
 810e43c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 810e440:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 810e442:	687b      	ldr	r3, [r7, #4]
 810e444:	681b      	ldr	r3, [r3, #0]
 810e446:	689a      	ldr	r2, [r3, #8]
 810e448:	687b      	ldr	r3, [r7, #4]
 810e44a:	681b      	ldr	r3, [r3, #0]
 810e44c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 810e450:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 810e452:	687b      	ldr	r3, [r7, #4]
 810e454:	68db      	ldr	r3, [r3, #12]
 810e456:	2b01      	cmp	r3, #1
 810e458:	d107      	bne.n	810e46a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 810e45a:	687b      	ldr	r3, [r7, #4]
 810e45c:	689a      	ldr	r2, [r3, #8]
 810e45e:	687b      	ldr	r3, [r7, #4]
 810e460:	681b      	ldr	r3, [r3, #0]
 810e462:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 810e466:	609a      	str	r2, [r3, #8]
 810e468:	e006      	b.n	810e478 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 810e46a:	687b      	ldr	r3, [r7, #4]
 810e46c:	689a      	ldr	r2, [r3, #8]
 810e46e:	687b      	ldr	r3, [r7, #4]
 810e470:	681b      	ldr	r3, [r3, #0]
 810e472:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 810e476:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 810e478:	687b      	ldr	r3, [r7, #4]
 810e47a:	68db      	ldr	r3, [r3, #12]
 810e47c:	2b02      	cmp	r3, #2
 810e47e:	d108      	bne.n	810e492 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 810e480:	687b      	ldr	r3, [r7, #4]
 810e482:	681b      	ldr	r3, [r3, #0]
 810e484:	685a      	ldr	r2, [r3, #4]
 810e486:	687b      	ldr	r3, [r7, #4]
 810e488:	681b      	ldr	r3, [r3, #0]
 810e48a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 810e48e:	605a      	str	r2, [r3, #4]
 810e490:	e007      	b.n	810e4a2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 810e492:	687b      	ldr	r3, [r7, #4]
 810e494:	681b      	ldr	r3, [r3, #0]
 810e496:	685a      	ldr	r2, [r3, #4]
 810e498:	687b      	ldr	r3, [r7, #4]
 810e49a:	681b      	ldr	r3, [r3, #0]
 810e49c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 810e4a0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 810e4a2:	687b      	ldr	r3, [r7, #4]
 810e4a4:	681b      	ldr	r3, [r3, #0]
 810e4a6:	685b      	ldr	r3, [r3, #4]
 810e4a8:	687a      	ldr	r2, [r7, #4]
 810e4aa:	6812      	ldr	r2, [r2, #0]
 810e4ac:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 810e4b0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 810e4b4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 810e4b6:	687b      	ldr	r3, [r7, #4]
 810e4b8:	681b      	ldr	r3, [r3, #0]
 810e4ba:	68da      	ldr	r2, [r3, #12]
 810e4bc:	687b      	ldr	r3, [r7, #4]
 810e4be:	681b      	ldr	r3, [r3, #0]
 810e4c0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 810e4c4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 810e4c6:	687b      	ldr	r3, [r7, #4]
 810e4c8:	691a      	ldr	r2, [r3, #16]
 810e4ca:	687b      	ldr	r3, [r7, #4]
 810e4cc:	695b      	ldr	r3, [r3, #20]
 810e4ce:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 810e4d2:	687b      	ldr	r3, [r7, #4]
 810e4d4:	699b      	ldr	r3, [r3, #24]
 810e4d6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 810e4d8:	687b      	ldr	r3, [r7, #4]
 810e4da:	681b      	ldr	r3, [r3, #0]
 810e4dc:	430a      	orrs	r2, r1
 810e4de:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 810e4e0:	687b      	ldr	r3, [r7, #4]
 810e4e2:	69d9      	ldr	r1, [r3, #28]
 810e4e4:	687b      	ldr	r3, [r7, #4]
 810e4e6:	6a1a      	ldr	r2, [r3, #32]
 810e4e8:	687b      	ldr	r3, [r7, #4]
 810e4ea:	681b      	ldr	r3, [r3, #0]
 810e4ec:	430a      	orrs	r2, r1
 810e4ee:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 810e4f0:	687b      	ldr	r3, [r7, #4]
 810e4f2:	681b      	ldr	r3, [r3, #0]
 810e4f4:	681a      	ldr	r2, [r3, #0]
 810e4f6:	687b      	ldr	r3, [r7, #4]
 810e4f8:	681b      	ldr	r3, [r3, #0]
 810e4fa:	f042 0201 	orr.w	r2, r2, #1
 810e4fe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 810e500:	687b      	ldr	r3, [r7, #4]
 810e502:	2200      	movs	r2, #0
 810e504:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 810e506:	687b      	ldr	r3, [r7, #4]
 810e508:	2220      	movs	r2, #32
 810e50a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 810e50e:	687b      	ldr	r3, [r7, #4]
 810e510:	2200      	movs	r2, #0
 810e512:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 810e514:	687b      	ldr	r3, [r7, #4]
 810e516:	2200      	movs	r2, #0
 810e518:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 810e51c:	2300      	movs	r3, #0
}
 810e51e:	4618      	mov	r0, r3
 810e520:	3708      	adds	r7, #8
 810e522:	46bd      	mov	sp, r7
 810e524:	bd80      	pop	{r7, pc}

0810e526 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 810e526:	b580      	push	{r7, lr}
 810e528:	b082      	sub	sp, #8
 810e52a:	af00      	add	r7, sp, #0
 810e52c:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 810e52e:	687b      	ldr	r3, [r7, #4]
 810e530:	2b00      	cmp	r3, #0
 810e532:	d101      	bne.n	810e538 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 810e534:	2301      	movs	r3, #1
 810e536:	e021      	b.n	810e57c <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 810e538:	687b      	ldr	r3, [r7, #4]
 810e53a:	2224      	movs	r2, #36	@ 0x24
 810e53c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 810e540:	687b      	ldr	r3, [r7, #4]
 810e542:	681b      	ldr	r3, [r3, #0]
 810e544:	681a      	ldr	r2, [r3, #0]
 810e546:	687b      	ldr	r3, [r7, #4]
 810e548:	681b      	ldr	r3, [r3, #0]
 810e54a:	f022 0201 	bic.w	r2, r2, #1
 810e54e:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 810e550:	6878      	ldr	r0, [r7, #4]
 810e552:	f7f4 fd29 	bl	8102fa8 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 810e556:	687b      	ldr	r3, [r7, #4]
 810e558:	2200      	movs	r2, #0
 810e55a:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 810e55c:	687b      	ldr	r3, [r7, #4]
 810e55e:	2200      	movs	r2, #0
 810e560:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 810e564:	687b      	ldr	r3, [r7, #4]
 810e566:	2200      	movs	r2, #0
 810e568:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 810e56a:	687b      	ldr	r3, [r7, #4]
 810e56c:	2200      	movs	r2, #0
 810e56e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 810e572:	687b      	ldr	r3, [r7, #4]
 810e574:	2200      	movs	r2, #0
 810e576:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 810e57a:	2300      	movs	r3, #0
}
 810e57c:	4618      	mov	r0, r3
 810e57e:	3708      	adds	r7, #8
 810e580:	46bd      	mov	sp, r7
 810e582:	bd80      	pop	{r7, pc}

0810e584 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 810e584:	b580      	push	{r7, lr}
 810e586:	b088      	sub	sp, #32
 810e588:	af02      	add	r7, sp, #8
 810e58a:	60f8      	str	r0, [r7, #12]
 810e58c:	4608      	mov	r0, r1
 810e58e:	4611      	mov	r1, r2
 810e590:	461a      	mov	r2, r3
 810e592:	4603      	mov	r3, r0
 810e594:	817b      	strh	r3, [r7, #10]
 810e596:	460b      	mov	r3, r1
 810e598:	813b      	strh	r3, [r7, #8]
 810e59a:	4613      	mov	r3, r2
 810e59c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 810e59e:	68fb      	ldr	r3, [r7, #12]
 810e5a0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 810e5a4:	b2db      	uxtb	r3, r3
 810e5a6:	2b20      	cmp	r3, #32
 810e5a8:	f040 80fd 	bne.w	810e7a6 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 810e5ac:	6a3b      	ldr	r3, [r7, #32]
 810e5ae:	2b00      	cmp	r3, #0
 810e5b0:	d002      	beq.n	810e5b8 <HAL_I2C_Mem_Read+0x34>
 810e5b2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 810e5b4:	2b00      	cmp	r3, #0
 810e5b6:	d105      	bne.n	810e5c4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 810e5b8:	68fb      	ldr	r3, [r7, #12]
 810e5ba:	f44f 7200 	mov.w	r2, #512	@ 0x200
 810e5be:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 810e5c0:	2301      	movs	r3, #1
 810e5c2:	e0f1      	b.n	810e7a8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 810e5c4:	68fb      	ldr	r3, [r7, #12]
 810e5c6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 810e5ca:	2b01      	cmp	r3, #1
 810e5cc:	d101      	bne.n	810e5d2 <HAL_I2C_Mem_Read+0x4e>
 810e5ce:	2302      	movs	r3, #2
 810e5d0:	e0ea      	b.n	810e7a8 <HAL_I2C_Mem_Read+0x224>
 810e5d2:	68fb      	ldr	r3, [r7, #12]
 810e5d4:	2201      	movs	r2, #1
 810e5d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 810e5da:	f7fd fd59 	bl	810c090 <HAL_GetTick>
 810e5de:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 810e5e0:	697b      	ldr	r3, [r7, #20]
 810e5e2:	9300      	str	r3, [sp, #0]
 810e5e4:	2319      	movs	r3, #25
 810e5e6:	2201      	movs	r2, #1
 810e5e8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 810e5ec:	68f8      	ldr	r0, [r7, #12]
 810e5ee:	f000 f967 	bl	810e8c0 <I2C_WaitOnFlagUntilTimeout>
 810e5f2:	4603      	mov	r3, r0
 810e5f4:	2b00      	cmp	r3, #0
 810e5f6:	d001      	beq.n	810e5fc <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 810e5f8:	2301      	movs	r3, #1
 810e5fa:	e0d5      	b.n	810e7a8 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 810e5fc:	68fb      	ldr	r3, [r7, #12]
 810e5fe:	2222      	movs	r2, #34	@ 0x22
 810e600:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 810e604:	68fb      	ldr	r3, [r7, #12]
 810e606:	2240      	movs	r2, #64	@ 0x40
 810e608:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 810e60c:	68fb      	ldr	r3, [r7, #12]
 810e60e:	2200      	movs	r2, #0
 810e610:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 810e612:	68fb      	ldr	r3, [r7, #12]
 810e614:	6a3a      	ldr	r2, [r7, #32]
 810e616:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 810e618:	68fb      	ldr	r3, [r7, #12]
 810e61a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 810e61c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 810e61e:	68fb      	ldr	r3, [r7, #12]
 810e620:	2200      	movs	r2, #0
 810e622:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 810e624:	88f8      	ldrh	r0, [r7, #6]
 810e626:	893a      	ldrh	r2, [r7, #8]
 810e628:	8979      	ldrh	r1, [r7, #10]
 810e62a:	697b      	ldr	r3, [r7, #20]
 810e62c:	9301      	str	r3, [sp, #4]
 810e62e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810e630:	9300      	str	r3, [sp, #0]
 810e632:	4603      	mov	r3, r0
 810e634:	68f8      	ldr	r0, [r7, #12]
 810e636:	f000 f8cb 	bl	810e7d0 <I2C_RequestMemoryRead>
 810e63a:	4603      	mov	r3, r0
 810e63c:	2b00      	cmp	r3, #0
 810e63e:	d005      	beq.n	810e64c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 810e640:	68fb      	ldr	r3, [r7, #12]
 810e642:	2200      	movs	r2, #0
 810e644:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 810e648:	2301      	movs	r3, #1
 810e64a:	e0ad      	b.n	810e7a8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 810e64c:	68fb      	ldr	r3, [r7, #12]
 810e64e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 810e650:	b29b      	uxth	r3, r3
 810e652:	2bff      	cmp	r3, #255	@ 0xff
 810e654:	d90e      	bls.n	810e674 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 810e656:	68fb      	ldr	r3, [r7, #12]
 810e658:	22ff      	movs	r2, #255	@ 0xff
 810e65a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 810e65c:	68fb      	ldr	r3, [r7, #12]
 810e65e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 810e660:	b2da      	uxtb	r2, r3
 810e662:	8979      	ldrh	r1, [r7, #10]
 810e664:	4b52      	ldr	r3, [pc, #328]	@ (810e7b0 <HAL_I2C_Mem_Read+0x22c>)
 810e666:	9300      	str	r3, [sp, #0]
 810e668:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 810e66c:	68f8      	ldr	r0, [r7, #12]
 810e66e:	f000 faeb 	bl	810ec48 <I2C_TransferConfig>
 810e672:	e00f      	b.n	810e694 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 810e674:	68fb      	ldr	r3, [r7, #12]
 810e676:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 810e678:	b29a      	uxth	r2, r3
 810e67a:	68fb      	ldr	r3, [r7, #12]
 810e67c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 810e67e:	68fb      	ldr	r3, [r7, #12]
 810e680:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 810e682:	b2da      	uxtb	r2, r3
 810e684:	8979      	ldrh	r1, [r7, #10]
 810e686:	4b4a      	ldr	r3, [pc, #296]	@ (810e7b0 <HAL_I2C_Mem_Read+0x22c>)
 810e688:	9300      	str	r3, [sp, #0]
 810e68a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 810e68e:	68f8      	ldr	r0, [r7, #12]
 810e690:	f000 fada 	bl	810ec48 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 810e694:	697b      	ldr	r3, [r7, #20]
 810e696:	9300      	str	r3, [sp, #0]
 810e698:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810e69a:	2200      	movs	r2, #0
 810e69c:	2104      	movs	r1, #4
 810e69e:	68f8      	ldr	r0, [r7, #12]
 810e6a0:	f000 f90e 	bl	810e8c0 <I2C_WaitOnFlagUntilTimeout>
 810e6a4:	4603      	mov	r3, r0
 810e6a6:	2b00      	cmp	r3, #0
 810e6a8:	d001      	beq.n	810e6ae <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 810e6aa:	2301      	movs	r3, #1
 810e6ac:	e07c      	b.n	810e7a8 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 810e6ae:	68fb      	ldr	r3, [r7, #12]
 810e6b0:	681b      	ldr	r3, [r3, #0]
 810e6b2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 810e6b4:	68fb      	ldr	r3, [r7, #12]
 810e6b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810e6b8:	b2d2      	uxtb	r2, r2
 810e6ba:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 810e6bc:	68fb      	ldr	r3, [r7, #12]
 810e6be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810e6c0:	1c5a      	adds	r2, r3, #1
 810e6c2:	68fb      	ldr	r3, [r7, #12]
 810e6c4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 810e6c6:	68fb      	ldr	r3, [r7, #12]
 810e6c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 810e6ca:	3b01      	subs	r3, #1
 810e6cc:	b29a      	uxth	r2, r3
 810e6ce:	68fb      	ldr	r3, [r7, #12]
 810e6d0:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 810e6d2:	68fb      	ldr	r3, [r7, #12]
 810e6d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 810e6d6:	b29b      	uxth	r3, r3
 810e6d8:	3b01      	subs	r3, #1
 810e6da:	b29a      	uxth	r2, r3
 810e6dc:	68fb      	ldr	r3, [r7, #12]
 810e6de:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 810e6e0:	68fb      	ldr	r3, [r7, #12]
 810e6e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 810e6e4:	b29b      	uxth	r3, r3
 810e6e6:	2b00      	cmp	r3, #0
 810e6e8:	d034      	beq.n	810e754 <HAL_I2C_Mem_Read+0x1d0>
 810e6ea:	68fb      	ldr	r3, [r7, #12]
 810e6ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 810e6ee:	2b00      	cmp	r3, #0
 810e6f0:	d130      	bne.n	810e754 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 810e6f2:	697b      	ldr	r3, [r7, #20]
 810e6f4:	9300      	str	r3, [sp, #0]
 810e6f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810e6f8:	2200      	movs	r2, #0
 810e6fa:	2180      	movs	r1, #128	@ 0x80
 810e6fc:	68f8      	ldr	r0, [r7, #12]
 810e6fe:	f000 f8df 	bl	810e8c0 <I2C_WaitOnFlagUntilTimeout>
 810e702:	4603      	mov	r3, r0
 810e704:	2b00      	cmp	r3, #0
 810e706:	d001      	beq.n	810e70c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 810e708:	2301      	movs	r3, #1
 810e70a:	e04d      	b.n	810e7a8 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 810e70c:	68fb      	ldr	r3, [r7, #12]
 810e70e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 810e710:	b29b      	uxth	r3, r3
 810e712:	2bff      	cmp	r3, #255	@ 0xff
 810e714:	d90e      	bls.n	810e734 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 810e716:	68fb      	ldr	r3, [r7, #12]
 810e718:	22ff      	movs	r2, #255	@ 0xff
 810e71a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 810e71c:	68fb      	ldr	r3, [r7, #12]
 810e71e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 810e720:	b2da      	uxtb	r2, r3
 810e722:	8979      	ldrh	r1, [r7, #10]
 810e724:	2300      	movs	r3, #0
 810e726:	9300      	str	r3, [sp, #0]
 810e728:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 810e72c:	68f8      	ldr	r0, [r7, #12]
 810e72e:	f000 fa8b 	bl	810ec48 <I2C_TransferConfig>
 810e732:	e00f      	b.n	810e754 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 810e734:	68fb      	ldr	r3, [r7, #12]
 810e736:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 810e738:	b29a      	uxth	r2, r3
 810e73a:	68fb      	ldr	r3, [r7, #12]
 810e73c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 810e73e:	68fb      	ldr	r3, [r7, #12]
 810e740:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 810e742:	b2da      	uxtb	r2, r3
 810e744:	8979      	ldrh	r1, [r7, #10]
 810e746:	2300      	movs	r3, #0
 810e748:	9300      	str	r3, [sp, #0]
 810e74a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 810e74e:	68f8      	ldr	r0, [r7, #12]
 810e750:	f000 fa7a 	bl	810ec48 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 810e754:	68fb      	ldr	r3, [r7, #12]
 810e756:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 810e758:	b29b      	uxth	r3, r3
 810e75a:	2b00      	cmp	r3, #0
 810e75c:	d19a      	bne.n	810e694 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 810e75e:	697a      	ldr	r2, [r7, #20]
 810e760:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 810e762:	68f8      	ldr	r0, [r7, #12]
 810e764:	f000 f94c 	bl	810ea00 <I2C_WaitOnSTOPFlagUntilTimeout>
 810e768:	4603      	mov	r3, r0
 810e76a:	2b00      	cmp	r3, #0
 810e76c:	d001      	beq.n	810e772 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 810e76e:	2301      	movs	r3, #1
 810e770:	e01a      	b.n	810e7a8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 810e772:	68fb      	ldr	r3, [r7, #12]
 810e774:	681b      	ldr	r3, [r3, #0]
 810e776:	2220      	movs	r2, #32
 810e778:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 810e77a:	68fb      	ldr	r3, [r7, #12]
 810e77c:	681b      	ldr	r3, [r3, #0]
 810e77e:	6859      	ldr	r1, [r3, #4]
 810e780:	68fb      	ldr	r3, [r7, #12]
 810e782:	681a      	ldr	r2, [r3, #0]
 810e784:	4b0b      	ldr	r3, [pc, #44]	@ (810e7b4 <HAL_I2C_Mem_Read+0x230>)
 810e786:	400b      	ands	r3, r1
 810e788:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 810e78a:	68fb      	ldr	r3, [r7, #12]
 810e78c:	2220      	movs	r2, #32
 810e78e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 810e792:	68fb      	ldr	r3, [r7, #12]
 810e794:	2200      	movs	r2, #0
 810e796:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 810e79a:	68fb      	ldr	r3, [r7, #12]
 810e79c:	2200      	movs	r2, #0
 810e79e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 810e7a2:	2300      	movs	r3, #0
 810e7a4:	e000      	b.n	810e7a8 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 810e7a6:	2302      	movs	r3, #2
  }
}
 810e7a8:	4618      	mov	r0, r3
 810e7aa:	3718      	adds	r7, #24
 810e7ac:	46bd      	mov	sp, r7
 810e7ae:	bd80      	pop	{r7, pc}
 810e7b0:	80002400 	.word	0x80002400
 810e7b4:	fe00e800 	.word	0xfe00e800

0810e7b8 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(const I2C_HandleTypeDef *hi2c)
{
 810e7b8:	b480      	push	{r7}
 810e7ba:	b083      	sub	sp, #12
 810e7bc:	af00      	add	r7, sp, #0
 810e7be:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 810e7c0:	687b      	ldr	r3, [r7, #4]
 810e7c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
}
 810e7c4:	4618      	mov	r0, r3
 810e7c6:	370c      	adds	r7, #12
 810e7c8:	46bd      	mov	sp, r7
 810e7ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 810e7ce:	4770      	bx	lr

0810e7d0 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 810e7d0:	b580      	push	{r7, lr}
 810e7d2:	b086      	sub	sp, #24
 810e7d4:	af02      	add	r7, sp, #8
 810e7d6:	60f8      	str	r0, [r7, #12]
 810e7d8:	4608      	mov	r0, r1
 810e7da:	4611      	mov	r1, r2
 810e7dc:	461a      	mov	r2, r3
 810e7de:	4603      	mov	r3, r0
 810e7e0:	817b      	strh	r3, [r7, #10]
 810e7e2:	460b      	mov	r3, r1
 810e7e4:	813b      	strh	r3, [r7, #8]
 810e7e6:	4613      	mov	r3, r2
 810e7e8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 810e7ea:	88fb      	ldrh	r3, [r7, #6]
 810e7ec:	b2da      	uxtb	r2, r3
 810e7ee:	8979      	ldrh	r1, [r7, #10]
 810e7f0:	4b20      	ldr	r3, [pc, #128]	@ (810e874 <I2C_RequestMemoryRead+0xa4>)
 810e7f2:	9300      	str	r3, [sp, #0]
 810e7f4:	2300      	movs	r3, #0
 810e7f6:	68f8      	ldr	r0, [r7, #12]
 810e7f8:	f000 fa26 	bl	810ec48 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 810e7fc:	69fa      	ldr	r2, [r7, #28]
 810e7fe:	69b9      	ldr	r1, [r7, #24]
 810e800:	68f8      	ldr	r0, [r7, #12]
 810e802:	f000 f8b6 	bl	810e972 <I2C_WaitOnTXISFlagUntilTimeout>
 810e806:	4603      	mov	r3, r0
 810e808:	2b00      	cmp	r3, #0
 810e80a:	d001      	beq.n	810e810 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 810e80c:	2301      	movs	r3, #1
 810e80e:	e02c      	b.n	810e86a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 810e810:	88fb      	ldrh	r3, [r7, #6]
 810e812:	2b01      	cmp	r3, #1
 810e814:	d105      	bne.n	810e822 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 810e816:	893b      	ldrh	r3, [r7, #8]
 810e818:	b2da      	uxtb	r2, r3
 810e81a:	68fb      	ldr	r3, [r7, #12]
 810e81c:	681b      	ldr	r3, [r3, #0]
 810e81e:	629a      	str	r2, [r3, #40]	@ 0x28
 810e820:	e015      	b.n	810e84e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 810e822:	893b      	ldrh	r3, [r7, #8]
 810e824:	0a1b      	lsrs	r3, r3, #8
 810e826:	b29b      	uxth	r3, r3
 810e828:	b2da      	uxtb	r2, r3
 810e82a:	68fb      	ldr	r3, [r7, #12]
 810e82c:	681b      	ldr	r3, [r3, #0]
 810e82e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 810e830:	69fa      	ldr	r2, [r7, #28]
 810e832:	69b9      	ldr	r1, [r7, #24]
 810e834:	68f8      	ldr	r0, [r7, #12]
 810e836:	f000 f89c 	bl	810e972 <I2C_WaitOnTXISFlagUntilTimeout>
 810e83a:	4603      	mov	r3, r0
 810e83c:	2b00      	cmp	r3, #0
 810e83e:	d001      	beq.n	810e844 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 810e840:	2301      	movs	r3, #1
 810e842:	e012      	b.n	810e86a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 810e844:	893b      	ldrh	r3, [r7, #8]
 810e846:	b2da      	uxtb	r2, r3
 810e848:	68fb      	ldr	r3, [r7, #12]
 810e84a:	681b      	ldr	r3, [r3, #0]
 810e84c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 810e84e:	69fb      	ldr	r3, [r7, #28]
 810e850:	9300      	str	r3, [sp, #0]
 810e852:	69bb      	ldr	r3, [r7, #24]
 810e854:	2200      	movs	r2, #0
 810e856:	2140      	movs	r1, #64	@ 0x40
 810e858:	68f8      	ldr	r0, [r7, #12]
 810e85a:	f000 f831 	bl	810e8c0 <I2C_WaitOnFlagUntilTimeout>
 810e85e:	4603      	mov	r3, r0
 810e860:	2b00      	cmp	r3, #0
 810e862:	d001      	beq.n	810e868 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 810e864:	2301      	movs	r3, #1
 810e866:	e000      	b.n	810e86a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 810e868:	2300      	movs	r3, #0
}
 810e86a:	4618      	mov	r0, r3
 810e86c:	3710      	adds	r7, #16
 810e86e:	46bd      	mov	sp, r7
 810e870:	bd80      	pop	{r7, pc}
 810e872:	bf00      	nop
 810e874:	80002000 	.word	0x80002000

0810e878 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 810e878:	b480      	push	{r7}
 810e87a:	b083      	sub	sp, #12
 810e87c:	af00      	add	r7, sp, #0
 810e87e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 810e880:	687b      	ldr	r3, [r7, #4]
 810e882:	681b      	ldr	r3, [r3, #0]
 810e884:	699b      	ldr	r3, [r3, #24]
 810e886:	f003 0302 	and.w	r3, r3, #2
 810e88a:	2b02      	cmp	r3, #2
 810e88c:	d103      	bne.n	810e896 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 810e88e:	687b      	ldr	r3, [r7, #4]
 810e890:	681b      	ldr	r3, [r3, #0]
 810e892:	2200      	movs	r2, #0
 810e894:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 810e896:	687b      	ldr	r3, [r7, #4]
 810e898:	681b      	ldr	r3, [r3, #0]
 810e89a:	699b      	ldr	r3, [r3, #24]
 810e89c:	f003 0301 	and.w	r3, r3, #1
 810e8a0:	2b01      	cmp	r3, #1
 810e8a2:	d007      	beq.n	810e8b4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 810e8a4:	687b      	ldr	r3, [r7, #4]
 810e8a6:	681b      	ldr	r3, [r3, #0]
 810e8a8:	699a      	ldr	r2, [r3, #24]
 810e8aa:	687b      	ldr	r3, [r7, #4]
 810e8ac:	681b      	ldr	r3, [r3, #0]
 810e8ae:	f042 0201 	orr.w	r2, r2, #1
 810e8b2:	619a      	str	r2, [r3, #24]
  }
}
 810e8b4:	bf00      	nop
 810e8b6:	370c      	adds	r7, #12
 810e8b8:	46bd      	mov	sp, r7
 810e8ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 810e8be:	4770      	bx	lr

0810e8c0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 810e8c0:	b580      	push	{r7, lr}
 810e8c2:	b084      	sub	sp, #16
 810e8c4:	af00      	add	r7, sp, #0
 810e8c6:	60f8      	str	r0, [r7, #12]
 810e8c8:	60b9      	str	r1, [r7, #8]
 810e8ca:	603b      	str	r3, [r7, #0]
 810e8cc:	4613      	mov	r3, r2
 810e8ce:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 810e8d0:	e03b      	b.n	810e94a <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 810e8d2:	69ba      	ldr	r2, [r7, #24]
 810e8d4:	6839      	ldr	r1, [r7, #0]
 810e8d6:	68f8      	ldr	r0, [r7, #12]
 810e8d8:	f000 f8d6 	bl	810ea88 <I2C_IsErrorOccurred>
 810e8dc:	4603      	mov	r3, r0
 810e8de:	2b00      	cmp	r3, #0
 810e8e0:	d001      	beq.n	810e8e6 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 810e8e2:	2301      	movs	r3, #1
 810e8e4:	e041      	b.n	810e96a <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 810e8e6:	683b      	ldr	r3, [r7, #0]
 810e8e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 810e8ec:	d02d      	beq.n	810e94a <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 810e8ee:	f7fd fbcf 	bl	810c090 <HAL_GetTick>
 810e8f2:	4602      	mov	r2, r0
 810e8f4:	69bb      	ldr	r3, [r7, #24]
 810e8f6:	1ad3      	subs	r3, r2, r3
 810e8f8:	683a      	ldr	r2, [r7, #0]
 810e8fa:	429a      	cmp	r2, r3
 810e8fc:	d302      	bcc.n	810e904 <I2C_WaitOnFlagUntilTimeout+0x44>
 810e8fe:	683b      	ldr	r3, [r7, #0]
 810e900:	2b00      	cmp	r3, #0
 810e902:	d122      	bne.n	810e94a <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 810e904:	68fb      	ldr	r3, [r7, #12]
 810e906:	681b      	ldr	r3, [r3, #0]
 810e908:	699a      	ldr	r2, [r3, #24]
 810e90a:	68bb      	ldr	r3, [r7, #8]
 810e90c:	4013      	ands	r3, r2
 810e90e:	68ba      	ldr	r2, [r7, #8]
 810e910:	429a      	cmp	r2, r3
 810e912:	bf0c      	ite	eq
 810e914:	2301      	moveq	r3, #1
 810e916:	2300      	movne	r3, #0
 810e918:	b2db      	uxtb	r3, r3
 810e91a:	461a      	mov	r2, r3
 810e91c:	79fb      	ldrb	r3, [r7, #7]
 810e91e:	429a      	cmp	r2, r3
 810e920:	d113      	bne.n	810e94a <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 810e922:	68fb      	ldr	r3, [r7, #12]
 810e924:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 810e926:	f043 0220 	orr.w	r2, r3, #32
 810e92a:	68fb      	ldr	r3, [r7, #12]
 810e92c:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 810e92e:	68fb      	ldr	r3, [r7, #12]
 810e930:	2220      	movs	r2, #32
 810e932:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 810e936:	68fb      	ldr	r3, [r7, #12]
 810e938:	2200      	movs	r2, #0
 810e93a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 810e93e:	68fb      	ldr	r3, [r7, #12]
 810e940:	2200      	movs	r2, #0
 810e942:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 810e946:	2301      	movs	r3, #1
 810e948:	e00f      	b.n	810e96a <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 810e94a:	68fb      	ldr	r3, [r7, #12]
 810e94c:	681b      	ldr	r3, [r3, #0]
 810e94e:	699a      	ldr	r2, [r3, #24]
 810e950:	68bb      	ldr	r3, [r7, #8]
 810e952:	4013      	ands	r3, r2
 810e954:	68ba      	ldr	r2, [r7, #8]
 810e956:	429a      	cmp	r2, r3
 810e958:	bf0c      	ite	eq
 810e95a:	2301      	moveq	r3, #1
 810e95c:	2300      	movne	r3, #0
 810e95e:	b2db      	uxtb	r3, r3
 810e960:	461a      	mov	r2, r3
 810e962:	79fb      	ldrb	r3, [r7, #7]
 810e964:	429a      	cmp	r2, r3
 810e966:	d0b4      	beq.n	810e8d2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 810e968:	2300      	movs	r3, #0
}
 810e96a:	4618      	mov	r0, r3
 810e96c:	3710      	adds	r7, #16
 810e96e:	46bd      	mov	sp, r7
 810e970:	bd80      	pop	{r7, pc}

0810e972 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 810e972:	b580      	push	{r7, lr}
 810e974:	b084      	sub	sp, #16
 810e976:	af00      	add	r7, sp, #0
 810e978:	60f8      	str	r0, [r7, #12]
 810e97a:	60b9      	str	r1, [r7, #8]
 810e97c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 810e97e:	e033      	b.n	810e9e8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 810e980:	687a      	ldr	r2, [r7, #4]
 810e982:	68b9      	ldr	r1, [r7, #8]
 810e984:	68f8      	ldr	r0, [r7, #12]
 810e986:	f000 f87f 	bl	810ea88 <I2C_IsErrorOccurred>
 810e98a:	4603      	mov	r3, r0
 810e98c:	2b00      	cmp	r3, #0
 810e98e:	d001      	beq.n	810e994 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 810e990:	2301      	movs	r3, #1
 810e992:	e031      	b.n	810e9f8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 810e994:	68bb      	ldr	r3, [r7, #8]
 810e996:	f1b3 3fff 	cmp.w	r3, #4294967295
 810e99a:	d025      	beq.n	810e9e8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 810e99c:	f7fd fb78 	bl	810c090 <HAL_GetTick>
 810e9a0:	4602      	mov	r2, r0
 810e9a2:	687b      	ldr	r3, [r7, #4]
 810e9a4:	1ad3      	subs	r3, r2, r3
 810e9a6:	68ba      	ldr	r2, [r7, #8]
 810e9a8:	429a      	cmp	r2, r3
 810e9aa:	d302      	bcc.n	810e9b2 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 810e9ac:	68bb      	ldr	r3, [r7, #8]
 810e9ae:	2b00      	cmp	r3, #0
 810e9b0:	d11a      	bne.n	810e9e8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 810e9b2:	68fb      	ldr	r3, [r7, #12]
 810e9b4:	681b      	ldr	r3, [r3, #0]
 810e9b6:	699b      	ldr	r3, [r3, #24]
 810e9b8:	f003 0302 	and.w	r3, r3, #2
 810e9bc:	2b02      	cmp	r3, #2
 810e9be:	d013      	beq.n	810e9e8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 810e9c0:	68fb      	ldr	r3, [r7, #12]
 810e9c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 810e9c4:	f043 0220 	orr.w	r2, r3, #32
 810e9c8:	68fb      	ldr	r3, [r7, #12]
 810e9ca:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 810e9cc:	68fb      	ldr	r3, [r7, #12]
 810e9ce:	2220      	movs	r2, #32
 810e9d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 810e9d4:	68fb      	ldr	r3, [r7, #12]
 810e9d6:	2200      	movs	r2, #0
 810e9d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 810e9dc:	68fb      	ldr	r3, [r7, #12]
 810e9de:	2200      	movs	r2, #0
 810e9e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 810e9e4:	2301      	movs	r3, #1
 810e9e6:	e007      	b.n	810e9f8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 810e9e8:	68fb      	ldr	r3, [r7, #12]
 810e9ea:	681b      	ldr	r3, [r3, #0]
 810e9ec:	699b      	ldr	r3, [r3, #24]
 810e9ee:	f003 0302 	and.w	r3, r3, #2
 810e9f2:	2b02      	cmp	r3, #2
 810e9f4:	d1c4      	bne.n	810e980 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 810e9f6:	2300      	movs	r3, #0
}
 810e9f8:	4618      	mov	r0, r3
 810e9fa:	3710      	adds	r7, #16
 810e9fc:	46bd      	mov	sp, r7
 810e9fe:	bd80      	pop	{r7, pc}

0810ea00 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 810ea00:	b580      	push	{r7, lr}
 810ea02:	b084      	sub	sp, #16
 810ea04:	af00      	add	r7, sp, #0
 810ea06:	60f8      	str	r0, [r7, #12]
 810ea08:	60b9      	str	r1, [r7, #8]
 810ea0a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 810ea0c:	e02f      	b.n	810ea6e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 810ea0e:	687a      	ldr	r2, [r7, #4]
 810ea10:	68b9      	ldr	r1, [r7, #8]
 810ea12:	68f8      	ldr	r0, [r7, #12]
 810ea14:	f000 f838 	bl	810ea88 <I2C_IsErrorOccurred>
 810ea18:	4603      	mov	r3, r0
 810ea1a:	2b00      	cmp	r3, #0
 810ea1c:	d001      	beq.n	810ea22 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 810ea1e:	2301      	movs	r3, #1
 810ea20:	e02d      	b.n	810ea7e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 810ea22:	f7fd fb35 	bl	810c090 <HAL_GetTick>
 810ea26:	4602      	mov	r2, r0
 810ea28:	687b      	ldr	r3, [r7, #4]
 810ea2a:	1ad3      	subs	r3, r2, r3
 810ea2c:	68ba      	ldr	r2, [r7, #8]
 810ea2e:	429a      	cmp	r2, r3
 810ea30:	d302      	bcc.n	810ea38 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 810ea32:	68bb      	ldr	r3, [r7, #8]
 810ea34:	2b00      	cmp	r3, #0
 810ea36:	d11a      	bne.n	810ea6e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 810ea38:	68fb      	ldr	r3, [r7, #12]
 810ea3a:	681b      	ldr	r3, [r3, #0]
 810ea3c:	699b      	ldr	r3, [r3, #24]
 810ea3e:	f003 0320 	and.w	r3, r3, #32
 810ea42:	2b20      	cmp	r3, #32
 810ea44:	d013      	beq.n	810ea6e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 810ea46:	68fb      	ldr	r3, [r7, #12]
 810ea48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 810ea4a:	f043 0220 	orr.w	r2, r3, #32
 810ea4e:	68fb      	ldr	r3, [r7, #12]
 810ea50:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 810ea52:	68fb      	ldr	r3, [r7, #12]
 810ea54:	2220      	movs	r2, #32
 810ea56:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 810ea5a:	68fb      	ldr	r3, [r7, #12]
 810ea5c:	2200      	movs	r2, #0
 810ea5e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 810ea62:	68fb      	ldr	r3, [r7, #12]
 810ea64:	2200      	movs	r2, #0
 810ea66:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 810ea6a:	2301      	movs	r3, #1
 810ea6c:	e007      	b.n	810ea7e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 810ea6e:	68fb      	ldr	r3, [r7, #12]
 810ea70:	681b      	ldr	r3, [r3, #0]
 810ea72:	699b      	ldr	r3, [r3, #24]
 810ea74:	f003 0320 	and.w	r3, r3, #32
 810ea78:	2b20      	cmp	r3, #32
 810ea7a:	d1c8      	bne.n	810ea0e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 810ea7c:	2300      	movs	r3, #0
}
 810ea7e:	4618      	mov	r0, r3
 810ea80:	3710      	adds	r7, #16
 810ea82:	46bd      	mov	sp, r7
 810ea84:	bd80      	pop	{r7, pc}
	...

0810ea88 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 810ea88:	b580      	push	{r7, lr}
 810ea8a:	b08a      	sub	sp, #40	@ 0x28
 810ea8c:	af00      	add	r7, sp, #0
 810ea8e:	60f8      	str	r0, [r7, #12]
 810ea90:	60b9      	str	r1, [r7, #8]
 810ea92:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 810ea94:	2300      	movs	r3, #0
 810ea96:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 810ea9a:	68fb      	ldr	r3, [r7, #12]
 810ea9c:	681b      	ldr	r3, [r3, #0]
 810ea9e:	699b      	ldr	r3, [r3, #24]
 810eaa0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 810eaa2:	2300      	movs	r3, #0
 810eaa4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 810eaa6:	687b      	ldr	r3, [r7, #4]
 810eaa8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 810eaaa:	69bb      	ldr	r3, [r7, #24]
 810eaac:	f003 0310 	and.w	r3, r3, #16
 810eab0:	2b00      	cmp	r3, #0
 810eab2:	d068      	beq.n	810eb86 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 810eab4:	68fb      	ldr	r3, [r7, #12]
 810eab6:	681b      	ldr	r3, [r3, #0]
 810eab8:	2210      	movs	r2, #16
 810eaba:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 810eabc:	e049      	b.n	810eb52 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 810eabe:	68bb      	ldr	r3, [r7, #8]
 810eac0:	f1b3 3fff 	cmp.w	r3, #4294967295
 810eac4:	d045      	beq.n	810eb52 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 810eac6:	f7fd fae3 	bl	810c090 <HAL_GetTick>
 810eaca:	4602      	mov	r2, r0
 810eacc:	69fb      	ldr	r3, [r7, #28]
 810eace:	1ad3      	subs	r3, r2, r3
 810ead0:	68ba      	ldr	r2, [r7, #8]
 810ead2:	429a      	cmp	r2, r3
 810ead4:	d302      	bcc.n	810eadc <I2C_IsErrorOccurred+0x54>
 810ead6:	68bb      	ldr	r3, [r7, #8]
 810ead8:	2b00      	cmp	r3, #0
 810eada:	d13a      	bne.n	810eb52 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 810eadc:	68fb      	ldr	r3, [r7, #12]
 810eade:	681b      	ldr	r3, [r3, #0]
 810eae0:	685b      	ldr	r3, [r3, #4]
 810eae2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 810eae6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 810eae8:	68fb      	ldr	r3, [r7, #12]
 810eaea:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 810eaee:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 810eaf0:	68fb      	ldr	r3, [r7, #12]
 810eaf2:	681b      	ldr	r3, [r3, #0]
 810eaf4:	699b      	ldr	r3, [r3, #24]
 810eaf6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 810eafa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 810eafe:	d121      	bne.n	810eb44 <I2C_IsErrorOccurred+0xbc>
 810eb00:	697b      	ldr	r3, [r7, #20]
 810eb02:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 810eb06:	d01d      	beq.n	810eb44 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 810eb08:	7cfb      	ldrb	r3, [r7, #19]
 810eb0a:	2b20      	cmp	r3, #32
 810eb0c:	d01a      	beq.n	810eb44 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 810eb0e:	68fb      	ldr	r3, [r7, #12]
 810eb10:	681b      	ldr	r3, [r3, #0]
 810eb12:	685a      	ldr	r2, [r3, #4]
 810eb14:	68fb      	ldr	r3, [r7, #12]
 810eb16:	681b      	ldr	r3, [r3, #0]
 810eb18:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 810eb1c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 810eb1e:	f7fd fab7 	bl	810c090 <HAL_GetTick>
 810eb22:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 810eb24:	e00e      	b.n	810eb44 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 810eb26:	f7fd fab3 	bl	810c090 <HAL_GetTick>
 810eb2a:	4602      	mov	r2, r0
 810eb2c:	69fb      	ldr	r3, [r7, #28]
 810eb2e:	1ad3      	subs	r3, r2, r3
 810eb30:	2b19      	cmp	r3, #25
 810eb32:	d907      	bls.n	810eb44 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 810eb34:	6a3b      	ldr	r3, [r7, #32]
 810eb36:	f043 0320 	orr.w	r3, r3, #32
 810eb3a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 810eb3c:	2301      	movs	r3, #1
 810eb3e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 810eb42:	e006      	b.n	810eb52 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 810eb44:	68fb      	ldr	r3, [r7, #12]
 810eb46:	681b      	ldr	r3, [r3, #0]
 810eb48:	699b      	ldr	r3, [r3, #24]
 810eb4a:	f003 0320 	and.w	r3, r3, #32
 810eb4e:	2b20      	cmp	r3, #32
 810eb50:	d1e9      	bne.n	810eb26 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 810eb52:	68fb      	ldr	r3, [r7, #12]
 810eb54:	681b      	ldr	r3, [r3, #0]
 810eb56:	699b      	ldr	r3, [r3, #24]
 810eb58:	f003 0320 	and.w	r3, r3, #32
 810eb5c:	2b20      	cmp	r3, #32
 810eb5e:	d003      	beq.n	810eb68 <I2C_IsErrorOccurred+0xe0>
 810eb60:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 810eb64:	2b00      	cmp	r3, #0
 810eb66:	d0aa      	beq.n	810eabe <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 810eb68:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 810eb6c:	2b00      	cmp	r3, #0
 810eb6e:	d103      	bne.n	810eb78 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 810eb70:	68fb      	ldr	r3, [r7, #12]
 810eb72:	681b      	ldr	r3, [r3, #0]
 810eb74:	2220      	movs	r2, #32
 810eb76:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 810eb78:	6a3b      	ldr	r3, [r7, #32]
 810eb7a:	f043 0304 	orr.w	r3, r3, #4
 810eb7e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 810eb80:	2301      	movs	r3, #1
 810eb82:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 810eb86:	68fb      	ldr	r3, [r7, #12]
 810eb88:	681b      	ldr	r3, [r3, #0]
 810eb8a:	699b      	ldr	r3, [r3, #24]
 810eb8c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 810eb8e:	69bb      	ldr	r3, [r7, #24]
 810eb90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 810eb94:	2b00      	cmp	r3, #0
 810eb96:	d00b      	beq.n	810ebb0 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 810eb98:	6a3b      	ldr	r3, [r7, #32]
 810eb9a:	f043 0301 	orr.w	r3, r3, #1
 810eb9e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 810eba0:	68fb      	ldr	r3, [r7, #12]
 810eba2:	681b      	ldr	r3, [r3, #0]
 810eba4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 810eba8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 810ebaa:	2301      	movs	r3, #1
 810ebac:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 810ebb0:	69bb      	ldr	r3, [r7, #24]
 810ebb2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 810ebb6:	2b00      	cmp	r3, #0
 810ebb8:	d00b      	beq.n	810ebd2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 810ebba:	6a3b      	ldr	r3, [r7, #32]
 810ebbc:	f043 0308 	orr.w	r3, r3, #8
 810ebc0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 810ebc2:	68fb      	ldr	r3, [r7, #12]
 810ebc4:	681b      	ldr	r3, [r3, #0]
 810ebc6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 810ebca:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 810ebcc:	2301      	movs	r3, #1
 810ebce:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 810ebd2:	69bb      	ldr	r3, [r7, #24]
 810ebd4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 810ebd8:	2b00      	cmp	r3, #0
 810ebda:	d00b      	beq.n	810ebf4 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 810ebdc:	6a3b      	ldr	r3, [r7, #32]
 810ebde:	f043 0302 	orr.w	r3, r3, #2
 810ebe2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 810ebe4:	68fb      	ldr	r3, [r7, #12]
 810ebe6:	681b      	ldr	r3, [r3, #0]
 810ebe8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 810ebec:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 810ebee:	2301      	movs	r3, #1
 810ebf0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 810ebf4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 810ebf8:	2b00      	cmp	r3, #0
 810ebfa:	d01c      	beq.n	810ec36 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 810ebfc:	68f8      	ldr	r0, [r7, #12]
 810ebfe:	f7ff fe3b 	bl	810e878 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 810ec02:	68fb      	ldr	r3, [r7, #12]
 810ec04:	681b      	ldr	r3, [r3, #0]
 810ec06:	6859      	ldr	r1, [r3, #4]
 810ec08:	68fb      	ldr	r3, [r7, #12]
 810ec0a:	681a      	ldr	r2, [r3, #0]
 810ec0c:	4b0d      	ldr	r3, [pc, #52]	@ (810ec44 <I2C_IsErrorOccurred+0x1bc>)
 810ec0e:	400b      	ands	r3, r1
 810ec10:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 810ec12:	68fb      	ldr	r3, [r7, #12]
 810ec14:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 810ec16:	6a3b      	ldr	r3, [r7, #32]
 810ec18:	431a      	orrs	r2, r3
 810ec1a:	68fb      	ldr	r3, [r7, #12]
 810ec1c:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 810ec1e:	68fb      	ldr	r3, [r7, #12]
 810ec20:	2220      	movs	r2, #32
 810ec22:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 810ec26:	68fb      	ldr	r3, [r7, #12]
 810ec28:	2200      	movs	r2, #0
 810ec2a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 810ec2e:	68fb      	ldr	r3, [r7, #12]
 810ec30:	2200      	movs	r2, #0
 810ec32:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 810ec36:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 810ec3a:	4618      	mov	r0, r3
 810ec3c:	3728      	adds	r7, #40	@ 0x28
 810ec3e:	46bd      	mov	sp, r7
 810ec40:	bd80      	pop	{r7, pc}
 810ec42:	bf00      	nop
 810ec44:	fe00e800 	.word	0xfe00e800

0810ec48 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 810ec48:	b480      	push	{r7}
 810ec4a:	b087      	sub	sp, #28
 810ec4c:	af00      	add	r7, sp, #0
 810ec4e:	60f8      	str	r0, [r7, #12]
 810ec50:	607b      	str	r3, [r7, #4]
 810ec52:	460b      	mov	r3, r1
 810ec54:	817b      	strh	r3, [r7, #10]
 810ec56:	4613      	mov	r3, r2
 810ec58:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 810ec5a:	897b      	ldrh	r3, [r7, #10]
 810ec5c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 810ec60:	7a7b      	ldrb	r3, [r7, #9]
 810ec62:	041b      	lsls	r3, r3, #16
 810ec64:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 810ec68:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 810ec6a:	687b      	ldr	r3, [r7, #4]
 810ec6c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 810ec6e:	6a3b      	ldr	r3, [r7, #32]
 810ec70:	4313      	orrs	r3, r2
 810ec72:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 810ec76:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 810ec78:	68fb      	ldr	r3, [r7, #12]
 810ec7a:	681b      	ldr	r3, [r3, #0]
 810ec7c:	685a      	ldr	r2, [r3, #4]
 810ec7e:	6a3b      	ldr	r3, [r7, #32]
 810ec80:	0d5b      	lsrs	r3, r3, #21
 810ec82:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 810ec86:	4b08      	ldr	r3, [pc, #32]	@ (810eca8 <I2C_TransferConfig+0x60>)
 810ec88:	430b      	orrs	r3, r1
 810ec8a:	43db      	mvns	r3, r3
 810ec8c:	ea02 0103 	and.w	r1, r2, r3
 810ec90:	68fb      	ldr	r3, [r7, #12]
 810ec92:	681b      	ldr	r3, [r3, #0]
 810ec94:	697a      	ldr	r2, [r7, #20]
 810ec96:	430a      	orrs	r2, r1
 810ec98:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 810ec9a:	bf00      	nop
 810ec9c:	371c      	adds	r7, #28
 810ec9e:	46bd      	mov	sp, r7
 810eca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 810eca4:	4770      	bx	lr
 810eca6:	bf00      	nop
 810eca8:	03ff63ff 	.word	0x03ff63ff

0810ecac <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 810ecac:	b480      	push	{r7}
 810ecae:	b083      	sub	sp, #12
 810ecb0:	af00      	add	r7, sp, #0
 810ecb2:	6078      	str	r0, [r7, #4]
 810ecb4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 810ecb6:	687b      	ldr	r3, [r7, #4]
 810ecb8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 810ecbc:	b2db      	uxtb	r3, r3
 810ecbe:	2b20      	cmp	r3, #32
 810ecc0:	d138      	bne.n	810ed34 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 810ecc2:	687b      	ldr	r3, [r7, #4]
 810ecc4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 810ecc8:	2b01      	cmp	r3, #1
 810ecca:	d101      	bne.n	810ecd0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 810eccc:	2302      	movs	r3, #2
 810ecce:	e032      	b.n	810ed36 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 810ecd0:	687b      	ldr	r3, [r7, #4]
 810ecd2:	2201      	movs	r2, #1
 810ecd4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 810ecd8:	687b      	ldr	r3, [r7, #4]
 810ecda:	2224      	movs	r2, #36	@ 0x24
 810ecdc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 810ece0:	687b      	ldr	r3, [r7, #4]
 810ece2:	681b      	ldr	r3, [r3, #0]
 810ece4:	681a      	ldr	r2, [r3, #0]
 810ece6:	687b      	ldr	r3, [r7, #4]
 810ece8:	681b      	ldr	r3, [r3, #0]
 810ecea:	f022 0201 	bic.w	r2, r2, #1
 810ecee:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 810ecf0:	687b      	ldr	r3, [r7, #4]
 810ecf2:	681b      	ldr	r3, [r3, #0]
 810ecf4:	681a      	ldr	r2, [r3, #0]
 810ecf6:	687b      	ldr	r3, [r7, #4]
 810ecf8:	681b      	ldr	r3, [r3, #0]
 810ecfa:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 810ecfe:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 810ed00:	687b      	ldr	r3, [r7, #4]
 810ed02:	681b      	ldr	r3, [r3, #0]
 810ed04:	6819      	ldr	r1, [r3, #0]
 810ed06:	687b      	ldr	r3, [r7, #4]
 810ed08:	681b      	ldr	r3, [r3, #0]
 810ed0a:	683a      	ldr	r2, [r7, #0]
 810ed0c:	430a      	orrs	r2, r1
 810ed0e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 810ed10:	687b      	ldr	r3, [r7, #4]
 810ed12:	681b      	ldr	r3, [r3, #0]
 810ed14:	681a      	ldr	r2, [r3, #0]
 810ed16:	687b      	ldr	r3, [r7, #4]
 810ed18:	681b      	ldr	r3, [r3, #0]
 810ed1a:	f042 0201 	orr.w	r2, r2, #1
 810ed1e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 810ed20:	687b      	ldr	r3, [r7, #4]
 810ed22:	2220      	movs	r2, #32
 810ed24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 810ed28:	687b      	ldr	r3, [r7, #4]
 810ed2a:	2200      	movs	r2, #0
 810ed2c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 810ed30:	2300      	movs	r3, #0
 810ed32:	e000      	b.n	810ed36 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 810ed34:	2302      	movs	r3, #2
  }
}
 810ed36:	4618      	mov	r0, r3
 810ed38:	370c      	adds	r7, #12
 810ed3a:	46bd      	mov	sp, r7
 810ed3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ed40:	4770      	bx	lr

0810ed42 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 810ed42:	b480      	push	{r7}
 810ed44:	b085      	sub	sp, #20
 810ed46:	af00      	add	r7, sp, #0
 810ed48:	6078      	str	r0, [r7, #4]
 810ed4a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 810ed4c:	687b      	ldr	r3, [r7, #4]
 810ed4e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 810ed52:	b2db      	uxtb	r3, r3
 810ed54:	2b20      	cmp	r3, #32
 810ed56:	d139      	bne.n	810edcc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 810ed58:	687b      	ldr	r3, [r7, #4]
 810ed5a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 810ed5e:	2b01      	cmp	r3, #1
 810ed60:	d101      	bne.n	810ed66 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 810ed62:	2302      	movs	r3, #2
 810ed64:	e033      	b.n	810edce <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 810ed66:	687b      	ldr	r3, [r7, #4]
 810ed68:	2201      	movs	r2, #1
 810ed6a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 810ed6e:	687b      	ldr	r3, [r7, #4]
 810ed70:	2224      	movs	r2, #36	@ 0x24
 810ed72:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 810ed76:	687b      	ldr	r3, [r7, #4]
 810ed78:	681b      	ldr	r3, [r3, #0]
 810ed7a:	681a      	ldr	r2, [r3, #0]
 810ed7c:	687b      	ldr	r3, [r7, #4]
 810ed7e:	681b      	ldr	r3, [r3, #0]
 810ed80:	f022 0201 	bic.w	r2, r2, #1
 810ed84:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 810ed86:	687b      	ldr	r3, [r7, #4]
 810ed88:	681b      	ldr	r3, [r3, #0]
 810ed8a:	681b      	ldr	r3, [r3, #0]
 810ed8c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 810ed8e:	68fb      	ldr	r3, [r7, #12]
 810ed90:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 810ed94:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 810ed96:	683b      	ldr	r3, [r7, #0]
 810ed98:	021b      	lsls	r3, r3, #8
 810ed9a:	68fa      	ldr	r2, [r7, #12]
 810ed9c:	4313      	orrs	r3, r2
 810ed9e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 810eda0:	687b      	ldr	r3, [r7, #4]
 810eda2:	681b      	ldr	r3, [r3, #0]
 810eda4:	68fa      	ldr	r2, [r7, #12]
 810eda6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 810eda8:	687b      	ldr	r3, [r7, #4]
 810edaa:	681b      	ldr	r3, [r3, #0]
 810edac:	681a      	ldr	r2, [r3, #0]
 810edae:	687b      	ldr	r3, [r7, #4]
 810edb0:	681b      	ldr	r3, [r3, #0]
 810edb2:	f042 0201 	orr.w	r2, r2, #1
 810edb6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 810edb8:	687b      	ldr	r3, [r7, #4]
 810edba:	2220      	movs	r2, #32
 810edbc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 810edc0:	687b      	ldr	r3, [r7, #4]
 810edc2:	2200      	movs	r2, #0
 810edc4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 810edc8:	2300      	movs	r3, #0
 810edca:	e000      	b.n	810edce <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 810edcc:	2302      	movs	r3, #2
  }
}
 810edce:	4618      	mov	r0, r3
 810edd0:	3714      	adds	r7, #20
 810edd2:	46bd      	mov	sp, r7
 810edd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 810edd8:	4770      	bx	lr
	...

0810eddc <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 810eddc:	b580      	push	{r7, lr}
 810edde:	b084      	sub	sp, #16
 810ede0:	af00      	add	r7, sp, #0
 810ede2:	60f8      	str	r0, [r7, #12]
 810ede4:	460b      	mov	r3, r1
 810ede6:	607a      	str	r2, [r7, #4]
 810ede8:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 810edea:	4b37      	ldr	r3, [pc, #220]	@ (810eec8 <HAL_PWREx_EnterSTOPMode+0xec>)
 810edec:	681b      	ldr	r3, [r3, #0]
 810edee:	f023 0201 	bic.w	r2, r3, #1
 810edf2:	4935      	ldr	r1, [pc, #212]	@ (810eec8 <HAL_PWREx_EnterSTOPMode+0xec>)
 810edf4:	68fb      	ldr	r3, [r7, #12]
 810edf6:	4313      	orrs	r3, r2
 810edf8:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 810edfa:	687b      	ldr	r3, [r7, #4]
 810edfc:	2b00      	cmp	r3, #0
 810edfe:	d123      	bne.n	810ee48 <HAL_PWREx_EnterSTOPMode+0x6c>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 810ee00:	f7fd fa46 	bl	810c290 <HAL_GetCurrentCPUID>
 810ee04:	4603      	mov	r3, r0
 810ee06:	2b03      	cmp	r3, #3
 810ee08:	d158      	bne.n	810eebc <HAL_PWREx_EnterSTOPMode+0xe0>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 810ee0a:	4b2f      	ldr	r3, [pc, #188]	@ (810eec8 <HAL_PWREx_EnterSTOPMode+0xec>)
 810ee0c:	691b      	ldr	r3, [r3, #16]
 810ee0e:	4a2e      	ldr	r2, [pc, #184]	@ (810eec8 <HAL_PWREx_EnterSTOPMode+0xec>)
 810ee10:	f023 0301 	bic.w	r3, r3, #1
 810ee14:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 810ee16:	4b2d      	ldr	r3, [pc, #180]	@ (810eecc <HAL_PWREx_EnterSTOPMode+0xf0>)
 810ee18:	691b      	ldr	r3, [r3, #16]
 810ee1a:	4a2c      	ldr	r2, [pc, #176]	@ (810eecc <HAL_PWREx_EnterSTOPMode+0xf0>)
 810ee1c:	f043 0304 	orr.w	r3, r3, #4
 810ee20:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 810ee22:	f3bf 8f4f 	dsb	sy
}
 810ee26:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 810ee28:	f3bf 8f6f 	isb	sy
}
 810ee2c:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 810ee2e:	7afb      	ldrb	r3, [r7, #11]
 810ee30:	2b01      	cmp	r3, #1
 810ee32:	d101      	bne.n	810ee38 <HAL_PWREx_EnterSTOPMode+0x5c>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 810ee34:	bf30      	wfi
 810ee36:	e000      	b.n	810ee3a <HAL_PWREx_EnterSTOPMode+0x5e>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 810ee38:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 810ee3a:	4b24      	ldr	r3, [pc, #144]	@ (810eecc <HAL_PWREx_EnterSTOPMode+0xf0>)
 810ee3c:	691b      	ldr	r3, [r3, #16]
 810ee3e:	4a23      	ldr	r2, [pc, #140]	@ (810eecc <HAL_PWREx_EnterSTOPMode+0xf0>)
 810ee40:	f023 0304 	bic.w	r3, r3, #4
 810ee44:	6113      	str	r3, [r2, #16]
 810ee46:	e03c      	b.n	810eec2 <HAL_PWREx_EnterSTOPMode+0xe6>
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 810ee48:	687b      	ldr	r3, [r7, #4]
 810ee4a:	2b01      	cmp	r3, #1
 810ee4c:	d123      	bne.n	810ee96 <HAL_PWREx_EnterSTOPMode+0xba>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 810ee4e:	f7fd fa1f 	bl	810c290 <HAL_GetCurrentCPUID>
 810ee52:	4603      	mov	r3, r0
 810ee54:	2b01      	cmp	r3, #1
 810ee56:	d133      	bne.n	810eec0 <HAL_PWREx_EnterSTOPMode+0xe4>
      */
      return;
    }

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 810ee58:	4b1b      	ldr	r3, [pc, #108]	@ (810eec8 <HAL_PWREx_EnterSTOPMode+0xec>)
 810ee5a:	695b      	ldr	r3, [r3, #20]
 810ee5c:	4a1a      	ldr	r2, [pc, #104]	@ (810eec8 <HAL_PWREx_EnterSTOPMode+0xec>)
 810ee5e:	f023 0302 	bic.w	r3, r3, #2
 810ee62:	6153      	str	r3, [r2, #20]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 810ee64:	4b19      	ldr	r3, [pc, #100]	@ (810eecc <HAL_PWREx_EnterSTOPMode+0xf0>)
 810ee66:	691b      	ldr	r3, [r3, #16]
 810ee68:	4a18      	ldr	r2, [pc, #96]	@ (810eecc <HAL_PWREx_EnterSTOPMode+0xf0>)
 810ee6a:	f043 0304 	orr.w	r3, r3, #4
 810ee6e:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 810ee70:	f3bf 8f4f 	dsb	sy
}
 810ee74:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 810ee76:	f3bf 8f6f 	isb	sy
}
 810ee7a:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 810ee7c:	7afb      	ldrb	r3, [r7, #11]
 810ee7e:	2b01      	cmp	r3, #1
 810ee80:	d101      	bne.n	810ee86 <HAL_PWREx_EnterSTOPMode+0xaa>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 810ee82:	bf30      	wfi
 810ee84:	e000      	b.n	810ee88 <HAL_PWREx_EnterSTOPMode+0xac>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 810ee86:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 810ee88:	4b10      	ldr	r3, [pc, #64]	@ (810eecc <HAL_PWREx_EnterSTOPMode+0xf0>)
 810ee8a:	691b      	ldr	r3, [r3, #16]
 810ee8c:	4a0f      	ldr	r2, [pc, #60]	@ (810eecc <HAL_PWREx_EnterSTOPMode+0xf0>)
 810ee8e:	f023 0304 	bic.w	r3, r3, #4
 810ee92:	6113      	str	r3, [r2, #16]
 810ee94:	e015      	b.n	810eec2 <HAL_PWREx_EnterSTOPMode+0xe6>
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 810ee96:	f7fd f9fb 	bl	810c290 <HAL_GetCurrentCPUID>
 810ee9a:	4603      	mov	r3, r0
 810ee9c:	2b03      	cmp	r3, #3
 810ee9e:	d106      	bne.n	810eeae <HAL_PWREx_EnterSTOPMode+0xd2>
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 810eea0:	4b09      	ldr	r3, [pc, #36]	@ (810eec8 <HAL_PWREx_EnterSTOPMode+0xec>)
 810eea2:	691b      	ldr	r3, [r3, #16]
 810eea4:	4a08      	ldr	r2, [pc, #32]	@ (810eec8 <HAL_PWREx_EnterSTOPMode+0xec>)
 810eea6:	f023 0304 	bic.w	r3, r3, #4
 810eeaa:	6113      	str	r3, [r2, #16]
 810eeac:	e009      	b.n	810eec2 <HAL_PWREx_EnterSTOPMode+0xe6>
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 810eeae:	4b06      	ldr	r3, [pc, #24]	@ (810eec8 <HAL_PWREx_EnterSTOPMode+0xec>)
 810eeb0:	695b      	ldr	r3, [r3, #20]
 810eeb2:	4a05      	ldr	r2, [pc, #20]	@ (810eec8 <HAL_PWREx_EnterSTOPMode+0xec>)
 810eeb4:	f023 0304 	bic.w	r3, r3, #4
 810eeb8:	6153      	str	r3, [r2, #20]
 810eeba:	e002      	b.n	810eec2 <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 810eebc:	bf00      	nop
 810eebe:	e000      	b.n	810eec2 <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 810eec0:	bf00      	nop
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 810eec2:	3710      	adds	r7, #16
 810eec4:	46bd      	mov	sp, r7
 810eec6:	bd80      	pop	{r7, pc}
 810eec8:	58024800 	.word	0x58024800
 810eecc:	e000ed00 	.word	0xe000ed00

0810eed0 <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 810eed0:	b580      	push	{r7, lr}
 810eed2:	af00      	add	r7, sp, #0
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 810eed4:	f7fd f9dc 	bl	810c290 <HAL_GetCurrentCPUID>
 810eed8:	4603      	mov	r3, r0
 810eeda:	2b03      	cmp	r3, #3
 810eedc:	d101      	bne.n	810eee2 <HAL_PWREx_ClearPendingEvent+0x12>
  {
    __WFE ();
 810eede:	bf20      	wfe
    __WFE ();
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 810eee0:	e001      	b.n	810eee6 <HAL_PWREx_ClearPendingEvent+0x16>
    __SEV ();
 810eee2:	bf40      	sev
    __WFE ();
 810eee4:	bf20      	wfe
}
 810eee6:	bf00      	nop
 810eee8:	bd80      	pop	{r7, pc}
	...

0810eeec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 810eeec:	b480      	push	{r7}
 810eeee:	b089      	sub	sp, #36	@ 0x24
 810eef0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 810eef2:	4bb3      	ldr	r3, [pc, #716]	@ (810f1c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810eef4:	691b      	ldr	r3, [r3, #16]
 810eef6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 810eefa:	2b18      	cmp	r3, #24
 810eefc:	f200 8155 	bhi.w	810f1aa <HAL_RCC_GetSysClockFreq+0x2be>
 810ef00:	a201      	add	r2, pc, #4	@ (adr r2, 810ef08 <HAL_RCC_GetSysClockFreq+0x1c>)
 810ef02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810ef06:	bf00      	nop
 810ef08:	0810ef6d 	.word	0x0810ef6d
 810ef0c:	0810f1ab 	.word	0x0810f1ab
 810ef10:	0810f1ab 	.word	0x0810f1ab
 810ef14:	0810f1ab 	.word	0x0810f1ab
 810ef18:	0810f1ab 	.word	0x0810f1ab
 810ef1c:	0810f1ab 	.word	0x0810f1ab
 810ef20:	0810f1ab 	.word	0x0810f1ab
 810ef24:	0810f1ab 	.word	0x0810f1ab
 810ef28:	0810ef93 	.word	0x0810ef93
 810ef2c:	0810f1ab 	.word	0x0810f1ab
 810ef30:	0810f1ab 	.word	0x0810f1ab
 810ef34:	0810f1ab 	.word	0x0810f1ab
 810ef38:	0810f1ab 	.word	0x0810f1ab
 810ef3c:	0810f1ab 	.word	0x0810f1ab
 810ef40:	0810f1ab 	.word	0x0810f1ab
 810ef44:	0810f1ab 	.word	0x0810f1ab
 810ef48:	0810ef99 	.word	0x0810ef99
 810ef4c:	0810f1ab 	.word	0x0810f1ab
 810ef50:	0810f1ab 	.word	0x0810f1ab
 810ef54:	0810f1ab 	.word	0x0810f1ab
 810ef58:	0810f1ab 	.word	0x0810f1ab
 810ef5c:	0810f1ab 	.word	0x0810f1ab
 810ef60:	0810f1ab 	.word	0x0810f1ab
 810ef64:	0810f1ab 	.word	0x0810f1ab
 810ef68:	0810ef9f 	.word	0x0810ef9f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810ef6c:	4b94      	ldr	r3, [pc, #592]	@ (810f1c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810ef6e:	681b      	ldr	r3, [r3, #0]
 810ef70:	f003 0320 	and.w	r3, r3, #32
 810ef74:	2b00      	cmp	r3, #0
 810ef76:	d009      	beq.n	810ef8c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 810ef78:	4b91      	ldr	r3, [pc, #580]	@ (810f1c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810ef7a:	681b      	ldr	r3, [r3, #0]
 810ef7c:	08db      	lsrs	r3, r3, #3
 810ef7e:	f003 0303 	and.w	r3, r3, #3
 810ef82:	4a90      	ldr	r2, [pc, #576]	@ (810f1c4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 810ef84:	fa22 f303 	lsr.w	r3, r2, r3
 810ef88:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 810ef8a:	e111      	b.n	810f1b0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 810ef8c:	4b8d      	ldr	r3, [pc, #564]	@ (810f1c4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 810ef8e:	61bb      	str	r3, [r7, #24]
      break;
 810ef90:	e10e      	b.n	810f1b0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 810ef92:	4b8d      	ldr	r3, [pc, #564]	@ (810f1c8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 810ef94:	61bb      	str	r3, [r7, #24]
      break;
 810ef96:	e10b      	b.n	810f1b0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 810ef98:	4b8c      	ldr	r3, [pc, #560]	@ (810f1cc <HAL_RCC_GetSysClockFreq+0x2e0>)
 810ef9a:	61bb      	str	r3, [r7, #24]
      break;
 810ef9c:	e108      	b.n	810f1b0 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 810ef9e:	4b88      	ldr	r3, [pc, #544]	@ (810f1c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810efa0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810efa2:	f003 0303 	and.w	r3, r3, #3
 810efa6:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 810efa8:	4b85      	ldr	r3, [pc, #532]	@ (810f1c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810efaa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810efac:	091b      	lsrs	r3, r3, #4
 810efae:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 810efb2:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 810efb4:	4b82      	ldr	r3, [pc, #520]	@ (810f1c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810efb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810efb8:	f003 0301 	and.w	r3, r3, #1
 810efbc:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 810efbe:	4b80      	ldr	r3, [pc, #512]	@ (810f1c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810efc0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 810efc2:	08db      	lsrs	r3, r3, #3
 810efc4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 810efc8:	68fa      	ldr	r2, [r7, #12]
 810efca:	fb02 f303 	mul.w	r3, r2, r3
 810efce:	ee07 3a90 	vmov	s15, r3
 810efd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810efd6:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 810efda:	693b      	ldr	r3, [r7, #16]
 810efdc:	2b00      	cmp	r3, #0
 810efde:	f000 80e1 	beq.w	810f1a4 <HAL_RCC_GetSysClockFreq+0x2b8>
 810efe2:	697b      	ldr	r3, [r7, #20]
 810efe4:	2b02      	cmp	r3, #2
 810efe6:	f000 8083 	beq.w	810f0f0 <HAL_RCC_GetSysClockFreq+0x204>
 810efea:	697b      	ldr	r3, [r7, #20]
 810efec:	2b02      	cmp	r3, #2
 810efee:	f200 80a1 	bhi.w	810f134 <HAL_RCC_GetSysClockFreq+0x248>
 810eff2:	697b      	ldr	r3, [r7, #20]
 810eff4:	2b00      	cmp	r3, #0
 810eff6:	d003      	beq.n	810f000 <HAL_RCC_GetSysClockFreq+0x114>
 810eff8:	697b      	ldr	r3, [r7, #20]
 810effa:	2b01      	cmp	r3, #1
 810effc:	d056      	beq.n	810f0ac <HAL_RCC_GetSysClockFreq+0x1c0>
 810effe:	e099      	b.n	810f134 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810f000:	4b6f      	ldr	r3, [pc, #444]	@ (810f1c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810f002:	681b      	ldr	r3, [r3, #0]
 810f004:	f003 0320 	and.w	r3, r3, #32
 810f008:	2b00      	cmp	r3, #0
 810f00a:	d02d      	beq.n	810f068 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 810f00c:	4b6c      	ldr	r3, [pc, #432]	@ (810f1c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810f00e:	681b      	ldr	r3, [r3, #0]
 810f010:	08db      	lsrs	r3, r3, #3
 810f012:	f003 0303 	and.w	r3, r3, #3
 810f016:	4a6b      	ldr	r2, [pc, #428]	@ (810f1c4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 810f018:	fa22 f303 	lsr.w	r3, r2, r3
 810f01c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 810f01e:	687b      	ldr	r3, [r7, #4]
 810f020:	ee07 3a90 	vmov	s15, r3
 810f024:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810f028:	693b      	ldr	r3, [r7, #16]
 810f02a:	ee07 3a90 	vmov	s15, r3
 810f02e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810f032:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810f036:	4b62      	ldr	r3, [pc, #392]	@ (810f1c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810f038:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810f03a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810f03e:	ee07 3a90 	vmov	s15, r3
 810f042:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810f046:	ed97 6a02 	vldr	s12, [r7, #8]
 810f04a:	eddf 5a61 	vldr	s11, [pc, #388]	@ 810f1d0 <HAL_RCC_GetSysClockFreq+0x2e4>
 810f04e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810f052:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810f056:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810f05a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810f05e:	ee67 7a27 	vmul.f32	s15, s14, s15
 810f062:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 810f066:	e087      	b.n	810f178 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 810f068:	693b      	ldr	r3, [r7, #16]
 810f06a:	ee07 3a90 	vmov	s15, r3
 810f06e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810f072:	eddf 6a58 	vldr	s13, [pc, #352]	@ 810f1d4 <HAL_RCC_GetSysClockFreq+0x2e8>
 810f076:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810f07a:	4b51      	ldr	r3, [pc, #324]	@ (810f1c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810f07c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810f07e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810f082:	ee07 3a90 	vmov	s15, r3
 810f086:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810f08a:	ed97 6a02 	vldr	s12, [r7, #8]
 810f08e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 810f1d0 <HAL_RCC_GetSysClockFreq+0x2e4>
 810f092:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810f096:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810f09a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810f09e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810f0a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 810f0a6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 810f0aa:	e065      	b.n	810f178 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 810f0ac:	693b      	ldr	r3, [r7, #16]
 810f0ae:	ee07 3a90 	vmov	s15, r3
 810f0b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810f0b6:	eddf 6a48 	vldr	s13, [pc, #288]	@ 810f1d8 <HAL_RCC_GetSysClockFreq+0x2ec>
 810f0ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810f0be:	4b40      	ldr	r3, [pc, #256]	@ (810f1c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810f0c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810f0c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810f0c6:	ee07 3a90 	vmov	s15, r3
 810f0ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810f0ce:	ed97 6a02 	vldr	s12, [r7, #8]
 810f0d2:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 810f1d0 <HAL_RCC_GetSysClockFreq+0x2e4>
 810f0d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810f0da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810f0de:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810f0e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810f0e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 810f0ea:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 810f0ee:	e043      	b.n	810f178 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 810f0f0:	693b      	ldr	r3, [r7, #16]
 810f0f2:	ee07 3a90 	vmov	s15, r3
 810f0f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810f0fa:	eddf 6a38 	vldr	s13, [pc, #224]	@ 810f1dc <HAL_RCC_GetSysClockFreq+0x2f0>
 810f0fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810f102:	4b2f      	ldr	r3, [pc, #188]	@ (810f1c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810f104:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810f106:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810f10a:	ee07 3a90 	vmov	s15, r3
 810f10e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810f112:	ed97 6a02 	vldr	s12, [r7, #8]
 810f116:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 810f1d0 <HAL_RCC_GetSysClockFreq+0x2e4>
 810f11a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810f11e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810f122:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810f126:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810f12a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810f12e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 810f132:	e021      	b.n	810f178 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 810f134:	693b      	ldr	r3, [r7, #16]
 810f136:	ee07 3a90 	vmov	s15, r3
 810f13a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810f13e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 810f1d8 <HAL_RCC_GetSysClockFreq+0x2ec>
 810f142:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810f146:	4b1e      	ldr	r3, [pc, #120]	@ (810f1c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810f148:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810f14a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810f14e:	ee07 3a90 	vmov	s15, r3
 810f152:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810f156:	ed97 6a02 	vldr	s12, [r7, #8]
 810f15a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 810f1d0 <HAL_RCC_GetSysClockFreq+0x2e4>
 810f15e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810f162:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810f166:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810f16a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810f16e:	ee67 7a27 	vmul.f32	s15, s14, s15
 810f172:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 810f176:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 810f178:	4b11      	ldr	r3, [pc, #68]	@ (810f1c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810f17a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810f17c:	0a5b      	lsrs	r3, r3, #9
 810f17e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 810f182:	3301      	adds	r3, #1
 810f184:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 810f186:	683b      	ldr	r3, [r7, #0]
 810f188:	ee07 3a90 	vmov	s15, r3
 810f18c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 810f190:	edd7 6a07 	vldr	s13, [r7, #28]
 810f194:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810f198:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810f19c:	ee17 3a90 	vmov	r3, s15
 810f1a0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 810f1a2:	e005      	b.n	810f1b0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 810f1a4:	2300      	movs	r3, #0
 810f1a6:	61bb      	str	r3, [r7, #24]
      break;
 810f1a8:	e002      	b.n	810f1b0 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 810f1aa:	4b07      	ldr	r3, [pc, #28]	@ (810f1c8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 810f1ac:	61bb      	str	r3, [r7, #24]
      break;
 810f1ae:	bf00      	nop
  }

  return sysclockfreq;
 810f1b0:	69bb      	ldr	r3, [r7, #24]
}
 810f1b2:	4618      	mov	r0, r3
 810f1b4:	3724      	adds	r7, #36	@ 0x24
 810f1b6:	46bd      	mov	sp, r7
 810f1b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 810f1bc:	4770      	bx	lr
 810f1be:	bf00      	nop
 810f1c0:	58024400 	.word	0x58024400
 810f1c4:	03d09000 	.word	0x03d09000
 810f1c8:	003d0900 	.word	0x003d0900
 810f1cc:	017d7840 	.word	0x017d7840
 810f1d0:	46000000 	.word	0x46000000
 810f1d4:	4c742400 	.word	0x4c742400
 810f1d8:	4a742400 	.word	0x4a742400
 810f1dc:	4bbebc20 	.word	0x4bbebc20

0810f1e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 810f1e0:	b580      	push	{r7, lr}
 810f1e2:	b082      	sub	sp, #8
 810f1e4:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 810f1e6:	f7ff fe81 	bl	810eeec <HAL_RCC_GetSysClockFreq>
 810f1ea:	4602      	mov	r2, r0
 810f1ec:	4b11      	ldr	r3, [pc, #68]	@ (810f234 <HAL_RCC_GetHCLKFreq+0x54>)
 810f1ee:	699b      	ldr	r3, [r3, #24]
 810f1f0:	0a1b      	lsrs	r3, r3, #8
 810f1f2:	f003 030f 	and.w	r3, r3, #15
 810f1f6:	4910      	ldr	r1, [pc, #64]	@ (810f238 <HAL_RCC_GetHCLKFreq+0x58>)
 810f1f8:	5ccb      	ldrb	r3, [r1, r3]
 810f1fa:	f003 031f 	and.w	r3, r3, #31
 810f1fe:	fa22 f303 	lsr.w	r3, r2, r3
 810f202:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 810f204:	4b0b      	ldr	r3, [pc, #44]	@ (810f234 <HAL_RCC_GetHCLKFreq+0x54>)
 810f206:	699b      	ldr	r3, [r3, #24]
 810f208:	f003 030f 	and.w	r3, r3, #15
 810f20c:	4a0a      	ldr	r2, [pc, #40]	@ (810f238 <HAL_RCC_GetHCLKFreq+0x58>)
 810f20e:	5cd3      	ldrb	r3, [r2, r3]
 810f210:	f003 031f 	and.w	r3, r3, #31
 810f214:	687a      	ldr	r2, [r7, #4]
 810f216:	fa22 f303 	lsr.w	r3, r2, r3
 810f21a:	4a08      	ldr	r2, [pc, #32]	@ (810f23c <HAL_RCC_GetHCLKFreq+0x5c>)
 810f21c:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 810f21e:	4b07      	ldr	r3, [pc, #28]	@ (810f23c <HAL_RCC_GetHCLKFreq+0x5c>)
 810f220:	681b      	ldr	r3, [r3, #0]
 810f222:	4a07      	ldr	r2, [pc, #28]	@ (810f240 <HAL_RCC_GetHCLKFreq+0x60>)
 810f224:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 810f226:	4b05      	ldr	r3, [pc, #20]	@ (810f23c <HAL_RCC_GetHCLKFreq+0x5c>)
 810f228:	681b      	ldr	r3, [r3, #0]
}
 810f22a:	4618      	mov	r0, r3
 810f22c:	3708      	adds	r7, #8
 810f22e:	46bd      	mov	sp, r7
 810f230:	bd80      	pop	{r7, pc}
 810f232:	bf00      	nop
 810f234:	58024400 	.word	0x58024400
 810f238:	081283ec 	.word	0x081283ec
 810f23c:	10000018 	.word	0x10000018
 810f240:	10000014 	.word	0x10000014

0810f244 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 810f244:	b580      	push	{r7, lr}
 810f246:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 810f248:	f7ff ffca 	bl	810f1e0 <HAL_RCC_GetHCLKFreq>
 810f24c:	4602      	mov	r2, r0
 810f24e:	4b06      	ldr	r3, [pc, #24]	@ (810f268 <HAL_RCC_GetPCLK1Freq+0x24>)
 810f250:	69db      	ldr	r3, [r3, #28]
 810f252:	091b      	lsrs	r3, r3, #4
 810f254:	f003 0307 	and.w	r3, r3, #7
 810f258:	4904      	ldr	r1, [pc, #16]	@ (810f26c <HAL_RCC_GetPCLK1Freq+0x28>)
 810f25a:	5ccb      	ldrb	r3, [r1, r3]
 810f25c:	f003 031f 	and.w	r3, r3, #31
 810f260:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 810f264:	4618      	mov	r0, r3
 810f266:	bd80      	pop	{r7, pc}
 810f268:	58024400 	.word	0x58024400
 810f26c:	081283ec 	.word	0x081283ec

0810f270 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 810f270:	b580      	push	{r7, lr}
 810f272:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 810f274:	f7ff ffb4 	bl	810f1e0 <HAL_RCC_GetHCLKFreq>
 810f278:	4602      	mov	r2, r0
 810f27a:	4b06      	ldr	r3, [pc, #24]	@ (810f294 <HAL_RCC_GetPCLK2Freq+0x24>)
 810f27c:	69db      	ldr	r3, [r3, #28]
 810f27e:	0a1b      	lsrs	r3, r3, #8
 810f280:	f003 0307 	and.w	r3, r3, #7
 810f284:	4904      	ldr	r1, [pc, #16]	@ (810f298 <HAL_RCC_GetPCLK2Freq+0x28>)
 810f286:	5ccb      	ldrb	r3, [r1, r3]
 810f288:	f003 031f 	and.w	r3, r3, #31
 810f28c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 810f290:	4618      	mov	r0, r3
 810f292:	bd80      	pop	{r7, pc}
 810f294:	58024400 	.word	0x58024400
 810f298:	081283ec 	.word	0x081283ec

0810f29c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 810f29c:	b480      	push	{r7}
 810f29e:	b083      	sub	sp, #12
 810f2a0:	af00      	add	r7, sp, #0
 810f2a2:	6078      	str	r0, [r7, #4]
 810f2a4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 810f2a6:	687b      	ldr	r3, [r7, #4]
 810f2a8:	223f      	movs	r2, #63	@ 0x3f
 810f2aa:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 810f2ac:	4b1a      	ldr	r3, [pc, #104]	@ (810f318 <HAL_RCC_GetClockConfig+0x7c>)
 810f2ae:	691b      	ldr	r3, [r3, #16]
 810f2b0:	f003 0207 	and.w	r2, r3, #7
 810f2b4:	687b      	ldr	r3, [r7, #4]
 810f2b6:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 810f2b8:	4b17      	ldr	r3, [pc, #92]	@ (810f318 <HAL_RCC_GetClockConfig+0x7c>)
 810f2ba:	699b      	ldr	r3, [r3, #24]
 810f2bc:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 810f2c0:	687b      	ldr	r3, [r7, #4]
 810f2c2:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 810f2c4:	4b14      	ldr	r3, [pc, #80]	@ (810f318 <HAL_RCC_GetClockConfig+0x7c>)
 810f2c6:	699b      	ldr	r3, [r3, #24]
 810f2c8:	f003 020f 	and.w	r2, r3, #15
 810f2cc:	687b      	ldr	r3, [r7, #4]
 810f2ce:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 810f2d0:	4b11      	ldr	r3, [pc, #68]	@ (810f318 <HAL_RCC_GetClockConfig+0x7c>)
 810f2d2:	699b      	ldr	r3, [r3, #24]
 810f2d4:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 810f2d8:	687b      	ldr	r3, [r7, #4]
 810f2da:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 810f2dc:	4b0e      	ldr	r3, [pc, #56]	@ (810f318 <HAL_RCC_GetClockConfig+0x7c>)
 810f2de:	69db      	ldr	r3, [r3, #28]
 810f2e0:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 810f2e4:	687b      	ldr	r3, [r7, #4]
 810f2e6:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 810f2e8:	4b0b      	ldr	r3, [pc, #44]	@ (810f318 <HAL_RCC_GetClockConfig+0x7c>)
 810f2ea:	69db      	ldr	r3, [r3, #28]
 810f2ec:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 810f2f0:	687b      	ldr	r3, [r7, #4]
 810f2f2:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 810f2f4:	4b08      	ldr	r3, [pc, #32]	@ (810f318 <HAL_RCC_GetClockConfig+0x7c>)
 810f2f6:	6a1b      	ldr	r3, [r3, #32]
 810f2f8:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 810f2fc:	687b      	ldr	r3, [r7, #4]
 810f2fe:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 810f300:	4b06      	ldr	r3, [pc, #24]	@ (810f31c <HAL_RCC_GetClockConfig+0x80>)
 810f302:	681b      	ldr	r3, [r3, #0]
 810f304:	f003 020f 	and.w	r2, r3, #15
 810f308:	683b      	ldr	r3, [r7, #0]
 810f30a:	601a      	str	r2, [r3, #0]
}
 810f30c:	bf00      	nop
 810f30e:	370c      	adds	r7, #12
 810f310:	46bd      	mov	sp, r7
 810f312:	f85d 7b04 	ldr.w	r7, [sp], #4
 810f316:	4770      	bx	lr
 810f318:	58024400 	.word	0x58024400
 810f31c:	52002000 	.word	0x52002000

0810f320 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 810f320:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 810f324:	b0cc      	sub	sp, #304	@ 0x130
 810f326:	af00      	add	r7, sp, #0
 810f328:	f8c7 011c 	str.w	r0, [r7, #284]	@ 0x11c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 810f32c:	2300      	movs	r3, #0
 810f32e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 810f332:	2300      	movs	r3, #0
 810f334:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 810f338:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810f33c:	e9d3 2300 	ldrd	r2, r3, [r3]
 810f340:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 810f344:	2500      	movs	r5, #0
 810f346:	ea54 0305 	orrs.w	r3, r4, r5
 810f34a:	d049      	beq.n	810f3e0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 810f34c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810f350:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 810f352:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 810f356:	d02f      	beq.n	810f3b8 <HAL_RCCEx_PeriphCLKConfig+0x98>
 810f358:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 810f35c:	d828      	bhi.n	810f3b0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 810f35e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 810f362:	d01a      	beq.n	810f39a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 810f364:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 810f368:	d822      	bhi.n	810f3b0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 810f36a:	2b00      	cmp	r3, #0
 810f36c:	d003      	beq.n	810f376 <HAL_RCCEx_PeriphCLKConfig+0x56>
 810f36e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 810f372:	d007      	beq.n	810f384 <HAL_RCCEx_PeriphCLKConfig+0x64>
 810f374:	e01c      	b.n	810f3b0 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810f376:	4bb8      	ldr	r3, [pc, #736]	@ (810f658 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810f378:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810f37a:	4ab7      	ldr	r2, [pc, #732]	@ (810f658 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810f37c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 810f380:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 810f382:	e01a      	b.n	810f3ba <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 810f384:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810f388:	3308      	adds	r3, #8
 810f38a:	2102      	movs	r1, #2
 810f38c:	4618      	mov	r0, r3
 810f38e:	f001 fccf 	bl	8110d30 <RCCEx_PLL2_Config>
 810f392:	4603      	mov	r3, r0
 810f394:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 810f398:	e00f      	b.n	810f3ba <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 810f39a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810f39e:	3328      	adds	r3, #40	@ 0x28
 810f3a0:	2102      	movs	r1, #2
 810f3a2:	4618      	mov	r0, r3
 810f3a4:	f001 fd76 	bl	8110e94 <RCCEx_PLL3_Config>
 810f3a8:	4603      	mov	r3, r0
 810f3aa:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 810f3ae:	e004      	b.n	810f3ba <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810f3b0:	2301      	movs	r3, #1
 810f3b2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 810f3b6:	e000      	b.n	810f3ba <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 810f3b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 810f3ba:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810f3be:	2b00      	cmp	r3, #0
 810f3c0:	d10a      	bne.n	810f3d8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 810f3c2:	4ba5      	ldr	r3, [pc, #660]	@ (810f658 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810f3c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810f3c6:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 810f3ca:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810f3ce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 810f3d0:	4aa1      	ldr	r2, [pc, #644]	@ (810f658 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810f3d2:	430b      	orrs	r3, r1
 810f3d4:	6513      	str	r3, [r2, #80]	@ 0x50
 810f3d6:	e003      	b.n	810f3e0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810f3d8:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810f3dc:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 810f3e0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810f3e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 810f3e8:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 810f3ec:	f04f 0900 	mov.w	r9, #0
 810f3f0:	ea58 0309 	orrs.w	r3, r8, r9
 810f3f4:	d047      	beq.n	810f486 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 810f3f6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810f3fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 810f3fc:	2b04      	cmp	r3, #4
 810f3fe:	d82a      	bhi.n	810f456 <HAL_RCCEx_PeriphCLKConfig+0x136>
 810f400:	a201      	add	r2, pc, #4	@ (adr r2, 810f408 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 810f402:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810f406:	bf00      	nop
 810f408:	0810f41d 	.word	0x0810f41d
 810f40c:	0810f42b 	.word	0x0810f42b
 810f410:	0810f441 	.word	0x0810f441
 810f414:	0810f45f 	.word	0x0810f45f
 810f418:	0810f45f 	.word	0x0810f45f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810f41c:	4b8e      	ldr	r3, [pc, #568]	@ (810f658 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810f41e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810f420:	4a8d      	ldr	r2, [pc, #564]	@ (810f658 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810f422:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 810f426:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 810f428:	e01a      	b.n	810f460 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 810f42a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810f42e:	3308      	adds	r3, #8
 810f430:	2100      	movs	r1, #0
 810f432:	4618      	mov	r0, r3
 810f434:	f001 fc7c 	bl	8110d30 <RCCEx_PLL2_Config>
 810f438:	4603      	mov	r3, r0
 810f43a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 810f43e:	e00f      	b.n	810f460 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 810f440:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810f444:	3328      	adds	r3, #40	@ 0x28
 810f446:	2100      	movs	r1, #0
 810f448:	4618      	mov	r0, r3
 810f44a:	f001 fd23 	bl	8110e94 <RCCEx_PLL3_Config>
 810f44e:	4603      	mov	r3, r0
 810f450:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 810f454:	e004      	b.n	810f460 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810f456:	2301      	movs	r3, #1
 810f458:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 810f45c:	e000      	b.n	810f460 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 810f45e:	bf00      	nop
    }

    if (ret == HAL_OK)
 810f460:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810f464:	2b00      	cmp	r3, #0
 810f466:	d10a      	bne.n	810f47e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 810f468:	4b7b      	ldr	r3, [pc, #492]	@ (810f658 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810f46a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810f46c:	f023 0107 	bic.w	r1, r3, #7
 810f470:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810f474:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 810f476:	4a78      	ldr	r2, [pc, #480]	@ (810f658 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810f478:	430b      	orrs	r3, r1
 810f47a:	6513      	str	r3, [r2, #80]	@ 0x50
 810f47c:	e003      	b.n	810f486 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810f47e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810f482:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 810f486:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810f48a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810f48e:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 810f492:	f04f 0b00 	mov.w	fp, #0
 810f496:	ea5a 030b 	orrs.w	r3, sl, fp
 810f49a:	d04c      	beq.n	810f536 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 810f49c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810f4a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 810f4a2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 810f4a6:	d030      	beq.n	810f50a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 810f4a8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 810f4ac:	d829      	bhi.n	810f502 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 810f4ae:	2bc0      	cmp	r3, #192	@ 0xc0
 810f4b0:	d02d      	beq.n	810f50e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 810f4b2:	2bc0      	cmp	r3, #192	@ 0xc0
 810f4b4:	d825      	bhi.n	810f502 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 810f4b6:	2b80      	cmp	r3, #128	@ 0x80
 810f4b8:	d018      	beq.n	810f4ec <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 810f4ba:	2b80      	cmp	r3, #128	@ 0x80
 810f4bc:	d821      	bhi.n	810f502 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 810f4be:	2b00      	cmp	r3, #0
 810f4c0:	d002      	beq.n	810f4c8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 810f4c2:	2b40      	cmp	r3, #64	@ 0x40
 810f4c4:	d007      	beq.n	810f4d6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 810f4c6:	e01c      	b.n	810f502 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810f4c8:	4b63      	ldr	r3, [pc, #396]	@ (810f658 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810f4ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810f4cc:	4a62      	ldr	r2, [pc, #392]	@ (810f658 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810f4ce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 810f4d2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 810f4d4:	e01c      	b.n	810f510 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 810f4d6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810f4da:	3308      	adds	r3, #8
 810f4dc:	2100      	movs	r1, #0
 810f4de:	4618      	mov	r0, r3
 810f4e0:	f001 fc26 	bl	8110d30 <RCCEx_PLL2_Config>
 810f4e4:	4603      	mov	r3, r0
 810f4e6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 810f4ea:	e011      	b.n	810f510 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 810f4ec:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810f4f0:	3328      	adds	r3, #40	@ 0x28
 810f4f2:	2100      	movs	r1, #0
 810f4f4:	4618      	mov	r0, r3
 810f4f6:	f001 fccd 	bl	8110e94 <RCCEx_PLL3_Config>
 810f4fa:	4603      	mov	r3, r0
 810f4fc:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 810f500:	e006      	b.n	810f510 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810f502:	2301      	movs	r3, #1
 810f504:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 810f508:	e002      	b.n	810f510 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 810f50a:	bf00      	nop
 810f50c:	e000      	b.n	810f510 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 810f50e:	bf00      	nop
    }

    if (ret == HAL_OK)
 810f510:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810f514:	2b00      	cmp	r3, #0
 810f516:	d10a      	bne.n	810f52e <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 810f518:	4b4f      	ldr	r3, [pc, #316]	@ (810f658 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810f51a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810f51c:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 810f520:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810f524:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 810f526:	4a4c      	ldr	r2, [pc, #304]	@ (810f658 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810f528:	430b      	orrs	r3, r1
 810f52a:	6513      	str	r3, [r2, #80]	@ 0x50
 810f52c:	e003      	b.n	810f536 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810f52e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810f532:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 810f536:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810f53a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810f53e:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 810f542:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 810f546:	2300      	movs	r3, #0
 810f548:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 810f54c:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	@ 0x110
 810f550:	460b      	mov	r3, r1
 810f552:	4313      	orrs	r3, r2
 810f554:	d053      	beq.n	810f5fe <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 810f556:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810f55a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 810f55e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 810f562:	d035      	beq.n	810f5d0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 810f564:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 810f568:	d82e      	bhi.n	810f5c8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 810f56a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 810f56e:	d031      	beq.n	810f5d4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 810f570:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 810f574:	d828      	bhi.n	810f5c8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 810f576:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 810f57a:	d01a      	beq.n	810f5b2 <HAL_RCCEx_PeriphCLKConfig+0x292>
 810f57c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 810f580:	d822      	bhi.n	810f5c8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 810f582:	2b00      	cmp	r3, #0
 810f584:	d003      	beq.n	810f58e <HAL_RCCEx_PeriphCLKConfig+0x26e>
 810f586:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 810f58a:	d007      	beq.n	810f59c <HAL_RCCEx_PeriphCLKConfig+0x27c>
 810f58c:	e01c      	b.n	810f5c8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810f58e:	4b32      	ldr	r3, [pc, #200]	@ (810f658 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810f590:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810f592:	4a31      	ldr	r2, [pc, #196]	@ (810f658 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810f594:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 810f598:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 810f59a:	e01c      	b.n	810f5d6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 810f59c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810f5a0:	3308      	adds	r3, #8
 810f5a2:	2100      	movs	r1, #0
 810f5a4:	4618      	mov	r0, r3
 810f5a6:	f001 fbc3 	bl	8110d30 <RCCEx_PLL2_Config>
 810f5aa:	4603      	mov	r3, r0
 810f5ac:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 810f5b0:	e011      	b.n	810f5d6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 810f5b2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810f5b6:	3328      	adds	r3, #40	@ 0x28
 810f5b8:	2100      	movs	r1, #0
 810f5ba:	4618      	mov	r0, r3
 810f5bc:	f001 fc6a 	bl	8110e94 <RCCEx_PLL3_Config>
 810f5c0:	4603      	mov	r3, r0
 810f5c2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 810f5c6:	e006      	b.n	810f5d6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 810f5c8:	2301      	movs	r3, #1
 810f5ca:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 810f5ce:	e002      	b.n	810f5d6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 810f5d0:	bf00      	nop
 810f5d2:	e000      	b.n	810f5d6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 810f5d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 810f5d6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810f5da:	2b00      	cmp	r3, #0
 810f5dc:	d10b      	bne.n	810f5f6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 810f5de:	4b1e      	ldr	r3, [pc, #120]	@ (810f658 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810f5e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810f5e2:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 810f5e6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810f5ea:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 810f5ee:	4a1a      	ldr	r2, [pc, #104]	@ (810f658 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810f5f0:	430b      	orrs	r3, r1
 810f5f2:	6593      	str	r3, [r2, #88]	@ 0x58
 810f5f4:	e003      	b.n	810f5fe <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810f5f6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810f5fa:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 810f5fe:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810f602:	e9d3 2300 	ldrd	r2, r3, [r3]
 810f606:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 810f60a:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 810f60e:	2300      	movs	r3, #0
 810f610:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 810f614:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 810f618:	460b      	mov	r3, r1
 810f61a:	4313      	orrs	r3, r2
 810f61c:	d056      	beq.n	810f6cc <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 810f61e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810f622:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 810f626:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 810f62a:	d038      	beq.n	810f69e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 810f62c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 810f630:	d831      	bhi.n	810f696 <HAL_RCCEx_PeriphCLKConfig+0x376>
 810f632:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 810f636:	d034      	beq.n	810f6a2 <HAL_RCCEx_PeriphCLKConfig+0x382>
 810f638:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 810f63c:	d82b      	bhi.n	810f696 <HAL_RCCEx_PeriphCLKConfig+0x376>
 810f63e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 810f642:	d01d      	beq.n	810f680 <HAL_RCCEx_PeriphCLKConfig+0x360>
 810f644:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 810f648:	d825      	bhi.n	810f696 <HAL_RCCEx_PeriphCLKConfig+0x376>
 810f64a:	2b00      	cmp	r3, #0
 810f64c:	d006      	beq.n	810f65c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 810f64e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 810f652:	d00a      	beq.n	810f66a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 810f654:	e01f      	b.n	810f696 <HAL_RCCEx_PeriphCLKConfig+0x376>
 810f656:	bf00      	nop
 810f658:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810f65c:	4ba2      	ldr	r3, [pc, #648]	@ (810f8e8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810f65e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810f660:	4aa1      	ldr	r2, [pc, #644]	@ (810f8e8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810f662:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 810f666:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 810f668:	e01c      	b.n	810f6a4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 810f66a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810f66e:	3308      	adds	r3, #8
 810f670:	2100      	movs	r1, #0
 810f672:	4618      	mov	r0, r3
 810f674:	f001 fb5c 	bl	8110d30 <RCCEx_PLL2_Config>
 810f678:	4603      	mov	r3, r0
 810f67a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 810f67e:	e011      	b.n	810f6a4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 810f680:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810f684:	3328      	adds	r3, #40	@ 0x28
 810f686:	2100      	movs	r1, #0
 810f688:	4618      	mov	r0, r3
 810f68a:	f001 fc03 	bl	8110e94 <RCCEx_PLL3_Config>
 810f68e:	4603      	mov	r3, r0
 810f690:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 810f694:	e006      	b.n	810f6a4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 810f696:	2301      	movs	r3, #1
 810f698:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 810f69c:	e002      	b.n	810f6a4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 810f69e:	bf00      	nop
 810f6a0:	e000      	b.n	810f6a4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 810f6a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 810f6a4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810f6a8:	2b00      	cmp	r3, #0
 810f6aa:	d10b      	bne.n	810f6c4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 810f6ac:	4b8e      	ldr	r3, [pc, #568]	@ (810f8e8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810f6ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810f6b0:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 810f6b4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810f6b8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 810f6bc:	4a8a      	ldr	r2, [pc, #552]	@ (810f8e8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810f6be:	430b      	orrs	r3, r1
 810f6c0:	6593      	str	r3, [r2, #88]	@ 0x58
 810f6c2:	e003      	b.n	810f6cc <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810f6c4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810f6c8:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 810f6cc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810f6d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 810f6d4:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 810f6d8:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 810f6dc:	2300      	movs	r3, #0
 810f6de:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 810f6e2:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 810f6e6:	460b      	mov	r3, r1
 810f6e8:	4313      	orrs	r3, r2
 810f6ea:	d03a      	beq.n	810f762 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 810f6ec:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810f6f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 810f6f2:	2b30      	cmp	r3, #48	@ 0x30
 810f6f4:	d01f      	beq.n	810f736 <HAL_RCCEx_PeriphCLKConfig+0x416>
 810f6f6:	2b30      	cmp	r3, #48	@ 0x30
 810f6f8:	d819      	bhi.n	810f72e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 810f6fa:	2b20      	cmp	r3, #32
 810f6fc:	d00c      	beq.n	810f718 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 810f6fe:	2b20      	cmp	r3, #32
 810f700:	d815      	bhi.n	810f72e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 810f702:	2b00      	cmp	r3, #0
 810f704:	d019      	beq.n	810f73a <HAL_RCCEx_PeriphCLKConfig+0x41a>
 810f706:	2b10      	cmp	r3, #16
 810f708:	d111      	bne.n	810f72e <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810f70a:	4b77      	ldr	r3, [pc, #476]	@ (810f8e8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810f70c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810f70e:	4a76      	ldr	r2, [pc, #472]	@ (810f8e8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810f710:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 810f714:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 810f716:	e011      	b.n	810f73c <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 810f718:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810f71c:	3308      	adds	r3, #8
 810f71e:	2102      	movs	r1, #2
 810f720:	4618      	mov	r0, r3
 810f722:	f001 fb05 	bl	8110d30 <RCCEx_PLL2_Config>
 810f726:	4603      	mov	r3, r0
 810f728:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* QSPI clock source configuration done later after clock selection check */
        break;
 810f72c:	e006      	b.n	810f73c <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 810f72e:	2301      	movs	r3, #1
 810f730:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 810f734:	e002      	b.n	810f73c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 810f736:	bf00      	nop
 810f738:	e000      	b.n	810f73c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 810f73a:	bf00      	nop
    }

    if (ret == HAL_OK)
 810f73c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810f740:	2b00      	cmp	r3, #0
 810f742:	d10a      	bne.n	810f75a <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 810f744:	4b68      	ldr	r3, [pc, #416]	@ (810f8e8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810f746:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 810f748:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 810f74c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810f750:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 810f752:	4a65      	ldr	r2, [pc, #404]	@ (810f8e8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810f754:	430b      	orrs	r3, r1
 810f756:	64d3      	str	r3, [r2, #76]	@ 0x4c
 810f758:	e003      	b.n	810f762 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810f75a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810f75e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 810f762:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810f766:	e9d3 2300 	ldrd	r2, r3, [r3]
 810f76a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 810f76e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 810f772:	2300      	movs	r3, #0
 810f774:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 810f778:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 810f77c:	460b      	mov	r3, r1
 810f77e:	4313      	orrs	r3, r2
 810f780:	d051      	beq.n	810f826 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 810f782:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810f786:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 810f788:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 810f78c:	d035      	beq.n	810f7fa <HAL_RCCEx_PeriphCLKConfig+0x4da>
 810f78e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 810f792:	d82e      	bhi.n	810f7f2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 810f794:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 810f798:	d031      	beq.n	810f7fe <HAL_RCCEx_PeriphCLKConfig+0x4de>
 810f79a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 810f79e:	d828      	bhi.n	810f7f2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 810f7a0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 810f7a4:	d01a      	beq.n	810f7dc <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 810f7a6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 810f7aa:	d822      	bhi.n	810f7f2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 810f7ac:	2b00      	cmp	r3, #0
 810f7ae:	d003      	beq.n	810f7b8 <HAL_RCCEx_PeriphCLKConfig+0x498>
 810f7b0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 810f7b4:	d007      	beq.n	810f7c6 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 810f7b6:	e01c      	b.n	810f7f2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810f7b8:	4b4b      	ldr	r3, [pc, #300]	@ (810f8e8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810f7ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810f7bc:	4a4a      	ldr	r2, [pc, #296]	@ (810f8e8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810f7be:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 810f7c2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 810f7c4:	e01c      	b.n	810f800 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 810f7c6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810f7ca:	3308      	adds	r3, #8
 810f7cc:	2100      	movs	r1, #0
 810f7ce:	4618      	mov	r0, r3
 810f7d0:	f001 faae 	bl	8110d30 <RCCEx_PLL2_Config>
 810f7d4:	4603      	mov	r3, r0
 810f7d6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 810f7da:	e011      	b.n	810f800 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 810f7dc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810f7e0:	3328      	adds	r3, #40	@ 0x28
 810f7e2:	2100      	movs	r1, #0
 810f7e4:	4618      	mov	r0, r3
 810f7e6:	f001 fb55 	bl	8110e94 <RCCEx_PLL3_Config>
 810f7ea:	4603      	mov	r3, r0
 810f7ec:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 810f7f0:	e006      	b.n	810f800 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810f7f2:	2301      	movs	r3, #1
 810f7f4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 810f7f8:	e002      	b.n	810f800 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 810f7fa:	bf00      	nop
 810f7fc:	e000      	b.n	810f800 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 810f7fe:	bf00      	nop
    }

    if (ret == HAL_OK)
 810f800:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810f804:	2b00      	cmp	r3, #0
 810f806:	d10a      	bne.n	810f81e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 810f808:	4b37      	ldr	r3, [pc, #220]	@ (810f8e8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810f80a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810f80c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 810f810:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810f814:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 810f816:	4a34      	ldr	r2, [pc, #208]	@ (810f8e8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810f818:	430b      	orrs	r3, r1
 810f81a:	6513      	str	r3, [r2, #80]	@ 0x50
 810f81c:	e003      	b.n	810f826 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810f81e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810f822:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 810f826:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810f82a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810f82e:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 810f832:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 810f836:	2300      	movs	r3, #0
 810f838:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 810f83c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 810f840:	460b      	mov	r3, r1
 810f842:	4313      	orrs	r3, r2
 810f844:	d056      	beq.n	810f8f4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 810f846:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810f84a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 810f84c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 810f850:	d033      	beq.n	810f8ba <HAL_RCCEx_PeriphCLKConfig+0x59a>
 810f852:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 810f856:	d82c      	bhi.n	810f8b2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 810f858:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 810f85c:	d02f      	beq.n	810f8be <HAL_RCCEx_PeriphCLKConfig+0x59e>
 810f85e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 810f862:	d826      	bhi.n	810f8b2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 810f864:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 810f868:	d02b      	beq.n	810f8c2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 810f86a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 810f86e:	d820      	bhi.n	810f8b2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 810f870:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 810f874:	d012      	beq.n	810f89c <HAL_RCCEx_PeriphCLKConfig+0x57c>
 810f876:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 810f87a:	d81a      	bhi.n	810f8b2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 810f87c:	2b00      	cmp	r3, #0
 810f87e:	d022      	beq.n	810f8c6 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 810f880:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 810f884:	d115      	bne.n	810f8b2 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 810f886:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810f88a:	3308      	adds	r3, #8
 810f88c:	2101      	movs	r1, #1
 810f88e:	4618      	mov	r0, r3
 810f890:	f001 fa4e 	bl	8110d30 <RCCEx_PLL2_Config>
 810f894:	4603      	mov	r3, r0
 810f896:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 810f89a:	e015      	b.n	810f8c8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 810f89c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810f8a0:	3328      	adds	r3, #40	@ 0x28
 810f8a2:	2101      	movs	r1, #1
 810f8a4:	4618      	mov	r0, r3
 810f8a6:	f001 faf5 	bl	8110e94 <RCCEx_PLL3_Config>
 810f8aa:	4603      	mov	r3, r0
 810f8ac:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 810f8b0:	e00a      	b.n	810f8c8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810f8b2:	2301      	movs	r3, #1
 810f8b4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 810f8b8:	e006      	b.n	810f8c8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 810f8ba:	bf00      	nop
 810f8bc:	e004      	b.n	810f8c8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 810f8be:	bf00      	nop
 810f8c0:	e002      	b.n	810f8c8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 810f8c2:	bf00      	nop
 810f8c4:	e000      	b.n	810f8c8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 810f8c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 810f8c8:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810f8cc:	2b00      	cmp	r3, #0
 810f8ce:	d10d      	bne.n	810f8ec <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 810f8d0:	4b05      	ldr	r3, [pc, #20]	@ (810f8e8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810f8d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810f8d4:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 810f8d8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810f8dc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 810f8de:	4a02      	ldr	r2, [pc, #8]	@ (810f8e8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810f8e0:	430b      	orrs	r3, r1
 810f8e2:	6513      	str	r3, [r2, #80]	@ 0x50
 810f8e4:	e006      	b.n	810f8f4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 810f8e6:	bf00      	nop
 810f8e8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 810f8ec:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810f8f0:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 810f8f4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810f8f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 810f8fc:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 810f900:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 810f904:	2300      	movs	r3, #0
 810f906:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 810f90a:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 810f90e:	460b      	mov	r3, r1
 810f910:	4313      	orrs	r3, r2
 810f912:	d055      	beq.n	810f9c0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 810f914:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810f918:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 810f91c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 810f920:	d033      	beq.n	810f98a <HAL_RCCEx_PeriphCLKConfig+0x66a>
 810f922:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 810f926:	d82c      	bhi.n	810f982 <HAL_RCCEx_PeriphCLKConfig+0x662>
 810f928:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 810f92c:	d02f      	beq.n	810f98e <HAL_RCCEx_PeriphCLKConfig+0x66e>
 810f92e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 810f932:	d826      	bhi.n	810f982 <HAL_RCCEx_PeriphCLKConfig+0x662>
 810f934:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 810f938:	d02b      	beq.n	810f992 <HAL_RCCEx_PeriphCLKConfig+0x672>
 810f93a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 810f93e:	d820      	bhi.n	810f982 <HAL_RCCEx_PeriphCLKConfig+0x662>
 810f940:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810f944:	d012      	beq.n	810f96c <HAL_RCCEx_PeriphCLKConfig+0x64c>
 810f946:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810f94a:	d81a      	bhi.n	810f982 <HAL_RCCEx_PeriphCLKConfig+0x662>
 810f94c:	2b00      	cmp	r3, #0
 810f94e:	d022      	beq.n	810f996 <HAL_RCCEx_PeriphCLKConfig+0x676>
 810f950:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 810f954:	d115      	bne.n	810f982 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 810f956:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810f95a:	3308      	adds	r3, #8
 810f95c:	2101      	movs	r1, #1
 810f95e:	4618      	mov	r0, r3
 810f960:	f001 f9e6 	bl	8110d30 <RCCEx_PLL2_Config>
 810f964:	4603      	mov	r3, r0
 810f966:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 810f96a:	e015      	b.n	810f998 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 810f96c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810f970:	3328      	adds	r3, #40	@ 0x28
 810f972:	2101      	movs	r1, #1
 810f974:	4618      	mov	r0, r3
 810f976:	f001 fa8d 	bl	8110e94 <RCCEx_PLL3_Config>
 810f97a:	4603      	mov	r3, r0
 810f97c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 810f980:	e00a      	b.n	810f998 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 810f982:	2301      	movs	r3, #1
 810f984:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 810f988:	e006      	b.n	810f998 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 810f98a:	bf00      	nop
 810f98c:	e004      	b.n	810f998 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 810f98e:	bf00      	nop
 810f990:	e002      	b.n	810f998 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 810f992:	bf00      	nop
 810f994:	e000      	b.n	810f998 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 810f996:	bf00      	nop
    }

    if (ret == HAL_OK)
 810f998:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810f99c:	2b00      	cmp	r3, #0
 810f99e:	d10b      	bne.n	810f9b8 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 810f9a0:	4bb7      	ldr	r3, [pc, #732]	@ (810fc80 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 810f9a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810f9a4:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 810f9a8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810f9ac:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 810f9b0:	4ab3      	ldr	r2, [pc, #716]	@ (810fc80 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 810f9b2:	430b      	orrs	r3, r1
 810f9b4:	6593      	str	r3, [r2, #88]	@ 0x58
 810f9b6:	e003      	b.n	810f9c0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810f9b8:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810f9bc:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(DSI)
  /*---------------------------- DSI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 810f9c0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810f9c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 810f9c8:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 810f9cc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 810f9d0:	2300      	movs	r3, #0
 810f9d2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 810f9d6:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 810f9da:	460b      	mov	r3, r1
 810f9dc:	4313      	orrs	r3, r2
 810f9de:	d02a      	beq.n	810fa36 <HAL_RCCEx_PeriphCLKConfig+0x716>
  {
    switch (PeriphClkInit->DsiClockSelection)
 810f9e0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810f9e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810f9e6:	2b00      	cmp	r3, #0
 810f9e8:	d011      	beq.n	810fa0e <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 810f9ea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 810f9ee:	d10a      	bne.n	810fa06 <HAL_RCCEx_PeriphCLKConfig+0x6e6>
    {

      case RCC_DSICLKSOURCE_PLL2: /* PLL2 is used as clock source for DSI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 810f9f0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810f9f4:	3308      	adds	r3, #8
 810f9f6:	2101      	movs	r1, #1
 810f9f8:	4618      	mov	r0, r3
 810f9fa:	f001 f999 	bl	8110d30 <RCCEx_PLL2_Config>
 810f9fe:	4603      	mov	r3, r0
 810fa00:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* DSI clock source configuration done later after clock selection check */
        break;
 810fa04:	e004      	b.n	810fa10 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        /* PHY is used as clock source for DSI*/
        /* DSI clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810fa06:	2301      	movs	r3, #1
 810fa08:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 810fa0c:	e000      	b.n	810fa10 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        break;
 810fa0e:	bf00      	nop
    }

    if (ret == HAL_OK)
 810fa10:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810fa14:	2b00      	cmp	r3, #0
 810fa16:	d10a      	bne.n	810fa2e <HAL_RCCEx_PeriphCLKConfig+0x70e>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 810fa18:	4b99      	ldr	r3, [pc, #612]	@ (810fc80 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 810fa1a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 810fa1c:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 810fa20:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810fa24:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810fa26:	4a96      	ldr	r2, [pc, #600]	@ (810fc80 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 810fa28:	430b      	orrs	r3, r1
 810fa2a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 810fa2c:	e003      	b.n	810fa36 <HAL_RCCEx_PeriphCLKConfig+0x716>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810fa2e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810fa32:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 810fa36:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810fa3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810fa3e:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 810fa42:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 810fa46:	2300      	movs	r3, #0
 810fa48:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 810fa4c:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 810fa50:	460b      	mov	r3, r1
 810fa52:	4313      	orrs	r3, r2
 810fa54:	d037      	beq.n	810fac6 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 810fa56:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810fa5a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 810fa5c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810fa60:	d00e      	beq.n	810fa80 <HAL_RCCEx_PeriphCLKConfig+0x760>
 810fa62:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810fa66:	d816      	bhi.n	810fa96 <HAL_RCCEx_PeriphCLKConfig+0x776>
 810fa68:	2b00      	cmp	r3, #0
 810fa6a:	d018      	beq.n	810fa9e <HAL_RCCEx_PeriphCLKConfig+0x77e>
 810fa6c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 810fa70:	d111      	bne.n	810fa96 <HAL_RCCEx_PeriphCLKConfig+0x776>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810fa72:	4b83      	ldr	r3, [pc, #524]	@ (810fc80 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 810fa74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810fa76:	4a82      	ldr	r2, [pc, #520]	@ (810fc80 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 810fa78:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 810fa7c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 810fa7e:	e00f      	b.n	810faa0 <HAL_RCCEx_PeriphCLKConfig+0x780>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 810fa80:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810fa84:	3308      	adds	r3, #8
 810fa86:	2101      	movs	r1, #1
 810fa88:	4618      	mov	r0, r3
 810fa8a:	f001 f951 	bl	8110d30 <RCCEx_PLL2_Config>
 810fa8e:	4603      	mov	r3, r0
 810fa90:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 810fa94:	e004      	b.n	810faa0 <HAL_RCCEx_PeriphCLKConfig+0x780>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810fa96:	2301      	movs	r3, #1
 810fa98:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 810fa9c:	e000      	b.n	810faa0 <HAL_RCCEx_PeriphCLKConfig+0x780>
        break;
 810fa9e:	bf00      	nop
    }

    if (ret == HAL_OK)
 810faa0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810faa4:	2b00      	cmp	r3, #0
 810faa6:	d10a      	bne.n	810fabe <HAL_RCCEx_PeriphCLKConfig+0x79e>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 810faa8:	4b75      	ldr	r3, [pc, #468]	@ (810fc80 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 810faaa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810faac:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 810fab0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810fab4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 810fab6:	4a72      	ldr	r2, [pc, #456]	@ (810fc80 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 810fab8:	430b      	orrs	r3, r1
 810faba:	6513      	str	r3, [r2, #80]	@ 0x50
 810fabc:	e003      	b.n	810fac6 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810fabe:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810fac2:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 810fac6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810faca:	e9d3 2300 	ldrd	r2, r3, [r3]
 810face:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 810fad2:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 810fad6:	2300      	movs	r3, #0
 810fad8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 810fadc:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 810fae0:	460b      	mov	r3, r1
 810fae2:	4313      	orrs	r3, r2
 810fae4:	d03a      	beq.n	810fb5c <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    switch (PeriphClkInit->FmcClockSelection)
 810fae6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810faea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 810faec:	2b03      	cmp	r3, #3
 810faee:	d81d      	bhi.n	810fb2c <HAL_RCCEx_PeriphCLKConfig+0x80c>
 810faf0:	a201      	add	r2, pc, #4	@ (adr r2, 810faf8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 810faf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810faf6:	bf00      	nop
 810faf8:	0810fb35 	.word	0x0810fb35
 810fafc:	0810fb09 	.word	0x0810fb09
 810fb00:	0810fb17 	.word	0x0810fb17
 810fb04:	0810fb35 	.word	0x0810fb35
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810fb08:	4b5d      	ldr	r3, [pc, #372]	@ (810fc80 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 810fb0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810fb0c:	4a5c      	ldr	r2, [pc, #368]	@ (810fc80 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 810fb0e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 810fb12:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 810fb14:	e00f      	b.n	810fb36 <HAL_RCCEx_PeriphCLKConfig+0x816>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 810fb16:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810fb1a:	3308      	adds	r3, #8
 810fb1c:	2102      	movs	r1, #2
 810fb1e:	4618      	mov	r0, r3
 810fb20:	f001 f906 	bl	8110d30 <RCCEx_PLL2_Config>
 810fb24:	4603      	mov	r3, r0
 810fb26:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* FMC clock source configuration done later after clock selection check */
        break;
 810fb2a:	e004      	b.n	810fb36 <HAL_RCCEx_PeriphCLKConfig+0x816>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 810fb2c:	2301      	movs	r3, #1
 810fb2e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 810fb32:	e000      	b.n	810fb36 <HAL_RCCEx_PeriphCLKConfig+0x816>
        break;
 810fb34:	bf00      	nop
    }

    if (ret == HAL_OK)
 810fb36:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810fb3a:	2b00      	cmp	r3, #0
 810fb3c:	d10a      	bne.n	810fb54 <HAL_RCCEx_PeriphCLKConfig+0x834>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 810fb3e:	4b50      	ldr	r3, [pc, #320]	@ (810fc80 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 810fb40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 810fb42:	f023 0103 	bic.w	r1, r3, #3
 810fb46:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810fb4a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 810fb4c:	4a4c      	ldr	r2, [pc, #304]	@ (810fc80 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 810fb4e:	430b      	orrs	r3, r1
 810fb50:	64d3      	str	r3, [r2, #76]	@ 0x4c
 810fb52:	e003      	b.n	810fb5c <HAL_RCCEx_PeriphCLKConfig+0x83c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810fb54:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810fb58:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 810fb5c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810fb60:	e9d3 2300 	ldrd	r2, r3, [r3]
 810fb64:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 810fb68:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 810fb6c:	2300      	movs	r3, #0
 810fb6e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 810fb72:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 810fb76:	460b      	mov	r3, r1
 810fb78:	4313      	orrs	r3, r2
 810fb7a:	f000 80a0 	beq.w	810fcbe <HAL_RCCEx_PeriphCLKConfig+0x99e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 810fb7e:	4b41      	ldr	r3, [pc, #260]	@ (810fc84 <HAL_RCCEx_PeriphCLKConfig+0x964>)
 810fb80:	681b      	ldr	r3, [r3, #0]
 810fb82:	4a40      	ldr	r2, [pc, #256]	@ (810fc84 <HAL_RCCEx_PeriphCLKConfig+0x964>)
 810fb84:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 810fb88:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 810fb8a:	f7fc fa81 	bl	810c090 <HAL_GetTick>
 810fb8e:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 810fb92:	e00b      	b.n	810fbac <HAL_RCCEx_PeriphCLKConfig+0x88c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 810fb94:	f7fc fa7c 	bl	810c090 <HAL_GetTick>
 810fb98:	4602      	mov	r2, r0
 810fb9a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 810fb9e:	1ad3      	subs	r3, r2, r3
 810fba0:	2b64      	cmp	r3, #100	@ 0x64
 810fba2:	d903      	bls.n	810fbac <HAL_RCCEx_PeriphCLKConfig+0x88c>
      {
        ret = HAL_TIMEOUT;
 810fba4:	2303      	movs	r3, #3
 810fba6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 810fbaa:	e005      	b.n	810fbb8 <HAL_RCCEx_PeriphCLKConfig+0x898>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 810fbac:	4b35      	ldr	r3, [pc, #212]	@ (810fc84 <HAL_RCCEx_PeriphCLKConfig+0x964>)
 810fbae:	681b      	ldr	r3, [r3, #0]
 810fbb0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 810fbb4:	2b00      	cmp	r3, #0
 810fbb6:	d0ed      	beq.n	810fb94 <HAL_RCCEx_PeriphCLKConfig+0x874>
      }
    }

    if (ret == HAL_OK)
 810fbb8:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810fbbc:	2b00      	cmp	r3, #0
 810fbbe:	d17a      	bne.n	810fcb6 <HAL_RCCEx_PeriphCLKConfig+0x996>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 810fbc0:	4b2f      	ldr	r3, [pc, #188]	@ (810fc80 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 810fbc2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 810fbc4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810fbc8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 810fbcc:	4053      	eors	r3, r2
 810fbce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 810fbd2:	2b00      	cmp	r3, #0
 810fbd4:	d015      	beq.n	810fc02 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 810fbd6:	4b2a      	ldr	r3, [pc, #168]	@ (810fc80 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 810fbd8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 810fbda:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 810fbde:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 810fbe2:	4b27      	ldr	r3, [pc, #156]	@ (810fc80 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 810fbe4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 810fbe6:	4a26      	ldr	r2, [pc, #152]	@ (810fc80 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 810fbe8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 810fbec:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 810fbee:	4b24      	ldr	r3, [pc, #144]	@ (810fc80 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 810fbf0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 810fbf2:	4a23      	ldr	r2, [pc, #140]	@ (810fc80 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 810fbf4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 810fbf8:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 810fbfa:	4a21      	ldr	r2, [pc, #132]	@ (810fc80 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 810fbfc:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 810fc00:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 810fc02:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810fc06:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 810fc0a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 810fc0e:	d118      	bne.n	810fc42 <HAL_RCCEx_PeriphCLKConfig+0x922>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 810fc10:	f7fc fa3e 	bl	810c090 <HAL_GetTick>
 810fc14:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 810fc18:	e00d      	b.n	810fc36 <HAL_RCCEx_PeriphCLKConfig+0x916>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 810fc1a:	f7fc fa39 	bl	810c090 <HAL_GetTick>
 810fc1e:	4602      	mov	r2, r0
 810fc20:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 810fc24:	1ad2      	subs	r2, r2, r3
 810fc26:	f241 3388 	movw	r3, #5000	@ 0x1388
 810fc2a:	429a      	cmp	r2, r3
 810fc2c:	d903      	bls.n	810fc36 <HAL_RCCEx_PeriphCLKConfig+0x916>
          {
            ret = HAL_TIMEOUT;
 810fc2e:	2303      	movs	r3, #3
 810fc30:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
            break;
 810fc34:	e005      	b.n	810fc42 <HAL_RCCEx_PeriphCLKConfig+0x922>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 810fc36:	4b12      	ldr	r3, [pc, #72]	@ (810fc80 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 810fc38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 810fc3a:	f003 0302 	and.w	r3, r3, #2
 810fc3e:	2b00      	cmp	r3, #0
 810fc40:	d0eb      	beq.n	810fc1a <HAL_RCCEx_PeriphCLKConfig+0x8fa>
          }
        }
      }

      if (ret == HAL_OK)
 810fc42:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810fc46:	2b00      	cmp	r3, #0
 810fc48:	d130      	bne.n	810fcac <HAL_RCCEx_PeriphCLKConfig+0x98c>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 810fc4a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810fc4e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 810fc52:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 810fc56:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 810fc5a:	d115      	bne.n	810fc88 <HAL_RCCEx_PeriphCLKConfig+0x968>
 810fc5c:	4b08      	ldr	r3, [pc, #32]	@ (810fc80 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 810fc5e:	691b      	ldr	r3, [r3, #16]
 810fc60:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 810fc64:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810fc68:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 810fc6c:	091b      	lsrs	r3, r3, #4
 810fc6e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 810fc72:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 810fc76:	4a02      	ldr	r2, [pc, #8]	@ (810fc80 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 810fc78:	430b      	orrs	r3, r1
 810fc7a:	6113      	str	r3, [r2, #16]
 810fc7c:	e00a      	b.n	810fc94 <HAL_RCCEx_PeriphCLKConfig+0x974>
 810fc7e:	bf00      	nop
 810fc80:	58024400 	.word	0x58024400
 810fc84:	58024800 	.word	0x58024800
 810fc88:	4bd4      	ldr	r3, [pc, #848]	@ (810ffdc <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 810fc8a:	691b      	ldr	r3, [r3, #16]
 810fc8c:	4ad3      	ldr	r2, [pc, #844]	@ (810ffdc <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 810fc8e:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 810fc92:	6113      	str	r3, [r2, #16]
 810fc94:	4bd1      	ldr	r3, [pc, #836]	@ (810ffdc <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 810fc96:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 810fc98:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810fc9c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 810fca0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 810fca4:	4acd      	ldr	r2, [pc, #820]	@ (810ffdc <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 810fca6:	430b      	orrs	r3, r1
 810fca8:	6713      	str	r3, [r2, #112]	@ 0x70
 810fcaa:	e008      	b.n	810fcbe <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
      else
      {
        /* set overall return value */
        status = ret;
 810fcac:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810fcb0:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
 810fcb4:	e003      	b.n	810fcbe <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 810fcb6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810fcba:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 810fcbe:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810fcc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 810fcc6:	f002 0301 	and.w	r3, r2, #1
 810fcca:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 810fcce:	2300      	movs	r3, #0
 810fcd0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 810fcd4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 810fcd8:	460b      	mov	r3, r1
 810fcda:	4313      	orrs	r3, r2
 810fcdc:	f000 808b 	beq.w	810fdf6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 810fce0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810fce4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 810fce8:	2b28      	cmp	r3, #40	@ 0x28
 810fcea:	d86b      	bhi.n	810fdc4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 810fcec:	a201      	add	r2, pc, #4	@ (adr r2, 810fcf4 <HAL_RCCEx_PeriphCLKConfig+0x9d4>)
 810fcee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810fcf2:	bf00      	nop
 810fcf4:	0810fdcd 	.word	0x0810fdcd
 810fcf8:	0810fdc5 	.word	0x0810fdc5
 810fcfc:	0810fdc5 	.word	0x0810fdc5
 810fd00:	0810fdc5 	.word	0x0810fdc5
 810fd04:	0810fdc5 	.word	0x0810fdc5
 810fd08:	0810fdc5 	.word	0x0810fdc5
 810fd0c:	0810fdc5 	.word	0x0810fdc5
 810fd10:	0810fdc5 	.word	0x0810fdc5
 810fd14:	0810fd99 	.word	0x0810fd99
 810fd18:	0810fdc5 	.word	0x0810fdc5
 810fd1c:	0810fdc5 	.word	0x0810fdc5
 810fd20:	0810fdc5 	.word	0x0810fdc5
 810fd24:	0810fdc5 	.word	0x0810fdc5
 810fd28:	0810fdc5 	.word	0x0810fdc5
 810fd2c:	0810fdc5 	.word	0x0810fdc5
 810fd30:	0810fdc5 	.word	0x0810fdc5
 810fd34:	0810fdaf 	.word	0x0810fdaf
 810fd38:	0810fdc5 	.word	0x0810fdc5
 810fd3c:	0810fdc5 	.word	0x0810fdc5
 810fd40:	0810fdc5 	.word	0x0810fdc5
 810fd44:	0810fdc5 	.word	0x0810fdc5
 810fd48:	0810fdc5 	.word	0x0810fdc5
 810fd4c:	0810fdc5 	.word	0x0810fdc5
 810fd50:	0810fdc5 	.word	0x0810fdc5
 810fd54:	0810fdcd 	.word	0x0810fdcd
 810fd58:	0810fdc5 	.word	0x0810fdc5
 810fd5c:	0810fdc5 	.word	0x0810fdc5
 810fd60:	0810fdc5 	.word	0x0810fdc5
 810fd64:	0810fdc5 	.word	0x0810fdc5
 810fd68:	0810fdc5 	.word	0x0810fdc5
 810fd6c:	0810fdc5 	.word	0x0810fdc5
 810fd70:	0810fdc5 	.word	0x0810fdc5
 810fd74:	0810fdcd 	.word	0x0810fdcd
 810fd78:	0810fdc5 	.word	0x0810fdc5
 810fd7c:	0810fdc5 	.word	0x0810fdc5
 810fd80:	0810fdc5 	.word	0x0810fdc5
 810fd84:	0810fdc5 	.word	0x0810fdc5
 810fd88:	0810fdc5 	.word	0x0810fdc5
 810fd8c:	0810fdc5 	.word	0x0810fdc5
 810fd90:	0810fdc5 	.word	0x0810fdc5
 810fd94:	0810fdcd 	.word	0x0810fdcd
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 810fd98:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810fd9c:	3308      	adds	r3, #8
 810fd9e:	2101      	movs	r1, #1
 810fda0:	4618      	mov	r0, r3
 810fda2:	f000 ffc5 	bl	8110d30 <RCCEx_PLL2_Config>
 810fda6:	4603      	mov	r3, r0
 810fda8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 810fdac:	e00f      	b.n	810fdce <HAL_RCCEx_PeriphCLKConfig+0xaae>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 810fdae:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810fdb2:	3328      	adds	r3, #40	@ 0x28
 810fdb4:	2101      	movs	r1, #1
 810fdb6:	4618      	mov	r0, r3
 810fdb8:	f001 f86c 	bl	8110e94 <RCCEx_PLL3_Config>
 810fdbc:	4603      	mov	r3, r0
 810fdbe:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 810fdc2:	e004      	b.n	810fdce <HAL_RCCEx_PeriphCLKConfig+0xaae>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810fdc4:	2301      	movs	r3, #1
 810fdc6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 810fdca:	e000      	b.n	810fdce <HAL_RCCEx_PeriphCLKConfig+0xaae>
        break;
 810fdcc:	bf00      	nop
    }

    if (ret == HAL_OK)
 810fdce:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810fdd2:	2b00      	cmp	r3, #0
 810fdd4:	d10b      	bne.n	810fdee <HAL_RCCEx_PeriphCLKConfig+0xace>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 810fdd6:	4b81      	ldr	r3, [pc, #516]	@ (810ffdc <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 810fdd8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810fdda:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 810fdde:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810fde2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 810fde6:	4a7d      	ldr	r2, [pc, #500]	@ (810ffdc <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 810fde8:	430b      	orrs	r3, r1
 810fdea:	6553      	str	r3, [r2, #84]	@ 0x54
 810fdec:	e003      	b.n	810fdf6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810fdee:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810fdf2:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 810fdf6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810fdfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 810fdfe:	f002 0302 	and.w	r3, r2, #2
 810fe02:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 810fe06:	2300      	movs	r3, #0
 810fe08:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 810fe0c:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 810fe10:	460b      	mov	r3, r1
 810fe12:	4313      	orrs	r3, r2
 810fe14:	d042      	beq.n	810fe9c <HAL_RCCEx_PeriphCLKConfig+0xb7c>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 810fe16:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810fe1a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 810fe1c:	2b05      	cmp	r3, #5
 810fe1e:	d825      	bhi.n	810fe6c <HAL_RCCEx_PeriphCLKConfig+0xb4c>
 810fe20:	a201      	add	r2, pc, #4	@ (adr r2, 810fe28 <HAL_RCCEx_PeriphCLKConfig+0xb08>)
 810fe22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810fe26:	bf00      	nop
 810fe28:	0810fe75 	.word	0x0810fe75
 810fe2c:	0810fe41 	.word	0x0810fe41
 810fe30:	0810fe57 	.word	0x0810fe57
 810fe34:	0810fe75 	.word	0x0810fe75
 810fe38:	0810fe75 	.word	0x0810fe75
 810fe3c:	0810fe75 	.word	0x0810fe75
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 810fe40:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810fe44:	3308      	adds	r3, #8
 810fe46:	2101      	movs	r1, #1
 810fe48:	4618      	mov	r0, r3
 810fe4a:	f000 ff71 	bl	8110d30 <RCCEx_PLL2_Config>
 810fe4e:	4603      	mov	r3, r0
 810fe50:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 810fe54:	e00f      	b.n	810fe76 <HAL_RCCEx_PeriphCLKConfig+0xb56>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 810fe56:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810fe5a:	3328      	adds	r3, #40	@ 0x28
 810fe5c:	2101      	movs	r1, #1
 810fe5e:	4618      	mov	r0, r3
 810fe60:	f001 f818 	bl	8110e94 <RCCEx_PLL3_Config>
 810fe64:	4603      	mov	r3, r0
 810fe66:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 810fe6a:	e004      	b.n	810fe76 <HAL_RCCEx_PeriphCLKConfig+0xb56>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810fe6c:	2301      	movs	r3, #1
 810fe6e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 810fe72:	e000      	b.n	810fe76 <HAL_RCCEx_PeriphCLKConfig+0xb56>
        break;
 810fe74:	bf00      	nop
    }

    if (ret == HAL_OK)
 810fe76:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810fe7a:	2b00      	cmp	r3, #0
 810fe7c:	d10a      	bne.n	810fe94 <HAL_RCCEx_PeriphCLKConfig+0xb74>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 810fe7e:	4b57      	ldr	r3, [pc, #348]	@ (810ffdc <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 810fe80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810fe82:	f023 0107 	bic.w	r1, r3, #7
 810fe86:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810fe8a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 810fe8c:	4a53      	ldr	r2, [pc, #332]	@ (810ffdc <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 810fe8e:	430b      	orrs	r3, r1
 810fe90:	6553      	str	r3, [r2, #84]	@ 0x54
 810fe92:	e003      	b.n	810fe9c <HAL_RCCEx_PeriphCLKConfig+0xb7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810fe94:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810fe98:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 810fe9c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810fea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 810fea4:	f002 0304 	and.w	r3, r2, #4
 810fea8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 810feac:	2300      	movs	r3, #0
 810feae:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 810feb2:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 810feb6:	460b      	mov	r3, r1
 810feb8:	4313      	orrs	r3, r2
 810feba:	d044      	beq.n	810ff46 <HAL_RCCEx_PeriphCLKConfig+0xc26>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 810febc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810fec0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 810fec4:	2b05      	cmp	r3, #5
 810fec6:	d825      	bhi.n	810ff14 <HAL_RCCEx_PeriphCLKConfig+0xbf4>
 810fec8:	a201      	add	r2, pc, #4	@ (adr r2, 810fed0 <HAL_RCCEx_PeriphCLKConfig+0xbb0>)
 810feca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810fece:	bf00      	nop
 810fed0:	0810ff1d 	.word	0x0810ff1d
 810fed4:	0810fee9 	.word	0x0810fee9
 810fed8:	0810feff 	.word	0x0810feff
 810fedc:	0810ff1d 	.word	0x0810ff1d
 810fee0:	0810ff1d 	.word	0x0810ff1d
 810fee4:	0810ff1d 	.word	0x0810ff1d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 810fee8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810feec:	3308      	adds	r3, #8
 810feee:	2101      	movs	r1, #1
 810fef0:	4618      	mov	r0, r3
 810fef2:	f000 ff1d 	bl	8110d30 <RCCEx_PLL2_Config>
 810fef6:	4603      	mov	r3, r0
 810fef8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 810fefc:	e00f      	b.n	810ff1e <HAL_RCCEx_PeriphCLKConfig+0xbfe>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 810fefe:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810ff02:	3328      	adds	r3, #40	@ 0x28
 810ff04:	2101      	movs	r1, #1
 810ff06:	4618      	mov	r0, r3
 810ff08:	f000 ffc4 	bl	8110e94 <RCCEx_PLL3_Config>
 810ff0c:	4603      	mov	r3, r0
 810ff0e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 810ff12:	e004      	b.n	810ff1e <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810ff14:	2301      	movs	r3, #1
 810ff16:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 810ff1a:	e000      	b.n	810ff1e <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        break;
 810ff1c:	bf00      	nop
    }

    if (ret == HAL_OK)
 810ff1e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810ff22:	2b00      	cmp	r3, #0
 810ff24:	d10b      	bne.n	810ff3e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 810ff26:	4b2d      	ldr	r3, [pc, #180]	@ (810ffdc <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 810ff28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810ff2a:	f023 0107 	bic.w	r1, r3, #7
 810ff2e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810ff32:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 810ff36:	4a29      	ldr	r2, [pc, #164]	@ (810ffdc <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 810ff38:	430b      	orrs	r3, r1
 810ff3a:	6593      	str	r3, [r2, #88]	@ 0x58
 810ff3c:	e003      	b.n	810ff46 <HAL_RCCEx_PeriphCLKConfig+0xc26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810ff3e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810ff42:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 810ff46:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810ff4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810ff4e:	f002 0320 	and.w	r3, r2, #32
 810ff52:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 810ff56:	2300      	movs	r3, #0
 810ff58:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 810ff5c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 810ff60:	460b      	mov	r3, r1
 810ff62:	4313      	orrs	r3, r2
 810ff64:	d057      	beq.n	8110016 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 810ff66:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810ff6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 810ff6e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 810ff72:	d035      	beq.n	810ffe0 <HAL_RCCEx_PeriphCLKConfig+0xcc0>
 810ff74:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 810ff78:	d82c      	bhi.n	810ffd4 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 810ff7a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 810ff7e:	d031      	beq.n	810ffe4 <HAL_RCCEx_PeriphCLKConfig+0xcc4>
 810ff80:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 810ff84:	d826      	bhi.n	810ffd4 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 810ff86:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 810ff8a:	d02d      	beq.n	810ffe8 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
 810ff8c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 810ff90:	d820      	bhi.n	810ffd4 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 810ff92:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810ff96:	d012      	beq.n	810ffbe <HAL_RCCEx_PeriphCLKConfig+0xc9e>
 810ff98:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810ff9c:	d81a      	bhi.n	810ffd4 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 810ff9e:	2b00      	cmp	r3, #0
 810ffa0:	d024      	beq.n	810ffec <HAL_RCCEx_PeriphCLKConfig+0xccc>
 810ffa2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 810ffa6:	d115      	bne.n	810ffd4 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 810ffa8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810ffac:	3308      	adds	r3, #8
 810ffae:	2100      	movs	r1, #0
 810ffb0:	4618      	mov	r0, r3
 810ffb2:	f000 febd 	bl	8110d30 <RCCEx_PLL2_Config>
 810ffb6:	4603      	mov	r3, r0
 810ffb8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 810ffbc:	e017      	b.n	810ffee <HAL_RCCEx_PeriphCLKConfig+0xcce>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 810ffbe:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810ffc2:	3328      	adds	r3, #40	@ 0x28
 810ffc4:	2102      	movs	r1, #2
 810ffc6:	4618      	mov	r0, r3
 810ffc8:	f000 ff64 	bl	8110e94 <RCCEx_PLL3_Config>
 810ffcc:	4603      	mov	r3, r0
 810ffce:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 810ffd2:	e00c      	b.n	810ffee <HAL_RCCEx_PeriphCLKConfig+0xcce>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810ffd4:	2301      	movs	r3, #1
 810ffd6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 810ffda:	e008      	b.n	810ffee <HAL_RCCEx_PeriphCLKConfig+0xcce>
 810ffdc:	58024400 	.word	0x58024400
        break;
 810ffe0:	bf00      	nop
 810ffe2:	e004      	b.n	810ffee <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 810ffe4:	bf00      	nop
 810ffe6:	e002      	b.n	810ffee <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 810ffe8:	bf00      	nop
 810ffea:	e000      	b.n	810ffee <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 810ffec:	bf00      	nop
    }

    if (ret == HAL_OK)
 810ffee:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810fff2:	2b00      	cmp	r3, #0
 810fff4:	d10b      	bne.n	811000e <HAL_RCCEx_PeriphCLKConfig+0xcee>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 810fff6:	4bc2      	ldr	r3, [pc, #776]	@ (8110300 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 810fff8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810fffa:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 810fffe:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8110002:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8110006:	4abe      	ldr	r2, [pc, #760]	@ (8110300 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8110008:	430b      	orrs	r3, r1
 811000a:	6553      	str	r3, [r2, #84]	@ 0x54
 811000c:	e003      	b.n	8110016 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 811000e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8110012:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8110016:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 811001a:	e9d3 2300 	ldrd	r2, r3, [r3]
 811001e:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8110022:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8110026:	2300      	movs	r3, #0
 8110028:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 811002c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8110030:	460b      	mov	r3, r1
 8110032:	4313      	orrs	r3, r2
 8110034:	d055      	beq.n	81100e2 <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8110036:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 811003a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 811003e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8110042:	d033      	beq.n	81100ac <HAL_RCCEx_PeriphCLKConfig+0xd8c>
 8110044:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8110048:	d82c      	bhi.n	81100a4 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 811004a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 811004e:	d02f      	beq.n	81100b0 <HAL_RCCEx_PeriphCLKConfig+0xd90>
 8110050:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8110054:	d826      	bhi.n	81100a4 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8110056:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 811005a:	d02b      	beq.n	81100b4 <HAL_RCCEx_PeriphCLKConfig+0xd94>
 811005c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8110060:	d820      	bhi.n	81100a4 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8110062:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8110066:	d012      	beq.n	811008e <HAL_RCCEx_PeriphCLKConfig+0xd6e>
 8110068:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 811006c:	d81a      	bhi.n	81100a4 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 811006e:	2b00      	cmp	r3, #0
 8110070:	d022      	beq.n	81100b8 <HAL_RCCEx_PeriphCLKConfig+0xd98>
 8110072:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8110076:	d115      	bne.n	81100a4 <HAL_RCCEx_PeriphCLKConfig+0xd84>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8110078:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 811007c:	3308      	adds	r3, #8
 811007e:	2100      	movs	r1, #0
 8110080:	4618      	mov	r0, r3
 8110082:	f000 fe55 	bl	8110d30 <RCCEx_PLL2_Config>
 8110086:	4603      	mov	r3, r0
 8110088:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 811008c:	e015      	b.n	81100ba <HAL_RCCEx_PeriphCLKConfig+0xd9a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 811008e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8110092:	3328      	adds	r3, #40	@ 0x28
 8110094:	2102      	movs	r1, #2
 8110096:	4618      	mov	r0, r3
 8110098:	f000 fefc 	bl	8110e94 <RCCEx_PLL3_Config>
 811009c:	4603      	mov	r3, r0
 811009e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 81100a2:	e00a      	b.n	81100ba <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81100a4:	2301      	movs	r3, #1
 81100a6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 81100aa:	e006      	b.n	81100ba <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 81100ac:	bf00      	nop
 81100ae:	e004      	b.n	81100ba <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 81100b0:	bf00      	nop
 81100b2:	e002      	b.n	81100ba <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 81100b4:	bf00      	nop
 81100b6:	e000      	b.n	81100ba <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 81100b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 81100ba:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81100be:	2b00      	cmp	r3, #0
 81100c0:	d10b      	bne.n	81100da <HAL_RCCEx_PeriphCLKConfig+0xdba>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 81100c2:	4b8f      	ldr	r3, [pc, #572]	@ (8110300 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 81100c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81100c6:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 81100ca:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81100ce:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 81100d2:	4a8b      	ldr	r2, [pc, #556]	@ (8110300 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 81100d4:	430b      	orrs	r3, r1
 81100d6:	6593      	str	r3, [r2, #88]	@ 0x58
 81100d8:	e003      	b.n	81100e2 <HAL_RCCEx_PeriphCLKConfig+0xdc2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81100da:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81100de:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 81100e2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81100e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 81100ea:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 81100ee:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 81100f2:	2300      	movs	r3, #0
 81100f4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 81100f8:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 81100fc:	460b      	mov	r3, r1
 81100fe:	4313      	orrs	r3, r2
 8110100:	d055      	beq.n	81101ae <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8110102:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8110106:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 811010a:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 811010e:	d033      	beq.n	8110178 <HAL_RCCEx_PeriphCLKConfig+0xe58>
 8110110:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8110114:	d82c      	bhi.n	8110170 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8110116:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 811011a:	d02f      	beq.n	811017c <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 811011c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8110120:	d826      	bhi.n	8110170 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8110122:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8110126:	d02b      	beq.n	8110180 <HAL_RCCEx_PeriphCLKConfig+0xe60>
 8110128:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 811012c:	d820      	bhi.n	8110170 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 811012e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8110132:	d012      	beq.n	811015a <HAL_RCCEx_PeriphCLKConfig+0xe3a>
 8110134:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8110138:	d81a      	bhi.n	8110170 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 811013a:	2b00      	cmp	r3, #0
 811013c:	d022      	beq.n	8110184 <HAL_RCCEx_PeriphCLKConfig+0xe64>
 811013e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8110142:	d115      	bne.n	8110170 <HAL_RCCEx_PeriphCLKConfig+0xe50>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8110144:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8110148:	3308      	adds	r3, #8
 811014a:	2100      	movs	r1, #0
 811014c:	4618      	mov	r0, r3
 811014e:	f000 fdef 	bl	8110d30 <RCCEx_PLL2_Config>
 8110152:	4603      	mov	r3, r0
 8110154:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8110158:	e015      	b.n	8110186 <HAL_RCCEx_PeriphCLKConfig+0xe66>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 811015a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 811015e:	3328      	adds	r3, #40	@ 0x28
 8110160:	2102      	movs	r1, #2
 8110162:	4618      	mov	r0, r3
 8110164:	f000 fe96 	bl	8110e94 <RCCEx_PLL3_Config>
 8110168:	4603      	mov	r3, r0
 811016a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 811016e:	e00a      	b.n	8110186 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8110170:	2301      	movs	r3, #1
 8110172:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8110176:	e006      	b.n	8110186 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8110178:	bf00      	nop
 811017a:	e004      	b.n	8110186 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 811017c:	bf00      	nop
 811017e:	e002      	b.n	8110186 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8110180:	bf00      	nop
 8110182:	e000      	b.n	8110186 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8110184:	bf00      	nop
    }

    if (ret == HAL_OK)
 8110186:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 811018a:	2b00      	cmp	r3, #0
 811018c:	d10b      	bne.n	81101a6 <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 811018e:	4b5c      	ldr	r3, [pc, #368]	@ (8110300 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8110190:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8110192:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8110196:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 811019a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 811019e:	4a58      	ldr	r2, [pc, #352]	@ (8110300 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 81101a0:	430b      	orrs	r3, r1
 81101a2:	6593      	str	r3, [r2, #88]	@ 0x58
 81101a4:	e003      	b.n	81101ae <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81101a6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81101aa:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 81101ae:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81101b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 81101b6:	f002 0308 	and.w	r3, r2, #8
 81101ba:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 81101be:	2300      	movs	r3, #0
 81101c0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 81101c4:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 81101c8:	460b      	mov	r3, r1
 81101ca:	4313      	orrs	r3, r2
 81101cc:	d01e      	beq.n	811020c <HAL_RCCEx_PeriphCLKConfig+0xeec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 81101ce:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81101d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 81101d6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 81101da:	d10c      	bne.n	81101f6 <HAL_RCCEx_PeriphCLKConfig+0xed6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 81101dc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81101e0:	3328      	adds	r3, #40	@ 0x28
 81101e2:	2102      	movs	r1, #2
 81101e4:	4618      	mov	r0, r3
 81101e6:	f000 fe55 	bl	8110e94 <RCCEx_PLL3_Config>
 81101ea:	4603      	mov	r3, r0
 81101ec:	2b00      	cmp	r3, #0
 81101ee:	d002      	beq.n	81101f6 <HAL_RCCEx_PeriphCLKConfig+0xed6>
      {
        status = HAL_ERROR;
 81101f0:	2301      	movs	r3, #1
 81101f2:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 81101f6:	4b42      	ldr	r3, [pc, #264]	@ (8110300 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 81101f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81101fa:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 81101fe:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8110202:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8110206:	4a3e      	ldr	r2, [pc, #248]	@ (8110300 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8110208:	430b      	orrs	r3, r1
 811020a:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 811020c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8110210:	e9d3 2300 	ldrd	r2, r3, [r3]
 8110214:	f002 0310 	and.w	r3, r2, #16
 8110218:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 811021c:	2300      	movs	r3, #0
 811021e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8110222:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8110226:	460b      	mov	r3, r1
 8110228:	4313      	orrs	r3, r2
 811022a:	d01e      	beq.n	811026a <HAL_RCCEx_PeriphCLKConfig+0xf4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 811022c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8110230:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8110234:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8110238:	d10c      	bne.n	8110254 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 811023a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 811023e:	3328      	adds	r3, #40	@ 0x28
 8110240:	2102      	movs	r1, #2
 8110242:	4618      	mov	r0, r3
 8110244:	f000 fe26 	bl	8110e94 <RCCEx_PLL3_Config>
 8110248:	4603      	mov	r3, r0
 811024a:	2b00      	cmp	r3, #0
 811024c:	d002      	beq.n	8110254 <HAL_RCCEx_PeriphCLKConfig+0xf34>
      {
        status = HAL_ERROR;
 811024e:	2301      	movs	r3, #1
 8110250:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8110254:	4b2a      	ldr	r3, [pc, #168]	@ (8110300 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8110256:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8110258:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 811025c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8110260:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8110264:	4a26      	ldr	r2, [pc, #152]	@ (8110300 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8110266:	430b      	orrs	r3, r1
 8110268:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 811026a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 811026e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8110272:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8110276:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 811027a:	2300      	movs	r3, #0
 811027c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8110280:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8110284:	460b      	mov	r3, r1
 8110286:	4313      	orrs	r3, r2
 8110288:	d040      	beq.n	811030c <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    switch (PeriphClkInit->AdcClockSelection)
 811028a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 811028e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8110292:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8110296:	d022      	beq.n	81102de <HAL_RCCEx_PeriphCLKConfig+0xfbe>
 8110298:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 811029c:	d81b      	bhi.n	81102d6 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 811029e:	2b00      	cmp	r3, #0
 81102a0:	d003      	beq.n	81102aa <HAL_RCCEx_PeriphCLKConfig+0xf8a>
 81102a2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 81102a6:	d00b      	beq.n	81102c0 <HAL_RCCEx_PeriphCLKConfig+0xfa0>
 81102a8:	e015      	b.n	81102d6 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 81102aa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81102ae:	3308      	adds	r3, #8
 81102b0:	2100      	movs	r1, #0
 81102b2:	4618      	mov	r0, r3
 81102b4:	f000 fd3c 	bl	8110d30 <RCCEx_PLL2_Config>
 81102b8:	4603      	mov	r3, r0
 81102ba:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 81102be:	e00f      	b.n	81102e0 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 81102c0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81102c4:	3328      	adds	r3, #40	@ 0x28
 81102c6:	2102      	movs	r1, #2
 81102c8:	4618      	mov	r0, r3
 81102ca:	f000 fde3 	bl	8110e94 <RCCEx_PLL3_Config>
 81102ce:	4603      	mov	r3, r0
 81102d0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 81102d4:	e004      	b.n	81102e0 <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81102d6:	2301      	movs	r3, #1
 81102d8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 81102dc:	e000      	b.n	81102e0 <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        break;
 81102de:	bf00      	nop
    }

    if (ret == HAL_OK)
 81102e0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81102e4:	2b00      	cmp	r3, #0
 81102e6:	d10d      	bne.n	8110304 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 81102e8:	4b05      	ldr	r3, [pc, #20]	@ (8110300 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 81102ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81102ec:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 81102f0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81102f4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 81102f8:	4a01      	ldr	r2, [pc, #4]	@ (8110300 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 81102fa:	430b      	orrs	r3, r1
 81102fc:	6593      	str	r3, [r2, #88]	@ 0x58
 81102fe:	e005      	b.n	811030c <HAL_RCCEx_PeriphCLKConfig+0xfec>
 8110300:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8110304:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8110308:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 811030c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8110310:	e9d3 2300 	ldrd	r2, r3, [r3]
 8110314:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8110318:	67bb      	str	r3, [r7, #120]	@ 0x78
 811031a:	2300      	movs	r3, #0
 811031c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 811031e:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8110322:	460b      	mov	r3, r1
 8110324:	4313      	orrs	r3, r2
 8110326:	d03b      	beq.n	81103a0 <HAL_RCCEx_PeriphCLKConfig+0x1080>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8110328:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 811032c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8110330:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8110334:	d01f      	beq.n	8110376 <HAL_RCCEx_PeriphCLKConfig+0x1056>
 8110336:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 811033a:	d818      	bhi.n	811036e <HAL_RCCEx_PeriphCLKConfig+0x104e>
 811033c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8110340:	d003      	beq.n	811034a <HAL_RCCEx_PeriphCLKConfig+0x102a>
 8110342:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8110346:	d007      	beq.n	8110358 <HAL_RCCEx_PeriphCLKConfig+0x1038>
 8110348:	e011      	b.n	811036e <HAL_RCCEx_PeriphCLKConfig+0x104e>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 811034a:	4b64      	ldr	r3, [pc, #400]	@ (81104dc <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 811034c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 811034e:	4a63      	ldr	r2, [pc, #396]	@ (81104dc <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8110350:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8110354:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8110356:	e00f      	b.n	8110378 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8110358:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 811035c:	3328      	adds	r3, #40	@ 0x28
 811035e:	2101      	movs	r1, #1
 8110360:	4618      	mov	r0, r3
 8110362:	f000 fd97 	bl	8110e94 <RCCEx_PLL3_Config>
 8110366:	4603      	mov	r3, r0
 8110368:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* USB clock source configuration done later after clock selection check */
        break;
 811036c:	e004      	b.n	8110378 <HAL_RCCEx_PeriphCLKConfig+0x1058>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 811036e:	2301      	movs	r3, #1
 8110370:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8110374:	e000      	b.n	8110378 <HAL_RCCEx_PeriphCLKConfig+0x1058>
        break;
 8110376:	bf00      	nop
    }

    if (ret == HAL_OK)
 8110378:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 811037c:	2b00      	cmp	r3, #0
 811037e:	d10b      	bne.n	8110398 <HAL_RCCEx_PeriphCLKConfig+0x1078>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8110380:	4b56      	ldr	r3, [pc, #344]	@ (81104dc <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8110382:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8110384:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8110388:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 811038c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8110390:	4a52      	ldr	r2, [pc, #328]	@ (81104dc <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8110392:	430b      	orrs	r3, r1
 8110394:	6553      	str	r3, [r2, #84]	@ 0x54
 8110396:	e003      	b.n	81103a0 <HAL_RCCEx_PeriphCLKConfig+0x1080>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8110398:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 811039c:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 81103a0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81103a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 81103a8:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 81103ac:	673b      	str	r3, [r7, #112]	@ 0x70
 81103ae:	2300      	movs	r3, #0
 81103b0:	677b      	str	r3, [r7, #116]	@ 0x74
 81103b2:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 81103b6:	460b      	mov	r3, r1
 81103b8:	4313      	orrs	r3, r2
 81103ba:	d031      	beq.n	8110420 <HAL_RCCEx_PeriphCLKConfig+0x1100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 81103bc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81103c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81103c2:	2b00      	cmp	r3, #0
 81103c4:	d003      	beq.n	81103ce <HAL_RCCEx_PeriphCLKConfig+0x10ae>
 81103c6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 81103ca:	d007      	beq.n	81103dc <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 81103cc:	e011      	b.n	81103f2 <HAL_RCCEx_PeriphCLKConfig+0x10d2>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81103ce:	4b43      	ldr	r3, [pc, #268]	@ (81104dc <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 81103d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81103d2:	4a42      	ldr	r2, [pc, #264]	@ (81104dc <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 81103d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 81103d8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 81103da:	e00e      	b.n	81103fa <HAL_RCCEx_PeriphCLKConfig+0x10da>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 81103dc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81103e0:	3308      	adds	r3, #8
 81103e2:	2102      	movs	r1, #2
 81103e4:	4618      	mov	r0, r3
 81103e6:	f000 fca3 	bl	8110d30 <RCCEx_PLL2_Config>
 81103ea:	4603      	mov	r3, r0
 81103ec:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 81103f0:	e003      	b.n	81103fa <HAL_RCCEx_PeriphCLKConfig+0x10da>

      default:
        ret = HAL_ERROR;
 81103f2:	2301      	movs	r3, #1
 81103f4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 81103f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 81103fa:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81103fe:	2b00      	cmp	r3, #0
 8110400:	d10a      	bne.n	8110418 <HAL_RCCEx_PeriphCLKConfig+0x10f8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8110402:	4b36      	ldr	r3, [pc, #216]	@ (81104dc <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8110404:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8110406:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 811040a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 811040e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8110410:	4a32      	ldr	r2, [pc, #200]	@ (81104dc <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8110412:	430b      	orrs	r3, r1
 8110414:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8110416:	e003      	b.n	8110420 <HAL_RCCEx_PeriphCLKConfig+0x1100>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8110418:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 811041c:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8110420:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8110424:	e9d3 2300 	ldrd	r2, r3, [r3]
 8110428:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 811042c:	66bb      	str	r3, [r7, #104]	@ 0x68
 811042e:	2300      	movs	r3, #0
 8110430:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8110432:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8110436:	460b      	mov	r3, r1
 8110438:	4313      	orrs	r3, r2
 811043a:	d00c      	beq.n	8110456 <HAL_RCCEx_PeriphCLKConfig+0x1136>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 811043c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8110440:	3328      	adds	r3, #40	@ 0x28
 8110442:	2102      	movs	r1, #2
 8110444:	4618      	mov	r0, r3
 8110446:	f000 fd25 	bl	8110e94 <RCCEx_PLL3_Config>
 811044a:	4603      	mov	r3, r0
 811044c:	2b00      	cmp	r3, #0
 811044e:	d002      	beq.n	8110456 <HAL_RCCEx_PeriphCLKConfig+0x1136>
    {
      status = HAL_ERROR;
 8110450:	2301      	movs	r3, #1
 8110452:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8110456:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 811045a:	e9d3 2300 	ldrd	r2, r3, [r3]
 811045e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8110462:	663b      	str	r3, [r7, #96]	@ 0x60
 8110464:	2300      	movs	r3, #0
 8110466:	667b      	str	r3, [r7, #100]	@ 0x64
 8110468:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 811046c:	460b      	mov	r3, r1
 811046e:	4313      	orrs	r3, r2
 8110470:	d03a      	beq.n	81104e8 <HAL_RCCEx_PeriphCLKConfig+0x11c8>
  {

    switch (PeriphClkInit->RngClockSelection)
 8110472:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8110476:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 811047a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 811047e:	d018      	beq.n	81104b2 <HAL_RCCEx_PeriphCLKConfig+0x1192>
 8110480:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8110484:	d811      	bhi.n	81104aa <HAL_RCCEx_PeriphCLKConfig+0x118a>
 8110486:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 811048a:	d014      	beq.n	81104b6 <HAL_RCCEx_PeriphCLKConfig+0x1196>
 811048c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8110490:	d80b      	bhi.n	81104aa <HAL_RCCEx_PeriphCLKConfig+0x118a>
 8110492:	2b00      	cmp	r3, #0
 8110494:	d011      	beq.n	81104ba <HAL_RCCEx_PeriphCLKConfig+0x119a>
 8110496:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 811049a:	d106      	bne.n	81104aa <HAL_RCCEx_PeriphCLKConfig+0x118a>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 811049c:	4b0f      	ldr	r3, [pc, #60]	@ (81104dc <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 811049e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81104a0:	4a0e      	ldr	r2, [pc, #56]	@ (81104dc <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 81104a2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 81104a6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 81104a8:	e008      	b.n	81104bc <HAL_RCCEx_PeriphCLKConfig+0x119c>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81104aa:	2301      	movs	r3, #1
 81104ac:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 81104b0:	e004      	b.n	81104bc <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 81104b2:	bf00      	nop
 81104b4:	e002      	b.n	81104bc <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 81104b6:	bf00      	nop
 81104b8:	e000      	b.n	81104bc <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 81104ba:	bf00      	nop
    }

    if (ret == HAL_OK)
 81104bc:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81104c0:	2b00      	cmp	r3, #0
 81104c2:	d10d      	bne.n	81104e0 <HAL_RCCEx_PeriphCLKConfig+0x11c0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 81104c4:	4b05      	ldr	r3, [pc, #20]	@ (81104dc <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 81104c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81104c8:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 81104cc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81104d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 81104d4:	4a01      	ldr	r2, [pc, #4]	@ (81104dc <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 81104d6:	430b      	orrs	r3, r1
 81104d8:	6553      	str	r3, [r2, #84]	@ 0x54
 81104da:	e005      	b.n	81104e8 <HAL_RCCEx_PeriphCLKConfig+0x11c8>
 81104dc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 81104e0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81104e4:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 81104e8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81104ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 81104f0:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 81104f4:	65bb      	str	r3, [r7, #88]	@ 0x58
 81104f6:	2300      	movs	r3, #0
 81104f8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 81104fa:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 81104fe:	460b      	mov	r3, r1
 8110500:	4313      	orrs	r3, r2
 8110502:	d009      	beq.n	8110518 <HAL_RCCEx_PeriphCLKConfig+0x11f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8110504:	4baa      	ldr	r3, [pc, #680]	@ (81107b0 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8110506:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8110508:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 811050c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8110510:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8110512:	4aa7      	ldr	r2, [pc, #668]	@ (81107b0 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8110514:	430b      	orrs	r3, r1
 8110516:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8110518:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 811051c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8110520:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8110524:	653b      	str	r3, [r7, #80]	@ 0x50
 8110526:	2300      	movs	r3, #0
 8110528:	657b      	str	r3, [r7, #84]	@ 0x54
 811052a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 811052e:	460b      	mov	r3, r1
 8110530:	4313      	orrs	r3, r2
 8110532:	d00a      	beq.n	811054a <HAL_RCCEx_PeriphCLKConfig+0x122a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8110534:	4b9e      	ldr	r3, [pc, #632]	@ (81107b0 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8110536:	691b      	ldr	r3, [r3, #16]
 8110538:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 811053c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8110540:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8110544:	4a9a      	ldr	r2, [pc, #616]	@ (81107b0 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8110546:	430b      	orrs	r3, r1
 8110548:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 811054a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 811054e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8110552:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8110556:	64bb      	str	r3, [r7, #72]	@ 0x48
 8110558:	2300      	movs	r3, #0
 811055a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 811055c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8110560:	460b      	mov	r3, r1
 8110562:	4313      	orrs	r3, r2
 8110564:	d009      	beq.n	811057a <HAL_RCCEx_PeriphCLKConfig+0x125a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8110566:	4b92      	ldr	r3, [pc, #584]	@ (81107b0 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8110568:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 811056a:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 811056e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8110572:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8110574:	4a8e      	ldr	r2, [pc, #568]	@ (81107b0 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8110576:	430b      	orrs	r3, r1
 8110578:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 811057a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 811057e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8110582:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8110586:	643b      	str	r3, [r7, #64]	@ 0x40
 8110588:	2300      	movs	r3, #0
 811058a:	647b      	str	r3, [r7, #68]	@ 0x44
 811058c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8110590:	460b      	mov	r3, r1
 8110592:	4313      	orrs	r3, r2
 8110594:	d00e      	beq.n	81105b4 <HAL_RCCEx_PeriphCLKConfig+0x1294>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8110596:	4b86      	ldr	r3, [pc, #536]	@ (81107b0 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8110598:	691b      	ldr	r3, [r3, #16]
 811059a:	4a85      	ldr	r2, [pc, #532]	@ (81107b0 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 811059c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 81105a0:	6113      	str	r3, [r2, #16]
 81105a2:	4b83      	ldr	r3, [pc, #524]	@ (81107b0 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 81105a4:	6919      	ldr	r1, [r3, #16]
 81105a6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81105aa:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 81105ae:	4a80      	ldr	r2, [pc, #512]	@ (81107b0 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 81105b0:	430b      	orrs	r3, r1
 81105b2:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 81105b4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81105b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 81105bc:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 81105c0:	63bb      	str	r3, [r7, #56]	@ 0x38
 81105c2:	2300      	movs	r3, #0
 81105c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 81105c6:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 81105ca:	460b      	mov	r3, r1
 81105cc:	4313      	orrs	r3, r2
 81105ce:	d009      	beq.n	81105e4 <HAL_RCCEx_PeriphCLKConfig+0x12c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 81105d0:	4b77      	ldr	r3, [pc, #476]	@ (81107b0 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 81105d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 81105d4:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 81105d8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81105dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81105de:	4a74      	ldr	r2, [pc, #464]	@ (81107b0 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 81105e0:	430b      	orrs	r3, r1
 81105e2:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 81105e4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81105e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 81105ec:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 81105f0:	633b      	str	r3, [r7, #48]	@ 0x30
 81105f2:	2300      	movs	r3, #0
 81105f4:	637b      	str	r3, [r7, #52]	@ 0x34
 81105f6:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 81105fa:	460b      	mov	r3, r1
 81105fc:	4313      	orrs	r3, r2
 81105fe:	d00a      	beq.n	8110616 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8110600:	4b6b      	ldr	r3, [pc, #428]	@ (81107b0 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8110602:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8110604:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8110608:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 811060c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8110610:	4a67      	ldr	r2, [pc, #412]	@ (81107b0 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8110612:	430b      	orrs	r3, r1
 8110614:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8110616:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 811061a:	e9d3 2300 	ldrd	r2, r3, [r3]
 811061e:	2100      	movs	r1, #0
 8110620:	62b9      	str	r1, [r7, #40]	@ 0x28
 8110622:	f003 0301 	and.w	r3, r3, #1
 8110626:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8110628:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 811062c:	460b      	mov	r3, r1
 811062e:	4313      	orrs	r3, r2
 8110630:	d011      	beq.n	8110656 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8110632:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8110636:	3308      	adds	r3, #8
 8110638:	2100      	movs	r1, #0
 811063a:	4618      	mov	r0, r3
 811063c:	f000 fb78 	bl	8110d30 <RCCEx_PLL2_Config>
 8110640:	4603      	mov	r3, r0
 8110642:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8110646:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 811064a:	2b00      	cmp	r3, #0
 811064c:	d003      	beq.n	8110656 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 811064e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8110652:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8110656:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 811065a:	e9d3 2300 	ldrd	r2, r3, [r3]
 811065e:	2100      	movs	r1, #0
 8110660:	6239      	str	r1, [r7, #32]
 8110662:	f003 0302 	and.w	r3, r3, #2
 8110666:	627b      	str	r3, [r7, #36]	@ 0x24
 8110668:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 811066c:	460b      	mov	r3, r1
 811066e:	4313      	orrs	r3, r2
 8110670:	d011      	beq.n	8110696 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8110672:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8110676:	3308      	adds	r3, #8
 8110678:	2101      	movs	r1, #1
 811067a:	4618      	mov	r0, r3
 811067c:	f000 fb58 	bl	8110d30 <RCCEx_PLL2_Config>
 8110680:	4603      	mov	r3, r0
 8110682:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8110686:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 811068a:	2b00      	cmp	r3, #0
 811068c:	d003      	beq.n	8110696 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 811068e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8110692:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8110696:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 811069a:	e9d3 2300 	ldrd	r2, r3, [r3]
 811069e:	2100      	movs	r1, #0
 81106a0:	61b9      	str	r1, [r7, #24]
 81106a2:	f003 0304 	and.w	r3, r3, #4
 81106a6:	61fb      	str	r3, [r7, #28]
 81106a8:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 81106ac:	460b      	mov	r3, r1
 81106ae:	4313      	orrs	r3, r2
 81106b0:	d011      	beq.n	81106d6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 81106b2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81106b6:	3308      	adds	r3, #8
 81106b8:	2102      	movs	r1, #2
 81106ba:	4618      	mov	r0, r3
 81106bc:	f000 fb38 	bl	8110d30 <RCCEx_PLL2_Config>
 81106c0:	4603      	mov	r3, r0
 81106c2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 81106c6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81106ca:	2b00      	cmp	r3, #0
 81106cc:	d003      	beq.n	81106d6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 81106ce:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81106d2:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 81106d6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81106da:	e9d3 2300 	ldrd	r2, r3, [r3]
 81106de:	2100      	movs	r1, #0
 81106e0:	6139      	str	r1, [r7, #16]
 81106e2:	f003 0308 	and.w	r3, r3, #8
 81106e6:	617b      	str	r3, [r7, #20]
 81106e8:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 81106ec:	460b      	mov	r3, r1
 81106ee:	4313      	orrs	r3, r2
 81106f0:	d011      	beq.n	8110716 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 81106f2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81106f6:	3328      	adds	r3, #40	@ 0x28
 81106f8:	2100      	movs	r1, #0
 81106fa:	4618      	mov	r0, r3
 81106fc:	f000 fbca 	bl	8110e94 <RCCEx_PLL3_Config>
 8110700:	4603      	mov	r3, r0
 8110702:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
  
    if (ret == HAL_OK)
 8110706:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 811070a:	2b00      	cmp	r3, #0
 811070c:	d003      	beq.n	8110716 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 811070e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8110712:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8110716:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 811071a:	e9d3 2300 	ldrd	r2, r3, [r3]
 811071e:	2100      	movs	r1, #0
 8110720:	60b9      	str	r1, [r7, #8]
 8110722:	f003 0310 	and.w	r3, r3, #16
 8110726:	60fb      	str	r3, [r7, #12]
 8110728:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 811072c:	460b      	mov	r3, r1
 811072e:	4313      	orrs	r3, r2
 8110730:	d011      	beq.n	8110756 <HAL_RCCEx_PeriphCLKConfig+0x1436>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8110732:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8110736:	3328      	adds	r3, #40	@ 0x28
 8110738:	2101      	movs	r1, #1
 811073a:	4618      	mov	r0, r3
 811073c:	f000 fbaa 	bl	8110e94 <RCCEx_PLL3_Config>
 8110740:	4603      	mov	r3, r0
 8110742:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8110746:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 811074a:	2b00      	cmp	r3, #0
 811074c:	d003      	beq.n	8110756 <HAL_RCCEx_PeriphCLKConfig+0x1436>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 811074e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8110752:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8110756:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 811075a:	e9d3 2300 	ldrd	r2, r3, [r3]
 811075e:	2100      	movs	r1, #0
 8110760:	6039      	str	r1, [r7, #0]
 8110762:	f003 0320 	and.w	r3, r3, #32
 8110766:	607b      	str	r3, [r7, #4]
 8110768:	e9d7 1200 	ldrd	r1, r2, [r7]
 811076c:	460b      	mov	r3, r1
 811076e:	4313      	orrs	r3, r2
 8110770:	d011      	beq.n	8110796 <HAL_RCCEx_PeriphCLKConfig+0x1476>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8110772:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8110776:	3328      	adds	r3, #40	@ 0x28
 8110778:	2102      	movs	r1, #2
 811077a:	4618      	mov	r0, r3
 811077c:	f000 fb8a 	bl	8110e94 <RCCEx_PLL3_Config>
 8110780:	4603      	mov	r3, r0
 8110782:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8110786:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 811078a:	2b00      	cmp	r3, #0
 811078c:	d003      	beq.n	8110796 <HAL_RCCEx_PeriphCLKConfig+0x1476>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 811078e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8110792:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    } 
  }

  if (status == HAL_OK)
 8110796:	f897 312e 	ldrb.w	r3, [r7, #302]	@ 0x12e
 811079a:	2b00      	cmp	r3, #0
 811079c:	d101      	bne.n	81107a2 <HAL_RCCEx_PeriphCLKConfig+0x1482>
  {
    return HAL_OK;
 811079e:	2300      	movs	r3, #0
 81107a0:	e000      	b.n	81107a4 <HAL_RCCEx_PeriphCLKConfig+0x1484>
  }
  return HAL_ERROR;
 81107a2:	2301      	movs	r3, #1
}
 81107a4:	4618      	mov	r0, r3
 81107a6:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 81107aa:	46bd      	mov	sp, r7
 81107ac:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 81107b0:	58024400 	.word	0x58024400

081107b4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 81107b4:	b580      	push	{r7, lr}
 81107b6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 81107b8:	f7fe fd12 	bl	810f1e0 <HAL_RCC_GetHCLKFreq>
 81107bc:	4602      	mov	r2, r0
 81107be:	4b06      	ldr	r3, [pc, #24]	@ (81107d8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 81107c0:	6a1b      	ldr	r3, [r3, #32]
 81107c2:	091b      	lsrs	r3, r3, #4
 81107c4:	f003 0307 	and.w	r3, r3, #7
 81107c8:	4904      	ldr	r1, [pc, #16]	@ (81107dc <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 81107ca:	5ccb      	ldrb	r3, [r1, r3]
 81107cc:	f003 031f 	and.w	r3, r3, #31
 81107d0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 81107d4:	4618      	mov	r0, r3
 81107d6:	bd80      	pop	{r7, pc}
 81107d8:	58024400 	.word	0x58024400
 81107dc:	081283ec 	.word	0x081283ec

081107e0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 81107e0:	b480      	push	{r7}
 81107e2:	b089      	sub	sp, #36	@ 0x24
 81107e4:	af00      	add	r7, sp, #0
 81107e6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 81107e8:	4ba1      	ldr	r3, [pc, #644]	@ (8110a70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81107ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81107ec:	f003 0303 	and.w	r3, r3, #3
 81107f0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 81107f2:	4b9f      	ldr	r3, [pc, #636]	@ (8110a70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81107f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81107f6:	0b1b      	lsrs	r3, r3, #12
 81107f8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 81107fc:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 81107fe:	4b9c      	ldr	r3, [pc, #624]	@ (8110a70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8110800:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8110802:	091b      	lsrs	r3, r3, #4
 8110804:	f003 0301 	and.w	r3, r3, #1
 8110808:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 811080a:	4b99      	ldr	r3, [pc, #612]	@ (8110a70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 811080c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 811080e:	08db      	lsrs	r3, r3, #3
 8110810:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8110814:	693a      	ldr	r2, [r7, #16]
 8110816:	fb02 f303 	mul.w	r3, r2, r3
 811081a:	ee07 3a90 	vmov	s15, r3
 811081e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8110822:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8110826:	697b      	ldr	r3, [r7, #20]
 8110828:	2b00      	cmp	r3, #0
 811082a:	f000 8111 	beq.w	8110a50 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 811082e:	69bb      	ldr	r3, [r7, #24]
 8110830:	2b02      	cmp	r3, #2
 8110832:	f000 8083 	beq.w	811093c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8110836:	69bb      	ldr	r3, [r7, #24]
 8110838:	2b02      	cmp	r3, #2
 811083a:	f200 80a1 	bhi.w	8110980 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 811083e:	69bb      	ldr	r3, [r7, #24]
 8110840:	2b00      	cmp	r3, #0
 8110842:	d003      	beq.n	811084c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8110844:	69bb      	ldr	r3, [r7, #24]
 8110846:	2b01      	cmp	r3, #1
 8110848:	d056      	beq.n	81108f8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 811084a:	e099      	b.n	8110980 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 811084c:	4b88      	ldr	r3, [pc, #544]	@ (8110a70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 811084e:	681b      	ldr	r3, [r3, #0]
 8110850:	f003 0320 	and.w	r3, r3, #32
 8110854:	2b00      	cmp	r3, #0
 8110856:	d02d      	beq.n	81108b4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8110858:	4b85      	ldr	r3, [pc, #532]	@ (8110a70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 811085a:	681b      	ldr	r3, [r3, #0]
 811085c:	08db      	lsrs	r3, r3, #3
 811085e:	f003 0303 	and.w	r3, r3, #3
 8110862:	4a84      	ldr	r2, [pc, #528]	@ (8110a74 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8110864:	fa22 f303 	lsr.w	r3, r2, r3
 8110868:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 811086a:	68bb      	ldr	r3, [r7, #8]
 811086c:	ee07 3a90 	vmov	s15, r3
 8110870:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8110874:	697b      	ldr	r3, [r7, #20]
 8110876:	ee07 3a90 	vmov	s15, r3
 811087a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 811087e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8110882:	4b7b      	ldr	r3, [pc, #492]	@ (8110a70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8110884:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8110886:	f3c3 0308 	ubfx	r3, r3, #0, #9
 811088a:	ee07 3a90 	vmov	s15, r3
 811088e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8110892:	ed97 6a03 	vldr	s12, [r7, #12]
 8110896:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8110a78 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 811089a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 811089e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81108a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81108a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81108aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 81108ae:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 81108b2:	e087      	b.n	81109c4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 81108b4:	697b      	ldr	r3, [r7, #20]
 81108b6:	ee07 3a90 	vmov	s15, r3
 81108ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81108be:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8110a7c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 81108c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81108c6:	4b6a      	ldr	r3, [pc, #424]	@ (8110a70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81108c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 81108ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81108ce:	ee07 3a90 	vmov	s15, r3
 81108d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81108d6:	ed97 6a03 	vldr	s12, [r7, #12]
 81108da:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8110a78 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 81108de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81108e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81108e6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81108ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81108ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 81108f2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81108f6:	e065      	b.n	81109c4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 81108f8:	697b      	ldr	r3, [r7, #20]
 81108fa:	ee07 3a90 	vmov	s15, r3
 81108fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8110902:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8110a80 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8110906:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 811090a:	4b59      	ldr	r3, [pc, #356]	@ (8110a70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 811090c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 811090e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8110912:	ee07 3a90 	vmov	s15, r3
 8110916:	eef8 6a67 	vcvt.f32.u32	s13, s15
 811091a:	ed97 6a03 	vldr	s12, [r7, #12]
 811091e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8110a78 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8110922:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8110926:	ee76 7aa7 	vadd.f32	s15, s13, s15
 811092a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 811092e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8110932:	ee67 7a27 	vmul.f32	s15, s14, s15
 8110936:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 811093a:	e043      	b.n	81109c4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 811093c:	697b      	ldr	r3, [r7, #20]
 811093e:	ee07 3a90 	vmov	s15, r3
 8110942:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8110946:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8110a84 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 811094a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 811094e:	4b48      	ldr	r3, [pc, #288]	@ (8110a70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8110950:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8110952:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8110956:	ee07 3a90 	vmov	s15, r3
 811095a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 811095e:	ed97 6a03 	vldr	s12, [r7, #12]
 8110962:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8110a78 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8110966:	eec6 7a25 	vdiv.f32	s15, s12, s11
 811096a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 811096e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8110972:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8110976:	ee67 7a27 	vmul.f32	s15, s14, s15
 811097a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 811097e:	e021      	b.n	81109c4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8110980:	697b      	ldr	r3, [r7, #20]
 8110982:	ee07 3a90 	vmov	s15, r3
 8110986:	eef8 7a67 	vcvt.f32.u32	s15, s15
 811098a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8110a80 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 811098e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8110992:	4b37      	ldr	r3, [pc, #220]	@ (8110a70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8110994:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8110996:	f3c3 0308 	ubfx	r3, r3, #0, #9
 811099a:	ee07 3a90 	vmov	s15, r3
 811099e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81109a2:	ed97 6a03 	vldr	s12, [r7, #12]
 81109a6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8110a78 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 81109aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81109ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81109b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81109b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81109ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 81109be:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81109c2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 81109c4:	4b2a      	ldr	r3, [pc, #168]	@ (8110a70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81109c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 81109c8:	0a5b      	lsrs	r3, r3, #9
 81109ca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 81109ce:	ee07 3a90 	vmov	s15, r3
 81109d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81109d6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 81109da:	ee37 7a87 	vadd.f32	s14, s15, s14
 81109de:	edd7 6a07 	vldr	s13, [r7, #28]
 81109e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81109e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81109ea:	ee17 2a90 	vmov	r2, s15
 81109ee:	687b      	ldr	r3, [r7, #4]
 81109f0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 81109f2:	4b1f      	ldr	r3, [pc, #124]	@ (8110a70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81109f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 81109f6:	0c1b      	lsrs	r3, r3, #16
 81109f8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 81109fc:	ee07 3a90 	vmov	s15, r3
 8110a00:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8110a04:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8110a08:	ee37 7a87 	vadd.f32	s14, s15, s14
 8110a0c:	edd7 6a07 	vldr	s13, [r7, #28]
 8110a10:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8110a14:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8110a18:	ee17 2a90 	vmov	r2, s15
 8110a1c:	687b      	ldr	r3, [r7, #4]
 8110a1e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8110a20:	4b13      	ldr	r3, [pc, #76]	@ (8110a70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8110a22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8110a24:	0e1b      	lsrs	r3, r3, #24
 8110a26:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8110a2a:	ee07 3a90 	vmov	s15, r3
 8110a2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8110a32:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8110a36:	ee37 7a87 	vadd.f32	s14, s15, s14
 8110a3a:	edd7 6a07 	vldr	s13, [r7, #28]
 8110a3e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8110a42:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8110a46:	ee17 2a90 	vmov	r2, s15
 8110a4a:	687b      	ldr	r3, [r7, #4]
 8110a4c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8110a4e:	e008      	b.n	8110a62 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8110a50:	687b      	ldr	r3, [r7, #4]
 8110a52:	2200      	movs	r2, #0
 8110a54:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8110a56:	687b      	ldr	r3, [r7, #4]
 8110a58:	2200      	movs	r2, #0
 8110a5a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8110a5c:	687b      	ldr	r3, [r7, #4]
 8110a5e:	2200      	movs	r2, #0
 8110a60:	609a      	str	r2, [r3, #8]
}
 8110a62:	bf00      	nop
 8110a64:	3724      	adds	r7, #36	@ 0x24
 8110a66:	46bd      	mov	sp, r7
 8110a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8110a6c:	4770      	bx	lr
 8110a6e:	bf00      	nop
 8110a70:	58024400 	.word	0x58024400
 8110a74:	03d09000 	.word	0x03d09000
 8110a78:	46000000 	.word	0x46000000
 8110a7c:	4c742400 	.word	0x4c742400
 8110a80:	4a742400 	.word	0x4a742400
 8110a84:	4bbebc20 	.word	0x4bbebc20

08110a88 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8110a88:	b480      	push	{r7}
 8110a8a:	b089      	sub	sp, #36	@ 0x24
 8110a8c:	af00      	add	r7, sp, #0
 8110a8e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8110a90:	4ba1      	ldr	r3, [pc, #644]	@ (8110d18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8110a92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8110a94:	f003 0303 	and.w	r3, r3, #3
 8110a98:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8110a9a:	4b9f      	ldr	r3, [pc, #636]	@ (8110d18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8110a9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8110a9e:	0d1b      	lsrs	r3, r3, #20
 8110aa0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8110aa4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8110aa6:	4b9c      	ldr	r3, [pc, #624]	@ (8110d18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8110aa8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8110aaa:	0a1b      	lsrs	r3, r3, #8
 8110aac:	f003 0301 	and.w	r3, r3, #1
 8110ab0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8110ab2:	4b99      	ldr	r3, [pc, #612]	@ (8110d18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8110ab4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8110ab6:	08db      	lsrs	r3, r3, #3
 8110ab8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8110abc:	693a      	ldr	r2, [r7, #16]
 8110abe:	fb02 f303 	mul.w	r3, r2, r3
 8110ac2:	ee07 3a90 	vmov	s15, r3
 8110ac6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8110aca:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8110ace:	697b      	ldr	r3, [r7, #20]
 8110ad0:	2b00      	cmp	r3, #0
 8110ad2:	f000 8111 	beq.w	8110cf8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8110ad6:	69bb      	ldr	r3, [r7, #24]
 8110ad8:	2b02      	cmp	r3, #2
 8110ada:	f000 8083 	beq.w	8110be4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8110ade:	69bb      	ldr	r3, [r7, #24]
 8110ae0:	2b02      	cmp	r3, #2
 8110ae2:	f200 80a1 	bhi.w	8110c28 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8110ae6:	69bb      	ldr	r3, [r7, #24]
 8110ae8:	2b00      	cmp	r3, #0
 8110aea:	d003      	beq.n	8110af4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8110aec:	69bb      	ldr	r3, [r7, #24]
 8110aee:	2b01      	cmp	r3, #1
 8110af0:	d056      	beq.n	8110ba0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8110af2:	e099      	b.n	8110c28 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8110af4:	4b88      	ldr	r3, [pc, #544]	@ (8110d18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8110af6:	681b      	ldr	r3, [r3, #0]
 8110af8:	f003 0320 	and.w	r3, r3, #32
 8110afc:	2b00      	cmp	r3, #0
 8110afe:	d02d      	beq.n	8110b5c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8110b00:	4b85      	ldr	r3, [pc, #532]	@ (8110d18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8110b02:	681b      	ldr	r3, [r3, #0]
 8110b04:	08db      	lsrs	r3, r3, #3
 8110b06:	f003 0303 	and.w	r3, r3, #3
 8110b0a:	4a84      	ldr	r2, [pc, #528]	@ (8110d1c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8110b0c:	fa22 f303 	lsr.w	r3, r2, r3
 8110b10:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8110b12:	68bb      	ldr	r3, [r7, #8]
 8110b14:	ee07 3a90 	vmov	s15, r3
 8110b18:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8110b1c:	697b      	ldr	r3, [r7, #20]
 8110b1e:	ee07 3a90 	vmov	s15, r3
 8110b22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8110b26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8110b2a:	4b7b      	ldr	r3, [pc, #492]	@ (8110d18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8110b2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8110b2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8110b32:	ee07 3a90 	vmov	s15, r3
 8110b36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8110b3a:	ed97 6a03 	vldr	s12, [r7, #12]
 8110b3e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8110d20 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8110b42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8110b46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8110b4a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8110b4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8110b52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8110b56:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8110b5a:	e087      	b.n	8110c6c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8110b5c:	697b      	ldr	r3, [r7, #20]
 8110b5e:	ee07 3a90 	vmov	s15, r3
 8110b62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8110b66:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8110d24 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8110b6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8110b6e:	4b6a      	ldr	r3, [pc, #424]	@ (8110d18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8110b70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8110b72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8110b76:	ee07 3a90 	vmov	s15, r3
 8110b7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8110b7e:	ed97 6a03 	vldr	s12, [r7, #12]
 8110b82:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8110d20 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8110b86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8110b8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8110b8e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8110b92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8110b96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8110b9a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8110b9e:	e065      	b.n	8110c6c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8110ba0:	697b      	ldr	r3, [r7, #20]
 8110ba2:	ee07 3a90 	vmov	s15, r3
 8110ba6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8110baa:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8110d28 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8110bae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8110bb2:	4b59      	ldr	r3, [pc, #356]	@ (8110d18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8110bb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8110bb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8110bba:	ee07 3a90 	vmov	s15, r3
 8110bbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8110bc2:	ed97 6a03 	vldr	s12, [r7, #12]
 8110bc6:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8110d20 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8110bca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8110bce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8110bd2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8110bd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8110bda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8110bde:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8110be2:	e043      	b.n	8110c6c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8110be4:	697b      	ldr	r3, [r7, #20]
 8110be6:	ee07 3a90 	vmov	s15, r3
 8110bea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8110bee:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8110d2c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8110bf2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8110bf6:	4b48      	ldr	r3, [pc, #288]	@ (8110d18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8110bf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8110bfa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8110bfe:	ee07 3a90 	vmov	s15, r3
 8110c02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8110c06:	ed97 6a03 	vldr	s12, [r7, #12]
 8110c0a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8110d20 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8110c0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8110c12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8110c16:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8110c1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8110c1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8110c22:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8110c26:	e021      	b.n	8110c6c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8110c28:	697b      	ldr	r3, [r7, #20]
 8110c2a:	ee07 3a90 	vmov	s15, r3
 8110c2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8110c32:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8110d28 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8110c36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8110c3a:	4b37      	ldr	r3, [pc, #220]	@ (8110d18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8110c3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8110c3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8110c42:	ee07 3a90 	vmov	s15, r3
 8110c46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8110c4a:	ed97 6a03 	vldr	s12, [r7, #12]
 8110c4e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8110d20 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8110c52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8110c56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8110c5a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8110c5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8110c62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8110c66:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8110c6a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8110c6c:	4b2a      	ldr	r3, [pc, #168]	@ (8110d18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8110c6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8110c70:	0a5b      	lsrs	r3, r3, #9
 8110c72:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8110c76:	ee07 3a90 	vmov	s15, r3
 8110c7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8110c7e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8110c82:	ee37 7a87 	vadd.f32	s14, s15, s14
 8110c86:	edd7 6a07 	vldr	s13, [r7, #28]
 8110c8a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8110c8e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8110c92:	ee17 2a90 	vmov	r2, s15
 8110c96:	687b      	ldr	r3, [r7, #4]
 8110c98:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8110c9a:	4b1f      	ldr	r3, [pc, #124]	@ (8110d18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8110c9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8110c9e:	0c1b      	lsrs	r3, r3, #16
 8110ca0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8110ca4:	ee07 3a90 	vmov	s15, r3
 8110ca8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8110cac:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8110cb0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8110cb4:	edd7 6a07 	vldr	s13, [r7, #28]
 8110cb8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8110cbc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8110cc0:	ee17 2a90 	vmov	r2, s15
 8110cc4:	687b      	ldr	r3, [r7, #4]
 8110cc6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8110cc8:	4b13      	ldr	r3, [pc, #76]	@ (8110d18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8110cca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8110ccc:	0e1b      	lsrs	r3, r3, #24
 8110cce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8110cd2:	ee07 3a90 	vmov	s15, r3
 8110cd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8110cda:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8110cde:	ee37 7a87 	vadd.f32	s14, s15, s14
 8110ce2:	edd7 6a07 	vldr	s13, [r7, #28]
 8110ce6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8110cea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8110cee:	ee17 2a90 	vmov	r2, s15
 8110cf2:	687b      	ldr	r3, [r7, #4]
 8110cf4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8110cf6:	e008      	b.n	8110d0a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8110cf8:	687b      	ldr	r3, [r7, #4]
 8110cfa:	2200      	movs	r2, #0
 8110cfc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8110cfe:	687b      	ldr	r3, [r7, #4]
 8110d00:	2200      	movs	r2, #0
 8110d02:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8110d04:	687b      	ldr	r3, [r7, #4]
 8110d06:	2200      	movs	r2, #0
 8110d08:	609a      	str	r2, [r3, #8]
}
 8110d0a:	bf00      	nop
 8110d0c:	3724      	adds	r7, #36	@ 0x24
 8110d0e:	46bd      	mov	sp, r7
 8110d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8110d14:	4770      	bx	lr
 8110d16:	bf00      	nop
 8110d18:	58024400 	.word	0x58024400
 8110d1c:	03d09000 	.word	0x03d09000
 8110d20:	46000000 	.word	0x46000000
 8110d24:	4c742400 	.word	0x4c742400
 8110d28:	4a742400 	.word	0x4a742400
 8110d2c:	4bbebc20 	.word	0x4bbebc20

08110d30 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8110d30:	b580      	push	{r7, lr}
 8110d32:	b084      	sub	sp, #16
 8110d34:	af00      	add	r7, sp, #0
 8110d36:	6078      	str	r0, [r7, #4]
 8110d38:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8110d3a:	2300      	movs	r3, #0
 8110d3c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8110d3e:	4b54      	ldr	r3, [pc, #336]	@ (8110e90 <RCCEx_PLL2_Config+0x160>)
 8110d40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8110d42:	f003 0303 	and.w	r3, r3, #3
 8110d46:	2b03      	cmp	r3, #3
 8110d48:	d101      	bne.n	8110d4e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8110d4a:	2301      	movs	r3, #1
 8110d4c:	e09b      	b.n	8110e86 <RCCEx_PLL2_Config+0x156>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8110d4e:	4b50      	ldr	r3, [pc, #320]	@ (8110e90 <RCCEx_PLL2_Config+0x160>)
 8110d50:	681b      	ldr	r3, [r3, #0]
 8110d52:	4a4f      	ldr	r2, [pc, #316]	@ (8110e90 <RCCEx_PLL2_Config+0x160>)
 8110d54:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8110d58:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8110d5a:	f7fb f999 	bl	810c090 <HAL_GetTick>
 8110d5e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8110d60:	e008      	b.n	8110d74 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8110d62:	f7fb f995 	bl	810c090 <HAL_GetTick>
 8110d66:	4602      	mov	r2, r0
 8110d68:	68bb      	ldr	r3, [r7, #8]
 8110d6a:	1ad3      	subs	r3, r2, r3
 8110d6c:	2b02      	cmp	r3, #2
 8110d6e:	d901      	bls.n	8110d74 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8110d70:	2303      	movs	r3, #3
 8110d72:	e088      	b.n	8110e86 <RCCEx_PLL2_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8110d74:	4b46      	ldr	r3, [pc, #280]	@ (8110e90 <RCCEx_PLL2_Config+0x160>)
 8110d76:	681b      	ldr	r3, [r3, #0]
 8110d78:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8110d7c:	2b00      	cmp	r3, #0
 8110d7e:	d1f0      	bne.n	8110d62 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8110d80:	4b43      	ldr	r3, [pc, #268]	@ (8110e90 <RCCEx_PLL2_Config+0x160>)
 8110d82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8110d84:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8110d88:	687b      	ldr	r3, [r7, #4]
 8110d8a:	681b      	ldr	r3, [r3, #0]
 8110d8c:	031b      	lsls	r3, r3, #12
 8110d8e:	4940      	ldr	r1, [pc, #256]	@ (8110e90 <RCCEx_PLL2_Config+0x160>)
 8110d90:	4313      	orrs	r3, r2
 8110d92:	628b      	str	r3, [r1, #40]	@ 0x28
 8110d94:	687b      	ldr	r3, [r7, #4]
 8110d96:	685b      	ldr	r3, [r3, #4]
 8110d98:	3b01      	subs	r3, #1
 8110d9a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8110d9e:	687b      	ldr	r3, [r7, #4]
 8110da0:	689b      	ldr	r3, [r3, #8]
 8110da2:	3b01      	subs	r3, #1
 8110da4:	025b      	lsls	r3, r3, #9
 8110da6:	b29b      	uxth	r3, r3
 8110da8:	431a      	orrs	r2, r3
 8110daa:	687b      	ldr	r3, [r7, #4]
 8110dac:	68db      	ldr	r3, [r3, #12]
 8110dae:	3b01      	subs	r3, #1
 8110db0:	041b      	lsls	r3, r3, #16
 8110db2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8110db6:	431a      	orrs	r2, r3
 8110db8:	687b      	ldr	r3, [r7, #4]
 8110dba:	691b      	ldr	r3, [r3, #16]
 8110dbc:	3b01      	subs	r3, #1
 8110dbe:	061b      	lsls	r3, r3, #24
 8110dc0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8110dc4:	4932      	ldr	r1, [pc, #200]	@ (8110e90 <RCCEx_PLL2_Config+0x160>)
 8110dc6:	4313      	orrs	r3, r2
 8110dc8:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8110dca:	4b31      	ldr	r3, [pc, #196]	@ (8110e90 <RCCEx_PLL2_Config+0x160>)
 8110dcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8110dce:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8110dd2:	687b      	ldr	r3, [r7, #4]
 8110dd4:	695b      	ldr	r3, [r3, #20]
 8110dd6:	492e      	ldr	r1, [pc, #184]	@ (8110e90 <RCCEx_PLL2_Config+0x160>)
 8110dd8:	4313      	orrs	r3, r2
 8110dda:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8110ddc:	4b2c      	ldr	r3, [pc, #176]	@ (8110e90 <RCCEx_PLL2_Config+0x160>)
 8110dde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8110de0:	f023 0220 	bic.w	r2, r3, #32
 8110de4:	687b      	ldr	r3, [r7, #4]
 8110de6:	699b      	ldr	r3, [r3, #24]
 8110de8:	4929      	ldr	r1, [pc, #164]	@ (8110e90 <RCCEx_PLL2_Config+0x160>)
 8110dea:	4313      	orrs	r3, r2
 8110dec:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8110dee:	4b28      	ldr	r3, [pc, #160]	@ (8110e90 <RCCEx_PLL2_Config+0x160>)
 8110df0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8110df2:	4a27      	ldr	r2, [pc, #156]	@ (8110e90 <RCCEx_PLL2_Config+0x160>)
 8110df4:	f023 0310 	bic.w	r3, r3, #16
 8110df8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8110dfa:	4b25      	ldr	r3, [pc, #148]	@ (8110e90 <RCCEx_PLL2_Config+0x160>)
 8110dfc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8110dfe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8110e02:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8110e06:	687a      	ldr	r2, [r7, #4]
 8110e08:	69d2      	ldr	r2, [r2, #28]
 8110e0a:	00d2      	lsls	r2, r2, #3
 8110e0c:	4920      	ldr	r1, [pc, #128]	@ (8110e90 <RCCEx_PLL2_Config+0x160>)
 8110e0e:	4313      	orrs	r3, r2
 8110e10:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8110e12:	4b1f      	ldr	r3, [pc, #124]	@ (8110e90 <RCCEx_PLL2_Config+0x160>)
 8110e14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8110e16:	4a1e      	ldr	r2, [pc, #120]	@ (8110e90 <RCCEx_PLL2_Config+0x160>)
 8110e18:	f043 0310 	orr.w	r3, r3, #16
 8110e1c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8110e1e:	683b      	ldr	r3, [r7, #0]
 8110e20:	2b00      	cmp	r3, #0
 8110e22:	d106      	bne.n	8110e32 <RCCEx_PLL2_Config+0x102>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8110e24:	4b1a      	ldr	r3, [pc, #104]	@ (8110e90 <RCCEx_PLL2_Config+0x160>)
 8110e26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8110e28:	4a19      	ldr	r2, [pc, #100]	@ (8110e90 <RCCEx_PLL2_Config+0x160>)
 8110e2a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8110e2e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8110e30:	e00f      	b.n	8110e52 <RCCEx_PLL2_Config+0x122>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8110e32:	683b      	ldr	r3, [r7, #0]
 8110e34:	2b01      	cmp	r3, #1
 8110e36:	d106      	bne.n	8110e46 <RCCEx_PLL2_Config+0x116>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8110e38:	4b15      	ldr	r3, [pc, #84]	@ (8110e90 <RCCEx_PLL2_Config+0x160>)
 8110e3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8110e3c:	4a14      	ldr	r2, [pc, #80]	@ (8110e90 <RCCEx_PLL2_Config+0x160>)
 8110e3e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8110e42:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8110e44:	e005      	b.n	8110e52 <RCCEx_PLL2_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8110e46:	4b12      	ldr	r3, [pc, #72]	@ (8110e90 <RCCEx_PLL2_Config+0x160>)
 8110e48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8110e4a:	4a11      	ldr	r2, [pc, #68]	@ (8110e90 <RCCEx_PLL2_Config+0x160>)
 8110e4c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8110e50:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8110e52:	4b0f      	ldr	r3, [pc, #60]	@ (8110e90 <RCCEx_PLL2_Config+0x160>)
 8110e54:	681b      	ldr	r3, [r3, #0]
 8110e56:	4a0e      	ldr	r2, [pc, #56]	@ (8110e90 <RCCEx_PLL2_Config+0x160>)
 8110e58:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8110e5c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8110e5e:	f7fb f917 	bl	810c090 <HAL_GetTick>
 8110e62:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8110e64:	e008      	b.n	8110e78 <RCCEx_PLL2_Config+0x148>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8110e66:	f7fb f913 	bl	810c090 <HAL_GetTick>
 8110e6a:	4602      	mov	r2, r0
 8110e6c:	68bb      	ldr	r3, [r7, #8]
 8110e6e:	1ad3      	subs	r3, r2, r3
 8110e70:	2b02      	cmp	r3, #2
 8110e72:	d901      	bls.n	8110e78 <RCCEx_PLL2_Config+0x148>
      {
        return HAL_TIMEOUT;
 8110e74:	2303      	movs	r3, #3
 8110e76:	e006      	b.n	8110e86 <RCCEx_PLL2_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8110e78:	4b05      	ldr	r3, [pc, #20]	@ (8110e90 <RCCEx_PLL2_Config+0x160>)
 8110e7a:	681b      	ldr	r3, [r3, #0]
 8110e7c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8110e80:	2b00      	cmp	r3, #0
 8110e82:	d0f0      	beq.n	8110e66 <RCCEx_PLL2_Config+0x136>
    }

  }


  return status;
 8110e84:	7bfb      	ldrb	r3, [r7, #15]
}
 8110e86:	4618      	mov	r0, r3
 8110e88:	3710      	adds	r7, #16
 8110e8a:	46bd      	mov	sp, r7
 8110e8c:	bd80      	pop	{r7, pc}
 8110e8e:	bf00      	nop
 8110e90:	58024400 	.word	0x58024400

08110e94 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8110e94:	b580      	push	{r7, lr}
 8110e96:	b084      	sub	sp, #16
 8110e98:	af00      	add	r7, sp, #0
 8110e9a:	6078      	str	r0, [r7, #4]
 8110e9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8110e9e:	2300      	movs	r3, #0
 8110ea0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8110ea2:	4b54      	ldr	r3, [pc, #336]	@ (8110ff4 <RCCEx_PLL3_Config+0x160>)
 8110ea4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8110ea6:	f003 0303 	and.w	r3, r3, #3
 8110eaa:	2b03      	cmp	r3, #3
 8110eac:	d101      	bne.n	8110eb2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8110eae:	2301      	movs	r3, #1
 8110eb0:	e09b      	b.n	8110fea <RCCEx_PLL3_Config+0x156>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8110eb2:	4b50      	ldr	r3, [pc, #320]	@ (8110ff4 <RCCEx_PLL3_Config+0x160>)
 8110eb4:	681b      	ldr	r3, [r3, #0]
 8110eb6:	4a4f      	ldr	r2, [pc, #316]	@ (8110ff4 <RCCEx_PLL3_Config+0x160>)
 8110eb8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8110ebc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8110ebe:	f7fb f8e7 	bl	810c090 <HAL_GetTick>
 8110ec2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8110ec4:	e008      	b.n	8110ed8 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8110ec6:	f7fb f8e3 	bl	810c090 <HAL_GetTick>
 8110eca:	4602      	mov	r2, r0
 8110ecc:	68bb      	ldr	r3, [r7, #8]
 8110ece:	1ad3      	subs	r3, r2, r3
 8110ed0:	2b02      	cmp	r3, #2
 8110ed2:	d901      	bls.n	8110ed8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8110ed4:	2303      	movs	r3, #3
 8110ed6:	e088      	b.n	8110fea <RCCEx_PLL3_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8110ed8:	4b46      	ldr	r3, [pc, #280]	@ (8110ff4 <RCCEx_PLL3_Config+0x160>)
 8110eda:	681b      	ldr	r3, [r3, #0]
 8110edc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8110ee0:	2b00      	cmp	r3, #0
 8110ee2:	d1f0      	bne.n	8110ec6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8110ee4:	4b43      	ldr	r3, [pc, #268]	@ (8110ff4 <RCCEx_PLL3_Config+0x160>)
 8110ee6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8110ee8:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8110eec:	687b      	ldr	r3, [r7, #4]
 8110eee:	681b      	ldr	r3, [r3, #0]
 8110ef0:	051b      	lsls	r3, r3, #20
 8110ef2:	4940      	ldr	r1, [pc, #256]	@ (8110ff4 <RCCEx_PLL3_Config+0x160>)
 8110ef4:	4313      	orrs	r3, r2
 8110ef6:	628b      	str	r3, [r1, #40]	@ 0x28
 8110ef8:	687b      	ldr	r3, [r7, #4]
 8110efa:	685b      	ldr	r3, [r3, #4]
 8110efc:	3b01      	subs	r3, #1
 8110efe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8110f02:	687b      	ldr	r3, [r7, #4]
 8110f04:	689b      	ldr	r3, [r3, #8]
 8110f06:	3b01      	subs	r3, #1
 8110f08:	025b      	lsls	r3, r3, #9
 8110f0a:	b29b      	uxth	r3, r3
 8110f0c:	431a      	orrs	r2, r3
 8110f0e:	687b      	ldr	r3, [r7, #4]
 8110f10:	68db      	ldr	r3, [r3, #12]
 8110f12:	3b01      	subs	r3, #1
 8110f14:	041b      	lsls	r3, r3, #16
 8110f16:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8110f1a:	431a      	orrs	r2, r3
 8110f1c:	687b      	ldr	r3, [r7, #4]
 8110f1e:	691b      	ldr	r3, [r3, #16]
 8110f20:	3b01      	subs	r3, #1
 8110f22:	061b      	lsls	r3, r3, #24
 8110f24:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8110f28:	4932      	ldr	r1, [pc, #200]	@ (8110ff4 <RCCEx_PLL3_Config+0x160>)
 8110f2a:	4313      	orrs	r3, r2
 8110f2c:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8110f2e:	4b31      	ldr	r3, [pc, #196]	@ (8110ff4 <RCCEx_PLL3_Config+0x160>)
 8110f30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8110f32:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8110f36:	687b      	ldr	r3, [r7, #4]
 8110f38:	695b      	ldr	r3, [r3, #20]
 8110f3a:	492e      	ldr	r1, [pc, #184]	@ (8110ff4 <RCCEx_PLL3_Config+0x160>)
 8110f3c:	4313      	orrs	r3, r2
 8110f3e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8110f40:	4b2c      	ldr	r3, [pc, #176]	@ (8110ff4 <RCCEx_PLL3_Config+0x160>)
 8110f42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8110f44:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8110f48:	687b      	ldr	r3, [r7, #4]
 8110f4a:	699b      	ldr	r3, [r3, #24]
 8110f4c:	4929      	ldr	r1, [pc, #164]	@ (8110ff4 <RCCEx_PLL3_Config+0x160>)
 8110f4e:	4313      	orrs	r3, r2
 8110f50:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8110f52:	4b28      	ldr	r3, [pc, #160]	@ (8110ff4 <RCCEx_PLL3_Config+0x160>)
 8110f54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8110f56:	4a27      	ldr	r2, [pc, #156]	@ (8110ff4 <RCCEx_PLL3_Config+0x160>)
 8110f58:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8110f5c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8110f5e:	4b25      	ldr	r3, [pc, #148]	@ (8110ff4 <RCCEx_PLL3_Config+0x160>)
 8110f60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8110f62:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8110f66:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8110f6a:	687a      	ldr	r2, [r7, #4]
 8110f6c:	69d2      	ldr	r2, [r2, #28]
 8110f6e:	00d2      	lsls	r2, r2, #3
 8110f70:	4920      	ldr	r1, [pc, #128]	@ (8110ff4 <RCCEx_PLL3_Config+0x160>)
 8110f72:	4313      	orrs	r3, r2
 8110f74:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8110f76:	4b1f      	ldr	r3, [pc, #124]	@ (8110ff4 <RCCEx_PLL3_Config+0x160>)
 8110f78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8110f7a:	4a1e      	ldr	r2, [pc, #120]	@ (8110ff4 <RCCEx_PLL3_Config+0x160>)
 8110f7c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8110f80:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8110f82:	683b      	ldr	r3, [r7, #0]
 8110f84:	2b00      	cmp	r3, #0
 8110f86:	d106      	bne.n	8110f96 <RCCEx_PLL3_Config+0x102>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8110f88:	4b1a      	ldr	r3, [pc, #104]	@ (8110ff4 <RCCEx_PLL3_Config+0x160>)
 8110f8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8110f8c:	4a19      	ldr	r2, [pc, #100]	@ (8110ff4 <RCCEx_PLL3_Config+0x160>)
 8110f8e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8110f92:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8110f94:	e00f      	b.n	8110fb6 <RCCEx_PLL3_Config+0x122>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8110f96:	683b      	ldr	r3, [r7, #0]
 8110f98:	2b01      	cmp	r3, #1
 8110f9a:	d106      	bne.n	8110faa <RCCEx_PLL3_Config+0x116>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8110f9c:	4b15      	ldr	r3, [pc, #84]	@ (8110ff4 <RCCEx_PLL3_Config+0x160>)
 8110f9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8110fa0:	4a14      	ldr	r2, [pc, #80]	@ (8110ff4 <RCCEx_PLL3_Config+0x160>)
 8110fa2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8110fa6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8110fa8:	e005      	b.n	8110fb6 <RCCEx_PLL3_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8110faa:	4b12      	ldr	r3, [pc, #72]	@ (8110ff4 <RCCEx_PLL3_Config+0x160>)
 8110fac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8110fae:	4a11      	ldr	r2, [pc, #68]	@ (8110ff4 <RCCEx_PLL3_Config+0x160>)
 8110fb0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8110fb4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8110fb6:	4b0f      	ldr	r3, [pc, #60]	@ (8110ff4 <RCCEx_PLL3_Config+0x160>)
 8110fb8:	681b      	ldr	r3, [r3, #0]
 8110fba:	4a0e      	ldr	r2, [pc, #56]	@ (8110ff4 <RCCEx_PLL3_Config+0x160>)
 8110fbc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8110fc0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8110fc2:	f7fb f865 	bl	810c090 <HAL_GetTick>
 8110fc6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8110fc8:	e008      	b.n	8110fdc <RCCEx_PLL3_Config+0x148>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8110fca:	f7fb f861 	bl	810c090 <HAL_GetTick>
 8110fce:	4602      	mov	r2, r0
 8110fd0:	68bb      	ldr	r3, [r7, #8]
 8110fd2:	1ad3      	subs	r3, r2, r3
 8110fd4:	2b02      	cmp	r3, #2
 8110fd6:	d901      	bls.n	8110fdc <RCCEx_PLL3_Config+0x148>
      {
        return HAL_TIMEOUT;
 8110fd8:	2303      	movs	r3, #3
 8110fda:	e006      	b.n	8110fea <RCCEx_PLL3_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8110fdc:	4b05      	ldr	r3, [pc, #20]	@ (8110ff4 <RCCEx_PLL3_Config+0x160>)
 8110fde:	681b      	ldr	r3, [r3, #0]
 8110fe0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8110fe4:	2b00      	cmp	r3, #0
 8110fe6:	d0f0      	beq.n	8110fca <RCCEx_PLL3_Config+0x136>
    }

  }


  return status;
 8110fe8:	7bfb      	ldrb	r3, [r7, #15]
}
 8110fea:	4618      	mov	r0, r3
 8110fec:	3710      	adds	r7, #16
 8110fee:	46bd      	mov	sp, r7
 8110ff0:	bd80      	pop	{r7, pc}
 8110ff2:	bf00      	nop
 8110ff4:	58024400 	.word	0x58024400

08110ff8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8110ff8:	b580      	push	{r7, lr}
 8110ffa:	b082      	sub	sp, #8
 8110ffc:	af00      	add	r7, sp, #0
 8110ffe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8111000:	687b      	ldr	r3, [r7, #4]
 8111002:	2b00      	cmp	r3, #0
 8111004:	d101      	bne.n	811100a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8111006:	2301      	movs	r3, #1
 8111008:	e049      	b.n	811109e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 811100a:	687b      	ldr	r3, [r7, #4]
 811100c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8111010:	b2db      	uxtb	r3, r3
 8111012:	2b00      	cmp	r3, #0
 8111014:	d106      	bne.n	8111024 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8111016:	687b      	ldr	r3, [r7, #4]
 8111018:	2200      	movs	r2, #0
 811101a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 811101e:	6878      	ldr	r0, [r7, #4]
 8111020:	f000 f841 	bl	81110a6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8111024:	687b      	ldr	r3, [r7, #4]
 8111026:	2202      	movs	r2, #2
 8111028:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 811102c:	687b      	ldr	r3, [r7, #4]
 811102e:	681a      	ldr	r2, [r3, #0]
 8111030:	687b      	ldr	r3, [r7, #4]
 8111032:	3304      	adds	r3, #4
 8111034:	4619      	mov	r1, r3
 8111036:	4610      	mov	r0, r2
 8111038:	f000 f9e8 	bl	811140c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 811103c:	687b      	ldr	r3, [r7, #4]
 811103e:	2201      	movs	r2, #1
 8111040:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8111044:	687b      	ldr	r3, [r7, #4]
 8111046:	2201      	movs	r2, #1
 8111048:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 811104c:	687b      	ldr	r3, [r7, #4]
 811104e:	2201      	movs	r2, #1
 8111050:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8111054:	687b      	ldr	r3, [r7, #4]
 8111056:	2201      	movs	r2, #1
 8111058:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 811105c:	687b      	ldr	r3, [r7, #4]
 811105e:	2201      	movs	r2, #1
 8111060:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8111064:	687b      	ldr	r3, [r7, #4]
 8111066:	2201      	movs	r2, #1
 8111068:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 811106c:	687b      	ldr	r3, [r7, #4]
 811106e:	2201      	movs	r2, #1
 8111070:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8111074:	687b      	ldr	r3, [r7, #4]
 8111076:	2201      	movs	r2, #1
 8111078:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 811107c:	687b      	ldr	r3, [r7, #4]
 811107e:	2201      	movs	r2, #1
 8111080:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8111084:	687b      	ldr	r3, [r7, #4]
 8111086:	2201      	movs	r2, #1
 8111088:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 811108c:	687b      	ldr	r3, [r7, #4]
 811108e:	2201      	movs	r2, #1
 8111090:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8111094:	687b      	ldr	r3, [r7, #4]
 8111096:	2201      	movs	r2, #1
 8111098:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 811109c:	2300      	movs	r3, #0
}
 811109e:	4618      	mov	r0, r3
 81110a0:	3708      	adds	r7, #8
 81110a2:	46bd      	mov	sp, r7
 81110a4:	bd80      	pop	{r7, pc}

081110a6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 81110a6:	b480      	push	{r7}
 81110a8:	b083      	sub	sp, #12
 81110aa:	af00      	add	r7, sp, #0
 81110ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 81110ae:	bf00      	nop
 81110b0:	370c      	adds	r7, #12
 81110b2:	46bd      	mov	sp, r7
 81110b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81110b8:	4770      	bx	lr
	...

081110bc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 81110bc:	b480      	push	{r7}
 81110be:	b085      	sub	sp, #20
 81110c0:	af00      	add	r7, sp, #0
 81110c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 81110c4:	687b      	ldr	r3, [r7, #4]
 81110c6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 81110ca:	b2db      	uxtb	r3, r3
 81110cc:	2b01      	cmp	r3, #1
 81110ce:	d001      	beq.n	81110d4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 81110d0:	2301      	movs	r3, #1
 81110d2:	e054      	b.n	811117e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 81110d4:	687b      	ldr	r3, [r7, #4]
 81110d6:	2202      	movs	r2, #2
 81110d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 81110dc:	687b      	ldr	r3, [r7, #4]
 81110de:	681b      	ldr	r3, [r3, #0]
 81110e0:	68da      	ldr	r2, [r3, #12]
 81110e2:	687b      	ldr	r3, [r7, #4]
 81110e4:	681b      	ldr	r3, [r3, #0]
 81110e6:	f042 0201 	orr.w	r2, r2, #1
 81110ea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 81110ec:	687b      	ldr	r3, [r7, #4]
 81110ee:	681b      	ldr	r3, [r3, #0]
 81110f0:	4a26      	ldr	r2, [pc, #152]	@ (811118c <HAL_TIM_Base_Start_IT+0xd0>)
 81110f2:	4293      	cmp	r3, r2
 81110f4:	d022      	beq.n	811113c <HAL_TIM_Base_Start_IT+0x80>
 81110f6:	687b      	ldr	r3, [r7, #4]
 81110f8:	681b      	ldr	r3, [r3, #0]
 81110fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 81110fe:	d01d      	beq.n	811113c <HAL_TIM_Base_Start_IT+0x80>
 8111100:	687b      	ldr	r3, [r7, #4]
 8111102:	681b      	ldr	r3, [r3, #0]
 8111104:	4a22      	ldr	r2, [pc, #136]	@ (8111190 <HAL_TIM_Base_Start_IT+0xd4>)
 8111106:	4293      	cmp	r3, r2
 8111108:	d018      	beq.n	811113c <HAL_TIM_Base_Start_IT+0x80>
 811110a:	687b      	ldr	r3, [r7, #4]
 811110c:	681b      	ldr	r3, [r3, #0]
 811110e:	4a21      	ldr	r2, [pc, #132]	@ (8111194 <HAL_TIM_Base_Start_IT+0xd8>)
 8111110:	4293      	cmp	r3, r2
 8111112:	d013      	beq.n	811113c <HAL_TIM_Base_Start_IT+0x80>
 8111114:	687b      	ldr	r3, [r7, #4]
 8111116:	681b      	ldr	r3, [r3, #0]
 8111118:	4a1f      	ldr	r2, [pc, #124]	@ (8111198 <HAL_TIM_Base_Start_IT+0xdc>)
 811111a:	4293      	cmp	r3, r2
 811111c:	d00e      	beq.n	811113c <HAL_TIM_Base_Start_IT+0x80>
 811111e:	687b      	ldr	r3, [r7, #4]
 8111120:	681b      	ldr	r3, [r3, #0]
 8111122:	4a1e      	ldr	r2, [pc, #120]	@ (811119c <HAL_TIM_Base_Start_IT+0xe0>)
 8111124:	4293      	cmp	r3, r2
 8111126:	d009      	beq.n	811113c <HAL_TIM_Base_Start_IT+0x80>
 8111128:	687b      	ldr	r3, [r7, #4]
 811112a:	681b      	ldr	r3, [r3, #0]
 811112c:	4a1c      	ldr	r2, [pc, #112]	@ (81111a0 <HAL_TIM_Base_Start_IT+0xe4>)
 811112e:	4293      	cmp	r3, r2
 8111130:	d004      	beq.n	811113c <HAL_TIM_Base_Start_IT+0x80>
 8111132:	687b      	ldr	r3, [r7, #4]
 8111134:	681b      	ldr	r3, [r3, #0]
 8111136:	4a1b      	ldr	r2, [pc, #108]	@ (81111a4 <HAL_TIM_Base_Start_IT+0xe8>)
 8111138:	4293      	cmp	r3, r2
 811113a:	d115      	bne.n	8111168 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 811113c:	687b      	ldr	r3, [r7, #4]
 811113e:	681b      	ldr	r3, [r3, #0]
 8111140:	689a      	ldr	r2, [r3, #8]
 8111142:	4b19      	ldr	r3, [pc, #100]	@ (81111a8 <HAL_TIM_Base_Start_IT+0xec>)
 8111144:	4013      	ands	r3, r2
 8111146:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8111148:	68fb      	ldr	r3, [r7, #12]
 811114a:	2b06      	cmp	r3, #6
 811114c:	d015      	beq.n	811117a <HAL_TIM_Base_Start_IT+0xbe>
 811114e:	68fb      	ldr	r3, [r7, #12]
 8111150:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8111154:	d011      	beq.n	811117a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8111156:	687b      	ldr	r3, [r7, #4]
 8111158:	681b      	ldr	r3, [r3, #0]
 811115a:	681a      	ldr	r2, [r3, #0]
 811115c:	687b      	ldr	r3, [r7, #4]
 811115e:	681b      	ldr	r3, [r3, #0]
 8111160:	f042 0201 	orr.w	r2, r2, #1
 8111164:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8111166:	e008      	b.n	811117a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8111168:	687b      	ldr	r3, [r7, #4]
 811116a:	681b      	ldr	r3, [r3, #0]
 811116c:	681a      	ldr	r2, [r3, #0]
 811116e:	687b      	ldr	r3, [r7, #4]
 8111170:	681b      	ldr	r3, [r3, #0]
 8111172:	f042 0201 	orr.w	r2, r2, #1
 8111176:	601a      	str	r2, [r3, #0]
 8111178:	e000      	b.n	811117c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 811117a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 811117c:	2300      	movs	r3, #0
}
 811117e:	4618      	mov	r0, r3
 8111180:	3714      	adds	r7, #20
 8111182:	46bd      	mov	sp, r7
 8111184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8111188:	4770      	bx	lr
 811118a:	bf00      	nop
 811118c:	40010000 	.word	0x40010000
 8111190:	40000400 	.word	0x40000400
 8111194:	40000800 	.word	0x40000800
 8111198:	40000c00 	.word	0x40000c00
 811119c:	40010400 	.word	0x40010400
 81111a0:	40001800 	.word	0x40001800
 81111a4:	40014000 	.word	0x40014000
 81111a8:	00010007 	.word	0x00010007

081111ac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 81111ac:	b580      	push	{r7, lr}
 81111ae:	b084      	sub	sp, #16
 81111b0:	af00      	add	r7, sp, #0
 81111b2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 81111b4:	687b      	ldr	r3, [r7, #4]
 81111b6:	681b      	ldr	r3, [r3, #0]
 81111b8:	68db      	ldr	r3, [r3, #12]
 81111ba:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 81111bc:	687b      	ldr	r3, [r7, #4]
 81111be:	681b      	ldr	r3, [r3, #0]
 81111c0:	691b      	ldr	r3, [r3, #16]
 81111c2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 81111c4:	68bb      	ldr	r3, [r7, #8]
 81111c6:	f003 0302 	and.w	r3, r3, #2
 81111ca:	2b00      	cmp	r3, #0
 81111cc:	d020      	beq.n	8111210 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 81111ce:	68fb      	ldr	r3, [r7, #12]
 81111d0:	f003 0302 	and.w	r3, r3, #2
 81111d4:	2b00      	cmp	r3, #0
 81111d6:	d01b      	beq.n	8111210 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 81111d8:	687b      	ldr	r3, [r7, #4]
 81111da:	681b      	ldr	r3, [r3, #0]
 81111dc:	f06f 0202 	mvn.w	r2, #2
 81111e0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 81111e2:	687b      	ldr	r3, [r7, #4]
 81111e4:	2201      	movs	r2, #1
 81111e6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 81111e8:	687b      	ldr	r3, [r7, #4]
 81111ea:	681b      	ldr	r3, [r3, #0]
 81111ec:	699b      	ldr	r3, [r3, #24]
 81111ee:	f003 0303 	and.w	r3, r3, #3
 81111f2:	2b00      	cmp	r3, #0
 81111f4:	d003      	beq.n	81111fe <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 81111f6:	6878      	ldr	r0, [r7, #4]
 81111f8:	f000 f8e9 	bl	81113ce <HAL_TIM_IC_CaptureCallback>
 81111fc:	e005      	b.n	811120a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 81111fe:	6878      	ldr	r0, [r7, #4]
 8111200:	f000 f8db 	bl	81113ba <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8111204:	6878      	ldr	r0, [r7, #4]
 8111206:	f000 f8ec 	bl	81113e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 811120a:	687b      	ldr	r3, [r7, #4]
 811120c:	2200      	movs	r2, #0
 811120e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8111210:	68bb      	ldr	r3, [r7, #8]
 8111212:	f003 0304 	and.w	r3, r3, #4
 8111216:	2b00      	cmp	r3, #0
 8111218:	d020      	beq.n	811125c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 811121a:	68fb      	ldr	r3, [r7, #12]
 811121c:	f003 0304 	and.w	r3, r3, #4
 8111220:	2b00      	cmp	r3, #0
 8111222:	d01b      	beq.n	811125c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8111224:	687b      	ldr	r3, [r7, #4]
 8111226:	681b      	ldr	r3, [r3, #0]
 8111228:	f06f 0204 	mvn.w	r2, #4
 811122c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 811122e:	687b      	ldr	r3, [r7, #4]
 8111230:	2202      	movs	r2, #2
 8111232:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8111234:	687b      	ldr	r3, [r7, #4]
 8111236:	681b      	ldr	r3, [r3, #0]
 8111238:	699b      	ldr	r3, [r3, #24]
 811123a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 811123e:	2b00      	cmp	r3, #0
 8111240:	d003      	beq.n	811124a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8111242:	6878      	ldr	r0, [r7, #4]
 8111244:	f000 f8c3 	bl	81113ce <HAL_TIM_IC_CaptureCallback>
 8111248:	e005      	b.n	8111256 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 811124a:	6878      	ldr	r0, [r7, #4]
 811124c:	f000 f8b5 	bl	81113ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8111250:	6878      	ldr	r0, [r7, #4]
 8111252:	f000 f8c6 	bl	81113e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8111256:	687b      	ldr	r3, [r7, #4]
 8111258:	2200      	movs	r2, #0
 811125a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 811125c:	68bb      	ldr	r3, [r7, #8]
 811125e:	f003 0308 	and.w	r3, r3, #8
 8111262:	2b00      	cmp	r3, #0
 8111264:	d020      	beq.n	81112a8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8111266:	68fb      	ldr	r3, [r7, #12]
 8111268:	f003 0308 	and.w	r3, r3, #8
 811126c:	2b00      	cmp	r3, #0
 811126e:	d01b      	beq.n	81112a8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8111270:	687b      	ldr	r3, [r7, #4]
 8111272:	681b      	ldr	r3, [r3, #0]
 8111274:	f06f 0208 	mvn.w	r2, #8
 8111278:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 811127a:	687b      	ldr	r3, [r7, #4]
 811127c:	2204      	movs	r2, #4
 811127e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8111280:	687b      	ldr	r3, [r7, #4]
 8111282:	681b      	ldr	r3, [r3, #0]
 8111284:	69db      	ldr	r3, [r3, #28]
 8111286:	f003 0303 	and.w	r3, r3, #3
 811128a:	2b00      	cmp	r3, #0
 811128c:	d003      	beq.n	8111296 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 811128e:	6878      	ldr	r0, [r7, #4]
 8111290:	f000 f89d 	bl	81113ce <HAL_TIM_IC_CaptureCallback>
 8111294:	e005      	b.n	81112a2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8111296:	6878      	ldr	r0, [r7, #4]
 8111298:	f000 f88f 	bl	81113ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 811129c:	6878      	ldr	r0, [r7, #4]
 811129e:	f000 f8a0 	bl	81113e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 81112a2:	687b      	ldr	r3, [r7, #4]
 81112a4:	2200      	movs	r2, #0
 81112a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 81112a8:	68bb      	ldr	r3, [r7, #8]
 81112aa:	f003 0310 	and.w	r3, r3, #16
 81112ae:	2b00      	cmp	r3, #0
 81112b0:	d020      	beq.n	81112f4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 81112b2:	68fb      	ldr	r3, [r7, #12]
 81112b4:	f003 0310 	and.w	r3, r3, #16
 81112b8:	2b00      	cmp	r3, #0
 81112ba:	d01b      	beq.n	81112f4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 81112bc:	687b      	ldr	r3, [r7, #4]
 81112be:	681b      	ldr	r3, [r3, #0]
 81112c0:	f06f 0210 	mvn.w	r2, #16
 81112c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 81112c6:	687b      	ldr	r3, [r7, #4]
 81112c8:	2208      	movs	r2, #8
 81112ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 81112cc:	687b      	ldr	r3, [r7, #4]
 81112ce:	681b      	ldr	r3, [r3, #0]
 81112d0:	69db      	ldr	r3, [r3, #28]
 81112d2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 81112d6:	2b00      	cmp	r3, #0
 81112d8:	d003      	beq.n	81112e2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 81112da:	6878      	ldr	r0, [r7, #4]
 81112dc:	f000 f877 	bl	81113ce <HAL_TIM_IC_CaptureCallback>
 81112e0:	e005      	b.n	81112ee <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 81112e2:	6878      	ldr	r0, [r7, #4]
 81112e4:	f000 f869 	bl	81113ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 81112e8:	6878      	ldr	r0, [r7, #4]
 81112ea:	f000 f87a 	bl	81113e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 81112ee:	687b      	ldr	r3, [r7, #4]
 81112f0:	2200      	movs	r2, #0
 81112f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 81112f4:	68bb      	ldr	r3, [r7, #8]
 81112f6:	f003 0301 	and.w	r3, r3, #1
 81112fa:	2b00      	cmp	r3, #0
 81112fc:	d00c      	beq.n	8111318 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 81112fe:	68fb      	ldr	r3, [r7, #12]
 8111300:	f003 0301 	and.w	r3, r3, #1
 8111304:	2b00      	cmp	r3, #0
 8111306:	d007      	beq.n	8111318 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8111308:	687b      	ldr	r3, [r7, #4]
 811130a:	681b      	ldr	r3, [r3, #0]
 811130c:	f06f 0201 	mvn.w	r2, #1
 8111310:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8111312:	6878      	ldr	r0, [r7, #4]
 8111314:	f7f0 fa08 	bl	8101728 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8111318:	68bb      	ldr	r3, [r7, #8]
 811131a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 811131e:	2b00      	cmp	r3, #0
 8111320:	d104      	bne.n	811132c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8111322:	68bb      	ldr	r3, [r7, #8]
 8111324:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8111328:	2b00      	cmp	r3, #0
 811132a:	d00c      	beq.n	8111346 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 811132c:	68fb      	ldr	r3, [r7, #12]
 811132e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8111332:	2b00      	cmp	r3, #0
 8111334:	d007      	beq.n	8111346 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8111336:	687b      	ldr	r3, [r7, #4]
 8111338:	681b      	ldr	r3, [r3, #0]
 811133a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 811133e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8111340:	6878      	ldr	r0, [r7, #4]
 8111342:	f000 f913 	bl	811156c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8111346:	68bb      	ldr	r3, [r7, #8]
 8111348:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 811134c:	2b00      	cmp	r3, #0
 811134e:	d00c      	beq.n	811136a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8111350:	68fb      	ldr	r3, [r7, #12]
 8111352:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8111356:	2b00      	cmp	r3, #0
 8111358:	d007      	beq.n	811136a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 811135a:	687b      	ldr	r3, [r7, #4]
 811135c:	681b      	ldr	r3, [r3, #0]
 811135e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8111362:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8111364:	6878      	ldr	r0, [r7, #4]
 8111366:	f000 f90b 	bl	8111580 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 811136a:	68bb      	ldr	r3, [r7, #8]
 811136c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8111370:	2b00      	cmp	r3, #0
 8111372:	d00c      	beq.n	811138e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8111374:	68fb      	ldr	r3, [r7, #12]
 8111376:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 811137a:	2b00      	cmp	r3, #0
 811137c:	d007      	beq.n	811138e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 811137e:	687b      	ldr	r3, [r7, #4]
 8111380:	681b      	ldr	r3, [r3, #0]
 8111382:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8111386:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8111388:	6878      	ldr	r0, [r7, #4]
 811138a:	f000 f834 	bl	81113f6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 811138e:	68bb      	ldr	r3, [r7, #8]
 8111390:	f003 0320 	and.w	r3, r3, #32
 8111394:	2b00      	cmp	r3, #0
 8111396:	d00c      	beq.n	81113b2 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8111398:	68fb      	ldr	r3, [r7, #12]
 811139a:	f003 0320 	and.w	r3, r3, #32
 811139e:	2b00      	cmp	r3, #0
 81113a0:	d007      	beq.n	81113b2 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 81113a2:	687b      	ldr	r3, [r7, #4]
 81113a4:	681b      	ldr	r3, [r3, #0]
 81113a6:	f06f 0220 	mvn.w	r2, #32
 81113aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 81113ac:	6878      	ldr	r0, [r7, #4]
 81113ae:	f000 f8d3 	bl	8111558 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 81113b2:	bf00      	nop
 81113b4:	3710      	adds	r7, #16
 81113b6:	46bd      	mov	sp, r7
 81113b8:	bd80      	pop	{r7, pc}

081113ba <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 81113ba:	b480      	push	{r7}
 81113bc:	b083      	sub	sp, #12
 81113be:	af00      	add	r7, sp, #0
 81113c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 81113c2:	bf00      	nop
 81113c4:	370c      	adds	r7, #12
 81113c6:	46bd      	mov	sp, r7
 81113c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81113cc:	4770      	bx	lr

081113ce <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 81113ce:	b480      	push	{r7}
 81113d0:	b083      	sub	sp, #12
 81113d2:	af00      	add	r7, sp, #0
 81113d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 81113d6:	bf00      	nop
 81113d8:	370c      	adds	r7, #12
 81113da:	46bd      	mov	sp, r7
 81113dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 81113e0:	4770      	bx	lr

081113e2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 81113e2:	b480      	push	{r7}
 81113e4:	b083      	sub	sp, #12
 81113e6:	af00      	add	r7, sp, #0
 81113e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 81113ea:	bf00      	nop
 81113ec:	370c      	adds	r7, #12
 81113ee:	46bd      	mov	sp, r7
 81113f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81113f4:	4770      	bx	lr

081113f6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 81113f6:	b480      	push	{r7}
 81113f8:	b083      	sub	sp, #12
 81113fa:	af00      	add	r7, sp, #0
 81113fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 81113fe:	bf00      	nop
 8111400:	370c      	adds	r7, #12
 8111402:	46bd      	mov	sp, r7
 8111404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8111408:	4770      	bx	lr
	...

0811140c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 811140c:	b480      	push	{r7}
 811140e:	b085      	sub	sp, #20
 8111410:	af00      	add	r7, sp, #0
 8111412:	6078      	str	r0, [r7, #4]
 8111414:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8111416:	687b      	ldr	r3, [r7, #4]
 8111418:	681b      	ldr	r3, [r3, #0]
 811141a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 811141c:	687b      	ldr	r3, [r7, #4]
 811141e:	4a46      	ldr	r2, [pc, #280]	@ (8111538 <TIM_Base_SetConfig+0x12c>)
 8111420:	4293      	cmp	r3, r2
 8111422:	d013      	beq.n	811144c <TIM_Base_SetConfig+0x40>
 8111424:	687b      	ldr	r3, [r7, #4]
 8111426:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 811142a:	d00f      	beq.n	811144c <TIM_Base_SetConfig+0x40>
 811142c:	687b      	ldr	r3, [r7, #4]
 811142e:	4a43      	ldr	r2, [pc, #268]	@ (811153c <TIM_Base_SetConfig+0x130>)
 8111430:	4293      	cmp	r3, r2
 8111432:	d00b      	beq.n	811144c <TIM_Base_SetConfig+0x40>
 8111434:	687b      	ldr	r3, [r7, #4]
 8111436:	4a42      	ldr	r2, [pc, #264]	@ (8111540 <TIM_Base_SetConfig+0x134>)
 8111438:	4293      	cmp	r3, r2
 811143a:	d007      	beq.n	811144c <TIM_Base_SetConfig+0x40>
 811143c:	687b      	ldr	r3, [r7, #4]
 811143e:	4a41      	ldr	r2, [pc, #260]	@ (8111544 <TIM_Base_SetConfig+0x138>)
 8111440:	4293      	cmp	r3, r2
 8111442:	d003      	beq.n	811144c <TIM_Base_SetConfig+0x40>
 8111444:	687b      	ldr	r3, [r7, #4]
 8111446:	4a40      	ldr	r2, [pc, #256]	@ (8111548 <TIM_Base_SetConfig+0x13c>)
 8111448:	4293      	cmp	r3, r2
 811144a:	d108      	bne.n	811145e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 811144c:	68fb      	ldr	r3, [r7, #12]
 811144e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8111452:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8111454:	683b      	ldr	r3, [r7, #0]
 8111456:	685b      	ldr	r3, [r3, #4]
 8111458:	68fa      	ldr	r2, [r7, #12]
 811145a:	4313      	orrs	r3, r2
 811145c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 811145e:	687b      	ldr	r3, [r7, #4]
 8111460:	4a35      	ldr	r2, [pc, #212]	@ (8111538 <TIM_Base_SetConfig+0x12c>)
 8111462:	4293      	cmp	r3, r2
 8111464:	d01f      	beq.n	81114a6 <TIM_Base_SetConfig+0x9a>
 8111466:	687b      	ldr	r3, [r7, #4]
 8111468:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 811146c:	d01b      	beq.n	81114a6 <TIM_Base_SetConfig+0x9a>
 811146e:	687b      	ldr	r3, [r7, #4]
 8111470:	4a32      	ldr	r2, [pc, #200]	@ (811153c <TIM_Base_SetConfig+0x130>)
 8111472:	4293      	cmp	r3, r2
 8111474:	d017      	beq.n	81114a6 <TIM_Base_SetConfig+0x9a>
 8111476:	687b      	ldr	r3, [r7, #4]
 8111478:	4a31      	ldr	r2, [pc, #196]	@ (8111540 <TIM_Base_SetConfig+0x134>)
 811147a:	4293      	cmp	r3, r2
 811147c:	d013      	beq.n	81114a6 <TIM_Base_SetConfig+0x9a>
 811147e:	687b      	ldr	r3, [r7, #4]
 8111480:	4a30      	ldr	r2, [pc, #192]	@ (8111544 <TIM_Base_SetConfig+0x138>)
 8111482:	4293      	cmp	r3, r2
 8111484:	d00f      	beq.n	81114a6 <TIM_Base_SetConfig+0x9a>
 8111486:	687b      	ldr	r3, [r7, #4]
 8111488:	4a2f      	ldr	r2, [pc, #188]	@ (8111548 <TIM_Base_SetConfig+0x13c>)
 811148a:	4293      	cmp	r3, r2
 811148c:	d00b      	beq.n	81114a6 <TIM_Base_SetConfig+0x9a>
 811148e:	687b      	ldr	r3, [r7, #4]
 8111490:	4a2e      	ldr	r2, [pc, #184]	@ (811154c <TIM_Base_SetConfig+0x140>)
 8111492:	4293      	cmp	r3, r2
 8111494:	d007      	beq.n	81114a6 <TIM_Base_SetConfig+0x9a>
 8111496:	687b      	ldr	r3, [r7, #4]
 8111498:	4a2d      	ldr	r2, [pc, #180]	@ (8111550 <TIM_Base_SetConfig+0x144>)
 811149a:	4293      	cmp	r3, r2
 811149c:	d003      	beq.n	81114a6 <TIM_Base_SetConfig+0x9a>
 811149e:	687b      	ldr	r3, [r7, #4]
 81114a0:	4a2c      	ldr	r2, [pc, #176]	@ (8111554 <TIM_Base_SetConfig+0x148>)
 81114a2:	4293      	cmp	r3, r2
 81114a4:	d108      	bne.n	81114b8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 81114a6:	68fb      	ldr	r3, [r7, #12]
 81114a8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 81114ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 81114ae:	683b      	ldr	r3, [r7, #0]
 81114b0:	68db      	ldr	r3, [r3, #12]
 81114b2:	68fa      	ldr	r2, [r7, #12]
 81114b4:	4313      	orrs	r3, r2
 81114b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 81114b8:	68fb      	ldr	r3, [r7, #12]
 81114ba:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 81114be:	683b      	ldr	r3, [r7, #0]
 81114c0:	695b      	ldr	r3, [r3, #20]
 81114c2:	4313      	orrs	r3, r2
 81114c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 81114c6:	687b      	ldr	r3, [r7, #4]
 81114c8:	68fa      	ldr	r2, [r7, #12]
 81114ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 81114cc:	683b      	ldr	r3, [r7, #0]
 81114ce:	689a      	ldr	r2, [r3, #8]
 81114d0:	687b      	ldr	r3, [r7, #4]
 81114d2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 81114d4:	683b      	ldr	r3, [r7, #0]
 81114d6:	681a      	ldr	r2, [r3, #0]
 81114d8:	687b      	ldr	r3, [r7, #4]
 81114da:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 81114dc:	687b      	ldr	r3, [r7, #4]
 81114de:	4a16      	ldr	r2, [pc, #88]	@ (8111538 <TIM_Base_SetConfig+0x12c>)
 81114e0:	4293      	cmp	r3, r2
 81114e2:	d00f      	beq.n	8111504 <TIM_Base_SetConfig+0xf8>
 81114e4:	687b      	ldr	r3, [r7, #4]
 81114e6:	4a18      	ldr	r2, [pc, #96]	@ (8111548 <TIM_Base_SetConfig+0x13c>)
 81114e8:	4293      	cmp	r3, r2
 81114ea:	d00b      	beq.n	8111504 <TIM_Base_SetConfig+0xf8>
 81114ec:	687b      	ldr	r3, [r7, #4]
 81114ee:	4a17      	ldr	r2, [pc, #92]	@ (811154c <TIM_Base_SetConfig+0x140>)
 81114f0:	4293      	cmp	r3, r2
 81114f2:	d007      	beq.n	8111504 <TIM_Base_SetConfig+0xf8>
 81114f4:	687b      	ldr	r3, [r7, #4]
 81114f6:	4a16      	ldr	r2, [pc, #88]	@ (8111550 <TIM_Base_SetConfig+0x144>)
 81114f8:	4293      	cmp	r3, r2
 81114fa:	d003      	beq.n	8111504 <TIM_Base_SetConfig+0xf8>
 81114fc:	687b      	ldr	r3, [r7, #4]
 81114fe:	4a15      	ldr	r2, [pc, #84]	@ (8111554 <TIM_Base_SetConfig+0x148>)
 8111500:	4293      	cmp	r3, r2
 8111502:	d103      	bne.n	811150c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8111504:	683b      	ldr	r3, [r7, #0]
 8111506:	691a      	ldr	r2, [r3, #16]
 8111508:	687b      	ldr	r3, [r7, #4]
 811150a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 811150c:	687b      	ldr	r3, [r7, #4]
 811150e:	2201      	movs	r2, #1
 8111510:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8111512:	687b      	ldr	r3, [r7, #4]
 8111514:	691b      	ldr	r3, [r3, #16]
 8111516:	f003 0301 	and.w	r3, r3, #1
 811151a:	2b01      	cmp	r3, #1
 811151c:	d105      	bne.n	811152a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 811151e:	687b      	ldr	r3, [r7, #4]
 8111520:	691b      	ldr	r3, [r3, #16]
 8111522:	f023 0201 	bic.w	r2, r3, #1
 8111526:	687b      	ldr	r3, [r7, #4]
 8111528:	611a      	str	r2, [r3, #16]
  }
}
 811152a:	bf00      	nop
 811152c:	3714      	adds	r7, #20
 811152e:	46bd      	mov	sp, r7
 8111530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8111534:	4770      	bx	lr
 8111536:	bf00      	nop
 8111538:	40010000 	.word	0x40010000
 811153c:	40000400 	.word	0x40000400
 8111540:	40000800 	.word	0x40000800
 8111544:	40000c00 	.word	0x40000c00
 8111548:	40010400 	.word	0x40010400
 811154c:	40014000 	.word	0x40014000
 8111550:	40014400 	.word	0x40014400
 8111554:	40014800 	.word	0x40014800

08111558 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8111558:	b480      	push	{r7}
 811155a:	b083      	sub	sp, #12
 811155c:	af00      	add	r7, sp, #0
 811155e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8111560:	bf00      	nop
 8111562:	370c      	adds	r7, #12
 8111564:	46bd      	mov	sp, r7
 8111566:	f85d 7b04 	ldr.w	r7, [sp], #4
 811156a:	4770      	bx	lr

0811156c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 811156c:	b480      	push	{r7}
 811156e:	b083      	sub	sp, #12
 8111570:	af00      	add	r7, sp, #0
 8111572:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8111574:	bf00      	nop
 8111576:	370c      	adds	r7, #12
 8111578:	46bd      	mov	sp, r7
 811157a:	f85d 7b04 	ldr.w	r7, [sp], #4
 811157e:	4770      	bx	lr

08111580 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8111580:	b480      	push	{r7}
 8111582:	b083      	sub	sp, #12
 8111584:	af00      	add	r7, sp, #0
 8111586:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8111588:	bf00      	nop
 811158a:	370c      	adds	r7, #12
 811158c:	46bd      	mov	sp, r7
 811158e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8111592:	4770      	bx	lr

08111594 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8111594:	b580      	push	{r7, lr}
 8111596:	b082      	sub	sp, #8
 8111598:	af00      	add	r7, sp, #0
 811159a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 811159c:	687b      	ldr	r3, [r7, #4]
 811159e:	2b00      	cmp	r3, #0
 81115a0:	d101      	bne.n	81115a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 81115a2:	2301      	movs	r3, #1
 81115a4:	e042      	b.n	811162c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 81115a6:	687b      	ldr	r3, [r7, #4]
 81115a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 81115ac:	2b00      	cmp	r3, #0
 81115ae:	d106      	bne.n	81115be <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 81115b0:	687b      	ldr	r3, [r7, #4]
 81115b2:	2200      	movs	r2, #0
 81115b4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 81115b8:	6878      	ldr	r0, [r7, #4]
 81115ba:	f7f1 fd1b 	bl	8102ff4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 81115be:	687b      	ldr	r3, [r7, #4]
 81115c0:	2224      	movs	r2, #36	@ 0x24
 81115c2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 81115c6:	687b      	ldr	r3, [r7, #4]
 81115c8:	681b      	ldr	r3, [r3, #0]
 81115ca:	681a      	ldr	r2, [r3, #0]
 81115cc:	687b      	ldr	r3, [r7, #4]
 81115ce:	681b      	ldr	r3, [r3, #0]
 81115d0:	f022 0201 	bic.w	r2, r2, #1
 81115d4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 81115d6:	687b      	ldr	r3, [r7, #4]
 81115d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81115da:	2b00      	cmp	r3, #0
 81115dc:	d002      	beq.n	81115e4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 81115de:	6878      	ldr	r0, [r7, #4]
 81115e0:	f000 fe1e 	bl	8112220 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 81115e4:	6878      	ldr	r0, [r7, #4]
 81115e6:	f000 f8b3 	bl	8111750 <UART_SetConfig>
 81115ea:	4603      	mov	r3, r0
 81115ec:	2b01      	cmp	r3, #1
 81115ee:	d101      	bne.n	81115f4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 81115f0:	2301      	movs	r3, #1
 81115f2:	e01b      	b.n	811162c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 81115f4:	687b      	ldr	r3, [r7, #4]
 81115f6:	681b      	ldr	r3, [r3, #0]
 81115f8:	685a      	ldr	r2, [r3, #4]
 81115fa:	687b      	ldr	r3, [r7, #4]
 81115fc:	681b      	ldr	r3, [r3, #0]
 81115fe:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8111602:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8111604:	687b      	ldr	r3, [r7, #4]
 8111606:	681b      	ldr	r3, [r3, #0]
 8111608:	689a      	ldr	r2, [r3, #8]
 811160a:	687b      	ldr	r3, [r7, #4]
 811160c:	681b      	ldr	r3, [r3, #0]
 811160e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8111612:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8111614:	687b      	ldr	r3, [r7, #4]
 8111616:	681b      	ldr	r3, [r3, #0]
 8111618:	681a      	ldr	r2, [r3, #0]
 811161a:	687b      	ldr	r3, [r7, #4]
 811161c:	681b      	ldr	r3, [r3, #0]
 811161e:	f042 0201 	orr.w	r2, r2, #1
 8111622:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8111624:	6878      	ldr	r0, [r7, #4]
 8111626:	f000 fe9d 	bl	8112364 <UART_CheckIdleState>
 811162a:	4603      	mov	r3, r0
}
 811162c:	4618      	mov	r0, r3
 811162e:	3708      	adds	r7, #8
 8111630:	46bd      	mov	sp, r7
 8111632:	bd80      	pop	{r7, pc}

08111634 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8111634:	b580      	push	{r7, lr}
 8111636:	b08a      	sub	sp, #40	@ 0x28
 8111638:	af02      	add	r7, sp, #8
 811163a:	60f8      	str	r0, [r7, #12]
 811163c:	60b9      	str	r1, [r7, #8]
 811163e:	603b      	str	r3, [r7, #0]
 8111640:	4613      	mov	r3, r2
 8111642:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8111644:	68fb      	ldr	r3, [r7, #12]
 8111646:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 811164a:	2b20      	cmp	r3, #32
 811164c:	d17b      	bne.n	8111746 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 811164e:	68bb      	ldr	r3, [r7, #8]
 8111650:	2b00      	cmp	r3, #0
 8111652:	d002      	beq.n	811165a <HAL_UART_Transmit+0x26>
 8111654:	88fb      	ldrh	r3, [r7, #6]
 8111656:	2b00      	cmp	r3, #0
 8111658:	d101      	bne.n	811165e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 811165a:	2301      	movs	r3, #1
 811165c:	e074      	b.n	8111748 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 811165e:	68fb      	ldr	r3, [r7, #12]
 8111660:	2200      	movs	r2, #0
 8111662:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8111666:	68fb      	ldr	r3, [r7, #12]
 8111668:	2221      	movs	r2, #33	@ 0x21
 811166a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 811166e:	f7fa fd0f 	bl	810c090 <HAL_GetTick>
 8111672:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8111674:	68fb      	ldr	r3, [r7, #12]
 8111676:	88fa      	ldrh	r2, [r7, #6]
 8111678:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 811167c:	68fb      	ldr	r3, [r7, #12]
 811167e:	88fa      	ldrh	r2, [r7, #6]
 8111680:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8111684:	68fb      	ldr	r3, [r7, #12]
 8111686:	689b      	ldr	r3, [r3, #8]
 8111688:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 811168c:	d108      	bne.n	81116a0 <HAL_UART_Transmit+0x6c>
 811168e:	68fb      	ldr	r3, [r7, #12]
 8111690:	691b      	ldr	r3, [r3, #16]
 8111692:	2b00      	cmp	r3, #0
 8111694:	d104      	bne.n	81116a0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8111696:	2300      	movs	r3, #0
 8111698:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 811169a:	68bb      	ldr	r3, [r7, #8]
 811169c:	61bb      	str	r3, [r7, #24]
 811169e:	e003      	b.n	81116a8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 81116a0:	68bb      	ldr	r3, [r7, #8]
 81116a2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 81116a4:	2300      	movs	r3, #0
 81116a6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 81116a8:	e030      	b.n	811170c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 81116aa:	683b      	ldr	r3, [r7, #0]
 81116ac:	9300      	str	r3, [sp, #0]
 81116ae:	697b      	ldr	r3, [r7, #20]
 81116b0:	2200      	movs	r2, #0
 81116b2:	2180      	movs	r1, #128	@ 0x80
 81116b4:	68f8      	ldr	r0, [r7, #12]
 81116b6:	f000 feff 	bl	81124b8 <UART_WaitOnFlagUntilTimeout>
 81116ba:	4603      	mov	r3, r0
 81116bc:	2b00      	cmp	r3, #0
 81116be:	d005      	beq.n	81116cc <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 81116c0:	68fb      	ldr	r3, [r7, #12]
 81116c2:	2220      	movs	r2, #32
 81116c4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 81116c8:	2303      	movs	r3, #3
 81116ca:	e03d      	b.n	8111748 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 81116cc:	69fb      	ldr	r3, [r7, #28]
 81116ce:	2b00      	cmp	r3, #0
 81116d0:	d10b      	bne.n	81116ea <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 81116d2:	69bb      	ldr	r3, [r7, #24]
 81116d4:	881b      	ldrh	r3, [r3, #0]
 81116d6:	461a      	mov	r2, r3
 81116d8:	68fb      	ldr	r3, [r7, #12]
 81116da:	681b      	ldr	r3, [r3, #0]
 81116dc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 81116e0:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 81116e2:	69bb      	ldr	r3, [r7, #24]
 81116e4:	3302      	adds	r3, #2
 81116e6:	61bb      	str	r3, [r7, #24]
 81116e8:	e007      	b.n	81116fa <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 81116ea:	69fb      	ldr	r3, [r7, #28]
 81116ec:	781a      	ldrb	r2, [r3, #0]
 81116ee:	68fb      	ldr	r3, [r7, #12]
 81116f0:	681b      	ldr	r3, [r3, #0]
 81116f2:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 81116f4:	69fb      	ldr	r3, [r7, #28]
 81116f6:	3301      	adds	r3, #1
 81116f8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 81116fa:	68fb      	ldr	r3, [r7, #12]
 81116fc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8111700:	b29b      	uxth	r3, r3
 8111702:	3b01      	subs	r3, #1
 8111704:	b29a      	uxth	r2, r3
 8111706:	68fb      	ldr	r3, [r7, #12]
 8111708:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 811170c:	68fb      	ldr	r3, [r7, #12]
 811170e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8111712:	b29b      	uxth	r3, r3
 8111714:	2b00      	cmp	r3, #0
 8111716:	d1c8      	bne.n	81116aa <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8111718:	683b      	ldr	r3, [r7, #0]
 811171a:	9300      	str	r3, [sp, #0]
 811171c:	697b      	ldr	r3, [r7, #20]
 811171e:	2200      	movs	r2, #0
 8111720:	2140      	movs	r1, #64	@ 0x40
 8111722:	68f8      	ldr	r0, [r7, #12]
 8111724:	f000 fec8 	bl	81124b8 <UART_WaitOnFlagUntilTimeout>
 8111728:	4603      	mov	r3, r0
 811172a:	2b00      	cmp	r3, #0
 811172c:	d005      	beq.n	811173a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 811172e:	68fb      	ldr	r3, [r7, #12]
 8111730:	2220      	movs	r2, #32
 8111732:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8111736:	2303      	movs	r3, #3
 8111738:	e006      	b.n	8111748 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 811173a:	68fb      	ldr	r3, [r7, #12]
 811173c:	2220      	movs	r2, #32
 811173e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8111742:	2300      	movs	r3, #0
 8111744:	e000      	b.n	8111748 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8111746:	2302      	movs	r3, #2
  }
}
 8111748:	4618      	mov	r0, r3
 811174a:	3720      	adds	r7, #32
 811174c:	46bd      	mov	sp, r7
 811174e:	bd80      	pop	{r7, pc}

08111750 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8111750:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8111754:	b092      	sub	sp, #72	@ 0x48
 8111756:	af00      	add	r7, sp, #0
 8111758:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 811175a:	2300      	movs	r3, #0
 811175c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8111760:	697b      	ldr	r3, [r7, #20]
 8111762:	689a      	ldr	r2, [r3, #8]
 8111764:	697b      	ldr	r3, [r7, #20]
 8111766:	691b      	ldr	r3, [r3, #16]
 8111768:	431a      	orrs	r2, r3
 811176a:	697b      	ldr	r3, [r7, #20]
 811176c:	695b      	ldr	r3, [r3, #20]
 811176e:	431a      	orrs	r2, r3
 8111770:	697b      	ldr	r3, [r7, #20]
 8111772:	69db      	ldr	r3, [r3, #28]
 8111774:	4313      	orrs	r3, r2
 8111776:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8111778:	697b      	ldr	r3, [r7, #20]
 811177a:	681b      	ldr	r3, [r3, #0]
 811177c:	681a      	ldr	r2, [r3, #0]
 811177e:	4bbd      	ldr	r3, [pc, #756]	@ (8111a74 <UART_SetConfig+0x324>)
 8111780:	4013      	ands	r3, r2
 8111782:	697a      	ldr	r2, [r7, #20]
 8111784:	6812      	ldr	r2, [r2, #0]
 8111786:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8111788:	430b      	orrs	r3, r1
 811178a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 811178c:	697b      	ldr	r3, [r7, #20]
 811178e:	681b      	ldr	r3, [r3, #0]
 8111790:	685b      	ldr	r3, [r3, #4]
 8111792:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8111796:	697b      	ldr	r3, [r7, #20]
 8111798:	68da      	ldr	r2, [r3, #12]
 811179a:	697b      	ldr	r3, [r7, #20]
 811179c:	681b      	ldr	r3, [r3, #0]
 811179e:	430a      	orrs	r2, r1
 81117a0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 81117a2:	697b      	ldr	r3, [r7, #20]
 81117a4:	699b      	ldr	r3, [r3, #24]
 81117a6:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 81117a8:	697b      	ldr	r3, [r7, #20]
 81117aa:	681b      	ldr	r3, [r3, #0]
 81117ac:	4ab2      	ldr	r2, [pc, #712]	@ (8111a78 <UART_SetConfig+0x328>)
 81117ae:	4293      	cmp	r3, r2
 81117b0:	d004      	beq.n	81117bc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 81117b2:	697b      	ldr	r3, [r7, #20]
 81117b4:	6a1b      	ldr	r3, [r3, #32]
 81117b6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 81117b8:	4313      	orrs	r3, r2
 81117ba:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 81117bc:	697b      	ldr	r3, [r7, #20]
 81117be:	681b      	ldr	r3, [r3, #0]
 81117c0:	689b      	ldr	r3, [r3, #8]
 81117c2:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 81117c6:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 81117ca:	697a      	ldr	r2, [r7, #20]
 81117cc:	6812      	ldr	r2, [r2, #0]
 81117ce:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 81117d0:	430b      	orrs	r3, r1
 81117d2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 81117d4:	697b      	ldr	r3, [r7, #20]
 81117d6:	681b      	ldr	r3, [r3, #0]
 81117d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81117da:	f023 010f 	bic.w	r1, r3, #15
 81117de:	697b      	ldr	r3, [r7, #20]
 81117e0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 81117e2:	697b      	ldr	r3, [r7, #20]
 81117e4:	681b      	ldr	r3, [r3, #0]
 81117e6:	430a      	orrs	r2, r1
 81117e8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 81117ea:	697b      	ldr	r3, [r7, #20]
 81117ec:	681b      	ldr	r3, [r3, #0]
 81117ee:	4aa3      	ldr	r2, [pc, #652]	@ (8111a7c <UART_SetConfig+0x32c>)
 81117f0:	4293      	cmp	r3, r2
 81117f2:	d177      	bne.n	81118e4 <UART_SetConfig+0x194>
 81117f4:	4ba2      	ldr	r3, [pc, #648]	@ (8111a80 <UART_SetConfig+0x330>)
 81117f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81117f8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 81117fc:	2b28      	cmp	r3, #40	@ 0x28
 81117fe:	d86d      	bhi.n	81118dc <UART_SetConfig+0x18c>
 8111800:	a201      	add	r2, pc, #4	@ (adr r2, 8111808 <UART_SetConfig+0xb8>)
 8111802:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8111806:	bf00      	nop
 8111808:	081118ad 	.word	0x081118ad
 811180c:	081118dd 	.word	0x081118dd
 8111810:	081118dd 	.word	0x081118dd
 8111814:	081118dd 	.word	0x081118dd
 8111818:	081118dd 	.word	0x081118dd
 811181c:	081118dd 	.word	0x081118dd
 8111820:	081118dd 	.word	0x081118dd
 8111824:	081118dd 	.word	0x081118dd
 8111828:	081118b5 	.word	0x081118b5
 811182c:	081118dd 	.word	0x081118dd
 8111830:	081118dd 	.word	0x081118dd
 8111834:	081118dd 	.word	0x081118dd
 8111838:	081118dd 	.word	0x081118dd
 811183c:	081118dd 	.word	0x081118dd
 8111840:	081118dd 	.word	0x081118dd
 8111844:	081118dd 	.word	0x081118dd
 8111848:	081118bd 	.word	0x081118bd
 811184c:	081118dd 	.word	0x081118dd
 8111850:	081118dd 	.word	0x081118dd
 8111854:	081118dd 	.word	0x081118dd
 8111858:	081118dd 	.word	0x081118dd
 811185c:	081118dd 	.word	0x081118dd
 8111860:	081118dd 	.word	0x081118dd
 8111864:	081118dd 	.word	0x081118dd
 8111868:	081118c5 	.word	0x081118c5
 811186c:	081118dd 	.word	0x081118dd
 8111870:	081118dd 	.word	0x081118dd
 8111874:	081118dd 	.word	0x081118dd
 8111878:	081118dd 	.word	0x081118dd
 811187c:	081118dd 	.word	0x081118dd
 8111880:	081118dd 	.word	0x081118dd
 8111884:	081118dd 	.word	0x081118dd
 8111888:	081118cd 	.word	0x081118cd
 811188c:	081118dd 	.word	0x081118dd
 8111890:	081118dd 	.word	0x081118dd
 8111894:	081118dd 	.word	0x081118dd
 8111898:	081118dd 	.word	0x081118dd
 811189c:	081118dd 	.word	0x081118dd
 81118a0:	081118dd 	.word	0x081118dd
 81118a4:	081118dd 	.word	0x081118dd
 81118a8:	081118d5 	.word	0x081118d5
 81118ac:	2301      	movs	r3, #1
 81118ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81118b2:	e220      	b.n	8111cf6 <UART_SetConfig+0x5a6>
 81118b4:	2304      	movs	r3, #4
 81118b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81118ba:	e21c      	b.n	8111cf6 <UART_SetConfig+0x5a6>
 81118bc:	2308      	movs	r3, #8
 81118be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81118c2:	e218      	b.n	8111cf6 <UART_SetConfig+0x5a6>
 81118c4:	2310      	movs	r3, #16
 81118c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81118ca:	e214      	b.n	8111cf6 <UART_SetConfig+0x5a6>
 81118cc:	2320      	movs	r3, #32
 81118ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81118d2:	e210      	b.n	8111cf6 <UART_SetConfig+0x5a6>
 81118d4:	2340      	movs	r3, #64	@ 0x40
 81118d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81118da:	e20c      	b.n	8111cf6 <UART_SetConfig+0x5a6>
 81118dc:	2380      	movs	r3, #128	@ 0x80
 81118de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81118e2:	e208      	b.n	8111cf6 <UART_SetConfig+0x5a6>
 81118e4:	697b      	ldr	r3, [r7, #20]
 81118e6:	681b      	ldr	r3, [r3, #0]
 81118e8:	4a66      	ldr	r2, [pc, #408]	@ (8111a84 <UART_SetConfig+0x334>)
 81118ea:	4293      	cmp	r3, r2
 81118ec:	d130      	bne.n	8111950 <UART_SetConfig+0x200>
 81118ee:	4b64      	ldr	r3, [pc, #400]	@ (8111a80 <UART_SetConfig+0x330>)
 81118f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81118f2:	f003 0307 	and.w	r3, r3, #7
 81118f6:	2b05      	cmp	r3, #5
 81118f8:	d826      	bhi.n	8111948 <UART_SetConfig+0x1f8>
 81118fa:	a201      	add	r2, pc, #4	@ (adr r2, 8111900 <UART_SetConfig+0x1b0>)
 81118fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8111900:	08111919 	.word	0x08111919
 8111904:	08111921 	.word	0x08111921
 8111908:	08111929 	.word	0x08111929
 811190c:	08111931 	.word	0x08111931
 8111910:	08111939 	.word	0x08111939
 8111914:	08111941 	.word	0x08111941
 8111918:	2300      	movs	r3, #0
 811191a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 811191e:	e1ea      	b.n	8111cf6 <UART_SetConfig+0x5a6>
 8111920:	2304      	movs	r3, #4
 8111922:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8111926:	e1e6      	b.n	8111cf6 <UART_SetConfig+0x5a6>
 8111928:	2308      	movs	r3, #8
 811192a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 811192e:	e1e2      	b.n	8111cf6 <UART_SetConfig+0x5a6>
 8111930:	2310      	movs	r3, #16
 8111932:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8111936:	e1de      	b.n	8111cf6 <UART_SetConfig+0x5a6>
 8111938:	2320      	movs	r3, #32
 811193a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 811193e:	e1da      	b.n	8111cf6 <UART_SetConfig+0x5a6>
 8111940:	2340      	movs	r3, #64	@ 0x40
 8111942:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8111946:	e1d6      	b.n	8111cf6 <UART_SetConfig+0x5a6>
 8111948:	2380      	movs	r3, #128	@ 0x80
 811194a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 811194e:	e1d2      	b.n	8111cf6 <UART_SetConfig+0x5a6>
 8111950:	697b      	ldr	r3, [r7, #20]
 8111952:	681b      	ldr	r3, [r3, #0]
 8111954:	4a4c      	ldr	r2, [pc, #304]	@ (8111a88 <UART_SetConfig+0x338>)
 8111956:	4293      	cmp	r3, r2
 8111958:	d130      	bne.n	81119bc <UART_SetConfig+0x26c>
 811195a:	4b49      	ldr	r3, [pc, #292]	@ (8111a80 <UART_SetConfig+0x330>)
 811195c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 811195e:	f003 0307 	and.w	r3, r3, #7
 8111962:	2b05      	cmp	r3, #5
 8111964:	d826      	bhi.n	81119b4 <UART_SetConfig+0x264>
 8111966:	a201      	add	r2, pc, #4	@ (adr r2, 811196c <UART_SetConfig+0x21c>)
 8111968:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 811196c:	08111985 	.word	0x08111985
 8111970:	0811198d 	.word	0x0811198d
 8111974:	08111995 	.word	0x08111995
 8111978:	0811199d 	.word	0x0811199d
 811197c:	081119a5 	.word	0x081119a5
 8111980:	081119ad 	.word	0x081119ad
 8111984:	2300      	movs	r3, #0
 8111986:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 811198a:	e1b4      	b.n	8111cf6 <UART_SetConfig+0x5a6>
 811198c:	2304      	movs	r3, #4
 811198e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8111992:	e1b0      	b.n	8111cf6 <UART_SetConfig+0x5a6>
 8111994:	2308      	movs	r3, #8
 8111996:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 811199a:	e1ac      	b.n	8111cf6 <UART_SetConfig+0x5a6>
 811199c:	2310      	movs	r3, #16
 811199e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81119a2:	e1a8      	b.n	8111cf6 <UART_SetConfig+0x5a6>
 81119a4:	2320      	movs	r3, #32
 81119a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81119aa:	e1a4      	b.n	8111cf6 <UART_SetConfig+0x5a6>
 81119ac:	2340      	movs	r3, #64	@ 0x40
 81119ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81119b2:	e1a0      	b.n	8111cf6 <UART_SetConfig+0x5a6>
 81119b4:	2380      	movs	r3, #128	@ 0x80
 81119b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81119ba:	e19c      	b.n	8111cf6 <UART_SetConfig+0x5a6>
 81119bc:	697b      	ldr	r3, [r7, #20]
 81119be:	681b      	ldr	r3, [r3, #0]
 81119c0:	4a32      	ldr	r2, [pc, #200]	@ (8111a8c <UART_SetConfig+0x33c>)
 81119c2:	4293      	cmp	r3, r2
 81119c4:	d130      	bne.n	8111a28 <UART_SetConfig+0x2d8>
 81119c6:	4b2e      	ldr	r3, [pc, #184]	@ (8111a80 <UART_SetConfig+0x330>)
 81119c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81119ca:	f003 0307 	and.w	r3, r3, #7
 81119ce:	2b05      	cmp	r3, #5
 81119d0:	d826      	bhi.n	8111a20 <UART_SetConfig+0x2d0>
 81119d2:	a201      	add	r2, pc, #4	@ (adr r2, 81119d8 <UART_SetConfig+0x288>)
 81119d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81119d8:	081119f1 	.word	0x081119f1
 81119dc:	081119f9 	.word	0x081119f9
 81119e0:	08111a01 	.word	0x08111a01
 81119e4:	08111a09 	.word	0x08111a09
 81119e8:	08111a11 	.word	0x08111a11
 81119ec:	08111a19 	.word	0x08111a19
 81119f0:	2300      	movs	r3, #0
 81119f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81119f6:	e17e      	b.n	8111cf6 <UART_SetConfig+0x5a6>
 81119f8:	2304      	movs	r3, #4
 81119fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81119fe:	e17a      	b.n	8111cf6 <UART_SetConfig+0x5a6>
 8111a00:	2308      	movs	r3, #8
 8111a02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8111a06:	e176      	b.n	8111cf6 <UART_SetConfig+0x5a6>
 8111a08:	2310      	movs	r3, #16
 8111a0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8111a0e:	e172      	b.n	8111cf6 <UART_SetConfig+0x5a6>
 8111a10:	2320      	movs	r3, #32
 8111a12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8111a16:	e16e      	b.n	8111cf6 <UART_SetConfig+0x5a6>
 8111a18:	2340      	movs	r3, #64	@ 0x40
 8111a1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8111a1e:	e16a      	b.n	8111cf6 <UART_SetConfig+0x5a6>
 8111a20:	2380      	movs	r3, #128	@ 0x80
 8111a22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8111a26:	e166      	b.n	8111cf6 <UART_SetConfig+0x5a6>
 8111a28:	697b      	ldr	r3, [r7, #20]
 8111a2a:	681b      	ldr	r3, [r3, #0]
 8111a2c:	4a18      	ldr	r2, [pc, #96]	@ (8111a90 <UART_SetConfig+0x340>)
 8111a2e:	4293      	cmp	r3, r2
 8111a30:	d140      	bne.n	8111ab4 <UART_SetConfig+0x364>
 8111a32:	4b13      	ldr	r3, [pc, #76]	@ (8111a80 <UART_SetConfig+0x330>)
 8111a34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8111a36:	f003 0307 	and.w	r3, r3, #7
 8111a3a:	2b05      	cmp	r3, #5
 8111a3c:	d836      	bhi.n	8111aac <UART_SetConfig+0x35c>
 8111a3e:	a201      	add	r2, pc, #4	@ (adr r2, 8111a44 <UART_SetConfig+0x2f4>)
 8111a40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8111a44:	08111a5d 	.word	0x08111a5d
 8111a48:	08111a65 	.word	0x08111a65
 8111a4c:	08111a6d 	.word	0x08111a6d
 8111a50:	08111a95 	.word	0x08111a95
 8111a54:	08111a9d 	.word	0x08111a9d
 8111a58:	08111aa5 	.word	0x08111aa5
 8111a5c:	2300      	movs	r3, #0
 8111a5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8111a62:	e148      	b.n	8111cf6 <UART_SetConfig+0x5a6>
 8111a64:	2304      	movs	r3, #4
 8111a66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8111a6a:	e144      	b.n	8111cf6 <UART_SetConfig+0x5a6>
 8111a6c:	2308      	movs	r3, #8
 8111a6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8111a72:	e140      	b.n	8111cf6 <UART_SetConfig+0x5a6>
 8111a74:	cfff69f3 	.word	0xcfff69f3
 8111a78:	58000c00 	.word	0x58000c00
 8111a7c:	40011000 	.word	0x40011000
 8111a80:	58024400 	.word	0x58024400
 8111a84:	40004400 	.word	0x40004400
 8111a88:	40004800 	.word	0x40004800
 8111a8c:	40004c00 	.word	0x40004c00
 8111a90:	40005000 	.word	0x40005000
 8111a94:	2310      	movs	r3, #16
 8111a96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8111a9a:	e12c      	b.n	8111cf6 <UART_SetConfig+0x5a6>
 8111a9c:	2320      	movs	r3, #32
 8111a9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8111aa2:	e128      	b.n	8111cf6 <UART_SetConfig+0x5a6>
 8111aa4:	2340      	movs	r3, #64	@ 0x40
 8111aa6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8111aaa:	e124      	b.n	8111cf6 <UART_SetConfig+0x5a6>
 8111aac:	2380      	movs	r3, #128	@ 0x80
 8111aae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8111ab2:	e120      	b.n	8111cf6 <UART_SetConfig+0x5a6>
 8111ab4:	697b      	ldr	r3, [r7, #20]
 8111ab6:	681b      	ldr	r3, [r3, #0]
 8111ab8:	4acb      	ldr	r2, [pc, #812]	@ (8111de8 <UART_SetConfig+0x698>)
 8111aba:	4293      	cmp	r3, r2
 8111abc:	d176      	bne.n	8111bac <UART_SetConfig+0x45c>
 8111abe:	4bcb      	ldr	r3, [pc, #812]	@ (8111dec <UART_SetConfig+0x69c>)
 8111ac0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8111ac2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8111ac6:	2b28      	cmp	r3, #40	@ 0x28
 8111ac8:	d86c      	bhi.n	8111ba4 <UART_SetConfig+0x454>
 8111aca:	a201      	add	r2, pc, #4	@ (adr r2, 8111ad0 <UART_SetConfig+0x380>)
 8111acc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8111ad0:	08111b75 	.word	0x08111b75
 8111ad4:	08111ba5 	.word	0x08111ba5
 8111ad8:	08111ba5 	.word	0x08111ba5
 8111adc:	08111ba5 	.word	0x08111ba5
 8111ae0:	08111ba5 	.word	0x08111ba5
 8111ae4:	08111ba5 	.word	0x08111ba5
 8111ae8:	08111ba5 	.word	0x08111ba5
 8111aec:	08111ba5 	.word	0x08111ba5
 8111af0:	08111b7d 	.word	0x08111b7d
 8111af4:	08111ba5 	.word	0x08111ba5
 8111af8:	08111ba5 	.word	0x08111ba5
 8111afc:	08111ba5 	.word	0x08111ba5
 8111b00:	08111ba5 	.word	0x08111ba5
 8111b04:	08111ba5 	.word	0x08111ba5
 8111b08:	08111ba5 	.word	0x08111ba5
 8111b0c:	08111ba5 	.word	0x08111ba5
 8111b10:	08111b85 	.word	0x08111b85
 8111b14:	08111ba5 	.word	0x08111ba5
 8111b18:	08111ba5 	.word	0x08111ba5
 8111b1c:	08111ba5 	.word	0x08111ba5
 8111b20:	08111ba5 	.word	0x08111ba5
 8111b24:	08111ba5 	.word	0x08111ba5
 8111b28:	08111ba5 	.word	0x08111ba5
 8111b2c:	08111ba5 	.word	0x08111ba5
 8111b30:	08111b8d 	.word	0x08111b8d
 8111b34:	08111ba5 	.word	0x08111ba5
 8111b38:	08111ba5 	.word	0x08111ba5
 8111b3c:	08111ba5 	.word	0x08111ba5
 8111b40:	08111ba5 	.word	0x08111ba5
 8111b44:	08111ba5 	.word	0x08111ba5
 8111b48:	08111ba5 	.word	0x08111ba5
 8111b4c:	08111ba5 	.word	0x08111ba5
 8111b50:	08111b95 	.word	0x08111b95
 8111b54:	08111ba5 	.word	0x08111ba5
 8111b58:	08111ba5 	.word	0x08111ba5
 8111b5c:	08111ba5 	.word	0x08111ba5
 8111b60:	08111ba5 	.word	0x08111ba5
 8111b64:	08111ba5 	.word	0x08111ba5
 8111b68:	08111ba5 	.word	0x08111ba5
 8111b6c:	08111ba5 	.word	0x08111ba5
 8111b70:	08111b9d 	.word	0x08111b9d
 8111b74:	2301      	movs	r3, #1
 8111b76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8111b7a:	e0bc      	b.n	8111cf6 <UART_SetConfig+0x5a6>
 8111b7c:	2304      	movs	r3, #4
 8111b7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8111b82:	e0b8      	b.n	8111cf6 <UART_SetConfig+0x5a6>
 8111b84:	2308      	movs	r3, #8
 8111b86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8111b8a:	e0b4      	b.n	8111cf6 <UART_SetConfig+0x5a6>
 8111b8c:	2310      	movs	r3, #16
 8111b8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8111b92:	e0b0      	b.n	8111cf6 <UART_SetConfig+0x5a6>
 8111b94:	2320      	movs	r3, #32
 8111b96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8111b9a:	e0ac      	b.n	8111cf6 <UART_SetConfig+0x5a6>
 8111b9c:	2340      	movs	r3, #64	@ 0x40
 8111b9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8111ba2:	e0a8      	b.n	8111cf6 <UART_SetConfig+0x5a6>
 8111ba4:	2380      	movs	r3, #128	@ 0x80
 8111ba6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8111baa:	e0a4      	b.n	8111cf6 <UART_SetConfig+0x5a6>
 8111bac:	697b      	ldr	r3, [r7, #20]
 8111bae:	681b      	ldr	r3, [r3, #0]
 8111bb0:	4a8f      	ldr	r2, [pc, #572]	@ (8111df0 <UART_SetConfig+0x6a0>)
 8111bb2:	4293      	cmp	r3, r2
 8111bb4:	d130      	bne.n	8111c18 <UART_SetConfig+0x4c8>
 8111bb6:	4b8d      	ldr	r3, [pc, #564]	@ (8111dec <UART_SetConfig+0x69c>)
 8111bb8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8111bba:	f003 0307 	and.w	r3, r3, #7
 8111bbe:	2b05      	cmp	r3, #5
 8111bc0:	d826      	bhi.n	8111c10 <UART_SetConfig+0x4c0>
 8111bc2:	a201      	add	r2, pc, #4	@ (adr r2, 8111bc8 <UART_SetConfig+0x478>)
 8111bc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8111bc8:	08111be1 	.word	0x08111be1
 8111bcc:	08111be9 	.word	0x08111be9
 8111bd0:	08111bf1 	.word	0x08111bf1
 8111bd4:	08111bf9 	.word	0x08111bf9
 8111bd8:	08111c01 	.word	0x08111c01
 8111bdc:	08111c09 	.word	0x08111c09
 8111be0:	2300      	movs	r3, #0
 8111be2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8111be6:	e086      	b.n	8111cf6 <UART_SetConfig+0x5a6>
 8111be8:	2304      	movs	r3, #4
 8111bea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8111bee:	e082      	b.n	8111cf6 <UART_SetConfig+0x5a6>
 8111bf0:	2308      	movs	r3, #8
 8111bf2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8111bf6:	e07e      	b.n	8111cf6 <UART_SetConfig+0x5a6>
 8111bf8:	2310      	movs	r3, #16
 8111bfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8111bfe:	e07a      	b.n	8111cf6 <UART_SetConfig+0x5a6>
 8111c00:	2320      	movs	r3, #32
 8111c02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8111c06:	e076      	b.n	8111cf6 <UART_SetConfig+0x5a6>
 8111c08:	2340      	movs	r3, #64	@ 0x40
 8111c0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8111c0e:	e072      	b.n	8111cf6 <UART_SetConfig+0x5a6>
 8111c10:	2380      	movs	r3, #128	@ 0x80
 8111c12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8111c16:	e06e      	b.n	8111cf6 <UART_SetConfig+0x5a6>
 8111c18:	697b      	ldr	r3, [r7, #20]
 8111c1a:	681b      	ldr	r3, [r3, #0]
 8111c1c:	4a75      	ldr	r2, [pc, #468]	@ (8111df4 <UART_SetConfig+0x6a4>)
 8111c1e:	4293      	cmp	r3, r2
 8111c20:	d130      	bne.n	8111c84 <UART_SetConfig+0x534>
 8111c22:	4b72      	ldr	r3, [pc, #456]	@ (8111dec <UART_SetConfig+0x69c>)
 8111c24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8111c26:	f003 0307 	and.w	r3, r3, #7
 8111c2a:	2b05      	cmp	r3, #5
 8111c2c:	d826      	bhi.n	8111c7c <UART_SetConfig+0x52c>
 8111c2e:	a201      	add	r2, pc, #4	@ (adr r2, 8111c34 <UART_SetConfig+0x4e4>)
 8111c30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8111c34:	08111c4d 	.word	0x08111c4d
 8111c38:	08111c55 	.word	0x08111c55
 8111c3c:	08111c5d 	.word	0x08111c5d
 8111c40:	08111c65 	.word	0x08111c65
 8111c44:	08111c6d 	.word	0x08111c6d
 8111c48:	08111c75 	.word	0x08111c75
 8111c4c:	2300      	movs	r3, #0
 8111c4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8111c52:	e050      	b.n	8111cf6 <UART_SetConfig+0x5a6>
 8111c54:	2304      	movs	r3, #4
 8111c56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8111c5a:	e04c      	b.n	8111cf6 <UART_SetConfig+0x5a6>
 8111c5c:	2308      	movs	r3, #8
 8111c5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8111c62:	e048      	b.n	8111cf6 <UART_SetConfig+0x5a6>
 8111c64:	2310      	movs	r3, #16
 8111c66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8111c6a:	e044      	b.n	8111cf6 <UART_SetConfig+0x5a6>
 8111c6c:	2320      	movs	r3, #32
 8111c6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8111c72:	e040      	b.n	8111cf6 <UART_SetConfig+0x5a6>
 8111c74:	2340      	movs	r3, #64	@ 0x40
 8111c76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8111c7a:	e03c      	b.n	8111cf6 <UART_SetConfig+0x5a6>
 8111c7c:	2380      	movs	r3, #128	@ 0x80
 8111c7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8111c82:	e038      	b.n	8111cf6 <UART_SetConfig+0x5a6>
 8111c84:	697b      	ldr	r3, [r7, #20]
 8111c86:	681b      	ldr	r3, [r3, #0]
 8111c88:	4a5b      	ldr	r2, [pc, #364]	@ (8111df8 <UART_SetConfig+0x6a8>)
 8111c8a:	4293      	cmp	r3, r2
 8111c8c:	d130      	bne.n	8111cf0 <UART_SetConfig+0x5a0>
 8111c8e:	4b57      	ldr	r3, [pc, #348]	@ (8111dec <UART_SetConfig+0x69c>)
 8111c90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8111c92:	f003 0307 	and.w	r3, r3, #7
 8111c96:	2b05      	cmp	r3, #5
 8111c98:	d826      	bhi.n	8111ce8 <UART_SetConfig+0x598>
 8111c9a:	a201      	add	r2, pc, #4	@ (adr r2, 8111ca0 <UART_SetConfig+0x550>)
 8111c9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8111ca0:	08111cb9 	.word	0x08111cb9
 8111ca4:	08111cc1 	.word	0x08111cc1
 8111ca8:	08111cc9 	.word	0x08111cc9
 8111cac:	08111cd1 	.word	0x08111cd1
 8111cb0:	08111cd9 	.word	0x08111cd9
 8111cb4:	08111ce1 	.word	0x08111ce1
 8111cb8:	2302      	movs	r3, #2
 8111cba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8111cbe:	e01a      	b.n	8111cf6 <UART_SetConfig+0x5a6>
 8111cc0:	2304      	movs	r3, #4
 8111cc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8111cc6:	e016      	b.n	8111cf6 <UART_SetConfig+0x5a6>
 8111cc8:	2308      	movs	r3, #8
 8111cca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8111cce:	e012      	b.n	8111cf6 <UART_SetConfig+0x5a6>
 8111cd0:	2310      	movs	r3, #16
 8111cd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8111cd6:	e00e      	b.n	8111cf6 <UART_SetConfig+0x5a6>
 8111cd8:	2320      	movs	r3, #32
 8111cda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8111cde:	e00a      	b.n	8111cf6 <UART_SetConfig+0x5a6>
 8111ce0:	2340      	movs	r3, #64	@ 0x40
 8111ce2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8111ce6:	e006      	b.n	8111cf6 <UART_SetConfig+0x5a6>
 8111ce8:	2380      	movs	r3, #128	@ 0x80
 8111cea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8111cee:	e002      	b.n	8111cf6 <UART_SetConfig+0x5a6>
 8111cf0:	2380      	movs	r3, #128	@ 0x80
 8111cf2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8111cf6:	697b      	ldr	r3, [r7, #20]
 8111cf8:	681b      	ldr	r3, [r3, #0]
 8111cfa:	4a3f      	ldr	r2, [pc, #252]	@ (8111df8 <UART_SetConfig+0x6a8>)
 8111cfc:	4293      	cmp	r3, r2
 8111cfe:	f040 80f8 	bne.w	8111ef2 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8111d02:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8111d06:	2b20      	cmp	r3, #32
 8111d08:	dc46      	bgt.n	8111d98 <UART_SetConfig+0x648>
 8111d0a:	2b02      	cmp	r3, #2
 8111d0c:	f2c0 8082 	blt.w	8111e14 <UART_SetConfig+0x6c4>
 8111d10:	3b02      	subs	r3, #2
 8111d12:	2b1e      	cmp	r3, #30
 8111d14:	d87e      	bhi.n	8111e14 <UART_SetConfig+0x6c4>
 8111d16:	a201      	add	r2, pc, #4	@ (adr r2, 8111d1c <UART_SetConfig+0x5cc>)
 8111d18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8111d1c:	08111d9f 	.word	0x08111d9f
 8111d20:	08111e15 	.word	0x08111e15
 8111d24:	08111da7 	.word	0x08111da7
 8111d28:	08111e15 	.word	0x08111e15
 8111d2c:	08111e15 	.word	0x08111e15
 8111d30:	08111e15 	.word	0x08111e15
 8111d34:	08111db7 	.word	0x08111db7
 8111d38:	08111e15 	.word	0x08111e15
 8111d3c:	08111e15 	.word	0x08111e15
 8111d40:	08111e15 	.word	0x08111e15
 8111d44:	08111e15 	.word	0x08111e15
 8111d48:	08111e15 	.word	0x08111e15
 8111d4c:	08111e15 	.word	0x08111e15
 8111d50:	08111e15 	.word	0x08111e15
 8111d54:	08111dc7 	.word	0x08111dc7
 8111d58:	08111e15 	.word	0x08111e15
 8111d5c:	08111e15 	.word	0x08111e15
 8111d60:	08111e15 	.word	0x08111e15
 8111d64:	08111e15 	.word	0x08111e15
 8111d68:	08111e15 	.word	0x08111e15
 8111d6c:	08111e15 	.word	0x08111e15
 8111d70:	08111e15 	.word	0x08111e15
 8111d74:	08111e15 	.word	0x08111e15
 8111d78:	08111e15 	.word	0x08111e15
 8111d7c:	08111e15 	.word	0x08111e15
 8111d80:	08111e15 	.word	0x08111e15
 8111d84:	08111e15 	.word	0x08111e15
 8111d88:	08111e15 	.word	0x08111e15
 8111d8c:	08111e15 	.word	0x08111e15
 8111d90:	08111e15 	.word	0x08111e15
 8111d94:	08111e07 	.word	0x08111e07
 8111d98:	2b40      	cmp	r3, #64	@ 0x40
 8111d9a:	d037      	beq.n	8111e0c <UART_SetConfig+0x6bc>
 8111d9c:	e03a      	b.n	8111e14 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8111d9e:	f7fe fd09 	bl	81107b4 <HAL_RCCEx_GetD3PCLK1Freq>
 8111da2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8111da4:	e03c      	b.n	8111e20 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8111da6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8111daa:	4618      	mov	r0, r3
 8111dac:	f7fe fd18 	bl	81107e0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8111db0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8111db2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8111db4:	e034      	b.n	8111e20 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8111db6:	f107 0318 	add.w	r3, r7, #24
 8111dba:	4618      	mov	r0, r3
 8111dbc:	f7fe fe64 	bl	8110a88 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8111dc0:	69fb      	ldr	r3, [r7, #28]
 8111dc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8111dc4:	e02c      	b.n	8111e20 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8111dc6:	4b09      	ldr	r3, [pc, #36]	@ (8111dec <UART_SetConfig+0x69c>)
 8111dc8:	681b      	ldr	r3, [r3, #0]
 8111dca:	f003 0320 	and.w	r3, r3, #32
 8111dce:	2b00      	cmp	r3, #0
 8111dd0:	d016      	beq.n	8111e00 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8111dd2:	4b06      	ldr	r3, [pc, #24]	@ (8111dec <UART_SetConfig+0x69c>)
 8111dd4:	681b      	ldr	r3, [r3, #0]
 8111dd6:	08db      	lsrs	r3, r3, #3
 8111dd8:	f003 0303 	and.w	r3, r3, #3
 8111ddc:	4a07      	ldr	r2, [pc, #28]	@ (8111dfc <UART_SetConfig+0x6ac>)
 8111dde:	fa22 f303 	lsr.w	r3, r2, r3
 8111de2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8111de4:	e01c      	b.n	8111e20 <UART_SetConfig+0x6d0>
 8111de6:	bf00      	nop
 8111de8:	40011400 	.word	0x40011400
 8111dec:	58024400 	.word	0x58024400
 8111df0:	40007800 	.word	0x40007800
 8111df4:	40007c00 	.word	0x40007c00
 8111df8:	58000c00 	.word	0x58000c00
 8111dfc:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8111e00:	4b9d      	ldr	r3, [pc, #628]	@ (8112078 <UART_SetConfig+0x928>)
 8111e02:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8111e04:	e00c      	b.n	8111e20 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8111e06:	4b9d      	ldr	r3, [pc, #628]	@ (811207c <UART_SetConfig+0x92c>)
 8111e08:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8111e0a:	e009      	b.n	8111e20 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8111e0c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8111e10:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8111e12:	e005      	b.n	8111e20 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8111e14:	2300      	movs	r3, #0
 8111e16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8111e18:	2301      	movs	r3, #1
 8111e1a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8111e1e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8111e20:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8111e22:	2b00      	cmp	r3, #0
 8111e24:	f000 81de 	beq.w	81121e4 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8111e28:	697b      	ldr	r3, [r7, #20]
 8111e2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8111e2c:	4a94      	ldr	r2, [pc, #592]	@ (8112080 <UART_SetConfig+0x930>)
 8111e2e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8111e32:	461a      	mov	r2, r3
 8111e34:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8111e36:	fbb3 f3f2 	udiv	r3, r3, r2
 8111e3a:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8111e3c:	697b      	ldr	r3, [r7, #20]
 8111e3e:	685a      	ldr	r2, [r3, #4]
 8111e40:	4613      	mov	r3, r2
 8111e42:	005b      	lsls	r3, r3, #1
 8111e44:	4413      	add	r3, r2
 8111e46:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8111e48:	429a      	cmp	r2, r3
 8111e4a:	d305      	bcc.n	8111e58 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8111e4c:	697b      	ldr	r3, [r7, #20]
 8111e4e:	685b      	ldr	r3, [r3, #4]
 8111e50:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8111e52:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8111e54:	429a      	cmp	r2, r3
 8111e56:	d903      	bls.n	8111e60 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8111e58:	2301      	movs	r3, #1
 8111e5a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8111e5e:	e1c1      	b.n	81121e4 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8111e60:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8111e62:	2200      	movs	r2, #0
 8111e64:	60bb      	str	r3, [r7, #8]
 8111e66:	60fa      	str	r2, [r7, #12]
 8111e68:	697b      	ldr	r3, [r7, #20]
 8111e6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8111e6c:	4a84      	ldr	r2, [pc, #528]	@ (8112080 <UART_SetConfig+0x930>)
 8111e6e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8111e72:	b29b      	uxth	r3, r3
 8111e74:	2200      	movs	r2, #0
 8111e76:	603b      	str	r3, [r7, #0]
 8111e78:	607a      	str	r2, [r7, #4]
 8111e7a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8111e7e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8111e82:	f7ee fefb 	bl	8100c7c <__aeabi_uldivmod>
 8111e86:	4602      	mov	r2, r0
 8111e88:	460b      	mov	r3, r1
 8111e8a:	4610      	mov	r0, r2
 8111e8c:	4619      	mov	r1, r3
 8111e8e:	f04f 0200 	mov.w	r2, #0
 8111e92:	f04f 0300 	mov.w	r3, #0
 8111e96:	020b      	lsls	r3, r1, #8
 8111e98:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8111e9c:	0202      	lsls	r2, r0, #8
 8111e9e:	6979      	ldr	r1, [r7, #20]
 8111ea0:	6849      	ldr	r1, [r1, #4]
 8111ea2:	0849      	lsrs	r1, r1, #1
 8111ea4:	2000      	movs	r0, #0
 8111ea6:	460c      	mov	r4, r1
 8111ea8:	4605      	mov	r5, r0
 8111eaa:	eb12 0804 	adds.w	r8, r2, r4
 8111eae:	eb43 0905 	adc.w	r9, r3, r5
 8111eb2:	697b      	ldr	r3, [r7, #20]
 8111eb4:	685b      	ldr	r3, [r3, #4]
 8111eb6:	2200      	movs	r2, #0
 8111eb8:	469a      	mov	sl, r3
 8111eba:	4693      	mov	fp, r2
 8111ebc:	4652      	mov	r2, sl
 8111ebe:	465b      	mov	r3, fp
 8111ec0:	4640      	mov	r0, r8
 8111ec2:	4649      	mov	r1, r9
 8111ec4:	f7ee feda 	bl	8100c7c <__aeabi_uldivmod>
 8111ec8:	4602      	mov	r2, r0
 8111eca:	460b      	mov	r3, r1
 8111ecc:	4613      	mov	r3, r2
 8111ece:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8111ed0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8111ed2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8111ed6:	d308      	bcc.n	8111eea <UART_SetConfig+0x79a>
 8111ed8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8111eda:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8111ede:	d204      	bcs.n	8111eea <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8111ee0:	697b      	ldr	r3, [r7, #20]
 8111ee2:	681b      	ldr	r3, [r3, #0]
 8111ee4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8111ee6:	60da      	str	r2, [r3, #12]
 8111ee8:	e17c      	b.n	81121e4 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8111eea:	2301      	movs	r3, #1
 8111eec:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8111ef0:	e178      	b.n	81121e4 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8111ef2:	697b      	ldr	r3, [r7, #20]
 8111ef4:	69db      	ldr	r3, [r3, #28]
 8111ef6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8111efa:	f040 80c5 	bne.w	8112088 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8111efe:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8111f02:	2b20      	cmp	r3, #32
 8111f04:	dc48      	bgt.n	8111f98 <UART_SetConfig+0x848>
 8111f06:	2b00      	cmp	r3, #0
 8111f08:	db7b      	blt.n	8112002 <UART_SetConfig+0x8b2>
 8111f0a:	2b20      	cmp	r3, #32
 8111f0c:	d879      	bhi.n	8112002 <UART_SetConfig+0x8b2>
 8111f0e:	a201      	add	r2, pc, #4	@ (adr r2, 8111f14 <UART_SetConfig+0x7c4>)
 8111f10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8111f14:	08111f9f 	.word	0x08111f9f
 8111f18:	08111fa7 	.word	0x08111fa7
 8111f1c:	08112003 	.word	0x08112003
 8111f20:	08112003 	.word	0x08112003
 8111f24:	08111faf 	.word	0x08111faf
 8111f28:	08112003 	.word	0x08112003
 8111f2c:	08112003 	.word	0x08112003
 8111f30:	08112003 	.word	0x08112003
 8111f34:	08111fbf 	.word	0x08111fbf
 8111f38:	08112003 	.word	0x08112003
 8111f3c:	08112003 	.word	0x08112003
 8111f40:	08112003 	.word	0x08112003
 8111f44:	08112003 	.word	0x08112003
 8111f48:	08112003 	.word	0x08112003
 8111f4c:	08112003 	.word	0x08112003
 8111f50:	08112003 	.word	0x08112003
 8111f54:	08111fcf 	.word	0x08111fcf
 8111f58:	08112003 	.word	0x08112003
 8111f5c:	08112003 	.word	0x08112003
 8111f60:	08112003 	.word	0x08112003
 8111f64:	08112003 	.word	0x08112003
 8111f68:	08112003 	.word	0x08112003
 8111f6c:	08112003 	.word	0x08112003
 8111f70:	08112003 	.word	0x08112003
 8111f74:	08112003 	.word	0x08112003
 8111f78:	08112003 	.word	0x08112003
 8111f7c:	08112003 	.word	0x08112003
 8111f80:	08112003 	.word	0x08112003
 8111f84:	08112003 	.word	0x08112003
 8111f88:	08112003 	.word	0x08112003
 8111f8c:	08112003 	.word	0x08112003
 8111f90:	08112003 	.word	0x08112003
 8111f94:	08111ff5 	.word	0x08111ff5
 8111f98:	2b40      	cmp	r3, #64	@ 0x40
 8111f9a:	d02e      	beq.n	8111ffa <UART_SetConfig+0x8aa>
 8111f9c:	e031      	b.n	8112002 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8111f9e:	f7fd f951 	bl	810f244 <HAL_RCC_GetPCLK1Freq>
 8111fa2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8111fa4:	e033      	b.n	811200e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8111fa6:	f7fd f963 	bl	810f270 <HAL_RCC_GetPCLK2Freq>
 8111faa:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8111fac:	e02f      	b.n	811200e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8111fae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8111fb2:	4618      	mov	r0, r3
 8111fb4:	f7fe fc14 	bl	81107e0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8111fb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8111fba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8111fbc:	e027      	b.n	811200e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8111fbe:	f107 0318 	add.w	r3, r7, #24
 8111fc2:	4618      	mov	r0, r3
 8111fc4:	f7fe fd60 	bl	8110a88 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8111fc8:	69fb      	ldr	r3, [r7, #28]
 8111fca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8111fcc:	e01f      	b.n	811200e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8111fce:	4b2d      	ldr	r3, [pc, #180]	@ (8112084 <UART_SetConfig+0x934>)
 8111fd0:	681b      	ldr	r3, [r3, #0]
 8111fd2:	f003 0320 	and.w	r3, r3, #32
 8111fd6:	2b00      	cmp	r3, #0
 8111fd8:	d009      	beq.n	8111fee <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8111fda:	4b2a      	ldr	r3, [pc, #168]	@ (8112084 <UART_SetConfig+0x934>)
 8111fdc:	681b      	ldr	r3, [r3, #0]
 8111fde:	08db      	lsrs	r3, r3, #3
 8111fe0:	f003 0303 	and.w	r3, r3, #3
 8111fe4:	4a24      	ldr	r2, [pc, #144]	@ (8112078 <UART_SetConfig+0x928>)
 8111fe6:	fa22 f303 	lsr.w	r3, r2, r3
 8111fea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8111fec:	e00f      	b.n	811200e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8111fee:	4b22      	ldr	r3, [pc, #136]	@ (8112078 <UART_SetConfig+0x928>)
 8111ff0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8111ff2:	e00c      	b.n	811200e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8111ff4:	4b21      	ldr	r3, [pc, #132]	@ (811207c <UART_SetConfig+0x92c>)
 8111ff6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8111ff8:	e009      	b.n	811200e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8111ffa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8111ffe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8112000:	e005      	b.n	811200e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8112002:	2300      	movs	r3, #0
 8112004:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8112006:	2301      	movs	r3, #1
 8112008:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 811200c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 811200e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8112010:	2b00      	cmp	r3, #0
 8112012:	f000 80e7 	beq.w	81121e4 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8112016:	697b      	ldr	r3, [r7, #20]
 8112018:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 811201a:	4a19      	ldr	r2, [pc, #100]	@ (8112080 <UART_SetConfig+0x930>)
 811201c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8112020:	461a      	mov	r2, r3
 8112022:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8112024:	fbb3 f3f2 	udiv	r3, r3, r2
 8112028:	005a      	lsls	r2, r3, #1
 811202a:	697b      	ldr	r3, [r7, #20]
 811202c:	685b      	ldr	r3, [r3, #4]
 811202e:	085b      	lsrs	r3, r3, #1
 8112030:	441a      	add	r2, r3
 8112032:	697b      	ldr	r3, [r7, #20]
 8112034:	685b      	ldr	r3, [r3, #4]
 8112036:	fbb2 f3f3 	udiv	r3, r2, r3
 811203a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 811203c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 811203e:	2b0f      	cmp	r3, #15
 8112040:	d916      	bls.n	8112070 <UART_SetConfig+0x920>
 8112042:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8112044:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8112048:	d212      	bcs.n	8112070 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 811204a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 811204c:	b29b      	uxth	r3, r3
 811204e:	f023 030f 	bic.w	r3, r3, #15
 8112052:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8112054:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8112056:	085b      	lsrs	r3, r3, #1
 8112058:	b29b      	uxth	r3, r3
 811205a:	f003 0307 	and.w	r3, r3, #7
 811205e:	b29a      	uxth	r2, r3
 8112060:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8112062:	4313      	orrs	r3, r2
 8112064:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8112066:	697b      	ldr	r3, [r7, #20]
 8112068:	681b      	ldr	r3, [r3, #0]
 811206a:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 811206c:	60da      	str	r2, [r3, #12]
 811206e:	e0b9      	b.n	81121e4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8112070:	2301      	movs	r3, #1
 8112072:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8112076:	e0b5      	b.n	81121e4 <UART_SetConfig+0xa94>
 8112078:	03d09000 	.word	0x03d09000
 811207c:	003d0900 	.word	0x003d0900
 8112080:	081283fc 	.word	0x081283fc
 8112084:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8112088:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 811208c:	2b20      	cmp	r3, #32
 811208e:	dc49      	bgt.n	8112124 <UART_SetConfig+0x9d4>
 8112090:	2b00      	cmp	r3, #0
 8112092:	db7c      	blt.n	811218e <UART_SetConfig+0xa3e>
 8112094:	2b20      	cmp	r3, #32
 8112096:	d87a      	bhi.n	811218e <UART_SetConfig+0xa3e>
 8112098:	a201      	add	r2, pc, #4	@ (adr r2, 81120a0 <UART_SetConfig+0x950>)
 811209a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 811209e:	bf00      	nop
 81120a0:	0811212b 	.word	0x0811212b
 81120a4:	08112133 	.word	0x08112133
 81120a8:	0811218f 	.word	0x0811218f
 81120ac:	0811218f 	.word	0x0811218f
 81120b0:	0811213b 	.word	0x0811213b
 81120b4:	0811218f 	.word	0x0811218f
 81120b8:	0811218f 	.word	0x0811218f
 81120bc:	0811218f 	.word	0x0811218f
 81120c0:	0811214b 	.word	0x0811214b
 81120c4:	0811218f 	.word	0x0811218f
 81120c8:	0811218f 	.word	0x0811218f
 81120cc:	0811218f 	.word	0x0811218f
 81120d0:	0811218f 	.word	0x0811218f
 81120d4:	0811218f 	.word	0x0811218f
 81120d8:	0811218f 	.word	0x0811218f
 81120dc:	0811218f 	.word	0x0811218f
 81120e0:	0811215b 	.word	0x0811215b
 81120e4:	0811218f 	.word	0x0811218f
 81120e8:	0811218f 	.word	0x0811218f
 81120ec:	0811218f 	.word	0x0811218f
 81120f0:	0811218f 	.word	0x0811218f
 81120f4:	0811218f 	.word	0x0811218f
 81120f8:	0811218f 	.word	0x0811218f
 81120fc:	0811218f 	.word	0x0811218f
 8112100:	0811218f 	.word	0x0811218f
 8112104:	0811218f 	.word	0x0811218f
 8112108:	0811218f 	.word	0x0811218f
 811210c:	0811218f 	.word	0x0811218f
 8112110:	0811218f 	.word	0x0811218f
 8112114:	0811218f 	.word	0x0811218f
 8112118:	0811218f 	.word	0x0811218f
 811211c:	0811218f 	.word	0x0811218f
 8112120:	08112181 	.word	0x08112181
 8112124:	2b40      	cmp	r3, #64	@ 0x40
 8112126:	d02e      	beq.n	8112186 <UART_SetConfig+0xa36>
 8112128:	e031      	b.n	811218e <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 811212a:	f7fd f88b 	bl	810f244 <HAL_RCC_GetPCLK1Freq>
 811212e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8112130:	e033      	b.n	811219a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8112132:	f7fd f89d 	bl	810f270 <HAL_RCC_GetPCLK2Freq>
 8112136:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8112138:	e02f      	b.n	811219a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 811213a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 811213e:	4618      	mov	r0, r3
 8112140:	f7fe fb4e 	bl	81107e0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8112144:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8112146:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8112148:	e027      	b.n	811219a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 811214a:	f107 0318 	add.w	r3, r7, #24
 811214e:	4618      	mov	r0, r3
 8112150:	f7fe fc9a 	bl	8110a88 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8112154:	69fb      	ldr	r3, [r7, #28]
 8112156:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8112158:	e01f      	b.n	811219a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 811215a:	4b2d      	ldr	r3, [pc, #180]	@ (8112210 <UART_SetConfig+0xac0>)
 811215c:	681b      	ldr	r3, [r3, #0]
 811215e:	f003 0320 	and.w	r3, r3, #32
 8112162:	2b00      	cmp	r3, #0
 8112164:	d009      	beq.n	811217a <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8112166:	4b2a      	ldr	r3, [pc, #168]	@ (8112210 <UART_SetConfig+0xac0>)
 8112168:	681b      	ldr	r3, [r3, #0]
 811216a:	08db      	lsrs	r3, r3, #3
 811216c:	f003 0303 	and.w	r3, r3, #3
 8112170:	4a28      	ldr	r2, [pc, #160]	@ (8112214 <UART_SetConfig+0xac4>)
 8112172:	fa22 f303 	lsr.w	r3, r2, r3
 8112176:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8112178:	e00f      	b.n	811219a <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 811217a:	4b26      	ldr	r3, [pc, #152]	@ (8112214 <UART_SetConfig+0xac4>)
 811217c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 811217e:	e00c      	b.n	811219a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8112180:	4b25      	ldr	r3, [pc, #148]	@ (8112218 <UART_SetConfig+0xac8>)
 8112182:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8112184:	e009      	b.n	811219a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8112186:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 811218a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 811218c:	e005      	b.n	811219a <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 811218e:	2300      	movs	r3, #0
 8112190:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8112192:	2301      	movs	r3, #1
 8112194:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8112198:	bf00      	nop
    }

    if (pclk != 0U)
 811219a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 811219c:	2b00      	cmp	r3, #0
 811219e:	d021      	beq.n	81121e4 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 81121a0:	697b      	ldr	r3, [r7, #20]
 81121a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 81121a4:	4a1d      	ldr	r2, [pc, #116]	@ (811221c <UART_SetConfig+0xacc>)
 81121a6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 81121aa:	461a      	mov	r2, r3
 81121ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 81121ae:	fbb3 f2f2 	udiv	r2, r3, r2
 81121b2:	697b      	ldr	r3, [r7, #20]
 81121b4:	685b      	ldr	r3, [r3, #4]
 81121b6:	085b      	lsrs	r3, r3, #1
 81121b8:	441a      	add	r2, r3
 81121ba:	697b      	ldr	r3, [r7, #20]
 81121bc:	685b      	ldr	r3, [r3, #4]
 81121be:	fbb2 f3f3 	udiv	r3, r2, r3
 81121c2:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 81121c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81121c6:	2b0f      	cmp	r3, #15
 81121c8:	d909      	bls.n	81121de <UART_SetConfig+0xa8e>
 81121ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81121cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 81121d0:	d205      	bcs.n	81121de <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 81121d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81121d4:	b29a      	uxth	r2, r3
 81121d6:	697b      	ldr	r3, [r7, #20]
 81121d8:	681b      	ldr	r3, [r3, #0]
 81121da:	60da      	str	r2, [r3, #12]
 81121dc:	e002      	b.n	81121e4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 81121de:	2301      	movs	r3, #1
 81121e0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 81121e4:	697b      	ldr	r3, [r7, #20]
 81121e6:	2201      	movs	r2, #1
 81121e8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 81121ec:	697b      	ldr	r3, [r7, #20]
 81121ee:	2201      	movs	r2, #1
 81121f0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 81121f4:	697b      	ldr	r3, [r7, #20]
 81121f6:	2200      	movs	r2, #0
 81121f8:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 81121fa:	697b      	ldr	r3, [r7, #20]
 81121fc:	2200      	movs	r2, #0
 81121fe:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8112200:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8112204:	4618      	mov	r0, r3
 8112206:	3748      	adds	r7, #72	@ 0x48
 8112208:	46bd      	mov	sp, r7
 811220a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 811220e:	bf00      	nop
 8112210:	58024400 	.word	0x58024400
 8112214:	03d09000 	.word	0x03d09000
 8112218:	003d0900 	.word	0x003d0900
 811221c:	081283fc 	.word	0x081283fc

08112220 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8112220:	b480      	push	{r7}
 8112222:	b083      	sub	sp, #12
 8112224:	af00      	add	r7, sp, #0
 8112226:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8112228:	687b      	ldr	r3, [r7, #4]
 811222a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 811222c:	f003 0308 	and.w	r3, r3, #8
 8112230:	2b00      	cmp	r3, #0
 8112232:	d00a      	beq.n	811224a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8112234:	687b      	ldr	r3, [r7, #4]
 8112236:	681b      	ldr	r3, [r3, #0]
 8112238:	685b      	ldr	r3, [r3, #4]
 811223a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 811223e:	687b      	ldr	r3, [r7, #4]
 8112240:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8112242:	687b      	ldr	r3, [r7, #4]
 8112244:	681b      	ldr	r3, [r3, #0]
 8112246:	430a      	orrs	r2, r1
 8112248:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 811224a:	687b      	ldr	r3, [r7, #4]
 811224c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 811224e:	f003 0301 	and.w	r3, r3, #1
 8112252:	2b00      	cmp	r3, #0
 8112254:	d00a      	beq.n	811226c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8112256:	687b      	ldr	r3, [r7, #4]
 8112258:	681b      	ldr	r3, [r3, #0]
 811225a:	685b      	ldr	r3, [r3, #4]
 811225c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8112260:	687b      	ldr	r3, [r7, #4]
 8112262:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8112264:	687b      	ldr	r3, [r7, #4]
 8112266:	681b      	ldr	r3, [r3, #0]
 8112268:	430a      	orrs	r2, r1
 811226a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 811226c:	687b      	ldr	r3, [r7, #4]
 811226e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8112270:	f003 0302 	and.w	r3, r3, #2
 8112274:	2b00      	cmp	r3, #0
 8112276:	d00a      	beq.n	811228e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8112278:	687b      	ldr	r3, [r7, #4]
 811227a:	681b      	ldr	r3, [r3, #0]
 811227c:	685b      	ldr	r3, [r3, #4]
 811227e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8112282:	687b      	ldr	r3, [r7, #4]
 8112284:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8112286:	687b      	ldr	r3, [r7, #4]
 8112288:	681b      	ldr	r3, [r3, #0]
 811228a:	430a      	orrs	r2, r1
 811228c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 811228e:	687b      	ldr	r3, [r7, #4]
 8112290:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8112292:	f003 0304 	and.w	r3, r3, #4
 8112296:	2b00      	cmp	r3, #0
 8112298:	d00a      	beq.n	81122b0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 811229a:	687b      	ldr	r3, [r7, #4]
 811229c:	681b      	ldr	r3, [r3, #0]
 811229e:	685b      	ldr	r3, [r3, #4]
 81122a0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 81122a4:	687b      	ldr	r3, [r7, #4]
 81122a6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 81122a8:	687b      	ldr	r3, [r7, #4]
 81122aa:	681b      	ldr	r3, [r3, #0]
 81122ac:	430a      	orrs	r2, r1
 81122ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 81122b0:	687b      	ldr	r3, [r7, #4]
 81122b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81122b4:	f003 0310 	and.w	r3, r3, #16
 81122b8:	2b00      	cmp	r3, #0
 81122ba:	d00a      	beq.n	81122d2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 81122bc:	687b      	ldr	r3, [r7, #4]
 81122be:	681b      	ldr	r3, [r3, #0]
 81122c0:	689b      	ldr	r3, [r3, #8]
 81122c2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 81122c6:	687b      	ldr	r3, [r7, #4]
 81122c8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 81122ca:	687b      	ldr	r3, [r7, #4]
 81122cc:	681b      	ldr	r3, [r3, #0]
 81122ce:	430a      	orrs	r2, r1
 81122d0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 81122d2:	687b      	ldr	r3, [r7, #4]
 81122d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81122d6:	f003 0320 	and.w	r3, r3, #32
 81122da:	2b00      	cmp	r3, #0
 81122dc:	d00a      	beq.n	81122f4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 81122de:	687b      	ldr	r3, [r7, #4]
 81122e0:	681b      	ldr	r3, [r3, #0]
 81122e2:	689b      	ldr	r3, [r3, #8]
 81122e4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 81122e8:	687b      	ldr	r3, [r7, #4]
 81122ea:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 81122ec:	687b      	ldr	r3, [r7, #4]
 81122ee:	681b      	ldr	r3, [r3, #0]
 81122f0:	430a      	orrs	r2, r1
 81122f2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 81122f4:	687b      	ldr	r3, [r7, #4]
 81122f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81122f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 81122fc:	2b00      	cmp	r3, #0
 81122fe:	d01a      	beq.n	8112336 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8112300:	687b      	ldr	r3, [r7, #4]
 8112302:	681b      	ldr	r3, [r3, #0]
 8112304:	685b      	ldr	r3, [r3, #4]
 8112306:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 811230a:	687b      	ldr	r3, [r7, #4]
 811230c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 811230e:	687b      	ldr	r3, [r7, #4]
 8112310:	681b      	ldr	r3, [r3, #0]
 8112312:	430a      	orrs	r2, r1
 8112314:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8112316:	687b      	ldr	r3, [r7, #4]
 8112318:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 811231a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 811231e:	d10a      	bne.n	8112336 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8112320:	687b      	ldr	r3, [r7, #4]
 8112322:	681b      	ldr	r3, [r3, #0]
 8112324:	685b      	ldr	r3, [r3, #4]
 8112326:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 811232a:	687b      	ldr	r3, [r7, #4]
 811232c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 811232e:	687b      	ldr	r3, [r7, #4]
 8112330:	681b      	ldr	r3, [r3, #0]
 8112332:	430a      	orrs	r2, r1
 8112334:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8112336:	687b      	ldr	r3, [r7, #4]
 8112338:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 811233a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 811233e:	2b00      	cmp	r3, #0
 8112340:	d00a      	beq.n	8112358 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8112342:	687b      	ldr	r3, [r7, #4]
 8112344:	681b      	ldr	r3, [r3, #0]
 8112346:	685b      	ldr	r3, [r3, #4]
 8112348:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 811234c:	687b      	ldr	r3, [r7, #4]
 811234e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8112350:	687b      	ldr	r3, [r7, #4]
 8112352:	681b      	ldr	r3, [r3, #0]
 8112354:	430a      	orrs	r2, r1
 8112356:	605a      	str	r2, [r3, #4]
  }
}
 8112358:	bf00      	nop
 811235a:	370c      	adds	r7, #12
 811235c:	46bd      	mov	sp, r7
 811235e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8112362:	4770      	bx	lr

08112364 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8112364:	b580      	push	{r7, lr}
 8112366:	b098      	sub	sp, #96	@ 0x60
 8112368:	af02      	add	r7, sp, #8
 811236a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 811236c:	687b      	ldr	r3, [r7, #4]
 811236e:	2200      	movs	r2, #0
 8112370:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8112374:	f7f9 fe8c 	bl	810c090 <HAL_GetTick>
 8112378:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 811237a:	687b      	ldr	r3, [r7, #4]
 811237c:	681b      	ldr	r3, [r3, #0]
 811237e:	681b      	ldr	r3, [r3, #0]
 8112380:	f003 0308 	and.w	r3, r3, #8
 8112384:	2b08      	cmp	r3, #8
 8112386:	d12f      	bne.n	81123e8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8112388:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 811238c:	9300      	str	r3, [sp, #0]
 811238e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8112390:	2200      	movs	r2, #0
 8112392:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8112396:	6878      	ldr	r0, [r7, #4]
 8112398:	f000 f88e 	bl	81124b8 <UART_WaitOnFlagUntilTimeout>
 811239c:	4603      	mov	r3, r0
 811239e:	2b00      	cmp	r3, #0
 81123a0:	d022      	beq.n	81123e8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 81123a2:	687b      	ldr	r3, [r7, #4]
 81123a4:	681b      	ldr	r3, [r3, #0]
 81123a6:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 81123a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81123aa:	e853 3f00 	ldrex	r3, [r3]
 81123ae:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 81123b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81123b2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 81123b6:	653b      	str	r3, [r7, #80]	@ 0x50
 81123b8:	687b      	ldr	r3, [r7, #4]
 81123ba:	681b      	ldr	r3, [r3, #0]
 81123bc:	461a      	mov	r2, r3
 81123be:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 81123c0:	647b      	str	r3, [r7, #68]	@ 0x44
 81123c2:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 81123c4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 81123c6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 81123c8:	e841 2300 	strex	r3, r2, [r1]
 81123cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 81123ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 81123d0:	2b00      	cmp	r3, #0
 81123d2:	d1e6      	bne.n	81123a2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 81123d4:	687b      	ldr	r3, [r7, #4]
 81123d6:	2220      	movs	r2, #32
 81123d8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 81123dc:	687b      	ldr	r3, [r7, #4]
 81123de:	2200      	movs	r2, #0
 81123e0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 81123e4:	2303      	movs	r3, #3
 81123e6:	e063      	b.n	81124b0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 81123e8:	687b      	ldr	r3, [r7, #4]
 81123ea:	681b      	ldr	r3, [r3, #0]
 81123ec:	681b      	ldr	r3, [r3, #0]
 81123ee:	f003 0304 	and.w	r3, r3, #4
 81123f2:	2b04      	cmp	r3, #4
 81123f4:	d149      	bne.n	811248a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 81123f6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 81123fa:	9300      	str	r3, [sp, #0]
 81123fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 81123fe:	2200      	movs	r2, #0
 8112400:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8112404:	6878      	ldr	r0, [r7, #4]
 8112406:	f000 f857 	bl	81124b8 <UART_WaitOnFlagUntilTimeout>
 811240a:	4603      	mov	r3, r0
 811240c:	2b00      	cmp	r3, #0
 811240e:	d03c      	beq.n	811248a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8112410:	687b      	ldr	r3, [r7, #4]
 8112412:	681b      	ldr	r3, [r3, #0]
 8112414:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8112416:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8112418:	e853 3f00 	ldrex	r3, [r3]
 811241c:	623b      	str	r3, [r7, #32]
   return(result);
 811241e:	6a3b      	ldr	r3, [r7, #32]
 8112420:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8112424:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8112426:	687b      	ldr	r3, [r7, #4]
 8112428:	681b      	ldr	r3, [r3, #0]
 811242a:	461a      	mov	r2, r3
 811242c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 811242e:	633b      	str	r3, [r7, #48]	@ 0x30
 8112430:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8112432:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8112434:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8112436:	e841 2300 	strex	r3, r2, [r1]
 811243a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 811243c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 811243e:	2b00      	cmp	r3, #0
 8112440:	d1e6      	bne.n	8112410 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8112442:	687b      	ldr	r3, [r7, #4]
 8112444:	681b      	ldr	r3, [r3, #0]
 8112446:	3308      	adds	r3, #8
 8112448:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 811244a:	693b      	ldr	r3, [r7, #16]
 811244c:	e853 3f00 	ldrex	r3, [r3]
 8112450:	60fb      	str	r3, [r7, #12]
   return(result);
 8112452:	68fb      	ldr	r3, [r7, #12]
 8112454:	f023 0301 	bic.w	r3, r3, #1
 8112458:	64bb      	str	r3, [r7, #72]	@ 0x48
 811245a:	687b      	ldr	r3, [r7, #4]
 811245c:	681b      	ldr	r3, [r3, #0]
 811245e:	3308      	adds	r3, #8
 8112460:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8112462:	61fa      	str	r2, [r7, #28]
 8112464:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8112466:	69b9      	ldr	r1, [r7, #24]
 8112468:	69fa      	ldr	r2, [r7, #28]
 811246a:	e841 2300 	strex	r3, r2, [r1]
 811246e:	617b      	str	r3, [r7, #20]
   return(result);
 8112470:	697b      	ldr	r3, [r7, #20]
 8112472:	2b00      	cmp	r3, #0
 8112474:	d1e5      	bne.n	8112442 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8112476:	687b      	ldr	r3, [r7, #4]
 8112478:	2220      	movs	r2, #32
 811247a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 811247e:	687b      	ldr	r3, [r7, #4]
 8112480:	2200      	movs	r2, #0
 8112482:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8112486:	2303      	movs	r3, #3
 8112488:	e012      	b.n	81124b0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 811248a:	687b      	ldr	r3, [r7, #4]
 811248c:	2220      	movs	r2, #32
 811248e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8112492:	687b      	ldr	r3, [r7, #4]
 8112494:	2220      	movs	r2, #32
 8112496:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 811249a:	687b      	ldr	r3, [r7, #4]
 811249c:	2200      	movs	r2, #0
 811249e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 81124a0:	687b      	ldr	r3, [r7, #4]
 81124a2:	2200      	movs	r2, #0
 81124a4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 81124a6:	687b      	ldr	r3, [r7, #4]
 81124a8:	2200      	movs	r2, #0
 81124aa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 81124ae:	2300      	movs	r3, #0
}
 81124b0:	4618      	mov	r0, r3
 81124b2:	3758      	adds	r7, #88	@ 0x58
 81124b4:	46bd      	mov	sp, r7
 81124b6:	bd80      	pop	{r7, pc}

081124b8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 81124b8:	b580      	push	{r7, lr}
 81124ba:	b084      	sub	sp, #16
 81124bc:	af00      	add	r7, sp, #0
 81124be:	60f8      	str	r0, [r7, #12]
 81124c0:	60b9      	str	r1, [r7, #8]
 81124c2:	603b      	str	r3, [r7, #0]
 81124c4:	4613      	mov	r3, r2
 81124c6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 81124c8:	e04f      	b.n	811256a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 81124ca:	69bb      	ldr	r3, [r7, #24]
 81124cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 81124d0:	d04b      	beq.n	811256a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 81124d2:	f7f9 fddd 	bl	810c090 <HAL_GetTick>
 81124d6:	4602      	mov	r2, r0
 81124d8:	683b      	ldr	r3, [r7, #0]
 81124da:	1ad3      	subs	r3, r2, r3
 81124dc:	69ba      	ldr	r2, [r7, #24]
 81124de:	429a      	cmp	r2, r3
 81124e0:	d302      	bcc.n	81124e8 <UART_WaitOnFlagUntilTimeout+0x30>
 81124e2:	69bb      	ldr	r3, [r7, #24]
 81124e4:	2b00      	cmp	r3, #0
 81124e6:	d101      	bne.n	81124ec <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 81124e8:	2303      	movs	r3, #3
 81124ea:	e04e      	b.n	811258a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 81124ec:	68fb      	ldr	r3, [r7, #12]
 81124ee:	681b      	ldr	r3, [r3, #0]
 81124f0:	681b      	ldr	r3, [r3, #0]
 81124f2:	f003 0304 	and.w	r3, r3, #4
 81124f6:	2b00      	cmp	r3, #0
 81124f8:	d037      	beq.n	811256a <UART_WaitOnFlagUntilTimeout+0xb2>
 81124fa:	68bb      	ldr	r3, [r7, #8]
 81124fc:	2b80      	cmp	r3, #128	@ 0x80
 81124fe:	d034      	beq.n	811256a <UART_WaitOnFlagUntilTimeout+0xb2>
 8112500:	68bb      	ldr	r3, [r7, #8]
 8112502:	2b40      	cmp	r3, #64	@ 0x40
 8112504:	d031      	beq.n	811256a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8112506:	68fb      	ldr	r3, [r7, #12]
 8112508:	681b      	ldr	r3, [r3, #0]
 811250a:	69db      	ldr	r3, [r3, #28]
 811250c:	f003 0308 	and.w	r3, r3, #8
 8112510:	2b08      	cmp	r3, #8
 8112512:	d110      	bne.n	8112536 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8112514:	68fb      	ldr	r3, [r7, #12]
 8112516:	681b      	ldr	r3, [r3, #0]
 8112518:	2208      	movs	r2, #8
 811251a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 811251c:	68f8      	ldr	r0, [r7, #12]
 811251e:	f000 f838 	bl	8112592 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8112522:	68fb      	ldr	r3, [r7, #12]
 8112524:	2208      	movs	r2, #8
 8112526:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 811252a:	68fb      	ldr	r3, [r7, #12]
 811252c:	2200      	movs	r2, #0
 811252e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8112532:	2301      	movs	r3, #1
 8112534:	e029      	b.n	811258a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8112536:	68fb      	ldr	r3, [r7, #12]
 8112538:	681b      	ldr	r3, [r3, #0]
 811253a:	69db      	ldr	r3, [r3, #28]
 811253c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8112540:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8112544:	d111      	bne.n	811256a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8112546:	68fb      	ldr	r3, [r7, #12]
 8112548:	681b      	ldr	r3, [r3, #0]
 811254a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 811254e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8112550:	68f8      	ldr	r0, [r7, #12]
 8112552:	f000 f81e 	bl	8112592 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8112556:	68fb      	ldr	r3, [r7, #12]
 8112558:	2220      	movs	r2, #32
 811255a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 811255e:	68fb      	ldr	r3, [r7, #12]
 8112560:	2200      	movs	r2, #0
 8112562:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8112566:	2303      	movs	r3, #3
 8112568:	e00f      	b.n	811258a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 811256a:	68fb      	ldr	r3, [r7, #12]
 811256c:	681b      	ldr	r3, [r3, #0]
 811256e:	69da      	ldr	r2, [r3, #28]
 8112570:	68bb      	ldr	r3, [r7, #8]
 8112572:	4013      	ands	r3, r2
 8112574:	68ba      	ldr	r2, [r7, #8]
 8112576:	429a      	cmp	r2, r3
 8112578:	bf0c      	ite	eq
 811257a:	2301      	moveq	r3, #1
 811257c:	2300      	movne	r3, #0
 811257e:	b2db      	uxtb	r3, r3
 8112580:	461a      	mov	r2, r3
 8112582:	79fb      	ldrb	r3, [r7, #7]
 8112584:	429a      	cmp	r2, r3
 8112586:	d0a0      	beq.n	81124ca <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8112588:	2300      	movs	r3, #0
}
 811258a:	4618      	mov	r0, r3
 811258c:	3710      	adds	r7, #16
 811258e:	46bd      	mov	sp, r7
 8112590:	bd80      	pop	{r7, pc}

08112592 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8112592:	b480      	push	{r7}
 8112594:	b095      	sub	sp, #84	@ 0x54
 8112596:	af00      	add	r7, sp, #0
 8112598:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 811259a:	687b      	ldr	r3, [r7, #4]
 811259c:	681b      	ldr	r3, [r3, #0]
 811259e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 81125a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81125a2:	e853 3f00 	ldrex	r3, [r3]
 81125a6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 81125a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81125aa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 81125ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 81125b0:	687b      	ldr	r3, [r7, #4]
 81125b2:	681b      	ldr	r3, [r3, #0]
 81125b4:	461a      	mov	r2, r3
 81125b6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 81125b8:	643b      	str	r3, [r7, #64]	@ 0x40
 81125ba:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 81125bc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 81125be:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 81125c0:	e841 2300 	strex	r3, r2, [r1]
 81125c4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 81125c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81125c8:	2b00      	cmp	r3, #0
 81125ca:	d1e6      	bne.n	811259a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 81125cc:	687b      	ldr	r3, [r7, #4]
 81125ce:	681b      	ldr	r3, [r3, #0]
 81125d0:	3308      	adds	r3, #8
 81125d2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 81125d4:	6a3b      	ldr	r3, [r7, #32]
 81125d6:	e853 3f00 	ldrex	r3, [r3]
 81125da:	61fb      	str	r3, [r7, #28]
   return(result);
 81125dc:	69fb      	ldr	r3, [r7, #28]
 81125de:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 81125e2:	f023 0301 	bic.w	r3, r3, #1
 81125e6:	64bb      	str	r3, [r7, #72]	@ 0x48
 81125e8:	687b      	ldr	r3, [r7, #4]
 81125ea:	681b      	ldr	r3, [r3, #0]
 81125ec:	3308      	adds	r3, #8
 81125ee:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 81125f0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 81125f2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 81125f4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 81125f6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 81125f8:	e841 2300 	strex	r3, r2, [r1]
 81125fc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 81125fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8112600:	2b00      	cmp	r3, #0
 8112602:	d1e3      	bne.n	81125cc <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8112604:	687b      	ldr	r3, [r7, #4]
 8112606:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8112608:	2b01      	cmp	r3, #1
 811260a:	d118      	bne.n	811263e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 811260c:	687b      	ldr	r3, [r7, #4]
 811260e:	681b      	ldr	r3, [r3, #0]
 8112610:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8112612:	68fb      	ldr	r3, [r7, #12]
 8112614:	e853 3f00 	ldrex	r3, [r3]
 8112618:	60bb      	str	r3, [r7, #8]
   return(result);
 811261a:	68bb      	ldr	r3, [r7, #8]
 811261c:	f023 0310 	bic.w	r3, r3, #16
 8112620:	647b      	str	r3, [r7, #68]	@ 0x44
 8112622:	687b      	ldr	r3, [r7, #4]
 8112624:	681b      	ldr	r3, [r3, #0]
 8112626:	461a      	mov	r2, r3
 8112628:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 811262a:	61bb      	str	r3, [r7, #24]
 811262c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 811262e:	6979      	ldr	r1, [r7, #20]
 8112630:	69ba      	ldr	r2, [r7, #24]
 8112632:	e841 2300 	strex	r3, r2, [r1]
 8112636:	613b      	str	r3, [r7, #16]
   return(result);
 8112638:	693b      	ldr	r3, [r7, #16]
 811263a:	2b00      	cmp	r3, #0
 811263c:	d1e6      	bne.n	811260c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 811263e:	687b      	ldr	r3, [r7, #4]
 8112640:	2220      	movs	r2, #32
 8112642:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8112646:	687b      	ldr	r3, [r7, #4]
 8112648:	2200      	movs	r2, #0
 811264a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 811264c:	687b      	ldr	r3, [r7, #4]
 811264e:	2200      	movs	r2, #0
 8112650:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8112652:	bf00      	nop
 8112654:	3754      	adds	r7, #84	@ 0x54
 8112656:	46bd      	mov	sp, r7
 8112658:	f85d 7b04 	ldr.w	r7, [sp], #4
 811265c:	4770      	bx	lr

0811265e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 811265e:	b480      	push	{r7}
 8112660:	b085      	sub	sp, #20
 8112662:	af00      	add	r7, sp, #0
 8112664:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8112666:	687b      	ldr	r3, [r7, #4]
 8112668:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 811266c:	2b01      	cmp	r3, #1
 811266e:	d101      	bne.n	8112674 <HAL_UARTEx_DisableFifoMode+0x16>
 8112670:	2302      	movs	r3, #2
 8112672:	e027      	b.n	81126c4 <HAL_UARTEx_DisableFifoMode+0x66>
 8112674:	687b      	ldr	r3, [r7, #4]
 8112676:	2201      	movs	r2, #1
 8112678:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 811267c:	687b      	ldr	r3, [r7, #4]
 811267e:	2224      	movs	r2, #36	@ 0x24
 8112680:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8112684:	687b      	ldr	r3, [r7, #4]
 8112686:	681b      	ldr	r3, [r3, #0]
 8112688:	681b      	ldr	r3, [r3, #0]
 811268a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 811268c:	687b      	ldr	r3, [r7, #4]
 811268e:	681b      	ldr	r3, [r3, #0]
 8112690:	681a      	ldr	r2, [r3, #0]
 8112692:	687b      	ldr	r3, [r7, #4]
 8112694:	681b      	ldr	r3, [r3, #0]
 8112696:	f022 0201 	bic.w	r2, r2, #1
 811269a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 811269c:	68fb      	ldr	r3, [r7, #12]
 811269e:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 81126a2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 81126a4:	687b      	ldr	r3, [r7, #4]
 81126a6:	2200      	movs	r2, #0
 81126a8:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 81126aa:	687b      	ldr	r3, [r7, #4]
 81126ac:	681b      	ldr	r3, [r3, #0]
 81126ae:	68fa      	ldr	r2, [r7, #12]
 81126b0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 81126b2:	687b      	ldr	r3, [r7, #4]
 81126b4:	2220      	movs	r2, #32
 81126b6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 81126ba:	687b      	ldr	r3, [r7, #4]
 81126bc:	2200      	movs	r2, #0
 81126be:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 81126c2:	2300      	movs	r3, #0
}
 81126c4:	4618      	mov	r0, r3
 81126c6:	3714      	adds	r7, #20
 81126c8:	46bd      	mov	sp, r7
 81126ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 81126ce:	4770      	bx	lr

081126d0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 81126d0:	b580      	push	{r7, lr}
 81126d2:	b084      	sub	sp, #16
 81126d4:	af00      	add	r7, sp, #0
 81126d6:	6078      	str	r0, [r7, #4]
 81126d8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 81126da:	687b      	ldr	r3, [r7, #4]
 81126dc:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 81126e0:	2b01      	cmp	r3, #1
 81126e2:	d101      	bne.n	81126e8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 81126e4:	2302      	movs	r3, #2
 81126e6:	e02d      	b.n	8112744 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 81126e8:	687b      	ldr	r3, [r7, #4]
 81126ea:	2201      	movs	r2, #1
 81126ec:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 81126f0:	687b      	ldr	r3, [r7, #4]
 81126f2:	2224      	movs	r2, #36	@ 0x24
 81126f4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 81126f8:	687b      	ldr	r3, [r7, #4]
 81126fa:	681b      	ldr	r3, [r3, #0]
 81126fc:	681b      	ldr	r3, [r3, #0]
 81126fe:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8112700:	687b      	ldr	r3, [r7, #4]
 8112702:	681b      	ldr	r3, [r3, #0]
 8112704:	681a      	ldr	r2, [r3, #0]
 8112706:	687b      	ldr	r3, [r7, #4]
 8112708:	681b      	ldr	r3, [r3, #0]
 811270a:	f022 0201 	bic.w	r2, r2, #1
 811270e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8112710:	687b      	ldr	r3, [r7, #4]
 8112712:	681b      	ldr	r3, [r3, #0]
 8112714:	689b      	ldr	r3, [r3, #8]
 8112716:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 811271a:	687b      	ldr	r3, [r7, #4]
 811271c:	681b      	ldr	r3, [r3, #0]
 811271e:	683a      	ldr	r2, [r7, #0]
 8112720:	430a      	orrs	r2, r1
 8112722:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8112724:	6878      	ldr	r0, [r7, #4]
 8112726:	f000 f84f 	bl	81127c8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 811272a:	687b      	ldr	r3, [r7, #4]
 811272c:	681b      	ldr	r3, [r3, #0]
 811272e:	68fa      	ldr	r2, [r7, #12]
 8112730:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8112732:	687b      	ldr	r3, [r7, #4]
 8112734:	2220      	movs	r2, #32
 8112736:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 811273a:	687b      	ldr	r3, [r7, #4]
 811273c:	2200      	movs	r2, #0
 811273e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8112742:	2300      	movs	r3, #0
}
 8112744:	4618      	mov	r0, r3
 8112746:	3710      	adds	r7, #16
 8112748:	46bd      	mov	sp, r7
 811274a:	bd80      	pop	{r7, pc}

0811274c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 811274c:	b580      	push	{r7, lr}
 811274e:	b084      	sub	sp, #16
 8112750:	af00      	add	r7, sp, #0
 8112752:	6078      	str	r0, [r7, #4]
 8112754:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8112756:	687b      	ldr	r3, [r7, #4]
 8112758:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 811275c:	2b01      	cmp	r3, #1
 811275e:	d101      	bne.n	8112764 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8112760:	2302      	movs	r3, #2
 8112762:	e02d      	b.n	81127c0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8112764:	687b      	ldr	r3, [r7, #4]
 8112766:	2201      	movs	r2, #1
 8112768:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 811276c:	687b      	ldr	r3, [r7, #4]
 811276e:	2224      	movs	r2, #36	@ 0x24
 8112770:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8112774:	687b      	ldr	r3, [r7, #4]
 8112776:	681b      	ldr	r3, [r3, #0]
 8112778:	681b      	ldr	r3, [r3, #0]
 811277a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 811277c:	687b      	ldr	r3, [r7, #4]
 811277e:	681b      	ldr	r3, [r3, #0]
 8112780:	681a      	ldr	r2, [r3, #0]
 8112782:	687b      	ldr	r3, [r7, #4]
 8112784:	681b      	ldr	r3, [r3, #0]
 8112786:	f022 0201 	bic.w	r2, r2, #1
 811278a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 811278c:	687b      	ldr	r3, [r7, #4]
 811278e:	681b      	ldr	r3, [r3, #0]
 8112790:	689b      	ldr	r3, [r3, #8]
 8112792:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8112796:	687b      	ldr	r3, [r7, #4]
 8112798:	681b      	ldr	r3, [r3, #0]
 811279a:	683a      	ldr	r2, [r7, #0]
 811279c:	430a      	orrs	r2, r1
 811279e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 81127a0:	6878      	ldr	r0, [r7, #4]
 81127a2:	f000 f811 	bl	81127c8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 81127a6:	687b      	ldr	r3, [r7, #4]
 81127a8:	681b      	ldr	r3, [r3, #0]
 81127aa:	68fa      	ldr	r2, [r7, #12]
 81127ac:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 81127ae:	687b      	ldr	r3, [r7, #4]
 81127b0:	2220      	movs	r2, #32
 81127b2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 81127b6:	687b      	ldr	r3, [r7, #4]
 81127b8:	2200      	movs	r2, #0
 81127ba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 81127be:	2300      	movs	r3, #0
}
 81127c0:	4618      	mov	r0, r3
 81127c2:	3710      	adds	r7, #16
 81127c4:	46bd      	mov	sp, r7
 81127c6:	bd80      	pop	{r7, pc}

081127c8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 81127c8:	b480      	push	{r7}
 81127ca:	b085      	sub	sp, #20
 81127cc:	af00      	add	r7, sp, #0
 81127ce:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 81127d0:	687b      	ldr	r3, [r7, #4]
 81127d2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 81127d4:	2b00      	cmp	r3, #0
 81127d6:	d108      	bne.n	81127ea <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 81127d8:	687b      	ldr	r3, [r7, #4]
 81127da:	2201      	movs	r2, #1
 81127dc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 81127e0:	687b      	ldr	r3, [r7, #4]
 81127e2:	2201      	movs	r2, #1
 81127e4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 81127e8:	e031      	b.n	811284e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 81127ea:	2310      	movs	r3, #16
 81127ec:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 81127ee:	2310      	movs	r3, #16
 81127f0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 81127f2:	687b      	ldr	r3, [r7, #4]
 81127f4:	681b      	ldr	r3, [r3, #0]
 81127f6:	689b      	ldr	r3, [r3, #8]
 81127f8:	0e5b      	lsrs	r3, r3, #25
 81127fa:	b2db      	uxtb	r3, r3
 81127fc:	f003 0307 	and.w	r3, r3, #7
 8112800:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8112802:	687b      	ldr	r3, [r7, #4]
 8112804:	681b      	ldr	r3, [r3, #0]
 8112806:	689b      	ldr	r3, [r3, #8]
 8112808:	0f5b      	lsrs	r3, r3, #29
 811280a:	b2db      	uxtb	r3, r3
 811280c:	f003 0307 	and.w	r3, r3, #7
 8112810:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8112812:	7bbb      	ldrb	r3, [r7, #14]
 8112814:	7b3a      	ldrb	r2, [r7, #12]
 8112816:	4911      	ldr	r1, [pc, #68]	@ (811285c <UARTEx_SetNbDataToProcess+0x94>)
 8112818:	5c8a      	ldrb	r2, [r1, r2]
 811281a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 811281e:	7b3a      	ldrb	r2, [r7, #12]
 8112820:	490f      	ldr	r1, [pc, #60]	@ (8112860 <UARTEx_SetNbDataToProcess+0x98>)
 8112822:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8112824:	fb93 f3f2 	sdiv	r3, r3, r2
 8112828:	b29a      	uxth	r2, r3
 811282a:	687b      	ldr	r3, [r7, #4]
 811282c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8112830:	7bfb      	ldrb	r3, [r7, #15]
 8112832:	7b7a      	ldrb	r2, [r7, #13]
 8112834:	4909      	ldr	r1, [pc, #36]	@ (811285c <UARTEx_SetNbDataToProcess+0x94>)
 8112836:	5c8a      	ldrb	r2, [r1, r2]
 8112838:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 811283c:	7b7a      	ldrb	r2, [r7, #13]
 811283e:	4908      	ldr	r1, [pc, #32]	@ (8112860 <UARTEx_SetNbDataToProcess+0x98>)
 8112840:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8112842:	fb93 f3f2 	sdiv	r3, r3, r2
 8112846:	b29a      	uxth	r2, r3
 8112848:	687b      	ldr	r3, [r7, #4]
 811284a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 811284e:	bf00      	nop
 8112850:	3714      	adds	r7, #20
 8112852:	46bd      	mov	sp, r7
 8112854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8112858:	4770      	bx	lr
 811285a:	bf00      	nop
 811285c:	08128414 	.word	0x08128414
 8112860:	0812841c 	.word	0x0812841c

08112864 <__NVIC_SetPriority>:
{
 8112864:	b480      	push	{r7}
 8112866:	b083      	sub	sp, #12
 8112868:	af00      	add	r7, sp, #0
 811286a:	4603      	mov	r3, r0
 811286c:	6039      	str	r1, [r7, #0]
 811286e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8112870:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8112874:	2b00      	cmp	r3, #0
 8112876:	db0a      	blt.n	811288e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8112878:	683b      	ldr	r3, [r7, #0]
 811287a:	b2da      	uxtb	r2, r3
 811287c:	490c      	ldr	r1, [pc, #48]	@ (81128b0 <__NVIC_SetPriority+0x4c>)
 811287e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8112882:	0112      	lsls	r2, r2, #4
 8112884:	b2d2      	uxtb	r2, r2
 8112886:	440b      	add	r3, r1
 8112888:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 811288c:	e00a      	b.n	81128a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 811288e:	683b      	ldr	r3, [r7, #0]
 8112890:	b2da      	uxtb	r2, r3
 8112892:	4908      	ldr	r1, [pc, #32]	@ (81128b4 <__NVIC_SetPriority+0x50>)
 8112894:	88fb      	ldrh	r3, [r7, #6]
 8112896:	f003 030f 	and.w	r3, r3, #15
 811289a:	3b04      	subs	r3, #4
 811289c:	0112      	lsls	r2, r2, #4
 811289e:	b2d2      	uxtb	r2, r2
 81128a0:	440b      	add	r3, r1
 81128a2:	761a      	strb	r2, [r3, #24]
}
 81128a4:	bf00      	nop
 81128a6:	370c      	adds	r7, #12
 81128a8:	46bd      	mov	sp, r7
 81128aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 81128ae:	4770      	bx	lr
 81128b0:	e000e100 	.word	0xe000e100
 81128b4:	e000ed00 	.word	0xe000ed00

081128b8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 81128b8:	b580      	push	{r7, lr}
 81128ba:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 81128bc:	4b05      	ldr	r3, [pc, #20]	@ (81128d4 <SysTick_Handler+0x1c>)
 81128be:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 81128c0:	f003 fd5c 	bl	811637c <xTaskGetSchedulerState>
 81128c4:	4603      	mov	r3, r0
 81128c6:	2b01      	cmp	r3, #1
 81128c8:	d001      	beq.n	81128ce <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 81128ca:	f001 f915 	bl	8113af8 <xPortSysTickHandler>
  }
}
 81128ce:	bf00      	nop
 81128d0:	bd80      	pop	{r7, pc}
 81128d2:	bf00      	nop
 81128d4:	e000e010 	.word	0xe000e010

081128d8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 81128d8:	b580      	push	{r7, lr}
 81128da:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 81128dc:	2100      	movs	r1, #0
 81128de:	f06f 0004 	mvn.w	r0, #4
 81128e2:	f7ff ffbf 	bl	8112864 <__NVIC_SetPriority>
#endif
}
 81128e6:	bf00      	nop
 81128e8:	bd80      	pop	{r7, pc}
	...

081128ec <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 81128ec:	b480      	push	{r7}
 81128ee:	b083      	sub	sp, #12
 81128f0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 81128f2:	f3ef 8305 	mrs	r3, IPSR
 81128f6:	603b      	str	r3, [r7, #0]
  return(result);
 81128f8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 81128fa:	2b00      	cmp	r3, #0
 81128fc:	d003      	beq.n	8112906 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 81128fe:	f06f 0305 	mvn.w	r3, #5
 8112902:	607b      	str	r3, [r7, #4]
 8112904:	e00c      	b.n	8112920 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8112906:	4b0a      	ldr	r3, [pc, #40]	@ (8112930 <osKernelInitialize+0x44>)
 8112908:	681b      	ldr	r3, [r3, #0]
 811290a:	2b00      	cmp	r3, #0
 811290c:	d105      	bne.n	811291a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 811290e:	4b08      	ldr	r3, [pc, #32]	@ (8112930 <osKernelInitialize+0x44>)
 8112910:	2201      	movs	r2, #1
 8112912:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8112914:	2300      	movs	r3, #0
 8112916:	607b      	str	r3, [r7, #4]
 8112918:	e002      	b.n	8112920 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 811291a:	f04f 33ff 	mov.w	r3, #4294967295
 811291e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8112920:	687b      	ldr	r3, [r7, #4]
}
 8112922:	4618      	mov	r0, r3
 8112924:	370c      	adds	r7, #12
 8112926:	46bd      	mov	sp, r7
 8112928:	f85d 7b04 	ldr.w	r7, [sp], #4
 811292c:	4770      	bx	lr
 811292e:	bf00      	nop
 8112930:	10000424 	.word	0x10000424

08112934 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8112934:	b580      	push	{r7, lr}
 8112936:	b082      	sub	sp, #8
 8112938:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 811293a:	f3ef 8305 	mrs	r3, IPSR
 811293e:	603b      	str	r3, [r7, #0]
  return(result);
 8112940:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8112942:	2b00      	cmp	r3, #0
 8112944:	d003      	beq.n	811294e <osKernelStart+0x1a>
    stat = osErrorISR;
 8112946:	f06f 0305 	mvn.w	r3, #5
 811294a:	607b      	str	r3, [r7, #4]
 811294c:	e010      	b.n	8112970 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 811294e:	4b0b      	ldr	r3, [pc, #44]	@ (811297c <osKernelStart+0x48>)
 8112950:	681b      	ldr	r3, [r3, #0]
 8112952:	2b01      	cmp	r3, #1
 8112954:	d109      	bne.n	811296a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8112956:	f7ff ffbf 	bl	81128d8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 811295a:	4b08      	ldr	r3, [pc, #32]	@ (811297c <osKernelStart+0x48>)
 811295c:	2202      	movs	r2, #2
 811295e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8112960:	f003 f85e 	bl	8115a20 <vTaskStartScheduler>
      stat = osOK;
 8112964:	2300      	movs	r3, #0
 8112966:	607b      	str	r3, [r7, #4]
 8112968:	e002      	b.n	8112970 <osKernelStart+0x3c>
    } else {
      stat = osError;
 811296a:	f04f 33ff 	mov.w	r3, #4294967295
 811296e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8112970:	687b      	ldr	r3, [r7, #4]
}
 8112972:	4618      	mov	r0, r3
 8112974:	3708      	adds	r7, #8
 8112976:	46bd      	mov	sp, r7
 8112978:	bd80      	pop	{r7, pc}
 811297a:	bf00      	nop
 811297c:	10000424 	.word	0x10000424

08112980 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8112980:	b580      	push	{r7, lr}
 8112982:	b082      	sub	sp, #8
 8112984:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8112986:	f3ef 8305 	mrs	r3, IPSR
 811298a:	603b      	str	r3, [r7, #0]
  return(result);
 811298c:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 811298e:	2b00      	cmp	r3, #0
 8112990:	d003      	beq.n	811299a <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 8112992:	f003 f971 	bl	8115c78 <xTaskGetTickCountFromISR>
 8112996:	6078      	str	r0, [r7, #4]
 8112998:	e002      	b.n	81129a0 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 811299a:	f003 f95d 	bl	8115c58 <xTaskGetTickCount>
 811299e:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 81129a0:	687b      	ldr	r3, [r7, #4]
}
 81129a2:	4618      	mov	r0, r3
 81129a4:	3708      	adds	r7, #8
 81129a6:	46bd      	mov	sp, r7
 81129a8:	bd80      	pop	{r7, pc}

081129aa <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 81129aa:	b580      	push	{r7, lr}
 81129ac:	b08e      	sub	sp, #56	@ 0x38
 81129ae:	af04      	add	r7, sp, #16
 81129b0:	60f8      	str	r0, [r7, #12]
 81129b2:	60b9      	str	r1, [r7, #8]
 81129b4:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 81129b6:	2300      	movs	r3, #0
 81129b8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 81129ba:	f3ef 8305 	mrs	r3, IPSR
 81129be:	617b      	str	r3, [r7, #20]
  return(result);
 81129c0:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 81129c2:	2b00      	cmp	r3, #0
 81129c4:	d17e      	bne.n	8112ac4 <osThreadNew+0x11a>
 81129c6:	68fb      	ldr	r3, [r7, #12]
 81129c8:	2b00      	cmp	r3, #0
 81129ca:	d07b      	beq.n	8112ac4 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 81129cc:	2380      	movs	r3, #128	@ 0x80
 81129ce:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 81129d0:	2318      	movs	r3, #24
 81129d2:	61fb      	str	r3, [r7, #28]

    name = NULL;
 81129d4:	2300      	movs	r3, #0
 81129d6:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 81129d8:	f04f 33ff 	mov.w	r3, #4294967295
 81129dc:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 81129de:	687b      	ldr	r3, [r7, #4]
 81129e0:	2b00      	cmp	r3, #0
 81129e2:	d045      	beq.n	8112a70 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 81129e4:	687b      	ldr	r3, [r7, #4]
 81129e6:	681b      	ldr	r3, [r3, #0]
 81129e8:	2b00      	cmp	r3, #0
 81129ea:	d002      	beq.n	81129f2 <osThreadNew+0x48>
        name = attr->name;
 81129ec:	687b      	ldr	r3, [r7, #4]
 81129ee:	681b      	ldr	r3, [r3, #0]
 81129f0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 81129f2:	687b      	ldr	r3, [r7, #4]
 81129f4:	699b      	ldr	r3, [r3, #24]
 81129f6:	2b00      	cmp	r3, #0
 81129f8:	d002      	beq.n	8112a00 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 81129fa:	687b      	ldr	r3, [r7, #4]
 81129fc:	699b      	ldr	r3, [r3, #24]
 81129fe:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8112a00:	69fb      	ldr	r3, [r7, #28]
 8112a02:	2b00      	cmp	r3, #0
 8112a04:	d008      	beq.n	8112a18 <osThreadNew+0x6e>
 8112a06:	69fb      	ldr	r3, [r7, #28]
 8112a08:	2b38      	cmp	r3, #56	@ 0x38
 8112a0a:	d805      	bhi.n	8112a18 <osThreadNew+0x6e>
 8112a0c:	687b      	ldr	r3, [r7, #4]
 8112a0e:	685b      	ldr	r3, [r3, #4]
 8112a10:	f003 0301 	and.w	r3, r3, #1
 8112a14:	2b00      	cmp	r3, #0
 8112a16:	d001      	beq.n	8112a1c <osThreadNew+0x72>
        return (NULL);
 8112a18:	2300      	movs	r3, #0
 8112a1a:	e054      	b.n	8112ac6 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8112a1c:	687b      	ldr	r3, [r7, #4]
 8112a1e:	695b      	ldr	r3, [r3, #20]
 8112a20:	2b00      	cmp	r3, #0
 8112a22:	d003      	beq.n	8112a2c <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8112a24:	687b      	ldr	r3, [r7, #4]
 8112a26:	695b      	ldr	r3, [r3, #20]
 8112a28:	089b      	lsrs	r3, r3, #2
 8112a2a:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8112a2c:	687b      	ldr	r3, [r7, #4]
 8112a2e:	689b      	ldr	r3, [r3, #8]
 8112a30:	2b00      	cmp	r3, #0
 8112a32:	d00e      	beq.n	8112a52 <osThreadNew+0xa8>
 8112a34:	687b      	ldr	r3, [r7, #4]
 8112a36:	68db      	ldr	r3, [r3, #12]
 8112a38:	2ba7      	cmp	r3, #167	@ 0xa7
 8112a3a:	d90a      	bls.n	8112a52 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8112a3c:	687b      	ldr	r3, [r7, #4]
 8112a3e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8112a40:	2b00      	cmp	r3, #0
 8112a42:	d006      	beq.n	8112a52 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8112a44:	687b      	ldr	r3, [r7, #4]
 8112a46:	695b      	ldr	r3, [r3, #20]
 8112a48:	2b00      	cmp	r3, #0
 8112a4a:	d002      	beq.n	8112a52 <osThreadNew+0xa8>
        mem = 1;
 8112a4c:	2301      	movs	r3, #1
 8112a4e:	61bb      	str	r3, [r7, #24]
 8112a50:	e010      	b.n	8112a74 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8112a52:	687b      	ldr	r3, [r7, #4]
 8112a54:	689b      	ldr	r3, [r3, #8]
 8112a56:	2b00      	cmp	r3, #0
 8112a58:	d10c      	bne.n	8112a74 <osThreadNew+0xca>
 8112a5a:	687b      	ldr	r3, [r7, #4]
 8112a5c:	68db      	ldr	r3, [r3, #12]
 8112a5e:	2b00      	cmp	r3, #0
 8112a60:	d108      	bne.n	8112a74 <osThreadNew+0xca>
 8112a62:	687b      	ldr	r3, [r7, #4]
 8112a64:	691b      	ldr	r3, [r3, #16]
 8112a66:	2b00      	cmp	r3, #0
 8112a68:	d104      	bne.n	8112a74 <osThreadNew+0xca>
          mem = 0;
 8112a6a:	2300      	movs	r3, #0
 8112a6c:	61bb      	str	r3, [r7, #24]
 8112a6e:	e001      	b.n	8112a74 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8112a70:	2300      	movs	r3, #0
 8112a72:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8112a74:	69bb      	ldr	r3, [r7, #24]
 8112a76:	2b01      	cmp	r3, #1
 8112a78:	d110      	bne.n	8112a9c <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8112a7a:	687b      	ldr	r3, [r7, #4]
 8112a7c:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8112a7e:	687a      	ldr	r2, [r7, #4]
 8112a80:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8112a82:	9202      	str	r2, [sp, #8]
 8112a84:	9301      	str	r3, [sp, #4]
 8112a86:	69fb      	ldr	r3, [r7, #28]
 8112a88:	9300      	str	r3, [sp, #0]
 8112a8a:	68bb      	ldr	r3, [r7, #8]
 8112a8c:	6a3a      	ldr	r2, [r7, #32]
 8112a8e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8112a90:	68f8      	ldr	r0, [r7, #12]
 8112a92:	f002 fdd1 	bl	8115638 <xTaskCreateStatic>
 8112a96:	4603      	mov	r3, r0
 8112a98:	613b      	str	r3, [r7, #16]
 8112a9a:	e013      	b.n	8112ac4 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8112a9c:	69bb      	ldr	r3, [r7, #24]
 8112a9e:	2b00      	cmp	r3, #0
 8112aa0:	d110      	bne.n	8112ac4 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8112aa2:	6a3b      	ldr	r3, [r7, #32]
 8112aa4:	b29a      	uxth	r2, r3
 8112aa6:	f107 0310 	add.w	r3, r7, #16
 8112aaa:	9301      	str	r3, [sp, #4]
 8112aac:	69fb      	ldr	r3, [r7, #28]
 8112aae:	9300      	str	r3, [sp, #0]
 8112ab0:	68bb      	ldr	r3, [r7, #8]
 8112ab2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8112ab4:	68f8      	ldr	r0, [r7, #12]
 8112ab6:	f002 fe1f 	bl	81156f8 <xTaskCreate>
 8112aba:	4603      	mov	r3, r0
 8112abc:	2b01      	cmp	r3, #1
 8112abe:	d001      	beq.n	8112ac4 <osThreadNew+0x11a>
            hTask = NULL;
 8112ac0:	2300      	movs	r3, #0
 8112ac2:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8112ac4:	693b      	ldr	r3, [r7, #16]
}
 8112ac6:	4618      	mov	r0, r3
 8112ac8:	3728      	adds	r7, #40	@ 0x28
 8112aca:	46bd      	mov	sp, r7
 8112acc:	bd80      	pop	{r7, pc}

08112ace <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8112ace:	b580      	push	{r7, lr}
 8112ad0:	b084      	sub	sp, #16
 8112ad2:	af00      	add	r7, sp, #0
 8112ad4:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8112ad6:	f3ef 8305 	mrs	r3, IPSR
 8112ada:	60bb      	str	r3, [r7, #8]
  return(result);
 8112adc:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8112ade:	2b00      	cmp	r3, #0
 8112ae0:	d003      	beq.n	8112aea <osDelay+0x1c>
    stat = osErrorISR;
 8112ae2:	f06f 0305 	mvn.w	r3, #5
 8112ae6:	60fb      	str	r3, [r7, #12]
 8112ae8:	e007      	b.n	8112afa <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8112aea:	2300      	movs	r3, #0
 8112aec:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8112aee:	687b      	ldr	r3, [r7, #4]
 8112af0:	2b00      	cmp	r3, #0
 8112af2:	d002      	beq.n	8112afa <osDelay+0x2c>
      vTaskDelay(ticks);
 8112af4:	6878      	ldr	r0, [r7, #4]
 8112af6:	f002 ff5d 	bl	81159b4 <vTaskDelay>
    }
  }

  return (stat);
 8112afa:	68fb      	ldr	r3, [r7, #12]
}
 8112afc:	4618      	mov	r0, r3
 8112afe:	3710      	adds	r7, #16
 8112b00:	46bd      	mov	sp, r7
 8112b02:	bd80      	pop	{r7, pc}

08112b04 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8112b04:	b580      	push	{r7, lr}
 8112b06:	b088      	sub	sp, #32
 8112b08:	af00      	add	r7, sp, #0
 8112b0a:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8112b0c:	2300      	movs	r3, #0
 8112b0e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8112b10:	f3ef 8305 	mrs	r3, IPSR
 8112b14:	60bb      	str	r3, [r7, #8]
  return(result);
 8112b16:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8112b18:	2b00      	cmp	r3, #0
 8112b1a:	d174      	bne.n	8112c06 <osMutexNew+0x102>
    if (attr != NULL) {
 8112b1c:	687b      	ldr	r3, [r7, #4]
 8112b1e:	2b00      	cmp	r3, #0
 8112b20:	d003      	beq.n	8112b2a <osMutexNew+0x26>
      type = attr->attr_bits;
 8112b22:	687b      	ldr	r3, [r7, #4]
 8112b24:	685b      	ldr	r3, [r3, #4]
 8112b26:	61bb      	str	r3, [r7, #24]
 8112b28:	e001      	b.n	8112b2e <osMutexNew+0x2a>
    } else {
      type = 0U;
 8112b2a:	2300      	movs	r3, #0
 8112b2c:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8112b2e:	69bb      	ldr	r3, [r7, #24]
 8112b30:	f003 0301 	and.w	r3, r3, #1
 8112b34:	2b00      	cmp	r3, #0
 8112b36:	d002      	beq.n	8112b3e <osMutexNew+0x3a>
      rmtx = 1U;
 8112b38:	2301      	movs	r3, #1
 8112b3a:	617b      	str	r3, [r7, #20]
 8112b3c:	e001      	b.n	8112b42 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8112b3e:	2300      	movs	r3, #0
 8112b40:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8112b42:	69bb      	ldr	r3, [r7, #24]
 8112b44:	f003 0308 	and.w	r3, r3, #8
 8112b48:	2b00      	cmp	r3, #0
 8112b4a:	d15c      	bne.n	8112c06 <osMutexNew+0x102>
      mem = -1;
 8112b4c:	f04f 33ff 	mov.w	r3, #4294967295
 8112b50:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8112b52:	687b      	ldr	r3, [r7, #4]
 8112b54:	2b00      	cmp	r3, #0
 8112b56:	d015      	beq.n	8112b84 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8112b58:	687b      	ldr	r3, [r7, #4]
 8112b5a:	689b      	ldr	r3, [r3, #8]
 8112b5c:	2b00      	cmp	r3, #0
 8112b5e:	d006      	beq.n	8112b6e <osMutexNew+0x6a>
 8112b60:	687b      	ldr	r3, [r7, #4]
 8112b62:	68db      	ldr	r3, [r3, #12]
 8112b64:	2b4f      	cmp	r3, #79	@ 0x4f
 8112b66:	d902      	bls.n	8112b6e <osMutexNew+0x6a>
          mem = 1;
 8112b68:	2301      	movs	r3, #1
 8112b6a:	613b      	str	r3, [r7, #16]
 8112b6c:	e00c      	b.n	8112b88 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8112b6e:	687b      	ldr	r3, [r7, #4]
 8112b70:	689b      	ldr	r3, [r3, #8]
 8112b72:	2b00      	cmp	r3, #0
 8112b74:	d108      	bne.n	8112b88 <osMutexNew+0x84>
 8112b76:	687b      	ldr	r3, [r7, #4]
 8112b78:	68db      	ldr	r3, [r3, #12]
 8112b7a:	2b00      	cmp	r3, #0
 8112b7c:	d104      	bne.n	8112b88 <osMutexNew+0x84>
            mem = 0;
 8112b7e:	2300      	movs	r3, #0
 8112b80:	613b      	str	r3, [r7, #16]
 8112b82:	e001      	b.n	8112b88 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8112b84:	2300      	movs	r3, #0
 8112b86:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8112b88:	693b      	ldr	r3, [r7, #16]
 8112b8a:	2b01      	cmp	r3, #1
 8112b8c:	d112      	bne.n	8112bb4 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8112b8e:	697b      	ldr	r3, [r7, #20]
 8112b90:	2b00      	cmp	r3, #0
 8112b92:	d007      	beq.n	8112ba4 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8112b94:	687b      	ldr	r3, [r7, #4]
 8112b96:	689b      	ldr	r3, [r3, #8]
 8112b98:	4619      	mov	r1, r3
 8112b9a:	2004      	movs	r0, #4
 8112b9c:	f001 f9b5 	bl	8113f0a <xQueueCreateMutexStatic>
 8112ba0:	61f8      	str	r0, [r7, #28]
 8112ba2:	e016      	b.n	8112bd2 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8112ba4:	687b      	ldr	r3, [r7, #4]
 8112ba6:	689b      	ldr	r3, [r3, #8]
 8112ba8:	4619      	mov	r1, r3
 8112baa:	2001      	movs	r0, #1
 8112bac:	f001 f9ad 	bl	8113f0a <xQueueCreateMutexStatic>
 8112bb0:	61f8      	str	r0, [r7, #28]
 8112bb2:	e00e      	b.n	8112bd2 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8112bb4:	693b      	ldr	r3, [r7, #16]
 8112bb6:	2b00      	cmp	r3, #0
 8112bb8:	d10b      	bne.n	8112bd2 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8112bba:	697b      	ldr	r3, [r7, #20]
 8112bbc:	2b00      	cmp	r3, #0
 8112bbe:	d004      	beq.n	8112bca <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8112bc0:	2004      	movs	r0, #4
 8112bc2:	f001 f98a 	bl	8113eda <xQueueCreateMutex>
 8112bc6:	61f8      	str	r0, [r7, #28]
 8112bc8:	e003      	b.n	8112bd2 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8112bca:	2001      	movs	r0, #1
 8112bcc:	f001 f985 	bl	8113eda <xQueueCreateMutex>
 8112bd0:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8112bd2:	69fb      	ldr	r3, [r7, #28]
 8112bd4:	2b00      	cmp	r3, #0
 8112bd6:	d00c      	beq.n	8112bf2 <osMutexNew+0xee>
        if (attr != NULL) {
 8112bd8:	687b      	ldr	r3, [r7, #4]
 8112bda:	2b00      	cmp	r3, #0
 8112bdc:	d003      	beq.n	8112be6 <osMutexNew+0xe2>
          name = attr->name;
 8112bde:	687b      	ldr	r3, [r7, #4]
 8112be0:	681b      	ldr	r3, [r3, #0]
 8112be2:	60fb      	str	r3, [r7, #12]
 8112be4:	e001      	b.n	8112bea <osMutexNew+0xe6>
        } else {
          name = NULL;
 8112be6:	2300      	movs	r3, #0
 8112be8:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8112bea:	68f9      	ldr	r1, [r7, #12]
 8112bec:	69f8      	ldr	r0, [r7, #28]
 8112bee:	f002 f871 	bl	8114cd4 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8112bf2:	69fb      	ldr	r3, [r7, #28]
 8112bf4:	2b00      	cmp	r3, #0
 8112bf6:	d006      	beq.n	8112c06 <osMutexNew+0x102>
 8112bf8:	697b      	ldr	r3, [r7, #20]
 8112bfa:	2b00      	cmp	r3, #0
 8112bfc:	d003      	beq.n	8112c06 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8112bfe:	69fb      	ldr	r3, [r7, #28]
 8112c00:	f043 0301 	orr.w	r3, r3, #1
 8112c04:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8112c06:	69fb      	ldr	r3, [r7, #28]
}
 8112c08:	4618      	mov	r0, r3
 8112c0a:	3720      	adds	r7, #32
 8112c0c:	46bd      	mov	sp, r7
 8112c0e:	bd80      	pop	{r7, pc}

08112c10 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8112c10:	b580      	push	{r7, lr}
 8112c12:	b086      	sub	sp, #24
 8112c14:	af00      	add	r7, sp, #0
 8112c16:	6078      	str	r0, [r7, #4]
 8112c18:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8112c1a:	687b      	ldr	r3, [r7, #4]
 8112c1c:	f023 0301 	bic.w	r3, r3, #1
 8112c20:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8112c22:	687b      	ldr	r3, [r7, #4]
 8112c24:	f003 0301 	and.w	r3, r3, #1
 8112c28:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8112c2a:	2300      	movs	r3, #0
 8112c2c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8112c2e:	f3ef 8305 	mrs	r3, IPSR
 8112c32:	60bb      	str	r3, [r7, #8]
  return(result);
 8112c34:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8112c36:	2b00      	cmp	r3, #0
 8112c38:	d003      	beq.n	8112c42 <osMutexAcquire+0x32>
    stat = osErrorISR;
 8112c3a:	f06f 0305 	mvn.w	r3, #5
 8112c3e:	617b      	str	r3, [r7, #20]
 8112c40:	e02c      	b.n	8112c9c <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 8112c42:	693b      	ldr	r3, [r7, #16]
 8112c44:	2b00      	cmp	r3, #0
 8112c46:	d103      	bne.n	8112c50 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 8112c48:	f06f 0303 	mvn.w	r3, #3
 8112c4c:	617b      	str	r3, [r7, #20]
 8112c4e:	e025      	b.n	8112c9c <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 8112c50:	68fb      	ldr	r3, [r7, #12]
 8112c52:	2b00      	cmp	r3, #0
 8112c54:	d011      	beq.n	8112c7a <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8112c56:	6839      	ldr	r1, [r7, #0]
 8112c58:	6938      	ldr	r0, [r7, #16]
 8112c5a:	f001 f9a6 	bl	8113faa <xQueueTakeMutexRecursive>
 8112c5e:	4603      	mov	r3, r0
 8112c60:	2b01      	cmp	r3, #1
 8112c62:	d01b      	beq.n	8112c9c <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8112c64:	683b      	ldr	r3, [r7, #0]
 8112c66:	2b00      	cmp	r3, #0
 8112c68:	d003      	beq.n	8112c72 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 8112c6a:	f06f 0301 	mvn.w	r3, #1
 8112c6e:	617b      	str	r3, [r7, #20]
 8112c70:	e014      	b.n	8112c9c <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8112c72:	f06f 0302 	mvn.w	r3, #2
 8112c76:	617b      	str	r3, [r7, #20]
 8112c78:	e010      	b.n	8112c9c <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8112c7a:	6839      	ldr	r1, [r7, #0]
 8112c7c:	6938      	ldr	r0, [r7, #16]
 8112c7e:	f001 fd4b 	bl	8114718 <xQueueSemaphoreTake>
 8112c82:	4603      	mov	r3, r0
 8112c84:	2b01      	cmp	r3, #1
 8112c86:	d009      	beq.n	8112c9c <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8112c88:	683b      	ldr	r3, [r7, #0]
 8112c8a:	2b00      	cmp	r3, #0
 8112c8c:	d003      	beq.n	8112c96 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 8112c8e:	f06f 0301 	mvn.w	r3, #1
 8112c92:	617b      	str	r3, [r7, #20]
 8112c94:	e002      	b.n	8112c9c <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8112c96:	f06f 0302 	mvn.w	r3, #2
 8112c9a:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 8112c9c:	697b      	ldr	r3, [r7, #20]
}
 8112c9e:	4618      	mov	r0, r3
 8112ca0:	3718      	adds	r7, #24
 8112ca2:	46bd      	mov	sp, r7
 8112ca4:	bd80      	pop	{r7, pc}

08112ca6 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8112ca6:	b580      	push	{r7, lr}
 8112ca8:	b086      	sub	sp, #24
 8112caa:	af00      	add	r7, sp, #0
 8112cac:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8112cae:	687b      	ldr	r3, [r7, #4]
 8112cb0:	f023 0301 	bic.w	r3, r3, #1
 8112cb4:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8112cb6:	687b      	ldr	r3, [r7, #4]
 8112cb8:	f003 0301 	and.w	r3, r3, #1
 8112cbc:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8112cbe:	2300      	movs	r3, #0
 8112cc0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8112cc2:	f3ef 8305 	mrs	r3, IPSR
 8112cc6:	60bb      	str	r3, [r7, #8]
  return(result);
 8112cc8:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8112cca:	2b00      	cmp	r3, #0
 8112ccc:	d003      	beq.n	8112cd6 <osMutexRelease+0x30>
    stat = osErrorISR;
 8112cce:	f06f 0305 	mvn.w	r3, #5
 8112cd2:	617b      	str	r3, [r7, #20]
 8112cd4:	e01f      	b.n	8112d16 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 8112cd6:	693b      	ldr	r3, [r7, #16]
 8112cd8:	2b00      	cmp	r3, #0
 8112cda:	d103      	bne.n	8112ce4 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 8112cdc:	f06f 0303 	mvn.w	r3, #3
 8112ce0:	617b      	str	r3, [r7, #20]
 8112ce2:	e018      	b.n	8112d16 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 8112ce4:	68fb      	ldr	r3, [r7, #12]
 8112ce6:	2b00      	cmp	r3, #0
 8112ce8:	d009      	beq.n	8112cfe <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8112cea:	6938      	ldr	r0, [r7, #16]
 8112cec:	f001 f928 	bl	8113f40 <xQueueGiveMutexRecursive>
 8112cf0:	4603      	mov	r3, r0
 8112cf2:	2b01      	cmp	r3, #1
 8112cf4:	d00f      	beq.n	8112d16 <osMutexRelease+0x70>
        stat = osErrorResource;
 8112cf6:	f06f 0302 	mvn.w	r3, #2
 8112cfa:	617b      	str	r3, [r7, #20]
 8112cfc:	e00b      	b.n	8112d16 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8112cfe:	2300      	movs	r3, #0
 8112d00:	2200      	movs	r2, #0
 8112d02:	2100      	movs	r1, #0
 8112d04:	6938      	ldr	r0, [r7, #16]
 8112d06:	f001 f9f5 	bl	81140f4 <xQueueGenericSend>
 8112d0a:	4603      	mov	r3, r0
 8112d0c:	2b01      	cmp	r3, #1
 8112d0e:	d002      	beq.n	8112d16 <osMutexRelease+0x70>
        stat = osErrorResource;
 8112d10:	f06f 0302 	mvn.w	r3, #2
 8112d14:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8112d16:	697b      	ldr	r3, [r7, #20]
}
 8112d18:	4618      	mov	r0, r3
 8112d1a:	3718      	adds	r7, #24
 8112d1c:	46bd      	mov	sp, r7
 8112d1e:	bd80      	pop	{r7, pc}

08112d20 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8112d20:	b580      	push	{r7, lr}
 8112d22:	b08a      	sub	sp, #40	@ 0x28
 8112d24:	af02      	add	r7, sp, #8
 8112d26:	60f8      	str	r0, [r7, #12]
 8112d28:	60b9      	str	r1, [r7, #8]
 8112d2a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8112d2c:	2300      	movs	r3, #0
 8112d2e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8112d30:	f3ef 8305 	mrs	r3, IPSR
 8112d34:	613b      	str	r3, [r7, #16]
  return(result);
 8112d36:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8112d38:	2b00      	cmp	r3, #0
 8112d3a:	d175      	bne.n	8112e28 <osSemaphoreNew+0x108>
 8112d3c:	68fb      	ldr	r3, [r7, #12]
 8112d3e:	2b00      	cmp	r3, #0
 8112d40:	d072      	beq.n	8112e28 <osSemaphoreNew+0x108>
 8112d42:	68ba      	ldr	r2, [r7, #8]
 8112d44:	68fb      	ldr	r3, [r7, #12]
 8112d46:	429a      	cmp	r2, r3
 8112d48:	d86e      	bhi.n	8112e28 <osSemaphoreNew+0x108>
    mem = -1;
 8112d4a:	f04f 33ff 	mov.w	r3, #4294967295
 8112d4e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8112d50:	687b      	ldr	r3, [r7, #4]
 8112d52:	2b00      	cmp	r3, #0
 8112d54:	d015      	beq.n	8112d82 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8112d56:	687b      	ldr	r3, [r7, #4]
 8112d58:	689b      	ldr	r3, [r3, #8]
 8112d5a:	2b00      	cmp	r3, #0
 8112d5c:	d006      	beq.n	8112d6c <osSemaphoreNew+0x4c>
 8112d5e:	687b      	ldr	r3, [r7, #4]
 8112d60:	68db      	ldr	r3, [r3, #12]
 8112d62:	2b4f      	cmp	r3, #79	@ 0x4f
 8112d64:	d902      	bls.n	8112d6c <osSemaphoreNew+0x4c>
        mem = 1;
 8112d66:	2301      	movs	r3, #1
 8112d68:	61bb      	str	r3, [r7, #24]
 8112d6a:	e00c      	b.n	8112d86 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8112d6c:	687b      	ldr	r3, [r7, #4]
 8112d6e:	689b      	ldr	r3, [r3, #8]
 8112d70:	2b00      	cmp	r3, #0
 8112d72:	d108      	bne.n	8112d86 <osSemaphoreNew+0x66>
 8112d74:	687b      	ldr	r3, [r7, #4]
 8112d76:	68db      	ldr	r3, [r3, #12]
 8112d78:	2b00      	cmp	r3, #0
 8112d7a:	d104      	bne.n	8112d86 <osSemaphoreNew+0x66>
          mem = 0;
 8112d7c:	2300      	movs	r3, #0
 8112d7e:	61bb      	str	r3, [r7, #24]
 8112d80:	e001      	b.n	8112d86 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8112d82:	2300      	movs	r3, #0
 8112d84:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8112d86:	69bb      	ldr	r3, [r7, #24]
 8112d88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8112d8c:	d04c      	beq.n	8112e28 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8112d8e:	68fb      	ldr	r3, [r7, #12]
 8112d90:	2b01      	cmp	r3, #1
 8112d92:	d128      	bne.n	8112de6 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8112d94:	69bb      	ldr	r3, [r7, #24]
 8112d96:	2b01      	cmp	r3, #1
 8112d98:	d10a      	bne.n	8112db0 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8112d9a:	687b      	ldr	r3, [r7, #4]
 8112d9c:	689b      	ldr	r3, [r3, #8]
 8112d9e:	2203      	movs	r2, #3
 8112da0:	9200      	str	r2, [sp, #0]
 8112da2:	2200      	movs	r2, #0
 8112da4:	2100      	movs	r1, #0
 8112da6:	2001      	movs	r0, #1
 8112da8:	f000 ffa2 	bl	8113cf0 <xQueueGenericCreateStatic>
 8112dac:	61f8      	str	r0, [r7, #28]
 8112dae:	e005      	b.n	8112dbc <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8112db0:	2203      	movs	r2, #3
 8112db2:	2100      	movs	r1, #0
 8112db4:	2001      	movs	r0, #1
 8112db6:	f001 f818 	bl	8113dea <xQueueGenericCreate>
 8112dba:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8112dbc:	69fb      	ldr	r3, [r7, #28]
 8112dbe:	2b00      	cmp	r3, #0
 8112dc0:	d022      	beq.n	8112e08 <osSemaphoreNew+0xe8>
 8112dc2:	68bb      	ldr	r3, [r7, #8]
 8112dc4:	2b00      	cmp	r3, #0
 8112dc6:	d01f      	beq.n	8112e08 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8112dc8:	2300      	movs	r3, #0
 8112dca:	2200      	movs	r2, #0
 8112dcc:	2100      	movs	r1, #0
 8112dce:	69f8      	ldr	r0, [r7, #28]
 8112dd0:	f001 f990 	bl	81140f4 <xQueueGenericSend>
 8112dd4:	4603      	mov	r3, r0
 8112dd6:	2b01      	cmp	r3, #1
 8112dd8:	d016      	beq.n	8112e08 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8112dda:	69f8      	ldr	r0, [r7, #28]
 8112ddc:	f001 fe2e 	bl	8114a3c <vQueueDelete>
            hSemaphore = NULL;
 8112de0:	2300      	movs	r3, #0
 8112de2:	61fb      	str	r3, [r7, #28]
 8112de4:	e010      	b.n	8112e08 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8112de6:	69bb      	ldr	r3, [r7, #24]
 8112de8:	2b01      	cmp	r3, #1
 8112dea:	d108      	bne.n	8112dfe <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8112dec:	687b      	ldr	r3, [r7, #4]
 8112dee:	689b      	ldr	r3, [r3, #8]
 8112df0:	461a      	mov	r2, r3
 8112df2:	68b9      	ldr	r1, [r7, #8]
 8112df4:	68f8      	ldr	r0, [r7, #12]
 8112df6:	f001 f90f 	bl	8114018 <xQueueCreateCountingSemaphoreStatic>
 8112dfa:	61f8      	str	r0, [r7, #28]
 8112dfc:	e004      	b.n	8112e08 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8112dfe:	68b9      	ldr	r1, [r7, #8]
 8112e00:	68f8      	ldr	r0, [r7, #12]
 8112e02:	f001 f942 	bl	811408a <xQueueCreateCountingSemaphore>
 8112e06:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8112e08:	69fb      	ldr	r3, [r7, #28]
 8112e0a:	2b00      	cmp	r3, #0
 8112e0c:	d00c      	beq.n	8112e28 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8112e0e:	687b      	ldr	r3, [r7, #4]
 8112e10:	2b00      	cmp	r3, #0
 8112e12:	d003      	beq.n	8112e1c <osSemaphoreNew+0xfc>
          name = attr->name;
 8112e14:	687b      	ldr	r3, [r7, #4]
 8112e16:	681b      	ldr	r3, [r3, #0]
 8112e18:	617b      	str	r3, [r7, #20]
 8112e1a:	e001      	b.n	8112e20 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8112e1c:	2300      	movs	r3, #0
 8112e1e:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8112e20:	6979      	ldr	r1, [r7, #20]
 8112e22:	69f8      	ldr	r0, [r7, #28]
 8112e24:	f001 ff56 	bl	8114cd4 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8112e28:	69fb      	ldr	r3, [r7, #28]
}
 8112e2a:	4618      	mov	r0, r3
 8112e2c:	3720      	adds	r7, #32
 8112e2e:	46bd      	mov	sp, r7
 8112e30:	bd80      	pop	{r7, pc}
	...

08112e34 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8112e34:	b580      	push	{r7, lr}
 8112e36:	b086      	sub	sp, #24
 8112e38:	af00      	add	r7, sp, #0
 8112e3a:	6078      	str	r0, [r7, #4]
 8112e3c:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8112e3e:	687b      	ldr	r3, [r7, #4]
 8112e40:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8112e42:	2300      	movs	r3, #0
 8112e44:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8112e46:	693b      	ldr	r3, [r7, #16]
 8112e48:	2b00      	cmp	r3, #0
 8112e4a:	d103      	bne.n	8112e54 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8112e4c:	f06f 0303 	mvn.w	r3, #3
 8112e50:	617b      	str	r3, [r7, #20]
 8112e52:	e039      	b.n	8112ec8 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8112e54:	f3ef 8305 	mrs	r3, IPSR
 8112e58:	60fb      	str	r3, [r7, #12]
  return(result);
 8112e5a:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8112e5c:	2b00      	cmp	r3, #0
 8112e5e:	d022      	beq.n	8112ea6 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8112e60:	683b      	ldr	r3, [r7, #0]
 8112e62:	2b00      	cmp	r3, #0
 8112e64:	d003      	beq.n	8112e6e <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8112e66:	f06f 0303 	mvn.w	r3, #3
 8112e6a:	617b      	str	r3, [r7, #20]
 8112e6c:	e02c      	b.n	8112ec8 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8112e6e:	2300      	movs	r3, #0
 8112e70:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8112e72:	f107 0308 	add.w	r3, r7, #8
 8112e76:	461a      	mov	r2, r3
 8112e78:	2100      	movs	r1, #0
 8112e7a:	6938      	ldr	r0, [r7, #16]
 8112e7c:	f001 fd5c 	bl	8114938 <xQueueReceiveFromISR>
 8112e80:	4603      	mov	r3, r0
 8112e82:	2b01      	cmp	r3, #1
 8112e84:	d003      	beq.n	8112e8e <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8112e86:	f06f 0302 	mvn.w	r3, #2
 8112e8a:	617b      	str	r3, [r7, #20]
 8112e8c:	e01c      	b.n	8112ec8 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8112e8e:	68bb      	ldr	r3, [r7, #8]
 8112e90:	2b00      	cmp	r3, #0
 8112e92:	d019      	beq.n	8112ec8 <osSemaphoreAcquire+0x94>
 8112e94:	4b0f      	ldr	r3, [pc, #60]	@ (8112ed4 <osSemaphoreAcquire+0xa0>)
 8112e96:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8112e9a:	601a      	str	r2, [r3, #0]
 8112e9c:	f3bf 8f4f 	dsb	sy
 8112ea0:	f3bf 8f6f 	isb	sy
 8112ea4:	e010      	b.n	8112ec8 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8112ea6:	6839      	ldr	r1, [r7, #0]
 8112ea8:	6938      	ldr	r0, [r7, #16]
 8112eaa:	f001 fc35 	bl	8114718 <xQueueSemaphoreTake>
 8112eae:	4603      	mov	r3, r0
 8112eb0:	2b01      	cmp	r3, #1
 8112eb2:	d009      	beq.n	8112ec8 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8112eb4:	683b      	ldr	r3, [r7, #0]
 8112eb6:	2b00      	cmp	r3, #0
 8112eb8:	d003      	beq.n	8112ec2 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8112eba:	f06f 0301 	mvn.w	r3, #1
 8112ebe:	617b      	str	r3, [r7, #20]
 8112ec0:	e002      	b.n	8112ec8 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8112ec2:	f06f 0302 	mvn.w	r3, #2
 8112ec6:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8112ec8:	697b      	ldr	r3, [r7, #20]
}
 8112eca:	4618      	mov	r0, r3
 8112ecc:	3718      	adds	r7, #24
 8112ece:	46bd      	mov	sp, r7
 8112ed0:	bd80      	pop	{r7, pc}
 8112ed2:	bf00      	nop
 8112ed4:	e000ed04 	.word	0xe000ed04

08112ed8 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8112ed8:	b580      	push	{r7, lr}
 8112eda:	b086      	sub	sp, #24
 8112edc:	af00      	add	r7, sp, #0
 8112ede:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8112ee0:	687b      	ldr	r3, [r7, #4]
 8112ee2:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8112ee4:	2300      	movs	r3, #0
 8112ee6:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8112ee8:	693b      	ldr	r3, [r7, #16]
 8112eea:	2b00      	cmp	r3, #0
 8112eec:	d103      	bne.n	8112ef6 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8112eee:	f06f 0303 	mvn.w	r3, #3
 8112ef2:	617b      	str	r3, [r7, #20]
 8112ef4:	e02c      	b.n	8112f50 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8112ef6:	f3ef 8305 	mrs	r3, IPSR
 8112efa:	60fb      	str	r3, [r7, #12]
  return(result);
 8112efc:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8112efe:	2b00      	cmp	r3, #0
 8112f00:	d01a      	beq.n	8112f38 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8112f02:	2300      	movs	r3, #0
 8112f04:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8112f06:	f107 0308 	add.w	r3, r7, #8
 8112f0a:	4619      	mov	r1, r3
 8112f0c:	6938      	ldr	r0, [r7, #16]
 8112f0e:	f001 fa91 	bl	8114434 <xQueueGiveFromISR>
 8112f12:	4603      	mov	r3, r0
 8112f14:	2b01      	cmp	r3, #1
 8112f16:	d003      	beq.n	8112f20 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8112f18:	f06f 0302 	mvn.w	r3, #2
 8112f1c:	617b      	str	r3, [r7, #20]
 8112f1e:	e017      	b.n	8112f50 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8112f20:	68bb      	ldr	r3, [r7, #8]
 8112f22:	2b00      	cmp	r3, #0
 8112f24:	d014      	beq.n	8112f50 <osSemaphoreRelease+0x78>
 8112f26:	4b0d      	ldr	r3, [pc, #52]	@ (8112f5c <osSemaphoreRelease+0x84>)
 8112f28:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8112f2c:	601a      	str	r2, [r3, #0]
 8112f2e:	f3bf 8f4f 	dsb	sy
 8112f32:	f3bf 8f6f 	isb	sy
 8112f36:	e00b      	b.n	8112f50 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8112f38:	2300      	movs	r3, #0
 8112f3a:	2200      	movs	r2, #0
 8112f3c:	2100      	movs	r1, #0
 8112f3e:	6938      	ldr	r0, [r7, #16]
 8112f40:	f001 f8d8 	bl	81140f4 <xQueueGenericSend>
 8112f44:	4603      	mov	r3, r0
 8112f46:	2b01      	cmp	r3, #1
 8112f48:	d002      	beq.n	8112f50 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8112f4a:	f06f 0302 	mvn.w	r3, #2
 8112f4e:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8112f50:	697b      	ldr	r3, [r7, #20]
}
 8112f52:	4618      	mov	r0, r3
 8112f54:	3718      	adds	r7, #24
 8112f56:	46bd      	mov	sp, r7
 8112f58:	bd80      	pop	{r7, pc}
 8112f5a:	bf00      	nop
 8112f5c:	e000ed04 	.word	0xe000ed04

08112f60 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8112f60:	b580      	push	{r7, lr}
 8112f62:	b08a      	sub	sp, #40	@ 0x28
 8112f64:	af02      	add	r7, sp, #8
 8112f66:	60f8      	str	r0, [r7, #12]
 8112f68:	60b9      	str	r1, [r7, #8]
 8112f6a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8112f6c:	2300      	movs	r3, #0
 8112f6e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8112f70:	f3ef 8305 	mrs	r3, IPSR
 8112f74:	613b      	str	r3, [r7, #16]
  return(result);
 8112f76:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8112f78:	2b00      	cmp	r3, #0
 8112f7a:	d15f      	bne.n	811303c <osMessageQueueNew+0xdc>
 8112f7c:	68fb      	ldr	r3, [r7, #12]
 8112f7e:	2b00      	cmp	r3, #0
 8112f80:	d05c      	beq.n	811303c <osMessageQueueNew+0xdc>
 8112f82:	68bb      	ldr	r3, [r7, #8]
 8112f84:	2b00      	cmp	r3, #0
 8112f86:	d059      	beq.n	811303c <osMessageQueueNew+0xdc>
    mem = -1;
 8112f88:	f04f 33ff 	mov.w	r3, #4294967295
 8112f8c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8112f8e:	687b      	ldr	r3, [r7, #4]
 8112f90:	2b00      	cmp	r3, #0
 8112f92:	d029      	beq.n	8112fe8 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8112f94:	687b      	ldr	r3, [r7, #4]
 8112f96:	689b      	ldr	r3, [r3, #8]
 8112f98:	2b00      	cmp	r3, #0
 8112f9a:	d012      	beq.n	8112fc2 <osMessageQueueNew+0x62>
 8112f9c:	687b      	ldr	r3, [r7, #4]
 8112f9e:	68db      	ldr	r3, [r3, #12]
 8112fa0:	2b4f      	cmp	r3, #79	@ 0x4f
 8112fa2:	d90e      	bls.n	8112fc2 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8112fa4:	687b      	ldr	r3, [r7, #4]
 8112fa6:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8112fa8:	2b00      	cmp	r3, #0
 8112faa:	d00a      	beq.n	8112fc2 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8112fac:	687b      	ldr	r3, [r7, #4]
 8112fae:	695a      	ldr	r2, [r3, #20]
 8112fb0:	68fb      	ldr	r3, [r7, #12]
 8112fb2:	68b9      	ldr	r1, [r7, #8]
 8112fb4:	fb01 f303 	mul.w	r3, r1, r3
 8112fb8:	429a      	cmp	r2, r3
 8112fba:	d302      	bcc.n	8112fc2 <osMessageQueueNew+0x62>
        mem = 1;
 8112fbc:	2301      	movs	r3, #1
 8112fbe:	61bb      	str	r3, [r7, #24]
 8112fc0:	e014      	b.n	8112fec <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8112fc2:	687b      	ldr	r3, [r7, #4]
 8112fc4:	689b      	ldr	r3, [r3, #8]
 8112fc6:	2b00      	cmp	r3, #0
 8112fc8:	d110      	bne.n	8112fec <osMessageQueueNew+0x8c>
 8112fca:	687b      	ldr	r3, [r7, #4]
 8112fcc:	68db      	ldr	r3, [r3, #12]
 8112fce:	2b00      	cmp	r3, #0
 8112fd0:	d10c      	bne.n	8112fec <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8112fd2:	687b      	ldr	r3, [r7, #4]
 8112fd4:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8112fd6:	2b00      	cmp	r3, #0
 8112fd8:	d108      	bne.n	8112fec <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8112fda:	687b      	ldr	r3, [r7, #4]
 8112fdc:	695b      	ldr	r3, [r3, #20]
 8112fde:	2b00      	cmp	r3, #0
 8112fe0:	d104      	bne.n	8112fec <osMessageQueueNew+0x8c>
          mem = 0;
 8112fe2:	2300      	movs	r3, #0
 8112fe4:	61bb      	str	r3, [r7, #24]
 8112fe6:	e001      	b.n	8112fec <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8112fe8:	2300      	movs	r3, #0
 8112fea:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8112fec:	69bb      	ldr	r3, [r7, #24]
 8112fee:	2b01      	cmp	r3, #1
 8112ff0:	d10b      	bne.n	811300a <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8112ff2:	687b      	ldr	r3, [r7, #4]
 8112ff4:	691a      	ldr	r2, [r3, #16]
 8112ff6:	687b      	ldr	r3, [r7, #4]
 8112ff8:	689b      	ldr	r3, [r3, #8]
 8112ffa:	2100      	movs	r1, #0
 8112ffc:	9100      	str	r1, [sp, #0]
 8112ffe:	68b9      	ldr	r1, [r7, #8]
 8113000:	68f8      	ldr	r0, [r7, #12]
 8113002:	f000 fe75 	bl	8113cf0 <xQueueGenericCreateStatic>
 8113006:	61f8      	str	r0, [r7, #28]
 8113008:	e008      	b.n	811301c <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 811300a:	69bb      	ldr	r3, [r7, #24]
 811300c:	2b00      	cmp	r3, #0
 811300e:	d105      	bne.n	811301c <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8113010:	2200      	movs	r2, #0
 8113012:	68b9      	ldr	r1, [r7, #8]
 8113014:	68f8      	ldr	r0, [r7, #12]
 8113016:	f000 fee8 	bl	8113dea <xQueueGenericCreate>
 811301a:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 811301c:	69fb      	ldr	r3, [r7, #28]
 811301e:	2b00      	cmp	r3, #0
 8113020:	d00c      	beq.n	811303c <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8113022:	687b      	ldr	r3, [r7, #4]
 8113024:	2b00      	cmp	r3, #0
 8113026:	d003      	beq.n	8113030 <osMessageQueueNew+0xd0>
        name = attr->name;
 8113028:	687b      	ldr	r3, [r7, #4]
 811302a:	681b      	ldr	r3, [r3, #0]
 811302c:	617b      	str	r3, [r7, #20]
 811302e:	e001      	b.n	8113034 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8113030:	2300      	movs	r3, #0
 8113032:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8113034:	6979      	ldr	r1, [r7, #20]
 8113036:	69f8      	ldr	r0, [r7, #28]
 8113038:	f001 fe4c 	bl	8114cd4 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 811303c:	69fb      	ldr	r3, [r7, #28]
}
 811303e:	4618      	mov	r0, r3
 8113040:	3720      	adds	r7, #32
 8113042:	46bd      	mov	sp, r7
 8113044:	bd80      	pop	{r7, pc}
	...

08113048 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8113048:	b580      	push	{r7, lr}
 811304a:	b088      	sub	sp, #32
 811304c:	af00      	add	r7, sp, #0
 811304e:	60f8      	str	r0, [r7, #12]
 8113050:	60b9      	str	r1, [r7, #8]
 8113052:	603b      	str	r3, [r7, #0]
 8113054:	4613      	mov	r3, r2
 8113056:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8113058:	68fb      	ldr	r3, [r7, #12]
 811305a:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 811305c:	2300      	movs	r3, #0
 811305e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8113060:	f3ef 8305 	mrs	r3, IPSR
 8113064:	617b      	str	r3, [r7, #20]
  return(result);
 8113066:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8113068:	2b00      	cmp	r3, #0
 811306a:	d028      	beq.n	81130be <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 811306c:	69bb      	ldr	r3, [r7, #24]
 811306e:	2b00      	cmp	r3, #0
 8113070:	d005      	beq.n	811307e <osMessageQueuePut+0x36>
 8113072:	68bb      	ldr	r3, [r7, #8]
 8113074:	2b00      	cmp	r3, #0
 8113076:	d002      	beq.n	811307e <osMessageQueuePut+0x36>
 8113078:	683b      	ldr	r3, [r7, #0]
 811307a:	2b00      	cmp	r3, #0
 811307c:	d003      	beq.n	8113086 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 811307e:	f06f 0303 	mvn.w	r3, #3
 8113082:	61fb      	str	r3, [r7, #28]
 8113084:	e038      	b.n	81130f8 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8113086:	2300      	movs	r3, #0
 8113088:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 811308a:	f107 0210 	add.w	r2, r7, #16
 811308e:	2300      	movs	r3, #0
 8113090:	68b9      	ldr	r1, [r7, #8]
 8113092:	69b8      	ldr	r0, [r7, #24]
 8113094:	f001 f930 	bl	81142f8 <xQueueGenericSendFromISR>
 8113098:	4603      	mov	r3, r0
 811309a:	2b01      	cmp	r3, #1
 811309c:	d003      	beq.n	81130a6 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 811309e:	f06f 0302 	mvn.w	r3, #2
 81130a2:	61fb      	str	r3, [r7, #28]
 81130a4:	e028      	b.n	81130f8 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 81130a6:	693b      	ldr	r3, [r7, #16]
 81130a8:	2b00      	cmp	r3, #0
 81130aa:	d025      	beq.n	81130f8 <osMessageQueuePut+0xb0>
 81130ac:	4b15      	ldr	r3, [pc, #84]	@ (8113104 <osMessageQueuePut+0xbc>)
 81130ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 81130b2:	601a      	str	r2, [r3, #0]
 81130b4:	f3bf 8f4f 	dsb	sy
 81130b8:	f3bf 8f6f 	isb	sy
 81130bc:	e01c      	b.n	81130f8 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 81130be:	69bb      	ldr	r3, [r7, #24]
 81130c0:	2b00      	cmp	r3, #0
 81130c2:	d002      	beq.n	81130ca <osMessageQueuePut+0x82>
 81130c4:	68bb      	ldr	r3, [r7, #8]
 81130c6:	2b00      	cmp	r3, #0
 81130c8:	d103      	bne.n	81130d2 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 81130ca:	f06f 0303 	mvn.w	r3, #3
 81130ce:	61fb      	str	r3, [r7, #28]
 81130d0:	e012      	b.n	81130f8 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 81130d2:	2300      	movs	r3, #0
 81130d4:	683a      	ldr	r2, [r7, #0]
 81130d6:	68b9      	ldr	r1, [r7, #8]
 81130d8:	69b8      	ldr	r0, [r7, #24]
 81130da:	f001 f80b 	bl	81140f4 <xQueueGenericSend>
 81130de:	4603      	mov	r3, r0
 81130e0:	2b01      	cmp	r3, #1
 81130e2:	d009      	beq.n	81130f8 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 81130e4:	683b      	ldr	r3, [r7, #0]
 81130e6:	2b00      	cmp	r3, #0
 81130e8:	d003      	beq.n	81130f2 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 81130ea:	f06f 0301 	mvn.w	r3, #1
 81130ee:	61fb      	str	r3, [r7, #28]
 81130f0:	e002      	b.n	81130f8 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 81130f2:	f06f 0302 	mvn.w	r3, #2
 81130f6:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 81130f8:	69fb      	ldr	r3, [r7, #28]
}
 81130fa:	4618      	mov	r0, r3
 81130fc:	3720      	adds	r7, #32
 81130fe:	46bd      	mov	sp, r7
 8113100:	bd80      	pop	{r7, pc}
 8113102:	bf00      	nop
 8113104:	e000ed04 	.word	0xe000ed04

08113108 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8113108:	b580      	push	{r7, lr}
 811310a:	b088      	sub	sp, #32
 811310c:	af00      	add	r7, sp, #0
 811310e:	60f8      	str	r0, [r7, #12]
 8113110:	60b9      	str	r1, [r7, #8]
 8113112:	607a      	str	r2, [r7, #4]
 8113114:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8113116:	68fb      	ldr	r3, [r7, #12]
 8113118:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 811311a:	2300      	movs	r3, #0
 811311c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 811311e:	f3ef 8305 	mrs	r3, IPSR
 8113122:	617b      	str	r3, [r7, #20]
  return(result);
 8113124:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8113126:	2b00      	cmp	r3, #0
 8113128:	d028      	beq.n	811317c <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 811312a:	69bb      	ldr	r3, [r7, #24]
 811312c:	2b00      	cmp	r3, #0
 811312e:	d005      	beq.n	811313c <osMessageQueueGet+0x34>
 8113130:	68bb      	ldr	r3, [r7, #8]
 8113132:	2b00      	cmp	r3, #0
 8113134:	d002      	beq.n	811313c <osMessageQueueGet+0x34>
 8113136:	683b      	ldr	r3, [r7, #0]
 8113138:	2b00      	cmp	r3, #0
 811313a:	d003      	beq.n	8113144 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 811313c:	f06f 0303 	mvn.w	r3, #3
 8113140:	61fb      	str	r3, [r7, #28]
 8113142:	e037      	b.n	81131b4 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8113144:	2300      	movs	r3, #0
 8113146:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8113148:	f107 0310 	add.w	r3, r7, #16
 811314c:	461a      	mov	r2, r3
 811314e:	68b9      	ldr	r1, [r7, #8]
 8113150:	69b8      	ldr	r0, [r7, #24]
 8113152:	f001 fbf1 	bl	8114938 <xQueueReceiveFromISR>
 8113156:	4603      	mov	r3, r0
 8113158:	2b01      	cmp	r3, #1
 811315a:	d003      	beq.n	8113164 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 811315c:	f06f 0302 	mvn.w	r3, #2
 8113160:	61fb      	str	r3, [r7, #28]
 8113162:	e027      	b.n	81131b4 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8113164:	693b      	ldr	r3, [r7, #16]
 8113166:	2b00      	cmp	r3, #0
 8113168:	d024      	beq.n	81131b4 <osMessageQueueGet+0xac>
 811316a:	4b15      	ldr	r3, [pc, #84]	@ (81131c0 <osMessageQueueGet+0xb8>)
 811316c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8113170:	601a      	str	r2, [r3, #0]
 8113172:	f3bf 8f4f 	dsb	sy
 8113176:	f3bf 8f6f 	isb	sy
 811317a:	e01b      	b.n	81131b4 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 811317c:	69bb      	ldr	r3, [r7, #24]
 811317e:	2b00      	cmp	r3, #0
 8113180:	d002      	beq.n	8113188 <osMessageQueueGet+0x80>
 8113182:	68bb      	ldr	r3, [r7, #8]
 8113184:	2b00      	cmp	r3, #0
 8113186:	d103      	bne.n	8113190 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8113188:	f06f 0303 	mvn.w	r3, #3
 811318c:	61fb      	str	r3, [r7, #28]
 811318e:	e011      	b.n	81131b4 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8113190:	683a      	ldr	r2, [r7, #0]
 8113192:	68b9      	ldr	r1, [r7, #8]
 8113194:	69b8      	ldr	r0, [r7, #24]
 8113196:	f001 f9dd 	bl	8114554 <xQueueReceive>
 811319a:	4603      	mov	r3, r0
 811319c:	2b01      	cmp	r3, #1
 811319e:	d009      	beq.n	81131b4 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 81131a0:	683b      	ldr	r3, [r7, #0]
 81131a2:	2b00      	cmp	r3, #0
 81131a4:	d003      	beq.n	81131ae <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 81131a6:	f06f 0301 	mvn.w	r3, #1
 81131aa:	61fb      	str	r3, [r7, #28]
 81131ac:	e002      	b.n	81131b4 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 81131ae:	f06f 0302 	mvn.w	r3, #2
 81131b2:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 81131b4:	69fb      	ldr	r3, [r7, #28]
}
 81131b6:	4618      	mov	r0, r3
 81131b8:	3720      	adds	r7, #32
 81131ba:	46bd      	mov	sp, r7
 81131bc:	bd80      	pop	{r7, pc}
 81131be:	bf00      	nop
 81131c0:	e000ed04 	.word	0xe000ed04

081131c4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 81131c4:	b480      	push	{r7}
 81131c6:	b085      	sub	sp, #20
 81131c8:	af00      	add	r7, sp, #0
 81131ca:	60f8      	str	r0, [r7, #12]
 81131cc:	60b9      	str	r1, [r7, #8]
 81131ce:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 81131d0:	68fb      	ldr	r3, [r7, #12]
 81131d2:	4a07      	ldr	r2, [pc, #28]	@ (81131f0 <vApplicationGetIdleTaskMemory+0x2c>)
 81131d4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 81131d6:	68bb      	ldr	r3, [r7, #8]
 81131d8:	4a06      	ldr	r2, [pc, #24]	@ (81131f4 <vApplicationGetIdleTaskMemory+0x30>)
 81131da:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 81131dc:	687b      	ldr	r3, [r7, #4]
 81131de:	2280      	movs	r2, #128	@ 0x80
 81131e0:	601a      	str	r2, [r3, #0]
}
 81131e2:	bf00      	nop
 81131e4:	3714      	adds	r7, #20
 81131e6:	46bd      	mov	sp, r7
 81131e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81131ec:	4770      	bx	lr
 81131ee:	bf00      	nop
 81131f0:	10000428 	.word	0x10000428
 81131f4:	100004d0 	.word	0x100004d0

081131f8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 81131f8:	b480      	push	{r7}
 81131fa:	b085      	sub	sp, #20
 81131fc:	af00      	add	r7, sp, #0
 81131fe:	60f8      	str	r0, [r7, #12]
 8113200:	60b9      	str	r1, [r7, #8]
 8113202:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8113204:	68fb      	ldr	r3, [r7, #12]
 8113206:	4a07      	ldr	r2, [pc, #28]	@ (8113224 <vApplicationGetTimerTaskMemory+0x2c>)
 8113208:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 811320a:	68bb      	ldr	r3, [r7, #8]
 811320c:	4a06      	ldr	r2, [pc, #24]	@ (8113228 <vApplicationGetTimerTaskMemory+0x30>)
 811320e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8113210:	687b      	ldr	r3, [r7, #4]
 8113212:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8113216:	601a      	str	r2, [r3, #0]
}
 8113218:	bf00      	nop
 811321a:	3714      	adds	r7, #20
 811321c:	46bd      	mov	sp, r7
 811321e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8113222:	4770      	bx	lr
 8113224:	100006d0 	.word	0x100006d0
 8113228:	10000778 	.word	0x10000778

0811322c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 811322c:	b580      	push	{r7, lr}
 811322e:	b08a      	sub	sp, #40	@ 0x28
 8113230:	af00      	add	r7, sp, #0
 8113232:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8113234:	2300      	movs	r3, #0
 8113236:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8113238:	f002 fc62 	bl	8115b00 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 811323c:	4b5c      	ldr	r3, [pc, #368]	@ (81133b0 <pvPortMalloc+0x184>)
 811323e:	681b      	ldr	r3, [r3, #0]
 8113240:	2b00      	cmp	r3, #0
 8113242:	d101      	bne.n	8113248 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8113244:	f000 f924 	bl	8113490 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8113248:	4b5a      	ldr	r3, [pc, #360]	@ (81133b4 <pvPortMalloc+0x188>)
 811324a:	681a      	ldr	r2, [r3, #0]
 811324c:	687b      	ldr	r3, [r7, #4]
 811324e:	4013      	ands	r3, r2
 8113250:	2b00      	cmp	r3, #0
 8113252:	f040 8095 	bne.w	8113380 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8113256:	687b      	ldr	r3, [r7, #4]
 8113258:	2b00      	cmp	r3, #0
 811325a:	d01e      	beq.n	811329a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 811325c:	2208      	movs	r2, #8
 811325e:	687b      	ldr	r3, [r7, #4]
 8113260:	4413      	add	r3, r2
 8113262:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8113264:	687b      	ldr	r3, [r7, #4]
 8113266:	f003 0307 	and.w	r3, r3, #7
 811326a:	2b00      	cmp	r3, #0
 811326c:	d015      	beq.n	811329a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 811326e:	687b      	ldr	r3, [r7, #4]
 8113270:	f023 0307 	bic.w	r3, r3, #7
 8113274:	3308      	adds	r3, #8
 8113276:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8113278:	687b      	ldr	r3, [r7, #4]
 811327a:	f003 0307 	and.w	r3, r3, #7
 811327e:	2b00      	cmp	r3, #0
 8113280:	d00b      	beq.n	811329a <pvPortMalloc+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8113282:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8113286:	f383 8811 	msr	BASEPRI, r3
 811328a:	f3bf 8f6f 	isb	sy
 811328e:	f3bf 8f4f 	dsb	sy
 8113292:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8113294:	bf00      	nop
 8113296:	bf00      	nop
 8113298:	e7fd      	b.n	8113296 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 811329a:	687b      	ldr	r3, [r7, #4]
 811329c:	2b00      	cmp	r3, #0
 811329e:	d06f      	beq.n	8113380 <pvPortMalloc+0x154>
 81132a0:	4b45      	ldr	r3, [pc, #276]	@ (81133b8 <pvPortMalloc+0x18c>)
 81132a2:	681b      	ldr	r3, [r3, #0]
 81132a4:	687a      	ldr	r2, [r7, #4]
 81132a6:	429a      	cmp	r2, r3
 81132a8:	d86a      	bhi.n	8113380 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 81132aa:	4b44      	ldr	r3, [pc, #272]	@ (81133bc <pvPortMalloc+0x190>)
 81132ac:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 81132ae:	4b43      	ldr	r3, [pc, #268]	@ (81133bc <pvPortMalloc+0x190>)
 81132b0:	681b      	ldr	r3, [r3, #0]
 81132b2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 81132b4:	e004      	b.n	81132c0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 81132b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81132b8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 81132ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81132bc:	681b      	ldr	r3, [r3, #0]
 81132be:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 81132c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81132c2:	685b      	ldr	r3, [r3, #4]
 81132c4:	687a      	ldr	r2, [r7, #4]
 81132c6:	429a      	cmp	r2, r3
 81132c8:	d903      	bls.n	81132d2 <pvPortMalloc+0xa6>
 81132ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81132cc:	681b      	ldr	r3, [r3, #0]
 81132ce:	2b00      	cmp	r3, #0
 81132d0:	d1f1      	bne.n	81132b6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 81132d2:	4b37      	ldr	r3, [pc, #220]	@ (81133b0 <pvPortMalloc+0x184>)
 81132d4:	681b      	ldr	r3, [r3, #0]
 81132d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 81132d8:	429a      	cmp	r2, r3
 81132da:	d051      	beq.n	8113380 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 81132dc:	6a3b      	ldr	r3, [r7, #32]
 81132de:	681b      	ldr	r3, [r3, #0]
 81132e0:	2208      	movs	r2, #8
 81132e2:	4413      	add	r3, r2
 81132e4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 81132e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81132e8:	681a      	ldr	r2, [r3, #0]
 81132ea:	6a3b      	ldr	r3, [r7, #32]
 81132ec:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 81132ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81132f0:	685a      	ldr	r2, [r3, #4]
 81132f2:	687b      	ldr	r3, [r7, #4]
 81132f4:	1ad2      	subs	r2, r2, r3
 81132f6:	2308      	movs	r3, #8
 81132f8:	005b      	lsls	r3, r3, #1
 81132fa:	429a      	cmp	r2, r3
 81132fc:	d920      	bls.n	8113340 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 81132fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8113300:	687b      	ldr	r3, [r7, #4]
 8113302:	4413      	add	r3, r2
 8113304:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8113306:	69bb      	ldr	r3, [r7, #24]
 8113308:	f003 0307 	and.w	r3, r3, #7
 811330c:	2b00      	cmp	r3, #0
 811330e:	d00b      	beq.n	8113328 <pvPortMalloc+0xfc>
	__asm volatile
 8113310:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8113314:	f383 8811 	msr	BASEPRI, r3
 8113318:	f3bf 8f6f 	isb	sy
 811331c:	f3bf 8f4f 	dsb	sy
 8113320:	613b      	str	r3, [r7, #16]
}
 8113322:	bf00      	nop
 8113324:	bf00      	nop
 8113326:	e7fd      	b.n	8113324 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8113328:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811332a:	685a      	ldr	r2, [r3, #4]
 811332c:	687b      	ldr	r3, [r7, #4]
 811332e:	1ad2      	subs	r2, r2, r3
 8113330:	69bb      	ldr	r3, [r7, #24]
 8113332:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8113334:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8113336:	687a      	ldr	r2, [r7, #4]
 8113338:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 811333a:	69b8      	ldr	r0, [r7, #24]
 811333c:	f000 f90a 	bl	8113554 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8113340:	4b1d      	ldr	r3, [pc, #116]	@ (81133b8 <pvPortMalloc+0x18c>)
 8113342:	681a      	ldr	r2, [r3, #0]
 8113344:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8113346:	685b      	ldr	r3, [r3, #4]
 8113348:	1ad3      	subs	r3, r2, r3
 811334a:	4a1b      	ldr	r2, [pc, #108]	@ (81133b8 <pvPortMalloc+0x18c>)
 811334c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 811334e:	4b1a      	ldr	r3, [pc, #104]	@ (81133b8 <pvPortMalloc+0x18c>)
 8113350:	681a      	ldr	r2, [r3, #0]
 8113352:	4b1b      	ldr	r3, [pc, #108]	@ (81133c0 <pvPortMalloc+0x194>)
 8113354:	681b      	ldr	r3, [r3, #0]
 8113356:	429a      	cmp	r2, r3
 8113358:	d203      	bcs.n	8113362 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 811335a:	4b17      	ldr	r3, [pc, #92]	@ (81133b8 <pvPortMalloc+0x18c>)
 811335c:	681b      	ldr	r3, [r3, #0]
 811335e:	4a18      	ldr	r2, [pc, #96]	@ (81133c0 <pvPortMalloc+0x194>)
 8113360:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8113362:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8113364:	685a      	ldr	r2, [r3, #4]
 8113366:	4b13      	ldr	r3, [pc, #76]	@ (81133b4 <pvPortMalloc+0x188>)
 8113368:	681b      	ldr	r3, [r3, #0]
 811336a:	431a      	orrs	r2, r3
 811336c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811336e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8113370:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8113372:	2200      	movs	r2, #0
 8113374:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8113376:	4b13      	ldr	r3, [pc, #76]	@ (81133c4 <pvPortMalloc+0x198>)
 8113378:	681b      	ldr	r3, [r3, #0]
 811337a:	3301      	adds	r3, #1
 811337c:	4a11      	ldr	r2, [pc, #68]	@ (81133c4 <pvPortMalloc+0x198>)
 811337e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8113380:	f002 fbcc 	bl	8115b1c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8113384:	69fb      	ldr	r3, [r7, #28]
 8113386:	f003 0307 	and.w	r3, r3, #7
 811338a:	2b00      	cmp	r3, #0
 811338c:	d00b      	beq.n	81133a6 <pvPortMalloc+0x17a>
	__asm volatile
 811338e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8113392:	f383 8811 	msr	BASEPRI, r3
 8113396:	f3bf 8f6f 	isb	sy
 811339a:	f3bf 8f4f 	dsb	sy
 811339e:	60fb      	str	r3, [r7, #12]
}
 81133a0:	bf00      	nop
 81133a2:	bf00      	nop
 81133a4:	e7fd      	b.n	81133a2 <pvPortMalloc+0x176>
	return pvReturn;
 81133a6:	69fb      	ldr	r3, [r7, #28]
}
 81133a8:	4618      	mov	r0, r3
 81133aa:	3728      	adds	r7, #40	@ 0x28
 81133ac:	46bd      	mov	sp, r7
 81133ae:	bd80      	pop	{r7, pc}
 81133b0:	1000ab80 	.word	0x1000ab80
 81133b4:	1000ab94 	.word	0x1000ab94
 81133b8:	1000ab84 	.word	0x1000ab84
 81133bc:	1000ab78 	.word	0x1000ab78
 81133c0:	1000ab88 	.word	0x1000ab88
 81133c4:	1000ab8c 	.word	0x1000ab8c

081133c8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 81133c8:	b580      	push	{r7, lr}
 81133ca:	b086      	sub	sp, #24
 81133cc:	af00      	add	r7, sp, #0
 81133ce:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 81133d0:	687b      	ldr	r3, [r7, #4]
 81133d2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 81133d4:	687b      	ldr	r3, [r7, #4]
 81133d6:	2b00      	cmp	r3, #0
 81133d8:	d04f      	beq.n	811347a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 81133da:	2308      	movs	r3, #8
 81133dc:	425b      	negs	r3, r3
 81133de:	697a      	ldr	r2, [r7, #20]
 81133e0:	4413      	add	r3, r2
 81133e2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 81133e4:	697b      	ldr	r3, [r7, #20]
 81133e6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 81133e8:	693b      	ldr	r3, [r7, #16]
 81133ea:	685a      	ldr	r2, [r3, #4]
 81133ec:	4b25      	ldr	r3, [pc, #148]	@ (8113484 <vPortFree+0xbc>)
 81133ee:	681b      	ldr	r3, [r3, #0]
 81133f0:	4013      	ands	r3, r2
 81133f2:	2b00      	cmp	r3, #0
 81133f4:	d10b      	bne.n	811340e <vPortFree+0x46>
	__asm volatile
 81133f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81133fa:	f383 8811 	msr	BASEPRI, r3
 81133fe:	f3bf 8f6f 	isb	sy
 8113402:	f3bf 8f4f 	dsb	sy
 8113406:	60fb      	str	r3, [r7, #12]
}
 8113408:	bf00      	nop
 811340a:	bf00      	nop
 811340c:	e7fd      	b.n	811340a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 811340e:	693b      	ldr	r3, [r7, #16]
 8113410:	681b      	ldr	r3, [r3, #0]
 8113412:	2b00      	cmp	r3, #0
 8113414:	d00b      	beq.n	811342e <vPortFree+0x66>
	__asm volatile
 8113416:	f04f 0350 	mov.w	r3, #80	@ 0x50
 811341a:	f383 8811 	msr	BASEPRI, r3
 811341e:	f3bf 8f6f 	isb	sy
 8113422:	f3bf 8f4f 	dsb	sy
 8113426:	60bb      	str	r3, [r7, #8]
}
 8113428:	bf00      	nop
 811342a:	bf00      	nop
 811342c:	e7fd      	b.n	811342a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 811342e:	693b      	ldr	r3, [r7, #16]
 8113430:	685a      	ldr	r2, [r3, #4]
 8113432:	4b14      	ldr	r3, [pc, #80]	@ (8113484 <vPortFree+0xbc>)
 8113434:	681b      	ldr	r3, [r3, #0]
 8113436:	4013      	ands	r3, r2
 8113438:	2b00      	cmp	r3, #0
 811343a:	d01e      	beq.n	811347a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 811343c:	693b      	ldr	r3, [r7, #16]
 811343e:	681b      	ldr	r3, [r3, #0]
 8113440:	2b00      	cmp	r3, #0
 8113442:	d11a      	bne.n	811347a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8113444:	693b      	ldr	r3, [r7, #16]
 8113446:	685a      	ldr	r2, [r3, #4]
 8113448:	4b0e      	ldr	r3, [pc, #56]	@ (8113484 <vPortFree+0xbc>)
 811344a:	681b      	ldr	r3, [r3, #0]
 811344c:	43db      	mvns	r3, r3
 811344e:	401a      	ands	r2, r3
 8113450:	693b      	ldr	r3, [r7, #16]
 8113452:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8113454:	f002 fb54 	bl	8115b00 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8113458:	693b      	ldr	r3, [r7, #16]
 811345a:	685a      	ldr	r2, [r3, #4]
 811345c:	4b0a      	ldr	r3, [pc, #40]	@ (8113488 <vPortFree+0xc0>)
 811345e:	681b      	ldr	r3, [r3, #0]
 8113460:	4413      	add	r3, r2
 8113462:	4a09      	ldr	r2, [pc, #36]	@ (8113488 <vPortFree+0xc0>)
 8113464:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8113466:	6938      	ldr	r0, [r7, #16]
 8113468:	f000 f874 	bl	8113554 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 811346c:	4b07      	ldr	r3, [pc, #28]	@ (811348c <vPortFree+0xc4>)
 811346e:	681b      	ldr	r3, [r3, #0]
 8113470:	3301      	adds	r3, #1
 8113472:	4a06      	ldr	r2, [pc, #24]	@ (811348c <vPortFree+0xc4>)
 8113474:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8113476:	f002 fb51 	bl	8115b1c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 811347a:	bf00      	nop
 811347c:	3718      	adds	r7, #24
 811347e:	46bd      	mov	sp, r7
 8113480:	bd80      	pop	{r7, pc}
 8113482:	bf00      	nop
 8113484:	1000ab94 	.word	0x1000ab94
 8113488:	1000ab84 	.word	0x1000ab84
 811348c:	1000ab90 	.word	0x1000ab90

08113490 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8113490:	b480      	push	{r7}
 8113492:	b085      	sub	sp, #20
 8113494:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8113496:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 811349a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 811349c:	4b27      	ldr	r3, [pc, #156]	@ (811353c <prvHeapInit+0xac>)
 811349e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 81134a0:	68fb      	ldr	r3, [r7, #12]
 81134a2:	f003 0307 	and.w	r3, r3, #7
 81134a6:	2b00      	cmp	r3, #0
 81134a8:	d00c      	beq.n	81134c4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 81134aa:	68fb      	ldr	r3, [r7, #12]
 81134ac:	3307      	adds	r3, #7
 81134ae:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 81134b0:	68fb      	ldr	r3, [r7, #12]
 81134b2:	f023 0307 	bic.w	r3, r3, #7
 81134b6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 81134b8:	68ba      	ldr	r2, [r7, #8]
 81134ba:	68fb      	ldr	r3, [r7, #12]
 81134bc:	1ad3      	subs	r3, r2, r3
 81134be:	4a1f      	ldr	r2, [pc, #124]	@ (811353c <prvHeapInit+0xac>)
 81134c0:	4413      	add	r3, r2
 81134c2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 81134c4:	68fb      	ldr	r3, [r7, #12]
 81134c6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 81134c8:	4a1d      	ldr	r2, [pc, #116]	@ (8113540 <prvHeapInit+0xb0>)
 81134ca:	687b      	ldr	r3, [r7, #4]
 81134cc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 81134ce:	4b1c      	ldr	r3, [pc, #112]	@ (8113540 <prvHeapInit+0xb0>)
 81134d0:	2200      	movs	r2, #0
 81134d2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 81134d4:	687b      	ldr	r3, [r7, #4]
 81134d6:	68ba      	ldr	r2, [r7, #8]
 81134d8:	4413      	add	r3, r2
 81134da:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 81134dc:	2208      	movs	r2, #8
 81134de:	68fb      	ldr	r3, [r7, #12]
 81134e0:	1a9b      	subs	r3, r3, r2
 81134e2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 81134e4:	68fb      	ldr	r3, [r7, #12]
 81134e6:	f023 0307 	bic.w	r3, r3, #7
 81134ea:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 81134ec:	68fb      	ldr	r3, [r7, #12]
 81134ee:	4a15      	ldr	r2, [pc, #84]	@ (8113544 <prvHeapInit+0xb4>)
 81134f0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 81134f2:	4b14      	ldr	r3, [pc, #80]	@ (8113544 <prvHeapInit+0xb4>)
 81134f4:	681b      	ldr	r3, [r3, #0]
 81134f6:	2200      	movs	r2, #0
 81134f8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 81134fa:	4b12      	ldr	r3, [pc, #72]	@ (8113544 <prvHeapInit+0xb4>)
 81134fc:	681b      	ldr	r3, [r3, #0]
 81134fe:	2200      	movs	r2, #0
 8113500:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8113502:	687b      	ldr	r3, [r7, #4]
 8113504:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8113506:	683b      	ldr	r3, [r7, #0]
 8113508:	68fa      	ldr	r2, [r7, #12]
 811350a:	1ad2      	subs	r2, r2, r3
 811350c:	683b      	ldr	r3, [r7, #0]
 811350e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8113510:	4b0c      	ldr	r3, [pc, #48]	@ (8113544 <prvHeapInit+0xb4>)
 8113512:	681a      	ldr	r2, [r3, #0]
 8113514:	683b      	ldr	r3, [r7, #0]
 8113516:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8113518:	683b      	ldr	r3, [r7, #0]
 811351a:	685b      	ldr	r3, [r3, #4]
 811351c:	4a0a      	ldr	r2, [pc, #40]	@ (8113548 <prvHeapInit+0xb8>)
 811351e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8113520:	683b      	ldr	r3, [r7, #0]
 8113522:	685b      	ldr	r3, [r3, #4]
 8113524:	4a09      	ldr	r2, [pc, #36]	@ (811354c <prvHeapInit+0xbc>)
 8113526:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8113528:	4b09      	ldr	r3, [pc, #36]	@ (8113550 <prvHeapInit+0xc0>)
 811352a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 811352e:	601a      	str	r2, [r3, #0]
}
 8113530:	bf00      	nop
 8113532:	3714      	adds	r7, #20
 8113534:	46bd      	mov	sp, r7
 8113536:	f85d 7b04 	ldr.w	r7, [sp], #4
 811353a:	4770      	bx	lr
 811353c:	10000b78 	.word	0x10000b78
 8113540:	1000ab78 	.word	0x1000ab78
 8113544:	1000ab80 	.word	0x1000ab80
 8113548:	1000ab88 	.word	0x1000ab88
 811354c:	1000ab84 	.word	0x1000ab84
 8113550:	1000ab94 	.word	0x1000ab94

08113554 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8113554:	b480      	push	{r7}
 8113556:	b085      	sub	sp, #20
 8113558:	af00      	add	r7, sp, #0
 811355a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 811355c:	4b28      	ldr	r3, [pc, #160]	@ (8113600 <prvInsertBlockIntoFreeList+0xac>)
 811355e:	60fb      	str	r3, [r7, #12]
 8113560:	e002      	b.n	8113568 <prvInsertBlockIntoFreeList+0x14>
 8113562:	68fb      	ldr	r3, [r7, #12]
 8113564:	681b      	ldr	r3, [r3, #0]
 8113566:	60fb      	str	r3, [r7, #12]
 8113568:	68fb      	ldr	r3, [r7, #12]
 811356a:	681b      	ldr	r3, [r3, #0]
 811356c:	687a      	ldr	r2, [r7, #4]
 811356e:	429a      	cmp	r2, r3
 8113570:	d8f7      	bhi.n	8113562 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8113572:	68fb      	ldr	r3, [r7, #12]
 8113574:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8113576:	68fb      	ldr	r3, [r7, #12]
 8113578:	685b      	ldr	r3, [r3, #4]
 811357a:	68ba      	ldr	r2, [r7, #8]
 811357c:	4413      	add	r3, r2
 811357e:	687a      	ldr	r2, [r7, #4]
 8113580:	429a      	cmp	r2, r3
 8113582:	d108      	bne.n	8113596 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8113584:	68fb      	ldr	r3, [r7, #12]
 8113586:	685a      	ldr	r2, [r3, #4]
 8113588:	687b      	ldr	r3, [r7, #4]
 811358a:	685b      	ldr	r3, [r3, #4]
 811358c:	441a      	add	r2, r3
 811358e:	68fb      	ldr	r3, [r7, #12]
 8113590:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8113592:	68fb      	ldr	r3, [r7, #12]
 8113594:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8113596:	687b      	ldr	r3, [r7, #4]
 8113598:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 811359a:	687b      	ldr	r3, [r7, #4]
 811359c:	685b      	ldr	r3, [r3, #4]
 811359e:	68ba      	ldr	r2, [r7, #8]
 81135a0:	441a      	add	r2, r3
 81135a2:	68fb      	ldr	r3, [r7, #12]
 81135a4:	681b      	ldr	r3, [r3, #0]
 81135a6:	429a      	cmp	r2, r3
 81135a8:	d118      	bne.n	81135dc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 81135aa:	68fb      	ldr	r3, [r7, #12]
 81135ac:	681a      	ldr	r2, [r3, #0]
 81135ae:	4b15      	ldr	r3, [pc, #84]	@ (8113604 <prvInsertBlockIntoFreeList+0xb0>)
 81135b0:	681b      	ldr	r3, [r3, #0]
 81135b2:	429a      	cmp	r2, r3
 81135b4:	d00d      	beq.n	81135d2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 81135b6:	687b      	ldr	r3, [r7, #4]
 81135b8:	685a      	ldr	r2, [r3, #4]
 81135ba:	68fb      	ldr	r3, [r7, #12]
 81135bc:	681b      	ldr	r3, [r3, #0]
 81135be:	685b      	ldr	r3, [r3, #4]
 81135c0:	441a      	add	r2, r3
 81135c2:	687b      	ldr	r3, [r7, #4]
 81135c4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 81135c6:	68fb      	ldr	r3, [r7, #12]
 81135c8:	681b      	ldr	r3, [r3, #0]
 81135ca:	681a      	ldr	r2, [r3, #0]
 81135cc:	687b      	ldr	r3, [r7, #4]
 81135ce:	601a      	str	r2, [r3, #0]
 81135d0:	e008      	b.n	81135e4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 81135d2:	4b0c      	ldr	r3, [pc, #48]	@ (8113604 <prvInsertBlockIntoFreeList+0xb0>)
 81135d4:	681a      	ldr	r2, [r3, #0]
 81135d6:	687b      	ldr	r3, [r7, #4]
 81135d8:	601a      	str	r2, [r3, #0]
 81135da:	e003      	b.n	81135e4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 81135dc:	68fb      	ldr	r3, [r7, #12]
 81135de:	681a      	ldr	r2, [r3, #0]
 81135e0:	687b      	ldr	r3, [r7, #4]
 81135e2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 81135e4:	68fa      	ldr	r2, [r7, #12]
 81135e6:	687b      	ldr	r3, [r7, #4]
 81135e8:	429a      	cmp	r2, r3
 81135ea:	d002      	beq.n	81135f2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 81135ec:	68fb      	ldr	r3, [r7, #12]
 81135ee:	687a      	ldr	r2, [r7, #4]
 81135f0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 81135f2:	bf00      	nop
 81135f4:	3714      	adds	r7, #20
 81135f6:	46bd      	mov	sp, r7
 81135f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81135fc:	4770      	bx	lr
 81135fe:	bf00      	nop
 8113600:	1000ab78 	.word	0x1000ab78
 8113604:	1000ab80 	.word	0x1000ab80

08113608 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8113608:	b480      	push	{r7}
 811360a:	b083      	sub	sp, #12
 811360c:	af00      	add	r7, sp, #0
 811360e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8113610:	687b      	ldr	r3, [r7, #4]
 8113612:	f103 0208 	add.w	r2, r3, #8
 8113616:	687b      	ldr	r3, [r7, #4]
 8113618:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 811361a:	687b      	ldr	r3, [r7, #4]
 811361c:	f04f 32ff 	mov.w	r2, #4294967295
 8113620:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8113622:	687b      	ldr	r3, [r7, #4]
 8113624:	f103 0208 	add.w	r2, r3, #8
 8113628:	687b      	ldr	r3, [r7, #4]
 811362a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 811362c:	687b      	ldr	r3, [r7, #4]
 811362e:	f103 0208 	add.w	r2, r3, #8
 8113632:	687b      	ldr	r3, [r7, #4]
 8113634:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8113636:	687b      	ldr	r3, [r7, #4]
 8113638:	2200      	movs	r2, #0
 811363a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 811363c:	bf00      	nop
 811363e:	370c      	adds	r7, #12
 8113640:	46bd      	mov	sp, r7
 8113642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8113646:	4770      	bx	lr

08113648 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8113648:	b480      	push	{r7}
 811364a:	b083      	sub	sp, #12
 811364c:	af00      	add	r7, sp, #0
 811364e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8113650:	687b      	ldr	r3, [r7, #4]
 8113652:	2200      	movs	r2, #0
 8113654:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8113656:	bf00      	nop
 8113658:	370c      	adds	r7, #12
 811365a:	46bd      	mov	sp, r7
 811365c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8113660:	4770      	bx	lr

08113662 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8113662:	b480      	push	{r7}
 8113664:	b085      	sub	sp, #20
 8113666:	af00      	add	r7, sp, #0
 8113668:	6078      	str	r0, [r7, #4]
 811366a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 811366c:	687b      	ldr	r3, [r7, #4]
 811366e:	685b      	ldr	r3, [r3, #4]
 8113670:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8113672:	683b      	ldr	r3, [r7, #0]
 8113674:	68fa      	ldr	r2, [r7, #12]
 8113676:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8113678:	68fb      	ldr	r3, [r7, #12]
 811367a:	689a      	ldr	r2, [r3, #8]
 811367c:	683b      	ldr	r3, [r7, #0]
 811367e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8113680:	68fb      	ldr	r3, [r7, #12]
 8113682:	689b      	ldr	r3, [r3, #8]
 8113684:	683a      	ldr	r2, [r7, #0]
 8113686:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8113688:	68fb      	ldr	r3, [r7, #12]
 811368a:	683a      	ldr	r2, [r7, #0]
 811368c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 811368e:	683b      	ldr	r3, [r7, #0]
 8113690:	687a      	ldr	r2, [r7, #4]
 8113692:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8113694:	687b      	ldr	r3, [r7, #4]
 8113696:	681b      	ldr	r3, [r3, #0]
 8113698:	1c5a      	adds	r2, r3, #1
 811369a:	687b      	ldr	r3, [r7, #4]
 811369c:	601a      	str	r2, [r3, #0]
}
 811369e:	bf00      	nop
 81136a0:	3714      	adds	r7, #20
 81136a2:	46bd      	mov	sp, r7
 81136a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81136a8:	4770      	bx	lr

081136aa <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 81136aa:	b480      	push	{r7}
 81136ac:	b085      	sub	sp, #20
 81136ae:	af00      	add	r7, sp, #0
 81136b0:	6078      	str	r0, [r7, #4]
 81136b2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 81136b4:	683b      	ldr	r3, [r7, #0]
 81136b6:	681b      	ldr	r3, [r3, #0]
 81136b8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 81136ba:	68bb      	ldr	r3, [r7, #8]
 81136bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 81136c0:	d103      	bne.n	81136ca <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 81136c2:	687b      	ldr	r3, [r7, #4]
 81136c4:	691b      	ldr	r3, [r3, #16]
 81136c6:	60fb      	str	r3, [r7, #12]
 81136c8:	e00c      	b.n	81136e4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 81136ca:	687b      	ldr	r3, [r7, #4]
 81136cc:	3308      	adds	r3, #8
 81136ce:	60fb      	str	r3, [r7, #12]
 81136d0:	e002      	b.n	81136d8 <vListInsert+0x2e>
 81136d2:	68fb      	ldr	r3, [r7, #12]
 81136d4:	685b      	ldr	r3, [r3, #4]
 81136d6:	60fb      	str	r3, [r7, #12]
 81136d8:	68fb      	ldr	r3, [r7, #12]
 81136da:	685b      	ldr	r3, [r3, #4]
 81136dc:	681b      	ldr	r3, [r3, #0]
 81136de:	68ba      	ldr	r2, [r7, #8]
 81136e0:	429a      	cmp	r2, r3
 81136e2:	d2f6      	bcs.n	81136d2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 81136e4:	68fb      	ldr	r3, [r7, #12]
 81136e6:	685a      	ldr	r2, [r3, #4]
 81136e8:	683b      	ldr	r3, [r7, #0]
 81136ea:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 81136ec:	683b      	ldr	r3, [r7, #0]
 81136ee:	685b      	ldr	r3, [r3, #4]
 81136f0:	683a      	ldr	r2, [r7, #0]
 81136f2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 81136f4:	683b      	ldr	r3, [r7, #0]
 81136f6:	68fa      	ldr	r2, [r7, #12]
 81136f8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 81136fa:	68fb      	ldr	r3, [r7, #12]
 81136fc:	683a      	ldr	r2, [r7, #0]
 81136fe:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8113700:	683b      	ldr	r3, [r7, #0]
 8113702:	687a      	ldr	r2, [r7, #4]
 8113704:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8113706:	687b      	ldr	r3, [r7, #4]
 8113708:	681b      	ldr	r3, [r3, #0]
 811370a:	1c5a      	adds	r2, r3, #1
 811370c:	687b      	ldr	r3, [r7, #4]
 811370e:	601a      	str	r2, [r3, #0]
}
 8113710:	bf00      	nop
 8113712:	3714      	adds	r7, #20
 8113714:	46bd      	mov	sp, r7
 8113716:	f85d 7b04 	ldr.w	r7, [sp], #4
 811371a:	4770      	bx	lr

0811371c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 811371c:	b480      	push	{r7}
 811371e:	b085      	sub	sp, #20
 8113720:	af00      	add	r7, sp, #0
 8113722:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8113724:	687b      	ldr	r3, [r7, #4]
 8113726:	691b      	ldr	r3, [r3, #16]
 8113728:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 811372a:	687b      	ldr	r3, [r7, #4]
 811372c:	685b      	ldr	r3, [r3, #4]
 811372e:	687a      	ldr	r2, [r7, #4]
 8113730:	6892      	ldr	r2, [r2, #8]
 8113732:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8113734:	687b      	ldr	r3, [r7, #4]
 8113736:	689b      	ldr	r3, [r3, #8]
 8113738:	687a      	ldr	r2, [r7, #4]
 811373a:	6852      	ldr	r2, [r2, #4]
 811373c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 811373e:	68fb      	ldr	r3, [r7, #12]
 8113740:	685b      	ldr	r3, [r3, #4]
 8113742:	687a      	ldr	r2, [r7, #4]
 8113744:	429a      	cmp	r2, r3
 8113746:	d103      	bne.n	8113750 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8113748:	687b      	ldr	r3, [r7, #4]
 811374a:	689a      	ldr	r2, [r3, #8]
 811374c:	68fb      	ldr	r3, [r7, #12]
 811374e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8113750:	687b      	ldr	r3, [r7, #4]
 8113752:	2200      	movs	r2, #0
 8113754:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8113756:	68fb      	ldr	r3, [r7, #12]
 8113758:	681b      	ldr	r3, [r3, #0]
 811375a:	1e5a      	subs	r2, r3, #1
 811375c:	68fb      	ldr	r3, [r7, #12]
 811375e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8113760:	68fb      	ldr	r3, [r7, #12]
 8113762:	681b      	ldr	r3, [r3, #0]
}
 8113764:	4618      	mov	r0, r3
 8113766:	3714      	adds	r7, #20
 8113768:	46bd      	mov	sp, r7
 811376a:	f85d 7b04 	ldr.w	r7, [sp], #4
 811376e:	4770      	bx	lr

08113770 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8113770:	b480      	push	{r7}
 8113772:	b085      	sub	sp, #20
 8113774:	af00      	add	r7, sp, #0
 8113776:	60f8      	str	r0, [r7, #12]
 8113778:	60b9      	str	r1, [r7, #8]
 811377a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 811377c:	68fb      	ldr	r3, [r7, #12]
 811377e:	3b04      	subs	r3, #4
 8113780:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8113782:	68fb      	ldr	r3, [r7, #12]
 8113784:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8113788:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 811378a:	68fb      	ldr	r3, [r7, #12]
 811378c:	3b04      	subs	r3, #4
 811378e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8113790:	68bb      	ldr	r3, [r7, #8]
 8113792:	f023 0201 	bic.w	r2, r3, #1
 8113796:	68fb      	ldr	r3, [r7, #12]
 8113798:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 811379a:	68fb      	ldr	r3, [r7, #12]
 811379c:	3b04      	subs	r3, #4
 811379e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 81137a0:	4a0c      	ldr	r2, [pc, #48]	@ (81137d4 <pxPortInitialiseStack+0x64>)
 81137a2:	68fb      	ldr	r3, [r7, #12]
 81137a4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 81137a6:	68fb      	ldr	r3, [r7, #12]
 81137a8:	3b14      	subs	r3, #20
 81137aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 81137ac:	687a      	ldr	r2, [r7, #4]
 81137ae:	68fb      	ldr	r3, [r7, #12]
 81137b0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 81137b2:	68fb      	ldr	r3, [r7, #12]
 81137b4:	3b04      	subs	r3, #4
 81137b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 81137b8:	68fb      	ldr	r3, [r7, #12]
 81137ba:	f06f 0202 	mvn.w	r2, #2
 81137be:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 81137c0:	68fb      	ldr	r3, [r7, #12]
 81137c2:	3b20      	subs	r3, #32
 81137c4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 81137c6:	68fb      	ldr	r3, [r7, #12]
}
 81137c8:	4618      	mov	r0, r3
 81137ca:	3714      	adds	r7, #20
 81137cc:	46bd      	mov	sp, r7
 81137ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 81137d2:	4770      	bx	lr
 81137d4:	081137d9 	.word	0x081137d9

081137d8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 81137d8:	b480      	push	{r7}
 81137da:	b085      	sub	sp, #20
 81137dc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 81137de:	2300      	movs	r3, #0
 81137e0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 81137e2:	4b13      	ldr	r3, [pc, #76]	@ (8113830 <prvTaskExitError+0x58>)
 81137e4:	681b      	ldr	r3, [r3, #0]
 81137e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 81137ea:	d00b      	beq.n	8113804 <prvTaskExitError+0x2c>
	__asm volatile
 81137ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81137f0:	f383 8811 	msr	BASEPRI, r3
 81137f4:	f3bf 8f6f 	isb	sy
 81137f8:	f3bf 8f4f 	dsb	sy
 81137fc:	60fb      	str	r3, [r7, #12]
}
 81137fe:	bf00      	nop
 8113800:	bf00      	nop
 8113802:	e7fd      	b.n	8113800 <prvTaskExitError+0x28>
	__asm volatile
 8113804:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8113808:	f383 8811 	msr	BASEPRI, r3
 811380c:	f3bf 8f6f 	isb	sy
 8113810:	f3bf 8f4f 	dsb	sy
 8113814:	60bb      	str	r3, [r7, #8]
}
 8113816:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8113818:	bf00      	nop
 811381a:	687b      	ldr	r3, [r7, #4]
 811381c:	2b00      	cmp	r3, #0
 811381e:	d0fc      	beq.n	811381a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8113820:	bf00      	nop
 8113822:	bf00      	nop
 8113824:	3714      	adds	r7, #20
 8113826:	46bd      	mov	sp, r7
 8113828:	f85d 7b04 	ldr.w	r7, [sp], #4
 811382c:	4770      	bx	lr
 811382e:	bf00      	nop
 8113830:	10000024 	.word	0x10000024
	...

08113840 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8113840:	4b07      	ldr	r3, [pc, #28]	@ (8113860 <pxCurrentTCBConst2>)
 8113842:	6819      	ldr	r1, [r3, #0]
 8113844:	6808      	ldr	r0, [r1, #0]
 8113846:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 811384a:	f380 8809 	msr	PSP, r0
 811384e:	f3bf 8f6f 	isb	sy
 8113852:	f04f 0000 	mov.w	r0, #0
 8113856:	f380 8811 	msr	BASEPRI, r0
 811385a:	4770      	bx	lr
 811385c:	f3af 8000 	nop.w

08113860 <pxCurrentTCBConst2>:
 8113860:	1000abe0 	.word	0x1000abe0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8113864:	bf00      	nop
 8113866:	bf00      	nop

08113868 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8113868:	4808      	ldr	r0, [pc, #32]	@ (811388c <prvPortStartFirstTask+0x24>)
 811386a:	6800      	ldr	r0, [r0, #0]
 811386c:	6800      	ldr	r0, [r0, #0]
 811386e:	f380 8808 	msr	MSP, r0
 8113872:	f04f 0000 	mov.w	r0, #0
 8113876:	f380 8814 	msr	CONTROL, r0
 811387a:	b662      	cpsie	i
 811387c:	b661      	cpsie	f
 811387e:	f3bf 8f4f 	dsb	sy
 8113882:	f3bf 8f6f 	isb	sy
 8113886:	df00      	svc	0
 8113888:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 811388a:	bf00      	nop
 811388c:	e000ed08 	.word	0xe000ed08

08113890 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8113890:	b580      	push	{r7, lr}
 8113892:	b086      	sub	sp, #24
 8113894:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8113896:	4b47      	ldr	r3, [pc, #284]	@ (81139b4 <xPortStartScheduler+0x124>)
 8113898:	681b      	ldr	r3, [r3, #0]
 811389a:	4a47      	ldr	r2, [pc, #284]	@ (81139b8 <xPortStartScheduler+0x128>)
 811389c:	4293      	cmp	r3, r2
 811389e:	d10b      	bne.n	81138b8 <xPortStartScheduler+0x28>
	__asm volatile
 81138a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81138a4:	f383 8811 	msr	BASEPRI, r3
 81138a8:	f3bf 8f6f 	isb	sy
 81138ac:	f3bf 8f4f 	dsb	sy
 81138b0:	613b      	str	r3, [r7, #16]
}
 81138b2:	bf00      	nop
 81138b4:	bf00      	nop
 81138b6:	e7fd      	b.n	81138b4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 81138b8:	4b3e      	ldr	r3, [pc, #248]	@ (81139b4 <xPortStartScheduler+0x124>)
 81138ba:	681b      	ldr	r3, [r3, #0]
 81138bc:	4a3f      	ldr	r2, [pc, #252]	@ (81139bc <xPortStartScheduler+0x12c>)
 81138be:	4293      	cmp	r3, r2
 81138c0:	d10b      	bne.n	81138da <xPortStartScheduler+0x4a>
	__asm volatile
 81138c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81138c6:	f383 8811 	msr	BASEPRI, r3
 81138ca:	f3bf 8f6f 	isb	sy
 81138ce:	f3bf 8f4f 	dsb	sy
 81138d2:	60fb      	str	r3, [r7, #12]
}
 81138d4:	bf00      	nop
 81138d6:	bf00      	nop
 81138d8:	e7fd      	b.n	81138d6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 81138da:	4b39      	ldr	r3, [pc, #228]	@ (81139c0 <xPortStartScheduler+0x130>)
 81138dc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 81138de:	697b      	ldr	r3, [r7, #20]
 81138e0:	781b      	ldrb	r3, [r3, #0]
 81138e2:	b2db      	uxtb	r3, r3
 81138e4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 81138e6:	697b      	ldr	r3, [r7, #20]
 81138e8:	22ff      	movs	r2, #255	@ 0xff
 81138ea:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 81138ec:	697b      	ldr	r3, [r7, #20]
 81138ee:	781b      	ldrb	r3, [r3, #0]
 81138f0:	b2db      	uxtb	r3, r3
 81138f2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 81138f4:	78fb      	ldrb	r3, [r7, #3]
 81138f6:	b2db      	uxtb	r3, r3
 81138f8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 81138fc:	b2da      	uxtb	r2, r3
 81138fe:	4b31      	ldr	r3, [pc, #196]	@ (81139c4 <xPortStartScheduler+0x134>)
 8113900:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8113902:	4b31      	ldr	r3, [pc, #196]	@ (81139c8 <xPortStartScheduler+0x138>)
 8113904:	2207      	movs	r2, #7
 8113906:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8113908:	e009      	b.n	811391e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 811390a:	4b2f      	ldr	r3, [pc, #188]	@ (81139c8 <xPortStartScheduler+0x138>)
 811390c:	681b      	ldr	r3, [r3, #0]
 811390e:	3b01      	subs	r3, #1
 8113910:	4a2d      	ldr	r2, [pc, #180]	@ (81139c8 <xPortStartScheduler+0x138>)
 8113912:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8113914:	78fb      	ldrb	r3, [r7, #3]
 8113916:	b2db      	uxtb	r3, r3
 8113918:	005b      	lsls	r3, r3, #1
 811391a:	b2db      	uxtb	r3, r3
 811391c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 811391e:	78fb      	ldrb	r3, [r7, #3]
 8113920:	b2db      	uxtb	r3, r3
 8113922:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8113926:	2b80      	cmp	r3, #128	@ 0x80
 8113928:	d0ef      	beq.n	811390a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 811392a:	4b27      	ldr	r3, [pc, #156]	@ (81139c8 <xPortStartScheduler+0x138>)
 811392c:	681b      	ldr	r3, [r3, #0]
 811392e:	f1c3 0307 	rsb	r3, r3, #7
 8113932:	2b04      	cmp	r3, #4
 8113934:	d00b      	beq.n	811394e <xPortStartScheduler+0xbe>
	__asm volatile
 8113936:	f04f 0350 	mov.w	r3, #80	@ 0x50
 811393a:	f383 8811 	msr	BASEPRI, r3
 811393e:	f3bf 8f6f 	isb	sy
 8113942:	f3bf 8f4f 	dsb	sy
 8113946:	60bb      	str	r3, [r7, #8]
}
 8113948:	bf00      	nop
 811394a:	bf00      	nop
 811394c:	e7fd      	b.n	811394a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 811394e:	4b1e      	ldr	r3, [pc, #120]	@ (81139c8 <xPortStartScheduler+0x138>)
 8113950:	681b      	ldr	r3, [r3, #0]
 8113952:	021b      	lsls	r3, r3, #8
 8113954:	4a1c      	ldr	r2, [pc, #112]	@ (81139c8 <xPortStartScheduler+0x138>)
 8113956:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8113958:	4b1b      	ldr	r3, [pc, #108]	@ (81139c8 <xPortStartScheduler+0x138>)
 811395a:	681b      	ldr	r3, [r3, #0]
 811395c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8113960:	4a19      	ldr	r2, [pc, #100]	@ (81139c8 <xPortStartScheduler+0x138>)
 8113962:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8113964:	687b      	ldr	r3, [r7, #4]
 8113966:	b2da      	uxtb	r2, r3
 8113968:	697b      	ldr	r3, [r7, #20]
 811396a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 811396c:	4b17      	ldr	r3, [pc, #92]	@ (81139cc <xPortStartScheduler+0x13c>)
 811396e:	681b      	ldr	r3, [r3, #0]
 8113970:	4a16      	ldr	r2, [pc, #88]	@ (81139cc <xPortStartScheduler+0x13c>)
 8113972:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8113976:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8113978:	4b14      	ldr	r3, [pc, #80]	@ (81139cc <xPortStartScheduler+0x13c>)
 811397a:	681b      	ldr	r3, [r3, #0]
 811397c:	4a13      	ldr	r2, [pc, #76]	@ (81139cc <xPortStartScheduler+0x13c>)
 811397e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8113982:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8113984:	f000 f8da 	bl	8113b3c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8113988:	4b11      	ldr	r3, [pc, #68]	@ (81139d0 <xPortStartScheduler+0x140>)
 811398a:	2200      	movs	r2, #0
 811398c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 811398e:	f000 f8f9 	bl	8113b84 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8113992:	4b10      	ldr	r3, [pc, #64]	@ (81139d4 <xPortStartScheduler+0x144>)
 8113994:	681b      	ldr	r3, [r3, #0]
 8113996:	4a0f      	ldr	r2, [pc, #60]	@ (81139d4 <xPortStartScheduler+0x144>)
 8113998:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 811399c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 811399e:	f7ff ff63 	bl	8113868 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 81139a2:	f002 fa35 	bl	8115e10 <vTaskSwitchContext>
	prvTaskExitError();
 81139a6:	f7ff ff17 	bl	81137d8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 81139aa:	2300      	movs	r3, #0
}
 81139ac:	4618      	mov	r0, r3
 81139ae:	3718      	adds	r7, #24
 81139b0:	46bd      	mov	sp, r7
 81139b2:	bd80      	pop	{r7, pc}
 81139b4:	e000ed00 	.word	0xe000ed00
 81139b8:	410fc271 	.word	0x410fc271
 81139bc:	410fc270 	.word	0x410fc270
 81139c0:	e000e400 	.word	0xe000e400
 81139c4:	1000ab98 	.word	0x1000ab98
 81139c8:	1000ab9c 	.word	0x1000ab9c
 81139cc:	e000ed20 	.word	0xe000ed20
 81139d0:	10000024 	.word	0x10000024
 81139d4:	e000ef34 	.word	0xe000ef34

081139d8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 81139d8:	b480      	push	{r7}
 81139da:	b083      	sub	sp, #12
 81139dc:	af00      	add	r7, sp, #0
	__asm volatile
 81139de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81139e2:	f383 8811 	msr	BASEPRI, r3
 81139e6:	f3bf 8f6f 	isb	sy
 81139ea:	f3bf 8f4f 	dsb	sy
 81139ee:	607b      	str	r3, [r7, #4]
}
 81139f0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 81139f2:	4b10      	ldr	r3, [pc, #64]	@ (8113a34 <vPortEnterCritical+0x5c>)
 81139f4:	681b      	ldr	r3, [r3, #0]
 81139f6:	3301      	adds	r3, #1
 81139f8:	4a0e      	ldr	r2, [pc, #56]	@ (8113a34 <vPortEnterCritical+0x5c>)
 81139fa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 81139fc:	4b0d      	ldr	r3, [pc, #52]	@ (8113a34 <vPortEnterCritical+0x5c>)
 81139fe:	681b      	ldr	r3, [r3, #0]
 8113a00:	2b01      	cmp	r3, #1
 8113a02:	d110      	bne.n	8113a26 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8113a04:	4b0c      	ldr	r3, [pc, #48]	@ (8113a38 <vPortEnterCritical+0x60>)
 8113a06:	681b      	ldr	r3, [r3, #0]
 8113a08:	b2db      	uxtb	r3, r3
 8113a0a:	2b00      	cmp	r3, #0
 8113a0c:	d00b      	beq.n	8113a26 <vPortEnterCritical+0x4e>
	__asm volatile
 8113a0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8113a12:	f383 8811 	msr	BASEPRI, r3
 8113a16:	f3bf 8f6f 	isb	sy
 8113a1a:	f3bf 8f4f 	dsb	sy
 8113a1e:	603b      	str	r3, [r7, #0]
}
 8113a20:	bf00      	nop
 8113a22:	bf00      	nop
 8113a24:	e7fd      	b.n	8113a22 <vPortEnterCritical+0x4a>
	}
}
 8113a26:	bf00      	nop
 8113a28:	370c      	adds	r7, #12
 8113a2a:	46bd      	mov	sp, r7
 8113a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8113a30:	4770      	bx	lr
 8113a32:	bf00      	nop
 8113a34:	10000024 	.word	0x10000024
 8113a38:	e000ed04 	.word	0xe000ed04

08113a3c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8113a3c:	b480      	push	{r7}
 8113a3e:	b083      	sub	sp, #12
 8113a40:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8113a42:	4b12      	ldr	r3, [pc, #72]	@ (8113a8c <vPortExitCritical+0x50>)
 8113a44:	681b      	ldr	r3, [r3, #0]
 8113a46:	2b00      	cmp	r3, #0
 8113a48:	d10b      	bne.n	8113a62 <vPortExitCritical+0x26>
	__asm volatile
 8113a4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8113a4e:	f383 8811 	msr	BASEPRI, r3
 8113a52:	f3bf 8f6f 	isb	sy
 8113a56:	f3bf 8f4f 	dsb	sy
 8113a5a:	607b      	str	r3, [r7, #4]
}
 8113a5c:	bf00      	nop
 8113a5e:	bf00      	nop
 8113a60:	e7fd      	b.n	8113a5e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8113a62:	4b0a      	ldr	r3, [pc, #40]	@ (8113a8c <vPortExitCritical+0x50>)
 8113a64:	681b      	ldr	r3, [r3, #0]
 8113a66:	3b01      	subs	r3, #1
 8113a68:	4a08      	ldr	r2, [pc, #32]	@ (8113a8c <vPortExitCritical+0x50>)
 8113a6a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8113a6c:	4b07      	ldr	r3, [pc, #28]	@ (8113a8c <vPortExitCritical+0x50>)
 8113a6e:	681b      	ldr	r3, [r3, #0]
 8113a70:	2b00      	cmp	r3, #0
 8113a72:	d105      	bne.n	8113a80 <vPortExitCritical+0x44>
 8113a74:	2300      	movs	r3, #0
 8113a76:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8113a78:	683b      	ldr	r3, [r7, #0]
 8113a7a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8113a7e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8113a80:	bf00      	nop
 8113a82:	370c      	adds	r7, #12
 8113a84:	46bd      	mov	sp, r7
 8113a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8113a8a:	4770      	bx	lr
 8113a8c:	10000024 	.word	0x10000024

08113a90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8113a90:	f3ef 8009 	mrs	r0, PSP
 8113a94:	f3bf 8f6f 	isb	sy
 8113a98:	4b15      	ldr	r3, [pc, #84]	@ (8113af0 <pxCurrentTCBConst>)
 8113a9a:	681a      	ldr	r2, [r3, #0]
 8113a9c:	f01e 0f10 	tst.w	lr, #16
 8113aa0:	bf08      	it	eq
 8113aa2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8113aa6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8113aaa:	6010      	str	r0, [r2, #0]
 8113aac:	e92d 0009 	stmdb	sp!, {r0, r3}
 8113ab0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8113ab4:	f380 8811 	msr	BASEPRI, r0
 8113ab8:	f3bf 8f4f 	dsb	sy
 8113abc:	f3bf 8f6f 	isb	sy
 8113ac0:	f002 f9a6 	bl	8115e10 <vTaskSwitchContext>
 8113ac4:	f04f 0000 	mov.w	r0, #0
 8113ac8:	f380 8811 	msr	BASEPRI, r0
 8113acc:	bc09      	pop	{r0, r3}
 8113ace:	6819      	ldr	r1, [r3, #0]
 8113ad0:	6808      	ldr	r0, [r1, #0]
 8113ad2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8113ad6:	f01e 0f10 	tst.w	lr, #16
 8113ada:	bf08      	it	eq
 8113adc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8113ae0:	f380 8809 	msr	PSP, r0
 8113ae4:	f3bf 8f6f 	isb	sy
 8113ae8:	4770      	bx	lr
 8113aea:	bf00      	nop
 8113aec:	f3af 8000 	nop.w

08113af0 <pxCurrentTCBConst>:
 8113af0:	1000abe0 	.word	0x1000abe0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8113af4:	bf00      	nop
 8113af6:	bf00      	nop

08113af8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8113af8:	b580      	push	{r7, lr}
 8113afa:	b082      	sub	sp, #8
 8113afc:	af00      	add	r7, sp, #0
	__asm volatile
 8113afe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8113b02:	f383 8811 	msr	BASEPRI, r3
 8113b06:	f3bf 8f6f 	isb	sy
 8113b0a:	f3bf 8f4f 	dsb	sy
 8113b0e:	607b      	str	r3, [r7, #4]
}
 8113b10:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8113b12:	f002 f8c3 	bl	8115c9c <xTaskIncrementTick>
 8113b16:	4603      	mov	r3, r0
 8113b18:	2b00      	cmp	r3, #0
 8113b1a:	d003      	beq.n	8113b24 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8113b1c:	4b06      	ldr	r3, [pc, #24]	@ (8113b38 <xPortSysTickHandler+0x40>)
 8113b1e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8113b22:	601a      	str	r2, [r3, #0]
 8113b24:	2300      	movs	r3, #0
 8113b26:	603b      	str	r3, [r7, #0]
	__asm volatile
 8113b28:	683b      	ldr	r3, [r7, #0]
 8113b2a:	f383 8811 	msr	BASEPRI, r3
}
 8113b2e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8113b30:	bf00      	nop
 8113b32:	3708      	adds	r7, #8
 8113b34:	46bd      	mov	sp, r7
 8113b36:	bd80      	pop	{r7, pc}
 8113b38:	e000ed04 	.word	0xe000ed04

08113b3c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8113b3c:	b480      	push	{r7}
 8113b3e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8113b40:	4b0b      	ldr	r3, [pc, #44]	@ (8113b70 <vPortSetupTimerInterrupt+0x34>)
 8113b42:	2200      	movs	r2, #0
 8113b44:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8113b46:	4b0b      	ldr	r3, [pc, #44]	@ (8113b74 <vPortSetupTimerInterrupt+0x38>)
 8113b48:	2200      	movs	r2, #0
 8113b4a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8113b4c:	4b0a      	ldr	r3, [pc, #40]	@ (8113b78 <vPortSetupTimerInterrupt+0x3c>)
 8113b4e:	681b      	ldr	r3, [r3, #0]
 8113b50:	4a0a      	ldr	r2, [pc, #40]	@ (8113b7c <vPortSetupTimerInterrupt+0x40>)
 8113b52:	fba2 2303 	umull	r2, r3, r2, r3
 8113b56:	099b      	lsrs	r3, r3, #6
 8113b58:	4a09      	ldr	r2, [pc, #36]	@ (8113b80 <vPortSetupTimerInterrupt+0x44>)
 8113b5a:	3b01      	subs	r3, #1
 8113b5c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8113b5e:	4b04      	ldr	r3, [pc, #16]	@ (8113b70 <vPortSetupTimerInterrupt+0x34>)
 8113b60:	2207      	movs	r2, #7
 8113b62:	601a      	str	r2, [r3, #0]
}
 8113b64:	bf00      	nop
 8113b66:	46bd      	mov	sp, r7
 8113b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8113b6c:	4770      	bx	lr
 8113b6e:	bf00      	nop
 8113b70:	e000e010 	.word	0xe000e010
 8113b74:	e000e018 	.word	0xe000e018
 8113b78:	10000018 	.word	0x10000018
 8113b7c:	10624dd3 	.word	0x10624dd3
 8113b80:	e000e014 	.word	0xe000e014

08113b84 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8113b84:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8113b94 <vPortEnableVFP+0x10>
 8113b88:	6801      	ldr	r1, [r0, #0]
 8113b8a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8113b8e:	6001      	str	r1, [r0, #0]
 8113b90:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8113b92:	bf00      	nop
 8113b94:	e000ed88 	.word	0xe000ed88

08113b98 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8113b98:	b480      	push	{r7}
 8113b9a:	b085      	sub	sp, #20
 8113b9c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8113b9e:	f3ef 8305 	mrs	r3, IPSR
 8113ba2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8113ba4:	68fb      	ldr	r3, [r7, #12]
 8113ba6:	2b0f      	cmp	r3, #15
 8113ba8:	d915      	bls.n	8113bd6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8113baa:	4a18      	ldr	r2, [pc, #96]	@ (8113c0c <vPortValidateInterruptPriority+0x74>)
 8113bac:	68fb      	ldr	r3, [r7, #12]
 8113bae:	4413      	add	r3, r2
 8113bb0:	781b      	ldrb	r3, [r3, #0]
 8113bb2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8113bb4:	4b16      	ldr	r3, [pc, #88]	@ (8113c10 <vPortValidateInterruptPriority+0x78>)
 8113bb6:	781b      	ldrb	r3, [r3, #0]
 8113bb8:	7afa      	ldrb	r2, [r7, #11]
 8113bba:	429a      	cmp	r2, r3
 8113bbc:	d20b      	bcs.n	8113bd6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8113bbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8113bc2:	f383 8811 	msr	BASEPRI, r3
 8113bc6:	f3bf 8f6f 	isb	sy
 8113bca:	f3bf 8f4f 	dsb	sy
 8113bce:	607b      	str	r3, [r7, #4]
}
 8113bd0:	bf00      	nop
 8113bd2:	bf00      	nop
 8113bd4:	e7fd      	b.n	8113bd2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8113bd6:	4b0f      	ldr	r3, [pc, #60]	@ (8113c14 <vPortValidateInterruptPriority+0x7c>)
 8113bd8:	681b      	ldr	r3, [r3, #0]
 8113bda:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8113bde:	4b0e      	ldr	r3, [pc, #56]	@ (8113c18 <vPortValidateInterruptPriority+0x80>)
 8113be0:	681b      	ldr	r3, [r3, #0]
 8113be2:	429a      	cmp	r2, r3
 8113be4:	d90b      	bls.n	8113bfe <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8113be6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8113bea:	f383 8811 	msr	BASEPRI, r3
 8113bee:	f3bf 8f6f 	isb	sy
 8113bf2:	f3bf 8f4f 	dsb	sy
 8113bf6:	603b      	str	r3, [r7, #0]
}
 8113bf8:	bf00      	nop
 8113bfa:	bf00      	nop
 8113bfc:	e7fd      	b.n	8113bfa <vPortValidateInterruptPriority+0x62>
	}
 8113bfe:	bf00      	nop
 8113c00:	3714      	adds	r7, #20
 8113c02:	46bd      	mov	sp, r7
 8113c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8113c08:	4770      	bx	lr
 8113c0a:	bf00      	nop
 8113c0c:	e000e3f0 	.word	0xe000e3f0
 8113c10:	1000ab98 	.word	0x1000ab98
 8113c14:	e000ed0c 	.word	0xe000ed0c
 8113c18:	1000ab9c 	.word	0x1000ab9c

08113c1c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8113c1c:	b580      	push	{r7, lr}
 8113c1e:	b084      	sub	sp, #16
 8113c20:	af00      	add	r7, sp, #0
 8113c22:	6078      	str	r0, [r7, #4]
 8113c24:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8113c26:	687b      	ldr	r3, [r7, #4]
 8113c28:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8113c2a:	68fb      	ldr	r3, [r7, #12]
 8113c2c:	2b00      	cmp	r3, #0
 8113c2e:	d10b      	bne.n	8113c48 <xQueueGenericReset+0x2c>
	__asm volatile
 8113c30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8113c34:	f383 8811 	msr	BASEPRI, r3
 8113c38:	f3bf 8f6f 	isb	sy
 8113c3c:	f3bf 8f4f 	dsb	sy
 8113c40:	60bb      	str	r3, [r7, #8]
}
 8113c42:	bf00      	nop
 8113c44:	bf00      	nop
 8113c46:	e7fd      	b.n	8113c44 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8113c48:	f7ff fec6 	bl	81139d8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8113c4c:	68fb      	ldr	r3, [r7, #12]
 8113c4e:	681a      	ldr	r2, [r3, #0]
 8113c50:	68fb      	ldr	r3, [r7, #12]
 8113c52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8113c54:	68f9      	ldr	r1, [r7, #12]
 8113c56:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8113c58:	fb01 f303 	mul.w	r3, r1, r3
 8113c5c:	441a      	add	r2, r3
 8113c5e:	68fb      	ldr	r3, [r7, #12]
 8113c60:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8113c62:	68fb      	ldr	r3, [r7, #12]
 8113c64:	2200      	movs	r2, #0
 8113c66:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8113c68:	68fb      	ldr	r3, [r7, #12]
 8113c6a:	681a      	ldr	r2, [r3, #0]
 8113c6c:	68fb      	ldr	r3, [r7, #12]
 8113c6e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8113c70:	68fb      	ldr	r3, [r7, #12]
 8113c72:	681a      	ldr	r2, [r3, #0]
 8113c74:	68fb      	ldr	r3, [r7, #12]
 8113c76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8113c78:	3b01      	subs	r3, #1
 8113c7a:	68f9      	ldr	r1, [r7, #12]
 8113c7c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8113c7e:	fb01 f303 	mul.w	r3, r1, r3
 8113c82:	441a      	add	r2, r3
 8113c84:	68fb      	ldr	r3, [r7, #12]
 8113c86:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8113c88:	68fb      	ldr	r3, [r7, #12]
 8113c8a:	22ff      	movs	r2, #255	@ 0xff
 8113c8c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8113c90:	68fb      	ldr	r3, [r7, #12]
 8113c92:	22ff      	movs	r2, #255	@ 0xff
 8113c94:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8113c98:	683b      	ldr	r3, [r7, #0]
 8113c9a:	2b00      	cmp	r3, #0
 8113c9c:	d114      	bne.n	8113cc8 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8113c9e:	68fb      	ldr	r3, [r7, #12]
 8113ca0:	691b      	ldr	r3, [r3, #16]
 8113ca2:	2b00      	cmp	r3, #0
 8113ca4:	d01a      	beq.n	8113cdc <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8113ca6:	68fb      	ldr	r3, [r7, #12]
 8113ca8:	3310      	adds	r3, #16
 8113caa:	4618      	mov	r0, r3
 8113cac:	f002 f968 	bl	8115f80 <xTaskRemoveFromEventList>
 8113cb0:	4603      	mov	r3, r0
 8113cb2:	2b00      	cmp	r3, #0
 8113cb4:	d012      	beq.n	8113cdc <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8113cb6:	4b0d      	ldr	r3, [pc, #52]	@ (8113cec <xQueueGenericReset+0xd0>)
 8113cb8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8113cbc:	601a      	str	r2, [r3, #0]
 8113cbe:	f3bf 8f4f 	dsb	sy
 8113cc2:	f3bf 8f6f 	isb	sy
 8113cc6:	e009      	b.n	8113cdc <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8113cc8:	68fb      	ldr	r3, [r7, #12]
 8113cca:	3310      	adds	r3, #16
 8113ccc:	4618      	mov	r0, r3
 8113cce:	f7ff fc9b 	bl	8113608 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8113cd2:	68fb      	ldr	r3, [r7, #12]
 8113cd4:	3324      	adds	r3, #36	@ 0x24
 8113cd6:	4618      	mov	r0, r3
 8113cd8:	f7ff fc96 	bl	8113608 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8113cdc:	f7ff feae 	bl	8113a3c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8113ce0:	2301      	movs	r3, #1
}
 8113ce2:	4618      	mov	r0, r3
 8113ce4:	3710      	adds	r7, #16
 8113ce6:	46bd      	mov	sp, r7
 8113ce8:	bd80      	pop	{r7, pc}
 8113cea:	bf00      	nop
 8113cec:	e000ed04 	.word	0xe000ed04

08113cf0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8113cf0:	b580      	push	{r7, lr}
 8113cf2:	b08e      	sub	sp, #56	@ 0x38
 8113cf4:	af02      	add	r7, sp, #8
 8113cf6:	60f8      	str	r0, [r7, #12]
 8113cf8:	60b9      	str	r1, [r7, #8]
 8113cfa:	607a      	str	r2, [r7, #4]
 8113cfc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8113cfe:	68fb      	ldr	r3, [r7, #12]
 8113d00:	2b00      	cmp	r3, #0
 8113d02:	d10b      	bne.n	8113d1c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8113d04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8113d08:	f383 8811 	msr	BASEPRI, r3
 8113d0c:	f3bf 8f6f 	isb	sy
 8113d10:	f3bf 8f4f 	dsb	sy
 8113d14:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8113d16:	bf00      	nop
 8113d18:	bf00      	nop
 8113d1a:	e7fd      	b.n	8113d18 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8113d1c:	683b      	ldr	r3, [r7, #0]
 8113d1e:	2b00      	cmp	r3, #0
 8113d20:	d10b      	bne.n	8113d3a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8113d22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8113d26:	f383 8811 	msr	BASEPRI, r3
 8113d2a:	f3bf 8f6f 	isb	sy
 8113d2e:	f3bf 8f4f 	dsb	sy
 8113d32:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8113d34:	bf00      	nop
 8113d36:	bf00      	nop
 8113d38:	e7fd      	b.n	8113d36 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8113d3a:	687b      	ldr	r3, [r7, #4]
 8113d3c:	2b00      	cmp	r3, #0
 8113d3e:	d002      	beq.n	8113d46 <xQueueGenericCreateStatic+0x56>
 8113d40:	68bb      	ldr	r3, [r7, #8]
 8113d42:	2b00      	cmp	r3, #0
 8113d44:	d001      	beq.n	8113d4a <xQueueGenericCreateStatic+0x5a>
 8113d46:	2301      	movs	r3, #1
 8113d48:	e000      	b.n	8113d4c <xQueueGenericCreateStatic+0x5c>
 8113d4a:	2300      	movs	r3, #0
 8113d4c:	2b00      	cmp	r3, #0
 8113d4e:	d10b      	bne.n	8113d68 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8113d50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8113d54:	f383 8811 	msr	BASEPRI, r3
 8113d58:	f3bf 8f6f 	isb	sy
 8113d5c:	f3bf 8f4f 	dsb	sy
 8113d60:	623b      	str	r3, [r7, #32]
}
 8113d62:	bf00      	nop
 8113d64:	bf00      	nop
 8113d66:	e7fd      	b.n	8113d64 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8113d68:	687b      	ldr	r3, [r7, #4]
 8113d6a:	2b00      	cmp	r3, #0
 8113d6c:	d102      	bne.n	8113d74 <xQueueGenericCreateStatic+0x84>
 8113d6e:	68bb      	ldr	r3, [r7, #8]
 8113d70:	2b00      	cmp	r3, #0
 8113d72:	d101      	bne.n	8113d78 <xQueueGenericCreateStatic+0x88>
 8113d74:	2301      	movs	r3, #1
 8113d76:	e000      	b.n	8113d7a <xQueueGenericCreateStatic+0x8a>
 8113d78:	2300      	movs	r3, #0
 8113d7a:	2b00      	cmp	r3, #0
 8113d7c:	d10b      	bne.n	8113d96 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8113d7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8113d82:	f383 8811 	msr	BASEPRI, r3
 8113d86:	f3bf 8f6f 	isb	sy
 8113d8a:	f3bf 8f4f 	dsb	sy
 8113d8e:	61fb      	str	r3, [r7, #28]
}
 8113d90:	bf00      	nop
 8113d92:	bf00      	nop
 8113d94:	e7fd      	b.n	8113d92 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8113d96:	2350      	movs	r3, #80	@ 0x50
 8113d98:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8113d9a:	697b      	ldr	r3, [r7, #20]
 8113d9c:	2b50      	cmp	r3, #80	@ 0x50
 8113d9e:	d00b      	beq.n	8113db8 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8113da0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8113da4:	f383 8811 	msr	BASEPRI, r3
 8113da8:	f3bf 8f6f 	isb	sy
 8113dac:	f3bf 8f4f 	dsb	sy
 8113db0:	61bb      	str	r3, [r7, #24]
}
 8113db2:	bf00      	nop
 8113db4:	bf00      	nop
 8113db6:	e7fd      	b.n	8113db4 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8113db8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8113dba:	683b      	ldr	r3, [r7, #0]
 8113dbc:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8113dbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8113dc0:	2b00      	cmp	r3, #0
 8113dc2:	d00d      	beq.n	8113de0 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8113dc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8113dc6:	2201      	movs	r2, #1
 8113dc8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8113dcc:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8113dd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8113dd2:	9300      	str	r3, [sp, #0]
 8113dd4:	4613      	mov	r3, r2
 8113dd6:	687a      	ldr	r2, [r7, #4]
 8113dd8:	68b9      	ldr	r1, [r7, #8]
 8113dda:	68f8      	ldr	r0, [r7, #12]
 8113ddc:	f000 f840 	bl	8113e60 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8113de0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8113de2:	4618      	mov	r0, r3
 8113de4:	3730      	adds	r7, #48	@ 0x30
 8113de6:	46bd      	mov	sp, r7
 8113de8:	bd80      	pop	{r7, pc}

08113dea <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8113dea:	b580      	push	{r7, lr}
 8113dec:	b08a      	sub	sp, #40	@ 0x28
 8113dee:	af02      	add	r7, sp, #8
 8113df0:	60f8      	str	r0, [r7, #12]
 8113df2:	60b9      	str	r1, [r7, #8]
 8113df4:	4613      	mov	r3, r2
 8113df6:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8113df8:	68fb      	ldr	r3, [r7, #12]
 8113dfa:	2b00      	cmp	r3, #0
 8113dfc:	d10b      	bne.n	8113e16 <xQueueGenericCreate+0x2c>
	__asm volatile
 8113dfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8113e02:	f383 8811 	msr	BASEPRI, r3
 8113e06:	f3bf 8f6f 	isb	sy
 8113e0a:	f3bf 8f4f 	dsb	sy
 8113e0e:	613b      	str	r3, [r7, #16]
}
 8113e10:	bf00      	nop
 8113e12:	bf00      	nop
 8113e14:	e7fd      	b.n	8113e12 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8113e16:	68fb      	ldr	r3, [r7, #12]
 8113e18:	68ba      	ldr	r2, [r7, #8]
 8113e1a:	fb02 f303 	mul.w	r3, r2, r3
 8113e1e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8113e20:	69fb      	ldr	r3, [r7, #28]
 8113e22:	3350      	adds	r3, #80	@ 0x50
 8113e24:	4618      	mov	r0, r3
 8113e26:	f7ff fa01 	bl	811322c <pvPortMalloc>
 8113e2a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8113e2c:	69bb      	ldr	r3, [r7, #24]
 8113e2e:	2b00      	cmp	r3, #0
 8113e30:	d011      	beq.n	8113e56 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8113e32:	69bb      	ldr	r3, [r7, #24]
 8113e34:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8113e36:	697b      	ldr	r3, [r7, #20]
 8113e38:	3350      	adds	r3, #80	@ 0x50
 8113e3a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8113e3c:	69bb      	ldr	r3, [r7, #24]
 8113e3e:	2200      	movs	r2, #0
 8113e40:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8113e44:	79fa      	ldrb	r2, [r7, #7]
 8113e46:	69bb      	ldr	r3, [r7, #24]
 8113e48:	9300      	str	r3, [sp, #0]
 8113e4a:	4613      	mov	r3, r2
 8113e4c:	697a      	ldr	r2, [r7, #20]
 8113e4e:	68b9      	ldr	r1, [r7, #8]
 8113e50:	68f8      	ldr	r0, [r7, #12]
 8113e52:	f000 f805 	bl	8113e60 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8113e56:	69bb      	ldr	r3, [r7, #24]
	}
 8113e58:	4618      	mov	r0, r3
 8113e5a:	3720      	adds	r7, #32
 8113e5c:	46bd      	mov	sp, r7
 8113e5e:	bd80      	pop	{r7, pc}

08113e60 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8113e60:	b580      	push	{r7, lr}
 8113e62:	b084      	sub	sp, #16
 8113e64:	af00      	add	r7, sp, #0
 8113e66:	60f8      	str	r0, [r7, #12]
 8113e68:	60b9      	str	r1, [r7, #8]
 8113e6a:	607a      	str	r2, [r7, #4]
 8113e6c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8113e6e:	68bb      	ldr	r3, [r7, #8]
 8113e70:	2b00      	cmp	r3, #0
 8113e72:	d103      	bne.n	8113e7c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8113e74:	69bb      	ldr	r3, [r7, #24]
 8113e76:	69ba      	ldr	r2, [r7, #24]
 8113e78:	601a      	str	r2, [r3, #0]
 8113e7a:	e002      	b.n	8113e82 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8113e7c:	69bb      	ldr	r3, [r7, #24]
 8113e7e:	687a      	ldr	r2, [r7, #4]
 8113e80:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8113e82:	69bb      	ldr	r3, [r7, #24]
 8113e84:	68fa      	ldr	r2, [r7, #12]
 8113e86:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8113e88:	69bb      	ldr	r3, [r7, #24]
 8113e8a:	68ba      	ldr	r2, [r7, #8]
 8113e8c:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8113e8e:	2101      	movs	r1, #1
 8113e90:	69b8      	ldr	r0, [r7, #24]
 8113e92:	f7ff fec3 	bl	8113c1c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8113e96:	69bb      	ldr	r3, [r7, #24]
 8113e98:	78fa      	ldrb	r2, [r7, #3]
 8113e9a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8113e9e:	bf00      	nop
 8113ea0:	3710      	adds	r7, #16
 8113ea2:	46bd      	mov	sp, r7
 8113ea4:	bd80      	pop	{r7, pc}

08113ea6 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8113ea6:	b580      	push	{r7, lr}
 8113ea8:	b082      	sub	sp, #8
 8113eaa:	af00      	add	r7, sp, #0
 8113eac:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8113eae:	687b      	ldr	r3, [r7, #4]
 8113eb0:	2b00      	cmp	r3, #0
 8113eb2:	d00e      	beq.n	8113ed2 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8113eb4:	687b      	ldr	r3, [r7, #4]
 8113eb6:	2200      	movs	r2, #0
 8113eb8:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8113eba:	687b      	ldr	r3, [r7, #4]
 8113ebc:	2200      	movs	r2, #0
 8113ebe:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8113ec0:	687b      	ldr	r3, [r7, #4]
 8113ec2:	2200      	movs	r2, #0
 8113ec4:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8113ec6:	2300      	movs	r3, #0
 8113ec8:	2200      	movs	r2, #0
 8113eca:	2100      	movs	r1, #0
 8113ecc:	6878      	ldr	r0, [r7, #4]
 8113ece:	f000 f911 	bl	81140f4 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8113ed2:	bf00      	nop
 8113ed4:	3708      	adds	r7, #8
 8113ed6:	46bd      	mov	sp, r7
 8113ed8:	bd80      	pop	{r7, pc}

08113eda <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8113eda:	b580      	push	{r7, lr}
 8113edc:	b086      	sub	sp, #24
 8113ede:	af00      	add	r7, sp, #0
 8113ee0:	4603      	mov	r3, r0
 8113ee2:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8113ee4:	2301      	movs	r3, #1
 8113ee6:	617b      	str	r3, [r7, #20]
 8113ee8:	2300      	movs	r3, #0
 8113eea:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8113eec:	79fb      	ldrb	r3, [r7, #7]
 8113eee:	461a      	mov	r2, r3
 8113ef0:	6939      	ldr	r1, [r7, #16]
 8113ef2:	6978      	ldr	r0, [r7, #20]
 8113ef4:	f7ff ff79 	bl	8113dea <xQueueGenericCreate>
 8113ef8:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8113efa:	68f8      	ldr	r0, [r7, #12]
 8113efc:	f7ff ffd3 	bl	8113ea6 <prvInitialiseMutex>

		return xNewQueue;
 8113f00:	68fb      	ldr	r3, [r7, #12]
	}
 8113f02:	4618      	mov	r0, r3
 8113f04:	3718      	adds	r7, #24
 8113f06:	46bd      	mov	sp, r7
 8113f08:	bd80      	pop	{r7, pc}

08113f0a <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8113f0a:	b580      	push	{r7, lr}
 8113f0c:	b088      	sub	sp, #32
 8113f0e:	af02      	add	r7, sp, #8
 8113f10:	4603      	mov	r3, r0
 8113f12:	6039      	str	r1, [r7, #0]
 8113f14:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8113f16:	2301      	movs	r3, #1
 8113f18:	617b      	str	r3, [r7, #20]
 8113f1a:	2300      	movs	r3, #0
 8113f1c:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8113f1e:	79fb      	ldrb	r3, [r7, #7]
 8113f20:	9300      	str	r3, [sp, #0]
 8113f22:	683b      	ldr	r3, [r7, #0]
 8113f24:	2200      	movs	r2, #0
 8113f26:	6939      	ldr	r1, [r7, #16]
 8113f28:	6978      	ldr	r0, [r7, #20]
 8113f2a:	f7ff fee1 	bl	8113cf0 <xQueueGenericCreateStatic>
 8113f2e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8113f30:	68f8      	ldr	r0, [r7, #12]
 8113f32:	f7ff ffb8 	bl	8113ea6 <prvInitialiseMutex>

		return xNewQueue;
 8113f36:	68fb      	ldr	r3, [r7, #12]
	}
 8113f38:	4618      	mov	r0, r3
 8113f3a:	3718      	adds	r7, #24
 8113f3c:	46bd      	mov	sp, r7
 8113f3e:	bd80      	pop	{r7, pc}

08113f40 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8113f40:	b590      	push	{r4, r7, lr}
 8113f42:	b087      	sub	sp, #28
 8113f44:	af00      	add	r7, sp, #0
 8113f46:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8113f48:	687b      	ldr	r3, [r7, #4]
 8113f4a:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8113f4c:	693b      	ldr	r3, [r7, #16]
 8113f4e:	2b00      	cmp	r3, #0
 8113f50:	d10b      	bne.n	8113f6a <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 8113f52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8113f56:	f383 8811 	msr	BASEPRI, r3
 8113f5a:	f3bf 8f6f 	isb	sy
 8113f5e:	f3bf 8f4f 	dsb	sy
 8113f62:	60fb      	str	r3, [r7, #12]
}
 8113f64:	bf00      	nop
 8113f66:	bf00      	nop
 8113f68:	e7fd      	b.n	8113f66 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8113f6a:	693b      	ldr	r3, [r7, #16]
 8113f6c:	689c      	ldr	r4, [r3, #8]
 8113f6e:	f002 f9f5 	bl	811635c <xTaskGetCurrentTaskHandle>
 8113f72:	4603      	mov	r3, r0
 8113f74:	429c      	cmp	r4, r3
 8113f76:	d111      	bne.n	8113f9c <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8113f78:	693b      	ldr	r3, [r7, #16]
 8113f7a:	68db      	ldr	r3, [r3, #12]
 8113f7c:	1e5a      	subs	r2, r3, #1
 8113f7e:	693b      	ldr	r3, [r7, #16]
 8113f80:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8113f82:	693b      	ldr	r3, [r7, #16]
 8113f84:	68db      	ldr	r3, [r3, #12]
 8113f86:	2b00      	cmp	r3, #0
 8113f88:	d105      	bne.n	8113f96 <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8113f8a:	2300      	movs	r3, #0
 8113f8c:	2200      	movs	r2, #0
 8113f8e:	2100      	movs	r1, #0
 8113f90:	6938      	ldr	r0, [r7, #16]
 8113f92:	f000 f8af 	bl	81140f4 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8113f96:	2301      	movs	r3, #1
 8113f98:	617b      	str	r3, [r7, #20]
 8113f9a:	e001      	b.n	8113fa0 <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8113f9c:	2300      	movs	r3, #0
 8113f9e:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8113fa0:	697b      	ldr	r3, [r7, #20]
	}
 8113fa2:	4618      	mov	r0, r3
 8113fa4:	371c      	adds	r7, #28
 8113fa6:	46bd      	mov	sp, r7
 8113fa8:	bd90      	pop	{r4, r7, pc}

08113faa <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8113faa:	b590      	push	{r4, r7, lr}
 8113fac:	b087      	sub	sp, #28
 8113fae:	af00      	add	r7, sp, #0
 8113fb0:	6078      	str	r0, [r7, #4]
 8113fb2:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8113fb4:	687b      	ldr	r3, [r7, #4]
 8113fb6:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8113fb8:	693b      	ldr	r3, [r7, #16]
 8113fba:	2b00      	cmp	r3, #0
 8113fbc:	d10b      	bne.n	8113fd6 <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 8113fbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8113fc2:	f383 8811 	msr	BASEPRI, r3
 8113fc6:	f3bf 8f6f 	isb	sy
 8113fca:	f3bf 8f4f 	dsb	sy
 8113fce:	60fb      	str	r3, [r7, #12]
}
 8113fd0:	bf00      	nop
 8113fd2:	bf00      	nop
 8113fd4:	e7fd      	b.n	8113fd2 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8113fd6:	693b      	ldr	r3, [r7, #16]
 8113fd8:	689c      	ldr	r4, [r3, #8]
 8113fda:	f002 f9bf 	bl	811635c <xTaskGetCurrentTaskHandle>
 8113fde:	4603      	mov	r3, r0
 8113fe0:	429c      	cmp	r4, r3
 8113fe2:	d107      	bne.n	8113ff4 <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8113fe4:	693b      	ldr	r3, [r7, #16]
 8113fe6:	68db      	ldr	r3, [r3, #12]
 8113fe8:	1c5a      	adds	r2, r3, #1
 8113fea:	693b      	ldr	r3, [r7, #16]
 8113fec:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8113fee:	2301      	movs	r3, #1
 8113ff0:	617b      	str	r3, [r7, #20]
 8113ff2:	e00c      	b.n	811400e <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8113ff4:	6839      	ldr	r1, [r7, #0]
 8113ff6:	6938      	ldr	r0, [r7, #16]
 8113ff8:	f000 fb8e 	bl	8114718 <xQueueSemaphoreTake>
 8113ffc:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8113ffe:	697b      	ldr	r3, [r7, #20]
 8114000:	2b00      	cmp	r3, #0
 8114002:	d004      	beq.n	811400e <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8114004:	693b      	ldr	r3, [r7, #16]
 8114006:	68db      	ldr	r3, [r3, #12]
 8114008:	1c5a      	adds	r2, r3, #1
 811400a:	693b      	ldr	r3, [r7, #16]
 811400c:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 811400e:	697b      	ldr	r3, [r7, #20]
	}
 8114010:	4618      	mov	r0, r3
 8114012:	371c      	adds	r7, #28
 8114014:	46bd      	mov	sp, r7
 8114016:	bd90      	pop	{r4, r7, pc}

08114018 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8114018:	b580      	push	{r7, lr}
 811401a:	b08a      	sub	sp, #40	@ 0x28
 811401c:	af02      	add	r7, sp, #8
 811401e:	60f8      	str	r0, [r7, #12]
 8114020:	60b9      	str	r1, [r7, #8]
 8114022:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8114024:	68fb      	ldr	r3, [r7, #12]
 8114026:	2b00      	cmp	r3, #0
 8114028:	d10b      	bne.n	8114042 <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 811402a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 811402e:	f383 8811 	msr	BASEPRI, r3
 8114032:	f3bf 8f6f 	isb	sy
 8114036:	f3bf 8f4f 	dsb	sy
 811403a:	61bb      	str	r3, [r7, #24]
}
 811403c:	bf00      	nop
 811403e:	bf00      	nop
 8114040:	e7fd      	b.n	811403e <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8114042:	68ba      	ldr	r2, [r7, #8]
 8114044:	68fb      	ldr	r3, [r7, #12]
 8114046:	429a      	cmp	r2, r3
 8114048:	d90b      	bls.n	8114062 <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 811404a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 811404e:	f383 8811 	msr	BASEPRI, r3
 8114052:	f3bf 8f6f 	isb	sy
 8114056:	f3bf 8f4f 	dsb	sy
 811405a:	617b      	str	r3, [r7, #20]
}
 811405c:	bf00      	nop
 811405e:	bf00      	nop
 8114060:	e7fd      	b.n	811405e <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8114062:	2302      	movs	r3, #2
 8114064:	9300      	str	r3, [sp, #0]
 8114066:	687b      	ldr	r3, [r7, #4]
 8114068:	2200      	movs	r2, #0
 811406a:	2100      	movs	r1, #0
 811406c:	68f8      	ldr	r0, [r7, #12]
 811406e:	f7ff fe3f 	bl	8113cf0 <xQueueGenericCreateStatic>
 8114072:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8114074:	69fb      	ldr	r3, [r7, #28]
 8114076:	2b00      	cmp	r3, #0
 8114078:	d002      	beq.n	8114080 <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 811407a:	69fb      	ldr	r3, [r7, #28]
 811407c:	68ba      	ldr	r2, [r7, #8]
 811407e:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8114080:	69fb      	ldr	r3, [r7, #28]
	}
 8114082:	4618      	mov	r0, r3
 8114084:	3720      	adds	r7, #32
 8114086:	46bd      	mov	sp, r7
 8114088:	bd80      	pop	{r7, pc}

0811408a <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 811408a:	b580      	push	{r7, lr}
 811408c:	b086      	sub	sp, #24
 811408e:	af00      	add	r7, sp, #0
 8114090:	6078      	str	r0, [r7, #4]
 8114092:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8114094:	687b      	ldr	r3, [r7, #4]
 8114096:	2b00      	cmp	r3, #0
 8114098:	d10b      	bne.n	81140b2 <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 811409a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 811409e:	f383 8811 	msr	BASEPRI, r3
 81140a2:	f3bf 8f6f 	isb	sy
 81140a6:	f3bf 8f4f 	dsb	sy
 81140aa:	613b      	str	r3, [r7, #16]
}
 81140ac:	bf00      	nop
 81140ae:	bf00      	nop
 81140b0:	e7fd      	b.n	81140ae <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 81140b2:	683a      	ldr	r2, [r7, #0]
 81140b4:	687b      	ldr	r3, [r7, #4]
 81140b6:	429a      	cmp	r2, r3
 81140b8:	d90b      	bls.n	81140d2 <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 81140ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81140be:	f383 8811 	msr	BASEPRI, r3
 81140c2:	f3bf 8f6f 	isb	sy
 81140c6:	f3bf 8f4f 	dsb	sy
 81140ca:	60fb      	str	r3, [r7, #12]
}
 81140cc:	bf00      	nop
 81140ce:	bf00      	nop
 81140d0:	e7fd      	b.n	81140ce <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 81140d2:	2202      	movs	r2, #2
 81140d4:	2100      	movs	r1, #0
 81140d6:	6878      	ldr	r0, [r7, #4]
 81140d8:	f7ff fe87 	bl	8113dea <xQueueGenericCreate>
 81140dc:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 81140de:	697b      	ldr	r3, [r7, #20]
 81140e0:	2b00      	cmp	r3, #0
 81140e2:	d002      	beq.n	81140ea <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 81140e4:	697b      	ldr	r3, [r7, #20]
 81140e6:	683a      	ldr	r2, [r7, #0]
 81140e8:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 81140ea:	697b      	ldr	r3, [r7, #20]
	}
 81140ec:	4618      	mov	r0, r3
 81140ee:	3718      	adds	r7, #24
 81140f0:	46bd      	mov	sp, r7
 81140f2:	bd80      	pop	{r7, pc}

081140f4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 81140f4:	b580      	push	{r7, lr}
 81140f6:	b08e      	sub	sp, #56	@ 0x38
 81140f8:	af00      	add	r7, sp, #0
 81140fa:	60f8      	str	r0, [r7, #12]
 81140fc:	60b9      	str	r1, [r7, #8]
 81140fe:	607a      	str	r2, [r7, #4]
 8114100:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8114102:	2300      	movs	r3, #0
 8114104:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8114106:	68fb      	ldr	r3, [r7, #12]
 8114108:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 811410a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811410c:	2b00      	cmp	r3, #0
 811410e:	d10b      	bne.n	8114128 <xQueueGenericSend+0x34>
	__asm volatile
 8114110:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8114114:	f383 8811 	msr	BASEPRI, r3
 8114118:	f3bf 8f6f 	isb	sy
 811411c:	f3bf 8f4f 	dsb	sy
 8114120:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8114122:	bf00      	nop
 8114124:	bf00      	nop
 8114126:	e7fd      	b.n	8114124 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8114128:	68bb      	ldr	r3, [r7, #8]
 811412a:	2b00      	cmp	r3, #0
 811412c:	d103      	bne.n	8114136 <xQueueGenericSend+0x42>
 811412e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8114130:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8114132:	2b00      	cmp	r3, #0
 8114134:	d101      	bne.n	811413a <xQueueGenericSend+0x46>
 8114136:	2301      	movs	r3, #1
 8114138:	e000      	b.n	811413c <xQueueGenericSend+0x48>
 811413a:	2300      	movs	r3, #0
 811413c:	2b00      	cmp	r3, #0
 811413e:	d10b      	bne.n	8114158 <xQueueGenericSend+0x64>
	__asm volatile
 8114140:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8114144:	f383 8811 	msr	BASEPRI, r3
 8114148:	f3bf 8f6f 	isb	sy
 811414c:	f3bf 8f4f 	dsb	sy
 8114150:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8114152:	bf00      	nop
 8114154:	bf00      	nop
 8114156:	e7fd      	b.n	8114154 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8114158:	683b      	ldr	r3, [r7, #0]
 811415a:	2b02      	cmp	r3, #2
 811415c:	d103      	bne.n	8114166 <xQueueGenericSend+0x72>
 811415e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8114160:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8114162:	2b01      	cmp	r3, #1
 8114164:	d101      	bne.n	811416a <xQueueGenericSend+0x76>
 8114166:	2301      	movs	r3, #1
 8114168:	e000      	b.n	811416c <xQueueGenericSend+0x78>
 811416a:	2300      	movs	r3, #0
 811416c:	2b00      	cmp	r3, #0
 811416e:	d10b      	bne.n	8114188 <xQueueGenericSend+0x94>
	__asm volatile
 8114170:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8114174:	f383 8811 	msr	BASEPRI, r3
 8114178:	f3bf 8f6f 	isb	sy
 811417c:	f3bf 8f4f 	dsb	sy
 8114180:	623b      	str	r3, [r7, #32]
}
 8114182:	bf00      	nop
 8114184:	bf00      	nop
 8114186:	e7fd      	b.n	8114184 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8114188:	f002 f8f8 	bl	811637c <xTaskGetSchedulerState>
 811418c:	4603      	mov	r3, r0
 811418e:	2b00      	cmp	r3, #0
 8114190:	d102      	bne.n	8114198 <xQueueGenericSend+0xa4>
 8114192:	687b      	ldr	r3, [r7, #4]
 8114194:	2b00      	cmp	r3, #0
 8114196:	d101      	bne.n	811419c <xQueueGenericSend+0xa8>
 8114198:	2301      	movs	r3, #1
 811419a:	e000      	b.n	811419e <xQueueGenericSend+0xaa>
 811419c:	2300      	movs	r3, #0
 811419e:	2b00      	cmp	r3, #0
 81141a0:	d10b      	bne.n	81141ba <xQueueGenericSend+0xc6>
	__asm volatile
 81141a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81141a6:	f383 8811 	msr	BASEPRI, r3
 81141aa:	f3bf 8f6f 	isb	sy
 81141ae:	f3bf 8f4f 	dsb	sy
 81141b2:	61fb      	str	r3, [r7, #28]
}
 81141b4:	bf00      	nop
 81141b6:	bf00      	nop
 81141b8:	e7fd      	b.n	81141b6 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 81141ba:	f7ff fc0d 	bl	81139d8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 81141be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81141c0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 81141c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81141c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 81141c6:	429a      	cmp	r2, r3
 81141c8:	d302      	bcc.n	81141d0 <xQueueGenericSend+0xdc>
 81141ca:	683b      	ldr	r3, [r7, #0]
 81141cc:	2b02      	cmp	r3, #2
 81141ce:	d129      	bne.n	8114224 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 81141d0:	683a      	ldr	r2, [r7, #0]
 81141d2:	68b9      	ldr	r1, [r7, #8]
 81141d4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 81141d6:	f000 fc6d 	bl	8114ab4 <prvCopyDataToQueue>
 81141da:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 81141dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81141de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 81141e0:	2b00      	cmp	r3, #0
 81141e2:	d010      	beq.n	8114206 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 81141e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81141e6:	3324      	adds	r3, #36	@ 0x24
 81141e8:	4618      	mov	r0, r3
 81141ea:	f001 fec9 	bl	8115f80 <xTaskRemoveFromEventList>
 81141ee:	4603      	mov	r3, r0
 81141f0:	2b00      	cmp	r3, #0
 81141f2:	d013      	beq.n	811421c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 81141f4:	4b3f      	ldr	r3, [pc, #252]	@ (81142f4 <xQueueGenericSend+0x200>)
 81141f6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 81141fa:	601a      	str	r2, [r3, #0]
 81141fc:	f3bf 8f4f 	dsb	sy
 8114200:	f3bf 8f6f 	isb	sy
 8114204:	e00a      	b.n	811421c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8114206:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8114208:	2b00      	cmp	r3, #0
 811420a:	d007      	beq.n	811421c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 811420c:	4b39      	ldr	r3, [pc, #228]	@ (81142f4 <xQueueGenericSend+0x200>)
 811420e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8114212:	601a      	str	r2, [r3, #0]
 8114214:	f3bf 8f4f 	dsb	sy
 8114218:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 811421c:	f7ff fc0e 	bl	8113a3c <vPortExitCritical>
				return pdPASS;
 8114220:	2301      	movs	r3, #1
 8114222:	e063      	b.n	81142ec <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8114224:	687b      	ldr	r3, [r7, #4]
 8114226:	2b00      	cmp	r3, #0
 8114228:	d103      	bne.n	8114232 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 811422a:	f7ff fc07 	bl	8113a3c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 811422e:	2300      	movs	r3, #0
 8114230:	e05c      	b.n	81142ec <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8114232:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8114234:	2b00      	cmp	r3, #0
 8114236:	d106      	bne.n	8114246 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8114238:	f107 0314 	add.w	r3, r7, #20
 811423c:	4618      	mov	r0, r3
 811423e:	f001 ff2b 	bl	8116098 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8114242:	2301      	movs	r3, #1
 8114244:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8114246:	f7ff fbf9 	bl	8113a3c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 811424a:	f001 fc59 	bl	8115b00 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 811424e:	f7ff fbc3 	bl	81139d8 <vPortEnterCritical>
 8114252:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8114254:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8114258:	b25b      	sxtb	r3, r3
 811425a:	f1b3 3fff 	cmp.w	r3, #4294967295
 811425e:	d103      	bne.n	8114268 <xQueueGenericSend+0x174>
 8114260:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8114262:	2200      	movs	r2, #0
 8114264:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8114268:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811426a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 811426e:	b25b      	sxtb	r3, r3
 8114270:	f1b3 3fff 	cmp.w	r3, #4294967295
 8114274:	d103      	bne.n	811427e <xQueueGenericSend+0x18a>
 8114276:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8114278:	2200      	movs	r2, #0
 811427a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 811427e:	f7ff fbdd 	bl	8113a3c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8114282:	1d3a      	adds	r2, r7, #4
 8114284:	f107 0314 	add.w	r3, r7, #20
 8114288:	4611      	mov	r1, r2
 811428a:	4618      	mov	r0, r3
 811428c:	f001 ff1a 	bl	81160c4 <xTaskCheckForTimeOut>
 8114290:	4603      	mov	r3, r0
 8114292:	2b00      	cmp	r3, #0
 8114294:	d124      	bne.n	81142e0 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8114296:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8114298:	f000 fd04 	bl	8114ca4 <prvIsQueueFull>
 811429c:	4603      	mov	r3, r0
 811429e:	2b00      	cmp	r3, #0
 81142a0:	d018      	beq.n	81142d4 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 81142a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81142a4:	3310      	adds	r3, #16
 81142a6:	687a      	ldr	r2, [r7, #4]
 81142a8:	4611      	mov	r1, r2
 81142aa:	4618      	mov	r0, r3
 81142ac:	f001 fe16 	bl	8115edc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 81142b0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 81142b2:	f000 fc8f 	bl	8114bd4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 81142b6:	f001 fc31 	bl	8115b1c <xTaskResumeAll>
 81142ba:	4603      	mov	r3, r0
 81142bc:	2b00      	cmp	r3, #0
 81142be:	f47f af7c 	bne.w	81141ba <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 81142c2:	4b0c      	ldr	r3, [pc, #48]	@ (81142f4 <xQueueGenericSend+0x200>)
 81142c4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 81142c8:	601a      	str	r2, [r3, #0]
 81142ca:	f3bf 8f4f 	dsb	sy
 81142ce:	f3bf 8f6f 	isb	sy
 81142d2:	e772      	b.n	81141ba <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 81142d4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 81142d6:	f000 fc7d 	bl	8114bd4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 81142da:	f001 fc1f 	bl	8115b1c <xTaskResumeAll>
 81142de:	e76c      	b.n	81141ba <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 81142e0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 81142e2:	f000 fc77 	bl	8114bd4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 81142e6:	f001 fc19 	bl	8115b1c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 81142ea:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 81142ec:	4618      	mov	r0, r3
 81142ee:	3738      	adds	r7, #56	@ 0x38
 81142f0:	46bd      	mov	sp, r7
 81142f2:	bd80      	pop	{r7, pc}
 81142f4:	e000ed04 	.word	0xe000ed04

081142f8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 81142f8:	b580      	push	{r7, lr}
 81142fa:	b090      	sub	sp, #64	@ 0x40
 81142fc:	af00      	add	r7, sp, #0
 81142fe:	60f8      	str	r0, [r7, #12]
 8114300:	60b9      	str	r1, [r7, #8]
 8114302:	607a      	str	r2, [r7, #4]
 8114304:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8114306:	68fb      	ldr	r3, [r7, #12]
 8114308:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 811430a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 811430c:	2b00      	cmp	r3, #0
 811430e:	d10b      	bne.n	8114328 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8114310:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8114314:	f383 8811 	msr	BASEPRI, r3
 8114318:	f3bf 8f6f 	isb	sy
 811431c:	f3bf 8f4f 	dsb	sy
 8114320:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8114322:	bf00      	nop
 8114324:	bf00      	nop
 8114326:	e7fd      	b.n	8114324 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8114328:	68bb      	ldr	r3, [r7, #8]
 811432a:	2b00      	cmp	r3, #0
 811432c:	d103      	bne.n	8114336 <xQueueGenericSendFromISR+0x3e>
 811432e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8114330:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8114332:	2b00      	cmp	r3, #0
 8114334:	d101      	bne.n	811433a <xQueueGenericSendFromISR+0x42>
 8114336:	2301      	movs	r3, #1
 8114338:	e000      	b.n	811433c <xQueueGenericSendFromISR+0x44>
 811433a:	2300      	movs	r3, #0
 811433c:	2b00      	cmp	r3, #0
 811433e:	d10b      	bne.n	8114358 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8114340:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8114344:	f383 8811 	msr	BASEPRI, r3
 8114348:	f3bf 8f6f 	isb	sy
 811434c:	f3bf 8f4f 	dsb	sy
 8114350:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8114352:	bf00      	nop
 8114354:	bf00      	nop
 8114356:	e7fd      	b.n	8114354 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8114358:	683b      	ldr	r3, [r7, #0]
 811435a:	2b02      	cmp	r3, #2
 811435c:	d103      	bne.n	8114366 <xQueueGenericSendFromISR+0x6e>
 811435e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8114360:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8114362:	2b01      	cmp	r3, #1
 8114364:	d101      	bne.n	811436a <xQueueGenericSendFromISR+0x72>
 8114366:	2301      	movs	r3, #1
 8114368:	e000      	b.n	811436c <xQueueGenericSendFromISR+0x74>
 811436a:	2300      	movs	r3, #0
 811436c:	2b00      	cmp	r3, #0
 811436e:	d10b      	bne.n	8114388 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8114370:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8114374:	f383 8811 	msr	BASEPRI, r3
 8114378:	f3bf 8f6f 	isb	sy
 811437c:	f3bf 8f4f 	dsb	sy
 8114380:	623b      	str	r3, [r7, #32]
}
 8114382:	bf00      	nop
 8114384:	bf00      	nop
 8114386:	e7fd      	b.n	8114384 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8114388:	f7ff fc06 	bl	8113b98 <vPortValidateInterruptPriority>
	__asm volatile
 811438c:	f3ef 8211 	mrs	r2, BASEPRI
 8114390:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8114394:	f383 8811 	msr	BASEPRI, r3
 8114398:	f3bf 8f6f 	isb	sy
 811439c:	f3bf 8f4f 	dsb	sy
 81143a0:	61fa      	str	r2, [r7, #28]
 81143a2:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 81143a4:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 81143a6:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 81143a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81143aa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 81143ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81143ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 81143b0:	429a      	cmp	r2, r3
 81143b2:	d302      	bcc.n	81143ba <xQueueGenericSendFromISR+0xc2>
 81143b4:	683b      	ldr	r3, [r7, #0]
 81143b6:	2b02      	cmp	r3, #2
 81143b8:	d12f      	bne.n	811441a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 81143ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81143bc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 81143c0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 81143c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81143c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 81143c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 81143ca:	683a      	ldr	r2, [r7, #0]
 81143cc:	68b9      	ldr	r1, [r7, #8]
 81143ce:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 81143d0:	f000 fb70 	bl	8114ab4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 81143d4:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 81143d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 81143dc:	d112      	bne.n	8114404 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 81143de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81143e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 81143e2:	2b00      	cmp	r3, #0
 81143e4:	d016      	beq.n	8114414 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 81143e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81143e8:	3324      	adds	r3, #36	@ 0x24
 81143ea:	4618      	mov	r0, r3
 81143ec:	f001 fdc8 	bl	8115f80 <xTaskRemoveFromEventList>
 81143f0:	4603      	mov	r3, r0
 81143f2:	2b00      	cmp	r3, #0
 81143f4:	d00e      	beq.n	8114414 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 81143f6:	687b      	ldr	r3, [r7, #4]
 81143f8:	2b00      	cmp	r3, #0
 81143fa:	d00b      	beq.n	8114414 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 81143fc:	687b      	ldr	r3, [r7, #4]
 81143fe:	2201      	movs	r2, #1
 8114400:	601a      	str	r2, [r3, #0]
 8114402:	e007      	b.n	8114414 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8114404:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8114408:	3301      	adds	r3, #1
 811440a:	b2db      	uxtb	r3, r3
 811440c:	b25a      	sxtb	r2, r3
 811440e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8114410:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8114414:	2301      	movs	r3, #1
 8114416:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8114418:	e001      	b.n	811441e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 811441a:	2300      	movs	r3, #0
 811441c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 811441e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8114420:	617b      	str	r3, [r7, #20]
	__asm volatile
 8114422:	697b      	ldr	r3, [r7, #20]
 8114424:	f383 8811 	msr	BASEPRI, r3
}
 8114428:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 811442a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 811442c:	4618      	mov	r0, r3
 811442e:	3740      	adds	r7, #64	@ 0x40
 8114430:	46bd      	mov	sp, r7
 8114432:	bd80      	pop	{r7, pc}

08114434 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8114434:	b580      	push	{r7, lr}
 8114436:	b08e      	sub	sp, #56	@ 0x38
 8114438:	af00      	add	r7, sp, #0
 811443a:	6078      	str	r0, [r7, #4]
 811443c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 811443e:	687b      	ldr	r3, [r7, #4]
 8114440:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8114442:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8114444:	2b00      	cmp	r3, #0
 8114446:	d10b      	bne.n	8114460 <xQueueGiveFromISR+0x2c>
	__asm volatile
 8114448:	f04f 0350 	mov.w	r3, #80	@ 0x50
 811444c:	f383 8811 	msr	BASEPRI, r3
 8114450:	f3bf 8f6f 	isb	sy
 8114454:	f3bf 8f4f 	dsb	sy
 8114458:	623b      	str	r3, [r7, #32]
}
 811445a:	bf00      	nop
 811445c:	bf00      	nop
 811445e:	e7fd      	b.n	811445c <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8114460:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8114462:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8114464:	2b00      	cmp	r3, #0
 8114466:	d00b      	beq.n	8114480 <xQueueGiveFromISR+0x4c>
	__asm volatile
 8114468:	f04f 0350 	mov.w	r3, #80	@ 0x50
 811446c:	f383 8811 	msr	BASEPRI, r3
 8114470:	f3bf 8f6f 	isb	sy
 8114474:	f3bf 8f4f 	dsb	sy
 8114478:	61fb      	str	r3, [r7, #28]
}
 811447a:	bf00      	nop
 811447c:	bf00      	nop
 811447e:	e7fd      	b.n	811447c <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8114480:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8114482:	681b      	ldr	r3, [r3, #0]
 8114484:	2b00      	cmp	r3, #0
 8114486:	d103      	bne.n	8114490 <xQueueGiveFromISR+0x5c>
 8114488:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811448a:	689b      	ldr	r3, [r3, #8]
 811448c:	2b00      	cmp	r3, #0
 811448e:	d101      	bne.n	8114494 <xQueueGiveFromISR+0x60>
 8114490:	2301      	movs	r3, #1
 8114492:	e000      	b.n	8114496 <xQueueGiveFromISR+0x62>
 8114494:	2300      	movs	r3, #0
 8114496:	2b00      	cmp	r3, #0
 8114498:	d10b      	bne.n	81144b2 <xQueueGiveFromISR+0x7e>
	__asm volatile
 811449a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 811449e:	f383 8811 	msr	BASEPRI, r3
 81144a2:	f3bf 8f6f 	isb	sy
 81144a6:	f3bf 8f4f 	dsb	sy
 81144aa:	61bb      	str	r3, [r7, #24]
}
 81144ac:	bf00      	nop
 81144ae:	bf00      	nop
 81144b0:	e7fd      	b.n	81144ae <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 81144b2:	f7ff fb71 	bl	8113b98 <vPortValidateInterruptPriority>
	__asm volatile
 81144b6:	f3ef 8211 	mrs	r2, BASEPRI
 81144ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81144be:	f383 8811 	msr	BASEPRI, r3
 81144c2:	f3bf 8f6f 	isb	sy
 81144c6:	f3bf 8f4f 	dsb	sy
 81144ca:	617a      	str	r2, [r7, #20]
 81144cc:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 81144ce:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 81144d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 81144d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81144d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 81144d6:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 81144d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81144da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 81144dc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 81144de:	429a      	cmp	r2, r3
 81144e0:	d22b      	bcs.n	811453a <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 81144e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81144e4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 81144e8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 81144ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81144ee:	1c5a      	adds	r2, r3, #1
 81144f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81144f2:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 81144f4:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 81144f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 81144fc:	d112      	bne.n	8114524 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 81144fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8114500:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8114502:	2b00      	cmp	r3, #0
 8114504:	d016      	beq.n	8114534 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8114506:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8114508:	3324      	adds	r3, #36	@ 0x24
 811450a:	4618      	mov	r0, r3
 811450c:	f001 fd38 	bl	8115f80 <xTaskRemoveFromEventList>
 8114510:	4603      	mov	r3, r0
 8114512:	2b00      	cmp	r3, #0
 8114514:	d00e      	beq.n	8114534 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8114516:	683b      	ldr	r3, [r7, #0]
 8114518:	2b00      	cmp	r3, #0
 811451a:	d00b      	beq.n	8114534 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 811451c:	683b      	ldr	r3, [r7, #0]
 811451e:	2201      	movs	r2, #1
 8114520:	601a      	str	r2, [r3, #0]
 8114522:	e007      	b.n	8114534 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8114524:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8114528:	3301      	adds	r3, #1
 811452a:	b2db      	uxtb	r3, r3
 811452c:	b25a      	sxtb	r2, r3
 811452e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8114530:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8114534:	2301      	movs	r3, #1
 8114536:	637b      	str	r3, [r7, #52]	@ 0x34
 8114538:	e001      	b.n	811453e <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 811453a:	2300      	movs	r3, #0
 811453c:	637b      	str	r3, [r7, #52]	@ 0x34
 811453e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8114540:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8114542:	68fb      	ldr	r3, [r7, #12]
 8114544:	f383 8811 	msr	BASEPRI, r3
}
 8114548:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 811454a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 811454c:	4618      	mov	r0, r3
 811454e:	3738      	adds	r7, #56	@ 0x38
 8114550:	46bd      	mov	sp, r7
 8114552:	bd80      	pop	{r7, pc}

08114554 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8114554:	b580      	push	{r7, lr}
 8114556:	b08c      	sub	sp, #48	@ 0x30
 8114558:	af00      	add	r7, sp, #0
 811455a:	60f8      	str	r0, [r7, #12]
 811455c:	60b9      	str	r1, [r7, #8]
 811455e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8114560:	2300      	movs	r3, #0
 8114562:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8114564:	68fb      	ldr	r3, [r7, #12]
 8114566:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8114568:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 811456a:	2b00      	cmp	r3, #0
 811456c:	d10b      	bne.n	8114586 <xQueueReceive+0x32>
	__asm volatile
 811456e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8114572:	f383 8811 	msr	BASEPRI, r3
 8114576:	f3bf 8f6f 	isb	sy
 811457a:	f3bf 8f4f 	dsb	sy
 811457e:	623b      	str	r3, [r7, #32]
}
 8114580:	bf00      	nop
 8114582:	bf00      	nop
 8114584:	e7fd      	b.n	8114582 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8114586:	68bb      	ldr	r3, [r7, #8]
 8114588:	2b00      	cmp	r3, #0
 811458a:	d103      	bne.n	8114594 <xQueueReceive+0x40>
 811458c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 811458e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8114590:	2b00      	cmp	r3, #0
 8114592:	d101      	bne.n	8114598 <xQueueReceive+0x44>
 8114594:	2301      	movs	r3, #1
 8114596:	e000      	b.n	811459a <xQueueReceive+0x46>
 8114598:	2300      	movs	r3, #0
 811459a:	2b00      	cmp	r3, #0
 811459c:	d10b      	bne.n	81145b6 <xQueueReceive+0x62>
	__asm volatile
 811459e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81145a2:	f383 8811 	msr	BASEPRI, r3
 81145a6:	f3bf 8f6f 	isb	sy
 81145aa:	f3bf 8f4f 	dsb	sy
 81145ae:	61fb      	str	r3, [r7, #28]
}
 81145b0:	bf00      	nop
 81145b2:	bf00      	nop
 81145b4:	e7fd      	b.n	81145b2 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 81145b6:	f001 fee1 	bl	811637c <xTaskGetSchedulerState>
 81145ba:	4603      	mov	r3, r0
 81145bc:	2b00      	cmp	r3, #0
 81145be:	d102      	bne.n	81145c6 <xQueueReceive+0x72>
 81145c0:	687b      	ldr	r3, [r7, #4]
 81145c2:	2b00      	cmp	r3, #0
 81145c4:	d101      	bne.n	81145ca <xQueueReceive+0x76>
 81145c6:	2301      	movs	r3, #1
 81145c8:	e000      	b.n	81145cc <xQueueReceive+0x78>
 81145ca:	2300      	movs	r3, #0
 81145cc:	2b00      	cmp	r3, #0
 81145ce:	d10b      	bne.n	81145e8 <xQueueReceive+0x94>
	__asm volatile
 81145d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81145d4:	f383 8811 	msr	BASEPRI, r3
 81145d8:	f3bf 8f6f 	isb	sy
 81145dc:	f3bf 8f4f 	dsb	sy
 81145e0:	61bb      	str	r3, [r7, #24]
}
 81145e2:	bf00      	nop
 81145e4:	bf00      	nop
 81145e6:	e7fd      	b.n	81145e4 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 81145e8:	f7ff f9f6 	bl	81139d8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 81145ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81145ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 81145f0:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 81145f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81145f4:	2b00      	cmp	r3, #0
 81145f6:	d01f      	beq.n	8114638 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 81145f8:	68b9      	ldr	r1, [r7, #8]
 81145fa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 81145fc:	f000 fac4 	bl	8114b88 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8114600:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8114602:	1e5a      	subs	r2, r3, #1
 8114604:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8114606:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8114608:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 811460a:	691b      	ldr	r3, [r3, #16]
 811460c:	2b00      	cmp	r3, #0
 811460e:	d00f      	beq.n	8114630 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8114610:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8114612:	3310      	adds	r3, #16
 8114614:	4618      	mov	r0, r3
 8114616:	f001 fcb3 	bl	8115f80 <xTaskRemoveFromEventList>
 811461a:	4603      	mov	r3, r0
 811461c:	2b00      	cmp	r3, #0
 811461e:	d007      	beq.n	8114630 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8114620:	4b3c      	ldr	r3, [pc, #240]	@ (8114714 <xQueueReceive+0x1c0>)
 8114622:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8114626:	601a      	str	r2, [r3, #0]
 8114628:	f3bf 8f4f 	dsb	sy
 811462c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8114630:	f7ff fa04 	bl	8113a3c <vPortExitCritical>
				return pdPASS;
 8114634:	2301      	movs	r3, #1
 8114636:	e069      	b.n	811470c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8114638:	687b      	ldr	r3, [r7, #4]
 811463a:	2b00      	cmp	r3, #0
 811463c:	d103      	bne.n	8114646 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 811463e:	f7ff f9fd 	bl	8113a3c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8114642:	2300      	movs	r3, #0
 8114644:	e062      	b.n	811470c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8114646:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8114648:	2b00      	cmp	r3, #0
 811464a:	d106      	bne.n	811465a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 811464c:	f107 0310 	add.w	r3, r7, #16
 8114650:	4618      	mov	r0, r3
 8114652:	f001 fd21 	bl	8116098 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8114656:	2301      	movs	r3, #1
 8114658:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 811465a:	f7ff f9ef 	bl	8113a3c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 811465e:	f001 fa4f 	bl	8115b00 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8114662:	f7ff f9b9 	bl	81139d8 <vPortEnterCritical>
 8114666:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8114668:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 811466c:	b25b      	sxtb	r3, r3
 811466e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8114672:	d103      	bne.n	811467c <xQueueReceive+0x128>
 8114674:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8114676:	2200      	movs	r2, #0
 8114678:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 811467c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 811467e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8114682:	b25b      	sxtb	r3, r3
 8114684:	f1b3 3fff 	cmp.w	r3, #4294967295
 8114688:	d103      	bne.n	8114692 <xQueueReceive+0x13e>
 811468a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 811468c:	2200      	movs	r2, #0
 811468e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8114692:	f7ff f9d3 	bl	8113a3c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8114696:	1d3a      	adds	r2, r7, #4
 8114698:	f107 0310 	add.w	r3, r7, #16
 811469c:	4611      	mov	r1, r2
 811469e:	4618      	mov	r0, r3
 81146a0:	f001 fd10 	bl	81160c4 <xTaskCheckForTimeOut>
 81146a4:	4603      	mov	r3, r0
 81146a6:	2b00      	cmp	r3, #0
 81146a8:	d123      	bne.n	81146f2 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 81146aa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 81146ac:	f000 fae4 	bl	8114c78 <prvIsQueueEmpty>
 81146b0:	4603      	mov	r3, r0
 81146b2:	2b00      	cmp	r3, #0
 81146b4:	d017      	beq.n	81146e6 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 81146b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81146b8:	3324      	adds	r3, #36	@ 0x24
 81146ba:	687a      	ldr	r2, [r7, #4]
 81146bc:	4611      	mov	r1, r2
 81146be:	4618      	mov	r0, r3
 81146c0:	f001 fc0c 	bl	8115edc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 81146c4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 81146c6:	f000 fa85 	bl	8114bd4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 81146ca:	f001 fa27 	bl	8115b1c <xTaskResumeAll>
 81146ce:	4603      	mov	r3, r0
 81146d0:	2b00      	cmp	r3, #0
 81146d2:	d189      	bne.n	81145e8 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 81146d4:	4b0f      	ldr	r3, [pc, #60]	@ (8114714 <xQueueReceive+0x1c0>)
 81146d6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 81146da:	601a      	str	r2, [r3, #0]
 81146dc:	f3bf 8f4f 	dsb	sy
 81146e0:	f3bf 8f6f 	isb	sy
 81146e4:	e780      	b.n	81145e8 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 81146e6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 81146e8:	f000 fa74 	bl	8114bd4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 81146ec:	f001 fa16 	bl	8115b1c <xTaskResumeAll>
 81146f0:	e77a      	b.n	81145e8 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 81146f2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 81146f4:	f000 fa6e 	bl	8114bd4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 81146f8:	f001 fa10 	bl	8115b1c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 81146fc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 81146fe:	f000 fabb 	bl	8114c78 <prvIsQueueEmpty>
 8114702:	4603      	mov	r3, r0
 8114704:	2b00      	cmp	r3, #0
 8114706:	f43f af6f 	beq.w	81145e8 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 811470a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 811470c:	4618      	mov	r0, r3
 811470e:	3730      	adds	r7, #48	@ 0x30
 8114710:	46bd      	mov	sp, r7
 8114712:	bd80      	pop	{r7, pc}
 8114714:	e000ed04 	.word	0xe000ed04

08114718 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8114718:	b580      	push	{r7, lr}
 811471a:	b08e      	sub	sp, #56	@ 0x38
 811471c:	af00      	add	r7, sp, #0
 811471e:	6078      	str	r0, [r7, #4]
 8114720:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8114722:	2300      	movs	r3, #0
 8114724:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8114726:	687b      	ldr	r3, [r7, #4]
 8114728:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 811472a:	2300      	movs	r3, #0
 811472c:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 811472e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8114730:	2b00      	cmp	r3, #0
 8114732:	d10b      	bne.n	811474c <xQueueSemaphoreTake+0x34>
	__asm volatile
 8114734:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8114738:	f383 8811 	msr	BASEPRI, r3
 811473c:	f3bf 8f6f 	isb	sy
 8114740:	f3bf 8f4f 	dsb	sy
 8114744:	623b      	str	r3, [r7, #32]
}
 8114746:	bf00      	nop
 8114748:	bf00      	nop
 811474a:	e7fd      	b.n	8114748 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 811474c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811474e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8114750:	2b00      	cmp	r3, #0
 8114752:	d00b      	beq.n	811476c <xQueueSemaphoreTake+0x54>
	__asm volatile
 8114754:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8114758:	f383 8811 	msr	BASEPRI, r3
 811475c:	f3bf 8f6f 	isb	sy
 8114760:	f3bf 8f4f 	dsb	sy
 8114764:	61fb      	str	r3, [r7, #28]
}
 8114766:	bf00      	nop
 8114768:	bf00      	nop
 811476a:	e7fd      	b.n	8114768 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 811476c:	f001 fe06 	bl	811637c <xTaskGetSchedulerState>
 8114770:	4603      	mov	r3, r0
 8114772:	2b00      	cmp	r3, #0
 8114774:	d102      	bne.n	811477c <xQueueSemaphoreTake+0x64>
 8114776:	683b      	ldr	r3, [r7, #0]
 8114778:	2b00      	cmp	r3, #0
 811477a:	d101      	bne.n	8114780 <xQueueSemaphoreTake+0x68>
 811477c:	2301      	movs	r3, #1
 811477e:	e000      	b.n	8114782 <xQueueSemaphoreTake+0x6a>
 8114780:	2300      	movs	r3, #0
 8114782:	2b00      	cmp	r3, #0
 8114784:	d10b      	bne.n	811479e <xQueueSemaphoreTake+0x86>
	__asm volatile
 8114786:	f04f 0350 	mov.w	r3, #80	@ 0x50
 811478a:	f383 8811 	msr	BASEPRI, r3
 811478e:	f3bf 8f6f 	isb	sy
 8114792:	f3bf 8f4f 	dsb	sy
 8114796:	61bb      	str	r3, [r7, #24]
}
 8114798:	bf00      	nop
 811479a:	bf00      	nop
 811479c:	e7fd      	b.n	811479a <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 811479e:	f7ff f91b 	bl	81139d8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 81147a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81147a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 81147a6:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 81147a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81147aa:	2b00      	cmp	r3, #0
 81147ac:	d024      	beq.n	81147f8 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 81147ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81147b0:	1e5a      	subs	r2, r3, #1
 81147b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81147b4:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 81147b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81147b8:	681b      	ldr	r3, [r3, #0]
 81147ba:	2b00      	cmp	r3, #0
 81147bc:	d104      	bne.n	81147c8 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 81147be:	f001 ff57 	bl	8116670 <pvTaskIncrementMutexHeldCount>
 81147c2:	4602      	mov	r2, r0
 81147c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81147c6:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 81147c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81147ca:	691b      	ldr	r3, [r3, #16]
 81147cc:	2b00      	cmp	r3, #0
 81147ce:	d00f      	beq.n	81147f0 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 81147d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81147d2:	3310      	adds	r3, #16
 81147d4:	4618      	mov	r0, r3
 81147d6:	f001 fbd3 	bl	8115f80 <xTaskRemoveFromEventList>
 81147da:	4603      	mov	r3, r0
 81147dc:	2b00      	cmp	r3, #0
 81147de:	d007      	beq.n	81147f0 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 81147e0:	4b54      	ldr	r3, [pc, #336]	@ (8114934 <xQueueSemaphoreTake+0x21c>)
 81147e2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 81147e6:	601a      	str	r2, [r3, #0]
 81147e8:	f3bf 8f4f 	dsb	sy
 81147ec:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 81147f0:	f7ff f924 	bl	8113a3c <vPortExitCritical>
				return pdPASS;
 81147f4:	2301      	movs	r3, #1
 81147f6:	e098      	b.n	811492a <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 81147f8:	683b      	ldr	r3, [r7, #0]
 81147fa:	2b00      	cmp	r3, #0
 81147fc:	d112      	bne.n	8114824 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 81147fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8114800:	2b00      	cmp	r3, #0
 8114802:	d00b      	beq.n	811481c <xQueueSemaphoreTake+0x104>
	__asm volatile
 8114804:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8114808:	f383 8811 	msr	BASEPRI, r3
 811480c:	f3bf 8f6f 	isb	sy
 8114810:	f3bf 8f4f 	dsb	sy
 8114814:	617b      	str	r3, [r7, #20]
}
 8114816:	bf00      	nop
 8114818:	bf00      	nop
 811481a:	e7fd      	b.n	8114818 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 811481c:	f7ff f90e 	bl	8113a3c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8114820:	2300      	movs	r3, #0
 8114822:	e082      	b.n	811492a <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8114824:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8114826:	2b00      	cmp	r3, #0
 8114828:	d106      	bne.n	8114838 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 811482a:	f107 030c 	add.w	r3, r7, #12
 811482e:	4618      	mov	r0, r3
 8114830:	f001 fc32 	bl	8116098 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8114834:	2301      	movs	r3, #1
 8114836:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8114838:	f7ff f900 	bl	8113a3c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 811483c:	f001 f960 	bl	8115b00 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8114840:	f7ff f8ca 	bl	81139d8 <vPortEnterCritical>
 8114844:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8114846:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 811484a:	b25b      	sxtb	r3, r3
 811484c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8114850:	d103      	bne.n	811485a <xQueueSemaphoreTake+0x142>
 8114852:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8114854:	2200      	movs	r2, #0
 8114856:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 811485a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811485c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8114860:	b25b      	sxtb	r3, r3
 8114862:	f1b3 3fff 	cmp.w	r3, #4294967295
 8114866:	d103      	bne.n	8114870 <xQueueSemaphoreTake+0x158>
 8114868:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811486a:	2200      	movs	r2, #0
 811486c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8114870:	f7ff f8e4 	bl	8113a3c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8114874:	463a      	mov	r2, r7
 8114876:	f107 030c 	add.w	r3, r7, #12
 811487a:	4611      	mov	r1, r2
 811487c:	4618      	mov	r0, r3
 811487e:	f001 fc21 	bl	81160c4 <xTaskCheckForTimeOut>
 8114882:	4603      	mov	r3, r0
 8114884:	2b00      	cmp	r3, #0
 8114886:	d132      	bne.n	81148ee <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8114888:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 811488a:	f000 f9f5 	bl	8114c78 <prvIsQueueEmpty>
 811488e:	4603      	mov	r3, r0
 8114890:	2b00      	cmp	r3, #0
 8114892:	d026      	beq.n	81148e2 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8114894:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8114896:	681b      	ldr	r3, [r3, #0]
 8114898:	2b00      	cmp	r3, #0
 811489a:	d109      	bne.n	81148b0 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 811489c:	f7ff f89c 	bl	81139d8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 81148a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81148a2:	689b      	ldr	r3, [r3, #8]
 81148a4:	4618      	mov	r0, r3
 81148a6:	f001 fd87 	bl	81163b8 <xTaskPriorityInherit>
 81148aa:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 81148ac:	f7ff f8c6 	bl	8113a3c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 81148b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81148b2:	3324      	adds	r3, #36	@ 0x24
 81148b4:	683a      	ldr	r2, [r7, #0]
 81148b6:	4611      	mov	r1, r2
 81148b8:	4618      	mov	r0, r3
 81148ba:	f001 fb0f 	bl	8115edc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 81148be:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 81148c0:	f000 f988 	bl	8114bd4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 81148c4:	f001 f92a 	bl	8115b1c <xTaskResumeAll>
 81148c8:	4603      	mov	r3, r0
 81148ca:	2b00      	cmp	r3, #0
 81148cc:	f47f af67 	bne.w	811479e <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 81148d0:	4b18      	ldr	r3, [pc, #96]	@ (8114934 <xQueueSemaphoreTake+0x21c>)
 81148d2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 81148d6:	601a      	str	r2, [r3, #0]
 81148d8:	f3bf 8f4f 	dsb	sy
 81148dc:	f3bf 8f6f 	isb	sy
 81148e0:	e75d      	b.n	811479e <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 81148e2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 81148e4:	f000 f976 	bl	8114bd4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 81148e8:	f001 f918 	bl	8115b1c <xTaskResumeAll>
 81148ec:	e757      	b.n	811479e <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 81148ee:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 81148f0:	f000 f970 	bl	8114bd4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 81148f4:	f001 f912 	bl	8115b1c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 81148f8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 81148fa:	f000 f9bd 	bl	8114c78 <prvIsQueueEmpty>
 81148fe:	4603      	mov	r3, r0
 8114900:	2b00      	cmp	r3, #0
 8114902:	f43f af4c 	beq.w	811479e <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8114906:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8114908:	2b00      	cmp	r3, #0
 811490a:	d00d      	beq.n	8114928 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 811490c:	f7ff f864 	bl	81139d8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8114910:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8114912:	f000 f8b7 	bl	8114a84 <prvGetDisinheritPriorityAfterTimeout>
 8114916:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8114918:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811491a:	689b      	ldr	r3, [r3, #8]
 811491c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 811491e:	4618      	mov	r0, r3
 8114920:	f001 fe22 	bl	8116568 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8114924:	f7ff f88a 	bl	8113a3c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8114928:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 811492a:	4618      	mov	r0, r3
 811492c:	3738      	adds	r7, #56	@ 0x38
 811492e:	46bd      	mov	sp, r7
 8114930:	bd80      	pop	{r7, pc}
 8114932:	bf00      	nop
 8114934:	e000ed04 	.word	0xe000ed04

08114938 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8114938:	b580      	push	{r7, lr}
 811493a:	b08e      	sub	sp, #56	@ 0x38
 811493c:	af00      	add	r7, sp, #0
 811493e:	60f8      	str	r0, [r7, #12]
 8114940:	60b9      	str	r1, [r7, #8]
 8114942:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8114944:	68fb      	ldr	r3, [r7, #12]
 8114946:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8114948:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811494a:	2b00      	cmp	r3, #0
 811494c:	d10b      	bne.n	8114966 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 811494e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8114952:	f383 8811 	msr	BASEPRI, r3
 8114956:	f3bf 8f6f 	isb	sy
 811495a:	f3bf 8f4f 	dsb	sy
 811495e:	623b      	str	r3, [r7, #32]
}
 8114960:	bf00      	nop
 8114962:	bf00      	nop
 8114964:	e7fd      	b.n	8114962 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8114966:	68bb      	ldr	r3, [r7, #8]
 8114968:	2b00      	cmp	r3, #0
 811496a:	d103      	bne.n	8114974 <xQueueReceiveFromISR+0x3c>
 811496c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811496e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8114970:	2b00      	cmp	r3, #0
 8114972:	d101      	bne.n	8114978 <xQueueReceiveFromISR+0x40>
 8114974:	2301      	movs	r3, #1
 8114976:	e000      	b.n	811497a <xQueueReceiveFromISR+0x42>
 8114978:	2300      	movs	r3, #0
 811497a:	2b00      	cmp	r3, #0
 811497c:	d10b      	bne.n	8114996 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 811497e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8114982:	f383 8811 	msr	BASEPRI, r3
 8114986:	f3bf 8f6f 	isb	sy
 811498a:	f3bf 8f4f 	dsb	sy
 811498e:	61fb      	str	r3, [r7, #28]
}
 8114990:	bf00      	nop
 8114992:	bf00      	nop
 8114994:	e7fd      	b.n	8114992 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8114996:	f7ff f8ff 	bl	8113b98 <vPortValidateInterruptPriority>
	__asm volatile
 811499a:	f3ef 8211 	mrs	r2, BASEPRI
 811499e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81149a2:	f383 8811 	msr	BASEPRI, r3
 81149a6:	f3bf 8f6f 	isb	sy
 81149aa:	f3bf 8f4f 	dsb	sy
 81149ae:	61ba      	str	r2, [r7, #24]
 81149b0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 81149b2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 81149b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 81149b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81149b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 81149ba:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 81149bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81149be:	2b00      	cmp	r3, #0
 81149c0:	d02f      	beq.n	8114a22 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 81149c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81149c4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 81149c8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 81149cc:	68b9      	ldr	r1, [r7, #8]
 81149ce:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 81149d0:	f000 f8da 	bl	8114b88 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 81149d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81149d6:	1e5a      	subs	r2, r3, #1
 81149d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81149da:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 81149dc:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 81149e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 81149e4:	d112      	bne.n	8114a0c <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 81149e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81149e8:	691b      	ldr	r3, [r3, #16]
 81149ea:	2b00      	cmp	r3, #0
 81149ec:	d016      	beq.n	8114a1c <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 81149ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81149f0:	3310      	adds	r3, #16
 81149f2:	4618      	mov	r0, r3
 81149f4:	f001 fac4 	bl	8115f80 <xTaskRemoveFromEventList>
 81149f8:	4603      	mov	r3, r0
 81149fa:	2b00      	cmp	r3, #0
 81149fc:	d00e      	beq.n	8114a1c <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 81149fe:	687b      	ldr	r3, [r7, #4]
 8114a00:	2b00      	cmp	r3, #0
 8114a02:	d00b      	beq.n	8114a1c <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8114a04:	687b      	ldr	r3, [r7, #4]
 8114a06:	2201      	movs	r2, #1
 8114a08:	601a      	str	r2, [r3, #0]
 8114a0a:	e007      	b.n	8114a1c <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8114a0c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8114a10:	3301      	adds	r3, #1
 8114a12:	b2db      	uxtb	r3, r3
 8114a14:	b25a      	sxtb	r2, r3
 8114a16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8114a18:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8114a1c:	2301      	movs	r3, #1
 8114a1e:	637b      	str	r3, [r7, #52]	@ 0x34
 8114a20:	e001      	b.n	8114a26 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8114a22:	2300      	movs	r3, #0
 8114a24:	637b      	str	r3, [r7, #52]	@ 0x34
 8114a26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8114a28:	613b      	str	r3, [r7, #16]
	__asm volatile
 8114a2a:	693b      	ldr	r3, [r7, #16]
 8114a2c:	f383 8811 	msr	BASEPRI, r3
}
 8114a30:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8114a32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8114a34:	4618      	mov	r0, r3
 8114a36:	3738      	adds	r7, #56	@ 0x38
 8114a38:	46bd      	mov	sp, r7
 8114a3a:	bd80      	pop	{r7, pc}

08114a3c <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8114a3c:	b580      	push	{r7, lr}
 8114a3e:	b084      	sub	sp, #16
 8114a40:	af00      	add	r7, sp, #0
 8114a42:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8114a44:	687b      	ldr	r3, [r7, #4]
 8114a46:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8114a48:	68fb      	ldr	r3, [r7, #12]
 8114a4a:	2b00      	cmp	r3, #0
 8114a4c:	d10b      	bne.n	8114a66 <vQueueDelete+0x2a>
	__asm volatile
 8114a4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8114a52:	f383 8811 	msr	BASEPRI, r3
 8114a56:	f3bf 8f6f 	isb	sy
 8114a5a:	f3bf 8f4f 	dsb	sy
 8114a5e:	60bb      	str	r3, [r7, #8]
}
 8114a60:	bf00      	nop
 8114a62:	bf00      	nop
 8114a64:	e7fd      	b.n	8114a62 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8114a66:	68f8      	ldr	r0, [r7, #12]
 8114a68:	f000 f95e 	bl	8114d28 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8114a6c:	68fb      	ldr	r3, [r7, #12]
 8114a6e:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8114a72:	2b00      	cmp	r3, #0
 8114a74:	d102      	bne.n	8114a7c <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 8114a76:	68f8      	ldr	r0, [r7, #12]
 8114a78:	f7fe fca6 	bl	81133c8 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8114a7c:	bf00      	nop
 8114a7e:	3710      	adds	r7, #16
 8114a80:	46bd      	mov	sp, r7
 8114a82:	bd80      	pop	{r7, pc}

08114a84 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8114a84:	b480      	push	{r7}
 8114a86:	b085      	sub	sp, #20
 8114a88:	af00      	add	r7, sp, #0
 8114a8a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8114a8c:	687b      	ldr	r3, [r7, #4]
 8114a8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8114a90:	2b00      	cmp	r3, #0
 8114a92:	d006      	beq.n	8114aa2 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8114a94:	687b      	ldr	r3, [r7, #4]
 8114a96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8114a98:	681b      	ldr	r3, [r3, #0]
 8114a9a:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 8114a9e:	60fb      	str	r3, [r7, #12]
 8114aa0:	e001      	b.n	8114aa6 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8114aa2:	2300      	movs	r3, #0
 8114aa4:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8114aa6:	68fb      	ldr	r3, [r7, #12]
	}
 8114aa8:	4618      	mov	r0, r3
 8114aaa:	3714      	adds	r7, #20
 8114aac:	46bd      	mov	sp, r7
 8114aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8114ab2:	4770      	bx	lr

08114ab4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8114ab4:	b580      	push	{r7, lr}
 8114ab6:	b086      	sub	sp, #24
 8114ab8:	af00      	add	r7, sp, #0
 8114aba:	60f8      	str	r0, [r7, #12]
 8114abc:	60b9      	str	r1, [r7, #8]
 8114abe:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8114ac0:	2300      	movs	r3, #0
 8114ac2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8114ac4:	68fb      	ldr	r3, [r7, #12]
 8114ac6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8114ac8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8114aca:	68fb      	ldr	r3, [r7, #12]
 8114acc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8114ace:	2b00      	cmp	r3, #0
 8114ad0:	d10d      	bne.n	8114aee <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8114ad2:	68fb      	ldr	r3, [r7, #12]
 8114ad4:	681b      	ldr	r3, [r3, #0]
 8114ad6:	2b00      	cmp	r3, #0
 8114ad8:	d14d      	bne.n	8114b76 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8114ada:	68fb      	ldr	r3, [r7, #12]
 8114adc:	689b      	ldr	r3, [r3, #8]
 8114ade:	4618      	mov	r0, r3
 8114ae0:	f001 fcd2 	bl	8116488 <xTaskPriorityDisinherit>
 8114ae4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8114ae6:	68fb      	ldr	r3, [r7, #12]
 8114ae8:	2200      	movs	r2, #0
 8114aea:	609a      	str	r2, [r3, #8]
 8114aec:	e043      	b.n	8114b76 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8114aee:	687b      	ldr	r3, [r7, #4]
 8114af0:	2b00      	cmp	r3, #0
 8114af2:	d119      	bne.n	8114b28 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8114af4:	68fb      	ldr	r3, [r7, #12]
 8114af6:	6858      	ldr	r0, [r3, #4]
 8114af8:	68fb      	ldr	r3, [r7, #12]
 8114afa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8114afc:	461a      	mov	r2, r3
 8114afe:	68b9      	ldr	r1, [r7, #8]
 8114b00:	f00f fb1b 	bl	812413a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8114b04:	68fb      	ldr	r3, [r7, #12]
 8114b06:	685a      	ldr	r2, [r3, #4]
 8114b08:	68fb      	ldr	r3, [r7, #12]
 8114b0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8114b0c:	441a      	add	r2, r3
 8114b0e:	68fb      	ldr	r3, [r7, #12]
 8114b10:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8114b12:	68fb      	ldr	r3, [r7, #12]
 8114b14:	685a      	ldr	r2, [r3, #4]
 8114b16:	68fb      	ldr	r3, [r7, #12]
 8114b18:	689b      	ldr	r3, [r3, #8]
 8114b1a:	429a      	cmp	r2, r3
 8114b1c:	d32b      	bcc.n	8114b76 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8114b1e:	68fb      	ldr	r3, [r7, #12]
 8114b20:	681a      	ldr	r2, [r3, #0]
 8114b22:	68fb      	ldr	r3, [r7, #12]
 8114b24:	605a      	str	r2, [r3, #4]
 8114b26:	e026      	b.n	8114b76 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8114b28:	68fb      	ldr	r3, [r7, #12]
 8114b2a:	68d8      	ldr	r0, [r3, #12]
 8114b2c:	68fb      	ldr	r3, [r7, #12]
 8114b2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8114b30:	461a      	mov	r2, r3
 8114b32:	68b9      	ldr	r1, [r7, #8]
 8114b34:	f00f fb01 	bl	812413a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8114b38:	68fb      	ldr	r3, [r7, #12]
 8114b3a:	68da      	ldr	r2, [r3, #12]
 8114b3c:	68fb      	ldr	r3, [r7, #12]
 8114b3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8114b40:	425b      	negs	r3, r3
 8114b42:	441a      	add	r2, r3
 8114b44:	68fb      	ldr	r3, [r7, #12]
 8114b46:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8114b48:	68fb      	ldr	r3, [r7, #12]
 8114b4a:	68da      	ldr	r2, [r3, #12]
 8114b4c:	68fb      	ldr	r3, [r7, #12]
 8114b4e:	681b      	ldr	r3, [r3, #0]
 8114b50:	429a      	cmp	r2, r3
 8114b52:	d207      	bcs.n	8114b64 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8114b54:	68fb      	ldr	r3, [r7, #12]
 8114b56:	689a      	ldr	r2, [r3, #8]
 8114b58:	68fb      	ldr	r3, [r7, #12]
 8114b5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8114b5c:	425b      	negs	r3, r3
 8114b5e:	441a      	add	r2, r3
 8114b60:	68fb      	ldr	r3, [r7, #12]
 8114b62:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8114b64:	687b      	ldr	r3, [r7, #4]
 8114b66:	2b02      	cmp	r3, #2
 8114b68:	d105      	bne.n	8114b76 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8114b6a:	693b      	ldr	r3, [r7, #16]
 8114b6c:	2b00      	cmp	r3, #0
 8114b6e:	d002      	beq.n	8114b76 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8114b70:	693b      	ldr	r3, [r7, #16]
 8114b72:	3b01      	subs	r3, #1
 8114b74:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8114b76:	693b      	ldr	r3, [r7, #16]
 8114b78:	1c5a      	adds	r2, r3, #1
 8114b7a:	68fb      	ldr	r3, [r7, #12]
 8114b7c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8114b7e:	697b      	ldr	r3, [r7, #20]
}
 8114b80:	4618      	mov	r0, r3
 8114b82:	3718      	adds	r7, #24
 8114b84:	46bd      	mov	sp, r7
 8114b86:	bd80      	pop	{r7, pc}

08114b88 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8114b88:	b580      	push	{r7, lr}
 8114b8a:	b082      	sub	sp, #8
 8114b8c:	af00      	add	r7, sp, #0
 8114b8e:	6078      	str	r0, [r7, #4]
 8114b90:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8114b92:	687b      	ldr	r3, [r7, #4]
 8114b94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8114b96:	2b00      	cmp	r3, #0
 8114b98:	d018      	beq.n	8114bcc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8114b9a:	687b      	ldr	r3, [r7, #4]
 8114b9c:	68da      	ldr	r2, [r3, #12]
 8114b9e:	687b      	ldr	r3, [r7, #4]
 8114ba0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8114ba2:	441a      	add	r2, r3
 8114ba4:	687b      	ldr	r3, [r7, #4]
 8114ba6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8114ba8:	687b      	ldr	r3, [r7, #4]
 8114baa:	68da      	ldr	r2, [r3, #12]
 8114bac:	687b      	ldr	r3, [r7, #4]
 8114bae:	689b      	ldr	r3, [r3, #8]
 8114bb0:	429a      	cmp	r2, r3
 8114bb2:	d303      	bcc.n	8114bbc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8114bb4:	687b      	ldr	r3, [r7, #4]
 8114bb6:	681a      	ldr	r2, [r3, #0]
 8114bb8:	687b      	ldr	r3, [r7, #4]
 8114bba:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8114bbc:	687b      	ldr	r3, [r7, #4]
 8114bbe:	68d9      	ldr	r1, [r3, #12]
 8114bc0:	687b      	ldr	r3, [r7, #4]
 8114bc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8114bc4:	461a      	mov	r2, r3
 8114bc6:	6838      	ldr	r0, [r7, #0]
 8114bc8:	f00f fab7 	bl	812413a <memcpy>
	}
}
 8114bcc:	bf00      	nop
 8114bce:	3708      	adds	r7, #8
 8114bd0:	46bd      	mov	sp, r7
 8114bd2:	bd80      	pop	{r7, pc}

08114bd4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8114bd4:	b580      	push	{r7, lr}
 8114bd6:	b084      	sub	sp, #16
 8114bd8:	af00      	add	r7, sp, #0
 8114bda:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8114bdc:	f7fe fefc 	bl	81139d8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8114be0:	687b      	ldr	r3, [r7, #4]
 8114be2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8114be6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8114be8:	e011      	b.n	8114c0e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8114bea:	687b      	ldr	r3, [r7, #4]
 8114bec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8114bee:	2b00      	cmp	r3, #0
 8114bf0:	d012      	beq.n	8114c18 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8114bf2:	687b      	ldr	r3, [r7, #4]
 8114bf4:	3324      	adds	r3, #36	@ 0x24
 8114bf6:	4618      	mov	r0, r3
 8114bf8:	f001 f9c2 	bl	8115f80 <xTaskRemoveFromEventList>
 8114bfc:	4603      	mov	r3, r0
 8114bfe:	2b00      	cmp	r3, #0
 8114c00:	d001      	beq.n	8114c06 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8114c02:	f001 fac3 	bl	811618c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8114c06:	7bfb      	ldrb	r3, [r7, #15]
 8114c08:	3b01      	subs	r3, #1
 8114c0a:	b2db      	uxtb	r3, r3
 8114c0c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8114c0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8114c12:	2b00      	cmp	r3, #0
 8114c14:	dce9      	bgt.n	8114bea <prvUnlockQueue+0x16>
 8114c16:	e000      	b.n	8114c1a <prvUnlockQueue+0x46>
					break;
 8114c18:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8114c1a:	687b      	ldr	r3, [r7, #4]
 8114c1c:	22ff      	movs	r2, #255	@ 0xff
 8114c1e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8114c22:	f7fe ff0b 	bl	8113a3c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8114c26:	f7fe fed7 	bl	81139d8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8114c2a:	687b      	ldr	r3, [r7, #4]
 8114c2c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8114c30:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8114c32:	e011      	b.n	8114c58 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8114c34:	687b      	ldr	r3, [r7, #4]
 8114c36:	691b      	ldr	r3, [r3, #16]
 8114c38:	2b00      	cmp	r3, #0
 8114c3a:	d012      	beq.n	8114c62 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8114c3c:	687b      	ldr	r3, [r7, #4]
 8114c3e:	3310      	adds	r3, #16
 8114c40:	4618      	mov	r0, r3
 8114c42:	f001 f99d 	bl	8115f80 <xTaskRemoveFromEventList>
 8114c46:	4603      	mov	r3, r0
 8114c48:	2b00      	cmp	r3, #0
 8114c4a:	d001      	beq.n	8114c50 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8114c4c:	f001 fa9e 	bl	811618c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8114c50:	7bbb      	ldrb	r3, [r7, #14]
 8114c52:	3b01      	subs	r3, #1
 8114c54:	b2db      	uxtb	r3, r3
 8114c56:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8114c58:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8114c5c:	2b00      	cmp	r3, #0
 8114c5e:	dce9      	bgt.n	8114c34 <prvUnlockQueue+0x60>
 8114c60:	e000      	b.n	8114c64 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8114c62:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8114c64:	687b      	ldr	r3, [r7, #4]
 8114c66:	22ff      	movs	r2, #255	@ 0xff
 8114c68:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8114c6c:	f7fe fee6 	bl	8113a3c <vPortExitCritical>
}
 8114c70:	bf00      	nop
 8114c72:	3710      	adds	r7, #16
 8114c74:	46bd      	mov	sp, r7
 8114c76:	bd80      	pop	{r7, pc}

08114c78 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8114c78:	b580      	push	{r7, lr}
 8114c7a:	b084      	sub	sp, #16
 8114c7c:	af00      	add	r7, sp, #0
 8114c7e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8114c80:	f7fe feaa 	bl	81139d8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8114c84:	687b      	ldr	r3, [r7, #4]
 8114c86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8114c88:	2b00      	cmp	r3, #0
 8114c8a:	d102      	bne.n	8114c92 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8114c8c:	2301      	movs	r3, #1
 8114c8e:	60fb      	str	r3, [r7, #12]
 8114c90:	e001      	b.n	8114c96 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8114c92:	2300      	movs	r3, #0
 8114c94:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8114c96:	f7fe fed1 	bl	8113a3c <vPortExitCritical>

	return xReturn;
 8114c9a:	68fb      	ldr	r3, [r7, #12]
}
 8114c9c:	4618      	mov	r0, r3
 8114c9e:	3710      	adds	r7, #16
 8114ca0:	46bd      	mov	sp, r7
 8114ca2:	bd80      	pop	{r7, pc}

08114ca4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8114ca4:	b580      	push	{r7, lr}
 8114ca6:	b084      	sub	sp, #16
 8114ca8:	af00      	add	r7, sp, #0
 8114caa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8114cac:	f7fe fe94 	bl	81139d8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8114cb0:	687b      	ldr	r3, [r7, #4]
 8114cb2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8114cb4:	687b      	ldr	r3, [r7, #4]
 8114cb6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8114cb8:	429a      	cmp	r2, r3
 8114cba:	d102      	bne.n	8114cc2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8114cbc:	2301      	movs	r3, #1
 8114cbe:	60fb      	str	r3, [r7, #12]
 8114cc0:	e001      	b.n	8114cc6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8114cc2:	2300      	movs	r3, #0
 8114cc4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8114cc6:	f7fe feb9 	bl	8113a3c <vPortExitCritical>

	return xReturn;
 8114cca:	68fb      	ldr	r3, [r7, #12]
}
 8114ccc:	4618      	mov	r0, r3
 8114cce:	3710      	adds	r7, #16
 8114cd0:	46bd      	mov	sp, r7
 8114cd2:	bd80      	pop	{r7, pc}

08114cd4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8114cd4:	b480      	push	{r7}
 8114cd6:	b085      	sub	sp, #20
 8114cd8:	af00      	add	r7, sp, #0
 8114cda:	6078      	str	r0, [r7, #4]
 8114cdc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8114cde:	2300      	movs	r3, #0
 8114ce0:	60fb      	str	r3, [r7, #12]
 8114ce2:	e014      	b.n	8114d0e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8114ce4:	4a0f      	ldr	r2, [pc, #60]	@ (8114d24 <vQueueAddToRegistry+0x50>)
 8114ce6:	68fb      	ldr	r3, [r7, #12]
 8114ce8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8114cec:	2b00      	cmp	r3, #0
 8114cee:	d10b      	bne.n	8114d08 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8114cf0:	490c      	ldr	r1, [pc, #48]	@ (8114d24 <vQueueAddToRegistry+0x50>)
 8114cf2:	68fb      	ldr	r3, [r7, #12]
 8114cf4:	683a      	ldr	r2, [r7, #0]
 8114cf6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8114cfa:	4a0a      	ldr	r2, [pc, #40]	@ (8114d24 <vQueueAddToRegistry+0x50>)
 8114cfc:	68fb      	ldr	r3, [r7, #12]
 8114cfe:	00db      	lsls	r3, r3, #3
 8114d00:	4413      	add	r3, r2
 8114d02:	687a      	ldr	r2, [r7, #4]
 8114d04:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8114d06:	e006      	b.n	8114d16 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8114d08:	68fb      	ldr	r3, [r7, #12]
 8114d0a:	3301      	adds	r3, #1
 8114d0c:	60fb      	str	r3, [r7, #12]
 8114d0e:	68fb      	ldr	r3, [r7, #12]
 8114d10:	2b07      	cmp	r3, #7
 8114d12:	d9e7      	bls.n	8114ce4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8114d14:	bf00      	nop
 8114d16:	bf00      	nop
 8114d18:	3714      	adds	r7, #20
 8114d1a:	46bd      	mov	sp, r7
 8114d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8114d20:	4770      	bx	lr
 8114d22:	bf00      	nop
 8114d24:	1000aba0 	.word	0x1000aba0

08114d28 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8114d28:	b480      	push	{r7}
 8114d2a:	b085      	sub	sp, #20
 8114d2c:	af00      	add	r7, sp, #0
 8114d2e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8114d30:	2300      	movs	r3, #0
 8114d32:	60fb      	str	r3, [r7, #12]
 8114d34:	e016      	b.n	8114d64 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8114d36:	4a10      	ldr	r2, [pc, #64]	@ (8114d78 <vQueueUnregisterQueue+0x50>)
 8114d38:	68fb      	ldr	r3, [r7, #12]
 8114d3a:	00db      	lsls	r3, r3, #3
 8114d3c:	4413      	add	r3, r2
 8114d3e:	685b      	ldr	r3, [r3, #4]
 8114d40:	687a      	ldr	r2, [r7, #4]
 8114d42:	429a      	cmp	r2, r3
 8114d44:	d10b      	bne.n	8114d5e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8114d46:	4a0c      	ldr	r2, [pc, #48]	@ (8114d78 <vQueueUnregisterQueue+0x50>)
 8114d48:	68fb      	ldr	r3, [r7, #12]
 8114d4a:	2100      	movs	r1, #0
 8114d4c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8114d50:	4a09      	ldr	r2, [pc, #36]	@ (8114d78 <vQueueUnregisterQueue+0x50>)
 8114d52:	68fb      	ldr	r3, [r7, #12]
 8114d54:	00db      	lsls	r3, r3, #3
 8114d56:	4413      	add	r3, r2
 8114d58:	2200      	movs	r2, #0
 8114d5a:	605a      	str	r2, [r3, #4]
				break;
 8114d5c:	e006      	b.n	8114d6c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8114d5e:	68fb      	ldr	r3, [r7, #12]
 8114d60:	3301      	adds	r3, #1
 8114d62:	60fb      	str	r3, [r7, #12]
 8114d64:	68fb      	ldr	r3, [r7, #12]
 8114d66:	2b07      	cmp	r3, #7
 8114d68:	d9e5      	bls.n	8114d36 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8114d6a:	bf00      	nop
 8114d6c:	bf00      	nop
 8114d6e:	3714      	adds	r7, #20
 8114d70:	46bd      	mov	sp, r7
 8114d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8114d76:	4770      	bx	lr
 8114d78:	1000aba0 	.word	0x1000aba0

08114d7c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8114d7c:	b580      	push	{r7, lr}
 8114d7e:	b086      	sub	sp, #24
 8114d80:	af00      	add	r7, sp, #0
 8114d82:	60f8      	str	r0, [r7, #12]
 8114d84:	60b9      	str	r1, [r7, #8]
 8114d86:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8114d88:	68fb      	ldr	r3, [r7, #12]
 8114d8a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8114d8c:	f7fe fe24 	bl	81139d8 <vPortEnterCritical>
 8114d90:	697b      	ldr	r3, [r7, #20]
 8114d92:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8114d96:	b25b      	sxtb	r3, r3
 8114d98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8114d9c:	d103      	bne.n	8114da6 <vQueueWaitForMessageRestricted+0x2a>
 8114d9e:	697b      	ldr	r3, [r7, #20]
 8114da0:	2200      	movs	r2, #0
 8114da2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8114da6:	697b      	ldr	r3, [r7, #20]
 8114da8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8114dac:	b25b      	sxtb	r3, r3
 8114dae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8114db2:	d103      	bne.n	8114dbc <vQueueWaitForMessageRestricted+0x40>
 8114db4:	697b      	ldr	r3, [r7, #20]
 8114db6:	2200      	movs	r2, #0
 8114db8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8114dbc:	f7fe fe3e 	bl	8113a3c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8114dc0:	697b      	ldr	r3, [r7, #20]
 8114dc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8114dc4:	2b00      	cmp	r3, #0
 8114dc6:	d106      	bne.n	8114dd6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8114dc8:	697b      	ldr	r3, [r7, #20]
 8114dca:	3324      	adds	r3, #36	@ 0x24
 8114dcc:	687a      	ldr	r2, [r7, #4]
 8114dce:	68b9      	ldr	r1, [r7, #8]
 8114dd0:	4618      	mov	r0, r3
 8114dd2:	f001 f8a9 	bl	8115f28 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8114dd6:	6978      	ldr	r0, [r7, #20]
 8114dd8:	f7ff fefc 	bl	8114bd4 <prvUnlockQueue>
	}
 8114ddc:	bf00      	nop
 8114dde:	3718      	adds	r7, #24
 8114de0:	46bd      	mov	sp, r7
 8114de2:	bd80      	pop	{r7, pc}

08114de4 <xStreamBufferGenericCreateStatic>:
	StreamBufferHandle_t xStreamBufferGenericCreateStatic( size_t xBufferSizeBytes,
														   size_t xTriggerLevelBytes,
														   BaseType_t xIsMessageBuffer,
														   uint8_t * const pucStreamBufferStorageArea,
														   StaticStreamBuffer_t * const pxStaticStreamBuffer )
	{
 8114de4:	b580      	push	{r7, lr}
 8114de6:	b090      	sub	sp, #64	@ 0x40
 8114de8:	af02      	add	r7, sp, #8
 8114dea:	60f8      	str	r0, [r7, #12]
 8114dec:	60b9      	str	r1, [r7, #8]
 8114dee:	607a      	str	r2, [r7, #4]
 8114df0:	603b      	str	r3, [r7, #0]
	StreamBuffer_t * const pxStreamBuffer = ( StreamBuffer_t * ) pxStaticStreamBuffer; /*lint !e740 !e9087 Safe cast as StaticStreamBuffer_t is opaque Streambuffer_t. */
 8114df2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8114df4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	StreamBufferHandle_t xReturn;
	uint8_t ucFlags;

		configASSERT( pucStreamBufferStorageArea );
 8114df6:	683b      	ldr	r3, [r7, #0]
 8114df8:	2b00      	cmp	r3, #0
 8114dfa:	d10b      	bne.n	8114e14 <xStreamBufferGenericCreateStatic+0x30>
	__asm volatile
 8114dfc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8114e00:	f383 8811 	msr	BASEPRI, r3
 8114e04:	f3bf 8f6f 	isb	sy
 8114e08:	f3bf 8f4f 	dsb	sy
 8114e0c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8114e0e:	bf00      	nop
 8114e10:	bf00      	nop
 8114e12:	e7fd      	b.n	8114e10 <xStreamBufferGenericCreateStatic+0x2c>
		configASSERT( pxStaticStreamBuffer );
 8114e14:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8114e16:	2b00      	cmp	r3, #0
 8114e18:	d10b      	bne.n	8114e32 <xStreamBufferGenericCreateStatic+0x4e>
	__asm volatile
 8114e1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8114e1e:	f383 8811 	msr	BASEPRI, r3
 8114e22:	f3bf 8f6f 	isb	sy
 8114e26:	f3bf 8f4f 	dsb	sy
 8114e2a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8114e2c:	bf00      	nop
 8114e2e:	bf00      	nop
 8114e30:	e7fd      	b.n	8114e2e <xStreamBufferGenericCreateStatic+0x4a>
		configASSERT( xTriggerLevelBytes <= xBufferSizeBytes );
 8114e32:	68ba      	ldr	r2, [r7, #8]
 8114e34:	68fb      	ldr	r3, [r7, #12]
 8114e36:	429a      	cmp	r2, r3
 8114e38:	d90b      	bls.n	8114e52 <xStreamBufferGenericCreateStatic+0x6e>
	__asm volatile
 8114e3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8114e3e:	f383 8811 	msr	BASEPRI, r3
 8114e42:	f3bf 8f6f 	isb	sy
 8114e46:	f3bf 8f4f 	dsb	sy
 8114e4a:	623b      	str	r3, [r7, #32]
}
 8114e4c:	bf00      	nop
 8114e4e:	bf00      	nop
 8114e50:	e7fd      	b.n	8114e4e <xStreamBufferGenericCreateStatic+0x6a>

		/* A trigger level of 0 would cause a waiting task to unblock even when
		the buffer was empty. */
		if( xTriggerLevelBytes == ( size_t ) 0 )
 8114e52:	68bb      	ldr	r3, [r7, #8]
 8114e54:	2b00      	cmp	r3, #0
 8114e56:	d101      	bne.n	8114e5c <xStreamBufferGenericCreateStatic+0x78>
		{
			xTriggerLevelBytes = ( size_t ) 1;
 8114e58:	2301      	movs	r3, #1
 8114e5a:	60bb      	str	r3, [r7, #8]
		}

		if( xIsMessageBuffer != pdFALSE )
 8114e5c:	687b      	ldr	r3, [r7, #4]
 8114e5e:	2b00      	cmp	r3, #0
 8114e60:	d003      	beq.n	8114e6a <xStreamBufferGenericCreateStatic+0x86>
		{
			/* Statically allocated message buffer. */
			ucFlags = sbFLAGS_IS_MESSAGE_BUFFER | sbFLAGS_IS_STATICALLY_ALLOCATED;
 8114e62:	2303      	movs	r3, #3
 8114e64:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 8114e68:	e002      	b.n	8114e70 <xStreamBufferGenericCreateStatic+0x8c>
		}
		else
		{
			/* Statically allocated stream buffer. */
			ucFlags = sbFLAGS_IS_STATICALLY_ALLOCATED;
 8114e6a:	2302      	movs	r3, #2
 8114e6c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

		/* In case the stream buffer is going to be used as a message buffer
		(that is, it will hold discrete messages with a little meta data that
		says how big the next message is) check the buffer will be large enough
		to hold at least one message. */
		configASSERT( xBufferSizeBytes > sbBYTES_TO_STORE_MESSAGE_LENGTH );
 8114e70:	68fb      	ldr	r3, [r7, #12]
 8114e72:	2b04      	cmp	r3, #4
 8114e74:	d80b      	bhi.n	8114e8e <xStreamBufferGenericCreateStatic+0xaa>
	__asm volatile
 8114e76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8114e7a:	f383 8811 	msr	BASEPRI, r3
 8114e7e:	f3bf 8f6f 	isb	sy
 8114e82:	f3bf 8f4f 	dsb	sy
 8114e86:	61fb      	str	r3, [r7, #28]
}
 8114e88:	bf00      	nop
 8114e8a:	bf00      	nop
 8114e8c:	e7fd      	b.n	8114e8a <xStreamBufferGenericCreateStatic+0xa6>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticStreamBuffer_t equals the size of the real
			message buffer structure. */
			volatile size_t xSize = sizeof( StaticStreamBuffer_t );
 8114e8e:	2324      	movs	r3, #36	@ 0x24
 8114e90:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( StreamBuffer_t ) );
 8114e92:	697b      	ldr	r3, [r7, #20]
 8114e94:	2b24      	cmp	r3, #36	@ 0x24
 8114e96:	d00b      	beq.n	8114eb0 <xStreamBufferGenericCreateStatic+0xcc>
	__asm volatile
 8114e98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8114e9c:	f383 8811 	msr	BASEPRI, r3
 8114ea0:	f3bf 8f6f 	isb	sy
 8114ea4:	f3bf 8f4f 	dsb	sy
 8114ea8:	61bb      	str	r3, [r7, #24]
}
 8114eaa:	bf00      	nop
 8114eac:	bf00      	nop
 8114eae:	e7fd      	b.n	8114eac <xStreamBufferGenericCreateStatic+0xc8>
		} /*lint !e529 xSize is referenced is configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		if( ( pucStreamBufferStorageArea != NULL ) && ( pxStaticStreamBuffer != NULL ) )
 8114eb0:	683b      	ldr	r3, [r7, #0]
 8114eb2:	2b00      	cmp	r3, #0
 8114eb4:	d015      	beq.n	8114ee2 <xStreamBufferGenericCreateStatic+0xfe>
 8114eb6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8114eb8:	2b00      	cmp	r3, #0
 8114eba:	d012      	beq.n	8114ee2 <xStreamBufferGenericCreateStatic+0xfe>
		{
			prvInitialiseNewStreamBuffer( pxStreamBuffer,
 8114ebc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8114ec0:	9300      	str	r3, [sp, #0]
 8114ec2:	68bb      	ldr	r3, [r7, #8]
 8114ec4:	68fa      	ldr	r2, [r7, #12]
 8114ec6:	6839      	ldr	r1, [r7, #0]
 8114ec8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8114eca:	f000 fb81 	bl	81155d0 <prvInitialiseNewStreamBuffer>
										  xTriggerLevelBytes,
										  ucFlags );

			/* Remember this was statically allocated in case it is ever deleted
			again. */
			pxStreamBuffer->ucFlags |= sbFLAGS_IS_STATICALLY_ALLOCATED;
 8114ece:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8114ed0:	7f1b      	ldrb	r3, [r3, #28]
 8114ed2:	f043 0302 	orr.w	r3, r3, #2
 8114ed6:	b2da      	uxtb	r2, r3
 8114ed8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8114eda:	771a      	strb	r2, [r3, #28]

			traceSTREAM_BUFFER_CREATE( pxStreamBuffer, xIsMessageBuffer );

			xReturn = ( StreamBufferHandle_t ) pxStaticStreamBuffer; /*lint !e9087 Data hiding requires cast to opaque type. */
 8114edc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8114ede:	637b      	str	r3, [r7, #52]	@ 0x34
 8114ee0:	e001      	b.n	8114ee6 <xStreamBufferGenericCreateStatic+0x102>
		}
		else
		{
			xReturn = NULL;
 8114ee2:	2300      	movs	r3, #0
 8114ee4:	637b      	str	r3, [r7, #52]	@ 0x34
			traceSTREAM_BUFFER_CREATE_STATIC_FAILED( xReturn, xIsMessageBuffer );
		}

		return xReturn;
 8114ee6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
	}
 8114ee8:	4618      	mov	r0, r3
 8114eea:	3738      	adds	r7, #56	@ 0x38
 8114eec:	46bd      	mov	sp, r7
 8114eee:	bd80      	pop	{r7, pc}

08114ef0 <xStreamBufferSpacesAvailable>:
	return xReturn;
}
/*-----------------------------------------------------------*/

size_t xStreamBufferSpacesAvailable( StreamBufferHandle_t xStreamBuffer )
{
 8114ef0:	b480      	push	{r7}
 8114ef2:	b087      	sub	sp, #28
 8114ef4:	af00      	add	r7, sp, #0
 8114ef6:	6078      	str	r0, [r7, #4]
const StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 8114ef8:	687b      	ldr	r3, [r7, #4]
 8114efa:	613b      	str	r3, [r7, #16]
size_t xSpace;

	configASSERT( pxStreamBuffer );
 8114efc:	693b      	ldr	r3, [r7, #16]
 8114efe:	2b00      	cmp	r3, #0
 8114f00:	d10b      	bne.n	8114f1a <xStreamBufferSpacesAvailable+0x2a>
	__asm volatile
 8114f02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8114f06:	f383 8811 	msr	BASEPRI, r3
 8114f0a:	f3bf 8f6f 	isb	sy
 8114f0e:	f3bf 8f4f 	dsb	sy
 8114f12:	60fb      	str	r3, [r7, #12]
}
 8114f14:	bf00      	nop
 8114f16:	bf00      	nop
 8114f18:	e7fd      	b.n	8114f16 <xStreamBufferSpacesAvailable+0x26>

	xSpace = pxStreamBuffer->xLength + pxStreamBuffer->xTail;
 8114f1a:	693b      	ldr	r3, [r7, #16]
 8114f1c:	689a      	ldr	r2, [r3, #8]
 8114f1e:	693b      	ldr	r3, [r7, #16]
 8114f20:	681b      	ldr	r3, [r3, #0]
 8114f22:	4413      	add	r3, r2
 8114f24:	617b      	str	r3, [r7, #20]
	xSpace -= pxStreamBuffer->xHead;
 8114f26:	693b      	ldr	r3, [r7, #16]
 8114f28:	685b      	ldr	r3, [r3, #4]
 8114f2a:	697a      	ldr	r2, [r7, #20]
 8114f2c:	1ad3      	subs	r3, r2, r3
 8114f2e:	617b      	str	r3, [r7, #20]
	xSpace -= ( size_t ) 1;
 8114f30:	697b      	ldr	r3, [r7, #20]
 8114f32:	3b01      	subs	r3, #1
 8114f34:	617b      	str	r3, [r7, #20]

	if( xSpace >= pxStreamBuffer->xLength )
 8114f36:	693b      	ldr	r3, [r7, #16]
 8114f38:	689b      	ldr	r3, [r3, #8]
 8114f3a:	697a      	ldr	r2, [r7, #20]
 8114f3c:	429a      	cmp	r2, r3
 8114f3e:	d304      	bcc.n	8114f4a <xStreamBufferSpacesAvailable+0x5a>
	{
		xSpace -= pxStreamBuffer->xLength;
 8114f40:	693b      	ldr	r3, [r7, #16]
 8114f42:	689b      	ldr	r3, [r3, #8]
 8114f44:	697a      	ldr	r2, [r7, #20]
 8114f46:	1ad3      	subs	r3, r2, r3
 8114f48:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xSpace;
 8114f4a:	697b      	ldr	r3, [r7, #20]
}
 8114f4c:	4618      	mov	r0, r3
 8114f4e:	371c      	adds	r7, #28
 8114f50:	46bd      	mov	sp, r7
 8114f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8114f56:	4770      	bx	lr

08114f58 <xStreamBufferSend>:

size_t xStreamBufferSend( StreamBufferHandle_t xStreamBuffer,
						  const void *pvTxData,
						  size_t xDataLengthBytes,
						  TickType_t xTicksToWait )
{
 8114f58:	b580      	push	{r7, lr}
 8114f5a:	b090      	sub	sp, #64	@ 0x40
 8114f5c:	af02      	add	r7, sp, #8
 8114f5e:	60f8      	str	r0, [r7, #12]
 8114f60:	60b9      	str	r1, [r7, #8]
 8114f62:	607a      	str	r2, [r7, #4]
 8114f64:	603b      	str	r3, [r7, #0]
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 8114f66:	68fb      	ldr	r3, [r7, #12]
 8114f68:	62fb      	str	r3, [r7, #44]	@ 0x2c
size_t xReturn, xSpace = 0;
 8114f6a:	2300      	movs	r3, #0
 8114f6c:	637b      	str	r3, [r7, #52]	@ 0x34
size_t xRequiredSpace = xDataLengthBytes;
 8114f6e:	687b      	ldr	r3, [r7, #4]
 8114f70:	633b      	str	r3, [r7, #48]	@ 0x30
TimeOut_t xTimeOut;

	configASSERT( pvTxData );
 8114f72:	68bb      	ldr	r3, [r7, #8]
 8114f74:	2b00      	cmp	r3, #0
 8114f76:	d10b      	bne.n	8114f90 <xStreamBufferSend+0x38>
	__asm volatile
 8114f78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8114f7c:	f383 8811 	msr	BASEPRI, r3
 8114f80:	f3bf 8f6f 	isb	sy
 8114f84:	f3bf 8f4f 	dsb	sy
 8114f88:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8114f8a:	bf00      	nop
 8114f8c:	bf00      	nop
 8114f8e:	e7fd      	b.n	8114f8c <xStreamBufferSend+0x34>
	configASSERT( pxStreamBuffer );
 8114f90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8114f92:	2b00      	cmp	r3, #0
 8114f94:	d10b      	bne.n	8114fae <xStreamBufferSend+0x56>
	__asm volatile
 8114f96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8114f9a:	f383 8811 	msr	BASEPRI, r3
 8114f9e:	f3bf 8f6f 	isb	sy
 8114fa2:	f3bf 8f4f 	dsb	sy
 8114fa6:	623b      	str	r3, [r7, #32]
}
 8114fa8:	bf00      	nop
 8114faa:	bf00      	nop
 8114fac:	e7fd      	b.n	8114faa <xStreamBufferSend+0x52>

	/* This send function is used to write to both message buffers and stream
	buffers.  If this is a message buffer then the space needed must be
	increased by the amount of bytes needed to store the length of the
	message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 8114fae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8114fb0:	7f1b      	ldrb	r3, [r3, #28]
 8114fb2:	f003 0301 	and.w	r3, r3, #1
 8114fb6:	2b00      	cmp	r3, #0
 8114fb8:	d012      	beq.n	8114fe0 <xStreamBufferSend+0x88>
	{
		xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
 8114fba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8114fbc:	3304      	adds	r3, #4
 8114fbe:	633b      	str	r3, [r7, #48]	@ 0x30

		/* Overflow? */
		configASSERT( xRequiredSpace > xDataLengthBytes );
 8114fc0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8114fc2:	687b      	ldr	r3, [r7, #4]
 8114fc4:	429a      	cmp	r2, r3
 8114fc6:	d80b      	bhi.n	8114fe0 <xStreamBufferSend+0x88>
	__asm volatile
 8114fc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8114fcc:	f383 8811 	msr	BASEPRI, r3
 8114fd0:	f3bf 8f6f 	isb	sy
 8114fd4:	f3bf 8f4f 	dsb	sy
 8114fd8:	61fb      	str	r3, [r7, #28]
}
 8114fda:	bf00      	nop
 8114fdc:	bf00      	nop
 8114fde:	e7fd      	b.n	8114fdc <xStreamBufferSend+0x84>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	if( xTicksToWait != ( TickType_t ) 0 )
 8114fe0:	683b      	ldr	r3, [r7, #0]
 8114fe2:	2b00      	cmp	r3, #0
 8114fe4:	d03f      	beq.n	8115066 <xStreamBufferSend+0x10e>
	{
		vTaskSetTimeOutState( &xTimeOut );
 8114fe6:	f107 0310 	add.w	r3, r7, #16
 8114fea:	4618      	mov	r0, r3
 8114fec:	f001 f82c 	bl	8116048 <vTaskSetTimeOutState>

		do
		{
			/* Wait until the required number of bytes are free in the message
			buffer. */
			taskENTER_CRITICAL();
 8114ff0:	f7fe fcf2 	bl	81139d8 <vPortEnterCritical>
			{
				xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
 8114ff4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8114ff6:	f7ff ff7b 	bl	8114ef0 <xStreamBufferSpacesAvailable>
 8114ffa:	6378      	str	r0, [r7, #52]	@ 0x34

				if( xSpace < xRequiredSpace )
 8114ffc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8114ffe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8115000:	429a      	cmp	r2, r3
 8115002:	d218      	bcs.n	8115036 <xStreamBufferSend+0xde>
				{
					/* Clear notification state as going to wait for space. */
					( void ) xTaskNotifyStateClear( NULL );
 8115004:	2000      	movs	r0, #0
 8115006:	f001 fc8d 	bl	8116924 <xTaskNotifyStateClear>

					/* Should only be one writer. */
					configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
 811500a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811500c:	695b      	ldr	r3, [r3, #20]
 811500e:	2b00      	cmp	r3, #0
 8115010:	d00b      	beq.n	811502a <xStreamBufferSend+0xd2>
	__asm volatile
 8115012:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8115016:	f383 8811 	msr	BASEPRI, r3
 811501a:	f3bf 8f6f 	isb	sy
 811501e:	f3bf 8f4f 	dsb	sy
 8115022:	61bb      	str	r3, [r7, #24]
}
 8115024:	bf00      	nop
 8115026:	bf00      	nop
 8115028:	e7fd      	b.n	8115026 <xStreamBufferSend+0xce>
					pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
 811502a:	f001 f997 	bl	811635c <xTaskGetCurrentTaskHandle>
 811502e:	4602      	mov	r2, r0
 8115030:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8115032:	615a      	str	r2, [r3, #20]
 8115034:	e002      	b.n	811503c <xStreamBufferSend+0xe4>
				}
				else
				{
					taskEXIT_CRITICAL();
 8115036:	f7fe fd01 	bl	8113a3c <vPortExitCritical>
					break;
 811503a:	e014      	b.n	8115066 <xStreamBufferSend+0x10e>
				}
			}
			taskEXIT_CRITICAL();
 811503c:	f7fe fcfe 	bl	8113a3c <vPortExitCritical>

			traceBLOCKING_ON_STREAM_BUFFER_SEND( xStreamBuffer );
			( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
 8115040:	683b      	ldr	r3, [r7, #0]
 8115042:	2200      	movs	r2, #0
 8115044:	2100      	movs	r1, #0
 8115046:	2000      	movs	r0, #0
 8115048:	f001 fb26 	bl	8116698 <xTaskNotifyWait>
			pxStreamBuffer->xTaskWaitingToSend = NULL;
 811504c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811504e:	2200      	movs	r2, #0
 8115050:	615a      	str	r2, [r3, #20]

		} while( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE );
 8115052:	463a      	mov	r2, r7
 8115054:	f107 0310 	add.w	r3, r7, #16
 8115058:	4611      	mov	r1, r2
 811505a:	4618      	mov	r0, r3
 811505c:	f001 f832 	bl	81160c4 <xTaskCheckForTimeOut>
 8115060:	4603      	mov	r3, r0
 8115062:	2b00      	cmp	r3, #0
 8115064:	d0c4      	beq.n	8114ff0 <xStreamBufferSend+0x98>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	if( xSpace == ( size_t ) 0 )
 8115066:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8115068:	2b00      	cmp	r3, #0
 811506a:	d103      	bne.n	8115074 <xStreamBufferSend+0x11c>
	{
		xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
 811506c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 811506e:	f7ff ff3f 	bl	8114ef0 <xStreamBufferSpacesAvailable>
 8115072:	6378      	str	r0, [r7, #52]	@ 0x34
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
 8115074:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8115076:	9300      	str	r3, [sp, #0]
 8115078:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 811507a:	687a      	ldr	r2, [r7, #4]
 811507c:	68b9      	ldr	r1, [r7, #8]
 811507e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8115080:	f000 f814 	bl	81150ac <prvWriteMessageToBuffer>
 8115084:	62b8      	str	r0, [r7, #40]	@ 0x28

	if( xReturn > ( size_t ) 0 )
 8115086:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8115088:	2b00      	cmp	r3, #0
 811508a:	d00a      	beq.n	81150a2 <xStreamBufferSend+0x14a>
	{
		traceSTREAM_BUFFER_SEND( xStreamBuffer, xReturn );

		/* Was a task waiting for the data? */
		if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
 811508c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 811508e:	f000 fa7f 	bl	8115590 <prvBytesInBuffer>
 8115092:	4602      	mov	r2, r0
 8115094:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8115096:	68db      	ldr	r3, [r3, #12]
 8115098:	429a      	cmp	r2, r3
 811509a:	d302      	bcc.n	81150a2 <xStreamBufferSend+0x14a>
		{
			sbSEND_COMPLETED( pxStreamBuffer );
 811509c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 811509e:	f7ec f871 	bl	8101184 <vGenerateRemoteInterrupt>
	{
		mtCOVERAGE_TEST_MARKER();
		traceSTREAM_BUFFER_SEND_FAILED( xStreamBuffer );
	}

	return xReturn;
 81150a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
}
 81150a4:	4618      	mov	r0, r3
 81150a6:	3738      	adds	r7, #56	@ 0x38
 81150a8:	46bd      	mov	sp, r7
 81150aa:	bd80      	pop	{r7, pc}

081150ac <prvWriteMessageToBuffer>:
static size_t prvWriteMessageToBuffer( StreamBuffer_t * const pxStreamBuffer,
									   const void * pvTxData,
									   size_t xDataLengthBytes,
									   size_t xSpace,
									   size_t xRequiredSpace )
{
 81150ac:	b580      	push	{r7, lr}
 81150ae:	b086      	sub	sp, #24
 81150b0:	af00      	add	r7, sp, #0
 81150b2:	60f8      	str	r0, [r7, #12]
 81150b4:	60b9      	str	r1, [r7, #8]
 81150b6:	607a      	str	r2, [r7, #4]
 81150b8:	603b      	str	r3, [r7, #0]
	BaseType_t xShouldWrite;
	size_t xReturn;

	if( xSpace == ( size_t ) 0 )
 81150ba:	683b      	ldr	r3, [r7, #0]
 81150bc:	2b00      	cmp	r3, #0
 81150be:	d102      	bne.n	81150c6 <prvWriteMessageToBuffer+0x1a>
	{
		/* Doesn't matter if this is a stream buffer or a message buffer, there
		is no space to write. */
		xShouldWrite = pdFALSE;
 81150c0:	2300      	movs	r3, #0
 81150c2:	617b      	str	r3, [r7, #20]
 81150c4:	e01d      	b.n	8115102 <prvWriteMessageToBuffer+0x56>
	}
	else if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) == ( uint8_t ) 0 )
 81150c6:	68fb      	ldr	r3, [r7, #12]
 81150c8:	7f1b      	ldrb	r3, [r3, #28]
 81150ca:	f003 0301 	and.w	r3, r3, #1
 81150ce:	2b00      	cmp	r3, #0
 81150d0:	d108      	bne.n	81150e4 <prvWriteMessageToBuffer+0x38>
	{
		/* This is a stream buffer, as opposed to a message buffer, so writing a
		stream of bytes rather than discrete messages.  Write as many bytes as
		possible. */
		xShouldWrite = pdTRUE;
 81150d2:	2301      	movs	r3, #1
 81150d4:	617b      	str	r3, [r7, #20]
		xDataLengthBytes = configMIN( xDataLengthBytes, xSpace );
 81150d6:	687a      	ldr	r2, [r7, #4]
 81150d8:	683b      	ldr	r3, [r7, #0]
 81150da:	4293      	cmp	r3, r2
 81150dc:	bf28      	it	cs
 81150de:	4613      	movcs	r3, r2
 81150e0:	607b      	str	r3, [r7, #4]
 81150e2:	e00e      	b.n	8115102 <prvWriteMessageToBuffer+0x56>
	}
	else if( xSpace >= xRequiredSpace )
 81150e4:	683a      	ldr	r2, [r7, #0]
 81150e6:	6a3b      	ldr	r3, [r7, #32]
 81150e8:	429a      	cmp	r2, r3
 81150ea:	d308      	bcc.n	81150fe <prvWriteMessageToBuffer+0x52>
	{
		/* This is a message buffer, as opposed to a stream buffer, and there
		is enough space to write both the message length and the message itself
		into the buffer.  Start by writing the length of the data, the data
		itself will be written later in this function. */
		xShouldWrite = pdTRUE;
 81150ec:	2301      	movs	r3, #1
 81150ee:	617b      	str	r3, [r7, #20]
		( void ) prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) &( xDataLengthBytes ), sbBYTES_TO_STORE_MESSAGE_LENGTH );
 81150f0:	1d3b      	adds	r3, r7, #4
 81150f2:	2204      	movs	r2, #4
 81150f4:	4619      	mov	r1, r3
 81150f6:	68f8      	ldr	r0, [r7, #12]
 81150f8:	f000 f958 	bl	81153ac <prvWriteBytesToBuffer>
 81150fc:	e001      	b.n	8115102 <prvWriteMessageToBuffer+0x56>
	}
	else
	{
		/* There is space available, but not enough space. */
		xShouldWrite = pdFALSE;
 81150fe:	2300      	movs	r3, #0
 8115100:	617b      	str	r3, [r7, #20]
	}

	if( xShouldWrite != pdFALSE )
 8115102:	697b      	ldr	r3, [r7, #20]
 8115104:	2b00      	cmp	r3, #0
 8115106:	d007      	beq.n	8115118 <prvWriteMessageToBuffer+0x6c>
	{
		/* Writes the data itself. */
		xReturn = prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) pvTxData, xDataLengthBytes ); /*lint !e9079 Storage buffer is implemented as uint8_t for ease of sizing, alighment and access. */
 8115108:	687b      	ldr	r3, [r7, #4]
 811510a:	461a      	mov	r2, r3
 811510c:	68b9      	ldr	r1, [r7, #8]
 811510e:	68f8      	ldr	r0, [r7, #12]
 8115110:	f000 f94c 	bl	81153ac <prvWriteBytesToBuffer>
 8115114:	6138      	str	r0, [r7, #16]
 8115116:	e001      	b.n	811511c <prvWriteMessageToBuffer+0x70>
	}
	else
	{
		xReturn = 0;
 8115118:	2300      	movs	r3, #0
 811511a:	613b      	str	r3, [r7, #16]
	}

	return xReturn;
 811511c:	693b      	ldr	r3, [r7, #16]
}
 811511e:	4618      	mov	r0, r3
 8115120:	3718      	adds	r7, #24
 8115122:	46bd      	mov	sp, r7
 8115124:	bd80      	pop	{r7, pc}

08115126 <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
							 void *pvRxData,
							 size_t xBufferLengthBytes,
							 TickType_t xTicksToWait )
{
 8115126:	b580      	push	{r7, lr}
 8115128:	b08e      	sub	sp, #56	@ 0x38
 811512a:	af02      	add	r7, sp, #8
 811512c:	60f8      	str	r0, [r7, #12]
 811512e:	60b9      	str	r1, [r7, #8]
 8115130:	607a      	str	r2, [r7, #4]
 8115132:	603b      	str	r3, [r7, #0]
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 8115134:	68fb      	ldr	r3, [r7, #12]
 8115136:	623b      	str	r3, [r7, #32]
size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
 8115138:	2300      	movs	r3, #0
 811513a:	62fb      	str	r3, [r7, #44]	@ 0x2c

	configASSERT( pvRxData );
 811513c:	68bb      	ldr	r3, [r7, #8]
 811513e:	2b00      	cmp	r3, #0
 8115140:	d10b      	bne.n	811515a <xStreamBufferReceive+0x34>
	__asm volatile
 8115142:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8115146:	f383 8811 	msr	BASEPRI, r3
 811514a:	f3bf 8f6f 	isb	sy
 811514e:	f3bf 8f4f 	dsb	sy
 8115152:	61fb      	str	r3, [r7, #28]
}
 8115154:	bf00      	nop
 8115156:	bf00      	nop
 8115158:	e7fd      	b.n	8115156 <xStreamBufferReceive+0x30>
	configASSERT( pxStreamBuffer );
 811515a:	6a3b      	ldr	r3, [r7, #32]
 811515c:	2b00      	cmp	r3, #0
 811515e:	d10b      	bne.n	8115178 <xStreamBufferReceive+0x52>
	__asm volatile
 8115160:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8115164:	f383 8811 	msr	BASEPRI, r3
 8115168:	f3bf 8f6f 	isb	sy
 811516c:	f3bf 8f4f 	dsb	sy
 8115170:	61bb      	str	r3, [r7, #24]
}
 8115172:	bf00      	nop
 8115174:	bf00      	nop
 8115176:	e7fd      	b.n	8115174 <xStreamBufferReceive+0x4e>
	/* This receive function is used by both message buffers, which store
	discrete messages, and stream buffers, which store a continuous stream of
	bytes.  Discrete messages include an additional
	sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
	message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 8115178:	6a3b      	ldr	r3, [r7, #32]
 811517a:	7f1b      	ldrb	r3, [r3, #28]
 811517c:	f003 0301 	and.w	r3, r3, #1
 8115180:	2b00      	cmp	r3, #0
 8115182:	d002      	beq.n	811518a <xStreamBufferReceive+0x64>
	{
		xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
 8115184:	2304      	movs	r3, #4
 8115186:	627b      	str	r3, [r7, #36]	@ 0x24
 8115188:	e001      	b.n	811518e <xStreamBufferReceive+0x68>
	}
	else
	{
		xBytesToStoreMessageLength = 0;
 811518a:	2300      	movs	r3, #0
 811518c:	627b      	str	r3, [r7, #36]	@ 0x24
	}

	if( xTicksToWait != ( TickType_t ) 0 )
 811518e:	683b      	ldr	r3, [r7, #0]
 8115190:	2b00      	cmp	r3, #0
 8115192:	d035      	beq.n	8115200 <xStreamBufferReceive+0xda>
	{
		/* Checking if there is data and clearing the notification state must be
		performed atomically. */
		taskENTER_CRITICAL();
 8115194:	f7fe fc20 	bl	81139d8 <vPortEnterCritical>
		{
			xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 8115198:	6a38      	ldr	r0, [r7, #32]
 811519a:	f000 f9f9 	bl	8115590 <prvBytesInBuffer>
 811519e:	62b8      	str	r0, [r7, #40]	@ 0x28
			/* If this function was invoked by a message buffer read then
			xBytesToStoreMessageLength holds the number of bytes used to hold
			the length of the next discrete message.  If this function was
			invoked by a stream buffer read then xBytesToStoreMessageLength will
			be 0. */
			if( xBytesAvailable <= xBytesToStoreMessageLength )
 81151a0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 81151a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81151a4:	429a      	cmp	r2, r3
 81151a6:	d817      	bhi.n	81151d8 <xStreamBufferReceive+0xb2>
			{
				/* Clear notification state as going to wait for data. */
				( void ) xTaskNotifyStateClear( NULL );
 81151a8:	2000      	movs	r0, #0
 81151aa:	f001 fbbb 	bl	8116924 <xTaskNotifyStateClear>

				/* Should only be one reader. */
				configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
 81151ae:	6a3b      	ldr	r3, [r7, #32]
 81151b0:	691b      	ldr	r3, [r3, #16]
 81151b2:	2b00      	cmp	r3, #0
 81151b4:	d00b      	beq.n	81151ce <xStreamBufferReceive+0xa8>
	__asm volatile
 81151b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81151ba:	f383 8811 	msr	BASEPRI, r3
 81151be:	f3bf 8f6f 	isb	sy
 81151c2:	f3bf 8f4f 	dsb	sy
 81151c6:	617b      	str	r3, [r7, #20]
}
 81151c8:	bf00      	nop
 81151ca:	bf00      	nop
 81151cc:	e7fd      	b.n	81151ca <xStreamBufferReceive+0xa4>
				pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
 81151ce:	f001 f8c5 	bl	811635c <xTaskGetCurrentTaskHandle>
 81151d2:	4602      	mov	r2, r0
 81151d4:	6a3b      	ldr	r3, [r7, #32]
 81151d6:	611a      	str	r2, [r3, #16]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 81151d8:	f7fe fc30 	bl	8113a3c <vPortExitCritical>

		if( xBytesAvailable <= xBytesToStoreMessageLength )
 81151dc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 81151de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81151e0:	429a      	cmp	r2, r3
 81151e2:	d811      	bhi.n	8115208 <xStreamBufferReceive+0xe2>
		{
			/* Wait for data to be available. */
			traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
			( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
 81151e4:	683b      	ldr	r3, [r7, #0]
 81151e6:	2200      	movs	r2, #0
 81151e8:	2100      	movs	r1, #0
 81151ea:	2000      	movs	r0, #0
 81151ec:	f001 fa54 	bl	8116698 <xTaskNotifyWait>
			pxStreamBuffer->xTaskWaitingToReceive = NULL;
 81151f0:	6a3b      	ldr	r3, [r7, #32]
 81151f2:	2200      	movs	r2, #0
 81151f4:	611a      	str	r2, [r3, #16]

			/* Recheck the data available after blocking. */
			xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 81151f6:	6a38      	ldr	r0, [r7, #32]
 81151f8:	f000 f9ca 	bl	8115590 <prvBytesInBuffer>
 81151fc:	62b8      	str	r0, [r7, #40]	@ 0x28
 81151fe:	e003      	b.n	8115208 <xStreamBufferReceive+0xe2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 8115200:	6a38      	ldr	r0, [r7, #32]
 8115202:	f000 f9c5 	bl	8115590 <prvBytesInBuffer>
 8115206:	62b8      	str	r0, [r7, #40]	@ 0x28
	/* Whether receiving a discrete message (where xBytesToStoreMessageLength
	holds the number of bytes used to store the message length) or a stream of
	bytes (where xBytesToStoreMessageLength is zero), the number of bytes
	available must be greater than xBytesToStoreMessageLength to be able to
	read bytes from the buffer. */
	if( xBytesAvailable > xBytesToStoreMessageLength )
 8115208:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 811520a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811520c:	429a      	cmp	r2, r3
 811520e:	d90e      	bls.n	811522e <xStreamBufferReceive+0x108>
	{
		xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );
 8115210:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8115212:	9300      	str	r3, [sp, #0]
 8115214:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8115216:	687a      	ldr	r2, [r7, #4]
 8115218:	68b9      	ldr	r1, [r7, #8]
 811521a:	6a38      	ldr	r0, [r7, #32]
 811521c:	f000 f80c 	bl	8115238 <prvReadMessageFromBuffer>
 8115220:	62f8      	str	r0, [r7, #44]	@ 0x2c

		/* Was a task waiting for space in the buffer? */
		if( xReceivedLength != ( size_t ) 0 )
 8115222:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8115224:	2b00      	cmp	r3, #0
 8115226:	d002      	beq.n	811522e <xStreamBufferReceive+0x108>
		{
			traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
			sbRECEIVE_COMPLETED( pxStreamBuffer );
 8115228:	6a38      	ldr	r0, [r7, #32]
 811522a:	f7eb ffab 	bl	8101184 <vGenerateRemoteInterrupt>
	{
		traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
		mtCOVERAGE_TEST_MARKER();
	}

	return xReceivedLength;
 811522e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8115230:	4618      	mov	r0, r3
 8115232:	3730      	adds	r7, #48	@ 0x30
 8115234:	46bd      	mov	sp, r7
 8115236:	bd80      	pop	{r7, pc}

08115238 <prvReadMessageFromBuffer>:
static size_t prvReadMessageFromBuffer( StreamBuffer_t *pxStreamBuffer,
										void *pvRxData,
										size_t xBufferLengthBytes,
										size_t xBytesAvailable,
										size_t xBytesToStoreMessageLength )
{
 8115238:	b580      	push	{r7, lr}
 811523a:	b088      	sub	sp, #32
 811523c:	af00      	add	r7, sp, #0
 811523e:	60f8      	str	r0, [r7, #12]
 8115240:	60b9      	str	r1, [r7, #8]
 8115242:	607a      	str	r2, [r7, #4]
 8115244:	603b      	str	r3, [r7, #0]
size_t xOriginalTail, xReceivedLength, xNextMessageLength;
configMESSAGE_BUFFER_LENGTH_TYPE xTempNextMessageLength;

	if( xBytesToStoreMessageLength != ( size_t ) 0 )
 8115246:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8115248:	2b00      	cmp	r3, #0
 811524a:	d019      	beq.n	8115280 <prvReadMessageFromBuffer+0x48>
	{
		/* A discrete message is being received.  First receive the length
		of the message.  A copy of the tail is stored so the buffer can be
		returned to its prior state if the length of the message is too
		large for the provided buffer. */
		xOriginalTail = pxStreamBuffer->xTail;
 811524c:	68fb      	ldr	r3, [r7, #12]
 811524e:	681b      	ldr	r3, [r3, #0]
 8115250:	61bb      	str	r3, [r7, #24]
		( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempNextMessageLength, xBytesToStoreMessageLength, xBytesAvailable );
 8115252:	f107 0110 	add.w	r1, r7, #16
 8115256:	683b      	ldr	r3, [r7, #0]
 8115258:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 811525a:	68f8      	ldr	r0, [r7, #12]
 811525c:	f000 f91b 	bl	8115496 <prvReadBytesFromBuffer>
		xNextMessageLength = ( size_t ) xTempNextMessageLength;
 8115260:	693b      	ldr	r3, [r7, #16]
 8115262:	61fb      	str	r3, [r7, #28]

		/* Reduce the number of bytes available by the number of bytes just
		read out. */
		xBytesAvailable -= xBytesToStoreMessageLength;
 8115264:	683a      	ldr	r2, [r7, #0]
 8115266:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8115268:	1ad3      	subs	r3, r2, r3
 811526a:	603b      	str	r3, [r7, #0]

		/* Check there is enough space in the buffer provided by the
		user. */
		if( xNextMessageLength > xBufferLengthBytes )
 811526c:	69fa      	ldr	r2, [r7, #28]
 811526e:	687b      	ldr	r3, [r7, #4]
 8115270:	429a      	cmp	r2, r3
 8115272:	d907      	bls.n	8115284 <prvReadMessageFromBuffer+0x4c>
		{
			/* The user has provided insufficient space to read the message
			so return the buffer to its previous state (so the length of
			the message is in the buffer again). */
			pxStreamBuffer->xTail = xOriginalTail;
 8115274:	68fb      	ldr	r3, [r7, #12]
 8115276:	69ba      	ldr	r2, [r7, #24]
 8115278:	601a      	str	r2, [r3, #0]
			xNextMessageLength = 0;
 811527a:	2300      	movs	r3, #0
 811527c:	61fb      	str	r3, [r7, #28]
 811527e:	e001      	b.n	8115284 <prvReadMessageFromBuffer+0x4c>
	}
	else
	{
		/* A stream of bytes is being received (as opposed to a discrete
		message), so read as many bytes as possible. */
		xNextMessageLength = xBufferLengthBytes;
 8115280:	687b      	ldr	r3, [r7, #4]
 8115282:	61fb      	str	r3, [r7, #28]
	}

	/* Read the actual data. */
	xReceivedLength = prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) pvRxData, xNextMessageLength, xBytesAvailable ); /*lint !e9079 Data storage area is implemented as uint8_t array for ease of sizing, indexing and alignment. */
 8115284:	683b      	ldr	r3, [r7, #0]
 8115286:	69fa      	ldr	r2, [r7, #28]
 8115288:	68b9      	ldr	r1, [r7, #8]
 811528a:	68f8      	ldr	r0, [r7, #12]
 811528c:	f000 f903 	bl	8115496 <prvReadBytesFromBuffer>
 8115290:	6178      	str	r0, [r7, #20]

	return xReceivedLength;
 8115292:	697b      	ldr	r3, [r7, #20]
}
 8115294:	4618      	mov	r0, r3
 8115296:	3720      	adds	r7, #32
 8115298:	46bd      	mov	sp, r7
 811529a:	bd80      	pop	{r7, pc}

0811529c <xStreamBufferSendCompletedFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xStreamBufferSendCompletedFromISR( StreamBufferHandle_t xStreamBuffer, BaseType_t *pxHigherPriorityTaskWoken )
{
 811529c:	b580      	push	{r7, lr}
 811529e:	b08c      	sub	sp, #48	@ 0x30
 81152a0:	af02      	add	r7, sp, #8
 81152a2:	6078      	str	r0, [r7, #4]
 81152a4:	6039      	str	r1, [r7, #0]
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 81152a6:	687b      	ldr	r3, [r7, #4]
 81152a8:	623b      	str	r3, [r7, #32]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;

	configASSERT( pxStreamBuffer );
 81152aa:	6a3b      	ldr	r3, [r7, #32]
 81152ac:	2b00      	cmp	r3, #0
 81152ae:	d10b      	bne.n	81152c8 <xStreamBufferSendCompletedFromISR+0x2c>
	__asm volatile
 81152b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81152b4:	f383 8811 	msr	BASEPRI, r3
 81152b8:	f3bf 8f6f 	isb	sy
 81152bc:	f3bf 8f4f 	dsb	sy
 81152c0:	61bb      	str	r3, [r7, #24]
}
 81152c2:	bf00      	nop
 81152c4:	bf00      	nop
 81152c6:	e7fd      	b.n	81152c4 <xStreamBufferSendCompletedFromISR+0x28>
	__asm volatile
 81152c8:	f3ef 8211 	mrs	r2, BASEPRI
 81152cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81152d0:	f383 8811 	msr	BASEPRI, r3
 81152d4:	f3bf 8f6f 	isb	sy
 81152d8:	f3bf 8f4f 	dsb	sy
 81152dc:	617a      	str	r2, [r7, #20]
 81152de:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 81152e0:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = ( UBaseType_t ) portSET_INTERRUPT_MASK_FROM_ISR();
 81152e2:	61fb      	str	r3, [r7, #28]
	{
		if( ( pxStreamBuffer )->xTaskWaitingToReceive != NULL )
 81152e4:	6a3b      	ldr	r3, [r7, #32]
 81152e6:	691b      	ldr	r3, [r3, #16]
 81152e8:	2b00      	cmp	r3, #0
 81152ea:	d00e      	beq.n	811530a <xStreamBufferSendCompletedFromISR+0x6e>
		{
			( void ) xTaskNotifyFromISR( ( pxStreamBuffer )->xTaskWaitingToReceive,
 81152ec:	6a3b      	ldr	r3, [r7, #32]
 81152ee:	6918      	ldr	r0, [r3, #16]
 81152f0:	683b      	ldr	r3, [r7, #0]
 81152f2:	9300      	str	r3, [sp, #0]
 81152f4:	2300      	movs	r3, #0
 81152f6:	2200      	movs	r2, #0
 81152f8:	2100      	movs	r1, #0
 81152fa:	f001 fa2d 	bl	8116758 <xTaskGenericNotifyFromISR>
										 ( uint32_t ) 0,
										 eNoAction,
										 pxHigherPriorityTaskWoken );
			( pxStreamBuffer )->xTaskWaitingToReceive = NULL;
 81152fe:	6a3b      	ldr	r3, [r7, #32]
 8115300:	2200      	movs	r2, #0
 8115302:	611a      	str	r2, [r3, #16]
			xReturn = pdTRUE;
 8115304:	2301      	movs	r3, #1
 8115306:	627b      	str	r3, [r7, #36]	@ 0x24
 8115308:	e001      	b.n	811530e <xStreamBufferSendCompletedFromISR+0x72>
		}
		else
		{
			xReturn = pdFALSE;
 811530a:	2300      	movs	r3, #0
 811530c:	627b      	str	r3, [r7, #36]	@ 0x24
 811530e:	69fb      	ldr	r3, [r7, #28]
 8115310:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8115312:	68fb      	ldr	r3, [r7, #12]
 8115314:	f383 8811 	msr	BASEPRI, r3
}
 8115318:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 811531a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 811531c:	4618      	mov	r0, r3
 811531e:	3728      	adds	r7, #40	@ 0x28
 8115320:	46bd      	mov	sp, r7
 8115322:	bd80      	pop	{r7, pc}

08115324 <xStreamBufferReceiveCompletedFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xStreamBufferReceiveCompletedFromISR( StreamBufferHandle_t xStreamBuffer, BaseType_t *pxHigherPriorityTaskWoken )
{
 8115324:	b580      	push	{r7, lr}
 8115326:	b08c      	sub	sp, #48	@ 0x30
 8115328:	af02      	add	r7, sp, #8
 811532a:	6078      	str	r0, [r7, #4]
 811532c:	6039      	str	r1, [r7, #0]
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 811532e:	687b      	ldr	r3, [r7, #4]
 8115330:	623b      	str	r3, [r7, #32]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;

	configASSERT( pxStreamBuffer );
 8115332:	6a3b      	ldr	r3, [r7, #32]
 8115334:	2b00      	cmp	r3, #0
 8115336:	d10b      	bne.n	8115350 <xStreamBufferReceiveCompletedFromISR+0x2c>
	__asm volatile
 8115338:	f04f 0350 	mov.w	r3, #80	@ 0x50
 811533c:	f383 8811 	msr	BASEPRI, r3
 8115340:	f3bf 8f6f 	isb	sy
 8115344:	f3bf 8f4f 	dsb	sy
 8115348:	61bb      	str	r3, [r7, #24]
}
 811534a:	bf00      	nop
 811534c:	bf00      	nop
 811534e:	e7fd      	b.n	811534c <xStreamBufferReceiveCompletedFromISR+0x28>
	__asm volatile
 8115350:	f3ef 8211 	mrs	r2, BASEPRI
 8115354:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8115358:	f383 8811 	msr	BASEPRI, r3
 811535c:	f3bf 8f6f 	isb	sy
 8115360:	f3bf 8f4f 	dsb	sy
 8115364:	617a      	str	r2, [r7, #20]
 8115366:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8115368:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = ( UBaseType_t ) portSET_INTERRUPT_MASK_FROM_ISR();
 811536a:	61fb      	str	r3, [r7, #28]
	{
		if( ( pxStreamBuffer )->xTaskWaitingToSend != NULL )
 811536c:	6a3b      	ldr	r3, [r7, #32]
 811536e:	695b      	ldr	r3, [r3, #20]
 8115370:	2b00      	cmp	r3, #0
 8115372:	d00e      	beq.n	8115392 <xStreamBufferReceiveCompletedFromISR+0x6e>
		{
			( void ) xTaskNotifyFromISR( ( pxStreamBuffer )->xTaskWaitingToSend,
 8115374:	6a3b      	ldr	r3, [r7, #32]
 8115376:	6958      	ldr	r0, [r3, #20]
 8115378:	683b      	ldr	r3, [r7, #0]
 811537a:	9300      	str	r3, [sp, #0]
 811537c:	2300      	movs	r3, #0
 811537e:	2200      	movs	r2, #0
 8115380:	2100      	movs	r1, #0
 8115382:	f001 f9e9 	bl	8116758 <xTaskGenericNotifyFromISR>
										 ( uint32_t ) 0,
										 eNoAction,
										 pxHigherPriorityTaskWoken );
			( pxStreamBuffer )->xTaskWaitingToSend = NULL;
 8115386:	6a3b      	ldr	r3, [r7, #32]
 8115388:	2200      	movs	r2, #0
 811538a:	615a      	str	r2, [r3, #20]
			xReturn = pdTRUE;
 811538c:	2301      	movs	r3, #1
 811538e:	627b      	str	r3, [r7, #36]	@ 0x24
 8115390:	e001      	b.n	8115396 <xStreamBufferReceiveCompletedFromISR+0x72>
		}
		else
		{
			xReturn = pdFALSE;
 8115392:	2300      	movs	r3, #0
 8115394:	627b      	str	r3, [r7, #36]	@ 0x24
 8115396:	69fb      	ldr	r3, [r7, #28]
 8115398:	60fb      	str	r3, [r7, #12]
	__asm volatile
 811539a:	68fb      	ldr	r3, [r7, #12]
 811539c:	f383 8811 	msr	BASEPRI, r3
}
 81153a0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 81153a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 81153a4:	4618      	mov	r0, r3
 81153a6:	3728      	adds	r7, #40	@ 0x28
 81153a8:	46bd      	mov	sp, r7
 81153aa:	bd80      	pop	{r7, pc}

081153ac <prvWriteBytesToBuffer>:
/*-----------------------------------------------------------*/

static size_t prvWriteBytesToBuffer( StreamBuffer_t * const pxStreamBuffer, const uint8_t *pucData, size_t xCount )
{
 81153ac:	b580      	push	{r7, lr}
 81153ae:	b08a      	sub	sp, #40	@ 0x28
 81153b0:	af00      	add	r7, sp, #0
 81153b2:	60f8      	str	r0, [r7, #12]
 81153b4:	60b9      	str	r1, [r7, #8]
 81153b6:	607a      	str	r2, [r7, #4]
size_t xNextHead, xFirstLength;

	configASSERT( xCount > ( size_t ) 0 );
 81153b8:	687b      	ldr	r3, [r7, #4]
 81153ba:	2b00      	cmp	r3, #0
 81153bc:	d10b      	bne.n	81153d6 <prvWriteBytesToBuffer+0x2a>
	__asm volatile
 81153be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81153c2:	f383 8811 	msr	BASEPRI, r3
 81153c6:	f3bf 8f6f 	isb	sy
 81153ca:	f3bf 8f4f 	dsb	sy
 81153ce:	61fb      	str	r3, [r7, #28]
}
 81153d0:	bf00      	nop
 81153d2:	bf00      	nop
 81153d4:	e7fd      	b.n	81153d2 <prvWriteBytesToBuffer+0x26>

	xNextHead = pxStreamBuffer->xHead;
 81153d6:	68fb      	ldr	r3, [r7, #12]
 81153d8:	685b      	ldr	r3, [r3, #4]
 81153da:	627b      	str	r3, [r7, #36]	@ 0x24

	/* Calculate the number of bytes that can be added in the first write -
	which may be less than the total number of bytes that need to be added if
	the buffer will wrap back to the beginning. */
	xFirstLength = configMIN( pxStreamBuffer->xLength - xNextHead, xCount );
 81153dc:	68fb      	ldr	r3, [r7, #12]
 81153de:	689a      	ldr	r2, [r3, #8]
 81153e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81153e2:	1ad3      	subs	r3, r2, r3
 81153e4:	687a      	ldr	r2, [r7, #4]
 81153e6:	4293      	cmp	r3, r2
 81153e8:	bf28      	it	cs
 81153ea:	4613      	movcs	r3, r2
 81153ec:	623b      	str	r3, [r7, #32]

	/* Write as many bytes as can be written in the first write. */
	configASSERT( ( xNextHead + xFirstLength ) <= pxStreamBuffer->xLength );
 81153ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 81153f0:	6a3b      	ldr	r3, [r7, #32]
 81153f2:	441a      	add	r2, r3
 81153f4:	68fb      	ldr	r3, [r7, #12]
 81153f6:	689b      	ldr	r3, [r3, #8]
 81153f8:	429a      	cmp	r2, r3
 81153fa:	d90b      	bls.n	8115414 <prvWriteBytesToBuffer+0x68>
	__asm volatile
 81153fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8115400:	f383 8811 	msr	BASEPRI, r3
 8115404:	f3bf 8f6f 	isb	sy
 8115408:	f3bf 8f4f 	dsb	sy
 811540c:	61bb      	str	r3, [r7, #24]
}
 811540e:	bf00      	nop
 8115410:	bf00      	nop
 8115412:	e7fd      	b.n	8115410 <prvWriteBytesToBuffer+0x64>
	( void ) memcpy( ( void* ) ( &( pxStreamBuffer->pucBuffer[ xNextHead ] ) ), ( const void * ) pucData, xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 8115414:	68fb      	ldr	r3, [r7, #12]
 8115416:	699a      	ldr	r2, [r3, #24]
 8115418:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811541a:	4413      	add	r3, r2
 811541c:	6a3a      	ldr	r2, [r7, #32]
 811541e:	68b9      	ldr	r1, [r7, #8]
 8115420:	4618      	mov	r0, r3
 8115422:	f00e fe8a 	bl	812413a <memcpy>

	/* If the number of bytes written was less than the number that could be
	written in the first write... */
	if( xCount > xFirstLength )
 8115426:	687a      	ldr	r2, [r7, #4]
 8115428:	6a3b      	ldr	r3, [r7, #32]
 811542a:	429a      	cmp	r2, r3
 811542c:	d91d      	bls.n	811546a <prvWriteBytesToBuffer+0xbe>
	{
		/* ...then write the remaining bytes to the start of the buffer. */
		configASSERT( ( xCount - xFirstLength ) <= pxStreamBuffer->xLength );
 811542e:	687a      	ldr	r2, [r7, #4]
 8115430:	6a3b      	ldr	r3, [r7, #32]
 8115432:	1ad2      	subs	r2, r2, r3
 8115434:	68fb      	ldr	r3, [r7, #12]
 8115436:	689b      	ldr	r3, [r3, #8]
 8115438:	429a      	cmp	r2, r3
 811543a:	d90b      	bls.n	8115454 <prvWriteBytesToBuffer+0xa8>
	__asm volatile
 811543c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8115440:	f383 8811 	msr	BASEPRI, r3
 8115444:	f3bf 8f6f 	isb	sy
 8115448:	f3bf 8f4f 	dsb	sy
 811544c:	617b      	str	r3, [r7, #20]
}
 811544e:	bf00      	nop
 8115450:	bf00      	nop
 8115452:	e7fd      	b.n	8115450 <prvWriteBytesToBuffer+0xa4>
		( void ) memcpy( ( void * ) pxStreamBuffer->pucBuffer, ( const void * ) &( pucData[ xFirstLength ] ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 8115454:	68fb      	ldr	r3, [r7, #12]
 8115456:	6998      	ldr	r0, [r3, #24]
 8115458:	68ba      	ldr	r2, [r7, #8]
 811545a:	6a3b      	ldr	r3, [r7, #32]
 811545c:	18d1      	adds	r1, r2, r3
 811545e:	687a      	ldr	r2, [r7, #4]
 8115460:	6a3b      	ldr	r3, [r7, #32]
 8115462:	1ad3      	subs	r3, r2, r3
 8115464:	461a      	mov	r2, r3
 8115466:	f00e fe68 	bl	812413a <memcpy>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	xNextHead += xCount;
 811546a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 811546c:	687b      	ldr	r3, [r7, #4]
 811546e:	4413      	add	r3, r2
 8115470:	627b      	str	r3, [r7, #36]	@ 0x24
	if( xNextHead >= pxStreamBuffer->xLength )
 8115472:	68fb      	ldr	r3, [r7, #12]
 8115474:	689b      	ldr	r3, [r3, #8]
 8115476:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8115478:	429a      	cmp	r2, r3
 811547a:	d304      	bcc.n	8115486 <prvWriteBytesToBuffer+0xda>
	{
		xNextHead -= pxStreamBuffer->xLength;
 811547c:	68fb      	ldr	r3, [r7, #12]
 811547e:	689b      	ldr	r3, [r3, #8]
 8115480:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8115482:	1ad3      	subs	r3, r2, r3
 8115484:	627b      	str	r3, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxStreamBuffer->xHead = xNextHead;
 8115486:	68fb      	ldr	r3, [r7, #12]
 8115488:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 811548a:	605a      	str	r2, [r3, #4]

	return xCount;
 811548c:	687b      	ldr	r3, [r7, #4]
}
 811548e:	4618      	mov	r0, r3
 8115490:	3728      	adds	r7, #40	@ 0x28
 8115492:	46bd      	mov	sp, r7
 8115494:	bd80      	pop	{r7, pc}

08115496 <prvReadBytesFromBuffer>:
/*-----------------------------------------------------------*/

static size_t prvReadBytesFromBuffer( StreamBuffer_t *pxStreamBuffer, uint8_t *pucData, size_t xMaxCount, size_t xBytesAvailable )
{
 8115496:	b580      	push	{r7, lr}
 8115498:	b08a      	sub	sp, #40	@ 0x28
 811549a:	af00      	add	r7, sp, #0
 811549c:	60f8      	str	r0, [r7, #12]
 811549e:	60b9      	str	r1, [r7, #8]
 81154a0:	607a      	str	r2, [r7, #4]
 81154a2:	603b      	str	r3, [r7, #0]
size_t xCount, xFirstLength, xNextTail;

	/* Use the minimum of the wanted bytes and the available bytes. */
	xCount = configMIN( xBytesAvailable, xMaxCount );
 81154a4:	687a      	ldr	r2, [r7, #4]
 81154a6:	683b      	ldr	r3, [r7, #0]
 81154a8:	4293      	cmp	r3, r2
 81154aa:	bf28      	it	cs
 81154ac:	4613      	movcs	r3, r2
 81154ae:	623b      	str	r3, [r7, #32]

	if( xCount > ( size_t ) 0 )
 81154b0:	6a3b      	ldr	r3, [r7, #32]
 81154b2:	2b00      	cmp	r3, #0
 81154b4:	d067      	beq.n	8115586 <prvReadBytesFromBuffer+0xf0>
	{
		xNextTail = pxStreamBuffer->xTail;
 81154b6:	68fb      	ldr	r3, [r7, #12]
 81154b8:	681b      	ldr	r3, [r3, #0]
 81154ba:	627b      	str	r3, [r7, #36]	@ 0x24

		/* Calculate the number of bytes that can be read - which may be
		less than the number wanted if the data wraps around to the start of
		the buffer. */
		xFirstLength = configMIN( pxStreamBuffer->xLength - xNextTail, xCount );
 81154bc:	68fb      	ldr	r3, [r7, #12]
 81154be:	689a      	ldr	r2, [r3, #8]
 81154c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81154c2:	1ad3      	subs	r3, r2, r3
 81154c4:	6a3a      	ldr	r2, [r7, #32]
 81154c6:	4293      	cmp	r3, r2
 81154c8:	bf28      	it	cs
 81154ca:	4613      	movcs	r3, r2
 81154cc:	61fb      	str	r3, [r7, #28]

		/* Obtain the number of bytes it is possible to obtain in the first
		read.  Asserts check bounds of read and write. */
		configASSERT( xFirstLength <= xMaxCount );
 81154ce:	69fa      	ldr	r2, [r7, #28]
 81154d0:	687b      	ldr	r3, [r7, #4]
 81154d2:	429a      	cmp	r2, r3
 81154d4:	d90b      	bls.n	81154ee <prvReadBytesFromBuffer+0x58>
	__asm volatile
 81154d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81154da:	f383 8811 	msr	BASEPRI, r3
 81154de:	f3bf 8f6f 	isb	sy
 81154e2:	f3bf 8f4f 	dsb	sy
 81154e6:	61bb      	str	r3, [r7, #24]
}
 81154e8:	bf00      	nop
 81154ea:	bf00      	nop
 81154ec:	e7fd      	b.n	81154ea <prvReadBytesFromBuffer+0x54>
		configASSERT( ( xNextTail + xFirstLength ) <= pxStreamBuffer->xLength );
 81154ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 81154f0:	69fb      	ldr	r3, [r7, #28]
 81154f2:	441a      	add	r2, r3
 81154f4:	68fb      	ldr	r3, [r7, #12]
 81154f6:	689b      	ldr	r3, [r3, #8]
 81154f8:	429a      	cmp	r2, r3
 81154fa:	d90b      	bls.n	8115514 <prvReadBytesFromBuffer+0x7e>
	__asm volatile
 81154fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8115500:	f383 8811 	msr	BASEPRI, r3
 8115504:	f3bf 8f6f 	isb	sy
 8115508:	f3bf 8f4f 	dsb	sy
 811550c:	617b      	str	r3, [r7, #20]
}
 811550e:	bf00      	nop
 8115510:	bf00      	nop
 8115512:	e7fd      	b.n	8115510 <prvReadBytesFromBuffer+0x7a>
		( void ) memcpy( ( void * ) pucData, ( const void * ) &( pxStreamBuffer->pucBuffer[ xNextTail ] ), xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 8115514:	68fb      	ldr	r3, [r7, #12]
 8115516:	699a      	ldr	r2, [r3, #24]
 8115518:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811551a:	4413      	add	r3, r2
 811551c:	69fa      	ldr	r2, [r7, #28]
 811551e:	4619      	mov	r1, r3
 8115520:	68b8      	ldr	r0, [r7, #8]
 8115522:	f00e fe0a 	bl	812413a <memcpy>

		/* If the total number of wanted bytes is greater than the number
		that could be read in the first read... */
		if( xCount > xFirstLength )
 8115526:	6a3a      	ldr	r2, [r7, #32]
 8115528:	69fb      	ldr	r3, [r7, #28]
 811552a:	429a      	cmp	r2, r3
 811552c:	d91a      	bls.n	8115564 <prvReadBytesFromBuffer+0xce>
		{
			/*...then read the remaining bytes from the start of the buffer. */
			configASSERT( xCount <= xMaxCount );
 811552e:	6a3a      	ldr	r2, [r7, #32]
 8115530:	687b      	ldr	r3, [r7, #4]
 8115532:	429a      	cmp	r2, r3
 8115534:	d90b      	bls.n	811554e <prvReadBytesFromBuffer+0xb8>
	__asm volatile
 8115536:	f04f 0350 	mov.w	r3, #80	@ 0x50
 811553a:	f383 8811 	msr	BASEPRI, r3
 811553e:	f3bf 8f6f 	isb	sy
 8115542:	f3bf 8f4f 	dsb	sy
 8115546:	613b      	str	r3, [r7, #16]
}
 8115548:	bf00      	nop
 811554a:	bf00      	nop
 811554c:	e7fd      	b.n	811554a <prvReadBytesFromBuffer+0xb4>
			( void ) memcpy( ( void * ) &( pucData[ xFirstLength ] ), ( void * ) ( pxStreamBuffer->pucBuffer ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 811554e:	68ba      	ldr	r2, [r7, #8]
 8115550:	69fb      	ldr	r3, [r7, #28]
 8115552:	18d0      	adds	r0, r2, r3
 8115554:	68fb      	ldr	r3, [r7, #12]
 8115556:	6999      	ldr	r1, [r3, #24]
 8115558:	6a3a      	ldr	r2, [r7, #32]
 811555a:	69fb      	ldr	r3, [r7, #28]
 811555c:	1ad3      	subs	r3, r2, r3
 811555e:	461a      	mov	r2, r3
 8115560:	f00e fdeb 	bl	812413a <memcpy>
			mtCOVERAGE_TEST_MARKER();
		}

		/* Move the tail pointer to effectively remove the data read from
		the buffer. */
		xNextTail += xCount;
 8115564:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8115566:	6a3b      	ldr	r3, [r7, #32]
 8115568:	4413      	add	r3, r2
 811556a:	627b      	str	r3, [r7, #36]	@ 0x24

		if( xNextTail >= pxStreamBuffer->xLength )
 811556c:	68fb      	ldr	r3, [r7, #12]
 811556e:	689b      	ldr	r3, [r3, #8]
 8115570:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8115572:	429a      	cmp	r2, r3
 8115574:	d304      	bcc.n	8115580 <prvReadBytesFromBuffer+0xea>
		{
			xNextTail -= pxStreamBuffer->xLength;
 8115576:	68fb      	ldr	r3, [r7, #12]
 8115578:	689b      	ldr	r3, [r3, #8]
 811557a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 811557c:	1ad3      	subs	r3, r2, r3
 811557e:	627b      	str	r3, [r7, #36]	@ 0x24
		}

		pxStreamBuffer->xTail = xNextTail;
 8115580:	68fb      	ldr	r3, [r7, #12]
 8115582:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8115584:	601a      	str	r2, [r3, #0]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xCount;
 8115586:	6a3b      	ldr	r3, [r7, #32]
}
 8115588:	4618      	mov	r0, r3
 811558a:	3728      	adds	r7, #40	@ 0x28
 811558c:	46bd      	mov	sp, r7
 811558e:	bd80      	pop	{r7, pc}

08115590 <prvBytesInBuffer>:
/*-----------------------------------------------------------*/

static size_t prvBytesInBuffer( const StreamBuffer_t * const pxStreamBuffer )
{
 8115590:	b480      	push	{r7}
 8115592:	b085      	sub	sp, #20
 8115594:	af00      	add	r7, sp, #0
 8115596:	6078      	str	r0, [r7, #4]
/* Returns the distance between xTail and xHead. */
size_t xCount;

	xCount = pxStreamBuffer->xLength + pxStreamBuffer->xHead;
 8115598:	687b      	ldr	r3, [r7, #4]
 811559a:	689a      	ldr	r2, [r3, #8]
 811559c:	687b      	ldr	r3, [r7, #4]
 811559e:	685b      	ldr	r3, [r3, #4]
 81155a0:	4413      	add	r3, r2
 81155a2:	60fb      	str	r3, [r7, #12]
	xCount -= pxStreamBuffer->xTail;
 81155a4:	687b      	ldr	r3, [r7, #4]
 81155a6:	681b      	ldr	r3, [r3, #0]
 81155a8:	68fa      	ldr	r2, [r7, #12]
 81155aa:	1ad3      	subs	r3, r2, r3
 81155ac:	60fb      	str	r3, [r7, #12]
	if ( xCount >= pxStreamBuffer->xLength )
 81155ae:	687b      	ldr	r3, [r7, #4]
 81155b0:	689b      	ldr	r3, [r3, #8]
 81155b2:	68fa      	ldr	r2, [r7, #12]
 81155b4:	429a      	cmp	r2, r3
 81155b6:	d304      	bcc.n	81155c2 <prvBytesInBuffer+0x32>
	{
		xCount -= pxStreamBuffer->xLength;
 81155b8:	687b      	ldr	r3, [r7, #4]
 81155ba:	689b      	ldr	r3, [r3, #8]
 81155bc:	68fa      	ldr	r2, [r7, #12]
 81155be:	1ad3      	subs	r3, r2, r3
 81155c0:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xCount;
 81155c2:	68fb      	ldr	r3, [r7, #12]
}
 81155c4:	4618      	mov	r0, r3
 81155c6:	3714      	adds	r7, #20
 81155c8:	46bd      	mov	sp, r7
 81155ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 81155ce:	4770      	bx	lr

081155d0 <prvInitialiseNewStreamBuffer>:
static void prvInitialiseNewStreamBuffer( StreamBuffer_t * const pxStreamBuffer,
										  uint8_t * const pucBuffer,
										  size_t xBufferSizeBytes,
										  size_t xTriggerLevelBytes,
										  uint8_t ucFlags )
{
 81155d0:	b580      	push	{r7, lr}
 81155d2:	b086      	sub	sp, #24
 81155d4:	af00      	add	r7, sp, #0
 81155d6:	60f8      	str	r0, [r7, #12]
 81155d8:	60b9      	str	r1, [r7, #8]
 81155da:	607a      	str	r2, [r7, #4]
 81155dc:	603b      	str	r3, [r7, #0]
	#if( configASSERT_DEFINED == 1 )
	{
		/* The value written just has to be identifiable when looking at the
		memory.  Don't use 0xA5 as that is the stack fill value and could
		result in confusion as to what is actually being observed. */
		const BaseType_t xWriteValue = 0x55;
 81155de:	2355      	movs	r3, #85	@ 0x55
 81155e0:	617b      	str	r3, [r7, #20]
		configASSERT( memset( pucBuffer, ( int ) xWriteValue, xBufferSizeBytes ) == pucBuffer );
 81155e2:	687a      	ldr	r2, [r7, #4]
 81155e4:	6979      	ldr	r1, [r7, #20]
 81155e6:	68b8      	ldr	r0, [r7, #8]
 81155e8:	f00e fc58 	bl	8123e9c <memset>
 81155ec:	4602      	mov	r2, r0
 81155ee:	68bb      	ldr	r3, [r7, #8]
 81155f0:	4293      	cmp	r3, r2
 81155f2:	d00b      	beq.n	811560c <prvInitialiseNewStreamBuffer+0x3c>
	__asm volatile
 81155f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81155f8:	f383 8811 	msr	BASEPRI, r3
 81155fc:	f3bf 8f6f 	isb	sy
 8115600:	f3bf 8f4f 	dsb	sy
 8115604:	613b      	str	r3, [r7, #16]
}
 8115606:	bf00      	nop
 8115608:	bf00      	nop
 811560a:	e7fd      	b.n	8115608 <prvInitialiseNewStreamBuffer+0x38>
	} /*lint !e529 !e438 xWriteValue is only used if configASSERT() is defined. */
	#endif

	( void ) memset( ( void * ) pxStreamBuffer, 0x00, sizeof( StreamBuffer_t ) ); /*lint !e9087 memset() requires void *. */
 811560c:	2224      	movs	r2, #36	@ 0x24
 811560e:	2100      	movs	r1, #0
 8115610:	68f8      	ldr	r0, [r7, #12]
 8115612:	f00e fc43 	bl	8123e9c <memset>
	pxStreamBuffer->pucBuffer = pucBuffer;
 8115616:	68fb      	ldr	r3, [r7, #12]
 8115618:	68ba      	ldr	r2, [r7, #8]
 811561a:	619a      	str	r2, [r3, #24]
	pxStreamBuffer->xLength = xBufferSizeBytes;
 811561c:	68fb      	ldr	r3, [r7, #12]
 811561e:	687a      	ldr	r2, [r7, #4]
 8115620:	609a      	str	r2, [r3, #8]
	pxStreamBuffer->xTriggerLevelBytes = xTriggerLevelBytes;
 8115622:	68fb      	ldr	r3, [r7, #12]
 8115624:	683a      	ldr	r2, [r7, #0]
 8115626:	60da      	str	r2, [r3, #12]
	pxStreamBuffer->ucFlags = ucFlags;
 8115628:	68fb      	ldr	r3, [r7, #12]
 811562a:	f897 2020 	ldrb.w	r2, [r7, #32]
 811562e:	771a      	strb	r2, [r3, #28]
}
 8115630:	bf00      	nop
 8115632:	3718      	adds	r7, #24
 8115634:	46bd      	mov	sp, r7
 8115636:	bd80      	pop	{r7, pc}

08115638 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8115638:	b580      	push	{r7, lr}
 811563a:	b08e      	sub	sp, #56	@ 0x38
 811563c:	af04      	add	r7, sp, #16
 811563e:	60f8      	str	r0, [r7, #12]
 8115640:	60b9      	str	r1, [r7, #8]
 8115642:	607a      	str	r2, [r7, #4]
 8115644:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8115646:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8115648:	2b00      	cmp	r3, #0
 811564a:	d10b      	bne.n	8115664 <xTaskCreateStatic+0x2c>
	__asm volatile
 811564c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8115650:	f383 8811 	msr	BASEPRI, r3
 8115654:	f3bf 8f6f 	isb	sy
 8115658:	f3bf 8f4f 	dsb	sy
 811565c:	623b      	str	r3, [r7, #32]
}
 811565e:	bf00      	nop
 8115660:	bf00      	nop
 8115662:	e7fd      	b.n	8115660 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8115664:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8115666:	2b00      	cmp	r3, #0
 8115668:	d10b      	bne.n	8115682 <xTaskCreateStatic+0x4a>
	__asm volatile
 811566a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 811566e:	f383 8811 	msr	BASEPRI, r3
 8115672:	f3bf 8f6f 	isb	sy
 8115676:	f3bf 8f4f 	dsb	sy
 811567a:	61fb      	str	r3, [r7, #28]
}
 811567c:	bf00      	nop
 811567e:	bf00      	nop
 8115680:	e7fd      	b.n	811567e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8115682:	23a8      	movs	r3, #168	@ 0xa8
 8115684:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8115686:	693b      	ldr	r3, [r7, #16]
 8115688:	2ba8      	cmp	r3, #168	@ 0xa8
 811568a:	d00b      	beq.n	81156a4 <xTaskCreateStatic+0x6c>
	__asm volatile
 811568c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8115690:	f383 8811 	msr	BASEPRI, r3
 8115694:	f3bf 8f6f 	isb	sy
 8115698:	f3bf 8f4f 	dsb	sy
 811569c:	61bb      	str	r3, [r7, #24]
}
 811569e:	bf00      	nop
 81156a0:	bf00      	nop
 81156a2:	e7fd      	b.n	81156a0 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 81156a4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 81156a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81156a8:	2b00      	cmp	r3, #0
 81156aa:	d01e      	beq.n	81156ea <xTaskCreateStatic+0xb2>
 81156ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81156ae:	2b00      	cmp	r3, #0
 81156b0:	d01b      	beq.n	81156ea <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 81156b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81156b4:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 81156b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81156b8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 81156ba:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 81156bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81156be:	2202      	movs	r2, #2
 81156c0:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 81156c4:	2300      	movs	r3, #0
 81156c6:	9303      	str	r3, [sp, #12]
 81156c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81156ca:	9302      	str	r3, [sp, #8]
 81156cc:	f107 0314 	add.w	r3, r7, #20
 81156d0:	9301      	str	r3, [sp, #4]
 81156d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81156d4:	9300      	str	r3, [sp, #0]
 81156d6:	683b      	ldr	r3, [r7, #0]
 81156d8:	687a      	ldr	r2, [r7, #4]
 81156da:	68b9      	ldr	r1, [r7, #8]
 81156dc:	68f8      	ldr	r0, [r7, #12]
 81156de:	f000 f851 	bl	8115784 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 81156e2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 81156e4:	f000 f8f6 	bl	81158d4 <prvAddNewTaskToReadyList>
 81156e8:	e001      	b.n	81156ee <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 81156ea:	2300      	movs	r3, #0
 81156ec:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 81156ee:	697b      	ldr	r3, [r7, #20]
	}
 81156f0:	4618      	mov	r0, r3
 81156f2:	3728      	adds	r7, #40	@ 0x28
 81156f4:	46bd      	mov	sp, r7
 81156f6:	bd80      	pop	{r7, pc}

081156f8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 81156f8:	b580      	push	{r7, lr}
 81156fa:	b08c      	sub	sp, #48	@ 0x30
 81156fc:	af04      	add	r7, sp, #16
 81156fe:	60f8      	str	r0, [r7, #12]
 8115700:	60b9      	str	r1, [r7, #8]
 8115702:	603b      	str	r3, [r7, #0]
 8115704:	4613      	mov	r3, r2
 8115706:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8115708:	88fb      	ldrh	r3, [r7, #6]
 811570a:	009b      	lsls	r3, r3, #2
 811570c:	4618      	mov	r0, r3
 811570e:	f7fd fd8d 	bl	811322c <pvPortMalloc>
 8115712:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8115714:	697b      	ldr	r3, [r7, #20]
 8115716:	2b00      	cmp	r3, #0
 8115718:	d00e      	beq.n	8115738 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 811571a:	20a8      	movs	r0, #168	@ 0xa8
 811571c:	f7fd fd86 	bl	811322c <pvPortMalloc>
 8115720:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8115722:	69fb      	ldr	r3, [r7, #28]
 8115724:	2b00      	cmp	r3, #0
 8115726:	d003      	beq.n	8115730 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8115728:	69fb      	ldr	r3, [r7, #28]
 811572a:	697a      	ldr	r2, [r7, #20]
 811572c:	631a      	str	r2, [r3, #48]	@ 0x30
 811572e:	e005      	b.n	811573c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8115730:	6978      	ldr	r0, [r7, #20]
 8115732:	f7fd fe49 	bl	81133c8 <vPortFree>
 8115736:	e001      	b.n	811573c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8115738:	2300      	movs	r3, #0
 811573a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 811573c:	69fb      	ldr	r3, [r7, #28]
 811573e:	2b00      	cmp	r3, #0
 8115740:	d017      	beq.n	8115772 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8115742:	69fb      	ldr	r3, [r7, #28]
 8115744:	2200      	movs	r2, #0
 8115746:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 811574a:	88fa      	ldrh	r2, [r7, #6]
 811574c:	2300      	movs	r3, #0
 811574e:	9303      	str	r3, [sp, #12]
 8115750:	69fb      	ldr	r3, [r7, #28]
 8115752:	9302      	str	r3, [sp, #8]
 8115754:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8115756:	9301      	str	r3, [sp, #4]
 8115758:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 811575a:	9300      	str	r3, [sp, #0]
 811575c:	683b      	ldr	r3, [r7, #0]
 811575e:	68b9      	ldr	r1, [r7, #8]
 8115760:	68f8      	ldr	r0, [r7, #12]
 8115762:	f000 f80f 	bl	8115784 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8115766:	69f8      	ldr	r0, [r7, #28]
 8115768:	f000 f8b4 	bl	81158d4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 811576c:	2301      	movs	r3, #1
 811576e:	61bb      	str	r3, [r7, #24]
 8115770:	e002      	b.n	8115778 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8115772:	f04f 33ff 	mov.w	r3, #4294967295
 8115776:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8115778:	69bb      	ldr	r3, [r7, #24]
	}
 811577a:	4618      	mov	r0, r3
 811577c:	3720      	adds	r7, #32
 811577e:	46bd      	mov	sp, r7
 8115780:	bd80      	pop	{r7, pc}
	...

08115784 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8115784:	b580      	push	{r7, lr}
 8115786:	b088      	sub	sp, #32
 8115788:	af00      	add	r7, sp, #0
 811578a:	60f8      	str	r0, [r7, #12]
 811578c:	60b9      	str	r1, [r7, #8]
 811578e:	607a      	str	r2, [r7, #4]
 8115790:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8115792:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8115794:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8115796:	687b      	ldr	r3, [r7, #4]
 8115798:	009b      	lsls	r3, r3, #2
 811579a:	461a      	mov	r2, r3
 811579c:	21a5      	movs	r1, #165	@ 0xa5
 811579e:	f00e fb7d 	bl	8123e9c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 81157a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81157a4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 81157a6:	687b      	ldr	r3, [r7, #4]
 81157a8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 81157ac:	3b01      	subs	r3, #1
 81157ae:	009b      	lsls	r3, r3, #2
 81157b0:	4413      	add	r3, r2
 81157b2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 81157b4:	69bb      	ldr	r3, [r7, #24]
 81157b6:	f023 0307 	bic.w	r3, r3, #7
 81157ba:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 81157bc:	69bb      	ldr	r3, [r7, #24]
 81157be:	f003 0307 	and.w	r3, r3, #7
 81157c2:	2b00      	cmp	r3, #0
 81157c4:	d00b      	beq.n	81157de <prvInitialiseNewTask+0x5a>
	__asm volatile
 81157c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81157ca:	f383 8811 	msr	BASEPRI, r3
 81157ce:	f3bf 8f6f 	isb	sy
 81157d2:	f3bf 8f4f 	dsb	sy
 81157d6:	617b      	str	r3, [r7, #20]
}
 81157d8:	bf00      	nop
 81157da:	bf00      	nop
 81157dc:	e7fd      	b.n	81157da <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 81157de:	68bb      	ldr	r3, [r7, #8]
 81157e0:	2b00      	cmp	r3, #0
 81157e2:	d01f      	beq.n	8115824 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 81157e4:	2300      	movs	r3, #0
 81157e6:	61fb      	str	r3, [r7, #28]
 81157e8:	e012      	b.n	8115810 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 81157ea:	68ba      	ldr	r2, [r7, #8]
 81157ec:	69fb      	ldr	r3, [r7, #28]
 81157ee:	4413      	add	r3, r2
 81157f0:	7819      	ldrb	r1, [r3, #0]
 81157f2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 81157f4:	69fb      	ldr	r3, [r7, #28]
 81157f6:	4413      	add	r3, r2
 81157f8:	3334      	adds	r3, #52	@ 0x34
 81157fa:	460a      	mov	r2, r1
 81157fc:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 81157fe:	68ba      	ldr	r2, [r7, #8]
 8115800:	69fb      	ldr	r3, [r7, #28]
 8115802:	4413      	add	r3, r2
 8115804:	781b      	ldrb	r3, [r3, #0]
 8115806:	2b00      	cmp	r3, #0
 8115808:	d006      	beq.n	8115818 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 811580a:	69fb      	ldr	r3, [r7, #28]
 811580c:	3301      	adds	r3, #1
 811580e:	61fb      	str	r3, [r7, #28]
 8115810:	69fb      	ldr	r3, [r7, #28]
 8115812:	2b0f      	cmp	r3, #15
 8115814:	d9e9      	bls.n	81157ea <prvInitialiseNewTask+0x66>
 8115816:	e000      	b.n	811581a <prvInitialiseNewTask+0x96>
			{
				break;
 8115818:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 811581a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811581c:	2200      	movs	r2, #0
 811581e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8115822:	e003      	b.n	811582c <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8115824:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8115826:	2200      	movs	r2, #0
 8115828:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 811582c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 811582e:	2b37      	cmp	r3, #55	@ 0x37
 8115830:	d901      	bls.n	8115836 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8115832:	2337      	movs	r3, #55	@ 0x37
 8115834:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8115836:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8115838:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 811583a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 811583c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811583e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8115840:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8115842:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8115844:	2200      	movs	r2, #0
 8115846:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8115848:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811584a:	3304      	adds	r3, #4
 811584c:	4618      	mov	r0, r3
 811584e:	f7fd fefb 	bl	8113648 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8115852:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8115854:	3318      	adds	r3, #24
 8115856:	4618      	mov	r0, r3
 8115858:	f7fd fef6 	bl	8113648 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 811585c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811585e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8115860:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8115862:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8115864:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8115868:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811586a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 811586c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811586e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8115870:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8115872:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8115874:	2200      	movs	r2, #0
 8115876:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 811587a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811587c:	2200      	movs	r2, #0
 811587e:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8115882:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8115884:	3354      	adds	r3, #84	@ 0x54
 8115886:	224c      	movs	r2, #76	@ 0x4c
 8115888:	2100      	movs	r1, #0
 811588a:	4618      	mov	r0, r3
 811588c:	f00e fb06 	bl	8123e9c <memset>
 8115890:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8115892:	4a0d      	ldr	r2, [pc, #52]	@ (81158c8 <prvInitialiseNewTask+0x144>)
 8115894:	659a      	str	r2, [r3, #88]	@ 0x58
 8115896:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8115898:	4a0c      	ldr	r2, [pc, #48]	@ (81158cc <prvInitialiseNewTask+0x148>)
 811589a:	65da      	str	r2, [r3, #92]	@ 0x5c
 811589c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811589e:	4a0c      	ldr	r2, [pc, #48]	@ (81158d0 <prvInitialiseNewTask+0x14c>)
 81158a0:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 81158a2:	683a      	ldr	r2, [r7, #0]
 81158a4:	68f9      	ldr	r1, [r7, #12]
 81158a6:	69b8      	ldr	r0, [r7, #24]
 81158a8:	f7fd ff62 	bl	8113770 <pxPortInitialiseStack>
 81158ac:	4602      	mov	r2, r0
 81158ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81158b0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 81158b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81158b4:	2b00      	cmp	r3, #0
 81158b6:	d002      	beq.n	81158be <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 81158b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81158ba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 81158bc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 81158be:	bf00      	nop
 81158c0:	3720      	adds	r7, #32
 81158c2:	46bd      	mov	sp, r7
 81158c4:	bd80      	pop	{r7, pc}
 81158c6:	bf00      	nop
 81158c8:	1000e514 	.word	0x1000e514
 81158cc:	1000e57c 	.word	0x1000e57c
 81158d0:	1000e5e4 	.word	0x1000e5e4

081158d4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 81158d4:	b580      	push	{r7, lr}
 81158d6:	b082      	sub	sp, #8
 81158d8:	af00      	add	r7, sp, #0
 81158da:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 81158dc:	f7fe f87c 	bl	81139d8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 81158e0:	4b2d      	ldr	r3, [pc, #180]	@ (8115998 <prvAddNewTaskToReadyList+0xc4>)
 81158e2:	681b      	ldr	r3, [r3, #0]
 81158e4:	3301      	adds	r3, #1
 81158e6:	4a2c      	ldr	r2, [pc, #176]	@ (8115998 <prvAddNewTaskToReadyList+0xc4>)
 81158e8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 81158ea:	4b2c      	ldr	r3, [pc, #176]	@ (811599c <prvAddNewTaskToReadyList+0xc8>)
 81158ec:	681b      	ldr	r3, [r3, #0]
 81158ee:	2b00      	cmp	r3, #0
 81158f0:	d109      	bne.n	8115906 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 81158f2:	4a2a      	ldr	r2, [pc, #168]	@ (811599c <prvAddNewTaskToReadyList+0xc8>)
 81158f4:	687b      	ldr	r3, [r7, #4]
 81158f6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 81158f8:	4b27      	ldr	r3, [pc, #156]	@ (8115998 <prvAddNewTaskToReadyList+0xc4>)
 81158fa:	681b      	ldr	r3, [r3, #0]
 81158fc:	2b01      	cmp	r3, #1
 81158fe:	d110      	bne.n	8115922 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8115900:	f000 fc68 	bl	81161d4 <prvInitialiseTaskLists>
 8115904:	e00d      	b.n	8115922 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8115906:	4b26      	ldr	r3, [pc, #152]	@ (81159a0 <prvAddNewTaskToReadyList+0xcc>)
 8115908:	681b      	ldr	r3, [r3, #0]
 811590a:	2b00      	cmp	r3, #0
 811590c:	d109      	bne.n	8115922 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 811590e:	4b23      	ldr	r3, [pc, #140]	@ (811599c <prvAddNewTaskToReadyList+0xc8>)
 8115910:	681b      	ldr	r3, [r3, #0]
 8115912:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8115914:	687b      	ldr	r3, [r7, #4]
 8115916:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8115918:	429a      	cmp	r2, r3
 811591a:	d802      	bhi.n	8115922 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 811591c:	4a1f      	ldr	r2, [pc, #124]	@ (811599c <prvAddNewTaskToReadyList+0xc8>)
 811591e:	687b      	ldr	r3, [r7, #4]
 8115920:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8115922:	4b20      	ldr	r3, [pc, #128]	@ (81159a4 <prvAddNewTaskToReadyList+0xd0>)
 8115924:	681b      	ldr	r3, [r3, #0]
 8115926:	3301      	adds	r3, #1
 8115928:	4a1e      	ldr	r2, [pc, #120]	@ (81159a4 <prvAddNewTaskToReadyList+0xd0>)
 811592a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 811592c:	4b1d      	ldr	r3, [pc, #116]	@ (81159a4 <prvAddNewTaskToReadyList+0xd0>)
 811592e:	681a      	ldr	r2, [r3, #0]
 8115930:	687b      	ldr	r3, [r7, #4]
 8115932:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8115934:	687b      	ldr	r3, [r7, #4]
 8115936:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8115938:	4b1b      	ldr	r3, [pc, #108]	@ (81159a8 <prvAddNewTaskToReadyList+0xd4>)
 811593a:	681b      	ldr	r3, [r3, #0]
 811593c:	429a      	cmp	r2, r3
 811593e:	d903      	bls.n	8115948 <prvAddNewTaskToReadyList+0x74>
 8115940:	687b      	ldr	r3, [r7, #4]
 8115942:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8115944:	4a18      	ldr	r2, [pc, #96]	@ (81159a8 <prvAddNewTaskToReadyList+0xd4>)
 8115946:	6013      	str	r3, [r2, #0]
 8115948:	687b      	ldr	r3, [r7, #4]
 811594a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 811594c:	4613      	mov	r3, r2
 811594e:	009b      	lsls	r3, r3, #2
 8115950:	4413      	add	r3, r2
 8115952:	009b      	lsls	r3, r3, #2
 8115954:	4a15      	ldr	r2, [pc, #84]	@ (81159ac <prvAddNewTaskToReadyList+0xd8>)
 8115956:	441a      	add	r2, r3
 8115958:	687b      	ldr	r3, [r7, #4]
 811595a:	3304      	adds	r3, #4
 811595c:	4619      	mov	r1, r3
 811595e:	4610      	mov	r0, r2
 8115960:	f7fd fe7f 	bl	8113662 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8115964:	f7fe f86a 	bl	8113a3c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8115968:	4b0d      	ldr	r3, [pc, #52]	@ (81159a0 <prvAddNewTaskToReadyList+0xcc>)
 811596a:	681b      	ldr	r3, [r3, #0]
 811596c:	2b00      	cmp	r3, #0
 811596e:	d00e      	beq.n	811598e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8115970:	4b0a      	ldr	r3, [pc, #40]	@ (811599c <prvAddNewTaskToReadyList+0xc8>)
 8115972:	681b      	ldr	r3, [r3, #0]
 8115974:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8115976:	687b      	ldr	r3, [r7, #4]
 8115978:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 811597a:	429a      	cmp	r2, r3
 811597c:	d207      	bcs.n	811598e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 811597e:	4b0c      	ldr	r3, [pc, #48]	@ (81159b0 <prvAddNewTaskToReadyList+0xdc>)
 8115980:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8115984:	601a      	str	r2, [r3, #0]
 8115986:	f3bf 8f4f 	dsb	sy
 811598a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 811598e:	bf00      	nop
 8115990:	3708      	adds	r7, #8
 8115992:	46bd      	mov	sp, r7
 8115994:	bd80      	pop	{r7, pc}
 8115996:	bf00      	nop
 8115998:	1000b0b4 	.word	0x1000b0b4
 811599c:	1000abe0 	.word	0x1000abe0
 81159a0:	1000b0c0 	.word	0x1000b0c0
 81159a4:	1000b0d0 	.word	0x1000b0d0
 81159a8:	1000b0bc 	.word	0x1000b0bc
 81159ac:	1000abe4 	.word	0x1000abe4
 81159b0:	e000ed04 	.word	0xe000ed04

081159b4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 81159b4:	b580      	push	{r7, lr}
 81159b6:	b084      	sub	sp, #16
 81159b8:	af00      	add	r7, sp, #0
 81159ba:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 81159bc:	2300      	movs	r3, #0
 81159be:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 81159c0:	687b      	ldr	r3, [r7, #4]
 81159c2:	2b00      	cmp	r3, #0
 81159c4:	d018      	beq.n	81159f8 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 81159c6:	4b14      	ldr	r3, [pc, #80]	@ (8115a18 <vTaskDelay+0x64>)
 81159c8:	681b      	ldr	r3, [r3, #0]
 81159ca:	2b00      	cmp	r3, #0
 81159cc:	d00b      	beq.n	81159e6 <vTaskDelay+0x32>
	__asm volatile
 81159ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81159d2:	f383 8811 	msr	BASEPRI, r3
 81159d6:	f3bf 8f6f 	isb	sy
 81159da:	f3bf 8f4f 	dsb	sy
 81159de:	60bb      	str	r3, [r7, #8]
}
 81159e0:	bf00      	nop
 81159e2:	bf00      	nop
 81159e4:	e7fd      	b.n	81159e2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 81159e6:	f000 f88b 	bl	8115b00 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 81159ea:	2100      	movs	r1, #0
 81159ec:	6878      	ldr	r0, [r7, #4]
 81159ee:	f000 ffbf 	bl	8116970 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 81159f2:	f000 f893 	bl	8115b1c <xTaskResumeAll>
 81159f6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 81159f8:	68fb      	ldr	r3, [r7, #12]
 81159fa:	2b00      	cmp	r3, #0
 81159fc:	d107      	bne.n	8115a0e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 81159fe:	4b07      	ldr	r3, [pc, #28]	@ (8115a1c <vTaskDelay+0x68>)
 8115a00:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8115a04:	601a      	str	r2, [r3, #0]
 8115a06:	f3bf 8f4f 	dsb	sy
 8115a0a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8115a0e:	bf00      	nop
 8115a10:	3710      	adds	r7, #16
 8115a12:	46bd      	mov	sp, r7
 8115a14:	bd80      	pop	{r7, pc}
 8115a16:	bf00      	nop
 8115a18:	1000b0dc 	.word	0x1000b0dc
 8115a1c:	e000ed04 	.word	0xe000ed04

08115a20 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8115a20:	b580      	push	{r7, lr}
 8115a22:	b08a      	sub	sp, #40	@ 0x28
 8115a24:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8115a26:	2300      	movs	r3, #0
 8115a28:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8115a2a:	2300      	movs	r3, #0
 8115a2c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8115a2e:	463a      	mov	r2, r7
 8115a30:	1d39      	adds	r1, r7, #4
 8115a32:	f107 0308 	add.w	r3, r7, #8
 8115a36:	4618      	mov	r0, r3
 8115a38:	f7fd fbc4 	bl	81131c4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8115a3c:	6839      	ldr	r1, [r7, #0]
 8115a3e:	687b      	ldr	r3, [r7, #4]
 8115a40:	68ba      	ldr	r2, [r7, #8]
 8115a42:	9202      	str	r2, [sp, #8]
 8115a44:	9301      	str	r3, [sp, #4]
 8115a46:	2300      	movs	r3, #0
 8115a48:	9300      	str	r3, [sp, #0]
 8115a4a:	2300      	movs	r3, #0
 8115a4c:	460a      	mov	r2, r1
 8115a4e:	4924      	ldr	r1, [pc, #144]	@ (8115ae0 <vTaskStartScheduler+0xc0>)
 8115a50:	4824      	ldr	r0, [pc, #144]	@ (8115ae4 <vTaskStartScheduler+0xc4>)
 8115a52:	f7ff fdf1 	bl	8115638 <xTaskCreateStatic>
 8115a56:	4603      	mov	r3, r0
 8115a58:	4a23      	ldr	r2, [pc, #140]	@ (8115ae8 <vTaskStartScheduler+0xc8>)
 8115a5a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8115a5c:	4b22      	ldr	r3, [pc, #136]	@ (8115ae8 <vTaskStartScheduler+0xc8>)
 8115a5e:	681b      	ldr	r3, [r3, #0]
 8115a60:	2b00      	cmp	r3, #0
 8115a62:	d002      	beq.n	8115a6a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8115a64:	2301      	movs	r3, #1
 8115a66:	617b      	str	r3, [r7, #20]
 8115a68:	e001      	b.n	8115a6e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8115a6a:	2300      	movs	r3, #0
 8115a6c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8115a6e:	697b      	ldr	r3, [r7, #20]
 8115a70:	2b01      	cmp	r3, #1
 8115a72:	d102      	bne.n	8115a7a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8115a74:	f000 ffd0 	bl	8116a18 <xTimerCreateTimerTask>
 8115a78:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8115a7a:	697b      	ldr	r3, [r7, #20]
 8115a7c:	2b01      	cmp	r3, #1
 8115a7e:	d11b      	bne.n	8115ab8 <vTaskStartScheduler+0x98>
	__asm volatile
 8115a80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8115a84:	f383 8811 	msr	BASEPRI, r3
 8115a88:	f3bf 8f6f 	isb	sy
 8115a8c:	f3bf 8f4f 	dsb	sy
 8115a90:	613b      	str	r3, [r7, #16]
}
 8115a92:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8115a94:	4b15      	ldr	r3, [pc, #84]	@ (8115aec <vTaskStartScheduler+0xcc>)
 8115a96:	681b      	ldr	r3, [r3, #0]
 8115a98:	3354      	adds	r3, #84	@ 0x54
 8115a9a:	4a15      	ldr	r2, [pc, #84]	@ (8115af0 <vTaskStartScheduler+0xd0>)
 8115a9c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8115a9e:	4b15      	ldr	r3, [pc, #84]	@ (8115af4 <vTaskStartScheduler+0xd4>)
 8115aa0:	f04f 32ff 	mov.w	r2, #4294967295
 8115aa4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8115aa6:	4b14      	ldr	r3, [pc, #80]	@ (8115af8 <vTaskStartScheduler+0xd8>)
 8115aa8:	2201      	movs	r2, #1
 8115aaa:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8115aac:	4b13      	ldr	r3, [pc, #76]	@ (8115afc <vTaskStartScheduler+0xdc>)
 8115aae:	2200      	movs	r2, #0
 8115ab0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8115ab2:	f7fd feed 	bl	8113890 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8115ab6:	e00f      	b.n	8115ad8 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8115ab8:	697b      	ldr	r3, [r7, #20]
 8115aba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8115abe:	d10b      	bne.n	8115ad8 <vTaskStartScheduler+0xb8>
	__asm volatile
 8115ac0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8115ac4:	f383 8811 	msr	BASEPRI, r3
 8115ac8:	f3bf 8f6f 	isb	sy
 8115acc:	f3bf 8f4f 	dsb	sy
 8115ad0:	60fb      	str	r3, [r7, #12]
}
 8115ad2:	bf00      	nop
 8115ad4:	bf00      	nop
 8115ad6:	e7fd      	b.n	8115ad4 <vTaskStartScheduler+0xb4>
}
 8115ad8:	bf00      	nop
 8115ada:	3718      	adds	r7, #24
 8115adc:	46bd      	mov	sp, r7
 8115ade:	bd80      	pop	{r7, pc}
 8115ae0:	08125420 	.word	0x08125420
 8115ae4:	081161a5 	.word	0x081161a5
 8115ae8:	1000b0d8 	.word	0x1000b0d8
 8115aec:	1000abe0 	.word	0x1000abe0
 8115af0:	10000040 	.word	0x10000040
 8115af4:	1000b0d4 	.word	0x1000b0d4
 8115af8:	1000b0c0 	.word	0x1000b0c0
 8115afc:	1000b0b8 	.word	0x1000b0b8

08115b00 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8115b00:	b480      	push	{r7}
 8115b02:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8115b04:	4b04      	ldr	r3, [pc, #16]	@ (8115b18 <vTaskSuspendAll+0x18>)
 8115b06:	681b      	ldr	r3, [r3, #0]
 8115b08:	3301      	adds	r3, #1
 8115b0a:	4a03      	ldr	r2, [pc, #12]	@ (8115b18 <vTaskSuspendAll+0x18>)
 8115b0c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8115b0e:	bf00      	nop
 8115b10:	46bd      	mov	sp, r7
 8115b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8115b16:	4770      	bx	lr
 8115b18:	1000b0dc 	.word	0x1000b0dc

08115b1c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8115b1c:	b580      	push	{r7, lr}
 8115b1e:	b084      	sub	sp, #16
 8115b20:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8115b22:	2300      	movs	r3, #0
 8115b24:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8115b26:	2300      	movs	r3, #0
 8115b28:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8115b2a:	4b42      	ldr	r3, [pc, #264]	@ (8115c34 <xTaskResumeAll+0x118>)
 8115b2c:	681b      	ldr	r3, [r3, #0]
 8115b2e:	2b00      	cmp	r3, #0
 8115b30:	d10b      	bne.n	8115b4a <xTaskResumeAll+0x2e>
	__asm volatile
 8115b32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8115b36:	f383 8811 	msr	BASEPRI, r3
 8115b3a:	f3bf 8f6f 	isb	sy
 8115b3e:	f3bf 8f4f 	dsb	sy
 8115b42:	603b      	str	r3, [r7, #0]
}
 8115b44:	bf00      	nop
 8115b46:	bf00      	nop
 8115b48:	e7fd      	b.n	8115b46 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8115b4a:	f7fd ff45 	bl	81139d8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8115b4e:	4b39      	ldr	r3, [pc, #228]	@ (8115c34 <xTaskResumeAll+0x118>)
 8115b50:	681b      	ldr	r3, [r3, #0]
 8115b52:	3b01      	subs	r3, #1
 8115b54:	4a37      	ldr	r2, [pc, #220]	@ (8115c34 <xTaskResumeAll+0x118>)
 8115b56:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8115b58:	4b36      	ldr	r3, [pc, #216]	@ (8115c34 <xTaskResumeAll+0x118>)
 8115b5a:	681b      	ldr	r3, [r3, #0]
 8115b5c:	2b00      	cmp	r3, #0
 8115b5e:	d162      	bne.n	8115c26 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8115b60:	4b35      	ldr	r3, [pc, #212]	@ (8115c38 <xTaskResumeAll+0x11c>)
 8115b62:	681b      	ldr	r3, [r3, #0]
 8115b64:	2b00      	cmp	r3, #0
 8115b66:	d05e      	beq.n	8115c26 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8115b68:	e02f      	b.n	8115bca <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8115b6a:	4b34      	ldr	r3, [pc, #208]	@ (8115c3c <xTaskResumeAll+0x120>)
 8115b6c:	68db      	ldr	r3, [r3, #12]
 8115b6e:	68db      	ldr	r3, [r3, #12]
 8115b70:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8115b72:	68fb      	ldr	r3, [r7, #12]
 8115b74:	3318      	adds	r3, #24
 8115b76:	4618      	mov	r0, r3
 8115b78:	f7fd fdd0 	bl	811371c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8115b7c:	68fb      	ldr	r3, [r7, #12]
 8115b7e:	3304      	adds	r3, #4
 8115b80:	4618      	mov	r0, r3
 8115b82:	f7fd fdcb 	bl	811371c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8115b86:	68fb      	ldr	r3, [r7, #12]
 8115b88:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8115b8a:	4b2d      	ldr	r3, [pc, #180]	@ (8115c40 <xTaskResumeAll+0x124>)
 8115b8c:	681b      	ldr	r3, [r3, #0]
 8115b8e:	429a      	cmp	r2, r3
 8115b90:	d903      	bls.n	8115b9a <xTaskResumeAll+0x7e>
 8115b92:	68fb      	ldr	r3, [r7, #12]
 8115b94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8115b96:	4a2a      	ldr	r2, [pc, #168]	@ (8115c40 <xTaskResumeAll+0x124>)
 8115b98:	6013      	str	r3, [r2, #0]
 8115b9a:	68fb      	ldr	r3, [r7, #12]
 8115b9c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8115b9e:	4613      	mov	r3, r2
 8115ba0:	009b      	lsls	r3, r3, #2
 8115ba2:	4413      	add	r3, r2
 8115ba4:	009b      	lsls	r3, r3, #2
 8115ba6:	4a27      	ldr	r2, [pc, #156]	@ (8115c44 <xTaskResumeAll+0x128>)
 8115ba8:	441a      	add	r2, r3
 8115baa:	68fb      	ldr	r3, [r7, #12]
 8115bac:	3304      	adds	r3, #4
 8115bae:	4619      	mov	r1, r3
 8115bb0:	4610      	mov	r0, r2
 8115bb2:	f7fd fd56 	bl	8113662 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8115bb6:	68fb      	ldr	r3, [r7, #12]
 8115bb8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8115bba:	4b23      	ldr	r3, [pc, #140]	@ (8115c48 <xTaskResumeAll+0x12c>)
 8115bbc:	681b      	ldr	r3, [r3, #0]
 8115bbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8115bc0:	429a      	cmp	r2, r3
 8115bc2:	d302      	bcc.n	8115bca <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8115bc4:	4b21      	ldr	r3, [pc, #132]	@ (8115c4c <xTaskResumeAll+0x130>)
 8115bc6:	2201      	movs	r2, #1
 8115bc8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8115bca:	4b1c      	ldr	r3, [pc, #112]	@ (8115c3c <xTaskResumeAll+0x120>)
 8115bcc:	681b      	ldr	r3, [r3, #0]
 8115bce:	2b00      	cmp	r3, #0
 8115bd0:	d1cb      	bne.n	8115b6a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8115bd2:	68fb      	ldr	r3, [r7, #12]
 8115bd4:	2b00      	cmp	r3, #0
 8115bd6:	d001      	beq.n	8115bdc <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8115bd8:	f000 fba0 	bl	811631c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8115bdc:	4b1c      	ldr	r3, [pc, #112]	@ (8115c50 <xTaskResumeAll+0x134>)
 8115bde:	681b      	ldr	r3, [r3, #0]
 8115be0:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8115be2:	687b      	ldr	r3, [r7, #4]
 8115be4:	2b00      	cmp	r3, #0
 8115be6:	d010      	beq.n	8115c0a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8115be8:	f000 f858 	bl	8115c9c <xTaskIncrementTick>
 8115bec:	4603      	mov	r3, r0
 8115bee:	2b00      	cmp	r3, #0
 8115bf0:	d002      	beq.n	8115bf8 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8115bf2:	4b16      	ldr	r3, [pc, #88]	@ (8115c4c <xTaskResumeAll+0x130>)
 8115bf4:	2201      	movs	r2, #1
 8115bf6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8115bf8:	687b      	ldr	r3, [r7, #4]
 8115bfa:	3b01      	subs	r3, #1
 8115bfc:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8115bfe:	687b      	ldr	r3, [r7, #4]
 8115c00:	2b00      	cmp	r3, #0
 8115c02:	d1f1      	bne.n	8115be8 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8115c04:	4b12      	ldr	r3, [pc, #72]	@ (8115c50 <xTaskResumeAll+0x134>)
 8115c06:	2200      	movs	r2, #0
 8115c08:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8115c0a:	4b10      	ldr	r3, [pc, #64]	@ (8115c4c <xTaskResumeAll+0x130>)
 8115c0c:	681b      	ldr	r3, [r3, #0]
 8115c0e:	2b00      	cmp	r3, #0
 8115c10:	d009      	beq.n	8115c26 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8115c12:	2301      	movs	r3, #1
 8115c14:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8115c16:	4b0f      	ldr	r3, [pc, #60]	@ (8115c54 <xTaskResumeAll+0x138>)
 8115c18:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8115c1c:	601a      	str	r2, [r3, #0]
 8115c1e:	f3bf 8f4f 	dsb	sy
 8115c22:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8115c26:	f7fd ff09 	bl	8113a3c <vPortExitCritical>

	return xAlreadyYielded;
 8115c2a:	68bb      	ldr	r3, [r7, #8]
}
 8115c2c:	4618      	mov	r0, r3
 8115c2e:	3710      	adds	r7, #16
 8115c30:	46bd      	mov	sp, r7
 8115c32:	bd80      	pop	{r7, pc}
 8115c34:	1000b0dc 	.word	0x1000b0dc
 8115c38:	1000b0b4 	.word	0x1000b0b4
 8115c3c:	1000b074 	.word	0x1000b074
 8115c40:	1000b0bc 	.word	0x1000b0bc
 8115c44:	1000abe4 	.word	0x1000abe4
 8115c48:	1000abe0 	.word	0x1000abe0
 8115c4c:	1000b0c8 	.word	0x1000b0c8
 8115c50:	1000b0c4 	.word	0x1000b0c4
 8115c54:	e000ed04 	.word	0xe000ed04

08115c58 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8115c58:	b480      	push	{r7}
 8115c5a:	b083      	sub	sp, #12
 8115c5c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8115c5e:	4b05      	ldr	r3, [pc, #20]	@ (8115c74 <xTaskGetTickCount+0x1c>)
 8115c60:	681b      	ldr	r3, [r3, #0]
 8115c62:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8115c64:	687b      	ldr	r3, [r7, #4]
}
 8115c66:	4618      	mov	r0, r3
 8115c68:	370c      	adds	r7, #12
 8115c6a:	46bd      	mov	sp, r7
 8115c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8115c70:	4770      	bx	lr
 8115c72:	bf00      	nop
 8115c74:	1000b0b8 	.word	0x1000b0b8

08115c78 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8115c78:	b580      	push	{r7, lr}
 8115c7a:	b082      	sub	sp, #8
 8115c7c:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8115c7e:	f7fd ff8b 	bl	8113b98 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8115c82:	2300      	movs	r3, #0
 8115c84:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8115c86:	4b04      	ldr	r3, [pc, #16]	@ (8115c98 <xTaskGetTickCountFromISR+0x20>)
 8115c88:	681b      	ldr	r3, [r3, #0]
 8115c8a:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8115c8c:	683b      	ldr	r3, [r7, #0]
}
 8115c8e:	4618      	mov	r0, r3
 8115c90:	3708      	adds	r7, #8
 8115c92:	46bd      	mov	sp, r7
 8115c94:	bd80      	pop	{r7, pc}
 8115c96:	bf00      	nop
 8115c98:	1000b0b8 	.word	0x1000b0b8

08115c9c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8115c9c:	b580      	push	{r7, lr}
 8115c9e:	b086      	sub	sp, #24
 8115ca0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8115ca2:	2300      	movs	r3, #0
 8115ca4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8115ca6:	4b4f      	ldr	r3, [pc, #316]	@ (8115de4 <xTaskIncrementTick+0x148>)
 8115ca8:	681b      	ldr	r3, [r3, #0]
 8115caa:	2b00      	cmp	r3, #0
 8115cac:	f040 8090 	bne.w	8115dd0 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8115cb0:	4b4d      	ldr	r3, [pc, #308]	@ (8115de8 <xTaskIncrementTick+0x14c>)
 8115cb2:	681b      	ldr	r3, [r3, #0]
 8115cb4:	3301      	adds	r3, #1
 8115cb6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8115cb8:	4a4b      	ldr	r2, [pc, #300]	@ (8115de8 <xTaskIncrementTick+0x14c>)
 8115cba:	693b      	ldr	r3, [r7, #16]
 8115cbc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8115cbe:	693b      	ldr	r3, [r7, #16]
 8115cc0:	2b00      	cmp	r3, #0
 8115cc2:	d121      	bne.n	8115d08 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8115cc4:	4b49      	ldr	r3, [pc, #292]	@ (8115dec <xTaskIncrementTick+0x150>)
 8115cc6:	681b      	ldr	r3, [r3, #0]
 8115cc8:	681b      	ldr	r3, [r3, #0]
 8115cca:	2b00      	cmp	r3, #0
 8115ccc:	d00b      	beq.n	8115ce6 <xTaskIncrementTick+0x4a>
	__asm volatile
 8115cce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8115cd2:	f383 8811 	msr	BASEPRI, r3
 8115cd6:	f3bf 8f6f 	isb	sy
 8115cda:	f3bf 8f4f 	dsb	sy
 8115cde:	603b      	str	r3, [r7, #0]
}
 8115ce0:	bf00      	nop
 8115ce2:	bf00      	nop
 8115ce4:	e7fd      	b.n	8115ce2 <xTaskIncrementTick+0x46>
 8115ce6:	4b41      	ldr	r3, [pc, #260]	@ (8115dec <xTaskIncrementTick+0x150>)
 8115ce8:	681b      	ldr	r3, [r3, #0]
 8115cea:	60fb      	str	r3, [r7, #12]
 8115cec:	4b40      	ldr	r3, [pc, #256]	@ (8115df0 <xTaskIncrementTick+0x154>)
 8115cee:	681b      	ldr	r3, [r3, #0]
 8115cf0:	4a3e      	ldr	r2, [pc, #248]	@ (8115dec <xTaskIncrementTick+0x150>)
 8115cf2:	6013      	str	r3, [r2, #0]
 8115cf4:	4a3e      	ldr	r2, [pc, #248]	@ (8115df0 <xTaskIncrementTick+0x154>)
 8115cf6:	68fb      	ldr	r3, [r7, #12]
 8115cf8:	6013      	str	r3, [r2, #0]
 8115cfa:	4b3e      	ldr	r3, [pc, #248]	@ (8115df4 <xTaskIncrementTick+0x158>)
 8115cfc:	681b      	ldr	r3, [r3, #0]
 8115cfe:	3301      	adds	r3, #1
 8115d00:	4a3c      	ldr	r2, [pc, #240]	@ (8115df4 <xTaskIncrementTick+0x158>)
 8115d02:	6013      	str	r3, [r2, #0]
 8115d04:	f000 fb0a 	bl	811631c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8115d08:	4b3b      	ldr	r3, [pc, #236]	@ (8115df8 <xTaskIncrementTick+0x15c>)
 8115d0a:	681b      	ldr	r3, [r3, #0]
 8115d0c:	693a      	ldr	r2, [r7, #16]
 8115d0e:	429a      	cmp	r2, r3
 8115d10:	d349      	bcc.n	8115da6 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8115d12:	4b36      	ldr	r3, [pc, #216]	@ (8115dec <xTaskIncrementTick+0x150>)
 8115d14:	681b      	ldr	r3, [r3, #0]
 8115d16:	681b      	ldr	r3, [r3, #0]
 8115d18:	2b00      	cmp	r3, #0
 8115d1a:	d104      	bne.n	8115d26 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8115d1c:	4b36      	ldr	r3, [pc, #216]	@ (8115df8 <xTaskIncrementTick+0x15c>)
 8115d1e:	f04f 32ff 	mov.w	r2, #4294967295
 8115d22:	601a      	str	r2, [r3, #0]
					break;
 8115d24:	e03f      	b.n	8115da6 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8115d26:	4b31      	ldr	r3, [pc, #196]	@ (8115dec <xTaskIncrementTick+0x150>)
 8115d28:	681b      	ldr	r3, [r3, #0]
 8115d2a:	68db      	ldr	r3, [r3, #12]
 8115d2c:	68db      	ldr	r3, [r3, #12]
 8115d2e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8115d30:	68bb      	ldr	r3, [r7, #8]
 8115d32:	685b      	ldr	r3, [r3, #4]
 8115d34:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8115d36:	693a      	ldr	r2, [r7, #16]
 8115d38:	687b      	ldr	r3, [r7, #4]
 8115d3a:	429a      	cmp	r2, r3
 8115d3c:	d203      	bcs.n	8115d46 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8115d3e:	4a2e      	ldr	r2, [pc, #184]	@ (8115df8 <xTaskIncrementTick+0x15c>)
 8115d40:	687b      	ldr	r3, [r7, #4]
 8115d42:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8115d44:	e02f      	b.n	8115da6 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8115d46:	68bb      	ldr	r3, [r7, #8]
 8115d48:	3304      	adds	r3, #4
 8115d4a:	4618      	mov	r0, r3
 8115d4c:	f7fd fce6 	bl	811371c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8115d50:	68bb      	ldr	r3, [r7, #8]
 8115d52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8115d54:	2b00      	cmp	r3, #0
 8115d56:	d004      	beq.n	8115d62 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8115d58:	68bb      	ldr	r3, [r7, #8]
 8115d5a:	3318      	adds	r3, #24
 8115d5c:	4618      	mov	r0, r3
 8115d5e:	f7fd fcdd 	bl	811371c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8115d62:	68bb      	ldr	r3, [r7, #8]
 8115d64:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8115d66:	4b25      	ldr	r3, [pc, #148]	@ (8115dfc <xTaskIncrementTick+0x160>)
 8115d68:	681b      	ldr	r3, [r3, #0]
 8115d6a:	429a      	cmp	r2, r3
 8115d6c:	d903      	bls.n	8115d76 <xTaskIncrementTick+0xda>
 8115d6e:	68bb      	ldr	r3, [r7, #8]
 8115d70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8115d72:	4a22      	ldr	r2, [pc, #136]	@ (8115dfc <xTaskIncrementTick+0x160>)
 8115d74:	6013      	str	r3, [r2, #0]
 8115d76:	68bb      	ldr	r3, [r7, #8]
 8115d78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8115d7a:	4613      	mov	r3, r2
 8115d7c:	009b      	lsls	r3, r3, #2
 8115d7e:	4413      	add	r3, r2
 8115d80:	009b      	lsls	r3, r3, #2
 8115d82:	4a1f      	ldr	r2, [pc, #124]	@ (8115e00 <xTaskIncrementTick+0x164>)
 8115d84:	441a      	add	r2, r3
 8115d86:	68bb      	ldr	r3, [r7, #8]
 8115d88:	3304      	adds	r3, #4
 8115d8a:	4619      	mov	r1, r3
 8115d8c:	4610      	mov	r0, r2
 8115d8e:	f7fd fc68 	bl	8113662 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8115d92:	68bb      	ldr	r3, [r7, #8]
 8115d94:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8115d96:	4b1b      	ldr	r3, [pc, #108]	@ (8115e04 <xTaskIncrementTick+0x168>)
 8115d98:	681b      	ldr	r3, [r3, #0]
 8115d9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8115d9c:	429a      	cmp	r2, r3
 8115d9e:	d3b8      	bcc.n	8115d12 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8115da0:	2301      	movs	r3, #1
 8115da2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8115da4:	e7b5      	b.n	8115d12 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8115da6:	4b17      	ldr	r3, [pc, #92]	@ (8115e04 <xTaskIncrementTick+0x168>)
 8115da8:	681b      	ldr	r3, [r3, #0]
 8115daa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8115dac:	4914      	ldr	r1, [pc, #80]	@ (8115e00 <xTaskIncrementTick+0x164>)
 8115dae:	4613      	mov	r3, r2
 8115db0:	009b      	lsls	r3, r3, #2
 8115db2:	4413      	add	r3, r2
 8115db4:	009b      	lsls	r3, r3, #2
 8115db6:	440b      	add	r3, r1
 8115db8:	681b      	ldr	r3, [r3, #0]
 8115dba:	2b01      	cmp	r3, #1
 8115dbc:	d901      	bls.n	8115dc2 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8115dbe:	2301      	movs	r3, #1
 8115dc0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8115dc2:	4b11      	ldr	r3, [pc, #68]	@ (8115e08 <xTaskIncrementTick+0x16c>)
 8115dc4:	681b      	ldr	r3, [r3, #0]
 8115dc6:	2b00      	cmp	r3, #0
 8115dc8:	d007      	beq.n	8115dda <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8115dca:	2301      	movs	r3, #1
 8115dcc:	617b      	str	r3, [r7, #20]
 8115dce:	e004      	b.n	8115dda <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8115dd0:	4b0e      	ldr	r3, [pc, #56]	@ (8115e0c <xTaskIncrementTick+0x170>)
 8115dd2:	681b      	ldr	r3, [r3, #0]
 8115dd4:	3301      	adds	r3, #1
 8115dd6:	4a0d      	ldr	r2, [pc, #52]	@ (8115e0c <xTaskIncrementTick+0x170>)
 8115dd8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8115dda:	697b      	ldr	r3, [r7, #20]
}
 8115ddc:	4618      	mov	r0, r3
 8115dde:	3718      	adds	r7, #24
 8115de0:	46bd      	mov	sp, r7
 8115de2:	bd80      	pop	{r7, pc}
 8115de4:	1000b0dc 	.word	0x1000b0dc
 8115de8:	1000b0b8 	.word	0x1000b0b8
 8115dec:	1000b06c 	.word	0x1000b06c
 8115df0:	1000b070 	.word	0x1000b070
 8115df4:	1000b0cc 	.word	0x1000b0cc
 8115df8:	1000b0d4 	.word	0x1000b0d4
 8115dfc:	1000b0bc 	.word	0x1000b0bc
 8115e00:	1000abe4 	.word	0x1000abe4
 8115e04:	1000abe0 	.word	0x1000abe0
 8115e08:	1000b0c8 	.word	0x1000b0c8
 8115e0c:	1000b0c4 	.word	0x1000b0c4

08115e10 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8115e10:	b480      	push	{r7}
 8115e12:	b085      	sub	sp, #20
 8115e14:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8115e16:	4b2b      	ldr	r3, [pc, #172]	@ (8115ec4 <vTaskSwitchContext+0xb4>)
 8115e18:	681b      	ldr	r3, [r3, #0]
 8115e1a:	2b00      	cmp	r3, #0
 8115e1c:	d003      	beq.n	8115e26 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8115e1e:	4b2a      	ldr	r3, [pc, #168]	@ (8115ec8 <vTaskSwitchContext+0xb8>)
 8115e20:	2201      	movs	r2, #1
 8115e22:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8115e24:	e047      	b.n	8115eb6 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8115e26:	4b28      	ldr	r3, [pc, #160]	@ (8115ec8 <vTaskSwitchContext+0xb8>)
 8115e28:	2200      	movs	r2, #0
 8115e2a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8115e2c:	4b27      	ldr	r3, [pc, #156]	@ (8115ecc <vTaskSwitchContext+0xbc>)
 8115e2e:	681b      	ldr	r3, [r3, #0]
 8115e30:	60fb      	str	r3, [r7, #12]
 8115e32:	e011      	b.n	8115e58 <vTaskSwitchContext+0x48>
 8115e34:	68fb      	ldr	r3, [r7, #12]
 8115e36:	2b00      	cmp	r3, #0
 8115e38:	d10b      	bne.n	8115e52 <vTaskSwitchContext+0x42>
	__asm volatile
 8115e3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8115e3e:	f383 8811 	msr	BASEPRI, r3
 8115e42:	f3bf 8f6f 	isb	sy
 8115e46:	f3bf 8f4f 	dsb	sy
 8115e4a:	607b      	str	r3, [r7, #4]
}
 8115e4c:	bf00      	nop
 8115e4e:	bf00      	nop
 8115e50:	e7fd      	b.n	8115e4e <vTaskSwitchContext+0x3e>
 8115e52:	68fb      	ldr	r3, [r7, #12]
 8115e54:	3b01      	subs	r3, #1
 8115e56:	60fb      	str	r3, [r7, #12]
 8115e58:	491d      	ldr	r1, [pc, #116]	@ (8115ed0 <vTaskSwitchContext+0xc0>)
 8115e5a:	68fa      	ldr	r2, [r7, #12]
 8115e5c:	4613      	mov	r3, r2
 8115e5e:	009b      	lsls	r3, r3, #2
 8115e60:	4413      	add	r3, r2
 8115e62:	009b      	lsls	r3, r3, #2
 8115e64:	440b      	add	r3, r1
 8115e66:	681b      	ldr	r3, [r3, #0]
 8115e68:	2b00      	cmp	r3, #0
 8115e6a:	d0e3      	beq.n	8115e34 <vTaskSwitchContext+0x24>
 8115e6c:	68fa      	ldr	r2, [r7, #12]
 8115e6e:	4613      	mov	r3, r2
 8115e70:	009b      	lsls	r3, r3, #2
 8115e72:	4413      	add	r3, r2
 8115e74:	009b      	lsls	r3, r3, #2
 8115e76:	4a16      	ldr	r2, [pc, #88]	@ (8115ed0 <vTaskSwitchContext+0xc0>)
 8115e78:	4413      	add	r3, r2
 8115e7a:	60bb      	str	r3, [r7, #8]
 8115e7c:	68bb      	ldr	r3, [r7, #8]
 8115e7e:	685b      	ldr	r3, [r3, #4]
 8115e80:	685a      	ldr	r2, [r3, #4]
 8115e82:	68bb      	ldr	r3, [r7, #8]
 8115e84:	605a      	str	r2, [r3, #4]
 8115e86:	68bb      	ldr	r3, [r7, #8]
 8115e88:	685a      	ldr	r2, [r3, #4]
 8115e8a:	68bb      	ldr	r3, [r7, #8]
 8115e8c:	3308      	adds	r3, #8
 8115e8e:	429a      	cmp	r2, r3
 8115e90:	d104      	bne.n	8115e9c <vTaskSwitchContext+0x8c>
 8115e92:	68bb      	ldr	r3, [r7, #8]
 8115e94:	685b      	ldr	r3, [r3, #4]
 8115e96:	685a      	ldr	r2, [r3, #4]
 8115e98:	68bb      	ldr	r3, [r7, #8]
 8115e9a:	605a      	str	r2, [r3, #4]
 8115e9c:	68bb      	ldr	r3, [r7, #8]
 8115e9e:	685b      	ldr	r3, [r3, #4]
 8115ea0:	68db      	ldr	r3, [r3, #12]
 8115ea2:	4a0c      	ldr	r2, [pc, #48]	@ (8115ed4 <vTaskSwitchContext+0xc4>)
 8115ea4:	6013      	str	r3, [r2, #0]
 8115ea6:	4a09      	ldr	r2, [pc, #36]	@ (8115ecc <vTaskSwitchContext+0xbc>)
 8115ea8:	68fb      	ldr	r3, [r7, #12]
 8115eaa:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8115eac:	4b09      	ldr	r3, [pc, #36]	@ (8115ed4 <vTaskSwitchContext+0xc4>)
 8115eae:	681b      	ldr	r3, [r3, #0]
 8115eb0:	3354      	adds	r3, #84	@ 0x54
 8115eb2:	4a09      	ldr	r2, [pc, #36]	@ (8115ed8 <vTaskSwitchContext+0xc8>)
 8115eb4:	6013      	str	r3, [r2, #0]
}
 8115eb6:	bf00      	nop
 8115eb8:	3714      	adds	r7, #20
 8115eba:	46bd      	mov	sp, r7
 8115ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8115ec0:	4770      	bx	lr
 8115ec2:	bf00      	nop
 8115ec4:	1000b0dc 	.word	0x1000b0dc
 8115ec8:	1000b0c8 	.word	0x1000b0c8
 8115ecc:	1000b0bc 	.word	0x1000b0bc
 8115ed0:	1000abe4 	.word	0x1000abe4
 8115ed4:	1000abe0 	.word	0x1000abe0
 8115ed8:	10000040 	.word	0x10000040

08115edc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8115edc:	b580      	push	{r7, lr}
 8115ede:	b084      	sub	sp, #16
 8115ee0:	af00      	add	r7, sp, #0
 8115ee2:	6078      	str	r0, [r7, #4]
 8115ee4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8115ee6:	687b      	ldr	r3, [r7, #4]
 8115ee8:	2b00      	cmp	r3, #0
 8115eea:	d10b      	bne.n	8115f04 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8115eec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8115ef0:	f383 8811 	msr	BASEPRI, r3
 8115ef4:	f3bf 8f6f 	isb	sy
 8115ef8:	f3bf 8f4f 	dsb	sy
 8115efc:	60fb      	str	r3, [r7, #12]
}
 8115efe:	bf00      	nop
 8115f00:	bf00      	nop
 8115f02:	e7fd      	b.n	8115f00 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8115f04:	4b07      	ldr	r3, [pc, #28]	@ (8115f24 <vTaskPlaceOnEventList+0x48>)
 8115f06:	681b      	ldr	r3, [r3, #0]
 8115f08:	3318      	adds	r3, #24
 8115f0a:	4619      	mov	r1, r3
 8115f0c:	6878      	ldr	r0, [r7, #4]
 8115f0e:	f7fd fbcc 	bl	81136aa <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8115f12:	2101      	movs	r1, #1
 8115f14:	6838      	ldr	r0, [r7, #0]
 8115f16:	f000 fd2b 	bl	8116970 <prvAddCurrentTaskToDelayedList>
}
 8115f1a:	bf00      	nop
 8115f1c:	3710      	adds	r7, #16
 8115f1e:	46bd      	mov	sp, r7
 8115f20:	bd80      	pop	{r7, pc}
 8115f22:	bf00      	nop
 8115f24:	1000abe0 	.word	0x1000abe0

08115f28 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8115f28:	b580      	push	{r7, lr}
 8115f2a:	b086      	sub	sp, #24
 8115f2c:	af00      	add	r7, sp, #0
 8115f2e:	60f8      	str	r0, [r7, #12]
 8115f30:	60b9      	str	r1, [r7, #8]
 8115f32:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8115f34:	68fb      	ldr	r3, [r7, #12]
 8115f36:	2b00      	cmp	r3, #0
 8115f38:	d10b      	bne.n	8115f52 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8115f3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8115f3e:	f383 8811 	msr	BASEPRI, r3
 8115f42:	f3bf 8f6f 	isb	sy
 8115f46:	f3bf 8f4f 	dsb	sy
 8115f4a:	617b      	str	r3, [r7, #20]
}
 8115f4c:	bf00      	nop
 8115f4e:	bf00      	nop
 8115f50:	e7fd      	b.n	8115f4e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8115f52:	4b0a      	ldr	r3, [pc, #40]	@ (8115f7c <vTaskPlaceOnEventListRestricted+0x54>)
 8115f54:	681b      	ldr	r3, [r3, #0]
 8115f56:	3318      	adds	r3, #24
 8115f58:	4619      	mov	r1, r3
 8115f5a:	68f8      	ldr	r0, [r7, #12]
 8115f5c:	f7fd fb81 	bl	8113662 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8115f60:	687b      	ldr	r3, [r7, #4]
 8115f62:	2b00      	cmp	r3, #0
 8115f64:	d002      	beq.n	8115f6c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8115f66:	f04f 33ff 	mov.w	r3, #4294967295
 8115f6a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8115f6c:	6879      	ldr	r1, [r7, #4]
 8115f6e:	68b8      	ldr	r0, [r7, #8]
 8115f70:	f000 fcfe 	bl	8116970 <prvAddCurrentTaskToDelayedList>
	}
 8115f74:	bf00      	nop
 8115f76:	3718      	adds	r7, #24
 8115f78:	46bd      	mov	sp, r7
 8115f7a:	bd80      	pop	{r7, pc}
 8115f7c:	1000abe0 	.word	0x1000abe0

08115f80 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8115f80:	b580      	push	{r7, lr}
 8115f82:	b086      	sub	sp, #24
 8115f84:	af00      	add	r7, sp, #0
 8115f86:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8115f88:	687b      	ldr	r3, [r7, #4]
 8115f8a:	68db      	ldr	r3, [r3, #12]
 8115f8c:	68db      	ldr	r3, [r3, #12]
 8115f8e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8115f90:	693b      	ldr	r3, [r7, #16]
 8115f92:	2b00      	cmp	r3, #0
 8115f94:	d10b      	bne.n	8115fae <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8115f96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8115f9a:	f383 8811 	msr	BASEPRI, r3
 8115f9e:	f3bf 8f6f 	isb	sy
 8115fa2:	f3bf 8f4f 	dsb	sy
 8115fa6:	60fb      	str	r3, [r7, #12]
}
 8115fa8:	bf00      	nop
 8115faa:	bf00      	nop
 8115fac:	e7fd      	b.n	8115faa <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8115fae:	693b      	ldr	r3, [r7, #16]
 8115fb0:	3318      	adds	r3, #24
 8115fb2:	4618      	mov	r0, r3
 8115fb4:	f7fd fbb2 	bl	811371c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8115fb8:	4b1d      	ldr	r3, [pc, #116]	@ (8116030 <xTaskRemoveFromEventList+0xb0>)
 8115fba:	681b      	ldr	r3, [r3, #0]
 8115fbc:	2b00      	cmp	r3, #0
 8115fbe:	d11d      	bne.n	8115ffc <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8115fc0:	693b      	ldr	r3, [r7, #16]
 8115fc2:	3304      	adds	r3, #4
 8115fc4:	4618      	mov	r0, r3
 8115fc6:	f7fd fba9 	bl	811371c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8115fca:	693b      	ldr	r3, [r7, #16]
 8115fcc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8115fce:	4b19      	ldr	r3, [pc, #100]	@ (8116034 <xTaskRemoveFromEventList+0xb4>)
 8115fd0:	681b      	ldr	r3, [r3, #0]
 8115fd2:	429a      	cmp	r2, r3
 8115fd4:	d903      	bls.n	8115fde <xTaskRemoveFromEventList+0x5e>
 8115fd6:	693b      	ldr	r3, [r7, #16]
 8115fd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8115fda:	4a16      	ldr	r2, [pc, #88]	@ (8116034 <xTaskRemoveFromEventList+0xb4>)
 8115fdc:	6013      	str	r3, [r2, #0]
 8115fde:	693b      	ldr	r3, [r7, #16]
 8115fe0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8115fe2:	4613      	mov	r3, r2
 8115fe4:	009b      	lsls	r3, r3, #2
 8115fe6:	4413      	add	r3, r2
 8115fe8:	009b      	lsls	r3, r3, #2
 8115fea:	4a13      	ldr	r2, [pc, #76]	@ (8116038 <xTaskRemoveFromEventList+0xb8>)
 8115fec:	441a      	add	r2, r3
 8115fee:	693b      	ldr	r3, [r7, #16]
 8115ff0:	3304      	adds	r3, #4
 8115ff2:	4619      	mov	r1, r3
 8115ff4:	4610      	mov	r0, r2
 8115ff6:	f7fd fb34 	bl	8113662 <vListInsertEnd>
 8115ffa:	e005      	b.n	8116008 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8115ffc:	693b      	ldr	r3, [r7, #16]
 8115ffe:	3318      	adds	r3, #24
 8116000:	4619      	mov	r1, r3
 8116002:	480e      	ldr	r0, [pc, #56]	@ (811603c <xTaskRemoveFromEventList+0xbc>)
 8116004:	f7fd fb2d 	bl	8113662 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8116008:	693b      	ldr	r3, [r7, #16]
 811600a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 811600c:	4b0c      	ldr	r3, [pc, #48]	@ (8116040 <xTaskRemoveFromEventList+0xc0>)
 811600e:	681b      	ldr	r3, [r3, #0]
 8116010:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8116012:	429a      	cmp	r2, r3
 8116014:	d905      	bls.n	8116022 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8116016:	2301      	movs	r3, #1
 8116018:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 811601a:	4b0a      	ldr	r3, [pc, #40]	@ (8116044 <xTaskRemoveFromEventList+0xc4>)
 811601c:	2201      	movs	r2, #1
 811601e:	601a      	str	r2, [r3, #0]
 8116020:	e001      	b.n	8116026 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8116022:	2300      	movs	r3, #0
 8116024:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8116026:	697b      	ldr	r3, [r7, #20]
}
 8116028:	4618      	mov	r0, r3
 811602a:	3718      	adds	r7, #24
 811602c:	46bd      	mov	sp, r7
 811602e:	bd80      	pop	{r7, pc}
 8116030:	1000b0dc 	.word	0x1000b0dc
 8116034:	1000b0bc 	.word	0x1000b0bc
 8116038:	1000abe4 	.word	0x1000abe4
 811603c:	1000b074 	.word	0x1000b074
 8116040:	1000abe0 	.word	0x1000abe0
 8116044:	1000b0c8 	.word	0x1000b0c8

08116048 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8116048:	b580      	push	{r7, lr}
 811604a:	b084      	sub	sp, #16
 811604c:	af00      	add	r7, sp, #0
 811604e:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 8116050:	687b      	ldr	r3, [r7, #4]
 8116052:	2b00      	cmp	r3, #0
 8116054:	d10b      	bne.n	811606e <vTaskSetTimeOutState+0x26>
	__asm volatile
 8116056:	f04f 0350 	mov.w	r3, #80	@ 0x50
 811605a:	f383 8811 	msr	BASEPRI, r3
 811605e:	f3bf 8f6f 	isb	sy
 8116062:	f3bf 8f4f 	dsb	sy
 8116066:	60fb      	str	r3, [r7, #12]
}
 8116068:	bf00      	nop
 811606a:	bf00      	nop
 811606c:	e7fd      	b.n	811606a <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 811606e:	f7fd fcb3 	bl	81139d8 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 8116072:	4b07      	ldr	r3, [pc, #28]	@ (8116090 <vTaskSetTimeOutState+0x48>)
 8116074:	681a      	ldr	r2, [r3, #0]
 8116076:	687b      	ldr	r3, [r7, #4]
 8116078:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 811607a:	4b06      	ldr	r3, [pc, #24]	@ (8116094 <vTaskSetTimeOutState+0x4c>)
 811607c:	681a      	ldr	r2, [r3, #0]
 811607e:	687b      	ldr	r3, [r7, #4]
 8116080:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 8116082:	f7fd fcdb 	bl	8113a3c <vPortExitCritical>
}
 8116086:	bf00      	nop
 8116088:	3710      	adds	r7, #16
 811608a:	46bd      	mov	sp, r7
 811608c:	bd80      	pop	{r7, pc}
 811608e:	bf00      	nop
 8116090:	1000b0cc 	.word	0x1000b0cc
 8116094:	1000b0b8 	.word	0x1000b0b8

08116098 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8116098:	b480      	push	{r7}
 811609a:	b083      	sub	sp, #12
 811609c:	af00      	add	r7, sp, #0
 811609e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 81160a0:	4b06      	ldr	r3, [pc, #24]	@ (81160bc <vTaskInternalSetTimeOutState+0x24>)
 81160a2:	681a      	ldr	r2, [r3, #0]
 81160a4:	687b      	ldr	r3, [r7, #4]
 81160a6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 81160a8:	4b05      	ldr	r3, [pc, #20]	@ (81160c0 <vTaskInternalSetTimeOutState+0x28>)
 81160aa:	681a      	ldr	r2, [r3, #0]
 81160ac:	687b      	ldr	r3, [r7, #4]
 81160ae:	605a      	str	r2, [r3, #4]
}
 81160b0:	bf00      	nop
 81160b2:	370c      	adds	r7, #12
 81160b4:	46bd      	mov	sp, r7
 81160b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81160ba:	4770      	bx	lr
 81160bc:	1000b0cc 	.word	0x1000b0cc
 81160c0:	1000b0b8 	.word	0x1000b0b8

081160c4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 81160c4:	b580      	push	{r7, lr}
 81160c6:	b088      	sub	sp, #32
 81160c8:	af00      	add	r7, sp, #0
 81160ca:	6078      	str	r0, [r7, #4]
 81160cc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 81160ce:	687b      	ldr	r3, [r7, #4]
 81160d0:	2b00      	cmp	r3, #0
 81160d2:	d10b      	bne.n	81160ec <xTaskCheckForTimeOut+0x28>
	__asm volatile
 81160d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81160d8:	f383 8811 	msr	BASEPRI, r3
 81160dc:	f3bf 8f6f 	isb	sy
 81160e0:	f3bf 8f4f 	dsb	sy
 81160e4:	613b      	str	r3, [r7, #16]
}
 81160e6:	bf00      	nop
 81160e8:	bf00      	nop
 81160ea:	e7fd      	b.n	81160e8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 81160ec:	683b      	ldr	r3, [r7, #0]
 81160ee:	2b00      	cmp	r3, #0
 81160f0:	d10b      	bne.n	811610a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 81160f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81160f6:	f383 8811 	msr	BASEPRI, r3
 81160fa:	f3bf 8f6f 	isb	sy
 81160fe:	f3bf 8f4f 	dsb	sy
 8116102:	60fb      	str	r3, [r7, #12]
}
 8116104:	bf00      	nop
 8116106:	bf00      	nop
 8116108:	e7fd      	b.n	8116106 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 811610a:	f7fd fc65 	bl	81139d8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 811610e:	4b1d      	ldr	r3, [pc, #116]	@ (8116184 <xTaskCheckForTimeOut+0xc0>)
 8116110:	681b      	ldr	r3, [r3, #0]
 8116112:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8116114:	687b      	ldr	r3, [r7, #4]
 8116116:	685b      	ldr	r3, [r3, #4]
 8116118:	69ba      	ldr	r2, [r7, #24]
 811611a:	1ad3      	subs	r3, r2, r3
 811611c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 811611e:	683b      	ldr	r3, [r7, #0]
 8116120:	681b      	ldr	r3, [r3, #0]
 8116122:	f1b3 3fff 	cmp.w	r3, #4294967295
 8116126:	d102      	bne.n	811612e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8116128:	2300      	movs	r3, #0
 811612a:	61fb      	str	r3, [r7, #28]
 811612c:	e023      	b.n	8116176 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 811612e:	687b      	ldr	r3, [r7, #4]
 8116130:	681a      	ldr	r2, [r3, #0]
 8116132:	4b15      	ldr	r3, [pc, #84]	@ (8116188 <xTaskCheckForTimeOut+0xc4>)
 8116134:	681b      	ldr	r3, [r3, #0]
 8116136:	429a      	cmp	r2, r3
 8116138:	d007      	beq.n	811614a <xTaskCheckForTimeOut+0x86>
 811613a:	687b      	ldr	r3, [r7, #4]
 811613c:	685b      	ldr	r3, [r3, #4]
 811613e:	69ba      	ldr	r2, [r7, #24]
 8116140:	429a      	cmp	r2, r3
 8116142:	d302      	bcc.n	811614a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8116144:	2301      	movs	r3, #1
 8116146:	61fb      	str	r3, [r7, #28]
 8116148:	e015      	b.n	8116176 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 811614a:	683b      	ldr	r3, [r7, #0]
 811614c:	681b      	ldr	r3, [r3, #0]
 811614e:	697a      	ldr	r2, [r7, #20]
 8116150:	429a      	cmp	r2, r3
 8116152:	d20b      	bcs.n	811616c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8116154:	683b      	ldr	r3, [r7, #0]
 8116156:	681a      	ldr	r2, [r3, #0]
 8116158:	697b      	ldr	r3, [r7, #20]
 811615a:	1ad2      	subs	r2, r2, r3
 811615c:	683b      	ldr	r3, [r7, #0]
 811615e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8116160:	6878      	ldr	r0, [r7, #4]
 8116162:	f7ff ff99 	bl	8116098 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8116166:	2300      	movs	r3, #0
 8116168:	61fb      	str	r3, [r7, #28]
 811616a:	e004      	b.n	8116176 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 811616c:	683b      	ldr	r3, [r7, #0]
 811616e:	2200      	movs	r2, #0
 8116170:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8116172:	2301      	movs	r3, #1
 8116174:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8116176:	f7fd fc61 	bl	8113a3c <vPortExitCritical>

	return xReturn;
 811617a:	69fb      	ldr	r3, [r7, #28]
}
 811617c:	4618      	mov	r0, r3
 811617e:	3720      	adds	r7, #32
 8116180:	46bd      	mov	sp, r7
 8116182:	bd80      	pop	{r7, pc}
 8116184:	1000b0b8 	.word	0x1000b0b8
 8116188:	1000b0cc 	.word	0x1000b0cc

0811618c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 811618c:	b480      	push	{r7}
 811618e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8116190:	4b03      	ldr	r3, [pc, #12]	@ (81161a0 <vTaskMissedYield+0x14>)
 8116192:	2201      	movs	r2, #1
 8116194:	601a      	str	r2, [r3, #0]
}
 8116196:	bf00      	nop
 8116198:	46bd      	mov	sp, r7
 811619a:	f85d 7b04 	ldr.w	r7, [sp], #4
 811619e:	4770      	bx	lr
 81161a0:	1000b0c8 	.word	0x1000b0c8

081161a4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 81161a4:	b580      	push	{r7, lr}
 81161a6:	b082      	sub	sp, #8
 81161a8:	af00      	add	r7, sp, #0
 81161aa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 81161ac:	f000 f852 	bl	8116254 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 81161b0:	4b06      	ldr	r3, [pc, #24]	@ (81161cc <prvIdleTask+0x28>)
 81161b2:	681b      	ldr	r3, [r3, #0]
 81161b4:	2b01      	cmp	r3, #1
 81161b6:	d9f9      	bls.n	81161ac <prvIdleTask+0x8>
			{
				taskYIELD();
 81161b8:	4b05      	ldr	r3, [pc, #20]	@ (81161d0 <prvIdleTask+0x2c>)
 81161ba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 81161be:	601a      	str	r2, [r3, #0]
 81161c0:	f3bf 8f4f 	dsb	sy
 81161c4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 81161c8:	e7f0      	b.n	81161ac <prvIdleTask+0x8>
 81161ca:	bf00      	nop
 81161cc:	1000abe4 	.word	0x1000abe4
 81161d0:	e000ed04 	.word	0xe000ed04

081161d4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 81161d4:	b580      	push	{r7, lr}
 81161d6:	b082      	sub	sp, #8
 81161d8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 81161da:	2300      	movs	r3, #0
 81161dc:	607b      	str	r3, [r7, #4]
 81161de:	e00c      	b.n	81161fa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 81161e0:	687a      	ldr	r2, [r7, #4]
 81161e2:	4613      	mov	r3, r2
 81161e4:	009b      	lsls	r3, r3, #2
 81161e6:	4413      	add	r3, r2
 81161e8:	009b      	lsls	r3, r3, #2
 81161ea:	4a12      	ldr	r2, [pc, #72]	@ (8116234 <prvInitialiseTaskLists+0x60>)
 81161ec:	4413      	add	r3, r2
 81161ee:	4618      	mov	r0, r3
 81161f0:	f7fd fa0a 	bl	8113608 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 81161f4:	687b      	ldr	r3, [r7, #4]
 81161f6:	3301      	adds	r3, #1
 81161f8:	607b      	str	r3, [r7, #4]
 81161fa:	687b      	ldr	r3, [r7, #4]
 81161fc:	2b37      	cmp	r3, #55	@ 0x37
 81161fe:	d9ef      	bls.n	81161e0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8116200:	480d      	ldr	r0, [pc, #52]	@ (8116238 <prvInitialiseTaskLists+0x64>)
 8116202:	f7fd fa01 	bl	8113608 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8116206:	480d      	ldr	r0, [pc, #52]	@ (811623c <prvInitialiseTaskLists+0x68>)
 8116208:	f7fd f9fe 	bl	8113608 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 811620c:	480c      	ldr	r0, [pc, #48]	@ (8116240 <prvInitialiseTaskLists+0x6c>)
 811620e:	f7fd f9fb 	bl	8113608 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8116212:	480c      	ldr	r0, [pc, #48]	@ (8116244 <prvInitialiseTaskLists+0x70>)
 8116214:	f7fd f9f8 	bl	8113608 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8116218:	480b      	ldr	r0, [pc, #44]	@ (8116248 <prvInitialiseTaskLists+0x74>)
 811621a:	f7fd f9f5 	bl	8113608 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 811621e:	4b0b      	ldr	r3, [pc, #44]	@ (811624c <prvInitialiseTaskLists+0x78>)
 8116220:	4a05      	ldr	r2, [pc, #20]	@ (8116238 <prvInitialiseTaskLists+0x64>)
 8116222:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8116224:	4b0a      	ldr	r3, [pc, #40]	@ (8116250 <prvInitialiseTaskLists+0x7c>)
 8116226:	4a05      	ldr	r2, [pc, #20]	@ (811623c <prvInitialiseTaskLists+0x68>)
 8116228:	601a      	str	r2, [r3, #0]
}
 811622a:	bf00      	nop
 811622c:	3708      	adds	r7, #8
 811622e:	46bd      	mov	sp, r7
 8116230:	bd80      	pop	{r7, pc}
 8116232:	bf00      	nop
 8116234:	1000abe4 	.word	0x1000abe4
 8116238:	1000b044 	.word	0x1000b044
 811623c:	1000b058 	.word	0x1000b058
 8116240:	1000b074 	.word	0x1000b074
 8116244:	1000b088 	.word	0x1000b088
 8116248:	1000b0a0 	.word	0x1000b0a0
 811624c:	1000b06c 	.word	0x1000b06c
 8116250:	1000b070 	.word	0x1000b070

08116254 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8116254:	b580      	push	{r7, lr}
 8116256:	b082      	sub	sp, #8
 8116258:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 811625a:	e019      	b.n	8116290 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 811625c:	f7fd fbbc 	bl	81139d8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8116260:	4b10      	ldr	r3, [pc, #64]	@ (81162a4 <prvCheckTasksWaitingTermination+0x50>)
 8116262:	68db      	ldr	r3, [r3, #12]
 8116264:	68db      	ldr	r3, [r3, #12]
 8116266:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8116268:	687b      	ldr	r3, [r7, #4]
 811626a:	3304      	adds	r3, #4
 811626c:	4618      	mov	r0, r3
 811626e:	f7fd fa55 	bl	811371c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8116272:	4b0d      	ldr	r3, [pc, #52]	@ (81162a8 <prvCheckTasksWaitingTermination+0x54>)
 8116274:	681b      	ldr	r3, [r3, #0]
 8116276:	3b01      	subs	r3, #1
 8116278:	4a0b      	ldr	r2, [pc, #44]	@ (81162a8 <prvCheckTasksWaitingTermination+0x54>)
 811627a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 811627c:	4b0b      	ldr	r3, [pc, #44]	@ (81162ac <prvCheckTasksWaitingTermination+0x58>)
 811627e:	681b      	ldr	r3, [r3, #0]
 8116280:	3b01      	subs	r3, #1
 8116282:	4a0a      	ldr	r2, [pc, #40]	@ (81162ac <prvCheckTasksWaitingTermination+0x58>)
 8116284:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8116286:	f7fd fbd9 	bl	8113a3c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 811628a:	6878      	ldr	r0, [r7, #4]
 811628c:	f000 f810 	bl	81162b0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8116290:	4b06      	ldr	r3, [pc, #24]	@ (81162ac <prvCheckTasksWaitingTermination+0x58>)
 8116292:	681b      	ldr	r3, [r3, #0]
 8116294:	2b00      	cmp	r3, #0
 8116296:	d1e1      	bne.n	811625c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8116298:	bf00      	nop
 811629a:	bf00      	nop
 811629c:	3708      	adds	r7, #8
 811629e:	46bd      	mov	sp, r7
 81162a0:	bd80      	pop	{r7, pc}
 81162a2:	bf00      	nop
 81162a4:	1000b088 	.word	0x1000b088
 81162a8:	1000b0b4 	.word	0x1000b0b4
 81162ac:	1000b09c 	.word	0x1000b09c

081162b0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 81162b0:	b580      	push	{r7, lr}
 81162b2:	b084      	sub	sp, #16
 81162b4:	af00      	add	r7, sp, #0
 81162b6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 81162b8:	687b      	ldr	r3, [r7, #4]
 81162ba:	3354      	adds	r3, #84	@ 0x54
 81162bc:	4618      	mov	r0, r3
 81162be:	f00d fe5f 	bl	8123f80 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 81162c2:	687b      	ldr	r3, [r7, #4]
 81162c4:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 81162c8:	2b00      	cmp	r3, #0
 81162ca:	d108      	bne.n	81162de <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 81162cc:	687b      	ldr	r3, [r7, #4]
 81162ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 81162d0:	4618      	mov	r0, r3
 81162d2:	f7fd f879 	bl	81133c8 <vPortFree>
				vPortFree( pxTCB );
 81162d6:	6878      	ldr	r0, [r7, #4]
 81162d8:	f7fd f876 	bl	81133c8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 81162dc:	e019      	b.n	8116312 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 81162de:	687b      	ldr	r3, [r7, #4]
 81162e0:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 81162e4:	2b01      	cmp	r3, #1
 81162e6:	d103      	bne.n	81162f0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 81162e8:	6878      	ldr	r0, [r7, #4]
 81162ea:	f7fd f86d 	bl	81133c8 <vPortFree>
	}
 81162ee:	e010      	b.n	8116312 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 81162f0:	687b      	ldr	r3, [r7, #4]
 81162f2:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 81162f6:	2b02      	cmp	r3, #2
 81162f8:	d00b      	beq.n	8116312 <prvDeleteTCB+0x62>
	__asm volatile
 81162fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81162fe:	f383 8811 	msr	BASEPRI, r3
 8116302:	f3bf 8f6f 	isb	sy
 8116306:	f3bf 8f4f 	dsb	sy
 811630a:	60fb      	str	r3, [r7, #12]
}
 811630c:	bf00      	nop
 811630e:	bf00      	nop
 8116310:	e7fd      	b.n	811630e <prvDeleteTCB+0x5e>
	}
 8116312:	bf00      	nop
 8116314:	3710      	adds	r7, #16
 8116316:	46bd      	mov	sp, r7
 8116318:	bd80      	pop	{r7, pc}
	...

0811631c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 811631c:	b480      	push	{r7}
 811631e:	b083      	sub	sp, #12
 8116320:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8116322:	4b0c      	ldr	r3, [pc, #48]	@ (8116354 <prvResetNextTaskUnblockTime+0x38>)
 8116324:	681b      	ldr	r3, [r3, #0]
 8116326:	681b      	ldr	r3, [r3, #0]
 8116328:	2b00      	cmp	r3, #0
 811632a:	d104      	bne.n	8116336 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 811632c:	4b0a      	ldr	r3, [pc, #40]	@ (8116358 <prvResetNextTaskUnblockTime+0x3c>)
 811632e:	f04f 32ff 	mov.w	r2, #4294967295
 8116332:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8116334:	e008      	b.n	8116348 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8116336:	4b07      	ldr	r3, [pc, #28]	@ (8116354 <prvResetNextTaskUnblockTime+0x38>)
 8116338:	681b      	ldr	r3, [r3, #0]
 811633a:	68db      	ldr	r3, [r3, #12]
 811633c:	68db      	ldr	r3, [r3, #12]
 811633e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8116340:	687b      	ldr	r3, [r7, #4]
 8116342:	685b      	ldr	r3, [r3, #4]
 8116344:	4a04      	ldr	r2, [pc, #16]	@ (8116358 <prvResetNextTaskUnblockTime+0x3c>)
 8116346:	6013      	str	r3, [r2, #0]
}
 8116348:	bf00      	nop
 811634a:	370c      	adds	r7, #12
 811634c:	46bd      	mov	sp, r7
 811634e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8116352:	4770      	bx	lr
 8116354:	1000b06c 	.word	0x1000b06c
 8116358:	1000b0d4 	.word	0x1000b0d4

0811635c <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 811635c:	b480      	push	{r7}
 811635e:	b083      	sub	sp, #12
 8116360:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8116362:	4b05      	ldr	r3, [pc, #20]	@ (8116378 <xTaskGetCurrentTaskHandle+0x1c>)
 8116364:	681b      	ldr	r3, [r3, #0]
 8116366:	607b      	str	r3, [r7, #4]

		return xReturn;
 8116368:	687b      	ldr	r3, [r7, #4]
	}
 811636a:	4618      	mov	r0, r3
 811636c:	370c      	adds	r7, #12
 811636e:	46bd      	mov	sp, r7
 8116370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8116374:	4770      	bx	lr
 8116376:	bf00      	nop
 8116378:	1000abe0 	.word	0x1000abe0

0811637c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 811637c:	b480      	push	{r7}
 811637e:	b083      	sub	sp, #12
 8116380:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8116382:	4b0b      	ldr	r3, [pc, #44]	@ (81163b0 <xTaskGetSchedulerState+0x34>)
 8116384:	681b      	ldr	r3, [r3, #0]
 8116386:	2b00      	cmp	r3, #0
 8116388:	d102      	bne.n	8116390 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 811638a:	2301      	movs	r3, #1
 811638c:	607b      	str	r3, [r7, #4]
 811638e:	e008      	b.n	81163a2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8116390:	4b08      	ldr	r3, [pc, #32]	@ (81163b4 <xTaskGetSchedulerState+0x38>)
 8116392:	681b      	ldr	r3, [r3, #0]
 8116394:	2b00      	cmp	r3, #0
 8116396:	d102      	bne.n	811639e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8116398:	2302      	movs	r3, #2
 811639a:	607b      	str	r3, [r7, #4]
 811639c:	e001      	b.n	81163a2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 811639e:	2300      	movs	r3, #0
 81163a0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 81163a2:	687b      	ldr	r3, [r7, #4]
	}
 81163a4:	4618      	mov	r0, r3
 81163a6:	370c      	adds	r7, #12
 81163a8:	46bd      	mov	sp, r7
 81163aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 81163ae:	4770      	bx	lr
 81163b0:	1000b0c0 	.word	0x1000b0c0
 81163b4:	1000b0dc 	.word	0x1000b0dc

081163b8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 81163b8:	b580      	push	{r7, lr}
 81163ba:	b084      	sub	sp, #16
 81163bc:	af00      	add	r7, sp, #0
 81163be:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 81163c0:	687b      	ldr	r3, [r7, #4]
 81163c2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 81163c4:	2300      	movs	r3, #0
 81163c6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 81163c8:	687b      	ldr	r3, [r7, #4]
 81163ca:	2b00      	cmp	r3, #0
 81163cc:	d051      	beq.n	8116472 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 81163ce:	68bb      	ldr	r3, [r7, #8]
 81163d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 81163d2:	4b2a      	ldr	r3, [pc, #168]	@ (811647c <xTaskPriorityInherit+0xc4>)
 81163d4:	681b      	ldr	r3, [r3, #0]
 81163d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81163d8:	429a      	cmp	r2, r3
 81163da:	d241      	bcs.n	8116460 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 81163dc:	68bb      	ldr	r3, [r7, #8]
 81163de:	699b      	ldr	r3, [r3, #24]
 81163e0:	2b00      	cmp	r3, #0
 81163e2:	db06      	blt.n	81163f2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 81163e4:	4b25      	ldr	r3, [pc, #148]	@ (811647c <xTaskPriorityInherit+0xc4>)
 81163e6:	681b      	ldr	r3, [r3, #0]
 81163e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81163ea:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 81163ee:	68bb      	ldr	r3, [r7, #8]
 81163f0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 81163f2:	68bb      	ldr	r3, [r7, #8]
 81163f4:	6959      	ldr	r1, [r3, #20]
 81163f6:	68bb      	ldr	r3, [r7, #8]
 81163f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 81163fa:	4613      	mov	r3, r2
 81163fc:	009b      	lsls	r3, r3, #2
 81163fe:	4413      	add	r3, r2
 8116400:	009b      	lsls	r3, r3, #2
 8116402:	4a1f      	ldr	r2, [pc, #124]	@ (8116480 <xTaskPriorityInherit+0xc8>)
 8116404:	4413      	add	r3, r2
 8116406:	4299      	cmp	r1, r3
 8116408:	d122      	bne.n	8116450 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 811640a:	68bb      	ldr	r3, [r7, #8]
 811640c:	3304      	adds	r3, #4
 811640e:	4618      	mov	r0, r3
 8116410:	f7fd f984 	bl	811371c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8116414:	4b19      	ldr	r3, [pc, #100]	@ (811647c <xTaskPriorityInherit+0xc4>)
 8116416:	681b      	ldr	r3, [r3, #0]
 8116418:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 811641a:	68bb      	ldr	r3, [r7, #8]
 811641c:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 811641e:	68bb      	ldr	r3, [r7, #8]
 8116420:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8116422:	4b18      	ldr	r3, [pc, #96]	@ (8116484 <xTaskPriorityInherit+0xcc>)
 8116424:	681b      	ldr	r3, [r3, #0]
 8116426:	429a      	cmp	r2, r3
 8116428:	d903      	bls.n	8116432 <xTaskPriorityInherit+0x7a>
 811642a:	68bb      	ldr	r3, [r7, #8]
 811642c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 811642e:	4a15      	ldr	r2, [pc, #84]	@ (8116484 <xTaskPriorityInherit+0xcc>)
 8116430:	6013      	str	r3, [r2, #0]
 8116432:	68bb      	ldr	r3, [r7, #8]
 8116434:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8116436:	4613      	mov	r3, r2
 8116438:	009b      	lsls	r3, r3, #2
 811643a:	4413      	add	r3, r2
 811643c:	009b      	lsls	r3, r3, #2
 811643e:	4a10      	ldr	r2, [pc, #64]	@ (8116480 <xTaskPriorityInherit+0xc8>)
 8116440:	441a      	add	r2, r3
 8116442:	68bb      	ldr	r3, [r7, #8]
 8116444:	3304      	adds	r3, #4
 8116446:	4619      	mov	r1, r3
 8116448:	4610      	mov	r0, r2
 811644a:	f7fd f90a 	bl	8113662 <vListInsertEnd>
 811644e:	e004      	b.n	811645a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8116450:	4b0a      	ldr	r3, [pc, #40]	@ (811647c <xTaskPriorityInherit+0xc4>)
 8116452:	681b      	ldr	r3, [r3, #0]
 8116454:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8116456:	68bb      	ldr	r3, [r7, #8]
 8116458:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 811645a:	2301      	movs	r3, #1
 811645c:	60fb      	str	r3, [r7, #12]
 811645e:	e008      	b.n	8116472 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8116460:	68bb      	ldr	r3, [r7, #8]
 8116462:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8116464:	4b05      	ldr	r3, [pc, #20]	@ (811647c <xTaskPriorityInherit+0xc4>)
 8116466:	681b      	ldr	r3, [r3, #0]
 8116468:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 811646a:	429a      	cmp	r2, r3
 811646c:	d201      	bcs.n	8116472 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 811646e:	2301      	movs	r3, #1
 8116470:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8116472:	68fb      	ldr	r3, [r7, #12]
	}
 8116474:	4618      	mov	r0, r3
 8116476:	3710      	adds	r7, #16
 8116478:	46bd      	mov	sp, r7
 811647a:	bd80      	pop	{r7, pc}
 811647c:	1000abe0 	.word	0x1000abe0
 8116480:	1000abe4 	.word	0x1000abe4
 8116484:	1000b0bc 	.word	0x1000b0bc

08116488 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8116488:	b580      	push	{r7, lr}
 811648a:	b086      	sub	sp, #24
 811648c:	af00      	add	r7, sp, #0
 811648e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8116490:	687b      	ldr	r3, [r7, #4]
 8116492:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8116494:	2300      	movs	r3, #0
 8116496:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8116498:	687b      	ldr	r3, [r7, #4]
 811649a:	2b00      	cmp	r3, #0
 811649c:	d058      	beq.n	8116550 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 811649e:	4b2f      	ldr	r3, [pc, #188]	@ (811655c <xTaskPriorityDisinherit+0xd4>)
 81164a0:	681b      	ldr	r3, [r3, #0]
 81164a2:	693a      	ldr	r2, [r7, #16]
 81164a4:	429a      	cmp	r2, r3
 81164a6:	d00b      	beq.n	81164c0 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 81164a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81164ac:	f383 8811 	msr	BASEPRI, r3
 81164b0:	f3bf 8f6f 	isb	sy
 81164b4:	f3bf 8f4f 	dsb	sy
 81164b8:	60fb      	str	r3, [r7, #12]
}
 81164ba:	bf00      	nop
 81164bc:	bf00      	nop
 81164be:	e7fd      	b.n	81164bc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 81164c0:	693b      	ldr	r3, [r7, #16]
 81164c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 81164c4:	2b00      	cmp	r3, #0
 81164c6:	d10b      	bne.n	81164e0 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 81164c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81164cc:	f383 8811 	msr	BASEPRI, r3
 81164d0:	f3bf 8f6f 	isb	sy
 81164d4:	f3bf 8f4f 	dsb	sy
 81164d8:	60bb      	str	r3, [r7, #8]
}
 81164da:	bf00      	nop
 81164dc:	bf00      	nop
 81164de:	e7fd      	b.n	81164dc <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 81164e0:	693b      	ldr	r3, [r7, #16]
 81164e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 81164e4:	1e5a      	subs	r2, r3, #1
 81164e6:	693b      	ldr	r3, [r7, #16]
 81164e8:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 81164ea:	693b      	ldr	r3, [r7, #16]
 81164ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 81164ee:	693b      	ldr	r3, [r7, #16]
 81164f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 81164f2:	429a      	cmp	r2, r3
 81164f4:	d02c      	beq.n	8116550 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 81164f6:	693b      	ldr	r3, [r7, #16]
 81164f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 81164fa:	2b00      	cmp	r3, #0
 81164fc:	d128      	bne.n	8116550 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 81164fe:	693b      	ldr	r3, [r7, #16]
 8116500:	3304      	adds	r3, #4
 8116502:	4618      	mov	r0, r3
 8116504:	f7fd f90a 	bl	811371c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8116508:	693b      	ldr	r3, [r7, #16]
 811650a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 811650c:	693b      	ldr	r3, [r7, #16]
 811650e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8116510:	693b      	ldr	r3, [r7, #16]
 8116512:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8116514:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8116518:	693b      	ldr	r3, [r7, #16]
 811651a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 811651c:	693b      	ldr	r3, [r7, #16]
 811651e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8116520:	4b0f      	ldr	r3, [pc, #60]	@ (8116560 <xTaskPriorityDisinherit+0xd8>)
 8116522:	681b      	ldr	r3, [r3, #0]
 8116524:	429a      	cmp	r2, r3
 8116526:	d903      	bls.n	8116530 <xTaskPriorityDisinherit+0xa8>
 8116528:	693b      	ldr	r3, [r7, #16]
 811652a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 811652c:	4a0c      	ldr	r2, [pc, #48]	@ (8116560 <xTaskPriorityDisinherit+0xd8>)
 811652e:	6013      	str	r3, [r2, #0]
 8116530:	693b      	ldr	r3, [r7, #16]
 8116532:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8116534:	4613      	mov	r3, r2
 8116536:	009b      	lsls	r3, r3, #2
 8116538:	4413      	add	r3, r2
 811653a:	009b      	lsls	r3, r3, #2
 811653c:	4a09      	ldr	r2, [pc, #36]	@ (8116564 <xTaskPriorityDisinherit+0xdc>)
 811653e:	441a      	add	r2, r3
 8116540:	693b      	ldr	r3, [r7, #16]
 8116542:	3304      	adds	r3, #4
 8116544:	4619      	mov	r1, r3
 8116546:	4610      	mov	r0, r2
 8116548:	f7fd f88b 	bl	8113662 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 811654c:	2301      	movs	r3, #1
 811654e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8116550:	697b      	ldr	r3, [r7, #20]
	}
 8116552:	4618      	mov	r0, r3
 8116554:	3718      	adds	r7, #24
 8116556:	46bd      	mov	sp, r7
 8116558:	bd80      	pop	{r7, pc}
 811655a:	bf00      	nop
 811655c:	1000abe0 	.word	0x1000abe0
 8116560:	1000b0bc 	.word	0x1000b0bc
 8116564:	1000abe4 	.word	0x1000abe4

08116568 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8116568:	b580      	push	{r7, lr}
 811656a:	b088      	sub	sp, #32
 811656c:	af00      	add	r7, sp, #0
 811656e:	6078      	str	r0, [r7, #4]
 8116570:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8116572:	687b      	ldr	r3, [r7, #4]
 8116574:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8116576:	2301      	movs	r3, #1
 8116578:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 811657a:	687b      	ldr	r3, [r7, #4]
 811657c:	2b00      	cmp	r3, #0
 811657e:	d06c      	beq.n	811665a <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8116580:	69bb      	ldr	r3, [r7, #24]
 8116582:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8116584:	2b00      	cmp	r3, #0
 8116586:	d10b      	bne.n	81165a0 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8116588:	f04f 0350 	mov.w	r3, #80	@ 0x50
 811658c:	f383 8811 	msr	BASEPRI, r3
 8116590:	f3bf 8f6f 	isb	sy
 8116594:	f3bf 8f4f 	dsb	sy
 8116598:	60fb      	str	r3, [r7, #12]
}
 811659a:	bf00      	nop
 811659c:	bf00      	nop
 811659e:	e7fd      	b.n	811659c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 81165a0:	69bb      	ldr	r3, [r7, #24]
 81165a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 81165a4:	683a      	ldr	r2, [r7, #0]
 81165a6:	429a      	cmp	r2, r3
 81165a8:	d902      	bls.n	81165b0 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 81165aa:	683b      	ldr	r3, [r7, #0]
 81165ac:	61fb      	str	r3, [r7, #28]
 81165ae:	e002      	b.n	81165b6 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 81165b0:	69bb      	ldr	r3, [r7, #24]
 81165b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 81165b4:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 81165b6:	69bb      	ldr	r3, [r7, #24]
 81165b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81165ba:	69fa      	ldr	r2, [r7, #28]
 81165bc:	429a      	cmp	r2, r3
 81165be:	d04c      	beq.n	811665a <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 81165c0:	69bb      	ldr	r3, [r7, #24]
 81165c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 81165c4:	697a      	ldr	r2, [r7, #20]
 81165c6:	429a      	cmp	r2, r3
 81165c8:	d147      	bne.n	811665a <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 81165ca:	4b26      	ldr	r3, [pc, #152]	@ (8116664 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 81165cc:	681b      	ldr	r3, [r3, #0]
 81165ce:	69ba      	ldr	r2, [r7, #24]
 81165d0:	429a      	cmp	r2, r3
 81165d2:	d10b      	bne.n	81165ec <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 81165d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81165d8:	f383 8811 	msr	BASEPRI, r3
 81165dc:	f3bf 8f6f 	isb	sy
 81165e0:	f3bf 8f4f 	dsb	sy
 81165e4:	60bb      	str	r3, [r7, #8]
}
 81165e6:	bf00      	nop
 81165e8:	bf00      	nop
 81165ea:	e7fd      	b.n	81165e8 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 81165ec:	69bb      	ldr	r3, [r7, #24]
 81165ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81165f0:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 81165f2:	69bb      	ldr	r3, [r7, #24]
 81165f4:	69fa      	ldr	r2, [r7, #28]
 81165f6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 81165f8:	69bb      	ldr	r3, [r7, #24]
 81165fa:	699b      	ldr	r3, [r3, #24]
 81165fc:	2b00      	cmp	r3, #0
 81165fe:	db04      	blt.n	811660a <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8116600:	69fb      	ldr	r3, [r7, #28]
 8116602:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8116606:	69bb      	ldr	r3, [r7, #24]
 8116608:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 811660a:	69bb      	ldr	r3, [r7, #24]
 811660c:	6959      	ldr	r1, [r3, #20]
 811660e:	693a      	ldr	r2, [r7, #16]
 8116610:	4613      	mov	r3, r2
 8116612:	009b      	lsls	r3, r3, #2
 8116614:	4413      	add	r3, r2
 8116616:	009b      	lsls	r3, r3, #2
 8116618:	4a13      	ldr	r2, [pc, #76]	@ (8116668 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 811661a:	4413      	add	r3, r2
 811661c:	4299      	cmp	r1, r3
 811661e:	d11c      	bne.n	811665a <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8116620:	69bb      	ldr	r3, [r7, #24]
 8116622:	3304      	adds	r3, #4
 8116624:	4618      	mov	r0, r3
 8116626:	f7fd f879 	bl	811371c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 811662a:	69bb      	ldr	r3, [r7, #24]
 811662c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 811662e:	4b0f      	ldr	r3, [pc, #60]	@ (811666c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8116630:	681b      	ldr	r3, [r3, #0]
 8116632:	429a      	cmp	r2, r3
 8116634:	d903      	bls.n	811663e <vTaskPriorityDisinheritAfterTimeout+0xd6>
 8116636:	69bb      	ldr	r3, [r7, #24]
 8116638:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 811663a:	4a0c      	ldr	r2, [pc, #48]	@ (811666c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 811663c:	6013      	str	r3, [r2, #0]
 811663e:	69bb      	ldr	r3, [r7, #24]
 8116640:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8116642:	4613      	mov	r3, r2
 8116644:	009b      	lsls	r3, r3, #2
 8116646:	4413      	add	r3, r2
 8116648:	009b      	lsls	r3, r3, #2
 811664a:	4a07      	ldr	r2, [pc, #28]	@ (8116668 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 811664c:	441a      	add	r2, r3
 811664e:	69bb      	ldr	r3, [r7, #24]
 8116650:	3304      	adds	r3, #4
 8116652:	4619      	mov	r1, r3
 8116654:	4610      	mov	r0, r2
 8116656:	f7fd f804 	bl	8113662 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 811665a:	bf00      	nop
 811665c:	3720      	adds	r7, #32
 811665e:	46bd      	mov	sp, r7
 8116660:	bd80      	pop	{r7, pc}
 8116662:	bf00      	nop
 8116664:	1000abe0 	.word	0x1000abe0
 8116668:	1000abe4 	.word	0x1000abe4
 811666c:	1000b0bc 	.word	0x1000b0bc

08116670 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8116670:	b480      	push	{r7}
 8116672:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8116674:	4b07      	ldr	r3, [pc, #28]	@ (8116694 <pvTaskIncrementMutexHeldCount+0x24>)
 8116676:	681b      	ldr	r3, [r3, #0]
 8116678:	2b00      	cmp	r3, #0
 811667a:	d004      	beq.n	8116686 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 811667c:	4b05      	ldr	r3, [pc, #20]	@ (8116694 <pvTaskIncrementMutexHeldCount+0x24>)
 811667e:	681b      	ldr	r3, [r3, #0]
 8116680:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8116682:	3201      	adds	r2, #1
 8116684:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 8116686:	4b03      	ldr	r3, [pc, #12]	@ (8116694 <pvTaskIncrementMutexHeldCount+0x24>)
 8116688:	681b      	ldr	r3, [r3, #0]
	}
 811668a:	4618      	mov	r0, r3
 811668c:	46bd      	mov	sp, r7
 811668e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8116692:	4770      	bx	lr
 8116694:	1000abe0 	.word	0x1000abe0

08116698 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8116698:	b580      	push	{r7, lr}
 811669a:	b086      	sub	sp, #24
 811669c:	af00      	add	r7, sp, #0
 811669e:	60f8      	str	r0, [r7, #12]
 81166a0:	60b9      	str	r1, [r7, #8]
 81166a2:	607a      	str	r2, [r7, #4]
 81166a4:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 81166a6:	f7fd f997 	bl	81139d8 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 81166aa:	4b29      	ldr	r3, [pc, #164]	@ (8116750 <xTaskNotifyWait+0xb8>)
 81166ac:	681b      	ldr	r3, [r3, #0]
 81166ae:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 81166b2:	b2db      	uxtb	r3, r3
 81166b4:	2b02      	cmp	r3, #2
 81166b6:	d01c      	beq.n	81166f2 <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 81166b8:	4b25      	ldr	r3, [pc, #148]	@ (8116750 <xTaskNotifyWait+0xb8>)
 81166ba:	681b      	ldr	r3, [r3, #0]
 81166bc:	f8d3 10a0 	ldr.w	r1, [r3, #160]	@ 0xa0
 81166c0:	68fa      	ldr	r2, [r7, #12]
 81166c2:	43d2      	mvns	r2, r2
 81166c4:	400a      	ands	r2, r1
 81166c6:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 81166ca:	4b21      	ldr	r3, [pc, #132]	@ (8116750 <xTaskNotifyWait+0xb8>)
 81166cc:	681b      	ldr	r3, [r3, #0]
 81166ce:	2201      	movs	r2, #1
 81166d0:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

				if( xTicksToWait > ( TickType_t ) 0 )
 81166d4:	683b      	ldr	r3, [r7, #0]
 81166d6:	2b00      	cmp	r3, #0
 81166d8:	d00b      	beq.n	81166f2 <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 81166da:	2101      	movs	r1, #1
 81166dc:	6838      	ldr	r0, [r7, #0]
 81166de:	f000 f947 	bl	8116970 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 81166e2:	4b1c      	ldr	r3, [pc, #112]	@ (8116754 <xTaskNotifyWait+0xbc>)
 81166e4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 81166e8:	601a      	str	r2, [r3, #0]
 81166ea:	f3bf 8f4f 	dsb	sy
 81166ee:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 81166f2:	f7fd f9a3 	bl	8113a3c <vPortExitCritical>

		taskENTER_CRITICAL();
 81166f6:	f7fd f96f 	bl	81139d8 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 81166fa:	687b      	ldr	r3, [r7, #4]
 81166fc:	2b00      	cmp	r3, #0
 81166fe:	d005      	beq.n	811670c <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8116700:	4b13      	ldr	r3, [pc, #76]	@ (8116750 <xTaskNotifyWait+0xb8>)
 8116702:	681b      	ldr	r3, [r3, #0]
 8116704:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8116708:	687b      	ldr	r3, [r7, #4]
 811670a:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 811670c:	4b10      	ldr	r3, [pc, #64]	@ (8116750 <xTaskNotifyWait+0xb8>)
 811670e:	681b      	ldr	r3, [r3, #0]
 8116710:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 8116714:	b2db      	uxtb	r3, r3
 8116716:	2b02      	cmp	r3, #2
 8116718:	d002      	beq.n	8116720 <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 811671a:	2300      	movs	r3, #0
 811671c:	617b      	str	r3, [r7, #20]
 811671e:	e00a      	b.n	8116736 <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8116720:	4b0b      	ldr	r3, [pc, #44]	@ (8116750 <xTaskNotifyWait+0xb8>)
 8116722:	681b      	ldr	r3, [r3, #0]
 8116724:	f8d3 10a0 	ldr.w	r1, [r3, #160]	@ 0xa0
 8116728:	68ba      	ldr	r2, [r7, #8]
 811672a:	43d2      	mvns	r2, r2
 811672c:	400a      	ands	r2, r1
 811672e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
				xReturn = pdTRUE;
 8116732:	2301      	movs	r3, #1
 8116734:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8116736:	4b06      	ldr	r3, [pc, #24]	@ (8116750 <xTaskNotifyWait+0xb8>)
 8116738:	681b      	ldr	r3, [r3, #0]
 811673a:	2200      	movs	r2, #0
 811673c:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
		}
		taskEXIT_CRITICAL();
 8116740:	f7fd f97c 	bl	8113a3c <vPortExitCritical>

		return xReturn;
 8116744:	697b      	ldr	r3, [r7, #20]
	}
 8116746:	4618      	mov	r0, r3
 8116748:	3718      	adds	r7, #24
 811674a:	46bd      	mov	sp, r7
 811674c:	bd80      	pop	{r7, pc}
 811674e:	bf00      	nop
 8116750:	1000abe0 	.word	0x1000abe0
 8116754:	e000ed04 	.word	0xe000ed04

08116758 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8116758:	b580      	push	{r7, lr}
 811675a:	b08e      	sub	sp, #56	@ 0x38
 811675c:	af00      	add	r7, sp, #0
 811675e:	60f8      	str	r0, [r7, #12]
 8116760:	60b9      	str	r1, [r7, #8]
 8116762:	603b      	str	r3, [r7, #0]
 8116764:	4613      	mov	r3, r2
 8116766:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8116768:	2301      	movs	r3, #1
 811676a:	637b      	str	r3, [r7, #52]	@ 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 811676c:	68fb      	ldr	r3, [r7, #12]
 811676e:	2b00      	cmp	r3, #0
 8116770:	d10b      	bne.n	811678a <xTaskGenericNotifyFromISR+0x32>
	__asm volatile
 8116772:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8116776:	f383 8811 	msr	BASEPRI, r3
 811677a:	f3bf 8f6f 	isb	sy
 811677e:	f3bf 8f4f 	dsb	sy
 8116782:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8116784:	bf00      	nop
 8116786:	bf00      	nop
 8116788:	e7fd      	b.n	8116786 <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 811678a:	f7fd fa05 	bl	8113b98 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 811678e:	68fb      	ldr	r3, [r7, #12]
 8116790:	633b      	str	r3, [r7, #48]	@ 0x30
	__asm volatile
 8116792:	f3ef 8211 	mrs	r2, BASEPRI
 8116796:	f04f 0350 	mov.w	r3, #80	@ 0x50
 811679a:	f383 8811 	msr	BASEPRI, r3
 811679e:	f3bf 8f6f 	isb	sy
 81167a2:	f3bf 8f4f 	dsb	sy
 81167a6:	623a      	str	r2, [r7, #32]
 81167a8:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 81167aa:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 81167ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 81167ae:	683b      	ldr	r3, [r7, #0]
 81167b0:	2b00      	cmp	r3, #0
 81167b2:	d004      	beq.n	81167be <xTaskGenericNotifyFromISR+0x66>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 81167b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81167b6:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 81167ba:	683b      	ldr	r3, [r7, #0]
 81167bc:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 81167be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81167c0:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 81167c4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 81167c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81167ca:	2202      	movs	r2, #2
 81167cc:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

			switch( eAction )
 81167d0:	79fb      	ldrb	r3, [r7, #7]
 81167d2:	2b04      	cmp	r3, #4
 81167d4:	d82e      	bhi.n	8116834 <xTaskGenericNotifyFromISR+0xdc>
 81167d6:	a201      	add	r2, pc, #4	@ (adr r2, 81167dc <xTaskGenericNotifyFromISR+0x84>)
 81167d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81167dc:	08116859 	.word	0x08116859
 81167e0:	081167f1 	.word	0x081167f1
 81167e4:	08116803 	.word	0x08116803
 81167e8:	08116813 	.word	0x08116813
 81167ec:	0811681d 	.word	0x0811681d
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 81167f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81167f2:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 81167f6:	68bb      	ldr	r3, [r7, #8]
 81167f8:	431a      	orrs	r2, r3
 81167fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81167fc:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 8116800:	e02d      	b.n	811685e <xTaskGenericNotifyFromISR+0x106>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8116802:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8116804:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8116808:	1c5a      	adds	r2, r3, #1
 811680a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811680c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 8116810:	e025      	b.n	811685e <xTaskGenericNotifyFromISR+0x106>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8116812:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8116814:	68ba      	ldr	r2, [r7, #8]
 8116816:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 811681a:	e020      	b.n	811685e <xTaskGenericNotifyFromISR+0x106>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 811681c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8116820:	2b02      	cmp	r3, #2
 8116822:	d004      	beq.n	811682e <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8116824:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8116826:	68ba      	ldr	r2, [r7, #8]
 8116828:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 811682c:	e017      	b.n	811685e <xTaskGenericNotifyFromISR+0x106>
						xReturn = pdFAIL;
 811682e:	2300      	movs	r3, #0
 8116830:	637b      	str	r3, [r7, #52]	@ 0x34
					break;
 8116832:	e014      	b.n	811685e <xTaskGenericNotifyFromISR+0x106>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8116834:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8116836:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 811683a:	f1b3 3fff 	cmp.w	r3, #4294967295
 811683e:	d00d      	beq.n	811685c <xTaskGenericNotifyFromISR+0x104>
	__asm volatile
 8116840:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8116844:	f383 8811 	msr	BASEPRI, r3
 8116848:	f3bf 8f6f 	isb	sy
 811684c:	f3bf 8f4f 	dsb	sy
 8116850:	61bb      	str	r3, [r7, #24]
}
 8116852:	bf00      	nop
 8116854:	bf00      	nop
 8116856:	e7fd      	b.n	8116854 <xTaskGenericNotifyFromISR+0xfc>
					break;
 8116858:	bf00      	nop
 811685a:	e000      	b.n	811685e <xTaskGenericNotifyFromISR+0x106>
					break;
 811685c:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 811685e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8116862:	2b01      	cmp	r3, #1
 8116864:	d147      	bne.n	81168f6 <xTaskGenericNotifyFromISR+0x19e>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8116866:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8116868:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 811686a:	2b00      	cmp	r3, #0
 811686c:	d00b      	beq.n	8116886 <xTaskGenericNotifyFromISR+0x12e>
	__asm volatile
 811686e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8116872:	f383 8811 	msr	BASEPRI, r3
 8116876:	f3bf 8f6f 	isb	sy
 811687a:	f3bf 8f4f 	dsb	sy
 811687e:	617b      	str	r3, [r7, #20]
}
 8116880:	bf00      	nop
 8116882:	bf00      	nop
 8116884:	e7fd      	b.n	8116882 <xTaskGenericNotifyFromISR+0x12a>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8116886:	4b21      	ldr	r3, [pc, #132]	@ (811690c <xTaskGenericNotifyFromISR+0x1b4>)
 8116888:	681b      	ldr	r3, [r3, #0]
 811688a:	2b00      	cmp	r3, #0
 811688c:	d11d      	bne.n	81168ca <xTaskGenericNotifyFromISR+0x172>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 811688e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8116890:	3304      	adds	r3, #4
 8116892:	4618      	mov	r0, r3
 8116894:	f7fc ff42 	bl	811371c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8116898:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811689a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 811689c:	4b1c      	ldr	r3, [pc, #112]	@ (8116910 <xTaskGenericNotifyFromISR+0x1b8>)
 811689e:	681b      	ldr	r3, [r3, #0]
 81168a0:	429a      	cmp	r2, r3
 81168a2:	d903      	bls.n	81168ac <xTaskGenericNotifyFromISR+0x154>
 81168a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81168a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81168a8:	4a19      	ldr	r2, [pc, #100]	@ (8116910 <xTaskGenericNotifyFromISR+0x1b8>)
 81168aa:	6013      	str	r3, [r2, #0]
 81168ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81168ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 81168b0:	4613      	mov	r3, r2
 81168b2:	009b      	lsls	r3, r3, #2
 81168b4:	4413      	add	r3, r2
 81168b6:	009b      	lsls	r3, r3, #2
 81168b8:	4a16      	ldr	r2, [pc, #88]	@ (8116914 <xTaskGenericNotifyFromISR+0x1bc>)
 81168ba:	441a      	add	r2, r3
 81168bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81168be:	3304      	adds	r3, #4
 81168c0:	4619      	mov	r1, r3
 81168c2:	4610      	mov	r0, r2
 81168c4:	f7fc fecd 	bl	8113662 <vListInsertEnd>
 81168c8:	e005      	b.n	81168d6 <xTaskGenericNotifyFromISR+0x17e>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 81168ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81168cc:	3318      	adds	r3, #24
 81168ce:	4619      	mov	r1, r3
 81168d0:	4811      	ldr	r0, [pc, #68]	@ (8116918 <xTaskGenericNotifyFromISR+0x1c0>)
 81168d2:	f7fc fec6 	bl	8113662 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 81168d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81168d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 81168da:	4b10      	ldr	r3, [pc, #64]	@ (811691c <xTaskGenericNotifyFromISR+0x1c4>)
 81168dc:	681b      	ldr	r3, [r3, #0]
 81168de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81168e0:	429a      	cmp	r2, r3
 81168e2:	d908      	bls.n	81168f6 <xTaskGenericNotifyFromISR+0x19e>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 81168e4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 81168e6:	2b00      	cmp	r3, #0
 81168e8:	d002      	beq.n	81168f0 <xTaskGenericNotifyFromISR+0x198>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 81168ea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 81168ec:	2201      	movs	r2, #1
 81168ee:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 81168f0:	4b0b      	ldr	r3, [pc, #44]	@ (8116920 <xTaskGenericNotifyFromISR+0x1c8>)
 81168f2:	2201      	movs	r2, #1
 81168f4:	601a      	str	r2, [r3, #0]
 81168f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81168f8:	613b      	str	r3, [r7, #16]
	__asm volatile
 81168fa:	693b      	ldr	r3, [r7, #16]
 81168fc:	f383 8811 	msr	BASEPRI, r3
}
 8116900:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 8116902:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
	}
 8116904:	4618      	mov	r0, r3
 8116906:	3738      	adds	r7, #56	@ 0x38
 8116908:	46bd      	mov	sp, r7
 811690a:	bd80      	pop	{r7, pc}
 811690c:	1000b0dc 	.word	0x1000b0dc
 8116910:	1000b0bc 	.word	0x1000b0bc
 8116914:	1000abe4 	.word	0x1000abe4
 8116918:	1000b074 	.word	0x1000b074
 811691c:	1000abe0 	.word	0x1000abe0
 8116920:	1000b0c8 	.word	0x1000b0c8

08116924 <xTaskNotifyStateClear>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask )
	{
 8116924:	b580      	push	{r7, lr}
 8116926:	b084      	sub	sp, #16
 8116928:	af00      	add	r7, sp, #0
 811692a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	BaseType_t xReturn;

		/* If null is passed in here then it is the calling task that is having
		its notification state cleared. */
		pxTCB = prvGetTCBFromHandle( xTask );
 811692c:	687b      	ldr	r3, [r7, #4]
 811692e:	2b00      	cmp	r3, #0
 8116930:	d102      	bne.n	8116938 <xTaskNotifyStateClear+0x14>
 8116932:	4b0e      	ldr	r3, [pc, #56]	@ (811696c <xTaskNotifyStateClear+0x48>)
 8116934:	681b      	ldr	r3, [r3, #0]
 8116936:	e000      	b.n	811693a <xTaskNotifyStateClear+0x16>
 8116938:	687b      	ldr	r3, [r7, #4]
 811693a:	60bb      	str	r3, [r7, #8]

		taskENTER_CRITICAL();
 811693c:	f7fd f84c 	bl	81139d8 <vPortEnterCritical>
		{
			if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
 8116940:	68bb      	ldr	r3, [r7, #8]
 8116942:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 8116946:	b2db      	uxtb	r3, r3
 8116948:	2b02      	cmp	r3, #2
 811694a:	d106      	bne.n	811695a <xTaskNotifyStateClear+0x36>
			{
				pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 811694c:	68bb      	ldr	r3, [r7, #8]
 811694e:	2200      	movs	r2, #0
 8116950:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
				xReturn = pdPASS;
 8116954:	2301      	movs	r3, #1
 8116956:	60fb      	str	r3, [r7, #12]
 8116958:	e001      	b.n	811695e <xTaskNotifyStateClear+0x3a>
			}
			else
			{
				xReturn = pdFAIL;
 811695a:	2300      	movs	r3, #0
 811695c:	60fb      	str	r3, [r7, #12]
			}
		}
		taskEXIT_CRITICAL();
 811695e:	f7fd f86d 	bl	8113a3c <vPortExitCritical>

		return xReturn;
 8116962:	68fb      	ldr	r3, [r7, #12]
	}
 8116964:	4618      	mov	r0, r3
 8116966:	3710      	adds	r7, #16
 8116968:	46bd      	mov	sp, r7
 811696a:	bd80      	pop	{r7, pc}
 811696c:	1000abe0 	.word	0x1000abe0

08116970 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8116970:	b580      	push	{r7, lr}
 8116972:	b084      	sub	sp, #16
 8116974:	af00      	add	r7, sp, #0
 8116976:	6078      	str	r0, [r7, #4]
 8116978:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 811697a:	4b21      	ldr	r3, [pc, #132]	@ (8116a00 <prvAddCurrentTaskToDelayedList+0x90>)
 811697c:	681b      	ldr	r3, [r3, #0]
 811697e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8116980:	4b20      	ldr	r3, [pc, #128]	@ (8116a04 <prvAddCurrentTaskToDelayedList+0x94>)
 8116982:	681b      	ldr	r3, [r3, #0]
 8116984:	3304      	adds	r3, #4
 8116986:	4618      	mov	r0, r3
 8116988:	f7fc fec8 	bl	811371c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 811698c:	687b      	ldr	r3, [r7, #4]
 811698e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8116992:	d10a      	bne.n	81169aa <prvAddCurrentTaskToDelayedList+0x3a>
 8116994:	683b      	ldr	r3, [r7, #0]
 8116996:	2b00      	cmp	r3, #0
 8116998:	d007      	beq.n	81169aa <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 811699a:	4b1a      	ldr	r3, [pc, #104]	@ (8116a04 <prvAddCurrentTaskToDelayedList+0x94>)
 811699c:	681b      	ldr	r3, [r3, #0]
 811699e:	3304      	adds	r3, #4
 81169a0:	4619      	mov	r1, r3
 81169a2:	4819      	ldr	r0, [pc, #100]	@ (8116a08 <prvAddCurrentTaskToDelayedList+0x98>)
 81169a4:	f7fc fe5d 	bl	8113662 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 81169a8:	e026      	b.n	81169f8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 81169aa:	68fa      	ldr	r2, [r7, #12]
 81169ac:	687b      	ldr	r3, [r7, #4]
 81169ae:	4413      	add	r3, r2
 81169b0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 81169b2:	4b14      	ldr	r3, [pc, #80]	@ (8116a04 <prvAddCurrentTaskToDelayedList+0x94>)
 81169b4:	681b      	ldr	r3, [r3, #0]
 81169b6:	68ba      	ldr	r2, [r7, #8]
 81169b8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 81169ba:	68ba      	ldr	r2, [r7, #8]
 81169bc:	68fb      	ldr	r3, [r7, #12]
 81169be:	429a      	cmp	r2, r3
 81169c0:	d209      	bcs.n	81169d6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 81169c2:	4b12      	ldr	r3, [pc, #72]	@ (8116a0c <prvAddCurrentTaskToDelayedList+0x9c>)
 81169c4:	681a      	ldr	r2, [r3, #0]
 81169c6:	4b0f      	ldr	r3, [pc, #60]	@ (8116a04 <prvAddCurrentTaskToDelayedList+0x94>)
 81169c8:	681b      	ldr	r3, [r3, #0]
 81169ca:	3304      	adds	r3, #4
 81169cc:	4619      	mov	r1, r3
 81169ce:	4610      	mov	r0, r2
 81169d0:	f7fc fe6b 	bl	81136aa <vListInsert>
}
 81169d4:	e010      	b.n	81169f8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 81169d6:	4b0e      	ldr	r3, [pc, #56]	@ (8116a10 <prvAddCurrentTaskToDelayedList+0xa0>)
 81169d8:	681a      	ldr	r2, [r3, #0]
 81169da:	4b0a      	ldr	r3, [pc, #40]	@ (8116a04 <prvAddCurrentTaskToDelayedList+0x94>)
 81169dc:	681b      	ldr	r3, [r3, #0]
 81169de:	3304      	adds	r3, #4
 81169e0:	4619      	mov	r1, r3
 81169e2:	4610      	mov	r0, r2
 81169e4:	f7fc fe61 	bl	81136aa <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 81169e8:	4b0a      	ldr	r3, [pc, #40]	@ (8116a14 <prvAddCurrentTaskToDelayedList+0xa4>)
 81169ea:	681b      	ldr	r3, [r3, #0]
 81169ec:	68ba      	ldr	r2, [r7, #8]
 81169ee:	429a      	cmp	r2, r3
 81169f0:	d202      	bcs.n	81169f8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 81169f2:	4a08      	ldr	r2, [pc, #32]	@ (8116a14 <prvAddCurrentTaskToDelayedList+0xa4>)
 81169f4:	68bb      	ldr	r3, [r7, #8]
 81169f6:	6013      	str	r3, [r2, #0]
}
 81169f8:	bf00      	nop
 81169fa:	3710      	adds	r7, #16
 81169fc:	46bd      	mov	sp, r7
 81169fe:	bd80      	pop	{r7, pc}
 8116a00:	1000b0b8 	.word	0x1000b0b8
 8116a04:	1000abe0 	.word	0x1000abe0
 8116a08:	1000b0a0 	.word	0x1000b0a0
 8116a0c:	1000b070 	.word	0x1000b070
 8116a10:	1000b06c 	.word	0x1000b06c
 8116a14:	1000b0d4 	.word	0x1000b0d4

08116a18 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8116a18:	b580      	push	{r7, lr}
 8116a1a:	b08a      	sub	sp, #40	@ 0x28
 8116a1c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8116a1e:	2300      	movs	r3, #0
 8116a20:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8116a22:	f000 fb13 	bl	811704c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8116a26:	4b1d      	ldr	r3, [pc, #116]	@ (8116a9c <xTimerCreateTimerTask+0x84>)
 8116a28:	681b      	ldr	r3, [r3, #0]
 8116a2a:	2b00      	cmp	r3, #0
 8116a2c:	d021      	beq.n	8116a72 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8116a2e:	2300      	movs	r3, #0
 8116a30:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8116a32:	2300      	movs	r3, #0
 8116a34:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8116a36:	1d3a      	adds	r2, r7, #4
 8116a38:	f107 0108 	add.w	r1, r7, #8
 8116a3c:	f107 030c 	add.w	r3, r7, #12
 8116a40:	4618      	mov	r0, r3
 8116a42:	f7fc fbd9 	bl	81131f8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8116a46:	6879      	ldr	r1, [r7, #4]
 8116a48:	68bb      	ldr	r3, [r7, #8]
 8116a4a:	68fa      	ldr	r2, [r7, #12]
 8116a4c:	9202      	str	r2, [sp, #8]
 8116a4e:	9301      	str	r3, [sp, #4]
 8116a50:	2302      	movs	r3, #2
 8116a52:	9300      	str	r3, [sp, #0]
 8116a54:	2300      	movs	r3, #0
 8116a56:	460a      	mov	r2, r1
 8116a58:	4911      	ldr	r1, [pc, #68]	@ (8116aa0 <xTimerCreateTimerTask+0x88>)
 8116a5a:	4812      	ldr	r0, [pc, #72]	@ (8116aa4 <xTimerCreateTimerTask+0x8c>)
 8116a5c:	f7fe fdec 	bl	8115638 <xTaskCreateStatic>
 8116a60:	4603      	mov	r3, r0
 8116a62:	4a11      	ldr	r2, [pc, #68]	@ (8116aa8 <xTimerCreateTimerTask+0x90>)
 8116a64:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8116a66:	4b10      	ldr	r3, [pc, #64]	@ (8116aa8 <xTimerCreateTimerTask+0x90>)
 8116a68:	681b      	ldr	r3, [r3, #0]
 8116a6a:	2b00      	cmp	r3, #0
 8116a6c:	d001      	beq.n	8116a72 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8116a6e:	2301      	movs	r3, #1
 8116a70:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8116a72:	697b      	ldr	r3, [r7, #20]
 8116a74:	2b00      	cmp	r3, #0
 8116a76:	d10b      	bne.n	8116a90 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8116a78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8116a7c:	f383 8811 	msr	BASEPRI, r3
 8116a80:	f3bf 8f6f 	isb	sy
 8116a84:	f3bf 8f4f 	dsb	sy
 8116a88:	613b      	str	r3, [r7, #16]
}
 8116a8a:	bf00      	nop
 8116a8c:	bf00      	nop
 8116a8e:	e7fd      	b.n	8116a8c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8116a90:	697b      	ldr	r3, [r7, #20]
}
 8116a92:	4618      	mov	r0, r3
 8116a94:	3718      	adds	r7, #24
 8116a96:	46bd      	mov	sp, r7
 8116a98:	bd80      	pop	{r7, pc}
 8116a9a:	bf00      	nop
 8116a9c:	1000b110 	.word	0x1000b110
 8116aa0:	08125428 	.word	0x08125428
 8116aa4:	08116be5 	.word	0x08116be5
 8116aa8:	1000b114 	.word	0x1000b114

08116aac <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8116aac:	b580      	push	{r7, lr}
 8116aae:	b08a      	sub	sp, #40	@ 0x28
 8116ab0:	af00      	add	r7, sp, #0
 8116ab2:	60f8      	str	r0, [r7, #12]
 8116ab4:	60b9      	str	r1, [r7, #8]
 8116ab6:	607a      	str	r2, [r7, #4]
 8116ab8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8116aba:	2300      	movs	r3, #0
 8116abc:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8116abe:	68fb      	ldr	r3, [r7, #12]
 8116ac0:	2b00      	cmp	r3, #0
 8116ac2:	d10b      	bne.n	8116adc <xTimerGenericCommand+0x30>
	__asm volatile
 8116ac4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8116ac8:	f383 8811 	msr	BASEPRI, r3
 8116acc:	f3bf 8f6f 	isb	sy
 8116ad0:	f3bf 8f4f 	dsb	sy
 8116ad4:	623b      	str	r3, [r7, #32]
}
 8116ad6:	bf00      	nop
 8116ad8:	bf00      	nop
 8116ada:	e7fd      	b.n	8116ad8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8116adc:	4b19      	ldr	r3, [pc, #100]	@ (8116b44 <xTimerGenericCommand+0x98>)
 8116ade:	681b      	ldr	r3, [r3, #0]
 8116ae0:	2b00      	cmp	r3, #0
 8116ae2:	d02a      	beq.n	8116b3a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8116ae4:	68bb      	ldr	r3, [r7, #8]
 8116ae6:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8116ae8:	687b      	ldr	r3, [r7, #4]
 8116aea:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8116aec:	68fb      	ldr	r3, [r7, #12]
 8116aee:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8116af0:	68bb      	ldr	r3, [r7, #8]
 8116af2:	2b05      	cmp	r3, #5
 8116af4:	dc18      	bgt.n	8116b28 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8116af6:	f7ff fc41 	bl	811637c <xTaskGetSchedulerState>
 8116afa:	4603      	mov	r3, r0
 8116afc:	2b02      	cmp	r3, #2
 8116afe:	d109      	bne.n	8116b14 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8116b00:	4b10      	ldr	r3, [pc, #64]	@ (8116b44 <xTimerGenericCommand+0x98>)
 8116b02:	6818      	ldr	r0, [r3, #0]
 8116b04:	f107 0110 	add.w	r1, r7, #16
 8116b08:	2300      	movs	r3, #0
 8116b0a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8116b0c:	f7fd faf2 	bl	81140f4 <xQueueGenericSend>
 8116b10:	6278      	str	r0, [r7, #36]	@ 0x24
 8116b12:	e012      	b.n	8116b3a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8116b14:	4b0b      	ldr	r3, [pc, #44]	@ (8116b44 <xTimerGenericCommand+0x98>)
 8116b16:	6818      	ldr	r0, [r3, #0]
 8116b18:	f107 0110 	add.w	r1, r7, #16
 8116b1c:	2300      	movs	r3, #0
 8116b1e:	2200      	movs	r2, #0
 8116b20:	f7fd fae8 	bl	81140f4 <xQueueGenericSend>
 8116b24:	6278      	str	r0, [r7, #36]	@ 0x24
 8116b26:	e008      	b.n	8116b3a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8116b28:	4b06      	ldr	r3, [pc, #24]	@ (8116b44 <xTimerGenericCommand+0x98>)
 8116b2a:	6818      	ldr	r0, [r3, #0]
 8116b2c:	f107 0110 	add.w	r1, r7, #16
 8116b30:	2300      	movs	r3, #0
 8116b32:	683a      	ldr	r2, [r7, #0]
 8116b34:	f7fd fbe0 	bl	81142f8 <xQueueGenericSendFromISR>
 8116b38:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8116b3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8116b3c:	4618      	mov	r0, r3
 8116b3e:	3728      	adds	r7, #40	@ 0x28
 8116b40:	46bd      	mov	sp, r7
 8116b42:	bd80      	pop	{r7, pc}
 8116b44:	1000b110 	.word	0x1000b110

08116b48 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8116b48:	b580      	push	{r7, lr}
 8116b4a:	b088      	sub	sp, #32
 8116b4c:	af02      	add	r7, sp, #8
 8116b4e:	6078      	str	r0, [r7, #4]
 8116b50:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8116b52:	4b23      	ldr	r3, [pc, #140]	@ (8116be0 <prvProcessExpiredTimer+0x98>)
 8116b54:	681b      	ldr	r3, [r3, #0]
 8116b56:	68db      	ldr	r3, [r3, #12]
 8116b58:	68db      	ldr	r3, [r3, #12]
 8116b5a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8116b5c:	697b      	ldr	r3, [r7, #20]
 8116b5e:	3304      	adds	r3, #4
 8116b60:	4618      	mov	r0, r3
 8116b62:	f7fc fddb 	bl	811371c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8116b66:	697b      	ldr	r3, [r7, #20]
 8116b68:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8116b6c:	f003 0304 	and.w	r3, r3, #4
 8116b70:	2b00      	cmp	r3, #0
 8116b72:	d023      	beq.n	8116bbc <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8116b74:	697b      	ldr	r3, [r7, #20]
 8116b76:	699a      	ldr	r2, [r3, #24]
 8116b78:	687b      	ldr	r3, [r7, #4]
 8116b7a:	18d1      	adds	r1, r2, r3
 8116b7c:	687b      	ldr	r3, [r7, #4]
 8116b7e:	683a      	ldr	r2, [r7, #0]
 8116b80:	6978      	ldr	r0, [r7, #20]
 8116b82:	f000 f8d5 	bl	8116d30 <prvInsertTimerInActiveList>
 8116b86:	4603      	mov	r3, r0
 8116b88:	2b00      	cmp	r3, #0
 8116b8a:	d020      	beq.n	8116bce <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8116b8c:	2300      	movs	r3, #0
 8116b8e:	9300      	str	r3, [sp, #0]
 8116b90:	2300      	movs	r3, #0
 8116b92:	687a      	ldr	r2, [r7, #4]
 8116b94:	2100      	movs	r1, #0
 8116b96:	6978      	ldr	r0, [r7, #20]
 8116b98:	f7ff ff88 	bl	8116aac <xTimerGenericCommand>
 8116b9c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8116b9e:	693b      	ldr	r3, [r7, #16]
 8116ba0:	2b00      	cmp	r3, #0
 8116ba2:	d114      	bne.n	8116bce <prvProcessExpiredTimer+0x86>
	__asm volatile
 8116ba4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8116ba8:	f383 8811 	msr	BASEPRI, r3
 8116bac:	f3bf 8f6f 	isb	sy
 8116bb0:	f3bf 8f4f 	dsb	sy
 8116bb4:	60fb      	str	r3, [r7, #12]
}
 8116bb6:	bf00      	nop
 8116bb8:	bf00      	nop
 8116bba:	e7fd      	b.n	8116bb8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8116bbc:	697b      	ldr	r3, [r7, #20]
 8116bbe:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8116bc2:	f023 0301 	bic.w	r3, r3, #1
 8116bc6:	b2da      	uxtb	r2, r3
 8116bc8:	697b      	ldr	r3, [r7, #20]
 8116bca:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8116bce:	697b      	ldr	r3, [r7, #20]
 8116bd0:	6a1b      	ldr	r3, [r3, #32]
 8116bd2:	6978      	ldr	r0, [r7, #20]
 8116bd4:	4798      	blx	r3
}
 8116bd6:	bf00      	nop
 8116bd8:	3718      	adds	r7, #24
 8116bda:	46bd      	mov	sp, r7
 8116bdc:	bd80      	pop	{r7, pc}
 8116bde:	bf00      	nop
 8116be0:	1000b108 	.word	0x1000b108

08116be4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8116be4:	b580      	push	{r7, lr}
 8116be6:	b084      	sub	sp, #16
 8116be8:	af00      	add	r7, sp, #0
 8116bea:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8116bec:	f107 0308 	add.w	r3, r7, #8
 8116bf0:	4618      	mov	r0, r3
 8116bf2:	f000 f859 	bl	8116ca8 <prvGetNextExpireTime>
 8116bf6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8116bf8:	68bb      	ldr	r3, [r7, #8]
 8116bfa:	4619      	mov	r1, r3
 8116bfc:	68f8      	ldr	r0, [r7, #12]
 8116bfe:	f000 f805 	bl	8116c0c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8116c02:	f000 f8d7 	bl	8116db4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8116c06:	bf00      	nop
 8116c08:	e7f0      	b.n	8116bec <prvTimerTask+0x8>
	...

08116c0c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8116c0c:	b580      	push	{r7, lr}
 8116c0e:	b084      	sub	sp, #16
 8116c10:	af00      	add	r7, sp, #0
 8116c12:	6078      	str	r0, [r7, #4]
 8116c14:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8116c16:	f7fe ff73 	bl	8115b00 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8116c1a:	f107 0308 	add.w	r3, r7, #8
 8116c1e:	4618      	mov	r0, r3
 8116c20:	f000 f866 	bl	8116cf0 <prvSampleTimeNow>
 8116c24:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8116c26:	68bb      	ldr	r3, [r7, #8]
 8116c28:	2b00      	cmp	r3, #0
 8116c2a:	d130      	bne.n	8116c8e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8116c2c:	683b      	ldr	r3, [r7, #0]
 8116c2e:	2b00      	cmp	r3, #0
 8116c30:	d10a      	bne.n	8116c48 <prvProcessTimerOrBlockTask+0x3c>
 8116c32:	687a      	ldr	r2, [r7, #4]
 8116c34:	68fb      	ldr	r3, [r7, #12]
 8116c36:	429a      	cmp	r2, r3
 8116c38:	d806      	bhi.n	8116c48 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8116c3a:	f7fe ff6f 	bl	8115b1c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8116c3e:	68f9      	ldr	r1, [r7, #12]
 8116c40:	6878      	ldr	r0, [r7, #4]
 8116c42:	f7ff ff81 	bl	8116b48 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8116c46:	e024      	b.n	8116c92 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8116c48:	683b      	ldr	r3, [r7, #0]
 8116c4a:	2b00      	cmp	r3, #0
 8116c4c:	d008      	beq.n	8116c60 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8116c4e:	4b13      	ldr	r3, [pc, #76]	@ (8116c9c <prvProcessTimerOrBlockTask+0x90>)
 8116c50:	681b      	ldr	r3, [r3, #0]
 8116c52:	681b      	ldr	r3, [r3, #0]
 8116c54:	2b00      	cmp	r3, #0
 8116c56:	d101      	bne.n	8116c5c <prvProcessTimerOrBlockTask+0x50>
 8116c58:	2301      	movs	r3, #1
 8116c5a:	e000      	b.n	8116c5e <prvProcessTimerOrBlockTask+0x52>
 8116c5c:	2300      	movs	r3, #0
 8116c5e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8116c60:	4b0f      	ldr	r3, [pc, #60]	@ (8116ca0 <prvProcessTimerOrBlockTask+0x94>)
 8116c62:	6818      	ldr	r0, [r3, #0]
 8116c64:	687a      	ldr	r2, [r7, #4]
 8116c66:	68fb      	ldr	r3, [r7, #12]
 8116c68:	1ad3      	subs	r3, r2, r3
 8116c6a:	683a      	ldr	r2, [r7, #0]
 8116c6c:	4619      	mov	r1, r3
 8116c6e:	f7fe f885 	bl	8114d7c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8116c72:	f7fe ff53 	bl	8115b1c <xTaskResumeAll>
 8116c76:	4603      	mov	r3, r0
 8116c78:	2b00      	cmp	r3, #0
 8116c7a:	d10a      	bne.n	8116c92 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8116c7c:	4b09      	ldr	r3, [pc, #36]	@ (8116ca4 <prvProcessTimerOrBlockTask+0x98>)
 8116c7e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8116c82:	601a      	str	r2, [r3, #0]
 8116c84:	f3bf 8f4f 	dsb	sy
 8116c88:	f3bf 8f6f 	isb	sy
}
 8116c8c:	e001      	b.n	8116c92 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8116c8e:	f7fe ff45 	bl	8115b1c <xTaskResumeAll>
}
 8116c92:	bf00      	nop
 8116c94:	3710      	adds	r7, #16
 8116c96:	46bd      	mov	sp, r7
 8116c98:	bd80      	pop	{r7, pc}
 8116c9a:	bf00      	nop
 8116c9c:	1000b10c 	.word	0x1000b10c
 8116ca0:	1000b110 	.word	0x1000b110
 8116ca4:	e000ed04 	.word	0xe000ed04

08116ca8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8116ca8:	b480      	push	{r7}
 8116caa:	b085      	sub	sp, #20
 8116cac:	af00      	add	r7, sp, #0
 8116cae:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8116cb0:	4b0e      	ldr	r3, [pc, #56]	@ (8116cec <prvGetNextExpireTime+0x44>)
 8116cb2:	681b      	ldr	r3, [r3, #0]
 8116cb4:	681b      	ldr	r3, [r3, #0]
 8116cb6:	2b00      	cmp	r3, #0
 8116cb8:	d101      	bne.n	8116cbe <prvGetNextExpireTime+0x16>
 8116cba:	2201      	movs	r2, #1
 8116cbc:	e000      	b.n	8116cc0 <prvGetNextExpireTime+0x18>
 8116cbe:	2200      	movs	r2, #0
 8116cc0:	687b      	ldr	r3, [r7, #4]
 8116cc2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8116cc4:	687b      	ldr	r3, [r7, #4]
 8116cc6:	681b      	ldr	r3, [r3, #0]
 8116cc8:	2b00      	cmp	r3, #0
 8116cca:	d105      	bne.n	8116cd8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8116ccc:	4b07      	ldr	r3, [pc, #28]	@ (8116cec <prvGetNextExpireTime+0x44>)
 8116cce:	681b      	ldr	r3, [r3, #0]
 8116cd0:	68db      	ldr	r3, [r3, #12]
 8116cd2:	681b      	ldr	r3, [r3, #0]
 8116cd4:	60fb      	str	r3, [r7, #12]
 8116cd6:	e001      	b.n	8116cdc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8116cd8:	2300      	movs	r3, #0
 8116cda:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8116cdc:	68fb      	ldr	r3, [r7, #12]
}
 8116cde:	4618      	mov	r0, r3
 8116ce0:	3714      	adds	r7, #20
 8116ce2:	46bd      	mov	sp, r7
 8116ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8116ce8:	4770      	bx	lr
 8116cea:	bf00      	nop
 8116cec:	1000b108 	.word	0x1000b108

08116cf0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8116cf0:	b580      	push	{r7, lr}
 8116cf2:	b084      	sub	sp, #16
 8116cf4:	af00      	add	r7, sp, #0
 8116cf6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8116cf8:	f7fe ffae 	bl	8115c58 <xTaskGetTickCount>
 8116cfc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8116cfe:	4b0b      	ldr	r3, [pc, #44]	@ (8116d2c <prvSampleTimeNow+0x3c>)
 8116d00:	681b      	ldr	r3, [r3, #0]
 8116d02:	68fa      	ldr	r2, [r7, #12]
 8116d04:	429a      	cmp	r2, r3
 8116d06:	d205      	bcs.n	8116d14 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8116d08:	f000 f93a 	bl	8116f80 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8116d0c:	687b      	ldr	r3, [r7, #4]
 8116d0e:	2201      	movs	r2, #1
 8116d10:	601a      	str	r2, [r3, #0]
 8116d12:	e002      	b.n	8116d1a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8116d14:	687b      	ldr	r3, [r7, #4]
 8116d16:	2200      	movs	r2, #0
 8116d18:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8116d1a:	4a04      	ldr	r2, [pc, #16]	@ (8116d2c <prvSampleTimeNow+0x3c>)
 8116d1c:	68fb      	ldr	r3, [r7, #12]
 8116d1e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8116d20:	68fb      	ldr	r3, [r7, #12]
}
 8116d22:	4618      	mov	r0, r3
 8116d24:	3710      	adds	r7, #16
 8116d26:	46bd      	mov	sp, r7
 8116d28:	bd80      	pop	{r7, pc}
 8116d2a:	bf00      	nop
 8116d2c:	1000b118 	.word	0x1000b118

08116d30 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8116d30:	b580      	push	{r7, lr}
 8116d32:	b086      	sub	sp, #24
 8116d34:	af00      	add	r7, sp, #0
 8116d36:	60f8      	str	r0, [r7, #12]
 8116d38:	60b9      	str	r1, [r7, #8]
 8116d3a:	607a      	str	r2, [r7, #4]
 8116d3c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8116d3e:	2300      	movs	r3, #0
 8116d40:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8116d42:	68fb      	ldr	r3, [r7, #12]
 8116d44:	68ba      	ldr	r2, [r7, #8]
 8116d46:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8116d48:	68fb      	ldr	r3, [r7, #12]
 8116d4a:	68fa      	ldr	r2, [r7, #12]
 8116d4c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8116d4e:	68ba      	ldr	r2, [r7, #8]
 8116d50:	687b      	ldr	r3, [r7, #4]
 8116d52:	429a      	cmp	r2, r3
 8116d54:	d812      	bhi.n	8116d7c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8116d56:	687a      	ldr	r2, [r7, #4]
 8116d58:	683b      	ldr	r3, [r7, #0]
 8116d5a:	1ad2      	subs	r2, r2, r3
 8116d5c:	68fb      	ldr	r3, [r7, #12]
 8116d5e:	699b      	ldr	r3, [r3, #24]
 8116d60:	429a      	cmp	r2, r3
 8116d62:	d302      	bcc.n	8116d6a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8116d64:	2301      	movs	r3, #1
 8116d66:	617b      	str	r3, [r7, #20]
 8116d68:	e01b      	b.n	8116da2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8116d6a:	4b10      	ldr	r3, [pc, #64]	@ (8116dac <prvInsertTimerInActiveList+0x7c>)
 8116d6c:	681a      	ldr	r2, [r3, #0]
 8116d6e:	68fb      	ldr	r3, [r7, #12]
 8116d70:	3304      	adds	r3, #4
 8116d72:	4619      	mov	r1, r3
 8116d74:	4610      	mov	r0, r2
 8116d76:	f7fc fc98 	bl	81136aa <vListInsert>
 8116d7a:	e012      	b.n	8116da2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8116d7c:	687a      	ldr	r2, [r7, #4]
 8116d7e:	683b      	ldr	r3, [r7, #0]
 8116d80:	429a      	cmp	r2, r3
 8116d82:	d206      	bcs.n	8116d92 <prvInsertTimerInActiveList+0x62>
 8116d84:	68ba      	ldr	r2, [r7, #8]
 8116d86:	683b      	ldr	r3, [r7, #0]
 8116d88:	429a      	cmp	r2, r3
 8116d8a:	d302      	bcc.n	8116d92 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8116d8c:	2301      	movs	r3, #1
 8116d8e:	617b      	str	r3, [r7, #20]
 8116d90:	e007      	b.n	8116da2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8116d92:	4b07      	ldr	r3, [pc, #28]	@ (8116db0 <prvInsertTimerInActiveList+0x80>)
 8116d94:	681a      	ldr	r2, [r3, #0]
 8116d96:	68fb      	ldr	r3, [r7, #12]
 8116d98:	3304      	adds	r3, #4
 8116d9a:	4619      	mov	r1, r3
 8116d9c:	4610      	mov	r0, r2
 8116d9e:	f7fc fc84 	bl	81136aa <vListInsert>
		}
	}

	return xProcessTimerNow;
 8116da2:	697b      	ldr	r3, [r7, #20]
}
 8116da4:	4618      	mov	r0, r3
 8116da6:	3718      	adds	r7, #24
 8116da8:	46bd      	mov	sp, r7
 8116daa:	bd80      	pop	{r7, pc}
 8116dac:	1000b10c 	.word	0x1000b10c
 8116db0:	1000b108 	.word	0x1000b108

08116db4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8116db4:	b580      	push	{r7, lr}
 8116db6:	b08e      	sub	sp, #56	@ 0x38
 8116db8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8116dba:	e0ce      	b.n	8116f5a <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8116dbc:	687b      	ldr	r3, [r7, #4]
 8116dbe:	2b00      	cmp	r3, #0
 8116dc0:	da19      	bge.n	8116df6 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8116dc2:	1d3b      	adds	r3, r7, #4
 8116dc4:	3304      	adds	r3, #4
 8116dc6:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8116dc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8116dca:	2b00      	cmp	r3, #0
 8116dcc:	d10b      	bne.n	8116de6 <prvProcessReceivedCommands+0x32>
	__asm volatile
 8116dce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8116dd2:	f383 8811 	msr	BASEPRI, r3
 8116dd6:	f3bf 8f6f 	isb	sy
 8116dda:	f3bf 8f4f 	dsb	sy
 8116dde:	61fb      	str	r3, [r7, #28]
}
 8116de0:	bf00      	nop
 8116de2:	bf00      	nop
 8116de4:	e7fd      	b.n	8116de2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8116de6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8116de8:	681b      	ldr	r3, [r3, #0]
 8116dea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8116dec:	6850      	ldr	r0, [r2, #4]
 8116dee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8116df0:	6892      	ldr	r2, [r2, #8]
 8116df2:	4611      	mov	r1, r2
 8116df4:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8116df6:	687b      	ldr	r3, [r7, #4]
 8116df8:	2b00      	cmp	r3, #0
 8116dfa:	f2c0 80ae 	blt.w	8116f5a <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8116dfe:	68fb      	ldr	r3, [r7, #12]
 8116e00:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8116e02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8116e04:	695b      	ldr	r3, [r3, #20]
 8116e06:	2b00      	cmp	r3, #0
 8116e08:	d004      	beq.n	8116e14 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8116e0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8116e0c:	3304      	adds	r3, #4
 8116e0e:	4618      	mov	r0, r3
 8116e10:	f7fc fc84 	bl	811371c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8116e14:	463b      	mov	r3, r7
 8116e16:	4618      	mov	r0, r3
 8116e18:	f7ff ff6a 	bl	8116cf0 <prvSampleTimeNow>
 8116e1c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8116e1e:	687b      	ldr	r3, [r7, #4]
 8116e20:	2b09      	cmp	r3, #9
 8116e22:	f200 8097 	bhi.w	8116f54 <prvProcessReceivedCommands+0x1a0>
 8116e26:	a201      	add	r2, pc, #4	@ (adr r2, 8116e2c <prvProcessReceivedCommands+0x78>)
 8116e28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8116e2c:	08116e55 	.word	0x08116e55
 8116e30:	08116e55 	.word	0x08116e55
 8116e34:	08116e55 	.word	0x08116e55
 8116e38:	08116ecb 	.word	0x08116ecb
 8116e3c:	08116edf 	.word	0x08116edf
 8116e40:	08116f2b 	.word	0x08116f2b
 8116e44:	08116e55 	.word	0x08116e55
 8116e48:	08116e55 	.word	0x08116e55
 8116e4c:	08116ecb 	.word	0x08116ecb
 8116e50:	08116edf 	.word	0x08116edf
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8116e54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8116e56:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8116e5a:	f043 0301 	orr.w	r3, r3, #1
 8116e5e:	b2da      	uxtb	r2, r3
 8116e60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8116e62:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8116e66:	68ba      	ldr	r2, [r7, #8]
 8116e68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8116e6a:	699b      	ldr	r3, [r3, #24]
 8116e6c:	18d1      	adds	r1, r2, r3
 8116e6e:	68bb      	ldr	r3, [r7, #8]
 8116e70:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8116e72:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8116e74:	f7ff ff5c 	bl	8116d30 <prvInsertTimerInActiveList>
 8116e78:	4603      	mov	r3, r0
 8116e7a:	2b00      	cmp	r3, #0
 8116e7c:	d06c      	beq.n	8116f58 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8116e7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8116e80:	6a1b      	ldr	r3, [r3, #32]
 8116e82:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8116e84:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8116e86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8116e88:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8116e8c:	f003 0304 	and.w	r3, r3, #4
 8116e90:	2b00      	cmp	r3, #0
 8116e92:	d061      	beq.n	8116f58 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8116e94:	68ba      	ldr	r2, [r7, #8]
 8116e96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8116e98:	699b      	ldr	r3, [r3, #24]
 8116e9a:	441a      	add	r2, r3
 8116e9c:	2300      	movs	r3, #0
 8116e9e:	9300      	str	r3, [sp, #0]
 8116ea0:	2300      	movs	r3, #0
 8116ea2:	2100      	movs	r1, #0
 8116ea4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8116ea6:	f7ff fe01 	bl	8116aac <xTimerGenericCommand>
 8116eaa:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8116eac:	6a3b      	ldr	r3, [r7, #32]
 8116eae:	2b00      	cmp	r3, #0
 8116eb0:	d152      	bne.n	8116f58 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8116eb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8116eb6:	f383 8811 	msr	BASEPRI, r3
 8116eba:	f3bf 8f6f 	isb	sy
 8116ebe:	f3bf 8f4f 	dsb	sy
 8116ec2:	61bb      	str	r3, [r7, #24]
}
 8116ec4:	bf00      	nop
 8116ec6:	bf00      	nop
 8116ec8:	e7fd      	b.n	8116ec6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8116eca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8116ecc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8116ed0:	f023 0301 	bic.w	r3, r3, #1
 8116ed4:	b2da      	uxtb	r2, r3
 8116ed6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8116ed8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8116edc:	e03d      	b.n	8116f5a <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8116ede:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8116ee0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8116ee4:	f043 0301 	orr.w	r3, r3, #1
 8116ee8:	b2da      	uxtb	r2, r3
 8116eea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8116eec:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8116ef0:	68ba      	ldr	r2, [r7, #8]
 8116ef2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8116ef4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8116ef6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8116ef8:	699b      	ldr	r3, [r3, #24]
 8116efa:	2b00      	cmp	r3, #0
 8116efc:	d10b      	bne.n	8116f16 <prvProcessReceivedCommands+0x162>
	__asm volatile
 8116efe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8116f02:	f383 8811 	msr	BASEPRI, r3
 8116f06:	f3bf 8f6f 	isb	sy
 8116f0a:	f3bf 8f4f 	dsb	sy
 8116f0e:	617b      	str	r3, [r7, #20]
}
 8116f10:	bf00      	nop
 8116f12:	bf00      	nop
 8116f14:	e7fd      	b.n	8116f12 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8116f16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8116f18:	699a      	ldr	r2, [r3, #24]
 8116f1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8116f1c:	18d1      	adds	r1, r2, r3
 8116f1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8116f20:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8116f22:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8116f24:	f7ff ff04 	bl	8116d30 <prvInsertTimerInActiveList>
					break;
 8116f28:	e017      	b.n	8116f5a <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8116f2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8116f2c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8116f30:	f003 0302 	and.w	r3, r3, #2
 8116f34:	2b00      	cmp	r3, #0
 8116f36:	d103      	bne.n	8116f40 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8116f38:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8116f3a:	f7fc fa45 	bl	81133c8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8116f3e:	e00c      	b.n	8116f5a <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8116f40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8116f42:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8116f46:	f023 0301 	bic.w	r3, r3, #1
 8116f4a:	b2da      	uxtb	r2, r3
 8116f4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8116f4e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8116f52:	e002      	b.n	8116f5a <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8116f54:	bf00      	nop
 8116f56:	e000      	b.n	8116f5a <prvProcessReceivedCommands+0x1a6>
					break;
 8116f58:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8116f5a:	4b08      	ldr	r3, [pc, #32]	@ (8116f7c <prvProcessReceivedCommands+0x1c8>)
 8116f5c:	681b      	ldr	r3, [r3, #0]
 8116f5e:	1d39      	adds	r1, r7, #4
 8116f60:	2200      	movs	r2, #0
 8116f62:	4618      	mov	r0, r3
 8116f64:	f7fd faf6 	bl	8114554 <xQueueReceive>
 8116f68:	4603      	mov	r3, r0
 8116f6a:	2b00      	cmp	r3, #0
 8116f6c:	f47f af26 	bne.w	8116dbc <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8116f70:	bf00      	nop
 8116f72:	bf00      	nop
 8116f74:	3730      	adds	r7, #48	@ 0x30
 8116f76:	46bd      	mov	sp, r7
 8116f78:	bd80      	pop	{r7, pc}
 8116f7a:	bf00      	nop
 8116f7c:	1000b110 	.word	0x1000b110

08116f80 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8116f80:	b580      	push	{r7, lr}
 8116f82:	b088      	sub	sp, #32
 8116f84:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8116f86:	e049      	b.n	811701c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8116f88:	4b2e      	ldr	r3, [pc, #184]	@ (8117044 <prvSwitchTimerLists+0xc4>)
 8116f8a:	681b      	ldr	r3, [r3, #0]
 8116f8c:	68db      	ldr	r3, [r3, #12]
 8116f8e:	681b      	ldr	r3, [r3, #0]
 8116f90:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8116f92:	4b2c      	ldr	r3, [pc, #176]	@ (8117044 <prvSwitchTimerLists+0xc4>)
 8116f94:	681b      	ldr	r3, [r3, #0]
 8116f96:	68db      	ldr	r3, [r3, #12]
 8116f98:	68db      	ldr	r3, [r3, #12]
 8116f9a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8116f9c:	68fb      	ldr	r3, [r7, #12]
 8116f9e:	3304      	adds	r3, #4
 8116fa0:	4618      	mov	r0, r3
 8116fa2:	f7fc fbbb 	bl	811371c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8116fa6:	68fb      	ldr	r3, [r7, #12]
 8116fa8:	6a1b      	ldr	r3, [r3, #32]
 8116faa:	68f8      	ldr	r0, [r7, #12]
 8116fac:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8116fae:	68fb      	ldr	r3, [r7, #12]
 8116fb0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8116fb4:	f003 0304 	and.w	r3, r3, #4
 8116fb8:	2b00      	cmp	r3, #0
 8116fba:	d02f      	beq.n	811701c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8116fbc:	68fb      	ldr	r3, [r7, #12]
 8116fbe:	699b      	ldr	r3, [r3, #24]
 8116fc0:	693a      	ldr	r2, [r7, #16]
 8116fc2:	4413      	add	r3, r2
 8116fc4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8116fc6:	68ba      	ldr	r2, [r7, #8]
 8116fc8:	693b      	ldr	r3, [r7, #16]
 8116fca:	429a      	cmp	r2, r3
 8116fcc:	d90e      	bls.n	8116fec <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8116fce:	68fb      	ldr	r3, [r7, #12]
 8116fd0:	68ba      	ldr	r2, [r7, #8]
 8116fd2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8116fd4:	68fb      	ldr	r3, [r7, #12]
 8116fd6:	68fa      	ldr	r2, [r7, #12]
 8116fd8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8116fda:	4b1a      	ldr	r3, [pc, #104]	@ (8117044 <prvSwitchTimerLists+0xc4>)
 8116fdc:	681a      	ldr	r2, [r3, #0]
 8116fde:	68fb      	ldr	r3, [r7, #12]
 8116fe0:	3304      	adds	r3, #4
 8116fe2:	4619      	mov	r1, r3
 8116fe4:	4610      	mov	r0, r2
 8116fe6:	f7fc fb60 	bl	81136aa <vListInsert>
 8116fea:	e017      	b.n	811701c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8116fec:	2300      	movs	r3, #0
 8116fee:	9300      	str	r3, [sp, #0]
 8116ff0:	2300      	movs	r3, #0
 8116ff2:	693a      	ldr	r2, [r7, #16]
 8116ff4:	2100      	movs	r1, #0
 8116ff6:	68f8      	ldr	r0, [r7, #12]
 8116ff8:	f7ff fd58 	bl	8116aac <xTimerGenericCommand>
 8116ffc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8116ffe:	687b      	ldr	r3, [r7, #4]
 8117000:	2b00      	cmp	r3, #0
 8117002:	d10b      	bne.n	811701c <prvSwitchTimerLists+0x9c>
	__asm volatile
 8117004:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8117008:	f383 8811 	msr	BASEPRI, r3
 811700c:	f3bf 8f6f 	isb	sy
 8117010:	f3bf 8f4f 	dsb	sy
 8117014:	603b      	str	r3, [r7, #0]
}
 8117016:	bf00      	nop
 8117018:	bf00      	nop
 811701a:	e7fd      	b.n	8117018 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 811701c:	4b09      	ldr	r3, [pc, #36]	@ (8117044 <prvSwitchTimerLists+0xc4>)
 811701e:	681b      	ldr	r3, [r3, #0]
 8117020:	681b      	ldr	r3, [r3, #0]
 8117022:	2b00      	cmp	r3, #0
 8117024:	d1b0      	bne.n	8116f88 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8117026:	4b07      	ldr	r3, [pc, #28]	@ (8117044 <prvSwitchTimerLists+0xc4>)
 8117028:	681b      	ldr	r3, [r3, #0]
 811702a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 811702c:	4b06      	ldr	r3, [pc, #24]	@ (8117048 <prvSwitchTimerLists+0xc8>)
 811702e:	681b      	ldr	r3, [r3, #0]
 8117030:	4a04      	ldr	r2, [pc, #16]	@ (8117044 <prvSwitchTimerLists+0xc4>)
 8117032:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8117034:	4a04      	ldr	r2, [pc, #16]	@ (8117048 <prvSwitchTimerLists+0xc8>)
 8117036:	697b      	ldr	r3, [r7, #20]
 8117038:	6013      	str	r3, [r2, #0]
}
 811703a:	bf00      	nop
 811703c:	3718      	adds	r7, #24
 811703e:	46bd      	mov	sp, r7
 8117040:	bd80      	pop	{r7, pc}
 8117042:	bf00      	nop
 8117044:	1000b108 	.word	0x1000b108
 8117048:	1000b10c 	.word	0x1000b10c

0811704c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 811704c:	b580      	push	{r7, lr}
 811704e:	b082      	sub	sp, #8
 8117050:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8117052:	f7fc fcc1 	bl	81139d8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8117056:	4b15      	ldr	r3, [pc, #84]	@ (81170ac <prvCheckForValidListAndQueue+0x60>)
 8117058:	681b      	ldr	r3, [r3, #0]
 811705a:	2b00      	cmp	r3, #0
 811705c:	d120      	bne.n	81170a0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 811705e:	4814      	ldr	r0, [pc, #80]	@ (81170b0 <prvCheckForValidListAndQueue+0x64>)
 8117060:	f7fc fad2 	bl	8113608 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8117064:	4813      	ldr	r0, [pc, #76]	@ (81170b4 <prvCheckForValidListAndQueue+0x68>)
 8117066:	f7fc facf 	bl	8113608 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 811706a:	4b13      	ldr	r3, [pc, #76]	@ (81170b8 <prvCheckForValidListAndQueue+0x6c>)
 811706c:	4a10      	ldr	r2, [pc, #64]	@ (81170b0 <prvCheckForValidListAndQueue+0x64>)
 811706e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8117070:	4b12      	ldr	r3, [pc, #72]	@ (81170bc <prvCheckForValidListAndQueue+0x70>)
 8117072:	4a10      	ldr	r2, [pc, #64]	@ (81170b4 <prvCheckForValidListAndQueue+0x68>)
 8117074:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8117076:	2300      	movs	r3, #0
 8117078:	9300      	str	r3, [sp, #0]
 811707a:	4b11      	ldr	r3, [pc, #68]	@ (81170c0 <prvCheckForValidListAndQueue+0x74>)
 811707c:	4a11      	ldr	r2, [pc, #68]	@ (81170c4 <prvCheckForValidListAndQueue+0x78>)
 811707e:	2110      	movs	r1, #16
 8117080:	200a      	movs	r0, #10
 8117082:	f7fc fe35 	bl	8113cf0 <xQueueGenericCreateStatic>
 8117086:	4603      	mov	r3, r0
 8117088:	4a08      	ldr	r2, [pc, #32]	@ (81170ac <prvCheckForValidListAndQueue+0x60>)
 811708a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 811708c:	4b07      	ldr	r3, [pc, #28]	@ (81170ac <prvCheckForValidListAndQueue+0x60>)
 811708e:	681b      	ldr	r3, [r3, #0]
 8117090:	2b00      	cmp	r3, #0
 8117092:	d005      	beq.n	81170a0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8117094:	4b05      	ldr	r3, [pc, #20]	@ (81170ac <prvCheckForValidListAndQueue+0x60>)
 8117096:	681b      	ldr	r3, [r3, #0]
 8117098:	490b      	ldr	r1, [pc, #44]	@ (81170c8 <prvCheckForValidListAndQueue+0x7c>)
 811709a:	4618      	mov	r0, r3
 811709c:	f7fd fe1a 	bl	8114cd4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 81170a0:	f7fc fccc 	bl	8113a3c <vPortExitCritical>
}
 81170a4:	bf00      	nop
 81170a6:	46bd      	mov	sp, r7
 81170a8:	bd80      	pop	{r7, pc}
 81170aa:	bf00      	nop
 81170ac:	1000b110 	.word	0x1000b110
 81170b0:	1000b0e0 	.word	0x1000b0e0
 81170b4:	1000b0f4 	.word	0x1000b0f4
 81170b8:	1000b108 	.word	0x1000b108
 81170bc:	1000b10c 	.word	0x1000b10c
 81170c0:	1000b1bc 	.word	0x1000b1bc
 81170c4:	1000b11c 	.word	0x1000b11c
 81170c8:	08125430 	.word	0x08125430

081170cc <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 81170cc:	b480      	push	{r7}
 81170ce:	b083      	sub	sp, #12
 81170d0:	af00      	add	r7, sp, #0
 81170d2:	4603      	mov	r3, r0
 81170d4:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 81170d6:	88fb      	ldrh	r3, [r7, #6]
 81170d8:	021b      	lsls	r3, r3, #8
 81170da:	b21a      	sxth	r2, r3
 81170dc:	88fb      	ldrh	r3, [r7, #6]
 81170de:	0a1b      	lsrs	r3, r3, #8
 81170e0:	b29b      	uxth	r3, r3
 81170e2:	b21b      	sxth	r3, r3
 81170e4:	4313      	orrs	r3, r2
 81170e6:	b21b      	sxth	r3, r3
 81170e8:	b29b      	uxth	r3, r3
}
 81170ea:	4618      	mov	r0, r3
 81170ec:	370c      	adds	r7, #12
 81170ee:	46bd      	mov	sp, r7
 81170f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81170f4:	4770      	bx	lr

081170f6 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 81170f6:	b480      	push	{r7}
 81170f8:	b083      	sub	sp, #12
 81170fa:	af00      	add	r7, sp, #0
 81170fc:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 81170fe:	687b      	ldr	r3, [r7, #4]
 8117100:	061a      	lsls	r2, r3, #24
 8117102:	687b      	ldr	r3, [r7, #4]
 8117104:	021b      	lsls	r3, r3, #8
 8117106:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 811710a:	431a      	orrs	r2, r3
 811710c:	687b      	ldr	r3, [r7, #4]
 811710e:	0a1b      	lsrs	r3, r3, #8
 8117110:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8117114:	431a      	orrs	r2, r3
 8117116:	687b      	ldr	r3, [r7, #4]
 8117118:	0e1b      	lsrs	r3, r3, #24
 811711a:	4313      	orrs	r3, r2
}
 811711c:	4618      	mov	r0, r3
 811711e:	370c      	adds	r7, #12
 8117120:	46bd      	mov	sp, r7
 8117122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8117126:	4770      	bx	lr

08117128 <free_etharp_q>:
 *
 * @param q a qeueue of etharp_q_entry's to free
 */
static void
free_etharp_q(struct etharp_q_entry *q)
{
 8117128:	b580      	push	{r7, lr}
 811712a:	b084      	sub	sp, #16
 811712c:	af00      	add	r7, sp, #0
 811712e:	6078      	str	r0, [r7, #4]
  struct etharp_q_entry *r;
  LWIP_ASSERT("q != NULL", q != NULL);
 8117130:	687b      	ldr	r3, [r7, #4]
 8117132:	2b00      	cmp	r3, #0
 8117134:	d11e      	bne.n	8117174 <free_etharp_q+0x4c>
 8117136:	4b13      	ldr	r3, [pc, #76]	@ (8117184 <free_etharp_q+0x5c>)
 8117138:	2296      	movs	r2, #150	@ 0x96
 811713a:	4913      	ldr	r1, [pc, #76]	@ (8117188 <free_etharp_q+0x60>)
 811713c:	4813      	ldr	r0, [pc, #76]	@ (811718c <free_etharp_q+0x64>)
 811713e:	f00c fd6d 	bl	8123c1c <iprintf>
  while (q) {
 8117142:	e017      	b.n	8117174 <free_etharp_q+0x4c>
    r = q;
 8117144:	687b      	ldr	r3, [r7, #4]
 8117146:	60fb      	str	r3, [r7, #12]
    q = q->next;
 8117148:	687b      	ldr	r3, [r7, #4]
 811714a:	681b      	ldr	r3, [r3, #0]
 811714c:	607b      	str	r3, [r7, #4]
    LWIP_ASSERT("r->p != NULL", (r->p != NULL));
 811714e:	68fb      	ldr	r3, [r7, #12]
 8117150:	685b      	ldr	r3, [r3, #4]
 8117152:	2b00      	cmp	r3, #0
 8117154:	d105      	bne.n	8117162 <free_etharp_q+0x3a>
 8117156:	4b0b      	ldr	r3, [pc, #44]	@ (8117184 <free_etharp_q+0x5c>)
 8117158:	229a      	movs	r2, #154	@ 0x9a
 811715a:	490d      	ldr	r1, [pc, #52]	@ (8117190 <free_etharp_q+0x68>)
 811715c:	480b      	ldr	r0, [pc, #44]	@ (811718c <free_etharp_q+0x64>)
 811715e:	f00c fd5d 	bl	8123c1c <iprintf>
    pbuf_free(r->p);
 8117162:	68fb      	ldr	r3, [r7, #12]
 8117164:	685b      	ldr	r3, [r3, #4]
 8117166:	4618      	mov	r0, r3
 8117168:	f004 f9b8 	bl	811b4dc <pbuf_free>
    memp_free(MEMP_ARP_QUEUE, r);
 811716c:	68f9      	ldr	r1, [r7, #12]
 811716e:	2009      	movs	r0, #9
 8117170:	f003 fb12 	bl	811a798 <memp_free>
  while (q) {
 8117174:	687b      	ldr	r3, [r7, #4]
 8117176:	2b00      	cmp	r3, #0
 8117178:	d1e4      	bne.n	8117144 <free_etharp_q+0x1c>
  }
}
 811717a:	bf00      	nop
 811717c:	bf00      	nop
 811717e:	3710      	adds	r7, #16
 8117180:	46bd      	mov	sp, r7
 8117182:	bd80      	pop	{r7, pc}
 8117184:	08125438 	.word	0x08125438
 8117188:	081254b0 	.word	0x081254b0
 811718c:	081254bc 	.word	0x081254bc
 8117190:	081254e4 	.word	0x081254e4

08117194 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8117194:	b580      	push	{r7, lr}
 8117196:	b082      	sub	sp, #8
 8117198:	af00      	add	r7, sp, #0
 811719a:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 811719c:	4915      	ldr	r1, [pc, #84]	@ (81171f4 <etharp_free_entry+0x60>)
 811719e:	687a      	ldr	r2, [r7, #4]
 81171a0:	4613      	mov	r3, r2
 81171a2:	005b      	lsls	r3, r3, #1
 81171a4:	4413      	add	r3, r2
 81171a6:	00db      	lsls	r3, r3, #3
 81171a8:	440b      	add	r3, r1
 81171aa:	681b      	ldr	r3, [r3, #0]
 81171ac:	2b00      	cmp	r3, #0
 81171ae:	d013      	beq.n	81171d8 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 81171b0:	4910      	ldr	r1, [pc, #64]	@ (81171f4 <etharp_free_entry+0x60>)
 81171b2:	687a      	ldr	r2, [r7, #4]
 81171b4:	4613      	mov	r3, r2
 81171b6:	005b      	lsls	r3, r3, #1
 81171b8:	4413      	add	r3, r2
 81171ba:	00db      	lsls	r3, r3, #3
 81171bc:	440b      	add	r3, r1
 81171be:	681b      	ldr	r3, [r3, #0]
 81171c0:	4618      	mov	r0, r3
 81171c2:	f7ff ffb1 	bl	8117128 <free_etharp_q>
    arp_table[i].q = NULL;
 81171c6:	490b      	ldr	r1, [pc, #44]	@ (81171f4 <etharp_free_entry+0x60>)
 81171c8:	687a      	ldr	r2, [r7, #4]
 81171ca:	4613      	mov	r3, r2
 81171cc:	005b      	lsls	r3, r3, #1
 81171ce:	4413      	add	r3, r2
 81171d0:	00db      	lsls	r3, r3, #3
 81171d2:	440b      	add	r3, r1
 81171d4:	2200      	movs	r2, #0
 81171d6:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 81171d8:	4906      	ldr	r1, [pc, #24]	@ (81171f4 <etharp_free_entry+0x60>)
 81171da:	687a      	ldr	r2, [r7, #4]
 81171dc:	4613      	mov	r3, r2
 81171de:	005b      	lsls	r3, r3, #1
 81171e0:	4413      	add	r3, r2
 81171e2:	00db      	lsls	r3, r3, #3
 81171e4:	440b      	add	r3, r1
 81171e6:	3314      	adds	r3, #20
 81171e8:	2200      	movs	r2, #0
 81171ea:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 81171ec:	bf00      	nop
 81171ee:	3708      	adds	r7, #8
 81171f0:	46bd      	mov	sp, r7
 81171f2:	bd80      	pop	{r7, pc}
 81171f4:	1000b20c 	.word	0x1000b20c

081171f8 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 81171f8:	b580      	push	{r7, lr}
 81171fa:	b082      	sub	sp, #8
 81171fc:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 81171fe:	2300      	movs	r3, #0
 8117200:	607b      	str	r3, [r7, #4]
 8117202:	e09a      	b.n	811733a <etharp_tmr+0x142>
    u8_t state = arp_table[i].state;
 8117204:	4951      	ldr	r1, [pc, #324]	@ (811734c <etharp_tmr+0x154>)
 8117206:	687a      	ldr	r2, [r7, #4]
 8117208:	4613      	mov	r3, r2
 811720a:	005b      	lsls	r3, r3, #1
 811720c:	4413      	add	r3, r2
 811720e:	00db      	lsls	r3, r3, #3
 8117210:	440b      	add	r3, r1
 8117212:	3314      	adds	r3, #20
 8117214:	781b      	ldrb	r3, [r3, #0]
 8117216:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8117218:	78fb      	ldrb	r3, [r7, #3]
 811721a:	2b00      	cmp	r3, #0
 811721c:	f000 808a 	beq.w	8117334 <etharp_tmr+0x13c>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
 8117220:	78fb      	ldrb	r3, [r7, #3]
 8117222:	2b05      	cmp	r3, #5
 8117224:	f000 8086 	beq.w	8117334 <etharp_tmr+0x13c>
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8117228:	4948      	ldr	r1, [pc, #288]	@ (811734c <etharp_tmr+0x154>)
 811722a:	687a      	ldr	r2, [r7, #4]
 811722c:	4613      	mov	r3, r2
 811722e:	005b      	lsls	r3, r3, #1
 8117230:	4413      	add	r3, r2
 8117232:	00db      	lsls	r3, r3, #3
 8117234:	440b      	add	r3, r1
 8117236:	3312      	adds	r3, #18
 8117238:	881b      	ldrh	r3, [r3, #0]
 811723a:	3301      	adds	r3, #1
 811723c:	b298      	uxth	r0, r3
 811723e:	4943      	ldr	r1, [pc, #268]	@ (811734c <etharp_tmr+0x154>)
 8117240:	687a      	ldr	r2, [r7, #4]
 8117242:	4613      	mov	r3, r2
 8117244:	005b      	lsls	r3, r3, #1
 8117246:	4413      	add	r3, r2
 8117248:	00db      	lsls	r3, r3, #3
 811724a:	440b      	add	r3, r1
 811724c:	3312      	adds	r3, #18
 811724e:	4602      	mov	r2, r0
 8117250:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8117252:	493e      	ldr	r1, [pc, #248]	@ (811734c <etharp_tmr+0x154>)
 8117254:	687a      	ldr	r2, [r7, #4]
 8117256:	4613      	mov	r3, r2
 8117258:	005b      	lsls	r3, r3, #1
 811725a:	4413      	add	r3, r2
 811725c:	00db      	lsls	r3, r3, #3
 811725e:	440b      	add	r3, r1
 8117260:	3312      	adds	r3, #18
 8117262:	881b      	ldrh	r3, [r3, #0]
 8117264:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8117268:	d215      	bcs.n	8117296 <etharp_tmr+0x9e>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 811726a:	4938      	ldr	r1, [pc, #224]	@ (811734c <etharp_tmr+0x154>)
 811726c:	687a      	ldr	r2, [r7, #4]
 811726e:	4613      	mov	r3, r2
 8117270:	005b      	lsls	r3, r3, #1
 8117272:	4413      	add	r3, r2
 8117274:	00db      	lsls	r3, r3, #3
 8117276:	440b      	add	r3, r1
 8117278:	3314      	adds	r3, #20
 811727a:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 811727c:	2b01      	cmp	r3, #1
 811727e:	d10e      	bne.n	811729e <etharp_tmr+0xa6>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8117280:	4932      	ldr	r1, [pc, #200]	@ (811734c <etharp_tmr+0x154>)
 8117282:	687a      	ldr	r2, [r7, #4]
 8117284:	4613      	mov	r3, r2
 8117286:	005b      	lsls	r3, r3, #1
 8117288:	4413      	add	r3, r2
 811728a:	00db      	lsls	r3, r3, #3
 811728c:	440b      	add	r3, r1
 811728e:	3312      	adds	r3, #18
 8117290:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8117292:	2b04      	cmp	r3, #4
 8117294:	d903      	bls.n	811729e <etharp_tmr+0xa6>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8117296:	6878      	ldr	r0, [r7, #4]
 8117298:	f7ff ff7c 	bl	8117194 <etharp_free_entry>
 811729c:	e04a      	b.n	8117334 <etharp_tmr+0x13c>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 811729e:	492b      	ldr	r1, [pc, #172]	@ (811734c <etharp_tmr+0x154>)
 81172a0:	687a      	ldr	r2, [r7, #4]
 81172a2:	4613      	mov	r3, r2
 81172a4:	005b      	lsls	r3, r3, #1
 81172a6:	4413      	add	r3, r2
 81172a8:	00db      	lsls	r3, r3, #3
 81172aa:	440b      	add	r3, r1
 81172ac:	3314      	adds	r3, #20
 81172ae:	781b      	ldrb	r3, [r3, #0]
 81172b0:	2b03      	cmp	r3, #3
 81172b2:	d10a      	bne.n	81172ca <etharp_tmr+0xd2>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 81172b4:	4925      	ldr	r1, [pc, #148]	@ (811734c <etharp_tmr+0x154>)
 81172b6:	687a      	ldr	r2, [r7, #4]
 81172b8:	4613      	mov	r3, r2
 81172ba:	005b      	lsls	r3, r3, #1
 81172bc:	4413      	add	r3, r2
 81172be:	00db      	lsls	r3, r3, #3
 81172c0:	440b      	add	r3, r1
 81172c2:	3314      	adds	r3, #20
 81172c4:	2204      	movs	r2, #4
 81172c6:	701a      	strb	r2, [r3, #0]
 81172c8:	e034      	b.n	8117334 <etharp_tmr+0x13c>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 81172ca:	4920      	ldr	r1, [pc, #128]	@ (811734c <etharp_tmr+0x154>)
 81172cc:	687a      	ldr	r2, [r7, #4]
 81172ce:	4613      	mov	r3, r2
 81172d0:	005b      	lsls	r3, r3, #1
 81172d2:	4413      	add	r3, r2
 81172d4:	00db      	lsls	r3, r3, #3
 81172d6:	440b      	add	r3, r1
 81172d8:	3314      	adds	r3, #20
 81172da:	781b      	ldrb	r3, [r3, #0]
 81172dc:	2b04      	cmp	r3, #4
 81172de:	d10a      	bne.n	81172f6 <etharp_tmr+0xfe>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 81172e0:	491a      	ldr	r1, [pc, #104]	@ (811734c <etharp_tmr+0x154>)
 81172e2:	687a      	ldr	r2, [r7, #4]
 81172e4:	4613      	mov	r3, r2
 81172e6:	005b      	lsls	r3, r3, #1
 81172e8:	4413      	add	r3, r2
 81172ea:	00db      	lsls	r3, r3, #3
 81172ec:	440b      	add	r3, r1
 81172ee:	3314      	adds	r3, #20
 81172f0:	2202      	movs	r2, #2
 81172f2:	701a      	strb	r2, [r3, #0]
 81172f4:	e01e      	b.n	8117334 <etharp_tmr+0x13c>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 81172f6:	4915      	ldr	r1, [pc, #84]	@ (811734c <etharp_tmr+0x154>)
 81172f8:	687a      	ldr	r2, [r7, #4]
 81172fa:	4613      	mov	r3, r2
 81172fc:	005b      	lsls	r3, r3, #1
 81172fe:	4413      	add	r3, r2
 8117300:	00db      	lsls	r3, r3, #3
 8117302:	440b      	add	r3, r1
 8117304:	3314      	adds	r3, #20
 8117306:	781b      	ldrb	r3, [r3, #0]
 8117308:	2b01      	cmp	r3, #1
 811730a:	d113      	bne.n	8117334 <etharp_tmr+0x13c>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 811730c:	490f      	ldr	r1, [pc, #60]	@ (811734c <etharp_tmr+0x154>)
 811730e:	687a      	ldr	r2, [r7, #4]
 8117310:	4613      	mov	r3, r2
 8117312:	005b      	lsls	r3, r3, #1
 8117314:	4413      	add	r3, r2
 8117316:	00db      	lsls	r3, r3, #3
 8117318:	440b      	add	r3, r1
 811731a:	3308      	adds	r3, #8
 811731c:	6818      	ldr	r0, [r3, #0]
 811731e:	687a      	ldr	r2, [r7, #4]
 8117320:	4613      	mov	r3, r2
 8117322:	005b      	lsls	r3, r3, #1
 8117324:	4413      	add	r3, r2
 8117326:	00db      	lsls	r3, r3, #3
 8117328:	4a08      	ldr	r2, [pc, #32]	@ (811734c <etharp_tmr+0x154>)
 811732a:	4413      	add	r3, r2
 811732c:	3304      	adds	r3, #4
 811732e:	4619      	mov	r1, r3
 8117330:	f000 fefe 	bl	8118130 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8117334:	687b      	ldr	r3, [r7, #4]
 8117336:	3301      	adds	r3, #1
 8117338:	607b      	str	r3, [r7, #4]
 811733a:	687b      	ldr	r3, [r7, #4]
 811733c:	2b09      	cmp	r3, #9
 811733e:	f77f af61 	ble.w	8117204 <etharp_tmr+0xc>
      }
    }
  }
}
 8117342:	bf00      	nop
 8117344:	bf00      	nop
 8117346:	3708      	adds	r7, #8
 8117348:	46bd      	mov	sp, r7
 811734a:	bd80      	pop	{r7, pc}
 811734c:	1000b20c 	.word	0x1000b20c

08117350 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8117350:	b580      	push	{r7, lr}
 8117352:	b08a      	sub	sp, #40	@ 0x28
 8117354:	af00      	add	r7, sp, #0
 8117356:	60f8      	str	r0, [r7, #12]
 8117358:	460b      	mov	r3, r1
 811735a:	607a      	str	r2, [r7, #4]
 811735c:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 811735e:	230a      	movs	r3, #10
 8117360:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8117362:	230a      	movs	r3, #10
 8117364:	84bb      	strh	r3, [r7, #36]	@ 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8117366:	230a      	movs	r3, #10
 8117368:	847b      	strh	r3, [r7, #34]	@ 0x22
  s16_t i = 0;
 811736a:	2300      	movs	r3, #0
 811736c:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 811736e:	230a      	movs	r3, #10
 8117370:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8117372:	2300      	movs	r3, #0
 8117374:	83bb      	strh	r3, [r7, #28]
 8117376:	2300      	movs	r3, #0
 8117378:	837b      	strh	r3, [r7, #26]
 811737a:	2300      	movs	r3, #0
 811737c:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 811737e:	2300      	movs	r3, #0
 8117380:	843b      	strh	r3, [r7, #32]
 8117382:	e0b1      	b.n	81174e8 <etharp_find_entry+0x198>
    u8_t state = arp_table[i].state;
 8117384:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8117388:	49a7      	ldr	r1, [pc, #668]	@ (8117628 <etharp_find_entry+0x2d8>)
 811738a:	4613      	mov	r3, r2
 811738c:	005b      	lsls	r3, r3, #1
 811738e:	4413      	add	r3, r2
 8117390:	00db      	lsls	r3, r3, #3
 8117392:	440b      	add	r3, r1
 8117394:	3314      	adds	r3, #20
 8117396:	781b      	ldrb	r3, [r3, #0]
 8117398:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 811739a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 811739e:	2b0a      	cmp	r3, #10
 81173a0:	d105      	bne.n	81173ae <etharp_find_entry+0x5e>
 81173a2:	7dfb      	ldrb	r3, [r7, #23]
 81173a4:	2b00      	cmp	r3, #0
 81173a6:	d102      	bne.n	81173ae <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 81173a8:	8c3b      	ldrh	r3, [r7, #32]
 81173aa:	847b      	strh	r3, [r7, #34]	@ 0x22
 81173ac:	e098      	b.n	81174e0 <etharp_find_entry+0x190>
    } else if (state != ETHARP_STATE_EMPTY) {
 81173ae:	7dfb      	ldrb	r3, [r7, #23]
 81173b0:	2b00      	cmp	r3, #0
 81173b2:	f000 8095 	beq.w	81174e0 <etharp_find_entry+0x190>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 81173b6:	7dfb      	ldrb	r3, [r7, #23]
 81173b8:	2b01      	cmp	r3, #1
 81173ba:	d009      	beq.n	81173d0 <etharp_find_entry+0x80>
 81173bc:	7dfb      	ldrb	r3, [r7, #23]
 81173be:	2b01      	cmp	r3, #1
 81173c0:	d806      	bhi.n	81173d0 <etharp_find_entry+0x80>
 81173c2:	4b9a      	ldr	r3, [pc, #616]	@ (811762c <etharp_find_entry+0x2dc>)
 81173c4:	f240 1223 	movw	r2, #291	@ 0x123
 81173c8:	4999      	ldr	r1, [pc, #612]	@ (8117630 <etharp_find_entry+0x2e0>)
 81173ca:	489a      	ldr	r0, [pc, #616]	@ (8117634 <etharp_find_entry+0x2e4>)
 81173cc:	f00c fc26 	bl	8123c1c <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 81173d0:	68fb      	ldr	r3, [r7, #12]
 81173d2:	2b00      	cmp	r3, #0
 81173d4:	d020      	beq.n	8117418 <etharp_find_entry+0xc8>
 81173d6:	68fb      	ldr	r3, [r7, #12]
 81173d8:	6819      	ldr	r1, [r3, #0]
 81173da:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 81173de:	4892      	ldr	r0, [pc, #584]	@ (8117628 <etharp_find_entry+0x2d8>)
 81173e0:	4613      	mov	r3, r2
 81173e2:	005b      	lsls	r3, r3, #1
 81173e4:	4413      	add	r3, r2
 81173e6:	00db      	lsls	r3, r3, #3
 81173e8:	4403      	add	r3, r0
 81173ea:	3304      	adds	r3, #4
 81173ec:	681b      	ldr	r3, [r3, #0]
 81173ee:	4299      	cmp	r1, r3
 81173f0:	d112      	bne.n	8117418 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 81173f2:	687b      	ldr	r3, [r7, #4]
 81173f4:	2b00      	cmp	r3, #0
 81173f6:	d00c      	beq.n	8117412 <etharp_find_entry+0xc2>
 81173f8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 81173fc:	498a      	ldr	r1, [pc, #552]	@ (8117628 <etharp_find_entry+0x2d8>)
 81173fe:	4613      	mov	r3, r2
 8117400:	005b      	lsls	r3, r3, #1
 8117402:	4413      	add	r3, r2
 8117404:	00db      	lsls	r3, r3, #3
 8117406:	440b      	add	r3, r1
 8117408:	3308      	adds	r3, #8
 811740a:	681b      	ldr	r3, [r3, #0]
 811740c:	687a      	ldr	r2, [r7, #4]
 811740e:	429a      	cmp	r2, r3
 8117410:	d102      	bne.n	8117418 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8117412:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8117416:	e103      	b.n	8117620 <etharp_find_entry+0x2d0>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8117418:	7dfb      	ldrb	r3, [r7, #23]
 811741a:	2b01      	cmp	r3, #1
 811741c:	d140      	bne.n	81174a0 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 811741e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8117422:	4981      	ldr	r1, [pc, #516]	@ (8117628 <etharp_find_entry+0x2d8>)
 8117424:	4613      	mov	r3, r2
 8117426:	005b      	lsls	r3, r3, #1
 8117428:	4413      	add	r3, r2
 811742a:	00db      	lsls	r3, r3, #3
 811742c:	440b      	add	r3, r1
 811742e:	681b      	ldr	r3, [r3, #0]
 8117430:	2b00      	cmp	r3, #0
 8117432:	d01a      	beq.n	811746a <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8117434:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8117438:	497b      	ldr	r1, [pc, #492]	@ (8117628 <etharp_find_entry+0x2d8>)
 811743a:	4613      	mov	r3, r2
 811743c:	005b      	lsls	r3, r3, #1
 811743e:	4413      	add	r3, r2
 8117440:	00db      	lsls	r3, r3, #3
 8117442:	440b      	add	r3, r1
 8117444:	3312      	adds	r3, #18
 8117446:	881b      	ldrh	r3, [r3, #0]
 8117448:	8bba      	ldrh	r2, [r7, #28]
 811744a:	429a      	cmp	r2, r3
 811744c:	d848      	bhi.n	81174e0 <etharp_find_entry+0x190>
            old_queue = i;
 811744e:	8c3b      	ldrh	r3, [r7, #32]
 8117450:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8117452:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8117456:	4974      	ldr	r1, [pc, #464]	@ (8117628 <etharp_find_entry+0x2d8>)
 8117458:	4613      	mov	r3, r2
 811745a:	005b      	lsls	r3, r3, #1
 811745c:	4413      	add	r3, r2
 811745e:	00db      	lsls	r3, r3, #3
 8117460:	440b      	add	r3, r1
 8117462:	3312      	adds	r3, #18
 8117464:	881b      	ldrh	r3, [r3, #0]
 8117466:	83bb      	strh	r3, [r7, #28]
 8117468:	e03a      	b.n	81174e0 <etharp_find_entry+0x190>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 811746a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 811746e:	496e      	ldr	r1, [pc, #440]	@ (8117628 <etharp_find_entry+0x2d8>)
 8117470:	4613      	mov	r3, r2
 8117472:	005b      	lsls	r3, r3, #1
 8117474:	4413      	add	r3, r2
 8117476:	00db      	lsls	r3, r3, #3
 8117478:	440b      	add	r3, r1
 811747a:	3312      	adds	r3, #18
 811747c:	881b      	ldrh	r3, [r3, #0]
 811747e:	8b7a      	ldrh	r2, [r7, #26]
 8117480:	429a      	cmp	r2, r3
 8117482:	d82d      	bhi.n	81174e0 <etharp_find_entry+0x190>
            old_pending = i;
 8117484:	8c3b      	ldrh	r3, [r7, #32]
 8117486:	84fb      	strh	r3, [r7, #38]	@ 0x26
            age_pending = arp_table[i].ctime;
 8117488:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 811748c:	4966      	ldr	r1, [pc, #408]	@ (8117628 <etharp_find_entry+0x2d8>)
 811748e:	4613      	mov	r3, r2
 8117490:	005b      	lsls	r3, r3, #1
 8117492:	4413      	add	r3, r2
 8117494:	00db      	lsls	r3, r3, #3
 8117496:	440b      	add	r3, r1
 8117498:	3312      	adds	r3, #18
 811749a:	881b      	ldrh	r3, [r3, #0]
 811749c:	837b      	strh	r3, [r7, #26]
 811749e:	e01f      	b.n	81174e0 <etharp_find_entry+0x190>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 81174a0:	7dfb      	ldrb	r3, [r7, #23]
 81174a2:	2b01      	cmp	r3, #1
 81174a4:	d91c      	bls.n	81174e0 <etharp_find_entry+0x190>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
 81174a6:	7dfb      	ldrb	r3, [r7, #23]
 81174a8:	2b04      	cmp	r3, #4
 81174aa:	d819      	bhi.n	81174e0 <etharp_find_entry+0x190>
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 81174ac:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 81174b0:	495d      	ldr	r1, [pc, #372]	@ (8117628 <etharp_find_entry+0x2d8>)
 81174b2:	4613      	mov	r3, r2
 81174b4:	005b      	lsls	r3, r3, #1
 81174b6:	4413      	add	r3, r2
 81174b8:	00db      	lsls	r3, r3, #3
 81174ba:	440b      	add	r3, r1
 81174bc:	3312      	adds	r3, #18
 81174be:	881b      	ldrh	r3, [r3, #0]
 81174c0:	8b3a      	ldrh	r2, [r7, #24]
 81174c2:	429a      	cmp	r2, r3
 81174c4:	d80c      	bhi.n	81174e0 <etharp_find_entry+0x190>
            old_stable = i;
 81174c6:	8c3b      	ldrh	r3, [r7, #32]
 81174c8:	84bb      	strh	r3, [r7, #36]	@ 0x24
            age_stable = arp_table[i].ctime;
 81174ca:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 81174ce:	4956      	ldr	r1, [pc, #344]	@ (8117628 <etharp_find_entry+0x2d8>)
 81174d0:	4613      	mov	r3, r2
 81174d2:	005b      	lsls	r3, r3, #1
 81174d4:	4413      	add	r3, r2
 81174d6:	00db      	lsls	r3, r3, #3
 81174d8:	440b      	add	r3, r1
 81174da:	3312      	adds	r3, #18
 81174dc:	881b      	ldrh	r3, [r3, #0]
 81174de:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 81174e0:	8c3b      	ldrh	r3, [r7, #32]
 81174e2:	3301      	adds	r3, #1
 81174e4:	b29b      	uxth	r3, r3
 81174e6:	843b      	strh	r3, [r7, #32]
 81174e8:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 81174ec:	2b09      	cmp	r3, #9
 81174ee:	f77f af49 	ble.w	8117384 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 81174f2:	7afb      	ldrb	r3, [r7, #11]
 81174f4:	f003 0302 	and.w	r3, r3, #2
 81174f8:	2b00      	cmp	r3, #0
 81174fa:	d108      	bne.n	811750e <etharp_find_entry+0x1be>
 81174fc:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8117500:	2b0a      	cmp	r3, #10
 8117502:	d107      	bne.n	8117514 <etharp_find_entry+0x1c4>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8117504:	7afb      	ldrb	r3, [r7, #11]
 8117506:	f003 0301 	and.w	r3, r3, #1
 811750a:	2b00      	cmp	r3, #0
 811750c:	d102      	bne.n	8117514 <etharp_find_entry+0x1c4>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 811750e:	f04f 33ff 	mov.w	r3, #4294967295
 8117512:	e085      	b.n	8117620 <etharp_find_entry+0x2d0>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8117514:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8117518:	2b09      	cmp	r3, #9
 811751a:	dc02      	bgt.n	8117522 <etharp_find_entry+0x1d2>
    i = empty;
 811751c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 811751e:	843b      	strh	r3, [r7, #32]
 8117520:	e039      	b.n	8117596 <etharp_find_entry+0x246>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8117522:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8117526:	2b09      	cmp	r3, #9
 8117528:	dc14      	bgt.n	8117554 <etharp_find_entry+0x204>
      /* recycle oldest stable*/
      i = old_stable;
 811752a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 811752c:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 811752e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8117532:	493d      	ldr	r1, [pc, #244]	@ (8117628 <etharp_find_entry+0x2d8>)
 8117534:	4613      	mov	r3, r2
 8117536:	005b      	lsls	r3, r3, #1
 8117538:	4413      	add	r3, r2
 811753a:	00db      	lsls	r3, r3, #3
 811753c:	440b      	add	r3, r1
 811753e:	681b      	ldr	r3, [r3, #0]
 8117540:	2b00      	cmp	r3, #0
 8117542:	d018      	beq.n	8117576 <etharp_find_entry+0x226>
 8117544:	4b39      	ldr	r3, [pc, #228]	@ (811762c <etharp_find_entry+0x2dc>)
 8117546:	f240 126d 	movw	r2, #365	@ 0x16d
 811754a:	493b      	ldr	r1, [pc, #236]	@ (8117638 <etharp_find_entry+0x2e8>)
 811754c:	4839      	ldr	r0, [pc, #228]	@ (8117634 <etharp_find_entry+0x2e4>)
 811754e:	f00c fb65 	bl	8123c1c <iprintf>
 8117552:	e010      	b.n	8117576 <etharp_find_entry+0x226>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8117554:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8117558:	2b09      	cmp	r3, #9
 811755a:	dc02      	bgt.n	8117562 <etharp_find_entry+0x212>
      /* recycle oldest pending */
      i = old_pending;
 811755c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 811755e:	843b      	strh	r3, [r7, #32]
 8117560:	e009      	b.n	8117576 <etharp_find_entry+0x226>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8117562:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8117566:	2b09      	cmp	r3, #9
 8117568:	dc02      	bgt.n	8117570 <etharp_find_entry+0x220>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 811756a:	8bfb      	ldrh	r3, [r7, #30]
 811756c:	843b      	strh	r3, [r7, #32]
 811756e:	e002      	b.n	8117576 <etharp_find_entry+0x226>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8117570:	f04f 33ff 	mov.w	r3, #4294967295
 8117574:	e054      	b.n	8117620 <etharp_find_entry+0x2d0>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8117576:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 811757a:	2b09      	cmp	r3, #9
 811757c:	dd06      	ble.n	811758c <etharp_find_entry+0x23c>
 811757e:	4b2b      	ldr	r3, [pc, #172]	@ (811762c <etharp_find_entry+0x2dc>)
 8117580:	f240 127f 	movw	r2, #383	@ 0x17f
 8117584:	492d      	ldr	r1, [pc, #180]	@ (811763c <etharp_find_entry+0x2ec>)
 8117586:	482b      	ldr	r0, [pc, #172]	@ (8117634 <etharp_find_entry+0x2e4>)
 8117588:	f00c fb48 	bl	8123c1c <iprintf>
    etharp_free_entry(i);
 811758c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8117590:	4618      	mov	r0, r3
 8117592:	f7ff fdff 	bl	8117194 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8117596:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 811759a:	2b09      	cmp	r3, #9
 811759c:	dd06      	ble.n	81175ac <etharp_find_entry+0x25c>
 811759e:	4b23      	ldr	r3, [pc, #140]	@ (811762c <etharp_find_entry+0x2dc>)
 81175a0:	f240 1283 	movw	r2, #387	@ 0x183
 81175a4:	4925      	ldr	r1, [pc, #148]	@ (811763c <etharp_find_entry+0x2ec>)
 81175a6:	4823      	ldr	r0, [pc, #140]	@ (8117634 <etharp_find_entry+0x2e4>)
 81175a8:	f00c fb38 	bl	8123c1c <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 81175ac:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 81175b0:	491d      	ldr	r1, [pc, #116]	@ (8117628 <etharp_find_entry+0x2d8>)
 81175b2:	4613      	mov	r3, r2
 81175b4:	005b      	lsls	r3, r3, #1
 81175b6:	4413      	add	r3, r2
 81175b8:	00db      	lsls	r3, r3, #3
 81175ba:	440b      	add	r3, r1
 81175bc:	3314      	adds	r3, #20
 81175be:	781b      	ldrb	r3, [r3, #0]
 81175c0:	2b00      	cmp	r3, #0
 81175c2:	d006      	beq.n	81175d2 <etharp_find_entry+0x282>
 81175c4:	4b19      	ldr	r3, [pc, #100]	@ (811762c <etharp_find_entry+0x2dc>)
 81175c6:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 81175ca:	491d      	ldr	r1, [pc, #116]	@ (8117640 <etharp_find_entry+0x2f0>)
 81175cc:	4819      	ldr	r0, [pc, #100]	@ (8117634 <etharp_find_entry+0x2e4>)
 81175ce:	f00c fb25 	bl	8123c1c <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 81175d2:	68fb      	ldr	r3, [r7, #12]
 81175d4:	2b00      	cmp	r3, #0
 81175d6:	d00b      	beq.n	81175f0 <etharp_find_entry+0x2a0>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 81175d8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 81175dc:	68fb      	ldr	r3, [r7, #12]
 81175de:	6819      	ldr	r1, [r3, #0]
 81175e0:	4811      	ldr	r0, [pc, #68]	@ (8117628 <etharp_find_entry+0x2d8>)
 81175e2:	4613      	mov	r3, r2
 81175e4:	005b      	lsls	r3, r3, #1
 81175e6:	4413      	add	r3, r2
 81175e8:	00db      	lsls	r3, r3, #3
 81175ea:	4403      	add	r3, r0
 81175ec:	3304      	adds	r3, #4
 81175ee:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 81175f0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 81175f4:	490c      	ldr	r1, [pc, #48]	@ (8117628 <etharp_find_entry+0x2d8>)
 81175f6:	4613      	mov	r3, r2
 81175f8:	005b      	lsls	r3, r3, #1
 81175fa:	4413      	add	r3, r2
 81175fc:	00db      	lsls	r3, r3, #3
 81175fe:	440b      	add	r3, r1
 8117600:	3312      	adds	r3, #18
 8117602:	2200      	movs	r2, #0
 8117604:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8117606:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 811760a:	4907      	ldr	r1, [pc, #28]	@ (8117628 <etharp_find_entry+0x2d8>)
 811760c:	4613      	mov	r3, r2
 811760e:	005b      	lsls	r3, r3, #1
 8117610:	4413      	add	r3, r2
 8117612:	00db      	lsls	r3, r3, #3
 8117614:	440b      	add	r3, r1
 8117616:	3308      	adds	r3, #8
 8117618:	687a      	ldr	r2, [r7, #4]
 811761a:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 811761c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8117620:	4618      	mov	r0, r3
 8117622:	3728      	adds	r7, #40	@ 0x28
 8117624:	46bd      	mov	sp, r7
 8117626:	bd80      	pop	{r7, pc}
 8117628:	1000b20c 	.word	0x1000b20c
 811762c:	08125438 	.word	0x08125438
 8117630:	081254f4 	.word	0x081254f4
 8117634:	081254bc 	.word	0x081254bc
 8117638:	08125534 	.word	0x08125534
 811763c:	0812554c 	.word	0x0812554c
 8117640:	08125560 	.word	0x08125560

08117644 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8117644:	b580      	push	{r7, lr}
 8117646:	b08a      	sub	sp, #40	@ 0x28
 8117648:	af02      	add	r7, sp, #8
 811764a:	60f8      	str	r0, [r7, #12]
 811764c:	60b9      	str	r1, [r7, #8]
 811764e:	607a      	str	r2, [r7, #4]
 8117650:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8117652:	68fb      	ldr	r3, [r7, #12]
 8117654:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8117658:	2b06      	cmp	r3, #6
 811765a:	d006      	beq.n	811766a <etharp_update_arp_entry+0x26>
 811765c:	4b5c      	ldr	r3, [pc, #368]	@ (81177d0 <etharp_update_arp_entry+0x18c>)
 811765e:	f240 12a9 	movw	r2, #425	@ 0x1a9
 8117662:	495c      	ldr	r1, [pc, #368]	@ (81177d4 <etharp_update_arp_entry+0x190>)
 8117664:	485c      	ldr	r0, [pc, #368]	@ (81177d8 <etharp_update_arp_entry+0x194>)
 8117666:	f00c fad9 	bl	8123c1c <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 811766a:	68bb      	ldr	r3, [r7, #8]
 811766c:	2b00      	cmp	r3, #0
 811766e:	d012      	beq.n	8117696 <etharp_update_arp_entry+0x52>
 8117670:	68bb      	ldr	r3, [r7, #8]
 8117672:	681b      	ldr	r3, [r3, #0]
 8117674:	2b00      	cmp	r3, #0
 8117676:	d00e      	beq.n	8117696 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8117678:	68bb      	ldr	r3, [r7, #8]
 811767a:	681b      	ldr	r3, [r3, #0]
 811767c:	68f9      	ldr	r1, [r7, #12]
 811767e:	4618      	mov	r0, r3
 8117680:	f001 fb5c 	bl	8118d3c <ip4_addr_isbroadcast_u32>
 8117684:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8117686:	2b00      	cmp	r3, #0
 8117688:	d105      	bne.n	8117696 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 811768a:	68bb      	ldr	r3, [r7, #8]
 811768c:	681b      	ldr	r3, [r3, #0]
 811768e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8117692:	2be0      	cmp	r3, #224	@ 0xe0
 8117694:	d102      	bne.n	811769c <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8117696:	f06f 030f 	mvn.w	r3, #15
 811769a:	e095      	b.n	81177c8 <etharp_update_arp_entry+0x184>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 811769c:	78fb      	ldrb	r3, [r7, #3]
 811769e:	68fa      	ldr	r2, [r7, #12]
 81176a0:	4619      	mov	r1, r3
 81176a2:	68b8      	ldr	r0, [r7, #8]
 81176a4:	f7ff fe54 	bl	8117350 <etharp_find_entry>
 81176a8:	4603      	mov	r3, r0
 81176aa:	83fb      	strh	r3, [r7, #30]
  /* bail out if no entry could be found */
  if (i < 0) {
 81176ac:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 81176b0:	2b00      	cmp	r3, #0
 81176b2:	da02      	bge.n	81176ba <etharp_update_arp_entry+0x76>
    return (err_t)i;
 81176b4:	8bfb      	ldrh	r3, [r7, #30]
 81176b6:	b25b      	sxtb	r3, r3
 81176b8:	e086      	b.n	81177c8 <etharp_update_arp_entry+0x184>
  }

#if ETHARP_SUPPORT_STATIC_ENTRIES
  if (flags & ETHARP_FLAG_STATIC_ENTRY) {
 81176ba:	78fb      	ldrb	r3, [r7, #3]
 81176bc:	f003 0304 	and.w	r3, r3, #4
 81176c0:	2b00      	cmp	r3, #0
 81176c2:	d00b      	beq.n	81176dc <etharp_update_arp_entry+0x98>
    /* record static type */
    arp_table[i].state = ETHARP_STATE_STATIC;
 81176c4:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 81176c8:	4944      	ldr	r1, [pc, #272]	@ (81177dc <etharp_update_arp_entry+0x198>)
 81176ca:	4613      	mov	r3, r2
 81176cc:	005b      	lsls	r3, r3, #1
 81176ce:	4413      	add	r3, r2
 81176d0:	00db      	lsls	r3, r3, #3
 81176d2:	440b      	add	r3, r1
 81176d4:	3314      	adds	r3, #20
 81176d6:	2205      	movs	r2, #5
 81176d8:	701a      	strb	r2, [r3, #0]
 81176da:	e019      	b.n	8117710 <etharp_update_arp_entry+0xcc>
  } else if (arp_table[i].state == ETHARP_STATE_STATIC) {
 81176dc:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 81176e0:	493e      	ldr	r1, [pc, #248]	@ (81177dc <etharp_update_arp_entry+0x198>)
 81176e2:	4613      	mov	r3, r2
 81176e4:	005b      	lsls	r3, r3, #1
 81176e6:	4413      	add	r3, r2
 81176e8:	00db      	lsls	r3, r3, #3
 81176ea:	440b      	add	r3, r1
 81176ec:	3314      	adds	r3, #20
 81176ee:	781b      	ldrb	r3, [r3, #0]
 81176f0:	2b05      	cmp	r3, #5
 81176f2:	d102      	bne.n	81176fa <etharp_update_arp_entry+0xb6>
    /* found entry is a static type, don't overwrite it */
    return ERR_VAL;
 81176f4:	f06f 0305 	mvn.w	r3, #5
 81176f8:	e066      	b.n	81177c8 <etharp_update_arp_entry+0x184>
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 81176fa:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 81176fe:	4937      	ldr	r1, [pc, #220]	@ (81177dc <etharp_update_arp_entry+0x198>)
 8117700:	4613      	mov	r3, r2
 8117702:	005b      	lsls	r3, r3, #1
 8117704:	4413      	add	r3, r2
 8117706:	00db      	lsls	r3, r3, #3
 8117708:	440b      	add	r3, r1
 811770a:	3314      	adds	r3, #20
 811770c:	2202      	movs	r2, #2
 811770e:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8117710:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8117714:	4931      	ldr	r1, [pc, #196]	@ (81177dc <etharp_update_arp_entry+0x198>)
 8117716:	4613      	mov	r3, r2
 8117718:	005b      	lsls	r3, r3, #1
 811771a:	4413      	add	r3, r2
 811771c:	00db      	lsls	r3, r3, #3
 811771e:	440b      	add	r3, r1
 8117720:	3308      	adds	r3, #8
 8117722:	68fa      	ldr	r2, [r7, #12]
 8117724:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8117726:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 811772a:	4613      	mov	r3, r2
 811772c:	005b      	lsls	r3, r3, #1
 811772e:	4413      	add	r3, r2
 8117730:	00db      	lsls	r3, r3, #3
 8117732:	3308      	adds	r3, #8
 8117734:	4a29      	ldr	r2, [pc, #164]	@ (81177dc <etharp_update_arp_entry+0x198>)
 8117736:	4413      	add	r3, r2
 8117738:	3304      	adds	r3, #4
 811773a:	2206      	movs	r2, #6
 811773c:	6879      	ldr	r1, [r7, #4]
 811773e:	4618      	mov	r0, r3
 8117740:	f00c fcfb 	bl	812413a <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8117744:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8117748:	4924      	ldr	r1, [pc, #144]	@ (81177dc <etharp_update_arp_entry+0x198>)
 811774a:	4613      	mov	r3, r2
 811774c:	005b      	lsls	r3, r3, #1
 811774e:	4413      	add	r3, r2
 8117750:	00db      	lsls	r3, r3, #3
 8117752:	440b      	add	r3, r1
 8117754:	3312      	adds	r3, #18
 8117756:	2200      	movs	r2, #0
 8117758:	801a      	strh	r2, [r3, #0]
  /* this is where we will send out queued packets! */
#if ARP_QUEUEING
  while (arp_table[i].q != NULL) {
 811775a:	e029      	b.n	81177b0 <etharp_update_arp_entry+0x16c>
    struct pbuf *p;
    /* remember remainder of queue */
    struct etharp_q_entry *q = arp_table[i].q;
 811775c:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8117760:	491e      	ldr	r1, [pc, #120]	@ (81177dc <etharp_update_arp_entry+0x198>)
 8117762:	4613      	mov	r3, r2
 8117764:	005b      	lsls	r3, r3, #1
 8117766:	4413      	add	r3, r2
 8117768:	00db      	lsls	r3, r3, #3
 811776a:	440b      	add	r3, r1
 811776c:	681b      	ldr	r3, [r3, #0]
 811776e:	61bb      	str	r3, [r7, #24]
    /* pop first item off the queue */
    arp_table[i].q = q->next;
 8117770:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8117774:	69bb      	ldr	r3, [r7, #24]
 8117776:	6819      	ldr	r1, [r3, #0]
 8117778:	4818      	ldr	r0, [pc, #96]	@ (81177dc <etharp_update_arp_entry+0x198>)
 811777a:	4613      	mov	r3, r2
 811777c:	005b      	lsls	r3, r3, #1
 811777e:	4413      	add	r3, r2
 8117780:	00db      	lsls	r3, r3, #3
 8117782:	4403      	add	r3, r0
 8117784:	6019      	str	r1, [r3, #0]
    /* get the packet pointer */
    p = q->p;
 8117786:	69bb      	ldr	r3, [r7, #24]
 8117788:	685b      	ldr	r3, [r3, #4]
 811778a:	617b      	str	r3, [r7, #20]
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
 811778c:	69b9      	ldr	r1, [r7, #24]
 811778e:	2009      	movs	r0, #9
 8117790:	f003 f802 	bl	811a798 <memp_free>
  if (arp_table[i].q != NULL) {
    struct pbuf *p = arp_table[i].q;
    arp_table[i].q = NULL;
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8117794:	68fb      	ldr	r3, [r7, #12]
 8117796:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 811779a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 811779e:	9300      	str	r3, [sp, #0]
 81177a0:	687b      	ldr	r3, [r7, #4]
 81177a2:	6979      	ldr	r1, [r7, #20]
 81177a4:	68f8      	ldr	r0, [r7, #12]
 81177a6:	f000 fd63 	bl	8118270 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 81177aa:	6978      	ldr	r0, [r7, #20]
 81177ac:	f003 fe96 	bl	811b4dc <pbuf_free>
  while (arp_table[i].q != NULL) {
 81177b0:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 81177b4:	4909      	ldr	r1, [pc, #36]	@ (81177dc <etharp_update_arp_entry+0x198>)
 81177b6:	4613      	mov	r3, r2
 81177b8:	005b      	lsls	r3, r3, #1
 81177ba:	4413      	add	r3, r2
 81177bc:	00db      	lsls	r3, r3, #3
 81177be:	440b      	add	r3, r1
 81177c0:	681b      	ldr	r3, [r3, #0]
 81177c2:	2b00      	cmp	r3, #0
 81177c4:	d1ca      	bne.n	811775c <etharp_update_arp_entry+0x118>
  }
  return ERR_OK;
 81177c6:	2300      	movs	r3, #0
}
 81177c8:	4618      	mov	r0, r3
 81177ca:	3720      	adds	r7, #32
 81177cc:	46bd      	mov	sp, r7
 81177ce:	bd80      	pop	{r7, pc}
 81177d0:	08125438 	.word	0x08125438
 81177d4:	0812558c 	.word	0x0812558c
 81177d8:	081254bc 	.word	0x081254bc
 81177dc:	1000b20c 	.word	0x1000b20c

081177e0 <etharp_add_static_entry>:
 * @param ethaddr ethernet address for the new static entry
 * @return See return values of etharp_add_static_entry
 */
err_t
etharp_add_static_entry(const ip4_addr_t *ipaddr, struct eth_addr *ethaddr)
{
 81177e0:	b580      	push	{r7, lr}
 81177e2:	b084      	sub	sp, #16
 81177e4:	af00      	add	r7, sp, #0
 81177e6:	6078      	str	r0, [r7, #4]
 81177e8:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_add_static_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));

  netif = ip4_route(ipaddr);
 81177ea:	6878      	ldr	r0, [r7, #4]
 81177ec:	f001 f810 	bl	8118810 <ip4_route>
 81177f0:	60f8      	str	r0, [r7, #12]
  if (netif == NULL) {
 81177f2:	68fb      	ldr	r3, [r7, #12]
 81177f4:	2b00      	cmp	r3, #0
 81177f6:	d102      	bne.n	81177fe <etharp_add_static_entry+0x1e>
    return ERR_RTE;
 81177f8:	f06f 0303 	mvn.w	r3, #3
 81177fc:	e006      	b.n	811780c <etharp_add_static_entry+0x2c>
  }

  return etharp_update_arp_entry(netif, ipaddr, ethaddr, ETHARP_FLAG_TRY_HARD | ETHARP_FLAG_STATIC_ENTRY);
 81177fe:	2305      	movs	r3, #5
 8117800:	683a      	ldr	r2, [r7, #0]
 8117802:	6879      	ldr	r1, [r7, #4]
 8117804:	68f8      	ldr	r0, [r7, #12]
 8117806:	f7ff ff1d 	bl	8117644 <etharp_update_arp_entry>
 811780a:	4603      	mov	r3, r0
}
 811780c:	4618      	mov	r0, r3
 811780e:	3710      	adds	r7, #16
 8117810:	46bd      	mov	sp, r7
 8117812:	bd80      	pop	{r7, pc}

08117814 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8117814:	b580      	push	{r7, lr}
 8117816:	b084      	sub	sp, #16
 8117818:	af00      	add	r7, sp, #0
 811781a:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 811781c:	2300      	movs	r3, #0
 811781e:	60fb      	str	r3, [r7, #12]
 8117820:	e01e      	b.n	8117860 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8117822:	4913      	ldr	r1, [pc, #76]	@ (8117870 <etharp_cleanup_netif+0x5c>)
 8117824:	68fa      	ldr	r2, [r7, #12]
 8117826:	4613      	mov	r3, r2
 8117828:	005b      	lsls	r3, r3, #1
 811782a:	4413      	add	r3, r2
 811782c:	00db      	lsls	r3, r3, #3
 811782e:	440b      	add	r3, r1
 8117830:	3314      	adds	r3, #20
 8117832:	781b      	ldrb	r3, [r3, #0]
 8117834:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8117836:	7afb      	ldrb	r3, [r7, #11]
 8117838:	2b00      	cmp	r3, #0
 811783a:	d00e      	beq.n	811785a <etharp_cleanup_netif+0x46>
 811783c:	490c      	ldr	r1, [pc, #48]	@ (8117870 <etharp_cleanup_netif+0x5c>)
 811783e:	68fa      	ldr	r2, [r7, #12]
 8117840:	4613      	mov	r3, r2
 8117842:	005b      	lsls	r3, r3, #1
 8117844:	4413      	add	r3, r2
 8117846:	00db      	lsls	r3, r3, #3
 8117848:	440b      	add	r3, r1
 811784a:	3308      	adds	r3, #8
 811784c:	681b      	ldr	r3, [r3, #0]
 811784e:	687a      	ldr	r2, [r7, #4]
 8117850:	429a      	cmp	r2, r3
 8117852:	d102      	bne.n	811785a <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8117854:	68f8      	ldr	r0, [r7, #12]
 8117856:	f7ff fc9d 	bl	8117194 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 811785a:	68fb      	ldr	r3, [r7, #12]
 811785c:	3301      	adds	r3, #1
 811785e:	60fb      	str	r3, [r7, #12]
 8117860:	68fb      	ldr	r3, [r7, #12]
 8117862:	2b09      	cmp	r3, #9
 8117864:	dddd      	ble.n	8117822 <etharp_cleanup_netif+0xe>
    }
  }
}
 8117866:	bf00      	nop
 8117868:	bf00      	nop
 811786a:	3710      	adds	r7, #16
 811786c:	46bd      	mov	sp, r7
 811786e:	bd80      	pop	{r7, pc}
 8117870:	1000b20c 	.word	0x1000b20c

08117874 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8117874:	b5b0      	push	{r4, r5, r7, lr}
 8117876:	b08a      	sub	sp, #40	@ 0x28
 8117878:	af04      	add	r7, sp, #16
 811787a:	6078      	str	r0, [r7, #4]
 811787c:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 811787e:	683b      	ldr	r3, [r7, #0]
 8117880:	2b00      	cmp	r3, #0
 8117882:	d107      	bne.n	8117894 <etharp_input+0x20>
 8117884:	4b3d      	ldr	r3, [pc, #244]	@ (811797c <etharp_input+0x108>)
 8117886:	f240 228a 	movw	r2, #650	@ 0x28a
 811788a:	493d      	ldr	r1, [pc, #244]	@ (8117980 <etharp_input+0x10c>)
 811788c:	483d      	ldr	r0, [pc, #244]	@ (8117984 <etharp_input+0x110>)
 811788e:	f00c f9c5 	bl	8123c1c <iprintf>
 8117892:	e06f      	b.n	8117974 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8117894:	687b      	ldr	r3, [r7, #4]
 8117896:	685b      	ldr	r3, [r3, #4]
 8117898:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 811789a:	693b      	ldr	r3, [r7, #16]
 811789c:	881b      	ldrh	r3, [r3, #0]
 811789e:	b29b      	uxth	r3, r3
 81178a0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 81178a4:	d10c      	bne.n	81178c0 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 81178a6:	693b      	ldr	r3, [r7, #16]
 81178a8:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 81178aa:	2b06      	cmp	r3, #6
 81178ac:	d108      	bne.n	81178c0 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 81178ae:	693b      	ldr	r3, [r7, #16]
 81178b0:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 81178b2:	2b04      	cmp	r3, #4
 81178b4:	d104      	bne.n	81178c0 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 81178b6:	693b      	ldr	r3, [r7, #16]
 81178b8:	885b      	ldrh	r3, [r3, #2]
 81178ba:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 81178bc:	2b08      	cmp	r3, #8
 81178be:	d003      	beq.n	81178c8 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 81178c0:	6878      	ldr	r0, [r7, #4]
 81178c2:	f003 fe0b 	bl	811b4dc <pbuf_free>
    return;
 81178c6:	e055      	b.n	8117974 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 81178c8:	693b      	ldr	r3, [r7, #16]
 81178ca:	330e      	adds	r3, #14
 81178cc:	681b      	ldr	r3, [r3, #0]
 81178ce:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 81178d0:	693b      	ldr	r3, [r7, #16]
 81178d2:	3318      	adds	r3, #24
 81178d4:	681b      	ldr	r3, [r3, #0]
 81178d6:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 81178d8:	683b      	ldr	r3, [r7, #0]
 81178da:	3304      	adds	r3, #4
 81178dc:	681b      	ldr	r3, [r3, #0]
 81178de:	2b00      	cmp	r3, #0
 81178e0:	d102      	bne.n	81178e8 <etharp_input+0x74>
    for_us = 0;
 81178e2:	2300      	movs	r3, #0
 81178e4:	75fb      	strb	r3, [r7, #23]
 81178e6:	e009      	b.n	81178fc <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 81178e8:	68ba      	ldr	r2, [r7, #8]
 81178ea:	683b      	ldr	r3, [r7, #0]
 81178ec:	3304      	adds	r3, #4
 81178ee:	681b      	ldr	r3, [r3, #0]
 81178f0:	429a      	cmp	r2, r3
 81178f2:	bf0c      	ite	eq
 81178f4:	2301      	moveq	r3, #1
 81178f6:	2300      	movne	r3, #0
 81178f8:	b2db      	uxtb	r3, r3
 81178fa:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 81178fc:	693b      	ldr	r3, [r7, #16]
 81178fe:	f103 0208 	add.w	r2, r3, #8
 8117902:	7dfb      	ldrb	r3, [r7, #23]
 8117904:	2b00      	cmp	r3, #0
 8117906:	d001      	beq.n	811790c <etharp_input+0x98>
 8117908:	2301      	movs	r3, #1
 811790a:	e000      	b.n	811790e <etharp_input+0x9a>
 811790c:	2302      	movs	r3, #2
 811790e:	f107 010c 	add.w	r1, r7, #12
 8117912:	6838      	ldr	r0, [r7, #0]
 8117914:	f7ff fe96 	bl	8117644 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8117918:	693b      	ldr	r3, [r7, #16]
 811791a:	88db      	ldrh	r3, [r3, #6]
 811791c:	b29b      	uxth	r3, r3
 811791e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8117922:	d003      	beq.n	811792c <etharp_input+0xb8>
 8117924:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8117928:	d01e      	beq.n	8117968 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 811792a:	e020      	b.n	811796e <etharp_input+0xfa>
      if (for_us) {
 811792c:	7dfb      	ldrb	r3, [r7, #23]
 811792e:	2b00      	cmp	r3, #0
 8117930:	d01c      	beq.n	811796c <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8117932:	683b      	ldr	r3, [r7, #0]
 8117934:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 8117938:	693b      	ldr	r3, [r7, #16]
 811793a:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 811793e:	683b      	ldr	r3, [r7, #0]
 8117940:	f103 0526 	add.w	r5, r3, #38	@ 0x26
 8117944:	683b      	ldr	r3, [r7, #0]
 8117946:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8117948:	693a      	ldr	r2, [r7, #16]
 811794a:	3208      	adds	r2, #8
        etharp_raw(netif,
 811794c:	2102      	movs	r1, #2
 811794e:	9103      	str	r1, [sp, #12]
 8117950:	f107 010c 	add.w	r1, r7, #12
 8117954:	9102      	str	r1, [sp, #8]
 8117956:	9201      	str	r2, [sp, #4]
 8117958:	9300      	str	r3, [sp, #0]
 811795a:	462b      	mov	r3, r5
 811795c:	4622      	mov	r2, r4
 811795e:	4601      	mov	r1, r0
 8117960:	6838      	ldr	r0, [r7, #0]
 8117962:	f000 fb37 	bl	8117fd4 <etharp_raw>
      break;
 8117966:	e001      	b.n	811796c <etharp_input+0xf8>
      break;
 8117968:	bf00      	nop
 811796a:	e000      	b.n	811796e <etharp_input+0xfa>
      break;
 811796c:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 811796e:	6878      	ldr	r0, [r7, #4]
 8117970:	f003 fdb4 	bl	811b4dc <pbuf_free>
}
 8117974:	3718      	adds	r7, #24
 8117976:	46bd      	mov	sp, r7
 8117978:	bdb0      	pop	{r4, r5, r7, pc}
 811797a:	bf00      	nop
 811797c:	08125438 	.word	0x08125438
 8117980:	081255e4 	.word	0x081255e4
 8117984:	081254bc 	.word	0x081254bc

08117988 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8117988:	b580      	push	{r7, lr}
 811798a:	b086      	sub	sp, #24
 811798c:	af02      	add	r7, sp, #8
 811798e:	60f8      	str	r0, [r7, #12]
 8117990:	60b9      	str	r1, [r7, #8]
 8117992:	4613      	mov	r3, r2
 8117994:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8117996:	79fa      	ldrb	r2, [r7, #7]
 8117998:	4944      	ldr	r1, [pc, #272]	@ (8117aac <etharp_output_to_arp_index+0x124>)
 811799a:	4613      	mov	r3, r2
 811799c:	005b      	lsls	r3, r3, #1
 811799e:	4413      	add	r3, r2
 81179a0:	00db      	lsls	r3, r3, #3
 81179a2:	440b      	add	r3, r1
 81179a4:	3314      	adds	r3, #20
 81179a6:	781b      	ldrb	r3, [r3, #0]
 81179a8:	2b01      	cmp	r3, #1
 81179aa:	d806      	bhi.n	81179ba <etharp_output_to_arp_index+0x32>
 81179ac:	4b40      	ldr	r3, [pc, #256]	@ (8117ab0 <etharp_output_to_arp_index+0x128>)
 81179ae:	f240 22ee 	movw	r2, #750	@ 0x2ee
 81179b2:	4940      	ldr	r1, [pc, #256]	@ (8117ab4 <etharp_output_to_arp_index+0x12c>)
 81179b4:	4840      	ldr	r0, [pc, #256]	@ (8117ab8 <etharp_output_to_arp_index+0x130>)
 81179b6:	f00c f931 	bl	8123c1c <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 81179ba:	79fa      	ldrb	r2, [r7, #7]
 81179bc:	493b      	ldr	r1, [pc, #236]	@ (8117aac <etharp_output_to_arp_index+0x124>)
 81179be:	4613      	mov	r3, r2
 81179c0:	005b      	lsls	r3, r3, #1
 81179c2:	4413      	add	r3, r2
 81179c4:	00db      	lsls	r3, r3, #3
 81179c6:	440b      	add	r3, r1
 81179c8:	3314      	adds	r3, #20
 81179ca:	781b      	ldrb	r3, [r3, #0]
 81179cc:	2b02      	cmp	r3, #2
 81179ce:	d153      	bne.n	8117a78 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 81179d0:	79fa      	ldrb	r2, [r7, #7]
 81179d2:	4936      	ldr	r1, [pc, #216]	@ (8117aac <etharp_output_to_arp_index+0x124>)
 81179d4:	4613      	mov	r3, r2
 81179d6:	005b      	lsls	r3, r3, #1
 81179d8:	4413      	add	r3, r2
 81179da:	00db      	lsls	r3, r3, #3
 81179dc:	440b      	add	r3, r1
 81179de:	3312      	adds	r3, #18
 81179e0:	881b      	ldrh	r3, [r3, #0]
 81179e2:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 81179e6:	d919      	bls.n	8117a1c <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 81179e8:	79fa      	ldrb	r2, [r7, #7]
 81179ea:	4613      	mov	r3, r2
 81179ec:	005b      	lsls	r3, r3, #1
 81179ee:	4413      	add	r3, r2
 81179f0:	00db      	lsls	r3, r3, #3
 81179f2:	4a2e      	ldr	r2, [pc, #184]	@ (8117aac <etharp_output_to_arp_index+0x124>)
 81179f4:	4413      	add	r3, r2
 81179f6:	3304      	adds	r3, #4
 81179f8:	4619      	mov	r1, r3
 81179fa:	68f8      	ldr	r0, [r7, #12]
 81179fc:	f000 fb98 	bl	8118130 <etharp_request>
 8117a00:	4603      	mov	r3, r0
 8117a02:	2b00      	cmp	r3, #0
 8117a04:	d138      	bne.n	8117a78 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8117a06:	79fa      	ldrb	r2, [r7, #7]
 8117a08:	4928      	ldr	r1, [pc, #160]	@ (8117aac <etharp_output_to_arp_index+0x124>)
 8117a0a:	4613      	mov	r3, r2
 8117a0c:	005b      	lsls	r3, r3, #1
 8117a0e:	4413      	add	r3, r2
 8117a10:	00db      	lsls	r3, r3, #3
 8117a12:	440b      	add	r3, r1
 8117a14:	3314      	adds	r3, #20
 8117a16:	2203      	movs	r2, #3
 8117a18:	701a      	strb	r2, [r3, #0]
 8117a1a:	e02d      	b.n	8117a78 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8117a1c:	79fa      	ldrb	r2, [r7, #7]
 8117a1e:	4923      	ldr	r1, [pc, #140]	@ (8117aac <etharp_output_to_arp_index+0x124>)
 8117a20:	4613      	mov	r3, r2
 8117a22:	005b      	lsls	r3, r3, #1
 8117a24:	4413      	add	r3, r2
 8117a26:	00db      	lsls	r3, r3, #3
 8117a28:	440b      	add	r3, r1
 8117a2a:	3312      	adds	r3, #18
 8117a2c:	881b      	ldrh	r3, [r3, #0]
 8117a2e:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 8117a32:	d321      	bcc.n	8117a78 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8117a34:	79fa      	ldrb	r2, [r7, #7]
 8117a36:	4613      	mov	r3, r2
 8117a38:	005b      	lsls	r3, r3, #1
 8117a3a:	4413      	add	r3, r2
 8117a3c:	00db      	lsls	r3, r3, #3
 8117a3e:	4a1b      	ldr	r2, [pc, #108]	@ (8117aac <etharp_output_to_arp_index+0x124>)
 8117a40:	4413      	add	r3, r2
 8117a42:	1d19      	adds	r1, r3, #4
 8117a44:	79fa      	ldrb	r2, [r7, #7]
 8117a46:	4613      	mov	r3, r2
 8117a48:	005b      	lsls	r3, r3, #1
 8117a4a:	4413      	add	r3, r2
 8117a4c:	00db      	lsls	r3, r3, #3
 8117a4e:	3308      	adds	r3, #8
 8117a50:	4a16      	ldr	r2, [pc, #88]	@ (8117aac <etharp_output_to_arp_index+0x124>)
 8117a52:	4413      	add	r3, r2
 8117a54:	3304      	adds	r3, #4
 8117a56:	461a      	mov	r2, r3
 8117a58:	68f8      	ldr	r0, [r7, #12]
 8117a5a:	f000 fb47 	bl	81180ec <etharp_request_dst>
 8117a5e:	4603      	mov	r3, r0
 8117a60:	2b00      	cmp	r3, #0
 8117a62:	d109      	bne.n	8117a78 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8117a64:	79fa      	ldrb	r2, [r7, #7]
 8117a66:	4911      	ldr	r1, [pc, #68]	@ (8117aac <etharp_output_to_arp_index+0x124>)
 8117a68:	4613      	mov	r3, r2
 8117a6a:	005b      	lsls	r3, r3, #1
 8117a6c:	4413      	add	r3, r2
 8117a6e:	00db      	lsls	r3, r3, #3
 8117a70:	440b      	add	r3, r1
 8117a72:	3314      	adds	r3, #20
 8117a74:	2203      	movs	r2, #3
 8117a76:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8117a78:	68fb      	ldr	r3, [r7, #12]
 8117a7a:	f103 0126 	add.w	r1, r3, #38	@ 0x26
 8117a7e:	79fa      	ldrb	r2, [r7, #7]
 8117a80:	4613      	mov	r3, r2
 8117a82:	005b      	lsls	r3, r3, #1
 8117a84:	4413      	add	r3, r2
 8117a86:	00db      	lsls	r3, r3, #3
 8117a88:	3308      	adds	r3, #8
 8117a8a:	4a08      	ldr	r2, [pc, #32]	@ (8117aac <etharp_output_to_arp_index+0x124>)
 8117a8c:	4413      	add	r3, r2
 8117a8e:	3304      	adds	r3, #4
 8117a90:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8117a94:	9200      	str	r2, [sp, #0]
 8117a96:	460a      	mov	r2, r1
 8117a98:	68b9      	ldr	r1, [r7, #8]
 8117a9a:	68f8      	ldr	r0, [r7, #12]
 8117a9c:	f000 fbe8 	bl	8118270 <ethernet_output>
 8117aa0:	4603      	mov	r3, r0
}
 8117aa2:	4618      	mov	r0, r3
 8117aa4:	3710      	adds	r7, #16
 8117aa6:	46bd      	mov	sp, r7
 8117aa8:	bd80      	pop	{r7, pc}
 8117aaa:	bf00      	nop
 8117aac:	1000b20c 	.word	0x1000b20c
 8117ab0:	08125438 	.word	0x08125438
 8117ab4:	08125604 	.word	0x08125604
 8117ab8:	081254bc 	.word	0x081254bc

08117abc <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8117abc:	b580      	push	{r7, lr}
 8117abe:	b08a      	sub	sp, #40	@ 0x28
 8117ac0:	af02      	add	r7, sp, #8
 8117ac2:	60f8      	str	r0, [r7, #12]
 8117ac4:	60b9      	str	r1, [r7, #8]
 8117ac6:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8117ac8:	687b      	ldr	r3, [r7, #4]
 8117aca:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8117acc:	68fb      	ldr	r3, [r7, #12]
 8117ace:	2b00      	cmp	r3, #0
 8117ad0:	d106      	bne.n	8117ae0 <etharp_output+0x24>
 8117ad2:	4b73      	ldr	r3, [pc, #460]	@ (8117ca0 <etharp_output+0x1e4>)
 8117ad4:	f240 321e 	movw	r2, #798	@ 0x31e
 8117ad8:	4972      	ldr	r1, [pc, #456]	@ (8117ca4 <etharp_output+0x1e8>)
 8117ada:	4873      	ldr	r0, [pc, #460]	@ (8117ca8 <etharp_output+0x1ec>)
 8117adc:	f00c f89e 	bl	8123c1c <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8117ae0:	68bb      	ldr	r3, [r7, #8]
 8117ae2:	2b00      	cmp	r3, #0
 8117ae4:	d106      	bne.n	8117af4 <etharp_output+0x38>
 8117ae6:	4b6e      	ldr	r3, [pc, #440]	@ (8117ca0 <etharp_output+0x1e4>)
 8117ae8:	f240 321f 	movw	r2, #799	@ 0x31f
 8117aec:	496f      	ldr	r1, [pc, #444]	@ (8117cac <etharp_output+0x1f0>)
 8117aee:	486e      	ldr	r0, [pc, #440]	@ (8117ca8 <etharp_output+0x1ec>)
 8117af0:	f00c f894 	bl	8123c1c <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8117af4:	687b      	ldr	r3, [r7, #4]
 8117af6:	2b00      	cmp	r3, #0
 8117af8:	d106      	bne.n	8117b08 <etharp_output+0x4c>
 8117afa:	4b69      	ldr	r3, [pc, #420]	@ (8117ca0 <etharp_output+0x1e4>)
 8117afc:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8117b00:	496b      	ldr	r1, [pc, #428]	@ (8117cb0 <etharp_output+0x1f4>)
 8117b02:	4869      	ldr	r0, [pc, #420]	@ (8117ca8 <etharp_output+0x1ec>)
 8117b04:	f00c f88a 	bl	8123c1c <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8117b08:	687b      	ldr	r3, [r7, #4]
 8117b0a:	681b      	ldr	r3, [r3, #0]
 8117b0c:	68f9      	ldr	r1, [r7, #12]
 8117b0e:	4618      	mov	r0, r3
 8117b10:	f001 f914 	bl	8118d3c <ip4_addr_isbroadcast_u32>
 8117b14:	4603      	mov	r3, r0
 8117b16:	2b00      	cmp	r3, #0
 8117b18:	d002      	beq.n	8117b20 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8117b1a:	4b66      	ldr	r3, [pc, #408]	@ (8117cb4 <etharp_output+0x1f8>)
 8117b1c:	61fb      	str	r3, [r7, #28]
 8117b1e:	e0af      	b.n	8117c80 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8117b20:	687b      	ldr	r3, [r7, #4]
 8117b22:	681b      	ldr	r3, [r3, #0]
 8117b24:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8117b28:	2be0      	cmp	r3, #224	@ 0xe0
 8117b2a:	d118      	bne.n	8117b5e <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8117b2c:	2301      	movs	r3, #1
 8117b2e:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8117b30:	2300      	movs	r3, #0
 8117b32:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8117b34:	235e      	movs	r3, #94	@ 0x5e
 8117b36:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8117b38:	687b      	ldr	r3, [r7, #4]
 8117b3a:	3301      	adds	r3, #1
 8117b3c:	781b      	ldrb	r3, [r3, #0]
 8117b3e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8117b42:	b2db      	uxtb	r3, r3
 8117b44:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8117b46:	687b      	ldr	r3, [r7, #4]
 8117b48:	3302      	adds	r3, #2
 8117b4a:	781b      	ldrb	r3, [r3, #0]
 8117b4c:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8117b4e:	687b      	ldr	r3, [r7, #4]
 8117b50:	3303      	adds	r3, #3
 8117b52:	781b      	ldrb	r3, [r3, #0]
 8117b54:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8117b56:	f107 0310 	add.w	r3, r7, #16
 8117b5a:	61fb      	str	r3, [r7, #28]
 8117b5c:	e090      	b.n	8117c80 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8117b5e:	687b      	ldr	r3, [r7, #4]
 8117b60:	681a      	ldr	r2, [r3, #0]
 8117b62:	68fb      	ldr	r3, [r7, #12]
 8117b64:	3304      	adds	r3, #4
 8117b66:	681b      	ldr	r3, [r3, #0]
 8117b68:	405a      	eors	r2, r3
 8117b6a:	68fb      	ldr	r3, [r7, #12]
 8117b6c:	3308      	adds	r3, #8
 8117b6e:	681b      	ldr	r3, [r3, #0]
 8117b70:	4013      	ands	r3, r2
 8117b72:	2b00      	cmp	r3, #0
 8117b74:	d012      	beq.n	8117b9c <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8117b76:	687b      	ldr	r3, [r7, #4]
 8117b78:	681b      	ldr	r3, [r3, #0]
 8117b7a:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8117b7c:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 8117b80:	4293      	cmp	r3, r2
 8117b82:	d00b      	beq.n	8117b9c <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8117b84:	68fb      	ldr	r3, [r7, #12]
 8117b86:	330c      	adds	r3, #12
 8117b88:	681b      	ldr	r3, [r3, #0]
 8117b8a:	2b00      	cmp	r3, #0
 8117b8c:	d003      	beq.n	8117b96 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8117b8e:	68fb      	ldr	r3, [r7, #12]
 8117b90:	330c      	adds	r3, #12
 8117b92:	61bb      	str	r3, [r7, #24]
 8117b94:	e002      	b.n	8117b9c <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8117b96:	f06f 0303 	mvn.w	r3, #3
 8117b9a:	e07d      	b.n	8117c98 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8117b9c:	4b46      	ldr	r3, [pc, #280]	@ (8117cb8 <etharp_output+0x1fc>)
 8117b9e:	781b      	ldrb	r3, [r3, #0]
 8117ba0:	4619      	mov	r1, r3
 8117ba2:	4a46      	ldr	r2, [pc, #280]	@ (8117cbc <etharp_output+0x200>)
 8117ba4:	460b      	mov	r3, r1
 8117ba6:	005b      	lsls	r3, r3, #1
 8117ba8:	440b      	add	r3, r1
 8117baa:	00db      	lsls	r3, r3, #3
 8117bac:	4413      	add	r3, r2
 8117bae:	3314      	adds	r3, #20
 8117bb0:	781b      	ldrb	r3, [r3, #0]
 8117bb2:	2b01      	cmp	r3, #1
 8117bb4:	d925      	bls.n	8117c02 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8117bb6:	4b40      	ldr	r3, [pc, #256]	@ (8117cb8 <etharp_output+0x1fc>)
 8117bb8:	781b      	ldrb	r3, [r3, #0]
 8117bba:	4619      	mov	r1, r3
 8117bbc:	4a3f      	ldr	r2, [pc, #252]	@ (8117cbc <etharp_output+0x200>)
 8117bbe:	460b      	mov	r3, r1
 8117bc0:	005b      	lsls	r3, r3, #1
 8117bc2:	440b      	add	r3, r1
 8117bc4:	00db      	lsls	r3, r3, #3
 8117bc6:	4413      	add	r3, r2
 8117bc8:	3308      	adds	r3, #8
 8117bca:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8117bcc:	68fa      	ldr	r2, [r7, #12]
 8117bce:	429a      	cmp	r2, r3
 8117bd0:	d117      	bne.n	8117c02 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8117bd2:	69bb      	ldr	r3, [r7, #24]
 8117bd4:	681a      	ldr	r2, [r3, #0]
 8117bd6:	4b38      	ldr	r3, [pc, #224]	@ (8117cb8 <etharp_output+0x1fc>)
 8117bd8:	781b      	ldrb	r3, [r3, #0]
 8117bda:	4618      	mov	r0, r3
 8117bdc:	4937      	ldr	r1, [pc, #220]	@ (8117cbc <etharp_output+0x200>)
 8117bde:	4603      	mov	r3, r0
 8117be0:	005b      	lsls	r3, r3, #1
 8117be2:	4403      	add	r3, r0
 8117be4:	00db      	lsls	r3, r3, #3
 8117be6:	440b      	add	r3, r1
 8117be8:	3304      	adds	r3, #4
 8117bea:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8117bec:	429a      	cmp	r2, r3
 8117bee:	d108      	bne.n	8117c02 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8117bf0:	4b31      	ldr	r3, [pc, #196]	@ (8117cb8 <etharp_output+0x1fc>)
 8117bf2:	781b      	ldrb	r3, [r3, #0]
 8117bf4:	461a      	mov	r2, r3
 8117bf6:	68b9      	ldr	r1, [r7, #8]
 8117bf8:	68f8      	ldr	r0, [r7, #12]
 8117bfa:	f7ff fec5 	bl	8117988 <etharp_output_to_arp_index>
 8117bfe:	4603      	mov	r3, r0
 8117c00:	e04a      	b.n	8117c98 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8117c02:	2300      	movs	r3, #0
 8117c04:	75fb      	strb	r3, [r7, #23]
 8117c06:	e031      	b.n	8117c6c <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8117c08:	7dfa      	ldrb	r2, [r7, #23]
 8117c0a:	492c      	ldr	r1, [pc, #176]	@ (8117cbc <etharp_output+0x200>)
 8117c0c:	4613      	mov	r3, r2
 8117c0e:	005b      	lsls	r3, r3, #1
 8117c10:	4413      	add	r3, r2
 8117c12:	00db      	lsls	r3, r3, #3
 8117c14:	440b      	add	r3, r1
 8117c16:	3314      	adds	r3, #20
 8117c18:	781b      	ldrb	r3, [r3, #0]
 8117c1a:	2b01      	cmp	r3, #1
 8117c1c:	d923      	bls.n	8117c66 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8117c1e:	7dfa      	ldrb	r2, [r7, #23]
 8117c20:	4926      	ldr	r1, [pc, #152]	@ (8117cbc <etharp_output+0x200>)
 8117c22:	4613      	mov	r3, r2
 8117c24:	005b      	lsls	r3, r3, #1
 8117c26:	4413      	add	r3, r2
 8117c28:	00db      	lsls	r3, r3, #3
 8117c2a:	440b      	add	r3, r1
 8117c2c:	3308      	adds	r3, #8
 8117c2e:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8117c30:	68fa      	ldr	r2, [r7, #12]
 8117c32:	429a      	cmp	r2, r3
 8117c34:	d117      	bne.n	8117c66 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8117c36:	69bb      	ldr	r3, [r7, #24]
 8117c38:	6819      	ldr	r1, [r3, #0]
 8117c3a:	7dfa      	ldrb	r2, [r7, #23]
 8117c3c:	481f      	ldr	r0, [pc, #124]	@ (8117cbc <etharp_output+0x200>)
 8117c3e:	4613      	mov	r3, r2
 8117c40:	005b      	lsls	r3, r3, #1
 8117c42:	4413      	add	r3, r2
 8117c44:	00db      	lsls	r3, r3, #3
 8117c46:	4403      	add	r3, r0
 8117c48:	3304      	adds	r3, #4
 8117c4a:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8117c4c:	4299      	cmp	r1, r3
 8117c4e:	d10a      	bne.n	8117c66 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8117c50:	4a19      	ldr	r2, [pc, #100]	@ (8117cb8 <etharp_output+0x1fc>)
 8117c52:	7dfb      	ldrb	r3, [r7, #23]
 8117c54:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8117c56:	7dfb      	ldrb	r3, [r7, #23]
 8117c58:	461a      	mov	r2, r3
 8117c5a:	68b9      	ldr	r1, [r7, #8]
 8117c5c:	68f8      	ldr	r0, [r7, #12]
 8117c5e:	f7ff fe93 	bl	8117988 <etharp_output_to_arp_index>
 8117c62:	4603      	mov	r3, r0
 8117c64:	e018      	b.n	8117c98 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8117c66:	7dfb      	ldrb	r3, [r7, #23]
 8117c68:	3301      	adds	r3, #1
 8117c6a:	75fb      	strb	r3, [r7, #23]
 8117c6c:	7dfb      	ldrb	r3, [r7, #23]
 8117c6e:	2b09      	cmp	r3, #9
 8117c70:	d9ca      	bls.n	8117c08 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8117c72:	68ba      	ldr	r2, [r7, #8]
 8117c74:	69b9      	ldr	r1, [r7, #24]
 8117c76:	68f8      	ldr	r0, [r7, #12]
 8117c78:	f000 f822 	bl	8117cc0 <etharp_query>
 8117c7c:	4603      	mov	r3, r0
 8117c7e:	e00b      	b.n	8117c98 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8117c80:	68fb      	ldr	r3, [r7, #12]
 8117c82:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 8117c86:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8117c8a:	9300      	str	r3, [sp, #0]
 8117c8c:	69fb      	ldr	r3, [r7, #28]
 8117c8e:	68b9      	ldr	r1, [r7, #8]
 8117c90:	68f8      	ldr	r0, [r7, #12]
 8117c92:	f000 faed 	bl	8118270 <ethernet_output>
 8117c96:	4603      	mov	r3, r0
}
 8117c98:	4618      	mov	r0, r3
 8117c9a:	3720      	adds	r7, #32
 8117c9c:	46bd      	mov	sp, r7
 8117c9e:	bd80      	pop	{r7, pc}
 8117ca0:	08125438 	.word	0x08125438
 8117ca4:	081255e4 	.word	0x081255e4
 8117ca8:	081254bc 	.word	0x081254bc
 8117cac:	081254b0 	.word	0x081254b0
 8117cb0:	081255d4 	.word	0x081255d4
 8117cb4:	08128424 	.word	0x08128424
 8117cb8:	1000b2fc 	.word	0x1000b2fc
 8117cbc:	1000b20c 	.word	0x1000b20c

08117cc0 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8117cc0:	b580      	push	{r7, lr}
 8117cc2:	b090      	sub	sp, #64	@ 0x40
 8117cc4:	af02      	add	r7, sp, #8
 8117cc6:	60f8      	str	r0, [r7, #12]
 8117cc8:	60b9      	str	r1, [r7, #8]
 8117cca:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8117ccc:	68fb      	ldr	r3, [r7, #12]
 8117cce:	3326      	adds	r3, #38	@ 0x26
 8117cd0:	61fb      	str	r3, [r7, #28]
  err_t result = ERR_MEM;
 8117cd2:	23ff      	movs	r3, #255	@ 0xff
 8117cd4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  int is_new_entry = 0;
 8117cd8:	2300      	movs	r3, #0
 8117cda:	633b      	str	r3, [r7, #48]	@ 0x30
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8117cdc:	68bb      	ldr	r3, [r7, #8]
 8117cde:	681b      	ldr	r3, [r3, #0]
 8117ce0:	68f9      	ldr	r1, [r7, #12]
 8117ce2:	4618      	mov	r0, r3
 8117ce4:	f001 f82a 	bl	8118d3c <ip4_addr_isbroadcast_u32>
 8117ce8:	4603      	mov	r3, r0
 8117cea:	2b00      	cmp	r3, #0
 8117cec:	d10c      	bne.n	8117d08 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8117cee:	68bb      	ldr	r3, [r7, #8]
 8117cf0:	681b      	ldr	r3, [r3, #0]
 8117cf2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8117cf6:	2be0      	cmp	r3, #224	@ 0xe0
 8117cf8:	d006      	beq.n	8117d08 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8117cfa:	68bb      	ldr	r3, [r7, #8]
 8117cfc:	2b00      	cmp	r3, #0
 8117cfe:	d003      	beq.n	8117d08 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8117d00:	68bb      	ldr	r3, [r7, #8]
 8117d02:	681b      	ldr	r3, [r3, #0]
 8117d04:	2b00      	cmp	r3, #0
 8117d06:	d102      	bne.n	8117d0e <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8117d08:	f06f 030f 	mvn.w	r3, #15
 8117d0c:	e14e      	b.n	8117fac <etharp_query+0x2ec>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8117d0e:	68fa      	ldr	r2, [r7, #12]
 8117d10:	2101      	movs	r1, #1
 8117d12:	68b8      	ldr	r0, [r7, #8]
 8117d14:	f7ff fb1c 	bl	8117350 <etharp_find_entry>
 8117d18:	4603      	mov	r3, r0
 8117d1a:	837b      	strh	r3, [r7, #26]

  /* could not find or create entry? */
  if (i_err < 0) {
 8117d1c:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8117d20:	2b00      	cmp	r3, #0
 8117d22:	da02      	bge.n	8117d2a <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8117d24:	8b7b      	ldrh	r3, [r7, #26]
 8117d26:	b25b      	sxtb	r3, r3
 8117d28:	e140      	b.n	8117fac <etharp_query+0x2ec>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8117d2a:	8b7b      	ldrh	r3, [r7, #26]
 8117d2c:	2b7e      	cmp	r3, #126	@ 0x7e
 8117d2e:	d906      	bls.n	8117d3e <etharp_query+0x7e>
 8117d30:	4ba0      	ldr	r3, [pc, #640]	@ (8117fb4 <etharp_query+0x2f4>)
 8117d32:	f240 32c1 	movw	r2, #961	@ 0x3c1
 8117d36:	49a0      	ldr	r1, [pc, #640]	@ (8117fb8 <etharp_query+0x2f8>)
 8117d38:	48a0      	ldr	r0, [pc, #640]	@ (8117fbc <etharp_query+0x2fc>)
 8117d3a:	f00b ff6f 	bl	8123c1c <iprintf>
  i = (netif_addr_idx_t)i_err;
 8117d3e:	8b7b      	ldrh	r3, [r7, #26]
 8117d40:	767b      	strb	r3, [r7, #25]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8117d42:	7e7a      	ldrb	r2, [r7, #25]
 8117d44:	499e      	ldr	r1, [pc, #632]	@ (8117fc0 <etharp_query+0x300>)
 8117d46:	4613      	mov	r3, r2
 8117d48:	005b      	lsls	r3, r3, #1
 8117d4a:	4413      	add	r3, r2
 8117d4c:	00db      	lsls	r3, r3, #3
 8117d4e:	440b      	add	r3, r1
 8117d50:	3314      	adds	r3, #20
 8117d52:	781b      	ldrb	r3, [r3, #0]
 8117d54:	2b00      	cmp	r3, #0
 8117d56:	d115      	bne.n	8117d84 <etharp_query+0xc4>
    is_new_entry = 1;
 8117d58:	2301      	movs	r3, #1
 8117d5a:	633b      	str	r3, [r7, #48]	@ 0x30
    arp_table[i].state = ETHARP_STATE_PENDING;
 8117d5c:	7e7a      	ldrb	r2, [r7, #25]
 8117d5e:	4998      	ldr	r1, [pc, #608]	@ (8117fc0 <etharp_query+0x300>)
 8117d60:	4613      	mov	r3, r2
 8117d62:	005b      	lsls	r3, r3, #1
 8117d64:	4413      	add	r3, r2
 8117d66:	00db      	lsls	r3, r3, #3
 8117d68:	440b      	add	r3, r1
 8117d6a:	3314      	adds	r3, #20
 8117d6c:	2201      	movs	r2, #1
 8117d6e:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8117d70:	7e7a      	ldrb	r2, [r7, #25]
 8117d72:	4993      	ldr	r1, [pc, #588]	@ (8117fc0 <etharp_query+0x300>)
 8117d74:	4613      	mov	r3, r2
 8117d76:	005b      	lsls	r3, r3, #1
 8117d78:	4413      	add	r3, r2
 8117d7a:	00db      	lsls	r3, r3, #3
 8117d7c:	440b      	add	r3, r1
 8117d7e:	3308      	adds	r3, #8
 8117d80:	68fa      	ldr	r2, [r7, #12]
 8117d82:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8117d84:	7e7a      	ldrb	r2, [r7, #25]
 8117d86:	498e      	ldr	r1, [pc, #568]	@ (8117fc0 <etharp_query+0x300>)
 8117d88:	4613      	mov	r3, r2
 8117d8a:	005b      	lsls	r3, r3, #1
 8117d8c:	4413      	add	r3, r2
 8117d8e:	00db      	lsls	r3, r3, #3
 8117d90:	440b      	add	r3, r1
 8117d92:	3314      	adds	r3, #20
 8117d94:	781b      	ldrb	r3, [r3, #0]
 8117d96:	2b01      	cmp	r3, #1
 8117d98:	d011      	beq.n	8117dbe <etharp_query+0xfe>
 8117d9a:	7e7a      	ldrb	r2, [r7, #25]
 8117d9c:	4988      	ldr	r1, [pc, #544]	@ (8117fc0 <etharp_query+0x300>)
 8117d9e:	4613      	mov	r3, r2
 8117da0:	005b      	lsls	r3, r3, #1
 8117da2:	4413      	add	r3, r2
 8117da4:	00db      	lsls	r3, r3, #3
 8117da6:	440b      	add	r3, r1
 8117da8:	3314      	adds	r3, #20
 8117daa:	781b      	ldrb	r3, [r3, #0]
 8117dac:	2b01      	cmp	r3, #1
 8117dae:	d806      	bhi.n	8117dbe <etharp_query+0xfe>
 8117db0:	4b80      	ldr	r3, [pc, #512]	@ (8117fb4 <etharp_query+0x2f4>)
 8117db2:	f240 32cd 	movw	r2, #973	@ 0x3cd
 8117db6:	4983      	ldr	r1, [pc, #524]	@ (8117fc4 <etharp_query+0x304>)
 8117db8:	4880      	ldr	r0, [pc, #512]	@ (8117fbc <etharp_query+0x2fc>)
 8117dba:	f00b ff2f 	bl	8123c1c <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8117dbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8117dc0:	2b00      	cmp	r3, #0
 8117dc2:	d102      	bne.n	8117dca <etharp_query+0x10a>
 8117dc4:	687b      	ldr	r3, [r7, #4]
 8117dc6:	2b00      	cmp	r3, #0
 8117dc8:	d10c      	bne.n	8117de4 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8117dca:	68b9      	ldr	r1, [r7, #8]
 8117dcc:	68f8      	ldr	r0, [r7, #12]
 8117dce:	f000 f9af 	bl	8118130 <etharp_request>
 8117dd2:	4603      	mov	r3, r0
 8117dd4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8117dd8:	687b      	ldr	r3, [r7, #4]
 8117dda:	2b00      	cmp	r3, #0
 8117ddc:	d102      	bne.n	8117de4 <etharp_query+0x124>
      return result;
 8117dde:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8117de2:	e0e3      	b.n	8117fac <etharp_query+0x2ec>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8117de4:	687b      	ldr	r3, [r7, #4]
 8117de6:	2b00      	cmp	r3, #0
 8117de8:	d106      	bne.n	8117df8 <etharp_query+0x138>
 8117dea:	4b72      	ldr	r3, [pc, #456]	@ (8117fb4 <etharp_query+0x2f4>)
 8117dec:	f240 32e1 	movw	r2, #993	@ 0x3e1
 8117df0:	4975      	ldr	r1, [pc, #468]	@ (8117fc8 <etharp_query+0x308>)
 8117df2:	4872      	ldr	r0, [pc, #456]	@ (8117fbc <etharp_query+0x2fc>)
 8117df4:	f00b ff12 	bl	8123c1c <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8117df8:	7e7a      	ldrb	r2, [r7, #25]
 8117dfa:	4971      	ldr	r1, [pc, #452]	@ (8117fc0 <etharp_query+0x300>)
 8117dfc:	4613      	mov	r3, r2
 8117dfe:	005b      	lsls	r3, r3, #1
 8117e00:	4413      	add	r3, r2
 8117e02:	00db      	lsls	r3, r3, #3
 8117e04:	440b      	add	r3, r1
 8117e06:	3314      	adds	r3, #20
 8117e08:	781b      	ldrb	r3, [r3, #0]
 8117e0a:	2b01      	cmp	r3, #1
 8117e0c:	d917      	bls.n	8117e3e <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8117e0e:	4a6f      	ldr	r2, [pc, #444]	@ (8117fcc <etharp_query+0x30c>)
 8117e10:	7e7b      	ldrb	r3, [r7, #25]
 8117e12:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8117e14:	7e7a      	ldrb	r2, [r7, #25]
 8117e16:	4613      	mov	r3, r2
 8117e18:	005b      	lsls	r3, r3, #1
 8117e1a:	4413      	add	r3, r2
 8117e1c:	00db      	lsls	r3, r3, #3
 8117e1e:	3308      	adds	r3, #8
 8117e20:	4a67      	ldr	r2, [pc, #412]	@ (8117fc0 <etharp_query+0x300>)
 8117e22:	4413      	add	r3, r2
 8117e24:	3304      	adds	r3, #4
 8117e26:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8117e2a:	9200      	str	r2, [sp, #0]
 8117e2c:	69fa      	ldr	r2, [r7, #28]
 8117e2e:	6879      	ldr	r1, [r7, #4]
 8117e30:	68f8      	ldr	r0, [r7, #12]
 8117e32:	f000 fa1d 	bl	8118270 <ethernet_output>
 8117e36:	4603      	mov	r3, r0
 8117e38:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8117e3c:	e0b4      	b.n	8117fa8 <etharp_query+0x2e8>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8117e3e:	7e7a      	ldrb	r2, [r7, #25]
 8117e40:	495f      	ldr	r1, [pc, #380]	@ (8117fc0 <etharp_query+0x300>)
 8117e42:	4613      	mov	r3, r2
 8117e44:	005b      	lsls	r3, r3, #1
 8117e46:	4413      	add	r3, r2
 8117e48:	00db      	lsls	r3, r3, #3
 8117e4a:	440b      	add	r3, r1
 8117e4c:	3314      	adds	r3, #20
 8117e4e:	781b      	ldrb	r3, [r3, #0]
 8117e50:	2b01      	cmp	r3, #1
 8117e52:	f040 80a9 	bne.w	8117fa8 <etharp_query+0x2e8>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8117e56:	2300      	movs	r3, #0
 8117e58:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8117e5a:	687b      	ldr	r3, [r7, #4]
 8117e5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    while (p) {
 8117e5e:	e01c      	b.n	8117e9a <etharp_query+0x1da>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8117e60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8117e62:	895a      	ldrh	r2, [r3, #10]
 8117e64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8117e66:	891b      	ldrh	r3, [r3, #8]
 8117e68:	429a      	cmp	r2, r3
 8117e6a:	d10a      	bne.n	8117e82 <etharp_query+0x1c2>
 8117e6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8117e6e:	681b      	ldr	r3, [r3, #0]
 8117e70:	2b00      	cmp	r3, #0
 8117e72:	d006      	beq.n	8117e82 <etharp_query+0x1c2>
 8117e74:	4b4f      	ldr	r3, [pc, #316]	@ (8117fb4 <etharp_query+0x2f4>)
 8117e76:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 8117e7a:	4955      	ldr	r1, [pc, #340]	@ (8117fd0 <etharp_query+0x310>)
 8117e7c:	484f      	ldr	r0, [pc, #316]	@ (8117fbc <etharp_query+0x2fc>)
 8117e7e:	f00b fecd 	bl	8123c1c <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8117e82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8117e84:	7b1b      	ldrb	r3, [r3, #12]
 8117e86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8117e8a:	2b00      	cmp	r3, #0
 8117e8c:	d002      	beq.n	8117e94 <etharp_query+0x1d4>
        copy_needed = 1;
 8117e8e:	2301      	movs	r3, #1
 8117e90:	62bb      	str	r3, [r7, #40]	@ 0x28
        break;
 8117e92:	e005      	b.n	8117ea0 <etharp_query+0x1e0>
      }
      p = p->next;
 8117e94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8117e96:	681b      	ldr	r3, [r3, #0]
 8117e98:	62fb      	str	r3, [r7, #44]	@ 0x2c
    while (p) {
 8117e9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8117e9c:	2b00      	cmp	r3, #0
 8117e9e:	d1df      	bne.n	8117e60 <etharp_query+0x1a0>
    }
    if (copy_needed) {
 8117ea0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8117ea2:	2b00      	cmp	r3, #0
 8117ea4:	d007      	beq.n	8117eb6 <etharp_query+0x1f6>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8117ea6:	687a      	ldr	r2, [r7, #4]
 8117ea8:	f44f 7120 	mov.w	r1, #640	@ 0x280
 8117eac:	200e      	movs	r0, #14
 8117eae:	f003 fd8d 	bl	811b9cc <pbuf_clone>
 8117eb2:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8117eb4:	e004      	b.n	8117ec0 <etharp_query+0x200>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8117eb6:	687b      	ldr	r3, [r7, #4]
 8117eb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pbuf_ref(p);
 8117eba:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8117ebc:	f003 fbb4 	bl	811b628 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8117ec0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8117ec2:	2b00      	cmp	r3, #0
 8117ec4:	d06d      	beq.n	8117fa2 <etharp_query+0x2e2>
      /* queue packet ... */
#if ARP_QUEUEING
      struct etharp_q_entry *new_entry;
      /* allocate a new arp queue entry */
      new_entry = (struct etharp_q_entry *)memp_malloc(MEMP_ARP_QUEUE);
 8117ec6:	2009      	movs	r0, #9
 8117ec8:	f002 fbf0 	bl	811a6ac <memp_malloc>
 8117ecc:	6178      	str	r0, [r7, #20]
      if (new_entry != NULL) {
 8117ece:	697b      	ldr	r3, [r7, #20]
 8117ed0:	2b00      	cmp	r3, #0
 8117ed2:	d05f      	beq.n	8117f94 <etharp_query+0x2d4>
        unsigned int qlen = 0;
 8117ed4:	2300      	movs	r3, #0
 8117ed6:	627b      	str	r3, [r7, #36]	@ 0x24
        new_entry->next = 0;
 8117ed8:	697b      	ldr	r3, [r7, #20]
 8117eda:	2200      	movs	r2, #0
 8117edc:	601a      	str	r2, [r3, #0]
        new_entry->p = p;
 8117ede:	697b      	ldr	r3, [r7, #20]
 8117ee0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8117ee2:	605a      	str	r2, [r3, #4]
        if (arp_table[i].q != NULL) {
 8117ee4:	7e7a      	ldrb	r2, [r7, #25]
 8117ee6:	4936      	ldr	r1, [pc, #216]	@ (8117fc0 <etharp_query+0x300>)
 8117ee8:	4613      	mov	r3, r2
 8117eea:	005b      	lsls	r3, r3, #1
 8117eec:	4413      	add	r3, r2
 8117eee:	00db      	lsls	r3, r3, #3
 8117ef0:	440b      	add	r3, r1
 8117ef2:	681b      	ldr	r3, [r3, #0]
 8117ef4:	2b00      	cmp	r3, #0
 8117ef6:	d01a      	beq.n	8117f2e <etharp_query+0x26e>
          /* queue was already existent, append the new entry to the end */
          struct etharp_q_entry *r;
          r = arp_table[i].q;
 8117ef8:	7e7a      	ldrb	r2, [r7, #25]
 8117efa:	4931      	ldr	r1, [pc, #196]	@ (8117fc0 <etharp_query+0x300>)
 8117efc:	4613      	mov	r3, r2
 8117efe:	005b      	lsls	r3, r3, #1
 8117f00:	4413      	add	r3, r2
 8117f02:	00db      	lsls	r3, r3, #3
 8117f04:	440b      	add	r3, r1
 8117f06:	681b      	ldr	r3, [r3, #0]
 8117f08:	623b      	str	r3, [r7, #32]
          qlen++;
 8117f0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8117f0c:	3301      	adds	r3, #1
 8117f0e:	627b      	str	r3, [r7, #36]	@ 0x24
          while (r->next != NULL) {
 8117f10:	e005      	b.n	8117f1e <etharp_query+0x25e>
            r = r->next;
 8117f12:	6a3b      	ldr	r3, [r7, #32]
 8117f14:	681b      	ldr	r3, [r3, #0]
 8117f16:	623b      	str	r3, [r7, #32]
            qlen++;
 8117f18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8117f1a:	3301      	adds	r3, #1
 8117f1c:	627b      	str	r3, [r7, #36]	@ 0x24
          while (r->next != NULL) {
 8117f1e:	6a3b      	ldr	r3, [r7, #32]
 8117f20:	681b      	ldr	r3, [r3, #0]
 8117f22:	2b00      	cmp	r3, #0
 8117f24:	d1f5      	bne.n	8117f12 <etharp_query+0x252>
          }
          r->next = new_entry;
 8117f26:	6a3b      	ldr	r3, [r7, #32]
 8117f28:	697a      	ldr	r2, [r7, #20]
 8117f2a:	601a      	str	r2, [r3, #0]
 8117f2c:	e008      	b.n	8117f40 <etharp_query+0x280>
        } else {
          /* queue did not exist, first item in queue */
          arp_table[i].q = new_entry;
 8117f2e:	7e7a      	ldrb	r2, [r7, #25]
 8117f30:	4923      	ldr	r1, [pc, #140]	@ (8117fc0 <etharp_query+0x300>)
 8117f32:	4613      	mov	r3, r2
 8117f34:	005b      	lsls	r3, r3, #1
 8117f36:	4413      	add	r3, r2
 8117f38:	00db      	lsls	r3, r3, #3
 8117f3a:	440b      	add	r3, r1
 8117f3c:	697a      	ldr	r2, [r7, #20]
 8117f3e:	601a      	str	r2, [r3, #0]
        }
#if ARP_QUEUE_LEN
        if (qlen >= ARP_QUEUE_LEN) {
 8117f40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8117f42:	2b02      	cmp	r3, #2
 8117f44:	d922      	bls.n	8117f8c <etharp_query+0x2cc>
          struct etharp_q_entry *old;
          old = arp_table[i].q;
 8117f46:	7e7a      	ldrb	r2, [r7, #25]
 8117f48:	491d      	ldr	r1, [pc, #116]	@ (8117fc0 <etharp_query+0x300>)
 8117f4a:	4613      	mov	r3, r2
 8117f4c:	005b      	lsls	r3, r3, #1
 8117f4e:	4413      	add	r3, r2
 8117f50:	00db      	lsls	r3, r3, #3
 8117f52:	440b      	add	r3, r1
 8117f54:	681b      	ldr	r3, [r3, #0]
 8117f56:	613b      	str	r3, [r7, #16]
          arp_table[i].q = arp_table[i].q->next;
 8117f58:	7e7a      	ldrb	r2, [r7, #25]
 8117f5a:	4919      	ldr	r1, [pc, #100]	@ (8117fc0 <etharp_query+0x300>)
 8117f5c:	4613      	mov	r3, r2
 8117f5e:	005b      	lsls	r3, r3, #1
 8117f60:	4413      	add	r3, r2
 8117f62:	00db      	lsls	r3, r3, #3
 8117f64:	440b      	add	r3, r1
 8117f66:	681b      	ldr	r3, [r3, #0]
 8117f68:	7e7a      	ldrb	r2, [r7, #25]
 8117f6a:	6819      	ldr	r1, [r3, #0]
 8117f6c:	4814      	ldr	r0, [pc, #80]	@ (8117fc0 <etharp_query+0x300>)
 8117f6e:	4613      	mov	r3, r2
 8117f70:	005b      	lsls	r3, r3, #1
 8117f72:	4413      	add	r3, r2
 8117f74:	00db      	lsls	r3, r3, #3
 8117f76:	4403      	add	r3, r0
 8117f78:	6019      	str	r1, [r3, #0]
          pbuf_free(old->p);
 8117f7a:	693b      	ldr	r3, [r7, #16]
 8117f7c:	685b      	ldr	r3, [r3, #4]
 8117f7e:	4618      	mov	r0, r3
 8117f80:	f003 faac 	bl	811b4dc <pbuf_free>
          memp_free(MEMP_ARP_QUEUE, old);
 8117f84:	6939      	ldr	r1, [r7, #16]
 8117f86:	2009      	movs	r0, #9
 8117f88:	f002 fc06 	bl	811a798 <memp_free>
        }
#endif
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, i));
        result = ERR_OK;
 8117f8c:	2300      	movs	r3, #0
 8117f8e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8117f92:	e009      	b.n	8117fa8 <etharp_query+0x2e8>
      } else {
        /* the pool MEMP_ARP_QUEUE is empty */
        pbuf_free(p);
 8117f94:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8117f96:	f003 faa1 	bl	811b4dc <pbuf_free>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
 8117f9a:	23ff      	movs	r3, #255	@ 0xff
 8117f9c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8117fa0:	e002      	b.n	8117fa8 <etharp_query+0x2e8>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8117fa2:	23ff      	movs	r3, #255	@ 0xff
 8117fa4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    }
  }
  return result;
 8117fa8:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 8117fac:	4618      	mov	r0, r3
 8117fae:	3738      	adds	r7, #56	@ 0x38
 8117fb0:	46bd      	mov	sp, r7
 8117fb2:	bd80      	pop	{r7, pc}
 8117fb4:	08125438 	.word	0x08125438
 8117fb8:	08125634 	.word	0x08125634
 8117fbc:	081254bc 	.word	0x081254bc
 8117fc0:	1000b20c 	.word	0x1000b20c
 8117fc4:	08125644 	.word	0x08125644
 8117fc8:	081254b0 	.word	0x081254b0
 8117fcc:	1000b2fc 	.word	0x1000b2fc
 8117fd0:	0812566c 	.word	0x0812566c

08117fd4 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8117fd4:	b580      	push	{r7, lr}
 8117fd6:	b08a      	sub	sp, #40	@ 0x28
 8117fd8:	af02      	add	r7, sp, #8
 8117fda:	60f8      	str	r0, [r7, #12]
 8117fdc:	60b9      	str	r1, [r7, #8]
 8117fde:	607a      	str	r2, [r7, #4]
 8117fe0:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8117fe2:	2300      	movs	r3, #0
 8117fe4:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8117fe6:	68fb      	ldr	r3, [r7, #12]
 8117fe8:	2b00      	cmp	r3, #0
 8117fea:	d106      	bne.n	8117ffa <etharp_raw+0x26>
 8117fec:	4b3a      	ldr	r3, [pc, #232]	@ (81180d8 <etharp_raw+0x104>)
 8117fee:	f240 4257 	movw	r2, #1111	@ 0x457
 8117ff2:	493a      	ldr	r1, [pc, #232]	@ (81180dc <etharp_raw+0x108>)
 8117ff4:	483a      	ldr	r0, [pc, #232]	@ (81180e0 <etharp_raw+0x10c>)
 8117ff6:	f00b fe11 	bl	8123c1c <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8117ffa:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8117ffe:	211c      	movs	r1, #28
 8118000:	200e      	movs	r0, #14
 8118002:	f002 ff89 	bl	811af18 <pbuf_alloc>
 8118006:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8118008:	69bb      	ldr	r3, [r7, #24]
 811800a:	2b00      	cmp	r3, #0
 811800c:	d102      	bne.n	8118014 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 811800e:	f04f 33ff 	mov.w	r3, #4294967295
 8118012:	e05d      	b.n	81180d0 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8118014:	69bb      	ldr	r3, [r7, #24]
 8118016:	895b      	ldrh	r3, [r3, #10]
 8118018:	2b1b      	cmp	r3, #27
 811801a:	d806      	bhi.n	811802a <etharp_raw+0x56>
 811801c:	4b2e      	ldr	r3, [pc, #184]	@ (81180d8 <etharp_raw+0x104>)
 811801e:	f240 4262 	movw	r2, #1122	@ 0x462
 8118022:	4930      	ldr	r1, [pc, #192]	@ (81180e4 <etharp_raw+0x110>)
 8118024:	482e      	ldr	r0, [pc, #184]	@ (81180e0 <etharp_raw+0x10c>)
 8118026:	f00b fdf9 	bl	8123c1c <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 811802a:	69bb      	ldr	r3, [r7, #24]
 811802c:	685b      	ldr	r3, [r3, #4]
 811802e:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8118030:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8118032:	4618      	mov	r0, r3
 8118034:	f7ff f84a 	bl	81170cc <lwip_htons>
 8118038:	4603      	mov	r3, r0
 811803a:	461a      	mov	r2, r3
 811803c:	697b      	ldr	r3, [r7, #20]
 811803e:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8118040:	68fb      	ldr	r3, [r7, #12]
 8118042:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8118046:	2b06      	cmp	r3, #6
 8118048:	d006      	beq.n	8118058 <etharp_raw+0x84>
 811804a:	4b23      	ldr	r3, [pc, #140]	@ (81180d8 <etharp_raw+0x104>)
 811804c:	f240 4269 	movw	r2, #1129	@ 0x469
 8118050:	4925      	ldr	r1, [pc, #148]	@ (81180e8 <etharp_raw+0x114>)
 8118052:	4823      	ldr	r0, [pc, #140]	@ (81180e0 <etharp_raw+0x10c>)
 8118054:	f00b fde2 	bl	8123c1c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8118058:	697b      	ldr	r3, [r7, #20]
 811805a:	3308      	adds	r3, #8
 811805c:	2206      	movs	r2, #6
 811805e:	6839      	ldr	r1, [r7, #0]
 8118060:	4618      	mov	r0, r3
 8118062:	f00c f86a 	bl	812413a <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8118066:	697b      	ldr	r3, [r7, #20]
 8118068:	3312      	adds	r3, #18
 811806a:	2206      	movs	r2, #6
 811806c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 811806e:	4618      	mov	r0, r3
 8118070:	f00c f863 	bl	812413a <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8118074:	697b      	ldr	r3, [r7, #20]
 8118076:	330e      	adds	r3, #14
 8118078:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 811807a:	6812      	ldr	r2, [r2, #0]
 811807c:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 811807e:	697b      	ldr	r3, [r7, #20]
 8118080:	3318      	adds	r3, #24
 8118082:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8118084:	6812      	ldr	r2, [r2, #0]
 8118086:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8118088:	697b      	ldr	r3, [r7, #20]
 811808a:	2200      	movs	r2, #0
 811808c:	701a      	strb	r2, [r3, #0]
 811808e:	2200      	movs	r2, #0
 8118090:	f042 0201 	orr.w	r2, r2, #1
 8118094:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8118096:	697b      	ldr	r3, [r7, #20]
 8118098:	2200      	movs	r2, #0
 811809a:	f042 0208 	orr.w	r2, r2, #8
 811809e:	709a      	strb	r2, [r3, #2]
 81180a0:	2200      	movs	r2, #0
 81180a2:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 81180a4:	697b      	ldr	r3, [r7, #20]
 81180a6:	2206      	movs	r2, #6
 81180a8:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 81180aa:	697b      	ldr	r3, [r7, #20]
 81180ac:	2204      	movs	r2, #4
 81180ae:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 81180b0:	f640 0306 	movw	r3, #2054	@ 0x806
 81180b4:	9300      	str	r3, [sp, #0]
 81180b6:	687b      	ldr	r3, [r7, #4]
 81180b8:	68ba      	ldr	r2, [r7, #8]
 81180ba:	69b9      	ldr	r1, [r7, #24]
 81180bc:	68f8      	ldr	r0, [r7, #12]
 81180be:	f000 f8d7 	bl	8118270 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 81180c2:	69b8      	ldr	r0, [r7, #24]
 81180c4:	f003 fa0a 	bl	811b4dc <pbuf_free>
  p = NULL;
 81180c8:	2300      	movs	r3, #0
 81180ca:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 81180cc:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 81180d0:	4618      	mov	r0, r3
 81180d2:	3720      	adds	r7, #32
 81180d4:	46bd      	mov	sp, r7
 81180d6:	bd80      	pop	{r7, pc}
 81180d8:	08125438 	.word	0x08125438
 81180dc:	081255e4 	.word	0x081255e4
 81180e0:	081254bc 	.word	0x081254bc
 81180e4:	08125688 	.word	0x08125688
 81180e8:	081256bc 	.word	0x081256bc

081180ec <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 81180ec:	b580      	push	{r7, lr}
 81180ee:	b088      	sub	sp, #32
 81180f0:	af04      	add	r7, sp, #16
 81180f2:	60f8      	str	r0, [r7, #12]
 81180f4:	60b9      	str	r1, [r7, #8]
 81180f6:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 81180f8:	68fb      	ldr	r3, [r7, #12]
 81180fa:	f103 0126 	add.w	r1, r3, #38	@ 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 81180fe:	68fb      	ldr	r3, [r7, #12]
 8118100:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 8118104:	68fb      	ldr	r3, [r7, #12]
 8118106:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8118108:	2201      	movs	r2, #1
 811810a:	9203      	str	r2, [sp, #12]
 811810c:	68ba      	ldr	r2, [r7, #8]
 811810e:	9202      	str	r2, [sp, #8]
 8118110:	4a06      	ldr	r2, [pc, #24]	@ (811812c <etharp_request_dst+0x40>)
 8118112:	9201      	str	r2, [sp, #4]
 8118114:	9300      	str	r3, [sp, #0]
 8118116:	4603      	mov	r3, r0
 8118118:	687a      	ldr	r2, [r7, #4]
 811811a:	68f8      	ldr	r0, [r7, #12]
 811811c:	f7ff ff5a 	bl	8117fd4 <etharp_raw>
 8118120:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8118122:	4618      	mov	r0, r3
 8118124:	3710      	adds	r7, #16
 8118126:	46bd      	mov	sp, r7
 8118128:	bd80      	pop	{r7, pc}
 811812a:	bf00      	nop
 811812c:	0812842c 	.word	0x0812842c

08118130 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8118130:	b580      	push	{r7, lr}
 8118132:	b082      	sub	sp, #8
 8118134:	af00      	add	r7, sp, #0
 8118136:	6078      	str	r0, [r7, #4]
 8118138:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 811813a:	4a05      	ldr	r2, [pc, #20]	@ (8118150 <etharp_request+0x20>)
 811813c:	6839      	ldr	r1, [r7, #0]
 811813e:	6878      	ldr	r0, [r7, #4]
 8118140:	f7ff ffd4 	bl	81180ec <etharp_request_dst>
 8118144:	4603      	mov	r3, r0
}
 8118146:	4618      	mov	r0, r3
 8118148:	3708      	adds	r7, #8
 811814a:	46bd      	mov	sp, r7
 811814c:	bd80      	pop	{r7, pc}
 811814e:	bf00      	nop
 8118150:	08128424 	.word	0x08128424

08118154 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8118154:	b580      	push	{r7, lr}
 8118156:	b086      	sub	sp, #24
 8118158:	af00      	add	r7, sp, #0
 811815a:	6078      	str	r0, [r7, #4]
 811815c:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 811815e:	230e      	movs	r3, #14
 8118160:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8118162:	687b      	ldr	r3, [r7, #4]
 8118164:	895b      	ldrh	r3, [r3, #10]
 8118166:	2b0e      	cmp	r3, #14
 8118168:	d96e      	bls.n	8118248 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 811816a:	687b      	ldr	r3, [r7, #4]
 811816c:	7bdb      	ldrb	r3, [r3, #15]
 811816e:	2b00      	cmp	r3, #0
 8118170:	d106      	bne.n	8118180 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8118172:	683b      	ldr	r3, [r7, #0]
 8118174:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8118178:	3301      	adds	r3, #1
 811817a:	b2da      	uxtb	r2, r3
 811817c:	687b      	ldr	r3, [r7, #4]
 811817e:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8118180:	687b      	ldr	r3, [r7, #4]
 8118182:	685b      	ldr	r3, [r3, #4]
 8118184:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8118186:	693b      	ldr	r3, [r7, #16]
 8118188:	7b1a      	ldrb	r2, [r3, #12]
 811818a:	7b5b      	ldrb	r3, [r3, #13]
 811818c:	021b      	lsls	r3, r3, #8
 811818e:	4313      	orrs	r3, r2
 8118190:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8118192:	693b      	ldr	r3, [r7, #16]
 8118194:	781b      	ldrb	r3, [r3, #0]
 8118196:	f003 0301 	and.w	r3, r3, #1
 811819a:	2b00      	cmp	r3, #0
 811819c:	d023      	beq.n	81181e6 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 811819e:	693b      	ldr	r3, [r7, #16]
 81181a0:	781b      	ldrb	r3, [r3, #0]
 81181a2:	2b01      	cmp	r3, #1
 81181a4:	d10f      	bne.n	81181c6 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 81181a6:	693b      	ldr	r3, [r7, #16]
 81181a8:	785b      	ldrb	r3, [r3, #1]
 81181aa:	2b00      	cmp	r3, #0
 81181ac:	d11b      	bne.n	81181e6 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 81181ae:	693b      	ldr	r3, [r7, #16]
 81181b0:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 81181b2:	2b5e      	cmp	r3, #94	@ 0x5e
 81181b4:	d117      	bne.n	81181e6 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 81181b6:	687b      	ldr	r3, [r7, #4]
 81181b8:	7b5b      	ldrb	r3, [r3, #13]
 81181ba:	f043 0310 	orr.w	r3, r3, #16
 81181be:	b2da      	uxtb	r2, r3
 81181c0:	687b      	ldr	r3, [r7, #4]
 81181c2:	735a      	strb	r2, [r3, #13]
 81181c4:	e00f      	b.n	81181e6 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 81181c6:	693b      	ldr	r3, [r7, #16]
 81181c8:	2206      	movs	r2, #6
 81181ca:	4928      	ldr	r1, [pc, #160]	@ (811826c <ethernet_input+0x118>)
 81181cc:	4618      	mov	r0, r3
 81181ce:	f00b fe3b 	bl	8123e48 <memcmp>
 81181d2:	4603      	mov	r3, r0
 81181d4:	2b00      	cmp	r3, #0
 81181d6:	d106      	bne.n	81181e6 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 81181d8:	687b      	ldr	r3, [r7, #4]
 81181da:	7b5b      	ldrb	r3, [r3, #13]
 81181dc:	f043 0308 	orr.w	r3, r3, #8
 81181e0:	b2da      	uxtb	r2, r3
 81181e2:	687b      	ldr	r3, [r7, #4]
 81181e4:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 81181e6:	89fb      	ldrh	r3, [r7, #14]
 81181e8:	2b08      	cmp	r3, #8
 81181ea:	d003      	beq.n	81181f4 <ethernet_input+0xa0>
 81181ec:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 81181f0:	d014      	beq.n	811821c <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 81181f2:	e032      	b.n	811825a <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 81181f4:	683b      	ldr	r3, [r7, #0]
 81181f6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 81181fa:	f003 0308 	and.w	r3, r3, #8
 81181fe:	2b00      	cmp	r3, #0
 8118200:	d024      	beq.n	811824c <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8118202:	8afb      	ldrh	r3, [r7, #22]
 8118204:	4619      	mov	r1, r3
 8118206:	6878      	ldr	r0, [r7, #4]
 8118208:	f003 f8e2 	bl	811b3d0 <pbuf_remove_header>
 811820c:	4603      	mov	r3, r0
 811820e:	2b00      	cmp	r3, #0
 8118210:	d11e      	bne.n	8118250 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8118212:	6839      	ldr	r1, [r7, #0]
 8118214:	6878      	ldr	r0, [r7, #4]
 8118216:	f000 fb95 	bl	8118944 <ip4_input>
      break;
 811821a:	e013      	b.n	8118244 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 811821c:	683b      	ldr	r3, [r7, #0]
 811821e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8118222:	f003 0308 	and.w	r3, r3, #8
 8118226:	2b00      	cmp	r3, #0
 8118228:	d014      	beq.n	8118254 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 811822a:	8afb      	ldrh	r3, [r7, #22]
 811822c:	4619      	mov	r1, r3
 811822e:	6878      	ldr	r0, [r7, #4]
 8118230:	f003 f8ce 	bl	811b3d0 <pbuf_remove_header>
 8118234:	4603      	mov	r3, r0
 8118236:	2b00      	cmp	r3, #0
 8118238:	d10e      	bne.n	8118258 <ethernet_input+0x104>
        etharp_input(p, netif);
 811823a:	6839      	ldr	r1, [r7, #0]
 811823c:	6878      	ldr	r0, [r7, #4]
 811823e:	f7ff fb19 	bl	8117874 <etharp_input>
      break;
 8118242:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8118244:	2300      	movs	r3, #0
 8118246:	e00c      	b.n	8118262 <ethernet_input+0x10e>
    goto free_and_return;
 8118248:	bf00      	nop
 811824a:	e006      	b.n	811825a <ethernet_input+0x106>
        goto free_and_return;
 811824c:	bf00      	nop
 811824e:	e004      	b.n	811825a <ethernet_input+0x106>
        goto free_and_return;
 8118250:	bf00      	nop
 8118252:	e002      	b.n	811825a <ethernet_input+0x106>
        goto free_and_return;
 8118254:	bf00      	nop
 8118256:	e000      	b.n	811825a <ethernet_input+0x106>
        goto free_and_return;
 8118258:	bf00      	nop

free_and_return:
  pbuf_free(p);
 811825a:	6878      	ldr	r0, [r7, #4]
 811825c:	f003 f93e 	bl	811b4dc <pbuf_free>
  return ERR_OK;
 8118260:	2300      	movs	r3, #0
}
 8118262:	4618      	mov	r0, r3
 8118264:	3718      	adds	r7, #24
 8118266:	46bd      	mov	sp, r7
 8118268:	bd80      	pop	{r7, pc}
 811826a:	bf00      	nop
 811826c:	08128424 	.word	0x08128424

08118270 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8118270:	b580      	push	{r7, lr}
 8118272:	b086      	sub	sp, #24
 8118274:	af00      	add	r7, sp, #0
 8118276:	60f8      	str	r0, [r7, #12]
 8118278:	60b9      	str	r1, [r7, #8]
 811827a:	607a      	str	r2, [r7, #4]
 811827c:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 811827e:	8c3b      	ldrh	r3, [r7, #32]
 8118280:	4618      	mov	r0, r3
 8118282:	f7fe ff23 	bl	81170cc <lwip_htons>
 8118286:	4603      	mov	r3, r0
 8118288:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 811828a:	210e      	movs	r1, #14
 811828c:	68b8      	ldr	r0, [r7, #8]
 811828e:	f003 f88f 	bl	811b3b0 <pbuf_add_header>
 8118292:	4603      	mov	r3, r0
 8118294:	2b00      	cmp	r3, #0
 8118296:	d125      	bne.n	81182e4 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8118298:	68bb      	ldr	r3, [r7, #8]
 811829a:	685b      	ldr	r3, [r3, #4]
 811829c:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 811829e:	693b      	ldr	r3, [r7, #16]
 81182a0:	8afa      	ldrh	r2, [r7, #22]
 81182a2:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 81182a4:	693b      	ldr	r3, [r7, #16]
 81182a6:	2206      	movs	r2, #6
 81182a8:	6839      	ldr	r1, [r7, #0]
 81182aa:	4618      	mov	r0, r3
 81182ac:	f00b ff45 	bl	812413a <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 81182b0:	693b      	ldr	r3, [r7, #16]
 81182b2:	3306      	adds	r3, #6
 81182b4:	2206      	movs	r2, #6
 81182b6:	6879      	ldr	r1, [r7, #4]
 81182b8:	4618      	mov	r0, r3
 81182ba:	f00b ff3e 	bl	812413a <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 81182be:	68fb      	ldr	r3, [r7, #12]
 81182c0:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 81182c4:	2b06      	cmp	r3, #6
 81182c6:	d006      	beq.n	81182d6 <ethernet_output+0x66>
 81182c8:	4b0a      	ldr	r3, [pc, #40]	@ (81182f4 <ethernet_output+0x84>)
 81182ca:	f44f 7299 	mov.w	r2, #306	@ 0x132
 81182ce:	490a      	ldr	r1, [pc, #40]	@ (81182f8 <ethernet_output+0x88>)
 81182d0:	480a      	ldr	r0, [pc, #40]	@ (81182fc <ethernet_output+0x8c>)
 81182d2:	f00b fca3 	bl	8123c1c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 81182d6:	68fb      	ldr	r3, [r7, #12]
 81182d8:	699b      	ldr	r3, [r3, #24]
 81182da:	68b9      	ldr	r1, [r7, #8]
 81182dc:	68f8      	ldr	r0, [r7, #12]
 81182de:	4798      	blx	r3
 81182e0:	4603      	mov	r3, r0
 81182e2:	e002      	b.n	81182ea <ethernet_output+0x7a>
      goto pbuf_header_failed;
 81182e4:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 81182e6:	f06f 0301 	mvn.w	r3, #1
}
 81182ea:	4618      	mov	r0, r3
 81182ec:	3718      	adds	r7, #24
 81182ee:	46bd      	mov	sp, r7
 81182f0:	bd80      	pop	{r7, pc}
 81182f2:	bf00      	nop
 81182f4:	08125700 	.word	0x08125700
 81182f8:	08125774 	.word	0x08125774
 81182fc:	081257a8 	.word	0x081257a8

08118300 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8118300:	b580      	push	{r7, lr}
 8118302:	b08e      	sub	sp, #56	@ 0x38
 8118304:	af04      	add	r7, sp, #16
 8118306:	6078      	str	r0, [r7, #4]
 8118308:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 811830a:	4b87      	ldr	r3, [pc, #540]	@ (8118528 <icmp_input+0x228>)
 811830c:	689b      	ldr	r3, [r3, #8]
 811830e:	627b      	str	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8118310:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8118312:	781b      	ldrb	r3, [r3, #0]
 8118314:	f003 030f 	and.w	r3, r3, #15
 8118318:	b2db      	uxtb	r3, r3
 811831a:	009b      	lsls	r3, r3, #2
 811831c:	b2db      	uxtb	r3, r3
 811831e:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (hlen < IP_HLEN) {
 8118320:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8118322:	2b13      	cmp	r3, #19
 8118324:	f240 80e8 	bls.w	81184f8 <icmp_input+0x1f8>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8118328:	687b      	ldr	r3, [r7, #4]
 811832a:	895b      	ldrh	r3, [r3, #10]
 811832c:	2b03      	cmp	r3, #3
 811832e:	f240 80e5 	bls.w	81184fc <icmp_input+0x1fc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8118332:	687b      	ldr	r3, [r7, #4]
 8118334:	685b      	ldr	r3, [r3, #4]
 8118336:	781b      	ldrb	r3, [r3, #0]
 8118338:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 811833c:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8118340:	2b00      	cmp	r3, #0
 8118342:	f000 80d2 	beq.w	81184ea <icmp_input+0x1ea>
 8118346:	2b08      	cmp	r3, #8
 8118348:	f040 80d2 	bne.w	81184f0 <icmp_input+0x1f0>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 811834c:	4b77      	ldr	r3, [pc, #476]	@ (811852c <icmp_input+0x22c>)
 811834e:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8118350:	4b75      	ldr	r3, [pc, #468]	@ (8118528 <icmp_input+0x228>)
 8118352:	695b      	ldr	r3, [r3, #20]
 8118354:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8118358:	2be0      	cmp	r3, #224	@ 0xe0
 811835a:	f000 80d6 	beq.w	811850a <icmp_input+0x20a>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 811835e:	4b72      	ldr	r3, [pc, #456]	@ (8118528 <icmp_input+0x228>)
 8118360:	695b      	ldr	r3, [r3, #20]
 8118362:	4a71      	ldr	r2, [pc, #452]	@ (8118528 <icmp_input+0x228>)
 8118364:	6812      	ldr	r2, [r2, #0]
 8118366:	4611      	mov	r1, r2
 8118368:	4618      	mov	r0, r3
 811836a:	f000 fce7 	bl	8118d3c <ip4_addr_isbroadcast_u32>
 811836e:	4603      	mov	r3, r0
 8118370:	2b00      	cmp	r3, #0
 8118372:	f040 80cc 	bne.w	811850e <icmp_input+0x20e>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8118376:	687b      	ldr	r3, [r7, #4]
 8118378:	891b      	ldrh	r3, [r3, #8]
 811837a:	2b07      	cmp	r3, #7
 811837c:	f240 80c0 	bls.w	8118500 <icmp_input+0x200>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
        goto lenerr;
      }
#if CHECKSUM_CHECK_ICMP
      IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_ICMP) {
        if (inet_chksum_pbuf(p) != 0) {
 8118380:	6878      	ldr	r0, [r7, #4]
 8118382:	f000 f9e0 	bl	8118746 <inet_chksum_pbuf>
 8118386:	4603      	mov	r3, r0
 8118388:	2b00      	cmp	r3, #0
 811838a:	d003      	beq.n	8118394 <icmp_input+0x94>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: checksum failed for received ICMP echo\n"));
          pbuf_free(p);
 811838c:	6878      	ldr	r0, [r7, #4]
 811838e:	f003 f8a5 	bl	811b4dc <pbuf_free>
          ICMP_STATS_INC(icmp.chkerr);
          MIB2_STATS_INC(mib2.icmpinerrors);
          return;
 8118392:	e0c5      	b.n	8118520 <icmp_input+0x220>
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8118394:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8118396:	330e      	adds	r3, #14
 8118398:	4619      	mov	r1, r3
 811839a:	6878      	ldr	r0, [r7, #4]
 811839c:	f003 f808 	bl	811b3b0 <pbuf_add_header>
 81183a0:	4603      	mov	r3, r0
 81183a2:	2b00      	cmp	r3, #0
 81183a4:	d04b      	beq.n	811843e <icmp_input+0x13e>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 81183a6:	687b      	ldr	r3, [r7, #4]
 81183a8:	891a      	ldrh	r2, [r3, #8]
 81183aa:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 81183ac:	4413      	add	r3, r2
 81183ae:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 81183b0:	687b      	ldr	r3, [r7, #4]
 81183b2:	891b      	ldrh	r3, [r3, #8]
 81183b4:	8b7a      	ldrh	r2, [r7, #26]
 81183b6:	429a      	cmp	r2, r3
 81183b8:	f0c0 80ab 	bcc.w	8118512 <icmp_input+0x212>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 81183bc:	8b7b      	ldrh	r3, [r7, #26]
 81183be:	f44f 7220 	mov.w	r2, #640	@ 0x280
 81183c2:	4619      	mov	r1, r3
 81183c4:	200e      	movs	r0, #14
 81183c6:	f002 fda7 	bl	811af18 <pbuf_alloc>
 81183ca:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 81183cc:	697b      	ldr	r3, [r7, #20]
 81183ce:	2b00      	cmp	r3, #0
 81183d0:	f000 80a1 	beq.w	8118516 <icmp_input+0x216>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 81183d4:	697b      	ldr	r3, [r7, #20]
 81183d6:	895b      	ldrh	r3, [r3, #10]
 81183d8:	461a      	mov	r2, r3
 81183da:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 81183dc:	3308      	adds	r3, #8
 81183de:	429a      	cmp	r2, r3
 81183e0:	d203      	bcs.n	81183ea <icmp_input+0xea>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 81183e2:	6978      	ldr	r0, [r7, #20]
 81183e4:	f003 f87a 	bl	811b4dc <pbuf_free>
          goto icmperr;
 81183e8:	e096      	b.n	8118518 <icmp_input+0x218>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 81183ea:	697b      	ldr	r3, [r7, #20]
 81183ec:	685b      	ldr	r3, [r3, #4]
 81183ee:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 81183f0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 81183f2:	4618      	mov	r0, r3
 81183f4:	f00b fea1 	bl	812413a <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 81183f8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 81183fa:	4619      	mov	r1, r3
 81183fc:	6978      	ldr	r0, [r7, #20]
 81183fe:	f002 ffe7 	bl	811b3d0 <pbuf_remove_header>
 8118402:	4603      	mov	r3, r0
 8118404:	2b00      	cmp	r3, #0
 8118406:	d009      	beq.n	811841c <icmp_input+0x11c>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8118408:	4b49      	ldr	r3, [pc, #292]	@ (8118530 <icmp_input+0x230>)
 811840a:	22b6      	movs	r2, #182	@ 0xb6
 811840c:	4949      	ldr	r1, [pc, #292]	@ (8118534 <icmp_input+0x234>)
 811840e:	484a      	ldr	r0, [pc, #296]	@ (8118538 <icmp_input+0x238>)
 8118410:	f00b fc04 	bl	8123c1c <iprintf>
          pbuf_free(r);
 8118414:	6978      	ldr	r0, [r7, #20]
 8118416:	f003 f861 	bl	811b4dc <pbuf_free>
          goto icmperr;
 811841a:	e07d      	b.n	8118518 <icmp_input+0x218>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 811841c:	6879      	ldr	r1, [r7, #4]
 811841e:	6978      	ldr	r0, [r7, #20]
 8118420:	f003 f990 	bl	811b744 <pbuf_copy>
 8118424:	4603      	mov	r3, r0
 8118426:	2b00      	cmp	r3, #0
 8118428:	d003      	beq.n	8118432 <icmp_input+0x132>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 811842a:	6978      	ldr	r0, [r7, #20]
 811842c:	f003 f856 	bl	811b4dc <pbuf_free>
          goto icmperr;
 8118430:	e072      	b.n	8118518 <icmp_input+0x218>
        }
        /* free the original p */
        pbuf_free(p);
 8118432:	6878      	ldr	r0, [r7, #4]
 8118434:	f003 f852 	bl	811b4dc <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8118438:	697b      	ldr	r3, [r7, #20]
 811843a:	607b      	str	r3, [r7, #4]
 811843c:	e00f      	b.n	811845e <icmp_input+0x15e>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 811843e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8118440:	330e      	adds	r3, #14
 8118442:	4619      	mov	r1, r3
 8118444:	6878      	ldr	r0, [r7, #4]
 8118446:	f002 ffc3 	bl	811b3d0 <pbuf_remove_header>
 811844a:	4603      	mov	r3, r0
 811844c:	2b00      	cmp	r3, #0
 811844e:	d006      	beq.n	811845e <icmp_input+0x15e>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8118450:	4b37      	ldr	r3, [pc, #220]	@ (8118530 <icmp_input+0x230>)
 8118452:	22c7      	movs	r2, #199	@ 0xc7
 8118454:	4939      	ldr	r1, [pc, #228]	@ (811853c <icmp_input+0x23c>)
 8118456:	4838      	ldr	r0, [pc, #224]	@ (8118538 <icmp_input+0x238>)
 8118458:	f00b fbe0 	bl	8123c1c <iprintf>
          goto icmperr;
 811845c:	e05c      	b.n	8118518 <icmp_input+0x218>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 811845e:	687b      	ldr	r3, [r7, #4]
 8118460:	685b      	ldr	r3, [r3, #4]
 8118462:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8118464:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8118466:	4619      	mov	r1, r3
 8118468:	6878      	ldr	r0, [r7, #4]
 811846a:	f002 ffa1 	bl	811b3b0 <pbuf_add_header>
 811846e:	4603      	mov	r3, r0
 8118470:	2b00      	cmp	r3, #0
 8118472:	d13c      	bne.n	81184ee <icmp_input+0x1ee>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8118474:	687b      	ldr	r3, [r7, #4]
 8118476:	685b      	ldr	r3, [r3, #4]
 8118478:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 811847a:	69fb      	ldr	r3, [r7, #28]
 811847c:	681a      	ldr	r2, [r3, #0]
 811847e:	68fb      	ldr	r3, [r7, #12]
 8118480:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8118482:	4b29      	ldr	r3, [pc, #164]	@ (8118528 <icmp_input+0x228>)
 8118484:	691a      	ldr	r2, [r3, #16]
 8118486:	68fb      	ldr	r3, [r7, #12]
 8118488:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 811848a:	693b      	ldr	r3, [r7, #16]
 811848c:	2200      	movs	r2, #0
 811848e:	701a      	strb	r2, [r3, #0]
#if CHECKSUM_GEN_ICMP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_ICMP) {
          /* adjust the checksum */
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 8118490:	693b      	ldr	r3, [r7, #16]
 8118492:	885b      	ldrh	r3, [r3, #2]
 8118494:	b29b      	uxth	r3, r3
 8118496:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
 811849a:	4293      	cmp	r3, r2
 811849c:	d907      	bls.n	81184ae <icmp_input+0x1ae>
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 811849e:	693b      	ldr	r3, [r7, #16]
 81184a0:	885b      	ldrh	r3, [r3, #2]
 81184a2:	b29b      	uxth	r3, r3
 81184a4:	3309      	adds	r3, #9
 81184a6:	b29a      	uxth	r2, r3
 81184a8:	693b      	ldr	r3, [r7, #16]
 81184aa:	805a      	strh	r2, [r3, #2]
 81184ac:	e006      	b.n	81184bc <icmp_input+0x1bc>
          } else {
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 81184ae:	693b      	ldr	r3, [r7, #16]
 81184b0:	885b      	ldrh	r3, [r3, #2]
 81184b2:	b29b      	uxth	r3, r3
 81184b4:	3308      	adds	r3, #8
 81184b6:	b29a      	uxth	r2, r3
 81184b8:	693b      	ldr	r3, [r7, #16]
 81184ba:	805a      	strh	r2, [r3, #2]
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 81184bc:	68fb      	ldr	r3, [r7, #12]
 81184be:	22ff      	movs	r2, #255	@ 0xff
 81184c0:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 81184c2:	68fb      	ldr	r3, [r7, #12]
 81184c4:	2200      	movs	r2, #0
 81184c6:	729a      	strb	r2, [r3, #10]
 81184c8:	2200      	movs	r2, #0
 81184ca:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 81184cc:	683b      	ldr	r3, [r7, #0]
 81184ce:	9302      	str	r3, [sp, #8]
 81184d0:	2301      	movs	r3, #1
 81184d2:	9301      	str	r3, [sp, #4]
 81184d4:	2300      	movs	r3, #0
 81184d6:	9300      	str	r3, [sp, #0]
 81184d8:	23ff      	movs	r3, #255	@ 0xff
 81184da:	2200      	movs	r2, #0
 81184dc:	69f9      	ldr	r1, [r7, #28]
 81184de:	6878      	ldr	r0, [r7, #4]
 81184e0:	f000 fb54 	bl	8118b8c <ip4_output_if>
 81184e4:	4603      	mov	r3, r0
 81184e6:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 81184e8:	e001      	b.n	81184ee <icmp_input+0x1ee>
      break;
 81184ea:	bf00      	nop
 81184ec:	e000      	b.n	81184f0 <icmp_input+0x1f0>
      break;
 81184ee:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 81184f0:	6878      	ldr	r0, [r7, #4]
 81184f2:	f002 fff3 	bl	811b4dc <pbuf_free>
  return;
 81184f6:	e013      	b.n	8118520 <icmp_input+0x220>
    goto lenerr;
 81184f8:	bf00      	nop
 81184fa:	e002      	b.n	8118502 <icmp_input+0x202>
    goto lenerr;
 81184fc:	bf00      	nop
 81184fe:	e000      	b.n	8118502 <icmp_input+0x202>
        goto lenerr;
 8118500:	bf00      	nop
lenerr:
  pbuf_free(p);
 8118502:	6878      	ldr	r0, [r7, #4]
 8118504:	f002 ffea 	bl	811b4dc <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8118508:	e00a      	b.n	8118520 <icmp_input+0x220>
        goto icmperr;
 811850a:	bf00      	nop
 811850c:	e004      	b.n	8118518 <icmp_input+0x218>
        goto icmperr;
 811850e:	bf00      	nop
 8118510:	e002      	b.n	8118518 <icmp_input+0x218>
          goto icmperr;
 8118512:	bf00      	nop
 8118514:	e000      	b.n	8118518 <icmp_input+0x218>
          goto icmperr;
 8118516:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8118518:	6878      	ldr	r0, [r7, #4]
 811851a:	f002 ffdf 	bl	811b4dc <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 811851e:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8118520:	3728      	adds	r7, #40	@ 0x28
 8118522:	46bd      	mov	sp, r7
 8118524:	bd80      	pop	{r7, pc}
 8118526:	bf00      	nop
 8118528:	1000b300 	.word	0x1000b300
 811852c:	1000b314 	.word	0x1000b314
 8118530:	081257d0 	.word	0x081257d0
 8118534:	08125844 	.word	0x08125844
 8118538:	0812587c 	.word	0x0812587c
 811853c:	081258a4 	.word	0x081258a4

08118540 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8118540:	b580      	push	{r7, lr}
 8118542:	b082      	sub	sp, #8
 8118544:	af00      	add	r7, sp, #0
 8118546:	6078      	str	r0, [r7, #4]
 8118548:	460b      	mov	r3, r1
 811854a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 811854c:	78fb      	ldrb	r3, [r7, #3]
 811854e:	461a      	mov	r2, r3
 8118550:	2103      	movs	r1, #3
 8118552:	6878      	ldr	r0, [r7, #4]
 8118554:	f000 f814 	bl	8118580 <icmp_send_response>
}
 8118558:	bf00      	nop
 811855a:	3708      	adds	r7, #8
 811855c:	46bd      	mov	sp, r7
 811855e:	bd80      	pop	{r7, pc}

08118560 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8118560:	b580      	push	{r7, lr}
 8118562:	b082      	sub	sp, #8
 8118564:	af00      	add	r7, sp, #0
 8118566:	6078      	str	r0, [r7, #4]
 8118568:	460b      	mov	r3, r1
 811856a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 811856c:	78fb      	ldrb	r3, [r7, #3]
 811856e:	461a      	mov	r2, r3
 8118570:	210b      	movs	r1, #11
 8118572:	6878      	ldr	r0, [r7, #4]
 8118574:	f000 f804 	bl	8118580 <icmp_send_response>
}
 8118578:	bf00      	nop
 811857a:	3708      	adds	r7, #8
 811857c:	46bd      	mov	sp, r7
 811857e:	bd80      	pop	{r7, pc}

08118580 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8118580:	b580      	push	{r7, lr}
 8118582:	b08c      	sub	sp, #48	@ 0x30
 8118584:	af04      	add	r7, sp, #16
 8118586:	6078      	str	r0, [r7, #4]
 8118588:	460b      	mov	r3, r1
 811858a:	70fb      	strb	r3, [r7, #3]
 811858c:	4613      	mov	r3, r2
 811858e:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8118590:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8118594:	2124      	movs	r1, #36	@ 0x24
 8118596:	2022      	movs	r0, #34	@ 0x22
 8118598:	f002 fcbe 	bl	811af18 <pbuf_alloc>
 811859c:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 811859e:	69fb      	ldr	r3, [r7, #28]
 81185a0:	2b00      	cmp	r3, #0
 81185a2:	d056      	beq.n	8118652 <icmp_send_response+0xd2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 81185a4:	69fb      	ldr	r3, [r7, #28]
 81185a6:	895b      	ldrh	r3, [r3, #10]
 81185a8:	2b23      	cmp	r3, #35	@ 0x23
 81185aa:	d806      	bhi.n	81185ba <icmp_send_response+0x3a>
 81185ac:	4b2b      	ldr	r3, [pc, #172]	@ (811865c <icmp_send_response+0xdc>)
 81185ae:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 81185b2:	492b      	ldr	r1, [pc, #172]	@ (8118660 <icmp_send_response+0xe0>)
 81185b4:	482b      	ldr	r0, [pc, #172]	@ (8118664 <icmp_send_response+0xe4>)
 81185b6:	f00b fb31 	bl	8123c1c <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 81185ba:	687b      	ldr	r3, [r7, #4]
 81185bc:	685b      	ldr	r3, [r3, #4]
 81185be:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 81185c0:	69fb      	ldr	r3, [r7, #28]
 81185c2:	685b      	ldr	r3, [r3, #4]
 81185c4:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 81185c6:	697b      	ldr	r3, [r7, #20]
 81185c8:	78fa      	ldrb	r2, [r7, #3]
 81185ca:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 81185cc:	697b      	ldr	r3, [r7, #20]
 81185ce:	78ba      	ldrb	r2, [r7, #2]
 81185d0:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 81185d2:	697b      	ldr	r3, [r7, #20]
 81185d4:	2200      	movs	r2, #0
 81185d6:	711a      	strb	r2, [r3, #4]
 81185d8:	2200      	movs	r2, #0
 81185da:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 81185dc:	697b      	ldr	r3, [r7, #20]
 81185de:	2200      	movs	r2, #0
 81185e0:	719a      	strb	r2, [r3, #6]
 81185e2:	2200      	movs	r2, #0
 81185e4:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 81185e6:	69fb      	ldr	r3, [r7, #28]
 81185e8:	685b      	ldr	r3, [r3, #4]
 81185ea:	f103 0008 	add.w	r0, r3, #8
 81185ee:	687b      	ldr	r3, [r7, #4]
 81185f0:	685b      	ldr	r3, [r3, #4]
 81185f2:	221c      	movs	r2, #28
 81185f4:	4619      	mov	r1, r3
 81185f6:	f00b fda0 	bl	812413a <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 81185fa:	69bb      	ldr	r3, [r7, #24]
 81185fc:	68db      	ldr	r3, [r3, #12]
 81185fe:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8118600:	f107 030c 	add.w	r3, r7, #12
 8118604:	4618      	mov	r0, r3
 8118606:	f000 f903 	bl	8118810 <ip4_route>
 811860a:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 811860c:	693b      	ldr	r3, [r7, #16]
 811860e:	2b00      	cmp	r3, #0
 8118610:	d01b      	beq.n	811864a <icmp_send_response+0xca>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8118612:	697b      	ldr	r3, [r7, #20]
 8118614:	2200      	movs	r2, #0
 8118616:	709a      	strb	r2, [r3, #2]
 8118618:	2200      	movs	r2, #0
 811861a:	70da      	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 811861c:	69fb      	ldr	r3, [r7, #28]
 811861e:	895b      	ldrh	r3, [r3, #10]
 8118620:	4619      	mov	r1, r3
 8118622:	6978      	ldr	r0, [r7, #20]
 8118624:	f000 f87d 	bl	8118722 <inet_chksum>
 8118628:	4603      	mov	r3, r0
 811862a:	461a      	mov	r2, r3
 811862c:	697b      	ldr	r3, [r7, #20]
 811862e:	805a      	strh	r2, [r3, #2]
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8118630:	f107 020c 	add.w	r2, r7, #12
 8118634:	693b      	ldr	r3, [r7, #16]
 8118636:	9302      	str	r3, [sp, #8]
 8118638:	2301      	movs	r3, #1
 811863a:	9301      	str	r3, [sp, #4]
 811863c:	2300      	movs	r3, #0
 811863e:	9300      	str	r3, [sp, #0]
 8118640:	23ff      	movs	r3, #255	@ 0xff
 8118642:	2100      	movs	r1, #0
 8118644:	69f8      	ldr	r0, [r7, #28]
 8118646:	f000 faa1 	bl	8118b8c <ip4_output_if>
  }
  pbuf_free(q);
 811864a:	69f8      	ldr	r0, [r7, #28]
 811864c:	f002 ff46 	bl	811b4dc <pbuf_free>
 8118650:	e000      	b.n	8118654 <icmp_send_response+0xd4>
    return;
 8118652:	bf00      	nop
}
 8118654:	3720      	adds	r7, #32
 8118656:	46bd      	mov	sp, r7
 8118658:	bd80      	pop	{r7, pc}
 811865a:	bf00      	nop
 811865c:	081257d0 	.word	0x081257d0
 8118660:	081258d8 	.word	0x081258d8
 8118664:	0812587c 	.word	0x0812587c

08118668 <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 8118668:	b480      	push	{r7}
 811866a:	b089      	sub	sp, #36	@ 0x24
 811866c:	af00      	add	r7, sp, #0
 811866e:	6078      	str	r0, [r7, #4]
 8118670:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
 8118672:	687b      	ldr	r3, [r7, #4]
 8118674:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
 8118676:	2300      	movs	r3, #0
 8118678:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
 811867a:	2300      	movs	r3, #0
 811867c:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 811867e:	69fb      	ldr	r3, [r7, #28]
 8118680:	f003 0301 	and.w	r3, r3, #1
 8118684:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 8118686:	693b      	ldr	r3, [r7, #16]
 8118688:	2b00      	cmp	r3, #0
 811868a:	d00d      	beq.n	81186a8 <lwip_standard_chksum+0x40>
 811868c:	683b      	ldr	r3, [r7, #0]
 811868e:	2b00      	cmp	r3, #0
 8118690:	dd0a      	ble.n	81186a8 <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 8118692:	69fa      	ldr	r2, [r7, #28]
 8118694:	1c53      	adds	r3, r2, #1
 8118696:	61fb      	str	r3, [r7, #28]
 8118698:	f107 030e 	add.w	r3, r7, #14
 811869c:	3301      	adds	r3, #1
 811869e:	7812      	ldrb	r2, [r2, #0]
 81186a0:	701a      	strb	r2, [r3, #0]
    len--;
 81186a2:	683b      	ldr	r3, [r7, #0]
 81186a4:	3b01      	subs	r3, #1
 81186a6:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
 81186a8:	69fb      	ldr	r3, [r7, #28]
 81186aa:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 81186ac:	e00a      	b.n	81186c4 <lwip_standard_chksum+0x5c>
    sum += *ps++;
 81186ae:	69bb      	ldr	r3, [r7, #24]
 81186b0:	1c9a      	adds	r2, r3, #2
 81186b2:	61ba      	str	r2, [r7, #24]
 81186b4:	881b      	ldrh	r3, [r3, #0]
 81186b6:	461a      	mov	r2, r3
 81186b8:	697b      	ldr	r3, [r7, #20]
 81186ba:	4413      	add	r3, r2
 81186bc:	617b      	str	r3, [r7, #20]
    len -= 2;
 81186be:	683b      	ldr	r3, [r7, #0]
 81186c0:	3b02      	subs	r3, #2
 81186c2:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 81186c4:	683b      	ldr	r3, [r7, #0]
 81186c6:	2b01      	cmp	r3, #1
 81186c8:	dcf1      	bgt.n	81186ae <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 81186ca:	683b      	ldr	r3, [r7, #0]
 81186cc:	2b00      	cmp	r3, #0
 81186ce:	dd04      	ble.n	81186da <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 81186d0:	f107 030e 	add.w	r3, r7, #14
 81186d4:	69ba      	ldr	r2, [r7, #24]
 81186d6:	7812      	ldrb	r2, [r2, #0]
 81186d8:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 81186da:	89fb      	ldrh	r3, [r7, #14]
 81186dc:	461a      	mov	r2, r3
 81186de:	697b      	ldr	r3, [r7, #20]
 81186e0:	4413      	add	r3, r2
 81186e2:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 81186e4:	697b      	ldr	r3, [r7, #20]
 81186e6:	0c1a      	lsrs	r2, r3, #16
 81186e8:	697b      	ldr	r3, [r7, #20]
 81186ea:	b29b      	uxth	r3, r3
 81186ec:	4413      	add	r3, r2
 81186ee:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 81186f0:	697b      	ldr	r3, [r7, #20]
 81186f2:	0c1a      	lsrs	r2, r3, #16
 81186f4:	697b      	ldr	r3, [r7, #20]
 81186f6:	b29b      	uxth	r3, r3
 81186f8:	4413      	add	r3, r2
 81186fa:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 81186fc:	693b      	ldr	r3, [r7, #16]
 81186fe:	2b00      	cmp	r3, #0
 8118700:	d007      	beq.n	8118712 <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
 8118702:	697b      	ldr	r3, [r7, #20]
 8118704:	021b      	lsls	r3, r3, #8
 8118706:	b29a      	uxth	r2, r3
 8118708:	697b      	ldr	r3, [r7, #20]
 811870a:	0a1b      	lsrs	r3, r3, #8
 811870c:	b2db      	uxtb	r3, r3
 811870e:	4313      	orrs	r3, r2
 8118710:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 8118712:	697b      	ldr	r3, [r7, #20]
 8118714:	b29b      	uxth	r3, r3
}
 8118716:	4618      	mov	r0, r3
 8118718:	3724      	adds	r7, #36	@ 0x24
 811871a:	46bd      	mov	sp, r7
 811871c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8118720:	4770      	bx	lr

08118722 <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 8118722:	b580      	push	{r7, lr}
 8118724:	b082      	sub	sp, #8
 8118726:	af00      	add	r7, sp, #0
 8118728:	6078      	str	r0, [r7, #4]
 811872a:	460b      	mov	r3, r1
 811872c:	807b      	strh	r3, [r7, #2]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 811872e:	887b      	ldrh	r3, [r7, #2]
 8118730:	4619      	mov	r1, r3
 8118732:	6878      	ldr	r0, [r7, #4]
 8118734:	f7ff ff98 	bl	8118668 <lwip_standard_chksum>
 8118738:	4603      	mov	r3, r0
 811873a:	43db      	mvns	r3, r3
 811873c:	b29b      	uxth	r3, r3
}
 811873e:	4618      	mov	r0, r3
 8118740:	3708      	adds	r7, #8
 8118742:	46bd      	mov	sp, r7
 8118744:	bd80      	pop	{r7, pc}

08118746 <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
 8118746:	b580      	push	{r7, lr}
 8118748:	b086      	sub	sp, #24
 811874a:	af00      	add	r7, sp, #0
 811874c:	6078      	str	r0, [r7, #4]
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;
 811874e:	2300      	movs	r3, #0
 8118750:	60fb      	str	r3, [r7, #12]

  acc = 0;
 8118752:	2300      	movs	r3, #0
 8118754:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 8118756:	687b      	ldr	r3, [r7, #4]
 8118758:	613b      	str	r3, [r7, #16]
 811875a:	e02b      	b.n	81187b4 <inet_chksum_pbuf+0x6e>
    acc += LWIP_CHKSUM(q->payload, q->len);
 811875c:	693b      	ldr	r3, [r7, #16]
 811875e:	685a      	ldr	r2, [r3, #4]
 8118760:	693b      	ldr	r3, [r7, #16]
 8118762:	895b      	ldrh	r3, [r3, #10]
 8118764:	4619      	mov	r1, r3
 8118766:	4610      	mov	r0, r2
 8118768:	f7ff ff7e 	bl	8118668 <lwip_standard_chksum>
 811876c:	4603      	mov	r3, r0
 811876e:	461a      	mov	r2, r3
 8118770:	697b      	ldr	r3, [r7, #20]
 8118772:	4413      	add	r3, r2
 8118774:	617b      	str	r3, [r7, #20]
    acc = FOLD_U32T(acc);
 8118776:	697b      	ldr	r3, [r7, #20]
 8118778:	0c1a      	lsrs	r2, r3, #16
 811877a:	697b      	ldr	r3, [r7, #20]
 811877c:	b29b      	uxth	r3, r3
 811877e:	4413      	add	r3, r2
 8118780:	617b      	str	r3, [r7, #20]
    if (q->len % 2 != 0) {
 8118782:	693b      	ldr	r3, [r7, #16]
 8118784:	895b      	ldrh	r3, [r3, #10]
 8118786:	f003 0301 	and.w	r3, r3, #1
 811878a:	b29b      	uxth	r3, r3
 811878c:	2b00      	cmp	r3, #0
 811878e:	d00e      	beq.n	81187ae <inet_chksum_pbuf+0x68>
      swapped = !swapped;
 8118790:	68fb      	ldr	r3, [r7, #12]
 8118792:	2b00      	cmp	r3, #0
 8118794:	bf0c      	ite	eq
 8118796:	2301      	moveq	r3, #1
 8118798:	2300      	movne	r3, #0
 811879a:	b2db      	uxtb	r3, r3
 811879c:	60fb      	str	r3, [r7, #12]
      acc = SWAP_BYTES_IN_WORD(acc);
 811879e:	697b      	ldr	r3, [r7, #20]
 81187a0:	021b      	lsls	r3, r3, #8
 81187a2:	b29a      	uxth	r2, r3
 81187a4:	697b      	ldr	r3, [r7, #20]
 81187a6:	0a1b      	lsrs	r3, r3, #8
 81187a8:	b2db      	uxtb	r3, r3
 81187aa:	4313      	orrs	r3, r2
 81187ac:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 81187ae:	693b      	ldr	r3, [r7, #16]
 81187b0:	681b      	ldr	r3, [r3, #0]
 81187b2:	613b      	str	r3, [r7, #16]
 81187b4:	693b      	ldr	r3, [r7, #16]
 81187b6:	2b00      	cmp	r3, #0
 81187b8:	d1d0      	bne.n	811875c <inet_chksum_pbuf+0x16>
    }
  }

  if (swapped) {
 81187ba:	68fb      	ldr	r3, [r7, #12]
 81187bc:	2b00      	cmp	r3, #0
 81187be:	d007      	beq.n	81187d0 <inet_chksum_pbuf+0x8a>
    acc = SWAP_BYTES_IN_WORD(acc);
 81187c0:	697b      	ldr	r3, [r7, #20]
 81187c2:	021b      	lsls	r3, r3, #8
 81187c4:	b29a      	uxth	r2, r3
 81187c6:	697b      	ldr	r3, [r7, #20]
 81187c8:	0a1b      	lsrs	r3, r3, #8
 81187ca:	b2db      	uxtb	r3, r3
 81187cc:	4313      	orrs	r3, r2
 81187ce:	617b      	str	r3, [r7, #20]
  }
  return (u16_t)~(acc & 0xffffUL);
 81187d0:	697b      	ldr	r3, [r7, #20]
 81187d2:	b29b      	uxth	r3, r3
 81187d4:	43db      	mvns	r3, r3
 81187d6:	b29b      	uxth	r3, r3
}
 81187d8:	4618      	mov	r0, r3
 81187da:	3718      	adds	r7, #24
 81187dc:	46bd      	mov	sp, r7
 81187de:	bd80      	pop	{r7, pc}

081187e0 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 81187e0:	b580      	push	{r7, lr}
 81187e2:	b082      	sub	sp, #8
 81187e4:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 81187e6:	2300      	movs	r3, #0
 81187e8:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 81187ea:	f003 f997 	bl	811bb1c <sys_init>
#endif /* !NO_SYS */
  mem_init();
 81187ee:	f001 fba3 	bl	8119f38 <mem_init>
  memp_init();
 81187f2:	f001 feed 	bl	811a5d0 <memp_init>
  pbuf_init();
  netif_init();
 81187f6:	f001 fff9 	bl	811a7ec <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 81187fa:	f009 fcf9 	bl	81221f0 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 81187fe:	f003 fa09 	bl	811bc14 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8118802:	f009 fc3b 	bl	812207c <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8118806:	bf00      	nop
 8118808:	3708      	adds	r7, #8
 811880a:	46bd      	mov	sp, r7
 811880c:	bd80      	pop	{r7, pc}
	...

08118810 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8118810:	b480      	push	{r7}
 8118812:	b085      	sub	sp, #20
 8118814:	af00      	add	r7, sp, #0
 8118816:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8118818:	4b33      	ldr	r3, [pc, #204]	@ (81188e8 <ip4_route+0xd8>)
 811881a:	681b      	ldr	r3, [r3, #0]
 811881c:	60fb      	str	r3, [r7, #12]
 811881e:	e036      	b.n	811888e <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8118820:	68fb      	ldr	r3, [r7, #12]
 8118822:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8118826:	f003 0301 	and.w	r3, r3, #1
 811882a:	b2db      	uxtb	r3, r3
 811882c:	2b00      	cmp	r3, #0
 811882e:	d02b      	beq.n	8118888 <ip4_route+0x78>
 8118830:	68fb      	ldr	r3, [r7, #12]
 8118832:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8118836:	089b      	lsrs	r3, r3, #2
 8118838:	f003 0301 	and.w	r3, r3, #1
 811883c:	b2db      	uxtb	r3, r3
 811883e:	2b00      	cmp	r3, #0
 8118840:	d022      	beq.n	8118888 <ip4_route+0x78>
 8118842:	68fb      	ldr	r3, [r7, #12]
 8118844:	3304      	adds	r3, #4
 8118846:	681b      	ldr	r3, [r3, #0]
 8118848:	2b00      	cmp	r3, #0
 811884a:	d01d      	beq.n	8118888 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 811884c:	687b      	ldr	r3, [r7, #4]
 811884e:	681a      	ldr	r2, [r3, #0]
 8118850:	68fb      	ldr	r3, [r7, #12]
 8118852:	3304      	adds	r3, #4
 8118854:	681b      	ldr	r3, [r3, #0]
 8118856:	405a      	eors	r2, r3
 8118858:	68fb      	ldr	r3, [r7, #12]
 811885a:	3308      	adds	r3, #8
 811885c:	681b      	ldr	r3, [r3, #0]
 811885e:	4013      	ands	r3, r2
 8118860:	2b00      	cmp	r3, #0
 8118862:	d101      	bne.n	8118868 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8118864:	68fb      	ldr	r3, [r7, #12]
 8118866:	e038      	b.n	81188da <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8118868:	68fb      	ldr	r3, [r7, #12]
 811886a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 811886e:	f003 0302 	and.w	r3, r3, #2
 8118872:	2b00      	cmp	r3, #0
 8118874:	d108      	bne.n	8118888 <ip4_route+0x78>
 8118876:	687b      	ldr	r3, [r7, #4]
 8118878:	681a      	ldr	r2, [r3, #0]
 811887a:	68fb      	ldr	r3, [r7, #12]
 811887c:	330c      	adds	r3, #12
 811887e:	681b      	ldr	r3, [r3, #0]
 8118880:	429a      	cmp	r2, r3
 8118882:	d101      	bne.n	8118888 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8118884:	68fb      	ldr	r3, [r7, #12]
 8118886:	e028      	b.n	81188da <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8118888:	68fb      	ldr	r3, [r7, #12]
 811888a:	681b      	ldr	r3, [r3, #0]
 811888c:	60fb      	str	r3, [r7, #12]
 811888e:	68fb      	ldr	r3, [r7, #12]
 8118890:	2b00      	cmp	r3, #0
 8118892:	d1c5      	bne.n	8118820 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8118894:	4b15      	ldr	r3, [pc, #84]	@ (81188ec <ip4_route+0xdc>)
 8118896:	681b      	ldr	r3, [r3, #0]
 8118898:	2b00      	cmp	r3, #0
 811889a:	d01a      	beq.n	81188d2 <ip4_route+0xc2>
 811889c:	4b13      	ldr	r3, [pc, #76]	@ (81188ec <ip4_route+0xdc>)
 811889e:	681b      	ldr	r3, [r3, #0]
 81188a0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 81188a4:	f003 0301 	and.w	r3, r3, #1
 81188a8:	2b00      	cmp	r3, #0
 81188aa:	d012      	beq.n	81188d2 <ip4_route+0xc2>
 81188ac:	4b0f      	ldr	r3, [pc, #60]	@ (81188ec <ip4_route+0xdc>)
 81188ae:	681b      	ldr	r3, [r3, #0]
 81188b0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 81188b4:	f003 0304 	and.w	r3, r3, #4
 81188b8:	2b00      	cmp	r3, #0
 81188ba:	d00a      	beq.n	81188d2 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 81188bc:	4b0b      	ldr	r3, [pc, #44]	@ (81188ec <ip4_route+0xdc>)
 81188be:	681b      	ldr	r3, [r3, #0]
 81188c0:	3304      	adds	r3, #4
 81188c2:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 81188c4:	2b00      	cmp	r3, #0
 81188c6:	d004      	beq.n	81188d2 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 81188c8:	687b      	ldr	r3, [r7, #4]
 81188ca:	681b      	ldr	r3, [r3, #0]
 81188cc:	b2db      	uxtb	r3, r3
 81188ce:	2b7f      	cmp	r3, #127	@ 0x7f
 81188d0:	d101      	bne.n	81188d6 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 81188d2:	2300      	movs	r3, #0
 81188d4:	e001      	b.n	81188da <ip4_route+0xca>
  }

  return netif_default;
 81188d6:	4b05      	ldr	r3, [pc, #20]	@ (81188ec <ip4_route+0xdc>)
 81188d8:	681b      	ldr	r3, [r3, #0]
}
 81188da:	4618      	mov	r0, r3
 81188dc:	3714      	adds	r7, #20
 81188de:	46bd      	mov	sp, r7
 81188e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81188e4:	4770      	bx	lr
 81188e6:	bf00      	nop
 81188e8:	1000e488 	.word	0x1000e488
 81188ec:	1000e48c 	.word	0x1000e48c

081188f0 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 81188f0:	b580      	push	{r7, lr}
 81188f2:	b082      	sub	sp, #8
 81188f4:	af00      	add	r7, sp, #0
 81188f6:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 81188f8:	687b      	ldr	r3, [r7, #4]
 81188fa:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 81188fe:	f003 0301 	and.w	r3, r3, #1
 8118902:	b2db      	uxtb	r3, r3
 8118904:	2b00      	cmp	r3, #0
 8118906:	d016      	beq.n	8118936 <ip4_input_accept+0x46>
 8118908:	687b      	ldr	r3, [r7, #4]
 811890a:	3304      	adds	r3, #4
 811890c:	681b      	ldr	r3, [r3, #0]
 811890e:	2b00      	cmp	r3, #0
 8118910:	d011      	beq.n	8118936 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8118912:	4b0b      	ldr	r3, [pc, #44]	@ (8118940 <ip4_input_accept+0x50>)
 8118914:	695a      	ldr	r2, [r3, #20]
 8118916:	687b      	ldr	r3, [r7, #4]
 8118918:	3304      	adds	r3, #4
 811891a:	681b      	ldr	r3, [r3, #0]
 811891c:	429a      	cmp	r2, r3
 811891e:	d008      	beq.n	8118932 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8118920:	4b07      	ldr	r3, [pc, #28]	@ (8118940 <ip4_input_accept+0x50>)
 8118922:	695b      	ldr	r3, [r3, #20]
 8118924:	6879      	ldr	r1, [r7, #4]
 8118926:	4618      	mov	r0, r3
 8118928:	f000 fa08 	bl	8118d3c <ip4_addr_isbroadcast_u32>
 811892c:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 811892e:	2b00      	cmp	r3, #0
 8118930:	d001      	beq.n	8118936 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8118932:	2301      	movs	r3, #1
 8118934:	e000      	b.n	8118938 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8118936:	2300      	movs	r3, #0
}
 8118938:	4618      	mov	r0, r3
 811893a:	3708      	adds	r7, #8
 811893c:	46bd      	mov	sp, r7
 811893e:	bd80      	pop	{r7, pc}
 8118940:	1000b300 	.word	0x1000b300

08118944 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8118944:	b580      	push	{r7, lr}
 8118946:	b086      	sub	sp, #24
 8118948:	af00      	add	r7, sp, #0
 811894a:	6078      	str	r0, [r7, #4]
 811894c:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 811894e:	687b      	ldr	r3, [r7, #4]
 8118950:	685b      	ldr	r3, [r3, #4]
 8118952:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8118954:	697b      	ldr	r3, [r7, #20]
 8118956:	781b      	ldrb	r3, [r3, #0]
 8118958:	091b      	lsrs	r3, r3, #4
 811895a:	b2db      	uxtb	r3, r3
 811895c:	2b04      	cmp	r3, #4
 811895e:	d004      	beq.n	811896a <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8118960:	6878      	ldr	r0, [r7, #4]
 8118962:	f002 fdbb 	bl	811b4dc <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8118966:	2300      	movs	r3, #0
 8118968:	e107      	b.n	8118b7a <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 811896a:	697b      	ldr	r3, [r7, #20]
 811896c:	781b      	ldrb	r3, [r3, #0]
 811896e:	f003 030f 	and.w	r3, r3, #15
 8118972:	b2db      	uxtb	r3, r3
 8118974:	009b      	lsls	r3, r3, #2
 8118976:	b2db      	uxtb	r3, r3
 8118978:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 811897a:	697b      	ldr	r3, [r7, #20]
 811897c:	885b      	ldrh	r3, [r3, #2]
 811897e:	b29b      	uxth	r3, r3
 8118980:	4618      	mov	r0, r3
 8118982:	f7fe fba3 	bl	81170cc <lwip_htons>
 8118986:	4603      	mov	r3, r0
 8118988:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 811898a:	687b      	ldr	r3, [r7, #4]
 811898c:	891b      	ldrh	r3, [r3, #8]
 811898e:	89ba      	ldrh	r2, [r7, #12]
 8118990:	429a      	cmp	r2, r3
 8118992:	d204      	bcs.n	811899e <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8118994:	89bb      	ldrh	r3, [r7, #12]
 8118996:	4619      	mov	r1, r3
 8118998:	6878      	ldr	r0, [r7, #4]
 811899a:	f002 fc1b 	bl	811b1d4 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 811899e:	687b      	ldr	r3, [r7, #4]
 81189a0:	895b      	ldrh	r3, [r3, #10]
 81189a2:	89fa      	ldrh	r2, [r7, #14]
 81189a4:	429a      	cmp	r2, r3
 81189a6:	d807      	bhi.n	81189b8 <ip4_input+0x74>
 81189a8:	687b      	ldr	r3, [r7, #4]
 81189aa:	891b      	ldrh	r3, [r3, #8]
 81189ac:	89ba      	ldrh	r2, [r7, #12]
 81189ae:	429a      	cmp	r2, r3
 81189b0:	d802      	bhi.n	81189b8 <ip4_input+0x74>
 81189b2:	89fb      	ldrh	r3, [r7, #14]
 81189b4:	2b13      	cmp	r3, #19
 81189b6:	d804      	bhi.n	81189c2 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 81189b8:	6878      	ldr	r0, [r7, #4]
 81189ba:	f002 fd8f 	bl	811b4dc <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 81189be:	2300      	movs	r3, #0
 81189c0:	e0db      	b.n	8118b7a <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 81189c2:	697b      	ldr	r3, [r7, #20]
 81189c4:	691b      	ldr	r3, [r3, #16]
 81189c6:	4a6f      	ldr	r2, [pc, #444]	@ (8118b84 <ip4_input+0x240>)
 81189c8:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 81189ca:	697b      	ldr	r3, [r7, #20]
 81189cc:	68db      	ldr	r3, [r3, #12]
 81189ce:	4a6d      	ldr	r2, [pc, #436]	@ (8118b84 <ip4_input+0x240>)
 81189d0:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 81189d2:	4b6c      	ldr	r3, [pc, #432]	@ (8118b84 <ip4_input+0x240>)
 81189d4:	695b      	ldr	r3, [r3, #20]
 81189d6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 81189da:	2be0      	cmp	r3, #224	@ 0xe0
 81189dc:	d112      	bne.n	8118a04 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 81189de:	683b      	ldr	r3, [r7, #0]
 81189e0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 81189e4:	f003 0301 	and.w	r3, r3, #1
 81189e8:	b2db      	uxtb	r3, r3
 81189ea:	2b00      	cmp	r3, #0
 81189ec:	d007      	beq.n	81189fe <ip4_input+0xba>
 81189ee:	683b      	ldr	r3, [r7, #0]
 81189f0:	3304      	adds	r3, #4
 81189f2:	681b      	ldr	r3, [r3, #0]
 81189f4:	2b00      	cmp	r3, #0
 81189f6:	d002      	beq.n	81189fe <ip4_input+0xba>
      netif = inp;
 81189f8:	683b      	ldr	r3, [r7, #0]
 81189fa:	613b      	str	r3, [r7, #16]
 81189fc:	e02a      	b.n	8118a54 <ip4_input+0x110>
    } else {
      netif = NULL;
 81189fe:	2300      	movs	r3, #0
 8118a00:	613b      	str	r3, [r7, #16]
 8118a02:	e027      	b.n	8118a54 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8118a04:	6838      	ldr	r0, [r7, #0]
 8118a06:	f7ff ff73 	bl	81188f0 <ip4_input_accept>
 8118a0a:	4603      	mov	r3, r0
 8118a0c:	2b00      	cmp	r3, #0
 8118a0e:	d002      	beq.n	8118a16 <ip4_input+0xd2>
      netif = inp;
 8118a10:	683b      	ldr	r3, [r7, #0]
 8118a12:	613b      	str	r3, [r7, #16]
 8118a14:	e01e      	b.n	8118a54 <ip4_input+0x110>
    } else {
      netif = NULL;
 8118a16:	2300      	movs	r3, #0
 8118a18:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8118a1a:	4b5a      	ldr	r3, [pc, #360]	@ (8118b84 <ip4_input+0x240>)
 8118a1c:	695b      	ldr	r3, [r3, #20]
 8118a1e:	b2db      	uxtb	r3, r3
 8118a20:	2b7f      	cmp	r3, #127	@ 0x7f
 8118a22:	d017      	beq.n	8118a54 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8118a24:	4b58      	ldr	r3, [pc, #352]	@ (8118b88 <ip4_input+0x244>)
 8118a26:	681b      	ldr	r3, [r3, #0]
 8118a28:	613b      	str	r3, [r7, #16]
 8118a2a:	e00e      	b.n	8118a4a <ip4_input+0x106>
          if (netif == inp) {
 8118a2c:	693a      	ldr	r2, [r7, #16]
 8118a2e:	683b      	ldr	r3, [r7, #0]
 8118a30:	429a      	cmp	r2, r3
 8118a32:	d006      	beq.n	8118a42 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8118a34:	6938      	ldr	r0, [r7, #16]
 8118a36:	f7ff ff5b 	bl	81188f0 <ip4_input_accept>
 8118a3a:	4603      	mov	r3, r0
 8118a3c:	2b00      	cmp	r3, #0
 8118a3e:	d108      	bne.n	8118a52 <ip4_input+0x10e>
 8118a40:	e000      	b.n	8118a44 <ip4_input+0x100>
            continue;
 8118a42:	bf00      	nop
        NETIF_FOREACH(netif) {
 8118a44:	693b      	ldr	r3, [r7, #16]
 8118a46:	681b      	ldr	r3, [r3, #0]
 8118a48:	613b      	str	r3, [r7, #16]
 8118a4a:	693b      	ldr	r3, [r7, #16]
 8118a4c:	2b00      	cmp	r3, #0
 8118a4e:	d1ed      	bne.n	8118a2c <ip4_input+0xe8>
 8118a50:	e000      	b.n	8118a54 <ip4_input+0x110>
            break;
 8118a52:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8118a54:	4b4b      	ldr	r3, [pc, #300]	@ (8118b84 <ip4_input+0x240>)
 8118a56:	691b      	ldr	r3, [r3, #16]
 8118a58:	6839      	ldr	r1, [r7, #0]
 8118a5a:	4618      	mov	r0, r3
 8118a5c:	f000 f96e 	bl	8118d3c <ip4_addr_isbroadcast_u32>
 8118a60:	4603      	mov	r3, r0
 8118a62:	2b00      	cmp	r3, #0
 8118a64:	d105      	bne.n	8118a72 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8118a66:	4b47      	ldr	r3, [pc, #284]	@ (8118b84 <ip4_input+0x240>)
 8118a68:	691b      	ldr	r3, [r3, #16]
 8118a6a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8118a6e:	2be0      	cmp	r3, #224	@ 0xe0
 8118a70:	d104      	bne.n	8118a7c <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8118a72:	6878      	ldr	r0, [r7, #4]
 8118a74:	f002 fd32 	bl	811b4dc <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8118a78:	2300      	movs	r3, #0
 8118a7a:	e07e      	b.n	8118b7a <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8118a7c:	693b      	ldr	r3, [r7, #16]
 8118a7e:	2b00      	cmp	r3, #0
 8118a80:	d104      	bne.n	8118a8c <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8118a82:	6878      	ldr	r0, [r7, #4]
 8118a84:	f002 fd2a 	bl	811b4dc <pbuf_free>
    return ERR_OK;
 8118a88:	2300      	movs	r3, #0
 8118a8a:	e076      	b.n	8118b7a <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8118a8c:	697b      	ldr	r3, [r7, #20]
 8118a8e:	88db      	ldrh	r3, [r3, #6]
 8118a90:	b29b      	uxth	r3, r3
 8118a92:	461a      	mov	r2, r3
 8118a94:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 8118a98:	4013      	ands	r3, r2
 8118a9a:	2b00      	cmp	r3, #0
 8118a9c:	d00b      	beq.n	8118ab6 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8118a9e:	6878      	ldr	r0, [r7, #4]
 8118aa0:	f000 fe4c 	bl	811973c <ip4_reass>
 8118aa4:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8118aa6:	687b      	ldr	r3, [r7, #4]
 8118aa8:	2b00      	cmp	r3, #0
 8118aaa:	d101      	bne.n	8118ab0 <ip4_input+0x16c>
      return ERR_OK;
 8118aac:	2300      	movs	r3, #0
 8118aae:	e064      	b.n	8118b7a <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8118ab0:	687b      	ldr	r3, [r7, #4]
 8118ab2:	685b      	ldr	r3, [r3, #4]
 8118ab4:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8118ab6:	4a33      	ldr	r2, [pc, #204]	@ (8118b84 <ip4_input+0x240>)
 8118ab8:	693b      	ldr	r3, [r7, #16]
 8118aba:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8118abc:	4a31      	ldr	r2, [pc, #196]	@ (8118b84 <ip4_input+0x240>)
 8118abe:	683b      	ldr	r3, [r7, #0]
 8118ac0:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8118ac2:	4a30      	ldr	r2, [pc, #192]	@ (8118b84 <ip4_input+0x240>)
 8118ac4:	697b      	ldr	r3, [r7, #20]
 8118ac6:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8118ac8:	697b      	ldr	r3, [r7, #20]
 8118aca:	781b      	ldrb	r3, [r3, #0]
 8118acc:	f003 030f 	and.w	r3, r3, #15
 8118ad0:	b2db      	uxtb	r3, r3
 8118ad2:	009b      	lsls	r3, r3, #2
 8118ad4:	b2db      	uxtb	r3, r3
 8118ad6:	461a      	mov	r2, r3
 8118ad8:	4b2a      	ldr	r3, [pc, #168]	@ (8118b84 <ip4_input+0x240>)
 8118ada:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8118adc:	89fb      	ldrh	r3, [r7, #14]
 8118ade:	4619      	mov	r1, r3
 8118ae0:	6878      	ldr	r0, [r7, #4]
 8118ae2:	f002 fc75 	bl	811b3d0 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8118ae6:	697b      	ldr	r3, [r7, #20]
 8118ae8:	7a5b      	ldrb	r3, [r3, #9]
 8118aea:	2b11      	cmp	r3, #17
 8118aec:	d006      	beq.n	8118afc <ip4_input+0x1b8>
 8118aee:	2b11      	cmp	r3, #17
 8118af0:	dc13      	bgt.n	8118b1a <ip4_input+0x1d6>
 8118af2:	2b01      	cmp	r3, #1
 8118af4:	d00c      	beq.n	8118b10 <ip4_input+0x1cc>
 8118af6:	2b06      	cmp	r3, #6
 8118af8:	d005      	beq.n	8118b06 <ip4_input+0x1c2>
 8118afa:	e00e      	b.n	8118b1a <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8118afc:	6839      	ldr	r1, [r7, #0]
 8118afe:	6878      	ldr	r0, [r7, #4]
 8118b00:	f009 fc24 	bl	812234c <udp_input>
        break;
 8118b04:	e026      	b.n	8118b54 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8118b06:	6839      	ldr	r1, [r7, #0]
 8118b08:	6878      	ldr	r0, [r7, #4]
 8118b0a:	f004 fe85 	bl	811d818 <tcp_input>
        break;
 8118b0e:	e021      	b.n	8118b54 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8118b10:	6839      	ldr	r1, [r7, #0]
 8118b12:	6878      	ldr	r0, [r7, #4]
 8118b14:	f7ff fbf4 	bl	8118300 <icmp_input>
        break;
 8118b18:	e01c      	b.n	8118b54 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8118b1a:	4b1a      	ldr	r3, [pc, #104]	@ (8118b84 <ip4_input+0x240>)
 8118b1c:	695b      	ldr	r3, [r3, #20]
 8118b1e:	6939      	ldr	r1, [r7, #16]
 8118b20:	4618      	mov	r0, r3
 8118b22:	f000 f90b 	bl	8118d3c <ip4_addr_isbroadcast_u32>
 8118b26:	4603      	mov	r3, r0
 8118b28:	2b00      	cmp	r3, #0
 8118b2a:	d10f      	bne.n	8118b4c <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8118b2c:	4b15      	ldr	r3, [pc, #84]	@ (8118b84 <ip4_input+0x240>)
 8118b2e:	695b      	ldr	r3, [r3, #20]
 8118b30:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8118b34:	2be0      	cmp	r3, #224	@ 0xe0
 8118b36:	d009      	beq.n	8118b4c <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8118b38:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8118b3c:	4619      	mov	r1, r3
 8118b3e:	6878      	ldr	r0, [r7, #4]
 8118b40:	f002 fcb9 	bl	811b4b6 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8118b44:	2102      	movs	r1, #2
 8118b46:	6878      	ldr	r0, [r7, #4]
 8118b48:	f7ff fcfa 	bl	8118540 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8118b4c:	6878      	ldr	r0, [r7, #4]
 8118b4e:	f002 fcc5 	bl	811b4dc <pbuf_free>
        break;
 8118b52:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8118b54:	4b0b      	ldr	r3, [pc, #44]	@ (8118b84 <ip4_input+0x240>)
 8118b56:	2200      	movs	r2, #0
 8118b58:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8118b5a:	4b0a      	ldr	r3, [pc, #40]	@ (8118b84 <ip4_input+0x240>)
 8118b5c:	2200      	movs	r2, #0
 8118b5e:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8118b60:	4b08      	ldr	r3, [pc, #32]	@ (8118b84 <ip4_input+0x240>)
 8118b62:	2200      	movs	r2, #0
 8118b64:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8118b66:	4b07      	ldr	r3, [pc, #28]	@ (8118b84 <ip4_input+0x240>)
 8118b68:	2200      	movs	r2, #0
 8118b6a:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8118b6c:	4b05      	ldr	r3, [pc, #20]	@ (8118b84 <ip4_input+0x240>)
 8118b6e:	2200      	movs	r2, #0
 8118b70:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8118b72:	4b04      	ldr	r3, [pc, #16]	@ (8118b84 <ip4_input+0x240>)
 8118b74:	2200      	movs	r2, #0
 8118b76:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8118b78:	2300      	movs	r3, #0
}
 8118b7a:	4618      	mov	r0, r3
 8118b7c:	3718      	adds	r7, #24
 8118b7e:	46bd      	mov	sp, r7
 8118b80:	bd80      	pop	{r7, pc}
 8118b82:	bf00      	nop
 8118b84:	1000b300 	.word	0x1000b300
 8118b88:	1000e488 	.word	0x1000e488

08118b8c <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8118b8c:	b580      	push	{r7, lr}
 8118b8e:	b08a      	sub	sp, #40	@ 0x28
 8118b90:	af04      	add	r7, sp, #16
 8118b92:	60f8      	str	r0, [r7, #12]
 8118b94:	60b9      	str	r1, [r7, #8]
 8118b96:	607a      	str	r2, [r7, #4]
 8118b98:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8118b9a:	68bb      	ldr	r3, [r7, #8]
 8118b9c:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8118b9e:	687b      	ldr	r3, [r7, #4]
 8118ba0:	2b00      	cmp	r3, #0
 8118ba2:	d009      	beq.n	8118bb8 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8118ba4:	68bb      	ldr	r3, [r7, #8]
 8118ba6:	2b00      	cmp	r3, #0
 8118ba8:	d003      	beq.n	8118bb2 <ip4_output_if+0x26>
 8118baa:	68bb      	ldr	r3, [r7, #8]
 8118bac:	681b      	ldr	r3, [r3, #0]
 8118bae:	2b00      	cmp	r3, #0
 8118bb0:	d102      	bne.n	8118bb8 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8118bb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8118bb4:	3304      	adds	r3, #4
 8118bb6:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8118bb8:	78fa      	ldrb	r2, [r7, #3]
 8118bba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8118bbc:	9302      	str	r3, [sp, #8]
 8118bbe:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8118bc2:	9301      	str	r3, [sp, #4]
 8118bc4:	f897 3020 	ldrb.w	r3, [r7, #32]
 8118bc8:	9300      	str	r3, [sp, #0]
 8118bca:	4613      	mov	r3, r2
 8118bcc:	687a      	ldr	r2, [r7, #4]
 8118bce:	6979      	ldr	r1, [r7, #20]
 8118bd0:	68f8      	ldr	r0, [r7, #12]
 8118bd2:	f000 f805 	bl	8118be0 <ip4_output_if_src>
 8118bd6:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8118bd8:	4618      	mov	r0, r3
 8118bda:	3718      	adds	r7, #24
 8118bdc:	46bd      	mov	sp, r7
 8118bde:	bd80      	pop	{r7, pc}

08118be0 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8118be0:	b580      	push	{r7, lr}
 8118be2:	b088      	sub	sp, #32
 8118be4:	af00      	add	r7, sp, #0
 8118be6:	60f8      	str	r0, [r7, #12]
 8118be8:	60b9      	str	r1, [r7, #8]
 8118bea:	607a      	str	r2, [r7, #4]
 8118bec:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8118bee:	68fb      	ldr	r3, [r7, #12]
 8118bf0:	7b9b      	ldrb	r3, [r3, #14]
 8118bf2:	2b01      	cmp	r3, #1
 8118bf4:	d006      	beq.n	8118c04 <ip4_output_if_src+0x24>
 8118bf6:	4b4b      	ldr	r3, [pc, #300]	@ (8118d24 <ip4_output_if_src+0x144>)
 8118bf8:	f44f 7255 	mov.w	r2, #852	@ 0x354
 8118bfc:	494a      	ldr	r1, [pc, #296]	@ (8118d28 <ip4_output_if_src+0x148>)
 8118bfe:	484b      	ldr	r0, [pc, #300]	@ (8118d2c <ip4_output_if_src+0x14c>)
 8118c00:	f00b f80c 	bl	8123c1c <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8118c04:	687b      	ldr	r3, [r7, #4]
 8118c06:	2b00      	cmp	r3, #0
 8118c08:	d060      	beq.n	8118ccc <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8118c0a:	2314      	movs	r3, #20
 8118c0c:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8118c0e:	2114      	movs	r1, #20
 8118c10:	68f8      	ldr	r0, [r7, #12]
 8118c12:	f002 fbcd 	bl	811b3b0 <pbuf_add_header>
 8118c16:	4603      	mov	r3, r0
 8118c18:	2b00      	cmp	r3, #0
 8118c1a:	d002      	beq.n	8118c22 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8118c1c:	f06f 0301 	mvn.w	r3, #1
 8118c20:	e07c      	b.n	8118d1c <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8118c22:	68fb      	ldr	r3, [r7, #12]
 8118c24:	685b      	ldr	r3, [r3, #4]
 8118c26:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8118c28:	68fb      	ldr	r3, [r7, #12]
 8118c2a:	895b      	ldrh	r3, [r3, #10]
 8118c2c:	2b13      	cmp	r3, #19
 8118c2e:	d806      	bhi.n	8118c3e <ip4_output_if_src+0x5e>
 8118c30:	4b3c      	ldr	r3, [pc, #240]	@ (8118d24 <ip4_output_if_src+0x144>)
 8118c32:	f44f 7262 	mov.w	r2, #904	@ 0x388
 8118c36:	493e      	ldr	r1, [pc, #248]	@ (8118d30 <ip4_output_if_src+0x150>)
 8118c38:	483c      	ldr	r0, [pc, #240]	@ (8118d2c <ip4_output_if_src+0x14c>)
 8118c3a:	f00a ffef 	bl	8123c1c <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8118c3e:	69fb      	ldr	r3, [r7, #28]
 8118c40:	78fa      	ldrb	r2, [r7, #3]
 8118c42:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8118c44:	69fb      	ldr	r3, [r7, #28]
 8118c46:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8118c4a:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8118c4c:	687b      	ldr	r3, [r7, #4]
 8118c4e:	681a      	ldr	r2, [r3, #0]
 8118c50:	69fb      	ldr	r3, [r7, #28]
 8118c52:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8118c54:	8b7b      	ldrh	r3, [r7, #26]
 8118c56:	089b      	lsrs	r3, r3, #2
 8118c58:	b29b      	uxth	r3, r3
 8118c5a:	b2db      	uxtb	r3, r3
 8118c5c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8118c60:	b2da      	uxtb	r2, r3
 8118c62:	69fb      	ldr	r3, [r7, #28]
 8118c64:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8118c66:	69fb      	ldr	r3, [r7, #28]
 8118c68:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8118c6c:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8118c6e:	68fb      	ldr	r3, [r7, #12]
 8118c70:	891b      	ldrh	r3, [r3, #8]
 8118c72:	4618      	mov	r0, r3
 8118c74:	f7fe fa2a 	bl	81170cc <lwip_htons>
 8118c78:	4603      	mov	r3, r0
 8118c7a:	461a      	mov	r2, r3
 8118c7c:	69fb      	ldr	r3, [r7, #28]
 8118c7e:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8118c80:	69fb      	ldr	r3, [r7, #28]
 8118c82:	2200      	movs	r2, #0
 8118c84:	719a      	strb	r2, [r3, #6]
 8118c86:	2200      	movs	r2, #0
 8118c88:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8118c8a:	4b2a      	ldr	r3, [pc, #168]	@ (8118d34 <ip4_output_if_src+0x154>)
 8118c8c:	881b      	ldrh	r3, [r3, #0]
 8118c8e:	4618      	mov	r0, r3
 8118c90:	f7fe fa1c 	bl	81170cc <lwip_htons>
 8118c94:	4603      	mov	r3, r0
 8118c96:	461a      	mov	r2, r3
 8118c98:	69fb      	ldr	r3, [r7, #28]
 8118c9a:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8118c9c:	4b25      	ldr	r3, [pc, #148]	@ (8118d34 <ip4_output_if_src+0x154>)
 8118c9e:	881b      	ldrh	r3, [r3, #0]
 8118ca0:	3301      	adds	r3, #1
 8118ca2:	b29a      	uxth	r2, r3
 8118ca4:	4b23      	ldr	r3, [pc, #140]	@ (8118d34 <ip4_output_if_src+0x154>)
 8118ca6:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8118ca8:	68bb      	ldr	r3, [r7, #8]
 8118caa:	2b00      	cmp	r3, #0
 8118cac:	d104      	bne.n	8118cb8 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8118cae:	4b22      	ldr	r3, [pc, #136]	@ (8118d38 <ip4_output_if_src+0x158>)
 8118cb0:	681a      	ldr	r2, [r3, #0]
 8118cb2:	69fb      	ldr	r3, [r7, #28]
 8118cb4:	60da      	str	r2, [r3, #12]
 8118cb6:	e003      	b.n	8118cc0 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8118cb8:	68bb      	ldr	r3, [r7, #8]
 8118cba:	681a      	ldr	r2, [r3, #0]
 8118cbc:	69fb      	ldr	r3, [r7, #28]
 8118cbe:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8118cc0:	69fb      	ldr	r3, [r7, #28]
 8118cc2:	2200      	movs	r2, #0
 8118cc4:	729a      	strb	r2, [r3, #10]
 8118cc6:	2200      	movs	r2, #0
 8118cc8:	72da      	strb	r2, [r3, #11]
 8118cca:	e00f      	b.n	8118cec <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8118ccc:	68fb      	ldr	r3, [r7, #12]
 8118cce:	895b      	ldrh	r3, [r3, #10]
 8118cd0:	2b13      	cmp	r3, #19
 8118cd2:	d802      	bhi.n	8118cda <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8118cd4:	f06f 0301 	mvn.w	r3, #1
 8118cd8:	e020      	b.n	8118d1c <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8118cda:	68fb      	ldr	r3, [r7, #12]
 8118cdc:	685b      	ldr	r3, [r3, #4]
 8118cde:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8118ce0:	69fb      	ldr	r3, [r7, #28]
 8118ce2:	691b      	ldr	r3, [r3, #16]
 8118ce4:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8118ce6:	f107 0314 	add.w	r3, r7, #20
 8118cea:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8118cec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8118cee:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8118cf0:	2b00      	cmp	r3, #0
 8118cf2:	d00c      	beq.n	8118d0e <ip4_output_if_src+0x12e>
 8118cf4:	68fb      	ldr	r3, [r7, #12]
 8118cf6:	891a      	ldrh	r2, [r3, #8]
 8118cf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8118cfa:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8118cfc:	429a      	cmp	r2, r3
 8118cfe:	d906      	bls.n	8118d0e <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8118d00:	687a      	ldr	r2, [r7, #4]
 8118d02:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8118d04:	68f8      	ldr	r0, [r7, #12]
 8118d06:	f000 ff0d 	bl	8119b24 <ip4_frag>
 8118d0a:	4603      	mov	r3, r0
 8118d0c:	e006      	b.n	8118d1c <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8118d0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8118d10:	695b      	ldr	r3, [r3, #20]
 8118d12:	687a      	ldr	r2, [r7, #4]
 8118d14:	68f9      	ldr	r1, [r7, #12]
 8118d16:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8118d18:	4798      	blx	r3
 8118d1a:	4603      	mov	r3, r0
}
 8118d1c:	4618      	mov	r0, r3
 8118d1e:	3720      	adds	r7, #32
 8118d20:	46bd      	mov	sp, r7
 8118d22:	bd80      	pop	{r7, pc}
 8118d24:	08125904 	.word	0x08125904
 8118d28:	08125978 	.word	0x08125978
 8118d2c:	08125984 	.word	0x08125984
 8118d30:	081259ac 	.word	0x081259ac
 8118d34:	1000b318 	.word	0x1000b318
 8118d38:	08128434 	.word	0x08128434

08118d3c <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8118d3c:	b480      	push	{r7}
 8118d3e:	b085      	sub	sp, #20
 8118d40:	af00      	add	r7, sp, #0
 8118d42:	6078      	str	r0, [r7, #4]
 8118d44:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8118d46:	687b      	ldr	r3, [r7, #4]
 8118d48:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8118d4a:	687b      	ldr	r3, [r7, #4]
 8118d4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8118d50:	d002      	beq.n	8118d58 <ip4_addr_isbroadcast_u32+0x1c>
 8118d52:	687b      	ldr	r3, [r7, #4]
 8118d54:	2b00      	cmp	r3, #0
 8118d56:	d101      	bne.n	8118d5c <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8118d58:	2301      	movs	r3, #1
 8118d5a:	e02a      	b.n	8118db2 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8118d5c:	683b      	ldr	r3, [r7, #0]
 8118d5e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8118d62:	f003 0302 	and.w	r3, r3, #2
 8118d66:	2b00      	cmp	r3, #0
 8118d68:	d101      	bne.n	8118d6e <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8118d6a:	2300      	movs	r3, #0
 8118d6c:	e021      	b.n	8118db2 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8118d6e:	683b      	ldr	r3, [r7, #0]
 8118d70:	3304      	adds	r3, #4
 8118d72:	681b      	ldr	r3, [r3, #0]
 8118d74:	687a      	ldr	r2, [r7, #4]
 8118d76:	429a      	cmp	r2, r3
 8118d78:	d101      	bne.n	8118d7e <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8118d7a:	2300      	movs	r3, #0
 8118d7c:	e019      	b.n	8118db2 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8118d7e:	68fa      	ldr	r2, [r7, #12]
 8118d80:	683b      	ldr	r3, [r7, #0]
 8118d82:	3304      	adds	r3, #4
 8118d84:	681b      	ldr	r3, [r3, #0]
 8118d86:	405a      	eors	r2, r3
 8118d88:	683b      	ldr	r3, [r7, #0]
 8118d8a:	3308      	adds	r3, #8
 8118d8c:	681b      	ldr	r3, [r3, #0]
 8118d8e:	4013      	ands	r3, r2
 8118d90:	2b00      	cmp	r3, #0
 8118d92:	d10d      	bne.n	8118db0 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8118d94:	683b      	ldr	r3, [r7, #0]
 8118d96:	3308      	adds	r3, #8
 8118d98:	681b      	ldr	r3, [r3, #0]
 8118d9a:	43da      	mvns	r2, r3
 8118d9c:	687b      	ldr	r3, [r7, #4]
 8118d9e:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8118da0:	683b      	ldr	r3, [r7, #0]
 8118da2:	3308      	adds	r3, #8
 8118da4:	681b      	ldr	r3, [r3, #0]
 8118da6:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8118da8:	429a      	cmp	r2, r3
 8118daa:	d101      	bne.n	8118db0 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8118dac:	2301      	movs	r3, #1
 8118dae:	e000      	b.n	8118db2 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8118db0:	2300      	movs	r3, #0
  }
}
 8118db2:	4618      	mov	r0, r3
 8118db4:	3714      	adds	r7, #20
 8118db6:	46bd      	mov	sp, r7
 8118db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8118dbc:	4770      	bx	lr
	...

08118dc0 <ip4addr_aton>:
 * @param addr pointer to which to save the ip address in network order
 * @return 1 if cp could be converted to addr, 0 on failure
 */
int
ip4addr_aton(const char *cp, ip4_addr_t *addr)
{
 8118dc0:	b580      	push	{r7, lr}
 8118dc2:	b08a      	sub	sp, #40	@ 0x28
 8118dc4:	af00      	add	r7, sp, #0
 8118dc6:	6078      	str	r0, [r7, #4]
 8118dc8:	6039      	str	r1, [r7, #0]
  u32_t val;
  u8_t base;
  char c;
  u32_t parts[4];
  u32_t *pp = parts;
 8118dca:	f107 030c 	add.w	r3, r7, #12
 8118dce:	61fb      	str	r3, [r7, #28]

  c = *cp;
 8118dd0:	687b      	ldr	r3, [r7, #4]
 8118dd2:	781b      	ldrb	r3, [r3, #0]
 8118dd4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    /*
     * Collect number up to ``.''.
     * Values are specified as for C:
     * 0x=hex, 0=octal, 1-9=decimal.
     */
    if (!lwip_isdigit(c)) {
 8118dd8:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8118ddc:	3301      	adds	r3, #1
 8118dde:	4a89      	ldr	r2, [pc, #548]	@ (8119004 <ip4addr_aton+0x244>)
 8118de0:	4413      	add	r3, r2
 8118de2:	781b      	ldrb	r3, [r3, #0]
 8118de4:	f003 0304 	and.w	r3, r3, #4
 8118de8:	2b00      	cmp	r3, #0
 8118dea:	d101      	bne.n	8118df0 <ip4addr_aton+0x30>
      return 0;
 8118dec:	2300      	movs	r3, #0
 8118dee:	e105      	b.n	8118ffc <ip4addr_aton+0x23c>
    }
    val = 0;
 8118df0:	2300      	movs	r3, #0
 8118df2:	627b      	str	r3, [r7, #36]	@ 0x24
    base = 10;
 8118df4:	230a      	movs	r3, #10
 8118df6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    if (c == '0') {
 8118dfa:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8118dfe:	2b30      	cmp	r3, #48	@ 0x30
 8118e00:	d11c      	bne.n	8118e3c <ip4addr_aton+0x7c>
      c = *++cp;
 8118e02:	687b      	ldr	r3, [r7, #4]
 8118e04:	3301      	adds	r3, #1
 8118e06:	607b      	str	r3, [r7, #4]
 8118e08:	687b      	ldr	r3, [r7, #4]
 8118e0a:	781b      	ldrb	r3, [r3, #0]
 8118e0c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
      if (c == 'x' || c == 'X') {
 8118e10:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8118e14:	2b78      	cmp	r3, #120	@ 0x78
 8118e16:	d003      	beq.n	8118e20 <ip4addr_aton+0x60>
 8118e18:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8118e1c:	2b58      	cmp	r3, #88	@ 0x58
 8118e1e:	d10a      	bne.n	8118e36 <ip4addr_aton+0x76>
        base = 16;
 8118e20:	2310      	movs	r3, #16
 8118e22:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        c = *++cp;
 8118e26:	687b      	ldr	r3, [r7, #4]
 8118e28:	3301      	adds	r3, #1
 8118e2a:	607b      	str	r3, [r7, #4]
 8118e2c:	687b      	ldr	r3, [r7, #4]
 8118e2e:	781b      	ldrb	r3, [r3, #0]
 8118e30:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8118e34:	e002      	b.n	8118e3c <ip4addr_aton+0x7c>
      } else {
        base = 8;
 8118e36:	2308      	movs	r3, #8
 8118e38:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
      }
    }
    for (;;) {
      if (lwip_isdigit(c)) {
 8118e3c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8118e40:	3301      	adds	r3, #1
 8118e42:	4a70      	ldr	r2, [pc, #448]	@ (8119004 <ip4addr_aton+0x244>)
 8118e44:	4413      	add	r3, r2
 8118e46:	781b      	ldrb	r3, [r3, #0]
 8118e48:	f003 0304 	and.w	r3, r3, #4
 8118e4c:	2b00      	cmp	r3, #0
 8118e4e:	d011      	beq.n	8118e74 <ip4addr_aton+0xb4>
        val = (val * base) + (u32_t)(c - '0');
 8118e50:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8118e54:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8118e56:	fb03 f202 	mul.w	r2, r3, r2
 8118e5a:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8118e5e:	4413      	add	r3, r2
 8118e60:	3b30      	subs	r3, #48	@ 0x30
 8118e62:	627b      	str	r3, [r7, #36]	@ 0x24
        c = *++cp;
 8118e64:	687b      	ldr	r3, [r7, #4]
 8118e66:	3301      	adds	r3, #1
 8118e68:	607b      	str	r3, [r7, #4]
 8118e6a:	687b      	ldr	r3, [r7, #4]
 8118e6c:	781b      	ldrb	r3, [r3, #0]
 8118e6e:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8118e72:	e7e3      	b.n	8118e3c <ip4addr_aton+0x7c>
      } else if (base == 16 && lwip_isxdigit(c)) {
 8118e74:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8118e78:	2b10      	cmp	r3, #16
 8118e7a:	d127      	bne.n	8118ecc <ip4addr_aton+0x10c>
 8118e7c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8118e80:	3301      	adds	r3, #1
 8118e82:	4a60      	ldr	r2, [pc, #384]	@ (8119004 <ip4addr_aton+0x244>)
 8118e84:	4413      	add	r3, r2
 8118e86:	781b      	ldrb	r3, [r3, #0]
 8118e88:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 8118e8c:	2b00      	cmp	r3, #0
 8118e8e:	d01d      	beq.n	8118ecc <ip4addr_aton+0x10c>
        val = (val << 4) | (u32_t)(c + 10 - (lwip_islower(c) ? 'a' : 'A'));
 8118e90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8118e92:	011b      	lsls	r3, r3, #4
 8118e94:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8118e98:	f102 010a 	add.w	r1, r2, #10
 8118e9c:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8118ea0:	3201      	adds	r2, #1
 8118ea2:	4858      	ldr	r0, [pc, #352]	@ (8119004 <ip4addr_aton+0x244>)
 8118ea4:	4402      	add	r2, r0
 8118ea6:	7812      	ldrb	r2, [r2, #0]
 8118ea8:	f002 0203 	and.w	r2, r2, #3
 8118eac:	2a02      	cmp	r2, #2
 8118eae:	d101      	bne.n	8118eb4 <ip4addr_aton+0xf4>
 8118eb0:	2261      	movs	r2, #97	@ 0x61
 8118eb2:	e000      	b.n	8118eb6 <ip4addr_aton+0xf6>
 8118eb4:	2241      	movs	r2, #65	@ 0x41
 8118eb6:	1a8a      	subs	r2, r1, r2
 8118eb8:	4313      	orrs	r3, r2
 8118eba:	627b      	str	r3, [r7, #36]	@ 0x24
        c = *++cp;
 8118ebc:	687b      	ldr	r3, [r7, #4]
 8118ebe:	3301      	adds	r3, #1
 8118ec0:	607b      	str	r3, [r7, #4]
 8118ec2:	687b      	ldr	r3, [r7, #4]
 8118ec4:	781b      	ldrb	r3, [r3, #0]
 8118ec6:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
      if (lwip_isdigit(c)) {
 8118eca:	e7b7      	b.n	8118e3c <ip4addr_aton+0x7c>
      } else {
        break;
      }
    }
    if (c == '.') {
 8118ecc:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8118ed0:	2b2e      	cmp	r3, #46	@ 0x2e
 8118ed2:	d114      	bne.n	8118efe <ip4addr_aton+0x13e>
       * Internet format:
       *  a.b.c.d
       *  a.b.c   (with c treated as 16 bits)
       *  a.b (with b treated as 24 bits)
       */
      if (pp >= parts + 3) {
 8118ed4:	f107 030c 	add.w	r3, r7, #12
 8118ed8:	330c      	adds	r3, #12
 8118eda:	69fa      	ldr	r2, [r7, #28]
 8118edc:	429a      	cmp	r2, r3
 8118ede:	d301      	bcc.n	8118ee4 <ip4addr_aton+0x124>
        return 0;
 8118ee0:	2300      	movs	r3, #0
 8118ee2:	e08b      	b.n	8118ffc <ip4addr_aton+0x23c>
      }
      *pp++ = val;
 8118ee4:	69fb      	ldr	r3, [r7, #28]
 8118ee6:	1d1a      	adds	r2, r3, #4
 8118ee8:	61fa      	str	r2, [r7, #28]
 8118eea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8118eec:	601a      	str	r2, [r3, #0]
      c = *++cp;
 8118eee:	687b      	ldr	r3, [r7, #4]
 8118ef0:	3301      	adds	r3, #1
 8118ef2:	607b      	str	r3, [r7, #4]
 8118ef4:	687b      	ldr	r3, [r7, #4]
 8118ef6:	781b      	ldrb	r3, [r3, #0]
 8118ef8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    if (!lwip_isdigit(c)) {
 8118efc:	e76c      	b.n	8118dd8 <ip4addr_aton+0x18>
    } else {
      break;
 8118efe:	bf00      	nop
    }
  }
  /*
   * Check for trailing characters.
   */
  if (c != '\0' && !lwip_isspace(c)) {
 8118f00:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8118f04:	2b00      	cmp	r3, #0
 8118f06:	d00b      	beq.n	8118f20 <ip4addr_aton+0x160>
 8118f08:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8118f0c:	3301      	adds	r3, #1
 8118f0e:	4a3d      	ldr	r2, [pc, #244]	@ (8119004 <ip4addr_aton+0x244>)
 8118f10:	4413      	add	r3, r2
 8118f12:	781b      	ldrb	r3, [r3, #0]
 8118f14:	f003 0308 	and.w	r3, r3, #8
 8118f18:	2b00      	cmp	r3, #0
 8118f1a:	d101      	bne.n	8118f20 <ip4addr_aton+0x160>
    return 0;
 8118f1c:	2300      	movs	r3, #0
 8118f1e:	e06d      	b.n	8118ffc <ip4addr_aton+0x23c>
  }
  /*
   * Concoct the address according to
   * the number of parts specified.
   */
  switch (pp - parts + 1) {
 8118f20:	f107 030c 	add.w	r3, r7, #12
 8118f24:	69fa      	ldr	r2, [r7, #28]
 8118f26:	1ad3      	subs	r3, r2, r3
 8118f28:	109b      	asrs	r3, r3, #2
 8118f2a:	3301      	adds	r3, #1
 8118f2c:	2b04      	cmp	r3, #4
 8118f2e:	d853      	bhi.n	8118fd8 <ip4addr_aton+0x218>
 8118f30:	a201      	add	r2, pc, #4	@ (adr r2, 8118f38 <ip4addr_aton+0x178>)
 8118f32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8118f36:	bf00      	nop
 8118f38:	08118f4d 	.word	0x08118f4d
 8118f3c:	08118fe7 	.word	0x08118fe7
 8118f40:	08118f51 	.word	0x08118f51
 8118f44:	08118f73 	.word	0x08118f73
 8118f48:	08118fa1 	.word	0x08118fa1

    case 0:
      return 0;       /* initial nondigit */
 8118f4c:	2300      	movs	r3, #0
 8118f4e:	e055      	b.n	8118ffc <ip4addr_aton+0x23c>

    case 1:             /* a -- 32 bits */
      break;

    case 2:             /* a.b -- 8.24 bits */
      if (val > 0xffffffUL) {
 8118f50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8118f52:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8118f56:	d301      	bcc.n	8118f5c <ip4addr_aton+0x19c>
        return 0;
 8118f58:	2300      	movs	r3, #0
 8118f5a:	e04f      	b.n	8118ffc <ip4addr_aton+0x23c>
      }
      if (parts[0] > 0xff) {
 8118f5c:	68fb      	ldr	r3, [r7, #12]
 8118f5e:	2bff      	cmp	r3, #255	@ 0xff
 8118f60:	d901      	bls.n	8118f66 <ip4addr_aton+0x1a6>
        return 0;
 8118f62:	2300      	movs	r3, #0
 8118f64:	e04a      	b.n	8118ffc <ip4addr_aton+0x23c>
      }
      val |= parts[0] << 24;
 8118f66:	68fb      	ldr	r3, [r7, #12]
 8118f68:	061b      	lsls	r3, r3, #24
 8118f6a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8118f6c:	4313      	orrs	r3, r2
 8118f6e:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8118f70:	e03a      	b.n	8118fe8 <ip4addr_aton+0x228>

    case 3:             /* a.b.c -- 8.8.16 bits */
      if (val > 0xffff) {
 8118f72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8118f74:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8118f78:	d301      	bcc.n	8118f7e <ip4addr_aton+0x1be>
        return 0;
 8118f7a:	2300      	movs	r3, #0
 8118f7c:	e03e      	b.n	8118ffc <ip4addr_aton+0x23c>
      }
      if ((parts[0] > 0xff) || (parts[1] > 0xff)) {
 8118f7e:	68fb      	ldr	r3, [r7, #12]
 8118f80:	2bff      	cmp	r3, #255	@ 0xff
 8118f82:	d802      	bhi.n	8118f8a <ip4addr_aton+0x1ca>
 8118f84:	693b      	ldr	r3, [r7, #16]
 8118f86:	2bff      	cmp	r3, #255	@ 0xff
 8118f88:	d901      	bls.n	8118f8e <ip4addr_aton+0x1ce>
        return 0;
 8118f8a:	2300      	movs	r3, #0
 8118f8c:	e036      	b.n	8118ffc <ip4addr_aton+0x23c>
      }
      val |= (parts[0] << 24) | (parts[1] << 16);
 8118f8e:	68fb      	ldr	r3, [r7, #12]
 8118f90:	061a      	lsls	r2, r3, #24
 8118f92:	693b      	ldr	r3, [r7, #16]
 8118f94:	041b      	lsls	r3, r3, #16
 8118f96:	4313      	orrs	r3, r2
 8118f98:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8118f9a:	4313      	orrs	r3, r2
 8118f9c:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8118f9e:	e023      	b.n	8118fe8 <ip4addr_aton+0x228>

    case 4:             /* a.b.c.d -- 8.8.8.8 bits */
      if (val > 0xff) {
 8118fa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8118fa2:	2bff      	cmp	r3, #255	@ 0xff
 8118fa4:	d901      	bls.n	8118faa <ip4addr_aton+0x1ea>
        return 0;
 8118fa6:	2300      	movs	r3, #0
 8118fa8:	e028      	b.n	8118ffc <ip4addr_aton+0x23c>
      }
      if ((parts[0] > 0xff) || (parts[1] > 0xff) || (parts[2] > 0xff)) {
 8118faa:	68fb      	ldr	r3, [r7, #12]
 8118fac:	2bff      	cmp	r3, #255	@ 0xff
 8118fae:	d805      	bhi.n	8118fbc <ip4addr_aton+0x1fc>
 8118fb0:	693b      	ldr	r3, [r7, #16]
 8118fb2:	2bff      	cmp	r3, #255	@ 0xff
 8118fb4:	d802      	bhi.n	8118fbc <ip4addr_aton+0x1fc>
 8118fb6:	697b      	ldr	r3, [r7, #20]
 8118fb8:	2bff      	cmp	r3, #255	@ 0xff
 8118fba:	d901      	bls.n	8118fc0 <ip4addr_aton+0x200>
        return 0;
 8118fbc:	2300      	movs	r3, #0
 8118fbe:	e01d      	b.n	8118ffc <ip4addr_aton+0x23c>
      }
      val |= (parts[0] << 24) | (parts[1] << 16) | (parts[2] << 8);
 8118fc0:	68fb      	ldr	r3, [r7, #12]
 8118fc2:	061a      	lsls	r2, r3, #24
 8118fc4:	693b      	ldr	r3, [r7, #16]
 8118fc6:	041b      	lsls	r3, r3, #16
 8118fc8:	431a      	orrs	r2, r3
 8118fca:	697b      	ldr	r3, [r7, #20]
 8118fcc:	021b      	lsls	r3, r3, #8
 8118fce:	4313      	orrs	r3, r2
 8118fd0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8118fd2:	4313      	orrs	r3, r2
 8118fd4:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8118fd6:	e007      	b.n	8118fe8 <ip4addr_aton+0x228>
    default:
      LWIP_ASSERT("unhandled", 0);
 8118fd8:	4b0b      	ldr	r3, [pc, #44]	@ (8119008 <ip4addr_aton+0x248>)
 8118fda:	22f9      	movs	r2, #249	@ 0xf9
 8118fdc:	490b      	ldr	r1, [pc, #44]	@ (811900c <ip4addr_aton+0x24c>)
 8118fde:	480c      	ldr	r0, [pc, #48]	@ (8119010 <ip4addr_aton+0x250>)
 8118fe0:	f00a fe1c 	bl	8123c1c <iprintf>
      break;
 8118fe4:	e000      	b.n	8118fe8 <ip4addr_aton+0x228>
      break;
 8118fe6:	bf00      	nop
  }
  if (addr) {
 8118fe8:	683b      	ldr	r3, [r7, #0]
 8118fea:	2b00      	cmp	r3, #0
 8118fec:	d005      	beq.n	8118ffa <ip4addr_aton+0x23a>
    ip4_addr_set_u32(addr, lwip_htonl(val));
 8118fee:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8118ff0:	f7fe f881 	bl	81170f6 <lwip_htonl>
 8118ff4:	4602      	mov	r2, r0
 8118ff6:	683b      	ldr	r3, [r7, #0]
 8118ff8:	601a      	str	r2, [r3, #0]
  }
  return 1;
 8118ffa:	2301      	movs	r3, #1
}
 8118ffc:	4618      	mov	r0, r3
 8118ffe:	3728      	adds	r7, #40	@ 0x28
 8119000:	46bd      	mov	sp, r7
 8119002:	bd80      	pop	{r7, pc}
 8119004:	081289cb 	.word	0x081289cb
 8119008:	081259dc 	.word	0x081259dc
 811900c:	08125a54 	.word	0x08125a54
 8119010:	08125a60 	.word	0x08125a60

08119014 <ip4addr_ntoa>:
 * @return pointer to a global static (!) buffer that holds the ASCII
 *         representation of addr
 */
char *
ip4addr_ntoa(const ip4_addr_t *addr)
{
 8119014:	b580      	push	{r7, lr}
 8119016:	b082      	sub	sp, #8
 8119018:	af00      	add	r7, sp, #0
 811901a:	6078      	str	r0, [r7, #4]
  static char str[IP4ADDR_STRLEN_MAX];
  return ip4addr_ntoa_r(addr, str, IP4ADDR_STRLEN_MAX);
 811901c:	2210      	movs	r2, #16
 811901e:	4904      	ldr	r1, [pc, #16]	@ (8119030 <ip4addr_ntoa+0x1c>)
 8119020:	6878      	ldr	r0, [r7, #4]
 8119022:	f000 f807 	bl	8119034 <ip4addr_ntoa_r>
 8119026:	4603      	mov	r3, r0
}
 8119028:	4618      	mov	r0, r3
 811902a:	3708      	adds	r7, #8
 811902c:	46bd      	mov	sp, r7
 811902e:	bd80      	pop	{r7, pc}
 8119030:	1000b31c 	.word	0x1000b31c

08119034 <ip4addr_ntoa_r>:
 * @return either pointer to buf which now holds the ASCII
 *         representation of addr or NULL if buf was too small
 */
char *
ip4addr_ntoa_r(const ip4_addr_t *addr, char *buf, int buflen)
{
 8119034:	b480      	push	{r7}
 8119036:	b08d      	sub	sp, #52	@ 0x34
 8119038:	af00      	add	r7, sp, #0
 811903a:	60f8      	str	r0, [r7, #12]
 811903c:	60b9      	str	r1, [r7, #8]
 811903e:	607a      	str	r2, [r7, #4]
  char *rp;
  u8_t *ap;
  u8_t rem;
  u8_t n;
  u8_t i;
  int len = 0;
 8119040:	2300      	movs	r3, #0
 8119042:	623b      	str	r3, [r7, #32]

  s_addr = ip4_addr_get_u32(addr);
 8119044:	68fb      	ldr	r3, [r7, #12]
 8119046:	681b      	ldr	r3, [r3, #0]
 8119048:	61bb      	str	r3, [r7, #24]

  rp = buf;
 811904a:	68bb      	ldr	r3, [r7, #8]
 811904c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  ap = (u8_t *)&s_addr;
 811904e:	f107 0318 	add.w	r3, r7, #24
 8119052:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (n = 0; n < 4; n++) {
 8119054:	2300      	movs	r3, #0
 8119056:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 811905a:	e058      	b.n	811910e <ip4addr_ntoa_r+0xda>
    i = 0;
 811905c:	2300      	movs	r3, #0
 811905e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    do {
      rem = *ap % (u8_t)10;
 8119062:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8119064:	781a      	ldrb	r2, [r3, #0]
 8119066:	4b32      	ldr	r3, [pc, #200]	@ (8119130 <ip4addr_ntoa_r+0xfc>)
 8119068:	fba3 1302 	umull	r1, r3, r3, r2
 811906c:	08d9      	lsrs	r1, r3, #3
 811906e:	460b      	mov	r3, r1
 8119070:	009b      	lsls	r3, r3, #2
 8119072:	440b      	add	r3, r1
 8119074:	005b      	lsls	r3, r3, #1
 8119076:	1ad3      	subs	r3, r2, r3
 8119078:	77fb      	strb	r3, [r7, #31]
      *ap /= (u8_t)10;
 811907a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 811907c:	781b      	ldrb	r3, [r3, #0]
 811907e:	4a2c      	ldr	r2, [pc, #176]	@ (8119130 <ip4addr_ntoa_r+0xfc>)
 8119080:	fba2 2303 	umull	r2, r3, r2, r3
 8119084:	08db      	lsrs	r3, r3, #3
 8119086:	b2da      	uxtb	r2, r3
 8119088:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 811908a:	701a      	strb	r2, [r3, #0]
      inv[i++] = (char)('0' + rem);
 811908c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8119090:	1c5a      	adds	r2, r3, #1
 8119092:	f887 2026 	strb.w	r2, [r7, #38]	@ 0x26
 8119096:	4619      	mov	r1, r3
 8119098:	7ffb      	ldrb	r3, [r7, #31]
 811909a:	3330      	adds	r3, #48	@ 0x30
 811909c:	b2da      	uxtb	r2, r3
 811909e:	f101 0330 	add.w	r3, r1, #48	@ 0x30
 81190a2:	443b      	add	r3, r7
 81190a4:	f803 2c1c 	strb.w	r2, [r3, #-28]
    } while (*ap);
 81190a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81190aa:	781b      	ldrb	r3, [r3, #0]
 81190ac:	2b00      	cmp	r3, #0
 81190ae:	d1d8      	bne.n	8119062 <ip4addr_ntoa_r+0x2e>
    while (i--) {
 81190b0:	e011      	b.n	81190d6 <ip4addr_ntoa_r+0xa2>
      if (len++ >= buflen) {
 81190b2:	6a3b      	ldr	r3, [r7, #32]
 81190b4:	1c5a      	adds	r2, r3, #1
 81190b6:	623a      	str	r2, [r7, #32]
 81190b8:	687a      	ldr	r2, [r7, #4]
 81190ba:	429a      	cmp	r2, r3
 81190bc:	dc01      	bgt.n	81190c2 <ip4addr_ntoa_r+0x8e>
        return NULL;
 81190be:	2300      	movs	r3, #0
 81190c0:	e030      	b.n	8119124 <ip4addr_ntoa_r+0xf0>
      }
      *rp++ = inv[i];
 81190c2:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 81190c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81190c8:	1c59      	adds	r1, r3, #1
 81190ca:	62f9      	str	r1, [r7, #44]	@ 0x2c
 81190cc:	3230      	adds	r2, #48	@ 0x30
 81190ce:	443a      	add	r2, r7
 81190d0:	f812 2c1c 	ldrb.w	r2, [r2, #-28]
 81190d4:	701a      	strb	r2, [r3, #0]
    while (i--) {
 81190d6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 81190da:	1e5a      	subs	r2, r3, #1
 81190dc:	f887 2026 	strb.w	r2, [r7, #38]	@ 0x26
 81190e0:	2b00      	cmp	r3, #0
 81190e2:	d1e6      	bne.n	81190b2 <ip4addr_ntoa_r+0x7e>
    }
    if (len++ >= buflen) {
 81190e4:	6a3b      	ldr	r3, [r7, #32]
 81190e6:	1c5a      	adds	r2, r3, #1
 81190e8:	623a      	str	r2, [r7, #32]
 81190ea:	687a      	ldr	r2, [r7, #4]
 81190ec:	429a      	cmp	r2, r3
 81190ee:	dc01      	bgt.n	81190f4 <ip4addr_ntoa_r+0xc0>
      return NULL;
 81190f0:	2300      	movs	r3, #0
 81190f2:	e017      	b.n	8119124 <ip4addr_ntoa_r+0xf0>
    }
    *rp++ = '.';
 81190f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81190f6:	1c5a      	adds	r2, r3, #1
 81190f8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 81190fa:	222e      	movs	r2, #46	@ 0x2e
 81190fc:	701a      	strb	r2, [r3, #0]
    ap++;
 81190fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8119100:	3301      	adds	r3, #1
 8119102:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (n = 0; n < 4; n++) {
 8119104:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8119108:	3301      	adds	r3, #1
 811910a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 811910e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8119112:	2b03      	cmp	r3, #3
 8119114:	d9a2      	bls.n	811905c <ip4addr_ntoa_r+0x28>
  }
  *--rp = 0;
 8119116:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8119118:	3b01      	subs	r3, #1
 811911a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 811911c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811911e:	2200      	movs	r2, #0
 8119120:	701a      	strb	r2, [r3, #0]
  return buf;
 8119122:	68bb      	ldr	r3, [r7, #8]
}
 8119124:	4618      	mov	r0, r3
 8119126:	3734      	adds	r7, #52	@ 0x34
 8119128:	46bd      	mov	sp, r7
 811912a:	f85d 7b04 	ldr.w	r7, [sp], #4
 811912e:	4770      	bx	lr
 8119130:	cccccccd 	.word	0xcccccccd

08119134 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8119134:	b580      	push	{r7, lr}
 8119136:	b084      	sub	sp, #16
 8119138:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 811913a:	2300      	movs	r3, #0
 811913c:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 811913e:	4b12      	ldr	r3, [pc, #72]	@ (8119188 <ip_reass_tmr+0x54>)
 8119140:	681b      	ldr	r3, [r3, #0]
 8119142:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8119144:	e018      	b.n	8119178 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8119146:	68fb      	ldr	r3, [r7, #12]
 8119148:	7fdb      	ldrb	r3, [r3, #31]
 811914a:	2b00      	cmp	r3, #0
 811914c:	d00b      	beq.n	8119166 <ip_reass_tmr+0x32>
      r->timer--;
 811914e:	68fb      	ldr	r3, [r7, #12]
 8119150:	7fdb      	ldrb	r3, [r3, #31]
 8119152:	3b01      	subs	r3, #1
 8119154:	b2da      	uxtb	r2, r3
 8119156:	68fb      	ldr	r3, [r7, #12]
 8119158:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 811915a:	68fb      	ldr	r3, [r7, #12]
 811915c:	60bb      	str	r3, [r7, #8]
      r = r->next;
 811915e:	68fb      	ldr	r3, [r7, #12]
 8119160:	681b      	ldr	r3, [r3, #0]
 8119162:	60fb      	str	r3, [r7, #12]
 8119164:	e008      	b.n	8119178 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8119166:	68fb      	ldr	r3, [r7, #12]
 8119168:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 811916a:	68fb      	ldr	r3, [r7, #12]
 811916c:	681b      	ldr	r3, [r3, #0]
 811916e:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8119170:	68b9      	ldr	r1, [r7, #8]
 8119172:	6878      	ldr	r0, [r7, #4]
 8119174:	f000 f80a 	bl	811918c <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8119178:	68fb      	ldr	r3, [r7, #12]
 811917a:	2b00      	cmp	r3, #0
 811917c:	d1e3      	bne.n	8119146 <ip_reass_tmr+0x12>
    }
  }
}
 811917e:	bf00      	nop
 8119180:	bf00      	nop
 8119182:	3710      	adds	r7, #16
 8119184:	46bd      	mov	sp, r7
 8119186:	bd80      	pop	{r7, pc}
 8119188:	1000b32c 	.word	0x1000b32c

0811918c <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 811918c:	b580      	push	{r7, lr}
 811918e:	b088      	sub	sp, #32
 8119190:	af00      	add	r7, sp, #0
 8119192:	6078      	str	r0, [r7, #4]
 8119194:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8119196:	2300      	movs	r3, #0
 8119198:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 811919a:	683a      	ldr	r2, [r7, #0]
 811919c:	687b      	ldr	r3, [r7, #4]
 811919e:	429a      	cmp	r2, r3
 81191a0:	d105      	bne.n	81191ae <ip_reass_free_complete_datagram+0x22>
 81191a2:	4b45      	ldr	r3, [pc, #276]	@ (81192b8 <ip_reass_free_complete_datagram+0x12c>)
 81191a4:	22ab      	movs	r2, #171	@ 0xab
 81191a6:	4945      	ldr	r1, [pc, #276]	@ (81192bc <ip_reass_free_complete_datagram+0x130>)
 81191a8:	4845      	ldr	r0, [pc, #276]	@ (81192c0 <ip_reass_free_complete_datagram+0x134>)
 81191aa:	f00a fd37 	bl	8123c1c <iprintf>
  if (prev != NULL) {
 81191ae:	683b      	ldr	r3, [r7, #0]
 81191b0:	2b00      	cmp	r3, #0
 81191b2:	d00a      	beq.n	81191ca <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 81191b4:	683b      	ldr	r3, [r7, #0]
 81191b6:	681b      	ldr	r3, [r3, #0]
 81191b8:	687a      	ldr	r2, [r7, #4]
 81191ba:	429a      	cmp	r2, r3
 81191bc:	d005      	beq.n	81191ca <ip_reass_free_complete_datagram+0x3e>
 81191be:	4b3e      	ldr	r3, [pc, #248]	@ (81192b8 <ip_reass_free_complete_datagram+0x12c>)
 81191c0:	22ad      	movs	r2, #173	@ 0xad
 81191c2:	4940      	ldr	r1, [pc, #256]	@ (81192c4 <ip_reass_free_complete_datagram+0x138>)
 81191c4:	483e      	ldr	r0, [pc, #248]	@ (81192c0 <ip_reass_free_complete_datagram+0x134>)
 81191c6:	f00a fd29 	bl	8123c1c <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 81191ca:	687b      	ldr	r3, [r7, #4]
 81191cc:	685b      	ldr	r3, [r3, #4]
 81191ce:	685b      	ldr	r3, [r3, #4]
 81191d0:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 81191d2:	697b      	ldr	r3, [r7, #20]
 81191d4:	889b      	ldrh	r3, [r3, #4]
 81191d6:	b29b      	uxth	r3, r3
 81191d8:	2b00      	cmp	r3, #0
 81191da:	d12a      	bne.n	8119232 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 81191dc:	687b      	ldr	r3, [r7, #4]
 81191de:	685b      	ldr	r3, [r3, #4]
 81191e0:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 81191e2:	697b      	ldr	r3, [r7, #20]
 81191e4:	681a      	ldr	r2, [r3, #0]
 81191e6:	687b      	ldr	r3, [r7, #4]
 81191e8:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 81191ea:	69bb      	ldr	r3, [r7, #24]
 81191ec:	6858      	ldr	r0, [r3, #4]
 81191ee:	687b      	ldr	r3, [r7, #4]
 81191f0:	3308      	adds	r3, #8
 81191f2:	2214      	movs	r2, #20
 81191f4:	4619      	mov	r1, r3
 81191f6:	f00a ffa0 	bl	812413a <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 81191fa:	2101      	movs	r1, #1
 81191fc:	69b8      	ldr	r0, [r7, #24]
 81191fe:	f7ff f9af 	bl	8118560 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8119202:	69b8      	ldr	r0, [r7, #24]
 8119204:	f002 f9f8 	bl	811b5f8 <pbuf_clen>
 8119208:	4603      	mov	r3, r0
 811920a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 811920c:	8bfa      	ldrh	r2, [r7, #30]
 811920e:	8a7b      	ldrh	r3, [r7, #18]
 8119210:	4413      	add	r3, r2
 8119212:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8119216:	db05      	blt.n	8119224 <ip_reass_free_complete_datagram+0x98>
 8119218:	4b27      	ldr	r3, [pc, #156]	@ (81192b8 <ip_reass_free_complete_datagram+0x12c>)
 811921a:	22bc      	movs	r2, #188	@ 0xbc
 811921c:	492a      	ldr	r1, [pc, #168]	@ (81192c8 <ip_reass_free_complete_datagram+0x13c>)
 811921e:	4828      	ldr	r0, [pc, #160]	@ (81192c0 <ip_reass_free_complete_datagram+0x134>)
 8119220:	f00a fcfc 	bl	8123c1c <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8119224:	8bfa      	ldrh	r2, [r7, #30]
 8119226:	8a7b      	ldrh	r3, [r7, #18]
 8119228:	4413      	add	r3, r2
 811922a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 811922c:	69b8      	ldr	r0, [r7, #24]
 811922e:	f002 f955 	bl	811b4dc <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8119232:	687b      	ldr	r3, [r7, #4]
 8119234:	685b      	ldr	r3, [r3, #4]
 8119236:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8119238:	e01f      	b.n	811927a <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 811923a:	69bb      	ldr	r3, [r7, #24]
 811923c:	685b      	ldr	r3, [r3, #4]
 811923e:	617b      	str	r3, [r7, #20]
    pcur = p;
 8119240:	69bb      	ldr	r3, [r7, #24]
 8119242:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8119244:	697b      	ldr	r3, [r7, #20]
 8119246:	681b      	ldr	r3, [r3, #0]
 8119248:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 811924a:	68f8      	ldr	r0, [r7, #12]
 811924c:	f002 f9d4 	bl	811b5f8 <pbuf_clen>
 8119250:	4603      	mov	r3, r0
 8119252:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8119254:	8bfa      	ldrh	r2, [r7, #30]
 8119256:	8a7b      	ldrh	r3, [r7, #18]
 8119258:	4413      	add	r3, r2
 811925a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 811925e:	db05      	blt.n	811926c <ip_reass_free_complete_datagram+0xe0>
 8119260:	4b15      	ldr	r3, [pc, #84]	@ (81192b8 <ip_reass_free_complete_datagram+0x12c>)
 8119262:	22cc      	movs	r2, #204	@ 0xcc
 8119264:	4918      	ldr	r1, [pc, #96]	@ (81192c8 <ip_reass_free_complete_datagram+0x13c>)
 8119266:	4816      	ldr	r0, [pc, #88]	@ (81192c0 <ip_reass_free_complete_datagram+0x134>)
 8119268:	f00a fcd8 	bl	8123c1c <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 811926c:	8bfa      	ldrh	r2, [r7, #30]
 811926e:	8a7b      	ldrh	r3, [r7, #18]
 8119270:	4413      	add	r3, r2
 8119272:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8119274:	68f8      	ldr	r0, [r7, #12]
 8119276:	f002 f931 	bl	811b4dc <pbuf_free>
  while (p != NULL) {
 811927a:	69bb      	ldr	r3, [r7, #24]
 811927c:	2b00      	cmp	r3, #0
 811927e:	d1dc      	bne.n	811923a <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8119280:	6839      	ldr	r1, [r7, #0]
 8119282:	6878      	ldr	r0, [r7, #4]
 8119284:	f000 f8c2 	bl	811940c <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8119288:	4b10      	ldr	r3, [pc, #64]	@ (81192cc <ip_reass_free_complete_datagram+0x140>)
 811928a:	881b      	ldrh	r3, [r3, #0]
 811928c:	8bfa      	ldrh	r2, [r7, #30]
 811928e:	429a      	cmp	r2, r3
 8119290:	d905      	bls.n	811929e <ip_reass_free_complete_datagram+0x112>
 8119292:	4b09      	ldr	r3, [pc, #36]	@ (81192b8 <ip_reass_free_complete_datagram+0x12c>)
 8119294:	22d2      	movs	r2, #210	@ 0xd2
 8119296:	490e      	ldr	r1, [pc, #56]	@ (81192d0 <ip_reass_free_complete_datagram+0x144>)
 8119298:	4809      	ldr	r0, [pc, #36]	@ (81192c0 <ip_reass_free_complete_datagram+0x134>)
 811929a:	f00a fcbf 	bl	8123c1c <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 811929e:	4b0b      	ldr	r3, [pc, #44]	@ (81192cc <ip_reass_free_complete_datagram+0x140>)
 81192a0:	881a      	ldrh	r2, [r3, #0]
 81192a2:	8bfb      	ldrh	r3, [r7, #30]
 81192a4:	1ad3      	subs	r3, r2, r3
 81192a6:	b29a      	uxth	r2, r3
 81192a8:	4b08      	ldr	r3, [pc, #32]	@ (81192cc <ip_reass_free_complete_datagram+0x140>)
 81192aa:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 81192ac:	8bfb      	ldrh	r3, [r7, #30]
}
 81192ae:	4618      	mov	r0, r3
 81192b0:	3720      	adds	r7, #32
 81192b2:	46bd      	mov	sp, r7
 81192b4:	bd80      	pop	{r7, pc}
 81192b6:	bf00      	nop
 81192b8:	08125a88 	.word	0x08125a88
 81192bc:	08125b00 	.word	0x08125b00
 81192c0:	08125b0c 	.word	0x08125b0c
 81192c4:	08125b34 	.word	0x08125b34
 81192c8:	08125b48 	.word	0x08125b48
 81192cc:	1000b330 	.word	0x1000b330
 81192d0:	08125b68 	.word	0x08125b68

081192d4 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 81192d4:	b580      	push	{r7, lr}
 81192d6:	b08a      	sub	sp, #40	@ 0x28
 81192d8:	af00      	add	r7, sp, #0
 81192da:	6078      	str	r0, [r7, #4]
 81192dc:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 81192de:	2300      	movs	r3, #0
 81192e0:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 81192e2:	2300      	movs	r3, #0
 81192e4:	623b      	str	r3, [r7, #32]
    prev = NULL;
 81192e6:	2300      	movs	r3, #0
 81192e8:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 81192ea:	2300      	movs	r3, #0
 81192ec:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 81192ee:	2300      	movs	r3, #0
 81192f0:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 81192f2:	4b28      	ldr	r3, [pc, #160]	@ (8119394 <ip_reass_remove_oldest_datagram+0xc0>)
 81192f4:	681b      	ldr	r3, [r3, #0]
 81192f6:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 81192f8:	e030      	b.n	811935c <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 81192fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81192fc:	695a      	ldr	r2, [r3, #20]
 81192fe:	687b      	ldr	r3, [r7, #4]
 8119300:	68db      	ldr	r3, [r3, #12]
 8119302:	429a      	cmp	r2, r3
 8119304:	d10c      	bne.n	8119320 <ip_reass_remove_oldest_datagram+0x4c>
 8119306:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8119308:	699a      	ldr	r2, [r3, #24]
 811930a:	687b      	ldr	r3, [r7, #4]
 811930c:	691b      	ldr	r3, [r3, #16]
 811930e:	429a      	cmp	r2, r3
 8119310:	d106      	bne.n	8119320 <ip_reass_remove_oldest_datagram+0x4c>
 8119312:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8119314:	899a      	ldrh	r2, [r3, #12]
 8119316:	687b      	ldr	r3, [r7, #4]
 8119318:	889b      	ldrh	r3, [r3, #4]
 811931a:	b29b      	uxth	r3, r3
 811931c:	429a      	cmp	r2, r3
 811931e:	d014      	beq.n	811934a <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8119320:	693b      	ldr	r3, [r7, #16]
 8119322:	3301      	adds	r3, #1
 8119324:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8119326:	6a3b      	ldr	r3, [r7, #32]
 8119328:	2b00      	cmp	r3, #0
 811932a:	d104      	bne.n	8119336 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 811932c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811932e:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8119330:	69fb      	ldr	r3, [r7, #28]
 8119332:	61bb      	str	r3, [r7, #24]
 8119334:	e009      	b.n	811934a <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8119336:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8119338:	7fda      	ldrb	r2, [r3, #31]
 811933a:	6a3b      	ldr	r3, [r7, #32]
 811933c:	7fdb      	ldrb	r3, [r3, #31]
 811933e:	429a      	cmp	r2, r3
 8119340:	d803      	bhi.n	811934a <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8119342:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8119344:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8119346:	69fb      	ldr	r3, [r7, #28]
 8119348:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 811934a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811934c:	681b      	ldr	r3, [r3, #0]
 811934e:	2b00      	cmp	r3, #0
 8119350:	d001      	beq.n	8119356 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8119352:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8119354:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8119356:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8119358:	681b      	ldr	r3, [r3, #0]
 811935a:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 811935c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811935e:	2b00      	cmp	r3, #0
 8119360:	d1cb      	bne.n	81192fa <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8119362:	6a3b      	ldr	r3, [r7, #32]
 8119364:	2b00      	cmp	r3, #0
 8119366:	d008      	beq.n	811937a <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8119368:	69b9      	ldr	r1, [r7, #24]
 811936a:	6a38      	ldr	r0, [r7, #32]
 811936c:	f7ff ff0e 	bl	811918c <ip_reass_free_complete_datagram>
 8119370:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8119372:	697a      	ldr	r2, [r7, #20]
 8119374:	68fb      	ldr	r3, [r7, #12]
 8119376:	4413      	add	r3, r2
 8119378:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 811937a:	697a      	ldr	r2, [r7, #20]
 811937c:	683b      	ldr	r3, [r7, #0]
 811937e:	429a      	cmp	r2, r3
 8119380:	da02      	bge.n	8119388 <ip_reass_remove_oldest_datagram+0xb4>
 8119382:	693b      	ldr	r3, [r7, #16]
 8119384:	2b01      	cmp	r3, #1
 8119386:	dcac      	bgt.n	81192e2 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8119388:	697b      	ldr	r3, [r7, #20]
}
 811938a:	4618      	mov	r0, r3
 811938c:	3728      	adds	r7, #40	@ 0x28
 811938e:	46bd      	mov	sp, r7
 8119390:	bd80      	pop	{r7, pc}
 8119392:	bf00      	nop
 8119394:	1000b32c 	.word	0x1000b32c

08119398 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8119398:	b580      	push	{r7, lr}
 811939a:	b084      	sub	sp, #16
 811939c:	af00      	add	r7, sp, #0
 811939e:	6078      	str	r0, [r7, #4]
 81193a0:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 81193a2:	2004      	movs	r0, #4
 81193a4:	f001 f982 	bl	811a6ac <memp_malloc>
 81193a8:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 81193aa:	68fb      	ldr	r3, [r7, #12]
 81193ac:	2b00      	cmp	r3, #0
 81193ae:	d110      	bne.n	81193d2 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 81193b0:	6839      	ldr	r1, [r7, #0]
 81193b2:	6878      	ldr	r0, [r7, #4]
 81193b4:	f7ff ff8e 	bl	81192d4 <ip_reass_remove_oldest_datagram>
 81193b8:	4602      	mov	r2, r0
 81193ba:	683b      	ldr	r3, [r7, #0]
 81193bc:	4293      	cmp	r3, r2
 81193be:	dc03      	bgt.n	81193c8 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 81193c0:	2004      	movs	r0, #4
 81193c2:	f001 f973 	bl	811a6ac <memp_malloc>
 81193c6:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 81193c8:	68fb      	ldr	r3, [r7, #12]
 81193ca:	2b00      	cmp	r3, #0
 81193cc:	d101      	bne.n	81193d2 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 81193ce:	2300      	movs	r3, #0
 81193d0:	e016      	b.n	8119400 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 81193d2:	2220      	movs	r2, #32
 81193d4:	2100      	movs	r1, #0
 81193d6:	68f8      	ldr	r0, [r7, #12]
 81193d8:	f00a fd60 	bl	8123e9c <memset>
  ipr->timer = IP_REASS_MAXAGE;
 81193dc:	68fb      	ldr	r3, [r7, #12]
 81193de:	220f      	movs	r2, #15
 81193e0:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 81193e2:	4b09      	ldr	r3, [pc, #36]	@ (8119408 <ip_reass_enqueue_new_datagram+0x70>)
 81193e4:	681a      	ldr	r2, [r3, #0]
 81193e6:	68fb      	ldr	r3, [r7, #12]
 81193e8:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 81193ea:	4a07      	ldr	r2, [pc, #28]	@ (8119408 <ip_reass_enqueue_new_datagram+0x70>)
 81193ec:	68fb      	ldr	r3, [r7, #12]
 81193ee:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 81193f0:	68fb      	ldr	r3, [r7, #12]
 81193f2:	3308      	adds	r3, #8
 81193f4:	2214      	movs	r2, #20
 81193f6:	6879      	ldr	r1, [r7, #4]
 81193f8:	4618      	mov	r0, r3
 81193fa:	f00a fe9e 	bl	812413a <memcpy>
  return ipr;
 81193fe:	68fb      	ldr	r3, [r7, #12]
}
 8119400:	4618      	mov	r0, r3
 8119402:	3710      	adds	r7, #16
 8119404:	46bd      	mov	sp, r7
 8119406:	bd80      	pop	{r7, pc}
 8119408:	1000b32c 	.word	0x1000b32c

0811940c <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 811940c:	b580      	push	{r7, lr}
 811940e:	b082      	sub	sp, #8
 8119410:	af00      	add	r7, sp, #0
 8119412:	6078      	str	r0, [r7, #4]
 8119414:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8119416:	4b10      	ldr	r3, [pc, #64]	@ (8119458 <ip_reass_dequeue_datagram+0x4c>)
 8119418:	681b      	ldr	r3, [r3, #0]
 811941a:	687a      	ldr	r2, [r7, #4]
 811941c:	429a      	cmp	r2, r3
 811941e:	d104      	bne.n	811942a <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8119420:	687b      	ldr	r3, [r7, #4]
 8119422:	681b      	ldr	r3, [r3, #0]
 8119424:	4a0c      	ldr	r2, [pc, #48]	@ (8119458 <ip_reass_dequeue_datagram+0x4c>)
 8119426:	6013      	str	r3, [r2, #0]
 8119428:	e00d      	b.n	8119446 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 811942a:	683b      	ldr	r3, [r7, #0]
 811942c:	2b00      	cmp	r3, #0
 811942e:	d106      	bne.n	811943e <ip_reass_dequeue_datagram+0x32>
 8119430:	4b0a      	ldr	r3, [pc, #40]	@ (811945c <ip_reass_dequeue_datagram+0x50>)
 8119432:	f240 1245 	movw	r2, #325	@ 0x145
 8119436:	490a      	ldr	r1, [pc, #40]	@ (8119460 <ip_reass_dequeue_datagram+0x54>)
 8119438:	480a      	ldr	r0, [pc, #40]	@ (8119464 <ip_reass_dequeue_datagram+0x58>)
 811943a:	f00a fbef 	bl	8123c1c <iprintf>
    prev->next = ipr->next;
 811943e:	687b      	ldr	r3, [r7, #4]
 8119440:	681a      	ldr	r2, [r3, #0]
 8119442:	683b      	ldr	r3, [r7, #0]
 8119444:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8119446:	6879      	ldr	r1, [r7, #4]
 8119448:	2004      	movs	r0, #4
 811944a:	f001 f9a5 	bl	811a798 <memp_free>
}
 811944e:	bf00      	nop
 8119450:	3708      	adds	r7, #8
 8119452:	46bd      	mov	sp, r7
 8119454:	bd80      	pop	{r7, pc}
 8119456:	bf00      	nop
 8119458:	1000b32c 	.word	0x1000b32c
 811945c:	08125a88 	.word	0x08125a88
 8119460:	08125b8c 	.word	0x08125b8c
 8119464:	08125b0c 	.word	0x08125b0c

08119468 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8119468:	b580      	push	{r7, lr}
 811946a:	b08c      	sub	sp, #48	@ 0x30
 811946c:	af00      	add	r7, sp, #0
 811946e:	60f8      	str	r0, [r7, #12]
 8119470:	60b9      	str	r1, [r7, #8]
 8119472:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8119474:	2300      	movs	r3, #0
 8119476:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8119478:	2301      	movs	r3, #1
 811947a:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 811947c:	68bb      	ldr	r3, [r7, #8]
 811947e:	685b      	ldr	r3, [r3, #4]
 8119480:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8119482:	69fb      	ldr	r3, [r7, #28]
 8119484:	885b      	ldrh	r3, [r3, #2]
 8119486:	b29b      	uxth	r3, r3
 8119488:	4618      	mov	r0, r3
 811948a:	f7fd fe1f 	bl	81170cc <lwip_htons>
 811948e:	4603      	mov	r3, r0
 8119490:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8119492:	69fb      	ldr	r3, [r7, #28]
 8119494:	781b      	ldrb	r3, [r3, #0]
 8119496:	f003 030f 	and.w	r3, r3, #15
 811949a:	b2db      	uxtb	r3, r3
 811949c:	009b      	lsls	r3, r3, #2
 811949e:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 81194a0:	7e7b      	ldrb	r3, [r7, #25]
 81194a2:	b29b      	uxth	r3, r3
 81194a4:	8b7a      	ldrh	r2, [r7, #26]
 81194a6:	429a      	cmp	r2, r3
 81194a8:	d202      	bcs.n	81194b0 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 81194aa:	f04f 33ff 	mov.w	r3, #4294967295
 81194ae:	e135      	b.n	811971c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 81194b0:	7e7b      	ldrb	r3, [r7, #25]
 81194b2:	b29b      	uxth	r3, r3
 81194b4:	8b7a      	ldrh	r2, [r7, #26]
 81194b6:	1ad3      	subs	r3, r2, r3
 81194b8:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 81194ba:	69fb      	ldr	r3, [r7, #28]
 81194bc:	88db      	ldrh	r3, [r3, #6]
 81194be:	b29b      	uxth	r3, r3
 81194c0:	4618      	mov	r0, r3
 81194c2:	f7fd fe03 	bl	81170cc <lwip_htons>
 81194c6:	4603      	mov	r3, r0
 81194c8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 81194cc:	b29b      	uxth	r3, r3
 81194ce:	00db      	lsls	r3, r3, #3
 81194d0:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 81194d2:	68bb      	ldr	r3, [r7, #8]
 81194d4:	685b      	ldr	r3, [r3, #4]
 81194d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 81194d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81194da:	2200      	movs	r2, #0
 81194dc:	701a      	strb	r2, [r3, #0]
 81194de:	2200      	movs	r2, #0
 81194e0:	705a      	strb	r2, [r3, #1]
 81194e2:	2200      	movs	r2, #0
 81194e4:	709a      	strb	r2, [r3, #2]
 81194e6:	2200      	movs	r2, #0
 81194e8:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 81194ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81194ec:	8afa      	ldrh	r2, [r7, #22]
 81194ee:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 81194f0:	8afa      	ldrh	r2, [r7, #22]
 81194f2:	8b7b      	ldrh	r3, [r7, #26]
 81194f4:	4413      	add	r3, r2
 81194f6:	b29a      	uxth	r2, r3
 81194f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81194fa:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 81194fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81194fe:	88db      	ldrh	r3, [r3, #6]
 8119500:	b29b      	uxth	r3, r3
 8119502:	8afa      	ldrh	r2, [r7, #22]
 8119504:	429a      	cmp	r2, r3
 8119506:	d902      	bls.n	811950e <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8119508:	f04f 33ff 	mov.w	r3, #4294967295
 811950c:	e106      	b.n	811971c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 811950e:	68fb      	ldr	r3, [r7, #12]
 8119510:	685b      	ldr	r3, [r3, #4]
 8119512:	627b      	str	r3, [r7, #36]	@ 0x24
 8119514:	e068      	b.n	81195e8 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8119516:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8119518:	685b      	ldr	r3, [r3, #4]
 811951a:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 811951c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811951e:	889b      	ldrh	r3, [r3, #4]
 8119520:	b29a      	uxth	r2, r3
 8119522:	693b      	ldr	r3, [r7, #16]
 8119524:	889b      	ldrh	r3, [r3, #4]
 8119526:	b29b      	uxth	r3, r3
 8119528:	429a      	cmp	r2, r3
 811952a:	d235      	bcs.n	8119598 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 811952c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811952e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8119530:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8119532:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8119534:	2b00      	cmp	r3, #0
 8119536:	d020      	beq.n	811957a <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8119538:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811953a:	889b      	ldrh	r3, [r3, #4]
 811953c:	b29a      	uxth	r2, r3
 811953e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8119540:	88db      	ldrh	r3, [r3, #6]
 8119542:	b29b      	uxth	r3, r3
 8119544:	429a      	cmp	r2, r3
 8119546:	d307      	bcc.n	8119558 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8119548:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811954a:	88db      	ldrh	r3, [r3, #6]
 811954c:	b29a      	uxth	r2, r3
 811954e:	693b      	ldr	r3, [r7, #16]
 8119550:	889b      	ldrh	r3, [r3, #4]
 8119552:	b29b      	uxth	r3, r3
 8119554:	429a      	cmp	r2, r3
 8119556:	d902      	bls.n	811955e <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8119558:	f04f 33ff 	mov.w	r3, #4294967295
 811955c:	e0de      	b.n	811971c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 811955e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8119560:	68ba      	ldr	r2, [r7, #8]
 8119562:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8119564:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8119566:	88db      	ldrh	r3, [r3, #6]
 8119568:	b29a      	uxth	r2, r3
 811956a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811956c:	889b      	ldrh	r3, [r3, #4]
 811956e:	b29b      	uxth	r3, r3
 8119570:	429a      	cmp	r2, r3
 8119572:	d03d      	beq.n	81195f0 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8119574:	2300      	movs	r3, #0
 8119576:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8119578:	e03a      	b.n	81195f0 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 811957a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811957c:	88db      	ldrh	r3, [r3, #6]
 811957e:	b29a      	uxth	r2, r3
 8119580:	693b      	ldr	r3, [r7, #16]
 8119582:	889b      	ldrh	r3, [r3, #4]
 8119584:	b29b      	uxth	r3, r3
 8119586:	429a      	cmp	r2, r3
 8119588:	d902      	bls.n	8119590 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 811958a:	f04f 33ff 	mov.w	r3, #4294967295
 811958e:	e0c5      	b.n	811971c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8119590:	68fb      	ldr	r3, [r7, #12]
 8119592:	68ba      	ldr	r2, [r7, #8]
 8119594:	605a      	str	r2, [r3, #4]
      break;
 8119596:	e02b      	b.n	81195f0 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8119598:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811959a:	889b      	ldrh	r3, [r3, #4]
 811959c:	b29a      	uxth	r2, r3
 811959e:	693b      	ldr	r3, [r7, #16]
 81195a0:	889b      	ldrh	r3, [r3, #4]
 81195a2:	b29b      	uxth	r3, r3
 81195a4:	429a      	cmp	r2, r3
 81195a6:	d102      	bne.n	81195ae <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 81195a8:	f04f 33ff 	mov.w	r3, #4294967295
 81195ac:	e0b6      	b.n	811971c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 81195ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81195b0:	889b      	ldrh	r3, [r3, #4]
 81195b2:	b29a      	uxth	r2, r3
 81195b4:	693b      	ldr	r3, [r7, #16]
 81195b6:	88db      	ldrh	r3, [r3, #6]
 81195b8:	b29b      	uxth	r3, r3
 81195ba:	429a      	cmp	r2, r3
 81195bc:	d202      	bcs.n	81195c4 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 81195be:	f04f 33ff 	mov.w	r3, #4294967295
 81195c2:	e0ab      	b.n	811971c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 81195c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81195c6:	2b00      	cmp	r3, #0
 81195c8:	d009      	beq.n	81195de <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 81195ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81195cc:	88db      	ldrh	r3, [r3, #6]
 81195ce:	b29a      	uxth	r2, r3
 81195d0:	693b      	ldr	r3, [r7, #16]
 81195d2:	889b      	ldrh	r3, [r3, #4]
 81195d4:	b29b      	uxth	r3, r3
 81195d6:	429a      	cmp	r2, r3
 81195d8:	d001      	beq.n	81195de <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 81195da:	2300      	movs	r3, #0
 81195dc:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 81195de:	693b      	ldr	r3, [r7, #16]
 81195e0:	681b      	ldr	r3, [r3, #0]
 81195e2:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 81195e4:	693b      	ldr	r3, [r7, #16]
 81195e6:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 81195e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81195ea:	2b00      	cmp	r3, #0
 81195ec:	d193      	bne.n	8119516 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 81195ee:	e000      	b.n	81195f2 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 81195f0:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 81195f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81195f4:	2b00      	cmp	r3, #0
 81195f6:	d12d      	bne.n	8119654 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 81195f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81195fa:	2b00      	cmp	r3, #0
 81195fc:	d01c      	beq.n	8119638 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 81195fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8119600:	88db      	ldrh	r3, [r3, #6]
 8119602:	b29a      	uxth	r2, r3
 8119604:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8119606:	889b      	ldrh	r3, [r3, #4]
 8119608:	b29b      	uxth	r3, r3
 811960a:	429a      	cmp	r2, r3
 811960c:	d906      	bls.n	811961c <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 811960e:	4b45      	ldr	r3, [pc, #276]	@ (8119724 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8119610:	f44f 72db 	mov.w	r2, #438	@ 0x1b6
 8119614:	4944      	ldr	r1, [pc, #272]	@ (8119728 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8119616:	4845      	ldr	r0, [pc, #276]	@ (811972c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8119618:	f00a fb00 	bl	8123c1c <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 811961c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 811961e:	68ba      	ldr	r2, [r7, #8]
 8119620:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8119622:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8119624:	88db      	ldrh	r3, [r3, #6]
 8119626:	b29a      	uxth	r2, r3
 8119628:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811962a:	889b      	ldrh	r3, [r3, #4]
 811962c:	b29b      	uxth	r3, r3
 811962e:	429a      	cmp	r2, r3
 8119630:	d010      	beq.n	8119654 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8119632:	2300      	movs	r3, #0
 8119634:	623b      	str	r3, [r7, #32]
 8119636:	e00d      	b.n	8119654 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8119638:	68fb      	ldr	r3, [r7, #12]
 811963a:	685b      	ldr	r3, [r3, #4]
 811963c:	2b00      	cmp	r3, #0
 811963e:	d006      	beq.n	811964e <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8119640:	4b38      	ldr	r3, [pc, #224]	@ (8119724 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8119642:	f44f 72df 	mov.w	r2, #446	@ 0x1be
 8119646:	493a      	ldr	r1, [pc, #232]	@ (8119730 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8119648:	4838      	ldr	r0, [pc, #224]	@ (811972c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 811964a:	f00a fae7 	bl	8123c1c <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 811964e:	68fb      	ldr	r3, [r7, #12]
 8119650:	68ba      	ldr	r2, [r7, #8]
 8119652:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8119654:	687b      	ldr	r3, [r7, #4]
 8119656:	2b00      	cmp	r3, #0
 8119658:	d105      	bne.n	8119666 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 811965a:	68fb      	ldr	r3, [r7, #12]
 811965c:	7f9b      	ldrb	r3, [r3, #30]
 811965e:	f003 0301 	and.w	r3, r3, #1
 8119662:	2b00      	cmp	r3, #0
 8119664:	d059      	beq.n	811971a <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8119666:	6a3b      	ldr	r3, [r7, #32]
 8119668:	2b00      	cmp	r3, #0
 811966a:	d04f      	beq.n	811970c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 811966c:	68fb      	ldr	r3, [r7, #12]
 811966e:	685b      	ldr	r3, [r3, #4]
 8119670:	2b00      	cmp	r3, #0
 8119672:	d006      	beq.n	8119682 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8119674:	68fb      	ldr	r3, [r7, #12]
 8119676:	685b      	ldr	r3, [r3, #4]
 8119678:	685b      	ldr	r3, [r3, #4]
 811967a:	889b      	ldrh	r3, [r3, #4]
 811967c:	b29b      	uxth	r3, r3
 811967e:	2b00      	cmp	r3, #0
 8119680:	d002      	beq.n	8119688 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8119682:	2300      	movs	r3, #0
 8119684:	623b      	str	r3, [r7, #32]
 8119686:	e041      	b.n	811970c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8119688:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811968a:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 811968c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811968e:	681b      	ldr	r3, [r3, #0]
 8119690:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 8119692:	e012      	b.n	81196ba <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8119694:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8119696:	685b      	ldr	r3, [r3, #4]
 8119698:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 811969a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 811969c:	88db      	ldrh	r3, [r3, #6]
 811969e:	b29a      	uxth	r2, r3
 81196a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81196a2:	889b      	ldrh	r3, [r3, #4]
 81196a4:	b29b      	uxth	r3, r3
 81196a6:	429a      	cmp	r2, r3
 81196a8:	d002      	beq.n	81196b0 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 81196aa:	2300      	movs	r3, #0
 81196ac:	623b      	str	r3, [r7, #32]
            break;
 81196ae:	e007      	b.n	81196c0 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 81196b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81196b2:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 81196b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81196b6:	681b      	ldr	r3, [r3, #0]
 81196b8:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 81196ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81196bc:	2b00      	cmp	r3, #0
 81196be:	d1e9      	bne.n	8119694 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 81196c0:	6a3b      	ldr	r3, [r7, #32]
 81196c2:	2b00      	cmp	r3, #0
 81196c4:	d022      	beq.n	811970c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 81196c6:	68fb      	ldr	r3, [r7, #12]
 81196c8:	685b      	ldr	r3, [r3, #4]
 81196ca:	2b00      	cmp	r3, #0
 81196cc:	d106      	bne.n	81196dc <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 81196ce:	4b15      	ldr	r3, [pc, #84]	@ (8119724 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 81196d0:	f240 12df 	movw	r2, #479	@ 0x1df
 81196d4:	4917      	ldr	r1, [pc, #92]	@ (8119734 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 81196d6:	4815      	ldr	r0, [pc, #84]	@ (811972c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 81196d8:	f00a faa0 	bl	8123c1c <iprintf>
          LWIP_ASSERT("sanity check",
 81196dc:	68fb      	ldr	r3, [r7, #12]
 81196de:	685b      	ldr	r3, [r3, #4]
 81196e0:	685b      	ldr	r3, [r3, #4]
 81196e2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 81196e4:	429a      	cmp	r2, r3
 81196e6:	d106      	bne.n	81196f6 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 81196e8:	4b0e      	ldr	r3, [pc, #56]	@ (8119724 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 81196ea:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 81196ee:	4911      	ldr	r1, [pc, #68]	@ (8119734 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 81196f0:	480e      	ldr	r0, [pc, #56]	@ (811972c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 81196f2:	f00a fa93 	bl	8123c1c <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 81196f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81196f8:	681b      	ldr	r3, [r3, #0]
 81196fa:	2b00      	cmp	r3, #0
 81196fc:	d006      	beq.n	811970c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 81196fe:	4b09      	ldr	r3, [pc, #36]	@ (8119724 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8119700:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 8119704:	490c      	ldr	r1, [pc, #48]	@ (8119738 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8119706:	4809      	ldr	r0, [pc, #36]	@ (811972c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8119708:	f00a fa88 	bl	8123c1c <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 811970c:	6a3b      	ldr	r3, [r7, #32]
 811970e:	2b00      	cmp	r3, #0
 8119710:	bf14      	ite	ne
 8119712:	2301      	movne	r3, #1
 8119714:	2300      	moveq	r3, #0
 8119716:	b2db      	uxtb	r3, r3
 8119718:	e000      	b.n	811971c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 811971a:	2300      	movs	r3, #0
}
 811971c:	4618      	mov	r0, r3
 811971e:	3730      	adds	r7, #48	@ 0x30
 8119720:	46bd      	mov	sp, r7
 8119722:	bd80      	pop	{r7, pc}
 8119724:	08125a88 	.word	0x08125a88
 8119728:	08125ba8 	.word	0x08125ba8
 811972c:	08125b0c 	.word	0x08125b0c
 8119730:	08125bc8 	.word	0x08125bc8
 8119734:	08125c00 	.word	0x08125c00
 8119738:	08125c10 	.word	0x08125c10

0811973c <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 811973c:	b580      	push	{r7, lr}
 811973e:	b08e      	sub	sp, #56	@ 0x38
 8119740:	af00      	add	r7, sp, #0
 8119742:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8119744:	687b      	ldr	r3, [r7, #4]
 8119746:	685b      	ldr	r3, [r3, #4]
 8119748:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 811974a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 811974c:	781b      	ldrb	r3, [r3, #0]
 811974e:	f003 030f 	and.w	r3, r3, #15
 8119752:	b2db      	uxtb	r3, r3
 8119754:	009b      	lsls	r3, r3, #2
 8119756:	b2db      	uxtb	r3, r3
 8119758:	2b14      	cmp	r3, #20
 811975a:	f040 8171 	bne.w	8119a40 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 811975e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8119760:	88db      	ldrh	r3, [r3, #6]
 8119762:	b29b      	uxth	r3, r3
 8119764:	4618      	mov	r0, r3
 8119766:	f7fd fcb1 	bl	81170cc <lwip_htons>
 811976a:	4603      	mov	r3, r0
 811976c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8119770:	b29b      	uxth	r3, r3
 8119772:	00db      	lsls	r3, r3, #3
 8119774:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8119776:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8119778:	885b      	ldrh	r3, [r3, #2]
 811977a:	b29b      	uxth	r3, r3
 811977c:	4618      	mov	r0, r3
 811977e:	f7fd fca5 	bl	81170cc <lwip_htons>
 8119782:	4603      	mov	r3, r0
 8119784:	84bb      	strh	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8119786:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8119788:	781b      	ldrb	r3, [r3, #0]
 811978a:	f003 030f 	and.w	r3, r3, #15
 811978e:	b2db      	uxtb	r3, r3
 8119790:	009b      	lsls	r3, r3, #2
 8119792:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (hlen > len) {
 8119796:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 811979a:	b29b      	uxth	r3, r3
 811979c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 811979e:	429a      	cmp	r2, r3
 81197a0:	f0c0 8150 	bcc.w	8119a44 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 81197a4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 81197a8:	b29b      	uxth	r3, r3
 81197aa:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 81197ac:	1ad3      	subs	r3, r2, r3
 81197ae:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 81197b0:	6878      	ldr	r0, [r7, #4]
 81197b2:	f001 ff21 	bl	811b5f8 <pbuf_clen>
 81197b6:	4603      	mov	r3, r0
 81197b8:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 81197ba:	4b8c      	ldr	r3, [pc, #560]	@ (81199ec <ip4_reass+0x2b0>)
 81197bc:	881b      	ldrh	r3, [r3, #0]
 81197be:	461a      	mov	r2, r3
 81197c0:	8c3b      	ldrh	r3, [r7, #32]
 81197c2:	4413      	add	r3, r2
 81197c4:	2b0a      	cmp	r3, #10
 81197c6:	dd10      	ble.n	81197ea <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 81197c8:	8c3b      	ldrh	r3, [r7, #32]
 81197ca:	4619      	mov	r1, r3
 81197cc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 81197ce:	f7ff fd81 	bl	81192d4 <ip_reass_remove_oldest_datagram>
 81197d2:	4603      	mov	r3, r0
 81197d4:	2b00      	cmp	r3, #0
 81197d6:	f000 8137 	beq.w	8119a48 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 81197da:	4b84      	ldr	r3, [pc, #528]	@ (81199ec <ip4_reass+0x2b0>)
 81197dc:	881b      	ldrh	r3, [r3, #0]
 81197de:	461a      	mov	r2, r3
 81197e0:	8c3b      	ldrh	r3, [r7, #32]
 81197e2:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 81197e4:	2b0a      	cmp	r3, #10
 81197e6:	f300 812f 	bgt.w	8119a48 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 81197ea:	4b81      	ldr	r3, [pc, #516]	@ (81199f0 <ip4_reass+0x2b4>)
 81197ec:	681b      	ldr	r3, [r3, #0]
 81197ee:	633b      	str	r3, [r7, #48]	@ 0x30
 81197f0:	e015      	b.n	811981e <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 81197f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81197f4:	695a      	ldr	r2, [r3, #20]
 81197f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81197f8:	68db      	ldr	r3, [r3, #12]
 81197fa:	429a      	cmp	r2, r3
 81197fc:	d10c      	bne.n	8119818 <ip4_reass+0xdc>
 81197fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8119800:	699a      	ldr	r2, [r3, #24]
 8119802:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8119804:	691b      	ldr	r3, [r3, #16]
 8119806:	429a      	cmp	r2, r3
 8119808:	d106      	bne.n	8119818 <ip4_reass+0xdc>
 811980a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811980c:	899a      	ldrh	r2, [r3, #12]
 811980e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8119810:	889b      	ldrh	r3, [r3, #4]
 8119812:	b29b      	uxth	r3, r3
 8119814:	429a      	cmp	r2, r3
 8119816:	d006      	beq.n	8119826 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8119818:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811981a:	681b      	ldr	r3, [r3, #0]
 811981c:	633b      	str	r3, [r7, #48]	@ 0x30
 811981e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8119820:	2b00      	cmp	r3, #0
 8119822:	d1e6      	bne.n	81197f2 <ip4_reass+0xb6>
 8119824:	e000      	b.n	8119828 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8119826:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8119828:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811982a:	2b00      	cmp	r3, #0
 811982c:	d109      	bne.n	8119842 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 811982e:	8c3b      	ldrh	r3, [r7, #32]
 8119830:	4619      	mov	r1, r3
 8119832:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8119834:	f7ff fdb0 	bl	8119398 <ip_reass_enqueue_new_datagram>
 8119838:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 811983a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811983c:	2b00      	cmp	r3, #0
 811983e:	d11c      	bne.n	811987a <ip4_reass+0x13e>
      goto nullreturn;
 8119840:	e105      	b.n	8119a4e <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8119842:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8119844:	88db      	ldrh	r3, [r3, #6]
 8119846:	b29b      	uxth	r3, r3
 8119848:	4618      	mov	r0, r3
 811984a:	f7fd fc3f 	bl	81170cc <lwip_htons>
 811984e:	4603      	mov	r3, r0
 8119850:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8119854:	2b00      	cmp	r3, #0
 8119856:	d110      	bne.n	811987a <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8119858:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811985a:	89db      	ldrh	r3, [r3, #14]
 811985c:	4618      	mov	r0, r3
 811985e:	f7fd fc35 	bl	81170cc <lwip_htons>
 8119862:	4603      	mov	r3, r0
 8119864:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8119868:	2b00      	cmp	r3, #0
 811986a:	d006      	beq.n	811987a <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 811986c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811986e:	3308      	adds	r3, #8
 8119870:	2214      	movs	r2, #20
 8119872:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8119874:	4618      	mov	r0, r3
 8119876:	f00a fc60 	bl	812413a <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 811987a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 811987c:	88db      	ldrh	r3, [r3, #6]
 811987e:	b29b      	uxth	r3, r3
 8119880:	f003 0320 	and.w	r3, r3, #32
 8119884:	2b00      	cmp	r3, #0
 8119886:	bf0c      	ite	eq
 8119888:	2301      	moveq	r3, #1
 811988a:	2300      	movne	r3, #0
 811988c:	b2db      	uxtb	r3, r3
 811988e:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8119890:	69fb      	ldr	r3, [r7, #28]
 8119892:	2b00      	cmp	r3, #0
 8119894:	d00e      	beq.n	81198b4 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8119896:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8119898:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 811989a:	4413      	add	r3, r2
 811989c:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 811989e:	8b7a      	ldrh	r2, [r7, #26]
 81198a0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 81198a2:	429a      	cmp	r2, r3
 81198a4:	f0c0 80a0 	bcc.w	81199e8 <ip4_reass+0x2ac>
 81198a8:	8b7b      	ldrh	r3, [r7, #26]
 81198aa:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 81198ae:	4293      	cmp	r3, r2
 81198b0:	f200 809a 	bhi.w	81199e8 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 81198b4:	69fa      	ldr	r2, [r7, #28]
 81198b6:	6879      	ldr	r1, [r7, #4]
 81198b8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 81198ba:	f7ff fdd5 	bl	8119468 <ip_reass_chain_frag_into_datagram_and_validate>
 81198be:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 81198c0:	697b      	ldr	r3, [r7, #20]
 81198c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 81198c6:	f000 809b 	beq.w	8119a00 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 81198ca:	4b48      	ldr	r3, [pc, #288]	@ (81199ec <ip4_reass+0x2b0>)
 81198cc:	881a      	ldrh	r2, [r3, #0]
 81198ce:	8c3b      	ldrh	r3, [r7, #32]
 81198d0:	4413      	add	r3, r2
 81198d2:	b29a      	uxth	r2, r3
 81198d4:	4b45      	ldr	r3, [pc, #276]	@ (81199ec <ip4_reass+0x2b0>)
 81198d6:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 81198d8:	69fb      	ldr	r3, [r7, #28]
 81198da:	2b00      	cmp	r3, #0
 81198dc:	d00d      	beq.n	81198fa <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 81198de:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 81198e0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 81198e2:	4413      	add	r3, r2
 81198e4:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 81198e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81198e8:	8a7a      	ldrh	r2, [r7, #18]
 81198ea:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 81198ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81198ee:	7f9b      	ldrb	r3, [r3, #30]
 81198f0:	f043 0301 	orr.w	r3, r3, #1
 81198f4:	b2da      	uxtb	r2, r3
 81198f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81198f8:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 81198fa:	697b      	ldr	r3, [r7, #20]
 81198fc:	2b01      	cmp	r3, #1
 81198fe:	d171      	bne.n	81199e4 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8119900:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8119902:	8b9b      	ldrh	r3, [r3, #28]
 8119904:	3314      	adds	r3, #20
 8119906:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8119908:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811990a:	685b      	ldr	r3, [r3, #4]
 811990c:	685b      	ldr	r3, [r3, #4]
 811990e:	681b      	ldr	r3, [r3, #0]
 8119910:	637b      	str	r3, [r7, #52]	@ 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8119912:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8119914:	685b      	ldr	r3, [r3, #4]
 8119916:	685b      	ldr	r3, [r3, #4]
 8119918:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 811991a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811991c:	3308      	adds	r3, #8
 811991e:	2214      	movs	r2, #20
 8119920:	4619      	mov	r1, r3
 8119922:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8119924:	f00a fc09 	bl	812413a <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8119928:	8a3b      	ldrh	r3, [r7, #16]
 811992a:	4618      	mov	r0, r3
 811992c:	f7fd fbce 	bl	81170cc <lwip_htons>
 8119930:	4603      	mov	r3, r0
 8119932:	461a      	mov	r2, r3
 8119934:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8119936:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8119938:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 811993a:	2200      	movs	r2, #0
 811993c:	719a      	strb	r2, [r3, #6]
 811993e:	2200      	movs	r2, #0
 8119940:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8119942:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8119944:	2200      	movs	r2, #0
 8119946:	729a      	strb	r2, [r3, #10]
 8119948:	2200      	movs	r2, #0
 811994a:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 811994c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811994e:	685b      	ldr	r3, [r3, #4]
 8119950:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8119952:	e00d      	b.n	8119970 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8119954:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8119956:	685b      	ldr	r3, [r3, #4]
 8119958:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 811995a:	2114      	movs	r1, #20
 811995c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 811995e:	f001 fd37 	bl	811b3d0 <pbuf_remove_header>
      pbuf_cat(p, r);
 8119962:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8119964:	6878      	ldr	r0, [r7, #4]
 8119966:	f001 fe87 	bl	811b678 <pbuf_cat>
      r = iprh->next_pbuf;
 811996a:	68fb      	ldr	r3, [r7, #12]
 811996c:	681b      	ldr	r3, [r3, #0]
 811996e:	637b      	str	r3, [r7, #52]	@ 0x34
    while (r != NULL) {
 8119970:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8119972:	2b00      	cmp	r3, #0
 8119974:	d1ee      	bne.n	8119954 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8119976:	4b1e      	ldr	r3, [pc, #120]	@ (81199f0 <ip4_reass+0x2b4>)
 8119978:	681b      	ldr	r3, [r3, #0]
 811997a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 811997c:	429a      	cmp	r2, r3
 811997e:	d102      	bne.n	8119986 <ip4_reass+0x24a>
      ipr_prev = NULL;
 8119980:	2300      	movs	r3, #0
 8119982:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8119984:	e010      	b.n	81199a8 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8119986:	4b1a      	ldr	r3, [pc, #104]	@ (81199f0 <ip4_reass+0x2b4>)
 8119988:	681b      	ldr	r3, [r3, #0]
 811998a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 811998c:	e007      	b.n	811999e <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 811998e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8119990:	681b      	ldr	r3, [r3, #0]
 8119992:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8119994:	429a      	cmp	r2, r3
 8119996:	d006      	beq.n	81199a6 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8119998:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811999a:	681b      	ldr	r3, [r3, #0]
 811999c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 811999e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81199a0:	2b00      	cmp	r3, #0
 81199a2:	d1f4      	bne.n	811998e <ip4_reass+0x252>
 81199a4:	e000      	b.n	81199a8 <ip4_reass+0x26c>
          break;
 81199a6:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 81199a8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 81199aa:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 81199ac:	f7ff fd2e 	bl	811940c <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 81199b0:	6878      	ldr	r0, [r7, #4]
 81199b2:	f001 fe21 	bl	811b5f8 <pbuf_clen>
 81199b6:	4603      	mov	r3, r0
 81199b8:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 81199ba:	4b0c      	ldr	r3, [pc, #48]	@ (81199ec <ip4_reass+0x2b0>)
 81199bc:	881b      	ldrh	r3, [r3, #0]
 81199be:	8c3a      	ldrh	r2, [r7, #32]
 81199c0:	429a      	cmp	r2, r3
 81199c2:	d906      	bls.n	81199d2 <ip4_reass+0x296>
 81199c4:	4b0b      	ldr	r3, [pc, #44]	@ (81199f4 <ip4_reass+0x2b8>)
 81199c6:	f240 229b 	movw	r2, #667	@ 0x29b
 81199ca:	490b      	ldr	r1, [pc, #44]	@ (81199f8 <ip4_reass+0x2bc>)
 81199cc:	480b      	ldr	r0, [pc, #44]	@ (81199fc <ip4_reass+0x2c0>)
 81199ce:	f00a f925 	bl	8123c1c <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 81199d2:	4b06      	ldr	r3, [pc, #24]	@ (81199ec <ip4_reass+0x2b0>)
 81199d4:	881a      	ldrh	r2, [r3, #0]
 81199d6:	8c3b      	ldrh	r3, [r7, #32]
 81199d8:	1ad3      	subs	r3, r2, r3
 81199da:	b29a      	uxth	r2, r3
 81199dc:	4b03      	ldr	r3, [pc, #12]	@ (81199ec <ip4_reass+0x2b0>)
 81199de:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 81199e0:	687b      	ldr	r3, [r7, #4]
 81199e2:	e038      	b.n	8119a56 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 81199e4:	2300      	movs	r3, #0
 81199e6:	e036      	b.n	8119a56 <ip4_reass+0x31a>
      goto nullreturn_ipr;
 81199e8:	bf00      	nop
 81199ea:	e00a      	b.n	8119a02 <ip4_reass+0x2c6>
 81199ec:	1000b330 	.word	0x1000b330
 81199f0:	1000b32c 	.word	0x1000b32c
 81199f4:	08125a88 	.word	0x08125a88
 81199f8:	08125c34 	.word	0x08125c34
 81199fc:	08125b0c 	.word	0x08125b0c
    goto nullreturn_ipr;
 8119a00:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8119a02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8119a04:	2b00      	cmp	r3, #0
 8119a06:	d106      	bne.n	8119a16 <ip4_reass+0x2da>
 8119a08:	4b15      	ldr	r3, [pc, #84]	@ (8119a60 <ip4_reass+0x324>)
 8119a0a:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 8119a0e:	4915      	ldr	r1, [pc, #84]	@ (8119a64 <ip4_reass+0x328>)
 8119a10:	4815      	ldr	r0, [pc, #84]	@ (8119a68 <ip4_reass+0x32c>)
 8119a12:	f00a f903 	bl	8123c1c <iprintf>
  if (ipr->p == NULL) {
 8119a16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8119a18:	685b      	ldr	r3, [r3, #4]
 8119a1a:	2b00      	cmp	r3, #0
 8119a1c:	d116      	bne.n	8119a4c <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8119a1e:	4b13      	ldr	r3, [pc, #76]	@ (8119a6c <ip4_reass+0x330>)
 8119a20:	681b      	ldr	r3, [r3, #0]
 8119a22:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8119a24:	429a      	cmp	r2, r3
 8119a26:	d006      	beq.n	8119a36 <ip4_reass+0x2fa>
 8119a28:	4b0d      	ldr	r3, [pc, #52]	@ (8119a60 <ip4_reass+0x324>)
 8119a2a:	f240 22ab 	movw	r2, #683	@ 0x2ab
 8119a2e:	4910      	ldr	r1, [pc, #64]	@ (8119a70 <ip4_reass+0x334>)
 8119a30:	480d      	ldr	r0, [pc, #52]	@ (8119a68 <ip4_reass+0x32c>)
 8119a32:	f00a f8f3 	bl	8123c1c <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8119a36:	2100      	movs	r1, #0
 8119a38:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8119a3a:	f7ff fce7 	bl	811940c <ip_reass_dequeue_datagram>
 8119a3e:	e006      	b.n	8119a4e <ip4_reass+0x312>
    goto nullreturn;
 8119a40:	bf00      	nop
 8119a42:	e004      	b.n	8119a4e <ip4_reass+0x312>
    goto nullreturn;
 8119a44:	bf00      	nop
 8119a46:	e002      	b.n	8119a4e <ip4_reass+0x312>
      goto nullreturn;
 8119a48:	bf00      	nop
 8119a4a:	e000      	b.n	8119a4e <ip4_reass+0x312>
  }

nullreturn:
 8119a4c:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8119a4e:	6878      	ldr	r0, [r7, #4]
 8119a50:	f001 fd44 	bl	811b4dc <pbuf_free>
  return NULL;
 8119a54:	2300      	movs	r3, #0
}
 8119a56:	4618      	mov	r0, r3
 8119a58:	3738      	adds	r7, #56	@ 0x38
 8119a5a:	46bd      	mov	sp, r7
 8119a5c:	bd80      	pop	{r7, pc}
 8119a5e:	bf00      	nop
 8119a60:	08125a88 	.word	0x08125a88
 8119a64:	08125c50 	.word	0x08125c50
 8119a68:	08125b0c 	.word	0x08125b0c
 8119a6c:	1000b32c 	.word	0x1000b32c
 8119a70:	08125c5c 	.word	0x08125c5c

08119a74 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8119a74:	b580      	push	{r7, lr}
 8119a76:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8119a78:	2005      	movs	r0, #5
 8119a7a:	f000 fe17 	bl	811a6ac <memp_malloc>
 8119a7e:	4603      	mov	r3, r0
}
 8119a80:	4618      	mov	r0, r3
 8119a82:	bd80      	pop	{r7, pc}

08119a84 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8119a84:	b580      	push	{r7, lr}
 8119a86:	b082      	sub	sp, #8
 8119a88:	af00      	add	r7, sp, #0
 8119a8a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8119a8c:	687b      	ldr	r3, [r7, #4]
 8119a8e:	2b00      	cmp	r3, #0
 8119a90:	d106      	bne.n	8119aa0 <ip_frag_free_pbuf_custom_ref+0x1c>
 8119a92:	4b07      	ldr	r3, [pc, #28]	@ (8119ab0 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8119a94:	f44f 7231 	mov.w	r2, #708	@ 0x2c4
 8119a98:	4906      	ldr	r1, [pc, #24]	@ (8119ab4 <ip_frag_free_pbuf_custom_ref+0x30>)
 8119a9a:	4807      	ldr	r0, [pc, #28]	@ (8119ab8 <ip_frag_free_pbuf_custom_ref+0x34>)
 8119a9c:	f00a f8be 	bl	8123c1c <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8119aa0:	6879      	ldr	r1, [r7, #4]
 8119aa2:	2005      	movs	r0, #5
 8119aa4:	f000 fe78 	bl	811a798 <memp_free>
}
 8119aa8:	bf00      	nop
 8119aaa:	3708      	adds	r7, #8
 8119aac:	46bd      	mov	sp, r7
 8119aae:	bd80      	pop	{r7, pc}
 8119ab0:	08125a88 	.word	0x08125a88
 8119ab4:	08125c7c 	.word	0x08125c7c
 8119ab8:	08125b0c 	.word	0x08125b0c

08119abc <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8119abc:	b580      	push	{r7, lr}
 8119abe:	b084      	sub	sp, #16
 8119ac0:	af00      	add	r7, sp, #0
 8119ac2:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8119ac4:	687b      	ldr	r3, [r7, #4]
 8119ac6:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8119ac8:	68fb      	ldr	r3, [r7, #12]
 8119aca:	2b00      	cmp	r3, #0
 8119acc:	d106      	bne.n	8119adc <ipfrag_free_pbuf_custom+0x20>
 8119ace:	4b11      	ldr	r3, [pc, #68]	@ (8119b14 <ipfrag_free_pbuf_custom+0x58>)
 8119ad0:	f240 22ce 	movw	r2, #718	@ 0x2ce
 8119ad4:	4910      	ldr	r1, [pc, #64]	@ (8119b18 <ipfrag_free_pbuf_custom+0x5c>)
 8119ad6:	4811      	ldr	r0, [pc, #68]	@ (8119b1c <ipfrag_free_pbuf_custom+0x60>)
 8119ad8:	f00a f8a0 	bl	8123c1c <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8119adc:	68fa      	ldr	r2, [r7, #12]
 8119ade:	687b      	ldr	r3, [r7, #4]
 8119ae0:	429a      	cmp	r2, r3
 8119ae2:	d006      	beq.n	8119af2 <ipfrag_free_pbuf_custom+0x36>
 8119ae4:	4b0b      	ldr	r3, [pc, #44]	@ (8119b14 <ipfrag_free_pbuf_custom+0x58>)
 8119ae6:	f240 22cf 	movw	r2, #719	@ 0x2cf
 8119aea:	490d      	ldr	r1, [pc, #52]	@ (8119b20 <ipfrag_free_pbuf_custom+0x64>)
 8119aec:	480b      	ldr	r0, [pc, #44]	@ (8119b1c <ipfrag_free_pbuf_custom+0x60>)
 8119aee:	f00a f895 	bl	8123c1c <iprintf>
  if (pcr->original != NULL) {
 8119af2:	68fb      	ldr	r3, [r7, #12]
 8119af4:	695b      	ldr	r3, [r3, #20]
 8119af6:	2b00      	cmp	r3, #0
 8119af8:	d004      	beq.n	8119b04 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8119afa:	68fb      	ldr	r3, [r7, #12]
 8119afc:	695b      	ldr	r3, [r3, #20]
 8119afe:	4618      	mov	r0, r3
 8119b00:	f001 fcec 	bl	811b4dc <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8119b04:	68f8      	ldr	r0, [r7, #12]
 8119b06:	f7ff ffbd 	bl	8119a84 <ip_frag_free_pbuf_custom_ref>
}
 8119b0a:	bf00      	nop
 8119b0c:	3710      	adds	r7, #16
 8119b0e:	46bd      	mov	sp, r7
 8119b10:	bd80      	pop	{r7, pc}
 8119b12:	bf00      	nop
 8119b14:	08125a88 	.word	0x08125a88
 8119b18:	08125c88 	.word	0x08125c88
 8119b1c:	08125b0c 	.word	0x08125b0c
 8119b20:	08125c94 	.word	0x08125c94

08119b24 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8119b24:	b580      	push	{r7, lr}
 8119b26:	b094      	sub	sp, #80	@ 0x50
 8119b28:	af02      	add	r7, sp, #8
 8119b2a:	60f8      	str	r0, [r7, #12]
 8119b2c:	60b9      	str	r1, [r7, #8]
 8119b2e:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8119b30:	2300      	movs	r3, #0
 8119b32:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8119b36:	68bb      	ldr	r3, [r7, #8]
 8119b38:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8119b3a:	3b14      	subs	r3, #20
 8119b3c:	2b00      	cmp	r3, #0
 8119b3e:	da00      	bge.n	8119b42 <ip4_frag+0x1e>
 8119b40:	3307      	adds	r3, #7
 8119b42:	10db      	asrs	r3, r3, #3
 8119b44:	877b      	strh	r3, [r7, #58]	@ 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8119b46:	2314      	movs	r3, #20
 8119b48:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8119b4a:	68fb      	ldr	r3, [r7, #12]
 8119b4c:	685b      	ldr	r3, [r3, #4]
 8119b4e:	637b      	str	r3, [r7, #52]	@ 0x34
  iphdr = original_iphdr;
 8119b50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8119b52:	633b      	str	r3, [r7, #48]	@ 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8119b54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8119b56:	781b      	ldrb	r3, [r3, #0]
 8119b58:	f003 030f 	and.w	r3, r3, #15
 8119b5c:	b2db      	uxtb	r3, r3
 8119b5e:	009b      	lsls	r3, r3, #2
 8119b60:	b2db      	uxtb	r3, r3
 8119b62:	2b14      	cmp	r3, #20
 8119b64:	d002      	beq.n	8119b6c <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8119b66:	f06f 0305 	mvn.w	r3, #5
 8119b6a:	e110      	b.n	8119d8e <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8119b6c:	68fb      	ldr	r3, [r7, #12]
 8119b6e:	895b      	ldrh	r3, [r3, #10]
 8119b70:	2b13      	cmp	r3, #19
 8119b72:	d809      	bhi.n	8119b88 <ip4_frag+0x64>
 8119b74:	4b88      	ldr	r3, [pc, #544]	@ (8119d98 <ip4_frag+0x274>)
 8119b76:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 8119b7a:	4988      	ldr	r1, [pc, #544]	@ (8119d9c <ip4_frag+0x278>)
 8119b7c:	4888      	ldr	r0, [pc, #544]	@ (8119da0 <ip4_frag+0x27c>)
 8119b7e:	f00a f84d 	bl	8123c1c <iprintf>
 8119b82:	f06f 0305 	mvn.w	r3, #5
 8119b86:	e102      	b.n	8119d8e <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8119b88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8119b8a:	88db      	ldrh	r3, [r3, #6]
 8119b8c:	b29b      	uxth	r3, r3
 8119b8e:	4618      	mov	r0, r3
 8119b90:	f7fd fa9c 	bl	81170cc <lwip_htons>
 8119b94:	4603      	mov	r3, r0
 8119b96:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  ofo = tmp & IP_OFFMASK;
 8119b98:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8119b9a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8119b9e:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8119ba2:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8119ba4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8119ba8:	62fb      	str	r3, [r7, #44]	@ 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8119baa:	68fb      	ldr	r3, [r7, #12]
 8119bac:	891b      	ldrh	r3, [r3, #8]
 8119bae:	3b14      	subs	r3, #20
 8119bb0:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

  while (left) {
 8119bb4:	e0e1      	b.n	8119d7a <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8119bb6:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8119bb8:	00db      	lsls	r3, r3, #3
 8119bba:	b29b      	uxth	r3, r3
 8119bbc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8119bc0:	4293      	cmp	r3, r2
 8119bc2:	bf28      	it	cs
 8119bc4:	4613      	movcs	r3, r2
 8119bc6:	857b      	strh	r3, [r7, #42]	@ 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8119bc8:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8119bcc:	2114      	movs	r1, #20
 8119bce:	200e      	movs	r0, #14
 8119bd0:	f001 f9a2 	bl	811af18 <pbuf_alloc>
 8119bd4:	6278      	str	r0, [r7, #36]	@ 0x24
    if (rambuf == NULL) {
 8119bd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8119bd8:	2b00      	cmp	r3, #0
 8119bda:	f000 80d5 	beq.w	8119d88 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8119bde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8119be0:	895b      	ldrh	r3, [r3, #10]
 8119be2:	2b13      	cmp	r3, #19
 8119be4:	d806      	bhi.n	8119bf4 <ip4_frag+0xd0>
 8119be6:	4b6c      	ldr	r3, [pc, #432]	@ (8119d98 <ip4_frag+0x274>)
 8119be8:	f44f 7249 	mov.w	r2, #804	@ 0x324
 8119bec:	496d      	ldr	r1, [pc, #436]	@ (8119da4 <ip4_frag+0x280>)
 8119bee:	486c      	ldr	r0, [pc, #432]	@ (8119da0 <ip4_frag+0x27c>)
 8119bf0:	f00a f814 	bl	8123c1c <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8119bf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8119bf6:	685b      	ldr	r3, [r3, #4]
 8119bf8:	2214      	movs	r2, #20
 8119bfa:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8119bfc:	4618      	mov	r0, r3
 8119bfe:	f00a fa9c 	bl	812413a <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8119c02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8119c04:	685b      	ldr	r3, [r3, #4]
 8119c06:	633b      	str	r3, [r7, #48]	@ 0x30

    left_to_copy = fragsize;
 8119c08:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8119c0a:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    while (left_to_copy) {
 8119c0e:	e064      	b.n	8119cda <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8119c10:	68fb      	ldr	r3, [r7, #12]
 8119c12:	895a      	ldrh	r2, [r3, #10]
 8119c14:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8119c16:	1ad3      	subs	r3, r2, r3
 8119c18:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8119c1a:	68fb      	ldr	r3, [r7, #12]
 8119c1c:	895b      	ldrh	r3, [r3, #10]
 8119c1e:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8119c20:	429a      	cmp	r2, r3
 8119c22:	d906      	bls.n	8119c32 <ip4_frag+0x10e>
 8119c24:	4b5c      	ldr	r3, [pc, #368]	@ (8119d98 <ip4_frag+0x274>)
 8119c26:	f240 322d 	movw	r2, #813	@ 0x32d
 8119c2a:	495f      	ldr	r1, [pc, #380]	@ (8119da8 <ip4_frag+0x284>)
 8119c2c:	485c      	ldr	r0, [pc, #368]	@ (8119da0 <ip4_frag+0x27c>)
 8119c2e:	f009 fff5 	bl	8123c1c <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8119c32:	8bfa      	ldrh	r2, [r7, #30]
 8119c34:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8119c38:	4293      	cmp	r3, r2
 8119c3a:	bf28      	it	cs
 8119c3c:	4613      	movcs	r3, r2
 8119c3e:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8119c42:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8119c46:	2b00      	cmp	r3, #0
 8119c48:	d105      	bne.n	8119c56 <ip4_frag+0x132>
        poff = 0;
 8119c4a:	2300      	movs	r3, #0
 8119c4c:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 8119c4e:	68fb      	ldr	r3, [r7, #12]
 8119c50:	681b      	ldr	r3, [r3, #0]
 8119c52:	60fb      	str	r3, [r7, #12]
        continue;
 8119c54:	e041      	b.n	8119cda <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8119c56:	f7ff ff0d 	bl	8119a74 <ip_frag_alloc_pbuf_custom_ref>
 8119c5a:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8119c5c:	69bb      	ldr	r3, [r7, #24]
 8119c5e:	2b00      	cmp	r3, #0
 8119c60:	d103      	bne.n	8119c6a <ip4_frag+0x146>
        pbuf_free(rambuf);
 8119c62:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8119c64:	f001 fc3a 	bl	811b4dc <pbuf_free>
        goto memerr;
 8119c68:	e08f      	b.n	8119d8a <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8119c6a:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8119c6c:	68fb      	ldr	r3, [r7, #12]
 8119c6e:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8119c70:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8119c72:	4413      	add	r3, r2
 8119c74:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 8119c78:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8119c7c:	9201      	str	r2, [sp, #4]
 8119c7e:	9300      	str	r3, [sp, #0]
 8119c80:	4603      	mov	r3, r0
 8119c82:	2241      	movs	r2, #65	@ 0x41
 8119c84:	2000      	movs	r0, #0
 8119c86:	f001 fa71 	bl	811b16c <pbuf_alloced_custom>
 8119c8a:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8119c8c:	697b      	ldr	r3, [r7, #20]
 8119c8e:	2b00      	cmp	r3, #0
 8119c90:	d106      	bne.n	8119ca0 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8119c92:	69b8      	ldr	r0, [r7, #24]
 8119c94:	f7ff fef6 	bl	8119a84 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8119c98:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8119c9a:	f001 fc1f 	bl	811b4dc <pbuf_free>
        goto memerr;
 8119c9e:	e074      	b.n	8119d8a <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8119ca0:	68f8      	ldr	r0, [r7, #12]
 8119ca2:	f001 fcc1 	bl	811b628 <pbuf_ref>
      pcr->original = p;
 8119ca6:	69bb      	ldr	r3, [r7, #24]
 8119ca8:	68fa      	ldr	r2, [r7, #12]
 8119caa:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8119cac:	69bb      	ldr	r3, [r7, #24]
 8119cae:	4a3f      	ldr	r2, [pc, #252]	@ (8119dac <ip4_frag+0x288>)
 8119cb0:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8119cb2:	6979      	ldr	r1, [r7, #20]
 8119cb4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8119cb6:	f001 fcdf 	bl	811b678 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8119cba:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 8119cbe:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8119cc2:	1ad3      	subs	r3, r2, r3
 8119cc4:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
      if (left_to_copy) {
 8119cc8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8119ccc:	2b00      	cmp	r3, #0
 8119cce:	d004      	beq.n	8119cda <ip4_frag+0x1b6>
        poff = 0;
 8119cd0:	2300      	movs	r3, #0
 8119cd2:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 8119cd4:	68fb      	ldr	r3, [r7, #12]
 8119cd6:	681b      	ldr	r3, [r3, #0]
 8119cd8:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8119cda:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8119cde:	2b00      	cmp	r3, #0
 8119ce0:	d196      	bne.n	8119c10 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8119ce2:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8119ce4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8119ce8:	4413      	add	r3, r2
 8119cea:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8119cec:	68bb      	ldr	r3, [r7, #8]
 8119cee:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8119cf0:	f1a3 0213 	sub.w	r2, r3, #19
 8119cf4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8119cf8:	429a      	cmp	r2, r3
 8119cfa:	bfcc      	ite	gt
 8119cfc:	2301      	movgt	r3, #1
 8119cfe:	2300      	movle	r3, #0
 8119d00:	b2db      	uxtb	r3, r3
 8119d02:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8119d04:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8119d08:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8119d0c:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    if (!last || mf_set) {
 8119d0e:	6a3b      	ldr	r3, [r7, #32]
 8119d10:	2b00      	cmp	r3, #0
 8119d12:	d002      	beq.n	8119d1a <ip4_frag+0x1f6>
 8119d14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8119d16:	2b00      	cmp	r3, #0
 8119d18:	d003      	beq.n	8119d22 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8119d1a:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8119d1c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8119d20:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8119d22:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8119d24:	4618      	mov	r0, r3
 8119d26:	f7fd f9d1 	bl	81170cc <lwip_htons>
 8119d2a:	4603      	mov	r3, r0
 8119d2c:	461a      	mov	r2, r3
 8119d2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8119d30:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8119d32:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8119d34:	3314      	adds	r3, #20
 8119d36:	b29b      	uxth	r3, r3
 8119d38:	4618      	mov	r0, r3
 8119d3a:	f7fd f9c7 	bl	81170cc <lwip_htons>
 8119d3e:	4603      	mov	r3, r0
 8119d40:	461a      	mov	r2, r3
 8119d42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8119d44:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8119d46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8119d48:	2200      	movs	r2, #0
 8119d4a:	729a      	strb	r2, [r3, #10]
 8119d4c:	2200      	movs	r2, #0
 8119d4e:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8119d50:	68bb      	ldr	r3, [r7, #8]
 8119d52:	695b      	ldr	r3, [r3, #20]
 8119d54:	687a      	ldr	r2, [r7, #4]
 8119d56:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8119d58:	68b8      	ldr	r0, [r7, #8]
 8119d5a:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8119d5c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8119d5e:	f001 fbbd 	bl	811b4dc <pbuf_free>
    left = (u16_t)(left - fragsize);
 8119d62:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8119d66:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8119d68:	1ad3      	subs	r3, r2, r3
 8119d6a:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    ofo = (u16_t)(ofo + nfb);
 8119d6e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 8119d72:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8119d74:	4413      	add	r3, r2
 8119d76:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  while (left) {
 8119d7a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8119d7e:	2b00      	cmp	r3, #0
 8119d80:	f47f af19 	bne.w	8119bb6 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8119d84:	2300      	movs	r3, #0
 8119d86:	e002      	b.n	8119d8e <ip4_frag+0x26a>
      goto memerr;
 8119d88:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8119d8a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8119d8e:	4618      	mov	r0, r3
 8119d90:	3748      	adds	r7, #72	@ 0x48
 8119d92:	46bd      	mov	sp, r7
 8119d94:	bd80      	pop	{r7, pc}
 8119d96:	bf00      	nop
 8119d98:	08125a88 	.word	0x08125a88
 8119d9c:	08125ca0 	.word	0x08125ca0
 8119da0:	08125b0c 	.word	0x08125b0c
 8119da4:	08125cbc 	.word	0x08125cbc
 8119da8:	08125cdc 	.word	0x08125cdc
 8119dac:	08119abd 	.word	0x08119abd

08119db0 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8119db0:	b480      	push	{r7}
 8119db2:	b083      	sub	sp, #12
 8119db4:	af00      	add	r7, sp, #0
 8119db6:	6078      	str	r0, [r7, #4]
  return (struct mem *)(void *)&ram[ptr];
 8119db8:	4b04      	ldr	r3, [pc, #16]	@ (8119dcc <ptr_to_mem+0x1c>)
 8119dba:	681a      	ldr	r2, [r3, #0]
 8119dbc:	687b      	ldr	r3, [r7, #4]
 8119dbe:	4413      	add	r3, r2
}
 8119dc0:	4618      	mov	r0, r3
 8119dc2:	370c      	adds	r7, #12
 8119dc4:	46bd      	mov	sp, r7
 8119dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8119dca:	4770      	bx	lr
 8119dcc:	1000b334 	.word	0x1000b334

08119dd0 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8119dd0:	b480      	push	{r7}
 8119dd2:	b083      	sub	sp, #12
 8119dd4:	af00      	add	r7, sp, #0
 8119dd6:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8119dd8:	4b04      	ldr	r3, [pc, #16]	@ (8119dec <mem_to_ptr+0x1c>)
 8119dda:	681b      	ldr	r3, [r3, #0]
 8119ddc:	687a      	ldr	r2, [r7, #4]
 8119dde:	1ad3      	subs	r3, r2, r3
}
 8119de0:	4618      	mov	r0, r3
 8119de2:	370c      	adds	r7, #12
 8119de4:	46bd      	mov	sp, r7
 8119de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8119dea:	4770      	bx	lr
 8119dec:	1000b334 	.word	0x1000b334

08119df0 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8119df0:	b590      	push	{r4, r7, lr}
 8119df2:	b085      	sub	sp, #20
 8119df4:	af00      	add	r7, sp, #0
 8119df6:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8119df8:	4b45      	ldr	r3, [pc, #276]	@ (8119f10 <plug_holes+0x120>)
 8119dfa:	681b      	ldr	r3, [r3, #0]
 8119dfc:	687a      	ldr	r2, [r7, #4]
 8119dfe:	429a      	cmp	r2, r3
 8119e00:	d206      	bcs.n	8119e10 <plug_holes+0x20>
 8119e02:	4b44      	ldr	r3, [pc, #272]	@ (8119f14 <plug_holes+0x124>)
 8119e04:	f240 12df 	movw	r2, #479	@ 0x1df
 8119e08:	4943      	ldr	r1, [pc, #268]	@ (8119f18 <plug_holes+0x128>)
 8119e0a:	4844      	ldr	r0, [pc, #272]	@ (8119f1c <plug_holes+0x12c>)
 8119e0c:	f009 ff06 	bl	8123c1c <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8119e10:	4b43      	ldr	r3, [pc, #268]	@ (8119f20 <plug_holes+0x130>)
 8119e12:	681b      	ldr	r3, [r3, #0]
 8119e14:	687a      	ldr	r2, [r7, #4]
 8119e16:	429a      	cmp	r2, r3
 8119e18:	d306      	bcc.n	8119e28 <plug_holes+0x38>
 8119e1a:	4b3e      	ldr	r3, [pc, #248]	@ (8119f14 <plug_holes+0x124>)
 8119e1c:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8119e20:	4940      	ldr	r1, [pc, #256]	@ (8119f24 <plug_holes+0x134>)
 8119e22:	483e      	ldr	r0, [pc, #248]	@ (8119f1c <plug_holes+0x12c>)
 8119e24:	f009 fefa 	bl	8123c1c <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8119e28:	687b      	ldr	r3, [r7, #4]
 8119e2a:	7a1b      	ldrb	r3, [r3, #8]
 8119e2c:	2b00      	cmp	r3, #0
 8119e2e:	d006      	beq.n	8119e3e <plug_holes+0x4e>
 8119e30:	4b38      	ldr	r3, [pc, #224]	@ (8119f14 <plug_holes+0x124>)
 8119e32:	f240 12e1 	movw	r2, #481	@ 0x1e1
 8119e36:	493c      	ldr	r1, [pc, #240]	@ (8119f28 <plug_holes+0x138>)
 8119e38:	4838      	ldr	r0, [pc, #224]	@ (8119f1c <plug_holes+0x12c>)
 8119e3a:	f009 feef 	bl	8123c1c <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8119e3e:	687b      	ldr	r3, [r7, #4]
 8119e40:	681b      	ldr	r3, [r3, #0]
 8119e42:	4a3a      	ldr	r2, [pc, #232]	@ (8119f2c <plug_holes+0x13c>)
 8119e44:	4293      	cmp	r3, r2
 8119e46:	d906      	bls.n	8119e56 <plug_holes+0x66>
 8119e48:	4b32      	ldr	r3, [pc, #200]	@ (8119f14 <plug_holes+0x124>)
 8119e4a:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 8119e4e:	4938      	ldr	r1, [pc, #224]	@ (8119f30 <plug_holes+0x140>)
 8119e50:	4832      	ldr	r0, [pc, #200]	@ (8119f1c <plug_holes+0x12c>)
 8119e52:	f009 fee3 	bl	8123c1c <iprintf>

  nmem = ptr_to_mem(mem->next);
 8119e56:	687b      	ldr	r3, [r7, #4]
 8119e58:	681b      	ldr	r3, [r3, #0]
 8119e5a:	4618      	mov	r0, r3
 8119e5c:	f7ff ffa8 	bl	8119db0 <ptr_to_mem>
 8119e60:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8119e62:	687a      	ldr	r2, [r7, #4]
 8119e64:	68fb      	ldr	r3, [r7, #12]
 8119e66:	429a      	cmp	r2, r3
 8119e68:	d024      	beq.n	8119eb4 <plug_holes+0xc4>
 8119e6a:	68fb      	ldr	r3, [r7, #12]
 8119e6c:	7a1b      	ldrb	r3, [r3, #8]
 8119e6e:	2b00      	cmp	r3, #0
 8119e70:	d120      	bne.n	8119eb4 <plug_holes+0xc4>
 8119e72:	4b2b      	ldr	r3, [pc, #172]	@ (8119f20 <plug_holes+0x130>)
 8119e74:	681b      	ldr	r3, [r3, #0]
 8119e76:	68fa      	ldr	r2, [r7, #12]
 8119e78:	429a      	cmp	r2, r3
 8119e7a:	d01b      	beq.n	8119eb4 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8119e7c:	4b2d      	ldr	r3, [pc, #180]	@ (8119f34 <plug_holes+0x144>)
 8119e7e:	681b      	ldr	r3, [r3, #0]
 8119e80:	68fa      	ldr	r2, [r7, #12]
 8119e82:	429a      	cmp	r2, r3
 8119e84:	d102      	bne.n	8119e8c <plug_holes+0x9c>
      lfree = mem;
 8119e86:	4a2b      	ldr	r2, [pc, #172]	@ (8119f34 <plug_holes+0x144>)
 8119e88:	687b      	ldr	r3, [r7, #4]
 8119e8a:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8119e8c:	68fb      	ldr	r3, [r7, #12]
 8119e8e:	681a      	ldr	r2, [r3, #0]
 8119e90:	687b      	ldr	r3, [r7, #4]
 8119e92:	601a      	str	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8119e94:	68fb      	ldr	r3, [r7, #12]
 8119e96:	681b      	ldr	r3, [r3, #0]
 8119e98:	4a24      	ldr	r2, [pc, #144]	@ (8119f2c <plug_holes+0x13c>)
 8119e9a:	4293      	cmp	r3, r2
 8119e9c:	d00a      	beq.n	8119eb4 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8119e9e:	68fb      	ldr	r3, [r7, #12]
 8119ea0:	681b      	ldr	r3, [r3, #0]
 8119ea2:	4618      	mov	r0, r3
 8119ea4:	f7ff ff84 	bl	8119db0 <ptr_to_mem>
 8119ea8:	4604      	mov	r4, r0
 8119eaa:	6878      	ldr	r0, [r7, #4]
 8119eac:	f7ff ff90 	bl	8119dd0 <mem_to_ptr>
 8119eb0:	4603      	mov	r3, r0
 8119eb2:	6063      	str	r3, [r4, #4]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8119eb4:	687b      	ldr	r3, [r7, #4]
 8119eb6:	685b      	ldr	r3, [r3, #4]
 8119eb8:	4618      	mov	r0, r3
 8119eba:	f7ff ff79 	bl	8119db0 <ptr_to_mem>
 8119ebe:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8119ec0:	68ba      	ldr	r2, [r7, #8]
 8119ec2:	687b      	ldr	r3, [r7, #4]
 8119ec4:	429a      	cmp	r2, r3
 8119ec6:	d01f      	beq.n	8119f08 <plug_holes+0x118>
 8119ec8:	68bb      	ldr	r3, [r7, #8]
 8119eca:	7a1b      	ldrb	r3, [r3, #8]
 8119ecc:	2b00      	cmp	r3, #0
 8119ece:	d11b      	bne.n	8119f08 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8119ed0:	4b18      	ldr	r3, [pc, #96]	@ (8119f34 <plug_holes+0x144>)
 8119ed2:	681b      	ldr	r3, [r3, #0]
 8119ed4:	687a      	ldr	r2, [r7, #4]
 8119ed6:	429a      	cmp	r2, r3
 8119ed8:	d102      	bne.n	8119ee0 <plug_holes+0xf0>
      lfree = pmem;
 8119eda:	4a16      	ldr	r2, [pc, #88]	@ (8119f34 <plug_holes+0x144>)
 8119edc:	68bb      	ldr	r3, [r7, #8]
 8119ede:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8119ee0:	687b      	ldr	r3, [r7, #4]
 8119ee2:	681a      	ldr	r2, [r3, #0]
 8119ee4:	68bb      	ldr	r3, [r7, #8]
 8119ee6:	601a      	str	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8119ee8:	687b      	ldr	r3, [r7, #4]
 8119eea:	681b      	ldr	r3, [r3, #0]
 8119eec:	4a0f      	ldr	r2, [pc, #60]	@ (8119f2c <plug_holes+0x13c>)
 8119eee:	4293      	cmp	r3, r2
 8119ef0:	d00a      	beq.n	8119f08 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8119ef2:	687b      	ldr	r3, [r7, #4]
 8119ef4:	681b      	ldr	r3, [r3, #0]
 8119ef6:	4618      	mov	r0, r3
 8119ef8:	f7ff ff5a 	bl	8119db0 <ptr_to_mem>
 8119efc:	4604      	mov	r4, r0
 8119efe:	68b8      	ldr	r0, [r7, #8]
 8119f00:	f7ff ff66 	bl	8119dd0 <mem_to_ptr>
 8119f04:	4603      	mov	r3, r0
 8119f06:	6063      	str	r3, [r4, #4]
    }
  }
}
 8119f08:	bf00      	nop
 8119f0a:	3714      	adds	r7, #20
 8119f0c:	46bd      	mov	sp, r7
 8119f0e:	bd90      	pop	{r4, r7, pc}
 8119f10:	1000b334 	.word	0x1000b334
 8119f14:	08125cec 	.word	0x08125cec
 8119f18:	08125d5c 	.word	0x08125d5c
 8119f1c:	08125d74 	.word	0x08125d74
 8119f20:	1000b338 	.word	0x1000b338
 8119f24:	08125d9c 	.word	0x08125d9c
 8119f28:	08125db8 	.word	0x08125db8
 8119f2c:	0001ffe8 	.word	0x0001ffe8
 8119f30:	08125dd4 	.word	0x08125dd4
 8119f34:	1000b340 	.word	0x1000b340

08119f38 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8119f38:	b580      	push	{r7, lr}
 8119f3a:	b082      	sub	sp, #8
 8119f3c:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8119f3e:	4b1b      	ldr	r3, [pc, #108]	@ (8119fac <mem_init+0x74>)
 8119f40:	4a1b      	ldr	r2, [pc, #108]	@ (8119fb0 <mem_init+0x78>)
 8119f42:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8119f44:	4b19      	ldr	r3, [pc, #100]	@ (8119fac <mem_init+0x74>)
 8119f46:	681b      	ldr	r3, [r3, #0]
 8119f48:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8119f4a:	687b      	ldr	r3, [r7, #4]
 8119f4c:	4a19      	ldr	r2, [pc, #100]	@ (8119fb4 <mem_init+0x7c>)
 8119f4e:	601a      	str	r2, [r3, #0]
  mem->prev = 0;
 8119f50:	687b      	ldr	r3, [r7, #4]
 8119f52:	2200      	movs	r2, #0
 8119f54:	605a      	str	r2, [r3, #4]
  mem->used = 0;
 8119f56:	687b      	ldr	r3, [r7, #4]
 8119f58:	2200      	movs	r2, #0
 8119f5a:	721a      	strb	r2, [r3, #8]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8119f5c:	4815      	ldr	r0, [pc, #84]	@ (8119fb4 <mem_init+0x7c>)
 8119f5e:	f7ff ff27 	bl	8119db0 <ptr_to_mem>
 8119f62:	4603      	mov	r3, r0
 8119f64:	4a14      	ldr	r2, [pc, #80]	@ (8119fb8 <mem_init+0x80>)
 8119f66:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8119f68:	4b13      	ldr	r3, [pc, #76]	@ (8119fb8 <mem_init+0x80>)
 8119f6a:	681b      	ldr	r3, [r3, #0]
 8119f6c:	2201      	movs	r2, #1
 8119f6e:	721a      	strb	r2, [r3, #8]
  ram_end->next = MEM_SIZE_ALIGNED;
 8119f70:	4b11      	ldr	r3, [pc, #68]	@ (8119fb8 <mem_init+0x80>)
 8119f72:	681b      	ldr	r3, [r3, #0]
 8119f74:	4a0f      	ldr	r2, [pc, #60]	@ (8119fb4 <mem_init+0x7c>)
 8119f76:	601a      	str	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8119f78:	4b0f      	ldr	r3, [pc, #60]	@ (8119fb8 <mem_init+0x80>)
 8119f7a:	681b      	ldr	r3, [r3, #0]
 8119f7c:	4a0d      	ldr	r2, [pc, #52]	@ (8119fb4 <mem_init+0x7c>)
 8119f7e:	605a      	str	r2, [r3, #4]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8119f80:	4b0a      	ldr	r3, [pc, #40]	@ (8119fac <mem_init+0x74>)
 8119f82:	681b      	ldr	r3, [r3, #0]
 8119f84:	4a0d      	ldr	r2, [pc, #52]	@ (8119fbc <mem_init+0x84>)
 8119f86:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 8119f88:	480d      	ldr	r0, [pc, #52]	@ (8119fc0 <mem_init+0x88>)
 8119f8a:	f001 fdd3 	bl	811bb34 <sys_mutex_new>
 8119f8e:	4603      	mov	r3, r0
 8119f90:	2b00      	cmp	r3, #0
 8119f92:	d006      	beq.n	8119fa2 <mem_init+0x6a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 8119f94:	4b0b      	ldr	r3, [pc, #44]	@ (8119fc4 <mem_init+0x8c>)
 8119f96:	f240 221f 	movw	r2, #543	@ 0x21f
 8119f9a:	490b      	ldr	r1, [pc, #44]	@ (8119fc8 <mem_init+0x90>)
 8119f9c:	480b      	ldr	r0, [pc, #44]	@ (8119fcc <mem_init+0x94>)
 8119f9e:	f009 fe3d 	bl	8123c1c <iprintf>
  }
}
 8119fa2:	bf00      	nop
 8119fa4:	3708      	adds	r7, #8
 8119fa6:	46bd      	mov	sp, r7
 8119fa8:	bd80      	pop	{r7, pc}
 8119faa:	bf00      	nop
 8119fac:	1000b334 	.word	0x1000b334
 8119fb0:	10020000 	.word	0x10020000
 8119fb4:	0001ffe8 	.word	0x0001ffe8
 8119fb8:	1000b338 	.word	0x1000b338
 8119fbc:	1000b340 	.word	0x1000b340
 8119fc0:	1000b33c 	.word	0x1000b33c
 8119fc4:	08125cec 	.word	0x08125cec
 8119fc8:	08125e00 	.word	0x08125e00
 8119fcc:	08125d74 	.word	0x08125d74

08119fd0 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8119fd0:	b580      	push	{r7, lr}
 8119fd2:	b086      	sub	sp, #24
 8119fd4:	af00      	add	r7, sp, #0
 8119fd6:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8119fd8:	6878      	ldr	r0, [r7, #4]
 8119fda:	f7ff fef9 	bl	8119dd0 <mem_to_ptr>
 8119fde:	6178      	str	r0, [r7, #20]
  nmem = ptr_to_mem(mem->next);
 8119fe0:	687b      	ldr	r3, [r7, #4]
 8119fe2:	681b      	ldr	r3, [r3, #0]
 8119fe4:	4618      	mov	r0, r3
 8119fe6:	f7ff fee3 	bl	8119db0 <ptr_to_mem>
 8119fea:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8119fec:	687b      	ldr	r3, [r7, #4]
 8119fee:	685b      	ldr	r3, [r3, #4]
 8119ff0:	4618      	mov	r0, r3
 8119ff2:	f7ff fedd 	bl	8119db0 <ptr_to_mem>
 8119ff6:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8119ff8:	687b      	ldr	r3, [r7, #4]
 8119ffa:	681b      	ldr	r3, [r3, #0]
 8119ffc:	4a11      	ldr	r2, [pc, #68]	@ (811a044 <mem_link_valid+0x74>)
 8119ffe:	4293      	cmp	r3, r2
 811a000:	d818      	bhi.n	811a034 <mem_link_valid+0x64>
 811a002:	687b      	ldr	r3, [r7, #4]
 811a004:	685b      	ldr	r3, [r3, #4]
 811a006:	4a0f      	ldr	r2, [pc, #60]	@ (811a044 <mem_link_valid+0x74>)
 811a008:	4293      	cmp	r3, r2
 811a00a:	d813      	bhi.n	811a034 <mem_link_valid+0x64>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 811a00c:	687b      	ldr	r3, [r7, #4]
 811a00e:	685b      	ldr	r3, [r3, #4]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 811a010:	697a      	ldr	r2, [r7, #20]
 811a012:	429a      	cmp	r2, r3
 811a014:	d004      	beq.n	811a020 <mem_link_valid+0x50>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 811a016:	68fb      	ldr	r3, [r7, #12]
 811a018:	681b      	ldr	r3, [r3, #0]
 811a01a:	697a      	ldr	r2, [r7, #20]
 811a01c:	429a      	cmp	r2, r3
 811a01e:	d109      	bne.n	811a034 <mem_link_valid+0x64>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 811a020:	4b09      	ldr	r3, [pc, #36]	@ (811a048 <mem_link_valid+0x78>)
 811a022:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 811a024:	693a      	ldr	r2, [r7, #16]
 811a026:	429a      	cmp	r2, r3
 811a028:	d006      	beq.n	811a038 <mem_link_valid+0x68>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 811a02a:	693b      	ldr	r3, [r7, #16]
 811a02c:	685b      	ldr	r3, [r3, #4]
 811a02e:	697a      	ldr	r2, [r7, #20]
 811a030:	429a      	cmp	r2, r3
 811a032:	d001      	beq.n	811a038 <mem_link_valid+0x68>
    return 0;
 811a034:	2300      	movs	r3, #0
 811a036:	e000      	b.n	811a03a <mem_link_valid+0x6a>
  }
  return 1;
 811a038:	2301      	movs	r3, #1
}
 811a03a:	4618      	mov	r0, r3
 811a03c:	3718      	adds	r7, #24
 811a03e:	46bd      	mov	sp, r7
 811a040:	bd80      	pop	{r7, pc}
 811a042:	bf00      	nop
 811a044:	0001ffe8 	.word	0x0001ffe8
 811a048:	1000b338 	.word	0x1000b338

0811a04c <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 811a04c:	b580      	push	{r7, lr}
 811a04e:	b088      	sub	sp, #32
 811a050:	af00      	add	r7, sp, #0
 811a052:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 811a054:	687b      	ldr	r3, [r7, #4]
 811a056:	2b00      	cmp	r3, #0
 811a058:	d070      	beq.n	811a13c <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 811a05a:	687b      	ldr	r3, [r7, #4]
 811a05c:	f003 0303 	and.w	r3, r3, #3
 811a060:	2b00      	cmp	r3, #0
 811a062:	d00d      	beq.n	811a080 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 811a064:	4b37      	ldr	r3, [pc, #220]	@ (811a144 <mem_free+0xf8>)
 811a066:	f240 2273 	movw	r2, #627	@ 0x273
 811a06a:	4937      	ldr	r1, [pc, #220]	@ (811a148 <mem_free+0xfc>)
 811a06c:	4837      	ldr	r0, [pc, #220]	@ (811a14c <mem_free+0x100>)
 811a06e:	f009 fdd5 	bl	8123c1c <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 811a072:	f001 fdb1 	bl	811bbd8 <sys_arch_protect>
 811a076:	60f8      	str	r0, [r7, #12]
 811a078:	68f8      	ldr	r0, [r7, #12]
 811a07a:	f001 fdbb 	bl	811bbf4 <sys_arch_unprotect>
    return;
 811a07e:	e05e      	b.n	811a13e <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 811a080:	687b      	ldr	r3, [r7, #4]
 811a082:	3b0c      	subs	r3, #12
 811a084:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 811a086:	4b32      	ldr	r3, [pc, #200]	@ (811a150 <mem_free+0x104>)
 811a088:	681b      	ldr	r3, [r3, #0]
 811a08a:	69fa      	ldr	r2, [r7, #28]
 811a08c:	429a      	cmp	r2, r3
 811a08e:	d306      	bcc.n	811a09e <mem_free+0x52>
 811a090:	687b      	ldr	r3, [r7, #4]
 811a092:	f103 020c 	add.w	r2, r3, #12
 811a096:	4b2f      	ldr	r3, [pc, #188]	@ (811a154 <mem_free+0x108>)
 811a098:	681b      	ldr	r3, [r3, #0]
 811a09a:	429a      	cmp	r2, r3
 811a09c:	d90d      	bls.n	811a0ba <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 811a09e:	4b29      	ldr	r3, [pc, #164]	@ (811a144 <mem_free+0xf8>)
 811a0a0:	f240 227f 	movw	r2, #639	@ 0x27f
 811a0a4:	492c      	ldr	r1, [pc, #176]	@ (811a158 <mem_free+0x10c>)
 811a0a6:	4829      	ldr	r0, [pc, #164]	@ (811a14c <mem_free+0x100>)
 811a0a8:	f009 fdb8 	bl	8123c1c <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 811a0ac:	f001 fd94 	bl	811bbd8 <sys_arch_protect>
 811a0b0:	6138      	str	r0, [r7, #16]
 811a0b2:	6938      	ldr	r0, [r7, #16]
 811a0b4:	f001 fd9e 	bl	811bbf4 <sys_arch_unprotect>
    return;
 811a0b8:	e041      	b.n	811a13e <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 811a0ba:	4828      	ldr	r0, [pc, #160]	@ (811a15c <mem_free+0x110>)
 811a0bc:	f001 fd50 	bl	811bb60 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 811a0c0:	69fb      	ldr	r3, [r7, #28]
 811a0c2:	7a1b      	ldrb	r3, [r3, #8]
 811a0c4:	2b00      	cmp	r3, #0
 811a0c6:	d110      	bne.n	811a0ea <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 811a0c8:	4b1e      	ldr	r3, [pc, #120]	@ (811a144 <mem_free+0xf8>)
 811a0ca:	f44f 7223 	mov.w	r2, #652	@ 0x28c
 811a0ce:	4924      	ldr	r1, [pc, #144]	@ (811a160 <mem_free+0x114>)
 811a0d0:	481e      	ldr	r0, [pc, #120]	@ (811a14c <mem_free+0x100>)
 811a0d2:	f009 fda3 	bl	8123c1c <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 811a0d6:	4821      	ldr	r0, [pc, #132]	@ (811a15c <mem_free+0x110>)
 811a0d8:	f001 fd51 	bl	811bb7e <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 811a0dc:	f001 fd7c 	bl	811bbd8 <sys_arch_protect>
 811a0e0:	6178      	str	r0, [r7, #20]
 811a0e2:	6978      	ldr	r0, [r7, #20]
 811a0e4:	f001 fd86 	bl	811bbf4 <sys_arch_unprotect>
    return;
 811a0e8:	e029      	b.n	811a13e <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 811a0ea:	69f8      	ldr	r0, [r7, #28]
 811a0ec:	f7ff ff70 	bl	8119fd0 <mem_link_valid>
 811a0f0:	4603      	mov	r3, r0
 811a0f2:	2b00      	cmp	r3, #0
 811a0f4:	d110      	bne.n	811a118 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 811a0f6:	4b13      	ldr	r3, [pc, #76]	@ (811a144 <mem_free+0xf8>)
 811a0f8:	f240 2295 	movw	r2, #661	@ 0x295
 811a0fc:	4919      	ldr	r1, [pc, #100]	@ (811a164 <mem_free+0x118>)
 811a0fe:	4813      	ldr	r0, [pc, #76]	@ (811a14c <mem_free+0x100>)
 811a100:	f009 fd8c 	bl	8123c1c <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 811a104:	4815      	ldr	r0, [pc, #84]	@ (811a15c <mem_free+0x110>)
 811a106:	f001 fd3a 	bl	811bb7e <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 811a10a:	f001 fd65 	bl	811bbd8 <sys_arch_protect>
 811a10e:	61b8      	str	r0, [r7, #24]
 811a110:	69b8      	ldr	r0, [r7, #24]
 811a112:	f001 fd6f 	bl	811bbf4 <sys_arch_unprotect>
    return;
 811a116:	e012      	b.n	811a13e <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 811a118:	69fb      	ldr	r3, [r7, #28]
 811a11a:	2200      	movs	r2, #0
 811a11c:	721a      	strb	r2, [r3, #8]

  if (mem < lfree) {
 811a11e:	4b12      	ldr	r3, [pc, #72]	@ (811a168 <mem_free+0x11c>)
 811a120:	681b      	ldr	r3, [r3, #0]
 811a122:	69fa      	ldr	r2, [r7, #28]
 811a124:	429a      	cmp	r2, r3
 811a126:	d202      	bcs.n	811a12e <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 811a128:	4a0f      	ldr	r2, [pc, #60]	@ (811a168 <mem_free+0x11c>)
 811a12a:	69fb      	ldr	r3, [r7, #28]
 811a12c:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 811a12e:	69f8      	ldr	r0, [r7, #28]
 811a130:	f7ff fe5e 	bl	8119df0 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 811a134:	4809      	ldr	r0, [pc, #36]	@ (811a15c <mem_free+0x110>)
 811a136:	f001 fd22 	bl	811bb7e <sys_mutex_unlock>
 811a13a:	e000      	b.n	811a13e <mem_free+0xf2>
    return;
 811a13c:	bf00      	nop
}
 811a13e:	3720      	adds	r7, #32
 811a140:	46bd      	mov	sp, r7
 811a142:	bd80      	pop	{r7, pc}
 811a144:	08125cec 	.word	0x08125cec
 811a148:	08125e1c 	.word	0x08125e1c
 811a14c:	08125d74 	.word	0x08125d74
 811a150:	1000b334 	.word	0x1000b334
 811a154:	1000b338 	.word	0x1000b338
 811a158:	08125e40 	.word	0x08125e40
 811a15c:	1000b33c 	.word	0x1000b33c
 811a160:	08125e5c 	.word	0x08125e5c
 811a164:	08125e84 	.word	0x08125e84
 811a168:	1000b340 	.word	0x1000b340

0811a16c <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 811a16c:	b580      	push	{r7, lr}
 811a16e:	b08a      	sub	sp, #40	@ 0x28
 811a170:	af00      	add	r7, sp, #0
 811a172:	6078      	str	r0, [r7, #4]
 811a174:	6039      	str	r1, [r7, #0]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 811a176:	683b      	ldr	r3, [r7, #0]
 811a178:	3303      	adds	r3, #3
 811a17a:	f023 0303 	bic.w	r3, r3, #3
 811a17e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (newsize < MIN_SIZE_ALIGNED) {
 811a180:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811a182:	2b0b      	cmp	r3, #11
 811a184:	d801      	bhi.n	811a18a <mem_trim+0x1e>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 811a186:	230c      	movs	r3, #12
 811a188:	627b      	str	r3, [r7, #36]	@ 0x24
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 811a18a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811a18c:	4a6e      	ldr	r2, [pc, #440]	@ (811a348 <mem_trim+0x1dc>)
 811a18e:	4293      	cmp	r3, r2
 811a190:	d803      	bhi.n	811a19a <mem_trim+0x2e>
 811a192:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 811a194:	683b      	ldr	r3, [r7, #0]
 811a196:	429a      	cmp	r2, r3
 811a198:	d201      	bcs.n	811a19e <mem_trim+0x32>
    return NULL;
 811a19a:	2300      	movs	r3, #0
 811a19c:	e0d0      	b.n	811a340 <mem_trim+0x1d4>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 811a19e:	4b6b      	ldr	r3, [pc, #428]	@ (811a34c <mem_trim+0x1e0>)
 811a1a0:	681b      	ldr	r3, [r3, #0]
 811a1a2:	687a      	ldr	r2, [r7, #4]
 811a1a4:	429a      	cmp	r2, r3
 811a1a6:	d304      	bcc.n	811a1b2 <mem_trim+0x46>
 811a1a8:	4b69      	ldr	r3, [pc, #420]	@ (811a350 <mem_trim+0x1e4>)
 811a1aa:	681b      	ldr	r3, [r3, #0]
 811a1ac:	687a      	ldr	r2, [r7, #4]
 811a1ae:	429a      	cmp	r2, r3
 811a1b0:	d306      	bcc.n	811a1c0 <mem_trim+0x54>
 811a1b2:	4b68      	ldr	r3, [pc, #416]	@ (811a354 <mem_trim+0x1e8>)
 811a1b4:	f240 22d1 	movw	r2, #721	@ 0x2d1
 811a1b8:	4967      	ldr	r1, [pc, #412]	@ (811a358 <mem_trim+0x1ec>)
 811a1ba:	4868      	ldr	r0, [pc, #416]	@ (811a35c <mem_trim+0x1f0>)
 811a1bc:	f009 fd2e 	bl	8123c1c <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 811a1c0:	4b62      	ldr	r3, [pc, #392]	@ (811a34c <mem_trim+0x1e0>)
 811a1c2:	681b      	ldr	r3, [r3, #0]
 811a1c4:	687a      	ldr	r2, [r7, #4]
 811a1c6:	429a      	cmp	r2, r3
 811a1c8:	d304      	bcc.n	811a1d4 <mem_trim+0x68>
 811a1ca:	4b61      	ldr	r3, [pc, #388]	@ (811a350 <mem_trim+0x1e4>)
 811a1cc:	681b      	ldr	r3, [r3, #0]
 811a1ce:	687a      	ldr	r2, [r7, #4]
 811a1d0:	429a      	cmp	r2, r3
 811a1d2:	d307      	bcc.n	811a1e4 <mem_trim+0x78>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 811a1d4:	f001 fd00 	bl	811bbd8 <sys_arch_protect>
 811a1d8:	60b8      	str	r0, [r7, #8]
 811a1da:	68b8      	ldr	r0, [r7, #8]
 811a1dc:	f001 fd0a 	bl	811bbf4 <sys_arch_unprotect>
    return rmem;
 811a1e0:	687b      	ldr	r3, [r7, #4]
 811a1e2:	e0ad      	b.n	811a340 <mem_trim+0x1d4>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 811a1e4:	687b      	ldr	r3, [r7, #4]
 811a1e6:	3b0c      	subs	r3, #12
 811a1e8:	623b      	str	r3, [r7, #32]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 811a1ea:	6a38      	ldr	r0, [r7, #32]
 811a1ec:	f7ff fdf0 	bl	8119dd0 <mem_to_ptr>
 811a1f0:	61f8      	str	r0, [r7, #28]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 811a1f2:	6a3b      	ldr	r3, [r7, #32]
 811a1f4:	681a      	ldr	r2, [r3, #0]
 811a1f6:	69fb      	ldr	r3, [r7, #28]
 811a1f8:	1ad3      	subs	r3, r2, r3
 811a1fa:	3b0c      	subs	r3, #12
 811a1fc:	61bb      	str	r3, [r7, #24]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 811a1fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 811a200:	69bb      	ldr	r3, [r7, #24]
 811a202:	429a      	cmp	r2, r3
 811a204:	d906      	bls.n	811a214 <mem_trim+0xa8>
 811a206:	4b53      	ldr	r3, [pc, #332]	@ (811a354 <mem_trim+0x1e8>)
 811a208:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 811a20c:	4954      	ldr	r1, [pc, #336]	@ (811a360 <mem_trim+0x1f4>)
 811a20e:	4853      	ldr	r0, [pc, #332]	@ (811a35c <mem_trim+0x1f0>)
 811a210:	f009 fd04 	bl	8123c1c <iprintf>
  if (newsize > size) {
 811a214:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 811a216:	69bb      	ldr	r3, [r7, #24]
 811a218:	429a      	cmp	r2, r3
 811a21a:	d901      	bls.n	811a220 <mem_trim+0xb4>
    /* not supported */
    return NULL;
 811a21c:	2300      	movs	r3, #0
 811a21e:	e08f      	b.n	811a340 <mem_trim+0x1d4>
  }
  if (newsize == size) {
 811a220:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 811a222:	69bb      	ldr	r3, [r7, #24]
 811a224:	429a      	cmp	r2, r3
 811a226:	d101      	bne.n	811a22c <mem_trim+0xc0>
    /* No change in size, simply return */
    return rmem;
 811a228:	687b      	ldr	r3, [r7, #4]
 811a22a:	e089      	b.n	811a340 <mem_trim+0x1d4>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 811a22c:	484d      	ldr	r0, [pc, #308]	@ (811a364 <mem_trim+0x1f8>)
 811a22e:	f001 fc97 	bl	811bb60 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 811a232:	6a3b      	ldr	r3, [r7, #32]
 811a234:	681b      	ldr	r3, [r3, #0]
 811a236:	4618      	mov	r0, r3
 811a238:	f7ff fdba 	bl	8119db0 <ptr_to_mem>
 811a23c:	6178      	str	r0, [r7, #20]
  if (mem2->used == 0) {
 811a23e:	697b      	ldr	r3, [r7, #20]
 811a240:	7a1b      	ldrb	r3, [r3, #8]
 811a242:	2b00      	cmp	r3, #0
 811a244:	d13c      	bne.n	811a2c0 <mem_trim+0x154>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 811a246:	6a3b      	ldr	r3, [r7, #32]
 811a248:	681b      	ldr	r3, [r3, #0]
 811a24a:	4a3f      	ldr	r2, [pc, #252]	@ (811a348 <mem_trim+0x1dc>)
 811a24c:	4293      	cmp	r3, r2
 811a24e:	d106      	bne.n	811a25e <mem_trim+0xf2>
 811a250:	4b40      	ldr	r3, [pc, #256]	@ (811a354 <mem_trim+0x1e8>)
 811a252:	f240 22f5 	movw	r2, #757	@ 0x2f5
 811a256:	4944      	ldr	r1, [pc, #272]	@ (811a368 <mem_trim+0x1fc>)
 811a258:	4840      	ldr	r0, [pc, #256]	@ (811a35c <mem_trim+0x1f0>)
 811a25a:	f009 fcdf 	bl	8123c1c <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 811a25e:	697b      	ldr	r3, [r7, #20]
 811a260:	681b      	ldr	r3, [r3, #0]
 811a262:	60fb      	str	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 811a264:	69fa      	ldr	r2, [r7, #28]
 811a266:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811a268:	4413      	add	r3, r2
 811a26a:	330c      	adds	r3, #12
 811a26c:	613b      	str	r3, [r7, #16]
    if (lfree == mem2) {
 811a26e:	4b3f      	ldr	r3, [pc, #252]	@ (811a36c <mem_trim+0x200>)
 811a270:	681b      	ldr	r3, [r3, #0]
 811a272:	697a      	ldr	r2, [r7, #20]
 811a274:	429a      	cmp	r2, r3
 811a276:	d105      	bne.n	811a284 <mem_trim+0x118>
      lfree = ptr_to_mem(ptr2);
 811a278:	6938      	ldr	r0, [r7, #16]
 811a27a:	f7ff fd99 	bl	8119db0 <ptr_to_mem>
 811a27e:	4603      	mov	r3, r0
 811a280:	4a3a      	ldr	r2, [pc, #232]	@ (811a36c <mem_trim+0x200>)
 811a282:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 811a284:	6938      	ldr	r0, [r7, #16]
 811a286:	f7ff fd93 	bl	8119db0 <ptr_to_mem>
 811a28a:	6178      	str	r0, [r7, #20]
    mem2->used = 0;
 811a28c:	697b      	ldr	r3, [r7, #20]
 811a28e:	2200      	movs	r2, #0
 811a290:	721a      	strb	r2, [r3, #8]
    /* restore the next pointer */
    mem2->next = next;
 811a292:	697b      	ldr	r3, [r7, #20]
 811a294:	68fa      	ldr	r2, [r7, #12]
 811a296:	601a      	str	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 811a298:	697b      	ldr	r3, [r7, #20]
 811a29a:	69fa      	ldr	r2, [r7, #28]
 811a29c:	605a      	str	r2, [r3, #4]
    /* link mem to it */
    mem->next = ptr2;
 811a29e:	6a3b      	ldr	r3, [r7, #32]
 811a2a0:	693a      	ldr	r2, [r7, #16]
 811a2a2:	601a      	str	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 811a2a4:	697b      	ldr	r3, [r7, #20]
 811a2a6:	681b      	ldr	r3, [r3, #0]
 811a2a8:	4a27      	ldr	r2, [pc, #156]	@ (811a348 <mem_trim+0x1dc>)
 811a2aa:	4293      	cmp	r3, r2
 811a2ac:	d044      	beq.n	811a338 <mem_trim+0x1cc>
      ptr_to_mem(mem2->next)->prev = ptr2;
 811a2ae:	697b      	ldr	r3, [r7, #20]
 811a2b0:	681b      	ldr	r3, [r3, #0]
 811a2b2:	4618      	mov	r0, r3
 811a2b4:	f7ff fd7c 	bl	8119db0 <ptr_to_mem>
 811a2b8:	4602      	mov	r2, r0
 811a2ba:	693b      	ldr	r3, [r7, #16]
 811a2bc:	6053      	str	r3, [r2, #4]
 811a2be:	e03b      	b.n	811a338 <mem_trim+0x1cc>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 811a2c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811a2c2:	3318      	adds	r3, #24
 811a2c4:	69ba      	ldr	r2, [r7, #24]
 811a2c6:	429a      	cmp	r2, r3
 811a2c8:	d336      	bcc.n	811a338 <mem_trim+0x1cc>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 811a2ca:	69fa      	ldr	r2, [r7, #28]
 811a2cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811a2ce:	4413      	add	r3, r2
 811a2d0:	330c      	adds	r3, #12
 811a2d2:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 811a2d4:	6a3b      	ldr	r3, [r7, #32]
 811a2d6:	681b      	ldr	r3, [r3, #0]
 811a2d8:	4a1b      	ldr	r2, [pc, #108]	@ (811a348 <mem_trim+0x1dc>)
 811a2da:	4293      	cmp	r3, r2
 811a2dc:	d106      	bne.n	811a2ec <mem_trim+0x180>
 811a2de:	4b1d      	ldr	r3, [pc, #116]	@ (811a354 <mem_trim+0x1e8>)
 811a2e0:	f240 3216 	movw	r2, #790	@ 0x316
 811a2e4:	4920      	ldr	r1, [pc, #128]	@ (811a368 <mem_trim+0x1fc>)
 811a2e6:	481d      	ldr	r0, [pc, #116]	@ (811a35c <mem_trim+0x1f0>)
 811a2e8:	f009 fc98 	bl	8123c1c <iprintf>
    mem2 = ptr_to_mem(ptr2);
 811a2ec:	6938      	ldr	r0, [r7, #16]
 811a2ee:	f7ff fd5f 	bl	8119db0 <ptr_to_mem>
 811a2f2:	6178      	str	r0, [r7, #20]
    if (mem2 < lfree) {
 811a2f4:	4b1d      	ldr	r3, [pc, #116]	@ (811a36c <mem_trim+0x200>)
 811a2f6:	681b      	ldr	r3, [r3, #0]
 811a2f8:	697a      	ldr	r2, [r7, #20]
 811a2fa:	429a      	cmp	r2, r3
 811a2fc:	d202      	bcs.n	811a304 <mem_trim+0x198>
      lfree = mem2;
 811a2fe:	4a1b      	ldr	r2, [pc, #108]	@ (811a36c <mem_trim+0x200>)
 811a300:	697b      	ldr	r3, [r7, #20]
 811a302:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 811a304:	697b      	ldr	r3, [r7, #20]
 811a306:	2200      	movs	r2, #0
 811a308:	721a      	strb	r2, [r3, #8]
    mem2->next = mem->next;
 811a30a:	6a3b      	ldr	r3, [r7, #32]
 811a30c:	681a      	ldr	r2, [r3, #0]
 811a30e:	697b      	ldr	r3, [r7, #20]
 811a310:	601a      	str	r2, [r3, #0]
    mem2->prev = ptr;
 811a312:	697b      	ldr	r3, [r7, #20]
 811a314:	69fa      	ldr	r2, [r7, #28]
 811a316:	605a      	str	r2, [r3, #4]
    mem->next = ptr2;
 811a318:	6a3b      	ldr	r3, [r7, #32]
 811a31a:	693a      	ldr	r2, [r7, #16]
 811a31c:	601a      	str	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 811a31e:	697b      	ldr	r3, [r7, #20]
 811a320:	681b      	ldr	r3, [r3, #0]
 811a322:	4a09      	ldr	r2, [pc, #36]	@ (811a348 <mem_trim+0x1dc>)
 811a324:	4293      	cmp	r3, r2
 811a326:	d007      	beq.n	811a338 <mem_trim+0x1cc>
      ptr_to_mem(mem2->next)->prev = ptr2;
 811a328:	697b      	ldr	r3, [r7, #20]
 811a32a:	681b      	ldr	r3, [r3, #0]
 811a32c:	4618      	mov	r0, r3
 811a32e:	f7ff fd3f 	bl	8119db0 <ptr_to_mem>
 811a332:	4602      	mov	r2, r0
 811a334:	693b      	ldr	r3, [r7, #16]
 811a336:	6053      	str	r3, [r2, #4]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 811a338:	480a      	ldr	r0, [pc, #40]	@ (811a364 <mem_trim+0x1f8>)
 811a33a:	f001 fc20 	bl	811bb7e <sys_mutex_unlock>
  return rmem;
 811a33e:	687b      	ldr	r3, [r7, #4]
}
 811a340:	4618      	mov	r0, r3
 811a342:	3728      	adds	r7, #40	@ 0x28
 811a344:	46bd      	mov	sp, r7
 811a346:	bd80      	pop	{r7, pc}
 811a348:	0001ffe8 	.word	0x0001ffe8
 811a34c:	1000b334 	.word	0x1000b334
 811a350:	1000b338 	.word	0x1000b338
 811a354:	08125cec 	.word	0x08125cec
 811a358:	08125eb8 	.word	0x08125eb8
 811a35c:	08125d74 	.word	0x08125d74
 811a360:	08125ed0 	.word	0x08125ed0
 811a364:	1000b33c 	.word	0x1000b33c
 811a368:	08125ef0 	.word	0x08125ef0
 811a36c:	1000b340 	.word	0x1000b340

0811a370 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 811a370:	b580      	push	{r7, lr}
 811a372:	b088      	sub	sp, #32
 811a374:	af00      	add	r7, sp, #0
 811a376:	6078      	str	r0, [r7, #4]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 811a378:	687b      	ldr	r3, [r7, #4]
 811a37a:	2b00      	cmp	r3, #0
 811a37c:	d101      	bne.n	811a382 <mem_malloc+0x12>
    return NULL;
 811a37e:	2300      	movs	r3, #0
 811a380:	e0db      	b.n	811a53a <mem_malloc+0x1ca>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 811a382:	687b      	ldr	r3, [r7, #4]
 811a384:	3303      	adds	r3, #3
 811a386:	f023 0303 	bic.w	r3, r3, #3
 811a38a:	61bb      	str	r3, [r7, #24]
  if (size < MIN_SIZE_ALIGNED) {
 811a38c:	69bb      	ldr	r3, [r7, #24]
 811a38e:	2b0b      	cmp	r3, #11
 811a390:	d801      	bhi.n	811a396 <mem_malloc+0x26>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 811a392:	230c      	movs	r3, #12
 811a394:	61bb      	str	r3, [r7, #24]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 811a396:	69bb      	ldr	r3, [r7, #24]
 811a398:	4a6a      	ldr	r2, [pc, #424]	@ (811a544 <mem_malloc+0x1d4>)
 811a39a:	4293      	cmp	r3, r2
 811a39c:	d803      	bhi.n	811a3a6 <mem_malloc+0x36>
 811a39e:	69ba      	ldr	r2, [r7, #24]
 811a3a0:	687b      	ldr	r3, [r7, #4]
 811a3a2:	429a      	cmp	r2, r3
 811a3a4:	d201      	bcs.n	811a3aa <mem_malloc+0x3a>
    return NULL;
 811a3a6:	2300      	movs	r3, #0
 811a3a8:	e0c7      	b.n	811a53a <mem_malloc+0x1ca>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 811a3aa:	4867      	ldr	r0, [pc, #412]	@ (811a548 <mem_malloc+0x1d8>)
 811a3ac:	f001 fbd8 	bl	811bb60 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 811a3b0:	4b66      	ldr	r3, [pc, #408]	@ (811a54c <mem_malloc+0x1dc>)
 811a3b2:	681b      	ldr	r3, [r3, #0]
 811a3b4:	4618      	mov	r0, r3
 811a3b6:	f7ff fd0b 	bl	8119dd0 <mem_to_ptr>
 811a3ba:	61f8      	str	r0, [r7, #28]
 811a3bc:	e0b0      	b.n	811a520 <mem_malloc+0x1b0>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 811a3be:	69f8      	ldr	r0, [r7, #28]
 811a3c0:	f7ff fcf6 	bl	8119db0 <ptr_to_mem>
 811a3c4:	6138      	str	r0, [r7, #16]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 811a3c6:	693b      	ldr	r3, [r7, #16]
 811a3c8:	7a1b      	ldrb	r3, [r3, #8]
 811a3ca:	2b00      	cmp	r3, #0
 811a3cc:	f040 80a2 	bne.w	811a514 <mem_malloc+0x1a4>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 811a3d0:	693b      	ldr	r3, [r7, #16]
 811a3d2:	681a      	ldr	r2, [r3, #0]
 811a3d4:	69fb      	ldr	r3, [r7, #28]
 811a3d6:	1ad3      	subs	r3, r2, r3
 811a3d8:	3b0c      	subs	r3, #12
      if ((!mem->used) &&
 811a3da:	69ba      	ldr	r2, [r7, #24]
 811a3dc:	429a      	cmp	r2, r3
 811a3de:	f200 8099 	bhi.w	811a514 <mem_malloc+0x1a4>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 811a3e2:	693b      	ldr	r3, [r7, #16]
 811a3e4:	681a      	ldr	r2, [r3, #0]
 811a3e6:	69fb      	ldr	r3, [r7, #28]
 811a3e8:	1ad3      	subs	r3, r2, r3
 811a3ea:	f1a3 020c 	sub.w	r2, r3, #12
 811a3ee:	69bb      	ldr	r3, [r7, #24]
 811a3f0:	3318      	adds	r3, #24
 811a3f2:	429a      	cmp	r2, r3
 811a3f4:	d331      	bcc.n	811a45a <mem_malloc+0xea>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 811a3f6:	69fa      	ldr	r2, [r7, #28]
 811a3f8:	69bb      	ldr	r3, [r7, #24]
 811a3fa:	4413      	add	r3, r2
 811a3fc:	330c      	adds	r3, #12
 811a3fe:	60fb      	str	r3, [r7, #12]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 811a400:	68fb      	ldr	r3, [r7, #12]
 811a402:	4a50      	ldr	r2, [pc, #320]	@ (811a544 <mem_malloc+0x1d4>)
 811a404:	4293      	cmp	r3, r2
 811a406:	d106      	bne.n	811a416 <mem_malloc+0xa6>
 811a408:	4b51      	ldr	r3, [pc, #324]	@ (811a550 <mem_malloc+0x1e0>)
 811a40a:	f240 3287 	movw	r2, #903	@ 0x387
 811a40e:	4951      	ldr	r1, [pc, #324]	@ (811a554 <mem_malloc+0x1e4>)
 811a410:	4851      	ldr	r0, [pc, #324]	@ (811a558 <mem_malloc+0x1e8>)
 811a412:	f009 fc03 	bl	8123c1c <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 811a416:	68f8      	ldr	r0, [r7, #12]
 811a418:	f7ff fcca 	bl	8119db0 <ptr_to_mem>
 811a41c:	60b8      	str	r0, [r7, #8]
          mem2->used = 0;
 811a41e:	68bb      	ldr	r3, [r7, #8]
 811a420:	2200      	movs	r2, #0
 811a422:	721a      	strb	r2, [r3, #8]
          mem2->next = mem->next;
 811a424:	693b      	ldr	r3, [r7, #16]
 811a426:	681a      	ldr	r2, [r3, #0]
 811a428:	68bb      	ldr	r3, [r7, #8]
 811a42a:	601a      	str	r2, [r3, #0]
          mem2->prev = ptr;
 811a42c:	68bb      	ldr	r3, [r7, #8]
 811a42e:	69fa      	ldr	r2, [r7, #28]
 811a430:	605a      	str	r2, [r3, #4]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 811a432:	693b      	ldr	r3, [r7, #16]
 811a434:	68fa      	ldr	r2, [r7, #12]
 811a436:	601a      	str	r2, [r3, #0]
          mem->used = 1;
 811a438:	693b      	ldr	r3, [r7, #16]
 811a43a:	2201      	movs	r2, #1
 811a43c:	721a      	strb	r2, [r3, #8]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 811a43e:	68bb      	ldr	r3, [r7, #8]
 811a440:	681b      	ldr	r3, [r3, #0]
 811a442:	4a40      	ldr	r2, [pc, #256]	@ (811a544 <mem_malloc+0x1d4>)
 811a444:	4293      	cmp	r3, r2
 811a446:	d00b      	beq.n	811a460 <mem_malloc+0xf0>
            ptr_to_mem(mem2->next)->prev = ptr2;
 811a448:	68bb      	ldr	r3, [r7, #8]
 811a44a:	681b      	ldr	r3, [r3, #0]
 811a44c:	4618      	mov	r0, r3
 811a44e:	f7ff fcaf 	bl	8119db0 <ptr_to_mem>
 811a452:	4602      	mov	r2, r0
 811a454:	68fb      	ldr	r3, [r7, #12]
 811a456:	6053      	str	r3, [r2, #4]
 811a458:	e002      	b.n	811a460 <mem_malloc+0xf0>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 811a45a:	693b      	ldr	r3, [r7, #16]
 811a45c:	2201      	movs	r2, #1
 811a45e:	721a      	strb	r2, [r3, #8]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 811a460:	4b3a      	ldr	r3, [pc, #232]	@ (811a54c <mem_malloc+0x1dc>)
 811a462:	681b      	ldr	r3, [r3, #0]
 811a464:	693a      	ldr	r2, [r7, #16]
 811a466:	429a      	cmp	r2, r3
 811a468:	d127      	bne.n	811a4ba <mem_malloc+0x14a>
          struct mem *cur = lfree;
 811a46a:	4b38      	ldr	r3, [pc, #224]	@ (811a54c <mem_malloc+0x1dc>)
 811a46c:	681b      	ldr	r3, [r3, #0]
 811a46e:	617b      	str	r3, [r7, #20]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 811a470:	e005      	b.n	811a47e <mem_malloc+0x10e>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 811a472:	697b      	ldr	r3, [r7, #20]
 811a474:	681b      	ldr	r3, [r3, #0]
 811a476:	4618      	mov	r0, r3
 811a478:	f7ff fc9a 	bl	8119db0 <ptr_to_mem>
 811a47c:	6178      	str	r0, [r7, #20]
          while (cur->used && cur != ram_end) {
 811a47e:	697b      	ldr	r3, [r7, #20]
 811a480:	7a1b      	ldrb	r3, [r3, #8]
 811a482:	2b00      	cmp	r3, #0
 811a484:	d004      	beq.n	811a490 <mem_malloc+0x120>
 811a486:	4b35      	ldr	r3, [pc, #212]	@ (811a55c <mem_malloc+0x1ec>)
 811a488:	681b      	ldr	r3, [r3, #0]
 811a48a:	697a      	ldr	r2, [r7, #20]
 811a48c:	429a      	cmp	r2, r3
 811a48e:	d1f0      	bne.n	811a472 <mem_malloc+0x102>
          }
          lfree = cur;
 811a490:	4a2e      	ldr	r2, [pc, #184]	@ (811a54c <mem_malloc+0x1dc>)
 811a492:	697b      	ldr	r3, [r7, #20]
 811a494:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 811a496:	4b2d      	ldr	r3, [pc, #180]	@ (811a54c <mem_malloc+0x1dc>)
 811a498:	681a      	ldr	r2, [r3, #0]
 811a49a:	4b30      	ldr	r3, [pc, #192]	@ (811a55c <mem_malloc+0x1ec>)
 811a49c:	681b      	ldr	r3, [r3, #0]
 811a49e:	429a      	cmp	r2, r3
 811a4a0:	d00b      	beq.n	811a4ba <mem_malloc+0x14a>
 811a4a2:	4b2a      	ldr	r3, [pc, #168]	@ (811a54c <mem_malloc+0x1dc>)
 811a4a4:	681b      	ldr	r3, [r3, #0]
 811a4a6:	7a1b      	ldrb	r3, [r3, #8]
 811a4a8:	2b00      	cmp	r3, #0
 811a4aa:	d006      	beq.n	811a4ba <mem_malloc+0x14a>
 811a4ac:	4b28      	ldr	r3, [pc, #160]	@ (811a550 <mem_malloc+0x1e0>)
 811a4ae:	f240 32b5 	movw	r2, #949	@ 0x3b5
 811a4b2:	492b      	ldr	r1, [pc, #172]	@ (811a560 <mem_malloc+0x1f0>)
 811a4b4:	4828      	ldr	r0, [pc, #160]	@ (811a558 <mem_malloc+0x1e8>)
 811a4b6:	f009 fbb1 	bl	8123c1c <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 811a4ba:	4823      	ldr	r0, [pc, #140]	@ (811a548 <mem_malloc+0x1d8>)
 811a4bc:	f001 fb5f 	bl	811bb7e <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 811a4c0:	693a      	ldr	r2, [r7, #16]
 811a4c2:	69bb      	ldr	r3, [r7, #24]
 811a4c4:	4413      	add	r3, r2
 811a4c6:	330c      	adds	r3, #12
 811a4c8:	4a24      	ldr	r2, [pc, #144]	@ (811a55c <mem_malloc+0x1ec>)
 811a4ca:	6812      	ldr	r2, [r2, #0]
 811a4cc:	4293      	cmp	r3, r2
 811a4ce:	d906      	bls.n	811a4de <mem_malloc+0x16e>
 811a4d0:	4b1f      	ldr	r3, [pc, #124]	@ (811a550 <mem_malloc+0x1e0>)
 811a4d2:	f240 32b9 	movw	r2, #953	@ 0x3b9
 811a4d6:	4923      	ldr	r1, [pc, #140]	@ (811a564 <mem_malloc+0x1f4>)
 811a4d8:	481f      	ldr	r0, [pc, #124]	@ (811a558 <mem_malloc+0x1e8>)
 811a4da:	f009 fb9f 	bl	8123c1c <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 811a4de:	693b      	ldr	r3, [r7, #16]
 811a4e0:	f003 0303 	and.w	r3, r3, #3
 811a4e4:	2b00      	cmp	r3, #0
 811a4e6:	d006      	beq.n	811a4f6 <mem_malloc+0x186>
 811a4e8:	4b19      	ldr	r3, [pc, #100]	@ (811a550 <mem_malloc+0x1e0>)
 811a4ea:	f240 32bb 	movw	r2, #955	@ 0x3bb
 811a4ee:	491e      	ldr	r1, [pc, #120]	@ (811a568 <mem_malloc+0x1f8>)
 811a4f0:	4819      	ldr	r0, [pc, #100]	@ (811a558 <mem_malloc+0x1e8>)
 811a4f2:	f009 fb93 	bl	8123c1c <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 811a4f6:	693b      	ldr	r3, [r7, #16]
 811a4f8:	f003 0303 	and.w	r3, r3, #3
 811a4fc:	2b00      	cmp	r3, #0
 811a4fe:	d006      	beq.n	811a50e <mem_malloc+0x19e>
 811a500:	4b13      	ldr	r3, [pc, #76]	@ (811a550 <mem_malloc+0x1e0>)
 811a502:	f240 32bd 	movw	r2, #957	@ 0x3bd
 811a506:	4919      	ldr	r1, [pc, #100]	@ (811a56c <mem_malloc+0x1fc>)
 811a508:	4813      	ldr	r0, [pc, #76]	@ (811a558 <mem_malloc+0x1e8>)
 811a50a:	f009 fb87 	bl	8123c1c <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 811a50e:	693b      	ldr	r3, [r7, #16]
 811a510:	330c      	adds	r3, #12
 811a512:	e012      	b.n	811a53a <mem_malloc+0x1ca>
         ptr = ptr_to_mem(ptr)->next) {
 811a514:	69f8      	ldr	r0, [r7, #28]
 811a516:	f7ff fc4b 	bl	8119db0 <ptr_to_mem>
 811a51a:	4603      	mov	r3, r0
 811a51c:	681b      	ldr	r3, [r3, #0]
 811a51e:	61fb      	str	r3, [r7, #28]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 811a520:	69bb      	ldr	r3, [r7, #24]
 811a522:	f5c3 33ff 	rsb	r3, r3, #130560	@ 0x1fe00
 811a526:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 811a52a:	69fa      	ldr	r2, [r7, #28]
 811a52c:	429a      	cmp	r2, r3
 811a52e:	f4ff af46 	bcc.w	811a3be <mem_malloc+0x4e>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 811a532:	4805      	ldr	r0, [pc, #20]	@ (811a548 <mem_malloc+0x1d8>)
 811a534:	f001 fb23 	bl	811bb7e <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 811a538:	2300      	movs	r3, #0
}
 811a53a:	4618      	mov	r0, r3
 811a53c:	3720      	adds	r7, #32
 811a53e:	46bd      	mov	sp, r7
 811a540:	bd80      	pop	{r7, pc}
 811a542:	bf00      	nop
 811a544:	0001ffe8 	.word	0x0001ffe8
 811a548:	1000b33c 	.word	0x1000b33c
 811a54c:	1000b340 	.word	0x1000b340
 811a550:	08125cec 	.word	0x08125cec
 811a554:	08125ef0 	.word	0x08125ef0
 811a558:	08125d74 	.word	0x08125d74
 811a55c:	1000b338 	.word	0x1000b338
 811a560:	08125f04 	.word	0x08125f04
 811a564:	08125f20 	.word	0x08125f20
 811a568:	08125f50 	.word	0x08125f50
 811a56c:	08125f80 	.word	0x08125f80

0811a570 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 811a570:	b480      	push	{r7}
 811a572:	b085      	sub	sp, #20
 811a574:	af00      	add	r7, sp, #0
 811a576:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 811a578:	687b      	ldr	r3, [r7, #4]
 811a57a:	689b      	ldr	r3, [r3, #8]
 811a57c:	2200      	movs	r2, #0
 811a57e:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 811a580:	687b      	ldr	r3, [r7, #4]
 811a582:	685b      	ldr	r3, [r3, #4]
 811a584:	3303      	adds	r3, #3
 811a586:	f023 0303 	bic.w	r3, r3, #3
 811a58a:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 811a58c:	2300      	movs	r3, #0
 811a58e:	60fb      	str	r3, [r7, #12]
 811a590:	e011      	b.n	811a5b6 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 811a592:	687b      	ldr	r3, [r7, #4]
 811a594:	689b      	ldr	r3, [r3, #8]
 811a596:	681a      	ldr	r2, [r3, #0]
 811a598:	68bb      	ldr	r3, [r7, #8]
 811a59a:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 811a59c:	687b      	ldr	r3, [r7, #4]
 811a59e:	689b      	ldr	r3, [r3, #8]
 811a5a0:	68ba      	ldr	r2, [r7, #8]
 811a5a2:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 811a5a4:	687b      	ldr	r3, [r7, #4]
 811a5a6:	881b      	ldrh	r3, [r3, #0]
 811a5a8:	461a      	mov	r2, r3
 811a5aa:	68bb      	ldr	r3, [r7, #8]
 811a5ac:	4413      	add	r3, r2
 811a5ae:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 811a5b0:	68fb      	ldr	r3, [r7, #12]
 811a5b2:	3301      	adds	r3, #1
 811a5b4:	60fb      	str	r3, [r7, #12]
 811a5b6:	687b      	ldr	r3, [r7, #4]
 811a5b8:	885b      	ldrh	r3, [r3, #2]
 811a5ba:	461a      	mov	r2, r3
 811a5bc:	68fb      	ldr	r3, [r7, #12]
 811a5be:	4293      	cmp	r3, r2
 811a5c0:	dbe7      	blt.n	811a592 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 811a5c2:	bf00      	nop
 811a5c4:	bf00      	nop
 811a5c6:	3714      	adds	r7, #20
 811a5c8:	46bd      	mov	sp, r7
 811a5ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 811a5ce:	4770      	bx	lr

0811a5d0 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 811a5d0:	b580      	push	{r7, lr}
 811a5d2:	b082      	sub	sp, #8
 811a5d4:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 811a5d6:	2300      	movs	r3, #0
 811a5d8:	80fb      	strh	r3, [r7, #6]
 811a5da:	e009      	b.n	811a5f0 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 811a5dc:	88fb      	ldrh	r3, [r7, #6]
 811a5de:	4a08      	ldr	r2, [pc, #32]	@ (811a600 <memp_init+0x30>)
 811a5e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 811a5e4:	4618      	mov	r0, r3
 811a5e6:	f7ff ffc3 	bl	811a570 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 811a5ea:	88fb      	ldrh	r3, [r7, #6]
 811a5ec:	3301      	adds	r3, #1
 811a5ee:	80fb      	strh	r3, [r7, #6]
 811a5f0:	88fb      	ldrh	r3, [r7, #6]
 811a5f2:	2b0c      	cmp	r3, #12
 811a5f4:	d9f2      	bls.n	811a5dc <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 811a5f6:	bf00      	nop
 811a5f8:	bf00      	nop
 811a5fa:	3708      	adds	r7, #8
 811a5fc:	46bd      	mov	sp, r7
 811a5fe:	bd80      	pop	{r7, pc}
 811a600:	081284d4 	.word	0x081284d4

0811a604 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 811a604:	b580      	push	{r7, lr}
 811a606:	b084      	sub	sp, #16
 811a608:	af00      	add	r7, sp, #0
 811a60a:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 811a60c:	f001 fae4 	bl	811bbd8 <sys_arch_protect>
 811a610:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 811a612:	687b      	ldr	r3, [r7, #4]
 811a614:	689b      	ldr	r3, [r3, #8]
 811a616:	681b      	ldr	r3, [r3, #0]
 811a618:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 811a61a:	68bb      	ldr	r3, [r7, #8]
 811a61c:	2b00      	cmp	r3, #0
 811a61e:	d015      	beq.n	811a64c <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 811a620:	687b      	ldr	r3, [r7, #4]
 811a622:	689b      	ldr	r3, [r3, #8]
 811a624:	68ba      	ldr	r2, [r7, #8]
 811a626:	6812      	ldr	r2, [r2, #0]
 811a628:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 811a62a:	68bb      	ldr	r3, [r7, #8]
 811a62c:	f003 0303 	and.w	r3, r3, #3
 811a630:	2b00      	cmp	r3, #0
 811a632:	d006      	beq.n	811a642 <do_memp_malloc_pool+0x3e>
 811a634:	4b09      	ldr	r3, [pc, #36]	@ (811a65c <do_memp_malloc_pool+0x58>)
 811a636:	f44f 728c 	mov.w	r2, #280	@ 0x118
 811a63a:	4909      	ldr	r1, [pc, #36]	@ (811a660 <do_memp_malloc_pool+0x5c>)
 811a63c:	4809      	ldr	r0, [pc, #36]	@ (811a664 <do_memp_malloc_pool+0x60>)
 811a63e:	f009 faed 	bl	8123c1c <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 811a642:	68f8      	ldr	r0, [r7, #12]
 811a644:	f001 fad6 	bl	811bbf4 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 811a648:	68bb      	ldr	r3, [r7, #8]
 811a64a:	e003      	b.n	811a654 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 811a64c:	68f8      	ldr	r0, [r7, #12]
 811a64e:	f001 fad1 	bl	811bbf4 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 811a652:	2300      	movs	r3, #0
}
 811a654:	4618      	mov	r0, r3
 811a656:	3710      	adds	r7, #16
 811a658:	46bd      	mov	sp, r7
 811a65a:	bd80      	pop	{r7, pc}
 811a65c:	08125fa4 	.word	0x08125fa4
 811a660:	08126014 	.word	0x08126014
 811a664:	08126038 	.word	0x08126038

0811a668 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 811a668:	b580      	push	{r7, lr}
 811a66a:	b082      	sub	sp, #8
 811a66c:	af00      	add	r7, sp, #0
 811a66e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 811a670:	687b      	ldr	r3, [r7, #4]
 811a672:	2b00      	cmp	r3, #0
 811a674:	d106      	bne.n	811a684 <memp_malloc_pool+0x1c>
 811a676:	4b0a      	ldr	r3, [pc, #40]	@ (811a6a0 <memp_malloc_pool+0x38>)
 811a678:	f44f 729e 	mov.w	r2, #316	@ 0x13c
 811a67c:	4909      	ldr	r1, [pc, #36]	@ (811a6a4 <memp_malloc_pool+0x3c>)
 811a67e:	480a      	ldr	r0, [pc, #40]	@ (811a6a8 <memp_malloc_pool+0x40>)
 811a680:	f009 facc 	bl	8123c1c <iprintf>
  if (desc == NULL) {
 811a684:	687b      	ldr	r3, [r7, #4]
 811a686:	2b00      	cmp	r3, #0
 811a688:	d101      	bne.n	811a68e <memp_malloc_pool+0x26>
    return NULL;
 811a68a:	2300      	movs	r3, #0
 811a68c:	e003      	b.n	811a696 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 811a68e:	6878      	ldr	r0, [r7, #4]
 811a690:	f7ff ffb8 	bl	811a604 <do_memp_malloc_pool>
 811a694:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 811a696:	4618      	mov	r0, r3
 811a698:	3708      	adds	r7, #8
 811a69a:	46bd      	mov	sp, r7
 811a69c:	bd80      	pop	{r7, pc}
 811a69e:	bf00      	nop
 811a6a0:	08125fa4 	.word	0x08125fa4
 811a6a4:	08126060 	.word	0x08126060
 811a6a8:	08126038 	.word	0x08126038

0811a6ac <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 811a6ac:	b580      	push	{r7, lr}
 811a6ae:	b084      	sub	sp, #16
 811a6b0:	af00      	add	r7, sp, #0
 811a6b2:	4603      	mov	r3, r0
 811a6b4:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 811a6b6:	79fb      	ldrb	r3, [r7, #7]
 811a6b8:	2b0c      	cmp	r3, #12
 811a6ba:	d908      	bls.n	811a6ce <memp_malloc+0x22>
 811a6bc:	4b0a      	ldr	r3, [pc, #40]	@ (811a6e8 <memp_malloc+0x3c>)
 811a6be:	f240 1257 	movw	r2, #343	@ 0x157
 811a6c2:	490a      	ldr	r1, [pc, #40]	@ (811a6ec <memp_malloc+0x40>)
 811a6c4:	480a      	ldr	r0, [pc, #40]	@ (811a6f0 <memp_malloc+0x44>)
 811a6c6:	f009 faa9 	bl	8123c1c <iprintf>
 811a6ca:	2300      	movs	r3, #0
 811a6cc:	e008      	b.n	811a6e0 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 811a6ce:	79fb      	ldrb	r3, [r7, #7]
 811a6d0:	4a08      	ldr	r2, [pc, #32]	@ (811a6f4 <memp_malloc+0x48>)
 811a6d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 811a6d6:	4618      	mov	r0, r3
 811a6d8:	f7ff ff94 	bl	811a604 <do_memp_malloc_pool>
 811a6dc:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 811a6de:	68fb      	ldr	r3, [r7, #12]
}
 811a6e0:	4618      	mov	r0, r3
 811a6e2:	3710      	adds	r7, #16
 811a6e4:	46bd      	mov	sp, r7
 811a6e6:	bd80      	pop	{r7, pc}
 811a6e8:	08125fa4 	.word	0x08125fa4
 811a6ec:	08126074 	.word	0x08126074
 811a6f0:	08126038 	.word	0x08126038
 811a6f4:	081284d4 	.word	0x081284d4

0811a6f8 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 811a6f8:	b580      	push	{r7, lr}
 811a6fa:	b084      	sub	sp, #16
 811a6fc:	af00      	add	r7, sp, #0
 811a6fe:	6078      	str	r0, [r7, #4]
 811a700:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 811a702:	683b      	ldr	r3, [r7, #0]
 811a704:	f003 0303 	and.w	r3, r3, #3
 811a708:	2b00      	cmp	r3, #0
 811a70a:	d006      	beq.n	811a71a <do_memp_free_pool+0x22>
 811a70c:	4b0d      	ldr	r3, [pc, #52]	@ (811a744 <do_memp_free_pool+0x4c>)
 811a70e:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 811a712:	490d      	ldr	r1, [pc, #52]	@ (811a748 <do_memp_free_pool+0x50>)
 811a714:	480d      	ldr	r0, [pc, #52]	@ (811a74c <do_memp_free_pool+0x54>)
 811a716:	f009 fa81 	bl	8123c1c <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 811a71a:	683b      	ldr	r3, [r7, #0]
 811a71c:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 811a71e:	f001 fa5b 	bl	811bbd8 <sys_arch_protect>
 811a722:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 811a724:	687b      	ldr	r3, [r7, #4]
 811a726:	689b      	ldr	r3, [r3, #8]
 811a728:	681a      	ldr	r2, [r3, #0]
 811a72a:	68fb      	ldr	r3, [r7, #12]
 811a72c:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 811a72e:	687b      	ldr	r3, [r7, #4]
 811a730:	689b      	ldr	r3, [r3, #8]
 811a732:	68fa      	ldr	r2, [r7, #12]
 811a734:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 811a736:	68b8      	ldr	r0, [r7, #8]
 811a738:	f001 fa5c 	bl	811bbf4 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 811a73c:	bf00      	nop
 811a73e:	3710      	adds	r7, #16
 811a740:	46bd      	mov	sp, r7
 811a742:	bd80      	pop	{r7, pc}
 811a744:	08125fa4 	.word	0x08125fa4
 811a748:	08126094 	.word	0x08126094
 811a74c:	08126038 	.word	0x08126038

0811a750 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 811a750:	b580      	push	{r7, lr}
 811a752:	b082      	sub	sp, #8
 811a754:	af00      	add	r7, sp, #0
 811a756:	6078      	str	r0, [r7, #4]
 811a758:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 811a75a:	687b      	ldr	r3, [r7, #4]
 811a75c:	2b00      	cmp	r3, #0
 811a75e:	d106      	bne.n	811a76e <memp_free_pool+0x1e>
 811a760:	4b0a      	ldr	r3, [pc, #40]	@ (811a78c <memp_free_pool+0x3c>)
 811a762:	f240 1295 	movw	r2, #405	@ 0x195
 811a766:	490a      	ldr	r1, [pc, #40]	@ (811a790 <memp_free_pool+0x40>)
 811a768:	480a      	ldr	r0, [pc, #40]	@ (811a794 <memp_free_pool+0x44>)
 811a76a:	f009 fa57 	bl	8123c1c <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 811a76e:	687b      	ldr	r3, [r7, #4]
 811a770:	2b00      	cmp	r3, #0
 811a772:	d007      	beq.n	811a784 <memp_free_pool+0x34>
 811a774:	683b      	ldr	r3, [r7, #0]
 811a776:	2b00      	cmp	r3, #0
 811a778:	d004      	beq.n	811a784 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 811a77a:	6839      	ldr	r1, [r7, #0]
 811a77c:	6878      	ldr	r0, [r7, #4]
 811a77e:	f7ff ffbb 	bl	811a6f8 <do_memp_free_pool>
 811a782:	e000      	b.n	811a786 <memp_free_pool+0x36>
    return;
 811a784:	bf00      	nop
}
 811a786:	3708      	adds	r7, #8
 811a788:	46bd      	mov	sp, r7
 811a78a:	bd80      	pop	{r7, pc}
 811a78c:	08125fa4 	.word	0x08125fa4
 811a790:	08126060 	.word	0x08126060
 811a794:	08126038 	.word	0x08126038

0811a798 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 811a798:	b580      	push	{r7, lr}
 811a79a:	b082      	sub	sp, #8
 811a79c:	af00      	add	r7, sp, #0
 811a79e:	4603      	mov	r3, r0
 811a7a0:	6039      	str	r1, [r7, #0]
 811a7a2:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 811a7a4:	79fb      	ldrb	r3, [r7, #7]
 811a7a6:	2b0c      	cmp	r3, #12
 811a7a8:	d907      	bls.n	811a7ba <memp_free+0x22>
 811a7aa:	4b0c      	ldr	r3, [pc, #48]	@ (811a7dc <memp_free+0x44>)
 811a7ac:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 811a7b0:	490b      	ldr	r1, [pc, #44]	@ (811a7e0 <memp_free+0x48>)
 811a7b2:	480c      	ldr	r0, [pc, #48]	@ (811a7e4 <memp_free+0x4c>)
 811a7b4:	f009 fa32 	bl	8123c1c <iprintf>
 811a7b8:	e00c      	b.n	811a7d4 <memp_free+0x3c>

  if (mem == NULL) {
 811a7ba:	683b      	ldr	r3, [r7, #0]
 811a7bc:	2b00      	cmp	r3, #0
 811a7be:	d008      	beq.n	811a7d2 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 811a7c0:	79fb      	ldrb	r3, [r7, #7]
 811a7c2:	4a09      	ldr	r2, [pc, #36]	@ (811a7e8 <memp_free+0x50>)
 811a7c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 811a7c8:	6839      	ldr	r1, [r7, #0]
 811a7ca:	4618      	mov	r0, r3
 811a7cc:	f7ff ff94 	bl	811a6f8 <do_memp_free_pool>
 811a7d0:	e000      	b.n	811a7d4 <memp_free+0x3c>
    return;
 811a7d2:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 811a7d4:	3708      	adds	r7, #8
 811a7d6:	46bd      	mov	sp, r7
 811a7d8:	bd80      	pop	{r7, pc}
 811a7da:	bf00      	nop
 811a7dc:	08125fa4 	.word	0x08125fa4
 811a7e0:	081260b4 	.word	0x081260b4
 811a7e4:	08126038 	.word	0x08126038
 811a7e8:	081284d4 	.word	0x081284d4

0811a7ec <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 811a7ec:	b480      	push	{r7}
 811a7ee:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 811a7f0:	bf00      	nop
 811a7f2:	46bd      	mov	sp, r7
 811a7f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 811a7f8:	4770      	bx	lr
	...

0811a7fc <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 811a7fc:	b580      	push	{r7, lr}
 811a7fe:	b086      	sub	sp, #24
 811a800:	af00      	add	r7, sp, #0
 811a802:	60f8      	str	r0, [r7, #12]
 811a804:	60b9      	str	r1, [r7, #8]
 811a806:	607a      	str	r2, [r7, #4]
 811a808:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 811a80a:	68fb      	ldr	r3, [r7, #12]
 811a80c:	2b00      	cmp	r3, #0
 811a80e:	d108      	bne.n	811a822 <netif_add+0x26>
 811a810:	4b57      	ldr	r3, [pc, #348]	@ (811a970 <netif_add+0x174>)
 811a812:	f240 1227 	movw	r2, #295	@ 0x127
 811a816:	4957      	ldr	r1, [pc, #348]	@ (811a974 <netif_add+0x178>)
 811a818:	4857      	ldr	r0, [pc, #348]	@ (811a978 <netif_add+0x17c>)
 811a81a:	f009 f9ff 	bl	8123c1c <iprintf>
 811a81e:	2300      	movs	r3, #0
 811a820:	e0a2      	b.n	811a968 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 811a822:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811a824:	2b00      	cmp	r3, #0
 811a826:	d108      	bne.n	811a83a <netif_add+0x3e>
 811a828:	4b51      	ldr	r3, [pc, #324]	@ (811a970 <netif_add+0x174>)
 811a82a:	f44f 7294 	mov.w	r2, #296	@ 0x128
 811a82e:	4953      	ldr	r1, [pc, #332]	@ (811a97c <netif_add+0x180>)
 811a830:	4851      	ldr	r0, [pc, #324]	@ (811a978 <netif_add+0x17c>)
 811a832:	f009 f9f3 	bl	8123c1c <iprintf>
 811a836:	2300      	movs	r3, #0
 811a838:	e096      	b.n	811a968 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 811a83a:	68bb      	ldr	r3, [r7, #8]
 811a83c:	2b00      	cmp	r3, #0
 811a83e:	d101      	bne.n	811a844 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 811a840:	4b4f      	ldr	r3, [pc, #316]	@ (811a980 <netif_add+0x184>)
 811a842:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 811a844:	687b      	ldr	r3, [r7, #4]
 811a846:	2b00      	cmp	r3, #0
 811a848:	d101      	bne.n	811a84e <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 811a84a:	4b4d      	ldr	r3, [pc, #308]	@ (811a980 <netif_add+0x184>)
 811a84c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 811a84e:	683b      	ldr	r3, [r7, #0]
 811a850:	2b00      	cmp	r3, #0
 811a852:	d101      	bne.n	811a858 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 811a854:	4b4a      	ldr	r3, [pc, #296]	@ (811a980 <netif_add+0x184>)
 811a856:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 811a858:	68fb      	ldr	r3, [r7, #12]
 811a85a:	2200      	movs	r2, #0
 811a85c:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 811a85e:	68fb      	ldr	r3, [r7, #12]
 811a860:	2200      	movs	r2, #0
 811a862:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 811a864:	68fb      	ldr	r3, [r7, #12]
 811a866:	2200      	movs	r2, #0
 811a868:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 811a86a:	68fb      	ldr	r3, [r7, #12]
 811a86c:	4a45      	ldr	r2, [pc, #276]	@ (811a984 <netif_add+0x188>)
 811a86e:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 811a870:	68fb      	ldr	r3, [r7, #12]
 811a872:	2200      	movs	r2, #0
 811a874:	849a      	strh	r2, [r3, #36]	@ 0x24
  netif->flags = 0;
 811a876:	68fb      	ldr	r3, [r7, #12]
 811a878:	2200      	movs	r2, #0
 811a87a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 811a87e:	68fb      	ldr	r3, [r7, #12]
 811a880:	2200      	movs	r2, #0
 811a882:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 811a884:	68fb      	ldr	r3, [r7, #12]
 811a886:	6a3a      	ldr	r2, [r7, #32]
 811a888:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 811a88a:	4b3f      	ldr	r3, [pc, #252]	@ (811a988 <netif_add+0x18c>)
 811a88c:	781a      	ldrb	r2, [r3, #0]
 811a88e:	68fb      	ldr	r3, [r7, #12]
 811a890:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  netif->input = input;
 811a894:	68fb      	ldr	r3, [r7, #12]
 811a896:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 811a898:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 811a89a:	683b      	ldr	r3, [r7, #0]
 811a89c:	687a      	ldr	r2, [r7, #4]
 811a89e:	68b9      	ldr	r1, [r7, #8]
 811a8a0:	68f8      	ldr	r0, [r7, #12]
 811a8a2:	f000 f913 	bl	811aacc <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 811a8a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811a8a8:	68f8      	ldr	r0, [r7, #12]
 811a8aa:	4798      	blx	r3
 811a8ac:	4603      	mov	r3, r0
 811a8ae:	2b00      	cmp	r3, #0
 811a8b0:	d001      	beq.n	811a8b6 <netif_add+0xba>
    return NULL;
 811a8b2:	2300      	movs	r3, #0
 811a8b4:	e058      	b.n	811a968 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 811a8b6:	68fb      	ldr	r3, [r7, #12]
 811a8b8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 811a8bc:	2bff      	cmp	r3, #255	@ 0xff
 811a8be:	d103      	bne.n	811a8c8 <netif_add+0xcc>
        netif->num = 0;
 811a8c0:	68fb      	ldr	r3, [r7, #12]
 811a8c2:	2200      	movs	r2, #0
 811a8c4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      }
      num_netifs = 0;
 811a8c8:	2300      	movs	r3, #0
 811a8ca:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 811a8cc:	4b2f      	ldr	r3, [pc, #188]	@ (811a98c <netif_add+0x190>)
 811a8ce:	681b      	ldr	r3, [r3, #0]
 811a8d0:	617b      	str	r3, [r7, #20]
 811a8d2:	e02b      	b.n	811a92c <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 811a8d4:	697a      	ldr	r2, [r7, #20]
 811a8d6:	68fb      	ldr	r3, [r7, #12]
 811a8d8:	429a      	cmp	r2, r3
 811a8da:	d106      	bne.n	811a8ea <netif_add+0xee>
 811a8dc:	4b24      	ldr	r3, [pc, #144]	@ (811a970 <netif_add+0x174>)
 811a8de:	f240 128b 	movw	r2, #395	@ 0x18b
 811a8e2:	492b      	ldr	r1, [pc, #172]	@ (811a990 <netif_add+0x194>)
 811a8e4:	4824      	ldr	r0, [pc, #144]	@ (811a978 <netif_add+0x17c>)
 811a8e6:	f009 f999 	bl	8123c1c <iprintf>
        num_netifs++;
 811a8ea:	693b      	ldr	r3, [r7, #16]
 811a8ec:	3301      	adds	r3, #1
 811a8ee:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 811a8f0:	693b      	ldr	r3, [r7, #16]
 811a8f2:	2bff      	cmp	r3, #255	@ 0xff
 811a8f4:	dd06      	ble.n	811a904 <netif_add+0x108>
 811a8f6:	4b1e      	ldr	r3, [pc, #120]	@ (811a970 <netif_add+0x174>)
 811a8f8:	f240 128d 	movw	r2, #397	@ 0x18d
 811a8fc:	4925      	ldr	r1, [pc, #148]	@ (811a994 <netif_add+0x198>)
 811a8fe:	481e      	ldr	r0, [pc, #120]	@ (811a978 <netif_add+0x17c>)
 811a900:	f009 f98c 	bl	8123c1c <iprintf>
        if (netif2->num == netif->num) {
 811a904:	697b      	ldr	r3, [r7, #20]
 811a906:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 811a90a:	68fb      	ldr	r3, [r7, #12]
 811a90c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 811a910:	429a      	cmp	r2, r3
 811a912:	d108      	bne.n	811a926 <netif_add+0x12a>
          netif->num++;
 811a914:	68fb      	ldr	r3, [r7, #12]
 811a916:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 811a91a:	3301      	adds	r3, #1
 811a91c:	b2da      	uxtb	r2, r3
 811a91e:	68fb      	ldr	r3, [r7, #12]
 811a920:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          break;
 811a924:	e005      	b.n	811a932 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 811a926:	697b      	ldr	r3, [r7, #20]
 811a928:	681b      	ldr	r3, [r3, #0]
 811a92a:	617b      	str	r3, [r7, #20]
 811a92c:	697b      	ldr	r3, [r7, #20]
 811a92e:	2b00      	cmp	r3, #0
 811a930:	d1d0      	bne.n	811a8d4 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 811a932:	697b      	ldr	r3, [r7, #20]
 811a934:	2b00      	cmp	r3, #0
 811a936:	d1be      	bne.n	811a8b6 <netif_add+0xba>
  }
  if (netif->num == 254) {
 811a938:	68fb      	ldr	r3, [r7, #12]
 811a93a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 811a93e:	2bfe      	cmp	r3, #254	@ 0xfe
 811a940:	d103      	bne.n	811a94a <netif_add+0x14e>
    netif_num = 0;
 811a942:	4b11      	ldr	r3, [pc, #68]	@ (811a988 <netif_add+0x18c>)
 811a944:	2200      	movs	r2, #0
 811a946:	701a      	strb	r2, [r3, #0]
 811a948:	e006      	b.n	811a958 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 811a94a:	68fb      	ldr	r3, [r7, #12]
 811a94c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 811a950:	3301      	adds	r3, #1
 811a952:	b2da      	uxtb	r2, r3
 811a954:	4b0c      	ldr	r3, [pc, #48]	@ (811a988 <netif_add+0x18c>)
 811a956:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 811a958:	4b0c      	ldr	r3, [pc, #48]	@ (811a98c <netif_add+0x190>)
 811a95a:	681a      	ldr	r2, [r3, #0]
 811a95c:	68fb      	ldr	r3, [r7, #12]
 811a95e:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 811a960:	4a0a      	ldr	r2, [pc, #40]	@ (811a98c <netif_add+0x190>)
 811a962:	68fb      	ldr	r3, [r7, #12]
 811a964:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 811a966:	68fb      	ldr	r3, [r7, #12]
}
 811a968:	4618      	mov	r0, r3
 811a96a:	3718      	adds	r7, #24
 811a96c:	46bd      	mov	sp, r7
 811a96e:	bd80      	pop	{r7, pc}
 811a970:	081260d0 	.word	0x081260d0
 811a974:	081261a0 	.word	0x081261a0
 811a978:	0812615c 	.word	0x0812615c
 811a97c:	081261bc 	.word	0x081261bc
 811a980:	08128434 	.word	0x08128434
 811a984:	0811ada7 	.word	0x0811ada7
 811a988:	1000e490 	.word	0x1000e490
 811a98c:	1000e488 	.word	0x1000e488
 811a990:	081261e0 	.word	0x081261e0
 811a994:	081261f4 	.word	0x081261f4

0811a998 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 811a998:	b580      	push	{r7, lr}
 811a99a:	b082      	sub	sp, #8
 811a99c:	af00      	add	r7, sp, #0
 811a99e:	6078      	str	r0, [r7, #4]
 811a9a0:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 811a9a2:	6839      	ldr	r1, [r7, #0]
 811a9a4:	6878      	ldr	r0, [r7, #4]
 811a9a6:	f002 fee5 	bl	811d774 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 811a9aa:	6839      	ldr	r1, [r7, #0]
 811a9ac:	6878      	ldr	r0, [r7, #4]
 811a9ae:	f008 f899 	bl	8122ae4 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 811a9b2:	bf00      	nop
 811a9b4:	3708      	adds	r7, #8
 811a9b6:	46bd      	mov	sp, r7
 811a9b8:	bd80      	pop	{r7, pc}
	...

0811a9bc <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 811a9bc:	b580      	push	{r7, lr}
 811a9be:	b086      	sub	sp, #24
 811a9c0:	af00      	add	r7, sp, #0
 811a9c2:	60f8      	str	r0, [r7, #12]
 811a9c4:	60b9      	str	r1, [r7, #8]
 811a9c6:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 811a9c8:	68bb      	ldr	r3, [r7, #8]
 811a9ca:	2b00      	cmp	r3, #0
 811a9cc:	d106      	bne.n	811a9dc <netif_do_set_ipaddr+0x20>
 811a9ce:	4b1d      	ldr	r3, [pc, #116]	@ (811aa44 <netif_do_set_ipaddr+0x88>)
 811a9d0:	f240 12cb 	movw	r2, #459	@ 0x1cb
 811a9d4:	491c      	ldr	r1, [pc, #112]	@ (811aa48 <netif_do_set_ipaddr+0x8c>)
 811a9d6:	481d      	ldr	r0, [pc, #116]	@ (811aa4c <netif_do_set_ipaddr+0x90>)
 811a9d8:	f009 f920 	bl	8123c1c <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 811a9dc:	687b      	ldr	r3, [r7, #4]
 811a9de:	2b00      	cmp	r3, #0
 811a9e0:	d106      	bne.n	811a9f0 <netif_do_set_ipaddr+0x34>
 811a9e2:	4b18      	ldr	r3, [pc, #96]	@ (811aa44 <netif_do_set_ipaddr+0x88>)
 811a9e4:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 811a9e8:	4917      	ldr	r1, [pc, #92]	@ (811aa48 <netif_do_set_ipaddr+0x8c>)
 811a9ea:	4818      	ldr	r0, [pc, #96]	@ (811aa4c <netif_do_set_ipaddr+0x90>)
 811a9ec:	f009 f916 	bl	8123c1c <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 811a9f0:	68bb      	ldr	r3, [r7, #8]
 811a9f2:	681a      	ldr	r2, [r3, #0]
 811a9f4:	68fb      	ldr	r3, [r7, #12]
 811a9f6:	3304      	adds	r3, #4
 811a9f8:	681b      	ldr	r3, [r3, #0]
 811a9fa:	429a      	cmp	r2, r3
 811a9fc:	d01c      	beq.n	811aa38 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 811a9fe:	68bb      	ldr	r3, [r7, #8]
 811aa00:	681b      	ldr	r3, [r3, #0]
 811aa02:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 811aa04:	68fb      	ldr	r3, [r7, #12]
 811aa06:	3304      	adds	r3, #4
 811aa08:	681a      	ldr	r2, [r3, #0]
 811aa0a:	687b      	ldr	r3, [r7, #4]
 811aa0c:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 811aa0e:	f107 0314 	add.w	r3, r7, #20
 811aa12:	4619      	mov	r1, r3
 811aa14:	6878      	ldr	r0, [r7, #4]
 811aa16:	f7ff ffbf 	bl	811a998 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 811aa1a:	68bb      	ldr	r3, [r7, #8]
 811aa1c:	2b00      	cmp	r3, #0
 811aa1e:	d002      	beq.n	811aa26 <netif_do_set_ipaddr+0x6a>
 811aa20:	68bb      	ldr	r3, [r7, #8]
 811aa22:	681b      	ldr	r3, [r3, #0]
 811aa24:	e000      	b.n	811aa28 <netif_do_set_ipaddr+0x6c>
 811aa26:	2300      	movs	r3, #0
 811aa28:	68fa      	ldr	r2, [r7, #12]
 811aa2a:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 811aa2c:	2101      	movs	r1, #1
 811aa2e:	68f8      	ldr	r0, [r7, #12]
 811aa30:	f000 f8d2 	bl	811abd8 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 811aa34:	2301      	movs	r3, #1
 811aa36:	e000      	b.n	811aa3a <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 811aa38:	2300      	movs	r3, #0
}
 811aa3a:	4618      	mov	r0, r3
 811aa3c:	3718      	adds	r7, #24
 811aa3e:	46bd      	mov	sp, r7
 811aa40:	bd80      	pop	{r7, pc}
 811aa42:	bf00      	nop
 811aa44:	081260d0 	.word	0x081260d0
 811aa48:	08126224 	.word	0x08126224
 811aa4c:	0812615c 	.word	0x0812615c

0811aa50 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 811aa50:	b480      	push	{r7}
 811aa52:	b085      	sub	sp, #20
 811aa54:	af00      	add	r7, sp, #0
 811aa56:	60f8      	str	r0, [r7, #12]
 811aa58:	60b9      	str	r1, [r7, #8]
 811aa5a:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 811aa5c:	68bb      	ldr	r3, [r7, #8]
 811aa5e:	681a      	ldr	r2, [r3, #0]
 811aa60:	68fb      	ldr	r3, [r7, #12]
 811aa62:	3308      	adds	r3, #8
 811aa64:	681b      	ldr	r3, [r3, #0]
 811aa66:	429a      	cmp	r2, r3
 811aa68:	d00a      	beq.n	811aa80 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 811aa6a:	68bb      	ldr	r3, [r7, #8]
 811aa6c:	2b00      	cmp	r3, #0
 811aa6e:	d002      	beq.n	811aa76 <netif_do_set_netmask+0x26>
 811aa70:	68bb      	ldr	r3, [r7, #8]
 811aa72:	681b      	ldr	r3, [r3, #0]
 811aa74:	e000      	b.n	811aa78 <netif_do_set_netmask+0x28>
 811aa76:	2300      	movs	r3, #0
 811aa78:	68fa      	ldr	r2, [r7, #12]
 811aa7a:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 811aa7c:	2301      	movs	r3, #1
 811aa7e:	e000      	b.n	811aa82 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 811aa80:	2300      	movs	r3, #0
}
 811aa82:	4618      	mov	r0, r3
 811aa84:	3714      	adds	r7, #20
 811aa86:	46bd      	mov	sp, r7
 811aa88:	f85d 7b04 	ldr.w	r7, [sp], #4
 811aa8c:	4770      	bx	lr

0811aa8e <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 811aa8e:	b480      	push	{r7}
 811aa90:	b085      	sub	sp, #20
 811aa92:	af00      	add	r7, sp, #0
 811aa94:	60f8      	str	r0, [r7, #12]
 811aa96:	60b9      	str	r1, [r7, #8]
 811aa98:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 811aa9a:	68bb      	ldr	r3, [r7, #8]
 811aa9c:	681a      	ldr	r2, [r3, #0]
 811aa9e:	68fb      	ldr	r3, [r7, #12]
 811aaa0:	330c      	adds	r3, #12
 811aaa2:	681b      	ldr	r3, [r3, #0]
 811aaa4:	429a      	cmp	r2, r3
 811aaa6:	d00a      	beq.n	811aabe <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 811aaa8:	68bb      	ldr	r3, [r7, #8]
 811aaaa:	2b00      	cmp	r3, #0
 811aaac:	d002      	beq.n	811aab4 <netif_do_set_gw+0x26>
 811aaae:	68bb      	ldr	r3, [r7, #8]
 811aab0:	681b      	ldr	r3, [r3, #0]
 811aab2:	e000      	b.n	811aab6 <netif_do_set_gw+0x28>
 811aab4:	2300      	movs	r3, #0
 811aab6:	68fa      	ldr	r2, [r7, #12]
 811aab8:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 811aaba:	2301      	movs	r3, #1
 811aabc:	e000      	b.n	811aac0 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 811aabe:	2300      	movs	r3, #0
}
 811aac0:	4618      	mov	r0, r3
 811aac2:	3714      	adds	r7, #20
 811aac4:	46bd      	mov	sp, r7
 811aac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 811aaca:	4770      	bx	lr

0811aacc <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 811aacc:	b580      	push	{r7, lr}
 811aace:	b088      	sub	sp, #32
 811aad0:	af00      	add	r7, sp, #0
 811aad2:	60f8      	str	r0, [r7, #12]
 811aad4:	60b9      	str	r1, [r7, #8]
 811aad6:	607a      	str	r2, [r7, #4]
 811aad8:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 811aada:	2300      	movs	r3, #0
 811aadc:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 811aade:	2300      	movs	r3, #0
 811aae0:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 811aae2:	68bb      	ldr	r3, [r7, #8]
 811aae4:	2b00      	cmp	r3, #0
 811aae6:	d101      	bne.n	811aaec <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 811aae8:	4b1c      	ldr	r3, [pc, #112]	@ (811ab5c <netif_set_addr+0x90>)
 811aaea:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 811aaec:	687b      	ldr	r3, [r7, #4]
 811aaee:	2b00      	cmp	r3, #0
 811aaf0:	d101      	bne.n	811aaf6 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 811aaf2:	4b1a      	ldr	r3, [pc, #104]	@ (811ab5c <netif_set_addr+0x90>)
 811aaf4:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 811aaf6:	683b      	ldr	r3, [r7, #0]
 811aaf8:	2b00      	cmp	r3, #0
 811aafa:	d101      	bne.n	811ab00 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 811aafc:	4b17      	ldr	r3, [pc, #92]	@ (811ab5c <netif_set_addr+0x90>)
 811aafe:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 811ab00:	68bb      	ldr	r3, [r7, #8]
 811ab02:	2b00      	cmp	r3, #0
 811ab04:	d003      	beq.n	811ab0e <netif_set_addr+0x42>
 811ab06:	68bb      	ldr	r3, [r7, #8]
 811ab08:	681b      	ldr	r3, [r3, #0]
 811ab0a:	2b00      	cmp	r3, #0
 811ab0c:	d101      	bne.n	811ab12 <netif_set_addr+0x46>
 811ab0e:	2301      	movs	r3, #1
 811ab10:	e000      	b.n	811ab14 <netif_set_addr+0x48>
 811ab12:	2300      	movs	r3, #0
 811ab14:	617b      	str	r3, [r7, #20]
  if (remove) {
 811ab16:	697b      	ldr	r3, [r7, #20]
 811ab18:	2b00      	cmp	r3, #0
 811ab1a:	d006      	beq.n	811ab2a <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 811ab1c:	f107 0310 	add.w	r3, r7, #16
 811ab20:	461a      	mov	r2, r3
 811ab22:	68b9      	ldr	r1, [r7, #8]
 811ab24:	68f8      	ldr	r0, [r7, #12]
 811ab26:	f7ff ff49 	bl	811a9bc <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 811ab2a:	69fa      	ldr	r2, [r7, #28]
 811ab2c:	6879      	ldr	r1, [r7, #4]
 811ab2e:	68f8      	ldr	r0, [r7, #12]
 811ab30:	f7ff ff8e 	bl	811aa50 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 811ab34:	69ba      	ldr	r2, [r7, #24]
 811ab36:	6839      	ldr	r1, [r7, #0]
 811ab38:	68f8      	ldr	r0, [r7, #12]
 811ab3a:	f7ff ffa8 	bl	811aa8e <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 811ab3e:	697b      	ldr	r3, [r7, #20]
 811ab40:	2b00      	cmp	r3, #0
 811ab42:	d106      	bne.n	811ab52 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 811ab44:	f107 0310 	add.w	r3, r7, #16
 811ab48:	461a      	mov	r2, r3
 811ab4a:	68b9      	ldr	r1, [r7, #8]
 811ab4c:	68f8      	ldr	r0, [r7, #12]
 811ab4e:	f7ff ff35 	bl	811a9bc <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 811ab52:	bf00      	nop
 811ab54:	3720      	adds	r7, #32
 811ab56:	46bd      	mov	sp, r7
 811ab58:	bd80      	pop	{r7, pc}
 811ab5a:	bf00      	nop
 811ab5c:	08128434 	.word	0x08128434

0811ab60 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 811ab60:	b480      	push	{r7}
 811ab62:	b083      	sub	sp, #12
 811ab64:	af00      	add	r7, sp, #0
 811ab66:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 811ab68:	4a04      	ldr	r2, [pc, #16]	@ (811ab7c <netif_set_default+0x1c>)
 811ab6a:	687b      	ldr	r3, [r7, #4]
 811ab6c:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 811ab6e:	bf00      	nop
 811ab70:	370c      	adds	r7, #12
 811ab72:	46bd      	mov	sp, r7
 811ab74:	f85d 7b04 	ldr.w	r7, [sp], #4
 811ab78:	4770      	bx	lr
 811ab7a:	bf00      	nop
 811ab7c:	1000e48c 	.word	0x1000e48c

0811ab80 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 811ab80:	b580      	push	{r7, lr}
 811ab82:	b082      	sub	sp, #8
 811ab84:	af00      	add	r7, sp, #0
 811ab86:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 811ab88:	687b      	ldr	r3, [r7, #4]
 811ab8a:	2b00      	cmp	r3, #0
 811ab8c:	d107      	bne.n	811ab9e <netif_set_up+0x1e>
 811ab8e:	4b0f      	ldr	r3, [pc, #60]	@ (811abcc <netif_set_up+0x4c>)
 811ab90:	f44f 7254 	mov.w	r2, #848	@ 0x350
 811ab94:	490e      	ldr	r1, [pc, #56]	@ (811abd0 <netif_set_up+0x50>)
 811ab96:	480f      	ldr	r0, [pc, #60]	@ (811abd4 <netif_set_up+0x54>)
 811ab98:	f009 f840 	bl	8123c1c <iprintf>
 811ab9c:	e013      	b.n	811abc6 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 811ab9e:	687b      	ldr	r3, [r7, #4]
 811aba0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 811aba4:	f003 0301 	and.w	r3, r3, #1
 811aba8:	2b00      	cmp	r3, #0
 811abaa:	d10c      	bne.n	811abc6 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 811abac:	687b      	ldr	r3, [r7, #4]
 811abae:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 811abb2:	f043 0301 	orr.w	r3, r3, #1
 811abb6:	b2da      	uxtb	r2, r3
 811abb8:	687b      	ldr	r3, [r7, #4]
 811abba:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 811abbe:	2103      	movs	r1, #3
 811abc0:	6878      	ldr	r0, [r7, #4]
 811abc2:	f000 f809 	bl	811abd8 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 811abc6:	3708      	adds	r7, #8
 811abc8:	46bd      	mov	sp, r7
 811abca:	bd80      	pop	{r7, pc}
 811abcc:	081260d0 	.word	0x081260d0
 811abd0:	08126294 	.word	0x08126294
 811abd4:	0812615c 	.word	0x0812615c

0811abd8 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 811abd8:	b580      	push	{r7, lr}
 811abda:	b082      	sub	sp, #8
 811abdc:	af00      	add	r7, sp, #0
 811abde:	6078      	str	r0, [r7, #4]
 811abe0:	460b      	mov	r3, r1
 811abe2:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 811abe4:	687b      	ldr	r3, [r7, #4]
 811abe6:	2b00      	cmp	r3, #0
 811abe8:	d106      	bne.n	811abf8 <netif_issue_reports+0x20>
 811abea:	4b18      	ldr	r3, [pc, #96]	@ (811ac4c <netif_issue_reports+0x74>)
 811abec:	f240 326d 	movw	r2, #877	@ 0x36d
 811abf0:	4917      	ldr	r1, [pc, #92]	@ (811ac50 <netif_issue_reports+0x78>)
 811abf2:	4818      	ldr	r0, [pc, #96]	@ (811ac54 <netif_issue_reports+0x7c>)
 811abf4:	f009 f812 	bl	8123c1c <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 811abf8:	687b      	ldr	r3, [r7, #4]
 811abfa:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 811abfe:	f003 0304 	and.w	r3, r3, #4
 811ac02:	2b00      	cmp	r3, #0
 811ac04:	d01e      	beq.n	811ac44 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 811ac06:	687b      	ldr	r3, [r7, #4]
 811ac08:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 811ac0c:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 811ac10:	2b00      	cmp	r3, #0
 811ac12:	d017      	beq.n	811ac44 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 811ac14:	78fb      	ldrb	r3, [r7, #3]
 811ac16:	f003 0301 	and.w	r3, r3, #1
 811ac1a:	2b00      	cmp	r3, #0
 811ac1c:	d013      	beq.n	811ac46 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 811ac1e:	687b      	ldr	r3, [r7, #4]
 811ac20:	3304      	adds	r3, #4
 811ac22:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 811ac24:	2b00      	cmp	r3, #0
 811ac26:	d00e      	beq.n	811ac46 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 811ac28:	687b      	ldr	r3, [r7, #4]
 811ac2a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 811ac2e:	f003 0308 	and.w	r3, r3, #8
 811ac32:	2b00      	cmp	r3, #0
 811ac34:	d007      	beq.n	811ac46 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 811ac36:	687b      	ldr	r3, [r7, #4]
 811ac38:	3304      	adds	r3, #4
 811ac3a:	4619      	mov	r1, r3
 811ac3c:	6878      	ldr	r0, [r7, #4]
 811ac3e:	f7fd fa77 	bl	8118130 <etharp_request>
 811ac42:	e000      	b.n	811ac46 <netif_issue_reports+0x6e>
    return;
 811ac44:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 811ac46:	3708      	adds	r7, #8
 811ac48:	46bd      	mov	sp, r7
 811ac4a:	bd80      	pop	{r7, pc}
 811ac4c:	081260d0 	.word	0x081260d0
 811ac50:	081262b0 	.word	0x081262b0
 811ac54:	0812615c 	.word	0x0812615c

0811ac58 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 811ac58:	b580      	push	{r7, lr}
 811ac5a:	b082      	sub	sp, #8
 811ac5c:	af00      	add	r7, sp, #0
 811ac5e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 811ac60:	687b      	ldr	r3, [r7, #4]
 811ac62:	2b00      	cmp	r3, #0
 811ac64:	d107      	bne.n	811ac76 <netif_set_down+0x1e>
 811ac66:	4b12      	ldr	r3, [pc, #72]	@ (811acb0 <netif_set_down+0x58>)
 811ac68:	f240 329b 	movw	r2, #923	@ 0x39b
 811ac6c:	4911      	ldr	r1, [pc, #68]	@ (811acb4 <netif_set_down+0x5c>)
 811ac6e:	4812      	ldr	r0, [pc, #72]	@ (811acb8 <netif_set_down+0x60>)
 811ac70:	f008 ffd4 	bl	8123c1c <iprintf>
 811ac74:	e019      	b.n	811acaa <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 811ac76:	687b      	ldr	r3, [r7, #4]
 811ac78:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 811ac7c:	f003 0301 	and.w	r3, r3, #1
 811ac80:	2b00      	cmp	r3, #0
 811ac82:	d012      	beq.n	811acaa <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 811ac84:	687b      	ldr	r3, [r7, #4]
 811ac86:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 811ac8a:	f023 0301 	bic.w	r3, r3, #1
 811ac8e:	b2da      	uxtb	r2, r3
 811ac90:	687b      	ldr	r3, [r7, #4]
 811ac92:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 811ac96:	687b      	ldr	r3, [r7, #4]
 811ac98:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 811ac9c:	f003 0308 	and.w	r3, r3, #8
 811aca0:	2b00      	cmp	r3, #0
 811aca2:	d002      	beq.n	811acaa <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 811aca4:	6878      	ldr	r0, [r7, #4]
 811aca6:	f7fc fdb5 	bl	8117814 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 811acaa:	3708      	adds	r7, #8
 811acac:	46bd      	mov	sp, r7
 811acae:	bd80      	pop	{r7, pc}
 811acb0:	081260d0 	.word	0x081260d0
 811acb4:	081262d4 	.word	0x081262d4
 811acb8:	0812615c 	.word	0x0812615c

0811acbc <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 811acbc:	b580      	push	{r7, lr}
 811acbe:	b082      	sub	sp, #8
 811acc0:	af00      	add	r7, sp, #0
 811acc2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 811acc4:	687b      	ldr	r3, [r7, #4]
 811acc6:	2b00      	cmp	r3, #0
 811acc8:	d107      	bne.n	811acda <netif_set_link_up+0x1e>
 811acca:	4b13      	ldr	r3, [pc, #76]	@ (811ad18 <netif_set_link_up+0x5c>)
 811accc:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 811acd0:	4912      	ldr	r1, [pc, #72]	@ (811ad1c <netif_set_link_up+0x60>)
 811acd2:	4813      	ldr	r0, [pc, #76]	@ (811ad20 <netif_set_link_up+0x64>)
 811acd4:	f008 ffa2 	bl	8123c1c <iprintf>
 811acd8:	e01b      	b.n	811ad12 <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 811acda:	687b      	ldr	r3, [r7, #4]
 811acdc:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 811ace0:	f003 0304 	and.w	r3, r3, #4
 811ace4:	2b00      	cmp	r3, #0
 811ace6:	d114      	bne.n	811ad12 <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 811ace8:	687b      	ldr	r3, [r7, #4]
 811acea:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 811acee:	f043 0304 	orr.w	r3, r3, #4
 811acf2:	b2da      	uxtb	r2, r3
 811acf4:	687b      	ldr	r3, [r7, #4]
 811acf6:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 811acfa:	2103      	movs	r1, #3
 811acfc:	6878      	ldr	r0, [r7, #4]
 811acfe:	f7ff ff6b 	bl	811abd8 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 811ad02:	687b      	ldr	r3, [r7, #4]
 811ad04:	69db      	ldr	r3, [r3, #28]
 811ad06:	2b00      	cmp	r3, #0
 811ad08:	d003      	beq.n	811ad12 <netif_set_link_up+0x56>
 811ad0a:	687b      	ldr	r3, [r7, #4]
 811ad0c:	69db      	ldr	r3, [r3, #28]
 811ad0e:	6878      	ldr	r0, [r7, #4]
 811ad10:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 811ad12:	3708      	adds	r7, #8
 811ad14:	46bd      	mov	sp, r7
 811ad16:	bd80      	pop	{r7, pc}
 811ad18:	081260d0 	.word	0x081260d0
 811ad1c:	081262f4 	.word	0x081262f4
 811ad20:	0812615c 	.word	0x0812615c

0811ad24 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 811ad24:	b580      	push	{r7, lr}
 811ad26:	b082      	sub	sp, #8
 811ad28:	af00      	add	r7, sp, #0
 811ad2a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 811ad2c:	687b      	ldr	r3, [r7, #4]
 811ad2e:	2b00      	cmp	r3, #0
 811ad30:	d107      	bne.n	811ad42 <netif_set_link_down+0x1e>
 811ad32:	4b11      	ldr	r3, [pc, #68]	@ (811ad78 <netif_set_link_down+0x54>)
 811ad34:	f240 4206 	movw	r2, #1030	@ 0x406
 811ad38:	4910      	ldr	r1, [pc, #64]	@ (811ad7c <netif_set_link_down+0x58>)
 811ad3a:	4811      	ldr	r0, [pc, #68]	@ (811ad80 <netif_set_link_down+0x5c>)
 811ad3c:	f008 ff6e 	bl	8123c1c <iprintf>
 811ad40:	e017      	b.n	811ad72 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 811ad42:	687b      	ldr	r3, [r7, #4]
 811ad44:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 811ad48:	f003 0304 	and.w	r3, r3, #4
 811ad4c:	2b00      	cmp	r3, #0
 811ad4e:	d010      	beq.n	811ad72 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 811ad50:	687b      	ldr	r3, [r7, #4]
 811ad52:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 811ad56:	f023 0304 	bic.w	r3, r3, #4
 811ad5a:	b2da      	uxtb	r2, r3
 811ad5c:	687b      	ldr	r3, [r7, #4]
 811ad5e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    NETIF_LINK_CALLBACK(netif);
 811ad62:	687b      	ldr	r3, [r7, #4]
 811ad64:	69db      	ldr	r3, [r3, #28]
 811ad66:	2b00      	cmp	r3, #0
 811ad68:	d003      	beq.n	811ad72 <netif_set_link_down+0x4e>
 811ad6a:	687b      	ldr	r3, [r7, #4]
 811ad6c:	69db      	ldr	r3, [r3, #28]
 811ad6e:	6878      	ldr	r0, [r7, #4]
 811ad70:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 811ad72:	3708      	adds	r7, #8
 811ad74:	46bd      	mov	sp, r7
 811ad76:	bd80      	pop	{r7, pc}
 811ad78:	081260d0 	.word	0x081260d0
 811ad7c:	08126318 	.word	0x08126318
 811ad80:	0812615c 	.word	0x0812615c

0811ad84 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 811ad84:	b480      	push	{r7}
 811ad86:	b083      	sub	sp, #12
 811ad88:	af00      	add	r7, sp, #0
 811ad8a:	6078      	str	r0, [r7, #4]
 811ad8c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 811ad8e:	687b      	ldr	r3, [r7, #4]
 811ad90:	2b00      	cmp	r3, #0
 811ad92:	d002      	beq.n	811ad9a <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 811ad94:	687b      	ldr	r3, [r7, #4]
 811ad96:	683a      	ldr	r2, [r7, #0]
 811ad98:	61da      	str	r2, [r3, #28]
  }
}
 811ad9a:	bf00      	nop
 811ad9c:	370c      	adds	r7, #12
 811ad9e:	46bd      	mov	sp, r7
 811ada0:	f85d 7b04 	ldr.w	r7, [sp], #4
 811ada4:	4770      	bx	lr

0811ada6 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 811ada6:	b480      	push	{r7}
 811ada8:	b085      	sub	sp, #20
 811adaa:	af00      	add	r7, sp, #0
 811adac:	60f8      	str	r0, [r7, #12]
 811adae:	60b9      	str	r1, [r7, #8]
 811adb0:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 811adb2:	f06f 030b 	mvn.w	r3, #11
}
 811adb6:	4618      	mov	r0, r3
 811adb8:	3714      	adds	r7, #20
 811adba:	46bd      	mov	sp, r7
 811adbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 811adc0:	4770      	bx	lr
	...

0811adc4 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 811adc4:	b480      	push	{r7}
 811adc6:	b085      	sub	sp, #20
 811adc8:	af00      	add	r7, sp, #0
 811adca:	4603      	mov	r3, r0
 811adcc:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 811adce:	79fb      	ldrb	r3, [r7, #7]
 811add0:	2b00      	cmp	r3, #0
 811add2:	d013      	beq.n	811adfc <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 811add4:	4b0d      	ldr	r3, [pc, #52]	@ (811ae0c <netif_get_by_index+0x48>)
 811add6:	681b      	ldr	r3, [r3, #0]
 811add8:	60fb      	str	r3, [r7, #12]
 811adda:	e00c      	b.n	811adf6 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 811addc:	68fb      	ldr	r3, [r7, #12]
 811adde:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 811ade2:	3301      	adds	r3, #1
 811ade4:	b2db      	uxtb	r3, r3
 811ade6:	79fa      	ldrb	r2, [r7, #7]
 811ade8:	429a      	cmp	r2, r3
 811adea:	d101      	bne.n	811adf0 <netif_get_by_index+0x2c>
        return netif; /* found! */
 811adec:	68fb      	ldr	r3, [r7, #12]
 811adee:	e006      	b.n	811adfe <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 811adf0:	68fb      	ldr	r3, [r7, #12]
 811adf2:	681b      	ldr	r3, [r3, #0]
 811adf4:	60fb      	str	r3, [r7, #12]
 811adf6:	68fb      	ldr	r3, [r7, #12]
 811adf8:	2b00      	cmp	r3, #0
 811adfa:	d1ef      	bne.n	811addc <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 811adfc:	2300      	movs	r3, #0
}
 811adfe:	4618      	mov	r0, r3
 811ae00:	3714      	adds	r7, #20
 811ae02:	46bd      	mov	sp, r7
 811ae04:	f85d 7b04 	ldr.w	r7, [sp], #4
 811ae08:	4770      	bx	lr
 811ae0a:	bf00      	nop
 811ae0c:	1000e488 	.word	0x1000e488

0811ae10 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 811ae10:	b580      	push	{r7, lr}
 811ae12:	b082      	sub	sp, #8
 811ae14:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 811ae16:	f000 fedf 	bl	811bbd8 <sys_arch_protect>
 811ae1a:	6038      	str	r0, [r7, #0]
 811ae1c:	4b0d      	ldr	r3, [pc, #52]	@ (811ae54 <pbuf_free_ooseq+0x44>)
 811ae1e:	2200      	movs	r2, #0
 811ae20:	701a      	strb	r2, [r3, #0]
 811ae22:	6838      	ldr	r0, [r7, #0]
 811ae24:	f000 fee6 	bl	811bbf4 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 811ae28:	4b0b      	ldr	r3, [pc, #44]	@ (811ae58 <pbuf_free_ooseq+0x48>)
 811ae2a:	681b      	ldr	r3, [r3, #0]
 811ae2c:	607b      	str	r3, [r7, #4]
 811ae2e:	e00a      	b.n	811ae46 <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 811ae30:	687b      	ldr	r3, [r7, #4]
 811ae32:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 811ae34:	2b00      	cmp	r3, #0
 811ae36:	d003      	beq.n	811ae40 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 811ae38:	6878      	ldr	r0, [r7, #4]
 811ae3a:	f002 fcd9 	bl	811d7f0 <tcp_free_ooseq>
      return;
 811ae3e:	e005      	b.n	811ae4c <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 811ae40:	687b      	ldr	r3, [r7, #4]
 811ae42:	68db      	ldr	r3, [r3, #12]
 811ae44:	607b      	str	r3, [r7, #4]
 811ae46:	687b      	ldr	r3, [r7, #4]
 811ae48:	2b00      	cmp	r3, #0
 811ae4a:	d1f1      	bne.n	811ae30 <pbuf_free_ooseq+0x20>
    }
  }
}
 811ae4c:	3708      	adds	r7, #8
 811ae4e:	46bd      	mov	sp, r7
 811ae50:	bd80      	pop	{r7, pc}
 811ae52:	bf00      	nop
 811ae54:	1000e491 	.word	0x1000e491
 811ae58:	1000e4a4 	.word	0x1000e4a4

0811ae5c <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 811ae5c:	b580      	push	{r7, lr}
 811ae5e:	b082      	sub	sp, #8
 811ae60:	af00      	add	r7, sp, #0
 811ae62:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 811ae64:	f7ff ffd4 	bl	811ae10 <pbuf_free_ooseq>
}
 811ae68:	bf00      	nop
 811ae6a:	3708      	adds	r7, #8
 811ae6c:	46bd      	mov	sp, r7
 811ae6e:	bd80      	pop	{r7, pc}

0811ae70 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 811ae70:	b580      	push	{r7, lr}
 811ae72:	b082      	sub	sp, #8
 811ae74:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 811ae76:	f000 feaf 	bl	811bbd8 <sys_arch_protect>
 811ae7a:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 811ae7c:	4b0f      	ldr	r3, [pc, #60]	@ (811aebc <pbuf_pool_is_empty+0x4c>)
 811ae7e:	781b      	ldrb	r3, [r3, #0]
 811ae80:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 811ae82:	4b0e      	ldr	r3, [pc, #56]	@ (811aebc <pbuf_pool_is_empty+0x4c>)
 811ae84:	2201      	movs	r2, #1
 811ae86:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 811ae88:	6878      	ldr	r0, [r7, #4]
 811ae8a:	f000 feb3 	bl	811bbf4 <sys_arch_unprotect>

  if (!queued) {
 811ae8e:	78fb      	ldrb	r3, [r7, #3]
 811ae90:	2b00      	cmp	r3, #0
 811ae92:	d10f      	bne.n	811aeb4 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 811ae94:	2100      	movs	r1, #0
 811ae96:	480a      	ldr	r0, [pc, #40]	@ (811aec0 <pbuf_pool_is_empty+0x50>)
 811ae98:	f006 ff82 	bl	8121da0 <tcpip_try_callback>
 811ae9c:	4603      	mov	r3, r0
 811ae9e:	2b00      	cmp	r3, #0
 811aea0:	d008      	beq.n	811aeb4 <pbuf_pool_is_empty+0x44>
 811aea2:	f000 fe99 	bl	811bbd8 <sys_arch_protect>
 811aea6:	6078      	str	r0, [r7, #4]
 811aea8:	4b04      	ldr	r3, [pc, #16]	@ (811aebc <pbuf_pool_is_empty+0x4c>)
 811aeaa:	2200      	movs	r2, #0
 811aeac:	701a      	strb	r2, [r3, #0]
 811aeae:	6878      	ldr	r0, [r7, #4]
 811aeb0:	f000 fea0 	bl	811bbf4 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 811aeb4:	bf00      	nop
 811aeb6:	3708      	adds	r7, #8
 811aeb8:	46bd      	mov	sp, r7
 811aeba:	bd80      	pop	{r7, pc}
 811aebc:	1000e491 	.word	0x1000e491
 811aec0:	0811ae5d 	.word	0x0811ae5d

0811aec4 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 811aec4:	b480      	push	{r7}
 811aec6:	b085      	sub	sp, #20
 811aec8:	af00      	add	r7, sp, #0
 811aeca:	60f8      	str	r0, [r7, #12]
 811aecc:	60b9      	str	r1, [r7, #8]
 811aece:	4611      	mov	r1, r2
 811aed0:	461a      	mov	r2, r3
 811aed2:	460b      	mov	r3, r1
 811aed4:	80fb      	strh	r3, [r7, #6]
 811aed6:	4613      	mov	r3, r2
 811aed8:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 811aeda:	68fb      	ldr	r3, [r7, #12]
 811aedc:	2200      	movs	r2, #0
 811aede:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 811aee0:	68fb      	ldr	r3, [r7, #12]
 811aee2:	68ba      	ldr	r2, [r7, #8]
 811aee4:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 811aee6:	68fb      	ldr	r3, [r7, #12]
 811aee8:	88fa      	ldrh	r2, [r7, #6]
 811aeea:	811a      	strh	r2, [r3, #8]
  p->len = len;
 811aeec:	68fb      	ldr	r3, [r7, #12]
 811aeee:	88ba      	ldrh	r2, [r7, #4]
 811aef0:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 811aef2:	8b3b      	ldrh	r3, [r7, #24]
 811aef4:	b2da      	uxtb	r2, r3
 811aef6:	68fb      	ldr	r3, [r7, #12]
 811aef8:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 811aefa:	68fb      	ldr	r3, [r7, #12]
 811aefc:	7f3a      	ldrb	r2, [r7, #28]
 811aefe:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 811af00:	68fb      	ldr	r3, [r7, #12]
 811af02:	2201      	movs	r2, #1
 811af04:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 811af06:	68fb      	ldr	r3, [r7, #12]
 811af08:	2200      	movs	r2, #0
 811af0a:	73da      	strb	r2, [r3, #15]
}
 811af0c:	bf00      	nop
 811af0e:	3714      	adds	r7, #20
 811af10:	46bd      	mov	sp, r7
 811af12:	f85d 7b04 	ldr.w	r7, [sp], #4
 811af16:	4770      	bx	lr

0811af18 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 811af18:	b580      	push	{r7, lr}
 811af1a:	b08c      	sub	sp, #48	@ 0x30
 811af1c:	af02      	add	r7, sp, #8
 811af1e:	4603      	mov	r3, r0
 811af20:	71fb      	strb	r3, [r7, #7]
 811af22:	460b      	mov	r3, r1
 811af24:	80bb      	strh	r3, [r7, #4]
 811af26:	4613      	mov	r3, r2
 811af28:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 811af2a:	79fb      	ldrb	r3, [r7, #7]
 811af2c:	847b      	strh	r3, [r7, #34]	@ 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 811af2e:	887b      	ldrh	r3, [r7, #2]
 811af30:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 811af34:	d07f      	beq.n	811b036 <pbuf_alloc+0x11e>
 811af36:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 811af3a:	f300 80c7 	bgt.w	811b0cc <pbuf_alloc+0x1b4>
 811af3e:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 811af42:	d010      	beq.n	811af66 <pbuf_alloc+0x4e>
 811af44:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 811af48:	f300 80c0 	bgt.w	811b0cc <pbuf_alloc+0x1b4>
 811af4c:	2b01      	cmp	r3, #1
 811af4e:	d002      	beq.n	811af56 <pbuf_alloc+0x3e>
 811af50:	2b41      	cmp	r3, #65	@ 0x41
 811af52:	f040 80bb 	bne.w	811b0cc <pbuf_alloc+0x1b4>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 811af56:	887a      	ldrh	r2, [r7, #2]
 811af58:	88bb      	ldrh	r3, [r7, #4]
 811af5a:	4619      	mov	r1, r3
 811af5c:	2000      	movs	r0, #0
 811af5e:	f000 f8d1 	bl	811b104 <pbuf_alloc_reference>
 811af62:	6278      	str	r0, [r7, #36]	@ 0x24
      break;
 811af64:	e0bc      	b.n	811b0e0 <pbuf_alloc+0x1c8>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 811af66:	2300      	movs	r3, #0
 811af68:	627b      	str	r3, [r7, #36]	@ 0x24
      last = NULL;
 811af6a:	2300      	movs	r3, #0
 811af6c:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 811af6e:	88bb      	ldrh	r3, [r7, #4]
 811af70:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 811af72:	200c      	movs	r0, #12
 811af74:	f7ff fb9a 	bl	811a6ac <memp_malloc>
 811af78:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 811af7a:	693b      	ldr	r3, [r7, #16]
 811af7c:	2b00      	cmp	r3, #0
 811af7e:	d109      	bne.n	811af94 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 811af80:	f7ff ff76 	bl	811ae70 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 811af84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811af86:	2b00      	cmp	r3, #0
 811af88:	d002      	beq.n	811af90 <pbuf_alloc+0x78>
            pbuf_free(p);
 811af8a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 811af8c:	f000 faa6 	bl	811b4dc <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 811af90:	2300      	movs	r3, #0
 811af92:	e0a6      	b.n	811b0e2 <pbuf_alloc+0x1ca>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 811af94:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 811af96:	3303      	adds	r3, #3
 811af98:	b29b      	uxth	r3, r3
 811af9a:	f023 0303 	bic.w	r3, r3, #3
 811af9e:	b29b      	uxth	r3, r3
 811afa0:	f5c3 7314 	rsb	r3, r3, #592	@ 0x250
 811afa4:	b29b      	uxth	r3, r3
 811afa6:	8b7a      	ldrh	r2, [r7, #26]
 811afa8:	4293      	cmp	r3, r2
 811afaa:	bf28      	it	cs
 811afac:	4613      	movcs	r3, r2
 811afae:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 811afb0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 811afb2:	3310      	adds	r3, #16
 811afb4:	693a      	ldr	r2, [r7, #16]
 811afb6:	4413      	add	r3, r2
 811afb8:	3303      	adds	r3, #3
 811afba:	f023 0303 	bic.w	r3, r3, #3
 811afbe:	4618      	mov	r0, r3
 811afc0:	89f9      	ldrh	r1, [r7, #14]
 811afc2:	8b7a      	ldrh	r2, [r7, #26]
 811afc4:	2300      	movs	r3, #0
 811afc6:	9301      	str	r3, [sp, #4]
 811afc8:	887b      	ldrh	r3, [r7, #2]
 811afca:	9300      	str	r3, [sp, #0]
 811afcc:	460b      	mov	r3, r1
 811afce:	4601      	mov	r1, r0
 811afd0:	6938      	ldr	r0, [r7, #16]
 811afd2:	f7ff ff77 	bl	811aec4 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 811afd6:	693b      	ldr	r3, [r7, #16]
 811afd8:	685b      	ldr	r3, [r3, #4]
 811afda:	f003 0303 	and.w	r3, r3, #3
 811afde:	2b00      	cmp	r3, #0
 811afe0:	d006      	beq.n	811aff0 <pbuf_alloc+0xd8>
 811afe2:	4b42      	ldr	r3, [pc, #264]	@ (811b0ec <pbuf_alloc+0x1d4>)
 811afe4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 811afe8:	4941      	ldr	r1, [pc, #260]	@ (811b0f0 <pbuf_alloc+0x1d8>)
 811afea:	4842      	ldr	r0, [pc, #264]	@ (811b0f4 <pbuf_alloc+0x1dc>)
 811afec:	f008 fe16 	bl	8123c1c <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 811aff0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 811aff2:	3303      	adds	r3, #3
 811aff4:	f023 0303 	bic.w	r3, r3, #3
 811aff8:	f5b3 7f14 	cmp.w	r3, #592	@ 0x250
 811affc:	d106      	bne.n	811b00c <pbuf_alloc+0xf4>
 811affe:	4b3b      	ldr	r3, [pc, #236]	@ (811b0ec <pbuf_alloc+0x1d4>)
 811b000:	f44f 7281 	mov.w	r2, #258	@ 0x102
 811b004:	493c      	ldr	r1, [pc, #240]	@ (811b0f8 <pbuf_alloc+0x1e0>)
 811b006:	483b      	ldr	r0, [pc, #236]	@ (811b0f4 <pbuf_alloc+0x1dc>)
 811b008:	f008 fe08 	bl	8123c1c <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 811b00c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811b00e:	2b00      	cmp	r3, #0
 811b010:	d102      	bne.n	811b018 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 811b012:	693b      	ldr	r3, [r7, #16]
 811b014:	627b      	str	r3, [r7, #36]	@ 0x24
 811b016:	e002      	b.n	811b01e <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 811b018:	69fb      	ldr	r3, [r7, #28]
 811b01a:	693a      	ldr	r2, [r7, #16]
 811b01c:	601a      	str	r2, [r3, #0]
        }
        last = q;
 811b01e:	693b      	ldr	r3, [r7, #16]
 811b020:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 811b022:	8b7a      	ldrh	r2, [r7, #26]
 811b024:	89fb      	ldrh	r3, [r7, #14]
 811b026:	1ad3      	subs	r3, r2, r3
 811b028:	837b      	strh	r3, [r7, #26]
        offset = 0;
 811b02a:	2300      	movs	r3, #0
 811b02c:	847b      	strh	r3, [r7, #34]	@ 0x22
      } while (rem_len > 0);
 811b02e:	8b7b      	ldrh	r3, [r7, #26]
 811b030:	2b00      	cmp	r3, #0
 811b032:	d19e      	bne.n	811af72 <pbuf_alloc+0x5a>
      break;
 811b034:	e054      	b.n	811b0e0 <pbuf_alloc+0x1c8>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 811b036:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 811b038:	3303      	adds	r3, #3
 811b03a:	b29b      	uxth	r3, r3
 811b03c:	f023 0303 	bic.w	r3, r3, #3
 811b040:	b29a      	uxth	r2, r3
 811b042:	88bb      	ldrh	r3, [r7, #4]
 811b044:	3303      	adds	r3, #3
 811b046:	b29b      	uxth	r3, r3
 811b048:	f023 0303 	bic.w	r3, r3, #3
 811b04c:	b29b      	uxth	r3, r3
 811b04e:	4413      	add	r3, r2
 811b050:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 811b052:	8b3b      	ldrh	r3, [r7, #24]
 811b054:	3310      	adds	r3, #16
 811b056:	617b      	str	r3, [r7, #20]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 811b058:	8b3a      	ldrh	r2, [r7, #24]
 811b05a:	88bb      	ldrh	r3, [r7, #4]
 811b05c:	3303      	adds	r3, #3
 811b05e:	f023 0303 	bic.w	r3, r3, #3
 811b062:	429a      	cmp	r2, r3
 811b064:	d306      	bcc.n	811b074 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 811b066:	88bb      	ldrh	r3, [r7, #4]
 811b068:	3303      	adds	r3, #3
 811b06a:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 811b06e:	697a      	ldr	r2, [r7, #20]
 811b070:	429a      	cmp	r2, r3
 811b072:	d201      	bcs.n	811b078 <pbuf_alloc+0x160>
        return NULL;
 811b074:	2300      	movs	r3, #0
 811b076:	e034      	b.n	811b0e2 <pbuf_alloc+0x1ca>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 811b078:	6978      	ldr	r0, [r7, #20]
 811b07a:	f7ff f979 	bl	811a370 <mem_malloc>
 811b07e:	6278      	str	r0, [r7, #36]	@ 0x24
      if (p == NULL) {
 811b080:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811b082:	2b00      	cmp	r3, #0
 811b084:	d101      	bne.n	811b08a <pbuf_alloc+0x172>
        return NULL;
 811b086:	2300      	movs	r3, #0
 811b088:	e02b      	b.n	811b0e2 <pbuf_alloc+0x1ca>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 811b08a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 811b08c:	3310      	adds	r3, #16
 811b08e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 811b090:	4413      	add	r3, r2
 811b092:	3303      	adds	r3, #3
 811b094:	f023 0303 	bic.w	r3, r3, #3
 811b098:	4618      	mov	r0, r3
 811b09a:	88b9      	ldrh	r1, [r7, #4]
 811b09c:	88ba      	ldrh	r2, [r7, #4]
 811b09e:	2300      	movs	r3, #0
 811b0a0:	9301      	str	r3, [sp, #4]
 811b0a2:	887b      	ldrh	r3, [r7, #2]
 811b0a4:	9300      	str	r3, [sp, #0]
 811b0a6:	460b      	mov	r3, r1
 811b0a8:	4601      	mov	r1, r0
 811b0aa:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 811b0ac:	f7ff ff0a 	bl	811aec4 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 811b0b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811b0b2:	685b      	ldr	r3, [r3, #4]
 811b0b4:	f003 0303 	and.w	r3, r3, #3
 811b0b8:	2b00      	cmp	r3, #0
 811b0ba:	d010      	beq.n	811b0de <pbuf_alloc+0x1c6>
 811b0bc:	4b0b      	ldr	r3, [pc, #44]	@ (811b0ec <pbuf_alloc+0x1d4>)
 811b0be:	f44f 7291 	mov.w	r2, #290	@ 0x122
 811b0c2:	490e      	ldr	r1, [pc, #56]	@ (811b0fc <pbuf_alloc+0x1e4>)
 811b0c4:	480b      	ldr	r0, [pc, #44]	@ (811b0f4 <pbuf_alloc+0x1dc>)
 811b0c6:	f008 fda9 	bl	8123c1c <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 811b0ca:	e008      	b.n	811b0de <pbuf_alloc+0x1c6>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 811b0cc:	4b07      	ldr	r3, [pc, #28]	@ (811b0ec <pbuf_alloc+0x1d4>)
 811b0ce:	f240 1227 	movw	r2, #295	@ 0x127
 811b0d2:	490b      	ldr	r1, [pc, #44]	@ (811b100 <pbuf_alloc+0x1e8>)
 811b0d4:	4807      	ldr	r0, [pc, #28]	@ (811b0f4 <pbuf_alloc+0x1dc>)
 811b0d6:	f008 fda1 	bl	8123c1c <iprintf>
      return NULL;
 811b0da:	2300      	movs	r3, #0
 811b0dc:	e001      	b.n	811b0e2 <pbuf_alloc+0x1ca>
      break;
 811b0de:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 811b0e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 811b0e2:	4618      	mov	r0, r3
 811b0e4:	3728      	adds	r7, #40	@ 0x28
 811b0e6:	46bd      	mov	sp, r7
 811b0e8:	bd80      	pop	{r7, pc}
 811b0ea:	bf00      	nop
 811b0ec:	0812633c 	.word	0x0812633c
 811b0f0:	081263ac 	.word	0x081263ac
 811b0f4:	081263dc 	.word	0x081263dc
 811b0f8:	08126404 	.word	0x08126404
 811b0fc:	08126438 	.word	0x08126438
 811b100:	08126464 	.word	0x08126464

0811b104 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 811b104:	b580      	push	{r7, lr}
 811b106:	b086      	sub	sp, #24
 811b108:	af02      	add	r7, sp, #8
 811b10a:	6078      	str	r0, [r7, #4]
 811b10c:	460b      	mov	r3, r1
 811b10e:	807b      	strh	r3, [r7, #2]
 811b110:	4613      	mov	r3, r2
 811b112:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 811b114:	883b      	ldrh	r3, [r7, #0]
 811b116:	2b41      	cmp	r3, #65	@ 0x41
 811b118:	d009      	beq.n	811b12e <pbuf_alloc_reference+0x2a>
 811b11a:	883b      	ldrh	r3, [r7, #0]
 811b11c:	2b01      	cmp	r3, #1
 811b11e:	d006      	beq.n	811b12e <pbuf_alloc_reference+0x2a>
 811b120:	4b0f      	ldr	r3, [pc, #60]	@ (811b160 <pbuf_alloc_reference+0x5c>)
 811b122:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 811b126:	490f      	ldr	r1, [pc, #60]	@ (811b164 <pbuf_alloc_reference+0x60>)
 811b128:	480f      	ldr	r0, [pc, #60]	@ (811b168 <pbuf_alloc_reference+0x64>)
 811b12a:	f008 fd77 	bl	8123c1c <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 811b12e:	200b      	movs	r0, #11
 811b130:	f7ff fabc 	bl	811a6ac <memp_malloc>
 811b134:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 811b136:	68fb      	ldr	r3, [r7, #12]
 811b138:	2b00      	cmp	r3, #0
 811b13a:	d101      	bne.n	811b140 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 811b13c:	2300      	movs	r3, #0
 811b13e:	e00b      	b.n	811b158 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 811b140:	8879      	ldrh	r1, [r7, #2]
 811b142:	887a      	ldrh	r2, [r7, #2]
 811b144:	2300      	movs	r3, #0
 811b146:	9301      	str	r3, [sp, #4]
 811b148:	883b      	ldrh	r3, [r7, #0]
 811b14a:	9300      	str	r3, [sp, #0]
 811b14c:	460b      	mov	r3, r1
 811b14e:	6879      	ldr	r1, [r7, #4]
 811b150:	68f8      	ldr	r0, [r7, #12]
 811b152:	f7ff feb7 	bl	811aec4 <pbuf_init_alloced_pbuf>
  return p;
 811b156:	68fb      	ldr	r3, [r7, #12]
}
 811b158:	4618      	mov	r0, r3
 811b15a:	3710      	adds	r7, #16
 811b15c:	46bd      	mov	sp, r7
 811b15e:	bd80      	pop	{r7, pc}
 811b160:	0812633c 	.word	0x0812633c
 811b164:	08126480 	.word	0x08126480
 811b168:	081263dc 	.word	0x081263dc

0811b16c <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 811b16c:	b580      	push	{r7, lr}
 811b16e:	b088      	sub	sp, #32
 811b170:	af02      	add	r7, sp, #8
 811b172:	607b      	str	r3, [r7, #4]
 811b174:	4603      	mov	r3, r0
 811b176:	73fb      	strb	r3, [r7, #15]
 811b178:	460b      	mov	r3, r1
 811b17a:	81bb      	strh	r3, [r7, #12]
 811b17c:	4613      	mov	r3, r2
 811b17e:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 811b180:	7bfb      	ldrb	r3, [r7, #15]
 811b182:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 811b184:	8a7b      	ldrh	r3, [r7, #18]
 811b186:	3303      	adds	r3, #3
 811b188:	f023 0203 	bic.w	r2, r3, #3
 811b18c:	89bb      	ldrh	r3, [r7, #12]
 811b18e:	441a      	add	r2, r3
 811b190:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 811b192:	429a      	cmp	r2, r3
 811b194:	d901      	bls.n	811b19a <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 811b196:	2300      	movs	r3, #0
 811b198:	e018      	b.n	811b1cc <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 811b19a:	6a3b      	ldr	r3, [r7, #32]
 811b19c:	2b00      	cmp	r3, #0
 811b19e:	d007      	beq.n	811b1b0 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 811b1a0:	8a7b      	ldrh	r3, [r7, #18]
 811b1a2:	3303      	adds	r3, #3
 811b1a4:	f023 0303 	bic.w	r3, r3, #3
 811b1a8:	6a3a      	ldr	r2, [r7, #32]
 811b1aa:	4413      	add	r3, r2
 811b1ac:	617b      	str	r3, [r7, #20]
 811b1ae:	e001      	b.n	811b1b4 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 811b1b0:	2300      	movs	r3, #0
 811b1b2:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 811b1b4:	6878      	ldr	r0, [r7, #4]
 811b1b6:	89b9      	ldrh	r1, [r7, #12]
 811b1b8:	89ba      	ldrh	r2, [r7, #12]
 811b1ba:	2302      	movs	r3, #2
 811b1bc:	9301      	str	r3, [sp, #4]
 811b1be:	897b      	ldrh	r3, [r7, #10]
 811b1c0:	9300      	str	r3, [sp, #0]
 811b1c2:	460b      	mov	r3, r1
 811b1c4:	6979      	ldr	r1, [r7, #20]
 811b1c6:	f7ff fe7d 	bl	811aec4 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 811b1ca:	687b      	ldr	r3, [r7, #4]
}
 811b1cc:	4618      	mov	r0, r3
 811b1ce:	3718      	adds	r7, #24
 811b1d0:	46bd      	mov	sp, r7
 811b1d2:	bd80      	pop	{r7, pc}

0811b1d4 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 811b1d4:	b580      	push	{r7, lr}
 811b1d6:	b084      	sub	sp, #16
 811b1d8:	af00      	add	r7, sp, #0
 811b1da:	6078      	str	r0, [r7, #4]
 811b1dc:	460b      	mov	r3, r1
 811b1de:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 811b1e0:	687b      	ldr	r3, [r7, #4]
 811b1e2:	2b00      	cmp	r3, #0
 811b1e4:	d106      	bne.n	811b1f4 <pbuf_realloc+0x20>
 811b1e6:	4b39      	ldr	r3, [pc, #228]	@ (811b2cc <pbuf_realloc+0xf8>)
 811b1e8:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 811b1ec:	4938      	ldr	r1, [pc, #224]	@ (811b2d0 <pbuf_realloc+0xfc>)
 811b1ee:	4839      	ldr	r0, [pc, #228]	@ (811b2d4 <pbuf_realloc+0x100>)
 811b1f0:	f008 fd14 	bl	8123c1c <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 811b1f4:	687b      	ldr	r3, [r7, #4]
 811b1f6:	891b      	ldrh	r3, [r3, #8]
 811b1f8:	887a      	ldrh	r2, [r7, #2]
 811b1fa:	429a      	cmp	r2, r3
 811b1fc:	d261      	bcs.n	811b2c2 <pbuf_realloc+0xee>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 811b1fe:	687b      	ldr	r3, [r7, #4]
 811b200:	891a      	ldrh	r2, [r3, #8]
 811b202:	887b      	ldrh	r3, [r7, #2]
 811b204:	1ad3      	subs	r3, r2, r3
 811b206:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 811b208:	887b      	ldrh	r3, [r7, #2]
 811b20a:	817b      	strh	r3, [r7, #10]
  q = p;
 811b20c:	687b      	ldr	r3, [r7, #4]
 811b20e:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 811b210:	e018      	b.n	811b244 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 811b212:	68fb      	ldr	r3, [r7, #12]
 811b214:	895b      	ldrh	r3, [r3, #10]
 811b216:	897a      	ldrh	r2, [r7, #10]
 811b218:	1ad3      	subs	r3, r2, r3
 811b21a:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 811b21c:	68fb      	ldr	r3, [r7, #12]
 811b21e:	891a      	ldrh	r2, [r3, #8]
 811b220:	893b      	ldrh	r3, [r7, #8]
 811b222:	1ad3      	subs	r3, r2, r3
 811b224:	b29a      	uxth	r2, r3
 811b226:	68fb      	ldr	r3, [r7, #12]
 811b228:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 811b22a:	68fb      	ldr	r3, [r7, #12]
 811b22c:	681b      	ldr	r3, [r3, #0]
 811b22e:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 811b230:	68fb      	ldr	r3, [r7, #12]
 811b232:	2b00      	cmp	r3, #0
 811b234:	d106      	bne.n	811b244 <pbuf_realloc+0x70>
 811b236:	4b25      	ldr	r3, [pc, #148]	@ (811b2cc <pbuf_realloc+0xf8>)
 811b238:	f240 12af 	movw	r2, #431	@ 0x1af
 811b23c:	4926      	ldr	r1, [pc, #152]	@ (811b2d8 <pbuf_realloc+0x104>)
 811b23e:	4825      	ldr	r0, [pc, #148]	@ (811b2d4 <pbuf_realloc+0x100>)
 811b240:	f008 fcec 	bl	8123c1c <iprintf>
  while (rem_len > q->len) {
 811b244:	68fb      	ldr	r3, [r7, #12]
 811b246:	895b      	ldrh	r3, [r3, #10]
 811b248:	897a      	ldrh	r2, [r7, #10]
 811b24a:	429a      	cmp	r2, r3
 811b24c:	d8e1      	bhi.n	811b212 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 811b24e:	68fb      	ldr	r3, [r7, #12]
 811b250:	7b1b      	ldrb	r3, [r3, #12]
 811b252:	f003 030f 	and.w	r3, r3, #15
 811b256:	2b00      	cmp	r3, #0
 811b258:	d11f      	bne.n	811b29a <pbuf_realloc+0xc6>
 811b25a:	68fb      	ldr	r3, [r7, #12]
 811b25c:	895b      	ldrh	r3, [r3, #10]
 811b25e:	897a      	ldrh	r2, [r7, #10]
 811b260:	429a      	cmp	r2, r3
 811b262:	d01a      	beq.n	811b29a <pbuf_realloc+0xc6>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 811b264:	68fb      	ldr	r3, [r7, #12]
 811b266:	7b5b      	ldrb	r3, [r3, #13]
 811b268:	f003 0302 	and.w	r3, r3, #2
 811b26c:	2b00      	cmp	r3, #0
 811b26e:	d114      	bne.n	811b29a <pbuf_realloc+0xc6>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 811b270:	68fb      	ldr	r3, [r7, #12]
 811b272:	685a      	ldr	r2, [r3, #4]
 811b274:	68fb      	ldr	r3, [r7, #12]
 811b276:	1ad2      	subs	r2, r2, r3
 811b278:	897b      	ldrh	r3, [r7, #10]
 811b27a:	4413      	add	r3, r2
 811b27c:	4619      	mov	r1, r3
 811b27e:	68f8      	ldr	r0, [r7, #12]
 811b280:	f7fe ff74 	bl	811a16c <mem_trim>
 811b284:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 811b286:	68fb      	ldr	r3, [r7, #12]
 811b288:	2b00      	cmp	r3, #0
 811b28a:	d106      	bne.n	811b29a <pbuf_realloc+0xc6>
 811b28c:	4b0f      	ldr	r3, [pc, #60]	@ (811b2cc <pbuf_realloc+0xf8>)
 811b28e:	f240 12bd 	movw	r2, #445	@ 0x1bd
 811b292:	4912      	ldr	r1, [pc, #72]	@ (811b2dc <pbuf_realloc+0x108>)
 811b294:	480f      	ldr	r0, [pc, #60]	@ (811b2d4 <pbuf_realloc+0x100>)
 811b296:	f008 fcc1 	bl	8123c1c <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 811b29a:	68fb      	ldr	r3, [r7, #12]
 811b29c:	897a      	ldrh	r2, [r7, #10]
 811b29e:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 811b2a0:	68fb      	ldr	r3, [r7, #12]
 811b2a2:	895a      	ldrh	r2, [r3, #10]
 811b2a4:	68fb      	ldr	r3, [r7, #12]
 811b2a6:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 811b2a8:	68fb      	ldr	r3, [r7, #12]
 811b2aa:	681b      	ldr	r3, [r3, #0]
 811b2ac:	2b00      	cmp	r3, #0
 811b2ae:	d004      	beq.n	811b2ba <pbuf_realloc+0xe6>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 811b2b0:	68fb      	ldr	r3, [r7, #12]
 811b2b2:	681b      	ldr	r3, [r3, #0]
 811b2b4:	4618      	mov	r0, r3
 811b2b6:	f000 f911 	bl	811b4dc <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 811b2ba:	68fb      	ldr	r3, [r7, #12]
 811b2bc:	2200      	movs	r2, #0
 811b2be:	601a      	str	r2, [r3, #0]
 811b2c0:	e000      	b.n	811b2c4 <pbuf_realloc+0xf0>
    return;
 811b2c2:	bf00      	nop

}
 811b2c4:	3710      	adds	r7, #16
 811b2c6:	46bd      	mov	sp, r7
 811b2c8:	bd80      	pop	{r7, pc}
 811b2ca:	bf00      	nop
 811b2cc:	0812633c 	.word	0x0812633c
 811b2d0:	08126494 	.word	0x08126494
 811b2d4:	081263dc 	.word	0x081263dc
 811b2d8:	081264ac 	.word	0x081264ac
 811b2dc:	081264c4 	.word	0x081264c4

0811b2e0 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 811b2e0:	b580      	push	{r7, lr}
 811b2e2:	b086      	sub	sp, #24
 811b2e4:	af00      	add	r7, sp, #0
 811b2e6:	60f8      	str	r0, [r7, #12]
 811b2e8:	60b9      	str	r1, [r7, #8]
 811b2ea:	4613      	mov	r3, r2
 811b2ec:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 811b2ee:	68fb      	ldr	r3, [r7, #12]
 811b2f0:	2b00      	cmp	r3, #0
 811b2f2:	d106      	bne.n	811b302 <pbuf_add_header_impl+0x22>
 811b2f4:	4b2b      	ldr	r3, [pc, #172]	@ (811b3a4 <pbuf_add_header_impl+0xc4>)
 811b2f6:	f240 12df 	movw	r2, #479	@ 0x1df
 811b2fa:	492b      	ldr	r1, [pc, #172]	@ (811b3a8 <pbuf_add_header_impl+0xc8>)
 811b2fc:	482b      	ldr	r0, [pc, #172]	@ (811b3ac <pbuf_add_header_impl+0xcc>)
 811b2fe:	f008 fc8d 	bl	8123c1c <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 811b302:	68fb      	ldr	r3, [r7, #12]
 811b304:	2b00      	cmp	r3, #0
 811b306:	d003      	beq.n	811b310 <pbuf_add_header_impl+0x30>
 811b308:	68bb      	ldr	r3, [r7, #8]
 811b30a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 811b30e:	d301      	bcc.n	811b314 <pbuf_add_header_impl+0x34>
    return 1;
 811b310:	2301      	movs	r3, #1
 811b312:	e043      	b.n	811b39c <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 811b314:	68bb      	ldr	r3, [r7, #8]
 811b316:	2b00      	cmp	r3, #0
 811b318:	d101      	bne.n	811b31e <pbuf_add_header_impl+0x3e>
    return 0;
 811b31a:	2300      	movs	r3, #0
 811b31c:	e03e      	b.n	811b39c <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 811b31e:	68bb      	ldr	r3, [r7, #8]
 811b320:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 811b322:	68fb      	ldr	r3, [r7, #12]
 811b324:	891a      	ldrh	r2, [r3, #8]
 811b326:	8a7b      	ldrh	r3, [r7, #18]
 811b328:	4413      	add	r3, r2
 811b32a:	b29b      	uxth	r3, r3
 811b32c:	8a7a      	ldrh	r2, [r7, #18]
 811b32e:	429a      	cmp	r2, r3
 811b330:	d901      	bls.n	811b336 <pbuf_add_header_impl+0x56>
    return 1;
 811b332:	2301      	movs	r3, #1
 811b334:	e032      	b.n	811b39c <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 811b336:	68fb      	ldr	r3, [r7, #12]
 811b338:	7b1b      	ldrb	r3, [r3, #12]
 811b33a:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 811b33c:	8a3b      	ldrh	r3, [r7, #16]
 811b33e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 811b342:	2b00      	cmp	r3, #0
 811b344:	d00c      	beq.n	811b360 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 811b346:	68fb      	ldr	r3, [r7, #12]
 811b348:	685a      	ldr	r2, [r3, #4]
 811b34a:	68bb      	ldr	r3, [r7, #8]
 811b34c:	425b      	negs	r3, r3
 811b34e:	4413      	add	r3, r2
 811b350:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 811b352:	68fb      	ldr	r3, [r7, #12]
 811b354:	3310      	adds	r3, #16
 811b356:	697a      	ldr	r2, [r7, #20]
 811b358:	429a      	cmp	r2, r3
 811b35a:	d20d      	bcs.n	811b378 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 811b35c:	2301      	movs	r3, #1
 811b35e:	e01d      	b.n	811b39c <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 811b360:	79fb      	ldrb	r3, [r7, #7]
 811b362:	2b00      	cmp	r3, #0
 811b364:	d006      	beq.n	811b374 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 811b366:	68fb      	ldr	r3, [r7, #12]
 811b368:	685a      	ldr	r2, [r3, #4]
 811b36a:	68bb      	ldr	r3, [r7, #8]
 811b36c:	425b      	negs	r3, r3
 811b36e:	4413      	add	r3, r2
 811b370:	617b      	str	r3, [r7, #20]
 811b372:	e001      	b.n	811b378 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 811b374:	2301      	movs	r3, #1
 811b376:	e011      	b.n	811b39c <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 811b378:	68fb      	ldr	r3, [r7, #12]
 811b37a:	697a      	ldr	r2, [r7, #20]
 811b37c:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 811b37e:	68fb      	ldr	r3, [r7, #12]
 811b380:	895a      	ldrh	r2, [r3, #10]
 811b382:	8a7b      	ldrh	r3, [r7, #18]
 811b384:	4413      	add	r3, r2
 811b386:	b29a      	uxth	r2, r3
 811b388:	68fb      	ldr	r3, [r7, #12]
 811b38a:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 811b38c:	68fb      	ldr	r3, [r7, #12]
 811b38e:	891a      	ldrh	r2, [r3, #8]
 811b390:	8a7b      	ldrh	r3, [r7, #18]
 811b392:	4413      	add	r3, r2
 811b394:	b29a      	uxth	r2, r3
 811b396:	68fb      	ldr	r3, [r7, #12]
 811b398:	811a      	strh	r2, [r3, #8]


  return 0;
 811b39a:	2300      	movs	r3, #0
}
 811b39c:	4618      	mov	r0, r3
 811b39e:	3718      	adds	r7, #24
 811b3a0:	46bd      	mov	sp, r7
 811b3a2:	bd80      	pop	{r7, pc}
 811b3a4:	0812633c 	.word	0x0812633c
 811b3a8:	081264e0 	.word	0x081264e0
 811b3ac:	081263dc 	.word	0x081263dc

0811b3b0 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 811b3b0:	b580      	push	{r7, lr}
 811b3b2:	b082      	sub	sp, #8
 811b3b4:	af00      	add	r7, sp, #0
 811b3b6:	6078      	str	r0, [r7, #4]
 811b3b8:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 811b3ba:	2200      	movs	r2, #0
 811b3bc:	6839      	ldr	r1, [r7, #0]
 811b3be:	6878      	ldr	r0, [r7, #4]
 811b3c0:	f7ff ff8e 	bl	811b2e0 <pbuf_add_header_impl>
 811b3c4:	4603      	mov	r3, r0
}
 811b3c6:	4618      	mov	r0, r3
 811b3c8:	3708      	adds	r7, #8
 811b3ca:	46bd      	mov	sp, r7
 811b3cc:	bd80      	pop	{r7, pc}
	...

0811b3d0 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 811b3d0:	b580      	push	{r7, lr}
 811b3d2:	b084      	sub	sp, #16
 811b3d4:	af00      	add	r7, sp, #0
 811b3d6:	6078      	str	r0, [r7, #4]
 811b3d8:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 811b3da:	687b      	ldr	r3, [r7, #4]
 811b3dc:	2b00      	cmp	r3, #0
 811b3de:	d106      	bne.n	811b3ee <pbuf_remove_header+0x1e>
 811b3e0:	4b20      	ldr	r3, [pc, #128]	@ (811b464 <pbuf_remove_header+0x94>)
 811b3e2:	f240 224b 	movw	r2, #587	@ 0x24b
 811b3e6:	4920      	ldr	r1, [pc, #128]	@ (811b468 <pbuf_remove_header+0x98>)
 811b3e8:	4820      	ldr	r0, [pc, #128]	@ (811b46c <pbuf_remove_header+0x9c>)
 811b3ea:	f008 fc17 	bl	8123c1c <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 811b3ee:	687b      	ldr	r3, [r7, #4]
 811b3f0:	2b00      	cmp	r3, #0
 811b3f2:	d003      	beq.n	811b3fc <pbuf_remove_header+0x2c>
 811b3f4:	683b      	ldr	r3, [r7, #0]
 811b3f6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 811b3fa:	d301      	bcc.n	811b400 <pbuf_remove_header+0x30>
    return 1;
 811b3fc:	2301      	movs	r3, #1
 811b3fe:	e02c      	b.n	811b45a <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 811b400:	683b      	ldr	r3, [r7, #0]
 811b402:	2b00      	cmp	r3, #0
 811b404:	d101      	bne.n	811b40a <pbuf_remove_header+0x3a>
    return 0;
 811b406:	2300      	movs	r3, #0
 811b408:	e027      	b.n	811b45a <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 811b40a:	683b      	ldr	r3, [r7, #0]
 811b40c:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 811b40e:	687b      	ldr	r3, [r7, #4]
 811b410:	895b      	ldrh	r3, [r3, #10]
 811b412:	89fa      	ldrh	r2, [r7, #14]
 811b414:	429a      	cmp	r2, r3
 811b416:	d908      	bls.n	811b42a <pbuf_remove_header+0x5a>
 811b418:	4b12      	ldr	r3, [pc, #72]	@ (811b464 <pbuf_remove_header+0x94>)
 811b41a:	f240 2255 	movw	r2, #597	@ 0x255
 811b41e:	4914      	ldr	r1, [pc, #80]	@ (811b470 <pbuf_remove_header+0xa0>)
 811b420:	4812      	ldr	r0, [pc, #72]	@ (811b46c <pbuf_remove_header+0x9c>)
 811b422:	f008 fbfb 	bl	8123c1c <iprintf>
 811b426:	2301      	movs	r3, #1
 811b428:	e017      	b.n	811b45a <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 811b42a:	687b      	ldr	r3, [r7, #4]
 811b42c:	685b      	ldr	r3, [r3, #4]
 811b42e:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 811b430:	687b      	ldr	r3, [r7, #4]
 811b432:	685a      	ldr	r2, [r3, #4]
 811b434:	683b      	ldr	r3, [r7, #0]
 811b436:	441a      	add	r2, r3
 811b438:	687b      	ldr	r3, [r7, #4]
 811b43a:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 811b43c:	687b      	ldr	r3, [r7, #4]
 811b43e:	895a      	ldrh	r2, [r3, #10]
 811b440:	89fb      	ldrh	r3, [r7, #14]
 811b442:	1ad3      	subs	r3, r2, r3
 811b444:	b29a      	uxth	r2, r3
 811b446:	687b      	ldr	r3, [r7, #4]
 811b448:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 811b44a:	687b      	ldr	r3, [r7, #4]
 811b44c:	891a      	ldrh	r2, [r3, #8]
 811b44e:	89fb      	ldrh	r3, [r7, #14]
 811b450:	1ad3      	subs	r3, r2, r3
 811b452:	b29a      	uxth	r2, r3
 811b454:	687b      	ldr	r3, [r7, #4]
 811b456:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 811b458:	2300      	movs	r3, #0
}
 811b45a:	4618      	mov	r0, r3
 811b45c:	3710      	adds	r7, #16
 811b45e:	46bd      	mov	sp, r7
 811b460:	bd80      	pop	{r7, pc}
 811b462:	bf00      	nop
 811b464:	0812633c 	.word	0x0812633c
 811b468:	081264e0 	.word	0x081264e0
 811b46c:	081263dc 	.word	0x081263dc
 811b470:	081264ec 	.word	0x081264ec

0811b474 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 811b474:	b580      	push	{r7, lr}
 811b476:	b082      	sub	sp, #8
 811b478:	af00      	add	r7, sp, #0
 811b47a:	6078      	str	r0, [r7, #4]
 811b47c:	460b      	mov	r3, r1
 811b47e:	807b      	strh	r3, [r7, #2]
 811b480:	4613      	mov	r3, r2
 811b482:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 811b484:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 811b488:	2b00      	cmp	r3, #0
 811b48a:	da08      	bge.n	811b49e <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 811b48c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 811b490:	425b      	negs	r3, r3
 811b492:	4619      	mov	r1, r3
 811b494:	6878      	ldr	r0, [r7, #4]
 811b496:	f7ff ff9b 	bl	811b3d0 <pbuf_remove_header>
 811b49a:	4603      	mov	r3, r0
 811b49c:	e007      	b.n	811b4ae <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 811b49e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 811b4a2:	787a      	ldrb	r2, [r7, #1]
 811b4a4:	4619      	mov	r1, r3
 811b4a6:	6878      	ldr	r0, [r7, #4]
 811b4a8:	f7ff ff1a 	bl	811b2e0 <pbuf_add_header_impl>
 811b4ac:	4603      	mov	r3, r0
  }
}
 811b4ae:	4618      	mov	r0, r3
 811b4b0:	3708      	adds	r7, #8
 811b4b2:	46bd      	mov	sp, r7
 811b4b4:	bd80      	pop	{r7, pc}

0811b4b6 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 811b4b6:	b580      	push	{r7, lr}
 811b4b8:	b082      	sub	sp, #8
 811b4ba:	af00      	add	r7, sp, #0
 811b4bc:	6078      	str	r0, [r7, #4]
 811b4be:	460b      	mov	r3, r1
 811b4c0:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 811b4c2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 811b4c6:	2201      	movs	r2, #1
 811b4c8:	4619      	mov	r1, r3
 811b4ca:	6878      	ldr	r0, [r7, #4]
 811b4cc:	f7ff ffd2 	bl	811b474 <pbuf_header_impl>
 811b4d0:	4603      	mov	r3, r0
}
 811b4d2:	4618      	mov	r0, r3
 811b4d4:	3708      	adds	r7, #8
 811b4d6:	46bd      	mov	sp, r7
 811b4d8:	bd80      	pop	{r7, pc}
	...

0811b4dc <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 811b4dc:	b580      	push	{r7, lr}
 811b4de:	b088      	sub	sp, #32
 811b4e0:	af00      	add	r7, sp, #0
 811b4e2:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 811b4e4:	687b      	ldr	r3, [r7, #4]
 811b4e6:	2b00      	cmp	r3, #0
 811b4e8:	d10b      	bne.n	811b502 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 811b4ea:	687b      	ldr	r3, [r7, #4]
 811b4ec:	2b00      	cmp	r3, #0
 811b4ee:	d106      	bne.n	811b4fe <pbuf_free+0x22>
 811b4f0:	4b3b      	ldr	r3, [pc, #236]	@ (811b5e0 <pbuf_free+0x104>)
 811b4f2:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 811b4f6:	493b      	ldr	r1, [pc, #236]	@ (811b5e4 <pbuf_free+0x108>)
 811b4f8:	483b      	ldr	r0, [pc, #236]	@ (811b5e8 <pbuf_free+0x10c>)
 811b4fa:	f008 fb8f 	bl	8123c1c <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 811b4fe:	2300      	movs	r3, #0
 811b500:	e069      	b.n	811b5d6 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 811b502:	2300      	movs	r3, #0
 811b504:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 811b506:	e062      	b.n	811b5ce <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 811b508:	f000 fb66 	bl	811bbd8 <sys_arch_protect>
 811b50c:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 811b50e:	687b      	ldr	r3, [r7, #4]
 811b510:	7b9b      	ldrb	r3, [r3, #14]
 811b512:	2b00      	cmp	r3, #0
 811b514:	d106      	bne.n	811b524 <pbuf_free+0x48>
 811b516:	4b32      	ldr	r3, [pc, #200]	@ (811b5e0 <pbuf_free+0x104>)
 811b518:	f240 22f1 	movw	r2, #753	@ 0x2f1
 811b51c:	4933      	ldr	r1, [pc, #204]	@ (811b5ec <pbuf_free+0x110>)
 811b51e:	4832      	ldr	r0, [pc, #200]	@ (811b5e8 <pbuf_free+0x10c>)
 811b520:	f008 fb7c 	bl	8123c1c <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 811b524:	687b      	ldr	r3, [r7, #4]
 811b526:	7b9b      	ldrb	r3, [r3, #14]
 811b528:	3b01      	subs	r3, #1
 811b52a:	b2da      	uxtb	r2, r3
 811b52c:	687b      	ldr	r3, [r7, #4]
 811b52e:	739a      	strb	r2, [r3, #14]
 811b530:	687b      	ldr	r3, [r7, #4]
 811b532:	7b9b      	ldrb	r3, [r3, #14]
 811b534:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 811b536:	69b8      	ldr	r0, [r7, #24]
 811b538:	f000 fb5c 	bl	811bbf4 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 811b53c:	7dfb      	ldrb	r3, [r7, #23]
 811b53e:	2b00      	cmp	r3, #0
 811b540:	d143      	bne.n	811b5ca <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 811b542:	687b      	ldr	r3, [r7, #4]
 811b544:	681b      	ldr	r3, [r3, #0]
 811b546:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 811b548:	687b      	ldr	r3, [r7, #4]
 811b54a:	7b1b      	ldrb	r3, [r3, #12]
 811b54c:	f003 030f 	and.w	r3, r3, #15
 811b550:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 811b552:	687b      	ldr	r3, [r7, #4]
 811b554:	7b5b      	ldrb	r3, [r3, #13]
 811b556:	f003 0302 	and.w	r3, r3, #2
 811b55a:	2b00      	cmp	r3, #0
 811b55c:	d011      	beq.n	811b582 <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 811b55e:	687b      	ldr	r3, [r7, #4]
 811b560:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 811b562:	68bb      	ldr	r3, [r7, #8]
 811b564:	691b      	ldr	r3, [r3, #16]
 811b566:	2b00      	cmp	r3, #0
 811b568:	d106      	bne.n	811b578 <pbuf_free+0x9c>
 811b56a:	4b1d      	ldr	r3, [pc, #116]	@ (811b5e0 <pbuf_free+0x104>)
 811b56c:	f240 22ff 	movw	r2, #767	@ 0x2ff
 811b570:	491f      	ldr	r1, [pc, #124]	@ (811b5f0 <pbuf_free+0x114>)
 811b572:	481d      	ldr	r0, [pc, #116]	@ (811b5e8 <pbuf_free+0x10c>)
 811b574:	f008 fb52 	bl	8123c1c <iprintf>
        pc->custom_free_function(p);
 811b578:	68bb      	ldr	r3, [r7, #8]
 811b57a:	691b      	ldr	r3, [r3, #16]
 811b57c:	6878      	ldr	r0, [r7, #4]
 811b57e:	4798      	blx	r3
 811b580:	e01d      	b.n	811b5be <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 811b582:	7bfb      	ldrb	r3, [r7, #15]
 811b584:	2b02      	cmp	r3, #2
 811b586:	d104      	bne.n	811b592 <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 811b588:	6879      	ldr	r1, [r7, #4]
 811b58a:	200c      	movs	r0, #12
 811b58c:	f7ff f904 	bl	811a798 <memp_free>
 811b590:	e015      	b.n	811b5be <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 811b592:	7bfb      	ldrb	r3, [r7, #15]
 811b594:	2b01      	cmp	r3, #1
 811b596:	d104      	bne.n	811b5a2 <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 811b598:	6879      	ldr	r1, [r7, #4]
 811b59a:	200b      	movs	r0, #11
 811b59c:	f7ff f8fc 	bl	811a798 <memp_free>
 811b5a0:	e00d      	b.n	811b5be <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 811b5a2:	7bfb      	ldrb	r3, [r7, #15]
 811b5a4:	2b00      	cmp	r3, #0
 811b5a6:	d103      	bne.n	811b5b0 <pbuf_free+0xd4>
          mem_free(p);
 811b5a8:	6878      	ldr	r0, [r7, #4]
 811b5aa:	f7fe fd4f 	bl	811a04c <mem_free>
 811b5ae:	e006      	b.n	811b5be <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 811b5b0:	4b0b      	ldr	r3, [pc, #44]	@ (811b5e0 <pbuf_free+0x104>)
 811b5b2:	f240 320f 	movw	r2, #783	@ 0x30f
 811b5b6:	490f      	ldr	r1, [pc, #60]	@ (811b5f4 <pbuf_free+0x118>)
 811b5b8:	480b      	ldr	r0, [pc, #44]	@ (811b5e8 <pbuf_free+0x10c>)
 811b5ba:	f008 fb2f 	bl	8123c1c <iprintf>
        }
      }
      count++;
 811b5be:	7ffb      	ldrb	r3, [r7, #31]
 811b5c0:	3301      	adds	r3, #1
 811b5c2:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 811b5c4:	693b      	ldr	r3, [r7, #16]
 811b5c6:	607b      	str	r3, [r7, #4]
 811b5c8:	e001      	b.n	811b5ce <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 811b5ca:	2300      	movs	r3, #0
 811b5cc:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 811b5ce:	687b      	ldr	r3, [r7, #4]
 811b5d0:	2b00      	cmp	r3, #0
 811b5d2:	d199      	bne.n	811b508 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 811b5d4:	7ffb      	ldrb	r3, [r7, #31]
}
 811b5d6:	4618      	mov	r0, r3
 811b5d8:	3720      	adds	r7, #32
 811b5da:	46bd      	mov	sp, r7
 811b5dc:	bd80      	pop	{r7, pc}
 811b5de:	bf00      	nop
 811b5e0:	0812633c 	.word	0x0812633c
 811b5e4:	081264e0 	.word	0x081264e0
 811b5e8:	081263dc 	.word	0x081263dc
 811b5ec:	0812650c 	.word	0x0812650c
 811b5f0:	08126524 	.word	0x08126524
 811b5f4:	08126548 	.word	0x08126548

0811b5f8 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 811b5f8:	b480      	push	{r7}
 811b5fa:	b085      	sub	sp, #20
 811b5fc:	af00      	add	r7, sp, #0
 811b5fe:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 811b600:	2300      	movs	r3, #0
 811b602:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 811b604:	e005      	b.n	811b612 <pbuf_clen+0x1a>
    ++len;
 811b606:	89fb      	ldrh	r3, [r7, #14]
 811b608:	3301      	adds	r3, #1
 811b60a:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 811b60c:	687b      	ldr	r3, [r7, #4]
 811b60e:	681b      	ldr	r3, [r3, #0]
 811b610:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 811b612:	687b      	ldr	r3, [r7, #4]
 811b614:	2b00      	cmp	r3, #0
 811b616:	d1f6      	bne.n	811b606 <pbuf_clen+0xe>
  }
  return len;
 811b618:	89fb      	ldrh	r3, [r7, #14]
}
 811b61a:	4618      	mov	r0, r3
 811b61c:	3714      	adds	r7, #20
 811b61e:	46bd      	mov	sp, r7
 811b620:	f85d 7b04 	ldr.w	r7, [sp], #4
 811b624:	4770      	bx	lr
	...

0811b628 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 811b628:	b580      	push	{r7, lr}
 811b62a:	b084      	sub	sp, #16
 811b62c:	af00      	add	r7, sp, #0
 811b62e:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 811b630:	687b      	ldr	r3, [r7, #4]
 811b632:	2b00      	cmp	r3, #0
 811b634:	d016      	beq.n	811b664 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 811b636:	f000 facf 	bl	811bbd8 <sys_arch_protect>
 811b63a:	60f8      	str	r0, [r7, #12]
 811b63c:	687b      	ldr	r3, [r7, #4]
 811b63e:	7b9b      	ldrb	r3, [r3, #14]
 811b640:	3301      	adds	r3, #1
 811b642:	b2da      	uxtb	r2, r3
 811b644:	687b      	ldr	r3, [r7, #4]
 811b646:	739a      	strb	r2, [r3, #14]
 811b648:	68f8      	ldr	r0, [r7, #12]
 811b64a:	f000 fad3 	bl	811bbf4 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 811b64e:	687b      	ldr	r3, [r7, #4]
 811b650:	7b9b      	ldrb	r3, [r3, #14]
 811b652:	2b00      	cmp	r3, #0
 811b654:	d106      	bne.n	811b664 <pbuf_ref+0x3c>
 811b656:	4b05      	ldr	r3, [pc, #20]	@ (811b66c <pbuf_ref+0x44>)
 811b658:	f240 3242 	movw	r2, #834	@ 0x342
 811b65c:	4904      	ldr	r1, [pc, #16]	@ (811b670 <pbuf_ref+0x48>)
 811b65e:	4805      	ldr	r0, [pc, #20]	@ (811b674 <pbuf_ref+0x4c>)
 811b660:	f008 fadc 	bl	8123c1c <iprintf>
  }
}
 811b664:	bf00      	nop
 811b666:	3710      	adds	r7, #16
 811b668:	46bd      	mov	sp, r7
 811b66a:	bd80      	pop	{r7, pc}
 811b66c:	0812633c 	.word	0x0812633c
 811b670:	0812655c 	.word	0x0812655c
 811b674:	081263dc 	.word	0x081263dc

0811b678 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 811b678:	b580      	push	{r7, lr}
 811b67a:	b084      	sub	sp, #16
 811b67c:	af00      	add	r7, sp, #0
 811b67e:	6078      	str	r0, [r7, #4]
 811b680:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 811b682:	687b      	ldr	r3, [r7, #4]
 811b684:	2b00      	cmp	r3, #0
 811b686:	d002      	beq.n	811b68e <pbuf_cat+0x16>
 811b688:	683b      	ldr	r3, [r7, #0]
 811b68a:	2b00      	cmp	r3, #0
 811b68c:	d107      	bne.n	811b69e <pbuf_cat+0x26>
 811b68e:	4b20      	ldr	r3, [pc, #128]	@ (811b710 <pbuf_cat+0x98>)
 811b690:	f240 3259 	movw	r2, #857	@ 0x359
 811b694:	491f      	ldr	r1, [pc, #124]	@ (811b714 <pbuf_cat+0x9c>)
 811b696:	4820      	ldr	r0, [pc, #128]	@ (811b718 <pbuf_cat+0xa0>)
 811b698:	f008 fac0 	bl	8123c1c <iprintf>
 811b69c:	e034      	b.n	811b708 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 811b69e:	687b      	ldr	r3, [r7, #4]
 811b6a0:	60fb      	str	r3, [r7, #12]
 811b6a2:	e00a      	b.n	811b6ba <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 811b6a4:	68fb      	ldr	r3, [r7, #12]
 811b6a6:	891a      	ldrh	r2, [r3, #8]
 811b6a8:	683b      	ldr	r3, [r7, #0]
 811b6aa:	891b      	ldrh	r3, [r3, #8]
 811b6ac:	4413      	add	r3, r2
 811b6ae:	b29a      	uxth	r2, r3
 811b6b0:	68fb      	ldr	r3, [r7, #12]
 811b6b2:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 811b6b4:	68fb      	ldr	r3, [r7, #12]
 811b6b6:	681b      	ldr	r3, [r3, #0]
 811b6b8:	60fb      	str	r3, [r7, #12]
 811b6ba:	68fb      	ldr	r3, [r7, #12]
 811b6bc:	681b      	ldr	r3, [r3, #0]
 811b6be:	2b00      	cmp	r3, #0
 811b6c0:	d1f0      	bne.n	811b6a4 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 811b6c2:	68fb      	ldr	r3, [r7, #12]
 811b6c4:	891a      	ldrh	r2, [r3, #8]
 811b6c6:	68fb      	ldr	r3, [r7, #12]
 811b6c8:	895b      	ldrh	r3, [r3, #10]
 811b6ca:	429a      	cmp	r2, r3
 811b6cc:	d006      	beq.n	811b6dc <pbuf_cat+0x64>
 811b6ce:	4b10      	ldr	r3, [pc, #64]	@ (811b710 <pbuf_cat+0x98>)
 811b6d0:	f240 3262 	movw	r2, #866	@ 0x362
 811b6d4:	4911      	ldr	r1, [pc, #68]	@ (811b71c <pbuf_cat+0xa4>)
 811b6d6:	4810      	ldr	r0, [pc, #64]	@ (811b718 <pbuf_cat+0xa0>)
 811b6d8:	f008 faa0 	bl	8123c1c <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 811b6dc:	68fb      	ldr	r3, [r7, #12]
 811b6de:	681b      	ldr	r3, [r3, #0]
 811b6e0:	2b00      	cmp	r3, #0
 811b6e2:	d006      	beq.n	811b6f2 <pbuf_cat+0x7a>
 811b6e4:	4b0a      	ldr	r3, [pc, #40]	@ (811b710 <pbuf_cat+0x98>)
 811b6e6:	f240 3263 	movw	r2, #867	@ 0x363
 811b6ea:	490d      	ldr	r1, [pc, #52]	@ (811b720 <pbuf_cat+0xa8>)
 811b6ec:	480a      	ldr	r0, [pc, #40]	@ (811b718 <pbuf_cat+0xa0>)
 811b6ee:	f008 fa95 	bl	8123c1c <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 811b6f2:	68fb      	ldr	r3, [r7, #12]
 811b6f4:	891a      	ldrh	r2, [r3, #8]
 811b6f6:	683b      	ldr	r3, [r7, #0]
 811b6f8:	891b      	ldrh	r3, [r3, #8]
 811b6fa:	4413      	add	r3, r2
 811b6fc:	b29a      	uxth	r2, r3
 811b6fe:	68fb      	ldr	r3, [r7, #12]
 811b700:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 811b702:	68fb      	ldr	r3, [r7, #12]
 811b704:	683a      	ldr	r2, [r7, #0]
 811b706:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 811b708:	3710      	adds	r7, #16
 811b70a:	46bd      	mov	sp, r7
 811b70c:	bd80      	pop	{r7, pc}
 811b70e:	bf00      	nop
 811b710:	0812633c 	.word	0x0812633c
 811b714:	08126570 	.word	0x08126570
 811b718:	081263dc 	.word	0x081263dc
 811b71c:	081265a8 	.word	0x081265a8
 811b720:	081265d8 	.word	0x081265d8

0811b724 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 811b724:	b580      	push	{r7, lr}
 811b726:	b082      	sub	sp, #8
 811b728:	af00      	add	r7, sp, #0
 811b72a:	6078      	str	r0, [r7, #4]
 811b72c:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 811b72e:	6839      	ldr	r1, [r7, #0]
 811b730:	6878      	ldr	r0, [r7, #4]
 811b732:	f7ff ffa1 	bl	811b678 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 811b736:	6838      	ldr	r0, [r7, #0]
 811b738:	f7ff ff76 	bl	811b628 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 811b73c:	bf00      	nop
 811b73e:	3708      	adds	r7, #8
 811b740:	46bd      	mov	sp, r7
 811b742:	bd80      	pop	{r7, pc}

0811b744 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 811b744:	b580      	push	{r7, lr}
 811b746:	b086      	sub	sp, #24
 811b748:	af00      	add	r7, sp, #0
 811b74a:	6078      	str	r0, [r7, #4]
 811b74c:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 811b74e:	2300      	movs	r3, #0
 811b750:	617b      	str	r3, [r7, #20]
 811b752:	2300      	movs	r3, #0
 811b754:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 811b756:	687b      	ldr	r3, [r7, #4]
 811b758:	2b00      	cmp	r3, #0
 811b75a:	d008      	beq.n	811b76e <pbuf_copy+0x2a>
 811b75c:	683b      	ldr	r3, [r7, #0]
 811b75e:	2b00      	cmp	r3, #0
 811b760:	d005      	beq.n	811b76e <pbuf_copy+0x2a>
 811b762:	687b      	ldr	r3, [r7, #4]
 811b764:	891a      	ldrh	r2, [r3, #8]
 811b766:	683b      	ldr	r3, [r7, #0]
 811b768:	891b      	ldrh	r3, [r3, #8]
 811b76a:	429a      	cmp	r2, r3
 811b76c:	d209      	bcs.n	811b782 <pbuf_copy+0x3e>
 811b76e:	4b57      	ldr	r3, [pc, #348]	@ (811b8cc <pbuf_copy+0x188>)
 811b770:	f240 32c9 	movw	r2, #969	@ 0x3c9
 811b774:	4956      	ldr	r1, [pc, #344]	@ (811b8d0 <pbuf_copy+0x18c>)
 811b776:	4857      	ldr	r0, [pc, #348]	@ (811b8d4 <pbuf_copy+0x190>)
 811b778:	f008 fa50 	bl	8123c1c <iprintf>
 811b77c:	f06f 030f 	mvn.w	r3, #15
 811b780:	e09f      	b.n	811b8c2 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 811b782:	687b      	ldr	r3, [r7, #4]
 811b784:	895b      	ldrh	r3, [r3, #10]
 811b786:	461a      	mov	r2, r3
 811b788:	697b      	ldr	r3, [r7, #20]
 811b78a:	1ad2      	subs	r2, r2, r3
 811b78c:	683b      	ldr	r3, [r7, #0]
 811b78e:	895b      	ldrh	r3, [r3, #10]
 811b790:	4619      	mov	r1, r3
 811b792:	693b      	ldr	r3, [r7, #16]
 811b794:	1acb      	subs	r3, r1, r3
 811b796:	429a      	cmp	r2, r3
 811b798:	d306      	bcc.n	811b7a8 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 811b79a:	683b      	ldr	r3, [r7, #0]
 811b79c:	895b      	ldrh	r3, [r3, #10]
 811b79e:	461a      	mov	r2, r3
 811b7a0:	693b      	ldr	r3, [r7, #16]
 811b7a2:	1ad3      	subs	r3, r2, r3
 811b7a4:	60fb      	str	r3, [r7, #12]
 811b7a6:	e005      	b.n	811b7b4 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 811b7a8:	687b      	ldr	r3, [r7, #4]
 811b7aa:	895b      	ldrh	r3, [r3, #10]
 811b7ac:	461a      	mov	r2, r3
 811b7ae:	697b      	ldr	r3, [r7, #20]
 811b7b0:	1ad3      	subs	r3, r2, r3
 811b7b2:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 811b7b4:	687b      	ldr	r3, [r7, #4]
 811b7b6:	685a      	ldr	r2, [r3, #4]
 811b7b8:	697b      	ldr	r3, [r7, #20]
 811b7ba:	18d0      	adds	r0, r2, r3
 811b7bc:	683b      	ldr	r3, [r7, #0]
 811b7be:	685a      	ldr	r2, [r3, #4]
 811b7c0:	693b      	ldr	r3, [r7, #16]
 811b7c2:	4413      	add	r3, r2
 811b7c4:	68fa      	ldr	r2, [r7, #12]
 811b7c6:	4619      	mov	r1, r3
 811b7c8:	f008 fcb7 	bl	812413a <memcpy>
    offset_to += len;
 811b7cc:	697a      	ldr	r2, [r7, #20]
 811b7ce:	68fb      	ldr	r3, [r7, #12]
 811b7d0:	4413      	add	r3, r2
 811b7d2:	617b      	str	r3, [r7, #20]
    offset_from += len;
 811b7d4:	693a      	ldr	r2, [r7, #16]
 811b7d6:	68fb      	ldr	r3, [r7, #12]
 811b7d8:	4413      	add	r3, r2
 811b7da:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 811b7dc:	687b      	ldr	r3, [r7, #4]
 811b7de:	895b      	ldrh	r3, [r3, #10]
 811b7e0:	461a      	mov	r2, r3
 811b7e2:	697b      	ldr	r3, [r7, #20]
 811b7e4:	4293      	cmp	r3, r2
 811b7e6:	d906      	bls.n	811b7f6 <pbuf_copy+0xb2>
 811b7e8:	4b38      	ldr	r3, [pc, #224]	@ (811b8cc <pbuf_copy+0x188>)
 811b7ea:	f240 32d9 	movw	r2, #985	@ 0x3d9
 811b7ee:	493a      	ldr	r1, [pc, #232]	@ (811b8d8 <pbuf_copy+0x194>)
 811b7f0:	4838      	ldr	r0, [pc, #224]	@ (811b8d4 <pbuf_copy+0x190>)
 811b7f2:	f008 fa13 	bl	8123c1c <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 811b7f6:	683b      	ldr	r3, [r7, #0]
 811b7f8:	895b      	ldrh	r3, [r3, #10]
 811b7fa:	461a      	mov	r2, r3
 811b7fc:	693b      	ldr	r3, [r7, #16]
 811b7fe:	4293      	cmp	r3, r2
 811b800:	d906      	bls.n	811b810 <pbuf_copy+0xcc>
 811b802:	4b32      	ldr	r3, [pc, #200]	@ (811b8cc <pbuf_copy+0x188>)
 811b804:	f240 32da 	movw	r2, #986	@ 0x3da
 811b808:	4934      	ldr	r1, [pc, #208]	@ (811b8dc <pbuf_copy+0x198>)
 811b80a:	4832      	ldr	r0, [pc, #200]	@ (811b8d4 <pbuf_copy+0x190>)
 811b80c:	f008 fa06 	bl	8123c1c <iprintf>
    if (offset_from >= p_from->len) {
 811b810:	683b      	ldr	r3, [r7, #0]
 811b812:	895b      	ldrh	r3, [r3, #10]
 811b814:	461a      	mov	r2, r3
 811b816:	693b      	ldr	r3, [r7, #16]
 811b818:	4293      	cmp	r3, r2
 811b81a:	d304      	bcc.n	811b826 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 811b81c:	2300      	movs	r3, #0
 811b81e:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 811b820:	683b      	ldr	r3, [r7, #0]
 811b822:	681b      	ldr	r3, [r3, #0]
 811b824:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 811b826:	687b      	ldr	r3, [r7, #4]
 811b828:	895b      	ldrh	r3, [r3, #10]
 811b82a:	461a      	mov	r2, r3
 811b82c:	697b      	ldr	r3, [r7, #20]
 811b82e:	4293      	cmp	r3, r2
 811b830:	d114      	bne.n	811b85c <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 811b832:	2300      	movs	r3, #0
 811b834:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 811b836:	687b      	ldr	r3, [r7, #4]
 811b838:	681b      	ldr	r3, [r3, #0]
 811b83a:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 811b83c:	687b      	ldr	r3, [r7, #4]
 811b83e:	2b00      	cmp	r3, #0
 811b840:	d10c      	bne.n	811b85c <pbuf_copy+0x118>
 811b842:	683b      	ldr	r3, [r7, #0]
 811b844:	2b00      	cmp	r3, #0
 811b846:	d009      	beq.n	811b85c <pbuf_copy+0x118>
 811b848:	4b20      	ldr	r3, [pc, #128]	@ (811b8cc <pbuf_copy+0x188>)
 811b84a:	f44f 7279 	mov.w	r2, #996	@ 0x3e4
 811b84e:	4924      	ldr	r1, [pc, #144]	@ (811b8e0 <pbuf_copy+0x19c>)
 811b850:	4820      	ldr	r0, [pc, #128]	@ (811b8d4 <pbuf_copy+0x190>)
 811b852:	f008 f9e3 	bl	8123c1c <iprintf>
 811b856:	f06f 030f 	mvn.w	r3, #15
 811b85a:	e032      	b.n	811b8c2 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 811b85c:	683b      	ldr	r3, [r7, #0]
 811b85e:	2b00      	cmp	r3, #0
 811b860:	d013      	beq.n	811b88a <pbuf_copy+0x146>
 811b862:	683b      	ldr	r3, [r7, #0]
 811b864:	895a      	ldrh	r2, [r3, #10]
 811b866:	683b      	ldr	r3, [r7, #0]
 811b868:	891b      	ldrh	r3, [r3, #8]
 811b86a:	429a      	cmp	r2, r3
 811b86c:	d10d      	bne.n	811b88a <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 811b86e:	683b      	ldr	r3, [r7, #0]
 811b870:	681b      	ldr	r3, [r3, #0]
 811b872:	2b00      	cmp	r3, #0
 811b874:	d009      	beq.n	811b88a <pbuf_copy+0x146>
 811b876:	4b15      	ldr	r3, [pc, #84]	@ (811b8cc <pbuf_copy+0x188>)
 811b878:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 811b87c:	4919      	ldr	r1, [pc, #100]	@ (811b8e4 <pbuf_copy+0x1a0>)
 811b87e:	4815      	ldr	r0, [pc, #84]	@ (811b8d4 <pbuf_copy+0x190>)
 811b880:	f008 f9cc 	bl	8123c1c <iprintf>
 811b884:	f06f 0305 	mvn.w	r3, #5
 811b888:	e01b      	b.n	811b8c2 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 811b88a:	687b      	ldr	r3, [r7, #4]
 811b88c:	2b00      	cmp	r3, #0
 811b88e:	d013      	beq.n	811b8b8 <pbuf_copy+0x174>
 811b890:	687b      	ldr	r3, [r7, #4]
 811b892:	895a      	ldrh	r2, [r3, #10]
 811b894:	687b      	ldr	r3, [r7, #4]
 811b896:	891b      	ldrh	r3, [r3, #8]
 811b898:	429a      	cmp	r2, r3
 811b89a:	d10d      	bne.n	811b8b8 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 811b89c:	687b      	ldr	r3, [r7, #4]
 811b89e:	681b      	ldr	r3, [r3, #0]
 811b8a0:	2b00      	cmp	r3, #0
 811b8a2:	d009      	beq.n	811b8b8 <pbuf_copy+0x174>
 811b8a4:	4b09      	ldr	r3, [pc, #36]	@ (811b8cc <pbuf_copy+0x188>)
 811b8a6:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 811b8aa:	490e      	ldr	r1, [pc, #56]	@ (811b8e4 <pbuf_copy+0x1a0>)
 811b8ac:	4809      	ldr	r0, [pc, #36]	@ (811b8d4 <pbuf_copy+0x190>)
 811b8ae:	f008 f9b5 	bl	8123c1c <iprintf>
 811b8b2:	f06f 0305 	mvn.w	r3, #5
 811b8b6:	e004      	b.n	811b8c2 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 811b8b8:	683b      	ldr	r3, [r7, #0]
 811b8ba:	2b00      	cmp	r3, #0
 811b8bc:	f47f af61 	bne.w	811b782 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 811b8c0:	2300      	movs	r3, #0
}
 811b8c2:	4618      	mov	r0, r3
 811b8c4:	3718      	adds	r7, #24
 811b8c6:	46bd      	mov	sp, r7
 811b8c8:	bd80      	pop	{r7, pc}
 811b8ca:	bf00      	nop
 811b8cc:	0812633c 	.word	0x0812633c
 811b8d0:	08126624 	.word	0x08126624
 811b8d4:	081263dc 	.word	0x081263dc
 811b8d8:	08126654 	.word	0x08126654
 811b8dc:	0812666c 	.word	0x0812666c
 811b8e0:	08126688 	.word	0x08126688
 811b8e4:	08126698 	.word	0x08126698

0811b8e8 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 811b8e8:	b580      	push	{r7, lr}
 811b8ea:	b088      	sub	sp, #32
 811b8ec:	af00      	add	r7, sp, #0
 811b8ee:	60f8      	str	r0, [r7, #12]
 811b8f0:	60b9      	str	r1, [r7, #8]
 811b8f2:	4611      	mov	r1, r2
 811b8f4:	461a      	mov	r2, r3
 811b8f6:	460b      	mov	r3, r1
 811b8f8:	80fb      	strh	r3, [r7, #6]
 811b8fa:	4613      	mov	r3, r2
 811b8fc:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 811b8fe:	2300      	movs	r3, #0
 811b900:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 811b902:	2300      	movs	r3, #0
 811b904:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 811b906:	68fb      	ldr	r3, [r7, #12]
 811b908:	2b00      	cmp	r3, #0
 811b90a:	d108      	bne.n	811b91e <pbuf_copy_partial+0x36>
 811b90c:	4b2b      	ldr	r3, [pc, #172]	@ (811b9bc <pbuf_copy_partial+0xd4>)
 811b90e:	f240 420a 	movw	r2, #1034	@ 0x40a
 811b912:	492b      	ldr	r1, [pc, #172]	@ (811b9c0 <pbuf_copy_partial+0xd8>)
 811b914:	482b      	ldr	r0, [pc, #172]	@ (811b9c4 <pbuf_copy_partial+0xdc>)
 811b916:	f008 f981 	bl	8123c1c <iprintf>
 811b91a:	2300      	movs	r3, #0
 811b91c:	e04a      	b.n	811b9b4 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 811b91e:	68bb      	ldr	r3, [r7, #8]
 811b920:	2b00      	cmp	r3, #0
 811b922:	d108      	bne.n	811b936 <pbuf_copy_partial+0x4e>
 811b924:	4b25      	ldr	r3, [pc, #148]	@ (811b9bc <pbuf_copy_partial+0xd4>)
 811b926:	f240 420b 	movw	r2, #1035	@ 0x40b
 811b92a:	4927      	ldr	r1, [pc, #156]	@ (811b9c8 <pbuf_copy_partial+0xe0>)
 811b92c:	4825      	ldr	r0, [pc, #148]	@ (811b9c4 <pbuf_copy_partial+0xdc>)
 811b92e:	f008 f975 	bl	8123c1c <iprintf>
 811b932:	2300      	movs	r3, #0
 811b934:	e03e      	b.n	811b9b4 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 811b936:	68fb      	ldr	r3, [r7, #12]
 811b938:	61fb      	str	r3, [r7, #28]
 811b93a:	e034      	b.n	811b9a6 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 811b93c:	88bb      	ldrh	r3, [r7, #4]
 811b93e:	2b00      	cmp	r3, #0
 811b940:	d00a      	beq.n	811b958 <pbuf_copy_partial+0x70>
 811b942:	69fb      	ldr	r3, [r7, #28]
 811b944:	895b      	ldrh	r3, [r3, #10]
 811b946:	88ba      	ldrh	r2, [r7, #4]
 811b948:	429a      	cmp	r2, r3
 811b94a:	d305      	bcc.n	811b958 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 811b94c:	69fb      	ldr	r3, [r7, #28]
 811b94e:	895b      	ldrh	r3, [r3, #10]
 811b950:	88ba      	ldrh	r2, [r7, #4]
 811b952:	1ad3      	subs	r3, r2, r3
 811b954:	80bb      	strh	r3, [r7, #4]
 811b956:	e023      	b.n	811b9a0 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 811b958:	69fb      	ldr	r3, [r7, #28]
 811b95a:	895a      	ldrh	r2, [r3, #10]
 811b95c:	88bb      	ldrh	r3, [r7, #4]
 811b95e:	1ad3      	subs	r3, r2, r3
 811b960:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 811b962:	8b3a      	ldrh	r2, [r7, #24]
 811b964:	88fb      	ldrh	r3, [r7, #6]
 811b966:	429a      	cmp	r2, r3
 811b968:	d901      	bls.n	811b96e <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 811b96a:	88fb      	ldrh	r3, [r7, #6]
 811b96c:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 811b96e:	8b7b      	ldrh	r3, [r7, #26]
 811b970:	68ba      	ldr	r2, [r7, #8]
 811b972:	18d0      	adds	r0, r2, r3
 811b974:	69fb      	ldr	r3, [r7, #28]
 811b976:	685a      	ldr	r2, [r3, #4]
 811b978:	88bb      	ldrh	r3, [r7, #4]
 811b97a:	4413      	add	r3, r2
 811b97c:	8b3a      	ldrh	r2, [r7, #24]
 811b97e:	4619      	mov	r1, r3
 811b980:	f008 fbdb 	bl	812413a <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 811b984:	8afa      	ldrh	r2, [r7, #22]
 811b986:	8b3b      	ldrh	r3, [r7, #24]
 811b988:	4413      	add	r3, r2
 811b98a:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 811b98c:	8b7a      	ldrh	r2, [r7, #26]
 811b98e:	8b3b      	ldrh	r3, [r7, #24]
 811b990:	4413      	add	r3, r2
 811b992:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 811b994:	88fa      	ldrh	r2, [r7, #6]
 811b996:	8b3b      	ldrh	r3, [r7, #24]
 811b998:	1ad3      	subs	r3, r2, r3
 811b99a:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 811b99c:	2300      	movs	r3, #0
 811b99e:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 811b9a0:	69fb      	ldr	r3, [r7, #28]
 811b9a2:	681b      	ldr	r3, [r3, #0]
 811b9a4:	61fb      	str	r3, [r7, #28]
 811b9a6:	88fb      	ldrh	r3, [r7, #6]
 811b9a8:	2b00      	cmp	r3, #0
 811b9aa:	d002      	beq.n	811b9b2 <pbuf_copy_partial+0xca>
 811b9ac:	69fb      	ldr	r3, [r7, #28]
 811b9ae:	2b00      	cmp	r3, #0
 811b9b0:	d1c4      	bne.n	811b93c <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 811b9b2:	8afb      	ldrh	r3, [r7, #22]
}
 811b9b4:	4618      	mov	r0, r3
 811b9b6:	3720      	adds	r7, #32
 811b9b8:	46bd      	mov	sp, r7
 811b9ba:	bd80      	pop	{r7, pc}
 811b9bc:	0812633c 	.word	0x0812633c
 811b9c0:	081266c4 	.word	0x081266c4
 811b9c4:	081263dc 	.word	0x081263dc
 811b9c8:	081266e4 	.word	0x081266e4

0811b9cc <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 811b9cc:	b580      	push	{r7, lr}
 811b9ce:	b084      	sub	sp, #16
 811b9d0:	af00      	add	r7, sp, #0
 811b9d2:	4603      	mov	r3, r0
 811b9d4:	603a      	str	r2, [r7, #0]
 811b9d6:	71fb      	strb	r3, [r7, #7]
 811b9d8:	460b      	mov	r3, r1
 811b9da:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 811b9dc:	683b      	ldr	r3, [r7, #0]
 811b9de:	8919      	ldrh	r1, [r3, #8]
 811b9e0:	88ba      	ldrh	r2, [r7, #4]
 811b9e2:	79fb      	ldrb	r3, [r7, #7]
 811b9e4:	4618      	mov	r0, r3
 811b9e6:	f7ff fa97 	bl	811af18 <pbuf_alloc>
 811b9ea:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 811b9ec:	68fb      	ldr	r3, [r7, #12]
 811b9ee:	2b00      	cmp	r3, #0
 811b9f0:	d101      	bne.n	811b9f6 <pbuf_clone+0x2a>
    return NULL;
 811b9f2:	2300      	movs	r3, #0
 811b9f4:	e011      	b.n	811ba1a <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 811b9f6:	6839      	ldr	r1, [r7, #0]
 811b9f8:	68f8      	ldr	r0, [r7, #12]
 811b9fa:	f7ff fea3 	bl	811b744 <pbuf_copy>
 811b9fe:	4603      	mov	r3, r0
 811ba00:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 811ba02:	f997 300b 	ldrsb.w	r3, [r7, #11]
 811ba06:	2b00      	cmp	r3, #0
 811ba08:	d006      	beq.n	811ba18 <pbuf_clone+0x4c>
 811ba0a:	4b06      	ldr	r3, [pc, #24]	@ (811ba24 <pbuf_clone+0x58>)
 811ba0c:	f240 5224 	movw	r2, #1316	@ 0x524
 811ba10:	4905      	ldr	r1, [pc, #20]	@ (811ba28 <pbuf_clone+0x5c>)
 811ba12:	4806      	ldr	r0, [pc, #24]	@ (811ba2c <pbuf_clone+0x60>)
 811ba14:	f008 f902 	bl	8123c1c <iprintf>
  return q;
 811ba18:	68fb      	ldr	r3, [r7, #12]
}
 811ba1a:	4618      	mov	r0, r3
 811ba1c:	3710      	adds	r7, #16
 811ba1e:	46bd      	mov	sp, r7
 811ba20:	bd80      	pop	{r7, pc}
 811ba22:	bf00      	nop
 811ba24:	0812633c 	.word	0x0812633c
 811ba28:	081267f0 	.word	0x081267f0
 811ba2c:	081263dc 	.word	0x081263dc

0811ba30 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 811ba30:	b580      	push	{r7, lr}
 811ba32:	b082      	sub	sp, #8
 811ba34:	af00      	add	r7, sp, #0
 811ba36:	6078      	str	r0, [r7, #4]
 811ba38:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
#else
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 811ba3a:	683b      	ldr	r3, [r7, #0]
 811ba3c:	2200      	movs	r2, #0
 811ba3e:	2104      	movs	r1, #4
 811ba40:	4618      	mov	r0, r3
 811ba42:	f7f7 fa8d 	bl	8112f60 <osMessageQueueNew>
 811ba46:	4602      	mov	r2, r0
 811ba48:	687b      	ldr	r3, [r7, #4]
 811ba4a:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 811ba4c:	687b      	ldr	r3, [r7, #4]
 811ba4e:	681b      	ldr	r3, [r3, #0]
 811ba50:	2b00      	cmp	r3, #0
 811ba52:	d102      	bne.n	811ba5a <sys_mbox_new+0x2a>
    return ERR_MEM;
 811ba54:	f04f 33ff 	mov.w	r3, #4294967295
 811ba58:	e000      	b.n	811ba5c <sys_mbox_new+0x2c>

  return ERR_OK;
 811ba5a:	2300      	movs	r3, #0
}
 811ba5c:	4618      	mov	r0, r3
 811ba5e:	3708      	adds	r7, #8
 811ba60:	46bd      	mov	sp, r7
 811ba62:	bd80      	pop	{r7, pc}

0811ba64 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 811ba64:	b580      	push	{r7, lr}
 811ba66:	b084      	sub	sp, #16
 811ba68:	af00      	add	r7, sp, #0
 811ba6a:	6078      	str	r0, [r7, #4]
 811ba6c:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 811ba6e:	687b      	ldr	r3, [r7, #4]
 811ba70:	6818      	ldr	r0, [r3, #0]
 811ba72:	4639      	mov	r1, r7
 811ba74:	2300      	movs	r3, #0
 811ba76:	2200      	movs	r2, #0
 811ba78:	f7f7 fae6 	bl	8113048 <osMessageQueuePut>
 811ba7c:	4603      	mov	r3, r0
 811ba7e:	2b00      	cmp	r3, #0
 811ba80:	d102      	bne.n	811ba88 <sys_mbox_trypost+0x24>
#endif
  {
    result = ERR_OK;
 811ba82:	2300      	movs	r3, #0
 811ba84:	73fb      	strb	r3, [r7, #15]
 811ba86:	e001      	b.n	811ba8c <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 811ba88:	23ff      	movs	r3, #255	@ 0xff
 811ba8a:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 811ba8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 811ba90:	4618      	mov	r0, r3
 811ba92:	3710      	adds	r7, #16
 811ba94:	46bd      	mov	sp, r7
 811ba96:	bd80      	pop	{r7, pc}

0811ba98 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 811ba98:	b580      	push	{r7, lr}
 811ba9a:	b086      	sub	sp, #24
 811ba9c:	af00      	add	r7, sp, #0
 811ba9e:	60f8      	str	r0, [r7, #12]
 811baa0:	60b9      	str	r1, [r7, #8]
 811baa2:	607a      	str	r2, [r7, #4]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
 811baa4:	f7f6 ff6c 	bl	8112980 <osKernelGetTickCount>
 811baa8:	6178      	str	r0, [r7, #20]
#endif
  if(timeout != 0)
 811baaa:	687b      	ldr	r3, [r7, #4]
 811baac:	2b00      	cmp	r3, #0
 811baae:	d013      	beq.n	811bad8 <sys_arch_mbox_fetch+0x40>
    {
      *msg = (void *)event.value.v;
      return (osKernelSysTick() - starttime);
    }
#else
    status = osMessageQueueGet(*mbox, msg, 0, timeout);
 811bab0:	68fb      	ldr	r3, [r7, #12]
 811bab2:	6818      	ldr	r0, [r3, #0]
 811bab4:	687b      	ldr	r3, [r7, #4]
 811bab6:	2200      	movs	r2, #0
 811bab8:	68b9      	ldr	r1, [r7, #8]
 811baba:	f7f7 fb25 	bl	8113108 <osMessageQueueGet>
 811babe:	6138      	str	r0, [r7, #16]
    if (status == osOK)
 811bac0:	693b      	ldr	r3, [r7, #16]
 811bac2:	2b00      	cmp	r3, #0
 811bac4:	d105      	bne.n	811bad2 <sys_arch_mbox_fetch+0x3a>
    {
      return (osKernelGetTickCount() - starttime);
 811bac6:	f7f6 ff5b 	bl	8112980 <osKernelGetTickCount>
 811baca:	4602      	mov	r2, r0
 811bacc:	697b      	ldr	r3, [r7, #20]
 811bace:	1ad3      	subs	r3, r2, r3
 811bad0:	e00f      	b.n	811baf2 <sys_arch_mbox_fetch+0x5a>
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 811bad2:	f04f 33ff 	mov.w	r3, #4294967295
 811bad6:	e00c      	b.n	811baf2 <sys_arch_mbox_fetch+0x5a>
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
    *msg = (void *)event.value.v;
    return (osKernelSysTick() - starttime);
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
 811bad8:	68fb      	ldr	r3, [r7, #12]
 811bada:	6818      	ldr	r0, [r3, #0]
 811badc:	f04f 33ff 	mov.w	r3, #4294967295
 811bae0:	2200      	movs	r2, #0
 811bae2:	68b9      	ldr	r1, [r7, #8]
 811bae4:	f7f7 fb10 	bl	8113108 <osMessageQueueGet>
    return (osKernelGetTickCount() - starttime);
 811bae8:	f7f6 ff4a 	bl	8112980 <osKernelGetTickCount>
 811baec:	4602      	mov	r2, r0
 811baee:	697b      	ldr	r3, [r7, #20]
 811baf0:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 811baf2:	4618      	mov	r0, r3
 811baf4:	3718      	adds	r7, #24
 811baf6:	46bd      	mov	sp, r7
 811baf8:	bd80      	pop	{r7, pc}

0811bafa <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 811bafa:	b480      	push	{r7}
 811bafc:	b083      	sub	sp, #12
 811bafe:	af00      	add	r7, sp, #0
 811bb00:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 811bb02:	687b      	ldr	r3, [r7, #4]
 811bb04:	681b      	ldr	r3, [r3, #0]
 811bb06:	2b00      	cmp	r3, #0
 811bb08:	d101      	bne.n	811bb0e <sys_mbox_valid+0x14>
    return 0;
 811bb0a:	2300      	movs	r3, #0
 811bb0c:	e000      	b.n	811bb10 <sys_mbox_valid+0x16>
  else
    return 1;
 811bb0e:	2301      	movs	r3, #1
}
 811bb10:	4618      	mov	r0, r3
 811bb12:	370c      	adds	r7, #12
 811bb14:	46bd      	mov	sp, r7
 811bb16:	f85d 7b04 	ldr.w	r7, [sp], #4
 811bb1a:	4770      	bx	lr

0811bb1c <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 811bb1c:	b580      	push	{r7, lr}
 811bb1e:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
#else
  lwip_sys_mutex = osMutexNew(NULL);
 811bb20:	2000      	movs	r0, #0
 811bb22:	f7f6 ffef 	bl	8112b04 <osMutexNew>
 811bb26:	4603      	mov	r3, r0
 811bb28:	4a01      	ldr	r2, [pc, #4]	@ (811bb30 <sys_init+0x14>)
 811bb2a:	6013      	str	r3, [r2, #0]
#endif
}
 811bb2c:	bf00      	nop
 811bb2e:	bd80      	pop	{r7, pc}
 811bb30:	1000e494 	.word	0x1000e494

0811bb34 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 811bb34:	b580      	push	{r7, lr}
 811bb36:	b082      	sub	sp, #8
 811bb38:	af00      	add	r7, sp, #0
 811bb3a:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
  *mutex = osMutexCreate(osMutex(MUTEX));
#else
  *mutex = osMutexNew(NULL);
 811bb3c:	2000      	movs	r0, #0
 811bb3e:	f7f6 ffe1 	bl	8112b04 <osMutexNew>
 811bb42:	4602      	mov	r2, r0
 811bb44:	687b      	ldr	r3, [r7, #4]
 811bb46:	601a      	str	r2, [r3, #0]
#endif

  if(*mutex == NULL)
 811bb48:	687b      	ldr	r3, [r7, #4]
 811bb4a:	681b      	ldr	r3, [r3, #0]
 811bb4c:	2b00      	cmp	r3, #0
 811bb4e:	d102      	bne.n	811bb56 <sys_mutex_new+0x22>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 811bb50:	f04f 33ff 	mov.w	r3, #4294967295
 811bb54:	e000      	b.n	811bb58 <sys_mutex_new+0x24>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 811bb56:	2300      	movs	r3, #0
}
 811bb58:	4618      	mov	r0, r3
 811bb5a:	3708      	adds	r7, #8
 811bb5c:	46bd      	mov	sp, r7
 811bb5e:	bd80      	pop	{r7, pc}

0811bb60 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 811bb60:	b580      	push	{r7, lr}
 811bb62:	b082      	sub	sp, #8
 811bb64:	af00      	add	r7, sp, #0
 811bb66:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
#else
  osMutexAcquire(*mutex, osWaitForever);
 811bb68:	687b      	ldr	r3, [r7, #4]
 811bb6a:	681b      	ldr	r3, [r3, #0]
 811bb6c:	f04f 31ff 	mov.w	r1, #4294967295
 811bb70:	4618      	mov	r0, r3
 811bb72:	f7f7 f84d 	bl	8112c10 <osMutexAcquire>
#endif
}
 811bb76:	bf00      	nop
 811bb78:	3708      	adds	r7, #8
 811bb7a:	46bd      	mov	sp, r7
 811bb7c:	bd80      	pop	{r7, pc}

0811bb7e <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 811bb7e:	b580      	push	{r7, lr}
 811bb80:	b082      	sub	sp, #8
 811bb82:	af00      	add	r7, sp, #0
 811bb84:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 811bb86:	687b      	ldr	r3, [r7, #4]
 811bb88:	681b      	ldr	r3, [r3, #0]
 811bb8a:	4618      	mov	r0, r3
 811bb8c:	f7f7 f88b 	bl	8112ca6 <osMutexRelease>
}
 811bb90:	bf00      	nop
 811bb92:	3708      	adds	r7, #8
 811bb94:	46bd      	mov	sp, r7
 811bb96:	bd80      	pop	{r7, pc}

0811bb98 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 811bb98:	b580      	push	{r7, lr}
 811bb9a:	b08e      	sub	sp, #56	@ 0x38
 811bb9c:	af00      	add	r7, sp, #0
 811bb9e:	60f8      	str	r0, [r7, #12]
 811bba0:	60b9      	str	r1, [r7, #8]
 811bba2:	607a      	str	r2, [r7, #4]
 811bba4:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
  return osThreadCreate(&os_thread_def, arg);
#else
  const osThreadAttr_t attributes = {
 811bba6:	f107 0314 	add.w	r3, r7, #20
 811bbaa:	2224      	movs	r2, #36	@ 0x24
 811bbac:	2100      	movs	r1, #0
 811bbae:	4618      	mov	r0, r3
 811bbb0:	f008 f974 	bl	8123e9c <memset>
 811bbb4:	68fb      	ldr	r3, [r7, #12]
 811bbb6:	617b      	str	r3, [r7, #20]
 811bbb8:	683b      	ldr	r3, [r7, #0]
 811bbba:	62bb      	str	r3, [r7, #40]	@ 0x28
 811bbbc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 811bbbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
                        .name = name,
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
 811bbc0:	f107 0314 	add.w	r3, r7, #20
 811bbc4:	461a      	mov	r2, r3
 811bbc6:	6879      	ldr	r1, [r7, #4]
 811bbc8:	68b8      	ldr	r0, [r7, #8]
 811bbca:	f7f6 feee 	bl	81129aa <osThreadNew>
 811bbce:	4603      	mov	r3, r0
#endif
}
 811bbd0:	4618      	mov	r0, r3
 811bbd2:	3738      	adds	r7, #56	@ 0x38
 811bbd4:	46bd      	mov	sp, r7
 811bbd6:	bd80      	pop	{r7, pc}

0811bbd8 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 811bbd8:	b580      	push	{r7, lr}
 811bbda:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
 811bbdc:	4b04      	ldr	r3, [pc, #16]	@ (811bbf0 <sys_arch_protect+0x18>)
 811bbde:	681b      	ldr	r3, [r3, #0]
 811bbe0:	f04f 31ff 	mov.w	r1, #4294967295
 811bbe4:	4618      	mov	r0, r3
 811bbe6:	f7f7 f813 	bl	8112c10 <osMutexAcquire>
#endif
  return (sys_prot_t)1;
 811bbea:	2301      	movs	r3, #1
}
 811bbec:	4618      	mov	r0, r3
 811bbee:	bd80      	pop	{r7, pc}
 811bbf0:	1000e494 	.word	0x1000e494

0811bbf4 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 811bbf4:	b580      	push	{r7, lr}
 811bbf6:	b082      	sub	sp, #8
 811bbf8:	af00      	add	r7, sp, #0
 811bbfa:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 811bbfc:	4b04      	ldr	r3, [pc, #16]	@ (811bc10 <sys_arch_unprotect+0x1c>)
 811bbfe:	681b      	ldr	r3, [r3, #0]
 811bc00:	4618      	mov	r0, r3
 811bc02:	f7f7 f850 	bl	8112ca6 <osMutexRelease>
}
 811bc06:	bf00      	nop
 811bc08:	3708      	adds	r7, #8
 811bc0a:	46bd      	mov	sp, r7
 811bc0c:	bd80      	pop	{r7, pc}
 811bc0e:	bf00      	nop
 811bc10:	1000e494 	.word	0x1000e494

0811bc14 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 811bc14:	b580      	push	{r7, lr}
 811bc16:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 811bc18:	f007 fa90 	bl	812313c <rand>
 811bc1c:	4603      	mov	r3, r0
 811bc1e:	b29b      	uxth	r3, r3
 811bc20:	f3c3 030d 	ubfx	r3, r3, #0, #14
 811bc24:	b29b      	uxth	r3, r3
 811bc26:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 811bc2a:	b29a      	uxth	r2, r3
 811bc2c:	4b01      	ldr	r3, [pc, #4]	@ (811bc34 <tcp_init+0x20>)
 811bc2e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 811bc30:	bf00      	nop
 811bc32:	bd80      	pop	{r7, pc}
 811bc34:	10000028 	.word	0x10000028

0811bc38 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 811bc38:	b580      	push	{r7, lr}
 811bc3a:	b082      	sub	sp, #8
 811bc3c:	af00      	add	r7, sp, #0
 811bc3e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 811bc40:	687b      	ldr	r3, [r7, #4]
 811bc42:	7d1b      	ldrb	r3, [r3, #20]
 811bc44:	2b01      	cmp	r3, #1
 811bc46:	d105      	bne.n	811bc54 <tcp_free+0x1c>
 811bc48:	4b06      	ldr	r3, [pc, #24]	@ (811bc64 <tcp_free+0x2c>)
 811bc4a:	22d4      	movs	r2, #212	@ 0xd4
 811bc4c:	4906      	ldr	r1, [pc, #24]	@ (811bc68 <tcp_free+0x30>)
 811bc4e:	4807      	ldr	r0, [pc, #28]	@ (811bc6c <tcp_free+0x34>)
 811bc50:	f007 ffe4 	bl	8123c1c <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 811bc54:	6879      	ldr	r1, [r7, #4]
 811bc56:	2001      	movs	r0, #1
 811bc58:	f7fe fd9e 	bl	811a798 <memp_free>
}
 811bc5c:	bf00      	nop
 811bc5e:	3708      	adds	r7, #8
 811bc60:	46bd      	mov	sp, r7
 811bc62:	bd80      	pop	{r7, pc}
 811bc64:	0812687c 	.word	0x0812687c
 811bc68:	081268ec 	.word	0x081268ec
 811bc6c:	08126900 	.word	0x08126900

0811bc70 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 811bc70:	b580      	push	{r7, lr}
 811bc72:	b082      	sub	sp, #8
 811bc74:	af00      	add	r7, sp, #0
 811bc76:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 811bc78:	687b      	ldr	r3, [r7, #4]
 811bc7a:	7d1b      	ldrb	r3, [r3, #20]
 811bc7c:	2b01      	cmp	r3, #1
 811bc7e:	d105      	bne.n	811bc8c <tcp_free_listen+0x1c>
 811bc80:	4b06      	ldr	r3, [pc, #24]	@ (811bc9c <tcp_free_listen+0x2c>)
 811bc82:	22df      	movs	r2, #223	@ 0xdf
 811bc84:	4906      	ldr	r1, [pc, #24]	@ (811bca0 <tcp_free_listen+0x30>)
 811bc86:	4807      	ldr	r0, [pc, #28]	@ (811bca4 <tcp_free_listen+0x34>)
 811bc88:	f007 ffc8 	bl	8123c1c <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 811bc8c:	6879      	ldr	r1, [r7, #4]
 811bc8e:	2002      	movs	r0, #2
 811bc90:	f7fe fd82 	bl	811a798 <memp_free>
}
 811bc94:	bf00      	nop
 811bc96:	3708      	adds	r7, #8
 811bc98:	46bd      	mov	sp, r7
 811bc9a:	bd80      	pop	{r7, pc}
 811bc9c:	0812687c 	.word	0x0812687c
 811bca0:	08126928 	.word	0x08126928
 811bca4:	08126900 	.word	0x08126900

0811bca8 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 811bca8:	b580      	push	{r7, lr}
 811bcaa:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 811bcac:	f001 f8a2 	bl	811cdf4 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 811bcb0:	4b07      	ldr	r3, [pc, #28]	@ (811bcd0 <tcp_tmr+0x28>)
 811bcb2:	781b      	ldrb	r3, [r3, #0]
 811bcb4:	3301      	adds	r3, #1
 811bcb6:	b2da      	uxtb	r2, r3
 811bcb8:	4b05      	ldr	r3, [pc, #20]	@ (811bcd0 <tcp_tmr+0x28>)
 811bcba:	701a      	strb	r2, [r3, #0]
 811bcbc:	4b04      	ldr	r3, [pc, #16]	@ (811bcd0 <tcp_tmr+0x28>)
 811bcbe:	781b      	ldrb	r3, [r3, #0]
 811bcc0:	f003 0301 	and.w	r3, r3, #1
 811bcc4:	2b00      	cmp	r3, #0
 811bcc6:	d001      	beq.n	811bccc <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 811bcc8:	f000 fd48 	bl	811c75c <tcp_slowtmr>
  }
}
 811bccc:	bf00      	nop
 811bcce:	bd80      	pop	{r7, pc}
 811bcd0:	1000e4ad 	.word	0x1000e4ad

0811bcd4 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 811bcd4:	b580      	push	{r7, lr}
 811bcd6:	b084      	sub	sp, #16
 811bcd8:	af00      	add	r7, sp, #0
 811bcda:	6078      	str	r0, [r7, #4]
 811bcdc:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 811bcde:	683b      	ldr	r3, [r7, #0]
 811bce0:	2b00      	cmp	r3, #0
 811bce2:	d105      	bne.n	811bcf0 <tcp_remove_listener+0x1c>
 811bce4:	4b0d      	ldr	r3, [pc, #52]	@ (811bd1c <tcp_remove_listener+0x48>)
 811bce6:	22ff      	movs	r2, #255	@ 0xff
 811bce8:	490d      	ldr	r1, [pc, #52]	@ (811bd20 <tcp_remove_listener+0x4c>)
 811bcea:	480e      	ldr	r0, [pc, #56]	@ (811bd24 <tcp_remove_listener+0x50>)
 811bcec:	f007 ff96 	bl	8123c1c <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 811bcf0:	687b      	ldr	r3, [r7, #4]
 811bcf2:	60fb      	str	r3, [r7, #12]
 811bcf4:	e00a      	b.n	811bd0c <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 811bcf6:	68fb      	ldr	r3, [r7, #12]
 811bcf8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 811bcfa:	683a      	ldr	r2, [r7, #0]
 811bcfc:	429a      	cmp	r2, r3
 811bcfe:	d102      	bne.n	811bd06 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 811bd00:	68fb      	ldr	r3, [r7, #12]
 811bd02:	2200      	movs	r2, #0
 811bd04:	67da      	str	r2, [r3, #124]	@ 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 811bd06:	68fb      	ldr	r3, [r7, #12]
 811bd08:	68db      	ldr	r3, [r3, #12]
 811bd0a:	60fb      	str	r3, [r7, #12]
 811bd0c:	68fb      	ldr	r3, [r7, #12]
 811bd0e:	2b00      	cmp	r3, #0
 811bd10:	d1f1      	bne.n	811bcf6 <tcp_remove_listener+0x22>
    }
  }
}
 811bd12:	bf00      	nop
 811bd14:	bf00      	nop
 811bd16:	3710      	adds	r7, #16
 811bd18:	46bd      	mov	sp, r7
 811bd1a:	bd80      	pop	{r7, pc}
 811bd1c:	0812687c 	.word	0x0812687c
 811bd20:	08126944 	.word	0x08126944
 811bd24:	08126900 	.word	0x08126900

0811bd28 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 811bd28:	b580      	push	{r7, lr}
 811bd2a:	b084      	sub	sp, #16
 811bd2c:	af00      	add	r7, sp, #0
 811bd2e:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 811bd30:	687b      	ldr	r3, [r7, #4]
 811bd32:	2b00      	cmp	r3, #0
 811bd34:	d106      	bne.n	811bd44 <tcp_listen_closed+0x1c>
 811bd36:	4b14      	ldr	r3, [pc, #80]	@ (811bd88 <tcp_listen_closed+0x60>)
 811bd38:	f240 1211 	movw	r2, #273	@ 0x111
 811bd3c:	4913      	ldr	r1, [pc, #76]	@ (811bd8c <tcp_listen_closed+0x64>)
 811bd3e:	4814      	ldr	r0, [pc, #80]	@ (811bd90 <tcp_listen_closed+0x68>)
 811bd40:	f007 ff6c 	bl	8123c1c <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 811bd44:	687b      	ldr	r3, [r7, #4]
 811bd46:	7d1b      	ldrb	r3, [r3, #20]
 811bd48:	2b01      	cmp	r3, #1
 811bd4a:	d006      	beq.n	811bd5a <tcp_listen_closed+0x32>
 811bd4c:	4b0e      	ldr	r3, [pc, #56]	@ (811bd88 <tcp_listen_closed+0x60>)
 811bd4e:	f44f 7289 	mov.w	r2, #274	@ 0x112
 811bd52:	4910      	ldr	r1, [pc, #64]	@ (811bd94 <tcp_listen_closed+0x6c>)
 811bd54:	480e      	ldr	r0, [pc, #56]	@ (811bd90 <tcp_listen_closed+0x68>)
 811bd56:	f007 ff61 	bl	8123c1c <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 811bd5a:	2301      	movs	r3, #1
 811bd5c:	60fb      	str	r3, [r7, #12]
 811bd5e:	e00b      	b.n	811bd78 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 811bd60:	4a0d      	ldr	r2, [pc, #52]	@ (811bd98 <tcp_listen_closed+0x70>)
 811bd62:	68fb      	ldr	r3, [r7, #12]
 811bd64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 811bd68:	681b      	ldr	r3, [r3, #0]
 811bd6a:	6879      	ldr	r1, [r7, #4]
 811bd6c:	4618      	mov	r0, r3
 811bd6e:	f7ff ffb1 	bl	811bcd4 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 811bd72:	68fb      	ldr	r3, [r7, #12]
 811bd74:	3301      	adds	r3, #1
 811bd76:	60fb      	str	r3, [r7, #12]
 811bd78:	68fb      	ldr	r3, [r7, #12]
 811bd7a:	2b03      	cmp	r3, #3
 811bd7c:	d9f0      	bls.n	811bd60 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 811bd7e:	bf00      	nop
 811bd80:	bf00      	nop
 811bd82:	3710      	adds	r7, #16
 811bd84:	46bd      	mov	sp, r7
 811bd86:	bd80      	pop	{r7, pc}
 811bd88:	0812687c 	.word	0x0812687c
 811bd8c:	0812696c 	.word	0x0812696c
 811bd90:	08126900 	.word	0x08126900
 811bd94:	08126978 	.word	0x08126978
 811bd98:	08128520 	.word	0x08128520

0811bd9c <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 811bd9c:	b5b0      	push	{r4, r5, r7, lr}
 811bd9e:	b088      	sub	sp, #32
 811bda0:	af04      	add	r7, sp, #16
 811bda2:	6078      	str	r0, [r7, #4]
 811bda4:	460b      	mov	r3, r1
 811bda6:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 811bda8:	687b      	ldr	r3, [r7, #4]
 811bdaa:	2b00      	cmp	r3, #0
 811bdac:	d106      	bne.n	811bdbc <tcp_close_shutdown+0x20>
 811bdae:	4b63      	ldr	r3, [pc, #396]	@ (811bf3c <tcp_close_shutdown+0x1a0>)
 811bdb0:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 811bdb4:	4962      	ldr	r1, [pc, #392]	@ (811bf40 <tcp_close_shutdown+0x1a4>)
 811bdb6:	4863      	ldr	r0, [pc, #396]	@ (811bf44 <tcp_close_shutdown+0x1a8>)
 811bdb8:	f007 ff30 	bl	8123c1c <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 811bdbc:	78fb      	ldrb	r3, [r7, #3]
 811bdbe:	2b00      	cmp	r3, #0
 811bdc0:	d066      	beq.n	811be90 <tcp_close_shutdown+0xf4>
 811bdc2:	687b      	ldr	r3, [r7, #4]
 811bdc4:	7d1b      	ldrb	r3, [r3, #20]
 811bdc6:	2b04      	cmp	r3, #4
 811bdc8:	d003      	beq.n	811bdd2 <tcp_close_shutdown+0x36>
 811bdca:	687b      	ldr	r3, [r7, #4]
 811bdcc:	7d1b      	ldrb	r3, [r3, #20]
 811bdce:	2b07      	cmp	r3, #7
 811bdd0:	d15e      	bne.n	811be90 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 811bdd2:	687b      	ldr	r3, [r7, #4]
 811bdd4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 811bdd6:	2b00      	cmp	r3, #0
 811bdd8:	d104      	bne.n	811bde4 <tcp_close_shutdown+0x48>
 811bdda:	687b      	ldr	r3, [r7, #4]
 811bddc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 811bdde:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 811bde2:	d055      	beq.n	811be90 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 811bde4:	687b      	ldr	r3, [r7, #4]
 811bde6:	8b5b      	ldrh	r3, [r3, #26]
 811bde8:	f003 0310 	and.w	r3, r3, #16
 811bdec:	2b00      	cmp	r3, #0
 811bdee:	d106      	bne.n	811bdfe <tcp_close_shutdown+0x62>
 811bdf0:	4b52      	ldr	r3, [pc, #328]	@ (811bf3c <tcp_close_shutdown+0x1a0>)
 811bdf2:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 811bdf6:	4954      	ldr	r1, [pc, #336]	@ (811bf48 <tcp_close_shutdown+0x1ac>)
 811bdf8:	4852      	ldr	r0, [pc, #328]	@ (811bf44 <tcp_close_shutdown+0x1a8>)
 811bdfa:	f007 ff0f 	bl	8123c1c <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 811bdfe:	687b      	ldr	r3, [r7, #4]
 811be00:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 811be02:	687b      	ldr	r3, [r7, #4]
 811be04:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 811be06:	687d      	ldr	r5, [r7, #4]
 811be08:	687b      	ldr	r3, [r7, #4]
 811be0a:	3304      	adds	r3, #4
 811be0c:	687a      	ldr	r2, [r7, #4]
 811be0e:	8ad2      	ldrh	r2, [r2, #22]
 811be10:	6879      	ldr	r1, [r7, #4]
 811be12:	8b09      	ldrh	r1, [r1, #24]
 811be14:	9102      	str	r1, [sp, #8]
 811be16:	9201      	str	r2, [sp, #4]
 811be18:	9300      	str	r3, [sp, #0]
 811be1a:	462b      	mov	r3, r5
 811be1c:	4622      	mov	r2, r4
 811be1e:	4601      	mov	r1, r0
 811be20:	6878      	ldr	r0, [r7, #4]
 811be22:	f005 fd4b 	bl	81218bc <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 811be26:	6878      	ldr	r0, [r7, #4]
 811be28:	f001 fb2e 	bl	811d488 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 811be2c:	4b47      	ldr	r3, [pc, #284]	@ (811bf4c <tcp_close_shutdown+0x1b0>)
 811be2e:	681b      	ldr	r3, [r3, #0]
 811be30:	687a      	ldr	r2, [r7, #4]
 811be32:	429a      	cmp	r2, r3
 811be34:	d105      	bne.n	811be42 <tcp_close_shutdown+0xa6>
 811be36:	4b45      	ldr	r3, [pc, #276]	@ (811bf4c <tcp_close_shutdown+0x1b0>)
 811be38:	681b      	ldr	r3, [r3, #0]
 811be3a:	68db      	ldr	r3, [r3, #12]
 811be3c:	4a43      	ldr	r2, [pc, #268]	@ (811bf4c <tcp_close_shutdown+0x1b0>)
 811be3e:	6013      	str	r3, [r2, #0]
 811be40:	e013      	b.n	811be6a <tcp_close_shutdown+0xce>
 811be42:	4b42      	ldr	r3, [pc, #264]	@ (811bf4c <tcp_close_shutdown+0x1b0>)
 811be44:	681b      	ldr	r3, [r3, #0]
 811be46:	60fb      	str	r3, [r7, #12]
 811be48:	e00c      	b.n	811be64 <tcp_close_shutdown+0xc8>
 811be4a:	68fb      	ldr	r3, [r7, #12]
 811be4c:	68db      	ldr	r3, [r3, #12]
 811be4e:	687a      	ldr	r2, [r7, #4]
 811be50:	429a      	cmp	r2, r3
 811be52:	d104      	bne.n	811be5e <tcp_close_shutdown+0xc2>
 811be54:	687b      	ldr	r3, [r7, #4]
 811be56:	68da      	ldr	r2, [r3, #12]
 811be58:	68fb      	ldr	r3, [r7, #12]
 811be5a:	60da      	str	r2, [r3, #12]
 811be5c:	e005      	b.n	811be6a <tcp_close_shutdown+0xce>
 811be5e:	68fb      	ldr	r3, [r7, #12]
 811be60:	68db      	ldr	r3, [r3, #12]
 811be62:	60fb      	str	r3, [r7, #12]
 811be64:	68fb      	ldr	r3, [r7, #12]
 811be66:	2b00      	cmp	r3, #0
 811be68:	d1ef      	bne.n	811be4a <tcp_close_shutdown+0xae>
 811be6a:	687b      	ldr	r3, [r7, #4]
 811be6c:	2200      	movs	r2, #0
 811be6e:	60da      	str	r2, [r3, #12]
 811be70:	4b37      	ldr	r3, [pc, #220]	@ (811bf50 <tcp_close_shutdown+0x1b4>)
 811be72:	2201      	movs	r2, #1
 811be74:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 811be76:	4b37      	ldr	r3, [pc, #220]	@ (811bf54 <tcp_close_shutdown+0x1b8>)
 811be78:	681b      	ldr	r3, [r3, #0]
 811be7a:	687a      	ldr	r2, [r7, #4]
 811be7c:	429a      	cmp	r2, r3
 811be7e:	d102      	bne.n	811be86 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 811be80:	f003 ffc2 	bl	811fe08 <tcp_trigger_input_pcb_close>
 811be84:	e002      	b.n	811be8c <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 811be86:	6878      	ldr	r0, [r7, #4]
 811be88:	f7ff fed6 	bl	811bc38 <tcp_free>
      }
      return ERR_OK;
 811be8c:	2300      	movs	r3, #0
 811be8e:	e050      	b.n	811bf32 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 811be90:	687b      	ldr	r3, [r7, #4]
 811be92:	7d1b      	ldrb	r3, [r3, #20]
 811be94:	2b02      	cmp	r3, #2
 811be96:	d03b      	beq.n	811bf10 <tcp_close_shutdown+0x174>
 811be98:	2b02      	cmp	r3, #2
 811be9a:	dc44      	bgt.n	811bf26 <tcp_close_shutdown+0x18a>
 811be9c:	2b00      	cmp	r3, #0
 811be9e:	d002      	beq.n	811bea6 <tcp_close_shutdown+0x10a>
 811bea0:	2b01      	cmp	r3, #1
 811bea2:	d02a      	beq.n	811befa <tcp_close_shutdown+0x15e>
 811bea4:	e03f      	b.n	811bf26 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 811bea6:	687b      	ldr	r3, [r7, #4]
 811bea8:	8adb      	ldrh	r3, [r3, #22]
 811beaa:	2b00      	cmp	r3, #0
 811beac:	d021      	beq.n	811bef2 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 811beae:	4b2a      	ldr	r3, [pc, #168]	@ (811bf58 <tcp_close_shutdown+0x1bc>)
 811beb0:	681b      	ldr	r3, [r3, #0]
 811beb2:	687a      	ldr	r2, [r7, #4]
 811beb4:	429a      	cmp	r2, r3
 811beb6:	d105      	bne.n	811bec4 <tcp_close_shutdown+0x128>
 811beb8:	4b27      	ldr	r3, [pc, #156]	@ (811bf58 <tcp_close_shutdown+0x1bc>)
 811beba:	681b      	ldr	r3, [r3, #0]
 811bebc:	68db      	ldr	r3, [r3, #12]
 811bebe:	4a26      	ldr	r2, [pc, #152]	@ (811bf58 <tcp_close_shutdown+0x1bc>)
 811bec0:	6013      	str	r3, [r2, #0]
 811bec2:	e013      	b.n	811beec <tcp_close_shutdown+0x150>
 811bec4:	4b24      	ldr	r3, [pc, #144]	@ (811bf58 <tcp_close_shutdown+0x1bc>)
 811bec6:	681b      	ldr	r3, [r3, #0]
 811bec8:	60bb      	str	r3, [r7, #8]
 811beca:	e00c      	b.n	811bee6 <tcp_close_shutdown+0x14a>
 811becc:	68bb      	ldr	r3, [r7, #8]
 811bece:	68db      	ldr	r3, [r3, #12]
 811bed0:	687a      	ldr	r2, [r7, #4]
 811bed2:	429a      	cmp	r2, r3
 811bed4:	d104      	bne.n	811bee0 <tcp_close_shutdown+0x144>
 811bed6:	687b      	ldr	r3, [r7, #4]
 811bed8:	68da      	ldr	r2, [r3, #12]
 811beda:	68bb      	ldr	r3, [r7, #8]
 811bedc:	60da      	str	r2, [r3, #12]
 811bede:	e005      	b.n	811beec <tcp_close_shutdown+0x150>
 811bee0:	68bb      	ldr	r3, [r7, #8]
 811bee2:	68db      	ldr	r3, [r3, #12]
 811bee4:	60bb      	str	r3, [r7, #8]
 811bee6:	68bb      	ldr	r3, [r7, #8]
 811bee8:	2b00      	cmp	r3, #0
 811beea:	d1ef      	bne.n	811becc <tcp_close_shutdown+0x130>
 811beec:	687b      	ldr	r3, [r7, #4]
 811beee:	2200      	movs	r2, #0
 811bef0:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 811bef2:	6878      	ldr	r0, [r7, #4]
 811bef4:	f7ff fea0 	bl	811bc38 <tcp_free>
      break;
 811bef8:	e01a      	b.n	811bf30 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 811befa:	6878      	ldr	r0, [r7, #4]
 811befc:	f7ff ff14 	bl	811bd28 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 811bf00:	6879      	ldr	r1, [r7, #4]
 811bf02:	4816      	ldr	r0, [pc, #88]	@ (811bf5c <tcp_close_shutdown+0x1c0>)
 811bf04:	f001 fb10 	bl	811d528 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 811bf08:	6878      	ldr	r0, [r7, #4]
 811bf0a:	f7ff feb1 	bl	811bc70 <tcp_free_listen>
      break;
 811bf0e:	e00f      	b.n	811bf30 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 811bf10:	6879      	ldr	r1, [r7, #4]
 811bf12:	480e      	ldr	r0, [pc, #56]	@ (811bf4c <tcp_close_shutdown+0x1b0>)
 811bf14:	f001 fb08 	bl	811d528 <tcp_pcb_remove>
 811bf18:	4b0d      	ldr	r3, [pc, #52]	@ (811bf50 <tcp_close_shutdown+0x1b4>)
 811bf1a:	2201      	movs	r2, #1
 811bf1c:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 811bf1e:	6878      	ldr	r0, [r7, #4]
 811bf20:	f7ff fe8a 	bl	811bc38 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 811bf24:	e004      	b.n	811bf30 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 811bf26:	6878      	ldr	r0, [r7, #4]
 811bf28:	f000 f81a 	bl	811bf60 <tcp_close_shutdown_fin>
 811bf2c:	4603      	mov	r3, r0
 811bf2e:	e000      	b.n	811bf32 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 811bf30:	2300      	movs	r3, #0
}
 811bf32:	4618      	mov	r0, r3
 811bf34:	3710      	adds	r7, #16
 811bf36:	46bd      	mov	sp, r7
 811bf38:	bdb0      	pop	{r4, r5, r7, pc}
 811bf3a:	bf00      	nop
 811bf3c:	0812687c 	.word	0x0812687c
 811bf40:	08126990 	.word	0x08126990
 811bf44:	08126900 	.word	0x08126900
 811bf48:	081269b0 	.word	0x081269b0
 811bf4c:	1000e4a4 	.word	0x1000e4a4
 811bf50:	1000e4ac 	.word	0x1000e4ac
 811bf54:	1000e4e4 	.word	0x1000e4e4
 811bf58:	1000e49c 	.word	0x1000e49c
 811bf5c:	1000e4a0 	.word	0x1000e4a0

0811bf60 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 811bf60:	b580      	push	{r7, lr}
 811bf62:	b084      	sub	sp, #16
 811bf64:	af00      	add	r7, sp, #0
 811bf66:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 811bf68:	687b      	ldr	r3, [r7, #4]
 811bf6a:	2b00      	cmp	r3, #0
 811bf6c:	d106      	bne.n	811bf7c <tcp_close_shutdown_fin+0x1c>
 811bf6e:	4b2e      	ldr	r3, [pc, #184]	@ (811c028 <tcp_close_shutdown_fin+0xc8>)
 811bf70:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 811bf74:	492d      	ldr	r1, [pc, #180]	@ (811c02c <tcp_close_shutdown_fin+0xcc>)
 811bf76:	482e      	ldr	r0, [pc, #184]	@ (811c030 <tcp_close_shutdown_fin+0xd0>)
 811bf78:	f007 fe50 	bl	8123c1c <iprintf>

  switch (pcb->state) {
 811bf7c:	687b      	ldr	r3, [r7, #4]
 811bf7e:	7d1b      	ldrb	r3, [r3, #20]
 811bf80:	2b07      	cmp	r3, #7
 811bf82:	d020      	beq.n	811bfc6 <tcp_close_shutdown_fin+0x66>
 811bf84:	2b07      	cmp	r3, #7
 811bf86:	dc2b      	bgt.n	811bfe0 <tcp_close_shutdown_fin+0x80>
 811bf88:	2b03      	cmp	r3, #3
 811bf8a:	d002      	beq.n	811bf92 <tcp_close_shutdown_fin+0x32>
 811bf8c:	2b04      	cmp	r3, #4
 811bf8e:	d00d      	beq.n	811bfac <tcp_close_shutdown_fin+0x4c>
 811bf90:	e026      	b.n	811bfe0 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 811bf92:	6878      	ldr	r0, [r7, #4]
 811bf94:	f004 fda0 	bl	8120ad8 <tcp_send_fin>
 811bf98:	4603      	mov	r3, r0
 811bf9a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 811bf9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 811bfa0:	2b00      	cmp	r3, #0
 811bfa2:	d11f      	bne.n	811bfe4 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 811bfa4:	687b      	ldr	r3, [r7, #4]
 811bfa6:	2205      	movs	r2, #5
 811bfa8:	751a      	strb	r2, [r3, #20]
      }
      break;
 811bfaa:	e01b      	b.n	811bfe4 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 811bfac:	6878      	ldr	r0, [r7, #4]
 811bfae:	f004 fd93 	bl	8120ad8 <tcp_send_fin>
 811bfb2:	4603      	mov	r3, r0
 811bfb4:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 811bfb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 811bfba:	2b00      	cmp	r3, #0
 811bfbc:	d114      	bne.n	811bfe8 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 811bfbe:	687b      	ldr	r3, [r7, #4]
 811bfc0:	2205      	movs	r2, #5
 811bfc2:	751a      	strb	r2, [r3, #20]
      }
      break;
 811bfc4:	e010      	b.n	811bfe8 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 811bfc6:	6878      	ldr	r0, [r7, #4]
 811bfc8:	f004 fd86 	bl	8120ad8 <tcp_send_fin>
 811bfcc:	4603      	mov	r3, r0
 811bfce:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 811bfd0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 811bfd4:	2b00      	cmp	r3, #0
 811bfd6:	d109      	bne.n	811bfec <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 811bfd8:	687b      	ldr	r3, [r7, #4]
 811bfda:	2209      	movs	r2, #9
 811bfdc:	751a      	strb	r2, [r3, #20]
      }
      break;
 811bfde:	e005      	b.n	811bfec <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 811bfe0:	2300      	movs	r3, #0
 811bfe2:	e01c      	b.n	811c01e <tcp_close_shutdown_fin+0xbe>
      break;
 811bfe4:	bf00      	nop
 811bfe6:	e002      	b.n	811bfee <tcp_close_shutdown_fin+0x8e>
      break;
 811bfe8:	bf00      	nop
 811bfea:	e000      	b.n	811bfee <tcp_close_shutdown_fin+0x8e>
      break;
 811bfec:	bf00      	nop
  }

  if (err == ERR_OK) {
 811bfee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 811bff2:	2b00      	cmp	r3, #0
 811bff4:	d103      	bne.n	811bffe <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 811bff6:	6878      	ldr	r0, [r7, #4]
 811bff8:	f004 feac 	bl	8120d54 <tcp_output>
 811bffc:	e00d      	b.n	811c01a <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 811bffe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 811c002:	f1b3 3fff 	cmp.w	r3, #4294967295
 811c006:	d108      	bne.n	811c01a <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 811c008:	687b      	ldr	r3, [r7, #4]
 811c00a:	8b5b      	ldrh	r3, [r3, #26]
 811c00c:	f043 0308 	orr.w	r3, r3, #8
 811c010:	b29a      	uxth	r2, r3
 811c012:	687b      	ldr	r3, [r7, #4]
 811c014:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 811c016:	2300      	movs	r3, #0
 811c018:	e001      	b.n	811c01e <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 811c01a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 811c01e:	4618      	mov	r0, r3
 811c020:	3710      	adds	r7, #16
 811c022:	46bd      	mov	sp, r7
 811c024:	bd80      	pop	{r7, pc}
 811c026:	bf00      	nop
 811c028:	0812687c 	.word	0x0812687c
 811c02c:	0812696c 	.word	0x0812696c
 811c030:	08126900 	.word	0x08126900

0811c034 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 811c034:	b580      	push	{r7, lr}
 811c036:	b082      	sub	sp, #8
 811c038:	af00      	add	r7, sp, #0
 811c03a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 811c03c:	687b      	ldr	r3, [r7, #4]
 811c03e:	2b00      	cmp	r3, #0
 811c040:	d109      	bne.n	811c056 <tcp_close+0x22>
 811c042:	4b0f      	ldr	r3, [pc, #60]	@ (811c080 <tcp_close+0x4c>)
 811c044:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 811c048:	490e      	ldr	r1, [pc, #56]	@ (811c084 <tcp_close+0x50>)
 811c04a:	480f      	ldr	r0, [pc, #60]	@ (811c088 <tcp_close+0x54>)
 811c04c:	f007 fde6 	bl	8123c1c <iprintf>
 811c050:	f06f 030f 	mvn.w	r3, #15
 811c054:	e00f      	b.n	811c076 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 811c056:	687b      	ldr	r3, [r7, #4]
 811c058:	7d1b      	ldrb	r3, [r3, #20]
 811c05a:	2b01      	cmp	r3, #1
 811c05c:	d006      	beq.n	811c06c <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 811c05e:	687b      	ldr	r3, [r7, #4]
 811c060:	8b5b      	ldrh	r3, [r3, #26]
 811c062:	f043 0310 	orr.w	r3, r3, #16
 811c066:	b29a      	uxth	r2, r3
 811c068:	687b      	ldr	r3, [r7, #4]
 811c06a:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 811c06c:	2101      	movs	r1, #1
 811c06e:	6878      	ldr	r0, [r7, #4]
 811c070:	f7ff fe94 	bl	811bd9c <tcp_close_shutdown>
 811c074:	4603      	mov	r3, r0
}
 811c076:	4618      	mov	r0, r3
 811c078:	3708      	adds	r7, #8
 811c07a:	46bd      	mov	sp, r7
 811c07c:	bd80      	pop	{r7, pc}
 811c07e:	bf00      	nop
 811c080:	0812687c 	.word	0x0812687c
 811c084:	081269cc 	.word	0x081269cc
 811c088:	08126900 	.word	0x08126900

0811c08c <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 811c08c:	b580      	push	{r7, lr}
 811c08e:	b08e      	sub	sp, #56	@ 0x38
 811c090:	af04      	add	r7, sp, #16
 811c092:	6078      	str	r0, [r7, #4]
 811c094:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 811c096:	687b      	ldr	r3, [r7, #4]
 811c098:	2b00      	cmp	r3, #0
 811c09a:	d107      	bne.n	811c0ac <tcp_abandon+0x20>
 811c09c:	4b52      	ldr	r3, [pc, #328]	@ (811c1e8 <tcp_abandon+0x15c>)
 811c09e:	f240 223d 	movw	r2, #573	@ 0x23d
 811c0a2:	4952      	ldr	r1, [pc, #328]	@ (811c1ec <tcp_abandon+0x160>)
 811c0a4:	4852      	ldr	r0, [pc, #328]	@ (811c1f0 <tcp_abandon+0x164>)
 811c0a6:	f007 fdb9 	bl	8123c1c <iprintf>
 811c0aa:	e099      	b.n	811c1e0 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 811c0ac:	687b      	ldr	r3, [r7, #4]
 811c0ae:	7d1b      	ldrb	r3, [r3, #20]
 811c0b0:	2b01      	cmp	r3, #1
 811c0b2:	d106      	bne.n	811c0c2 <tcp_abandon+0x36>
 811c0b4:	4b4c      	ldr	r3, [pc, #304]	@ (811c1e8 <tcp_abandon+0x15c>)
 811c0b6:	f44f 7210 	mov.w	r2, #576	@ 0x240
 811c0ba:	494e      	ldr	r1, [pc, #312]	@ (811c1f4 <tcp_abandon+0x168>)
 811c0bc:	484c      	ldr	r0, [pc, #304]	@ (811c1f0 <tcp_abandon+0x164>)
 811c0be:	f007 fdad 	bl	8123c1c <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 811c0c2:	687b      	ldr	r3, [r7, #4]
 811c0c4:	7d1b      	ldrb	r3, [r3, #20]
 811c0c6:	2b0a      	cmp	r3, #10
 811c0c8:	d107      	bne.n	811c0da <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 811c0ca:	6879      	ldr	r1, [r7, #4]
 811c0cc:	484a      	ldr	r0, [pc, #296]	@ (811c1f8 <tcp_abandon+0x16c>)
 811c0ce:	f001 fa2b 	bl	811d528 <tcp_pcb_remove>
    tcp_free(pcb);
 811c0d2:	6878      	ldr	r0, [r7, #4]
 811c0d4:	f7ff fdb0 	bl	811bc38 <tcp_free>
 811c0d8:	e082      	b.n	811c1e0 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 811c0da:	2300      	movs	r3, #0
 811c0dc:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t local_port = 0;
 811c0de:	2300      	movs	r3, #0
 811c0e0:	847b      	strh	r3, [r7, #34]	@ 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 811c0e2:	687b      	ldr	r3, [r7, #4]
 811c0e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 811c0e6:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 811c0e8:	687b      	ldr	r3, [r7, #4]
 811c0ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 811c0ec:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 811c0ee:	687b      	ldr	r3, [r7, #4]
 811c0f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 811c0f4:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 811c0f6:	687b      	ldr	r3, [r7, #4]
 811c0f8:	691b      	ldr	r3, [r3, #16]
 811c0fa:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 811c0fc:	687b      	ldr	r3, [r7, #4]
 811c0fe:	7d1b      	ldrb	r3, [r3, #20]
 811c100:	2b00      	cmp	r3, #0
 811c102:	d126      	bne.n	811c152 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 811c104:	687b      	ldr	r3, [r7, #4]
 811c106:	8adb      	ldrh	r3, [r3, #22]
 811c108:	2b00      	cmp	r3, #0
 811c10a:	d02e      	beq.n	811c16a <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 811c10c:	4b3b      	ldr	r3, [pc, #236]	@ (811c1fc <tcp_abandon+0x170>)
 811c10e:	681b      	ldr	r3, [r3, #0]
 811c110:	687a      	ldr	r2, [r7, #4]
 811c112:	429a      	cmp	r2, r3
 811c114:	d105      	bne.n	811c122 <tcp_abandon+0x96>
 811c116:	4b39      	ldr	r3, [pc, #228]	@ (811c1fc <tcp_abandon+0x170>)
 811c118:	681b      	ldr	r3, [r3, #0]
 811c11a:	68db      	ldr	r3, [r3, #12]
 811c11c:	4a37      	ldr	r2, [pc, #220]	@ (811c1fc <tcp_abandon+0x170>)
 811c11e:	6013      	str	r3, [r2, #0]
 811c120:	e013      	b.n	811c14a <tcp_abandon+0xbe>
 811c122:	4b36      	ldr	r3, [pc, #216]	@ (811c1fc <tcp_abandon+0x170>)
 811c124:	681b      	ldr	r3, [r3, #0]
 811c126:	61fb      	str	r3, [r7, #28]
 811c128:	e00c      	b.n	811c144 <tcp_abandon+0xb8>
 811c12a:	69fb      	ldr	r3, [r7, #28]
 811c12c:	68db      	ldr	r3, [r3, #12]
 811c12e:	687a      	ldr	r2, [r7, #4]
 811c130:	429a      	cmp	r2, r3
 811c132:	d104      	bne.n	811c13e <tcp_abandon+0xb2>
 811c134:	687b      	ldr	r3, [r7, #4]
 811c136:	68da      	ldr	r2, [r3, #12]
 811c138:	69fb      	ldr	r3, [r7, #28]
 811c13a:	60da      	str	r2, [r3, #12]
 811c13c:	e005      	b.n	811c14a <tcp_abandon+0xbe>
 811c13e:	69fb      	ldr	r3, [r7, #28]
 811c140:	68db      	ldr	r3, [r3, #12]
 811c142:	61fb      	str	r3, [r7, #28]
 811c144:	69fb      	ldr	r3, [r7, #28]
 811c146:	2b00      	cmp	r3, #0
 811c148:	d1ef      	bne.n	811c12a <tcp_abandon+0x9e>
 811c14a:	687b      	ldr	r3, [r7, #4]
 811c14c:	2200      	movs	r2, #0
 811c14e:	60da      	str	r2, [r3, #12]
 811c150:	e00b      	b.n	811c16a <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 811c152:	683b      	ldr	r3, [r7, #0]
 811c154:	627b      	str	r3, [r7, #36]	@ 0x24
      local_port = pcb->local_port;
 811c156:	687b      	ldr	r3, [r7, #4]
 811c158:	8adb      	ldrh	r3, [r3, #22]
 811c15a:	847b      	strh	r3, [r7, #34]	@ 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 811c15c:	6879      	ldr	r1, [r7, #4]
 811c15e:	4828      	ldr	r0, [pc, #160]	@ (811c200 <tcp_abandon+0x174>)
 811c160:	f001 f9e2 	bl	811d528 <tcp_pcb_remove>
 811c164:	4b27      	ldr	r3, [pc, #156]	@ (811c204 <tcp_abandon+0x178>)
 811c166:	2201      	movs	r2, #1
 811c168:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 811c16a:	687b      	ldr	r3, [r7, #4]
 811c16c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 811c16e:	2b00      	cmp	r3, #0
 811c170:	d004      	beq.n	811c17c <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 811c172:	687b      	ldr	r3, [r7, #4]
 811c174:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 811c176:	4618      	mov	r0, r3
 811c178:	f000 ff1c 	bl	811cfb4 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 811c17c:	687b      	ldr	r3, [r7, #4]
 811c17e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 811c180:	2b00      	cmp	r3, #0
 811c182:	d004      	beq.n	811c18e <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 811c184:	687b      	ldr	r3, [r7, #4]
 811c186:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 811c188:	4618      	mov	r0, r3
 811c18a:	f000 ff13 	bl	811cfb4 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 811c18e:	687b      	ldr	r3, [r7, #4]
 811c190:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 811c192:	2b00      	cmp	r3, #0
 811c194:	d004      	beq.n	811c1a0 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 811c196:	687b      	ldr	r3, [r7, #4]
 811c198:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 811c19a:	4618      	mov	r0, r3
 811c19c:	f000 ff0a 	bl	811cfb4 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 811c1a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811c1a2:	2b00      	cmp	r3, #0
 811c1a4:	d00e      	beq.n	811c1c4 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 811c1a6:	6879      	ldr	r1, [r7, #4]
 811c1a8:	687b      	ldr	r3, [r7, #4]
 811c1aa:	3304      	adds	r3, #4
 811c1ac:	687a      	ldr	r2, [r7, #4]
 811c1ae:	8b12      	ldrh	r2, [r2, #24]
 811c1b0:	9202      	str	r2, [sp, #8]
 811c1b2:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 811c1b4:	9201      	str	r2, [sp, #4]
 811c1b6:	9300      	str	r3, [sp, #0]
 811c1b8:	460b      	mov	r3, r1
 811c1ba:	697a      	ldr	r2, [r7, #20]
 811c1bc:	69b9      	ldr	r1, [r7, #24]
 811c1be:	6878      	ldr	r0, [r7, #4]
 811c1c0:	f005 fb7c 	bl	81218bc <tcp_rst>
    }
    last_state = pcb->state;
 811c1c4:	687b      	ldr	r3, [r7, #4]
 811c1c6:	7d1b      	ldrb	r3, [r3, #20]
 811c1c8:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 811c1ca:	6878      	ldr	r0, [r7, #4]
 811c1cc:	f7ff fd34 	bl	811bc38 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 811c1d0:	693b      	ldr	r3, [r7, #16]
 811c1d2:	2b00      	cmp	r3, #0
 811c1d4:	d004      	beq.n	811c1e0 <tcp_abandon+0x154>
 811c1d6:	693b      	ldr	r3, [r7, #16]
 811c1d8:	f06f 010c 	mvn.w	r1, #12
 811c1dc:	68f8      	ldr	r0, [r7, #12]
 811c1de:	4798      	blx	r3
  }
}
 811c1e0:	3728      	adds	r7, #40	@ 0x28
 811c1e2:	46bd      	mov	sp, r7
 811c1e4:	bd80      	pop	{r7, pc}
 811c1e6:	bf00      	nop
 811c1e8:	0812687c 	.word	0x0812687c
 811c1ec:	08126a00 	.word	0x08126a00
 811c1f0:	08126900 	.word	0x08126900
 811c1f4:	08126a1c 	.word	0x08126a1c
 811c1f8:	1000e4a8 	.word	0x1000e4a8
 811c1fc:	1000e49c 	.word	0x1000e49c
 811c200:	1000e4a4 	.word	0x1000e4a4
 811c204:	1000e4ac 	.word	0x1000e4ac

0811c208 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 811c208:	b580      	push	{r7, lr}
 811c20a:	b082      	sub	sp, #8
 811c20c:	af00      	add	r7, sp, #0
 811c20e:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 811c210:	2101      	movs	r1, #1
 811c212:	6878      	ldr	r0, [r7, #4]
 811c214:	f7ff ff3a 	bl	811c08c <tcp_abandon>
}
 811c218:	bf00      	nop
 811c21a:	3708      	adds	r7, #8
 811c21c:	46bd      	mov	sp, r7
 811c21e:	bd80      	pop	{r7, pc}

0811c220 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 811c220:	b580      	push	{r7, lr}
 811c222:	b088      	sub	sp, #32
 811c224:	af00      	add	r7, sp, #0
 811c226:	60f8      	str	r0, [r7, #12]
 811c228:	60b9      	str	r1, [r7, #8]
 811c22a:	4613      	mov	r3, r2
 811c22c:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 811c22e:	2304      	movs	r3, #4
 811c230:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 811c232:	68bb      	ldr	r3, [r7, #8]
 811c234:	2b00      	cmp	r3, #0
 811c236:	d101      	bne.n	811c23c <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 811c238:	4b3e      	ldr	r3, [pc, #248]	@ (811c334 <tcp_bind+0x114>)
 811c23a:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 811c23c:	68fb      	ldr	r3, [r7, #12]
 811c23e:	2b00      	cmp	r3, #0
 811c240:	d109      	bne.n	811c256 <tcp_bind+0x36>
 811c242:	4b3d      	ldr	r3, [pc, #244]	@ (811c338 <tcp_bind+0x118>)
 811c244:	f240 22a9 	movw	r2, #681	@ 0x2a9
 811c248:	493c      	ldr	r1, [pc, #240]	@ (811c33c <tcp_bind+0x11c>)
 811c24a:	483d      	ldr	r0, [pc, #244]	@ (811c340 <tcp_bind+0x120>)
 811c24c:	f007 fce6 	bl	8123c1c <iprintf>
 811c250:	f06f 030f 	mvn.w	r3, #15
 811c254:	e06a      	b.n	811c32c <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 811c256:	68fb      	ldr	r3, [r7, #12]
 811c258:	7d1b      	ldrb	r3, [r3, #20]
 811c25a:	2b00      	cmp	r3, #0
 811c25c:	d009      	beq.n	811c272 <tcp_bind+0x52>
 811c25e:	4b36      	ldr	r3, [pc, #216]	@ (811c338 <tcp_bind+0x118>)
 811c260:	f240 22ab 	movw	r2, #683	@ 0x2ab
 811c264:	4937      	ldr	r1, [pc, #220]	@ (811c344 <tcp_bind+0x124>)
 811c266:	4836      	ldr	r0, [pc, #216]	@ (811c340 <tcp_bind+0x120>)
 811c268:	f007 fcd8 	bl	8123c1c <iprintf>
 811c26c:	f06f 0305 	mvn.w	r3, #5
 811c270:	e05c      	b.n	811c32c <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 811c272:	88fb      	ldrh	r3, [r7, #6]
 811c274:	2b00      	cmp	r3, #0
 811c276:	d109      	bne.n	811c28c <tcp_bind+0x6c>
    port = tcp_new_port();
 811c278:	f000 f912 	bl	811c4a0 <tcp_new_port>
 811c27c:	4603      	mov	r3, r0
 811c27e:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 811c280:	88fb      	ldrh	r3, [r7, #6]
 811c282:	2b00      	cmp	r3, #0
 811c284:	d135      	bne.n	811c2f2 <tcp_bind+0xd2>
      return ERR_BUF;
 811c286:	f06f 0301 	mvn.w	r3, #1
 811c28a:	e04f      	b.n	811c32c <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 811c28c:	2300      	movs	r3, #0
 811c28e:	61fb      	str	r3, [r7, #28]
 811c290:	e02b      	b.n	811c2ea <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 811c292:	4a2d      	ldr	r2, [pc, #180]	@ (811c348 <tcp_bind+0x128>)
 811c294:	69fb      	ldr	r3, [r7, #28]
 811c296:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 811c29a:	681b      	ldr	r3, [r3, #0]
 811c29c:	61bb      	str	r3, [r7, #24]
 811c29e:	e01e      	b.n	811c2de <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 811c2a0:	69bb      	ldr	r3, [r7, #24]
 811c2a2:	8adb      	ldrh	r3, [r3, #22]
 811c2a4:	88fa      	ldrh	r2, [r7, #6]
 811c2a6:	429a      	cmp	r2, r3
 811c2a8:	d116      	bne.n	811c2d8 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 811c2aa:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 811c2ac:	2b00      	cmp	r3, #0
 811c2ae:	d010      	beq.n	811c2d2 <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 811c2b0:	69bb      	ldr	r3, [r7, #24]
 811c2b2:	681b      	ldr	r3, [r3, #0]
 811c2b4:	2b00      	cmp	r3, #0
 811c2b6:	d00c      	beq.n	811c2d2 <tcp_bind+0xb2>
 811c2b8:	68bb      	ldr	r3, [r7, #8]
 811c2ba:	2b00      	cmp	r3, #0
 811c2bc:	d009      	beq.n	811c2d2 <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 811c2be:	68bb      	ldr	r3, [r7, #8]
 811c2c0:	681b      	ldr	r3, [r3, #0]
 811c2c2:	2b00      	cmp	r3, #0
 811c2c4:	d005      	beq.n	811c2d2 <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 811c2c6:	69bb      	ldr	r3, [r7, #24]
 811c2c8:	681a      	ldr	r2, [r3, #0]
 811c2ca:	68bb      	ldr	r3, [r7, #8]
 811c2cc:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 811c2ce:	429a      	cmp	r2, r3
 811c2d0:	d102      	bne.n	811c2d8 <tcp_bind+0xb8>
              return ERR_USE;
 811c2d2:	f06f 0307 	mvn.w	r3, #7
 811c2d6:	e029      	b.n	811c32c <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 811c2d8:	69bb      	ldr	r3, [r7, #24]
 811c2da:	68db      	ldr	r3, [r3, #12]
 811c2dc:	61bb      	str	r3, [r7, #24]
 811c2de:	69bb      	ldr	r3, [r7, #24]
 811c2e0:	2b00      	cmp	r3, #0
 811c2e2:	d1dd      	bne.n	811c2a0 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 811c2e4:	69fb      	ldr	r3, [r7, #28]
 811c2e6:	3301      	adds	r3, #1
 811c2e8:	61fb      	str	r3, [r7, #28]
 811c2ea:	69fa      	ldr	r2, [r7, #28]
 811c2ec:	697b      	ldr	r3, [r7, #20]
 811c2ee:	429a      	cmp	r2, r3
 811c2f0:	dbcf      	blt.n	811c292 <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 811c2f2:	68bb      	ldr	r3, [r7, #8]
 811c2f4:	2b00      	cmp	r3, #0
 811c2f6:	d00c      	beq.n	811c312 <tcp_bind+0xf2>
 811c2f8:	68bb      	ldr	r3, [r7, #8]
 811c2fa:	681b      	ldr	r3, [r3, #0]
 811c2fc:	2b00      	cmp	r3, #0
 811c2fe:	d008      	beq.n	811c312 <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 811c300:	68bb      	ldr	r3, [r7, #8]
 811c302:	2b00      	cmp	r3, #0
 811c304:	d002      	beq.n	811c30c <tcp_bind+0xec>
 811c306:	68bb      	ldr	r3, [r7, #8]
 811c308:	681b      	ldr	r3, [r3, #0]
 811c30a:	e000      	b.n	811c30e <tcp_bind+0xee>
 811c30c:	2300      	movs	r3, #0
 811c30e:	68fa      	ldr	r2, [r7, #12]
 811c310:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 811c312:	68fb      	ldr	r3, [r7, #12]
 811c314:	88fa      	ldrh	r2, [r7, #6]
 811c316:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 811c318:	4b0c      	ldr	r3, [pc, #48]	@ (811c34c <tcp_bind+0x12c>)
 811c31a:	681a      	ldr	r2, [r3, #0]
 811c31c:	68fb      	ldr	r3, [r7, #12]
 811c31e:	60da      	str	r2, [r3, #12]
 811c320:	4a0a      	ldr	r2, [pc, #40]	@ (811c34c <tcp_bind+0x12c>)
 811c322:	68fb      	ldr	r3, [r7, #12]
 811c324:	6013      	str	r3, [r2, #0]
 811c326:	f005 fde9 	bl	8121efc <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 811c32a:	2300      	movs	r3, #0
}
 811c32c:	4618      	mov	r0, r3
 811c32e:	3720      	adds	r7, #32
 811c330:	46bd      	mov	sp, r7
 811c332:	bd80      	pop	{r7, pc}
 811c334:	08128434 	.word	0x08128434
 811c338:	0812687c 	.word	0x0812687c
 811c33c:	08126a50 	.word	0x08126a50
 811c340:	08126900 	.word	0x08126900
 811c344:	08126a68 	.word	0x08126a68
 811c348:	08128520 	.word	0x08128520
 811c34c:	1000e49c 	.word	0x1000e49c

0811c350 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 811c350:	b580      	push	{r7, lr}
 811c352:	b084      	sub	sp, #16
 811c354:	af00      	add	r7, sp, #0
 811c356:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 811c358:	687b      	ldr	r3, [r7, #4]
 811c35a:	2b00      	cmp	r3, #0
 811c35c:	d106      	bne.n	811c36c <tcp_update_rcv_ann_wnd+0x1c>
 811c35e:	4b25      	ldr	r3, [pc, #148]	@ (811c3f4 <tcp_update_rcv_ann_wnd+0xa4>)
 811c360:	f240 32a6 	movw	r2, #934	@ 0x3a6
 811c364:	4924      	ldr	r1, [pc, #144]	@ (811c3f8 <tcp_update_rcv_ann_wnd+0xa8>)
 811c366:	4825      	ldr	r0, [pc, #148]	@ (811c3fc <tcp_update_rcv_ann_wnd+0xac>)
 811c368:	f007 fc58 	bl	8123c1c <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 811c36c:	687b      	ldr	r3, [r7, #4]
 811c36e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 811c370:	687a      	ldr	r2, [r7, #4]
 811c372:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 811c374:	4413      	add	r3, r2
 811c376:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 811c378:	687b      	ldr	r3, [r7, #4]
 811c37a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 811c37c:	687a      	ldr	r2, [r7, #4]
 811c37e:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 811c380:	f5b2 6f86 	cmp.w	r2, #1072	@ 0x430
 811c384:	bf28      	it	cs
 811c386:	f44f 6286 	movcs.w	r2, #1072	@ 0x430
 811c38a:	b292      	uxth	r2, r2
 811c38c:	4413      	add	r3, r2
 811c38e:	68fa      	ldr	r2, [r7, #12]
 811c390:	1ad3      	subs	r3, r2, r3
 811c392:	2b00      	cmp	r3, #0
 811c394:	db08      	blt.n	811c3a8 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 811c396:	687b      	ldr	r3, [r7, #4]
 811c398:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 811c39a:	687b      	ldr	r3, [r7, #4]
 811c39c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 811c39e:	687b      	ldr	r3, [r7, #4]
 811c3a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 811c3a2:	68fa      	ldr	r2, [r7, #12]
 811c3a4:	1ad3      	subs	r3, r2, r3
 811c3a6:	e020      	b.n	811c3ea <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 811c3a8:	687b      	ldr	r3, [r7, #4]
 811c3aa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 811c3ac:	687b      	ldr	r3, [r7, #4]
 811c3ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 811c3b0:	1ad3      	subs	r3, r2, r3
 811c3b2:	2b00      	cmp	r3, #0
 811c3b4:	dd03      	ble.n	811c3be <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 811c3b6:	687b      	ldr	r3, [r7, #4]
 811c3b8:	2200      	movs	r2, #0
 811c3ba:	855a      	strh	r2, [r3, #42]	@ 0x2a
 811c3bc:	e014      	b.n	811c3e8 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 811c3be:	687b      	ldr	r3, [r7, #4]
 811c3c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 811c3c2:	687b      	ldr	r3, [r7, #4]
 811c3c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 811c3c6:	1ad3      	subs	r3, r2, r3
 811c3c8:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 811c3ca:	68bb      	ldr	r3, [r7, #8]
 811c3cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 811c3d0:	d306      	bcc.n	811c3e0 <tcp_update_rcv_ann_wnd+0x90>
 811c3d2:	4b08      	ldr	r3, [pc, #32]	@ (811c3f4 <tcp_update_rcv_ann_wnd+0xa4>)
 811c3d4:	f240 32b6 	movw	r2, #950	@ 0x3b6
 811c3d8:	4909      	ldr	r1, [pc, #36]	@ (811c400 <tcp_update_rcv_ann_wnd+0xb0>)
 811c3da:	4808      	ldr	r0, [pc, #32]	@ (811c3fc <tcp_update_rcv_ann_wnd+0xac>)
 811c3dc:	f007 fc1e 	bl	8123c1c <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 811c3e0:	68bb      	ldr	r3, [r7, #8]
 811c3e2:	b29a      	uxth	r2, r3
 811c3e4:	687b      	ldr	r3, [r7, #4]
 811c3e6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
    return 0;
 811c3e8:	2300      	movs	r3, #0
  }
}
 811c3ea:	4618      	mov	r0, r3
 811c3ec:	3710      	adds	r7, #16
 811c3ee:	46bd      	mov	sp, r7
 811c3f0:	bd80      	pop	{r7, pc}
 811c3f2:	bf00      	nop
 811c3f4:	0812687c 	.word	0x0812687c
 811c3f8:	08126b18 	.word	0x08126b18
 811c3fc:	08126900 	.word	0x08126900
 811c400:	08126b3c 	.word	0x08126b3c

0811c404 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 811c404:	b580      	push	{r7, lr}
 811c406:	b084      	sub	sp, #16
 811c408:	af00      	add	r7, sp, #0
 811c40a:	6078      	str	r0, [r7, #4]
 811c40c:	460b      	mov	r3, r1
 811c40e:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 811c410:	687b      	ldr	r3, [r7, #4]
 811c412:	2b00      	cmp	r3, #0
 811c414:	d107      	bne.n	811c426 <tcp_recved+0x22>
 811c416:	4b1e      	ldr	r3, [pc, #120]	@ (811c490 <tcp_recved+0x8c>)
 811c418:	f240 32cf 	movw	r2, #975	@ 0x3cf
 811c41c:	491d      	ldr	r1, [pc, #116]	@ (811c494 <tcp_recved+0x90>)
 811c41e:	481e      	ldr	r0, [pc, #120]	@ (811c498 <tcp_recved+0x94>)
 811c420:	f007 fbfc 	bl	8123c1c <iprintf>
 811c424:	e031      	b.n	811c48a <tcp_recved+0x86>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 811c426:	687b      	ldr	r3, [r7, #4]
 811c428:	7d1b      	ldrb	r3, [r3, #20]
 811c42a:	2b01      	cmp	r3, #1
 811c42c:	d106      	bne.n	811c43c <tcp_recved+0x38>
 811c42e:	4b18      	ldr	r3, [pc, #96]	@ (811c490 <tcp_recved+0x8c>)
 811c430:	f240 32d2 	movw	r2, #978	@ 0x3d2
 811c434:	4919      	ldr	r1, [pc, #100]	@ (811c49c <tcp_recved+0x98>)
 811c436:	4818      	ldr	r0, [pc, #96]	@ (811c498 <tcp_recved+0x94>)
 811c438:	f007 fbf0 	bl	8123c1c <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 811c43c:	687b      	ldr	r3, [r7, #4]
 811c43e:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 811c440:	887b      	ldrh	r3, [r7, #2]
 811c442:	4413      	add	r3, r2
 811c444:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 811c446:	89fb      	ldrh	r3, [r7, #14]
 811c448:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 811c44c:	d804      	bhi.n	811c458 <tcp_recved+0x54>
 811c44e:	687b      	ldr	r3, [r7, #4]
 811c450:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 811c452:	89fa      	ldrh	r2, [r7, #14]
 811c454:	429a      	cmp	r2, r3
 811c456:	d204      	bcs.n	811c462 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 811c458:	687b      	ldr	r3, [r7, #4]
 811c45a:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 811c45e:	851a      	strh	r2, [r3, #40]	@ 0x28
 811c460:	e002      	b.n	811c468 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 811c462:	687b      	ldr	r3, [r7, #4]
 811c464:	89fa      	ldrh	r2, [r7, #14]
 811c466:	851a      	strh	r2, [r3, #40]	@ 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 811c468:	6878      	ldr	r0, [r7, #4]
 811c46a:	f7ff ff71 	bl	811c350 <tcp_update_rcv_ann_wnd>
 811c46e:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 811c470:	68bb      	ldr	r3, [r7, #8]
 811c472:	2b00      	cmp	r3, #0
 811c474:	d009      	beq.n	811c48a <tcp_recved+0x86>
    tcp_ack_now(pcb);
 811c476:	687b      	ldr	r3, [r7, #4]
 811c478:	8b5b      	ldrh	r3, [r3, #26]
 811c47a:	f043 0302 	orr.w	r3, r3, #2
 811c47e:	b29a      	uxth	r2, r3
 811c480:	687b      	ldr	r3, [r7, #4]
 811c482:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 811c484:	6878      	ldr	r0, [r7, #4]
 811c486:	f004 fc65 	bl	8120d54 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 811c48a:	3710      	adds	r7, #16
 811c48c:	46bd      	mov	sp, r7
 811c48e:	bd80      	pop	{r7, pc}
 811c490:	0812687c 	.word	0x0812687c
 811c494:	08126b58 	.word	0x08126b58
 811c498:	08126900 	.word	0x08126900
 811c49c:	08126b70 	.word	0x08126b70

0811c4a0 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 811c4a0:	b480      	push	{r7}
 811c4a2:	b083      	sub	sp, #12
 811c4a4:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 811c4a6:	2300      	movs	r3, #0
 811c4a8:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 811c4aa:	4b1e      	ldr	r3, [pc, #120]	@ (811c524 <tcp_new_port+0x84>)
 811c4ac:	881b      	ldrh	r3, [r3, #0]
 811c4ae:	3301      	adds	r3, #1
 811c4b0:	b29a      	uxth	r2, r3
 811c4b2:	4b1c      	ldr	r3, [pc, #112]	@ (811c524 <tcp_new_port+0x84>)
 811c4b4:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 811c4b6:	4b1b      	ldr	r3, [pc, #108]	@ (811c524 <tcp_new_port+0x84>)
 811c4b8:	881b      	ldrh	r3, [r3, #0]
 811c4ba:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 811c4be:	4293      	cmp	r3, r2
 811c4c0:	d103      	bne.n	811c4ca <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 811c4c2:	4b18      	ldr	r3, [pc, #96]	@ (811c524 <tcp_new_port+0x84>)
 811c4c4:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 811c4c8:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 811c4ca:	2300      	movs	r3, #0
 811c4cc:	71fb      	strb	r3, [r7, #7]
 811c4ce:	e01e      	b.n	811c50e <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 811c4d0:	79fb      	ldrb	r3, [r7, #7]
 811c4d2:	4a15      	ldr	r2, [pc, #84]	@ (811c528 <tcp_new_port+0x88>)
 811c4d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 811c4d8:	681b      	ldr	r3, [r3, #0]
 811c4da:	603b      	str	r3, [r7, #0]
 811c4dc:	e011      	b.n	811c502 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 811c4de:	683b      	ldr	r3, [r7, #0]
 811c4e0:	8ada      	ldrh	r2, [r3, #22]
 811c4e2:	4b10      	ldr	r3, [pc, #64]	@ (811c524 <tcp_new_port+0x84>)
 811c4e4:	881b      	ldrh	r3, [r3, #0]
 811c4e6:	429a      	cmp	r2, r3
 811c4e8:	d108      	bne.n	811c4fc <tcp_new_port+0x5c>
        n++;
 811c4ea:	88bb      	ldrh	r3, [r7, #4]
 811c4ec:	3301      	adds	r3, #1
 811c4ee:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 811c4f0:	88bb      	ldrh	r3, [r7, #4]
 811c4f2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 811c4f6:	d3d8      	bcc.n	811c4aa <tcp_new_port+0xa>
          return 0;
 811c4f8:	2300      	movs	r3, #0
 811c4fa:	e00d      	b.n	811c518 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 811c4fc:	683b      	ldr	r3, [r7, #0]
 811c4fe:	68db      	ldr	r3, [r3, #12]
 811c500:	603b      	str	r3, [r7, #0]
 811c502:	683b      	ldr	r3, [r7, #0]
 811c504:	2b00      	cmp	r3, #0
 811c506:	d1ea      	bne.n	811c4de <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 811c508:	79fb      	ldrb	r3, [r7, #7]
 811c50a:	3301      	adds	r3, #1
 811c50c:	71fb      	strb	r3, [r7, #7]
 811c50e:	79fb      	ldrb	r3, [r7, #7]
 811c510:	2b03      	cmp	r3, #3
 811c512:	d9dd      	bls.n	811c4d0 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 811c514:	4b03      	ldr	r3, [pc, #12]	@ (811c524 <tcp_new_port+0x84>)
 811c516:	881b      	ldrh	r3, [r3, #0]
}
 811c518:	4618      	mov	r0, r3
 811c51a:	370c      	adds	r7, #12
 811c51c:	46bd      	mov	sp, r7
 811c51e:	f85d 7b04 	ldr.w	r7, [sp], #4
 811c522:	4770      	bx	lr
 811c524:	10000028 	.word	0x10000028
 811c528:	08128520 	.word	0x08128520

0811c52c <tcp_connect>:
 *         other err_t values if connect request couldn't be sent
 */
err_t
tcp_connect(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port,
            tcp_connected_fn connected)
{
 811c52c:	b580      	push	{r7, lr}
 811c52e:	b08a      	sub	sp, #40	@ 0x28
 811c530:	af00      	add	r7, sp, #0
 811c532:	60f8      	str	r0, [r7, #12]
 811c534:	60b9      	str	r1, [r7, #8]
 811c536:	603b      	str	r3, [r7, #0]
 811c538:	4613      	mov	r3, r2
 811c53a:	80fb      	strh	r3, [r7, #6]
  struct netif *netif = NULL;
 811c53c:	2300      	movs	r3, #0
 811c53e:	627b      	str	r3, [r7, #36]	@ 0x24
  u32_t iss;
  u16_t old_local_port;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 811c540:	68fb      	ldr	r3, [r7, #12]
 811c542:	2b00      	cmp	r3, #0
 811c544:	d109      	bne.n	811c55a <tcp_connect+0x2e>
 811c546:	4b7d      	ldr	r3, [pc, #500]	@ (811c73c <tcp_connect+0x210>)
 811c548:	f240 4235 	movw	r2, #1077	@ 0x435
 811c54c:	497c      	ldr	r1, [pc, #496]	@ (811c740 <tcp_connect+0x214>)
 811c54e:	487d      	ldr	r0, [pc, #500]	@ (811c744 <tcp_connect+0x218>)
 811c550:	f007 fb64 	bl	8123c1c <iprintf>
 811c554:	f06f 030f 	mvn.w	r3, #15
 811c558:	e0ec      	b.n	811c734 <tcp_connect+0x208>
  LWIP_ERROR("tcp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 811c55a:	68bb      	ldr	r3, [r7, #8]
 811c55c:	2b00      	cmp	r3, #0
 811c55e:	d109      	bne.n	811c574 <tcp_connect+0x48>
 811c560:	4b76      	ldr	r3, [pc, #472]	@ (811c73c <tcp_connect+0x210>)
 811c562:	f240 4236 	movw	r2, #1078	@ 0x436
 811c566:	4978      	ldr	r1, [pc, #480]	@ (811c748 <tcp_connect+0x21c>)
 811c568:	4876      	ldr	r0, [pc, #472]	@ (811c744 <tcp_connect+0x218>)
 811c56a:	f007 fb57 	bl	8123c1c <iprintf>
 811c56e:	f06f 030f 	mvn.w	r3, #15
 811c572:	e0df      	b.n	811c734 <tcp_connect+0x208>

  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 811c574:	68fb      	ldr	r3, [r7, #12]
 811c576:	7d1b      	ldrb	r3, [r3, #20]
 811c578:	2b00      	cmp	r3, #0
 811c57a:	d009      	beq.n	811c590 <tcp_connect+0x64>
 811c57c:	4b6f      	ldr	r3, [pc, #444]	@ (811c73c <tcp_connect+0x210>)
 811c57e:	f44f 6287 	mov.w	r2, #1080	@ 0x438
 811c582:	4972      	ldr	r1, [pc, #456]	@ (811c74c <tcp_connect+0x220>)
 811c584:	486f      	ldr	r0, [pc, #444]	@ (811c744 <tcp_connect+0x218>)
 811c586:	f007 fb49 	bl	8123c1c <iprintf>
 811c58a:	f06f 0309 	mvn.w	r3, #9
 811c58e:	e0d1      	b.n	811c734 <tcp_connect+0x208>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_connect to port %"U16_F"\n", port));
  ip_addr_set(&pcb->remote_ip, ipaddr);
 811c590:	68bb      	ldr	r3, [r7, #8]
 811c592:	2b00      	cmp	r3, #0
 811c594:	d002      	beq.n	811c59c <tcp_connect+0x70>
 811c596:	68bb      	ldr	r3, [r7, #8]
 811c598:	681b      	ldr	r3, [r3, #0]
 811c59a:	e000      	b.n	811c59e <tcp_connect+0x72>
 811c59c:	2300      	movs	r3, #0
 811c59e:	68fa      	ldr	r2, [r7, #12]
 811c5a0:	6053      	str	r3, [r2, #4]
  pcb->remote_port = port;
 811c5a2:	68fb      	ldr	r3, [r7, #12]
 811c5a4:	88fa      	ldrh	r2, [r7, #6]
 811c5a6:	831a      	strh	r2, [r3, #24]

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 811c5a8:	68fb      	ldr	r3, [r7, #12]
 811c5aa:	7a1b      	ldrb	r3, [r3, #8]
 811c5ac:	2b00      	cmp	r3, #0
 811c5ae:	d006      	beq.n	811c5be <tcp_connect+0x92>
    netif = netif_get_by_index(pcb->netif_idx);
 811c5b0:	68fb      	ldr	r3, [r7, #12]
 811c5b2:	7a1b      	ldrb	r3, [r3, #8]
 811c5b4:	4618      	mov	r0, r3
 811c5b6:	f7fe fc05 	bl	811adc4 <netif_get_by_index>
 811c5ba:	6278      	str	r0, [r7, #36]	@ 0x24
 811c5bc:	e005      	b.n	811c5ca <tcp_connect+0x9e>
  } else {
    /* check if we have a route to the remote host */
    netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 811c5be:	68fb      	ldr	r3, [r7, #12]
 811c5c0:	3304      	adds	r3, #4
 811c5c2:	4618      	mov	r0, r3
 811c5c4:	f7fc f924 	bl	8118810 <ip4_route>
 811c5c8:	6278      	str	r0, [r7, #36]	@ 0x24
  }
  if (netif == NULL) {
 811c5ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811c5cc:	2b00      	cmp	r3, #0
 811c5ce:	d102      	bne.n	811c5d6 <tcp_connect+0xaa>
    /* Don't even try to send a SYN packet if we have no route since that will fail. */
    return ERR_RTE;
 811c5d0:	f06f 0303 	mvn.w	r3, #3
 811c5d4:	e0ae      	b.n	811c734 <tcp_connect+0x208>
  }

  /* check if local IP has been assigned to pcb, if not, get one */
  if (ip_addr_isany(&pcb->local_ip)) {
 811c5d6:	68fb      	ldr	r3, [r7, #12]
 811c5d8:	2b00      	cmp	r3, #0
 811c5da:	d003      	beq.n	811c5e4 <tcp_connect+0xb8>
 811c5dc:	68fb      	ldr	r3, [r7, #12]
 811c5de:	681b      	ldr	r3, [r3, #0]
 811c5e0:	2b00      	cmp	r3, #0
 811c5e2:	d111      	bne.n	811c608 <tcp_connect+0xdc>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, ipaddr);
 811c5e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811c5e6:	2b00      	cmp	r3, #0
 811c5e8:	d002      	beq.n	811c5f0 <tcp_connect+0xc4>
 811c5ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811c5ec:	3304      	adds	r3, #4
 811c5ee:	e000      	b.n	811c5f2 <tcp_connect+0xc6>
 811c5f0:	2300      	movs	r3, #0
 811c5f2:	61fb      	str	r3, [r7, #28]
    if (local_ip == NULL) {
 811c5f4:	69fb      	ldr	r3, [r7, #28]
 811c5f6:	2b00      	cmp	r3, #0
 811c5f8:	d102      	bne.n	811c600 <tcp_connect+0xd4>
      return ERR_RTE;
 811c5fa:	f06f 0303 	mvn.w	r3, #3
 811c5fe:	e099      	b.n	811c734 <tcp_connect+0x208>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 811c600:	69fb      	ldr	r3, [r7, #28]
 811c602:	681a      	ldr	r2, [r3, #0]
 811c604:	68fb      	ldr	r3, [r7, #12]
 811c606:	601a      	str	r2, [r3, #0]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST)) {
    ip6_addr_assign_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST, netif);
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  old_local_port = pcb->local_port;
 811c608:	68fb      	ldr	r3, [r7, #12]
 811c60a:	8adb      	ldrh	r3, [r3, #22]
 811c60c:	837b      	strh	r3, [r7, #26]
  if (pcb->local_port == 0) {
 811c60e:	68fb      	ldr	r3, [r7, #12]
 811c610:	8adb      	ldrh	r3, [r3, #22]
 811c612:	2b00      	cmp	r3, #0
 811c614:	d10c      	bne.n	811c630 <tcp_connect+0x104>
    pcb->local_port = tcp_new_port();
 811c616:	f7ff ff43 	bl	811c4a0 <tcp_new_port>
 811c61a:	4603      	mov	r3, r0
 811c61c:	461a      	mov	r2, r3
 811c61e:	68fb      	ldr	r3, [r7, #12]
 811c620:	82da      	strh	r2, [r3, #22]
    if (pcb->local_port == 0) {
 811c622:	68fb      	ldr	r3, [r7, #12]
 811c624:	8adb      	ldrh	r3, [r3, #22]
 811c626:	2b00      	cmp	r3, #0
 811c628:	d102      	bne.n	811c630 <tcp_connect+0x104>
      return ERR_BUF;
 811c62a:	f06f 0301 	mvn.w	r3, #1
 811c62e:	e081      	b.n	811c734 <tcp_connect+0x208>
      }
    }
#endif /* SO_REUSE */
  }

  iss = tcp_next_iss(pcb);
 811c630:	68f8      	ldr	r0, [r7, #12]
 811c632:	f001 f80d 	bl	811d650 <tcp_next_iss>
 811c636:	6178      	str	r0, [r7, #20]
  pcb->rcv_nxt = 0;
 811c638:	68fb      	ldr	r3, [r7, #12]
 811c63a:	2200      	movs	r2, #0
 811c63c:	625a      	str	r2, [r3, #36]	@ 0x24
  pcb->snd_nxt = iss;
 811c63e:	68fb      	ldr	r3, [r7, #12]
 811c640:	697a      	ldr	r2, [r7, #20]
 811c642:	651a      	str	r2, [r3, #80]	@ 0x50
  pcb->lastack = iss - 1;
 811c644:	697b      	ldr	r3, [r7, #20]
 811c646:	1e5a      	subs	r2, r3, #1
 811c648:	68fb      	ldr	r3, [r7, #12]
 811c64a:	645a      	str	r2, [r3, #68]	@ 0x44
  pcb->snd_wl2 = iss - 1;
 811c64c:	697b      	ldr	r3, [r7, #20]
 811c64e:	1e5a      	subs	r2, r3, #1
 811c650:	68fb      	ldr	r3, [r7, #12]
 811c652:	659a      	str	r2, [r3, #88]	@ 0x58
  pcb->snd_lbb = iss - 1;
 811c654:	697b      	ldr	r3, [r7, #20]
 811c656:	1e5a      	subs	r2, r3, #1
 811c658:	68fb      	ldr	r3, [r7, #12]
 811c65a:	65da      	str	r2, [r3, #92]	@ 0x5c
  /* Start with a window that does not need scaling. When window scaling is
     enabled and used, the window is enlarged when both sides agree on scaling. */
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 811c65c:	68fb      	ldr	r3, [r7, #12]
 811c65e:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 811c662:	855a      	strh	r2, [r3, #42]	@ 0x2a
 811c664:	68fb      	ldr	r3, [r7, #12]
 811c666:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 811c668:	68fb      	ldr	r3, [r7, #12]
 811c66a:	851a      	strh	r2, [r3, #40]	@ 0x28
  pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 811c66c:	68fb      	ldr	r3, [r7, #12]
 811c66e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 811c670:	68fb      	ldr	r3, [r7, #12]
 811c672:	62da      	str	r2, [r3, #44]	@ 0x2c
  pcb->snd_wnd = TCP_WND;
 811c674:	68fb      	ldr	r3, [r7, #12]
 811c676:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 811c67a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  /* As initial send MSS, we use TCP_MSS but limit it to 536.
     The send MSS is updated when an MSS option is received. */
  pcb->mss = INITIAL_MSS;
 811c67e:	68fb      	ldr	r3, [r7, #12]
 811c680:	f44f 7206 	mov.w	r2, #536	@ 0x218
 811c684:	865a      	strh	r2, [r3, #50]	@ 0x32
#if TCP_CALCULATE_EFF_SEND_MSS
  pcb->mss = tcp_eff_send_mss_netif(pcb->mss, netif, &pcb->remote_ip);
 811c686:	68fb      	ldr	r3, [r7, #12]
 811c688:	8e58      	ldrh	r0, [r3, #50]	@ 0x32
 811c68a:	68fb      	ldr	r3, [r7, #12]
 811c68c:	3304      	adds	r3, #4
 811c68e:	461a      	mov	r2, r3
 811c690:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 811c692:	f001 f803 	bl	811d69c <tcp_eff_send_mss_netif>
 811c696:	4603      	mov	r3, r0
 811c698:	461a      	mov	r2, r3
 811c69a:	68fb      	ldr	r3, [r7, #12]
 811c69c:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
  pcb->cwnd = 1;
 811c69e:	68fb      	ldr	r3, [r7, #12]
 811c6a0:	2201      	movs	r2, #1
 811c6a2:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
#if LWIP_CALLBACK_API
  pcb->connected = connected;
 811c6a6:	68fb      	ldr	r3, [r7, #12]
 811c6a8:	683a      	ldr	r2, [r7, #0]
 811c6aa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(connected);
#endif /* LWIP_CALLBACK_API */

  /* Send a SYN together with the MSS option. */
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 811c6ae:	2102      	movs	r1, #2
 811c6b0:	68f8      	ldr	r0, [r7, #12]
 811c6b2:	f004 fa61 	bl	8120b78 <tcp_enqueue_flags>
 811c6b6:	4603      	mov	r3, r0
 811c6b8:	74fb      	strb	r3, [r7, #19]
  if (ret == ERR_OK) {
 811c6ba:	f997 3013 	ldrsb.w	r3, [r7, #19]
 811c6be:	2b00      	cmp	r3, #0
 811c6c0:	d136      	bne.n	811c730 <tcp_connect+0x204>
    /* SYN segment was enqueued, changed the pcbs state now */
    pcb->state = SYN_SENT;
 811c6c2:	68fb      	ldr	r3, [r7, #12]
 811c6c4:	2202      	movs	r2, #2
 811c6c6:	751a      	strb	r2, [r3, #20]
    if (old_local_port != 0) {
 811c6c8:	8b7b      	ldrh	r3, [r7, #26]
 811c6ca:	2b00      	cmp	r3, #0
 811c6cc:	d021      	beq.n	811c712 <tcp_connect+0x1e6>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 811c6ce:	4b20      	ldr	r3, [pc, #128]	@ (811c750 <tcp_connect+0x224>)
 811c6d0:	681b      	ldr	r3, [r3, #0]
 811c6d2:	68fa      	ldr	r2, [r7, #12]
 811c6d4:	429a      	cmp	r2, r3
 811c6d6:	d105      	bne.n	811c6e4 <tcp_connect+0x1b8>
 811c6d8:	4b1d      	ldr	r3, [pc, #116]	@ (811c750 <tcp_connect+0x224>)
 811c6da:	681b      	ldr	r3, [r3, #0]
 811c6dc:	68db      	ldr	r3, [r3, #12]
 811c6de:	4a1c      	ldr	r2, [pc, #112]	@ (811c750 <tcp_connect+0x224>)
 811c6e0:	6013      	str	r3, [r2, #0]
 811c6e2:	e013      	b.n	811c70c <tcp_connect+0x1e0>
 811c6e4:	4b1a      	ldr	r3, [pc, #104]	@ (811c750 <tcp_connect+0x224>)
 811c6e6:	681b      	ldr	r3, [r3, #0]
 811c6e8:	623b      	str	r3, [r7, #32]
 811c6ea:	e00c      	b.n	811c706 <tcp_connect+0x1da>
 811c6ec:	6a3b      	ldr	r3, [r7, #32]
 811c6ee:	68db      	ldr	r3, [r3, #12]
 811c6f0:	68fa      	ldr	r2, [r7, #12]
 811c6f2:	429a      	cmp	r2, r3
 811c6f4:	d104      	bne.n	811c700 <tcp_connect+0x1d4>
 811c6f6:	68fb      	ldr	r3, [r7, #12]
 811c6f8:	68da      	ldr	r2, [r3, #12]
 811c6fa:	6a3b      	ldr	r3, [r7, #32]
 811c6fc:	60da      	str	r2, [r3, #12]
 811c6fe:	e005      	b.n	811c70c <tcp_connect+0x1e0>
 811c700:	6a3b      	ldr	r3, [r7, #32]
 811c702:	68db      	ldr	r3, [r3, #12]
 811c704:	623b      	str	r3, [r7, #32]
 811c706:	6a3b      	ldr	r3, [r7, #32]
 811c708:	2b00      	cmp	r3, #0
 811c70a:	d1ef      	bne.n	811c6ec <tcp_connect+0x1c0>
 811c70c:	68fb      	ldr	r3, [r7, #12]
 811c70e:	2200      	movs	r2, #0
 811c710:	60da      	str	r2, [r3, #12]
    }
    TCP_REG_ACTIVE(pcb);
 811c712:	4b10      	ldr	r3, [pc, #64]	@ (811c754 <tcp_connect+0x228>)
 811c714:	681a      	ldr	r2, [r3, #0]
 811c716:	68fb      	ldr	r3, [r7, #12]
 811c718:	60da      	str	r2, [r3, #12]
 811c71a:	4a0e      	ldr	r2, [pc, #56]	@ (811c754 <tcp_connect+0x228>)
 811c71c:	68fb      	ldr	r3, [r7, #12]
 811c71e:	6013      	str	r3, [r2, #0]
 811c720:	f005 fbec 	bl	8121efc <tcp_timer_needed>
 811c724:	4b0c      	ldr	r3, [pc, #48]	@ (811c758 <tcp_connect+0x22c>)
 811c726:	2201      	movs	r2, #1
 811c728:	701a      	strb	r2, [r3, #0]
    MIB2_STATS_INC(mib2.tcpactiveopens);

    tcp_output(pcb);
 811c72a:	68f8      	ldr	r0, [r7, #12]
 811c72c:	f004 fb12 	bl	8120d54 <tcp_output>
  }
  return ret;
 811c730:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 811c734:	4618      	mov	r0, r3
 811c736:	3728      	adds	r7, #40	@ 0x28
 811c738:	46bd      	mov	sp, r7
 811c73a:	bd80      	pop	{r7, pc}
 811c73c:	0812687c 	.word	0x0812687c
 811c740:	08126b98 	.word	0x08126b98
 811c744:	08126900 	.word	0x08126900
 811c748:	08126bb4 	.word	0x08126bb4
 811c74c:	08126bd0 	.word	0x08126bd0
 811c750:	1000e49c 	.word	0x1000e49c
 811c754:	1000e4a4 	.word	0x1000e4a4
 811c758:	1000e4ac 	.word	0x1000e4ac

0811c75c <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 811c75c:	b5b0      	push	{r4, r5, r7, lr}
 811c75e:	b090      	sub	sp, #64	@ 0x40
 811c760:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 811c762:	2300      	movs	r3, #0
 811c764:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  ++tcp_ticks;
 811c768:	4b95      	ldr	r3, [pc, #596]	@ (811c9c0 <tcp_slowtmr+0x264>)
 811c76a:	681b      	ldr	r3, [r3, #0]
 811c76c:	3301      	adds	r3, #1
 811c76e:	4a94      	ldr	r2, [pc, #592]	@ (811c9c0 <tcp_slowtmr+0x264>)
 811c770:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 811c772:	4b94      	ldr	r3, [pc, #592]	@ (811c9c4 <tcp_slowtmr+0x268>)
 811c774:	781b      	ldrb	r3, [r3, #0]
 811c776:	3301      	adds	r3, #1
 811c778:	b2da      	uxtb	r2, r3
 811c77a:	4b92      	ldr	r3, [pc, #584]	@ (811c9c4 <tcp_slowtmr+0x268>)
 811c77c:	701a      	strb	r2, [r3, #0]
 811c77e:	e000      	b.n	811c782 <tcp_slowtmr+0x26>
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
        TCP_EVENT_POLL(prev, err);
        if (tcp_active_pcbs_changed) {
          goto tcp_slowtmr_start;
 811c780:	bf00      	nop
  prev = NULL;
 811c782:	2300      	movs	r3, #0
 811c784:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_active_pcbs;
 811c786:	4b90      	ldr	r3, [pc, #576]	@ (811c9c8 <tcp_slowtmr+0x26c>)
 811c788:	681b      	ldr	r3, [r3, #0]
 811c78a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 811c78c:	e2bb      	b.n	811cd06 <tcp_slowtmr+0x5aa>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 811c78e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811c790:	7d1b      	ldrb	r3, [r3, #20]
 811c792:	2b00      	cmp	r3, #0
 811c794:	d106      	bne.n	811c7a4 <tcp_slowtmr+0x48>
 811c796:	4b8d      	ldr	r3, [pc, #564]	@ (811c9cc <tcp_slowtmr+0x270>)
 811c798:	f240 42be 	movw	r2, #1214	@ 0x4be
 811c79c:	498c      	ldr	r1, [pc, #560]	@ (811c9d0 <tcp_slowtmr+0x274>)
 811c79e:	488d      	ldr	r0, [pc, #564]	@ (811c9d4 <tcp_slowtmr+0x278>)
 811c7a0:	f007 fa3c 	bl	8123c1c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 811c7a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811c7a6:	7d1b      	ldrb	r3, [r3, #20]
 811c7a8:	2b01      	cmp	r3, #1
 811c7aa:	d106      	bne.n	811c7ba <tcp_slowtmr+0x5e>
 811c7ac:	4b87      	ldr	r3, [pc, #540]	@ (811c9cc <tcp_slowtmr+0x270>)
 811c7ae:	f240 42bf 	movw	r2, #1215	@ 0x4bf
 811c7b2:	4989      	ldr	r1, [pc, #548]	@ (811c9d8 <tcp_slowtmr+0x27c>)
 811c7b4:	4887      	ldr	r0, [pc, #540]	@ (811c9d4 <tcp_slowtmr+0x278>)
 811c7b6:	f007 fa31 	bl	8123c1c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 811c7ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811c7bc:	7d1b      	ldrb	r3, [r3, #20]
 811c7be:	2b0a      	cmp	r3, #10
 811c7c0:	d106      	bne.n	811c7d0 <tcp_slowtmr+0x74>
 811c7c2:	4b82      	ldr	r3, [pc, #520]	@ (811c9cc <tcp_slowtmr+0x270>)
 811c7c4:	f44f 6298 	mov.w	r2, #1216	@ 0x4c0
 811c7c8:	4984      	ldr	r1, [pc, #528]	@ (811c9dc <tcp_slowtmr+0x280>)
 811c7ca:	4882      	ldr	r0, [pc, #520]	@ (811c9d4 <tcp_slowtmr+0x278>)
 811c7cc:	f007 fa26 	bl	8123c1c <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 811c7d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811c7d2:	7f9a      	ldrb	r2, [r3, #30]
 811c7d4:	4b7b      	ldr	r3, [pc, #492]	@ (811c9c4 <tcp_slowtmr+0x268>)
 811c7d6:	781b      	ldrb	r3, [r3, #0]
 811c7d8:	429a      	cmp	r2, r3
 811c7da:	d105      	bne.n	811c7e8 <tcp_slowtmr+0x8c>
      prev = pcb;
 811c7dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811c7de:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 811c7e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811c7e2:	68db      	ldr	r3, [r3, #12]
 811c7e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      continue;
 811c7e6:	e28e      	b.n	811cd06 <tcp_slowtmr+0x5aa>
    pcb->last_timer = tcp_timer_ctr;
 811c7e8:	4b76      	ldr	r3, [pc, #472]	@ (811c9c4 <tcp_slowtmr+0x268>)
 811c7ea:	781a      	ldrb	r2, [r3, #0]
 811c7ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811c7ee:	779a      	strb	r2, [r3, #30]
    pcb_remove = 0;
 811c7f0:	2300      	movs	r3, #0
 811c7f2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    pcb_reset = 0;
 811c7f6:	2300      	movs	r3, #0
 811c7f8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 811c7fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811c7fe:	7d1b      	ldrb	r3, [r3, #20]
 811c800:	2b02      	cmp	r3, #2
 811c802:	d10a      	bne.n	811c81a <tcp_slowtmr+0xbe>
 811c804:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811c806:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 811c80a:	2b05      	cmp	r3, #5
 811c80c:	d905      	bls.n	811c81a <tcp_slowtmr+0xbe>
      ++pcb_remove;
 811c80e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 811c812:	3301      	adds	r3, #1
 811c814:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 811c818:	e11e      	b.n	811ca58 <tcp_slowtmr+0x2fc>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 811c81a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811c81c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 811c820:	2b0b      	cmp	r3, #11
 811c822:	d905      	bls.n	811c830 <tcp_slowtmr+0xd4>
      ++pcb_remove;
 811c824:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 811c828:	3301      	adds	r3, #1
 811c82a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 811c82e:	e113      	b.n	811ca58 <tcp_slowtmr+0x2fc>
      if (pcb->persist_backoff > 0) {
 811c830:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811c832:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 811c836:	2b00      	cmp	r3, #0
 811c838:	d075      	beq.n	811c926 <tcp_slowtmr+0x1ca>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 811c83a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811c83c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 811c83e:	2b00      	cmp	r3, #0
 811c840:	d006      	beq.n	811c850 <tcp_slowtmr+0xf4>
 811c842:	4b62      	ldr	r3, [pc, #392]	@ (811c9cc <tcp_slowtmr+0x270>)
 811c844:	f240 42d4 	movw	r2, #1236	@ 0x4d4
 811c848:	4965      	ldr	r1, [pc, #404]	@ (811c9e0 <tcp_slowtmr+0x284>)
 811c84a:	4862      	ldr	r0, [pc, #392]	@ (811c9d4 <tcp_slowtmr+0x278>)
 811c84c:	f007 f9e6 	bl	8123c1c <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 811c850:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811c852:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 811c854:	2b00      	cmp	r3, #0
 811c856:	d106      	bne.n	811c866 <tcp_slowtmr+0x10a>
 811c858:	4b5c      	ldr	r3, [pc, #368]	@ (811c9cc <tcp_slowtmr+0x270>)
 811c85a:	f240 42d5 	movw	r2, #1237	@ 0x4d5
 811c85e:	4961      	ldr	r1, [pc, #388]	@ (811c9e4 <tcp_slowtmr+0x288>)
 811c860:	485c      	ldr	r0, [pc, #368]	@ (811c9d4 <tcp_slowtmr+0x278>)
 811c862:	f007 f9db 	bl	8123c1c <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 811c866:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811c868:	f893 30a2 	ldrb.w	r3, [r3, #162]	@ 0xa2
 811c86c:	2b0b      	cmp	r3, #11
 811c86e:	d905      	bls.n	811c87c <tcp_slowtmr+0x120>
          ++pcb_remove; /* max probes reached */
 811c870:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 811c874:	3301      	adds	r3, #1
 811c876:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 811c87a:	e0ed      	b.n	811ca58 <tcp_slowtmr+0x2fc>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 811c87c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811c87e:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 811c882:	3b01      	subs	r3, #1
 811c884:	4a58      	ldr	r2, [pc, #352]	@ (811c9e8 <tcp_slowtmr+0x28c>)
 811c886:	5cd3      	ldrb	r3, [r2, r3]
 811c888:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 811c88a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811c88c:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 811c890:	7c7a      	ldrb	r2, [r7, #17]
 811c892:	429a      	cmp	r2, r3
 811c894:	d907      	bls.n	811c8a6 <tcp_slowtmr+0x14a>
            pcb->persist_cnt++;
 811c896:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811c898:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 811c89c:	3301      	adds	r3, #1
 811c89e:	b2da      	uxtb	r2, r3
 811c8a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811c8a2:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
          if (pcb->persist_cnt >= backoff_cnt) {
 811c8a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811c8a8:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 811c8ac:	7c7a      	ldrb	r2, [r7, #17]
 811c8ae:	429a      	cmp	r2, r3
 811c8b0:	f200 80d2 	bhi.w	811ca58 <tcp_slowtmr+0x2fc>
            int next_slot = 1; /* increment timer to next slot */
 811c8b4:	2301      	movs	r3, #1
 811c8b6:	623b      	str	r3, [r7, #32]
            if (pcb->snd_wnd == 0) {
 811c8b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811c8ba:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 811c8be:	2b00      	cmp	r3, #0
 811c8c0:	d108      	bne.n	811c8d4 <tcp_slowtmr+0x178>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 811c8c2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 811c8c4:	f005 f8ee 	bl	8121aa4 <tcp_zero_window_probe>
 811c8c8:	4603      	mov	r3, r0
 811c8ca:	2b00      	cmp	r3, #0
 811c8cc:	d014      	beq.n	811c8f8 <tcp_slowtmr+0x19c>
                next_slot = 0; /* try probe again with current slot */
 811c8ce:	2300      	movs	r3, #0
 811c8d0:	623b      	str	r3, [r7, #32]
 811c8d2:	e011      	b.n	811c8f8 <tcp_slowtmr+0x19c>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 811c8d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811c8d6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 811c8da:	4619      	mov	r1, r3
 811c8dc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 811c8de:	f003 ffb3 	bl	8120848 <tcp_split_unsent_seg>
 811c8e2:	4603      	mov	r3, r0
 811c8e4:	2b00      	cmp	r3, #0
 811c8e6:	d107      	bne.n	811c8f8 <tcp_slowtmr+0x19c>
                if (tcp_output(pcb) == ERR_OK) {
 811c8e8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 811c8ea:	f004 fa33 	bl	8120d54 <tcp_output>
 811c8ee:	4603      	mov	r3, r0
 811c8f0:	2b00      	cmp	r3, #0
 811c8f2:	d101      	bne.n	811c8f8 <tcp_slowtmr+0x19c>
                  next_slot = 0;
 811c8f4:	2300      	movs	r3, #0
 811c8f6:	623b      	str	r3, [r7, #32]
            if (next_slot) {
 811c8f8:	6a3b      	ldr	r3, [r7, #32]
 811c8fa:	2b00      	cmp	r3, #0
 811c8fc:	f000 80ac 	beq.w	811ca58 <tcp_slowtmr+0x2fc>
              pcb->persist_cnt = 0;
 811c900:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811c902:	2200      	movs	r2, #0
 811c904:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 811c908:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811c90a:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 811c90e:	2b06      	cmp	r3, #6
 811c910:	f200 80a2 	bhi.w	811ca58 <tcp_slowtmr+0x2fc>
                pcb->persist_backoff++;
 811c914:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811c916:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 811c91a:	3301      	adds	r3, #1
 811c91c:	b2da      	uxtb	r2, r3
 811c91e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811c920:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1
 811c924:	e098      	b.n	811ca58 <tcp_slowtmr+0x2fc>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 811c926:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811c928:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 811c92c:	2b00      	cmp	r3, #0
 811c92e:	db0f      	blt.n	811c950 <tcp_slowtmr+0x1f4>
 811c930:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811c932:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 811c936:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 811c93a:	4293      	cmp	r3, r2
 811c93c:	d008      	beq.n	811c950 <tcp_slowtmr+0x1f4>
          ++pcb->rtime;
 811c93e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811c940:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 811c944:	b29b      	uxth	r3, r3
 811c946:	3301      	adds	r3, #1
 811c948:	b29b      	uxth	r3, r3
 811c94a:	b21a      	sxth	r2, r3
 811c94c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811c94e:	861a      	strh	r2, [r3, #48]	@ 0x30
        if (pcb->rtime >= pcb->rto) {
 811c950:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811c952:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
 811c956:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811c958:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 811c95c:	429a      	cmp	r2, r3
 811c95e:	db7b      	blt.n	811ca58 <tcp_slowtmr+0x2fc>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 811c960:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 811c962:	f004 fceb 	bl	812133c <tcp_rexmit_rto_prepare>
 811c966:	4603      	mov	r3, r0
 811c968:	2b00      	cmp	r3, #0
 811c96a:	d007      	beq.n	811c97c <tcp_slowtmr+0x220>
 811c96c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811c96e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 811c970:	2b00      	cmp	r3, #0
 811c972:	d171      	bne.n	811ca58 <tcp_slowtmr+0x2fc>
 811c974:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811c976:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 811c978:	2b00      	cmp	r3, #0
 811c97a:	d06d      	beq.n	811ca58 <tcp_slowtmr+0x2fc>
            if (pcb->state != SYN_SENT) {
 811c97c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811c97e:	7d1b      	ldrb	r3, [r3, #20]
 811c980:	2b02      	cmp	r3, #2
 811c982:	d03a      	beq.n	811c9fa <tcp_slowtmr+0x29e>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 811c984:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811c986:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 811c98a:	2b0c      	cmp	r3, #12
 811c98c:	bf28      	it	cs
 811c98e:	230c      	movcs	r3, #12
 811c990:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 811c992:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811c994:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 811c998:	10db      	asrs	r3, r3, #3
 811c99a:	b21b      	sxth	r3, r3
 811c99c:	461a      	mov	r2, r3
 811c99e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811c9a0:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 811c9a4:	4413      	add	r3, r2
 811c9a6:	7efa      	ldrb	r2, [r7, #27]
 811c9a8:	4910      	ldr	r1, [pc, #64]	@ (811c9ec <tcp_slowtmr+0x290>)
 811c9aa:	5c8a      	ldrb	r2, [r1, r2]
 811c9ac:	4093      	lsls	r3, r2
 811c9ae:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 811c9b0:	697b      	ldr	r3, [r7, #20]
 811c9b2:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 811c9b6:	4293      	cmp	r3, r2
 811c9b8:	dc1a      	bgt.n	811c9f0 <tcp_slowtmr+0x294>
 811c9ba:	697b      	ldr	r3, [r7, #20]
 811c9bc:	b21a      	sxth	r2, r3
 811c9be:	e019      	b.n	811c9f4 <tcp_slowtmr+0x298>
 811c9c0:	1000e498 	.word	0x1000e498
 811c9c4:	1000e4ae 	.word	0x1000e4ae
 811c9c8:	1000e4a4 	.word	0x1000e4a4
 811c9cc:	0812687c 	.word	0x0812687c
 811c9d0:	08126c00 	.word	0x08126c00
 811c9d4:	08126900 	.word	0x08126900
 811c9d8:	08126c2c 	.word	0x08126c2c
 811c9dc:	08126c58 	.word	0x08126c58
 811c9e0:	08126c88 	.word	0x08126c88
 811c9e4:	08126cbc 	.word	0x08126cbc
 811c9e8:	08128518 	.word	0x08128518
 811c9ec:	08128508 	.word	0x08128508
 811c9f0:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 811c9f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811c9f6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
            pcb->rtime = 0;
 811c9fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811c9fc:	2200      	movs	r2, #0
 811c9fe:	861a      	strh	r2, [r3, #48]	@ 0x30
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 811ca00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811ca02:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 811ca06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811ca08:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 811ca0c:	4293      	cmp	r3, r2
 811ca0e:	bf28      	it	cs
 811ca10:	4613      	movcs	r3, r2
 811ca12:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 811ca14:	8a7b      	ldrh	r3, [r7, #18]
 811ca16:	085b      	lsrs	r3, r3, #1
 811ca18:	b29a      	uxth	r2, r3
 811ca1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811ca1c:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 811ca20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811ca22:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 811ca26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811ca28:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 811ca2a:	005b      	lsls	r3, r3, #1
 811ca2c:	b29b      	uxth	r3, r3
 811ca2e:	429a      	cmp	r2, r3
 811ca30:	d206      	bcs.n	811ca40 <tcp_slowtmr+0x2e4>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 811ca32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811ca34:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 811ca36:	005b      	lsls	r3, r3, #1
 811ca38:	b29a      	uxth	r2, r3
 811ca3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811ca3c:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            pcb->cwnd = pcb->mss;
 811ca40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811ca42:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 811ca44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811ca46:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
            pcb->bytes_acked = 0;
 811ca4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811ca4c:	2200      	movs	r2, #0
 811ca4e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            tcp_rexmit_rto_commit(pcb);
 811ca52:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 811ca54:	f004 fce2 	bl	812141c <tcp_rexmit_rto_commit>
    if (pcb->state == FIN_WAIT_2) {
 811ca58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811ca5a:	7d1b      	ldrb	r3, [r3, #20]
 811ca5c:	2b06      	cmp	r3, #6
 811ca5e:	d112      	bne.n	811ca86 <tcp_slowtmr+0x32a>
      if (pcb->flags & TF_RXCLOSED) {
 811ca60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811ca62:	8b5b      	ldrh	r3, [r3, #26]
 811ca64:	f003 0310 	and.w	r3, r3, #16
 811ca68:	2b00      	cmp	r3, #0
 811ca6a:	d00c      	beq.n	811ca86 <tcp_slowtmr+0x32a>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 811ca6c:	4b96      	ldr	r3, [pc, #600]	@ (811ccc8 <tcp_slowtmr+0x56c>)
 811ca6e:	681a      	ldr	r2, [r3, #0]
 811ca70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811ca72:	6a1b      	ldr	r3, [r3, #32]
 811ca74:	1ad3      	subs	r3, r2, r3
 811ca76:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 811ca7a:	d904      	bls.n	811ca86 <tcp_slowtmr+0x32a>
          ++pcb_remove;
 811ca7c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 811ca80:	3301      	adds	r3, #1
 811ca82:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 811ca86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811ca88:	7a5b      	ldrb	r3, [r3, #9]
 811ca8a:	f003 0308 	and.w	r3, r3, #8
 811ca8e:	2b00      	cmp	r3, #0
 811ca90:	d053      	beq.n	811cb3a <tcp_slowtmr+0x3de>
        ((pcb->state == ESTABLISHED) ||
 811ca92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811ca94:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 811ca96:	2b04      	cmp	r3, #4
 811ca98:	d003      	beq.n	811caa2 <tcp_slowtmr+0x346>
         (pcb->state == CLOSE_WAIT))) {
 811ca9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811ca9c:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 811ca9e:	2b07      	cmp	r3, #7
 811caa0:	d14b      	bne.n	811cb3a <tcp_slowtmr+0x3de>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 811caa2:	4b89      	ldr	r3, [pc, #548]	@ (811ccc8 <tcp_slowtmr+0x56c>)
 811caa4:	681a      	ldr	r2, [r3, #0]
 811caa6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811caa8:	6a1b      	ldr	r3, [r3, #32]
 811caaa:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 811caac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811caae:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 811cab2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811cab4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 811cab8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 811caba:	f8d0 0098 	ldr.w	r0, [r0, #152]	@ 0x98
 811cabe:	fb00 f303 	mul.w	r3, r0, r3
 811cac2:	440b      	add	r3, r1
 811cac4:	4981      	ldr	r1, [pc, #516]	@ (811cccc <tcp_slowtmr+0x570>)
 811cac6:	fba1 1303 	umull	r1, r3, r1, r3
 811caca:	091b      	lsrs	r3, r3, #4
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 811cacc:	429a      	cmp	r2, r3
 811cace:	d90a      	bls.n	811cae6 <tcp_slowtmr+0x38a>
        ++pcb_remove;
 811cad0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 811cad4:	3301      	adds	r3, #1
 811cad6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        ++pcb_reset;
 811cada:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 811cade:	3301      	adds	r3, #1
 811cae0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 811cae4:	e029      	b.n	811cb3a <tcp_slowtmr+0x3de>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 811cae6:	4b78      	ldr	r3, [pc, #480]	@ (811ccc8 <tcp_slowtmr+0x56c>)
 811cae8:	681a      	ldr	r2, [r3, #0]
 811caea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811caec:	6a1b      	ldr	r3, [r3, #32]
 811caee:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 811caf0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811caf2:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 811caf6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811caf8:	f893 30a3 	ldrb.w	r3, [r3, #163]	@ 0xa3
 811cafc:	4618      	mov	r0, r3
 811cafe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811cb00:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 811cb04:	fb00 f303 	mul.w	r3, r0, r3
 811cb08:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 811cb0a:	4970      	ldr	r1, [pc, #448]	@ (811cccc <tcp_slowtmr+0x570>)
 811cb0c:	fba1 1303 	umull	r1, r3, r1, r3
 811cb10:	091b      	lsrs	r3, r3, #4
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 811cb12:	429a      	cmp	r2, r3
 811cb14:	d911      	bls.n	811cb3a <tcp_slowtmr+0x3de>
        err = tcp_keepalive(pcb);
 811cb16:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 811cb18:	f004 ff84 	bl	8121a24 <tcp_keepalive>
 811cb1c:	4603      	mov	r3, r0
 811cb1e:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (err == ERR_OK) {
 811cb22:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 811cb26:	2b00      	cmp	r3, #0
 811cb28:	d107      	bne.n	811cb3a <tcp_slowtmr+0x3de>
          pcb->keep_cnt_sent++;
 811cb2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811cb2c:	f893 30a3 	ldrb.w	r3, [r3, #163]	@ 0xa3
 811cb30:	3301      	adds	r3, #1
 811cb32:	b2da      	uxtb	r2, r3
 811cb34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811cb36:	f883 20a3 	strb.w	r2, [r3, #163]	@ 0xa3
    if (pcb->ooseq != NULL &&
 811cb3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811cb3c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 811cb3e:	2b00      	cmp	r3, #0
 811cb40:	d011      	beq.n	811cb66 <tcp_slowtmr+0x40a>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 811cb42:	4b61      	ldr	r3, [pc, #388]	@ (811ccc8 <tcp_slowtmr+0x56c>)
 811cb44:	681a      	ldr	r2, [r3, #0]
 811cb46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811cb48:	6a1b      	ldr	r3, [r3, #32]
 811cb4a:	1ad2      	subs	r2, r2, r3
 811cb4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811cb4e:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 811cb52:	4619      	mov	r1, r3
 811cb54:	460b      	mov	r3, r1
 811cb56:	005b      	lsls	r3, r3, #1
 811cb58:	440b      	add	r3, r1
 811cb5a:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 811cb5c:	429a      	cmp	r2, r3
 811cb5e:	d302      	bcc.n	811cb66 <tcp_slowtmr+0x40a>
      tcp_free_ooseq(pcb);
 811cb60:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 811cb62:	f000 fe45 	bl	811d7f0 <tcp_free_ooseq>
    if (pcb->state == SYN_RCVD) {
 811cb66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811cb68:	7d1b      	ldrb	r3, [r3, #20]
 811cb6a:	2b03      	cmp	r3, #3
 811cb6c:	d10c      	bne.n	811cb88 <tcp_slowtmr+0x42c>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 811cb6e:	4b56      	ldr	r3, [pc, #344]	@ (811ccc8 <tcp_slowtmr+0x56c>)
 811cb70:	681a      	ldr	r2, [r3, #0]
 811cb72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811cb74:	6a1b      	ldr	r3, [r3, #32]
 811cb76:	1ad3      	subs	r3, r2, r3
 811cb78:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 811cb7c:	d904      	bls.n	811cb88 <tcp_slowtmr+0x42c>
        ++pcb_remove;
 811cb7e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 811cb82:	3301      	adds	r3, #1
 811cb84:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb->state == LAST_ACK) {
 811cb88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811cb8a:	7d1b      	ldrb	r3, [r3, #20]
 811cb8c:	2b09      	cmp	r3, #9
 811cb8e:	d10d      	bne.n	811cbac <tcp_slowtmr+0x450>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 811cb90:	4b4d      	ldr	r3, [pc, #308]	@ (811ccc8 <tcp_slowtmr+0x56c>)
 811cb92:	681a      	ldr	r2, [r3, #0]
 811cb94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811cb96:	6a1b      	ldr	r3, [r3, #32]
 811cb98:	1ad3      	subs	r3, r2, r3
 811cb9a:	f241 7270 	movw	r2, #6000	@ 0x1770
 811cb9e:	4293      	cmp	r3, r2
 811cba0:	d904      	bls.n	811cbac <tcp_slowtmr+0x450>
        ++pcb_remove;
 811cba2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 811cba6:	3301      	adds	r3, #1
 811cba8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb_remove) {
 811cbac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 811cbb0:	2b00      	cmp	r3, #0
 811cbb2:	d060      	beq.n	811cc76 <tcp_slowtmr+0x51a>
      tcp_err_fn err_fn = pcb->errf;
 811cbb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811cbb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 811cbba:	60fb      	str	r3, [r7, #12]
      tcp_pcb_purge(pcb);
 811cbbc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 811cbbe:	f000 fc63 	bl	811d488 <tcp_pcb_purge>
      if (prev != NULL) {
 811cbc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 811cbc4:	2b00      	cmp	r3, #0
 811cbc6:	d010      	beq.n	811cbea <tcp_slowtmr+0x48e>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 811cbc8:	4b41      	ldr	r3, [pc, #260]	@ (811ccd0 <tcp_slowtmr+0x574>)
 811cbca:	681b      	ldr	r3, [r3, #0]
 811cbcc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 811cbce:	429a      	cmp	r2, r3
 811cbd0:	d106      	bne.n	811cbe0 <tcp_slowtmr+0x484>
 811cbd2:	4b40      	ldr	r3, [pc, #256]	@ (811ccd4 <tcp_slowtmr+0x578>)
 811cbd4:	f240 526d 	movw	r2, #1389	@ 0x56d
 811cbd8:	493f      	ldr	r1, [pc, #252]	@ (811ccd8 <tcp_slowtmr+0x57c>)
 811cbda:	4840      	ldr	r0, [pc, #256]	@ (811ccdc <tcp_slowtmr+0x580>)
 811cbdc:	f007 f81e 	bl	8123c1c <iprintf>
        prev->next = pcb->next;
 811cbe0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811cbe2:	68da      	ldr	r2, [r3, #12]
 811cbe4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 811cbe6:	60da      	str	r2, [r3, #12]
 811cbe8:	e00f      	b.n	811cc0a <tcp_slowtmr+0x4ae>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 811cbea:	4b39      	ldr	r3, [pc, #228]	@ (811ccd0 <tcp_slowtmr+0x574>)
 811cbec:	681b      	ldr	r3, [r3, #0]
 811cbee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 811cbf0:	429a      	cmp	r2, r3
 811cbf2:	d006      	beq.n	811cc02 <tcp_slowtmr+0x4a6>
 811cbf4:	4b37      	ldr	r3, [pc, #220]	@ (811ccd4 <tcp_slowtmr+0x578>)
 811cbf6:	f240 5271 	movw	r2, #1393	@ 0x571
 811cbfa:	4939      	ldr	r1, [pc, #228]	@ (811cce0 <tcp_slowtmr+0x584>)
 811cbfc:	4837      	ldr	r0, [pc, #220]	@ (811ccdc <tcp_slowtmr+0x580>)
 811cbfe:	f007 f80d 	bl	8123c1c <iprintf>
        tcp_active_pcbs = pcb->next;
 811cc02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811cc04:	68db      	ldr	r3, [r3, #12]
 811cc06:	4a32      	ldr	r2, [pc, #200]	@ (811ccd0 <tcp_slowtmr+0x574>)
 811cc08:	6013      	str	r3, [r2, #0]
      if (pcb_reset) {
 811cc0a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 811cc0e:	2b00      	cmp	r3, #0
 811cc10:	d013      	beq.n	811cc3a <tcp_slowtmr+0x4de>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 811cc12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811cc14:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 811cc16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811cc18:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 811cc1a:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 811cc1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811cc1e:	3304      	adds	r3, #4
 811cc20:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 811cc22:	8ad2      	ldrh	r2, [r2, #22]
 811cc24:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 811cc26:	8b09      	ldrh	r1, [r1, #24]
 811cc28:	9102      	str	r1, [sp, #8]
 811cc2a:	9201      	str	r2, [sp, #4]
 811cc2c:	9300      	str	r3, [sp, #0]
 811cc2e:	462b      	mov	r3, r5
 811cc30:	4622      	mov	r2, r4
 811cc32:	4601      	mov	r1, r0
 811cc34:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 811cc36:	f004 fe41 	bl	81218bc <tcp_rst>
      err_arg = pcb->callback_arg;
 811cc3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811cc3c:	691b      	ldr	r3, [r3, #16]
 811cc3e:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 811cc40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811cc42:	7d1b      	ldrb	r3, [r3, #20]
 811cc44:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 811cc46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811cc48:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 811cc4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811cc4c:	68db      	ldr	r3, [r3, #12]
 811cc4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 811cc50:	6838      	ldr	r0, [r7, #0]
 811cc52:	f7fe fff1 	bl	811bc38 <tcp_free>
      tcp_active_pcbs_changed = 0;
 811cc56:	4b23      	ldr	r3, [pc, #140]	@ (811cce4 <tcp_slowtmr+0x588>)
 811cc58:	2200      	movs	r2, #0
 811cc5a:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 811cc5c:	68fb      	ldr	r3, [r7, #12]
 811cc5e:	2b00      	cmp	r3, #0
 811cc60:	d004      	beq.n	811cc6c <tcp_slowtmr+0x510>
 811cc62:	68fb      	ldr	r3, [r7, #12]
 811cc64:	f06f 010c 	mvn.w	r1, #12
 811cc68:	68b8      	ldr	r0, [r7, #8]
 811cc6a:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 811cc6c:	4b1d      	ldr	r3, [pc, #116]	@ (811cce4 <tcp_slowtmr+0x588>)
 811cc6e:	781b      	ldrb	r3, [r3, #0]
 811cc70:	2b00      	cmp	r3, #0
 811cc72:	d048      	beq.n	811cd06 <tcp_slowtmr+0x5aa>
        goto tcp_slowtmr_start;
 811cc74:	e585      	b.n	811c782 <tcp_slowtmr+0x26>
      prev = pcb;
 811cc76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811cc78:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 811cc7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811cc7c:	68db      	ldr	r3, [r3, #12]
 811cc7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      ++prev->polltmr;
 811cc80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 811cc82:	7f1b      	ldrb	r3, [r3, #28]
 811cc84:	3301      	adds	r3, #1
 811cc86:	b2da      	uxtb	r2, r3
 811cc88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 811cc8a:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 811cc8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 811cc8e:	7f1a      	ldrb	r2, [r3, #28]
 811cc90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 811cc92:	7f5b      	ldrb	r3, [r3, #29]
 811cc94:	429a      	cmp	r2, r3
 811cc96:	d336      	bcc.n	811cd06 <tcp_slowtmr+0x5aa>
        prev->polltmr = 0;
 811cc98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 811cc9a:	2200      	movs	r2, #0
 811cc9c:	771a      	strb	r2, [r3, #28]
        tcp_active_pcbs_changed = 0;
 811cc9e:	4b11      	ldr	r3, [pc, #68]	@ (811cce4 <tcp_slowtmr+0x588>)
 811cca0:	2200      	movs	r2, #0
 811cca2:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 811cca4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 811cca6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 811ccaa:	2b00      	cmp	r3, #0
 811ccac:	d01c      	beq.n	811cce8 <tcp_slowtmr+0x58c>
 811ccae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 811ccb0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 811ccb4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 811ccb6:	6912      	ldr	r2, [r2, #16]
 811ccb8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 811ccba:	4610      	mov	r0, r2
 811ccbc:	4798      	blx	r3
 811ccbe:	4603      	mov	r3, r0
 811ccc0:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 811ccc4:	e013      	b.n	811ccee <tcp_slowtmr+0x592>
 811ccc6:	bf00      	nop
 811ccc8:	1000e498 	.word	0x1000e498
 811cccc:	cccccccd 	.word	0xcccccccd
 811ccd0:	1000e4a4 	.word	0x1000e4a4
 811ccd4:	0812687c 	.word	0x0812687c
 811ccd8:	08126cf4 	.word	0x08126cf4
 811ccdc:	08126900 	.word	0x08126900
 811cce0:	08126d20 	.word	0x08126d20
 811cce4:	1000e4ac 	.word	0x1000e4ac
 811cce8:	2300      	movs	r3, #0
 811ccea:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (tcp_active_pcbs_changed) {
 811ccee:	4b39      	ldr	r3, [pc, #228]	@ (811cdd4 <tcp_slowtmr+0x678>)
 811ccf0:	781b      	ldrb	r3, [r3, #0]
 811ccf2:	2b00      	cmp	r3, #0
 811ccf4:	f47f ad44 	bne.w	811c780 <tcp_slowtmr+0x24>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 811ccf8:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 811ccfc:	2b00      	cmp	r3, #0
 811ccfe:	d102      	bne.n	811cd06 <tcp_slowtmr+0x5aa>
          tcp_output(prev);
 811cd00:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 811cd02:	f004 f827 	bl	8120d54 <tcp_output>
  while (pcb != NULL) {
 811cd06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811cd08:	2b00      	cmp	r3, #0
 811cd0a:	f47f ad40 	bne.w	811c78e <tcp_slowtmr+0x32>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 811cd0e:	2300      	movs	r3, #0
 811cd10:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_tw_pcbs;
 811cd12:	4b31      	ldr	r3, [pc, #196]	@ (811cdd8 <tcp_slowtmr+0x67c>)
 811cd14:	681b      	ldr	r3, [r3, #0]
 811cd16:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 811cd18:	e054      	b.n	811cdc4 <tcp_slowtmr+0x668>
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 811cd1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811cd1c:	7d1b      	ldrb	r3, [r3, #20]
 811cd1e:	2b0a      	cmp	r3, #10
 811cd20:	d006      	beq.n	811cd30 <tcp_slowtmr+0x5d4>
 811cd22:	4b2e      	ldr	r3, [pc, #184]	@ (811cddc <tcp_slowtmr+0x680>)
 811cd24:	f240 52a1 	movw	r2, #1441	@ 0x5a1
 811cd28:	492d      	ldr	r1, [pc, #180]	@ (811cde0 <tcp_slowtmr+0x684>)
 811cd2a:	482e      	ldr	r0, [pc, #184]	@ (811cde4 <tcp_slowtmr+0x688>)
 811cd2c:	f006 ff76 	bl	8123c1c <iprintf>
    pcb_remove = 0;
 811cd30:	2300      	movs	r3, #0
 811cd32:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 811cd36:	4b2c      	ldr	r3, [pc, #176]	@ (811cde8 <tcp_slowtmr+0x68c>)
 811cd38:	681a      	ldr	r2, [r3, #0]
 811cd3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811cd3c:	6a1b      	ldr	r3, [r3, #32]
 811cd3e:	1ad3      	subs	r3, r2, r3
 811cd40:	f241 7270 	movw	r2, #6000	@ 0x1770
 811cd44:	4293      	cmp	r3, r2
 811cd46:	d904      	bls.n	811cd52 <tcp_slowtmr+0x5f6>
      ++pcb_remove;
 811cd48:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 811cd4c:	3301      	adds	r3, #1
 811cd4e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 811cd52:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 811cd56:	2b00      	cmp	r3, #0
 811cd58:	d02f      	beq.n	811cdba <tcp_slowtmr+0x65e>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 811cd5a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 811cd5c:	f000 fb94 	bl	811d488 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 811cd60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 811cd62:	2b00      	cmp	r3, #0
 811cd64:	d010      	beq.n	811cd88 <tcp_slowtmr+0x62c>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 811cd66:	4b1c      	ldr	r3, [pc, #112]	@ (811cdd8 <tcp_slowtmr+0x67c>)
 811cd68:	681b      	ldr	r3, [r3, #0]
 811cd6a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 811cd6c:	429a      	cmp	r2, r3
 811cd6e:	d106      	bne.n	811cd7e <tcp_slowtmr+0x622>
 811cd70:	4b1a      	ldr	r3, [pc, #104]	@ (811cddc <tcp_slowtmr+0x680>)
 811cd72:	f240 52af 	movw	r2, #1455	@ 0x5af
 811cd76:	491d      	ldr	r1, [pc, #116]	@ (811cdec <tcp_slowtmr+0x690>)
 811cd78:	481a      	ldr	r0, [pc, #104]	@ (811cde4 <tcp_slowtmr+0x688>)
 811cd7a:	f006 ff4f 	bl	8123c1c <iprintf>
        prev->next = pcb->next;
 811cd7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811cd80:	68da      	ldr	r2, [r3, #12]
 811cd82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 811cd84:	60da      	str	r2, [r3, #12]
 811cd86:	e00f      	b.n	811cda8 <tcp_slowtmr+0x64c>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 811cd88:	4b13      	ldr	r3, [pc, #76]	@ (811cdd8 <tcp_slowtmr+0x67c>)
 811cd8a:	681b      	ldr	r3, [r3, #0]
 811cd8c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 811cd8e:	429a      	cmp	r2, r3
 811cd90:	d006      	beq.n	811cda0 <tcp_slowtmr+0x644>
 811cd92:	4b12      	ldr	r3, [pc, #72]	@ (811cddc <tcp_slowtmr+0x680>)
 811cd94:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 811cd98:	4915      	ldr	r1, [pc, #84]	@ (811cdf0 <tcp_slowtmr+0x694>)
 811cd9a:	4812      	ldr	r0, [pc, #72]	@ (811cde4 <tcp_slowtmr+0x688>)
 811cd9c:	f006 ff3e 	bl	8123c1c <iprintf>
        tcp_tw_pcbs = pcb->next;
 811cda0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811cda2:	68db      	ldr	r3, [r3, #12]
 811cda4:	4a0c      	ldr	r2, [pc, #48]	@ (811cdd8 <tcp_slowtmr+0x67c>)
 811cda6:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 811cda8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811cdaa:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 811cdac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811cdae:	68db      	ldr	r3, [r3, #12]
 811cdb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 811cdb2:	69f8      	ldr	r0, [r7, #28]
 811cdb4:	f7fe ff40 	bl	811bc38 <tcp_free>
 811cdb8:	e004      	b.n	811cdc4 <tcp_slowtmr+0x668>
    } else {
      prev = pcb;
 811cdba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811cdbc:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 811cdbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811cdc0:	68db      	ldr	r3, [r3, #12]
 811cdc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 811cdc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811cdc6:	2b00      	cmp	r3, #0
 811cdc8:	d1a7      	bne.n	811cd1a <tcp_slowtmr+0x5be>
    }
  }
}
 811cdca:	bf00      	nop
 811cdcc:	bf00      	nop
 811cdce:	3730      	adds	r7, #48	@ 0x30
 811cdd0:	46bd      	mov	sp, r7
 811cdd2:	bdb0      	pop	{r4, r5, r7, pc}
 811cdd4:	1000e4ac 	.word	0x1000e4ac
 811cdd8:	1000e4a8 	.word	0x1000e4a8
 811cddc:	0812687c 	.word	0x0812687c
 811cde0:	08126d4c 	.word	0x08126d4c
 811cde4:	08126900 	.word	0x08126900
 811cde8:	1000e498 	.word	0x1000e498
 811cdec:	08126d7c 	.word	0x08126d7c
 811cdf0:	08126da4 	.word	0x08126da4

0811cdf4 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 811cdf4:	b580      	push	{r7, lr}
 811cdf6:	b082      	sub	sp, #8
 811cdf8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 811cdfa:	4b2d      	ldr	r3, [pc, #180]	@ (811ceb0 <tcp_fasttmr+0xbc>)
 811cdfc:	781b      	ldrb	r3, [r3, #0]
 811cdfe:	3301      	adds	r3, #1
 811ce00:	b2da      	uxtb	r2, r3
 811ce02:	4b2b      	ldr	r3, [pc, #172]	@ (811ceb0 <tcp_fasttmr+0xbc>)
 811ce04:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 811ce06:	4b2b      	ldr	r3, [pc, #172]	@ (811ceb4 <tcp_fasttmr+0xc0>)
 811ce08:	681b      	ldr	r3, [r3, #0]
 811ce0a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 811ce0c:	e048      	b.n	811cea0 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 811ce0e:	687b      	ldr	r3, [r7, #4]
 811ce10:	7f9a      	ldrb	r2, [r3, #30]
 811ce12:	4b27      	ldr	r3, [pc, #156]	@ (811ceb0 <tcp_fasttmr+0xbc>)
 811ce14:	781b      	ldrb	r3, [r3, #0]
 811ce16:	429a      	cmp	r2, r3
 811ce18:	d03f      	beq.n	811ce9a <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 811ce1a:	4b25      	ldr	r3, [pc, #148]	@ (811ceb0 <tcp_fasttmr+0xbc>)
 811ce1c:	781a      	ldrb	r2, [r3, #0]
 811ce1e:	687b      	ldr	r3, [r7, #4]
 811ce20:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 811ce22:	687b      	ldr	r3, [r7, #4]
 811ce24:	8b5b      	ldrh	r3, [r3, #26]
 811ce26:	f003 0301 	and.w	r3, r3, #1
 811ce2a:	2b00      	cmp	r3, #0
 811ce2c:	d010      	beq.n	811ce50 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 811ce2e:	687b      	ldr	r3, [r7, #4]
 811ce30:	8b5b      	ldrh	r3, [r3, #26]
 811ce32:	f043 0302 	orr.w	r3, r3, #2
 811ce36:	b29a      	uxth	r2, r3
 811ce38:	687b      	ldr	r3, [r7, #4]
 811ce3a:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 811ce3c:	6878      	ldr	r0, [r7, #4]
 811ce3e:	f003 ff89 	bl	8120d54 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 811ce42:	687b      	ldr	r3, [r7, #4]
 811ce44:	8b5b      	ldrh	r3, [r3, #26]
 811ce46:	f023 0303 	bic.w	r3, r3, #3
 811ce4a:	b29a      	uxth	r2, r3
 811ce4c:	687b      	ldr	r3, [r7, #4]
 811ce4e:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 811ce50:	687b      	ldr	r3, [r7, #4]
 811ce52:	8b5b      	ldrh	r3, [r3, #26]
 811ce54:	f003 0308 	and.w	r3, r3, #8
 811ce58:	2b00      	cmp	r3, #0
 811ce5a:	d009      	beq.n	811ce70 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 811ce5c:	687b      	ldr	r3, [r7, #4]
 811ce5e:	8b5b      	ldrh	r3, [r3, #26]
 811ce60:	f023 0308 	bic.w	r3, r3, #8
 811ce64:	b29a      	uxth	r2, r3
 811ce66:	687b      	ldr	r3, [r7, #4]
 811ce68:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 811ce6a:	6878      	ldr	r0, [r7, #4]
 811ce6c:	f7ff f878 	bl	811bf60 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 811ce70:	687b      	ldr	r3, [r7, #4]
 811ce72:	68db      	ldr	r3, [r3, #12]
 811ce74:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 811ce76:	687b      	ldr	r3, [r7, #4]
 811ce78:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 811ce7a:	2b00      	cmp	r3, #0
 811ce7c:	d00a      	beq.n	811ce94 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 811ce7e:	4b0e      	ldr	r3, [pc, #56]	@ (811ceb8 <tcp_fasttmr+0xc4>)
 811ce80:	2200      	movs	r2, #0
 811ce82:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 811ce84:	6878      	ldr	r0, [r7, #4]
 811ce86:	f000 f819 	bl	811cebc <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 811ce8a:	4b0b      	ldr	r3, [pc, #44]	@ (811ceb8 <tcp_fasttmr+0xc4>)
 811ce8c:	781b      	ldrb	r3, [r3, #0]
 811ce8e:	2b00      	cmp	r3, #0
 811ce90:	d000      	beq.n	811ce94 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 811ce92:	e7b8      	b.n	811ce06 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 811ce94:	683b      	ldr	r3, [r7, #0]
 811ce96:	607b      	str	r3, [r7, #4]
 811ce98:	e002      	b.n	811cea0 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 811ce9a:	687b      	ldr	r3, [r7, #4]
 811ce9c:	68db      	ldr	r3, [r3, #12]
 811ce9e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 811cea0:	687b      	ldr	r3, [r7, #4]
 811cea2:	2b00      	cmp	r3, #0
 811cea4:	d1b3      	bne.n	811ce0e <tcp_fasttmr+0x1a>
    }
  }
}
 811cea6:	bf00      	nop
 811cea8:	bf00      	nop
 811ceaa:	3708      	adds	r7, #8
 811ceac:	46bd      	mov	sp, r7
 811ceae:	bd80      	pop	{r7, pc}
 811ceb0:	1000e4ae 	.word	0x1000e4ae
 811ceb4:	1000e4a4 	.word	0x1000e4a4
 811ceb8:	1000e4ac 	.word	0x1000e4ac

0811cebc <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 811cebc:	b590      	push	{r4, r7, lr}
 811cebe:	b085      	sub	sp, #20
 811cec0:	af00      	add	r7, sp, #0
 811cec2:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 811cec4:	687b      	ldr	r3, [r7, #4]
 811cec6:	2b00      	cmp	r3, #0
 811cec8:	d109      	bne.n	811cede <tcp_process_refused_data+0x22>
 811ceca:	4b37      	ldr	r3, [pc, #220]	@ (811cfa8 <tcp_process_refused_data+0xec>)
 811cecc:	f240 6209 	movw	r2, #1545	@ 0x609
 811ced0:	4936      	ldr	r1, [pc, #216]	@ (811cfac <tcp_process_refused_data+0xf0>)
 811ced2:	4837      	ldr	r0, [pc, #220]	@ (811cfb0 <tcp_process_refused_data+0xf4>)
 811ced4:	f006 fea2 	bl	8123c1c <iprintf>
 811ced8:	f06f 030f 	mvn.w	r3, #15
 811cedc:	e060      	b.n	811cfa0 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 811cede:	687b      	ldr	r3, [r7, #4]
 811cee0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 811cee2:	7b5b      	ldrb	r3, [r3, #13]
 811cee4:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 811cee6:	687b      	ldr	r3, [r7, #4]
 811cee8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 811ceea:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 811ceec:	687b      	ldr	r3, [r7, #4]
 811ceee:	2200      	movs	r2, #0
 811cef0:	679a      	str	r2, [r3, #120]	@ 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 811cef2:	687b      	ldr	r3, [r7, #4]
 811cef4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 811cef8:	2b00      	cmp	r3, #0
 811cefa:	d00b      	beq.n	811cf14 <tcp_process_refused_data+0x58>
 811cefc:	687b      	ldr	r3, [r7, #4]
 811cefe:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 811cf02:	687b      	ldr	r3, [r7, #4]
 811cf04:	6918      	ldr	r0, [r3, #16]
 811cf06:	2300      	movs	r3, #0
 811cf08:	68ba      	ldr	r2, [r7, #8]
 811cf0a:	6879      	ldr	r1, [r7, #4]
 811cf0c:	47a0      	blx	r4
 811cf0e:	4603      	mov	r3, r0
 811cf10:	73fb      	strb	r3, [r7, #15]
 811cf12:	e007      	b.n	811cf24 <tcp_process_refused_data+0x68>
 811cf14:	2300      	movs	r3, #0
 811cf16:	68ba      	ldr	r2, [r7, #8]
 811cf18:	6879      	ldr	r1, [r7, #4]
 811cf1a:	2000      	movs	r0, #0
 811cf1c:	f000 f8a4 	bl	811d068 <tcp_recv_null>
 811cf20:	4603      	mov	r3, r0
 811cf22:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 811cf24:	f997 300f 	ldrsb.w	r3, [r7, #15]
 811cf28:	2b00      	cmp	r3, #0
 811cf2a:	d12a      	bne.n	811cf82 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 811cf2c:	7bbb      	ldrb	r3, [r7, #14]
 811cf2e:	f003 0320 	and.w	r3, r3, #32
 811cf32:	2b00      	cmp	r3, #0
 811cf34:	d033      	beq.n	811cf9e <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 811cf36:	687b      	ldr	r3, [r7, #4]
 811cf38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 811cf3a:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 811cf3e:	d005      	beq.n	811cf4c <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 811cf40:	687b      	ldr	r3, [r7, #4]
 811cf42:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 811cf44:	3301      	adds	r3, #1
 811cf46:	b29a      	uxth	r2, r3
 811cf48:	687b      	ldr	r3, [r7, #4]
 811cf4a:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 811cf4c:	687b      	ldr	r3, [r7, #4]
 811cf4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 811cf52:	2b00      	cmp	r3, #0
 811cf54:	d00b      	beq.n	811cf6e <tcp_process_refused_data+0xb2>
 811cf56:	687b      	ldr	r3, [r7, #4]
 811cf58:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 811cf5c:	687b      	ldr	r3, [r7, #4]
 811cf5e:	6918      	ldr	r0, [r3, #16]
 811cf60:	2300      	movs	r3, #0
 811cf62:	2200      	movs	r2, #0
 811cf64:	6879      	ldr	r1, [r7, #4]
 811cf66:	47a0      	blx	r4
 811cf68:	4603      	mov	r3, r0
 811cf6a:	73fb      	strb	r3, [r7, #15]
 811cf6c:	e001      	b.n	811cf72 <tcp_process_refused_data+0xb6>
 811cf6e:	2300      	movs	r3, #0
 811cf70:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 811cf72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 811cf76:	f113 0f0d 	cmn.w	r3, #13
 811cf7a:	d110      	bne.n	811cf9e <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 811cf7c:	f06f 030c 	mvn.w	r3, #12
 811cf80:	e00e      	b.n	811cfa0 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 811cf82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 811cf86:	f113 0f0d 	cmn.w	r3, #13
 811cf8a:	d102      	bne.n	811cf92 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 811cf8c:	f06f 030c 	mvn.w	r3, #12
 811cf90:	e006      	b.n	811cfa0 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 811cf92:	687b      	ldr	r3, [r7, #4]
 811cf94:	68ba      	ldr	r2, [r7, #8]
 811cf96:	679a      	str	r2, [r3, #120]	@ 0x78
      return ERR_INPROGRESS;
 811cf98:	f06f 0304 	mvn.w	r3, #4
 811cf9c:	e000      	b.n	811cfa0 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 811cf9e:	2300      	movs	r3, #0
}
 811cfa0:	4618      	mov	r0, r3
 811cfa2:	3714      	adds	r7, #20
 811cfa4:	46bd      	mov	sp, r7
 811cfa6:	bd90      	pop	{r4, r7, pc}
 811cfa8:	0812687c 	.word	0x0812687c
 811cfac:	08126dcc 	.word	0x08126dcc
 811cfb0:	08126900 	.word	0x08126900

0811cfb4 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 811cfb4:	b580      	push	{r7, lr}
 811cfb6:	b084      	sub	sp, #16
 811cfb8:	af00      	add	r7, sp, #0
 811cfba:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 811cfbc:	e007      	b.n	811cfce <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 811cfbe:	687b      	ldr	r3, [r7, #4]
 811cfc0:	681b      	ldr	r3, [r3, #0]
 811cfc2:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 811cfc4:	6878      	ldr	r0, [r7, #4]
 811cfc6:	f000 f80a 	bl	811cfde <tcp_seg_free>
    seg = next;
 811cfca:	68fb      	ldr	r3, [r7, #12]
 811cfcc:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 811cfce:	687b      	ldr	r3, [r7, #4]
 811cfd0:	2b00      	cmp	r3, #0
 811cfd2:	d1f4      	bne.n	811cfbe <tcp_segs_free+0xa>
  }
}
 811cfd4:	bf00      	nop
 811cfd6:	bf00      	nop
 811cfd8:	3710      	adds	r7, #16
 811cfda:	46bd      	mov	sp, r7
 811cfdc:	bd80      	pop	{r7, pc}

0811cfde <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 811cfde:	b580      	push	{r7, lr}
 811cfe0:	b082      	sub	sp, #8
 811cfe2:	af00      	add	r7, sp, #0
 811cfe4:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 811cfe6:	687b      	ldr	r3, [r7, #4]
 811cfe8:	2b00      	cmp	r3, #0
 811cfea:	d00c      	beq.n	811d006 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 811cfec:	687b      	ldr	r3, [r7, #4]
 811cfee:	685b      	ldr	r3, [r3, #4]
 811cff0:	2b00      	cmp	r3, #0
 811cff2:	d004      	beq.n	811cffe <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 811cff4:	687b      	ldr	r3, [r7, #4]
 811cff6:	685b      	ldr	r3, [r3, #4]
 811cff8:	4618      	mov	r0, r3
 811cffa:	f7fe fa6f 	bl	811b4dc <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 811cffe:	6879      	ldr	r1, [r7, #4]
 811d000:	2003      	movs	r0, #3
 811d002:	f7fd fbc9 	bl	811a798 <memp_free>
  }
}
 811d006:	bf00      	nop
 811d008:	3708      	adds	r7, #8
 811d00a:	46bd      	mov	sp, r7
 811d00c:	bd80      	pop	{r7, pc}
	...

0811d010 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 811d010:	b580      	push	{r7, lr}
 811d012:	b084      	sub	sp, #16
 811d014:	af00      	add	r7, sp, #0
 811d016:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 811d018:	687b      	ldr	r3, [r7, #4]
 811d01a:	2b00      	cmp	r3, #0
 811d01c:	d106      	bne.n	811d02c <tcp_seg_copy+0x1c>
 811d01e:	4b0f      	ldr	r3, [pc, #60]	@ (811d05c <tcp_seg_copy+0x4c>)
 811d020:	f240 6282 	movw	r2, #1666	@ 0x682
 811d024:	490e      	ldr	r1, [pc, #56]	@ (811d060 <tcp_seg_copy+0x50>)
 811d026:	480f      	ldr	r0, [pc, #60]	@ (811d064 <tcp_seg_copy+0x54>)
 811d028:	f006 fdf8 	bl	8123c1c <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 811d02c:	2003      	movs	r0, #3
 811d02e:	f7fd fb3d 	bl	811a6ac <memp_malloc>
 811d032:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 811d034:	68fb      	ldr	r3, [r7, #12]
 811d036:	2b00      	cmp	r3, #0
 811d038:	d101      	bne.n	811d03e <tcp_seg_copy+0x2e>
    return NULL;
 811d03a:	2300      	movs	r3, #0
 811d03c:	e00a      	b.n	811d054 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 811d03e:	2210      	movs	r2, #16
 811d040:	6879      	ldr	r1, [r7, #4]
 811d042:	68f8      	ldr	r0, [r7, #12]
 811d044:	f007 f879 	bl	812413a <memcpy>
  pbuf_ref(cseg->p);
 811d048:	68fb      	ldr	r3, [r7, #12]
 811d04a:	685b      	ldr	r3, [r3, #4]
 811d04c:	4618      	mov	r0, r3
 811d04e:	f7fe faeb 	bl	811b628 <pbuf_ref>
  return cseg;
 811d052:	68fb      	ldr	r3, [r7, #12]
}
 811d054:	4618      	mov	r0, r3
 811d056:	3710      	adds	r7, #16
 811d058:	46bd      	mov	sp, r7
 811d05a:	bd80      	pop	{r7, pc}
 811d05c:	0812687c 	.word	0x0812687c
 811d060:	08126e10 	.word	0x08126e10
 811d064:	08126900 	.word	0x08126900

0811d068 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 811d068:	b580      	push	{r7, lr}
 811d06a:	b084      	sub	sp, #16
 811d06c:	af00      	add	r7, sp, #0
 811d06e:	60f8      	str	r0, [r7, #12]
 811d070:	60b9      	str	r1, [r7, #8]
 811d072:	607a      	str	r2, [r7, #4]
 811d074:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 811d076:	68bb      	ldr	r3, [r7, #8]
 811d078:	2b00      	cmp	r3, #0
 811d07a:	d109      	bne.n	811d090 <tcp_recv_null+0x28>
 811d07c:	4b12      	ldr	r3, [pc, #72]	@ (811d0c8 <tcp_recv_null+0x60>)
 811d07e:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 811d082:	4912      	ldr	r1, [pc, #72]	@ (811d0cc <tcp_recv_null+0x64>)
 811d084:	4812      	ldr	r0, [pc, #72]	@ (811d0d0 <tcp_recv_null+0x68>)
 811d086:	f006 fdc9 	bl	8123c1c <iprintf>
 811d08a:	f06f 030f 	mvn.w	r3, #15
 811d08e:	e016      	b.n	811d0be <tcp_recv_null+0x56>

  if (p != NULL) {
 811d090:	687b      	ldr	r3, [r7, #4]
 811d092:	2b00      	cmp	r3, #0
 811d094:	d009      	beq.n	811d0aa <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 811d096:	687b      	ldr	r3, [r7, #4]
 811d098:	891b      	ldrh	r3, [r3, #8]
 811d09a:	4619      	mov	r1, r3
 811d09c:	68b8      	ldr	r0, [r7, #8]
 811d09e:	f7ff f9b1 	bl	811c404 <tcp_recved>
    pbuf_free(p);
 811d0a2:	6878      	ldr	r0, [r7, #4]
 811d0a4:	f7fe fa1a 	bl	811b4dc <pbuf_free>
 811d0a8:	e008      	b.n	811d0bc <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 811d0aa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 811d0ae:	2b00      	cmp	r3, #0
 811d0b0:	d104      	bne.n	811d0bc <tcp_recv_null+0x54>
    return tcp_close(pcb);
 811d0b2:	68b8      	ldr	r0, [r7, #8]
 811d0b4:	f7fe ffbe 	bl	811c034 <tcp_close>
 811d0b8:	4603      	mov	r3, r0
 811d0ba:	e000      	b.n	811d0be <tcp_recv_null+0x56>
  }
  return ERR_OK;
 811d0bc:	2300      	movs	r3, #0
}
 811d0be:	4618      	mov	r0, r3
 811d0c0:	3710      	adds	r7, #16
 811d0c2:	46bd      	mov	sp, r7
 811d0c4:	bd80      	pop	{r7, pc}
 811d0c6:	bf00      	nop
 811d0c8:	0812687c 	.word	0x0812687c
 811d0cc:	08126e2c 	.word	0x08126e2c
 811d0d0:	08126900 	.word	0x08126900

0811d0d4 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 811d0d4:	b580      	push	{r7, lr}
 811d0d6:	b086      	sub	sp, #24
 811d0d8:	af00      	add	r7, sp, #0
 811d0da:	4603      	mov	r3, r0
 811d0dc:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 811d0de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 811d0e2:	2b00      	cmp	r3, #0
 811d0e4:	db01      	blt.n	811d0ea <tcp_kill_prio+0x16>
 811d0e6:	79fb      	ldrb	r3, [r7, #7]
 811d0e8:	e000      	b.n	811d0ec <tcp_kill_prio+0x18>
 811d0ea:	237f      	movs	r3, #127	@ 0x7f
 811d0ec:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 811d0ee:	7afb      	ldrb	r3, [r7, #11]
 811d0f0:	2b00      	cmp	r3, #0
 811d0f2:	d034      	beq.n	811d15e <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 811d0f4:	7afb      	ldrb	r3, [r7, #11]
 811d0f6:	3b01      	subs	r3, #1
 811d0f8:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 811d0fa:	2300      	movs	r3, #0
 811d0fc:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 811d0fe:	2300      	movs	r3, #0
 811d100:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 811d102:	4b19      	ldr	r3, [pc, #100]	@ (811d168 <tcp_kill_prio+0x94>)
 811d104:	681b      	ldr	r3, [r3, #0]
 811d106:	617b      	str	r3, [r7, #20]
 811d108:	e01f      	b.n	811d14a <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 811d10a:	697b      	ldr	r3, [r7, #20]
 811d10c:	7d5b      	ldrb	r3, [r3, #21]
 811d10e:	7afa      	ldrb	r2, [r7, #11]
 811d110:	429a      	cmp	r2, r3
 811d112:	d80c      	bhi.n	811d12e <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 811d114:	697b      	ldr	r3, [r7, #20]
 811d116:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 811d118:	7afa      	ldrb	r2, [r7, #11]
 811d11a:	429a      	cmp	r2, r3
 811d11c:	d112      	bne.n	811d144 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 811d11e:	4b13      	ldr	r3, [pc, #76]	@ (811d16c <tcp_kill_prio+0x98>)
 811d120:	681a      	ldr	r2, [r3, #0]
 811d122:	697b      	ldr	r3, [r7, #20]
 811d124:	6a1b      	ldr	r3, [r3, #32]
 811d126:	1ad3      	subs	r3, r2, r3
 811d128:	68fa      	ldr	r2, [r7, #12]
 811d12a:	429a      	cmp	r2, r3
 811d12c:	d80a      	bhi.n	811d144 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 811d12e:	4b0f      	ldr	r3, [pc, #60]	@ (811d16c <tcp_kill_prio+0x98>)
 811d130:	681a      	ldr	r2, [r3, #0]
 811d132:	697b      	ldr	r3, [r7, #20]
 811d134:	6a1b      	ldr	r3, [r3, #32]
 811d136:	1ad3      	subs	r3, r2, r3
 811d138:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 811d13a:	697b      	ldr	r3, [r7, #20]
 811d13c:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 811d13e:	697b      	ldr	r3, [r7, #20]
 811d140:	7d5b      	ldrb	r3, [r3, #21]
 811d142:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 811d144:	697b      	ldr	r3, [r7, #20]
 811d146:	68db      	ldr	r3, [r3, #12]
 811d148:	617b      	str	r3, [r7, #20]
 811d14a:	697b      	ldr	r3, [r7, #20]
 811d14c:	2b00      	cmp	r3, #0
 811d14e:	d1dc      	bne.n	811d10a <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 811d150:	693b      	ldr	r3, [r7, #16]
 811d152:	2b00      	cmp	r3, #0
 811d154:	d004      	beq.n	811d160 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 811d156:	6938      	ldr	r0, [r7, #16]
 811d158:	f7ff f856 	bl	811c208 <tcp_abort>
 811d15c:	e000      	b.n	811d160 <tcp_kill_prio+0x8c>
    return;
 811d15e:	bf00      	nop
  }
}
 811d160:	3718      	adds	r7, #24
 811d162:	46bd      	mov	sp, r7
 811d164:	bd80      	pop	{r7, pc}
 811d166:	bf00      	nop
 811d168:	1000e4a4 	.word	0x1000e4a4
 811d16c:	1000e498 	.word	0x1000e498

0811d170 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 811d170:	b580      	push	{r7, lr}
 811d172:	b086      	sub	sp, #24
 811d174:	af00      	add	r7, sp, #0
 811d176:	4603      	mov	r3, r0
 811d178:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 811d17a:	79fb      	ldrb	r3, [r7, #7]
 811d17c:	2b08      	cmp	r3, #8
 811d17e:	d009      	beq.n	811d194 <tcp_kill_state+0x24>
 811d180:	79fb      	ldrb	r3, [r7, #7]
 811d182:	2b09      	cmp	r3, #9
 811d184:	d006      	beq.n	811d194 <tcp_kill_state+0x24>
 811d186:	4b1a      	ldr	r3, [pc, #104]	@ (811d1f0 <tcp_kill_state+0x80>)
 811d188:	f240 62dd 	movw	r2, #1757	@ 0x6dd
 811d18c:	4919      	ldr	r1, [pc, #100]	@ (811d1f4 <tcp_kill_state+0x84>)
 811d18e:	481a      	ldr	r0, [pc, #104]	@ (811d1f8 <tcp_kill_state+0x88>)
 811d190:	f006 fd44 	bl	8123c1c <iprintf>

  inactivity = 0;
 811d194:	2300      	movs	r3, #0
 811d196:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 811d198:	2300      	movs	r3, #0
 811d19a:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 811d19c:	4b17      	ldr	r3, [pc, #92]	@ (811d1fc <tcp_kill_state+0x8c>)
 811d19e:	681b      	ldr	r3, [r3, #0]
 811d1a0:	617b      	str	r3, [r7, #20]
 811d1a2:	e017      	b.n	811d1d4 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 811d1a4:	697b      	ldr	r3, [r7, #20]
 811d1a6:	7d1b      	ldrb	r3, [r3, #20]
 811d1a8:	79fa      	ldrb	r2, [r7, #7]
 811d1aa:	429a      	cmp	r2, r3
 811d1ac:	d10f      	bne.n	811d1ce <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 811d1ae:	4b14      	ldr	r3, [pc, #80]	@ (811d200 <tcp_kill_state+0x90>)
 811d1b0:	681a      	ldr	r2, [r3, #0]
 811d1b2:	697b      	ldr	r3, [r7, #20]
 811d1b4:	6a1b      	ldr	r3, [r3, #32]
 811d1b6:	1ad3      	subs	r3, r2, r3
 811d1b8:	68fa      	ldr	r2, [r7, #12]
 811d1ba:	429a      	cmp	r2, r3
 811d1bc:	d807      	bhi.n	811d1ce <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 811d1be:	4b10      	ldr	r3, [pc, #64]	@ (811d200 <tcp_kill_state+0x90>)
 811d1c0:	681a      	ldr	r2, [r3, #0]
 811d1c2:	697b      	ldr	r3, [r7, #20]
 811d1c4:	6a1b      	ldr	r3, [r3, #32]
 811d1c6:	1ad3      	subs	r3, r2, r3
 811d1c8:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 811d1ca:	697b      	ldr	r3, [r7, #20]
 811d1cc:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 811d1ce:	697b      	ldr	r3, [r7, #20]
 811d1d0:	68db      	ldr	r3, [r3, #12]
 811d1d2:	617b      	str	r3, [r7, #20]
 811d1d4:	697b      	ldr	r3, [r7, #20]
 811d1d6:	2b00      	cmp	r3, #0
 811d1d8:	d1e4      	bne.n	811d1a4 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 811d1da:	693b      	ldr	r3, [r7, #16]
 811d1dc:	2b00      	cmp	r3, #0
 811d1de:	d003      	beq.n	811d1e8 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 811d1e0:	2100      	movs	r1, #0
 811d1e2:	6938      	ldr	r0, [r7, #16]
 811d1e4:	f7fe ff52 	bl	811c08c <tcp_abandon>
  }
}
 811d1e8:	bf00      	nop
 811d1ea:	3718      	adds	r7, #24
 811d1ec:	46bd      	mov	sp, r7
 811d1ee:	bd80      	pop	{r7, pc}
 811d1f0:	0812687c 	.word	0x0812687c
 811d1f4:	08126e48 	.word	0x08126e48
 811d1f8:	08126900 	.word	0x08126900
 811d1fc:	1000e4a4 	.word	0x1000e4a4
 811d200:	1000e498 	.word	0x1000e498

0811d204 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 811d204:	b580      	push	{r7, lr}
 811d206:	b084      	sub	sp, #16
 811d208:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 811d20a:	2300      	movs	r3, #0
 811d20c:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 811d20e:	2300      	movs	r3, #0
 811d210:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 811d212:	4b12      	ldr	r3, [pc, #72]	@ (811d25c <tcp_kill_timewait+0x58>)
 811d214:	681b      	ldr	r3, [r3, #0]
 811d216:	60fb      	str	r3, [r7, #12]
 811d218:	e012      	b.n	811d240 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 811d21a:	4b11      	ldr	r3, [pc, #68]	@ (811d260 <tcp_kill_timewait+0x5c>)
 811d21c:	681a      	ldr	r2, [r3, #0]
 811d21e:	68fb      	ldr	r3, [r7, #12]
 811d220:	6a1b      	ldr	r3, [r3, #32]
 811d222:	1ad3      	subs	r3, r2, r3
 811d224:	687a      	ldr	r2, [r7, #4]
 811d226:	429a      	cmp	r2, r3
 811d228:	d807      	bhi.n	811d23a <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 811d22a:	4b0d      	ldr	r3, [pc, #52]	@ (811d260 <tcp_kill_timewait+0x5c>)
 811d22c:	681a      	ldr	r2, [r3, #0]
 811d22e:	68fb      	ldr	r3, [r7, #12]
 811d230:	6a1b      	ldr	r3, [r3, #32]
 811d232:	1ad3      	subs	r3, r2, r3
 811d234:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 811d236:	68fb      	ldr	r3, [r7, #12]
 811d238:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 811d23a:	68fb      	ldr	r3, [r7, #12]
 811d23c:	68db      	ldr	r3, [r3, #12]
 811d23e:	60fb      	str	r3, [r7, #12]
 811d240:	68fb      	ldr	r3, [r7, #12]
 811d242:	2b00      	cmp	r3, #0
 811d244:	d1e9      	bne.n	811d21a <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 811d246:	68bb      	ldr	r3, [r7, #8]
 811d248:	2b00      	cmp	r3, #0
 811d24a:	d002      	beq.n	811d252 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 811d24c:	68b8      	ldr	r0, [r7, #8]
 811d24e:	f7fe ffdb 	bl	811c208 <tcp_abort>
  }
}
 811d252:	bf00      	nop
 811d254:	3710      	adds	r7, #16
 811d256:	46bd      	mov	sp, r7
 811d258:	bd80      	pop	{r7, pc}
 811d25a:	bf00      	nop
 811d25c:	1000e4a8 	.word	0x1000e4a8
 811d260:	1000e498 	.word	0x1000e498

0811d264 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 811d264:	b580      	push	{r7, lr}
 811d266:	b082      	sub	sp, #8
 811d268:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 811d26a:	4b10      	ldr	r3, [pc, #64]	@ (811d2ac <tcp_handle_closepend+0x48>)
 811d26c:	681b      	ldr	r3, [r3, #0]
 811d26e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 811d270:	e014      	b.n	811d29c <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 811d272:	687b      	ldr	r3, [r7, #4]
 811d274:	68db      	ldr	r3, [r3, #12]
 811d276:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 811d278:	687b      	ldr	r3, [r7, #4]
 811d27a:	8b5b      	ldrh	r3, [r3, #26]
 811d27c:	f003 0308 	and.w	r3, r3, #8
 811d280:	2b00      	cmp	r3, #0
 811d282:	d009      	beq.n	811d298 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 811d284:	687b      	ldr	r3, [r7, #4]
 811d286:	8b5b      	ldrh	r3, [r3, #26]
 811d288:	f023 0308 	bic.w	r3, r3, #8
 811d28c:	b29a      	uxth	r2, r3
 811d28e:	687b      	ldr	r3, [r7, #4]
 811d290:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 811d292:	6878      	ldr	r0, [r7, #4]
 811d294:	f7fe fe64 	bl	811bf60 <tcp_close_shutdown_fin>
    }
    pcb = next;
 811d298:	683b      	ldr	r3, [r7, #0]
 811d29a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 811d29c:	687b      	ldr	r3, [r7, #4]
 811d29e:	2b00      	cmp	r3, #0
 811d2a0:	d1e7      	bne.n	811d272 <tcp_handle_closepend+0xe>
  }
}
 811d2a2:	bf00      	nop
 811d2a4:	bf00      	nop
 811d2a6:	3708      	adds	r7, #8
 811d2a8:	46bd      	mov	sp, r7
 811d2aa:	bd80      	pop	{r7, pc}
 811d2ac:	1000e4a4 	.word	0x1000e4a4

0811d2b0 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 811d2b0:	b580      	push	{r7, lr}
 811d2b2:	b084      	sub	sp, #16
 811d2b4:	af00      	add	r7, sp, #0
 811d2b6:	4603      	mov	r3, r0
 811d2b8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 811d2ba:	2001      	movs	r0, #1
 811d2bc:	f7fd f9f6 	bl	811a6ac <memp_malloc>
 811d2c0:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 811d2c2:	68fb      	ldr	r3, [r7, #12]
 811d2c4:	2b00      	cmp	r3, #0
 811d2c6:	d126      	bne.n	811d316 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 811d2c8:	f7ff ffcc 	bl	811d264 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 811d2cc:	f7ff ff9a 	bl	811d204 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 811d2d0:	2001      	movs	r0, #1
 811d2d2:	f7fd f9eb 	bl	811a6ac <memp_malloc>
 811d2d6:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 811d2d8:	68fb      	ldr	r3, [r7, #12]
 811d2da:	2b00      	cmp	r3, #0
 811d2dc:	d11b      	bne.n	811d316 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 811d2de:	2009      	movs	r0, #9
 811d2e0:	f7ff ff46 	bl	811d170 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 811d2e4:	2001      	movs	r0, #1
 811d2e6:	f7fd f9e1 	bl	811a6ac <memp_malloc>
 811d2ea:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 811d2ec:	68fb      	ldr	r3, [r7, #12]
 811d2ee:	2b00      	cmp	r3, #0
 811d2f0:	d111      	bne.n	811d316 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 811d2f2:	2008      	movs	r0, #8
 811d2f4:	f7ff ff3c 	bl	811d170 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 811d2f8:	2001      	movs	r0, #1
 811d2fa:	f7fd f9d7 	bl	811a6ac <memp_malloc>
 811d2fe:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 811d300:	68fb      	ldr	r3, [r7, #12]
 811d302:	2b00      	cmp	r3, #0
 811d304:	d107      	bne.n	811d316 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 811d306:	79fb      	ldrb	r3, [r7, #7]
 811d308:	4618      	mov	r0, r3
 811d30a:	f7ff fee3 	bl	811d0d4 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 811d30e:	2001      	movs	r0, #1
 811d310:	f7fd f9cc 	bl	811a6ac <memp_malloc>
 811d314:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 811d316:	68fb      	ldr	r3, [r7, #12]
 811d318:	2b00      	cmp	r3, #0
 811d31a:	d047      	beq.n	811d3ac <tcp_alloc+0xfc>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 811d31c:	22a4      	movs	r2, #164	@ 0xa4
 811d31e:	2100      	movs	r1, #0
 811d320:	68f8      	ldr	r0, [r7, #12]
 811d322:	f006 fdbb 	bl	8123e9c <memset>
    pcb->prio = prio;
 811d326:	68fb      	ldr	r3, [r7, #12]
 811d328:	79fa      	ldrb	r2, [r7, #7]
 811d32a:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 811d32c:	68fb      	ldr	r3, [r7, #12]
 811d32e:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 811d332:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 811d336:	68fb      	ldr	r3, [r7, #12]
 811d338:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 811d33c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 811d33e:	68fb      	ldr	r3, [r7, #12]
 811d340:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 811d342:	68fb      	ldr	r3, [r7, #12]
 811d344:	851a      	strh	r2, [r3, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 811d346:	68fb      	ldr	r3, [r7, #12]
 811d348:	22ff      	movs	r2, #255	@ 0xff
 811d34a:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 811d34c:	68fb      	ldr	r3, [r7, #12]
 811d34e:	f44f 7206 	mov.w	r2, #536	@ 0x218
 811d352:	865a      	strh	r2, [r3, #50]	@ 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 811d354:	68fb      	ldr	r3, [r7, #12]
 811d356:	2296      	movs	r2, #150	@ 0x96
 811d358:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 811d35c:	68fb      	ldr	r3, [r7, #12]
 811d35e:	2296      	movs	r2, #150	@ 0x96
 811d360:	87da      	strh	r2, [r3, #62]	@ 0x3e
    pcb->rtime = -1;
 811d362:	68fb      	ldr	r3, [r7, #12]
 811d364:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 811d368:	861a      	strh	r2, [r3, #48]	@ 0x30
    pcb->cwnd = 1;
 811d36a:	68fb      	ldr	r3, [r7, #12]
 811d36c:	2201      	movs	r2, #1
 811d36e:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->tmr = tcp_ticks;
 811d372:	4b11      	ldr	r3, [pc, #68]	@ (811d3b8 <tcp_alloc+0x108>)
 811d374:	681a      	ldr	r2, [r3, #0]
 811d376:	68fb      	ldr	r3, [r7, #12]
 811d378:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 811d37a:	4b10      	ldr	r3, [pc, #64]	@ (811d3bc <tcp_alloc+0x10c>)
 811d37c:	781a      	ldrb	r2, [r3, #0]
 811d37e:	68fb      	ldr	r3, [r7, #12]
 811d380:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 811d382:	68fb      	ldr	r3, [r7, #12]
 811d384:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 811d388:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 811d38c:	68fb      	ldr	r3, [r7, #12]
 811d38e:	4a0c      	ldr	r2, [pc, #48]	@ (811d3c0 <tcp_alloc+0x110>)
 811d390:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 811d394:	68fb      	ldr	r3, [r7, #12]
 811d396:	4a0b      	ldr	r2, [pc, #44]	@ (811d3c4 <tcp_alloc+0x114>)
 811d398:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
 811d39c:	68fb      	ldr	r3, [r7, #12]
 811d39e:	4a0a      	ldr	r2, [pc, #40]	@ (811d3c8 <tcp_alloc+0x118>)
 811d3a0:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
 811d3a4:	68fb      	ldr	r3, [r7, #12]
 811d3a6:	2209      	movs	r2, #9
 811d3a8:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 811d3ac:	68fb      	ldr	r3, [r7, #12]
}
 811d3ae:	4618      	mov	r0, r3
 811d3b0:	3710      	adds	r7, #16
 811d3b2:	46bd      	mov	sp, r7
 811d3b4:	bd80      	pop	{r7, pc}
 811d3b6:	bf00      	nop
 811d3b8:	1000e498 	.word	0x1000e498
 811d3bc:	1000e4ae 	.word	0x1000e4ae
 811d3c0:	0811d069 	.word	0x0811d069
 811d3c4:	006ddd00 	.word	0x006ddd00
 811d3c8:	000124f8 	.word	0x000124f8

0811d3cc <tcp_new>:
 *
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new(void)
{
 811d3cc:	b580      	push	{r7, lr}
 811d3ce:	af00      	add	r7, sp, #0
  return tcp_alloc(TCP_PRIO_NORMAL);
 811d3d0:	2040      	movs	r0, #64	@ 0x40
 811d3d2:	f7ff ff6d 	bl	811d2b0 <tcp_alloc>
 811d3d6:	4603      	mov	r3, r0
}
 811d3d8:	4618      	mov	r0, r3
 811d3da:	bd80      	pop	{r7, pc}

0811d3dc <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 811d3dc:	b480      	push	{r7}
 811d3de:	b083      	sub	sp, #12
 811d3e0:	af00      	add	r7, sp, #0
 811d3e2:	6078      	str	r0, [r7, #4]
 811d3e4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 811d3e6:	687b      	ldr	r3, [r7, #4]
 811d3e8:	2b00      	cmp	r3, #0
 811d3ea:	d002      	beq.n	811d3f2 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 811d3ec:	687b      	ldr	r3, [r7, #4]
 811d3ee:	683a      	ldr	r2, [r7, #0]
 811d3f0:	611a      	str	r2, [r3, #16]
  }
}
 811d3f2:	bf00      	nop
 811d3f4:	370c      	adds	r7, #12
 811d3f6:	46bd      	mov	sp, r7
 811d3f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 811d3fc:	4770      	bx	lr
	...

0811d400 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 811d400:	b580      	push	{r7, lr}
 811d402:	b082      	sub	sp, #8
 811d404:	af00      	add	r7, sp, #0
 811d406:	6078      	str	r0, [r7, #4]
 811d408:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 811d40a:	687b      	ldr	r3, [r7, #4]
 811d40c:	2b00      	cmp	r3, #0
 811d40e:	d00e      	beq.n	811d42e <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 811d410:	687b      	ldr	r3, [r7, #4]
 811d412:	7d1b      	ldrb	r3, [r3, #20]
 811d414:	2b01      	cmp	r3, #1
 811d416:	d106      	bne.n	811d426 <tcp_recv+0x26>
 811d418:	4b07      	ldr	r3, [pc, #28]	@ (811d438 <tcp_recv+0x38>)
 811d41a:	f240 72df 	movw	r2, #2015	@ 0x7df
 811d41e:	4907      	ldr	r1, [pc, #28]	@ (811d43c <tcp_recv+0x3c>)
 811d420:	4807      	ldr	r0, [pc, #28]	@ (811d440 <tcp_recv+0x40>)
 811d422:	f006 fbfb 	bl	8123c1c <iprintf>
    pcb->recv = recv;
 811d426:	687b      	ldr	r3, [r7, #4]
 811d428:	683a      	ldr	r2, [r7, #0]
 811d42a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }
}
 811d42e:	bf00      	nop
 811d430:	3708      	adds	r7, #8
 811d432:	46bd      	mov	sp, r7
 811d434:	bd80      	pop	{r7, pc}
 811d436:	bf00      	nop
 811d438:	0812687c 	.word	0x0812687c
 811d43c:	08126e58 	.word	0x08126e58
 811d440:	08126900 	.word	0x08126900

0811d444 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 811d444:	b580      	push	{r7, lr}
 811d446:	b082      	sub	sp, #8
 811d448:	af00      	add	r7, sp, #0
 811d44a:	6078      	str	r0, [r7, #4]
 811d44c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 811d44e:	687b      	ldr	r3, [r7, #4]
 811d450:	2b00      	cmp	r3, #0
 811d452:	d00e      	beq.n	811d472 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 811d454:	687b      	ldr	r3, [r7, #4]
 811d456:	7d1b      	ldrb	r3, [r3, #20]
 811d458:	2b01      	cmp	r3, #1
 811d45a:	d106      	bne.n	811d46a <tcp_err+0x26>
 811d45c:	4b07      	ldr	r3, [pc, #28]	@ (811d47c <tcp_err+0x38>)
 811d45e:	f640 020d 	movw	r2, #2061	@ 0x80d
 811d462:	4907      	ldr	r1, [pc, #28]	@ (811d480 <tcp_err+0x3c>)
 811d464:	4807      	ldr	r0, [pc, #28]	@ (811d484 <tcp_err+0x40>)
 811d466:	f006 fbd9 	bl	8123c1c <iprintf>
    pcb->errf = err;
 811d46a:	687b      	ldr	r3, [r7, #4]
 811d46c:	683a      	ldr	r2, [r7, #0]
 811d46e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  }
}
 811d472:	bf00      	nop
 811d474:	3708      	adds	r7, #8
 811d476:	46bd      	mov	sp, r7
 811d478:	bd80      	pop	{r7, pc}
 811d47a:	bf00      	nop
 811d47c:	0812687c 	.word	0x0812687c
 811d480:	08126ea8 	.word	0x08126ea8
 811d484:	08126900 	.word	0x08126900

0811d488 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 811d488:	b580      	push	{r7, lr}
 811d48a:	b082      	sub	sp, #8
 811d48c:	af00      	add	r7, sp, #0
 811d48e:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 811d490:	687b      	ldr	r3, [r7, #4]
 811d492:	2b00      	cmp	r3, #0
 811d494:	d107      	bne.n	811d4a6 <tcp_pcb_purge+0x1e>
 811d496:	4b21      	ldr	r3, [pc, #132]	@ (811d51c <tcp_pcb_purge+0x94>)
 811d498:	f640 0251 	movw	r2, #2129	@ 0x851
 811d49c:	4920      	ldr	r1, [pc, #128]	@ (811d520 <tcp_pcb_purge+0x98>)
 811d49e:	4821      	ldr	r0, [pc, #132]	@ (811d524 <tcp_pcb_purge+0x9c>)
 811d4a0:	f006 fbbc 	bl	8123c1c <iprintf>
 811d4a4:	e037      	b.n	811d516 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 811d4a6:	687b      	ldr	r3, [r7, #4]
 811d4a8:	7d1b      	ldrb	r3, [r3, #20]
 811d4aa:	2b00      	cmp	r3, #0
 811d4ac:	d033      	beq.n	811d516 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 811d4ae:	687b      	ldr	r3, [r7, #4]
 811d4b0:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 811d4b2:	2b0a      	cmp	r3, #10
 811d4b4:	d02f      	beq.n	811d516 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 811d4b6:	687b      	ldr	r3, [r7, #4]
 811d4b8:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 811d4ba:	2b01      	cmp	r3, #1
 811d4bc:	d02b      	beq.n	811d516 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 811d4be:	687b      	ldr	r3, [r7, #4]
 811d4c0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 811d4c2:	2b00      	cmp	r3, #0
 811d4c4:	d007      	beq.n	811d4d6 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 811d4c6:	687b      	ldr	r3, [r7, #4]
 811d4c8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 811d4ca:	4618      	mov	r0, r3
 811d4cc:	f7fe f806 	bl	811b4dc <pbuf_free>
      pcb->refused_data = NULL;
 811d4d0:	687b      	ldr	r3, [r7, #4]
 811d4d2:	2200      	movs	r2, #0
 811d4d4:	679a      	str	r2, [r3, #120]	@ 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 811d4d6:	687b      	ldr	r3, [r7, #4]
 811d4d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 811d4da:	2b00      	cmp	r3, #0
 811d4dc:	d002      	beq.n	811d4e4 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 811d4de:	6878      	ldr	r0, [r7, #4]
 811d4e0:	f000 f986 	bl	811d7f0 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 811d4e4:	687b      	ldr	r3, [r7, #4]
 811d4e6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 811d4ea:	861a      	strh	r2, [r3, #48]	@ 0x30

    tcp_segs_free(pcb->unsent);
 811d4ec:	687b      	ldr	r3, [r7, #4]
 811d4ee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 811d4f0:	4618      	mov	r0, r3
 811d4f2:	f7ff fd5f 	bl	811cfb4 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 811d4f6:	687b      	ldr	r3, [r7, #4]
 811d4f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 811d4fa:	4618      	mov	r0, r3
 811d4fc:	f7ff fd5a 	bl	811cfb4 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 811d500:	687b      	ldr	r3, [r7, #4]
 811d502:	2200      	movs	r2, #0
 811d504:	66da      	str	r2, [r3, #108]	@ 0x6c
 811d506:	687b      	ldr	r3, [r7, #4]
 811d508:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 811d50a:	687b      	ldr	r3, [r7, #4]
 811d50c:	671a      	str	r2, [r3, #112]	@ 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 811d50e:	687b      	ldr	r3, [r7, #4]
 811d510:	2200      	movs	r2, #0
 811d512:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */
  }
}
 811d516:	3708      	adds	r7, #8
 811d518:	46bd      	mov	sp, r7
 811d51a:	bd80      	pop	{r7, pc}
 811d51c:	0812687c 	.word	0x0812687c
 811d520:	08126f08 	.word	0x08126f08
 811d524:	08126900 	.word	0x08126900

0811d528 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 811d528:	b580      	push	{r7, lr}
 811d52a:	b084      	sub	sp, #16
 811d52c:	af00      	add	r7, sp, #0
 811d52e:	6078      	str	r0, [r7, #4]
 811d530:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 811d532:	683b      	ldr	r3, [r7, #0]
 811d534:	2b00      	cmp	r3, #0
 811d536:	d106      	bne.n	811d546 <tcp_pcb_remove+0x1e>
 811d538:	4b3e      	ldr	r3, [pc, #248]	@ (811d634 <tcp_pcb_remove+0x10c>)
 811d53a:	f640 0283 	movw	r2, #2179	@ 0x883
 811d53e:	493e      	ldr	r1, [pc, #248]	@ (811d638 <tcp_pcb_remove+0x110>)
 811d540:	483e      	ldr	r0, [pc, #248]	@ (811d63c <tcp_pcb_remove+0x114>)
 811d542:	f006 fb6b 	bl	8123c1c <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 811d546:	687b      	ldr	r3, [r7, #4]
 811d548:	2b00      	cmp	r3, #0
 811d54a:	d106      	bne.n	811d55a <tcp_pcb_remove+0x32>
 811d54c:	4b39      	ldr	r3, [pc, #228]	@ (811d634 <tcp_pcb_remove+0x10c>)
 811d54e:	f640 0284 	movw	r2, #2180	@ 0x884
 811d552:	493b      	ldr	r1, [pc, #236]	@ (811d640 <tcp_pcb_remove+0x118>)
 811d554:	4839      	ldr	r0, [pc, #228]	@ (811d63c <tcp_pcb_remove+0x114>)
 811d556:	f006 fb61 	bl	8123c1c <iprintf>

  TCP_RMV(pcblist, pcb);
 811d55a:	687b      	ldr	r3, [r7, #4]
 811d55c:	681b      	ldr	r3, [r3, #0]
 811d55e:	683a      	ldr	r2, [r7, #0]
 811d560:	429a      	cmp	r2, r3
 811d562:	d105      	bne.n	811d570 <tcp_pcb_remove+0x48>
 811d564:	687b      	ldr	r3, [r7, #4]
 811d566:	681b      	ldr	r3, [r3, #0]
 811d568:	68da      	ldr	r2, [r3, #12]
 811d56a:	687b      	ldr	r3, [r7, #4]
 811d56c:	601a      	str	r2, [r3, #0]
 811d56e:	e013      	b.n	811d598 <tcp_pcb_remove+0x70>
 811d570:	687b      	ldr	r3, [r7, #4]
 811d572:	681b      	ldr	r3, [r3, #0]
 811d574:	60fb      	str	r3, [r7, #12]
 811d576:	e00c      	b.n	811d592 <tcp_pcb_remove+0x6a>
 811d578:	68fb      	ldr	r3, [r7, #12]
 811d57a:	68db      	ldr	r3, [r3, #12]
 811d57c:	683a      	ldr	r2, [r7, #0]
 811d57e:	429a      	cmp	r2, r3
 811d580:	d104      	bne.n	811d58c <tcp_pcb_remove+0x64>
 811d582:	683b      	ldr	r3, [r7, #0]
 811d584:	68da      	ldr	r2, [r3, #12]
 811d586:	68fb      	ldr	r3, [r7, #12]
 811d588:	60da      	str	r2, [r3, #12]
 811d58a:	e005      	b.n	811d598 <tcp_pcb_remove+0x70>
 811d58c:	68fb      	ldr	r3, [r7, #12]
 811d58e:	68db      	ldr	r3, [r3, #12]
 811d590:	60fb      	str	r3, [r7, #12]
 811d592:	68fb      	ldr	r3, [r7, #12]
 811d594:	2b00      	cmp	r3, #0
 811d596:	d1ef      	bne.n	811d578 <tcp_pcb_remove+0x50>
 811d598:	683b      	ldr	r3, [r7, #0]
 811d59a:	2200      	movs	r2, #0
 811d59c:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 811d59e:	6838      	ldr	r0, [r7, #0]
 811d5a0:	f7ff ff72 	bl	811d488 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 811d5a4:	683b      	ldr	r3, [r7, #0]
 811d5a6:	7d1b      	ldrb	r3, [r3, #20]
 811d5a8:	2b0a      	cmp	r3, #10
 811d5aa:	d013      	beq.n	811d5d4 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 811d5ac:	683b      	ldr	r3, [r7, #0]
 811d5ae:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 811d5b0:	2b01      	cmp	r3, #1
 811d5b2:	d00f      	beq.n	811d5d4 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 811d5b4:	683b      	ldr	r3, [r7, #0]
 811d5b6:	8b5b      	ldrh	r3, [r3, #26]
 811d5b8:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 811d5bc:	2b00      	cmp	r3, #0
 811d5be:	d009      	beq.n	811d5d4 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 811d5c0:	683b      	ldr	r3, [r7, #0]
 811d5c2:	8b5b      	ldrh	r3, [r3, #26]
 811d5c4:	f043 0302 	orr.w	r3, r3, #2
 811d5c8:	b29a      	uxth	r2, r3
 811d5ca:	683b      	ldr	r3, [r7, #0]
 811d5cc:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 811d5ce:	6838      	ldr	r0, [r7, #0]
 811d5d0:	f003 fbc0 	bl	8120d54 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 811d5d4:	683b      	ldr	r3, [r7, #0]
 811d5d6:	7d1b      	ldrb	r3, [r3, #20]
 811d5d8:	2b01      	cmp	r3, #1
 811d5da:	d020      	beq.n	811d61e <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 811d5dc:	683b      	ldr	r3, [r7, #0]
 811d5de:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 811d5e0:	2b00      	cmp	r3, #0
 811d5e2:	d006      	beq.n	811d5f2 <tcp_pcb_remove+0xca>
 811d5e4:	4b13      	ldr	r3, [pc, #76]	@ (811d634 <tcp_pcb_remove+0x10c>)
 811d5e6:	f640 0293 	movw	r2, #2195	@ 0x893
 811d5ea:	4916      	ldr	r1, [pc, #88]	@ (811d644 <tcp_pcb_remove+0x11c>)
 811d5ec:	4813      	ldr	r0, [pc, #76]	@ (811d63c <tcp_pcb_remove+0x114>)
 811d5ee:	f006 fb15 	bl	8123c1c <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 811d5f2:	683b      	ldr	r3, [r7, #0]
 811d5f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 811d5f6:	2b00      	cmp	r3, #0
 811d5f8:	d006      	beq.n	811d608 <tcp_pcb_remove+0xe0>
 811d5fa:	4b0e      	ldr	r3, [pc, #56]	@ (811d634 <tcp_pcb_remove+0x10c>)
 811d5fc:	f640 0294 	movw	r2, #2196	@ 0x894
 811d600:	4911      	ldr	r1, [pc, #68]	@ (811d648 <tcp_pcb_remove+0x120>)
 811d602:	480e      	ldr	r0, [pc, #56]	@ (811d63c <tcp_pcb_remove+0x114>)
 811d604:	f006 fb0a 	bl	8123c1c <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 811d608:	683b      	ldr	r3, [r7, #0]
 811d60a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 811d60c:	2b00      	cmp	r3, #0
 811d60e:	d006      	beq.n	811d61e <tcp_pcb_remove+0xf6>
 811d610:	4b08      	ldr	r3, [pc, #32]	@ (811d634 <tcp_pcb_remove+0x10c>)
 811d612:	f640 0296 	movw	r2, #2198	@ 0x896
 811d616:	490d      	ldr	r1, [pc, #52]	@ (811d64c <tcp_pcb_remove+0x124>)
 811d618:	4808      	ldr	r0, [pc, #32]	@ (811d63c <tcp_pcb_remove+0x114>)
 811d61a:	f006 faff 	bl	8123c1c <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 811d61e:	683b      	ldr	r3, [r7, #0]
 811d620:	2200      	movs	r2, #0
 811d622:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 811d624:	683b      	ldr	r3, [r7, #0]
 811d626:	2200      	movs	r2, #0
 811d628:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 811d62a:	bf00      	nop
 811d62c:	3710      	adds	r7, #16
 811d62e:	46bd      	mov	sp, r7
 811d630:	bd80      	pop	{r7, pc}
 811d632:	bf00      	nop
 811d634:	0812687c 	.word	0x0812687c
 811d638:	08126f24 	.word	0x08126f24
 811d63c:	08126900 	.word	0x08126900
 811d640:	08126f40 	.word	0x08126f40
 811d644:	08126f60 	.word	0x08126f60
 811d648:	08126f78 	.word	0x08126f78
 811d64c:	08126f94 	.word	0x08126f94

0811d650 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 811d650:	b580      	push	{r7, lr}
 811d652:	b082      	sub	sp, #8
 811d654:	af00      	add	r7, sp, #0
 811d656:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 811d658:	687b      	ldr	r3, [r7, #4]
 811d65a:	2b00      	cmp	r3, #0
 811d65c:	d106      	bne.n	811d66c <tcp_next_iss+0x1c>
 811d65e:	4b0a      	ldr	r3, [pc, #40]	@ (811d688 <tcp_next_iss+0x38>)
 811d660:	f640 02af 	movw	r2, #2223	@ 0x8af
 811d664:	4909      	ldr	r1, [pc, #36]	@ (811d68c <tcp_next_iss+0x3c>)
 811d666:	480a      	ldr	r0, [pc, #40]	@ (811d690 <tcp_next_iss+0x40>)
 811d668:	f006 fad8 	bl	8123c1c <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 811d66c:	4b09      	ldr	r3, [pc, #36]	@ (811d694 <tcp_next_iss+0x44>)
 811d66e:	681a      	ldr	r2, [r3, #0]
 811d670:	4b09      	ldr	r3, [pc, #36]	@ (811d698 <tcp_next_iss+0x48>)
 811d672:	681b      	ldr	r3, [r3, #0]
 811d674:	4413      	add	r3, r2
 811d676:	4a07      	ldr	r2, [pc, #28]	@ (811d694 <tcp_next_iss+0x44>)
 811d678:	6013      	str	r3, [r2, #0]
  return iss;
 811d67a:	4b06      	ldr	r3, [pc, #24]	@ (811d694 <tcp_next_iss+0x44>)
 811d67c:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 811d67e:	4618      	mov	r0, r3
 811d680:	3708      	adds	r7, #8
 811d682:	46bd      	mov	sp, r7
 811d684:	bd80      	pop	{r7, pc}
 811d686:	bf00      	nop
 811d688:	0812687c 	.word	0x0812687c
 811d68c:	08126fac 	.word	0x08126fac
 811d690:	08126900 	.word	0x08126900
 811d694:	1000002c 	.word	0x1000002c
 811d698:	1000e498 	.word	0x1000e498

0811d69c <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 811d69c:	b580      	push	{r7, lr}
 811d69e:	b086      	sub	sp, #24
 811d6a0:	af00      	add	r7, sp, #0
 811d6a2:	4603      	mov	r3, r0
 811d6a4:	60b9      	str	r1, [r7, #8]
 811d6a6:	607a      	str	r2, [r7, #4]
 811d6a8:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 811d6aa:	687b      	ldr	r3, [r7, #4]
 811d6ac:	2b00      	cmp	r3, #0
 811d6ae:	d106      	bne.n	811d6be <tcp_eff_send_mss_netif+0x22>
 811d6b0:	4b14      	ldr	r3, [pc, #80]	@ (811d704 <tcp_eff_send_mss_netif+0x68>)
 811d6b2:	f640 02c5 	movw	r2, #2245	@ 0x8c5
 811d6b6:	4914      	ldr	r1, [pc, #80]	@ (811d708 <tcp_eff_send_mss_netif+0x6c>)
 811d6b8:	4814      	ldr	r0, [pc, #80]	@ (811d70c <tcp_eff_send_mss_netif+0x70>)
 811d6ba:	f006 faaf 	bl	8123c1c <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 811d6be:	68bb      	ldr	r3, [r7, #8]
 811d6c0:	2b00      	cmp	r3, #0
 811d6c2:	d101      	bne.n	811d6c8 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 811d6c4:	89fb      	ldrh	r3, [r7, #14]
 811d6c6:	e019      	b.n	811d6fc <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 811d6c8:	68bb      	ldr	r3, [r7, #8]
 811d6ca:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 811d6cc:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 811d6ce:	8afb      	ldrh	r3, [r7, #22]
 811d6d0:	2b00      	cmp	r3, #0
 811d6d2:	d012      	beq.n	811d6fa <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 811d6d4:	2328      	movs	r3, #40	@ 0x28
 811d6d6:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 811d6d8:	8afa      	ldrh	r2, [r7, #22]
 811d6da:	8abb      	ldrh	r3, [r7, #20]
 811d6dc:	429a      	cmp	r2, r3
 811d6de:	d904      	bls.n	811d6ea <tcp_eff_send_mss_netif+0x4e>
 811d6e0:	8afa      	ldrh	r2, [r7, #22]
 811d6e2:	8abb      	ldrh	r3, [r7, #20]
 811d6e4:	1ad3      	subs	r3, r2, r3
 811d6e6:	b29b      	uxth	r3, r3
 811d6e8:	e000      	b.n	811d6ec <tcp_eff_send_mss_netif+0x50>
 811d6ea:	2300      	movs	r3, #0
 811d6ec:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 811d6ee:	8a7a      	ldrh	r2, [r7, #18]
 811d6f0:	89fb      	ldrh	r3, [r7, #14]
 811d6f2:	4293      	cmp	r3, r2
 811d6f4:	bf28      	it	cs
 811d6f6:	4613      	movcs	r3, r2
 811d6f8:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 811d6fa:	89fb      	ldrh	r3, [r7, #14]
}
 811d6fc:	4618      	mov	r0, r3
 811d6fe:	3718      	adds	r7, #24
 811d700:	46bd      	mov	sp, r7
 811d702:	bd80      	pop	{r7, pc}
 811d704:	0812687c 	.word	0x0812687c
 811d708:	08126fc8 	.word	0x08126fc8
 811d70c:	08126900 	.word	0x08126900

0811d710 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 811d710:	b580      	push	{r7, lr}
 811d712:	b084      	sub	sp, #16
 811d714:	af00      	add	r7, sp, #0
 811d716:	6078      	str	r0, [r7, #4]
 811d718:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 811d71a:	683b      	ldr	r3, [r7, #0]
 811d71c:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 811d71e:	687b      	ldr	r3, [r7, #4]
 811d720:	2b00      	cmp	r3, #0
 811d722:	d119      	bne.n	811d758 <tcp_netif_ip_addr_changed_pcblist+0x48>
 811d724:	4b10      	ldr	r3, [pc, #64]	@ (811d768 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 811d726:	f44f 6210 	mov.w	r2, #2304	@ 0x900
 811d72a:	4910      	ldr	r1, [pc, #64]	@ (811d76c <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 811d72c:	4810      	ldr	r0, [pc, #64]	@ (811d770 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 811d72e:	f006 fa75 	bl	8123c1c <iprintf>

  while (pcb != NULL) {
 811d732:	e011      	b.n	811d758 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 811d734:	68fb      	ldr	r3, [r7, #12]
 811d736:	681a      	ldr	r2, [r3, #0]
 811d738:	687b      	ldr	r3, [r7, #4]
 811d73a:	681b      	ldr	r3, [r3, #0]
 811d73c:	429a      	cmp	r2, r3
 811d73e:	d108      	bne.n	811d752 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 811d740:	68fb      	ldr	r3, [r7, #12]
 811d742:	68db      	ldr	r3, [r3, #12]
 811d744:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 811d746:	68f8      	ldr	r0, [r7, #12]
 811d748:	f7fe fd5e 	bl	811c208 <tcp_abort>
      pcb = next;
 811d74c:	68bb      	ldr	r3, [r7, #8]
 811d74e:	60fb      	str	r3, [r7, #12]
 811d750:	e002      	b.n	811d758 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 811d752:	68fb      	ldr	r3, [r7, #12]
 811d754:	68db      	ldr	r3, [r3, #12]
 811d756:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 811d758:	68fb      	ldr	r3, [r7, #12]
 811d75a:	2b00      	cmp	r3, #0
 811d75c:	d1ea      	bne.n	811d734 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 811d75e:	bf00      	nop
 811d760:	bf00      	nop
 811d762:	3710      	adds	r7, #16
 811d764:	46bd      	mov	sp, r7
 811d766:	bd80      	pop	{r7, pc}
 811d768:	0812687c 	.word	0x0812687c
 811d76c:	08126ff0 	.word	0x08126ff0
 811d770:	08126900 	.word	0x08126900

0811d774 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 811d774:	b580      	push	{r7, lr}
 811d776:	b084      	sub	sp, #16
 811d778:	af00      	add	r7, sp, #0
 811d77a:	6078      	str	r0, [r7, #4]
 811d77c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 811d77e:	687b      	ldr	r3, [r7, #4]
 811d780:	2b00      	cmp	r3, #0
 811d782:	d02a      	beq.n	811d7da <tcp_netif_ip_addr_changed+0x66>
 811d784:	687b      	ldr	r3, [r7, #4]
 811d786:	681b      	ldr	r3, [r3, #0]
 811d788:	2b00      	cmp	r3, #0
 811d78a:	d026      	beq.n	811d7da <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 811d78c:	4b15      	ldr	r3, [pc, #84]	@ (811d7e4 <tcp_netif_ip_addr_changed+0x70>)
 811d78e:	681b      	ldr	r3, [r3, #0]
 811d790:	4619      	mov	r1, r3
 811d792:	6878      	ldr	r0, [r7, #4]
 811d794:	f7ff ffbc 	bl	811d710 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 811d798:	4b13      	ldr	r3, [pc, #76]	@ (811d7e8 <tcp_netif_ip_addr_changed+0x74>)
 811d79a:	681b      	ldr	r3, [r3, #0]
 811d79c:	4619      	mov	r1, r3
 811d79e:	6878      	ldr	r0, [r7, #4]
 811d7a0:	f7ff ffb6 	bl	811d710 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 811d7a4:	683b      	ldr	r3, [r7, #0]
 811d7a6:	2b00      	cmp	r3, #0
 811d7a8:	d017      	beq.n	811d7da <tcp_netif_ip_addr_changed+0x66>
 811d7aa:	683b      	ldr	r3, [r7, #0]
 811d7ac:	681b      	ldr	r3, [r3, #0]
 811d7ae:	2b00      	cmp	r3, #0
 811d7b0:	d013      	beq.n	811d7da <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 811d7b2:	4b0e      	ldr	r3, [pc, #56]	@ (811d7ec <tcp_netif_ip_addr_changed+0x78>)
 811d7b4:	681b      	ldr	r3, [r3, #0]
 811d7b6:	60fb      	str	r3, [r7, #12]
 811d7b8:	e00c      	b.n	811d7d4 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 811d7ba:	68fb      	ldr	r3, [r7, #12]
 811d7bc:	681a      	ldr	r2, [r3, #0]
 811d7be:	687b      	ldr	r3, [r7, #4]
 811d7c0:	681b      	ldr	r3, [r3, #0]
 811d7c2:	429a      	cmp	r2, r3
 811d7c4:	d103      	bne.n	811d7ce <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 811d7c6:	683b      	ldr	r3, [r7, #0]
 811d7c8:	681a      	ldr	r2, [r3, #0]
 811d7ca:	68fb      	ldr	r3, [r7, #12]
 811d7cc:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 811d7ce:	68fb      	ldr	r3, [r7, #12]
 811d7d0:	68db      	ldr	r3, [r3, #12]
 811d7d2:	60fb      	str	r3, [r7, #12]
 811d7d4:	68fb      	ldr	r3, [r7, #12]
 811d7d6:	2b00      	cmp	r3, #0
 811d7d8:	d1ef      	bne.n	811d7ba <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 811d7da:	bf00      	nop
 811d7dc:	3710      	adds	r7, #16
 811d7de:	46bd      	mov	sp, r7
 811d7e0:	bd80      	pop	{r7, pc}
 811d7e2:	bf00      	nop
 811d7e4:	1000e4a4 	.word	0x1000e4a4
 811d7e8:	1000e49c 	.word	0x1000e49c
 811d7ec:	1000e4a0 	.word	0x1000e4a0

0811d7f0 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 811d7f0:	b580      	push	{r7, lr}
 811d7f2:	b082      	sub	sp, #8
 811d7f4:	af00      	add	r7, sp, #0
 811d7f6:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 811d7f8:	687b      	ldr	r3, [r7, #4]
 811d7fa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 811d7fc:	2b00      	cmp	r3, #0
 811d7fe:	d007      	beq.n	811d810 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 811d800:	687b      	ldr	r3, [r7, #4]
 811d802:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 811d804:	4618      	mov	r0, r3
 811d806:	f7ff fbd5 	bl	811cfb4 <tcp_segs_free>
    pcb->ooseq = NULL;
 811d80a:	687b      	ldr	r3, [r7, #4]
 811d80c:	2200      	movs	r2, #0
 811d80e:	675a      	str	r2, [r3, #116]	@ 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 811d810:	bf00      	nop
 811d812:	3708      	adds	r7, #8
 811d814:	46bd      	mov	sp, r7
 811d816:	bd80      	pop	{r7, pc}

0811d818 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 811d818:	b590      	push	{r4, r7, lr}
 811d81a:	b08d      	sub	sp, #52	@ 0x34
 811d81c:	af04      	add	r7, sp, #16
 811d81e:	6078      	str	r0, [r7, #4]
 811d820:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 811d822:	687b      	ldr	r3, [r7, #4]
 811d824:	2b00      	cmp	r3, #0
 811d826:	d105      	bne.n	811d834 <tcp_input+0x1c>
 811d828:	4b9b      	ldr	r3, [pc, #620]	@ (811da98 <tcp_input+0x280>)
 811d82a:	2283      	movs	r2, #131	@ 0x83
 811d82c:	499b      	ldr	r1, [pc, #620]	@ (811da9c <tcp_input+0x284>)
 811d82e:	489c      	ldr	r0, [pc, #624]	@ (811daa0 <tcp_input+0x288>)
 811d830:	f006 f9f4 	bl	8123c1c <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 811d834:	687b      	ldr	r3, [r7, #4]
 811d836:	685b      	ldr	r3, [r3, #4]
 811d838:	4a9a      	ldr	r2, [pc, #616]	@ (811daa4 <tcp_input+0x28c>)
 811d83a:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 811d83c:	687b      	ldr	r3, [r7, #4]
 811d83e:	895b      	ldrh	r3, [r3, #10]
 811d840:	2b13      	cmp	r3, #19
 811d842:	f240 83d1 	bls.w	811dfe8 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 811d846:	4b98      	ldr	r3, [pc, #608]	@ (811daa8 <tcp_input+0x290>)
 811d848:	695b      	ldr	r3, [r3, #20]
 811d84a:	4a97      	ldr	r2, [pc, #604]	@ (811daa8 <tcp_input+0x290>)
 811d84c:	6812      	ldr	r2, [r2, #0]
 811d84e:	4611      	mov	r1, r2
 811d850:	4618      	mov	r0, r3
 811d852:	f7fb fa73 	bl	8118d3c <ip4_addr_isbroadcast_u32>
 811d856:	4603      	mov	r3, r0
 811d858:	2b00      	cmp	r3, #0
 811d85a:	f040 83c7 	bne.w	811dfec <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 811d85e:	4b92      	ldr	r3, [pc, #584]	@ (811daa8 <tcp_input+0x290>)
 811d860:	695b      	ldr	r3, [r3, #20]
 811d862:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 811d866:	2be0      	cmp	r3, #224	@ 0xe0
 811d868:	f000 83c0 	beq.w	811dfec <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 811d86c:	4b8d      	ldr	r3, [pc, #564]	@ (811daa4 <tcp_input+0x28c>)
 811d86e:	681b      	ldr	r3, [r3, #0]
 811d870:	899b      	ldrh	r3, [r3, #12]
 811d872:	b29b      	uxth	r3, r3
 811d874:	4618      	mov	r0, r3
 811d876:	f7f9 fc29 	bl	81170cc <lwip_htons>
 811d87a:	4603      	mov	r3, r0
 811d87c:	0b1b      	lsrs	r3, r3, #12
 811d87e:	b29b      	uxth	r3, r3
 811d880:	b2db      	uxtb	r3, r3
 811d882:	009b      	lsls	r3, r3, #2
 811d884:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 811d886:	7cbb      	ldrb	r3, [r7, #18]
 811d888:	2b13      	cmp	r3, #19
 811d88a:	f240 83b1 	bls.w	811dff0 <tcp_input+0x7d8>
 811d88e:	7cbb      	ldrb	r3, [r7, #18]
 811d890:	b29a      	uxth	r2, r3
 811d892:	687b      	ldr	r3, [r7, #4]
 811d894:	891b      	ldrh	r3, [r3, #8]
 811d896:	429a      	cmp	r2, r3
 811d898:	f200 83aa 	bhi.w	811dff0 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 811d89c:	7cbb      	ldrb	r3, [r7, #18]
 811d89e:	b29b      	uxth	r3, r3
 811d8a0:	3b14      	subs	r3, #20
 811d8a2:	b29a      	uxth	r2, r3
 811d8a4:	4b81      	ldr	r3, [pc, #516]	@ (811daac <tcp_input+0x294>)
 811d8a6:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 811d8a8:	4b81      	ldr	r3, [pc, #516]	@ (811dab0 <tcp_input+0x298>)
 811d8aa:	2200      	movs	r2, #0
 811d8ac:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 811d8ae:	687b      	ldr	r3, [r7, #4]
 811d8b0:	895a      	ldrh	r2, [r3, #10]
 811d8b2:	7cbb      	ldrb	r3, [r7, #18]
 811d8b4:	b29b      	uxth	r3, r3
 811d8b6:	429a      	cmp	r2, r3
 811d8b8:	d309      	bcc.n	811d8ce <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 811d8ba:	4b7c      	ldr	r3, [pc, #496]	@ (811daac <tcp_input+0x294>)
 811d8bc:	881a      	ldrh	r2, [r3, #0]
 811d8be:	4b7d      	ldr	r3, [pc, #500]	@ (811dab4 <tcp_input+0x29c>)
 811d8c0:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 811d8c2:	7cbb      	ldrb	r3, [r7, #18]
 811d8c4:	4619      	mov	r1, r3
 811d8c6:	6878      	ldr	r0, [r7, #4]
 811d8c8:	f7fd fd82 	bl	811b3d0 <pbuf_remove_header>
 811d8cc:	e04e      	b.n	811d96c <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 811d8ce:	687b      	ldr	r3, [r7, #4]
 811d8d0:	681b      	ldr	r3, [r3, #0]
 811d8d2:	2b00      	cmp	r3, #0
 811d8d4:	d105      	bne.n	811d8e2 <tcp_input+0xca>
 811d8d6:	4b70      	ldr	r3, [pc, #448]	@ (811da98 <tcp_input+0x280>)
 811d8d8:	22c2      	movs	r2, #194	@ 0xc2
 811d8da:	4977      	ldr	r1, [pc, #476]	@ (811dab8 <tcp_input+0x2a0>)
 811d8dc:	4870      	ldr	r0, [pc, #448]	@ (811daa0 <tcp_input+0x288>)
 811d8de:	f006 f99d 	bl	8123c1c <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 811d8e2:	2114      	movs	r1, #20
 811d8e4:	6878      	ldr	r0, [r7, #4]
 811d8e6:	f7fd fd73 	bl	811b3d0 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 811d8ea:	687b      	ldr	r3, [r7, #4]
 811d8ec:	895a      	ldrh	r2, [r3, #10]
 811d8ee:	4b71      	ldr	r3, [pc, #452]	@ (811dab4 <tcp_input+0x29c>)
 811d8f0:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 811d8f2:	4b6e      	ldr	r3, [pc, #440]	@ (811daac <tcp_input+0x294>)
 811d8f4:	881a      	ldrh	r2, [r3, #0]
 811d8f6:	4b6f      	ldr	r3, [pc, #444]	@ (811dab4 <tcp_input+0x29c>)
 811d8f8:	881b      	ldrh	r3, [r3, #0]
 811d8fa:	1ad3      	subs	r3, r2, r3
 811d8fc:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 811d8fe:	4b6d      	ldr	r3, [pc, #436]	@ (811dab4 <tcp_input+0x29c>)
 811d900:	881b      	ldrh	r3, [r3, #0]
 811d902:	4619      	mov	r1, r3
 811d904:	6878      	ldr	r0, [r7, #4]
 811d906:	f7fd fd63 	bl	811b3d0 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 811d90a:	687b      	ldr	r3, [r7, #4]
 811d90c:	681b      	ldr	r3, [r3, #0]
 811d90e:	895b      	ldrh	r3, [r3, #10]
 811d910:	8a3a      	ldrh	r2, [r7, #16]
 811d912:	429a      	cmp	r2, r3
 811d914:	f200 836e 	bhi.w	811dff4 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 811d918:	687b      	ldr	r3, [r7, #4]
 811d91a:	681b      	ldr	r3, [r3, #0]
 811d91c:	685b      	ldr	r3, [r3, #4]
 811d91e:	4a64      	ldr	r2, [pc, #400]	@ (811dab0 <tcp_input+0x298>)
 811d920:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 811d922:	687b      	ldr	r3, [r7, #4]
 811d924:	681b      	ldr	r3, [r3, #0]
 811d926:	8a3a      	ldrh	r2, [r7, #16]
 811d928:	4611      	mov	r1, r2
 811d92a:	4618      	mov	r0, r3
 811d92c:	f7fd fd50 	bl	811b3d0 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 811d930:	687b      	ldr	r3, [r7, #4]
 811d932:	891a      	ldrh	r2, [r3, #8]
 811d934:	8a3b      	ldrh	r3, [r7, #16]
 811d936:	1ad3      	subs	r3, r2, r3
 811d938:	b29a      	uxth	r2, r3
 811d93a:	687b      	ldr	r3, [r7, #4]
 811d93c:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 811d93e:	687b      	ldr	r3, [r7, #4]
 811d940:	895b      	ldrh	r3, [r3, #10]
 811d942:	2b00      	cmp	r3, #0
 811d944:	d005      	beq.n	811d952 <tcp_input+0x13a>
 811d946:	4b54      	ldr	r3, [pc, #336]	@ (811da98 <tcp_input+0x280>)
 811d948:	22df      	movs	r2, #223	@ 0xdf
 811d94a:	495c      	ldr	r1, [pc, #368]	@ (811dabc <tcp_input+0x2a4>)
 811d94c:	4854      	ldr	r0, [pc, #336]	@ (811daa0 <tcp_input+0x288>)
 811d94e:	f006 f965 	bl	8123c1c <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 811d952:	687b      	ldr	r3, [r7, #4]
 811d954:	891a      	ldrh	r2, [r3, #8]
 811d956:	687b      	ldr	r3, [r7, #4]
 811d958:	681b      	ldr	r3, [r3, #0]
 811d95a:	891b      	ldrh	r3, [r3, #8]
 811d95c:	429a      	cmp	r2, r3
 811d95e:	d005      	beq.n	811d96c <tcp_input+0x154>
 811d960:	4b4d      	ldr	r3, [pc, #308]	@ (811da98 <tcp_input+0x280>)
 811d962:	22e0      	movs	r2, #224	@ 0xe0
 811d964:	4956      	ldr	r1, [pc, #344]	@ (811dac0 <tcp_input+0x2a8>)
 811d966:	484e      	ldr	r0, [pc, #312]	@ (811daa0 <tcp_input+0x288>)
 811d968:	f006 f958 	bl	8123c1c <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 811d96c:	4b4d      	ldr	r3, [pc, #308]	@ (811daa4 <tcp_input+0x28c>)
 811d96e:	681b      	ldr	r3, [r3, #0]
 811d970:	881b      	ldrh	r3, [r3, #0]
 811d972:	b29b      	uxth	r3, r3
 811d974:	4a4b      	ldr	r2, [pc, #300]	@ (811daa4 <tcp_input+0x28c>)
 811d976:	6814      	ldr	r4, [r2, #0]
 811d978:	4618      	mov	r0, r3
 811d97a:	f7f9 fba7 	bl	81170cc <lwip_htons>
 811d97e:	4603      	mov	r3, r0
 811d980:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 811d982:	4b48      	ldr	r3, [pc, #288]	@ (811daa4 <tcp_input+0x28c>)
 811d984:	681b      	ldr	r3, [r3, #0]
 811d986:	885b      	ldrh	r3, [r3, #2]
 811d988:	b29b      	uxth	r3, r3
 811d98a:	4a46      	ldr	r2, [pc, #280]	@ (811daa4 <tcp_input+0x28c>)
 811d98c:	6814      	ldr	r4, [r2, #0]
 811d98e:	4618      	mov	r0, r3
 811d990:	f7f9 fb9c 	bl	81170cc <lwip_htons>
 811d994:	4603      	mov	r3, r0
 811d996:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 811d998:	4b42      	ldr	r3, [pc, #264]	@ (811daa4 <tcp_input+0x28c>)
 811d99a:	681b      	ldr	r3, [r3, #0]
 811d99c:	685b      	ldr	r3, [r3, #4]
 811d99e:	4a41      	ldr	r2, [pc, #260]	@ (811daa4 <tcp_input+0x28c>)
 811d9a0:	6814      	ldr	r4, [r2, #0]
 811d9a2:	4618      	mov	r0, r3
 811d9a4:	f7f9 fba7 	bl	81170f6 <lwip_htonl>
 811d9a8:	4603      	mov	r3, r0
 811d9aa:	6063      	str	r3, [r4, #4]
 811d9ac:	6863      	ldr	r3, [r4, #4]
 811d9ae:	4a45      	ldr	r2, [pc, #276]	@ (811dac4 <tcp_input+0x2ac>)
 811d9b0:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 811d9b2:	4b3c      	ldr	r3, [pc, #240]	@ (811daa4 <tcp_input+0x28c>)
 811d9b4:	681b      	ldr	r3, [r3, #0]
 811d9b6:	689b      	ldr	r3, [r3, #8]
 811d9b8:	4a3a      	ldr	r2, [pc, #232]	@ (811daa4 <tcp_input+0x28c>)
 811d9ba:	6814      	ldr	r4, [r2, #0]
 811d9bc:	4618      	mov	r0, r3
 811d9be:	f7f9 fb9a 	bl	81170f6 <lwip_htonl>
 811d9c2:	4603      	mov	r3, r0
 811d9c4:	60a3      	str	r3, [r4, #8]
 811d9c6:	68a3      	ldr	r3, [r4, #8]
 811d9c8:	4a3f      	ldr	r2, [pc, #252]	@ (811dac8 <tcp_input+0x2b0>)
 811d9ca:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 811d9cc:	4b35      	ldr	r3, [pc, #212]	@ (811daa4 <tcp_input+0x28c>)
 811d9ce:	681b      	ldr	r3, [r3, #0]
 811d9d0:	89db      	ldrh	r3, [r3, #14]
 811d9d2:	b29b      	uxth	r3, r3
 811d9d4:	4a33      	ldr	r2, [pc, #204]	@ (811daa4 <tcp_input+0x28c>)
 811d9d6:	6814      	ldr	r4, [r2, #0]
 811d9d8:	4618      	mov	r0, r3
 811d9da:	f7f9 fb77 	bl	81170cc <lwip_htons>
 811d9de:	4603      	mov	r3, r0
 811d9e0:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 811d9e2:	4b30      	ldr	r3, [pc, #192]	@ (811daa4 <tcp_input+0x28c>)
 811d9e4:	681b      	ldr	r3, [r3, #0]
 811d9e6:	899b      	ldrh	r3, [r3, #12]
 811d9e8:	b29b      	uxth	r3, r3
 811d9ea:	4618      	mov	r0, r3
 811d9ec:	f7f9 fb6e 	bl	81170cc <lwip_htons>
 811d9f0:	4603      	mov	r3, r0
 811d9f2:	b2db      	uxtb	r3, r3
 811d9f4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 811d9f8:	b2da      	uxtb	r2, r3
 811d9fa:	4b34      	ldr	r3, [pc, #208]	@ (811dacc <tcp_input+0x2b4>)
 811d9fc:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 811d9fe:	687b      	ldr	r3, [r7, #4]
 811da00:	891a      	ldrh	r2, [r3, #8]
 811da02:	4b33      	ldr	r3, [pc, #204]	@ (811dad0 <tcp_input+0x2b8>)
 811da04:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 811da06:	4b31      	ldr	r3, [pc, #196]	@ (811dacc <tcp_input+0x2b4>)
 811da08:	781b      	ldrb	r3, [r3, #0]
 811da0a:	f003 0303 	and.w	r3, r3, #3
 811da0e:	2b00      	cmp	r3, #0
 811da10:	d00c      	beq.n	811da2c <tcp_input+0x214>
    tcplen++;
 811da12:	4b2f      	ldr	r3, [pc, #188]	@ (811dad0 <tcp_input+0x2b8>)
 811da14:	881b      	ldrh	r3, [r3, #0]
 811da16:	3301      	adds	r3, #1
 811da18:	b29a      	uxth	r2, r3
 811da1a:	4b2d      	ldr	r3, [pc, #180]	@ (811dad0 <tcp_input+0x2b8>)
 811da1c:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 811da1e:	687b      	ldr	r3, [r7, #4]
 811da20:	891a      	ldrh	r2, [r3, #8]
 811da22:	4b2b      	ldr	r3, [pc, #172]	@ (811dad0 <tcp_input+0x2b8>)
 811da24:	881b      	ldrh	r3, [r3, #0]
 811da26:	429a      	cmp	r2, r3
 811da28:	f200 82e6 	bhi.w	811dff8 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 811da2c:	2300      	movs	r3, #0
 811da2e:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 811da30:	4b28      	ldr	r3, [pc, #160]	@ (811dad4 <tcp_input+0x2bc>)
 811da32:	681b      	ldr	r3, [r3, #0]
 811da34:	61fb      	str	r3, [r7, #28]
 811da36:	e09d      	b.n	811db74 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 811da38:	69fb      	ldr	r3, [r7, #28]
 811da3a:	7d1b      	ldrb	r3, [r3, #20]
 811da3c:	2b00      	cmp	r3, #0
 811da3e:	d105      	bne.n	811da4c <tcp_input+0x234>
 811da40:	4b15      	ldr	r3, [pc, #84]	@ (811da98 <tcp_input+0x280>)
 811da42:	22fb      	movs	r2, #251	@ 0xfb
 811da44:	4924      	ldr	r1, [pc, #144]	@ (811dad8 <tcp_input+0x2c0>)
 811da46:	4816      	ldr	r0, [pc, #88]	@ (811daa0 <tcp_input+0x288>)
 811da48:	f006 f8e8 	bl	8123c1c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 811da4c:	69fb      	ldr	r3, [r7, #28]
 811da4e:	7d1b      	ldrb	r3, [r3, #20]
 811da50:	2b0a      	cmp	r3, #10
 811da52:	d105      	bne.n	811da60 <tcp_input+0x248>
 811da54:	4b10      	ldr	r3, [pc, #64]	@ (811da98 <tcp_input+0x280>)
 811da56:	22fc      	movs	r2, #252	@ 0xfc
 811da58:	4920      	ldr	r1, [pc, #128]	@ (811dadc <tcp_input+0x2c4>)
 811da5a:	4811      	ldr	r0, [pc, #68]	@ (811daa0 <tcp_input+0x288>)
 811da5c:	f006 f8de 	bl	8123c1c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 811da60:	69fb      	ldr	r3, [r7, #28]
 811da62:	7d1b      	ldrb	r3, [r3, #20]
 811da64:	2b01      	cmp	r3, #1
 811da66:	d105      	bne.n	811da74 <tcp_input+0x25c>
 811da68:	4b0b      	ldr	r3, [pc, #44]	@ (811da98 <tcp_input+0x280>)
 811da6a:	22fd      	movs	r2, #253	@ 0xfd
 811da6c:	491c      	ldr	r1, [pc, #112]	@ (811dae0 <tcp_input+0x2c8>)
 811da6e:	480c      	ldr	r0, [pc, #48]	@ (811daa0 <tcp_input+0x288>)
 811da70:	f006 f8d4 	bl	8123c1c <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 811da74:	69fb      	ldr	r3, [r7, #28]
 811da76:	7a1b      	ldrb	r3, [r3, #8]
 811da78:	2b00      	cmp	r3, #0
 811da7a:	d033      	beq.n	811dae4 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 811da7c:	69fb      	ldr	r3, [r7, #28]
 811da7e:	7a1a      	ldrb	r2, [r3, #8]
 811da80:	4b09      	ldr	r3, [pc, #36]	@ (811daa8 <tcp_input+0x290>)
 811da82:	685b      	ldr	r3, [r3, #4]
 811da84:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 811da88:	3301      	adds	r3, #1
 811da8a:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 811da8c:	429a      	cmp	r2, r3
 811da8e:	d029      	beq.n	811dae4 <tcp_input+0x2cc>
      prev = pcb;
 811da90:	69fb      	ldr	r3, [r7, #28]
 811da92:	61bb      	str	r3, [r7, #24]
      continue;
 811da94:	e06b      	b.n	811db6e <tcp_input+0x356>
 811da96:	bf00      	nop
 811da98:	08127024 	.word	0x08127024
 811da9c:	08127098 	.word	0x08127098
 811daa0:	081270b0 	.word	0x081270b0
 811daa4:	1000e4c0 	.word	0x1000e4c0
 811daa8:	1000b300 	.word	0x1000b300
 811daac:	1000e4c4 	.word	0x1000e4c4
 811dab0:	1000e4c8 	.word	0x1000e4c8
 811dab4:	1000e4c6 	.word	0x1000e4c6
 811dab8:	081270d8 	.word	0x081270d8
 811dabc:	081270e8 	.word	0x081270e8
 811dac0:	081270f4 	.word	0x081270f4
 811dac4:	1000e4d0 	.word	0x1000e4d0
 811dac8:	1000e4d4 	.word	0x1000e4d4
 811dacc:	1000e4dc 	.word	0x1000e4dc
 811dad0:	1000e4da 	.word	0x1000e4da
 811dad4:	1000e4a4 	.word	0x1000e4a4
 811dad8:	08127114 	.word	0x08127114
 811dadc:	0812713c 	.word	0x0812713c
 811dae0:	08127168 	.word	0x08127168
    }

    if (pcb->remote_port == tcphdr->src &&
 811dae4:	69fb      	ldr	r3, [r7, #28]
 811dae6:	8b1a      	ldrh	r2, [r3, #24]
 811dae8:	4b72      	ldr	r3, [pc, #456]	@ (811dcb4 <tcp_input+0x49c>)
 811daea:	681b      	ldr	r3, [r3, #0]
 811daec:	881b      	ldrh	r3, [r3, #0]
 811daee:	b29b      	uxth	r3, r3
 811daf0:	429a      	cmp	r2, r3
 811daf2:	d13a      	bne.n	811db6a <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 811daf4:	69fb      	ldr	r3, [r7, #28]
 811daf6:	8ada      	ldrh	r2, [r3, #22]
 811daf8:	4b6e      	ldr	r3, [pc, #440]	@ (811dcb4 <tcp_input+0x49c>)
 811dafa:	681b      	ldr	r3, [r3, #0]
 811dafc:	885b      	ldrh	r3, [r3, #2]
 811dafe:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 811db00:	429a      	cmp	r2, r3
 811db02:	d132      	bne.n	811db6a <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 811db04:	69fb      	ldr	r3, [r7, #28]
 811db06:	685a      	ldr	r2, [r3, #4]
 811db08:	4b6b      	ldr	r3, [pc, #428]	@ (811dcb8 <tcp_input+0x4a0>)
 811db0a:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 811db0c:	429a      	cmp	r2, r3
 811db0e:	d12c      	bne.n	811db6a <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 811db10:	69fb      	ldr	r3, [r7, #28]
 811db12:	681a      	ldr	r2, [r3, #0]
 811db14:	4b68      	ldr	r3, [pc, #416]	@ (811dcb8 <tcp_input+0x4a0>)
 811db16:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 811db18:	429a      	cmp	r2, r3
 811db1a:	d126      	bne.n	811db6a <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 811db1c:	69fb      	ldr	r3, [r7, #28]
 811db1e:	68db      	ldr	r3, [r3, #12]
 811db20:	69fa      	ldr	r2, [r7, #28]
 811db22:	429a      	cmp	r2, r3
 811db24:	d106      	bne.n	811db34 <tcp_input+0x31c>
 811db26:	4b65      	ldr	r3, [pc, #404]	@ (811dcbc <tcp_input+0x4a4>)
 811db28:	f240 120d 	movw	r2, #269	@ 0x10d
 811db2c:	4964      	ldr	r1, [pc, #400]	@ (811dcc0 <tcp_input+0x4a8>)
 811db2e:	4865      	ldr	r0, [pc, #404]	@ (811dcc4 <tcp_input+0x4ac>)
 811db30:	f006 f874 	bl	8123c1c <iprintf>
      if (prev != NULL) {
 811db34:	69bb      	ldr	r3, [r7, #24]
 811db36:	2b00      	cmp	r3, #0
 811db38:	d00a      	beq.n	811db50 <tcp_input+0x338>
        prev->next = pcb->next;
 811db3a:	69fb      	ldr	r3, [r7, #28]
 811db3c:	68da      	ldr	r2, [r3, #12]
 811db3e:	69bb      	ldr	r3, [r7, #24]
 811db40:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 811db42:	4b61      	ldr	r3, [pc, #388]	@ (811dcc8 <tcp_input+0x4b0>)
 811db44:	681a      	ldr	r2, [r3, #0]
 811db46:	69fb      	ldr	r3, [r7, #28]
 811db48:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 811db4a:	4a5f      	ldr	r2, [pc, #380]	@ (811dcc8 <tcp_input+0x4b0>)
 811db4c:	69fb      	ldr	r3, [r7, #28]
 811db4e:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 811db50:	69fb      	ldr	r3, [r7, #28]
 811db52:	68db      	ldr	r3, [r3, #12]
 811db54:	69fa      	ldr	r2, [r7, #28]
 811db56:	429a      	cmp	r2, r3
 811db58:	d111      	bne.n	811db7e <tcp_input+0x366>
 811db5a:	4b58      	ldr	r3, [pc, #352]	@ (811dcbc <tcp_input+0x4a4>)
 811db5c:	f240 1215 	movw	r2, #277	@ 0x115
 811db60:	495a      	ldr	r1, [pc, #360]	@ (811dccc <tcp_input+0x4b4>)
 811db62:	4858      	ldr	r0, [pc, #352]	@ (811dcc4 <tcp_input+0x4ac>)
 811db64:	f006 f85a 	bl	8123c1c <iprintf>
      break;
 811db68:	e009      	b.n	811db7e <tcp_input+0x366>
    }
    prev = pcb;
 811db6a:	69fb      	ldr	r3, [r7, #28]
 811db6c:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 811db6e:	69fb      	ldr	r3, [r7, #28]
 811db70:	68db      	ldr	r3, [r3, #12]
 811db72:	61fb      	str	r3, [r7, #28]
 811db74:	69fb      	ldr	r3, [r7, #28]
 811db76:	2b00      	cmp	r3, #0
 811db78:	f47f af5e 	bne.w	811da38 <tcp_input+0x220>
 811db7c:	e000      	b.n	811db80 <tcp_input+0x368>
      break;
 811db7e:	bf00      	nop
  }

  if (pcb == NULL) {
 811db80:	69fb      	ldr	r3, [r7, #28]
 811db82:	2b00      	cmp	r3, #0
 811db84:	f040 80aa 	bne.w	811dcdc <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 811db88:	4b51      	ldr	r3, [pc, #324]	@ (811dcd0 <tcp_input+0x4b8>)
 811db8a:	681b      	ldr	r3, [r3, #0]
 811db8c:	61fb      	str	r3, [r7, #28]
 811db8e:	e03f      	b.n	811dc10 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 811db90:	69fb      	ldr	r3, [r7, #28]
 811db92:	7d1b      	ldrb	r3, [r3, #20]
 811db94:	2b0a      	cmp	r3, #10
 811db96:	d006      	beq.n	811dba6 <tcp_input+0x38e>
 811db98:	4b48      	ldr	r3, [pc, #288]	@ (811dcbc <tcp_input+0x4a4>)
 811db9a:	f240 121f 	movw	r2, #287	@ 0x11f
 811db9e:	494d      	ldr	r1, [pc, #308]	@ (811dcd4 <tcp_input+0x4bc>)
 811dba0:	4848      	ldr	r0, [pc, #288]	@ (811dcc4 <tcp_input+0x4ac>)
 811dba2:	f006 f83b 	bl	8123c1c <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 811dba6:	69fb      	ldr	r3, [r7, #28]
 811dba8:	7a1b      	ldrb	r3, [r3, #8]
 811dbaa:	2b00      	cmp	r3, #0
 811dbac:	d009      	beq.n	811dbc2 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 811dbae:	69fb      	ldr	r3, [r7, #28]
 811dbb0:	7a1a      	ldrb	r2, [r3, #8]
 811dbb2:	4b41      	ldr	r3, [pc, #260]	@ (811dcb8 <tcp_input+0x4a0>)
 811dbb4:	685b      	ldr	r3, [r3, #4]
 811dbb6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 811dbba:	3301      	adds	r3, #1
 811dbbc:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 811dbbe:	429a      	cmp	r2, r3
 811dbc0:	d122      	bne.n	811dc08 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 811dbc2:	69fb      	ldr	r3, [r7, #28]
 811dbc4:	8b1a      	ldrh	r2, [r3, #24]
 811dbc6:	4b3b      	ldr	r3, [pc, #236]	@ (811dcb4 <tcp_input+0x49c>)
 811dbc8:	681b      	ldr	r3, [r3, #0]
 811dbca:	881b      	ldrh	r3, [r3, #0]
 811dbcc:	b29b      	uxth	r3, r3
 811dbce:	429a      	cmp	r2, r3
 811dbd0:	d11b      	bne.n	811dc0a <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 811dbd2:	69fb      	ldr	r3, [r7, #28]
 811dbd4:	8ada      	ldrh	r2, [r3, #22]
 811dbd6:	4b37      	ldr	r3, [pc, #220]	@ (811dcb4 <tcp_input+0x49c>)
 811dbd8:	681b      	ldr	r3, [r3, #0]
 811dbda:	885b      	ldrh	r3, [r3, #2]
 811dbdc:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 811dbde:	429a      	cmp	r2, r3
 811dbe0:	d113      	bne.n	811dc0a <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 811dbe2:	69fb      	ldr	r3, [r7, #28]
 811dbe4:	685a      	ldr	r2, [r3, #4]
 811dbe6:	4b34      	ldr	r3, [pc, #208]	@ (811dcb8 <tcp_input+0x4a0>)
 811dbe8:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 811dbea:	429a      	cmp	r2, r3
 811dbec:	d10d      	bne.n	811dc0a <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 811dbee:	69fb      	ldr	r3, [r7, #28]
 811dbf0:	681a      	ldr	r2, [r3, #0]
 811dbf2:	4b31      	ldr	r3, [pc, #196]	@ (811dcb8 <tcp_input+0x4a0>)
 811dbf4:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 811dbf6:	429a      	cmp	r2, r3
 811dbf8:	d107      	bne.n	811dc0a <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 811dbfa:	69f8      	ldr	r0, [r7, #28]
 811dbfc:	f000 fb56 	bl	811e2ac <tcp_timewait_input>
        }
        pbuf_free(p);
 811dc00:	6878      	ldr	r0, [r7, #4]
 811dc02:	f7fd fc6b 	bl	811b4dc <pbuf_free>
        return;
 811dc06:	e1fd      	b.n	811e004 <tcp_input+0x7ec>
        continue;
 811dc08:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 811dc0a:	69fb      	ldr	r3, [r7, #28]
 811dc0c:	68db      	ldr	r3, [r3, #12]
 811dc0e:	61fb      	str	r3, [r7, #28]
 811dc10:	69fb      	ldr	r3, [r7, #28]
 811dc12:	2b00      	cmp	r3, #0
 811dc14:	d1bc      	bne.n	811db90 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 811dc16:	2300      	movs	r3, #0
 811dc18:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 811dc1a:	4b2f      	ldr	r3, [pc, #188]	@ (811dcd8 <tcp_input+0x4c0>)
 811dc1c:	681b      	ldr	r3, [r3, #0]
 811dc1e:	617b      	str	r3, [r7, #20]
 811dc20:	e02a      	b.n	811dc78 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 811dc22:	697b      	ldr	r3, [r7, #20]
 811dc24:	7a1b      	ldrb	r3, [r3, #8]
 811dc26:	2b00      	cmp	r3, #0
 811dc28:	d00c      	beq.n	811dc44 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 811dc2a:	697b      	ldr	r3, [r7, #20]
 811dc2c:	7a1a      	ldrb	r2, [r3, #8]
 811dc2e:	4b22      	ldr	r3, [pc, #136]	@ (811dcb8 <tcp_input+0x4a0>)
 811dc30:	685b      	ldr	r3, [r3, #4]
 811dc32:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 811dc36:	3301      	adds	r3, #1
 811dc38:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 811dc3a:	429a      	cmp	r2, r3
 811dc3c:	d002      	beq.n	811dc44 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 811dc3e:	697b      	ldr	r3, [r7, #20]
 811dc40:	61bb      	str	r3, [r7, #24]
        continue;
 811dc42:	e016      	b.n	811dc72 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 811dc44:	697b      	ldr	r3, [r7, #20]
 811dc46:	8ada      	ldrh	r2, [r3, #22]
 811dc48:	4b1a      	ldr	r3, [pc, #104]	@ (811dcb4 <tcp_input+0x49c>)
 811dc4a:	681b      	ldr	r3, [r3, #0]
 811dc4c:	885b      	ldrh	r3, [r3, #2]
 811dc4e:	b29b      	uxth	r3, r3
 811dc50:	429a      	cmp	r2, r3
 811dc52:	d10c      	bne.n	811dc6e <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 811dc54:	697b      	ldr	r3, [r7, #20]
 811dc56:	681a      	ldr	r2, [r3, #0]
 811dc58:	4b17      	ldr	r3, [pc, #92]	@ (811dcb8 <tcp_input+0x4a0>)
 811dc5a:	695b      	ldr	r3, [r3, #20]
 811dc5c:	429a      	cmp	r2, r3
 811dc5e:	d00f      	beq.n	811dc80 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 811dc60:	697b      	ldr	r3, [r7, #20]
 811dc62:	2b00      	cmp	r3, #0
 811dc64:	d00d      	beq.n	811dc82 <tcp_input+0x46a>
 811dc66:	697b      	ldr	r3, [r7, #20]
 811dc68:	681b      	ldr	r3, [r3, #0]
 811dc6a:	2b00      	cmp	r3, #0
 811dc6c:	d009      	beq.n	811dc82 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 811dc6e:	697b      	ldr	r3, [r7, #20]
 811dc70:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 811dc72:	697b      	ldr	r3, [r7, #20]
 811dc74:	68db      	ldr	r3, [r3, #12]
 811dc76:	617b      	str	r3, [r7, #20]
 811dc78:	697b      	ldr	r3, [r7, #20]
 811dc7a:	2b00      	cmp	r3, #0
 811dc7c:	d1d1      	bne.n	811dc22 <tcp_input+0x40a>
 811dc7e:	e000      	b.n	811dc82 <tcp_input+0x46a>
            break;
 811dc80:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 811dc82:	697b      	ldr	r3, [r7, #20]
 811dc84:	2b00      	cmp	r3, #0
 811dc86:	d029      	beq.n	811dcdc <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 811dc88:	69bb      	ldr	r3, [r7, #24]
 811dc8a:	2b00      	cmp	r3, #0
 811dc8c:	d00a      	beq.n	811dca4 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 811dc8e:	697b      	ldr	r3, [r7, #20]
 811dc90:	68da      	ldr	r2, [r3, #12]
 811dc92:	69bb      	ldr	r3, [r7, #24]
 811dc94:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 811dc96:	4b10      	ldr	r3, [pc, #64]	@ (811dcd8 <tcp_input+0x4c0>)
 811dc98:	681a      	ldr	r2, [r3, #0]
 811dc9a:	697b      	ldr	r3, [r7, #20]
 811dc9c:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 811dc9e:	4a0e      	ldr	r2, [pc, #56]	@ (811dcd8 <tcp_input+0x4c0>)
 811dca0:	697b      	ldr	r3, [r7, #20]
 811dca2:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 811dca4:	6978      	ldr	r0, [r7, #20]
 811dca6:	f000 fa03 	bl	811e0b0 <tcp_listen_input>
      }
      pbuf_free(p);
 811dcaa:	6878      	ldr	r0, [r7, #4]
 811dcac:	f7fd fc16 	bl	811b4dc <pbuf_free>
      return;
 811dcb0:	e1a8      	b.n	811e004 <tcp_input+0x7ec>
 811dcb2:	bf00      	nop
 811dcb4:	1000e4c0 	.word	0x1000e4c0
 811dcb8:	1000b300 	.word	0x1000b300
 811dcbc:	08127024 	.word	0x08127024
 811dcc0:	08127190 	.word	0x08127190
 811dcc4:	081270b0 	.word	0x081270b0
 811dcc8:	1000e4a4 	.word	0x1000e4a4
 811dccc:	081271bc 	.word	0x081271bc
 811dcd0:	1000e4a8 	.word	0x1000e4a8
 811dcd4:	081271e8 	.word	0x081271e8
 811dcd8:	1000e4a0 	.word	0x1000e4a0
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 811dcdc:	69fb      	ldr	r3, [r7, #28]
 811dcde:	2b00      	cmp	r3, #0
 811dce0:	f000 8158 	beq.w	811df94 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 811dce4:	4b95      	ldr	r3, [pc, #596]	@ (811df3c <tcp_input+0x724>)
 811dce6:	2200      	movs	r2, #0
 811dce8:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 811dcea:	687b      	ldr	r3, [r7, #4]
 811dcec:	891a      	ldrh	r2, [r3, #8]
 811dcee:	4b93      	ldr	r3, [pc, #588]	@ (811df3c <tcp_input+0x724>)
 811dcf0:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 811dcf2:	4a92      	ldr	r2, [pc, #584]	@ (811df3c <tcp_input+0x724>)
 811dcf4:	687b      	ldr	r3, [r7, #4]
 811dcf6:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 811dcf8:	4b91      	ldr	r3, [pc, #580]	@ (811df40 <tcp_input+0x728>)
 811dcfa:	681b      	ldr	r3, [r3, #0]
 811dcfc:	4a8f      	ldr	r2, [pc, #572]	@ (811df3c <tcp_input+0x724>)
 811dcfe:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 811dd00:	4b90      	ldr	r3, [pc, #576]	@ (811df44 <tcp_input+0x72c>)
 811dd02:	2200      	movs	r2, #0
 811dd04:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 811dd06:	4b90      	ldr	r3, [pc, #576]	@ (811df48 <tcp_input+0x730>)
 811dd08:	2200      	movs	r2, #0
 811dd0a:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 811dd0c:	4b8f      	ldr	r3, [pc, #572]	@ (811df4c <tcp_input+0x734>)
 811dd0e:	2200      	movs	r2, #0
 811dd10:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 811dd12:	4b8f      	ldr	r3, [pc, #572]	@ (811df50 <tcp_input+0x738>)
 811dd14:	781b      	ldrb	r3, [r3, #0]
 811dd16:	f003 0308 	and.w	r3, r3, #8
 811dd1a:	2b00      	cmp	r3, #0
 811dd1c:	d006      	beq.n	811dd2c <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 811dd1e:	687b      	ldr	r3, [r7, #4]
 811dd20:	7b5b      	ldrb	r3, [r3, #13]
 811dd22:	f043 0301 	orr.w	r3, r3, #1
 811dd26:	b2da      	uxtb	r2, r3
 811dd28:	687b      	ldr	r3, [r7, #4]
 811dd2a:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 811dd2c:	69fb      	ldr	r3, [r7, #28]
 811dd2e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 811dd30:	2b00      	cmp	r3, #0
 811dd32:	d017      	beq.n	811dd64 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 811dd34:	69f8      	ldr	r0, [r7, #28]
 811dd36:	f7ff f8c1 	bl	811cebc <tcp_process_refused_data>
 811dd3a:	4603      	mov	r3, r0
 811dd3c:	f113 0f0d 	cmn.w	r3, #13
 811dd40:	d007      	beq.n	811dd52 <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 811dd42:	69fb      	ldr	r3, [r7, #28]
 811dd44:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 811dd46:	2b00      	cmp	r3, #0
 811dd48:	d00c      	beq.n	811dd64 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 811dd4a:	4b82      	ldr	r3, [pc, #520]	@ (811df54 <tcp_input+0x73c>)
 811dd4c:	881b      	ldrh	r3, [r3, #0]
 811dd4e:	2b00      	cmp	r3, #0
 811dd50:	d008      	beq.n	811dd64 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 811dd52:	69fb      	ldr	r3, [r7, #28]
 811dd54:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 811dd56:	2b00      	cmp	r3, #0
 811dd58:	f040 80e3 	bne.w	811df22 <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 811dd5c:	69f8      	ldr	r0, [r7, #28]
 811dd5e:	f003 fdff 	bl	8121960 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 811dd62:	e0de      	b.n	811df22 <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 811dd64:	4a7c      	ldr	r2, [pc, #496]	@ (811df58 <tcp_input+0x740>)
 811dd66:	69fb      	ldr	r3, [r7, #28]
 811dd68:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 811dd6a:	69f8      	ldr	r0, [r7, #28]
 811dd6c:	f000 fb18 	bl	811e3a0 <tcp_process>
 811dd70:	4603      	mov	r3, r0
 811dd72:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 811dd74:	f997 3013 	ldrsb.w	r3, [r7, #19]
 811dd78:	f113 0f0d 	cmn.w	r3, #13
 811dd7c:	f000 80d3 	beq.w	811df26 <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 811dd80:	4b71      	ldr	r3, [pc, #452]	@ (811df48 <tcp_input+0x730>)
 811dd82:	781b      	ldrb	r3, [r3, #0]
 811dd84:	f003 0308 	and.w	r3, r3, #8
 811dd88:	2b00      	cmp	r3, #0
 811dd8a:	d015      	beq.n	811ddb8 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 811dd8c:	69fb      	ldr	r3, [r7, #28]
 811dd8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 811dd92:	2b00      	cmp	r3, #0
 811dd94:	d008      	beq.n	811dda8 <tcp_input+0x590>
 811dd96:	69fb      	ldr	r3, [r7, #28]
 811dd98:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 811dd9c:	69fa      	ldr	r2, [r7, #28]
 811dd9e:	6912      	ldr	r2, [r2, #16]
 811dda0:	f06f 010d 	mvn.w	r1, #13
 811dda4:	4610      	mov	r0, r2
 811dda6:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 811dda8:	69f9      	ldr	r1, [r7, #28]
 811ddaa:	486c      	ldr	r0, [pc, #432]	@ (811df5c <tcp_input+0x744>)
 811ddac:	f7ff fbbc 	bl	811d528 <tcp_pcb_remove>
        tcp_free(pcb);
 811ddb0:	69f8      	ldr	r0, [r7, #28]
 811ddb2:	f7fd ff41 	bl	811bc38 <tcp_free>
 811ddb6:	e0da      	b.n	811df6e <tcp_input+0x756>
      } else {
        err = ERR_OK;
 811ddb8:	2300      	movs	r3, #0
 811ddba:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 811ddbc:	4b63      	ldr	r3, [pc, #396]	@ (811df4c <tcp_input+0x734>)
 811ddbe:	881b      	ldrh	r3, [r3, #0]
 811ddc0:	2b00      	cmp	r3, #0
 811ddc2:	d01d      	beq.n	811de00 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 811ddc4:	4b61      	ldr	r3, [pc, #388]	@ (811df4c <tcp_input+0x734>)
 811ddc6:	881b      	ldrh	r3, [r3, #0]
 811ddc8:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 811ddca:	69fb      	ldr	r3, [r7, #28]
 811ddcc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 811ddd0:	2b00      	cmp	r3, #0
 811ddd2:	d00a      	beq.n	811ddea <tcp_input+0x5d2>
 811ddd4:	69fb      	ldr	r3, [r7, #28]
 811ddd6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 811ddda:	69fa      	ldr	r2, [r7, #28]
 811dddc:	6910      	ldr	r0, [r2, #16]
 811ddde:	89fa      	ldrh	r2, [r7, #14]
 811dde0:	69f9      	ldr	r1, [r7, #28]
 811dde2:	4798      	blx	r3
 811dde4:	4603      	mov	r3, r0
 811dde6:	74fb      	strb	r3, [r7, #19]
 811dde8:	e001      	b.n	811ddee <tcp_input+0x5d6>
 811ddea:	2300      	movs	r3, #0
 811ddec:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 811ddee:	f997 3013 	ldrsb.w	r3, [r7, #19]
 811ddf2:	f113 0f0d 	cmn.w	r3, #13
 811ddf6:	f000 8098 	beq.w	811df2a <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 811ddfa:	4b54      	ldr	r3, [pc, #336]	@ (811df4c <tcp_input+0x734>)
 811ddfc:	2200      	movs	r2, #0
 811ddfe:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 811de00:	69f8      	ldr	r0, [r7, #28]
 811de02:	f000 f915 	bl	811e030 <tcp_input_delayed_close>
 811de06:	4603      	mov	r3, r0
 811de08:	2b00      	cmp	r3, #0
 811de0a:	f040 8090 	bne.w	811df2e <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 811de0e:	4b4d      	ldr	r3, [pc, #308]	@ (811df44 <tcp_input+0x72c>)
 811de10:	681b      	ldr	r3, [r3, #0]
 811de12:	2b00      	cmp	r3, #0
 811de14:	d041      	beq.n	811de9a <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 811de16:	69fb      	ldr	r3, [r7, #28]
 811de18:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 811de1a:	2b00      	cmp	r3, #0
 811de1c:	d006      	beq.n	811de2c <tcp_input+0x614>
 811de1e:	4b50      	ldr	r3, [pc, #320]	@ (811df60 <tcp_input+0x748>)
 811de20:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 811de24:	494f      	ldr	r1, [pc, #316]	@ (811df64 <tcp_input+0x74c>)
 811de26:	4850      	ldr	r0, [pc, #320]	@ (811df68 <tcp_input+0x750>)
 811de28:	f005 fef8 	bl	8123c1c <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 811de2c:	69fb      	ldr	r3, [r7, #28]
 811de2e:	8b5b      	ldrh	r3, [r3, #26]
 811de30:	f003 0310 	and.w	r3, r3, #16
 811de34:	2b00      	cmp	r3, #0
 811de36:	d008      	beq.n	811de4a <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 811de38:	4b42      	ldr	r3, [pc, #264]	@ (811df44 <tcp_input+0x72c>)
 811de3a:	681b      	ldr	r3, [r3, #0]
 811de3c:	4618      	mov	r0, r3
 811de3e:	f7fd fb4d 	bl	811b4dc <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 811de42:	69f8      	ldr	r0, [r7, #28]
 811de44:	f7fe f9e0 	bl	811c208 <tcp_abort>
            goto aborted;
 811de48:	e091      	b.n	811df6e <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 811de4a:	69fb      	ldr	r3, [r7, #28]
 811de4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 811de50:	2b00      	cmp	r3, #0
 811de52:	d00c      	beq.n	811de6e <tcp_input+0x656>
 811de54:	69fb      	ldr	r3, [r7, #28]
 811de56:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 811de5a:	69fb      	ldr	r3, [r7, #28]
 811de5c:	6918      	ldr	r0, [r3, #16]
 811de5e:	4b39      	ldr	r3, [pc, #228]	@ (811df44 <tcp_input+0x72c>)
 811de60:	681a      	ldr	r2, [r3, #0]
 811de62:	2300      	movs	r3, #0
 811de64:	69f9      	ldr	r1, [r7, #28]
 811de66:	47a0      	blx	r4
 811de68:	4603      	mov	r3, r0
 811de6a:	74fb      	strb	r3, [r7, #19]
 811de6c:	e008      	b.n	811de80 <tcp_input+0x668>
 811de6e:	4b35      	ldr	r3, [pc, #212]	@ (811df44 <tcp_input+0x72c>)
 811de70:	681a      	ldr	r2, [r3, #0]
 811de72:	2300      	movs	r3, #0
 811de74:	69f9      	ldr	r1, [r7, #28]
 811de76:	2000      	movs	r0, #0
 811de78:	f7ff f8f6 	bl	811d068 <tcp_recv_null>
 811de7c:	4603      	mov	r3, r0
 811de7e:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 811de80:	f997 3013 	ldrsb.w	r3, [r7, #19]
 811de84:	f113 0f0d 	cmn.w	r3, #13
 811de88:	d053      	beq.n	811df32 <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 811de8a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 811de8e:	2b00      	cmp	r3, #0
 811de90:	d003      	beq.n	811de9a <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 811de92:	4b2c      	ldr	r3, [pc, #176]	@ (811df44 <tcp_input+0x72c>)
 811de94:	681a      	ldr	r2, [r3, #0]
 811de96:	69fb      	ldr	r3, [r7, #28]
 811de98:	679a      	str	r2, [r3, #120]	@ 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 811de9a:	4b2b      	ldr	r3, [pc, #172]	@ (811df48 <tcp_input+0x730>)
 811de9c:	781b      	ldrb	r3, [r3, #0]
 811de9e:	f003 0320 	and.w	r3, r3, #32
 811dea2:	2b00      	cmp	r3, #0
 811dea4:	d030      	beq.n	811df08 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 811dea6:	69fb      	ldr	r3, [r7, #28]
 811dea8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 811deaa:	2b00      	cmp	r3, #0
 811deac:	d009      	beq.n	811dec2 <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 811deae:	69fb      	ldr	r3, [r7, #28]
 811deb0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 811deb2:	7b5a      	ldrb	r2, [r3, #13]
 811deb4:	69fb      	ldr	r3, [r7, #28]
 811deb6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 811deb8:	f042 0220 	orr.w	r2, r2, #32
 811debc:	b2d2      	uxtb	r2, r2
 811debe:	735a      	strb	r2, [r3, #13]
 811dec0:	e022      	b.n	811df08 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 811dec2:	69fb      	ldr	r3, [r7, #28]
 811dec4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 811dec6:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 811deca:	d005      	beq.n	811ded8 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 811decc:	69fb      	ldr	r3, [r7, #28]
 811dece:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 811ded0:	3301      	adds	r3, #1
 811ded2:	b29a      	uxth	r2, r3
 811ded4:	69fb      	ldr	r3, [r7, #28]
 811ded6:	851a      	strh	r2, [r3, #40]	@ 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 811ded8:	69fb      	ldr	r3, [r7, #28]
 811deda:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 811dede:	2b00      	cmp	r3, #0
 811dee0:	d00b      	beq.n	811defa <tcp_input+0x6e2>
 811dee2:	69fb      	ldr	r3, [r7, #28]
 811dee4:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 811dee8:	69fb      	ldr	r3, [r7, #28]
 811deea:	6918      	ldr	r0, [r3, #16]
 811deec:	2300      	movs	r3, #0
 811deee:	2200      	movs	r2, #0
 811def0:	69f9      	ldr	r1, [r7, #28]
 811def2:	47a0      	blx	r4
 811def4:	4603      	mov	r3, r0
 811def6:	74fb      	strb	r3, [r7, #19]
 811def8:	e001      	b.n	811defe <tcp_input+0x6e6>
 811defa:	2300      	movs	r3, #0
 811defc:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 811defe:	f997 3013 	ldrsb.w	r3, [r7, #19]
 811df02:	f113 0f0d 	cmn.w	r3, #13
 811df06:	d016      	beq.n	811df36 <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 811df08:	4b13      	ldr	r3, [pc, #76]	@ (811df58 <tcp_input+0x740>)
 811df0a:	2200      	movs	r2, #0
 811df0c:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 811df0e:	69f8      	ldr	r0, [r7, #28]
 811df10:	f000 f88e 	bl	811e030 <tcp_input_delayed_close>
 811df14:	4603      	mov	r3, r0
 811df16:	2b00      	cmp	r3, #0
 811df18:	d128      	bne.n	811df6c <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 811df1a:	69f8      	ldr	r0, [r7, #28]
 811df1c:	f002 ff1a 	bl	8120d54 <tcp_output>
 811df20:	e025      	b.n	811df6e <tcp_input+0x756>
        goto aborted;
 811df22:	bf00      	nop
 811df24:	e023      	b.n	811df6e <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 811df26:	bf00      	nop
 811df28:	e021      	b.n	811df6e <tcp_input+0x756>
              goto aborted;
 811df2a:	bf00      	nop
 811df2c:	e01f      	b.n	811df6e <tcp_input+0x756>
          goto aborted;
 811df2e:	bf00      	nop
 811df30:	e01d      	b.n	811df6e <tcp_input+0x756>
            goto aborted;
 811df32:	bf00      	nop
 811df34:	e01b      	b.n	811df6e <tcp_input+0x756>
              goto aborted;
 811df36:	bf00      	nop
 811df38:	e019      	b.n	811df6e <tcp_input+0x756>
 811df3a:	bf00      	nop
 811df3c:	1000e4b0 	.word	0x1000e4b0
 811df40:	1000e4c0 	.word	0x1000e4c0
 811df44:	1000e4e0 	.word	0x1000e4e0
 811df48:	1000e4dd 	.word	0x1000e4dd
 811df4c:	1000e4d8 	.word	0x1000e4d8
 811df50:	1000e4dc 	.word	0x1000e4dc
 811df54:	1000e4da 	.word	0x1000e4da
 811df58:	1000e4e4 	.word	0x1000e4e4
 811df5c:	1000e4a4 	.word	0x1000e4a4
 811df60:	08127024 	.word	0x08127024
 811df64:	08127218 	.word	0x08127218
 811df68:	081270b0 	.word	0x081270b0
          goto aborted;
 811df6c:	bf00      	nop
    tcp_input_pcb = NULL;
 811df6e:	4b27      	ldr	r3, [pc, #156]	@ (811e00c <tcp_input+0x7f4>)
 811df70:	2200      	movs	r2, #0
 811df72:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 811df74:	4b26      	ldr	r3, [pc, #152]	@ (811e010 <tcp_input+0x7f8>)
 811df76:	2200      	movs	r2, #0
 811df78:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 811df7a:	4b26      	ldr	r3, [pc, #152]	@ (811e014 <tcp_input+0x7fc>)
 811df7c:	685b      	ldr	r3, [r3, #4]
 811df7e:	2b00      	cmp	r3, #0
 811df80:	d03f      	beq.n	811e002 <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 811df82:	4b24      	ldr	r3, [pc, #144]	@ (811e014 <tcp_input+0x7fc>)
 811df84:	685b      	ldr	r3, [r3, #4]
 811df86:	4618      	mov	r0, r3
 811df88:	f7fd faa8 	bl	811b4dc <pbuf_free>
      inseg.p = NULL;
 811df8c:	4b21      	ldr	r3, [pc, #132]	@ (811e014 <tcp_input+0x7fc>)
 811df8e:	2200      	movs	r2, #0
 811df90:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 811df92:	e036      	b.n	811e002 <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 811df94:	4b20      	ldr	r3, [pc, #128]	@ (811e018 <tcp_input+0x800>)
 811df96:	681b      	ldr	r3, [r3, #0]
 811df98:	899b      	ldrh	r3, [r3, #12]
 811df9a:	b29b      	uxth	r3, r3
 811df9c:	4618      	mov	r0, r3
 811df9e:	f7f9 f895 	bl	81170cc <lwip_htons>
 811dfa2:	4603      	mov	r3, r0
 811dfa4:	b2db      	uxtb	r3, r3
 811dfa6:	f003 0304 	and.w	r3, r3, #4
 811dfaa:	2b00      	cmp	r3, #0
 811dfac:	d118      	bne.n	811dfe0 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 811dfae:	4b1b      	ldr	r3, [pc, #108]	@ (811e01c <tcp_input+0x804>)
 811dfb0:	6819      	ldr	r1, [r3, #0]
 811dfb2:	4b1b      	ldr	r3, [pc, #108]	@ (811e020 <tcp_input+0x808>)
 811dfb4:	881b      	ldrh	r3, [r3, #0]
 811dfb6:	461a      	mov	r2, r3
 811dfb8:	4b1a      	ldr	r3, [pc, #104]	@ (811e024 <tcp_input+0x80c>)
 811dfba:	681b      	ldr	r3, [r3, #0]
 811dfbc:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 811dfbe:	4b16      	ldr	r3, [pc, #88]	@ (811e018 <tcp_input+0x800>)
 811dfc0:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 811dfc2:	885b      	ldrh	r3, [r3, #2]
 811dfc4:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 811dfc6:	4a14      	ldr	r2, [pc, #80]	@ (811e018 <tcp_input+0x800>)
 811dfc8:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 811dfca:	8812      	ldrh	r2, [r2, #0]
 811dfcc:	b292      	uxth	r2, r2
 811dfce:	9202      	str	r2, [sp, #8]
 811dfd0:	9301      	str	r3, [sp, #4]
 811dfd2:	4b15      	ldr	r3, [pc, #84]	@ (811e028 <tcp_input+0x810>)
 811dfd4:	9300      	str	r3, [sp, #0]
 811dfd6:	4b15      	ldr	r3, [pc, #84]	@ (811e02c <tcp_input+0x814>)
 811dfd8:	4602      	mov	r2, r0
 811dfda:	2000      	movs	r0, #0
 811dfdc:	f003 fc6e 	bl	81218bc <tcp_rst>
    pbuf_free(p);
 811dfe0:	6878      	ldr	r0, [r7, #4]
 811dfe2:	f7fd fa7b 	bl	811b4dc <pbuf_free>
  return;
 811dfe6:	e00c      	b.n	811e002 <tcp_input+0x7ea>
    goto dropped;
 811dfe8:	bf00      	nop
 811dfea:	e006      	b.n	811dffa <tcp_input+0x7e2>
    goto dropped;
 811dfec:	bf00      	nop
 811dfee:	e004      	b.n	811dffa <tcp_input+0x7e2>
    goto dropped;
 811dff0:	bf00      	nop
 811dff2:	e002      	b.n	811dffa <tcp_input+0x7e2>
      goto dropped;
 811dff4:	bf00      	nop
 811dff6:	e000      	b.n	811dffa <tcp_input+0x7e2>
      goto dropped;
 811dff8:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 811dffa:	6878      	ldr	r0, [r7, #4]
 811dffc:	f7fd fa6e 	bl	811b4dc <pbuf_free>
 811e000:	e000      	b.n	811e004 <tcp_input+0x7ec>
  return;
 811e002:	bf00      	nop
}
 811e004:	3724      	adds	r7, #36	@ 0x24
 811e006:	46bd      	mov	sp, r7
 811e008:	bd90      	pop	{r4, r7, pc}
 811e00a:	bf00      	nop
 811e00c:	1000e4e4 	.word	0x1000e4e4
 811e010:	1000e4e0 	.word	0x1000e4e0
 811e014:	1000e4b0 	.word	0x1000e4b0
 811e018:	1000e4c0 	.word	0x1000e4c0
 811e01c:	1000e4d4 	.word	0x1000e4d4
 811e020:	1000e4da 	.word	0x1000e4da
 811e024:	1000e4d0 	.word	0x1000e4d0
 811e028:	1000b310 	.word	0x1000b310
 811e02c:	1000b314 	.word	0x1000b314

0811e030 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 811e030:	b580      	push	{r7, lr}
 811e032:	b082      	sub	sp, #8
 811e034:	af00      	add	r7, sp, #0
 811e036:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 811e038:	687b      	ldr	r3, [r7, #4]
 811e03a:	2b00      	cmp	r3, #0
 811e03c:	d106      	bne.n	811e04c <tcp_input_delayed_close+0x1c>
 811e03e:	4b17      	ldr	r3, [pc, #92]	@ (811e09c <tcp_input_delayed_close+0x6c>)
 811e040:	f240 225a 	movw	r2, #602	@ 0x25a
 811e044:	4916      	ldr	r1, [pc, #88]	@ (811e0a0 <tcp_input_delayed_close+0x70>)
 811e046:	4817      	ldr	r0, [pc, #92]	@ (811e0a4 <tcp_input_delayed_close+0x74>)
 811e048:	f005 fde8 	bl	8123c1c <iprintf>

  if (recv_flags & TF_CLOSED) {
 811e04c:	4b16      	ldr	r3, [pc, #88]	@ (811e0a8 <tcp_input_delayed_close+0x78>)
 811e04e:	781b      	ldrb	r3, [r3, #0]
 811e050:	f003 0310 	and.w	r3, r3, #16
 811e054:	2b00      	cmp	r3, #0
 811e056:	d01c      	beq.n	811e092 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 811e058:	687b      	ldr	r3, [r7, #4]
 811e05a:	8b5b      	ldrh	r3, [r3, #26]
 811e05c:	f003 0310 	and.w	r3, r3, #16
 811e060:	2b00      	cmp	r3, #0
 811e062:	d10d      	bne.n	811e080 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 811e064:	687b      	ldr	r3, [r7, #4]
 811e066:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 811e06a:	2b00      	cmp	r3, #0
 811e06c:	d008      	beq.n	811e080 <tcp_input_delayed_close+0x50>
 811e06e:	687b      	ldr	r3, [r7, #4]
 811e070:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 811e074:	687a      	ldr	r2, [r7, #4]
 811e076:	6912      	ldr	r2, [r2, #16]
 811e078:	f06f 010e 	mvn.w	r1, #14
 811e07c:	4610      	mov	r0, r2
 811e07e:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 811e080:	6879      	ldr	r1, [r7, #4]
 811e082:	480a      	ldr	r0, [pc, #40]	@ (811e0ac <tcp_input_delayed_close+0x7c>)
 811e084:	f7ff fa50 	bl	811d528 <tcp_pcb_remove>
    tcp_free(pcb);
 811e088:	6878      	ldr	r0, [r7, #4]
 811e08a:	f7fd fdd5 	bl	811bc38 <tcp_free>
    return 1;
 811e08e:	2301      	movs	r3, #1
 811e090:	e000      	b.n	811e094 <tcp_input_delayed_close+0x64>
  }
  return 0;
 811e092:	2300      	movs	r3, #0
}
 811e094:	4618      	mov	r0, r3
 811e096:	3708      	adds	r7, #8
 811e098:	46bd      	mov	sp, r7
 811e09a:	bd80      	pop	{r7, pc}
 811e09c:	08127024 	.word	0x08127024
 811e0a0:	08127234 	.word	0x08127234
 811e0a4:	081270b0 	.word	0x081270b0
 811e0a8:	1000e4dd 	.word	0x1000e4dd
 811e0ac:	1000e4a4 	.word	0x1000e4a4

0811e0b0 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 811e0b0:	b590      	push	{r4, r7, lr}
 811e0b2:	b08b      	sub	sp, #44	@ 0x2c
 811e0b4:	af04      	add	r7, sp, #16
 811e0b6:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 811e0b8:	4b6f      	ldr	r3, [pc, #444]	@ (811e278 <tcp_listen_input+0x1c8>)
 811e0ba:	781b      	ldrb	r3, [r3, #0]
 811e0bc:	f003 0304 	and.w	r3, r3, #4
 811e0c0:	2b00      	cmp	r3, #0
 811e0c2:	f040 80d2 	bne.w	811e26a <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 811e0c6:	687b      	ldr	r3, [r7, #4]
 811e0c8:	2b00      	cmp	r3, #0
 811e0ca:	d106      	bne.n	811e0da <tcp_listen_input+0x2a>
 811e0cc:	4b6b      	ldr	r3, [pc, #428]	@ (811e27c <tcp_listen_input+0x1cc>)
 811e0ce:	f240 2281 	movw	r2, #641	@ 0x281
 811e0d2:	496b      	ldr	r1, [pc, #428]	@ (811e280 <tcp_listen_input+0x1d0>)
 811e0d4:	486b      	ldr	r0, [pc, #428]	@ (811e284 <tcp_listen_input+0x1d4>)
 811e0d6:	f005 fda1 	bl	8123c1c <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 811e0da:	4b67      	ldr	r3, [pc, #412]	@ (811e278 <tcp_listen_input+0x1c8>)
 811e0dc:	781b      	ldrb	r3, [r3, #0]
 811e0de:	f003 0310 	and.w	r3, r3, #16
 811e0e2:	2b00      	cmp	r3, #0
 811e0e4:	d019      	beq.n	811e11a <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 811e0e6:	4b68      	ldr	r3, [pc, #416]	@ (811e288 <tcp_listen_input+0x1d8>)
 811e0e8:	6819      	ldr	r1, [r3, #0]
 811e0ea:	4b68      	ldr	r3, [pc, #416]	@ (811e28c <tcp_listen_input+0x1dc>)
 811e0ec:	881b      	ldrh	r3, [r3, #0]
 811e0ee:	461a      	mov	r2, r3
 811e0f0:	4b67      	ldr	r3, [pc, #412]	@ (811e290 <tcp_listen_input+0x1e0>)
 811e0f2:	681b      	ldr	r3, [r3, #0]
 811e0f4:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 811e0f6:	4b67      	ldr	r3, [pc, #412]	@ (811e294 <tcp_listen_input+0x1e4>)
 811e0f8:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 811e0fa:	885b      	ldrh	r3, [r3, #2]
 811e0fc:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 811e0fe:	4a65      	ldr	r2, [pc, #404]	@ (811e294 <tcp_listen_input+0x1e4>)
 811e100:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 811e102:	8812      	ldrh	r2, [r2, #0]
 811e104:	b292      	uxth	r2, r2
 811e106:	9202      	str	r2, [sp, #8]
 811e108:	9301      	str	r3, [sp, #4]
 811e10a:	4b63      	ldr	r3, [pc, #396]	@ (811e298 <tcp_listen_input+0x1e8>)
 811e10c:	9300      	str	r3, [sp, #0]
 811e10e:	4b63      	ldr	r3, [pc, #396]	@ (811e29c <tcp_listen_input+0x1ec>)
 811e110:	4602      	mov	r2, r0
 811e112:	6878      	ldr	r0, [r7, #4]
 811e114:	f003 fbd2 	bl	81218bc <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 811e118:	e0a9      	b.n	811e26e <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 811e11a:	4b57      	ldr	r3, [pc, #348]	@ (811e278 <tcp_listen_input+0x1c8>)
 811e11c:	781b      	ldrb	r3, [r3, #0]
 811e11e:	f003 0302 	and.w	r3, r3, #2
 811e122:	2b00      	cmp	r3, #0
 811e124:	f000 80a3 	beq.w	811e26e <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 811e128:	687b      	ldr	r3, [r7, #4]
 811e12a:	7d5b      	ldrb	r3, [r3, #21]
 811e12c:	4618      	mov	r0, r3
 811e12e:	f7ff f8bf 	bl	811d2b0 <tcp_alloc>
 811e132:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 811e134:	697b      	ldr	r3, [r7, #20]
 811e136:	2b00      	cmp	r3, #0
 811e138:	d111      	bne.n	811e15e <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 811e13a:	687b      	ldr	r3, [r7, #4]
 811e13c:	699b      	ldr	r3, [r3, #24]
 811e13e:	2b00      	cmp	r3, #0
 811e140:	d00a      	beq.n	811e158 <tcp_listen_input+0xa8>
 811e142:	687b      	ldr	r3, [r7, #4]
 811e144:	699b      	ldr	r3, [r3, #24]
 811e146:	687a      	ldr	r2, [r7, #4]
 811e148:	6910      	ldr	r0, [r2, #16]
 811e14a:	f04f 32ff 	mov.w	r2, #4294967295
 811e14e:	2100      	movs	r1, #0
 811e150:	4798      	blx	r3
 811e152:	4603      	mov	r3, r0
 811e154:	73bb      	strb	r3, [r7, #14]
      return;
 811e156:	e08b      	b.n	811e270 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 811e158:	23f0      	movs	r3, #240	@ 0xf0
 811e15a:	73bb      	strb	r3, [r7, #14]
      return;
 811e15c:	e088      	b.n	811e270 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 811e15e:	4b50      	ldr	r3, [pc, #320]	@ (811e2a0 <tcp_listen_input+0x1f0>)
 811e160:	695a      	ldr	r2, [r3, #20]
 811e162:	697b      	ldr	r3, [r7, #20]
 811e164:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 811e166:	4b4e      	ldr	r3, [pc, #312]	@ (811e2a0 <tcp_listen_input+0x1f0>)
 811e168:	691a      	ldr	r2, [r3, #16]
 811e16a:	697b      	ldr	r3, [r7, #20]
 811e16c:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 811e16e:	687b      	ldr	r3, [r7, #4]
 811e170:	8ada      	ldrh	r2, [r3, #22]
 811e172:	697b      	ldr	r3, [r7, #20]
 811e174:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 811e176:	4b47      	ldr	r3, [pc, #284]	@ (811e294 <tcp_listen_input+0x1e4>)
 811e178:	681b      	ldr	r3, [r3, #0]
 811e17a:	881b      	ldrh	r3, [r3, #0]
 811e17c:	b29a      	uxth	r2, r3
 811e17e:	697b      	ldr	r3, [r7, #20]
 811e180:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 811e182:	697b      	ldr	r3, [r7, #20]
 811e184:	2203      	movs	r2, #3
 811e186:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 811e188:	4b41      	ldr	r3, [pc, #260]	@ (811e290 <tcp_listen_input+0x1e0>)
 811e18a:	681b      	ldr	r3, [r3, #0]
 811e18c:	1c5a      	adds	r2, r3, #1
 811e18e:	697b      	ldr	r3, [r7, #20]
 811e190:	625a      	str	r2, [r3, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 811e192:	697b      	ldr	r3, [r7, #20]
 811e194:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 811e196:	697b      	ldr	r3, [r7, #20]
 811e198:	62da      	str	r2, [r3, #44]	@ 0x2c
    iss = tcp_next_iss(npcb);
 811e19a:	6978      	ldr	r0, [r7, #20]
 811e19c:	f7ff fa58 	bl	811d650 <tcp_next_iss>
 811e1a0:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 811e1a2:	697b      	ldr	r3, [r7, #20]
 811e1a4:	693a      	ldr	r2, [r7, #16]
 811e1a6:	659a      	str	r2, [r3, #88]	@ 0x58
    npcb->snd_nxt = iss;
 811e1a8:	697b      	ldr	r3, [r7, #20]
 811e1aa:	693a      	ldr	r2, [r7, #16]
 811e1ac:	651a      	str	r2, [r3, #80]	@ 0x50
    npcb->lastack = iss;
 811e1ae:	697b      	ldr	r3, [r7, #20]
 811e1b0:	693a      	ldr	r2, [r7, #16]
 811e1b2:	645a      	str	r2, [r3, #68]	@ 0x44
    npcb->snd_lbb = iss;
 811e1b4:	697b      	ldr	r3, [r7, #20]
 811e1b6:	693a      	ldr	r2, [r7, #16]
 811e1b8:	65da      	str	r2, [r3, #92]	@ 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 811e1ba:	4b35      	ldr	r3, [pc, #212]	@ (811e290 <tcp_listen_input+0x1e0>)
 811e1bc:	681b      	ldr	r3, [r3, #0]
 811e1be:	1e5a      	subs	r2, r3, #1
 811e1c0:	697b      	ldr	r3, [r7, #20]
 811e1c2:	655a      	str	r2, [r3, #84]	@ 0x54
    npcb->callback_arg = pcb->callback_arg;
 811e1c4:	687b      	ldr	r3, [r7, #4]
 811e1c6:	691a      	ldr	r2, [r3, #16]
 811e1c8:	697b      	ldr	r3, [r7, #20]
 811e1ca:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 811e1cc:	697b      	ldr	r3, [r7, #20]
 811e1ce:	687a      	ldr	r2, [r7, #4]
 811e1d0:	67da      	str	r2, [r3, #124]	@ 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 811e1d2:	687b      	ldr	r3, [r7, #4]
 811e1d4:	7a5b      	ldrb	r3, [r3, #9]
 811e1d6:	f003 030c 	and.w	r3, r3, #12
 811e1da:	b2da      	uxtb	r2, r3
 811e1dc:	697b      	ldr	r3, [r7, #20]
 811e1de:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 811e1e0:	687b      	ldr	r3, [r7, #4]
 811e1e2:	7a1a      	ldrb	r2, [r3, #8]
 811e1e4:	697b      	ldr	r3, [r7, #20]
 811e1e6:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 811e1e8:	4b2e      	ldr	r3, [pc, #184]	@ (811e2a4 <tcp_listen_input+0x1f4>)
 811e1ea:	681a      	ldr	r2, [r3, #0]
 811e1ec:	697b      	ldr	r3, [r7, #20]
 811e1ee:	60da      	str	r2, [r3, #12]
 811e1f0:	4a2c      	ldr	r2, [pc, #176]	@ (811e2a4 <tcp_listen_input+0x1f4>)
 811e1f2:	697b      	ldr	r3, [r7, #20]
 811e1f4:	6013      	str	r3, [r2, #0]
 811e1f6:	f003 fe81 	bl	8121efc <tcp_timer_needed>
 811e1fa:	4b2b      	ldr	r3, [pc, #172]	@ (811e2a8 <tcp_listen_input+0x1f8>)
 811e1fc:	2201      	movs	r2, #1
 811e1fe:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 811e200:	6978      	ldr	r0, [r7, #20]
 811e202:	f001 fd8b 	bl	811fd1c <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 811e206:	4b23      	ldr	r3, [pc, #140]	@ (811e294 <tcp_listen_input+0x1e4>)
 811e208:	681b      	ldr	r3, [r3, #0]
 811e20a:	89db      	ldrh	r3, [r3, #14]
 811e20c:	b29a      	uxth	r2, r3
 811e20e:	697b      	ldr	r3, [r7, #20]
 811e210:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 811e214:	697b      	ldr	r3, [r7, #20]
 811e216:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 811e21a:	697b      	ldr	r3, [r7, #20]
 811e21c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 811e220:	697b      	ldr	r3, [r7, #20]
 811e222:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 811e224:	697b      	ldr	r3, [r7, #20]
 811e226:	3304      	adds	r3, #4
 811e228:	4618      	mov	r0, r3
 811e22a:	f7fa faf1 	bl	8118810 <ip4_route>
 811e22e:	4601      	mov	r1, r0
 811e230:	697b      	ldr	r3, [r7, #20]
 811e232:	3304      	adds	r3, #4
 811e234:	461a      	mov	r2, r3
 811e236:	4620      	mov	r0, r4
 811e238:	f7ff fa30 	bl	811d69c <tcp_eff_send_mss_netif>
 811e23c:	4603      	mov	r3, r0
 811e23e:	461a      	mov	r2, r3
 811e240:	697b      	ldr	r3, [r7, #20]
 811e242:	865a      	strh	r2, [r3, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 811e244:	2112      	movs	r1, #18
 811e246:	6978      	ldr	r0, [r7, #20]
 811e248:	f002 fc96 	bl	8120b78 <tcp_enqueue_flags>
 811e24c:	4603      	mov	r3, r0
 811e24e:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 811e250:	f997 300f 	ldrsb.w	r3, [r7, #15]
 811e254:	2b00      	cmp	r3, #0
 811e256:	d004      	beq.n	811e262 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 811e258:	2100      	movs	r1, #0
 811e25a:	6978      	ldr	r0, [r7, #20]
 811e25c:	f7fd ff16 	bl	811c08c <tcp_abandon>
      return;
 811e260:	e006      	b.n	811e270 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 811e262:	6978      	ldr	r0, [r7, #20]
 811e264:	f002 fd76 	bl	8120d54 <tcp_output>
  return;
 811e268:	e001      	b.n	811e26e <tcp_listen_input+0x1be>
    return;
 811e26a:	bf00      	nop
 811e26c:	e000      	b.n	811e270 <tcp_listen_input+0x1c0>
  return;
 811e26e:	bf00      	nop
}
 811e270:	371c      	adds	r7, #28
 811e272:	46bd      	mov	sp, r7
 811e274:	bd90      	pop	{r4, r7, pc}
 811e276:	bf00      	nop
 811e278:	1000e4dc 	.word	0x1000e4dc
 811e27c:	08127024 	.word	0x08127024
 811e280:	0812725c 	.word	0x0812725c
 811e284:	081270b0 	.word	0x081270b0
 811e288:	1000e4d4 	.word	0x1000e4d4
 811e28c:	1000e4da 	.word	0x1000e4da
 811e290:	1000e4d0 	.word	0x1000e4d0
 811e294:	1000e4c0 	.word	0x1000e4c0
 811e298:	1000b310 	.word	0x1000b310
 811e29c:	1000b314 	.word	0x1000b314
 811e2a0:	1000b300 	.word	0x1000b300
 811e2a4:	1000e4a4 	.word	0x1000e4a4
 811e2a8:	1000e4ac 	.word	0x1000e4ac

0811e2ac <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 811e2ac:	b580      	push	{r7, lr}
 811e2ae:	b086      	sub	sp, #24
 811e2b0:	af04      	add	r7, sp, #16
 811e2b2:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 811e2b4:	4b2f      	ldr	r3, [pc, #188]	@ (811e374 <tcp_timewait_input+0xc8>)
 811e2b6:	781b      	ldrb	r3, [r3, #0]
 811e2b8:	f003 0304 	and.w	r3, r3, #4
 811e2bc:	2b00      	cmp	r3, #0
 811e2be:	d153      	bne.n	811e368 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 811e2c0:	687b      	ldr	r3, [r7, #4]
 811e2c2:	2b00      	cmp	r3, #0
 811e2c4:	d106      	bne.n	811e2d4 <tcp_timewait_input+0x28>
 811e2c6:	4b2c      	ldr	r3, [pc, #176]	@ (811e378 <tcp_timewait_input+0xcc>)
 811e2c8:	f240 22ee 	movw	r2, #750	@ 0x2ee
 811e2cc:	492b      	ldr	r1, [pc, #172]	@ (811e37c <tcp_timewait_input+0xd0>)
 811e2ce:	482c      	ldr	r0, [pc, #176]	@ (811e380 <tcp_timewait_input+0xd4>)
 811e2d0:	f005 fca4 	bl	8123c1c <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 811e2d4:	4b27      	ldr	r3, [pc, #156]	@ (811e374 <tcp_timewait_input+0xc8>)
 811e2d6:	781b      	ldrb	r3, [r3, #0]
 811e2d8:	f003 0302 	and.w	r3, r3, #2
 811e2dc:	2b00      	cmp	r3, #0
 811e2de:	d02a      	beq.n	811e336 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 811e2e0:	4b28      	ldr	r3, [pc, #160]	@ (811e384 <tcp_timewait_input+0xd8>)
 811e2e2:	681a      	ldr	r2, [r3, #0]
 811e2e4:	687b      	ldr	r3, [r7, #4]
 811e2e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 811e2e8:	1ad3      	subs	r3, r2, r3
 811e2ea:	2b00      	cmp	r3, #0
 811e2ec:	db2d      	blt.n	811e34a <tcp_timewait_input+0x9e>
 811e2ee:	4b25      	ldr	r3, [pc, #148]	@ (811e384 <tcp_timewait_input+0xd8>)
 811e2f0:	681a      	ldr	r2, [r3, #0]
 811e2f2:	687b      	ldr	r3, [r7, #4]
 811e2f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 811e2f6:	6879      	ldr	r1, [r7, #4]
 811e2f8:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 811e2fa:	440b      	add	r3, r1
 811e2fc:	1ad3      	subs	r3, r2, r3
 811e2fe:	2b00      	cmp	r3, #0
 811e300:	dc23      	bgt.n	811e34a <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 811e302:	4b21      	ldr	r3, [pc, #132]	@ (811e388 <tcp_timewait_input+0xdc>)
 811e304:	6819      	ldr	r1, [r3, #0]
 811e306:	4b21      	ldr	r3, [pc, #132]	@ (811e38c <tcp_timewait_input+0xe0>)
 811e308:	881b      	ldrh	r3, [r3, #0]
 811e30a:	461a      	mov	r2, r3
 811e30c:	4b1d      	ldr	r3, [pc, #116]	@ (811e384 <tcp_timewait_input+0xd8>)
 811e30e:	681b      	ldr	r3, [r3, #0]
 811e310:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 811e312:	4b1f      	ldr	r3, [pc, #124]	@ (811e390 <tcp_timewait_input+0xe4>)
 811e314:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 811e316:	885b      	ldrh	r3, [r3, #2]
 811e318:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 811e31a:	4a1d      	ldr	r2, [pc, #116]	@ (811e390 <tcp_timewait_input+0xe4>)
 811e31c:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 811e31e:	8812      	ldrh	r2, [r2, #0]
 811e320:	b292      	uxth	r2, r2
 811e322:	9202      	str	r2, [sp, #8]
 811e324:	9301      	str	r3, [sp, #4]
 811e326:	4b1b      	ldr	r3, [pc, #108]	@ (811e394 <tcp_timewait_input+0xe8>)
 811e328:	9300      	str	r3, [sp, #0]
 811e32a:	4b1b      	ldr	r3, [pc, #108]	@ (811e398 <tcp_timewait_input+0xec>)
 811e32c:	4602      	mov	r2, r0
 811e32e:	6878      	ldr	r0, [r7, #4]
 811e330:	f003 fac4 	bl	81218bc <tcp_rst>
      return;
 811e334:	e01b      	b.n	811e36e <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 811e336:	4b0f      	ldr	r3, [pc, #60]	@ (811e374 <tcp_timewait_input+0xc8>)
 811e338:	781b      	ldrb	r3, [r3, #0]
 811e33a:	f003 0301 	and.w	r3, r3, #1
 811e33e:	2b00      	cmp	r3, #0
 811e340:	d003      	beq.n	811e34a <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 811e342:	4b16      	ldr	r3, [pc, #88]	@ (811e39c <tcp_timewait_input+0xf0>)
 811e344:	681a      	ldr	r2, [r3, #0]
 811e346:	687b      	ldr	r3, [r7, #4]
 811e348:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 811e34a:	4b10      	ldr	r3, [pc, #64]	@ (811e38c <tcp_timewait_input+0xe0>)
 811e34c:	881b      	ldrh	r3, [r3, #0]
 811e34e:	2b00      	cmp	r3, #0
 811e350:	d00c      	beq.n	811e36c <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 811e352:	687b      	ldr	r3, [r7, #4]
 811e354:	8b5b      	ldrh	r3, [r3, #26]
 811e356:	f043 0302 	orr.w	r3, r3, #2
 811e35a:	b29a      	uxth	r2, r3
 811e35c:	687b      	ldr	r3, [r7, #4]
 811e35e:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 811e360:	6878      	ldr	r0, [r7, #4]
 811e362:	f002 fcf7 	bl	8120d54 <tcp_output>
  }
  return;
 811e366:	e001      	b.n	811e36c <tcp_timewait_input+0xc0>
    return;
 811e368:	bf00      	nop
 811e36a:	e000      	b.n	811e36e <tcp_timewait_input+0xc2>
  return;
 811e36c:	bf00      	nop
}
 811e36e:	3708      	adds	r7, #8
 811e370:	46bd      	mov	sp, r7
 811e372:	bd80      	pop	{r7, pc}
 811e374:	1000e4dc 	.word	0x1000e4dc
 811e378:	08127024 	.word	0x08127024
 811e37c:	0812727c 	.word	0x0812727c
 811e380:	081270b0 	.word	0x081270b0
 811e384:	1000e4d0 	.word	0x1000e4d0
 811e388:	1000e4d4 	.word	0x1000e4d4
 811e38c:	1000e4da 	.word	0x1000e4da
 811e390:	1000e4c0 	.word	0x1000e4c0
 811e394:	1000b310 	.word	0x1000b310
 811e398:	1000b314 	.word	0x1000b314
 811e39c:	1000e498 	.word	0x1000e498

0811e3a0 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 811e3a0:	b590      	push	{r4, r7, lr}
 811e3a2:	b08d      	sub	sp, #52	@ 0x34
 811e3a4:	af04      	add	r7, sp, #16
 811e3a6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 811e3a8:	2300      	movs	r3, #0
 811e3aa:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 811e3ac:	2300      	movs	r3, #0
 811e3ae:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 811e3b0:	687b      	ldr	r3, [r7, #4]
 811e3b2:	2b00      	cmp	r3, #0
 811e3b4:	d106      	bne.n	811e3c4 <tcp_process+0x24>
 811e3b6:	4b9d      	ldr	r3, [pc, #628]	@ (811e62c <tcp_process+0x28c>)
 811e3b8:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 811e3bc:	499c      	ldr	r1, [pc, #624]	@ (811e630 <tcp_process+0x290>)
 811e3be:	489d      	ldr	r0, [pc, #628]	@ (811e634 <tcp_process+0x294>)
 811e3c0:	f005 fc2c 	bl	8123c1c <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 811e3c4:	4b9c      	ldr	r3, [pc, #624]	@ (811e638 <tcp_process+0x298>)
 811e3c6:	781b      	ldrb	r3, [r3, #0]
 811e3c8:	f003 0304 	and.w	r3, r3, #4
 811e3cc:	2b00      	cmp	r3, #0
 811e3ce:	d04e      	beq.n	811e46e <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 811e3d0:	687b      	ldr	r3, [r7, #4]
 811e3d2:	7d1b      	ldrb	r3, [r3, #20]
 811e3d4:	2b02      	cmp	r3, #2
 811e3d6:	d108      	bne.n	811e3ea <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 811e3d8:	687b      	ldr	r3, [r7, #4]
 811e3da:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 811e3dc:	4b97      	ldr	r3, [pc, #604]	@ (811e63c <tcp_process+0x29c>)
 811e3de:	681b      	ldr	r3, [r3, #0]
 811e3e0:	429a      	cmp	r2, r3
 811e3e2:	d123      	bne.n	811e42c <tcp_process+0x8c>
        acceptable = 1;
 811e3e4:	2301      	movs	r3, #1
 811e3e6:	76fb      	strb	r3, [r7, #27]
 811e3e8:	e020      	b.n	811e42c <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 811e3ea:	687b      	ldr	r3, [r7, #4]
 811e3ec:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 811e3ee:	4b94      	ldr	r3, [pc, #592]	@ (811e640 <tcp_process+0x2a0>)
 811e3f0:	681b      	ldr	r3, [r3, #0]
 811e3f2:	429a      	cmp	r2, r3
 811e3f4:	d102      	bne.n	811e3fc <tcp_process+0x5c>
        acceptable = 1;
 811e3f6:	2301      	movs	r3, #1
 811e3f8:	76fb      	strb	r3, [r7, #27]
 811e3fa:	e017      	b.n	811e42c <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 811e3fc:	4b90      	ldr	r3, [pc, #576]	@ (811e640 <tcp_process+0x2a0>)
 811e3fe:	681a      	ldr	r2, [r3, #0]
 811e400:	687b      	ldr	r3, [r7, #4]
 811e402:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 811e404:	1ad3      	subs	r3, r2, r3
 811e406:	2b00      	cmp	r3, #0
 811e408:	db10      	blt.n	811e42c <tcp_process+0x8c>
 811e40a:	4b8d      	ldr	r3, [pc, #564]	@ (811e640 <tcp_process+0x2a0>)
 811e40c:	681a      	ldr	r2, [r3, #0]
 811e40e:	687b      	ldr	r3, [r7, #4]
 811e410:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 811e412:	6879      	ldr	r1, [r7, #4]
 811e414:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 811e416:	440b      	add	r3, r1
 811e418:	1ad3      	subs	r3, r2, r3
 811e41a:	2b00      	cmp	r3, #0
 811e41c:	dc06      	bgt.n	811e42c <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 811e41e:	687b      	ldr	r3, [r7, #4]
 811e420:	8b5b      	ldrh	r3, [r3, #26]
 811e422:	f043 0302 	orr.w	r3, r3, #2
 811e426:	b29a      	uxth	r2, r3
 811e428:	687b      	ldr	r3, [r7, #4]
 811e42a:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 811e42c:	7efb      	ldrb	r3, [r7, #27]
 811e42e:	2b00      	cmp	r3, #0
 811e430:	d01b      	beq.n	811e46a <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 811e432:	687b      	ldr	r3, [r7, #4]
 811e434:	7d1b      	ldrb	r3, [r3, #20]
 811e436:	2b00      	cmp	r3, #0
 811e438:	d106      	bne.n	811e448 <tcp_process+0xa8>
 811e43a:	4b7c      	ldr	r3, [pc, #496]	@ (811e62c <tcp_process+0x28c>)
 811e43c:	f44f 724e 	mov.w	r2, #824	@ 0x338
 811e440:	4980      	ldr	r1, [pc, #512]	@ (811e644 <tcp_process+0x2a4>)
 811e442:	487c      	ldr	r0, [pc, #496]	@ (811e634 <tcp_process+0x294>)
 811e444:	f005 fbea 	bl	8123c1c <iprintf>
      recv_flags |= TF_RESET;
 811e448:	4b7f      	ldr	r3, [pc, #508]	@ (811e648 <tcp_process+0x2a8>)
 811e44a:	781b      	ldrb	r3, [r3, #0]
 811e44c:	f043 0308 	orr.w	r3, r3, #8
 811e450:	b2da      	uxtb	r2, r3
 811e452:	4b7d      	ldr	r3, [pc, #500]	@ (811e648 <tcp_process+0x2a8>)
 811e454:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 811e456:	687b      	ldr	r3, [r7, #4]
 811e458:	8b5b      	ldrh	r3, [r3, #26]
 811e45a:	f023 0301 	bic.w	r3, r3, #1
 811e45e:	b29a      	uxth	r2, r3
 811e460:	687b      	ldr	r3, [r7, #4]
 811e462:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 811e464:	f06f 030d 	mvn.w	r3, #13
 811e468:	e37a      	b.n	811eb60 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 811e46a:	2300      	movs	r3, #0
 811e46c:	e378      	b.n	811eb60 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 811e46e:	4b72      	ldr	r3, [pc, #456]	@ (811e638 <tcp_process+0x298>)
 811e470:	781b      	ldrb	r3, [r3, #0]
 811e472:	f003 0302 	and.w	r3, r3, #2
 811e476:	2b00      	cmp	r3, #0
 811e478:	d010      	beq.n	811e49c <tcp_process+0xfc>
 811e47a:	687b      	ldr	r3, [r7, #4]
 811e47c:	7d1b      	ldrb	r3, [r3, #20]
 811e47e:	2b02      	cmp	r3, #2
 811e480:	d00c      	beq.n	811e49c <tcp_process+0xfc>
 811e482:	687b      	ldr	r3, [r7, #4]
 811e484:	7d1b      	ldrb	r3, [r3, #20]
 811e486:	2b03      	cmp	r3, #3
 811e488:	d008      	beq.n	811e49c <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 811e48a:	687b      	ldr	r3, [r7, #4]
 811e48c:	8b5b      	ldrh	r3, [r3, #26]
 811e48e:	f043 0302 	orr.w	r3, r3, #2
 811e492:	b29a      	uxth	r2, r3
 811e494:	687b      	ldr	r3, [r7, #4]
 811e496:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 811e498:	2300      	movs	r3, #0
 811e49a:	e361      	b.n	811eb60 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 811e49c:	687b      	ldr	r3, [r7, #4]
 811e49e:	8b5b      	ldrh	r3, [r3, #26]
 811e4a0:	f003 0310 	and.w	r3, r3, #16
 811e4a4:	2b00      	cmp	r3, #0
 811e4a6:	d103      	bne.n	811e4b0 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 811e4a8:	4b68      	ldr	r3, [pc, #416]	@ (811e64c <tcp_process+0x2ac>)
 811e4aa:	681a      	ldr	r2, [r3, #0]
 811e4ac:	687b      	ldr	r3, [r7, #4]
 811e4ae:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 811e4b0:	687b      	ldr	r3, [r7, #4]
 811e4b2:	2200      	movs	r2, #0
 811e4b4:	f883 20a3 	strb.w	r2, [r3, #163]	@ 0xa3
  pcb->persist_probe = 0;
 811e4b8:	687b      	ldr	r3, [r7, #4]
 811e4ba:	2200      	movs	r2, #0
 811e4bc:	f883 20a2 	strb.w	r2, [r3, #162]	@ 0xa2

  tcp_parseopt(pcb);
 811e4c0:	6878      	ldr	r0, [r7, #4]
 811e4c2:	f001 fc2b 	bl	811fd1c <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 811e4c6:	687b      	ldr	r3, [r7, #4]
 811e4c8:	7d1b      	ldrb	r3, [r3, #20]
 811e4ca:	3b02      	subs	r3, #2
 811e4cc:	2b07      	cmp	r3, #7
 811e4ce:	f200 8337 	bhi.w	811eb40 <tcp_process+0x7a0>
 811e4d2:	a201      	add	r2, pc, #4	@ (adr r2, 811e4d8 <tcp_process+0x138>)
 811e4d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 811e4d8:	0811e4f9 	.word	0x0811e4f9
 811e4dc:	0811e729 	.word	0x0811e729
 811e4e0:	0811e8a1 	.word	0x0811e8a1
 811e4e4:	0811e8cb 	.word	0x0811e8cb
 811e4e8:	0811e9ef 	.word	0x0811e9ef
 811e4ec:	0811e8a1 	.word	0x0811e8a1
 811e4f0:	0811ea7b 	.word	0x0811ea7b
 811e4f4:	0811eb0b 	.word	0x0811eb0b
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 811e4f8:	4b4f      	ldr	r3, [pc, #316]	@ (811e638 <tcp_process+0x298>)
 811e4fa:	781b      	ldrb	r3, [r3, #0]
 811e4fc:	f003 0310 	and.w	r3, r3, #16
 811e500:	2b00      	cmp	r3, #0
 811e502:	f000 80e4 	beq.w	811e6ce <tcp_process+0x32e>
 811e506:	4b4c      	ldr	r3, [pc, #304]	@ (811e638 <tcp_process+0x298>)
 811e508:	781b      	ldrb	r3, [r3, #0]
 811e50a:	f003 0302 	and.w	r3, r3, #2
 811e50e:	2b00      	cmp	r3, #0
 811e510:	f000 80dd 	beq.w	811e6ce <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 811e514:	687b      	ldr	r3, [r7, #4]
 811e516:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 811e518:	1c5a      	adds	r2, r3, #1
 811e51a:	4b48      	ldr	r3, [pc, #288]	@ (811e63c <tcp_process+0x29c>)
 811e51c:	681b      	ldr	r3, [r3, #0]
 811e51e:	429a      	cmp	r2, r3
 811e520:	f040 80d5 	bne.w	811e6ce <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 811e524:	4b46      	ldr	r3, [pc, #280]	@ (811e640 <tcp_process+0x2a0>)
 811e526:	681b      	ldr	r3, [r3, #0]
 811e528:	1c5a      	adds	r2, r3, #1
 811e52a:	687b      	ldr	r3, [r7, #4]
 811e52c:	625a      	str	r2, [r3, #36]	@ 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 811e52e:	687b      	ldr	r3, [r7, #4]
 811e530:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 811e532:	687b      	ldr	r3, [r7, #4]
 811e534:	62da      	str	r2, [r3, #44]	@ 0x2c
        pcb->lastack = ackno;
 811e536:	4b41      	ldr	r3, [pc, #260]	@ (811e63c <tcp_process+0x29c>)
 811e538:	681a      	ldr	r2, [r3, #0]
 811e53a:	687b      	ldr	r3, [r7, #4]
 811e53c:	645a      	str	r2, [r3, #68]	@ 0x44
        pcb->snd_wnd = tcphdr->wnd;
 811e53e:	4b44      	ldr	r3, [pc, #272]	@ (811e650 <tcp_process+0x2b0>)
 811e540:	681b      	ldr	r3, [r3, #0]
 811e542:	89db      	ldrh	r3, [r3, #14]
 811e544:	b29a      	uxth	r2, r3
 811e546:	687b      	ldr	r3, [r7, #4]
 811e548:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 811e54c:	687b      	ldr	r3, [r7, #4]
 811e54e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 811e552:	687b      	ldr	r3, [r7, #4]
 811e554:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 811e558:	4b39      	ldr	r3, [pc, #228]	@ (811e640 <tcp_process+0x2a0>)
 811e55a:	681b      	ldr	r3, [r3, #0]
 811e55c:	1e5a      	subs	r2, r3, #1
 811e55e:	687b      	ldr	r3, [r7, #4]
 811e560:	655a      	str	r2, [r3, #84]	@ 0x54
        pcb->state = ESTABLISHED;
 811e562:	687b      	ldr	r3, [r7, #4]
 811e564:	2204      	movs	r2, #4
 811e566:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 811e568:	687b      	ldr	r3, [r7, #4]
 811e56a:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 811e56c:	687b      	ldr	r3, [r7, #4]
 811e56e:	3304      	adds	r3, #4
 811e570:	4618      	mov	r0, r3
 811e572:	f7fa f94d 	bl	8118810 <ip4_route>
 811e576:	4601      	mov	r1, r0
 811e578:	687b      	ldr	r3, [r7, #4]
 811e57a:	3304      	adds	r3, #4
 811e57c:	461a      	mov	r2, r3
 811e57e:	4620      	mov	r0, r4
 811e580:	f7ff f88c 	bl	811d69c <tcp_eff_send_mss_netif>
 811e584:	4603      	mov	r3, r0
 811e586:	461a      	mov	r2, r3
 811e588:	687b      	ldr	r3, [r7, #4]
 811e58a:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 811e58c:	687b      	ldr	r3, [r7, #4]
 811e58e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 811e590:	009a      	lsls	r2, r3, #2
 811e592:	687b      	ldr	r3, [r7, #4]
 811e594:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 811e596:	005b      	lsls	r3, r3, #1
 811e598:	f241 111c 	movw	r1, #4380	@ 0x111c
 811e59c:	428b      	cmp	r3, r1
 811e59e:	bf38      	it	cc
 811e5a0:	460b      	movcc	r3, r1
 811e5a2:	429a      	cmp	r2, r3
 811e5a4:	d204      	bcs.n	811e5b0 <tcp_process+0x210>
 811e5a6:	687b      	ldr	r3, [r7, #4]
 811e5a8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 811e5aa:	009b      	lsls	r3, r3, #2
 811e5ac:	b29b      	uxth	r3, r3
 811e5ae:	e00d      	b.n	811e5cc <tcp_process+0x22c>
 811e5b0:	687b      	ldr	r3, [r7, #4]
 811e5b2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 811e5b4:	005b      	lsls	r3, r3, #1
 811e5b6:	f241 121c 	movw	r2, #4380	@ 0x111c
 811e5ba:	4293      	cmp	r3, r2
 811e5bc:	d904      	bls.n	811e5c8 <tcp_process+0x228>
 811e5be:	687b      	ldr	r3, [r7, #4]
 811e5c0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 811e5c2:	005b      	lsls	r3, r3, #1
 811e5c4:	b29b      	uxth	r3, r3
 811e5c6:	e001      	b.n	811e5cc <tcp_process+0x22c>
 811e5c8:	f241 131c 	movw	r3, #4380	@ 0x111c
 811e5cc:	687a      	ldr	r2, [r7, #4]
 811e5ce:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 811e5d2:	687b      	ldr	r3, [r7, #4]
 811e5d4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 811e5d8:	2b00      	cmp	r3, #0
 811e5da:	d106      	bne.n	811e5ea <tcp_process+0x24a>
 811e5dc:	4b13      	ldr	r3, [pc, #76]	@ (811e62c <tcp_process+0x28c>)
 811e5de:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 811e5e2:	491c      	ldr	r1, [pc, #112]	@ (811e654 <tcp_process+0x2b4>)
 811e5e4:	4813      	ldr	r0, [pc, #76]	@ (811e634 <tcp_process+0x294>)
 811e5e6:	f005 fb19 	bl	8123c1c <iprintf>
        --pcb->snd_queuelen;
 811e5ea:	687b      	ldr	r3, [r7, #4]
 811e5ec:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 811e5f0:	3b01      	subs	r3, #1
 811e5f2:	b29a      	uxth	r2, r3
 811e5f4:	687b      	ldr	r3, [r7, #4]
 811e5f6:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 811e5fa:	687b      	ldr	r3, [r7, #4]
 811e5fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 811e5fe:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 811e600:	69fb      	ldr	r3, [r7, #28]
 811e602:	2b00      	cmp	r3, #0
 811e604:	d12a      	bne.n	811e65c <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 811e606:	687b      	ldr	r3, [r7, #4]
 811e608:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 811e60a:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 811e60c:	69fb      	ldr	r3, [r7, #28]
 811e60e:	2b00      	cmp	r3, #0
 811e610:	d106      	bne.n	811e620 <tcp_process+0x280>
 811e612:	4b06      	ldr	r3, [pc, #24]	@ (811e62c <tcp_process+0x28c>)
 811e614:	f44f 725d 	mov.w	r2, #884	@ 0x374
 811e618:	490f      	ldr	r1, [pc, #60]	@ (811e658 <tcp_process+0x2b8>)
 811e61a:	4806      	ldr	r0, [pc, #24]	@ (811e634 <tcp_process+0x294>)
 811e61c:	f005 fafe 	bl	8123c1c <iprintf>
          pcb->unsent = rseg->next;
 811e620:	69fb      	ldr	r3, [r7, #28]
 811e622:	681a      	ldr	r2, [r3, #0]
 811e624:	687b      	ldr	r3, [r7, #4]
 811e626:	66da      	str	r2, [r3, #108]	@ 0x6c
 811e628:	e01c      	b.n	811e664 <tcp_process+0x2c4>
 811e62a:	bf00      	nop
 811e62c:	08127024 	.word	0x08127024
 811e630:	0812729c 	.word	0x0812729c
 811e634:	081270b0 	.word	0x081270b0
 811e638:	1000e4dc 	.word	0x1000e4dc
 811e63c:	1000e4d4 	.word	0x1000e4d4
 811e640:	1000e4d0 	.word	0x1000e4d0
 811e644:	081272b8 	.word	0x081272b8
 811e648:	1000e4dd 	.word	0x1000e4dd
 811e64c:	1000e498 	.word	0x1000e498
 811e650:	1000e4c0 	.word	0x1000e4c0
 811e654:	081272d8 	.word	0x081272d8
 811e658:	081272f0 	.word	0x081272f0
        } else {
          pcb->unacked = rseg->next;
 811e65c:	69fb      	ldr	r3, [r7, #28]
 811e65e:	681a      	ldr	r2, [r3, #0]
 811e660:	687b      	ldr	r3, [r7, #4]
 811e662:	671a      	str	r2, [r3, #112]	@ 0x70
        }
        tcp_seg_free(rseg);
 811e664:	69f8      	ldr	r0, [r7, #28]
 811e666:	f7fe fcba 	bl	811cfde <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 811e66a:	687b      	ldr	r3, [r7, #4]
 811e66c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 811e66e:	2b00      	cmp	r3, #0
 811e670:	d104      	bne.n	811e67c <tcp_process+0x2dc>
          pcb->rtime = -1;
 811e672:	687b      	ldr	r3, [r7, #4]
 811e674:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 811e678:	861a      	strh	r2, [r3, #48]	@ 0x30
 811e67a:	e006      	b.n	811e68a <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 811e67c:	687b      	ldr	r3, [r7, #4]
 811e67e:	2200      	movs	r2, #0
 811e680:	861a      	strh	r2, [r3, #48]	@ 0x30
          pcb->nrtx = 0;
 811e682:	687b      	ldr	r3, [r7, #4]
 811e684:	2200      	movs	r2, #0
 811e686:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 811e68a:	687b      	ldr	r3, [r7, #4]
 811e68c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 811e690:	2b00      	cmp	r3, #0
 811e692:	d00a      	beq.n	811e6aa <tcp_process+0x30a>
 811e694:	687b      	ldr	r3, [r7, #4]
 811e696:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 811e69a:	687a      	ldr	r2, [r7, #4]
 811e69c:	6910      	ldr	r0, [r2, #16]
 811e69e:	2200      	movs	r2, #0
 811e6a0:	6879      	ldr	r1, [r7, #4]
 811e6a2:	4798      	blx	r3
 811e6a4:	4603      	mov	r3, r0
 811e6a6:	76bb      	strb	r3, [r7, #26]
 811e6a8:	e001      	b.n	811e6ae <tcp_process+0x30e>
 811e6aa:	2300      	movs	r3, #0
 811e6ac:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 811e6ae:	f997 301a 	ldrsb.w	r3, [r7, #26]
 811e6b2:	f113 0f0d 	cmn.w	r3, #13
 811e6b6:	d102      	bne.n	811e6be <tcp_process+0x31e>
          return ERR_ABRT;
 811e6b8:	f06f 030c 	mvn.w	r3, #12
 811e6bc:	e250      	b.n	811eb60 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 811e6be:	687b      	ldr	r3, [r7, #4]
 811e6c0:	8b5b      	ldrh	r3, [r3, #26]
 811e6c2:	f043 0302 	orr.w	r3, r3, #2
 811e6c6:	b29a      	uxth	r2, r3
 811e6c8:	687b      	ldr	r3, [r7, #4]
 811e6ca:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 811e6cc:	e23a      	b.n	811eb44 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 811e6ce:	4b98      	ldr	r3, [pc, #608]	@ (811e930 <tcp_process+0x590>)
 811e6d0:	781b      	ldrb	r3, [r3, #0]
 811e6d2:	f003 0310 	and.w	r3, r3, #16
 811e6d6:	2b00      	cmp	r3, #0
 811e6d8:	f000 8234 	beq.w	811eb44 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 811e6dc:	4b95      	ldr	r3, [pc, #596]	@ (811e934 <tcp_process+0x594>)
 811e6de:	6819      	ldr	r1, [r3, #0]
 811e6e0:	4b95      	ldr	r3, [pc, #596]	@ (811e938 <tcp_process+0x598>)
 811e6e2:	881b      	ldrh	r3, [r3, #0]
 811e6e4:	461a      	mov	r2, r3
 811e6e6:	4b95      	ldr	r3, [pc, #596]	@ (811e93c <tcp_process+0x59c>)
 811e6e8:	681b      	ldr	r3, [r3, #0]
 811e6ea:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 811e6ec:	4b94      	ldr	r3, [pc, #592]	@ (811e940 <tcp_process+0x5a0>)
 811e6ee:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 811e6f0:	885b      	ldrh	r3, [r3, #2]
 811e6f2:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 811e6f4:	4a92      	ldr	r2, [pc, #584]	@ (811e940 <tcp_process+0x5a0>)
 811e6f6:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 811e6f8:	8812      	ldrh	r2, [r2, #0]
 811e6fa:	b292      	uxth	r2, r2
 811e6fc:	9202      	str	r2, [sp, #8]
 811e6fe:	9301      	str	r3, [sp, #4]
 811e700:	4b90      	ldr	r3, [pc, #576]	@ (811e944 <tcp_process+0x5a4>)
 811e702:	9300      	str	r3, [sp, #0]
 811e704:	4b90      	ldr	r3, [pc, #576]	@ (811e948 <tcp_process+0x5a8>)
 811e706:	4602      	mov	r2, r0
 811e708:	6878      	ldr	r0, [r7, #4]
 811e70a:	f003 f8d7 	bl	81218bc <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 811e70e:	687b      	ldr	r3, [r7, #4]
 811e710:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 811e714:	2b05      	cmp	r3, #5
 811e716:	f200 8215 	bhi.w	811eb44 <tcp_process+0x7a4>
          pcb->rtime = 0;
 811e71a:	687b      	ldr	r3, [r7, #4]
 811e71c:	2200      	movs	r2, #0
 811e71e:	861a      	strh	r2, [r3, #48]	@ 0x30
          tcp_rexmit_rto(pcb);
 811e720:	6878      	ldr	r0, [r7, #4]
 811e722:	f002 fea3 	bl	812146c <tcp_rexmit_rto>
      break;
 811e726:	e20d      	b.n	811eb44 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 811e728:	4b81      	ldr	r3, [pc, #516]	@ (811e930 <tcp_process+0x590>)
 811e72a:	781b      	ldrb	r3, [r3, #0]
 811e72c:	f003 0310 	and.w	r3, r3, #16
 811e730:	2b00      	cmp	r3, #0
 811e732:	f000 80a1 	beq.w	811e878 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 811e736:	4b7f      	ldr	r3, [pc, #508]	@ (811e934 <tcp_process+0x594>)
 811e738:	681a      	ldr	r2, [r3, #0]
 811e73a:	687b      	ldr	r3, [r7, #4]
 811e73c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 811e73e:	1ad3      	subs	r3, r2, r3
 811e740:	3b01      	subs	r3, #1
 811e742:	2b00      	cmp	r3, #0
 811e744:	db7e      	blt.n	811e844 <tcp_process+0x4a4>
 811e746:	4b7b      	ldr	r3, [pc, #492]	@ (811e934 <tcp_process+0x594>)
 811e748:	681a      	ldr	r2, [r3, #0]
 811e74a:	687b      	ldr	r3, [r7, #4]
 811e74c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 811e74e:	1ad3      	subs	r3, r2, r3
 811e750:	2b00      	cmp	r3, #0
 811e752:	dc77      	bgt.n	811e844 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 811e754:	687b      	ldr	r3, [r7, #4]
 811e756:	2204      	movs	r2, #4
 811e758:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 811e75a:	687b      	ldr	r3, [r7, #4]
 811e75c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 811e75e:	2b00      	cmp	r3, #0
 811e760:	d102      	bne.n	811e768 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 811e762:	23fa      	movs	r3, #250	@ 0xfa
 811e764:	76bb      	strb	r3, [r7, #26]
 811e766:	e01d      	b.n	811e7a4 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 811e768:	687b      	ldr	r3, [r7, #4]
 811e76a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 811e76c:	699b      	ldr	r3, [r3, #24]
 811e76e:	2b00      	cmp	r3, #0
 811e770:	d106      	bne.n	811e780 <tcp_process+0x3e0>
 811e772:	4b76      	ldr	r3, [pc, #472]	@ (811e94c <tcp_process+0x5ac>)
 811e774:	f44f 726a 	mov.w	r2, #936	@ 0x3a8
 811e778:	4975      	ldr	r1, [pc, #468]	@ (811e950 <tcp_process+0x5b0>)
 811e77a:	4876      	ldr	r0, [pc, #472]	@ (811e954 <tcp_process+0x5b4>)
 811e77c:	f005 fa4e 	bl	8123c1c <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 811e780:	687b      	ldr	r3, [r7, #4]
 811e782:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 811e784:	699b      	ldr	r3, [r3, #24]
 811e786:	2b00      	cmp	r3, #0
 811e788:	d00a      	beq.n	811e7a0 <tcp_process+0x400>
 811e78a:	687b      	ldr	r3, [r7, #4]
 811e78c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 811e78e:	699b      	ldr	r3, [r3, #24]
 811e790:	687a      	ldr	r2, [r7, #4]
 811e792:	6910      	ldr	r0, [r2, #16]
 811e794:	2200      	movs	r2, #0
 811e796:	6879      	ldr	r1, [r7, #4]
 811e798:	4798      	blx	r3
 811e79a:	4603      	mov	r3, r0
 811e79c:	76bb      	strb	r3, [r7, #26]
 811e79e:	e001      	b.n	811e7a4 <tcp_process+0x404>
 811e7a0:	23f0      	movs	r3, #240	@ 0xf0
 811e7a2:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 811e7a4:	f997 301a 	ldrsb.w	r3, [r7, #26]
 811e7a8:	2b00      	cmp	r3, #0
 811e7aa:	d00a      	beq.n	811e7c2 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 811e7ac:	f997 301a 	ldrsb.w	r3, [r7, #26]
 811e7b0:	f113 0f0d 	cmn.w	r3, #13
 811e7b4:	d002      	beq.n	811e7bc <tcp_process+0x41c>
              tcp_abort(pcb);
 811e7b6:	6878      	ldr	r0, [r7, #4]
 811e7b8:	f7fd fd26 	bl	811c208 <tcp_abort>
            }
            return ERR_ABRT;
 811e7bc:	f06f 030c 	mvn.w	r3, #12
 811e7c0:	e1ce      	b.n	811eb60 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 811e7c2:	6878      	ldr	r0, [r7, #4]
 811e7c4:	f000 fae0 	bl	811ed88 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 811e7c8:	4b63      	ldr	r3, [pc, #396]	@ (811e958 <tcp_process+0x5b8>)
 811e7ca:	881b      	ldrh	r3, [r3, #0]
 811e7cc:	2b00      	cmp	r3, #0
 811e7ce:	d005      	beq.n	811e7dc <tcp_process+0x43c>
            recv_acked--;
 811e7d0:	4b61      	ldr	r3, [pc, #388]	@ (811e958 <tcp_process+0x5b8>)
 811e7d2:	881b      	ldrh	r3, [r3, #0]
 811e7d4:	3b01      	subs	r3, #1
 811e7d6:	b29a      	uxth	r2, r3
 811e7d8:	4b5f      	ldr	r3, [pc, #380]	@ (811e958 <tcp_process+0x5b8>)
 811e7da:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 811e7dc:	687b      	ldr	r3, [r7, #4]
 811e7de:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 811e7e0:	009a      	lsls	r2, r3, #2
 811e7e2:	687b      	ldr	r3, [r7, #4]
 811e7e4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 811e7e6:	005b      	lsls	r3, r3, #1
 811e7e8:	f241 111c 	movw	r1, #4380	@ 0x111c
 811e7ec:	428b      	cmp	r3, r1
 811e7ee:	bf38      	it	cc
 811e7f0:	460b      	movcc	r3, r1
 811e7f2:	429a      	cmp	r2, r3
 811e7f4:	d204      	bcs.n	811e800 <tcp_process+0x460>
 811e7f6:	687b      	ldr	r3, [r7, #4]
 811e7f8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 811e7fa:	009b      	lsls	r3, r3, #2
 811e7fc:	b29b      	uxth	r3, r3
 811e7fe:	e00d      	b.n	811e81c <tcp_process+0x47c>
 811e800:	687b      	ldr	r3, [r7, #4]
 811e802:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 811e804:	005b      	lsls	r3, r3, #1
 811e806:	f241 121c 	movw	r2, #4380	@ 0x111c
 811e80a:	4293      	cmp	r3, r2
 811e80c:	d904      	bls.n	811e818 <tcp_process+0x478>
 811e80e:	687b      	ldr	r3, [r7, #4]
 811e810:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 811e812:	005b      	lsls	r3, r3, #1
 811e814:	b29b      	uxth	r3, r3
 811e816:	e001      	b.n	811e81c <tcp_process+0x47c>
 811e818:	f241 131c 	movw	r3, #4380	@ 0x111c
 811e81c:	687a      	ldr	r2, [r7, #4]
 811e81e:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 811e822:	4b4e      	ldr	r3, [pc, #312]	@ (811e95c <tcp_process+0x5bc>)
 811e824:	781b      	ldrb	r3, [r3, #0]
 811e826:	f003 0320 	and.w	r3, r3, #32
 811e82a:	2b00      	cmp	r3, #0
 811e82c:	d037      	beq.n	811e89e <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 811e82e:	687b      	ldr	r3, [r7, #4]
 811e830:	8b5b      	ldrh	r3, [r3, #26]
 811e832:	f043 0302 	orr.w	r3, r3, #2
 811e836:	b29a      	uxth	r2, r3
 811e838:	687b      	ldr	r3, [r7, #4]
 811e83a:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 811e83c:	687b      	ldr	r3, [r7, #4]
 811e83e:	2207      	movs	r2, #7
 811e840:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 811e842:	e02c      	b.n	811e89e <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 811e844:	4b3b      	ldr	r3, [pc, #236]	@ (811e934 <tcp_process+0x594>)
 811e846:	6819      	ldr	r1, [r3, #0]
 811e848:	4b3b      	ldr	r3, [pc, #236]	@ (811e938 <tcp_process+0x598>)
 811e84a:	881b      	ldrh	r3, [r3, #0]
 811e84c:	461a      	mov	r2, r3
 811e84e:	4b3b      	ldr	r3, [pc, #236]	@ (811e93c <tcp_process+0x59c>)
 811e850:	681b      	ldr	r3, [r3, #0]
 811e852:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 811e854:	4b3a      	ldr	r3, [pc, #232]	@ (811e940 <tcp_process+0x5a0>)
 811e856:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 811e858:	885b      	ldrh	r3, [r3, #2]
 811e85a:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 811e85c:	4a38      	ldr	r2, [pc, #224]	@ (811e940 <tcp_process+0x5a0>)
 811e85e:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 811e860:	8812      	ldrh	r2, [r2, #0]
 811e862:	b292      	uxth	r2, r2
 811e864:	9202      	str	r2, [sp, #8]
 811e866:	9301      	str	r3, [sp, #4]
 811e868:	4b36      	ldr	r3, [pc, #216]	@ (811e944 <tcp_process+0x5a4>)
 811e86a:	9300      	str	r3, [sp, #0]
 811e86c:	4b36      	ldr	r3, [pc, #216]	@ (811e948 <tcp_process+0x5a8>)
 811e86e:	4602      	mov	r2, r0
 811e870:	6878      	ldr	r0, [r7, #4]
 811e872:	f003 f823 	bl	81218bc <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 811e876:	e167      	b.n	811eb48 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 811e878:	4b2d      	ldr	r3, [pc, #180]	@ (811e930 <tcp_process+0x590>)
 811e87a:	781b      	ldrb	r3, [r3, #0]
 811e87c:	f003 0302 	and.w	r3, r3, #2
 811e880:	2b00      	cmp	r3, #0
 811e882:	f000 8161 	beq.w	811eb48 <tcp_process+0x7a8>
 811e886:	687b      	ldr	r3, [r7, #4]
 811e888:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 811e88a:	1e5a      	subs	r2, r3, #1
 811e88c:	4b2b      	ldr	r3, [pc, #172]	@ (811e93c <tcp_process+0x59c>)
 811e88e:	681b      	ldr	r3, [r3, #0]
 811e890:	429a      	cmp	r2, r3
 811e892:	f040 8159 	bne.w	811eb48 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 811e896:	6878      	ldr	r0, [r7, #4]
 811e898:	f002 fe0a 	bl	81214b0 <tcp_rexmit>
      break;
 811e89c:	e154      	b.n	811eb48 <tcp_process+0x7a8>
 811e89e:	e153      	b.n	811eb48 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 811e8a0:	6878      	ldr	r0, [r7, #4]
 811e8a2:	f000 fa71 	bl	811ed88 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 811e8a6:	4b2d      	ldr	r3, [pc, #180]	@ (811e95c <tcp_process+0x5bc>)
 811e8a8:	781b      	ldrb	r3, [r3, #0]
 811e8aa:	f003 0320 	and.w	r3, r3, #32
 811e8ae:	2b00      	cmp	r3, #0
 811e8b0:	f000 814c 	beq.w	811eb4c <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 811e8b4:	687b      	ldr	r3, [r7, #4]
 811e8b6:	8b5b      	ldrh	r3, [r3, #26]
 811e8b8:	f043 0302 	orr.w	r3, r3, #2
 811e8bc:	b29a      	uxth	r2, r3
 811e8be:	687b      	ldr	r3, [r7, #4]
 811e8c0:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 811e8c2:	687b      	ldr	r3, [r7, #4]
 811e8c4:	2207      	movs	r2, #7
 811e8c6:	751a      	strb	r2, [r3, #20]
      }
      break;
 811e8c8:	e140      	b.n	811eb4c <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 811e8ca:	6878      	ldr	r0, [r7, #4]
 811e8cc:	f000 fa5c 	bl	811ed88 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 811e8d0:	4b22      	ldr	r3, [pc, #136]	@ (811e95c <tcp_process+0x5bc>)
 811e8d2:	781b      	ldrb	r3, [r3, #0]
 811e8d4:	f003 0320 	and.w	r3, r3, #32
 811e8d8:	2b00      	cmp	r3, #0
 811e8da:	d071      	beq.n	811e9c0 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 811e8dc:	4b14      	ldr	r3, [pc, #80]	@ (811e930 <tcp_process+0x590>)
 811e8de:	781b      	ldrb	r3, [r3, #0]
 811e8e0:	f003 0310 	and.w	r3, r3, #16
 811e8e4:	2b00      	cmp	r3, #0
 811e8e6:	d060      	beq.n	811e9aa <tcp_process+0x60a>
 811e8e8:	687b      	ldr	r3, [r7, #4]
 811e8ea:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 811e8ec:	4b11      	ldr	r3, [pc, #68]	@ (811e934 <tcp_process+0x594>)
 811e8ee:	681b      	ldr	r3, [r3, #0]
 811e8f0:	429a      	cmp	r2, r3
 811e8f2:	d15a      	bne.n	811e9aa <tcp_process+0x60a>
            pcb->unsent == NULL) {
 811e8f4:	687b      	ldr	r3, [r7, #4]
 811e8f6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 811e8f8:	2b00      	cmp	r3, #0
 811e8fa:	d156      	bne.n	811e9aa <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 811e8fc:	687b      	ldr	r3, [r7, #4]
 811e8fe:	8b5b      	ldrh	r3, [r3, #26]
 811e900:	f043 0302 	orr.w	r3, r3, #2
 811e904:	b29a      	uxth	r2, r3
 811e906:	687b      	ldr	r3, [r7, #4]
 811e908:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 811e90a:	6878      	ldr	r0, [r7, #4]
 811e90c:	f7fe fdbc 	bl	811d488 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 811e910:	4b13      	ldr	r3, [pc, #76]	@ (811e960 <tcp_process+0x5c0>)
 811e912:	681b      	ldr	r3, [r3, #0]
 811e914:	687a      	ldr	r2, [r7, #4]
 811e916:	429a      	cmp	r2, r3
 811e918:	d105      	bne.n	811e926 <tcp_process+0x586>
 811e91a:	4b11      	ldr	r3, [pc, #68]	@ (811e960 <tcp_process+0x5c0>)
 811e91c:	681b      	ldr	r3, [r3, #0]
 811e91e:	68db      	ldr	r3, [r3, #12]
 811e920:	4a0f      	ldr	r2, [pc, #60]	@ (811e960 <tcp_process+0x5c0>)
 811e922:	6013      	str	r3, [r2, #0]
 811e924:	e02e      	b.n	811e984 <tcp_process+0x5e4>
 811e926:	4b0e      	ldr	r3, [pc, #56]	@ (811e960 <tcp_process+0x5c0>)
 811e928:	681b      	ldr	r3, [r3, #0]
 811e92a:	617b      	str	r3, [r7, #20]
 811e92c:	e027      	b.n	811e97e <tcp_process+0x5de>
 811e92e:	bf00      	nop
 811e930:	1000e4dc 	.word	0x1000e4dc
 811e934:	1000e4d4 	.word	0x1000e4d4
 811e938:	1000e4da 	.word	0x1000e4da
 811e93c:	1000e4d0 	.word	0x1000e4d0
 811e940:	1000e4c0 	.word	0x1000e4c0
 811e944:	1000b310 	.word	0x1000b310
 811e948:	1000b314 	.word	0x1000b314
 811e94c:	08127024 	.word	0x08127024
 811e950:	08127304 	.word	0x08127304
 811e954:	081270b0 	.word	0x081270b0
 811e958:	1000e4d8 	.word	0x1000e4d8
 811e95c:	1000e4dd 	.word	0x1000e4dd
 811e960:	1000e4a4 	.word	0x1000e4a4
 811e964:	697b      	ldr	r3, [r7, #20]
 811e966:	68db      	ldr	r3, [r3, #12]
 811e968:	687a      	ldr	r2, [r7, #4]
 811e96a:	429a      	cmp	r2, r3
 811e96c:	d104      	bne.n	811e978 <tcp_process+0x5d8>
 811e96e:	687b      	ldr	r3, [r7, #4]
 811e970:	68da      	ldr	r2, [r3, #12]
 811e972:	697b      	ldr	r3, [r7, #20]
 811e974:	60da      	str	r2, [r3, #12]
 811e976:	e005      	b.n	811e984 <tcp_process+0x5e4>
 811e978:	697b      	ldr	r3, [r7, #20]
 811e97a:	68db      	ldr	r3, [r3, #12]
 811e97c:	617b      	str	r3, [r7, #20]
 811e97e:	697b      	ldr	r3, [r7, #20]
 811e980:	2b00      	cmp	r3, #0
 811e982:	d1ef      	bne.n	811e964 <tcp_process+0x5c4>
 811e984:	687b      	ldr	r3, [r7, #4]
 811e986:	2200      	movs	r2, #0
 811e988:	60da      	str	r2, [r3, #12]
 811e98a:	4b77      	ldr	r3, [pc, #476]	@ (811eb68 <tcp_process+0x7c8>)
 811e98c:	2201      	movs	r2, #1
 811e98e:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 811e990:	687b      	ldr	r3, [r7, #4]
 811e992:	220a      	movs	r2, #10
 811e994:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 811e996:	4b75      	ldr	r3, [pc, #468]	@ (811eb6c <tcp_process+0x7cc>)
 811e998:	681a      	ldr	r2, [r3, #0]
 811e99a:	687b      	ldr	r3, [r7, #4]
 811e99c:	60da      	str	r2, [r3, #12]
 811e99e:	4a73      	ldr	r2, [pc, #460]	@ (811eb6c <tcp_process+0x7cc>)
 811e9a0:	687b      	ldr	r3, [r7, #4]
 811e9a2:	6013      	str	r3, [r2, #0]
 811e9a4:	f003 faaa 	bl	8121efc <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 811e9a8:	e0d2      	b.n	811eb50 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 811e9aa:	687b      	ldr	r3, [r7, #4]
 811e9ac:	8b5b      	ldrh	r3, [r3, #26]
 811e9ae:	f043 0302 	orr.w	r3, r3, #2
 811e9b2:	b29a      	uxth	r2, r3
 811e9b4:	687b      	ldr	r3, [r7, #4]
 811e9b6:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 811e9b8:	687b      	ldr	r3, [r7, #4]
 811e9ba:	2208      	movs	r2, #8
 811e9bc:	751a      	strb	r2, [r3, #20]
      break;
 811e9be:	e0c7      	b.n	811eb50 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 811e9c0:	4b6b      	ldr	r3, [pc, #428]	@ (811eb70 <tcp_process+0x7d0>)
 811e9c2:	781b      	ldrb	r3, [r3, #0]
 811e9c4:	f003 0310 	and.w	r3, r3, #16
 811e9c8:	2b00      	cmp	r3, #0
 811e9ca:	f000 80c1 	beq.w	811eb50 <tcp_process+0x7b0>
 811e9ce:	687b      	ldr	r3, [r7, #4]
 811e9d0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 811e9d2:	4b68      	ldr	r3, [pc, #416]	@ (811eb74 <tcp_process+0x7d4>)
 811e9d4:	681b      	ldr	r3, [r3, #0]
 811e9d6:	429a      	cmp	r2, r3
 811e9d8:	f040 80ba 	bne.w	811eb50 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 811e9dc:	687b      	ldr	r3, [r7, #4]
 811e9de:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 811e9e0:	2b00      	cmp	r3, #0
 811e9e2:	f040 80b5 	bne.w	811eb50 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 811e9e6:	687b      	ldr	r3, [r7, #4]
 811e9e8:	2206      	movs	r2, #6
 811e9ea:	751a      	strb	r2, [r3, #20]
      break;
 811e9ec:	e0b0      	b.n	811eb50 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 811e9ee:	6878      	ldr	r0, [r7, #4]
 811e9f0:	f000 f9ca 	bl	811ed88 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 811e9f4:	4b60      	ldr	r3, [pc, #384]	@ (811eb78 <tcp_process+0x7d8>)
 811e9f6:	781b      	ldrb	r3, [r3, #0]
 811e9f8:	f003 0320 	and.w	r3, r3, #32
 811e9fc:	2b00      	cmp	r3, #0
 811e9fe:	f000 80a9 	beq.w	811eb54 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 811ea02:	687b      	ldr	r3, [r7, #4]
 811ea04:	8b5b      	ldrh	r3, [r3, #26]
 811ea06:	f043 0302 	orr.w	r3, r3, #2
 811ea0a:	b29a      	uxth	r2, r3
 811ea0c:	687b      	ldr	r3, [r7, #4]
 811ea0e:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 811ea10:	6878      	ldr	r0, [r7, #4]
 811ea12:	f7fe fd39 	bl	811d488 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 811ea16:	4b59      	ldr	r3, [pc, #356]	@ (811eb7c <tcp_process+0x7dc>)
 811ea18:	681b      	ldr	r3, [r3, #0]
 811ea1a:	687a      	ldr	r2, [r7, #4]
 811ea1c:	429a      	cmp	r2, r3
 811ea1e:	d105      	bne.n	811ea2c <tcp_process+0x68c>
 811ea20:	4b56      	ldr	r3, [pc, #344]	@ (811eb7c <tcp_process+0x7dc>)
 811ea22:	681b      	ldr	r3, [r3, #0]
 811ea24:	68db      	ldr	r3, [r3, #12]
 811ea26:	4a55      	ldr	r2, [pc, #340]	@ (811eb7c <tcp_process+0x7dc>)
 811ea28:	6013      	str	r3, [r2, #0]
 811ea2a:	e013      	b.n	811ea54 <tcp_process+0x6b4>
 811ea2c:	4b53      	ldr	r3, [pc, #332]	@ (811eb7c <tcp_process+0x7dc>)
 811ea2e:	681b      	ldr	r3, [r3, #0]
 811ea30:	613b      	str	r3, [r7, #16]
 811ea32:	e00c      	b.n	811ea4e <tcp_process+0x6ae>
 811ea34:	693b      	ldr	r3, [r7, #16]
 811ea36:	68db      	ldr	r3, [r3, #12]
 811ea38:	687a      	ldr	r2, [r7, #4]
 811ea3a:	429a      	cmp	r2, r3
 811ea3c:	d104      	bne.n	811ea48 <tcp_process+0x6a8>
 811ea3e:	687b      	ldr	r3, [r7, #4]
 811ea40:	68da      	ldr	r2, [r3, #12]
 811ea42:	693b      	ldr	r3, [r7, #16]
 811ea44:	60da      	str	r2, [r3, #12]
 811ea46:	e005      	b.n	811ea54 <tcp_process+0x6b4>
 811ea48:	693b      	ldr	r3, [r7, #16]
 811ea4a:	68db      	ldr	r3, [r3, #12]
 811ea4c:	613b      	str	r3, [r7, #16]
 811ea4e:	693b      	ldr	r3, [r7, #16]
 811ea50:	2b00      	cmp	r3, #0
 811ea52:	d1ef      	bne.n	811ea34 <tcp_process+0x694>
 811ea54:	687b      	ldr	r3, [r7, #4]
 811ea56:	2200      	movs	r2, #0
 811ea58:	60da      	str	r2, [r3, #12]
 811ea5a:	4b43      	ldr	r3, [pc, #268]	@ (811eb68 <tcp_process+0x7c8>)
 811ea5c:	2201      	movs	r2, #1
 811ea5e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 811ea60:	687b      	ldr	r3, [r7, #4]
 811ea62:	220a      	movs	r2, #10
 811ea64:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 811ea66:	4b41      	ldr	r3, [pc, #260]	@ (811eb6c <tcp_process+0x7cc>)
 811ea68:	681a      	ldr	r2, [r3, #0]
 811ea6a:	687b      	ldr	r3, [r7, #4]
 811ea6c:	60da      	str	r2, [r3, #12]
 811ea6e:	4a3f      	ldr	r2, [pc, #252]	@ (811eb6c <tcp_process+0x7cc>)
 811ea70:	687b      	ldr	r3, [r7, #4]
 811ea72:	6013      	str	r3, [r2, #0]
 811ea74:	f003 fa42 	bl	8121efc <tcp_timer_needed>
      }
      break;
 811ea78:	e06c      	b.n	811eb54 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 811ea7a:	6878      	ldr	r0, [r7, #4]
 811ea7c:	f000 f984 	bl	811ed88 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 811ea80:	4b3b      	ldr	r3, [pc, #236]	@ (811eb70 <tcp_process+0x7d0>)
 811ea82:	781b      	ldrb	r3, [r3, #0]
 811ea84:	f003 0310 	and.w	r3, r3, #16
 811ea88:	2b00      	cmp	r3, #0
 811ea8a:	d065      	beq.n	811eb58 <tcp_process+0x7b8>
 811ea8c:	687b      	ldr	r3, [r7, #4]
 811ea8e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 811ea90:	4b38      	ldr	r3, [pc, #224]	@ (811eb74 <tcp_process+0x7d4>)
 811ea92:	681b      	ldr	r3, [r3, #0]
 811ea94:	429a      	cmp	r2, r3
 811ea96:	d15f      	bne.n	811eb58 <tcp_process+0x7b8>
 811ea98:	687b      	ldr	r3, [r7, #4]
 811ea9a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 811ea9c:	2b00      	cmp	r3, #0
 811ea9e:	d15b      	bne.n	811eb58 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 811eaa0:	6878      	ldr	r0, [r7, #4]
 811eaa2:	f7fe fcf1 	bl	811d488 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 811eaa6:	4b35      	ldr	r3, [pc, #212]	@ (811eb7c <tcp_process+0x7dc>)
 811eaa8:	681b      	ldr	r3, [r3, #0]
 811eaaa:	687a      	ldr	r2, [r7, #4]
 811eaac:	429a      	cmp	r2, r3
 811eaae:	d105      	bne.n	811eabc <tcp_process+0x71c>
 811eab0:	4b32      	ldr	r3, [pc, #200]	@ (811eb7c <tcp_process+0x7dc>)
 811eab2:	681b      	ldr	r3, [r3, #0]
 811eab4:	68db      	ldr	r3, [r3, #12]
 811eab6:	4a31      	ldr	r2, [pc, #196]	@ (811eb7c <tcp_process+0x7dc>)
 811eab8:	6013      	str	r3, [r2, #0]
 811eaba:	e013      	b.n	811eae4 <tcp_process+0x744>
 811eabc:	4b2f      	ldr	r3, [pc, #188]	@ (811eb7c <tcp_process+0x7dc>)
 811eabe:	681b      	ldr	r3, [r3, #0]
 811eac0:	60fb      	str	r3, [r7, #12]
 811eac2:	e00c      	b.n	811eade <tcp_process+0x73e>
 811eac4:	68fb      	ldr	r3, [r7, #12]
 811eac6:	68db      	ldr	r3, [r3, #12]
 811eac8:	687a      	ldr	r2, [r7, #4]
 811eaca:	429a      	cmp	r2, r3
 811eacc:	d104      	bne.n	811ead8 <tcp_process+0x738>
 811eace:	687b      	ldr	r3, [r7, #4]
 811ead0:	68da      	ldr	r2, [r3, #12]
 811ead2:	68fb      	ldr	r3, [r7, #12]
 811ead4:	60da      	str	r2, [r3, #12]
 811ead6:	e005      	b.n	811eae4 <tcp_process+0x744>
 811ead8:	68fb      	ldr	r3, [r7, #12]
 811eada:	68db      	ldr	r3, [r3, #12]
 811eadc:	60fb      	str	r3, [r7, #12]
 811eade:	68fb      	ldr	r3, [r7, #12]
 811eae0:	2b00      	cmp	r3, #0
 811eae2:	d1ef      	bne.n	811eac4 <tcp_process+0x724>
 811eae4:	687b      	ldr	r3, [r7, #4]
 811eae6:	2200      	movs	r2, #0
 811eae8:	60da      	str	r2, [r3, #12]
 811eaea:	4b1f      	ldr	r3, [pc, #124]	@ (811eb68 <tcp_process+0x7c8>)
 811eaec:	2201      	movs	r2, #1
 811eaee:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 811eaf0:	687b      	ldr	r3, [r7, #4]
 811eaf2:	220a      	movs	r2, #10
 811eaf4:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 811eaf6:	4b1d      	ldr	r3, [pc, #116]	@ (811eb6c <tcp_process+0x7cc>)
 811eaf8:	681a      	ldr	r2, [r3, #0]
 811eafa:	687b      	ldr	r3, [r7, #4]
 811eafc:	60da      	str	r2, [r3, #12]
 811eafe:	4a1b      	ldr	r2, [pc, #108]	@ (811eb6c <tcp_process+0x7cc>)
 811eb00:	687b      	ldr	r3, [r7, #4]
 811eb02:	6013      	str	r3, [r2, #0]
 811eb04:	f003 f9fa 	bl	8121efc <tcp_timer_needed>
      }
      break;
 811eb08:	e026      	b.n	811eb58 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 811eb0a:	6878      	ldr	r0, [r7, #4]
 811eb0c:	f000 f93c 	bl	811ed88 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 811eb10:	4b17      	ldr	r3, [pc, #92]	@ (811eb70 <tcp_process+0x7d0>)
 811eb12:	781b      	ldrb	r3, [r3, #0]
 811eb14:	f003 0310 	and.w	r3, r3, #16
 811eb18:	2b00      	cmp	r3, #0
 811eb1a:	d01f      	beq.n	811eb5c <tcp_process+0x7bc>
 811eb1c:	687b      	ldr	r3, [r7, #4]
 811eb1e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 811eb20:	4b14      	ldr	r3, [pc, #80]	@ (811eb74 <tcp_process+0x7d4>)
 811eb22:	681b      	ldr	r3, [r3, #0]
 811eb24:	429a      	cmp	r2, r3
 811eb26:	d119      	bne.n	811eb5c <tcp_process+0x7bc>
 811eb28:	687b      	ldr	r3, [r7, #4]
 811eb2a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 811eb2c:	2b00      	cmp	r3, #0
 811eb2e:	d115      	bne.n	811eb5c <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 811eb30:	4b11      	ldr	r3, [pc, #68]	@ (811eb78 <tcp_process+0x7d8>)
 811eb32:	781b      	ldrb	r3, [r3, #0]
 811eb34:	f043 0310 	orr.w	r3, r3, #16
 811eb38:	b2da      	uxtb	r2, r3
 811eb3a:	4b0f      	ldr	r3, [pc, #60]	@ (811eb78 <tcp_process+0x7d8>)
 811eb3c:	701a      	strb	r2, [r3, #0]
      }
      break;
 811eb3e:	e00d      	b.n	811eb5c <tcp_process+0x7bc>
    default:
      break;
 811eb40:	bf00      	nop
 811eb42:	e00c      	b.n	811eb5e <tcp_process+0x7be>
      break;
 811eb44:	bf00      	nop
 811eb46:	e00a      	b.n	811eb5e <tcp_process+0x7be>
      break;
 811eb48:	bf00      	nop
 811eb4a:	e008      	b.n	811eb5e <tcp_process+0x7be>
      break;
 811eb4c:	bf00      	nop
 811eb4e:	e006      	b.n	811eb5e <tcp_process+0x7be>
      break;
 811eb50:	bf00      	nop
 811eb52:	e004      	b.n	811eb5e <tcp_process+0x7be>
      break;
 811eb54:	bf00      	nop
 811eb56:	e002      	b.n	811eb5e <tcp_process+0x7be>
      break;
 811eb58:	bf00      	nop
 811eb5a:	e000      	b.n	811eb5e <tcp_process+0x7be>
      break;
 811eb5c:	bf00      	nop
  }
  return ERR_OK;
 811eb5e:	2300      	movs	r3, #0
}
 811eb60:	4618      	mov	r0, r3
 811eb62:	3724      	adds	r7, #36	@ 0x24
 811eb64:	46bd      	mov	sp, r7
 811eb66:	bd90      	pop	{r4, r7, pc}
 811eb68:	1000e4ac 	.word	0x1000e4ac
 811eb6c:	1000e4a8 	.word	0x1000e4a8
 811eb70:	1000e4dc 	.word	0x1000e4dc
 811eb74:	1000e4d4 	.word	0x1000e4d4
 811eb78:	1000e4dd 	.word	0x1000e4dd
 811eb7c:	1000e4a4 	.word	0x1000e4a4

0811eb80 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 811eb80:	b590      	push	{r4, r7, lr}
 811eb82:	b085      	sub	sp, #20
 811eb84:	af00      	add	r7, sp, #0
 811eb86:	6078      	str	r0, [r7, #4]
 811eb88:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 811eb8a:	687b      	ldr	r3, [r7, #4]
 811eb8c:	2b00      	cmp	r3, #0
 811eb8e:	d106      	bne.n	811eb9e <tcp_oos_insert_segment+0x1e>
 811eb90:	4b3b      	ldr	r3, [pc, #236]	@ (811ec80 <tcp_oos_insert_segment+0x100>)
 811eb92:	f240 421f 	movw	r2, #1055	@ 0x41f
 811eb96:	493b      	ldr	r1, [pc, #236]	@ (811ec84 <tcp_oos_insert_segment+0x104>)
 811eb98:	483b      	ldr	r0, [pc, #236]	@ (811ec88 <tcp_oos_insert_segment+0x108>)
 811eb9a:	f005 f83f 	bl	8123c1c <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 811eb9e:	687b      	ldr	r3, [r7, #4]
 811eba0:	68db      	ldr	r3, [r3, #12]
 811eba2:	899b      	ldrh	r3, [r3, #12]
 811eba4:	b29b      	uxth	r3, r3
 811eba6:	4618      	mov	r0, r3
 811eba8:	f7f8 fa90 	bl	81170cc <lwip_htons>
 811ebac:	4603      	mov	r3, r0
 811ebae:	b2db      	uxtb	r3, r3
 811ebb0:	f003 0301 	and.w	r3, r3, #1
 811ebb4:	2b00      	cmp	r3, #0
 811ebb6:	d028      	beq.n	811ec0a <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 811ebb8:	6838      	ldr	r0, [r7, #0]
 811ebba:	f7fe f9fb 	bl	811cfb4 <tcp_segs_free>
    next = NULL;
 811ebbe:	2300      	movs	r3, #0
 811ebc0:	603b      	str	r3, [r7, #0]
 811ebc2:	e056      	b.n	811ec72 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 811ebc4:	683b      	ldr	r3, [r7, #0]
 811ebc6:	68db      	ldr	r3, [r3, #12]
 811ebc8:	899b      	ldrh	r3, [r3, #12]
 811ebca:	b29b      	uxth	r3, r3
 811ebcc:	4618      	mov	r0, r3
 811ebce:	f7f8 fa7d 	bl	81170cc <lwip_htons>
 811ebd2:	4603      	mov	r3, r0
 811ebd4:	b2db      	uxtb	r3, r3
 811ebd6:	f003 0301 	and.w	r3, r3, #1
 811ebda:	2b00      	cmp	r3, #0
 811ebdc:	d00d      	beq.n	811ebfa <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 811ebde:	687b      	ldr	r3, [r7, #4]
 811ebe0:	68db      	ldr	r3, [r3, #12]
 811ebe2:	899b      	ldrh	r3, [r3, #12]
 811ebe4:	b29c      	uxth	r4, r3
 811ebe6:	2001      	movs	r0, #1
 811ebe8:	f7f8 fa70 	bl	81170cc <lwip_htons>
 811ebec:	4603      	mov	r3, r0
 811ebee:	461a      	mov	r2, r3
 811ebf0:	687b      	ldr	r3, [r7, #4]
 811ebf2:	68db      	ldr	r3, [r3, #12]
 811ebf4:	4322      	orrs	r2, r4
 811ebf6:	b292      	uxth	r2, r2
 811ebf8:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 811ebfa:	683b      	ldr	r3, [r7, #0]
 811ebfc:	60fb      	str	r3, [r7, #12]
      next = next->next;
 811ebfe:	683b      	ldr	r3, [r7, #0]
 811ec00:	681b      	ldr	r3, [r3, #0]
 811ec02:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 811ec04:	68f8      	ldr	r0, [r7, #12]
 811ec06:	f7fe f9ea 	bl	811cfde <tcp_seg_free>
    while (next &&
 811ec0a:	683b      	ldr	r3, [r7, #0]
 811ec0c:	2b00      	cmp	r3, #0
 811ec0e:	d00e      	beq.n	811ec2e <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 811ec10:	687b      	ldr	r3, [r7, #4]
 811ec12:	891b      	ldrh	r3, [r3, #8]
 811ec14:	461a      	mov	r2, r3
 811ec16:	4b1d      	ldr	r3, [pc, #116]	@ (811ec8c <tcp_oos_insert_segment+0x10c>)
 811ec18:	681b      	ldr	r3, [r3, #0]
 811ec1a:	441a      	add	r2, r3
 811ec1c:	683b      	ldr	r3, [r7, #0]
 811ec1e:	68db      	ldr	r3, [r3, #12]
 811ec20:	685b      	ldr	r3, [r3, #4]
 811ec22:	6839      	ldr	r1, [r7, #0]
 811ec24:	8909      	ldrh	r1, [r1, #8]
 811ec26:	440b      	add	r3, r1
 811ec28:	1ad3      	subs	r3, r2, r3
    while (next &&
 811ec2a:	2b00      	cmp	r3, #0
 811ec2c:	daca      	bge.n	811ebc4 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 811ec2e:	683b      	ldr	r3, [r7, #0]
 811ec30:	2b00      	cmp	r3, #0
 811ec32:	d01e      	beq.n	811ec72 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 811ec34:	687b      	ldr	r3, [r7, #4]
 811ec36:	891b      	ldrh	r3, [r3, #8]
 811ec38:	461a      	mov	r2, r3
 811ec3a:	4b14      	ldr	r3, [pc, #80]	@ (811ec8c <tcp_oos_insert_segment+0x10c>)
 811ec3c:	681b      	ldr	r3, [r3, #0]
 811ec3e:	441a      	add	r2, r3
 811ec40:	683b      	ldr	r3, [r7, #0]
 811ec42:	68db      	ldr	r3, [r3, #12]
 811ec44:	685b      	ldr	r3, [r3, #4]
 811ec46:	1ad3      	subs	r3, r2, r3
    if (next &&
 811ec48:	2b00      	cmp	r3, #0
 811ec4a:	dd12      	ble.n	811ec72 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 811ec4c:	683b      	ldr	r3, [r7, #0]
 811ec4e:	68db      	ldr	r3, [r3, #12]
 811ec50:	685b      	ldr	r3, [r3, #4]
 811ec52:	b29a      	uxth	r2, r3
 811ec54:	4b0d      	ldr	r3, [pc, #52]	@ (811ec8c <tcp_oos_insert_segment+0x10c>)
 811ec56:	681b      	ldr	r3, [r3, #0]
 811ec58:	b29b      	uxth	r3, r3
 811ec5a:	1ad3      	subs	r3, r2, r3
 811ec5c:	b29a      	uxth	r2, r3
 811ec5e:	687b      	ldr	r3, [r7, #4]
 811ec60:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 811ec62:	687b      	ldr	r3, [r7, #4]
 811ec64:	685a      	ldr	r2, [r3, #4]
 811ec66:	687b      	ldr	r3, [r7, #4]
 811ec68:	891b      	ldrh	r3, [r3, #8]
 811ec6a:	4619      	mov	r1, r3
 811ec6c:	4610      	mov	r0, r2
 811ec6e:	f7fc fab1 	bl	811b1d4 <pbuf_realloc>
    }
  }
  cseg->next = next;
 811ec72:	687b      	ldr	r3, [r7, #4]
 811ec74:	683a      	ldr	r2, [r7, #0]
 811ec76:	601a      	str	r2, [r3, #0]
}
 811ec78:	bf00      	nop
 811ec7a:	3714      	adds	r7, #20
 811ec7c:	46bd      	mov	sp, r7
 811ec7e:	bd90      	pop	{r4, r7, pc}
 811ec80:	08127024 	.word	0x08127024
 811ec84:	08127324 	.word	0x08127324
 811ec88:	081270b0 	.word	0x081270b0
 811ec8c:	1000e4d0 	.word	0x1000e4d0

0811ec90 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 811ec90:	b5b0      	push	{r4, r5, r7, lr}
 811ec92:	b086      	sub	sp, #24
 811ec94:	af00      	add	r7, sp, #0
 811ec96:	60f8      	str	r0, [r7, #12]
 811ec98:	60b9      	str	r1, [r7, #8]
 811ec9a:	607a      	str	r2, [r7, #4]
 811ec9c:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 811ec9e:	e03e      	b.n	811ed1e <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 811eca0:	68bb      	ldr	r3, [r7, #8]
 811eca2:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 811eca4:	68bb      	ldr	r3, [r7, #8]
 811eca6:	681b      	ldr	r3, [r3, #0]
 811eca8:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 811ecaa:	697b      	ldr	r3, [r7, #20]
 811ecac:	685b      	ldr	r3, [r3, #4]
 811ecae:	4618      	mov	r0, r3
 811ecb0:	f7fc fca2 	bl	811b5f8 <pbuf_clen>
 811ecb4:	4603      	mov	r3, r0
 811ecb6:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 811ecb8:	68fb      	ldr	r3, [r7, #12]
 811ecba:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 811ecbe:	8a7a      	ldrh	r2, [r7, #18]
 811ecc0:	429a      	cmp	r2, r3
 811ecc2:	d906      	bls.n	811ecd2 <tcp_free_acked_segments+0x42>
 811ecc4:	4b2a      	ldr	r3, [pc, #168]	@ (811ed70 <tcp_free_acked_segments+0xe0>)
 811ecc6:	f240 4257 	movw	r2, #1111	@ 0x457
 811ecca:	492a      	ldr	r1, [pc, #168]	@ (811ed74 <tcp_free_acked_segments+0xe4>)
 811eccc:	482a      	ldr	r0, [pc, #168]	@ (811ed78 <tcp_free_acked_segments+0xe8>)
 811ecce:	f004 ffa5 	bl	8123c1c <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 811ecd2:	68fb      	ldr	r3, [r7, #12]
 811ecd4:	f8b3 2066 	ldrh.w	r2, [r3, #102]	@ 0x66
 811ecd8:	8a7b      	ldrh	r3, [r7, #18]
 811ecda:	1ad3      	subs	r3, r2, r3
 811ecdc:	b29a      	uxth	r2, r3
 811ecde:	68fb      	ldr	r3, [r7, #12]
 811ece0:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 811ece4:	697b      	ldr	r3, [r7, #20]
 811ece6:	891a      	ldrh	r2, [r3, #8]
 811ece8:	4b24      	ldr	r3, [pc, #144]	@ (811ed7c <tcp_free_acked_segments+0xec>)
 811ecea:	881b      	ldrh	r3, [r3, #0]
 811ecec:	4413      	add	r3, r2
 811ecee:	b29a      	uxth	r2, r3
 811ecf0:	4b22      	ldr	r3, [pc, #136]	@ (811ed7c <tcp_free_acked_segments+0xec>)
 811ecf2:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 811ecf4:	6978      	ldr	r0, [r7, #20]
 811ecf6:	f7fe f972 	bl	811cfde <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 811ecfa:	68fb      	ldr	r3, [r7, #12]
 811ecfc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 811ed00:	2b00      	cmp	r3, #0
 811ed02:	d00c      	beq.n	811ed1e <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 811ed04:	68bb      	ldr	r3, [r7, #8]
 811ed06:	2b00      	cmp	r3, #0
 811ed08:	d109      	bne.n	811ed1e <tcp_free_acked_segments+0x8e>
 811ed0a:	683b      	ldr	r3, [r7, #0]
 811ed0c:	2b00      	cmp	r3, #0
 811ed0e:	d106      	bne.n	811ed1e <tcp_free_acked_segments+0x8e>
 811ed10:	4b17      	ldr	r3, [pc, #92]	@ (811ed70 <tcp_free_acked_segments+0xe0>)
 811ed12:	f240 4261 	movw	r2, #1121	@ 0x461
 811ed16:	491a      	ldr	r1, [pc, #104]	@ (811ed80 <tcp_free_acked_segments+0xf0>)
 811ed18:	4817      	ldr	r0, [pc, #92]	@ (811ed78 <tcp_free_acked_segments+0xe8>)
 811ed1a:	f004 ff7f 	bl	8123c1c <iprintf>
  while (seg_list != NULL &&
 811ed1e:	68bb      	ldr	r3, [r7, #8]
 811ed20:	2b00      	cmp	r3, #0
 811ed22:	d020      	beq.n	811ed66 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 811ed24:	68bb      	ldr	r3, [r7, #8]
 811ed26:	68db      	ldr	r3, [r3, #12]
 811ed28:	685b      	ldr	r3, [r3, #4]
 811ed2a:	4618      	mov	r0, r3
 811ed2c:	f7f8 f9e3 	bl	81170f6 <lwip_htonl>
 811ed30:	4604      	mov	r4, r0
 811ed32:	68bb      	ldr	r3, [r7, #8]
 811ed34:	891b      	ldrh	r3, [r3, #8]
 811ed36:	461d      	mov	r5, r3
 811ed38:	68bb      	ldr	r3, [r7, #8]
 811ed3a:	68db      	ldr	r3, [r3, #12]
 811ed3c:	899b      	ldrh	r3, [r3, #12]
 811ed3e:	b29b      	uxth	r3, r3
 811ed40:	4618      	mov	r0, r3
 811ed42:	f7f8 f9c3 	bl	81170cc <lwip_htons>
 811ed46:	4603      	mov	r3, r0
 811ed48:	b2db      	uxtb	r3, r3
 811ed4a:	f003 0303 	and.w	r3, r3, #3
 811ed4e:	2b00      	cmp	r3, #0
 811ed50:	d001      	beq.n	811ed56 <tcp_free_acked_segments+0xc6>
 811ed52:	2301      	movs	r3, #1
 811ed54:	e000      	b.n	811ed58 <tcp_free_acked_segments+0xc8>
 811ed56:	2300      	movs	r3, #0
 811ed58:	442b      	add	r3, r5
 811ed5a:	18e2      	adds	r2, r4, r3
 811ed5c:	4b09      	ldr	r3, [pc, #36]	@ (811ed84 <tcp_free_acked_segments+0xf4>)
 811ed5e:	681b      	ldr	r3, [r3, #0]
 811ed60:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 811ed62:	2b00      	cmp	r3, #0
 811ed64:	dd9c      	ble.n	811eca0 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 811ed66:	68bb      	ldr	r3, [r7, #8]
}
 811ed68:	4618      	mov	r0, r3
 811ed6a:	3718      	adds	r7, #24
 811ed6c:	46bd      	mov	sp, r7
 811ed6e:	bdb0      	pop	{r4, r5, r7, pc}
 811ed70:	08127024 	.word	0x08127024
 811ed74:	0812734c 	.word	0x0812734c
 811ed78:	081270b0 	.word	0x081270b0
 811ed7c:	1000e4d8 	.word	0x1000e4d8
 811ed80:	08127374 	.word	0x08127374
 811ed84:	1000e4d4 	.word	0x1000e4d4

0811ed88 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 811ed88:	b5b0      	push	{r4, r5, r7, lr}
 811ed8a:	b094      	sub	sp, #80	@ 0x50
 811ed8c:	af00      	add	r7, sp, #0
 811ed8e:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 811ed90:	2300      	movs	r3, #0
 811ed92:	64bb      	str	r3, [r7, #72]	@ 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 811ed94:	687b      	ldr	r3, [r7, #4]
 811ed96:	2b00      	cmp	r3, #0
 811ed98:	d106      	bne.n	811eda8 <tcp_receive+0x20>
 811ed9a:	4b91      	ldr	r3, [pc, #580]	@ (811efe0 <tcp_receive+0x258>)
 811ed9c:	f240 427b 	movw	r2, #1147	@ 0x47b
 811eda0:	4990      	ldr	r1, [pc, #576]	@ (811efe4 <tcp_receive+0x25c>)
 811eda2:	4891      	ldr	r0, [pc, #580]	@ (811efe8 <tcp_receive+0x260>)
 811eda4:	f004 ff3a 	bl	8123c1c <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 811eda8:	687b      	ldr	r3, [r7, #4]
 811edaa:	7d1b      	ldrb	r3, [r3, #20]
 811edac:	2b03      	cmp	r3, #3
 811edae:	d806      	bhi.n	811edbe <tcp_receive+0x36>
 811edb0:	4b8b      	ldr	r3, [pc, #556]	@ (811efe0 <tcp_receive+0x258>)
 811edb2:	f240 427c 	movw	r2, #1148	@ 0x47c
 811edb6:	498d      	ldr	r1, [pc, #564]	@ (811efec <tcp_receive+0x264>)
 811edb8:	488b      	ldr	r0, [pc, #556]	@ (811efe8 <tcp_receive+0x260>)
 811edba:	f004 ff2f 	bl	8123c1c <iprintf>

  if (flags & TCP_ACK) {
 811edbe:	4b8c      	ldr	r3, [pc, #560]	@ (811eff0 <tcp_receive+0x268>)
 811edc0:	781b      	ldrb	r3, [r3, #0]
 811edc2:	f003 0310 	and.w	r3, r3, #16
 811edc6:	2b00      	cmp	r3, #0
 811edc8:	f000 8264 	beq.w	811f294 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 811edcc:	687b      	ldr	r3, [r7, #4]
 811edce:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 811edd2:	461a      	mov	r2, r3
 811edd4:	687b      	ldr	r3, [r7, #4]
 811edd6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 811edd8:	4413      	add	r3, r2
 811edda:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 811eddc:	687b      	ldr	r3, [r7, #4]
 811edde:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 811ede0:	4b84      	ldr	r3, [pc, #528]	@ (811eff4 <tcp_receive+0x26c>)
 811ede2:	681b      	ldr	r3, [r3, #0]
 811ede4:	1ad3      	subs	r3, r2, r3
 811ede6:	2b00      	cmp	r3, #0
 811ede8:	db1b      	blt.n	811ee22 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 811edea:	687b      	ldr	r3, [r7, #4]
 811edec:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 811edee:	4b81      	ldr	r3, [pc, #516]	@ (811eff4 <tcp_receive+0x26c>)
 811edf0:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 811edf2:	429a      	cmp	r2, r3
 811edf4:	d106      	bne.n	811ee04 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 811edf6:	687b      	ldr	r3, [r7, #4]
 811edf8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 811edfa:	4b7f      	ldr	r3, [pc, #508]	@ (811eff8 <tcp_receive+0x270>)
 811edfc:	681b      	ldr	r3, [r3, #0]
 811edfe:	1ad3      	subs	r3, r2, r3
 811ee00:	2b00      	cmp	r3, #0
 811ee02:	db0e      	blt.n	811ee22 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 811ee04:	687b      	ldr	r3, [r7, #4]
 811ee06:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 811ee08:	4b7b      	ldr	r3, [pc, #492]	@ (811eff8 <tcp_receive+0x270>)
 811ee0a:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 811ee0c:	429a      	cmp	r2, r3
 811ee0e:	d125      	bne.n	811ee5c <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 811ee10:	4b7a      	ldr	r3, [pc, #488]	@ (811effc <tcp_receive+0x274>)
 811ee12:	681b      	ldr	r3, [r3, #0]
 811ee14:	89db      	ldrh	r3, [r3, #14]
 811ee16:	b29a      	uxth	r2, r3
 811ee18:	687b      	ldr	r3, [r7, #4]
 811ee1a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 811ee1e:	429a      	cmp	r2, r3
 811ee20:	d91c      	bls.n	811ee5c <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 811ee22:	4b76      	ldr	r3, [pc, #472]	@ (811effc <tcp_receive+0x274>)
 811ee24:	681b      	ldr	r3, [r3, #0]
 811ee26:	89db      	ldrh	r3, [r3, #14]
 811ee28:	b29a      	uxth	r2, r3
 811ee2a:	687b      	ldr	r3, [r7, #4]
 811ee2c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 811ee30:	687b      	ldr	r3, [r7, #4]
 811ee32:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 811ee36:	687b      	ldr	r3, [r7, #4]
 811ee38:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 811ee3c:	429a      	cmp	r2, r3
 811ee3e:	d205      	bcs.n	811ee4c <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 811ee40:	687b      	ldr	r3, [r7, #4]
 811ee42:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 811ee46:	687b      	ldr	r3, [r7, #4]
 811ee48:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      }
      pcb->snd_wl1 = seqno;
 811ee4c:	4b69      	ldr	r3, [pc, #420]	@ (811eff4 <tcp_receive+0x26c>)
 811ee4e:	681a      	ldr	r2, [r3, #0]
 811ee50:	687b      	ldr	r3, [r7, #4]
 811ee52:	655a      	str	r2, [r3, #84]	@ 0x54
      pcb->snd_wl2 = ackno;
 811ee54:	4b68      	ldr	r3, [pc, #416]	@ (811eff8 <tcp_receive+0x270>)
 811ee56:	681a      	ldr	r2, [r3, #0]
 811ee58:	687b      	ldr	r3, [r7, #4]
 811ee5a:	659a      	str	r2, [r3, #88]	@ 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 811ee5c:	4b66      	ldr	r3, [pc, #408]	@ (811eff8 <tcp_receive+0x270>)
 811ee5e:	681a      	ldr	r2, [r3, #0]
 811ee60:	687b      	ldr	r3, [r7, #4]
 811ee62:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 811ee64:	1ad3      	subs	r3, r2, r3
 811ee66:	2b00      	cmp	r3, #0
 811ee68:	dc58      	bgt.n	811ef1c <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 811ee6a:	4b65      	ldr	r3, [pc, #404]	@ (811f000 <tcp_receive+0x278>)
 811ee6c:	881b      	ldrh	r3, [r3, #0]
 811ee6e:	2b00      	cmp	r3, #0
 811ee70:	d14b      	bne.n	811ef0a <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 811ee72:	687b      	ldr	r3, [r7, #4]
 811ee74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 811ee76:	687a      	ldr	r2, [r7, #4]
 811ee78:	f8b2 2060 	ldrh.w	r2, [r2, #96]	@ 0x60
 811ee7c:	4413      	add	r3, r2
 811ee7e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 811ee80:	429a      	cmp	r2, r3
 811ee82:	d142      	bne.n	811ef0a <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 811ee84:	687b      	ldr	r3, [r7, #4]
 811ee86:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 811ee8a:	2b00      	cmp	r3, #0
 811ee8c:	db3d      	blt.n	811ef0a <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 811ee8e:	687b      	ldr	r3, [r7, #4]
 811ee90:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 811ee92:	4b59      	ldr	r3, [pc, #356]	@ (811eff8 <tcp_receive+0x270>)
 811ee94:	681b      	ldr	r3, [r3, #0]
 811ee96:	429a      	cmp	r2, r3
 811ee98:	d137      	bne.n	811ef0a <tcp_receive+0x182>
              found_dupack = 1;
 811ee9a:	2301      	movs	r3, #1
 811ee9c:	64bb      	str	r3, [r7, #72]	@ 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 811ee9e:	687b      	ldr	r3, [r7, #4]
 811eea0:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 811eea4:	2bff      	cmp	r3, #255	@ 0xff
 811eea6:	d007      	beq.n	811eeb8 <tcp_receive+0x130>
                ++pcb->dupacks;
 811eea8:	687b      	ldr	r3, [r7, #4]
 811eeaa:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 811eeae:	3301      	adds	r3, #1
 811eeb0:	b2da      	uxtb	r2, r3
 811eeb2:	687b      	ldr	r3, [r7, #4]
 811eeb4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
              }
              if (pcb->dupacks > 3) {
 811eeb8:	687b      	ldr	r3, [r7, #4]
 811eeba:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 811eebe:	2b03      	cmp	r3, #3
 811eec0:	d91b      	bls.n	811eefa <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 811eec2:	687b      	ldr	r3, [r7, #4]
 811eec4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 811eec8:	687b      	ldr	r3, [r7, #4]
 811eeca:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 811eecc:	4413      	add	r3, r2
 811eece:	b29a      	uxth	r2, r3
 811eed0:	687b      	ldr	r3, [r7, #4]
 811eed2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 811eed6:	429a      	cmp	r2, r3
 811eed8:	d30a      	bcc.n	811eef0 <tcp_receive+0x168>
 811eeda:	687b      	ldr	r3, [r7, #4]
 811eedc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 811eee0:	687b      	ldr	r3, [r7, #4]
 811eee2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 811eee4:	4413      	add	r3, r2
 811eee6:	b29a      	uxth	r2, r3
 811eee8:	687b      	ldr	r3, [r7, #4]
 811eeea:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 811eeee:	e004      	b.n	811eefa <tcp_receive+0x172>
 811eef0:	687b      	ldr	r3, [r7, #4]
 811eef2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 811eef6:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
              }
              if (pcb->dupacks >= 3) {
 811eefa:	687b      	ldr	r3, [r7, #4]
 811eefc:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 811ef00:	2b02      	cmp	r3, #2
 811ef02:	d902      	bls.n	811ef0a <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 811ef04:	6878      	ldr	r0, [r7, #4]
 811ef06:	f002 fb3f 	bl	8121588 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 811ef0a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 811ef0c:	2b00      	cmp	r3, #0
 811ef0e:	f040 8161 	bne.w	811f1d4 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 811ef12:	687b      	ldr	r3, [r7, #4]
 811ef14:	2200      	movs	r2, #0
 811ef16:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 811ef1a:	e15b      	b.n	811f1d4 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 811ef1c:	4b36      	ldr	r3, [pc, #216]	@ (811eff8 <tcp_receive+0x270>)
 811ef1e:	681a      	ldr	r2, [r3, #0]
 811ef20:	687b      	ldr	r3, [r7, #4]
 811ef22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 811ef24:	1ad3      	subs	r3, r2, r3
 811ef26:	3b01      	subs	r3, #1
 811ef28:	2b00      	cmp	r3, #0
 811ef2a:	f2c0 814e 	blt.w	811f1ca <tcp_receive+0x442>
 811ef2e:	4b32      	ldr	r3, [pc, #200]	@ (811eff8 <tcp_receive+0x270>)
 811ef30:	681a      	ldr	r2, [r3, #0]
 811ef32:	687b      	ldr	r3, [r7, #4]
 811ef34:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 811ef36:	1ad3      	subs	r3, r2, r3
 811ef38:	2b00      	cmp	r3, #0
 811ef3a:	f300 8146 	bgt.w	811f1ca <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 811ef3e:	687b      	ldr	r3, [r7, #4]
 811ef40:	8b5b      	ldrh	r3, [r3, #26]
 811ef42:	f003 0304 	and.w	r3, r3, #4
 811ef46:	2b00      	cmp	r3, #0
 811ef48:	d010      	beq.n	811ef6c <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 811ef4a:	687b      	ldr	r3, [r7, #4]
 811ef4c:	8b5b      	ldrh	r3, [r3, #26]
 811ef4e:	f023 0304 	bic.w	r3, r3, #4
 811ef52:	b29a      	uxth	r2, r3
 811ef54:	687b      	ldr	r3, [r7, #4]
 811ef56:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 811ef58:	687b      	ldr	r3, [r7, #4]
 811ef5a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 811ef5e:	687b      	ldr	r3, [r7, #4]
 811ef60:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
        pcb->bytes_acked = 0;
 811ef64:	687b      	ldr	r3, [r7, #4]
 811ef66:	2200      	movs	r2, #0
 811ef68:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 811ef6c:	687b      	ldr	r3, [r7, #4]
 811ef6e:	2200      	movs	r2, #0
 811ef70:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 811ef74:	687b      	ldr	r3, [r7, #4]
 811ef76:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 811ef7a:	10db      	asrs	r3, r3, #3
 811ef7c:	b21b      	sxth	r3, r3
 811ef7e:	b29a      	uxth	r2, r3
 811ef80:	687b      	ldr	r3, [r7, #4]
 811ef82:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 811ef86:	b29b      	uxth	r3, r3
 811ef88:	4413      	add	r3, r2
 811ef8a:	b29b      	uxth	r3, r3
 811ef8c:	b21a      	sxth	r2, r3
 811ef8e:	687b      	ldr	r3, [r7, #4]
 811ef90:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 811ef94:	4b18      	ldr	r3, [pc, #96]	@ (811eff8 <tcp_receive+0x270>)
 811ef96:	681b      	ldr	r3, [r3, #0]
 811ef98:	b29a      	uxth	r2, r3
 811ef9a:	687b      	ldr	r3, [r7, #4]
 811ef9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 811ef9e:	b29b      	uxth	r3, r3
 811efa0:	1ad3      	subs	r3, r2, r3
 811efa2:	85fb      	strh	r3, [r7, #46]	@ 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 811efa4:	687b      	ldr	r3, [r7, #4]
 811efa6:	2200      	movs	r2, #0
 811efa8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      pcb->lastack = ackno;
 811efac:	4b12      	ldr	r3, [pc, #72]	@ (811eff8 <tcp_receive+0x270>)
 811efae:	681a      	ldr	r2, [r3, #0]
 811efb0:	687b      	ldr	r3, [r7, #4]
 811efb2:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 811efb4:	687b      	ldr	r3, [r7, #4]
 811efb6:	7d1b      	ldrb	r3, [r3, #20]
 811efb8:	2b03      	cmp	r3, #3
 811efba:	f240 8097 	bls.w	811f0ec <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 811efbe:	687b      	ldr	r3, [r7, #4]
 811efc0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 811efc4:	687b      	ldr	r3, [r7, #4]
 811efc6:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 811efca:	429a      	cmp	r2, r3
 811efcc:	d245      	bcs.n	811f05a <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 811efce:	687b      	ldr	r3, [r7, #4]
 811efd0:	8b5b      	ldrh	r3, [r3, #26]
 811efd2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 811efd6:	2b00      	cmp	r3, #0
 811efd8:	d014      	beq.n	811f004 <tcp_receive+0x27c>
 811efda:	2301      	movs	r3, #1
 811efdc:	e013      	b.n	811f006 <tcp_receive+0x27e>
 811efde:	bf00      	nop
 811efe0:	08127024 	.word	0x08127024
 811efe4:	08127394 	.word	0x08127394
 811efe8:	081270b0 	.word	0x081270b0
 811efec:	081273b0 	.word	0x081273b0
 811eff0:	1000e4dc 	.word	0x1000e4dc
 811eff4:	1000e4d0 	.word	0x1000e4d0
 811eff8:	1000e4d4 	.word	0x1000e4d4
 811effc:	1000e4c0 	.word	0x1000e4c0
 811f000:	1000e4da 	.word	0x1000e4da
 811f004:	2302      	movs	r3, #2
 811f006:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 811f00a:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 811f00e:	b29a      	uxth	r2, r3
 811f010:	687b      	ldr	r3, [r7, #4]
 811f012:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 811f014:	fb12 f303 	smulbb	r3, r2, r3
 811f018:	b29b      	uxth	r3, r3
 811f01a:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 811f01c:	4293      	cmp	r3, r2
 811f01e:	bf28      	it	cs
 811f020:	4613      	movcs	r3, r2
 811f022:	857b      	strh	r3, [r7, #42]	@ 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 811f024:	687b      	ldr	r3, [r7, #4]
 811f026:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 811f02a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 811f02c:	4413      	add	r3, r2
 811f02e:	b29a      	uxth	r2, r3
 811f030:	687b      	ldr	r3, [r7, #4]
 811f032:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 811f036:	429a      	cmp	r2, r3
 811f038:	d309      	bcc.n	811f04e <tcp_receive+0x2c6>
 811f03a:	687b      	ldr	r3, [r7, #4]
 811f03c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 811f040:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 811f042:	4413      	add	r3, r2
 811f044:	b29a      	uxth	r2, r3
 811f046:	687b      	ldr	r3, [r7, #4]
 811f048:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 811f04c:	e04e      	b.n	811f0ec <tcp_receive+0x364>
 811f04e:	687b      	ldr	r3, [r7, #4]
 811f050:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 811f054:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 811f058:	e048      	b.n	811f0ec <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 811f05a:	687b      	ldr	r3, [r7, #4]
 811f05c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 811f060:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 811f062:	4413      	add	r3, r2
 811f064:	b29a      	uxth	r2, r3
 811f066:	687b      	ldr	r3, [r7, #4]
 811f068:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 811f06c:	429a      	cmp	r2, r3
 811f06e:	d309      	bcc.n	811f084 <tcp_receive+0x2fc>
 811f070:	687b      	ldr	r3, [r7, #4]
 811f072:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 811f076:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 811f078:	4413      	add	r3, r2
 811f07a:	b29a      	uxth	r2, r3
 811f07c:	687b      	ldr	r3, [r7, #4]
 811f07e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 811f082:	e004      	b.n	811f08e <tcp_receive+0x306>
 811f084:	687b      	ldr	r3, [r7, #4]
 811f086:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 811f08a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 811f08e:	687b      	ldr	r3, [r7, #4]
 811f090:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 811f094:	687b      	ldr	r3, [r7, #4]
 811f096:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 811f09a:	429a      	cmp	r2, r3
 811f09c:	d326      	bcc.n	811f0ec <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 811f09e:	687b      	ldr	r3, [r7, #4]
 811f0a0:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 811f0a4:	687b      	ldr	r3, [r7, #4]
 811f0a6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 811f0aa:	1ad3      	subs	r3, r2, r3
 811f0ac:	b29a      	uxth	r2, r3
 811f0ae:	687b      	ldr	r3, [r7, #4]
 811f0b0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 811f0b4:	687b      	ldr	r3, [r7, #4]
 811f0b6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 811f0ba:	687b      	ldr	r3, [r7, #4]
 811f0bc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 811f0be:	4413      	add	r3, r2
 811f0c0:	b29a      	uxth	r2, r3
 811f0c2:	687b      	ldr	r3, [r7, #4]
 811f0c4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 811f0c8:	429a      	cmp	r2, r3
 811f0ca:	d30a      	bcc.n	811f0e2 <tcp_receive+0x35a>
 811f0cc:	687b      	ldr	r3, [r7, #4]
 811f0ce:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 811f0d2:	687b      	ldr	r3, [r7, #4]
 811f0d4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 811f0d6:	4413      	add	r3, r2
 811f0d8:	b29a      	uxth	r2, r3
 811f0da:	687b      	ldr	r3, [r7, #4]
 811f0dc:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 811f0e0:	e004      	b.n	811f0ec <tcp_receive+0x364>
 811f0e2:	687b      	ldr	r3, [r7, #4]
 811f0e4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 811f0e8:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 811f0ec:	687b      	ldr	r3, [r7, #4]
 811f0ee:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 811f0f0:	687b      	ldr	r3, [r7, #4]
 811f0f2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 811f0f4:	4a98      	ldr	r2, [pc, #608]	@ (811f358 <tcp_receive+0x5d0>)
 811f0f6:	6878      	ldr	r0, [r7, #4]
 811f0f8:	f7ff fdca 	bl	811ec90 <tcp_free_acked_segments>
 811f0fc:	4602      	mov	r2, r0
 811f0fe:	687b      	ldr	r3, [r7, #4]
 811f100:	671a      	str	r2, [r3, #112]	@ 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 811f102:	687b      	ldr	r3, [r7, #4]
 811f104:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
 811f106:	687b      	ldr	r3, [r7, #4]
 811f108:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 811f10a:	4a94      	ldr	r2, [pc, #592]	@ (811f35c <tcp_receive+0x5d4>)
 811f10c:	6878      	ldr	r0, [r7, #4]
 811f10e:	f7ff fdbf 	bl	811ec90 <tcp_free_acked_segments>
 811f112:	4602      	mov	r2, r0
 811f114:	687b      	ldr	r3, [r7, #4]
 811f116:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 811f118:	687b      	ldr	r3, [r7, #4]
 811f11a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 811f11c:	2b00      	cmp	r3, #0
 811f11e:	d104      	bne.n	811f12a <tcp_receive+0x3a2>
        pcb->rtime = -1;
 811f120:	687b      	ldr	r3, [r7, #4]
 811f122:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 811f126:	861a      	strh	r2, [r3, #48]	@ 0x30
 811f128:	e002      	b.n	811f130 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 811f12a:	687b      	ldr	r3, [r7, #4]
 811f12c:	2200      	movs	r2, #0
 811f12e:	861a      	strh	r2, [r3, #48]	@ 0x30
      }

      pcb->polltmr = 0;
 811f130:	687b      	ldr	r3, [r7, #4]
 811f132:	2200      	movs	r2, #0
 811f134:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 811f136:	687b      	ldr	r3, [r7, #4]
 811f138:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 811f13a:	2b00      	cmp	r3, #0
 811f13c:	d103      	bne.n	811f146 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 811f13e:	687b      	ldr	r3, [r7, #4]
 811f140:	2200      	movs	r2, #0
 811f142:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 811f146:	687b      	ldr	r3, [r7, #4]
 811f148:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 811f14c:	4b84      	ldr	r3, [pc, #528]	@ (811f360 <tcp_receive+0x5d8>)
 811f14e:	881b      	ldrh	r3, [r3, #0]
 811f150:	4413      	add	r3, r2
 811f152:	b29a      	uxth	r2, r3
 811f154:	687b      	ldr	r3, [r7, #4]
 811f156:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 811f15a:	687b      	ldr	r3, [r7, #4]
 811f15c:	8b5b      	ldrh	r3, [r3, #26]
 811f15e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 811f162:	2b00      	cmp	r3, #0
 811f164:	d035      	beq.n	811f1d2 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 811f166:	687b      	ldr	r3, [r7, #4]
 811f168:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 811f16a:	2b00      	cmp	r3, #0
 811f16c:	d118      	bne.n	811f1a0 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 811f16e:	687b      	ldr	r3, [r7, #4]
 811f170:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 811f172:	2b00      	cmp	r3, #0
 811f174:	d00c      	beq.n	811f190 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 811f176:	687b      	ldr	r3, [r7, #4]
 811f178:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 811f17a:	687b      	ldr	r3, [r7, #4]
 811f17c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 811f17e:	68db      	ldr	r3, [r3, #12]
 811f180:	685b      	ldr	r3, [r3, #4]
 811f182:	4618      	mov	r0, r3
 811f184:	f7f7 ffb7 	bl	81170f6 <lwip_htonl>
 811f188:	4603      	mov	r3, r0
 811f18a:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 811f18c:	2b00      	cmp	r3, #0
 811f18e:	dc20      	bgt.n	811f1d2 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 811f190:	687b      	ldr	r3, [r7, #4]
 811f192:	8b5b      	ldrh	r3, [r3, #26]
 811f194:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 811f198:	b29a      	uxth	r2, r3
 811f19a:	687b      	ldr	r3, [r7, #4]
 811f19c:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 811f19e:	e018      	b.n	811f1d2 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 811f1a0:	687b      	ldr	r3, [r7, #4]
 811f1a2:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 811f1a4:	687b      	ldr	r3, [r7, #4]
 811f1a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 811f1a8:	68db      	ldr	r3, [r3, #12]
 811f1aa:	685b      	ldr	r3, [r3, #4]
 811f1ac:	4618      	mov	r0, r3
 811f1ae:	f7f7 ffa2 	bl	81170f6 <lwip_htonl>
 811f1b2:	4603      	mov	r3, r0
 811f1b4:	1ae3      	subs	r3, r4, r3
 811f1b6:	2b00      	cmp	r3, #0
 811f1b8:	dc0b      	bgt.n	811f1d2 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 811f1ba:	687b      	ldr	r3, [r7, #4]
 811f1bc:	8b5b      	ldrh	r3, [r3, #26]
 811f1be:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 811f1c2:	b29a      	uxth	r2, r3
 811f1c4:	687b      	ldr	r3, [r7, #4]
 811f1c6:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 811f1c8:	e003      	b.n	811f1d2 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 811f1ca:	6878      	ldr	r0, [r7, #4]
 811f1cc:	f002 fbc8 	bl	8121960 <tcp_send_empty_ack>
 811f1d0:	e000      	b.n	811f1d4 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 811f1d2:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 811f1d4:	687b      	ldr	r3, [r7, #4]
 811f1d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 811f1d8:	2b00      	cmp	r3, #0
 811f1da:	d05b      	beq.n	811f294 <tcp_receive+0x50c>
 811f1dc:	687b      	ldr	r3, [r7, #4]
 811f1de:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 811f1e0:	4b60      	ldr	r3, [pc, #384]	@ (811f364 <tcp_receive+0x5dc>)
 811f1e2:	681b      	ldr	r3, [r3, #0]
 811f1e4:	1ad3      	subs	r3, r2, r3
 811f1e6:	2b00      	cmp	r3, #0
 811f1e8:	da54      	bge.n	811f294 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 811f1ea:	4b5f      	ldr	r3, [pc, #380]	@ (811f368 <tcp_receive+0x5e0>)
 811f1ec:	681b      	ldr	r3, [r3, #0]
 811f1ee:	b29a      	uxth	r2, r3
 811f1f0:	687b      	ldr	r3, [r7, #4]
 811f1f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 811f1f4:	b29b      	uxth	r3, r3
 811f1f6:	1ad3      	subs	r3, r2, r3
 811f1f8:	b29b      	uxth	r3, r3
 811f1fa:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 811f1fe:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 811f202:	687b      	ldr	r3, [r7, #4]
 811f204:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 811f208:	10db      	asrs	r3, r3, #3
 811f20a:	b21b      	sxth	r3, r3
 811f20c:	b29b      	uxth	r3, r3
 811f20e:	1ad3      	subs	r3, r2, r3
 811f210:	b29b      	uxth	r3, r3
 811f212:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 811f216:	687b      	ldr	r3, [r7, #4]
 811f218:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 811f21c:	b29a      	uxth	r2, r3
 811f21e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 811f222:	4413      	add	r3, r2
 811f224:	b29b      	uxth	r3, r3
 811f226:	b21a      	sxth	r2, r3
 811f228:	687b      	ldr	r3, [r7, #4]
 811f22a:	879a      	strh	r2, [r3, #60]	@ 0x3c
      if (m < 0) {
 811f22c:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 811f230:	2b00      	cmp	r3, #0
 811f232:	da05      	bge.n	811f240 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 811f234:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 811f238:	425b      	negs	r3, r3
 811f23a:	b29b      	uxth	r3, r3
 811f23c:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 811f240:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 811f244:	687b      	ldr	r3, [r7, #4]
 811f246:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 811f24a:	109b      	asrs	r3, r3, #2
 811f24c:	b21b      	sxth	r3, r3
 811f24e:	b29b      	uxth	r3, r3
 811f250:	1ad3      	subs	r3, r2, r3
 811f252:	b29b      	uxth	r3, r3
 811f254:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 811f258:	687b      	ldr	r3, [r7, #4]
 811f25a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 811f25e:	b29a      	uxth	r2, r3
 811f260:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 811f264:	4413      	add	r3, r2
 811f266:	b29b      	uxth	r3, r3
 811f268:	b21a      	sxth	r2, r3
 811f26a:	687b      	ldr	r3, [r7, #4]
 811f26c:	87da      	strh	r2, [r3, #62]	@ 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 811f26e:	687b      	ldr	r3, [r7, #4]
 811f270:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 811f274:	10db      	asrs	r3, r3, #3
 811f276:	b21b      	sxth	r3, r3
 811f278:	b29a      	uxth	r2, r3
 811f27a:	687b      	ldr	r3, [r7, #4]
 811f27c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 811f280:	b29b      	uxth	r3, r3
 811f282:	4413      	add	r3, r2
 811f284:	b29b      	uxth	r3, r3
 811f286:	b21a      	sxth	r2, r3
 811f288:	687b      	ldr	r3, [r7, #4]
 811f28a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 811f28e:	687b      	ldr	r3, [r7, #4]
 811f290:	2200      	movs	r2, #0
 811f292:	635a      	str	r2, [r3, #52]	@ 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 811f294:	4b35      	ldr	r3, [pc, #212]	@ (811f36c <tcp_receive+0x5e4>)
 811f296:	881b      	ldrh	r3, [r3, #0]
 811f298:	2b00      	cmp	r3, #0
 811f29a:	f000 84df 	beq.w	811fc5c <tcp_receive+0xed4>
 811f29e:	687b      	ldr	r3, [r7, #4]
 811f2a0:	7d1b      	ldrb	r3, [r3, #20]
 811f2a2:	2b06      	cmp	r3, #6
 811f2a4:	f200 84da 	bhi.w	811fc5c <tcp_receive+0xed4>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 811f2a8:	687b      	ldr	r3, [r7, #4]
 811f2aa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 811f2ac:	4b30      	ldr	r3, [pc, #192]	@ (811f370 <tcp_receive+0x5e8>)
 811f2ae:	681b      	ldr	r3, [r3, #0]
 811f2b0:	1ad3      	subs	r3, r2, r3
 811f2b2:	3b01      	subs	r3, #1
 811f2b4:	2b00      	cmp	r3, #0
 811f2b6:	f2c0 808f 	blt.w	811f3d8 <tcp_receive+0x650>
 811f2ba:	687b      	ldr	r3, [r7, #4]
 811f2bc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 811f2be:	4b2b      	ldr	r3, [pc, #172]	@ (811f36c <tcp_receive+0x5e4>)
 811f2c0:	881b      	ldrh	r3, [r3, #0]
 811f2c2:	4619      	mov	r1, r3
 811f2c4:	4b2a      	ldr	r3, [pc, #168]	@ (811f370 <tcp_receive+0x5e8>)
 811f2c6:	681b      	ldr	r3, [r3, #0]
 811f2c8:	440b      	add	r3, r1
 811f2ca:	1ad3      	subs	r3, r2, r3
 811f2cc:	3301      	adds	r3, #1
 811f2ce:	2b00      	cmp	r3, #0
 811f2d0:	f300 8082 	bgt.w	811f3d8 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 811f2d4:	4b27      	ldr	r3, [pc, #156]	@ (811f374 <tcp_receive+0x5ec>)
 811f2d6:	685b      	ldr	r3, [r3, #4]
 811f2d8:	647b      	str	r3, [r7, #68]	@ 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 811f2da:	687b      	ldr	r3, [r7, #4]
 811f2dc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 811f2de:	4b24      	ldr	r3, [pc, #144]	@ (811f370 <tcp_receive+0x5e8>)
 811f2e0:	681b      	ldr	r3, [r3, #0]
 811f2e2:	1ad3      	subs	r3, r2, r3
 811f2e4:	627b      	str	r3, [r7, #36]	@ 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 811f2e6:	4b23      	ldr	r3, [pc, #140]	@ (811f374 <tcp_receive+0x5ec>)
 811f2e8:	685b      	ldr	r3, [r3, #4]
 811f2ea:	2b00      	cmp	r3, #0
 811f2ec:	d106      	bne.n	811f2fc <tcp_receive+0x574>
 811f2ee:	4b22      	ldr	r3, [pc, #136]	@ (811f378 <tcp_receive+0x5f0>)
 811f2f0:	f240 5294 	movw	r2, #1428	@ 0x594
 811f2f4:	4921      	ldr	r1, [pc, #132]	@ (811f37c <tcp_receive+0x5f4>)
 811f2f6:	4822      	ldr	r0, [pc, #136]	@ (811f380 <tcp_receive+0x5f8>)
 811f2f8:	f004 fc90 	bl	8123c1c <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 811f2fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811f2fe:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 811f302:	4293      	cmp	r3, r2
 811f304:	d906      	bls.n	811f314 <tcp_receive+0x58c>
 811f306:	4b1c      	ldr	r3, [pc, #112]	@ (811f378 <tcp_receive+0x5f0>)
 811f308:	f240 5295 	movw	r2, #1429	@ 0x595
 811f30c:	491d      	ldr	r1, [pc, #116]	@ (811f384 <tcp_receive+0x5fc>)
 811f30e:	481c      	ldr	r0, [pc, #112]	@ (811f380 <tcp_receive+0x5f8>)
 811f310:	f004 fc84 	bl	8123c1c <iprintf>
      off = (u16_t)off32;
 811f314:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811f316:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 811f31a:	4b16      	ldr	r3, [pc, #88]	@ (811f374 <tcp_receive+0x5ec>)
 811f31c:	685b      	ldr	r3, [r3, #4]
 811f31e:	891b      	ldrh	r3, [r3, #8]
 811f320:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 811f324:	429a      	cmp	r2, r3
 811f326:	d906      	bls.n	811f336 <tcp_receive+0x5ae>
 811f328:	4b13      	ldr	r3, [pc, #76]	@ (811f378 <tcp_receive+0x5f0>)
 811f32a:	f240 5297 	movw	r2, #1431	@ 0x597
 811f32e:	4916      	ldr	r1, [pc, #88]	@ (811f388 <tcp_receive+0x600>)
 811f330:	4813      	ldr	r0, [pc, #76]	@ (811f380 <tcp_receive+0x5f8>)
 811f332:	f004 fc73 	bl	8123c1c <iprintf>
      inseg.len -= off;
 811f336:	4b0f      	ldr	r3, [pc, #60]	@ (811f374 <tcp_receive+0x5ec>)
 811f338:	891a      	ldrh	r2, [r3, #8]
 811f33a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 811f33e:	1ad3      	subs	r3, r2, r3
 811f340:	b29a      	uxth	r2, r3
 811f342:	4b0c      	ldr	r3, [pc, #48]	@ (811f374 <tcp_receive+0x5ec>)
 811f344:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 811f346:	4b0b      	ldr	r3, [pc, #44]	@ (811f374 <tcp_receive+0x5ec>)
 811f348:	685b      	ldr	r3, [r3, #4]
 811f34a:	891a      	ldrh	r2, [r3, #8]
 811f34c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 811f350:	1ad3      	subs	r3, r2, r3
 811f352:	847b      	strh	r3, [r7, #34]	@ 0x22
      while (p->len < off) {
 811f354:	e02a      	b.n	811f3ac <tcp_receive+0x624>
 811f356:	bf00      	nop
 811f358:	081273cc 	.word	0x081273cc
 811f35c:	081273d4 	.word	0x081273d4
 811f360:	1000e4d8 	.word	0x1000e4d8
 811f364:	1000e4d4 	.word	0x1000e4d4
 811f368:	1000e498 	.word	0x1000e498
 811f36c:	1000e4da 	.word	0x1000e4da
 811f370:	1000e4d0 	.word	0x1000e4d0
 811f374:	1000e4b0 	.word	0x1000e4b0
 811f378:	08127024 	.word	0x08127024
 811f37c:	081273dc 	.word	0x081273dc
 811f380:	081270b0 	.word	0x081270b0
 811f384:	081273ec 	.word	0x081273ec
 811f388:	081273fc 	.word	0x081273fc
        off -= p->len;
 811f38c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 811f38e:	895b      	ldrh	r3, [r3, #10]
 811f390:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 811f394:	1ad3      	subs	r3, r2, r3
 811f396:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 811f39a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 811f39c:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 811f39e:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 811f3a0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 811f3a2:	2200      	movs	r2, #0
 811f3a4:	815a      	strh	r2, [r3, #10]
        p = p->next;
 811f3a6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 811f3a8:	681b      	ldr	r3, [r3, #0]
 811f3aa:	647b      	str	r3, [r7, #68]	@ 0x44
      while (p->len < off) {
 811f3ac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 811f3ae:	895b      	ldrh	r3, [r3, #10]
 811f3b0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 811f3b4:	429a      	cmp	r2, r3
 811f3b6:	d8e9      	bhi.n	811f38c <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 811f3b8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 811f3bc:	4619      	mov	r1, r3
 811f3be:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 811f3c0:	f7fc f806 	bl	811b3d0 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 811f3c4:	687b      	ldr	r3, [r7, #4]
 811f3c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 811f3c8:	4a90      	ldr	r2, [pc, #576]	@ (811f60c <tcp_receive+0x884>)
 811f3ca:	6013      	str	r3, [r2, #0]
 811f3cc:	4b90      	ldr	r3, [pc, #576]	@ (811f610 <tcp_receive+0x888>)
 811f3ce:	68db      	ldr	r3, [r3, #12]
 811f3d0:	4a8e      	ldr	r2, [pc, #568]	@ (811f60c <tcp_receive+0x884>)
 811f3d2:	6812      	ldr	r2, [r2, #0]
 811f3d4:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 811f3d6:	e00d      	b.n	811f3f4 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 811f3d8:	4b8c      	ldr	r3, [pc, #560]	@ (811f60c <tcp_receive+0x884>)
 811f3da:	681a      	ldr	r2, [r3, #0]
 811f3dc:	687b      	ldr	r3, [r7, #4]
 811f3de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 811f3e0:	1ad3      	subs	r3, r2, r3
 811f3e2:	2b00      	cmp	r3, #0
 811f3e4:	da06      	bge.n	811f3f4 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 811f3e6:	687b      	ldr	r3, [r7, #4]
 811f3e8:	8b5b      	ldrh	r3, [r3, #26]
 811f3ea:	f043 0302 	orr.w	r3, r3, #2
 811f3ee:	b29a      	uxth	r2, r3
 811f3f0:	687b      	ldr	r3, [r7, #4]
 811f3f2:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 811f3f4:	4b85      	ldr	r3, [pc, #532]	@ (811f60c <tcp_receive+0x884>)
 811f3f6:	681a      	ldr	r2, [r3, #0]
 811f3f8:	687b      	ldr	r3, [r7, #4]
 811f3fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 811f3fc:	1ad3      	subs	r3, r2, r3
 811f3fe:	2b00      	cmp	r3, #0
 811f400:	f2c0 8427 	blt.w	811fc52 <tcp_receive+0xeca>
 811f404:	4b81      	ldr	r3, [pc, #516]	@ (811f60c <tcp_receive+0x884>)
 811f406:	681a      	ldr	r2, [r3, #0]
 811f408:	687b      	ldr	r3, [r7, #4]
 811f40a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 811f40c:	6879      	ldr	r1, [r7, #4]
 811f40e:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 811f410:	440b      	add	r3, r1
 811f412:	1ad3      	subs	r3, r2, r3
 811f414:	3301      	adds	r3, #1
 811f416:	2b00      	cmp	r3, #0
 811f418:	f300 841b 	bgt.w	811fc52 <tcp_receive+0xeca>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 811f41c:	687b      	ldr	r3, [r7, #4]
 811f41e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 811f420:	4b7a      	ldr	r3, [pc, #488]	@ (811f60c <tcp_receive+0x884>)
 811f422:	681b      	ldr	r3, [r3, #0]
 811f424:	429a      	cmp	r2, r3
 811f426:	f040 8298 	bne.w	811f95a <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 811f42a:	4b79      	ldr	r3, [pc, #484]	@ (811f610 <tcp_receive+0x888>)
 811f42c:	891c      	ldrh	r4, [r3, #8]
 811f42e:	4b78      	ldr	r3, [pc, #480]	@ (811f610 <tcp_receive+0x888>)
 811f430:	68db      	ldr	r3, [r3, #12]
 811f432:	899b      	ldrh	r3, [r3, #12]
 811f434:	b29b      	uxth	r3, r3
 811f436:	4618      	mov	r0, r3
 811f438:	f7f7 fe48 	bl	81170cc <lwip_htons>
 811f43c:	4603      	mov	r3, r0
 811f43e:	b2db      	uxtb	r3, r3
 811f440:	f003 0303 	and.w	r3, r3, #3
 811f444:	2b00      	cmp	r3, #0
 811f446:	d001      	beq.n	811f44c <tcp_receive+0x6c4>
 811f448:	2301      	movs	r3, #1
 811f44a:	e000      	b.n	811f44e <tcp_receive+0x6c6>
 811f44c:	2300      	movs	r3, #0
 811f44e:	4423      	add	r3, r4
 811f450:	b29a      	uxth	r2, r3
 811f452:	4b70      	ldr	r3, [pc, #448]	@ (811f614 <tcp_receive+0x88c>)
 811f454:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 811f456:	687b      	ldr	r3, [r7, #4]
 811f458:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 811f45a:	4b6e      	ldr	r3, [pc, #440]	@ (811f614 <tcp_receive+0x88c>)
 811f45c:	881b      	ldrh	r3, [r3, #0]
 811f45e:	429a      	cmp	r2, r3
 811f460:	d274      	bcs.n	811f54c <tcp_receive+0x7c4>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 811f462:	4b6b      	ldr	r3, [pc, #428]	@ (811f610 <tcp_receive+0x888>)
 811f464:	68db      	ldr	r3, [r3, #12]
 811f466:	899b      	ldrh	r3, [r3, #12]
 811f468:	b29b      	uxth	r3, r3
 811f46a:	4618      	mov	r0, r3
 811f46c:	f7f7 fe2e 	bl	81170cc <lwip_htons>
 811f470:	4603      	mov	r3, r0
 811f472:	b2db      	uxtb	r3, r3
 811f474:	f003 0301 	and.w	r3, r3, #1
 811f478:	2b00      	cmp	r3, #0
 811f47a:	d01e      	beq.n	811f4ba <tcp_receive+0x732>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 811f47c:	4b64      	ldr	r3, [pc, #400]	@ (811f610 <tcp_receive+0x888>)
 811f47e:	68db      	ldr	r3, [r3, #12]
 811f480:	899b      	ldrh	r3, [r3, #12]
 811f482:	b29b      	uxth	r3, r3
 811f484:	b21b      	sxth	r3, r3
 811f486:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 811f48a:	b21c      	sxth	r4, r3
 811f48c:	4b60      	ldr	r3, [pc, #384]	@ (811f610 <tcp_receive+0x888>)
 811f48e:	68db      	ldr	r3, [r3, #12]
 811f490:	899b      	ldrh	r3, [r3, #12]
 811f492:	b29b      	uxth	r3, r3
 811f494:	4618      	mov	r0, r3
 811f496:	f7f7 fe19 	bl	81170cc <lwip_htons>
 811f49a:	4603      	mov	r3, r0
 811f49c:	b2db      	uxtb	r3, r3
 811f49e:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 811f4a2:	b29b      	uxth	r3, r3
 811f4a4:	4618      	mov	r0, r3
 811f4a6:	f7f7 fe11 	bl	81170cc <lwip_htons>
 811f4aa:	4603      	mov	r3, r0
 811f4ac:	b21b      	sxth	r3, r3
 811f4ae:	4323      	orrs	r3, r4
 811f4b0:	b21a      	sxth	r2, r3
 811f4b2:	4b57      	ldr	r3, [pc, #348]	@ (811f610 <tcp_receive+0x888>)
 811f4b4:	68db      	ldr	r3, [r3, #12]
 811f4b6:	b292      	uxth	r2, r2
 811f4b8:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 811f4ba:	687b      	ldr	r3, [r7, #4]
 811f4bc:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 811f4be:	4b54      	ldr	r3, [pc, #336]	@ (811f610 <tcp_receive+0x888>)
 811f4c0:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 811f4c2:	4b53      	ldr	r3, [pc, #332]	@ (811f610 <tcp_receive+0x888>)
 811f4c4:	68db      	ldr	r3, [r3, #12]
 811f4c6:	899b      	ldrh	r3, [r3, #12]
 811f4c8:	b29b      	uxth	r3, r3
 811f4ca:	4618      	mov	r0, r3
 811f4cc:	f7f7 fdfe 	bl	81170cc <lwip_htons>
 811f4d0:	4603      	mov	r3, r0
 811f4d2:	b2db      	uxtb	r3, r3
 811f4d4:	f003 0302 	and.w	r3, r3, #2
 811f4d8:	2b00      	cmp	r3, #0
 811f4da:	d005      	beq.n	811f4e8 <tcp_receive+0x760>
            inseg.len -= 1;
 811f4dc:	4b4c      	ldr	r3, [pc, #304]	@ (811f610 <tcp_receive+0x888>)
 811f4de:	891b      	ldrh	r3, [r3, #8]
 811f4e0:	3b01      	subs	r3, #1
 811f4e2:	b29a      	uxth	r2, r3
 811f4e4:	4b4a      	ldr	r3, [pc, #296]	@ (811f610 <tcp_receive+0x888>)
 811f4e6:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 811f4e8:	4b49      	ldr	r3, [pc, #292]	@ (811f610 <tcp_receive+0x888>)
 811f4ea:	685b      	ldr	r3, [r3, #4]
 811f4ec:	4a48      	ldr	r2, [pc, #288]	@ (811f610 <tcp_receive+0x888>)
 811f4ee:	8912      	ldrh	r2, [r2, #8]
 811f4f0:	4611      	mov	r1, r2
 811f4f2:	4618      	mov	r0, r3
 811f4f4:	f7fb fe6e 	bl	811b1d4 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 811f4f8:	4b45      	ldr	r3, [pc, #276]	@ (811f610 <tcp_receive+0x888>)
 811f4fa:	891c      	ldrh	r4, [r3, #8]
 811f4fc:	4b44      	ldr	r3, [pc, #272]	@ (811f610 <tcp_receive+0x888>)
 811f4fe:	68db      	ldr	r3, [r3, #12]
 811f500:	899b      	ldrh	r3, [r3, #12]
 811f502:	b29b      	uxth	r3, r3
 811f504:	4618      	mov	r0, r3
 811f506:	f7f7 fde1 	bl	81170cc <lwip_htons>
 811f50a:	4603      	mov	r3, r0
 811f50c:	b2db      	uxtb	r3, r3
 811f50e:	f003 0303 	and.w	r3, r3, #3
 811f512:	2b00      	cmp	r3, #0
 811f514:	d001      	beq.n	811f51a <tcp_receive+0x792>
 811f516:	2301      	movs	r3, #1
 811f518:	e000      	b.n	811f51c <tcp_receive+0x794>
 811f51a:	2300      	movs	r3, #0
 811f51c:	4423      	add	r3, r4
 811f51e:	b29a      	uxth	r2, r3
 811f520:	4b3c      	ldr	r3, [pc, #240]	@ (811f614 <tcp_receive+0x88c>)
 811f522:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 811f524:	4b3b      	ldr	r3, [pc, #236]	@ (811f614 <tcp_receive+0x88c>)
 811f526:	881b      	ldrh	r3, [r3, #0]
 811f528:	461a      	mov	r2, r3
 811f52a:	4b38      	ldr	r3, [pc, #224]	@ (811f60c <tcp_receive+0x884>)
 811f52c:	681b      	ldr	r3, [r3, #0]
 811f52e:	441a      	add	r2, r3
 811f530:	687b      	ldr	r3, [r7, #4]
 811f532:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 811f534:	6879      	ldr	r1, [r7, #4]
 811f536:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 811f538:	440b      	add	r3, r1
 811f53a:	429a      	cmp	r2, r3
 811f53c:	d006      	beq.n	811f54c <tcp_receive+0x7c4>
 811f53e:	4b36      	ldr	r3, [pc, #216]	@ (811f618 <tcp_receive+0x890>)
 811f540:	f240 52cb 	movw	r2, #1483	@ 0x5cb
 811f544:	4935      	ldr	r1, [pc, #212]	@ (811f61c <tcp_receive+0x894>)
 811f546:	4836      	ldr	r0, [pc, #216]	@ (811f620 <tcp_receive+0x898>)
 811f548:	f004 fb68 	bl	8123c1c <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 811f54c:	687b      	ldr	r3, [r7, #4]
 811f54e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 811f550:	2b00      	cmp	r3, #0
 811f552:	f000 80e6 	beq.w	811f722 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 811f556:	4b2e      	ldr	r3, [pc, #184]	@ (811f610 <tcp_receive+0x888>)
 811f558:	68db      	ldr	r3, [r3, #12]
 811f55a:	899b      	ldrh	r3, [r3, #12]
 811f55c:	b29b      	uxth	r3, r3
 811f55e:	4618      	mov	r0, r3
 811f560:	f7f7 fdb4 	bl	81170cc <lwip_htons>
 811f564:	4603      	mov	r3, r0
 811f566:	b2db      	uxtb	r3, r3
 811f568:	f003 0301 	and.w	r3, r3, #1
 811f56c:	2b00      	cmp	r3, #0
 811f56e:	d010      	beq.n	811f592 <tcp_receive+0x80a>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 811f570:	e00a      	b.n	811f588 <tcp_receive+0x800>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 811f572:	687b      	ldr	r3, [r7, #4]
 811f574:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 811f576:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 811f578:	687b      	ldr	r3, [r7, #4]
 811f57a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 811f57c:	681a      	ldr	r2, [r3, #0]
 811f57e:	687b      	ldr	r3, [r7, #4]
 811f580:	675a      	str	r2, [r3, #116]	@ 0x74
              tcp_seg_free(old_ooseq);
 811f582:	68f8      	ldr	r0, [r7, #12]
 811f584:	f7fd fd2b 	bl	811cfde <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 811f588:	687b      	ldr	r3, [r7, #4]
 811f58a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 811f58c:	2b00      	cmp	r3, #0
 811f58e:	d1f0      	bne.n	811f572 <tcp_receive+0x7ea>
 811f590:	e0c7      	b.n	811f722 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 811f592:	687b      	ldr	r3, [r7, #4]
 811f594:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 811f596:	63fb      	str	r3, [r7, #60]	@ 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 811f598:	e051      	b.n	811f63e <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 811f59a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 811f59c:	68db      	ldr	r3, [r3, #12]
 811f59e:	899b      	ldrh	r3, [r3, #12]
 811f5a0:	b29b      	uxth	r3, r3
 811f5a2:	4618      	mov	r0, r3
 811f5a4:	f7f7 fd92 	bl	81170cc <lwip_htons>
 811f5a8:	4603      	mov	r3, r0
 811f5aa:	b2db      	uxtb	r3, r3
 811f5ac:	f003 0301 	and.w	r3, r3, #1
 811f5b0:	2b00      	cmp	r3, #0
 811f5b2:	d03c      	beq.n	811f62e <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 811f5b4:	4b16      	ldr	r3, [pc, #88]	@ (811f610 <tcp_receive+0x888>)
 811f5b6:	68db      	ldr	r3, [r3, #12]
 811f5b8:	899b      	ldrh	r3, [r3, #12]
 811f5ba:	b29b      	uxth	r3, r3
 811f5bc:	4618      	mov	r0, r3
 811f5be:	f7f7 fd85 	bl	81170cc <lwip_htons>
 811f5c2:	4603      	mov	r3, r0
 811f5c4:	b2db      	uxtb	r3, r3
 811f5c6:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 811f5ca:	2b00      	cmp	r3, #0
 811f5cc:	d12f      	bne.n	811f62e <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 811f5ce:	4b10      	ldr	r3, [pc, #64]	@ (811f610 <tcp_receive+0x888>)
 811f5d0:	68db      	ldr	r3, [r3, #12]
 811f5d2:	899b      	ldrh	r3, [r3, #12]
 811f5d4:	b29c      	uxth	r4, r3
 811f5d6:	2001      	movs	r0, #1
 811f5d8:	f7f7 fd78 	bl	81170cc <lwip_htons>
 811f5dc:	4603      	mov	r3, r0
 811f5de:	461a      	mov	r2, r3
 811f5e0:	4b0b      	ldr	r3, [pc, #44]	@ (811f610 <tcp_receive+0x888>)
 811f5e2:	68db      	ldr	r3, [r3, #12]
 811f5e4:	4322      	orrs	r2, r4
 811f5e6:	b292      	uxth	r2, r2
 811f5e8:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 811f5ea:	4b09      	ldr	r3, [pc, #36]	@ (811f610 <tcp_receive+0x888>)
 811f5ec:	891c      	ldrh	r4, [r3, #8]
 811f5ee:	4b08      	ldr	r3, [pc, #32]	@ (811f610 <tcp_receive+0x888>)
 811f5f0:	68db      	ldr	r3, [r3, #12]
 811f5f2:	899b      	ldrh	r3, [r3, #12]
 811f5f4:	b29b      	uxth	r3, r3
 811f5f6:	4618      	mov	r0, r3
 811f5f8:	f7f7 fd68 	bl	81170cc <lwip_htons>
 811f5fc:	4603      	mov	r3, r0
 811f5fe:	b2db      	uxtb	r3, r3
 811f600:	f003 0303 	and.w	r3, r3, #3
 811f604:	2b00      	cmp	r3, #0
 811f606:	d00d      	beq.n	811f624 <tcp_receive+0x89c>
 811f608:	2301      	movs	r3, #1
 811f60a:	e00c      	b.n	811f626 <tcp_receive+0x89e>
 811f60c:	1000e4d0 	.word	0x1000e4d0
 811f610:	1000e4b0 	.word	0x1000e4b0
 811f614:	1000e4da 	.word	0x1000e4da
 811f618:	08127024 	.word	0x08127024
 811f61c:	0812740c 	.word	0x0812740c
 811f620:	081270b0 	.word	0x081270b0
 811f624:	2300      	movs	r3, #0
 811f626:	4423      	add	r3, r4
 811f628:	b29a      	uxth	r2, r3
 811f62a:	4b98      	ldr	r3, [pc, #608]	@ (811f88c <tcp_receive+0xb04>)
 811f62c:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 811f62e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 811f630:	613b      	str	r3, [r7, #16]
              next = next->next;
 811f632:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 811f634:	681b      	ldr	r3, [r3, #0]
 811f636:	63fb      	str	r3, [r7, #60]	@ 0x3c
              tcp_seg_free(tmp);
 811f638:	6938      	ldr	r0, [r7, #16]
 811f63a:	f7fd fcd0 	bl	811cfde <tcp_seg_free>
            while (next &&
 811f63e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 811f640:	2b00      	cmp	r3, #0
 811f642:	d00e      	beq.n	811f662 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 811f644:	4b91      	ldr	r3, [pc, #580]	@ (811f88c <tcp_receive+0xb04>)
 811f646:	881b      	ldrh	r3, [r3, #0]
 811f648:	461a      	mov	r2, r3
 811f64a:	4b91      	ldr	r3, [pc, #580]	@ (811f890 <tcp_receive+0xb08>)
 811f64c:	681b      	ldr	r3, [r3, #0]
 811f64e:	441a      	add	r2, r3
 811f650:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 811f652:	68db      	ldr	r3, [r3, #12]
 811f654:	685b      	ldr	r3, [r3, #4]
 811f656:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 811f658:	8909      	ldrh	r1, [r1, #8]
 811f65a:	440b      	add	r3, r1
 811f65c:	1ad3      	subs	r3, r2, r3
            while (next &&
 811f65e:	2b00      	cmp	r3, #0
 811f660:	da9b      	bge.n	811f59a <tcp_receive+0x812>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 811f662:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 811f664:	2b00      	cmp	r3, #0
 811f666:	d059      	beq.n	811f71c <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 811f668:	4b88      	ldr	r3, [pc, #544]	@ (811f88c <tcp_receive+0xb04>)
 811f66a:	881b      	ldrh	r3, [r3, #0]
 811f66c:	461a      	mov	r2, r3
 811f66e:	4b88      	ldr	r3, [pc, #544]	@ (811f890 <tcp_receive+0xb08>)
 811f670:	681b      	ldr	r3, [r3, #0]
 811f672:	441a      	add	r2, r3
 811f674:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 811f676:	68db      	ldr	r3, [r3, #12]
 811f678:	685b      	ldr	r3, [r3, #4]
 811f67a:	1ad3      	subs	r3, r2, r3
            if (next &&
 811f67c:	2b00      	cmp	r3, #0
 811f67e:	dd4d      	ble.n	811f71c <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 811f680:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 811f682:	68db      	ldr	r3, [r3, #12]
 811f684:	685b      	ldr	r3, [r3, #4]
 811f686:	b29a      	uxth	r2, r3
 811f688:	4b81      	ldr	r3, [pc, #516]	@ (811f890 <tcp_receive+0xb08>)
 811f68a:	681b      	ldr	r3, [r3, #0]
 811f68c:	b29b      	uxth	r3, r3
 811f68e:	1ad3      	subs	r3, r2, r3
 811f690:	b29a      	uxth	r2, r3
 811f692:	4b80      	ldr	r3, [pc, #512]	@ (811f894 <tcp_receive+0xb0c>)
 811f694:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 811f696:	4b7f      	ldr	r3, [pc, #508]	@ (811f894 <tcp_receive+0xb0c>)
 811f698:	68db      	ldr	r3, [r3, #12]
 811f69a:	899b      	ldrh	r3, [r3, #12]
 811f69c:	b29b      	uxth	r3, r3
 811f69e:	4618      	mov	r0, r3
 811f6a0:	f7f7 fd14 	bl	81170cc <lwip_htons>
 811f6a4:	4603      	mov	r3, r0
 811f6a6:	b2db      	uxtb	r3, r3
 811f6a8:	f003 0302 	and.w	r3, r3, #2
 811f6ac:	2b00      	cmp	r3, #0
 811f6ae:	d005      	beq.n	811f6bc <tcp_receive+0x934>
                inseg.len -= 1;
 811f6b0:	4b78      	ldr	r3, [pc, #480]	@ (811f894 <tcp_receive+0xb0c>)
 811f6b2:	891b      	ldrh	r3, [r3, #8]
 811f6b4:	3b01      	subs	r3, #1
 811f6b6:	b29a      	uxth	r2, r3
 811f6b8:	4b76      	ldr	r3, [pc, #472]	@ (811f894 <tcp_receive+0xb0c>)
 811f6ba:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 811f6bc:	4b75      	ldr	r3, [pc, #468]	@ (811f894 <tcp_receive+0xb0c>)
 811f6be:	685b      	ldr	r3, [r3, #4]
 811f6c0:	4a74      	ldr	r2, [pc, #464]	@ (811f894 <tcp_receive+0xb0c>)
 811f6c2:	8912      	ldrh	r2, [r2, #8]
 811f6c4:	4611      	mov	r1, r2
 811f6c6:	4618      	mov	r0, r3
 811f6c8:	f7fb fd84 	bl	811b1d4 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 811f6cc:	4b71      	ldr	r3, [pc, #452]	@ (811f894 <tcp_receive+0xb0c>)
 811f6ce:	891c      	ldrh	r4, [r3, #8]
 811f6d0:	4b70      	ldr	r3, [pc, #448]	@ (811f894 <tcp_receive+0xb0c>)
 811f6d2:	68db      	ldr	r3, [r3, #12]
 811f6d4:	899b      	ldrh	r3, [r3, #12]
 811f6d6:	b29b      	uxth	r3, r3
 811f6d8:	4618      	mov	r0, r3
 811f6da:	f7f7 fcf7 	bl	81170cc <lwip_htons>
 811f6de:	4603      	mov	r3, r0
 811f6e0:	b2db      	uxtb	r3, r3
 811f6e2:	f003 0303 	and.w	r3, r3, #3
 811f6e6:	2b00      	cmp	r3, #0
 811f6e8:	d001      	beq.n	811f6ee <tcp_receive+0x966>
 811f6ea:	2301      	movs	r3, #1
 811f6ec:	e000      	b.n	811f6f0 <tcp_receive+0x968>
 811f6ee:	2300      	movs	r3, #0
 811f6f0:	4423      	add	r3, r4
 811f6f2:	b29a      	uxth	r2, r3
 811f6f4:	4b65      	ldr	r3, [pc, #404]	@ (811f88c <tcp_receive+0xb04>)
 811f6f6:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 811f6f8:	4b64      	ldr	r3, [pc, #400]	@ (811f88c <tcp_receive+0xb04>)
 811f6fa:	881b      	ldrh	r3, [r3, #0]
 811f6fc:	461a      	mov	r2, r3
 811f6fe:	4b64      	ldr	r3, [pc, #400]	@ (811f890 <tcp_receive+0xb08>)
 811f700:	681b      	ldr	r3, [r3, #0]
 811f702:	441a      	add	r2, r3
 811f704:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 811f706:	68db      	ldr	r3, [r3, #12]
 811f708:	685b      	ldr	r3, [r3, #4]
 811f70a:	429a      	cmp	r2, r3
 811f70c:	d006      	beq.n	811f71c <tcp_receive+0x994>
 811f70e:	4b62      	ldr	r3, [pc, #392]	@ (811f898 <tcp_receive+0xb10>)
 811f710:	f240 52fc 	movw	r2, #1532	@ 0x5fc
 811f714:	4961      	ldr	r1, [pc, #388]	@ (811f89c <tcp_receive+0xb14>)
 811f716:	4862      	ldr	r0, [pc, #392]	@ (811f8a0 <tcp_receive+0xb18>)
 811f718:	f004 fa80 	bl	8123c1c <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 811f71c:	687b      	ldr	r3, [r7, #4]
 811f71e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 811f720:	675a      	str	r2, [r3, #116]	@ 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 811f722:	4b5a      	ldr	r3, [pc, #360]	@ (811f88c <tcp_receive+0xb04>)
 811f724:	881b      	ldrh	r3, [r3, #0]
 811f726:	461a      	mov	r2, r3
 811f728:	4b59      	ldr	r3, [pc, #356]	@ (811f890 <tcp_receive+0xb08>)
 811f72a:	681b      	ldr	r3, [r3, #0]
 811f72c:	441a      	add	r2, r3
 811f72e:	687b      	ldr	r3, [r7, #4]
 811f730:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 811f732:	687b      	ldr	r3, [r7, #4]
 811f734:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 811f736:	4b55      	ldr	r3, [pc, #340]	@ (811f88c <tcp_receive+0xb04>)
 811f738:	881b      	ldrh	r3, [r3, #0]
 811f73a:	429a      	cmp	r2, r3
 811f73c:	d206      	bcs.n	811f74c <tcp_receive+0x9c4>
 811f73e:	4b56      	ldr	r3, [pc, #344]	@ (811f898 <tcp_receive+0xb10>)
 811f740:	f240 6207 	movw	r2, #1543	@ 0x607
 811f744:	4957      	ldr	r1, [pc, #348]	@ (811f8a4 <tcp_receive+0xb1c>)
 811f746:	4856      	ldr	r0, [pc, #344]	@ (811f8a0 <tcp_receive+0xb18>)
 811f748:	f004 fa68 	bl	8123c1c <iprintf>
        pcb->rcv_wnd -= tcplen;
 811f74c:	687b      	ldr	r3, [r7, #4]
 811f74e:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 811f750:	4b4e      	ldr	r3, [pc, #312]	@ (811f88c <tcp_receive+0xb04>)
 811f752:	881b      	ldrh	r3, [r3, #0]
 811f754:	1ad3      	subs	r3, r2, r3
 811f756:	b29a      	uxth	r2, r3
 811f758:	687b      	ldr	r3, [r7, #4]
 811f75a:	851a      	strh	r2, [r3, #40]	@ 0x28

        tcp_update_rcv_ann_wnd(pcb);
 811f75c:	6878      	ldr	r0, [r7, #4]
 811f75e:	f7fc fdf7 	bl	811c350 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 811f762:	4b4c      	ldr	r3, [pc, #304]	@ (811f894 <tcp_receive+0xb0c>)
 811f764:	685b      	ldr	r3, [r3, #4]
 811f766:	891b      	ldrh	r3, [r3, #8]
 811f768:	2b00      	cmp	r3, #0
 811f76a:	d006      	beq.n	811f77a <tcp_receive+0x9f2>
          recv_data = inseg.p;
 811f76c:	4b49      	ldr	r3, [pc, #292]	@ (811f894 <tcp_receive+0xb0c>)
 811f76e:	685b      	ldr	r3, [r3, #4]
 811f770:	4a4d      	ldr	r2, [pc, #308]	@ (811f8a8 <tcp_receive+0xb20>)
 811f772:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 811f774:	4b47      	ldr	r3, [pc, #284]	@ (811f894 <tcp_receive+0xb0c>)
 811f776:	2200      	movs	r2, #0
 811f778:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 811f77a:	4b46      	ldr	r3, [pc, #280]	@ (811f894 <tcp_receive+0xb0c>)
 811f77c:	68db      	ldr	r3, [r3, #12]
 811f77e:	899b      	ldrh	r3, [r3, #12]
 811f780:	b29b      	uxth	r3, r3
 811f782:	4618      	mov	r0, r3
 811f784:	f7f7 fca2 	bl	81170cc <lwip_htons>
 811f788:	4603      	mov	r3, r0
 811f78a:	b2db      	uxtb	r3, r3
 811f78c:	f003 0301 	and.w	r3, r3, #1
 811f790:	2b00      	cmp	r3, #0
 811f792:	f000 80b8 	beq.w	811f906 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 811f796:	4b45      	ldr	r3, [pc, #276]	@ (811f8ac <tcp_receive+0xb24>)
 811f798:	781b      	ldrb	r3, [r3, #0]
 811f79a:	f043 0320 	orr.w	r3, r3, #32
 811f79e:	b2da      	uxtb	r2, r3
 811f7a0:	4b42      	ldr	r3, [pc, #264]	@ (811f8ac <tcp_receive+0xb24>)
 811f7a2:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 811f7a4:	e0af      	b.n	811f906 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 811f7a6:	687b      	ldr	r3, [r7, #4]
 811f7a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 811f7aa:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 811f7ac:	687b      	ldr	r3, [r7, #4]
 811f7ae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 811f7b0:	68db      	ldr	r3, [r3, #12]
 811f7b2:	685b      	ldr	r3, [r3, #4]
 811f7b4:	4a36      	ldr	r2, [pc, #216]	@ (811f890 <tcp_receive+0xb08>)
 811f7b6:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 811f7b8:	68bb      	ldr	r3, [r7, #8]
 811f7ba:	891b      	ldrh	r3, [r3, #8]
 811f7bc:	461c      	mov	r4, r3
 811f7be:	68bb      	ldr	r3, [r7, #8]
 811f7c0:	68db      	ldr	r3, [r3, #12]
 811f7c2:	899b      	ldrh	r3, [r3, #12]
 811f7c4:	b29b      	uxth	r3, r3
 811f7c6:	4618      	mov	r0, r3
 811f7c8:	f7f7 fc80 	bl	81170cc <lwip_htons>
 811f7cc:	4603      	mov	r3, r0
 811f7ce:	b2db      	uxtb	r3, r3
 811f7d0:	f003 0303 	and.w	r3, r3, #3
 811f7d4:	2b00      	cmp	r3, #0
 811f7d6:	d001      	beq.n	811f7dc <tcp_receive+0xa54>
 811f7d8:	2301      	movs	r3, #1
 811f7da:	e000      	b.n	811f7de <tcp_receive+0xa56>
 811f7dc:	2300      	movs	r3, #0
 811f7de:	191a      	adds	r2, r3, r4
 811f7e0:	687b      	ldr	r3, [r7, #4]
 811f7e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 811f7e4:	441a      	add	r2, r3
 811f7e6:	687b      	ldr	r3, [r7, #4]
 811f7e8:	625a      	str	r2, [r3, #36]	@ 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 811f7ea:	687b      	ldr	r3, [r7, #4]
 811f7ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 811f7ee:	461c      	mov	r4, r3
 811f7f0:	68bb      	ldr	r3, [r7, #8]
 811f7f2:	891b      	ldrh	r3, [r3, #8]
 811f7f4:	461d      	mov	r5, r3
 811f7f6:	68bb      	ldr	r3, [r7, #8]
 811f7f8:	68db      	ldr	r3, [r3, #12]
 811f7fa:	899b      	ldrh	r3, [r3, #12]
 811f7fc:	b29b      	uxth	r3, r3
 811f7fe:	4618      	mov	r0, r3
 811f800:	f7f7 fc64 	bl	81170cc <lwip_htons>
 811f804:	4603      	mov	r3, r0
 811f806:	b2db      	uxtb	r3, r3
 811f808:	f003 0303 	and.w	r3, r3, #3
 811f80c:	2b00      	cmp	r3, #0
 811f80e:	d001      	beq.n	811f814 <tcp_receive+0xa8c>
 811f810:	2301      	movs	r3, #1
 811f812:	e000      	b.n	811f816 <tcp_receive+0xa8e>
 811f814:	2300      	movs	r3, #0
 811f816:	442b      	add	r3, r5
 811f818:	429c      	cmp	r4, r3
 811f81a:	d206      	bcs.n	811f82a <tcp_receive+0xaa2>
 811f81c:	4b1e      	ldr	r3, [pc, #120]	@ (811f898 <tcp_receive+0xb10>)
 811f81e:	f240 622b 	movw	r2, #1579	@ 0x62b
 811f822:	4923      	ldr	r1, [pc, #140]	@ (811f8b0 <tcp_receive+0xb28>)
 811f824:	481e      	ldr	r0, [pc, #120]	@ (811f8a0 <tcp_receive+0xb18>)
 811f826:	f004 f9f9 	bl	8123c1c <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 811f82a:	68bb      	ldr	r3, [r7, #8]
 811f82c:	891b      	ldrh	r3, [r3, #8]
 811f82e:	461c      	mov	r4, r3
 811f830:	68bb      	ldr	r3, [r7, #8]
 811f832:	68db      	ldr	r3, [r3, #12]
 811f834:	899b      	ldrh	r3, [r3, #12]
 811f836:	b29b      	uxth	r3, r3
 811f838:	4618      	mov	r0, r3
 811f83a:	f7f7 fc47 	bl	81170cc <lwip_htons>
 811f83e:	4603      	mov	r3, r0
 811f840:	b2db      	uxtb	r3, r3
 811f842:	f003 0303 	and.w	r3, r3, #3
 811f846:	2b00      	cmp	r3, #0
 811f848:	d001      	beq.n	811f84e <tcp_receive+0xac6>
 811f84a:	2301      	movs	r3, #1
 811f84c:	e000      	b.n	811f850 <tcp_receive+0xac8>
 811f84e:	2300      	movs	r3, #0
 811f850:	1919      	adds	r1, r3, r4
 811f852:	687b      	ldr	r3, [r7, #4]
 811f854:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 811f856:	b28b      	uxth	r3, r1
 811f858:	1ad3      	subs	r3, r2, r3
 811f85a:	b29a      	uxth	r2, r3
 811f85c:	687b      	ldr	r3, [r7, #4]
 811f85e:	851a      	strh	r2, [r3, #40]	@ 0x28

          tcp_update_rcv_ann_wnd(pcb);
 811f860:	6878      	ldr	r0, [r7, #4]
 811f862:	f7fc fd75 	bl	811c350 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 811f866:	68bb      	ldr	r3, [r7, #8]
 811f868:	685b      	ldr	r3, [r3, #4]
 811f86a:	891b      	ldrh	r3, [r3, #8]
 811f86c:	2b00      	cmp	r3, #0
 811f86e:	d028      	beq.n	811f8c2 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 811f870:	4b0d      	ldr	r3, [pc, #52]	@ (811f8a8 <tcp_receive+0xb20>)
 811f872:	681b      	ldr	r3, [r3, #0]
 811f874:	2b00      	cmp	r3, #0
 811f876:	d01d      	beq.n	811f8b4 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 811f878:	4b0b      	ldr	r3, [pc, #44]	@ (811f8a8 <tcp_receive+0xb20>)
 811f87a:	681a      	ldr	r2, [r3, #0]
 811f87c:	68bb      	ldr	r3, [r7, #8]
 811f87e:	685b      	ldr	r3, [r3, #4]
 811f880:	4619      	mov	r1, r3
 811f882:	4610      	mov	r0, r2
 811f884:	f7fb fef8 	bl	811b678 <pbuf_cat>
 811f888:	e018      	b.n	811f8bc <tcp_receive+0xb34>
 811f88a:	bf00      	nop
 811f88c:	1000e4da 	.word	0x1000e4da
 811f890:	1000e4d0 	.word	0x1000e4d0
 811f894:	1000e4b0 	.word	0x1000e4b0
 811f898:	08127024 	.word	0x08127024
 811f89c:	08127444 	.word	0x08127444
 811f8a0:	081270b0 	.word	0x081270b0
 811f8a4:	08127480 	.word	0x08127480
 811f8a8:	1000e4e0 	.word	0x1000e4e0
 811f8ac:	1000e4dd 	.word	0x1000e4dd
 811f8b0:	081274a0 	.word	0x081274a0
            } else {
              recv_data = cseg->p;
 811f8b4:	68bb      	ldr	r3, [r7, #8]
 811f8b6:	685b      	ldr	r3, [r3, #4]
 811f8b8:	4a70      	ldr	r2, [pc, #448]	@ (811fa7c <tcp_receive+0xcf4>)
 811f8ba:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 811f8bc:	68bb      	ldr	r3, [r7, #8]
 811f8be:	2200      	movs	r2, #0
 811f8c0:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 811f8c2:	68bb      	ldr	r3, [r7, #8]
 811f8c4:	68db      	ldr	r3, [r3, #12]
 811f8c6:	899b      	ldrh	r3, [r3, #12]
 811f8c8:	b29b      	uxth	r3, r3
 811f8ca:	4618      	mov	r0, r3
 811f8cc:	f7f7 fbfe 	bl	81170cc <lwip_htons>
 811f8d0:	4603      	mov	r3, r0
 811f8d2:	b2db      	uxtb	r3, r3
 811f8d4:	f003 0301 	and.w	r3, r3, #1
 811f8d8:	2b00      	cmp	r3, #0
 811f8da:	d00d      	beq.n	811f8f8 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 811f8dc:	4b68      	ldr	r3, [pc, #416]	@ (811fa80 <tcp_receive+0xcf8>)
 811f8de:	781b      	ldrb	r3, [r3, #0]
 811f8e0:	f043 0320 	orr.w	r3, r3, #32
 811f8e4:	b2da      	uxtb	r2, r3
 811f8e6:	4b66      	ldr	r3, [pc, #408]	@ (811fa80 <tcp_receive+0xcf8>)
 811f8e8:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 811f8ea:	687b      	ldr	r3, [r7, #4]
 811f8ec:	7d1b      	ldrb	r3, [r3, #20]
 811f8ee:	2b04      	cmp	r3, #4
 811f8f0:	d102      	bne.n	811f8f8 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 811f8f2:	687b      	ldr	r3, [r7, #4]
 811f8f4:	2207      	movs	r2, #7
 811f8f6:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 811f8f8:	68bb      	ldr	r3, [r7, #8]
 811f8fa:	681a      	ldr	r2, [r3, #0]
 811f8fc:	687b      	ldr	r3, [r7, #4]
 811f8fe:	675a      	str	r2, [r3, #116]	@ 0x74
          tcp_seg_free(cseg);
 811f900:	68b8      	ldr	r0, [r7, #8]
 811f902:	f7fd fb6c 	bl	811cfde <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 811f906:	687b      	ldr	r3, [r7, #4]
 811f908:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 811f90a:	2b00      	cmp	r3, #0
 811f90c:	d008      	beq.n	811f920 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 811f90e:	687b      	ldr	r3, [r7, #4]
 811f910:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 811f912:	68db      	ldr	r3, [r3, #12]
 811f914:	685a      	ldr	r2, [r3, #4]
 811f916:	687b      	ldr	r3, [r7, #4]
 811f918:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        while (pcb->ooseq != NULL &&
 811f91a:	429a      	cmp	r2, r3
 811f91c:	f43f af43 	beq.w	811f7a6 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 811f920:	687b      	ldr	r3, [r7, #4]
 811f922:	8b5b      	ldrh	r3, [r3, #26]
 811f924:	f003 0301 	and.w	r3, r3, #1
 811f928:	2b00      	cmp	r3, #0
 811f92a:	d00e      	beq.n	811f94a <tcp_receive+0xbc2>
 811f92c:	687b      	ldr	r3, [r7, #4]
 811f92e:	8b5b      	ldrh	r3, [r3, #26]
 811f930:	f023 0301 	bic.w	r3, r3, #1
 811f934:	b29a      	uxth	r2, r3
 811f936:	687b      	ldr	r3, [r7, #4]
 811f938:	835a      	strh	r2, [r3, #26]
 811f93a:	687b      	ldr	r3, [r7, #4]
 811f93c:	8b5b      	ldrh	r3, [r3, #26]
 811f93e:	f043 0302 	orr.w	r3, r3, #2
 811f942:	b29a      	uxth	r2, r3
 811f944:	687b      	ldr	r3, [r7, #4]
 811f946:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 811f948:	e187      	b.n	811fc5a <tcp_receive+0xed2>
        tcp_ack(pcb);
 811f94a:	687b      	ldr	r3, [r7, #4]
 811f94c:	8b5b      	ldrh	r3, [r3, #26]
 811f94e:	f043 0301 	orr.w	r3, r3, #1
 811f952:	b29a      	uxth	r2, r3
 811f954:	687b      	ldr	r3, [r7, #4]
 811f956:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 811f958:	e17f      	b.n	811fc5a <tcp_receive+0xed2>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 811f95a:	687b      	ldr	r3, [r7, #4]
 811f95c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 811f95e:	2b00      	cmp	r3, #0
 811f960:	d106      	bne.n	811f970 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 811f962:	4848      	ldr	r0, [pc, #288]	@ (811fa84 <tcp_receive+0xcfc>)
 811f964:	f7fd fb54 	bl	811d010 <tcp_seg_copy>
 811f968:	4602      	mov	r2, r0
 811f96a:	687b      	ldr	r3, [r7, #4]
 811f96c:	675a      	str	r2, [r3, #116]	@ 0x74
 811f96e:	e16c      	b.n	811fc4a <tcp_receive+0xec2>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 811f970:	2300      	movs	r3, #0
 811f972:	637b      	str	r3, [r7, #52]	@ 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 811f974:	687b      	ldr	r3, [r7, #4]
 811f976:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 811f978:	63bb      	str	r3, [r7, #56]	@ 0x38
 811f97a:	e156      	b.n	811fc2a <tcp_receive+0xea2>
            if (seqno == next->tcphdr->seqno) {
 811f97c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 811f97e:	68db      	ldr	r3, [r3, #12]
 811f980:	685a      	ldr	r2, [r3, #4]
 811f982:	4b41      	ldr	r3, [pc, #260]	@ (811fa88 <tcp_receive+0xd00>)
 811f984:	681b      	ldr	r3, [r3, #0]
 811f986:	429a      	cmp	r2, r3
 811f988:	d11d      	bne.n	811f9c6 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 811f98a:	4b3e      	ldr	r3, [pc, #248]	@ (811fa84 <tcp_receive+0xcfc>)
 811f98c:	891a      	ldrh	r2, [r3, #8]
 811f98e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 811f990:	891b      	ldrh	r3, [r3, #8]
 811f992:	429a      	cmp	r2, r3
 811f994:	f240 814e 	bls.w	811fc34 <tcp_receive+0xeac>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 811f998:	483a      	ldr	r0, [pc, #232]	@ (811fa84 <tcp_receive+0xcfc>)
 811f99a:	f7fd fb39 	bl	811d010 <tcp_seg_copy>
 811f99e:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 811f9a0:	697b      	ldr	r3, [r7, #20]
 811f9a2:	2b00      	cmp	r3, #0
 811f9a4:	f000 8148 	beq.w	811fc38 <tcp_receive+0xeb0>
                  if (prev != NULL) {
 811f9a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 811f9aa:	2b00      	cmp	r3, #0
 811f9ac:	d003      	beq.n	811f9b6 <tcp_receive+0xc2e>
                    prev->next = cseg;
 811f9ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 811f9b0:	697a      	ldr	r2, [r7, #20]
 811f9b2:	601a      	str	r2, [r3, #0]
 811f9b4:	e002      	b.n	811f9bc <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 811f9b6:	687b      	ldr	r3, [r7, #4]
 811f9b8:	697a      	ldr	r2, [r7, #20]
 811f9ba:	675a      	str	r2, [r3, #116]	@ 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 811f9bc:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 811f9be:	6978      	ldr	r0, [r7, #20]
 811f9c0:	f7ff f8de 	bl	811eb80 <tcp_oos_insert_segment>
                }
                break;
 811f9c4:	e138      	b.n	811fc38 <tcp_receive+0xeb0>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 811f9c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 811f9c8:	2b00      	cmp	r3, #0
 811f9ca:	d117      	bne.n	811f9fc <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 811f9cc:	4b2e      	ldr	r3, [pc, #184]	@ (811fa88 <tcp_receive+0xd00>)
 811f9ce:	681a      	ldr	r2, [r3, #0]
 811f9d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 811f9d2:	68db      	ldr	r3, [r3, #12]
 811f9d4:	685b      	ldr	r3, [r3, #4]
 811f9d6:	1ad3      	subs	r3, r2, r3
 811f9d8:	2b00      	cmp	r3, #0
 811f9da:	da57      	bge.n	811fa8c <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 811f9dc:	4829      	ldr	r0, [pc, #164]	@ (811fa84 <tcp_receive+0xcfc>)
 811f9de:	f7fd fb17 	bl	811d010 <tcp_seg_copy>
 811f9e2:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 811f9e4:	69bb      	ldr	r3, [r7, #24]
 811f9e6:	2b00      	cmp	r3, #0
 811f9e8:	f000 8128 	beq.w	811fc3c <tcp_receive+0xeb4>
                    pcb->ooseq = cseg;
 811f9ec:	687b      	ldr	r3, [r7, #4]
 811f9ee:	69ba      	ldr	r2, [r7, #24]
 811f9f0:	675a      	str	r2, [r3, #116]	@ 0x74
                    tcp_oos_insert_segment(cseg, next);
 811f9f2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 811f9f4:	69b8      	ldr	r0, [r7, #24]
 811f9f6:	f7ff f8c3 	bl	811eb80 <tcp_oos_insert_segment>
                  }
                  break;
 811f9fa:	e11f      	b.n	811fc3c <tcp_receive+0xeb4>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 811f9fc:	4b22      	ldr	r3, [pc, #136]	@ (811fa88 <tcp_receive+0xd00>)
 811f9fe:	681a      	ldr	r2, [r3, #0]
 811fa00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 811fa02:	68db      	ldr	r3, [r3, #12]
 811fa04:	685b      	ldr	r3, [r3, #4]
 811fa06:	1ad3      	subs	r3, r2, r3
 811fa08:	3b01      	subs	r3, #1
 811fa0a:	2b00      	cmp	r3, #0
 811fa0c:	db3e      	blt.n	811fa8c <tcp_receive+0xd04>
 811fa0e:	4b1e      	ldr	r3, [pc, #120]	@ (811fa88 <tcp_receive+0xd00>)
 811fa10:	681a      	ldr	r2, [r3, #0]
 811fa12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 811fa14:	68db      	ldr	r3, [r3, #12]
 811fa16:	685b      	ldr	r3, [r3, #4]
 811fa18:	1ad3      	subs	r3, r2, r3
 811fa1a:	3301      	adds	r3, #1
 811fa1c:	2b00      	cmp	r3, #0
 811fa1e:	dc35      	bgt.n	811fa8c <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 811fa20:	4818      	ldr	r0, [pc, #96]	@ (811fa84 <tcp_receive+0xcfc>)
 811fa22:	f7fd faf5 	bl	811d010 <tcp_seg_copy>
 811fa26:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 811fa28:	69fb      	ldr	r3, [r7, #28]
 811fa2a:	2b00      	cmp	r3, #0
 811fa2c:	f000 8108 	beq.w	811fc40 <tcp_receive+0xeb8>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 811fa30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 811fa32:	68db      	ldr	r3, [r3, #12]
 811fa34:	685b      	ldr	r3, [r3, #4]
 811fa36:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 811fa38:	8912      	ldrh	r2, [r2, #8]
 811fa3a:	441a      	add	r2, r3
 811fa3c:	4b12      	ldr	r3, [pc, #72]	@ (811fa88 <tcp_receive+0xd00>)
 811fa3e:	681b      	ldr	r3, [r3, #0]
 811fa40:	1ad3      	subs	r3, r2, r3
 811fa42:	2b00      	cmp	r3, #0
 811fa44:	dd12      	ble.n	811fa6c <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 811fa46:	4b10      	ldr	r3, [pc, #64]	@ (811fa88 <tcp_receive+0xd00>)
 811fa48:	681b      	ldr	r3, [r3, #0]
 811fa4a:	b29a      	uxth	r2, r3
 811fa4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 811fa4e:	68db      	ldr	r3, [r3, #12]
 811fa50:	685b      	ldr	r3, [r3, #4]
 811fa52:	b29b      	uxth	r3, r3
 811fa54:	1ad3      	subs	r3, r2, r3
 811fa56:	b29a      	uxth	r2, r3
 811fa58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 811fa5a:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 811fa5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 811fa5e:	685a      	ldr	r2, [r3, #4]
 811fa60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 811fa62:	891b      	ldrh	r3, [r3, #8]
 811fa64:	4619      	mov	r1, r3
 811fa66:	4610      	mov	r0, r2
 811fa68:	f7fb fbb4 	bl	811b1d4 <pbuf_realloc>
                    }
                    prev->next = cseg;
 811fa6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 811fa6e:	69fa      	ldr	r2, [r7, #28]
 811fa70:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 811fa72:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 811fa74:	69f8      	ldr	r0, [r7, #28]
 811fa76:	f7ff f883 	bl	811eb80 <tcp_oos_insert_segment>
                  }
                  break;
 811fa7a:	e0e1      	b.n	811fc40 <tcp_receive+0xeb8>
 811fa7c:	1000e4e0 	.word	0x1000e4e0
 811fa80:	1000e4dd 	.word	0x1000e4dd
 811fa84:	1000e4b0 	.word	0x1000e4b0
 811fa88:	1000e4d0 	.word	0x1000e4d0
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 811fa8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 811fa8e:	637b      	str	r3, [r7, #52]	@ 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 811fa90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 811fa92:	681b      	ldr	r3, [r3, #0]
 811fa94:	2b00      	cmp	r3, #0
 811fa96:	f040 80c5 	bne.w	811fc24 <tcp_receive+0xe9c>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 811fa9a:	4b7f      	ldr	r3, [pc, #508]	@ (811fc98 <tcp_receive+0xf10>)
 811fa9c:	681a      	ldr	r2, [r3, #0]
 811fa9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 811faa0:	68db      	ldr	r3, [r3, #12]
 811faa2:	685b      	ldr	r3, [r3, #4]
 811faa4:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 811faa6:	2b00      	cmp	r3, #0
 811faa8:	f340 80bc 	ble.w	811fc24 <tcp_receive+0xe9c>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 811faac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 811faae:	68db      	ldr	r3, [r3, #12]
 811fab0:	899b      	ldrh	r3, [r3, #12]
 811fab2:	b29b      	uxth	r3, r3
 811fab4:	4618      	mov	r0, r3
 811fab6:	f7f7 fb09 	bl	81170cc <lwip_htons>
 811faba:	4603      	mov	r3, r0
 811fabc:	b2db      	uxtb	r3, r3
 811fabe:	f003 0301 	and.w	r3, r3, #1
 811fac2:	2b00      	cmp	r3, #0
 811fac4:	f040 80be 	bne.w	811fc44 <tcp_receive+0xebc>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 811fac8:	4874      	ldr	r0, [pc, #464]	@ (811fc9c <tcp_receive+0xf14>)
 811faca:	f7fd faa1 	bl	811d010 <tcp_seg_copy>
 811face:	4602      	mov	r2, r0
 811fad0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 811fad2:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 811fad4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 811fad6:	681b      	ldr	r3, [r3, #0]
 811fad8:	2b00      	cmp	r3, #0
 811fada:	f000 80b5 	beq.w	811fc48 <tcp_receive+0xec0>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 811fade:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 811fae0:	68db      	ldr	r3, [r3, #12]
 811fae2:	685b      	ldr	r3, [r3, #4]
 811fae4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 811fae6:	8912      	ldrh	r2, [r2, #8]
 811fae8:	441a      	add	r2, r3
 811faea:	4b6b      	ldr	r3, [pc, #428]	@ (811fc98 <tcp_receive+0xf10>)
 811faec:	681b      	ldr	r3, [r3, #0]
 811faee:	1ad3      	subs	r3, r2, r3
 811faf0:	2b00      	cmp	r3, #0
 811faf2:	dd12      	ble.n	811fb1a <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 811faf4:	4b68      	ldr	r3, [pc, #416]	@ (811fc98 <tcp_receive+0xf10>)
 811faf6:	681b      	ldr	r3, [r3, #0]
 811faf8:	b29a      	uxth	r2, r3
 811fafa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 811fafc:	68db      	ldr	r3, [r3, #12]
 811fafe:	685b      	ldr	r3, [r3, #4]
 811fb00:	b29b      	uxth	r3, r3
 811fb02:	1ad3      	subs	r3, r2, r3
 811fb04:	b29a      	uxth	r2, r3
 811fb06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 811fb08:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 811fb0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 811fb0c:	685a      	ldr	r2, [r3, #4]
 811fb0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 811fb10:	891b      	ldrh	r3, [r3, #8]
 811fb12:	4619      	mov	r1, r3
 811fb14:	4610      	mov	r0, r2
 811fb16:	f7fb fb5d 	bl	811b1d4 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 811fb1a:	4b61      	ldr	r3, [pc, #388]	@ (811fca0 <tcp_receive+0xf18>)
 811fb1c:	881b      	ldrh	r3, [r3, #0]
 811fb1e:	461a      	mov	r2, r3
 811fb20:	4b5d      	ldr	r3, [pc, #372]	@ (811fc98 <tcp_receive+0xf10>)
 811fb22:	681b      	ldr	r3, [r3, #0]
 811fb24:	441a      	add	r2, r3
 811fb26:	687b      	ldr	r3, [r7, #4]
 811fb28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 811fb2a:	6879      	ldr	r1, [r7, #4]
 811fb2c:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 811fb2e:	440b      	add	r3, r1
 811fb30:	1ad3      	subs	r3, r2, r3
 811fb32:	2b00      	cmp	r3, #0
 811fb34:	f340 8088 	ble.w	811fc48 <tcp_receive+0xec0>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 811fb38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 811fb3a:	681b      	ldr	r3, [r3, #0]
 811fb3c:	68db      	ldr	r3, [r3, #12]
 811fb3e:	899b      	ldrh	r3, [r3, #12]
 811fb40:	b29b      	uxth	r3, r3
 811fb42:	4618      	mov	r0, r3
 811fb44:	f7f7 fac2 	bl	81170cc <lwip_htons>
 811fb48:	4603      	mov	r3, r0
 811fb4a:	b2db      	uxtb	r3, r3
 811fb4c:	f003 0301 	and.w	r3, r3, #1
 811fb50:	2b00      	cmp	r3, #0
 811fb52:	d021      	beq.n	811fb98 <tcp_receive+0xe10>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 811fb54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 811fb56:	681b      	ldr	r3, [r3, #0]
 811fb58:	68db      	ldr	r3, [r3, #12]
 811fb5a:	899b      	ldrh	r3, [r3, #12]
 811fb5c:	b29b      	uxth	r3, r3
 811fb5e:	b21b      	sxth	r3, r3
 811fb60:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 811fb64:	b21c      	sxth	r4, r3
 811fb66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 811fb68:	681b      	ldr	r3, [r3, #0]
 811fb6a:	68db      	ldr	r3, [r3, #12]
 811fb6c:	899b      	ldrh	r3, [r3, #12]
 811fb6e:	b29b      	uxth	r3, r3
 811fb70:	4618      	mov	r0, r3
 811fb72:	f7f7 faab 	bl	81170cc <lwip_htons>
 811fb76:	4603      	mov	r3, r0
 811fb78:	b2db      	uxtb	r3, r3
 811fb7a:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 811fb7e:	b29b      	uxth	r3, r3
 811fb80:	4618      	mov	r0, r3
 811fb82:	f7f7 faa3 	bl	81170cc <lwip_htons>
 811fb86:	4603      	mov	r3, r0
 811fb88:	b21b      	sxth	r3, r3
 811fb8a:	4323      	orrs	r3, r4
 811fb8c:	b21a      	sxth	r2, r3
 811fb8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 811fb90:	681b      	ldr	r3, [r3, #0]
 811fb92:	68db      	ldr	r3, [r3, #12]
 811fb94:	b292      	uxth	r2, r2
 811fb96:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 811fb98:	687b      	ldr	r3, [r7, #4]
 811fb9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 811fb9c:	b29a      	uxth	r2, r3
 811fb9e:	687b      	ldr	r3, [r7, #4]
 811fba0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 811fba2:	4413      	add	r3, r2
 811fba4:	b299      	uxth	r1, r3
 811fba6:	4b3c      	ldr	r3, [pc, #240]	@ (811fc98 <tcp_receive+0xf10>)
 811fba8:	681b      	ldr	r3, [r3, #0]
 811fbaa:	b29a      	uxth	r2, r3
 811fbac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 811fbae:	681b      	ldr	r3, [r3, #0]
 811fbb0:	1a8a      	subs	r2, r1, r2
 811fbb2:	b292      	uxth	r2, r2
 811fbb4:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 811fbb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 811fbb8:	681b      	ldr	r3, [r3, #0]
 811fbba:	685a      	ldr	r2, [r3, #4]
 811fbbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 811fbbe:	681b      	ldr	r3, [r3, #0]
 811fbc0:	891b      	ldrh	r3, [r3, #8]
 811fbc2:	4619      	mov	r1, r3
 811fbc4:	4610      	mov	r0, r2
 811fbc6:	f7fb fb05 	bl	811b1d4 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 811fbca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 811fbcc:	681b      	ldr	r3, [r3, #0]
 811fbce:	891c      	ldrh	r4, [r3, #8]
 811fbd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 811fbd2:	681b      	ldr	r3, [r3, #0]
 811fbd4:	68db      	ldr	r3, [r3, #12]
 811fbd6:	899b      	ldrh	r3, [r3, #12]
 811fbd8:	b29b      	uxth	r3, r3
 811fbda:	4618      	mov	r0, r3
 811fbdc:	f7f7 fa76 	bl	81170cc <lwip_htons>
 811fbe0:	4603      	mov	r3, r0
 811fbe2:	b2db      	uxtb	r3, r3
 811fbe4:	f003 0303 	and.w	r3, r3, #3
 811fbe8:	2b00      	cmp	r3, #0
 811fbea:	d001      	beq.n	811fbf0 <tcp_receive+0xe68>
 811fbec:	2301      	movs	r3, #1
 811fbee:	e000      	b.n	811fbf2 <tcp_receive+0xe6a>
 811fbf0:	2300      	movs	r3, #0
 811fbf2:	4423      	add	r3, r4
 811fbf4:	b29a      	uxth	r2, r3
 811fbf6:	4b2a      	ldr	r3, [pc, #168]	@ (811fca0 <tcp_receive+0xf18>)
 811fbf8:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 811fbfa:	4b29      	ldr	r3, [pc, #164]	@ (811fca0 <tcp_receive+0xf18>)
 811fbfc:	881b      	ldrh	r3, [r3, #0]
 811fbfe:	461a      	mov	r2, r3
 811fc00:	4b25      	ldr	r3, [pc, #148]	@ (811fc98 <tcp_receive+0xf10>)
 811fc02:	681b      	ldr	r3, [r3, #0]
 811fc04:	441a      	add	r2, r3
 811fc06:	687b      	ldr	r3, [r7, #4]
 811fc08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 811fc0a:	6879      	ldr	r1, [r7, #4]
 811fc0c:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 811fc0e:	440b      	add	r3, r1
 811fc10:	429a      	cmp	r2, r3
 811fc12:	d019      	beq.n	811fc48 <tcp_receive+0xec0>
 811fc14:	4b23      	ldr	r3, [pc, #140]	@ (811fca4 <tcp_receive+0xf1c>)
 811fc16:	f44f 62df 	mov.w	r2, #1784	@ 0x6f8
 811fc1a:	4923      	ldr	r1, [pc, #140]	@ (811fca8 <tcp_receive+0xf20>)
 811fc1c:	4823      	ldr	r0, [pc, #140]	@ (811fcac <tcp_receive+0xf24>)
 811fc1e:	f003 fffd 	bl	8123c1c <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 811fc22:	e011      	b.n	811fc48 <tcp_receive+0xec0>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 811fc24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 811fc26:	681b      	ldr	r3, [r3, #0]
 811fc28:	63bb      	str	r3, [r7, #56]	@ 0x38
 811fc2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 811fc2c:	2b00      	cmp	r3, #0
 811fc2e:	f47f aea5 	bne.w	811f97c <tcp_receive+0xbf4>
 811fc32:	e00a      	b.n	811fc4a <tcp_receive+0xec2>
                break;
 811fc34:	bf00      	nop
 811fc36:	e008      	b.n	811fc4a <tcp_receive+0xec2>
                break;
 811fc38:	bf00      	nop
 811fc3a:	e006      	b.n	811fc4a <tcp_receive+0xec2>
                  break;
 811fc3c:	bf00      	nop
 811fc3e:	e004      	b.n	811fc4a <tcp_receive+0xec2>
                  break;
 811fc40:	bf00      	nop
 811fc42:	e002      	b.n	811fc4a <tcp_receive+0xec2>
                  break;
 811fc44:	bf00      	nop
 811fc46:	e000      	b.n	811fc4a <tcp_receive+0xec2>
                break;
 811fc48:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 811fc4a:	6878      	ldr	r0, [r7, #4]
 811fc4c:	f001 fe88 	bl	8121960 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 811fc50:	e003      	b.n	811fc5a <tcp_receive+0xed2>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 811fc52:	6878      	ldr	r0, [r7, #4]
 811fc54:	f001 fe84 	bl	8121960 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 811fc58:	e01a      	b.n	811fc90 <tcp_receive+0xf08>
 811fc5a:	e019      	b.n	811fc90 <tcp_receive+0xf08>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 811fc5c:	4b0e      	ldr	r3, [pc, #56]	@ (811fc98 <tcp_receive+0xf10>)
 811fc5e:	681a      	ldr	r2, [r3, #0]
 811fc60:	687b      	ldr	r3, [r7, #4]
 811fc62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 811fc64:	1ad3      	subs	r3, r2, r3
 811fc66:	2b00      	cmp	r3, #0
 811fc68:	db0a      	blt.n	811fc80 <tcp_receive+0xef8>
 811fc6a:	4b0b      	ldr	r3, [pc, #44]	@ (811fc98 <tcp_receive+0xf10>)
 811fc6c:	681a      	ldr	r2, [r3, #0]
 811fc6e:	687b      	ldr	r3, [r7, #4]
 811fc70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 811fc72:	6879      	ldr	r1, [r7, #4]
 811fc74:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 811fc76:	440b      	add	r3, r1
 811fc78:	1ad3      	subs	r3, r2, r3
 811fc7a:	3301      	adds	r3, #1
 811fc7c:	2b00      	cmp	r3, #0
 811fc7e:	dd07      	ble.n	811fc90 <tcp_receive+0xf08>
      tcp_ack_now(pcb);
 811fc80:	687b      	ldr	r3, [r7, #4]
 811fc82:	8b5b      	ldrh	r3, [r3, #26]
 811fc84:	f043 0302 	orr.w	r3, r3, #2
 811fc88:	b29a      	uxth	r2, r3
 811fc8a:	687b      	ldr	r3, [r7, #4]
 811fc8c:	835a      	strh	r2, [r3, #26]
    }
  }
}
 811fc8e:	e7ff      	b.n	811fc90 <tcp_receive+0xf08>
 811fc90:	bf00      	nop
 811fc92:	3750      	adds	r7, #80	@ 0x50
 811fc94:	46bd      	mov	sp, r7
 811fc96:	bdb0      	pop	{r4, r5, r7, pc}
 811fc98:	1000e4d0 	.word	0x1000e4d0
 811fc9c:	1000e4b0 	.word	0x1000e4b0
 811fca0:	1000e4da 	.word	0x1000e4da
 811fca4:	08127024 	.word	0x08127024
 811fca8:	0812740c 	.word	0x0812740c
 811fcac:	081270b0 	.word	0x081270b0

0811fcb0 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 811fcb0:	b480      	push	{r7}
 811fcb2:	b083      	sub	sp, #12
 811fcb4:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 811fcb6:	4b15      	ldr	r3, [pc, #84]	@ (811fd0c <tcp_get_next_optbyte+0x5c>)
 811fcb8:	881b      	ldrh	r3, [r3, #0]
 811fcba:	1c5a      	adds	r2, r3, #1
 811fcbc:	b291      	uxth	r1, r2
 811fcbe:	4a13      	ldr	r2, [pc, #76]	@ (811fd0c <tcp_get_next_optbyte+0x5c>)
 811fcc0:	8011      	strh	r1, [r2, #0]
 811fcc2:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 811fcc4:	4b12      	ldr	r3, [pc, #72]	@ (811fd10 <tcp_get_next_optbyte+0x60>)
 811fcc6:	681b      	ldr	r3, [r3, #0]
 811fcc8:	2b00      	cmp	r3, #0
 811fcca:	d004      	beq.n	811fcd6 <tcp_get_next_optbyte+0x26>
 811fccc:	4b11      	ldr	r3, [pc, #68]	@ (811fd14 <tcp_get_next_optbyte+0x64>)
 811fcce:	881b      	ldrh	r3, [r3, #0]
 811fcd0:	88fa      	ldrh	r2, [r7, #6]
 811fcd2:	429a      	cmp	r2, r3
 811fcd4:	d208      	bcs.n	811fce8 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 811fcd6:	4b10      	ldr	r3, [pc, #64]	@ (811fd18 <tcp_get_next_optbyte+0x68>)
 811fcd8:	681b      	ldr	r3, [r3, #0]
 811fcda:	3314      	adds	r3, #20
 811fcdc:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 811fcde:	88fb      	ldrh	r3, [r7, #6]
 811fce0:	683a      	ldr	r2, [r7, #0]
 811fce2:	4413      	add	r3, r2
 811fce4:	781b      	ldrb	r3, [r3, #0]
 811fce6:	e00b      	b.n	811fd00 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 811fce8:	88fb      	ldrh	r3, [r7, #6]
 811fcea:	b2da      	uxtb	r2, r3
 811fcec:	4b09      	ldr	r3, [pc, #36]	@ (811fd14 <tcp_get_next_optbyte+0x64>)
 811fcee:	881b      	ldrh	r3, [r3, #0]
 811fcf0:	b2db      	uxtb	r3, r3
 811fcf2:	1ad3      	subs	r3, r2, r3
 811fcf4:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 811fcf6:	4b06      	ldr	r3, [pc, #24]	@ (811fd10 <tcp_get_next_optbyte+0x60>)
 811fcf8:	681a      	ldr	r2, [r3, #0]
 811fcfa:	797b      	ldrb	r3, [r7, #5]
 811fcfc:	4413      	add	r3, r2
 811fcfe:	781b      	ldrb	r3, [r3, #0]
  }
}
 811fd00:	4618      	mov	r0, r3
 811fd02:	370c      	adds	r7, #12
 811fd04:	46bd      	mov	sp, r7
 811fd06:	f85d 7b04 	ldr.w	r7, [sp], #4
 811fd0a:	4770      	bx	lr
 811fd0c:	1000e4cc 	.word	0x1000e4cc
 811fd10:	1000e4c8 	.word	0x1000e4c8
 811fd14:	1000e4c6 	.word	0x1000e4c6
 811fd18:	1000e4c0 	.word	0x1000e4c0

0811fd1c <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 811fd1c:	b580      	push	{r7, lr}
 811fd1e:	b084      	sub	sp, #16
 811fd20:	af00      	add	r7, sp, #0
 811fd22:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 811fd24:	687b      	ldr	r3, [r7, #4]
 811fd26:	2b00      	cmp	r3, #0
 811fd28:	d106      	bne.n	811fd38 <tcp_parseopt+0x1c>
 811fd2a:	4b32      	ldr	r3, [pc, #200]	@ (811fdf4 <tcp_parseopt+0xd8>)
 811fd2c:	f240 727d 	movw	r2, #1917	@ 0x77d
 811fd30:	4931      	ldr	r1, [pc, #196]	@ (811fdf8 <tcp_parseopt+0xdc>)
 811fd32:	4832      	ldr	r0, [pc, #200]	@ (811fdfc <tcp_parseopt+0xe0>)
 811fd34:	f003 ff72 	bl	8123c1c <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 811fd38:	4b31      	ldr	r3, [pc, #196]	@ (811fe00 <tcp_parseopt+0xe4>)
 811fd3a:	881b      	ldrh	r3, [r3, #0]
 811fd3c:	2b00      	cmp	r3, #0
 811fd3e:	d056      	beq.n	811fdee <tcp_parseopt+0xd2>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 811fd40:	4b30      	ldr	r3, [pc, #192]	@ (811fe04 <tcp_parseopt+0xe8>)
 811fd42:	2200      	movs	r2, #0
 811fd44:	801a      	strh	r2, [r3, #0]
 811fd46:	e046      	b.n	811fdd6 <tcp_parseopt+0xba>
      u8_t opt = tcp_get_next_optbyte();
 811fd48:	f7ff ffb2 	bl	811fcb0 <tcp_get_next_optbyte>
 811fd4c:	4603      	mov	r3, r0
 811fd4e:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 811fd50:	7bfb      	ldrb	r3, [r7, #15]
 811fd52:	2b02      	cmp	r3, #2
 811fd54:	d006      	beq.n	811fd64 <tcp_parseopt+0x48>
 811fd56:	2b02      	cmp	r3, #2
 811fd58:	dc2a      	bgt.n	811fdb0 <tcp_parseopt+0x94>
 811fd5a:	2b00      	cmp	r3, #0
 811fd5c:	d042      	beq.n	811fde4 <tcp_parseopt+0xc8>
 811fd5e:	2b01      	cmp	r3, #1
 811fd60:	d038      	beq.n	811fdd4 <tcp_parseopt+0xb8>
 811fd62:	e025      	b.n	811fdb0 <tcp_parseopt+0x94>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 811fd64:	f7ff ffa4 	bl	811fcb0 <tcp_get_next_optbyte>
 811fd68:	4603      	mov	r3, r0
 811fd6a:	2b04      	cmp	r3, #4
 811fd6c:	d13c      	bne.n	811fde8 <tcp_parseopt+0xcc>
 811fd6e:	4b25      	ldr	r3, [pc, #148]	@ (811fe04 <tcp_parseopt+0xe8>)
 811fd70:	881b      	ldrh	r3, [r3, #0]
 811fd72:	3301      	adds	r3, #1
 811fd74:	4a22      	ldr	r2, [pc, #136]	@ (811fe00 <tcp_parseopt+0xe4>)
 811fd76:	8812      	ldrh	r2, [r2, #0]
 811fd78:	4293      	cmp	r3, r2
 811fd7a:	da35      	bge.n	811fde8 <tcp_parseopt+0xcc>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 811fd7c:	f7ff ff98 	bl	811fcb0 <tcp_get_next_optbyte>
 811fd80:	4603      	mov	r3, r0
 811fd82:	021b      	lsls	r3, r3, #8
 811fd84:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 811fd86:	f7ff ff93 	bl	811fcb0 <tcp_get_next_optbyte>
 811fd8a:	4603      	mov	r3, r0
 811fd8c:	461a      	mov	r2, r3
 811fd8e:	89bb      	ldrh	r3, [r7, #12]
 811fd90:	4313      	orrs	r3, r2
 811fd92:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 811fd94:	89bb      	ldrh	r3, [r7, #12]
 811fd96:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 811fd9a:	d804      	bhi.n	811fda6 <tcp_parseopt+0x8a>
 811fd9c:	89bb      	ldrh	r3, [r7, #12]
 811fd9e:	2b00      	cmp	r3, #0
 811fda0:	d001      	beq.n	811fda6 <tcp_parseopt+0x8a>
 811fda2:	89ba      	ldrh	r2, [r7, #12]
 811fda4:	e001      	b.n	811fdaa <tcp_parseopt+0x8e>
 811fda6:	f44f 7206 	mov.w	r2, #536	@ 0x218
 811fdaa:	687b      	ldr	r3, [r7, #4]
 811fdac:	865a      	strh	r2, [r3, #50]	@ 0x32
          break;
 811fdae:	e012      	b.n	811fdd6 <tcp_parseopt+0xba>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 811fdb0:	f7ff ff7e 	bl	811fcb0 <tcp_get_next_optbyte>
 811fdb4:	4603      	mov	r3, r0
 811fdb6:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 811fdb8:	7afb      	ldrb	r3, [r7, #11]
 811fdba:	2b01      	cmp	r3, #1
 811fdbc:	d916      	bls.n	811fdec <tcp_parseopt+0xd0>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 811fdbe:	7afb      	ldrb	r3, [r7, #11]
 811fdc0:	b29a      	uxth	r2, r3
 811fdc2:	4b10      	ldr	r3, [pc, #64]	@ (811fe04 <tcp_parseopt+0xe8>)
 811fdc4:	881b      	ldrh	r3, [r3, #0]
 811fdc6:	4413      	add	r3, r2
 811fdc8:	b29b      	uxth	r3, r3
 811fdca:	3b02      	subs	r3, #2
 811fdcc:	b29a      	uxth	r2, r3
 811fdce:	4b0d      	ldr	r3, [pc, #52]	@ (811fe04 <tcp_parseopt+0xe8>)
 811fdd0:	801a      	strh	r2, [r3, #0]
 811fdd2:	e000      	b.n	811fdd6 <tcp_parseopt+0xba>
          break;
 811fdd4:	bf00      	nop
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 811fdd6:	4b0b      	ldr	r3, [pc, #44]	@ (811fe04 <tcp_parseopt+0xe8>)
 811fdd8:	881a      	ldrh	r2, [r3, #0]
 811fdda:	4b09      	ldr	r3, [pc, #36]	@ (811fe00 <tcp_parseopt+0xe4>)
 811fddc:	881b      	ldrh	r3, [r3, #0]
 811fdde:	429a      	cmp	r2, r3
 811fde0:	d3b2      	bcc.n	811fd48 <tcp_parseopt+0x2c>
 811fde2:	e004      	b.n	811fdee <tcp_parseopt+0xd2>
          return;
 811fde4:	bf00      	nop
 811fde6:	e002      	b.n	811fdee <tcp_parseopt+0xd2>
            return;
 811fde8:	bf00      	nop
 811fdea:	e000      	b.n	811fdee <tcp_parseopt+0xd2>
            return;
 811fdec:	bf00      	nop
      }
    }
  }
}
 811fdee:	3710      	adds	r7, #16
 811fdf0:	46bd      	mov	sp, r7
 811fdf2:	bd80      	pop	{r7, pc}
 811fdf4:	08127024 	.word	0x08127024
 811fdf8:	081274c8 	.word	0x081274c8
 811fdfc:	081270b0 	.word	0x081270b0
 811fe00:	1000e4c4 	.word	0x1000e4c4
 811fe04:	1000e4cc 	.word	0x1000e4cc

0811fe08 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 811fe08:	b480      	push	{r7}
 811fe0a:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 811fe0c:	4b05      	ldr	r3, [pc, #20]	@ (811fe24 <tcp_trigger_input_pcb_close+0x1c>)
 811fe0e:	781b      	ldrb	r3, [r3, #0]
 811fe10:	f043 0310 	orr.w	r3, r3, #16
 811fe14:	b2da      	uxtb	r2, r3
 811fe16:	4b03      	ldr	r3, [pc, #12]	@ (811fe24 <tcp_trigger_input_pcb_close+0x1c>)
 811fe18:	701a      	strb	r2, [r3, #0]
}
 811fe1a:	bf00      	nop
 811fe1c:	46bd      	mov	sp, r7
 811fe1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 811fe22:	4770      	bx	lr
 811fe24:	1000e4dd 	.word	0x1000e4dd

0811fe28 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 811fe28:	b580      	push	{r7, lr}
 811fe2a:	b084      	sub	sp, #16
 811fe2c:	af00      	add	r7, sp, #0
 811fe2e:	60f8      	str	r0, [r7, #12]
 811fe30:	60b9      	str	r1, [r7, #8]
 811fe32:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 811fe34:	68fb      	ldr	r3, [r7, #12]
 811fe36:	2b00      	cmp	r3, #0
 811fe38:	d00a      	beq.n	811fe50 <tcp_route+0x28>
 811fe3a:	68fb      	ldr	r3, [r7, #12]
 811fe3c:	7a1b      	ldrb	r3, [r3, #8]
 811fe3e:	2b00      	cmp	r3, #0
 811fe40:	d006      	beq.n	811fe50 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 811fe42:	68fb      	ldr	r3, [r7, #12]
 811fe44:	7a1b      	ldrb	r3, [r3, #8]
 811fe46:	4618      	mov	r0, r3
 811fe48:	f7fa ffbc 	bl	811adc4 <netif_get_by_index>
 811fe4c:	4603      	mov	r3, r0
 811fe4e:	e003      	b.n	811fe58 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 811fe50:	6878      	ldr	r0, [r7, #4]
 811fe52:	f7f8 fcdd 	bl	8118810 <ip4_route>
 811fe56:	4603      	mov	r3, r0
  }
}
 811fe58:	4618      	mov	r0, r3
 811fe5a:	3710      	adds	r7, #16
 811fe5c:	46bd      	mov	sp, r7
 811fe5e:	bd80      	pop	{r7, pc}

0811fe60 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 811fe60:	b590      	push	{r4, r7, lr}
 811fe62:	b087      	sub	sp, #28
 811fe64:	af00      	add	r7, sp, #0
 811fe66:	60f8      	str	r0, [r7, #12]
 811fe68:	60b9      	str	r1, [r7, #8]
 811fe6a:	603b      	str	r3, [r7, #0]
 811fe6c:	4613      	mov	r3, r2
 811fe6e:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 811fe70:	68fb      	ldr	r3, [r7, #12]
 811fe72:	2b00      	cmp	r3, #0
 811fe74:	d105      	bne.n	811fe82 <tcp_create_segment+0x22>
 811fe76:	4b43      	ldr	r3, [pc, #268]	@ (811ff84 <tcp_create_segment+0x124>)
 811fe78:	22a3      	movs	r2, #163	@ 0xa3
 811fe7a:	4943      	ldr	r1, [pc, #268]	@ (811ff88 <tcp_create_segment+0x128>)
 811fe7c:	4843      	ldr	r0, [pc, #268]	@ (811ff8c <tcp_create_segment+0x12c>)
 811fe7e:	f003 fecd 	bl	8123c1c <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 811fe82:	68bb      	ldr	r3, [r7, #8]
 811fe84:	2b00      	cmp	r3, #0
 811fe86:	d105      	bne.n	811fe94 <tcp_create_segment+0x34>
 811fe88:	4b3e      	ldr	r3, [pc, #248]	@ (811ff84 <tcp_create_segment+0x124>)
 811fe8a:	22a4      	movs	r2, #164	@ 0xa4
 811fe8c:	4940      	ldr	r1, [pc, #256]	@ (811ff90 <tcp_create_segment+0x130>)
 811fe8e:	483f      	ldr	r0, [pc, #252]	@ (811ff8c <tcp_create_segment+0x12c>)
 811fe90:	f003 fec4 	bl	8123c1c <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 811fe94:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 811fe98:	009b      	lsls	r3, r3, #2
 811fe9a:	b2db      	uxtb	r3, r3
 811fe9c:	f003 0304 	and.w	r3, r3, #4
 811fea0:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 811fea2:	2003      	movs	r0, #3
 811fea4:	f7fa fc02 	bl	811a6ac <memp_malloc>
 811fea8:	6138      	str	r0, [r7, #16]
 811feaa:	693b      	ldr	r3, [r7, #16]
 811feac:	2b00      	cmp	r3, #0
 811feae:	d104      	bne.n	811feba <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 811feb0:	68b8      	ldr	r0, [r7, #8]
 811feb2:	f7fb fb13 	bl	811b4dc <pbuf_free>
    return NULL;
 811feb6:	2300      	movs	r3, #0
 811feb8:	e060      	b.n	811ff7c <tcp_create_segment+0x11c>
  }
  seg->flags = optflags;
 811feba:	693b      	ldr	r3, [r7, #16]
 811febc:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 811fec0:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 811fec2:	693b      	ldr	r3, [r7, #16]
 811fec4:	2200      	movs	r2, #0
 811fec6:	601a      	str	r2, [r3, #0]
  seg->p = p;
 811fec8:	693b      	ldr	r3, [r7, #16]
 811feca:	68ba      	ldr	r2, [r7, #8]
 811fecc:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 811fece:	68bb      	ldr	r3, [r7, #8]
 811fed0:	891a      	ldrh	r2, [r3, #8]
 811fed2:	7dfb      	ldrb	r3, [r7, #23]
 811fed4:	b29b      	uxth	r3, r3
 811fed6:	429a      	cmp	r2, r3
 811fed8:	d205      	bcs.n	811fee6 <tcp_create_segment+0x86>
 811feda:	4b2a      	ldr	r3, [pc, #168]	@ (811ff84 <tcp_create_segment+0x124>)
 811fedc:	22b0      	movs	r2, #176	@ 0xb0
 811fede:	492d      	ldr	r1, [pc, #180]	@ (811ff94 <tcp_create_segment+0x134>)
 811fee0:	482a      	ldr	r0, [pc, #168]	@ (811ff8c <tcp_create_segment+0x12c>)
 811fee2:	f003 fe9b 	bl	8123c1c <iprintf>
  seg->len = p->tot_len - optlen;
 811fee6:	68bb      	ldr	r3, [r7, #8]
 811fee8:	891a      	ldrh	r2, [r3, #8]
 811feea:	7dfb      	ldrb	r3, [r7, #23]
 811feec:	b29b      	uxth	r3, r3
 811feee:	1ad3      	subs	r3, r2, r3
 811fef0:	b29a      	uxth	r2, r3
 811fef2:	693b      	ldr	r3, [r7, #16]
 811fef4:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 811fef6:	2114      	movs	r1, #20
 811fef8:	68b8      	ldr	r0, [r7, #8]
 811fefa:	f7fb fa59 	bl	811b3b0 <pbuf_add_header>
 811fefe:	4603      	mov	r3, r0
 811ff00:	2b00      	cmp	r3, #0
 811ff02:	d004      	beq.n	811ff0e <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 811ff04:	6938      	ldr	r0, [r7, #16]
 811ff06:	f7fd f86a 	bl	811cfde <tcp_seg_free>
    return NULL;
 811ff0a:	2300      	movs	r3, #0
 811ff0c:	e036      	b.n	811ff7c <tcp_create_segment+0x11c>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 811ff0e:	693b      	ldr	r3, [r7, #16]
 811ff10:	685b      	ldr	r3, [r3, #4]
 811ff12:	685a      	ldr	r2, [r3, #4]
 811ff14:	693b      	ldr	r3, [r7, #16]
 811ff16:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 811ff18:	68fb      	ldr	r3, [r7, #12]
 811ff1a:	8ada      	ldrh	r2, [r3, #22]
 811ff1c:	693b      	ldr	r3, [r7, #16]
 811ff1e:	68dc      	ldr	r4, [r3, #12]
 811ff20:	4610      	mov	r0, r2
 811ff22:	f7f7 f8d3 	bl	81170cc <lwip_htons>
 811ff26:	4603      	mov	r3, r0
 811ff28:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 811ff2a:	68fb      	ldr	r3, [r7, #12]
 811ff2c:	8b1a      	ldrh	r2, [r3, #24]
 811ff2e:	693b      	ldr	r3, [r7, #16]
 811ff30:	68dc      	ldr	r4, [r3, #12]
 811ff32:	4610      	mov	r0, r2
 811ff34:	f7f7 f8ca 	bl	81170cc <lwip_htons>
 811ff38:	4603      	mov	r3, r0
 811ff3a:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 811ff3c:	693b      	ldr	r3, [r7, #16]
 811ff3e:	68dc      	ldr	r4, [r3, #12]
 811ff40:	6838      	ldr	r0, [r7, #0]
 811ff42:	f7f7 f8d8 	bl	81170f6 <lwip_htonl>
 811ff46:	4603      	mov	r3, r0
 811ff48:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 811ff4a:	7dfb      	ldrb	r3, [r7, #23]
 811ff4c:	089b      	lsrs	r3, r3, #2
 811ff4e:	b2db      	uxtb	r3, r3
 811ff50:	3305      	adds	r3, #5
 811ff52:	b29b      	uxth	r3, r3
 811ff54:	031b      	lsls	r3, r3, #12
 811ff56:	b29a      	uxth	r2, r3
 811ff58:	79fb      	ldrb	r3, [r7, #7]
 811ff5a:	b29b      	uxth	r3, r3
 811ff5c:	4313      	orrs	r3, r2
 811ff5e:	b29a      	uxth	r2, r3
 811ff60:	693b      	ldr	r3, [r7, #16]
 811ff62:	68dc      	ldr	r4, [r3, #12]
 811ff64:	4610      	mov	r0, r2
 811ff66:	f7f7 f8b1 	bl	81170cc <lwip_htons>
 811ff6a:	4603      	mov	r3, r0
 811ff6c:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 811ff6e:	693b      	ldr	r3, [r7, #16]
 811ff70:	68db      	ldr	r3, [r3, #12]
 811ff72:	2200      	movs	r2, #0
 811ff74:	749a      	strb	r2, [r3, #18]
 811ff76:	2200      	movs	r2, #0
 811ff78:	74da      	strb	r2, [r3, #19]
  return seg;
 811ff7a:	693b      	ldr	r3, [r7, #16]
}
 811ff7c:	4618      	mov	r0, r3
 811ff7e:	371c      	adds	r7, #28
 811ff80:	46bd      	mov	sp, r7
 811ff82:	bd90      	pop	{r4, r7, pc}
 811ff84:	081274e4 	.word	0x081274e4
 811ff88:	08127558 	.word	0x08127558
 811ff8c:	08127578 	.word	0x08127578
 811ff90:	081275a0 	.word	0x081275a0
 811ff94:	081275c4 	.word	0x081275c4

0811ff98 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 811ff98:	b580      	push	{r7, lr}
 811ff9a:	b086      	sub	sp, #24
 811ff9c:	af00      	add	r7, sp, #0
 811ff9e:	607b      	str	r3, [r7, #4]
 811ffa0:	4603      	mov	r3, r0
 811ffa2:	73fb      	strb	r3, [r7, #15]
 811ffa4:	460b      	mov	r3, r1
 811ffa6:	81bb      	strh	r3, [r7, #12]
 811ffa8:	4613      	mov	r3, r2
 811ffaa:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 811ffac:	89bb      	ldrh	r3, [r7, #12]
 811ffae:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 811ffb0:	687b      	ldr	r3, [r7, #4]
 811ffb2:	2b00      	cmp	r3, #0
 811ffb4:	d105      	bne.n	811ffc2 <tcp_pbuf_prealloc+0x2a>
 811ffb6:	4b30      	ldr	r3, [pc, #192]	@ (8120078 <tcp_pbuf_prealloc+0xe0>)
 811ffb8:	22e8      	movs	r2, #232	@ 0xe8
 811ffba:	4930      	ldr	r1, [pc, #192]	@ (812007c <tcp_pbuf_prealloc+0xe4>)
 811ffbc:	4830      	ldr	r0, [pc, #192]	@ (8120080 <tcp_pbuf_prealloc+0xe8>)
 811ffbe:	f003 fe2d 	bl	8123c1c <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 811ffc2:	6a3b      	ldr	r3, [r7, #32]
 811ffc4:	2b00      	cmp	r3, #0
 811ffc6:	d105      	bne.n	811ffd4 <tcp_pbuf_prealloc+0x3c>
 811ffc8:	4b2b      	ldr	r3, [pc, #172]	@ (8120078 <tcp_pbuf_prealloc+0xe0>)
 811ffca:	22e9      	movs	r2, #233	@ 0xe9
 811ffcc:	492d      	ldr	r1, [pc, #180]	@ (8120084 <tcp_pbuf_prealloc+0xec>)
 811ffce:	482c      	ldr	r0, [pc, #176]	@ (8120080 <tcp_pbuf_prealloc+0xe8>)
 811ffd0:	f003 fe24 	bl	8123c1c <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 811ffd4:	89ba      	ldrh	r2, [r7, #12]
 811ffd6:	897b      	ldrh	r3, [r7, #10]
 811ffd8:	429a      	cmp	r2, r3
 811ffda:	d221      	bcs.n	8120020 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 811ffdc:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 811ffe0:	f003 0302 	and.w	r3, r3, #2
 811ffe4:	2b00      	cmp	r3, #0
 811ffe6:	d111      	bne.n	812000c <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 811ffe8:	6a3b      	ldr	r3, [r7, #32]
 811ffea:	8b5b      	ldrh	r3, [r3, #26]
 811ffec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 811fff0:	2b00      	cmp	r3, #0
 811fff2:	d115      	bne.n	8120020 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 811fff4:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 811fff8:	2b00      	cmp	r3, #0
 811fffa:	d007      	beq.n	812000c <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 811fffc:	6a3b      	ldr	r3, [r7, #32]
 811fffe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
         (!first_seg ||
 8120000:	2b00      	cmp	r3, #0
 8120002:	d103      	bne.n	812000c <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 8120004:	6a3b      	ldr	r3, [r7, #32]
 8120006:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
          pcb->unsent != NULL ||
 8120008:	2b00      	cmp	r3, #0
 812000a:	d009      	beq.n	8120020 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 812000c:	89bb      	ldrh	r3, [r7, #12]
 812000e:	f203 231b 	addw	r3, r3, #539	@ 0x21b
 8120012:	f023 0203 	bic.w	r2, r3, #3
 8120016:	897b      	ldrh	r3, [r7, #10]
 8120018:	4293      	cmp	r3, r2
 812001a:	bf28      	it	cs
 812001c:	4613      	movcs	r3, r2
 812001e:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8120020:	8af9      	ldrh	r1, [r7, #22]
 8120022:	7bfb      	ldrb	r3, [r7, #15]
 8120024:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8120028:	4618      	mov	r0, r3
 812002a:	f7fa ff75 	bl	811af18 <pbuf_alloc>
 812002e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8120030:	693b      	ldr	r3, [r7, #16]
 8120032:	2b00      	cmp	r3, #0
 8120034:	d101      	bne.n	812003a <tcp_pbuf_prealloc+0xa2>
    return NULL;
 8120036:	2300      	movs	r3, #0
 8120038:	e019      	b.n	812006e <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 812003a:	693b      	ldr	r3, [r7, #16]
 812003c:	681b      	ldr	r3, [r3, #0]
 812003e:	2b00      	cmp	r3, #0
 8120040:	d006      	beq.n	8120050 <tcp_pbuf_prealloc+0xb8>
 8120042:	4b0d      	ldr	r3, [pc, #52]	@ (8120078 <tcp_pbuf_prealloc+0xe0>)
 8120044:	f240 120b 	movw	r2, #267	@ 0x10b
 8120048:	490f      	ldr	r1, [pc, #60]	@ (8120088 <tcp_pbuf_prealloc+0xf0>)
 812004a:	480d      	ldr	r0, [pc, #52]	@ (8120080 <tcp_pbuf_prealloc+0xe8>)
 812004c:	f003 fde6 	bl	8123c1c <iprintf>
  *oversize = p->len - length;
 8120050:	693b      	ldr	r3, [r7, #16]
 8120052:	895a      	ldrh	r2, [r3, #10]
 8120054:	89bb      	ldrh	r3, [r7, #12]
 8120056:	1ad3      	subs	r3, r2, r3
 8120058:	b29a      	uxth	r2, r3
 812005a:	687b      	ldr	r3, [r7, #4]
 812005c:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 812005e:	693b      	ldr	r3, [r7, #16]
 8120060:	89ba      	ldrh	r2, [r7, #12]
 8120062:	811a      	strh	r2, [r3, #8]
 8120064:	693b      	ldr	r3, [r7, #16]
 8120066:	891a      	ldrh	r2, [r3, #8]
 8120068:	693b      	ldr	r3, [r7, #16]
 812006a:	815a      	strh	r2, [r3, #10]
  return p;
 812006c:	693b      	ldr	r3, [r7, #16]
}
 812006e:	4618      	mov	r0, r3
 8120070:	3718      	adds	r7, #24
 8120072:	46bd      	mov	sp, r7
 8120074:	bd80      	pop	{r7, pc}
 8120076:	bf00      	nop
 8120078:	081274e4 	.word	0x081274e4
 812007c:	081275dc 	.word	0x081275dc
 8120080:	08127578 	.word	0x08127578
 8120084:	08127600 	.word	0x08127600
 8120088:	08127620 	.word	0x08127620

0812008c <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 812008c:	b580      	push	{r7, lr}
 812008e:	b082      	sub	sp, #8
 8120090:	af00      	add	r7, sp, #0
 8120092:	6078      	str	r0, [r7, #4]
 8120094:	460b      	mov	r3, r1
 8120096:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 8120098:	687b      	ldr	r3, [r7, #4]
 812009a:	2b00      	cmp	r3, #0
 812009c:	d106      	bne.n	81200ac <tcp_write_checks+0x20>
 812009e:	4b33      	ldr	r3, [pc, #204]	@ (812016c <tcp_write_checks+0xe0>)
 81200a0:	f240 1233 	movw	r2, #307	@ 0x133
 81200a4:	4932      	ldr	r1, [pc, #200]	@ (8120170 <tcp_write_checks+0xe4>)
 81200a6:	4833      	ldr	r0, [pc, #204]	@ (8120174 <tcp_write_checks+0xe8>)
 81200a8:	f003 fdb8 	bl	8123c1c <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 81200ac:	687b      	ldr	r3, [r7, #4]
 81200ae:	7d1b      	ldrb	r3, [r3, #20]
 81200b0:	2b04      	cmp	r3, #4
 81200b2:	d00e      	beq.n	81200d2 <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 81200b4:	687b      	ldr	r3, [r7, #4]
 81200b6:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 81200b8:	2b07      	cmp	r3, #7
 81200ba:	d00a      	beq.n	81200d2 <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 81200bc:	687b      	ldr	r3, [r7, #4]
 81200be:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 81200c0:	2b02      	cmp	r3, #2
 81200c2:	d006      	beq.n	81200d2 <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 81200c4:	687b      	ldr	r3, [r7, #4]
 81200c6:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 81200c8:	2b03      	cmp	r3, #3
 81200ca:	d002      	beq.n	81200d2 <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 81200cc:	f06f 030a 	mvn.w	r3, #10
 81200d0:	e048      	b.n	8120164 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 81200d2:	887b      	ldrh	r3, [r7, #2]
 81200d4:	2b00      	cmp	r3, #0
 81200d6:	d101      	bne.n	81200dc <tcp_write_checks+0x50>
    return ERR_OK;
 81200d8:	2300      	movs	r3, #0
 81200da:	e043      	b.n	8120164 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 81200dc:	687b      	ldr	r3, [r7, #4]
 81200de:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 81200e2:	887a      	ldrh	r2, [r7, #2]
 81200e4:	429a      	cmp	r2, r3
 81200e6:	d909      	bls.n	81200fc <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 81200e8:	687b      	ldr	r3, [r7, #4]
 81200ea:	8b5b      	ldrh	r3, [r3, #26]
 81200ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 81200f0:	b29a      	uxth	r2, r3
 81200f2:	687b      	ldr	r3, [r7, #4]
 81200f4:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 81200f6:	f04f 33ff 	mov.w	r3, #4294967295
 81200fa:	e033      	b.n	8120164 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 81200fc:	687b      	ldr	r3, [r7, #4]
 81200fe:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8120102:	2b0f      	cmp	r3, #15
 8120104:	d909      	bls.n	812011a <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8120106:	687b      	ldr	r3, [r7, #4]
 8120108:	8b5b      	ldrh	r3, [r3, #26]
 812010a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 812010e:	b29a      	uxth	r2, r3
 8120110:	687b      	ldr	r3, [r7, #4]
 8120112:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8120114:	f04f 33ff 	mov.w	r3, #4294967295
 8120118:	e024      	b.n	8120164 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 812011a:	687b      	ldr	r3, [r7, #4]
 812011c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8120120:	2b00      	cmp	r3, #0
 8120122:	d00f      	beq.n	8120144 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 8120124:	687b      	ldr	r3, [r7, #4]
 8120126:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8120128:	2b00      	cmp	r3, #0
 812012a:	d11a      	bne.n	8120162 <tcp_write_checks+0xd6>
 812012c:	687b      	ldr	r3, [r7, #4]
 812012e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8120130:	2b00      	cmp	r3, #0
 8120132:	d116      	bne.n	8120162 <tcp_write_checks+0xd6>
 8120134:	4b0d      	ldr	r3, [pc, #52]	@ (812016c <tcp_write_checks+0xe0>)
 8120136:	f240 1255 	movw	r2, #341	@ 0x155
 812013a:	490f      	ldr	r1, [pc, #60]	@ (8120178 <tcp_write_checks+0xec>)
 812013c:	480d      	ldr	r0, [pc, #52]	@ (8120174 <tcp_write_checks+0xe8>)
 812013e:	f003 fd6d 	bl	8123c1c <iprintf>
 8120142:	e00e      	b.n	8120162 <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 8120144:	687b      	ldr	r3, [r7, #4]
 8120146:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8120148:	2b00      	cmp	r3, #0
 812014a:	d103      	bne.n	8120154 <tcp_write_checks+0xc8>
 812014c:	687b      	ldr	r3, [r7, #4]
 812014e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8120150:	2b00      	cmp	r3, #0
 8120152:	d006      	beq.n	8120162 <tcp_write_checks+0xd6>
 8120154:	4b05      	ldr	r3, [pc, #20]	@ (812016c <tcp_write_checks+0xe0>)
 8120156:	f44f 72ac 	mov.w	r2, #344	@ 0x158
 812015a:	4908      	ldr	r1, [pc, #32]	@ (812017c <tcp_write_checks+0xf0>)
 812015c:	4805      	ldr	r0, [pc, #20]	@ (8120174 <tcp_write_checks+0xe8>)
 812015e:	f003 fd5d 	bl	8123c1c <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 8120162:	2300      	movs	r3, #0
}
 8120164:	4618      	mov	r0, r3
 8120166:	3708      	adds	r7, #8
 8120168:	46bd      	mov	sp, r7
 812016a:	bd80      	pop	{r7, pc}
 812016c:	081274e4 	.word	0x081274e4
 8120170:	08127634 	.word	0x08127634
 8120174:	08127578 	.word	0x08127578
 8120178:	08127654 	.word	0x08127654
 812017c:	08127690 	.word	0x08127690

08120180 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 8120180:	b590      	push	{r4, r7, lr}
 8120182:	b09b      	sub	sp, #108	@ 0x6c
 8120184:	af04      	add	r7, sp, #16
 8120186:	60f8      	str	r0, [r7, #12]
 8120188:	60b9      	str	r1, [r7, #8]
 812018a:	4611      	mov	r1, r2
 812018c:	461a      	mov	r2, r3
 812018e:	460b      	mov	r3, r1
 8120190:	80fb      	strh	r3, [r7, #6]
 8120192:	4613      	mov	r3, r2
 8120194:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 8120196:	2300      	movs	r3, #0
 8120198:	657b      	str	r3, [r7, #84]	@ 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 812019a:	2300      	movs	r3, #0
 812019c:	653b      	str	r3, [r7, #80]	@ 0x50
 812019e:	2300      	movs	r3, #0
 81201a0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 81201a2:	2300      	movs	r3, #0
 81201a4:	64bb      	str	r3, [r7, #72]	@ 0x48
 81201a6:	2300      	movs	r3, #0
 81201a8:	647b      	str	r3, [r7, #68]	@ 0x44
  u16_t pos = 0; /* position in 'arg' data */
 81201aa:	2300      	movs	r3, #0
 81201ac:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 81201b0:	2300      	movs	r3, #0
 81201b2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 81201b6:	2300      	movs	r3, #0
 81201b8:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 81201ba:	2300      	movs	r3, #0
 81201bc:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 81201be:	2300      	movs	r3, #0
 81201c0:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 81201c2:	68fb      	ldr	r3, [r7, #12]
 81201c4:	2b00      	cmp	r3, #0
 81201c6:	d109      	bne.n	81201dc <tcp_write+0x5c>
 81201c8:	4ba4      	ldr	r3, [pc, #656]	@ (812045c <tcp_write+0x2dc>)
 81201ca:	f44f 72cf 	mov.w	r2, #414	@ 0x19e
 81201ce:	49a4      	ldr	r1, [pc, #656]	@ (8120460 <tcp_write+0x2e0>)
 81201d0:	48a4      	ldr	r0, [pc, #656]	@ (8120464 <tcp_write+0x2e4>)
 81201d2:	f003 fd23 	bl	8123c1c <iprintf>
 81201d6:	f06f 030f 	mvn.w	r3, #15
 81201da:	e32a      	b.n	8120832 <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 81201dc:	68fb      	ldr	r3, [r7, #12]
 81201de:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 81201e2:	085b      	lsrs	r3, r3, #1
 81201e4:	b29a      	uxth	r2, r3
 81201e6:	68fb      	ldr	r3, [r7, #12]
 81201e8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 81201ea:	4293      	cmp	r3, r2
 81201ec:	bf28      	it	cs
 81201ee:	4613      	movcs	r3, r2
 81201f0:	84bb      	strh	r3, [r7, #36]	@ 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 81201f2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 81201f4:	2b00      	cmp	r3, #0
 81201f6:	d102      	bne.n	81201fe <tcp_write+0x7e>
 81201f8:	68fb      	ldr	r3, [r7, #12]
 81201fa:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 81201fc:	e000      	b.n	8120200 <tcp_write+0x80>
 81201fe:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8120200:	84bb      	strh	r3, [r7, #36]	@ 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 8120202:	68bb      	ldr	r3, [r7, #8]
 8120204:	2b00      	cmp	r3, #0
 8120206:	d109      	bne.n	812021c <tcp_write+0x9c>
 8120208:	4b94      	ldr	r3, [pc, #592]	@ (812045c <tcp_write+0x2dc>)
 812020a:	f240 12ad 	movw	r2, #429	@ 0x1ad
 812020e:	4996      	ldr	r1, [pc, #600]	@ (8120468 <tcp_write+0x2e8>)
 8120210:	4894      	ldr	r0, [pc, #592]	@ (8120464 <tcp_write+0x2e4>)
 8120212:	f003 fd03 	bl	8123c1c <iprintf>
 8120216:	f06f 030f 	mvn.w	r3, #15
 812021a:	e30a      	b.n	8120832 <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 812021c:	88fb      	ldrh	r3, [r7, #6]
 812021e:	4619      	mov	r1, r3
 8120220:	68f8      	ldr	r0, [r7, #12]
 8120222:	f7ff ff33 	bl	812008c <tcp_write_checks>
 8120226:	4603      	mov	r3, r0
 8120228:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (err != ERR_OK) {
 812022c:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 8120230:	2b00      	cmp	r3, #0
 8120232:	d002      	beq.n	812023a <tcp_write+0xba>
    return err;
 8120234:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 8120238:	e2fb      	b.n	8120832 <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 812023a:	68fb      	ldr	r3, [r7, #12]
 812023c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8120240:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8120244:	2300      	movs	r3, #0
 8120246:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 812024a:	68fb      	ldr	r3, [r7, #12]
 812024c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 812024e:	2b00      	cmp	r3, #0
 8120250:	f000 80f6 	beq.w	8120440 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8120254:	68fb      	ldr	r3, [r7, #12]
 8120256:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8120258:	653b      	str	r3, [r7, #80]	@ 0x50
 812025a:	e002      	b.n	8120262 <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 812025c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 812025e:	681b      	ldr	r3, [r3, #0]
 8120260:	653b      	str	r3, [r7, #80]	@ 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8120262:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8120264:	681b      	ldr	r3, [r3, #0]
 8120266:	2b00      	cmp	r3, #0
 8120268:	d1f8      	bne.n	812025c <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 812026a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 812026c:	7a9b      	ldrb	r3, [r3, #10]
 812026e:	009b      	lsls	r3, r3, #2
 8120270:	b29b      	uxth	r3, r3
 8120272:	f003 0304 	and.w	r3, r3, #4
 8120276:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8120278:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 812027a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 812027c:	891b      	ldrh	r3, [r3, #8]
 812027e:	4619      	mov	r1, r3
 8120280:	8c3b      	ldrh	r3, [r7, #32]
 8120282:	440b      	add	r3, r1
 8120284:	429a      	cmp	r2, r3
 8120286:	da06      	bge.n	8120296 <tcp_write+0x116>
 8120288:	4b74      	ldr	r3, [pc, #464]	@ (812045c <tcp_write+0x2dc>)
 812028a:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 812028e:	4977      	ldr	r1, [pc, #476]	@ (812046c <tcp_write+0x2ec>)
 8120290:	4874      	ldr	r0, [pc, #464]	@ (8120464 <tcp_write+0x2e4>)
 8120292:	f003 fcc3 	bl	8123c1c <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 8120296:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8120298:	891a      	ldrh	r2, [r3, #8]
 812029a:	8c3b      	ldrh	r3, [r7, #32]
 812029c:	4413      	add	r3, r2
 812029e:	b29b      	uxth	r3, r3
 81202a0:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 81202a2:	1ad3      	subs	r3, r2, r3
 81202a4:	877b      	strh	r3, [r7, #58]	@ 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 81202a6:	68fb      	ldr	r3, [r7, #12]
 81202a8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 81202ac:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 81202ae:	8a7b      	ldrh	r3, [r7, #18]
 81202b0:	2b00      	cmp	r3, #0
 81202b2:	d026      	beq.n	8120302 <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 81202b4:	8a7b      	ldrh	r3, [r7, #18]
 81202b6:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 81202b8:	429a      	cmp	r2, r3
 81202ba:	d206      	bcs.n	81202ca <tcp_write+0x14a>
 81202bc:	4b67      	ldr	r3, [pc, #412]	@ (812045c <tcp_write+0x2dc>)
 81202be:	f44f 72fc 	mov.w	r2, #504	@ 0x1f8
 81202c2:	496b      	ldr	r1, [pc, #428]	@ (8120470 <tcp_write+0x2f0>)
 81202c4:	4867      	ldr	r0, [pc, #412]	@ (8120464 <tcp_write+0x2e4>)
 81202c6:	f003 fca9 	bl	8123c1c <iprintf>
      seg = last_unsent;
 81202ca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 81202cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 81202ce:	8a7b      	ldrh	r3, [r7, #18]
 81202d0:	88fa      	ldrh	r2, [r7, #6]
 81202d2:	4293      	cmp	r3, r2
 81202d4:	bf28      	it	cs
 81202d6:	4613      	movcs	r3, r2
 81202d8:	b29b      	uxth	r3, r3
 81202da:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 81202dc:	4293      	cmp	r3, r2
 81202de:	bf28      	it	cs
 81202e0:	4613      	movcs	r3, r2
 81202e2:	87fb      	strh	r3, [r7, #62]	@ 0x3e
      pos += oversize_used;
 81202e4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 81202e8:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 81202ea:	4413      	add	r3, r2
 81202ec:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      oversize -= oversize_used;
 81202f0:	8a7a      	ldrh	r2, [r7, #18]
 81202f2:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 81202f4:	1ad3      	subs	r3, r2, r3
 81202f6:	b29b      	uxth	r3, r3
 81202f8:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 81202fa:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 81202fc:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 81202fe:	1ad3      	subs	r3, r2, r3
 8120300:	877b      	strh	r3, [r7, #58]	@ 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 8120302:	8a7b      	ldrh	r3, [r7, #18]
 8120304:	2b00      	cmp	r3, #0
 8120306:	d00b      	beq.n	8120320 <tcp_write+0x1a0>
 8120308:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 812030c:	88fb      	ldrh	r3, [r7, #6]
 812030e:	429a      	cmp	r2, r3
 8120310:	d006      	beq.n	8120320 <tcp_write+0x1a0>
 8120312:	4b52      	ldr	r3, [pc, #328]	@ (812045c <tcp_write+0x2dc>)
 8120314:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8120318:	4956      	ldr	r1, [pc, #344]	@ (8120474 <tcp_write+0x2f4>)
 812031a:	4852      	ldr	r0, [pc, #328]	@ (8120464 <tcp_write+0x2e4>)
 812031c:	f003 fc7e 	bl	8123c1c <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8120320:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8120324:	88fb      	ldrh	r3, [r7, #6]
 8120326:	429a      	cmp	r2, r3
 8120328:	f080 8167 	bcs.w	81205fa <tcp_write+0x47a>
 812032c:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 812032e:	2b00      	cmp	r3, #0
 8120330:	f000 8163 	beq.w	81205fa <tcp_write+0x47a>
 8120334:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8120336:	891b      	ldrh	r3, [r3, #8]
 8120338:	2b00      	cmp	r3, #0
 812033a:	f000 815e 	beq.w	81205fa <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 812033e:	88fa      	ldrh	r2, [r7, #6]
 8120340:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8120344:	1ad2      	subs	r2, r2, r3
 8120346:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8120348:	4293      	cmp	r3, r2
 812034a:	bfa8      	it	ge
 812034c:	4613      	movge	r3, r2
 812034e:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 8120350:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8120352:	64fb      	str	r3, [r7, #76]	@ 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8120354:	797b      	ldrb	r3, [r7, #5]
 8120356:	f003 0301 	and.w	r3, r3, #1
 812035a:	2b00      	cmp	r3, #0
 812035c:	d027      	beq.n	81203ae <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 812035e:	f107 0012 	add.w	r0, r7, #18
 8120362:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8120364:	8bf9      	ldrh	r1, [r7, #30]
 8120366:	2301      	movs	r3, #1
 8120368:	9302      	str	r3, [sp, #8]
 812036a:	797b      	ldrb	r3, [r7, #5]
 812036c:	9301      	str	r3, [sp, #4]
 812036e:	68fb      	ldr	r3, [r7, #12]
 8120370:	9300      	str	r3, [sp, #0]
 8120372:	4603      	mov	r3, r0
 8120374:	2000      	movs	r0, #0
 8120376:	f7ff fe0f 	bl	811ff98 <tcp_pbuf_prealloc>
 812037a:	6578      	str	r0, [r7, #84]	@ 0x54
 812037c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 812037e:	2b00      	cmp	r3, #0
 8120380:	f000 8225 	beq.w	81207ce <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 8120384:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8120386:	6858      	ldr	r0, [r3, #4]
 8120388:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 812038c:	68ba      	ldr	r2, [r7, #8]
 812038e:	4413      	add	r3, r2
 8120390:	8bfa      	ldrh	r2, [r7, #30]
 8120392:	4619      	mov	r1, r3
 8120394:	f003 fed1 	bl	812413a <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 8120398:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 812039a:	f7fb f92d 	bl	811b5f8 <pbuf_clen>
 812039e:	4603      	mov	r3, r0
 81203a0:	461a      	mov	r2, r3
 81203a2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 81203a6:	4413      	add	r3, r2
 81203a8:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 81203ac:	e041      	b.n	8120432 <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 81203ae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 81203b0:	685b      	ldr	r3, [r3, #4]
 81203b2:	637b      	str	r3, [r7, #52]	@ 0x34
 81203b4:	e002      	b.n	81203bc <tcp_write+0x23c>
 81203b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81203b8:	681b      	ldr	r3, [r3, #0]
 81203ba:	637b      	str	r3, [r7, #52]	@ 0x34
 81203bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81203be:	681b      	ldr	r3, [r3, #0]
 81203c0:	2b00      	cmp	r3, #0
 81203c2:	d1f8      	bne.n	81203b6 <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 81203c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81203c6:	7b1b      	ldrb	r3, [r3, #12]
 81203c8:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 81203cc:	2b00      	cmp	r3, #0
 81203ce:	d115      	bne.n	81203fc <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 81203d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81203d2:	685b      	ldr	r3, [r3, #4]
 81203d4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 81203d6:	8952      	ldrh	r2, [r2, #10]
 81203d8:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 81203da:	68ba      	ldr	r2, [r7, #8]
 81203dc:	429a      	cmp	r2, r3
 81203de:	d10d      	bne.n	81203fc <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 81203e0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 81203e4:	2b00      	cmp	r3, #0
 81203e6:	d006      	beq.n	81203f6 <tcp_write+0x276>
 81203e8:	4b1c      	ldr	r3, [pc, #112]	@ (812045c <tcp_write+0x2dc>)
 81203ea:	f240 2231 	movw	r2, #561	@ 0x231
 81203ee:	4922      	ldr	r1, [pc, #136]	@ (8120478 <tcp_write+0x2f8>)
 81203f0:	481c      	ldr	r0, [pc, #112]	@ (8120464 <tcp_write+0x2e4>)
 81203f2:	f003 fc13 	bl	8123c1c <iprintf>
          extendlen = seglen;
 81203f6:	8bfb      	ldrh	r3, [r7, #30]
 81203f8:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 81203fa:	e01a      	b.n	8120432 <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 81203fc:	8bfb      	ldrh	r3, [r7, #30]
 81203fe:	2201      	movs	r2, #1
 8120400:	4619      	mov	r1, r3
 8120402:	2000      	movs	r0, #0
 8120404:	f7fa fd88 	bl	811af18 <pbuf_alloc>
 8120408:	6578      	str	r0, [r7, #84]	@ 0x54
 812040a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 812040c:	2b00      	cmp	r3, #0
 812040e:	f000 81e0 	beq.w	81207d2 <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 8120412:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8120416:	68ba      	ldr	r2, [r7, #8]
 8120418:	441a      	add	r2, r3
 812041a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 812041c:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 812041e:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8120420:	f7fb f8ea 	bl	811b5f8 <pbuf_clen>
 8120424:	4603      	mov	r3, r0
 8120426:	461a      	mov	r2, r3
 8120428:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 812042c:	4413      	add	r3, r2
 812042e:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 8120432:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8120436:	8bfb      	ldrh	r3, [r7, #30]
 8120438:	4413      	add	r3, r2
 812043a:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 812043e:	e0dc      	b.n	81205fa <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 8120440:	68fb      	ldr	r3, [r7, #12]
 8120442:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8120446:	2b00      	cmp	r3, #0
 8120448:	f000 80d7 	beq.w	81205fa <tcp_write+0x47a>
 812044c:	4b03      	ldr	r3, [pc, #12]	@ (812045c <tcp_write+0x2dc>)
 812044e:	f240 224a 	movw	r2, #586	@ 0x24a
 8120452:	490a      	ldr	r1, [pc, #40]	@ (812047c <tcp_write+0x2fc>)
 8120454:	4803      	ldr	r0, [pc, #12]	@ (8120464 <tcp_write+0x2e4>)
 8120456:	f003 fbe1 	bl	8123c1c <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 812045a:	e0ce      	b.n	81205fa <tcp_write+0x47a>
 812045c:	081274e4 	.word	0x081274e4
 8120460:	081276c4 	.word	0x081276c4
 8120464:	08127578 	.word	0x08127578
 8120468:	081276dc 	.word	0x081276dc
 812046c:	08127710 	.word	0x08127710
 8120470:	08127728 	.word	0x08127728
 8120474:	08127748 	.word	0x08127748
 8120478:	08127768 	.word	0x08127768
 812047c:	08127794 	.word	0x08127794
    struct pbuf *p;
    u16_t left = len - pos;
 8120480:	88fa      	ldrh	r2, [r7, #6]
 8120482:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8120486:	1ad3      	subs	r3, r2, r3
 8120488:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 812048a:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 812048e:	b29b      	uxth	r3, r3
 8120490:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8120492:	1ad3      	subs	r3, r2, r3
 8120494:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 8120496:	8b7a      	ldrh	r2, [r7, #26]
 8120498:	8bbb      	ldrh	r3, [r7, #28]
 812049a:	4293      	cmp	r3, r2
 812049c:	bf28      	it	cs
 812049e:	4613      	movcs	r3, r2
 81204a0:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 81204a2:	797b      	ldrb	r3, [r7, #5]
 81204a4:	f003 0301 	and.w	r3, r3, #1
 81204a8:	2b00      	cmp	r3, #0
 81204aa:	d036      	beq.n	812051a <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 81204ac:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 81204b0:	b29a      	uxth	r2, r3
 81204b2:	8b3b      	ldrh	r3, [r7, #24]
 81204b4:	4413      	add	r3, r2
 81204b6:	b299      	uxth	r1, r3
 81204b8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 81204ba:	2b00      	cmp	r3, #0
 81204bc:	bf0c      	ite	eq
 81204be:	2301      	moveq	r3, #1
 81204c0:	2300      	movne	r3, #0
 81204c2:	b2db      	uxtb	r3, r3
 81204c4:	f107 0012 	add.w	r0, r7, #18
 81204c8:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 81204ca:	9302      	str	r3, [sp, #8]
 81204cc:	797b      	ldrb	r3, [r7, #5]
 81204ce:	9301      	str	r3, [sp, #4]
 81204d0:	68fb      	ldr	r3, [r7, #12]
 81204d2:	9300      	str	r3, [sp, #0]
 81204d4:	4603      	mov	r3, r0
 81204d6:	2036      	movs	r0, #54	@ 0x36
 81204d8:	f7ff fd5e 	bl	811ff98 <tcp_pbuf_prealloc>
 81204dc:	6338      	str	r0, [r7, #48]	@ 0x30
 81204de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81204e0:	2b00      	cmp	r3, #0
 81204e2:	f000 8178 	beq.w	81207d6 <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 81204e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81204e8:	895b      	ldrh	r3, [r3, #10]
 81204ea:	8b3a      	ldrh	r2, [r7, #24]
 81204ec:	429a      	cmp	r2, r3
 81204ee:	d906      	bls.n	81204fe <tcp_write+0x37e>
 81204f0:	4b8c      	ldr	r3, [pc, #560]	@ (8120724 <tcp_write+0x5a4>)
 81204f2:	f240 2266 	movw	r2, #614	@ 0x266
 81204f6:	498c      	ldr	r1, [pc, #560]	@ (8120728 <tcp_write+0x5a8>)
 81204f8:	488c      	ldr	r0, [pc, #560]	@ (812072c <tcp_write+0x5ac>)
 81204fa:	f003 fb8f 	bl	8123c1c <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 81204fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8120500:	685a      	ldr	r2, [r3, #4]
 8120502:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8120506:	18d0      	adds	r0, r2, r3
 8120508:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 812050c:	68ba      	ldr	r2, [r7, #8]
 812050e:	4413      	add	r3, r2
 8120510:	8b3a      	ldrh	r2, [r7, #24]
 8120512:	4619      	mov	r1, r3
 8120514:	f003 fe11 	bl	812413a <memcpy>
 8120518:	e02f      	b.n	812057a <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 812051a:	8a7b      	ldrh	r3, [r7, #18]
 812051c:	2b00      	cmp	r3, #0
 812051e:	d006      	beq.n	812052e <tcp_write+0x3ae>
 8120520:	4b80      	ldr	r3, [pc, #512]	@ (8120724 <tcp_write+0x5a4>)
 8120522:	f240 2271 	movw	r2, #625	@ 0x271
 8120526:	4982      	ldr	r1, [pc, #520]	@ (8120730 <tcp_write+0x5b0>)
 8120528:	4880      	ldr	r0, [pc, #512]	@ (812072c <tcp_write+0x5ac>)
 812052a:	f003 fb77 	bl	8123c1c <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 812052e:	8b3b      	ldrh	r3, [r7, #24]
 8120530:	2201      	movs	r2, #1
 8120532:	4619      	mov	r1, r3
 8120534:	2036      	movs	r0, #54	@ 0x36
 8120536:	f7fa fcef 	bl	811af18 <pbuf_alloc>
 812053a:	6178      	str	r0, [r7, #20]
 812053c:	697b      	ldr	r3, [r7, #20]
 812053e:	2b00      	cmp	r3, #0
 8120540:	f000 814b 	beq.w	81207da <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 8120544:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8120548:	68ba      	ldr	r2, [r7, #8]
 812054a:	441a      	add	r2, r3
 812054c:	697b      	ldr	r3, [r7, #20]
 812054e:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8120550:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8120554:	b29b      	uxth	r3, r3
 8120556:	f44f 7220 	mov.w	r2, #640	@ 0x280
 812055a:	4619      	mov	r1, r3
 812055c:	2036      	movs	r0, #54	@ 0x36
 812055e:	f7fa fcdb 	bl	811af18 <pbuf_alloc>
 8120562:	6338      	str	r0, [r7, #48]	@ 0x30
 8120564:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8120566:	2b00      	cmp	r3, #0
 8120568:	d103      	bne.n	8120572 <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 812056a:	6978      	ldr	r0, [r7, #20]
 812056c:	f7fa ffb6 	bl	811b4dc <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 8120570:	e136      	b.n	81207e0 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 8120572:	6979      	ldr	r1, [r7, #20]
 8120574:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8120576:	f7fb f87f 	bl	811b678 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 812057a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 812057c:	f7fb f83c 	bl	811b5f8 <pbuf_clen>
 8120580:	4603      	mov	r3, r0
 8120582:	461a      	mov	r2, r3
 8120584:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8120588:	4413      	add	r3, r2
 812058a:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 812058e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8120592:	2b10      	cmp	r3, #16
 8120594:	d903      	bls.n	812059e <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 8120596:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8120598:	f7fa ffa0 	bl	811b4dc <pbuf_free>
      goto memerr;
 812059c:	e120      	b.n	81207e0 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 812059e:	68fb      	ldr	r3, [r7, #12]
 81205a0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 81205a2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 81205a6:	441a      	add	r2, r3
 81205a8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 81205ac:	9300      	str	r3, [sp, #0]
 81205ae:	4613      	mov	r3, r2
 81205b0:	2200      	movs	r2, #0
 81205b2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 81205b4:	68f8      	ldr	r0, [r7, #12]
 81205b6:	f7ff fc53 	bl	811fe60 <tcp_create_segment>
 81205ba:	64f8      	str	r0, [r7, #76]	@ 0x4c
 81205bc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 81205be:	2b00      	cmp	r3, #0
 81205c0:	f000 810d 	beq.w	81207de <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 81205c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 81205c6:	2b00      	cmp	r3, #0
 81205c8:	d102      	bne.n	81205d0 <tcp_write+0x450>
      queue = seg;
 81205ca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 81205cc:	647b      	str	r3, [r7, #68]	@ 0x44
 81205ce:	e00c      	b.n	81205ea <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 81205d0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 81205d2:	2b00      	cmp	r3, #0
 81205d4:	d106      	bne.n	81205e4 <tcp_write+0x464>
 81205d6:	4b53      	ldr	r3, [pc, #332]	@ (8120724 <tcp_write+0x5a4>)
 81205d8:	f240 22ab 	movw	r2, #683	@ 0x2ab
 81205dc:	4955      	ldr	r1, [pc, #340]	@ (8120734 <tcp_write+0x5b4>)
 81205de:	4853      	ldr	r0, [pc, #332]	@ (812072c <tcp_write+0x5ac>)
 81205e0:	f003 fb1c 	bl	8123c1c <iprintf>
      prev_seg->next = seg;
 81205e4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 81205e6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 81205e8:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 81205ea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 81205ec:	64bb      	str	r3, [r7, #72]	@ 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 81205ee:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 81205f2:	8b3b      	ldrh	r3, [r7, #24]
 81205f4:	4413      	add	r3, r2
 81205f6:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
  while (pos < len) {
 81205fa:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 81205fe:	88fb      	ldrh	r3, [r7, #6]
 8120600:	429a      	cmp	r2, r3
 8120602:	f4ff af3d 	bcc.w	8120480 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 8120606:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8120608:	2b00      	cmp	r3, #0
 812060a:	d02c      	beq.n	8120666 <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 812060c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 812060e:	685b      	ldr	r3, [r3, #4]
 8120610:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8120612:	e01e      	b.n	8120652 <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 8120614:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8120616:	891a      	ldrh	r2, [r3, #8]
 8120618:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 812061a:	4413      	add	r3, r2
 812061c:	b29a      	uxth	r2, r3
 812061e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8120620:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 8120622:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8120624:	681b      	ldr	r3, [r3, #0]
 8120626:	2b00      	cmp	r3, #0
 8120628:	d110      	bne.n	812064c <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 812062a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 812062c:	685b      	ldr	r3, [r3, #4]
 812062e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8120630:	8952      	ldrh	r2, [r2, #10]
 8120632:	4413      	add	r3, r2
 8120634:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8120636:	68b9      	ldr	r1, [r7, #8]
 8120638:	4618      	mov	r0, r3
 812063a:	f003 fd7e 	bl	812413a <memcpy>
        p->len += oversize_used;
 812063e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8120640:	895a      	ldrh	r2, [r3, #10]
 8120642:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8120644:	4413      	add	r3, r2
 8120646:	b29a      	uxth	r2, r3
 8120648:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 812064a:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 812064c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 812064e:	681b      	ldr	r3, [r3, #0]
 8120650:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8120652:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8120654:	2b00      	cmp	r3, #0
 8120656:	d1dd      	bne.n	8120614 <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 8120658:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 812065a:	891a      	ldrh	r2, [r3, #8]
 812065c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 812065e:	4413      	add	r3, r2
 8120660:	b29a      	uxth	r2, r3
 8120662:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8120664:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 8120666:	8a7a      	ldrh	r2, [r7, #18]
 8120668:	68fb      	ldr	r3, [r7, #12]
 812066a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 812066e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8120670:	2b00      	cmp	r3, #0
 8120672:	d018      	beq.n	81206a6 <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 8120674:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8120676:	2b00      	cmp	r3, #0
 8120678:	d106      	bne.n	8120688 <tcp_write+0x508>
 812067a:	4b2a      	ldr	r3, [pc, #168]	@ (8120724 <tcp_write+0x5a4>)
 812067c:	f44f 7238 	mov.w	r2, #736	@ 0x2e0
 8120680:	492d      	ldr	r1, [pc, #180]	@ (8120738 <tcp_write+0x5b8>)
 8120682:	482a      	ldr	r0, [pc, #168]	@ (812072c <tcp_write+0x5ac>)
 8120684:	f003 faca 	bl	8123c1c <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 8120688:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 812068a:	685b      	ldr	r3, [r3, #4]
 812068c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 812068e:	4618      	mov	r0, r3
 8120690:	f7fa fff2 	bl	811b678 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 8120694:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8120696:	891a      	ldrh	r2, [r3, #8]
 8120698:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 812069a:	891b      	ldrh	r3, [r3, #8]
 812069c:	4413      	add	r3, r2
 812069e:	b29a      	uxth	r2, r3
 81206a0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 81206a2:	811a      	strh	r2, [r3, #8]
 81206a4:	e037      	b.n	8120716 <tcp_write+0x596>
  } else if (extendlen > 0) {
 81206a6:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 81206a8:	2b00      	cmp	r3, #0
 81206aa:	d034      	beq.n	8120716 <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 81206ac:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 81206ae:	2b00      	cmp	r3, #0
 81206b0:	d003      	beq.n	81206ba <tcp_write+0x53a>
 81206b2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 81206b4:	685b      	ldr	r3, [r3, #4]
 81206b6:	2b00      	cmp	r3, #0
 81206b8:	d106      	bne.n	81206c8 <tcp_write+0x548>
 81206ba:	4b1a      	ldr	r3, [pc, #104]	@ (8120724 <tcp_write+0x5a4>)
 81206bc:	f240 22e6 	movw	r2, #742	@ 0x2e6
 81206c0:	491e      	ldr	r1, [pc, #120]	@ (812073c <tcp_write+0x5bc>)
 81206c2:	481a      	ldr	r0, [pc, #104]	@ (812072c <tcp_write+0x5ac>)
 81206c4:	f003 faaa 	bl	8123c1c <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 81206c8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 81206ca:	685b      	ldr	r3, [r3, #4]
 81206cc:	62bb      	str	r3, [r7, #40]	@ 0x28
 81206ce:	e009      	b.n	81206e4 <tcp_write+0x564>
      p->tot_len += extendlen;
 81206d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81206d2:	891a      	ldrh	r2, [r3, #8]
 81206d4:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 81206d6:	4413      	add	r3, r2
 81206d8:	b29a      	uxth	r2, r3
 81206da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81206dc:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 81206de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81206e0:	681b      	ldr	r3, [r3, #0]
 81206e2:	62bb      	str	r3, [r7, #40]	@ 0x28
 81206e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81206e6:	681b      	ldr	r3, [r3, #0]
 81206e8:	2b00      	cmp	r3, #0
 81206ea:	d1f1      	bne.n	81206d0 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 81206ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81206ee:	891a      	ldrh	r2, [r3, #8]
 81206f0:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 81206f2:	4413      	add	r3, r2
 81206f4:	b29a      	uxth	r2, r3
 81206f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81206f8:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 81206fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81206fc:	895a      	ldrh	r2, [r3, #10]
 81206fe:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8120700:	4413      	add	r3, r2
 8120702:	b29a      	uxth	r2, r3
 8120704:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8120706:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 8120708:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 812070a:	891a      	ldrh	r2, [r3, #8]
 812070c:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 812070e:	4413      	add	r3, r2
 8120710:	b29a      	uxth	r2, r3
 8120712:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8120714:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 8120716:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8120718:	2b00      	cmp	r3, #0
 812071a:	d111      	bne.n	8120740 <tcp_write+0x5c0>
    pcb->unsent = queue;
 812071c:	68fb      	ldr	r3, [r7, #12]
 812071e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8120720:	66da      	str	r2, [r3, #108]	@ 0x6c
 8120722:	e010      	b.n	8120746 <tcp_write+0x5c6>
 8120724:	081274e4 	.word	0x081274e4
 8120728:	081277c4 	.word	0x081277c4
 812072c:	08127578 	.word	0x08127578
 8120730:	08127804 	.word	0x08127804
 8120734:	08127814 	.word	0x08127814
 8120738:	08127828 	.word	0x08127828
 812073c:	08127860 	.word	0x08127860
  } else {
    last_unsent->next = queue;
 8120740:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8120742:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8120744:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 8120746:	68fb      	ldr	r3, [r7, #12]
 8120748:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 812074a:	88fb      	ldrh	r3, [r7, #6]
 812074c:	441a      	add	r2, r3
 812074e:	68fb      	ldr	r3, [r7, #12]
 8120750:	65da      	str	r2, [r3, #92]	@ 0x5c
  pcb->snd_buf -= len;
 8120752:	68fb      	ldr	r3, [r7, #12]
 8120754:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 8120758:	88fb      	ldrh	r3, [r7, #6]
 812075a:	1ad3      	subs	r3, r2, r3
 812075c:	b29a      	uxth	r2, r3
 812075e:	68fb      	ldr	r3, [r7, #12]
 8120760:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
  pcb->snd_queuelen = queuelen;
 8120764:	68fb      	ldr	r3, [r7, #12]
 8120766:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 812076a:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 812076e:	68fb      	ldr	r3, [r7, #12]
 8120770:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8120774:	2b00      	cmp	r3, #0
 8120776:	d00e      	beq.n	8120796 <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 8120778:	68fb      	ldr	r3, [r7, #12]
 812077a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 812077c:	2b00      	cmp	r3, #0
 812077e:	d10a      	bne.n	8120796 <tcp_write+0x616>
 8120780:	68fb      	ldr	r3, [r7, #12]
 8120782:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8120784:	2b00      	cmp	r3, #0
 8120786:	d106      	bne.n	8120796 <tcp_write+0x616>
 8120788:	4b2c      	ldr	r3, [pc, #176]	@ (812083c <tcp_write+0x6bc>)
 812078a:	f240 3212 	movw	r2, #786	@ 0x312
 812078e:	492c      	ldr	r1, [pc, #176]	@ (8120840 <tcp_write+0x6c0>)
 8120790:	482c      	ldr	r0, [pc, #176]	@ (8120844 <tcp_write+0x6c4>)
 8120792:	f003 fa43 	bl	8123c1c <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 8120796:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8120798:	2b00      	cmp	r3, #0
 812079a:	d016      	beq.n	81207ca <tcp_write+0x64a>
 812079c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 812079e:	68db      	ldr	r3, [r3, #12]
 81207a0:	2b00      	cmp	r3, #0
 81207a2:	d012      	beq.n	81207ca <tcp_write+0x64a>
 81207a4:	797b      	ldrb	r3, [r7, #5]
 81207a6:	f003 0302 	and.w	r3, r3, #2
 81207aa:	2b00      	cmp	r3, #0
 81207ac:	d10d      	bne.n	81207ca <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 81207ae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 81207b0:	68db      	ldr	r3, [r3, #12]
 81207b2:	899b      	ldrh	r3, [r3, #12]
 81207b4:	b29c      	uxth	r4, r3
 81207b6:	2008      	movs	r0, #8
 81207b8:	f7f6 fc88 	bl	81170cc <lwip_htons>
 81207bc:	4603      	mov	r3, r0
 81207be:	461a      	mov	r2, r3
 81207c0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 81207c2:	68db      	ldr	r3, [r3, #12]
 81207c4:	4322      	orrs	r2, r4
 81207c6:	b292      	uxth	r2, r2
 81207c8:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 81207ca:	2300      	movs	r3, #0
 81207cc:	e031      	b.n	8120832 <tcp_write+0x6b2>
          goto memerr;
 81207ce:	bf00      	nop
 81207d0:	e006      	b.n	81207e0 <tcp_write+0x660>
            goto memerr;
 81207d2:	bf00      	nop
 81207d4:	e004      	b.n	81207e0 <tcp_write+0x660>
        goto memerr;
 81207d6:	bf00      	nop
 81207d8:	e002      	b.n	81207e0 <tcp_write+0x660>
        goto memerr;
 81207da:	bf00      	nop
 81207dc:	e000      	b.n	81207e0 <tcp_write+0x660>
      goto memerr;
 81207de:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 81207e0:	68fb      	ldr	r3, [r7, #12]
 81207e2:	8b5b      	ldrh	r3, [r3, #26]
 81207e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 81207e8:	b29a      	uxth	r2, r3
 81207ea:	68fb      	ldr	r3, [r7, #12]
 81207ec:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 81207ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 81207f0:	2b00      	cmp	r3, #0
 81207f2:	d002      	beq.n	81207fa <tcp_write+0x67a>
    pbuf_free(concat_p);
 81207f4:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 81207f6:	f7fa fe71 	bl	811b4dc <pbuf_free>
  }
  if (queue != NULL) {
 81207fa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 81207fc:	2b00      	cmp	r3, #0
 81207fe:	d002      	beq.n	8120806 <tcp_write+0x686>
    tcp_segs_free(queue);
 8120800:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8120802:	f7fc fbd7 	bl	811cfb4 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 8120806:	68fb      	ldr	r3, [r7, #12]
 8120808:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 812080c:	2b00      	cmp	r3, #0
 812080e:	d00e      	beq.n	812082e <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 8120810:	68fb      	ldr	r3, [r7, #12]
 8120812:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8120814:	2b00      	cmp	r3, #0
 8120816:	d10a      	bne.n	812082e <tcp_write+0x6ae>
 8120818:	68fb      	ldr	r3, [r7, #12]
 812081a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 812081c:	2b00      	cmp	r3, #0
 812081e:	d106      	bne.n	812082e <tcp_write+0x6ae>
 8120820:	4b06      	ldr	r3, [pc, #24]	@ (812083c <tcp_write+0x6bc>)
 8120822:	f240 3227 	movw	r2, #807	@ 0x327
 8120826:	4906      	ldr	r1, [pc, #24]	@ (8120840 <tcp_write+0x6c0>)
 8120828:	4806      	ldr	r0, [pc, #24]	@ (8120844 <tcp_write+0x6c4>)
 812082a:	f003 f9f7 	bl	8123c1c <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 812082e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8120832:	4618      	mov	r0, r3
 8120834:	375c      	adds	r7, #92	@ 0x5c
 8120836:	46bd      	mov	sp, r7
 8120838:	bd90      	pop	{r4, r7, pc}
 812083a:	bf00      	nop
 812083c:	081274e4 	.word	0x081274e4
 8120840:	08127898 	.word	0x08127898
 8120844:	08127578 	.word	0x08127578

08120848 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8120848:	b590      	push	{r4, r7, lr}
 812084a:	b08b      	sub	sp, #44	@ 0x2c
 812084c:	af02      	add	r7, sp, #8
 812084e:	6078      	str	r0, [r7, #4]
 8120850:	460b      	mov	r3, r1
 8120852:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8120854:	2300      	movs	r3, #0
 8120856:	61fb      	str	r3, [r7, #28]
 8120858:	2300      	movs	r3, #0
 812085a:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 812085c:	2300      	movs	r3, #0
 812085e:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8120860:	687b      	ldr	r3, [r7, #4]
 8120862:	2b00      	cmp	r3, #0
 8120864:	d106      	bne.n	8120874 <tcp_split_unsent_seg+0x2c>
 8120866:	4b95      	ldr	r3, [pc, #596]	@ (8120abc <tcp_split_unsent_seg+0x274>)
 8120868:	f240 324b 	movw	r2, #843	@ 0x34b
 812086c:	4994      	ldr	r1, [pc, #592]	@ (8120ac0 <tcp_split_unsent_seg+0x278>)
 812086e:	4895      	ldr	r0, [pc, #596]	@ (8120ac4 <tcp_split_unsent_seg+0x27c>)
 8120870:	f003 f9d4 	bl	8123c1c <iprintf>

  useg = pcb->unsent;
 8120874:	687b      	ldr	r3, [r7, #4]
 8120876:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8120878:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 812087a:	697b      	ldr	r3, [r7, #20]
 812087c:	2b00      	cmp	r3, #0
 812087e:	d102      	bne.n	8120886 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8120880:	f04f 33ff 	mov.w	r3, #4294967295
 8120884:	e116      	b.n	8120ab4 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 8120886:	887b      	ldrh	r3, [r7, #2]
 8120888:	2b00      	cmp	r3, #0
 812088a:	d109      	bne.n	81208a0 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 812088c:	4b8b      	ldr	r3, [pc, #556]	@ (8120abc <tcp_split_unsent_seg+0x274>)
 812088e:	f240 3253 	movw	r2, #851	@ 0x353
 8120892:	498d      	ldr	r1, [pc, #564]	@ (8120ac8 <tcp_split_unsent_seg+0x280>)
 8120894:	488b      	ldr	r0, [pc, #556]	@ (8120ac4 <tcp_split_unsent_seg+0x27c>)
 8120896:	f003 f9c1 	bl	8123c1c <iprintf>
    return ERR_VAL;
 812089a:	f06f 0305 	mvn.w	r3, #5
 812089e:	e109      	b.n	8120ab4 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 81208a0:	697b      	ldr	r3, [r7, #20]
 81208a2:	891b      	ldrh	r3, [r3, #8]
 81208a4:	887a      	ldrh	r2, [r7, #2]
 81208a6:	429a      	cmp	r2, r3
 81208a8:	d301      	bcc.n	81208ae <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 81208aa:	2300      	movs	r3, #0
 81208ac:	e102      	b.n	8120ab4 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 81208ae:	687b      	ldr	r3, [r7, #4]
 81208b0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 81208b2:	887a      	ldrh	r2, [r7, #2]
 81208b4:	429a      	cmp	r2, r3
 81208b6:	d906      	bls.n	81208c6 <tcp_split_unsent_seg+0x7e>
 81208b8:	4b80      	ldr	r3, [pc, #512]	@ (8120abc <tcp_split_unsent_seg+0x274>)
 81208ba:	f240 325b 	movw	r2, #859	@ 0x35b
 81208be:	4983      	ldr	r1, [pc, #524]	@ (8120acc <tcp_split_unsent_seg+0x284>)
 81208c0:	4880      	ldr	r0, [pc, #512]	@ (8120ac4 <tcp_split_unsent_seg+0x27c>)
 81208c2:	f003 f9ab 	bl	8123c1c <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 81208c6:	697b      	ldr	r3, [r7, #20]
 81208c8:	891b      	ldrh	r3, [r3, #8]
 81208ca:	2b00      	cmp	r3, #0
 81208cc:	d106      	bne.n	81208dc <tcp_split_unsent_seg+0x94>
 81208ce:	4b7b      	ldr	r3, [pc, #492]	@ (8120abc <tcp_split_unsent_seg+0x274>)
 81208d0:	f44f 7257 	mov.w	r2, #860	@ 0x35c
 81208d4:	497e      	ldr	r1, [pc, #504]	@ (8120ad0 <tcp_split_unsent_seg+0x288>)
 81208d6:	487b      	ldr	r0, [pc, #492]	@ (8120ac4 <tcp_split_unsent_seg+0x27c>)
 81208d8:	f003 f9a0 	bl	8123c1c <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 81208dc:	697b      	ldr	r3, [r7, #20]
 81208de:	7a9b      	ldrb	r3, [r3, #10]
 81208e0:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 81208e2:	7bfb      	ldrb	r3, [r7, #15]
 81208e4:	009b      	lsls	r3, r3, #2
 81208e6:	b2db      	uxtb	r3, r3
 81208e8:	f003 0304 	and.w	r3, r3, #4
 81208ec:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 81208ee:	697b      	ldr	r3, [r7, #20]
 81208f0:	891a      	ldrh	r2, [r3, #8]
 81208f2:	887b      	ldrh	r3, [r7, #2]
 81208f4:	1ad3      	subs	r3, r2, r3
 81208f6:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 81208f8:	7bbb      	ldrb	r3, [r7, #14]
 81208fa:	b29a      	uxth	r2, r3
 81208fc:	89bb      	ldrh	r3, [r7, #12]
 81208fe:	4413      	add	r3, r2
 8120900:	b29b      	uxth	r3, r3
 8120902:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8120906:	4619      	mov	r1, r3
 8120908:	2036      	movs	r0, #54	@ 0x36
 812090a:	f7fa fb05 	bl	811af18 <pbuf_alloc>
 812090e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8120910:	693b      	ldr	r3, [r7, #16]
 8120912:	2b00      	cmp	r3, #0
 8120914:	f000 80b7 	beq.w	8120a86 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8120918:	697b      	ldr	r3, [r7, #20]
 812091a:	685b      	ldr	r3, [r3, #4]
 812091c:	891a      	ldrh	r2, [r3, #8]
 812091e:	697b      	ldr	r3, [r7, #20]
 8120920:	891b      	ldrh	r3, [r3, #8]
 8120922:	1ad3      	subs	r3, r2, r3
 8120924:	b29a      	uxth	r2, r3
 8120926:	887b      	ldrh	r3, [r7, #2]
 8120928:	4413      	add	r3, r2
 812092a:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 812092c:	697b      	ldr	r3, [r7, #20]
 812092e:	6858      	ldr	r0, [r3, #4]
 8120930:	693b      	ldr	r3, [r7, #16]
 8120932:	685a      	ldr	r2, [r3, #4]
 8120934:	7bbb      	ldrb	r3, [r7, #14]
 8120936:	18d1      	adds	r1, r2, r3
 8120938:	897b      	ldrh	r3, [r7, #10]
 812093a:	89ba      	ldrh	r2, [r7, #12]
 812093c:	f7fa ffd4 	bl	811b8e8 <pbuf_copy_partial>
 8120940:	4603      	mov	r3, r0
 8120942:	461a      	mov	r2, r3
 8120944:	89bb      	ldrh	r3, [r7, #12]
 8120946:	4293      	cmp	r3, r2
 8120948:	f040 809f 	bne.w	8120a8a <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 812094c:	697b      	ldr	r3, [r7, #20]
 812094e:	68db      	ldr	r3, [r3, #12]
 8120950:	899b      	ldrh	r3, [r3, #12]
 8120952:	b29b      	uxth	r3, r3
 8120954:	4618      	mov	r0, r3
 8120956:	f7f6 fbb9 	bl	81170cc <lwip_htons>
 812095a:	4603      	mov	r3, r0
 812095c:	b2db      	uxtb	r3, r3
 812095e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8120962:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8120964:	2300      	movs	r3, #0
 8120966:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8120968:	7efb      	ldrb	r3, [r7, #27]
 812096a:	f003 0308 	and.w	r3, r3, #8
 812096e:	2b00      	cmp	r3, #0
 8120970:	d007      	beq.n	8120982 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8120972:	7efb      	ldrb	r3, [r7, #27]
 8120974:	f023 0308 	bic.w	r3, r3, #8
 8120978:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 812097a:	7ebb      	ldrb	r3, [r7, #26]
 812097c:	f043 0308 	orr.w	r3, r3, #8
 8120980:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8120982:	7efb      	ldrb	r3, [r7, #27]
 8120984:	f003 0301 	and.w	r3, r3, #1
 8120988:	2b00      	cmp	r3, #0
 812098a:	d007      	beq.n	812099c <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 812098c:	7efb      	ldrb	r3, [r7, #27]
 812098e:	f023 0301 	bic.w	r3, r3, #1
 8120992:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8120994:	7ebb      	ldrb	r3, [r7, #26]
 8120996:	f043 0301 	orr.w	r3, r3, #1
 812099a:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 812099c:	697b      	ldr	r3, [r7, #20]
 812099e:	68db      	ldr	r3, [r3, #12]
 81209a0:	685b      	ldr	r3, [r3, #4]
 81209a2:	4618      	mov	r0, r3
 81209a4:	f7f6 fba7 	bl	81170f6 <lwip_htonl>
 81209a8:	4602      	mov	r2, r0
 81209aa:	887b      	ldrh	r3, [r7, #2]
 81209ac:	18d1      	adds	r1, r2, r3
 81209ae:	7eba      	ldrb	r2, [r7, #26]
 81209b0:	7bfb      	ldrb	r3, [r7, #15]
 81209b2:	9300      	str	r3, [sp, #0]
 81209b4:	460b      	mov	r3, r1
 81209b6:	6939      	ldr	r1, [r7, #16]
 81209b8:	6878      	ldr	r0, [r7, #4]
 81209ba:	f7ff fa51 	bl	811fe60 <tcp_create_segment>
 81209be:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 81209c0:	69fb      	ldr	r3, [r7, #28]
 81209c2:	2b00      	cmp	r3, #0
 81209c4:	d063      	beq.n	8120a8e <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 81209c6:	697b      	ldr	r3, [r7, #20]
 81209c8:	685b      	ldr	r3, [r3, #4]
 81209ca:	4618      	mov	r0, r3
 81209cc:	f7fa fe14 	bl	811b5f8 <pbuf_clen>
 81209d0:	4603      	mov	r3, r0
 81209d2:	461a      	mov	r2, r3
 81209d4:	687b      	ldr	r3, [r7, #4]
 81209d6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 81209da:	1a9b      	subs	r3, r3, r2
 81209dc:	b29a      	uxth	r2, r3
 81209de:	687b      	ldr	r3, [r7, #4]
 81209e0:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 81209e4:	697b      	ldr	r3, [r7, #20]
 81209e6:	6858      	ldr	r0, [r3, #4]
 81209e8:	697b      	ldr	r3, [r7, #20]
 81209ea:	685b      	ldr	r3, [r3, #4]
 81209ec:	891a      	ldrh	r2, [r3, #8]
 81209ee:	89bb      	ldrh	r3, [r7, #12]
 81209f0:	1ad3      	subs	r3, r2, r3
 81209f2:	b29b      	uxth	r3, r3
 81209f4:	4619      	mov	r1, r3
 81209f6:	f7fa fbed 	bl	811b1d4 <pbuf_realloc>
  useg->len -= remainder;
 81209fa:	697b      	ldr	r3, [r7, #20]
 81209fc:	891a      	ldrh	r2, [r3, #8]
 81209fe:	89bb      	ldrh	r3, [r7, #12]
 8120a00:	1ad3      	subs	r3, r2, r3
 8120a02:	b29a      	uxth	r2, r3
 8120a04:	697b      	ldr	r3, [r7, #20]
 8120a06:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8120a08:	697b      	ldr	r3, [r7, #20]
 8120a0a:	68db      	ldr	r3, [r3, #12]
 8120a0c:	899b      	ldrh	r3, [r3, #12]
 8120a0e:	b29c      	uxth	r4, r3
 8120a10:	7efb      	ldrb	r3, [r7, #27]
 8120a12:	b29b      	uxth	r3, r3
 8120a14:	4618      	mov	r0, r3
 8120a16:	f7f6 fb59 	bl	81170cc <lwip_htons>
 8120a1a:	4603      	mov	r3, r0
 8120a1c:	461a      	mov	r2, r3
 8120a1e:	697b      	ldr	r3, [r7, #20]
 8120a20:	68db      	ldr	r3, [r3, #12]
 8120a22:	4322      	orrs	r2, r4
 8120a24:	b292      	uxth	r2, r2
 8120a26:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8120a28:	697b      	ldr	r3, [r7, #20]
 8120a2a:	685b      	ldr	r3, [r3, #4]
 8120a2c:	4618      	mov	r0, r3
 8120a2e:	f7fa fde3 	bl	811b5f8 <pbuf_clen>
 8120a32:	4603      	mov	r3, r0
 8120a34:	461a      	mov	r2, r3
 8120a36:	687b      	ldr	r3, [r7, #4]
 8120a38:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8120a3c:	4413      	add	r3, r2
 8120a3e:	b29a      	uxth	r2, r3
 8120a40:	687b      	ldr	r3, [r7, #4]
 8120a42:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8120a46:	69fb      	ldr	r3, [r7, #28]
 8120a48:	685b      	ldr	r3, [r3, #4]
 8120a4a:	4618      	mov	r0, r3
 8120a4c:	f7fa fdd4 	bl	811b5f8 <pbuf_clen>
 8120a50:	4603      	mov	r3, r0
 8120a52:	461a      	mov	r2, r3
 8120a54:	687b      	ldr	r3, [r7, #4]
 8120a56:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8120a5a:	4413      	add	r3, r2
 8120a5c:	b29a      	uxth	r2, r3
 8120a5e:	687b      	ldr	r3, [r7, #4]
 8120a60:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8120a64:	697b      	ldr	r3, [r7, #20]
 8120a66:	681a      	ldr	r2, [r3, #0]
 8120a68:	69fb      	ldr	r3, [r7, #28]
 8120a6a:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8120a6c:	697b      	ldr	r3, [r7, #20]
 8120a6e:	69fa      	ldr	r2, [r7, #28]
 8120a70:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8120a72:	69fb      	ldr	r3, [r7, #28]
 8120a74:	681b      	ldr	r3, [r3, #0]
 8120a76:	2b00      	cmp	r3, #0
 8120a78:	d103      	bne.n	8120a82 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8120a7a:	687b      	ldr	r3, [r7, #4]
 8120a7c:	2200      	movs	r2, #0
 8120a7e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8120a82:	2300      	movs	r3, #0
 8120a84:	e016      	b.n	8120ab4 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8120a86:	bf00      	nop
 8120a88:	e002      	b.n	8120a90 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8120a8a:	bf00      	nop
 8120a8c:	e000      	b.n	8120a90 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8120a8e:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8120a90:	69fb      	ldr	r3, [r7, #28]
 8120a92:	2b00      	cmp	r3, #0
 8120a94:	d006      	beq.n	8120aa4 <tcp_split_unsent_seg+0x25c>
 8120a96:	4b09      	ldr	r3, [pc, #36]	@ (8120abc <tcp_split_unsent_seg+0x274>)
 8120a98:	f44f 7276 	mov.w	r2, #984	@ 0x3d8
 8120a9c:	490d      	ldr	r1, [pc, #52]	@ (8120ad4 <tcp_split_unsent_seg+0x28c>)
 8120a9e:	4809      	ldr	r0, [pc, #36]	@ (8120ac4 <tcp_split_unsent_seg+0x27c>)
 8120aa0:	f003 f8bc 	bl	8123c1c <iprintf>
  if (p != NULL) {
 8120aa4:	693b      	ldr	r3, [r7, #16]
 8120aa6:	2b00      	cmp	r3, #0
 8120aa8:	d002      	beq.n	8120ab0 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8120aaa:	6938      	ldr	r0, [r7, #16]
 8120aac:	f7fa fd16 	bl	811b4dc <pbuf_free>
  }

  return ERR_MEM;
 8120ab0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8120ab4:	4618      	mov	r0, r3
 8120ab6:	3724      	adds	r7, #36	@ 0x24
 8120ab8:	46bd      	mov	sp, r7
 8120aba:	bd90      	pop	{r4, r7, pc}
 8120abc:	081274e4 	.word	0x081274e4
 8120ac0:	081278b8 	.word	0x081278b8
 8120ac4:	08127578 	.word	0x08127578
 8120ac8:	081278dc 	.word	0x081278dc
 8120acc:	08127900 	.word	0x08127900
 8120ad0:	08127910 	.word	0x08127910
 8120ad4:	08127920 	.word	0x08127920

08120ad8 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8120ad8:	b590      	push	{r4, r7, lr}
 8120ada:	b085      	sub	sp, #20
 8120adc:	af00      	add	r7, sp, #0
 8120ade:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8120ae0:	687b      	ldr	r3, [r7, #4]
 8120ae2:	2b00      	cmp	r3, #0
 8120ae4:	d106      	bne.n	8120af4 <tcp_send_fin+0x1c>
 8120ae6:	4b21      	ldr	r3, [pc, #132]	@ (8120b6c <tcp_send_fin+0x94>)
 8120ae8:	f240 32eb 	movw	r2, #1003	@ 0x3eb
 8120aec:	4920      	ldr	r1, [pc, #128]	@ (8120b70 <tcp_send_fin+0x98>)
 8120aee:	4821      	ldr	r0, [pc, #132]	@ (8120b74 <tcp_send_fin+0x9c>)
 8120af0:	f003 f894 	bl	8123c1c <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8120af4:	687b      	ldr	r3, [r7, #4]
 8120af6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8120af8:	2b00      	cmp	r3, #0
 8120afa:	d02e      	beq.n	8120b5a <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8120afc:	687b      	ldr	r3, [r7, #4]
 8120afe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8120b00:	60fb      	str	r3, [r7, #12]
 8120b02:	e002      	b.n	8120b0a <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8120b04:	68fb      	ldr	r3, [r7, #12]
 8120b06:	681b      	ldr	r3, [r3, #0]
 8120b08:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8120b0a:	68fb      	ldr	r3, [r7, #12]
 8120b0c:	681b      	ldr	r3, [r3, #0]
 8120b0e:	2b00      	cmp	r3, #0
 8120b10:	d1f8      	bne.n	8120b04 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8120b12:	68fb      	ldr	r3, [r7, #12]
 8120b14:	68db      	ldr	r3, [r3, #12]
 8120b16:	899b      	ldrh	r3, [r3, #12]
 8120b18:	b29b      	uxth	r3, r3
 8120b1a:	4618      	mov	r0, r3
 8120b1c:	f7f6 fad6 	bl	81170cc <lwip_htons>
 8120b20:	4603      	mov	r3, r0
 8120b22:	b2db      	uxtb	r3, r3
 8120b24:	f003 0307 	and.w	r3, r3, #7
 8120b28:	2b00      	cmp	r3, #0
 8120b2a:	d116      	bne.n	8120b5a <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8120b2c:	68fb      	ldr	r3, [r7, #12]
 8120b2e:	68db      	ldr	r3, [r3, #12]
 8120b30:	899b      	ldrh	r3, [r3, #12]
 8120b32:	b29c      	uxth	r4, r3
 8120b34:	2001      	movs	r0, #1
 8120b36:	f7f6 fac9 	bl	81170cc <lwip_htons>
 8120b3a:	4603      	mov	r3, r0
 8120b3c:	461a      	mov	r2, r3
 8120b3e:	68fb      	ldr	r3, [r7, #12]
 8120b40:	68db      	ldr	r3, [r3, #12]
 8120b42:	4322      	orrs	r2, r4
 8120b44:	b292      	uxth	r2, r2
 8120b46:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8120b48:	687b      	ldr	r3, [r7, #4]
 8120b4a:	8b5b      	ldrh	r3, [r3, #26]
 8120b4c:	f043 0320 	orr.w	r3, r3, #32
 8120b50:	b29a      	uxth	r2, r3
 8120b52:	687b      	ldr	r3, [r7, #4]
 8120b54:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8120b56:	2300      	movs	r3, #0
 8120b58:	e004      	b.n	8120b64 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8120b5a:	2101      	movs	r1, #1
 8120b5c:	6878      	ldr	r0, [r7, #4]
 8120b5e:	f000 f80b 	bl	8120b78 <tcp_enqueue_flags>
 8120b62:	4603      	mov	r3, r0
}
 8120b64:	4618      	mov	r0, r3
 8120b66:	3714      	adds	r7, #20
 8120b68:	46bd      	mov	sp, r7
 8120b6a:	bd90      	pop	{r4, r7, pc}
 8120b6c:	081274e4 	.word	0x081274e4
 8120b70:	0812792c 	.word	0x0812792c
 8120b74:	08127578 	.word	0x08127578

08120b78 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8120b78:	b580      	push	{r7, lr}
 8120b7a:	b08a      	sub	sp, #40	@ 0x28
 8120b7c:	af02      	add	r7, sp, #8
 8120b7e:	6078      	str	r0, [r7, #4]
 8120b80:	460b      	mov	r3, r1
 8120b82:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8120b84:	2300      	movs	r3, #0
 8120b86:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8120b88:	2300      	movs	r3, #0
 8120b8a:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8120b8c:	78fb      	ldrb	r3, [r7, #3]
 8120b8e:	f003 0303 	and.w	r3, r3, #3
 8120b92:	2b00      	cmp	r3, #0
 8120b94:	d106      	bne.n	8120ba4 <tcp_enqueue_flags+0x2c>
 8120b96:	4b67      	ldr	r3, [pc, #412]	@ (8120d34 <tcp_enqueue_flags+0x1bc>)
 8120b98:	f240 4211 	movw	r2, #1041	@ 0x411
 8120b9c:	4966      	ldr	r1, [pc, #408]	@ (8120d38 <tcp_enqueue_flags+0x1c0>)
 8120b9e:	4867      	ldr	r0, [pc, #412]	@ (8120d3c <tcp_enqueue_flags+0x1c4>)
 8120ba0:	f003 f83c 	bl	8123c1c <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8120ba4:	687b      	ldr	r3, [r7, #4]
 8120ba6:	2b00      	cmp	r3, #0
 8120ba8:	d106      	bne.n	8120bb8 <tcp_enqueue_flags+0x40>
 8120baa:	4b62      	ldr	r3, [pc, #392]	@ (8120d34 <tcp_enqueue_flags+0x1bc>)
 8120bac:	f240 4213 	movw	r2, #1043	@ 0x413
 8120bb0:	4963      	ldr	r1, [pc, #396]	@ (8120d40 <tcp_enqueue_flags+0x1c8>)
 8120bb2:	4862      	ldr	r0, [pc, #392]	@ (8120d3c <tcp_enqueue_flags+0x1c4>)
 8120bb4:	f003 f832 	bl	8123c1c <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8120bb8:	78fb      	ldrb	r3, [r7, #3]
 8120bba:	f003 0302 	and.w	r3, r3, #2
 8120bbe:	2b00      	cmp	r3, #0
 8120bc0:	d001      	beq.n	8120bc6 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8120bc2:	2301      	movs	r3, #1
 8120bc4:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8120bc6:	7ffb      	ldrb	r3, [r7, #31]
 8120bc8:	009b      	lsls	r3, r3, #2
 8120bca:	b2db      	uxtb	r3, r3
 8120bcc:	f003 0304 	and.w	r3, r3, #4
 8120bd0:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8120bd2:	7dfb      	ldrb	r3, [r7, #23]
 8120bd4:	b29b      	uxth	r3, r3
 8120bd6:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8120bda:	4619      	mov	r1, r3
 8120bdc:	2036      	movs	r0, #54	@ 0x36
 8120bde:	f7fa f99b 	bl	811af18 <pbuf_alloc>
 8120be2:	6138      	str	r0, [r7, #16]
 8120be4:	693b      	ldr	r3, [r7, #16]
 8120be6:	2b00      	cmp	r3, #0
 8120be8:	d109      	bne.n	8120bfe <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8120bea:	687b      	ldr	r3, [r7, #4]
 8120bec:	8b5b      	ldrh	r3, [r3, #26]
 8120bee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8120bf2:	b29a      	uxth	r2, r3
 8120bf4:	687b      	ldr	r3, [r7, #4]
 8120bf6:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8120bf8:	f04f 33ff 	mov.w	r3, #4294967295
 8120bfc:	e095      	b.n	8120d2a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8120bfe:	693b      	ldr	r3, [r7, #16]
 8120c00:	895a      	ldrh	r2, [r3, #10]
 8120c02:	7dfb      	ldrb	r3, [r7, #23]
 8120c04:	b29b      	uxth	r3, r3
 8120c06:	429a      	cmp	r2, r3
 8120c08:	d206      	bcs.n	8120c18 <tcp_enqueue_flags+0xa0>
 8120c0a:	4b4a      	ldr	r3, [pc, #296]	@ (8120d34 <tcp_enqueue_flags+0x1bc>)
 8120c0c:	f240 4239 	movw	r2, #1081	@ 0x439
 8120c10:	494c      	ldr	r1, [pc, #304]	@ (8120d44 <tcp_enqueue_flags+0x1cc>)
 8120c12:	484a      	ldr	r0, [pc, #296]	@ (8120d3c <tcp_enqueue_flags+0x1c4>)
 8120c14:	f003 f802 	bl	8123c1c <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8120c18:	687b      	ldr	r3, [r7, #4]
 8120c1a:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 8120c1c:	78fa      	ldrb	r2, [r7, #3]
 8120c1e:	7ffb      	ldrb	r3, [r7, #31]
 8120c20:	9300      	str	r3, [sp, #0]
 8120c22:	460b      	mov	r3, r1
 8120c24:	6939      	ldr	r1, [r7, #16]
 8120c26:	6878      	ldr	r0, [r7, #4]
 8120c28:	f7ff f91a 	bl	811fe60 <tcp_create_segment>
 8120c2c:	60f8      	str	r0, [r7, #12]
 8120c2e:	68fb      	ldr	r3, [r7, #12]
 8120c30:	2b00      	cmp	r3, #0
 8120c32:	d109      	bne.n	8120c48 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8120c34:	687b      	ldr	r3, [r7, #4]
 8120c36:	8b5b      	ldrh	r3, [r3, #26]
 8120c38:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8120c3c:	b29a      	uxth	r2, r3
 8120c3e:	687b      	ldr	r3, [r7, #4]
 8120c40:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8120c42:	f04f 33ff 	mov.w	r3, #4294967295
 8120c46:	e070      	b.n	8120d2a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8120c48:	68fb      	ldr	r3, [r7, #12]
 8120c4a:	68db      	ldr	r3, [r3, #12]
 8120c4c:	f003 0303 	and.w	r3, r3, #3
 8120c50:	2b00      	cmp	r3, #0
 8120c52:	d006      	beq.n	8120c62 <tcp_enqueue_flags+0xea>
 8120c54:	4b37      	ldr	r3, [pc, #220]	@ (8120d34 <tcp_enqueue_flags+0x1bc>)
 8120c56:	f240 4242 	movw	r2, #1090	@ 0x442
 8120c5a:	493b      	ldr	r1, [pc, #236]	@ (8120d48 <tcp_enqueue_flags+0x1d0>)
 8120c5c:	4837      	ldr	r0, [pc, #220]	@ (8120d3c <tcp_enqueue_flags+0x1c4>)
 8120c5e:	f002 ffdd 	bl	8123c1c <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8120c62:	68fb      	ldr	r3, [r7, #12]
 8120c64:	891b      	ldrh	r3, [r3, #8]
 8120c66:	2b00      	cmp	r3, #0
 8120c68:	d006      	beq.n	8120c78 <tcp_enqueue_flags+0x100>
 8120c6a:	4b32      	ldr	r3, [pc, #200]	@ (8120d34 <tcp_enqueue_flags+0x1bc>)
 8120c6c:	f240 4243 	movw	r2, #1091	@ 0x443
 8120c70:	4936      	ldr	r1, [pc, #216]	@ (8120d4c <tcp_enqueue_flags+0x1d4>)
 8120c72:	4832      	ldr	r0, [pc, #200]	@ (8120d3c <tcp_enqueue_flags+0x1c4>)
 8120c74:	f002 ffd2 	bl	8123c1c <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8120c78:	687b      	ldr	r3, [r7, #4]
 8120c7a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8120c7c:	2b00      	cmp	r3, #0
 8120c7e:	d103      	bne.n	8120c88 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8120c80:	687b      	ldr	r3, [r7, #4]
 8120c82:	68fa      	ldr	r2, [r7, #12]
 8120c84:	66da      	str	r2, [r3, #108]	@ 0x6c
 8120c86:	e00d      	b.n	8120ca4 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8120c88:	687b      	ldr	r3, [r7, #4]
 8120c8a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8120c8c:	61bb      	str	r3, [r7, #24]
 8120c8e:	e002      	b.n	8120c96 <tcp_enqueue_flags+0x11e>
 8120c90:	69bb      	ldr	r3, [r7, #24]
 8120c92:	681b      	ldr	r3, [r3, #0]
 8120c94:	61bb      	str	r3, [r7, #24]
 8120c96:	69bb      	ldr	r3, [r7, #24]
 8120c98:	681b      	ldr	r3, [r3, #0]
 8120c9a:	2b00      	cmp	r3, #0
 8120c9c:	d1f8      	bne.n	8120c90 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8120c9e:	69bb      	ldr	r3, [r7, #24]
 8120ca0:	68fa      	ldr	r2, [r7, #12]
 8120ca2:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8120ca4:	687b      	ldr	r3, [r7, #4]
 8120ca6:	2200      	movs	r2, #0
 8120ca8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8120cac:	78fb      	ldrb	r3, [r7, #3]
 8120cae:	f003 0302 	and.w	r3, r3, #2
 8120cb2:	2b00      	cmp	r3, #0
 8120cb4:	d104      	bne.n	8120cc0 <tcp_enqueue_flags+0x148>
 8120cb6:	78fb      	ldrb	r3, [r7, #3]
 8120cb8:	f003 0301 	and.w	r3, r3, #1
 8120cbc:	2b00      	cmp	r3, #0
 8120cbe:	d004      	beq.n	8120cca <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8120cc0:	687b      	ldr	r3, [r7, #4]
 8120cc2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8120cc4:	1c5a      	adds	r2, r3, #1
 8120cc6:	687b      	ldr	r3, [r7, #4]
 8120cc8:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8120cca:	78fb      	ldrb	r3, [r7, #3]
 8120ccc:	f003 0301 	and.w	r3, r3, #1
 8120cd0:	2b00      	cmp	r3, #0
 8120cd2:	d006      	beq.n	8120ce2 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8120cd4:	687b      	ldr	r3, [r7, #4]
 8120cd6:	8b5b      	ldrh	r3, [r3, #26]
 8120cd8:	f043 0320 	orr.w	r3, r3, #32
 8120cdc:	b29a      	uxth	r2, r3
 8120cde:	687b      	ldr	r3, [r7, #4]
 8120ce0:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8120ce2:	68fb      	ldr	r3, [r7, #12]
 8120ce4:	685b      	ldr	r3, [r3, #4]
 8120ce6:	4618      	mov	r0, r3
 8120ce8:	f7fa fc86 	bl	811b5f8 <pbuf_clen>
 8120cec:	4603      	mov	r3, r0
 8120cee:	461a      	mov	r2, r3
 8120cf0:	687b      	ldr	r3, [r7, #4]
 8120cf2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8120cf6:	4413      	add	r3, r2
 8120cf8:	b29a      	uxth	r2, r3
 8120cfa:	687b      	ldr	r3, [r7, #4]
 8120cfc:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8120d00:	687b      	ldr	r3, [r7, #4]
 8120d02:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8120d06:	2b00      	cmp	r3, #0
 8120d08:	d00e      	beq.n	8120d28 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8120d0a:	687b      	ldr	r3, [r7, #4]
 8120d0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8120d0e:	2b00      	cmp	r3, #0
 8120d10:	d10a      	bne.n	8120d28 <tcp_enqueue_flags+0x1b0>
 8120d12:	687b      	ldr	r3, [r7, #4]
 8120d14:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8120d16:	2b00      	cmp	r3, #0
 8120d18:	d106      	bne.n	8120d28 <tcp_enqueue_flags+0x1b0>
 8120d1a:	4b06      	ldr	r3, [pc, #24]	@ (8120d34 <tcp_enqueue_flags+0x1bc>)
 8120d1c:	f240 4265 	movw	r2, #1125	@ 0x465
 8120d20:	490b      	ldr	r1, [pc, #44]	@ (8120d50 <tcp_enqueue_flags+0x1d8>)
 8120d22:	4806      	ldr	r0, [pc, #24]	@ (8120d3c <tcp_enqueue_flags+0x1c4>)
 8120d24:	f002 ff7a 	bl	8123c1c <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8120d28:	2300      	movs	r3, #0
}
 8120d2a:	4618      	mov	r0, r3
 8120d2c:	3720      	adds	r7, #32
 8120d2e:	46bd      	mov	sp, r7
 8120d30:	bd80      	pop	{r7, pc}
 8120d32:	bf00      	nop
 8120d34:	081274e4 	.word	0x081274e4
 8120d38:	08127948 	.word	0x08127948
 8120d3c:	08127578 	.word	0x08127578
 8120d40:	081279a0 	.word	0x081279a0
 8120d44:	081279c0 	.word	0x081279c0
 8120d48:	081279fc 	.word	0x081279fc
 8120d4c:	08127a14 	.word	0x08127a14
 8120d50:	08127a40 	.word	0x08127a40

08120d54 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8120d54:	b5b0      	push	{r4, r5, r7, lr}
 8120d56:	b08a      	sub	sp, #40	@ 0x28
 8120d58:	af00      	add	r7, sp, #0
 8120d5a:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8120d5c:	687b      	ldr	r3, [r7, #4]
 8120d5e:	2b00      	cmp	r3, #0
 8120d60:	d106      	bne.n	8120d70 <tcp_output+0x1c>
 8120d62:	4b8a      	ldr	r3, [pc, #552]	@ (8120f8c <tcp_output+0x238>)
 8120d64:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 8120d68:	4989      	ldr	r1, [pc, #548]	@ (8120f90 <tcp_output+0x23c>)
 8120d6a:	488a      	ldr	r0, [pc, #552]	@ (8120f94 <tcp_output+0x240>)
 8120d6c:	f002 ff56 	bl	8123c1c <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8120d70:	687b      	ldr	r3, [r7, #4]
 8120d72:	7d1b      	ldrb	r3, [r3, #20]
 8120d74:	2b01      	cmp	r3, #1
 8120d76:	d106      	bne.n	8120d86 <tcp_output+0x32>
 8120d78:	4b84      	ldr	r3, [pc, #528]	@ (8120f8c <tcp_output+0x238>)
 8120d7a:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 8120d7e:	4986      	ldr	r1, [pc, #536]	@ (8120f98 <tcp_output+0x244>)
 8120d80:	4884      	ldr	r0, [pc, #528]	@ (8120f94 <tcp_output+0x240>)
 8120d82:	f002 ff4b 	bl	8123c1c <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8120d86:	4b85      	ldr	r3, [pc, #532]	@ (8120f9c <tcp_output+0x248>)
 8120d88:	681b      	ldr	r3, [r3, #0]
 8120d8a:	687a      	ldr	r2, [r7, #4]
 8120d8c:	429a      	cmp	r2, r3
 8120d8e:	d101      	bne.n	8120d94 <tcp_output+0x40>
    return ERR_OK;
 8120d90:	2300      	movs	r3, #0
 8120d92:	e1ce      	b.n	8121132 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8120d94:	687b      	ldr	r3, [r7, #4]
 8120d96:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8120d9a:	687b      	ldr	r3, [r7, #4]
 8120d9c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8120da0:	4293      	cmp	r3, r2
 8120da2:	bf28      	it	cs
 8120da4:	4613      	movcs	r3, r2
 8120da6:	b29b      	uxth	r3, r3
 8120da8:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8120daa:	687b      	ldr	r3, [r7, #4]
 8120dac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8120dae:	627b      	str	r3, [r7, #36]	@ 0x24

  if (seg == NULL) {
 8120db0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8120db2:	2b00      	cmp	r3, #0
 8120db4:	d10b      	bne.n	8120dce <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8120db6:	687b      	ldr	r3, [r7, #4]
 8120db8:	8b5b      	ldrh	r3, [r3, #26]
 8120dba:	f003 0302 	and.w	r3, r3, #2
 8120dbe:	2b00      	cmp	r3, #0
 8120dc0:	f000 81aa 	beq.w	8121118 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8120dc4:	6878      	ldr	r0, [r7, #4]
 8120dc6:	f000 fdcb 	bl	8121960 <tcp_send_empty_ack>
 8120dca:	4603      	mov	r3, r0
 8120dcc:	e1b1      	b.n	8121132 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8120dce:	6879      	ldr	r1, [r7, #4]
 8120dd0:	687b      	ldr	r3, [r7, #4]
 8120dd2:	3304      	adds	r3, #4
 8120dd4:	461a      	mov	r2, r3
 8120dd6:	6878      	ldr	r0, [r7, #4]
 8120dd8:	f7ff f826 	bl	811fe28 <tcp_route>
 8120ddc:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8120dde:	697b      	ldr	r3, [r7, #20]
 8120de0:	2b00      	cmp	r3, #0
 8120de2:	d102      	bne.n	8120dea <tcp_output+0x96>
    return ERR_RTE;
 8120de4:	f06f 0303 	mvn.w	r3, #3
 8120de8:	e1a3      	b.n	8121132 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8120dea:	687b      	ldr	r3, [r7, #4]
 8120dec:	2b00      	cmp	r3, #0
 8120dee:	d003      	beq.n	8120df8 <tcp_output+0xa4>
 8120df0:	687b      	ldr	r3, [r7, #4]
 8120df2:	681b      	ldr	r3, [r3, #0]
 8120df4:	2b00      	cmp	r3, #0
 8120df6:	d111      	bne.n	8120e1c <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8120df8:	697b      	ldr	r3, [r7, #20]
 8120dfa:	2b00      	cmp	r3, #0
 8120dfc:	d002      	beq.n	8120e04 <tcp_output+0xb0>
 8120dfe:	697b      	ldr	r3, [r7, #20]
 8120e00:	3304      	adds	r3, #4
 8120e02:	e000      	b.n	8120e06 <tcp_output+0xb2>
 8120e04:	2300      	movs	r3, #0
 8120e06:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8120e08:	693b      	ldr	r3, [r7, #16]
 8120e0a:	2b00      	cmp	r3, #0
 8120e0c:	d102      	bne.n	8120e14 <tcp_output+0xc0>
      return ERR_RTE;
 8120e0e:	f06f 0303 	mvn.w	r3, #3
 8120e12:	e18e      	b.n	8121132 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8120e14:	693b      	ldr	r3, [r7, #16]
 8120e16:	681a      	ldr	r2, [r3, #0]
 8120e18:	687b      	ldr	r3, [r7, #4]
 8120e1a:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8120e1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8120e1e:	68db      	ldr	r3, [r3, #12]
 8120e20:	685b      	ldr	r3, [r3, #4]
 8120e22:	4618      	mov	r0, r3
 8120e24:	f7f6 f967 	bl	81170f6 <lwip_htonl>
 8120e28:	4602      	mov	r2, r0
 8120e2a:	687b      	ldr	r3, [r7, #4]
 8120e2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8120e2e:	1ad3      	subs	r3, r2, r3
 8120e30:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8120e32:	8912      	ldrh	r2, [r2, #8]
 8120e34:	4413      	add	r3, r2
 8120e36:	69ba      	ldr	r2, [r7, #24]
 8120e38:	429a      	cmp	r2, r3
 8120e3a:	d227      	bcs.n	8120e8c <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8120e3c:	687b      	ldr	r3, [r7, #4]
 8120e3e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8120e42:	461a      	mov	r2, r3
 8120e44:	69bb      	ldr	r3, [r7, #24]
 8120e46:	4293      	cmp	r3, r2
 8120e48:	d114      	bne.n	8120e74 <tcp_output+0x120>
 8120e4a:	687b      	ldr	r3, [r7, #4]
 8120e4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8120e4e:	2b00      	cmp	r3, #0
 8120e50:	d110      	bne.n	8120e74 <tcp_output+0x120>
 8120e52:	687b      	ldr	r3, [r7, #4]
 8120e54:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8120e58:	2b00      	cmp	r3, #0
 8120e5a:	d10b      	bne.n	8120e74 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8120e5c:	687b      	ldr	r3, [r7, #4]
 8120e5e:	2200      	movs	r2, #0
 8120e60:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
      pcb->persist_backoff = 1;
 8120e64:	687b      	ldr	r3, [r7, #4]
 8120e66:	2201      	movs	r2, #1
 8120e68:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1
      pcb->persist_probe = 0;
 8120e6c:	687b      	ldr	r3, [r7, #4]
 8120e6e:	2200      	movs	r2, #0
 8120e70:	f883 20a2 	strb.w	r2, [r3, #162]	@ 0xa2
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8120e74:	687b      	ldr	r3, [r7, #4]
 8120e76:	8b5b      	ldrh	r3, [r3, #26]
 8120e78:	f003 0302 	and.w	r3, r3, #2
 8120e7c:	2b00      	cmp	r3, #0
 8120e7e:	f000 814d 	beq.w	812111c <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 8120e82:	6878      	ldr	r0, [r7, #4]
 8120e84:	f000 fd6c 	bl	8121960 <tcp_send_empty_ack>
 8120e88:	4603      	mov	r3, r0
 8120e8a:	e152      	b.n	8121132 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8120e8c:	687b      	ldr	r3, [r7, #4]
 8120e8e:	2200      	movs	r2, #0
 8120e90:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8120e94:	687b      	ldr	r3, [r7, #4]
 8120e96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8120e98:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8120e9a:	6a3b      	ldr	r3, [r7, #32]
 8120e9c:	2b00      	cmp	r3, #0
 8120e9e:	f000 811c 	beq.w	81210da <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 8120ea2:	e002      	b.n	8120eaa <tcp_output+0x156>
 8120ea4:	6a3b      	ldr	r3, [r7, #32]
 8120ea6:	681b      	ldr	r3, [r3, #0]
 8120ea8:	623b      	str	r3, [r7, #32]
 8120eaa:	6a3b      	ldr	r3, [r7, #32]
 8120eac:	681b      	ldr	r3, [r3, #0]
 8120eae:	2b00      	cmp	r3, #0
 8120eb0:	d1f8      	bne.n	8120ea4 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8120eb2:	e112      	b.n	81210da <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8120eb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8120eb6:	68db      	ldr	r3, [r3, #12]
 8120eb8:	899b      	ldrh	r3, [r3, #12]
 8120eba:	b29b      	uxth	r3, r3
 8120ebc:	4618      	mov	r0, r3
 8120ebe:	f7f6 f905 	bl	81170cc <lwip_htons>
 8120ec2:	4603      	mov	r3, r0
 8120ec4:	b2db      	uxtb	r3, r3
 8120ec6:	f003 0304 	and.w	r3, r3, #4
 8120eca:	2b00      	cmp	r3, #0
 8120ecc:	d006      	beq.n	8120edc <tcp_output+0x188>
 8120ece:	4b2f      	ldr	r3, [pc, #188]	@ (8120f8c <tcp_output+0x238>)
 8120ed0:	f240 5236 	movw	r2, #1334	@ 0x536
 8120ed4:	4932      	ldr	r1, [pc, #200]	@ (8120fa0 <tcp_output+0x24c>)
 8120ed6:	482f      	ldr	r0, [pc, #188]	@ (8120f94 <tcp_output+0x240>)
 8120ed8:	f002 fea0 	bl	8123c1c <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8120edc:	687b      	ldr	r3, [r7, #4]
 8120ede:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8120ee0:	2b00      	cmp	r3, #0
 8120ee2:	d01f      	beq.n	8120f24 <tcp_output+0x1d0>
 8120ee4:	687b      	ldr	r3, [r7, #4]
 8120ee6:	8b5b      	ldrh	r3, [r3, #26]
 8120ee8:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 8120eec:	2b00      	cmp	r3, #0
 8120eee:	d119      	bne.n	8120f24 <tcp_output+0x1d0>
 8120ef0:	687b      	ldr	r3, [r7, #4]
 8120ef2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8120ef4:	2b00      	cmp	r3, #0
 8120ef6:	d00b      	beq.n	8120f10 <tcp_output+0x1bc>
 8120ef8:	687b      	ldr	r3, [r7, #4]
 8120efa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8120efc:	681b      	ldr	r3, [r3, #0]
 8120efe:	2b00      	cmp	r3, #0
 8120f00:	d110      	bne.n	8120f24 <tcp_output+0x1d0>
 8120f02:	687b      	ldr	r3, [r7, #4]
 8120f04:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8120f06:	891a      	ldrh	r2, [r3, #8]
 8120f08:	687b      	ldr	r3, [r7, #4]
 8120f0a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8120f0c:	429a      	cmp	r2, r3
 8120f0e:	d209      	bcs.n	8120f24 <tcp_output+0x1d0>
 8120f10:	687b      	ldr	r3, [r7, #4]
 8120f12:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8120f16:	2b00      	cmp	r3, #0
 8120f18:	d004      	beq.n	8120f24 <tcp_output+0x1d0>
 8120f1a:	687b      	ldr	r3, [r7, #4]
 8120f1c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8120f20:	2b0f      	cmp	r3, #15
 8120f22:	d901      	bls.n	8120f28 <tcp_output+0x1d4>
 8120f24:	2301      	movs	r3, #1
 8120f26:	e000      	b.n	8120f2a <tcp_output+0x1d6>
 8120f28:	2300      	movs	r3, #0
 8120f2a:	2b00      	cmp	r3, #0
 8120f2c:	d106      	bne.n	8120f3c <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8120f2e:	687b      	ldr	r3, [r7, #4]
 8120f30:	8b5b      	ldrh	r3, [r3, #26]
 8120f32:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8120f36:	2b00      	cmp	r3, #0
 8120f38:	f000 80e4 	beq.w	8121104 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8120f3c:	687b      	ldr	r3, [r7, #4]
 8120f3e:	7d1b      	ldrb	r3, [r3, #20]
 8120f40:	2b02      	cmp	r3, #2
 8120f42:	d00d      	beq.n	8120f60 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8120f44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8120f46:	68db      	ldr	r3, [r3, #12]
 8120f48:	899b      	ldrh	r3, [r3, #12]
 8120f4a:	b29c      	uxth	r4, r3
 8120f4c:	2010      	movs	r0, #16
 8120f4e:	f7f6 f8bd 	bl	81170cc <lwip_htons>
 8120f52:	4603      	mov	r3, r0
 8120f54:	461a      	mov	r2, r3
 8120f56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8120f58:	68db      	ldr	r3, [r3, #12]
 8120f5a:	4322      	orrs	r2, r4
 8120f5c:	b292      	uxth	r2, r2
 8120f5e:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8120f60:	697a      	ldr	r2, [r7, #20]
 8120f62:	6879      	ldr	r1, [r7, #4]
 8120f64:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8120f66:	f000 f909 	bl	812117c <tcp_output_segment>
 8120f6a:	4603      	mov	r3, r0
 8120f6c:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8120f6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8120f72:	2b00      	cmp	r3, #0
 8120f74:	d016      	beq.n	8120fa4 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8120f76:	687b      	ldr	r3, [r7, #4]
 8120f78:	8b5b      	ldrh	r3, [r3, #26]
 8120f7a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8120f7e:	b29a      	uxth	r2, r3
 8120f80:	687b      	ldr	r3, [r7, #4]
 8120f82:	835a      	strh	r2, [r3, #26]
      return err;
 8120f84:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8120f88:	e0d3      	b.n	8121132 <tcp_output+0x3de>
 8120f8a:	bf00      	nop
 8120f8c:	081274e4 	.word	0x081274e4
 8120f90:	08127a68 	.word	0x08127a68
 8120f94:	08127578 	.word	0x08127578
 8120f98:	08127a80 	.word	0x08127a80
 8120f9c:	1000e4e4 	.word	0x1000e4e4
 8120fa0:	08127aa8 	.word	0x08127aa8
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8120fa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8120fa6:	681a      	ldr	r2, [r3, #0]
 8120fa8:	687b      	ldr	r3, [r7, #4]
 8120faa:	66da      	str	r2, [r3, #108]	@ 0x6c
    if (pcb->state != SYN_SENT) {
 8120fac:	687b      	ldr	r3, [r7, #4]
 8120fae:	7d1b      	ldrb	r3, [r3, #20]
 8120fb0:	2b02      	cmp	r3, #2
 8120fb2:	d006      	beq.n	8120fc2 <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8120fb4:	687b      	ldr	r3, [r7, #4]
 8120fb6:	8b5b      	ldrh	r3, [r3, #26]
 8120fb8:	f023 0303 	bic.w	r3, r3, #3
 8120fbc:	b29a      	uxth	r2, r3
 8120fbe:	687b      	ldr	r3, [r7, #4]
 8120fc0:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8120fc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8120fc4:	68db      	ldr	r3, [r3, #12]
 8120fc6:	685b      	ldr	r3, [r3, #4]
 8120fc8:	4618      	mov	r0, r3
 8120fca:	f7f6 f894 	bl	81170f6 <lwip_htonl>
 8120fce:	4604      	mov	r4, r0
 8120fd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8120fd2:	891b      	ldrh	r3, [r3, #8]
 8120fd4:	461d      	mov	r5, r3
 8120fd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8120fd8:	68db      	ldr	r3, [r3, #12]
 8120fda:	899b      	ldrh	r3, [r3, #12]
 8120fdc:	b29b      	uxth	r3, r3
 8120fde:	4618      	mov	r0, r3
 8120fe0:	f7f6 f874 	bl	81170cc <lwip_htons>
 8120fe4:	4603      	mov	r3, r0
 8120fe6:	b2db      	uxtb	r3, r3
 8120fe8:	f003 0303 	and.w	r3, r3, #3
 8120fec:	2b00      	cmp	r3, #0
 8120fee:	d001      	beq.n	8120ff4 <tcp_output+0x2a0>
 8120ff0:	2301      	movs	r3, #1
 8120ff2:	e000      	b.n	8120ff6 <tcp_output+0x2a2>
 8120ff4:	2300      	movs	r3, #0
 8120ff6:	442b      	add	r3, r5
 8120ff8:	4423      	add	r3, r4
 8120ffa:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8120ffc:	687b      	ldr	r3, [r7, #4]
 8120ffe:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8121000:	68bb      	ldr	r3, [r7, #8]
 8121002:	1ad3      	subs	r3, r2, r3
 8121004:	2b00      	cmp	r3, #0
 8121006:	da02      	bge.n	812100e <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8121008:	687b      	ldr	r3, [r7, #4]
 812100a:	68ba      	ldr	r2, [r7, #8]
 812100c:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 812100e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8121010:	891b      	ldrh	r3, [r3, #8]
 8121012:	461c      	mov	r4, r3
 8121014:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8121016:	68db      	ldr	r3, [r3, #12]
 8121018:	899b      	ldrh	r3, [r3, #12]
 812101a:	b29b      	uxth	r3, r3
 812101c:	4618      	mov	r0, r3
 812101e:	f7f6 f855 	bl	81170cc <lwip_htons>
 8121022:	4603      	mov	r3, r0
 8121024:	b2db      	uxtb	r3, r3
 8121026:	f003 0303 	and.w	r3, r3, #3
 812102a:	2b00      	cmp	r3, #0
 812102c:	d001      	beq.n	8121032 <tcp_output+0x2de>
 812102e:	2301      	movs	r3, #1
 8121030:	e000      	b.n	8121034 <tcp_output+0x2e0>
 8121032:	2300      	movs	r3, #0
 8121034:	4423      	add	r3, r4
 8121036:	2b00      	cmp	r3, #0
 8121038:	d049      	beq.n	81210ce <tcp_output+0x37a>
      seg->next = NULL;
 812103a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 812103c:	2200      	movs	r2, #0
 812103e:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8121040:	687b      	ldr	r3, [r7, #4]
 8121042:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8121044:	2b00      	cmp	r3, #0
 8121046:	d105      	bne.n	8121054 <tcp_output+0x300>
        pcb->unacked = seg;
 8121048:	687b      	ldr	r3, [r7, #4]
 812104a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 812104c:	671a      	str	r2, [r3, #112]	@ 0x70
        useg = seg;
 812104e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8121050:	623b      	str	r3, [r7, #32]
 8121052:	e03f      	b.n	81210d4 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8121054:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8121056:	68db      	ldr	r3, [r3, #12]
 8121058:	685b      	ldr	r3, [r3, #4]
 812105a:	4618      	mov	r0, r3
 812105c:	f7f6 f84b 	bl	81170f6 <lwip_htonl>
 8121060:	4604      	mov	r4, r0
 8121062:	6a3b      	ldr	r3, [r7, #32]
 8121064:	68db      	ldr	r3, [r3, #12]
 8121066:	685b      	ldr	r3, [r3, #4]
 8121068:	4618      	mov	r0, r3
 812106a:	f7f6 f844 	bl	81170f6 <lwip_htonl>
 812106e:	4603      	mov	r3, r0
 8121070:	1ae3      	subs	r3, r4, r3
 8121072:	2b00      	cmp	r3, #0
 8121074:	da24      	bge.n	81210c0 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8121076:	687b      	ldr	r3, [r7, #4]
 8121078:	3370      	adds	r3, #112	@ 0x70
 812107a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 812107c:	e002      	b.n	8121084 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 812107e:	69fb      	ldr	r3, [r7, #28]
 8121080:	681b      	ldr	r3, [r3, #0]
 8121082:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8121084:	69fb      	ldr	r3, [r7, #28]
 8121086:	681b      	ldr	r3, [r3, #0]
 8121088:	2b00      	cmp	r3, #0
 812108a:	d011      	beq.n	81210b0 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 812108c:	69fb      	ldr	r3, [r7, #28]
 812108e:	681b      	ldr	r3, [r3, #0]
 8121090:	68db      	ldr	r3, [r3, #12]
 8121092:	685b      	ldr	r3, [r3, #4]
 8121094:	4618      	mov	r0, r3
 8121096:	f7f6 f82e 	bl	81170f6 <lwip_htonl>
 812109a:	4604      	mov	r4, r0
 812109c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 812109e:	68db      	ldr	r3, [r3, #12]
 81210a0:	685b      	ldr	r3, [r3, #4]
 81210a2:	4618      	mov	r0, r3
 81210a4:	f7f6 f827 	bl	81170f6 <lwip_htonl>
 81210a8:	4603      	mov	r3, r0
 81210aa:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 81210ac:	2b00      	cmp	r3, #0
 81210ae:	dbe6      	blt.n	812107e <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 81210b0:	69fb      	ldr	r3, [r7, #28]
 81210b2:	681a      	ldr	r2, [r3, #0]
 81210b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81210b6:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 81210b8:	69fb      	ldr	r3, [r7, #28]
 81210ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 81210bc:	601a      	str	r2, [r3, #0]
 81210be:	e009      	b.n	81210d4 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 81210c0:	6a3b      	ldr	r3, [r7, #32]
 81210c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 81210c4:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 81210c6:	6a3b      	ldr	r3, [r7, #32]
 81210c8:	681b      	ldr	r3, [r3, #0]
 81210ca:	623b      	str	r3, [r7, #32]
 81210cc:	e002      	b.n	81210d4 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 81210ce:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 81210d0:	f7fb ff85 	bl	811cfde <tcp_seg_free>
    }
    seg = pcb->unsent;
 81210d4:	687b      	ldr	r3, [r7, #4]
 81210d6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 81210d8:	627b      	str	r3, [r7, #36]	@ 0x24
  while (seg != NULL &&
 81210da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81210dc:	2b00      	cmp	r3, #0
 81210de:	d012      	beq.n	8121106 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 81210e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81210e2:	68db      	ldr	r3, [r3, #12]
 81210e4:	685b      	ldr	r3, [r3, #4]
 81210e6:	4618      	mov	r0, r3
 81210e8:	f7f6 f805 	bl	81170f6 <lwip_htonl>
 81210ec:	4602      	mov	r2, r0
 81210ee:	687b      	ldr	r3, [r7, #4]
 81210f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 81210f2:	1ad3      	subs	r3, r2, r3
 81210f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 81210f6:	8912      	ldrh	r2, [r2, #8]
 81210f8:	4413      	add	r3, r2
  while (seg != NULL &&
 81210fa:	69ba      	ldr	r2, [r7, #24]
 81210fc:	429a      	cmp	r2, r3
 81210fe:	f4bf aed9 	bcs.w	8120eb4 <tcp_output+0x160>
 8121102:	e000      	b.n	8121106 <tcp_output+0x3b2>
      break;
 8121104:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8121106:	687b      	ldr	r3, [r7, #4]
 8121108:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 812110a:	2b00      	cmp	r3, #0
 812110c:	d108      	bne.n	8121120 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 812110e:	687b      	ldr	r3, [r7, #4]
 8121110:	2200      	movs	r2, #0
 8121112:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 8121116:	e004      	b.n	8121122 <tcp_output+0x3ce>
    goto output_done;
 8121118:	bf00      	nop
 812111a:	e002      	b.n	8121122 <tcp_output+0x3ce>
    goto output_done;
 812111c:	bf00      	nop
 812111e:	e000      	b.n	8121122 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8121120:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8121122:	687b      	ldr	r3, [r7, #4]
 8121124:	8b5b      	ldrh	r3, [r3, #26]
 8121126:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 812112a:	b29a      	uxth	r2, r3
 812112c:	687b      	ldr	r3, [r7, #4]
 812112e:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8121130:	2300      	movs	r3, #0
}
 8121132:	4618      	mov	r0, r3
 8121134:	3728      	adds	r7, #40	@ 0x28
 8121136:	46bd      	mov	sp, r7
 8121138:	bdb0      	pop	{r4, r5, r7, pc}
 812113a:	bf00      	nop

0812113c <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 812113c:	b580      	push	{r7, lr}
 812113e:	b082      	sub	sp, #8
 8121140:	af00      	add	r7, sp, #0
 8121142:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8121144:	687b      	ldr	r3, [r7, #4]
 8121146:	2b00      	cmp	r3, #0
 8121148:	d106      	bne.n	8121158 <tcp_output_segment_busy+0x1c>
 812114a:	4b09      	ldr	r3, [pc, #36]	@ (8121170 <tcp_output_segment_busy+0x34>)
 812114c:	f240 529a 	movw	r2, #1434	@ 0x59a
 8121150:	4908      	ldr	r1, [pc, #32]	@ (8121174 <tcp_output_segment_busy+0x38>)
 8121152:	4809      	ldr	r0, [pc, #36]	@ (8121178 <tcp_output_segment_busy+0x3c>)
 8121154:	f002 fd62 	bl	8123c1c <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8121158:	687b      	ldr	r3, [r7, #4]
 812115a:	685b      	ldr	r3, [r3, #4]
 812115c:	7b9b      	ldrb	r3, [r3, #14]
 812115e:	2b01      	cmp	r3, #1
 8121160:	d001      	beq.n	8121166 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8121162:	2301      	movs	r3, #1
 8121164:	e000      	b.n	8121168 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8121166:	2300      	movs	r3, #0
}
 8121168:	4618      	mov	r0, r3
 812116a:	3708      	adds	r7, #8
 812116c:	46bd      	mov	sp, r7
 812116e:	bd80      	pop	{r7, pc}
 8121170:	081274e4 	.word	0x081274e4
 8121174:	08127ac0 	.word	0x08127ac0
 8121178:	08127578 	.word	0x08127578

0812117c <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 812117c:	b5b0      	push	{r4, r5, r7, lr}
 812117e:	b08c      	sub	sp, #48	@ 0x30
 8121180:	af04      	add	r7, sp, #16
 8121182:	60f8      	str	r0, [r7, #12]
 8121184:	60b9      	str	r1, [r7, #8]
 8121186:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8121188:	68fb      	ldr	r3, [r7, #12]
 812118a:	2b00      	cmp	r3, #0
 812118c:	d106      	bne.n	812119c <tcp_output_segment+0x20>
 812118e:	4b64      	ldr	r3, [pc, #400]	@ (8121320 <tcp_output_segment+0x1a4>)
 8121190:	f44f 62b7 	mov.w	r2, #1464	@ 0x5b8
 8121194:	4963      	ldr	r1, [pc, #396]	@ (8121324 <tcp_output_segment+0x1a8>)
 8121196:	4864      	ldr	r0, [pc, #400]	@ (8121328 <tcp_output_segment+0x1ac>)
 8121198:	f002 fd40 	bl	8123c1c <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 812119c:	68bb      	ldr	r3, [r7, #8]
 812119e:	2b00      	cmp	r3, #0
 81211a0:	d106      	bne.n	81211b0 <tcp_output_segment+0x34>
 81211a2:	4b5f      	ldr	r3, [pc, #380]	@ (8121320 <tcp_output_segment+0x1a4>)
 81211a4:	f240 52b9 	movw	r2, #1465	@ 0x5b9
 81211a8:	4960      	ldr	r1, [pc, #384]	@ (812132c <tcp_output_segment+0x1b0>)
 81211aa:	485f      	ldr	r0, [pc, #380]	@ (8121328 <tcp_output_segment+0x1ac>)
 81211ac:	f002 fd36 	bl	8123c1c <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 81211b0:	687b      	ldr	r3, [r7, #4]
 81211b2:	2b00      	cmp	r3, #0
 81211b4:	d106      	bne.n	81211c4 <tcp_output_segment+0x48>
 81211b6:	4b5a      	ldr	r3, [pc, #360]	@ (8121320 <tcp_output_segment+0x1a4>)
 81211b8:	f240 52ba 	movw	r2, #1466	@ 0x5ba
 81211bc:	495c      	ldr	r1, [pc, #368]	@ (8121330 <tcp_output_segment+0x1b4>)
 81211be:	485a      	ldr	r0, [pc, #360]	@ (8121328 <tcp_output_segment+0x1ac>)
 81211c0:	f002 fd2c 	bl	8123c1c <iprintf>

  if (tcp_output_segment_busy(seg)) {
 81211c4:	68f8      	ldr	r0, [r7, #12]
 81211c6:	f7ff ffb9 	bl	812113c <tcp_output_segment_busy>
 81211ca:	4603      	mov	r3, r0
 81211cc:	2b00      	cmp	r3, #0
 81211ce:	d001      	beq.n	81211d4 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 81211d0:	2300      	movs	r3, #0
 81211d2:	e0a1      	b.n	8121318 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 81211d4:	68bb      	ldr	r3, [r7, #8]
 81211d6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 81211d8:	68fb      	ldr	r3, [r7, #12]
 81211da:	68dc      	ldr	r4, [r3, #12]
 81211dc:	4610      	mov	r0, r2
 81211de:	f7f5 ff8a 	bl	81170f6 <lwip_htonl>
 81211e2:	4603      	mov	r3, r0
 81211e4:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 81211e6:	68bb      	ldr	r3, [r7, #8]
 81211e8:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 81211ea:	68fb      	ldr	r3, [r7, #12]
 81211ec:	68dc      	ldr	r4, [r3, #12]
 81211ee:	4610      	mov	r0, r2
 81211f0:	f7f5 ff6c 	bl	81170cc <lwip_htons>
 81211f4:	4603      	mov	r3, r0
 81211f6:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 81211f8:	68bb      	ldr	r3, [r7, #8]
 81211fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 81211fc:	68ba      	ldr	r2, [r7, #8]
 81211fe:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 8121200:	441a      	add	r2, r3
 8121202:	68bb      	ldr	r3, [r7, #8]
 8121204:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8121206:	68fb      	ldr	r3, [r7, #12]
 8121208:	68db      	ldr	r3, [r3, #12]
 812120a:	3314      	adds	r3, #20
 812120c:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 812120e:	68fb      	ldr	r3, [r7, #12]
 8121210:	7a9b      	ldrb	r3, [r3, #10]
 8121212:	f003 0301 	and.w	r3, r3, #1
 8121216:	2b00      	cmp	r3, #0
 8121218:	d015      	beq.n	8121246 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 812121a:	68bb      	ldr	r3, [r7, #8]
 812121c:	3304      	adds	r3, #4
 812121e:	461a      	mov	r2, r3
 8121220:	6879      	ldr	r1, [r7, #4]
 8121222:	f44f 7006 	mov.w	r0, #536	@ 0x218
 8121226:	f7fc fa39 	bl	811d69c <tcp_eff_send_mss_netif>
 812122a:	4603      	mov	r3, r0
 812122c:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 812122e:	8b7b      	ldrh	r3, [r7, #26]
 8121230:	f043 7301 	orr.w	r3, r3, #33816576	@ 0x2040000
 8121234:	4618      	mov	r0, r3
 8121236:	f7f5 ff5e 	bl	81170f6 <lwip_htonl>
 812123a:	4602      	mov	r2, r0
 812123c:	69fb      	ldr	r3, [r7, #28]
 812123e:	601a      	str	r2, [r3, #0]
    opts += 1;
 8121240:	69fb      	ldr	r3, [r7, #28]
 8121242:	3304      	adds	r3, #4
 8121244:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8121246:	68bb      	ldr	r3, [r7, #8]
 8121248:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 812124c:	2b00      	cmp	r3, #0
 812124e:	da02      	bge.n	8121256 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8121250:	68bb      	ldr	r3, [r7, #8]
 8121252:	2200      	movs	r2, #0
 8121254:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  if (pcb->rttest == 0) {
 8121256:	68bb      	ldr	r3, [r7, #8]
 8121258:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 812125a:	2b00      	cmp	r3, #0
 812125c:	d10c      	bne.n	8121278 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 812125e:	4b35      	ldr	r3, [pc, #212]	@ (8121334 <tcp_output_segment+0x1b8>)
 8121260:	681a      	ldr	r2, [r3, #0]
 8121262:	68bb      	ldr	r3, [r7, #8]
 8121264:	635a      	str	r2, [r3, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8121266:	68fb      	ldr	r3, [r7, #12]
 8121268:	68db      	ldr	r3, [r3, #12]
 812126a:	685b      	ldr	r3, [r3, #4]
 812126c:	4618      	mov	r0, r3
 812126e:	f7f5 ff42 	bl	81170f6 <lwip_htonl>
 8121272:	4602      	mov	r2, r0
 8121274:	68bb      	ldr	r3, [r7, #8]
 8121276:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8121278:	68fb      	ldr	r3, [r7, #12]
 812127a:	68da      	ldr	r2, [r3, #12]
 812127c:	68fb      	ldr	r3, [r7, #12]
 812127e:	685b      	ldr	r3, [r3, #4]
 8121280:	685b      	ldr	r3, [r3, #4]
 8121282:	1ad3      	subs	r3, r2, r3
 8121284:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8121286:	68fb      	ldr	r3, [r7, #12]
 8121288:	685b      	ldr	r3, [r3, #4]
 812128a:	8959      	ldrh	r1, [r3, #10]
 812128c:	68fb      	ldr	r3, [r7, #12]
 812128e:	685b      	ldr	r3, [r3, #4]
 8121290:	8b3a      	ldrh	r2, [r7, #24]
 8121292:	1a8a      	subs	r2, r1, r2
 8121294:	b292      	uxth	r2, r2
 8121296:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8121298:	68fb      	ldr	r3, [r7, #12]
 812129a:	685b      	ldr	r3, [r3, #4]
 812129c:	8919      	ldrh	r1, [r3, #8]
 812129e:	68fb      	ldr	r3, [r7, #12]
 81212a0:	685b      	ldr	r3, [r3, #4]
 81212a2:	8b3a      	ldrh	r2, [r7, #24]
 81212a4:	1a8a      	subs	r2, r1, r2
 81212a6:	b292      	uxth	r2, r2
 81212a8:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 81212aa:	68fb      	ldr	r3, [r7, #12]
 81212ac:	685b      	ldr	r3, [r3, #4]
 81212ae:	68fa      	ldr	r2, [r7, #12]
 81212b0:	68d2      	ldr	r2, [r2, #12]
 81212b2:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 81212b4:	68fb      	ldr	r3, [r7, #12]
 81212b6:	68db      	ldr	r3, [r3, #12]
 81212b8:	2200      	movs	r2, #0
 81212ba:	741a      	strb	r2, [r3, #16]
 81212bc:	2200      	movs	r2, #0
 81212be:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 81212c0:	68fb      	ldr	r3, [r7, #12]
 81212c2:	68da      	ldr	r2, [r3, #12]
 81212c4:	68fb      	ldr	r3, [r7, #12]
 81212c6:	7a9b      	ldrb	r3, [r3, #10]
 81212c8:	f003 0301 	and.w	r3, r3, #1
 81212cc:	2b00      	cmp	r3, #0
 81212ce:	d001      	beq.n	81212d4 <tcp_output_segment+0x158>
 81212d0:	2318      	movs	r3, #24
 81212d2:	e000      	b.n	81212d6 <tcp_output_segment+0x15a>
 81212d4:	2314      	movs	r3, #20
 81212d6:	4413      	add	r3, r2
 81212d8:	69fa      	ldr	r2, [r7, #28]
 81212da:	429a      	cmp	r2, r3
 81212dc:	d006      	beq.n	81212ec <tcp_output_segment+0x170>
 81212de:	4b10      	ldr	r3, [pc, #64]	@ (8121320 <tcp_output_segment+0x1a4>)
 81212e0:	f240 621c 	movw	r2, #1564	@ 0x61c
 81212e4:	4914      	ldr	r1, [pc, #80]	@ (8121338 <tcp_output_segment+0x1bc>)
 81212e6:	4810      	ldr	r0, [pc, #64]	@ (8121328 <tcp_output_segment+0x1ac>)
 81212e8:	f002 fc98 	bl	8123c1c <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 81212ec:	68fb      	ldr	r3, [r7, #12]
 81212ee:	6858      	ldr	r0, [r3, #4]
 81212f0:	68b9      	ldr	r1, [r7, #8]
 81212f2:	68bb      	ldr	r3, [r7, #8]
 81212f4:	1d1c      	adds	r4, r3, #4
 81212f6:	68bb      	ldr	r3, [r7, #8]
 81212f8:	7add      	ldrb	r5, [r3, #11]
 81212fa:	68bb      	ldr	r3, [r7, #8]
 81212fc:	7a9b      	ldrb	r3, [r3, #10]
 81212fe:	687a      	ldr	r2, [r7, #4]
 8121300:	9202      	str	r2, [sp, #8]
 8121302:	2206      	movs	r2, #6
 8121304:	9201      	str	r2, [sp, #4]
 8121306:	9300      	str	r3, [sp, #0]
 8121308:	462b      	mov	r3, r5
 812130a:	4622      	mov	r2, r4
 812130c:	f7f7 fc3e 	bl	8118b8c <ip4_output_if>
 8121310:	4603      	mov	r3, r0
 8121312:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8121314:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8121318:	4618      	mov	r0, r3
 812131a:	3720      	adds	r7, #32
 812131c:	46bd      	mov	sp, r7
 812131e:	bdb0      	pop	{r4, r5, r7, pc}
 8121320:	081274e4 	.word	0x081274e4
 8121324:	08127ae8 	.word	0x08127ae8
 8121328:	08127578 	.word	0x08127578
 812132c:	08127b08 	.word	0x08127b08
 8121330:	08127b28 	.word	0x08127b28
 8121334:	1000e498 	.word	0x1000e498
 8121338:	08127b4c 	.word	0x08127b4c

0812133c <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 812133c:	b5b0      	push	{r4, r5, r7, lr}
 812133e:	b084      	sub	sp, #16
 8121340:	af00      	add	r7, sp, #0
 8121342:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8121344:	687b      	ldr	r3, [r7, #4]
 8121346:	2b00      	cmp	r3, #0
 8121348:	d106      	bne.n	8121358 <tcp_rexmit_rto_prepare+0x1c>
 812134a:	4b31      	ldr	r3, [pc, #196]	@ (8121410 <tcp_rexmit_rto_prepare+0xd4>)
 812134c:	f240 6263 	movw	r2, #1635	@ 0x663
 8121350:	4930      	ldr	r1, [pc, #192]	@ (8121414 <tcp_rexmit_rto_prepare+0xd8>)
 8121352:	4831      	ldr	r0, [pc, #196]	@ (8121418 <tcp_rexmit_rto_prepare+0xdc>)
 8121354:	f002 fc62 	bl	8123c1c <iprintf>

  if (pcb->unacked == NULL) {
 8121358:	687b      	ldr	r3, [r7, #4]
 812135a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 812135c:	2b00      	cmp	r3, #0
 812135e:	d102      	bne.n	8121366 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8121360:	f06f 0305 	mvn.w	r3, #5
 8121364:	e050      	b.n	8121408 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8121366:	687b      	ldr	r3, [r7, #4]
 8121368:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 812136a:	60fb      	str	r3, [r7, #12]
 812136c:	e00b      	b.n	8121386 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 812136e:	68f8      	ldr	r0, [r7, #12]
 8121370:	f7ff fee4 	bl	812113c <tcp_output_segment_busy>
 8121374:	4603      	mov	r3, r0
 8121376:	2b00      	cmp	r3, #0
 8121378:	d002      	beq.n	8121380 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 812137a:	f06f 0305 	mvn.w	r3, #5
 812137e:	e043      	b.n	8121408 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8121380:	68fb      	ldr	r3, [r7, #12]
 8121382:	681b      	ldr	r3, [r3, #0]
 8121384:	60fb      	str	r3, [r7, #12]
 8121386:	68fb      	ldr	r3, [r7, #12]
 8121388:	681b      	ldr	r3, [r3, #0]
 812138a:	2b00      	cmp	r3, #0
 812138c:	d1ef      	bne.n	812136e <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 812138e:	68f8      	ldr	r0, [r7, #12]
 8121390:	f7ff fed4 	bl	812113c <tcp_output_segment_busy>
 8121394:	4603      	mov	r3, r0
 8121396:	2b00      	cmp	r3, #0
 8121398:	d002      	beq.n	81213a0 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 812139a:	f06f 0305 	mvn.w	r3, #5
 812139e:	e033      	b.n	8121408 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 81213a0:	687b      	ldr	r3, [r7, #4]
 81213a2:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 81213a4:	68fb      	ldr	r3, [r7, #12]
 81213a6:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 81213a8:	687b      	ldr	r3, [r7, #4]
 81213aa:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 81213ac:	687b      	ldr	r3, [r7, #4]
 81213ae:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 81213b0:	687b      	ldr	r3, [r7, #4]
 81213b2:	2200      	movs	r2, #0
 81213b4:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 81213b6:	687b      	ldr	r3, [r7, #4]
 81213b8:	8b5b      	ldrh	r3, [r3, #26]
 81213ba:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 81213be:	b29a      	uxth	r2, r3
 81213c0:	687b      	ldr	r3, [r7, #4]
 81213c2:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 81213c4:	68fb      	ldr	r3, [r7, #12]
 81213c6:	68db      	ldr	r3, [r3, #12]
 81213c8:	685b      	ldr	r3, [r3, #4]
 81213ca:	4618      	mov	r0, r3
 81213cc:	f7f5 fe93 	bl	81170f6 <lwip_htonl>
 81213d0:	4604      	mov	r4, r0
 81213d2:	68fb      	ldr	r3, [r7, #12]
 81213d4:	891b      	ldrh	r3, [r3, #8]
 81213d6:	461d      	mov	r5, r3
 81213d8:	68fb      	ldr	r3, [r7, #12]
 81213da:	68db      	ldr	r3, [r3, #12]
 81213dc:	899b      	ldrh	r3, [r3, #12]
 81213de:	b29b      	uxth	r3, r3
 81213e0:	4618      	mov	r0, r3
 81213e2:	f7f5 fe73 	bl	81170cc <lwip_htons>
 81213e6:	4603      	mov	r3, r0
 81213e8:	b2db      	uxtb	r3, r3
 81213ea:	f003 0303 	and.w	r3, r3, #3
 81213ee:	2b00      	cmp	r3, #0
 81213f0:	d001      	beq.n	81213f6 <tcp_rexmit_rto_prepare+0xba>
 81213f2:	2301      	movs	r3, #1
 81213f4:	e000      	b.n	81213f8 <tcp_rexmit_rto_prepare+0xbc>
 81213f6:	2300      	movs	r3, #0
 81213f8:	442b      	add	r3, r5
 81213fa:	18e2      	adds	r2, r4, r3
 81213fc:	687b      	ldr	r3, [r7, #4]
 81213fe:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8121400:	687b      	ldr	r3, [r7, #4]
 8121402:	2200      	movs	r2, #0
 8121404:	635a      	str	r2, [r3, #52]	@ 0x34

  return ERR_OK;
 8121406:	2300      	movs	r3, #0
}
 8121408:	4618      	mov	r0, r3
 812140a:	3710      	adds	r7, #16
 812140c:	46bd      	mov	sp, r7
 812140e:	bdb0      	pop	{r4, r5, r7, pc}
 8121410:	081274e4 	.word	0x081274e4
 8121414:	08127b60 	.word	0x08127b60
 8121418:	08127578 	.word	0x08127578

0812141c <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 812141c:	b580      	push	{r7, lr}
 812141e:	b082      	sub	sp, #8
 8121420:	af00      	add	r7, sp, #0
 8121422:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8121424:	687b      	ldr	r3, [r7, #4]
 8121426:	2b00      	cmp	r3, #0
 8121428:	d106      	bne.n	8121438 <tcp_rexmit_rto_commit+0x1c>
 812142a:	4b0d      	ldr	r3, [pc, #52]	@ (8121460 <tcp_rexmit_rto_commit+0x44>)
 812142c:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 8121430:	490c      	ldr	r1, [pc, #48]	@ (8121464 <tcp_rexmit_rto_commit+0x48>)
 8121432:	480d      	ldr	r0, [pc, #52]	@ (8121468 <tcp_rexmit_rto_commit+0x4c>)
 8121434:	f002 fbf2 	bl	8123c1c <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8121438:	687b      	ldr	r3, [r7, #4]
 812143a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 812143e:	2bff      	cmp	r3, #255	@ 0xff
 8121440:	d007      	beq.n	8121452 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8121442:	687b      	ldr	r3, [r7, #4]
 8121444:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8121448:	3301      	adds	r3, #1
 812144a:	b2da      	uxtb	r2, r3
 812144c:	687b      	ldr	r3, [r7, #4]
 812144e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8121452:	6878      	ldr	r0, [r7, #4]
 8121454:	f7ff fc7e 	bl	8120d54 <tcp_output>
}
 8121458:	bf00      	nop
 812145a:	3708      	adds	r7, #8
 812145c:	46bd      	mov	sp, r7
 812145e:	bd80      	pop	{r7, pc}
 8121460:	081274e4 	.word	0x081274e4
 8121464:	08127b84 	.word	0x08127b84
 8121468:	08127578 	.word	0x08127578

0812146c <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 812146c:	b580      	push	{r7, lr}
 812146e:	b082      	sub	sp, #8
 8121470:	af00      	add	r7, sp, #0
 8121472:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8121474:	687b      	ldr	r3, [r7, #4]
 8121476:	2b00      	cmp	r3, #0
 8121478:	d106      	bne.n	8121488 <tcp_rexmit_rto+0x1c>
 812147a:	4b0a      	ldr	r3, [pc, #40]	@ (81214a4 <tcp_rexmit_rto+0x38>)
 812147c:	f240 62ad 	movw	r2, #1709	@ 0x6ad
 8121480:	4909      	ldr	r1, [pc, #36]	@ (81214a8 <tcp_rexmit_rto+0x3c>)
 8121482:	480a      	ldr	r0, [pc, #40]	@ (81214ac <tcp_rexmit_rto+0x40>)
 8121484:	f002 fbca 	bl	8123c1c <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8121488:	6878      	ldr	r0, [r7, #4]
 812148a:	f7ff ff57 	bl	812133c <tcp_rexmit_rto_prepare>
 812148e:	4603      	mov	r3, r0
 8121490:	2b00      	cmp	r3, #0
 8121492:	d102      	bne.n	812149a <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8121494:	6878      	ldr	r0, [r7, #4]
 8121496:	f7ff ffc1 	bl	812141c <tcp_rexmit_rto_commit>
  }
}
 812149a:	bf00      	nop
 812149c:	3708      	adds	r7, #8
 812149e:	46bd      	mov	sp, r7
 81214a0:	bd80      	pop	{r7, pc}
 81214a2:	bf00      	nop
 81214a4:	081274e4 	.word	0x081274e4
 81214a8:	08127ba8 	.word	0x08127ba8
 81214ac:	08127578 	.word	0x08127578

081214b0 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 81214b0:	b590      	push	{r4, r7, lr}
 81214b2:	b085      	sub	sp, #20
 81214b4:	af00      	add	r7, sp, #0
 81214b6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 81214b8:	687b      	ldr	r3, [r7, #4]
 81214ba:	2b00      	cmp	r3, #0
 81214bc:	d106      	bne.n	81214cc <tcp_rexmit+0x1c>
 81214be:	4b2f      	ldr	r3, [pc, #188]	@ (812157c <tcp_rexmit+0xcc>)
 81214c0:	f240 62c1 	movw	r2, #1729	@ 0x6c1
 81214c4:	492e      	ldr	r1, [pc, #184]	@ (8121580 <tcp_rexmit+0xd0>)
 81214c6:	482f      	ldr	r0, [pc, #188]	@ (8121584 <tcp_rexmit+0xd4>)
 81214c8:	f002 fba8 	bl	8123c1c <iprintf>

  if (pcb->unacked == NULL) {
 81214cc:	687b      	ldr	r3, [r7, #4]
 81214ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 81214d0:	2b00      	cmp	r3, #0
 81214d2:	d102      	bne.n	81214da <tcp_rexmit+0x2a>
    return ERR_VAL;
 81214d4:	f06f 0305 	mvn.w	r3, #5
 81214d8:	e04c      	b.n	8121574 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 81214da:	687b      	ldr	r3, [r7, #4]
 81214dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 81214de:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 81214e0:	68b8      	ldr	r0, [r7, #8]
 81214e2:	f7ff fe2b 	bl	812113c <tcp_output_segment_busy>
 81214e6:	4603      	mov	r3, r0
 81214e8:	2b00      	cmp	r3, #0
 81214ea:	d002      	beq.n	81214f2 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 81214ec:	f06f 0305 	mvn.w	r3, #5
 81214f0:	e040      	b.n	8121574 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 81214f2:	68bb      	ldr	r3, [r7, #8]
 81214f4:	681a      	ldr	r2, [r3, #0]
 81214f6:	687b      	ldr	r3, [r7, #4]
 81214f8:	671a      	str	r2, [r3, #112]	@ 0x70

  cur_seg = &(pcb->unsent);
 81214fa:	687b      	ldr	r3, [r7, #4]
 81214fc:	336c      	adds	r3, #108	@ 0x6c
 81214fe:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8121500:	e002      	b.n	8121508 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8121502:	68fb      	ldr	r3, [r7, #12]
 8121504:	681b      	ldr	r3, [r3, #0]
 8121506:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8121508:	68fb      	ldr	r3, [r7, #12]
 812150a:	681b      	ldr	r3, [r3, #0]
 812150c:	2b00      	cmp	r3, #0
 812150e:	d011      	beq.n	8121534 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8121510:	68fb      	ldr	r3, [r7, #12]
 8121512:	681b      	ldr	r3, [r3, #0]
 8121514:	68db      	ldr	r3, [r3, #12]
 8121516:	685b      	ldr	r3, [r3, #4]
 8121518:	4618      	mov	r0, r3
 812151a:	f7f5 fdec 	bl	81170f6 <lwip_htonl>
 812151e:	4604      	mov	r4, r0
 8121520:	68bb      	ldr	r3, [r7, #8]
 8121522:	68db      	ldr	r3, [r3, #12]
 8121524:	685b      	ldr	r3, [r3, #4]
 8121526:	4618      	mov	r0, r3
 8121528:	f7f5 fde5 	bl	81170f6 <lwip_htonl>
 812152c:	4603      	mov	r3, r0
 812152e:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8121530:	2b00      	cmp	r3, #0
 8121532:	dbe6      	blt.n	8121502 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8121534:	68fb      	ldr	r3, [r7, #12]
 8121536:	681a      	ldr	r2, [r3, #0]
 8121538:	68bb      	ldr	r3, [r7, #8]
 812153a:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 812153c:	68fb      	ldr	r3, [r7, #12]
 812153e:	68ba      	ldr	r2, [r7, #8]
 8121540:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8121542:	68bb      	ldr	r3, [r7, #8]
 8121544:	681b      	ldr	r3, [r3, #0]
 8121546:	2b00      	cmp	r3, #0
 8121548:	d103      	bne.n	8121552 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 812154a:	687b      	ldr	r3, [r7, #4]
 812154c:	2200      	movs	r2, #0
 812154e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8121552:	687b      	ldr	r3, [r7, #4]
 8121554:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8121558:	2bff      	cmp	r3, #255	@ 0xff
 812155a:	d007      	beq.n	812156c <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 812155c:	687b      	ldr	r3, [r7, #4]
 812155e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8121562:	3301      	adds	r3, #1
 8121564:	b2da      	uxtb	r2, r3
 8121566:	687b      	ldr	r3, [r7, #4]
 8121568:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 812156c:	687b      	ldr	r3, [r7, #4]
 812156e:	2200      	movs	r2, #0
 8121570:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8121572:	2300      	movs	r3, #0
}
 8121574:	4618      	mov	r0, r3
 8121576:	3714      	adds	r7, #20
 8121578:	46bd      	mov	sp, r7
 812157a:	bd90      	pop	{r4, r7, pc}
 812157c:	081274e4 	.word	0x081274e4
 8121580:	08127bc4 	.word	0x08127bc4
 8121584:	08127578 	.word	0x08127578

08121588 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8121588:	b580      	push	{r7, lr}
 812158a:	b082      	sub	sp, #8
 812158c:	af00      	add	r7, sp, #0
 812158e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8121590:	687b      	ldr	r3, [r7, #4]
 8121592:	2b00      	cmp	r3, #0
 8121594:	d106      	bne.n	81215a4 <tcp_rexmit_fast+0x1c>
 8121596:	4b2a      	ldr	r3, [pc, #168]	@ (8121640 <tcp_rexmit_fast+0xb8>)
 8121598:	f240 62f9 	movw	r2, #1785	@ 0x6f9
 812159c:	4929      	ldr	r1, [pc, #164]	@ (8121644 <tcp_rexmit_fast+0xbc>)
 812159e:	482a      	ldr	r0, [pc, #168]	@ (8121648 <tcp_rexmit_fast+0xc0>)
 81215a0:	f002 fb3c 	bl	8123c1c <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 81215a4:	687b      	ldr	r3, [r7, #4]
 81215a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 81215a8:	2b00      	cmp	r3, #0
 81215aa:	d044      	beq.n	8121636 <tcp_rexmit_fast+0xae>
 81215ac:	687b      	ldr	r3, [r7, #4]
 81215ae:	8b5b      	ldrh	r3, [r3, #26]
 81215b0:	f003 0304 	and.w	r3, r3, #4
 81215b4:	2b00      	cmp	r3, #0
 81215b6:	d13e      	bne.n	8121636 <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 81215b8:	6878      	ldr	r0, [r7, #4]
 81215ba:	f7ff ff79 	bl	81214b0 <tcp_rexmit>
 81215be:	4603      	mov	r3, r0
 81215c0:	2b00      	cmp	r3, #0
 81215c2:	d138      	bne.n	8121636 <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 81215c4:	687b      	ldr	r3, [r7, #4]
 81215c6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 81215ca:	687b      	ldr	r3, [r7, #4]
 81215cc:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 81215d0:	4293      	cmp	r3, r2
 81215d2:	bf28      	it	cs
 81215d4:	4613      	movcs	r3, r2
 81215d6:	b29b      	uxth	r3, r3
 81215d8:	0fda      	lsrs	r2, r3, #31
 81215da:	4413      	add	r3, r2
 81215dc:	105b      	asrs	r3, r3, #1
 81215de:	b29a      	uxth	r2, r3
 81215e0:	687b      	ldr	r3, [r7, #4]
 81215e2:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 81215e6:	687b      	ldr	r3, [r7, #4]
 81215e8:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 81215ec:	461a      	mov	r2, r3
 81215ee:	687b      	ldr	r3, [r7, #4]
 81215f0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 81215f2:	005b      	lsls	r3, r3, #1
 81215f4:	429a      	cmp	r2, r3
 81215f6:	d206      	bcs.n	8121606 <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 81215f8:	687b      	ldr	r3, [r7, #4]
 81215fa:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 81215fc:	005b      	lsls	r3, r3, #1
 81215fe:	b29a      	uxth	r2, r3
 8121600:	687b      	ldr	r3, [r7, #4]
 8121602:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8121606:	687b      	ldr	r3, [r7, #4]
 8121608:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 812160c:	687b      	ldr	r3, [r7, #4]
 812160e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8121610:	4619      	mov	r1, r3
 8121612:	0049      	lsls	r1, r1, #1
 8121614:	440b      	add	r3, r1
 8121616:	b29b      	uxth	r3, r3
 8121618:	4413      	add	r3, r2
 812161a:	b29a      	uxth	r2, r3
 812161c:	687b      	ldr	r3, [r7, #4]
 812161e:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      tcp_set_flags(pcb, TF_INFR);
 8121622:	687b      	ldr	r3, [r7, #4]
 8121624:	8b5b      	ldrh	r3, [r3, #26]
 8121626:	f043 0304 	orr.w	r3, r3, #4
 812162a:	b29a      	uxth	r2, r3
 812162c:	687b      	ldr	r3, [r7, #4]
 812162e:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8121630:	687b      	ldr	r3, [r7, #4]
 8121632:	2200      	movs	r2, #0
 8121634:	861a      	strh	r2, [r3, #48]	@ 0x30
    }
  }
}
 8121636:	bf00      	nop
 8121638:	3708      	adds	r7, #8
 812163a:	46bd      	mov	sp, r7
 812163c:	bd80      	pop	{r7, pc}
 812163e:	bf00      	nop
 8121640:	081274e4 	.word	0x081274e4
 8121644:	08127bdc 	.word	0x08127bdc
 8121648:	08127578 	.word	0x08127578

0812164c <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 812164c:	b580      	push	{r7, lr}
 812164e:	b086      	sub	sp, #24
 8121650:	af00      	add	r7, sp, #0
 8121652:	60f8      	str	r0, [r7, #12]
 8121654:	607b      	str	r3, [r7, #4]
 8121656:	460b      	mov	r3, r1
 8121658:	817b      	strh	r3, [r7, #10]
 812165a:	4613      	mov	r3, r2
 812165c:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 812165e:	897a      	ldrh	r2, [r7, #10]
 8121660:	893b      	ldrh	r3, [r7, #8]
 8121662:	4413      	add	r3, r2
 8121664:	b29b      	uxth	r3, r3
 8121666:	3314      	adds	r3, #20
 8121668:	b29b      	uxth	r3, r3
 812166a:	f44f 7220 	mov.w	r2, #640	@ 0x280
 812166e:	4619      	mov	r1, r3
 8121670:	2022      	movs	r0, #34	@ 0x22
 8121672:	f7f9 fc51 	bl	811af18 <pbuf_alloc>
 8121676:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8121678:	697b      	ldr	r3, [r7, #20]
 812167a:	2b00      	cmp	r3, #0
 812167c:	d04d      	beq.n	812171a <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 812167e:	897b      	ldrh	r3, [r7, #10]
 8121680:	3313      	adds	r3, #19
 8121682:	697a      	ldr	r2, [r7, #20]
 8121684:	8952      	ldrh	r2, [r2, #10]
 8121686:	4293      	cmp	r3, r2
 8121688:	db06      	blt.n	8121698 <tcp_output_alloc_header_common+0x4c>
 812168a:	4b26      	ldr	r3, [pc, #152]	@ (8121724 <tcp_output_alloc_header_common+0xd8>)
 812168c:	f240 7223 	movw	r2, #1827	@ 0x723
 8121690:	4925      	ldr	r1, [pc, #148]	@ (8121728 <tcp_output_alloc_header_common+0xdc>)
 8121692:	4826      	ldr	r0, [pc, #152]	@ (812172c <tcp_output_alloc_header_common+0xe0>)
 8121694:	f002 fac2 	bl	8123c1c <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8121698:	697b      	ldr	r3, [r7, #20]
 812169a:	685b      	ldr	r3, [r3, #4]
 812169c:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 812169e:	8c3b      	ldrh	r3, [r7, #32]
 81216a0:	4618      	mov	r0, r3
 81216a2:	f7f5 fd13 	bl	81170cc <lwip_htons>
 81216a6:	4603      	mov	r3, r0
 81216a8:	461a      	mov	r2, r3
 81216aa:	693b      	ldr	r3, [r7, #16]
 81216ac:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 81216ae:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 81216b0:	4618      	mov	r0, r3
 81216b2:	f7f5 fd0b 	bl	81170cc <lwip_htons>
 81216b6:	4603      	mov	r3, r0
 81216b8:	461a      	mov	r2, r3
 81216ba:	693b      	ldr	r3, [r7, #16]
 81216bc:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 81216be:	693b      	ldr	r3, [r7, #16]
 81216c0:	687a      	ldr	r2, [r7, #4]
 81216c2:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 81216c4:	68f8      	ldr	r0, [r7, #12]
 81216c6:	f7f5 fd16 	bl	81170f6 <lwip_htonl>
 81216ca:	4602      	mov	r2, r0
 81216cc:	693b      	ldr	r3, [r7, #16]
 81216ce:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 81216d0:	897b      	ldrh	r3, [r7, #10]
 81216d2:	089b      	lsrs	r3, r3, #2
 81216d4:	b29b      	uxth	r3, r3
 81216d6:	3305      	adds	r3, #5
 81216d8:	b29b      	uxth	r3, r3
 81216da:	031b      	lsls	r3, r3, #12
 81216dc:	b29a      	uxth	r2, r3
 81216de:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 81216e2:	b29b      	uxth	r3, r3
 81216e4:	4313      	orrs	r3, r2
 81216e6:	b29b      	uxth	r3, r3
 81216e8:	4618      	mov	r0, r3
 81216ea:	f7f5 fcef 	bl	81170cc <lwip_htons>
 81216ee:	4603      	mov	r3, r0
 81216f0:	461a      	mov	r2, r3
 81216f2:	693b      	ldr	r3, [r7, #16]
 81216f4:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 81216f6:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 81216f8:	4618      	mov	r0, r3
 81216fa:	f7f5 fce7 	bl	81170cc <lwip_htons>
 81216fe:	4603      	mov	r3, r0
 8121700:	461a      	mov	r2, r3
 8121702:	693b      	ldr	r3, [r7, #16]
 8121704:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8121706:	693b      	ldr	r3, [r7, #16]
 8121708:	2200      	movs	r2, #0
 812170a:	741a      	strb	r2, [r3, #16]
 812170c:	2200      	movs	r2, #0
 812170e:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8121710:	693b      	ldr	r3, [r7, #16]
 8121712:	2200      	movs	r2, #0
 8121714:	749a      	strb	r2, [r3, #18]
 8121716:	2200      	movs	r2, #0
 8121718:	74da      	strb	r2, [r3, #19]
  }
  return p;
 812171a:	697b      	ldr	r3, [r7, #20]
}
 812171c:	4618      	mov	r0, r3
 812171e:	3718      	adds	r7, #24
 8121720:	46bd      	mov	sp, r7
 8121722:	bd80      	pop	{r7, pc}
 8121724:	081274e4 	.word	0x081274e4
 8121728:	08127bfc 	.word	0x08127bfc
 812172c:	08127578 	.word	0x08127578

08121730 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8121730:	b5b0      	push	{r4, r5, r7, lr}
 8121732:	b08a      	sub	sp, #40	@ 0x28
 8121734:	af04      	add	r7, sp, #16
 8121736:	60f8      	str	r0, [r7, #12]
 8121738:	607b      	str	r3, [r7, #4]
 812173a:	460b      	mov	r3, r1
 812173c:	817b      	strh	r3, [r7, #10]
 812173e:	4613      	mov	r3, r2
 8121740:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8121742:	68fb      	ldr	r3, [r7, #12]
 8121744:	2b00      	cmp	r3, #0
 8121746:	d106      	bne.n	8121756 <tcp_output_alloc_header+0x26>
 8121748:	4b15      	ldr	r3, [pc, #84]	@ (81217a0 <tcp_output_alloc_header+0x70>)
 812174a:	f240 7242 	movw	r2, #1858	@ 0x742
 812174e:	4915      	ldr	r1, [pc, #84]	@ (81217a4 <tcp_output_alloc_header+0x74>)
 8121750:	4815      	ldr	r0, [pc, #84]	@ (81217a8 <tcp_output_alloc_header+0x78>)
 8121752:	f002 fa63 	bl	8123c1c <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8121756:	68fb      	ldr	r3, [r7, #12]
 8121758:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 812175a:	68fb      	ldr	r3, [r7, #12]
 812175c:	8adb      	ldrh	r3, [r3, #22]
 812175e:	68fa      	ldr	r2, [r7, #12]
 8121760:	8b12      	ldrh	r2, [r2, #24]
 8121762:	68f9      	ldr	r1, [r7, #12]
 8121764:	8d49      	ldrh	r1, [r1, #42]	@ 0x2a
 8121766:	893d      	ldrh	r5, [r7, #8]
 8121768:	897c      	ldrh	r4, [r7, #10]
 812176a:	9103      	str	r1, [sp, #12]
 812176c:	2110      	movs	r1, #16
 812176e:	9102      	str	r1, [sp, #8]
 8121770:	9201      	str	r2, [sp, #4]
 8121772:	9300      	str	r3, [sp, #0]
 8121774:	687b      	ldr	r3, [r7, #4]
 8121776:	462a      	mov	r2, r5
 8121778:	4621      	mov	r1, r4
 812177a:	f7ff ff67 	bl	812164c <tcp_output_alloc_header_common>
 812177e:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8121780:	697b      	ldr	r3, [r7, #20]
 8121782:	2b00      	cmp	r3, #0
 8121784:	d006      	beq.n	8121794 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8121786:	68fb      	ldr	r3, [r7, #12]
 8121788:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 812178a:	68fa      	ldr	r2, [r7, #12]
 812178c:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 812178e:	441a      	add	r2, r3
 8121790:	68fb      	ldr	r3, [r7, #12]
 8121792:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  return p;
 8121794:	697b      	ldr	r3, [r7, #20]
}
 8121796:	4618      	mov	r0, r3
 8121798:	3718      	adds	r7, #24
 812179a:	46bd      	mov	sp, r7
 812179c:	bdb0      	pop	{r4, r5, r7, pc}
 812179e:	bf00      	nop
 81217a0:	081274e4 	.word	0x081274e4
 81217a4:	08127c2c 	.word	0x08127c2c
 81217a8:	08127578 	.word	0x08127578

081217ac <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 81217ac:	b580      	push	{r7, lr}
 81217ae:	b088      	sub	sp, #32
 81217b0:	af00      	add	r7, sp, #0
 81217b2:	60f8      	str	r0, [r7, #12]
 81217b4:	60b9      	str	r1, [r7, #8]
 81217b6:	4611      	mov	r1, r2
 81217b8:	461a      	mov	r2, r3
 81217ba:	460b      	mov	r3, r1
 81217bc:	71fb      	strb	r3, [r7, #7]
 81217be:	4613      	mov	r3, r2
 81217c0:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 81217c2:	2300      	movs	r3, #0
 81217c4:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 81217c6:	68bb      	ldr	r3, [r7, #8]
 81217c8:	2b00      	cmp	r3, #0
 81217ca:	d106      	bne.n	81217da <tcp_output_fill_options+0x2e>
 81217cc:	4b12      	ldr	r3, [pc, #72]	@ (8121818 <tcp_output_fill_options+0x6c>)
 81217ce:	f240 7256 	movw	r2, #1878	@ 0x756
 81217d2:	4912      	ldr	r1, [pc, #72]	@ (812181c <tcp_output_fill_options+0x70>)
 81217d4:	4812      	ldr	r0, [pc, #72]	@ (8121820 <tcp_output_fill_options+0x74>)
 81217d6:	f002 fa21 	bl	8123c1c <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 81217da:	68bb      	ldr	r3, [r7, #8]
 81217dc:	685b      	ldr	r3, [r3, #4]
 81217de:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 81217e0:	69bb      	ldr	r3, [r7, #24]
 81217e2:	3314      	adds	r3, #20
 81217e4:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 81217e6:	8bfb      	ldrh	r3, [r7, #30]
 81217e8:	009b      	lsls	r3, r3, #2
 81217ea:	461a      	mov	r2, r3
 81217ec:	79fb      	ldrb	r3, [r7, #7]
 81217ee:	009b      	lsls	r3, r3, #2
 81217f0:	f003 0304 	and.w	r3, r3, #4
 81217f4:	4413      	add	r3, r2
 81217f6:	3314      	adds	r3, #20
 81217f8:	69ba      	ldr	r2, [r7, #24]
 81217fa:	4413      	add	r3, r2
 81217fc:	697a      	ldr	r2, [r7, #20]
 81217fe:	429a      	cmp	r2, r3
 8121800:	d006      	beq.n	8121810 <tcp_output_fill_options+0x64>
 8121802:	4b05      	ldr	r3, [pc, #20]	@ (8121818 <tcp_output_fill_options+0x6c>)
 8121804:	f240 7275 	movw	r2, #1909	@ 0x775
 8121808:	4906      	ldr	r1, [pc, #24]	@ (8121824 <tcp_output_fill_options+0x78>)
 812180a:	4805      	ldr	r0, [pc, #20]	@ (8121820 <tcp_output_fill_options+0x74>)
 812180c:	f002 fa06 	bl	8123c1c <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8121810:	bf00      	nop
 8121812:	3720      	adds	r7, #32
 8121814:	46bd      	mov	sp, r7
 8121816:	bd80      	pop	{r7, pc}
 8121818:	081274e4 	.word	0x081274e4
 812181c:	08127c54 	.word	0x08127c54
 8121820:	08127578 	.word	0x08127578
 8121824:	08127b4c 	.word	0x08127b4c

08121828 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8121828:	b580      	push	{r7, lr}
 812182a:	b08a      	sub	sp, #40	@ 0x28
 812182c:	af04      	add	r7, sp, #16
 812182e:	60f8      	str	r0, [r7, #12]
 8121830:	60b9      	str	r1, [r7, #8]
 8121832:	607a      	str	r2, [r7, #4]
 8121834:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8121836:	68bb      	ldr	r3, [r7, #8]
 8121838:	2b00      	cmp	r3, #0
 812183a:	d106      	bne.n	812184a <tcp_output_control_segment+0x22>
 812183c:	4b1c      	ldr	r3, [pc, #112]	@ (81218b0 <tcp_output_control_segment+0x88>)
 812183e:	f240 7287 	movw	r2, #1927	@ 0x787
 8121842:	491c      	ldr	r1, [pc, #112]	@ (81218b4 <tcp_output_control_segment+0x8c>)
 8121844:	481c      	ldr	r0, [pc, #112]	@ (81218b8 <tcp_output_control_segment+0x90>)
 8121846:	f002 f9e9 	bl	8123c1c <iprintf>

  netif = tcp_route(pcb, src, dst);
 812184a:	683a      	ldr	r2, [r7, #0]
 812184c:	6879      	ldr	r1, [r7, #4]
 812184e:	68f8      	ldr	r0, [r7, #12]
 8121850:	f7fe faea 	bl	811fe28 <tcp_route>
 8121854:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8121856:	693b      	ldr	r3, [r7, #16]
 8121858:	2b00      	cmp	r3, #0
 812185a:	d102      	bne.n	8121862 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 812185c:	23fc      	movs	r3, #252	@ 0xfc
 812185e:	75fb      	strb	r3, [r7, #23]
 8121860:	e01c      	b.n	812189c <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8121862:	68fb      	ldr	r3, [r7, #12]
 8121864:	2b00      	cmp	r3, #0
 8121866:	d006      	beq.n	8121876 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8121868:	68fb      	ldr	r3, [r7, #12]
 812186a:	7adb      	ldrb	r3, [r3, #11]
 812186c:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 812186e:	68fb      	ldr	r3, [r7, #12]
 8121870:	7a9b      	ldrb	r3, [r3, #10]
 8121872:	757b      	strb	r3, [r7, #21]
 8121874:	e003      	b.n	812187e <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8121876:	23ff      	movs	r3, #255	@ 0xff
 8121878:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 812187a:	2300      	movs	r3, #0
 812187c:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 812187e:	7dba      	ldrb	r2, [r7, #22]
 8121880:	693b      	ldr	r3, [r7, #16]
 8121882:	9302      	str	r3, [sp, #8]
 8121884:	2306      	movs	r3, #6
 8121886:	9301      	str	r3, [sp, #4]
 8121888:	7d7b      	ldrb	r3, [r7, #21]
 812188a:	9300      	str	r3, [sp, #0]
 812188c:	4613      	mov	r3, r2
 812188e:	683a      	ldr	r2, [r7, #0]
 8121890:	6879      	ldr	r1, [r7, #4]
 8121892:	68b8      	ldr	r0, [r7, #8]
 8121894:	f7f7 f97a 	bl	8118b8c <ip4_output_if>
 8121898:	4603      	mov	r3, r0
 812189a:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 812189c:	68b8      	ldr	r0, [r7, #8]
 812189e:	f7f9 fe1d 	bl	811b4dc <pbuf_free>
  return err;
 81218a2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 81218a6:	4618      	mov	r0, r3
 81218a8:	3718      	adds	r7, #24
 81218aa:	46bd      	mov	sp, r7
 81218ac:	bd80      	pop	{r7, pc}
 81218ae:	bf00      	nop
 81218b0:	081274e4 	.word	0x081274e4
 81218b4:	08127c7c 	.word	0x08127c7c
 81218b8:	08127578 	.word	0x08127578

081218bc <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 81218bc:	b590      	push	{r4, r7, lr}
 81218be:	b08b      	sub	sp, #44	@ 0x2c
 81218c0:	af04      	add	r7, sp, #16
 81218c2:	60f8      	str	r0, [r7, #12]
 81218c4:	60b9      	str	r1, [r7, #8]
 81218c6:	607a      	str	r2, [r7, #4]
 81218c8:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 81218ca:	683b      	ldr	r3, [r7, #0]
 81218cc:	2b00      	cmp	r3, #0
 81218ce:	d106      	bne.n	81218de <tcp_rst+0x22>
 81218d0:	4b1f      	ldr	r3, [pc, #124]	@ (8121950 <tcp_rst+0x94>)
 81218d2:	f240 72c4 	movw	r2, #1988	@ 0x7c4
 81218d6:	491f      	ldr	r1, [pc, #124]	@ (8121954 <tcp_rst+0x98>)
 81218d8:	481f      	ldr	r0, [pc, #124]	@ (8121958 <tcp_rst+0x9c>)
 81218da:	f002 f99f 	bl	8123c1c <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 81218de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81218e0:	2b00      	cmp	r3, #0
 81218e2:	d106      	bne.n	81218f2 <tcp_rst+0x36>
 81218e4:	4b1a      	ldr	r3, [pc, #104]	@ (8121950 <tcp_rst+0x94>)
 81218e6:	f240 72c5 	movw	r2, #1989	@ 0x7c5
 81218ea:	491c      	ldr	r1, [pc, #112]	@ (812195c <tcp_rst+0xa0>)
 81218ec:	481a      	ldr	r0, [pc, #104]	@ (8121958 <tcp_rst+0x9c>)
 81218ee:	f002 f995 	bl	8123c1c <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 81218f2:	2300      	movs	r3, #0
 81218f4:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 81218f6:	f246 0308 	movw	r3, #24584	@ 0x6008
 81218fa:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 81218fc:	7dfb      	ldrb	r3, [r7, #23]
 81218fe:	b29c      	uxth	r4, r3
 8121900:	68b8      	ldr	r0, [r7, #8]
 8121902:	f7f5 fbf8 	bl	81170f6 <lwip_htonl>
 8121906:	4602      	mov	r2, r0
 8121908:	8abb      	ldrh	r3, [r7, #20]
 812190a:	9303      	str	r3, [sp, #12]
 812190c:	2314      	movs	r3, #20
 812190e:	9302      	str	r3, [sp, #8]
 8121910:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8121912:	9301      	str	r3, [sp, #4]
 8121914:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8121916:	9300      	str	r3, [sp, #0]
 8121918:	4613      	mov	r3, r2
 812191a:	2200      	movs	r2, #0
 812191c:	4621      	mov	r1, r4
 812191e:	6878      	ldr	r0, [r7, #4]
 8121920:	f7ff fe94 	bl	812164c <tcp_output_alloc_header_common>
 8121924:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8121926:	693b      	ldr	r3, [r7, #16]
 8121928:	2b00      	cmp	r3, #0
 812192a:	d00c      	beq.n	8121946 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 812192c:	7dfb      	ldrb	r3, [r7, #23]
 812192e:	2200      	movs	r2, #0
 8121930:	6939      	ldr	r1, [r7, #16]
 8121932:	68f8      	ldr	r0, [r7, #12]
 8121934:	f7ff ff3a 	bl	81217ac <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8121938:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 812193a:	683a      	ldr	r2, [r7, #0]
 812193c:	6939      	ldr	r1, [r7, #16]
 812193e:	68f8      	ldr	r0, [r7, #12]
 8121940:	f7ff ff72 	bl	8121828 <tcp_output_control_segment>
 8121944:	e000      	b.n	8121948 <tcp_rst+0x8c>
    return;
 8121946:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8121948:	371c      	adds	r7, #28
 812194a:	46bd      	mov	sp, r7
 812194c:	bd90      	pop	{r4, r7, pc}
 812194e:	bf00      	nop
 8121950:	081274e4 	.word	0x081274e4
 8121954:	08127ca8 	.word	0x08127ca8
 8121958:	08127578 	.word	0x08127578
 812195c:	08127cc4 	.word	0x08127cc4

08121960 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8121960:	b590      	push	{r4, r7, lr}
 8121962:	b087      	sub	sp, #28
 8121964:	af00      	add	r7, sp, #0
 8121966:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8121968:	2300      	movs	r3, #0
 812196a:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 812196c:	2300      	movs	r3, #0
 812196e:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8121970:	687b      	ldr	r3, [r7, #4]
 8121972:	2b00      	cmp	r3, #0
 8121974:	d106      	bne.n	8121984 <tcp_send_empty_ack+0x24>
 8121976:	4b28      	ldr	r3, [pc, #160]	@ (8121a18 <tcp_send_empty_ack+0xb8>)
 8121978:	f240 72ea 	movw	r2, #2026	@ 0x7ea
 812197c:	4927      	ldr	r1, [pc, #156]	@ (8121a1c <tcp_send_empty_ack+0xbc>)
 812197e:	4828      	ldr	r0, [pc, #160]	@ (8121a20 <tcp_send_empty_ack+0xc0>)
 8121980:	f002 f94c 	bl	8123c1c <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8121984:	7dfb      	ldrb	r3, [r7, #23]
 8121986:	009b      	lsls	r3, r3, #2
 8121988:	b2db      	uxtb	r3, r3
 812198a:	f003 0304 	and.w	r3, r3, #4
 812198e:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8121990:	7d7b      	ldrb	r3, [r7, #21]
 8121992:	b29c      	uxth	r4, r3
 8121994:	687b      	ldr	r3, [r7, #4]
 8121996:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8121998:	4618      	mov	r0, r3
 812199a:	f7f5 fbac 	bl	81170f6 <lwip_htonl>
 812199e:	4603      	mov	r3, r0
 81219a0:	2200      	movs	r2, #0
 81219a2:	4621      	mov	r1, r4
 81219a4:	6878      	ldr	r0, [r7, #4]
 81219a6:	f7ff fec3 	bl	8121730 <tcp_output_alloc_header>
 81219aa:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 81219ac:	693b      	ldr	r3, [r7, #16]
 81219ae:	2b00      	cmp	r3, #0
 81219b0:	d109      	bne.n	81219c6 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 81219b2:	687b      	ldr	r3, [r7, #4]
 81219b4:	8b5b      	ldrh	r3, [r3, #26]
 81219b6:	f043 0303 	orr.w	r3, r3, #3
 81219ba:	b29a      	uxth	r2, r3
 81219bc:	687b      	ldr	r3, [r7, #4]
 81219be:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 81219c0:	f06f 0301 	mvn.w	r3, #1
 81219c4:	e023      	b.n	8121a0e <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 81219c6:	7dbb      	ldrb	r3, [r7, #22]
 81219c8:	7dfa      	ldrb	r2, [r7, #23]
 81219ca:	6939      	ldr	r1, [r7, #16]
 81219cc:	6878      	ldr	r0, [r7, #4]
 81219ce:	f7ff feed 	bl	81217ac <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 81219d2:	687a      	ldr	r2, [r7, #4]
 81219d4:	687b      	ldr	r3, [r7, #4]
 81219d6:	3304      	adds	r3, #4
 81219d8:	6939      	ldr	r1, [r7, #16]
 81219da:	6878      	ldr	r0, [r7, #4]
 81219dc:	f7ff ff24 	bl	8121828 <tcp_output_control_segment>
 81219e0:	4603      	mov	r3, r0
 81219e2:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 81219e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 81219e8:	2b00      	cmp	r3, #0
 81219ea:	d007      	beq.n	81219fc <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 81219ec:	687b      	ldr	r3, [r7, #4]
 81219ee:	8b5b      	ldrh	r3, [r3, #26]
 81219f0:	f043 0303 	orr.w	r3, r3, #3
 81219f4:	b29a      	uxth	r2, r3
 81219f6:	687b      	ldr	r3, [r7, #4]
 81219f8:	835a      	strh	r2, [r3, #26]
 81219fa:	e006      	b.n	8121a0a <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 81219fc:	687b      	ldr	r3, [r7, #4]
 81219fe:	8b5b      	ldrh	r3, [r3, #26]
 8121a00:	f023 0303 	bic.w	r3, r3, #3
 8121a04:	b29a      	uxth	r2, r3
 8121a06:	687b      	ldr	r3, [r7, #4]
 8121a08:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8121a0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8121a0e:	4618      	mov	r0, r3
 8121a10:	371c      	adds	r7, #28
 8121a12:	46bd      	mov	sp, r7
 8121a14:	bd90      	pop	{r4, r7, pc}
 8121a16:	bf00      	nop
 8121a18:	081274e4 	.word	0x081274e4
 8121a1c:	08127ce0 	.word	0x08127ce0
 8121a20:	08127578 	.word	0x08127578

08121a24 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8121a24:	b590      	push	{r4, r7, lr}
 8121a26:	b087      	sub	sp, #28
 8121a28:	af00      	add	r7, sp, #0
 8121a2a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8121a2c:	2300      	movs	r3, #0
 8121a2e:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8121a30:	687b      	ldr	r3, [r7, #4]
 8121a32:	2b00      	cmp	r3, #0
 8121a34:	d106      	bne.n	8121a44 <tcp_keepalive+0x20>
 8121a36:	4b18      	ldr	r3, [pc, #96]	@ (8121a98 <tcp_keepalive+0x74>)
 8121a38:	f640 0224 	movw	r2, #2084	@ 0x824
 8121a3c:	4917      	ldr	r1, [pc, #92]	@ (8121a9c <tcp_keepalive+0x78>)
 8121a3e:	4818      	ldr	r0, [pc, #96]	@ (8121aa0 <tcp_keepalive+0x7c>)
 8121a40:	f002 f8ec 	bl	8123c1c <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8121a44:	7dfb      	ldrb	r3, [r7, #23]
 8121a46:	b29c      	uxth	r4, r3
 8121a48:	687b      	ldr	r3, [r7, #4]
 8121a4a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8121a4c:	3b01      	subs	r3, #1
 8121a4e:	4618      	mov	r0, r3
 8121a50:	f7f5 fb51 	bl	81170f6 <lwip_htonl>
 8121a54:	4603      	mov	r3, r0
 8121a56:	2200      	movs	r2, #0
 8121a58:	4621      	mov	r1, r4
 8121a5a:	6878      	ldr	r0, [r7, #4]
 8121a5c:	f7ff fe68 	bl	8121730 <tcp_output_alloc_header>
 8121a60:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8121a62:	693b      	ldr	r3, [r7, #16]
 8121a64:	2b00      	cmp	r3, #0
 8121a66:	d102      	bne.n	8121a6e <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8121a68:	f04f 33ff 	mov.w	r3, #4294967295
 8121a6c:	e010      	b.n	8121a90 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8121a6e:	7dfb      	ldrb	r3, [r7, #23]
 8121a70:	2200      	movs	r2, #0
 8121a72:	6939      	ldr	r1, [r7, #16]
 8121a74:	6878      	ldr	r0, [r7, #4]
 8121a76:	f7ff fe99 	bl	81217ac <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8121a7a:	687a      	ldr	r2, [r7, #4]
 8121a7c:	687b      	ldr	r3, [r7, #4]
 8121a7e:	3304      	adds	r3, #4
 8121a80:	6939      	ldr	r1, [r7, #16]
 8121a82:	6878      	ldr	r0, [r7, #4]
 8121a84:	f7ff fed0 	bl	8121828 <tcp_output_control_segment>
 8121a88:	4603      	mov	r3, r0
 8121a8a:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8121a8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8121a90:	4618      	mov	r0, r3
 8121a92:	371c      	adds	r7, #28
 8121a94:	46bd      	mov	sp, r7
 8121a96:	bd90      	pop	{r4, r7, pc}
 8121a98:	081274e4 	.word	0x081274e4
 8121a9c:	08127d00 	.word	0x08127d00
 8121aa0:	08127578 	.word	0x08127578

08121aa4 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8121aa4:	b590      	push	{r4, r7, lr}
 8121aa6:	b08b      	sub	sp, #44	@ 0x2c
 8121aa8:	af00      	add	r7, sp, #0
 8121aaa:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8121aac:	2300      	movs	r3, #0
 8121aae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8121ab2:	687b      	ldr	r3, [r7, #4]
 8121ab4:	2b00      	cmp	r3, #0
 8121ab6:	d106      	bne.n	8121ac6 <tcp_zero_window_probe+0x22>
 8121ab8:	4b4c      	ldr	r3, [pc, #304]	@ (8121bec <tcp_zero_window_probe+0x148>)
 8121aba:	f640 024f 	movw	r2, #2127	@ 0x84f
 8121abe:	494c      	ldr	r1, [pc, #304]	@ (8121bf0 <tcp_zero_window_probe+0x14c>)
 8121ac0:	484c      	ldr	r0, [pc, #304]	@ (8121bf4 <tcp_zero_window_probe+0x150>)
 8121ac2:	f002 f8ab 	bl	8123c1c <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8121ac6:	687b      	ldr	r3, [r7, #4]
 8121ac8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8121aca:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8121acc:	6a3b      	ldr	r3, [r7, #32]
 8121ace:	2b00      	cmp	r3, #0
 8121ad0:	d101      	bne.n	8121ad6 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8121ad2:	2300      	movs	r3, #0
 8121ad4:	e086      	b.n	8121be4 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8121ad6:	687b      	ldr	r3, [r7, #4]
 8121ad8:	f893 30a2 	ldrb.w	r3, [r3, #162]	@ 0xa2
 8121adc:	2bff      	cmp	r3, #255	@ 0xff
 8121ade:	d007      	beq.n	8121af0 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8121ae0:	687b      	ldr	r3, [r7, #4]
 8121ae2:	f893 30a2 	ldrb.w	r3, [r3, #162]	@ 0xa2
 8121ae6:	3301      	adds	r3, #1
 8121ae8:	b2da      	uxtb	r2, r3
 8121aea:	687b      	ldr	r3, [r7, #4]
 8121aec:	f883 20a2 	strb.w	r2, [r3, #162]	@ 0xa2
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8121af0:	6a3b      	ldr	r3, [r7, #32]
 8121af2:	68db      	ldr	r3, [r3, #12]
 8121af4:	899b      	ldrh	r3, [r3, #12]
 8121af6:	b29b      	uxth	r3, r3
 8121af8:	4618      	mov	r0, r3
 8121afa:	f7f5 fae7 	bl	81170cc <lwip_htons>
 8121afe:	4603      	mov	r3, r0
 8121b00:	b2db      	uxtb	r3, r3
 8121b02:	f003 0301 	and.w	r3, r3, #1
 8121b06:	2b00      	cmp	r3, #0
 8121b08:	d005      	beq.n	8121b16 <tcp_zero_window_probe+0x72>
 8121b0a:	6a3b      	ldr	r3, [r7, #32]
 8121b0c:	891b      	ldrh	r3, [r3, #8]
 8121b0e:	2b00      	cmp	r3, #0
 8121b10:	d101      	bne.n	8121b16 <tcp_zero_window_probe+0x72>
 8121b12:	2301      	movs	r3, #1
 8121b14:	e000      	b.n	8121b18 <tcp_zero_window_probe+0x74>
 8121b16:	2300      	movs	r3, #0
 8121b18:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8121b1a:	7ffb      	ldrb	r3, [r7, #31]
 8121b1c:	2b00      	cmp	r3, #0
 8121b1e:	bf0c      	ite	eq
 8121b20:	2301      	moveq	r3, #1
 8121b22:	2300      	movne	r3, #0
 8121b24:	b2db      	uxtb	r3, r3
 8121b26:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8121b28:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8121b2c:	b299      	uxth	r1, r3
 8121b2e:	6a3b      	ldr	r3, [r7, #32]
 8121b30:	68db      	ldr	r3, [r3, #12]
 8121b32:	685b      	ldr	r3, [r3, #4]
 8121b34:	8bba      	ldrh	r2, [r7, #28]
 8121b36:	6878      	ldr	r0, [r7, #4]
 8121b38:	f7ff fdfa 	bl	8121730 <tcp_output_alloc_header>
 8121b3c:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8121b3e:	69bb      	ldr	r3, [r7, #24]
 8121b40:	2b00      	cmp	r3, #0
 8121b42:	d102      	bne.n	8121b4a <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8121b44:	f04f 33ff 	mov.w	r3, #4294967295
 8121b48:	e04c      	b.n	8121be4 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8121b4a:	69bb      	ldr	r3, [r7, #24]
 8121b4c:	685b      	ldr	r3, [r3, #4]
 8121b4e:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8121b50:	7ffb      	ldrb	r3, [r7, #31]
 8121b52:	2b00      	cmp	r3, #0
 8121b54:	d011      	beq.n	8121b7a <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8121b56:	697b      	ldr	r3, [r7, #20]
 8121b58:	899b      	ldrh	r3, [r3, #12]
 8121b5a:	b29b      	uxth	r3, r3
 8121b5c:	b21b      	sxth	r3, r3
 8121b5e:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8121b62:	b21c      	sxth	r4, r3
 8121b64:	2011      	movs	r0, #17
 8121b66:	f7f5 fab1 	bl	81170cc <lwip_htons>
 8121b6a:	4603      	mov	r3, r0
 8121b6c:	b21b      	sxth	r3, r3
 8121b6e:	4323      	orrs	r3, r4
 8121b70:	b21b      	sxth	r3, r3
 8121b72:	b29a      	uxth	r2, r3
 8121b74:	697b      	ldr	r3, [r7, #20]
 8121b76:	819a      	strh	r2, [r3, #12]
 8121b78:	e010      	b.n	8121b9c <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8121b7a:	69bb      	ldr	r3, [r7, #24]
 8121b7c:	685b      	ldr	r3, [r3, #4]
 8121b7e:	3314      	adds	r3, #20
 8121b80:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8121b82:	6a3b      	ldr	r3, [r7, #32]
 8121b84:	6858      	ldr	r0, [r3, #4]
 8121b86:	6a3b      	ldr	r3, [r7, #32]
 8121b88:	685b      	ldr	r3, [r3, #4]
 8121b8a:	891a      	ldrh	r2, [r3, #8]
 8121b8c:	6a3b      	ldr	r3, [r7, #32]
 8121b8e:	891b      	ldrh	r3, [r3, #8]
 8121b90:	1ad3      	subs	r3, r2, r3
 8121b92:	b29b      	uxth	r3, r3
 8121b94:	2201      	movs	r2, #1
 8121b96:	6939      	ldr	r1, [r7, #16]
 8121b98:	f7f9 fea6 	bl	811b8e8 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8121b9c:	6a3b      	ldr	r3, [r7, #32]
 8121b9e:	68db      	ldr	r3, [r3, #12]
 8121ba0:	685b      	ldr	r3, [r3, #4]
 8121ba2:	4618      	mov	r0, r3
 8121ba4:	f7f5 faa7 	bl	81170f6 <lwip_htonl>
 8121ba8:	4603      	mov	r3, r0
 8121baa:	3301      	adds	r3, #1
 8121bac:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8121bae:	687b      	ldr	r3, [r7, #4]
 8121bb0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8121bb2:	68fb      	ldr	r3, [r7, #12]
 8121bb4:	1ad3      	subs	r3, r2, r3
 8121bb6:	2b00      	cmp	r3, #0
 8121bb8:	da02      	bge.n	8121bc0 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8121bba:	687b      	ldr	r3, [r7, #4]
 8121bbc:	68fa      	ldr	r2, [r7, #12]
 8121bbe:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8121bc0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8121bc4:	2200      	movs	r2, #0
 8121bc6:	69b9      	ldr	r1, [r7, #24]
 8121bc8:	6878      	ldr	r0, [r7, #4]
 8121bca:	f7ff fdef 	bl	81217ac <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8121bce:	687a      	ldr	r2, [r7, #4]
 8121bd0:	687b      	ldr	r3, [r7, #4]
 8121bd2:	3304      	adds	r3, #4
 8121bd4:	69b9      	ldr	r1, [r7, #24]
 8121bd6:	6878      	ldr	r0, [r7, #4]
 8121bd8:	f7ff fe26 	bl	8121828 <tcp_output_control_segment>
 8121bdc:	4603      	mov	r3, r0
 8121bde:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8121be0:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8121be4:	4618      	mov	r0, r3
 8121be6:	372c      	adds	r7, #44	@ 0x2c
 8121be8:	46bd      	mov	sp, r7
 8121bea:	bd90      	pop	{r4, r7, pc}
 8121bec:	081274e4 	.word	0x081274e4
 8121bf0:	08127d1c 	.word	0x08127d1c
 8121bf4:	08127578 	.word	0x08127578

08121bf8 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 8121bf8:	b580      	push	{r7, lr}
 8121bfa:	b084      	sub	sp, #16
 8121bfc:	af00      	add	r7, sp, #0
 8121bfe:	6078      	str	r0, [r7, #4]
 8121c00:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 8121c02:	f000 fabd 	bl	8122180 <sys_timeouts_sleeptime>
 8121c06:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 8121c08:	68fb      	ldr	r3, [r7, #12]
 8121c0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8121c0e:	d10b      	bne.n	8121c28 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 8121c10:	4813      	ldr	r0, [pc, #76]	@ (8121c60 <tcpip_timeouts_mbox_fetch+0x68>)
 8121c12:	f7f9 ffb4 	bl	811bb7e <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 8121c16:	2200      	movs	r2, #0
 8121c18:	6839      	ldr	r1, [r7, #0]
 8121c1a:	6878      	ldr	r0, [r7, #4]
 8121c1c:	f7f9 ff3c 	bl	811ba98 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 8121c20:	480f      	ldr	r0, [pc, #60]	@ (8121c60 <tcpip_timeouts_mbox_fetch+0x68>)
 8121c22:	f7f9 ff9d 	bl	811bb60 <sys_mutex_lock>
    return;
 8121c26:	e018      	b.n	8121c5a <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 8121c28:	68fb      	ldr	r3, [r7, #12]
 8121c2a:	2b00      	cmp	r3, #0
 8121c2c:	d102      	bne.n	8121c34 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 8121c2e:	f000 fa6d 	bl	812210c <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8121c32:	e7e6      	b.n	8121c02 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 8121c34:	480a      	ldr	r0, [pc, #40]	@ (8121c60 <tcpip_timeouts_mbox_fetch+0x68>)
 8121c36:	f7f9 ffa2 	bl	811bb7e <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 8121c3a:	68fa      	ldr	r2, [r7, #12]
 8121c3c:	6839      	ldr	r1, [r7, #0]
 8121c3e:	6878      	ldr	r0, [r7, #4]
 8121c40:	f7f9 ff2a 	bl	811ba98 <sys_arch_mbox_fetch>
 8121c44:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 8121c46:	4806      	ldr	r0, [pc, #24]	@ (8121c60 <tcpip_timeouts_mbox_fetch+0x68>)
 8121c48:	f7f9 ff8a 	bl	811bb60 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 8121c4c:	68bb      	ldr	r3, [r7, #8]
 8121c4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8121c52:	d102      	bne.n	8121c5a <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 8121c54:	f000 fa5a 	bl	812210c <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8121c58:	e7d3      	b.n	8121c02 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 8121c5a:	3710      	adds	r7, #16
 8121c5c:	46bd      	mov	sp, r7
 8121c5e:	bd80      	pop	{r7, pc}
 8121c60:	1000e4f4 	.word	0x1000e4f4

08121c64 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 8121c64:	b580      	push	{r7, lr}
 8121c66:	b084      	sub	sp, #16
 8121c68:	af00      	add	r7, sp, #0
 8121c6a:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 8121c6c:	4810      	ldr	r0, [pc, #64]	@ (8121cb0 <tcpip_thread+0x4c>)
 8121c6e:	f7f9 ff77 	bl	811bb60 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 8121c72:	4b10      	ldr	r3, [pc, #64]	@ (8121cb4 <tcpip_thread+0x50>)
 8121c74:	681b      	ldr	r3, [r3, #0]
 8121c76:	2b00      	cmp	r3, #0
 8121c78:	d005      	beq.n	8121c86 <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 8121c7a:	4b0e      	ldr	r3, [pc, #56]	@ (8121cb4 <tcpip_thread+0x50>)
 8121c7c:	681b      	ldr	r3, [r3, #0]
 8121c7e:	4a0e      	ldr	r2, [pc, #56]	@ (8121cb8 <tcpip_thread+0x54>)
 8121c80:	6812      	ldr	r2, [r2, #0]
 8121c82:	4610      	mov	r0, r2
 8121c84:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8121c86:	f107 030c 	add.w	r3, r7, #12
 8121c8a:	4619      	mov	r1, r3
 8121c8c:	480b      	ldr	r0, [pc, #44]	@ (8121cbc <tcpip_thread+0x58>)
 8121c8e:	f7ff ffb3 	bl	8121bf8 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 8121c92:	68fb      	ldr	r3, [r7, #12]
 8121c94:	2b00      	cmp	r3, #0
 8121c96:	d106      	bne.n	8121ca6 <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8121c98:	4b09      	ldr	r3, [pc, #36]	@ (8121cc0 <tcpip_thread+0x5c>)
 8121c9a:	2291      	movs	r2, #145	@ 0x91
 8121c9c:	4909      	ldr	r1, [pc, #36]	@ (8121cc4 <tcpip_thread+0x60>)
 8121c9e:	480a      	ldr	r0, [pc, #40]	@ (8121cc8 <tcpip_thread+0x64>)
 8121ca0:	f001 ffbc 	bl	8123c1c <iprintf>
      continue;
 8121ca4:	e003      	b.n	8121cae <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 8121ca6:	68fb      	ldr	r3, [r7, #12]
 8121ca8:	4618      	mov	r0, r3
 8121caa:	f000 f80f 	bl	8121ccc <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8121cae:	e7ea      	b.n	8121c86 <tcpip_thread+0x22>
 8121cb0:	1000e4f4 	.word	0x1000e4f4
 8121cb4:	1000e4e8 	.word	0x1000e4e8
 8121cb8:	1000e4ec 	.word	0x1000e4ec
 8121cbc:	1000e4f0 	.word	0x1000e4f0
 8121cc0:	08127d40 	.word	0x08127d40
 8121cc4:	08127db0 	.word	0x08127db0
 8121cc8:	08127dd0 	.word	0x08127dd0

08121ccc <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 8121ccc:	b580      	push	{r7, lr}
 8121cce:	b082      	sub	sp, #8
 8121cd0:	af00      	add	r7, sp, #0
 8121cd2:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 8121cd4:	687b      	ldr	r3, [r7, #4]
 8121cd6:	781b      	ldrb	r3, [r3, #0]
 8121cd8:	2b00      	cmp	r3, #0
 8121cda:	d002      	beq.n	8121ce2 <tcpip_thread_handle_msg+0x16>
 8121cdc:	2b01      	cmp	r3, #1
 8121cde:	d00b      	beq.n	8121cf8 <tcpip_thread_handle_msg+0x2c>
 8121ce0:	e011      	b.n	8121d06 <tcpip_thread_handle_msg+0x3a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8121ce2:	687b      	ldr	r3, [r7, #4]
 8121ce4:	685b      	ldr	r3, [r3, #4]
 8121ce6:	687a      	ldr	r2, [r7, #4]
 8121ce8:	6892      	ldr	r2, [r2, #8]
 8121cea:	4610      	mov	r0, r2
 8121cec:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8121cee:	6879      	ldr	r1, [r7, #4]
 8121cf0:	2008      	movs	r0, #8
 8121cf2:	f7f8 fd51 	bl	811a798 <memp_free>
      break;
 8121cf6:	e00d      	b.n	8121d14 <tcpip_thread_handle_msg+0x48>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8121cf8:	687b      	ldr	r3, [r7, #4]
 8121cfa:	685b      	ldr	r3, [r3, #4]
 8121cfc:	687a      	ldr	r2, [r7, #4]
 8121cfe:	6892      	ldr	r2, [r2, #8]
 8121d00:	4610      	mov	r0, r2
 8121d02:	4798      	blx	r3
      break;
 8121d04:	e006      	b.n	8121d14 <tcpip_thread_handle_msg+0x48>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8121d06:	4b05      	ldr	r3, [pc, #20]	@ (8121d1c <tcpip_thread_handle_msg+0x50>)
 8121d08:	22cf      	movs	r2, #207	@ 0xcf
 8121d0a:	4905      	ldr	r1, [pc, #20]	@ (8121d20 <tcpip_thread_handle_msg+0x54>)
 8121d0c:	4805      	ldr	r0, [pc, #20]	@ (8121d24 <tcpip_thread_handle_msg+0x58>)
 8121d0e:	f001 ff85 	bl	8123c1c <iprintf>
      break;
 8121d12:	bf00      	nop
  }
}
 8121d14:	bf00      	nop
 8121d16:	3708      	adds	r7, #8
 8121d18:	46bd      	mov	sp, r7
 8121d1a:	bd80      	pop	{r7, pc}
 8121d1c:	08127d40 	.word	0x08127d40
 8121d20:	08127db0 	.word	0x08127db0
 8121d24:	08127dd0 	.word	0x08127dd0

08121d28 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 8121d28:	b580      	push	{r7, lr}
 8121d2a:	b086      	sub	sp, #24
 8121d2c:	af00      	add	r7, sp, #0
 8121d2e:	60f8      	str	r0, [r7, #12]
 8121d30:	60b9      	str	r1, [r7, #8]
 8121d32:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING_INPUT
  err_t ret;
  LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_inpkt: PACKET %p/%p\n", (void *)p, (void *)inp));
  LOCK_TCPIP_CORE();
 8121d34:	4808      	ldr	r0, [pc, #32]	@ (8121d58 <tcpip_inpkt+0x30>)
 8121d36:	f7f9 ff13 	bl	811bb60 <sys_mutex_lock>
  ret = input_fn(p, inp);
 8121d3a:	687b      	ldr	r3, [r7, #4]
 8121d3c:	68b9      	ldr	r1, [r7, #8]
 8121d3e:	68f8      	ldr	r0, [r7, #12]
 8121d40:	4798      	blx	r3
 8121d42:	4603      	mov	r3, r0
 8121d44:	75fb      	strb	r3, [r7, #23]
  UNLOCK_TCPIP_CORE();
 8121d46:	4804      	ldr	r0, [pc, #16]	@ (8121d58 <tcpip_inpkt+0x30>)
 8121d48:	f7f9 ff19 	bl	811bb7e <sys_mutex_unlock>
  return ret;
 8121d4c:	f997 3017 	ldrsb.w	r3, [r7, #23]
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
    return ERR_MEM;
  }
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 8121d50:	4618      	mov	r0, r3
 8121d52:	3718      	adds	r7, #24
 8121d54:	46bd      	mov	sp, r7
 8121d56:	bd80      	pop	{r7, pc}
 8121d58:	1000e4f4 	.word	0x1000e4f4

08121d5c <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 8121d5c:	b580      	push	{r7, lr}
 8121d5e:	b082      	sub	sp, #8
 8121d60:	af00      	add	r7, sp, #0
 8121d62:	6078      	str	r0, [r7, #4]
 8121d64:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 8121d66:	683b      	ldr	r3, [r7, #0]
 8121d68:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8121d6c:	f003 0318 	and.w	r3, r3, #24
 8121d70:	2b00      	cmp	r3, #0
 8121d72:	d006      	beq.n	8121d82 <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 8121d74:	4a08      	ldr	r2, [pc, #32]	@ (8121d98 <tcpip_input+0x3c>)
 8121d76:	6839      	ldr	r1, [r7, #0]
 8121d78:	6878      	ldr	r0, [r7, #4]
 8121d7a:	f7ff ffd5 	bl	8121d28 <tcpip_inpkt>
 8121d7e:	4603      	mov	r3, r0
 8121d80:	e005      	b.n	8121d8e <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 8121d82:	4a06      	ldr	r2, [pc, #24]	@ (8121d9c <tcpip_input+0x40>)
 8121d84:	6839      	ldr	r1, [r7, #0]
 8121d86:	6878      	ldr	r0, [r7, #4]
 8121d88:	f7ff ffce 	bl	8121d28 <tcpip_inpkt>
 8121d8c:	4603      	mov	r3, r0
}
 8121d8e:	4618      	mov	r0, r3
 8121d90:	3708      	adds	r7, #8
 8121d92:	46bd      	mov	sp, r7
 8121d94:	bd80      	pop	{r7, pc}
 8121d96:	bf00      	nop
 8121d98:	08118155 	.word	0x08118155
 8121d9c:	08118945 	.word	0x08118945

08121da0 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 8121da0:	b580      	push	{r7, lr}
 8121da2:	b084      	sub	sp, #16
 8121da4:	af00      	add	r7, sp, #0
 8121da6:	6078      	str	r0, [r7, #4]
 8121da8:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8121daa:	4819      	ldr	r0, [pc, #100]	@ (8121e10 <tcpip_try_callback+0x70>)
 8121dac:	f7f9 fea5 	bl	811bafa <sys_mbox_valid>
 8121db0:	4603      	mov	r3, r0
 8121db2:	2b00      	cmp	r3, #0
 8121db4:	d106      	bne.n	8121dc4 <tcpip_try_callback+0x24>
 8121db6:	4b17      	ldr	r3, [pc, #92]	@ (8121e14 <tcpip_try_callback+0x74>)
 8121db8:	f240 125d 	movw	r2, #349	@ 0x15d
 8121dbc:	4916      	ldr	r1, [pc, #88]	@ (8121e18 <tcpip_try_callback+0x78>)
 8121dbe:	4817      	ldr	r0, [pc, #92]	@ (8121e1c <tcpip_try_callback+0x7c>)
 8121dc0:	f001 ff2c 	bl	8123c1c <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 8121dc4:	2008      	movs	r0, #8
 8121dc6:	f7f8 fc71 	bl	811a6ac <memp_malloc>
 8121dca:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 8121dcc:	68fb      	ldr	r3, [r7, #12]
 8121dce:	2b00      	cmp	r3, #0
 8121dd0:	d102      	bne.n	8121dd8 <tcpip_try_callback+0x38>
    return ERR_MEM;
 8121dd2:	f04f 33ff 	mov.w	r3, #4294967295
 8121dd6:	e017      	b.n	8121e08 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 8121dd8:	68fb      	ldr	r3, [r7, #12]
 8121dda:	2200      	movs	r2, #0
 8121ddc:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 8121dde:	68fb      	ldr	r3, [r7, #12]
 8121de0:	687a      	ldr	r2, [r7, #4]
 8121de2:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 8121de4:	68fb      	ldr	r3, [r7, #12]
 8121de6:	683a      	ldr	r2, [r7, #0]
 8121de8:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8121dea:	68f9      	ldr	r1, [r7, #12]
 8121dec:	4808      	ldr	r0, [pc, #32]	@ (8121e10 <tcpip_try_callback+0x70>)
 8121dee:	f7f9 fe39 	bl	811ba64 <sys_mbox_trypost>
 8121df2:	4603      	mov	r3, r0
 8121df4:	2b00      	cmp	r3, #0
 8121df6:	d006      	beq.n	8121e06 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 8121df8:	68f9      	ldr	r1, [r7, #12]
 8121dfa:	2008      	movs	r0, #8
 8121dfc:	f7f8 fccc 	bl	811a798 <memp_free>
    return ERR_MEM;
 8121e00:	f04f 33ff 	mov.w	r3, #4294967295
 8121e04:	e000      	b.n	8121e08 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 8121e06:	2300      	movs	r3, #0
}
 8121e08:	4618      	mov	r0, r3
 8121e0a:	3710      	adds	r7, #16
 8121e0c:	46bd      	mov	sp, r7
 8121e0e:	bd80      	pop	{r7, pc}
 8121e10:	1000e4f0 	.word	0x1000e4f0
 8121e14:	08127d40 	.word	0x08127d40
 8121e18:	08127df8 	.word	0x08127df8
 8121e1c:	08127dd0 	.word	0x08127dd0

08121e20 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 8121e20:	b580      	push	{r7, lr}
 8121e22:	b084      	sub	sp, #16
 8121e24:	af02      	add	r7, sp, #8
 8121e26:	6078      	str	r0, [r7, #4]
 8121e28:	6039      	str	r1, [r7, #0]
  lwip_init();
 8121e2a:	f7f6 fcd9 	bl	81187e0 <lwip_init>

  tcpip_init_done = initfunc;
 8121e2e:	4a17      	ldr	r2, [pc, #92]	@ (8121e8c <tcpip_init+0x6c>)
 8121e30:	687b      	ldr	r3, [r7, #4]
 8121e32:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 8121e34:	4a16      	ldr	r2, [pc, #88]	@ (8121e90 <tcpip_init+0x70>)
 8121e36:	683b      	ldr	r3, [r7, #0]
 8121e38:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8121e3a:	2106      	movs	r1, #6
 8121e3c:	4815      	ldr	r0, [pc, #84]	@ (8121e94 <tcpip_init+0x74>)
 8121e3e:	f7f9 fdf7 	bl	811ba30 <sys_mbox_new>
 8121e42:	4603      	mov	r3, r0
 8121e44:	2b00      	cmp	r3, #0
 8121e46:	d006      	beq.n	8121e56 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 8121e48:	4b13      	ldr	r3, [pc, #76]	@ (8121e98 <tcpip_init+0x78>)
 8121e4a:	f240 2261 	movw	r2, #609	@ 0x261
 8121e4e:	4913      	ldr	r1, [pc, #76]	@ (8121e9c <tcpip_init+0x7c>)
 8121e50:	4813      	ldr	r0, [pc, #76]	@ (8121ea0 <tcpip_init+0x80>)
 8121e52:	f001 fee3 	bl	8123c1c <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 8121e56:	4813      	ldr	r0, [pc, #76]	@ (8121ea4 <tcpip_init+0x84>)
 8121e58:	f7f9 fe6c 	bl	811bb34 <sys_mutex_new>
 8121e5c:	4603      	mov	r3, r0
 8121e5e:	2b00      	cmp	r3, #0
 8121e60:	d006      	beq.n	8121e70 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 8121e62:	4b0d      	ldr	r3, [pc, #52]	@ (8121e98 <tcpip_init+0x78>)
 8121e64:	f240 2265 	movw	r2, #613	@ 0x265
 8121e68:	490f      	ldr	r1, [pc, #60]	@ (8121ea8 <tcpip_init+0x88>)
 8121e6a:	480d      	ldr	r0, [pc, #52]	@ (8121ea0 <tcpip_init+0x80>)
 8121e6c:	f001 fed6 	bl	8123c1c <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 8121e70:	2332      	movs	r3, #50	@ 0x32
 8121e72:	9300      	str	r3, [sp, #0]
 8121e74:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8121e78:	2200      	movs	r2, #0
 8121e7a:	490c      	ldr	r1, [pc, #48]	@ (8121eac <tcpip_init+0x8c>)
 8121e7c:	480c      	ldr	r0, [pc, #48]	@ (8121eb0 <tcpip_init+0x90>)
 8121e7e:	f7f9 fe8b 	bl	811bb98 <sys_thread_new>
}
 8121e82:	bf00      	nop
 8121e84:	3708      	adds	r7, #8
 8121e86:	46bd      	mov	sp, r7
 8121e88:	bd80      	pop	{r7, pc}
 8121e8a:	bf00      	nop
 8121e8c:	1000e4e8 	.word	0x1000e4e8
 8121e90:	1000e4ec 	.word	0x1000e4ec
 8121e94:	1000e4f0 	.word	0x1000e4f0
 8121e98:	08127d40 	.word	0x08127d40
 8121e9c:	08127e08 	.word	0x08127e08
 8121ea0:	08127dd0 	.word	0x08127dd0
 8121ea4:	1000e4f4 	.word	0x1000e4f4
 8121ea8:	08127e2c 	.word	0x08127e2c
 8121eac:	08121c65 	.word	0x08121c65
 8121eb0:	08127e50 	.word	0x08127e50

08121eb4 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8121eb4:	b580      	push	{r7, lr}
 8121eb6:	b082      	sub	sp, #8
 8121eb8:	af00      	add	r7, sp, #0
 8121eba:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8121ebc:	f7f9 fef4 	bl	811bca8 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8121ec0:	4b0a      	ldr	r3, [pc, #40]	@ (8121eec <tcpip_tcp_timer+0x38>)
 8121ec2:	681b      	ldr	r3, [r3, #0]
 8121ec4:	2b00      	cmp	r3, #0
 8121ec6:	d103      	bne.n	8121ed0 <tcpip_tcp_timer+0x1c>
 8121ec8:	4b09      	ldr	r3, [pc, #36]	@ (8121ef0 <tcpip_tcp_timer+0x3c>)
 8121eca:	681b      	ldr	r3, [r3, #0]
 8121ecc:	2b00      	cmp	r3, #0
 8121ece:	d005      	beq.n	8121edc <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8121ed0:	2200      	movs	r2, #0
 8121ed2:	4908      	ldr	r1, [pc, #32]	@ (8121ef4 <tcpip_tcp_timer+0x40>)
 8121ed4:	200a      	movs	r0, #10
 8121ed6:	f000 f8f3 	bl	81220c0 <sys_timeout>
 8121eda:	e003      	b.n	8121ee4 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8121edc:	4b06      	ldr	r3, [pc, #24]	@ (8121ef8 <tcpip_tcp_timer+0x44>)
 8121ede:	2200      	movs	r2, #0
 8121ee0:	601a      	str	r2, [r3, #0]
  }
}
 8121ee2:	bf00      	nop
 8121ee4:	bf00      	nop
 8121ee6:	3708      	adds	r7, #8
 8121ee8:	46bd      	mov	sp, r7
 8121eea:	bd80      	pop	{r7, pc}
 8121eec:	1000e4a4 	.word	0x1000e4a4
 8121ef0:	1000e4a8 	.word	0x1000e4a8
 8121ef4:	08121eb5 	.word	0x08121eb5
 8121ef8:	1000e500 	.word	0x1000e500

08121efc <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8121efc:	b580      	push	{r7, lr}
 8121efe:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8121f00:	4b0a      	ldr	r3, [pc, #40]	@ (8121f2c <tcp_timer_needed+0x30>)
 8121f02:	681b      	ldr	r3, [r3, #0]
 8121f04:	2b00      	cmp	r3, #0
 8121f06:	d10f      	bne.n	8121f28 <tcp_timer_needed+0x2c>
 8121f08:	4b09      	ldr	r3, [pc, #36]	@ (8121f30 <tcp_timer_needed+0x34>)
 8121f0a:	681b      	ldr	r3, [r3, #0]
 8121f0c:	2b00      	cmp	r3, #0
 8121f0e:	d103      	bne.n	8121f18 <tcp_timer_needed+0x1c>
 8121f10:	4b08      	ldr	r3, [pc, #32]	@ (8121f34 <tcp_timer_needed+0x38>)
 8121f12:	681b      	ldr	r3, [r3, #0]
 8121f14:	2b00      	cmp	r3, #0
 8121f16:	d007      	beq.n	8121f28 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8121f18:	4b04      	ldr	r3, [pc, #16]	@ (8121f2c <tcp_timer_needed+0x30>)
 8121f1a:	2201      	movs	r2, #1
 8121f1c:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8121f1e:	2200      	movs	r2, #0
 8121f20:	4905      	ldr	r1, [pc, #20]	@ (8121f38 <tcp_timer_needed+0x3c>)
 8121f22:	200a      	movs	r0, #10
 8121f24:	f000 f8cc 	bl	81220c0 <sys_timeout>
  }
}
 8121f28:	bf00      	nop
 8121f2a:	bd80      	pop	{r7, pc}
 8121f2c:	1000e500 	.word	0x1000e500
 8121f30:	1000e4a4 	.word	0x1000e4a4
 8121f34:	1000e4a8 	.word	0x1000e4a8
 8121f38:	08121eb5 	.word	0x08121eb5

08121f3c <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8121f3c:	b580      	push	{r7, lr}
 8121f3e:	b086      	sub	sp, #24
 8121f40:	af00      	add	r7, sp, #0
 8121f42:	60f8      	str	r0, [r7, #12]
 8121f44:	60b9      	str	r1, [r7, #8]
 8121f46:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8121f48:	200a      	movs	r0, #10
 8121f4a:	f7f8 fbaf 	bl	811a6ac <memp_malloc>
 8121f4e:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8121f50:	693b      	ldr	r3, [r7, #16]
 8121f52:	2b00      	cmp	r3, #0
 8121f54:	d109      	bne.n	8121f6a <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8121f56:	693b      	ldr	r3, [r7, #16]
 8121f58:	2b00      	cmp	r3, #0
 8121f5a:	d151      	bne.n	8122000 <sys_timeout_abs+0xc4>
 8121f5c:	4b2a      	ldr	r3, [pc, #168]	@ (8122008 <sys_timeout_abs+0xcc>)
 8121f5e:	22be      	movs	r2, #190	@ 0xbe
 8121f60:	492a      	ldr	r1, [pc, #168]	@ (812200c <sys_timeout_abs+0xd0>)
 8121f62:	482b      	ldr	r0, [pc, #172]	@ (8122010 <sys_timeout_abs+0xd4>)
 8121f64:	f001 fe5a 	bl	8123c1c <iprintf>
    return;
 8121f68:	e04a      	b.n	8122000 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8121f6a:	693b      	ldr	r3, [r7, #16]
 8121f6c:	2200      	movs	r2, #0
 8121f6e:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8121f70:	693b      	ldr	r3, [r7, #16]
 8121f72:	68ba      	ldr	r2, [r7, #8]
 8121f74:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8121f76:	693b      	ldr	r3, [r7, #16]
 8121f78:	687a      	ldr	r2, [r7, #4]
 8121f7a:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8121f7c:	693b      	ldr	r3, [r7, #16]
 8121f7e:	68fa      	ldr	r2, [r7, #12]
 8121f80:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8121f82:	4b24      	ldr	r3, [pc, #144]	@ (8122014 <sys_timeout_abs+0xd8>)
 8121f84:	681b      	ldr	r3, [r3, #0]
 8121f86:	2b00      	cmp	r3, #0
 8121f88:	d103      	bne.n	8121f92 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8121f8a:	4a22      	ldr	r2, [pc, #136]	@ (8122014 <sys_timeout_abs+0xd8>)
 8121f8c:	693b      	ldr	r3, [r7, #16]
 8121f8e:	6013      	str	r3, [r2, #0]
    return;
 8121f90:	e037      	b.n	8122002 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8121f92:	693b      	ldr	r3, [r7, #16]
 8121f94:	685a      	ldr	r2, [r3, #4]
 8121f96:	4b1f      	ldr	r3, [pc, #124]	@ (8122014 <sys_timeout_abs+0xd8>)
 8121f98:	681b      	ldr	r3, [r3, #0]
 8121f9a:	685b      	ldr	r3, [r3, #4]
 8121f9c:	1ad3      	subs	r3, r2, r3
 8121f9e:	0fdb      	lsrs	r3, r3, #31
 8121fa0:	f003 0301 	and.w	r3, r3, #1
 8121fa4:	b2db      	uxtb	r3, r3
 8121fa6:	2b00      	cmp	r3, #0
 8121fa8:	d007      	beq.n	8121fba <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8121faa:	4b1a      	ldr	r3, [pc, #104]	@ (8122014 <sys_timeout_abs+0xd8>)
 8121fac:	681a      	ldr	r2, [r3, #0]
 8121fae:	693b      	ldr	r3, [r7, #16]
 8121fb0:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8121fb2:	4a18      	ldr	r2, [pc, #96]	@ (8122014 <sys_timeout_abs+0xd8>)
 8121fb4:	693b      	ldr	r3, [r7, #16]
 8121fb6:	6013      	str	r3, [r2, #0]
 8121fb8:	e023      	b.n	8122002 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8121fba:	4b16      	ldr	r3, [pc, #88]	@ (8122014 <sys_timeout_abs+0xd8>)
 8121fbc:	681b      	ldr	r3, [r3, #0]
 8121fbe:	617b      	str	r3, [r7, #20]
 8121fc0:	e01a      	b.n	8121ff8 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8121fc2:	697b      	ldr	r3, [r7, #20]
 8121fc4:	681b      	ldr	r3, [r3, #0]
 8121fc6:	2b00      	cmp	r3, #0
 8121fc8:	d00b      	beq.n	8121fe2 <sys_timeout_abs+0xa6>
 8121fca:	693b      	ldr	r3, [r7, #16]
 8121fcc:	685a      	ldr	r2, [r3, #4]
 8121fce:	697b      	ldr	r3, [r7, #20]
 8121fd0:	681b      	ldr	r3, [r3, #0]
 8121fd2:	685b      	ldr	r3, [r3, #4]
 8121fd4:	1ad3      	subs	r3, r2, r3
 8121fd6:	0fdb      	lsrs	r3, r3, #31
 8121fd8:	f003 0301 	and.w	r3, r3, #1
 8121fdc:	b2db      	uxtb	r3, r3
 8121fde:	2b00      	cmp	r3, #0
 8121fe0:	d007      	beq.n	8121ff2 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8121fe2:	697b      	ldr	r3, [r7, #20]
 8121fe4:	681a      	ldr	r2, [r3, #0]
 8121fe6:	693b      	ldr	r3, [r7, #16]
 8121fe8:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8121fea:	697b      	ldr	r3, [r7, #20]
 8121fec:	693a      	ldr	r2, [r7, #16]
 8121fee:	601a      	str	r2, [r3, #0]
        break;
 8121ff0:	e007      	b.n	8122002 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8121ff2:	697b      	ldr	r3, [r7, #20]
 8121ff4:	681b      	ldr	r3, [r3, #0]
 8121ff6:	617b      	str	r3, [r7, #20]
 8121ff8:	697b      	ldr	r3, [r7, #20]
 8121ffa:	2b00      	cmp	r3, #0
 8121ffc:	d1e1      	bne.n	8121fc2 <sys_timeout_abs+0x86>
 8121ffe:	e000      	b.n	8122002 <sys_timeout_abs+0xc6>
    return;
 8122000:	bf00      	nop
      }
    }
  }
}
 8122002:	3718      	adds	r7, #24
 8122004:	46bd      	mov	sp, r7
 8122006:	bd80      	pop	{r7, pc}
 8122008:	08127e60 	.word	0x08127e60
 812200c:	08127ed4 	.word	0x08127ed4
 8122010:	08127f14 	.word	0x08127f14
 8122014:	1000e4f8 	.word	0x1000e4f8

08122018 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8122018:	b580      	push	{r7, lr}
 812201a:	b086      	sub	sp, #24
 812201c:	af00      	add	r7, sp, #0
 812201e:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8122020:	687b      	ldr	r3, [r7, #4]
 8122022:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8122024:	697b      	ldr	r3, [r7, #20]
 8122026:	685b      	ldr	r3, [r3, #4]
 8122028:	4798      	blx	r3

  now = sys_now();
 812202a:	f7e7 f923 	bl	8109274 <sys_now>
 812202e:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8122030:	697b      	ldr	r3, [r7, #20]
 8122032:	681a      	ldr	r2, [r3, #0]
 8122034:	4b0f      	ldr	r3, [pc, #60]	@ (8122074 <lwip_cyclic_timer+0x5c>)
 8122036:	681b      	ldr	r3, [r3, #0]
 8122038:	4413      	add	r3, r2
 812203a:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 812203c:	68fa      	ldr	r2, [r7, #12]
 812203e:	693b      	ldr	r3, [r7, #16]
 8122040:	1ad3      	subs	r3, r2, r3
 8122042:	0fdb      	lsrs	r3, r3, #31
 8122044:	f003 0301 	and.w	r3, r3, #1
 8122048:	b2db      	uxtb	r3, r3
 812204a:	2b00      	cmp	r3, #0
 812204c:	d009      	beq.n	8122062 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 812204e:	697b      	ldr	r3, [r7, #20]
 8122050:	681a      	ldr	r2, [r3, #0]
 8122052:	693b      	ldr	r3, [r7, #16]
 8122054:	4413      	add	r3, r2
 8122056:	687a      	ldr	r2, [r7, #4]
 8122058:	4907      	ldr	r1, [pc, #28]	@ (8122078 <lwip_cyclic_timer+0x60>)
 812205a:	4618      	mov	r0, r3
 812205c:	f7ff ff6e 	bl	8121f3c <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8122060:	e004      	b.n	812206c <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8122062:	687a      	ldr	r2, [r7, #4]
 8122064:	4904      	ldr	r1, [pc, #16]	@ (8122078 <lwip_cyclic_timer+0x60>)
 8122066:	68f8      	ldr	r0, [r7, #12]
 8122068:	f7ff ff68 	bl	8121f3c <sys_timeout_abs>
}
 812206c:	bf00      	nop
 812206e:	3718      	adds	r7, #24
 8122070:	46bd      	mov	sp, r7
 8122072:	bd80      	pop	{r7, pc}
 8122074:	1000e4fc 	.word	0x1000e4fc
 8122078:	08122019 	.word	0x08122019

0812207c <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 812207c:	b580      	push	{r7, lr}
 812207e:	b082      	sub	sp, #8
 8122080:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8122082:	2301      	movs	r3, #1
 8122084:	607b      	str	r3, [r7, #4]
 8122086:	e00e      	b.n	81220a6 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8122088:	4a0b      	ldr	r2, [pc, #44]	@ (81220b8 <sys_timeouts_init+0x3c>)
 812208a:	687b      	ldr	r3, [r7, #4]
 812208c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8122090:	687b      	ldr	r3, [r7, #4]
 8122092:	00db      	lsls	r3, r3, #3
 8122094:	4a08      	ldr	r2, [pc, #32]	@ (81220b8 <sys_timeouts_init+0x3c>)
 8122096:	4413      	add	r3, r2
 8122098:	461a      	mov	r2, r3
 812209a:	4908      	ldr	r1, [pc, #32]	@ (81220bc <sys_timeouts_init+0x40>)
 812209c:	f000 f810 	bl	81220c0 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 81220a0:	687b      	ldr	r3, [r7, #4]
 81220a2:	3301      	adds	r3, #1
 81220a4:	607b      	str	r3, [r7, #4]
 81220a6:	687b      	ldr	r3, [r7, #4]
 81220a8:	2b02      	cmp	r3, #2
 81220aa:	d9ed      	bls.n	8122088 <sys_timeouts_init+0xc>
  }
}
 81220ac:	bf00      	nop
 81220ae:	bf00      	nop
 81220b0:	3708      	adds	r7, #8
 81220b2:	46bd      	mov	sp, r7
 81220b4:	bd80      	pop	{r7, pc}
 81220b6:	bf00      	nop
 81220b8:	08128530 	.word	0x08128530
 81220bc:	08122019 	.word	0x08122019

081220c0 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 81220c0:	b580      	push	{r7, lr}
 81220c2:	b086      	sub	sp, #24
 81220c4:	af00      	add	r7, sp, #0
 81220c6:	60f8      	str	r0, [r7, #12]
 81220c8:	60b9      	str	r1, [r7, #8]
 81220ca:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 81220cc:	68fb      	ldr	r3, [r7, #12]
 81220ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 81220d2:	d306      	bcc.n	81220e2 <sys_timeout+0x22>
 81220d4:	4b0a      	ldr	r3, [pc, #40]	@ (8122100 <sys_timeout+0x40>)
 81220d6:	f240 1229 	movw	r2, #297	@ 0x129
 81220da:	490a      	ldr	r1, [pc, #40]	@ (8122104 <sys_timeout+0x44>)
 81220dc:	480a      	ldr	r0, [pc, #40]	@ (8122108 <sys_timeout+0x48>)
 81220de:	f001 fd9d 	bl	8123c1c <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 81220e2:	f7e7 f8c7 	bl	8109274 <sys_now>
 81220e6:	4602      	mov	r2, r0
 81220e8:	68fb      	ldr	r3, [r7, #12]
 81220ea:	4413      	add	r3, r2
 81220ec:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 81220ee:	687a      	ldr	r2, [r7, #4]
 81220f0:	68b9      	ldr	r1, [r7, #8]
 81220f2:	6978      	ldr	r0, [r7, #20]
 81220f4:	f7ff ff22 	bl	8121f3c <sys_timeout_abs>
#endif
}
 81220f8:	bf00      	nop
 81220fa:	3718      	adds	r7, #24
 81220fc:	46bd      	mov	sp, r7
 81220fe:	bd80      	pop	{r7, pc}
 8122100:	08127e60 	.word	0x08127e60
 8122104:	08127f3c 	.word	0x08127f3c
 8122108:	08127f14 	.word	0x08127f14

0812210c <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 812210c:	b580      	push	{r7, lr}
 812210e:	b084      	sub	sp, #16
 8122110:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8122112:	f7e7 f8af 	bl	8109274 <sys_now>
 8122116:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8122118:	4b17      	ldr	r3, [pc, #92]	@ (8122178 <sys_check_timeouts+0x6c>)
 812211a:	681b      	ldr	r3, [r3, #0]
 812211c:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 812211e:	68bb      	ldr	r3, [r7, #8]
 8122120:	2b00      	cmp	r3, #0
 8122122:	d022      	beq.n	812216a <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8122124:	68bb      	ldr	r3, [r7, #8]
 8122126:	685b      	ldr	r3, [r3, #4]
 8122128:	68fa      	ldr	r2, [r7, #12]
 812212a:	1ad3      	subs	r3, r2, r3
 812212c:	0fdb      	lsrs	r3, r3, #31
 812212e:	f003 0301 	and.w	r3, r3, #1
 8122132:	b2db      	uxtb	r3, r3
 8122134:	2b00      	cmp	r3, #0
 8122136:	d11a      	bne.n	812216e <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8122138:	68bb      	ldr	r3, [r7, #8]
 812213a:	681b      	ldr	r3, [r3, #0]
 812213c:	4a0e      	ldr	r2, [pc, #56]	@ (8122178 <sys_check_timeouts+0x6c>)
 812213e:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8122140:	68bb      	ldr	r3, [r7, #8]
 8122142:	689b      	ldr	r3, [r3, #8]
 8122144:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8122146:	68bb      	ldr	r3, [r7, #8]
 8122148:	68db      	ldr	r3, [r3, #12]
 812214a:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 812214c:	68bb      	ldr	r3, [r7, #8]
 812214e:	685b      	ldr	r3, [r3, #4]
 8122150:	4a0a      	ldr	r2, [pc, #40]	@ (812217c <sys_check_timeouts+0x70>)
 8122152:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8122154:	68b9      	ldr	r1, [r7, #8]
 8122156:	200a      	movs	r0, #10
 8122158:	f7f8 fb1e 	bl	811a798 <memp_free>
    if (handler != NULL) {
 812215c:	687b      	ldr	r3, [r7, #4]
 812215e:	2b00      	cmp	r3, #0
 8122160:	d0da      	beq.n	8122118 <sys_check_timeouts+0xc>
      handler(arg);
 8122162:	687b      	ldr	r3, [r7, #4]
 8122164:	6838      	ldr	r0, [r7, #0]
 8122166:	4798      	blx	r3
  do {
 8122168:	e7d6      	b.n	8122118 <sys_check_timeouts+0xc>
      return;
 812216a:	bf00      	nop
 812216c:	e000      	b.n	8122170 <sys_check_timeouts+0x64>
      return;
 812216e:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8122170:	3710      	adds	r7, #16
 8122172:	46bd      	mov	sp, r7
 8122174:	bd80      	pop	{r7, pc}
 8122176:	bf00      	nop
 8122178:	1000e4f8 	.word	0x1000e4f8
 812217c:	1000e4fc 	.word	0x1000e4fc

08122180 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 8122180:	b580      	push	{r7, lr}
 8122182:	b082      	sub	sp, #8
 8122184:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 8122186:	4b16      	ldr	r3, [pc, #88]	@ (81221e0 <sys_timeouts_sleeptime+0x60>)
 8122188:	681b      	ldr	r3, [r3, #0]
 812218a:	2b00      	cmp	r3, #0
 812218c:	d102      	bne.n	8122194 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 812218e:	f04f 33ff 	mov.w	r3, #4294967295
 8122192:	e020      	b.n	81221d6 <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 8122194:	f7e7 f86e 	bl	8109274 <sys_now>
 8122198:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 812219a:	4b11      	ldr	r3, [pc, #68]	@ (81221e0 <sys_timeouts_sleeptime+0x60>)
 812219c:	681b      	ldr	r3, [r3, #0]
 812219e:	685a      	ldr	r2, [r3, #4]
 81221a0:	687b      	ldr	r3, [r7, #4]
 81221a2:	1ad3      	subs	r3, r2, r3
 81221a4:	0fdb      	lsrs	r3, r3, #31
 81221a6:	f003 0301 	and.w	r3, r3, #1
 81221aa:	b2db      	uxtb	r3, r3
 81221ac:	2b00      	cmp	r3, #0
 81221ae:	d001      	beq.n	81221b4 <sys_timeouts_sleeptime+0x34>
    return 0;
 81221b0:	2300      	movs	r3, #0
 81221b2:	e010      	b.n	81221d6 <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 81221b4:	4b0a      	ldr	r3, [pc, #40]	@ (81221e0 <sys_timeouts_sleeptime+0x60>)
 81221b6:	681b      	ldr	r3, [r3, #0]
 81221b8:	685a      	ldr	r2, [r3, #4]
 81221ba:	687b      	ldr	r3, [r7, #4]
 81221bc:	1ad3      	subs	r3, r2, r3
 81221be:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 81221c0:	683b      	ldr	r3, [r7, #0]
 81221c2:	2b00      	cmp	r3, #0
 81221c4:	da06      	bge.n	81221d4 <sys_timeouts_sleeptime+0x54>
 81221c6:	4b07      	ldr	r3, [pc, #28]	@ (81221e4 <sys_timeouts_sleeptime+0x64>)
 81221c8:	f44f 72dc 	mov.w	r2, #440	@ 0x1b8
 81221cc:	4906      	ldr	r1, [pc, #24]	@ (81221e8 <sys_timeouts_sleeptime+0x68>)
 81221ce:	4807      	ldr	r0, [pc, #28]	@ (81221ec <sys_timeouts_sleeptime+0x6c>)
 81221d0:	f001 fd24 	bl	8123c1c <iprintf>
    return ret;
 81221d4:	683b      	ldr	r3, [r7, #0]
  }
}
 81221d6:	4618      	mov	r0, r3
 81221d8:	3708      	adds	r7, #8
 81221da:	46bd      	mov	sp, r7
 81221dc:	bd80      	pop	{r7, pc}
 81221de:	bf00      	nop
 81221e0:	1000e4f8 	.word	0x1000e4f8
 81221e4:	08127e60 	.word	0x08127e60
 81221e8:	08127f74 	.word	0x08127f74
 81221ec:	08127f14 	.word	0x08127f14

081221f0 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 81221f0:	b580      	push	{r7, lr}
 81221f2:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 81221f4:	f000 ffa2 	bl	812313c <rand>
 81221f8:	4603      	mov	r3, r0
 81221fa:	b29b      	uxth	r3, r3
 81221fc:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8122200:	b29b      	uxth	r3, r3
 8122202:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 8122206:	b29a      	uxth	r2, r3
 8122208:	4b01      	ldr	r3, [pc, #4]	@ (8122210 <udp_init+0x20>)
 812220a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 812220c:	bf00      	nop
 812220e:	bd80      	pop	{r7, pc}
 8122210:	10000030 	.word	0x10000030

08122214 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8122214:	b480      	push	{r7}
 8122216:	b083      	sub	sp, #12
 8122218:	af00      	add	r7, sp, #0
  u16_t n = 0;
 812221a:	2300      	movs	r3, #0
 812221c:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 812221e:	4b17      	ldr	r3, [pc, #92]	@ (812227c <udp_new_port+0x68>)
 8122220:	881b      	ldrh	r3, [r3, #0]
 8122222:	1c5a      	adds	r2, r3, #1
 8122224:	b291      	uxth	r1, r2
 8122226:	4a15      	ldr	r2, [pc, #84]	@ (812227c <udp_new_port+0x68>)
 8122228:	8011      	strh	r1, [r2, #0]
 812222a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 812222e:	4293      	cmp	r3, r2
 8122230:	d103      	bne.n	812223a <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 8122232:	4b12      	ldr	r3, [pc, #72]	@ (812227c <udp_new_port+0x68>)
 8122234:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 8122238:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 812223a:	4b11      	ldr	r3, [pc, #68]	@ (8122280 <udp_new_port+0x6c>)
 812223c:	681b      	ldr	r3, [r3, #0]
 812223e:	603b      	str	r3, [r7, #0]
 8122240:	e011      	b.n	8122266 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 8122242:	683b      	ldr	r3, [r7, #0]
 8122244:	8a5a      	ldrh	r2, [r3, #18]
 8122246:	4b0d      	ldr	r3, [pc, #52]	@ (812227c <udp_new_port+0x68>)
 8122248:	881b      	ldrh	r3, [r3, #0]
 812224a:	429a      	cmp	r2, r3
 812224c:	d108      	bne.n	8122260 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 812224e:	88fb      	ldrh	r3, [r7, #6]
 8122250:	3301      	adds	r3, #1
 8122252:	80fb      	strh	r3, [r7, #6]
 8122254:	88fb      	ldrh	r3, [r7, #6]
 8122256:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 812225a:	d3e0      	bcc.n	812221e <udp_new_port+0xa>
        return 0;
 812225c:	2300      	movs	r3, #0
 812225e:	e007      	b.n	8122270 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8122260:	683b      	ldr	r3, [r7, #0]
 8122262:	68db      	ldr	r3, [r3, #12]
 8122264:	603b      	str	r3, [r7, #0]
 8122266:	683b      	ldr	r3, [r7, #0]
 8122268:	2b00      	cmp	r3, #0
 812226a:	d1ea      	bne.n	8122242 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 812226c:	4b03      	ldr	r3, [pc, #12]	@ (812227c <udp_new_port+0x68>)
 812226e:	881b      	ldrh	r3, [r3, #0]
}
 8122270:	4618      	mov	r0, r3
 8122272:	370c      	adds	r7, #12
 8122274:	46bd      	mov	sp, r7
 8122276:	f85d 7b04 	ldr.w	r7, [sp], #4
 812227a:	4770      	bx	lr
 812227c:	10000030 	.word	0x10000030
 8122280:	1000e504 	.word	0x1000e504

08122284 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8122284:	b580      	push	{r7, lr}
 8122286:	b084      	sub	sp, #16
 8122288:	af00      	add	r7, sp, #0
 812228a:	60f8      	str	r0, [r7, #12]
 812228c:	60b9      	str	r1, [r7, #8]
 812228e:	4613      	mov	r3, r2
 8122290:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8122292:	68fb      	ldr	r3, [r7, #12]
 8122294:	2b00      	cmp	r3, #0
 8122296:	d105      	bne.n	81222a4 <udp_input_local_match+0x20>
 8122298:	4b27      	ldr	r3, [pc, #156]	@ (8122338 <udp_input_local_match+0xb4>)
 812229a:	2287      	movs	r2, #135	@ 0x87
 812229c:	4927      	ldr	r1, [pc, #156]	@ (812233c <udp_input_local_match+0xb8>)
 812229e:	4828      	ldr	r0, [pc, #160]	@ (8122340 <udp_input_local_match+0xbc>)
 81222a0:	f001 fcbc 	bl	8123c1c <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 81222a4:	68bb      	ldr	r3, [r7, #8]
 81222a6:	2b00      	cmp	r3, #0
 81222a8:	d105      	bne.n	81222b6 <udp_input_local_match+0x32>
 81222aa:	4b23      	ldr	r3, [pc, #140]	@ (8122338 <udp_input_local_match+0xb4>)
 81222ac:	2288      	movs	r2, #136	@ 0x88
 81222ae:	4925      	ldr	r1, [pc, #148]	@ (8122344 <udp_input_local_match+0xc0>)
 81222b0:	4823      	ldr	r0, [pc, #140]	@ (8122340 <udp_input_local_match+0xbc>)
 81222b2:	f001 fcb3 	bl	8123c1c <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 81222b6:	68fb      	ldr	r3, [r7, #12]
 81222b8:	7a1b      	ldrb	r3, [r3, #8]
 81222ba:	2b00      	cmp	r3, #0
 81222bc:	d00b      	beq.n	81222d6 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 81222be:	68fb      	ldr	r3, [r7, #12]
 81222c0:	7a1a      	ldrb	r2, [r3, #8]
 81222c2:	4b21      	ldr	r3, [pc, #132]	@ (8122348 <udp_input_local_match+0xc4>)
 81222c4:	685b      	ldr	r3, [r3, #4]
 81222c6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 81222ca:	3301      	adds	r3, #1
 81222cc:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 81222ce:	429a      	cmp	r2, r3
 81222d0:	d001      	beq.n	81222d6 <udp_input_local_match+0x52>
    return 0;
 81222d2:	2300      	movs	r3, #0
 81222d4:	e02b      	b.n	812232e <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 81222d6:	79fb      	ldrb	r3, [r7, #7]
 81222d8:	2b00      	cmp	r3, #0
 81222da:	d018      	beq.n	812230e <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 81222dc:	68fb      	ldr	r3, [r7, #12]
 81222de:	2b00      	cmp	r3, #0
 81222e0:	d013      	beq.n	812230a <udp_input_local_match+0x86>
 81222e2:	68fb      	ldr	r3, [r7, #12]
 81222e4:	681b      	ldr	r3, [r3, #0]
 81222e6:	2b00      	cmp	r3, #0
 81222e8:	d00f      	beq.n	812230a <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 81222ea:	4b17      	ldr	r3, [pc, #92]	@ (8122348 <udp_input_local_match+0xc4>)
 81222ec:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 81222ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 81222f2:	d00a      	beq.n	812230a <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 81222f4:	68fb      	ldr	r3, [r7, #12]
 81222f6:	681a      	ldr	r2, [r3, #0]
 81222f8:	4b13      	ldr	r3, [pc, #76]	@ (8122348 <udp_input_local_match+0xc4>)
 81222fa:	695b      	ldr	r3, [r3, #20]
 81222fc:	405a      	eors	r2, r3
 81222fe:	68bb      	ldr	r3, [r7, #8]
 8122300:	3308      	adds	r3, #8
 8122302:	681b      	ldr	r3, [r3, #0]
 8122304:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8122306:	2b00      	cmp	r3, #0
 8122308:	d110      	bne.n	812232c <udp_input_local_match+0xa8>
          return 1;
 812230a:	2301      	movs	r3, #1
 812230c:	e00f      	b.n	812232e <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 812230e:	68fb      	ldr	r3, [r7, #12]
 8122310:	2b00      	cmp	r3, #0
 8122312:	d009      	beq.n	8122328 <udp_input_local_match+0xa4>
 8122314:	68fb      	ldr	r3, [r7, #12]
 8122316:	681b      	ldr	r3, [r3, #0]
 8122318:	2b00      	cmp	r3, #0
 812231a:	d005      	beq.n	8122328 <udp_input_local_match+0xa4>
 812231c:	68fb      	ldr	r3, [r7, #12]
 812231e:	681a      	ldr	r2, [r3, #0]
 8122320:	4b09      	ldr	r3, [pc, #36]	@ (8122348 <udp_input_local_match+0xc4>)
 8122322:	695b      	ldr	r3, [r3, #20]
 8122324:	429a      	cmp	r2, r3
 8122326:	d101      	bne.n	812232c <udp_input_local_match+0xa8>
        return 1;
 8122328:	2301      	movs	r3, #1
 812232a:	e000      	b.n	812232e <udp_input_local_match+0xaa>
      }
  }

  return 0;
 812232c:	2300      	movs	r3, #0
}
 812232e:	4618      	mov	r0, r3
 8122330:	3710      	adds	r7, #16
 8122332:	46bd      	mov	sp, r7
 8122334:	bd80      	pop	{r7, pc}
 8122336:	bf00      	nop
 8122338:	08127f88 	.word	0x08127f88
 812233c:	08127ff8 	.word	0x08127ff8
 8122340:	0812801c 	.word	0x0812801c
 8122344:	08128044 	.word	0x08128044
 8122348:	1000b300 	.word	0x1000b300

0812234c <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 812234c:	b590      	push	{r4, r7, lr}
 812234e:	b08d      	sub	sp, #52	@ 0x34
 8122350:	af02      	add	r7, sp, #8
 8122352:	6078      	str	r0, [r7, #4]
 8122354:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8122356:	2300      	movs	r3, #0
 8122358:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 812235a:	687b      	ldr	r3, [r7, #4]
 812235c:	2b00      	cmp	r3, #0
 812235e:	d105      	bne.n	812236c <udp_input+0x20>
 8122360:	4b7c      	ldr	r3, [pc, #496]	@ (8122554 <udp_input+0x208>)
 8122362:	22cf      	movs	r2, #207	@ 0xcf
 8122364:	497c      	ldr	r1, [pc, #496]	@ (8122558 <udp_input+0x20c>)
 8122366:	487d      	ldr	r0, [pc, #500]	@ (812255c <udp_input+0x210>)
 8122368:	f001 fc58 	bl	8123c1c <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 812236c:	683b      	ldr	r3, [r7, #0]
 812236e:	2b00      	cmp	r3, #0
 8122370:	d105      	bne.n	812237e <udp_input+0x32>
 8122372:	4b78      	ldr	r3, [pc, #480]	@ (8122554 <udp_input+0x208>)
 8122374:	22d0      	movs	r2, #208	@ 0xd0
 8122376:	497a      	ldr	r1, [pc, #488]	@ (8122560 <udp_input+0x214>)
 8122378:	4878      	ldr	r0, [pc, #480]	@ (812255c <udp_input+0x210>)
 812237a:	f001 fc4f 	bl	8123c1c <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 812237e:	687b      	ldr	r3, [r7, #4]
 8122380:	895b      	ldrh	r3, [r3, #10]
 8122382:	2b07      	cmp	r3, #7
 8122384:	d803      	bhi.n	812238e <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8122386:	6878      	ldr	r0, [r7, #4]
 8122388:	f7f9 f8a8 	bl	811b4dc <pbuf_free>
    goto end;
 812238c:	e0de      	b.n	812254c <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 812238e:	687b      	ldr	r3, [r7, #4]
 8122390:	685b      	ldr	r3, [r3, #4]
 8122392:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8122394:	4b73      	ldr	r3, [pc, #460]	@ (8122564 <udp_input+0x218>)
 8122396:	695b      	ldr	r3, [r3, #20]
 8122398:	4a72      	ldr	r2, [pc, #456]	@ (8122564 <udp_input+0x218>)
 812239a:	6812      	ldr	r2, [r2, #0]
 812239c:	4611      	mov	r1, r2
 812239e:	4618      	mov	r0, r3
 81223a0:	f7f6 fccc 	bl	8118d3c <ip4_addr_isbroadcast_u32>
 81223a4:	4603      	mov	r3, r0
 81223a6:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 81223a8:	697b      	ldr	r3, [r7, #20]
 81223aa:	881b      	ldrh	r3, [r3, #0]
 81223ac:	b29b      	uxth	r3, r3
 81223ae:	4618      	mov	r0, r3
 81223b0:	f7f4 fe8c 	bl	81170cc <lwip_htons>
 81223b4:	4603      	mov	r3, r0
 81223b6:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 81223b8:	697b      	ldr	r3, [r7, #20]
 81223ba:	885b      	ldrh	r3, [r3, #2]
 81223bc:	b29b      	uxth	r3, r3
 81223be:	4618      	mov	r0, r3
 81223c0:	f7f4 fe84 	bl	81170cc <lwip_htons>
 81223c4:	4603      	mov	r3, r0
 81223c6:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 81223c8:	2300      	movs	r3, #0
 81223ca:	627b      	str	r3, [r7, #36]	@ 0x24
  prev = NULL;
 81223cc:	2300      	movs	r3, #0
 81223ce:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 81223d0:	2300      	movs	r3, #0
 81223d2:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 81223d4:	4b64      	ldr	r3, [pc, #400]	@ (8122568 <udp_input+0x21c>)
 81223d6:	681b      	ldr	r3, [r3, #0]
 81223d8:	627b      	str	r3, [r7, #36]	@ 0x24
 81223da:	e054      	b.n	8122486 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 81223dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81223de:	8a5b      	ldrh	r3, [r3, #18]
 81223e0:	89fa      	ldrh	r2, [r7, #14]
 81223e2:	429a      	cmp	r2, r3
 81223e4:	d14a      	bne.n	812247c <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 81223e6:	7cfb      	ldrb	r3, [r7, #19]
 81223e8:	461a      	mov	r2, r3
 81223ea:	6839      	ldr	r1, [r7, #0]
 81223ec:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 81223ee:	f7ff ff49 	bl	8122284 <udp_input_local_match>
 81223f2:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 81223f4:	2b00      	cmp	r3, #0
 81223f6:	d041      	beq.n	812247c <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 81223f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81223fa:	7c1b      	ldrb	r3, [r3, #16]
 81223fc:	f003 0304 	and.w	r3, r3, #4
 8122400:	2b00      	cmp	r3, #0
 8122402:	d11d      	bne.n	8122440 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8122404:	69fb      	ldr	r3, [r7, #28]
 8122406:	2b00      	cmp	r3, #0
 8122408:	d102      	bne.n	8122410 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 812240a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 812240c:	61fb      	str	r3, [r7, #28]
 812240e:	e017      	b.n	8122440 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8122410:	7cfb      	ldrb	r3, [r7, #19]
 8122412:	2b00      	cmp	r3, #0
 8122414:	d014      	beq.n	8122440 <udp_input+0xf4>
 8122416:	4b53      	ldr	r3, [pc, #332]	@ (8122564 <udp_input+0x218>)
 8122418:	695b      	ldr	r3, [r3, #20]
 812241a:	f1b3 3fff 	cmp.w	r3, #4294967295
 812241e:	d10f      	bne.n	8122440 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8122420:	69fb      	ldr	r3, [r7, #28]
 8122422:	681a      	ldr	r2, [r3, #0]
 8122424:	683b      	ldr	r3, [r7, #0]
 8122426:	3304      	adds	r3, #4
 8122428:	681b      	ldr	r3, [r3, #0]
 812242a:	429a      	cmp	r2, r3
 812242c:	d008      	beq.n	8122440 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 812242e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8122430:	681a      	ldr	r2, [r3, #0]
 8122432:	683b      	ldr	r3, [r7, #0]
 8122434:	3304      	adds	r3, #4
 8122436:	681b      	ldr	r3, [r3, #0]
 8122438:	429a      	cmp	r2, r3
 812243a:	d101      	bne.n	8122440 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 812243c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 812243e:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8122440:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8122442:	8a9b      	ldrh	r3, [r3, #20]
 8122444:	8a3a      	ldrh	r2, [r7, #16]
 8122446:	429a      	cmp	r2, r3
 8122448:	d118      	bne.n	812247c <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 812244a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 812244c:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 812244e:	2b00      	cmp	r3, #0
 8122450:	d005      	beq.n	812245e <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8122452:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8122454:	685a      	ldr	r2, [r3, #4]
 8122456:	4b43      	ldr	r3, [pc, #268]	@ (8122564 <udp_input+0x218>)
 8122458:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 812245a:	429a      	cmp	r2, r3
 812245c:	d10e      	bne.n	812247c <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 812245e:	6a3b      	ldr	r3, [r7, #32]
 8122460:	2b00      	cmp	r3, #0
 8122462:	d014      	beq.n	812248e <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8122464:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8122466:	68da      	ldr	r2, [r3, #12]
 8122468:	6a3b      	ldr	r3, [r7, #32]
 812246a:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 812246c:	4b3e      	ldr	r3, [pc, #248]	@ (8122568 <udp_input+0x21c>)
 812246e:	681a      	ldr	r2, [r3, #0]
 8122470:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8122472:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8122474:	4a3c      	ldr	r2, [pc, #240]	@ (8122568 <udp_input+0x21c>)
 8122476:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8122478:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 812247a:	e008      	b.n	812248e <udp_input+0x142>
      }
    }

    prev = pcb;
 812247c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 812247e:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8122480:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8122482:	68db      	ldr	r3, [r3, #12]
 8122484:	627b      	str	r3, [r7, #36]	@ 0x24
 8122486:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8122488:	2b00      	cmp	r3, #0
 812248a:	d1a7      	bne.n	81223dc <udp_input+0x90>
 812248c:	e000      	b.n	8122490 <udp_input+0x144>
        break;
 812248e:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8122490:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8122492:	2b00      	cmp	r3, #0
 8122494:	d101      	bne.n	812249a <udp_input+0x14e>
    pcb = uncon_pcb;
 8122496:	69fb      	ldr	r3, [r7, #28]
 8122498:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 812249a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 812249c:	2b00      	cmp	r3, #0
 812249e:	d002      	beq.n	81224a6 <udp_input+0x15a>
    for_us = 1;
 81224a0:	2301      	movs	r3, #1
 81224a2:	76fb      	strb	r3, [r7, #27]
 81224a4:	e00a      	b.n	81224bc <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 81224a6:	683b      	ldr	r3, [r7, #0]
 81224a8:	3304      	adds	r3, #4
 81224aa:	681a      	ldr	r2, [r3, #0]
 81224ac:	4b2d      	ldr	r3, [pc, #180]	@ (8122564 <udp_input+0x218>)
 81224ae:	695b      	ldr	r3, [r3, #20]
 81224b0:	429a      	cmp	r2, r3
 81224b2:	bf0c      	ite	eq
 81224b4:	2301      	moveq	r3, #1
 81224b6:	2300      	movne	r3, #0
 81224b8:	b2db      	uxtb	r3, r3
 81224ba:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 81224bc:	7efb      	ldrb	r3, [r7, #27]
 81224be:	2b00      	cmp	r3, #0
 81224c0:	d041      	beq.n	8122546 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 81224c2:	2108      	movs	r1, #8
 81224c4:	6878      	ldr	r0, [r7, #4]
 81224c6:	f7f8 ff83 	bl	811b3d0 <pbuf_remove_header>
 81224ca:	4603      	mov	r3, r0
 81224cc:	2b00      	cmp	r3, #0
 81224ce:	d00a      	beq.n	81224e6 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 81224d0:	4b20      	ldr	r3, [pc, #128]	@ (8122554 <udp_input+0x208>)
 81224d2:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 81224d6:	4925      	ldr	r1, [pc, #148]	@ (812256c <udp_input+0x220>)
 81224d8:	4820      	ldr	r0, [pc, #128]	@ (812255c <udp_input+0x210>)
 81224da:	f001 fb9f 	bl	8123c1c <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 81224de:	6878      	ldr	r0, [r7, #4]
 81224e0:	f7f8 fffc 	bl	811b4dc <pbuf_free>
      goto end;
 81224e4:	e032      	b.n	812254c <udp_input+0x200>
    }

    if (pcb != NULL) {
 81224e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81224e8:	2b00      	cmp	r3, #0
 81224ea:	d012      	beq.n	8122512 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 81224ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81224ee:	699b      	ldr	r3, [r3, #24]
 81224f0:	2b00      	cmp	r3, #0
 81224f2:	d00a      	beq.n	812250a <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 81224f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81224f6:	699c      	ldr	r4, [r3, #24]
 81224f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81224fa:	69d8      	ldr	r0, [r3, #28]
 81224fc:	8a3b      	ldrh	r3, [r7, #16]
 81224fe:	9300      	str	r3, [sp, #0]
 8122500:	4b1b      	ldr	r3, [pc, #108]	@ (8122570 <udp_input+0x224>)
 8122502:	687a      	ldr	r2, [r7, #4]
 8122504:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8122506:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8122508:	e021      	b.n	812254e <udp_input+0x202>
        pbuf_free(p);
 812250a:	6878      	ldr	r0, [r7, #4]
 812250c:	f7f8 ffe6 	bl	811b4dc <pbuf_free>
        goto end;
 8122510:	e01c      	b.n	812254c <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8122512:	7cfb      	ldrb	r3, [r7, #19]
 8122514:	2b00      	cmp	r3, #0
 8122516:	d112      	bne.n	812253e <udp_input+0x1f2>
 8122518:	4b12      	ldr	r3, [pc, #72]	@ (8122564 <udp_input+0x218>)
 812251a:	695b      	ldr	r3, [r3, #20]
 812251c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8122520:	2be0      	cmp	r3, #224	@ 0xe0
 8122522:	d00c      	beq.n	812253e <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8122524:	4b0f      	ldr	r3, [pc, #60]	@ (8122564 <udp_input+0x218>)
 8122526:	899b      	ldrh	r3, [r3, #12]
 8122528:	3308      	adds	r3, #8
 812252a:	b29b      	uxth	r3, r3
 812252c:	b21b      	sxth	r3, r3
 812252e:	4619      	mov	r1, r3
 8122530:	6878      	ldr	r0, [r7, #4]
 8122532:	f7f8 ffc0 	bl	811b4b6 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8122536:	2103      	movs	r1, #3
 8122538:	6878      	ldr	r0, [r7, #4]
 812253a:	f7f6 f801 	bl	8118540 <icmp_dest_unreach>
      pbuf_free(p);
 812253e:	6878      	ldr	r0, [r7, #4]
 8122540:	f7f8 ffcc 	bl	811b4dc <pbuf_free>
  return;
 8122544:	e003      	b.n	812254e <udp_input+0x202>
    pbuf_free(p);
 8122546:	6878      	ldr	r0, [r7, #4]
 8122548:	f7f8 ffc8 	bl	811b4dc <pbuf_free>
  return;
 812254c:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 812254e:	372c      	adds	r7, #44	@ 0x2c
 8122550:	46bd      	mov	sp, r7
 8122552:	bd90      	pop	{r4, r7, pc}
 8122554:	08127f88 	.word	0x08127f88
 8122558:	0812806c 	.word	0x0812806c
 812255c:	0812801c 	.word	0x0812801c
 8122560:	08128084 	.word	0x08128084
 8122564:	1000b300 	.word	0x1000b300
 8122568:	1000e504 	.word	0x1000e504
 812256c:	081280a0 	.word	0x081280a0
 8122570:	1000b310 	.word	0x1000b310

08122574 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 8122574:	b580      	push	{r7, lr}
 8122576:	b088      	sub	sp, #32
 8122578:	af02      	add	r7, sp, #8
 812257a:	60f8      	str	r0, [r7, #12]
 812257c:	60b9      	str	r1, [r7, #8]
 812257e:	607a      	str	r2, [r7, #4]
 8122580:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 8122582:	68fb      	ldr	r3, [r7, #12]
 8122584:	2b00      	cmp	r3, #0
 8122586:	d109      	bne.n	812259c <udp_sendto+0x28>
 8122588:	4b23      	ldr	r3, [pc, #140]	@ (8122618 <udp_sendto+0xa4>)
 812258a:	f44f 7206 	mov.w	r2, #536	@ 0x218
 812258e:	4923      	ldr	r1, [pc, #140]	@ (812261c <udp_sendto+0xa8>)
 8122590:	4823      	ldr	r0, [pc, #140]	@ (8122620 <udp_sendto+0xac>)
 8122592:	f001 fb43 	bl	8123c1c <iprintf>
 8122596:	f06f 030f 	mvn.w	r3, #15
 812259a:	e038      	b.n	812260e <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 812259c:	68bb      	ldr	r3, [r7, #8]
 812259e:	2b00      	cmp	r3, #0
 81225a0:	d109      	bne.n	81225b6 <udp_sendto+0x42>
 81225a2:	4b1d      	ldr	r3, [pc, #116]	@ (8122618 <udp_sendto+0xa4>)
 81225a4:	f240 2219 	movw	r2, #537	@ 0x219
 81225a8:	491e      	ldr	r1, [pc, #120]	@ (8122624 <udp_sendto+0xb0>)
 81225aa:	481d      	ldr	r0, [pc, #116]	@ (8122620 <udp_sendto+0xac>)
 81225ac:	f001 fb36 	bl	8123c1c <iprintf>
 81225b0:	f06f 030f 	mvn.w	r3, #15
 81225b4:	e02b      	b.n	812260e <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 81225b6:	687b      	ldr	r3, [r7, #4]
 81225b8:	2b00      	cmp	r3, #0
 81225ba:	d109      	bne.n	81225d0 <udp_sendto+0x5c>
 81225bc:	4b16      	ldr	r3, [pc, #88]	@ (8122618 <udp_sendto+0xa4>)
 81225be:	f240 221a 	movw	r2, #538	@ 0x21a
 81225c2:	4919      	ldr	r1, [pc, #100]	@ (8122628 <udp_sendto+0xb4>)
 81225c4:	4816      	ldr	r0, [pc, #88]	@ (8122620 <udp_sendto+0xac>)
 81225c6:	f001 fb29 	bl	8123c1c <iprintf>
 81225ca:	f06f 030f 	mvn.w	r3, #15
 81225ce:	e01e      	b.n	812260e <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 81225d0:	68fb      	ldr	r3, [r7, #12]
 81225d2:	7a1b      	ldrb	r3, [r3, #8]
 81225d4:	2b00      	cmp	r3, #0
 81225d6:	d006      	beq.n	81225e6 <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 81225d8:	68fb      	ldr	r3, [r7, #12]
 81225da:	7a1b      	ldrb	r3, [r3, #8]
 81225dc:	4618      	mov	r0, r3
 81225de:	f7f8 fbf1 	bl	811adc4 <netif_get_by_index>
 81225e2:	6178      	str	r0, [r7, #20]
 81225e4:	e003      	b.n	81225ee <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 81225e6:	6878      	ldr	r0, [r7, #4]
 81225e8:	f7f6 f912 	bl	8118810 <ip4_route>
 81225ec:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 81225ee:	697b      	ldr	r3, [r7, #20]
 81225f0:	2b00      	cmp	r3, #0
 81225f2:	d102      	bne.n	81225fa <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 81225f4:	f06f 0303 	mvn.w	r3, #3
 81225f8:	e009      	b.n	812260e <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 81225fa:	887a      	ldrh	r2, [r7, #2]
 81225fc:	697b      	ldr	r3, [r7, #20]
 81225fe:	9300      	str	r3, [sp, #0]
 8122600:	4613      	mov	r3, r2
 8122602:	687a      	ldr	r2, [r7, #4]
 8122604:	68b9      	ldr	r1, [r7, #8]
 8122606:	68f8      	ldr	r0, [r7, #12]
 8122608:	f000 f810 	bl	812262c <udp_sendto_if>
 812260c:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 812260e:	4618      	mov	r0, r3
 8122610:	3718      	adds	r7, #24
 8122612:	46bd      	mov	sp, r7
 8122614:	bd80      	pop	{r7, pc}
 8122616:	bf00      	nop
 8122618:	08127f88 	.word	0x08127f88
 812261c:	081280ec 	.word	0x081280ec
 8122620:	0812801c 	.word	0x0812801c
 8122624:	08128104 	.word	0x08128104
 8122628:	08128120 	.word	0x08128120

0812262c <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 812262c:	b580      	push	{r7, lr}
 812262e:	b088      	sub	sp, #32
 8122630:	af02      	add	r7, sp, #8
 8122632:	60f8      	str	r0, [r7, #12]
 8122634:	60b9      	str	r1, [r7, #8]
 8122636:	607a      	str	r2, [r7, #4]
 8122638:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 812263a:	68fb      	ldr	r3, [r7, #12]
 812263c:	2b00      	cmp	r3, #0
 812263e:	d109      	bne.n	8122654 <udp_sendto_if+0x28>
 8122640:	4b2e      	ldr	r3, [pc, #184]	@ (81226fc <udp_sendto_if+0xd0>)
 8122642:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8122646:	492e      	ldr	r1, [pc, #184]	@ (8122700 <udp_sendto_if+0xd4>)
 8122648:	482e      	ldr	r0, [pc, #184]	@ (8122704 <udp_sendto_if+0xd8>)
 812264a:	f001 fae7 	bl	8123c1c <iprintf>
 812264e:	f06f 030f 	mvn.w	r3, #15
 8122652:	e04f      	b.n	81226f4 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 8122654:	68bb      	ldr	r3, [r7, #8]
 8122656:	2b00      	cmp	r3, #0
 8122658:	d109      	bne.n	812266e <udp_sendto_if+0x42>
 812265a:	4b28      	ldr	r3, [pc, #160]	@ (81226fc <udp_sendto_if+0xd0>)
 812265c:	f240 2281 	movw	r2, #641	@ 0x281
 8122660:	4929      	ldr	r1, [pc, #164]	@ (8122708 <udp_sendto_if+0xdc>)
 8122662:	4828      	ldr	r0, [pc, #160]	@ (8122704 <udp_sendto_if+0xd8>)
 8122664:	f001 fada 	bl	8123c1c <iprintf>
 8122668:	f06f 030f 	mvn.w	r3, #15
 812266c:	e042      	b.n	81226f4 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 812266e:	687b      	ldr	r3, [r7, #4]
 8122670:	2b00      	cmp	r3, #0
 8122672:	d109      	bne.n	8122688 <udp_sendto_if+0x5c>
 8122674:	4b21      	ldr	r3, [pc, #132]	@ (81226fc <udp_sendto_if+0xd0>)
 8122676:	f240 2282 	movw	r2, #642	@ 0x282
 812267a:	4924      	ldr	r1, [pc, #144]	@ (812270c <udp_sendto_if+0xe0>)
 812267c:	4821      	ldr	r0, [pc, #132]	@ (8122704 <udp_sendto_if+0xd8>)
 812267e:	f001 facd 	bl	8123c1c <iprintf>
 8122682:	f06f 030f 	mvn.w	r3, #15
 8122686:	e035      	b.n	81226f4 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 8122688:	6a3b      	ldr	r3, [r7, #32]
 812268a:	2b00      	cmp	r3, #0
 812268c:	d109      	bne.n	81226a2 <udp_sendto_if+0x76>
 812268e:	4b1b      	ldr	r3, [pc, #108]	@ (81226fc <udp_sendto_if+0xd0>)
 8122690:	f240 2283 	movw	r2, #643	@ 0x283
 8122694:	491e      	ldr	r1, [pc, #120]	@ (8122710 <udp_sendto_if+0xe4>)
 8122696:	481b      	ldr	r0, [pc, #108]	@ (8122704 <udp_sendto_if+0xd8>)
 8122698:	f001 fac0 	bl	8123c1c <iprintf>
 812269c:	f06f 030f 	mvn.w	r3, #15
 81226a0:	e028      	b.n	81226f4 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 81226a2:	68fb      	ldr	r3, [r7, #12]
 81226a4:	2b00      	cmp	r3, #0
 81226a6:	d009      	beq.n	81226bc <udp_sendto_if+0x90>
 81226a8:	68fb      	ldr	r3, [r7, #12]
 81226aa:	681b      	ldr	r3, [r3, #0]
 81226ac:	2b00      	cmp	r3, #0
 81226ae:	d005      	beq.n	81226bc <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 81226b0:	68fb      	ldr	r3, [r7, #12]
 81226b2:	681b      	ldr	r3, [r3, #0]
 81226b4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 81226b8:	2be0      	cmp	r3, #224	@ 0xe0
 81226ba:	d103      	bne.n	81226c4 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 81226bc:	6a3b      	ldr	r3, [r7, #32]
 81226be:	3304      	adds	r3, #4
 81226c0:	617b      	str	r3, [r7, #20]
 81226c2:	e00b      	b.n	81226dc <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 81226c4:	68fb      	ldr	r3, [r7, #12]
 81226c6:	681a      	ldr	r2, [r3, #0]
 81226c8:	6a3b      	ldr	r3, [r7, #32]
 81226ca:	3304      	adds	r3, #4
 81226cc:	681b      	ldr	r3, [r3, #0]
 81226ce:	429a      	cmp	r2, r3
 81226d0:	d002      	beq.n	81226d8 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 81226d2:	f06f 0303 	mvn.w	r3, #3
 81226d6:	e00d      	b.n	81226f4 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 81226d8:	68fb      	ldr	r3, [r7, #12]
 81226da:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 81226dc:	887a      	ldrh	r2, [r7, #2]
 81226de:	697b      	ldr	r3, [r7, #20]
 81226e0:	9301      	str	r3, [sp, #4]
 81226e2:	6a3b      	ldr	r3, [r7, #32]
 81226e4:	9300      	str	r3, [sp, #0]
 81226e6:	4613      	mov	r3, r2
 81226e8:	687a      	ldr	r2, [r7, #4]
 81226ea:	68b9      	ldr	r1, [r7, #8]
 81226ec:	68f8      	ldr	r0, [r7, #12]
 81226ee:	f000 f811 	bl	8122714 <udp_sendto_if_src>
 81226f2:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 81226f4:	4618      	mov	r0, r3
 81226f6:	3718      	adds	r7, #24
 81226f8:	46bd      	mov	sp, r7
 81226fa:	bd80      	pop	{r7, pc}
 81226fc:	08127f88 	.word	0x08127f88
 8122700:	0812813c 	.word	0x0812813c
 8122704:	0812801c 	.word	0x0812801c
 8122708:	08128158 	.word	0x08128158
 812270c:	08128174 	.word	0x08128174
 8122710:	08128194 	.word	0x08128194

08122714 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 8122714:	b580      	push	{r7, lr}
 8122716:	b08c      	sub	sp, #48	@ 0x30
 8122718:	af04      	add	r7, sp, #16
 812271a:	60f8      	str	r0, [r7, #12]
 812271c:	60b9      	str	r1, [r7, #8]
 812271e:	607a      	str	r2, [r7, #4]
 8122720:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 8122722:	68fb      	ldr	r3, [r7, #12]
 8122724:	2b00      	cmp	r3, #0
 8122726:	d109      	bne.n	812273c <udp_sendto_if_src+0x28>
 8122728:	4b65      	ldr	r3, [pc, #404]	@ (81228c0 <udp_sendto_if_src+0x1ac>)
 812272a:	f240 22d1 	movw	r2, #721	@ 0x2d1
 812272e:	4965      	ldr	r1, [pc, #404]	@ (81228c4 <udp_sendto_if_src+0x1b0>)
 8122730:	4865      	ldr	r0, [pc, #404]	@ (81228c8 <udp_sendto_if_src+0x1b4>)
 8122732:	f001 fa73 	bl	8123c1c <iprintf>
 8122736:	f06f 030f 	mvn.w	r3, #15
 812273a:	e0bc      	b.n	81228b6 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 812273c:	68bb      	ldr	r3, [r7, #8]
 812273e:	2b00      	cmp	r3, #0
 8122740:	d109      	bne.n	8122756 <udp_sendto_if_src+0x42>
 8122742:	4b5f      	ldr	r3, [pc, #380]	@ (81228c0 <udp_sendto_if_src+0x1ac>)
 8122744:	f240 22d2 	movw	r2, #722	@ 0x2d2
 8122748:	4960      	ldr	r1, [pc, #384]	@ (81228cc <udp_sendto_if_src+0x1b8>)
 812274a:	485f      	ldr	r0, [pc, #380]	@ (81228c8 <udp_sendto_if_src+0x1b4>)
 812274c:	f001 fa66 	bl	8123c1c <iprintf>
 8122750:	f06f 030f 	mvn.w	r3, #15
 8122754:	e0af      	b.n	81228b6 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8122756:	687b      	ldr	r3, [r7, #4]
 8122758:	2b00      	cmp	r3, #0
 812275a:	d109      	bne.n	8122770 <udp_sendto_if_src+0x5c>
 812275c:	4b58      	ldr	r3, [pc, #352]	@ (81228c0 <udp_sendto_if_src+0x1ac>)
 812275e:	f240 22d3 	movw	r2, #723	@ 0x2d3
 8122762:	495b      	ldr	r1, [pc, #364]	@ (81228d0 <udp_sendto_if_src+0x1bc>)
 8122764:	4858      	ldr	r0, [pc, #352]	@ (81228c8 <udp_sendto_if_src+0x1b4>)
 8122766:	f001 fa59 	bl	8123c1c <iprintf>
 812276a:	f06f 030f 	mvn.w	r3, #15
 812276e:	e0a2      	b.n	81228b6 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 8122770:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8122772:	2b00      	cmp	r3, #0
 8122774:	d109      	bne.n	812278a <udp_sendto_if_src+0x76>
 8122776:	4b52      	ldr	r3, [pc, #328]	@ (81228c0 <udp_sendto_if_src+0x1ac>)
 8122778:	f44f 7235 	mov.w	r2, #724	@ 0x2d4
 812277c:	4955      	ldr	r1, [pc, #340]	@ (81228d4 <udp_sendto_if_src+0x1c0>)
 812277e:	4852      	ldr	r0, [pc, #328]	@ (81228c8 <udp_sendto_if_src+0x1b4>)
 8122780:	f001 fa4c 	bl	8123c1c <iprintf>
 8122784:	f06f 030f 	mvn.w	r3, #15
 8122788:	e095      	b.n	81228b6 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 812278a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 812278c:	2b00      	cmp	r3, #0
 812278e:	d109      	bne.n	81227a4 <udp_sendto_if_src+0x90>
 8122790:	4b4b      	ldr	r3, [pc, #300]	@ (81228c0 <udp_sendto_if_src+0x1ac>)
 8122792:	f240 22d5 	movw	r2, #725	@ 0x2d5
 8122796:	4950      	ldr	r1, [pc, #320]	@ (81228d8 <udp_sendto_if_src+0x1c4>)
 8122798:	484b      	ldr	r0, [pc, #300]	@ (81228c8 <udp_sendto_if_src+0x1b4>)
 812279a:	f001 fa3f 	bl	8123c1c <iprintf>
 812279e:	f06f 030f 	mvn.w	r3, #15
 81227a2:	e088      	b.n	81228b6 <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 81227a4:	68fb      	ldr	r3, [r7, #12]
 81227a6:	8a5b      	ldrh	r3, [r3, #18]
 81227a8:	2b00      	cmp	r3, #0
 81227aa:	d10f      	bne.n	81227cc <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 81227ac:	68f9      	ldr	r1, [r7, #12]
 81227ae:	68fb      	ldr	r3, [r7, #12]
 81227b0:	8a5b      	ldrh	r3, [r3, #18]
 81227b2:	461a      	mov	r2, r3
 81227b4:	68f8      	ldr	r0, [r7, #12]
 81227b6:	f000 f893 	bl	81228e0 <udp_bind>
 81227ba:	4603      	mov	r3, r0
 81227bc:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 81227be:	f997 301b 	ldrsb.w	r3, [r7, #27]
 81227c2:	2b00      	cmp	r3, #0
 81227c4:	d002      	beq.n	81227cc <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 81227c6:	f997 301b 	ldrsb.w	r3, [r7, #27]
 81227ca:	e074      	b.n	81228b6 <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 81227cc:	68bb      	ldr	r3, [r7, #8]
 81227ce:	891b      	ldrh	r3, [r3, #8]
 81227d0:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
 81227d4:	4293      	cmp	r3, r2
 81227d6:	d902      	bls.n	81227de <udp_sendto_if_src+0xca>
    return ERR_MEM;
 81227d8:	f04f 33ff 	mov.w	r3, #4294967295
 81227dc:	e06b      	b.n	81228b6 <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 81227de:	2108      	movs	r1, #8
 81227e0:	68b8      	ldr	r0, [r7, #8]
 81227e2:	f7f8 fde5 	bl	811b3b0 <pbuf_add_header>
 81227e6:	4603      	mov	r3, r0
 81227e8:	2b00      	cmp	r3, #0
 81227ea:	d015      	beq.n	8122818 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 81227ec:	f44f 7220 	mov.w	r2, #640	@ 0x280
 81227f0:	2108      	movs	r1, #8
 81227f2:	2022      	movs	r0, #34	@ 0x22
 81227f4:	f7f8 fb90 	bl	811af18 <pbuf_alloc>
 81227f8:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 81227fa:	69fb      	ldr	r3, [r7, #28]
 81227fc:	2b00      	cmp	r3, #0
 81227fe:	d102      	bne.n	8122806 <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 8122800:	f04f 33ff 	mov.w	r3, #4294967295
 8122804:	e057      	b.n	81228b6 <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 8122806:	68bb      	ldr	r3, [r7, #8]
 8122808:	891b      	ldrh	r3, [r3, #8]
 812280a:	2b00      	cmp	r3, #0
 812280c:	d006      	beq.n	812281c <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 812280e:	68b9      	ldr	r1, [r7, #8]
 8122810:	69f8      	ldr	r0, [r7, #28]
 8122812:	f7f8 ff87 	bl	811b724 <pbuf_chain>
 8122816:	e001      	b.n	812281c <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 8122818:	68bb      	ldr	r3, [r7, #8]
 812281a:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 812281c:	69fb      	ldr	r3, [r7, #28]
 812281e:	895b      	ldrh	r3, [r3, #10]
 8122820:	2b07      	cmp	r3, #7
 8122822:	d806      	bhi.n	8122832 <udp_sendto_if_src+0x11e>
 8122824:	4b26      	ldr	r3, [pc, #152]	@ (81228c0 <udp_sendto_if_src+0x1ac>)
 8122826:	f240 320d 	movw	r2, #781	@ 0x30d
 812282a:	492c      	ldr	r1, [pc, #176]	@ (81228dc <udp_sendto_if_src+0x1c8>)
 812282c:	4826      	ldr	r0, [pc, #152]	@ (81228c8 <udp_sendto_if_src+0x1b4>)
 812282e:	f001 f9f5 	bl	8123c1c <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 8122832:	69fb      	ldr	r3, [r7, #28]
 8122834:	685b      	ldr	r3, [r3, #4]
 8122836:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 8122838:	68fb      	ldr	r3, [r7, #12]
 812283a:	8a5b      	ldrh	r3, [r3, #18]
 812283c:	4618      	mov	r0, r3
 812283e:	f7f4 fc45 	bl	81170cc <lwip_htons>
 8122842:	4603      	mov	r3, r0
 8122844:	461a      	mov	r2, r3
 8122846:	697b      	ldr	r3, [r7, #20]
 8122848:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 812284a:	887b      	ldrh	r3, [r7, #2]
 812284c:	4618      	mov	r0, r3
 812284e:	f7f4 fc3d 	bl	81170cc <lwip_htons>
 8122852:	4603      	mov	r3, r0
 8122854:	461a      	mov	r2, r3
 8122856:	697b      	ldr	r3, [r7, #20]
 8122858:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 812285a:	697b      	ldr	r3, [r7, #20]
 812285c:	2200      	movs	r2, #0
 812285e:	719a      	strb	r2, [r3, #6]
 8122860:	2200      	movs	r2, #0
 8122862:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 8122864:	69fb      	ldr	r3, [r7, #28]
 8122866:	891b      	ldrh	r3, [r3, #8]
 8122868:	4618      	mov	r0, r3
 812286a:	f7f4 fc2f 	bl	81170cc <lwip_htons>
 812286e:	4603      	mov	r3, r0
 8122870:	461a      	mov	r2, r3
 8122872:	697b      	ldr	r3, [r7, #20]
 8122874:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 8122876:	2311      	movs	r3, #17
 8122878:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 812287a:	68fb      	ldr	r3, [r7, #12]
 812287c:	7adb      	ldrb	r3, [r3, #11]
 812287e:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8122880:	68fb      	ldr	r3, [r7, #12]
 8122882:	7a9b      	ldrb	r3, [r3, #10]
 8122884:	7cb9      	ldrb	r1, [r7, #18]
 8122886:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8122888:	9202      	str	r2, [sp, #8]
 812288a:	7cfa      	ldrb	r2, [r7, #19]
 812288c:	9201      	str	r2, [sp, #4]
 812288e:	9300      	str	r3, [sp, #0]
 8122890:	460b      	mov	r3, r1
 8122892:	687a      	ldr	r2, [r7, #4]
 8122894:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8122896:	69f8      	ldr	r0, [r7, #28]
 8122898:	f7f6 f9a2 	bl	8118be0 <ip4_output_if_src>
 812289c:	4603      	mov	r3, r0
 812289e:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 81228a0:	69fa      	ldr	r2, [r7, #28]
 81228a2:	68bb      	ldr	r3, [r7, #8]
 81228a4:	429a      	cmp	r2, r3
 81228a6:	d004      	beq.n	81228b2 <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 81228a8:	69f8      	ldr	r0, [r7, #28]
 81228aa:	f7f8 fe17 	bl	811b4dc <pbuf_free>
    q = NULL;
 81228ae:	2300      	movs	r3, #0
 81228b0:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 81228b2:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 81228b6:	4618      	mov	r0, r3
 81228b8:	3720      	adds	r7, #32
 81228ba:	46bd      	mov	sp, r7
 81228bc:	bd80      	pop	{r7, pc}
 81228be:	bf00      	nop
 81228c0:	08127f88 	.word	0x08127f88
 81228c4:	081281b4 	.word	0x081281b4
 81228c8:	0812801c 	.word	0x0812801c
 81228cc:	081281d4 	.word	0x081281d4
 81228d0:	081281f4 	.word	0x081281f4
 81228d4:	08128218 	.word	0x08128218
 81228d8:	0812823c 	.word	0x0812823c
 81228dc:	08128260 	.word	0x08128260

081228e0 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 81228e0:	b580      	push	{r7, lr}
 81228e2:	b086      	sub	sp, #24
 81228e4:	af00      	add	r7, sp, #0
 81228e6:	60f8      	str	r0, [r7, #12]
 81228e8:	60b9      	str	r1, [r7, #8]
 81228ea:	4613      	mov	r3, r2
 81228ec:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 81228ee:	68bb      	ldr	r3, [r7, #8]
 81228f0:	2b00      	cmp	r3, #0
 81228f2:	d101      	bne.n	81228f8 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 81228f4:	4b39      	ldr	r3, [pc, #228]	@ (81229dc <udp_bind+0xfc>)
 81228f6:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 81228f8:	68fb      	ldr	r3, [r7, #12]
 81228fa:	2b00      	cmp	r3, #0
 81228fc:	d109      	bne.n	8122912 <udp_bind+0x32>
 81228fe:	4b38      	ldr	r3, [pc, #224]	@ (81229e0 <udp_bind+0x100>)
 8122900:	f240 32b7 	movw	r2, #951	@ 0x3b7
 8122904:	4937      	ldr	r1, [pc, #220]	@ (81229e4 <udp_bind+0x104>)
 8122906:	4838      	ldr	r0, [pc, #224]	@ (81229e8 <udp_bind+0x108>)
 8122908:	f001 f988 	bl	8123c1c <iprintf>
 812290c:	f06f 030f 	mvn.w	r3, #15
 8122910:	e060      	b.n	81229d4 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8122912:	2300      	movs	r3, #0
 8122914:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8122916:	4b35      	ldr	r3, [pc, #212]	@ (81229ec <udp_bind+0x10c>)
 8122918:	681b      	ldr	r3, [r3, #0]
 812291a:	617b      	str	r3, [r7, #20]
 812291c:	e009      	b.n	8122932 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 812291e:	68fa      	ldr	r2, [r7, #12]
 8122920:	697b      	ldr	r3, [r7, #20]
 8122922:	429a      	cmp	r2, r3
 8122924:	d102      	bne.n	812292c <udp_bind+0x4c>
      rebind = 1;
 8122926:	2301      	movs	r3, #1
 8122928:	74fb      	strb	r3, [r7, #19]
      break;
 812292a:	e005      	b.n	8122938 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 812292c:	697b      	ldr	r3, [r7, #20]
 812292e:	68db      	ldr	r3, [r3, #12]
 8122930:	617b      	str	r3, [r7, #20]
 8122932:	697b      	ldr	r3, [r7, #20]
 8122934:	2b00      	cmp	r3, #0
 8122936:	d1f2      	bne.n	812291e <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8122938:	88fb      	ldrh	r3, [r7, #6]
 812293a:	2b00      	cmp	r3, #0
 812293c:	d109      	bne.n	8122952 <udp_bind+0x72>
    port = udp_new_port();
 812293e:	f7ff fc69 	bl	8122214 <udp_new_port>
 8122942:	4603      	mov	r3, r0
 8122944:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8122946:	88fb      	ldrh	r3, [r7, #6]
 8122948:	2b00      	cmp	r3, #0
 812294a:	d12c      	bne.n	81229a6 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 812294c:	f06f 0307 	mvn.w	r3, #7
 8122950:	e040      	b.n	81229d4 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8122952:	4b26      	ldr	r3, [pc, #152]	@ (81229ec <udp_bind+0x10c>)
 8122954:	681b      	ldr	r3, [r3, #0]
 8122956:	617b      	str	r3, [r7, #20]
 8122958:	e022      	b.n	81229a0 <udp_bind+0xc0>
      if (pcb != ipcb) {
 812295a:	68fa      	ldr	r2, [r7, #12]
 812295c:	697b      	ldr	r3, [r7, #20]
 812295e:	429a      	cmp	r2, r3
 8122960:	d01b      	beq.n	812299a <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8122962:	697b      	ldr	r3, [r7, #20]
 8122964:	8a5b      	ldrh	r3, [r3, #18]
 8122966:	88fa      	ldrh	r2, [r7, #6]
 8122968:	429a      	cmp	r2, r3
 812296a:	d116      	bne.n	812299a <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 812296c:	697b      	ldr	r3, [r7, #20]
 812296e:	681a      	ldr	r2, [r3, #0]
 8122970:	68bb      	ldr	r3, [r7, #8]
 8122972:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8122974:	429a      	cmp	r2, r3
 8122976:	d00d      	beq.n	8122994 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8122978:	68bb      	ldr	r3, [r7, #8]
 812297a:	2b00      	cmp	r3, #0
 812297c:	d00a      	beq.n	8122994 <udp_bind+0xb4>
 812297e:	68bb      	ldr	r3, [r7, #8]
 8122980:	681b      	ldr	r3, [r3, #0]
 8122982:	2b00      	cmp	r3, #0
 8122984:	d006      	beq.n	8122994 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8122986:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8122988:	2b00      	cmp	r3, #0
 812298a:	d003      	beq.n	8122994 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 812298c:	697b      	ldr	r3, [r7, #20]
 812298e:	681b      	ldr	r3, [r3, #0]
 8122990:	2b00      	cmp	r3, #0
 8122992:	d102      	bne.n	812299a <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8122994:	f06f 0307 	mvn.w	r3, #7
 8122998:	e01c      	b.n	81229d4 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 812299a:	697b      	ldr	r3, [r7, #20]
 812299c:	68db      	ldr	r3, [r3, #12]
 812299e:	617b      	str	r3, [r7, #20]
 81229a0:	697b      	ldr	r3, [r7, #20]
 81229a2:	2b00      	cmp	r3, #0
 81229a4:	d1d9      	bne.n	812295a <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 81229a6:	68bb      	ldr	r3, [r7, #8]
 81229a8:	2b00      	cmp	r3, #0
 81229aa:	d002      	beq.n	81229b2 <udp_bind+0xd2>
 81229ac:	68bb      	ldr	r3, [r7, #8]
 81229ae:	681b      	ldr	r3, [r3, #0]
 81229b0:	e000      	b.n	81229b4 <udp_bind+0xd4>
 81229b2:	2300      	movs	r3, #0
 81229b4:	68fa      	ldr	r2, [r7, #12]
 81229b6:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 81229b8:	68fb      	ldr	r3, [r7, #12]
 81229ba:	88fa      	ldrh	r2, [r7, #6]
 81229bc:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 81229be:	7cfb      	ldrb	r3, [r7, #19]
 81229c0:	2b00      	cmp	r3, #0
 81229c2:	d106      	bne.n	81229d2 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 81229c4:	4b09      	ldr	r3, [pc, #36]	@ (81229ec <udp_bind+0x10c>)
 81229c6:	681a      	ldr	r2, [r3, #0]
 81229c8:	68fb      	ldr	r3, [r7, #12]
 81229ca:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 81229cc:	4a07      	ldr	r2, [pc, #28]	@ (81229ec <udp_bind+0x10c>)
 81229ce:	68fb      	ldr	r3, [r7, #12]
 81229d0:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 81229d2:	2300      	movs	r3, #0
}
 81229d4:	4618      	mov	r0, r3
 81229d6:	3718      	adds	r7, #24
 81229d8:	46bd      	mov	sp, r7
 81229da:	bd80      	pop	{r7, pc}
 81229dc:	08128434 	.word	0x08128434
 81229e0:	08127f88 	.word	0x08127f88
 81229e4:	08128290 	.word	0x08128290
 81229e8:	0812801c 	.word	0x0812801c
 81229ec:	1000e504 	.word	0x1000e504

081229f0 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 81229f0:	b580      	push	{r7, lr}
 81229f2:	b084      	sub	sp, #16
 81229f4:	af00      	add	r7, sp, #0
 81229f6:	60f8      	str	r0, [r7, #12]
 81229f8:	60b9      	str	r1, [r7, #8]
 81229fa:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 81229fc:	68fb      	ldr	r3, [r7, #12]
 81229fe:	2b00      	cmp	r3, #0
 8122a00:	d107      	bne.n	8122a12 <udp_recv+0x22>
 8122a02:	4b08      	ldr	r3, [pc, #32]	@ (8122a24 <udp_recv+0x34>)
 8122a04:	f240 428a 	movw	r2, #1162	@ 0x48a
 8122a08:	4907      	ldr	r1, [pc, #28]	@ (8122a28 <udp_recv+0x38>)
 8122a0a:	4808      	ldr	r0, [pc, #32]	@ (8122a2c <udp_recv+0x3c>)
 8122a0c:	f001 f906 	bl	8123c1c <iprintf>
 8122a10:	e005      	b.n	8122a1e <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 8122a12:	68fb      	ldr	r3, [r7, #12]
 8122a14:	68ba      	ldr	r2, [r7, #8]
 8122a16:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8122a18:	68fb      	ldr	r3, [r7, #12]
 8122a1a:	687a      	ldr	r2, [r7, #4]
 8122a1c:	61da      	str	r2, [r3, #28]
}
 8122a1e:	3710      	adds	r7, #16
 8122a20:	46bd      	mov	sp, r7
 8122a22:	bd80      	pop	{r7, pc}
 8122a24:	08127f88 	.word	0x08127f88
 8122a28:	081282fc 	.word	0x081282fc
 8122a2c:	0812801c 	.word	0x0812801c

08122a30 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8122a30:	b580      	push	{r7, lr}
 8122a32:	b084      	sub	sp, #16
 8122a34:	af00      	add	r7, sp, #0
 8122a36:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8122a38:	687b      	ldr	r3, [r7, #4]
 8122a3a:	2b00      	cmp	r3, #0
 8122a3c:	d107      	bne.n	8122a4e <udp_remove+0x1e>
 8122a3e:	4b19      	ldr	r3, [pc, #100]	@ (8122aa4 <udp_remove+0x74>)
 8122a40:	f240 42a1 	movw	r2, #1185	@ 0x4a1
 8122a44:	4918      	ldr	r1, [pc, #96]	@ (8122aa8 <udp_remove+0x78>)
 8122a46:	4819      	ldr	r0, [pc, #100]	@ (8122aac <udp_remove+0x7c>)
 8122a48:	f001 f8e8 	bl	8123c1c <iprintf>
 8122a4c:	e026      	b.n	8122a9c <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 8122a4e:	4b18      	ldr	r3, [pc, #96]	@ (8122ab0 <udp_remove+0x80>)
 8122a50:	681b      	ldr	r3, [r3, #0]
 8122a52:	687a      	ldr	r2, [r7, #4]
 8122a54:	429a      	cmp	r2, r3
 8122a56:	d105      	bne.n	8122a64 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8122a58:	4b15      	ldr	r3, [pc, #84]	@ (8122ab0 <udp_remove+0x80>)
 8122a5a:	681b      	ldr	r3, [r3, #0]
 8122a5c:	68db      	ldr	r3, [r3, #12]
 8122a5e:	4a14      	ldr	r2, [pc, #80]	@ (8122ab0 <udp_remove+0x80>)
 8122a60:	6013      	str	r3, [r2, #0]
 8122a62:	e017      	b.n	8122a94 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8122a64:	4b12      	ldr	r3, [pc, #72]	@ (8122ab0 <udp_remove+0x80>)
 8122a66:	681b      	ldr	r3, [r3, #0]
 8122a68:	60fb      	str	r3, [r7, #12]
 8122a6a:	e010      	b.n	8122a8e <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 8122a6c:	68fb      	ldr	r3, [r7, #12]
 8122a6e:	68db      	ldr	r3, [r3, #12]
 8122a70:	2b00      	cmp	r3, #0
 8122a72:	d009      	beq.n	8122a88 <udp_remove+0x58>
 8122a74:	68fb      	ldr	r3, [r7, #12]
 8122a76:	68db      	ldr	r3, [r3, #12]
 8122a78:	687a      	ldr	r2, [r7, #4]
 8122a7a:	429a      	cmp	r2, r3
 8122a7c:	d104      	bne.n	8122a88 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 8122a7e:	687b      	ldr	r3, [r7, #4]
 8122a80:	68da      	ldr	r2, [r3, #12]
 8122a82:	68fb      	ldr	r3, [r7, #12]
 8122a84:	60da      	str	r2, [r3, #12]
        break;
 8122a86:	e005      	b.n	8122a94 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8122a88:	68fb      	ldr	r3, [r7, #12]
 8122a8a:	68db      	ldr	r3, [r3, #12]
 8122a8c:	60fb      	str	r3, [r7, #12]
 8122a8e:	68fb      	ldr	r3, [r7, #12]
 8122a90:	2b00      	cmp	r3, #0
 8122a92:	d1eb      	bne.n	8122a6c <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 8122a94:	6879      	ldr	r1, [r7, #4]
 8122a96:	2000      	movs	r0, #0
 8122a98:	f7f7 fe7e 	bl	811a798 <memp_free>
}
 8122a9c:	3710      	adds	r7, #16
 8122a9e:	46bd      	mov	sp, r7
 8122aa0:	bd80      	pop	{r7, pc}
 8122aa2:	bf00      	nop
 8122aa4:	08127f88 	.word	0x08127f88
 8122aa8:	08128314 	.word	0x08128314
 8122aac:	0812801c 	.word	0x0812801c
 8122ab0:	1000e504 	.word	0x1000e504

08122ab4 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8122ab4:	b580      	push	{r7, lr}
 8122ab6:	b082      	sub	sp, #8
 8122ab8:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 8122aba:	2000      	movs	r0, #0
 8122abc:	f7f7 fdf6 	bl	811a6ac <memp_malloc>
 8122ac0:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8122ac2:	687b      	ldr	r3, [r7, #4]
 8122ac4:	2b00      	cmp	r3, #0
 8122ac6:	d007      	beq.n	8122ad8 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8122ac8:	2220      	movs	r2, #32
 8122aca:	2100      	movs	r1, #0
 8122acc:	6878      	ldr	r0, [r7, #4]
 8122ace:	f001 f9e5 	bl	8123e9c <memset>
    pcb->ttl = UDP_TTL;
 8122ad2:	687b      	ldr	r3, [r7, #4]
 8122ad4:	22ff      	movs	r2, #255	@ 0xff
 8122ad6:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8122ad8:	687b      	ldr	r3, [r7, #4]
}
 8122ada:	4618      	mov	r0, r3
 8122adc:	3708      	adds	r7, #8
 8122ade:	46bd      	mov	sp, r7
 8122ae0:	bd80      	pop	{r7, pc}
	...

08122ae4 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8122ae4:	b480      	push	{r7}
 8122ae6:	b085      	sub	sp, #20
 8122ae8:	af00      	add	r7, sp, #0
 8122aea:	6078      	str	r0, [r7, #4]
 8122aec:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8122aee:	687b      	ldr	r3, [r7, #4]
 8122af0:	2b00      	cmp	r3, #0
 8122af2:	d01e      	beq.n	8122b32 <udp_netif_ip_addr_changed+0x4e>
 8122af4:	687b      	ldr	r3, [r7, #4]
 8122af6:	681b      	ldr	r3, [r3, #0]
 8122af8:	2b00      	cmp	r3, #0
 8122afa:	d01a      	beq.n	8122b32 <udp_netif_ip_addr_changed+0x4e>
 8122afc:	683b      	ldr	r3, [r7, #0]
 8122afe:	2b00      	cmp	r3, #0
 8122b00:	d017      	beq.n	8122b32 <udp_netif_ip_addr_changed+0x4e>
 8122b02:	683b      	ldr	r3, [r7, #0]
 8122b04:	681b      	ldr	r3, [r3, #0]
 8122b06:	2b00      	cmp	r3, #0
 8122b08:	d013      	beq.n	8122b32 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8122b0a:	4b0d      	ldr	r3, [pc, #52]	@ (8122b40 <udp_netif_ip_addr_changed+0x5c>)
 8122b0c:	681b      	ldr	r3, [r3, #0]
 8122b0e:	60fb      	str	r3, [r7, #12]
 8122b10:	e00c      	b.n	8122b2c <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8122b12:	68fb      	ldr	r3, [r7, #12]
 8122b14:	681a      	ldr	r2, [r3, #0]
 8122b16:	687b      	ldr	r3, [r7, #4]
 8122b18:	681b      	ldr	r3, [r3, #0]
 8122b1a:	429a      	cmp	r2, r3
 8122b1c:	d103      	bne.n	8122b26 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8122b1e:	683b      	ldr	r3, [r7, #0]
 8122b20:	681a      	ldr	r2, [r3, #0]
 8122b22:	68fb      	ldr	r3, [r7, #12]
 8122b24:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8122b26:	68fb      	ldr	r3, [r7, #12]
 8122b28:	68db      	ldr	r3, [r3, #12]
 8122b2a:	60fb      	str	r3, [r7, #12]
 8122b2c:	68fb      	ldr	r3, [r7, #12]
 8122b2e:	2b00      	cmp	r3, #0
 8122b30:	d1ef      	bne.n	8122b12 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8122b32:	bf00      	nop
 8122b34:	3714      	adds	r7, #20
 8122b36:	46bd      	mov	sp, r7
 8122b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8122b3c:	4770      	bx	lr
 8122b3e:	bf00      	nop
 8122b40:	1000e504 	.word	0x1000e504

08122b44 <_ZdlPv>:
 8122b44:	f000 ba44 	b.w	8122fd0 <free>

08122b48 <_ZdlPvj>:
 8122b48:	f7ff bffc 	b.w	8122b44 <_ZdlPv>

08122b4c <__cxa_guard_acquire>:
 8122b4c:	6802      	ldr	r2, [r0, #0]
 8122b4e:	07d2      	lsls	r2, r2, #31
 8122b50:	4603      	mov	r3, r0
 8122b52:	d405      	bmi.n	8122b60 <__cxa_guard_acquire+0x14>
 8122b54:	7842      	ldrb	r2, [r0, #1]
 8122b56:	b102      	cbz	r2, 8122b5a <__cxa_guard_acquire+0xe>
 8122b58:	deff      	udf	#255	@ 0xff
 8122b5a:	2001      	movs	r0, #1
 8122b5c:	7058      	strb	r0, [r3, #1]
 8122b5e:	4770      	bx	lr
 8122b60:	2000      	movs	r0, #0
 8122b62:	4770      	bx	lr

08122b64 <__cxa_guard_release>:
 8122b64:	2301      	movs	r3, #1
 8122b66:	6003      	str	r3, [r0, #0]
 8122b68:	4770      	bx	lr

08122b6a <_Znwj>:
 8122b6a:	2801      	cmp	r0, #1
 8122b6c:	bf38      	it	cc
 8122b6e:	2001      	movcc	r0, #1
 8122b70:	b510      	push	{r4, lr}
 8122b72:	4604      	mov	r4, r0
 8122b74:	4620      	mov	r0, r4
 8122b76:	f000 fa23 	bl	8122fc0 <malloc>
 8122b7a:	b100      	cbz	r0, 8122b7e <_Znwj+0x14>
 8122b7c:	bd10      	pop	{r4, pc}
 8122b7e:	f000 f96f 	bl	8122e60 <_ZSt15get_new_handlerv>
 8122b82:	b908      	cbnz	r0, 8122b88 <_Znwj+0x1e>
 8122b84:	f000 fa14 	bl	8122fb0 <abort>
 8122b88:	4780      	blx	r0
 8122b8a:	e7f3      	b.n	8122b74 <_Znwj+0xa>

08122b8c <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>:
 8122b8c:	68c3      	ldr	r3, [r0, #12]
 8122b8e:	689a      	ldr	r2, [r3, #8]
 8122b90:	60c2      	str	r2, [r0, #12]
 8122b92:	b510      	push	{r4, lr}
 8122b94:	b102      	cbz	r2, 8122b98 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0xc>
 8122b96:	6050      	str	r0, [r2, #4]
 8122b98:	6842      	ldr	r2, [r0, #4]
 8122b9a:	605a      	str	r2, [r3, #4]
 8122b9c:	680c      	ldr	r4, [r1, #0]
 8122b9e:	4284      	cmp	r4, r0
 8122ba0:	d103      	bne.n	8122baa <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0x1e>
 8122ba2:	600b      	str	r3, [r1, #0]
 8122ba4:	6098      	str	r0, [r3, #8]
 8122ba6:	6043      	str	r3, [r0, #4]
 8122ba8:	bd10      	pop	{r4, pc}
 8122baa:	6891      	ldr	r1, [r2, #8]
 8122bac:	4281      	cmp	r1, r0
 8122bae:	bf0c      	ite	eq
 8122bb0:	6093      	streq	r3, [r2, #8]
 8122bb2:	60d3      	strne	r3, [r2, #12]
 8122bb4:	e7f6      	b.n	8122ba4 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0x18>

08122bb6 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>:
 8122bb6:	6883      	ldr	r3, [r0, #8]
 8122bb8:	68da      	ldr	r2, [r3, #12]
 8122bba:	6082      	str	r2, [r0, #8]
 8122bbc:	b510      	push	{r4, lr}
 8122bbe:	b102      	cbz	r2, 8122bc2 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0xc>
 8122bc0:	6050      	str	r0, [r2, #4]
 8122bc2:	6842      	ldr	r2, [r0, #4]
 8122bc4:	605a      	str	r2, [r3, #4]
 8122bc6:	680c      	ldr	r4, [r1, #0]
 8122bc8:	4284      	cmp	r4, r0
 8122bca:	d103      	bne.n	8122bd4 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0x1e>
 8122bcc:	600b      	str	r3, [r1, #0]
 8122bce:	60d8      	str	r0, [r3, #12]
 8122bd0:	6043      	str	r3, [r0, #4]
 8122bd2:	bd10      	pop	{r4, pc}
 8122bd4:	68d1      	ldr	r1, [r2, #12]
 8122bd6:	4281      	cmp	r1, r0
 8122bd8:	bf0c      	ite	eq
 8122bda:	60d3      	streq	r3, [r2, #12]
 8122bdc:	6093      	strne	r3, [r2, #8]
 8122bde:	e7f6      	b.n	8122bce <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0x18>

08122be0 <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base>:
 8122be0:	68c3      	ldr	r3, [r0, #12]
 8122be2:	b123      	cbz	r3, 8122bee <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base+0xe>
 8122be4:	4618      	mov	r0, r3
 8122be6:	689b      	ldr	r3, [r3, #8]
 8122be8:	2b00      	cmp	r3, #0
 8122bea:	d1fb      	bne.n	8122be4 <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base+0x4>
 8122bec:	4770      	bx	lr
 8122bee:	6843      	ldr	r3, [r0, #4]
 8122bf0:	68da      	ldr	r2, [r3, #12]
 8122bf2:	4282      	cmp	r2, r0
 8122bf4:	d004      	beq.n	8122c00 <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base+0x20>
 8122bf6:	68c2      	ldr	r2, [r0, #12]
 8122bf8:	4293      	cmp	r3, r2
 8122bfa:	bf18      	it	ne
 8122bfc:	4618      	movne	r0, r3
 8122bfe:	4770      	bx	lr
 8122c00:	4618      	mov	r0, r3
 8122c02:	685b      	ldr	r3, [r3, #4]
 8122c04:	e7f4      	b.n	8122bf0 <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base+0x10>

08122c06 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base>:
 8122c06:	7802      	ldrb	r2, [r0, #0]
 8122c08:	4603      	mov	r3, r0
 8122c0a:	b92a      	cbnz	r2, 8122c18 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x12>
 8122c0c:	6842      	ldr	r2, [r0, #4]
 8122c0e:	6852      	ldr	r2, [r2, #4]
 8122c10:	4282      	cmp	r2, r0
 8122c12:	d101      	bne.n	8122c18 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x12>
 8122c14:	68d0      	ldr	r0, [r2, #12]
 8122c16:	4770      	bx	lr
 8122c18:	689a      	ldr	r2, [r3, #8]
 8122c1a:	b122      	cbz	r2, 8122c26 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x20>
 8122c1c:	4610      	mov	r0, r2
 8122c1e:	68d2      	ldr	r2, [r2, #12]
 8122c20:	2a00      	cmp	r2, #0
 8122c22:	d1fb      	bne.n	8122c1c <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x16>
 8122c24:	4770      	bx	lr
 8122c26:	6858      	ldr	r0, [r3, #4]
 8122c28:	6882      	ldr	r2, [r0, #8]
 8122c2a:	429a      	cmp	r2, r3
 8122c2c:	d000      	beq.n	8122c30 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x2a>
 8122c2e:	4770      	bx	lr
 8122c30:	4603      	mov	r3, r0
 8122c32:	6840      	ldr	r0, [r0, #4]
 8122c34:	e7f8      	b.n	8122c28 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x22>

08122c36 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>:
 8122c36:	f7ff bfd3 	b.w	8122be0 <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base>

08122c3a <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>:
 8122c3a:	f7ff bfe4 	b.w	8122c06 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base>

08122c3e <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>:
 8122c3e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8122c42:	461d      	mov	r5, r3
 8122c44:	1d1f      	adds	r7, r3, #4
 8122c46:	2300      	movs	r3, #0
 8122c48:	e9c1 3302 	strd	r3, r3, [r1, #8]
 8122c4c:	460c      	mov	r4, r1
 8122c4e:	604a      	str	r2, [r1, #4]
 8122c50:	700b      	strb	r3, [r1, #0]
 8122c52:	b1a0      	cbz	r0, 8122c7e <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x40>
 8122c54:	4295      	cmp	r5, r2
 8122c56:	6091      	str	r1, [r2, #8]
 8122c58:	d102      	bne.n	8122c60 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x22>
 8122c5a:	6069      	str	r1, [r5, #4]
 8122c5c:	60ec      	str	r4, [r5, #12]
 8122c5e:	e003      	b.n	8122c68 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x2a>
 8122c60:	68ab      	ldr	r3, [r5, #8]
 8122c62:	4293      	cmp	r3, r2
 8122c64:	bf08      	it	eq
 8122c66:	60a9      	streq	r1, [r5, #8]
 8122c68:	f04f 0900 	mov.w	r9, #0
 8122c6c:	f04f 0801 	mov.w	r8, #1
 8122c70:	686b      	ldr	r3, [r5, #4]
 8122c72:	42a3      	cmp	r3, r4
 8122c74:	d132      	bne.n	8122cdc <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x9e>
 8122c76:	2201      	movs	r2, #1
 8122c78:	701a      	strb	r2, [r3, #0]
 8122c7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8122c7e:	60d1      	str	r1, [r2, #12]
 8122c80:	68eb      	ldr	r3, [r5, #12]
 8122c82:	4293      	cmp	r3, r2
 8122c84:	d1f0      	bne.n	8122c68 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x2a>
 8122c86:	e7e9      	b.n	8122c5c <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x1e>
 8122c88:	68c3      	ldr	r3, [r0, #12]
 8122c8a:	42a3      	cmp	r3, r4
 8122c8c:	d103      	bne.n	8122c96 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x58>
 8122c8e:	4639      	mov	r1, r7
 8122c90:	f7ff ff7c 	bl	8122b8c <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
 8122c94:	4604      	mov	r4, r0
 8122c96:	6863      	ldr	r3, [r4, #4]
 8122c98:	4639      	mov	r1, r7
 8122c9a:	f883 8000 	strb.w	r8, [r3]
 8122c9e:	4630      	mov	r0, r6
 8122ca0:	f886 9000 	strb.w	r9, [r6]
 8122ca4:	f7ff ff87 	bl	8122bb6 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
 8122ca8:	e7e2      	b.n	8122c70 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x32>
 8122caa:	b133      	cbz	r3, 8122cba <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x7c>
 8122cac:	781a      	ldrb	r2, [r3, #0]
 8122cae:	b922      	cbnz	r2, 8122cba <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x7c>
 8122cb0:	f880 8000 	strb.w	r8, [r0]
 8122cb4:	f883 8000 	strb.w	r8, [r3]
 8122cb8:	e021      	b.n	8122cfe <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0xc0>
 8122cba:	6883      	ldr	r3, [r0, #8]
 8122cbc:	42a3      	cmp	r3, r4
 8122cbe:	d103      	bne.n	8122cc8 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x8a>
 8122cc0:	4639      	mov	r1, r7
 8122cc2:	f7ff ff78 	bl	8122bb6 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
 8122cc6:	4604      	mov	r4, r0
 8122cc8:	6863      	ldr	r3, [r4, #4]
 8122cca:	4639      	mov	r1, r7
 8122ccc:	f883 8000 	strb.w	r8, [r3]
 8122cd0:	4630      	mov	r0, r6
 8122cd2:	f886 9000 	strb.w	r9, [r6]
 8122cd6:	f7ff ff59 	bl	8122b8c <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
 8122cda:	e7c9      	b.n	8122c70 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x32>
 8122cdc:	6860      	ldr	r0, [r4, #4]
 8122cde:	7802      	ldrb	r2, [r0, #0]
 8122ce0:	2a00      	cmp	r2, #0
 8122ce2:	d1c8      	bne.n	8122c76 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x38>
 8122ce4:	6846      	ldr	r6, [r0, #4]
 8122ce6:	68b3      	ldr	r3, [r6, #8]
 8122ce8:	4283      	cmp	r3, r0
 8122cea:	d1de      	bne.n	8122caa <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x6c>
 8122cec:	68f2      	ldr	r2, [r6, #12]
 8122cee:	2a00      	cmp	r2, #0
 8122cf0:	d0ca      	beq.n	8122c88 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x4a>
 8122cf2:	7811      	ldrb	r1, [r2, #0]
 8122cf4:	2900      	cmp	r1, #0
 8122cf6:	d1c7      	bne.n	8122c88 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x4a>
 8122cf8:	2101      	movs	r1, #1
 8122cfa:	7019      	strb	r1, [r3, #0]
 8122cfc:	7011      	strb	r1, [r2, #0]
 8122cfe:	f886 9000 	strb.w	r9, [r6]
 8122d02:	4634      	mov	r4, r6
 8122d04:	e7b4      	b.n	8122c70 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x32>

08122d06 <_ZSt17__throw_bad_allocv>:
 8122d06:	b508      	push	{r3, lr}
 8122d08:	f000 f952 	bl	8122fb0 <abort>

08122d0c <_ZSt28__throw_bad_array_new_lengthv>:
 8122d0c:	b508      	push	{r3, lr}
 8122d0e:	f000 f94f 	bl	8122fb0 <abort>

08122d12 <_ZSt20__throw_length_errorPKc>:
 8122d12:	b508      	push	{r3, lr}
 8122d14:	f000 f94c 	bl	8122fb0 <abort>

08122d18 <_ZSt25__throw_bad_function_callv>:
 8122d18:	b508      	push	{r3, lr}
 8122d1a:	f000 f949 	bl	8122fb0 <abort>
	...

08122d20 <_ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEj>:
 8122d20:	290d      	cmp	r1, #13
 8122d22:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8122d24:	4605      	mov	r5, r0
 8122d26:	d82f      	bhi.n	8122d88 <_ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEj+0x68>
 8122d28:	b3b1      	cbz	r1, 8122d98 <_ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEj+0x78>
 8122d2a:	4b1c      	ldr	r3, [pc, #112]	@ (8122d9c <_ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEj+0x7c>)
 8122d2c:	5c5c      	ldrb	r4, [r3, r1]
 8122d2e:	4620      	mov	r0, r4
 8122d30:	f7dd fc80 	bl	8100634 <__aeabi_i2d>
 8122d34:	4606      	mov	r6, r0
 8122d36:	6828      	ldr	r0, [r5, #0]
 8122d38:	460f      	mov	r7, r1
 8122d3a:	f7dd fc8d 	bl	8100658 <__aeabi_f2d>
 8122d3e:	4602      	mov	r2, r0
 8122d40:	460b      	mov	r3, r1
 8122d42:	4630      	mov	r0, r6
 8122d44:	4639      	mov	r1, r7
 8122d46:	f7dd fcdf 	bl	8100708 <__aeabi_dmul>
 8122d4a:	ec41 0b10 	vmov	d0, r0, r1
 8122d4e:	f000 f88f 	bl	8122e70 <floor>
 8122d52:	ec51 0b10 	vmov	r0, r1, d0
 8122d56:	f7dd ff71 	bl	8100c3c <__aeabi_d2uiz>
 8122d5a:	6068      	str	r0, [r5, #4]
 8122d5c:	4620      	mov	r0, r4
 8122d5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8122d60:	1058      	asrs	r0, r3, #1
 8122d62:	eb02 0480 	add.w	r4, r2, r0, lsl #2
 8122d66:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 8122d6a:	428e      	cmp	r6, r1
 8122d6c:	d20f      	bcs.n	8122d8e <_ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEj+0x6e>
 8122d6e:	1a1b      	subs	r3, r3, r0
 8122d70:	1d22      	adds	r2, r4, #4
 8122d72:	3b01      	subs	r3, #1
 8122d74:	2b00      	cmp	r3, #0
 8122d76:	dcf3      	bgt.n	8122d60 <_ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEj+0x40>
 8122d78:	4b09      	ldr	r3, [pc, #36]	@ (8122da0 <_ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEj+0x80>)
 8122d7a:	6814      	ldr	r4, [r2, #0]
 8122d7c:	429a      	cmp	r2, r3
 8122d7e:	d008      	beq.n	8122d92 <_ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEj+0x72>
 8122d80:	4620      	mov	r0, r4
 8122d82:	f7dd fc47 	bl	8100614 <__aeabi_ui2d>
 8122d86:	e7d5      	b.n	8122d34 <_ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEj+0x14>
 8122d88:	4a06      	ldr	r2, [pc, #24]	@ (8122da4 <_ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEj+0x84>)
 8122d8a:	23f9      	movs	r3, #249	@ 0xf9
 8122d8c:	e7f2      	b.n	8122d74 <_ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEj+0x54>
 8122d8e:	4603      	mov	r3, r0
 8122d90:	e7f0      	b.n	8122d74 <_ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEj+0x54>
 8122d92:	f04f 30ff 	mov.w	r0, #4294967295
 8122d96:	e7e0      	b.n	8122d5a <_ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEj+0x3a>
 8122d98:	2401      	movs	r4, #1
 8122d9a:	e7df      	b.n	8122d5c <_ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEj+0x3c>
 8122d9c:	08128548 	.word	0x08128548
 8122da0:	08128954 	.word	0x08128954
 8122da4:	08128570 	.word	0x08128570

08122da8 <_ZNKSt8__detail20_Prime_rehash_policy14_M_need_rehashEjjj>:
 8122da8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8122dac:	4692      	mov	sl, r2
 8122dae:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8122db0:	eb03 0802 	add.w	r8, r3, r2
 8122db4:	684b      	ldr	r3, [r1, #4]
 8122db6:	4598      	cmp	r8, r3
 8122db8:	4604      	mov	r4, r0
 8122dba:	460d      	mov	r5, r1
 8122dbc:	d94a      	bls.n	8122e54 <_ZNKSt8__detail20_Prime_rehash_policy14_M_need_rehashEjjj+0xac>
 8122dbe:	2b00      	cmp	r3, #0
 8122dc0:	6808      	ldr	r0, [r1, #0]
 8122dc2:	bf0c      	ite	eq
 8122dc4:	f04f 090b 	moveq.w	r9, #11
 8122dc8:	f04f 0900 	movne.w	r9, #0
 8122dcc:	f7dd fc44 	bl	8100658 <__aeabi_f2d>
 8122dd0:	45c8      	cmp	r8, r9
 8122dd2:	4606      	mov	r6, r0
 8122dd4:	460f      	mov	r7, r1
 8122dd6:	4640      	mov	r0, r8
 8122dd8:	bf38      	it	cc
 8122dda:	4648      	movcc	r0, r9
 8122ddc:	f7dd fc1a 	bl	8100614 <__aeabi_ui2d>
 8122de0:	4632      	mov	r2, r6
 8122de2:	463b      	mov	r3, r7
 8122de4:	f7dd fdba 	bl	810095c <__aeabi_ddiv>
 8122de8:	e9cd 0100 	strd	r0, r1, [sp]
 8122dec:	4650      	mov	r0, sl
 8122dee:	f7dd fc11 	bl	8100614 <__aeabi_ui2d>
 8122df2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8122df6:	4680      	mov	r8, r0
 8122df8:	4689      	mov	r9, r1
 8122dfa:	f7dd ff01 	bl	8100c00 <__aeabi_dcmple>
 8122dfe:	b1d0      	cbz	r0, 8122e36 <_ZNKSt8__detail20_Prime_rehash_policy14_M_need_rehashEjjj+0x8e>
 8122e00:	ed9d 0b00 	vldr	d0, [sp]
 8122e04:	f000 f834 	bl	8122e70 <floor>
 8122e08:	4b14      	ldr	r3, [pc, #80]	@ (8122e5c <_ZNKSt8__detail20_Prime_rehash_policy14_M_need_rehashEjjj+0xb4>)
 8122e0a:	ec51 0b10 	vmov	r0, r1, d0
 8122e0e:	2200      	movs	r2, #0
 8122e10:	f7dd fac4 	bl	810039c <__adddf3>
 8122e14:	f7dd ff12 	bl	8100c3c <__aeabi_d2uiz>
 8122e18:	ea4f 014a 	mov.w	r1, sl, lsl #1
 8122e1c:	4281      	cmp	r1, r0
 8122e1e:	bf38      	it	cc
 8122e20:	4601      	movcc	r1, r0
 8122e22:	4628      	mov	r0, r5
 8122e24:	f7ff ff7c 	bl	8122d20 <_ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEj>
 8122e28:	2301      	movs	r3, #1
 8122e2a:	7023      	strb	r3, [r4, #0]
 8122e2c:	6060      	str	r0, [r4, #4]
 8122e2e:	4620      	mov	r0, r4
 8122e30:	b002      	add	sp, #8
 8122e32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8122e36:	4642      	mov	r2, r8
 8122e38:	464b      	mov	r3, r9
 8122e3a:	4630      	mov	r0, r6
 8122e3c:	4639      	mov	r1, r7
 8122e3e:	f7dd fc63 	bl	8100708 <__aeabi_dmul>
 8122e42:	ec41 0b10 	vmov	d0, r0, r1
 8122e46:	f000 f813 	bl	8122e70 <floor>
 8122e4a:	ec51 0b10 	vmov	r0, r1, d0
 8122e4e:	f7dd fef5 	bl	8100c3c <__aeabi_d2uiz>
 8122e52:	6068      	str	r0, [r5, #4]
 8122e54:	2300      	movs	r3, #0
 8122e56:	e9c4 3300 	strd	r3, r3, [r4]
 8122e5a:	e7e8      	b.n	8122e2e <_ZNKSt8__detail20_Prime_rehash_policy14_M_need_rehashEjjj+0x86>
 8122e5c:	3ff00000 	.word	0x3ff00000

08122e60 <_ZSt15get_new_handlerv>:
 8122e60:	4b02      	ldr	r3, [pc, #8]	@ (8122e6c <_ZSt15get_new_handlerv+0xc>)
 8122e62:	6818      	ldr	r0, [r3, #0]
 8122e64:	f3bf 8f5b 	dmb	ish
 8122e68:	4770      	bx	lr
 8122e6a:	bf00      	nop
 8122e6c:	1000e508 	.word	0x1000e508

08122e70 <floor>:
 8122e70:	ec51 0b10 	vmov	r0, r1, d0
 8122e74:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8122e78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8122e7c:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 8122e80:	2e13      	cmp	r6, #19
 8122e82:	460c      	mov	r4, r1
 8122e84:	4605      	mov	r5, r0
 8122e86:	4680      	mov	r8, r0
 8122e88:	dc34      	bgt.n	8122ef4 <floor+0x84>
 8122e8a:	2e00      	cmp	r6, #0
 8122e8c:	da17      	bge.n	8122ebe <floor+0x4e>
 8122e8e:	a332      	add	r3, pc, #200	@ (adr r3, 8122f58 <floor+0xe8>)
 8122e90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8122e94:	f7dd fa82 	bl	810039c <__adddf3>
 8122e98:	2200      	movs	r2, #0
 8122e9a:	2300      	movs	r3, #0
 8122e9c:	f7dd fec4 	bl	8100c28 <__aeabi_dcmpgt>
 8122ea0:	b150      	cbz	r0, 8122eb8 <floor+0x48>
 8122ea2:	2c00      	cmp	r4, #0
 8122ea4:	da55      	bge.n	8122f52 <floor+0xe2>
 8122ea6:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 8122eaa:	432c      	orrs	r4, r5
 8122eac:	2500      	movs	r5, #0
 8122eae:	42ac      	cmp	r4, r5
 8122eb0:	4c2b      	ldr	r4, [pc, #172]	@ (8122f60 <floor+0xf0>)
 8122eb2:	bf08      	it	eq
 8122eb4:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8122eb8:	4621      	mov	r1, r4
 8122eba:	4628      	mov	r0, r5
 8122ebc:	e023      	b.n	8122f06 <floor+0x96>
 8122ebe:	4f29      	ldr	r7, [pc, #164]	@ (8122f64 <floor+0xf4>)
 8122ec0:	4137      	asrs	r7, r6
 8122ec2:	ea01 0307 	and.w	r3, r1, r7
 8122ec6:	4303      	orrs	r3, r0
 8122ec8:	d01d      	beq.n	8122f06 <floor+0x96>
 8122eca:	a323      	add	r3, pc, #140	@ (adr r3, 8122f58 <floor+0xe8>)
 8122ecc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8122ed0:	f7dd fa64 	bl	810039c <__adddf3>
 8122ed4:	2200      	movs	r2, #0
 8122ed6:	2300      	movs	r3, #0
 8122ed8:	f7dd fea6 	bl	8100c28 <__aeabi_dcmpgt>
 8122edc:	2800      	cmp	r0, #0
 8122ede:	d0eb      	beq.n	8122eb8 <floor+0x48>
 8122ee0:	2c00      	cmp	r4, #0
 8122ee2:	bfbe      	ittt	lt
 8122ee4:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 8122ee8:	4133      	asrlt	r3, r6
 8122eea:	18e4      	addlt	r4, r4, r3
 8122eec:	ea24 0407 	bic.w	r4, r4, r7
 8122ef0:	2500      	movs	r5, #0
 8122ef2:	e7e1      	b.n	8122eb8 <floor+0x48>
 8122ef4:	2e33      	cmp	r6, #51	@ 0x33
 8122ef6:	dd0a      	ble.n	8122f0e <floor+0x9e>
 8122ef8:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8122efc:	d103      	bne.n	8122f06 <floor+0x96>
 8122efe:	4602      	mov	r2, r0
 8122f00:	460b      	mov	r3, r1
 8122f02:	f7dd fa4b 	bl	810039c <__adddf3>
 8122f06:	ec41 0b10 	vmov	d0, r0, r1
 8122f0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8122f0e:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 8122f12:	f04f 37ff 	mov.w	r7, #4294967295
 8122f16:	40df      	lsrs	r7, r3
 8122f18:	4207      	tst	r7, r0
 8122f1a:	d0f4      	beq.n	8122f06 <floor+0x96>
 8122f1c:	a30e      	add	r3, pc, #56	@ (adr r3, 8122f58 <floor+0xe8>)
 8122f1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8122f22:	f7dd fa3b 	bl	810039c <__adddf3>
 8122f26:	2200      	movs	r2, #0
 8122f28:	2300      	movs	r3, #0
 8122f2a:	f7dd fe7d 	bl	8100c28 <__aeabi_dcmpgt>
 8122f2e:	2800      	cmp	r0, #0
 8122f30:	d0c2      	beq.n	8122eb8 <floor+0x48>
 8122f32:	2c00      	cmp	r4, #0
 8122f34:	da0a      	bge.n	8122f4c <floor+0xdc>
 8122f36:	2e14      	cmp	r6, #20
 8122f38:	d101      	bne.n	8122f3e <floor+0xce>
 8122f3a:	3401      	adds	r4, #1
 8122f3c:	e006      	b.n	8122f4c <floor+0xdc>
 8122f3e:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 8122f42:	2301      	movs	r3, #1
 8122f44:	40b3      	lsls	r3, r6
 8122f46:	441d      	add	r5, r3
 8122f48:	4545      	cmp	r5, r8
 8122f4a:	d3f6      	bcc.n	8122f3a <floor+0xca>
 8122f4c:	ea25 0507 	bic.w	r5, r5, r7
 8122f50:	e7b2      	b.n	8122eb8 <floor+0x48>
 8122f52:	2500      	movs	r5, #0
 8122f54:	462c      	mov	r4, r5
 8122f56:	e7af      	b.n	8122eb8 <floor+0x48>
 8122f58:	8800759c 	.word	0x8800759c
 8122f5c:	7e37e43c 	.word	0x7e37e43c
 8122f60:	bff00000 	.word	0xbff00000
 8122f64:	000fffff 	.word	0x000fffff

08122f68 <roundf>:
 8122f68:	ee10 0a10 	vmov	r0, s0
 8122f6c:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 8122f70:	3a7f      	subs	r2, #127	@ 0x7f
 8122f72:	2a16      	cmp	r2, #22
 8122f74:	dc15      	bgt.n	8122fa2 <roundf+0x3a>
 8122f76:	2a00      	cmp	r2, #0
 8122f78:	da08      	bge.n	8122f8c <roundf+0x24>
 8122f7a:	3201      	adds	r2, #1
 8122f7c:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8122f80:	d101      	bne.n	8122f86 <roundf+0x1e>
 8122f82:	f043 537e 	orr.w	r3, r3, #1065353216	@ 0x3f800000
 8122f86:	ee00 3a10 	vmov	s0, r3
 8122f8a:	4770      	bx	lr
 8122f8c:	4907      	ldr	r1, [pc, #28]	@ (8122fac <roundf+0x44>)
 8122f8e:	4111      	asrs	r1, r2
 8122f90:	4201      	tst	r1, r0
 8122f92:	d0fa      	beq.n	8122f8a <roundf+0x22>
 8122f94:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8122f98:	4113      	asrs	r3, r2
 8122f9a:	4403      	add	r3, r0
 8122f9c:	ea23 0301 	bic.w	r3, r3, r1
 8122fa0:	e7f1      	b.n	8122f86 <roundf+0x1e>
 8122fa2:	2a80      	cmp	r2, #128	@ 0x80
 8122fa4:	d1f1      	bne.n	8122f8a <roundf+0x22>
 8122fa6:	ee30 0a00 	vadd.f32	s0, s0, s0
 8122faa:	4770      	bx	lr
 8122fac:	007fffff 	.word	0x007fffff

08122fb0 <abort>:
 8122fb0:	b508      	push	{r3, lr}
 8122fb2:	2006      	movs	r0, #6
 8122fb4:	f000 ffcc 	bl	8123f50 <raise>
 8122fb8:	2001      	movs	r0, #1
 8122fba:	f7e0 f94b 	bl	8103254 <_exit>
	...

08122fc0 <malloc>:
 8122fc0:	4b02      	ldr	r3, [pc, #8]	@ (8122fcc <malloc+0xc>)
 8122fc2:	4601      	mov	r1, r0
 8122fc4:	6818      	ldr	r0, [r3, #0]
 8122fc6:	f000 b82d 	b.w	8123024 <_malloc_r>
 8122fca:	bf00      	nop
 8122fcc:	10000040 	.word	0x10000040

08122fd0 <free>:
 8122fd0:	4b02      	ldr	r3, [pc, #8]	@ (8122fdc <free+0xc>)
 8122fd2:	4601      	mov	r1, r0
 8122fd4:	6818      	ldr	r0, [r3, #0]
 8122fd6:	f001 b8dd 	b.w	8124194 <_free_r>
 8122fda:	bf00      	nop
 8122fdc:	10000040 	.word	0x10000040

08122fe0 <sbrk_aligned>:
 8122fe0:	b570      	push	{r4, r5, r6, lr}
 8122fe2:	4e0f      	ldr	r6, [pc, #60]	@ (8123020 <sbrk_aligned+0x40>)
 8122fe4:	460c      	mov	r4, r1
 8122fe6:	6831      	ldr	r1, [r6, #0]
 8122fe8:	4605      	mov	r5, r0
 8122fea:	b911      	cbnz	r1, 8122ff2 <sbrk_aligned+0x12>
 8122fec:	f001 f856 	bl	812409c <_sbrk_r>
 8122ff0:	6030      	str	r0, [r6, #0]
 8122ff2:	4621      	mov	r1, r4
 8122ff4:	4628      	mov	r0, r5
 8122ff6:	f001 f851 	bl	812409c <_sbrk_r>
 8122ffa:	1c43      	adds	r3, r0, #1
 8122ffc:	d103      	bne.n	8123006 <sbrk_aligned+0x26>
 8122ffe:	f04f 34ff 	mov.w	r4, #4294967295
 8123002:	4620      	mov	r0, r4
 8123004:	bd70      	pop	{r4, r5, r6, pc}
 8123006:	1cc4      	adds	r4, r0, #3
 8123008:	f024 0403 	bic.w	r4, r4, #3
 812300c:	42a0      	cmp	r0, r4
 812300e:	d0f8      	beq.n	8123002 <sbrk_aligned+0x22>
 8123010:	1a21      	subs	r1, r4, r0
 8123012:	4628      	mov	r0, r5
 8123014:	f001 f842 	bl	812409c <_sbrk_r>
 8123018:	3001      	adds	r0, #1
 812301a:	d1f2      	bne.n	8123002 <sbrk_aligned+0x22>
 812301c:	e7ef      	b.n	8122ffe <sbrk_aligned+0x1e>
 812301e:	bf00      	nop
 8123020:	1000e50c 	.word	0x1000e50c

08123024 <_malloc_r>:
 8123024:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8123028:	1ccd      	adds	r5, r1, #3
 812302a:	f025 0503 	bic.w	r5, r5, #3
 812302e:	3508      	adds	r5, #8
 8123030:	2d0c      	cmp	r5, #12
 8123032:	bf38      	it	cc
 8123034:	250c      	movcc	r5, #12
 8123036:	2d00      	cmp	r5, #0
 8123038:	4606      	mov	r6, r0
 812303a:	db01      	blt.n	8123040 <_malloc_r+0x1c>
 812303c:	42a9      	cmp	r1, r5
 812303e:	d904      	bls.n	812304a <_malloc_r+0x26>
 8123040:	230c      	movs	r3, #12
 8123042:	6033      	str	r3, [r6, #0]
 8123044:	2000      	movs	r0, #0
 8123046:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 812304a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8123120 <_malloc_r+0xfc>
 812304e:	f000 f869 	bl	8123124 <__malloc_lock>
 8123052:	f8d8 3000 	ldr.w	r3, [r8]
 8123056:	461c      	mov	r4, r3
 8123058:	bb44      	cbnz	r4, 81230ac <_malloc_r+0x88>
 812305a:	4629      	mov	r1, r5
 812305c:	4630      	mov	r0, r6
 812305e:	f7ff ffbf 	bl	8122fe0 <sbrk_aligned>
 8123062:	1c43      	adds	r3, r0, #1
 8123064:	4604      	mov	r4, r0
 8123066:	d158      	bne.n	812311a <_malloc_r+0xf6>
 8123068:	f8d8 4000 	ldr.w	r4, [r8]
 812306c:	4627      	mov	r7, r4
 812306e:	2f00      	cmp	r7, #0
 8123070:	d143      	bne.n	81230fa <_malloc_r+0xd6>
 8123072:	2c00      	cmp	r4, #0
 8123074:	d04b      	beq.n	812310e <_malloc_r+0xea>
 8123076:	6823      	ldr	r3, [r4, #0]
 8123078:	4639      	mov	r1, r7
 812307a:	4630      	mov	r0, r6
 812307c:	eb04 0903 	add.w	r9, r4, r3
 8123080:	f001 f80c 	bl	812409c <_sbrk_r>
 8123084:	4581      	cmp	r9, r0
 8123086:	d142      	bne.n	812310e <_malloc_r+0xea>
 8123088:	6821      	ldr	r1, [r4, #0]
 812308a:	1a6d      	subs	r5, r5, r1
 812308c:	4629      	mov	r1, r5
 812308e:	4630      	mov	r0, r6
 8123090:	f7ff ffa6 	bl	8122fe0 <sbrk_aligned>
 8123094:	3001      	adds	r0, #1
 8123096:	d03a      	beq.n	812310e <_malloc_r+0xea>
 8123098:	6823      	ldr	r3, [r4, #0]
 812309a:	442b      	add	r3, r5
 812309c:	6023      	str	r3, [r4, #0]
 812309e:	f8d8 3000 	ldr.w	r3, [r8]
 81230a2:	685a      	ldr	r2, [r3, #4]
 81230a4:	bb62      	cbnz	r2, 8123100 <_malloc_r+0xdc>
 81230a6:	f8c8 7000 	str.w	r7, [r8]
 81230aa:	e00f      	b.n	81230cc <_malloc_r+0xa8>
 81230ac:	6822      	ldr	r2, [r4, #0]
 81230ae:	1b52      	subs	r2, r2, r5
 81230b0:	d420      	bmi.n	81230f4 <_malloc_r+0xd0>
 81230b2:	2a0b      	cmp	r2, #11
 81230b4:	d917      	bls.n	81230e6 <_malloc_r+0xc2>
 81230b6:	1961      	adds	r1, r4, r5
 81230b8:	42a3      	cmp	r3, r4
 81230ba:	6025      	str	r5, [r4, #0]
 81230bc:	bf18      	it	ne
 81230be:	6059      	strne	r1, [r3, #4]
 81230c0:	6863      	ldr	r3, [r4, #4]
 81230c2:	bf08      	it	eq
 81230c4:	f8c8 1000 	streq.w	r1, [r8]
 81230c8:	5162      	str	r2, [r4, r5]
 81230ca:	604b      	str	r3, [r1, #4]
 81230cc:	4630      	mov	r0, r6
 81230ce:	f000 f82f 	bl	8123130 <__malloc_unlock>
 81230d2:	f104 000b 	add.w	r0, r4, #11
 81230d6:	1d23      	adds	r3, r4, #4
 81230d8:	f020 0007 	bic.w	r0, r0, #7
 81230dc:	1ac2      	subs	r2, r0, r3
 81230de:	bf1c      	itt	ne
 81230e0:	1a1b      	subne	r3, r3, r0
 81230e2:	50a3      	strne	r3, [r4, r2]
 81230e4:	e7af      	b.n	8123046 <_malloc_r+0x22>
 81230e6:	6862      	ldr	r2, [r4, #4]
 81230e8:	42a3      	cmp	r3, r4
 81230ea:	bf0c      	ite	eq
 81230ec:	f8c8 2000 	streq.w	r2, [r8]
 81230f0:	605a      	strne	r2, [r3, #4]
 81230f2:	e7eb      	b.n	81230cc <_malloc_r+0xa8>
 81230f4:	4623      	mov	r3, r4
 81230f6:	6864      	ldr	r4, [r4, #4]
 81230f8:	e7ae      	b.n	8123058 <_malloc_r+0x34>
 81230fa:	463c      	mov	r4, r7
 81230fc:	687f      	ldr	r7, [r7, #4]
 81230fe:	e7b6      	b.n	812306e <_malloc_r+0x4a>
 8123100:	461a      	mov	r2, r3
 8123102:	685b      	ldr	r3, [r3, #4]
 8123104:	42a3      	cmp	r3, r4
 8123106:	d1fb      	bne.n	8123100 <_malloc_r+0xdc>
 8123108:	2300      	movs	r3, #0
 812310a:	6053      	str	r3, [r2, #4]
 812310c:	e7de      	b.n	81230cc <_malloc_r+0xa8>
 812310e:	230c      	movs	r3, #12
 8123110:	6033      	str	r3, [r6, #0]
 8123112:	4630      	mov	r0, r6
 8123114:	f000 f80c 	bl	8123130 <__malloc_unlock>
 8123118:	e794      	b.n	8123044 <_malloc_r+0x20>
 812311a:	6005      	str	r5, [r0, #0]
 812311c:	e7d6      	b.n	81230cc <_malloc_r+0xa8>
 812311e:	bf00      	nop
 8123120:	1000e510 	.word	0x1000e510

08123124 <__malloc_lock>:
 8123124:	4801      	ldr	r0, [pc, #4]	@ (812312c <__malloc_lock+0x8>)
 8123126:	f001 b806 	b.w	8124136 <__retarget_lock_acquire_recursive>
 812312a:	bf00      	nop
 812312c:	1000e654 	.word	0x1000e654

08123130 <__malloc_unlock>:
 8123130:	4801      	ldr	r0, [pc, #4]	@ (8123138 <__malloc_unlock+0x8>)
 8123132:	f001 b801 	b.w	8124138 <__retarget_lock_release_recursive>
 8123136:	bf00      	nop
 8123138:	1000e654 	.word	0x1000e654

0812313c <rand>:
 812313c:	4b16      	ldr	r3, [pc, #88]	@ (8123198 <rand+0x5c>)
 812313e:	b510      	push	{r4, lr}
 8123140:	681c      	ldr	r4, [r3, #0]
 8123142:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8123144:	b9b3      	cbnz	r3, 8123174 <rand+0x38>
 8123146:	2018      	movs	r0, #24
 8123148:	f7ff ff3a 	bl	8122fc0 <malloc>
 812314c:	4602      	mov	r2, r0
 812314e:	6320      	str	r0, [r4, #48]	@ 0x30
 8123150:	b920      	cbnz	r0, 812315c <rand+0x20>
 8123152:	4b12      	ldr	r3, [pc, #72]	@ (812319c <rand+0x60>)
 8123154:	4812      	ldr	r0, [pc, #72]	@ (81231a0 <rand+0x64>)
 8123156:	2152      	movs	r1, #82	@ 0x52
 8123158:	f000 fffe 	bl	8124158 <__assert_func>
 812315c:	4911      	ldr	r1, [pc, #68]	@ (81231a4 <rand+0x68>)
 812315e:	4b12      	ldr	r3, [pc, #72]	@ (81231a8 <rand+0x6c>)
 8123160:	e9c0 1300 	strd	r1, r3, [r0]
 8123164:	4b11      	ldr	r3, [pc, #68]	@ (81231ac <rand+0x70>)
 8123166:	6083      	str	r3, [r0, #8]
 8123168:	230b      	movs	r3, #11
 812316a:	8183      	strh	r3, [r0, #12]
 812316c:	2100      	movs	r1, #0
 812316e:	2001      	movs	r0, #1
 8123170:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8123174:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8123176:	480e      	ldr	r0, [pc, #56]	@ (81231b0 <rand+0x74>)
 8123178:	690b      	ldr	r3, [r1, #16]
 812317a:	694c      	ldr	r4, [r1, #20]
 812317c:	4a0d      	ldr	r2, [pc, #52]	@ (81231b4 <rand+0x78>)
 812317e:	4358      	muls	r0, r3
 8123180:	fb02 0004 	mla	r0, r2, r4, r0
 8123184:	fba3 3202 	umull	r3, r2, r3, r2
 8123188:	3301      	adds	r3, #1
 812318a:	eb40 0002 	adc.w	r0, r0, r2
 812318e:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8123192:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8123196:	bd10      	pop	{r4, pc}
 8123198:	10000040 	.word	0x10000040
 812319c:	0812895c 	.word	0x0812895c
 81231a0:	08128973 	.word	0x08128973
 81231a4:	abcd330e 	.word	0xabcd330e
 81231a8:	e66d1234 	.word	0xe66d1234
 81231ac:	0005deec 	.word	0x0005deec
 81231b0:	5851f42d 	.word	0x5851f42d
 81231b4:	4c957f2d 	.word	0x4c957f2d

081231b8 <_strtol_l.constprop.0>:
 81231b8:	2b24      	cmp	r3, #36	@ 0x24
 81231ba:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 81231be:	4686      	mov	lr, r0
 81231c0:	4690      	mov	r8, r2
 81231c2:	d801      	bhi.n	81231c8 <_strtol_l.constprop.0+0x10>
 81231c4:	2b01      	cmp	r3, #1
 81231c6:	d106      	bne.n	81231d6 <_strtol_l.constprop.0+0x1e>
 81231c8:	f000 ff8a 	bl	81240e0 <__errno>
 81231cc:	2316      	movs	r3, #22
 81231ce:	6003      	str	r3, [r0, #0]
 81231d0:	2000      	movs	r0, #0
 81231d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 81231d6:	4834      	ldr	r0, [pc, #208]	@ (81232a8 <_strtol_l.constprop.0+0xf0>)
 81231d8:	460d      	mov	r5, r1
 81231da:	462a      	mov	r2, r5
 81231dc:	f815 4b01 	ldrb.w	r4, [r5], #1
 81231e0:	5d06      	ldrb	r6, [r0, r4]
 81231e2:	f016 0608 	ands.w	r6, r6, #8
 81231e6:	d1f8      	bne.n	81231da <_strtol_l.constprop.0+0x22>
 81231e8:	2c2d      	cmp	r4, #45	@ 0x2d
 81231ea:	d12d      	bne.n	8123248 <_strtol_l.constprop.0+0x90>
 81231ec:	782c      	ldrb	r4, [r5, #0]
 81231ee:	2601      	movs	r6, #1
 81231f0:	1c95      	adds	r5, r2, #2
 81231f2:	f033 0210 	bics.w	r2, r3, #16
 81231f6:	d109      	bne.n	812320c <_strtol_l.constprop.0+0x54>
 81231f8:	2c30      	cmp	r4, #48	@ 0x30
 81231fa:	d12a      	bne.n	8123252 <_strtol_l.constprop.0+0x9a>
 81231fc:	782a      	ldrb	r2, [r5, #0]
 81231fe:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8123202:	2a58      	cmp	r2, #88	@ 0x58
 8123204:	d125      	bne.n	8123252 <_strtol_l.constprop.0+0x9a>
 8123206:	786c      	ldrb	r4, [r5, #1]
 8123208:	2310      	movs	r3, #16
 812320a:	3502      	adds	r5, #2
 812320c:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8123210:	f10c 3cff 	add.w	ip, ip, #4294967295
 8123214:	2200      	movs	r2, #0
 8123216:	fbbc f9f3 	udiv	r9, ip, r3
 812321a:	4610      	mov	r0, r2
 812321c:	fb03 ca19 	mls	sl, r3, r9, ip
 8123220:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8123224:	2f09      	cmp	r7, #9
 8123226:	d81b      	bhi.n	8123260 <_strtol_l.constprop.0+0xa8>
 8123228:	463c      	mov	r4, r7
 812322a:	42a3      	cmp	r3, r4
 812322c:	dd27      	ble.n	812327e <_strtol_l.constprop.0+0xc6>
 812322e:	1c57      	adds	r7, r2, #1
 8123230:	d007      	beq.n	8123242 <_strtol_l.constprop.0+0x8a>
 8123232:	4581      	cmp	r9, r0
 8123234:	d320      	bcc.n	8123278 <_strtol_l.constprop.0+0xc0>
 8123236:	d101      	bne.n	812323c <_strtol_l.constprop.0+0x84>
 8123238:	45a2      	cmp	sl, r4
 812323a:	db1d      	blt.n	8123278 <_strtol_l.constprop.0+0xc0>
 812323c:	fb00 4003 	mla	r0, r0, r3, r4
 8123240:	2201      	movs	r2, #1
 8123242:	f815 4b01 	ldrb.w	r4, [r5], #1
 8123246:	e7eb      	b.n	8123220 <_strtol_l.constprop.0+0x68>
 8123248:	2c2b      	cmp	r4, #43	@ 0x2b
 812324a:	bf04      	itt	eq
 812324c:	782c      	ldrbeq	r4, [r5, #0]
 812324e:	1c95      	addeq	r5, r2, #2
 8123250:	e7cf      	b.n	81231f2 <_strtol_l.constprop.0+0x3a>
 8123252:	2b00      	cmp	r3, #0
 8123254:	d1da      	bne.n	812320c <_strtol_l.constprop.0+0x54>
 8123256:	2c30      	cmp	r4, #48	@ 0x30
 8123258:	bf0c      	ite	eq
 812325a:	2308      	moveq	r3, #8
 812325c:	230a      	movne	r3, #10
 812325e:	e7d5      	b.n	812320c <_strtol_l.constprop.0+0x54>
 8123260:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8123264:	2f19      	cmp	r7, #25
 8123266:	d801      	bhi.n	812326c <_strtol_l.constprop.0+0xb4>
 8123268:	3c37      	subs	r4, #55	@ 0x37
 812326a:	e7de      	b.n	812322a <_strtol_l.constprop.0+0x72>
 812326c:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8123270:	2f19      	cmp	r7, #25
 8123272:	d804      	bhi.n	812327e <_strtol_l.constprop.0+0xc6>
 8123274:	3c57      	subs	r4, #87	@ 0x57
 8123276:	e7d8      	b.n	812322a <_strtol_l.constprop.0+0x72>
 8123278:	f04f 32ff 	mov.w	r2, #4294967295
 812327c:	e7e1      	b.n	8123242 <_strtol_l.constprop.0+0x8a>
 812327e:	1c53      	adds	r3, r2, #1
 8123280:	d108      	bne.n	8123294 <_strtol_l.constprop.0+0xdc>
 8123282:	2322      	movs	r3, #34	@ 0x22
 8123284:	f8ce 3000 	str.w	r3, [lr]
 8123288:	4660      	mov	r0, ip
 812328a:	f1b8 0f00 	cmp.w	r8, #0
 812328e:	d0a0      	beq.n	81231d2 <_strtol_l.constprop.0+0x1a>
 8123290:	1e69      	subs	r1, r5, #1
 8123292:	e006      	b.n	81232a2 <_strtol_l.constprop.0+0xea>
 8123294:	b106      	cbz	r6, 8123298 <_strtol_l.constprop.0+0xe0>
 8123296:	4240      	negs	r0, r0
 8123298:	f1b8 0f00 	cmp.w	r8, #0
 812329c:	d099      	beq.n	81231d2 <_strtol_l.constprop.0+0x1a>
 812329e:	2a00      	cmp	r2, #0
 81232a0:	d1f6      	bne.n	8123290 <_strtol_l.constprop.0+0xd8>
 81232a2:	f8c8 1000 	str.w	r1, [r8]
 81232a6:	e794      	b.n	81231d2 <_strtol_l.constprop.0+0x1a>
 81232a8:	081289cc 	.word	0x081289cc

081232ac <_strtol_r>:
 81232ac:	f7ff bf84 	b.w	81231b8 <_strtol_l.constprop.0>

081232b0 <__sfputc_r>:
 81232b0:	6893      	ldr	r3, [r2, #8]
 81232b2:	3b01      	subs	r3, #1
 81232b4:	2b00      	cmp	r3, #0
 81232b6:	b410      	push	{r4}
 81232b8:	6093      	str	r3, [r2, #8]
 81232ba:	da08      	bge.n	81232ce <__sfputc_r+0x1e>
 81232bc:	6994      	ldr	r4, [r2, #24]
 81232be:	42a3      	cmp	r3, r4
 81232c0:	db01      	blt.n	81232c6 <__sfputc_r+0x16>
 81232c2:	290a      	cmp	r1, #10
 81232c4:	d103      	bne.n	81232ce <__sfputc_r+0x1e>
 81232c6:	f85d 4b04 	ldr.w	r4, [sp], #4
 81232ca:	f000 bd28 	b.w	8123d1e <__swbuf_r>
 81232ce:	6813      	ldr	r3, [r2, #0]
 81232d0:	1c58      	adds	r0, r3, #1
 81232d2:	6010      	str	r0, [r2, #0]
 81232d4:	7019      	strb	r1, [r3, #0]
 81232d6:	4608      	mov	r0, r1
 81232d8:	f85d 4b04 	ldr.w	r4, [sp], #4
 81232dc:	4770      	bx	lr

081232de <__sfputs_r>:
 81232de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 81232e0:	4606      	mov	r6, r0
 81232e2:	460f      	mov	r7, r1
 81232e4:	4614      	mov	r4, r2
 81232e6:	18d5      	adds	r5, r2, r3
 81232e8:	42ac      	cmp	r4, r5
 81232ea:	d101      	bne.n	81232f0 <__sfputs_r+0x12>
 81232ec:	2000      	movs	r0, #0
 81232ee:	e007      	b.n	8123300 <__sfputs_r+0x22>
 81232f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 81232f4:	463a      	mov	r2, r7
 81232f6:	4630      	mov	r0, r6
 81232f8:	f7ff ffda 	bl	81232b0 <__sfputc_r>
 81232fc:	1c43      	adds	r3, r0, #1
 81232fe:	d1f3      	bne.n	81232e8 <__sfputs_r+0xa>
 8123300:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08123304 <_vfiprintf_r>:
 8123304:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8123308:	460d      	mov	r5, r1
 812330a:	b09d      	sub	sp, #116	@ 0x74
 812330c:	4614      	mov	r4, r2
 812330e:	4698      	mov	r8, r3
 8123310:	4606      	mov	r6, r0
 8123312:	b118      	cbz	r0, 812331c <_vfiprintf_r+0x18>
 8123314:	6a03      	ldr	r3, [r0, #32]
 8123316:	b90b      	cbnz	r3, 812331c <_vfiprintf_r+0x18>
 8123318:	f000 fbf0 	bl	8123afc <__sinit>
 812331c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 812331e:	07d9      	lsls	r1, r3, #31
 8123320:	d405      	bmi.n	812332e <_vfiprintf_r+0x2a>
 8123322:	89ab      	ldrh	r3, [r5, #12]
 8123324:	059a      	lsls	r2, r3, #22
 8123326:	d402      	bmi.n	812332e <_vfiprintf_r+0x2a>
 8123328:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 812332a:	f000 ff04 	bl	8124136 <__retarget_lock_acquire_recursive>
 812332e:	89ab      	ldrh	r3, [r5, #12]
 8123330:	071b      	lsls	r3, r3, #28
 8123332:	d501      	bpl.n	8123338 <_vfiprintf_r+0x34>
 8123334:	692b      	ldr	r3, [r5, #16]
 8123336:	b99b      	cbnz	r3, 8123360 <_vfiprintf_r+0x5c>
 8123338:	4629      	mov	r1, r5
 812333a:	4630      	mov	r0, r6
 812333c:	f000 fd2e 	bl	8123d9c <__swsetup_r>
 8123340:	b170      	cbz	r0, 8123360 <_vfiprintf_r+0x5c>
 8123342:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8123344:	07dc      	lsls	r4, r3, #31
 8123346:	d504      	bpl.n	8123352 <_vfiprintf_r+0x4e>
 8123348:	f04f 30ff 	mov.w	r0, #4294967295
 812334c:	b01d      	add	sp, #116	@ 0x74
 812334e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8123352:	89ab      	ldrh	r3, [r5, #12]
 8123354:	0598      	lsls	r0, r3, #22
 8123356:	d4f7      	bmi.n	8123348 <_vfiprintf_r+0x44>
 8123358:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 812335a:	f000 feed 	bl	8124138 <__retarget_lock_release_recursive>
 812335e:	e7f3      	b.n	8123348 <_vfiprintf_r+0x44>
 8123360:	2300      	movs	r3, #0
 8123362:	9309      	str	r3, [sp, #36]	@ 0x24
 8123364:	2320      	movs	r3, #32
 8123366:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 812336a:	f8cd 800c 	str.w	r8, [sp, #12]
 812336e:	2330      	movs	r3, #48	@ 0x30
 8123370:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8123520 <_vfiprintf_r+0x21c>
 8123374:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8123378:	f04f 0901 	mov.w	r9, #1
 812337c:	4623      	mov	r3, r4
 812337e:	469a      	mov	sl, r3
 8123380:	f813 2b01 	ldrb.w	r2, [r3], #1
 8123384:	b10a      	cbz	r2, 812338a <_vfiprintf_r+0x86>
 8123386:	2a25      	cmp	r2, #37	@ 0x25
 8123388:	d1f9      	bne.n	812337e <_vfiprintf_r+0x7a>
 812338a:	ebba 0b04 	subs.w	fp, sl, r4
 812338e:	d00b      	beq.n	81233a8 <_vfiprintf_r+0xa4>
 8123390:	465b      	mov	r3, fp
 8123392:	4622      	mov	r2, r4
 8123394:	4629      	mov	r1, r5
 8123396:	4630      	mov	r0, r6
 8123398:	f7ff ffa1 	bl	81232de <__sfputs_r>
 812339c:	3001      	adds	r0, #1
 812339e:	f000 80a7 	beq.w	81234f0 <_vfiprintf_r+0x1ec>
 81233a2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 81233a4:	445a      	add	r2, fp
 81233a6:	9209      	str	r2, [sp, #36]	@ 0x24
 81233a8:	f89a 3000 	ldrb.w	r3, [sl]
 81233ac:	2b00      	cmp	r3, #0
 81233ae:	f000 809f 	beq.w	81234f0 <_vfiprintf_r+0x1ec>
 81233b2:	2300      	movs	r3, #0
 81233b4:	f04f 32ff 	mov.w	r2, #4294967295
 81233b8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 81233bc:	f10a 0a01 	add.w	sl, sl, #1
 81233c0:	9304      	str	r3, [sp, #16]
 81233c2:	9307      	str	r3, [sp, #28]
 81233c4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 81233c8:	931a      	str	r3, [sp, #104]	@ 0x68
 81233ca:	4654      	mov	r4, sl
 81233cc:	2205      	movs	r2, #5
 81233ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 81233d2:	4853      	ldr	r0, [pc, #332]	@ (8123520 <_vfiprintf_r+0x21c>)
 81233d4:	f7dc ff84 	bl	81002e0 <memchr>
 81233d8:	9a04      	ldr	r2, [sp, #16]
 81233da:	b9d8      	cbnz	r0, 8123414 <_vfiprintf_r+0x110>
 81233dc:	06d1      	lsls	r1, r2, #27
 81233de:	bf44      	itt	mi
 81233e0:	2320      	movmi	r3, #32
 81233e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 81233e6:	0713      	lsls	r3, r2, #28
 81233e8:	bf44      	itt	mi
 81233ea:	232b      	movmi	r3, #43	@ 0x2b
 81233ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 81233f0:	f89a 3000 	ldrb.w	r3, [sl]
 81233f4:	2b2a      	cmp	r3, #42	@ 0x2a
 81233f6:	d015      	beq.n	8123424 <_vfiprintf_r+0x120>
 81233f8:	9a07      	ldr	r2, [sp, #28]
 81233fa:	4654      	mov	r4, sl
 81233fc:	2000      	movs	r0, #0
 81233fe:	f04f 0c0a 	mov.w	ip, #10
 8123402:	4621      	mov	r1, r4
 8123404:	f811 3b01 	ldrb.w	r3, [r1], #1
 8123408:	3b30      	subs	r3, #48	@ 0x30
 812340a:	2b09      	cmp	r3, #9
 812340c:	d94b      	bls.n	81234a6 <_vfiprintf_r+0x1a2>
 812340e:	b1b0      	cbz	r0, 812343e <_vfiprintf_r+0x13a>
 8123410:	9207      	str	r2, [sp, #28]
 8123412:	e014      	b.n	812343e <_vfiprintf_r+0x13a>
 8123414:	eba0 0308 	sub.w	r3, r0, r8
 8123418:	fa09 f303 	lsl.w	r3, r9, r3
 812341c:	4313      	orrs	r3, r2
 812341e:	9304      	str	r3, [sp, #16]
 8123420:	46a2      	mov	sl, r4
 8123422:	e7d2      	b.n	81233ca <_vfiprintf_r+0xc6>
 8123424:	9b03      	ldr	r3, [sp, #12]
 8123426:	1d19      	adds	r1, r3, #4
 8123428:	681b      	ldr	r3, [r3, #0]
 812342a:	9103      	str	r1, [sp, #12]
 812342c:	2b00      	cmp	r3, #0
 812342e:	bfbb      	ittet	lt
 8123430:	425b      	neglt	r3, r3
 8123432:	f042 0202 	orrlt.w	r2, r2, #2
 8123436:	9307      	strge	r3, [sp, #28]
 8123438:	9307      	strlt	r3, [sp, #28]
 812343a:	bfb8      	it	lt
 812343c:	9204      	strlt	r2, [sp, #16]
 812343e:	7823      	ldrb	r3, [r4, #0]
 8123440:	2b2e      	cmp	r3, #46	@ 0x2e
 8123442:	d10a      	bne.n	812345a <_vfiprintf_r+0x156>
 8123444:	7863      	ldrb	r3, [r4, #1]
 8123446:	2b2a      	cmp	r3, #42	@ 0x2a
 8123448:	d132      	bne.n	81234b0 <_vfiprintf_r+0x1ac>
 812344a:	9b03      	ldr	r3, [sp, #12]
 812344c:	1d1a      	adds	r2, r3, #4
 812344e:	681b      	ldr	r3, [r3, #0]
 8123450:	9203      	str	r2, [sp, #12]
 8123452:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8123456:	3402      	adds	r4, #2
 8123458:	9305      	str	r3, [sp, #20]
 812345a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8123530 <_vfiprintf_r+0x22c>
 812345e:	7821      	ldrb	r1, [r4, #0]
 8123460:	2203      	movs	r2, #3
 8123462:	4650      	mov	r0, sl
 8123464:	f7dc ff3c 	bl	81002e0 <memchr>
 8123468:	b138      	cbz	r0, 812347a <_vfiprintf_r+0x176>
 812346a:	9b04      	ldr	r3, [sp, #16]
 812346c:	eba0 000a 	sub.w	r0, r0, sl
 8123470:	2240      	movs	r2, #64	@ 0x40
 8123472:	4082      	lsls	r2, r0
 8123474:	4313      	orrs	r3, r2
 8123476:	3401      	adds	r4, #1
 8123478:	9304      	str	r3, [sp, #16]
 812347a:	f814 1b01 	ldrb.w	r1, [r4], #1
 812347e:	4829      	ldr	r0, [pc, #164]	@ (8123524 <_vfiprintf_r+0x220>)
 8123480:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8123484:	2206      	movs	r2, #6
 8123486:	f7dc ff2b 	bl	81002e0 <memchr>
 812348a:	2800      	cmp	r0, #0
 812348c:	d03f      	beq.n	812350e <_vfiprintf_r+0x20a>
 812348e:	4b26      	ldr	r3, [pc, #152]	@ (8123528 <_vfiprintf_r+0x224>)
 8123490:	bb1b      	cbnz	r3, 81234da <_vfiprintf_r+0x1d6>
 8123492:	9b03      	ldr	r3, [sp, #12]
 8123494:	3307      	adds	r3, #7
 8123496:	f023 0307 	bic.w	r3, r3, #7
 812349a:	3308      	adds	r3, #8
 812349c:	9303      	str	r3, [sp, #12]
 812349e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 81234a0:	443b      	add	r3, r7
 81234a2:	9309      	str	r3, [sp, #36]	@ 0x24
 81234a4:	e76a      	b.n	812337c <_vfiprintf_r+0x78>
 81234a6:	fb0c 3202 	mla	r2, ip, r2, r3
 81234aa:	460c      	mov	r4, r1
 81234ac:	2001      	movs	r0, #1
 81234ae:	e7a8      	b.n	8123402 <_vfiprintf_r+0xfe>
 81234b0:	2300      	movs	r3, #0
 81234b2:	3401      	adds	r4, #1
 81234b4:	9305      	str	r3, [sp, #20]
 81234b6:	4619      	mov	r1, r3
 81234b8:	f04f 0c0a 	mov.w	ip, #10
 81234bc:	4620      	mov	r0, r4
 81234be:	f810 2b01 	ldrb.w	r2, [r0], #1
 81234c2:	3a30      	subs	r2, #48	@ 0x30
 81234c4:	2a09      	cmp	r2, #9
 81234c6:	d903      	bls.n	81234d0 <_vfiprintf_r+0x1cc>
 81234c8:	2b00      	cmp	r3, #0
 81234ca:	d0c6      	beq.n	812345a <_vfiprintf_r+0x156>
 81234cc:	9105      	str	r1, [sp, #20]
 81234ce:	e7c4      	b.n	812345a <_vfiprintf_r+0x156>
 81234d0:	fb0c 2101 	mla	r1, ip, r1, r2
 81234d4:	4604      	mov	r4, r0
 81234d6:	2301      	movs	r3, #1
 81234d8:	e7f0      	b.n	81234bc <_vfiprintf_r+0x1b8>
 81234da:	ab03      	add	r3, sp, #12
 81234dc:	9300      	str	r3, [sp, #0]
 81234de:	462a      	mov	r2, r5
 81234e0:	4b12      	ldr	r3, [pc, #72]	@ (812352c <_vfiprintf_r+0x228>)
 81234e2:	a904      	add	r1, sp, #16
 81234e4:	4630      	mov	r0, r6
 81234e6:	f3af 8000 	nop.w
 81234ea:	4607      	mov	r7, r0
 81234ec:	1c78      	adds	r0, r7, #1
 81234ee:	d1d6      	bne.n	812349e <_vfiprintf_r+0x19a>
 81234f0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 81234f2:	07d9      	lsls	r1, r3, #31
 81234f4:	d405      	bmi.n	8123502 <_vfiprintf_r+0x1fe>
 81234f6:	89ab      	ldrh	r3, [r5, #12]
 81234f8:	059a      	lsls	r2, r3, #22
 81234fa:	d402      	bmi.n	8123502 <_vfiprintf_r+0x1fe>
 81234fc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 81234fe:	f000 fe1b 	bl	8124138 <__retarget_lock_release_recursive>
 8123502:	89ab      	ldrh	r3, [r5, #12]
 8123504:	065b      	lsls	r3, r3, #25
 8123506:	f53f af1f 	bmi.w	8123348 <_vfiprintf_r+0x44>
 812350a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 812350c:	e71e      	b.n	812334c <_vfiprintf_r+0x48>
 812350e:	ab03      	add	r3, sp, #12
 8123510:	9300      	str	r3, [sp, #0]
 8123512:	462a      	mov	r2, r5
 8123514:	4b05      	ldr	r3, [pc, #20]	@ (812352c <_vfiprintf_r+0x228>)
 8123516:	a904      	add	r1, sp, #16
 8123518:	4630      	mov	r0, r6
 812351a:	f000 f883 	bl	8123624 <_printf_i>
 812351e:	e7e4      	b.n	81234ea <_vfiprintf_r+0x1e6>
 8123520:	08128acc 	.word	0x08128acc
 8123524:	08128ad6 	.word	0x08128ad6
 8123528:	00000000 	.word	0x00000000
 812352c:	081232df 	.word	0x081232df
 8123530:	08128ad2 	.word	0x08128ad2

08123534 <vfiprintf>:
 8123534:	4613      	mov	r3, r2
 8123536:	460a      	mov	r2, r1
 8123538:	4601      	mov	r1, r0
 812353a:	4802      	ldr	r0, [pc, #8]	@ (8123544 <vfiprintf+0x10>)
 812353c:	6800      	ldr	r0, [r0, #0]
 812353e:	f7ff bee1 	b.w	8123304 <_vfiprintf_r>
 8123542:	bf00      	nop
 8123544:	10000040 	.word	0x10000040

08123548 <_printf_common>:
 8123548:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 812354c:	4616      	mov	r6, r2
 812354e:	4698      	mov	r8, r3
 8123550:	688a      	ldr	r2, [r1, #8]
 8123552:	690b      	ldr	r3, [r1, #16]
 8123554:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8123558:	4293      	cmp	r3, r2
 812355a:	bfb8      	it	lt
 812355c:	4613      	movlt	r3, r2
 812355e:	6033      	str	r3, [r6, #0]
 8123560:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8123564:	4607      	mov	r7, r0
 8123566:	460c      	mov	r4, r1
 8123568:	b10a      	cbz	r2, 812356e <_printf_common+0x26>
 812356a:	3301      	adds	r3, #1
 812356c:	6033      	str	r3, [r6, #0]
 812356e:	6823      	ldr	r3, [r4, #0]
 8123570:	0699      	lsls	r1, r3, #26
 8123572:	bf42      	ittt	mi
 8123574:	6833      	ldrmi	r3, [r6, #0]
 8123576:	3302      	addmi	r3, #2
 8123578:	6033      	strmi	r3, [r6, #0]
 812357a:	6825      	ldr	r5, [r4, #0]
 812357c:	f015 0506 	ands.w	r5, r5, #6
 8123580:	d106      	bne.n	8123590 <_printf_common+0x48>
 8123582:	f104 0a19 	add.w	sl, r4, #25
 8123586:	68e3      	ldr	r3, [r4, #12]
 8123588:	6832      	ldr	r2, [r6, #0]
 812358a:	1a9b      	subs	r3, r3, r2
 812358c:	42ab      	cmp	r3, r5
 812358e:	dc26      	bgt.n	81235de <_printf_common+0x96>
 8123590:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8123594:	6822      	ldr	r2, [r4, #0]
 8123596:	3b00      	subs	r3, #0
 8123598:	bf18      	it	ne
 812359a:	2301      	movne	r3, #1
 812359c:	0692      	lsls	r2, r2, #26
 812359e:	d42b      	bmi.n	81235f8 <_printf_common+0xb0>
 81235a0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 81235a4:	4641      	mov	r1, r8
 81235a6:	4638      	mov	r0, r7
 81235a8:	47c8      	blx	r9
 81235aa:	3001      	adds	r0, #1
 81235ac:	d01e      	beq.n	81235ec <_printf_common+0xa4>
 81235ae:	6823      	ldr	r3, [r4, #0]
 81235b0:	6922      	ldr	r2, [r4, #16]
 81235b2:	f003 0306 	and.w	r3, r3, #6
 81235b6:	2b04      	cmp	r3, #4
 81235b8:	bf02      	ittt	eq
 81235ba:	68e5      	ldreq	r5, [r4, #12]
 81235bc:	6833      	ldreq	r3, [r6, #0]
 81235be:	1aed      	subeq	r5, r5, r3
 81235c0:	68a3      	ldr	r3, [r4, #8]
 81235c2:	bf0c      	ite	eq
 81235c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 81235c8:	2500      	movne	r5, #0
 81235ca:	4293      	cmp	r3, r2
 81235cc:	bfc4      	itt	gt
 81235ce:	1a9b      	subgt	r3, r3, r2
 81235d0:	18ed      	addgt	r5, r5, r3
 81235d2:	2600      	movs	r6, #0
 81235d4:	341a      	adds	r4, #26
 81235d6:	42b5      	cmp	r5, r6
 81235d8:	d11a      	bne.n	8123610 <_printf_common+0xc8>
 81235da:	2000      	movs	r0, #0
 81235dc:	e008      	b.n	81235f0 <_printf_common+0xa8>
 81235de:	2301      	movs	r3, #1
 81235e0:	4652      	mov	r2, sl
 81235e2:	4641      	mov	r1, r8
 81235e4:	4638      	mov	r0, r7
 81235e6:	47c8      	blx	r9
 81235e8:	3001      	adds	r0, #1
 81235ea:	d103      	bne.n	81235f4 <_printf_common+0xac>
 81235ec:	f04f 30ff 	mov.w	r0, #4294967295
 81235f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 81235f4:	3501      	adds	r5, #1
 81235f6:	e7c6      	b.n	8123586 <_printf_common+0x3e>
 81235f8:	18e1      	adds	r1, r4, r3
 81235fa:	1c5a      	adds	r2, r3, #1
 81235fc:	2030      	movs	r0, #48	@ 0x30
 81235fe:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8123602:	4422      	add	r2, r4
 8123604:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8123608:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 812360c:	3302      	adds	r3, #2
 812360e:	e7c7      	b.n	81235a0 <_printf_common+0x58>
 8123610:	2301      	movs	r3, #1
 8123612:	4622      	mov	r2, r4
 8123614:	4641      	mov	r1, r8
 8123616:	4638      	mov	r0, r7
 8123618:	47c8      	blx	r9
 812361a:	3001      	adds	r0, #1
 812361c:	d0e6      	beq.n	81235ec <_printf_common+0xa4>
 812361e:	3601      	adds	r6, #1
 8123620:	e7d9      	b.n	81235d6 <_printf_common+0x8e>
	...

08123624 <_printf_i>:
 8123624:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8123628:	7e0f      	ldrb	r7, [r1, #24]
 812362a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 812362c:	2f78      	cmp	r7, #120	@ 0x78
 812362e:	4691      	mov	r9, r2
 8123630:	4680      	mov	r8, r0
 8123632:	460c      	mov	r4, r1
 8123634:	469a      	mov	sl, r3
 8123636:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 812363a:	d807      	bhi.n	812364c <_printf_i+0x28>
 812363c:	2f62      	cmp	r7, #98	@ 0x62
 812363e:	d80a      	bhi.n	8123656 <_printf_i+0x32>
 8123640:	2f00      	cmp	r7, #0
 8123642:	f000 80d2 	beq.w	81237ea <_printf_i+0x1c6>
 8123646:	2f58      	cmp	r7, #88	@ 0x58
 8123648:	f000 80b9 	beq.w	81237be <_printf_i+0x19a>
 812364c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8123650:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8123654:	e03a      	b.n	81236cc <_printf_i+0xa8>
 8123656:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 812365a:	2b15      	cmp	r3, #21
 812365c:	d8f6      	bhi.n	812364c <_printf_i+0x28>
 812365e:	a101      	add	r1, pc, #4	@ (adr r1, 8123664 <_printf_i+0x40>)
 8123660:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8123664:	081236bd 	.word	0x081236bd
 8123668:	081236d1 	.word	0x081236d1
 812366c:	0812364d 	.word	0x0812364d
 8123670:	0812364d 	.word	0x0812364d
 8123674:	0812364d 	.word	0x0812364d
 8123678:	0812364d 	.word	0x0812364d
 812367c:	081236d1 	.word	0x081236d1
 8123680:	0812364d 	.word	0x0812364d
 8123684:	0812364d 	.word	0x0812364d
 8123688:	0812364d 	.word	0x0812364d
 812368c:	0812364d 	.word	0x0812364d
 8123690:	081237d1 	.word	0x081237d1
 8123694:	081236fb 	.word	0x081236fb
 8123698:	0812378b 	.word	0x0812378b
 812369c:	0812364d 	.word	0x0812364d
 81236a0:	0812364d 	.word	0x0812364d
 81236a4:	081237f3 	.word	0x081237f3
 81236a8:	0812364d 	.word	0x0812364d
 81236ac:	081236fb 	.word	0x081236fb
 81236b0:	0812364d 	.word	0x0812364d
 81236b4:	0812364d 	.word	0x0812364d
 81236b8:	08123793 	.word	0x08123793
 81236bc:	6833      	ldr	r3, [r6, #0]
 81236be:	1d1a      	adds	r2, r3, #4
 81236c0:	681b      	ldr	r3, [r3, #0]
 81236c2:	6032      	str	r2, [r6, #0]
 81236c4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 81236c8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 81236cc:	2301      	movs	r3, #1
 81236ce:	e09d      	b.n	812380c <_printf_i+0x1e8>
 81236d0:	6833      	ldr	r3, [r6, #0]
 81236d2:	6820      	ldr	r0, [r4, #0]
 81236d4:	1d19      	adds	r1, r3, #4
 81236d6:	6031      	str	r1, [r6, #0]
 81236d8:	0606      	lsls	r6, r0, #24
 81236da:	d501      	bpl.n	81236e0 <_printf_i+0xbc>
 81236dc:	681d      	ldr	r5, [r3, #0]
 81236de:	e003      	b.n	81236e8 <_printf_i+0xc4>
 81236e0:	0645      	lsls	r5, r0, #25
 81236e2:	d5fb      	bpl.n	81236dc <_printf_i+0xb8>
 81236e4:	f9b3 5000 	ldrsh.w	r5, [r3]
 81236e8:	2d00      	cmp	r5, #0
 81236ea:	da03      	bge.n	81236f4 <_printf_i+0xd0>
 81236ec:	232d      	movs	r3, #45	@ 0x2d
 81236ee:	426d      	negs	r5, r5
 81236f0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 81236f4:	4859      	ldr	r0, [pc, #356]	@ (812385c <_printf_i+0x238>)
 81236f6:	230a      	movs	r3, #10
 81236f8:	e011      	b.n	812371e <_printf_i+0xfa>
 81236fa:	6821      	ldr	r1, [r4, #0]
 81236fc:	6833      	ldr	r3, [r6, #0]
 81236fe:	0608      	lsls	r0, r1, #24
 8123700:	f853 5b04 	ldr.w	r5, [r3], #4
 8123704:	d402      	bmi.n	812370c <_printf_i+0xe8>
 8123706:	0649      	lsls	r1, r1, #25
 8123708:	bf48      	it	mi
 812370a:	b2ad      	uxthmi	r5, r5
 812370c:	2f6f      	cmp	r7, #111	@ 0x6f
 812370e:	4853      	ldr	r0, [pc, #332]	@ (812385c <_printf_i+0x238>)
 8123710:	6033      	str	r3, [r6, #0]
 8123712:	bf14      	ite	ne
 8123714:	230a      	movne	r3, #10
 8123716:	2308      	moveq	r3, #8
 8123718:	2100      	movs	r1, #0
 812371a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 812371e:	6866      	ldr	r6, [r4, #4]
 8123720:	60a6      	str	r6, [r4, #8]
 8123722:	2e00      	cmp	r6, #0
 8123724:	bfa2      	ittt	ge
 8123726:	6821      	ldrge	r1, [r4, #0]
 8123728:	f021 0104 	bicge.w	r1, r1, #4
 812372c:	6021      	strge	r1, [r4, #0]
 812372e:	b90d      	cbnz	r5, 8123734 <_printf_i+0x110>
 8123730:	2e00      	cmp	r6, #0
 8123732:	d04b      	beq.n	81237cc <_printf_i+0x1a8>
 8123734:	4616      	mov	r6, r2
 8123736:	fbb5 f1f3 	udiv	r1, r5, r3
 812373a:	fb03 5711 	mls	r7, r3, r1, r5
 812373e:	5dc7      	ldrb	r7, [r0, r7]
 8123740:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8123744:	462f      	mov	r7, r5
 8123746:	42bb      	cmp	r3, r7
 8123748:	460d      	mov	r5, r1
 812374a:	d9f4      	bls.n	8123736 <_printf_i+0x112>
 812374c:	2b08      	cmp	r3, #8
 812374e:	d10b      	bne.n	8123768 <_printf_i+0x144>
 8123750:	6823      	ldr	r3, [r4, #0]
 8123752:	07df      	lsls	r7, r3, #31
 8123754:	d508      	bpl.n	8123768 <_printf_i+0x144>
 8123756:	6923      	ldr	r3, [r4, #16]
 8123758:	6861      	ldr	r1, [r4, #4]
 812375a:	4299      	cmp	r1, r3
 812375c:	bfde      	ittt	le
 812375e:	2330      	movle	r3, #48	@ 0x30
 8123760:	f806 3c01 	strble.w	r3, [r6, #-1]
 8123764:	f106 36ff 	addle.w	r6, r6, #4294967295
 8123768:	1b92      	subs	r2, r2, r6
 812376a:	6122      	str	r2, [r4, #16]
 812376c:	f8cd a000 	str.w	sl, [sp]
 8123770:	464b      	mov	r3, r9
 8123772:	aa03      	add	r2, sp, #12
 8123774:	4621      	mov	r1, r4
 8123776:	4640      	mov	r0, r8
 8123778:	f7ff fee6 	bl	8123548 <_printf_common>
 812377c:	3001      	adds	r0, #1
 812377e:	d14a      	bne.n	8123816 <_printf_i+0x1f2>
 8123780:	f04f 30ff 	mov.w	r0, #4294967295
 8123784:	b004      	add	sp, #16
 8123786:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 812378a:	6823      	ldr	r3, [r4, #0]
 812378c:	f043 0320 	orr.w	r3, r3, #32
 8123790:	6023      	str	r3, [r4, #0]
 8123792:	4833      	ldr	r0, [pc, #204]	@ (8123860 <_printf_i+0x23c>)
 8123794:	2778      	movs	r7, #120	@ 0x78
 8123796:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 812379a:	6823      	ldr	r3, [r4, #0]
 812379c:	6831      	ldr	r1, [r6, #0]
 812379e:	061f      	lsls	r7, r3, #24
 81237a0:	f851 5b04 	ldr.w	r5, [r1], #4
 81237a4:	d402      	bmi.n	81237ac <_printf_i+0x188>
 81237a6:	065f      	lsls	r7, r3, #25
 81237a8:	bf48      	it	mi
 81237aa:	b2ad      	uxthmi	r5, r5
 81237ac:	6031      	str	r1, [r6, #0]
 81237ae:	07d9      	lsls	r1, r3, #31
 81237b0:	bf44      	itt	mi
 81237b2:	f043 0320 	orrmi.w	r3, r3, #32
 81237b6:	6023      	strmi	r3, [r4, #0]
 81237b8:	b11d      	cbz	r5, 81237c2 <_printf_i+0x19e>
 81237ba:	2310      	movs	r3, #16
 81237bc:	e7ac      	b.n	8123718 <_printf_i+0xf4>
 81237be:	4827      	ldr	r0, [pc, #156]	@ (812385c <_printf_i+0x238>)
 81237c0:	e7e9      	b.n	8123796 <_printf_i+0x172>
 81237c2:	6823      	ldr	r3, [r4, #0]
 81237c4:	f023 0320 	bic.w	r3, r3, #32
 81237c8:	6023      	str	r3, [r4, #0]
 81237ca:	e7f6      	b.n	81237ba <_printf_i+0x196>
 81237cc:	4616      	mov	r6, r2
 81237ce:	e7bd      	b.n	812374c <_printf_i+0x128>
 81237d0:	6833      	ldr	r3, [r6, #0]
 81237d2:	6825      	ldr	r5, [r4, #0]
 81237d4:	6961      	ldr	r1, [r4, #20]
 81237d6:	1d18      	adds	r0, r3, #4
 81237d8:	6030      	str	r0, [r6, #0]
 81237da:	062e      	lsls	r6, r5, #24
 81237dc:	681b      	ldr	r3, [r3, #0]
 81237de:	d501      	bpl.n	81237e4 <_printf_i+0x1c0>
 81237e0:	6019      	str	r1, [r3, #0]
 81237e2:	e002      	b.n	81237ea <_printf_i+0x1c6>
 81237e4:	0668      	lsls	r0, r5, #25
 81237e6:	d5fb      	bpl.n	81237e0 <_printf_i+0x1bc>
 81237e8:	8019      	strh	r1, [r3, #0]
 81237ea:	2300      	movs	r3, #0
 81237ec:	6123      	str	r3, [r4, #16]
 81237ee:	4616      	mov	r6, r2
 81237f0:	e7bc      	b.n	812376c <_printf_i+0x148>
 81237f2:	6833      	ldr	r3, [r6, #0]
 81237f4:	1d1a      	adds	r2, r3, #4
 81237f6:	6032      	str	r2, [r6, #0]
 81237f8:	681e      	ldr	r6, [r3, #0]
 81237fa:	6862      	ldr	r2, [r4, #4]
 81237fc:	2100      	movs	r1, #0
 81237fe:	4630      	mov	r0, r6
 8123800:	f7dc fd6e 	bl	81002e0 <memchr>
 8123804:	b108      	cbz	r0, 812380a <_printf_i+0x1e6>
 8123806:	1b80      	subs	r0, r0, r6
 8123808:	6060      	str	r0, [r4, #4]
 812380a:	6863      	ldr	r3, [r4, #4]
 812380c:	6123      	str	r3, [r4, #16]
 812380e:	2300      	movs	r3, #0
 8123810:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8123814:	e7aa      	b.n	812376c <_printf_i+0x148>
 8123816:	6923      	ldr	r3, [r4, #16]
 8123818:	4632      	mov	r2, r6
 812381a:	4649      	mov	r1, r9
 812381c:	4640      	mov	r0, r8
 812381e:	47d0      	blx	sl
 8123820:	3001      	adds	r0, #1
 8123822:	d0ad      	beq.n	8123780 <_printf_i+0x15c>
 8123824:	6823      	ldr	r3, [r4, #0]
 8123826:	079b      	lsls	r3, r3, #30
 8123828:	d413      	bmi.n	8123852 <_printf_i+0x22e>
 812382a:	68e0      	ldr	r0, [r4, #12]
 812382c:	9b03      	ldr	r3, [sp, #12]
 812382e:	4298      	cmp	r0, r3
 8123830:	bfb8      	it	lt
 8123832:	4618      	movlt	r0, r3
 8123834:	e7a6      	b.n	8123784 <_printf_i+0x160>
 8123836:	2301      	movs	r3, #1
 8123838:	4632      	mov	r2, r6
 812383a:	4649      	mov	r1, r9
 812383c:	4640      	mov	r0, r8
 812383e:	47d0      	blx	sl
 8123840:	3001      	adds	r0, #1
 8123842:	d09d      	beq.n	8123780 <_printf_i+0x15c>
 8123844:	3501      	adds	r5, #1
 8123846:	68e3      	ldr	r3, [r4, #12]
 8123848:	9903      	ldr	r1, [sp, #12]
 812384a:	1a5b      	subs	r3, r3, r1
 812384c:	42ab      	cmp	r3, r5
 812384e:	dcf2      	bgt.n	8123836 <_printf_i+0x212>
 8123850:	e7eb      	b.n	812382a <_printf_i+0x206>
 8123852:	2500      	movs	r5, #0
 8123854:	f104 0619 	add.w	r6, r4, #25
 8123858:	e7f5      	b.n	8123846 <_printf_i+0x222>
 812385a:	bf00      	nop
 812385c:	08128add 	.word	0x08128add
 8123860:	08128aee 	.word	0x08128aee

08123864 <__sflush_r>:
 8123864:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8123868:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 812386c:	0716      	lsls	r6, r2, #28
 812386e:	4605      	mov	r5, r0
 8123870:	460c      	mov	r4, r1
 8123872:	d454      	bmi.n	812391e <__sflush_r+0xba>
 8123874:	684b      	ldr	r3, [r1, #4]
 8123876:	2b00      	cmp	r3, #0
 8123878:	dc02      	bgt.n	8123880 <__sflush_r+0x1c>
 812387a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 812387c:	2b00      	cmp	r3, #0
 812387e:	dd48      	ble.n	8123912 <__sflush_r+0xae>
 8123880:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8123882:	2e00      	cmp	r6, #0
 8123884:	d045      	beq.n	8123912 <__sflush_r+0xae>
 8123886:	2300      	movs	r3, #0
 8123888:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 812388c:	682f      	ldr	r7, [r5, #0]
 812388e:	6a21      	ldr	r1, [r4, #32]
 8123890:	602b      	str	r3, [r5, #0]
 8123892:	d030      	beq.n	81238f6 <__sflush_r+0x92>
 8123894:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8123896:	89a3      	ldrh	r3, [r4, #12]
 8123898:	0759      	lsls	r1, r3, #29
 812389a:	d505      	bpl.n	81238a8 <__sflush_r+0x44>
 812389c:	6863      	ldr	r3, [r4, #4]
 812389e:	1ad2      	subs	r2, r2, r3
 81238a0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 81238a2:	b10b      	cbz	r3, 81238a8 <__sflush_r+0x44>
 81238a4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 81238a6:	1ad2      	subs	r2, r2, r3
 81238a8:	2300      	movs	r3, #0
 81238aa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 81238ac:	6a21      	ldr	r1, [r4, #32]
 81238ae:	4628      	mov	r0, r5
 81238b0:	47b0      	blx	r6
 81238b2:	1c43      	adds	r3, r0, #1
 81238b4:	89a3      	ldrh	r3, [r4, #12]
 81238b6:	d106      	bne.n	81238c6 <__sflush_r+0x62>
 81238b8:	6829      	ldr	r1, [r5, #0]
 81238ba:	291d      	cmp	r1, #29
 81238bc:	d82b      	bhi.n	8123916 <__sflush_r+0xb2>
 81238be:	4a2a      	ldr	r2, [pc, #168]	@ (8123968 <__sflush_r+0x104>)
 81238c0:	410a      	asrs	r2, r1
 81238c2:	07d6      	lsls	r6, r2, #31
 81238c4:	d427      	bmi.n	8123916 <__sflush_r+0xb2>
 81238c6:	2200      	movs	r2, #0
 81238c8:	6062      	str	r2, [r4, #4]
 81238ca:	04d9      	lsls	r1, r3, #19
 81238cc:	6922      	ldr	r2, [r4, #16]
 81238ce:	6022      	str	r2, [r4, #0]
 81238d0:	d504      	bpl.n	81238dc <__sflush_r+0x78>
 81238d2:	1c42      	adds	r2, r0, #1
 81238d4:	d101      	bne.n	81238da <__sflush_r+0x76>
 81238d6:	682b      	ldr	r3, [r5, #0]
 81238d8:	b903      	cbnz	r3, 81238dc <__sflush_r+0x78>
 81238da:	6560      	str	r0, [r4, #84]	@ 0x54
 81238dc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 81238de:	602f      	str	r7, [r5, #0]
 81238e0:	b1b9      	cbz	r1, 8123912 <__sflush_r+0xae>
 81238e2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 81238e6:	4299      	cmp	r1, r3
 81238e8:	d002      	beq.n	81238f0 <__sflush_r+0x8c>
 81238ea:	4628      	mov	r0, r5
 81238ec:	f000 fc52 	bl	8124194 <_free_r>
 81238f0:	2300      	movs	r3, #0
 81238f2:	6363      	str	r3, [r4, #52]	@ 0x34
 81238f4:	e00d      	b.n	8123912 <__sflush_r+0xae>
 81238f6:	2301      	movs	r3, #1
 81238f8:	4628      	mov	r0, r5
 81238fa:	47b0      	blx	r6
 81238fc:	4602      	mov	r2, r0
 81238fe:	1c50      	adds	r0, r2, #1
 8123900:	d1c9      	bne.n	8123896 <__sflush_r+0x32>
 8123902:	682b      	ldr	r3, [r5, #0]
 8123904:	2b00      	cmp	r3, #0
 8123906:	d0c6      	beq.n	8123896 <__sflush_r+0x32>
 8123908:	2b1d      	cmp	r3, #29
 812390a:	d001      	beq.n	8123910 <__sflush_r+0xac>
 812390c:	2b16      	cmp	r3, #22
 812390e:	d11e      	bne.n	812394e <__sflush_r+0xea>
 8123910:	602f      	str	r7, [r5, #0]
 8123912:	2000      	movs	r0, #0
 8123914:	e022      	b.n	812395c <__sflush_r+0xf8>
 8123916:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 812391a:	b21b      	sxth	r3, r3
 812391c:	e01b      	b.n	8123956 <__sflush_r+0xf2>
 812391e:	690f      	ldr	r7, [r1, #16]
 8123920:	2f00      	cmp	r7, #0
 8123922:	d0f6      	beq.n	8123912 <__sflush_r+0xae>
 8123924:	0793      	lsls	r3, r2, #30
 8123926:	680e      	ldr	r6, [r1, #0]
 8123928:	bf08      	it	eq
 812392a:	694b      	ldreq	r3, [r1, #20]
 812392c:	600f      	str	r7, [r1, #0]
 812392e:	bf18      	it	ne
 8123930:	2300      	movne	r3, #0
 8123932:	eba6 0807 	sub.w	r8, r6, r7
 8123936:	608b      	str	r3, [r1, #8]
 8123938:	f1b8 0f00 	cmp.w	r8, #0
 812393c:	dde9      	ble.n	8123912 <__sflush_r+0xae>
 812393e:	6a21      	ldr	r1, [r4, #32]
 8123940:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8123942:	4643      	mov	r3, r8
 8123944:	463a      	mov	r2, r7
 8123946:	4628      	mov	r0, r5
 8123948:	47b0      	blx	r6
 812394a:	2800      	cmp	r0, #0
 812394c:	dc08      	bgt.n	8123960 <__sflush_r+0xfc>
 812394e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8123952:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8123956:	81a3      	strh	r3, [r4, #12]
 8123958:	f04f 30ff 	mov.w	r0, #4294967295
 812395c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8123960:	4407      	add	r7, r0
 8123962:	eba8 0800 	sub.w	r8, r8, r0
 8123966:	e7e7      	b.n	8123938 <__sflush_r+0xd4>
 8123968:	dfbffffe 	.word	0xdfbffffe

0812396c <_fflush_r>:
 812396c:	b538      	push	{r3, r4, r5, lr}
 812396e:	690b      	ldr	r3, [r1, #16]
 8123970:	4605      	mov	r5, r0
 8123972:	460c      	mov	r4, r1
 8123974:	b913      	cbnz	r3, 812397c <_fflush_r+0x10>
 8123976:	2500      	movs	r5, #0
 8123978:	4628      	mov	r0, r5
 812397a:	bd38      	pop	{r3, r4, r5, pc}
 812397c:	b118      	cbz	r0, 8123986 <_fflush_r+0x1a>
 812397e:	6a03      	ldr	r3, [r0, #32]
 8123980:	b90b      	cbnz	r3, 8123986 <_fflush_r+0x1a>
 8123982:	f000 f8bb 	bl	8123afc <__sinit>
 8123986:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 812398a:	2b00      	cmp	r3, #0
 812398c:	d0f3      	beq.n	8123976 <_fflush_r+0xa>
 812398e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8123990:	07d0      	lsls	r0, r2, #31
 8123992:	d404      	bmi.n	812399e <_fflush_r+0x32>
 8123994:	0599      	lsls	r1, r3, #22
 8123996:	d402      	bmi.n	812399e <_fflush_r+0x32>
 8123998:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 812399a:	f000 fbcc 	bl	8124136 <__retarget_lock_acquire_recursive>
 812399e:	4628      	mov	r0, r5
 81239a0:	4621      	mov	r1, r4
 81239a2:	f7ff ff5f 	bl	8123864 <__sflush_r>
 81239a6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 81239a8:	07da      	lsls	r2, r3, #31
 81239aa:	4605      	mov	r5, r0
 81239ac:	d4e4      	bmi.n	8123978 <_fflush_r+0xc>
 81239ae:	89a3      	ldrh	r3, [r4, #12]
 81239b0:	059b      	lsls	r3, r3, #22
 81239b2:	d4e1      	bmi.n	8123978 <_fflush_r+0xc>
 81239b4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 81239b6:	f000 fbbf 	bl	8124138 <__retarget_lock_release_recursive>
 81239ba:	e7dd      	b.n	8123978 <_fflush_r+0xc>

081239bc <fflush>:
 81239bc:	4601      	mov	r1, r0
 81239be:	b920      	cbnz	r0, 81239ca <fflush+0xe>
 81239c0:	4a04      	ldr	r2, [pc, #16]	@ (81239d4 <fflush+0x18>)
 81239c2:	4905      	ldr	r1, [pc, #20]	@ (81239d8 <fflush+0x1c>)
 81239c4:	4805      	ldr	r0, [pc, #20]	@ (81239dc <fflush+0x20>)
 81239c6:	f000 b8b1 	b.w	8123b2c <_fwalk_sglue>
 81239ca:	4b05      	ldr	r3, [pc, #20]	@ (81239e0 <fflush+0x24>)
 81239cc:	6818      	ldr	r0, [r3, #0]
 81239ce:	f7ff bfcd 	b.w	812396c <_fflush_r>
 81239d2:	bf00      	nop
 81239d4:	10000034 	.word	0x10000034
 81239d8:	0812396d 	.word	0x0812396d
 81239dc:	10000044 	.word	0x10000044
 81239e0:	10000040 	.word	0x10000040

081239e4 <std>:
 81239e4:	2300      	movs	r3, #0
 81239e6:	b510      	push	{r4, lr}
 81239e8:	4604      	mov	r4, r0
 81239ea:	e9c0 3300 	strd	r3, r3, [r0]
 81239ee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 81239f2:	6083      	str	r3, [r0, #8]
 81239f4:	8181      	strh	r1, [r0, #12]
 81239f6:	6643      	str	r3, [r0, #100]	@ 0x64
 81239f8:	81c2      	strh	r2, [r0, #14]
 81239fa:	6183      	str	r3, [r0, #24]
 81239fc:	4619      	mov	r1, r3
 81239fe:	2208      	movs	r2, #8
 8123a00:	305c      	adds	r0, #92	@ 0x5c
 8123a02:	f000 fa4b 	bl	8123e9c <memset>
 8123a06:	4b0d      	ldr	r3, [pc, #52]	@ (8123a3c <std+0x58>)
 8123a08:	6263      	str	r3, [r4, #36]	@ 0x24
 8123a0a:	4b0d      	ldr	r3, [pc, #52]	@ (8123a40 <std+0x5c>)
 8123a0c:	62a3      	str	r3, [r4, #40]	@ 0x28
 8123a0e:	4b0d      	ldr	r3, [pc, #52]	@ (8123a44 <std+0x60>)
 8123a10:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8123a12:	4b0d      	ldr	r3, [pc, #52]	@ (8123a48 <std+0x64>)
 8123a14:	6323      	str	r3, [r4, #48]	@ 0x30
 8123a16:	4b0d      	ldr	r3, [pc, #52]	@ (8123a4c <std+0x68>)
 8123a18:	6224      	str	r4, [r4, #32]
 8123a1a:	429c      	cmp	r4, r3
 8123a1c:	d006      	beq.n	8123a2c <std+0x48>
 8123a1e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8123a22:	4294      	cmp	r4, r2
 8123a24:	d002      	beq.n	8123a2c <std+0x48>
 8123a26:	33d0      	adds	r3, #208	@ 0xd0
 8123a28:	429c      	cmp	r4, r3
 8123a2a:	d105      	bne.n	8123a38 <std+0x54>
 8123a2c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8123a30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8123a34:	f000 bb7e 	b.w	8124134 <__retarget_lock_init_recursive>
 8123a38:	bd10      	pop	{r4, pc}
 8123a3a:	bf00      	nop
 8123a3c:	08123c95 	.word	0x08123c95
 8123a40:	08123cbb 	.word	0x08123cbb
 8123a44:	08123cf3 	.word	0x08123cf3
 8123a48:	08123d17 	.word	0x08123d17
 8123a4c:	1000e514 	.word	0x1000e514

08123a50 <stdio_exit_handler>:
 8123a50:	4a02      	ldr	r2, [pc, #8]	@ (8123a5c <stdio_exit_handler+0xc>)
 8123a52:	4903      	ldr	r1, [pc, #12]	@ (8123a60 <stdio_exit_handler+0x10>)
 8123a54:	4803      	ldr	r0, [pc, #12]	@ (8123a64 <stdio_exit_handler+0x14>)
 8123a56:	f000 b869 	b.w	8123b2c <_fwalk_sglue>
 8123a5a:	bf00      	nop
 8123a5c:	10000034 	.word	0x10000034
 8123a60:	0812396d 	.word	0x0812396d
 8123a64:	10000044 	.word	0x10000044

08123a68 <cleanup_stdio>:
 8123a68:	6841      	ldr	r1, [r0, #4]
 8123a6a:	4b0c      	ldr	r3, [pc, #48]	@ (8123a9c <cleanup_stdio+0x34>)
 8123a6c:	4299      	cmp	r1, r3
 8123a6e:	b510      	push	{r4, lr}
 8123a70:	4604      	mov	r4, r0
 8123a72:	d001      	beq.n	8123a78 <cleanup_stdio+0x10>
 8123a74:	f7ff ff7a 	bl	812396c <_fflush_r>
 8123a78:	68a1      	ldr	r1, [r4, #8]
 8123a7a:	4b09      	ldr	r3, [pc, #36]	@ (8123aa0 <cleanup_stdio+0x38>)
 8123a7c:	4299      	cmp	r1, r3
 8123a7e:	d002      	beq.n	8123a86 <cleanup_stdio+0x1e>
 8123a80:	4620      	mov	r0, r4
 8123a82:	f7ff ff73 	bl	812396c <_fflush_r>
 8123a86:	68e1      	ldr	r1, [r4, #12]
 8123a88:	4b06      	ldr	r3, [pc, #24]	@ (8123aa4 <cleanup_stdio+0x3c>)
 8123a8a:	4299      	cmp	r1, r3
 8123a8c:	d004      	beq.n	8123a98 <cleanup_stdio+0x30>
 8123a8e:	4620      	mov	r0, r4
 8123a90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8123a94:	f7ff bf6a 	b.w	812396c <_fflush_r>
 8123a98:	bd10      	pop	{r4, pc}
 8123a9a:	bf00      	nop
 8123a9c:	1000e514 	.word	0x1000e514
 8123aa0:	1000e57c 	.word	0x1000e57c
 8123aa4:	1000e5e4 	.word	0x1000e5e4

08123aa8 <global_stdio_init.part.0>:
 8123aa8:	b510      	push	{r4, lr}
 8123aaa:	4b0b      	ldr	r3, [pc, #44]	@ (8123ad8 <global_stdio_init.part.0+0x30>)
 8123aac:	4c0b      	ldr	r4, [pc, #44]	@ (8123adc <global_stdio_init.part.0+0x34>)
 8123aae:	4a0c      	ldr	r2, [pc, #48]	@ (8123ae0 <global_stdio_init.part.0+0x38>)
 8123ab0:	601a      	str	r2, [r3, #0]
 8123ab2:	4620      	mov	r0, r4
 8123ab4:	2200      	movs	r2, #0
 8123ab6:	2104      	movs	r1, #4
 8123ab8:	f7ff ff94 	bl	81239e4 <std>
 8123abc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8123ac0:	2201      	movs	r2, #1
 8123ac2:	2109      	movs	r1, #9
 8123ac4:	f7ff ff8e 	bl	81239e4 <std>
 8123ac8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8123acc:	2202      	movs	r2, #2
 8123ace:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8123ad2:	2112      	movs	r1, #18
 8123ad4:	f7ff bf86 	b.w	81239e4 <std>
 8123ad8:	1000e64c 	.word	0x1000e64c
 8123adc:	1000e514 	.word	0x1000e514
 8123ae0:	08123a51 	.word	0x08123a51

08123ae4 <__sfp_lock_acquire>:
 8123ae4:	4801      	ldr	r0, [pc, #4]	@ (8123aec <__sfp_lock_acquire+0x8>)
 8123ae6:	f000 bb26 	b.w	8124136 <__retarget_lock_acquire_recursive>
 8123aea:	bf00      	nop
 8123aec:	1000e655 	.word	0x1000e655

08123af0 <__sfp_lock_release>:
 8123af0:	4801      	ldr	r0, [pc, #4]	@ (8123af8 <__sfp_lock_release+0x8>)
 8123af2:	f000 bb21 	b.w	8124138 <__retarget_lock_release_recursive>
 8123af6:	bf00      	nop
 8123af8:	1000e655 	.word	0x1000e655

08123afc <__sinit>:
 8123afc:	b510      	push	{r4, lr}
 8123afe:	4604      	mov	r4, r0
 8123b00:	f7ff fff0 	bl	8123ae4 <__sfp_lock_acquire>
 8123b04:	6a23      	ldr	r3, [r4, #32]
 8123b06:	b11b      	cbz	r3, 8123b10 <__sinit+0x14>
 8123b08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8123b0c:	f7ff bff0 	b.w	8123af0 <__sfp_lock_release>
 8123b10:	4b04      	ldr	r3, [pc, #16]	@ (8123b24 <__sinit+0x28>)
 8123b12:	6223      	str	r3, [r4, #32]
 8123b14:	4b04      	ldr	r3, [pc, #16]	@ (8123b28 <__sinit+0x2c>)
 8123b16:	681b      	ldr	r3, [r3, #0]
 8123b18:	2b00      	cmp	r3, #0
 8123b1a:	d1f5      	bne.n	8123b08 <__sinit+0xc>
 8123b1c:	f7ff ffc4 	bl	8123aa8 <global_stdio_init.part.0>
 8123b20:	e7f2      	b.n	8123b08 <__sinit+0xc>
 8123b22:	bf00      	nop
 8123b24:	08123a69 	.word	0x08123a69
 8123b28:	1000e64c 	.word	0x1000e64c

08123b2c <_fwalk_sglue>:
 8123b2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8123b30:	4607      	mov	r7, r0
 8123b32:	4688      	mov	r8, r1
 8123b34:	4614      	mov	r4, r2
 8123b36:	2600      	movs	r6, #0
 8123b38:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8123b3c:	f1b9 0901 	subs.w	r9, r9, #1
 8123b40:	d505      	bpl.n	8123b4e <_fwalk_sglue+0x22>
 8123b42:	6824      	ldr	r4, [r4, #0]
 8123b44:	2c00      	cmp	r4, #0
 8123b46:	d1f7      	bne.n	8123b38 <_fwalk_sglue+0xc>
 8123b48:	4630      	mov	r0, r6
 8123b4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8123b4e:	89ab      	ldrh	r3, [r5, #12]
 8123b50:	2b01      	cmp	r3, #1
 8123b52:	d907      	bls.n	8123b64 <_fwalk_sglue+0x38>
 8123b54:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8123b58:	3301      	adds	r3, #1
 8123b5a:	d003      	beq.n	8123b64 <_fwalk_sglue+0x38>
 8123b5c:	4629      	mov	r1, r5
 8123b5e:	4638      	mov	r0, r7
 8123b60:	47c0      	blx	r8
 8123b62:	4306      	orrs	r6, r0
 8123b64:	3568      	adds	r5, #104	@ 0x68
 8123b66:	e7e9      	b.n	8123b3c <_fwalk_sglue+0x10>

08123b68 <_fwrite_r>:
 8123b68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8123b6c:	9c08      	ldr	r4, [sp, #32]
 8123b6e:	468a      	mov	sl, r1
 8123b70:	4690      	mov	r8, r2
 8123b72:	fb02 f903 	mul.w	r9, r2, r3
 8123b76:	4606      	mov	r6, r0
 8123b78:	b118      	cbz	r0, 8123b82 <_fwrite_r+0x1a>
 8123b7a:	6a03      	ldr	r3, [r0, #32]
 8123b7c:	b90b      	cbnz	r3, 8123b82 <_fwrite_r+0x1a>
 8123b7e:	f7ff ffbd 	bl	8123afc <__sinit>
 8123b82:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8123b84:	07dd      	lsls	r5, r3, #31
 8123b86:	d405      	bmi.n	8123b94 <_fwrite_r+0x2c>
 8123b88:	89a3      	ldrh	r3, [r4, #12]
 8123b8a:	0598      	lsls	r0, r3, #22
 8123b8c:	d402      	bmi.n	8123b94 <_fwrite_r+0x2c>
 8123b8e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8123b90:	f000 fad1 	bl	8124136 <__retarget_lock_acquire_recursive>
 8123b94:	89a3      	ldrh	r3, [r4, #12]
 8123b96:	0719      	lsls	r1, r3, #28
 8123b98:	d516      	bpl.n	8123bc8 <_fwrite_r+0x60>
 8123b9a:	6923      	ldr	r3, [r4, #16]
 8123b9c:	b1a3      	cbz	r3, 8123bc8 <_fwrite_r+0x60>
 8123b9e:	2500      	movs	r5, #0
 8123ba0:	454d      	cmp	r5, r9
 8123ba2:	d01f      	beq.n	8123be4 <_fwrite_r+0x7c>
 8123ba4:	68a7      	ldr	r7, [r4, #8]
 8123ba6:	f81a 1005 	ldrb.w	r1, [sl, r5]
 8123baa:	3f01      	subs	r7, #1
 8123bac:	2f00      	cmp	r7, #0
 8123bae:	60a7      	str	r7, [r4, #8]
 8123bb0:	da04      	bge.n	8123bbc <_fwrite_r+0x54>
 8123bb2:	69a3      	ldr	r3, [r4, #24]
 8123bb4:	429f      	cmp	r7, r3
 8123bb6:	db0f      	blt.n	8123bd8 <_fwrite_r+0x70>
 8123bb8:	290a      	cmp	r1, #10
 8123bba:	d00d      	beq.n	8123bd8 <_fwrite_r+0x70>
 8123bbc:	6823      	ldr	r3, [r4, #0]
 8123bbe:	1c5a      	adds	r2, r3, #1
 8123bc0:	6022      	str	r2, [r4, #0]
 8123bc2:	7019      	strb	r1, [r3, #0]
 8123bc4:	3501      	adds	r5, #1
 8123bc6:	e7eb      	b.n	8123ba0 <_fwrite_r+0x38>
 8123bc8:	4621      	mov	r1, r4
 8123bca:	4630      	mov	r0, r6
 8123bcc:	f000 f8e6 	bl	8123d9c <__swsetup_r>
 8123bd0:	2800      	cmp	r0, #0
 8123bd2:	d0e4      	beq.n	8123b9e <_fwrite_r+0x36>
 8123bd4:	2500      	movs	r5, #0
 8123bd6:	e005      	b.n	8123be4 <_fwrite_r+0x7c>
 8123bd8:	4622      	mov	r2, r4
 8123bda:	4630      	mov	r0, r6
 8123bdc:	f000 f89f 	bl	8123d1e <__swbuf_r>
 8123be0:	3001      	adds	r0, #1
 8123be2:	d1ef      	bne.n	8123bc4 <_fwrite_r+0x5c>
 8123be4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8123be6:	07da      	lsls	r2, r3, #31
 8123be8:	d405      	bmi.n	8123bf6 <_fwrite_r+0x8e>
 8123bea:	89a3      	ldrh	r3, [r4, #12]
 8123bec:	059b      	lsls	r3, r3, #22
 8123bee:	d402      	bmi.n	8123bf6 <_fwrite_r+0x8e>
 8123bf0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8123bf2:	f000 faa1 	bl	8124138 <__retarget_lock_release_recursive>
 8123bf6:	fbb5 f0f8 	udiv	r0, r5, r8
 8123bfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

08123c00 <fwrite>:
 8123c00:	b507      	push	{r0, r1, r2, lr}
 8123c02:	9300      	str	r3, [sp, #0]
 8123c04:	4613      	mov	r3, r2
 8123c06:	460a      	mov	r2, r1
 8123c08:	4601      	mov	r1, r0
 8123c0a:	4803      	ldr	r0, [pc, #12]	@ (8123c18 <fwrite+0x18>)
 8123c0c:	6800      	ldr	r0, [r0, #0]
 8123c0e:	f7ff ffab 	bl	8123b68 <_fwrite_r>
 8123c12:	b003      	add	sp, #12
 8123c14:	f85d fb04 	ldr.w	pc, [sp], #4
 8123c18:	10000040 	.word	0x10000040

08123c1c <iprintf>:
 8123c1c:	b40f      	push	{r0, r1, r2, r3}
 8123c1e:	b507      	push	{r0, r1, r2, lr}
 8123c20:	4906      	ldr	r1, [pc, #24]	@ (8123c3c <iprintf+0x20>)
 8123c22:	ab04      	add	r3, sp, #16
 8123c24:	6808      	ldr	r0, [r1, #0]
 8123c26:	f853 2b04 	ldr.w	r2, [r3], #4
 8123c2a:	6881      	ldr	r1, [r0, #8]
 8123c2c:	9301      	str	r3, [sp, #4]
 8123c2e:	f7ff fb69 	bl	8123304 <_vfiprintf_r>
 8123c32:	b003      	add	sp, #12
 8123c34:	f85d eb04 	ldr.w	lr, [sp], #4
 8123c38:	b004      	add	sp, #16
 8123c3a:	4770      	bx	lr
 8123c3c:	10000040 	.word	0x10000040

08123c40 <siscanf>:
 8123c40:	b40e      	push	{r1, r2, r3}
 8123c42:	b530      	push	{r4, r5, lr}
 8123c44:	b09c      	sub	sp, #112	@ 0x70
 8123c46:	ac1f      	add	r4, sp, #124	@ 0x7c
 8123c48:	f44f 7201 	mov.w	r2, #516	@ 0x204
 8123c4c:	f854 5b04 	ldr.w	r5, [r4], #4
 8123c50:	f8ad 2014 	strh.w	r2, [sp, #20]
 8123c54:	9002      	str	r0, [sp, #8]
 8123c56:	9006      	str	r0, [sp, #24]
 8123c58:	f7dc fb92 	bl	8100380 <strlen>
 8123c5c:	4b0b      	ldr	r3, [pc, #44]	@ (8123c8c <siscanf+0x4c>)
 8123c5e:	9003      	str	r0, [sp, #12]
 8123c60:	9007      	str	r0, [sp, #28]
 8123c62:	930b      	str	r3, [sp, #44]	@ 0x2c
 8123c64:	480a      	ldr	r0, [pc, #40]	@ (8123c90 <siscanf+0x50>)
 8123c66:	9401      	str	r4, [sp, #4]
 8123c68:	2300      	movs	r3, #0
 8123c6a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8123c6c:	9314      	str	r3, [sp, #80]	@ 0x50
 8123c6e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8123c72:	f8ad 3016 	strh.w	r3, [sp, #22]
 8123c76:	462a      	mov	r2, r5
 8123c78:	4623      	mov	r3, r4
 8123c7a:	a902      	add	r1, sp, #8
 8123c7c:	6800      	ldr	r0, [r0, #0]
 8123c7e:	f000 fb59 	bl	8124334 <__ssvfiscanf_r>
 8123c82:	b01c      	add	sp, #112	@ 0x70
 8123c84:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8123c88:	b003      	add	sp, #12
 8123c8a:	4770      	bx	lr
 8123c8c:	08123cb7 	.word	0x08123cb7
 8123c90:	10000040 	.word	0x10000040

08123c94 <__sread>:
 8123c94:	b510      	push	{r4, lr}
 8123c96:	460c      	mov	r4, r1
 8123c98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8123c9c:	f000 f9d8 	bl	8124050 <_read_r>
 8123ca0:	2800      	cmp	r0, #0
 8123ca2:	bfab      	itete	ge
 8123ca4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8123ca6:	89a3      	ldrhlt	r3, [r4, #12]
 8123ca8:	181b      	addge	r3, r3, r0
 8123caa:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8123cae:	bfac      	ite	ge
 8123cb0:	6563      	strge	r3, [r4, #84]	@ 0x54
 8123cb2:	81a3      	strhlt	r3, [r4, #12]
 8123cb4:	bd10      	pop	{r4, pc}

08123cb6 <__seofread>:
 8123cb6:	2000      	movs	r0, #0
 8123cb8:	4770      	bx	lr

08123cba <__swrite>:
 8123cba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8123cbe:	461f      	mov	r7, r3
 8123cc0:	898b      	ldrh	r3, [r1, #12]
 8123cc2:	05db      	lsls	r3, r3, #23
 8123cc4:	4605      	mov	r5, r0
 8123cc6:	460c      	mov	r4, r1
 8123cc8:	4616      	mov	r6, r2
 8123cca:	d505      	bpl.n	8123cd8 <__swrite+0x1e>
 8123ccc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8123cd0:	2302      	movs	r3, #2
 8123cd2:	2200      	movs	r2, #0
 8123cd4:	f000 f9aa 	bl	812402c <_lseek_r>
 8123cd8:	89a3      	ldrh	r3, [r4, #12]
 8123cda:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8123cde:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8123ce2:	81a3      	strh	r3, [r4, #12]
 8123ce4:	4632      	mov	r2, r6
 8123ce6:	463b      	mov	r3, r7
 8123ce8:	4628      	mov	r0, r5
 8123cea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8123cee:	f000 b9e5 	b.w	81240bc <_write_r>

08123cf2 <__sseek>:
 8123cf2:	b510      	push	{r4, lr}
 8123cf4:	460c      	mov	r4, r1
 8123cf6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8123cfa:	f000 f997 	bl	812402c <_lseek_r>
 8123cfe:	1c43      	adds	r3, r0, #1
 8123d00:	89a3      	ldrh	r3, [r4, #12]
 8123d02:	bf15      	itete	ne
 8123d04:	6560      	strne	r0, [r4, #84]	@ 0x54
 8123d06:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8123d0a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8123d0e:	81a3      	strheq	r3, [r4, #12]
 8123d10:	bf18      	it	ne
 8123d12:	81a3      	strhne	r3, [r4, #12]
 8123d14:	bd10      	pop	{r4, pc}

08123d16 <__sclose>:
 8123d16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8123d1a:	f000 b921 	b.w	8123f60 <_close_r>

08123d1e <__swbuf_r>:
 8123d1e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8123d20:	460e      	mov	r6, r1
 8123d22:	4614      	mov	r4, r2
 8123d24:	4605      	mov	r5, r0
 8123d26:	b118      	cbz	r0, 8123d30 <__swbuf_r+0x12>
 8123d28:	6a03      	ldr	r3, [r0, #32]
 8123d2a:	b90b      	cbnz	r3, 8123d30 <__swbuf_r+0x12>
 8123d2c:	f7ff fee6 	bl	8123afc <__sinit>
 8123d30:	69a3      	ldr	r3, [r4, #24]
 8123d32:	60a3      	str	r3, [r4, #8]
 8123d34:	89a3      	ldrh	r3, [r4, #12]
 8123d36:	071a      	lsls	r2, r3, #28
 8123d38:	d501      	bpl.n	8123d3e <__swbuf_r+0x20>
 8123d3a:	6923      	ldr	r3, [r4, #16]
 8123d3c:	b943      	cbnz	r3, 8123d50 <__swbuf_r+0x32>
 8123d3e:	4621      	mov	r1, r4
 8123d40:	4628      	mov	r0, r5
 8123d42:	f000 f82b 	bl	8123d9c <__swsetup_r>
 8123d46:	b118      	cbz	r0, 8123d50 <__swbuf_r+0x32>
 8123d48:	f04f 37ff 	mov.w	r7, #4294967295
 8123d4c:	4638      	mov	r0, r7
 8123d4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8123d50:	6823      	ldr	r3, [r4, #0]
 8123d52:	6922      	ldr	r2, [r4, #16]
 8123d54:	1a98      	subs	r0, r3, r2
 8123d56:	6963      	ldr	r3, [r4, #20]
 8123d58:	b2f6      	uxtb	r6, r6
 8123d5a:	4283      	cmp	r3, r0
 8123d5c:	4637      	mov	r7, r6
 8123d5e:	dc05      	bgt.n	8123d6c <__swbuf_r+0x4e>
 8123d60:	4621      	mov	r1, r4
 8123d62:	4628      	mov	r0, r5
 8123d64:	f7ff fe02 	bl	812396c <_fflush_r>
 8123d68:	2800      	cmp	r0, #0
 8123d6a:	d1ed      	bne.n	8123d48 <__swbuf_r+0x2a>
 8123d6c:	68a3      	ldr	r3, [r4, #8]
 8123d6e:	3b01      	subs	r3, #1
 8123d70:	60a3      	str	r3, [r4, #8]
 8123d72:	6823      	ldr	r3, [r4, #0]
 8123d74:	1c5a      	adds	r2, r3, #1
 8123d76:	6022      	str	r2, [r4, #0]
 8123d78:	701e      	strb	r6, [r3, #0]
 8123d7a:	6962      	ldr	r2, [r4, #20]
 8123d7c:	1c43      	adds	r3, r0, #1
 8123d7e:	429a      	cmp	r2, r3
 8123d80:	d004      	beq.n	8123d8c <__swbuf_r+0x6e>
 8123d82:	89a3      	ldrh	r3, [r4, #12]
 8123d84:	07db      	lsls	r3, r3, #31
 8123d86:	d5e1      	bpl.n	8123d4c <__swbuf_r+0x2e>
 8123d88:	2e0a      	cmp	r6, #10
 8123d8a:	d1df      	bne.n	8123d4c <__swbuf_r+0x2e>
 8123d8c:	4621      	mov	r1, r4
 8123d8e:	4628      	mov	r0, r5
 8123d90:	f7ff fdec 	bl	812396c <_fflush_r>
 8123d94:	2800      	cmp	r0, #0
 8123d96:	d0d9      	beq.n	8123d4c <__swbuf_r+0x2e>
 8123d98:	e7d6      	b.n	8123d48 <__swbuf_r+0x2a>
	...

08123d9c <__swsetup_r>:
 8123d9c:	b538      	push	{r3, r4, r5, lr}
 8123d9e:	4b29      	ldr	r3, [pc, #164]	@ (8123e44 <__swsetup_r+0xa8>)
 8123da0:	4605      	mov	r5, r0
 8123da2:	6818      	ldr	r0, [r3, #0]
 8123da4:	460c      	mov	r4, r1
 8123da6:	b118      	cbz	r0, 8123db0 <__swsetup_r+0x14>
 8123da8:	6a03      	ldr	r3, [r0, #32]
 8123daa:	b90b      	cbnz	r3, 8123db0 <__swsetup_r+0x14>
 8123dac:	f7ff fea6 	bl	8123afc <__sinit>
 8123db0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8123db4:	0719      	lsls	r1, r3, #28
 8123db6:	d422      	bmi.n	8123dfe <__swsetup_r+0x62>
 8123db8:	06da      	lsls	r2, r3, #27
 8123dba:	d407      	bmi.n	8123dcc <__swsetup_r+0x30>
 8123dbc:	2209      	movs	r2, #9
 8123dbe:	602a      	str	r2, [r5, #0]
 8123dc0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8123dc4:	81a3      	strh	r3, [r4, #12]
 8123dc6:	f04f 30ff 	mov.w	r0, #4294967295
 8123dca:	e033      	b.n	8123e34 <__swsetup_r+0x98>
 8123dcc:	0758      	lsls	r0, r3, #29
 8123dce:	d512      	bpl.n	8123df6 <__swsetup_r+0x5a>
 8123dd0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8123dd2:	b141      	cbz	r1, 8123de6 <__swsetup_r+0x4a>
 8123dd4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8123dd8:	4299      	cmp	r1, r3
 8123dda:	d002      	beq.n	8123de2 <__swsetup_r+0x46>
 8123ddc:	4628      	mov	r0, r5
 8123dde:	f000 f9d9 	bl	8124194 <_free_r>
 8123de2:	2300      	movs	r3, #0
 8123de4:	6363      	str	r3, [r4, #52]	@ 0x34
 8123de6:	89a3      	ldrh	r3, [r4, #12]
 8123de8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8123dec:	81a3      	strh	r3, [r4, #12]
 8123dee:	2300      	movs	r3, #0
 8123df0:	6063      	str	r3, [r4, #4]
 8123df2:	6923      	ldr	r3, [r4, #16]
 8123df4:	6023      	str	r3, [r4, #0]
 8123df6:	89a3      	ldrh	r3, [r4, #12]
 8123df8:	f043 0308 	orr.w	r3, r3, #8
 8123dfc:	81a3      	strh	r3, [r4, #12]
 8123dfe:	6923      	ldr	r3, [r4, #16]
 8123e00:	b94b      	cbnz	r3, 8123e16 <__swsetup_r+0x7a>
 8123e02:	89a3      	ldrh	r3, [r4, #12]
 8123e04:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8123e08:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8123e0c:	d003      	beq.n	8123e16 <__swsetup_r+0x7a>
 8123e0e:	4621      	mov	r1, r4
 8123e10:	4628      	mov	r0, r5
 8123e12:	f000 fd89 	bl	8124928 <__smakebuf_r>
 8123e16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8123e1a:	f013 0201 	ands.w	r2, r3, #1
 8123e1e:	d00a      	beq.n	8123e36 <__swsetup_r+0x9a>
 8123e20:	2200      	movs	r2, #0
 8123e22:	60a2      	str	r2, [r4, #8]
 8123e24:	6962      	ldr	r2, [r4, #20]
 8123e26:	4252      	negs	r2, r2
 8123e28:	61a2      	str	r2, [r4, #24]
 8123e2a:	6922      	ldr	r2, [r4, #16]
 8123e2c:	b942      	cbnz	r2, 8123e40 <__swsetup_r+0xa4>
 8123e2e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8123e32:	d1c5      	bne.n	8123dc0 <__swsetup_r+0x24>
 8123e34:	bd38      	pop	{r3, r4, r5, pc}
 8123e36:	0799      	lsls	r1, r3, #30
 8123e38:	bf58      	it	pl
 8123e3a:	6962      	ldrpl	r2, [r4, #20]
 8123e3c:	60a2      	str	r2, [r4, #8]
 8123e3e:	e7f4      	b.n	8123e2a <__swsetup_r+0x8e>
 8123e40:	2000      	movs	r0, #0
 8123e42:	e7f7      	b.n	8123e34 <__swsetup_r+0x98>
 8123e44:	10000040 	.word	0x10000040

08123e48 <memcmp>:
 8123e48:	b510      	push	{r4, lr}
 8123e4a:	3901      	subs	r1, #1
 8123e4c:	4402      	add	r2, r0
 8123e4e:	4290      	cmp	r0, r2
 8123e50:	d101      	bne.n	8123e56 <memcmp+0xe>
 8123e52:	2000      	movs	r0, #0
 8123e54:	e005      	b.n	8123e62 <memcmp+0x1a>
 8123e56:	7803      	ldrb	r3, [r0, #0]
 8123e58:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8123e5c:	42a3      	cmp	r3, r4
 8123e5e:	d001      	beq.n	8123e64 <memcmp+0x1c>
 8123e60:	1b18      	subs	r0, r3, r4
 8123e62:	bd10      	pop	{r4, pc}
 8123e64:	3001      	adds	r0, #1
 8123e66:	e7f2      	b.n	8123e4e <memcmp+0x6>

08123e68 <memmove>:
 8123e68:	4288      	cmp	r0, r1
 8123e6a:	b510      	push	{r4, lr}
 8123e6c:	eb01 0402 	add.w	r4, r1, r2
 8123e70:	d902      	bls.n	8123e78 <memmove+0x10>
 8123e72:	4284      	cmp	r4, r0
 8123e74:	4623      	mov	r3, r4
 8123e76:	d807      	bhi.n	8123e88 <memmove+0x20>
 8123e78:	1e43      	subs	r3, r0, #1
 8123e7a:	42a1      	cmp	r1, r4
 8123e7c:	d008      	beq.n	8123e90 <memmove+0x28>
 8123e7e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8123e82:	f803 2f01 	strb.w	r2, [r3, #1]!
 8123e86:	e7f8      	b.n	8123e7a <memmove+0x12>
 8123e88:	4402      	add	r2, r0
 8123e8a:	4601      	mov	r1, r0
 8123e8c:	428a      	cmp	r2, r1
 8123e8e:	d100      	bne.n	8123e92 <memmove+0x2a>
 8123e90:	bd10      	pop	{r4, pc}
 8123e92:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8123e96:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8123e9a:	e7f7      	b.n	8123e8c <memmove+0x24>

08123e9c <memset>:
 8123e9c:	4402      	add	r2, r0
 8123e9e:	4603      	mov	r3, r0
 8123ea0:	4293      	cmp	r3, r2
 8123ea2:	d100      	bne.n	8123ea6 <memset+0xa>
 8123ea4:	4770      	bx	lr
 8123ea6:	f803 1b01 	strb.w	r1, [r3], #1
 8123eaa:	e7f9      	b.n	8123ea0 <memset+0x4>

08123eac <strncpy>:
 8123eac:	b510      	push	{r4, lr}
 8123eae:	3901      	subs	r1, #1
 8123eb0:	4603      	mov	r3, r0
 8123eb2:	b132      	cbz	r2, 8123ec2 <strncpy+0x16>
 8123eb4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8123eb8:	f803 4b01 	strb.w	r4, [r3], #1
 8123ebc:	3a01      	subs	r2, #1
 8123ebe:	2c00      	cmp	r4, #0
 8123ec0:	d1f7      	bne.n	8123eb2 <strncpy+0x6>
 8123ec2:	441a      	add	r2, r3
 8123ec4:	2100      	movs	r1, #0
 8123ec6:	4293      	cmp	r3, r2
 8123ec8:	d100      	bne.n	8123ecc <strncpy+0x20>
 8123eca:	bd10      	pop	{r4, pc}
 8123ecc:	f803 1b01 	strb.w	r1, [r3], #1
 8123ed0:	e7f9      	b.n	8123ec6 <strncpy+0x1a>

08123ed2 <strstr>:
 8123ed2:	780a      	ldrb	r2, [r1, #0]
 8123ed4:	b570      	push	{r4, r5, r6, lr}
 8123ed6:	b96a      	cbnz	r2, 8123ef4 <strstr+0x22>
 8123ed8:	bd70      	pop	{r4, r5, r6, pc}
 8123eda:	429a      	cmp	r2, r3
 8123edc:	d109      	bne.n	8123ef2 <strstr+0x20>
 8123ede:	460c      	mov	r4, r1
 8123ee0:	4605      	mov	r5, r0
 8123ee2:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8123ee6:	2b00      	cmp	r3, #0
 8123ee8:	d0f6      	beq.n	8123ed8 <strstr+0x6>
 8123eea:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8123eee:	429e      	cmp	r6, r3
 8123ef0:	d0f7      	beq.n	8123ee2 <strstr+0x10>
 8123ef2:	3001      	adds	r0, #1
 8123ef4:	7803      	ldrb	r3, [r0, #0]
 8123ef6:	2b00      	cmp	r3, #0
 8123ef8:	d1ef      	bne.n	8123eda <strstr+0x8>
 8123efa:	4618      	mov	r0, r3
 8123efc:	e7ec      	b.n	8123ed8 <strstr+0x6>

08123efe <_raise_r>:
 8123efe:	291f      	cmp	r1, #31
 8123f00:	b538      	push	{r3, r4, r5, lr}
 8123f02:	4605      	mov	r5, r0
 8123f04:	460c      	mov	r4, r1
 8123f06:	d904      	bls.n	8123f12 <_raise_r+0x14>
 8123f08:	2316      	movs	r3, #22
 8123f0a:	6003      	str	r3, [r0, #0]
 8123f0c:	f04f 30ff 	mov.w	r0, #4294967295
 8123f10:	bd38      	pop	{r3, r4, r5, pc}
 8123f12:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8123f14:	b112      	cbz	r2, 8123f1c <_raise_r+0x1e>
 8123f16:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8123f1a:	b94b      	cbnz	r3, 8123f30 <_raise_r+0x32>
 8123f1c:	4628      	mov	r0, r5
 8123f1e:	f000 f8bb 	bl	8124098 <_getpid_r>
 8123f22:	4622      	mov	r2, r4
 8123f24:	4601      	mov	r1, r0
 8123f26:	4628      	mov	r0, r5
 8123f28:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8123f2c:	f000 b8a2 	b.w	8124074 <_kill_r>
 8123f30:	2b01      	cmp	r3, #1
 8123f32:	d00a      	beq.n	8123f4a <_raise_r+0x4c>
 8123f34:	1c59      	adds	r1, r3, #1
 8123f36:	d103      	bne.n	8123f40 <_raise_r+0x42>
 8123f38:	2316      	movs	r3, #22
 8123f3a:	6003      	str	r3, [r0, #0]
 8123f3c:	2001      	movs	r0, #1
 8123f3e:	e7e7      	b.n	8123f10 <_raise_r+0x12>
 8123f40:	2100      	movs	r1, #0
 8123f42:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8123f46:	4620      	mov	r0, r4
 8123f48:	4798      	blx	r3
 8123f4a:	2000      	movs	r0, #0
 8123f4c:	e7e0      	b.n	8123f10 <_raise_r+0x12>
	...

08123f50 <raise>:
 8123f50:	4b02      	ldr	r3, [pc, #8]	@ (8123f5c <raise+0xc>)
 8123f52:	4601      	mov	r1, r0
 8123f54:	6818      	ldr	r0, [r3, #0]
 8123f56:	f7ff bfd2 	b.w	8123efe <_raise_r>
 8123f5a:	bf00      	nop
 8123f5c:	10000040 	.word	0x10000040

08123f60 <_close_r>:
 8123f60:	b538      	push	{r3, r4, r5, lr}
 8123f62:	4d06      	ldr	r5, [pc, #24]	@ (8123f7c <_close_r+0x1c>)
 8123f64:	2300      	movs	r3, #0
 8123f66:	4604      	mov	r4, r0
 8123f68:	4608      	mov	r0, r1
 8123f6a:	602b      	str	r3, [r5, #0]
 8123f6c:	f7df f9b6 	bl	81032dc <_close>
 8123f70:	1c43      	adds	r3, r0, #1
 8123f72:	d102      	bne.n	8123f7a <_close_r+0x1a>
 8123f74:	682b      	ldr	r3, [r5, #0]
 8123f76:	b103      	cbz	r3, 8123f7a <_close_r+0x1a>
 8123f78:	6023      	str	r3, [r4, #0]
 8123f7a:	bd38      	pop	{r3, r4, r5, pc}
 8123f7c:	1000e650 	.word	0x1000e650

08123f80 <_reclaim_reent>:
 8123f80:	4b29      	ldr	r3, [pc, #164]	@ (8124028 <_reclaim_reent+0xa8>)
 8123f82:	681b      	ldr	r3, [r3, #0]
 8123f84:	4283      	cmp	r3, r0
 8123f86:	b570      	push	{r4, r5, r6, lr}
 8123f88:	4604      	mov	r4, r0
 8123f8a:	d04b      	beq.n	8124024 <_reclaim_reent+0xa4>
 8123f8c:	69c3      	ldr	r3, [r0, #28]
 8123f8e:	b1ab      	cbz	r3, 8123fbc <_reclaim_reent+0x3c>
 8123f90:	68db      	ldr	r3, [r3, #12]
 8123f92:	b16b      	cbz	r3, 8123fb0 <_reclaim_reent+0x30>
 8123f94:	2500      	movs	r5, #0
 8123f96:	69e3      	ldr	r3, [r4, #28]
 8123f98:	68db      	ldr	r3, [r3, #12]
 8123f9a:	5959      	ldr	r1, [r3, r5]
 8123f9c:	2900      	cmp	r1, #0
 8123f9e:	d13b      	bne.n	8124018 <_reclaim_reent+0x98>
 8123fa0:	3504      	adds	r5, #4
 8123fa2:	2d80      	cmp	r5, #128	@ 0x80
 8123fa4:	d1f7      	bne.n	8123f96 <_reclaim_reent+0x16>
 8123fa6:	69e3      	ldr	r3, [r4, #28]
 8123fa8:	4620      	mov	r0, r4
 8123faa:	68d9      	ldr	r1, [r3, #12]
 8123fac:	f000 f8f2 	bl	8124194 <_free_r>
 8123fb0:	69e3      	ldr	r3, [r4, #28]
 8123fb2:	6819      	ldr	r1, [r3, #0]
 8123fb4:	b111      	cbz	r1, 8123fbc <_reclaim_reent+0x3c>
 8123fb6:	4620      	mov	r0, r4
 8123fb8:	f000 f8ec 	bl	8124194 <_free_r>
 8123fbc:	6961      	ldr	r1, [r4, #20]
 8123fbe:	b111      	cbz	r1, 8123fc6 <_reclaim_reent+0x46>
 8123fc0:	4620      	mov	r0, r4
 8123fc2:	f000 f8e7 	bl	8124194 <_free_r>
 8123fc6:	69e1      	ldr	r1, [r4, #28]
 8123fc8:	b111      	cbz	r1, 8123fd0 <_reclaim_reent+0x50>
 8123fca:	4620      	mov	r0, r4
 8123fcc:	f000 f8e2 	bl	8124194 <_free_r>
 8123fd0:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8123fd2:	b111      	cbz	r1, 8123fda <_reclaim_reent+0x5a>
 8123fd4:	4620      	mov	r0, r4
 8123fd6:	f000 f8dd 	bl	8124194 <_free_r>
 8123fda:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8123fdc:	b111      	cbz	r1, 8123fe4 <_reclaim_reent+0x64>
 8123fde:	4620      	mov	r0, r4
 8123fe0:	f000 f8d8 	bl	8124194 <_free_r>
 8123fe4:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8123fe6:	b111      	cbz	r1, 8123fee <_reclaim_reent+0x6e>
 8123fe8:	4620      	mov	r0, r4
 8123fea:	f000 f8d3 	bl	8124194 <_free_r>
 8123fee:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8123ff0:	b111      	cbz	r1, 8123ff8 <_reclaim_reent+0x78>
 8123ff2:	4620      	mov	r0, r4
 8123ff4:	f000 f8ce 	bl	8124194 <_free_r>
 8123ff8:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8123ffa:	b111      	cbz	r1, 8124002 <_reclaim_reent+0x82>
 8123ffc:	4620      	mov	r0, r4
 8123ffe:	f000 f8c9 	bl	8124194 <_free_r>
 8124002:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8124004:	b111      	cbz	r1, 812400c <_reclaim_reent+0x8c>
 8124006:	4620      	mov	r0, r4
 8124008:	f000 f8c4 	bl	8124194 <_free_r>
 812400c:	6a23      	ldr	r3, [r4, #32]
 812400e:	b14b      	cbz	r3, 8124024 <_reclaim_reent+0xa4>
 8124010:	4620      	mov	r0, r4
 8124012:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8124016:	4718      	bx	r3
 8124018:	680e      	ldr	r6, [r1, #0]
 812401a:	4620      	mov	r0, r4
 812401c:	f000 f8ba 	bl	8124194 <_free_r>
 8124020:	4631      	mov	r1, r6
 8124022:	e7bb      	b.n	8123f9c <_reclaim_reent+0x1c>
 8124024:	bd70      	pop	{r4, r5, r6, pc}
 8124026:	bf00      	nop
 8124028:	10000040 	.word	0x10000040

0812402c <_lseek_r>:
 812402c:	b538      	push	{r3, r4, r5, lr}
 812402e:	4d07      	ldr	r5, [pc, #28]	@ (812404c <_lseek_r+0x20>)
 8124030:	4604      	mov	r4, r0
 8124032:	4608      	mov	r0, r1
 8124034:	4611      	mov	r1, r2
 8124036:	2200      	movs	r2, #0
 8124038:	602a      	str	r2, [r5, #0]
 812403a:	461a      	mov	r2, r3
 812403c:	f7df f975 	bl	810332a <_lseek>
 8124040:	1c43      	adds	r3, r0, #1
 8124042:	d102      	bne.n	812404a <_lseek_r+0x1e>
 8124044:	682b      	ldr	r3, [r5, #0]
 8124046:	b103      	cbz	r3, 812404a <_lseek_r+0x1e>
 8124048:	6023      	str	r3, [r4, #0]
 812404a:	bd38      	pop	{r3, r4, r5, pc}
 812404c:	1000e650 	.word	0x1000e650

08124050 <_read_r>:
 8124050:	b538      	push	{r3, r4, r5, lr}
 8124052:	4d07      	ldr	r5, [pc, #28]	@ (8124070 <_read_r+0x20>)
 8124054:	4604      	mov	r4, r0
 8124056:	4608      	mov	r0, r1
 8124058:	4611      	mov	r1, r2
 812405a:	2200      	movs	r2, #0
 812405c:	602a      	str	r2, [r5, #0]
 812405e:	461a      	mov	r2, r3
 8124060:	f7df f903 	bl	810326a <_read>
 8124064:	1c43      	adds	r3, r0, #1
 8124066:	d102      	bne.n	812406e <_read_r+0x1e>
 8124068:	682b      	ldr	r3, [r5, #0]
 812406a:	b103      	cbz	r3, 812406e <_read_r+0x1e>
 812406c:	6023      	str	r3, [r4, #0]
 812406e:	bd38      	pop	{r3, r4, r5, pc}
 8124070:	1000e650 	.word	0x1000e650

08124074 <_kill_r>:
 8124074:	b538      	push	{r3, r4, r5, lr}
 8124076:	4d07      	ldr	r5, [pc, #28]	@ (8124094 <_kill_r+0x20>)
 8124078:	2300      	movs	r3, #0
 812407a:	4604      	mov	r4, r0
 812407c:	4608      	mov	r0, r1
 812407e:	4611      	mov	r1, r2
 8124080:	602b      	str	r3, [r5, #0]
 8124082:	f7df f8d5 	bl	8103230 <_kill>
 8124086:	1c43      	adds	r3, r0, #1
 8124088:	d102      	bne.n	8124090 <_kill_r+0x1c>
 812408a:	682b      	ldr	r3, [r5, #0]
 812408c:	b103      	cbz	r3, 8124090 <_kill_r+0x1c>
 812408e:	6023      	str	r3, [r4, #0]
 8124090:	bd38      	pop	{r3, r4, r5, pc}
 8124092:	bf00      	nop
 8124094:	1000e650 	.word	0x1000e650

08124098 <_getpid_r>:
 8124098:	f7df b8c2 	b.w	8103220 <_getpid>

0812409c <_sbrk_r>:
 812409c:	b538      	push	{r3, r4, r5, lr}
 812409e:	4d06      	ldr	r5, [pc, #24]	@ (81240b8 <_sbrk_r+0x1c>)
 81240a0:	2300      	movs	r3, #0
 81240a2:	4604      	mov	r4, r0
 81240a4:	4608      	mov	r0, r1
 81240a6:	602b      	str	r3, [r5, #0]
 81240a8:	f7df f94c 	bl	8103344 <_sbrk>
 81240ac:	1c43      	adds	r3, r0, #1
 81240ae:	d102      	bne.n	81240b6 <_sbrk_r+0x1a>
 81240b0:	682b      	ldr	r3, [r5, #0]
 81240b2:	b103      	cbz	r3, 81240b6 <_sbrk_r+0x1a>
 81240b4:	6023      	str	r3, [r4, #0]
 81240b6:	bd38      	pop	{r3, r4, r5, pc}
 81240b8:	1000e650 	.word	0x1000e650

081240bc <_write_r>:
 81240bc:	b538      	push	{r3, r4, r5, lr}
 81240be:	4d07      	ldr	r5, [pc, #28]	@ (81240dc <_write_r+0x20>)
 81240c0:	4604      	mov	r4, r0
 81240c2:	4608      	mov	r0, r1
 81240c4:	4611      	mov	r1, r2
 81240c6:	2200      	movs	r2, #0
 81240c8:	602a      	str	r2, [r5, #0]
 81240ca:	461a      	mov	r2, r3
 81240cc:	f7df f8ea 	bl	81032a4 <_write>
 81240d0:	1c43      	adds	r3, r0, #1
 81240d2:	d102      	bne.n	81240da <_write_r+0x1e>
 81240d4:	682b      	ldr	r3, [r5, #0]
 81240d6:	b103      	cbz	r3, 81240da <_write_r+0x1e>
 81240d8:	6023      	str	r3, [r4, #0]
 81240da:	bd38      	pop	{r3, r4, r5, pc}
 81240dc:	1000e650 	.word	0x1000e650

081240e0 <__errno>:
 81240e0:	4b01      	ldr	r3, [pc, #4]	@ (81240e8 <__errno+0x8>)
 81240e2:	6818      	ldr	r0, [r3, #0]
 81240e4:	4770      	bx	lr
 81240e6:	bf00      	nop
 81240e8:	10000040 	.word	0x10000040

081240ec <__libc_init_array>:
 81240ec:	b570      	push	{r4, r5, r6, lr}
 81240ee:	4d0d      	ldr	r5, [pc, #52]	@ (8124124 <__libc_init_array+0x38>)
 81240f0:	4c0d      	ldr	r4, [pc, #52]	@ (8124128 <__libc_init_array+0x3c>)
 81240f2:	1b64      	subs	r4, r4, r5
 81240f4:	10a4      	asrs	r4, r4, #2
 81240f6:	2600      	movs	r6, #0
 81240f8:	42a6      	cmp	r6, r4
 81240fa:	d109      	bne.n	8124110 <__libc_init_array+0x24>
 81240fc:	4d0b      	ldr	r5, [pc, #44]	@ (812412c <__libc_init_array+0x40>)
 81240fe:	4c0c      	ldr	r4, [pc, #48]	@ (8124130 <__libc_init_array+0x44>)
 8124100:	f000 fd5c 	bl	8124bbc <_init>
 8124104:	1b64      	subs	r4, r4, r5
 8124106:	10a4      	asrs	r4, r4, #2
 8124108:	2600      	movs	r6, #0
 812410a:	42a6      	cmp	r6, r4
 812410c:	d105      	bne.n	812411a <__libc_init_array+0x2e>
 812410e:	bd70      	pop	{r4, r5, r6, pc}
 8124110:	f855 3b04 	ldr.w	r3, [r5], #4
 8124114:	4798      	blx	r3
 8124116:	3601      	adds	r6, #1
 8124118:	e7ee      	b.n	81240f8 <__libc_init_array+0xc>
 812411a:	f855 3b04 	ldr.w	r3, [r5], #4
 812411e:	4798      	blx	r3
 8124120:	3601      	adds	r6, #1
 8124122:	e7f2      	b.n	812410a <__libc_init_array+0x1e>
 8124124:	08128b60 	.word	0x08128b60
 8124128:	08128b60 	.word	0x08128b60
 812412c:	08128b60 	.word	0x08128b60
 8124130:	08128b74 	.word	0x08128b74

08124134 <__retarget_lock_init_recursive>:
 8124134:	4770      	bx	lr

08124136 <__retarget_lock_acquire_recursive>:
 8124136:	4770      	bx	lr

08124138 <__retarget_lock_release_recursive>:
 8124138:	4770      	bx	lr

0812413a <memcpy>:
 812413a:	440a      	add	r2, r1
 812413c:	4291      	cmp	r1, r2
 812413e:	f100 33ff 	add.w	r3, r0, #4294967295
 8124142:	d100      	bne.n	8124146 <memcpy+0xc>
 8124144:	4770      	bx	lr
 8124146:	b510      	push	{r4, lr}
 8124148:	f811 4b01 	ldrb.w	r4, [r1], #1
 812414c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8124150:	4291      	cmp	r1, r2
 8124152:	d1f9      	bne.n	8124148 <memcpy+0xe>
 8124154:	bd10      	pop	{r4, pc}
	...

08124158 <__assert_func>:
 8124158:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 812415a:	4614      	mov	r4, r2
 812415c:	461a      	mov	r2, r3
 812415e:	4b09      	ldr	r3, [pc, #36]	@ (8124184 <__assert_func+0x2c>)
 8124160:	681b      	ldr	r3, [r3, #0]
 8124162:	4605      	mov	r5, r0
 8124164:	68d8      	ldr	r0, [r3, #12]
 8124166:	b954      	cbnz	r4, 812417e <__assert_func+0x26>
 8124168:	4b07      	ldr	r3, [pc, #28]	@ (8124188 <__assert_func+0x30>)
 812416a:	461c      	mov	r4, r3
 812416c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8124170:	9100      	str	r1, [sp, #0]
 8124172:	462b      	mov	r3, r5
 8124174:	4905      	ldr	r1, [pc, #20]	@ (812418c <__assert_func+0x34>)
 8124176:	f000 fb9f 	bl	81248b8 <fiprintf>
 812417a:	f7fe ff19 	bl	8122fb0 <abort>
 812417e:	4b04      	ldr	r3, [pc, #16]	@ (8124190 <__assert_func+0x38>)
 8124180:	e7f4      	b.n	812416c <__assert_func+0x14>
 8124182:	bf00      	nop
 8124184:	10000040 	.word	0x10000040
 8124188:	08128b3a 	.word	0x08128b3a
 812418c:	08128b0c 	.word	0x08128b0c
 8124190:	08128aff 	.word	0x08128aff

08124194 <_free_r>:
 8124194:	b538      	push	{r3, r4, r5, lr}
 8124196:	4605      	mov	r5, r0
 8124198:	2900      	cmp	r1, #0
 812419a:	d041      	beq.n	8124220 <_free_r+0x8c>
 812419c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 81241a0:	1f0c      	subs	r4, r1, #4
 81241a2:	2b00      	cmp	r3, #0
 81241a4:	bfb8      	it	lt
 81241a6:	18e4      	addlt	r4, r4, r3
 81241a8:	f7fe ffbc 	bl	8123124 <__malloc_lock>
 81241ac:	4a1d      	ldr	r2, [pc, #116]	@ (8124224 <_free_r+0x90>)
 81241ae:	6813      	ldr	r3, [r2, #0]
 81241b0:	b933      	cbnz	r3, 81241c0 <_free_r+0x2c>
 81241b2:	6063      	str	r3, [r4, #4]
 81241b4:	6014      	str	r4, [r2, #0]
 81241b6:	4628      	mov	r0, r5
 81241b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 81241bc:	f7fe bfb8 	b.w	8123130 <__malloc_unlock>
 81241c0:	42a3      	cmp	r3, r4
 81241c2:	d908      	bls.n	81241d6 <_free_r+0x42>
 81241c4:	6820      	ldr	r0, [r4, #0]
 81241c6:	1821      	adds	r1, r4, r0
 81241c8:	428b      	cmp	r3, r1
 81241ca:	bf01      	itttt	eq
 81241cc:	6819      	ldreq	r1, [r3, #0]
 81241ce:	685b      	ldreq	r3, [r3, #4]
 81241d0:	1809      	addeq	r1, r1, r0
 81241d2:	6021      	streq	r1, [r4, #0]
 81241d4:	e7ed      	b.n	81241b2 <_free_r+0x1e>
 81241d6:	461a      	mov	r2, r3
 81241d8:	685b      	ldr	r3, [r3, #4]
 81241da:	b10b      	cbz	r3, 81241e0 <_free_r+0x4c>
 81241dc:	42a3      	cmp	r3, r4
 81241de:	d9fa      	bls.n	81241d6 <_free_r+0x42>
 81241e0:	6811      	ldr	r1, [r2, #0]
 81241e2:	1850      	adds	r0, r2, r1
 81241e4:	42a0      	cmp	r0, r4
 81241e6:	d10b      	bne.n	8124200 <_free_r+0x6c>
 81241e8:	6820      	ldr	r0, [r4, #0]
 81241ea:	4401      	add	r1, r0
 81241ec:	1850      	adds	r0, r2, r1
 81241ee:	4283      	cmp	r3, r0
 81241f0:	6011      	str	r1, [r2, #0]
 81241f2:	d1e0      	bne.n	81241b6 <_free_r+0x22>
 81241f4:	6818      	ldr	r0, [r3, #0]
 81241f6:	685b      	ldr	r3, [r3, #4]
 81241f8:	6053      	str	r3, [r2, #4]
 81241fa:	4408      	add	r0, r1
 81241fc:	6010      	str	r0, [r2, #0]
 81241fe:	e7da      	b.n	81241b6 <_free_r+0x22>
 8124200:	d902      	bls.n	8124208 <_free_r+0x74>
 8124202:	230c      	movs	r3, #12
 8124204:	602b      	str	r3, [r5, #0]
 8124206:	e7d6      	b.n	81241b6 <_free_r+0x22>
 8124208:	6820      	ldr	r0, [r4, #0]
 812420a:	1821      	adds	r1, r4, r0
 812420c:	428b      	cmp	r3, r1
 812420e:	bf04      	itt	eq
 8124210:	6819      	ldreq	r1, [r3, #0]
 8124212:	685b      	ldreq	r3, [r3, #4]
 8124214:	6063      	str	r3, [r4, #4]
 8124216:	bf04      	itt	eq
 8124218:	1809      	addeq	r1, r1, r0
 812421a:	6021      	streq	r1, [r4, #0]
 812421c:	6054      	str	r4, [r2, #4]
 812421e:	e7ca      	b.n	81241b6 <_free_r+0x22>
 8124220:	bd38      	pop	{r3, r4, r5, pc}
 8124222:	bf00      	nop
 8124224:	1000e510 	.word	0x1000e510

08124228 <_realloc_r>:
 8124228:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 812422c:	4680      	mov	r8, r0
 812422e:	4615      	mov	r5, r2
 8124230:	460c      	mov	r4, r1
 8124232:	b921      	cbnz	r1, 812423e <_realloc_r+0x16>
 8124234:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8124238:	4611      	mov	r1, r2
 812423a:	f7fe bef3 	b.w	8123024 <_malloc_r>
 812423e:	b92a      	cbnz	r2, 812424c <_realloc_r+0x24>
 8124240:	f7ff ffa8 	bl	8124194 <_free_r>
 8124244:	2400      	movs	r4, #0
 8124246:	4620      	mov	r0, r4
 8124248:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 812424c:	f000 fc3e 	bl	8124acc <_malloc_usable_size_r>
 8124250:	4285      	cmp	r5, r0
 8124252:	4606      	mov	r6, r0
 8124254:	d802      	bhi.n	812425c <_realloc_r+0x34>
 8124256:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 812425a:	d8f4      	bhi.n	8124246 <_realloc_r+0x1e>
 812425c:	4629      	mov	r1, r5
 812425e:	4640      	mov	r0, r8
 8124260:	f7fe fee0 	bl	8123024 <_malloc_r>
 8124264:	4607      	mov	r7, r0
 8124266:	2800      	cmp	r0, #0
 8124268:	d0ec      	beq.n	8124244 <_realloc_r+0x1c>
 812426a:	42b5      	cmp	r5, r6
 812426c:	462a      	mov	r2, r5
 812426e:	4621      	mov	r1, r4
 8124270:	bf28      	it	cs
 8124272:	4632      	movcs	r2, r6
 8124274:	f7ff ff61 	bl	812413a <memcpy>
 8124278:	4621      	mov	r1, r4
 812427a:	4640      	mov	r0, r8
 812427c:	f7ff ff8a 	bl	8124194 <_free_r>
 8124280:	463c      	mov	r4, r7
 8124282:	e7e0      	b.n	8124246 <_realloc_r+0x1e>

08124284 <_sungetc_r>:
 8124284:	b538      	push	{r3, r4, r5, lr}
 8124286:	1c4b      	adds	r3, r1, #1
 8124288:	4614      	mov	r4, r2
 812428a:	d103      	bne.n	8124294 <_sungetc_r+0x10>
 812428c:	f04f 35ff 	mov.w	r5, #4294967295
 8124290:	4628      	mov	r0, r5
 8124292:	bd38      	pop	{r3, r4, r5, pc}
 8124294:	8993      	ldrh	r3, [r2, #12]
 8124296:	f023 0320 	bic.w	r3, r3, #32
 812429a:	8193      	strh	r3, [r2, #12]
 812429c:	6853      	ldr	r3, [r2, #4]
 812429e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 81242a0:	b2cd      	uxtb	r5, r1
 81242a2:	b18a      	cbz	r2, 81242c8 <_sungetc_r+0x44>
 81242a4:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 81242a6:	429a      	cmp	r2, r3
 81242a8:	dd08      	ble.n	81242bc <_sungetc_r+0x38>
 81242aa:	6823      	ldr	r3, [r4, #0]
 81242ac:	1e5a      	subs	r2, r3, #1
 81242ae:	6022      	str	r2, [r4, #0]
 81242b0:	f803 5c01 	strb.w	r5, [r3, #-1]
 81242b4:	6863      	ldr	r3, [r4, #4]
 81242b6:	3301      	adds	r3, #1
 81242b8:	6063      	str	r3, [r4, #4]
 81242ba:	e7e9      	b.n	8124290 <_sungetc_r+0xc>
 81242bc:	4621      	mov	r1, r4
 81242be:	f000 fba8 	bl	8124a12 <__submore>
 81242c2:	2800      	cmp	r0, #0
 81242c4:	d0f1      	beq.n	81242aa <_sungetc_r+0x26>
 81242c6:	e7e1      	b.n	812428c <_sungetc_r+0x8>
 81242c8:	6921      	ldr	r1, [r4, #16]
 81242ca:	6822      	ldr	r2, [r4, #0]
 81242cc:	b141      	cbz	r1, 81242e0 <_sungetc_r+0x5c>
 81242ce:	4291      	cmp	r1, r2
 81242d0:	d206      	bcs.n	81242e0 <_sungetc_r+0x5c>
 81242d2:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 81242d6:	42a9      	cmp	r1, r5
 81242d8:	d102      	bne.n	81242e0 <_sungetc_r+0x5c>
 81242da:	3a01      	subs	r2, #1
 81242dc:	6022      	str	r2, [r4, #0]
 81242de:	e7ea      	b.n	81242b6 <_sungetc_r+0x32>
 81242e0:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 81242e4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 81242e8:	6363      	str	r3, [r4, #52]	@ 0x34
 81242ea:	2303      	movs	r3, #3
 81242ec:	63a3      	str	r3, [r4, #56]	@ 0x38
 81242ee:	4623      	mov	r3, r4
 81242f0:	f803 5f46 	strb.w	r5, [r3, #70]!
 81242f4:	6023      	str	r3, [r4, #0]
 81242f6:	2301      	movs	r3, #1
 81242f8:	e7de      	b.n	81242b8 <_sungetc_r+0x34>

081242fa <__ssrefill_r>:
 81242fa:	b510      	push	{r4, lr}
 81242fc:	460c      	mov	r4, r1
 81242fe:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8124300:	b169      	cbz	r1, 812431e <__ssrefill_r+0x24>
 8124302:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8124306:	4299      	cmp	r1, r3
 8124308:	d001      	beq.n	812430e <__ssrefill_r+0x14>
 812430a:	f7ff ff43 	bl	8124194 <_free_r>
 812430e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8124310:	6063      	str	r3, [r4, #4]
 8124312:	2000      	movs	r0, #0
 8124314:	6360      	str	r0, [r4, #52]	@ 0x34
 8124316:	b113      	cbz	r3, 812431e <__ssrefill_r+0x24>
 8124318:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 812431a:	6023      	str	r3, [r4, #0]
 812431c:	bd10      	pop	{r4, pc}
 812431e:	6923      	ldr	r3, [r4, #16]
 8124320:	6023      	str	r3, [r4, #0]
 8124322:	2300      	movs	r3, #0
 8124324:	6063      	str	r3, [r4, #4]
 8124326:	89a3      	ldrh	r3, [r4, #12]
 8124328:	f043 0320 	orr.w	r3, r3, #32
 812432c:	81a3      	strh	r3, [r4, #12]
 812432e:	f04f 30ff 	mov.w	r0, #4294967295
 8124332:	e7f3      	b.n	812431c <__ssrefill_r+0x22>

08124334 <__ssvfiscanf_r>:
 8124334:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8124338:	460c      	mov	r4, r1
 812433a:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 812433e:	2100      	movs	r1, #0
 8124340:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 8124344:	49a5      	ldr	r1, [pc, #660]	@ (81245dc <__ssvfiscanf_r+0x2a8>)
 8124346:	91a0      	str	r1, [sp, #640]	@ 0x280
 8124348:	f10d 0804 	add.w	r8, sp, #4
 812434c:	49a4      	ldr	r1, [pc, #656]	@ (81245e0 <__ssvfiscanf_r+0x2ac>)
 812434e:	4fa5      	ldr	r7, [pc, #660]	@ (81245e4 <__ssvfiscanf_r+0x2b0>)
 8124350:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 8124354:	4606      	mov	r6, r0
 8124356:	91a1      	str	r1, [sp, #644]	@ 0x284
 8124358:	9300      	str	r3, [sp, #0]
 812435a:	7813      	ldrb	r3, [r2, #0]
 812435c:	2b00      	cmp	r3, #0
 812435e:	f000 8158 	beq.w	8124612 <__ssvfiscanf_r+0x2de>
 8124362:	5cf9      	ldrb	r1, [r7, r3]
 8124364:	f011 0108 	ands.w	r1, r1, #8
 8124368:	f102 0501 	add.w	r5, r2, #1
 812436c:	d019      	beq.n	81243a2 <__ssvfiscanf_r+0x6e>
 812436e:	6863      	ldr	r3, [r4, #4]
 8124370:	2b00      	cmp	r3, #0
 8124372:	dd0f      	ble.n	8124394 <__ssvfiscanf_r+0x60>
 8124374:	6823      	ldr	r3, [r4, #0]
 8124376:	781a      	ldrb	r2, [r3, #0]
 8124378:	5cba      	ldrb	r2, [r7, r2]
 812437a:	0712      	lsls	r2, r2, #28
 812437c:	d401      	bmi.n	8124382 <__ssvfiscanf_r+0x4e>
 812437e:	462a      	mov	r2, r5
 8124380:	e7eb      	b.n	812435a <__ssvfiscanf_r+0x26>
 8124382:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8124384:	3201      	adds	r2, #1
 8124386:	9245      	str	r2, [sp, #276]	@ 0x114
 8124388:	6862      	ldr	r2, [r4, #4]
 812438a:	3301      	adds	r3, #1
 812438c:	3a01      	subs	r2, #1
 812438e:	6062      	str	r2, [r4, #4]
 8124390:	6023      	str	r3, [r4, #0]
 8124392:	e7ec      	b.n	812436e <__ssvfiscanf_r+0x3a>
 8124394:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8124396:	4621      	mov	r1, r4
 8124398:	4630      	mov	r0, r6
 812439a:	4798      	blx	r3
 812439c:	2800      	cmp	r0, #0
 812439e:	d0e9      	beq.n	8124374 <__ssvfiscanf_r+0x40>
 81243a0:	e7ed      	b.n	812437e <__ssvfiscanf_r+0x4a>
 81243a2:	2b25      	cmp	r3, #37	@ 0x25
 81243a4:	d012      	beq.n	81243cc <__ssvfiscanf_r+0x98>
 81243a6:	4699      	mov	r9, r3
 81243a8:	6863      	ldr	r3, [r4, #4]
 81243aa:	2b00      	cmp	r3, #0
 81243ac:	f340 8093 	ble.w	81244d6 <__ssvfiscanf_r+0x1a2>
 81243b0:	6822      	ldr	r2, [r4, #0]
 81243b2:	7813      	ldrb	r3, [r2, #0]
 81243b4:	454b      	cmp	r3, r9
 81243b6:	f040 812c 	bne.w	8124612 <__ssvfiscanf_r+0x2de>
 81243ba:	6863      	ldr	r3, [r4, #4]
 81243bc:	3b01      	subs	r3, #1
 81243be:	6063      	str	r3, [r4, #4]
 81243c0:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 81243c2:	3201      	adds	r2, #1
 81243c4:	3301      	adds	r3, #1
 81243c6:	6022      	str	r2, [r4, #0]
 81243c8:	9345      	str	r3, [sp, #276]	@ 0x114
 81243ca:	e7d8      	b.n	812437e <__ssvfiscanf_r+0x4a>
 81243cc:	9141      	str	r1, [sp, #260]	@ 0x104
 81243ce:	9143      	str	r1, [sp, #268]	@ 0x10c
 81243d0:	7853      	ldrb	r3, [r2, #1]
 81243d2:	2b2a      	cmp	r3, #42	@ 0x2a
 81243d4:	bf02      	ittt	eq
 81243d6:	2310      	moveq	r3, #16
 81243d8:	1c95      	addeq	r5, r2, #2
 81243da:	9341      	streq	r3, [sp, #260]	@ 0x104
 81243dc:	220a      	movs	r2, #10
 81243de:	46a9      	mov	r9, r5
 81243e0:	f819 1b01 	ldrb.w	r1, [r9], #1
 81243e4:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 81243e8:	2b09      	cmp	r3, #9
 81243ea:	d91e      	bls.n	812442a <__ssvfiscanf_r+0xf6>
 81243ec:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 81245e8 <__ssvfiscanf_r+0x2b4>
 81243f0:	2203      	movs	r2, #3
 81243f2:	4650      	mov	r0, sl
 81243f4:	f7db ff74 	bl	81002e0 <memchr>
 81243f8:	b138      	cbz	r0, 812440a <__ssvfiscanf_r+0xd6>
 81243fa:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 81243fc:	eba0 000a 	sub.w	r0, r0, sl
 8124400:	2301      	movs	r3, #1
 8124402:	4083      	lsls	r3, r0
 8124404:	4313      	orrs	r3, r2
 8124406:	9341      	str	r3, [sp, #260]	@ 0x104
 8124408:	464d      	mov	r5, r9
 812440a:	f815 3b01 	ldrb.w	r3, [r5], #1
 812440e:	2b78      	cmp	r3, #120	@ 0x78
 8124410:	d806      	bhi.n	8124420 <__ssvfiscanf_r+0xec>
 8124412:	2b57      	cmp	r3, #87	@ 0x57
 8124414:	d810      	bhi.n	8124438 <__ssvfiscanf_r+0x104>
 8124416:	2b25      	cmp	r3, #37	@ 0x25
 8124418:	d0c5      	beq.n	81243a6 <__ssvfiscanf_r+0x72>
 812441a:	d857      	bhi.n	81244cc <__ssvfiscanf_r+0x198>
 812441c:	2b00      	cmp	r3, #0
 812441e:	d065      	beq.n	81244ec <__ssvfiscanf_r+0x1b8>
 8124420:	2303      	movs	r3, #3
 8124422:	9347      	str	r3, [sp, #284]	@ 0x11c
 8124424:	230a      	movs	r3, #10
 8124426:	9342      	str	r3, [sp, #264]	@ 0x108
 8124428:	e078      	b.n	812451c <__ssvfiscanf_r+0x1e8>
 812442a:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 812442c:	fb02 1103 	mla	r1, r2, r3, r1
 8124430:	3930      	subs	r1, #48	@ 0x30
 8124432:	9143      	str	r1, [sp, #268]	@ 0x10c
 8124434:	464d      	mov	r5, r9
 8124436:	e7d2      	b.n	81243de <__ssvfiscanf_r+0xaa>
 8124438:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 812443c:	2a20      	cmp	r2, #32
 812443e:	d8ef      	bhi.n	8124420 <__ssvfiscanf_r+0xec>
 8124440:	a101      	add	r1, pc, #4	@ (adr r1, 8124448 <__ssvfiscanf_r+0x114>)
 8124442:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8124446:	bf00      	nop
 8124448:	081244fb 	.word	0x081244fb
 812444c:	08124421 	.word	0x08124421
 8124450:	08124421 	.word	0x08124421
 8124454:	08124555 	.word	0x08124555
 8124458:	08124421 	.word	0x08124421
 812445c:	08124421 	.word	0x08124421
 8124460:	08124421 	.word	0x08124421
 8124464:	08124421 	.word	0x08124421
 8124468:	08124421 	.word	0x08124421
 812446c:	08124421 	.word	0x08124421
 8124470:	08124421 	.word	0x08124421
 8124474:	0812456b 	.word	0x0812456b
 8124478:	08124551 	.word	0x08124551
 812447c:	081244d3 	.word	0x081244d3
 8124480:	081244d3 	.word	0x081244d3
 8124484:	081244d3 	.word	0x081244d3
 8124488:	08124421 	.word	0x08124421
 812448c:	0812450d 	.word	0x0812450d
 8124490:	08124421 	.word	0x08124421
 8124494:	08124421 	.word	0x08124421
 8124498:	08124421 	.word	0x08124421
 812449c:	08124421 	.word	0x08124421
 81244a0:	0812457b 	.word	0x0812457b
 81244a4:	08124515 	.word	0x08124515
 81244a8:	081244f3 	.word	0x081244f3
 81244ac:	08124421 	.word	0x08124421
 81244b0:	08124421 	.word	0x08124421
 81244b4:	08124577 	.word	0x08124577
 81244b8:	08124421 	.word	0x08124421
 81244bc:	08124551 	.word	0x08124551
 81244c0:	08124421 	.word	0x08124421
 81244c4:	08124421 	.word	0x08124421
 81244c8:	081244fb 	.word	0x081244fb
 81244cc:	3b45      	subs	r3, #69	@ 0x45
 81244ce:	2b02      	cmp	r3, #2
 81244d0:	d8a6      	bhi.n	8124420 <__ssvfiscanf_r+0xec>
 81244d2:	2305      	movs	r3, #5
 81244d4:	e021      	b.n	812451a <__ssvfiscanf_r+0x1e6>
 81244d6:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 81244d8:	4621      	mov	r1, r4
 81244da:	4630      	mov	r0, r6
 81244dc:	4798      	blx	r3
 81244de:	2800      	cmp	r0, #0
 81244e0:	f43f af66 	beq.w	81243b0 <__ssvfiscanf_r+0x7c>
 81244e4:	9844      	ldr	r0, [sp, #272]	@ 0x110
 81244e6:	2800      	cmp	r0, #0
 81244e8:	f040 808b 	bne.w	8124602 <__ssvfiscanf_r+0x2ce>
 81244ec:	f04f 30ff 	mov.w	r0, #4294967295
 81244f0:	e08b      	b.n	812460a <__ssvfiscanf_r+0x2d6>
 81244f2:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 81244f4:	f042 0220 	orr.w	r2, r2, #32
 81244f8:	9241      	str	r2, [sp, #260]	@ 0x104
 81244fa:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 81244fc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8124500:	9241      	str	r2, [sp, #260]	@ 0x104
 8124502:	2210      	movs	r2, #16
 8124504:	2b6e      	cmp	r3, #110	@ 0x6e
 8124506:	9242      	str	r2, [sp, #264]	@ 0x108
 8124508:	d902      	bls.n	8124510 <__ssvfiscanf_r+0x1dc>
 812450a:	e005      	b.n	8124518 <__ssvfiscanf_r+0x1e4>
 812450c:	2300      	movs	r3, #0
 812450e:	9342      	str	r3, [sp, #264]	@ 0x108
 8124510:	2303      	movs	r3, #3
 8124512:	e002      	b.n	812451a <__ssvfiscanf_r+0x1e6>
 8124514:	2308      	movs	r3, #8
 8124516:	9342      	str	r3, [sp, #264]	@ 0x108
 8124518:	2304      	movs	r3, #4
 812451a:	9347      	str	r3, [sp, #284]	@ 0x11c
 812451c:	6863      	ldr	r3, [r4, #4]
 812451e:	2b00      	cmp	r3, #0
 8124520:	dd39      	ble.n	8124596 <__ssvfiscanf_r+0x262>
 8124522:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8124524:	0659      	lsls	r1, r3, #25
 8124526:	d404      	bmi.n	8124532 <__ssvfiscanf_r+0x1fe>
 8124528:	6823      	ldr	r3, [r4, #0]
 812452a:	781a      	ldrb	r2, [r3, #0]
 812452c:	5cba      	ldrb	r2, [r7, r2]
 812452e:	0712      	lsls	r2, r2, #28
 8124530:	d438      	bmi.n	81245a4 <__ssvfiscanf_r+0x270>
 8124532:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 8124534:	2b02      	cmp	r3, #2
 8124536:	dc47      	bgt.n	81245c8 <__ssvfiscanf_r+0x294>
 8124538:	466b      	mov	r3, sp
 812453a:	4622      	mov	r2, r4
 812453c:	a941      	add	r1, sp, #260	@ 0x104
 812453e:	4630      	mov	r0, r6
 8124540:	f000 f86c 	bl	812461c <_scanf_chars>
 8124544:	2801      	cmp	r0, #1
 8124546:	d064      	beq.n	8124612 <__ssvfiscanf_r+0x2de>
 8124548:	2802      	cmp	r0, #2
 812454a:	f47f af18 	bne.w	812437e <__ssvfiscanf_r+0x4a>
 812454e:	e7c9      	b.n	81244e4 <__ssvfiscanf_r+0x1b0>
 8124550:	220a      	movs	r2, #10
 8124552:	e7d7      	b.n	8124504 <__ssvfiscanf_r+0x1d0>
 8124554:	4629      	mov	r1, r5
 8124556:	4640      	mov	r0, r8
 8124558:	f000 fa22 	bl	81249a0 <__sccl>
 812455c:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 812455e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8124562:	9341      	str	r3, [sp, #260]	@ 0x104
 8124564:	4605      	mov	r5, r0
 8124566:	2301      	movs	r3, #1
 8124568:	e7d7      	b.n	812451a <__ssvfiscanf_r+0x1e6>
 812456a:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 812456c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8124570:	9341      	str	r3, [sp, #260]	@ 0x104
 8124572:	2300      	movs	r3, #0
 8124574:	e7d1      	b.n	812451a <__ssvfiscanf_r+0x1e6>
 8124576:	2302      	movs	r3, #2
 8124578:	e7cf      	b.n	812451a <__ssvfiscanf_r+0x1e6>
 812457a:	9841      	ldr	r0, [sp, #260]	@ 0x104
 812457c:	06c3      	lsls	r3, r0, #27
 812457e:	f53f aefe 	bmi.w	812437e <__ssvfiscanf_r+0x4a>
 8124582:	9b00      	ldr	r3, [sp, #0]
 8124584:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8124586:	1d19      	adds	r1, r3, #4
 8124588:	9100      	str	r1, [sp, #0]
 812458a:	681b      	ldr	r3, [r3, #0]
 812458c:	07c0      	lsls	r0, r0, #31
 812458e:	bf4c      	ite	mi
 8124590:	801a      	strhmi	r2, [r3, #0]
 8124592:	601a      	strpl	r2, [r3, #0]
 8124594:	e6f3      	b.n	812437e <__ssvfiscanf_r+0x4a>
 8124596:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8124598:	4621      	mov	r1, r4
 812459a:	4630      	mov	r0, r6
 812459c:	4798      	blx	r3
 812459e:	2800      	cmp	r0, #0
 81245a0:	d0bf      	beq.n	8124522 <__ssvfiscanf_r+0x1ee>
 81245a2:	e79f      	b.n	81244e4 <__ssvfiscanf_r+0x1b0>
 81245a4:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 81245a6:	3201      	adds	r2, #1
 81245a8:	9245      	str	r2, [sp, #276]	@ 0x114
 81245aa:	6862      	ldr	r2, [r4, #4]
 81245ac:	3a01      	subs	r2, #1
 81245ae:	2a00      	cmp	r2, #0
 81245b0:	6062      	str	r2, [r4, #4]
 81245b2:	dd02      	ble.n	81245ba <__ssvfiscanf_r+0x286>
 81245b4:	3301      	adds	r3, #1
 81245b6:	6023      	str	r3, [r4, #0]
 81245b8:	e7b6      	b.n	8124528 <__ssvfiscanf_r+0x1f4>
 81245ba:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 81245bc:	4621      	mov	r1, r4
 81245be:	4630      	mov	r0, r6
 81245c0:	4798      	blx	r3
 81245c2:	2800      	cmp	r0, #0
 81245c4:	d0b0      	beq.n	8124528 <__ssvfiscanf_r+0x1f4>
 81245c6:	e78d      	b.n	81244e4 <__ssvfiscanf_r+0x1b0>
 81245c8:	2b04      	cmp	r3, #4
 81245ca:	dc0f      	bgt.n	81245ec <__ssvfiscanf_r+0x2b8>
 81245cc:	466b      	mov	r3, sp
 81245ce:	4622      	mov	r2, r4
 81245d0:	a941      	add	r1, sp, #260	@ 0x104
 81245d2:	4630      	mov	r0, r6
 81245d4:	f000 f87c 	bl	81246d0 <_scanf_i>
 81245d8:	e7b4      	b.n	8124544 <__ssvfiscanf_r+0x210>
 81245da:	bf00      	nop
 81245dc:	08124285 	.word	0x08124285
 81245e0:	081242fb 	.word	0x081242fb
 81245e4:	081289cc 	.word	0x081289cc
 81245e8:	08128ad2 	.word	0x08128ad2
 81245ec:	4b0a      	ldr	r3, [pc, #40]	@ (8124618 <__ssvfiscanf_r+0x2e4>)
 81245ee:	2b00      	cmp	r3, #0
 81245f0:	f43f aec5 	beq.w	812437e <__ssvfiscanf_r+0x4a>
 81245f4:	466b      	mov	r3, sp
 81245f6:	4622      	mov	r2, r4
 81245f8:	a941      	add	r1, sp, #260	@ 0x104
 81245fa:	4630      	mov	r0, r6
 81245fc:	f3af 8000 	nop.w
 8124600:	e7a0      	b.n	8124544 <__ssvfiscanf_r+0x210>
 8124602:	89a3      	ldrh	r3, [r4, #12]
 8124604:	065b      	lsls	r3, r3, #25
 8124606:	f53f af71 	bmi.w	81244ec <__ssvfiscanf_r+0x1b8>
 812460a:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 812460e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8124612:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8124614:	e7f9      	b.n	812460a <__ssvfiscanf_r+0x2d6>
 8124616:	bf00      	nop
 8124618:	00000000 	.word	0x00000000

0812461c <_scanf_chars>:
 812461c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8124620:	4615      	mov	r5, r2
 8124622:	688a      	ldr	r2, [r1, #8]
 8124624:	4680      	mov	r8, r0
 8124626:	460c      	mov	r4, r1
 8124628:	b932      	cbnz	r2, 8124638 <_scanf_chars+0x1c>
 812462a:	698a      	ldr	r2, [r1, #24]
 812462c:	2a00      	cmp	r2, #0
 812462e:	bf14      	ite	ne
 8124630:	f04f 32ff 	movne.w	r2, #4294967295
 8124634:	2201      	moveq	r2, #1
 8124636:	608a      	str	r2, [r1, #8]
 8124638:	6822      	ldr	r2, [r4, #0]
 812463a:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 81246cc <_scanf_chars+0xb0>
 812463e:	06d1      	lsls	r1, r2, #27
 8124640:	bf5f      	itttt	pl
 8124642:	681a      	ldrpl	r2, [r3, #0]
 8124644:	1d11      	addpl	r1, r2, #4
 8124646:	6019      	strpl	r1, [r3, #0]
 8124648:	6816      	ldrpl	r6, [r2, #0]
 812464a:	2700      	movs	r7, #0
 812464c:	69a0      	ldr	r0, [r4, #24]
 812464e:	b188      	cbz	r0, 8124674 <_scanf_chars+0x58>
 8124650:	2801      	cmp	r0, #1
 8124652:	d107      	bne.n	8124664 <_scanf_chars+0x48>
 8124654:	682b      	ldr	r3, [r5, #0]
 8124656:	781a      	ldrb	r2, [r3, #0]
 8124658:	6963      	ldr	r3, [r4, #20]
 812465a:	5c9b      	ldrb	r3, [r3, r2]
 812465c:	b953      	cbnz	r3, 8124674 <_scanf_chars+0x58>
 812465e:	2f00      	cmp	r7, #0
 8124660:	d031      	beq.n	81246c6 <_scanf_chars+0xaa>
 8124662:	e022      	b.n	81246aa <_scanf_chars+0x8e>
 8124664:	2802      	cmp	r0, #2
 8124666:	d120      	bne.n	81246aa <_scanf_chars+0x8e>
 8124668:	682b      	ldr	r3, [r5, #0]
 812466a:	781b      	ldrb	r3, [r3, #0]
 812466c:	f819 3003 	ldrb.w	r3, [r9, r3]
 8124670:	071b      	lsls	r3, r3, #28
 8124672:	d41a      	bmi.n	81246aa <_scanf_chars+0x8e>
 8124674:	6823      	ldr	r3, [r4, #0]
 8124676:	06da      	lsls	r2, r3, #27
 8124678:	bf5e      	ittt	pl
 812467a:	682b      	ldrpl	r3, [r5, #0]
 812467c:	781b      	ldrbpl	r3, [r3, #0]
 812467e:	f806 3b01 	strbpl.w	r3, [r6], #1
 8124682:	682a      	ldr	r2, [r5, #0]
 8124684:	686b      	ldr	r3, [r5, #4]
 8124686:	3201      	adds	r2, #1
 8124688:	602a      	str	r2, [r5, #0]
 812468a:	68a2      	ldr	r2, [r4, #8]
 812468c:	3b01      	subs	r3, #1
 812468e:	3a01      	subs	r2, #1
 8124690:	606b      	str	r3, [r5, #4]
 8124692:	3701      	adds	r7, #1
 8124694:	60a2      	str	r2, [r4, #8]
 8124696:	b142      	cbz	r2, 81246aa <_scanf_chars+0x8e>
 8124698:	2b00      	cmp	r3, #0
 812469a:	dcd7      	bgt.n	812464c <_scanf_chars+0x30>
 812469c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 81246a0:	4629      	mov	r1, r5
 81246a2:	4640      	mov	r0, r8
 81246a4:	4798      	blx	r3
 81246a6:	2800      	cmp	r0, #0
 81246a8:	d0d0      	beq.n	812464c <_scanf_chars+0x30>
 81246aa:	6823      	ldr	r3, [r4, #0]
 81246ac:	f013 0310 	ands.w	r3, r3, #16
 81246b0:	d105      	bne.n	81246be <_scanf_chars+0xa2>
 81246b2:	68e2      	ldr	r2, [r4, #12]
 81246b4:	3201      	adds	r2, #1
 81246b6:	60e2      	str	r2, [r4, #12]
 81246b8:	69a2      	ldr	r2, [r4, #24]
 81246ba:	b102      	cbz	r2, 81246be <_scanf_chars+0xa2>
 81246bc:	7033      	strb	r3, [r6, #0]
 81246be:	6923      	ldr	r3, [r4, #16]
 81246c0:	443b      	add	r3, r7
 81246c2:	6123      	str	r3, [r4, #16]
 81246c4:	2000      	movs	r0, #0
 81246c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 81246ca:	bf00      	nop
 81246cc:	081289cc 	.word	0x081289cc

081246d0 <_scanf_i>:
 81246d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 81246d4:	4698      	mov	r8, r3
 81246d6:	4b74      	ldr	r3, [pc, #464]	@ (81248a8 <_scanf_i+0x1d8>)
 81246d8:	460c      	mov	r4, r1
 81246da:	4682      	mov	sl, r0
 81246dc:	4616      	mov	r6, r2
 81246de:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 81246e2:	b087      	sub	sp, #28
 81246e4:	ab03      	add	r3, sp, #12
 81246e6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 81246ea:	4b70      	ldr	r3, [pc, #448]	@ (81248ac <_scanf_i+0x1dc>)
 81246ec:	69a1      	ldr	r1, [r4, #24]
 81246ee:	4a70      	ldr	r2, [pc, #448]	@ (81248b0 <_scanf_i+0x1e0>)
 81246f0:	2903      	cmp	r1, #3
 81246f2:	bf08      	it	eq
 81246f4:	461a      	moveq	r2, r3
 81246f6:	68a3      	ldr	r3, [r4, #8]
 81246f8:	9201      	str	r2, [sp, #4]
 81246fa:	1e5a      	subs	r2, r3, #1
 81246fc:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8124700:	bf88      	it	hi
 8124702:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8124706:	4627      	mov	r7, r4
 8124708:	bf82      	ittt	hi
 812470a:	eb03 0905 	addhi.w	r9, r3, r5
 812470e:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8124712:	60a3      	strhi	r3, [r4, #8]
 8124714:	f857 3b1c 	ldr.w	r3, [r7], #28
 8124718:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 812471c:	bf98      	it	ls
 812471e:	f04f 0900 	movls.w	r9, #0
 8124722:	6023      	str	r3, [r4, #0]
 8124724:	463d      	mov	r5, r7
 8124726:	f04f 0b00 	mov.w	fp, #0
 812472a:	6831      	ldr	r1, [r6, #0]
 812472c:	ab03      	add	r3, sp, #12
 812472e:	7809      	ldrb	r1, [r1, #0]
 8124730:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8124734:	2202      	movs	r2, #2
 8124736:	f7db fdd3 	bl	81002e0 <memchr>
 812473a:	b328      	cbz	r0, 8124788 <_scanf_i+0xb8>
 812473c:	f1bb 0f01 	cmp.w	fp, #1
 8124740:	d159      	bne.n	81247f6 <_scanf_i+0x126>
 8124742:	6862      	ldr	r2, [r4, #4]
 8124744:	b92a      	cbnz	r2, 8124752 <_scanf_i+0x82>
 8124746:	6822      	ldr	r2, [r4, #0]
 8124748:	2108      	movs	r1, #8
 812474a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 812474e:	6061      	str	r1, [r4, #4]
 8124750:	6022      	str	r2, [r4, #0]
 8124752:	6822      	ldr	r2, [r4, #0]
 8124754:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 8124758:	6022      	str	r2, [r4, #0]
 812475a:	68a2      	ldr	r2, [r4, #8]
 812475c:	1e51      	subs	r1, r2, #1
 812475e:	60a1      	str	r1, [r4, #8]
 8124760:	b192      	cbz	r2, 8124788 <_scanf_i+0xb8>
 8124762:	6832      	ldr	r2, [r6, #0]
 8124764:	1c51      	adds	r1, r2, #1
 8124766:	6031      	str	r1, [r6, #0]
 8124768:	7812      	ldrb	r2, [r2, #0]
 812476a:	f805 2b01 	strb.w	r2, [r5], #1
 812476e:	6872      	ldr	r2, [r6, #4]
 8124770:	3a01      	subs	r2, #1
 8124772:	2a00      	cmp	r2, #0
 8124774:	6072      	str	r2, [r6, #4]
 8124776:	dc07      	bgt.n	8124788 <_scanf_i+0xb8>
 8124778:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 812477c:	4631      	mov	r1, r6
 812477e:	4650      	mov	r0, sl
 8124780:	4790      	blx	r2
 8124782:	2800      	cmp	r0, #0
 8124784:	f040 8085 	bne.w	8124892 <_scanf_i+0x1c2>
 8124788:	f10b 0b01 	add.w	fp, fp, #1
 812478c:	f1bb 0f03 	cmp.w	fp, #3
 8124790:	d1cb      	bne.n	812472a <_scanf_i+0x5a>
 8124792:	6863      	ldr	r3, [r4, #4]
 8124794:	b90b      	cbnz	r3, 812479a <_scanf_i+0xca>
 8124796:	230a      	movs	r3, #10
 8124798:	6063      	str	r3, [r4, #4]
 812479a:	6863      	ldr	r3, [r4, #4]
 812479c:	4945      	ldr	r1, [pc, #276]	@ (81248b4 <_scanf_i+0x1e4>)
 812479e:	6960      	ldr	r0, [r4, #20]
 81247a0:	1ac9      	subs	r1, r1, r3
 81247a2:	f000 f8fd 	bl	81249a0 <__sccl>
 81247a6:	f04f 0b00 	mov.w	fp, #0
 81247aa:	68a3      	ldr	r3, [r4, #8]
 81247ac:	6822      	ldr	r2, [r4, #0]
 81247ae:	2b00      	cmp	r3, #0
 81247b0:	d03d      	beq.n	812482e <_scanf_i+0x15e>
 81247b2:	6831      	ldr	r1, [r6, #0]
 81247b4:	6960      	ldr	r0, [r4, #20]
 81247b6:	f891 c000 	ldrb.w	ip, [r1]
 81247ba:	f810 000c 	ldrb.w	r0, [r0, ip]
 81247be:	2800      	cmp	r0, #0
 81247c0:	d035      	beq.n	812482e <_scanf_i+0x15e>
 81247c2:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 81247c6:	d124      	bne.n	8124812 <_scanf_i+0x142>
 81247c8:	0510      	lsls	r0, r2, #20
 81247ca:	d522      	bpl.n	8124812 <_scanf_i+0x142>
 81247cc:	f10b 0b01 	add.w	fp, fp, #1
 81247d0:	f1b9 0f00 	cmp.w	r9, #0
 81247d4:	d003      	beq.n	81247de <_scanf_i+0x10e>
 81247d6:	3301      	adds	r3, #1
 81247d8:	f109 39ff 	add.w	r9, r9, #4294967295
 81247dc:	60a3      	str	r3, [r4, #8]
 81247de:	6873      	ldr	r3, [r6, #4]
 81247e0:	3b01      	subs	r3, #1
 81247e2:	2b00      	cmp	r3, #0
 81247e4:	6073      	str	r3, [r6, #4]
 81247e6:	dd1b      	ble.n	8124820 <_scanf_i+0x150>
 81247e8:	6833      	ldr	r3, [r6, #0]
 81247ea:	3301      	adds	r3, #1
 81247ec:	6033      	str	r3, [r6, #0]
 81247ee:	68a3      	ldr	r3, [r4, #8]
 81247f0:	3b01      	subs	r3, #1
 81247f2:	60a3      	str	r3, [r4, #8]
 81247f4:	e7d9      	b.n	81247aa <_scanf_i+0xda>
 81247f6:	f1bb 0f02 	cmp.w	fp, #2
 81247fa:	d1ae      	bne.n	812475a <_scanf_i+0x8a>
 81247fc:	6822      	ldr	r2, [r4, #0]
 81247fe:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 8124802:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8124806:	d1bf      	bne.n	8124788 <_scanf_i+0xb8>
 8124808:	2110      	movs	r1, #16
 812480a:	6061      	str	r1, [r4, #4]
 812480c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8124810:	e7a2      	b.n	8124758 <_scanf_i+0x88>
 8124812:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 8124816:	6022      	str	r2, [r4, #0]
 8124818:	780b      	ldrb	r3, [r1, #0]
 812481a:	f805 3b01 	strb.w	r3, [r5], #1
 812481e:	e7de      	b.n	81247de <_scanf_i+0x10e>
 8124820:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8124824:	4631      	mov	r1, r6
 8124826:	4650      	mov	r0, sl
 8124828:	4798      	blx	r3
 812482a:	2800      	cmp	r0, #0
 812482c:	d0df      	beq.n	81247ee <_scanf_i+0x11e>
 812482e:	6823      	ldr	r3, [r4, #0]
 8124830:	05d9      	lsls	r1, r3, #23
 8124832:	d50d      	bpl.n	8124850 <_scanf_i+0x180>
 8124834:	42bd      	cmp	r5, r7
 8124836:	d909      	bls.n	812484c <_scanf_i+0x17c>
 8124838:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 812483c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8124840:	4632      	mov	r2, r6
 8124842:	4650      	mov	r0, sl
 8124844:	4798      	blx	r3
 8124846:	f105 39ff 	add.w	r9, r5, #4294967295
 812484a:	464d      	mov	r5, r9
 812484c:	42bd      	cmp	r5, r7
 812484e:	d028      	beq.n	81248a2 <_scanf_i+0x1d2>
 8124850:	6822      	ldr	r2, [r4, #0]
 8124852:	f012 0210 	ands.w	r2, r2, #16
 8124856:	d113      	bne.n	8124880 <_scanf_i+0x1b0>
 8124858:	702a      	strb	r2, [r5, #0]
 812485a:	6863      	ldr	r3, [r4, #4]
 812485c:	9e01      	ldr	r6, [sp, #4]
 812485e:	4639      	mov	r1, r7
 8124860:	4650      	mov	r0, sl
 8124862:	47b0      	blx	r6
 8124864:	f8d8 3000 	ldr.w	r3, [r8]
 8124868:	6821      	ldr	r1, [r4, #0]
 812486a:	1d1a      	adds	r2, r3, #4
 812486c:	f8c8 2000 	str.w	r2, [r8]
 8124870:	f011 0f20 	tst.w	r1, #32
 8124874:	681b      	ldr	r3, [r3, #0]
 8124876:	d00f      	beq.n	8124898 <_scanf_i+0x1c8>
 8124878:	6018      	str	r0, [r3, #0]
 812487a:	68e3      	ldr	r3, [r4, #12]
 812487c:	3301      	adds	r3, #1
 812487e:	60e3      	str	r3, [r4, #12]
 8124880:	6923      	ldr	r3, [r4, #16]
 8124882:	1bed      	subs	r5, r5, r7
 8124884:	445d      	add	r5, fp
 8124886:	442b      	add	r3, r5
 8124888:	6123      	str	r3, [r4, #16]
 812488a:	2000      	movs	r0, #0
 812488c:	b007      	add	sp, #28
 812488e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8124892:	f04f 0b00 	mov.w	fp, #0
 8124896:	e7ca      	b.n	812482e <_scanf_i+0x15e>
 8124898:	07ca      	lsls	r2, r1, #31
 812489a:	bf4c      	ite	mi
 812489c:	8018      	strhmi	r0, [r3, #0]
 812489e:	6018      	strpl	r0, [r3, #0]
 81248a0:	e7eb      	b.n	812487a <_scanf_i+0x1aa>
 81248a2:	2001      	movs	r0, #1
 81248a4:	e7f2      	b.n	812488c <_scanf_i+0x1bc>
 81248a6:	bf00      	nop
 81248a8:	0812832c 	.word	0x0812832c
 81248ac:	081232ad 	.word	0x081232ad
 81248b0:	08124bb9 	.word	0x08124bb9
 81248b4:	08128b4b 	.word	0x08128b4b

081248b8 <fiprintf>:
 81248b8:	b40e      	push	{r1, r2, r3}
 81248ba:	b503      	push	{r0, r1, lr}
 81248bc:	4601      	mov	r1, r0
 81248be:	ab03      	add	r3, sp, #12
 81248c0:	4805      	ldr	r0, [pc, #20]	@ (81248d8 <fiprintf+0x20>)
 81248c2:	f853 2b04 	ldr.w	r2, [r3], #4
 81248c6:	6800      	ldr	r0, [r0, #0]
 81248c8:	9301      	str	r3, [sp, #4]
 81248ca:	f7fe fd1b 	bl	8123304 <_vfiprintf_r>
 81248ce:	b002      	add	sp, #8
 81248d0:	f85d eb04 	ldr.w	lr, [sp], #4
 81248d4:	b003      	add	sp, #12
 81248d6:	4770      	bx	lr
 81248d8:	10000040 	.word	0x10000040

081248dc <__swhatbuf_r>:
 81248dc:	b570      	push	{r4, r5, r6, lr}
 81248de:	460c      	mov	r4, r1
 81248e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 81248e4:	2900      	cmp	r1, #0
 81248e6:	b096      	sub	sp, #88	@ 0x58
 81248e8:	4615      	mov	r5, r2
 81248ea:	461e      	mov	r6, r3
 81248ec:	da0d      	bge.n	812490a <__swhatbuf_r+0x2e>
 81248ee:	89a3      	ldrh	r3, [r4, #12]
 81248f0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 81248f4:	f04f 0100 	mov.w	r1, #0
 81248f8:	bf14      	ite	ne
 81248fa:	2340      	movne	r3, #64	@ 0x40
 81248fc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8124900:	2000      	movs	r0, #0
 8124902:	6031      	str	r1, [r6, #0]
 8124904:	602b      	str	r3, [r5, #0]
 8124906:	b016      	add	sp, #88	@ 0x58
 8124908:	bd70      	pop	{r4, r5, r6, pc}
 812490a:	466a      	mov	r2, sp
 812490c:	f000 f8bc 	bl	8124a88 <_fstat_r>
 8124910:	2800      	cmp	r0, #0
 8124912:	dbec      	blt.n	81248ee <__swhatbuf_r+0x12>
 8124914:	9901      	ldr	r1, [sp, #4]
 8124916:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 812491a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 812491e:	4259      	negs	r1, r3
 8124920:	4159      	adcs	r1, r3
 8124922:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8124926:	e7eb      	b.n	8124900 <__swhatbuf_r+0x24>

08124928 <__smakebuf_r>:
 8124928:	898b      	ldrh	r3, [r1, #12]
 812492a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 812492c:	079d      	lsls	r5, r3, #30
 812492e:	4606      	mov	r6, r0
 8124930:	460c      	mov	r4, r1
 8124932:	d507      	bpl.n	8124944 <__smakebuf_r+0x1c>
 8124934:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8124938:	6023      	str	r3, [r4, #0]
 812493a:	6123      	str	r3, [r4, #16]
 812493c:	2301      	movs	r3, #1
 812493e:	6163      	str	r3, [r4, #20]
 8124940:	b003      	add	sp, #12
 8124942:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8124944:	ab01      	add	r3, sp, #4
 8124946:	466a      	mov	r2, sp
 8124948:	f7ff ffc8 	bl	81248dc <__swhatbuf_r>
 812494c:	9f00      	ldr	r7, [sp, #0]
 812494e:	4605      	mov	r5, r0
 8124950:	4639      	mov	r1, r7
 8124952:	4630      	mov	r0, r6
 8124954:	f7fe fb66 	bl	8123024 <_malloc_r>
 8124958:	b948      	cbnz	r0, 812496e <__smakebuf_r+0x46>
 812495a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 812495e:	059a      	lsls	r2, r3, #22
 8124960:	d4ee      	bmi.n	8124940 <__smakebuf_r+0x18>
 8124962:	f023 0303 	bic.w	r3, r3, #3
 8124966:	f043 0302 	orr.w	r3, r3, #2
 812496a:	81a3      	strh	r3, [r4, #12]
 812496c:	e7e2      	b.n	8124934 <__smakebuf_r+0xc>
 812496e:	89a3      	ldrh	r3, [r4, #12]
 8124970:	6020      	str	r0, [r4, #0]
 8124972:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8124976:	81a3      	strh	r3, [r4, #12]
 8124978:	9b01      	ldr	r3, [sp, #4]
 812497a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 812497e:	b15b      	cbz	r3, 8124998 <__smakebuf_r+0x70>
 8124980:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8124984:	4630      	mov	r0, r6
 8124986:	f000 f891 	bl	8124aac <_isatty_r>
 812498a:	b128      	cbz	r0, 8124998 <__smakebuf_r+0x70>
 812498c:	89a3      	ldrh	r3, [r4, #12]
 812498e:	f023 0303 	bic.w	r3, r3, #3
 8124992:	f043 0301 	orr.w	r3, r3, #1
 8124996:	81a3      	strh	r3, [r4, #12]
 8124998:	89a3      	ldrh	r3, [r4, #12]
 812499a:	431d      	orrs	r5, r3
 812499c:	81a5      	strh	r5, [r4, #12]
 812499e:	e7cf      	b.n	8124940 <__smakebuf_r+0x18>

081249a0 <__sccl>:
 81249a0:	b570      	push	{r4, r5, r6, lr}
 81249a2:	780b      	ldrb	r3, [r1, #0]
 81249a4:	4604      	mov	r4, r0
 81249a6:	2b5e      	cmp	r3, #94	@ 0x5e
 81249a8:	bf0b      	itete	eq
 81249aa:	784b      	ldrbeq	r3, [r1, #1]
 81249ac:	1c4a      	addne	r2, r1, #1
 81249ae:	1c8a      	addeq	r2, r1, #2
 81249b0:	2100      	movne	r1, #0
 81249b2:	bf08      	it	eq
 81249b4:	2101      	moveq	r1, #1
 81249b6:	3801      	subs	r0, #1
 81249b8:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 81249bc:	f800 1f01 	strb.w	r1, [r0, #1]!
 81249c0:	42a8      	cmp	r0, r5
 81249c2:	d1fb      	bne.n	81249bc <__sccl+0x1c>
 81249c4:	b90b      	cbnz	r3, 81249ca <__sccl+0x2a>
 81249c6:	1e50      	subs	r0, r2, #1
 81249c8:	bd70      	pop	{r4, r5, r6, pc}
 81249ca:	f081 0101 	eor.w	r1, r1, #1
 81249ce:	54e1      	strb	r1, [r4, r3]
 81249d0:	4610      	mov	r0, r2
 81249d2:	4602      	mov	r2, r0
 81249d4:	f812 5b01 	ldrb.w	r5, [r2], #1
 81249d8:	2d2d      	cmp	r5, #45	@ 0x2d
 81249da:	d005      	beq.n	81249e8 <__sccl+0x48>
 81249dc:	2d5d      	cmp	r5, #93	@ 0x5d
 81249de:	d016      	beq.n	8124a0e <__sccl+0x6e>
 81249e0:	2d00      	cmp	r5, #0
 81249e2:	d0f1      	beq.n	81249c8 <__sccl+0x28>
 81249e4:	462b      	mov	r3, r5
 81249e6:	e7f2      	b.n	81249ce <__sccl+0x2e>
 81249e8:	7846      	ldrb	r6, [r0, #1]
 81249ea:	2e5d      	cmp	r6, #93	@ 0x5d
 81249ec:	d0fa      	beq.n	81249e4 <__sccl+0x44>
 81249ee:	42b3      	cmp	r3, r6
 81249f0:	dcf8      	bgt.n	81249e4 <__sccl+0x44>
 81249f2:	3002      	adds	r0, #2
 81249f4:	461a      	mov	r2, r3
 81249f6:	3201      	adds	r2, #1
 81249f8:	4296      	cmp	r6, r2
 81249fa:	54a1      	strb	r1, [r4, r2]
 81249fc:	dcfb      	bgt.n	81249f6 <__sccl+0x56>
 81249fe:	1af2      	subs	r2, r6, r3
 8124a00:	3a01      	subs	r2, #1
 8124a02:	1c5d      	adds	r5, r3, #1
 8124a04:	42b3      	cmp	r3, r6
 8124a06:	bfa8      	it	ge
 8124a08:	2200      	movge	r2, #0
 8124a0a:	18ab      	adds	r3, r5, r2
 8124a0c:	e7e1      	b.n	81249d2 <__sccl+0x32>
 8124a0e:	4610      	mov	r0, r2
 8124a10:	e7da      	b.n	81249c8 <__sccl+0x28>

08124a12 <__submore>:
 8124a12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8124a16:	460c      	mov	r4, r1
 8124a18:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8124a1a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8124a1e:	4299      	cmp	r1, r3
 8124a20:	d11d      	bne.n	8124a5e <__submore+0x4c>
 8124a22:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8124a26:	f7fe fafd 	bl	8123024 <_malloc_r>
 8124a2a:	b918      	cbnz	r0, 8124a34 <__submore+0x22>
 8124a2c:	f04f 30ff 	mov.w	r0, #4294967295
 8124a30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8124a34:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8124a38:	63a3      	str	r3, [r4, #56]	@ 0x38
 8124a3a:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 8124a3e:	6360      	str	r0, [r4, #52]	@ 0x34
 8124a40:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 8124a44:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8124a48:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 8124a4c:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8124a50:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 8124a54:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 8124a58:	6020      	str	r0, [r4, #0]
 8124a5a:	2000      	movs	r0, #0
 8124a5c:	e7e8      	b.n	8124a30 <__submore+0x1e>
 8124a5e:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 8124a60:	0077      	lsls	r7, r6, #1
 8124a62:	463a      	mov	r2, r7
 8124a64:	f7ff fbe0 	bl	8124228 <_realloc_r>
 8124a68:	4605      	mov	r5, r0
 8124a6a:	2800      	cmp	r0, #0
 8124a6c:	d0de      	beq.n	8124a2c <__submore+0x1a>
 8124a6e:	eb00 0806 	add.w	r8, r0, r6
 8124a72:	4601      	mov	r1, r0
 8124a74:	4632      	mov	r2, r6
 8124a76:	4640      	mov	r0, r8
 8124a78:	f7ff fb5f 	bl	812413a <memcpy>
 8124a7c:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 8124a80:	f8c4 8000 	str.w	r8, [r4]
 8124a84:	e7e9      	b.n	8124a5a <__submore+0x48>
	...

08124a88 <_fstat_r>:
 8124a88:	b538      	push	{r3, r4, r5, lr}
 8124a8a:	4d07      	ldr	r5, [pc, #28]	@ (8124aa8 <_fstat_r+0x20>)
 8124a8c:	2300      	movs	r3, #0
 8124a8e:	4604      	mov	r4, r0
 8124a90:	4608      	mov	r0, r1
 8124a92:	4611      	mov	r1, r2
 8124a94:	602b      	str	r3, [r5, #0]
 8124a96:	f7de fc2d 	bl	81032f4 <_fstat>
 8124a9a:	1c43      	adds	r3, r0, #1
 8124a9c:	d102      	bne.n	8124aa4 <_fstat_r+0x1c>
 8124a9e:	682b      	ldr	r3, [r5, #0]
 8124aa0:	b103      	cbz	r3, 8124aa4 <_fstat_r+0x1c>
 8124aa2:	6023      	str	r3, [r4, #0]
 8124aa4:	bd38      	pop	{r3, r4, r5, pc}
 8124aa6:	bf00      	nop
 8124aa8:	1000e650 	.word	0x1000e650

08124aac <_isatty_r>:
 8124aac:	b538      	push	{r3, r4, r5, lr}
 8124aae:	4d06      	ldr	r5, [pc, #24]	@ (8124ac8 <_isatty_r+0x1c>)
 8124ab0:	2300      	movs	r3, #0
 8124ab2:	4604      	mov	r4, r0
 8124ab4:	4608      	mov	r0, r1
 8124ab6:	602b      	str	r3, [r5, #0]
 8124ab8:	f7de fc2c 	bl	8103314 <_isatty>
 8124abc:	1c43      	adds	r3, r0, #1
 8124abe:	d102      	bne.n	8124ac6 <_isatty_r+0x1a>
 8124ac0:	682b      	ldr	r3, [r5, #0]
 8124ac2:	b103      	cbz	r3, 8124ac6 <_isatty_r+0x1a>
 8124ac4:	6023      	str	r3, [r4, #0]
 8124ac6:	bd38      	pop	{r3, r4, r5, pc}
 8124ac8:	1000e650 	.word	0x1000e650

08124acc <_malloc_usable_size_r>:
 8124acc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8124ad0:	1f18      	subs	r0, r3, #4
 8124ad2:	2b00      	cmp	r3, #0
 8124ad4:	bfbc      	itt	lt
 8124ad6:	580b      	ldrlt	r3, [r1, r0]
 8124ad8:	18c0      	addlt	r0, r0, r3
 8124ada:	4770      	bx	lr

08124adc <_strtoul_l.constprop.0>:
 8124adc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8124ae0:	4e34      	ldr	r6, [pc, #208]	@ (8124bb4 <_strtoul_l.constprop.0+0xd8>)
 8124ae2:	4686      	mov	lr, r0
 8124ae4:	460d      	mov	r5, r1
 8124ae6:	4628      	mov	r0, r5
 8124ae8:	f815 4b01 	ldrb.w	r4, [r5], #1
 8124aec:	5d37      	ldrb	r7, [r6, r4]
 8124aee:	f017 0708 	ands.w	r7, r7, #8
 8124af2:	d1f8      	bne.n	8124ae6 <_strtoul_l.constprop.0+0xa>
 8124af4:	2c2d      	cmp	r4, #45	@ 0x2d
 8124af6:	d12f      	bne.n	8124b58 <_strtoul_l.constprop.0+0x7c>
 8124af8:	782c      	ldrb	r4, [r5, #0]
 8124afa:	2701      	movs	r7, #1
 8124afc:	1c85      	adds	r5, r0, #2
 8124afe:	f033 0010 	bics.w	r0, r3, #16
 8124b02:	d109      	bne.n	8124b18 <_strtoul_l.constprop.0+0x3c>
 8124b04:	2c30      	cmp	r4, #48	@ 0x30
 8124b06:	d12c      	bne.n	8124b62 <_strtoul_l.constprop.0+0x86>
 8124b08:	7828      	ldrb	r0, [r5, #0]
 8124b0a:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8124b0e:	2858      	cmp	r0, #88	@ 0x58
 8124b10:	d127      	bne.n	8124b62 <_strtoul_l.constprop.0+0x86>
 8124b12:	786c      	ldrb	r4, [r5, #1]
 8124b14:	2310      	movs	r3, #16
 8124b16:	3502      	adds	r5, #2
 8124b18:	f04f 38ff 	mov.w	r8, #4294967295
 8124b1c:	2600      	movs	r6, #0
 8124b1e:	fbb8 f8f3 	udiv	r8, r8, r3
 8124b22:	fb03 f908 	mul.w	r9, r3, r8
 8124b26:	ea6f 0909 	mvn.w	r9, r9
 8124b2a:	4630      	mov	r0, r6
 8124b2c:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8124b30:	f1bc 0f09 	cmp.w	ip, #9
 8124b34:	d81c      	bhi.n	8124b70 <_strtoul_l.constprop.0+0x94>
 8124b36:	4664      	mov	r4, ip
 8124b38:	42a3      	cmp	r3, r4
 8124b3a:	dd2a      	ble.n	8124b92 <_strtoul_l.constprop.0+0xb6>
 8124b3c:	f1b6 3fff 	cmp.w	r6, #4294967295
 8124b40:	d007      	beq.n	8124b52 <_strtoul_l.constprop.0+0x76>
 8124b42:	4580      	cmp	r8, r0
 8124b44:	d322      	bcc.n	8124b8c <_strtoul_l.constprop.0+0xb0>
 8124b46:	d101      	bne.n	8124b4c <_strtoul_l.constprop.0+0x70>
 8124b48:	45a1      	cmp	r9, r4
 8124b4a:	db1f      	blt.n	8124b8c <_strtoul_l.constprop.0+0xb0>
 8124b4c:	fb00 4003 	mla	r0, r0, r3, r4
 8124b50:	2601      	movs	r6, #1
 8124b52:	f815 4b01 	ldrb.w	r4, [r5], #1
 8124b56:	e7e9      	b.n	8124b2c <_strtoul_l.constprop.0+0x50>
 8124b58:	2c2b      	cmp	r4, #43	@ 0x2b
 8124b5a:	bf04      	itt	eq
 8124b5c:	782c      	ldrbeq	r4, [r5, #0]
 8124b5e:	1c85      	addeq	r5, r0, #2
 8124b60:	e7cd      	b.n	8124afe <_strtoul_l.constprop.0+0x22>
 8124b62:	2b00      	cmp	r3, #0
 8124b64:	d1d8      	bne.n	8124b18 <_strtoul_l.constprop.0+0x3c>
 8124b66:	2c30      	cmp	r4, #48	@ 0x30
 8124b68:	bf0c      	ite	eq
 8124b6a:	2308      	moveq	r3, #8
 8124b6c:	230a      	movne	r3, #10
 8124b6e:	e7d3      	b.n	8124b18 <_strtoul_l.constprop.0+0x3c>
 8124b70:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8124b74:	f1bc 0f19 	cmp.w	ip, #25
 8124b78:	d801      	bhi.n	8124b7e <_strtoul_l.constprop.0+0xa2>
 8124b7a:	3c37      	subs	r4, #55	@ 0x37
 8124b7c:	e7dc      	b.n	8124b38 <_strtoul_l.constprop.0+0x5c>
 8124b7e:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8124b82:	f1bc 0f19 	cmp.w	ip, #25
 8124b86:	d804      	bhi.n	8124b92 <_strtoul_l.constprop.0+0xb6>
 8124b88:	3c57      	subs	r4, #87	@ 0x57
 8124b8a:	e7d5      	b.n	8124b38 <_strtoul_l.constprop.0+0x5c>
 8124b8c:	f04f 36ff 	mov.w	r6, #4294967295
 8124b90:	e7df      	b.n	8124b52 <_strtoul_l.constprop.0+0x76>
 8124b92:	1c73      	adds	r3, r6, #1
 8124b94:	d106      	bne.n	8124ba4 <_strtoul_l.constprop.0+0xc8>
 8124b96:	2322      	movs	r3, #34	@ 0x22
 8124b98:	f8ce 3000 	str.w	r3, [lr]
 8124b9c:	4630      	mov	r0, r6
 8124b9e:	b932      	cbnz	r2, 8124bae <_strtoul_l.constprop.0+0xd2>
 8124ba0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8124ba4:	b107      	cbz	r7, 8124ba8 <_strtoul_l.constprop.0+0xcc>
 8124ba6:	4240      	negs	r0, r0
 8124ba8:	2a00      	cmp	r2, #0
 8124baa:	d0f9      	beq.n	8124ba0 <_strtoul_l.constprop.0+0xc4>
 8124bac:	b106      	cbz	r6, 8124bb0 <_strtoul_l.constprop.0+0xd4>
 8124bae:	1e69      	subs	r1, r5, #1
 8124bb0:	6011      	str	r1, [r2, #0]
 8124bb2:	e7f5      	b.n	8124ba0 <_strtoul_l.constprop.0+0xc4>
 8124bb4:	081289cc 	.word	0x081289cc

08124bb8 <_strtoul_r>:
 8124bb8:	f7ff bf90 	b.w	8124adc <_strtoul_l.constprop.0>

08124bbc <_init>:
 8124bbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8124bbe:	bf00      	nop
 8124bc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8124bc2:	bc08      	pop	{r3}
 8124bc4:	469e      	mov	lr, r3
 8124bc6:	4770      	bx	lr

08124bc8 <_fini>:
 8124bc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8124bca:	bf00      	nop
 8124bcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8124bce:	bc08      	pop	{r3}
 8124bd0:	469e      	mov	lr, r3
 8124bd2:	4770      	bx	lr
