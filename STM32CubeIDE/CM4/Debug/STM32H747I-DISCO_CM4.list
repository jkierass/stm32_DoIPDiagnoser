
STM32H747I-DISCO_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .shared_ram   000016f8  38000000  38000000  0002e000  2**2
                  ALLOC
  2 .text         00026ecc  081002a0  081002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000043e8  0812716c  0812716c  0002816c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM          00000008  0812b554  0812b554  0002c554  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .init_array   00000014  0812b55c  0812b55c  0002c55c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .fini_array   00000014  0812b570  0812b570  0002c570  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .data         00000090  10000000  0812b584  0002d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .bss          0000e63c  10000090  0812b614  0002d090  2**2
                  ALLOC
  9 ._user_heap_stack 00002004  1000e6cc  0812b614  0002d6cc  2**0
                  ALLOC
 10 .lwip_sec     00024b83  10020000  10020000  0002e000  2**2
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002d090  2**0
                  CONTENTS, READONLY
 12 .debug_info   0009dc49  00000000  00000000  0002d0c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000e38c  00000000  00000000  000cad09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00005d28  00000000  00000000  000d9098  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00004898  00000000  00000000  000dedc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00059499  00000000  00000000  000e3658  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000603fc  00000000  00000000  0013caf1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0021e1ed  00000000  00000000  0019ceed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  003bb0da  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0001b010  00000000  00000000  003bb120  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000090  00000000  00000000  003d6130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

081002a0 <__do_global_dtors_aux>:
 81002a0:	b510      	push	{r4, lr}
 81002a2:	4c05      	ldr	r4, [pc, #20]	@ (81002b8 <__do_global_dtors_aux+0x18>)
 81002a4:	7823      	ldrb	r3, [r4, #0]
 81002a6:	b933      	cbnz	r3, 81002b6 <__do_global_dtors_aux+0x16>
 81002a8:	4b04      	ldr	r3, [pc, #16]	@ (81002bc <__do_global_dtors_aux+0x1c>)
 81002aa:	b113      	cbz	r3, 81002b2 <__do_global_dtors_aux+0x12>
 81002ac:	4804      	ldr	r0, [pc, #16]	@ (81002c0 <__do_global_dtors_aux+0x20>)
 81002ae:	f3af 8000 	nop.w
 81002b2:	2301      	movs	r3, #1
 81002b4:	7023      	strb	r3, [r4, #0]
 81002b6:	bd10      	pop	{r4, pc}
 81002b8:	10000090 	.word	0x10000090
 81002bc:	00000000 	.word	0x00000000
 81002c0:	08127154 	.word	0x08127154

081002c4 <frame_dummy>:
 81002c4:	b508      	push	{r3, lr}
 81002c6:	4b03      	ldr	r3, [pc, #12]	@ (81002d4 <frame_dummy+0x10>)
 81002c8:	b11b      	cbz	r3, 81002d2 <frame_dummy+0xe>
 81002ca:	4903      	ldr	r1, [pc, #12]	@ (81002d8 <frame_dummy+0x14>)
 81002cc:	4803      	ldr	r0, [pc, #12]	@ (81002dc <frame_dummy+0x18>)
 81002ce:	f3af 8000 	nop.w
 81002d2:	bd08      	pop	{r3, pc}
 81002d4:	00000000 	.word	0x00000000
 81002d8:	10000094 	.word	0x10000094
 81002dc:	08127154 	.word	0x08127154

081002e0 <memchr>:
 81002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 81002e4:	2a10      	cmp	r2, #16
 81002e6:	db2b      	blt.n	8100340 <memchr+0x60>
 81002e8:	f010 0f07 	tst.w	r0, #7
 81002ec:	d008      	beq.n	8100300 <memchr+0x20>
 81002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 81002f2:	3a01      	subs	r2, #1
 81002f4:	428b      	cmp	r3, r1
 81002f6:	d02d      	beq.n	8100354 <memchr+0x74>
 81002f8:	f010 0f07 	tst.w	r0, #7
 81002fc:	b342      	cbz	r2, 8100350 <memchr+0x70>
 81002fe:	d1f6      	bne.n	81002ee <memchr+0xe>
 8100300:	b4f0      	push	{r4, r5, r6, r7}
 8100302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8100306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 810030a:	f022 0407 	bic.w	r4, r2, #7
 810030e:	f07f 0700 	mvns.w	r7, #0
 8100312:	2300      	movs	r3, #0
 8100314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8100318:	3c08      	subs	r4, #8
 810031a:	ea85 0501 	eor.w	r5, r5, r1
 810031e:	ea86 0601 	eor.w	r6, r6, r1
 8100322:	fa85 f547 	uadd8	r5, r5, r7
 8100326:	faa3 f587 	sel	r5, r3, r7
 810032a:	fa86 f647 	uadd8	r6, r6, r7
 810032e:	faa5 f687 	sel	r6, r5, r7
 8100332:	b98e      	cbnz	r6, 8100358 <memchr+0x78>
 8100334:	d1ee      	bne.n	8100314 <memchr+0x34>
 8100336:	bcf0      	pop	{r4, r5, r6, r7}
 8100338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 810033c:	f002 0207 	and.w	r2, r2, #7
 8100340:	b132      	cbz	r2, 8100350 <memchr+0x70>
 8100342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8100346:	3a01      	subs	r2, #1
 8100348:	ea83 0301 	eor.w	r3, r3, r1
 810034c:	b113      	cbz	r3, 8100354 <memchr+0x74>
 810034e:	d1f8      	bne.n	8100342 <memchr+0x62>
 8100350:	2000      	movs	r0, #0
 8100352:	4770      	bx	lr
 8100354:	3801      	subs	r0, #1
 8100356:	4770      	bx	lr
 8100358:	2d00      	cmp	r5, #0
 810035a:	bf06      	itte	eq
 810035c:	4635      	moveq	r5, r6
 810035e:	3803      	subeq	r0, #3
 8100360:	3807      	subne	r0, #7
 8100362:	f015 0f01 	tst.w	r5, #1
 8100366:	d107      	bne.n	8100378 <memchr+0x98>
 8100368:	3001      	adds	r0, #1
 810036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 810036e:	bf02      	ittt	eq
 8100370:	3001      	addeq	r0, #1
 8100372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8100376:	3001      	addeq	r0, #1
 8100378:	bcf0      	pop	{r4, r5, r6, r7}
 810037a:	3801      	subs	r0, #1
 810037c:	4770      	bx	lr
 810037e:	bf00      	nop

08100380 <__aeabi_drsub>:
 8100380:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8100384:	e002      	b.n	810038c <__adddf3>
 8100386:	bf00      	nop

08100388 <__aeabi_dsub>:
 8100388:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0810038c <__adddf3>:
 810038c:	b530      	push	{r4, r5, lr}
 810038e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8100392:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8100396:	ea94 0f05 	teq	r4, r5
 810039a:	bf08      	it	eq
 810039c:	ea90 0f02 	teqeq	r0, r2
 81003a0:	bf1f      	itttt	ne
 81003a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 81003a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 81003aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 81003ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 81003b2:	f000 80e2 	beq.w	810057a <__adddf3+0x1ee>
 81003b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 81003ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 81003be:	bfb8      	it	lt
 81003c0:	426d      	neglt	r5, r5
 81003c2:	dd0c      	ble.n	81003de <__adddf3+0x52>
 81003c4:	442c      	add	r4, r5
 81003c6:	ea80 0202 	eor.w	r2, r0, r2
 81003ca:	ea81 0303 	eor.w	r3, r1, r3
 81003ce:	ea82 0000 	eor.w	r0, r2, r0
 81003d2:	ea83 0101 	eor.w	r1, r3, r1
 81003d6:	ea80 0202 	eor.w	r2, r0, r2
 81003da:	ea81 0303 	eor.w	r3, r1, r3
 81003de:	2d36      	cmp	r5, #54	@ 0x36
 81003e0:	bf88      	it	hi
 81003e2:	bd30      	pophi	{r4, r5, pc}
 81003e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 81003e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 81003ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 81003f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 81003f4:	d002      	beq.n	81003fc <__adddf3+0x70>
 81003f6:	4240      	negs	r0, r0
 81003f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 81003fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8100400:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8100404:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8100408:	d002      	beq.n	8100410 <__adddf3+0x84>
 810040a:	4252      	negs	r2, r2
 810040c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8100410:	ea94 0f05 	teq	r4, r5
 8100414:	f000 80a7 	beq.w	8100566 <__adddf3+0x1da>
 8100418:	f1a4 0401 	sub.w	r4, r4, #1
 810041c:	f1d5 0e20 	rsbs	lr, r5, #32
 8100420:	db0d      	blt.n	810043e <__adddf3+0xb2>
 8100422:	fa02 fc0e 	lsl.w	ip, r2, lr
 8100426:	fa22 f205 	lsr.w	r2, r2, r5
 810042a:	1880      	adds	r0, r0, r2
 810042c:	f141 0100 	adc.w	r1, r1, #0
 8100430:	fa03 f20e 	lsl.w	r2, r3, lr
 8100434:	1880      	adds	r0, r0, r2
 8100436:	fa43 f305 	asr.w	r3, r3, r5
 810043a:	4159      	adcs	r1, r3
 810043c:	e00e      	b.n	810045c <__adddf3+0xd0>
 810043e:	f1a5 0520 	sub.w	r5, r5, #32
 8100442:	f10e 0e20 	add.w	lr, lr, #32
 8100446:	2a01      	cmp	r2, #1
 8100448:	fa03 fc0e 	lsl.w	ip, r3, lr
 810044c:	bf28      	it	cs
 810044e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8100452:	fa43 f305 	asr.w	r3, r3, r5
 8100456:	18c0      	adds	r0, r0, r3
 8100458:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 810045c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8100460:	d507      	bpl.n	8100472 <__adddf3+0xe6>
 8100462:	f04f 0e00 	mov.w	lr, #0
 8100466:	f1dc 0c00 	rsbs	ip, ip, #0
 810046a:	eb7e 0000 	sbcs.w	r0, lr, r0
 810046e:	eb6e 0101 	sbc.w	r1, lr, r1
 8100472:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8100476:	d31b      	bcc.n	81004b0 <__adddf3+0x124>
 8100478:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 810047c:	d30c      	bcc.n	8100498 <__adddf3+0x10c>
 810047e:	0849      	lsrs	r1, r1, #1
 8100480:	ea5f 0030 	movs.w	r0, r0, rrx
 8100484:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8100488:	f104 0401 	add.w	r4, r4, #1
 810048c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8100490:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8100494:	f080 809a 	bcs.w	81005cc <__adddf3+0x240>
 8100498:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 810049c:	bf08      	it	eq
 810049e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 81004a2:	f150 0000 	adcs.w	r0, r0, #0
 81004a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 81004aa:	ea41 0105 	orr.w	r1, r1, r5
 81004ae:	bd30      	pop	{r4, r5, pc}
 81004b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 81004b4:	4140      	adcs	r0, r0
 81004b6:	eb41 0101 	adc.w	r1, r1, r1
 81004ba:	3c01      	subs	r4, #1
 81004bc:	bf28      	it	cs
 81004be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 81004c2:	d2e9      	bcs.n	8100498 <__adddf3+0x10c>
 81004c4:	f091 0f00 	teq	r1, #0
 81004c8:	bf04      	itt	eq
 81004ca:	4601      	moveq	r1, r0
 81004cc:	2000      	moveq	r0, #0
 81004ce:	fab1 f381 	clz	r3, r1
 81004d2:	bf08      	it	eq
 81004d4:	3320      	addeq	r3, #32
 81004d6:	f1a3 030b 	sub.w	r3, r3, #11
 81004da:	f1b3 0220 	subs.w	r2, r3, #32
 81004de:	da0c      	bge.n	81004fa <__adddf3+0x16e>
 81004e0:	320c      	adds	r2, #12
 81004e2:	dd08      	ble.n	81004f6 <__adddf3+0x16a>
 81004e4:	f102 0c14 	add.w	ip, r2, #20
 81004e8:	f1c2 020c 	rsb	r2, r2, #12
 81004ec:	fa01 f00c 	lsl.w	r0, r1, ip
 81004f0:	fa21 f102 	lsr.w	r1, r1, r2
 81004f4:	e00c      	b.n	8100510 <__adddf3+0x184>
 81004f6:	f102 0214 	add.w	r2, r2, #20
 81004fa:	bfd8      	it	le
 81004fc:	f1c2 0c20 	rsble	ip, r2, #32
 8100500:	fa01 f102 	lsl.w	r1, r1, r2
 8100504:	fa20 fc0c 	lsr.w	ip, r0, ip
 8100508:	bfdc      	itt	le
 810050a:	ea41 010c 	orrle.w	r1, r1, ip
 810050e:	4090      	lslle	r0, r2
 8100510:	1ae4      	subs	r4, r4, r3
 8100512:	bfa2      	ittt	ge
 8100514:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8100518:	4329      	orrge	r1, r5
 810051a:	bd30      	popge	{r4, r5, pc}
 810051c:	ea6f 0404 	mvn.w	r4, r4
 8100520:	3c1f      	subs	r4, #31
 8100522:	da1c      	bge.n	810055e <__adddf3+0x1d2>
 8100524:	340c      	adds	r4, #12
 8100526:	dc0e      	bgt.n	8100546 <__adddf3+0x1ba>
 8100528:	f104 0414 	add.w	r4, r4, #20
 810052c:	f1c4 0220 	rsb	r2, r4, #32
 8100530:	fa20 f004 	lsr.w	r0, r0, r4
 8100534:	fa01 f302 	lsl.w	r3, r1, r2
 8100538:	ea40 0003 	orr.w	r0, r0, r3
 810053c:	fa21 f304 	lsr.w	r3, r1, r4
 8100540:	ea45 0103 	orr.w	r1, r5, r3
 8100544:	bd30      	pop	{r4, r5, pc}
 8100546:	f1c4 040c 	rsb	r4, r4, #12
 810054a:	f1c4 0220 	rsb	r2, r4, #32
 810054e:	fa20 f002 	lsr.w	r0, r0, r2
 8100552:	fa01 f304 	lsl.w	r3, r1, r4
 8100556:	ea40 0003 	orr.w	r0, r0, r3
 810055a:	4629      	mov	r1, r5
 810055c:	bd30      	pop	{r4, r5, pc}
 810055e:	fa21 f004 	lsr.w	r0, r1, r4
 8100562:	4629      	mov	r1, r5
 8100564:	bd30      	pop	{r4, r5, pc}
 8100566:	f094 0f00 	teq	r4, #0
 810056a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 810056e:	bf06      	itte	eq
 8100570:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8100574:	3401      	addeq	r4, #1
 8100576:	3d01      	subne	r5, #1
 8100578:	e74e      	b.n	8100418 <__adddf3+0x8c>
 810057a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 810057e:	bf18      	it	ne
 8100580:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8100584:	d029      	beq.n	81005da <__adddf3+0x24e>
 8100586:	ea94 0f05 	teq	r4, r5
 810058a:	bf08      	it	eq
 810058c:	ea90 0f02 	teqeq	r0, r2
 8100590:	d005      	beq.n	810059e <__adddf3+0x212>
 8100592:	ea54 0c00 	orrs.w	ip, r4, r0
 8100596:	bf04      	itt	eq
 8100598:	4619      	moveq	r1, r3
 810059a:	4610      	moveq	r0, r2
 810059c:	bd30      	pop	{r4, r5, pc}
 810059e:	ea91 0f03 	teq	r1, r3
 81005a2:	bf1e      	ittt	ne
 81005a4:	2100      	movne	r1, #0
 81005a6:	2000      	movne	r0, #0
 81005a8:	bd30      	popne	{r4, r5, pc}
 81005aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 81005ae:	d105      	bne.n	81005bc <__adddf3+0x230>
 81005b0:	0040      	lsls	r0, r0, #1
 81005b2:	4149      	adcs	r1, r1
 81005b4:	bf28      	it	cs
 81005b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 81005ba:	bd30      	pop	{r4, r5, pc}
 81005bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 81005c0:	bf3c      	itt	cc
 81005c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 81005c6:	bd30      	popcc	{r4, r5, pc}
 81005c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 81005cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 81005d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 81005d4:	f04f 0000 	mov.w	r0, #0
 81005d8:	bd30      	pop	{r4, r5, pc}
 81005da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 81005de:	bf1a      	itte	ne
 81005e0:	4619      	movne	r1, r3
 81005e2:	4610      	movne	r0, r2
 81005e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 81005e8:	bf1c      	itt	ne
 81005ea:	460b      	movne	r3, r1
 81005ec:	4602      	movne	r2, r0
 81005ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 81005f2:	bf06      	itte	eq
 81005f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 81005f8:	ea91 0f03 	teqeq	r1, r3
 81005fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8100600:	bd30      	pop	{r4, r5, pc}
 8100602:	bf00      	nop

08100604 <__aeabi_ui2d>:
 8100604:	f090 0f00 	teq	r0, #0
 8100608:	bf04      	itt	eq
 810060a:	2100      	moveq	r1, #0
 810060c:	4770      	bxeq	lr
 810060e:	b530      	push	{r4, r5, lr}
 8100610:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8100614:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8100618:	f04f 0500 	mov.w	r5, #0
 810061c:	f04f 0100 	mov.w	r1, #0
 8100620:	e750      	b.n	81004c4 <__adddf3+0x138>
 8100622:	bf00      	nop

08100624 <__aeabi_i2d>:
 8100624:	f090 0f00 	teq	r0, #0
 8100628:	bf04      	itt	eq
 810062a:	2100      	moveq	r1, #0
 810062c:	4770      	bxeq	lr
 810062e:	b530      	push	{r4, r5, lr}
 8100630:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8100634:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8100638:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 810063c:	bf48      	it	mi
 810063e:	4240      	negmi	r0, r0
 8100640:	f04f 0100 	mov.w	r1, #0
 8100644:	e73e      	b.n	81004c4 <__adddf3+0x138>
 8100646:	bf00      	nop

08100648 <__aeabi_f2d>:
 8100648:	0042      	lsls	r2, r0, #1
 810064a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 810064e:	ea4f 0131 	mov.w	r1, r1, rrx
 8100652:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8100656:	bf1f      	itttt	ne
 8100658:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 810065c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8100660:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8100664:	4770      	bxne	lr
 8100666:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 810066a:	bf08      	it	eq
 810066c:	4770      	bxeq	lr
 810066e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8100672:	bf04      	itt	eq
 8100674:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8100678:	4770      	bxeq	lr
 810067a:	b530      	push	{r4, r5, lr}
 810067c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8100680:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8100684:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8100688:	e71c      	b.n	81004c4 <__adddf3+0x138>
 810068a:	bf00      	nop

0810068c <__aeabi_ul2d>:
 810068c:	ea50 0201 	orrs.w	r2, r0, r1
 8100690:	bf08      	it	eq
 8100692:	4770      	bxeq	lr
 8100694:	b530      	push	{r4, r5, lr}
 8100696:	f04f 0500 	mov.w	r5, #0
 810069a:	e00a      	b.n	81006b2 <__aeabi_l2d+0x16>

0810069c <__aeabi_l2d>:
 810069c:	ea50 0201 	orrs.w	r2, r0, r1
 81006a0:	bf08      	it	eq
 81006a2:	4770      	bxeq	lr
 81006a4:	b530      	push	{r4, r5, lr}
 81006a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 81006aa:	d502      	bpl.n	81006b2 <__aeabi_l2d+0x16>
 81006ac:	4240      	negs	r0, r0
 81006ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 81006b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 81006b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 81006ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 81006be:	f43f aed8 	beq.w	8100472 <__adddf3+0xe6>
 81006c2:	f04f 0203 	mov.w	r2, #3
 81006c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 81006ca:	bf18      	it	ne
 81006cc:	3203      	addne	r2, #3
 81006ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 81006d2:	bf18      	it	ne
 81006d4:	3203      	addne	r2, #3
 81006d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 81006da:	f1c2 0320 	rsb	r3, r2, #32
 81006de:	fa00 fc03 	lsl.w	ip, r0, r3
 81006e2:	fa20 f002 	lsr.w	r0, r0, r2
 81006e6:	fa01 fe03 	lsl.w	lr, r1, r3
 81006ea:	ea40 000e 	orr.w	r0, r0, lr
 81006ee:	fa21 f102 	lsr.w	r1, r1, r2
 81006f2:	4414      	add	r4, r2
 81006f4:	e6bd      	b.n	8100472 <__adddf3+0xe6>
 81006f6:	bf00      	nop

081006f8 <__aeabi_dmul>:
 81006f8:	b570      	push	{r4, r5, r6, lr}
 81006fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 81006fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8100702:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8100706:	bf1d      	ittte	ne
 8100708:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 810070c:	ea94 0f0c 	teqne	r4, ip
 8100710:	ea95 0f0c 	teqne	r5, ip
 8100714:	f000 f8de 	bleq	81008d4 <__aeabi_dmul+0x1dc>
 8100718:	442c      	add	r4, r5
 810071a:	ea81 0603 	eor.w	r6, r1, r3
 810071e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8100722:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8100726:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 810072a:	bf18      	it	ne
 810072c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8100730:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8100734:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8100738:	d038      	beq.n	81007ac <__aeabi_dmul+0xb4>
 810073a:	fba0 ce02 	umull	ip, lr, r0, r2
 810073e:	f04f 0500 	mov.w	r5, #0
 8100742:	fbe1 e502 	umlal	lr, r5, r1, r2
 8100746:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 810074a:	fbe0 e503 	umlal	lr, r5, r0, r3
 810074e:	f04f 0600 	mov.w	r6, #0
 8100752:	fbe1 5603 	umlal	r5, r6, r1, r3
 8100756:	f09c 0f00 	teq	ip, #0
 810075a:	bf18      	it	ne
 810075c:	f04e 0e01 	orrne.w	lr, lr, #1
 8100760:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8100764:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8100768:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 810076c:	d204      	bcs.n	8100778 <__aeabi_dmul+0x80>
 810076e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8100772:	416d      	adcs	r5, r5
 8100774:	eb46 0606 	adc.w	r6, r6, r6
 8100778:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 810077c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8100780:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8100784:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8100788:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 810078c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8100790:	bf88      	it	hi
 8100792:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8100796:	d81e      	bhi.n	81007d6 <__aeabi_dmul+0xde>
 8100798:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 810079c:	bf08      	it	eq
 810079e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 81007a2:	f150 0000 	adcs.w	r0, r0, #0
 81007a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 81007aa:	bd70      	pop	{r4, r5, r6, pc}
 81007ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 81007b0:	ea46 0101 	orr.w	r1, r6, r1
 81007b4:	ea40 0002 	orr.w	r0, r0, r2
 81007b8:	ea81 0103 	eor.w	r1, r1, r3
 81007bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 81007c0:	bfc2      	ittt	gt
 81007c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 81007c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 81007ca:	bd70      	popgt	{r4, r5, r6, pc}
 81007cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 81007d0:	f04f 0e00 	mov.w	lr, #0
 81007d4:	3c01      	subs	r4, #1
 81007d6:	f300 80ab 	bgt.w	8100930 <__aeabi_dmul+0x238>
 81007da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 81007de:	bfde      	ittt	le
 81007e0:	2000      	movle	r0, #0
 81007e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 81007e6:	bd70      	pople	{r4, r5, r6, pc}
 81007e8:	f1c4 0400 	rsb	r4, r4, #0
 81007ec:	3c20      	subs	r4, #32
 81007ee:	da35      	bge.n	810085c <__aeabi_dmul+0x164>
 81007f0:	340c      	adds	r4, #12
 81007f2:	dc1b      	bgt.n	810082c <__aeabi_dmul+0x134>
 81007f4:	f104 0414 	add.w	r4, r4, #20
 81007f8:	f1c4 0520 	rsb	r5, r4, #32
 81007fc:	fa00 f305 	lsl.w	r3, r0, r5
 8100800:	fa20 f004 	lsr.w	r0, r0, r4
 8100804:	fa01 f205 	lsl.w	r2, r1, r5
 8100808:	ea40 0002 	orr.w	r0, r0, r2
 810080c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8100810:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8100814:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8100818:	fa21 f604 	lsr.w	r6, r1, r4
 810081c:	eb42 0106 	adc.w	r1, r2, r6
 8100820:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8100824:	bf08      	it	eq
 8100826:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 810082a:	bd70      	pop	{r4, r5, r6, pc}
 810082c:	f1c4 040c 	rsb	r4, r4, #12
 8100830:	f1c4 0520 	rsb	r5, r4, #32
 8100834:	fa00 f304 	lsl.w	r3, r0, r4
 8100838:	fa20 f005 	lsr.w	r0, r0, r5
 810083c:	fa01 f204 	lsl.w	r2, r1, r4
 8100840:	ea40 0002 	orr.w	r0, r0, r2
 8100844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8100848:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 810084c:	f141 0100 	adc.w	r1, r1, #0
 8100850:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8100854:	bf08      	it	eq
 8100856:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 810085a:	bd70      	pop	{r4, r5, r6, pc}
 810085c:	f1c4 0520 	rsb	r5, r4, #32
 8100860:	fa00 f205 	lsl.w	r2, r0, r5
 8100864:	ea4e 0e02 	orr.w	lr, lr, r2
 8100868:	fa20 f304 	lsr.w	r3, r0, r4
 810086c:	fa01 f205 	lsl.w	r2, r1, r5
 8100870:	ea43 0302 	orr.w	r3, r3, r2
 8100874:	fa21 f004 	lsr.w	r0, r1, r4
 8100878:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 810087c:	fa21 f204 	lsr.w	r2, r1, r4
 8100880:	ea20 0002 	bic.w	r0, r0, r2
 8100884:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8100888:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 810088c:	bf08      	it	eq
 810088e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8100892:	bd70      	pop	{r4, r5, r6, pc}
 8100894:	f094 0f00 	teq	r4, #0
 8100898:	d10f      	bne.n	81008ba <__aeabi_dmul+0x1c2>
 810089a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 810089e:	0040      	lsls	r0, r0, #1
 81008a0:	eb41 0101 	adc.w	r1, r1, r1
 81008a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 81008a8:	bf08      	it	eq
 81008aa:	3c01      	subeq	r4, #1
 81008ac:	d0f7      	beq.n	810089e <__aeabi_dmul+0x1a6>
 81008ae:	ea41 0106 	orr.w	r1, r1, r6
 81008b2:	f095 0f00 	teq	r5, #0
 81008b6:	bf18      	it	ne
 81008b8:	4770      	bxne	lr
 81008ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 81008be:	0052      	lsls	r2, r2, #1
 81008c0:	eb43 0303 	adc.w	r3, r3, r3
 81008c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 81008c8:	bf08      	it	eq
 81008ca:	3d01      	subeq	r5, #1
 81008cc:	d0f7      	beq.n	81008be <__aeabi_dmul+0x1c6>
 81008ce:	ea43 0306 	orr.w	r3, r3, r6
 81008d2:	4770      	bx	lr
 81008d4:	ea94 0f0c 	teq	r4, ip
 81008d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 81008dc:	bf18      	it	ne
 81008de:	ea95 0f0c 	teqne	r5, ip
 81008e2:	d00c      	beq.n	81008fe <__aeabi_dmul+0x206>
 81008e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 81008e8:	bf18      	it	ne
 81008ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 81008ee:	d1d1      	bne.n	8100894 <__aeabi_dmul+0x19c>
 81008f0:	ea81 0103 	eor.w	r1, r1, r3
 81008f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 81008f8:	f04f 0000 	mov.w	r0, #0
 81008fc:	bd70      	pop	{r4, r5, r6, pc}
 81008fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8100902:	bf06      	itte	eq
 8100904:	4610      	moveq	r0, r2
 8100906:	4619      	moveq	r1, r3
 8100908:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 810090c:	d019      	beq.n	8100942 <__aeabi_dmul+0x24a>
 810090e:	ea94 0f0c 	teq	r4, ip
 8100912:	d102      	bne.n	810091a <__aeabi_dmul+0x222>
 8100914:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8100918:	d113      	bne.n	8100942 <__aeabi_dmul+0x24a>
 810091a:	ea95 0f0c 	teq	r5, ip
 810091e:	d105      	bne.n	810092c <__aeabi_dmul+0x234>
 8100920:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8100924:	bf1c      	itt	ne
 8100926:	4610      	movne	r0, r2
 8100928:	4619      	movne	r1, r3
 810092a:	d10a      	bne.n	8100942 <__aeabi_dmul+0x24a>
 810092c:	ea81 0103 	eor.w	r1, r1, r3
 8100930:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8100934:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8100938:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 810093c:	f04f 0000 	mov.w	r0, #0
 8100940:	bd70      	pop	{r4, r5, r6, pc}
 8100942:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8100946:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 810094a:	bd70      	pop	{r4, r5, r6, pc}

0810094c <__aeabi_ddiv>:
 810094c:	b570      	push	{r4, r5, r6, lr}
 810094e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8100952:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8100956:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 810095a:	bf1d      	ittte	ne
 810095c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8100960:	ea94 0f0c 	teqne	r4, ip
 8100964:	ea95 0f0c 	teqne	r5, ip
 8100968:	f000 f8a7 	bleq	8100aba <__aeabi_ddiv+0x16e>
 810096c:	eba4 0405 	sub.w	r4, r4, r5
 8100970:	ea81 0e03 	eor.w	lr, r1, r3
 8100974:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8100978:	ea4f 3101 	mov.w	r1, r1, lsl #12
 810097c:	f000 8088 	beq.w	8100a90 <__aeabi_ddiv+0x144>
 8100980:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8100984:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8100988:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 810098c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8100990:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8100994:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8100998:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 810099c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 81009a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 81009a4:	429d      	cmp	r5, r3
 81009a6:	bf08      	it	eq
 81009a8:	4296      	cmpeq	r6, r2
 81009aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 81009ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 81009b2:	d202      	bcs.n	81009ba <__aeabi_ddiv+0x6e>
 81009b4:	085b      	lsrs	r3, r3, #1
 81009b6:	ea4f 0232 	mov.w	r2, r2, rrx
 81009ba:	1ab6      	subs	r6, r6, r2
 81009bc:	eb65 0503 	sbc.w	r5, r5, r3
 81009c0:	085b      	lsrs	r3, r3, #1
 81009c2:	ea4f 0232 	mov.w	r2, r2, rrx
 81009c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 81009ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 81009ce:	ebb6 0e02 	subs.w	lr, r6, r2
 81009d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 81009d6:	bf22      	ittt	cs
 81009d8:	1ab6      	subcs	r6, r6, r2
 81009da:	4675      	movcs	r5, lr
 81009dc:	ea40 000c 	orrcs.w	r0, r0, ip
 81009e0:	085b      	lsrs	r3, r3, #1
 81009e2:	ea4f 0232 	mov.w	r2, r2, rrx
 81009e6:	ebb6 0e02 	subs.w	lr, r6, r2
 81009ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 81009ee:	bf22      	ittt	cs
 81009f0:	1ab6      	subcs	r6, r6, r2
 81009f2:	4675      	movcs	r5, lr
 81009f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 81009f8:	085b      	lsrs	r3, r3, #1
 81009fa:	ea4f 0232 	mov.w	r2, r2, rrx
 81009fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8100a02:	eb75 0e03 	sbcs.w	lr, r5, r3
 8100a06:	bf22      	ittt	cs
 8100a08:	1ab6      	subcs	r6, r6, r2
 8100a0a:	4675      	movcs	r5, lr
 8100a0c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8100a10:	085b      	lsrs	r3, r3, #1
 8100a12:	ea4f 0232 	mov.w	r2, r2, rrx
 8100a16:	ebb6 0e02 	subs.w	lr, r6, r2
 8100a1a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8100a1e:	bf22      	ittt	cs
 8100a20:	1ab6      	subcs	r6, r6, r2
 8100a22:	4675      	movcs	r5, lr
 8100a24:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8100a28:	ea55 0e06 	orrs.w	lr, r5, r6
 8100a2c:	d018      	beq.n	8100a60 <__aeabi_ddiv+0x114>
 8100a2e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8100a32:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8100a36:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8100a3a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8100a3e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8100a42:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8100a46:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8100a4a:	d1c0      	bne.n	81009ce <__aeabi_ddiv+0x82>
 8100a4c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8100a50:	d10b      	bne.n	8100a6a <__aeabi_ddiv+0x11e>
 8100a52:	ea41 0100 	orr.w	r1, r1, r0
 8100a56:	f04f 0000 	mov.w	r0, #0
 8100a5a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8100a5e:	e7b6      	b.n	81009ce <__aeabi_ddiv+0x82>
 8100a60:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8100a64:	bf04      	itt	eq
 8100a66:	4301      	orreq	r1, r0
 8100a68:	2000      	moveq	r0, #0
 8100a6a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8100a6e:	bf88      	it	hi
 8100a70:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8100a74:	f63f aeaf 	bhi.w	81007d6 <__aeabi_dmul+0xde>
 8100a78:	ebb5 0c03 	subs.w	ip, r5, r3
 8100a7c:	bf04      	itt	eq
 8100a7e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8100a82:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8100a86:	f150 0000 	adcs.w	r0, r0, #0
 8100a8a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8100a8e:	bd70      	pop	{r4, r5, r6, pc}
 8100a90:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8100a94:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8100a98:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8100a9c:	bfc2      	ittt	gt
 8100a9e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8100aa2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8100aa6:	bd70      	popgt	{r4, r5, r6, pc}
 8100aa8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8100aac:	f04f 0e00 	mov.w	lr, #0
 8100ab0:	3c01      	subs	r4, #1
 8100ab2:	e690      	b.n	81007d6 <__aeabi_dmul+0xde>
 8100ab4:	ea45 0e06 	orr.w	lr, r5, r6
 8100ab8:	e68d      	b.n	81007d6 <__aeabi_dmul+0xde>
 8100aba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8100abe:	ea94 0f0c 	teq	r4, ip
 8100ac2:	bf08      	it	eq
 8100ac4:	ea95 0f0c 	teqeq	r5, ip
 8100ac8:	f43f af3b 	beq.w	8100942 <__aeabi_dmul+0x24a>
 8100acc:	ea94 0f0c 	teq	r4, ip
 8100ad0:	d10a      	bne.n	8100ae8 <__aeabi_ddiv+0x19c>
 8100ad2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8100ad6:	f47f af34 	bne.w	8100942 <__aeabi_dmul+0x24a>
 8100ada:	ea95 0f0c 	teq	r5, ip
 8100ade:	f47f af25 	bne.w	810092c <__aeabi_dmul+0x234>
 8100ae2:	4610      	mov	r0, r2
 8100ae4:	4619      	mov	r1, r3
 8100ae6:	e72c      	b.n	8100942 <__aeabi_dmul+0x24a>
 8100ae8:	ea95 0f0c 	teq	r5, ip
 8100aec:	d106      	bne.n	8100afc <__aeabi_ddiv+0x1b0>
 8100aee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8100af2:	f43f aefd 	beq.w	81008f0 <__aeabi_dmul+0x1f8>
 8100af6:	4610      	mov	r0, r2
 8100af8:	4619      	mov	r1, r3
 8100afa:	e722      	b.n	8100942 <__aeabi_dmul+0x24a>
 8100afc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8100b00:	bf18      	it	ne
 8100b02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8100b06:	f47f aec5 	bne.w	8100894 <__aeabi_dmul+0x19c>
 8100b0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8100b0e:	f47f af0d 	bne.w	810092c <__aeabi_dmul+0x234>
 8100b12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8100b16:	f47f aeeb 	bne.w	81008f0 <__aeabi_dmul+0x1f8>
 8100b1a:	e712      	b.n	8100942 <__aeabi_dmul+0x24a>

08100b1c <__gedf2>:
 8100b1c:	f04f 3cff 	mov.w	ip, #4294967295
 8100b20:	e006      	b.n	8100b30 <__cmpdf2+0x4>
 8100b22:	bf00      	nop

08100b24 <__ledf2>:
 8100b24:	f04f 0c01 	mov.w	ip, #1
 8100b28:	e002      	b.n	8100b30 <__cmpdf2+0x4>
 8100b2a:	bf00      	nop

08100b2c <__cmpdf2>:
 8100b2c:	f04f 0c01 	mov.w	ip, #1
 8100b30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8100b34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100b38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100b40:	bf18      	it	ne
 8100b42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8100b46:	d01b      	beq.n	8100b80 <__cmpdf2+0x54>
 8100b48:	b001      	add	sp, #4
 8100b4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8100b4e:	bf0c      	ite	eq
 8100b50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8100b54:	ea91 0f03 	teqne	r1, r3
 8100b58:	bf02      	ittt	eq
 8100b5a:	ea90 0f02 	teqeq	r0, r2
 8100b5e:	2000      	moveq	r0, #0
 8100b60:	4770      	bxeq	lr
 8100b62:	f110 0f00 	cmn.w	r0, #0
 8100b66:	ea91 0f03 	teq	r1, r3
 8100b6a:	bf58      	it	pl
 8100b6c:	4299      	cmppl	r1, r3
 8100b6e:	bf08      	it	eq
 8100b70:	4290      	cmpeq	r0, r2
 8100b72:	bf2c      	ite	cs
 8100b74:	17d8      	asrcs	r0, r3, #31
 8100b76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8100b7a:	f040 0001 	orr.w	r0, r0, #1
 8100b7e:	4770      	bx	lr
 8100b80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100b84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100b88:	d102      	bne.n	8100b90 <__cmpdf2+0x64>
 8100b8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8100b8e:	d107      	bne.n	8100ba0 <__cmpdf2+0x74>
 8100b90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100b94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100b98:	d1d6      	bne.n	8100b48 <__cmpdf2+0x1c>
 8100b9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8100b9e:	d0d3      	beq.n	8100b48 <__cmpdf2+0x1c>
 8100ba0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8100ba4:	4770      	bx	lr
 8100ba6:	bf00      	nop

08100ba8 <__aeabi_cdrcmple>:
 8100ba8:	4684      	mov	ip, r0
 8100baa:	4610      	mov	r0, r2
 8100bac:	4662      	mov	r2, ip
 8100bae:	468c      	mov	ip, r1
 8100bb0:	4619      	mov	r1, r3
 8100bb2:	4663      	mov	r3, ip
 8100bb4:	e000      	b.n	8100bb8 <__aeabi_cdcmpeq>
 8100bb6:	bf00      	nop

08100bb8 <__aeabi_cdcmpeq>:
 8100bb8:	b501      	push	{r0, lr}
 8100bba:	f7ff ffb7 	bl	8100b2c <__cmpdf2>
 8100bbe:	2800      	cmp	r0, #0
 8100bc0:	bf48      	it	mi
 8100bc2:	f110 0f00 	cmnmi.w	r0, #0
 8100bc6:	bd01      	pop	{r0, pc}

08100bc8 <__aeabi_dcmpeq>:
 8100bc8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100bcc:	f7ff fff4 	bl	8100bb8 <__aeabi_cdcmpeq>
 8100bd0:	bf0c      	ite	eq
 8100bd2:	2001      	moveq	r0, #1
 8100bd4:	2000      	movne	r0, #0
 8100bd6:	f85d fb08 	ldr.w	pc, [sp], #8
 8100bda:	bf00      	nop

08100bdc <__aeabi_dcmplt>:
 8100bdc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100be0:	f7ff ffea 	bl	8100bb8 <__aeabi_cdcmpeq>
 8100be4:	bf34      	ite	cc
 8100be6:	2001      	movcc	r0, #1
 8100be8:	2000      	movcs	r0, #0
 8100bea:	f85d fb08 	ldr.w	pc, [sp], #8
 8100bee:	bf00      	nop

08100bf0 <__aeabi_dcmple>:
 8100bf0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100bf4:	f7ff ffe0 	bl	8100bb8 <__aeabi_cdcmpeq>
 8100bf8:	bf94      	ite	ls
 8100bfa:	2001      	movls	r0, #1
 8100bfc:	2000      	movhi	r0, #0
 8100bfe:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c02:	bf00      	nop

08100c04 <__aeabi_dcmpge>:
 8100c04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c08:	f7ff ffce 	bl	8100ba8 <__aeabi_cdrcmple>
 8100c0c:	bf94      	ite	ls
 8100c0e:	2001      	movls	r0, #1
 8100c10:	2000      	movhi	r0, #0
 8100c12:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c16:	bf00      	nop

08100c18 <__aeabi_dcmpgt>:
 8100c18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c1c:	f7ff ffc4 	bl	8100ba8 <__aeabi_cdrcmple>
 8100c20:	bf34      	ite	cc
 8100c22:	2001      	movcc	r0, #1
 8100c24:	2000      	movcs	r0, #0
 8100c26:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c2a:	bf00      	nop

08100c2c <__aeabi_d2uiz>:
 8100c2c:	004a      	lsls	r2, r1, #1
 8100c2e:	d211      	bcs.n	8100c54 <__aeabi_d2uiz+0x28>
 8100c30:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8100c34:	d211      	bcs.n	8100c5a <__aeabi_d2uiz+0x2e>
 8100c36:	d50d      	bpl.n	8100c54 <__aeabi_d2uiz+0x28>
 8100c38:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8100c3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8100c40:	d40e      	bmi.n	8100c60 <__aeabi_d2uiz+0x34>
 8100c42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8100c46:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8100c4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8100c4e:	fa23 f002 	lsr.w	r0, r3, r2
 8100c52:	4770      	bx	lr
 8100c54:	f04f 0000 	mov.w	r0, #0
 8100c58:	4770      	bx	lr
 8100c5a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8100c5e:	d102      	bne.n	8100c66 <__aeabi_d2uiz+0x3a>
 8100c60:	f04f 30ff 	mov.w	r0, #4294967295
 8100c64:	4770      	bx	lr
 8100c66:	f04f 0000 	mov.w	r0, #0
 8100c6a:	4770      	bx	lr

08100c6c <__aeabi_uldivmod>:
 8100c6c:	b953      	cbnz	r3, 8100c84 <__aeabi_uldivmod+0x18>
 8100c6e:	b94a      	cbnz	r2, 8100c84 <__aeabi_uldivmod+0x18>
 8100c70:	2900      	cmp	r1, #0
 8100c72:	bf08      	it	eq
 8100c74:	2800      	cmpeq	r0, #0
 8100c76:	bf1c      	itt	ne
 8100c78:	f04f 31ff 	movne.w	r1, #4294967295
 8100c7c:	f04f 30ff 	movne.w	r0, #4294967295
 8100c80:	f000 b96a 	b.w	8100f58 <__aeabi_idiv0>
 8100c84:	f1ad 0c08 	sub.w	ip, sp, #8
 8100c88:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8100c8c:	f000 f806 	bl	8100c9c <__udivmoddi4>
 8100c90:	f8dd e004 	ldr.w	lr, [sp, #4]
 8100c94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8100c98:	b004      	add	sp, #16
 8100c9a:	4770      	bx	lr

08100c9c <__udivmoddi4>:
 8100c9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8100ca0:	9d08      	ldr	r5, [sp, #32]
 8100ca2:	460c      	mov	r4, r1
 8100ca4:	2b00      	cmp	r3, #0
 8100ca6:	d14e      	bne.n	8100d46 <__udivmoddi4+0xaa>
 8100ca8:	4694      	mov	ip, r2
 8100caa:	458c      	cmp	ip, r1
 8100cac:	4686      	mov	lr, r0
 8100cae:	fab2 f282 	clz	r2, r2
 8100cb2:	d962      	bls.n	8100d7a <__udivmoddi4+0xde>
 8100cb4:	b14a      	cbz	r2, 8100cca <__udivmoddi4+0x2e>
 8100cb6:	f1c2 0320 	rsb	r3, r2, #32
 8100cba:	4091      	lsls	r1, r2
 8100cbc:	fa20 f303 	lsr.w	r3, r0, r3
 8100cc0:	fa0c fc02 	lsl.w	ip, ip, r2
 8100cc4:	4319      	orrs	r1, r3
 8100cc6:	fa00 fe02 	lsl.w	lr, r0, r2
 8100cca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8100cce:	fa1f f68c 	uxth.w	r6, ip
 8100cd2:	fbb1 f4f7 	udiv	r4, r1, r7
 8100cd6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8100cda:	fb07 1114 	mls	r1, r7, r4, r1
 8100cde:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8100ce2:	fb04 f106 	mul.w	r1, r4, r6
 8100ce6:	4299      	cmp	r1, r3
 8100ce8:	d90a      	bls.n	8100d00 <__udivmoddi4+0x64>
 8100cea:	eb1c 0303 	adds.w	r3, ip, r3
 8100cee:	f104 30ff 	add.w	r0, r4, #4294967295
 8100cf2:	f080 8112 	bcs.w	8100f1a <__udivmoddi4+0x27e>
 8100cf6:	4299      	cmp	r1, r3
 8100cf8:	f240 810f 	bls.w	8100f1a <__udivmoddi4+0x27e>
 8100cfc:	3c02      	subs	r4, #2
 8100cfe:	4463      	add	r3, ip
 8100d00:	1a59      	subs	r1, r3, r1
 8100d02:	fa1f f38e 	uxth.w	r3, lr
 8100d06:	fbb1 f0f7 	udiv	r0, r1, r7
 8100d0a:	fb07 1110 	mls	r1, r7, r0, r1
 8100d0e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8100d12:	fb00 f606 	mul.w	r6, r0, r6
 8100d16:	429e      	cmp	r6, r3
 8100d18:	d90a      	bls.n	8100d30 <__udivmoddi4+0x94>
 8100d1a:	eb1c 0303 	adds.w	r3, ip, r3
 8100d1e:	f100 31ff 	add.w	r1, r0, #4294967295
 8100d22:	f080 80fc 	bcs.w	8100f1e <__udivmoddi4+0x282>
 8100d26:	429e      	cmp	r6, r3
 8100d28:	f240 80f9 	bls.w	8100f1e <__udivmoddi4+0x282>
 8100d2c:	4463      	add	r3, ip
 8100d2e:	3802      	subs	r0, #2
 8100d30:	1b9b      	subs	r3, r3, r6
 8100d32:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8100d36:	2100      	movs	r1, #0
 8100d38:	b11d      	cbz	r5, 8100d42 <__udivmoddi4+0xa6>
 8100d3a:	40d3      	lsrs	r3, r2
 8100d3c:	2200      	movs	r2, #0
 8100d3e:	e9c5 3200 	strd	r3, r2, [r5]
 8100d42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8100d46:	428b      	cmp	r3, r1
 8100d48:	d905      	bls.n	8100d56 <__udivmoddi4+0xba>
 8100d4a:	b10d      	cbz	r5, 8100d50 <__udivmoddi4+0xb4>
 8100d4c:	e9c5 0100 	strd	r0, r1, [r5]
 8100d50:	2100      	movs	r1, #0
 8100d52:	4608      	mov	r0, r1
 8100d54:	e7f5      	b.n	8100d42 <__udivmoddi4+0xa6>
 8100d56:	fab3 f183 	clz	r1, r3
 8100d5a:	2900      	cmp	r1, #0
 8100d5c:	d146      	bne.n	8100dec <__udivmoddi4+0x150>
 8100d5e:	42a3      	cmp	r3, r4
 8100d60:	d302      	bcc.n	8100d68 <__udivmoddi4+0xcc>
 8100d62:	4290      	cmp	r0, r2
 8100d64:	f0c0 80f0 	bcc.w	8100f48 <__udivmoddi4+0x2ac>
 8100d68:	1a86      	subs	r6, r0, r2
 8100d6a:	eb64 0303 	sbc.w	r3, r4, r3
 8100d6e:	2001      	movs	r0, #1
 8100d70:	2d00      	cmp	r5, #0
 8100d72:	d0e6      	beq.n	8100d42 <__udivmoddi4+0xa6>
 8100d74:	e9c5 6300 	strd	r6, r3, [r5]
 8100d78:	e7e3      	b.n	8100d42 <__udivmoddi4+0xa6>
 8100d7a:	2a00      	cmp	r2, #0
 8100d7c:	f040 8090 	bne.w	8100ea0 <__udivmoddi4+0x204>
 8100d80:	eba1 040c 	sub.w	r4, r1, ip
 8100d84:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8100d88:	fa1f f78c 	uxth.w	r7, ip
 8100d8c:	2101      	movs	r1, #1
 8100d8e:	fbb4 f6f8 	udiv	r6, r4, r8
 8100d92:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8100d96:	fb08 4416 	mls	r4, r8, r6, r4
 8100d9a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8100d9e:	fb07 f006 	mul.w	r0, r7, r6
 8100da2:	4298      	cmp	r0, r3
 8100da4:	d908      	bls.n	8100db8 <__udivmoddi4+0x11c>
 8100da6:	eb1c 0303 	adds.w	r3, ip, r3
 8100daa:	f106 34ff 	add.w	r4, r6, #4294967295
 8100dae:	d202      	bcs.n	8100db6 <__udivmoddi4+0x11a>
 8100db0:	4298      	cmp	r0, r3
 8100db2:	f200 80cd 	bhi.w	8100f50 <__udivmoddi4+0x2b4>
 8100db6:	4626      	mov	r6, r4
 8100db8:	1a1c      	subs	r4, r3, r0
 8100dba:	fa1f f38e 	uxth.w	r3, lr
 8100dbe:	fbb4 f0f8 	udiv	r0, r4, r8
 8100dc2:	fb08 4410 	mls	r4, r8, r0, r4
 8100dc6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8100dca:	fb00 f707 	mul.w	r7, r0, r7
 8100dce:	429f      	cmp	r7, r3
 8100dd0:	d908      	bls.n	8100de4 <__udivmoddi4+0x148>
 8100dd2:	eb1c 0303 	adds.w	r3, ip, r3
 8100dd6:	f100 34ff 	add.w	r4, r0, #4294967295
 8100dda:	d202      	bcs.n	8100de2 <__udivmoddi4+0x146>
 8100ddc:	429f      	cmp	r7, r3
 8100dde:	f200 80b0 	bhi.w	8100f42 <__udivmoddi4+0x2a6>
 8100de2:	4620      	mov	r0, r4
 8100de4:	1bdb      	subs	r3, r3, r7
 8100de6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8100dea:	e7a5      	b.n	8100d38 <__udivmoddi4+0x9c>
 8100dec:	f1c1 0620 	rsb	r6, r1, #32
 8100df0:	408b      	lsls	r3, r1
 8100df2:	fa22 f706 	lsr.w	r7, r2, r6
 8100df6:	431f      	orrs	r7, r3
 8100df8:	fa20 fc06 	lsr.w	ip, r0, r6
 8100dfc:	fa04 f301 	lsl.w	r3, r4, r1
 8100e00:	ea43 030c 	orr.w	r3, r3, ip
 8100e04:	40f4      	lsrs	r4, r6
 8100e06:	fa00 f801 	lsl.w	r8, r0, r1
 8100e0a:	0c38      	lsrs	r0, r7, #16
 8100e0c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8100e10:	fbb4 fef0 	udiv	lr, r4, r0
 8100e14:	fa1f fc87 	uxth.w	ip, r7
 8100e18:	fb00 441e 	mls	r4, r0, lr, r4
 8100e1c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8100e20:	fb0e f90c 	mul.w	r9, lr, ip
 8100e24:	45a1      	cmp	r9, r4
 8100e26:	fa02 f201 	lsl.w	r2, r2, r1
 8100e2a:	d90a      	bls.n	8100e42 <__udivmoddi4+0x1a6>
 8100e2c:	193c      	adds	r4, r7, r4
 8100e2e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8100e32:	f080 8084 	bcs.w	8100f3e <__udivmoddi4+0x2a2>
 8100e36:	45a1      	cmp	r9, r4
 8100e38:	f240 8081 	bls.w	8100f3e <__udivmoddi4+0x2a2>
 8100e3c:	f1ae 0e02 	sub.w	lr, lr, #2
 8100e40:	443c      	add	r4, r7
 8100e42:	eba4 0409 	sub.w	r4, r4, r9
 8100e46:	fa1f f983 	uxth.w	r9, r3
 8100e4a:	fbb4 f3f0 	udiv	r3, r4, r0
 8100e4e:	fb00 4413 	mls	r4, r0, r3, r4
 8100e52:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8100e56:	fb03 fc0c 	mul.w	ip, r3, ip
 8100e5a:	45a4      	cmp	ip, r4
 8100e5c:	d907      	bls.n	8100e6e <__udivmoddi4+0x1d2>
 8100e5e:	193c      	adds	r4, r7, r4
 8100e60:	f103 30ff 	add.w	r0, r3, #4294967295
 8100e64:	d267      	bcs.n	8100f36 <__udivmoddi4+0x29a>
 8100e66:	45a4      	cmp	ip, r4
 8100e68:	d965      	bls.n	8100f36 <__udivmoddi4+0x29a>
 8100e6a:	3b02      	subs	r3, #2
 8100e6c:	443c      	add	r4, r7
 8100e6e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8100e72:	fba0 9302 	umull	r9, r3, r0, r2
 8100e76:	eba4 040c 	sub.w	r4, r4, ip
 8100e7a:	429c      	cmp	r4, r3
 8100e7c:	46ce      	mov	lr, r9
 8100e7e:	469c      	mov	ip, r3
 8100e80:	d351      	bcc.n	8100f26 <__udivmoddi4+0x28a>
 8100e82:	d04e      	beq.n	8100f22 <__udivmoddi4+0x286>
 8100e84:	b155      	cbz	r5, 8100e9c <__udivmoddi4+0x200>
 8100e86:	ebb8 030e 	subs.w	r3, r8, lr
 8100e8a:	eb64 040c 	sbc.w	r4, r4, ip
 8100e8e:	fa04 f606 	lsl.w	r6, r4, r6
 8100e92:	40cb      	lsrs	r3, r1
 8100e94:	431e      	orrs	r6, r3
 8100e96:	40cc      	lsrs	r4, r1
 8100e98:	e9c5 6400 	strd	r6, r4, [r5]
 8100e9c:	2100      	movs	r1, #0
 8100e9e:	e750      	b.n	8100d42 <__udivmoddi4+0xa6>
 8100ea0:	f1c2 0320 	rsb	r3, r2, #32
 8100ea4:	fa20 f103 	lsr.w	r1, r0, r3
 8100ea8:	fa0c fc02 	lsl.w	ip, ip, r2
 8100eac:	fa24 f303 	lsr.w	r3, r4, r3
 8100eb0:	4094      	lsls	r4, r2
 8100eb2:	430c      	orrs	r4, r1
 8100eb4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8100eb8:	fa00 fe02 	lsl.w	lr, r0, r2
 8100ebc:	fa1f f78c 	uxth.w	r7, ip
 8100ec0:	fbb3 f0f8 	udiv	r0, r3, r8
 8100ec4:	fb08 3110 	mls	r1, r8, r0, r3
 8100ec8:	0c23      	lsrs	r3, r4, #16
 8100eca:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8100ece:	fb00 f107 	mul.w	r1, r0, r7
 8100ed2:	4299      	cmp	r1, r3
 8100ed4:	d908      	bls.n	8100ee8 <__udivmoddi4+0x24c>
 8100ed6:	eb1c 0303 	adds.w	r3, ip, r3
 8100eda:	f100 36ff 	add.w	r6, r0, #4294967295
 8100ede:	d22c      	bcs.n	8100f3a <__udivmoddi4+0x29e>
 8100ee0:	4299      	cmp	r1, r3
 8100ee2:	d92a      	bls.n	8100f3a <__udivmoddi4+0x29e>
 8100ee4:	3802      	subs	r0, #2
 8100ee6:	4463      	add	r3, ip
 8100ee8:	1a5b      	subs	r3, r3, r1
 8100eea:	b2a4      	uxth	r4, r4
 8100eec:	fbb3 f1f8 	udiv	r1, r3, r8
 8100ef0:	fb08 3311 	mls	r3, r8, r1, r3
 8100ef4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8100ef8:	fb01 f307 	mul.w	r3, r1, r7
 8100efc:	42a3      	cmp	r3, r4
 8100efe:	d908      	bls.n	8100f12 <__udivmoddi4+0x276>
 8100f00:	eb1c 0404 	adds.w	r4, ip, r4
 8100f04:	f101 36ff 	add.w	r6, r1, #4294967295
 8100f08:	d213      	bcs.n	8100f32 <__udivmoddi4+0x296>
 8100f0a:	42a3      	cmp	r3, r4
 8100f0c:	d911      	bls.n	8100f32 <__udivmoddi4+0x296>
 8100f0e:	3902      	subs	r1, #2
 8100f10:	4464      	add	r4, ip
 8100f12:	1ae4      	subs	r4, r4, r3
 8100f14:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8100f18:	e739      	b.n	8100d8e <__udivmoddi4+0xf2>
 8100f1a:	4604      	mov	r4, r0
 8100f1c:	e6f0      	b.n	8100d00 <__udivmoddi4+0x64>
 8100f1e:	4608      	mov	r0, r1
 8100f20:	e706      	b.n	8100d30 <__udivmoddi4+0x94>
 8100f22:	45c8      	cmp	r8, r9
 8100f24:	d2ae      	bcs.n	8100e84 <__udivmoddi4+0x1e8>
 8100f26:	ebb9 0e02 	subs.w	lr, r9, r2
 8100f2a:	eb63 0c07 	sbc.w	ip, r3, r7
 8100f2e:	3801      	subs	r0, #1
 8100f30:	e7a8      	b.n	8100e84 <__udivmoddi4+0x1e8>
 8100f32:	4631      	mov	r1, r6
 8100f34:	e7ed      	b.n	8100f12 <__udivmoddi4+0x276>
 8100f36:	4603      	mov	r3, r0
 8100f38:	e799      	b.n	8100e6e <__udivmoddi4+0x1d2>
 8100f3a:	4630      	mov	r0, r6
 8100f3c:	e7d4      	b.n	8100ee8 <__udivmoddi4+0x24c>
 8100f3e:	46d6      	mov	lr, sl
 8100f40:	e77f      	b.n	8100e42 <__udivmoddi4+0x1a6>
 8100f42:	4463      	add	r3, ip
 8100f44:	3802      	subs	r0, #2
 8100f46:	e74d      	b.n	8100de4 <__udivmoddi4+0x148>
 8100f48:	4606      	mov	r6, r0
 8100f4a:	4623      	mov	r3, r4
 8100f4c:	4608      	mov	r0, r1
 8100f4e:	e70f      	b.n	8100d70 <__udivmoddi4+0xd4>
 8100f50:	3e02      	subs	r6, #2
 8100f52:	4463      	add	r3, ip
 8100f54:	e730      	b.n	8100db8 <__udivmoddi4+0x11c>
 8100f56:	bf00      	nop

08100f58 <__aeabi_idiv0>:
 8100f58:	4770      	bx	lr
 8100f5a:	bf00      	nop

08100f5c <_ZN10LogPrinterC1Ev>:

#include <stdarg.h> // Include this for va_list and related functions

extern osMutexId_t printMutexHandle;

LogPrinter::LogPrinter() : mutexHandle(printMutexHandle) {}
 8100f5c:	b480      	push	{r7}
 8100f5e:	b083      	sub	sp, #12
 8100f60:	af00      	add	r7, sp, #0
 8100f62:	6078      	str	r0, [r7, #4]
 8100f64:	4b05      	ldr	r3, [pc, #20]	@ (8100f7c <_ZN10LogPrinterC1Ev+0x20>)
 8100f66:	681a      	ldr	r2, [r3, #0]
 8100f68:	687b      	ldr	r3, [r7, #4]
 8100f6a:	601a      	str	r2, [r3, #0]
 8100f6c:	687b      	ldr	r3, [r7, #4]
 8100f6e:	4618      	mov	r0, r3
 8100f70:	370c      	adds	r7, #12
 8100f72:	46bd      	mov	sp, r7
 8100f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100f78:	4770      	bx	lr
 8100f7a:	bf00      	nop
 8100f7c:	100001e4 	.word	0x100001e4

08100f80 <_ZN10LogPrinter8instanceEv>:

LogPrinter& LogPrinter::instance()
{
 8100f80:	b580      	push	{r7, lr}
 8100f82:	af00      	add	r7, sp, #0
    static LogPrinter inst;
 8100f84:	4b10      	ldr	r3, [pc, #64]	@ (8100fc8 <_ZN10LogPrinter8instanceEv+0x48>)
 8100f86:	681b      	ldr	r3, [r3, #0]
 8100f88:	f3bf 8f5b 	dmb	ish
 8100f8c:	f003 0301 	and.w	r3, r3, #1
 8100f90:	2b00      	cmp	r3, #0
 8100f92:	bf0c      	ite	eq
 8100f94:	2301      	moveq	r3, #1
 8100f96:	2300      	movne	r3, #0
 8100f98:	b2db      	uxtb	r3, r3
 8100f9a:	2b00      	cmp	r3, #0
 8100f9c:	d010      	beq.n	8100fc0 <_ZN10LogPrinter8instanceEv+0x40>
 8100f9e:	480a      	ldr	r0, [pc, #40]	@ (8100fc8 <_ZN10LogPrinter8instanceEv+0x48>)
 8100fa0:	f024 fcf4 	bl	812598c <__cxa_guard_acquire>
 8100fa4:	4603      	mov	r3, r0
 8100fa6:	2b00      	cmp	r3, #0
 8100fa8:	bf14      	ite	ne
 8100faa:	2301      	movne	r3, #1
 8100fac:	2300      	moveq	r3, #0
 8100fae:	b2db      	uxtb	r3, r3
 8100fb0:	2b00      	cmp	r3, #0
 8100fb2:	d005      	beq.n	8100fc0 <_ZN10LogPrinter8instanceEv+0x40>
 8100fb4:	4805      	ldr	r0, [pc, #20]	@ (8100fcc <_ZN10LogPrinter8instanceEv+0x4c>)
 8100fb6:	f7ff ffd1 	bl	8100f5c <_ZN10LogPrinterC1Ev>
 8100fba:	4803      	ldr	r0, [pc, #12]	@ (8100fc8 <_ZN10LogPrinter8instanceEv+0x48>)
 8100fbc:	f024 fcf2 	bl	81259a4 <__cxa_guard_release>
    return inst;
 8100fc0:	4b02      	ldr	r3, [pc, #8]	@ (8100fcc <_ZN10LogPrinter8instanceEv+0x4c>)
}
 8100fc2:	4618      	mov	r0, r3
 8100fc4:	bd80      	pop	{r7, pc}
 8100fc6:	bf00      	nop
 8100fc8:	100000b0 	.word	0x100000b0
 8100fcc:	100000ac 	.word	0x100000ac

08100fd0 <_ZN10LogPrinter10printDebugEPKcz>:

void LogPrinter::printDebug(const char* format, ...)
{
 8100fd0:	b40e      	push	{r1, r2, r3}
 8100fd2:	b580      	push	{r7, lr}
 8100fd4:	b085      	sub	sp, #20
 8100fd6:	af00      	add	r7, sp, #0
 8100fd8:	6078      	str	r0, [r7, #4]
    osMutexAcquire(mutexHandle, portMAX_DELAY);
 8100fda:	687b      	ldr	r3, [r7, #4]
 8100fdc:	681b      	ldr	r3, [r3, #0]
 8100fde:	f04f 31ff 	mov.w	r1, #4294967295
 8100fe2:	4618      	mov	r0, r3
 8100fe4:	f014 fd38 	bl	8115a58 <osMutexAcquire>
    va_list args;
    va_start(args, format); // Initialize args
 8100fe8:	f107 0320 	add.w	r3, r7, #32
 8100fec:	60fb      	str	r3, [r7, #12]
    fprintf(stdout, "[LOG_DEBUG] ");
 8100fee:	4b15      	ldr	r3, [pc, #84]	@ (8101044 <_ZN10LogPrinter10printDebugEPKcz+0x74>)
 8100ff0:	681b      	ldr	r3, [r3, #0]
 8100ff2:	689b      	ldr	r3, [r3, #8]
 8100ff4:	220c      	movs	r2, #12
 8100ff6:	2101      	movs	r1, #1
 8100ff8:	4813      	ldr	r0, [pc, #76]	@ (8101048 <_ZN10LogPrinter10printDebugEPKcz+0x78>)
 8100ffa:	f025 fd2d 	bl	8126a58 <fwrite>
    vfprintf(stdout, format, args); // Use vfprintf to handle variable arguments
 8100ffe:	4b11      	ldr	r3, [pc, #68]	@ (8101044 <_ZN10LogPrinter10printDebugEPKcz+0x74>)
 8101000:	681b      	ldr	r3, [r3, #0]
 8101002:	689b      	ldr	r3, [r3, #8]
 8101004:	68fa      	ldr	r2, [r7, #12]
 8101006:	69f9      	ldr	r1, [r7, #28]
 8101008:	4618      	mov	r0, r3
 810100a:	f025 f9bf 	bl	812638c <vfiprintf>
    fprintf(stdout, "\r\n");
 810100e:	4b0d      	ldr	r3, [pc, #52]	@ (8101044 <_ZN10LogPrinter10printDebugEPKcz+0x74>)
 8101010:	681b      	ldr	r3, [r3, #0]
 8101012:	689b      	ldr	r3, [r3, #8]
 8101014:	2202      	movs	r2, #2
 8101016:	2101      	movs	r1, #1
 8101018:	480c      	ldr	r0, [pc, #48]	@ (810104c <_ZN10LogPrinter10printDebugEPKcz+0x7c>)
 810101a:	f025 fd1d 	bl	8126a58 <fwrite>
    fflush(stdout);
 810101e:	4b09      	ldr	r3, [pc, #36]	@ (8101044 <_ZN10LogPrinter10printDebugEPKcz+0x74>)
 8101020:	681b      	ldr	r3, [r3, #0]
 8101022:	689b      	ldr	r3, [r3, #8]
 8101024:	4618      	mov	r0, r3
 8101026:	f025 fbf5 	bl	8126814 <fflush>
    va_end(args); // Clean up the va_list
    osMutexRelease(mutexHandle);
 810102a:	687b      	ldr	r3, [r7, #4]
 810102c:	681b      	ldr	r3, [r3, #0]
 810102e:	4618      	mov	r0, r3
 8101030:	f014 fd5d 	bl	8115aee <osMutexRelease>
}
 8101034:	bf00      	nop
 8101036:	3714      	adds	r7, #20
 8101038:	46bd      	mov	sp, r7
 810103a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 810103e:	b003      	add	sp, #12
 8101040:	4770      	bx	lr
 8101042:	bf00      	nop
 8101044:	10000040 	.word	0x10000040
 8101048:	0812716c 	.word	0x0812716c
 810104c:	0812717c 	.word	0x0812717c

08101050 <_ZN10LogPrinter9printUARTEPKcz>:

void LogPrinter::printUART(const char* format, ...)
{
 8101050:	b40e      	push	{r1, r2, r3}
 8101052:	b580      	push	{r7, lr}
 8101054:	b085      	sub	sp, #20
 8101056:	af00      	add	r7, sp, #0
 8101058:	6078      	str	r0, [r7, #4]
    osMutexAcquire(mutexHandle, portMAX_DELAY);
 810105a:	687b      	ldr	r3, [r7, #4]
 810105c:	681b      	ldr	r3, [r3, #0]
 810105e:	f04f 31ff 	mov.w	r1, #4294967295
 8101062:	4618      	mov	r0, r3
 8101064:	f014 fcf8 	bl	8115a58 <osMutexAcquire>
    va_list args;
    va_start(args, format); // Initialize args
 8101068:	f107 0320 	add.w	r3, r7, #32
 810106c:	60fb      	str	r3, [r7, #12]
    fprintf(stdout, "[UART_DATA] ");
 810106e:	4b15      	ldr	r3, [pc, #84]	@ (81010c4 <_ZN10LogPrinter9printUARTEPKcz+0x74>)
 8101070:	681b      	ldr	r3, [r3, #0]
 8101072:	689b      	ldr	r3, [r3, #8]
 8101074:	220c      	movs	r2, #12
 8101076:	2101      	movs	r1, #1
 8101078:	4813      	ldr	r0, [pc, #76]	@ (81010c8 <_ZN10LogPrinter9printUARTEPKcz+0x78>)
 810107a:	f025 fced 	bl	8126a58 <fwrite>
    vfprintf(stdout, format, args); // Use vfprintf to handle variable arguments
 810107e:	4b11      	ldr	r3, [pc, #68]	@ (81010c4 <_ZN10LogPrinter9printUARTEPKcz+0x74>)
 8101080:	681b      	ldr	r3, [r3, #0]
 8101082:	689b      	ldr	r3, [r3, #8]
 8101084:	68fa      	ldr	r2, [r7, #12]
 8101086:	69f9      	ldr	r1, [r7, #28]
 8101088:	4618      	mov	r0, r3
 810108a:	f025 f97f 	bl	812638c <vfiprintf>
    fprintf(stdout, "\r\n");
 810108e:	4b0d      	ldr	r3, [pc, #52]	@ (81010c4 <_ZN10LogPrinter9printUARTEPKcz+0x74>)
 8101090:	681b      	ldr	r3, [r3, #0]
 8101092:	689b      	ldr	r3, [r3, #8]
 8101094:	2202      	movs	r2, #2
 8101096:	2101      	movs	r1, #1
 8101098:	480c      	ldr	r0, [pc, #48]	@ (81010cc <_ZN10LogPrinter9printUARTEPKcz+0x7c>)
 810109a:	f025 fcdd 	bl	8126a58 <fwrite>
    fflush(stdout);
 810109e:	4b09      	ldr	r3, [pc, #36]	@ (81010c4 <_ZN10LogPrinter9printUARTEPKcz+0x74>)
 81010a0:	681b      	ldr	r3, [r3, #0]
 81010a2:	689b      	ldr	r3, [r3, #8]
 81010a4:	4618      	mov	r0, r3
 81010a6:	f025 fbb5 	bl	8126814 <fflush>
    va_end(args); // Clean up the va_list
    osMutexRelease(mutexHandle);
 81010aa:	687b      	ldr	r3, [r7, #4]
 81010ac:	681b      	ldr	r3, [r3, #0]
 81010ae:	4618      	mov	r0, r3
 81010b0:	f014 fd1d 	bl	8115aee <osMutexRelease>
}
 81010b4:	bf00      	nop
 81010b6:	3714      	adds	r7, #20
 81010b8:	46bd      	mov	sp, r7
 81010ba:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 81010be:	b003      	add	sp, #12
 81010c0:	4770      	bx	lr
 81010c2:	bf00      	nop
 81010c4:	10000040 	.word	0x10000040
 81010c8:	08127180 	.word	0x08127180
 81010cc:	0812717c 	.word	0x0812717c

081010d0 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 81010d0:	b580      	push	{r7, lr}
 81010d2:	b082      	sub	sp, #8
 81010d4:	af00      	add	r7, sp, #0
 81010d6:	6078      	str	r0, [r7, #4]
    if((SemMask &  __HAL_HSEM_SEMID_TO_MASK(HSEM_RX_ID))!= 0)
 81010d8:	687b      	ldr	r3, [r7, #4]
 81010da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 81010de:	2b00      	cmp	r3, #0
 81010e0:	d005      	beq.n	81010ee <HAL_HSEM_FreeCallback+0x1e>
    {
        /* Re-Activate HSEM notification */
        HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_RX_ID));
 81010e2:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 81010e6:	f010 f87b 	bl	81111e0 <HAL_HSEM_ActivateNotification>
        /* New message received */
        prvCoreInterruptHandler();
 81010ea:	f000 f845 	bl	8101178 <prvCoreInterruptHandler>
    }

    if((SemMask & __HAL_HSEM_SEMID_TO_MASK(HSEM_TX_WAKEUP)) !=0)
 81010ee:	687b      	ldr	r3, [r7, #4]
 81010f0:	2b00      	cmp	r3, #0
 81010f2:	da05      	bge.n	8101100 <HAL_HSEM_FreeCallback+0x30>
    {
        /* Re-Activate HSEM notification */
        HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_TX_WAKEUP));
 81010f4:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 81010f8:	f010 f872 	bl	81111e0 <HAL_HSEM_ActivateNotification>
        /* TX queue is empty => wake-up task trying to send a message */
        prvCoreWakeupInterruptHandler();
 81010fc:	f000 f860 	bl	81011c0 <prvCoreWakeupInterruptHandler>
    }
}
 8101100:	bf00      	nop
 8101102:	3708      	adds	r7, #8
 8101104:	46bd      	mov	sp, r7
 8101106:	bd80      	pop	{r7, pc}

08101108 <ipc_init>:

int ipc_init(void)
{
 8101108:	b580      	push	{r7, lr}
 810110a:	b082      	sub	sp, #8
 810110c:	af02      	add	r7, sp, #8
#ifdef CORE_CM7
	memset((void*)(&shared_ram.cm7_to_cm4_buffer), 0, CM7_TO_CM4_BUFFER_SIZE);
	memset((void*)(&shared_ram.cm4_to_cm7_buffer), 0, CM4_TO_CM7_BUFFER_SIZE);
#endif
    shared_ram.cm7_to_cm4_handle = xMessageBufferCreateStatic(CM7_TO_CM4_BUFFER_SIZE, (uint8_t*)shared_ram.cm7_to_cm4_buffer,(StaticMessageBuffer_t*) &shared_ram.cm7_to_cm4_xmsg);
 810110e:	4b0e      	ldr	r3, [pc, #56]	@ (8101148 <ipc_init+0x40>)
 8101110:	9300      	str	r3, [sp, #0]
 8101112:	4b0e      	ldr	r3, [pc, #56]	@ (810114c <ipc_init+0x44>)
 8101114:	2201      	movs	r2, #1
 8101116:	2100      	movs	r1, #0
 8101118:	f640 3054 	movw	r0, #2900	@ 0xb54
 810111c:	f016 fd82 	bl	8117c24 <xStreamBufferGenericCreateStatic>
 8101120:	4603      	mov	r3, r0
 8101122:	4a0b      	ldr	r2, [pc, #44]	@ (8101150 <ipc_init+0x48>)
 8101124:	6013      	str	r3, [r2, #0]
    shared_ram.cm4_to_cm7_handle = xMessageBufferCreateStatic(CM4_TO_CM7_BUFFER_SIZE, (uint8_t*)shared_ram.cm4_to_cm7_buffer,(StaticMessageBuffer_t*) &shared_ram.cm4_to_cm7_xmsg);
 8101126:	4b0b      	ldr	r3, [pc, #44]	@ (8101154 <ipc_init+0x4c>)
 8101128:	9300      	str	r3, [sp, #0]
 810112a:	4b0b      	ldr	r3, [pc, #44]	@ (8101158 <ipc_init+0x50>)
 810112c:	2201      	movs	r2, #1
 810112e:	2100      	movs	r1, #0
 8101130:	f640 3054 	movw	r0, #2900	@ 0xb54
 8101134:	f016 fd76 	bl	8117c24 <xStreamBufferGenericCreateStatic>
 8101138:	4603      	mov	r3, r0
 810113a:	4a05      	ldr	r2, [pc, #20]	@ (8101150 <ipc_init+0x48>)
 810113c:	6053      	str	r3, [r2, #4]

    return 0;
 810113e:	2300      	movs	r3, #0
}
 8101140:	4618      	mov	r0, r3
 8101142:	46bd      	mov	sp, r7
 8101144:	bd80      	pop	{r7, pc}
 8101146:	bf00      	nop
 8101148:	38000008 	.word	0x38000008
 810114c:	38000050 	.word	0x38000050
 8101150:	38000000 	.word	0x38000000
 8101154:	3800002c 	.word	0x3800002c
 8101158:	38000ba4 	.word	0x38000ba4

0810115c <ipc_start>:

int ipc_start(void){
 810115c:	b580      	push	{r7, lr}
 810115e:	af00      	add	r7, sp, #0
    HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_RX_ID));
 8101160:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 8101164:	f010 f83c 	bl	81111e0 <HAL_HSEM_ActivateNotification>
    HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_TX_WAKEUP));
 8101168:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 810116c:	f010 f838 	bl	81111e0 <HAL_HSEM_ActivateNotification>
    return 0;
 8101170:	2300      	movs	r3, #0
}
 8101172:	4618      	mov	r0, r3
 8101174:	bd80      	pop	{r7, pc}
	...

08101178 <prvCoreInterruptHandler>:

static void prvCoreInterruptHandler(void)
{
 8101178:	b580      	push	{r7, lr}
 810117a:	b082      	sub	sp, #8
 810117c:	af00      	add	r7, sp, #0
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 810117e:	2300      	movs	r3, #0
 8101180:	607b      	str	r3, [r7, #4]

    if (!xrx_data_buf)
 8101182:	4b0d      	ldr	r3, [pc, #52]	@ (81011b8 <prvCoreInterruptHandler+0x40>)
 8101184:	681b      	ldr	r3, [r3, #0]
 8101186:	2b00      	cmp	r3, #0
 8101188:	d012      	beq.n	81011b0 <prvCoreInterruptHandler+0x38>
    {
    	return;
    }

	xMessageBufferSendCompletedFromISR(xrx_data_buf, &xHigherPriorityTaskWoken);
 810118a:	4b0b      	ldr	r3, [pc, #44]	@ (81011b8 <prvCoreInterruptHandler+0x40>)
 810118c:	681b      	ldr	r3, [r3, #0]
 810118e:	1d3a      	adds	r2, r7, #4
 8101190:	4611      	mov	r1, r2
 8101192:	4618      	mov	r0, r3
 8101194:	f016 ffa2 	bl	81180dc <xStreamBufferSendCompletedFromISR>

    /* Normal FreeRTOS yield from interrupt semantics, where
       xHigherPriorityTaskWoken is initialzed to pdFALSE and will then get set
       to pdTRUE if the interrupt safe API unblocks a task that has a priority
       above that of the currently executing task. */
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8101198:	687b      	ldr	r3, [r7, #4]
 810119a:	2b00      	cmp	r3, #0
 810119c:	d009      	beq.n	81011b2 <prvCoreInterruptHandler+0x3a>
 810119e:	4b07      	ldr	r3, [pc, #28]	@ (81011bc <prvCoreInterruptHandler+0x44>)
 81011a0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 81011a4:	601a      	str	r2, [r3, #0]
 81011a6:	f3bf 8f4f 	dsb	sy
 81011aa:	f3bf 8f6f 	isb	sy
 81011ae:	e000      	b.n	81011b2 <prvCoreInterruptHandler+0x3a>
    	return;
 81011b0:	bf00      	nop
}
 81011b2:	3708      	adds	r7, #8
 81011b4:	46bd      	mov	sp, r7
 81011b6:	bd80      	pop	{r7, pc}
 81011b8:	38000000 	.word	0x38000000
 81011bc:	e000ed04 	.word	0xe000ed04

081011c0 <prvCoreWakeupInterruptHandler>:

static void prvCoreWakeupInterruptHandler(void)
{
 81011c0:	b580      	push	{r7, lr}
 81011c2:	b082      	sub	sp, #8
 81011c4:	af00      	add	r7, sp, #0
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 81011c6:	2300      	movs	r3, #0
 81011c8:	607b      	str	r3, [r7, #4]

    if (!xtx_data_buf)
 81011ca:	4b0d      	ldr	r3, [pc, #52]	@ (8101200 <prvCoreWakeupInterruptHandler+0x40>)
 81011cc:	685b      	ldr	r3, [r3, #4]
 81011ce:	2b00      	cmp	r3, #0
 81011d0:	d012      	beq.n	81011f8 <prvCoreWakeupInterruptHandler+0x38>
    {
    	return;
    }

	xMessageBufferReceiveCompletedFromISR(xtx_data_buf, &xHigherPriorityTaskWoken);
 81011d2:	4b0b      	ldr	r3, [pc, #44]	@ (8101200 <prvCoreWakeupInterruptHandler+0x40>)
 81011d4:	685b      	ldr	r3, [r3, #4]
 81011d6:	1d3a      	adds	r2, r7, #4
 81011d8:	4611      	mov	r1, r2
 81011da:	4618      	mov	r0, r3
 81011dc:	f016 ffc2 	bl	8118164 <xStreamBufferReceiveCompletedFromISR>

    /* Normal FreeRTOS yield from interrupt semantics, where
       xHigherPriorityTaskWoken is initialzed to pdFALSE and will then get set
       to pdTRUE if the interrupt safe API unblocks a task that has a priority
       above that of the currently executing task. */
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 81011e0:	687b      	ldr	r3, [r7, #4]
 81011e2:	2b00      	cmp	r3, #0
 81011e4:	d009      	beq.n	81011fa <prvCoreWakeupInterruptHandler+0x3a>
 81011e6:	4b07      	ldr	r3, [pc, #28]	@ (8101204 <prvCoreWakeupInterruptHandler+0x44>)
 81011e8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 81011ec:	601a      	str	r2, [r3, #0]
 81011ee:	f3bf 8f4f 	dsb	sy
 81011f2:	f3bf 8f6f 	isb	sy
 81011f6:	e000      	b.n	81011fa <prvCoreWakeupInterruptHandler+0x3a>
    	return;
 81011f8:	bf00      	nop
}
 81011fa:	3708      	adds	r7, #8
 81011fc:	46bd      	mov	sp, r7
 81011fe:	bd80      	pop	{r7, pc}
 8101200:	38000000 	.word	0x38000000
 8101204:	e000ed04 	.word	0xe000ed04

08101208 <vGenerateRemoteInterrupt>:

void vGenerateRemoteInterrupt(void * xUpdatedMessageBuffer)
{
 8101208:	b580      	push	{r7, lr}
 810120a:	b084      	sub	sp, #16
 810120c:	af00      	add	r7, sp, #0
 810120e:	6078      	str	r0, [r7, #4]
    MessageBufferHandle_t xUpdatedBuffer =
 8101210:	687b      	ldr	r3, [r7, #4]
 8101212:	60fb      	str	r3, [r7, #12]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8101214:	f3bf 8f4f 	dsb	sy
}
 8101218:	bf00      	nop
        (MessageBufferHandle_t)xUpdatedMessageBuffer;

	__DSB();
    if (xUpdatedBuffer == xtx_data_buf)
 810121a:	4b12      	ldr	r3, [pc, #72]	@ (8101264 <vGenerateRemoteInterrupt+0x5c>)
 810121c:	685b      	ldr	r3, [r3, #4]
 810121e:	68fa      	ldr	r2, [r7, #12]
 8101220:	429a      	cmp	r2, r3
 8101222:	d10b      	bne.n	810123c <vGenerateRemoteInterrupt+0x34>
    {

        /* Take the HW Semaphore with Process1 ID  */
        if(HAL_HSEM_Take(HSEM_TX_ID, HSEM_PROCESS) == HAL_OK)
 8101224:	211b      	movs	r1, #27
 8101226:	201d      	movs	r0, #29
 8101228:	f00f ffa2 	bl	8111170 <HAL_HSEM_Take>
 810122c:	4603      	mov	r3, r0
 810122e:	2b00      	cmp	r3, #0
 8101230:	d114      	bne.n	810125c <vGenerateRemoteInterrupt+0x54>
        {
            /* Release the HW Semaphore */
            HAL_HSEM_Release(HSEM_TX_ID, HSEM_PROCESS);
 8101232:	211b      	movs	r1, #27
 8101234:	201d      	movs	r0, #29
 8101236:	f00f ffbf 	bl	81111b8 <HAL_HSEM_Release>
		{
			/* Release the HW Semaphore */
			HAL_HSEM_Release(HSEM_RX_WAKEUP, HSEM_PROCESS);
		}
    }
}
 810123a:	e00f      	b.n	810125c <vGenerateRemoteInterrupt+0x54>
    else if(xUpdatedBuffer == xrx_data_buf){
 810123c:	4b09      	ldr	r3, [pc, #36]	@ (8101264 <vGenerateRemoteInterrupt+0x5c>)
 810123e:	681b      	ldr	r3, [r3, #0]
 8101240:	68fa      	ldr	r2, [r7, #12]
 8101242:	429a      	cmp	r2, r3
 8101244:	d10a      	bne.n	810125c <vGenerateRemoteInterrupt+0x54>
		if(HAL_HSEM_Take(HSEM_RX_WAKEUP, HSEM_PROCESS) == HAL_OK)
 8101246:	211b      	movs	r1, #27
 8101248:	201e      	movs	r0, #30
 810124a:	f00f ff91 	bl	8111170 <HAL_HSEM_Take>
 810124e:	4603      	mov	r3, r0
 8101250:	2b00      	cmp	r3, #0
 8101252:	d103      	bne.n	810125c <vGenerateRemoteInterrupt+0x54>
			HAL_HSEM_Release(HSEM_RX_WAKEUP, HSEM_PROCESS);
 8101254:	211b      	movs	r1, #27
 8101256:	201e      	movs	r0, #30
 8101258:	f00f ffae 	bl	81111b8 <HAL_HSEM_Release>
}
 810125c:	bf00      	nop
 810125e:	3710      	adds	r7, #16
 8101260:	46bd      	mov	sp, r7
 8101262:	bd80      	pop	{r7, pc}
 8101264:	38000000 	.word	0x38000000

08101268 <ipc_sendmsg>:

size_t ipc_sendmsg(ipc_msg* msg, uint32_t size, int32_t timeout)
{
 8101268:	b580      	push	{r7, lr}
 810126a:	b086      	sub	sp, #24
 810126c:	af00      	add	r7, sp, #0
 810126e:	60f8      	str	r0, [r7, #12]
 8101270:	60b9      	str	r1, [r7, #8]
 8101272:	607a      	str	r2, [r7, #4]
	size_t len;

    if(xtx_data_buf == 0)
 8101274:	4b0f      	ldr	r3, [pc, #60]	@ (81012b4 <ipc_sendmsg+0x4c>)
 8101276:	685b      	ldr	r3, [r3, #4]
 8101278:	2b00      	cmp	r3, #0
 810127a:	d101      	bne.n	8101280 <ipc_sendmsg+0x18>
      return 0;
 810127c:	2300      	movs	r3, #0
 810127e:	e015      	b.n	81012ac <ipc_sendmsg+0x44>

    if(timeout < 0)
 8101280:	687b      	ldr	r3, [r7, #4]
 8101282:	2b00      	cmp	r3, #0
 8101284:	da09      	bge.n	810129a <ipc_sendmsg+0x32>
    	len = xMessageBufferSend(xtx_data_buf, msg, size, portMAX_DELAY);
 8101286:	4b0b      	ldr	r3, [pc, #44]	@ (81012b4 <ipc_sendmsg+0x4c>)
 8101288:	6858      	ldr	r0, [r3, #4]
 810128a:	f04f 33ff 	mov.w	r3, #4294967295
 810128e:	68ba      	ldr	r2, [r7, #8]
 8101290:	68f9      	ldr	r1, [r7, #12]
 8101292:	f016 fd81 	bl	8117d98 <xStreamBufferSend>
 8101296:	6178      	str	r0, [r7, #20]
 8101298:	e007      	b.n	81012aa <ipc_sendmsg+0x42>
    else
    	len = xMessageBufferSend(xtx_data_buf, msg, size, (TickType_t)timeout);
 810129a:	4b06      	ldr	r3, [pc, #24]	@ (81012b4 <ipc_sendmsg+0x4c>)
 810129c:	6858      	ldr	r0, [r3, #4]
 810129e:	687b      	ldr	r3, [r7, #4]
 81012a0:	68ba      	ldr	r2, [r7, #8]
 81012a2:	68f9      	ldr	r1, [r7, #12]
 81012a4:	f016 fd78 	bl	8117d98 <xStreamBufferSend>
 81012a8:	6178      	str	r0, [r7, #20]

    return len;
 81012aa:	697b      	ldr	r3, [r7, #20]
}
 81012ac:	4618      	mov	r0, r3
 81012ae:	3718      	adds	r7, #24
 81012b0:	46bd      	mov	sp, r7
 81012b2:	bd80      	pop	{r7, pc}
 81012b4:	38000000 	.word	0x38000000

081012b8 <ipc_recvmsg>:

size_t ipc_recvmsg(ipc_msg* msg, uint32_t size, int32_t timeout)
{
 81012b8:	b580      	push	{r7, lr}
 81012ba:	b086      	sub	sp, #24
 81012bc:	af00      	add	r7, sp, #0
 81012be:	60f8      	str	r0, [r7, #12]
 81012c0:	60b9      	str	r1, [r7, #8]
 81012c2:	607a      	str	r2, [r7, #4]
    size_t len;

    if (timeout < 0)
 81012c4:	687b      	ldr	r3, [r7, #4]
 81012c6:	2b00      	cmp	r3, #0
 81012c8:	da09      	bge.n	81012de <ipc_recvmsg+0x26>
        len = xMessageBufferReceive(xrx_data_buf, msg, size, portMAX_DELAY);
 81012ca:	4b0b      	ldr	r3, [pc, #44]	@ (81012f8 <ipc_recvmsg+0x40>)
 81012cc:	6818      	ldr	r0, [r3, #0]
 81012ce:	f04f 33ff 	mov.w	r3, #4294967295
 81012d2:	68ba      	ldr	r2, [r7, #8]
 81012d4:	68f9      	ldr	r1, [r7, #12]
 81012d6:	f016 fe46 	bl	8117f66 <xStreamBufferReceive>
 81012da:	6178      	str	r0, [r7, #20]
 81012dc:	e007      	b.n	81012ee <ipc_recvmsg+0x36>
    else
        len = xMessageBufferReceive(xrx_data_buf, msg, size, (TickType_t)timeout);
 81012de:	4b06      	ldr	r3, [pc, #24]	@ (81012f8 <ipc_recvmsg+0x40>)
 81012e0:	6818      	ldr	r0, [r3, #0]
 81012e2:	687b      	ldr	r3, [r7, #4]
 81012e4:	68ba      	ldr	r2, [r7, #8]
 81012e6:	68f9      	ldr	r1, [r7, #12]
 81012e8:	f016 fe3d 	bl	8117f66 <xStreamBufferReceive>
 81012ec:	6178      	str	r0, [r7, #20]

    return len;
 81012ee:	697b      	ldr	r3, [r7, #20]
}
 81012f0:	4618      	mov	r0, r3
 81012f2:	3718      	adds	r7, #24
 81012f4:	46bd      	mov	sp, r7
 81012f6:	bd80      	pop	{r7, pc}
 81012f8:	38000000 	.word	0x38000000

081012fc <__is_constant_evaluated>:
  // This can be used without checking if the compiler supports the feature.
  // The macro _GLIBCXX_HAVE_IS_CONSTANT_EVALUATED can be used to check if
  // the compiler support is present to make this function work as expected.
  _GLIBCXX_CONSTEXPR inline bool
  __is_constant_evaluated() _GLIBCXX_NOEXCEPT
  {
 81012fc:	b480      	push	{r7}
 81012fe:	af00      	add	r7, sp, #0
#if __cpp_if_consteval >= 202106L
# define _GLIBCXX_HAVE_IS_CONSTANT_EVALUATED 1
    if consteval { return true; } else { return false; }
#elif __cplusplus >= 201103L && __has_builtin(__builtin_is_constant_evaluated)
# define _GLIBCXX_HAVE_IS_CONSTANT_EVALUATED 1
    return __builtin_is_constant_evaluated();
 8101300:	2300      	movs	r3, #0
#else
    return false;
#endif
  }
 8101302:	4618      	mov	r0, r3
 8101304:	46bd      	mov	sp, r7
 8101306:	f85d 7b04 	ldr.w	r7, [sp], #4
 810130a:	4770      	bx	lr

0810130c <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 810130c:	b480      	push	{r7}
 810130e:	b083      	sub	sp, #12
 8101310:	af00      	add	r7, sp, #0
 8101312:	6078      	str	r0, [r7, #4]
 8101314:	6039      	str	r1, [r7, #0]
 8101316:	683b      	ldr	r3, [r7, #0]
 8101318:	4618      	mov	r0, r3
 810131a:	370c      	adds	r7, #12
 810131c:	46bd      	mov	sp, r7
 810131e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101322:	4770      	bx	lr

08101324 <_ZNKSt4hashIaEclEa>:

  /// Explicit specialization for char.
  _Cxx_hashtable_define_trivial_hash(char)

  /// Explicit specialization for signed char.
  _Cxx_hashtable_define_trivial_hash(signed char)
 8101324:	b480      	push	{r7}
 8101326:	b083      	sub	sp, #12
 8101328:	af00      	add	r7, sp, #0
 810132a:	6078      	str	r0, [r7, #4]
 810132c:	460b      	mov	r3, r1
 810132e:	70fb      	strb	r3, [r7, #3]
 8101330:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8101334:	4618      	mov	r0, r3
 8101336:	370c      	adds	r7, #12
 8101338:	46bd      	mov	sp, r7
 810133a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810133e:	4770      	bx	lr

08101340 <_ZNSt8__detail15_Hash_node_baseC1Ev>:
   */
  struct _Hash_node_base
  {
    _Hash_node_base* _M_nxt;

    _Hash_node_base() noexcept : _M_nxt() { }
 8101340:	b480      	push	{r7}
 8101342:	b083      	sub	sp, #12
 8101344:	af00      	add	r7, sp, #0
 8101346:	6078      	str	r0, [r7, #4]
 8101348:	687b      	ldr	r3, [r7, #4]
 810134a:	2200      	movs	r2, #0
 810134c:	601a      	str	r2, [r3, #0]
 810134e:	687b      	ldr	r3, [r7, #4]
 8101350:	4618      	mov	r0, r3
 8101352:	370c      	adds	r7, #12
 8101354:	46bd      	mov	sp, r7
 8101356:	f85d 7b04 	ldr.w	r7, [sp], #4
 810135a:	4770      	bx	lr

0810135c <_ZNKSt8__detail18_Mod_range_hashingclEjj>:
    typedef std::size_t first_argument_type;
    typedef std::size_t second_argument_type;
    typedef std::size_t result_type;

    result_type
    operator()(first_argument_type __num,
 810135c:	b480      	push	{r7}
 810135e:	b085      	sub	sp, #20
 8101360:	af00      	add	r7, sp, #0
 8101362:	60f8      	str	r0, [r7, #12]
 8101364:	60b9      	str	r1, [r7, #8]
 8101366:	607a      	str	r2, [r7, #4]
	       second_argument_type __den) const noexcept
    { return __num % __den; }
 8101368:	68bb      	ldr	r3, [r7, #8]
 810136a:	687a      	ldr	r2, [r7, #4]
 810136c:	fbb3 f2f2 	udiv	r2, r3, r2
 8101370:	6879      	ldr	r1, [r7, #4]
 8101372:	fb01 f202 	mul.w	r2, r1, r2
 8101376:	1a9b      	subs	r3, r3, r2
 8101378:	4618      	mov	r0, r3
 810137a:	3714      	adds	r7, #20
 810137c:	46bd      	mov	sp, r7
 810137e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101382:	4770      	bx	lr

08101384 <_ZNSt8__detail20_Prime_rehash_policyC1Ef>:
  /// smallest prime that keeps the load factor small enough.
  struct _Prime_rehash_policy
  {
    using __has_load_factor = true_type;

    _Prime_rehash_policy(float __z = 1.0) noexcept
 8101384:	b480      	push	{r7}
 8101386:	b083      	sub	sp, #12
 8101388:	af00      	add	r7, sp, #0
 810138a:	6078      	str	r0, [r7, #4]
 810138c:	ed87 0a00 	vstr	s0, [r7]
    : _M_max_load_factor(__z), _M_next_resize(0) { }
 8101390:	687b      	ldr	r3, [r7, #4]
 8101392:	683a      	ldr	r2, [r7, #0]
 8101394:	601a      	str	r2, [r3, #0]
 8101396:	687b      	ldr	r3, [r7, #4]
 8101398:	2200      	movs	r2, #0
 810139a:	605a      	str	r2, [r3, #4]
 810139c:	687b      	ldr	r3, [r7, #4]
 810139e:	4618      	mov	r0, r3
 81013a0:	370c      	adds	r7, #12
 81013a2:	46bd      	mov	sp, r7
 81013a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81013a8:	4770      	bx	lr

081013aa <_ZNKSt8__detail20_Prime_rehash_policy8_M_stateEv>:
		   std::size_t __n_ins) const;

    typedef std::size_t _State;

    _State
    _M_state() const
 81013aa:	b480      	push	{r7}
 81013ac:	b083      	sub	sp, #12
 81013ae:	af00      	add	r7, sp, #0
 81013b0:	6078      	str	r0, [r7, #4]
    { return _M_next_resize; }
 81013b2:	687b      	ldr	r3, [r7, #4]
 81013b4:	685b      	ldr	r3, [r3, #4]
 81013b6:	4618      	mov	r0, r3
 81013b8:	370c      	adds	r7, #12
 81013ba:	46bd      	mov	sp, r7
 81013bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 81013c0:	4770      	bx	lr

081013c2 <_ZNSt4pairIKN7APIDoIP12EDoIPRequestES_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEEC1ERS2_RKS8_>:

    public:

      /// Constructor accepting lvalues of `first_type` and `second_type`
      constexpr explicit(!_S_convertible<const _T1&, const _T2&>())
      pair(const _T1& __x, const _T2& __y)
 81013c2:	b480      	push	{r7}
 81013c4:	b085      	sub	sp, #20
 81013c6:	af00      	add	r7, sp, #0
 81013c8:	60f8      	str	r0, [r7, #12]
 81013ca:	60b9      	str	r1, [r7, #8]
 81013cc:	607a      	str	r2, [r7, #4]
      noexcept(_S_nothrow_constructible<const _T1&, const _T2&>())
      requires (_S_constructible<const _T1&, const _T2&>())
      : first(__x), second(__y)
 81013ce:	68bb      	ldr	r3, [r7, #8]
 81013d0:	f993 2000 	ldrsb.w	r2, [r3]
 81013d4:	68fb      	ldr	r3, [r7, #12]
 81013d6:	701a      	strb	r2, [r3, #0]
 81013d8:	68fb      	ldr	r3, [r7, #12]
 81013da:	687a      	ldr	r2, [r7, #4]
 81013dc:	3304      	adds	r3, #4
 81013de:	ca07      	ldmia	r2, {r0, r1, r2}
 81013e0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
      { }
 81013e4:	68fb      	ldr	r3, [r7, #12]
 81013e6:	4618      	mov	r0, r3
 81013e8:	3714      	adds	r7, #20
 81013ea:	46bd      	mov	sp, r7
 81013ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 81013f0:	4770      	bx	lr
	...

081013f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 81013f4:	b580      	push	{r7, lr}
 81013f6:	b082      	sub	sp, #8
 81013f8:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN 1 */
    /* USER CODE END 1 */

    /* USER CODE BEGIN Boot_Mode_Sequence_1 */
    /*HW semaphore Clock enable*/
    __HAL_RCC_HSEM_CLK_ENABLE();
 81013fa:	4b34      	ldr	r3, [pc, #208]	@ (81014cc <main+0xd8>)
 81013fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101400:	4a32      	ldr	r2, [pc, #200]	@ (81014cc <main+0xd8>)
 8101402:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8101406:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 810140a:	4b30      	ldr	r3, [pc, #192]	@ (81014cc <main+0xd8>)
 810140c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101410:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8101414:	607b      	str	r3, [r7, #4]
 8101416:	687b      	ldr	r3, [r7, #4]
    /* Activate HSEM notification for Cortex-M4*/
    HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8101418:	2001      	movs	r0, #1
 810141a:	f00f fee1 	bl	81111e0 <HAL_HSEM_ActivateNotification>
    /*
    Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
    perform system initialization (system clock config, external memory configuration.. )
    */
    HAL_PWREx_ClearPendingEvent();
 810141e:	f010 fc7b 	bl	8111d18 <HAL_PWREx_ClearPendingEvent>
    HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE, PWR_D2_DOMAIN);
 8101422:	2201      	movs	r2, #1
 8101424:	2102      	movs	r1, #2
 8101426:	2000      	movs	r0, #0
 8101428:	f010 fbfc 	bl	8111c24 <HAL_PWREx_EnterSTOPMode>
    /* Clear HSEM flag */
    __HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 810142c:	4b28      	ldr	r3, [pc, #160]	@ (81014d0 <main+0xdc>)
 810142e:	681b      	ldr	r3, [r3, #0]
 8101430:	091b      	lsrs	r3, r3, #4
 8101432:	f003 030f 	and.w	r3, r3, #15
 8101436:	2b07      	cmp	r3, #7
 8101438:	d108      	bne.n	810144c <main+0x58>
 810143a:	4b26      	ldr	r3, [pc, #152]	@ (81014d4 <main+0xe0>)
 810143c:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8101440:	4a24      	ldr	r2, [pc, #144]	@ (81014d4 <main+0xe0>)
 8101442:	f043 0301 	orr.w	r3, r3, #1
 8101446:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104
 810144a:	e007      	b.n	810145c <main+0x68>
 810144c:	4b21      	ldr	r3, [pc, #132]	@ (81014d4 <main+0xe0>)
 810144e:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8101452:	4a20      	ldr	r2, [pc, #128]	@ (81014d4 <main+0xe0>)
 8101454:	f043 0301 	orr.w	r3, r3, #1
 8101458:	f8c2 3114 	str.w	r3, [r2, #276]	@ 0x114

    /* USER CODE END Boot_Mode_Sequence_1 */
    /* MCU Configuration--------------------------------------------------------*/

    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 810145c:	f00d fcca 	bl	810edf4 <HAL_Init>
    /* USER CODE BEGIN SysInit */

    /* USER CODE END SysInit */

    /* Initialize all configured peripherals */
    MX_MDMA_Init();
 8101460:	f000 f904 	bl	810166c <_ZL12MX_MDMA_Initv>
    MX_GPIO_Init();
 8101464:	f000 f91c 	bl	81016a0 <_ZL12MX_GPIO_Initv>
    MX_I2C4_Init();
 8101468:	f000 f852 	bl	8101510 <_ZL12MX_I2C4_Initv>
    MX_USART1_UART_Init();
 810146c:	f000 f89e 	bl	81015ac <MX_USART1_UART_Init>
    /* USER CODE BEGIN 2 */
    ipc_init();
 8101470:	f7ff fe4a 	bl	8101108 <ipc_init>
    /* USER CODE END 2 */

    /* Init scheduler */
    osKernelInitialize();
 8101474:	f014 f95e 	bl	8115734 <osKernelInitialize>

    /* USER CODE BEGIN RTOS_MUTEX */
    /* add mutexes, ... */\
    printMutexHandle = osMutexNew(&printMutex_attributes);
 8101478:	4817      	ldr	r0, [pc, #92]	@ (81014d8 <main+0xe4>)
 810147a:	f014 fa67 	bl	811594c <osMutexNew>
 810147e:	4603      	mov	r3, r0
 8101480:	4a16      	ldr	r2, [pc, #88]	@ (81014dc <main+0xe8>)
 8101482:	6013      	str	r3, [r2, #0]
    /* add queues, ... */
    /* USER CODE END RTOS_QUEUES */

    /* Create the thread(s) */
    /* creation of Task_EDaemonN */
    Task_EDaemonNHandle = osThreadNew(StartTask_EDaemonN, NULL, &Task_EDaemonN_attributes);
 8101484:	4a16      	ldr	r2, [pc, #88]	@ (81014e0 <main+0xec>)
 8101486:	2100      	movs	r1, #0
 8101488:	4816      	ldr	r0, [pc, #88]	@ (81014e4 <main+0xf0>)
 810148a:	f014 f9b2 	bl	81157f2 <osThreadNew>
 810148e:	4603      	mov	r3, r0
 8101490:	4a15      	ldr	r2, [pc, #84]	@ (81014e8 <main+0xf4>)
 8101492:	6013      	str	r3, [r2, #0]

    /* creation of Task_EventMgrM4 */
    Task_EventMgrM4Handle = osThreadNew(StartTask_EventMgrM4, NULL, &Task_EventMgrM4_attributes);
 8101494:	4a15      	ldr	r2, [pc, #84]	@ (81014ec <main+0xf8>)
 8101496:	2100      	movs	r1, #0
 8101498:	4815      	ldr	r0, [pc, #84]	@ (81014f0 <main+0xfc>)
 810149a:	f014 f9aa 	bl	81157f2 <osThreadNew>
 810149e:	4603      	mov	r3, r0
 81014a0:	4a14      	ldr	r2, [pc, #80]	@ (81014f4 <main+0x100>)
 81014a2:	6013      	str	r3, [r2, #0]

    /* creation of Task_DPDaemon */
    Task_DPDaemonHandle = osThreadNew(StartTask_DoIPDaemonTask, NULL, &Task_DPDaemon_attributes);
 81014a4:	4a14      	ldr	r2, [pc, #80]	@ (81014f8 <main+0x104>)
 81014a6:	2100      	movs	r1, #0
 81014a8:	4814      	ldr	r0, [pc, #80]	@ (81014fc <main+0x108>)
 81014aa:	f014 f9a2 	bl	81157f2 <osThreadNew>
 81014ae:	4603      	mov	r3, r0
 81014b0:	4a13      	ldr	r2, [pc, #76]	@ (8101500 <main+0x10c>)
 81014b2:	6013      	str	r3, [r2, #0]

    /* creation of Task_CTemp */
    Task_CTempHandle = osThreadNew(StartTask_CTemp, NULL, &Task_CTemp_attributes);
 81014b4:	4a13      	ldr	r2, [pc, #76]	@ (8101504 <main+0x110>)
 81014b6:	2100      	movs	r1, #0
 81014b8:	4813      	ldr	r0, [pc, #76]	@ (8101508 <main+0x114>)
 81014ba:	f014 f99a 	bl	81157f2 <osThreadNew>
 81014be:	4603      	mov	r3, r0
 81014c0:	4a12      	ldr	r2, [pc, #72]	@ (810150c <main+0x118>)
 81014c2:	6013      	str	r3, [r2, #0]
    /* USER CODE BEGIN RTOS_EVENTS */
    /* add events, ... */
    /* USER CODE END RTOS_EVENTS */

    /* Start scheduler */
    osKernelStart();
 81014c4:	f014 f95a 	bl	811577c <osKernelStart>

    /* We should never get here as control is now taken by the scheduler */

    /* Infinite loop */
    /* USER CODE BEGIN WHILE */
    while (1)
 81014c8:	bf00      	nop
 81014ca:	e7fd      	b.n	81014c8 <main+0xd4>
 81014cc:	58024400 	.word	0x58024400
 81014d0:	e000ed00 	.word	0xe000ed00
 81014d4:	58026400 	.word	0x58026400
 81014d8:	0812ade0 	.word	0x0812ade0
 81014dc:	100001e4 	.word	0x100001e4
 81014e0:	0812ad50 	.word	0x0812ad50
 81014e4:	0810b2c3 	.word	0x0810b2c3
 81014e8:	100001d4 	.word	0x100001d4
 81014ec:	0812ad74 	.word	0x0812ad74
 81014f0:	08108cbd 	.word	0x08108cbd
 81014f4:	100001d8 	.word	0x100001d8
 81014f8:	0812ad98 	.word	0x0812ad98
 81014fc:	08107813 	.word	0x08107813
 8101500:	100001dc 	.word	0x100001dc
 8101504:	0812adbc 	.word	0x0812adbc
 8101508:	0810c5f9 	.word	0x0810c5f9
 810150c:	100001e0 	.word	0x100001e0

08101510 <_ZL12MX_I2C4_Initv>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 8101510:	b580      	push	{r7, lr}
 8101512:	af00      	add	r7, sp, #0
    /* USER CODE END I2C4_Init 0 */

    /* USER CODE BEGIN I2C4_Init 1 */

    /* USER CODE END I2C4_Init 1 */
    hi2c4.Instance = I2C4;
 8101514:	4b22      	ldr	r3, [pc, #136]	@ (81015a0 <_ZL12MX_I2C4_Initv+0x90>)
 8101516:	4a23      	ldr	r2, [pc, #140]	@ (81015a4 <_ZL12MX_I2C4_Initv+0x94>)
 8101518:	601a      	str	r2, [r3, #0]
    hi2c4.Init.Timing = 0x10C0ECFF;
 810151a:	4b21      	ldr	r3, [pc, #132]	@ (81015a0 <_ZL12MX_I2C4_Initv+0x90>)
 810151c:	4a22      	ldr	r2, [pc, #136]	@ (81015a8 <_ZL12MX_I2C4_Initv+0x98>)
 810151e:	605a      	str	r2, [r3, #4]
    hi2c4.Init.OwnAddress1 = 0;
 8101520:	4b1f      	ldr	r3, [pc, #124]	@ (81015a0 <_ZL12MX_I2C4_Initv+0x90>)
 8101522:	2200      	movs	r2, #0
 8101524:	609a      	str	r2, [r3, #8]
    hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8101526:	4b1e      	ldr	r3, [pc, #120]	@ (81015a0 <_ZL12MX_I2C4_Initv+0x90>)
 8101528:	2201      	movs	r2, #1
 810152a:	60da      	str	r2, [r3, #12]
    hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 810152c:	4b1c      	ldr	r3, [pc, #112]	@ (81015a0 <_ZL12MX_I2C4_Initv+0x90>)
 810152e:	2200      	movs	r2, #0
 8101530:	611a      	str	r2, [r3, #16]
    hi2c4.Init.OwnAddress2 = 0;
 8101532:	4b1b      	ldr	r3, [pc, #108]	@ (81015a0 <_ZL12MX_I2C4_Initv+0x90>)
 8101534:	2200      	movs	r2, #0
 8101536:	615a      	str	r2, [r3, #20]
    hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8101538:	4b19      	ldr	r3, [pc, #100]	@ (81015a0 <_ZL12MX_I2C4_Initv+0x90>)
 810153a:	2200      	movs	r2, #0
 810153c:	619a      	str	r2, [r3, #24]
    hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 810153e:	4b18      	ldr	r3, [pc, #96]	@ (81015a0 <_ZL12MX_I2C4_Initv+0x90>)
 8101540:	2200      	movs	r2, #0
 8101542:	61da      	str	r2, [r3, #28]
    hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8101544:	4b16      	ldr	r3, [pc, #88]	@ (81015a0 <_ZL12MX_I2C4_Initv+0x90>)
 8101546:	2200      	movs	r2, #0
 8101548:	621a      	str	r2, [r3, #32]
    if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 810154a:	4815      	ldr	r0, [pc, #84]	@ (81015a0 <_ZL12MX_I2C4_Initv+0x90>)
 810154c:	f00f fe74 	bl	8111238 <HAL_I2C_Init>
 8101550:	4603      	mov	r3, r0
 8101552:	2b00      	cmp	r3, #0
 8101554:	bf14      	ite	ne
 8101556:	2301      	movne	r3, #1
 8101558:	2300      	moveq	r3, #0
 810155a:	b2db      	uxtb	r3, r3
 810155c:	2b00      	cmp	r3, #0
 810155e:	d001      	beq.n	8101564 <_ZL12MX_I2C4_Initv+0x54>
    {
        Error_Handler();
 8101560:	f000 f936 	bl	81017d0 <Error_Handler>
    }

    /** Configure Analogue filter
     */
    if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8101564:	2100      	movs	r1, #0
 8101566:	480e      	ldr	r0, [pc, #56]	@ (81015a0 <_ZL12MX_I2C4_Initv+0x90>)
 8101568:	f010 fac4 	bl	8111af4 <HAL_I2CEx_ConfigAnalogFilter>
 810156c:	4603      	mov	r3, r0
 810156e:	2b00      	cmp	r3, #0
 8101570:	bf14      	ite	ne
 8101572:	2301      	movne	r3, #1
 8101574:	2300      	moveq	r3, #0
 8101576:	b2db      	uxtb	r3, r3
 8101578:	2b00      	cmp	r3, #0
 810157a:	d001      	beq.n	8101580 <_ZL12MX_I2C4_Initv+0x70>
    {
        Error_Handler();
 810157c:	f000 f928 	bl	81017d0 <Error_Handler>
    }

    /** Configure Digital filter
     */
    if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 2) != HAL_OK)
 8101580:	2102      	movs	r1, #2
 8101582:	4807      	ldr	r0, [pc, #28]	@ (81015a0 <_ZL12MX_I2C4_Initv+0x90>)
 8101584:	f010 fb01 	bl	8111b8a <HAL_I2CEx_ConfigDigitalFilter>
 8101588:	4603      	mov	r3, r0
 810158a:	2b00      	cmp	r3, #0
 810158c:	bf14      	ite	ne
 810158e:	2301      	movne	r3, #1
 8101590:	2300      	moveq	r3, #0
 8101592:	b2db      	uxtb	r3, r3
 8101594:	2b00      	cmp	r3, #0
 8101596:	d001      	beq.n	810159c <_ZL12MX_I2C4_Initv+0x8c>
    {
        Error_Handler();
 8101598:	f000 f91a 	bl	81017d0 <Error_Handler>
    }
    /* USER CODE BEGIN I2C4_Init 2 */

    /* USER CODE END I2C4_Init 2 */

}
 810159c:	bf00      	nop
 810159e:	bd80      	pop	{r7, pc}
 81015a0:	100000ec 	.word	0x100000ec
 81015a4:	58001c00 	.word	0x58001c00
 81015a8:	10c0ecff 	.word	0x10c0ecff

081015ac <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART1_UART_Init(void)
{
 81015ac:	b580      	push	{r7, lr}
 81015ae:	af00      	add	r7, sp, #0
    /* USER CODE END USART1_Init 0 */

    /* USER CODE BEGIN USART1_Init 1 */

    /* USER CODE END USART1_Init 1 */
    huart1.Instance = USART1;
 81015b0:	4b2c      	ldr	r3, [pc, #176]	@ (8101664 <MX_USART1_UART_Init+0xb8>)
 81015b2:	4a2d      	ldr	r2, [pc, #180]	@ (8101668 <MX_USART1_UART_Init+0xbc>)
 81015b4:	601a      	str	r2, [r3, #0]
    huart1.Init.BaudRate = 115200;
 81015b6:	4b2b      	ldr	r3, [pc, #172]	@ (8101664 <MX_USART1_UART_Init+0xb8>)
 81015b8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 81015bc:	605a      	str	r2, [r3, #4]
    huart1.Init.WordLength = UART_WORDLENGTH_8B;
 81015be:	4b29      	ldr	r3, [pc, #164]	@ (8101664 <MX_USART1_UART_Init+0xb8>)
 81015c0:	2200      	movs	r2, #0
 81015c2:	609a      	str	r2, [r3, #8]
    huart1.Init.StopBits = UART_STOPBITS_1;
 81015c4:	4b27      	ldr	r3, [pc, #156]	@ (8101664 <MX_USART1_UART_Init+0xb8>)
 81015c6:	2200      	movs	r2, #0
 81015c8:	60da      	str	r2, [r3, #12]
    huart1.Init.Parity = UART_PARITY_NONE;
 81015ca:	4b26      	ldr	r3, [pc, #152]	@ (8101664 <MX_USART1_UART_Init+0xb8>)
 81015cc:	2200      	movs	r2, #0
 81015ce:	611a      	str	r2, [r3, #16]
    huart1.Init.Mode = UART_MODE_TX_RX;
 81015d0:	4b24      	ldr	r3, [pc, #144]	@ (8101664 <MX_USART1_UART_Init+0xb8>)
 81015d2:	220c      	movs	r2, #12
 81015d4:	615a      	str	r2, [r3, #20]
    huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 81015d6:	4b23      	ldr	r3, [pc, #140]	@ (8101664 <MX_USART1_UART_Init+0xb8>)
 81015d8:	2200      	movs	r2, #0
 81015da:	619a      	str	r2, [r3, #24]
    huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 81015dc:	4b21      	ldr	r3, [pc, #132]	@ (8101664 <MX_USART1_UART_Init+0xb8>)
 81015de:	2200      	movs	r2, #0
 81015e0:	61da      	str	r2, [r3, #28]
    huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 81015e2:	4b20      	ldr	r3, [pc, #128]	@ (8101664 <MX_USART1_UART_Init+0xb8>)
 81015e4:	2200      	movs	r2, #0
 81015e6:	621a      	str	r2, [r3, #32]
    huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 81015e8:	4b1e      	ldr	r3, [pc, #120]	@ (8101664 <MX_USART1_UART_Init+0xb8>)
 81015ea:	2200      	movs	r2, #0
 81015ec:	625a      	str	r2, [r3, #36]	@ 0x24
    huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 81015ee:	4b1d      	ldr	r3, [pc, #116]	@ (8101664 <MX_USART1_UART_Init+0xb8>)
 81015f0:	2200      	movs	r2, #0
 81015f2:	629a      	str	r2, [r3, #40]	@ 0x28
    if (HAL_UART_Init(&huart1) != HAL_OK)
 81015f4:	481b      	ldr	r0, [pc, #108]	@ (8101664 <MX_USART1_UART_Init+0xb8>)
 81015f6:	f012 fef1 	bl	81143dc <HAL_UART_Init>
 81015fa:	4603      	mov	r3, r0
 81015fc:	2b00      	cmp	r3, #0
 81015fe:	bf14      	ite	ne
 8101600:	2301      	movne	r3, #1
 8101602:	2300      	moveq	r3, #0
 8101604:	b2db      	uxtb	r3, r3
 8101606:	2b00      	cmp	r3, #0
 8101608:	d001      	beq.n	810160e <MX_USART1_UART_Init+0x62>
    {
        Error_Handler();
 810160a:	f000 f8e1 	bl	81017d0 <Error_Handler>
    }
    if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 810160e:	2100      	movs	r1, #0
 8101610:	4814      	ldr	r0, [pc, #80]	@ (8101664 <MX_USART1_UART_Init+0xb8>)
 8101612:	f013 ff81 	bl	8115518 <HAL_UARTEx_SetTxFifoThreshold>
 8101616:	4603      	mov	r3, r0
 8101618:	2b00      	cmp	r3, #0
 810161a:	bf14      	ite	ne
 810161c:	2301      	movne	r3, #1
 810161e:	2300      	moveq	r3, #0
 8101620:	b2db      	uxtb	r3, r3
 8101622:	2b00      	cmp	r3, #0
 8101624:	d001      	beq.n	810162a <MX_USART1_UART_Init+0x7e>
    {
        Error_Handler();
 8101626:	f000 f8d3 	bl	81017d0 <Error_Handler>
    }
    if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 810162a:	2100      	movs	r1, #0
 810162c:	480d      	ldr	r0, [pc, #52]	@ (8101664 <MX_USART1_UART_Init+0xb8>)
 810162e:	f013 ffb1 	bl	8115594 <HAL_UARTEx_SetRxFifoThreshold>
 8101632:	4603      	mov	r3, r0
 8101634:	2b00      	cmp	r3, #0
 8101636:	bf14      	ite	ne
 8101638:	2301      	movne	r3, #1
 810163a:	2300      	moveq	r3, #0
 810163c:	b2db      	uxtb	r3, r3
 810163e:	2b00      	cmp	r3, #0
 8101640:	d001      	beq.n	8101646 <MX_USART1_UART_Init+0x9a>
    {
        Error_Handler();
 8101642:	f000 f8c5 	bl	81017d0 <Error_Handler>
    }
    if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8101646:	4807      	ldr	r0, [pc, #28]	@ (8101664 <MX_USART1_UART_Init+0xb8>)
 8101648:	f013 ff2d 	bl	81154a6 <HAL_UARTEx_DisableFifoMode>
 810164c:	4603      	mov	r3, r0
 810164e:	2b00      	cmp	r3, #0
 8101650:	bf14      	ite	ne
 8101652:	2301      	movne	r3, #1
 8101654:	2300      	moveq	r3, #0
 8101656:	b2db      	uxtb	r3, r3
 8101658:	2b00      	cmp	r3, #0
 810165a:	d001      	beq.n	8101660 <MX_USART1_UART_Init+0xb4>
    {
        Error_Handler();
 810165c:	f000 f8b8 	bl	81017d0 <Error_Handler>
    }
    /* USER CODE BEGIN USART1_Init 2 */

    /* USER CODE END USART1_Init 2 */

}
 8101660:	bf00      	nop
 8101662:	bd80      	pop	{r7, pc}
 8101664:	10000140 	.word	0x10000140
 8101668:	40011000 	.word	0x40011000

0810166c <_ZL12MX_MDMA_Initv>:

/**
  * Enable MDMA controller clock
  */
static void MX_MDMA_Init(void)
{
 810166c:	b480      	push	{r7}
 810166e:	b083      	sub	sp, #12
 8101670:	af00      	add	r7, sp, #0

    /* MDMA controller clock enable */
    __HAL_RCC_MDMA_CLK_ENABLE();
 8101672:	4b0a      	ldr	r3, [pc, #40]	@ (810169c <_ZL12MX_MDMA_Initv+0x30>)
 8101674:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8101678:	4a08      	ldr	r2, [pc, #32]	@ (810169c <_ZL12MX_MDMA_Initv+0x30>)
 810167a:	f043 0301 	orr.w	r3, r3, #1
 810167e:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8101682:	4b06      	ldr	r3, [pc, #24]	@ (810169c <_ZL12MX_MDMA_Initv+0x30>)
 8101684:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8101688:	f003 0301 	and.w	r3, r3, #1
 810168c:	607b      	str	r3, [r7, #4]
 810168e:	687b      	ldr	r3, [r7, #4]
    /* Local variables */

}
 8101690:	bf00      	nop
 8101692:	370c      	adds	r7, #12
 8101694:	46bd      	mov	sp, r7
 8101696:	f85d 7b04 	ldr.w	r7, [sp], #4
 810169a:	4770      	bx	lr
 810169c:	58024400 	.word	0x58024400

081016a0 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 81016a0:	b480      	push	{r7}
 81016a2:	b089      	sub	sp, #36	@ 0x24
 81016a4:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN MX_GPIO_Init_1 */
    /* USER CODE END MX_GPIO_Init_1 */

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOG_CLK_ENABLE();
 81016a6:	4b37      	ldr	r3, [pc, #220]	@ (8101784 <_ZL12MX_GPIO_Initv+0xe4>)
 81016a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81016ac:	4a35      	ldr	r2, [pc, #212]	@ (8101784 <_ZL12MX_GPIO_Initv+0xe4>)
 81016ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 81016b2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81016b6:	4b33      	ldr	r3, [pc, #204]	@ (8101784 <_ZL12MX_GPIO_Initv+0xe4>)
 81016b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81016bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 81016c0:	61fb      	str	r3, [r7, #28]
 81016c2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 81016c4:	4b2f      	ldr	r3, [pc, #188]	@ (8101784 <_ZL12MX_GPIO_Initv+0xe4>)
 81016c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81016ca:	4a2e      	ldr	r2, [pc, #184]	@ (8101784 <_ZL12MX_GPIO_Initv+0xe4>)
 81016cc:	f043 0310 	orr.w	r3, r3, #16
 81016d0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81016d4:	4b2b      	ldr	r3, [pc, #172]	@ (8101784 <_ZL12MX_GPIO_Initv+0xe4>)
 81016d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81016da:	f003 0310 	and.w	r3, r3, #16
 81016de:	61bb      	str	r3, [r7, #24]
 81016e0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 81016e2:	4b28      	ldr	r3, [pc, #160]	@ (8101784 <_ZL12MX_GPIO_Initv+0xe4>)
 81016e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81016e8:	4a26      	ldr	r2, [pc, #152]	@ (8101784 <_ZL12MX_GPIO_Initv+0xe4>)
 81016ea:	f043 0304 	orr.w	r3, r3, #4
 81016ee:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81016f2:	4b24      	ldr	r3, [pc, #144]	@ (8101784 <_ZL12MX_GPIO_Initv+0xe4>)
 81016f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81016f8:	f003 0304 	and.w	r3, r3, #4
 81016fc:	617b      	str	r3, [r7, #20]
 81016fe:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8101700:	4b20      	ldr	r3, [pc, #128]	@ (8101784 <_ZL12MX_GPIO_Initv+0xe4>)
 8101702:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101706:	4a1f      	ldr	r2, [pc, #124]	@ (8101784 <_ZL12MX_GPIO_Initv+0xe4>)
 8101708:	f043 0301 	orr.w	r3, r3, #1
 810170c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8101710:	4b1c      	ldr	r3, [pc, #112]	@ (8101784 <_ZL12MX_GPIO_Initv+0xe4>)
 8101712:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101716:	f003 0301 	and.w	r3, r3, #1
 810171a:	613b      	str	r3, [r7, #16]
 810171c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 810171e:	4b19      	ldr	r3, [pc, #100]	@ (8101784 <_ZL12MX_GPIO_Initv+0xe4>)
 8101720:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101724:	4a17      	ldr	r2, [pc, #92]	@ (8101784 <_ZL12MX_GPIO_Initv+0xe4>)
 8101726:	f043 0302 	orr.w	r3, r3, #2
 810172a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 810172e:	4b15      	ldr	r3, [pc, #84]	@ (8101784 <_ZL12MX_GPIO_Initv+0xe4>)
 8101730:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101734:	f003 0302 	and.w	r3, r3, #2
 8101738:	60fb      	str	r3, [r7, #12]
 810173a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 810173c:	4b11      	ldr	r3, [pc, #68]	@ (8101784 <_ZL12MX_GPIO_Initv+0xe4>)
 810173e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101742:	4a10      	ldr	r2, [pc, #64]	@ (8101784 <_ZL12MX_GPIO_Initv+0xe4>)
 8101744:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8101748:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 810174c:	4b0d      	ldr	r3, [pc, #52]	@ (8101784 <_ZL12MX_GPIO_Initv+0xe4>)
 810174e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101752:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8101756:	60bb      	str	r3, [r7, #8]
 8101758:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 810175a:	4b0a      	ldr	r3, [pc, #40]	@ (8101784 <_ZL12MX_GPIO_Initv+0xe4>)
 810175c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101760:	4a08      	ldr	r2, [pc, #32]	@ (8101784 <_ZL12MX_GPIO_Initv+0xe4>)
 8101762:	f043 0308 	orr.w	r3, r3, #8
 8101766:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 810176a:	4b06      	ldr	r3, [pc, #24]	@ (8101784 <_ZL12MX_GPIO_Initv+0xe4>)
 810176c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101770:	f003 0308 	and.w	r3, r3, #8
 8101774:	607b      	str	r3, [r7, #4]
 8101776:	687b      	ldr	r3, [r7, #4]

    /* USER CODE BEGIN MX_GPIO_Init_2 */
    /* USER CODE END MX_GPIO_Init_2 */
}
 8101778:	bf00      	nop
 810177a:	3724      	adds	r7, #36	@ 0x24
 810177c:	46bd      	mov	sp, r7
 810177e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101782:	4770      	bx	lr
 8101784:	58024400 	.word	0x58024400

08101788 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  *   None
  * @retval None
  */
extern "C" int __io_putchar(int ch)
{
 8101788:	b580      	push	{r7, lr}
 810178a:	b082      	sub	sp, #8
 810178c:	af00      	add	r7, sp, #0
 810178e:	6078      	str	r0, [r7, #4]
    /* Place your implementation of fputc here */
    /* e.g. write a character to the USART1 and Loop until the end of transmission */
    HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 8101790:	1d39      	adds	r1, r7, #4
 8101792:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8101796:	2201      	movs	r2, #1
 8101798:	4803      	ldr	r0, [pc, #12]	@ (81017a8 <__io_putchar+0x20>)
 810179a:	f012 fe6f 	bl	811447c <HAL_UART_Transmit>

    return ch;
 810179e:	687b      	ldr	r3, [r7, #4]
}
 81017a0:	4618      	mov	r0, r3
 81017a2:	3708      	adds	r7, #8
 81017a4:	46bd      	mov	sp, r7
 81017a6:	bd80      	pop	{r7, pc}
 81017a8:	10000140 	.word	0x10000140

081017ac <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 81017ac:	b580      	push	{r7, lr}
 81017ae:	b082      	sub	sp, #8
 81017b0:	af00      	add	r7, sp, #0
 81017b2:	6078      	str	r0, [r7, #4]
    /* USER CODE BEGIN Callback 0 */

    /* USER CODE END Callback 0 */
    if (htim->Instance == TIM6) {
 81017b4:	687b      	ldr	r3, [r7, #4]
 81017b6:	681b      	ldr	r3, [r3, #0]
 81017b8:	4a04      	ldr	r2, [pc, #16]	@ (81017cc <HAL_TIM_PeriodElapsedCallback+0x20>)
 81017ba:	4293      	cmp	r3, r2
 81017bc:	d101      	bne.n	81017c2 <HAL_TIM_PeriodElapsedCallback+0x16>
        HAL_IncTick();
 81017be:	f00d fb77 	bl	810eeb0 <HAL_IncTick>
    }
    /* USER CODE BEGIN Callback 1 */

    /* USER CODE END Callback 1 */
}
 81017c2:	bf00      	nop
 81017c4:	3708      	adds	r7, #8
 81017c6:	46bd      	mov	sp, r7
 81017c8:	bd80      	pop	{r7, pc}
 81017ca:	bf00      	nop
 81017cc:	40001000 	.word	0x40001000

081017d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 81017d0:	b480      	push	{r7}
 81017d2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 81017d4:	b672      	cpsid	i
}
 81017d6:	bf00      	nop
    /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1)
 81017d8:	bf00      	nop
 81017da:	e7fd      	b.n	81017d8 <Error_Handler+0x8>

081017dc <_ZNSaISt4pairIKN7APIDoIP12EDoIPRequestES_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEEEC1Ev>:
#endif

      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 3035. std::allocator's constructors should be constexpr
      _GLIBCXX20_CONSTEXPR
      allocator() _GLIBCXX_NOTHROW { }
 81017dc:	b580      	push	{r7, lr}
 81017de:	b082      	sub	sp, #8
 81017e0:	af00      	add	r7, sp, #0
 81017e2:	6078      	str	r0, [r7, #4]
 81017e4:	6878      	ldr	r0, [r7, #4]
 81017e6:	f000 f864 	bl	81018b2 <_ZNSt15__new_allocatorISt4pairIKN7APIDoIP12EDoIPRequestES0_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEEEC1Ev>
 81017ea:	687b      	ldr	r3, [r7, #4]
 81017ec:	4618      	mov	r0, r3
 81017ee:	3708      	adds	r7, #8
 81017f0:	46bd      	mov	sp, r7
 81017f2:	bd80      	pop	{r7, pc}

081017f4 <_ZNSaISt4pairIKN7APIDoIP12EDoIPRequestES_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEEED1Ev>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

#if __cpp_constexpr_dynamic_alloc
      constexpr
#endif
      ~allocator() _GLIBCXX_NOTHROW { }
 81017f4:	b480      	push	{r7}
 81017f6:	b083      	sub	sp, #12
 81017f8:	af00      	add	r7, sp, #0
 81017fa:	6078      	str	r0, [r7, #4]
 81017fc:	687b      	ldr	r3, [r7, #4]
 81017fe:	4618      	mov	r0, r3
 8101800:	370c      	adds	r7, #12
 8101802:	46bd      	mov	sp, r7
 8101804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101808:	4770      	bx	lr

0810180a <_ZNSt13unordered_mapIN7APIDoIP12EDoIPRequestESt4pairISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressESt4hashIS1_ESt8equal_toIS1_ESaIS2_IKS1_S8_EEEC1ESt16initializer_listISE_EjRKSA_RKSC_RKSF_>:
       *  @param  __a  An allocator object.
       *
       *  Create an %unordered_map consisting of copies of the elements in the
       *  list. This is linear in N (where N is @a __l.size()).
       */
      unordered_map(initializer_list<value_type> __l,
 810180a:	b580      	push	{r7, lr}
 810180c:	b088      	sub	sp, #32
 810180e:	af04      	add	r7, sp, #16
 8101810:	60f8      	str	r0, [r7, #12]
 8101812:	1d38      	adds	r0, r7, #4
 8101814:	e880 0006 	stmia.w	r0, {r1, r2}
 8101818:	603b      	str	r3, [r7, #0]
		    size_type __n = 0,
		    const hasher& __hf = hasher(),
		    const key_equal& __eql = key_equal(),
		    const allocator_type& __a = allocator_type())
      : _M_h(__l, __n, __hf, __eql, __a)
 810181a:	68f8      	ldr	r0, [r7, #12]
 810181c:	6a3b      	ldr	r3, [r7, #32]
 810181e:	9302      	str	r3, [sp, #8]
 8101820:	69fb      	ldr	r3, [r7, #28]
 8101822:	9301      	str	r3, [sp, #4]
 8101824:	69bb      	ldr	r3, [r7, #24]
 8101826:	9300      	str	r3, [sp, #0]
 8101828:	683b      	ldr	r3, [r7, #0]
 810182a:	1d3a      	adds	r2, r7, #4
 810182c:	ca06      	ldmia	r2, {r1, r2}
 810182e:	f000 f84b 	bl	81018c8 <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEEC1ESt16initializer_listISA_EjRKSH_RKSF_RKSB_>
      { }
 8101832:	68fb      	ldr	r3, [r7, #12]
 8101834:	4618      	mov	r0, r3
 8101836:	3710      	adds	r7, #16
 8101838:	46bd      	mov	sp, r7
 810183a:	bd80      	pop	{r7, pc}

0810183c <_ZNSaISt4pairIKN7APIDoIP12EDoIPRequestEPKcEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 810183c:	b580      	push	{r7, lr}
 810183e:	b082      	sub	sp, #8
 8101840:	af00      	add	r7, sp, #0
 8101842:	6078      	str	r0, [r7, #4]
 8101844:	6878      	ldr	r0, [r7, #4]
 8101846:	f000 f88d 	bl	8101964 <_ZNSt15__new_allocatorISt4pairIKN7APIDoIP12EDoIPRequestEPKcEEC1Ev>
 810184a:	687b      	ldr	r3, [r7, #4]
 810184c:	4618      	mov	r0, r3
 810184e:	3708      	adds	r7, #8
 8101850:	46bd      	mov	sp, r7
 8101852:	bd80      	pop	{r7, pc}

08101854 <_ZNSaISt4pairIKN7APIDoIP12EDoIPRequestEPKcEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8101854:	b480      	push	{r7}
 8101856:	b083      	sub	sp, #12
 8101858:	af00      	add	r7, sp, #0
 810185a:	6078      	str	r0, [r7, #4]
 810185c:	687b      	ldr	r3, [r7, #4]
 810185e:	4618      	mov	r0, r3
 8101860:	370c      	adds	r7, #12
 8101862:	46bd      	mov	sp, r7
 8101864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101868:	4770      	bx	lr

0810186a <_ZNSt13unordered_mapIN7APIDoIP12EDoIPRequestEPKcSt4hashIS1_ESt8equal_toIS1_ESaISt4pairIKS1_S3_EEEC1ESt16initializer_listISA_EjRKS5_RKS7_RKSB_>:
      unordered_map(initializer_list<value_type> __l,
 810186a:	b580      	push	{r7, lr}
 810186c:	b088      	sub	sp, #32
 810186e:	af04      	add	r7, sp, #16
 8101870:	60f8      	str	r0, [r7, #12]
 8101872:	1d38      	adds	r0, r7, #4
 8101874:	e880 0006 	stmia.w	r0, {r1, r2}
 8101878:	603b      	str	r3, [r7, #0]
      : _M_h(__l, __n, __hf, __eql, __a)
 810187a:	68f8      	ldr	r0, [r7, #12]
 810187c:	6a3b      	ldr	r3, [r7, #32]
 810187e:	9302      	str	r3, [sp, #8]
 8101880:	69fb      	ldr	r3, [r7, #28]
 8101882:	9301      	str	r3, [sp, #4]
 8101884:	69bb      	ldr	r3, [r7, #24]
 8101886:	9300      	str	r3, [sp, #0]
 8101888:	683b      	ldr	r3, [r7, #0]
 810188a:	1d3a      	adds	r2, r7, #4
 810188c:	ca06      	ldmia	r2, {r1, r2}
 810188e:	f000 f874 	bl	810197a <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_PKcESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEEC1ESt16initializer_listIS6_EjRKSD_RKSB_RKS7_>
      { }
 8101892:	68fb      	ldr	r3, [r7, #12]
 8101894:	4618      	mov	r0, r3
 8101896:	3710      	adds	r7, #16
 8101898:	46bd      	mov	sp, r7
 810189a:	bd80      	pop	{r7, pc}

0810189c <_ZSt7forwardIbEOT_RNSt16remove_referenceIS0_E4typeE>:
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    _GLIBCXX_NODISCARD
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 810189c:	b480      	push	{r7}
 810189e:	b083      	sub	sp, #12
 81018a0:	af00      	add	r7, sp, #0
 81018a2:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 81018a4:	687b      	ldr	r3, [r7, #4]
 81018a6:	4618      	mov	r0, r3
 81018a8:	370c      	adds	r7, #12
 81018aa:	46bd      	mov	sp, r7
 81018ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 81018b0:	4770      	bx	lr

081018b2 <_ZNSt15__new_allocatorISt4pairIKN7APIDoIP12EDoIPRequestES0_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEEEC1Ev>:
      // 2103. propagate_on_container_move_assignment
      typedef std::true_type propagate_on_container_move_assignment;
#endif

      _GLIBCXX20_CONSTEXPR
      __new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 81018b2:	b480      	push	{r7}
 81018b4:	b083      	sub	sp, #12
 81018b6:	af00      	add	r7, sp, #0
 81018b8:	6078      	str	r0, [r7, #4]
 81018ba:	687b      	ldr	r3, [r7, #4]
 81018bc:	4618      	mov	r0, r3
 81018be:	370c      	adds	r7, #12
 81018c0:	46bd      	mov	sp, r7
 81018c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81018c6:	4770      	bx	lr

081018c8 <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEEC1ESt16initializer_listISA_EjRKSH_RKSF_RKSB_>:
		   const allocator_type& __a = allocator_type())
	: _Hashtable(__f, __l, __bkt_count_hint, __hf, __eql, __a,
		     __unique_keys{})
	{ }

      _Hashtable(initializer_list<value_type> __l,
 81018c8:	b5b0      	push	{r4, r5, r7, lr}
 81018ca:	b088      	sub	sp, #32
 81018cc:	af04      	add	r7, sp, #16
 81018ce:	60f8      	str	r0, [r7, #12]
 81018d0:	1d38      	adds	r0, r7, #4
 81018d2:	e880 0006 	stmia.w	r0, {r1, r2}
 81018d6:	603b      	str	r3, [r7, #0]
		 size_type __bkt_count_hint = 0,
		 const _Hash& __hf = _Hash(),
		 const key_equal& __eql = key_equal(),
		 const allocator_type& __a = allocator_type())
      : _Hashtable(__l.begin(), __l.end(), __bkt_count_hint,
		   __hf, __eql, __a, __unique_keys{})
 81018d8:	1d3b      	adds	r3, r7, #4
 81018da:	4618      	mov	r0, r3
 81018dc:	f000 f89b 	bl	8101a16 <_ZNKSt16initializer_listISt4pairIKN7APIDoIP12EDoIPRequestES0_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEEE5beginEv>
 81018e0:	4604      	mov	r4, r0
 81018e2:	1d3b      	adds	r3, r7, #4
 81018e4:	4618      	mov	r0, r3
 81018e6:	f000 f8a2 	bl	8101a2e <_ZNKSt16initializer_listISt4pairIKN7APIDoIP12EDoIPRequestES0_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEEE3endEv>
 81018ea:	4602      	mov	r2, r0
 81018ec:	f88d 500c 	strb.w	r5, [sp, #12]
 81018f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81018f2:	9302      	str	r3, [sp, #8]
 81018f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81018f6:	9301      	str	r3, [sp, #4]
 81018f8:	6a3b      	ldr	r3, [r7, #32]
 81018fa:	9300      	str	r3, [sp, #0]
 81018fc:	683b      	ldr	r3, [r7, #0]
 81018fe:	4621      	mov	r1, r4
 8101900:	68f8      	ldr	r0, [r7, #12]
 8101902:	f000 f8a6 	bl	8101a52 <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEEC1IPKSA_EET_SR_jRKSH_RKSF_RKSB_St17integral_constantIbLb1EE>
      { }
 8101906:	68fb      	ldr	r3, [r7, #12]
 8101908:	4618      	mov	r0, r3
 810190a:	3710      	adds	r7, #16
 810190c:	46bd      	mov	sp, r7
 810190e:	bdb0      	pop	{r4, r5, r7, pc}

08101910 <_ZNSt8__detail21_Hashtable_ebo_helperILi0ESaINS_10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEEELb1EED1Ev>:
	   bool __use_ebo = !__is_final(_Tp) && __is_empty(_Tp)>
    struct _Hashtable_ebo_helper;

  /// Specialization using EBO.
  template<int _Nm, typename _Tp>
    struct _Hashtable_ebo_helper<_Nm, _Tp, true>
 8101910:	b580      	push	{r7, lr}
 8101912:	b082      	sub	sp, #8
 8101914:	af00      	add	r7, sp, #0
 8101916:	6078      	str	r0, [r7, #4]
 8101918:	6878      	ldr	r0, [r7, #4]
 810191a:	f000 f8bd 	bl	8101a98 <_ZNSaINSt8__detail10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES1_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEEED1Ev>
 810191e:	687b      	ldr	r3, [r7, #4]
 8101920:	4618      	mov	r0, r3
 8101922:	3708      	adds	r7, #8
 8101924:	46bd      	mov	sp, r7
 8101926:	bd80      	pop	{r7, pc}

08101928 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEEEED1Ev>:
  /**
   * This type deals with all allocation and keeps an allocator instance
   * through inheritance to benefit from EBO when possible.
   */
  template<typename _NodeAlloc>
    struct _Hashtable_alloc : private _Hashtable_ebo_helper<0, _NodeAlloc>
 8101928:	b580      	push	{r7, lr}
 810192a:	b082      	sub	sp, #8
 810192c:	af00      	add	r7, sp, #0
 810192e:	6078      	str	r0, [r7, #4]
 8101930:	6878      	ldr	r0, [r7, #4]
 8101932:	f7ff ffed 	bl	8101910 <_ZNSt8__detail21_Hashtable_ebo_helperILi0ESaINS_10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEEELb1EED1Ev>
 8101936:	687b      	ldr	r3, [r7, #4]
 8101938:	4618      	mov	r0, r3
 810193a:	3708      	adds	r7, #8
 810193c:	46bd      	mov	sp, r7
 810193e:	bd80      	pop	{r7, pc}

08101940 <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEED1Ev>:

  template<typename _Key, typename _Value, typename _Alloc,
	   typename _ExtractKey, typename _Equal,
	   typename _Hash, typename _RangeHash, typename _Unused,
	   typename _RehashPolicy, typename _Traits>
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
 8101940:	b580      	push	{r7, lr}
 8101942:	b082      	sub	sp, #8
 8101944:	af00      	add	r7, sp, #0
 8101946:	6078      	str	r0, [r7, #4]
			._M_bucket_index(declval<const __node_value_type&>(),
					 (std::size_t)0)),
		    "Cache the hash code or qualify your functors involved"
		    " in hash code and bucket index computation with noexcept");

      clear();
 8101948:	6878      	ldr	r0, [r7, #4]
 810194a:	f000 f8b0 	bl	8101aae <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE5clearEv>
      _M_deallocate_buckets();
 810194e:	6878      	ldr	r0, [r7, #4]
 8101950:	f000 f8cd 	bl	8101aee <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_deallocate_bucketsEv>
    }
 8101954:	6878      	ldr	r0, [r7, #4]
 8101956:	f7ff ffe7 	bl	8101928 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEEEED1Ev>
 810195a:	687b      	ldr	r3, [r7, #4]
 810195c:	4618      	mov	r0, r3
 810195e:	3708      	adds	r7, #8
 8101960:	46bd      	mov	sp, r7
 8101962:	bd80      	pop	{r7, pc}

08101964 <_ZNSt15__new_allocatorISt4pairIKN7APIDoIP12EDoIPRequestEPKcEEC1Ev>:
 8101964:	b480      	push	{r7}
 8101966:	b083      	sub	sp, #12
 8101968:	af00      	add	r7, sp, #0
 810196a:	6078      	str	r0, [r7, #4]
 810196c:	687b      	ldr	r3, [r7, #4]
 810196e:	4618      	mov	r0, r3
 8101970:	370c      	adds	r7, #12
 8101972:	46bd      	mov	sp, r7
 8101974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101978:	4770      	bx	lr

0810197a <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_PKcESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEEC1ESt16initializer_listIS6_EjRKSD_RKSB_RKS7_>:
      _Hashtable(initializer_list<value_type> __l,
 810197a:	b5b0      	push	{r4, r5, r7, lr}
 810197c:	b088      	sub	sp, #32
 810197e:	af04      	add	r7, sp, #16
 8101980:	60f8      	str	r0, [r7, #12]
 8101982:	1d38      	adds	r0, r7, #4
 8101984:	e880 0006 	stmia.w	r0, {r1, r2}
 8101988:	603b      	str	r3, [r7, #0]
		   __hf, __eql, __a, __unique_keys{})
 810198a:	1d3b      	adds	r3, r7, #4
 810198c:	4618      	mov	r0, r3
 810198e:	f000 f8be 	bl	8101b0e <_ZNKSt16initializer_listISt4pairIKN7APIDoIP12EDoIPRequestEPKcEE5beginEv>
 8101992:	4604      	mov	r4, r0
 8101994:	1d3b      	adds	r3, r7, #4
 8101996:	4618      	mov	r0, r3
 8101998:	f000 f8c5 	bl	8101b26 <_ZNKSt16initializer_listISt4pairIKN7APIDoIP12EDoIPRequestEPKcEE3endEv>
 810199c:	4602      	mov	r2, r0
 810199e:	f88d 500c 	strb.w	r5, [sp, #12]
 81019a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81019a4:	9302      	str	r3, [sp, #8]
 81019a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81019a8:	9301      	str	r3, [sp, #4]
 81019aa:	6a3b      	ldr	r3, [r7, #32]
 81019ac:	9300      	str	r3, [sp, #0]
 81019ae:	683b      	ldr	r3, [r7, #0]
 81019b0:	4621      	mov	r1, r4
 81019b2:	68f8      	ldr	r0, [r7, #12]
 81019b4:	f000 f8c9 	bl	8101b4a <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_PKcESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEEC1IPKS6_EET_SN_jRKSD_RKSB_RKS7_St17integral_constantIbLb1EE>
      { }
 81019b8:	68fb      	ldr	r3, [r7, #12]
 81019ba:	4618      	mov	r0, r3
 81019bc:	3710      	adds	r7, #16
 81019be:	46bd      	mov	sp, r7
 81019c0:	bdb0      	pop	{r4, r5, r7, pc}

081019c2 <_ZNSt8__detail21_Hashtable_ebo_helperILi0ESaINS_10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestEPKcELb0EEEELb1EED1Ev>:
    struct _Hashtable_ebo_helper<_Nm, _Tp, true>
 81019c2:	b580      	push	{r7, lr}
 81019c4:	b082      	sub	sp, #8
 81019c6:	af00      	add	r7, sp, #0
 81019c8:	6078      	str	r0, [r7, #4]
 81019ca:	6878      	ldr	r0, [r7, #4]
 81019cc:	f000 f8e0 	bl	8101b90 <_ZNSaINSt8__detail10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestEPKcELb0EEEED1Ev>
 81019d0:	687b      	ldr	r3, [r7, #4]
 81019d2:	4618      	mov	r0, r3
 81019d4:	3708      	adds	r7, #8
 81019d6:	46bd      	mov	sp, r7
 81019d8:	bd80      	pop	{r7, pc}

081019da <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestEPKcELb0EEEEED1Ev>:
    struct _Hashtable_alloc : private _Hashtable_ebo_helper<0, _NodeAlloc>
 81019da:	b580      	push	{r7, lr}
 81019dc:	b082      	sub	sp, #8
 81019de:	af00      	add	r7, sp, #0
 81019e0:	6078      	str	r0, [r7, #4]
 81019e2:	6878      	ldr	r0, [r7, #4]
 81019e4:	f7ff ffed 	bl	81019c2 <_ZNSt8__detail21_Hashtable_ebo_helperILi0ESaINS_10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestEPKcELb0EEEELb1EED1Ev>
 81019e8:	687b      	ldr	r3, [r7, #4]
 81019ea:	4618      	mov	r0, r3
 81019ec:	3708      	adds	r7, #8
 81019ee:	46bd      	mov	sp, r7
 81019f0:	bd80      	pop	{r7, pc}

081019f2 <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_PKcESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEED1Ev>:
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
 81019f2:	b580      	push	{r7, lr}
 81019f4:	b082      	sub	sp, #8
 81019f6:	af00      	add	r7, sp, #0
 81019f8:	6078      	str	r0, [r7, #4]
      clear();
 81019fa:	6878      	ldr	r0, [r7, #4]
 81019fc:	f000 f8d3 	bl	8101ba6 <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_PKcESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE5clearEv>
      _M_deallocate_buckets();
 8101a00:	6878      	ldr	r0, [r7, #4]
 8101a02:	f000 f8f0 	bl	8101be6 <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_PKcESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_deallocate_bucketsEv>
    }
 8101a06:	6878      	ldr	r0, [r7, #4]
 8101a08:	f7ff ffe7 	bl	81019da <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestEPKcELb0EEEEED1Ev>
 8101a0c:	687b      	ldr	r3, [r7, #4]
 8101a0e:	4618      	mov	r0, r3
 8101a10:	3708      	adds	r7, #8
 8101a12:	46bd      	mov	sp, r7
 8101a14:	bd80      	pop	{r7, pc}

08101a16 <_ZNKSt16initializer_listISt4pairIKN7APIDoIP12EDoIPRequestES0_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEEE5beginEv>:
      constexpr size_type
      size() const noexcept { return _M_len; }

      // First element.
      constexpr const_iterator
      begin() const noexcept { return _M_array; }
 8101a16:	b480      	push	{r7}
 8101a18:	b083      	sub	sp, #12
 8101a1a:	af00      	add	r7, sp, #0
 8101a1c:	6078      	str	r0, [r7, #4]
 8101a1e:	687b      	ldr	r3, [r7, #4]
 8101a20:	681b      	ldr	r3, [r3, #0]
 8101a22:	4618      	mov	r0, r3
 8101a24:	370c      	adds	r7, #12
 8101a26:	46bd      	mov	sp, r7
 8101a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101a2c:	4770      	bx	lr

08101a2e <_ZNKSt16initializer_listISt4pairIKN7APIDoIP12EDoIPRequestES0_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEEE3endEv>:

      // One past the last element.
      constexpr const_iterator
      end() const noexcept { return begin() + size(); }
 8101a2e:	b590      	push	{r4, r7, lr}
 8101a30:	b083      	sub	sp, #12
 8101a32:	af00      	add	r7, sp, #0
 8101a34:	6078      	str	r0, [r7, #4]
 8101a36:	6878      	ldr	r0, [r7, #4]
 8101a38:	f7ff ffed 	bl	8101a16 <_ZNKSt16initializer_listISt4pairIKN7APIDoIP12EDoIPRequestES0_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEEE5beginEv>
 8101a3c:	4604      	mov	r4, r0
 8101a3e:	6878      	ldr	r0, [r7, #4]
 8101a40:	f000 f8e1 	bl	8101c06 <_ZNKSt16initializer_listISt4pairIKN7APIDoIP12EDoIPRequestES0_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEEE4sizeEv>
 8101a44:	4603      	mov	r3, r0
 8101a46:	011b      	lsls	r3, r3, #4
 8101a48:	4423      	add	r3, r4
 8101a4a:	4618      	mov	r0, r3
 8101a4c:	370c      	adds	r7, #12
 8101a4e:	46bd      	mov	sp, r7
 8101a50:	bd90      	pop	{r4, r7, pc}

08101a52 <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEEC1IPKSA_EET_SR_jRKSH_RKSF_RKSB_St17integral_constantIbLb1EE>:
      _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
 8101a52:	b580      	push	{r7, lr}
 8101a54:	b088      	sub	sp, #32
 8101a56:	af02      	add	r7, sp, #8
 8101a58:	60f8      	str	r0, [r7, #12]
 8101a5a:	60b9      	str	r1, [r7, #8]
 8101a5c:	607a      	str	r2, [r7, #4]
 8101a5e:	603b      	str	r3, [r7, #0]
      : _Hashtable(__bkt_count_hint, __h, __eq, __a)
 8101a60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8101a62:	9300      	str	r3, [sp, #0]
 8101a64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8101a66:	6a3a      	ldr	r2, [r7, #32]
 8101a68:	6839      	ldr	r1, [r7, #0]
 8101a6a:	68f8      	ldr	r0, [r7, #12]
 8101a6c:	f000 f8d7 	bl	8101c1e <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEEC1EjRKSH_RKSF_RKSB_>
	for (; __f != __l; ++__f)
 8101a70:	e009      	b.n	8101a86 <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEEC1IPKSA_EET_SR_jRKSH_RKSF_RKSB_St17integral_constantIbLb1EE+0x34>
	  this->insert(*__f);
 8101a72:	f107 0310 	add.w	r3, r7, #16
 8101a76:	68ba      	ldr	r2, [r7, #8]
 8101a78:	68f9      	ldr	r1, [r7, #12]
 8101a7a:	4618      	mov	r0, r3
 8101a7c:	f000 f8f7 	bl	8101c6e <_ZNSt8__detail12_Insert_baseIN7APIDoIP12EDoIPRequestESt4pairIKS2_S3_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISB_ENS_10_Select1stESt8equal_toIS2_ESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_20_Prime_rehash_policyENS_17_Hashtable_traitsILb0ELb0ELb1EEEE6insertERKSB_>
	for (; __f != __l; ++__f)
 8101a80:	68bb      	ldr	r3, [r7, #8]
 8101a82:	3310      	adds	r3, #16
 8101a84:	60bb      	str	r3, [r7, #8]
 8101a86:	68ba      	ldr	r2, [r7, #8]
 8101a88:	687b      	ldr	r3, [r7, #4]
 8101a8a:	429a      	cmp	r2, r3
 8101a8c:	d1f1      	bne.n	8101a72 <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEEC1IPKSA_EET_SR_jRKSH_RKSF_RKSB_St17integral_constantIbLb1EE+0x20>
      }
 8101a8e:	68fb      	ldr	r3, [r7, #12]
 8101a90:	4618      	mov	r0, r3
 8101a92:	3718      	adds	r7, #24
 8101a94:	46bd      	mov	sp, r7
 8101a96:	bd80      	pop	{r7, pc}

08101a98 <_ZNSaINSt8__detail10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES1_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEEED1Ev>:
 8101a98:	b480      	push	{r7}
 8101a9a:	b083      	sub	sp, #12
 8101a9c:	af00      	add	r7, sp, #0
 8101a9e:	6078      	str	r0, [r7, #4]
 8101aa0:	687b      	ldr	r3, [r7, #4]
 8101aa2:	4618      	mov	r0, r3
 8101aa4:	370c      	adds	r7, #12
 8101aa6:	46bd      	mov	sp, r7
 8101aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101aac:	4770      	bx	lr

08101aae <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE5clearEv>:
  template<typename _Key, typename _Value, typename _Alloc,
	   typename _ExtractKey, typename _Equal,
	   typename _Hash, typename _RangeHash, typename _Unused,
	   typename _RehashPolicy, typename _Traits>
    void
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
 8101aae:	b580      	push	{r7, lr}
 8101ab0:	b082      	sub	sp, #8
 8101ab2:	af00      	add	r7, sp, #0
 8101ab4:	6078      	str	r0, [r7, #4]
	       _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits>::
    clear() noexcept
    {
      this->_M_deallocate_nodes(_M_begin());
 8101ab6:	6878      	ldr	r0, [r7, #4]
 8101ab8:	f000 f8f7 	bl	8101caa <_ZNKSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE8_M_beginEv>
 8101abc:	4603      	mov	r3, r0
 8101abe:	4619      	mov	r1, r3
 8101ac0:	6878      	ldr	r0, [r7, #4]
 8101ac2:	f000 f8fe 	bl	8101cc2 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEEEE19_M_deallocate_nodesEPSD_>
      __builtin_memset(_M_buckets, 0,
 8101ac6:	687b      	ldr	r3, [r7, #4]
 8101ac8:	681a      	ldr	r2, [r3, #0]
		       _M_bucket_count * sizeof(__node_base_ptr));
 8101aca:	687b      	ldr	r3, [r7, #4]
 8101acc:	685b      	ldr	r3, [r3, #4]
      __builtin_memset(_M_buckets, 0,
 8101ace:	009b      	lsls	r3, r3, #2
 8101ad0:	4610      	mov	r0, r2
 8101ad2:	461a      	mov	r2, r3
 8101ad4:	2100      	movs	r1, #0
 8101ad6:	f025 f8e1 	bl	8126c9c <memset>
      _M_element_count = 0;
 8101ada:	687b      	ldr	r3, [r7, #4]
 8101adc:	2200      	movs	r2, #0
 8101ade:	60da      	str	r2, [r3, #12]
      _M_before_begin._M_nxt = nullptr;
 8101ae0:	687b      	ldr	r3, [r7, #4]
 8101ae2:	2200      	movs	r2, #0
 8101ae4:	609a      	str	r2, [r3, #8]
    }
 8101ae6:	bf00      	nop
 8101ae8:	3708      	adds	r7, #8
 8101aea:	46bd      	mov	sp, r7
 8101aec:	bd80      	pop	{r7, pc}

08101aee <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_deallocate_bucketsEv>:
      _M_deallocate_buckets()
 8101aee:	b580      	push	{r7, lr}
 8101af0:	b082      	sub	sp, #8
 8101af2:	af00      	add	r7, sp, #0
 8101af4:	6078      	str	r0, [r7, #4]
      { _M_deallocate_buckets(_M_buckets, _M_bucket_count); }
 8101af6:	687b      	ldr	r3, [r7, #4]
 8101af8:	6819      	ldr	r1, [r3, #0]
 8101afa:	687b      	ldr	r3, [r7, #4]
 8101afc:	685b      	ldr	r3, [r3, #4]
 8101afe:	461a      	mov	r2, r3
 8101b00:	6878      	ldr	r0, [r7, #4]
 8101b02:	f000 f8f6 	bl	8101cf2 <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_deallocate_bucketsEPPNSC_15_Hash_node_baseEj>
 8101b06:	bf00      	nop
 8101b08:	3708      	adds	r7, #8
 8101b0a:	46bd      	mov	sp, r7
 8101b0c:	bd80      	pop	{r7, pc}

08101b0e <_ZNKSt16initializer_listISt4pairIKN7APIDoIP12EDoIPRequestEPKcEE5beginEv>:
      begin() const noexcept { return _M_array; }
 8101b0e:	b480      	push	{r7}
 8101b10:	b083      	sub	sp, #12
 8101b12:	af00      	add	r7, sp, #0
 8101b14:	6078      	str	r0, [r7, #4]
 8101b16:	687b      	ldr	r3, [r7, #4]
 8101b18:	681b      	ldr	r3, [r3, #0]
 8101b1a:	4618      	mov	r0, r3
 8101b1c:	370c      	adds	r7, #12
 8101b1e:	46bd      	mov	sp, r7
 8101b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101b24:	4770      	bx	lr

08101b26 <_ZNKSt16initializer_listISt4pairIKN7APIDoIP12EDoIPRequestEPKcEE3endEv>:
      end() const noexcept { return begin() + size(); }
 8101b26:	b590      	push	{r4, r7, lr}
 8101b28:	b083      	sub	sp, #12
 8101b2a:	af00      	add	r7, sp, #0
 8101b2c:	6078      	str	r0, [r7, #4]
 8101b2e:	6878      	ldr	r0, [r7, #4]
 8101b30:	f7ff ffed 	bl	8101b0e <_ZNKSt16initializer_listISt4pairIKN7APIDoIP12EDoIPRequestEPKcEE5beginEv>
 8101b34:	4604      	mov	r4, r0
 8101b36:	6878      	ldr	r0, [r7, #4]
 8101b38:	f000 f8f2 	bl	8101d20 <_ZNKSt16initializer_listISt4pairIKN7APIDoIP12EDoIPRequestEPKcEE4sizeEv>
 8101b3c:	4603      	mov	r3, r0
 8101b3e:	00db      	lsls	r3, r3, #3
 8101b40:	4423      	add	r3, r4
 8101b42:	4618      	mov	r0, r3
 8101b44:	370c      	adds	r7, #12
 8101b46:	46bd      	mov	sp, r7
 8101b48:	bd90      	pop	{r4, r7, pc}

08101b4a <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_PKcESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEEC1IPKS6_EET_SN_jRKSD_RKSB_RKS7_St17integral_constantIbLb1EE>:
      _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
 8101b4a:	b580      	push	{r7, lr}
 8101b4c:	b088      	sub	sp, #32
 8101b4e:	af02      	add	r7, sp, #8
 8101b50:	60f8      	str	r0, [r7, #12]
 8101b52:	60b9      	str	r1, [r7, #8]
 8101b54:	607a      	str	r2, [r7, #4]
 8101b56:	603b      	str	r3, [r7, #0]
      : _Hashtable(__bkt_count_hint, __h, __eq, __a)
 8101b58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8101b5a:	9300      	str	r3, [sp, #0]
 8101b5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8101b5e:	6a3a      	ldr	r2, [r7, #32]
 8101b60:	6839      	ldr	r1, [r7, #0]
 8101b62:	68f8      	ldr	r0, [r7, #12]
 8101b64:	f000 f8e8 	bl	8101d38 <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_PKcESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEEC1EjRKSD_RKSB_RKS7_>
	for (; __f != __l; ++__f)
 8101b68:	e009      	b.n	8101b7e <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_PKcESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEEC1IPKS6_EET_SN_jRKSD_RKSB_RKS7_St17integral_constantIbLb1EE+0x34>
	  this->insert(*__f);
 8101b6a:	f107 0310 	add.w	r3, r7, #16
 8101b6e:	68ba      	ldr	r2, [r7, #8]
 8101b70:	68f9      	ldr	r1, [r7, #12]
 8101b72:	4618      	mov	r0, r3
 8101b74:	f000 f908 	bl	8101d88 <_ZNSt8__detail12_Insert_baseIN7APIDoIP12EDoIPRequestESt4pairIKS2_PKcESaIS7_ENS_10_Select1stESt8equal_toIS2_ESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_20_Prime_rehash_policyENS_17_Hashtable_traitsILb0ELb0ELb1EEEE6insertERKS7_>
	for (; __f != __l; ++__f)
 8101b78:	68bb      	ldr	r3, [r7, #8]
 8101b7a:	3308      	adds	r3, #8
 8101b7c:	60bb      	str	r3, [r7, #8]
 8101b7e:	68ba      	ldr	r2, [r7, #8]
 8101b80:	687b      	ldr	r3, [r7, #4]
 8101b82:	429a      	cmp	r2, r3
 8101b84:	d1f1      	bne.n	8101b6a <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_PKcESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEEC1IPKS6_EET_SN_jRKSD_RKSB_RKS7_St17integral_constantIbLb1EE+0x20>
      }
 8101b86:	68fb      	ldr	r3, [r7, #12]
 8101b88:	4618      	mov	r0, r3
 8101b8a:	3718      	adds	r7, #24
 8101b8c:	46bd      	mov	sp, r7
 8101b8e:	bd80      	pop	{r7, pc}

08101b90 <_ZNSaINSt8__detail10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestEPKcELb0EEEED1Ev>:
 8101b90:	b480      	push	{r7}
 8101b92:	b083      	sub	sp, #12
 8101b94:	af00      	add	r7, sp, #0
 8101b96:	6078      	str	r0, [r7, #4]
 8101b98:	687b      	ldr	r3, [r7, #4]
 8101b9a:	4618      	mov	r0, r3
 8101b9c:	370c      	adds	r7, #12
 8101b9e:	46bd      	mov	sp, r7
 8101ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101ba4:	4770      	bx	lr

08101ba6 <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_PKcESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE5clearEv>:
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
 8101ba6:	b580      	push	{r7, lr}
 8101ba8:	b082      	sub	sp, #8
 8101baa:	af00      	add	r7, sp, #0
 8101bac:	6078      	str	r0, [r7, #4]
      this->_M_deallocate_nodes(_M_begin());
 8101bae:	6878      	ldr	r0, [r7, #4]
 8101bb0:	f000 f908 	bl	8101dc4 <_ZNKSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_PKcESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE8_M_beginEv>
 8101bb4:	4603      	mov	r3, r0
 8101bb6:	4619      	mov	r1, r3
 8101bb8:	6878      	ldr	r0, [r7, #4]
 8101bba:	f000 f90f 	bl	8101ddc <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestEPKcELb0EEEEE19_M_deallocate_nodesEPS9_>
      __builtin_memset(_M_buckets, 0,
 8101bbe:	687b      	ldr	r3, [r7, #4]
 8101bc0:	681a      	ldr	r2, [r3, #0]
		       _M_bucket_count * sizeof(__node_base_ptr));
 8101bc2:	687b      	ldr	r3, [r7, #4]
 8101bc4:	685b      	ldr	r3, [r3, #4]
      __builtin_memset(_M_buckets, 0,
 8101bc6:	009b      	lsls	r3, r3, #2
 8101bc8:	4610      	mov	r0, r2
 8101bca:	461a      	mov	r2, r3
 8101bcc:	2100      	movs	r1, #0
 8101bce:	f025 f865 	bl	8126c9c <memset>
      _M_element_count = 0;
 8101bd2:	687b      	ldr	r3, [r7, #4]
 8101bd4:	2200      	movs	r2, #0
 8101bd6:	60da      	str	r2, [r3, #12]
      _M_before_begin._M_nxt = nullptr;
 8101bd8:	687b      	ldr	r3, [r7, #4]
 8101bda:	2200      	movs	r2, #0
 8101bdc:	609a      	str	r2, [r3, #8]
    }
 8101bde:	bf00      	nop
 8101be0:	3708      	adds	r7, #8
 8101be2:	46bd      	mov	sp, r7
 8101be4:	bd80      	pop	{r7, pc}

08101be6 <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_PKcESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_deallocate_bucketsEv>:
      _M_deallocate_buckets()
 8101be6:	b580      	push	{r7, lr}
 8101be8:	b082      	sub	sp, #8
 8101bea:	af00      	add	r7, sp, #0
 8101bec:	6078      	str	r0, [r7, #4]
      { _M_deallocate_buckets(_M_buckets, _M_bucket_count); }
 8101bee:	687b      	ldr	r3, [r7, #4]
 8101bf0:	6819      	ldr	r1, [r3, #0]
 8101bf2:	687b      	ldr	r3, [r7, #4]
 8101bf4:	685b      	ldr	r3, [r3, #4]
 8101bf6:	461a      	mov	r2, r3
 8101bf8:	6878      	ldr	r0, [r7, #4]
 8101bfa:	f000 f907 	bl	8101e0c <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_PKcESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_deallocate_bucketsEPPNS8_15_Hash_node_baseEj>
 8101bfe:	bf00      	nop
 8101c00:	3708      	adds	r7, #8
 8101c02:	46bd      	mov	sp, r7
 8101c04:	bd80      	pop	{r7, pc}

08101c06 <_ZNKSt16initializer_listISt4pairIKN7APIDoIP12EDoIPRequestES0_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEEE4sizeEv>:
      size() const noexcept { return _M_len; }
 8101c06:	b480      	push	{r7}
 8101c08:	b083      	sub	sp, #12
 8101c0a:	af00      	add	r7, sp, #0
 8101c0c:	6078      	str	r0, [r7, #4]
 8101c0e:	687b      	ldr	r3, [r7, #4]
 8101c10:	685b      	ldr	r3, [r3, #4]
 8101c12:	4618      	mov	r0, r3
 8101c14:	370c      	adds	r7, #12
 8101c16:	46bd      	mov	sp, r7
 8101c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101c1c:	4770      	bx	lr

08101c1e <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEEC1EjRKSH_RKSF_RKSB_>:
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
 8101c1e:	b580      	push	{r7, lr}
 8101c20:	b086      	sub	sp, #24
 8101c22:	af00      	add	r7, sp, #0
 8101c24:	60f8      	str	r0, [r7, #12]
 8101c26:	60b9      	str	r1, [r7, #8]
 8101c28:	607a      	str	r2, [r7, #4]
 8101c2a:	603b      	str	r3, [r7, #0]
    : _Hashtable(__h, __eq, __a)
 8101c2c:	6a3b      	ldr	r3, [r7, #32]
 8101c2e:	683a      	ldr	r2, [r7, #0]
 8101c30:	6879      	ldr	r1, [r7, #4]
 8101c32:	68f8      	ldr	r0, [r7, #12]
 8101c34:	f000 f901 	bl	8101e3a <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEEC1ERKSH_RKSF_RKSB_>
      auto __bkt_count = _M_rehash_policy._M_next_bkt(__bkt_count_hint);
 8101c38:	68fb      	ldr	r3, [r7, #12]
 8101c3a:	3310      	adds	r3, #16
 8101c3c:	68b9      	ldr	r1, [r7, #8]
 8101c3e:	4618      	mov	r0, r3
 8101c40:	f023 ff90 	bl	8125b64 <_ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEj>
 8101c44:	6178      	str	r0, [r7, #20]
      if (__bkt_count > _M_bucket_count)
 8101c46:	68fb      	ldr	r3, [r7, #12]
 8101c48:	685b      	ldr	r3, [r3, #4]
 8101c4a:	697a      	ldr	r2, [r7, #20]
 8101c4c:	429a      	cmp	r2, r3
 8101c4e:	d909      	bls.n	8101c64 <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEEC1EjRKSH_RKSF_RKSB_+0x46>
	  _M_buckets = _M_allocate_buckets(__bkt_count);
 8101c50:	6979      	ldr	r1, [r7, #20]
 8101c52:	68f8      	ldr	r0, [r7, #12]
 8101c54:	f000 f931 	bl	8101eba <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_allocate_bucketsEj>
 8101c58:	4602      	mov	r2, r0
 8101c5a:	68fb      	ldr	r3, [r7, #12]
 8101c5c:	601a      	str	r2, [r3, #0]
	  _M_bucket_count = __bkt_count;
 8101c5e:	68fb      	ldr	r3, [r7, #12]
 8101c60:	697a      	ldr	r2, [r7, #20]
 8101c62:	605a      	str	r2, [r3, #4]
    }
 8101c64:	68fb      	ldr	r3, [r7, #12]
 8101c66:	4618      	mov	r0, r3
 8101c68:	3718      	adds	r7, #24
 8101c6a:	46bd      	mov	sp, r7
 8101c6c:	bd80      	pop	{r7, pc}

08101c6e <_ZNSt8__detail12_Insert_baseIN7APIDoIP12EDoIPRequestESt4pairIKS2_S3_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISB_ENS_10_Select1stESt8equal_toIS2_ESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_20_Prime_rehash_policyENS_17_Hashtable_traitsILb0ELb0ELb1EEEE6insertERKSB_>:
      insert(const value_type& __v)
 8101c6e:	b590      	push	{r4, r7, lr}
 8101c70:	b089      	sub	sp, #36	@ 0x24
 8101c72:	af02      	add	r7, sp, #8
 8101c74:	60f8      	str	r0, [r7, #12]
 8101c76:	60b9      	str	r1, [r7, #8]
 8101c78:	607a      	str	r2, [r7, #4]
	__hashtable& __h = _M_conjure_hashtable();
 8101c7a:	68b8      	ldr	r0, [r7, #8]
 8101c7c:	f000 f93a 	bl	8101ef4 <_ZNSt8__detail12_Insert_baseIN7APIDoIP12EDoIPRequestESt4pairIKS2_S3_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISB_ENS_10_Select1stESt8equal_toIS2_ESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_20_Prime_rehash_policyENS_17_Hashtable_traitsILb0ELb0ELb1EEEE20_M_conjure_hashtableEv>
 8101c80:	6178      	str	r0, [r7, #20]
	__node_gen_type __node_gen(__h);
 8101c82:	f107 0310 	add.w	r3, r7, #16
 8101c86:	6979      	ldr	r1, [r7, #20]
 8101c88:	4618      	mov	r0, r3
 8101c8a:	f000 f93e 	bl	8101f0a <_ZNSt8__detail10_AllocNodeISaINS_10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEEEEC1ERNS_16_Hashtable_allocISE_EE>
	return __h._M_insert(__v, __node_gen, __unique_keys{});
 8101c8e:	68f8      	ldr	r0, [r7, #12]
 8101c90:	f107 0310 	add.w	r3, r7, #16
 8101c94:	f88d 4000 	strb.w	r4, [sp]
 8101c98:	687a      	ldr	r2, [r7, #4]
 8101c9a:	6979      	ldr	r1, [r7, #20]
 8101c9c:	f000 f944 	bl	8101f28 <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE9_M_insertIRKSA_NSC_10_AllocNodeISaINSC_10_Hash_nodeISA_Lb0EEEEEEEES2_INSC_14_Node_iteratorISA_Lb0ELb0EEEbEOT_RKT0_St17integral_constantIbLb1EE>
 8101ca0:	bf00      	nop
      }
 8101ca2:	68f8      	ldr	r0, [r7, #12]
 8101ca4:	371c      	adds	r7, #28
 8101ca6:	46bd      	mov	sp, r7
 8101ca8:	bd90      	pop	{r4, r7, pc}

08101caa <_ZNKSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE8_M_beginEv>:
      _M_begin() const
 8101caa:	b480      	push	{r7}
 8101cac:	b083      	sub	sp, #12
 8101cae:	af00      	add	r7, sp, #0
 8101cb0:	6078      	str	r0, [r7, #4]
      { return static_cast<__node_ptr>(_M_before_begin._M_nxt); }
 8101cb2:	687b      	ldr	r3, [r7, #4]
 8101cb4:	689b      	ldr	r3, [r3, #8]
 8101cb6:	4618      	mov	r0, r3
 8101cb8:	370c      	adds	r7, #12
 8101cba:	46bd      	mov	sp, r7
 8101cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101cc0:	4770      	bx	lr

08101cc2 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEEEE19_M_deallocate_nodesEPSD_>:
      __node_alloc_traits::deallocate(_M_node_allocator(), __ptr, 1);
    }

  template<typename _NodeAlloc>
    void
    _Hashtable_alloc<_NodeAlloc>::_M_deallocate_nodes(__node_ptr __n)
 8101cc2:	b580      	push	{r7, lr}
 8101cc4:	b084      	sub	sp, #16
 8101cc6:	af00      	add	r7, sp, #0
 8101cc8:	6078      	str	r0, [r7, #4]
 8101cca:	6039      	str	r1, [r7, #0]
    {
      while (__n)
 8101ccc:	e009      	b.n	8101ce2 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEEEE19_M_deallocate_nodesEPSD_+0x20>
	{
	  __node_ptr __tmp = __n;
 8101cce:	683b      	ldr	r3, [r7, #0]
 8101cd0:	60fb      	str	r3, [r7, #12]
	  __n = __n->_M_next();
 8101cd2:	6838      	ldr	r0, [r7, #0]
 8101cd4:	f000 f94f 	bl	8101f76 <_ZNKSt8__detail10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES1_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EE7_M_nextEv>
 8101cd8:	6038      	str	r0, [r7, #0]
	  _M_deallocate_node(__tmp);
 8101cda:	68f9      	ldr	r1, [r7, #12]
 8101cdc:	6878      	ldr	r0, [r7, #4]
 8101cde:	f000 f956 	bl	8101f8e <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEEEE18_M_deallocate_nodeEPSD_>
      while (__n)
 8101ce2:	683b      	ldr	r3, [r7, #0]
 8101ce4:	2b00      	cmp	r3, #0
 8101ce6:	d1f2      	bne.n	8101cce <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEEEE19_M_deallocate_nodesEPSD_+0xc>
	}
    }
 8101ce8:	bf00      	nop
 8101cea:	bf00      	nop
 8101cec:	3710      	adds	r7, #16
 8101cee:	46bd      	mov	sp, r7
 8101cf0:	bd80      	pop	{r7, pc}

08101cf2 <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_deallocate_bucketsEPPNSC_15_Hash_node_baseEj>:
      _M_deallocate_buckets(__buckets_ptr __bkts, size_type __bkt_count)
 8101cf2:	b580      	push	{r7, lr}
 8101cf4:	b084      	sub	sp, #16
 8101cf6:	af00      	add	r7, sp, #0
 8101cf8:	60f8      	str	r0, [r7, #12]
 8101cfa:	60b9      	str	r1, [r7, #8]
 8101cfc:	607a      	str	r2, [r7, #4]
	if (_M_uses_single_bucket(__bkts))
 8101cfe:	68b9      	ldr	r1, [r7, #8]
 8101d00:	68f8      	ldr	r0, [r7, #12]
 8101d02:	f000 f95f 	bl	8101fc4 <_ZNKSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_uses_single_bucketEPPNSC_15_Hash_node_baseE>
 8101d06:	4603      	mov	r3, r0
 8101d08:	2b00      	cmp	r3, #0
 8101d0a:	d105      	bne.n	8101d18 <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_deallocate_bucketsEPPNSC_15_Hash_node_baseEj+0x26>
	__hashtable_alloc::_M_deallocate_buckets(__bkts, __bkt_count);
 8101d0c:	687a      	ldr	r2, [r7, #4]
 8101d0e:	68b9      	ldr	r1, [r7, #8]
 8101d10:	68f8      	ldr	r0, [r7, #12]
 8101d12:	f000 f96f 	bl	8101ff4 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEEEE21_M_deallocate_bucketsEPPNS_15_Hash_node_baseEj>
 8101d16:	e000      	b.n	8101d1a <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_deallocate_bucketsEPPNSC_15_Hash_node_baseEj+0x28>
	  return;
 8101d18:	bf00      	nop
      }
 8101d1a:	3710      	adds	r7, #16
 8101d1c:	46bd      	mov	sp, r7
 8101d1e:	bd80      	pop	{r7, pc}

08101d20 <_ZNKSt16initializer_listISt4pairIKN7APIDoIP12EDoIPRequestEPKcEE4sizeEv>:
 8101d20:	b480      	push	{r7}
 8101d22:	b083      	sub	sp, #12
 8101d24:	af00      	add	r7, sp, #0
 8101d26:	6078      	str	r0, [r7, #4]
 8101d28:	687b      	ldr	r3, [r7, #4]
 8101d2a:	685b      	ldr	r3, [r3, #4]
 8101d2c:	4618      	mov	r0, r3
 8101d2e:	370c      	adds	r7, #12
 8101d30:	46bd      	mov	sp, r7
 8101d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101d36:	4770      	bx	lr

08101d38 <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_PKcESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEEC1EjRKSD_RKSB_RKS7_>:
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
 8101d38:	b580      	push	{r7, lr}
 8101d3a:	b086      	sub	sp, #24
 8101d3c:	af00      	add	r7, sp, #0
 8101d3e:	60f8      	str	r0, [r7, #12]
 8101d40:	60b9      	str	r1, [r7, #8]
 8101d42:	607a      	str	r2, [r7, #4]
 8101d44:	603b      	str	r3, [r7, #0]
    : _Hashtable(__h, __eq, __a)
 8101d46:	6a3b      	ldr	r3, [r7, #32]
 8101d48:	683a      	ldr	r2, [r7, #0]
 8101d4a:	6879      	ldr	r1, [r7, #4]
 8101d4c:	68f8      	ldr	r0, [r7, #12]
 8101d4e:	f000 f974 	bl	810203a <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_PKcESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEEC1ERKSD_RKSB_RKS7_>
      auto __bkt_count = _M_rehash_policy._M_next_bkt(__bkt_count_hint);
 8101d52:	68fb      	ldr	r3, [r7, #12]
 8101d54:	3310      	adds	r3, #16
 8101d56:	68b9      	ldr	r1, [r7, #8]
 8101d58:	4618      	mov	r0, r3
 8101d5a:	f023 ff03 	bl	8125b64 <_ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEj>
 8101d5e:	6178      	str	r0, [r7, #20]
      if (__bkt_count > _M_bucket_count)
 8101d60:	68fb      	ldr	r3, [r7, #12]
 8101d62:	685b      	ldr	r3, [r3, #4]
 8101d64:	697a      	ldr	r2, [r7, #20]
 8101d66:	429a      	cmp	r2, r3
 8101d68:	d909      	bls.n	8101d7e <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_PKcESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEEC1EjRKSD_RKSB_RKS7_+0x46>
	  _M_buckets = _M_allocate_buckets(__bkt_count);
 8101d6a:	6979      	ldr	r1, [r7, #20]
 8101d6c:	68f8      	ldr	r0, [r7, #12]
 8101d6e:	f000 f9a4 	bl	81020ba <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_PKcESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_allocate_bucketsEj>
 8101d72:	4602      	mov	r2, r0
 8101d74:	68fb      	ldr	r3, [r7, #12]
 8101d76:	601a      	str	r2, [r3, #0]
	  _M_bucket_count = __bkt_count;
 8101d78:	68fb      	ldr	r3, [r7, #12]
 8101d7a:	697a      	ldr	r2, [r7, #20]
 8101d7c:	605a      	str	r2, [r3, #4]
    }
 8101d7e:	68fb      	ldr	r3, [r7, #12]
 8101d80:	4618      	mov	r0, r3
 8101d82:	3718      	adds	r7, #24
 8101d84:	46bd      	mov	sp, r7
 8101d86:	bd80      	pop	{r7, pc}

08101d88 <_ZNSt8__detail12_Insert_baseIN7APIDoIP12EDoIPRequestESt4pairIKS2_PKcESaIS7_ENS_10_Select1stESt8equal_toIS2_ESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_20_Prime_rehash_policyENS_17_Hashtable_traitsILb0ELb0ELb1EEEE6insertERKS7_>:
      insert(const value_type& __v)
 8101d88:	b590      	push	{r4, r7, lr}
 8101d8a:	b089      	sub	sp, #36	@ 0x24
 8101d8c:	af02      	add	r7, sp, #8
 8101d8e:	60f8      	str	r0, [r7, #12]
 8101d90:	60b9      	str	r1, [r7, #8]
 8101d92:	607a      	str	r2, [r7, #4]
	__hashtable& __h = _M_conjure_hashtable();
 8101d94:	68b8      	ldr	r0, [r7, #8]
 8101d96:	f000 f9ad 	bl	81020f4 <_ZNSt8__detail12_Insert_baseIN7APIDoIP12EDoIPRequestESt4pairIKS2_PKcESaIS7_ENS_10_Select1stESt8equal_toIS2_ESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_20_Prime_rehash_policyENS_17_Hashtable_traitsILb0ELb0ELb1EEEE20_M_conjure_hashtableEv>
 8101d9a:	6178      	str	r0, [r7, #20]
	__node_gen_type __node_gen(__h);
 8101d9c:	f107 0310 	add.w	r3, r7, #16
 8101da0:	6979      	ldr	r1, [r7, #20]
 8101da2:	4618      	mov	r0, r3
 8101da4:	f000 f9b1 	bl	810210a <_ZNSt8__detail10_AllocNodeISaINS_10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestEPKcELb0EEEEEC1ERNS_16_Hashtable_allocISA_EE>
	return __h._M_insert(__v, __node_gen, __unique_keys{});
 8101da8:	68f8      	ldr	r0, [r7, #12]
 8101daa:	f107 0310 	add.w	r3, r7, #16
 8101dae:	f88d 4000 	strb.w	r4, [sp]
 8101db2:	687a      	ldr	r2, [r7, #4]
 8101db4:	6979      	ldr	r1, [r7, #20]
 8101db6:	f000 f9b7 	bl	8102128 <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_PKcESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE9_M_insertIRKS6_NS8_10_AllocNodeISaINS8_10_Hash_nodeIS6_Lb0EEEEEEEES2_INS8_14_Node_iteratorIS6_Lb0ELb0EEEbEOT_RKT0_St17integral_constantIbLb1EE>
 8101dba:	bf00      	nop
      }
 8101dbc:	68f8      	ldr	r0, [r7, #12]
 8101dbe:	371c      	adds	r7, #28
 8101dc0:	46bd      	mov	sp, r7
 8101dc2:	bd90      	pop	{r4, r7, pc}

08101dc4 <_ZNKSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_PKcESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE8_M_beginEv>:
      _M_begin() const
 8101dc4:	b480      	push	{r7}
 8101dc6:	b083      	sub	sp, #12
 8101dc8:	af00      	add	r7, sp, #0
 8101dca:	6078      	str	r0, [r7, #4]
      { return static_cast<__node_ptr>(_M_before_begin._M_nxt); }
 8101dcc:	687b      	ldr	r3, [r7, #4]
 8101dce:	689b      	ldr	r3, [r3, #8]
 8101dd0:	4618      	mov	r0, r3
 8101dd2:	370c      	adds	r7, #12
 8101dd4:	46bd      	mov	sp, r7
 8101dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101dda:	4770      	bx	lr

08101ddc <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestEPKcELb0EEEEE19_M_deallocate_nodesEPS9_>:
    _Hashtable_alloc<_NodeAlloc>::_M_deallocate_nodes(__node_ptr __n)
 8101ddc:	b580      	push	{r7, lr}
 8101dde:	b084      	sub	sp, #16
 8101de0:	af00      	add	r7, sp, #0
 8101de2:	6078      	str	r0, [r7, #4]
 8101de4:	6039      	str	r1, [r7, #0]
      while (__n)
 8101de6:	e009      	b.n	8101dfc <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestEPKcELb0EEEEE19_M_deallocate_nodesEPS9_+0x20>
	  __node_ptr __tmp = __n;
 8101de8:	683b      	ldr	r3, [r7, #0]
 8101dea:	60fb      	str	r3, [r7, #12]
	  __n = __n->_M_next();
 8101dec:	6838      	ldr	r0, [r7, #0]
 8101dee:	f000 f9c2 	bl	8102176 <_ZNKSt8__detail10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestEPKcELb0EE7_M_nextEv>
 8101df2:	6038      	str	r0, [r7, #0]
	  _M_deallocate_node(__tmp);
 8101df4:	68f9      	ldr	r1, [r7, #12]
 8101df6:	6878      	ldr	r0, [r7, #4]
 8101df8:	f000 f9c9 	bl	810218e <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestEPKcELb0EEEEE18_M_deallocate_nodeEPS9_>
      while (__n)
 8101dfc:	683b      	ldr	r3, [r7, #0]
 8101dfe:	2b00      	cmp	r3, #0
 8101e00:	d1f2      	bne.n	8101de8 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestEPKcELb0EEEEE19_M_deallocate_nodesEPS9_+0xc>
    }
 8101e02:	bf00      	nop
 8101e04:	bf00      	nop
 8101e06:	3710      	adds	r7, #16
 8101e08:	46bd      	mov	sp, r7
 8101e0a:	bd80      	pop	{r7, pc}

08101e0c <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_PKcESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_deallocate_bucketsEPPNS8_15_Hash_node_baseEj>:
      _M_deallocate_buckets(__buckets_ptr __bkts, size_type __bkt_count)
 8101e0c:	b580      	push	{r7, lr}
 8101e0e:	b084      	sub	sp, #16
 8101e10:	af00      	add	r7, sp, #0
 8101e12:	60f8      	str	r0, [r7, #12]
 8101e14:	60b9      	str	r1, [r7, #8]
 8101e16:	607a      	str	r2, [r7, #4]
	if (_M_uses_single_bucket(__bkts))
 8101e18:	68b9      	ldr	r1, [r7, #8]
 8101e1a:	68f8      	ldr	r0, [r7, #12]
 8101e1c:	f000 f9d2 	bl	81021c4 <_ZNKSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_PKcESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_uses_single_bucketEPPNS8_15_Hash_node_baseE>
 8101e20:	4603      	mov	r3, r0
 8101e22:	2b00      	cmp	r3, #0
 8101e24:	d105      	bne.n	8101e32 <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_PKcESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_deallocate_bucketsEPPNS8_15_Hash_node_baseEj+0x26>
	__hashtable_alloc::_M_deallocate_buckets(__bkts, __bkt_count);
 8101e26:	687a      	ldr	r2, [r7, #4]
 8101e28:	68b9      	ldr	r1, [r7, #8]
 8101e2a:	68f8      	ldr	r0, [r7, #12]
 8101e2c:	f000 f9e2 	bl	81021f4 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestEPKcELb0EEEEE21_M_deallocate_bucketsEPPNS_15_Hash_node_baseEj>
 8101e30:	e000      	b.n	8101e34 <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_PKcESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_deallocate_bucketsEPPNS8_15_Hash_node_baseEj+0x28>
	  return;
 8101e32:	bf00      	nop
      }
 8101e34:	3710      	adds	r7, #16
 8101e36:	46bd      	mov	sp, r7
 8101e38:	bd80      	pop	{r7, pc}

08101e3a <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEEC1ERKSH_RKSF_RKSB_>:
      _Hashtable(const _Hash& __h, const _Equal& __eq,
 8101e3a:	b590      	push	{r4, r7, lr}
 8101e3c:	b087      	sub	sp, #28
 8101e3e:	af00      	add	r7, sp, #0
 8101e40:	60f8      	str	r0, [r7, #12]
 8101e42:	60b9      	str	r1, [r7, #8]
 8101e44:	607a      	str	r2, [r7, #4]
 8101e46:	603b      	str	r3, [r7, #0]
	__enable_default_ctor(_Enable_default_constructor_tag{})
 8101e48:	687a      	ldr	r2, [r7, #4]
 8101e4a:	68b9      	ldr	r1, [r7, #8]
 8101e4c:	68f8      	ldr	r0, [r7, #12]
 8101e4e:	f000 fa01 	bl	8102254 <_ZNSt8__detail15_Hashtable_baseIN7APIDoIP12EDoIPRequestESt4pairIKS2_S3_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEENS_10_Select1stESt8equal_toIS2_ESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEEC1ERKSG_RKSE_>
	__hashtable_alloc(__node_alloc_type(__a)),
 8101e52:	f107 0314 	add.w	r3, r7, #20
 8101e56:	6839      	ldr	r1, [r7, #0]
 8101e58:	4618      	mov	r0, r3
 8101e5a:	f000 f9ee 	bl	810223a <_ZNSaINSt8__detail10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES1_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEEEC1ISB_EERKSaIT_E>
	__enable_default_ctor(_Enable_default_constructor_tag{})
 8101e5e:	f107 0314 	add.w	r3, r7, #20
 8101e62:	4619      	mov	r1, r3
 8101e64:	68f8      	ldr	r0, [r7, #12]
 8101e66:	f000 fa08 	bl	810227a <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEEEEC1ISE_EEOT_>
	__hashtable_alloc(__node_alloc_type(__a)),
 8101e6a:	f107 0314 	add.w	r3, r7, #20
 8101e6e:	4618      	mov	r0, r3
 8101e70:	f7ff fe12 	bl	8101a98 <_ZNSaINSt8__detail10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES1_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEEED1Ev>
	__enable_default_ctor(_Enable_default_constructor_tag{})
 8101e74:	4621      	mov	r1, r4
 8101e76:	68f8      	ldr	r0, [r7, #12]
 8101e78:	f000 fa11 	bl	810229e <_ZNSt27_Enable_default_constructorILb1ENSt8__detail15_Hash_node_baseEEC1ESt31_Enable_default_constructor_tag>
 8101e7c:	68fb      	ldr	r3, [r7, #12]
 8101e7e:	f103 0218 	add.w	r2, r3, #24
 8101e82:	68fb      	ldr	r3, [r7, #12]
 8101e84:	601a      	str	r2, [r3, #0]
 8101e86:	68fb      	ldr	r3, [r7, #12]
 8101e88:	2201      	movs	r2, #1
 8101e8a:	605a      	str	r2, [r3, #4]
 8101e8c:	68fb      	ldr	r3, [r7, #12]
 8101e8e:	3308      	adds	r3, #8
 8101e90:	4618      	mov	r0, r3
 8101e92:	f7ff fa55 	bl	8101340 <_ZNSt8__detail15_Hash_node_baseC1Ev>
 8101e96:	68fb      	ldr	r3, [r7, #12]
 8101e98:	2200      	movs	r2, #0
 8101e9a:	60da      	str	r2, [r3, #12]
 8101e9c:	68fb      	ldr	r3, [r7, #12]
 8101e9e:	3310      	adds	r3, #16
 8101ea0:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8101ea4:	4618      	mov	r0, r3
 8101ea6:	f7ff fa6d 	bl	8101384 <_ZNSt8__detail20_Prime_rehash_policyC1Ef>
 8101eaa:	68fb      	ldr	r3, [r7, #12]
 8101eac:	2200      	movs	r2, #0
 8101eae:	619a      	str	r2, [r3, #24]
      { }
 8101eb0:	68fb      	ldr	r3, [r7, #12]
 8101eb2:	4618      	mov	r0, r3
 8101eb4:	371c      	adds	r7, #28
 8101eb6:	46bd      	mov	sp, r7
 8101eb8:	bd90      	pop	{r4, r7, pc}

08101eba <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_allocate_bucketsEj>:
      _M_allocate_buckets(size_type __bkt_count)
 8101eba:	b580      	push	{r7, lr}
 8101ebc:	b082      	sub	sp, #8
 8101ebe:	af00      	add	r7, sp, #0
 8101ec0:	6078      	str	r0, [r7, #4]
 8101ec2:	6039      	str	r1, [r7, #0]
	if (__builtin_expect(__bkt_count == 1, false))
 8101ec4:	683b      	ldr	r3, [r7, #0]
 8101ec6:	2b01      	cmp	r3, #1
 8101ec8:	bf0c      	ite	eq
 8101eca:	2301      	moveq	r3, #1
 8101ecc:	2300      	movne	r3, #0
 8101ece:	b2db      	uxtb	r3, r3
 8101ed0:	2b00      	cmp	r3, #0
 8101ed2:	d005      	beq.n	8101ee0 <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_allocate_bucketsEj+0x26>
	    _M_single_bucket = nullptr;
 8101ed4:	687b      	ldr	r3, [r7, #4]
 8101ed6:	2200      	movs	r2, #0
 8101ed8:	619a      	str	r2, [r3, #24]
	    return &_M_single_bucket;
 8101eda:	687b      	ldr	r3, [r7, #4]
 8101edc:	3318      	adds	r3, #24
 8101ede:	e005      	b.n	8101eec <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_allocate_bucketsEj+0x32>
	return __hashtable_alloc::_M_allocate_buckets(__bkt_count);
 8101ee0:	6839      	ldr	r1, [r7, #0]
 8101ee2:	6878      	ldr	r0, [r7, #4]
 8101ee4:	f000 f9e7 	bl	81022b6 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEEEE19_M_allocate_bucketsEj>
 8101ee8:	4603      	mov	r3, r0
 8101eea:	bf00      	nop
      }
 8101eec:	4618      	mov	r0, r3
 8101eee:	3708      	adds	r7, #8
 8101ef0:	46bd      	mov	sp, r7
 8101ef2:	bd80      	pop	{r7, pc}

08101ef4 <_ZNSt8__detail12_Insert_baseIN7APIDoIP12EDoIPRequestESt4pairIKS2_S3_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISB_ENS_10_Select1stESt8equal_toIS2_ESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_20_Prime_rehash_policyENS_17_Hashtable_traitsILb0ELb0ELb1EEEE20_M_conjure_hashtableEv>:
      _M_conjure_hashtable()
 8101ef4:	b480      	push	{r7}
 8101ef6:	b083      	sub	sp, #12
 8101ef8:	af00      	add	r7, sp, #0
 8101efa:	6078      	str	r0, [r7, #4]
      { return *(static_cast<__hashtable*>(this)); }
 8101efc:	687b      	ldr	r3, [r7, #4]
 8101efe:	4618      	mov	r0, r3
 8101f00:	370c      	adds	r7, #12
 8101f02:	46bd      	mov	sp, r7
 8101f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101f08:	4770      	bx	lr

08101f0a <_ZNSt8__detail10_AllocNodeISaINS_10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEEEEC1ERNS_16_Hashtable_allocISE_EE>:
      _AllocNode(__hashtable_alloc& __h)
 8101f0a:	b480      	push	{r7}
 8101f0c:	b083      	sub	sp, #12
 8101f0e:	af00      	add	r7, sp, #0
 8101f10:	6078      	str	r0, [r7, #4]
 8101f12:	6039      	str	r1, [r7, #0]
      : _M_h(__h) { }
 8101f14:	687b      	ldr	r3, [r7, #4]
 8101f16:	683a      	ldr	r2, [r7, #0]
 8101f18:	601a      	str	r2, [r3, #0]
 8101f1a:	687b      	ldr	r3, [r7, #4]
 8101f1c:	4618      	mov	r0, r3
 8101f1e:	370c      	adds	r7, #12
 8101f20:	46bd      	mov	sp, r7
 8101f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101f26:	4770      	bx	lr

08101f28 <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE9_M_insertIRKSA_NSC_10_AllocNodeISaINSC_10_Hash_nodeISA_Lb0EEEEEEEES2_INSC_14_Node_iteratorISA_Lb0ELb0EEEbEOT_RKT0_St17integral_constantIbLb1EE>:
	_M_insert(_Arg&& __arg, const _NodeGenerator& __node_gen,
 8101f28:	b590      	push	{r4, r7, lr}
 8101f2a:	b089      	sub	sp, #36	@ 0x24
 8101f2c:	af02      	add	r7, sp, #8
 8101f2e:	60f8      	str	r0, [r7, #12]
 8101f30:	60b9      	str	r1, [r7, #8]
 8101f32:	607a      	str	r2, [r7, #4]
 8101f34:	603b      	str	r3, [r7, #0]
	    _S_forward_key(_ExtractKey{}(std::forward<_Arg>(__arg))),
 8101f36:	6878      	ldr	r0, [r7, #4]
 8101f38:	f000 f9ea 	bl	8102310 <_ZSt7forwardIRKSt4pairIKN7APIDoIP12EDoIPRequestES0_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEEEOT_RNSt16remove_referenceISD_E4typeE>
 8101f3c:	4602      	mov	r2, r0
 8101f3e:	f107 0314 	add.w	r3, r7, #20
 8101f42:	4611      	mov	r1, r2
 8101f44:	4618      	mov	r0, r3
 8101f46:	f000 f9ee 	bl	8102326 <_ZNKSt8__detail10_Select1stclIRKSt4pairIKN7APIDoIP12EDoIPRequestES2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEEEEONS0_10__1st_typeIT_E4typeEOSG_>
 8101f4a:	4603      	mov	r3, r0
 8101f4c:	4618      	mov	r0, r3
 8101f4e:	f000 f9f7 	bl	8102340 <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE14_S_forward_keyERS3_>
 8101f52:	4604      	mov	r4, r0
	  return _M_insert_unique(
 8101f54:	6878      	ldr	r0, [r7, #4]
 8101f56:	f000 f9db 	bl	8102310 <_ZSt7forwardIRKSt4pairIKN7APIDoIP12EDoIPRequestES0_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEEEOT_RNSt16remove_referenceISD_E4typeE>
 8101f5a:	4602      	mov	r2, r0
 8101f5c:	68f8      	ldr	r0, [r7, #12]
 8101f5e:	683b      	ldr	r3, [r7, #0]
 8101f60:	9300      	str	r3, [sp, #0]
 8101f62:	4613      	mov	r3, r2
 8101f64:	4622      	mov	r2, r4
 8101f66:	68b9      	ldr	r1, [r7, #8]
 8101f68:	f000 f9f5 	bl	8102356 <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE16_M_insert_uniqueIRS3_RKSA_NSC_10_AllocNodeISaINSC_10_Hash_nodeISA_Lb0EEEEEEEES2_INSC_14_Node_iteratorISA_Lb0ELb0EEEbEOT_OT0_RKT1_>
	    std::forward<_Arg>(__arg), __node_gen);
 8101f6c:	bf00      	nop
	}
 8101f6e:	68f8      	ldr	r0, [r7, #12]
 8101f70:	371c      	adds	r7, #28
 8101f72:	46bd      	mov	sp, r7
 8101f74:	bd90      	pop	{r4, r7, pc}

08101f76 <_ZNKSt8__detail10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES1_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EE7_M_nextEv>:
      _M_next() const noexcept
 8101f76:	b480      	push	{r7}
 8101f78:	b083      	sub	sp, #12
 8101f7a:	af00      	add	r7, sp, #0
 8101f7c:	6078      	str	r0, [r7, #4]
      { return static_cast<_Hash_node*>(this->_M_nxt); }
 8101f7e:	687b      	ldr	r3, [r7, #4]
 8101f80:	681b      	ldr	r3, [r3, #0]
 8101f82:	4618      	mov	r0, r3
 8101f84:	370c      	adds	r7, #12
 8101f86:	46bd      	mov	sp, r7
 8101f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101f8c:	4770      	bx	lr

08101f8e <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEEEE18_M_deallocate_nodeEPSD_>:
    _Hashtable_alloc<_NodeAlloc>::_M_deallocate_node(__node_ptr __n)
 8101f8e:	b590      	push	{r4, r7, lr}
 8101f90:	b083      	sub	sp, #12
 8101f92:	af00      	add	r7, sp, #0
 8101f94:	6078      	str	r0, [r7, #4]
 8101f96:	6039      	str	r1, [r7, #0]
      __node_alloc_traits::destroy(_M_node_allocator(), __n->_M_valptr());
 8101f98:	6878      	ldr	r0, [r7, #4]
 8101f9a:	f000 fa8d 	bl	81024b8 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEEEE17_M_node_allocatorEv>
 8101f9e:	4604      	mov	r4, r0
 8101fa0:	683b      	ldr	r3, [r7, #0]
 8101fa2:	3304      	adds	r3, #4
 8101fa4:	4618      	mov	r0, r3
 8101fa6:	f000 fa93 	bl	81024d0 <_ZNSt8__detail21_Hash_node_value_baseISt4pairIKN7APIDoIP12EDoIPRequestES1_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEEE9_M_valptrEv>
 8101faa:	4603      	mov	r3, r0
 8101fac:	4619      	mov	r1, r3
 8101fae:	4620      	mov	r0, r4
 8101fb0:	f000 fa9b 	bl	81024ea <_ZNSt16allocator_traitsISaINSt8__detail10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEEEE7destroyISC_EEvRSE_PT_>
      _M_deallocate_node_ptr(__n);
 8101fb4:	6839      	ldr	r1, [r7, #0]
 8101fb6:	6878      	ldr	r0, [r7, #4]
 8101fb8:	f000 faa3 	bl	8102502 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEEEE22_M_deallocate_node_ptrEPSD_>
    }
 8101fbc:	bf00      	nop
 8101fbe:	370c      	adds	r7, #12
 8101fc0:	46bd      	mov	sp, r7
 8101fc2:	bd90      	pop	{r4, r7, pc}

08101fc4 <_ZNKSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_uses_single_bucketEPPNSC_15_Hash_node_baseE>:
      _M_uses_single_bucket(__buckets_ptr __bkts) const
 8101fc4:	b480      	push	{r7}
 8101fc6:	b083      	sub	sp, #12
 8101fc8:	af00      	add	r7, sp, #0
 8101fca:	6078      	str	r0, [r7, #4]
 8101fcc:	6039      	str	r1, [r7, #0]
      { return __builtin_expect(__bkts == &_M_single_bucket, false); }
 8101fce:	687b      	ldr	r3, [r7, #4]
 8101fd0:	3318      	adds	r3, #24
 8101fd2:	683a      	ldr	r2, [r7, #0]
 8101fd4:	429a      	cmp	r2, r3
 8101fd6:	bf0c      	ite	eq
 8101fd8:	2301      	moveq	r3, #1
 8101fda:	2300      	movne	r3, #0
 8101fdc:	b2db      	uxtb	r3, r3
 8101fde:	2b00      	cmp	r3, #0
 8101fe0:	bf14      	ite	ne
 8101fe2:	2301      	movne	r3, #1
 8101fe4:	2300      	moveq	r3, #0
 8101fe6:	b2db      	uxtb	r3, r3
 8101fe8:	4618      	mov	r0, r3
 8101fea:	370c      	adds	r7, #12
 8101fec:	46bd      	mov	sp, r7
 8101fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101ff2:	4770      	bx	lr

08101ff4 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEEEE21_M_deallocate_bucketsEPPNS_15_Hash_node_baseEj>:
      return __p;
    }

  template<typename _NodeAlloc>
    void
    _Hashtable_alloc<_NodeAlloc>::
 8101ff4:	b580      	push	{r7, lr}
 8101ff6:	b086      	sub	sp, #24
 8101ff8:	af00      	add	r7, sp, #0
 8101ffa:	60f8      	str	r0, [r7, #12]
 8101ffc:	60b9      	str	r1, [r7, #8]
 8101ffe:	607a      	str	r2, [r7, #4]
    _M_deallocate_buckets(__buckets_ptr __bkts,
			  std::size_t __bkt_count)
    {
      typedef typename __buckets_alloc_traits::pointer _Ptr;
      auto __ptr = std::pointer_traits<_Ptr>::pointer_to(*__bkts);
 8102000:	68b8      	ldr	r0, [r7, #8]
 8102002:	f000 fa94 	bl	810252e <_ZNSt19__ptr_traits_ptr_toIPPNSt8__detail15_Hash_node_baseES2_Lb0EE10pointer_toERS2_>
 8102006:	6178      	str	r0, [r7, #20]
      __buckets_alloc_type __alloc(_M_node_allocator());
 8102008:	68f8      	ldr	r0, [r7, #12]
 810200a:	f000 fa55 	bl	81024b8 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEEEE17_M_node_allocatorEv>
 810200e:	4602      	mov	r2, r0
 8102010:	f107 0310 	add.w	r3, r7, #16
 8102014:	4611      	mov	r1, r2
 8102016:	4618      	mov	r0, r3
 8102018:	f000 fa95 	bl	8102546 <_ZNSaIPNSt8__detail15_Hash_node_baseEEC1INS_10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES5_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEEEERKSaIT_E>
      __buckets_alloc_traits::deallocate(__alloc, __ptr, __bkt_count);
 810201c:	f107 0310 	add.w	r3, r7, #16
 8102020:	687a      	ldr	r2, [r7, #4]
 8102022:	6979      	ldr	r1, [r7, #20]
 8102024:	4618      	mov	r0, r3
 8102026:	f000 faa6 	bl	8102576 <_ZNSt16allocator_traitsISaIPNSt8__detail15_Hash_node_baseEEE10deallocateERS3_PS2_j>
    }
 810202a:	f107 0310 	add.w	r3, r7, #16
 810202e:	4618      	mov	r0, r3
 8102030:	f000 fa96 	bl	8102560 <_ZNSaIPNSt8__detail15_Hash_node_baseEED1Ev>
 8102034:	3718      	adds	r7, #24
 8102036:	46bd      	mov	sp, r7
 8102038:	bd80      	pop	{r7, pc}

0810203a <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_PKcESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEEC1ERKSD_RKSB_RKS7_>:
      _Hashtable(const _Hash& __h, const _Equal& __eq,
 810203a:	b590      	push	{r4, r7, lr}
 810203c:	b087      	sub	sp, #28
 810203e:	af00      	add	r7, sp, #0
 8102040:	60f8      	str	r0, [r7, #12]
 8102042:	60b9      	str	r1, [r7, #8]
 8102044:	607a      	str	r2, [r7, #4]
 8102046:	603b      	str	r3, [r7, #0]
	__enable_default_ctor(_Enable_default_constructor_tag{})
 8102048:	687a      	ldr	r2, [r7, #4]
 810204a:	68b9      	ldr	r1, [r7, #8]
 810204c:	68f8      	ldr	r0, [r7, #12]
 810204e:	f000 fabe 	bl	81025ce <_ZNSt8__detail15_Hashtable_baseIN7APIDoIP12EDoIPRequestESt4pairIKS2_PKcENS_10_Select1stESt8equal_toIS2_ESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEEC1ERKSC_RKSA_>
	__hashtable_alloc(__node_alloc_type(__a)),
 8102052:	f107 0314 	add.w	r3, r7, #20
 8102056:	6839      	ldr	r1, [r7, #0]
 8102058:	4618      	mov	r0, r3
 810205a:	f000 faab 	bl	81025b4 <_ZNSaINSt8__detail10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestEPKcELb0EEEEC1IS7_EERKSaIT_E>
	__enable_default_ctor(_Enable_default_constructor_tag{})
 810205e:	f107 0314 	add.w	r3, r7, #20
 8102062:	4619      	mov	r1, r3
 8102064:	68f8      	ldr	r0, [r7, #12]
 8102066:	f000 fac5 	bl	81025f4 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestEPKcELb0EEEEEC1ISA_EEOT_>
	__hashtable_alloc(__node_alloc_type(__a)),
 810206a:	f107 0314 	add.w	r3, r7, #20
 810206e:	4618      	mov	r0, r3
 8102070:	f7ff fd8e 	bl	8101b90 <_ZNSaINSt8__detail10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestEPKcELb0EEEED1Ev>
	__enable_default_ctor(_Enable_default_constructor_tag{})
 8102074:	4621      	mov	r1, r4
 8102076:	68f8      	ldr	r0, [r7, #12]
 8102078:	f000 f911 	bl	810229e <_ZNSt27_Enable_default_constructorILb1ENSt8__detail15_Hash_node_baseEEC1ESt31_Enable_default_constructor_tag>
 810207c:	68fb      	ldr	r3, [r7, #12]
 810207e:	f103 0218 	add.w	r2, r3, #24
 8102082:	68fb      	ldr	r3, [r7, #12]
 8102084:	601a      	str	r2, [r3, #0]
 8102086:	68fb      	ldr	r3, [r7, #12]
 8102088:	2201      	movs	r2, #1
 810208a:	605a      	str	r2, [r3, #4]
 810208c:	68fb      	ldr	r3, [r7, #12]
 810208e:	3308      	adds	r3, #8
 8102090:	4618      	mov	r0, r3
 8102092:	f7ff f955 	bl	8101340 <_ZNSt8__detail15_Hash_node_baseC1Ev>
 8102096:	68fb      	ldr	r3, [r7, #12]
 8102098:	2200      	movs	r2, #0
 810209a:	60da      	str	r2, [r3, #12]
 810209c:	68fb      	ldr	r3, [r7, #12]
 810209e:	3310      	adds	r3, #16
 81020a0:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 81020a4:	4618      	mov	r0, r3
 81020a6:	f7ff f96d 	bl	8101384 <_ZNSt8__detail20_Prime_rehash_policyC1Ef>
 81020aa:	68fb      	ldr	r3, [r7, #12]
 81020ac:	2200      	movs	r2, #0
 81020ae:	619a      	str	r2, [r3, #24]
      { }
 81020b0:	68fb      	ldr	r3, [r7, #12]
 81020b2:	4618      	mov	r0, r3
 81020b4:	371c      	adds	r7, #28
 81020b6:	46bd      	mov	sp, r7
 81020b8:	bd90      	pop	{r4, r7, pc}

081020ba <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_PKcESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_allocate_bucketsEj>:
      _M_allocate_buckets(size_type __bkt_count)
 81020ba:	b580      	push	{r7, lr}
 81020bc:	b082      	sub	sp, #8
 81020be:	af00      	add	r7, sp, #0
 81020c0:	6078      	str	r0, [r7, #4]
 81020c2:	6039      	str	r1, [r7, #0]
	if (__builtin_expect(__bkt_count == 1, false))
 81020c4:	683b      	ldr	r3, [r7, #0]
 81020c6:	2b01      	cmp	r3, #1
 81020c8:	bf0c      	ite	eq
 81020ca:	2301      	moveq	r3, #1
 81020cc:	2300      	movne	r3, #0
 81020ce:	b2db      	uxtb	r3, r3
 81020d0:	2b00      	cmp	r3, #0
 81020d2:	d005      	beq.n	81020e0 <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_PKcESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_allocate_bucketsEj+0x26>
	    _M_single_bucket = nullptr;
 81020d4:	687b      	ldr	r3, [r7, #4]
 81020d6:	2200      	movs	r2, #0
 81020d8:	619a      	str	r2, [r3, #24]
	    return &_M_single_bucket;
 81020da:	687b      	ldr	r3, [r7, #4]
 81020dc:	3318      	adds	r3, #24
 81020de:	e005      	b.n	81020ec <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_PKcESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_allocate_bucketsEj+0x32>
	return __hashtable_alloc::_M_allocate_buckets(__bkt_count);
 81020e0:	6839      	ldr	r1, [r7, #0]
 81020e2:	6878      	ldr	r0, [r7, #4]
 81020e4:	f000 fa98 	bl	8102618 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestEPKcELb0EEEEE19_M_allocate_bucketsEj>
 81020e8:	4603      	mov	r3, r0
 81020ea:	bf00      	nop
      }
 81020ec:	4618      	mov	r0, r3
 81020ee:	3708      	adds	r7, #8
 81020f0:	46bd      	mov	sp, r7
 81020f2:	bd80      	pop	{r7, pc}

081020f4 <_ZNSt8__detail12_Insert_baseIN7APIDoIP12EDoIPRequestESt4pairIKS2_PKcESaIS7_ENS_10_Select1stESt8equal_toIS2_ESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_20_Prime_rehash_policyENS_17_Hashtable_traitsILb0ELb0ELb1EEEE20_M_conjure_hashtableEv>:
      _M_conjure_hashtable()
 81020f4:	b480      	push	{r7}
 81020f6:	b083      	sub	sp, #12
 81020f8:	af00      	add	r7, sp, #0
 81020fa:	6078      	str	r0, [r7, #4]
      { return *(static_cast<__hashtable*>(this)); }
 81020fc:	687b      	ldr	r3, [r7, #4]
 81020fe:	4618      	mov	r0, r3
 8102100:	370c      	adds	r7, #12
 8102102:	46bd      	mov	sp, r7
 8102104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102108:	4770      	bx	lr

0810210a <_ZNSt8__detail10_AllocNodeISaINS_10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestEPKcELb0EEEEEC1ERNS_16_Hashtable_allocISA_EE>:
      _AllocNode(__hashtable_alloc& __h)
 810210a:	b480      	push	{r7}
 810210c:	b083      	sub	sp, #12
 810210e:	af00      	add	r7, sp, #0
 8102110:	6078      	str	r0, [r7, #4]
 8102112:	6039      	str	r1, [r7, #0]
      : _M_h(__h) { }
 8102114:	687b      	ldr	r3, [r7, #4]
 8102116:	683a      	ldr	r2, [r7, #0]
 8102118:	601a      	str	r2, [r3, #0]
 810211a:	687b      	ldr	r3, [r7, #4]
 810211c:	4618      	mov	r0, r3
 810211e:	370c      	adds	r7, #12
 8102120:	46bd      	mov	sp, r7
 8102122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102126:	4770      	bx	lr

08102128 <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_PKcESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE9_M_insertIRKS6_NS8_10_AllocNodeISaINS8_10_Hash_nodeIS6_Lb0EEEEEEEES2_INS8_14_Node_iteratorIS6_Lb0ELb0EEEbEOT_RKT0_St17integral_constantIbLb1EE>:
	_M_insert(_Arg&& __arg, const _NodeGenerator& __node_gen,
 8102128:	b590      	push	{r4, r7, lr}
 810212a:	b089      	sub	sp, #36	@ 0x24
 810212c:	af02      	add	r7, sp, #8
 810212e:	60f8      	str	r0, [r7, #12]
 8102130:	60b9      	str	r1, [r7, #8]
 8102132:	607a      	str	r2, [r7, #4]
 8102134:	603b      	str	r3, [r7, #0]
	    _S_forward_key(_ExtractKey{}(std::forward<_Arg>(__arg))),
 8102136:	6878      	ldr	r0, [r7, #4]
 8102138:	f000 fa9b 	bl	8102672 <_ZSt7forwardIRKSt4pairIKN7APIDoIP12EDoIPRequestEPKcEEOT_RNSt16remove_referenceIS9_E4typeE>
 810213c:	4602      	mov	r2, r0
 810213e:	f107 0314 	add.w	r3, r7, #20
 8102142:	4611      	mov	r1, r2
 8102144:	4618      	mov	r0, r3
 8102146:	f000 fa9f 	bl	8102688 <_ZNKSt8__detail10_Select1stclIRKSt4pairIKN7APIDoIP12EDoIPRequestEPKcEEEONS0_10__1st_typeIT_E4typeEOSC_>
 810214a:	4603      	mov	r3, r0
 810214c:	4618      	mov	r0, r3
 810214e:	f000 faa8 	bl	81026a2 <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_PKcESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE14_S_forward_keyERS3_>
 8102152:	4604      	mov	r4, r0
	  return _M_insert_unique(
 8102154:	6878      	ldr	r0, [r7, #4]
 8102156:	f000 fa8c 	bl	8102672 <_ZSt7forwardIRKSt4pairIKN7APIDoIP12EDoIPRequestEPKcEEOT_RNSt16remove_referenceIS9_E4typeE>
 810215a:	4602      	mov	r2, r0
 810215c:	68f8      	ldr	r0, [r7, #12]
 810215e:	683b      	ldr	r3, [r7, #0]
 8102160:	9300      	str	r3, [sp, #0]
 8102162:	4613      	mov	r3, r2
 8102164:	4622      	mov	r2, r4
 8102166:	68b9      	ldr	r1, [r7, #8]
 8102168:	f000 faa6 	bl	81026b8 <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_PKcESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE16_M_insert_uniqueIRS3_RKS6_NS8_10_AllocNodeISaINS8_10_Hash_nodeIS6_Lb0EEEEEEEES2_INS8_14_Node_iteratorIS6_Lb0ELb0EEEbEOT_OT0_RKT1_>
	    std::forward<_Arg>(__arg), __node_gen);
 810216c:	bf00      	nop
	}
 810216e:	68f8      	ldr	r0, [r7, #12]
 8102170:	371c      	adds	r7, #28
 8102172:	46bd      	mov	sp, r7
 8102174:	bd90      	pop	{r4, r7, pc}

08102176 <_ZNKSt8__detail10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestEPKcELb0EE7_M_nextEv>:
      _M_next() const noexcept
 8102176:	b480      	push	{r7}
 8102178:	b083      	sub	sp, #12
 810217a:	af00      	add	r7, sp, #0
 810217c:	6078      	str	r0, [r7, #4]
      { return static_cast<_Hash_node*>(this->_M_nxt); }
 810217e:	687b      	ldr	r3, [r7, #4]
 8102180:	681b      	ldr	r3, [r3, #0]
 8102182:	4618      	mov	r0, r3
 8102184:	370c      	adds	r7, #12
 8102186:	46bd      	mov	sp, r7
 8102188:	f85d 7b04 	ldr.w	r7, [sp], #4
 810218c:	4770      	bx	lr

0810218e <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestEPKcELb0EEEEE18_M_deallocate_nodeEPS9_>:
    _Hashtable_alloc<_NodeAlloc>::_M_deallocate_node(__node_ptr __n)
 810218e:	b590      	push	{r4, r7, lr}
 8102190:	b083      	sub	sp, #12
 8102192:	af00      	add	r7, sp, #0
 8102194:	6078      	str	r0, [r7, #4]
 8102196:	6039      	str	r1, [r7, #0]
      __node_alloc_traits::destroy(_M_node_allocator(), __n->_M_valptr());
 8102198:	6878      	ldr	r0, [r7, #4]
 810219a:	f000 fb3e 	bl	810281a <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestEPKcELb0EEEEE17_M_node_allocatorEv>
 810219e:	4604      	mov	r4, r0
 81021a0:	683b      	ldr	r3, [r7, #0]
 81021a2:	3304      	adds	r3, #4
 81021a4:	4618      	mov	r0, r3
 81021a6:	f000 fb44 	bl	8102832 <_ZNSt8__detail21_Hash_node_value_baseISt4pairIKN7APIDoIP12EDoIPRequestEPKcEE9_M_valptrEv>
 81021aa:	4603      	mov	r3, r0
 81021ac:	4619      	mov	r1, r3
 81021ae:	4620      	mov	r0, r4
 81021b0:	f000 fb4c 	bl	810284c <_ZNSt16allocator_traitsISaINSt8__detail10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestEPKcELb0EEEEE7destroyIS8_EEvRSA_PT_>
      _M_deallocate_node_ptr(__n);
 81021b4:	6839      	ldr	r1, [r7, #0]
 81021b6:	6878      	ldr	r0, [r7, #4]
 81021b8:	f000 fb54 	bl	8102864 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestEPKcELb0EEEEE22_M_deallocate_node_ptrEPS9_>
    }
 81021bc:	bf00      	nop
 81021be:	370c      	adds	r7, #12
 81021c0:	46bd      	mov	sp, r7
 81021c2:	bd90      	pop	{r4, r7, pc}

081021c4 <_ZNKSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_PKcESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_uses_single_bucketEPPNS8_15_Hash_node_baseE>:
      _M_uses_single_bucket(__buckets_ptr __bkts) const
 81021c4:	b480      	push	{r7}
 81021c6:	b083      	sub	sp, #12
 81021c8:	af00      	add	r7, sp, #0
 81021ca:	6078      	str	r0, [r7, #4]
 81021cc:	6039      	str	r1, [r7, #0]
      { return __builtin_expect(__bkts == &_M_single_bucket, false); }
 81021ce:	687b      	ldr	r3, [r7, #4]
 81021d0:	3318      	adds	r3, #24
 81021d2:	683a      	ldr	r2, [r7, #0]
 81021d4:	429a      	cmp	r2, r3
 81021d6:	bf0c      	ite	eq
 81021d8:	2301      	moveq	r3, #1
 81021da:	2300      	movne	r3, #0
 81021dc:	b2db      	uxtb	r3, r3
 81021de:	2b00      	cmp	r3, #0
 81021e0:	bf14      	ite	ne
 81021e2:	2301      	movne	r3, #1
 81021e4:	2300      	moveq	r3, #0
 81021e6:	b2db      	uxtb	r3, r3
 81021e8:	4618      	mov	r0, r3
 81021ea:	370c      	adds	r7, #12
 81021ec:	46bd      	mov	sp, r7
 81021ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 81021f2:	4770      	bx	lr

081021f4 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestEPKcELb0EEEEE21_M_deallocate_bucketsEPPNS_15_Hash_node_baseEj>:
    _Hashtable_alloc<_NodeAlloc>::
 81021f4:	b580      	push	{r7, lr}
 81021f6:	b086      	sub	sp, #24
 81021f8:	af00      	add	r7, sp, #0
 81021fa:	60f8      	str	r0, [r7, #12]
 81021fc:	60b9      	str	r1, [r7, #8]
 81021fe:	607a      	str	r2, [r7, #4]
      auto __ptr = std::pointer_traits<_Ptr>::pointer_to(*__bkts);
 8102200:	68b8      	ldr	r0, [r7, #8]
 8102202:	f000 f994 	bl	810252e <_ZNSt19__ptr_traits_ptr_toIPPNSt8__detail15_Hash_node_baseES2_Lb0EE10pointer_toERS2_>
 8102206:	6178      	str	r0, [r7, #20]
      __buckets_alloc_type __alloc(_M_node_allocator());
 8102208:	68f8      	ldr	r0, [r7, #12]
 810220a:	f000 fb06 	bl	810281a <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestEPKcELb0EEEEE17_M_node_allocatorEv>
 810220e:	4602      	mov	r2, r0
 8102210:	f107 0310 	add.w	r3, r7, #16
 8102214:	4611      	mov	r1, r2
 8102216:	4618      	mov	r0, r3
 8102218:	f000 fb3a 	bl	8102890 <_ZNSaIPNSt8__detail15_Hash_node_baseEEC1INS_10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestEPKcELb0EEEEERKSaIT_E>
      __buckets_alloc_traits::deallocate(__alloc, __ptr, __bkt_count);
 810221c:	f107 0310 	add.w	r3, r7, #16
 8102220:	687a      	ldr	r2, [r7, #4]
 8102222:	6979      	ldr	r1, [r7, #20]
 8102224:	4618      	mov	r0, r3
 8102226:	f000 f9a6 	bl	8102576 <_ZNSt16allocator_traitsISaIPNSt8__detail15_Hash_node_baseEEE10deallocateERS3_PS2_j>
    }
 810222a:	f107 0310 	add.w	r3, r7, #16
 810222e:	4618      	mov	r0, r3
 8102230:	f000 f996 	bl	8102560 <_ZNSaIPNSt8__detail15_Hash_node_baseEED1Ev>
 8102234:	3718      	adds	r7, #24
 8102236:	46bd      	mov	sp, r7
 8102238:	bd80      	pop	{r7, pc}

0810223a <_ZNSaINSt8__detail10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES1_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEEEC1ISB_EERKSaIT_E>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
 810223a:	b580      	push	{r7, lr}
 810223c:	b082      	sub	sp, #8
 810223e:	af00      	add	r7, sp, #0
 8102240:	6078      	str	r0, [r7, #4]
 8102242:	6039      	str	r1, [r7, #0]
 8102244:	6878      	ldr	r0, [r7, #4]
 8102246:	f000 fb30 	bl	81028aa <_ZNSt15__new_allocatorINSt8__detail10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEEEC1Ev>
 810224a:	687b      	ldr	r3, [r7, #4]
 810224c:	4618      	mov	r0, r3
 810224e:	3708      	adds	r7, #8
 8102250:	46bd      	mov	sp, r7
 8102252:	bd80      	pop	{r7, pc}

08102254 <_ZNSt8__detail15_Hashtable_baseIN7APIDoIP12EDoIPRequestESt4pairIKS2_S3_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEENS_10_Select1stESt8equal_toIS2_ESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEEC1ERKSG_RKSE_>:
      _Hashtable_base(const _Hash& __hash, const _Equal& __eq)
 8102254:	b580      	push	{r7, lr}
 8102256:	b084      	sub	sp, #16
 8102258:	af00      	add	r7, sp, #0
 810225a:	60f8      	str	r0, [r7, #12]
 810225c:	60b9      	str	r1, [r7, #8]
 810225e:	607a      	str	r2, [r7, #4]
      : __hash_code_base(__hash), _EqualEBO(__eq)
 8102260:	68b9      	ldr	r1, [r7, #8]
 8102262:	68f8      	ldr	r0, [r7, #12]
 8102264:	f000 fb2c 	bl	81028c0 <_ZNSt8__detail15_Hash_code_baseIN7APIDoIP12EDoIPRequestESt4pairIKS2_S3_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEENS_10_Select1stESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EEC1ERKSE_>
 8102268:	6879      	ldr	r1, [r7, #4]
 810226a:	68f8      	ldr	r0, [r7, #12]
 810226c:	f000 fb36 	bl	81028dc <_ZNSt8__detail21_Hashtable_ebo_helperILi0ESt8equal_toIN7APIDoIP12EDoIPRequestEELb1EEC1IRKS4_EEOT_>
      { }
 8102270:	68fb      	ldr	r3, [r7, #12]
 8102272:	4618      	mov	r0, r3
 8102274:	3710      	adds	r7, #16
 8102276:	46bd      	mov	sp, r7
 8102278:	bd80      	pop	{r7, pc}

0810227a <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEEEEC1ISE_EEOT_>:
	_Hashtable_alloc(_Alloc&& __a)
 810227a:	b580      	push	{r7, lr}
 810227c:	b082      	sub	sp, #8
 810227e:	af00      	add	r7, sp, #0
 8102280:	6078      	str	r0, [r7, #4]
 8102282:	6039      	str	r1, [r7, #0]
	: __ebo_node_alloc(std::forward<_Alloc>(__a))
 8102284:	6838      	ldr	r0, [r7, #0]
 8102286:	f000 fb36 	bl	81028f6 <_ZSt7forwardISaINSt8__detail10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEEEEOT_RNSt16remove_referenceISF_E4typeE>
 810228a:	4603      	mov	r3, r0
 810228c:	4619      	mov	r1, r3
 810228e:	6878      	ldr	r0, [r7, #4]
 8102290:	f000 fb3c 	bl	810290c <_ZNSt8__detail21_Hashtable_ebo_helperILi0ESaINS_10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEEELb1EEC1ISE_EEOT_>
	{ }
 8102294:	687b      	ldr	r3, [r7, #4]
 8102296:	4618      	mov	r0, r3
 8102298:	3708      	adds	r7, #8
 810229a:	46bd      	mov	sp, r7
 810229c:	bd80      	pop	{r7, pc}

0810229e <_ZNSt27_Enable_default_constructorILb1ENSt8__detail15_Hash_node_baseEEC1ESt31_Enable_default_constructor_tag>:
    _Enable_default_constructor&
    operator=(_Enable_default_constructor&&) noexcept = default;

    // Can be used in other ctors.
    constexpr explicit
    _Enable_default_constructor(_Enable_default_constructor_tag) { }
 810229e:	b480      	push	{r7}
 81022a0:	b083      	sub	sp, #12
 81022a2:	af00      	add	r7, sp, #0
 81022a4:	6078      	str	r0, [r7, #4]
 81022a6:	7039      	strb	r1, [r7, #0]
 81022a8:	687b      	ldr	r3, [r7, #4]
 81022aa:	4618      	mov	r0, r3
 81022ac:	370c      	adds	r7, #12
 81022ae:	46bd      	mov	sp, r7
 81022b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81022b4:	4770      	bx	lr

081022b6 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEEEE19_M_allocate_bucketsEj>:
    _Hashtable_alloc<_NodeAlloc>::_M_allocate_buckets(std::size_t __bkt_count)
 81022b6:	b590      	push	{r4, r7, lr}
 81022b8:	b087      	sub	sp, #28
 81022ba:	af00      	add	r7, sp, #0
 81022bc:	6078      	str	r0, [r7, #4]
 81022be:	6039      	str	r1, [r7, #0]
      __buckets_alloc_type __alloc(_M_node_allocator());
 81022c0:	6878      	ldr	r0, [r7, #4]
 81022c2:	f000 f8f9 	bl	81024b8 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEEEE17_M_node_allocatorEv>
 81022c6:	4602      	mov	r2, r0
 81022c8:	f107 030c 	add.w	r3, r7, #12
 81022cc:	4611      	mov	r1, r2
 81022ce:	4618      	mov	r0, r3
 81022d0:	f000 f939 	bl	8102546 <_ZNSaIPNSt8__detail15_Hash_node_baseEEC1INS_10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES5_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEEEERKSaIT_E>
      auto __ptr = __buckets_alloc_traits::allocate(__alloc, __bkt_count);
 81022d4:	f107 030c 	add.w	r3, r7, #12
 81022d8:	6839      	ldr	r1, [r7, #0]
 81022da:	4618      	mov	r0, r3
 81022dc:	f000 fb28 	bl	8102930 <_ZNSt16allocator_traitsISaIPNSt8__detail15_Hash_node_baseEEE8allocateERS3_j>
 81022e0:	6178      	str	r0, [r7, #20]
      __buckets_ptr __p = std::__to_address(__ptr);
 81022e2:	6978      	ldr	r0, [r7, #20]
 81022e4:	f000 fb55 	bl	8102992 <_ZSt12__to_addressIPNSt8__detail15_Hash_node_baseEEPT_S4_>
 81022e8:	6138      	str	r0, [r7, #16]
      __builtin_memset(__p, 0, __bkt_count * sizeof(__node_base_ptr));
 81022ea:	683b      	ldr	r3, [r7, #0]
 81022ec:	009b      	lsls	r3, r3, #2
 81022ee:	693a      	ldr	r2, [r7, #16]
 81022f0:	4610      	mov	r0, r2
 81022f2:	461a      	mov	r2, r3
 81022f4:	2100      	movs	r1, #0
 81022f6:	f024 fcd1 	bl	8126c9c <memset>
      return __p;
 81022fa:	693c      	ldr	r4, [r7, #16]
    }
 81022fc:	f107 030c 	add.w	r3, r7, #12
 8102300:	4618      	mov	r0, r3
 8102302:	f000 f92d 	bl	8102560 <_ZNSaIPNSt8__detail15_Hash_node_baseEED1Ev>
      return __p;
 8102306:	4623      	mov	r3, r4
    }
 8102308:	4618      	mov	r0, r3
 810230a:	371c      	adds	r7, #28
 810230c:	46bd      	mov	sp, r7
 810230e:	bd90      	pop	{r4, r7, pc}

08102310 <_ZSt7forwardIRKSt4pairIKN7APIDoIP12EDoIPRequestES0_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEEEOT_RNSt16remove_referenceISD_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8102310:	b480      	push	{r7}
 8102312:	b083      	sub	sp, #12
 8102314:	af00      	add	r7, sp, #0
 8102316:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8102318:	687b      	ldr	r3, [r7, #4]
 810231a:	4618      	mov	r0, r3
 810231c:	370c      	adds	r7, #12
 810231e:	46bd      	mov	sp, r7
 8102320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102324:	4770      	bx	lr

08102326 <_ZNKSt8__detail10_Select1stclIRKSt4pairIKN7APIDoIP12EDoIPRequestES2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEEEEONS0_10__1st_typeIT_E4typeEOSG_>:
      operator()(_Tp&& __x) const noexcept
 8102326:	b580      	push	{r7, lr}
 8102328:	b082      	sub	sp, #8
 810232a:	af00      	add	r7, sp, #0
 810232c:	6078      	str	r0, [r7, #4]
 810232e:	6039      	str	r1, [r7, #0]
      { return std::forward<_Tp>(__x).first; }
 8102330:	6838      	ldr	r0, [r7, #0]
 8102332:	f7ff ffed 	bl	8102310 <_ZSt7forwardIRKSt4pairIKN7APIDoIP12EDoIPRequestES0_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEEEOT_RNSt16remove_referenceISD_E4typeE>
 8102336:	4603      	mov	r3, r0
 8102338:	4618      	mov	r0, r3
 810233a:	3708      	adds	r7, #8
 810233c:	46bd      	mov	sp, r7
 810233e:	bd80      	pop	{r7, pc}

08102340 <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE14_S_forward_keyERS3_>:
      _S_forward_key(const key_type& __k)
 8102340:	b480      	push	{r7}
 8102342:	b083      	sub	sp, #12
 8102344:	af00      	add	r7, sp, #0
 8102346:	6078      	str	r0, [r7, #4]
      { return __k; }
 8102348:	687b      	ldr	r3, [r7, #4]
 810234a:	4618      	mov	r0, r3
 810234c:	370c      	adds	r7, #12
 810234e:	46bd      	mov	sp, r7
 8102350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102354:	4770      	bx	lr

08102356 <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE16_M_insert_uniqueIRS3_RKSA_NSC_10_AllocNodeISaINSC_10_Hash_nodeISA_Lb0EEEEEEEES2_INSC_14_Node_iteratorISA_Lb0ELb0EEEbEOT_OT0_RKT1_>:
      _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
 8102356:	b590      	push	{r4, r7, lr}
 8102358:	b093      	sub	sp, #76	@ 0x4c
 810235a:	af02      	add	r7, sp, #8
 810235c:	60f8      	str	r0, [r7, #12]
 810235e:	60b9      	str	r1, [r7, #8]
 8102360:	607a      	str	r2, [r7, #4]
 8102362:	603b      	str	r3, [r7, #0]
	if (size() <= __small_size_threshold())
 8102364:	68b8      	ldr	r0, [r7, #8]
 8102366:	f000 fb1f 	bl	81029a8 <_ZNKSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE4sizeEv>
 810236a:	4604      	mov	r4, r0
 810236c:	f000 fb28 	bl	81029c0 <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE22__small_size_thresholdEv>
 8102370:	4603      	mov	r3, r0
 8102372:	429c      	cmp	r4, r3
 8102374:	bf94      	ite	ls
 8102376:	2301      	movls	r3, #1
 8102378:	2300      	movhi	r3, #0
 810237a:	b2db      	uxtb	r3, r3
 810237c:	2b00      	cmp	r3, #0
 810237e:	d033      	beq.n	81023e8 <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE16_M_insert_uniqueIRS3_RKSA_NSC_10_AllocNodeISaINSC_10_Hash_nodeISA_Lb0EEEEEEEES2_INSC_14_Node_iteratorISA_Lb0ELb0EEEbEOT_OT0_RKT1_+0x92>
	  for (auto __it = begin(); __it != end(); ++__it)
 8102380:	68b8      	ldr	r0, [r7, #8]
 8102382:	f000 fb24 	bl	81029ce <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE5beginEv>
 8102386:	4603      	mov	r3, r0
 8102388:	617b      	str	r3, [r7, #20]
 810238a:	e01a      	b.n	81023c2 <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE16_M_insert_uniqueIRS3_RKSA_NSC_10_AllocNodeISaINSC_10_Hash_nodeISA_Lb0EEEEEEEES2_INSC_14_Node_iteratorISA_Lb0ELb0EEEbEOT_OT0_RKT1_+0x6c>
	    if (this->_M_key_equals_tr(__k, *__it._M_cur))
 810238c:	697b      	ldr	r3, [r7, #20]
 810238e:	3304      	adds	r3, #4
 8102390:	461a      	mov	r2, r3
 8102392:	6879      	ldr	r1, [r7, #4]
 8102394:	68b8      	ldr	r0, [r7, #8]
 8102396:	f000 fb5d 	bl	8102a54 <_ZNKSt8__detail15_Hashtable_baseIN7APIDoIP12EDoIPRequestESt4pairIKS2_S3_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEENS_10_Select1stESt8equal_toIS2_ESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEE16_M_key_equals_trIS2_EEbRKT_RKNS_16_Hash_node_valueISB_Lb0EEE>
 810239a:	4603      	mov	r3, r0
 810239c:	2b00      	cmp	r3, #0
 810239e:	d00b      	beq.n	81023b8 <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE16_M_insert_uniqueIRS3_RKSA_NSC_10_AllocNodeISaINSC_10_Hash_nodeISA_Lb0EEEEEEEES2_INSC_14_Node_iteratorISA_Lb0ELb0EEEbEOT_OT0_RKT1_+0x62>
	      return { __it, false };
 81023a0:	2300      	movs	r3, #0
 81023a2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 81023a6:	f107 0227 	add.w	r2, r7, #39	@ 0x27
 81023aa:	f107 0314 	add.w	r3, r7, #20
 81023ae:	4619      	mov	r1, r3
 81023b0:	68f8      	ldr	r0, [r7, #12]
 81023b2:	f000 fb6f 	bl	8102a94 <_ZNSt4pairINSt8__detail14_Node_iteratorIS_IKN7APIDoIP12EDoIPRequestES_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0ELb0EEEbEC1IRSC_bEEOT_OT0_>
      }
 81023b6:	e07b      	b.n	81024b0 <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE16_M_insert_uniqueIRS3_RKSA_NSC_10_AllocNodeISaINSC_10_Hash_nodeISA_Lb0EEEEEEEES2_INSC_14_Node_iteratorISA_Lb0ELb0EEEbEOT_OT0_RKT1_+0x15a>
	  for (auto __it = begin(); __it != end(); ++__it)
 81023b8:	f107 0314 	add.w	r3, r7, #20
 81023bc:	4618      	mov	r0, r3
 81023be:	f000 fb3c 	bl	8102a3a <_ZNSt8__detail14_Node_iteratorISt4pairIKN7APIDoIP12EDoIPRequestES1_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0ELb0EEppEv>
 81023c2:	68b8      	ldr	r0, [r7, #8]
 81023c4:	f000 fb16 	bl	81029f4 <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE3endEv>
 81023c8:	4603      	mov	r3, r0
 81023ca:	62bb      	str	r3, [r7, #40]	@ 0x28
 81023cc:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 81023d0:	f107 0314 	add.w	r3, r7, #20
 81023d4:	4611      	mov	r1, r2
 81023d6:	4618      	mov	r0, r3
 81023d8:	f000 fb1b 	bl	8102a12 <_ZNSt8__detaileqERKNS_19_Node_iterator_baseISt4pairIKN7APIDoIP12EDoIPRequestES1_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEESE_>
 81023dc:	4603      	mov	r3, r0
 81023de:	f083 0301 	eor.w	r3, r3, #1
 81023e2:	b2db      	uxtb	r3, r3
 81023e4:	2b00      	cmp	r3, #0
 81023e6:	d1d1      	bne.n	810238c <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE16_M_insert_uniqueIRS3_RKSA_NSC_10_AllocNodeISaINSC_10_Hash_nodeISA_Lb0EEEEEEEES2_INSC_14_Node_iteratorISA_Lb0ELb0EEEbEOT_OT0_RKT1_+0x36>
	__hash_code __code = this->_M_hash_code_tr(__k);
 81023e8:	6879      	ldr	r1, [r7, #4]
 81023ea:	68b8      	ldr	r0, [r7, #8]
 81023ec:	f000 fb6b 	bl	8102ac6 <_ZNKSt8__detail15_Hash_code_baseIN7APIDoIP12EDoIPRequestESt4pairIKS2_S3_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEENS_10_Select1stESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE15_M_hash_code_trIS2_EEjRKT_>
 81023f0:	63f8      	str	r0, [r7, #60]	@ 0x3c
	size_type __bkt = _M_bucket_index(__code);
 81023f2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 81023f4:	68b8      	ldr	r0, [r7, #8]
 81023f6:	f000 fb7b 	bl	8102af0 <_ZNKSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE15_M_bucket_indexEj>
 81023fa:	63b8      	str	r0, [r7, #56]	@ 0x38
	if (size() > __small_size_threshold())
 81023fc:	68b8      	ldr	r0, [r7, #8]
 81023fe:	f000 fad3 	bl	81029a8 <_ZNKSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE4sizeEv>
 8102402:	4604      	mov	r4, r0
 8102404:	f000 fadc 	bl	81029c0 <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE22__small_size_thresholdEv>
 8102408:	4603      	mov	r3, r0
 810240a:	429c      	cmp	r4, r3
 810240c:	bf8c      	ite	hi
 810240e:	2301      	movhi	r3, #1
 8102410:	2300      	movls	r3, #0
 8102412:	b2db      	uxtb	r3, r3
 8102414:	2b00      	cmp	r3, #0
 8102416:	d01b      	beq.n	8102450 <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE16_M_insert_uniqueIRS3_RKSA_NSC_10_AllocNodeISaINSC_10_Hash_nodeISA_Lb0EEEEEEEES2_INSC_14_Node_iteratorISA_Lb0ELb0EEEbEOT_OT0_RKT1_+0xfa>
	  if (__node_ptr __node = _M_find_node_tr(__bkt, __k, __code))
 8102418:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810241a:	687a      	ldr	r2, [r7, #4]
 810241c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 810241e:	68b8      	ldr	r0, [r7, #8]
 8102420:	f000 fb77 	bl	8102b12 <_ZNKSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE15_M_find_node_trIS1_EEPNSC_10_Hash_nodeISA_Lb0EEEjRKT_j>
 8102424:	6378      	str	r0, [r7, #52]	@ 0x34
 8102426:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8102428:	2b00      	cmp	r3, #0
 810242a:	d011      	beq.n	8102450 <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE16_M_insert_uniqueIRS3_RKSA_NSC_10_AllocNodeISaINSC_10_Hash_nodeISA_Lb0EEEEEEEES2_INSC_14_Node_iteratorISA_Lb0ELb0EEEbEOT_OT0_RKT1_+0xfa>
	    return { iterator(__node), false };
 810242c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8102430:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8102432:	4618      	mov	r0, r3
 8102434:	f000 fb86 	bl	8102b44 <_ZNSt8__detail14_Node_iteratorISt4pairIKN7APIDoIP12EDoIPRequestES1_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0ELb0EEC1EPNS_10_Hash_nodeISB_Lb0EEE>
 8102438:	2300      	movs	r3, #0
 810243a:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
 810243e:	f107 0232 	add.w	r2, r7, #50	@ 0x32
 8102442:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8102446:	4619      	mov	r1, r3
 8102448:	68f8      	ldr	r0, [r7, #12]
 810244a:	f000 fb8a 	bl	8102b62 <_ZNSt4pairINSt8__detail14_Node_iteratorIS_IKN7APIDoIP12EDoIPRequestES_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0ELb0EEEbEC1ISC_bEEOT_OT0_>
      }
 810244e:	e02f      	b.n	81024b0 <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE16_M_insert_uniqueIRS3_RKSA_NSC_10_AllocNodeISaINSC_10_Hash_nodeISA_Lb0EEEEEEEES2_INSC_14_Node_iteratorISA_Lb0ELb0EEEbEOT_OT0_RKT1_+0x15a>
	_Scoped_node __node {
 8102450:	6878      	ldr	r0, [r7, #4]
 8102452:	f000 fb9f 	bl	8102b94 <_ZSt7forwardIRKN7APIDoIP12EDoIPRequestEEOT_RNSt16remove_referenceIS4_E4typeE>
 8102456:	4604      	mov	r4, r0
 8102458:	6838      	ldr	r0, [r7, #0]
 810245a:	f7ff ff59 	bl	8102310 <_ZSt7forwardIRKSt4pairIKN7APIDoIP12EDoIPRequestES0_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEEEOT_RNSt16remove_referenceISD_E4typeE>
 810245e:	4603      	mov	r3, r0
 8102460:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8102462:	4619      	mov	r1, r3
 8102464:	4620      	mov	r0, r4
 8102466:	f000 fba0 	bl	8102baa <_ZNSt8__detail12_NodeBuilderINS_10_Select1stEE8_S_buildIRKN7APIDoIP12EDoIPRequestERKSt4pairIS6_S8_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEENS_10_AllocNodeISaINS_10_Hash_nodeISF_Lb0EEEEEEEEPNT1_11__node_typeEOT_OT0_RKSN_>
 810246a:	4601      	mov	r1, r0
 810246c:	f107 031c 	add.w	r3, r7, #28
 8102470:	68ba      	ldr	r2, [r7, #8]
 8102472:	4618      	mov	r0, r3
 8102474:	f000 fbb2 	bl	8102bdc <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE12_Scoped_nodeC1EPNSC_10_Hash_nodeISA_Lb0EEEPNSC_16_Hashtable_allocISaISQ_EEE>
	  = _M_insert_unique_node(__bkt, __code, __node._M_node);
 8102478:	6a3b      	ldr	r3, [r7, #32]
 810247a:	2201      	movs	r2, #1
 810247c:	9200      	str	r2, [sp, #0]
 810247e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8102480:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8102482:	68b8      	ldr	r0, [r7, #8]
 8102484:	f000 fbd2 	bl	8102c2c <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_insert_unique_nodeEjjPNSC_10_Hash_nodeISA_Lb0EEEj>
 8102488:	4603      	mov	r3, r0
 810248a:	61bb      	str	r3, [r7, #24]
	__node._M_node = nullptr;
 810248c:	2300      	movs	r3, #0
 810248e:	623b      	str	r3, [r7, #32]
	return { __pos, true };
 8102490:	2301      	movs	r3, #1
 8102492:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 8102496:	f107 0233 	add.w	r2, r7, #51	@ 0x33
 810249a:	f107 0318 	add.w	r3, r7, #24
 810249e:	4619      	mov	r1, r3
 81024a0:	68f8      	ldr	r0, [r7, #12]
 81024a2:	f000 faf7 	bl	8102a94 <_ZNSt4pairINSt8__detail14_Node_iteratorIS_IKN7APIDoIP12EDoIPRequestES_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0ELb0EEEbEC1IRSC_bEEOT_OT0_>
      }
 81024a6:	f107 031c 	add.w	r3, r7, #28
 81024aa:	4618      	mov	r0, r3
 81024ac:	f000 fba9 	bl	8102c02 <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE12_Scoped_nodeD1Ev>
 81024b0:	68f8      	ldr	r0, [r7, #12]
 81024b2:	3744      	adds	r7, #68	@ 0x44
 81024b4:	46bd      	mov	sp, r7
 81024b6:	bd90      	pop	{r4, r7, pc}

081024b8 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEEEE17_M_node_allocatorEv>:
      _M_node_allocator()
 81024b8:	b580      	push	{r7, lr}
 81024ba:	b082      	sub	sp, #8
 81024bc:	af00      	add	r7, sp, #0
 81024be:	6078      	str	r0, [r7, #4]
      { return __ebo_node_alloc::_M_get(); }
 81024c0:	6878      	ldr	r0, [r7, #4]
 81024c2:	f000 fbfc 	bl	8102cbe <_ZNSt8__detail21_Hashtable_ebo_helperILi0ESaINS_10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEEELb1EE6_M_getEv>
 81024c6:	4603      	mov	r3, r0
 81024c8:	4618      	mov	r0, r3
 81024ca:	3708      	adds	r7, #8
 81024cc:	46bd      	mov	sp, r7
 81024ce:	bd80      	pop	{r7, pc}

081024d0 <_ZNSt8__detail21_Hash_node_value_baseISt4pairIKN7APIDoIP12EDoIPRequestES1_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEEE9_M_valptrEv>:
      _M_valptr() noexcept
 81024d0:	b580      	push	{r7, lr}
 81024d2:	b082      	sub	sp, #8
 81024d4:	af00      	add	r7, sp, #0
 81024d6:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 81024d8:	687b      	ldr	r3, [r7, #4]
 81024da:	4618      	mov	r0, r3
 81024dc:	f000 fbfa 	bl	8102cd4 <_ZN9__gnu_cxx16__aligned_bufferISt4pairIKN7APIDoIP12EDoIPRequestES1_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEEE6_M_ptrEv>
 81024e0:	4603      	mov	r3, r0
 81024e2:	4618      	mov	r0, r3
 81024e4:	3708      	adds	r7, #8
 81024e6:	46bd      	mov	sp, r7
 81024e8:	bd80      	pop	{r7, pc}

081024ea <_ZNSt16allocator_traitsISaINSt8__detail10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEEEE7destroyISC_EEvRSE_PT_>:
       *
       *  Calls @c __a.destroy(__p).
      */
      template<typename _Up>
	static _GLIBCXX20_CONSTEXPR void
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 81024ea:	b580      	push	{r7, lr}
 81024ec:	b082      	sub	sp, #8
 81024ee:	af00      	add	r7, sp, #0
 81024f0:	6078      	str	r0, [r7, #4]
 81024f2:	6039      	str	r1, [r7, #0]
	noexcept(is_nothrow_destructible<_Up>::value)
	{
#if __cplusplus <= 201703L
	  __a.destroy(__p);
#else
	  std::destroy_at(__p);
 81024f4:	6838      	ldr	r0, [r7, #0]
 81024f6:	f000 fbf9 	bl	8102cec <_ZSt10destroy_atISt4pairIKN7APIDoIP12EDoIPRequestES0_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEEEvPT_>
#endif
	}
 81024fa:	bf00      	nop
 81024fc:	3708      	adds	r7, #8
 81024fe:	46bd      	mov	sp, r7
 8102500:	bd80      	pop	{r7, pc}

08102502 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEEEE22_M_deallocate_node_ptrEPSD_>:
    _Hashtable_alloc<_NodeAlloc>::_M_deallocate_node_ptr(__node_ptr __n)
 8102502:	b580      	push	{r7, lr}
 8102504:	b084      	sub	sp, #16
 8102506:	af00      	add	r7, sp, #0
 8102508:	6078      	str	r0, [r7, #4]
 810250a:	6039      	str	r1, [r7, #0]
      auto __ptr = std::pointer_traits<_Ptr>::pointer_to(*__n);
 810250c:	6838      	ldr	r0, [r7, #0]
 810250e:	f000 fbf7 	bl	8102d00 <_ZNSt19__ptr_traits_ptr_toIPNSt8__detail10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEESD_Lb0EE10pointer_toERSD_>
 8102512:	60f8      	str	r0, [r7, #12]
      __node_alloc_traits::deallocate(_M_node_allocator(), __ptr, 1);
 8102514:	6878      	ldr	r0, [r7, #4]
 8102516:	f7ff ffcf 	bl	81024b8 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEEEE17_M_node_allocatorEv>
 810251a:	4603      	mov	r3, r0
 810251c:	2201      	movs	r2, #1
 810251e:	68f9      	ldr	r1, [r7, #12]
 8102520:	4618      	mov	r0, r3
 8102522:	f000 fbf9 	bl	8102d18 <_ZNSt16allocator_traitsISaINSt8__detail10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEEEE10deallocateERSE_PSD_j>
    }
 8102526:	bf00      	nop
 8102528:	3710      	adds	r7, #16
 810252a:	46bd      	mov	sp, r7
 810252c:	bd80      	pop	{r7, pc}

0810252e <_ZNSt19__ptr_traits_ptr_toIPPNSt8__detail15_Hash_node_baseES2_Lb0EE10pointer_toERS2_>:
       *  @brief  Obtain a pointer to an object
       *  @param  __r  A reference to an object of type `element_type`
       *  @return `addressof(__r)`
      */
      static _GLIBCXX20_CONSTEXPR pointer
      pointer_to(element_type& __r) noexcept
 810252e:	b580      	push	{r7, lr}
 8102530:	b082      	sub	sp, #8
 8102532:	af00      	add	r7, sp, #0
 8102534:	6078      	str	r0, [r7, #4]
      { return std::addressof(__r); }
 8102536:	6878      	ldr	r0, [r7, #4]
 8102538:	f000 fc0d 	bl	8102d56 <_ZSt9addressofIPNSt8__detail15_Hash_node_baseEEPT_RS3_>
 810253c:	4603      	mov	r3, r0
 810253e:	4618      	mov	r0, r3
 8102540:	3708      	adds	r7, #8
 8102542:	46bd      	mov	sp, r7
 8102544:	bd80      	pop	{r7, pc}

08102546 <_ZNSaIPNSt8__detail15_Hash_node_baseEEC1INS_10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES5_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEEEERKSaIT_E>:
 8102546:	b580      	push	{r7, lr}
 8102548:	b082      	sub	sp, #8
 810254a:	af00      	add	r7, sp, #0
 810254c:	6078      	str	r0, [r7, #4]
 810254e:	6039      	str	r1, [r7, #0]
 8102550:	6878      	ldr	r0, [r7, #4]
 8102552:	f000 fc0c 	bl	8102d6e <_ZNSt15__new_allocatorIPNSt8__detail15_Hash_node_baseEEC1Ev>
 8102556:	687b      	ldr	r3, [r7, #4]
 8102558:	4618      	mov	r0, r3
 810255a:	3708      	adds	r7, #8
 810255c:	46bd      	mov	sp, r7
 810255e:	bd80      	pop	{r7, pc}

08102560 <_ZNSaIPNSt8__detail15_Hash_node_baseEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8102560:	b480      	push	{r7}
 8102562:	b083      	sub	sp, #12
 8102564:	af00      	add	r7, sp, #0
 8102566:	6078      	str	r0, [r7, #4]
 8102568:	687b      	ldr	r3, [r7, #4]
 810256a:	4618      	mov	r0, r3
 810256c:	370c      	adds	r7, #12
 810256e:	46bd      	mov	sp, r7
 8102570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102574:	4770      	bx	lr

08102576 <_ZNSt16allocator_traitsISaIPNSt8__detail15_Hash_node_baseEEE10deallocateERS3_PS2_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8102576:	b580      	push	{r7, lr}
 8102578:	b088      	sub	sp, #32
 810257a:	af00      	add	r7, sp, #0
 810257c:	60f8      	str	r0, [r7, #12]
 810257e:	60b9      	str	r1, [r7, #8]
 8102580:	607a      	str	r2, [r7, #4]
 8102582:	68fb      	ldr	r3, [r7, #12]
 8102584:	61fb      	str	r3, [r7, #28]
 8102586:	68bb      	ldr	r3, [r7, #8]
 8102588:	61bb      	str	r3, [r7, #24]
 810258a:	687b      	ldr	r3, [r7, #4]
 810258c:	617b      	str	r3, [r7, #20]

      [[__gnu__::__always_inline__]]
      constexpr void
      deallocate(_Tp* __p, size_t __n)
      {
	if (std::__is_constant_evaluated())
 810258e:	f7fe feb5 	bl	81012fc <__is_constant_evaluated>
 8102592:	4603      	mov	r3, r0
 8102594:	2b00      	cmp	r3, #0
 8102596:	d003      	beq.n	81025a0 <_ZNSt16allocator_traitsISaIPNSt8__detail15_Hash_node_baseEEE10deallocateERS3_PS2_j+0x2a>
	  {
	    ::operator delete(__p);
 8102598:	69b8      	ldr	r0, [r7, #24]
 810259a:	f023 f9f3 	bl	8125984 <_ZdlPv>
	    return;
 810259e:	e005      	b.n	81025ac <_ZNSt16allocator_traitsISaIPNSt8__detail15_Hash_node_baseEEE10deallocateERS3_PS2_j+0x36>
	  }
	__allocator_base<_Tp>::deallocate(__p, __n);
 81025a0:	697a      	ldr	r2, [r7, #20]
 81025a2:	69b9      	ldr	r1, [r7, #24]
 81025a4:	69f8      	ldr	r0, [r7, #28]
 81025a6:	f000 ff95 	bl	81034d4 <_ZNSt15__new_allocatorIPNSt8__detail15_Hash_node_baseEE10deallocateEPS2_j>
      { __a.deallocate(__p, __n); }
 81025aa:	bf00      	nop
 81025ac:	bf00      	nop
 81025ae:	3720      	adds	r7, #32
 81025b0:	46bd      	mov	sp, r7
 81025b2:	bd80      	pop	{r7, pc}

081025b4 <_ZNSaINSt8__detail10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestEPKcELb0EEEEC1IS7_EERKSaIT_E>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
 81025b4:	b580      	push	{r7, lr}
 81025b6:	b082      	sub	sp, #8
 81025b8:	af00      	add	r7, sp, #0
 81025ba:	6078      	str	r0, [r7, #4]
 81025bc:	6039      	str	r1, [r7, #0]
 81025be:	6878      	ldr	r0, [r7, #4]
 81025c0:	f000 fbe0 	bl	8102d84 <_ZNSt15__new_allocatorINSt8__detail10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestEPKcELb0EEEEC1Ev>
 81025c4:	687b      	ldr	r3, [r7, #4]
 81025c6:	4618      	mov	r0, r3
 81025c8:	3708      	adds	r7, #8
 81025ca:	46bd      	mov	sp, r7
 81025cc:	bd80      	pop	{r7, pc}

081025ce <_ZNSt8__detail15_Hashtable_baseIN7APIDoIP12EDoIPRequestESt4pairIKS2_PKcENS_10_Select1stESt8equal_toIS2_ESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEEC1ERKSC_RKSA_>:
      _Hashtable_base(const _Hash& __hash, const _Equal& __eq)
 81025ce:	b580      	push	{r7, lr}
 81025d0:	b084      	sub	sp, #16
 81025d2:	af00      	add	r7, sp, #0
 81025d4:	60f8      	str	r0, [r7, #12]
 81025d6:	60b9      	str	r1, [r7, #8]
 81025d8:	607a      	str	r2, [r7, #4]
      : __hash_code_base(__hash), _EqualEBO(__eq)
 81025da:	68b9      	ldr	r1, [r7, #8]
 81025dc:	68f8      	ldr	r0, [r7, #12]
 81025de:	f000 fbdc 	bl	8102d9a <_ZNSt8__detail15_Hash_code_baseIN7APIDoIP12EDoIPRequestESt4pairIKS2_PKcENS_10_Select1stESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EEC1ERKSA_>
 81025e2:	6879      	ldr	r1, [r7, #4]
 81025e4:	68f8      	ldr	r0, [r7, #12]
 81025e6:	f000 f979 	bl	81028dc <_ZNSt8__detail21_Hashtable_ebo_helperILi0ESt8equal_toIN7APIDoIP12EDoIPRequestEELb1EEC1IRKS4_EEOT_>
      { }
 81025ea:	68fb      	ldr	r3, [r7, #12]
 81025ec:	4618      	mov	r0, r3
 81025ee:	3710      	adds	r7, #16
 81025f0:	46bd      	mov	sp, r7
 81025f2:	bd80      	pop	{r7, pc}

081025f4 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestEPKcELb0EEEEEC1ISA_EEOT_>:
	_Hashtable_alloc(_Alloc&& __a)
 81025f4:	b580      	push	{r7, lr}
 81025f6:	b082      	sub	sp, #8
 81025f8:	af00      	add	r7, sp, #0
 81025fa:	6078      	str	r0, [r7, #4]
 81025fc:	6039      	str	r1, [r7, #0]
	: __ebo_node_alloc(std::forward<_Alloc>(__a))
 81025fe:	6838      	ldr	r0, [r7, #0]
 8102600:	f000 fbd9 	bl	8102db6 <_ZSt7forwardISaINSt8__detail10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestEPKcELb0EEEEEOT_RNSt16remove_referenceISB_E4typeE>
 8102604:	4603      	mov	r3, r0
 8102606:	4619      	mov	r1, r3
 8102608:	6878      	ldr	r0, [r7, #4]
 810260a:	f000 fbdf 	bl	8102dcc <_ZNSt8__detail21_Hashtable_ebo_helperILi0ESaINS_10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestEPKcELb0EEEELb1EEC1ISA_EEOT_>
	{ }
 810260e:	687b      	ldr	r3, [r7, #4]
 8102610:	4618      	mov	r0, r3
 8102612:	3708      	adds	r7, #8
 8102614:	46bd      	mov	sp, r7
 8102616:	bd80      	pop	{r7, pc}

08102618 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestEPKcELb0EEEEE19_M_allocate_bucketsEj>:
    _Hashtable_alloc<_NodeAlloc>::_M_allocate_buckets(std::size_t __bkt_count)
 8102618:	b590      	push	{r4, r7, lr}
 810261a:	b087      	sub	sp, #28
 810261c:	af00      	add	r7, sp, #0
 810261e:	6078      	str	r0, [r7, #4]
 8102620:	6039      	str	r1, [r7, #0]
      __buckets_alloc_type __alloc(_M_node_allocator());
 8102622:	6878      	ldr	r0, [r7, #4]
 8102624:	f000 f8f9 	bl	810281a <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestEPKcELb0EEEEE17_M_node_allocatorEv>
 8102628:	4602      	mov	r2, r0
 810262a:	f107 030c 	add.w	r3, r7, #12
 810262e:	4611      	mov	r1, r2
 8102630:	4618      	mov	r0, r3
 8102632:	f000 f92d 	bl	8102890 <_ZNSaIPNSt8__detail15_Hash_node_baseEEC1INS_10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestEPKcELb0EEEEERKSaIT_E>
      auto __ptr = __buckets_alloc_traits::allocate(__alloc, __bkt_count);
 8102636:	f107 030c 	add.w	r3, r7, #12
 810263a:	6839      	ldr	r1, [r7, #0]
 810263c:	4618      	mov	r0, r3
 810263e:	f000 f977 	bl	8102930 <_ZNSt16allocator_traitsISaIPNSt8__detail15_Hash_node_baseEEE8allocateERS3_j>
 8102642:	6178      	str	r0, [r7, #20]
      __buckets_ptr __p = std::__to_address(__ptr);
 8102644:	6978      	ldr	r0, [r7, #20]
 8102646:	f000 f9a4 	bl	8102992 <_ZSt12__to_addressIPNSt8__detail15_Hash_node_baseEEPT_S4_>
 810264a:	6138      	str	r0, [r7, #16]
      __builtin_memset(__p, 0, __bkt_count * sizeof(__node_base_ptr));
 810264c:	683b      	ldr	r3, [r7, #0]
 810264e:	009b      	lsls	r3, r3, #2
 8102650:	693a      	ldr	r2, [r7, #16]
 8102652:	4610      	mov	r0, r2
 8102654:	461a      	mov	r2, r3
 8102656:	2100      	movs	r1, #0
 8102658:	f024 fb20 	bl	8126c9c <memset>
      return __p;
 810265c:	693c      	ldr	r4, [r7, #16]
    }
 810265e:	f107 030c 	add.w	r3, r7, #12
 8102662:	4618      	mov	r0, r3
 8102664:	f7ff ff7c 	bl	8102560 <_ZNSaIPNSt8__detail15_Hash_node_baseEED1Ev>
      return __p;
 8102668:	4623      	mov	r3, r4
    }
 810266a:	4618      	mov	r0, r3
 810266c:	371c      	adds	r7, #28
 810266e:	46bd      	mov	sp, r7
 8102670:	bd90      	pop	{r4, r7, pc}

08102672 <_ZSt7forwardIRKSt4pairIKN7APIDoIP12EDoIPRequestEPKcEEOT_RNSt16remove_referenceIS9_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8102672:	b480      	push	{r7}
 8102674:	b083      	sub	sp, #12
 8102676:	af00      	add	r7, sp, #0
 8102678:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 810267a:	687b      	ldr	r3, [r7, #4]
 810267c:	4618      	mov	r0, r3
 810267e:	370c      	adds	r7, #12
 8102680:	46bd      	mov	sp, r7
 8102682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102686:	4770      	bx	lr

08102688 <_ZNKSt8__detail10_Select1stclIRKSt4pairIKN7APIDoIP12EDoIPRequestEPKcEEEONS0_10__1st_typeIT_E4typeEOSC_>:
      operator()(_Tp&& __x) const noexcept
 8102688:	b580      	push	{r7, lr}
 810268a:	b082      	sub	sp, #8
 810268c:	af00      	add	r7, sp, #0
 810268e:	6078      	str	r0, [r7, #4]
 8102690:	6039      	str	r1, [r7, #0]
      { return std::forward<_Tp>(__x).first; }
 8102692:	6838      	ldr	r0, [r7, #0]
 8102694:	f7ff ffed 	bl	8102672 <_ZSt7forwardIRKSt4pairIKN7APIDoIP12EDoIPRequestEPKcEEOT_RNSt16remove_referenceIS9_E4typeE>
 8102698:	4603      	mov	r3, r0
 810269a:	4618      	mov	r0, r3
 810269c:	3708      	adds	r7, #8
 810269e:	46bd      	mov	sp, r7
 81026a0:	bd80      	pop	{r7, pc}

081026a2 <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_PKcESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE14_S_forward_keyERS3_>:
      _S_forward_key(const key_type& __k)
 81026a2:	b480      	push	{r7}
 81026a4:	b083      	sub	sp, #12
 81026a6:	af00      	add	r7, sp, #0
 81026a8:	6078      	str	r0, [r7, #4]
      { return __k; }
 81026aa:	687b      	ldr	r3, [r7, #4]
 81026ac:	4618      	mov	r0, r3
 81026ae:	370c      	adds	r7, #12
 81026b0:	46bd      	mov	sp, r7
 81026b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81026b6:	4770      	bx	lr

081026b8 <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_PKcESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE16_M_insert_uniqueIRS3_RKS6_NS8_10_AllocNodeISaINS8_10_Hash_nodeIS6_Lb0EEEEEEEES2_INS8_14_Node_iteratorIS6_Lb0ELb0EEEbEOT_OT0_RKT1_>:
      _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
 81026b8:	b590      	push	{r4, r7, lr}
 81026ba:	b093      	sub	sp, #76	@ 0x4c
 81026bc:	af02      	add	r7, sp, #8
 81026be:	60f8      	str	r0, [r7, #12]
 81026c0:	60b9      	str	r1, [r7, #8]
 81026c2:	607a      	str	r2, [r7, #4]
 81026c4:	603b      	str	r3, [r7, #0]
	if (size() <= __small_size_threshold())
 81026c6:	68b8      	ldr	r0, [r7, #8]
 81026c8:	f000 fb92 	bl	8102df0 <_ZNKSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_PKcESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE4sizeEv>
 81026cc:	4604      	mov	r4, r0
 81026ce:	f000 fb9b 	bl	8102e08 <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_PKcESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE22__small_size_thresholdEv>
 81026d2:	4603      	mov	r3, r0
 81026d4:	429c      	cmp	r4, r3
 81026d6:	bf94      	ite	ls
 81026d8:	2301      	movls	r3, #1
 81026da:	2300      	movhi	r3, #0
 81026dc:	b2db      	uxtb	r3, r3
 81026de:	2b00      	cmp	r3, #0
 81026e0:	d033      	beq.n	810274a <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_PKcESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE16_M_insert_uniqueIRS3_RKS6_NS8_10_AllocNodeISaINS8_10_Hash_nodeIS6_Lb0EEEEEEEES2_INS8_14_Node_iteratorIS6_Lb0ELb0EEEbEOT_OT0_RKT1_+0x92>
	  for (auto __it = begin(); __it != end(); ++__it)
 81026e2:	68b8      	ldr	r0, [r7, #8]
 81026e4:	f000 fb97 	bl	8102e16 <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_PKcESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE5beginEv>
 81026e8:	4603      	mov	r3, r0
 81026ea:	617b      	str	r3, [r7, #20]
 81026ec:	e01a      	b.n	8102724 <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_PKcESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE16_M_insert_uniqueIRS3_RKS6_NS8_10_AllocNodeISaINS8_10_Hash_nodeIS6_Lb0EEEEEEEES2_INS8_14_Node_iteratorIS6_Lb0ELb0EEEbEOT_OT0_RKT1_+0x6c>
	    if (this->_M_key_equals_tr(__k, *__it._M_cur))
 81026ee:	697b      	ldr	r3, [r7, #20]
 81026f0:	3304      	adds	r3, #4
 81026f2:	461a      	mov	r2, r3
 81026f4:	6879      	ldr	r1, [r7, #4]
 81026f6:	68b8      	ldr	r0, [r7, #8]
 81026f8:	f000 fbd0 	bl	8102e9c <_ZNKSt8__detail15_Hashtable_baseIN7APIDoIP12EDoIPRequestESt4pairIKS2_PKcENS_10_Select1stESt8equal_toIS2_ESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEE16_M_key_equals_trIS2_EEbRKT_RKNS_16_Hash_node_valueIS7_Lb0EEE>
 81026fc:	4603      	mov	r3, r0
 81026fe:	2b00      	cmp	r3, #0
 8102700:	d00b      	beq.n	810271a <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_PKcESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE16_M_insert_uniqueIRS3_RKS6_NS8_10_AllocNodeISaINS8_10_Hash_nodeIS6_Lb0EEEEEEEES2_INS8_14_Node_iteratorIS6_Lb0ELb0EEEbEOT_OT0_RKT1_+0x62>
	      return { __it, false };
 8102702:	2300      	movs	r3, #0
 8102704:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8102708:	f107 0227 	add.w	r2, r7, #39	@ 0x27
 810270c:	f107 0314 	add.w	r3, r7, #20
 8102710:	4619      	mov	r1, r3
 8102712:	68f8      	ldr	r0, [r7, #12]
 8102714:	f000 fbe2 	bl	8102edc <_ZNSt4pairINSt8__detail14_Node_iteratorIS_IKN7APIDoIP12EDoIPRequestEPKcELb0ELb0EEEbEC1IRS8_bEEOT_OT0_>
      }
 8102718:	e07b      	b.n	8102812 <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_PKcESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE16_M_insert_uniqueIRS3_RKS6_NS8_10_AllocNodeISaINS8_10_Hash_nodeIS6_Lb0EEEEEEEES2_INS8_14_Node_iteratorIS6_Lb0ELb0EEEbEOT_OT0_RKT1_+0x15a>
	  for (auto __it = begin(); __it != end(); ++__it)
 810271a:	f107 0314 	add.w	r3, r7, #20
 810271e:	4618      	mov	r0, r3
 8102720:	f000 fbaf 	bl	8102e82 <_ZNSt8__detail14_Node_iteratorISt4pairIKN7APIDoIP12EDoIPRequestEPKcELb0ELb0EEppEv>
 8102724:	68b8      	ldr	r0, [r7, #8]
 8102726:	f000 fb89 	bl	8102e3c <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_PKcESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE3endEv>
 810272a:	4603      	mov	r3, r0
 810272c:	62bb      	str	r3, [r7, #40]	@ 0x28
 810272e:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8102732:	f107 0314 	add.w	r3, r7, #20
 8102736:	4611      	mov	r1, r2
 8102738:	4618      	mov	r0, r3
 810273a:	f000 fb8e 	bl	8102e5a <_ZNSt8__detaileqERKNS_19_Node_iterator_baseISt4pairIKN7APIDoIP12EDoIPRequestEPKcELb0EEESA_>
 810273e:	4603      	mov	r3, r0
 8102740:	f083 0301 	eor.w	r3, r3, #1
 8102744:	b2db      	uxtb	r3, r3
 8102746:	2b00      	cmp	r3, #0
 8102748:	d1d1      	bne.n	81026ee <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_PKcESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE16_M_insert_uniqueIRS3_RKS6_NS8_10_AllocNodeISaINS8_10_Hash_nodeIS6_Lb0EEEEEEEES2_INS8_14_Node_iteratorIS6_Lb0ELb0EEEbEOT_OT0_RKT1_+0x36>
	__hash_code __code = this->_M_hash_code_tr(__k);
 810274a:	6879      	ldr	r1, [r7, #4]
 810274c:	68b8      	ldr	r0, [r7, #8]
 810274e:	f000 fbde 	bl	8102f0e <_ZNKSt8__detail15_Hash_code_baseIN7APIDoIP12EDoIPRequestESt4pairIKS2_PKcENS_10_Select1stESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE15_M_hash_code_trIS2_EEjRKT_>
 8102752:	63f8      	str	r0, [r7, #60]	@ 0x3c
	size_type __bkt = _M_bucket_index(__code);
 8102754:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8102756:	68b8      	ldr	r0, [r7, #8]
 8102758:	f000 fbee 	bl	8102f38 <_ZNKSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_PKcESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE15_M_bucket_indexEj>
 810275c:	63b8      	str	r0, [r7, #56]	@ 0x38
	if (size() > __small_size_threshold())
 810275e:	68b8      	ldr	r0, [r7, #8]
 8102760:	f000 fb46 	bl	8102df0 <_ZNKSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_PKcESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE4sizeEv>
 8102764:	4604      	mov	r4, r0
 8102766:	f000 fb4f 	bl	8102e08 <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_PKcESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE22__small_size_thresholdEv>
 810276a:	4603      	mov	r3, r0
 810276c:	429c      	cmp	r4, r3
 810276e:	bf8c      	ite	hi
 8102770:	2301      	movhi	r3, #1
 8102772:	2300      	movls	r3, #0
 8102774:	b2db      	uxtb	r3, r3
 8102776:	2b00      	cmp	r3, #0
 8102778:	d01b      	beq.n	81027b2 <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_PKcESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE16_M_insert_uniqueIRS3_RKS6_NS8_10_AllocNodeISaINS8_10_Hash_nodeIS6_Lb0EEEEEEEES2_INS8_14_Node_iteratorIS6_Lb0ELb0EEEbEOT_OT0_RKT1_+0xfa>
	  if (__node_ptr __node = _M_find_node_tr(__bkt, __k, __code))
 810277a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810277c:	687a      	ldr	r2, [r7, #4]
 810277e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8102780:	68b8      	ldr	r0, [r7, #8]
 8102782:	f000 fbea 	bl	8102f5a <_ZNKSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_PKcESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE15_M_find_node_trIS1_EEPNS8_10_Hash_nodeIS6_Lb0EEEjRKT_j>
 8102786:	6378      	str	r0, [r7, #52]	@ 0x34
 8102788:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810278a:	2b00      	cmp	r3, #0
 810278c:	d011      	beq.n	81027b2 <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_PKcESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE16_M_insert_uniqueIRS3_RKS6_NS8_10_AllocNodeISaINS8_10_Hash_nodeIS6_Lb0EEEEEEEES2_INS8_14_Node_iteratorIS6_Lb0ELb0EEEbEOT_OT0_RKT1_+0xfa>
	    return { iterator(__node), false };
 810278e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8102792:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8102794:	4618      	mov	r0, r3
 8102796:	f000 fbf9 	bl	8102f8c <_ZNSt8__detail14_Node_iteratorISt4pairIKN7APIDoIP12EDoIPRequestEPKcELb0ELb0EEC1EPNS_10_Hash_nodeIS7_Lb0EEE>
 810279a:	2300      	movs	r3, #0
 810279c:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
 81027a0:	f107 0232 	add.w	r2, r7, #50	@ 0x32
 81027a4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 81027a8:	4619      	mov	r1, r3
 81027aa:	68f8      	ldr	r0, [r7, #12]
 81027ac:	f000 fbfd 	bl	8102faa <_ZNSt4pairINSt8__detail14_Node_iteratorIS_IKN7APIDoIP12EDoIPRequestEPKcELb0ELb0EEEbEC1IS8_bEEOT_OT0_>
      }
 81027b0:	e02f      	b.n	8102812 <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_PKcESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE16_M_insert_uniqueIRS3_RKS6_NS8_10_AllocNodeISaINS8_10_Hash_nodeIS6_Lb0EEEEEEEES2_INS8_14_Node_iteratorIS6_Lb0ELb0EEEbEOT_OT0_RKT1_+0x15a>
	_Scoped_node __node {
 81027b2:	6878      	ldr	r0, [r7, #4]
 81027b4:	f000 f9ee 	bl	8102b94 <_ZSt7forwardIRKN7APIDoIP12EDoIPRequestEEOT_RNSt16remove_referenceIS4_E4typeE>
 81027b8:	4604      	mov	r4, r0
 81027ba:	6838      	ldr	r0, [r7, #0]
 81027bc:	f7ff ff59 	bl	8102672 <_ZSt7forwardIRKSt4pairIKN7APIDoIP12EDoIPRequestEPKcEEOT_RNSt16remove_referenceIS9_E4typeE>
 81027c0:	4603      	mov	r3, r0
 81027c2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 81027c4:	4619      	mov	r1, r3
 81027c6:	4620      	mov	r0, r4
 81027c8:	f000 fc08 	bl	8102fdc <_ZNSt8__detail12_NodeBuilderINS_10_Select1stEE8_S_buildIRKN7APIDoIP12EDoIPRequestERKSt4pairIS6_PKcENS_10_AllocNodeISaINS_10_Hash_nodeISB_Lb0EEEEEEEEPNT1_11__node_typeEOT_OT0_RKSJ_>
 81027cc:	4601      	mov	r1, r0
 81027ce:	f107 031c 	add.w	r3, r7, #28
 81027d2:	68ba      	ldr	r2, [r7, #8]
 81027d4:	4618      	mov	r0, r3
 81027d6:	f000 fc1a 	bl	810300e <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_PKcESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE12_Scoped_nodeC1EPNS8_10_Hash_nodeIS6_Lb0EEEPNS8_16_Hashtable_allocISaISM_EEE>
	  = _M_insert_unique_node(__bkt, __code, __node._M_node);
 81027da:	6a3b      	ldr	r3, [r7, #32]
 81027dc:	2201      	movs	r2, #1
 81027de:	9200      	str	r2, [sp, #0]
 81027e0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 81027e2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 81027e4:	68b8      	ldr	r0, [r7, #8]
 81027e6:	f000 fc3a 	bl	810305e <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_PKcESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_insert_unique_nodeEjjPNS8_10_Hash_nodeIS6_Lb0EEEj>
 81027ea:	4603      	mov	r3, r0
 81027ec:	61bb      	str	r3, [r7, #24]
	__node._M_node = nullptr;
 81027ee:	2300      	movs	r3, #0
 81027f0:	623b      	str	r3, [r7, #32]
	return { __pos, true };
 81027f2:	2301      	movs	r3, #1
 81027f4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 81027f8:	f107 0233 	add.w	r2, r7, #51	@ 0x33
 81027fc:	f107 0318 	add.w	r3, r7, #24
 8102800:	4619      	mov	r1, r3
 8102802:	68f8      	ldr	r0, [r7, #12]
 8102804:	f000 fb6a 	bl	8102edc <_ZNSt4pairINSt8__detail14_Node_iteratorIS_IKN7APIDoIP12EDoIPRequestEPKcELb0ELb0EEEbEC1IRS8_bEEOT_OT0_>
      }
 8102808:	f107 031c 	add.w	r3, r7, #28
 810280c:	4618      	mov	r0, r3
 810280e:	f000 fc11 	bl	8103034 <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_PKcESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE12_Scoped_nodeD1Ev>
 8102812:	68f8      	ldr	r0, [r7, #12]
 8102814:	3744      	adds	r7, #68	@ 0x44
 8102816:	46bd      	mov	sp, r7
 8102818:	bd90      	pop	{r4, r7, pc}

0810281a <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestEPKcELb0EEEEE17_M_node_allocatorEv>:
      _M_node_allocator()
 810281a:	b580      	push	{r7, lr}
 810281c:	b082      	sub	sp, #8
 810281e:	af00      	add	r7, sp, #0
 8102820:	6078      	str	r0, [r7, #4]
      { return __ebo_node_alloc::_M_get(); }
 8102822:	6878      	ldr	r0, [r7, #4]
 8102824:	f000 fc64 	bl	81030f0 <_ZNSt8__detail21_Hashtable_ebo_helperILi0ESaINS_10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestEPKcELb0EEEELb1EE6_M_getEv>
 8102828:	4603      	mov	r3, r0
 810282a:	4618      	mov	r0, r3
 810282c:	3708      	adds	r7, #8
 810282e:	46bd      	mov	sp, r7
 8102830:	bd80      	pop	{r7, pc}

08102832 <_ZNSt8__detail21_Hash_node_value_baseISt4pairIKN7APIDoIP12EDoIPRequestEPKcEE9_M_valptrEv>:
      _M_valptr() noexcept
 8102832:	b580      	push	{r7, lr}
 8102834:	b082      	sub	sp, #8
 8102836:	af00      	add	r7, sp, #0
 8102838:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 810283a:	687b      	ldr	r3, [r7, #4]
 810283c:	4618      	mov	r0, r3
 810283e:	f000 fc62 	bl	8103106 <_ZN9__gnu_cxx16__aligned_bufferISt4pairIKN7APIDoIP12EDoIPRequestEPKcEE6_M_ptrEv>
 8102842:	4603      	mov	r3, r0
 8102844:	4618      	mov	r0, r3
 8102846:	3708      	adds	r7, #8
 8102848:	46bd      	mov	sp, r7
 810284a:	bd80      	pop	{r7, pc}

0810284c <_ZNSt16allocator_traitsISaINSt8__detail10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestEPKcELb0EEEEE7destroyIS8_EEvRSA_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 810284c:	b580      	push	{r7, lr}
 810284e:	b082      	sub	sp, #8
 8102850:	af00      	add	r7, sp, #0
 8102852:	6078      	str	r0, [r7, #4]
 8102854:	6039      	str	r1, [r7, #0]
	  std::destroy_at(__p);
 8102856:	6838      	ldr	r0, [r7, #0]
 8102858:	f000 fc61 	bl	810311e <_ZSt10destroy_atISt4pairIKN7APIDoIP12EDoIPRequestEPKcEEvPT_>
	}
 810285c:	bf00      	nop
 810285e:	3708      	adds	r7, #8
 8102860:	46bd      	mov	sp, r7
 8102862:	bd80      	pop	{r7, pc}

08102864 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestEPKcELb0EEEEE22_M_deallocate_node_ptrEPS9_>:
    _Hashtable_alloc<_NodeAlloc>::_M_deallocate_node_ptr(__node_ptr __n)
 8102864:	b580      	push	{r7, lr}
 8102866:	b084      	sub	sp, #16
 8102868:	af00      	add	r7, sp, #0
 810286a:	6078      	str	r0, [r7, #4]
 810286c:	6039      	str	r1, [r7, #0]
      auto __ptr = std::pointer_traits<_Ptr>::pointer_to(*__n);
 810286e:	6838      	ldr	r0, [r7, #0]
 8102870:	f000 fc5f 	bl	8103132 <_ZNSt19__ptr_traits_ptr_toIPNSt8__detail10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestEPKcELb0EEES9_Lb0EE10pointer_toERS9_>
 8102874:	60f8      	str	r0, [r7, #12]
      __node_alloc_traits::deallocate(_M_node_allocator(), __ptr, 1);
 8102876:	6878      	ldr	r0, [r7, #4]
 8102878:	f7ff ffcf 	bl	810281a <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestEPKcELb0EEEEE17_M_node_allocatorEv>
 810287c:	4603      	mov	r3, r0
 810287e:	2201      	movs	r2, #1
 8102880:	68f9      	ldr	r1, [r7, #12]
 8102882:	4618      	mov	r0, r3
 8102884:	f000 fc61 	bl	810314a <_ZNSt16allocator_traitsISaINSt8__detail10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestEPKcELb0EEEEE10deallocateERSA_PS9_j>
    }
 8102888:	bf00      	nop
 810288a:	3710      	adds	r7, #16
 810288c:	46bd      	mov	sp, r7
 810288e:	bd80      	pop	{r7, pc}

08102890 <_ZNSaIPNSt8__detail15_Hash_node_baseEEC1INS_10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestEPKcELb0EEEEERKSaIT_E>:
 8102890:	b580      	push	{r7, lr}
 8102892:	b082      	sub	sp, #8
 8102894:	af00      	add	r7, sp, #0
 8102896:	6078      	str	r0, [r7, #4]
 8102898:	6039      	str	r1, [r7, #0]
 810289a:	6878      	ldr	r0, [r7, #4]
 810289c:	f000 fa67 	bl	8102d6e <_ZNSt15__new_allocatorIPNSt8__detail15_Hash_node_baseEEC1Ev>
 81028a0:	687b      	ldr	r3, [r7, #4]
 81028a2:	4618      	mov	r0, r3
 81028a4:	3708      	adds	r7, #8
 81028a6:	46bd      	mov	sp, r7
 81028a8:	bd80      	pop	{r7, pc}

081028aa <_ZNSt15__new_allocatorINSt8__detail10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEEEC1Ev>:
 81028aa:	b480      	push	{r7}
 81028ac:	b083      	sub	sp, #12
 81028ae:	af00      	add	r7, sp, #0
 81028b0:	6078      	str	r0, [r7, #4]
 81028b2:	687b      	ldr	r3, [r7, #4]
 81028b4:	4618      	mov	r0, r3
 81028b6:	370c      	adds	r7, #12
 81028b8:	46bd      	mov	sp, r7
 81028ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 81028be:	4770      	bx	lr

081028c0 <_ZNSt8__detail15_Hash_code_baseIN7APIDoIP12EDoIPRequestESt4pairIKS2_S3_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEENS_10_Select1stESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EEC1ERKSE_>:
      _Hash_code_base(const _Hash& __hash) : __ebo_hash(__hash) { }
 81028c0:	b580      	push	{r7, lr}
 81028c2:	b082      	sub	sp, #8
 81028c4:	af00      	add	r7, sp, #0
 81028c6:	6078      	str	r0, [r7, #4]
 81028c8:	6039      	str	r1, [r7, #0]
 81028ca:	6839      	ldr	r1, [r7, #0]
 81028cc:	6878      	ldr	r0, [r7, #4]
 81028ce:	f000 fc5b 	bl	8103188 <_ZNSt8__detail21_Hashtable_ebo_helperILi1ESt4hashIN7APIDoIP12EDoIPRequestEELb1EEC1IRKS4_EEOT_>
 81028d2:	687b      	ldr	r3, [r7, #4]
 81028d4:	4618      	mov	r0, r3
 81028d6:	3708      	adds	r7, #8
 81028d8:	46bd      	mov	sp, r7
 81028da:	bd80      	pop	{r7, pc}

081028dc <_ZNSt8__detail21_Hashtable_ebo_helperILi0ESt8equal_toIN7APIDoIP12EDoIPRequestEELb1EEC1IRKS4_EEOT_>:
	_Hashtable_ebo_helper(_OtherTp&& __tp)
 81028dc:	b580      	push	{r7, lr}
 81028de:	b082      	sub	sp, #8
 81028e0:	af00      	add	r7, sp, #0
 81028e2:	6078      	str	r0, [r7, #4]
 81028e4:	6039      	str	r1, [r7, #0]
	: _Tp(std::forward<_OtherTp>(__tp))
 81028e6:	6838      	ldr	r0, [r7, #0]
 81028e8:	f000 fc5b 	bl	81031a2 <_ZSt7forwardIRKSt8equal_toIN7APIDoIP12EDoIPRequestEEEOT_RNSt16remove_referenceIS6_E4typeE>
	{ }
 81028ec:	687b      	ldr	r3, [r7, #4]
 81028ee:	4618      	mov	r0, r3
 81028f0:	3708      	adds	r7, #8
 81028f2:	46bd      	mov	sp, r7
 81028f4:	bd80      	pop	{r7, pc}

081028f6 <_ZSt7forwardISaINSt8__detail10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEEEEOT_RNSt16remove_referenceISF_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 81028f6:	b480      	push	{r7}
 81028f8:	b083      	sub	sp, #12
 81028fa:	af00      	add	r7, sp, #0
 81028fc:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 81028fe:	687b      	ldr	r3, [r7, #4]
 8102900:	4618      	mov	r0, r3
 8102902:	370c      	adds	r7, #12
 8102904:	46bd      	mov	sp, r7
 8102906:	f85d 7b04 	ldr.w	r7, [sp], #4
 810290a:	4770      	bx	lr

0810290c <_ZNSt8__detail21_Hashtable_ebo_helperILi0ESaINS_10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEEELb1EEC1ISE_EEOT_>:
	_Hashtable_ebo_helper(_OtherTp&& __tp)
 810290c:	b580      	push	{r7, lr}
 810290e:	b082      	sub	sp, #8
 8102910:	af00      	add	r7, sp, #0
 8102912:	6078      	str	r0, [r7, #4]
 8102914:	6039      	str	r1, [r7, #0]
	: _Tp(std::forward<_OtherTp>(__tp))
 8102916:	6838      	ldr	r0, [r7, #0]
 8102918:	f7ff ffed 	bl	81028f6 <_ZSt7forwardISaINSt8__detail10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEEEEOT_RNSt16remove_referenceISF_E4typeE>
 810291c:	4603      	mov	r3, r0
 810291e:	4619      	mov	r1, r3
 8102920:	6878      	ldr	r0, [r7, #4]
 8102922:	f000 fc49 	bl	81031b8 <_ZNSaINSt8__detail10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES1_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEEEC1ERKSD_>
	{ }
 8102926:	687b      	ldr	r3, [r7, #4]
 8102928:	4618      	mov	r0, r3
 810292a:	3708      	adds	r7, #8
 810292c:	46bd      	mov	sp, r7
 810292e:	bd80      	pop	{r7, pc}

08102930 <_ZNSt16allocator_traitsISaIPNSt8__detail15_Hash_node_baseEEE8allocateERS3_j>:
      allocate(allocator_type& __a, size_type __n)
 8102930:	b580      	push	{r7, lr}
 8102932:	b084      	sub	sp, #16
 8102934:	af00      	add	r7, sp, #0
 8102936:	6078      	str	r0, [r7, #4]
 8102938:	6039      	str	r1, [r7, #0]
 810293a:	687b      	ldr	r3, [r7, #4]
 810293c:	60fb      	str	r3, [r7, #12]
 810293e:	683b      	ldr	r3, [r7, #0]
 8102940:	60bb      	str	r3, [r7, #8]
	if (std::__is_constant_evaluated())
 8102942:	f7fe fcdb 	bl	81012fc <__is_constant_evaluated>
 8102946:	4603      	mov	r3, r0
 8102948:	2b00      	cmp	r3, #0
 810294a:	d016      	beq.n	810297a <_ZNSt16allocator_traitsISaIPNSt8__detail15_Hash_node_baseEEE8allocateERS3_j+0x4a>
	    if (__builtin_mul_overflow(__n, sizeof(_Tp), &__n))
 810294c:	68bb      	ldr	r3, [r7, #8]
 810294e:	2200      	movs	r2, #0
 8102950:	0099      	lsls	r1, r3, #2
 8102952:	0f9b      	lsrs	r3, r3, #30
 8102954:	2b00      	cmp	r3, #0
 8102956:	d000      	beq.n	810295a <_ZNSt16allocator_traitsISaIPNSt8__detail15_Hash_node_baseEEE8allocateERS3_j+0x2a>
 8102958:	2201      	movs	r2, #1
 810295a:	460b      	mov	r3, r1
 810295c:	60bb      	str	r3, [r7, #8]
 810295e:	4613      	mov	r3, r2
 8102960:	f003 0301 	and.w	r3, r3, #1
 8102964:	b2db      	uxtb	r3, r3
 8102966:	2b00      	cmp	r3, #0
 8102968:	d001      	beq.n	810296e <_ZNSt16allocator_traitsISaIPNSt8__detail15_Hash_node_baseEEE8allocateERS3_j+0x3e>
	      std::__throw_bad_array_new_length();
 810296a:	f023 f8ef 	bl	8125b4c <_ZSt28__throw_bad_array_new_lengthv>
	    return static_cast<_Tp*>(::operator new(__n));
 810296e:	68bb      	ldr	r3, [r7, #8]
 8102970:	4618      	mov	r0, r3
 8102972:	f023 f81a 	bl	81259aa <_Znwj>
 8102976:	4603      	mov	r3, r0
 8102978:	e007      	b.n	810298a <_ZNSt16allocator_traitsISaIPNSt8__detail15_Hash_node_baseEEE8allocateERS3_j+0x5a>
	return __allocator_base<_Tp>::allocate(__n, 0);
 810297a:	68bb      	ldr	r3, [r7, #8]
 810297c:	2200      	movs	r2, #0
 810297e:	4619      	mov	r1, r3
 8102980:	68f8      	ldr	r0, [r7, #12]
 8102982:	f000 ff1e 	bl	81037c2 <_ZNSt15__new_allocatorIPNSt8__detail15_Hash_node_baseEE8allocateEjPKv>
 8102986:	4603      	mov	r3, r0
 8102988:	bf00      	nop
      { return __a.allocate(__n); }
 810298a:	4618      	mov	r0, r3
 810298c:	3710      	adds	r7, #16
 810298e:	46bd      	mov	sp, r7
 8102990:	bd80      	pop	{r7, pc}

08102992 <_ZSt12__to_addressIPNSt8__detail15_Hash_node_baseEEPT_S4_>:
  template<typename _Ptr, typename _Tp>
    using __ptr_rebind = typename pointer_traits<_Ptr>::template rebind<_Tp>;

  template<typename _Tp>
    constexpr _Tp*
    __to_address(_Tp* __ptr) noexcept
 8102992:	b480      	push	{r7}
 8102994:	b083      	sub	sp, #12
 8102996:	af00      	add	r7, sp, #0
 8102998:	6078      	str	r0, [r7, #4]
    {
      static_assert(!std::is_function<_Tp>::value, "not a function pointer");
      return __ptr;
 810299a:	687b      	ldr	r3, [r7, #4]
    }
 810299c:	4618      	mov	r0, r3
 810299e:	370c      	adds	r7, #12
 81029a0:	46bd      	mov	sp, r7
 81029a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81029a6:	4770      	bx	lr

081029a8 <_ZNKSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE4sizeEv>:
      size() const noexcept
 81029a8:	b480      	push	{r7}
 81029aa:	b083      	sub	sp, #12
 81029ac:	af00      	add	r7, sp, #0
 81029ae:	6078      	str	r0, [r7, #4]
      { return _M_element_count; }
 81029b0:	687b      	ldr	r3, [r7, #4]
 81029b2:	68db      	ldr	r3, [r3, #12]
 81029b4:	4618      	mov	r0, r3
 81029b6:	370c      	adds	r7, #12
 81029b8:	46bd      	mov	sp, r7
 81029ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 81029be:	4770      	bx	lr

081029c0 <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE22__small_size_thresholdEv>:
      __small_size_threshold() noexcept
 81029c0:	b580      	push	{r7, lr}
 81029c2:	af00      	add	r7, sp, #0
	  __detail::_Hashtable_hash_traits<_Hash>::__small_size_threshold();
 81029c4:	f000 fc06 	bl	81031d4 <_ZNSt8__detail22_Hashtable_hash_traitsISt4hashIN7APIDoIP12EDoIPRequestEEE22__small_size_thresholdEv>
 81029c8:	4603      	mov	r3, r0
      }
 81029ca:	4618      	mov	r0, r3
 81029cc:	bd80      	pop	{r7, pc}

081029ce <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE5beginEv>:
      begin() noexcept
 81029ce:	b580      	push	{r7, lr}
 81029d0:	b084      	sub	sp, #16
 81029d2:	af00      	add	r7, sp, #0
 81029d4:	6078      	str	r0, [r7, #4]
      { return iterator(_M_begin()); }
 81029d6:	6878      	ldr	r0, [r7, #4]
 81029d8:	f7ff f967 	bl	8101caa <_ZNKSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE8_M_beginEv>
 81029dc:	4602      	mov	r2, r0
 81029de:	f107 030c 	add.w	r3, r7, #12
 81029e2:	4611      	mov	r1, r2
 81029e4:	4618      	mov	r0, r3
 81029e6:	f000 f8ad 	bl	8102b44 <_ZNSt8__detail14_Node_iteratorISt4pairIKN7APIDoIP12EDoIPRequestES1_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0ELb0EEC1EPNS_10_Hash_nodeISB_Lb0EEE>
 81029ea:	68fb      	ldr	r3, [r7, #12]
 81029ec:	4618      	mov	r0, r3
 81029ee:	3710      	adds	r7, #16
 81029f0:	46bd      	mov	sp, r7
 81029f2:	bd80      	pop	{r7, pc}

081029f4 <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE3endEv>:
      end() noexcept
 81029f4:	b580      	push	{r7, lr}
 81029f6:	b084      	sub	sp, #16
 81029f8:	af00      	add	r7, sp, #0
 81029fa:	6078      	str	r0, [r7, #4]
      { return iterator(nullptr); }
 81029fc:	f107 030c 	add.w	r3, r7, #12
 8102a00:	2100      	movs	r1, #0
 8102a02:	4618      	mov	r0, r3
 8102a04:	f000 f89e 	bl	8102b44 <_ZNSt8__detail14_Node_iteratorISt4pairIKN7APIDoIP12EDoIPRequestES1_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0ELb0EEC1EPNS_10_Hash_nodeISB_Lb0EEE>
 8102a08:	68fb      	ldr	r3, [r7, #12]
 8102a0a:	4618      	mov	r0, r3
 8102a0c:	3710      	adds	r7, #16
 8102a0e:	46bd      	mov	sp, r7
 8102a10:	bd80      	pop	{r7, pc}

08102a12 <_ZNSt8__detaileqERKNS_19_Node_iterator_baseISt4pairIKN7APIDoIP12EDoIPRequestES1_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEESE_>:
      operator==(const _Node_iterator_base& __x, const _Node_iterator_base& __y)
 8102a12:	b480      	push	{r7}
 8102a14:	b083      	sub	sp, #12
 8102a16:	af00      	add	r7, sp, #0
 8102a18:	6078      	str	r0, [r7, #4]
 8102a1a:	6039      	str	r1, [r7, #0]
      { return __x._M_cur == __y._M_cur; }
 8102a1c:	687b      	ldr	r3, [r7, #4]
 8102a1e:	681a      	ldr	r2, [r3, #0]
 8102a20:	683b      	ldr	r3, [r7, #0]
 8102a22:	681b      	ldr	r3, [r3, #0]
 8102a24:	429a      	cmp	r2, r3
 8102a26:	bf0c      	ite	eq
 8102a28:	2301      	moveq	r3, #1
 8102a2a:	2300      	movne	r3, #0
 8102a2c:	b2db      	uxtb	r3, r3
 8102a2e:	4618      	mov	r0, r3
 8102a30:	370c      	adds	r7, #12
 8102a32:	46bd      	mov	sp, r7
 8102a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102a38:	4770      	bx	lr

08102a3a <_ZNSt8__detail14_Node_iteratorISt4pairIKN7APIDoIP12EDoIPRequestES1_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0ELb0EEppEv>:
      operator++() noexcept
 8102a3a:	b580      	push	{r7, lr}
 8102a3c:	b082      	sub	sp, #8
 8102a3e:	af00      	add	r7, sp, #0
 8102a40:	6078      	str	r0, [r7, #4]
	this->_M_incr();
 8102a42:	687b      	ldr	r3, [r7, #4]
 8102a44:	4618      	mov	r0, r3
 8102a46:	f000 fbcd 	bl	81031e4 <_ZNSt8__detail19_Node_iterator_baseISt4pairIKN7APIDoIP12EDoIPRequestES1_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EE7_M_incrEv>
	return *this;
 8102a4a:	687b      	ldr	r3, [r7, #4]
      }
 8102a4c:	4618      	mov	r0, r3
 8102a4e:	3708      	adds	r7, #8
 8102a50:	46bd      	mov	sp, r7
 8102a52:	bd80      	pop	{r7, pc}

08102a54 <_ZNKSt8__detail15_Hashtable_baseIN7APIDoIP12EDoIPRequestESt4pairIKS2_S3_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEENS_10_Select1stESt8equal_toIS2_ESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEE16_M_key_equals_trIS2_EEbRKT_RKNS_16_Hash_node_valueISB_Lb0EEE>:
	_M_key_equals_tr(const _Kt& __k,
 8102a54:	b590      	push	{r4, r7, lr}
 8102a56:	b087      	sub	sp, #28
 8102a58:	af00      	add	r7, sp, #0
 8102a5a:	60f8      	str	r0, [r7, #12]
 8102a5c:	60b9      	str	r1, [r7, #8]
 8102a5e:	607a      	str	r2, [r7, #4]
	  return _M_eq()(__k, _ExtractKey{}(__n._M_v()));
 8102a60:	68f8      	ldr	r0, [r7, #12]
 8102a62:	f000 fbcf 	bl	8103204 <_ZNKSt8__detail15_Hashtable_baseIN7APIDoIP12EDoIPRequestESt4pairIKS2_S3_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEENS_10_Select1stESt8equal_toIS2_ESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEE5_M_eqEv>
 8102a66:	4604      	mov	r4, r0
 8102a68:	687b      	ldr	r3, [r7, #4]
 8102a6a:	4618      	mov	r0, r3
 8102a6c:	f000 fbd6 	bl	810321c <_ZNKSt8__detail21_Hash_node_value_baseISt4pairIKN7APIDoIP12EDoIPRequestES1_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEEE4_M_vEv>
 8102a70:	4602      	mov	r2, r0
 8102a72:	f107 0314 	add.w	r3, r7, #20
 8102a76:	4611      	mov	r1, r2
 8102a78:	4618      	mov	r0, r3
 8102a7a:	f7ff fc54 	bl	8102326 <_ZNKSt8__detail10_Select1stclIRKSt4pairIKN7APIDoIP12EDoIPRequestES2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEEEEONS0_10__1st_typeIT_E4typeEOSG_>
 8102a7e:	4603      	mov	r3, r0
 8102a80:	461a      	mov	r2, r3
 8102a82:	68b9      	ldr	r1, [r7, #8]
 8102a84:	4620      	mov	r0, r4
 8102a86:	f000 fbd5 	bl	8103234 <_ZNKSt8equal_toIN7APIDoIP12EDoIPRequestEEclERKS1_S4_>
 8102a8a:	4603      	mov	r3, r0
	}
 8102a8c:	4618      	mov	r0, r3
 8102a8e:	371c      	adds	r7, #28
 8102a90:	46bd      	mov	sp, r7
 8102a92:	bd90      	pop	{r4, r7, pc}

08102a94 <_ZNSt4pairINSt8__detail14_Node_iteratorIS_IKN7APIDoIP12EDoIPRequestES_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0ELb0EEEbEC1IRSC_bEEOT_OT0_>:

      /// Constructor accepting two values of arbitrary types
      template<typename _U1, typename _U2>
	requires (_S_constructible<_U1, _U2>())
	constexpr explicit(!_S_convertible<_U1, _U2>())
	pair(_U1&& __x, _U2&& __y)
 8102a94:	b580      	push	{r7, lr}
 8102a96:	b084      	sub	sp, #16
 8102a98:	af00      	add	r7, sp, #0
 8102a9a:	60f8      	str	r0, [r7, #12]
 8102a9c:	60b9      	str	r1, [r7, #8]
 8102a9e:	607a      	str	r2, [r7, #4]
	noexcept(_S_nothrow_constructible<_U1, _U2>())
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y))
 8102aa0:	68b8      	ldr	r0, [r7, #8]
 8102aa2:	f000 fbde 	bl	8103262 <_ZSt7forwardIRNSt8__detail14_Node_iteratorISt4pairIKN7APIDoIP12EDoIPRequestES2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0ELb0EEEEOT_RNSt16remove_referenceISF_E4typeE>
 8102aa6:	4602      	mov	r2, r0
 8102aa8:	68fb      	ldr	r3, [r7, #12]
 8102aaa:	6812      	ldr	r2, [r2, #0]
 8102aac:	601a      	str	r2, [r3, #0]
 8102aae:	6878      	ldr	r0, [r7, #4]
 8102ab0:	f7fe fef4 	bl	810189c <_ZSt7forwardIbEOT_RNSt16remove_referenceIS0_E4typeE>
 8102ab4:	4603      	mov	r3, r0
 8102ab6:	781a      	ldrb	r2, [r3, #0]
 8102ab8:	68fb      	ldr	r3, [r7, #12]
 8102aba:	711a      	strb	r2, [r3, #4]
	{ }
 8102abc:	68fb      	ldr	r3, [r7, #12]
 8102abe:	4618      	mov	r0, r3
 8102ac0:	3710      	adds	r7, #16
 8102ac2:	46bd      	mov	sp, r7
 8102ac4:	bd80      	pop	{r7, pc}

08102ac6 <_ZNKSt8__detail15_Hash_code_baseIN7APIDoIP12EDoIPRequestESt4pairIKS2_S3_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEENS_10_Select1stESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE15_M_hash_code_trIS2_EEjRKT_>:
	_M_hash_code_tr(const _Kt& __k) const
 8102ac6:	b580      	push	{r7, lr}
 8102ac8:	b082      	sub	sp, #8
 8102aca:	af00      	add	r7, sp, #0
 8102acc:	6078      	str	r0, [r7, #4]
 8102ace:	6039      	str	r1, [r7, #0]
	  return _M_hash()(__k);
 8102ad0:	6878      	ldr	r0, [r7, #4]
 8102ad2:	f000 fbd1 	bl	8103278 <_ZNKSt8__detail15_Hash_code_baseIN7APIDoIP12EDoIPRequestESt4pairIKS2_S3_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEENS_10_Select1stESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE7_M_hashEv>
 8102ad6:	4602      	mov	r2, r0
 8102ad8:	683b      	ldr	r3, [r7, #0]
 8102ada:	f993 3000 	ldrsb.w	r3, [r3]
 8102ade:	4619      	mov	r1, r3
 8102ae0:	4610      	mov	r0, r2
 8102ae2:	f000 fbd5 	bl	8103290 <_ZNKSt11__hash_enumIN7APIDoIP12EDoIPRequestELb1EEclES1_>
 8102ae6:	4603      	mov	r3, r0
	}
 8102ae8:	4618      	mov	r0, r3
 8102aea:	3708      	adds	r7, #8
 8102aec:	46bd      	mov	sp, r7
 8102aee:	bd80      	pop	{r7, pc}

08102af0 <_ZNKSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE15_M_bucket_indexEj>:
      _M_bucket_index(__hash_code __c) const
 8102af0:	b580      	push	{r7, lr}
 8102af2:	b082      	sub	sp, #8
 8102af4:	af00      	add	r7, sp, #0
 8102af6:	6078      	str	r0, [r7, #4]
 8102af8:	6039      	str	r1, [r7, #0]
      { return __hash_code_base::_M_bucket_index(__c, _M_bucket_count); }
 8102afa:	687b      	ldr	r3, [r7, #4]
 8102afc:	685b      	ldr	r3, [r3, #4]
 8102afe:	461a      	mov	r2, r3
 8102b00:	6839      	ldr	r1, [r7, #0]
 8102b02:	6878      	ldr	r0, [r7, #4]
 8102b04:	f000 fbd7 	bl	81032b6 <_ZNKSt8__detail15_Hash_code_baseIN7APIDoIP12EDoIPRequestESt4pairIKS2_S3_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEENS_10_Select1stESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE15_M_bucket_indexEjj>
 8102b08:	4603      	mov	r3, r0
 8102b0a:	4618      	mov	r0, r3
 8102b0c:	3708      	adds	r7, #8
 8102b0e:	46bd      	mov	sp, r7
 8102b10:	bd80      	pop	{r7, pc}

08102b12 <_ZNKSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE15_M_find_node_trIS1_EEPNSC_10_Hash_nodeISA_Lb0EEEjRKT_j>:
	_M_find_node_tr(size_type __bkt, const _Kt& __key,
 8102b12:	b580      	push	{r7, lr}
 8102b14:	b086      	sub	sp, #24
 8102b16:	af00      	add	r7, sp, #0
 8102b18:	60f8      	str	r0, [r7, #12]
 8102b1a:	60b9      	str	r1, [r7, #8]
 8102b1c:	607a      	str	r2, [r7, #4]
 8102b1e:	603b      	str	r3, [r7, #0]
	  auto __before_n = _M_find_before_node_tr(__bkt, __key, __c);
 8102b20:	683b      	ldr	r3, [r7, #0]
 8102b22:	687a      	ldr	r2, [r7, #4]
 8102b24:	68b9      	ldr	r1, [r7, #8]
 8102b26:	68f8      	ldr	r0, [r7, #12]
 8102b28:	f000 fbd7 	bl	81032da <_ZNKSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE22_M_find_before_node_trIS1_EEPNSC_15_Hash_node_baseEjRKT_j>
 8102b2c:	6178      	str	r0, [r7, #20]
	  if (__before_n)
 8102b2e:	697b      	ldr	r3, [r7, #20]
 8102b30:	2b00      	cmp	r3, #0
 8102b32:	d002      	beq.n	8102b3a <_ZNKSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE15_M_find_node_trIS1_EEPNSC_10_Hash_nodeISA_Lb0EEEjRKT_j+0x28>
	    return static_cast<__node_ptr>(__before_n->_M_nxt);
 8102b34:	697b      	ldr	r3, [r7, #20]
 8102b36:	681b      	ldr	r3, [r3, #0]
 8102b38:	e000      	b.n	8102b3c <_ZNKSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE15_M_find_node_trIS1_EEPNSC_10_Hash_nodeISA_Lb0EEEjRKT_j+0x2a>
	  return nullptr;
 8102b3a:	2300      	movs	r3, #0
	}
 8102b3c:	4618      	mov	r0, r3
 8102b3e:	3718      	adds	r7, #24
 8102b40:	46bd      	mov	sp, r7
 8102b42:	bd80      	pop	{r7, pc}

08102b44 <_ZNSt8__detail14_Node_iteratorISt4pairIKN7APIDoIP12EDoIPRequestES1_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0ELb0EEC1EPNS_10_Hash_nodeISB_Lb0EEE>:
      _Node_iterator(__node_type* __p) noexcept
 8102b44:	b580      	push	{r7, lr}
 8102b46:	b082      	sub	sp, #8
 8102b48:	af00      	add	r7, sp, #0
 8102b4a:	6078      	str	r0, [r7, #4]
 8102b4c:	6039      	str	r1, [r7, #0]
      : __base_type(__p) { }
 8102b4e:	687b      	ldr	r3, [r7, #4]
 8102b50:	6839      	ldr	r1, [r7, #0]
 8102b52:	4618      	mov	r0, r3
 8102b54:	f000 fc06 	bl	8103364 <_ZNSt8__detail19_Node_iterator_baseISt4pairIKN7APIDoIP12EDoIPRequestES1_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEC1EPNS_10_Hash_nodeISB_Lb0EEE>
 8102b58:	687b      	ldr	r3, [r7, #4]
 8102b5a:	4618      	mov	r0, r3
 8102b5c:	3708      	adds	r7, #8
 8102b5e:	46bd      	mov	sp, r7
 8102b60:	bd80      	pop	{r7, pc}

08102b62 <_ZNSt4pairINSt8__detail14_Node_iteratorIS_IKN7APIDoIP12EDoIPRequestES_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0ELb0EEEbEC1ISC_bEEOT_OT0_>:
	pair(_U1&& __x, _U2&& __y)
 8102b62:	b580      	push	{r7, lr}
 8102b64:	b084      	sub	sp, #16
 8102b66:	af00      	add	r7, sp, #0
 8102b68:	60f8      	str	r0, [r7, #12]
 8102b6a:	60b9      	str	r1, [r7, #8]
 8102b6c:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y))
 8102b6e:	68b8      	ldr	r0, [r7, #8]
 8102b70:	f000 fc07 	bl	8103382 <_ZSt7forwardINSt8__detail14_Node_iteratorISt4pairIKN7APIDoIP12EDoIPRequestES2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0ELb0EEEEOT_RNSt16remove_referenceISE_E4typeE>
 8102b74:	4602      	mov	r2, r0
 8102b76:	68fb      	ldr	r3, [r7, #12]
 8102b78:	6812      	ldr	r2, [r2, #0]
 8102b7a:	601a      	str	r2, [r3, #0]
 8102b7c:	6878      	ldr	r0, [r7, #4]
 8102b7e:	f7fe fe8d 	bl	810189c <_ZSt7forwardIbEOT_RNSt16remove_referenceIS0_E4typeE>
 8102b82:	4603      	mov	r3, r0
 8102b84:	781a      	ldrb	r2, [r3, #0]
 8102b86:	68fb      	ldr	r3, [r7, #12]
 8102b88:	711a      	strb	r2, [r3, #4]
	{ }
 8102b8a:	68fb      	ldr	r3, [r7, #12]
 8102b8c:	4618      	mov	r0, r3
 8102b8e:	3710      	adds	r7, #16
 8102b90:	46bd      	mov	sp, r7
 8102b92:	bd80      	pop	{r7, pc}

08102b94 <_ZSt7forwardIRKN7APIDoIP12EDoIPRequestEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8102b94:	b480      	push	{r7}
 8102b96:	b083      	sub	sp, #12
 8102b98:	af00      	add	r7, sp, #0
 8102b9a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8102b9c:	687b      	ldr	r3, [r7, #4]
 8102b9e:	4618      	mov	r0, r3
 8102ba0:	370c      	adds	r7, #12
 8102ba2:	46bd      	mov	sp, r7
 8102ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102ba8:	4770      	bx	lr

08102baa <_ZNSt8__detail12_NodeBuilderINS_10_Select1stEE8_S_buildIRKN7APIDoIP12EDoIPRequestERKSt4pairIS6_S8_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEENS_10_AllocNodeISaINS_10_Hash_nodeISF_Lb0EEEEEEEEPNT1_11__node_typeEOT_OT0_RKSN_>:
	_S_build(_Kt&& __k, _Arg&& __arg, const _NodeGenerator& __node_gen)
 8102baa:	b590      	push	{r4, r7, lr}
 8102bac:	b085      	sub	sp, #20
 8102bae:	af00      	add	r7, sp, #0
 8102bb0:	60f8      	str	r0, [r7, #12]
 8102bb2:	60b9      	str	r1, [r7, #8]
 8102bb4:	607a      	str	r2, [r7, #4]
	  return __node_gen(std::forward<_Kt>(__k),
 8102bb6:	68f8      	ldr	r0, [r7, #12]
 8102bb8:	f7ff ffec 	bl	8102b94 <_ZSt7forwardIRKN7APIDoIP12EDoIPRequestEEOT_RNSt16remove_referenceIS4_E4typeE>
 8102bbc:	4604      	mov	r4, r0
			    std::forward<_Arg>(__arg).second);
 8102bbe:	68b8      	ldr	r0, [r7, #8]
 8102bc0:	f7ff fba6 	bl	8102310 <_ZSt7forwardIRKSt4pairIKN7APIDoIP12EDoIPRequestES0_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEEEOT_RNSt16remove_referenceISD_E4typeE>
 8102bc4:	4603      	mov	r3, r0
 8102bc6:	3304      	adds	r3, #4
	  return __node_gen(std::forward<_Kt>(__k),
 8102bc8:	461a      	mov	r2, r3
 8102bca:	4621      	mov	r1, r4
 8102bcc:	6878      	ldr	r0, [r7, #4]
 8102bce:	f000 fbe3 	bl	8103398 <_ZNKSt8__detail10_AllocNodeISaINS_10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEEEEclIJRS5_RKSB_EEEPSD_DpOT_>
 8102bd2:	4603      	mov	r3, r0
	}
 8102bd4:	4618      	mov	r0, r3
 8102bd6:	3714      	adds	r7, #20
 8102bd8:	46bd      	mov	sp, r7
 8102bda:	bd90      	pop	{r4, r7, pc}

08102bdc <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE12_Scoped_nodeC1EPNSC_10_Hash_nodeISA_Lb0EEEPNSC_16_Hashtable_allocISaISQ_EEE>:
	_Scoped_node(__node_ptr __n, __hashtable_alloc* __h)
 8102bdc:	b480      	push	{r7}
 8102bde:	b085      	sub	sp, #20
 8102be0:	af00      	add	r7, sp, #0
 8102be2:	60f8      	str	r0, [r7, #12]
 8102be4:	60b9      	str	r1, [r7, #8]
 8102be6:	607a      	str	r2, [r7, #4]
	: _M_h(__h), _M_node(__n) { }
 8102be8:	68fb      	ldr	r3, [r7, #12]
 8102bea:	687a      	ldr	r2, [r7, #4]
 8102bec:	601a      	str	r2, [r3, #0]
 8102bee:	68fb      	ldr	r3, [r7, #12]
 8102bf0:	68ba      	ldr	r2, [r7, #8]
 8102bf2:	605a      	str	r2, [r3, #4]
 8102bf4:	68fb      	ldr	r3, [r7, #12]
 8102bf6:	4618      	mov	r0, r3
 8102bf8:	3714      	adds	r7, #20
 8102bfa:	46bd      	mov	sp, r7
 8102bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102c00:	4770      	bx	lr

08102c02 <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE12_Scoped_nodeD1Ev>:
	~_Scoped_node() { if (_M_node) _M_h->_M_deallocate_node(_M_node); };
 8102c02:	b580      	push	{r7, lr}
 8102c04:	b082      	sub	sp, #8
 8102c06:	af00      	add	r7, sp, #0
 8102c08:	6078      	str	r0, [r7, #4]
 8102c0a:	687b      	ldr	r3, [r7, #4]
 8102c0c:	685b      	ldr	r3, [r3, #4]
 8102c0e:	2b00      	cmp	r3, #0
 8102c10:	d007      	beq.n	8102c22 <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE12_Scoped_nodeD1Ev+0x20>
 8102c12:	687b      	ldr	r3, [r7, #4]
 8102c14:	681a      	ldr	r2, [r3, #0]
 8102c16:	687b      	ldr	r3, [r7, #4]
 8102c18:	685b      	ldr	r3, [r3, #4]
 8102c1a:	4619      	mov	r1, r3
 8102c1c:	4610      	mov	r0, r2
 8102c1e:	f7ff f9b6 	bl	8101f8e <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEEEE18_M_deallocate_nodeEPSD_>
 8102c22:	687b      	ldr	r3, [r7, #4]
 8102c24:	4618      	mov	r0, r3
 8102c26:	3708      	adds	r7, #8
 8102c28:	46bd      	mov	sp, r7
 8102c2a:	bd80      	pop	{r7, pc}

08102c2c <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_insert_unique_nodeEjjPNSC_10_Hash_nodeISA_Lb0EEEj>:
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
 8102c2c:	b590      	push	{r4, r7, lr}
 8102c2e:	b08d      	sub	sp, #52	@ 0x34
 8102c30:	af02      	add	r7, sp, #8
 8102c32:	60f8      	str	r0, [r7, #12]
 8102c34:	60b9      	str	r1, [r7, #8]
 8102c36:	607a      	str	r2, [r7, #4]
 8102c38:	603b      	str	r3, [r7, #0]
      const __rehash_state& __saved_state = _M_rehash_policy._M_state();
 8102c3a:	68fb      	ldr	r3, [r7, #12]
 8102c3c:	3310      	adds	r3, #16
 8102c3e:	4618      	mov	r0, r3
 8102c40:	f7fe fbb3 	bl	81013aa <_ZNKSt8__detail20_Prime_rehash_policy8_M_stateEv>
 8102c44:	4603      	mov	r3, r0
 8102c46:	61fb      	str	r3, [r7, #28]
 8102c48:	f107 031c 	add.w	r3, r7, #28
 8102c4c:	627b      	str	r3, [r7, #36]	@ 0x24
	= _M_rehash_policy._M_need_rehash(_M_bucket_count, _M_element_count,
 8102c4e:	68fb      	ldr	r3, [r7, #12]
 8102c50:	f103 0110 	add.w	r1, r3, #16
 8102c54:	68fb      	ldr	r3, [r7, #12]
 8102c56:	685a      	ldr	r2, [r3, #4]
 8102c58:	68fb      	ldr	r3, [r7, #12]
 8102c5a:	68dc      	ldr	r4, [r3, #12]
 8102c5c:	f107 0014 	add.w	r0, r7, #20
 8102c60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8102c62:	9300      	str	r3, [sp, #0]
 8102c64:	4623      	mov	r3, r4
 8102c66:	f022 ffc1 	bl	8125bec <_ZNKSt8__detail20_Prime_rehash_policy14_M_need_rehashEjjj>
      if (__do_rehash.first)
 8102c6a:	7d3b      	ldrb	r3, [r7, #20]
 8102c6c:	2b00      	cmp	r3, #0
 8102c6e:	d00a      	beq.n	8102c86 <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_insert_unique_nodeEjjPNSC_10_Hash_nodeISA_Lb0EEEj+0x5a>
	  _M_rehash(__do_rehash.second, __saved_state);
 8102c70:	69bb      	ldr	r3, [r7, #24]
 8102c72:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8102c74:	4619      	mov	r1, r3
 8102c76:	68f8      	ldr	r0, [r7, #12]
 8102c78:	f000 fba8 	bl	81033cc <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE9_M_rehashEjRKj>
	  __bkt = _M_bucket_index(__code);
 8102c7c:	6879      	ldr	r1, [r7, #4]
 8102c7e:	68f8      	ldr	r0, [r7, #12]
 8102c80:	f7ff ff36 	bl	8102af0 <_ZNKSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE15_M_bucket_indexEj>
 8102c84:	60b8      	str	r0, [r7, #8]
      this->_M_store_code(*__node, __code);
 8102c86:	683b      	ldr	r3, [r7, #0]
 8102c88:	3304      	adds	r3, #4
 8102c8a:	687a      	ldr	r2, [r7, #4]
 8102c8c:	4619      	mov	r1, r3
 8102c8e:	68f8      	ldr	r0, [r7, #12]
 8102c90:	f000 fbab 	bl	81033ea <_ZNKSt8__detail15_Hash_code_baseIN7APIDoIP12EDoIPRequestESt4pairIKS2_S3_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEENS_10_Select1stESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE13_M_store_codeERNS_21_Hash_node_code_cacheILb0EEEj>
      _M_insert_bucket_begin(__bkt, __node);
 8102c94:	683a      	ldr	r2, [r7, #0]
 8102c96:	68b9      	ldr	r1, [r7, #8]
 8102c98:	68f8      	ldr	r0, [r7, #12]
 8102c9a:	f000 fbb2 	bl	8103402 <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE22_M_insert_bucket_beginEjPNSC_10_Hash_nodeISA_Lb0EEE>
      ++_M_element_count;
 8102c9e:	68fb      	ldr	r3, [r7, #12]
 8102ca0:	68db      	ldr	r3, [r3, #12]
 8102ca2:	1c5a      	adds	r2, r3, #1
 8102ca4:	68fb      	ldr	r3, [r7, #12]
 8102ca6:	60da      	str	r2, [r3, #12]
      return iterator(__node);
 8102ca8:	f107 0320 	add.w	r3, r7, #32
 8102cac:	6839      	ldr	r1, [r7, #0]
 8102cae:	4618      	mov	r0, r3
 8102cb0:	f7ff ff48 	bl	8102b44 <_ZNSt8__detail14_Node_iteratorISt4pairIKN7APIDoIP12EDoIPRequestES1_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0ELb0EEC1EPNS_10_Hash_nodeISB_Lb0EEE>
 8102cb4:	6a3b      	ldr	r3, [r7, #32]
    }
 8102cb6:	4618      	mov	r0, r3
 8102cb8:	372c      	adds	r7, #44	@ 0x2c
 8102cba:	46bd      	mov	sp, r7
 8102cbc:	bd90      	pop	{r4, r7, pc}

08102cbe <_ZNSt8__detail21_Hashtable_ebo_helperILi0ESaINS_10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEEELb1EE6_M_getEv>:
      _Tp& _M_get() { return static_cast<_Tp&>(*this); }
 8102cbe:	b480      	push	{r7}
 8102cc0:	b083      	sub	sp, #12
 8102cc2:	af00      	add	r7, sp, #0
 8102cc4:	6078      	str	r0, [r7, #4]
 8102cc6:	687b      	ldr	r3, [r7, #4]
 8102cc8:	4618      	mov	r0, r3
 8102cca:	370c      	adds	r7, #12
 8102ccc:	46bd      	mov	sp, r7
 8102cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102cd2:	4770      	bx	lr

08102cd4 <_ZN9__gnu_cxx16__aligned_bufferISt4pairIKN7APIDoIP12EDoIPRequestES1_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEEE6_M_ptrEv>:
      {
        return static_cast<const void*>(&_M_storage);
      }

      _Tp*
      _M_ptr() noexcept
 8102cd4:	b580      	push	{r7, lr}
 8102cd6:	b082      	sub	sp, #8
 8102cd8:	af00      	add	r7, sp, #0
 8102cda:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 8102cdc:	6878      	ldr	r0, [r7, #4]
 8102cde:	f000 fbd7 	bl	8103490 <_ZN9__gnu_cxx16__aligned_bufferISt4pairIKN7APIDoIP12EDoIPRequestES1_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEEE7_M_addrEv>
 8102ce2:	4603      	mov	r3, r0
 8102ce4:	4618      	mov	r0, r3
 8102ce6:	3708      	adds	r7, #8
 8102ce8:	46bd      	mov	sp, r7
 8102cea:	bd80      	pop	{r7, pc}

08102cec <_ZSt10destroy_atISt4pairIKN7APIDoIP12EDoIPRequestES0_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEEEvPT_>:
_GLIBCXX_BEGIN_NAMESPACE_VERSION

#if __cplusplus >= 201703L
  template <typename _Tp>
    _GLIBCXX20_CONSTEXPR inline void
    destroy_at(_Tp* __location)
 8102cec:	b480      	push	{r7}
 8102cee:	b083      	sub	sp, #12
 8102cf0:	af00      	add	r7, sp, #0
 8102cf2:	6078      	str	r0, [r7, #4]
	  for (auto& __x : *__location)
	    std::destroy_at(std::__addressof(__x));
	}
      else
	__location->~_Tp();
    }
 8102cf4:	bf00      	nop
 8102cf6:	370c      	adds	r7, #12
 8102cf8:	46bd      	mov	sp, r7
 8102cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102cfe:	4770      	bx	lr

08102d00 <_ZNSt19__ptr_traits_ptr_toIPNSt8__detail10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEESD_Lb0EE10pointer_toERSD_>:
      pointer_to(element_type& __r) noexcept
 8102d00:	b580      	push	{r7, lr}
 8102d02:	b082      	sub	sp, #8
 8102d04:	af00      	add	r7, sp, #0
 8102d06:	6078      	str	r0, [r7, #4]
      { return std::addressof(__r); }
 8102d08:	6878      	ldr	r0, [r7, #4]
 8102d0a:	f000 fbcc 	bl	81034a6 <_ZSt9addressofINSt8__detail10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEEEPT_RSE_>
 8102d0e:	4603      	mov	r3, r0
 8102d10:	4618      	mov	r0, r3
 8102d12:	3708      	adds	r7, #8
 8102d14:	46bd      	mov	sp, r7
 8102d16:	bd80      	pop	{r7, pc}

08102d18 <_ZNSt16allocator_traitsISaINSt8__detail10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEEEE10deallocateERSE_PSD_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8102d18:	b580      	push	{r7, lr}
 8102d1a:	b088      	sub	sp, #32
 8102d1c:	af00      	add	r7, sp, #0
 8102d1e:	60f8      	str	r0, [r7, #12]
 8102d20:	60b9      	str	r1, [r7, #8]
 8102d22:	607a      	str	r2, [r7, #4]
 8102d24:	68fb      	ldr	r3, [r7, #12]
 8102d26:	61fb      	str	r3, [r7, #28]
 8102d28:	68bb      	ldr	r3, [r7, #8]
 8102d2a:	61bb      	str	r3, [r7, #24]
 8102d2c:	687b      	ldr	r3, [r7, #4]
 8102d2e:	617b      	str	r3, [r7, #20]
	if (std::__is_constant_evaluated())
 8102d30:	f7fe fae4 	bl	81012fc <__is_constant_evaluated>
 8102d34:	4603      	mov	r3, r0
 8102d36:	2b00      	cmp	r3, #0
 8102d38:	d003      	beq.n	8102d42 <_ZNSt16allocator_traitsISaINSt8__detail10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEEEE10deallocateERSE_PSD_j+0x2a>
	    ::operator delete(__p);
 8102d3a:	69b8      	ldr	r0, [r7, #24]
 8102d3c:	f022 fe22 	bl	8125984 <_ZdlPv>
	    return;
 8102d40:	e005      	b.n	8102d4e <_ZNSt16allocator_traitsISaINSt8__detail10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEEEE10deallocateERSE_PSD_j+0x36>
	__allocator_base<_Tp>::deallocate(__p, __n);
 8102d42:	697a      	ldr	r2, [r7, #20]
 8102d44:	69b9      	ldr	r1, [r7, #24]
 8102d46:	69f8      	ldr	r0, [r7, #28]
 8102d48:	f000 fe75 	bl	8103a36 <_ZNSt15__new_allocatorINSt8__detail10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEEE10deallocateEPSD_j>
      { __a.deallocate(__p, __n); }
 8102d4c:	bf00      	nop
 8102d4e:	bf00      	nop
 8102d50:	3720      	adds	r7, #32
 8102d52:	46bd      	mov	sp, r7
 8102d54:	bd80      	pop	{r7, pc}

08102d56 <_ZSt9addressofIPNSt8__detail15_Hash_node_baseEEPT_RS3_>:
   *  @return   The actual address.
  */
  template<typename _Tp>
    _GLIBCXX_NODISCARD
    inline _GLIBCXX17_CONSTEXPR _Tp*
    addressof(_Tp& __r) noexcept
 8102d56:	b580      	push	{r7, lr}
 8102d58:	b082      	sub	sp, #8
 8102d5a:	af00      	add	r7, sp, #0
 8102d5c:	6078      	str	r0, [r7, #4]
    { return std::__addressof(__r); }
 8102d5e:	6878      	ldr	r0, [r7, #4]
 8102d60:	f000 fbad 	bl	81034be <_ZSt11__addressofIPNSt8__detail15_Hash_node_baseEEPT_RS3_>
 8102d64:	4603      	mov	r3, r0
 8102d66:	4618      	mov	r0, r3
 8102d68:	3708      	adds	r7, #8
 8102d6a:	46bd      	mov	sp, r7
 8102d6c:	bd80      	pop	{r7, pc}

08102d6e <_ZNSt15__new_allocatorIPNSt8__detail15_Hash_node_baseEEC1Ev>:
 8102d6e:	b480      	push	{r7}
 8102d70:	b083      	sub	sp, #12
 8102d72:	af00      	add	r7, sp, #0
 8102d74:	6078      	str	r0, [r7, #4]
 8102d76:	687b      	ldr	r3, [r7, #4]
 8102d78:	4618      	mov	r0, r3
 8102d7a:	370c      	adds	r7, #12
 8102d7c:	46bd      	mov	sp, r7
 8102d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102d82:	4770      	bx	lr

08102d84 <_ZNSt15__new_allocatorINSt8__detail10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestEPKcELb0EEEEC1Ev>:
 8102d84:	b480      	push	{r7}
 8102d86:	b083      	sub	sp, #12
 8102d88:	af00      	add	r7, sp, #0
 8102d8a:	6078      	str	r0, [r7, #4]
 8102d8c:	687b      	ldr	r3, [r7, #4]
 8102d8e:	4618      	mov	r0, r3
 8102d90:	370c      	adds	r7, #12
 8102d92:	46bd      	mov	sp, r7
 8102d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102d98:	4770      	bx	lr

08102d9a <_ZNSt8__detail15_Hash_code_baseIN7APIDoIP12EDoIPRequestESt4pairIKS2_PKcENS_10_Select1stESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EEC1ERKSA_>:
      _Hash_code_base(const _Hash& __hash) : __ebo_hash(__hash) { }
 8102d9a:	b580      	push	{r7, lr}
 8102d9c:	b082      	sub	sp, #8
 8102d9e:	af00      	add	r7, sp, #0
 8102da0:	6078      	str	r0, [r7, #4]
 8102da2:	6039      	str	r1, [r7, #0]
 8102da4:	6839      	ldr	r1, [r7, #0]
 8102da6:	6878      	ldr	r0, [r7, #4]
 8102da8:	f000 f9ee 	bl	8103188 <_ZNSt8__detail21_Hashtable_ebo_helperILi1ESt4hashIN7APIDoIP12EDoIPRequestEELb1EEC1IRKS4_EEOT_>
 8102dac:	687b      	ldr	r3, [r7, #4]
 8102dae:	4618      	mov	r0, r3
 8102db0:	3708      	adds	r7, #8
 8102db2:	46bd      	mov	sp, r7
 8102db4:	bd80      	pop	{r7, pc}

08102db6 <_ZSt7forwardISaINSt8__detail10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestEPKcELb0EEEEEOT_RNSt16remove_referenceISB_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8102db6:	b480      	push	{r7}
 8102db8:	b083      	sub	sp, #12
 8102dba:	af00      	add	r7, sp, #0
 8102dbc:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8102dbe:	687b      	ldr	r3, [r7, #4]
 8102dc0:	4618      	mov	r0, r3
 8102dc2:	370c      	adds	r7, #12
 8102dc4:	46bd      	mov	sp, r7
 8102dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102dca:	4770      	bx	lr

08102dcc <_ZNSt8__detail21_Hashtable_ebo_helperILi0ESaINS_10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestEPKcELb0EEEELb1EEC1ISA_EEOT_>:
	_Hashtable_ebo_helper(_OtherTp&& __tp)
 8102dcc:	b580      	push	{r7, lr}
 8102dce:	b082      	sub	sp, #8
 8102dd0:	af00      	add	r7, sp, #0
 8102dd2:	6078      	str	r0, [r7, #4]
 8102dd4:	6039      	str	r1, [r7, #0]
	: _Tp(std::forward<_OtherTp>(__tp))
 8102dd6:	6838      	ldr	r0, [r7, #0]
 8102dd8:	f7ff ffed 	bl	8102db6 <_ZSt7forwardISaINSt8__detail10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestEPKcELb0EEEEEOT_RNSt16remove_referenceISB_E4typeE>
 8102ddc:	4603      	mov	r3, r0
 8102dde:	4619      	mov	r1, r3
 8102de0:	6878      	ldr	r0, [r7, #4]
 8102de2:	f000 fb86 	bl	81034f2 <_ZNSaINSt8__detail10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestEPKcELb0EEEEC1ERKS9_>
	{ }
 8102de6:	687b      	ldr	r3, [r7, #4]
 8102de8:	4618      	mov	r0, r3
 8102dea:	3708      	adds	r7, #8
 8102dec:	46bd      	mov	sp, r7
 8102dee:	bd80      	pop	{r7, pc}

08102df0 <_ZNKSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_PKcESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE4sizeEv>:
      size() const noexcept
 8102df0:	b480      	push	{r7}
 8102df2:	b083      	sub	sp, #12
 8102df4:	af00      	add	r7, sp, #0
 8102df6:	6078      	str	r0, [r7, #4]
      { return _M_element_count; }
 8102df8:	687b      	ldr	r3, [r7, #4]
 8102dfa:	68db      	ldr	r3, [r3, #12]
 8102dfc:	4618      	mov	r0, r3
 8102dfe:	370c      	adds	r7, #12
 8102e00:	46bd      	mov	sp, r7
 8102e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102e06:	4770      	bx	lr

08102e08 <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_PKcESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE22__small_size_thresholdEv>:
      __small_size_threshold() noexcept
 8102e08:	b580      	push	{r7, lr}
 8102e0a:	af00      	add	r7, sp, #0
	  __detail::_Hashtable_hash_traits<_Hash>::__small_size_threshold();
 8102e0c:	f000 f9e2 	bl	81031d4 <_ZNSt8__detail22_Hashtable_hash_traitsISt4hashIN7APIDoIP12EDoIPRequestEEE22__small_size_thresholdEv>
 8102e10:	4603      	mov	r3, r0
      }
 8102e12:	4618      	mov	r0, r3
 8102e14:	bd80      	pop	{r7, pc}

08102e16 <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_PKcESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE5beginEv>:
      begin() noexcept
 8102e16:	b580      	push	{r7, lr}
 8102e18:	b084      	sub	sp, #16
 8102e1a:	af00      	add	r7, sp, #0
 8102e1c:	6078      	str	r0, [r7, #4]
      { return iterator(_M_begin()); }
 8102e1e:	6878      	ldr	r0, [r7, #4]
 8102e20:	f7fe ffd0 	bl	8101dc4 <_ZNKSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_PKcESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE8_M_beginEv>
 8102e24:	4602      	mov	r2, r0
 8102e26:	f107 030c 	add.w	r3, r7, #12
 8102e2a:	4611      	mov	r1, r2
 8102e2c:	4618      	mov	r0, r3
 8102e2e:	f000 f8ad 	bl	8102f8c <_ZNSt8__detail14_Node_iteratorISt4pairIKN7APIDoIP12EDoIPRequestEPKcELb0ELb0EEC1EPNS_10_Hash_nodeIS7_Lb0EEE>
 8102e32:	68fb      	ldr	r3, [r7, #12]
 8102e34:	4618      	mov	r0, r3
 8102e36:	3710      	adds	r7, #16
 8102e38:	46bd      	mov	sp, r7
 8102e3a:	bd80      	pop	{r7, pc}

08102e3c <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_PKcESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE3endEv>:
      end() noexcept
 8102e3c:	b580      	push	{r7, lr}
 8102e3e:	b084      	sub	sp, #16
 8102e40:	af00      	add	r7, sp, #0
 8102e42:	6078      	str	r0, [r7, #4]
      { return iterator(nullptr); }
 8102e44:	f107 030c 	add.w	r3, r7, #12
 8102e48:	2100      	movs	r1, #0
 8102e4a:	4618      	mov	r0, r3
 8102e4c:	f000 f89e 	bl	8102f8c <_ZNSt8__detail14_Node_iteratorISt4pairIKN7APIDoIP12EDoIPRequestEPKcELb0ELb0EEC1EPNS_10_Hash_nodeIS7_Lb0EEE>
 8102e50:	68fb      	ldr	r3, [r7, #12]
 8102e52:	4618      	mov	r0, r3
 8102e54:	3710      	adds	r7, #16
 8102e56:	46bd      	mov	sp, r7
 8102e58:	bd80      	pop	{r7, pc}

08102e5a <_ZNSt8__detaileqERKNS_19_Node_iterator_baseISt4pairIKN7APIDoIP12EDoIPRequestEPKcELb0EEESA_>:
      operator==(const _Node_iterator_base& __x, const _Node_iterator_base& __y)
 8102e5a:	b480      	push	{r7}
 8102e5c:	b083      	sub	sp, #12
 8102e5e:	af00      	add	r7, sp, #0
 8102e60:	6078      	str	r0, [r7, #4]
 8102e62:	6039      	str	r1, [r7, #0]
      { return __x._M_cur == __y._M_cur; }
 8102e64:	687b      	ldr	r3, [r7, #4]
 8102e66:	681a      	ldr	r2, [r3, #0]
 8102e68:	683b      	ldr	r3, [r7, #0]
 8102e6a:	681b      	ldr	r3, [r3, #0]
 8102e6c:	429a      	cmp	r2, r3
 8102e6e:	bf0c      	ite	eq
 8102e70:	2301      	moveq	r3, #1
 8102e72:	2300      	movne	r3, #0
 8102e74:	b2db      	uxtb	r3, r3
 8102e76:	4618      	mov	r0, r3
 8102e78:	370c      	adds	r7, #12
 8102e7a:	46bd      	mov	sp, r7
 8102e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102e80:	4770      	bx	lr

08102e82 <_ZNSt8__detail14_Node_iteratorISt4pairIKN7APIDoIP12EDoIPRequestEPKcELb0ELb0EEppEv>:
      operator++() noexcept
 8102e82:	b580      	push	{r7, lr}
 8102e84:	b082      	sub	sp, #8
 8102e86:	af00      	add	r7, sp, #0
 8102e88:	6078      	str	r0, [r7, #4]
	this->_M_incr();
 8102e8a:	687b      	ldr	r3, [r7, #4]
 8102e8c:	4618      	mov	r0, r3
 8102e8e:	f000 fb3e 	bl	810350e <_ZNSt8__detail19_Node_iterator_baseISt4pairIKN7APIDoIP12EDoIPRequestEPKcELb0EE7_M_incrEv>
	return *this;
 8102e92:	687b      	ldr	r3, [r7, #4]
      }
 8102e94:	4618      	mov	r0, r3
 8102e96:	3708      	adds	r7, #8
 8102e98:	46bd      	mov	sp, r7
 8102e9a:	bd80      	pop	{r7, pc}

08102e9c <_ZNKSt8__detail15_Hashtable_baseIN7APIDoIP12EDoIPRequestESt4pairIKS2_PKcENS_10_Select1stESt8equal_toIS2_ESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEE16_M_key_equals_trIS2_EEbRKT_RKNS_16_Hash_node_valueIS7_Lb0EEE>:
	_M_key_equals_tr(const _Kt& __k,
 8102e9c:	b590      	push	{r4, r7, lr}
 8102e9e:	b087      	sub	sp, #28
 8102ea0:	af00      	add	r7, sp, #0
 8102ea2:	60f8      	str	r0, [r7, #12]
 8102ea4:	60b9      	str	r1, [r7, #8]
 8102ea6:	607a      	str	r2, [r7, #4]
	  return _M_eq()(__k, _ExtractKey{}(__n._M_v()));
 8102ea8:	68f8      	ldr	r0, [r7, #12]
 8102eaa:	f000 fb40 	bl	810352e <_ZNKSt8__detail15_Hashtable_baseIN7APIDoIP12EDoIPRequestESt4pairIKS2_PKcENS_10_Select1stESt8equal_toIS2_ESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEE5_M_eqEv>
 8102eae:	4604      	mov	r4, r0
 8102eb0:	687b      	ldr	r3, [r7, #4]
 8102eb2:	4618      	mov	r0, r3
 8102eb4:	f000 fb47 	bl	8103546 <_ZNKSt8__detail21_Hash_node_value_baseISt4pairIKN7APIDoIP12EDoIPRequestEPKcEE4_M_vEv>
 8102eb8:	4602      	mov	r2, r0
 8102eba:	f107 0314 	add.w	r3, r7, #20
 8102ebe:	4611      	mov	r1, r2
 8102ec0:	4618      	mov	r0, r3
 8102ec2:	f7ff fbe1 	bl	8102688 <_ZNKSt8__detail10_Select1stclIRKSt4pairIKN7APIDoIP12EDoIPRequestEPKcEEEONS0_10__1st_typeIT_E4typeEOSC_>
 8102ec6:	4603      	mov	r3, r0
 8102ec8:	461a      	mov	r2, r3
 8102eca:	68b9      	ldr	r1, [r7, #8]
 8102ecc:	4620      	mov	r0, r4
 8102ece:	f000 f9b1 	bl	8103234 <_ZNKSt8equal_toIN7APIDoIP12EDoIPRequestEEclERKS1_S4_>
 8102ed2:	4603      	mov	r3, r0
	}
 8102ed4:	4618      	mov	r0, r3
 8102ed6:	371c      	adds	r7, #28
 8102ed8:	46bd      	mov	sp, r7
 8102eda:	bd90      	pop	{r4, r7, pc}

08102edc <_ZNSt4pairINSt8__detail14_Node_iteratorIS_IKN7APIDoIP12EDoIPRequestEPKcELb0ELb0EEEbEC1IRS8_bEEOT_OT0_>:
	pair(_U1&& __x, _U2&& __y)
 8102edc:	b580      	push	{r7, lr}
 8102ede:	b084      	sub	sp, #16
 8102ee0:	af00      	add	r7, sp, #0
 8102ee2:	60f8      	str	r0, [r7, #12]
 8102ee4:	60b9      	str	r1, [r7, #8]
 8102ee6:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y))
 8102ee8:	68b8      	ldr	r0, [r7, #8]
 8102eea:	f000 fb38 	bl	810355e <_ZSt7forwardIRNSt8__detail14_Node_iteratorISt4pairIKN7APIDoIP12EDoIPRequestEPKcELb0ELb0EEEEOT_RNSt16remove_referenceISB_E4typeE>
 8102eee:	4602      	mov	r2, r0
 8102ef0:	68fb      	ldr	r3, [r7, #12]
 8102ef2:	6812      	ldr	r2, [r2, #0]
 8102ef4:	601a      	str	r2, [r3, #0]
 8102ef6:	6878      	ldr	r0, [r7, #4]
 8102ef8:	f7fe fcd0 	bl	810189c <_ZSt7forwardIbEOT_RNSt16remove_referenceIS0_E4typeE>
 8102efc:	4603      	mov	r3, r0
 8102efe:	781a      	ldrb	r2, [r3, #0]
 8102f00:	68fb      	ldr	r3, [r7, #12]
 8102f02:	711a      	strb	r2, [r3, #4]
	{ }
 8102f04:	68fb      	ldr	r3, [r7, #12]
 8102f06:	4618      	mov	r0, r3
 8102f08:	3710      	adds	r7, #16
 8102f0a:	46bd      	mov	sp, r7
 8102f0c:	bd80      	pop	{r7, pc}

08102f0e <_ZNKSt8__detail15_Hash_code_baseIN7APIDoIP12EDoIPRequestESt4pairIKS2_PKcENS_10_Select1stESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE15_M_hash_code_trIS2_EEjRKT_>:
	_M_hash_code_tr(const _Kt& __k) const
 8102f0e:	b580      	push	{r7, lr}
 8102f10:	b082      	sub	sp, #8
 8102f12:	af00      	add	r7, sp, #0
 8102f14:	6078      	str	r0, [r7, #4]
 8102f16:	6039      	str	r1, [r7, #0]
	  return _M_hash()(__k);
 8102f18:	6878      	ldr	r0, [r7, #4]
 8102f1a:	f000 fb2b 	bl	8103574 <_ZNKSt8__detail15_Hash_code_baseIN7APIDoIP12EDoIPRequestESt4pairIKS2_PKcENS_10_Select1stESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE7_M_hashEv>
 8102f1e:	4602      	mov	r2, r0
 8102f20:	683b      	ldr	r3, [r7, #0]
 8102f22:	f993 3000 	ldrsb.w	r3, [r3]
 8102f26:	4619      	mov	r1, r3
 8102f28:	4610      	mov	r0, r2
 8102f2a:	f000 f9b1 	bl	8103290 <_ZNKSt11__hash_enumIN7APIDoIP12EDoIPRequestELb1EEclES1_>
 8102f2e:	4603      	mov	r3, r0
	}
 8102f30:	4618      	mov	r0, r3
 8102f32:	3708      	adds	r7, #8
 8102f34:	46bd      	mov	sp, r7
 8102f36:	bd80      	pop	{r7, pc}

08102f38 <_ZNKSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_PKcESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE15_M_bucket_indexEj>:
      _M_bucket_index(__hash_code __c) const
 8102f38:	b580      	push	{r7, lr}
 8102f3a:	b082      	sub	sp, #8
 8102f3c:	af00      	add	r7, sp, #0
 8102f3e:	6078      	str	r0, [r7, #4]
 8102f40:	6039      	str	r1, [r7, #0]
      { return __hash_code_base::_M_bucket_index(__c, _M_bucket_count); }
 8102f42:	687b      	ldr	r3, [r7, #4]
 8102f44:	685b      	ldr	r3, [r3, #4]
 8102f46:	461a      	mov	r2, r3
 8102f48:	6839      	ldr	r1, [r7, #0]
 8102f4a:	6878      	ldr	r0, [r7, #4]
 8102f4c:	f000 fb1e 	bl	810358c <_ZNKSt8__detail15_Hash_code_baseIN7APIDoIP12EDoIPRequestESt4pairIKS2_PKcENS_10_Select1stESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE15_M_bucket_indexEjj>
 8102f50:	4603      	mov	r3, r0
 8102f52:	4618      	mov	r0, r3
 8102f54:	3708      	adds	r7, #8
 8102f56:	46bd      	mov	sp, r7
 8102f58:	bd80      	pop	{r7, pc}

08102f5a <_ZNKSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_PKcESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE15_M_find_node_trIS1_EEPNS8_10_Hash_nodeIS6_Lb0EEEjRKT_j>:
	_M_find_node_tr(size_type __bkt, const _Kt& __key,
 8102f5a:	b580      	push	{r7, lr}
 8102f5c:	b086      	sub	sp, #24
 8102f5e:	af00      	add	r7, sp, #0
 8102f60:	60f8      	str	r0, [r7, #12]
 8102f62:	60b9      	str	r1, [r7, #8]
 8102f64:	607a      	str	r2, [r7, #4]
 8102f66:	603b      	str	r3, [r7, #0]
	  auto __before_n = _M_find_before_node_tr(__bkt, __key, __c);
 8102f68:	683b      	ldr	r3, [r7, #0]
 8102f6a:	687a      	ldr	r2, [r7, #4]
 8102f6c:	68b9      	ldr	r1, [r7, #8]
 8102f6e:	68f8      	ldr	r0, [r7, #12]
 8102f70:	f000 fb1e 	bl	81035b0 <_ZNKSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_PKcESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE22_M_find_before_node_trIS1_EEPNS8_15_Hash_node_baseEjRKT_j>
 8102f74:	6178      	str	r0, [r7, #20]
	  if (__before_n)
 8102f76:	697b      	ldr	r3, [r7, #20]
 8102f78:	2b00      	cmp	r3, #0
 8102f7a:	d002      	beq.n	8102f82 <_ZNKSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_PKcESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE15_M_find_node_trIS1_EEPNS8_10_Hash_nodeIS6_Lb0EEEjRKT_j+0x28>
	    return static_cast<__node_ptr>(__before_n->_M_nxt);
 8102f7c:	697b      	ldr	r3, [r7, #20]
 8102f7e:	681b      	ldr	r3, [r3, #0]
 8102f80:	e000      	b.n	8102f84 <_ZNKSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_PKcESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE15_M_find_node_trIS1_EEPNS8_10_Hash_nodeIS6_Lb0EEEjRKT_j+0x2a>
	  return nullptr;
 8102f82:	2300      	movs	r3, #0
	}
 8102f84:	4618      	mov	r0, r3
 8102f86:	3718      	adds	r7, #24
 8102f88:	46bd      	mov	sp, r7
 8102f8a:	bd80      	pop	{r7, pc}

08102f8c <_ZNSt8__detail14_Node_iteratorISt4pairIKN7APIDoIP12EDoIPRequestEPKcELb0ELb0EEC1EPNS_10_Hash_nodeIS7_Lb0EEE>:
      _Node_iterator(__node_type* __p) noexcept
 8102f8c:	b580      	push	{r7, lr}
 8102f8e:	b082      	sub	sp, #8
 8102f90:	af00      	add	r7, sp, #0
 8102f92:	6078      	str	r0, [r7, #4]
 8102f94:	6039      	str	r1, [r7, #0]
      : __base_type(__p) { }
 8102f96:	687b      	ldr	r3, [r7, #4]
 8102f98:	6839      	ldr	r1, [r7, #0]
 8102f9a:	4618      	mov	r0, r3
 8102f9c:	f000 fb4d 	bl	810363a <_ZNSt8__detail19_Node_iterator_baseISt4pairIKN7APIDoIP12EDoIPRequestEPKcELb0EEC1EPNS_10_Hash_nodeIS7_Lb0EEE>
 8102fa0:	687b      	ldr	r3, [r7, #4]
 8102fa2:	4618      	mov	r0, r3
 8102fa4:	3708      	adds	r7, #8
 8102fa6:	46bd      	mov	sp, r7
 8102fa8:	bd80      	pop	{r7, pc}

08102faa <_ZNSt4pairINSt8__detail14_Node_iteratorIS_IKN7APIDoIP12EDoIPRequestEPKcELb0ELb0EEEbEC1IS8_bEEOT_OT0_>:
	pair(_U1&& __x, _U2&& __y)
 8102faa:	b580      	push	{r7, lr}
 8102fac:	b084      	sub	sp, #16
 8102fae:	af00      	add	r7, sp, #0
 8102fb0:	60f8      	str	r0, [r7, #12]
 8102fb2:	60b9      	str	r1, [r7, #8]
 8102fb4:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y))
 8102fb6:	68b8      	ldr	r0, [r7, #8]
 8102fb8:	f000 fb4e 	bl	8103658 <_ZSt7forwardINSt8__detail14_Node_iteratorISt4pairIKN7APIDoIP12EDoIPRequestEPKcELb0ELb0EEEEOT_RNSt16remove_referenceISA_E4typeE>
 8102fbc:	4602      	mov	r2, r0
 8102fbe:	68fb      	ldr	r3, [r7, #12]
 8102fc0:	6812      	ldr	r2, [r2, #0]
 8102fc2:	601a      	str	r2, [r3, #0]
 8102fc4:	6878      	ldr	r0, [r7, #4]
 8102fc6:	f7fe fc69 	bl	810189c <_ZSt7forwardIbEOT_RNSt16remove_referenceIS0_E4typeE>
 8102fca:	4603      	mov	r3, r0
 8102fcc:	781a      	ldrb	r2, [r3, #0]
 8102fce:	68fb      	ldr	r3, [r7, #12]
 8102fd0:	711a      	strb	r2, [r3, #4]
	{ }
 8102fd2:	68fb      	ldr	r3, [r7, #12]
 8102fd4:	4618      	mov	r0, r3
 8102fd6:	3710      	adds	r7, #16
 8102fd8:	46bd      	mov	sp, r7
 8102fda:	bd80      	pop	{r7, pc}

08102fdc <_ZNSt8__detail12_NodeBuilderINS_10_Select1stEE8_S_buildIRKN7APIDoIP12EDoIPRequestERKSt4pairIS6_PKcENS_10_AllocNodeISaINS_10_Hash_nodeISB_Lb0EEEEEEEEPNT1_11__node_typeEOT_OT0_RKSJ_>:
	_S_build(_Kt&& __k, _Arg&& __arg, const _NodeGenerator& __node_gen)
 8102fdc:	b590      	push	{r4, r7, lr}
 8102fde:	b085      	sub	sp, #20
 8102fe0:	af00      	add	r7, sp, #0
 8102fe2:	60f8      	str	r0, [r7, #12]
 8102fe4:	60b9      	str	r1, [r7, #8]
 8102fe6:	607a      	str	r2, [r7, #4]
	  return __node_gen(std::forward<_Kt>(__k),
 8102fe8:	68f8      	ldr	r0, [r7, #12]
 8102fea:	f7ff fdd3 	bl	8102b94 <_ZSt7forwardIRKN7APIDoIP12EDoIPRequestEEOT_RNSt16remove_referenceIS4_E4typeE>
 8102fee:	4604      	mov	r4, r0
			    std::forward<_Arg>(__arg).second);
 8102ff0:	68b8      	ldr	r0, [r7, #8]
 8102ff2:	f7ff fb3e 	bl	8102672 <_ZSt7forwardIRKSt4pairIKN7APIDoIP12EDoIPRequestEPKcEEOT_RNSt16remove_referenceIS9_E4typeE>
 8102ff6:	4603      	mov	r3, r0
 8102ff8:	3304      	adds	r3, #4
	  return __node_gen(std::forward<_Kt>(__k),
 8102ffa:	461a      	mov	r2, r3
 8102ffc:	4621      	mov	r1, r4
 8102ffe:	6878      	ldr	r0, [r7, #4]
 8103000:	f000 fb35 	bl	810366e <_ZNKSt8__detail10_AllocNodeISaINS_10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestEPKcELb0EEEEEclIJRS5_RKS7_EEEPS9_DpOT_>
 8103004:	4603      	mov	r3, r0
	}
 8103006:	4618      	mov	r0, r3
 8103008:	3714      	adds	r7, #20
 810300a:	46bd      	mov	sp, r7
 810300c:	bd90      	pop	{r4, r7, pc}

0810300e <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_PKcESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE12_Scoped_nodeC1EPNS8_10_Hash_nodeIS6_Lb0EEEPNS8_16_Hashtable_allocISaISM_EEE>:
	_Scoped_node(__node_ptr __n, __hashtable_alloc* __h)
 810300e:	b480      	push	{r7}
 8103010:	b085      	sub	sp, #20
 8103012:	af00      	add	r7, sp, #0
 8103014:	60f8      	str	r0, [r7, #12]
 8103016:	60b9      	str	r1, [r7, #8]
 8103018:	607a      	str	r2, [r7, #4]
	: _M_h(__h), _M_node(__n) { }
 810301a:	68fb      	ldr	r3, [r7, #12]
 810301c:	687a      	ldr	r2, [r7, #4]
 810301e:	601a      	str	r2, [r3, #0]
 8103020:	68fb      	ldr	r3, [r7, #12]
 8103022:	68ba      	ldr	r2, [r7, #8]
 8103024:	605a      	str	r2, [r3, #4]
 8103026:	68fb      	ldr	r3, [r7, #12]
 8103028:	4618      	mov	r0, r3
 810302a:	3714      	adds	r7, #20
 810302c:	46bd      	mov	sp, r7
 810302e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103032:	4770      	bx	lr

08103034 <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_PKcESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE12_Scoped_nodeD1Ev>:
	~_Scoped_node() { if (_M_node) _M_h->_M_deallocate_node(_M_node); };
 8103034:	b580      	push	{r7, lr}
 8103036:	b082      	sub	sp, #8
 8103038:	af00      	add	r7, sp, #0
 810303a:	6078      	str	r0, [r7, #4]
 810303c:	687b      	ldr	r3, [r7, #4]
 810303e:	685b      	ldr	r3, [r3, #4]
 8103040:	2b00      	cmp	r3, #0
 8103042:	d007      	beq.n	8103054 <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_PKcESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE12_Scoped_nodeD1Ev+0x20>
 8103044:	687b      	ldr	r3, [r7, #4]
 8103046:	681a      	ldr	r2, [r3, #0]
 8103048:	687b      	ldr	r3, [r7, #4]
 810304a:	685b      	ldr	r3, [r3, #4]
 810304c:	4619      	mov	r1, r3
 810304e:	4610      	mov	r0, r2
 8103050:	f7ff f89d 	bl	810218e <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestEPKcELb0EEEEE18_M_deallocate_nodeEPS9_>
 8103054:	687b      	ldr	r3, [r7, #4]
 8103056:	4618      	mov	r0, r3
 8103058:	3708      	adds	r7, #8
 810305a:	46bd      	mov	sp, r7
 810305c:	bd80      	pop	{r7, pc}

0810305e <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_PKcESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_insert_unique_nodeEjjPNS8_10_Hash_nodeIS6_Lb0EEEj>:
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
 810305e:	b590      	push	{r4, r7, lr}
 8103060:	b08d      	sub	sp, #52	@ 0x34
 8103062:	af02      	add	r7, sp, #8
 8103064:	60f8      	str	r0, [r7, #12]
 8103066:	60b9      	str	r1, [r7, #8]
 8103068:	607a      	str	r2, [r7, #4]
 810306a:	603b      	str	r3, [r7, #0]
      const __rehash_state& __saved_state = _M_rehash_policy._M_state();
 810306c:	68fb      	ldr	r3, [r7, #12]
 810306e:	3310      	adds	r3, #16
 8103070:	4618      	mov	r0, r3
 8103072:	f7fe f99a 	bl	81013aa <_ZNKSt8__detail20_Prime_rehash_policy8_M_stateEv>
 8103076:	4603      	mov	r3, r0
 8103078:	61fb      	str	r3, [r7, #28]
 810307a:	f107 031c 	add.w	r3, r7, #28
 810307e:	627b      	str	r3, [r7, #36]	@ 0x24
	= _M_rehash_policy._M_need_rehash(_M_bucket_count, _M_element_count,
 8103080:	68fb      	ldr	r3, [r7, #12]
 8103082:	f103 0110 	add.w	r1, r3, #16
 8103086:	68fb      	ldr	r3, [r7, #12]
 8103088:	685a      	ldr	r2, [r3, #4]
 810308a:	68fb      	ldr	r3, [r7, #12]
 810308c:	68dc      	ldr	r4, [r3, #12]
 810308e:	f107 0014 	add.w	r0, r7, #20
 8103092:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8103094:	9300      	str	r3, [sp, #0]
 8103096:	4623      	mov	r3, r4
 8103098:	f022 fda8 	bl	8125bec <_ZNKSt8__detail20_Prime_rehash_policy14_M_need_rehashEjjj>
      if (__do_rehash.first)
 810309c:	7d3b      	ldrb	r3, [r7, #20]
 810309e:	2b00      	cmp	r3, #0
 81030a0:	d00a      	beq.n	81030b8 <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_PKcESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_insert_unique_nodeEjjPNS8_10_Hash_nodeIS6_Lb0EEEj+0x5a>
	  _M_rehash(__do_rehash.second, __saved_state);
 81030a2:	69bb      	ldr	r3, [r7, #24]
 81030a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 81030a6:	4619      	mov	r1, r3
 81030a8:	68f8      	ldr	r0, [r7, #12]
 81030aa:	f000 fafa 	bl	81036a2 <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_PKcESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE9_M_rehashEjRKj>
	  __bkt = _M_bucket_index(__code);
 81030ae:	6879      	ldr	r1, [r7, #4]
 81030b0:	68f8      	ldr	r0, [r7, #12]
 81030b2:	f7ff ff41 	bl	8102f38 <_ZNKSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_PKcESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE15_M_bucket_indexEj>
 81030b6:	60b8      	str	r0, [r7, #8]
      this->_M_store_code(*__node, __code);
 81030b8:	683b      	ldr	r3, [r7, #0]
 81030ba:	3304      	adds	r3, #4
 81030bc:	687a      	ldr	r2, [r7, #4]
 81030be:	4619      	mov	r1, r3
 81030c0:	68f8      	ldr	r0, [r7, #12]
 81030c2:	f000 fafd 	bl	81036c0 <_ZNKSt8__detail15_Hash_code_baseIN7APIDoIP12EDoIPRequestESt4pairIKS2_PKcENS_10_Select1stESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE13_M_store_codeERNS_21_Hash_node_code_cacheILb0EEEj>
      _M_insert_bucket_begin(__bkt, __node);
 81030c6:	683a      	ldr	r2, [r7, #0]
 81030c8:	68b9      	ldr	r1, [r7, #8]
 81030ca:	68f8      	ldr	r0, [r7, #12]
 81030cc:	f000 fb04 	bl	81036d8 <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_PKcESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE22_M_insert_bucket_beginEjPNS8_10_Hash_nodeIS6_Lb0EEE>
      ++_M_element_count;
 81030d0:	68fb      	ldr	r3, [r7, #12]
 81030d2:	68db      	ldr	r3, [r3, #12]
 81030d4:	1c5a      	adds	r2, r3, #1
 81030d6:	68fb      	ldr	r3, [r7, #12]
 81030d8:	60da      	str	r2, [r3, #12]
      return iterator(__node);
 81030da:	f107 0320 	add.w	r3, r7, #32
 81030de:	6839      	ldr	r1, [r7, #0]
 81030e0:	4618      	mov	r0, r3
 81030e2:	f7ff ff53 	bl	8102f8c <_ZNSt8__detail14_Node_iteratorISt4pairIKN7APIDoIP12EDoIPRequestEPKcELb0ELb0EEC1EPNS_10_Hash_nodeIS7_Lb0EEE>
 81030e6:	6a3b      	ldr	r3, [r7, #32]
    }
 81030e8:	4618      	mov	r0, r3
 81030ea:	372c      	adds	r7, #44	@ 0x2c
 81030ec:	46bd      	mov	sp, r7
 81030ee:	bd90      	pop	{r4, r7, pc}

081030f0 <_ZNSt8__detail21_Hashtable_ebo_helperILi0ESaINS_10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestEPKcELb0EEEELb1EE6_M_getEv>:
      _Tp& _M_get() { return static_cast<_Tp&>(*this); }
 81030f0:	b480      	push	{r7}
 81030f2:	b083      	sub	sp, #12
 81030f4:	af00      	add	r7, sp, #0
 81030f6:	6078      	str	r0, [r7, #4]
 81030f8:	687b      	ldr	r3, [r7, #4]
 81030fa:	4618      	mov	r0, r3
 81030fc:	370c      	adds	r7, #12
 81030fe:	46bd      	mov	sp, r7
 8103100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103104:	4770      	bx	lr

08103106 <_ZN9__gnu_cxx16__aligned_bufferISt4pairIKN7APIDoIP12EDoIPRequestEPKcEE6_M_ptrEv>:
      _M_ptr() noexcept
 8103106:	b580      	push	{r7, lr}
 8103108:	b082      	sub	sp, #8
 810310a:	af00      	add	r7, sp, #0
 810310c:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 810310e:	6878      	ldr	r0, [r7, #4]
 8103110:	f000 fb29 	bl	8103766 <_ZN9__gnu_cxx16__aligned_bufferISt4pairIKN7APIDoIP12EDoIPRequestEPKcEE7_M_addrEv>
 8103114:	4603      	mov	r3, r0
 8103116:	4618      	mov	r0, r3
 8103118:	3708      	adds	r7, #8
 810311a:	46bd      	mov	sp, r7
 810311c:	bd80      	pop	{r7, pc}

0810311e <_ZSt10destroy_atISt4pairIKN7APIDoIP12EDoIPRequestEPKcEEvPT_>:
    destroy_at(_Tp* __location)
 810311e:	b480      	push	{r7}
 8103120:	b083      	sub	sp, #12
 8103122:	af00      	add	r7, sp, #0
 8103124:	6078      	str	r0, [r7, #4]
    }
 8103126:	bf00      	nop
 8103128:	370c      	adds	r7, #12
 810312a:	46bd      	mov	sp, r7
 810312c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103130:	4770      	bx	lr

08103132 <_ZNSt19__ptr_traits_ptr_toIPNSt8__detail10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestEPKcELb0EEES9_Lb0EE10pointer_toERS9_>:
      pointer_to(element_type& __r) noexcept
 8103132:	b580      	push	{r7, lr}
 8103134:	b082      	sub	sp, #8
 8103136:	af00      	add	r7, sp, #0
 8103138:	6078      	str	r0, [r7, #4]
      { return std::addressof(__r); }
 810313a:	6878      	ldr	r0, [r7, #4]
 810313c:	f000 fb1e 	bl	810377c <_ZSt9addressofINSt8__detail10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestEPKcELb0EEEEPT_RSA_>
 8103140:	4603      	mov	r3, r0
 8103142:	4618      	mov	r0, r3
 8103144:	3708      	adds	r7, #8
 8103146:	46bd      	mov	sp, r7
 8103148:	bd80      	pop	{r7, pc}

0810314a <_ZNSt16allocator_traitsISaINSt8__detail10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestEPKcELb0EEEEE10deallocateERSA_PS9_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 810314a:	b580      	push	{r7, lr}
 810314c:	b088      	sub	sp, #32
 810314e:	af00      	add	r7, sp, #0
 8103150:	60f8      	str	r0, [r7, #12]
 8103152:	60b9      	str	r1, [r7, #8]
 8103154:	607a      	str	r2, [r7, #4]
 8103156:	68fb      	ldr	r3, [r7, #12]
 8103158:	61fb      	str	r3, [r7, #28]
 810315a:	68bb      	ldr	r3, [r7, #8]
 810315c:	61bb      	str	r3, [r7, #24]
 810315e:	687b      	ldr	r3, [r7, #4]
 8103160:	617b      	str	r3, [r7, #20]
	if (std::__is_constant_evaluated())
 8103162:	f7fe f8cb 	bl	81012fc <__is_constant_evaluated>
 8103166:	4603      	mov	r3, r0
 8103168:	2b00      	cmp	r3, #0
 810316a:	d003      	beq.n	8103174 <_ZNSt16allocator_traitsISaINSt8__detail10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestEPKcELb0EEEEE10deallocateERSA_PS9_j+0x2a>
	    ::operator delete(__p);
 810316c:	69b8      	ldr	r0, [r7, #24]
 810316e:	f022 fc09 	bl	8125984 <_ZdlPv>
	    return;
 8103172:	e005      	b.n	8103180 <_ZNSt16allocator_traitsISaINSt8__detail10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestEPKcELb0EEEEE10deallocateERSA_PS9_j+0x36>
	__allocator_base<_Tp>::deallocate(__p, __n);
 8103174:	697a      	ldr	r2, [r7, #20]
 8103176:	69b9      	ldr	r1, [r7, #24]
 8103178:	69f8      	ldr	r0, [r7, #28]
 810317a:	f000 fd74 	bl	8103c66 <_ZNSt15__new_allocatorINSt8__detail10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestEPKcELb0EEEE10deallocateEPS9_j>
      { __a.deallocate(__p, __n); }
 810317e:	bf00      	nop
 8103180:	bf00      	nop
 8103182:	3720      	adds	r7, #32
 8103184:	46bd      	mov	sp, r7
 8103186:	bd80      	pop	{r7, pc}

08103188 <_ZNSt8__detail21_Hashtable_ebo_helperILi1ESt4hashIN7APIDoIP12EDoIPRequestEELb1EEC1IRKS4_EEOT_>:
	_Hashtable_ebo_helper(_OtherTp&& __tp)
 8103188:	b580      	push	{r7, lr}
 810318a:	b082      	sub	sp, #8
 810318c:	af00      	add	r7, sp, #0
 810318e:	6078      	str	r0, [r7, #4]
 8103190:	6039      	str	r1, [r7, #0]
	: _Tp(std::forward<_OtherTp>(__tp))
 8103192:	6838      	ldr	r0, [r7, #0]
 8103194:	f000 fafe 	bl	8103794 <_ZSt7forwardIRKSt4hashIN7APIDoIP12EDoIPRequestEEEOT_RNSt16remove_referenceIS6_E4typeE>
	{ }
 8103198:	687b      	ldr	r3, [r7, #4]
 810319a:	4618      	mov	r0, r3
 810319c:	3708      	adds	r7, #8
 810319e:	46bd      	mov	sp, r7
 81031a0:	bd80      	pop	{r7, pc}

081031a2 <_ZSt7forwardIRKSt8equal_toIN7APIDoIP12EDoIPRequestEEEOT_RNSt16remove_referenceIS6_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 81031a2:	b480      	push	{r7}
 81031a4:	b083      	sub	sp, #12
 81031a6:	af00      	add	r7, sp, #0
 81031a8:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 81031aa:	687b      	ldr	r3, [r7, #4]
 81031ac:	4618      	mov	r0, r3
 81031ae:	370c      	adds	r7, #12
 81031b0:	46bd      	mov	sp, r7
 81031b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81031b6:	4770      	bx	lr

081031b8 <_ZNSaINSt8__detail10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES1_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEEEC1ERKSD_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 81031b8:	b580      	push	{r7, lr}
 81031ba:	b082      	sub	sp, #8
 81031bc:	af00      	add	r7, sp, #0
 81031be:	6078      	str	r0, [r7, #4]
 81031c0:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 81031c2:	6839      	ldr	r1, [r7, #0]
 81031c4:	6878      	ldr	r0, [r7, #4]
 81031c6:	f000 faf0 	bl	81037aa <_ZNSt15__new_allocatorINSt8__detail10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEEEC1ERKSE_>
 81031ca:	687b      	ldr	r3, [r7, #4]
 81031cc:	4618      	mov	r0, r3
 81031ce:	3708      	adds	r7, #8
 81031d0:	46bd      	mov	sp, r7
 81031d2:	bd80      	pop	{r7, pc}

081031d4 <_ZNSt8__detail22_Hashtable_hash_traitsISt4hashIN7APIDoIP12EDoIPRequestEEE22__small_size_thresholdEv>:
      __small_size_threshold() noexcept
 81031d4:	b480      	push	{r7}
 81031d6:	af00      	add	r7, sp, #0
      { return std::__is_fast_hash<_Hash>::value ? 0 : 20; }
 81031d8:	2300      	movs	r3, #0
 81031da:	4618      	mov	r0, r3
 81031dc:	46bd      	mov	sp, r7
 81031de:	f85d 7b04 	ldr.w	r7, [sp], #4
 81031e2:	4770      	bx	lr

081031e4 <_ZNSt8__detail19_Node_iterator_baseISt4pairIKN7APIDoIP12EDoIPRequestES1_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EE7_M_incrEv>:
      _M_incr() noexcept
 81031e4:	b580      	push	{r7, lr}
 81031e6:	b082      	sub	sp, #8
 81031e8:	af00      	add	r7, sp, #0
 81031ea:	6078      	str	r0, [r7, #4]
      { _M_cur = _M_cur->_M_next(); }
 81031ec:	687b      	ldr	r3, [r7, #4]
 81031ee:	681b      	ldr	r3, [r3, #0]
 81031f0:	4618      	mov	r0, r3
 81031f2:	f7fe fec0 	bl	8101f76 <_ZNKSt8__detail10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES1_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EE7_M_nextEv>
 81031f6:	4602      	mov	r2, r0
 81031f8:	687b      	ldr	r3, [r7, #4]
 81031fa:	601a      	str	r2, [r3, #0]
 81031fc:	bf00      	nop
 81031fe:	3708      	adds	r7, #8
 8103200:	46bd      	mov	sp, r7
 8103202:	bd80      	pop	{r7, pc}

08103204 <_ZNKSt8__detail15_Hashtable_baseIN7APIDoIP12EDoIPRequestESt4pairIKS2_S3_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEENS_10_Select1stESt8equal_toIS2_ESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEE5_M_eqEv>:
      _M_eq() const { return _EqualEBO::_M_cget(); }
 8103204:	b580      	push	{r7, lr}
 8103206:	b082      	sub	sp, #8
 8103208:	af00      	add	r7, sp, #0
 810320a:	6078      	str	r0, [r7, #4]
 810320c:	6878      	ldr	r0, [r7, #4]
 810320e:	f000 fb02 	bl	8103816 <_ZNKSt8__detail21_Hashtable_ebo_helperILi0ESt8equal_toIN7APIDoIP12EDoIPRequestEELb1EE7_M_cgetEv>
 8103212:	4603      	mov	r3, r0
 8103214:	4618      	mov	r0, r3
 8103216:	3708      	adds	r7, #8
 8103218:	46bd      	mov	sp, r7
 810321a:	bd80      	pop	{r7, pc}

0810321c <_ZNKSt8__detail21_Hash_node_value_baseISt4pairIKN7APIDoIP12EDoIPRequestES1_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEEE4_M_vEv>:
      _M_v() const noexcept
 810321c:	b580      	push	{r7, lr}
 810321e:	b082      	sub	sp, #8
 8103220:	af00      	add	r7, sp, #0
 8103222:	6078      	str	r0, [r7, #4]
      { return *_M_valptr(); }
 8103224:	6878      	ldr	r0, [r7, #4]
 8103226:	f000 fb01 	bl	810382c <_ZNKSt8__detail21_Hash_node_value_baseISt4pairIKN7APIDoIP12EDoIPRequestES1_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEEE9_M_valptrEv>
 810322a:	4603      	mov	r3, r0
 810322c:	4618      	mov	r0, r3
 810322e:	3708      	adds	r7, #8
 8103230:	46bd      	mov	sp, r7
 8103232:	bd80      	pop	{r7, pc}

08103234 <_ZNKSt8equal_toIN7APIDoIP12EDoIPRequestEEclERKS1_S4_>:
  template<typename _Tp>
    struct equal_to : public binary_function<_Tp, _Tp, bool>
    {
      _GLIBCXX14_CONSTEXPR
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
 8103234:	b480      	push	{r7}
 8103236:	b085      	sub	sp, #20
 8103238:	af00      	add	r7, sp, #0
 810323a:	60f8      	str	r0, [r7, #12]
 810323c:	60b9      	str	r1, [r7, #8]
 810323e:	607a      	str	r2, [r7, #4]
      { return __x == __y; }
 8103240:	68bb      	ldr	r3, [r7, #8]
 8103242:	f993 2000 	ldrsb.w	r2, [r3]
 8103246:	687b      	ldr	r3, [r7, #4]
 8103248:	f993 3000 	ldrsb.w	r3, [r3]
 810324c:	429a      	cmp	r2, r3
 810324e:	bf0c      	ite	eq
 8103250:	2301      	moveq	r3, #1
 8103252:	2300      	movne	r3, #0
 8103254:	b2db      	uxtb	r3, r3
 8103256:	4618      	mov	r0, r3
 8103258:	3714      	adds	r7, #20
 810325a:	46bd      	mov	sp, r7
 810325c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103260:	4770      	bx	lr

08103262 <_ZSt7forwardIRNSt8__detail14_Node_iteratorISt4pairIKN7APIDoIP12EDoIPRequestES2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0ELb0EEEEOT_RNSt16remove_referenceISF_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8103262:	b480      	push	{r7}
 8103264:	b083      	sub	sp, #12
 8103266:	af00      	add	r7, sp, #0
 8103268:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 810326a:	687b      	ldr	r3, [r7, #4]
 810326c:	4618      	mov	r0, r3
 810326e:	370c      	adds	r7, #12
 8103270:	46bd      	mov	sp, r7
 8103272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103276:	4770      	bx	lr

08103278 <_ZNKSt8__detail15_Hash_code_baseIN7APIDoIP12EDoIPRequestESt4pairIKS2_S3_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEENS_10_Select1stESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE7_M_hashEv>:
      _M_hash() const { return __ebo_hash::_M_cget(); }
 8103278:	b580      	push	{r7, lr}
 810327a:	b082      	sub	sp, #8
 810327c:	af00      	add	r7, sp, #0
 810327e:	6078      	str	r0, [r7, #4]
 8103280:	6878      	ldr	r0, [r7, #4]
 8103282:	f000 fae0 	bl	8103846 <_ZNKSt8__detail21_Hashtable_ebo_helperILi1ESt4hashIN7APIDoIP12EDoIPRequestEELb1EE7_M_cgetEv>
 8103286:	4603      	mov	r3, r0
 8103288:	4618      	mov	r0, r3
 810328a:	3708      	adds	r7, #8
 810328c:	46bd      	mov	sp, r7
 810328e:	bd80      	pop	{r7, pc}

08103290 <_ZNKSt11__hash_enumIN7APIDoIP12EDoIPRequestELb1EEclES1_>:
      operator()(_Tp __val) const noexcept
 8103290:	b580      	push	{r7, lr}
 8103292:	b084      	sub	sp, #16
 8103294:	af00      	add	r7, sp, #0
 8103296:	6078      	str	r0, [r7, #4]
 8103298:	460b      	mov	r3, r1
 810329a:	70fb      	strb	r3, [r7, #3]
       return hash<__type>{}(static_cast<__type>(__val));
 810329c:	f997 2003 	ldrsb.w	r2, [r7, #3]
 81032a0:	f107 030c 	add.w	r3, r7, #12
 81032a4:	4611      	mov	r1, r2
 81032a6:	4618      	mov	r0, r3
 81032a8:	f7fe f83c 	bl	8101324 <_ZNKSt4hashIaEclEa>
 81032ac:	4603      	mov	r3, r0
      }
 81032ae:	4618      	mov	r0, r3
 81032b0:	3710      	adds	r7, #16
 81032b2:	46bd      	mov	sp, r7
 81032b4:	bd80      	pop	{r7, pc}

081032b6 <_ZNKSt8__detail15_Hash_code_baseIN7APIDoIP12EDoIPRequestESt4pairIKS2_S3_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEENS_10_Select1stESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE15_M_bucket_indexEjj>:
      _M_bucket_index(__hash_code __c, std::size_t __bkt_count) const
 81032b6:	b580      	push	{r7, lr}
 81032b8:	b086      	sub	sp, #24
 81032ba:	af00      	add	r7, sp, #0
 81032bc:	60f8      	str	r0, [r7, #12]
 81032be:	60b9      	str	r1, [r7, #8]
 81032c0:	607a      	str	r2, [r7, #4]
      { return _RangeHash{}(__c, __bkt_count); }
 81032c2:	f107 0314 	add.w	r3, r7, #20
 81032c6:	687a      	ldr	r2, [r7, #4]
 81032c8:	68b9      	ldr	r1, [r7, #8]
 81032ca:	4618      	mov	r0, r3
 81032cc:	f7fe f846 	bl	810135c <_ZNKSt8__detail18_Mod_range_hashingclEjj>
 81032d0:	4603      	mov	r3, r0
 81032d2:	4618      	mov	r0, r3
 81032d4:	3718      	adds	r7, #24
 81032d6:	46bd      	mov	sp, r7
 81032d8:	bd80      	pop	{r7, pc}

081032da <_ZNKSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE22_M_find_before_node_trIS1_EEPNSC_15_Hash_node_baseEjRKT_j>:
      _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
 81032da:	b580      	push	{r7, lr}
 81032dc:	b086      	sub	sp, #24
 81032de:	af00      	add	r7, sp, #0
 81032e0:	60f8      	str	r0, [r7, #12]
 81032e2:	60b9      	str	r1, [r7, #8]
 81032e4:	607a      	str	r2, [r7, #4]
 81032e6:	603b      	str	r3, [r7, #0]
	__node_base_ptr __prev_p = _M_buckets[__bkt];
 81032e8:	68fb      	ldr	r3, [r7, #12]
 81032ea:	681a      	ldr	r2, [r3, #0]
 81032ec:	68bb      	ldr	r3, [r7, #8]
 81032ee:	009b      	lsls	r3, r3, #2
 81032f0:	4413      	add	r3, r2
 81032f2:	681b      	ldr	r3, [r3, #0]
 81032f4:	617b      	str	r3, [r7, #20]
	if (!__prev_p)
 81032f6:	697b      	ldr	r3, [r7, #20]
 81032f8:	2b00      	cmp	r3, #0
 81032fa:	d101      	bne.n	8103300 <_ZNKSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE22_M_find_before_node_trIS1_EEPNSC_15_Hash_node_baseEjRKT_j+0x26>
	  return nullptr;
 81032fc:	2300      	movs	r3, #0
 81032fe:	e02d      	b.n	810335c <_ZNKSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE22_M_find_before_node_trIS1_EEPNSC_15_Hash_node_baseEjRKT_j+0x82>
	for (__node_ptr __p = static_cast<__node_ptr>(__prev_p->_M_nxt);;
 8103300:	697b      	ldr	r3, [r7, #20]
 8103302:	681b      	ldr	r3, [r3, #0]
 8103304:	613b      	str	r3, [r7, #16]
	    if (this->_M_equals_tr(__k, __code, *__p))
 8103306:	693b      	ldr	r3, [r7, #16]
 8103308:	3304      	adds	r3, #4
 810330a:	683a      	ldr	r2, [r7, #0]
 810330c:	6879      	ldr	r1, [r7, #4]
 810330e:	68f8      	ldr	r0, [r7, #12]
 8103310:	f000 faa4 	bl	810385c <_ZNKSt8__detail15_Hashtable_baseIN7APIDoIP12EDoIPRequestESt4pairIKS2_S3_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEENS_10_Select1stESt8equal_toIS2_ESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEE12_M_equals_trIS2_EEbRKT_jRKNS_16_Hash_node_valueISB_Lb0EEE>
 8103314:	4603      	mov	r3, r0
 8103316:	2b00      	cmp	r3, #0
 8103318:	d001      	beq.n	810331e <_ZNKSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE22_M_find_before_node_trIS1_EEPNSC_15_Hash_node_baseEjRKT_j+0x44>
	      return __prev_p;
 810331a:	697b      	ldr	r3, [r7, #20]
 810331c:	e01e      	b.n	810335c <_ZNKSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE22_M_find_before_node_trIS1_EEPNSC_15_Hash_node_baseEjRKT_j+0x82>
	    if (!__p->_M_nxt || _M_bucket_index(*__p->_M_next()) != __bkt)
 810331e:	693b      	ldr	r3, [r7, #16]
 8103320:	681b      	ldr	r3, [r3, #0]
 8103322:	2b00      	cmp	r3, #0
 8103324:	d00c      	beq.n	8103340 <_ZNKSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE22_M_find_before_node_trIS1_EEPNSC_15_Hash_node_baseEjRKT_j+0x66>
 8103326:	6938      	ldr	r0, [r7, #16]
 8103328:	f7fe fe25 	bl	8101f76 <_ZNKSt8__detail10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES1_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EE7_M_nextEv>
 810332c:	4603      	mov	r3, r0
 810332e:	3304      	adds	r3, #4
 8103330:	4619      	mov	r1, r3
 8103332:	68f8      	ldr	r0, [r7, #12]
 8103334:	f000 faaf 	bl	8103896 <_ZNKSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE15_M_bucket_indexERKNSC_16_Hash_node_valueISA_Lb0EEE>
 8103338:	4602      	mov	r2, r0
 810333a:	68bb      	ldr	r3, [r7, #8]
 810333c:	4293      	cmp	r3, r2
 810333e:	d001      	beq.n	8103344 <_ZNKSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE22_M_find_before_node_trIS1_EEPNSC_15_Hash_node_baseEjRKT_j+0x6a>
 8103340:	2301      	movs	r3, #1
 8103342:	e000      	b.n	8103346 <_ZNKSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE22_M_find_before_node_trIS1_EEPNSC_15_Hash_node_baseEjRKT_j+0x6c>
 8103344:	2300      	movs	r3, #0
 8103346:	2b00      	cmp	r3, #0
 8103348:	d106      	bne.n	8103358 <_ZNKSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE22_M_find_before_node_trIS1_EEPNSC_15_Hash_node_baseEjRKT_j+0x7e>
	    __prev_p = __p;
 810334a:	693b      	ldr	r3, [r7, #16]
 810334c:	617b      	str	r3, [r7, #20]
	     __p = __p->_M_next())
 810334e:	6938      	ldr	r0, [r7, #16]
 8103350:	f7fe fe11 	bl	8101f76 <_ZNKSt8__detail10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES1_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EE7_M_nextEv>
 8103354:	6138      	str	r0, [r7, #16]
	    if (this->_M_equals_tr(__k, __code, *__p))
 8103356:	e7d6      	b.n	8103306 <_ZNKSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE22_M_find_before_node_trIS1_EEPNSC_15_Hash_node_baseEjRKT_j+0x2c>
	      break;
 8103358:	bf00      	nop
	return nullptr;
 810335a:	2300      	movs	r3, #0
      }
 810335c:	4618      	mov	r0, r3
 810335e:	3718      	adds	r7, #24
 8103360:	46bd      	mov	sp, r7
 8103362:	bd80      	pop	{r7, pc}

08103364 <_ZNSt8__detail19_Node_iterator_baseISt4pairIKN7APIDoIP12EDoIPRequestES1_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEC1EPNS_10_Hash_nodeISB_Lb0EEE>:
      _Node_iterator_base(__node_type* __p) noexcept
 8103364:	b480      	push	{r7}
 8103366:	b083      	sub	sp, #12
 8103368:	af00      	add	r7, sp, #0
 810336a:	6078      	str	r0, [r7, #4]
 810336c:	6039      	str	r1, [r7, #0]
      : _M_cur(__p) { }
 810336e:	687b      	ldr	r3, [r7, #4]
 8103370:	683a      	ldr	r2, [r7, #0]
 8103372:	601a      	str	r2, [r3, #0]
 8103374:	687b      	ldr	r3, [r7, #4]
 8103376:	4618      	mov	r0, r3
 8103378:	370c      	adds	r7, #12
 810337a:	46bd      	mov	sp, r7
 810337c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103380:	4770      	bx	lr

08103382 <_ZSt7forwardINSt8__detail14_Node_iteratorISt4pairIKN7APIDoIP12EDoIPRequestES2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0ELb0EEEEOT_RNSt16remove_referenceISE_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8103382:	b480      	push	{r7}
 8103384:	b083      	sub	sp, #12
 8103386:	af00      	add	r7, sp, #0
 8103388:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 810338a:	687b      	ldr	r3, [r7, #4]
 810338c:	4618      	mov	r0, r3
 810338e:	370c      	adds	r7, #12
 8103390:	46bd      	mov	sp, r7
 8103392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103396:	4770      	bx	lr

08103398 <_ZNKSt8__detail10_AllocNodeISaINS_10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEEEEclIJRS5_RKSB_EEEPSD_DpOT_>:
	operator()(_Args&&... __args) const
 8103398:	b5b0      	push	{r4, r5, r7, lr}
 810339a:	b084      	sub	sp, #16
 810339c:	af00      	add	r7, sp, #0
 810339e:	60f8      	str	r0, [r7, #12]
 81033a0:	60b9      	str	r1, [r7, #8]
 81033a2:	607a      	str	r2, [r7, #4]
	{ return _M_h._M_allocate_node(std::forward<_Args>(__args)...); }
 81033a4:	68fb      	ldr	r3, [r7, #12]
 81033a6:	681c      	ldr	r4, [r3, #0]
 81033a8:	68b8      	ldr	r0, [r7, #8]
 81033aa:	f7ff fbf3 	bl	8102b94 <_ZSt7forwardIRKN7APIDoIP12EDoIPRequestEEOT_RNSt16remove_referenceIS4_E4typeE>
 81033ae:	4605      	mov	r5, r0
 81033b0:	6878      	ldr	r0, [r7, #4]
 81033b2:	f000 fa81 	bl	81038b8 <_ZSt7forwardIRKSt4pairISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEEOT_RNSt16remove_referenceIS9_E4typeE>
 81033b6:	4603      	mov	r3, r0
 81033b8:	461a      	mov	r2, r3
 81033ba:	4629      	mov	r1, r5
 81033bc:	4620      	mov	r0, r4
 81033be:	f000 fa93 	bl	81038e8 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEEEE16_M_allocate_nodeIJRS5_RKSB_EEEPSD_DpOT_>
 81033c2:	4603      	mov	r3, r0
 81033c4:	4618      	mov	r0, r3
 81033c6:	3710      	adds	r7, #16
 81033c8:	46bd      	mov	sp, r7
 81033ca:	bdb0      	pop	{r4, r5, r7, pc}

081033cc <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE9_M_rehashEjRKj>:
  template<typename _Key, typename _Value, typename _Alloc,
	   typename _ExtractKey, typename _Equal,
	   typename _Hash, typename _RangeHash, typename _Unused,
	   typename _RehashPolicy, typename _Traits>
    void
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
 81033cc:	b580      	push	{r7, lr}
 81033ce:	b084      	sub	sp, #16
 81033d0:	af00      	add	r7, sp, #0
 81033d2:	60f8      	str	r0, [r7, #12]
 81033d4:	60b9      	str	r1, [r7, #8]
 81033d6:	607a      	str	r2, [r7, #4]
	       _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits>::
    _M_rehash(size_type __bkt_count, const __rehash_state& __state)
    {
      __try
	{
	  _M_rehash_aux(__bkt_count, __unique_keys{});
 81033d8:	461a      	mov	r2, r3
 81033da:	68b9      	ldr	r1, [r7, #8]
 81033dc:	68f8      	ldr	r0, [r7, #12]
 81033de:	f000 fabb 	bl	8103958 <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE13_M_rehash_auxEjSt17integral_constantIbLb1EE>
	  // A failure here means that buckets allocation failed.  We only
	  // have to restore hash policy previous state.
	  _M_rehash_policy._M_reset(__state);
	  __throw_exception_again;
	}
    }
 81033e2:	bf00      	nop
 81033e4:	3710      	adds	r7, #16
 81033e6:	46bd      	mov	sp, r7
 81033e8:	bd80      	pop	{r7, pc}

081033ea <_ZNKSt8__detail15_Hash_code_baseIN7APIDoIP12EDoIPRequestESt4pairIKS2_S3_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEENS_10_Select1stESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE13_M_store_codeERNS_21_Hash_node_code_cacheILb0EEEj>:
      _M_store_code(_Hash_node_code_cache<false>&, __hash_code) const
 81033ea:	b480      	push	{r7}
 81033ec:	b085      	sub	sp, #20
 81033ee:	af00      	add	r7, sp, #0
 81033f0:	60f8      	str	r0, [r7, #12]
 81033f2:	60b9      	str	r1, [r7, #8]
 81033f4:	607a      	str	r2, [r7, #4]
      { }
 81033f6:	bf00      	nop
 81033f8:	3714      	adds	r7, #20
 81033fa:	46bd      	mov	sp, r7
 81033fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103400:	4770      	bx	lr

08103402 <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE22_M_insert_bucket_beginEjPNSC_10_Hash_nodeISA_Lb0EEE>:
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
 8103402:	b5b0      	push	{r4, r5, r7, lr}
 8103404:	b084      	sub	sp, #16
 8103406:	af00      	add	r7, sp, #0
 8103408:	60f8      	str	r0, [r7, #12]
 810340a:	60b9      	str	r1, [r7, #8]
 810340c:	607a      	str	r2, [r7, #4]
      if (_M_buckets[__bkt])
 810340e:	68fb      	ldr	r3, [r7, #12]
 8103410:	681a      	ldr	r2, [r3, #0]
 8103412:	68bb      	ldr	r3, [r7, #8]
 8103414:	009b      	lsls	r3, r3, #2
 8103416:	4413      	add	r3, r2
 8103418:	681b      	ldr	r3, [r3, #0]
 810341a:	2b00      	cmp	r3, #0
 810341c:	d011      	beq.n	8103442 <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE22_M_insert_bucket_beginEjPNSC_10_Hash_nodeISA_Lb0EEE+0x40>
	  __node->_M_nxt = _M_buckets[__bkt]->_M_nxt;
 810341e:	68fb      	ldr	r3, [r7, #12]
 8103420:	681a      	ldr	r2, [r3, #0]
 8103422:	68bb      	ldr	r3, [r7, #8]
 8103424:	009b      	lsls	r3, r3, #2
 8103426:	4413      	add	r3, r2
 8103428:	681b      	ldr	r3, [r3, #0]
 810342a:	681a      	ldr	r2, [r3, #0]
 810342c:	687b      	ldr	r3, [r7, #4]
 810342e:	601a      	str	r2, [r3, #0]
	  _M_buckets[__bkt]->_M_nxt = __node;
 8103430:	68fb      	ldr	r3, [r7, #12]
 8103432:	681a      	ldr	r2, [r3, #0]
 8103434:	68bb      	ldr	r3, [r7, #8]
 8103436:	009b      	lsls	r3, r3, #2
 8103438:	4413      	add	r3, r2
 810343a:	681b      	ldr	r3, [r3, #0]
 810343c:	687a      	ldr	r2, [r7, #4]
 810343e:	601a      	str	r2, [r3, #0]
    }
 8103440:	e022      	b.n	8103488 <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE22_M_insert_bucket_beginEjPNSC_10_Hash_nodeISA_Lb0EEE+0x86>
	  __node->_M_nxt = _M_before_begin._M_nxt;
 8103442:	68fb      	ldr	r3, [r7, #12]
 8103444:	689a      	ldr	r2, [r3, #8]
 8103446:	687b      	ldr	r3, [r7, #4]
 8103448:	601a      	str	r2, [r3, #0]
	  _M_before_begin._M_nxt = __node;
 810344a:	68fb      	ldr	r3, [r7, #12]
 810344c:	687a      	ldr	r2, [r7, #4]
 810344e:	609a      	str	r2, [r3, #8]
	  if (__node->_M_nxt)
 8103450:	687b      	ldr	r3, [r7, #4]
 8103452:	681b      	ldr	r3, [r3, #0]
 8103454:	2b00      	cmp	r3, #0
 8103456:	d00f      	beq.n	8103478 <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE22_M_insert_bucket_beginEjPNSC_10_Hash_nodeISA_Lb0EEE+0x76>
	    _M_buckets[_M_bucket_index(*__node->_M_next())] = __node;
 8103458:	687c      	ldr	r4, [r7, #4]
 810345a:	68fb      	ldr	r3, [r7, #12]
 810345c:	681d      	ldr	r5, [r3, #0]
 810345e:	6878      	ldr	r0, [r7, #4]
 8103460:	f7fe fd89 	bl	8101f76 <_ZNKSt8__detail10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES1_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EE7_M_nextEv>
 8103464:	4603      	mov	r3, r0
 8103466:	3304      	adds	r3, #4
 8103468:	4619      	mov	r1, r3
 810346a:	68f8      	ldr	r0, [r7, #12]
 810346c:	f000 fa13 	bl	8103896 <_ZNKSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE15_M_bucket_indexERKNSC_16_Hash_node_valueISA_Lb0EEE>
 8103470:	4603      	mov	r3, r0
 8103472:	009b      	lsls	r3, r3, #2
 8103474:	442b      	add	r3, r5
 8103476:	601c      	str	r4, [r3, #0]
	  _M_buckets[__bkt] = &_M_before_begin;
 8103478:	68fb      	ldr	r3, [r7, #12]
 810347a:	681a      	ldr	r2, [r3, #0]
 810347c:	68bb      	ldr	r3, [r7, #8]
 810347e:	009b      	lsls	r3, r3, #2
 8103480:	4413      	add	r3, r2
 8103482:	68fa      	ldr	r2, [r7, #12]
 8103484:	3208      	adds	r2, #8
 8103486:	601a      	str	r2, [r3, #0]
    }
 8103488:	bf00      	nop
 810348a:	3710      	adds	r7, #16
 810348c:	46bd      	mov	sp, r7
 810348e:	bdb0      	pop	{r4, r5, r7, pc}

08103490 <_ZN9__gnu_cxx16__aligned_bufferISt4pairIKN7APIDoIP12EDoIPRequestES1_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEEE7_M_addrEv>:
      _M_addr() noexcept
 8103490:	b480      	push	{r7}
 8103492:	b083      	sub	sp, #12
 8103494:	af00      	add	r7, sp, #0
 8103496:	6078      	str	r0, [r7, #4]
        return static_cast<void*>(&_M_storage);
 8103498:	687b      	ldr	r3, [r7, #4]
      }
 810349a:	4618      	mov	r0, r3
 810349c:	370c      	adds	r7, #12
 810349e:	46bd      	mov	sp, r7
 81034a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81034a4:	4770      	bx	lr

081034a6 <_ZSt9addressofINSt8__detail10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEEEPT_RSE_>:
    addressof(_Tp& __r) noexcept
 81034a6:	b580      	push	{r7, lr}
 81034a8:	b082      	sub	sp, #8
 81034aa:	af00      	add	r7, sp, #0
 81034ac:	6078      	str	r0, [r7, #4]
    { return std::__addressof(__r); }
 81034ae:	6878      	ldr	r0, [r7, #4]
 81034b0:	f000 fab6 	bl	8103a20 <_ZSt11__addressofINSt8__detail10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEEEPT_RSE_>
 81034b4:	4603      	mov	r3, r0
 81034b6:	4618      	mov	r0, r3
 81034b8:	3708      	adds	r7, #8
 81034ba:	46bd      	mov	sp, r7
 81034bc:	bd80      	pop	{r7, pc}

081034be <_ZSt11__addressofIPNSt8__detail15_Hash_node_baseEEPT_RS3_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 81034be:	b480      	push	{r7}
 81034c0:	b083      	sub	sp, #12
 81034c2:	af00      	add	r7, sp, #0
 81034c4:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 81034c6:	687b      	ldr	r3, [r7, #4]
 81034c8:	4618      	mov	r0, r3
 81034ca:	370c      	adds	r7, #12
 81034cc:	46bd      	mov	sp, r7
 81034ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 81034d2:	4770      	bx	lr

081034d4 <_ZNSt15__new_allocatorIPNSt8__detail15_Hash_node_baseEE10deallocateEPS2_j>:
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
 81034d4:	b580      	push	{r7, lr}
 81034d6:	b084      	sub	sp, #16
 81034d8:	af00      	add	r7, sp, #0
 81034da:	60f8      	str	r0, [r7, #12]
 81034dc:	60b9      	str	r1, [r7, #8]
 81034de:	607a      	str	r2, [r7, #4]
	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
				     std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 81034e0:	687b      	ldr	r3, [r7, #4]
 81034e2:	009b      	lsls	r3, r3, #2
 81034e4:	4619      	mov	r1, r3
 81034e6:	68b8      	ldr	r0, [r7, #8]
 81034e8:	f022 fa4e 	bl	8125988 <_ZdlPvj>
      }
 81034ec:	3710      	adds	r7, #16
 81034ee:	46bd      	mov	sp, r7
 81034f0:	bd80      	pop	{r7, pc}

081034f2 <_ZNSaINSt8__detail10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestEPKcELb0EEEEC1ERKS9_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 81034f2:	b580      	push	{r7, lr}
 81034f4:	b082      	sub	sp, #8
 81034f6:	af00      	add	r7, sp, #0
 81034f8:	6078      	str	r0, [r7, #4]
 81034fa:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 81034fc:	6839      	ldr	r1, [r7, #0]
 81034fe:	6878      	ldr	r0, [r7, #4]
 8103500:	f000 faab 	bl	8103a5a <_ZNSt15__new_allocatorINSt8__detail10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestEPKcELb0EEEEC1ERKSA_>
 8103504:	687b      	ldr	r3, [r7, #4]
 8103506:	4618      	mov	r0, r3
 8103508:	3708      	adds	r7, #8
 810350a:	46bd      	mov	sp, r7
 810350c:	bd80      	pop	{r7, pc}

0810350e <_ZNSt8__detail19_Node_iterator_baseISt4pairIKN7APIDoIP12EDoIPRequestEPKcELb0EE7_M_incrEv>:
      _M_incr() noexcept
 810350e:	b580      	push	{r7, lr}
 8103510:	b082      	sub	sp, #8
 8103512:	af00      	add	r7, sp, #0
 8103514:	6078      	str	r0, [r7, #4]
      { _M_cur = _M_cur->_M_next(); }
 8103516:	687b      	ldr	r3, [r7, #4]
 8103518:	681b      	ldr	r3, [r3, #0]
 810351a:	4618      	mov	r0, r3
 810351c:	f7fe fe2b 	bl	8102176 <_ZNKSt8__detail10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestEPKcELb0EE7_M_nextEv>
 8103520:	4602      	mov	r2, r0
 8103522:	687b      	ldr	r3, [r7, #4]
 8103524:	601a      	str	r2, [r3, #0]
 8103526:	bf00      	nop
 8103528:	3708      	adds	r7, #8
 810352a:	46bd      	mov	sp, r7
 810352c:	bd80      	pop	{r7, pc}

0810352e <_ZNKSt8__detail15_Hashtable_baseIN7APIDoIP12EDoIPRequestESt4pairIKS2_PKcENS_10_Select1stESt8equal_toIS2_ESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEE5_M_eqEv>:
      _M_eq() const { return _EqualEBO::_M_cget(); }
 810352e:	b580      	push	{r7, lr}
 8103530:	b082      	sub	sp, #8
 8103532:	af00      	add	r7, sp, #0
 8103534:	6078      	str	r0, [r7, #4]
 8103536:	6878      	ldr	r0, [r7, #4]
 8103538:	f000 f96d 	bl	8103816 <_ZNKSt8__detail21_Hashtable_ebo_helperILi0ESt8equal_toIN7APIDoIP12EDoIPRequestEELb1EE7_M_cgetEv>
 810353c:	4603      	mov	r3, r0
 810353e:	4618      	mov	r0, r3
 8103540:	3708      	adds	r7, #8
 8103542:	46bd      	mov	sp, r7
 8103544:	bd80      	pop	{r7, pc}

08103546 <_ZNKSt8__detail21_Hash_node_value_baseISt4pairIKN7APIDoIP12EDoIPRequestEPKcEE4_M_vEv>:
      _M_v() const noexcept
 8103546:	b580      	push	{r7, lr}
 8103548:	b082      	sub	sp, #8
 810354a:	af00      	add	r7, sp, #0
 810354c:	6078      	str	r0, [r7, #4]
      { return *_M_valptr(); }
 810354e:	6878      	ldr	r0, [r7, #4]
 8103550:	f000 fa8f 	bl	8103a72 <_ZNKSt8__detail21_Hash_node_value_baseISt4pairIKN7APIDoIP12EDoIPRequestEPKcEE9_M_valptrEv>
 8103554:	4603      	mov	r3, r0
 8103556:	4618      	mov	r0, r3
 8103558:	3708      	adds	r7, #8
 810355a:	46bd      	mov	sp, r7
 810355c:	bd80      	pop	{r7, pc}

0810355e <_ZSt7forwardIRNSt8__detail14_Node_iteratorISt4pairIKN7APIDoIP12EDoIPRequestEPKcELb0ELb0EEEEOT_RNSt16remove_referenceISB_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 810355e:	b480      	push	{r7}
 8103560:	b083      	sub	sp, #12
 8103562:	af00      	add	r7, sp, #0
 8103564:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8103566:	687b      	ldr	r3, [r7, #4]
 8103568:	4618      	mov	r0, r3
 810356a:	370c      	adds	r7, #12
 810356c:	46bd      	mov	sp, r7
 810356e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103572:	4770      	bx	lr

08103574 <_ZNKSt8__detail15_Hash_code_baseIN7APIDoIP12EDoIPRequestESt4pairIKS2_PKcENS_10_Select1stESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE7_M_hashEv>:
      _M_hash() const { return __ebo_hash::_M_cget(); }
 8103574:	b580      	push	{r7, lr}
 8103576:	b082      	sub	sp, #8
 8103578:	af00      	add	r7, sp, #0
 810357a:	6078      	str	r0, [r7, #4]
 810357c:	6878      	ldr	r0, [r7, #4]
 810357e:	f000 f962 	bl	8103846 <_ZNKSt8__detail21_Hashtable_ebo_helperILi1ESt4hashIN7APIDoIP12EDoIPRequestEELb1EE7_M_cgetEv>
 8103582:	4603      	mov	r3, r0
 8103584:	4618      	mov	r0, r3
 8103586:	3708      	adds	r7, #8
 8103588:	46bd      	mov	sp, r7
 810358a:	bd80      	pop	{r7, pc}

0810358c <_ZNKSt8__detail15_Hash_code_baseIN7APIDoIP12EDoIPRequestESt4pairIKS2_PKcENS_10_Select1stESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE15_M_bucket_indexEjj>:
      _M_bucket_index(__hash_code __c, std::size_t __bkt_count) const
 810358c:	b580      	push	{r7, lr}
 810358e:	b086      	sub	sp, #24
 8103590:	af00      	add	r7, sp, #0
 8103592:	60f8      	str	r0, [r7, #12]
 8103594:	60b9      	str	r1, [r7, #8]
 8103596:	607a      	str	r2, [r7, #4]
      { return _RangeHash{}(__c, __bkt_count); }
 8103598:	f107 0314 	add.w	r3, r7, #20
 810359c:	687a      	ldr	r2, [r7, #4]
 810359e:	68b9      	ldr	r1, [r7, #8]
 81035a0:	4618      	mov	r0, r3
 81035a2:	f7fd fedb 	bl	810135c <_ZNKSt8__detail18_Mod_range_hashingclEjj>
 81035a6:	4603      	mov	r3, r0
 81035a8:	4618      	mov	r0, r3
 81035aa:	3718      	adds	r7, #24
 81035ac:	46bd      	mov	sp, r7
 81035ae:	bd80      	pop	{r7, pc}

081035b0 <_ZNKSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_PKcESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE22_M_find_before_node_trIS1_EEPNS8_15_Hash_node_baseEjRKT_j>:
      _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
 81035b0:	b580      	push	{r7, lr}
 81035b2:	b086      	sub	sp, #24
 81035b4:	af00      	add	r7, sp, #0
 81035b6:	60f8      	str	r0, [r7, #12]
 81035b8:	60b9      	str	r1, [r7, #8]
 81035ba:	607a      	str	r2, [r7, #4]
 81035bc:	603b      	str	r3, [r7, #0]
	__node_base_ptr __prev_p = _M_buckets[__bkt];
 81035be:	68fb      	ldr	r3, [r7, #12]
 81035c0:	681a      	ldr	r2, [r3, #0]
 81035c2:	68bb      	ldr	r3, [r7, #8]
 81035c4:	009b      	lsls	r3, r3, #2
 81035c6:	4413      	add	r3, r2
 81035c8:	681b      	ldr	r3, [r3, #0]
 81035ca:	617b      	str	r3, [r7, #20]
	if (!__prev_p)
 81035cc:	697b      	ldr	r3, [r7, #20]
 81035ce:	2b00      	cmp	r3, #0
 81035d0:	d101      	bne.n	81035d6 <_ZNKSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_PKcESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE22_M_find_before_node_trIS1_EEPNS8_15_Hash_node_baseEjRKT_j+0x26>
	  return nullptr;
 81035d2:	2300      	movs	r3, #0
 81035d4:	e02d      	b.n	8103632 <_ZNKSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_PKcESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE22_M_find_before_node_trIS1_EEPNS8_15_Hash_node_baseEjRKT_j+0x82>
	for (__node_ptr __p = static_cast<__node_ptr>(__prev_p->_M_nxt);;
 81035d6:	697b      	ldr	r3, [r7, #20]
 81035d8:	681b      	ldr	r3, [r3, #0]
 81035da:	613b      	str	r3, [r7, #16]
	    if (this->_M_equals_tr(__k, __code, *__p))
 81035dc:	693b      	ldr	r3, [r7, #16]
 81035de:	3304      	adds	r3, #4
 81035e0:	683a      	ldr	r2, [r7, #0]
 81035e2:	6879      	ldr	r1, [r7, #4]
 81035e4:	68f8      	ldr	r0, [r7, #12]
 81035e6:	f000 fa51 	bl	8103a8c <_ZNKSt8__detail15_Hashtable_baseIN7APIDoIP12EDoIPRequestESt4pairIKS2_PKcENS_10_Select1stESt8equal_toIS2_ESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEE12_M_equals_trIS2_EEbRKT_jRKNS_16_Hash_node_valueIS7_Lb0EEE>
 81035ea:	4603      	mov	r3, r0
 81035ec:	2b00      	cmp	r3, #0
 81035ee:	d001      	beq.n	81035f4 <_ZNKSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_PKcESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE22_M_find_before_node_trIS1_EEPNS8_15_Hash_node_baseEjRKT_j+0x44>
	      return __prev_p;
 81035f0:	697b      	ldr	r3, [r7, #20]
 81035f2:	e01e      	b.n	8103632 <_ZNKSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_PKcESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE22_M_find_before_node_trIS1_EEPNS8_15_Hash_node_baseEjRKT_j+0x82>
	    if (!__p->_M_nxt || _M_bucket_index(*__p->_M_next()) != __bkt)
 81035f4:	693b      	ldr	r3, [r7, #16]
 81035f6:	681b      	ldr	r3, [r3, #0]
 81035f8:	2b00      	cmp	r3, #0
 81035fa:	d00c      	beq.n	8103616 <_ZNKSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_PKcESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE22_M_find_before_node_trIS1_EEPNS8_15_Hash_node_baseEjRKT_j+0x66>
 81035fc:	6938      	ldr	r0, [r7, #16]
 81035fe:	f7fe fdba 	bl	8102176 <_ZNKSt8__detail10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestEPKcELb0EE7_M_nextEv>
 8103602:	4603      	mov	r3, r0
 8103604:	3304      	adds	r3, #4
 8103606:	4619      	mov	r1, r3
 8103608:	68f8      	ldr	r0, [r7, #12]
 810360a:	f000 fa5c 	bl	8103ac6 <_ZNKSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_PKcESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE15_M_bucket_indexERKNS8_16_Hash_node_valueIS6_Lb0EEE>
 810360e:	4602      	mov	r2, r0
 8103610:	68bb      	ldr	r3, [r7, #8]
 8103612:	4293      	cmp	r3, r2
 8103614:	d001      	beq.n	810361a <_ZNKSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_PKcESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE22_M_find_before_node_trIS1_EEPNS8_15_Hash_node_baseEjRKT_j+0x6a>
 8103616:	2301      	movs	r3, #1
 8103618:	e000      	b.n	810361c <_ZNKSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_PKcESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE22_M_find_before_node_trIS1_EEPNS8_15_Hash_node_baseEjRKT_j+0x6c>
 810361a:	2300      	movs	r3, #0
 810361c:	2b00      	cmp	r3, #0
 810361e:	d106      	bne.n	810362e <_ZNKSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_PKcESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE22_M_find_before_node_trIS1_EEPNS8_15_Hash_node_baseEjRKT_j+0x7e>
	    __prev_p = __p;
 8103620:	693b      	ldr	r3, [r7, #16]
 8103622:	617b      	str	r3, [r7, #20]
	     __p = __p->_M_next())
 8103624:	6938      	ldr	r0, [r7, #16]
 8103626:	f7fe fda6 	bl	8102176 <_ZNKSt8__detail10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestEPKcELb0EE7_M_nextEv>
 810362a:	6138      	str	r0, [r7, #16]
	    if (this->_M_equals_tr(__k, __code, *__p))
 810362c:	e7d6      	b.n	81035dc <_ZNKSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_PKcESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE22_M_find_before_node_trIS1_EEPNS8_15_Hash_node_baseEjRKT_j+0x2c>
	      break;
 810362e:	bf00      	nop
	return nullptr;
 8103630:	2300      	movs	r3, #0
      }
 8103632:	4618      	mov	r0, r3
 8103634:	3718      	adds	r7, #24
 8103636:	46bd      	mov	sp, r7
 8103638:	bd80      	pop	{r7, pc}

0810363a <_ZNSt8__detail19_Node_iterator_baseISt4pairIKN7APIDoIP12EDoIPRequestEPKcELb0EEC1EPNS_10_Hash_nodeIS7_Lb0EEE>:
      _Node_iterator_base(__node_type* __p) noexcept
 810363a:	b480      	push	{r7}
 810363c:	b083      	sub	sp, #12
 810363e:	af00      	add	r7, sp, #0
 8103640:	6078      	str	r0, [r7, #4]
 8103642:	6039      	str	r1, [r7, #0]
      : _M_cur(__p) { }
 8103644:	687b      	ldr	r3, [r7, #4]
 8103646:	683a      	ldr	r2, [r7, #0]
 8103648:	601a      	str	r2, [r3, #0]
 810364a:	687b      	ldr	r3, [r7, #4]
 810364c:	4618      	mov	r0, r3
 810364e:	370c      	adds	r7, #12
 8103650:	46bd      	mov	sp, r7
 8103652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103656:	4770      	bx	lr

08103658 <_ZSt7forwardINSt8__detail14_Node_iteratorISt4pairIKN7APIDoIP12EDoIPRequestEPKcELb0ELb0EEEEOT_RNSt16remove_referenceISA_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8103658:	b480      	push	{r7}
 810365a:	b083      	sub	sp, #12
 810365c:	af00      	add	r7, sp, #0
 810365e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8103660:	687b      	ldr	r3, [r7, #4]
 8103662:	4618      	mov	r0, r3
 8103664:	370c      	adds	r7, #12
 8103666:	46bd      	mov	sp, r7
 8103668:	f85d 7b04 	ldr.w	r7, [sp], #4
 810366c:	4770      	bx	lr

0810366e <_ZNKSt8__detail10_AllocNodeISaINS_10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestEPKcELb0EEEEEclIJRS5_RKS7_EEEPS9_DpOT_>:
	operator()(_Args&&... __args) const
 810366e:	b5b0      	push	{r4, r5, r7, lr}
 8103670:	b084      	sub	sp, #16
 8103672:	af00      	add	r7, sp, #0
 8103674:	60f8      	str	r0, [r7, #12]
 8103676:	60b9      	str	r1, [r7, #8]
 8103678:	607a      	str	r2, [r7, #4]
	{ return _M_h._M_allocate_node(std::forward<_Args>(__args)...); }
 810367a:	68fb      	ldr	r3, [r7, #12]
 810367c:	681c      	ldr	r4, [r3, #0]
 810367e:	68b8      	ldr	r0, [r7, #8]
 8103680:	f7ff fa88 	bl	8102b94 <_ZSt7forwardIRKN7APIDoIP12EDoIPRequestEEOT_RNSt16remove_referenceIS4_E4typeE>
 8103684:	4605      	mov	r5, r0
 8103686:	6878      	ldr	r0, [r7, #4]
 8103688:	f000 fa2e 	bl	8103ae8 <_ZSt7forwardIRKPKcEOT_RNSt16remove_referenceIS4_E4typeE>
 810368c:	4603      	mov	r3, r0
 810368e:	461a      	mov	r2, r3
 8103690:	4629      	mov	r1, r5
 8103692:	4620      	mov	r0, r4
 8103694:	f000 fa40 	bl	8103b18 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestEPKcELb0EEEEE16_M_allocate_nodeIJRS5_RKS7_EEEPS9_DpOT_>
 8103698:	4603      	mov	r3, r0
 810369a:	4618      	mov	r0, r3
 810369c:	3710      	adds	r7, #16
 810369e:	46bd      	mov	sp, r7
 81036a0:	bdb0      	pop	{r4, r5, r7, pc}

081036a2 <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_PKcESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE9_M_rehashEjRKj>:
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
 81036a2:	b580      	push	{r7, lr}
 81036a4:	b084      	sub	sp, #16
 81036a6:	af00      	add	r7, sp, #0
 81036a8:	60f8      	str	r0, [r7, #12]
 81036aa:	60b9      	str	r1, [r7, #8]
 81036ac:	607a      	str	r2, [r7, #4]
	  _M_rehash_aux(__bkt_count, __unique_keys{});
 81036ae:	461a      	mov	r2, r3
 81036b0:	68b9      	ldr	r1, [r7, #8]
 81036b2:	68f8      	ldr	r0, [r7, #12]
 81036b4:	f000 fa68 	bl	8103b88 <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_PKcESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE13_M_rehash_auxEjSt17integral_constantIbLb1EE>
    }
 81036b8:	bf00      	nop
 81036ba:	3710      	adds	r7, #16
 81036bc:	46bd      	mov	sp, r7
 81036be:	bd80      	pop	{r7, pc}

081036c0 <_ZNKSt8__detail15_Hash_code_baseIN7APIDoIP12EDoIPRequestESt4pairIKS2_PKcENS_10_Select1stESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE13_M_store_codeERNS_21_Hash_node_code_cacheILb0EEEj>:
      _M_store_code(_Hash_node_code_cache<false>&, __hash_code) const
 81036c0:	b480      	push	{r7}
 81036c2:	b085      	sub	sp, #20
 81036c4:	af00      	add	r7, sp, #0
 81036c6:	60f8      	str	r0, [r7, #12]
 81036c8:	60b9      	str	r1, [r7, #8]
 81036ca:	607a      	str	r2, [r7, #4]
      { }
 81036cc:	bf00      	nop
 81036ce:	3714      	adds	r7, #20
 81036d0:	46bd      	mov	sp, r7
 81036d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81036d6:	4770      	bx	lr

081036d8 <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_PKcESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE22_M_insert_bucket_beginEjPNS8_10_Hash_nodeIS6_Lb0EEE>:
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
 81036d8:	b5b0      	push	{r4, r5, r7, lr}
 81036da:	b084      	sub	sp, #16
 81036dc:	af00      	add	r7, sp, #0
 81036de:	60f8      	str	r0, [r7, #12]
 81036e0:	60b9      	str	r1, [r7, #8]
 81036e2:	607a      	str	r2, [r7, #4]
      if (_M_buckets[__bkt])
 81036e4:	68fb      	ldr	r3, [r7, #12]
 81036e6:	681a      	ldr	r2, [r3, #0]
 81036e8:	68bb      	ldr	r3, [r7, #8]
 81036ea:	009b      	lsls	r3, r3, #2
 81036ec:	4413      	add	r3, r2
 81036ee:	681b      	ldr	r3, [r3, #0]
 81036f0:	2b00      	cmp	r3, #0
 81036f2:	d011      	beq.n	8103718 <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_PKcESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE22_M_insert_bucket_beginEjPNS8_10_Hash_nodeIS6_Lb0EEE+0x40>
	  __node->_M_nxt = _M_buckets[__bkt]->_M_nxt;
 81036f4:	68fb      	ldr	r3, [r7, #12]
 81036f6:	681a      	ldr	r2, [r3, #0]
 81036f8:	68bb      	ldr	r3, [r7, #8]
 81036fa:	009b      	lsls	r3, r3, #2
 81036fc:	4413      	add	r3, r2
 81036fe:	681b      	ldr	r3, [r3, #0]
 8103700:	681a      	ldr	r2, [r3, #0]
 8103702:	687b      	ldr	r3, [r7, #4]
 8103704:	601a      	str	r2, [r3, #0]
	  _M_buckets[__bkt]->_M_nxt = __node;
 8103706:	68fb      	ldr	r3, [r7, #12]
 8103708:	681a      	ldr	r2, [r3, #0]
 810370a:	68bb      	ldr	r3, [r7, #8]
 810370c:	009b      	lsls	r3, r3, #2
 810370e:	4413      	add	r3, r2
 8103710:	681b      	ldr	r3, [r3, #0]
 8103712:	687a      	ldr	r2, [r7, #4]
 8103714:	601a      	str	r2, [r3, #0]
    }
 8103716:	e022      	b.n	810375e <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_PKcESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE22_M_insert_bucket_beginEjPNS8_10_Hash_nodeIS6_Lb0EEE+0x86>
	  __node->_M_nxt = _M_before_begin._M_nxt;
 8103718:	68fb      	ldr	r3, [r7, #12]
 810371a:	689a      	ldr	r2, [r3, #8]
 810371c:	687b      	ldr	r3, [r7, #4]
 810371e:	601a      	str	r2, [r3, #0]
	  _M_before_begin._M_nxt = __node;
 8103720:	68fb      	ldr	r3, [r7, #12]
 8103722:	687a      	ldr	r2, [r7, #4]
 8103724:	609a      	str	r2, [r3, #8]
	  if (__node->_M_nxt)
 8103726:	687b      	ldr	r3, [r7, #4]
 8103728:	681b      	ldr	r3, [r3, #0]
 810372a:	2b00      	cmp	r3, #0
 810372c:	d00f      	beq.n	810374e <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_PKcESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE22_M_insert_bucket_beginEjPNS8_10_Hash_nodeIS6_Lb0EEE+0x76>
	    _M_buckets[_M_bucket_index(*__node->_M_next())] = __node;
 810372e:	687c      	ldr	r4, [r7, #4]
 8103730:	68fb      	ldr	r3, [r7, #12]
 8103732:	681d      	ldr	r5, [r3, #0]
 8103734:	6878      	ldr	r0, [r7, #4]
 8103736:	f7fe fd1e 	bl	8102176 <_ZNKSt8__detail10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestEPKcELb0EE7_M_nextEv>
 810373a:	4603      	mov	r3, r0
 810373c:	3304      	adds	r3, #4
 810373e:	4619      	mov	r1, r3
 8103740:	68f8      	ldr	r0, [r7, #12]
 8103742:	f000 f9c0 	bl	8103ac6 <_ZNKSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_PKcESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE15_M_bucket_indexERKNS8_16_Hash_node_valueIS6_Lb0EEE>
 8103746:	4603      	mov	r3, r0
 8103748:	009b      	lsls	r3, r3, #2
 810374a:	442b      	add	r3, r5
 810374c:	601c      	str	r4, [r3, #0]
	  _M_buckets[__bkt] = &_M_before_begin;
 810374e:	68fb      	ldr	r3, [r7, #12]
 8103750:	681a      	ldr	r2, [r3, #0]
 8103752:	68bb      	ldr	r3, [r7, #8]
 8103754:	009b      	lsls	r3, r3, #2
 8103756:	4413      	add	r3, r2
 8103758:	68fa      	ldr	r2, [r7, #12]
 810375a:	3208      	adds	r2, #8
 810375c:	601a      	str	r2, [r3, #0]
    }
 810375e:	bf00      	nop
 8103760:	3710      	adds	r7, #16
 8103762:	46bd      	mov	sp, r7
 8103764:	bdb0      	pop	{r4, r5, r7, pc}

08103766 <_ZN9__gnu_cxx16__aligned_bufferISt4pairIKN7APIDoIP12EDoIPRequestEPKcEE7_M_addrEv>:
      _M_addr() noexcept
 8103766:	b480      	push	{r7}
 8103768:	b083      	sub	sp, #12
 810376a:	af00      	add	r7, sp, #0
 810376c:	6078      	str	r0, [r7, #4]
        return static_cast<void*>(&_M_storage);
 810376e:	687b      	ldr	r3, [r7, #4]
      }
 8103770:	4618      	mov	r0, r3
 8103772:	370c      	adds	r7, #12
 8103774:	46bd      	mov	sp, r7
 8103776:	f85d 7b04 	ldr.w	r7, [sp], #4
 810377a:	4770      	bx	lr

0810377c <_ZSt9addressofINSt8__detail10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestEPKcELb0EEEEPT_RSA_>:
    addressof(_Tp& __r) noexcept
 810377c:	b580      	push	{r7, lr}
 810377e:	b082      	sub	sp, #8
 8103780:	af00      	add	r7, sp, #0
 8103782:	6078      	str	r0, [r7, #4]
    { return std::__addressof(__r); }
 8103784:	6878      	ldr	r0, [r7, #4]
 8103786:	f000 fa63 	bl	8103c50 <_ZSt11__addressofINSt8__detail10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestEPKcELb0EEEEPT_RSA_>
 810378a:	4603      	mov	r3, r0
 810378c:	4618      	mov	r0, r3
 810378e:	3708      	adds	r7, #8
 8103790:	46bd      	mov	sp, r7
 8103792:	bd80      	pop	{r7, pc}

08103794 <_ZSt7forwardIRKSt4hashIN7APIDoIP12EDoIPRequestEEEOT_RNSt16remove_referenceIS6_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8103794:	b480      	push	{r7}
 8103796:	b083      	sub	sp, #12
 8103798:	af00      	add	r7, sp, #0
 810379a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 810379c:	687b      	ldr	r3, [r7, #4]
 810379e:	4618      	mov	r0, r3
 81037a0:	370c      	adds	r7, #12
 81037a2:	46bd      	mov	sp, r7
 81037a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81037a8:	4770      	bx	lr

081037aa <_ZNSt15__new_allocatorINSt8__detail10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEEEC1ERKSE_>:
      __new_allocator(const __new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 81037aa:	b480      	push	{r7}
 81037ac:	b083      	sub	sp, #12
 81037ae:	af00      	add	r7, sp, #0
 81037b0:	6078      	str	r0, [r7, #4]
 81037b2:	6039      	str	r1, [r7, #0]
 81037b4:	687b      	ldr	r3, [r7, #4]
 81037b6:	4618      	mov	r0, r3
 81037b8:	370c      	adds	r7, #12
 81037ba:	46bd      	mov	sp, r7
 81037bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 81037c0:	4770      	bx	lr

081037c2 <_ZNSt15__new_allocatorIPNSt8__detail15_Hash_node_baseEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 81037c2:	b580      	push	{r7, lr}
 81037c4:	b084      	sub	sp, #16
 81037c6:	af00      	add	r7, sp, #0
 81037c8:	60f8      	str	r0, [r7, #12]
 81037ca:	60b9      	str	r1, [r7, #8]
 81037cc:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 81037ce:	68f8      	ldr	r0, [r7, #12]
 81037d0:	f000 fa5b 	bl	8103c8a <_ZNKSt15__new_allocatorIPNSt8__detail15_Hash_node_baseEE11_M_max_sizeEv>
 81037d4:	4602      	mov	r2, r0
 81037d6:	68bb      	ldr	r3, [r7, #8]
 81037d8:	4293      	cmp	r3, r2
 81037da:	bf8c      	ite	hi
 81037dc:	2301      	movhi	r3, #1
 81037de:	2300      	movls	r3, #0
 81037e0:	b2db      	uxtb	r3, r3
 81037e2:	2b00      	cmp	r3, #0
 81037e4:	bf14      	ite	ne
 81037e6:	2301      	movne	r3, #1
 81037e8:	2300      	moveq	r3, #0
 81037ea:	b2db      	uxtb	r3, r3
 81037ec:	2b00      	cmp	r3, #0
 81037ee:	d007      	beq.n	8103800 <_ZNSt15__new_allocatorIPNSt8__detail15_Hash_node_baseEE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 81037f0:	68bb      	ldr	r3, [r7, #8]
 81037f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 81037f6:	d301      	bcc.n	81037fc <_ZNSt15__new_allocatorIPNSt8__detail15_Hash_node_baseEE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 81037f8:	f022 f9a8 	bl	8125b4c <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 81037fc:	f022 f9a3 	bl	8125b46 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 8103800:	68bb      	ldr	r3, [r7, #8]
 8103802:	009b      	lsls	r3, r3, #2
 8103804:	4618      	mov	r0, r3
 8103806:	f022 f8d0 	bl	81259aa <_Znwj>
 810380a:	4603      	mov	r3, r0
 810380c:	bf00      	nop
      }
 810380e:	4618      	mov	r0, r3
 8103810:	3710      	adds	r7, #16
 8103812:	46bd      	mov	sp, r7
 8103814:	bd80      	pop	{r7, pc}

08103816 <_ZNKSt8__detail21_Hashtable_ebo_helperILi0ESt8equal_toIN7APIDoIP12EDoIPRequestEELb1EE7_M_cgetEv>:
      const _Tp& _M_cget() const { return static_cast<const _Tp&>(*this); }
 8103816:	b480      	push	{r7}
 8103818:	b083      	sub	sp, #12
 810381a:	af00      	add	r7, sp, #0
 810381c:	6078      	str	r0, [r7, #4]
 810381e:	687b      	ldr	r3, [r7, #4]
 8103820:	4618      	mov	r0, r3
 8103822:	370c      	adds	r7, #12
 8103824:	46bd      	mov	sp, r7
 8103826:	f85d 7b04 	ldr.w	r7, [sp], #4
 810382a:	4770      	bx	lr

0810382c <_ZNKSt8__detail21_Hash_node_value_baseISt4pairIKN7APIDoIP12EDoIPRequestES1_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEEE9_M_valptrEv>:
      _M_valptr() const noexcept
 810382c:	b580      	push	{r7, lr}
 810382e:	b082      	sub	sp, #8
 8103830:	af00      	add	r7, sp, #0
 8103832:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 8103834:	687b      	ldr	r3, [r7, #4]
 8103836:	4618      	mov	r0, r3
 8103838:	f000 fa33 	bl	8103ca2 <_ZNK9__gnu_cxx16__aligned_bufferISt4pairIKN7APIDoIP12EDoIPRequestES1_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEEE6_M_ptrEv>
 810383c:	4603      	mov	r3, r0
 810383e:	4618      	mov	r0, r3
 8103840:	3708      	adds	r7, #8
 8103842:	46bd      	mov	sp, r7
 8103844:	bd80      	pop	{r7, pc}

08103846 <_ZNKSt8__detail21_Hashtable_ebo_helperILi1ESt4hashIN7APIDoIP12EDoIPRequestEELb1EE7_M_cgetEv>:
      const _Tp& _M_cget() const { return static_cast<const _Tp&>(*this); }
 8103846:	b480      	push	{r7}
 8103848:	b083      	sub	sp, #12
 810384a:	af00      	add	r7, sp, #0
 810384c:	6078      	str	r0, [r7, #4]
 810384e:	687b      	ldr	r3, [r7, #4]
 8103850:	4618      	mov	r0, r3
 8103852:	370c      	adds	r7, #12
 8103854:	46bd      	mov	sp, r7
 8103856:	f85d 7b04 	ldr.w	r7, [sp], #4
 810385a:	4770      	bx	lr

0810385c <_ZNKSt8__detail15_Hashtable_baseIN7APIDoIP12EDoIPRequestESt4pairIKS2_S3_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEENS_10_Select1stESt8equal_toIS2_ESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEE12_M_equals_trIS2_EEbRKT_jRKNS_16_Hash_node_valueISB_Lb0EEE>:
	_M_equals_tr(const _Kt& __k, __hash_code __c,
 810385c:	b580      	push	{r7, lr}
 810385e:	b084      	sub	sp, #16
 8103860:	af00      	add	r7, sp, #0
 8103862:	60f8      	str	r0, [r7, #12]
 8103864:	60b9      	str	r1, [r7, #8]
 8103866:	607a      	str	r2, [r7, #4]
 8103868:	603b      	str	r3, [r7, #0]
	{ return _S_equals(__c, __n) && _M_key_equals_tr(__k, __n); }
 810386a:	6839      	ldr	r1, [r7, #0]
 810386c:	6878      	ldr	r0, [r7, #4]
 810386e:	f000 fa24 	bl	8103cba <_ZNSt8__detail15_Hashtable_baseIN7APIDoIP12EDoIPRequestESt4pairIKS2_S3_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEENS_10_Select1stESt8equal_toIS2_ESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEE9_S_equalsEjRKNS_21_Hash_node_code_cacheILb0EEE>
 8103872:	4603      	mov	r3, r0
 8103874:	2b00      	cmp	r3, #0
 8103876:	d009      	beq.n	810388c <_ZNKSt8__detail15_Hashtable_baseIN7APIDoIP12EDoIPRequestESt4pairIKS2_S3_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEENS_10_Select1stESt8equal_toIS2_ESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEE12_M_equals_trIS2_EEbRKT_jRKNS_16_Hash_node_valueISB_Lb0EEE+0x30>
 8103878:	683a      	ldr	r2, [r7, #0]
 810387a:	68b9      	ldr	r1, [r7, #8]
 810387c:	68f8      	ldr	r0, [r7, #12]
 810387e:	f7ff f8e9 	bl	8102a54 <_ZNKSt8__detail15_Hashtable_baseIN7APIDoIP12EDoIPRequestESt4pairIKS2_S3_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEENS_10_Select1stESt8equal_toIS2_ESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEE16_M_key_equals_trIS2_EEbRKT_RKNS_16_Hash_node_valueISB_Lb0EEE>
 8103882:	4603      	mov	r3, r0
 8103884:	2b00      	cmp	r3, #0
 8103886:	d001      	beq.n	810388c <_ZNKSt8__detail15_Hashtable_baseIN7APIDoIP12EDoIPRequestESt4pairIKS2_S3_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEENS_10_Select1stESt8equal_toIS2_ESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEE12_M_equals_trIS2_EEbRKT_jRKNS_16_Hash_node_valueISB_Lb0EEE+0x30>
 8103888:	2301      	movs	r3, #1
 810388a:	e000      	b.n	810388e <_ZNKSt8__detail15_Hashtable_baseIN7APIDoIP12EDoIPRequestESt4pairIKS2_S3_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEENS_10_Select1stESt8equal_toIS2_ESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEE12_M_equals_trIS2_EEbRKT_jRKNS_16_Hash_node_valueISB_Lb0EEE+0x32>
 810388c:	2300      	movs	r3, #0
 810388e:	4618      	mov	r0, r3
 8103890:	3710      	adds	r7, #16
 8103892:	46bd      	mov	sp, r7
 8103894:	bd80      	pop	{r7, pc}

08103896 <_ZNKSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE15_M_bucket_indexERKNSC_16_Hash_node_valueISA_Lb0EEE>:
      _M_bucket_index(const __node_value_type& __n) const noexcept
 8103896:	b580      	push	{r7, lr}
 8103898:	b082      	sub	sp, #8
 810389a:	af00      	add	r7, sp, #0
 810389c:	6078      	str	r0, [r7, #4]
 810389e:	6039      	str	r1, [r7, #0]
      { return __hash_code_base::_M_bucket_index(__n, _M_bucket_count); }
 81038a0:	687b      	ldr	r3, [r7, #4]
 81038a2:	685b      	ldr	r3, [r3, #4]
 81038a4:	461a      	mov	r2, r3
 81038a6:	6839      	ldr	r1, [r7, #0]
 81038a8:	6878      	ldr	r0, [r7, #4]
 81038aa:	f000 fa12 	bl	8103cd2 <_ZNKSt8__detail15_Hash_code_baseIN7APIDoIP12EDoIPRequestESt4pairIKS2_S3_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEENS_10_Select1stESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE15_M_bucket_indexERKNS_16_Hash_node_valueISB_Lb0EEEj>
 81038ae:	4603      	mov	r3, r0
 81038b0:	4618      	mov	r0, r3
 81038b2:	3708      	adds	r7, #8
 81038b4:	46bd      	mov	sp, r7
 81038b6:	bd80      	pop	{r7, pc}

081038b8 <_ZSt7forwardIRKSt4pairISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEEOT_RNSt16remove_referenceIS9_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 81038b8:	b480      	push	{r7}
 81038ba:	b083      	sub	sp, #12
 81038bc:	af00      	add	r7, sp, #0
 81038be:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 81038c0:	687b      	ldr	r3, [r7, #4]
 81038c2:	4618      	mov	r0, r3
 81038c4:	370c      	adds	r7, #12
 81038c6:	46bd      	mov	sp, r7
 81038c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81038cc:	4770      	bx	lr

081038ce <_ZNSt8__detail10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES1_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEC1Ev>:
    struct _Hash_node
 81038ce:	b580      	push	{r7, lr}
 81038d0:	b082      	sub	sp, #8
 81038d2:	af00      	add	r7, sp, #0
 81038d4:	6078      	str	r0, [r7, #4]
 81038d6:	687b      	ldr	r3, [r7, #4]
 81038d8:	4618      	mov	r0, r3
 81038da:	f7fd fd31 	bl	8101340 <_ZNSt8__detail15_Hash_node_baseC1Ev>
 81038de:	687b      	ldr	r3, [r7, #4]
 81038e0:	4618      	mov	r0, r3
 81038e2:	3708      	adds	r7, #8
 81038e4:	46bd      	mov	sp, r7
 81038e6:	bd80      	pop	{r7, pc}

081038e8 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEEEE16_M_allocate_nodeIJRS5_RKSB_EEEPSD_DpOT_>:
      _Hashtable_alloc<_NodeAlloc>::_M_allocate_node(_Args&&... __args)
 81038e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 81038ea:	b087      	sub	sp, #28
 81038ec:	af00      	add	r7, sp, #0
 81038ee:	60f8      	str	r0, [r7, #12]
 81038f0:	60b9      	str	r1, [r7, #8]
 81038f2:	607a      	str	r2, [r7, #4]
	auto __nptr = __node_alloc_traits::allocate(_M_node_allocator(), 1);
 81038f4:	68f8      	ldr	r0, [r7, #12]
 81038f6:	f7fe fddf 	bl	81024b8 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEEEE17_M_node_allocatorEv>
 81038fa:	4603      	mov	r3, r0
 81038fc:	2101      	movs	r1, #1
 81038fe:	4618      	mov	r0, r3
 8103900:	f000 fa09 	bl	8103d16 <_ZNSt16allocator_traitsISaINSt8__detail10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEEEE8allocateERSE_j>
 8103904:	6178      	str	r0, [r7, #20]
	__node_ptr __n = std::__to_address(__nptr);
 8103906:	6978      	ldr	r0, [r7, #20]
 8103908:	f000 fa3d 	bl	8103d86 <_ZSt12__to_addressINSt8__detail10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEEEPT_SF_>
 810390c:	6138      	str	r0, [r7, #16]
	    ::new ((void*)__n) __node_type;
 810390e:	693b      	ldr	r3, [r7, #16]
 8103910:	4619      	mov	r1, r3
 8103912:	2014      	movs	r0, #20
 8103914:	f7fd fcfa 	bl	810130c <_ZnwjPv>
 8103918:	4603      	mov	r3, r0
 810391a:	4618      	mov	r0, r3
 810391c:	f7ff ffd7 	bl	81038ce <_ZNSt8__detail10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES1_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEC1Ev>
	    __node_alloc_traits::construct(_M_node_allocator(),
 8103920:	68f8      	ldr	r0, [r7, #12]
 8103922:	f7fe fdc9 	bl	81024b8 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEEEE17_M_node_allocatorEv>
 8103926:	4604      	mov	r4, r0
 8103928:	693b      	ldr	r3, [r7, #16]
 810392a:	3304      	adds	r3, #4
 810392c:	4618      	mov	r0, r3
 810392e:	f7fe fdcf 	bl	81024d0 <_ZNSt8__detail21_Hash_node_value_baseISt4pairIKN7APIDoIP12EDoIPRequestES1_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEEE9_M_valptrEv>
 8103932:	4605      	mov	r5, r0
 8103934:	68b8      	ldr	r0, [r7, #8]
 8103936:	f7ff f92d 	bl	8102b94 <_ZSt7forwardIRKN7APIDoIP12EDoIPRequestEEOT_RNSt16remove_referenceIS4_E4typeE>
 810393a:	4606      	mov	r6, r0
 810393c:	6878      	ldr	r0, [r7, #4]
 810393e:	f7ff ffbb 	bl	81038b8 <_ZSt7forwardIRKSt4pairISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEEOT_RNSt16remove_referenceIS9_E4typeE>
 8103942:	4603      	mov	r3, r0
 8103944:	4632      	mov	r2, r6
 8103946:	4629      	mov	r1, r5
 8103948:	4620      	mov	r0, r4
 810394a:	f000 fa27 	bl	8103d9c <_ZNSt16allocator_traitsISaINSt8__detail10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEEEE9constructISC_JRS5_RKSB_EEEvRSE_PT_DpOT0_>
	    return __n;
 810394e:	693b      	ldr	r3, [r7, #16]
      }
 8103950:	4618      	mov	r0, r3
 8103952:	371c      	adds	r7, #28
 8103954:	46bd      	mov	sp, r7
 8103956:	bdf0      	pop	{r4, r5, r6, r7, pc}

08103958 <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE13_M_rehash_auxEjSt17integral_constantIbLb1EE>:
  template<typename _Key, typename _Value, typename _Alloc,
	   typename _ExtractKey, typename _Equal,
	   typename _Hash, typename _RangeHash, typename _Unused,
	   typename _RehashPolicy, typename _Traits>
    void
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
 8103958:	b580      	push	{r7, lr}
 810395a:	b08a      	sub	sp, #40	@ 0x28
 810395c:	af00      	add	r7, sp, #0
 810395e:	60f8      	str	r0, [r7, #12]
 8103960:	60b9      	str	r1, [r7, #8]
 8103962:	713a      	strb	r2, [r7, #4]
	       _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits>::
    _M_rehash_aux(size_type __bkt_count, true_type /* __uks */)
    {
      __buckets_ptr __new_buckets = _M_allocate_buckets(__bkt_count);
 8103964:	68b9      	ldr	r1, [r7, #8]
 8103966:	68f8      	ldr	r0, [r7, #12]
 8103968:	f7fe faa7 	bl	8101eba <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_allocate_bucketsEj>
 810396c:	61f8      	str	r0, [r7, #28]
      __node_ptr __p = _M_begin();
 810396e:	68f8      	ldr	r0, [r7, #12]
 8103970:	f7fe f99b 	bl	8101caa <_ZNKSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE8_M_beginEv>
 8103974:	6278      	str	r0, [r7, #36]	@ 0x24
      _M_before_begin._M_nxt = nullptr;
 8103976:	68fb      	ldr	r3, [r7, #12]
 8103978:	2200      	movs	r2, #0
 810397a:	609a      	str	r2, [r3, #8]
      std::size_t __bbegin_bkt = 0;
 810397c:	2300      	movs	r3, #0
 810397e:	623b      	str	r3, [r7, #32]
      while (__p)
 8103980:	e03e      	b.n	8103a00 <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE13_M_rehash_auxEjSt17integral_constantIbLb1EE+0xa8>
	{
	  __node_ptr __next = __p->_M_next();
 8103982:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8103984:	f7fe faf7 	bl	8101f76 <_ZNKSt8__detail10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES1_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EE7_M_nextEv>
 8103988:	61b8      	str	r0, [r7, #24]
	  std::size_t __bkt
	    = __hash_code_base::_M_bucket_index(*__p, __bkt_count);
 810398a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810398c:	3304      	adds	r3, #4
 810398e:	68ba      	ldr	r2, [r7, #8]
 8103990:	4619      	mov	r1, r3
 8103992:	68f8      	ldr	r0, [r7, #12]
 8103994:	f000 f99d 	bl	8103cd2 <_ZNKSt8__detail15_Hash_code_baseIN7APIDoIP12EDoIPRequestESt4pairIKS2_S3_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEENS_10_Select1stESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE15_M_bucket_indexERKNS_16_Hash_node_valueISB_Lb0EEEj>
 8103998:	6178      	str	r0, [r7, #20]
	  if (!__new_buckets[__bkt])
 810399a:	697b      	ldr	r3, [r7, #20]
 810399c:	009b      	lsls	r3, r3, #2
 810399e:	69fa      	ldr	r2, [r7, #28]
 81039a0:	4413      	add	r3, r2
 81039a2:	681b      	ldr	r3, [r3, #0]
 81039a4:	2b00      	cmp	r3, #0
 81039a6:	d11a      	bne.n	81039de <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE13_M_rehash_auxEjSt17integral_constantIbLb1EE+0x86>
	    {
	      __p->_M_nxt = _M_before_begin._M_nxt;
 81039a8:	68fb      	ldr	r3, [r7, #12]
 81039aa:	689a      	ldr	r2, [r3, #8]
 81039ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81039ae:	601a      	str	r2, [r3, #0]
	      _M_before_begin._M_nxt = __p;
 81039b0:	68fb      	ldr	r3, [r7, #12]
 81039b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 81039b4:	609a      	str	r2, [r3, #8]
	      __new_buckets[__bkt] = &_M_before_begin;
 81039b6:	697b      	ldr	r3, [r7, #20]
 81039b8:	009b      	lsls	r3, r3, #2
 81039ba:	69fa      	ldr	r2, [r7, #28]
 81039bc:	4413      	add	r3, r2
 81039be:	68fa      	ldr	r2, [r7, #12]
 81039c0:	3208      	adds	r2, #8
 81039c2:	601a      	str	r2, [r3, #0]
	      if (__p->_M_nxt)
 81039c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81039c6:	681b      	ldr	r3, [r3, #0]
 81039c8:	2b00      	cmp	r3, #0
 81039ca:	d005      	beq.n	81039d8 <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE13_M_rehash_auxEjSt17integral_constantIbLb1EE+0x80>
		__new_buckets[__bbegin_bkt] = __p;
 81039cc:	6a3b      	ldr	r3, [r7, #32]
 81039ce:	009b      	lsls	r3, r3, #2
 81039d0:	69fa      	ldr	r2, [r7, #28]
 81039d2:	4413      	add	r3, r2
 81039d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 81039d6:	601a      	str	r2, [r3, #0]
	      __bbegin_bkt = __bkt;
 81039d8:	697b      	ldr	r3, [r7, #20]
 81039da:	623b      	str	r3, [r7, #32]
 81039dc:	e00e      	b.n	81039fc <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE13_M_rehash_auxEjSt17integral_constantIbLb1EE+0xa4>
	    }
	  else
	    {
	      __p->_M_nxt = __new_buckets[__bkt]->_M_nxt;
 81039de:	697b      	ldr	r3, [r7, #20]
 81039e0:	009b      	lsls	r3, r3, #2
 81039e2:	69fa      	ldr	r2, [r7, #28]
 81039e4:	4413      	add	r3, r2
 81039e6:	681b      	ldr	r3, [r3, #0]
 81039e8:	681a      	ldr	r2, [r3, #0]
 81039ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81039ec:	601a      	str	r2, [r3, #0]
	      __new_buckets[__bkt]->_M_nxt = __p;
 81039ee:	697b      	ldr	r3, [r7, #20]
 81039f0:	009b      	lsls	r3, r3, #2
 81039f2:	69fa      	ldr	r2, [r7, #28]
 81039f4:	4413      	add	r3, r2
 81039f6:	681b      	ldr	r3, [r3, #0]
 81039f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 81039fa:	601a      	str	r2, [r3, #0]
	    }

	  __p = __next;
 81039fc:	69bb      	ldr	r3, [r7, #24]
 81039fe:	627b      	str	r3, [r7, #36]	@ 0x24
      while (__p)
 8103a00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8103a02:	2b00      	cmp	r3, #0
 8103a04:	d1bd      	bne.n	8103982 <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE13_M_rehash_auxEjSt17integral_constantIbLb1EE+0x2a>
	}

      _M_deallocate_buckets();
 8103a06:	68f8      	ldr	r0, [r7, #12]
 8103a08:	f7fe f871 	bl	8101aee <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_deallocate_bucketsEv>
      _M_bucket_count = __bkt_count;
 8103a0c:	68fb      	ldr	r3, [r7, #12]
 8103a0e:	68ba      	ldr	r2, [r7, #8]
 8103a10:	605a      	str	r2, [r3, #4]
      _M_buckets = __new_buckets;
 8103a12:	68fb      	ldr	r3, [r7, #12]
 8103a14:	69fa      	ldr	r2, [r7, #28]
 8103a16:	601a      	str	r2, [r3, #0]
    }
 8103a18:	bf00      	nop
 8103a1a:	3728      	adds	r7, #40	@ 0x28
 8103a1c:	46bd      	mov	sp, r7
 8103a1e:	bd80      	pop	{r7, pc}

08103a20 <_ZSt11__addressofINSt8__detail10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEEEPT_RSE_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8103a20:	b480      	push	{r7}
 8103a22:	b083      	sub	sp, #12
 8103a24:	af00      	add	r7, sp, #0
 8103a26:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8103a28:	687b      	ldr	r3, [r7, #4]
 8103a2a:	4618      	mov	r0, r3
 8103a2c:	370c      	adds	r7, #12
 8103a2e:	46bd      	mov	sp, r7
 8103a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103a34:	4770      	bx	lr

08103a36 <_ZNSt15__new_allocatorINSt8__detail10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEEE10deallocateEPSD_j>:
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
 8103a36:	b580      	push	{r7, lr}
 8103a38:	b084      	sub	sp, #16
 8103a3a:	af00      	add	r7, sp, #0
 8103a3c:	60f8      	str	r0, [r7, #12]
 8103a3e:	60b9      	str	r1, [r7, #8]
 8103a40:	607a      	str	r2, [r7, #4]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 8103a42:	687a      	ldr	r2, [r7, #4]
 8103a44:	4613      	mov	r3, r2
 8103a46:	009b      	lsls	r3, r3, #2
 8103a48:	4413      	add	r3, r2
 8103a4a:	009b      	lsls	r3, r3, #2
 8103a4c:	4619      	mov	r1, r3
 8103a4e:	68b8      	ldr	r0, [r7, #8]
 8103a50:	f021 ff9a 	bl	8125988 <_ZdlPvj>
      }
 8103a54:	3710      	adds	r7, #16
 8103a56:	46bd      	mov	sp, r7
 8103a58:	bd80      	pop	{r7, pc}

08103a5a <_ZNSt15__new_allocatorINSt8__detail10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestEPKcELb0EEEEC1ERKSA_>:
      __new_allocator(const __new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 8103a5a:	b480      	push	{r7}
 8103a5c:	b083      	sub	sp, #12
 8103a5e:	af00      	add	r7, sp, #0
 8103a60:	6078      	str	r0, [r7, #4]
 8103a62:	6039      	str	r1, [r7, #0]
 8103a64:	687b      	ldr	r3, [r7, #4]
 8103a66:	4618      	mov	r0, r3
 8103a68:	370c      	adds	r7, #12
 8103a6a:	46bd      	mov	sp, r7
 8103a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103a70:	4770      	bx	lr

08103a72 <_ZNKSt8__detail21_Hash_node_value_baseISt4pairIKN7APIDoIP12EDoIPRequestEPKcEE9_M_valptrEv>:
      _M_valptr() const noexcept
 8103a72:	b580      	push	{r7, lr}
 8103a74:	b082      	sub	sp, #8
 8103a76:	af00      	add	r7, sp, #0
 8103a78:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 8103a7a:	687b      	ldr	r3, [r7, #4]
 8103a7c:	4618      	mov	r0, r3
 8103a7e:	f000 f9a5 	bl	8103dcc <_ZNK9__gnu_cxx16__aligned_bufferISt4pairIKN7APIDoIP12EDoIPRequestEPKcEE6_M_ptrEv>
 8103a82:	4603      	mov	r3, r0
 8103a84:	4618      	mov	r0, r3
 8103a86:	3708      	adds	r7, #8
 8103a88:	46bd      	mov	sp, r7
 8103a8a:	bd80      	pop	{r7, pc}

08103a8c <_ZNKSt8__detail15_Hashtable_baseIN7APIDoIP12EDoIPRequestESt4pairIKS2_PKcENS_10_Select1stESt8equal_toIS2_ESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEE12_M_equals_trIS2_EEbRKT_jRKNS_16_Hash_node_valueIS7_Lb0EEE>:
	_M_equals_tr(const _Kt& __k, __hash_code __c,
 8103a8c:	b580      	push	{r7, lr}
 8103a8e:	b084      	sub	sp, #16
 8103a90:	af00      	add	r7, sp, #0
 8103a92:	60f8      	str	r0, [r7, #12]
 8103a94:	60b9      	str	r1, [r7, #8]
 8103a96:	607a      	str	r2, [r7, #4]
 8103a98:	603b      	str	r3, [r7, #0]
	{ return _S_equals(__c, __n) && _M_key_equals_tr(__k, __n); }
 8103a9a:	6839      	ldr	r1, [r7, #0]
 8103a9c:	6878      	ldr	r0, [r7, #4]
 8103a9e:	f000 f9a1 	bl	8103de4 <_ZNSt8__detail15_Hashtable_baseIN7APIDoIP12EDoIPRequestESt4pairIKS2_PKcENS_10_Select1stESt8equal_toIS2_ESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEE9_S_equalsEjRKNS_21_Hash_node_code_cacheILb0EEE>
 8103aa2:	4603      	mov	r3, r0
 8103aa4:	2b00      	cmp	r3, #0
 8103aa6:	d009      	beq.n	8103abc <_ZNKSt8__detail15_Hashtable_baseIN7APIDoIP12EDoIPRequestESt4pairIKS2_PKcENS_10_Select1stESt8equal_toIS2_ESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEE12_M_equals_trIS2_EEbRKT_jRKNS_16_Hash_node_valueIS7_Lb0EEE+0x30>
 8103aa8:	683a      	ldr	r2, [r7, #0]
 8103aaa:	68b9      	ldr	r1, [r7, #8]
 8103aac:	68f8      	ldr	r0, [r7, #12]
 8103aae:	f7ff f9f5 	bl	8102e9c <_ZNKSt8__detail15_Hashtable_baseIN7APIDoIP12EDoIPRequestESt4pairIKS2_PKcENS_10_Select1stESt8equal_toIS2_ESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEE16_M_key_equals_trIS2_EEbRKT_RKNS_16_Hash_node_valueIS7_Lb0EEE>
 8103ab2:	4603      	mov	r3, r0
 8103ab4:	2b00      	cmp	r3, #0
 8103ab6:	d001      	beq.n	8103abc <_ZNKSt8__detail15_Hashtable_baseIN7APIDoIP12EDoIPRequestESt4pairIKS2_PKcENS_10_Select1stESt8equal_toIS2_ESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEE12_M_equals_trIS2_EEbRKT_jRKNS_16_Hash_node_valueIS7_Lb0EEE+0x30>
 8103ab8:	2301      	movs	r3, #1
 8103aba:	e000      	b.n	8103abe <_ZNKSt8__detail15_Hashtable_baseIN7APIDoIP12EDoIPRequestESt4pairIKS2_PKcENS_10_Select1stESt8equal_toIS2_ESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEE12_M_equals_trIS2_EEbRKT_jRKNS_16_Hash_node_valueIS7_Lb0EEE+0x32>
 8103abc:	2300      	movs	r3, #0
 8103abe:	4618      	mov	r0, r3
 8103ac0:	3710      	adds	r7, #16
 8103ac2:	46bd      	mov	sp, r7
 8103ac4:	bd80      	pop	{r7, pc}

08103ac6 <_ZNKSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_PKcESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE15_M_bucket_indexERKNS8_16_Hash_node_valueIS6_Lb0EEE>:
      _M_bucket_index(const __node_value_type& __n) const noexcept
 8103ac6:	b580      	push	{r7, lr}
 8103ac8:	b082      	sub	sp, #8
 8103aca:	af00      	add	r7, sp, #0
 8103acc:	6078      	str	r0, [r7, #4]
 8103ace:	6039      	str	r1, [r7, #0]
      { return __hash_code_base::_M_bucket_index(__n, _M_bucket_count); }
 8103ad0:	687b      	ldr	r3, [r7, #4]
 8103ad2:	685b      	ldr	r3, [r3, #4]
 8103ad4:	461a      	mov	r2, r3
 8103ad6:	6839      	ldr	r1, [r7, #0]
 8103ad8:	6878      	ldr	r0, [r7, #4]
 8103ada:	f000 f98f 	bl	8103dfc <_ZNKSt8__detail15_Hash_code_baseIN7APIDoIP12EDoIPRequestESt4pairIKS2_PKcENS_10_Select1stESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE15_M_bucket_indexERKNS_16_Hash_node_valueIS7_Lb0EEEj>
 8103ade:	4603      	mov	r3, r0
 8103ae0:	4618      	mov	r0, r3
 8103ae2:	3708      	adds	r7, #8
 8103ae4:	46bd      	mov	sp, r7
 8103ae6:	bd80      	pop	{r7, pc}

08103ae8 <_ZSt7forwardIRKPKcEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8103ae8:	b480      	push	{r7}
 8103aea:	b083      	sub	sp, #12
 8103aec:	af00      	add	r7, sp, #0
 8103aee:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8103af0:	687b      	ldr	r3, [r7, #4]
 8103af2:	4618      	mov	r0, r3
 8103af4:	370c      	adds	r7, #12
 8103af6:	46bd      	mov	sp, r7
 8103af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103afc:	4770      	bx	lr

08103afe <_ZNSt8__detail10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestEPKcELb0EEC1Ev>:
    struct _Hash_node
 8103afe:	b580      	push	{r7, lr}
 8103b00:	b082      	sub	sp, #8
 8103b02:	af00      	add	r7, sp, #0
 8103b04:	6078      	str	r0, [r7, #4]
 8103b06:	687b      	ldr	r3, [r7, #4]
 8103b08:	4618      	mov	r0, r3
 8103b0a:	f7fd fc19 	bl	8101340 <_ZNSt8__detail15_Hash_node_baseC1Ev>
 8103b0e:	687b      	ldr	r3, [r7, #4]
 8103b10:	4618      	mov	r0, r3
 8103b12:	3708      	adds	r7, #8
 8103b14:	46bd      	mov	sp, r7
 8103b16:	bd80      	pop	{r7, pc}

08103b18 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestEPKcELb0EEEEE16_M_allocate_nodeIJRS5_RKS7_EEEPS9_DpOT_>:
      _Hashtable_alloc<_NodeAlloc>::_M_allocate_node(_Args&&... __args)
 8103b18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8103b1a:	b087      	sub	sp, #28
 8103b1c:	af00      	add	r7, sp, #0
 8103b1e:	60f8      	str	r0, [r7, #12]
 8103b20:	60b9      	str	r1, [r7, #8]
 8103b22:	607a      	str	r2, [r7, #4]
	auto __nptr = __node_alloc_traits::allocate(_M_node_allocator(), 1);
 8103b24:	68f8      	ldr	r0, [r7, #12]
 8103b26:	f7fe fe78 	bl	810281a <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestEPKcELb0EEEEE17_M_node_allocatorEv>
 8103b2a:	4603      	mov	r3, r0
 8103b2c:	2101      	movs	r1, #1
 8103b2e:	4618      	mov	r0, r3
 8103b30:	f000 f986 	bl	8103e40 <_ZNSt16allocator_traitsISaINSt8__detail10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestEPKcELb0EEEEE8allocateERSA_j>
 8103b34:	6178      	str	r0, [r7, #20]
	__node_ptr __n = std::__to_address(__nptr);
 8103b36:	6978      	ldr	r0, [r7, #20]
 8103b38:	f000 f9ba 	bl	8103eb0 <_ZSt12__to_addressINSt8__detail10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestEPKcELb0EEEEPT_SB_>
 8103b3c:	6138      	str	r0, [r7, #16]
	    ::new ((void*)__n) __node_type;
 8103b3e:	693b      	ldr	r3, [r7, #16]
 8103b40:	4619      	mov	r1, r3
 8103b42:	200c      	movs	r0, #12
 8103b44:	f7fd fbe2 	bl	810130c <_ZnwjPv>
 8103b48:	4603      	mov	r3, r0
 8103b4a:	4618      	mov	r0, r3
 8103b4c:	f7ff ffd7 	bl	8103afe <_ZNSt8__detail10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestEPKcELb0EEC1Ev>
	    __node_alloc_traits::construct(_M_node_allocator(),
 8103b50:	68f8      	ldr	r0, [r7, #12]
 8103b52:	f7fe fe62 	bl	810281a <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestEPKcELb0EEEEE17_M_node_allocatorEv>
 8103b56:	4604      	mov	r4, r0
 8103b58:	693b      	ldr	r3, [r7, #16]
 8103b5a:	3304      	adds	r3, #4
 8103b5c:	4618      	mov	r0, r3
 8103b5e:	f7fe fe68 	bl	8102832 <_ZNSt8__detail21_Hash_node_value_baseISt4pairIKN7APIDoIP12EDoIPRequestEPKcEE9_M_valptrEv>
 8103b62:	4605      	mov	r5, r0
 8103b64:	68b8      	ldr	r0, [r7, #8]
 8103b66:	f7ff f815 	bl	8102b94 <_ZSt7forwardIRKN7APIDoIP12EDoIPRequestEEOT_RNSt16remove_referenceIS4_E4typeE>
 8103b6a:	4606      	mov	r6, r0
 8103b6c:	6878      	ldr	r0, [r7, #4]
 8103b6e:	f7ff ffbb 	bl	8103ae8 <_ZSt7forwardIRKPKcEOT_RNSt16remove_referenceIS4_E4typeE>
 8103b72:	4603      	mov	r3, r0
 8103b74:	4632      	mov	r2, r6
 8103b76:	4629      	mov	r1, r5
 8103b78:	4620      	mov	r0, r4
 8103b7a:	f000 f9a4 	bl	8103ec6 <_ZNSt16allocator_traitsISaINSt8__detail10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestEPKcELb0EEEEE9constructIS8_JRS5_RKS7_EEEvRSA_PT_DpOT0_>
	    return __n;
 8103b7e:	693b      	ldr	r3, [r7, #16]
      }
 8103b80:	4618      	mov	r0, r3
 8103b82:	371c      	adds	r7, #28
 8103b84:	46bd      	mov	sp, r7
 8103b86:	bdf0      	pop	{r4, r5, r6, r7, pc}

08103b88 <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_PKcESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE13_M_rehash_auxEjSt17integral_constantIbLb1EE>:
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
 8103b88:	b580      	push	{r7, lr}
 8103b8a:	b08a      	sub	sp, #40	@ 0x28
 8103b8c:	af00      	add	r7, sp, #0
 8103b8e:	60f8      	str	r0, [r7, #12]
 8103b90:	60b9      	str	r1, [r7, #8]
 8103b92:	713a      	strb	r2, [r7, #4]
      __buckets_ptr __new_buckets = _M_allocate_buckets(__bkt_count);
 8103b94:	68b9      	ldr	r1, [r7, #8]
 8103b96:	68f8      	ldr	r0, [r7, #12]
 8103b98:	f7fe fa8f 	bl	81020ba <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_PKcESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_allocate_bucketsEj>
 8103b9c:	61f8      	str	r0, [r7, #28]
      __node_ptr __p = _M_begin();
 8103b9e:	68f8      	ldr	r0, [r7, #12]
 8103ba0:	f7fe f910 	bl	8101dc4 <_ZNKSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_PKcESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE8_M_beginEv>
 8103ba4:	6278      	str	r0, [r7, #36]	@ 0x24
      _M_before_begin._M_nxt = nullptr;
 8103ba6:	68fb      	ldr	r3, [r7, #12]
 8103ba8:	2200      	movs	r2, #0
 8103baa:	609a      	str	r2, [r3, #8]
      std::size_t __bbegin_bkt = 0;
 8103bac:	2300      	movs	r3, #0
 8103bae:	623b      	str	r3, [r7, #32]
      while (__p)
 8103bb0:	e03e      	b.n	8103c30 <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_PKcESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE13_M_rehash_auxEjSt17integral_constantIbLb1EE+0xa8>
	  __node_ptr __next = __p->_M_next();
 8103bb2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8103bb4:	f7fe fadf 	bl	8102176 <_ZNKSt8__detail10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestEPKcELb0EE7_M_nextEv>
 8103bb8:	61b8      	str	r0, [r7, #24]
	    = __hash_code_base::_M_bucket_index(*__p, __bkt_count);
 8103bba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8103bbc:	3304      	adds	r3, #4
 8103bbe:	68ba      	ldr	r2, [r7, #8]
 8103bc0:	4619      	mov	r1, r3
 8103bc2:	68f8      	ldr	r0, [r7, #12]
 8103bc4:	f000 f91a 	bl	8103dfc <_ZNKSt8__detail15_Hash_code_baseIN7APIDoIP12EDoIPRequestESt4pairIKS2_PKcENS_10_Select1stESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE15_M_bucket_indexERKNS_16_Hash_node_valueIS7_Lb0EEEj>
 8103bc8:	6178      	str	r0, [r7, #20]
	  if (!__new_buckets[__bkt])
 8103bca:	697b      	ldr	r3, [r7, #20]
 8103bcc:	009b      	lsls	r3, r3, #2
 8103bce:	69fa      	ldr	r2, [r7, #28]
 8103bd0:	4413      	add	r3, r2
 8103bd2:	681b      	ldr	r3, [r3, #0]
 8103bd4:	2b00      	cmp	r3, #0
 8103bd6:	d11a      	bne.n	8103c0e <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_PKcESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE13_M_rehash_auxEjSt17integral_constantIbLb1EE+0x86>
	      __p->_M_nxt = _M_before_begin._M_nxt;
 8103bd8:	68fb      	ldr	r3, [r7, #12]
 8103bda:	689a      	ldr	r2, [r3, #8]
 8103bdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8103bde:	601a      	str	r2, [r3, #0]
	      _M_before_begin._M_nxt = __p;
 8103be0:	68fb      	ldr	r3, [r7, #12]
 8103be2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8103be4:	609a      	str	r2, [r3, #8]
	      __new_buckets[__bkt] = &_M_before_begin;
 8103be6:	697b      	ldr	r3, [r7, #20]
 8103be8:	009b      	lsls	r3, r3, #2
 8103bea:	69fa      	ldr	r2, [r7, #28]
 8103bec:	4413      	add	r3, r2
 8103bee:	68fa      	ldr	r2, [r7, #12]
 8103bf0:	3208      	adds	r2, #8
 8103bf2:	601a      	str	r2, [r3, #0]
	      if (__p->_M_nxt)
 8103bf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8103bf6:	681b      	ldr	r3, [r3, #0]
 8103bf8:	2b00      	cmp	r3, #0
 8103bfa:	d005      	beq.n	8103c08 <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_PKcESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE13_M_rehash_auxEjSt17integral_constantIbLb1EE+0x80>
		__new_buckets[__bbegin_bkt] = __p;
 8103bfc:	6a3b      	ldr	r3, [r7, #32]
 8103bfe:	009b      	lsls	r3, r3, #2
 8103c00:	69fa      	ldr	r2, [r7, #28]
 8103c02:	4413      	add	r3, r2
 8103c04:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8103c06:	601a      	str	r2, [r3, #0]
	      __bbegin_bkt = __bkt;
 8103c08:	697b      	ldr	r3, [r7, #20]
 8103c0a:	623b      	str	r3, [r7, #32]
 8103c0c:	e00e      	b.n	8103c2c <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_PKcESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE13_M_rehash_auxEjSt17integral_constantIbLb1EE+0xa4>
	      __p->_M_nxt = __new_buckets[__bkt]->_M_nxt;
 8103c0e:	697b      	ldr	r3, [r7, #20]
 8103c10:	009b      	lsls	r3, r3, #2
 8103c12:	69fa      	ldr	r2, [r7, #28]
 8103c14:	4413      	add	r3, r2
 8103c16:	681b      	ldr	r3, [r3, #0]
 8103c18:	681a      	ldr	r2, [r3, #0]
 8103c1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8103c1c:	601a      	str	r2, [r3, #0]
	      __new_buckets[__bkt]->_M_nxt = __p;
 8103c1e:	697b      	ldr	r3, [r7, #20]
 8103c20:	009b      	lsls	r3, r3, #2
 8103c22:	69fa      	ldr	r2, [r7, #28]
 8103c24:	4413      	add	r3, r2
 8103c26:	681b      	ldr	r3, [r3, #0]
 8103c28:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8103c2a:	601a      	str	r2, [r3, #0]
	  __p = __next;
 8103c2c:	69bb      	ldr	r3, [r7, #24]
 8103c2e:	627b      	str	r3, [r7, #36]	@ 0x24
      while (__p)
 8103c30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8103c32:	2b00      	cmp	r3, #0
 8103c34:	d1bd      	bne.n	8103bb2 <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_PKcESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE13_M_rehash_auxEjSt17integral_constantIbLb1EE+0x2a>
      _M_deallocate_buckets();
 8103c36:	68f8      	ldr	r0, [r7, #12]
 8103c38:	f7fd ffd5 	bl	8101be6 <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_PKcESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_deallocate_bucketsEv>
      _M_bucket_count = __bkt_count;
 8103c3c:	68fb      	ldr	r3, [r7, #12]
 8103c3e:	68ba      	ldr	r2, [r7, #8]
 8103c40:	605a      	str	r2, [r3, #4]
      _M_buckets = __new_buckets;
 8103c42:	68fb      	ldr	r3, [r7, #12]
 8103c44:	69fa      	ldr	r2, [r7, #28]
 8103c46:	601a      	str	r2, [r3, #0]
    }
 8103c48:	bf00      	nop
 8103c4a:	3728      	adds	r7, #40	@ 0x28
 8103c4c:	46bd      	mov	sp, r7
 8103c4e:	bd80      	pop	{r7, pc}

08103c50 <_ZSt11__addressofINSt8__detail10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestEPKcELb0EEEEPT_RSA_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8103c50:	b480      	push	{r7}
 8103c52:	b083      	sub	sp, #12
 8103c54:	af00      	add	r7, sp, #0
 8103c56:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8103c58:	687b      	ldr	r3, [r7, #4]
 8103c5a:	4618      	mov	r0, r3
 8103c5c:	370c      	adds	r7, #12
 8103c5e:	46bd      	mov	sp, r7
 8103c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103c64:	4770      	bx	lr

08103c66 <_ZNSt15__new_allocatorINSt8__detail10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestEPKcELb0EEEE10deallocateEPS9_j>:
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
 8103c66:	b580      	push	{r7, lr}
 8103c68:	b084      	sub	sp, #16
 8103c6a:	af00      	add	r7, sp, #0
 8103c6c:	60f8      	str	r0, [r7, #12]
 8103c6e:	60b9      	str	r1, [r7, #8]
 8103c70:	607a      	str	r2, [r7, #4]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 8103c72:	687a      	ldr	r2, [r7, #4]
 8103c74:	4613      	mov	r3, r2
 8103c76:	005b      	lsls	r3, r3, #1
 8103c78:	4413      	add	r3, r2
 8103c7a:	009b      	lsls	r3, r3, #2
 8103c7c:	4619      	mov	r1, r3
 8103c7e:	68b8      	ldr	r0, [r7, #8]
 8103c80:	f021 fe82 	bl	8125988 <_ZdlPvj>
      }
 8103c84:	3710      	adds	r7, #16
 8103c86:	46bd      	mov	sp, r7
 8103c88:	bd80      	pop	{r7, pc}

08103c8a <_ZNKSt15__new_allocatorIPNSt8__detail15_Hash_node_baseEE11_M_max_sizeEv>:
	{ return false; }
#endif

    private:
      _GLIBCXX_CONSTEXPR size_type
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8103c8a:	b480      	push	{r7}
 8103c8c:	b083      	sub	sp, #12
 8103c8e:	af00      	add	r7, sp, #0
 8103c90:	6078      	str	r0, [r7, #4]
      {
#if __PTRDIFF_MAX__ < __SIZE_MAX__
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8103c92:	f06f 4360 	mvn.w	r3, #3758096384	@ 0xe0000000
#else
	return std::size_t(-1) / sizeof(_Tp);
#endif
      }
 8103c96:	4618      	mov	r0, r3
 8103c98:	370c      	adds	r7, #12
 8103c9a:	46bd      	mov	sp, r7
 8103c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103ca0:	4770      	bx	lr

08103ca2 <_ZNK9__gnu_cxx16__aligned_bufferISt4pairIKN7APIDoIP12EDoIPRequestES1_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEEE6_M_ptrEv>:

      const _Tp*
      _M_ptr() const noexcept
 8103ca2:	b580      	push	{r7, lr}
 8103ca4:	b082      	sub	sp, #8
 8103ca6:	af00      	add	r7, sp, #0
 8103ca8:	6078      	str	r0, [r7, #4]
      { return static_cast<const _Tp*>(_M_addr()); }
 8103caa:	6878      	ldr	r0, [r7, #4]
 8103cac:	f000 f923 	bl	8103ef6 <_ZNK9__gnu_cxx16__aligned_bufferISt4pairIKN7APIDoIP12EDoIPRequestES1_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEEE7_M_addrEv>
 8103cb0:	4603      	mov	r3, r0
 8103cb2:	4618      	mov	r0, r3
 8103cb4:	3708      	adds	r7, #8
 8103cb6:	46bd      	mov	sp, r7
 8103cb8:	bd80      	pop	{r7, pc}

08103cba <_ZNSt8__detail15_Hashtable_baseIN7APIDoIP12EDoIPRequestESt4pairIKS2_S3_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEENS_10_Select1stESt8equal_toIS2_ESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEE9_S_equalsEjRKNS_21_Hash_node_code_cacheILb0EEE>:
      _S_equals(__hash_code, const _Hash_node_code_cache<false>&)
 8103cba:	b480      	push	{r7}
 8103cbc:	b083      	sub	sp, #12
 8103cbe:	af00      	add	r7, sp, #0
 8103cc0:	6078      	str	r0, [r7, #4]
 8103cc2:	6039      	str	r1, [r7, #0]
      { return true; }
 8103cc4:	2301      	movs	r3, #1
 8103cc6:	4618      	mov	r0, r3
 8103cc8:	370c      	adds	r7, #12
 8103cca:	46bd      	mov	sp, r7
 8103ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103cd0:	4770      	bx	lr

08103cd2 <_ZNKSt8__detail15_Hash_code_baseIN7APIDoIP12EDoIPRequestESt4pairIKS2_S3_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEENS_10_Select1stESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE15_M_bucket_indexERKNS_16_Hash_node_valueISB_Lb0EEEj>:
      _M_bucket_index(const _Hash_node_value<_Value, false>& __n,
 8103cd2:	b580      	push	{r7, lr}
 8103cd4:	b086      	sub	sp, #24
 8103cd6:	af00      	add	r7, sp, #0
 8103cd8:	60f8      	str	r0, [r7, #12]
 8103cda:	60b9      	str	r1, [r7, #8]
 8103cdc:	607a      	str	r2, [r7, #4]
	return _RangeHash{}(_M_hash_code(_ExtractKey{}(__n._M_v())),
 8103cde:	68bb      	ldr	r3, [r7, #8]
 8103ce0:	4618      	mov	r0, r3
 8103ce2:	f7ff fa9b 	bl	810321c <_ZNKSt8__detail21_Hash_node_value_baseISt4pairIKN7APIDoIP12EDoIPRequestES1_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEEE4_M_vEv>
 8103ce6:	4602      	mov	r2, r0
 8103ce8:	f107 0314 	add.w	r3, r7, #20
 8103cec:	4611      	mov	r1, r2
 8103cee:	4618      	mov	r0, r3
 8103cf0:	f7fe fb19 	bl	8102326 <_ZNKSt8__detail10_Select1stclIRKSt4pairIKN7APIDoIP12EDoIPRequestES2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEEEEONS0_10__1st_typeIT_E4typeEOSG_>
 8103cf4:	4603      	mov	r3, r0
 8103cf6:	4619      	mov	r1, r3
 8103cf8:	68f8      	ldr	r0, [r7, #12]
 8103cfa:	f000 f907 	bl	8103f0c <_ZNKSt8__detail15_Hash_code_baseIN7APIDoIP12EDoIPRequestESt4pairIKS2_S3_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEENS_10_Select1stESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE12_M_hash_codeERS4_>
 8103cfe:	4601      	mov	r1, r0
 8103d00:	f107 0310 	add.w	r3, r7, #16
 8103d04:	687a      	ldr	r2, [r7, #4]
 8103d06:	4618      	mov	r0, r3
 8103d08:	f7fd fb28 	bl	810135c <_ZNKSt8__detail18_Mod_range_hashingclEjj>
 8103d0c:	4603      	mov	r3, r0
      }
 8103d0e:	4618      	mov	r0, r3
 8103d10:	3718      	adds	r7, #24
 8103d12:	46bd      	mov	sp, r7
 8103d14:	bd80      	pop	{r7, pc}

08103d16 <_ZNSt16allocator_traitsISaINSt8__detail10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEEEE8allocateERSE_j>:
      allocate(allocator_type& __a, size_type __n)
 8103d16:	b5b0      	push	{r4, r5, r7, lr}
 8103d18:	b084      	sub	sp, #16
 8103d1a:	af00      	add	r7, sp, #0
 8103d1c:	6078      	str	r0, [r7, #4]
 8103d1e:	6039      	str	r1, [r7, #0]
 8103d20:	687b      	ldr	r3, [r7, #4]
 8103d22:	60fb      	str	r3, [r7, #12]
 8103d24:	683b      	ldr	r3, [r7, #0]
 8103d26:	60bb      	str	r3, [r7, #8]
	if (std::__is_constant_evaluated())
 8103d28:	f7fd fae8 	bl	81012fc <__is_constant_evaluated>
 8103d2c:	4603      	mov	r3, r0
 8103d2e:	2b00      	cmp	r3, #0
 8103d30:	d01d      	beq.n	8103d6e <_ZNSt16allocator_traitsISaINSt8__detail10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEEEE8allocateERSE_j+0x58>
	    if (__builtin_mul_overflow(__n, sizeof(_Tp), &__n))
 8103d32:	68bb      	ldr	r3, [r7, #8]
 8103d34:	2100      	movs	r1, #0
 8103d36:	2214      	movs	r2, #20
 8103d38:	fba3 4502 	umull	r4, r5, r3, r2
 8103d3c:	f04f 0200 	mov.w	r2, #0
 8103d40:	f04f 0300 	mov.w	r3, #0
 8103d44:	002a      	movs	r2, r5
 8103d46:	2300      	movs	r3, #0
 8103d48:	2a00      	cmp	r2, #0
 8103d4a:	d000      	beq.n	8103d4e <_ZNSt16allocator_traitsISaINSt8__detail10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEEEE8allocateERSE_j+0x38>
 8103d4c:	2101      	movs	r1, #1
 8103d4e:	4623      	mov	r3, r4
 8103d50:	60bb      	str	r3, [r7, #8]
 8103d52:	460b      	mov	r3, r1
 8103d54:	f003 0301 	and.w	r3, r3, #1
 8103d58:	b2db      	uxtb	r3, r3
 8103d5a:	2b00      	cmp	r3, #0
 8103d5c:	d001      	beq.n	8103d62 <_ZNSt16allocator_traitsISaINSt8__detail10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEEEE8allocateERSE_j+0x4c>
	      std::__throw_bad_array_new_length();
 8103d5e:	f021 fef5 	bl	8125b4c <_ZSt28__throw_bad_array_new_lengthv>
	    return static_cast<_Tp*>(::operator new(__n));
 8103d62:	68bb      	ldr	r3, [r7, #8]
 8103d64:	4618      	mov	r0, r3
 8103d66:	f021 fe20 	bl	81259aa <_Znwj>
 8103d6a:	4603      	mov	r3, r0
 8103d6c:	e007      	b.n	8103d7e <_ZNSt16allocator_traitsISaINSt8__detail10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEEEE8allocateERSE_j+0x68>
	return __allocator_base<_Tp>::allocate(__n, 0);
 8103d6e:	68bb      	ldr	r3, [r7, #8]
 8103d70:	2200      	movs	r2, #0
 8103d72:	4619      	mov	r1, r3
 8103d74:	68f8      	ldr	r0, [r7, #12]
 8103d76:	f000 f93b 	bl	8103ff0 <_ZNSt15__new_allocatorINSt8__detail10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEEE8allocateEjPKv>
 8103d7a:	4603      	mov	r3, r0
 8103d7c:	bf00      	nop
      { return __a.allocate(__n); }
 8103d7e:	4618      	mov	r0, r3
 8103d80:	3710      	adds	r7, #16
 8103d82:	46bd      	mov	sp, r7
 8103d84:	bdb0      	pop	{r4, r5, r7, pc}

08103d86 <_ZSt12__to_addressINSt8__detail10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEEEPT_SF_>:
    __to_address(_Tp* __ptr) noexcept
 8103d86:	b480      	push	{r7}
 8103d88:	b083      	sub	sp, #12
 8103d8a:	af00      	add	r7, sp, #0
 8103d8c:	6078      	str	r0, [r7, #4]
      return __ptr;
 8103d8e:	687b      	ldr	r3, [r7, #4]
    }
 8103d90:	4618      	mov	r0, r3
 8103d92:	370c      	adds	r7, #12
 8103d94:	46bd      	mov	sp, r7
 8103d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103d9a:	4770      	bx	lr

08103d9c <_ZNSt16allocator_traitsISaINSt8__detail10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEEEE9constructISC_JRS5_RKSB_EEEvRSE_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8103d9c:	b590      	push	{r4, r7, lr}
 8103d9e:	b085      	sub	sp, #20
 8103da0:	af00      	add	r7, sp, #0
 8103da2:	60f8      	str	r0, [r7, #12]
 8103da4:	60b9      	str	r1, [r7, #8]
 8103da6:	607a      	str	r2, [r7, #4]
 8103da8:	603b      	str	r3, [r7, #0]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 8103daa:	6878      	ldr	r0, [r7, #4]
 8103dac:	f7fe fef2 	bl	8102b94 <_ZSt7forwardIRKN7APIDoIP12EDoIPRequestEEOT_RNSt16remove_referenceIS4_E4typeE>
 8103db0:	4604      	mov	r4, r0
 8103db2:	6838      	ldr	r0, [r7, #0]
 8103db4:	f7ff fd80 	bl	81038b8 <_ZSt7forwardIRKSt4pairISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEEOT_RNSt16remove_referenceIS9_E4typeE>
 8103db8:	4603      	mov	r3, r0
 8103dba:	461a      	mov	r2, r3
 8103dbc:	4621      	mov	r1, r4
 8103dbe:	68b8      	ldr	r0, [r7, #8]
 8103dc0:	f000 f8b9 	bl	8103f36 <_ZSt12construct_atISt4pairIKN7APIDoIP12EDoIPRequestES0_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEEJRS3_RKS9_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPSF_DpOSG_>
	}
 8103dc4:	bf00      	nop
 8103dc6:	3714      	adds	r7, #20
 8103dc8:	46bd      	mov	sp, r7
 8103dca:	bd90      	pop	{r4, r7, pc}

08103dcc <_ZNK9__gnu_cxx16__aligned_bufferISt4pairIKN7APIDoIP12EDoIPRequestEPKcEE6_M_ptrEv>:
      _M_ptr() const noexcept
 8103dcc:	b580      	push	{r7, lr}
 8103dce:	b082      	sub	sp, #8
 8103dd0:	af00      	add	r7, sp, #0
 8103dd2:	6078      	str	r0, [r7, #4]
      { return static_cast<const _Tp*>(_M_addr()); }
 8103dd4:	6878      	ldr	r0, [r7, #4]
 8103dd6:	f000 f8cc 	bl	8103f72 <_ZNK9__gnu_cxx16__aligned_bufferISt4pairIKN7APIDoIP12EDoIPRequestEPKcEE7_M_addrEv>
 8103dda:	4603      	mov	r3, r0
 8103ddc:	4618      	mov	r0, r3
 8103dde:	3708      	adds	r7, #8
 8103de0:	46bd      	mov	sp, r7
 8103de2:	bd80      	pop	{r7, pc}

08103de4 <_ZNSt8__detail15_Hashtable_baseIN7APIDoIP12EDoIPRequestESt4pairIKS2_PKcENS_10_Select1stESt8equal_toIS2_ESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEE9_S_equalsEjRKNS_21_Hash_node_code_cacheILb0EEE>:
      _S_equals(__hash_code, const _Hash_node_code_cache<false>&)
 8103de4:	b480      	push	{r7}
 8103de6:	b083      	sub	sp, #12
 8103de8:	af00      	add	r7, sp, #0
 8103dea:	6078      	str	r0, [r7, #4]
 8103dec:	6039      	str	r1, [r7, #0]
      { return true; }
 8103dee:	2301      	movs	r3, #1
 8103df0:	4618      	mov	r0, r3
 8103df2:	370c      	adds	r7, #12
 8103df4:	46bd      	mov	sp, r7
 8103df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103dfa:	4770      	bx	lr

08103dfc <_ZNKSt8__detail15_Hash_code_baseIN7APIDoIP12EDoIPRequestESt4pairIKS2_PKcENS_10_Select1stESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE15_M_bucket_indexERKNS_16_Hash_node_valueIS7_Lb0EEEj>:
      _M_bucket_index(const _Hash_node_value<_Value, false>& __n,
 8103dfc:	b580      	push	{r7, lr}
 8103dfe:	b086      	sub	sp, #24
 8103e00:	af00      	add	r7, sp, #0
 8103e02:	60f8      	str	r0, [r7, #12]
 8103e04:	60b9      	str	r1, [r7, #8]
 8103e06:	607a      	str	r2, [r7, #4]
	return _RangeHash{}(_M_hash_code(_ExtractKey{}(__n._M_v())),
 8103e08:	68bb      	ldr	r3, [r7, #8]
 8103e0a:	4618      	mov	r0, r3
 8103e0c:	f7ff fb9b 	bl	8103546 <_ZNKSt8__detail21_Hash_node_value_baseISt4pairIKN7APIDoIP12EDoIPRequestEPKcEE4_M_vEv>
 8103e10:	4602      	mov	r2, r0
 8103e12:	f107 0314 	add.w	r3, r7, #20
 8103e16:	4611      	mov	r1, r2
 8103e18:	4618      	mov	r0, r3
 8103e1a:	f7fe fc35 	bl	8102688 <_ZNKSt8__detail10_Select1stclIRKSt4pairIKN7APIDoIP12EDoIPRequestEPKcEEEONS0_10__1st_typeIT_E4typeEOSC_>
 8103e1e:	4603      	mov	r3, r0
 8103e20:	4619      	mov	r1, r3
 8103e22:	68f8      	ldr	r0, [r7, #12]
 8103e24:	f000 f8b0 	bl	8103f88 <_ZNKSt8__detail15_Hash_code_baseIN7APIDoIP12EDoIPRequestESt4pairIKS2_PKcENS_10_Select1stESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE12_M_hash_codeERS4_>
 8103e28:	4601      	mov	r1, r0
 8103e2a:	f107 0310 	add.w	r3, r7, #16
 8103e2e:	687a      	ldr	r2, [r7, #4]
 8103e30:	4618      	mov	r0, r3
 8103e32:	f7fd fa93 	bl	810135c <_ZNKSt8__detail18_Mod_range_hashingclEjj>
 8103e36:	4603      	mov	r3, r0
      }
 8103e38:	4618      	mov	r0, r3
 8103e3a:	3718      	adds	r7, #24
 8103e3c:	46bd      	mov	sp, r7
 8103e3e:	bd80      	pop	{r7, pc}

08103e40 <_ZNSt16allocator_traitsISaINSt8__detail10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestEPKcELb0EEEEE8allocateERSA_j>:
      allocate(allocator_type& __a, size_type __n)
 8103e40:	b5b0      	push	{r4, r5, r7, lr}
 8103e42:	b084      	sub	sp, #16
 8103e44:	af00      	add	r7, sp, #0
 8103e46:	6078      	str	r0, [r7, #4]
 8103e48:	6039      	str	r1, [r7, #0]
 8103e4a:	687b      	ldr	r3, [r7, #4]
 8103e4c:	60fb      	str	r3, [r7, #12]
 8103e4e:	683b      	ldr	r3, [r7, #0]
 8103e50:	60bb      	str	r3, [r7, #8]
	if (std::__is_constant_evaluated())
 8103e52:	f7fd fa53 	bl	81012fc <__is_constant_evaluated>
 8103e56:	4603      	mov	r3, r0
 8103e58:	2b00      	cmp	r3, #0
 8103e5a:	d01d      	beq.n	8103e98 <_ZNSt16allocator_traitsISaINSt8__detail10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestEPKcELb0EEEEE8allocateERSA_j+0x58>
	    if (__builtin_mul_overflow(__n, sizeof(_Tp), &__n))
 8103e5c:	68bb      	ldr	r3, [r7, #8]
 8103e5e:	2100      	movs	r1, #0
 8103e60:	220c      	movs	r2, #12
 8103e62:	fba3 4502 	umull	r4, r5, r3, r2
 8103e66:	f04f 0200 	mov.w	r2, #0
 8103e6a:	f04f 0300 	mov.w	r3, #0
 8103e6e:	002a      	movs	r2, r5
 8103e70:	2300      	movs	r3, #0
 8103e72:	2a00      	cmp	r2, #0
 8103e74:	d000      	beq.n	8103e78 <_ZNSt16allocator_traitsISaINSt8__detail10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestEPKcELb0EEEEE8allocateERSA_j+0x38>
 8103e76:	2101      	movs	r1, #1
 8103e78:	4623      	mov	r3, r4
 8103e7a:	60bb      	str	r3, [r7, #8]
 8103e7c:	460b      	mov	r3, r1
 8103e7e:	f003 0301 	and.w	r3, r3, #1
 8103e82:	b2db      	uxtb	r3, r3
 8103e84:	2b00      	cmp	r3, #0
 8103e86:	d001      	beq.n	8103e8c <_ZNSt16allocator_traitsISaINSt8__detail10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestEPKcELb0EEEEE8allocateERSA_j+0x4c>
	      std::__throw_bad_array_new_length();
 8103e88:	f021 fe60 	bl	8125b4c <_ZSt28__throw_bad_array_new_lengthv>
	    return static_cast<_Tp*>(::operator new(__n));
 8103e8c:	68bb      	ldr	r3, [r7, #8]
 8103e8e:	4618      	mov	r0, r3
 8103e90:	f021 fd8b 	bl	81259aa <_Znwj>
 8103e94:	4603      	mov	r3, r0
 8103e96:	e007      	b.n	8103ea8 <_ZNSt16allocator_traitsISaINSt8__detail10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestEPKcELb0EEEEE8allocateERSA_j+0x68>
	return __allocator_base<_Tp>::allocate(__n, 0);
 8103e98:	68bb      	ldr	r3, [r7, #8]
 8103e9a:	2200      	movs	r2, #0
 8103e9c:	4619      	mov	r1, r3
 8103e9e:	68f8      	ldr	r0, [r7, #12]
 8103ea0:	f000 f8d6 	bl	8104050 <_ZNSt15__new_allocatorINSt8__detail10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestEPKcELb0EEEE8allocateEjPKv>
 8103ea4:	4603      	mov	r3, r0
 8103ea6:	bf00      	nop
      { return __a.allocate(__n); }
 8103ea8:	4618      	mov	r0, r3
 8103eaa:	3710      	adds	r7, #16
 8103eac:	46bd      	mov	sp, r7
 8103eae:	bdb0      	pop	{r4, r5, r7, pc}

08103eb0 <_ZSt12__to_addressINSt8__detail10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestEPKcELb0EEEEPT_SB_>:
    __to_address(_Tp* __ptr) noexcept
 8103eb0:	b480      	push	{r7}
 8103eb2:	b083      	sub	sp, #12
 8103eb4:	af00      	add	r7, sp, #0
 8103eb6:	6078      	str	r0, [r7, #4]
      return __ptr;
 8103eb8:	687b      	ldr	r3, [r7, #4]
    }
 8103eba:	4618      	mov	r0, r3
 8103ebc:	370c      	adds	r7, #12
 8103ebe:	46bd      	mov	sp, r7
 8103ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103ec4:	4770      	bx	lr

08103ec6 <_ZNSt16allocator_traitsISaINSt8__detail10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestEPKcELb0EEEEE9constructIS8_JRS5_RKS7_EEEvRSA_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8103ec6:	b590      	push	{r4, r7, lr}
 8103ec8:	b085      	sub	sp, #20
 8103eca:	af00      	add	r7, sp, #0
 8103ecc:	60f8      	str	r0, [r7, #12]
 8103ece:	60b9      	str	r1, [r7, #8]
 8103ed0:	607a      	str	r2, [r7, #4]
 8103ed2:	603b      	str	r3, [r7, #0]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 8103ed4:	6878      	ldr	r0, [r7, #4]
 8103ed6:	f7fe fe5d 	bl	8102b94 <_ZSt7forwardIRKN7APIDoIP12EDoIPRequestEEOT_RNSt16remove_referenceIS4_E4typeE>
 8103eda:	4604      	mov	r4, r0
 8103edc:	6838      	ldr	r0, [r7, #0]
 8103ede:	f7ff fe03 	bl	8103ae8 <_ZSt7forwardIRKPKcEOT_RNSt16remove_referenceIS4_E4typeE>
 8103ee2:	4603      	mov	r3, r0
 8103ee4:	461a      	mov	r2, r3
 8103ee6:	4621      	mov	r1, r4
 8103ee8:	68b8      	ldr	r0, [r7, #8]
 8103eea:	f000 f862 	bl	8103fb2 <_ZSt12construct_atISt4pairIKN7APIDoIP12EDoIPRequestEPKcEJRS3_RKS5_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPSB_DpOSC_>
	}
 8103eee:	bf00      	nop
 8103ef0:	3714      	adds	r7, #20
 8103ef2:	46bd      	mov	sp, r7
 8103ef4:	bd90      	pop	{r4, r7, pc}

08103ef6 <_ZNK9__gnu_cxx16__aligned_bufferISt4pairIKN7APIDoIP12EDoIPRequestES1_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEEE7_M_addrEv>:
      _M_addr() const noexcept
 8103ef6:	b480      	push	{r7}
 8103ef8:	b083      	sub	sp, #12
 8103efa:	af00      	add	r7, sp, #0
 8103efc:	6078      	str	r0, [r7, #4]
        return static_cast<const void*>(&_M_storage);
 8103efe:	687b      	ldr	r3, [r7, #4]
      }
 8103f00:	4618      	mov	r0, r3
 8103f02:	370c      	adds	r7, #12
 8103f04:	46bd      	mov	sp, r7
 8103f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103f0a:	4770      	bx	lr

08103f0c <_ZNKSt8__detail15_Hash_code_baseIN7APIDoIP12EDoIPRequestESt4pairIKS2_S3_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEENS_10_Select1stESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE12_M_hash_codeERS4_>:
      _M_hash_code(const _Key& __k) const
 8103f0c:	b580      	push	{r7, lr}
 8103f0e:	b082      	sub	sp, #8
 8103f10:	af00      	add	r7, sp, #0
 8103f12:	6078      	str	r0, [r7, #4]
 8103f14:	6039      	str	r1, [r7, #0]
	return _M_hash()(__k);
 8103f16:	6878      	ldr	r0, [r7, #4]
 8103f18:	f7ff f9ae 	bl	8103278 <_ZNKSt8__detail15_Hash_code_baseIN7APIDoIP12EDoIPRequestESt4pairIKS2_S3_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEENS_10_Select1stESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE7_M_hashEv>
 8103f1c:	4602      	mov	r2, r0
 8103f1e:	683b      	ldr	r3, [r7, #0]
 8103f20:	f993 3000 	ldrsb.w	r3, [r3]
 8103f24:	4619      	mov	r1, r3
 8103f26:	4610      	mov	r0, r2
 8103f28:	f7ff f9b2 	bl	8103290 <_ZNKSt11__hash_enumIN7APIDoIP12EDoIPRequestELb1EEclES1_>
 8103f2c:	4603      	mov	r3, r0
      }
 8103f2e:	4618      	mov	r0, r3
 8103f30:	3708      	adds	r7, #8
 8103f32:	46bd      	mov	sp, r7
 8103f34:	bd80      	pop	{r7, pc}

08103f36 <_ZSt12construct_atISt4pairIKN7APIDoIP12EDoIPRequestES0_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEEJRS3_RKS9_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPSF_DpOSG_>:

#if __cplusplus >= 202002L
  template<typename _Tp, typename... _Args>
    constexpr auto
    construct_at(_Tp* __location, _Args&&... __args)
 8103f36:	b5b0      	push	{r4, r5, r7, lr}
 8103f38:	b084      	sub	sp, #16
 8103f3a:	af00      	add	r7, sp, #0
 8103f3c:	60f8      	str	r0, [r7, #12]
 8103f3e:	60b9      	str	r1, [r7, #8]
 8103f40:	607a      	str	r2, [r7, #4]
    noexcept(noexcept(::new((void*)0) _Tp(std::declval<_Args>()...)))
    -> decltype(::new((void*)0) _Tp(std::declval<_Args>()...))
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 8103f42:	68fb      	ldr	r3, [r7, #12]
 8103f44:	4619      	mov	r1, r3
 8103f46:	2010      	movs	r0, #16
 8103f48:	f7fd f9e0 	bl	810130c <_ZnwjPv>
 8103f4c:	4604      	mov	r4, r0
 8103f4e:	68b8      	ldr	r0, [r7, #8]
 8103f50:	f7fe fe20 	bl	8102b94 <_ZSt7forwardIRKN7APIDoIP12EDoIPRequestEEOT_RNSt16remove_referenceIS4_E4typeE>
 8103f54:	4605      	mov	r5, r0
 8103f56:	6878      	ldr	r0, [r7, #4]
 8103f58:	f7ff fcae 	bl	81038b8 <_ZSt7forwardIRKSt4pairISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEEOT_RNSt16remove_referenceIS9_E4typeE>
 8103f5c:	4603      	mov	r3, r0
 8103f5e:	461a      	mov	r2, r3
 8103f60:	4629      	mov	r1, r5
 8103f62:	4620      	mov	r0, r4
 8103f64:	f7fd fa2d 	bl	81013c2 <_ZNSt4pairIKN7APIDoIP12EDoIPRequestES_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEEC1ERS2_RKS8_>
 8103f68:	4623      	mov	r3, r4
 8103f6a:	4618      	mov	r0, r3
 8103f6c:	3710      	adds	r7, #16
 8103f6e:	46bd      	mov	sp, r7
 8103f70:	bdb0      	pop	{r4, r5, r7, pc}

08103f72 <_ZNK9__gnu_cxx16__aligned_bufferISt4pairIKN7APIDoIP12EDoIPRequestEPKcEE7_M_addrEv>:
      _M_addr() const noexcept
 8103f72:	b480      	push	{r7}
 8103f74:	b083      	sub	sp, #12
 8103f76:	af00      	add	r7, sp, #0
 8103f78:	6078      	str	r0, [r7, #4]
        return static_cast<const void*>(&_M_storage);
 8103f7a:	687b      	ldr	r3, [r7, #4]
      }
 8103f7c:	4618      	mov	r0, r3
 8103f7e:	370c      	adds	r7, #12
 8103f80:	46bd      	mov	sp, r7
 8103f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103f86:	4770      	bx	lr

08103f88 <_ZNKSt8__detail15_Hash_code_baseIN7APIDoIP12EDoIPRequestESt4pairIKS2_PKcENS_10_Select1stESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE12_M_hash_codeERS4_>:
      _M_hash_code(const _Key& __k) const
 8103f88:	b580      	push	{r7, lr}
 8103f8a:	b082      	sub	sp, #8
 8103f8c:	af00      	add	r7, sp, #0
 8103f8e:	6078      	str	r0, [r7, #4]
 8103f90:	6039      	str	r1, [r7, #0]
	return _M_hash()(__k);
 8103f92:	6878      	ldr	r0, [r7, #4]
 8103f94:	f7ff faee 	bl	8103574 <_ZNKSt8__detail15_Hash_code_baseIN7APIDoIP12EDoIPRequestESt4pairIKS2_PKcENS_10_Select1stESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE7_M_hashEv>
 8103f98:	4602      	mov	r2, r0
 8103f9a:	683b      	ldr	r3, [r7, #0]
 8103f9c:	f993 3000 	ldrsb.w	r3, [r3]
 8103fa0:	4619      	mov	r1, r3
 8103fa2:	4610      	mov	r0, r2
 8103fa4:	f7ff f974 	bl	8103290 <_ZNKSt11__hash_enumIN7APIDoIP12EDoIPRequestELb1EEclES1_>
 8103fa8:	4603      	mov	r3, r0
      }
 8103faa:	4618      	mov	r0, r3
 8103fac:	3708      	adds	r7, #8
 8103fae:	46bd      	mov	sp, r7
 8103fb0:	bd80      	pop	{r7, pc}

08103fb2 <_ZSt12construct_atISt4pairIKN7APIDoIP12EDoIPRequestEPKcEJRS3_RKS5_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPSB_DpOSC_>:
    construct_at(_Tp* __location, _Args&&... __args)
 8103fb2:	b5b0      	push	{r4, r5, r7, lr}
 8103fb4:	b084      	sub	sp, #16
 8103fb6:	af00      	add	r7, sp, #0
 8103fb8:	60f8      	str	r0, [r7, #12]
 8103fba:	60b9      	str	r1, [r7, #8]
 8103fbc:	607a      	str	r2, [r7, #4]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 8103fbe:	68fb      	ldr	r3, [r7, #12]
 8103fc0:	4619      	mov	r1, r3
 8103fc2:	2008      	movs	r0, #8
 8103fc4:	f7fd f9a2 	bl	810130c <_ZnwjPv>
 8103fc8:	4604      	mov	r4, r0
 8103fca:	68b8      	ldr	r0, [r7, #8]
 8103fcc:	f7fe fde2 	bl	8102b94 <_ZSt7forwardIRKN7APIDoIP12EDoIPRequestEEOT_RNSt16remove_referenceIS4_E4typeE>
 8103fd0:	4605      	mov	r5, r0
 8103fd2:	6878      	ldr	r0, [r7, #4]
 8103fd4:	f7ff fd88 	bl	8103ae8 <_ZSt7forwardIRKPKcEOT_RNSt16remove_referenceIS4_E4typeE>
 8103fd8:	4603      	mov	r3, r0
 8103fda:	461a      	mov	r2, r3
 8103fdc:	4629      	mov	r1, r5
 8103fde:	4620      	mov	r0, r4
 8103fe0:	f000 f866 	bl	81040b0 <_ZNSt4pairIKN7APIDoIP12EDoIPRequestEPKcEC1ERS2_RKS4_>
 8103fe4:	4623      	mov	r3, r4
 8103fe6:	4618      	mov	r0, r3
 8103fe8:	3710      	adds	r7, #16
 8103fea:	46bd      	mov	sp, r7
 8103fec:	bdb0      	pop	{r4, r5, r7, pc}
	...

08103ff0 <_ZNSt15__new_allocatorINSt8__detail10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8103ff0:	b580      	push	{r7, lr}
 8103ff2:	b084      	sub	sp, #16
 8103ff4:	af00      	add	r7, sp, #0
 8103ff6:	60f8      	str	r0, [r7, #12]
 8103ff8:	60b9      	str	r1, [r7, #8]
 8103ffa:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 8103ffc:	68f8      	ldr	r0, [r7, #12]
 8103ffe:	f000 f86d 	bl	81040dc <_ZNKSt15__new_allocatorINSt8__detail10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEEE11_M_max_sizeEv>
 8104002:	4602      	mov	r2, r0
 8104004:	68bb      	ldr	r3, [r7, #8]
 8104006:	4293      	cmp	r3, r2
 8104008:	bf8c      	ite	hi
 810400a:	2301      	movhi	r3, #1
 810400c:	2300      	movls	r3, #0
 810400e:	b2db      	uxtb	r3, r3
 8104010:	2b00      	cmp	r3, #0
 8104012:	bf14      	ite	ne
 8104014:	2301      	movne	r3, #1
 8104016:	2300      	moveq	r3, #0
 8104018:	b2db      	uxtb	r3, r3
 810401a:	2b00      	cmp	r3, #0
 810401c:	d007      	beq.n	810402e <_ZNSt15__new_allocatorINSt8__detail10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEEE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 810401e:	68bb      	ldr	r3, [r7, #8]
 8104020:	4a0a      	ldr	r2, [pc, #40]	@ (810404c <_ZNSt15__new_allocatorINSt8__detail10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEEE8allocateEjPKv+0x5c>)
 8104022:	4293      	cmp	r3, r2
 8104024:	d901      	bls.n	810402a <_ZNSt15__new_allocatorINSt8__detail10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEEE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 8104026:	f021 fd91 	bl	8125b4c <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 810402a:	f021 fd8c 	bl	8125b46 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 810402e:	68ba      	ldr	r2, [r7, #8]
 8104030:	4613      	mov	r3, r2
 8104032:	009b      	lsls	r3, r3, #2
 8104034:	4413      	add	r3, r2
 8104036:	009b      	lsls	r3, r3, #2
 8104038:	4618      	mov	r0, r3
 810403a:	f021 fcb6 	bl	81259aa <_Znwj>
 810403e:	4603      	mov	r3, r0
 8104040:	bf00      	nop
      }
 8104042:	4618      	mov	r0, r3
 8104044:	3710      	adds	r7, #16
 8104046:	46bd      	mov	sp, r7
 8104048:	bd80      	pop	{r7, pc}
 810404a:	bf00      	nop
 810404c:	0ccccccc 	.word	0x0ccccccc

08104050 <_ZNSt15__new_allocatorINSt8__detail10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestEPKcELb0EEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8104050:	b580      	push	{r7, lr}
 8104052:	b084      	sub	sp, #16
 8104054:	af00      	add	r7, sp, #0
 8104056:	60f8      	str	r0, [r7, #12]
 8104058:	60b9      	str	r1, [r7, #8]
 810405a:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 810405c:	68f8      	ldr	r0, [r7, #12]
 810405e:	f000 f84b 	bl	81040f8 <_ZNKSt15__new_allocatorINSt8__detail10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestEPKcELb0EEEE11_M_max_sizeEv>
 8104062:	4602      	mov	r2, r0
 8104064:	68bb      	ldr	r3, [r7, #8]
 8104066:	4293      	cmp	r3, r2
 8104068:	bf8c      	ite	hi
 810406a:	2301      	movhi	r3, #1
 810406c:	2300      	movls	r3, #0
 810406e:	b2db      	uxtb	r3, r3
 8104070:	2b00      	cmp	r3, #0
 8104072:	bf14      	ite	ne
 8104074:	2301      	movne	r3, #1
 8104076:	2300      	moveq	r3, #0
 8104078:	b2db      	uxtb	r3, r3
 810407a:	2b00      	cmp	r3, #0
 810407c:	d007      	beq.n	810408e <_ZNSt15__new_allocatorINSt8__detail10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestEPKcELb0EEEE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 810407e:	68bb      	ldr	r3, [r7, #8]
 8104080:	4a0a      	ldr	r2, [pc, #40]	@ (81040ac <_ZNSt15__new_allocatorINSt8__detail10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestEPKcELb0EEEE8allocateEjPKv+0x5c>)
 8104082:	4293      	cmp	r3, r2
 8104084:	d901      	bls.n	810408a <_ZNSt15__new_allocatorINSt8__detail10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestEPKcELb0EEEE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 8104086:	f021 fd61 	bl	8125b4c <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 810408a:	f021 fd5c 	bl	8125b46 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 810408e:	68ba      	ldr	r2, [r7, #8]
 8104090:	4613      	mov	r3, r2
 8104092:	005b      	lsls	r3, r3, #1
 8104094:	4413      	add	r3, r2
 8104096:	009b      	lsls	r3, r3, #2
 8104098:	4618      	mov	r0, r3
 810409a:	f021 fc86 	bl	81259aa <_Znwj>
 810409e:	4603      	mov	r3, r0
 81040a0:	bf00      	nop
      }
 81040a2:	4618      	mov	r0, r3
 81040a4:	3710      	adds	r7, #16
 81040a6:	46bd      	mov	sp, r7
 81040a8:	bd80      	pop	{r7, pc}
 81040aa:	bf00      	nop
 81040ac:	15555555 	.word	0x15555555

081040b0 <_ZNSt4pairIKN7APIDoIP12EDoIPRequestEPKcEC1ERS2_RKS4_>:
      pair(const _T1& __x, const _T2& __y)
 81040b0:	b480      	push	{r7}
 81040b2:	b085      	sub	sp, #20
 81040b4:	af00      	add	r7, sp, #0
 81040b6:	60f8      	str	r0, [r7, #12]
 81040b8:	60b9      	str	r1, [r7, #8]
 81040ba:	607a      	str	r2, [r7, #4]
      : first(__x), second(__y)
 81040bc:	68bb      	ldr	r3, [r7, #8]
 81040be:	f993 2000 	ldrsb.w	r2, [r3]
 81040c2:	68fb      	ldr	r3, [r7, #12]
 81040c4:	701a      	strb	r2, [r3, #0]
 81040c6:	687b      	ldr	r3, [r7, #4]
 81040c8:	681a      	ldr	r2, [r3, #0]
 81040ca:	68fb      	ldr	r3, [r7, #12]
 81040cc:	605a      	str	r2, [r3, #4]
      { }
 81040ce:	68fb      	ldr	r3, [r7, #12]
 81040d0:	4618      	mov	r0, r3
 81040d2:	3714      	adds	r7, #20
 81040d4:	46bd      	mov	sp, r7
 81040d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81040da:	4770      	bx	lr

081040dc <_ZNKSt15__new_allocatorINSt8__detail10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 81040dc:	b480      	push	{r7}
 81040de:	b083      	sub	sp, #12
 81040e0:	af00      	add	r7, sp, #0
 81040e2:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 81040e4:	4b03      	ldr	r3, [pc, #12]	@ (81040f4 <_ZNKSt15__new_allocatorINSt8__detail10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEEE11_M_max_sizeEv+0x18>)
      }
 81040e6:	4618      	mov	r0, r3
 81040e8:	370c      	adds	r7, #12
 81040ea:	46bd      	mov	sp, r7
 81040ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 81040f0:	4770      	bx	lr
 81040f2:	bf00      	nop
 81040f4:	06666666 	.word	0x06666666

081040f8 <_ZNKSt15__new_allocatorINSt8__detail10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestEPKcELb0EEEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 81040f8:	b480      	push	{r7}
 81040fa:	b083      	sub	sp, #12
 81040fc:	af00      	add	r7, sp, #0
 81040fe:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8104100:	4b03      	ldr	r3, [pc, #12]	@ (8104110 <_ZNKSt15__new_allocatorINSt8__detail10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestEPKcELb0EEEE11_M_max_sizeEv+0x18>)
      }
 8104102:	4618      	mov	r0, r3
 8104104:	370c      	adds	r7, #12
 8104106:	46bd      	mov	sp, r7
 8104108:	f85d 7b04 	ldr.w	r7, [sp], #4
 810410c:	4770      	bx	lr
 810410e:	bf00      	nop
 8104110:	0aaaaaaa 	.word	0x0aaaaaaa

08104114 <_ZNSt13unordered_mapIN7APIDoIP12EDoIPRequestEPKcSt4hashIS1_ESt8equal_toIS1_ESaISt4pairIKS1_S3_EEED1Ev>:
    class unordered_map
 8104114:	b580      	push	{r7, lr}
 8104116:	b082      	sub	sp, #8
 8104118:	af00      	add	r7, sp, #0
 810411a:	6078      	str	r0, [r7, #4]
 810411c:	687b      	ldr	r3, [r7, #4]
 810411e:	4618      	mov	r0, r3
 8104120:	f7fd fc67 	bl	81019f2 <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_PKcESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEED1Ev>
 8104124:	687b      	ldr	r3, [r7, #4]
 8104126:	4618      	mov	r0, r3
 8104128:	3708      	adds	r7, #8
 810412a:	46bd      	mov	sp, r7
 810412c:	bd80      	pop	{r7, pc}

0810412e <_ZNSt13unordered_mapIN7APIDoIP12EDoIPRequestESt4pairISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressESt4hashIS1_ESt8equal_toIS1_ESaIS2_IKS1_S8_EEED1Ev>:
 810412e:	b580      	push	{r7, lr}
 8104130:	b082      	sub	sp, #8
 8104132:	af00      	add	r7, sp, #0
 8104134:	6078      	str	r0, [r7, #4]
 8104136:	687b      	ldr	r3, [r7, #4]
 8104138:	4618      	mov	r0, r3
 810413a:	f7fd fc01 	bl	8101940 <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEED1Ev>
 810413e:	687b      	ldr	r3, [r7, #4]
 8104140:	4618      	mov	r0, r3
 8104142:	3708      	adds	r7, #8
 8104144:	46bd      	mov	sp, r7
 8104146:	bd80      	pop	{r7, pc}

08104148 <_Z41__static_initialization_and_destruction_0ii>:
    {
    }
    /* USER CODE END Error_Handler_Debug */
}
 8104148:	b580      	push	{r7, lr}
 810414a:	b0ea      	sub	sp, #424	@ 0x1a8
 810414c:	af04      	add	r7, sp, #16
 810414e:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8104152:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8104156:	6018      	str	r0, [r3, #0]
 8104158:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 810415c:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8104160:	6019      	str	r1, [r3, #0]
 8104162:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8104166:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 810416a:	681b      	ldr	r3, [r3, #0]
 810416c:	2b01      	cmp	r3, #1
 810416e:	f040 826d 	bne.w	810464c <_Z41__static_initialization_and_destruction_0ii+0x504>
 8104172:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8104176:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 810417a:	681b      	ldr	r3, [r3, #0]
 810417c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8104180:	4293      	cmp	r3, r2
 8104182:	f040 8263 	bne.w	810464c <_Z41__static_initialization_and_destruction_0ii+0x504>
        
        IHKA_EVAPORATOR_TEMPERATURE_SENSOR = EVENT_DATA_UPDATE_IHKA_EVAPORATOR_TEMPERATURE_SENSOR,
        IHKA_TEMPERATURE_SELECTOR = EVENT_DATA_UPDATE_IHKA_TEMPERATURE_SELECTOR,
    };

    const std::unordered_map<EDoIPRequest, std::pair<std::variant<EUDSDID, EDynamicDataIndentifierRequestCode>, EECUAddress>> dataIdentifierMap =
 8104186:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 810418a:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 810418e:	4618      	mov	r0, r3
 8104190:	23f0      	movs	r3, #240	@ 0xf0
 8104192:	461a      	mov	r2, r3
 8104194:	2100      	movs	r1, #0
 8104196:	f022 fd81 	bl	8126c9c <memset>
 810419a:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 810419e:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 81041a2:	4aec      	ldr	r2, [pc, #944]	@ (8104554 <_Z41__static_initialization_and_destruction_0ii+0x40c>)
 81041a4:	605a      	str	r2, [r3, #4]
 81041a6:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 81041aa:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 81041ae:	2201      	movs	r2, #1
 81041b0:	721a      	strb	r2, [r3, #8]
 81041b2:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 81041b6:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 81041ba:	2212      	movs	r2, #18
 81041bc:	731a      	strb	r2, [r3, #12]
 81041be:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 81041c2:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 81041c6:	2201      	movs	r2, #1
 81041c8:	741a      	strb	r2, [r3, #16]
 81041ca:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 81041ce:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 81041d2:	4ae1      	ldr	r2, [pc, #900]	@ (8104558 <_Z41__static_initialization_and_destruction_0ii+0x410>)
 81041d4:	615a      	str	r2, [r3, #20]
 81041d6:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 81041da:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 81041de:	2201      	movs	r2, #1
 81041e0:	761a      	strb	r2, [r3, #24]
 81041e2:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 81041e6:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 81041ea:	2212      	movs	r2, #18
 81041ec:	771a      	strb	r2, [r3, #28]
 81041ee:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 81041f2:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 81041f6:	2202      	movs	r2, #2
 81041f8:	f883 2020 	strb.w	r2, [r3, #32]
 81041fc:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8104200:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8104204:	4ad5      	ldr	r2, [pc, #852]	@ (810455c <_Z41__static_initialization_and_destruction_0ii+0x414>)
 8104206:	625a      	str	r2, [r3, #36]	@ 0x24
 8104208:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 810420c:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8104210:	2201      	movs	r2, #1
 8104212:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
 8104216:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 810421a:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 810421e:	2212      	movs	r2, #18
 8104220:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
 8104224:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8104228:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 810422c:	2203      	movs	r2, #3
 810422e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
 8104232:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8104236:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 810423a:	4ac9      	ldr	r2, [pc, #804]	@ (8104560 <_Z41__static_initialization_and_destruction_0ii+0x418>)
 810423c:	635a      	str	r2, [r3, #52]	@ 0x34
 810423e:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8104242:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8104246:	2201      	movs	r2, #1
 8104248:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
 810424c:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8104250:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8104254:	2212      	movs	r2, #18
 8104256:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 810425a:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 810425e:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8104262:	2204      	movs	r2, #4
 8104264:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8104268:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 810426c:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8104270:	4abc      	ldr	r2, [pc, #752]	@ (8104564 <_Z41__static_initialization_and_destruction_0ii+0x41c>)
 8104272:	645a      	str	r2, [r3, #68]	@ 0x44
 8104274:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8104278:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 810427c:	2201      	movs	r2, #1
 810427e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
 8104282:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8104286:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 810428a:	2212      	movs	r2, #18
 810428c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
 8104290:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8104294:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8104298:	2205      	movs	r2, #5
 810429a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 810429e:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 81042a2:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 81042a6:	4ab0      	ldr	r2, [pc, #704]	@ (8104568 <_Z41__static_initialization_and_destruction_0ii+0x420>)
 81042a8:	655a      	str	r2, [r3, #84]	@ 0x54
 81042aa:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 81042ae:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 81042b2:	2201      	movs	r2, #1
 81042b4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 81042b8:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 81042bc:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 81042c0:	2212      	movs	r2, #18
 81042c2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
 81042c6:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 81042ca:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 81042ce:	2206      	movs	r2, #6
 81042d0:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
 81042d4:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 81042d8:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 81042dc:	4aa3      	ldr	r2, [pc, #652]	@ (810456c <_Z41__static_initialization_and_destruction_0ii+0x424>)
 81042de:	665a      	str	r2, [r3, #100]	@ 0x64
 81042e0:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 81042e4:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 81042e8:	2201      	movs	r2, #1
 81042ea:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
 81042ee:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 81042f2:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 81042f6:	2212      	movs	r2, #18
 81042f8:	f883 206c 	strb.w	r2, [r3, #108]	@ 0x6c
 81042fc:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8104300:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8104304:	2207      	movs	r2, #7
 8104306:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
 810430a:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 810430e:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8104312:	4a97      	ldr	r2, [pc, #604]	@ (8104570 <_Z41__static_initialization_and_destruction_0ii+0x428>)
 8104314:	675a      	str	r2, [r3, #116]	@ 0x74
 8104316:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 810431a:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 810431e:	2201      	movs	r2, #1
 8104320:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
 8104324:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8104328:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 810432c:	2212      	movs	r2, #18
 810432e:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
 8104332:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8104336:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 810433a:	2208      	movs	r2, #8
 810433c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
 8104340:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8104344:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8104348:	f24d 120d 	movw	r2, #53517	@ 0xd10d
 810434c:	f8a3 2084 	strh.w	r2, [r3, #132]	@ 0x84
 8104350:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8104354:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8104358:	2260      	movs	r2, #96	@ 0x60
 810435a:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c
 810435e:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8104362:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8104366:	2209      	movs	r2, #9
 8104368:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
 810436c:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8104370:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8104374:	f24d 1207 	movw	r2, #53511	@ 0xd107
 8104378:	f8a3 2094 	strh.w	r2, [r3, #148]	@ 0x94
 810437c:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8104380:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8104384:	2260      	movs	r2, #96	@ 0x60
 8104386:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
 810438a:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 810438e:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8104392:	220a      	movs	r2, #10
 8104394:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
 8104398:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 810439c:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 81043a0:	f24d 1212 	movw	r2, #53522	@ 0xd112
 81043a4:	f8a3 20a4 	strh.w	r2, [r3, #164]	@ 0xa4
 81043a8:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 81043ac:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 81043b0:	2260      	movs	r2, #96	@ 0x60
 81043b2:	f883 20ac 	strb.w	r2, [r3, #172]	@ 0xac
 81043b6:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 81043ba:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 81043be:	220b      	movs	r2, #11
 81043c0:	f883 20b0 	strb.w	r2, [r3, #176]	@ 0xb0
 81043c4:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 81043c8:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 81043cc:	f24d 1206 	movw	r2, #53510	@ 0xd106
 81043d0:	f8a3 20b4 	strh.w	r2, [r3, #180]	@ 0xb4
 81043d4:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 81043d8:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 81043dc:	2260      	movs	r2, #96	@ 0x60
 81043de:	f883 20bc 	strb.w	r2, [r3, #188]	@ 0xbc
 81043e2:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 81043e6:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 81043ea:	220c      	movs	r2, #12
 81043ec:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0
 81043f0:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 81043f4:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 81043f8:	f24d 121f 	movw	r2, #53535	@ 0xd11f
 81043fc:	f8a3 20c4 	strh.w	r2, [r3, #196]	@ 0xc4
 8104400:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8104404:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8104408:	2260      	movs	r2, #96	@ 0x60
 810440a:	f883 20cc 	strb.w	r2, [r3, #204]	@ 0xcc
 810440e:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8104412:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8104416:	220d      	movs	r2, #13
 8104418:	f883 20d0 	strb.w	r2, [r3, #208]	@ 0xd0
 810441c:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8104420:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8104424:	f64d 125c 	movw	r2, #55644	@ 0xd95c
 8104428:	f8a3 20d4 	strh.w	r2, [r3, #212]	@ 0xd4
 810442c:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8104430:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8104434:	2278      	movs	r2, #120	@ 0x78
 8104436:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc
 810443a:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 810443e:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8104442:	220e      	movs	r2, #14
 8104444:	f883 20e0 	strb.w	r2, [r3, #224]	@ 0xe0
 8104448:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 810444c:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8104450:	f64d 1277 	movw	r2, #55671	@ 0xd977
 8104454:	f8a3 20e4 	strh.w	r2, [r3, #228]	@ 0xe4
 8104458:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 810445c:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8104460:	2278      	movs	r2, #120	@ 0x78
 8104462:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
 8104466:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 810446a:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 810446e:	f107 0210 	add.w	r2, r7, #16
 8104472:	601a      	str	r2, [r3, #0]
 8104474:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8104478:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 810447c:	220f      	movs	r2, #15
 810447e:	605a      	str	r2, [r3, #4]
 8104480:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8104484:	4618      	mov	r0, r3
 8104486:	f7fd f9a9 	bl	81017dc <_ZNSaISt4pairIKN7APIDoIP12EDoIPRequestES_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEEEC1Ev>
 810448a:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 810448e:	f5a3 72c8 	sub.w	r2, r3, #400	@ 0x190
 8104492:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8104496:	9302      	str	r3, [sp, #8]
 8104498:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 810449c:	9301      	str	r3, [sp, #4]
 810449e:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 81044a2:	9300      	str	r3, [sp, #0]
 81044a4:	2300      	movs	r3, #0
 81044a6:	ca06      	ldmia	r2, {r1, r2}
 81044a8:	4832      	ldr	r0, [pc, #200]	@ (8104574 <_Z41__static_initialization_and_destruction_0ii+0x42c>)
 81044aa:	f7fd f9ae 	bl	810180a <_ZNSt13unordered_mapIN7APIDoIP12EDoIPRequestESt4pairISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressESt4hashIS1_ESt8equal_toIS1_ESaIS2_IKS1_S8_EEEC1ESt16initializer_listISE_EjRKSA_RKSC_RKSF_>
 81044ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 81044b2:	4618      	mov	r0, r3
 81044b4:	f7fd f99e 	bl	81017f4 <_ZNSaISt4pairIKN7APIDoIP12EDoIPRequestES_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEEED1Ev>
    void prepareFirstRequestForDynamicData(uint8_t preparedPayload[], EECUAddress targetEcuAddr);
    void prepareSecondRequestForDynamicData(uint8_t preparedPayload[], EECUAddress targetEcuAddr, EDynamicDataIndentifierRequestCode ddirCode);

    std::optional<SMessage> extractDataFromResponse(const uint8_t dataPayload[], size_t size, EDoIPRequest dataType);

    const std::unordered_map<EDoIPRequest, const char*> EDoIPRequest_ToCStringMap = 
 81044b8:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 81044bc:	2278      	movs	r2, #120	@ 0x78
 81044be:	2100      	movs	r1, #0
 81044c0:	4618      	mov	r0, r3
 81044c2:	f022 fbeb 	bl	8126c9c <memset>
 81044c6:	4b2c      	ldr	r3, [pc, #176]	@ (8104578 <_Z41__static_initialization_and_destruction_0ii+0x430>)
 81044c8:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 81044cc:	2301      	movs	r3, #1
 81044ce:	f887 311c 	strb.w	r3, [r7, #284]	@ 0x11c
 81044d2:	4b2a      	ldr	r3, [pc, #168]	@ (810457c <_Z41__static_initialization_and_destruction_0ii+0x434>)
 81044d4:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 81044d8:	2302      	movs	r3, #2
 81044da:	f887 3124 	strb.w	r3, [r7, #292]	@ 0x124
 81044de:	4b28      	ldr	r3, [pc, #160]	@ (8104580 <_Z41__static_initialization_and_destruction_0ii+0x438>)
 81044e0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 81044e4:	2303      	movs	r3, #3
 81044e6:	f887 312c 	strb.w	r3, [r7, #300]	@ 0x12c
 81044ea:	4b26      	ldr	r3, [pc, #152]	@ (8104584 <_Z41__static_initialization_and_destruction_0ii+0x43c>)
 81044ec:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 81044f0:	2304      	movs	r3, #4
 81044f2:	f887 3134 	strb.w	r3, [r7, #308]	@ 0x134
 81044f6:	4b24      	ldr	r3, [pc, #144]	@ (8104588 <_Z41__static_initialization_and_destruction_0ii+0x440>)
 81044f8:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 81044fc:	2305      	movs	r3, #5
 81044fe:	f887 313c 	strb.w	r3, [r7, #316]	@ 0x13c
 8104502:	4b22      	ldr	r3, [pc, #136]	@ (810458c <_Z41__static_initialization_and_destruction_0ii+0x444>)
 8104504:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
 8104508:	2306      	movs	r3, #6
 810450a:	f887 3144 	strb.w	r3, [r7, #324]	@ 0x144
 810450e:	4b20      	ldr	r3, [pc, #128]	@ (8104590 <_Z41__static_initialization_and_destruction_0ii+0x448>)
 8104510:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
 8104514:	2307      	movs	r3, #7
 8104516:	f887 314c 	strb.w	r3, [r7, #332]	@ 0x14c
 810451a:	4b1e      	ldr	r3, [pc, #120]	@ (8104594 <_Z41__static_initialization_and_destruction_0ii+0x44c>)
 810451c:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8104520:	2308      	movs	r3, #8
 8104522:	f887 3154 	strb.w	r3, [r7, #340]	@ 0x154
 8104526:	4b1c      	ldr	r3, [pc, #112]	@ (8104598 <_Z41__static_initialization_and_destruction_0ii+0x450>)
 8104528:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 810452c:	2309      	movs	r3, #9
 810452e:	f887 315c 	strb.w	r3, [r7, #348]	@ 0x15c
 8104532:	4b1a      	ldr	r3, [pc, #104]	@ (810459c <_Z41__static_initialization_and_destruction_0ii+0x454>)
 8104534:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
 8104538:	230a      	movs	r3, #10
 810453a:	f887 3164 	strb.w	r3, [r7, #356]	@ 0x164
 810453e:	4b18      	ldr	r3, [pc, #96]	@ (81045a0 <_Z41__static_initialization_and_destruction_0ii+0x458>)
 8104540:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
 8104544:	230b      	movs	r3, #11
 8104546:	f887 316c 	strb.w	r3, [r7, #364]	@ 0x16c
 810454a:	4b16      	ldr	r3, [pc, #88]	@ (81045a4 <_Z41__static_initialization_and_destruction_0ii+0x45c>)
 810454c:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
 8104550:	230c      	movs	r3, #12
 8104552:	e029      	b.n	81045a8 <_Z41__static_initialization_and_destruction_0ii+0x460>
 8104554:	44020102 	.word	0x44020102
 8104558:	48070102 	.word	0x48070102
 810455c:	43000101 	.word	0x43000101
 8104560:	46090101 	.word	0x46090101
 8104564:	42040101 	.word	0x42040101
 8104568:	42080102 	.word	0x42080102
 810456c:	481a0102 	.word	0x481a0102
 8104570:	4a290101 	.word	0x4a290101
 8104574:	100000b4 	.word	0x100000b4
 8104578:	081271d8 	.word	0x081271d8
 810457c:	081271ec 	.word	0x081271ec
 8104580:	08127200 	.word	0x08127200
 8104584:	08127210 	.word	0x08127210
 8104588:	0812721c 	.word	0x0812721c
 810458c:	0812722c 	.word	0x0812722c
 8104590:	0812723c 	.word	0x0812723c
 8104594:	0812724c 	.word	0x0812724c
 8104598:	08127260 	.word	0x08127260
 810459c:	0812726c 	.word	0x0812726c
 81045a0:	08127278 	.word	0x08127278
 81045a4:	08127288 	.word	0x08127288
 81045a8:	f887 3174 	strb.w	r3, [r7, #372]	@ 0x174
 81045ac:	4b35      	ldr	r3, [pc, #212]	@ (8104684 <_Z41__static_initialization_and_destruction_0ii+0x53c>)
 81045ae:	f8c7 3178 	str.w	r3, [r7, #376]	@ 0x178
 81045b2:	230d      	movs	r3, #13
 81045b4:	f887 317c 	strb.w	r3, [r7, #380]	@ 0x17c
 81045b8:	4b33      	ldr	r3, [pc, #204]	@ (8104688 <_Z41__static_initialization_and_destruction_0ii+0x540>)
 81045ba:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 81045be:	230e      	movs	r3, #14
 81045c0:	f887 3184 	strb.w	r3, [r7, #388]	@ 0x184
 81045c4:	4b31      	ldr	r3, [pc, #196]	@ (810468c <_Z41__static_initialization_and_destruction_0ii+0x544>)
 81045c6:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 81045ca:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 81045ce:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 81045d2:	230f      	movs	r3, #15
 81045d4:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 81045d8:	f507 73ca 	add.w	r3, r7, #404	@ 0x194
 81045dc:	4618      	mov	r0, r3
 81045de:	f7fd f92d 	bl	810183c <_ZNSaISt4pairIKN7APIDoIP12EDoIPRequestEPKcEEC1Ev>
 81045e2:	f507 73ca 	add.w	r3, r7, #404	@ 0x194
 81045e6:	9302      	str	r3, [sp, #8]
 81045e8:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 81045ec:	9301      	str	r3, [sp, #4]
 81045ee:	f507 73c6 	add.w	r3, r7, #396	@ 0x18c
 81045f2:	9300      	str	r3, [sp, #0]
 81045f4:	2300      	movs	r3, #0
 81045f6:	f507 7286 	add.w	r2, r7, #268	@ 0x10c
 81045fa:	ca06      	ldmia	r2, {r1, r2}
 81045fc:	4824      	ldr	r0, [pc, #144]	@ (8104690 <_Z41__static_initialization_and_destruction_0ii+0x548>)
 81045fe:	f7fd f934 	bl	810186a <_ZNSt13unordered_mapIN7APIDoIP12EDoIPRequestEPKcSt4hashIS1_ESt8equal_toIS1_ESaISt4pairIKS1_S3_EEEC1ESt16initializer_listISA_EjRKS5_RKS7_RKSB_>
 8104602:	f507 73ca 	add.w	r3, r7, #404	@ 0x194
 8104606:	4618      	mov	r0, r3
 8104608:	f7fd f924 	bl	8101854 <_ZNSaISt4pairIKN7APIDoIP12EDoIPRequestEPKcEED1Ev>
QueueHandle_t queueToEventManagerCM4 = xQueueCreate(64, sizeof(SMessage));
 810460c:	2200      	movs	r2, #0
 810460e:	211c      	movs	r1, #28
 8104610:	2040      	movs	r0, #64	@ 0x40
 8104612:	f012 fb0a 	bl	8116c2a <xQueueGenericCreate>
 8104616:	4603      	mov	r3, r0
 8104618:	4a1e      	ldr	r2, [pc, #120]	@ (8104694 <_Z41__static_initialization_and_destruction_0ii+0x54c>)
 810461a:	6013      	str	r3, [r2, #0]
QueueHandle_t queueToNativeDaemon = xQueueCreate(16, sizeof(SMessage));
 810461c:	2200      	movs	r2, #0
 810461e:	211c      	movs	r1, #28
 8104620:	2010      	movs	r0, #16
 8104622:	f012 fb02 	bl	8116c2a <xQueueGenericCreate>
 8104626:	4603      	mov	r3, r0
 8104628:	4a1b      	ldr	r2, [pc, #108]	@ (8104698 <_Z41__static_initialization_and_destruction_0ii+0x550>)
 810462a:	6013      	str	r3, [r2, #0]
QueueHandle_t queueToDoIPDaemonTask = xQueueCreate(16, sizeof(SMessage));
 810462c:	2200      	movs	r2, #0
 810462e:	211c      	movs	r1, #28
 8104630:	2010      	movs	r0, #16
 8104632:	f012 fafa 	bl	8116c2a <xQueueGenericCreate>
 8104636:	4603      	mov	r3, r0
 8104638:	4a18      	ldr	r2, [pc, #96]	@ (810469c <_Z41__static_initialization_and_destruction_0ii+0x554>)
 810463a:	6013      	str	r3, [r2, #0]
QueueHandle_t queueToTemperature = xQueueCreate(4, sizeof(SMessage));
 810463c:	2200      	movs	r2, #0
 810463e:	211c      	movs	r1, #28
 8104640:	2004      	movs	r0, #4
 8104642:	f012 faf2 	bl	8116c2a <xQueueGenericCreate>
 8104646:	4603      	mov	r3, r0
 8104648:	4a15      	ldr	r2, [pc, #84]	@ (81046a0 <_Z41__static_initialization_and_destruction_0ii+0x558>)
 810464a:	6013      	str	r3, [r2, #0]
 810464c:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8104650:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8104654:	681b      	ldr	r3, [r3, #0]
 8104656:	2b00      	cmp	r3, #0
 8104658:	d10e      	bne.n	8104678 <_Z41__static_initialization_and_destruction_0ii+0x530>
 810465a:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 810465e:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8104662:	681b      	ldr	r3, [r3, #0]
 8104664:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8104668:	4293      	cmp	r3, r2
 810466a:	d105      	bne.n	8104678 <_Z41__static_initialization_and_destruction_0ii+0x530>
 810466c:	4808      	ldr	r0, [pc, #32]	@ (8104690 <_Z41__static_initialization_and_destruction_0ii+0x548>)
 810466e:	f7ff fd51 	bl	8104114 <_ZNSt13unordered_mapIN7APIDoIP12EDoIPRequestEPKcSt4hashIS1_ESt8equal_toIS1_ESaISt4pairIKS1_S3_EEED1Ev>
    const std::unordered_map<EDoIPRequest, std::pair<std::variant<EUDSDID, EDynamicDataIndentifierRequestCode>, EECUAddress>> dataIdentifierMap =
 8104672:	480c      	ldr	r0, [pc, #48]	@ (81046a4 <_Z41__static_initialization_and_destruction_0ii+0x55c>)
 8104674:	f7ff fd5b 	bl	810412e <_ZNSt13unordered_mapIN7APIDoIP12EDoIPRequestESt4pairISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressESt4hashIS1_ESt8equal_toIS1_ESaIS2_IKS1_S8_EEED1Ev>
}
 8104678:	bf00      	nop
 810467a:	f507 77cc 	add.w	r7, r7, #408	@ 0x198
 810467e:	46bd      	mov	sp, r7
 8104680:	bd80      	pop	{r7, pc}
 8104682:	bf00      	nop
 8104684:	081272a0 	.word	0x081272a0
 8104688:	081272b4 	.word	0x081272b4
 810468c:	081272c4 	.word	0x081272c4
 8104690:	100000d0 	.word	0x100000d0
 8104694:	100001e8 	.word	0x100001e8
 8104698:	100001ec 	.word	0x100001ec
 810469c:	100001f0 	.word	0x100001f0
 81046a0:	100001f4 	.word	0x100001f4
 81046a4:	100000b4 	.word	0x100000b4

081046a8 <_GLOBAL__sub_I_hi2c4>:
 81046a8:	b580      	push	{r7, lr}
 81046aa:	af00      	add	r7, sp, #0
 81046ac:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 81046b0:	2001      	movs	r0, #1
 81046b2:	f7ff fd49 	bl	8104148 <_Z41__static_initialization_and_destruction_0ii>
 81046b6:	bd80      	pop	{r7, pc}

081046b8 <_GLOBAL__sub_D_hi2c4>:
 81046b8:	b580      	push	{r7, lr}
 81046ba:	af00      	add	r7, sp, #0
 81046bc:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 81046c0:	2000      	movs	r0, #0
 81046c2:	f7ff fd41 	bl	8104148 <_Z41__static_initialization_and_destruction_0ii>
 81046c6:	bd80      	pop	{r7, pc}

081046c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 81046c8:	b580      	push	{r7, lr}
 81046ca:	b082      	sub	sp, #8
 81046cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 81046ce:	4b10      	ldr	r3, [pc, #64]	@ (8104710 <HAL_MspInit+0x48>)
 81046d0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 81046d4:	4a0e      	ldr	r2, [pc, #56]	@ (8104710 <HAL_MspInit+0x48>)
 81046d6:	f043 0302 	orr.w	r3, r3, #2
 81046da:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 81046de:	4b0c      	ldr	r3, [pc, #48]	@ (8104710 <HAL_MspInit+0x48>)
 81046e0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 81046e4:	f003 0302 	and.w	r3, r3, #2
 81046e8:	607b      	str	r3, [r7, #4]
 81046ea:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 81046ec:	2200      	movs	r2, #0
 81046ee:	210f      	movs	r1, #15
 81046f0:	f06f 0001 	mvn.w	r0, #1
 81046f4:	f00a fcc8 	bl	810f088 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* HSEM2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM2_IRQn, 7, 0);
 81046f8:	2200      	movs	r2, #0
 81046fa:	2107      	movs	r1, #7
 81046fc:	207e      	movs	r0, #126	@ 0x7e
 81046fe:	f00a fcc3 	bl	810f088 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM2_IRQn);
 8104702:	207e      	movs	r0, #126	@ 0x7e
 8104704:	f00a fcda 	bl	810f0bc <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8104708:	bf00      	nop
 810470a:	3708      	adds	r7, #8
 810470c:	46bd      	mov	sp, r7
 810470e:	bd80      	pop	{r7, pc}
 8104710:	58024400 	.word	0x58024400

08104714 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8104714:	b580      	push	{r7, lr}
 8104716:	b0bc      	sub	sp, #240	@ 0xf0
 8104718:	af00      	add	r7, sp, #0
 810471a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 810471c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8104720:	2200      	movs	r2, #0
 8104722:	601a      	str	r2, [r3, #0]
 8104724:	605a      	str	r2, [r3, #4]
 8104726:	609a      	str	r2, [r3, #8]
 8104728:	60da      	str	r2, [r3, #12]
 810472a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 810472c:	f107 0310 	add.w	r3, r7, #16
 8104730:	22c8      	movs	r2, #200	@ 0xc8
 8104732:	2100      	movs	r1, #0
 8104734:	4618      	mov	r0, r3
 8104736:	f022 fab1 	bl	8126c9c <memset>
  if(hi2c->Instance==I2C4)
 810473a:	687b      	ldr	r3, [r7, #4]
 810473c:	681b      	ldr	r3, [r3, #0]
 810473e:	4a27      	ldr	r2, [pc, #156]	@ (81047dc <HAL_I2C_MspInit+0xc8>)
 8104740:	4293      	cmp	r3, r2
 8104742:	d146      	bne.n	81047d2 <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8104744:	f04f 0210 	mov.w	r2, #16
 8104748:	f04f 0300 	mov.w	r3, #0
 810474c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 8104750:	2300      	movs	r3, #0
 8104752:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8104756:	f107 0310 	add.w	r3, r7, #16
 810475a:	4618      	mov	r0, r3
 810475c:	f00d fd04 	bl	8112168 <HAL_RCCEx_PeriphCLKConfig>
 8104760:	4603      	mov	r3, r0
 8104762:	2b00      	cmp	r3, #0
 8104764:	d001      	beq.n	810476a <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8104766:	f7fd f833 	bl	81017d0 <Error_Handler>
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 810476a:	4b1d      	ldr	r3, [pc, #116]	@ (81047e0 <HAL_I2C_MspInit+0xcc>)
 810476c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8104770:	4a1b      	ldr	r2, [pc, #108]	@ (81047e0 <HAL_I2C_MspInit+0xcc>)
 8104772:	f043 0308 	orr.w	r3, r3, #8
 8104776:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 810477a:	4b19      	ldr	r3, [pc, #100]	@ (81047e0 <HAL_I2C_MspInit+0xcc>)
 810477c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8104780:	f003 0308 	and.w	r3, r3, #8
 8104784:	60fb      	str	r3, [r7, #12]
 8104786:	68fb      	ldr	r3, [r7, #12]
    /**I2C4 GPIO Configuration
    PD12     ------> I2C4_SCL
    PD13     ------> I2C4_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8104788:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 810478c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8104790:	2312      	movs	r3, #18
 8104792:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8104796:	2300      	movs	r3, #0
 8104798:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 810479c:	2300      	movs	r3, #0
 810479e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 81047a2:	2304      	movs	r3, #4
 81047a4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 81047a8:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 81047ac:	4619      	mov	r1, r3
 81047ae:	480d      	ldr	r0, [pc, #52]	@ (81047e4 <HAL_I2C_MspInit+0xd0>)
 81047b0:	f00c fa24 	bl	8110bfc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 81047b4:	4b0a      	ldr	r3, [pc, #40]	@ (81047e0 <HAL_I2C_MspInit+0xcc>)
 81047b6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 81047ba:	4a09      	ldr	r2, [pc, #36]	@ (81047e0 <HAL_I2C_MspInit+0xcc>)
 81047bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 81047c0:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 81047c4:	4b06      	ldr	r3, [pc, #24]	@ (81047e0 <HAL_I2C_MspInit+0xcc>)
 81047c6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 81047ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 81047ce:	60bb      	str	r3, [r7, #8]
 81047d0:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C4_MspInit 1 */

  }

}
 81047d2:	bf00      	nop
 81047d4:	37f0      	adds	r7, #240	@ 0xf0
 81047d6:	46bd      	mov	sp, r7
 81047d8:	bd80      	pop	{r7, pc}
 81047da:	bf00      	nop
 81047dc:	58001c00 	.word	0x58001c00
 81047e0:	58024400 	.word	0x58024400
 81047e4:	58020c00 	.word	0x58020c00

081047e8 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 81047e8:	b580      	push	{r7, lr}
 81047ea:	b082      	sub	sp, #8
 81047ec:	af00      	add	r7, sp, #0
 81047ee:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C4)
 81047f0:	687b      	ldr	r3, [r7, #4]
 81047f2:	681b      	ldr	r3, [r3, #0]
 81047f4:	4a0c      	ldr	r2, [pc, #48]	@ (8104828 <HAL_I2C_MspDeInit+0x40>)
 81047f6:	4293      	cmp	r3, r2
 81047f8:	d111      	bne.n	810481e <HAL_I2C_MspDeInit+0x36>
  {
  /* USER CODE BEGIN I2C4_MspDeInit 0 */

  /* USER CODE END I2C4_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C4_CLK_DISABLE();
 81047fa:	4b0c      	ldr	r3, [pc, #48]	@ (810482c <HAL_I2C_MspDeInit+0x44>)
 81047fc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8104800:	4a0a      	ldr	r2, [pc, #40]	@ (810482c <HAL_I2C_MspDeInit+0x44>)
 8104802:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8104806:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4

    /**I2C4 GPIO Configuration
    PD12     ------> I2C4_SCL
    PD13     ------> I2C4_SDA
    */
    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_12);
 810480a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 810480e:	4808      	ldr	r0, [pc, #32]	@ (8104830 <HAL_I2C_MspDeInit+0x48>)
 8104810:	f00c fba4 	bl	8110f5c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_13);
 8104814:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8104818:	4805      	ldr	r0, [pc, #20]	@ (8104830 <HAL_I2C_MspDeInit+0x48>)
 810481a:	f00c fb9f 	bl	8110f5c <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C4_MspDeInit 1 */

  /* USER CODE END I2C4_MspDeInit 1 */
  }

}
 810481e:	bf00      	nop
 8104820:	3708      	adds	r7, #8
 8104822:	46bd      	mov	sp, r7
 8104824:	bd80      	pop	{r7, pc}
 8104826:	bf00      	nop
 8104828:	58001c00 	.word	0x58001c00
 810482c:	58024400 	.word	0x58024400
 8104830:	58020c00 	.word	0x58020c00

08104834 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8104834:	b580      	push	{r7, lr}
 8104836:	b0bc      	sub	sp, #240	@ 0xf0
 8104838:	af00      	add	r7, sp, #0
 810483a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 810483c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8104840:	2200      	movs	r2, #0
 8104842:	601a      	str	r2, [r3, #0]
 8104844:	605a      	str	r2, [r3, #4]
 8104846:	609a      	str	r2, [r3, #8]
 8104848:	60da      	str	r2, [r3, #12]
 810484a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 810484c:	f107 0310 	add.w	r3, r7, #16
 8104850:	22c8      	movs	r2, #200	@ 0xc8
 8104852:	2100      	movs	r1, #0
 8104854:	4618      	mov	r0, r3
 8104856:	f022 fa21 	bl	8126c9c <memset>
  if(huart->Instance==USART1)
 810485a:	687b      	ldr	r3, [r7, #4]
 810485c:	681b      	ldr	r3, [r3, #0]
 810485e:	4a27      	ldr	r2, [pc, #156]	@ (81048fc <HAL_UART_MspInit+0xc8>)
 8104860:	4293      	cmp	r3, r2
 8104862:	d146      	bne.n	81048f2 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8104864:	f04f 0201 	mov.w	r2, #1
 8104868:	f04f 0300 	mov.w	r3, #0
 810486c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8104870:	2300      	movs	r3, #0
 8104872:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8104876:	f107 0310 	add.w	r3, r7, #16
 810487a:	4618      	mov	r0, r3
 810487c:	f00d fc74 	bl	8112168 <HAL_RCCEx_PeriphCLKConfig>
 8104880:	4603      	mov	r3, r0
 8104882:	2b00      	cmp	r3, #0
 8104884:	d001      	beq.n	810488a <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8104886:	f7fc ffa3 	bl	81017d0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 810488a:	4b1d      	ldr	r3, [pc, #116]	@ (8104900 <HAL_UART_MspInit+0xcc>)
 810488c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8104890:	4a1b      	ldr	r2, [pc, #108]	@ (8104900 <HAL_UART_MspInit+0xcc>)
 8104892:	f043 0310 	orr.w	r3, r3, #16
 8104896:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 810489a:	4b19      	ldr	r3, [pc, #100]	@ (8104900 <HAL_UART_MspInit+0xcc>)
 810489c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 81048a0:	f003 0310 	and.w	r3, r3, #16
 81048a4:	60fb      	str	r3, [r7, #12]
 81048a6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 81048a8:	4b15      	ldr	r3, [pc, #84]	@ (8104900 <HAL_UART_MspInit+0xcc>)
 81048aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81048ae:	4a14      	ldr	r2, [pc, #80]	@ (8104900 <HAL_UART_MspInit+0xcc>)
 81048b0:	f043 0301 	orr.w	r3, r3, #1
 81048b4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81048b8:	4b11      	ldr	r3, [pc, #68]	@ (8104900 <HAL_UART_MspInit+0xcc>)
 81048ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81048be:	f003 0301 	and.w	r3, r3, #1
 81048c2:	60bb      	str	r3, [r7, #8]
 81048c4:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
 81048c6:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 81048ca:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81048ce:	2302      	movs	r3, #2
 81048d0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81048d4:	2300      	movs	r3, #0
 81048d6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81048da:	2300      	movs	r3, #0
 81048dc:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 81048e0:	2307      	movs	r3, #7
 81048e2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 81048e6:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 81048ea:	4619      	mov	r1, r3
 81048ec:	4805      	ldr	r0, [pc, #20]	@ (8104904 <HAL_UART_MspInit+0xd0>)
 81048ee:	f00c f985 	bl	8110bfc <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 81048f2:	bf00      	nop
 81048f4:	37f0      	adds	r7, #240	@ 0xf0
 81048f6:	46bd      	mov	sp, r7
 81048f8:	bd80      	pop	{r7, pc}
 81048fa:	bf00      	nop
 81048fc:	40011000 	.word	0x40011000
 8104900:	58024400 	.word	0x58024400
 8104904:	58020000 	.word	0x58020000

08104908 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8104908:	b580      	push	{r7, lr}
 810490a:	b090      	sub	sp, #64	@ 0x40
 810490c:	af00      	add	r7, sp, #0
 810490e:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8104910:	687b      	ldr	r3, [r7, #4]
 8104912:	2b0f      	cmp	r3, #15
 8104914:	d827      	bhi.n	8104966 <HAL_InitTick+0x5e>
   {
     HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8104916:	2200      	movs	r2, #0
 8104918:	6879      	ldr	r1, [r7, #4]
 810491a:	2036      	movs	r0, #54	@ 0x36
 810491c:	f00a fbb4 	bl	810f088 <HAL_NVIC_SetPriority>

     /* Enable the TIM6 global Interrupt */
     HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8104920:	2036      	movs	r0, #54	@ 0x36
 8104922:	f00a fbcb 	bl	810f0bc <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 8104926:	4a29      	ldr	r2, [pc, #164]	@ (81049cc <HAL_InitTick+0xc4>)
 8104928:	687b      	ldr	r3, [r7, #4]
 810492a:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 810492c:	4b28      	ldr	r3, [pc, #160]	@ (81049d0 <HAL_InitTick+0xc8>)
 810492e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8104932:	4a27      	ldr	r2, [pc, #156]	@ (81049d0 <HAL_InitTick+0xc8>)
 8104934:	f043 0310 	orr.w	r3, r3, #16
 8104938:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 810493c:	4b24      	ldr	r3, [pc, #144]	@ (81049d0 <HAL_InitTick+0xc8>)
 810493e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8104942:	f003 0310 	and.w	r3, r3, #16
 8104946:	60fb      	str	r3, [r7, #12]
 8104948:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 810494a:	f107 0210 	add.w	r2, r7, #16
 810494e:	f107 0314 	add.w	r3, r7, #20
 8104952:	4611      	mov	r1, r2
 8104954:	4618      	mov	r0, r3
 8104956:	f00d fbc5 	bl	81120e4 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 810495a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810495c:	63bb      	str	r3, [r7, #56]	@ 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 810495e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8104960:	2b00      	cmp	r3, #0
 8104962:	d106      	bne.n	8104972 <HAL_InitTick+0x6a>
 8104964:	e001      	b.n	810496a <HAL_InitTick+0x62>
    return HAL_ERROR;
 8104966:	2301      	movs	r3, #1
 8104968:	e02b      	b.n	81049c2 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 810496a:	f00d fb8f 	bl	811208c <HAL_RCC_GetPCLK1Freq>
 810496e:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8104970:	e004      	b.n	810497c <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8104972:	f00d fb8b 	bl	811208c <HAL_RCC_GetPCLK1Freq>
 8104976:	4603      	mov	r3, r0
 8104978:	005b      	lsls	r3, r3, #1
 810497a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 810497c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810497e:	4a15      	ldr	r2, [pc, #84]	@ (81049d4 <HAL_InitTick+0xcc>)
 8104980:	fba2 2303 	umull	r2, r3, r2, r3
 8104984:	0c9b      	lsrs	r3, r3, #18
 8104986:	3b01      	subs	r3, #1
 8104988:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 810498a:	4b13      	ldr	r3, [pc, #76]	@ (81049d8 <HAL_InitTick+0xd0>)
 810498c:	4a13      	ldr	r2, [pc, #76]	@ (81049dc <HAL_InitTick+0xd4>)
 810498e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8104990:	4b11      	ldr	r3, [pc, #68]	@ (81049d8 <HAL_InitTick+0xd0>)
 8104992:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8104996:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8104998:	4a0f      	ldr	r2, [pc, #60]	@ (81049d8 <HAL_InitTick+0xd0>)
 810499a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810499c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 810499e:	4b0e      	ldr	r3, [pc, #56]	@ (81049d8 <HAL_InitTick+0xd0>)
 81049a0:	2200      	movs	r2, #0
 81049a2:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 81049a4:	4b0c      	ldr	r3, [pc, #48]	@ (81049d8 <HAL_InitTick+0xd0>)
 81049a6:	2200      	movs	r2, #0
 81049a8:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 81049aa:	480b      	ldr	r0, [pc, #44]	@ (81049d8 <HAL_InitTick+0xd0>)
 81049ac:	f00f fa48 	bl	8113e40 <HAL_TIM_Base_Init>
 81049b0:	4603      	mov	r3, r0
 81049b2:	2b00      	cmp	r3, #0
 81049b4:	d104      	bne.n	81049c0 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 81049b6:	4808      	ldr	r0, [pc, #32]	@ (81049d8 <HAL_InitTick+0xd0>)
 81049b8:	f00f faa4 	bl	8113f04 <HAL_TIM_Base_Start_IT>
 81049bc:	4603      	mov	r3, r0
 81049be:	e000      	b.n	81049c2 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 81049c0:	2301      	movs	r3, #1
}
 81049c2:	4618      	mov	r0, r3
 81049c4:	3740      	adds	r7, #64	@ 0x40
 81049c6:	46bd      	mov	sp, r7
 81049c8:	bd80      	pop	{r7, pc}
 81049ca:	bf00      	nop
 81049cc:	1000001c 	.word	0x1000001c
 81049d0:	58024400 	.word	0x58024400
 81049d4:	431bde83 	.word	0x431bde83
 81049d8:	100001f8 	.word	0x100001f8
 81049dc:	40001000 	.word	0x40001000

081049e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 81049e0:	b480      	push	{r7}
 81049e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 81049e4:	bf00      	nop
 81049e6:	e7fd      	b.n	81049e4 <NMI_Handler+0x4>

081049e8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 81049e8:	b480      	push	{r7}
 81049ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 81049ec:	bf00      	nop
 81049ee:	e7fd      	b.n	81049ec <HardFault_Handler+0x4>

081049f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 81049f0:	b480      	push	{r7}
 81049f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 81049f4:	bf00      	nop
 81049f6:	e7fd      	b.n	81049f4 <MemManage_Handler+0x4>

081049f8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 81049f8:	b480      	push	{r7}
 81049fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 81049fc:	bf00      	nop
 81049fe:	e7fd      	b.n	81049fc <BusFault_Handler+0x4>

08104a00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8104a00:	b480      	push	{r7}
 8104a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8104a04:	bf00      	nop
 8104a06:	e7fd      	b.n	8104a04 <UsageFault_Handler+0x4>

08104a08 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8104a08:	b480      	push	{r7}
 8104a0a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8104a0c:	bf00      	nop
 8104a0e:	46bd      	mov	sp, r7
 8104a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104a14:	4770      	bx	lr
	...

08104a18 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8104a18:	b580      	push	{r7, lr}
 8104a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8104a1c:	4802      	ldr	r0, [pc, #8]	@ (8104a28 <TIM6_DAC_IRQHandler+0x10>)
 8104a1e:	f00f fae9 	bl	8113ff4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8104a22:	bf00      	nop
 8104a24:	bd80      	pop	{r7, pc}
 8104a26:	bf00      	nop
 8104a28:	100001f8 	.word	0x100001f8

08104a2c <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8104a2c:	b580      	push	{r7, lr}
 8104a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8104a30:	4802      	ldr	r0, [pc, #8]	@ (8104a3c <ETH_IRQHandler+0x10>)
 8104a32:	f00a ff3b 	bl	810f8ac <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8104a36:	bf00      	nop
 8104a38:	bd80      	pop	{r7, pc}
 8104a3a:	bf00      	nop
 8104a3c:	1000038c 	.word	0x1000038c

08104a40 <ETH_WKUP_IRQHandler>:

/**
  * @brief This function handles Ethernet wake-up interrupt through EXTI line 86.
  */
void ETH_WKUP_IRQHandler(void)
{
 8104a40:	b580      	push	{r7, lr}
 8104a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_WKUP_IRQn 0 */

  /* USER CODE END ETH_WKUP_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8104a44:	4802      	ldr	r0, [pc, #8]	@ (8104a50 <ETH_WKUP_IRQHandler+0x10>)
 8104a46:	f00a ff31 	bl	810f8ac <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_WKUP_IRQn 1 */

  /* USER CODE END ETH_WKUP_IRQn 1 */
}
 8104a4a:	bf00      	nop
 8104a4c:	bd80      	pop	{r7, pc}
 8104a4e:	bf00      	nop
 8104a50:	1000038c 	.word	0x1000038c

08104a54 <HSEM2_IRQHandler>:

/**
  * @brief This function handles HSEM2 global interrupt.
  */
void HSEM2_IRQHandler(void)
{
 8104a54:	b580      	push	{r7, lr}
 8104a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM2_IRQn 0 */

  /* USER CODE END HSEM2_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8104a58:	f00c fbd4 	bl	8111204 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM2_IRQn 1 */

  /* USER CODE END HSEM2_IRQn 1 */
}
 8104a5c:	bf00      	nop
 8104a5e:	bd80      	pop	{r7, pc}

08104a60 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8104a60:	b480      	push	{r7}
 8104a62:	af00      	add	r7, sp, #0
	return 1;
 8104a64:	2301      	movs	r3, #1
}
 8104a66:	4618      	mov	r0, r3
 8104a68:	46bd      	mov	sp, r7
 8104a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104a6e:	4770      	bx	lr

08104a70 <_kill>:

int _kill(int pid, int sig)
{
 8104a70:	b480      	push	{r7}
 8104a72:	b083      	sub	sp, #12
 8104a74:	af00      	add	r7, sp, #0
 8104a76:	6078      	str	r0, [r7, #4]
 8104a78:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8104a7a:	4b05      	ldr	r3, [pc, #20]	@ (8104a90 <_kill+0x20>)
 8104a7c:	2216      	movs	r2, #22
 8104a7e:	601a      	str	r2, [r3, #0]
	return -1;
 8104a80:	f04f 33ff 	mov.w	r3, #4294967295
}
 8104a84:	4618      	mov	r0, r3
 8104a86:	370c      	adds	r7, #12
 8104a88:	46bd      	mov	sp, r7
 8104a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104a8e:	4770      	bx	lr
 8104a90:	1000e6c4 	.word	0x1000e6c4

08104a94 <_exit>:

void _exit (int status)
{
 8104a94:	b580      	push	{r7, lr}
 8104a96:	b082      	sub	sp, #8
 8104a98:	af00      	add	r7, sp, #0
 8104a9a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8104a9c:	f04f 31ff 	mov.w	r1, #4294967295
 8104aa0:	6878      	ldr	r0, [r7, #4]
 8104aa2:	f7ff ffe5 	bl	8104a70 <_kill>
	while (1) {}		/* Make sure we hang here */
 8104aa6:	bf00      	nop
 8104aa8:	e7fd      	b.n	8104aa6 <_exit+0x12>

08104aaa <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8104aaa:	b580      	push	{r7, lr}
 8104aac:	b086      	sub	sp, #24
 8104aae:	af00      	add	r7, sp, #0
 8104ab0:	60f8      	str	r0, [r7, #12]
 8104ab2:	60b9      	str	r1, [r7, #8]
 8104ab4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8104ab6:	2300      	movs	r3, #0
 8104ab8:	617b      	str	r3, [r7, #20]
 8104aba:	e00a      	b.n	8104ad2 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8104abc:	f3af 8000 	nop.w
 8104ac0:	4601      	mov	r1, r0
 8104ac2:	68bb      	ldr	r3, [r7, #8]
 8104ac4:	1c5a      	adds	r2, r3, #1
 8104ac6:	60ba      	str	r2, [r7, #8]
 8104ac8:	b2ca      	uxtb	r2, r1
 8104aca:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8104acc:	697b      	ldr	r3, [r7, #20]
 8104ace:	3301      	adds	r3, #1
 8104ad0:	617b      	str	r3, [r7, #20]
 8104ad2:	697a      	ldr	r2, [r7, #20]
 8104ad4:	687b      	ldr	r3, [r7, #4]
 8104ad6:	429a      	cmp	r2, r3
 8104ad8:	dbf0      	blt.n	8104abc <_read+0x12>
	}

return len;
 8104ada:	687b      	ldr	r3, [r7, #4]
}
 8104adc:	4618      	mov	r0, r3
 8104ade:	3718      	adds	r7, #24
 8104ae0:	46bd      	mov	sp, r7
 8104ae2:	bd80      	pop	{r7, pc}

08104ae4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8104ae4:	b580      	push	{r7, lr}
 8104ae6:	b086      	sub	sp, #24
 8104ae8:	af00      	add	r7, sp, #0
 8104aea:	60f8      	str	r0, [r7, #12]
 8104aec:	60b9      	str	r1, [r7, #8]
 8104aee:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8104af0:	2300      	movs	r3, #0
 8104af2:	617b      	str	r3, [r7, #20]
 8104af4:	e009      	b.n	8104b0a <_write+0x26>
	{
		__io_putchar(*ptr++);
 8104af6:	68bb      	ldr	r3, [r7, #8]
 8104af8:	1c5a      	adds	r2, r3, #1
 8104afa:	60ba      	str	r2, [r7, #8]
 8104afc:	781b      	ldrb	r3, [r3, #0]
 8104afe:	4618      	mov	r0, r3
 8104b00:	f7fc fe42 	bl	8101788 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8104b04:	697b      	ldr	r3, [r7, #20]
 8104b06:	3301      	adds	r3, #1
 8104b08:	617b      	str	r3, [r7, #20]
 8104b0a:	697a      	ldr	r2, [r7, #20]
 8104b0c:	687b      	ldr	r3, [r7, #4]
 8104b0e:	429a      	cmp	r2, r3
 8104b10:	dbf1      	blt.n	8104af6 <_write+0x12>
	}
	return len;
 8104b12:	687b      	ldr	r3, [r7, #4]
}
 8104b14:	4618      	mov	r0, r3
 8104b16:	3718      	adds	r7, #24
 8104b18:	46bd      	mov	sp, r7
 8104b1a:	bd80      	pop	{r7, pc}

08104b1c <_close>:

int _close(int file)
{
 8104b1c:	b480      	push	{r7}
 8104b1e:	b083      	sub	sp, #12
 8104b20:	af00      	add	r7, sp, #0
 8104b22:	6078      	str	r0, [r7, #4]
	return -1;
 8104b24:	f04f 33ff 	mov.w	r3, #4294967295
}
 8104b28:	4618      	mov	r0, r3
 8104b2a:	370c      	adds	r7, #12
 8104b2c:	46bd      	mov	sp, r7
 8104b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104b32:	4770      	bx	lr

08104b34 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8104b34:	b480      	push	{r7}
 8104b36:	b083      	sub	sp, #12
 8104b38:	af00      	add	r7, sp, #0
 8104b3a:	6078      	str	r0, [r7, #4]
 8104b3c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8104b3e:	683b      	ldr	r3, [r7, #0]
 8104b40:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8104b44:	605a      	str	r2, [r3, #4]
	return 0;
 8104b46:	2300      	movs	r3, #0
}
 8104b48:	4618      	mov	r0, r3
 8104b4a:	370c      	adds	r7, #12
 8104b4c:	46bd      	mov	sp, r7
 8104b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104b52:	4770      	bx	lr

08104b54 <_isatty>:

int _isatty(int file)
{
 8104b54:	b480      	push	{r7}
 8104b56:	b083      	sub	sp, #12
 8104b58:	af00      	add	r7, sp, #0
 8104b5a:	6078      	str	r0, [r7, #4]
	return 1;
 8104b5c:	2301      	movs	r3, #1
}
 8104b5e:	4618      	mov	r0, r3
 8104b60:	370c      	adds	r7, #12
 8104b62:	46bd      	mov	sp, r7
 8104b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104b68:	4770      	bx	lr

08104b6a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8104b6a:	b480      	push	{r7}
 8104b6c:	b085      	sub	sp, #20
 8104b6e:	af00      	add	r7, sp, #0
 8104b70:	60f8      	str	r0, [r7, #12]
 8104b72:	60b9      	str	r1, [r7, #8]
 8104b74:	607a      	str	r2, [r7, #4]
	return 0;
 8104b76:	2300      	movs	r3, #0
}
 8104b78:	4618      	mov	r0, r3
 8104b7a:	3714      	adds	r7, #20
 8104b7c:	46bd      	mov	sp, r7
 8104b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104b82:	4770      	bx	lr

08104b84 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8104b84:	b480      	push	{r7}
 8104b86:	b087      	sub	sp, #28
 8104b88:	af00      	add	r7, sp, #0
 8104b8a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8104b8c:	4a14      	ldr	r2, [pc, #80]	@ (8104be0 <_sbrk+0x5c>)
 8104b8e:	4b15      	ldr	r3, [pc, #84]	@ (8104be4 <_sbrk+0x60>)
 8104b90:	1ad3      	subs	r3, r2, r3
 8104b92:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8104b94:	697b      	ldr	r3, [r7, #20]
 8104b96:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8104b98:	4b13      	ldr	r3, [pc, #76]	@ (8104be8 <_sbrk+0x64>)
 8104b9a:	681b      	ldr	r3, [r3, #0]
 8104b9c:	2b00      	cmp	r3, #0
 8104b9e:	d102      	bne.n	8104ba6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8104ba0:	4b11      	ldr	r3, [pc, #68]	@ (8104be8 <_sbrk+0x64>)
 8104ba2:	4a12      	ldr	r2, [pc, #72]	@ (8104bec <_sbrk+0x68>)
 8104ba4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8104ba6:	4b10      	ldr	r3, [pc, #64]	@ (8104be8 <_sbrk+0x64>)
 8104ba8:	681a      	ldr	r2, [r3, #0]
 8104baa:	687b      	ldr	r3, [r7, #4]
 8104bac:	4413      	add	r3, r2
 8104bae:	693a      	ldr	r2, [r7, #16]
 8104bb0:	429a      	cmp	r2, r3
 8104bb2:	d205      	bcs.n	8104bc0 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8104bb4:	4b0e      	ldr	r3, [pc, #56]	@ (8104bf0 <_sbrk+0x6c>)
 8104bb6:	220c      	movs	r2, #12
 8104bb8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8104bba:	f04f 33ff 	mov.w	r3, #4294967295
 8104bbe:	e009      	b.n	8104bd4 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8104bc0:	4b09      	ldr	r3, [pc, #36]	@ (8104be8 <_sbrk+0x64>)
 8104bc2:	681b      	ldr	r3, [r3, #0]
 8104bc4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8104bc6:	4b08      	ldr	r3, [pc, #32]	@ (8104be8 <_sbrk+0x64>)
 8104bc8:	681a      	ldr	r2, [r3, #0]
 8104bca:	687b      	ldr	r3, [r7, #4]
 8104bcc:	4413      	add	r3, r2
 8104bce:	4a06      	ldr	r2, [pc, #24]	@ (8104be8 <_sbrk+0x64>)
 8104bd0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8104bd2:	68fb      	ldr	r3, [r7, #12]
}
 8104bd4:	4618      	mov	r0, r3
 8104bd6:	371c      	adds	r7, #28
 8104bd8:	46bd      	mov	sp, r7
 8104bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104bde:	4770      	bx	lr
 8104be0:	10048000 	.word	0x10048000
 8104be4:	00001000 	.word	0x00001000
 8104be8:	10000244 	.word	0x10000244
 8104bec:	1000e6d0 	.word	0x1000e6d0
 8104bf0:	1000e6c4 	.word	0x1000e6c4

08104bf4 <_ZSt23__is_constant_evaluatedv>:
  {
 8104bf4:	b480      	push	{r7}
 8104bf6:	af00      	add	r7, sp, #0
    return __builtin_is_constant_evaluated();
 8104bf8:	2300      	movs	r3, #0
  }
 8104bfa:	4618      	mov	r0, r3
 8104bfc:	46bd      	mov	sp, r7
 8104bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104c02:	4770      	bx	lr

08104c04 <_ZN7APIDoIP18prepareDataRequestEPh11EECUAddress7EUDSDID>:
#include "APIDoIP.h"
#include "Logger.h"

void APIDoIP::prepareDataRequest(uint8_t preparedPayload[], EECUAddress targetEcuAddr, EUDSDID did)
{
 8104c04:	b480      	push	{r7}
 8104c06:	b083      	sub	sp, #12
 8104c08:	af00      	add	r7, sp, #0
 8104c0a:	6078      	str	r0, [r7, #4]
 8104c0c:	460b      	mov	r3, r1
 8104c0e:	70fb      	strb	r3, [r7, #3]
 8104c10:	4613      	mov	r3, r2
 8104c12:	803b      	strh	r3, [r7, #0]
    // data len
    preparedPayload[0] = 0x00;
 8104c14:	687b      	ldr	r3, [r7, #4]
 8104c16:	2200      	movs	r2, #0
 8104c18:	701a      	strb	r2, [r3, #0]
    preparedPayload[1] = 0x00;
 8104c1a:	687b      	ldr	r3, [r7, #4]
 8104c1c:	3301      	adds	r3, #1
 8104c1e:	2200      	movs	r2, #0
 8104c20:	701a      	strb	r2, [r3, #0]
    preparedPayload[2] = 0x00;
 8104c22:	687b      	ldr	r3, [r7, #4]
 8104c24:	3302      	adds	r3, #2
 8104c26:	2200      	movs	r2, #0
 8104c28:	701a      	strb	r2, [r3, #0]
    preparedPayload[3] = dataReqDataSize;
 8104c2a:	687b      	ldr	r3, [r7, #4]
 8104c2c:	3303      	adds	r3, #3
 8104c2e:	2205      	movs	r2, #5
 8104c30:	701a      	strb	r2, [r3, #0]

    // "checksum"
    preparedPayload[4] = 0x00;
 8104c32:	687b      	ldr	r3, [r7, #4]
 8104c34:	3304      	adds	r3, #4
 8104c36:	2200      	movs	r2, #0
 8104c38:	701a      	strb	r2, [r3, #0]
    preparedPayload[5] = 0x01;
 8104c3a:	687b      	ldr	r3, [r7, #4]
 8104c3c:	3305      	adds	r3, #5
 8104c3e:	2201      	movs	r2, #1
 8104c40:	701a      	strb	r2, [r3, #0]

    // addresses
    preparedPayload[6] = DIAGNOSTIC_TOOL_INTERNAL_ADDR;
 8104c42:	687b      	ldr	r3, [r7, #4]
 8104c44:	3306      	adds	r3, #6
 8104c46:	22f4      	movs	r2, #244	@ 0xf4
 8104c48:	701a      	strb	r2, [r3, #0]
    preparedPayload[7] = static_cast<uint8_t>(targetEcuAddr);
 8104c4a:	687b      	ldr	r3, [r7, #4]
 8104c4c:	3307      	adds	r3, #7
 8104c4e:	78fa      	ldrb	r2, [r7, #3]
 8104c50:	701a      	strb	r2, [r3, #0]

    // SID
    preparedPayload[8] = static_cast<uint8_t>(EUDSRequestSID::READ_DATA_BY_IDENTIFIER);
 8104c52:	687b      	ldr	r3, [r7, #4]
 8104c54:	3308      	adds	r3, #8
 8104c56:	2222      	movs	r2, #34	@ 0x22
 8104c58:	701a      	strb	r2, [r3, #0]

    // DID
    preparedPayload[9] = static_cast<uint8_t>((static_cast<uint16_t>(did) & 0xFF00) >> 8);
 8104c5a:	883b      	ldrh	r3, [r7, #0]
 8104c5c:	0a1b      	lsrs	r3, r3, #8
 8104c5e:	b29a      	uxth	r2, r3
 8104c60:	687b      	ldr	r3, [r7, #4]
 8104c62:	3309      	adds	r3, #9
 8104c64:	b2d2      	uxtb	r2, r2
 8104c66:	701a      	strb	r2, [r3, #0]
    preparedPayload[10] = static_cast<uint8_t>(static_cast<uint16_t>(did) & 0x00FF);
 8104c68:	687b      	ldr	r3, [r7, #4]
 8104c6a:	330a      	adds	r3, #10
 8104c6c:	883a      	ldrh	r2, [r7, #0]
 8104c6e:	b2d2      	uxtb	r2, r2
 8104c70:	701a      	strb	r2, [r3, #0]
}
 8104c72:	bf00      	nop
 8104c74:	370c      	adds	r7, #12
 8104c76:	46bd      	mov	sp, r7
 8104c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104c7c:	4770      	bx	lr

08104c7e <_ZN7APIDoIP33prepareFirstRequestForDynamicDataEPh11EECUAddress>:

void APIDoIP::prepareFirstRequestForDynamicData(uint8_t preparedPayload[], EECUAddress targetEcuAddr)
{
 8104c7e:	b480      	push	{r7}
 8104c80:	b083      	sub	sp, #12
 8104c82:	af00      	add	r7, sp, #0
 8104c84:	6078      	str	r0, [r7, #4]
 8104c86:	460b      	mov	r3, r1
 8104c88:	70fb      	strb	r3, [r7, #3]
    // data len
    preparedPayload[0] = 0x00;
 8104c8a:	687b      	ldr	r3, [r7, #4]
 8104c8c:	2200      	movs	r2, #0
 8104c8e:	701a      	strb	r2, [r3, #0]
    preparedPayload[1] = 0x00;
 8104c90:	687b      	ldr	r3, [r7, #4]
 8104c92:	3301      	adds	r3, #1
 8104c94:	2200      	movs	r2, #0
 8104c96:	701a      	strb	r2, [r3, #0]
    preparedPayload[2] = 0x00;
 8104c98:	687b      	ldr	r3, [r7, #4]
 8104c9a:	3302      	adds	r3, #2
 8104c9c:	2200      	movs	r2, #0
 8104c9e:	701a      	strb	r2, [r3, #0]
    preparedPayload[3] = firstReqDynDataSize;
 8104ca0:	687b      	ldr	r3, [r7, #4]
 8104ca2:	3303      	adds	r3, #3
 8104ca4:	2206      	movs	r2, #6
 8104ca6:	701a      	strb	r2, [r3, #0]

    // "checksum"
    preparedPayload[4] = 0x00;
 8104ca8:	687b      	ldr	r3, [r7, #4]
 8104caa:	3304      	adds	r3, #4
 8104cac:	2200      	movs	r2, #0
 8104cae:	701a      	strb	r2, [r3, #0]
    preparedPayload[5] = 0x01;
 8104cb0:	687b      	ldr	r3, [r7, #4]
 8104cb2:	3305      	adds	r3, #5
 8104cb4:	2201      	movs	r2, #1
 8104cb6:	701a      	strb	r2, [r3, #0]

    // addresses
    preparedPayload[6] = DIAGNOSTIC_TOOL_INTERNAL_ADDR;
 8104cb8:	687b      	ldr	r3, [r7, #4]
 8104cba:	3306      	adds	r3, #6
 8104cbc:	22f4      	movs	r2, #244	@ 0xf4
 8104cbe:	701a      	strb	r2, [r3, #0]
    preparedPayload[7] = static_cast<uint8_t>(targetEcuAddr);
 8104cc0:	687b      	ldr	r3, [r7, #4]
 8104cc2:	3307      	adds	r3, #7
 8104cc4:	78fa      	ldrb	r2, [r7, #3]
 8104cc6:	701a      	strb	r2, [r3, #0]

    // SID
    preparedPayload[8] = static_cast<uint8_t>(EUDSRequestSID::DYNAMICALLY_DEFINE_DATA_IDENTIFIER);
 8104cc8:	687b      	ldr	r3, [r7, #4]
 8104cca:	3308      	adds	r3, #8
 8104ccc:	222c      	movs	r2, #44	@ 0x2c
 8104cce:	701a      	strb	r2, [r3, #0]
    // sub SID
    preparedPayload[9] = static_cast<uint8_t>(DynamicallyAssignDataSubSID::REQUEST_FIRST);
 8104cd0:	687b      	ldr	r3, [r7, #4]
 8104cd2:	3309      	adds	r3, #9
 8104cd4:	2203      	movs	r2, #3
 8104cd6:	701a      	strb	r2, [r3, #0]

    // DID
    preparedPayload[10] = static_cast<uint8_t>((static_cast<uint16_t>(EUDSDID::DYNAMICALLY_DEFINED_DATA_IDENTIFIER_0) & 0xFF00) >> 8);
 8104cd8:	687b      	ldr	r3, [r7, #4]
 8104cda:	330a      	adds	r3, #10
 8104cdc:	22f3      	movs	r2, #243	@ 0xf3
 8104cde:	701a      	strb	r2, [r3, #0]
    preparedPayload[11] = static_cast<uint8_t>(static_cast<uint16_t>(EUDSDID::DYNAMICALLY_DEFINED_DATA_IDENTIFIER_0) & 0x00FF);
 8104ce0:	687b      	ldr	r3, [r7, #4]
 8104ce2:	330b      	adds	r3, #11
 8104ce4:	2200      	movs	r2, #0
 8104ce6:	701a      	strb	r2, [r3, #0]
}
 8104ce8:	bf00      	nop
 8104cea:	370c      	adds	r7, #12
 8104cec:	46bd      	mov	sp, r7
 8104cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104cf2:	4770      	bx	lr

08104cf4 <_ZN7APIDoIP34prepareSecondRequestForDynamicDataEPh11EECUAddress34EDynamicDataIndentifierRequestCode>:

void APIDoIP::prepareSecondRequestForDynamicData(uint8_t preparedPayload[], EECUAddress targetEcuAddr, EDynamicDataIndentifierRequestCode ddirCode)
{
 8104cf4:	b480      	push	{r7}
 8104cf6:	b085      	sub	sp, #20
 8104cf8:	af00      	add	r7, sp, #0
 8104cfa:	60f8      	str	r0, [r7, #12]
 8104cfc:	460b      	mov	r3, r1
 8104cfe:	607a      	str	r2, [r7, #4]
 8104d00:	72fb      	strb	r3, [r7, #11]
    // data len
    preparedPayload[0] = 0x00;
 8104d02:	68fb      	ldr	r3, [r7, #12]
 8104d04:	2200      	movs	r2, #0
 8104d06:	701a      	strb	r2, [r3, #0]
    preparedPayload[1] = 0x00;
 8104d08:	68fb      	ldr	r3, [r7, #12]
 8104d0a:	3301      	adds	r3, #1
 8104d0c:	2200      	movs	r2, #0
 8104d0e:	701a      	strb	r2, [r3, #0]
    preparedPayload[2] = 0x00;
 8104d10:	68fb      	ldr	r3, [r7, #12]
 8104d12:	3302      	adds	r3, #2
 8104d14:	2200      	movs	r2, #0
 8104d16:	701a      	strb	r2, [r3, #0]
    preparedPayload[3] = secondReqDynDataSize;
 8104d18:	68fb      	ldr	r3, [r7, #12]
 8104d1a:	3303      	adds	r3, #3
 8104d1c:	220a      	movs	r2, #10
 8104d1e:	701a      	strb	r2, [r3, #0]

    // "checksum"
    preparedPayload[4] = 0x00;
 8104d20:	68fb      	ldr	r3, [r7, #12]
 8104d22:	3304      	adds	r3, #4
 8104d24:	2200      	movs	r2, #0
 8104d26:	701a      	strb	r2, [r3, #0]
    preparedPayload[5] = 0x01;
 8104d28:	68fb      	ldr	r3, [r7, #12]
 8104d2a:	3305      	adds	r3, #5
 8104d2c:	2201      	movs	r2, #1
 8104d2e:	701a      	strb	r2, [r3, #0]

    // addresses
    preparedPayload[6] = DIAGNOSTIC_TOOL_INTERNAL_ADDR;
 8104d30:	68fb      	ldr	r3, [r7, #12]
 8104d32:	3306      	adds	r3, #6
 8104d34:	22f4      	movs	r2, #244	@ 0xf4
 8104d36:	701a      	strb	r2, [r3, #0]
    preparedPayload[7] = static_cast<uint8_t>(targetEcuAddr);
 8104d38:	68fb      	ldr	r3, [r7, #12]
 8104d3a:	3307      	adds	r3, #7
 8104d3c:	7afa      	ldrb	r2, [r7, #11]
 8104d3e:	701a      	strb	r2, [r3, #0]

    // SID
    preparedPayload[8] = static_cast<uint8_t>(EUDSRequestSID::DYNAMICALLY_DEFINE_DATA_IDENTIFIER);
 8104d40:	68fb      	ldr	r3, [r7, #12]
 8104d42:	3308      	adds	r3, #8
 8104d44:	222c      	movs	r2, #44	@ 0x2c
 8104d46:	701a      	strb	r2, [r3, #0]
    // sub SID
    preparedPayload[9] = static_cast<uint8_t>(DynamicallyAssignDataSubSID::REQUEST_ASSIGN);;
 8104d48:	68fb      	ldr	r3, [r7, #12]
 8104d4a:	3309      	adds	r3, #9
 8104d4c:	2201      	movs	r2, #1
 8104d4e:	701a      	strb	r2, [r3, #0]

    // DID
    preparedPayload[10] = static_cast<uint8_t>((static_cast<uint16_t>(EUDSDID::DYNAMICALLY_DEFINED_DATA_IDENTIFIER_0) & 0xFF00) >> 8);
 8104d50:	68fb      	ldr	r3, [r7, #12]
 8104d52:	330a      	adds	r3, #10
 8104d54:	22f3      	movs	r2, #243	@ 0xf3
 8104d56:	701a      	strb	r2, [r3, #0]
    preparedPayload[11] = static_cast<uint8_t>(static_cast<uint16_t>(EUDSDID::DYNAMICALLY_DEFINED_DATA_IDENTIFIER_0) & 0x00FF);
 8104d58:	68fb      	ldr	r3, [r7, #12]
 8104d5a:	330b      	adds	r3, #11
 8104d5c:	2200      	movs	r2, #0
 8104d5e:	701a      	strb	r2, [r3, #0]

    // Dynamic data identifier request code
    preparedPayload[12] = static_cast<uint8_t>((static_cast<uint32_t>(ddirCode) & 0xFF000000) >> 24);
 8104d60:	687b      	ldr	r3, [r7, #4]
 8104d62:	0e1a      	lsrs	r2, r3, #24
 8104d64:	68fb      	ldr	r3, [r7, #12]
 8104d66:	330c      	adds	r3, #12
 8104d68:	b2d2      	uxtb	r2, r2
 8104d6a:	701a      	strb	r2, [r3, #0]
    preparedPayload[13] = static_cast<uint8_t>((static_cast<uint32_t>(ddirCode) & 0x00FF0000) >> 16);
 8104d6c:	687b      	ldr	r3, [r7, #4]
 8104d6e:	0c1a      	lsrs	r2, r3, #16
 8104d70:	68fb      	ldr	r3, [r7, #12]
 8104d72:	330d      	adds	r3, #13
 8104d74:	b2d2      	uxtb	r2, r2
 8104d76:	701a      	strb	r2, [r3, #0]
    preparedPayload[14] = static_cast<uint8_t>((static_cast<uint32_t>(ddirCode) & 0x0000FF00) >> 8);
 8104d78:	687b      	ldr	r3, [r7, #4]
 8104d7a:	0a1a      	lsrs	r2, r3, #8
 8104d7c:	68fb      	ldr	r3, [r7, #12]
 8104d7e:	330e      	adds	r3, #14
 8104d80:	b2d2      	uxtb	r2, r2
 8104d82:	701a      	strb	r2, [r3, #0]
    preparedPayload[15] = static_cast<uint8_t>(static_cast<uint32_t>(ddirCode) & 0x000000FF);
 8104d84:	68fb      	ldr	r3, [r7, #12]
 8104d86:	330f      	adds	r3, #15
 8104d88:	687a      	ldr	r2, [r7, #4]
 8104d8a:	b2d2      	uxtb	r2, r2
 8104d8c:	701a      	strb	r2, [r3, #0]
}
 8104d8e:	bf00      	nop
 8104d90:	3714      	adds	r7, #20
 8104d92:	46bd      	mov	sp, r7
 8104d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104d98:	4770      	bx	lr
	...

08104d9c <_ZN7APIDoIP23extractDataFromResponseEPKhjNS_12EDoIPRequestE>:

std::optional<SMessage> APIDoIP::extractDataFromResponse(const uint8_t dataPayload[], size_t size, EDoIPRequest dataType)
{
 8104d9c:	b5b0      	push	{r4, r5, r7, lr}
 8104d9e:	b08c      	sub	sp, #48	@ 0x30
 8104da0:	af00      	add	r7, sp, #0
 8104da2:	60f8      	str	r0, [r7, #12]
 8104da4:	60b9      	str	r1, [r7, #8]
 8104da6:	607a      	str	r2, [r7, #4]
 8104da8:	70fb      	strb	r3, [r7, #3]
    bool sizeMismatch = false;
 8104daa:	2300      	movs	r3, #0
 8104dac:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    SMessage msg;
    msg.event_sender = EVENT_CLIENT_ETHERNET_CONNECTION_MANAGER;
 8104db0:	2303      	movs	r3, #3
 8104db2:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    msg.event_receiver = EVENT_CLIENT_FRONTEND;
 8104db6:	2300      	movs	r3, #0
 8104db8:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29

    switch(dataType)
 8104dbc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8104dc0:	2b0e      	cmp	r3, #14
 8104dc2:	f200 8177 	bhi.w	81050b4 <_ZN7APIDoIP23extractDataFromResponseEPKhjNS_12EDoIPRequestE+0x318>
 8104dc6:	a201      	add	r2, pc, #4	@ (adr r2, 8104dcc <_ZN7APIDoIP23extractDataFromResponseEPKhjNS_12EDoIPRequestE+0x30>)
 8104dc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8104dcc:	08104e09 	.word	0x08104e09
 8104dd0:	08104e35 	.word	0x08104e35
 8104dd4:	08104e61 	.word	0x08104e61
 8104dd8:	08104e7b 	.word	0x08104e7b
 8104ddc:	08104e95 	.word	0x08104e95
 8104de0:	08104eaf 	.word	0x08104eaf
 8104de4:	08104edb 	.word	0x08104edb
 8104de8:	08104f07 	.word	0x08104f07
 8104dec:	08104f21 	.word	0x08104f21
 8104df0:	08104f59 	.word	0x08104f59
 8104df4:	08104f85 	.word	0x08104f85
 8104df8:	08104fb1 	.word	0x08104fb1
 8104dfc:	08104fdd 	.word	0x08104fdd
 8104e00:	08105043 	.word	0x08105043
 8104e04:	0810506f 	.word	0x0810506f
    {
        case DME_ENGINE_OIL_TEMPERATURE:
        {
            if(size < 2)
 8104e08:	687b      	ldr	r3, [r7, #4]
 8104e0a:	2b01      	cmp	r3, #1
 8104e0c:	d803      	bhi.n	8104e16 <_ZN7APIDoIP23extractDataFromResponseEPKhjNS_12EDoIPRequestE+0x7a>
            {
                sizeMismatch = true;
 8104e0e:	2301      	movs	r3, #1
 8104e10:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            else
            {
                msg.event_type = EVENT_DATA_UPDATE_DME_ENGINE_OIL_TEMPERATURE;
                msg.message_data.dme_engine_oil_temperature = (dataPayload[0] << 8) | dataPayload[1];
            }
            break;
 8104e14:	e153      	b.n	81050be <_ZN7APIDoIP23extractDataFromResponseEPKhjNS_12EDoIPRequestE+0x322>
                msg.event_type = EVENT_DATA_UPDATE_DME_ENGINE_OIL_TEMPERATURE;
 8104e16:	2300      	movs	r3, #0
 8104e18:	743b      	strb	r3, [r7, #16]
                msg.message_data.dme_engine_oil_temperature = (dataPayload[0] << 8) | dataPayload[1];
 8104e1a:	68bb      	ldr	r3, [r7, #8]
 8104e1c:	781b      	ldrb	r3, [r3, #0]
 8104e1e:	021b      	lsls	r3, r3, #8
 8104e20:	b21a      	sxth	r2, r3
 8104e22:	68bb      	ldr	r3, [r7, #8]
 8104e24:	3301      	adds	r3, #1
 8104e26:	781b      	ldrb	r3, [r3, #0]
 8104e28:	b21b      	sxth	r3, r3
 8104e2a:	4313      	orrs	r3, r2
 8104e2c:	b21b      	sxth	r3, r3
 8104e2e:	b29b      	uxth	r3, r3
 8104e30:	82bb      	strh	r3, [r7, #20]
            break;
 8104e32:	e144      	b.n	81050be <_ZN7APIDoIP23extractDataFromResponseEPKhjNS_12EDoIPRequestE+0x322>
        }
        case DME_ENGINE_ROTATIONAL_SPEED:
        {
            if(size < 2)
 8104e34:	687b      	ldr	r3, [r7, #4]
 8104e36:	2b01      	cmp	r3, #1
 8104e38:	d803      	bhi.n	8104e42 <_ZN7APIDoIP23extractDataFromResponseEPKhjNS_12EDoIPRequestE+0xa6>
            {
                sizeMismatch = true;
 8104e3a:	2301      	movs	r3, #1
 8104e3c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            else
            {
                msg.event_type = EVENT_DATA_UPDATE_DME_ENGINE_ROTATIONAL_SPEED;
                msg.message_data.dme_engine_rotational_speed = (dataPayload[0] << 8) | dataPayload[1];
            }
            break;
 8104e40:	e13d      	b.n	81050be <_ZN7APIDoIP23extractDataFromResponseEPKhjNS_12EDoIPRequestE+0x322>
                msg.event_type = EVENT_DATA_UPDATE_DME_ENGINE_ROTATIONAL_SPEED;
 8104e42:	2301      	movs	r3, #1
 8104e44:	743b      	strb	r3, [r7, #16]
                msg.message_data.dme_engine_rotational_speed = (dataPayload[0] << 8) | dataPayload[1];
 8104e46:	68bb      	ldr	r3, [r7, #8]
 8104e48:	781b      	ldrb	r3, [r3, #0]
 8104e4a:	021b      	lsls	r3, r3, #8
 8104e4c:	b21a      	sxth	r2, r3
 8104e4e:	68bb      	ldr	r3, [r7, #8]
 8104e50:	3301      	adds	r3, #1
 8104e52:	781b      	ldrb	r3, [r3, #0]
 8104e54:	b21b      	sxth	r3, r3
 8104e56:	4313      	orrs	r3, r2
 8104e58:	b21b      	sxth	r3, r3
 8104e5a:	b29b      	uxth	r3, r3
 8104e5c:	82bb      	strh	r3, [r7, #20]
            break;
 8104e5e:	e12e      	b.n	81050be <_ZN7APIDoIP23extractDataFromResponseEPKhjNS_12EDoIPRequestE+0x322>
        }
        case DME_COOLANT_TEMPERATURE:
        {
            if(size < 1)
 8104e60:	687b      	ldr	r3, [r7, #4]
 8104e62:	2b00      	cmp	r3, #0
 8104e64:	d103      	bne.n	8104e6e <_ZN7APIDoIP23extractDataFromResponseEPKhjNS_12EDoIPRequestE+0xd2>
            {
                sizeMismatch = true;
 8104e66:	2301      	movs	r3, #1
 8104e68:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            else
            {
                msg.event_type = EVENT_DATA_UPDATE_DME_COOLANT_TEMPERATURE;
                msg.message_data.dme_coolant_temperature = dataPayload[0];
            }
            break;
 8104e6c:	e127      	b.n	81050be <_ZN7APIDoIP23extractDataFromResponseEPKhjNS_12EDoIPRequestE+0x322>
                msg.event_type = EVENT_DATA_UPDATE_DME_COOLANT_TEMPERATURE;
 8104e6e:	2302      	movs	r3, #2
 8104e70:	743b      	strb	r3, [r7, #16]
                msg.message_data.dme_coolant_temperature = dataPayload[0];
 8104e72:	68bb      	ldr	r3, [r7, #8]
 8104e74:	781b      	ldrb	r3, [r3, #0]
 8104e76:	753b      	strb	r3, [r7, #20]
            break;
 8104e78:	e121      	b.n	81050be <_ZN7APIDoIP23extractDataFromResponseEPKhjNS_12EDoIPRequestE+0x322>
        }
        case DME_BATTERY_VOLTAGE:
        {
            if(size < 1)
 8104e7a:	687b      	ldr	r3, [r7, #4]
 8104e7c:	2b00      	cmp	r3, #0
 8104e7e:	d103      	bne.n	8104e88 <_ZN7APIDoIP23extractDataFromResponseEPKhjNS_12EDoIPRequestE+0xec>
            {
                sizeMismatch = true;
 8104e80:	2301      	movs	r3, #1
 8104e82:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            else
            {
                msg.event_type = EVENT_DATA_UPDATE_DME_BATTERY_VOLTAGE;
                msg.message_data.dme_battery_voltage = dataPayload[0];
            }
            break;
 8104e86:	e11a      	b.n	81050be <_ZN7APIDoIP23extractDataFromResponseEPKhjNS_12EDoIPRequestE+0x322>
                msg.event_type = EVENT_DATA_UPDATE_DME_BATTERY_VOLTAGE;
 8104e88:	2303      	movs	r3, #3
 8104e8a:	743b      	strb	r3, [r7, #16]
                msg.message_data.dme_battery_voltage = dataPayload[0];
 8104e8c:	68bb      	ldr	r3, [r7, #8]
 8104e8e:	781b      	ldrb	r3, [r3, #0]
 8104e90:	753b      	strb	r3, [r7, #20]
            break;
 8104e92:	e114      	b.n	81050be <_ZN7APIDoIP23extractDataFromResponseEPKhjNS_12EDoIPRequestE+0x322>
        }
        case DME_AMBIENT_TEMPERATURE:
        {
            if(size < 1)
 8104e94:	687b      	ldr	r3, [r7, #4]
 8104e96:	2b00      	cmp	r3, #0
 8104e98:	d103      	bne.n	8104ea2 <_ZN7APIDoIP23extractDataFromResponseEPKhjNS_12EDoIPRequestE+0x106>
            {
                sizeMismatch = true;
 8104e9a:	2301      	movs	r3, #1
 8104e9c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            else
            {
                msg.event_type = EVENT_DATA_UPDATE_DME_AMBIENT_TEMPERATURE;
                msg.message_data.dme_ambient_temperature = dataPayload[0];
            }
            break;
 8104ea0:	e10d      	b.n	81050be <_ZN7APIDoIP23extractDataFromResponseEPKhjNS_12EDoIPRequestE+0x322>
                msg.event_type = EVENT_DATA_UPDATE_DME_AMBIENT_TEMPERATURE;
 8104ea2:	2304      	movs	r3, #4
 8104ea4:	743b      	strb	r3, [r7, #16]
                msg.message_data.dme_ambient_temperature = dataPayload[0];
 8104ea6:	68bb      	ldr	r3, [r7, #8]
 8104ea8:	781b      	ldrb	r3, [r3, #0]
 8104eaa:	753b      	strb	r3, [r7, #20]
            break;
 8104eac:	e107      	b.n	81050be <_ZN7APIDoIP23extractDataFromResponseEPKhjNS_12EDoIPRequestE+0x322>
        }
        case DME_AIR_MASS:
        {
            if(size < 2)
 8104eae:	687b      	ldr	r3, [r7, #4]
 8104eb0:	2b01      	cmp	r3, #1
 8104eb2:	d803      	bhi.n	8104ebc <_ZN7APIDoIP23extractDataFromResponseEPKhjNS_12EDoIPRequestE+0x120>
            {
                sizeMismatch = true;
 8104eb4:	2301      	movs	r3, #1
 8104eb6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            else
            {
                msg.event_type = EVENT_DATA_UPDATE_DME_AIR_MASS;
                msg.message_data.dme_air_mass = (dataPayload[0] << 8) | dataPayload[1];
            }
            break;
 8104eba:	e100      	b.n	81050be <_ZN7APIDoIP23extractDataFromResponseEPKhjNS_12EDoIPRequestE+0x322>
                msg.event_type = EVENT_DATA_UPDATE_DME_AIR_MASS;
 8104ebc:	2305      	movs	r3, #5
 8104ebe:	743b      	strb	r3, [r7, #16]
                msg.message_data.dme_air_mass = (dataPayload[0] << 8) | dataPayload[1];
 8104ec0:	68bb      	ldr	r3, [r7, #8]
 8104ec2:	781b      	ldrb	r3, [r3, #0]
 8104ec4:	021b      	lsls	r3, r3, #8
 8104ec6:	b21a      	sxth	r2, r3
 8104ec8:	68bb      	ldr	r3, [r7, #8]
 8104eca:	3301      	adds	r3, #1
 8104ecc:	781b      	ldrb	r3, [r3, #0]
 8104ece:	b21b      	sxth	r3, r3
 8104ed0:	4313      	orrs	r3, r2
 8104ed2:	b21b      	sxth	r3, r3
 8104ed4:	b29b      	uxth	r3, r3
 8104ed6:	82bb      	strh	r3, [r7, #20]
            break;
 8104ed8:	e0f1      	b.n	81050be <_ZN7APIDoIP23extractDataFromResponseEPKhjNS_12EDoIPRequestE+0x322>
        }
        case DME_RAIL_PRESSURE:
        {
            if(size < 2)
 8104eda:	687b      	ldr	r3, [r7, #4]
 8104edc:	2b01      	cmp	r3, #1
 8104ede:	d803      	bhi.n	8104ee8 <_ZN7APIDoIP23extractDataFromResponseEPKhjNS_12EDoIPRequestE+0x14c>
            {
                sizeMismatch = true;
 8104ee0:	2301      	movs	r3, #1
 8104ee2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            else
            {
                msg.event_type = EVENT_DATA_UPDATE_DME_RAIL_PRESSURE;
                msg.message_data.dme_rail_pressure = (dataPayload[0] << 8) | dataPayload[1];
            }
            break;
 8104ee6:	e0ea      	b.n	81050be <_ZN7APIDoIP23extractDataFromResponseEPKhjNS_12EDoIPRequestE+0x322>
                msg.event_type = EVENT_DATA_UPDATE_DME_RAIL_PRESSURE;
 8104ee8:	2306      	movs	r3, #6
 8104eea:	743b      	strb	r3, [r7, #16]
                msg.message_data.dme_rail_pressure = (dataPayload[0] << 8) | dataPayload[1];
 8104eec:	68bb      	ldr	r3, [r7, #8]
 8104eee:	781b      	ldrb	r3, [r3, #0]
 8104ef0:	021b      	lsls	r3, r3, #8
 8104ef2:	b21a      	sxth	r2, r3
 8104ef4:	68bb      	ldr	r3, [r7, #8]
 8104ef6:	3301      	adds	r3, #1
 8104ef8:	781b      	ldrb	r3, [r3, #0]
 8104efa:	b21b      	sxth	r3, r3
 8104efc:	4313      	orrs	r3, r2
 8104efe:	b21b      	sxth	r3, r3
 8104f00:	b29b      	uxth	r3, r3
 8104f02:	82bb      	strh	r3, [r7, #20]
            break;
 8104f04:	e0db      	b.n	81050be <_ZN7APIDoIP23extractDataFromResponseEPKhjNS_12EDoIPRequestE+0x322>
        }
        case DME_ACCELERATOR_PEDAL_POSITION:
        {
            if(size < 1)
 8104f06:	687b      	ldr	r3, [r7, #4]
 8104f08:	2b00      	cmp	r3, #0
 8104f0a:	d103      	bne.n	8104f14 <_ZN7APIDoIP23extractDataFromResponseEPKhjNS_12EDoIPRequestE+0x178>
            {
                sizeMismatch = true;
 8104f0c:	2301      	movs	r3, #1
 8104f0e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            else
            {
                msg.event_type = EVENT_DATA_UPDATE_DME_ACCELERATOR_PEDAL_POSITION;
                msg.message_data.dme_accelerator_pedal_position = dataPayload[0];
            }
            break;
 8104f12:	e0d4      	b.n	81050be <_ZN7APIDoIP23extractDataFromResponseEPKhjNS_12EDoIPRequestE+0x322>
                msg.event_type = EVENT_DATA_UPDATE_DME_ACCELERATOR_PEDAL_POSITION;
 8104f14:	2307      	movs	r3, #7
 8104f16:	743b      	strb	r3, [r7, #16]
                msg.message_data.dme_accelerator_pedal_position = dataPayload[0];
 8104f18:	68bb      	ldr	r3, [r7, #8]
 8104f1a:	781b      	ldrb	r3, [r3, #0]
 8104f1c:	753b      	strb	r3, [r7, #20]
            break;
 8104f1e:	e0ce      	b.n	81050be <_ZN7APIDoIP23extractDataFromResponseEPKhjNS_12EDoIPRequestE+0x322>
        }
        case KOMBI_TOTAL_DISTANCE:
        {
            if(size < 4)
 8104f20:	687b      	ldr	r3, [r7, #4]
 8104f22:	2b03      	cmp	r3, #3
 8104f24:	d803      	bhi.n	8104f2e <_ZN7APIDoIP23extractDataFromResponseEPKhjNS_12EDoIPRequestE+0x192>
            {
                sizeMismatch = true;
 8104f26:	2301      	movs	r3, #1
 8104f28:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            else
            {
                msg.event_type = EVENT_DATA_UPDATE_KOMBI_TOTAL_DISTANCE;
                msg.message_data.kombi_total_distance = (dataPayload[0] << 24) | (dataPayload[1] << 16) | (dataPayload[2] << 8) | dataPayload[3];
            }
            break;
 8104f2c:	e0c7      	b.n	81050be <_ZN7APIDoIP23extractDataFromResponseEPKhjNS_12EDoIPRequestE+0x322>
                msg.event_type = EVENT_DATA_UPDATE_KOMBI_TOTAL_DISTANCE;
 8104f2e:	2308      	movs	r3, #8
 8104f30:	743b      	strb	r3, [r7, #16]
                msg.message_data.kombi_total_distance = (dataPayload[0] << 24) | (dataPayload[1] << 16) | (dataPayload[2] << 8) | dataPayload[3];
 8104f32:	68bb      	ldr	r3, [r7, #8]
 8104f34:	781b      	ldrb	r3, [r3, #0]
 8104f36:	061a      	lsls	r2, r3, #24
 8104f38:	68bb      	ldr	r3, [r7, #8]
 8104f3a:	3301      	adds	r3, #1
 8104f3c:	781b      	ldrb	r3, [r3, #0]
 8104f3e:	041b      	lsls	r3, r3, #16
 8104f40:	431a      	orrs	r2, r3
 8104f42:	68bb      	ldr	r3, [r7, #8]
 8104f44:	3302      	adds	r3, #2
 8104f46:	781b      	ldrb	r3, [r3, #0]
 8104f48:	021b      	lsls	r3, r3, #8
 8104f4a:	4313      	orrs	r3, r2
 8104f4c:	68ba      	ldr	r2, [r7, #8]
 8104f4e:	3203      	adds	r2, #3
 8104f50:	7812      	ldrb	r2, [r2, #0]
 8104f52:	4313      	orrs	r3, r2
 8104f54:	617b      	str	r3, [r7, #20]
            break;
 8104f56:	e0b2      	b.n	81050be <_ZN7APIDoIP23extractDataFromResponseEPKhjNS_12EDoIPRequestE+0x322>
        }
        case KOMBI_SPEED:
        {
            if(size < 2)
 8104f58:	687b      	ldr	r3, [r7, #4]
 8104f5a:	2b01      	cmp	r3, #1
 8104f5c:	d803      	bhi.n	8104f66 <_ZN7APIDoIP23extractDataFromResponseEPKhjNS_12EDoIPRequestE+0x1ca>
            {
                sizeMismatch = true;
 8104f5e:	2301      	movs	r3, #1
 8104f60:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            else
            {
                msg.event_type = EVENT_DATA_UPDATE_KOMBI_SPEED;
                msg.message_data.kombi_speed = (dataPayload[0] << 8) | dataPayload[1];
            }
            break;
 8104f64:	e0ab      	b.n	81050be <_ZN7APIDoIP23extractDataFromResponseEPKhjNS_12EDoIPRequestE+0x322>
                msg.event_type = EVENT_DATA_UPDATE_KOMBI_SPEED;
 8104f66:	2309      	movs	r3, #9
 8104f68:	743b      	strb	r3, [r7, #16]
                msg.message_data.kombi_speed = (dataPayload[0] << 8) | dataPayload[1];
 8104f6a:	68bb      	ldr	r3, [r7, #8]
 8104f6c:	781b      	ldrb	r3, [r3, #0]
 8104f6e:	021b      	lsls	r3, r3, #8
 8104f70:	b21a      	sxth	r2, r3
 8104f72:	68bb      	ldr	r3, [r7, #8]
 8104f74:	3301      	adds	r3, #1
 8104f76:	781b      	ldrb	r3, [r3, #0]
 8104f78:	b21b      	sxth	r3, r3
 8104f7a:	4313      	orrs	r3, r2
 8104f7c:	b21b      	sxth	r3, r3
 8104f7e:	b29b      	uxth	r3, r3
 8104f80:	82bb      	strh	r3, [r7, #20]
            break;
 8104f82:	e09c      	b.n	81050be <_ZN7APIDoIP23extractDataFromResponseEPKhjNS_12EDoIPRequestE+0x322>
        }
        case KOMBI_OUTSIDE_TEMP_SENSOR:
        {
            if(size < 2)
 8104f84:	687b      	ldr	r3, [r7, #4]
 8104f86:	2b01      	cmp	r3, #1
 8104f88:	d803      	bhi.n	8104f92 <_ZN7APIDoIP23extractDataFromResponseEPKhjNS_12EDoIPRequestE+0x1f6>
            {
                sizeMismatch = true;
 8104f8a:	2301      	movs	r3, #1
 8104f8c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            else
            {
                msg.event_type = EVENT_DATA_UPDATE_KOMBI_OUTSIDE_TEMP_SENSOR;
                msg.message_data.kombi_outside_temp_sensor = (dataPayload[0] << 8) | dataPayload[1];
            }
            break;
 8104f90:	e095      	b.n	81050be <_ZN7APIDoIP23extractDataFromResponseEPKhjNS_12EDoIPRequestE+0x322>
                msg.event_type = EVENT_DATA_UPDATE_KOMBI_OUTSIDE_TEMP_SENSOR;
 8104f92:	230a      	movs	r3, #10
 8104f94:	743b      	strb	r3, [r7, #16]
                msg.message_data.kombi_outside_temp_sensor = (dataPayload[0] << 8) | dataPayload[1];
 8104f96:	68bb      	ldr	r3, [r7, #8]
 8104f98:	781b      	ldrb	r3, [r3, #0]
 8104f9a:	021b      	lsls	r3, r3, #8
 8104f9c:	b21a      	sxth	r2, r3
 8104f9e:	68bb      	ldr	r3, [r7, #8]
 8104fa0:	3301      	adds	r3, #1
 8104fa2:	781b      	ldrb	r3, [r3, #0]
 8104fa4:	b21b      	sxth	r3, r3
 8104fa6:	4313      	orrs	r3, r2
 8104fa8:	b21b      	sxth	r3, r3
 8104faa:	b29b      	uxth	r3, r3
 8104fac:	82bb      	strh	r3, [r7, #20]
            break;
 8104fae:	e086      	b.n	81050be <_ZN7APIDoIP23extractDataFromResponseEPKhjNS_12EDoIPRequestE+0x322>
        }
        case KOMBI_ENGINE_SPEED_ON_DISP:
        {
            if(size < 2)
 8104fb0:	687b      	ldr	r3, [r7, #4]
 8104fb2:	2b01      	cmp	r3, #1
 8104fb4:	d803      	bhi.n	8104fbe <_ZN7APIDoIP23extractDataFromResponseEPKhjNS_12EDoIPRequestE+0x222>
            {
                sizeMismatch = true;
 8104fb6:	2301      	movs	r3, #1
 8104fb8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            else
            {
                msg.event_type = EVENT_DATA_UPDATE_KOMBI_ENGINE_SPEED_ON_DISP;
                msg.message_data.kombi_engine_speed_on_disp = (dataPayload[0] << 8) | dataPayload[1];
            }
            break;
 8104fbc:	e07f      	b.n	81050be <_ZN7APIDoIP23extractDataFromResponseEPKhjNS_12EDoIPRequestE+0x322>
                msg.event_type = EVENT_DATA_UPDATE_KOMBI_ENGINE_SPEED_ON_DISP;
 8104fbe:	230b      	movs	r3, #11
 8104fc0:	743b      	strb	r3, [r7, #16]
                msg.message_data.kombi_engine_speed_on_disp = (dataPayload[0] << 8) | dataPayload[1];
 8104fc2:	68bb      	ldr	r3, [r7, #8]
 8104fc4:	781b      	ldrb	r3, [r3, #0]
 8104fc6:	021b      	lsls	r3, r3, #8
 8104fc8:	b21a      	sxth	r2, r3
 8104fca:	68bb      	ldr	r3, [r7, #8]
 8104fcc:	3301      	adds	r3, #1
 8104fce:	781b      	ldrb	r3, [r3, #0]
 8104fd0:	b21b      	sxth	r3, r3
 8104fd2:	4313      	orrs	r3, r2
 8104fd4:	b21b      	sxth	r3, r3
 8104fd6:	b29b      	uxth	r3, r3
 8104fd8:	82bb      	strh	r3, [r7, #20]
            break;
 8104fda:	e070      	b.n	81050be <_ZN7APIDoIP23extractDataFromResponseEPKhjNS_12EDoIPRequestE+0x322>
        }
        case KOMBI_FUEL_LEVEL:
        {
            if(size < 9)
 8104fdc:	687b      	ldr	r3, [r7, #4]
 8104fde:	2b08      	cmp	r3, #8
 8104fe0:	d803      	bhi.n	8104fea <_ZN7APIDoIP23extractDataFromResponseEPKhjNS_12EDoIPRequestE+0x24e>
            {
                sizeMismatch = true;
 8104fe2:	2301      	movs	r3, #1
 8104fe4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
                msg.event_type = EVENT_DATA_UPDATE_KOMBI_FUEL;
                msg.message_data.kombi_fuel_level[0] = (dataPayload[0] << 16) | (dataPayload[1] << 8) | dataPayload[2];
                msg.message_data.kombi_fuel_level[1] = (dataPayload[3] << 16) | (dataPayload[4] << 8) | dataPayload[5];
                msg.message_data.kombi_fuel_level[2] = (dataPayload[6] << 16) | (dataPayload[7] << 8) | dataPayload[8];
            }
            break;
 8104fe8:	e069      	b.n	81050be <_ZN7APIDoIP23extractDataFromResponseEPKhjNS_12EDoIPRequestE+0x322>
                msg.event_type = EVENT_DATA_UPDATE_KOMBI_FUEL;
 8104fea:	230c      	movs	r3, #12
 8104fec:	743b      	strb	r3, [r7, #16]
                msg.message_data.kombi_fuel_level[0] = (dataPayload[0] << 16) | (dataPayload[1] << 8) | dataPayload[2];
 8104fee:	68bb      	ldr	r3, [r7, #8]
 8104ff0:	781b      	ldrb	r3, [r3, #0]
 8104ff2:	041a      	lsls	r2, r3, #16
 8104ff4:	68bb      	ldr	r3, [r7, #8]
 8104ff6:	3301      	adds	r3, #1
 8104ff8:	781b      	ldrb	r3, [r3, #0]
 8104ffa:	021b      	lsls	r3, r3, #8
 8104ffc:	4313      	orrs	r3, r2
 8104ffe:	68ba      	ldr	r2, [r7, #8]
 8105000:	3202      	adds	r2, #2
 8105002:	7812      	ldrb	r2, [r2, #0]
 8105004:	4313      	orrs	r3, r2
 8105006:	617b      	str	r3, [r7, #20]
                msg.message_data.kombi_fuel_level[1] = (dataPayload[3] << 16) | (dataPayload[4] << 8) | dataPayload[5];
 8105008:	68bb      	ldr	r3, [r7, #8]
 810500a:	3303      	adds	r3, #3
 810500c:	781b      	ldrb	r3, [r3, #0]
 810500e:	041a      	lsls	r2, r3, #16
 8105010:	68bb      	ldr	r3, [r7, #8]
 8105012:	3304      	adds	r3, #4
 8105014:	781b      	ldrb	r3, [r3, #0]
 8105016:	021b      	lsls	r3, r3, #8
 8105018:	4313      	orrs	r3, r2
 810501a:	68ba      	ldr	r2, [r7, #8]
 810501c:	3205      	adds	r2, #5
 810501e:	7812      	ldrb	r2, [r2, #0]
 8105020:	4313      	orrs	r3, r2
 8105022:	61bb      	str	r3, [r7, #24]
                msg.message_data.kombi_fuel_level[2] = (dataPayload[6] << 16) | (dataPayload[7] << 8) | dataPayload[8];
 8105024:	68bb      	ldr	r3, [r7, #8]
 8105026:	3306      	adds	r3, #6
 8105028:	781b      	ldrb	r3, [r3, #0]
 810502a:	041a      	lsls	r2, r3, #16
 810502c:	68bb      	ldr	r3, [r7, #8]
 810502e:	3307      	adds	r3, #7
 8105030:	781b      	ldrb	r3, [r3, #0]
 8105032:	021b      	lsls	r3, r3, #8
 8105034:	4313      	orrs	r3, r2
 8105036:	68ba      	ldr	r2, [r7, #8]
 8105038:	3208      	adds	r2, #8
 810503a:	7812      	ldrb	r2, [r2, #0]
 810503c:	4313      	orrs	r3, r2
 810503e:	61fb      	str	r3, [r7, #28]
            break;
 8105040:	e03d      	b.n	81050be <_ZN7APIDoIP23extractDataFromResponseEPKhjNS_12EDoIPRequestE+0x322>
        }
        case IHKA_EVAPORATOR_TEMPERATURE_SENSOR:
        {
            if(size < 2)
 8105042:	687b      	ldr	r3, [r7, #4]
 8105044:	2b01      	cmp	r3, #1
 8105046:	d803      	bhi.n	8105050 <_ZN7APIDoIP23extractDataFromResponseEPKhjNS_12EDoIPRequestE+0x2b4>
            {
                sizeMismatch = true;
 8105048:	2301      	movs	r3, #1
 810504a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            else
            {
                msg.event_type = EVENT_DATA_UPDATE_IHKA_EVAPORATOR_TEMPERATURE_SENSOR;
                msg.message_data.ihka_evaporator_temperature_sensor = (dataPayload[0] << 8) | dataPayload[1];
            }
            break;
 810504e:	e036      	b.n	81050be <_ZN7APIDoIP23extractDataFromResponseEPKhjNS_12EDoIPRequestE+0x322>
                msg.event_type = EVENT_DATA_UPDATE_IHKA_EVAPORATOR_TEMPERATURE_SENSOR;
 8105050:	230d      	movs	r3, #13
 8105052:	743b      	strb	r3, [r7, #16]
                msg.message_data.ihka_evaporator_temperature_sensor = (dataPayload[0] << 8) | dataPayload[1];
 8105054:	68bb      	ldr	r3, [r7, #8]
 8105056:	781b      	ldrb	r3, [r3, #0]
 8105058:	021b      	lsls	r3, r3, #8
 810505a:	b21a      	sxth	r2, r3
 810505c:	68bb      	ldr	r3, [r7, #8]
 810505e:	3301      	adds	r3, #1
 8105060:	781b      	ldrb	r3, [r3, #0]
 8105062:	b21b      	sxth	r3, r3
 8105064:	4313      	orrs	r3, r2
 8105066:	b21b      	sxth	r3, r3
 8105068:	b29b      	uxth	r3, r3
 810506a:	82bb      	strh	r3, [r7, #20]
            break;
 810506c:	e027      	b.n	81050be <_ZN7APIDoIP23extractDataFromResponseEPKhjNS_12EDoIPRequestE+0x322>
        }
        case IHKA_TEMPERATURE_SELECTOR:
        {
            if(size < 4)
 810506e:	687b      	ldr	r3, [r7, #4]
 8105070:	2b03      	cmp	r3, #3
 8105072:	d803      	bhi.n	810507c <_ZN7APIDoIP23extractDataFromResponseEPKhjNS_12EDoIPRequestE+0x2e0>
            {
                sizeMismatch = true;
 8105074:	2301      	movs	r3, #1
 8105076:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
                //left
                msg.message_data.ihka_temperature_selector[0] = (dataPayload[0] << 8) | dataPayload[1];
                //right
                msg.message_data.ihka_temperature_selector[1] = (dataPayload[2] << 8) | dataPayload[3];
            }
            break;
 810507a:	e020      	b.n	81050be <_ZN7APIDoIP23extractDataFromResponseEPKhjNS_12EDoIPRequestE+0x322>
                msg.event_type = EVENT_DATA_UPDATE_IHKA_TEMPERATURE_SELECTOR;
 810507c:	230e      	movs	r3, #14
 810507e:	743b      	strb	r3, [r7, #16]
                msg.message_data.ihka_temperature_selector[0] = (dataPayload[0] << 8) | dataPayload[1];
 8105080:	68bb      	ldr	r3, [r7, #8]
 8105082:	781b      	ldrb	r3, [r3, #0]
 8105084:	021b      	lsls	r3, r3, #8
 8105086:	b21a      	sxth	r2, r3
 8105088:	68bb      	ldr	r3, [r7, #8]
 810508a:	3301      	adds	r3, #1
 810508c:	781b      	ldrb	r3, [r3, #0]
 810508e:	b21b      	sxth	r3, r3
 8105090:	4313      	orrs	r3, r2
 8105092:	b21b      	sxth	r3, r3
 8105094:	b29b      	uxth	r3, r3
 8105096:	82bb      	strh	r3, [r7, #20]
                msg.message_data.ihka_temperature_selector[1] = (dataPayload[2] << 8) | dataPayload[3];
 8105098:	68bb      	ldr	r3, [r7, #8]
 810509a:	3302      	adds	r3, #2
 810509c:	781b      	ldrb	r3, [r3, #0]
 810509e:	021b      	lsls	r3, r3, #8
 81050a0:	b21a      	sxth	r2, r3
 81050a2:	68bb      	ldr	r3, [r7, #8]
 81050a4:	3303      	adds	r3, #3
 81050a6:	781b      	ldrb	r3, [r3, #0]
 81050a8:	b21b      	sxth	r3, r3
 81050aa:	4313      	orrs	r3, r2
 81050ac:	b21b      	sxth	r3, r3
 81050ae:	b29b      	uxth	r3, r3
 81050b0:	82fb      	strh	r3, [r7, #22]
            break;
 81050b2:	e004      	b.n	81050be <_ZN7APIDoIP23extractDataFromResponseEPKhjNS_12EDoIPRequestE+0x322>
        }
        default:
            // return, because if data was successfully read then we always need to send a connection event (and in this case we have not)
            return std::nullopt;
 81050b4:	4629      	mov	r1, r5
 81050b6:	68f8      	ldr	r0, [r7, #12]
 81050b8:	f000 f848 	bl	810514c <_ZNSt8optionalI8SMessageEC1ESt9nullopt_t>
 81050bc:	e015      	b.n	81050ea <_ZN7APIDoIP23extractDataFromResponseEPKhjNS_12EDoIPRequestE+0x34e>
    }

    if(sizeMismatch)
 81050be:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 81050c2:	2b00      	cmp	r3, #0
 81050c4:	d00b      	beq.n	81050de <_ZN7APIDoIP23extractDataFromResponseEPKhjNS_12EDoIPRequestE+0x342>
    {
        LOG_DEBUG("Mismatching data size! Read data by identifier could not be completed!");
 81050c6:	f7fb ff5b 	bl	8100f80 <_ZN10LogPrinter8instanceEv>
 81050ca:	4603      	mov	r3, r0
 81050cc:	4909      	ldr	r1, [pc, #36]	@ (81050f4 <_ZN7APIDoIP23extractDataFromResponseEPKhjNS_12EDoIPRequestE+0x358>)
 81050ce:	4618      	mov	r0, r3
 81050d0:	f7fb ff7e 	bl	8100fd0 <_ZN10LogPrinter10printDebugEPKcz>
        return std::nullopt;
 81050d4:	4621      	mov	r1, r4
 81050d6:	68f8      	ldr	r0, [r7, #12]
 81050d8:	f000 f838 	bl	810514c <_ZNSt8optionalI8SMessageEC1ESt9nullopt_t>
 81050dc:	e005      	b.n	81050ea <_ZN7APIDoIP23extractDataFromResponseEPKhjNS_12EDoIPRequestE+0x34e>
    }
    else
    {
        return std::optional<SMessage>(msg);
 81050de:	f107 0310 	add.w	r3, r7, #16
 81050e2:	4619      	mov	r1, r3
 81050e4:	68f8      	ldr	r0, [r7, #12]
 81050e6:	f000 f83f 	bl	8105168 <_ZNSt8optionalI8SMessageEC1IRS0_Lb1EEEOT_>
    }
}
 81050ea:	68f8      	ldr	r0, [r7, #12]
 81050ec:	3730      	adds	r7, #48	@ 0x30
 81050ee:	46bd      	mov	sp, r7
 81050f0:	bdb0      	pop	{r4, r5, r7, pc}
 81050f2:	bf00      	nop
 81050f4:	081272d4 	.word	0x081272d4

081050f8 <_ZNSt22_Optional_payload_baseI8SMessageEC1Ev>:
  template <typename _Tp>
    struct _Optional_payload_base
    {
      using _Stored_type = remove_const_t<_Tp>;

      _Optional_payload_base() = default;
 81050f8:	b580      	push	{r7, lr}
 81050fa:	b082      	sub	sp, #8
 81050fc:	af00      	add	r7, sp, #0
 81050fe:	6078      	str	r0, [r7, #4]
 8105100:	687b      	ldr	r3, [r7, #4]
 8105102:	4618      	mov	r0, r3
 8105104:	f000 f844 	bl	8105190 <_ZNSt22_Optional_payload_baseI8SMessageE8_StorageIS0_Lb1EEC1Ev>
 8105108:	687b      	ldr	r3, [r7, #4]
 810510a:	2200      	movs	r2, #0
 810510c:	771a      	strb	r2, [r3, #28]
 810510e:	687b      	ldr	r3, [r7, #4]
 8105110:	4618      	mov	r0, r3
 8105112:	3708      	adds	r7, #8
 8105114:	46bd      	mov	sp, r7
 8105116:	bd80      	pop	{r7, pc}

08105118 <_ZNSt17_Optional_payloadI8SMessageLb1ELb1ELb1EEC1Ev>:
    struct _Optional_payload<_Tp, true, true, true>
    : _Optional_payload_base<_Tp>
    {
      using _Optional_payload_base<_Tp>::_Optional_payload_base;

      _Optional_payload() = default;
 8105118:	b580      	push	{r7, lr}
 810511a:	b082      	sub	sp, #8
 810511c:	af00      	add	r7, sp, #0
 810511e:	6078      	str	r0, [r7, #4]
 8105120:	687b      	ldr	r3, [r7, #4]
 8105122:	4618      	mov	r0, r3
 8105124:	f7ff ffe8 	bl	81050f8 <_ZNSt22_Optional_payload_baseI8SMessageEC1Ev>
 8105128:	687b      	ldr	r3, [r7, #4]
 810512a:	4618      	mov	r0, r3
 810512c:	3708      	adds	r7, #8
 810512e:	46bd      	mov	sp, r7
 8105130:	bd80      	pop	{r7, pc}

08105132 <_ZNSt14_Optional_baseI8SMessageLb1ELb1EEC1Ev>:
  template<typename _Tp>
    struct _Optional_base<_Tp, true, true>
    : _Optional_base_impl<_Tp, _Optional_base<_Tp>>
    {
      // Constructors for disengaged optionals.
      constexpr _Optional_base() = default;
 8105132:	b580      	push	{r7, lr}
 8105134:	b082      	sub	sp, #8
 8105136:	af00      	add	r7, sp, #0
 8105138:	6078      	str	r0, [r7, #4]
 810513a:	687b      	ldr	r3, [r7, #4]
 810513c:	4618      	mov	r0, r3
 810513e:	f7ff ffeb 	bl	8105118 <_ZNSt17_Optional_payloadI8SMessageLb1ELb1ELb1EEC1Ev>
 8105142:	687b      	ldr	r3, [r7, #4]
 8105144:	4618      	mov	r0, r3
 8105146:	3708      	adds	r7, #8
 8105148:	46bd      	mov	sp, r7
 810514a:	bd80      	pop	{r7, pc}

0810514c <_ZNSt8optionalI8SMessageEC1ESt9nullopt_t>:
    public:
      using value_type = _Tp;

      constexpr optional() noexcept { }

      constexpr optional(nullopt_t) noexcept { }
 810514c:	b580      	push	{r7, lr}
 810514e:	b082      	sub	sp, #8
 8105150:	af00      	add	r7, sp, #0
 8105152:	6078      	str	r0, [r7, #4]
 8105154:	7039      	strb	r1, [r7, #0]
 8105156:	687b      	ldr	r3, [r7, #4]
 8105158:	4618      	mov	r0, r3
 810515a:	f7ff ffea 	bl	8105132 <_ZNSt14_Optional_baseI8SMessageLb1ELb1EEC1Ev>
 810515e:	687b      	ldr	r3, [r7, #4]
 8105160:	4618      	mov	r0, r3
 8105162:	3708      	adds	r7, #8
 8105164:	46bd      	mov	sp, r7
 8105166:	bd80      	pop	{r7, pc}

08105168 <_ZNSt8optionalI8SMessageEC1IRS0_Lb1EEEOT_>:
      template<typename _Up = _Tp,
	       _Requires<__not_self<_Up>, __not_tag<_Up>,
			 is_constructible<_Tp, _Up>,
			 is_convertible<_Up, _Tp>> = true>
	constexpr
	optional(_Up&& __t)
 8105168:	b5b0      	push	{r4, r5, r7, lr}
 810516a:	b082      	sub	sp, #8
 810516c:	af00      	add	r7, sp, #0
 810516e:	6078      	str	r0, [r7, #4]
 8105170:	6039      	str	r1, [r7, #0]
	noexcept(is_nothrow_constructible_v<_Tp, _Up>)
	: _Base(std::in_place, std::forward<_Up>(__t)) { }
 8105172:	687c      	ldr	r4, [r7, #4]
 8105174:	6838      	ldr	r0, [r7, #0]
 8105176:	f000 f816 	bl	81051a6 <_ZSt7forwardIR8SMessageEOT_RNSt16remove_referenceIS2_E4typeE>
 810517a:	4603      	mov	r3, r0
 810517c:	461a      	mov	r2, r3
 810517e:	4629      	mov	r1, r5
 8105180:	4620      	mov	r0, r4
 8105182:	f000 f82c 	bl	81051de <_ZNSt14_Optional_baseI8SMessageLb1ELb1EEC1IJRS0_ELb0EEESt10in_place_tDpOT_>
 8105186:	687b      	ldr	r3, [r7, #4]
 8105188:	4618      	mov	r0, r3
 810518a:	3708      	adds	r7, #8
 810518c:	46bd      	mov	sp, r7
 810518e:	bdb0      	pop	{r4, r5, r7, pc}

08105190 <_ZNSt22_Optional_payload_baseI8SMessageE8_StorageIS0_Lb1EEC1Ev>:
	  constexpr _Storage() noexcept : _M_empty() { }
 8105190:	b480      	push	{r7}
 8105192:	b083      	sub	sp, #12
 8105194:	af00      	add	r7, sp, #0
 8105196:	6078      	str	r0, [r7, #4]
 8105198:	687b      	ldr	r3, [r7, #4]
 810519a:	4618      	mov	r0, r3
 810519c:	370c      	adds	r7, #12
 810519e:	46bd      	mov	sp, r7
 81051a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81051a4:	4770      	bx	lr

081051a6 <_ZSt7forwardIR8SMessageEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 81051a6:	b480      	push	{r7}
 81051a8:	b083      	sub	sp, #12
 81051aa:	af00      	add	r7, sp, #0
 81051ac:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 81051ae:	687b      	ldr	r3, [r7, #4]
 81051b0:	4618      	mov	r0, r3
 81051b2:	370c      	adds	r7, #12
 81051b4:	46bd      	mov	sp, r7
 81051b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81051ba:	4770      	bx	lr

081051bc <_ZNSt17_Optional_payloadI8SMessageLb1ELb1ELb1EECI1St22_Optional_payload_baseIS0_EIJRS0_EEESt10in_place_tDpOT_>:
      using _Optional_payload_base<_Tp>::_Optional_payload_base;
 81051bc:	b590      	push	{r4, r7, lr}
 81051be:	b085      	sub	sp, #20
 81051c0:	af00      	add	r7, sp, #0
 81051c2:	60f8      	str	r0, [r7, #12]
 81051c4:	7239      	strb	r1, [r7, #8]
 81051c6:	607a      	str	r2, [r7, #4]
 81051c8:	68fb      	ldr	r3, [r7, #12]
 81051ca:	687a      	ldr	r2, [r7, #4]
 81051cc:	4621      	mov	r1, r4
 81051ce:	4618      	mov	r0, r3
 81051d0:	f000 f81a 	bl	8105208 <_ZNSt22_Optional_payload_baseI8SMessageEC1IJRS0_EEESt10in_place_tDpOT_>
 81051d4:	68fb      	ldr	r3, [r7, #12]
 81051d6:	4618      	mov	r0, r3
 81051d8:	3714      	adds	r7, #20
 81051da:	46bd      	mov	sp, r7
 81051dc:	bd90      	pop	{r4, r7, pc}

081051de <_ZNSt14_Optional_baseI8SMessageLb1ELb1EEC1IJRS0_ELb0EEESt10in_place_tDpOT_>:
	_Optional_base(in_place_t, _Args&&... __args)
 81051de:	b5b0      	push	{r4, r5, r7, lr}
 81051e0:	b084      	sub	sp, #16
 81051e2:	af00      	add	r7, sp, #0
 81051e4:	60f8      	str	r0, [r7, #12]
 81051e6:	7239      	strb	r1, [r7, #8]
 81051e8:	607a      	str	r2, [r7, #4]
	: _M_payload(in_place, std::forward<_Args>(__args)...)
 81051ea:	68fc      	ldr	r4, [r7, #12]
 81051ec:	6878      	ldr	r0, [r7, #4]
 81051ee:	f7ff ffda 	bl	81051a6 <_ZSt7forwardIR8SMessageEOT_RNSt16remove_referenceIS2_E4typeE>
 81051f2:	4603      	mov	r3, r0
 81051f4:	461a      	mov	r2, r3
 81051f6:	4629      	mov	r1, r5
 81051f8:	4620      	mov	r0, r4
 81051fa:	f7ff ffdf 	bl	81051bc <_ZNSt17_Optional_payloadI8SMessageLb1ELb1ELb1EECI1St22_Optional_payload_baseIS0_EIJRS0_EEESt10in_place_tDpOT_>
	{ }
 81051fe:	68fb      	ldr	r3, [r7, #12]
 8105200:	4618      	mov	r0, r3
 8105202:	3710      	adds	r7, #16
 8105204:	46bd      	mov	sp, r7
 8105206:	bdb0      	pop	{r4, r5, r7, pc}

08105208 <_ZNSt22_Optional_payload_baseI8SMessageEC1IJRS0_EEESt10in_place_tDpOT_>:
	_Optional_payload_base(in_place_t __tag, _Args&&... __args)
 8105208:	b5b0      	push	{r4, r5, r7, lr}
 810520a:	b084      	sub	sp, #16
 810520c:	af00      	add	r7, sp, #0
 810520e:	60f8      	str	r0, [r7, #12]
 8105210:	7239      	strb	r1, [r7, #8]
 8105212:	607a      	str	r2, [r7, #4]
	: _M_payload(__tag, std::forward<_Args>(__args)...),
 8105214:	68fc      	ldr	r4, [r7, #12]
 8105216:	6878      	ldr	r0, [r7, #4]
 8105218:	f7ff ffc5 	bl	81051a6 <_ZSt7forwardIR8SMessageEOT_RNSt16remove_referenceIS2_E4typeE>
 810521c:	4603      	mov	r3, r0
 810521e:	461a      	mov	r2, r3
 8105220:	4629      	mov	r1, r5
 8105222:	4620      	mov	r0, r4
 8105224:	f000 f808 	bl	8105238 <_ZNSt22_Optional_payload_baseI8SMessageE8_StorageIS0_Lb1EEC1IJRS0_EEESt10in_place_tDpOT_>
	  _M_engaged(true)
 8105228:	68fb      	ldr	r3, [r7, #12]
 810522a:	2201      	movs	r2, #1
 810522c:	771a      	strb	r2, [r3, #28]
	{ }
 810522e:	68fb      	ldr	r3, [r7, #12]
 8105230:	4618      	mov	r0, r3
 8105232:	3710      	adds	r7, #16
 8105234:	46bd      	mov	sp, r7
 8105236:	bdb0      	pop	{r4, r5, r7, pc}

08105238 <_ZNSt22_Optional_payload_baseI8SMessageE8_StorageIS0_Lb1EEC1IJRS0_EEESt10in_place_tDpOT_>:
	    _Storage(in_place_t, _Args&&... __args)
 8105238:	b5b0      	push	{r4, r5, r7, lr}
 810523a:	b084      	sub	sp, #16
 810523c:	af00      	add	r7, sp, #0
 810523e:	60f8      	str	r0, [r7, #12]
 8105240:	7239      	strb	r1, [r7, #8]
 8105242:	607a      	str	r2, [r7, #4]
	    : _M_value(std::forward<_Args>(__args)...)
 8105244:	6878      	ldr	r0, [r7, #4]
 8105246:	f7ff ffae 	bl	81051a6 <_ZSt7forwardIR8SMessageEOT_RNSt16remove_referenceIS2_E4typeE>
 810524a:	4602      	mov	r2, r0
 810524c:	68fb      	ldr	r3, [r7, #12]
 810524e:	461c      	mov	r4, r3
 8105250:	4615      	mov	r5, r2
 8105252:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8105254:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8105256:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 810525a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	    { }
 810525e:	68fb      	ldr	r3, [r7, #12]
 8105260:	4618      	mov	r0, r3
 8105262:	3710      	adds	r7, #16
 8105264:	46bd      	mov	sp, r7
 8105266:	bdb0      	pop	{r4, r5, r7, pc}

08105268 <_Z41__static_initialization_and_destruction_0ii>:
 8105268:	b580      	push	{r7, lr}
 810526a:	b0ea      	sub	sp, #424	@ 0x1a8
 810526c:	af04      	add	r7, sp, #16
 810526e:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8105272:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8105276:	6018      	str	r0, [r3, #0]
 8105278:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 810527c:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8105280:	6019      	str	r1, [r3, #0]
 8105282:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8105286:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 810528a:	681b      	ldr	r3, [r3, #0]
 810528c:	2b01      	cmp	r3, #1
 810528e:	f040 824d 	bne.w	810572c <_Z41__static_initialization_and_destruction_0ii+0x4c4>
 8105292:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8105296:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 810529a:	681b      	ldr	r3, [r3, #0]
 810529c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 81052a0:	4293      	cmp	r3, r2
 81052a2:	f040 8243 	bne.w	810572c <_Z41__static_initialization_and_destruction_0ii+0x4c4>
        
        IHKA_EVAPORATOR_TEMPERATURE_SENSOR = EVENT_DATA_UPDATE_IHKA_EVAPORATOR_TEMPERATURE_SENSOR,
        IHKA_TEMPERATURE_SELECTOR = EVENT_DATA_UPDATE_IHKA_TEMPERATURE_SELECTOR,
    };

    const std::unordered_map<EDoIPRequest, std::pair<std::variant<EUDSDID, EDynamicDataIndentifierRequestCode>, EECUAddress>> dataIdentifierMap =
 81052a6:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 81052aa:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 81052ae:	4618      	mov	r0, r3
 81052b0:	23f0      	movs	r3, #240	@ 0xf0
 81052b2:	461a      	mov	r2, r3
 81052b4:	2100      	movs	r1, #0
 81052b6:	f021 fcf1 	bl	8126c9c <memset>
 81052ba:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 81052be:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 81052c2:	4aec      	ldr	r2, [pc, #944]	@ (8105674 <_Z41__static_initialization_and_destruction_0ii+0x40c>)
 81052c4:	605a      	str	r2, [r3, #4]
 81052c6:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 81052ca:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 81052ce:	2201      	movs	r2, #1
 81052d0:	721a      	strb	r2, [r3, #8]
 81052d2:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 81052d6:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 81052da:	2212      	movs	r2, #18
 81052dc:	731a      	strb	r2, [r3, #12]
 81052de:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 81052e2:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 81052e6:	2201      	movs	r2, #1
 81052e8:	741a      	strb	r2, [r3, #16]
 81052ea:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 81052ee:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 81052f2:	4ae1      	ldr	r2, [pc, #900]	@ (8105678 <_Z41__static_initialization_and_destruction_0ii+0x410>)
 81052f4:	615a      	str	r2, [r3, #20]
 81052f6:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 81052fa:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 81052fe:	2201      	movs	r2, #1
 8105300:	761a      	strb	r2, [r3, #24]
 8105302:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8105306:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 810530a:	2212      	movs	r2, #18
 810530c:	771a      	strb	r2, [r3, #28]
 810530e:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8105312:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8105316:	2202      	movs	r2, #2
 8105318:	f883 2020 	strb.w	r2, [r3, #32]
 810531c:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8105320:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8105324:	4ad5      	ldr	r2, [pc, #852]	@ (810567c <_Z41__static_initialization_and_destruction_0ii+0x414>)
 8105326:	625a      	str	r2, [r3, #36]	@ 0x24
 8105328:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 810532c:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8105330:	2201      	movs	r2, #1
 8105332:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
 8105336:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 810533a:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 810533e:	2212      	movs	r2, #18
 8105340:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
 8105344:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8105348:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 810534c:	2203      	movs	r2, #3
 810534e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
 8105352:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8105356:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 810535a:	4ac9      	ldr	r2, [pc, #804]	@ (8105680 <_Z41__static_initialization_and_destruction_0ii+0x418>)
 810535c:	635a      	str	r2, [r3, #52]	@ 0x34
 810535e:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8105362:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8105366:	2201      	movs	r2, #1
 8105368:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
 810536c:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8105370:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8105374:	2212      	movs	r2, #18
 8105376:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 810537a:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 810537e:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8105382:	2204      	movs	r2, #4
 8105384:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8105388:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 810538c:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8105390:	4abc      	ldr	r2, [pc, #752]	@ (8105684 <_Z41__static_initialization_and_destruction_0ii+0x41c>)
 8105392:	645a      	str	r2, [r3, #68]	@ 0x44
 8105394:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8105398:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 810539c:	2201      	movs	r2, #1
 810539e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
 81053a2:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 81053a6:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 81053aa:	2212      	movs	r2, #18
 81053ac:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
 81053b0:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 81053b4:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 81053b8:	2205      	movs	r2, #5
 81053ba:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 81053be:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 81053c2:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 81053c6:	4ab0      	ldr	r2, [pc, #704]	@ (8105688 <_Z41__static_initialization_and_destruction_0ii+0x420>)
 81053c8:	655a      	str	r2, [r3, #84]	@ 0x54
 81053ca:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 81053ce:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 81053d2:	2201      	movs	r2, #1
 81053d4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 81053d8:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 81053dc:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 81053e0:	2212      	movs	r2, #18
 81053e2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
 81053e6:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 81053ea:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 81053ee:	2206      	movs	r2, #6
 81053f0:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
 81053f4:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 81053f8:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 81053fc:	4aa3      	ldr	r2, [pc, #652]	@ (810568c <_Z41__static_initialization_and_destruction_0ii+0x424>)
 81053fe:	665a      	str	r2, [r3, #100]	@ 0x64
 8105400:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8105404:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8105408:	2201      	movs	r2, #1
 810540a:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
 810540e:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8105412:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8105416:	2212      	movs	r2, #18
 8105418:	f883 206c 	strb.w	r2, [r3, #108]	@ 0x6c
 810541c:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8105420:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8105424:	2207      	movs	r2, #7
 8105426:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
 810542a:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 810542e:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8105432:	4a97      	ldr	r2, [pc, #604]	@ (8105690 <_Z41__static_initialization_and_destruction_0ii+0x428>)
 8105434:	675a      	str	r2, [r3, #116]	@ 0x74
 8105436:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 810543a:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 810543e:	2201      	movs	r2, #1
 8105440:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
 8105444:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8105448:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 810544c:	2212      	movs	r2, #18
 810544e:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
 8105452:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8105456:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 810545a:	2208      	movs	r2, #8
 810545c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
 8105460:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8105464:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8105468:	f24d 120d 	movw	r2, #53517	@ 0xd10d
 810546c:	f8a3 2084 	strh.w	r2, [r3, #132]	@ 0x84
 8105470:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8105474:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8105478:	2260      	movs	r2, #96	@ 0x60
 810547a:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c
 810547e:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8105482:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8105486:	2209      	movs	r2, #9
 8105488:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
 810548c:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8105490:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8105494:	f24d 1207 	movw	r2, #53511	@ 0xd107
 8105498:	f8a3 2094 	strh.w	r2, [r3, #148]	@ 0x94
 810549c:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 81054a0:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 81054a4:	2260      	movs	r2, #96	@ 0x60
 81054a6:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
 81054aa:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 81054ae:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 81054b2:	220a      	movs	r2, #10
 81054b4:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
 81054b8:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 81054bc:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 81054c0:	f24d 1212 	movw	r2, #53522	@ 0xd112
 81054c4:	f8a3 20a4 	strh.w	r2, [r3, #164]	@ 0xa4
 81054c8:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 81054cc:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 81054d0:	2260      	movs	r2, #96	@ 0x60
 81054d2:	f883 20ac 	strb.w	r2, [r3, #172]	@ 0xac
 81054d6:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 81054da:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 81054de:	220b      	movs	r2, #11
 81054e0:	f883 20b0 	strb.w	r2, [r3, #176]	@ 0xb0
 81054e4:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 81054e8:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 81054ec:	f24d 1206 	movw	r2, #53510	@ 0xd106
 81054f0:	f8a3 20b4 	strh.w	r2, [r3, #180]	@ 0xb4
 81054f4:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 81054f8:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 81054fc:	2260      	movs	r2, #96	@ 0x60
 81054fe:	f883 20bc 	strb.w	r2, [r3, #188]	@ 0xbc
 8105502:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8105506:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 810550a:	220c      	movs	r2, #12
 810550c:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0
 8105510:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8105514:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8105518:	f24d 121f 	movw	r2, #53535	@ 0xd11f
 810551c:	f8a3 20c4 	strh.w	r2, [r3, #196]	@ 0xc4
 8105520:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8105524:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8105528:	2260      	movs	r2, #96	@ 0x60
 810552a:	f883 20cc 	strb.w	r2, [r3, #204]	@ 0xcc
 810552e:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8105532:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8105536:	220d      	movs	r2, #13
 8105538:	f883 20d0 	strb.w	r2, [r3, #208]	@ 0xd0
 810553c:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8105540:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8105544:	f64d 125c 	movw	r2, #55644	@ 0xd95c
 8105548:	f8a3 20d4 	strh.w	r2, [r3, #212]	@ 0xd4
 810554c:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8105550:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8105554:	2278      	movs	r2, #120	@ 0x78
 8105556:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc
 810555a:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 810555e:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8105562:	220e      	movs	r2, #14
 8105564:	f883 20e0 	strb.w	r2, [r3, #224]	@ 0xe0
 8105568:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 810556c:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8105570:	f64d 1277 	movw	r2, #55671	@ 0xd977
 8105574:	f8a3 20e4 	strh.w	r2, [r3, #228]	@ 0xe4
 8105578:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 810557c:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8105580:	2278      	movs	r2, #120	@ 0x78
 8105582:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
 8105586:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 810558a:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 810558e:	f107 0210 	add.w	r2, r7, #16
 8105592:	601a      	str	r2, [r3, #0]
 8105594:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8105598:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 810559c:	220f      	movs	r2, #15
 810559e:	605a      	str	r2, [r3, #4]
 81055a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 81055a4:	4618      	mov	r0, r3
 81055a6:	f7fc f919 	bl	81017dc <_ZNSaISt4pairIKN7APIDoIP12EDoIPRequestES_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEEEC1Ev>
 81055aa:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 81055ae:	f5a3 72c8 	sub.w	r2, r3, #400	@ 0x190
 81055b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 81055b6:	9302      	str	r3, [sp, #8]
 81055b8:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 81055bc:	9301      	str	r3, [sp, #4]
 81055be:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 81055c2:	9300      	str	r3, [sp, #0]
 81055c4:	2300      	movs	r3, #0
 81055c6:	ca06      	ldmia	r2, {r1, r2}
 81055c8:	4832      	ldr	r0, [pc, #200]	@ (8105694 <_Z41__static_initialization_and_destruction_0ii+0x42c>)
 81055ca:	f7fc f91e 	bl	810180a <_ZNSt13unordered_mapIN7APIDoIP12EDoIPRequestESt4pairISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressESt4hashIS1_ESt8equal_toIS1_ESaIS2_IKS1_S8_EEEC1ESt16initializer_listISE_EjRKSA_RKSC_RKSF_>
 81055ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 81055d2:	4618      	mov	r0, r3
 81055d4:	f7fc f90e 	bl	81017f4 <_ZNSaISt4pairIKN7APIDoIP12EDoIPRequestES_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEEED1Ev>
    void prepareFirstRequestForDynamicData(uint8_t preparedPayload[], EECUAddress targetEcuAddr);
    void prepareSecondRequestForDynamicData(uint8_t preparedPayload[], EECUAddress targetEcuAddr, EDynamicDataIndentifierRequestCode ddirCode);

    std::optional<SMessage> extractDataFromResponse(const uint8_t dataPayload[], size_t size, EDoIPRequest dataType);

    const std::unordered_map<EDoIPRequest, const char*> EDoIPRequest_ToCStringMap = 
 81055d8:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 81055dc:	2278      	movs	r2, #120	@ 0x78
 81055de:	2100      	movs	r1, #0
 81055e0:	4618      	mov	r0, r3
 81055e2:	f021 fb5b 	bl	8126c9c <memset>
 81055e6:	4b2c      	ldr	r3, [pc, #176]	@ (8105698 <_Z41__static_initialization_and_destruction_0ii+0x430>)
 81055e8:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 81055ec:	2301      	movs	r3, #1
 81055ee:	f887 311c 	strb.w	r3, [r7, #284]	@ 0x11c
 81055f2:	4b2a      	ldr	r3, [pc, #168]	@ (810569c <_Z41__static_initialization_and_destruction_0ii+0x434>)
 81055f4:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 81055f8:	2302      	movs	r3, #2
 81055fa:	f887 3124 	strb.w	r3, [r7, #292]	@ 0x124
 81055fe:	4b28      	ldr	r3, [pc, #160]	@ (81056a0 <_Z41__static_initialization_and_destruction_0ii+0x438>)
 8105600:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8105604:	2303      	movs	r3, #3
 8105606:	f887 312c 	strb.w	r3, [r7, #300]	@ 0x12c
 810560a:	4b26      	ldr	r3, [pc, #152]	@ (81056a4 <_Z41__static_initialization_and_destruction_0ii+0x43c>)
 810560c:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8105610:	2304      	movs	r3, #4
 8105612:	f887 3134 	strb.w	r3, [r7, #308]	@ 0x134
 8105616:	4b24      	ldr	r3, [pc, #144]	@ (81056a8 <_Z41__static_initialization_and_destruction_0ii+0x440>)
 8105618:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 810561c:	2305      	movs	r3, #5
 810561e:	f887 313c 	strb.w	r3, [r7, #316]	@ 0x13c
 8105622:	4b22      	ldr	r3, [pc, #136]	@ (81056ac <_Z41__static_initialization_and_destruction_0ii+0x444>)
 8105624:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
 8105628:	2306      	movs	r3, #6
 810562a:	f887 3144 	strb.w	r3, [r7, #324]	@ 0x144
 810562e:	4b20      	ldr	r3, [pc, #128]	@ (81056b0 <_Z41__static_initialization_and_destruction_0ii+0x448>)
 8105630:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
 8105634:	2307      	movs	r3, #7
 8105636:	f887 314c 	strb.w	r3, [r7, #332]	@ 0x14c
 810563a:	4b1e      	ldr	r3, [pc, #120]	@ (81056b4 <_Z41__static_initialization_and_destruction_0ii+0x44c>)
 810563c:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8105640:	2308      	movs	r3, #8
 8105642:	f887 3154 	strb.w	r3, [r7, #340]	@ 0x154
 8105646:	4b1c      	ldr	r3, [pc, #112]	@ (81056b8 <_Z41__static_initialization_and_destruction_0ii+0x450>)
 8105648:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 810564c:	2309      	movs	r3, #9
 810564e:	f887 315c 	strb.w	r3, [r7, #348]	@ 0x15c
 8105652:	4b1a      	ldr	r3, [pc, #104]	@ (81056bc <_Z41__static_initialization_and_destruction_0ii+0x454>)
 8105654:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
 8105658:	230a      	movs	r3, #10
 810565a:	f887 3164 	strb.w	r3, [r7, #356]	@ 0x164
 810565e:	4b18      	ldr	r3, [pc, #96]	@ (81056c0 <_Z41__static_initialization_and_destruction_0ii+0x458>)
 8105660:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
 8105664:	230b      	movs	r3, #11
 8105666:	f887 316c 	strb.w	r3, [r7, #364]	@ 0x16c
 810566a:	4b16      	ldr	r3, [pc, #88]	@ (81056c4 <_Z41__static_initialization_and_destruction_0ii+0x45c>)
 810566c:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
 8105670:	230c      	movs	r3, #12
 8105672:	e029      	b.n	81056c8 <_Z41__static_initialization_and_destruction_0ii+0x460>
 8105674:	44020102 	.word	0x44020102
 8105678:	48070102 	.word	0x48070102
 810567c:	43000101 	.word	0x43000101
 8105680:	46090101 	.word	0x46090101
 8105684:	42040101 	.word	0x42040101
 8105688:	42080102 	.word	0x42080102
 810568c:	481a0102 	.word	0x481a0102
 8105690:	4a290101 	.word	0x4a290101
 8105694:	10000248 	.word	0x10000248
 8105698:	0812731c 	.word	0x0812731c
 810569c:	08127330 	.word	0x08127330
 81056a0:	08127344 	.word	0x08127344
 81056a4:	08127354 	.word	0x08127354
 81056a8:	08127360 	.word	0x08127360
 81056ac:	08127370 	.word	0x08127370
 81056b0:	08127380 	.word	0x08127380
 81056b4:	08127390 	.word	0x08127390
 81056b8:	081273a4 	.word	0x081273a4
 81056bc:	081273b0 	.word	0x081273b0
 81056c0:	081273bc 	.word	0x081273bc
 81056c4:	081273cc 	.word	0x081273cc
 81056c8:	f887 3174 	strb.w	r3, [r7, #372]	@ 0x174
 81056cc:	4b25      	ldr	r3, [pc, #148]	@ (8105764 <_Z41__static_initialization_and_destruction_0ii+0x4fc>)
 81056ce:	f8c7 3178 	str.w	r3, [r7, #376]	@ 0x178
 81056d2:	230d      	movs	r3, #13
 81056d4:	f887 317c 	strb.w	r3, [r7, #380]	@ 0x17c
 81056d8:	4b23      	ldr	r3, [pc, #140]	@ (8105768 <_Z41__static_initialization_and_destruction_0ii+0x500>)
 81056da:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 81056de:	230e      	movs	r3, #14
 81056e0:	f887 3184 	strb.w	r3, [r7, #388]	@ 0x184
 81056e4:	4b21      	ldr	r3, [pc, #132]	@ (810576c <_Z41__static_initialization_and_destruction_0ii+0x504>)
 81056e6:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 81056ea:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 81056ee:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 81056f2:	230f      	movs	r3, #15
 81056f4:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 81056f8:	f507 73ca 	add.w	r3, r7, #404	@ 0x194
 81056fc:	4618      	mov	r0, r3
 81056fe:	f7fc f89d 	bl	810183c <_ZNSaISt4pairIKN7APIDoIP12EDoIPRequestEPKcEEC1Ev>
 8105702:	f507 73ca 	add.w	r3, r7, #404	@ 0x194
 8105706:	9302      	str	r3, [sp, #8]
 8105708:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 810570c:	9301      	str	r3, [sp, #4]
 810570e:	f507 73c6 	add.w	r3, r7, #396	@ 0x18c
 8105712:	9300      	str	r3, [sp, #0]
 8105714:	2300      	movs	r3, #0
 8105716:	f507 7286 	add.w	r2, r7, #268	@ 0x10c
 810571a:	ca06      	ldmia	r2, {r1, r2}
 810571c:	4814      	ldr	r0, [pc, #80]	@ (8105770 <_Z41__static_initialization_and_destruction_0ii+0x508>)
 810571e:	f7fc f8a4 	bl	810186a <_ZNSt13unordered_mapIN7APIDoIP12EDoIPRequestEPKcSt4hashIS1_ESt8equal_toIS1_ESaISt4pairIKS1_S3_EEEC1ESt16initializer_listISA_EjRKS5_RKS7_RKSB_>
 8105722:	f507 73ca 	add.w	r3, r7, #404	@ 0x194
 8105726:	4618      	mov	r0, r3
 8105728:	f7fc f894 	bl	8101854 <_ZNSaISt4pairIKN7APIDoIP12EDoIPRequestEPKcEED1Ev>
 810572c:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8105730:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8105734:	681b      	ldr	r3, [r3, #0]
 8105736:	2b00      	cmp	r3, #0
 8105738:	d10e      	bne.n	8105758 <_Z41__static_initialization_and_destruction_0ii+0x4f0>
 810573a:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 810573e:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8105742:	681b      	ldr	r3, [r3, #0]
 8105744:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8105748:	4293      	cmp	r3, r2
 810574a:	d105      	bne.n	8105758 <_Z41__static_initialization_and_destruction_0ii+0x4f0>
 810574c:	4808      	ldr	r0, [pc, #32]	@ (8105770 <_Z41__static_initialization_and_destruction_0ii+0x508>)
 810574e:	f7fe fce1 	bl	8104114 <_ZNSt13unordered_mapIN7APIDoIP12EDoIPRequestEPKcSt4hashIS1_ESt8equal_toIS1_ESaISt4pairIKS1_S3_EEED1Ev>
    const std::unordered_map<EDoIPRequest, std::pair<std::variant<EUDSDID, EDynamicDataIndentifierRequestCode>, EECUAddress>> dataIdentifierMap =
 8105752:	4808      	ldr	r0, [pc, #32]	@ (8105774 <_Z41__static_initialization_and_destruction_0ii+0x50c>)
 8105754:	f7fe fceb 	bl	810412e <_ZNSt13unordered_mapIN7APIDoIP12EDoIPRequestESt4pairISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressESt4hashIS1_ESt8equal_toIS1_ESaIS2_IKS1_S8_EEED1Ev>
 8105758:	bf00      	nop
 810575a:	f507 77cc 	add.w	r7, r7, #408	@ 0x198
 810575e:	46bd      	mov	sp, r7
 8105760:	bd80      	pop	{r7, pc}
 8105762:	bf00      	nop
 8105764:	081273e4 	.word	0x081273e4
 8105768:	081273f8 	.word	0x081273f8
 810576c:	08127408 	.word	0x08127408
 8105770:	10000264 	.word	0x10000264
 8105774:	10000248 	.word	0x10000248

08105778 <_GLOBAL__sub_I__ZN7APIDoIP18prepareDataRequestEPh11EECUAddress7EUDSDID>:
 8105778:	b580      	push	{r7, lr}
 810577a:	af00      	add	r7, sp, #0
 810577c:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8105780:	2001      	movs	r0, #1
 8105782:	f7ff fd71 	bl	8105268 <_Z41__static_initialization_and_destruction_0ii>
 8105786:	bd80      	pop	{r7, pc}

08105788 <_GLOBAL__sub_D__ZN7APIDoIP18prepareDataRequestEPh11EECUAddress7EUDSDID>:
 8105788:	b580      	push	{r7, lr}
 810578a:	af00      	add	r7, sp, #0
 810578c:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8105790:	2000      	movs	r0, #0
 8105792:	f7ff fd69 	bl	8105268 <_Z41__static_initialization_and_destruction_0ii>
 8105796:	bd80      	pop	{r7, pc}

08105798 <_ZSt26__throw_bad_variant_accessPKc>:
  };

  // Must only be called with a string literal
  inline void
  __throw_bad_variant_access(const char* __what)
  { _GLIBCXX_THROW_OR_ABORT(bad_variant_access(__what)); }
 8105798:	b580      	push	{r7, lr}
 810579a:	b082      	sub	sp, #8
 810579c:	af00      	add	r7, sp, #0
 810579e:	6078      	str	r0, [r7, #4]
 81057a0:	f020 fb2a 	bl	8125df8 <abort>

081057a4 <_ZSt26__throw_bad_variant_accessb>:

  inline void
  __throw_bad_variant_access(bool __valueless)
  {
 81057a4:	b580      	push	{r7, lr}
 81057a6:	b082      	sub	sp, #8
 81057a8:	af00      	add	r7, sp, #0
 81057aa:	4603      	mov	r3, r0
 81057ac:	71fb      	strb	r3, [r7, #7]
    if (__valueless) [[__unlikely__]]
 81057ae:	79fb      	ldrb	r3, [r7, #7]
 81057b0:	2b00      	cmp	r3, #0
 81057b2:	d003      	beq.n	81057bc <_ZSt26__throw_bad_variant_accessb+0x18>
      __throw_bad_variant_access("std::get: variant is valueless");
 81057b4:	4805      	ldr	r0, [pc, #20]	@ (81057cc <_ZSt26__throw_bad_variant_accessb+0x28>)
 81057b6:	f7ff ffef 	bl	8105798 <_ZSt26__throw_bad_variant_accessPKc>
    else
      __throw_bad_variant_access("std::get: wrong index for variant");
  }
 81057ba:	e002      	b.n	81057c2 <_ZSt26__throw_bad_variant_accessb+0x1e>
      __throw_bad_variant_access("std::get: wrong index for variant");
 81057bc:	4804      	ldr	r0, [pc, #16]	@ (81057d0 <_ZSt26__throw_bad_variant_accessb+0x2c>)
 81057be:	f7ff ffeb 	bl	8105798 <_ZSt26__throw_bad_variant_accessPKc>
  }
 81057c2:	bf00      	nop
 81057c4:	3708      	adds	r7, #8
 81057c6:	46bd      	mov	sp, r7
 81057c8:	bd80      	pop	{r7, pc}
 81057ca:	bf00      	nop
 81057cc:	08127418 	.word	0x08127418
 81057d0:	08127438 	.word	0x08127438

081057d4 <_ZSt27__throw_bad_optional_accessv>:
  { _GLIBCXX_THROW_OR_ABORT(bad_optional_access()); }
 81057d4:	b580      	push	{r7, lr}
 81057d6:	af00      	add	r7, sp, #0
 81057d8:	f020 fb0e 	bl	8125df8 <abort>

081057dc <_ZSt24__find_uniq_type_in_packI34EDynamicDataIndentifierRequestCodeJ7EUDSDIDS0_EEjv>:

  // Return the index of _Tp in _Types, if it occurs exactly once.
  // Otherwise, return sizeof...(_Types).
  template<typename _Tp, typename... _Types>
    constexpr size_t
    __find_uniq_type_in_pack()
 81057dc:	b480      	push	{r7}
 81057de:	b085      	sub	sp, #20
 81057e0:	af00      	add	r7, sp, #0
    {
      constexpr size_t __sz = sizeof...(_Types);
 81057e2:	2302      	movs	r3, #2
 81057e4:	607b      	str	r3, [r7, #4]
      constexpr bool __found[__sz] = { __is_same(_Tp, _Types) ... };
 81057e6:	2300      	movs	r3, #0
 81057e8:	703b      	strb	r3, [r7, #0]
 81057ea:	2301      	movs	r3, #1
 81057ec:	707b      	strb	r3, [r7, #1]
      size_t __n = __sz;
 81057ee:	2302      	movs	r3, #2
 81057f0:	60fb      	str	r3, [r7, #12]
      for (size_t __i = 0; __i < __sz; ++__i)
 81057f2:	2300      	movs	r3, #0
 81057f4:	60bb      	str	r3, [r7, #8]
 81057f6:	e00f      	b.n	8105818 <_ZSt24__find_uniq_type_in_packI34EDynamicDataIndentifierRequestCodeJ7EUDSDIDS0_EEjv+0x3c>
	{
	  if (__found[__i])
 81057f8:	463a      	mov	r2, r7
 81057fa:	68bb      	ldr	r3, [r7, #8]
 81057fc:	4413      	add	r3, r2
 81057fe:	781b      	ldrb	r3, [r3, #0]
 8105800:	2b00      	cmp	r3, #0
 8105802:	d006      	beq.n	8105812 <_ZSt24__find_uniq_type_in_packI34EDynamicDataIndentifierRequestCodeJ7EUDSDIDS0_EEjv+0x36>
	    {
	      if (__n < __sz) // more than one _Tp found
 8105804:	68fb      	ldr	r3, [r7, #12]
 8105806:	2b01      	cmp	r3, #1
 8105808:	d801      	bhi.n	810580e <_ZSt24__find_uniq_type_in_packI34EDynamicDataIndentifierRequestCodeJ7EUDSDIDS0_EEjv+0x32>
		return __sz;
 810580a:	2302      	movs	r3, #2
 810580c:	e008      	b.n	8105820 <_ZSt24__find_uniq_type_in_packI34EDynamicDataIndentifierRequestCodeJ7EUDSDIDS0_EEjv+0x44>
	      __n = __i;
 810580e:	68bb      	ldr	r3, [r7, #8]
 8105810:	60fb      	str	r3, [r7, #12]
      for (size_t __i = 0; __i < __sz; ++__i)
 8105812:	68bb      	ldr	r3, [r7, #8]
 8105814:	3301      	adds	r3, #1
 8105816:	60bb      	str	r3, [r7, #8]
 8105818:	68bb      	ldr	r3, [r7, #8]
 810581a:	2b01      	cmp	r3, #1
 810581c:	d9ec      	bls.n	81057f8 <_ZSt24__find_uniq_type_in_packI34EDynamicDataIndentifierRequestCodeJ7EUDSDIDS0_EEjv+0x1c>
	    }
	}
      return __n;
 810581e:	68fb      	ldr	r3, [r7, #12]
    }
 8105820:	4618      	mov	r0, r3
 8105822:	3714      	adds	r7, #20
 8105824:	46bd      	mov	sp, r7
 8105826:	f85d 7b04 	ldr.w	r7, [sp], #4
 810582a:	4770      	bx	lr

0810582c <_ZSt24__find_uniq_type_in_packI7EUDSDIDJS0_34EDynamicDataIndentifierRequestCodeEEjv>:
    __find_uniq_type_in_pack()
 810582c:	b480      	push	{r7}
 810582e:	b085      	sub	sp, #20
 8105830:	af00      	add	r7, sp, #0
      constexpr size_t __sz = sizeof...(_Types);
 8105832:	2302      	movs	r3, #2
 8105834:	607b      	str	r3, [r7, #4]
      constexpr bool __found[__sz] = { __is_same(_Tp, _Types) ... };
 8105836:	2301      	movs	r3, #1
 8105838:	703b      	strb	r3, [r7, #0]
 810583a:	2300      	movs	r3, #0
 810583c:	707b      	strb	r3, [r7, #1]
      size_t __n = __sz;
 810583e:	2302      	movs	r3, #2
 8105840:	60fb      	str	r3, [r7, #12]
      for (size_t __i = 0; __i < __sz; ++__i)
 8105842:	2300      	movs	r3, #0
 8105844:	60bb      	str	r3, [r7, #8]
 8105846:	e00f      	b.n	8105868 <_ZSt24__find_uniq_type_in_packI7EUDSDIDJS0_34EDynamicDataIndentifierRequestCodeEEjv+0x3c>
	  if (__found[__i])
 8105848:	463a      	mov	r2, r7
 810584a:	68bb      	ldr	r3, [r7, #8]
 810584c:	4413      	add	r3, r2
 810584e:	781b      	ldrb	r3, [r3, #0]
 8105850:	2b00      	cmp	r3, #0
 8105852:	d006      	beq.n	8105862 <_ZSt24__find_uniq_type_in_packI7EUDSDIDJS0_34EDynamicDataIndentifierRequestCodeEEjv+0x36>
	      if (__n < __sz) // more than one _Tp found
 8105854:	68fb      	ldr	r3, [r7, #12]
 8105856:	2b01      	cmp	r3, #1
 8105858:	d801      	bhi.n	810585e <_ZSt24__find_uniq_type_in_packI7EUDSDIDJS0_34EDynamicDataIndentifierRequestCodeEEjv+0x32>
		return __sz;
 810585a:	2302      	movs	r3, #2
 810585c:	e008      	b.n	8105870 <_ZSt24__find_uniq_type_in_packI7EUDSDIDJS0_34EDynamicDataIndentifierRequestCodeEEjv+0x44>
	      __n = __i;
 810585e:	68bb      	ldr	r3, [r7, #8]
 8105860:	60fb      	str	r3, [r7, #12]
      for (size_t __i = 0; __i < __sz; ++__i)
 8105862:	68bb      	ldr	r3, [r7, #8]
 8105864:	3301      	adds	r3, #1
 8105866:	60bb      	str	r3, [r7, #8]
 8105868:	68bb      	ldr	r3, [r7, #8]
 810586a:	2b01      	cmp	r3, #1
 810586c:	d9ec      	bls.n	8105848 <_ZSt24__find_uniq_type_in_packI7EUDSDIDJS0_34EDynamicDataIndentifierRequestCodeEEjv+0x1c>
      return __n;
 810586e:	68fb      	ldr	r3, [r7, #12]
    }
 8105870:	4618      	mov	r0, r3
 8105872:	3714      	adds	r7, #20
 8105874:	46bd      	mov	sp, r7
 8105876:	f85d 7b04 	ldr.w	r7, [sp], #4
 810587a:	4770      	bx	lr

0810587c <_ZN17ConnectionManager8instanceEv>:
        EVENT_DATA_REQUESTED,
        EVENT_NO_DATA_TO_REQUEST,
        EVENT_TCP_READ_DATA_BY_ID_RECEIVED
	};

    static ConnectionManager& instance()
 810587c:	b580      	push	{r7, lr}
 810587e:	af00      	add	r7, sp, #0
    {
        static ConnectionManager connMgrInstance;
 8105880:	4b10      	ldr	r3, [pc, #64]	@ (81058c4 <_ZN17ConnectionManager8instanceEv+0x48>)
 8105882:	681b      	ldr	r3, [r3, #0]
 8105884:	f3bf 8f5b 	dmb	ish
 8105888:	f003 0301 	and.w	r3, r3, #1
 810588c:	2b00      	cmp	r3, #0
 810588e:	bf0c      	ite	eq
 8105890:	2301      	moveq	r3, #1
 8105892:	2300      	movne	r3, #0
 8105894:	b2db      	uxtb	r3, r3
 8105896:	2b00      	cmp	r3, #0
 8105898:	d010      	beq.n	81058bc <_ZN17ConnectionManager8instanceEv+0x40>
 810589a:	480a      	ldr	r0, [pc, #40]	@ (81058c4 <_ZN17ConnectionManager8instanceEv+0x48>)
 810589c:	f020 f876 	bl	812598c <__cxa_guard_acquire>
 81058a0:	4603      	mov	r3, r0
 81058a2:	2b00      	cmp	r3, #0
 81058a4:	bf14      	ite	ne
 81058a6:	2301      	movne	r3, #1
 81058a8:	2300      	moveq	r3, #0
 81058aa:	b2db      	uxtb	r3, r3
 81058ac:	2b00      	cmp	r3, #0
 81058ae:	d005      	beq.n	81058bc <_ZN17ConnectionManager8instanceEv+0x40>
 81058b0:	4805      	ldr	r0, [pc, #20]	@ (81058c8 <_ZN17ConnectionManager8instanceEv+0x4c>)
 81058b2:	f000 f80b 	bl	81058cc <_ZN17ConnectionManagerC1Ev>
 81058b6:	4803      	ldr	r0, [pc, #12]	@ (81058c4 <_ZN17ConnectionManager8instanceEv+0x48>)
 81058b8:	f020 f874 	bl	81259a4 <__cxa_guard_release>
        return connMgrInstance;
 81058bc:	4b02      	ldr	r3, [pc, #8]	@ (81058c8 <_ZN17ConnectionManager8instanceEv+0x4c>)
    }
 81058be:	4618      	mov	r0, r3
 81058c0:	bd80      	pop	{r7, pc}
 81058c2:	bf00      	nop
 81058c4:	100002cc 	.word	0x100002cc
 81058c8:	100002b8 	.word	0x100002b8

081058cc <_ZN17ConnectionManagerC1Ev>:

    void setSendingDataByUART(bool onoff);

private:

    ConnectionManager(){};
 81058cc:	b480      	push	{r7}
 81058ce:	b083      	sub	sp, #12
 81058d0:	af00      	add	r7, sp, #0
 81058d2:	6078      	str	r0, [r7, #4]
 81058d4:	687b      	ldr	r3, [r7, #4]
 81058d6:	2200      	movs	r2, #0
 81058d8:	605a      	str	r2, [r3, #4]
 81058da:	687b      	ldr	r3, [r7, #4]
 81058dc:	2200      	movs	r2, #0
 81058de:	609a      	str	r2, [r3, #8]
 81058e0:	687b      	ldr	r3, [r7, #4]
 81058e2:	22ff      	movs	r2, #255	@ 0xff
 81058e4:	731a      	strb	r2, [r3, #12]
 81058e6:	687b      	ldr	r3, [r7, #4]
 81058e8:	2200      	movs	r2, #0
 81058ea:	735a      	strb	r2, [r3, #13]
 81058ec:	687b      	ldr	r3, [r7, #4]
 81058ee:	2200      	movs	r2, #0
 81058f0:	739a      	strb	r2, [r3, #14]
 81058f2:	687b      	ldr	r3, [r7, #4]
 81058f4:	2200      	movs	r2, #0
 81058f6:	611a      	str	r2, [r3, #16]
 81058f8:	687b      	ldr	r3, [r7, #4]
 81058fa:	4618      	mov	r0, r3
 81058fc:	370c      	adds	r7, #12
 81058fe:	46bd      	mov	sp, r7
 8105900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105904:	4770      	bx	lr

08105906 <tcpRecvCb>:

extern QueueHandle_t queueToEventManagerCM4;
extern QueueHandle_t connectionEventsQueue;

extern "C" err_t tcpRecvCb(void *arg, struct tcp_pcb *tpcb, struct pbuf *p, err_t err)
{
 8105906:	b580      	push	{r7, lr}
 8105908:	b088      	sub	sp, #32
 810590a:	af02      	add	r7, sp, #8
 810590c:	60f8      	str	r0, [r7, #12]
 810590e:	60b9      	str	r1, [r7, #8]
 8105910:	607a      	str	r2, [r7, #4]
 8105912:	70fb      	strb	r3, [r7, #3]
    ConnectionManager& connMgrInstance = ConnectionManager::instance();
 8105914:	f7ff ffb2 	bl	810587c <_ZN17ConnectionManager8instanceEv>
 8105918:	6178      	str	r0, [r7, #20]
    connMgrInstance.HandleTcpRecvCb(arg, tpcb, p, err);
 810591a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 810591e:	9300      	str	r3, [sp, #0]
 8105920:	687b      	ldr	r3, [r7, #4]
 8105922:	68ba      	ldr	r2, [r7, #8]
 8105924:	68f9      	ldr	r1, [r7, #12]
 8105926:	6978      	ldr	r0, [r7, #20]
 8105928:	f000 fc80 	bl	810622c <_ZN17ConnectionManager15HandleTcpRecvCbEPvP7tcp_pcbP4pbufa>
    return ERR_OK;
 810592c:	2300      	movs	r3, #0
}
 810592e:	4618      	mov	r0, r3
 8105930:	3718      	adds	r7, #24
 8105932:	46bd      	mov	sp, r7
 8105934:	bd80      	pop	{r7, pc}

08105936 <tcpConnectCb>:

extern "C" err_t tcpConnectCb(void *arg, struct tcp_pcb *tpcb, err_t err)
{
 8105936:	b580      	push	{r7, lr}
 8105938:	b086      	sub	sp, #24
 810593a:	af00      	add	r7, sp, #0
 810593c:	60f8      	str	r0, [r7, #12]
 810593e:	60b9      	str	r1, [r7, #8]
 8105940:	4613      	mov	r3, r2
 8105942:	71fb      	strb	r3, [r7, #7]
    ConnectionManager& connMgrInstance = ConnectionManager::instance();
 8105944:	f7ff ff9a 	bl	810587c <_ZN17ConnectionManager8instanceEv>
 8105948:	6178      	str	r0, [r7, #20]
    connMgrInstance.HandleTcpConnectCb(arg, tpcb, err);
 810594a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 810594e:	68ba      	ldr	r2, [r7, #8]
 8105950:	68f9      	ldr	r1, [r7, #12]
 8105952:	6978      	ldr	r0, [r7, #20]
 8105954:	f000 fd66 	bl	8106424 <_ZN17ConnectionManager18HandleTcpConnectCbEPvP7tcp_pcba>
    return ERR_OK;
 8105958:	2300      	movs	r3, #0
}
 810595a:	4618      	mov	r0, r3
 810595c:	3718      	adds	r7, #24
 810595e:	46bd      	mov	sp, r7
 8105960:	bd80      	pop	{r7, pc}

08105962 <tcpErrCb>:

extern "C" void tcpErrCb(void *arg, err_t err)
{
 8105962:	b580      	push	{r7, lr}
 8105964:	b084      	sub	sp, #16
 8105966:	af00      	add	r7, sp, #0
 8105968:	6078      	str	r0, [r7, #4]
 810596a:	460b      	mov	r3, r1
 810596c:	70fb      	strb	r3, [r7, #3]
    ConnectionManager& connMgrInstance = ConnectionManager::instance();
 810596e:	f7ff ff85 	bl	810587c <_ZN17ConnectionManager8instanceEv>
 8105972:	60f8      	str	r0, [r7, #12]
    connMgrInstance.HandleTcpErrCb(arg, err);
 8105974:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8105978:	461a      	mov	r2, r3
 810597a:	6879      	ldr	r1, [r7, #4]
 810597c:	68f8      	ldr	r0, [r7, #12]
 810597e:	f000 fdaf 	bl	81064e0 <_ZN17ConnectionManager14HandleTcpErrCbEPva>
}
 8105982:	bf00      	nop
 8105984:	3710      	adds	r7, #16
 8105986:	46bd      	mov	sp, r7
 8105988:	bd80      	pop	{r7, pc}

0810598a <udpRecvCb>:

extern "C" void udpRecvCb(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 810598a:	b580      	push	{r7, lr}
 810598c:	b088      	sub	sp, #32
 810598e:	af02      	add	r7, sp, #8
 8105990:	60f8      	str	r0, [r7, #12]
 8105992:	60b9      	str	r1, [r7, #8]
 8105994:	607a      	str	r2, [r7, #4]
 8105996:	603b      	str	r3, [r7, #0]
    ConnectionManager& connMgrInstance = ConnectionManager::instance();
 8105998:	f7ff ff70 	bl	810587c <_ZN17ConnectionManager8instanceEv>
 810599c:	6178      	str	r0, [r7, #20]
    connMgrInstance.HandleUdpRecvCb(arg, pcb, p, addr, port);
 810599e:	8c3b      	ldrh	r3, [r7, #32]
 81059a0:	9301      	str	r3, [sp, #4]
 81059a2:	683b      	ldr	r3, [r7, #0]
 81059a4:	9300      	str	r3, [sp, #0]
 81059a6:	687b      	ldr	r3, [r7, #4]
 81059a8:	68ba      	ldr	r2, [r7, #8]
 81059aa:	68f9      	ldr	r1, [r7, #12]
 81059ac:	6978      	ldr	r0, [r7, #20]
 81059ae:	f000 f925 	bl	8105bfc <_ZN17ConnectionManager15HandleUdpRecvCbEPvP7udp_pcbP4pbufPK8ip4_addrt>
}
 81059b2:	bf00      	nop
 81059b4:	3718      	adds	r7, #24
 81059b6:	46bd      	mov	sp, r7
 81059b8:	bd80      	pop	{r7, pc}
	...

081059bc <_ZN17ConnectionManager8sendSSDPEv>:

bool ConnectionManager::sendSSDP()
{
 81059bc:	b580      	push	{r7, lr}
 81059be:	b086      	sub	sp, #24
 81059c0:	af00      	add	r7, sp, #0
 81059c2:	6078      	str	r0, [r7, #4]
    constexpr const char *ssdpRequest =
 81059c4:	4b23      	ldr	r3, [pc, #140]	@ (8105a54 <_ZN17ConnectionManager8sendSSDPEv+0x98>)
 81059c6:	617b      	str	r3, [r7, #20]

    ip_addr_t multicastIp;
    struct pbuf *p;
    
    // Set the multicast address for SSDP
    ipaddr_aton(SSDP_MULTICAST_IP, &multicastIp);
 81059c8:	f107 030c 	add.w	r3, r7, #12
 81059cc:	4619      	mov	r1, r3
 81059ce:	4822      	ldr	r0, [pc, #136]	@ (8105a58 <_ZN17ConnectionManager8sendSSDPEv+0x9c>)
 81059d0:	f016 f916 	bl	811bc00 <ip4addr_aton>

    // Allocate buffer for SSDP data
    p = pbuf_alloc(PBUF_TRANSPORT, strlen(ssdpRequest), PBUF_RAM);
 81059d4:	f44f 7220 	mov.w	r2, #640	@ 0x280
 81059d8:	215e      	movs	r1, #94	@ 0x5e
 81059da:	2036      	movs	r0, #54	@ 0x36
 81059dc:	f018 f9bc 	bl	811dd58 <pbuf_alloc>
 81059e0:	6138      	str	r0, [r7, #16]
    if (!p)
 81059e2:	693b      	ldr	r3, [r7, #16]
 81059e4:	2b00      	cmp	r3, #0
 81059e6:	d108      	bne.n	81059fa <_ZN17ConnectionManager8sendSSDPEv+0x3e>
    {
        LOG_DEBUG("Failed to allocate pbuf for SSDP.");
 81059e8:	f7fb faca 	bl	8100f80 <_ZN10LogPrinter8instanceEv>
 81059ec:	4603      	mov	r3, r0
 81059ee:	491b      	ldr	r1, [pc, #108]	@ (8105a5c <_ZN17ConnectionManager8sendSSDPEv+0xa0>)
 81059f0:	4618      	mov	r0, r3
 81059f2:	f7fb faed 	bl	8100fd0 <_ZN10LogPrinter10printDebugEPKcz>
        return false;
 81059f6:	2300      	movs	r3, #0
 81059f8:	e027      	b.n	8105a4a <_ZN17ConnectionManager8sendSSDPEv+0x8e>
    }

    // Copy data to the buffer
    memcpy(p->payload, ssdpRequest, strlen(ssdpRequest));
 81059fa:	693b      	ldr	r3, [r7, #16]
 81059fc:	685b      	ldr	r3, [r3, #4]
 81059fe:	225e      	movs	r2, #94	@ 0x5e
 8105a00:	4914      	ldr	r1, [pc, #80]	@ (8105a54 <_ZN17ConnectionManager8sendSSDPEv+0x98>)
 8105a02:	4618      	mov	r0, r3
 8105a04:	f021 fa99 	bl	8126f3a <memcpy>

    // Send SSDP
    if (udp_sendto(udp_pcb, p, &multicastIp, 1900) != ERR_OK)
 8105a08:	687b      	ldr	r3, [r7, #4]
 8105a0a:	6858      	ldr	r0, [r3, #4]
 8105a0c:	f107 020c 	add.w	r2, r7, #12
 8105a10:	f240 736c 	movw	r3, #1900	@ 0x76c
 8105a14:	6939      	ldr	r1, [r7, #16]
 8105a16:	f01f fccd 	bl	81253b4 <udp_sendto>
 8105a1a:	4603      	mov	r3, r0
 8105a1c:	2b00      	cmp	r3, #0
 8105a1e:	bf14      	ite	ne
 8105a20:	2301      	movne	r3, #1
 8105a22:	2300      	moveq	r3, #0
 8105a24:	b2db      	uxtb	r3, r3
 8105a26:	2b00      	cmp	r3, #0
 8105a28:	d00b      	beq.n	8105a42 <_ZN17ConnectionManager8sendSSDPEv+0x86>
    {
        LOG_DEBUG("Failed to send SSDP request.");
 8105a2a:	f7fb faa9 	bl	8100f80 <_ZN10LogPrinter8instanceEv>
 8105a2e:	4603      	mov	r3, r0
 8105a30:	490b      	ldr	r1, [pc, #44]	@ (8105a60 <_ZN17ConnectionManager8sendSSDPEv+0xa4>)
 8105a32:	4618      	mov	r0, r3
 8105a34:	f7fb facc 	bl	8100fd0 <_ZN10LogPrinter10printDebugEPKcz>
        pbuf_free(p);
 8105a38:	6938      	ldr	r0, [r7, #16]
 8105a3a:	f018 fc6f 	bl	811e31c <pbuf_free>
        return false;
 8105a3e:	2300      	movs	r3, #0
 8105a40:	e003      	b.n	8105a4a <_ZN17ConnectionManager8sendSSDPEv+0x8e>
    }

    // Release the buffer
    pbuf_free(p);
 8105a42:	6938      	ldr	r0, [r7, #16]
 8105a44:	f018 fc6a 	bl	811e31c <pbuf_free>
    return true;
 8105a48:	2301      	movs	r3, #1
}
 8105a4a:	4618      	mov	r0, r3
 8105a4c:	3718      	adds	r7, #24
 8105a4e:	46bd      	mov	sp, r7
 8105a50:	bd80      	pop	{r7, pc}
 8105a52:	bf00      	nop
 8105a54:	0812745c 	.word	0x0812745c
 8105a58:	081274bc 	.word	0x081274bc
 8105a5c:	081274cc 	.word	0x081274cc
 8105a60:	081274f0 	.word	0x081274f0

08105a64 <_ZN17ConnectionManager7sendSLPEv>:

bool ConnectionManager::sendSLP()
{
 8105a64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8105a66:	b08f      	sub	sp, #60	@ 0x3c
 8105a68:	af00      	add	r7, sp, #0
 8105a6a:	6078      	str	r0, [r7, #4]
    uint8_t slpRequest[36] =
 8105a6c:	4b30      	ldr	r3, [pc, #192]	@ (8105b30 <_ZN17ConnectionManager7sendSLPEv+0xcc>)
 8105a6e:	f107 0410 	add.w	r4, r7, #16
 8105a72:	461d      	mov	r5, r3
 8105a74:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8105a76:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8105a78:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8105a7a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8105a7c:	682b      	ldr	r3, [r5, #0]
 8105a7e:	8023      	strh	r3, [r4, #0]
 8105a80:	2300      	movs	r3, #0
 8105a82:	867b      	strh	r3, [r7, #50]	@ 0x32
    };
    ip_addr_t broadcastIp;
    struct pbuf *p;

    // Set the broadcast address
    ipaddr_aton(BROADCAST_IP, &broadcastIp);
 8105a84:	f107 030c 	add.w	r3, r7, #12
 8105a88:	4619      	mov	r1, r3
 8105a8a:	482a      	ldr	r0, [pc, #168]	@ (8105b34 <_ZN17ConnectionManager7sendSLPEv+0xd0>)
 8105a8c:	f016 f8b8 	bl	811bc00 <ip4addr_aton>

    // Allocate buffer for SLP data
    p = pbuf_alloc(PBUF_TRANSPORT, sizeof(slpRequest), PBUF_RAM);
 8105a90:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8105a94:	2124      	movs	r1, #36	@ 0x24
 8105a96:	2036      	movs	r0, #54	@ 0x36
 8105a98:	f018 f95e 	bl	811dd58 <pbuf_alloc>
 8105a9c:	6378      	str	r0, [r7, #52]	@ 0x34
    if (!p)
 8105a9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8105aa0:	2b00      	cmp	r3, #0
 8105aa2:	d108      	bne.n	8105ab6 <_ZN17ConnectionManager7sendSLPEv+0x52>
    {
        LOG_DEBUG("Failed to allocate pbuf for SLP.");
 8105aa4:	f7fb fa6c 	bl	8100f80 <_ZN10LogPrinter8instanceEv>
 8105aa8:	4603      	mov	r3, r0
 8105aaa:	4923      	ldr	r1, [pc, #140]	@ (8105b38 <_ZN17ConnectionManager7sendSLPEv+0xd4>)
 8105aac:	4618      	mov	r0, r3
 8105aae:	f7fb fa8f 	bl	8100fd0 <_ZN10LogPrinter10printDebugEPKcz>
        return false;
 8105ab2:	2300      	movs	r3, #0
 8105ab4:	e037      	b.n	8105b26 <_ZN17ConnectionManager7sendSLPEv+0xc2>
    }

    // Copy data to the buffer
    memcpy(p->payload, slpRequest, sizeof(slpRequest));
 8105ab6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8105ab8:	685b      	ldr	r3, [r3, #4]
 8105aba:	f107 0410 	add.w	r4, r7, #16
 8105abe:	469c      	mov	ip, r3
 8105ac0:	f104 0e20 	add.w	lr, r4, #32
 8105ac4:	4665      	mov	r5, ip
 8105ac6:	4626      	mov	r6, r4
 8105ac8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8105aca:	6028      	str	r0, [r5, #0]
 8105acc:	6069      	str	r1, [r5, #4]
 8105ace:	60aa      	str	r2, [r5, #8]
 8105ad0:	60eb      	str	r3, [r5, #12]
 8105ad2:	3410      	adds	r4, #16
 8105ad4:	f10c 0c10 	add.w	ip, ip, #16
 8105ad8:	4574      	cmp	r4, lr
 8105ada:	d1f3      	bne.n	8105ac4 <_ZN17ConnectionManager7sendSLPEv+0x60>
 8105adc:	4663      	mov	r3, ip
 8105ade:	4622      	mov	r2, r4
 8105ae0:	6810      	ldr	r0, [r2, #0]
 8105ae2:	6018      	str	r0, [r3, #0]

    // Send SLP
    if (udp_sendto(udp_pcb, p, &broadcastIp, SLP_PORT) != ERR_OK)
 8105ae4:	687b      	ldr	r3, [r7, #4]
 8105ae6:	6858      	ldr	r0, [r3, #4]
 8105ae8:	f107 020c 	add.w	r2, r7, #12
 8105aec:	f240 13ab 	movw	r3, #427	@ 0x1ab
 8105af0:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8105af2:	f01f fc5f 	bl	81253b4 <udp_sendto>
 8105af6:	4603      	mov	r3, r0
 8105af8:	2b00      	cmp	r3, #0
 8105afa:	bf14      	ite	ne
 8105afc:	2301      	movne	r3, #1
 8105afe:	2300      	moveq	r3, #0
 8105b00:	b2db      	uxtb	r3, r3
 8105b02:	2b00      	cmp	r3, #0
 8105b04:	d00b      	beq.n	8105b1e <_ZN17ConnectionManager7sendSLPEv+0xba>
    {
        LOG_DEBUG("Failed to send SLP request.");
 8105b06:	f7fb fa3b 	bl	8100f80 <_ZN10LogPrinter8instanceEv>
 8105b0a:	4603      	mov	r3, r0
 8105b0c:	490b      	ldr	r1, [pc, #44]	@ (8105b3c <_ZN17ConnectionManager7sendSLPEv+0xd8>)
 8105b0e:	4618      	mov	r0, r3
 8105b10:	f7fb fa5e 	bl	8100fd0 <_ZN10LogPrinter10printDebugEPKcz>
        pbuf_free(p);
 8105b14:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8105b16:	f018 fc01 	bl	811e31c <pbuf_free>
        return false;
 8105b1a:	2300      	movs	r3, #0
 8105b1c:	e003      	b.n	8105b26 <_ZN17ConnectionManager7sendSLPEv+0xc2>
    }

    // Release the buffer
    pbuf_free(p);
 8105b1e:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8105b20:	f018 fbfc 	bl	811e31c <pbuf_free>
    return true;
 8105b24:	2301      	movs	r3, #1
}
 8105b26:	4618      	mov	r0, r3
 8105b28:	373c      	adds	r7, #60	@ 0x3c
 8105b2a:	46bd      	mov	sp, r7
 8105b2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8105b2e:	bf00      	nop
 8105b30:	08127560 	.word	0x08127560
 8105b34:	08127510 	.word	0x08127510
 8105b38:	08127520 	.word	0x08127520
 8105b3c:	08127544 	.word	0x08127544

08105b40 <_ZN17ConnectionManager12sendDoIPInitEv>:


bool ConnectionManager::sendDoIPInit()
{
 8105b40:	b580      	push	{r7, lr}
 8105b42:	b086      	sub	sp, #24
 8105b44:	af00      	add	r7, sp, #0
 8105b46:	6078      	str	r0, [r7, #4]
    const char doipRequest[] = "\x00\x00\x00\x00\x00\x11";
 8105b48:	4a28      	ldr	r2, [pc, #160]	@ (8105bec <_ZN17ConnectionManager12sendDoIPInitEv+0xac>)
 8105b4a:	f107 030c 	add.w	r3, r7, #12
 8105b4e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8105b52:	6018      	str	r0, [r3, #0]
 8105b54:	3304      	adds	r3, #4
 8105b56:	8019      	strh	r1, [r3, #0]
 8105b58:	3302      	adds	r3, #2
 8105b5a:	0c0a      	lsrs	r2, r1, #16
 8105b5c:	701a      	strb	r2, [r3, #0]
    ip_addr_t broadcastIp;
    struct pbuf *p;

    // Set the broadcast address for DoIP
    ipaddr_aton(BROADCAST_IP, &broadcastIp);
 8105b5e:	f107 0308 	add.w	r3, r7, #8
 8105b62:	4619      	mov	r1, r3
 8105b64:	4822      	ldr	r0, [pc, #136]	@ (8105bf0 <_ZN17ConnectionManager12sendDoIPInitEv+0xb0>)
 8105b66:	f016 f84b 	bl	811bc00 <ip4addr_aton>

    // Allocate buffer for DoIP data
    p = pbuf_alloc(PBUF_TRANSPORT, sizeof(doipRequest) - 1, PBUF_RAM);
 8105b6a:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8105b6e:	2106      	movs	r1, #6
 8105b70:	2036      	movs	r0, #54	@ 0x36
 8105b72:	f018 f8f1 	bl	811dd58 <pbuf_alloc>
 8105b76:	6178      	str	r0, [r7, #20]
    if (!p)
 8105b78:	697b      	ldr	r3, [r7, #20]
 8105b7a:	2b00      	cmp	r3, #0
 8105b7c:	d108      	bne.n	8105b90 <_ZN17ConnectionManager12sendDoIPInitEv+0x50>
    {
        LOG_DEBUG("Failed to allocate pbuf for DoIP init.");
 8105b7e:	f7fb f9ff 	bl	8100f80 <_ZN10LogPrinter8instanceEv>
 8105b82:	4603      	mov	r3, r0
 8105b84:	491b      	ldr	r1, [pc, #108]	@ (8105bf4 <_ZN17ConnectionManager12sendDoIPInitEv+0xb4>)
 8105b86:	4618      	mov	r0, r3
 8105b88:	f7fb fa22 	bl	8100fd0 <_ZN10LogPrinter10printDebugEPKcz>
        return false;
 8105b8c:	2300      	movs	r3, #0
 8105b8e:	e028      	b.n	8105be2 <_ZN17ConnectionManager12sendDoIPInitEv+0xa2>
    }

    // Copy data to the buffer
    memcpy(p->payload, doipRequest, sizeof(doipRequest) - 1);
 8105b90:	697b      	ldr	r3, [r7, #20]
 8105b92:	685b      	ldr	r3, [r3, #4]
 8105b94:	f107 010c 	add.w	r1, r7, #12
 8105b98:	2206      	movs	r2, #6
 8105b9a:	4618      	mov	r0, r3
 8105b9c:	f021 f9cd 	bl	8126f3a <memcpy>

    // Send DoIP
    if (udp_sendto(udp_pcb, p, &broadcastIp, UDP_PORT) != ERR_OK)
 8105ba0:	687b      	ldr	r3, [r7, #4]
 8105ba2:	6858      	ldr	r0, [r3, #4]
 8105ba4:	f107 0208 	add.w	r2, r7, #8
 8105ba8:	f641 239b 	movw	r3, #6811	@ 0x1a9b
 8105bac:	6979      	ldr	r1, [r7, #20]
 8105bae:	f01f fc01 	bl	81253b4 <udp_sendto>
 8105bb2:	4603      	mov	r3, r0
 8105bb4:	2b00      	cmp	r3, #0
 8105bb6:	bf14      	ite	ne
 8105bb8:	2301      	movne	r3, #1
 8105bba:	2300      	moveq	r3, #0
 8105bbc:	b2db      	uxtb	r3, r3
 8105bbe:	2b00      	cmp	r3, #0
 8105bc0:	d00b      	beq.n	8105bda <_ZN17ConnectionManager12sendDoIPInitEv+0x9a>
    {
        LOG_DEBUG("Failed to send DoIP init request.");
 8105bc2:	f7fb f9dd 	bl	8100f80 <_ZN10LogPrinter8instanceEv>
 8105bc6:	4603      	mov	r3, r0
 8105bc8:	490b      	ldr	r1, [pc, #44]	@ (8105bf8 <_ZN17ConnectionManager12sendDoIPInitEv+0xb8>)
 8105bca:	4618      	mov	r0, r3
 8105bcc:	f7fb fa00 	bl	8100fd0 <_ZN10LogPrinter10printDebugEPKcz>
        pbuf_free(p);
 8105bd0:	6978      	ldr	r0, [r7, #20]
 8105bd2:	f018 fba3 	bl	811e31c <pbuf_free>
        return false;
 8105bd6:	2300      	movs	r3, #0
 8105bd8:	e003      	b.n	8105be2 <_ZN17ConnectionManager12sendDoIPInitEv+0xa2>
    }

    // Release the buffer
    pbuf_free(p);
 8105bda:	6978      	ldr	r0, [r7, #20]
 8105bdc:	f018 fb9e 	bl	811e31c <pbuf_free>
    return true;
 8105be0:	2301      	movs	r3, #1
}
 8105be2:	4618      	mov	r0, r3
 8105be4:	3718      	adds	r7, #24
 8105be6:	46bd      	mov	sp, r7
 8105be8:	bd80      	pop	{r7, pc}
 8105bea:	bf00      	nop
 8105bec:	081275d0 	.word	0x081275d0
 8105bf0:	08127510 	.word	0x08127510
 8105bf4:	08127584 	.word	0x08127584
 8105bf8:	081275ac 	.word	0x081275ac

08105bfc <_ZN17ConnectionManager15HandleUdpRecvCbEPvP7udp_pcbP4pbufPK8ip4_addrt>:

void ConnectionManager::HandleUdpRecvCb(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 8105bfc:	b590      	push	{r4, r7, lr}
 8105bfe:	b0a5      	sub	sp, #148	@ 0x94
 8105c00:	af00      	add	r7, sp, #0
 8105c02:	60f8      	str	r0, [r7, #12]
 8105c04:	60b9      	str	r1, [r7, #8]
 8105c06:	607a      	str	r2, [r7, #4]
 8105c08:	603b      	str	r3, [r7, #0]
    if (!p)
 8105c0a:	683b      	ldr	r3, [r7, #0]
 8105c0c:	2b00      	cmp	r3, #0
 8105c0e:	d107      	bne.n	8105c20 <_ZN17ConnectionManager15HandleUdpRecvCbEPvP7udp_pcbP4pbufPK8ip4_addrt+0x24>
    {
        LOG_DEBUG("No data received, connection might be closed.");
 8105c10:	f7fb f9b6 	bl	8100f80 <_ZN10LogPrinter8instanceEv>
 8105c14:	4603      	mov	r3, r0
 8105c16:	499f      	ldr	r1, [pc, #636]	@ (8105e94 <_ZN17ConnectionManager15HandleUdpRecvCbEPvP7udp_pcbP4pbufPK8ip4_addrt+0x298>)
 8105c18:	4618      	mov	r0, r3
 8105c1a:	f7fb f9d9 	bl	8100fd0 <_ZN10LogPrinter10printDebugEPKcz>

        return;
 8105c1e:	e1ca      	b.n	8105fb6 <_ZN17ConnectionManager15HandleUdpRecvCbEPvP7udp_pcbP4pbufPK8ip4_addrt+0x3ba>
    }

    LOG_DEBUG("Received UDP message from %s:%d", ipaddr_ntoa(addr), port);
 8105c20:	f7fb f9ae 	bl	8100f80 <_ZN10LogPrinter8instanceEv>
 8105c24:	4604      	mov	r4, r0
 8105c26:	f8d7 00a0 	ldr.w	r0, [r7, #160]	@ 0xa0
 8105c2a:	f016 f913 	bl	811be54 <ip4addr_ntoa>
 8105c2e:	4602      	mov	r2, r0
 8105c30:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	@ 0xa4
 8105c34:	4998      	ldr	r1, [pc, #608]	@ (8105e98 <_ZN17ConnectionManager15HandleUdpRecvCbEPvP7udp_pcbP4pbufPK8ip4_addrt+0x29c>)
 8105c36:	4620      	mov	r0, r4
 8105c38:	f7fb f9ca 	bl	8100fd0 <_ZN10LogPrinter10printDebugEPKcz>

    // Validate payload length
    if (p->len < 6)
 8105c3c:	683b      	ldr	r3, [r7, #0]
 8105c3e:	895b      	ldrh	r3, [r3, #10]
 8105c40:	2b05      	cmp	r3, #5
 8105c42:	d80b      	bhi.n	8105c5c <_ZN17ConnectionManager15HandleUdpRecvCbEPvP7udp_pcbP4pbufPK8ip4_addrt+0x60>
    {
        LOG_DEBUG("Payload too short to process (length: %d bytes).", p->len);
 8105c44:	f7fb f99c 	bl	8100f80 <_ZN10LogPrinter8instanceEv>
 8105c48:	683b      	ldr	r3, [r7, #0]
 8105c4a:	895b      	ldrh	r3, [r3, #10]
 8105c4c:	461a      	mov	r2, r3
 8105c4e:	4993      	ldr	r1, [pc, #588]	@ (8105e9c <_ZN17ConnectionManager15HandleUdpRecvCbEPvP7udp_pcbP4pbufPK8ip4_addrt+0x2a0>)
 8105c50:	f7fb f9be 	bl	8100fd0 <_ZN10LogPrinter10printDebugEPKcz>
        pbuf_free(p);
 8105c54:	6838      	ldr	r0, [r7, #0]
 8105c56:	f018 fb61 	bl	811e31c <pbuf_free>
        return;
 8105c5a:	e1ac      	b.n	8105fb6 <_ZN17ConnectionManager15HandleUdpRecvCbEPvP7udp_pcbP4pbufPK8ip4_addrt+0x3ba>
    }

    // Cast payload to a uint8_t array for easier processing
    uint8_t *payload = (uint8_t *)p->payload;
 8105c5c:	683b      	ldr	r3, [r7, #0]
 8105c5e:	685b      	ldr	r3, [r3, #4]
 8105c60:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

    // Validate frame type based on first 4 bytes (we expected a specific DoIP identification frame)
    if (!(payload[0] == 0x00 && payload[1] == 0x00 && payload[2] == 0x00 && payload[3] == 0x32))
 8105c64:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8105c68:	781b      	ldrb	r3, [r3, #0]
 8105c6a:	2b00      	cmp	r3, #0
 8105c6c:	d111      	bne.n	8105c92 <_ZN17ConnectionManager15HandleUdpRecvCbEPvP7udp_pcbP4pbufPK8ip4_addrt+0x96>
 8105c6e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8105c72:	3301      	adds	r3, #1
 8105c74:	781b      	ldrb	r3, [r3, #0]
 8105c76:	2b00      	cmp	r3, #0
 8105c78:	d10b      	bne.n	8105c92 <_ZN17ConnectionManager15HandleUdpRecvCbEPvP7udp_pcbP4pbufPK8ip4_addrt+0x96>
 8105c7a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8105c7e:	3302      	adds	r3, #2
 8105c80:	781b      	ldrb	r3, [r3, #0]
 8105c82:	2b00      	cmp	r3, #0
 8105c84:	d105      	bne.n	8105c92 <_ZN17ConnectionManager15HandleUdpRecvCbEPvP7udp_pcbP4pbufPK8ip4_addrt+0x96>
 8105c86:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8105c8a:	3303      	adds	r3, #3
 8105c8c:	781b      	ldrb	r3, [r3, #0]
 8105c8e:	2b32      	cmp	r3, #50	@ 0x32
 8105c90:	d00a      	beq.n	8105ca8 <_ZN17ConnectionManager15HandleUdpRecvCbEPvP7udp_pcbP4pbufPK8ip4_addrt+0xac>
    {
        LOG_DEBUG("Unexpected frame type received, ignoring.");
 8105c92:	f7fb f975 	bl	8100f80 <_ZN10LogPrinter8instanceEv>
 8105c96:	4603      	mov	r3, r0
 8105c98:	4981      	ldr	r1, [pc, #516]	@ (8105ea0 <_ZN17ConnectionManager15HandleUdpRecvCbEPvP7udp_pcbP4pbufPK8ip4_addrt+0x2a4>)
 8105c9a:	4618      	mov	r0, r3
 8105c9c:	f7fb f998 	bl	8100fd0 <_ZN10LogPrinter10printDebugEPKcz>
        pbuf_free(p);
 8105ca0:	6838      	ldr	r0, [r7, #0]
 8105ca2:	f018 fb3b 	bl	811e31c <pbuf_free>
        return;
 8105ca6:	e186      	b.n	8105fb6 <_ZN17ConnectionManager15HandleUdpRecvCbEPvP7udp_pcbP4pbufPK8ip4_addrt+0x3ba>
    }

    // Extract length (first 4 bytes) and validate against p->len
    uint32_t dataLength = (payload[0] << 24) | (payload[1] << 16) | (payload[2] << 8) | payload[3];
 8105ca8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8105cac:	781b      	ldrb	r3, [r3, #0]
 8105cae:	061a      	lsls	r2, r3, #24
 8105cb0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8105cb4:	3301      	adds	r3, #1
 8105cb6:	781b      	ldrb	r3, [r3, #0]
 8105cb8:	041b      	lsls	r3, r3, #16
 8105cba:	431a      	orrs	r2, r3
 8105cbc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8105cc0:	3302      	adds	r3, #2
 8105cc2:	781b      	ldrb	r3, [r3, #0]
 8105cc4:	021b      	lsls	r3, r3, #8
 8105cc6:	4313      	orrs	r3, r2
 8105cc8:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8105ccc:	3203      	adds	r2, #3
 8105cce:	7812      	ldrb	r2, [r2, #0]
 8105cd0:	4313      	orrs	r3, r2
 8105cd2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    // 6 bytes for header (length + type)
    if (dataLength + 6 > p->len)
 8105cd6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8105cda:	3306      	adds	r3, #6
 8105cdc:	683a      	ldr	r2, [r7, #0]
 8105cde:	8952      	ldrh	r2, [r2, #10]
 8105ce0:	4293      	cmp	r3, r2
 8105ce2:	d90c      	bls.n	8105cfe <_ZN17ConnectionManager15HandleUdpRecvCbEPvP7udp_pcbP4pbufPK8ip4_addrt+0x102>
    {
        LOG_DEBUG("Data length mismatch: declared %u, received %u.", dataLength, p->len);
 8105ce4:	f7fb f94c 	bl	8100f80 <_ZN10LogPrinter8instanceEv>
 8105ce8:	683b      	ldr	r3, [r7, #0]
 8105cea:	895b      	ldrh	r3, [r3, #10]
 8105cec:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8105cf0:	496c      	ldr	r1, [pc, #432]	@ (8105ea4 <_ZN17ConnectionManager15HandleUdpRecvCbEPvP7udp_pcbP4pbufPK8ip4_addrt+0x2a8>)
 8105cf2:	f7fb f96d 	bl	8100fd0 <_ZN10LogPrinter10printDebugEPKcz>
        pbuf_free(p);
 8105cf6:	6838      	ldr	r0, [r7, #0]
 8105cf8:	f018 fb10 	bl	811e31c <pbuf_free>
        return;
 8105cfc:	e15b      	b.n	8105fb6 <_ZN17ConnectionManager15HandleUdpRecvCbEPvP7udp_pcbP4pbufPK8ip4_addrt+0x3ba>
    }

    // Process diagnostic data if available
    if (p->len > 14)
 8105cfe:	683b      	ldr	r3, [r7, #0]
 8105d00:	895b      	ldrh	r3, [r3, #10]
 8105d02:	2b0e      	cmp	r3, #14
 8105d04:	f240 814c 	bls.w	8105fa0 <_ZN17ConnectionManager15HandleUdpRecvCbEPvP7udp_pcbP4pbufPK8ip4_addrt+0x3a4>
    {
        uint8_t *diagnosticData = &payload[14];
 8105d08:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8105d0c:	330e      	adds	r3, #14
 8105d0e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
        size_t diagnosticDataLen = p->len - 14;
 8105d12:	683b      	ldr	r3, [r7, #0]
 8105d14:	895b      	ldrh	r3, [r3, #10]
 8105d16:	3b0e      	subs	r3, #14
 8105d18:	67fb      	str	r3, [r7, #124]	@ 0x7c

        // Search for MAC and VIN keywords
        char *macStart = (char *)strstr((char *)diagnosticData, "MAC");
 8105d1a:	4963      	ldr	r1, [pc, #396]	@ (8105ea8 <_ZN17ConnectionManager15HandleUdpRecvCbEPvP7udp_pcbP4pbufPK8ip4_addrt+0x2ac>)
 8105d1c:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 8105d20:	f020 ffd7 	bl	8126cd2 <strstr>
 8105d24:	67b8      	str	r0, [r7, #120]	@ 0x78
        char *vinStart = (char *)strstr((char *)diagnosticData, "VIN");
 8105d26:	4961      	ldr	r1, [pc, #388]	@ (8105eac <_ZN17ConnectionManager15HandleUdpRecvCbEPvP7udp_pcbP4pbufPK8ip4_addrt+0x2b0>)
 8105d28:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 8105d2c:	f020 ffd1 	bl	8126cd2 <strstr>
 8105d30:	6778      	str	r0, [r7, #116]	@ 0x74

        if (macStart && vinStart)
 8105d32:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8105d34:	2b00      	cmp	r3, #0
 8105d36:	f000 812b 	beq.w	8105f90 <_ZN17ConnectionManager15HandleUdpRecvCbEPvP7udp_pcbP4pbufPK8ip4_addrt+0x394>
 8105d3a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8105d3c:	2b00      	cmp	r3, #0
 8105d3e:	f000 8127 	beq.w	8105f90 <_ZN17ConnectionManager15HandleUdpRecvCbEPvP7udp_pcbP4pbufPK8ip4_addrt+0x394>
        {
            macStart += strlen("MAC");
 8105d42:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8105d44:	3303      	adds	r3, #3
 8105d46:	67bb      	str	r3, [r7, #120]	@ 0x78
            vinStart += strlen("VIN");
 8105d48:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8105d4a:	3303      	adds	r3, #3
 8105d4c:	677b      	str	r3, [r7, #116]	@ 0x74

            // Safely extract MAC Address (12 characters)
            if (macStart + 12 <= (char *)diagnosticData + diagnosticDataLen)
 8105d4e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8105d50:	f103 020c 	add.w	r2, r3, #12
 8105d54:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 8105d58:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8105d5a:	440b      	add	r3, r1
 8105d5c:	429a      	cmp	r2, r3
 8105d5e:	f200 80af 	bhi.w	8105ec0 <_ZN17ConnectionManager15HandleUdpRecvCbEPvP7udp_pcbP4pbufPK8ip4_addrt+0x2c4>
            {
                char macAddressStr[13] = {0};
 8105d62:	2300      	movs	r3, #0
 8105d64:	663b      	str	r3, [r7, #96]	@ 0x60
 8105d66:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8105d6a:	2200      	movs	r2, #0
 8105d6c:	601a      	str	r2, [r3, #0]
 8105d6e:	605a      	str	r2, [r3, #4]
 8105d70:	721a      	strb	r2, [r3, #8]
                strncpy(macAddressStr, macStart, 12);
 8105d72:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8105d76:	220c      	movs	r2, #12
 8105d78:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8105d7a:	4618      	mov	r0, r3
 8105d7c:	f020 ff96 	bl	8126cac <strncpy>

                LOG_DEBUG("Extracted MAC address: %s", macAddressStr);
 8105d80:	f7fb f8fe 	bl	8100f80 <_ZN10LogPrinter8instanceEv>
 8105d84:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8105d88:	461a      	mov	r2, r3
 8105d8a:	4949      	ldr	r1, [pc, #292]	@ (8105eb0 <_ZN17ConnectionManager15HandleUdpRecvCbEPvP7udp_pcbP4pbufPK8ip4_addrt+0x2b4>)
 8105d8c:	f7fb f920 	bl	8100fd0 <_ZN10LogPrinter10printDebugEPKcz>

                uint8_t ecuMac[6] = {0};
 8105d90:	2300      	movs	r3, #0
 8105d92:	65bb      	str	r3, [r7, #88]	@ 0x58
 8105d94:	2300      	movs	r3, #0
 8105d96:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
                for (int i = 0; i < 6; i++)
 8105d9a:	2300      	movs	r3, #0
 8105d9c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8105da0:	e046      	b.n	8105e30 <_ZN17ConnectionManager15HandleUdpRecvCbEPvP7udp_pcbP4pbufPK8ip4_addrt+0x234>
                {
                    char byteStr[3] = { macAddressStr[i * 2], macAddressStr[i * 2 + 1], '\0' };
 8105da2:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8105da6:	2100      	movs	r1, #0
 8105da8:	460a      	mov	r2, r1
 8105daa:	801a      	strh	r2, [r3, #0]
 8105dac:	460a      	mov	r2, r1
 8105dae:	709a      	strb	r2, [r3, #2]
 8105db0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8105db4:	005b      	lsls	r3, r3, #1
 8105db6:	3390      	adds	r3, #144	@ 0x90
 8105db8:	443b      	add	r3, r7
 8105dba:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 8105dbe:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
 8105dc2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8105dc6:	005b      	lsls	r3, r3, #1
 8105dc8:	3301      	adds	r3, #1
 8105dca:	3390      	adds	r3, #144	@ 0x90
 8105dcc:	443b      	add	r3, r7
 8105dce:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 8105dd2:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
                    char *endPtr;
                    long byteValue = strtol(byteStr, &endPtr, 16);
 8105dd6:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 8105dda:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8105dde:	2210      	movs	r2, #16
 8105de0:	4618      	mov	r0, r3
 8105de2:	f020 f987 	bl	81260f4 <strtol>
 8105de6:	6738      	str	r0, [r7, #112]	@ 0x70

                    if (*endPtr != '\0' || byteValue < 0 || byteValue > 0xFF)
 8105de8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8105dea:	781b      	ldrb	r3, [r3, #0]
 8105dec:	2b00      	cmp	r3, #0
 8105dee:	d105      	bne.n	8105dfc <_ZN17ConnectionManager15HandleUdpRecvCbEPvP7udp_pcbP4pbufPK8ip4_addrt+0x200>
 8105df0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8105df2:	2b00      	cmp	r3, #0
 8105df4:	db02      	blt.n	8105dfc <_ZN17ConnectionManager15HandleUdpRecvCbEPvP7udp_pcbP4pbufPK8ip4_addrt+0x200>
 8105df6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8105df8:	2bff      	cmp	r3, #255	@ 0xff
 8105dfa:	dd0b      	ble.n	8105e14 <_ZN17ConnectionManager15HandleUdpRecvCbEPvP7udp_pcbP4pbufPK8ip4_addrt+0x218>
                    {
                        LOG_DEBUG("Failed to parse MAC address byte: %s", byteStr);
 8105dfc:	f7fb f8c0 	bl	8100f80 <_ZN10LogPrinter8instanceEv>
 8105e00:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8105e04:	461a      	mov	r2, r3
 8105e06:	492b      	ldr	r1, [pc, #172]	@ (8105eb4 <_ZN17ConnectionManager15HandleUdpRecvCbEPvP7udp_pcbP4pbufPK8ip4_addrt+0x2b8>)
 8105e08:	f7fb f8e2 	bl	8100fd0 <_ZN10LogPrinter10printDebugEPKcz>
                        pbuf_free(p);
 8105e0c:	6838      	ldr	r0, [r7, #0]
 8105e0e:	f018 fa85 	bl	811e31c <pbuf_free>
 8105e12:	e0d0      	b.n	8105fb6 <_ZN17ConnectionManager15HandleUdpRecvCbEPvP7udp_pcbP4pbufPK8ip4_addrt+0x3ba>
                        return;
                    }

                    ecuMac[i] = static_cast<uint8_t>(byteValue);
 8105e14:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8105e16:	b2d9      	uxtb	r1, r3
 8105e18:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 8105e1c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8105e20:	4413      	add	r3, r2
 8105e22:	460a      	mov	r2, r1
 8105e24:	701a      	strb	r2, [r3, #0]
                for (int i = 0; i < 6; i++)
 8105e26:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8105e2a:	3301      	adds	r3, #1
 8105e2c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8105e30:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8105e34:	2b05      	cmp	r3, #5
 8105e36:	ddb4      	ble.n	8105da2 <_ZN17ConnectionManager15HandleUdpRecvCbEPvP7udp_pcbP4pbufPK8ip4_addrt+0x1a6>
                }

                // Add a static ARP entry for ECU
                struct eth_addr ethMac;
                memcpy(ethMac.addr, ecuMac, 6);
 8105e38:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8105e3c:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 8105e40:	e892 0003 	ldmia.w	r2, {r0, r1}
 8105e44:	6018      	str	r0, [r3, #0]
 8105e46:	3304      	adds	r3, #4
 8105e48:	8019      	strh	r1, [r3, #0]
                if (etharp_add_static_entry(addr, &ethMac) == ERR_OK)
 8105e4a:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8105e4e:	4619      	mov	r1, r3
 8105e50:	f8d7 00a0 	ldr.w	r0, [r7, #160]	@ 0xa0
 8105e54:	f014 fbe4 	bl	811a620 <etharp_add_static_entry>
 8105e58:	4603      	mov	r3, r0
 8105e5a:	2b00      	cmp	r3, #0
 8105e5c:	bf0c      	ite	eq
 8105e5e:	2301      	moveq	r3, #1
 8105e60:	2300      	movne	r3, #0
 8105e62:	b2db      	uxtb	r3, r3
 8105e64:	2b00      	cmp	r3, #0
 8105e66:	d00c      	beq.n	8105e82 <_ZN17ConnectionManager15HandleUdpRecvCbEPvP7udp_pcbP4pbufPK8ip4_addrt+0x286>
                {
                    LOG_DEBUG("ARP entry for ECU added successfully.");
 8105e68:	f7fb f88a 	bl	8100f80 <_ZN10LogPrinter8instanceEv>
 8105e6c:	4603      	mov	r3, r0
 8105e6e:	4912      	ldr	r1, [pc, #72]	@ (8105eb8 <_ZN17ConnectionManager15HandleUdpRecvCbEPvP7udp_pcbP4pbufPK8ip4_addrt+0x2bc>)
 8105e70:	4618      	mov	r0, r3
 8105e72:	f7fb f8ad 	bl	8100fd0 <_ZN10LogPrinter10printDebugEPKcz>
                    ecu_ip_addr = *addr;
 8105e76:	68fb      	ldr	r3, [r7, #12]
 8105e78:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 8105e7c:	6812      	ldr	r2, [r2, #0]
 8105e7e:	601a      	str	r2, [r3, #0]
 8105e80:	e025      	b.n	8105ece <_ZN17ConnectionManager15HandleUdpRecvCbEPvP7udp_pcbP4pbufPK8ip4_addrt+0x2d2>
                }
                else
                {
                    LOG_DEBUG("Failed to add ARP entry for ECU.");
 8105e82:	f7fb f87d 	bl	8100f80 <_ZN10LogPrinter8instanceEv>
 8105e86:	4603      	mov	r3, r0
 8105e88:	490c      	ldr	r1, [pc, #48]	@ (8105ebc <_ZN17ConnectionManager15HandleUdpRecvCbEPvP7udp_pcbP4pbufPK8ip4_addrt+0x2c0>)
 8105e8a:	4618      	mov	r0, r3
 8105e8c:	f7fb f8a0 	bl	8100fd0 <_ZN10LogPrinter10printDebugEPKcz>
 8105e90:	e01d      	b.n	8105ece <_ZN17ConnectionManager15HandleUdpRecvCbEPvP7udp_pcbP4pbufPK8ip4_addrt+0x2d2>
 8105e92:	bf00      	nop
 8105e94:	081275d8 	.word	0x081275d8
 8105e98:	08127608 	.word	0x08127608
 8105e9c:	08127628 	.word	0x08127628
 8105ea0:	0812765c 	.word	0x0812765c
 8105ea4:	08127688 	.word	0x08127688
 8105ea8:	081276b8 	.word	0x081276b8
 8105eac:	081276bc 	.word	0x081276bc
 8105eb0:	081276c0 	.word	0x081276c0
 8105eb4:	081276dc 	.word	0x081276dc
 8105eb8:	08127704 	.word	0x08127704
 8105ebc:	0812772c 	.word	0x0812772c
                }
            }
            else
            {
                LOG_DEBUG("MAC address extraction exceeds data boundaries.");
 8105ec0:	f7fb f85e 	bl	8100f80 <_ZN10LogPrinter8instanceEv>
 8105ec4:	4603      	mov	r3, r0
 8105ec6:	493d      	ldr	r1, [pc, #244]	@ (8105fbc <_ZN17ConnectionManager15HandleUdpRecvCbEPvP7udp_pcbP4pbufPK8ip4_addrt+0x3c0>)
 8105ec8:	4618      	mov	r0, r3
 8105eca:	f7fb f881 	bl	8100fd0 <_ZN10LogPrinter10printDebugEPKcz>
            }

            // Safely extract VIN (17 characters)
            if (vinStart + 17 <= (char *)diagnosticData + diagnosticDataLen)
 8105ece:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8105ed0:	f103 0211 	add.w	r2, r3, #17
 8105ed4:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 8105ed8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8105eda:	440b      	add	r3, r1
 8105edc:	429a      	cmp	r2, r3
 8105ede:	d84f      	bhi.n	8105f80 <_ZN17ConnectionManager15HandleUdpRecvCbEPvP7udp_pcbP4pbufPK8ip4_addrt+0x384>
            {
                char vin[18] = {0};
 8105ee0:	2300      	movs	r3, #0
 8105ee2:	637b      	str	r3, [r7, #52]	@ 0x34
 8105ee4:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8105ee8:	2200      	movs	r2, #0
 8105eea:	601a      	str	r2, [r3, #0]
 8105eec:	605a      	str	r2, [r3, #4]
 8105eee:	609a      	str	r2, [r3, #8]
 8105ef0:	819a      	strh	r2, [r3, #12]
                strncpy(vin, vinStart, 17);
 8105ef2:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8105ef6:	2211      	movs	r2, #17
 8105ef8:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 8105efa:	4618      	mov	r0, r3
 8105efc:	f020 fed6 	bl	8126cac <strncpy>
                LOG_DEBUG("Extracted VIN: %s", vin);
 8105f00:	f7fb f83e 	bl	8100f80 <_ZN10LogPrinter8instanceEv>
 8105f04:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8105f08:	461a      	mov	r2, r3
 8105f0a:	492d      	ldr	r1, [pc, #180]	@ (8105fc0 <_ZN17ConnectionManager15HandleUdpRecvCbEPvP7udp_pcbP4pbufPK8ip4_addrt+0x3c4>)
 8105f0c:	f7fb f860 	bl	8100fd0 <_ZN10LogPrinter10printDebugEPKcz>

                EConnectionEvent connEvent = EVENT_DISCOVERY_COMPLETED;
 8105f10:	2302      	movs	r3, #2
 8105f12:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
                if(xQueueSend(connectionEventsQueue, &(connEvent), static_cast<TickType_t>(10000)) != pdPASS)
 8105f16:	4b2b      	ldr	r3, [pc, #172]	@ (8105fc4 <_ZN17ConnectionManager15HandleUdpRecvCbEPvP7udp_pcbP4pbufPK8ip4_addrt+0x3c8>)
 8105f18:	6818      	ldr	r0, [r3, #0]
 8105f1a:	f107 0133 	add.w	r1, r7, #51	@ 0x33
 8105f1e:	2300      	movs	r3, #0
 8105f20:	f242 7210 	movw	r2, #10000	@ 0x2710
 8105f24:	f011 f806 	bl	8116f34 <xQueueGenericSend>
 8105f28:	4603      	mov	r3, r0
 8105f2a:	2b01      	cmp	r3, #1
 8105f2c:	bf14      	ite	ne
 8105f2e:	2301      	movne	r3, #1
 8105f30:	2300      	moveq	r3, #0
 8105f32:	b2db      	uxtb	r3, r3
 8105f34:	2b00      	cmp	r3, #0
 8105f36:	d009      	beq.n	8105f4c <_ZN17ConnectionManager15HandleUdpRecvCbEPvP7udp_pcbP4pbufPK8ip4_addrt+0x350>
                {
                    //In this case do not notify app and just wait for another message from ecu to try on the next call
                    LOG_DEBUG("[FATAL ERROR] Could not send internal connection event: %d", connEvent);
 8105f38:	f7fb f822 	bl	8100f80 <_ZN10LogPrinter8instanceEv>
 8105f3c:	4603      	mov	r3, r0
 8105f3e:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 8105f42:	4921      	ldr	r1, [pc, #132]	@ (8105fc8 <_ZN17ConnectionManager15HandleUdpRecvCbEPvP7udp_pcbP4pbufPK8ip4_addrt+0x3cc>)
 8105f44:	4618      	mov	r0, r3
 8105f46:	f7fb f843 	bl	8100fd0 <_ZN10LogPrinter10printDebugEPKcz>
 8105f4a:	e034      	b.n	8105fb6 <_ZN17ConnectionManager15HandleUdpRecvCbEPvP7udp_pcbP4pbufPK8ip4_addrt+0x3ba>
                    return;
                }
                
                SMessage msg;
                msg.event_type = EVENT_ECU_CONNECTION_INITIALISED;
 8105f4c:	2380      	movs	r3, #128	@ 0x80
 8105f4e:	753b      	strb	r3, [r7, #20]
                msg.event_sender = EVENT_CLIENT_ETHERNET_CONNECTION_MANAGER;
 8105f50:	2303      	movs	r3, #3
 8105f52:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
                msg.event_receiver = EVENT_CLIENT_FRONTEND;
 8105f56:	2300      	movs	r3, #0
 8105f58:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
                strncpy(msg.message_data.ecu_connected_vin, vinStart, 17);
 8105f5c:	f107 0314 	add.w	r3, r7, #20
 8105f60:	3304      	adds	r3, #4
 8105f62:	2211      	movs	r2, #17
 8105f64:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 8105f66:	4618      	mov	r0, r3
 8105f68:	f020 fea0 	bl	8126cac <strncpy>
                xQueueSend(queueToEventManagerCM4, &(msg), static_cast<TickType_t>(10000));
 8105f6c:	4b17      	ldr	r3, [pc, #92]	@ (8105fcc <_ZN17ConnectionManager15HandleUdpRecvCbEPvP7udp_pcbP4pbufPK8ip4_addrt+0x3d0>)
 8105f6e:	6818      	ldr	r0, [r3, #0]
 8105f70:	f107 0114 	add.w	r1, r7, #20
 8105f74:	2300      	movs	r3, #0
 8105f76:	f242 7210 	movw	r2, #10000	@ 0x2710
 8105f7a:	f010 ffdb 	bl	8116f34 <xQueueGenericSend>
            }
            else
            {
                LOG_DEBUG("VIN extraction exceeds data boundaries.");
            }
        }
 8105f7e:	e017      	b.n	8105fb0 <_ZN17ConnectionManager15HandleUdpRecvCbEPvP7udp_pcbP4pbufPK8ip4_addrt+0x3b4>
                LOG_DEBUG("VIN extraction exceeds data boundaries.");
 8105f80:	f7fa fffe 	bl	8100f80 <_ZN10LogPrinter8instanceEv>
 8105f84:	4603      	mov	r3, r0
 8105f86:	4912      	ldr	r1, [pc, #72]	@ (8105fd0 <_ZN17ConnectionManager15HandleUdpRecvCbEPvP7udp_pcbP4pbufPK8ip4_addrt+0x3d4>)
 8105f88:	4618      	mov	r0, r3
 8105f8a:	f7fb f821 	bl	8100fd0 <_ZN10LogPrinter10printDebugEPKcz>
        }
 8105f8e:	e00f      	b.n	8105fb0 <_ZN17ConnectionManager15HandleUdpRecvCbEPvP7udp_pcbP4pbufPK8ip4_addrt+0x3b4>
        else
        {
            LOG_DEBUG("MAC or VIN markers not found in diagnostic data.");
 8105f90:	f7fa fff6 	bl	8100f80 <_ZN10LogPrinter8instanceEv>
 8105f94:	4603      	mov	r3, r0
 8105f96:	490f      	ldr	r1, [pc, #60]	@ (8105fd4 <_ZN17ConnectionManager15HandleUdpRecvCbEPvP7udp_pcbP4pbufPK8ip4_addrt+0x3d8>)
 8105f98:	4618      	mov	r0, r3
 8105f9a:	f7fb f819 	bl	8100fd0 <_ZN10LogPrinter10printDebugEPKcz>
 8105f9e:	e007      	b.n	8105fb0 <_ZN17ConnectionManager15HandleUdpRecvCbEPvP7udp_pcbP4pbufPK8ip4_addrt+0x3b4>
        }
    }
    else
    {
        LOG_DEBUG("Payload too short to contain diagnostic data (length: %d bytes).", p->len);
 8105fa0:	f7fa ffee 	bl	8100f80 <_ZN10LogPrinter8instanceEv>
 8105fa4:	683b      	ldr	r3, [r7, #0]
 8105fa6:	895b      	ldrh	r3, [r3, #10]
 8105fa8:	461a      	mov	r2, r3
 8105faa:	490b      	ldr	r1, [pc, #44]	@ (8105fd8 <_ZN17ConnectionManager15HandleUdpRecvCbEPvP7udp_pcbP4pbufPK8ip4_addrt+0x3dc>)
 8105fac:	f7fb f810 	bl	8100fd0 <_ZN10LogPrinter10printDebugEPKcz>
    }

    // Free the received buffer
    pbuf_free(p);
 8105fb0:	6838      	ldr	r0, [r7, #0]
 8105fb2:	f018 f9b3 	bl	811e31c <pbuf_free>
}
 8105fb6:	3794      	adds	r7, #148	@ 0x94
 8105fb8:	46bd      	mov	sp, r7
 8105fba:	bd90      	pop	{r4, r7, pc}
 8105fbc:	08127750 	.word	0x08127750
 8105fc0:	08127780 	.word	0x08127780
 8105fc4:	10000308 	.word	0x10000308
 8105fc8:	08127794 	.word	0x08127794
 8105fcc:	100001e8 	.word	0x100001e8
 8105fd0:	081277d0 	.word	0x081277d0
 8105fd4:	081277f8 	.word	0x081277f8
 8105fd8:	0812782c 	.word	0x0812782c

08105fdc <_ZN17ConnectionManager10udpConnectEv>:

void ConnectionManager::udpConnect()
{
 8105fdc:	b580      	push	{r7, lr}
 8105fde:	b082      	sub	sp, #8
 8105fe0:	af00      	add	r7, sp, #0
 8105fe2:	6078      	str	r0, [r7, #4]
    udp_pcb = udp_new();
 8105fe4:	f01f fc86 	bl	81258f4 <udp_new>
 8105fe8:	4602      	mov	r2, r0
 8105fea:	687b      	ldr	r3, [r7, #4]
 8105fec:	605a      	str	r2, [r3, #4]
    if (udp_pcb)
 8105fee:	687b      	ldr	r3, [r7, #4]
 8105ff0:	685b      	ldr	r3, [r3, #4]
 8105ff2:	2b00      	cmp	r3, #0
 8105ff4:	d00e      	beq.n	8106014 <_ZN17ConnectionManager10udpConnectEv+0x38>
    {
        udp_bind(udp_pcb, IP_ADDR_ANY, 0);  // Bind PCB with any port
 8105ff6:	687b      	ldr	r3, [r7, #4]
 8105ff8:	685b      	ldr	r3, [r3, #4]
 8105ffa:	2200      	movs	r2, #0
 8105ffc:	490b      	ldr	r1, [pc, #44]	@ (810602c <_ZN17ConnectionManager10udpConnectEv+0x50>)
 8105ffe:	4618      	mov	r0, r3
 8106000:	f01f fb8e 	bl	8125720 <udp_bind>
        udp_recv(udp_pcb, udpRecvCb, NULL);  // Register the UDP receiver callback (listen for car info)
 8106004:	687b      	ldr	r3, [r7, #4]
 8106006:	685b      	ldr	r3, [r3, #4]
 8106008:	2200      	movs	r2, #0
 810600a:	4909      	ldr	r1, [pc, #36]	@ (8106030 <_ZN17ConnectionManager10udpConnectEv+0x54>)
 810600c:	4618      	mov	r0, r3
 810600e:	f01f fc0f 	bl	8125830 <udp_recv>
    }
    else
    {
        LOG_DEBUG("Failed to create UDP PCB.");
    }
}
 8106012:	e006      	b.n	8106022 <_ZN17ConnectionManager10udpConnectEv+0x46>
        LOG_DEBUG("Failed to create UDP PCB.");
 8106014:	f7fa ffb4 	bl	8100f80 <_ZN10LogPrinter8instanceEv>
 8106018:	4603      	mov	r3, r0
 810601a:	4906      	ldr	r1, [pc, #24]	@ (8106034 <_ZN17ConnectionManager10udpConnectEv+0x58>)
 810601c:	4618      	mov	r0, r3
 810601e:	f7fa ffd7 	bl	8100fd0 <_ZN10LogPrinter10printDebugEPKcz>
}
 8106022:	bf00      	nop
 8106024:	3708      	adds	r7, #8
 8106026:	46bd      	mov	sp, r7
 8106028:	bd80      	pop	{r7, pc}
 810602a:	bf00      	nop
 810602c:	0812ae4c 	.word	0x0812ae4c
 8106030:	0810598b 	.word	0x0810598b
 8106034:	08127870 	.word	0x08127870

08106038 <_ZN17ConnectionManager13udpDisconnectEv>:


void ConnectionManager::udpDisconnect()
{
 8106038:	b580      	push	{r7, lr}
 810603a:	b082      	sub	sp, #8
 810603c:	af00      	add	r7, sp, #0
 810603e:	6078      	str	r0, [r7, #4]
    if (udp_pcb != nullptr)
 8106040:	687b      	ldr	r3, [r7, #4]
 8106042:	685b      	ldr	r3, [r3, #4]
 8106044:	2b00      	cmp	r3, #0
 8106046:	d016      	beq.n	8106076 <_ZN17ConnectionManager13udpDisconnectEv+0x3e>
    {
        // Unregister callbacks
        udp_recv(udp_pcb, nullptr, nullptr); // Wyrejestrowanie callbacka
 8106048:	687b      	ldr	r3, [r7, #4]
 810604a:	685b      	ldr	r3, [r3, #4]
 810604c:	2200      	movs	r2, #0
 810604e:	2100      	movs	r1, #0
 8106050:	4618      	mov	r0, r3
 8106052:	f01f fbed 	bl	8125830 <udp_recv>
        // Close connection
        udp_remove(udp_pcb);
 8106056:	687b      	ldr	r3, [r7, #4]
 8106058:	685b      	ldr	r3, [r3, #4]
 810605a:	4618      	mov	r0, r3
 810605c:	f01f fc08 	bl	8125870 <udp_remove>
        udp_pcb = nullptr;
 8106060:	687b      	ldr	r3, [r7, #4]
 8106062:	2200      	movs	r2, #0
 8106064:	605a      	str	r2, [r3, #4]
        LOG_DEBUG("UDP PCB removed and callback unregistered.");
 8106066:	f7fa ff8b 	bl	8100f80 <_ZN10LogPrinter8instanceEv>
 810606a:	4603      	mov	r3, r0
 810606c:	4907      	ldr	r1, [pc, #28]	@ (810608c <_ZN17ConnectionManager13udpDisconnectEv+0x54>)
 810606e:	4618      	mov	r0, r3
 8106070:	f7fa ffae 	bl	8100fd0 <_ZN10LogPrinter10printDebugEPKcz>
    }
    else
    {
        LOG_DEBUG("udp_pcb is already null, skipping removal.");
    }
}
 8106074:	e006      	b.n	8106084 <_ZN17ConnectionManager13udpDisconnectEv+0x4c>
        LOG_DEBUG("udp_pcb is already null, skipping removal.");
 8106076:	f7fa ff83 	bl	8100f80 <_ZN10LogPrinter8instanceEv>
 810607a:	4603      	mov	r3, r0
 810607c:	4904      	ldr	r1, [pc, #16]	@ (8106090 <_ZN17ConnectionManager13udpDisconnectEv+0x58>)
 810607e:	4618      	mov	r0, r3
 8106080:	f7fa ffa6 	bl	8100fd0 <_ZN10LogPrinter10printDebugEPKcz>
}
 8106084:	bf00      	nop
 8106086:	3708      	adds	r7, #8
 8106088:	46bd      	mov	sp, r7
 810608a:	bd80      	pop	{r7, pc}
 810608c:	0812788c 	.word	0x0812788c
 8106090:	081278b8 	.word	0x081278b8

08106094 <_ZN17ConnectionManager10tcpConnectEv>:

bool ConnectionManager::tcpConnect()
{
 8106094:	b580      	push	{r7, lr}
 8106096:	b084      	sub	sp, #16
 8106098:	af00      	add	r7, sp, #0
 810609a:	6078      	str	r0, [r7, #4]
    LOCK_TCPIP_CORE();
 810609c:	483a      	ldr	r0, [pc, #232]	@ (8106188 <_ZN17ConnectionManager10tcpConnectEv+0xf4>)
 810609e:	f018 fc7f 	bl	811e9a0 <sys_mutex_lock>
	tcp_pcb = tcp_new();
 81060a2:	f01a f8b3 	bl	812020c <tcp_new>
 81060a6:	4602      	mov	r2, r0
 81060a8:	687b      	ldr	r3, [r7, #4]
 81060aa:	609a      	str	r2, [r3, #8]
    if (!tcp_pcb)
 81060ac:	687b      	ldr	r3, [r7, #4]
 81060ae:	689b      	ldr	r3, [r3, #8]
 81060b0:	2b00      	cmp	r3, #0
 81060b2:	d10b      	bne.n	81060cc <_ZN17ConnectionManager10tcpConnectEv+0x38>
    {
        LOG_DEBUG("Failed to create TCP PCB.");
 81060b4:	f7fa ff64 	bl	8100f80 <_ZN10LogPrinter8instanceEv>
 81060b8:	4603      	mov	r3, r0
 81060ba:	4934      	ldr	r1, [pc, #208]	@ (810618c <_ZN17ConnectionManager10tcpConnectEv+0xf8>)
 81060bc:	4618      	mov	r0, r3
 81060be:	f7fa ff87 	bl	8100fd0 <_ZN10LogPrinter10printDebugEPKcz>
        UNLOCK_TCPIP_CORE();
 81060c2:	4831      	ldr	r0, [pc, #196]	@ (8106188 <_ZN17ConnectionManager10tcpConnectEv+0xf4>)
 81060c4:	f018 fc7b 	bl	811e9be <sys_mutex_unlock>
        return false;
 81060c8:	2300      	movs	r3, #0
 81060ca:	e059      	b.n	8106180 <_ZN17ConnectionManager10tcpConnectEv+0xec>
    }

    tcp_nagle_disable(tcp_pcb);
 81060cc:	687b      	ldr	r3, [r7, #4]
 81060ce:	689b      	ldr	r3, [r3, #8]
 81060d0:	8b5a      	ldrh	r2, [r3, #26]
 81060d2:	687b      	ldr	r3, [r7, #4]
 81060d4:	689b      	ldr	r3, [r3, #8]
 81060d6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 81060da:	b292      	uxth	r2, r2
 81060dc:	835a      	strh	r2, [r3, #26]

    err_t bindErr = tcp_bind(tcp_pcb, IP_ADDR_ANY, 0); // Automatically assign port number
 81060de:	687b      	ldr	r3, [r7, #4]
 81060e0:	689b      	ldr	r3, [r3, #8]
 81060e2:	2200      	movs	r2, #0
 81060e4:	492a      	ldr	r1, [pc, #168]	@ (8106190 <_ZN17ConnectionManager10tcpConnectEv+0xfc>)
 81060e6:	4618      	mov	r0, r3
 81060e8:	f018 ffba 	bl	811f060 <tcp_bind>
 81060ec:	4603      	mov	r3, r0
 81060ee:	73fb      	strb	r3, [r7, #15]
    if (bindErr != ERR_OK)
 81060f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 81060f4:	2b00      	cmp	r3, #0
 81060f6:	d00f      	beq.n	8106118 <_ZN17ConnectionManager10tcpConnectEv+0x84>
    {
        LOG_DEBUG("Failed to bind TCP PCB: %d", bindErr);
 81060f8:	f7fa ff42 	bl	8100f80 <_ZN10LogPrinter8instanceEv>
 81060fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8106100:	461a      	mov	r2, r3
 8106102:	4924      	ldr	r1, [pc, #144]	@ (8106194 <_ZN17ConnectionManager10tcpConnectEv+0x100>)
 8106104:	f7fa ff64 	bl	8100fd0 <_ZN10LogPrinter10printDebugEPKcz>
        tcpDisconnect();
 8106108:	6878      	ldr	r0, [r7, #4]
 810610a:	f000 f84d 	bl	81061a8 <_ZN17ConnectionManager13tcpDisconnectEv>
        UNLOCK_TCPIP_CORE();
 810610e:	481e      	ldr	r0, [pc, #120]	@ (8106188 <_ZN17ConnectionManager10tcpConnectEv+0xf4>)
 8106110:	f018 fc55 	bl	811e9be <sys_mutex_unlock>
        return false;
 8106114:	2300      	movs	r3, #0
 8106116:	e033      	b.n	8106180 <_ZN17ConnectionManager10tcpConnectEv+0xec>
    }
    // callback registration
    tcp_arg(tcp_pcb, NULL);
 8106118:	687b      	ldr	r3, [r7, #4]
 810611a:	689b      	ldr	r3, [r3, #8]
 810611c:	2100      	movs	r1, #0
 810611e:	4618      	mov	r0, r3
 8106120:	f01a f87c 	bl	812021c <tcp_arg>
    tcp_recv(tcp_pcb, tcpRecvCb);
 8106124:	687b      	ldr	r3, [r7, #4]
 8106126:	689b      	ldr	r3, [r3, #8]
 8106128:	491b      	ldr	r1, [pc, #108]	@ (8106198 <_ZN17ConnectionManager10tcpConnectEv+0x104>)
 810612a:	4618      	mov	r0, r3
 810612c:	f01a f888 	bl	8120240 <tcp_recv>
    tcp_err(tcp_pcb, tcpErrCb);
 8106130:	687b      	ldr	r3, [r7, #4]
 8106132:	689b      	ldr	r3, [r3, #8]
 8106134:	4919      	ldr	r1, [pc, #100]	@ (810619c <_ZN17ConnectionManager10tcpConnectEv+0x108>)
 8106136:	4618      	mov	r0, r3
 8106138:	f01a f8a4 	bl	8120284 <tcp_err>

    // establishing connection
    err_t err = tcp_connect(tcp_pcb, &ecu_ip_addr, TCP_PORT_ECU, tcpConnectCb);
 810613c:	687b      	ldr	r3, [r7, #4]
 810613e:	6898      	ldr	r0, [r3, #8]
 8106140:	6879      	ldr	r1, [r7, #4]
 8106142:	4b17      	ldr	r3, [pc, #92]	@ (81061a0 <_ZN17ConnectionManager10tcpConnectEv+0x10c>)
 8106144:	f641 2291 	movw	r2, #6801	@ 0x1a91
 8106148:	f019 f910 	bl	811f36c <tcp_connect>
 810614c:	4603      	mov	r3, r0
 810614e:	73bb      	strb	r3, [r7, #14]
    if (err != ERR_OK)
 8106150:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8106154:	2b00      	cmp	r3, #0
 8106156:	d00f      	beq.n	8106178 <_ZN17ConnectionManager10tcpConnectEv+0xe4>
    {
        LOG_DEBUG("Failed to connect to ECU: %d", err);
 8106158:	f7fa ff12 	bl	8100f80 <_ZN10LogPrinter8instanceEv>
 810615c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8106160:	461a      	mov	r2, r3
 8106162:	4910      	ldr	r1, [pc, #64]	@ (81061a4 <_ZN17ConnectionManager10tcpConnectEv+0x110>)
 8106164:	f7fa ff34 	bl	8100fd0 <_ZN10LogPrinter10printDebugEPKcz>
        tcpDisconnect();
 8106168:	6878      	ldr	r0, [r7, #4]
 810616a:	f000 f81d 	bl	81061a8 <_ZN17ConnectionManager13tcpDisconnectEv>
        UNLOCK_TCPIP_CORE();
 810616e:	4806      	ldr	r0, [pc, #24]	@ (8106188 <_ZN17ConnectionManager10tcpConnectEv+0xf4>)
 8106170:	f018 fc25 	bl	811e9be <sys_mutex_unlock>
        return false;
 8106174:	2300      	movs	r3, #0
 8106176:	e003      	b.n	8106180 <_ZN17ConnectionManager10tcpConnectEv+0xec>
    }
    UNLOCK_TCPIP_CORE();
 8106178:	4803      	ldr	r0, [pc, #12]	@ (8106188 <_ZN17ConnectionManager10tcpConnectEv+0xf4>)
 810617a:	f018 fc20 	bl	811e9be <sys_mutex_unlock>
    return true;
 810617e:	2301      	movs	r3, #1
}
 8106180:	4618      	mov	r0, r3
 8106182:	3710      	adds	r7, #16
 8106184:	46bd      	mov	sp, r7
 8106186:	bd80      	pop	{r7, pc}
 8106188:	1000e568 	.word	0x1000e568
 810618c:	081278e4 	.word	0x081278e4
 8106190:	0812ae4c 	.word	0x0812ae4c
 8106194:	08127900 	.word	0x08127900
 8106198:	08105907 	.word	0x08105907
 810619c:	08105963 	.word	0x08105963
 81061a0:	08105937 	.word	0x08105937
 81061a4:	0812791c 	.word	0x0812791c

081061a8 <_ZN17ConnectionManager13tcpDisconnectEv>:


void ConnectionManager::tcpDisconnect()
{
 81061a8:	b580      	push	{r7, lr}
 81061aa:	b082      	sub	sp, #8
 81061ac:	af00      	add	r7, sp, #0
 81061ae:	6078      	str	r0, [r7, #4]
    LOCK_TCPIP_CORE();
 81061b0:	481b      	ldr	r0, [pc, #108]	@ (8106220 <_ZN17ConnectionManager13tcpDisconnectEv+0x78>)
 81061b2:	f018 fbf5 	bl	811e9a0 <sys_mutex_lock>
    if (tcp_pcb != nullptr)
 81061b6:	687b      	ldr	r3, [r7, #4]
 81061b8:	689b      	ldr	r3, [r3, #8]
 81061ba:	2b00      	cmp	r3, #0
 81061bc:	d021      	beq.n	8106202 <_ZN17ConnectionManager13tcpDisconnectEv+0x5a>
    {
        // Unregister callbacks
        tcp_arg(tcp_pcb, nullptr);
 81061be:	687b      	ldr	r3, [r7, #4]
 81061c0:	689b      	ldr	r3, [r3, #8]
 81061c2:	2100      	movs	r1, #0
 81061c4:	4618      	mov	r0, r3
 81061c6:	f01a f829 	bl	812021c <tcp_arg>
        tcp_recv(tcp_pcb, nullptr);
 81061ca:	687b      	ldr	r3, [r7, #4]
 81061cc:	689b      	ldr	r3, [r3, #8]
 81061ce:	2100      	movs	r1, #0
 81061d0:	4618      	mov	r0, r3
 81061d2:	f01a f835 	bl	8120240 <tcp_recv>
        tcp_err(tcp_pcb, nullptr);
 81061d6:	687b      	ldr	r3, [r7, #4]
 81061d8:	689b      	ldr	r3, [r3, #8]
 81061da:	2100      	movs	r1, #0
 81061dc:	4618      	mov	r0, r3
 81061de:	f01a f851 	bl	8120284 <tcp_err>
        // Close connection
        tcp_close(tcp_pcb);
 81061e2:	687b      	ldr	r3, [r7, #4]
 81061e4:	689b      	ldr	r3, [r3, #8]
 81061e6:	4618      	mov	r0, r3
 81061e8:	f018 fe44 	bl	811ee74 <tcp_close>
        tcp_pcb = nullptr;
 81061ec:	687b      	ldr	r3, [r7, #4]
 81061ee:	2200      	movs	r2, #0
 81061f0:	609a      	str	r2, [r3, #8]
        LOG_DEBUG("TCP PCB closed and callbacks unregistered.");
 81061f2:	f7fa fec5 	bl	8100f80 <_ZN10LogPrinter8instanceEv>
 81061f6:	4603      	mov	r3, r0
 81061f8:	490a      	ldr	r1, [pc, #40]	@ (8106224 <_ZN17ConnectionManager13tcpDisconnectEv+0x7c>)
 81061fa:	4618      	mov	r0, r3
 81061fc:	f7fa fee8 	bl	8100fd0 <_ZN10LogPrinter10printDebugEPKcz>
 8106200:	e006      	b.n	8106210 <_ZN17ConnectionManager13tcpDisconnectEv+0x68>
    }
    else
    {
        LOG_DEBUG("tcp_pcb is already null, skipping disconnection.");
 8106202:	f7fa febd 	bl	8100f80 <_ZN10LogPrinter8instanceEv>
 8106206:	4603      	mov	r3, r0
 8106208:	4907      	ldr	r1, [pc, #28]	@ (8106228 <_ZN17ConnectionManager13tcpDisconnectEv+0x80>)
 810620a:	4618      	mov	r0, r3
 810620c:	f7fa fee0 	bl	8100fd0 <_ZN10LogPrinter10printDebugEPKcz>
    }
    UNLOCK_TCPIP_CORE();
 8106210:	4803      	ldr	r0, [pc, #12]	@ (8106220 <_ZN17ConnectionManager13tcpDisconnectEv+0x78>)
 8106212:	f018 fbd4 	bl	811e9be <sys_mutex_unlock>
}
 8106216:	bf00      	nop
 8106218:	3708      	adds	r7, #8
 810621a:	46bd      	mov	sp, r7
 810621c:	bd80      	pop	{r7, pc}
 810621e:	bf00      	nop
 8106220:	1000e568 	.word	0x1000e568
 8106224:	0812793c 	.word	0x0812793c
 8106228:	08127968 	.word	0x08127968

0810622c <_ZN17ConnectionManager15HandleTcpRecvCbEPvP7tcp_pcbP4pbufa>:

void ConnectionManager::HandleTcpRecvCb(void *arg, struct tcp_pcb *tpcb, struct pbuf *p, err_t err)
{
 810622c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8106230:	b08b      	sub	sp, #44	@ 0x2c
 8106232:	af00      	add	r7, sp, #0
 8106234:	60f8      	str	r0, [r7, #12]
 8106236:	60b9      	str	r1, [r7, #8]
 8106238:	607a      	str	r2, [r7, #4]
 810623a:	603b      	str	r3, [r7, #0]
        }
        default:
            // none other messages types are needed to be handled, so discard
            break;
    }
}
 810623c:	466b      	mov	r3, sp
 810623e:	461e      	mov	r6, r3
    if (!p || err != ERR_OK)
 8106240:	683b      	ldr	r3, [r7, #0]
 8106242:	2b00      	cmp	r3, #0
 8106244:	d003      	beq.n	810624e <_ZN17ConnectionManager15HandleTcpRecvCbEPvP7tcp_pcbP4pbufa+0x22>
 8106246:	f997 3048 	ldrsb.w	r3, [r7, #72]	@ 0x48
 810624a:	2b00      	cmp	r3, #0
 810624c:	d03c      	beq.n	81062c8 <_ZN17ConnectionManager15HandleTcpRecvCbEPvP7tcp_pcbP4pbufa+0x9c>
        tcp_arg(tcp_pcb, nullptr);
 810624e:	68fb      	ldr	r3, [r7, #12]
 8106250:	689b      	ldr	r3, [r3, #8]
 8106252:	2100      	movs	r1, #0
 8106254:	4618      	mov	r0, r3
 8106256:	f019 ffe1 	bl	812021c <tcp_arg>
        tcp_recv(tcp_pcb, nullptr);
 810625a:	68fb      	ldr	r3, [r7, #12]
 810625c:	689b      	ldr	r3, [r3, #8]
 810625e:	2100      	movs	r1, #0
 8106260:	4618      	mov	r0, r3
 8106262:	f019 ffed 	bl	8120240 <tcp_recv>
        tcp_err(tcp_pcb, nullptr);
 8106266:	68fb      	ldr	r3, [r7, #12]
 8106268:	689b      	ldr	r3, [r3, #8]
 810626a:	2100      	movs	r1, #0
 810626c:	4618      	mov	r0, r3
 810626e:	f01a f809 	bl	8120284 <tcp_err>
        tcp_close(tcp_pcb);
 8106272:	68fb      	ldr	r3, [r7, #12]
 8106274:	689b      	ldr	r3, [r3, #8]
 8106276:	4618      	mov	r0, r3
 8106278:	f018 fdfc 	bl	811ee74 <tcp_close>
        tcp_pcb = nullptr;
 810627c:	68fb      	ldr	r3, [r7, #12]
 810627e:	2200      	movs	r2, #0
 8106280:	609a      	str	r2, [r3, #8]
        LOG_DEBUG("Connection closed or error occurred.");
 8106282:	f7fa fe7d 	bl	8100f80 <_ZN10LogPrinter8instanceEv>
 8106286:	4603      	mov	r3, r0
 8106288:	4961      	ldr	r1, [pc, #388]	@ (8106410 <_ZN17ConnectionManager15HandleTcpRecvCbEPvP7tcp_pcbP4pbufa+0x1e4>)
 810628a:	4618      	mov	r0, r3
 810628c:	f7fa fea0 	bl	8100fd0 <_ZN10LogPrinter10printDebugEPKcz>
        EConnectionEvent connEvent = EVENT_TCP_CONNECTION_FAILED;
 8106290:	2304      	movs	r3, #4
 8106292:	753b      	strb	r3, [r7, #20]
        if(xQueueSend(connectionEventsQueue, &(connEvent), static_cast<TickType_t>(100000)) != pdPASS)
 8106294:	4b5f      	ldr	r3, [pc, #380]	@ (8106414 <_ZN17ConnectionManager15HandleTcpRecvCbEPvP7tcp_pcbP4pbufa+0x1e8>)
 8106296:	6818      	ldr	r0, [r3, #0]
 8106298:	f107 0114 	add.w	r1, r7, #20
 810629c:	2300      	movs	r3, #0
 810629e:	4a5e      	ldr	r2, [pc, #376]	@ (8106418 <_ZN17ConnectionManager15HandleTcpRecvCbEPvP7tcp_pcbP4pbufa+0x1ec>)
 81062a0:	f010 fe48 	bl	8116f34 <xQueueGenericSend>
 81062a4:	4603      	mov	r3, r0
 81062a6:	2b01      	cmp	r3, #1
 81062a8:	bf14      	ite	ne
 81062aa:	2301      	movne	r3, #1
 81062ac:	2300      	moveq	r3, #0
 81062ae:	b2db      	uxtb	r3, r3
 81062b0:	2b00      	cmp	r3, #0
 81062b2:	f000 80a8 	beq.w	8106406 <_ZN17ConnectionManager15HandleTcpRecvCbEPvP7tcp_pcbP4pbufa+0x1da>
            LOG_DEBUG("[FATAL ERROR] Could not send internal connection event: %d", connEvent);
 81062b6:	f7fa fe63 	bl	8100f80 <_ZN10LogPrinter8instanceEv>
 81062ba:	4603      	mov	r3, r0
 81062bc:	7d3a      	ldrb	r2, [r7, #20]
 81062be:	4957      	ldr	r1, [pc, #348]	@ (810641c <_ZN17ConnectionManager15HandleTcpRecvCbEPvP7tcp_pcbP4pbufa+0x1f0>)
 81062c0:	4618      	mov	r0, r3
 81062c2:	f7fa fe85 	bl	8100fd0 <_ZN10LogPrinter10printDebugEPKcz>
 81062c6:	e09e      	b.n	8106406 <_ZN17ConnectionManager15HandleTcpRecvCbEPvP7tcp_pcbP4pbufa+0x1da>
    size_t payloadLen = p->len;
 81062c8:	683b      	ldr	r3, [r7, #0]
 81062ca:	895b      	ldrh	r3, [r3, #10]
 81062cc:	627b      	str	r3, [r7, #36]	@ 0x24
    uint8_t data[payloadLen];
 81062ce:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 81062d0:	460b      	mov	r3, r1
 81062d2:	3b01      	subs	r3, #1
 81062d4:	623b      	str	r3, [r7, #32]
 81062d6:	2300      	movs	r3, #0
 81062d8:	4688      	mov	r8, r1
 81062da:	4699      	mov	r9, r3
 81062dc:	f04f 0200 	mov.w	r2, #0
 81062e0:	f04f 0300 	mov.w	r3, #0
 81062e4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 81062e8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 81062ec:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 81062f0:	2300      	movs	r3, #0
 81062f2:	460c      	mov	r4, r1
 81062f4:	461d      	mov	r5, r3
 81062f6:	f04f 0200 	mov.w	r2, #0
 81062fa:	f04f 0300 	mov.w	r3, #0
 81062fe:	00eb      	lsls	r3, r5, #3
 8106300:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8106304:	00e2      	lsls	r2, r4, #3
 8106306:	1dcb      	adds	r3, r1, #7
 8106308:	08db      	lsrs	r3, r3, #3
 810630a:	00db      	lsls	r3, r3, #3
 810630c:	ebad 0d03 	sub.w	sp, sp, r3
 8106310:	466b      	mov	r3, sp
 8106312:	3300      	adds	r3, #0
 8106314:	61fb      	str	r3, [r7, #28]
    std::memcpy(data, p->payload, payloadLen);
 8106316:	683b      	ldr	r3, [r7, #0]
 8106318:	685b      	ldr	r3, [r3, #4]
 810631a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 810631c:	4619      	mov	r1, r3
 810631e:	69f8      	ldr	r0, [r7, #28]
 8106320:	f020 fe0b 	bl	8126f3a <memcpy>
    tcp_recved(tcp_pcb, p->len);
 8106324:	68fb      	ldr	r3, [r7, #12]
 8106326:	689a      	ldr	r2, [r3, #8]
 8106328:	683b      	ldr	r3, [r7, #0]
 810632a:	895b      	ldrh	r3, [r3, #10]
 810632c:	4619      	mov	r1, r3
 810632e:	4610      	mov	r0, r2
 8106330:	f018 ff88 	bl	811f244 <tcp_recved>
    pbuf_free(p);
 8106334:	6838      	ldr	r0, [r7, #0]
 8106336:	f017 fff1 	bl	811e31c <pbuf_free>
    const uint32_t udsPayloadLen = (data[0] << 24) | (data[1] << 16) | (data[2] << 8) | data[3];
 810633a:	69fb      	ldr	r3, [r7, #28]
 810633c:	781b      	ldrb	r3, [r3, #0]
 810633e:	061a      	lsls	r2, r3, #24
 8106340:	69fb      	ldr	r3, [r7, #28]
 8106342:	785b      	ldrb	r3, [r3, #1]
 8106344:	041b      	lsls	r3, r3, #16
 8106346:	431a      	orrs	r2, r3
 8106348:	69fb      	ldr	r3, [r7, #28]
 810634a:	789b      	ldrb	r3, [r3, #2]
 810634c:	021b      	lsls	r3, r3, #8
 810634e:	4313      	orrs	r3, r2
 8106350:	69fa      	ldr	r2, [r7, #28]
 8106352:	78d2      	ldrb	r2, [r2, #3]
 8106354:	4313      	orrs	r3, r2
 8106356:	61bb      	str	r3, [r7, #24]
    if (udsPayloadLen + 6 > payloadLen)
 8106358:	69bb      	ldr	r3, [r7, #24]
 810635a:	3306      	adds	r3, #6
 810635c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 810635e:	429a      	cmp	r2, r3
 8106360:	d207      	bcs.n	8106372 <_ZN17ConnectionManager15HandleTcpRecvCbEPvP7tcp_pcbP4pbufa+0x146>
        LOG_DEBUG("Data length mismatch: declared %u, received %u.", udsPayloadLen, payloadLen);
 8106362:	f7fa fe0d 	bl	8100f80 <_ZN10LogPrinter8instanceEv>
 8106366:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8106368:	69ba      	ldr	r2, [r7, #24]
 810636a:	492d      	ldr	r1, [pc, #180]	@ (8106420 <_ZN17ConnectionManager15HandleTcpRecvCbEPvP7tcp_pcbP4pbufa+0x1f4>)
 810636c:	f7fa fe30 	bl	8100fd0 <_ZN10LogPrinter10printDebugEPKcz>
        return;
 8106370:	e049      	b.n	8106406 <_ZN17ConnectionManager15HandleTcpRecvCbEPvP7tcp_pcbP4pbufa+0x1da>
    const EECUAddress sourceAddr = static_cast<EECUAddress>(data[6]);
 8106372:	69fb      	ldr	r3, [r7, #28]
 8106374:	799b      	ldrb	r3, [r3, #6]
 8106376:	75fb      	strb	r3, [r7, #23]
    const EECUAddress targetAddr = static_cast<EECUAddress>(data[7]);
 8106378:	69fb      	ldr	r3, [r7, #28]
 810637a:	79db      	ldrb	r3, [r3, #7]
 810637c:	75bb      	strb	r3, [r7, #22]
    if(static_cast<uint8_t>(targetAddr) != DIAGNOSTIC_TOOL_INTERNAL_ADDR)
 810637e:	7dbb      	ldrb	r3, [r7, #22]
 8106380:	2bf4      	cmp	r3, #244	@ 0xf4
 8106382:	d13f      	bne.n	8106404 <_ZN17ConnectionManager15HandleTcpRecvCbEPvP7tcp_pcbP4pbufa+0x1d8>
    EUDSResponseSID SID = static_cast<EUDSResponseSID>(data[8]);
 8106384:	69fb      	ldr	r3, [r7, #28]
 8106386:	7a1b      	ldrb	r3, [r3, #8]
 8106388:	757b      	strb	r3, [r7, #21]
    switch(SID)
 810638a:	7d7b      	ldrb	r3, [r7, #21]
 810638c:	2b7f      	cmp	r3, #127	@ 0x7f
 810638e:	d021      	beq.n	81063d4 <_ZN17ConnectionManager15HandleTcpRecvCbEPvP7tcp_pcbP4pbufa+0x1a8>
 8106390:	7d7b      	ldrb	r3, [r7, #21]
 8106392:	2b7f      	cmp	r3, #127	@ 0x7f
 8106394:	d833      	bhi.n	81063fe <_ZN17ConnectionManager15HandleTcpRecvCbEPvP7tcp_pcbP4pbufa+0x1d2>
 8106396:	7d7b      	ldrb	r3, [r7, #21]
 8106398:	2b62      	cmp	r3, #98	@ 0x62
 810639a:	d003      	beq.n	81063a4 <_ZN17ConnectionManager15HandleTcpRecvCbEPvP7tcp_pcbP4pbufa+0x178>
 810639c:	7d7b      	ldrb	r3, [r7, #21]
 810639e:	2b6c      	cmp	r3, #108	@ 0x6c
 81063a0:	d00d      	beq.n	81063be <_ZN17ConnectionManager15HandleTcpRecvCbEPvP7tcp_pcbP4pbufa+0x192>
            break;
 81063a2:	e02c      	b.n	81063fe <_ZN17ConnectionManager15HandleTcpRecvCbEPvP7tcp_pcbP4pbufa+0x1d2>
            handleReadDataByIdentifier(&data[11], udsPayloadLen - 5); 
 81063a4:	69fb      	ldr	r3, [r7, #28]
 81063a6:	f103 010b 	add.w	r1, r3, #11
 81063aa:	69bb      	ldr	r3, [r7, #24]
 81063ac:	3b05      	subs	r3, #5
 81063ae:	461a      	mov	r2, r3
 81063b0:	68f8      	ldr	r0, [r7, #12]
 81063b2:	f000 f935 	bl	8106620 <_ZN17ConnectionManager26handleReadDataByIdentifierEPhm>
            negativeResponseCount = 0;
 81063b6:	68fb      	ldr	r3, [r7, #12]
 81063b8:	2200      	movs	r2, #0
 81063ba:	735a      	strb	r2, [r3, #13]
            break;
 81063bc:	e020      	b.n	8106400 <_ZN17ConnectionManager15HandleTcpRecvCbEPvP7tcp_pcbP4pbufa+0x1d4>
            handleDynamicallyDefineDataIdentifier(&data[9], sourceAddr);
 81063be:	69fb      	ldr	r3, [r7, #28]
 81063c0:	3309      	adds	r3, #9
 81063c2:	7dfa      	ldrb	r2, [r7, #23]
 81063c4:	4619      	mov	r1, r3
 81063c6:	68f8      	ldr	r0, [r7, #12]
 81063c8:	f000 fa20 	bl	810680c <_ZN17ConnectionManager37handleDynamicallyDefineDataIdentifierEPh11EECUAddress>
            negativeResponseCount = 0;
 81063cc:	68fb      	ldr	r3, [r7, #12]
 81063ce:	2200      	movs	r2, #0
 81063d0:	735a      	strb	r2, [r3, #13]
            break;
 81063d2:	e015      	b.n	8106400 <_ZN17ConnectionManager15HandleTcpRecvCbEPvP7tcp_pcbP4pbufa+0x1d4>
            negativeResponseCount++;
 81063d4:	68fb      	ldr	r3, [r7, #12]
 81063d6:	7b5b      	ldrb	r3, [r3, #13]
 81063d8:	3301      	adds	r3, #1
 81063da:	b2da      	uxtb	r2, r3
 81063dc:	68fb      	ldr	r3, [r7, #12]
 81063de:	735a      	strb	r2, [r3, #13]
            if(negativeResponseCount >= 10)
 81063e0:	68fb      	ldr	r3, [r7, #12]
 81063e2:	7b5b      	ldrb	r3, [r3, #13]
 81063e4:	2b09      	cmp	r3, #9
 81063e6:	d90a      	bls.n	81063fe <_ZN17ConnectionManager15HandleTcpRecvCbEPvP7tcp_pcbP4pbufa+0x1d2>
                EConnectionEvent connEvent = EVENT_TCP_CONNECTION_FAILED;
 81063e8:	2304      	movs	r3, #4
 81063ea:	74fb      	strb	r3, [r7, #19]
                xQueueSend(connectionEventsQueue, &(connEvent), static_cast<TickType_t>(10000));
 81063ec:	4b09      	ldr	r3, [pc, #36]	@ (8106414 <_ZN17ConnectionManager15HandleTcpRecvCbEPvP7tcp_pcbP4pbufa+0x1e8>)
 81063ee:	6818      	ldr	r0, [r3, #0]
 81063f0:	f107 0113 	add.w	r1, r7, #19
 81063f4:	2300      	movs	r3, #0
 81063f6:	f242 7210 	movw	r2, #10000	@ 0x2710
 81063fa:	f010 fd9b 	bl	8116f34 <xQueueGenericSend>
            break;
 81063fe:	bf00      	nop
 8106400:	46b5      	mov	sp, r6
 8106402:	e001      	b.n	8106408 <_ZN17ConnectionManager15HandleTcpRecvCbEPvP7tcp_pcbP4pbufa+0x1dc>
        return;
 8106404:	bf00      	nop
 8106406:	46b5      	mov	sp, r6
}
 8106408:	372c      	adds	r7, #44	@ 0x2c
 810640a:	46bd      	mov	sp, r7
 810640c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8106410:	0812799c 	.word	0x0812799c
 8106414:	10000308 	.word	0x10000308
 8106418:	000186a0 	.word	0x000186a0
 810641c:	08127794 	.word	0x08127794
 8106420:	08127688 	.word	0x08127688

08106424 <_ZN17ConnectionManager18HandleTcpConnectCbEPvP7tcp_pcba>:

void ConnectionManager::HandleTcpConnectCb(void *arg, struct tcp_pcb *tpcb, err_t err)
{
 8106424:	b580      	push	{r7, lr}
 8106426:	b086      	sub	sp, #24
 8106428:	af00      	add	r7, sp, #0
 810642a:	60f8      	str	r0, [r7, #12]
 810642c:	60b9      	str	r1, [r7, #8]
 810642e:	607a      	str	r2, [r7, #4]
 8106430:	70fb      	strb	r3, [r7, #3]
    // accoring to documentation this always call with err == ERR_OK, so this impl is in case of LWiP updates
    if (err != ERR_OK)
 8106432:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8106436:	2b00      	cmp	r3, #0
 8106438:	d022      	beq.n	8106480 <_ZN17ConnectionManager18HandleTcpConnectCbEPvP7tcp_pcba+0x5c>
    {
        LOG_DEBUG("Connection failed with error: %d", err);
 810643a:	f7fa fda1 	bl	8100f80 <_ZN10LogPrinter8instanceEv>
 810643e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8106442:	461a      	mov	r2, r3
 8106444:	4921      	ldr	r1, [pc, #132]	@ (81064cc <_ZN17ConnectionManager18HandleTcpConnectCbEPvP7tcp_pcba+0xa8>)
 8106446:	f7fa fdc3 	bl	8100fd0 <_ZN10LogPrinter10printDebugEPKcz>
        EConnectionEvent connEvent = EVENT_TCP_CONNECTION_FAILED;
 810644a:	2304      	movs	r3, #4
 810644c:	75fb      	strb	r3, [r7, #23]
        if(xQueueSend(connectionEventsQueue, &(connEvent), static_cast<TickType_t>(100000)) != pdPASS)
 810644e:	4b20      	ldr	r3, [pc, #128]	@ (81064d0 <_ZN17ConnectionManager18HandleTcpConnectCbEPvP7tcp_pcba+0xac>)
 8106450:	6818      	ldr	r0, [r3, #0]
 8106452:	f107 0117 	add.w	r1, r7, #23
 8106456:	2300      	movs	r3, #0
 8106458:	4a1e      	ldr	r2, [pc, #120]	@ (81064d4 <_ZN17ConnectionManager18HandleTcpConnectCbEPvP7tcp_pcba+0xb0>)
 810645a:	f010 fd6b 	bl	8116f34 <xQueueGenericSend>
 810645e:	4603      	mov	r3, r0
 8106460:	2b01      	cmp	r3, #1
 8106462:	bf14      	ite	ne
 8106464:	2301      	movne	r3, #1
 8106466:	2300      	moveq	r3, #0
 8106468:	b2db      	uxtb	r3, r3
 810646a:	2b00      	cmp	r3, #0
 810646c:	d029      	beq.n	81064c2 <_ZN17ConnectionManager18HandleTcpConnectCbEPvP7tcp_pcba+0x9e>
        {
            LOG_DEBUG("[FATAL ERROR] Could not send internal connection event: %d", connEvent);
 810646e:	f7fa fd87 	bl	8100f80 <_ZN10LogPrinter8instanceEv>
 8106472:	4603      	mov	r3, r0
 8106474:	7dfa      	ldrb	r2, [r7, #23]
 8106476:	4918      	ldr	r1, [pc, #96]	@ (81064d8 <_ZN17ConnectionManager18HandleTcpConnectCbEPvP7tcp_pcba+0xb4>)
 8106478:	4618      	mov	r0, r3
 810647a:	f7fa fda9 	bl	8100fd0 <_ZN10LogPrinter10printDebugEPKcz>
        if(xQueueSend(connectionEventsQueue, &(connEvent), static_cast<TickType_t>(100000)) != pdPASS)
        {
            LOG_DEBUG("[FATAL ERROR] Could not send internal connection event: %d", connEvent);
        }
    }
}
 810647e:	e020      	b.n	81064c2 <_ZN17ConnectionManager18HandleTcpConnectCbEPvP7tcp_pcba+0x9e>
        LOG_DEBUG("Connected to ECU.");
 8106480:	f7fa fd7e 	bl	8100f80 <_ZN10LogPrinter8instanceEv>
 8106484:	4603      	mov	r3, r0
 8106486:	4915      	ldr	r1, [pc, #84]	@ (81064dc <_ZN17ConnectionManager18HandleTcpConnectCbEPvP7tcp_pcba+0xb8>)
 8106488:	4618      	mov	r0, r3
 810648a:	f7fa fda1 	bl	8100fd0 <_ZN10LogPrinter10printDebugEPKcz>
        EConnectionEvent connEvent = EVENT_TCP_CONNECTED;
 810648e:	2303      	movs	r3, #3
 8106490:	75bb      	strb	r3, [r7, #22]
        if(xQueueSend(connectionEventsQueue, &(connEvent), static_cast<TickType_t>(100000)) != pdPASS)
 8106492:	4b0f      	ldr	r3, [pc, #60]	@ (81064d0 <_ZN17ConnectionManager18HandleTcpConnectCbEPvP7tcp_pcba+0xac>)
 8106494:	6818      	ldr	r0, [r3, #0]
 8106496:	f107 0116 	add.w	r1, r7, #22
 810649a:	2300      	movs	r3, #0
 810649c:	4a0d      	ldr	r2, [pc, #52]	@ (81064d4 <_ZN17ConnectionManager18HandleTcpConnectCbEPvP7tcp_pcba+0xb0>)
 810649e:	f010 fd49 	bl	8116f34 <xQueueGenericSend>
 81064a2:	4603      	mov	r3, r0
 81064a4:	2b01      	cmp	r3, #1
 81064a6:	bf14      	ite	ne
 81064a8:	2301      	movne	r3, #1
 81064aa:	2300      	moveq	r3, #0
 81064ac:	b2db      	uxtb	r3, r3
 81064ae:	2b00      	cmp	r3, #0
 81064b0:	d007      	beq.n	81064c2 <_ZN17ConnectionManager18HandleTcpConnectCbEPvP7tcp_pcba+0x9e>
            LOG_DEBUG("[FATAL ERROR] Could not send internal connection event: %d", connEvent);
 81064b2:	f7fa fd65 	bl	8100f80 <_ZN10LogPrinter8instanceEv>
 81064b6:	4603      	mov	r3, r0
 81064b8:	7dba      	ldrb	r2, [r7, #22]
 81064ba:	4907      	ldr	r1, [pc, #28]	@ (81064d8 <_ZN17ConnectionManager18HandleTcpConnectCbEPvP7tcp_pcba+0xb4>)
 81064bc:	4618      	mov	r0, r3
 81064be:	f7fa fd87 	bl	8100fd0 <_ZN10LogPrinter10printDebugEPKcz>
}
 81064c2:	bf00      	nop
 81064c4:	3718      	adds	r7, #24
 81064c6:	46bd      	mov	sp, r7
 81064c8:	bd80      	pop	{r7, pc}
 81064ca:	bf00      	nop
 81064cc:	081279c4 	.word	0x081279c4
 81064d0:	10000308 	.word	0x10000308
 81064d4:	000186a0 	.word	0x000186a0
 81064d8:	08127794 	.word	0x08127794
 81064dc:	081279e8 	.word	0x081279e8

081064e0 <_ZN17ConnectionManager14HandleTcpErrCbEPva>:

void ConnectionManager::HandleTcpErrCb(void *arg, err_t err)
{
 81064e0:	b580      	push	{r7, lr}
 81064e2:	b086      	sub	sp, #24
 81064e4:	af00      	add	r7, sp, #0
 81064e6:	60f8      	str	r0, [r7, #12]
 81064e8:	60b9      	str	r1, [r7, #8]
 81064ea:	4613      	mov	r3, r2
 81064ec:	71fb      	strb	r3, [r7, #7]
    LOG_DEBUG("TCP connection error: %d", err);
 81064ee:	f7fa fd47 	bl	8100f80 <_ZN10LogPrinter8instanceEv>
 81064f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 81064f6:	461a      	mov	r2, r3
 81064f8:	4910      	ldr	r1, [pc, #64]	@ (810653c <_ZN17ConnectionManager14HandleTcpErrCbEPva+0x5c>)
 81064fa:	f7fa fd69 	bl	8100fd0 <_ZN10LogPrinter10printDebugEPKcz>
    EConnectionEvent connEvent = EVENT_TCP_CONNECTION_FAILED;
 81064fe:	2304      	movs	r3, #4
 8106500:	75fb      	strb	r3, [r7, #23]
    if(xQueueSend(connectionEventsQueue, &(connEvent), static_cast<TickType_t>(100000)) != pdPASS)
 8106502:	4b0f      	ldr	r3, [pc, #60]	@ (8106540 <_ZN17ConnectionManager14HandleTcpErrCbEPva+0x60>)
 8106504:	6818      	ldr	r0, [r3, #0]
 8106506:	f107 0117 	add.w	r1, r7, #23
 810650a:	2300      	movs	r3, #0
 810650c:	4a0d      	ldr	r2, [pc, #52]	@ (8106544 <_ZN17ConnectionManager14HandleTcpErrCbEPva+0x64>)
 810650e:	f010 fd11 	bl	8116f34 <xQueueGenericSend>
 8106512:	4603      	mov	r3, r0
 8106514:	2b01      	cmp	r3, #1
 8106516:	bf14      	ite	ne
 8106518:	2301      	movne	r3, #1
 810651a:	2300      	moveq	r3, #0
 810651c:	b2db      	uxtb	r3, r3
 810651e:	2b00      	cmp	r3, #0
 8106520:	d007      	beq.n	8106532 <_ZN17ConnectionManager14HandleTcpErrCbEPva+0x52>
    {
        LOG_DEBUG("[FATAL ERROR] Could not send internal connection event: %d", connEvent);
 8106522:	f7fa fd2d 	bl	8100f80 <_ZN10LogPrinter8instanceEv>
 8106526:	4603      	mov	r3, r0
 8106528:	7dfa      	ldrb	r2, [r7, #23]
 810652a:	4907      	ldr	r1, [pc, #28]	@ (8106548 <_ZN17ConnectionManager14HandleTcpErrCbEPva+0x68>)
 810652c:	4618      	mov	r0, r3
 810652e:	f7fa fd4f 	bl	8100fd0 <_ZN10LogPrinter10printDebugEPKcz>
    }
}
 8106532:	bf00      	nop
 8106534:	3718      	adds	r7, #24
 8106536:	46bd      	mov	sp, r7
 8106538:	bd80      	pop	{r7, pc}
 810653a:	bf00      	nop
 810653c:	081279fc 	.word	0x081279fc
 8106540:	10000308 	.word	0x10000308
 8106544:	000186a0 	.word	0x000186a0
 8106548:	08127794 	.word	0x08127794

0810654c <_ZN17ConnectionManager7tcpSendEPhjb>:

bool ConnectionManager::tcpSend(uint8_t udsRequest[], size_t sizeOfUdsRequest, const bool tcpipThreadContext)
{
 810654c:	b580      	push	{r7, lr}
 810654e:	b086      	sub	sp, #24
 8106550:	af00      	add	r7, sp, #0
 8106552:	60f8      	str	r0, [r7, #12]
 8106554:	60b9      	str	r1, [r7, #8]
 8106556:	607a      	str	r2, [r7, #4]
 8106558:	70fb      	strb	r3, [r7, #3]
    if(!tcpipThreadContext)
 810655a:	78fb      	ldrb	r3, [r7, #3]
 810655c:	f083 0301 	eor.w	r3, r3, #1
 8106560:	b2db      	uxtb	r3, r3
 8106562:	2b00      	cmp	r3, #0
 8106564:	d002      	beq.n	810656c <_ZN17ConnectionManager7tcpSendEPhjb+0x20>
    {
        LOCK_TCPIP_CORE();
 8106566:	481b      	ldr	r0, [pc, #108]	@ (81065d4 <_ZN17ConnectionManager7tcpSendEPhjb+0x88>)
 8106568:	f018 fa1a 	bl	811e9a0 <sys_mutex_lock>
    }
    err_t res = tcp_write(tcp_pcb, udsRequest, sizeOfUdsRequest, TCP_WRITE_FLAG_COPY);
 810656c:	68fb      	ldr	r3, [r7, #12]
 810656e:	6898      	ldr	r0, [r3, #8]
 8106570:	687b      	ldr	r3, [r7, #4]
 8106572:	b29a      	uxth	r2, r3
 8106574:	2301      	movs	r3, #1
 8106576:	68b9      	ldr	r1, [r7, #8]
 8106578:	f01c fd22 	bl	8122fc0 <tcp_write>
 810657c:	4603      	mov	r3, r0
 810657e:	75fb      	strb	r3, [r7, #23]
    if (res != ERR_OK)
 8106580:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8106584:	2b00      	cmp	r3, #0
 8106586:	d012      	beq.n	81065ae <_ZN17ConnectionManager7tcpSendEPhjb+0x62>
    {
        LOG_DEBUG("Failed to send UDS request: %d", res);
 8106588:	f7fa fcfa 	bl	8100f80 <_ZN10LogPrinter8instanceEv>
 810658c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8106590:	461a      	mov	r2, r3
 8106592:	4911      	ldr	r1, [pc, #68]	@ (81065d8 <_ZN17ConnectionManager7tcpSendEPhjb+0x8c>)
 8106594:	f7fa fd1c 	bl	8100fd0 <_ZN10LogPrinter10printDebugEPKcz>
        if(!tcpipThreadContext)
 8106598:	78fb      	ldrb	r3, [r7, #3]
 810659a:	f083 0301 	eor.w	r3, r3, #1
 810659e:	b2db      	uxtb	r3, r3
 81065a0:	2b00      	cmp	r3, #0
 81065a2:	d002      	beq.n	81065aa <_ZN17ConnectionManager7tcpSendEPhjb+0x5e>
        {
            UNLOCK_TCPIP_CORE();
 81065a4:	480b      	ldr	r0, [pc, #44]	@ (81065d4 <_ZN17ConnectionManager7tcpSendEPhjb+0x88>)
 81065a6:	f018 fa0a 	bl	811e9be <sys_mutex_unlock>
        }
        return false;
 81065aa:	2300      	movs	r3, #0
 81065ac:	e00e      	b.n	81065cc <_ZN17ConnectionManager7tcpSendEPhjb+0x80>
    }

    tcp_output(tcp_pcb);
 81065ae:	68fb      	ldr	r3, [r7, #12]
 81065b0:	689b      	ldr	r3, [r3, #8]
 81065b2:	4618      	mov	r0, r3
 81065b4:	f01d faee 	bl	8123b94 <tcp_output>
    if(!tcpipThreadContext)
 81065b8:	78fb      	ldrb	r3, [r7, #3]
 81065ba:	f083 0301 	eor.w	r3, r3, #1
 81065be:	b2db      	uxtb	r3, r3
 81065c0:	2b00      	cmp	r3, #0
 81065c2:	d002      	beq.n	81065ca <_ZN17ConnectionManager7tcpSendEPhjb+0x7e>
    {
        UNLOCK_TCPIP_CORE();
 81065c4:	4803      	ldr	r0, [pc, #12]	@ (81065d4 <_ZN17ConnectionManager7tcpSendEPhjb+0x88>)
 81065c6:	f018 f9fa 	bl	811e9be <sys_mutex_unlock>
    }
    return true;
 81065ca:	2301      	movs	r3, #1
}
 81065cc:	4618      	mov	r0, r3
 81065ce:	3718      	adds	r7, #24
 81065d0:	46bd      	mov	sp, r7
 81065d2:	bd80      	pop	{r7, pc}
 81065d4:	1000e568 	.word	0x1000e568
 81065d8:	08127a18 	.word	0x08127a18

081065dc <_ZNRSt8optionalI8SMessageE5valueEv>:
	  return this->_M_get();
	__throw_bad_optional_access();
      }

      constexpr _Tp&
      value()&
 81065dc:	b580      	push	{r7, lr}
 81065de:	b082      	sub	sp, #8
 81065e0:	af00      	add	r7, sp, #0
 81065e2:	6078      	str	r0, [r7, #4]
      {
	if (this->_M_is_engaged())
 81065e4:	6878      	ldr	r0, [r7, #4]
 81065e6:	f000 f80e 	bl	8106606 <_ZNKSt19_Optional_base_implI8SMessageSt14_Optional_baseIS0_Lb1ELb1EEE13_M_is_engagedEv>
 81065ea:	4603      	mov	r3, r0
 81065ec:	2b00      	cmp	r3, #0
 81065ee:	d004      	beq.n	81065fa <_ZNRSt8optionalI8SMessageE5valueEv+0x1e>
	  return this->_M_get();
 81065f0:	6878      	ldr	r0, [r7, #4]
 81065f2:	f000 fa5b 	bl	8106aac <_ZNSt19_Optional_base_implI8SMessageSt14_Optional_baseIS0_Lb1ELb1EEE6_M_getEv>
 81065f6:	4603      	mov	r3, r0
 81065f8:	e001      	b.n	81065fe <_ZNRSt8optionalI8SMessageE5valueEv+0x22>
	__throw_bad_optional_access();
 81065fa:	f7ff f8eb 	bl	81057d4 <_ZSt27__throw_bad_optional_accessv>
      }
 81065fe:	4618      	mov	r0, r3
 8106600:	3708      	adds	r7, #8
 8106602:	46bd      	mov	sp, r7
 8106604:	bd80      	pop	{r7, pc}

08106606 <_ZNKSt19_Optional_base_implI8SMessageSt14_Optional_baseIS0_Lb1ELb1EEE13_M_is_engagedEv>:
      constexpr bool _M_is_engaged() const noexcept
 8106606:	b480      	push	{r7}
 8106608:	b083      	sub	sp, #12
 810660a:	af00      	add	r7, sp, #0
 810660c:	6078      	str	r0, [r7, #4]
      { return static_cast<const _Dp*>(this)->_M_payload._M_engaged; }
 810660e:	687b      	ldr	r3, [r7, #4]
 8106610:	7f1b      	ldrb	r3, [r3, #28]
 8106612:	4618      	mov	r0, r3
 8106614:	370c      	adds	r7, #12
 8106616:	46bd      	mov	sp, r7
 8106618:	f85d 7b04 	ldr.w	r7, [sp], #4
 810661c:	4770      	bx	lr
	...

08106620 <_ZN17ConnectionManager26handleReadDataByIdentifierEPhm>:

void ConnectionManager::handleReadDataByIdentifier(uint8_t dataPayload[], uint32_t size)
{
 8106620:	b5b0      	push	{r4, r5, r7, lr}
 8106622:	b09c      	sub	sp, #112	@ 0x70
 8106624:	af04      	add	r7, sp, #16
 8106626:	60f8      	str	r0, [r7, #12]
 8106628:	60b9      	str	r1, [r7, #8]
 810662a:	607a      	str	r2, [r7, #4]
    std::optional<SMessage> optMsg = APIDoIP::extractDataFromResponse(dataPayload, size, currently_processed_request);
 810662c:	68fb      	ldr	r3, [r7, #12]
 810662e:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8106632:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 8106636:	687a      	ldr	r2, [r7, #4]
 8106638:	68b9      	ldr	r1, [r7, #8]
 810663a:	f7fe fbaf 	bl	8104d9c <_ZN7APIDoIP23extractDataFromResponseEPKhjNS_12EDoIPRequestE>
    if(optMsg.has_value())
 810663e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8106642:	4618      	mov	r0, r3
 8106644:	f000 fa26 	bl	8106a94 <_ZNKSt8optionalI8SMessageE9has_valueEv>
 8106648:	4603      	mov	r3, r0
 810664a:	2b00      	cmp	r3, #0
 810664c:	f000 808e 	beq.w	810676c <_ZN17ConnectionManager26handleReadDataByIdentifierEPhm+0x14c>
    {
        SMessage msg = optMsg.value();
 8106650:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8106654:	4618      	mov	r0, r3
 8106656:	f7ff ffc1 	bl	81065dc <_ZNRSt8optionalI8SMessageE5valueEv>
 810665a:	4603      	mov	r3, r0
 810665c:	f107 0410 	add.w	r4, r7, #16
 8106660:	461d      	mov	r5, r3
 8106662:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8106664:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8106666:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 810666a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        xQueueSend(queueToEventManagerCM4, &(msg), static_cast<TickType_t>(10000));
 810666e:	4b4f      	ldr	r3, [pc, #316]	@ (81067ac <_ZN17ConnectionManager26handleReadDataByIdentifierEPhm+0x18c>)
 8106670:	6818      	ldr	r0, [r3, #0]
 8106672:	f107 0110 	add.w	r1, r7, #16
 8106676:	2300      	movs	r3, #0
 8106678:	f242 7210 	movw	r2, #10000	@ 0x2710
 810667c:	f010 fc5a 	bl	8116f34 <xQueueGenericSend>
        if(sending_data_by_uart)
 8106680:	68fb      	ldr	r3, [r7, #12]
 8106682:	7b9b      	ldrb	r3, [r3, #14]
 8106684:	2b00      	cmp	r3, #0
 8106686:	d071      	beq.n	810676c <_ZN17ConnectionManager26handleReadDataByIdentifierEPhm+0x14c>
        {
            TickType_t currentTick = (xTaskGetTickCount() * (1000/configTICK_RATE_HZ));
 8106688:	f012 fa06 	bl	8118a98 <xTaskGetTickCount>
 810668c:	65f8      	str	r0, [r7, #92]	@ 0x5c
            uint16_t diff = currentTick - starting_timestamp_for_data_UART;
 810668e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8106690:	b29a      	uxth	r2, r3
 8106692:	68fb      	ldr	r3, [r7, #12]
 8106694:	691b      	ldr	r3, [r3, #16]
 8106696:	b29b      	uxth	r3, r3
 8106698:	1ad3      	subs	r3, r2, r3
 810669a:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a

            const char* paramStr = APIDoIP::EDoIPRequest_ToCStringMap.at(static_cast<APIDoIP::EDoIPRequest>(msg.event_type));
 810669e:	7c3b      	ldrb	r3, [r7, #16]
 81066a0:	b25b      	sxtb	r3, r3
 81066a2:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
 81066a6:	f107 0353 	add.w	r3, r7, #83	@ 0x53
 81066aa:	4619      	mov	r1, r3
 81066ac:	4840      	ldr	r0, [pc, #256]	@ (81067b0 <_ZN17ConnectionManager26handleReadDataByIdentifierEPhm+0x190>)
 81066ae:	f000 fa1c 	bl	8106aea <_ZNKSt13unordered_mapIN7APIDoIP12EDoIPRequestEPKcSt4hashIS1_ESt8equal_toIS1_ESaISt4pairIKS1_S3_EEE2atERS9_>
 81066b2:	4603      	mov	r3, r0
 81066b4:	681b      	ldr	r3, [r3, #0]
 81066b6:	657b      	str	r3, [r7, #84]	@ 0x54
            switch(msg.event_type)
 81066b8:	7c3b      	ldrb	r3, [r7, #16]
 81066ba:	2b0e      	cmp	r3, #14
 81066bc:	d855      	bhi.n	810676a <_ZN17ConnectionManager26handleReadDataByIdentifierEPhm+0x14a>
 81066be:	a201      	add	r2, pc, #4	@ (adr r2, 81066c4 <_ZN17ConnectionManager26handleReadDataByIdentifierEPhm+0xa4>)
 81066c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81066c4:	08106701 	.word	0x08106701
 81066c8:	08106701 	.word	0x08106701
 81066cc:	08106717 	.word	0x08106717
 81066d0:	08106717 	.word	0x08106717
 81066d4:	08106717 	.word	0x08106717
 81066d8:	08106701 	.word	0x08106701
 81066dc:	08106701 	.word	0x08106701
 81066e0:	08106717 	.word	0x08106717
 81066e4:	08106701 	.word	0x08106701
 81066e8:	08106701 	.word	0x08106701
 81066ec:	08106701 	.word	0x08106701
 81066f0:	08106701 	.word	0x08106701
 81066f4:	0810672d 	.word	0x0810672d
 81066f8:	08106701 	.word	0x08106701
 81066fc:	08106751 	.word	0x08106751
                case EVENT_DATA_UPDATE_KOMBI_ENGINE_SPEED_ON_DISP:
                [[fallthrough]];
                case EVENT_DATA_UPDATE_IHKA_EVAPORATOR_TEMPERATURE_SENSOR:
                {
                    // we can take any uint16_t type from the message
                    SEND_DATA_UART("%s,%u,%u", paramStr, diff, msg.message_data.dme_engine_rotational_speed);
 8106700:	f7fa fc3e 	bl	8100f80 <_ZN10LogPrinter8instanceEv>
 8106704:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8106708:	8aba      	ldrh	r2, [r7, #20]
 810670a:	9200      	str	r2, [sp, #0]
 810670c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 810670e:	4929      	ldr	r1, [pc, #164]	@ (81067b4 <_ZN17ConnectionManager26handleReadDataByIdentifierEPhm+0x194>)
 8106710:	f7fa fc9e 	bl	8101050 <_ZN10LogPrinter9printUARTEPKcz>
                    break;
 8106714:	e02a      	b.n	810676c <_ZN17ConnectionManager26handleReadDataByIdentifierEPhm+0x14c>
                case EVENT_DATA_UPDATE_DME_AMBIENT_TEMPERATURE:
                [[fallthrough]];
                case EVENT_DATA_UPDATE_DME_ACCELERATOR_PEDAL_POSITION:
                {
                    // we can take any uint8_t type from the message
                    SEND_DATA_UART("%s,%u,%u", paramStr, diff, msg.message_data.dme_battery_voltage);
 8106716:	f7fa fc33 	bl	8100f80 <_ZN10LogPrinter8instanceEv>
 810671a:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 810671e:	7d3a      	ldrb	r2, [r7, #20]
 8106720:	9200      	str	r2, [sp, #0]
 8106722:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8106724:	4923      	ldr	r1, [pc, #140]	@ (81067b4 <_ZN17ConnectionManager26handleReadDataByIdentifierEPhm+0x194>)
 8106726:	f7fa fc93 	bl	8101050 <_ZN10LogPrinter9printUARTEPKcz>
                    break;
 810672a:	e01f      	b.n	810676c <_ZN17ConnectionManager26handleReadDataByIdentifierEPhm+0x14c>
                }
                case EVENT_DATA_UPDATE_KOMBI_FUEL:
                {
                    // we can take any uint8_t type from the message
                    SEND_DATA_UART("%s,%u,%u,%u,%u", paramStr, diff, msg.message_data.kombi_fuel_level[0], msg.message_data.kombi_fuel_level[1], msg.message_data.kombi_fuel_level[2]);
 810672c:	f7fa fc28 	bl	8100f80 <_ZN10LogPrinter8instanceEv>
 8106730:	4604      	mov	r4, r0
 8106732:	f8b7 005a 	ldrh.w	r0, [r7, #90]	@ 0x5a
 8106736:	697b      	ldr	r3, [r7, #20]
 8106738:	69ba      	ldr	r2, [r7, #24]
 810673a:	69f9      	ldr	r1, [r7, #28]
 810673c:	9102      	str	r1, [sp, #8]
 810673e:	9201      	str	r2, [sp, #4]
 8106740:	9300      	str	r3, [sp, #0]
 8106742:	4603      	mov	r3, r0
 8106744:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8106746:	491c      	ldr	r1, [pc, #112]	@ (81067b8 <_ZN17ConnectionManager26handleReadDataByIdentifierEPhm+0x198>)
 8106748:	4620      	mov	r0, r4
 810674a:	f7fa fc81 	bl	8101050 <_ZN10LogPrinter9printUARTEPKcz>
                    break;
 810674e:	e00d      	b.n	810676c <_ZN17ConnectionManager26handleReadDataByIdentifierEPhm+0x14c>
                }
                case EVENT_DATA_UPDATE_IHKA_TEMPERATURE_SELECTOR:
                {
                    SEND_DATA_UART("%s,%u,%u,%u", paramStr, diff, msg.message_data.ihka_temperature_selector[0], msg.message_data.ihka_temperature_selector[1]);
 8106750:	f7fa fc16 	bl	8100f80 <_ZN10LogPrinter8instanceEv>
 8106754:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8106758:	8aba      	ldrh	r2, [r7, #20]
 810675a:	8af9      	ldrh	r1, [r7, #22]
 810675c:	9101      	str	r1, [sp, #4]
 810675e:	9200      	str	r2, [sp, #0]
 8106760:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8106762:	4916      	ldr	r1, [pc, #88]	@ (81067bc <_ZN17ConnectionManager26handleReadDataByIdentifierEPhm+0x19c>)
 8106764:	f7fa fc74 	bl	8101050 <_ZN10LogPrinter9printUARTEPKcz>
                    break;
 8106768:	e000      	b.n	810676c <_ZN17ConnectionManager26handleReadDataByIdentifierEPhm+0x14c>
                }
                default:
                    break;
 810676a:	bf00      	nop
            }
        }
    }
    EConnectionEvent connEvent = EVENT_TCP_READ_DATA_BY_ID_RECEIVED;
 810676c:	2308      	movs	r3, #8
 810676e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if(xQueueSend(connectionEventsQueue, &(connEvent), static_cast<TickType_t>(100000)) != pdPASS)
 8106772:	4b13      	ldr	r3, [pc, #76]	@ (81067c0 <_ZN17ConnectionManager26handleReadDataByIdentifierEPhm+0x1a0>)
 8106774:	6818      	ldr	r0, [r3, #0]
 8106776:	f107 012f 	add.w	r1, r7, #47	@ 0x2f
 810677a:	2300      	movs	r3, #0
 810677c:	4a11      	ldr	r2, [pc, #68]	@ (81067c4 <_ZN17ConnectionManager26handleReadDataByIdentifierEPhm+0x1a4>)
 810677e:	f010 fbd9 	bl	8116f34 <xQueueGenericSend>
 8106782:	4603      	mov	r3, r0
 8106784:	2b01      	cmp	r3, #1
 8106786:	bf14      	ite	ne
 8106788:	2301      	movne	r3, #1
 810678a:	2300      	moveq	r3, #0
 810678c:	b2db      	uxtb	r3, r3
 810678e:	2b00      	cmp	r3, #0
 8106790:	d008      	beq.n	81067a4 <_ZN17ConnectionManager26handleReadDataByIdentifierEPhm+0x184>
    {
        LOG_DEBUG("[FATAL ERROR] Could not send internal connection event: %d", connEvent);
 8106792:	f7fa fbf5 	bl	8100f80 <_ZN10LogPrinter8instanceEv>
 8106796:	4603      	mov	r3, r0
 8106798:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 810679c:	490a      	ldr	r1, [pc, #40]	@ (81067c8 <_ZN17ConnectionManager26handleReadDataByIdentifierEPhm+0x1a8>)
 810679e:	4618      	mov	r0, r3
 81067a0:	f7fa fc16 	bl	8100fd0 <_ZN10LogPrinter10printDebugEPKcz>
    }
}
 81067a4:	bf00      	nop
 81067a6:	3760      	adds	r7, #96	@ 0x60
 81067a8:	46bd      	mov	sp, r7
 81067aa:	bdb0      	pop	{r4, r5, r7, pc}
 81067ac:	100001e8 	.word	0x100001e8
 81067b0:	1000029c 	.word	0x1000029c
 81067b4:	08127a38 	.word	0x08127a38
 81067b8:	08127a44 	.word	0x08127a44
 81067bc:	08127a54 	.word	0x08127a54
 81067c0:	10000308 	.word	0x10000308
 81067c4:	000186a0 	.word	0x000186a0
 81067c8:	08127794 	.word	0x08127794

081067cc <_ZSt17holds_alternativeI34EDynamicDataIndentifierRequestCodeJ7EUDSDIDS0_EEbRKSt7variantIJDpT0_EE>:
    holds_alternative(const variant<_Types...>& __v) noexcept
 81067cc:	b590      	push	{r4, r7, lr}
 81067ce:	b083      	sub	sp, #12
 81067d0:	af00      	add	r7, sp, #0
 81067d2:	6078      	str	r0, [r7, #4]
      return __v.index() == std::__find_uniq_type_in_pack<_Tp, _Types...>();
 81067d4:	6878      	ldr	r0, [r7, #4]
 81067d6:	f000 f80d 	bl	81067f4 <_ZNKSt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE5indexEv>
 81067da:	4604      	mov	r4, r0
 81067dc:	f7fe fffe 	bl	81057dc <_ZSt24__find_uniq_type_in_packI34EDynamicDataIndentifierRequestCodeJ7EUDSDIDS0_EEjv>
 81067e0:	4603      	mov	r3, r0
 81067e2:	429c      	cmp	r4, r3
 81067e4:	bf0c      	ite	eq
 81067e6:	2301      	moveq	r3, #1
 81067e8:	2300      	movne	r3, #0
 81067ea:	b2db      	uxtb	r3, r3
    }
 81067ec:	4618      	mov	r0, r3
 81067ee:	370c      	adds	r7, #12
 81067f0:	46bd      	mov	sp, r7
 81067f2:	bd90      	pop	{r4, r7, pc}

081067f4 <_ZNKSt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE5indexEv>:
	enable_if_t<!__exactly_once<_Tp>> emplace(_Args&&...) = delete;

      constexpr bool valueless_by_exception() const noexcept
      { return !this->_M_valid(); }

      constexpr size_t index() const noexcept
 81067f4:	b480      	push	{r7}
 81067f6:	b083      	sub	sp, #12
 81067f8:	af00      	add	r7, sp, #0
 81067fa:	6078      	str	r0, [r7, #4]
      {
	using __index_type = typename _Base::__index_type;
	if constexpr (__detail::__variant::__never_valueless<_Types...>())
	  return this->_M_index;
 81067fc:	687b      	ldr	r3, [r7, #4]
 81067fe:	791b      	ldrb	r3, [r3, #4]
	else if constexpr (sizeof...(_Types) <= __index_type(-1) / 2)
	  return make_signed_t<__index_type>(this->_M_index);
	else
	  return size_t(__index_type(this->_M_index + 1)) - 1;
      }
 8106800:	4618      	mov	r0, r3
 8106802:	370c      	adds	r7, #12
 8106804:	46bd      	mov	sp, r7
 8106806:	f85d 7b04 	ldr.w	r7, [sp], #4
 810680a:	4770      	bx	lr

0810680c <_ZN17ConnectionManager37handleDynamicallyDefineDataIdentifierEPh11EECUAddress>:

void ConnectionManager::handleDynamicallyDefineDataIdentifier(uint8_t dataPayload[], EECUAddress sourceEcuAddr)
{
 810680c:	b580      	push	{r7, lr}
 810680e:	b094      	sub	sp, #80	@ 0x50
 8106810:	af00      	add	r7, sp, #0
 8106812:	60f8      	str	r0, [r7, #12]
 8106814:	60b9      	str	r1, [r7, #8]
 8106816:	4613      	mov	r3, r2
 8106818:	71fb      	strb	r3, [r7, #7]
    const auto subSID = static_cast<DynamicallyAssignDataSubSID>(dataPayload[0]);
 810681a:	68bb      	ldr	r3, [r7, #8]
 810681c:	781b      	ldrb	r3, [r3, #0]
 810681e:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    switch(subSID)
 8106822:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8106826:	2b01      	cmp	r3, #1
 8106828:	d065      	beq.n	81068f6 <_ZN17ConnectionManager37handleDynamicallyDefineDataIdentifierEPh11EECUAddress+0xea>
 810682a:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 810682e:	2b03      	cmp	r3, #3
 8106830:	d17b      	bne.n	810692a <_ZN17ConnectionManager37handleDynamicallyDefineDataIdentifierEPh11EECUAddress+0x11e>
    {
        case DynamicallyAssignDataSubSID::REQUEST_FIRST:
        {
            const size_t totalUDSRequestSize = APIDoIP::secondReqDynDataSize + 6;
 8106832:	2310      	movs	r3, #16
 8106834:	64bb      	str	r3, [r7, #72]	@ 0x48
            uint8_t payloadToSend[totalUDSRequestSize] = {0}; // + 4 for data len and +2 for "checksum" 
 8106836:	2300      	movs	r3, #0
 8106838:	633b      	str	r3, [r7, #48]	@ 0x30
 810683a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 810683e:	2200      	movs	r2, #0
 8106840:	601a      	str	r2, [r3, #0]
 8106842:	605a      	str	r2, [r3, #4]
 8106844:	609a      	str	r2, [r3, #8]
            // response for the first dynamic assign sequence, so send next dynamic assign sequence packet

            auto identifierEntry = APIDoIP::dataIdentifierMap.find(currently_processed_request);
 8106846:	68fb      	ldr	r3, [r7, #12]
 8106848:	330c      	adds	r3, #12
 810684a:	4619      	mov	r1, r3
 810684c:	4839      	ldr	r0, [pc, #228]	@ (8106934 <_ZN17ConnectionManager37handleDynamicallyDefineDataIdentifierEPh11EECUAddress+0x128>)
 810684e:	f000 f95b 	bl	8106b08 <_ZNKSt13unordered_mapIN7APIDoIP12EDoIPRequestESt4pairISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressESt4hashIS1_ESt8equal_toIS1_ESaIS2_IKS1_S8_EEE4findERSD_>
 8106852:	4603      	mov	r3, r0
 8106854:	62fb      	str	r3, [r7, #44]	@ 0x2c
            if(identifierEntry == APIDoIP::dataIdentifierMap.end())
 8106856:	4837      	ldr	r0, [pc, #220]	@ (8106934 <_ZN17ConnectionManager37handleDynamicallyDefineDataIdentifierEPh11EECUAddress+0x128>)
 8106858:	f000 f965 	bl	8106b26 <_ZNKSt13unordered_mapIN7APIDoIP12EDoIPRequestESt4pairISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressESt4hashIS1_ESt8equal_toIS1_ESaIS2_IKS1_S8_EEE3endEv>
 810685c:	4603      	mov	r3, r0
 810685e:	643b      	str	r3, [r7, #64]	@ 0x40
 8106860:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8106864:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8106868:	4611      	mov	r1, r2
 810686a:	4618      	mov	r0, r3
 810686c:	f7fc f8d1 	bl	8102a12 <_ZNSt8__detaileqERKNS_19_Node_iterator_baseISt4pairIKN7APIDoIP12EDoIPRequestES1_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEESE_>
 8106870:	4603      	mov	r3, r0
 8106872:	2b00      	cmp	r3, #0
 8106874:	d009      	beq.n	810688a <_ZN17ConnectionManager37handleDynamicallyDefineDataIdentifierEPh11EECUAddress+0x7e>
            {
                LOG_DEBUG("[FATAL ERROR] currently processed request invalid: %d", currently_processed_request);
 8106876:	f7fa fb83 	bl	8100f80 <_ZN10LogPrinter8instanceEv>
 810687a:	68fb      	ldr	r3, [r7, #12]
 810687c:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8106880:	461a      	mov	r2, r3
 8106882:	492d      	ldr	r1, [pc, #180]	@ (8106938 <_ZN17ConnectionManager37handleDynamicallyDefineDataIdentifierEPh11EECUAddress+0x12c>)
 8106884:	f7fa fba4 	bl	8100fd0 <_ZN10LogPrinter10printDebugEPKcz>
                return;
 8106888:	e050      	b.n	810692c <_ZN17ConnectionManager37handleDynamicallyDefineDataIdentifierEPh11EECUAddress+0x120>
            }
            auto idenidentifierAttributes = identifierEntry->second;
 810688a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 810688e:	4618      	mov	r0, r3
 8106890:	f000 f956 	bl	8106b40 <_ZNKSt8__detail20_Node_const_iteratorISt4pairIKN7APIDoIP12EDoIPRequestES1_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0ELb0EEptEv>
 8106894:	4602      	mov	r2, r0
 8106896:	f107 0320 	add.w	r3, r7, #32
 810689a:	3204      	adds	r2, #4
 810689c:	ca07      	ldmia	r2, {r0, r1, r2}
 810689e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            if(!std::holds_alternative<EDynamicDataIndentifierRequestCode>(idenidentifierAttributes.first))
 81068a2:	f107 0320 	add.w	r3, r7, #32
 81068a6:	4618      	mov	r0, r3
 81068a8:	f7ff ff90 	bl	81067cc <_ZSt17holds_alternativeI34EDynamicDataIndentifierRequestCodeJ7EUDSDIDS0_EEbRKSt7variantIJDpT0_EE>
 81068ac:	4603      	mov	r3, r0
 81068ae:	f083 0301 	eor.w	r3, r3, #1
 81068b2:	b2db      	uxtb	r3, r3
 81068b4:	2b00      	cmp	r3, #0
 81068b6:	d009      	beq.n	81068cc <_ZN17ConnectionManager37handleDynamicallyDefineDataIdentifierEPh11EECUAddress+0xc0>
            {
                LOG_DEBUG("[FATAL ERROR] currently processed request has wrong DID assignment: %d", currently_processed_request);
 81068b8:	f7fa fb62 	bl	8100f80 <_ZN10LogPrinter8instanceEv>
 81068bc:	68fb      	ldr	r3, [r7, #12]
 81068be:	f993 300c 	ldrsb.w	r3, [r3, #12]
 81068c2:	461a      	mov	r2, r3
 81068c4:	491d      	ldr	r1, [pc, #116]	@ (810693c <_ZN17ConnectionManager37handleDynamicallyDefineDataIdentifierEPh11EECUAddress+0x130>)
 81068c6:	f7fa fb83 	bl	8100fd0 <_ZN10LogPrinter10printDebugEPKcz>
                return;
 81068ca:	e02f      	b.n	810692c <_ZN17ConnectionManager37handleDynamicallyDefineDataIdentifierEPh11EECUAddress+0x120>
            }
            APIDoIP::prepareSecondRequestForDynamicData(payloadToSend, sourceEcuAddr, std::get<EDynamicDataIndentifierRequestCode>(idenidentifierAttributes.first)); //TODO BATTERY_VOLTAGE na sztywno
 81068cc:	f107 0320 	add.w	r3, r7, #32
 81068d0:	4618      	mov	r0, r3
 81068d2:	f000 f944 	bl	8106b5e <_ZSt3getI34EDynamicDataIndentifierRequestCodeJ7EUDSDIDS0_EERT_RSt7variantIJDpT0_EE>
 81068d6:	4603      	mov	r3, r0
 81068d8:	681a      	ldr	r2, [r3, #0]
 81068da:	79f9      	ldrb	r1, [r7, #7]
 81068dc:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 81068e0:	4618      	mov	r0, r3
 81068e2:	f7fe fa07 	bl	8104cf4 <_ZN7APIDoIP34prepareSecondRequestForDynamicDataEPh11EECUAddress34EDynamicDataIndentifierRequestCode>
            tcpSend(payloadToSend, totalUDSRequestSize, true);
 81068e6:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 81068ea:	2301      	movs	r3, #1
 81068ec:	2210      	movs	r2, #16
 81068ee:	68f8      	ldr	r0, [r7, #12]
 81068f0:	f7ff fe2c 	bl	810654c <_ZN17ConnectionManager7tcpSendEPhjb>
 81068f4:	e01a      	b.n	810692c <_ZN17ConnectionManager37handleDynamicallyDefineDataIdentifierEPh11EECUAddress+0x120>
            break;
        }
        case DynamicallyAssignDataSubSID::REQUEST_ASSIGN:
        {
            const size_t totalUDSRequestSize = APIDoIP::dataReqDataSize + 6;
 81068f6:	230b      	movs	r3, #11
 81068f8:	647b      	str	r3, [r7, #68]	@ 0x44
            uint8_t payloadToSend[totalUDSRequestSize] = {0}; // + 4 for data len and +2 for "checksum" 
 81068fa:	2300      	movs	r3, #0
 81068fc:	617b      	str	r3, [r7, #20]
 81068fe:	f107 0318 	add.w	r3, r7, #24
 8106902:	2200      	movs	r2, #0
 8106904:	601a      	str	r2, [r3, #0]
 8106906:	f8c3 2003 	str.w	r2, [r3, #3]
            // response for the second dynamic assign sequence, so send request for data
            APIDoIP::prepareDataRequest(payloadToSend, sourceEcuAddr, EUDSDID::DYNAMICALLY_DEFINED_DATA_IDENTIFIER_0);
 810690a:	79f9      	ldrb	r1, [r7, #7]
 810690c:	f107 0314 	add.w	r3, r7, #20
 8106910:	f44f 4273 	mov.w	r2, #62208	@ 0xf300
 8106914:	4618      	mov	r0, r3
 8106916:	f7fe f975 	bl	8104c04 <_ZN7APIDoIP18prepareDataRequestEPh11EECUAddress7EUDSDID>
            tcpSend(payloadToSend, totalUDSRequestSize, true);
 810691a:	f107 0114 	add.w	r1, r7, #20
 810691e:	2301      	movs	r3, #1
 8106920:	220b      	movs	r2, #11
 8106922:	68f8      	ldr	r0, [r7, #12]
 8106924:	f7ff fe12 	bl	810654c <_ZN17ConnectionManager7tcpSendEPhjb>
            break;
 8106928:	e000      	b.n	810692c <_ZN17ConnectionManager37handleDynamicallyDefineDataIdentifierEPh11EECUAddress+0x120>
        }
        default:
            break;
 810692a:	bf00      	nop
    }
}
 810692c:	3750      	adds	r7, #80	@ 0x50
 810692e:	46bd      	mov	sp, r7
 8106930:	bd80      	pop	{r7, pc}
 8106932:	bf00      	nop
 8106934:	10000280 	.word	0x10000280
 8106938:	08127a60 	.word	0x08127a60
 810693c:	08127a98 	.word	0x08127a98

08106940 <_ZN17ConnectionManager18sendRequestForDataEN7APIDoIP12EDoIPRequestE>:

void ConnectionManager::sendRequestForData(APIDoIP::EDoIPRequest request)
{
 8106940:	b590      	push	{r4, r7, lr}
 8106942:	b091      	sub	sp, #68	@ 0x44
 8106944:	af00      	add	r7, sp, #0
 8106946:	6078      	str	r0, [r7, #4]
 8106948:	460b      	mov	r3, r1
 810694a:	70fb      	strb	r3, [r7, #3]
    currently_processed_request = request;
 810694c:	f997 2003 	ldrsb.w	r2, [r7, #3]
 8106950:	687b      	ldr	r3, [r7, #4]
 8106952:	731a      	strb	r2, [r3, #12]
    auto identifierEntry = APIDoIP::dataIdentifierMap.find(request);
 8106954:	1cfb      	adds	r3, r7, #3
 8106956:	4619      	mov	r1, r3
 8106958:	4837      	ldr	r0, [pc, #220]	@ (8106a38 <_ZN17ConnectionManager18sendRequestForDataEN7APIDoIP12EDoIPRequestE+0xf8>)
 810695a:	f000 f8d5 	bl	8106b08 <_ZNKSt13unordered_mapIN7APIDoIP12EDoIPRequestESt4pairISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressESt4hashIS1_ESt8equal_toIS1_ESaIS2_IKS1_S8_EEE4findERSD_>
 810695e:	4603      	mov	r3, r0
 8106960:	633b      	str	r3, [r7, #48]	@ 0x30
    if(identifierEntry == APIDoIP::dataIdentifierMap.end())
 8106962:	4835      	ldr	r0, [pc, #212]	@ (8106a38 <_ZN17ConnectionManager18sendRequestForDataEN7APIDoIP12EDoIPRequestE+0xf8>)
 8106964:	f000 f8df 	bl	8106b26 <_ZNKSt13unordered_mapIN7APIDoIP12EDoIPRequestESt4pairISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressESt4hashIS1_ESt8equal_toIS1_ESaIS2_IKS1_S8_EEE3endEv>
 8106968:	4603      	mov	r3, r0
 810696a:	637b      	str	r3, [r7, #52]	@ 0x34
 810696c:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 8106970:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8106974:	4611      	mov	r1, r2
 8106976:	4618      	mov	r0, r3
 8106978:	f7fc f84b 	bl	8102a12 <_ZNSt8__detaileqERKNS_19_Node_iterator_baseISt4pairIKN7APIDoIP12EDoIPRequestES1_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEESE_>
 810697c:	4603      	mov	r3, r0
 810697e:	2b00      	cmp	r3, #0
 8106980:	d009      	beq.n	8106996 <_ZN17ConnectionManager18sendRequestForDataEN7APIDoIP12EDoIPRequestE+0x56>
    {
        LOG_DEBUG("Requested data identifier invalid: %d", request);
 8106982:	f7fa fafd 	bl	8100f80 <_ZN10LogPrinter8instanceEv>
 8106986:	4603      	mov	r3, r0
 8106988:	f997 2003 	ldrsb.w	r2, [r7, #3]
 810698c:	492b      	ldr	r1, [pc, #172]	@ (8106a3c <_ZN17ConnectionManager18sendRequestForDataEN7APIDoIP12EDoIPRequestE+0xfc>)
 810698e:	4618      	mov	r0, r3
 8106990:	f7fa fb1e 	bl	8100fd0 <_ZN10LogPrinter10printDebugEPKcz>
 8106994:	e04c      	b.n	8106a30 <_ZN17ConnectionManager18sendRequestForDataEN7APIDoIP12EDoIPRequestE+0xf0>
        return;
    }

    auto idenidentifierAttributes = identifierEntry->second;
 8106996:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 810699a:	4618      	mov	r0, r3
 810699c:	f000 f8d0 	bl	8106b40 <_ZNKSt8__detail20_Node_const_iteratorISt4pairIKN7APIDoIP12EDoIPRequestES1_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0ELb0EEptEv>
 81069a0:	4602      	mov	r2, r0
 81069a2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 81069a6:	3204      	adds	r2, #4
 81069a8:	ca07      	ldmia	r2, {r0, r1, r2}
 81069aa:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    if(std::holds_alternative<EUDSDID>(idenidentifierAttributes.first))
 81069ae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 81069b2:	4618      	mov	r0, r3
 81069b4:	f000 f8e1 	bl	8106b7a <_ZSt17holds_alternativeI7EUDSDIDJS0_34EDynamicDataIndentifierRequestCodeEEbRKSt7variantIJDpT0_EE>
 81069b8:	4603      	mov	r3, r0
 81069ba:	2b00      	cmp	r3, #0
 81069bc:	d020      	beq.n	8106a00 <_ZN17ConnectionManager18sendRequestForDataEN7APIDoIP12EDoIPRequestE+0xc0>
    {
        const size_t totalUDSRequestSize = APIDoIP::dataReqDataSize + 6;
 81069be:	230b      	movs	r3, #11
 81069c0:	63bb      	str	r3, [r7, #56]	@ 0x38
        uint8_t payloadToSend[totalUDSRequestSize] = {0}; // + 4 for data len and +2 for "checksum" 
 81069c2:	2300      	movs	r3, #0
 81069c4:	61bb      	str	r3, [r7, #24]
 81069c6:	f107 031c 	add.w	r3, r7, #28
 81069ca:	2200      	movs	r2, #0
 81069cc:	601a      	str	r2, [r3, #0]
 81069ce:	f8c3 2003 	str.w	r2, [r3, #3]
        APIDoIP::prepareDataRequest(payloadToSend, idenidentifierAttributes.second, std::get<EUDSDID>(idenidentifierAttributes.first));
 81069d2:	f897 402c 	ldrb.w	r4, [r7, #44]	@ 0x2c
 81069d6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 81069da:	4618      	mov	r0, r3
 81069dc:	f000 f8e1 	bl	8106ba2 <_ZSt3getI7EUDSDIDJS0_34EDynamicDataIndentifierRequestCodeEERT_RSt7variantIJDpT0_EE>
 81069e0:	4603      	mov	r3, r0
 81069e2:	881a      	ldrh	r2, [r3, #0]
 81069e4:	f107 0318 	add.w	r3, r7, #24
 81069e8:	4621      	mov	r1, r4
 81069ea:	4618      	mov	r0, r3
 81069ec:	f7fe f90a 	bl	8104c04 <_ZN7APIDoIP18prepareDataRequestEPh11EECUAddress7EUDSDID>
        tcpSend(payloadToSend, totalUDSRequestSize, false);
 81069f0:	f107 0118 	add.w	r1, r7, #24
 81069f4:	2300      	movs	r3, #0
 81069f6:	220b      	movs	r2, #11
 81069f8:	6878      	ldr	r0, [r7, #4]
 81069fa:	f7ff fda7 	bl	810654c <_ZN17ConnectionManager7tcpSendEPhjb>
 81069fe:	e017      	b.n	8106a30 <_ZN17ConnectionManager18sendRequestForDataEN7APIDoIP12EDoIPRequestE+0xf0>
    }
    else
    {
        const size_t totalUDSRequestSize = APIDoIP::firstReqDynDataSize + 6;
 8106a00:	230c      	movs	r3, #12
 8106a02:	63fb      	str	r3, [r7, #60]	@ 0x3c
        uint8_t payloadToSend[totalUDSRequestSize] = {0}; // + 4 for data len and +2 for "checksum" 
 8106a04:	2300      	movs	r3, #0
 8106a06:	60fb      	str	r3, [r7, #12]
 8106a08:	f107 0310 	add.w	r3, r7, #16
 8106a0c:	2200      	movs	r2, #0
 8106a0e:	601a      	str	r2, [r3, #0]
 8106a10:	605a      	str	r2, [r3, #4]
        APIDoIP::prepareFirstRequestForDynamicData(payloadToSend, idenidentifierAttributes.second);
 8106a12:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8106a16:	f107 030c 	add.w	r3, r7, #12
 8106a1a:	4611      	mov	r1, r2
 8106a1c:	4618      	mov	r0, r3
 8106a1e:	f7fe f92e 	bl	8104c7e <_ZN7APIDoIP33prepareFirstRequestForDynamicDataEPh11EECUAddress>
        tcpSend(payloadToSend, totalUDSRequestSize, false);
 8106a22:	f107 010c 	add.w	r1, r7, #12
 8106a26:	2300      	movs	r3, #0
 8106a28:	220c      	movs	r2, #12
 8106a2a:	6878      	ldr	r0, [r7, #4]
 8106a2c:	f7ff fd8e 	bl	810654c <_ZN17ConnectionManager7tcpSendEPhjb>
    }
}
 8106a30:	3744      	adds	r7, #68	@ 0x44
 8106a32:	46bd      	mov	sp, r7
 8106a34:	bd90      	pop	{r4, r7, pc}
 8106a36:	bf00      	nop
 8106a38:	10000280 	.word	0x10000280
 8106a3c:	08127ae0 	.word	0x08127ae0

08106a40 <_ZN17ConnectionManager18processUdpDicoveryEv>:

void ConnectionManager::processUdpDicovery()
{
 8106a40:	b580      	push	{r7, lr}
 8106a42:	b082      	sub	sp, #8
 8106a44:	af00      	add	r7, sp, #0
 8106a46:	6078      	str	r0, [r7, #4]
    sendSSDP();
 8106a48:	6878      	ldr	r0, [r7, #4]
 8106a4a:	f7fe ffb7 	bl	81059bc <_ZN17ConnectionManager8sendSSDPEv>
    sendSLP();
 8106a4e:	6878      	ldr	r0, [r7, #4]
 8106a50:	f7ff f808 	bl	8105a64 <_ZN17ConnectionManager7sendSLPEv>
    sendDoIPInit();
 8106a54:	6878      	ldr	r0, [r7, #4]
 8106a56:	f7ff f873 	bl	8105b40 <_ZN17ConnectionManager12sendDoIPInitEv>
    osDelay(300);
 8106a5a:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8106a5e:	f00e ff5a 	bl	8115916 <osDelay>
}
 8106a62:	bf00      	nop
 8106a64:	3708      	adds	r7, #8
 8106a66:	46bd      	mov	sp, r7
 8106a68:	bd80      	pop	{r7, pc}

08106a6a <_ZN17ConnectionManager20setSendingDataByUARTEb>:

void ConnectionManager::setSendingDataByUART(bool onoff)
{
 8106a6a:	b580      	push	{r7, lr}
 8106a6c:	b082      	sub	sp, #8
 8106a6e:	af00      	add	r7, sp, #0
 8106a70:	6078      	str	r0, [r7, #4]
 8106a72:	460b      	mov	r3, r1
 8106a74:	70fb      	strb	r3, [r7, #3]
    sending_data_by_uart = onoff;
 8106a76:	687b      	ldr	r3, [r7, #4]
 8106a78:	78fa      	ldrb	r2, [r7, #3]
 8106a7a:	739a      	strb	r2, [r3, #14]
    if(onoff)
 8106a7c:	78fb      	ldrb	r3, [r7, #3]
 8106a7e:	2b00      	cmp	r3, #0
 8106a80:	d004      	beq.n	8106a8c <_ZN17ConnectionManager20setSendingDataByUARTEb+0x22>
    {
        starting_timestamp_for_data_UART = xTaskGetTickCount() * (1000/configTICK_RATE_HZ);
 8106a82:	f012 f809 	bl	8118a98 <xTaskGetTickCount>
 8106a86:	4602      	mov	r2, r0
 8106a88:	687b      	ldr	r3, [r7, #4]
 8106a8a:	611a      	str	r2, [r3, #16]
    }
}
 8106a8c:	bf00      	nop
 8106a8e:	3708      	adds	r7, #8
 8106a90:	46bd      	mov	sp, r7
 8106a92:	bd80      	pop	{r7, pc}

08106a94 <_ZNKSt8optionalI8SMessageE9has_valueEv>:
      constexpr bool has_value() const noexcept
 8106a94:	b580      	push	{r7, lr}
 8106a96:	b082      	sub	sp, #8
 8106a98:	af00      	add	r7, sp, #0
 8106a9a:	6078      	str	r0, [r7, #4]
      { return this->_M_is_engaged(); }
 8106a9c:	6878      	ldr	r0, [r7, #4]
 8106a9e:	f7ff fdb2 	bl	8106606 <_ZNKSt19_Optional_base_implI8SMessageSt14_Optional_baseIS0_Lb1ELb1EEE13_M_is_engagedEv>
 8106aa2:	4603      	mov	r3, r0
 8106aa4:	4618      	mov	r0, r3
 8106aa6:	3708      	adds	r7, #8
 8106aa8:	46bd      	mov	sp, r7
 8106aaa:	bd80      	pop	{r7, pc}

08106aac <_ZNSt19_Optional_base_implI8SMessageSt14_Optional_baseIS0_Lb1ELb1EEE6_M_getEv>:
      _M_get() noexcept
 8106aac:	b580      	push	{r7, lr}
 8106aae:	b082      	sub	sp, #8
 8106ab0:	af00      	add	r7, sp, #0
 8106ab2:	6078      	str	r0, [r7, #4]
	__glibcxx_assert(this->_M_is_engaged());
 8106ab4:	f7fa fc22 	bl	81012fc <__is_constant_evaluated>
 8106ab8:	4603      	mov	r3, r0
 8106aba:	2b00      	cmp	r3, #0
 8106abc:	d00a      	beq.n	8106ad4 <_ZNSt19_Optional_base_implI8SMessageSt14_Optional_baseIS0_Lb1ELb1EEE6_M_getEv+0x28>
 8106abe:	6878      	ldr	r0, [r7, #4]
 8106ac0:	f7ff fda1 	bl	8106606 <_ZNKSt19_Optional_base_implI8SMessageSt14_Optional_baseIS0_Lb1ELb1EEE13_M_is_engagedEv>
 8106ac4:	4603      	mov	r3, r0
 8106ac6:	f083 0301 	eor.w	r3, r3, #1
 8106aca:	b2db      	uxtb	r3, r3
 8106acc:	2b00      	cmp	r3, #0
 8106ace:	d001      	beq.n	8106ad4 <_ZNSt19_Optional_base_implI8SMessageSt14_Optional_baseIS0_Lb1ELb1EEE6_M_getEv+0x28>
 8106ad0:	2301      	movs	r3, #1
 8106ad2:	e000      	b.n	8106ad6 <_ZNSt19_Optional_base_implI8SMessageSt14_Optional_baseIS0_Lb1ELb1EEE6_M_getEv+0x2a>
 8106ad4:	2300      	movs	r3, #0
 8106ad6:	2b00      	cmp	r3, #0
	return static_cast<_Dp*>(this)->_M_payload._M_get();
 8106ad8:	687b      	ldr	r3, [r7, #4]
 8106ada:	4618      	mov	r0, r3
 8106adc:	f000 f86f 	bl	8106bbe <_ZNSt22_Optional_payload_baseI8SMessageE6_M_getEv>
 8106ae0:	4603      	mov	r3, r0
      }
 8106ae2:	4618      	mov	r0, r3
 8106ae4:	3708      	adds	r7, #8
 8106ae6:	46bd      	mov	sp, r7
 8106ae8:	bd80      	pop	{r7, pc}

08106aea <_ZNKSt13unordered_mapIN7APIDoIP12EDoIPRequestEPKcSt4hashIS1_ESt8equal_toIS1_ESaISt4pairIKS1_S3_EEE2atERS9_>:
      mapped_type&
      at(const key_type& __k)
      { return _M_h.at(__k); }

      const mapped_type&
      at(const key_type& __k) const
 8106aea:	b580      	push	{r7, lr}
 8106aec:	b082      	sub	sp, #8
 8106aee:	af00      	add	r7, sp, #0
 8106af0:	6078      	str	r0, [r7, #4]
 8106af2:	6039      	str	r1, [r7, #0]
      { return _M_h.at(__k); }
 8106af4:	687b      	ldr	r3, [r7, #4]
 8106af6:	6839      	ldr	r1, [r7, #0]
 8106af8:	4618      	mov	r0, r3
 8106afa:	f000 f86b 	bl	8106bd4 <_ZNKSt8__detail9_Map_baseIN7APIDoIP12EDoIPRequestESt4pairIKS2_PKcESaIS7_ENS_10_Select1stESt8equal_toIS2_ESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_20_Prime_rehash_policyENS_17_Hashtable_traitsILb0ELb0ELb1EEELb1EE2atERS4_>
 8106afe:	4603      	mov	r3, r0
 8106b00:	4618      	mov	r0, r3
 8106b02:	3708      	adds	r7, #8
 8106b04:	46bd      	mov	sp, r7
 8106b06:	bd80      	pop	{r7, pc}

08106b08 <_ZNKSt13unordered_mapIN7APIDoIP12EDoIPRequestESt4pairISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressESt4hashIS1_ESt8equal_toIS1_ESaIS2_IKS1_S8_EEE4findERSD_>:
      find(const key_type& __x) const
 8106b08:	b580      	push	{r7, lr}
 8106b0a:	b082      	sub	sp, #8
 8106b0c:	af00      	add	r7, sp, #0
 8106b0e:	6078      	str	r0, [r7, #4]
 8106b10:	6039      	str	r1, [r7, #0]
      { return _M_h.find(__x); }
 8106b12:	687b      	ldr	r3, [r7, #4]
 8106b14:	6839      	ldr	r1, [r7, #0]
 8106b16:	4618      	mov	r0, r3
 8106b18:	f000 f87a 	bl	8106c10 <_ZNKSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE4findERS3_>
 8106b1c:	4603      	mov	r3, r0
 8106b1e:	4618      	mov	r0, r3
 8106b20:	3708      	adds	r7, #8
 8106b22:	46bd      	mov	sp, r7
 8106b24:	bd80      	pop	{r7, pc}

08106b26 <_ZNKSt13unordered_mapIN7APIDoIP12EDoIPRequestESt4pairISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressESt4hashIS1_ESt8equal_toIS1_ESaIS2_IKS1_S8_EEE3endEv>:
      end() const noexcept
 8106b26:	b580      	push	{r7, lr}
 8106b28:	b082      	sub	sp, #8
 8106b2a:	af00      	add	r7, sp, #0
 8106b2c:	6078      	str	r0, [r7, #4]
      { return _M_h.end(); }
 8106b2e:	687b      	ldr	r3, [r7, #4]
 8106b30:	4618      	mov	r0, r3
 8106b32:	f000 f8cb 	bl	8106ccc <_ZNKSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE3endEv>
 8106b36:	4603      	mov	r3, r0
 8106b38:	4618      	mov	r0, r3
 8106b3a:	3708      	adds	r7, #8
 8106b3c:	46bd      	mov	sp, r7
 8106b3e:	bd80      	pop	{r7, pc}

08106b40 <_ZNKSt8__detail20_Node_const_iteratorISt4pairIKN7APIDoIP12EDoIPRequestES1_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0ELb0EEptEv>:
      operator->() const noexcept
 8106b40:	b580      	push	{r7, lr}
 8106b42:	b082      	sub	sp, #8
 8106b44:	af00      	add	r7, sp, #0
 8106b46:	6078      	str	r0, [r7, #4]
      { return this->_M_cur->_M_valptr(); }
 8106b48:	687b      	ldr	r3, [r7, #4]
 8106b4a:	681b      	ldr	r3, [r3, #0]
 8106b4c:	3304      	adds	r3, #4
 8106b4e:	4618      	mov	r0, r3
 8106b50:	f7fb fcbe 	bl	81024d0 <_ZNSt8__detail21_Hash_node_value_baseISt4pairIKN7APIDoIP12EDoIPRequestES1_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEEE9_M_valptrEv>
 8106b54:	4603      	mov	r3, r0
 8106b56:	4618      	mov	r0, r3
 8106b58:	3708      	adds	r7, #8
 8106b5a:	46bd      	mov	sp, r7
 8106b5c:	bd80      	pop	{r7, pc}

08106b5e <_ZSt3getI34EDynamicDataIndentifierRequestCodeJ7EUDSDIDS0_EERT_RSt7variantIJDpT0_EE>:
    get(variant<_Types...>& __v)
 8106b5e:	b580      	push	{r7, lr}
 8106b60:	b084      	sub	sp, #16
 8106b62:	af00      	add	r7, sp, #0
 8106b64:	6078      	str	r0, [r7, #4]
      constexpr size_t __n = std::__find_uniq_type_in_pack<_Tp, _Types...>();
 8106b66:	2301      	movs	r3, #1
 8106b68:	60fb      	str	r3, [r7, #12]
      return std::get<__n>(__v);
 8106b6a:	6878      	ldr	r0, [r7, #4]
 8106b6c:	f000 f8dd 	bl	8106d2a <_ZSt3getILj1EJ7EUDSDID34EDynamicDataIndentifierRequestCodeEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERS6_>
 8106b70:	4603      	mov	r3, r0
    }
 8106b72:	4618      	mov	r0, r3
 8106b74:	3710      	adds	r7, #16
 8106b76:	46bd      	mov	sp, r7
 8106b78:	bd80      	pop	{r7, pc}

08106b7a <_ZSt17holds_alternativeI7EUDSDIDJS0_34EDynamicDataIndentifierRequestCodeEEbRKSt7variantIJDpT0_EE>:
    holds_alternative(const variant<_Types...>& __v) noexcept
 8106b7a:	b590      	push	{r4, r7, lr}
 8106b7c:	b083      	sub	sp, #12
 8106b7e:	af00      	add	r7, sp, #0
 8106b80:	6078      	str	r0, [r7, #4]
      return __v.index() == std::__find_uniq_type_in_pack<_Tp, _Types...>();
 8106b82:	6878      	ldr	r0, [r7, #4]
 8106b84:	f7ff fe36 	bl	81067f4 <_ZNKSt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE5indexEv>
 8106b88:	4604      	mov	r4, r0
 8106b8a:	f7fe fe4f 	bl	810582c <_ZSt24__find_uniq_type_in_packI7EUDSDIDJS0_34EDynamicDataIndentifierRequestCodeEEjv>
 8106b8e:	4603      	mov	r3, r0
 8106b90:	429c      	cmp	r4, r3
 8106b92:	bf0c      	ite	eq
 8106b94:	2301      	moveq	r3, #1
 8106b96:	2300      	movne	r3, #0
 8106b98:	b2db      	uxtb	r3, r3
    }
 8106b9a:	4618      	mov	r0, r3
 8106b9c:	370c      	adds	r7, #12
 8106b9e:	46bd      	mov	sp, r7
 8106ba0:	bd90      	pop	{r4, r7, pc}

08106ba2 <_ZSt3getI7EUDSDIDJS0_34EDynamicDataIndentifierRequestCodeEERT_RSt7variantIJDpT0_EE>:
    get(variant<_Types...>& __v)
 8106ba2:	b580      	push	{r7, lr}
 8106ba4:	b084      	sub	sp, #16
 8106ba6:	af00      	add	r7, sp, #0
 8106ba8:	6078      	str	r0, [r7, #4]
      constexpr size_t __n = std::__find_uniq_type_in_pack<_Tp, _Types...>();
 8106baa:	2300      	movs	r3, #0
 8106bac:	60fb      	str	r3, [r7, #12]
      return std::get<__n>(__v);
 8106bae:	6878      	ldr	r0, [r7, #4]
 8106bb0:	f000 f8f9 	bl	8106da6 <_ZSt3getILj0EJ7EUDSDID34EDynamicDataIndentifierRequestCodeEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERS6_>
 8106bb4:	4603      	mov	r3, r0
    }
 8106bb6:	4618      	mov	r0, r3
 8106bb8:	3710      	adds	r7, #16
 8106bba:	46bd      	mov	sp, r7
 8106bbc:	bd80      	pop	{r7, pc}

08106bbe <_ZNSt22_Optional_payload_baseI8SMessageE6_M_getEv>:
      _M_get() noexcept
 8106bbe:	b480      	push	{r7}
 8106bc0:	b083      	sub	sp, #12
 8106bc2:	af00      	add	r7, sp, #0
 8106bc4:	6078      	str	r0, [r7, #4]
      { return this->_M_payload._M_value; }
 8106bc6:	687b      	ldr	r3, [r7, #4]
 8106bc8:	4618      	mov	r0, r3
 8106bca:	370c      	adds	r7, #12
 8106bcc:	46bd      	mov	sp, r7
 8106bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106bd2:	4770      	bx	lr

08106bd4 <_ZNKSt8__detail9_Map_baseIN7APIDoIP12EDoIPRequestESt4pairIKS2_PKcESaIS7_ENS_10_Select1stESt8equal_toIS2_ESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_20_Prime_rehash_policyENS_17_Hashtable_traitsILb0ELb0ELb1EEELb1EE2atERS4_>:
      at(const key_type& __k) const
 8106bd4:	b580      	push	{r7, lr}
 8106bd6:	b084      	sub	sp, #16
 8106bd8:	af00      	add	r7, sp, #0
 8106bda:	6078      	str	r0, [r7, #4]
 8106bdc:	6039      	str	r1, [r7, #0]
	auto __ite = static_cast<const __hashtable*>(this)->find(__k);
 8106bde:	6839      	ldr	r1, [r7, #0]
 8106be0:	6878      	ldr	r0, [r7, #4]
 8106be2:	f000 f8fe 	bl	8106de2 <_ZNKSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_PKcESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE4findERS3_>
 8106be6:	4603      	mov	r3, r0
 8106be8:	60fb      	str	r3, [r7, #12]
	if (!__ite._M_cur)
 8106bea:	68fb      	ldr	r3, [r7, #12]
 8106bec:	2b00      	cmp	r3, #0
 8106bee:	d102      	bne.n	8106bf6 <_ZNKSt8__detail9_Map_baseIN7APIDoIP12EDoIPRequestESt4pairIKS2_PKcESaIS7_ENS_10_Select1stESt8equal_toIS2_ESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_20_Prime_rehash_policyENS_17_Hashtable_traitsILb0ELb0ELb1EEELb1EE2atERS4_+0x22>
	  __throw_out_of_range(__N("unordered_map::at"));
 8106bf0:	4806      	ldr	r0, [pc, #24]	@ (8106c0c <_ZNKSt8__detail9_Map_baseIN7APIDoIP12EDoIPRequestESt4pairIKS2_PKcESaIS7_ENS_10_Select1stESt8equal_toIS2_ESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_20_Prime_rehash_policyENS_17_Hashtable_traitsILb0ELb0ELb1EEELb1EE2atERS4_+0x38>)
 8106bf2:	f01e ffb1 	bl	8125b58 <_ZSt20__throw_out_of_rangePKc>
	return __ite->second;
 8106bf6:	f107 030c 	add.w	r3, r7, #12
 8106bfa:	4618      	mov	r0, r3
 8106bfc:	f000 f94f 	bl	8106e9e <_ZNKSt8__detail20_Node_const_iteratorISt4pairIKN7APIDoIP12EDoIPRequestEPKcELb0ELb0EEptEv>
 8106c00:	4603      	mov	r3, r0
 8106c02:	3304      	adds	r3, #4
      }
 8106c04:	4618      	mov	r0, r3
 8106c06:	3710      	adds	r7, #16
 8106c08:	46bd      	mov	sp, r7
 8106c0a:	bd80      	pop	{r7, pc}
 8106c0c:	08127b08 	.word	0x08127b08

08106c10 <_ZNKSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE4findERS3_>:
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
 8106c10:	b590      	push	{r4, r7, lr}
 8106c12:	b089      	sub	sp, #36	@ 0x24
 8106c14:	af00      	add	r7, sp, #0
 8106c16:	6078      	str	r0, [r7, #4]
 8106c18:	6039      	str	r1, [r7, #0]
      if (size() <= __small_size_threshold())
 8106c1a:	6878      	ldr	r0, [r7, #4]
 8106c1c:	f7fb fec4 	bl	81029a8 <_ZNKSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE4sizeEv>
 8106c20:	4604      	mov	r4, r0
 8106c22:	f7fb fecd 	bl	81029c0 <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE22__small_size_thresholdEv>
 8106c26:	4603      	mov	r3, r0
 8106c28:	429c      	cmp	r4, r3
 8106c2a:	bf94      	ite	ls
 8106c2c:	2301      	movls	r3, #1
 8106c2e:	2300      	movhi	r3, #0
 8106c30:	b2db      	uxtb	r3, r3
 8106c32:	2b00      	cmp	r3, #0
 8106c34:	d02e      	beq.n	8106c94 <_ZNKSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE4findERS3_+0x84>
	  for (auto __it = begin(); __it != end(); ++__it)
 8106c36:	6878      	ldr	r0, [r7, #4]
 8106c38:	f000 f940 	bl	8106ebc <_ZNKSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE5beginEv>
 8106c3c:	4603      	mov	r3, r0
 8106c3e:	60fb      	str	r3, [r7, #12]
 8106c40:	e010      	b.n	8106c64 <_ZNKSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE4findERS3_+0x54>
	    if (this->_M_key_equals(__k, *__it._M_cur))
 8106c42:	68fb      	ldr	r3, [r7, #12]
 8106c44:	3304      	adds	r3, #4
 8106c46:	461a      	mov	r2, r3
 8106c48:	6839      	ldr	r1, [r7, #0]
 8106c4a:	6878      	ldr	r0, [r7, #4]
 8106c4c:	f000 f956 	bl	8106efc <_ZNKSt8__detail15_Hashtable_baseIN7APIDoIP12EDoIPRequestESt4pairIKS2_S3_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEENS_10_Select1stESt8equal_toIS2_ESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEE13_M_key_equalsERS4_RKNS_16_Hash_node_valueISB_Lb0EEE>
 8106c50:	4603      	mov	r3, r0
 8106c52:	2b00      	cmp	r3, #0
 8106c54:	d001      	beq.n	8106c5a <_ZNKSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE4findERS3_+0x4a>
	      return __it;
 8106c56:	68fb      	ldr	r3, [r7, #12]
 8106c58:	e034      	b.n	8106cc4 <_ZNKSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE4findERS3_+0xb4>
	  for (auto __it = begin(); __it != end(); ++__it)
 8106c5a:	f107 030c 	add.w	r3, r7, #12
 8106c5e:	4618      	mov	r0, r3
 8106c60:	f000 f93f 	bl	8106ee2 <_ZNSt8__detail20_Node_const_iteratorISt4pairIKN7APIDoIP12EDoIPRequestES1_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0ELb0EEppEv>
 8106c64:	6878      	ldr	r0, [r7, #4]
 8106c66:	f000 f831 	bl	8106ccc <_ZNKSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE3endEv>
 8106c6a:	4603      	mov	r3, r0
 8106c6c:	613b      	str	r3, [r7, #16]
 8106c6e:	f107 0210 	add.w	r2, r7, #16
 8106c72:	f107 030c 	add.w	r3, r7, #12
 8106c76:	4611      	mov	r1, r2
 8106c78:	4618      	mov	r0, r3
 8106c7a:	f7fb feca 	bl	8102a12 <_ZNSt8__detaileqERKNS_19_Node_iterator_baseISt4pairIKN7APIDoIP12EDoIPRequestES1_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEESE_>
 8106c7e:	4603      	mov	r3, r0
 8106c80:	f083 0301 	eor.w	r3, r3, #1
 8106c84:	b2db      	uxtb	r3, r3
 8106c86:	2b00      	cmp	r3, #0
 8106c88:	d1db      	bne.n	8106c42 <_ZNKSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE4findERS3_+0x32>
	  return end();
 8106c8a:	6878      	ldr	r0, [r7, #4]
 8106c8c:	f000 f81e 	bl	8106ccc <_ZNKSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE3endEv>
 8106c90:	4603      	mov	r3, r0
 8106c92:	e017      	b.n	8106cc4 <_ZNKSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE4findERS3_+0xb4>
      __hash_code __code = this->_M_hash_code(__k);
 8106c94:	6839      	ldr	r1, [r7, #0]
 8106c96:	6878      	ldr	r0, [r7, #4]
 8106c98:	f7fd f938 	bl	8103f0c <_ZNKSt8__detail15_Hash_code_baseIN7APIDoIP12EDoIPRequestESt4pairIKS2_S3_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEENS_10_Select1stESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE12_M_hash_codeERS4_>
 8106c9c:	61f8      	str	r0, [r7, #28]
      std::size_t __bkt = _M_bucket_index(__code);
 8106c9e:	69f9      	ldr	r1, [r7, #28]
 8106ca0:	6878      	ldr	r0, [r7, #4]
 8106ca2:	f7fb ff25 	bl	8102af0 <_ZNKSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE15_M_bucket_indexEj>
 8106ca6:	61b8      	str	r0, [r7, #24]
      return const_iterator(_M_find_node(__bkt, __k, __code));
 8106ca8:	69fb      	ldr	r3, [r7, #28]
 8106caa:	683a      	ldr	r2, [r7, #0]
 8106cac:	69b9      	ldr	r1, [r7, #24]
 8106cae:	6878      	ldr	r0, [r7, #4]
 8106cb0:	f000 f944 	bl	8106f3c <_ZNKSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE12_M_find_nodeEjRS3_j>
 8106cb4:	4602      	mov	r2, r0
 8106cb6:	f107 0314 	add.w	r3, r7, #20
 8106cba:	4611      	mov	r1, r2
 8106cbc:	4618      	mov	r0, r3
 8106cbe:	f000 f956 	bl	8106f6e <_ZNSt8__detail20_Node_const_iteratorISt4pairIKN7APIDoIP12EDoIPRequestES1_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0ELb0EEC1EPNS_10_Hash_nodeISB_Lb0EEE>
 8106cc2:	697b      	ldr	r3, [r7, #20]
    }
 8106cc4:	4618      	mov	r0, r3
 8106cc6:	3724      	adds	r7, #36	@ 0x24
 8106cc8:	46bd      	mov	sp, r7
 8106cca:	bd90      	pop	{r4, r7, pc}

08106ccc <_ZNKSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE3endEv>:
      end() const noexcept
 8106ccc:	b580      	push	{r7, lr}
 8106cce:	b084      	sub	sp, #16
 8106cd0:	af00      	add	r7, sp, #0
 8106cd2:	6078      	str	r0, [r7, #4]
      { return const_iterator(nullptr); }
 8106cd4:	f107 030c 	add.w	r3, r7, #12
 8106cd8:	2100      	movs	r1, #0
 8106cda:	4618      	mov	r0, r3
 8106cdc:	f000 f947 	bl	8106f6e <_ZNSt8__detail20_Node_const_iteratorISt4pairIKN7APIDoIP12EDoIPRequestES1_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0ELb0EEC1EPNS_10_Hash_nodeISB_Lb0EEE>
 8106ce0:	68fb      	ldr	r3, [r7, #12]
 8106ce2:	4618      	mov	r0, r3
 8106ce4:	3710      	adds	r7, #16
 8106ce6:	46bd      	mov	sp, r7
 8106ce8:	bd80      	pop	{r7, pc}

08106cea <_ZNSt8__detail9__variant7__get_nILj1ERNS0_15_Variadic_unionIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEEEEEDcOT0_>:
    __get_n(_Union&& __u) noexcept
 8106cea:	b580      	push	{r7, lr}
 8106cec:	b082      	sub	sp, #8
 8106cee:	af00      	add	r7, sp, #0
 8106cf0:	6078      	str	r0, [r7, #4]
	return std::forward<_Union>(__u)._M_rest._M_first._M_get();
 8106cf2:	6878      	ldr	r0, [r7, #4]
 8106cf4:	f000 f965 	bl	8106fc2 <_ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEEEEOT_RNSt16remove_referenceIS7_E4typeE>
 8106cf8:	4603      	mov	r3, r0
 8106cfa:	4618      	mov	r0, r3
 8106cfc:	f000 f96c 	bl	8106fd8 <_ZNRSt8__detail9__variant14_UninitializedI34EDynamicDataIndentifierRequestCodeLb1EE6_M_getEv>
 8106d00:	4603      	mov	r3, r0
    }
 8106d02:	4618      	mov	r0, r3
 8106d04:	3708      	adds	r7, #8
 8106d06:	46bd      	mov	sp, r7
 8106d08:	bd80      	pop	{r7, pc}

08106d0a <_ZNSt8__detail9__variant5__getILj1ERSt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEEEEDcOT0_>:
    __get(_Variant&& __v) noexcept
 8106d0a:	b580      	push	{r7, lr}
 8106d0c:	b082      	sub	sp, #8
 8106d0e:	af00      	add	r7, sp, #0
 8106d10:	6078      	str	r0, [r7, #4]
    { return __variant::__get_n<_Np>(std::forward<_Variant>(__v)._M_u); }
 8106d12:	6878      	ldr	r0, [r7, #4]
 8106d14:	f000 f94a 	bl	8106fac <_ZSt7forwardIRSt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEEEOT_RNSt16remove_referenceIS5_E4typeE>
 8106d18:	4603      	mov	r3, r0
 8106d1a:	4618      	mov	r0, r3
 8106d1c:	f7ff ffe5 	bl	8106cea <_ZNSt8__detail9__variant7__get_nILj1ERNS0_15_Variadic_unionIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEEEEEDcOT0_>
 8106d20:	4603      	mov	r3, r0
 8106d22:	4618      	mov	r0, r3
 8106d24:	3708      	adds	r7, #8
 8106d26:	46bd      	mov	sp, r7
 8106d28:	bd80      	pop	{r7, pc}

08106d2a <_ZSt3getILj1EJ7EUDSDID34EDynamicDataIndentifierRequestCodeEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERS6_>:
#undef _VARIANT_RELATION_FUNCTION_TEMPLATE
    };

  template<size_t _Np, typename... _Types>
    constexpr variant_alternative_t<_Np, variant<_Types...>>&
    get(variant<_Types...>& __v)
 8106d2a:	b580      	push	{r7, lr}
 8106d2c:	b082      	sub	sp, #8
 8106d2e:	af00      	add	r7, sp, #0
 8106d30:	6078      	str	r0, [r7, #4]
    {
      static_assert(_Np < sizeof...(_Types),
		    "The index must be in [0, number of alternatives)");
      if (__v.index() != _Np)
 8106d32:	6878      	ldr	r0, [r7, #4]
 8106d34:	f7ff fd5e 	bl	81067f4 <_ZNKSt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE5indexEv>
 8106d38:	4603      	mov	r3, r0
 8106d3a:	2b01      	cmp	r3, #1
 8106d3c:	bf14      	ite	ne
 8106d3e:	2301      	movne	r3, #1
 8106d40:	2300      	moveq	r3, #0
 8106d42:	b2db      	uxtb	r3, r3
 8106d44:	2b00      	cmp	r3, #0
 8106d46:	d006      	beq.n	8106d56 <_ZSt3getILj1EJ7EUDSDID34EDynamicDataIndentifierRequestCodeEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERS6_+0x2c>
	__throw_bad_variant_access(__v.valueless_by_exception());
 8106d48:	6878      	ldr	r0, [r7, #4]
 8106d4a:	f000 f91f 	bl	8106f8c <_ZNKSt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE22valueless_by_exceptionEv>
 8106d4e:	4603      	mov	r3, r0
 8106d50:	4618      	mov	r0, r3
 8106d52:	f7fe fd27 	bl	81057a4 <_ZSt26__throw_bad_variant_accessb>
      return __detail::__variant::__get<_Np>(__v);
 8106d56:	6878      	ldr	r0, [r7, #4]
 8106d58:	f7ff ffd7 	bl	8106d0a <_ZNSt8__detail9__variant5__getILj1ERSt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEEEEDcOT0_>
 8106d5c:	4603      	mov	r3, r0
    }
 8106d5e:	4618      	mov	r0, r3
 8106d60:	3708      	adds	r7, #8
 8106d62:	46bd      	mov	sp, r7
 8106d64:	bd80      	pop	{r7, pc}

08106d66 <_ZNSt8__detail9__variant7__get_nILj0ERNS0_15_Variadic_unionIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEEEEEDcOT0_>:
    __get_n(_Union&& __u) noexcept
 8106d66:	b580      	push	{r7, lr}
 8106d68:	b082      	sub	sp, #8
 8106d6a:	af00      	add	r7, sp, #0
 8106d6c:	6078      	str	r0, [r7, #4]
	return std::forward<_Union>(__u)._M_first._M_get();
 8106d6e:	6878      	ldr	r0, [r7, #4]
 8106d70:	f000 f927 	bl	8106fc2 <_ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEEEEOT_RNSt16remove_referenceIS7_E4typeE>
 8106d74:	4603      	mov	r3, r0
 8106d76:	4618      	mov	r0, r3
 8106d78:	f000 f939 	bl	8106fee <_ZNRSt8__detail9__variant14_UninitializedI7EUDSDIDLb1EE6_M_getEv>
 8106d7c:	4603      	mov	r3, r0
    }
 8106d7e:	4618      	mov	r0, r3
 8106d80:	3708      	adds	r7, #8
 8106d82:	46bd      	mov	sp, r7
 8106d84:	bd80      	pop	{r7, pc}

08106d86 <_ZNSt8__detail9__variant5__getILj0ERSt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEEEEDcOT0_>:
    __get(_Variant&& __v) noexcept
 8106d86:	b580      	push	{r7, lr}
 8106d88:	b082      	sub	sp, #8
 8106d8a:	af00      	add	r7, sp, #0
 8106d8c:	6078      	str	r0, [r7, #4]
    { return __variant::__get_n<_Np>(std::forward<_Variant>(__v)._M_u); }
 8106d8e:	6878      	ldr	r0, [r7, #4]
 8106d90:	f000 f90c 	bl	8106fac <_ZSt7forwardIRSt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEEEOT_RNSt16remove_referenceIS5_E4typeE>
 8106d94:	4603      	mov	r3, r0
 8106d96:	4618      	mov	r0, r3
 8106d98:	f7ff ffe5 	bl	8106d66 <_ZNSt8__detail9__variant7__get_nILj0ERNS0_15_Variadic_unionIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEEEEEDcOT0_>
 8106d9c:	4603      	mov	r3, r0
 8106d9e:	4618      	mov	r0, r3
 8106da0:	3708      	adds	r7, #8
 8106da2:	46bd      	mov	sp, r7
 8106da4:	bd80      	pop	{r7, pc}

08106da6 <_ZSt3getILj0EJ7EUDSDID34EDynamicDataIndentifierRequestCodeEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERS6_>:
    get(variant<_Types...>& __v)
 8106da6:	b580      	push	{r7, lr}
 8106da8:	b082      	sub	sp, #8
 8106daa:	af00      	add	r7, sp, #0
 8106dac:	6078      	str	r0, [r7, #4]
      if (__v.index() != _Np)
 8106dae:	6878      	ldr	r0, [r7, #4]
 8106db0:	f7ff fd20 	bl	81067f4 <_ZNKSt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE5indexEv>
 8106db4:	4603      	mov	r3, r0
 8106db6:	2b00      	cmp	r3, #0
 8106db8:	bf14      	ite	ne
 8106dba:	2301      	movne	r3, #1
 8106dbc:	2300      	moveq	r3, #0
 8106dbe:	b2db      	uxtb	r3, r3
 8106dc0:	2b00      	cmp	r3, #0
 8106dc2:	d006      	beq.n	8106dd2 <_ZSt3getILj0EJ7EUDSDID34EDynamicDataIndentifierRequestCodeEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERS6_+0x2c>
	__throw_bad_variant_access(__v.valueless_by_exception());
 8106dc4:	6878      	ldr	r0, [r7, #4]
 8106dc6:	f000 f8e1 	bl	8106f8c <_ZNKSt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE22valueless_by_exceptionEv>
 8106dca:	4603      	mov	r3, r0
 8106dcc:	4618      	mov	r0, r3
 8106dce:	f7fe fce9 	bl	81057a4 <_ZSt26__throw_bad_variant_accessb>
      return __detail::__variant::__get<_Np>(__v);
 8106dd2:	6878      	ldr	r0, [r7, #4]
 8106dd4:	f7ff ffd7 	bl	8106d86 <_ZNSt8__detail9__variant5__getILj0ERSt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEEEEDcOT0_>
 8106dd8:	4603      	mov	r3, r0
    }
 8106dda:	4618      	mov	r0, r3
 8106ddc:	3708      	adds	r7, #8
 8106dde:	46bd      	mov	sp, r7
 8106de0:	bd80      	pop	{r7, pc}

08106de2 <_ZNKSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_PKcESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE4findERS3_>:
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
 8106de2:	b590      	push	{r4, r7, lr}
 8106de4:	b089      	sub	sp, #36	@ 0x24
 8106de6:	af00      	add	r7, sp, #0
 8106de8:	6078      	str	r0, [r7, #4]
 8106dea:	6039      	str	r1, [r7, #0]
      if (size() <= __small_size_threshold())
 8106dec:	6878      	ldr	r0, [r7, #4]
 8106dee:	f7fb ffff 	bl	8102df0 <_ZNKSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_PKcESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE4sizeEv>
 8106df2:	4604      	mov	r4, r0
 8106df4:	f7fc f808 	bl	8102e08 <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_PKcESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE22__small_size_thresholdEv>
 8106df8:	4603      	mov	r3, r0
 8106dfa:	429c      	cmp	r4, r3
 8106dfc:	bf94      	ite	ls
 8106dfe:	2301      	movls	r3, #1
 8106e00:	2300      	movhi	r3, #0
 8106e02:	b2db      	uxtb	r3, r3
 8106e04:	2b00      	cmp	r3, #0
 8106e06:	d02e      	beq.n	8106e66 <_ZNKSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_PKcESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE4findERS3_+0x84>
	  for (auto __it = begin(); __it != end(); ++__it)
 8106e08:	6878      	ldr	r0, [r7, #4]
 8106e0a:	f000 f8fb 	bl	8107004 <_ZNKSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_PKcESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE5beginEv>
 8106e0e:	4603      	mov	r3, r0
 8106e10:	60fb      	str	r3, [r7, #12]
 8106e12:	e010      	b.n	8106e36 <_ZNKSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_PKcESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE4findERS3_+0x54>
	    if (this->_M_key_equals(__k, *__it._M_cur))
 8106e14:	68fb      	ldr	r3, [r7, #12]
 8106e16:	3304      	adds	r3, #4
 8106e18:	461a      	mov	r2, r3
 8106e1a:	6839      	ldr	r1, [r7, #0]
 8106e1c:	6878      	ldr	r0, [r7, #4]
 8106e1e:	f000 f920 	bl	8107062 <_ZNKSt8__detail15_Hashtable_baseIN7APIDoIP12EDoIPRequestESt4pairIKS2_PKcENS_10_Select1stESt8equal_toIS2_ESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEE13_M_key_equalsERS4_RKNS_16_Hash_node_valueIS7_Lb0EEE>
 8106e22:	4603      	mov	r3, r0
 8106e24:	2b00      	cmp	r3, #0
 8106e26:	d001      	beq.n	8106e2c <_ZNKSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_PKcESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE4findERS3_+0x4a>
	      return __it;
 8106e28:	68fb      	ldr	r3, [r7, #12]
 8106e2a:	e034      	b.n	8106e96 <_ZNKSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_PKcESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE4findERS3_+0xb4>
	  for (auto __it = begin(); __it != end(); ++__it)
 8106e2c:	f107 030c 	add.w	r3, r7, #12
 8106e30:	4618      	mov	r0, r3
 8106e32:	f000 f909 	bl	8107048 <_ZNSt8__detail20_Node_const_iteratorISt4pairIKN7APIDoIP12EDoIPRequestEPKcELb0ELb0EEppEv>
 8106e36:	6878      	ldr	r0, [r7, #4]
 8106e38:	f000 f8f7 	bl	810702a <_ZNKSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_PKcESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE3endEv>
 8106e3c:	4603      	mov	r3, r0
 8106e3e:	613b      	str	r3, [r7, #16]
 8106e40:	f107 0210 	add.w	r2, r7, #16
 8106e44:	f107 030c 	add.w	r3, r7, #12
 8106e48:	4611      	mov	r1, r2
 8106e4a:	4618      	mov	r0, r3
 8106e4c:	f7fc f805 	bl	8102e5a <_ZNSt8__detaileqERKNS_19_Node_iterator_baseISt4pairIKN7APIDoIP12EDoIPRequestEPKcELb0EEESA_>
 8106e50:	4603      	mov	r3, r0
 8106e52:	f083 0301 	eor.w	r3, r3, #1
 8106e56:	b2db      	uxtb	r3, r3
 8106e58:	2b00      	cmp	r3, #0
 8106e5a:	d1db      	bne.n	8106e14 <_ZNKSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_PKcESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE4findERS3_+0x32>
	  return end();
 8106e5c:	6878      	ldr	r0, [r7, #4]
 8106e5e:	f000 f8e4 	bl	810702a <_ZNKSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_PKcESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE3endEv>
 8106e62:	4603      	mov	r3, r0
 8106e64:	e017      	b.n	8106e96 <_ZNKSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_PKcESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE4findERS3_+0xb4>
      __hash_code __code = this->_M_hash_code(__k);
 8106e66:	6839      	ldr	r1, [r7, #0]
 8106e68:	6878      	ldr	r0, [r7, #4]
 8106e6a:	f7fd f88d 	bl	8103f88 <_ZNKSt8__detail15_Hash_code_baseIN7APIDoIP12EDoIPRequestESt4pairIKS2_PKcENS_10_Select1stESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE12_M_hash_codeERS4_>
 8106e6e:	61f8      	str	r0, [r7, #28]
      std::size_t __bkt = _M_bucket_index(__code);
 8106e70:	69f9      	ldr	r1, [r7, #28]
 8106e72:	6878      	ldr	r0, [r7, #4]
 8106e74:	f7fc f860 	bl	8102f38 <_ZNKSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_PKcESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE15_M_bucket_indexEj>
 8106e78:	61b8      	str	r0, [r7, #24]
      return const_iterator(_M_find_node(__bkt, __k, __code));
 8106e7a:	69fb      	ldr	r3, [r7, #28]
 8106e7c:	683a      	ldr	r2, [r7, #0]
 8106e7e:	69b9      	ldr	r1, [r7, #24]
 8106e80:	6878      	ldr	r0, [r7, #4]
 8106e82:	f000 f90e 	bl	81070a2 <_ZNKSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_PKcESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE12_M_find_nodeEjRS3_j>
 8106e86:	4602      	mov	r2, r0
 8106e88:	f107 0314 	add.w	r3, r7, #20
 8106e8c:	4611      	mov	r1, r2
 8106e8e:	4618      	mov	r0, r3
 8106e90:	f000 f920 	bl	81070d4 <_ZNSt8__detail20_Node_const_iteratorISt4pairIKN7APIDoIP12EDoIPRequestEPKcELb0ELb0EEC1EPNS_10_Hash_nodeIS7_Lb0EEE>
 8106e94:	697b      	ldr	r3, [r7, #20]
    }
 8106e96:	4618      	mov	r0, r3
 8106e98:	3724      	adds	r7, #36	@ 0x24
 8106e9a:	46bd      	mov	sp, r7
 8106e9c:	bd90      	pop	{r4, r7, pc}

08106e9e <_ZNKSt8__detail20_Node_const_iteratorISt4pairIKN7APIDoIP12EDoIPRequestEPKcELb0ELb0EEptEv>:
      operator->() const noexcept
 8106e9e:	b580      	push	{r7, lr}
 8106ea0:	b082      	sub	sp, #8
 8106ea2:	af00      	add	r7, sp, #0
 8106ea4:	6078      	str	r0, [r7, #4]
      { return this->_M_cur->_M_valptr(); }
 8106ea6:	687b      	ldr	r3, [r7, #4]
 8106ea8:	681b      	ldr	r3, [r3, #0]
 8106eaa:	3304      	adds	r3, #4
 8106eac:	4618      	mov	r0, r3
 8106eae:	f7fb fcc0 	bl	8102832 <_ZNSt8__detail21_Hash_node_value_baseISt4pairIKN7APIDoIP12EDoIPRequestEPKcEE9_M_valptrEv>
 8106eb2:	4603      	mov	r3, r0
 8106eb4:	4618      	mov	r0, r3
 8106eb6:	3708      	adds	r7, #8
 8106eb8:	46bd      	mov	sp, r7
 8106eba:	bd80      	pop	{r7, pc}

08106ebc <_ZNKSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE5beginEv>:
      begin() const noexcept
 8106ebc:	b580      	push	{r7, lr}
 8106ebe:	b084      	sub	sp, #16
 8106ec0:	af00      	add	r7, sp, #0
 8106ec2:	6078      	str	r0, [r7, #4]
      { return const_iterator(_M_begin()); }
 8106ec4:	6878      	ldr	r0, [r7, #4]
 8106ec6:	f7fa fef0 	bl	8101caa <_ZNKSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE8_M_beginEv>
 8106eca:	4602      	mov	r2, r0
 8106ecc:	f107 030c 	add.w	r3, r7, #12
 8106ed0:	4611      	mov	r1, r2
 8106ed2:	4618      	mov	r0, r3
 8106ed4:	f000 f84b 	bl	8106f6e <_ZNSt8__detail20_Node_const_iteratorISt4pairIKN7APIDoIP12EDoIPRequestES1_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0ELb0EEC1EPNS_10_Hash_nodeISB_Lb0EEE>
 8106ed8:	68fb      	ldr	r3, [r7, #12]
 8106eda:	4618      	mov	r0, r3
 8106edc:	3710      	adds	r7, #16
 8106ede:	46bd      	mov	sp, r7
 8106ee0:	bd80      	pop	{r7, pc}

08106ee2 <_ZNSt8__detail20_Node_const_iteratorISt4pairIKN7APIDoIP12EDoIPRequestES1_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0ELb0EEppEv>:
      operator++() noexcept
 8106ee2:	b580      	push	{r7, lr}
 8106ee4:	b082      	sub	sp, #8
 8106ee6:	af00      	add	r7, sp, #0
 8106ee8:	6078      	str	r0, [r7, #4]
	this->_M_incr();
 8106eea:	687b      	ldr	r3, [r7, #4]
 8106eec:	4618      	mov	r0, r3
 8106eee:	f7fc f979 	bl	81031e4 <_ZNSt8__detail19_Node_iterator_baseISt4pairIKN7APIDoIP12EDoIPRequestES1_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EE7_M_incrEv>
	return *this;
 8106ef2:	687b      	ldr	r3, [r7, #4]
      }
 8106ef4:	4618      	mov	r0, r3
 8106ef6:	3708      	adds	r7, #8
 8106ef8:	46bd      	mov	sp, r7
 8106efa:	bd80      	pop	{r7, pc}

08106efc <_ZNKSt8__detail15_Hashtable_baseIN7APIDoIP12EDoIPRequestESt4pairIKS2_S3_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEENS_10_Select1stESt8equal_toIS2_ESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEE13_M_key_equalsERS4_RKNS_16_Hash_node_valueISB_Lb0EEE>:
      _M_key_equals(const _Key& __k,
 8106efc:	b590      	push	{r4, r7, lr}
 8106efe:	b087      	sub	sp, #28
 8106f00:	af00      	add	r7, sp, #0
 8106f02:	60f8      	str	r0, [r7, #12]
 8106f04:	60b9      	str	r1, [r7, #8]
 8106f06:	607a      	str	r2, [r7, #4]
	return _M_eq()(__k, _ExtractKey{}(__n._M_v()));
 8106f08:	68f8      	ldr	r0, [r7, #12]
 8106f0a:	f7fc f97b 	bl	8103204 <_ZNKSt8__detail15_Hashtable_baseIN7APIDoIP12EDoIPRequestESt4pairIKS2_S3_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEENS_10_Select1stESt8equal_toIS2_ESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEE5_M_eqEv>
 8106f0e:	4604      	mov	r4, r0
 8106f10:	687b      	ldr	r3, [r7, #4]
 8106f12:	4618      	mov	r0, r3
 8106f14:	f7fc f982 	bl	810321c <_ZNKSt8__detail21_Hash_node_value_baseISt4pairIKN7APIDoIP12EDoIPRequestES1_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEEE4_M_vEv>
 8106f18:	4602      	mov	r2, r0
 8106f1a:	f107 0314 	add.w	r3, r7, #20
 8106f1e:	4611      	mov	r1, r2
 8106f20:	4618      	mov	r0, r3
 8106f22:	f7fb fa00 	bl	8102326 <_ZNKSt8__detail10_Select1stclIRKSt4pairIKN7APIDoIP12EDoIPRequestES2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEEEEONS0_10__1st_typeIT_E4typeEOSG_>
 8106f26:	4603      	mov	r3, r0
 8106f28:	461a      	mov	r2, r3
 8106f2a:	68b9      	ldr	r1, [r7, #8]
 8106f2c:	4620      	mov	r0, r4
 8106f2e:	f7fc f981 	bl	8103234 <_ZNKSt8equal_toIN7APIDoIP12EDoIPRequestEEclERKS1_S4_>
 8106f32:	4603      	mov	r3, r0
      }
 8106f34:	4618      	mov	r0, r3
 8106f36:	371c      	adds	r7, #28
 8106f38:	46bd      	mov	sp, r7
 8106f3a:	bd90      	pop	{r4, r7, pc}

08106f3c <_ZNKSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE12_M_find_nodeEjRS3_j>:
      _M_find_node(size_type __bkt, const key_type& __key,
 8106f3c:	b580      	push	{r7, lr}
 8106f3e:	b086      	sub	sp, #24
 8106f40:	af00      	add	r7, sp, #0
 8106f42:	60f8      	str	r0, [r7, #12]
 8106f44:	60b9      	str	r1, [r7, #8]
 8106f46:	607a      	str	r2, [r7, #4]
 8106f48:	603b      	str	r3, [r7, #0]
	__node_base_ptr __before_n = _M_find_before_node(__bkt, __key, __c);
 8106f4a:	683b      	ldr	r3, [r7, #0]
 8106f4c:	687a      	ldr	r2, [r7, #4]
 8106f4e:	68b9      	ldr	r1, [r7, #8]
 8106f50:	68f8      	ldr	r0, [r7, #12]
 8106f52:	f000 f8ce 	bl	81070f2 <_ZNKSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_find_before_nodeEjRS3_j>
 8106f56:	6178      	str	r0, [r7, #20]
	if (__before_n)
 8106f58:	697b      	ldr	r3, [r7, #20]
 8106f5a:	2b00      	cmp	r3, #0
 8106f5c:	d002      	beq.n	8106f64 <_ZNKSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE12_M_find_nodeEjRS3_j+0x28>
	  return static_cast<__node_ptr>(__before_n->_M_nxt);
 8106f5e:	697b      	ldr	r3, [r7, #20]
 8106f60:	681b      	ldr	r3, [r3, #0]
 8106f62:	e000      	b.n	8106f66 <_ZNKSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE12_M_find_nodeEjRS3_j+0x2a>
	return nullptr;
 8106f64:	2300      	movs	r3, #0
      }
 8106f66:	4618      	mov	r0, r3
 8106f68:	3718      	adds	r7, #24
 8106f6a:	46bd      	mov	sp, r7
 8106f6c:	bd80      	pop	{r7, pc}

08106f6e <_ZNSt8__detail20_Node_const_iteratorISt4pairIKN7APIDoIP12EDoIPRequestES1_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0ELb0EEC1EPNS_10_Hash_nodeISB_Lb0EEE>:
      _Node_const_iterator(__node_type* __p) noexcept
 8106f6e:	b580      	push	{r7, lr}
 8106f70:	b082      	sub	sp, #8
 8106f72:	af00      	add	r7, sp, #0
 8106f74:	6078      	str	r0, [r7, #4]
 8106f76:	6039      	str	r1, [r7, #0]
      : __base_type(__p) { }
 8106f78:	687b      	ldr	r3, [r7, #4]
 8106f7a:	6839      	ldr	r1, [r7, #0]
 8106f7c:	4618      	mov	r0, r3
 8106f7e:	f7fc f9f1 	bl	8103364 <_ZNSt8__detail19_Node_iterator_baseISt4pairIKN7APIDoIP12EDoIPRequestES1_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEC1EPNS_10_Hash_nodeISB_Lb0EEE>
 8106f82:	687b      	ldr	r3, [r7, #4]
 8106f84:	4618      	mov	r0, r3
 8106f86:	3708      	adds	r7, #8
 8106f88:	46bd      	mov	sp, r7
 8106f8a:	bd80      	pop	{r7, pc}

08106f8c <_ZNKSt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE22valueless_by_exceptionEv>:
      constexpr bool valueless_by_exception() const noexcept
 8106f8c:	b580      	push	{r7, lr}
 8106f8e:	b082      	sub	sp, #8
 8106f90:	af00      	add	r7, sp, #0
 8106f92:	6078      	str	r0, [r7, #4]
      { return !this->_M_valid(); }
 8106f94:	687b      	ldr	r3, [r7, #4]
 8106f96:	4618      	mov	r0, r3
 8106f98:	f000 f8f0 	bl	810717c <_ZNKSt8__detail9__variant16_Variant_storageILb1EJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE8_M_validEv>
 8106f9c:	4603      	mov	r3, r0
 8106f9e:	f083 0301 	eor.w	r3, r3, #1
 8106fa2:	b2db      	uxtb	r3, r3
 8106fa4:	4618      	mov	r0, r3
 8106fa6:	3708      	adds	r7, #8
 8106fa8:	46bd      	mov	sp, r7
 8106faa:	bd80      	pop	{r7, pc}

08106fac <_ZSt7forwardIRSt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEEEOT_RNSt16remove_referenceIS5_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8106fac:	b480      	push	{r7}
 8106fae:	b083      	sub	sp, #12
 8106fb0:	af00      	add	r7, sp, #0
 8106fb2:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8106fb4:	687b      	ldr	r3, [r7, #4]
 8106fb6:	4618      	mov	r0, r3
 8106fb8:	370c      	adds	r7, #12
 8106fba:	46bd      	mov	sp, r7
 8106fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106fc0:	4770      	bx	lr

08106fc2 <_ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEEEEOT_RNSt16remove_referenceIS7_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8106fc2:	b480      	push	{r7}
 8106fc4:	b083      	sub	sp, #12
 8106fc6:	af00      	add	r7, sp, #0
 8106fc8:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8106fca:	687b      	ldr	r3, [r7, #4]
 8106fcc:	4618      	mov	r0, r3
 8106fce:	370c      	adds	r7, #12
 8106fd0:	46bd      	mov	sp, r7
 8106fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106fd6:	4770      	bx	lr

08106fd8 <_ZNRSt8__detail9__variant14_UninitializedI34EDynamicDataIndentifierRequestCodeLb1EE6_M_getEv>:
      constexpr _Type& _M_get() & noexcept
 8106fd8:	b480      	push	{r7}
 8106fda:	b083      	sub	sp, #12
 8106fdc:	af00      	add	r7, sp, #0
 8106fde:	6078      	str	r0, [r7, #4]
      { return _M_storage; }
 8106fe0:	687b      	ldr	r3, [r7, #4]
 8106fe2:	4618      	mov	r0, r3
 8106fe4:	370c      	adds	r7, #12
 8106fe6:	46bd      	mov	sp, r7
 8106fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106fec:	4770      	bx	lr

08106fee <_ZNRSt8__detail9__variant14_UninitializedI7EUDSDIDLb1EE6_M_getEv>:
      constexpr _Type& _M_get() & noexcept
 8106fee:	b480      	push	{r7}
 8106ff0:	b083      	sub	sp, #12
 8106ff2:	af00      	add	r7, sp, #0
 8106ff4:	6078      	str	r0, [r7, #4]
      { return _M_storage; }
 8106ff6:	687b      	ldr	r3, [r7, #4]
 8106ff8:	4618      	mov	r0, r3
 8106ffa:	370c      	adds	r7, #12
 8106ffc:	46bd      	mov	sp, r7
 8106ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107002:	4770      	bx	lr

08107004 <_ZNKSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_PKcESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE5beginEv>:
      begin() const noexcept
 8107004:	b580      	push	{r7, lr}
 8107006:	b084      	sub	sp, #16
 8107008:	af00      	add	r7, sp, #0
 810700a:	6078      	str	r0, [r7, #4]
      { return const_iterator(_M_begin()); }
 810700c:	6878      	ldr	r0, [r7, #4]
 810700e:	f7fa fed9 	bl	8101dc4 <_ZNKSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_PKcESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE8_M_beginEv>
 8107012:	4602      	mov	r2, r0
 8107014:	f107 030c 	add.w	r3, r7, #12
 8107018:	4611      	mov	r1, r2
 810701a:	4618      	mov	r0, r3
 810701c:	f000 f85a 	bl	81070d4 <_ZNSt8__detail20_Node_const_iteratorISt4pairIKN7APIDoIP12EDoIPRequestEPKcELb0ELb0EEC1EPNS_10_Hash_nodeIS7_Lb0EEE>
 8107020:	68fb      	ldr	r3, [r7, #12]
 8107022:	4618      	mov	r0, r3
 8107024:	3710      	adds	r7, #16
 8107026:	46bd      	mov	sp, r7
 8107028:	bd80      	pop	{r7, pc}

0810702a <_ZNKSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_PKcESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE3endEv>:
      end() const noexcept
 810702a:	b580      	push	{r7, lr}
 810702c:	b084      	sub	sp, #16
 810702e:	af00      	add	r7, sp, #0
 8107030:	6078      	str	r0, [r7, #4]
      { return const_iterator(nullptr); }
 8107032:	f107 030c 	add.w	r3, r7, #12
 8107036:	2100      	movs	r1, #0
 8107038:	4618      	mov	r0, r3
 810703a:	f000 f84b 	bl	81070d4 <_ZNSt8__detail20_Node_const_iteratorISt4pairIKN7APIDoIP12EDoIPRequestEPKcELb0ELb0EEC1EPNS_10_Hash_nodeIS7_Lb0EEE>
 810703e:	68fb      	ldr	r3, [r7, #12]
 8107040:	4618      	mov	r0, r3
 8107042:	3710      	adds	r7, #16
 8107044:	46bd      	mov	sp, r7
 8107046:	bd80      	pop	{r7, pc}

08107048 <_ZNSt8__detail20_Node_const_iteratorISt4pairIKN7APIDoIP12EDoIPRequestEPKcELb0ELb0EEppEv>:
      operator++() noexcept
 8107048:	b580      	push	{r7, lr}
 810704a:	b082      	sub	sp, #8
 810704c:	af00      	add	r7, sp, #0
 810704e:	6078      	str	r0, [r7, #4]
	this->_M_incr();
 8107050:	687b      	ldr	r3, [r7, #4]
 8107052:	4618      	mov	r0, r3
 8107054:	f7fc fa5b 	bl	810350e <_ZNSt8__detail19_Node_iterator_baseISt4pairIKN7APIDoIP12EDoIPRequestEPKcELb0EE7_M_incrEv>
	return *this;
 8107058:	687b      	ldr	r3, [r7, #4]
      }
 810705a:	4618      	mov	r0, r3
 810705c:	3708      	adds	r7, #8
 810705e:	46bd      	mov	sp, r7
 8107060:	bd80      	pop	{r7, pc}

08107062 <_ZNKSt8__detail15_Hashtable_baseIN7APIDoIP12EDoIPRequestESt4pairIKS2_PKcENS_10_Select1stESt8equal_toIS2_ESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEE13_M_key_equalsERS4_RKNS_16_Hash_node_valueIS7_Lb0EEE>:
      _M_key_equals(const _Key& __k,
 8107062:	b590      	push	{r4, r7, lr}
 8107064:	b087      	sub	sp, #28
 8107066:	af00      	add	r7, sp, #0
 8107068:	60f8      	str	r0, [r7, #12]
 810706a:	60b9      	str	r1, [r7, #8]
 810706c:	607a      	str	r2, [r7, #4]
	return _M_eq()(__k, _ExtractKey{}(__n._M_v()));
 810706e:	68f8      	ldr	r0, [r7, #12]
 8107070:	f7fc fa5d 	bl	810352e <_ZNKSt8__detail15_Hashtable_baseIN7APIDoIP12EDoIPRequestESt4pairIKS2_PKcENS_10_Select1stESt8equal_toIS2_ESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEE5_M_eqEv>
 8107074:	4604      	mov	r4, r0
 8107076:	687b      	ldr	r3, [r7, #4]
 8107078:	4618      	mov	r0, r3
 810707a:	f7fc fa64 	bl	8103546 <_ZNKSt8__detail21_Hash_node_value_baseISt4pairIKN7APIDoIP12EDoIPRequestEPKcEE4_M_vEv>
 810707e:	4602      	mov	r2, r0
 8107080:	f107 0314 	add.w	r3, r7, #20
 8107084:	4611      	mov	r1, r2
 8107086:	4618      	mov	r0, r3
 8107088:	f7fb fafe 	bl	8102688 <_ZNKSt8__detail10_Select1stclIRKSt4pairIKN7APIDoIP12EDoIPRequestEPKcEEEONS0_10__1st_typeIT_E4typeEOSC_>
 810708c:	4603      	mov	r3, r0
 810708e:	461a      	mov	r2, r3
 8107090:	68b9      	ldr	r1, [r7, #8]
 8107092:	4620      	mov	r0, r4
 8107094:	f7fc f8ce 	bl	8103234 <_ZNKSt8equal_toIN7APIDoIP12EDoIPRequestEEclERKS1_S4_>
 8107098:	4603      	mov	r3, r0
      }
 810709a:	4618      	mov	r0, r3
 810709c:	371c      	adds	r7, #28
 810709e:	46bd      	mov	sp, r7
 81070a0:	bd90      	pop	{r4, r7, pc}

081070a2 <_ZNKSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_PKcESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE12_M_find_nodeEjRS3_j>:
      _M_find_node(size_type __bkt, const key_type& __key,
 81070a2:	b580      	push	{r7, lr}
 81070a4:	b086      	sub	sp, #24
 81070a6:	af00      	add	r7, sp, #0
 81070a8:	60f8      	str	r0, [r7, #12]
 81070aa:	60b9      	str	r1, [r7, #8]
 81070ac:	607a      	str	r2, [r7, #4]
 81070ae:	603b      	str	r3, [r7, #0]
	__node_base_ptr __before_n = _M_find_before_node(__bkt, __key, __c);
 81070b0:	683b      	ldr	r3, [r7, #0]
 81070b2:	687a      	ldr	r2, [r7, #4]
 81070b4:	68b9      	ldr	r1, [r7, #8]
 81070b6:	68f8      	ldr	r0, [r7, #12]
 81070b8:	f000 f86b 	bl	8107192 <_ZNKSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_PKcESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_find_before_nodeEjRS3_j>
 81070bc:	6178      	str	r0, [r7, #20]
	if (__before_n)
 81070be:	697b      	ldr	r3, [r7, #20]
 81070c0:	2b00      	cmp	r3, #0
 81070c2:	d002      	beq.n	81070ca <_ZNKSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_PKcESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE12_M_find_nodeEjRS3_j+0x28>
	  return static_cast<__node_ptr>(__before_n->_M_nxt);
 81070c4:	697b      	ldr	r3, [r7, #20]
 81070c6:	681b      	ldr	r3, [r3, #0]
 81070c8:	e000      	b.n	81070cc <_ZNKSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_PKcESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE12_M_find_nodeEjRS3_j+0x2a>
	return nullptr;
 81070ca:	2300      	movs	r3, #0
      }
 81070cc:	4618      	mov	r0, r3
 81070ce:	3718      	adds	r7, #24
 81070d0:	46bd      	mov	sp, r7
 81070d2:	bd80      	pop	{r7, pc}

081070d4 <_ZNSt8__detail20_Node_const_iteratorISt4pairIKN7APIDoIP12EDoIPRequestEPKcELb0ELb0EEC1EPNS_10_Hash_nodeIS7_Lb0EEE>:
      _Node_const_iterator(__node_type* __p) noexcept
 81070d4:	b580      	push	{r7, lr}
 81070d6:	b082      	sub	sp, #8
 81070d8:	af00      	add	r7, sp, #0
 81070da:	6078      	str	r0, [r7, #4]
 81070dc:	6039      	str	r1, [r7, #0]
      : __base_type(__p) { }
 81070de:	687b      	ldr	r3, [r7, #4]
 81070e0:	6839      	ldr	r1, [r7, #0]
 81070e2:	4618      	mov	r0, r3
 81070e4:	f7fc faa9 	bl	810363a <_ZNSt8__detail19_Node_iterator_baseISt4pairIKN7APIDoIP12EDoIPRequestEPKcELb0EEC1EPNS_10_Hash_nodeIS7_Lb0EEE>
 81070e8:	687b      	ldr	r3, [r7, #4]
 81070ea:	4618      	mov	r0, r3
 81070ec:	3708      	adds	r7, #8
 81070ee:	46bd      	mov	sp, r7
 81070f0:	bd80      	pop	{r7, pc}

081070f2 <_ZNKSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_find_before_nodeEjRS3_j>:
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
 81070f2:	b580      	push	{r7, lr}
 81070f4:	b086      	sub	sp, #24
 81070f6:	af00      	add	r7, sp, #0
 81070f8:	60f8      	str	r0, [r7, #12]
 81070fa:	60b9      	str	r1, [r7, #8]
 81070fc:	607a      	str	r2, [r7, #4]
 81070fe:	603b      	str	r3, [r7, #0]
      __node_base_ptr __prev_p = _M_buckets[__bkt];
 8107100:	68fb      	ldr	r3, [r7, #12]
 8107102:	681a      	ldr	r2, [r3, #0]
 8107104:	68bb      	ldr	r3, [r7, #8]
 8107106:	009b      	lsls	r3, r3, #2
 8107108:	4413      	add	r3, r2
 810710a:	681b      	ldr	r3, [r3, #0]
 810710c:	617b      	str	r3, [r7, #20]
      if (!__prev_p)
 810710e:	697b      	ldr	r3, [r7, #20]
 8107110:	2b00      	cmp	r3, #0
 8107112:	d101      	bne.n	8107118 <_ZNKSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_find_before_nodeEjRS3_j+0x26>
	return nullptr;
 8107114:	2300      	movs	r3, #0
 8107116:	e02d      	b.n	8107174 <_ZNKSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_find_before_nodeEjRS3_j+0x82>
      for (__node_ptr __p = static_cast<__node_ptr>(__prev_p->_M_nxt);;
 8107118:	697b      	ldr	r3, [r7, #20]
 810711a:	681b      	ldr	r3, [r3, #0]
 810711c:	613b      	str	r3, [r7, #16]
	  if (this->_M_equals(__k, __code, *__p))
 810711e:	693b      	ldr	r3, [r7, #16]
 8107120:	3304      	adds	r3, #4
 8107122:	683a      	ldr	r2, [r7, #0]
 8107124:	6879      	ldr	r1, [r7, #4]
 8107126:	68f8      	ldr	r0, [r7, #12]
 8107128:	f000 f878 	bl	810721c <_ZNKSt8__detail15_Hashtable_baseIN7APIDoIP12EDoIPRequestESt4pairIKS2_S3_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEENS_10_Select1stESt8equal_toIS2_ESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEE9_M_equalsERS4_jRKNS_16_Hash_node_valueISB_Lb0EEE>
 810712c:	4603      	mov	r3, r0
 810712e:	2b00      	cmp	r3, #0
 8107130:	d001      	beq.n	8107136 <_ZNKSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_find_before_nodeEjRS3_j+0x44>
	    return __prev_p;
 8107132:	697b      	ldr	r3, [r7, #20]
 8107134:	e01e      	b.n	8107174 <_ZNKSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_find_before_nodeEjRS3_j+0x82>
	  if (!__p->_M_nxt || _M_bucket_index(*__p->_M_next()) != __bkt)
 8107136:	693b      	ldr	r3, [r7, #16]
 8107138:	681b      	ldr	r3, [r3, #0]
 810713a:	2b00      	cmp	r3, #0
 810713c:	d00c      	beq.n	8107158 <_ZNKSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_find_before_nodeEjRS3_j+0x66>
 810713e:	6938      	ldr	r0, [r7, #16]
 8107140:	f7fa ff19 	bl	8101f76 <_ZNKSt8__detail10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES1_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EE7_M_nextEv>
 8107144:	4603      	mov	r3, r0
 8107146:	3304      	adds	r3, #4
 8107148:	4619      	mov	r1, r3
 810714a:	68f8      	ldr	r0, [r7, #12]
 810714c:	f7fc fba3 	bl	8103896 <_ZNKSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE15_M_bucket_indexERKNSC_16_Hash_node_valueISA_Lb0EEE>
 8107150:	4602      	mov	r2, r0
 8107152:	68bb      	ldr	r3, [r7, #8]
 8107154:	4293      	cmp	r3, r2
 8107156:	d001      	beq.n	810715c <_ZNKSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_find_before_nodeEjRS3_j+0x6a>
 8107158:	2301      	movs	r3, #1
 810715a:	e000      	b.n	810715e <_ZNKSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_find_before_nodeEjRS3_j+0x6c>
 810715c:	2300      	movs	r3, #0
 810715e:	2b00      	cmp	r3, #0
 8107160:	d106      	bne.n	8107170 <_ZNKSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_find_before_nodeEjRS3_j+0x7e>
	  __prev_p = __p;
 8107162:	693b      	ldr	r3, [r7, #16]
 8107164:	617b      	str	r3, [r7, #20]
	   __p = __p->_M_next())
 8107166:	6938      	ldr	r0, [r7, #16]
 8107168:	f7fa ff05 	bl	8101f76 <_ZNKSt8__detail10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES1_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EE7_M_nextEv>
 810716c:	6138      	str	r0, [r7, #16]
	  if (this->_M_equals(__k, __code, *__p))
 810716e:	e7d6      	b.n	810711e <_ZNKSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_find_before_nodeEjRS3_j+0x2c>
	    break;
 8107170:	bf00      	nop
      return nullptr;
 8107172:	2300      	movs	r3, #0
    }
 8107174:	4618      	mov	r0, r3
 8107176:	3718      	adds	r7, #24
 8107178:	46bd      	mov	sp, r7
 810717a:	bd80      	pop	{r7, pc}

0810717c <_ZNKSt8__detail9__variant16_Variant_storageILb1EJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE8_M_validEv>:
      _M_valid() const noexcept
 810717c:	b480      	push	{r7}
 810717e:	b083      	sub	sp, #12
 8107180:	af00      	add	r7, sp, #0
 8107182:	6078      	str	r0, [r7, #4]
	  return true;
 8107184:	2301      	movs	r3, #1
      }
 8107186:	4618      	mov	r0, r3
 8107188:	370c      	adds	r7, #12
 810718a:	46bd      	mov	sp, r7
 810718c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107190:	4770      	bx	lr

08107192 <_ZNKSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_PKcESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_find_before_nodeEjRS3_j>:
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
 8107192:	b580      	push	{r7, lr}
 8107194:	b086      	sub	sp, #24
 8107196:	af00      	add	r7, sp, #0
 8107198:	60f8      	str	r0, [r7, #12]
 810719a:	60b9      	str	r1, [r7, #8]
 810719c:	607a      	str	r2, [r7, #4]
 810719e:	603b      	str	r3, [r7, #0]
      __node_base_ptr __prev_p = _M_buckets[__bkt];
 81071a0:	68fb      	ldr	r3, [r7, #12]
 81071a2:	681a      	ldr	r2, [r3, #0]
 81071a4:	68bb      	ldr	r3, [r7, #8]
 81071a6:	009b      	lsls	r3, r3, #2
 81071a8:	4413      	add	r3, r2
 81071aa:	681b      	ldr	r3, [r3, #0]
 81071ac:	617b      	str	r3, [r7, #20]
      if (!__prev_p)
 81071ae:	697b      	ldr	r3, [r7, #20]
 81071b0:	2b00      	cmp	r3, #0
 81071b2:	d101      	bne.n	81071b8 <_ZNKSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_PKcESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_find_before_nodeEjRS3_j+0x26>
	return nullptr;
 81071b4:	2300      	movs	r3, #0
 81071b6:	e02d      	b.n	8107214 <_ZNKSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_PKcESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_find_before_nodeEjRS3_j+0x82>
      for (__node_ptr __p = static_cast<__node_ptr>(__prev_p->_M_nxt);;
 81071b8:	697b      	ldr	r3, [r7, #20]
 81071ba:	681b      	ldr	r3, [r3, #0]
 81071bc:	613b      	str	r3, [r7, #16]
	  if (this->_M_equals(__k, __code, *__p))
 81071be:	693b      	ldr	r3, [r7, #16]
 81071c0:	3304      	adds	r3, #4
 81071c2:	683a      	ldr	r2, [r7, #0]
 81071c4:	6879      	ldr	r1, [r7, #4]
 81071c6:	68f8      	ldr	r0, [r7, #12]
 81071c8:	f000 f845 	bl	8107256 <_ZNKSt8__detail15_Hashtable_baseIN7APIDoIP12EDoIPRequestESt4pairIKS2_PKcENS_10_Select1stESt8equal_toIS2_ESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEE9_M_equalsERS4_jRKNS_16_Hash_node_valueIS7_Lb0EEE>
 81071cc:	4603      	mov	r3, r0
 81071ce:	2b00      	cmp	r3, #0
 81071d0:	d001      	beq.n	81071d6 <_ZNKSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_PKcESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_find_before_nodeEjRS3_j+0x44>
	    return __prev_p;
 81071d2:	697b      	ldr	r3, [r7, #20]
 81071d4:	e01e      	b.n	8107214 <_ZNKSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_PKcESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_find_before_nodeEjRS3_j+0x82>
	  if (!__p->_M_nxt || _M_bucket_index(*__p->_M_next()) != __bkt)
 81071d6:	693b      	ldr	r3, [r7, #16]
 81071d8:	681b      	ldr	r3, [r3, #0]
 81071da:	2b00      	cmp	r3, #0
 81071dc:	d00c      	beq.n	81071f8 <_ZNKSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_PKcESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_find_before_nodeEjRS3_j+0x66>
 81071de:	6938      	ldr	r0, [r7, #16]
 81071e0:	f7fa ffc9 	bl	8102176 <_ZNKSt8__detail10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestEPKcELb0EE7_M_nextEv>
 81071e4:	4603      	mov	r3, r0
 81071e6:	3304      	adds	r3, #4
 81071e8:	4619      	mov	r1, r3
 81071ea:	68f8      	ldr	r0, [r7, #12]
 81071ec:	f7fc fc6b 	bl	8103ac6 <_ZNKSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_PKcESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE15_M_bucket_indexERKNS8_16_Hash_node_valueIS6_Lb0EEE>
 81071f0:	4602      	mov	r2, r0
 81071f2:	68bb      	ldr	r3, [r7, #8]
 81071f4:	4293      	cmp	r3, r2
 81071f6:	d001      	beq.n	81071fc <_ZNKSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_PKcESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_find_before_nodeEjRS3_j+0x6a>
 81071f8:	2301      	movs	r3, #1
 81071fa:	e000      	b.n	81071fe <_ZNKSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_PKcESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_find_before_nodeEjRS3_j+0x6c>
 81071fc:	2300      	movs	r3, #0
 81071fe:	2b00      	cmp	r3, #0
 8107200:	d106      	bne.n	8107210 <_ZNKSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_PKcESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_find_before_nodeEjRS3_j+0x7e>
	  __prev_p = __p;
 8107202:	693b      	ldr	r3, [r7, #16]
 8107204:	617b      	str	r3, [r7, #20]
	   __p = __p->_M_next())
 8107206:	6938      	ldr	r0, [r7, #16]
 8107208:	f7fa ffb5 	bl	8102176 <_ZNKSt8__detail10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestEPKcELb0EE7_M_nextEv>
 810720c:	6138      	str	r0, [r7, #16]
	  if (this->_M_equals(__k, __code, *__p))
 810720e:	e7d6      	b.n	81071be <_ZNKSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_PKcESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_find_before_nodeEjRS3_j+0x2c>
	    break;
 8107210:	bf00      	nop
      return nullptr;
 8107212:	2300      	movs	r3, #0
    }
 8107214:	4618      	mov	r0, r3
 8107216:	3718      	adds	r7, #24
 8107218:	46bd      	mov	sp, r7
 810721a:	bd80      	pop	{r7, pc}

0810721c <_ZNKSt8__detail15_Hashtable_baseIN7APIDoIP12EDoIPRequestESt4pairIKS2_S3_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEENS_10_Select1stESt8equal_toIS2_ESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEE9_M_equalsERS4_jRKNS_16_Hash_node_valueISB_Lb0EEE>:
      _M_equals(const _Key& __k, __hash_code __c,
 810721c:	b580      	push	{r7, lr}
 810721e:	b084      	sub	sp, #16
 8107220:	af00      	add	r7, sp, #0
 8107222:	60f8      	str	r0, [r7, #12]
 8107224:	60b9      	str	r1, [r7, #8]
 8107226:	607a      	str	r2, [r7, #4]
 8107228:	603b      	str	r3, [r7, #0]
      { return _S_equals(__c, __n) && _M_key_equals(__k, __n); }
 810722a:	6839      	ldr	r1, [r7, #0]
 810722c:	6878      	ldr	r0, [r7, #4]
 810722e:	f7fc fd44 	bl	8103cba <_ZNSt8__detail15_Hashtable_baseIN7APIDoIP12EDoIPRequestESt4pairIKS2_S3_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEENS_10_Select1stESt8equal_toIS2_ESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEE9_S_equalsEjRKNS_21_Hash_node_code_cacheILb0EEE>
 8107232:	4603      	mov	r3, r0
 8107234:	2b00      	cmp	r3, #0
 8107236:	d009      	beq.n	810724c <_ZNKSt8__detail15_Hashtable_baseIN7APIDoIP12EDoIPRequestESt4pairIKS2_S3_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEENS_10_Select1stESt8equal_toIS2_ESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEE9_M_equalsERS4_jRKNS_16_Hash_node_valueISB_Lb0EEE+0x30>
 8107238:	683a      	ldr	r2, [r7, #0]
 810723a:	68b9      	ldr	r1, [r7, #8]
 810723c:	68f8      	ldr	r0, [r7, #12]
 810723e:	f7ff fe5d 	bl	8106efc <_ZNKSt8__detail15_Hashtable_baseIN7APIDoIP12EDoIPRequestESt4pairIKS2_S3_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEENS_10_Select1stESt8equal_toIS2_ESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEE13_M_key_equalsERS4_RKNS_16_Hash_node_valueISB_Lb0EEE>
 8107242:	4603      	mov	r3, r0
 8107244:	2b00      	cmp	r3, #0
 8107246:	d001      	beq.n	810724c <_ZNKSt8__detail15_Hashtable_baseIN7APIDoIP12EDoIPRequestESt4pairIKS2_S3_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEENS_10_Select1stESt8equal_toIS2_ESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEE9_M_equalsERS4_jRKNS_16_Hash_node_valueISB_Lb0EEE+0x30>
 8107248:	2301      	movs	r3, #1
 810724a:	e000      	b.n	810724e <_ZNKSt8__detail15_Hashtable_baseIN7APIDoIP12EDoIPRequestESt4pairIKS2_S3_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEENS_10_Select1stESt8equal_toIS2_ESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEE9_M_equalsERS4_jRKNS_16_Hash_node_valueISB_Lb0EEE+0x32>
 810724c:	2300      	movs	r3, #0
 810724e:	4618      	mov	r0, r3
 8107250:	3710      	adds	r7, #16
 8107252:	46bd      	mov	sp, r7
 8107254:	bd80      	pop	{r7, pc}

08107256 <_ZNKSt8__detail15_Hashtable_baseIN7APIDoIP12EDoIPRequestESt4pairIKS2_PKcENS_10_Select1stESt8equal_toIS2_ESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEE9_M_equalsERS4_jRKNS_16_Hash_node_valueIS7_Lb0EEE>:
      _M_equals(const _Key& __k, __hash_code __c,
 8107256:	b580      	push	{r7, lr}
 8107258:	b084      	sub	sp, #16
 810725a:	af00      	add	r7, sp, #0
 810725c:	60f8      	str	r0, [r7, #12]
 810725e:	60b9      	str	r1, [r7, #8]
 8107260:	607a      	str	r2, [r7, #4]
 8107262:	603b      	str	r3, [r7, #0]
      { return _S_equals(__c, __n) && _M_key_equals(__k, __n); }
 8107264:	6839      	ldr	r1, [r7, #0]
 8107266:	6878      	ldr	r0, [r7, #4]
 8107268:	f7fc fdbc 	bl	8103de4 <_ZNSt8__detail15_Hashtable_baseIN7APIDoIP12EDoIPRequestESt4pairIKS2_PKcENS_10_Select1stESt8equal_toIS2_ESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEE9_S_equalsEjRKNS_21_Hash_node_code_cacheILb0EEE>
 810726c:	4603      	mov	r3, r0
 810726e:	2b00      	cmp	r3, #0
 8107270:	d009      	beq.n	8107286 <_ZNKSt8__detail15_Hashtable_baseIN7APIDoIP12EDoIPRequestESt4pairIKS2_PKcENS_10_Select1stESt8equal_toIS2_ESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEE9_M_equalsERS4_jRKNS_16_Hash_node_valueIS7_Lb0EEE+0x30>
 8107272:	683a      	ldr	r2, [r7, #0]
 8107274:	68b9      	ldr	r1, [r7, #8]
 8107276:	68f8      	ldr	r0, [r7, #12]
 8107278:	f7ff fef3 	bl	8107062 <_ZNKSt8__detail15_Hashtable_baseIN7APIDoIP12EDoIPRequestESt4pairIKS2_PKcENS_10_Select1stESt8equal_toIS2_ESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEE13_M_key_equalsERS4_RKNS_16_Hash_node_valueIS7_Lb0EEE>
 810727c:	4603      	mov	r3, r0
 810727e:	2b00      	cmp	r3, #0
 8107280:	d001      	beq.n	8107286 <_ZNKSt8__detail15_Hashtable_baseIN7APIDoIP12EDoIPRequestESt4pairIKS2_PKcENS_10_Select1stESt8equal_toIS2_ESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEE9_M_equalsERS4_jRKNS_16_Hash_node_valueIS7_Lb0EEE+0x30>
 8107282:	2301      	movs	r3, #1
 8107284:	e000      	b.n	8107288 <_ZNKSt8__detail15_Hashtable_baseIN7APIDoIP12EDoIPRequestESt4pairIKS2_PKcENS_10_Select1stESt8equal_toIS2_ESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEE9_M_equalsERS4_jRKNS_16_Hash_node_valueIS7_Lb0EEE+0x32>
 8107286:	2300      	movs	r3, #0
 8107288:	4618      	mov	r0, r3
 810728a:	3710      	adds	r7, #16
 810728c:	46bd      	mov	sp, r7
 810728e:	bd80      	pop	{r7, pc}

08107290 <_Z41__static_initialization_and_destruction_0ii>:
 8107290:	b580      	push	{r7, lr}
 8107292:	b0ea      	sub	sp, #424	@ 0x1a8
 8107294:	af04      	add	r7, sp, #16
 8107296:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 810729a:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 810729e:	6018      	str	r0, [r3, #0]
 81072a0:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 81072a4:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 81072a8:	6019      	str	r1, [r3, #0]
 81072aa:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 81072ae:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 81072b2:	681b      	ldr	r3, [r3, #0]
 81072b4:	2b01      	cmp	r3, #1
 81072b6:	f040 824d 	bne.w	8107754 <_Z41__static_initialization_and_destruction_0ii+0x4c4>
 81072ba:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 81072be:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 81072c2:	681b      	ldr	r3, [r3, #0]
 81072c4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 81072c8:	4293      	cmp	r3, r2
 81072ca:	f040 8243 	bne.w	8107754 <_Z41__static_initialization_and_destruction_0ii+0x4c4>
 81072ce:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 81072d2:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 81072d6:	4618      	mov	r0, r3
 81072d8:	23f0      	movs	r3, #240	@ 0xf0
 81072da:	461a      	mov	r2, r3
 81072dc:	2100      	movs	r1, #0
 81072de:	f01f fcdd 	bl	8126c9c <memset>
 81072e2:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 81072e6:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 81072ea:	4aec      	ldr	r2, [pc, #944]	@ (810769c <_Z41__static_initialization_and_destruction_0ii+0x40c>)
 81072ec:	605a      	str	r2, [r3, #4]
 81072ee:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 81072f2:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 81072f6:	2201      	movs	r2, #1
 81072f8:	721a      	strb	r2, [r3, #8]
 81072fa:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 81072fe:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8107302:	2212      	movs	r2, #18
 8107304:	731a      	strb	r2, [r3, #12]
 8107306:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 810730a:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 810730e:	2201      	movs	r2, #1
 8107310:	741a      	strb	r2, [r3, #16]
 8107312:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8107316:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 810731a:	4ae1      	ldr	r2, [pc, #900]	@ (81076a0 <_Z41__static_initialization_and_destruction_0ii+0x410>)
 810731c:	615a      	str	r2, [r3, #20]
 810731e:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8107322:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8107326:	2201      	movs	r2, #1
 8107328:	761a      	strb	r2, [r3, #24]
 810732a:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 810732e:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8107332:	2212      	movs	r2, #18
 8107334:	771a      	strb	r2, [r3, #28]
 8107336:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 810733a:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 810733e:	2202      	movs	r2, #2
 8107340:	f883 2020 	strb.w	r2, [r3, #32]
 8107344:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8107348:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 810734c:	4ad5      	ldr	r2, [pc, #852]	@ (81076a4 <_Z41__static_initialization_and_destruction_0ii+0x414>)
 810734e:	625a      	str	r2, [r3, #36]	@ 0x24
 8107350:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8107354:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8107358:	2201      	movs	r2, #1
 810735a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
 810735e:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8107362:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8107366:	2212      	movs	r2, #18
 8107368:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
 810736c:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8107370:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8107374:	2203      	movs	r2, #3
 8107376:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
 810737a:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 810737e:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8107382:	4ac9      	ldr	r2, [pc, #804]	@ (81076a8 <_Z41__static_initialization_and_destruction_0ii+0x418>)
 8107384:	635a      	str	r2, [r3, #52]	@ 0x34
 8107386:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 810738a:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 810738e:	2201      	movs	r2, #1
 8107390:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
 8107394:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8107398:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 810739c:	2212      	movs	r2, #18
 810739e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 81073a2:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 81073a6:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 81073aa:	2204      	movs	r2, #4
 81073ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 81073b0:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 81073b4:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 81073b8:	4abc      	ldr	r2, [pc, #752]	@ (81076ac <_Z41__static_initialization_and_destruction_0ii+0x41c>)
 81073ba:	645a      	str	r2, [r3, #68]	@ 0x44
 81073bc:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 81073c0:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 81073c4:	2201      	movs	r2, #1
 81073c6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
 81073ca:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 81073ce:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 81073d2:	2212      	movs	r2, #18
 81073d4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
 81073d8:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 81073dc:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 81073e0:	2205      	movs	r2, #5
 81073e2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 81073e6:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 81073ea:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 81073ee:	4ab0      	ldr	r2, [pc, #704]	@ (81076b0 <_Z41__static_initialization_and_destruction_0ii+0x420>)
 81073f0:	655a      	str	r2, [r3, #84]	@ 0x54
 81073f2:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 81073f6:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 81073fa:	2201      	movs	r2, #1
 81073fc:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8107400:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8107404:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8107408:	2212      	movs	r2, #18
 810740a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
 810740e:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8107412:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8107416:	2206      	movs	r2, #6
 8107418:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
 810741c:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8107420:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8107424:	4aa3      	ldr	r2, [pc, #652]	@ (81076b4 <_Z41__static_initialization_and_destruction_0ii+0x424>)
 8107426:	665a      	str	r2, [r3, #100]	@ 0x64
 8107428:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 810742c:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8107430:	2201      	movs	r2, #1
 8107432:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
 8107436:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 810743a:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 810743e:	2212      	movs	r2, #18
 8107440:	f883 206c 	strb.w	r2, [r3, #108]	@ 0x6c
 8107444:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8107448:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 810744c:	2207      	movs	r2, #7
 810744e:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
 8107452:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8107456:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 810745a:	4a97      	ldr	r2, [pc, #604]	@ (81076b8 <_Z41__static_initialization_and_destruction_0ii+0x428>)
 810745c:	675a      	str	r2, [r3, #116]	@ 0x74
 810745e:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8107462:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8107466:	2201      	movs	r2, #1
 8107468:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
 810746c:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8107470:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8107474:	2212      	movs	r2, #18
 8107476:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
 810747a:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 810747e:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8107482:	2208      	movs	r2, #8
 8107484:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
 8107488:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 810748c:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8107490:	f24d 120d 	movw	r2, #53517	@ 0xd10d
 8107494:	f8a3 2084 	strh.w	r2, [r3, #132]	@ 0x84
 8107498:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 810749c:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 81074a0:	2260      	movs	r2, #96	@ 0x60
 81074a2:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c
 81074a6:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 81074aa:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 81074ae:	2209      	movs	r2, #9
 81074b0:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
 81074b4:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 81074b8:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 81074bc:	f24d 1207 	movw	r2, #53511	@ 0xd107
 81074c0:	f8a3 2094 	strh.w	r2, [r3, #148]	@ 0x94
 81074c4:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 81074c8:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 81074cc:	2260      	movs	r2, #96	@ 0x60
 81074ce:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
 81074d2:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 81074d6:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 81074da:	220a      	movs	r2, #10
 81074dc:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
 81074e0:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 81074e4:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 81074e8:	f24d 1212 	movw	r2, #53522	@ 0xd112
 81074ec:	f8a3 20a4 	strh.w	r2, [r3, #164]	@ 0xa4
 81074f0:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 81074f4:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 81074f8:	2260      	movs	r2, #96	@ 0x60
 81074fa:	f883 20ac 	strb.w	r2, [r3, #172]	@ 0xac
 81074fe:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8107502:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8107506:	220b      	movs	r2, #11
 8107508:	f883 20b0 	strb.w	r2, [r3, #176]	@ 0xb0
 810750c:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8107510:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8107514:	f24d 1206 	movw	r2, #53510	@ 0xd106
 8107518:	f8a3 20b4 	strh.w	r2, [r3, #180]	@ 0xb4
 810751c:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8107520:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8107524:	2260      	movs	r2, #96	@ 0x60
 8107526:	f883 20bc 	strb.w	r2, [r3, #188]	@ 0xbc
 810752a:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 810752e:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8107532:	220c      	movs	r2, #12
 8107534:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0
 8107538:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 810753c:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8107540:	f24d 121f 	movw	r2, #53535	@ 0xd11f
 8107544:	f8a3 20c4 	strh.w	r2, [r3, #196]	@ 0xc4
 8107548:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 810754c:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8107550:	2260      	movs	r2, #96	@ 0x60
 8107552:	f883 20cc 	strb.w	r2, [r3, #204]	@ 0xcc
 8107556:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 810755a:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 810755e:	220d      	movs	r2, #13
 8107560:	f883 20d0 	strb.w	r2, [r3, #208]	@ 0xd0
 8107564:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8107568:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 810756c:	f64d 125c 	movw	r2, #55644	@ 0xd95c
 8107570:	f8a3 20d4 	strh.w	r2, [r3, #212]	@ 0xd4
 8107574:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8107578:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 810757c:	2278      	movs	r2, #120	@ 0x78
 810757e:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc
 8107582:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8107586:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 810758a:	220e      	movs	r2, #14
 810758c:	f883 20e0 	strb.w	r2, [r3, #224]	@ 0xe0
 8107590:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8107594:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8107598:	f64d 1277 	movw	r2, #55671	@ 0xd977
 810759c:	f8a3 20e4 	strh.w	r2, [r3, #228]	@ 0xe4
 81075a0:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 81075a4:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 81075a8:	2278      	movs	r2, #120	@ 0x78
 81075aa:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
 81075ae:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 81075b2:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 81075b6:	f107 0210 	add.w	r2, r7, #16
 81075ba:	601a      	str	r2, [r3, #0]
 81075bc:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 81075c0:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 81075c4:	220f      	movs	r2, #15
 81075c6:	605a      	str	r2, [r3, #4]
 81075c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 81075cc:	4618      	mov	r0, r3
 81075ce:	f7fa f905 	bl	81017dc <_ZNSaISt4pairIKN7APIDoIP12EDoIPRequestES_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEEEC1Ev>
 81075d2:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 81075d6:	f5a3 72c8 	sub.w	r2, r3, #400	@ 0x190
 81075da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 81075de:	9302      	str	r3, [sp, #8]
 81075e0:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 81075e4:	9301      	str	r3, [sp, #4]
 81075e6:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 81075ea:	9300      	str	r3, [sp, #0]
 81075ec:	2300      	movs	r3, #0
 81075ee:	ca06      	ldmia	r2, {r1, r2}
 81075f0:	4832      	ldr	r0, [pc, #200]	@ (81076bc <_Z41__static_initialization_and_destruction_0ii+0x42c>)
 81075f2:	f7fa f90a 	bl	810180a <_ZNSt13unordered_mapIN7APIDoIP12EDoIPRequestESt4pairISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressESt4hashIS1_ESt8equal_toIS1_ESaIS2_IKS1_S8_EEEC1ESt16initializer_listISE_EjRKSA_RKSC_RKSF_>
 81075f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 81075fa:	4618      	mov	r0, r3
 81075fc:	f7fa f8fa 	bl	81017f4 <_ZNSaISt4pairIKN7APIDoIP12EDoIPRequestES_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEEED1Ev>
    const std::unordered_map<EDoIPRequest, const char*> EDoIPRequest_ToCStringMap = 
 8107600:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 8107604:	2278      	movs	r2, #120	@ 0x78
 8107606:	2100      	movs	r1, #0
 8107608:	4618      	mov	r0, r3
 810760a:	f01f fb47 	bl	8126c9c <memset>
 810760e:	4b2c      	ldr	r3, [pc, #176]	@ (81076c0 <_Z41__static_initialization_and_destruction_0ii+0x430>)
 8107610:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8107614:	2301      	movs	r3, #1
 8107616:	f887 311c 	strb.w	r3, [r7, #284]	@ 0x11c
 810761a:	4b2a      	ldr	r3, [pc, #168]	@ (81076c4 <_Z41__static_initialization_and_destruction_0ii+0x434>)
 810761c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8107620:	2302      	movs	r3, #2
 8107622:	f887 3124 	strb.w	r3, [r7, #292]	@ 0x124
 8107626:	4b28      	ldr	r3, [pc, #160]	@ (81076c8 <_Z41__static_initialization_and_destruction_0ii+0x438>)
 8107628:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 810762c:	2303      	movs	r3, #3
 810762e:	f887 312c 	strb.w	r3, [r7, #300]	@ 0x12c
 8107632:	4b26      	ldr	r3, [pc, #152]	@ (81076cc <_Z41__static_initialization_and_destruction_0ii+0x43c>)
 8107634:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8107638:	2304      	movs	r3, #4
 810763a:	f887 3134 	strb.w	r3, [r7, #308]	@ 0x134
 810763e:	4b24      	ldr	r3, [pc, #144]	@ (81076d0 <_Z41__static_initialization_and_destruction_0ii+0x440>)
 8107640:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 8107644:	2305      	movs	r3, #5
 8107646:	f887 313c 	strb.w	r3, [r7, #316]	@ 0x13c
 810764a:	4b22      	ldr	r3, [pc, #136]	@ (81076d4 <_Z41__static_initialization_and_destruction_0ii+0x444>)
 810764c:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
 8107650:	2306      	movs	r3, #6
 8107652:	f887 3144 	strb.w	r3, [r7, #324]	@ 0x144
 8107656:	4b20      	ldr	r3, [pc, #128]	@ (81076d8 <_Z41__static_initialization_and_destruction_0ii+0x448>)
 8107658:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
 810765c:	2307      	movs	r3, #7
 810765e:	f887 314c 	strb.w	r3, [r7, #332]	@ 0x14c
 8107662:	4b1e      	ldr	r3, [pc, #120]	@ (81076dc <_Z41__static_initialization_and_destruction_0ii+0x44c>)
 8107664:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8107668:	2308      	movs	r3, #8
 810766a:	f887 3154 	strb.w	r3, [r7, #340]	@ 0x154
 810766e:	4b1c      	ldr	r3, [pc, #112]	@ (81076e0 <_Z41__static_initialization_and_destruction_0ii+0x450>)
 8107670:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 8107674:	2309      	movs	r3, #9
 8107676:	f887 315c 	strb.w	r3, [r7, #348]	@ 0x15c
 810767a:	4b1a      	ldr	r3, [pc, #104]	@ (81076e4 <_Z41__static_initialization_and_destruction_0ii+0x454>)
 810767c:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
 8107680:	230a      	movs	r3, #10
 8107682:	f887 3164 	strb.w	r3, [r7, #356]	@ 0x164
 8107686:	4b18      	ldr	r3, [pc, #96]	@ (81076e8 <_Z41__static_initialization_and_destruction_0ii+0x458>)
 8107688:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
 810768c:	230b      	movs	r3, #11
 810768e:	f887 316c 	strb.w	r3, [r7, #364]	@ 0x16c
 8107692:	4b16      	ldr	r3, [pc, #88]	@ (81076ec <_Z41__static_initialization_and_destruction_0ii+0x45c>)
 8107694:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
 8107698:	230c      	movs	r3, #12
 810769a:	e029      	b.n	81076f0 <_Z41__static_initialization_and_destruction_0ii+0x460>
 810769c:	44020102 	.word	0x44020102
 81076a0:	48070102 	.word	0x48070102
 81076a4:	43000101 	.word	0x43000101
 81076a8:	46090101 	.word	0x46090101
 81076ac:	42040101 	.word	0x42040101
 81076b0:	42080102 	.word	0x42080102
 81076b4:	481a0102 	.word	0x481a0102
 81076b8:	4a290101 	.word	0x4a290101
 81076bc:	10000280 	.word	0x10000280
 81076c0:	08127b1c 	.word	0x08127b1c
 81076c4:	08127b30 	.word	0x08127b30
 81076c8:	08127b44 	.word	0x08127b44
 81076cc:	08127b54 	.word	0x08127b54
 81076d0:	08127b60 	.word	0x08127b60
 81076d4:	08127b70 	.word	0x08127b70
 81076d8:	08127b80 	.word	0x08127b80
 81076dc:	08127b90 	.word	0x08127b90
 81076e0:	08127ba4 	.word	0x08127ba4
 81076e4:	08127bb0 	.word	0x08127bb0
 81076e8:	08127bbc 	.word	0x08127bbc
 81076ec:	08127bcc 	.word	0x08127bcc
 81076f0:	f887 3174 	strb.w	r3, [r7, #372]	@ 0x174
 81076f4:	4b25      	ldr	r3, [pc, #148]	@ (810778c <_Z41__static_initialization_and_destruction_0ii+0x4fc>)
 81076f6:	f8c7 3178 	str.w	r3, [r7, #376]	@ 0x178
 81076fa:	230d      	movs	r3, #13
 81076fc:	f887 317c 	strb.w	r3, [r7, #380]	@ 0x17c
 8107700:	4b23      	ldr	r3, [pc, #140]	@ (8107790 <_Z41__static_initialization_and_destruction_0ii+0x500>)
 8107702:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8107706:	230e      	movs	r3, #14
 8107708:	f887 3184 	strb.w	r3, [r7, #388]	@ 0x184
 810770c:	4b21      	ldr	r3, [pc, #132]	@ (8107794 <_Z41__static_initialization_and_destruction_0ii+0x504>)
 810770e:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 8107712:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 8107716:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 810771a:	230f      	movs	r3, #15
 810771c:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 8107720:	f507 73ca 	add.w	r3, r7, #404	@ 0x194
 8107724:	4618      	mov	r0, r3
 8107726:	f7fa f889 	bl	810183c <_ZNSaISt4pairIKN7APIDoIP12EDoIPRequestEPKcEEC1Ev>
 810772a:	f507 73ca 	add.w	r3, r7, #404	@ 0x194
 810772e:	9302      	str	r3, [sp, #8]
 8107730:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8107734:	9301      	str	r3, [sp, #4]
 8107736:	f507 73c6 	add.w	r3, r7, #396	@ 0x18c
 810773a:	9300      	str	r3, [sp, #0]
 810773c:	2300      	movs	r3, #0
 810773e:	f507 7286 	add.w	r2, r7, #268	@ 0x10c
 8107742:	ca06      	ldmia	r2, {r1, r2}
 8107744:	4814      	ldr	r0, [pc, #80]	@ (8107798 <_Z41__static_initialization_and_destruction_0ii+0x508>)
 8107746:	f7fa f890 	bl	810186a <_ZNSt13unordered_mapIN7APIDoIP12EDoIPRequestEPKcSt4hashIS1_ESt8equal_toIS1_ESaISt4pairIKS1_S3_EEEC1ESt16initializer_listISA_EjRKS5_RKS7_RKSB_>
 810774a:	f507 73ca 	add.w	r3, r7, #404	@ 0x194
 810774e:	4618      	mov	r0, r3
 8107750:	f7fa f880 	bl	8101854 <_ZNSaISt4pairIKN7APIDoIP12EDoIPRequestEPKcEED1Ev>
 8107754:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8107758:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 810775c:	681b      	ldr	r3, [r3, #0]
 810775e:	2b00      	cmp	r3, #0
 8107760:	d10e      	bne.n	8107780 <_Z41__static_initialization_and_destruction_0ii+0x4f0>
 8107762:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8107766:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 810776a:	681b      	ldr	r3, [r3, #0]
 810776c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8107770:	4293      	cmp	r3, r2
 8107772:	d105      	bne.n	8107780 <_Z41__static_initialization_and_destruction_0ii+0x4f0>
 8107774:	4808      	ldr	r0, [pc, #32]	@ (8107798 <_Z41__static_initialization_and_destruction_0ii+0x508>)
 8107776:	f7fc fccd 	bl	8104114 <_ZNSt13unordered_mapIN7APIDoIP12EDoIPRequestEPKcSt4hashIS1_ESt8equal_toIS1_ESaISt4pairIKS1_S3_EEED1Ev>
    const std::unordered_map<EDoIPRequest, std::pair<std::variant<EUDSDID, EDynamicDataIndentifierRequestCode>, EECUAddress>> dataIdentifierMap =
 810777a:	4808      	ldr	r0, [pc, #32]	@ (810779c <_Z41__static_initialization_and_destruction_0ii+0x50c>)
 810777c:	f7fc fcd7 	bl	810412e <_ZNSt13unordered_mapIN7APIDoIP12EDoIPRequestESt4pairISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressESt4hashIS1_ESt8equal_toIS1_ESaIS2_IKS1_S8_EEED1Ev>
 8107780:	bf00      	nop
 8107782:	f507 77cc 	add.w	r7, r7, #408	@ 0x198
 8107786:	46bd      	mov	sp, r7
 8107788:	bd80      	pop	{r7, pc}
 810778a:	bf00      	nop
 810778c:	08127be4 	.word	0x08127be4
 8107790:	08127bf8 	.word	0x08127bf8
 8107794:	08127c08 	.word	0x08127c08
 8107798:	1000029c 	.word	0x1000029c
 810779c:	10000280 	.word	0x10000280

081077a0 <_GLOBAL__sub_I_tcpRecvCb>:
 81077a0:	b580      	push	{r7, lr}
 81077a2:	af00      	add	r7, sp, #0
 81077a4:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 81077a8:	2001      	movs	r0, #1
 81077aa:	f7ff fd71 	bl	8107290 <_Z41__static_initialization_and_destruction_0ii>
 81077ae:	bd80      	pop	{r7, pc}

081077b0 <_GLOBAL__sub_D_tcpRecvCb>:
 81077b0:	b580      	push	{r7, lr}
 81077b2:	af00      	add	r7, sp, #0
 81077b4:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 81077b8:	2000      	movs	r0, #0
 81077ba:	f7ff fd69 	bl	8107290 <_Z41__static_initialization_and_destruction_0ii>
 81077be:	bd80      	pop	{r7, pc}

081077c0 <_ZNSt9_Any_data9_M_accessEv>:
    void (_Undefined_class::*_M_member_pointer)();
  };

  union [[gnu::may_alias]] _Any_data
  {
    void*       _M_access()       noexcept { return &_M_pod_data[0]; }
 81077c0:	b480      	push	{r7}
 81077c2:	b083      	sub	sp, #12
 81077c4:	af00      	add	r7, sp, #0
 81077c6:	6078      	str	r0, [r7, #4]
 81077c8:	687b      	ldr	r3, [r7, #4]
 81077ca:	4618      	mov	r0, r3
 81077cc:	370c      	adds	r7, #12
 81077ce:	46bd      	mov	sp, r7
 81077d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81077d4:	4770      	bx	lr

081077d6 <_ZNKSt9_Any_data9_M_accessEv>:
    const void* _M_access() const noexcept { return &_M_pod_data[0]; }
 81077d6:	b480      	push	{r7}
 81077d8:	b083      	sub	sp, #12
 81077da:	af00      	add	r7, sp, #0
 81077dc:	6078      	str	r0, [r7, #4]
 81077de:	687b      	ldr	r3, [r7, #4]
 81077e0:	4618      	mov	r0, r3
 81077e2:	370c      	adds	r7, #12
 81077e4:	46bd      	mov	sp, r7
 81077e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81077ea:	4770      	bx	lr

081077ec <_ZNSt14_Function_baseD1Ev>:
	  { return true; }
      };

    _Function_base() = default;

    ~_Function_base()
 81077ec:	b580      	push	{r7, lr}
 81077ee:	b082      	sub	sp, #8
 81077f0:	af00      	add	r7, sp, #0
 81077f2:	6078      	str	r0, [r7, #4]
    {
      if (_M_manager)
 81077f4:	687b      	ldr	r3, [r7, #4]
 81077f6:	689b      	ldr	r3, [r3, #8]
 81077f8:	2b00      	cmp	r3, #0
 81077fa:	d005      	beq.n	8107808 <_ZNSt14_Function_baseD1Ev+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 81077fc:	687b      	ldr	r3, [r7, #4]
 81077fe:	689b      	ldr	r3, [r3, #8]
 8107800:	6878      	ldr	r0, [r7, #4]
 8107802:	6879      	ldr	r1, [r7, #4]
 8107804:	2203      	movs	r2, #3
 8107806:	4798      	blx	r3
    }
 8107808:	687b      	ldr	r3, [r7, #4]
 810780a:	4618      	mov	r0, r3
 810780c:	3708      	adds	r7, #8
 810780e:	46bd      	mov	sp, r7
 8107810:	bd80      	pop	{r7, pc}

08107812 <_Z24StartTask_DoIPDaemonTaskPv>:

extern QueueHandle_t queueToDoIPDaemonTask;
QueueHandle_t connectionEventsQueue = xQueueCreate(16, sizeof(SMessage));

void StartTask_DoIPDaemonTask(void *argument)
{
 8107812:	b580      	push	{r7, lr}
 8107814:	b08e      	sub	sp, #56	@ 0x38
 8107816:	af00      	add	r7, sp, #0
 8107818:	6078      	str	r0, [r7, #4]
    DoIPDaemonTask doipDaemonTask = DoIPDaemonTask();
 810781a:	f107 0308 	add.w	r3, r7, #8
 810781e:	4618      	mov	r0, r3
 8107820:	f000 f80a 	bl	8107838 <_ZN14DoIPDaemonTaskC1Ev>
    /* Infinite loop */
    for (;;) {
        doipDaemonTask.process();
 8107824:	f107 0308 	add.w	r3, r7, #8
 8107828:	4618      	mov	r0, r3
 810782a:	f000 f8e7 	bl	81079fc <_ZN14DoIPDaemonTask7processEv>
        osDelay(1);
 810782e:	2001      	movs	r0, #1
 8107830:	f00e f871 	bl	8115916 <osDelay>
        doipDaemonTask.process();
 8107834:	bf00      	nop
 8107836:	e7f5      	b.n	8107824 <_Z24StartTask_DoIPDaemonTaskPv+0x12>

08107838 <_ZN14DoIPDaemonTaskC1Ev>:
    }
}


DoIPDaemonTask::DoIPDaemonTask() : event_bus(EventBus(queueToDoIPDaemonTask, EVENT_CLIENT_ETHERNET_CONNECTION_MANAGER)), conn_mgr(CM::instance())
 8107838:	b580      	push	{r7, lr}
 810783a:	b082      	sub	sp, #8
 810783c:	af00      	add	r7, sp, #0
 810783e:	6078      	str	r0, [r7, #4]
 8107840:	687b      	ldr	r3, [r7, #4]
 8107842:	4a15      	ldr	r2, [pc, #84]	@ (8107898 <_ZN14DoIPDaemonTaskC1Ev+0x60>)
 8107844:	6811      	ldr	r1, [r2, #0]
 8107846:	2203      	movs	r2, #3
 8107848:	4618      	mov	r0, r3
 810784a:	f001 f921 	bl	8108a90 <_ZN8EventBusC1EP15QueueDefinition12EEventClient>
 810784e:	687b      	ldr	r3, [r7, #4]
 8107850:	2200      	movs	r2, #0
 8107852:	731a      	strb	r2, [r3, #12]
 8107854:	687b      	ldr	r3, [r7, #4]
 8107856:	3310      	adds	r3, #16
 8107858:	2200      	movs	r2, #0
 810785a:	601a      	str	r2, [r3, #0]
 810785c:	605a      	str	r2, [r3, #4]
 810785e:	609a      	str	r2, [r3, #8]
 8107860:	60da      	str	r2, [r3, #12]
 8107862:	687b      	ldr	r3, [r7, #4]
 8107864:	2200      	movs	r2, #0
 8107866:	f883 2020 	strb.w	r2, [r3, #32]
 810786a:	687b      	ldr	r3, [r7, #4]
 810786c:	22ff      	movs	r2, #255	@ 0xff
 810786e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
 8107872:	687b      	ldr	r3, [r7, #4]
 8107874:	22ff      	movs	r2, #255	@ 0xff
 8107876:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
 810787a:	687b      	ldr	r3, [r7, #4]
 810787c:	2200      	movs	r2, #0
 810787e:	625a      	str	r2, [r3, #36]	@ 0x24
 8107880:	f7fd fffc 	bl	810587c <_ZN17ConnectionManager8instanceEv>
 8107884:	4602      	mov	r2, r0
 8107886:	687b      	ldr	r3, [r7, #4]
 8107888:	629a      	str	r2, [r3, #40]	@ 0x28
{
    MX_LWIP_Init();
 810788a:	f003 ffe1 	bl	810b850 <MX_LWIP_Init>
}
 810788e:	687b      	ldr	r3, [r7, #4]
 8107890:	4618      	mov	r0, r3
 8107892:	3708      	adds	r7, #8
 8107894:	46bd      	mov	sp, r7
 8107896:	bd80      	pop	{r7, pc}
 8107898:	100001f0 	.word	0x100001f0

0810789c <_ZN14DoIPDaemonTask7OnEventE10EEventType12UMessageData12EEventClientS2_>:

void DoIPDaemonTask::OnEvent(EEventType event, UMessageData msg, EEventClient eventSender, [[maybe_unused]] EEventClient eventReceiver)
{
 810789c:	b082      	sub	sp, #8
 810789e:	b580      	push	{r7, lr}
 81078a0:	b084      	sub	sp, #16
 81078a2:	af00      	add	r7, sp, #0
 81078a4:	6078      	str	r0, [r7, #4]
 81078a6:	f107 0018 	add.w	r0, r7, #24
 81078aa:	e880 000c 	stmia.w	r0, {r2, r3}
 81078ae:	460b      	mov	r3, r1
 81078b0:	70fb      	strb	r3, [r7, #3]
	switch(event)
 81078b2:	78fb      	ldrb	r3, [r7, #3]
 81078b4:	3b81      	subs	r3, #129	@ 0x81
 81078b6:	2b07      	cmp	r3, #7
 81078b8:	d84c      	bhi.n	8107954 <_ZN14DoIPDaemonTask7OnEventE10EEventType12UMessageData12EEventClientS2_+0xb8>
 81078ba:	a201      	add	r2, pc, #4	@ (adr r2, 81078c0 <_ZN14DoIPDaemonTask7OnEventE10EEventType12UMessageData12EEventClientS2_+0x24>)
 81078bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81078c0:	08107903 	.word	0x08107903
 81078c4:	0810790f 	.word	0x0810790f
 81078c8:	081078e1 	.word	0x081078e1
 81078cc:	0810791b 	.word	0x0810791b
 81078d0:	0810792f 	.word	0x0810792f
 81078d4:	08107955 	.word	0x08107955
 81078d8:	08107939 	.word	0x08107939
 81078dc:	08107947 	.word	0x08107947
	{
		case EVENT_ETHERNET_PLUGGED:
        {
            CM::EConnectionEvent connEvent = msg.ethernet_plugged ? CM::EConnectionEvent::EVENT_ETHERNET_CONNECTED : CM::EConnectionEvent::EVENT_ETHERNET_DISCONNECTED;
 81078e0:	7e3b      	ldrb	r3, [r7, #24]
 81078e2:	2b00      	cmp	r3, #0
 81078e4:	d001      	beq.n	81078ea <_ZN14DoIPDaemonTask7OnEventE10EEventType12UMessageData12EEventClientS2_+0x4e>
 81078e6:	2300      	movs	r3, #0
 81078e8:	e000      	b.n	81078ec <_ZN14DoIPDaemonTask7OnEventE10EEventType12UMessageData12EEventClientS2_+0x50>
 81078ea:	2301      	movs	r3, #1
 81078ec:	73fb      	strb	r3, [r7, #15]
            xQueueSend(connectionEventsQueue, &(connEvent), static_cast<TickType_t>(10000));
 81078ee:	4b1d      	ldr	r3, [pc, #116]	@ (8107964 <_ZN14DoIPDaemonTask7OnEventE10EEventType12UMessageData12EEventClientS2_+0xc8>)
 81078f0:	6818      	ldr	r0, [r3, #0]
 81078f2:	f107 010f 	add.w	r1, r7, #15
 81078f6:	2300      	movs	r3, #0
 81078f8:	f242 7210 	movw	r2, #10000	@ 0x2710
 81078fc:	f00f fb1a 	bl	8116f34 <xQueueGenericSend>
            break;
 8107900:	e029      	b.n	8107956 <_ZN14DoIPDaemonTask7OnEventE10EEventType12UMessageData12EEventClientS2_+0xba>
        }
        case EVENT_DATA_SUBSCRIBE:
        {
            onEventDataSubscribe(msg);
 8107902:	f107 0118 	add.w	r1, r7, #24
 8107906:	6878      	ldr	r0, [r7, #4]
 8107908:	f000 fa02 	bl	8107d10 <_ZN14DoIPDaemonTask20onEventDataSubscribeERK12UMessageData>
            break;
 810790c:	e023      	b.n	8107956 <_ZN14DoIPDaemonTask7OnEventE10EEventType12UMessageData12EEventClientS2_+0xba>
        }
	    case EVENT_DATA_UNSUBSCRIBE:
        {
            onEventDataUnsubscribe(msg);
 810790e:	f107 0118 	add.w	r1, r7, #24
 8107912:	6878      	ldr	r0, [r7, #4]
 8107914:	f000 faa8 	bl	8107e68 <_ZN14DoIPDaemonTask22onEventDataUnsubscribeERK12UMessageData>
            break;
 8107918:	e01d      	b.n	8107956 <_ZN14DoIPDaemonTask7OnEventE10EEventType12UMessageData12EEventClientS2_+0xba>
        }
        case EVENT_REQUEST_CYCLE_SUSBCRIBE:
        {
            subscribed_for_cycle_time = true;
 810791a:	687b      	ldr	r3, [r7, #4]
 810791c:	2201      	movs	r2, #1
 810791e:	f883 2020 	strb.w	r2, [r3, #32]
            last_start_cycle_timestamp = xTaskGetTickCount() * (1000/configTICK_RATE_HZ);
 8107922:	f011 f8b9 	bl	8118a98 <xTaskGetTickCount>
 8107926:	4602      	mov	r2, r0
 8107928:	687b      	ldr	r3, [r7, #4]
 810792a:	625a      	str	r2, [r3, #36]	@ 0x24
            break;
 810792c:	e013      	b.n	8107956 <_ZN14DoIPDaemonTask7OnEventE10EEventType12UMessageData12EEventClientS2_+0xba>
        }
        case EVENT_REQUEST_CYCLE_UNSUSBCRIBE:
        {
            subscribed_for_cycle_time = false;
 810792e:	687b      	ldr	r3, [r7, #4]
 8107930:	2200      	movs	r2, #0
 8107932:	f883 2020 	strb.w	r2, [r3, #32]
            break;
 8107936:	e00e      	b.n	8107956 <_ZN14DoIPDaemonTask7OnEventE10EEventType12UMessageData12EEventClientS2_+0xba>
        }
        case EVENT_START_SENDING_DATA_UART:
        {
            conn_mgr.setSendingDataByUART(true);
 8107938:	687b      	ldr	r3, [r7, #4]
 810793a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810793c:	2101      	movs	r1, #1
 810793e:	4618      	mov	r0, r3
 8107940:	f7ff f893 	bl	8106a6a <_ZN17ConnectionManager20setSendingDataByUARTEb>
            break;
 8107944:	e007      	b.n	8107956 <_ZN14DoIPDaemonTask7OnEventE10EEventType12UMessageData12EEventClientS2_+0xba>
        }
        case EVENT_STOP_SENDING_DATA_UART:
        {
            conn_mgr.setSendingDataByUART(false);
 8107946:	687b      	ldr	r3, [r7, #4]
 8107948:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810794a:	2100      	movs	r1, #0
 810794c:	4618      	mov	r0, r3
 810794e:	f7ff f88c 	bl	8106a6a <_ZN17ConnectionManager20setSendingDataByUARTEb>
            break;
 8107952:	e000      	b.n	8107956 <_ZN14DoIPDaemonTask7OnEventE10EEventType12UMessageData12EEventClientS2_+0xba>
        }
		default:
			break;
 8107954:	bf00      	nop
	}
}
 8107956:	bf00      	nop
 8107958:	3710      	adds	r7, #16
 810795a:	46bd      	mov	sp, r7
 810795c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8107960:	b002      	add	sp, #8
 8107962:	4770      	bx	lr
 8107964:	10000308 	.word	0x10000308

08107968 <_ZN14DoIPDaemonTask17processConnectionEv>:

void DoIPDaemonTask::processConnection()
{
 8107968:	b580      	push	{r7, lr}
 810796a:	b082      	sub	sp, #8
 810796c:	af00      	add	r7, sp, #0
 810796e:	6078      	str	r0, [r7, #4]
    switch(current_connection_state)
 8107970:	687b      	ldr	r3, [r7, #4]
 8107972:	7b1b      	ldrb	r3, [r3, #12]
 8107974:	2b01      	cmp	r3, #1
 8107976:	d105      	bne.n	8107984 <_ZN14DoIPDaemonTask17processConnectionEv+0x1c>
    {
        case STATE_SERVICE_DISCOVERY:
        {
            conn_mgr.processUdpDicovery();
 8107978:	687b      	ldr	r3, [r7, #4]
 810797a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810797c:	4618      	mov	r0, r3
 810797e:	f7ff f85f 	bl	8106a40 <_ZN17ConnectionManager18processUdpDicoveryEv>
            break;
 8107982:	e000      	b.n	8107986 <_ZN14DoIPDaemonTask17processConnectionEv+0x1e>
        }
        default:
        {
            // do not do anything, wait for events
            break;
 8107984:	bf00      	nop
        }

    }
}
 8107986:	bf00      	nop
 8107988:	3708      	adds	r7, #8
 810798a:	46bd      	mov	sp, r7
 810798c:	bd80      	pop	{r7, pc}

0810798e <_ZZN14DoIPDaemonTask7processEvENKUl10EEventType12UMessageData12EEventClientS2_E_clES0_S1_S2_S2_>:

void DoIPDaemonTask::process()
{
	event_bus.receive([this](EEventType event, UMessageData msg, EEventClient eventSender, EEventClient eventReceiver){this->OnEvent(event, msg, eventSender, eventReceiver);});
 810798e:	b082      	sub	sp, #8
 8107990:	b5f0      	push	{r4, r5, r6, r7, lr}
 8107992:	b089      	sub	sp, #36	@ 0x24
 8107994:	af06      	add	r7, sp, #24
 8107996:	6078      	str	r0, [r7, #4]
 8107998:	f107 0020 	add.w	r0, r7, #32
 810799c:	e880 000c 	stmia.w	r0, {r2, r3}
 81079a0:	460b      	mov	r3, r1
 81079a2:	70fb      	strb	r3, [r7, #3]
 81079a4:	687b      	ldr	r3, [r7, #4]
 81079a6:	681d      	ldr	r5, [r3, #0]
 81079a8:	78fe      	ldrb	r6, [r7, #3]
 81079aa:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 81079ae:	9304      	str	r3, [sp, #16]
 81079b0:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 81079b4:	9303      	str	r3, [sp, #12]
 81079b6:	466c      	mov	r4, sp
 81079b8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 81079bc:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 81079c0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 81079c4:	f107 0320 	add.w	r3, r7, #32
 81079c8:	cb0c      	ldmia	r3, {r2, r3}
 81079ca:	4631      	mov	r1, r6
 81079cc:	4628      	mov	r0, r5
 81079ce:	f7ff ff65 	bl	810789c <_ZN14DoIPDaemonTask7OnEventE10EEventType12UMessageData12EEventClientS2_>
 81079d2:	bf00      	nop
 81079d4:	370c      	adds	r7, #12
 81079d6:	46bd      	mov	sp, r7
 81079d8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 81079dc:	b002      	add	sp, #8
 81079de:	4770      	bx	lr

081079e0 <_ZNSt8functionIFv10EEventType12UMessageData12EEventClientS2_EED1Ev>:
   *  @brief Polymorphic function wrapper.
   *  @ingroup functors
   *  @since C++11
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 81079e0:	b580      	push	{r7, lr}
 81079e2:	b082      	sub	sp, #8
 81079e4:	af00      	add	r7, sp, #0
 81079e6:	6078      	str	r0, [r7, #4]
 81079e8:	687b      	ldr	r3, [r7, #4]
 81079ea:	4618      	mov	r0, r3
 81079ec:	f7ff fefe 	bl	81077ec <_ZNSt14_Function_baseD1Ev>
 81079f0:	687b      	ldr	r3, [r7, #4]
 81079f2:	4618      	mov	r0, r3
 81079f4:	3708      	adds	r7, #8
 81079f6:	46bd      	mov	sp, r7
 81079f8:	bd80      	pop	{r7, pc}
	...

081079fc <_ZN14DoIPDaemonTask7processEv>:
{
 81079fc:	b590      	push	{r4, r7, lr}
 81079fe:	b08b      	sub	sp, #44	@ 0x2c
 8107a00:	af00      	add	r7, sp, #0
 8107a02:	6078      	str	r0, [r7, #4]
	event_bus.receive([this](EEventType event, UMessageData msg, EEventClient eventSender, EEventClient eventReceiver){this->OnEvent(event, msg, eventSender, eventReceiver);});
 8107a04:	687c      	ldr	r4, [r7, #4]
 8107a06:	687b      	ldr	r3, [r7, #4]
 8107a08:	61fb      	str	r3, [r7, #28]
 8107a0a:	f107 021c 	add.w	r2, r7, #28
 8107a0e:	f107 030c 	add.w	r3, r7, #12
 8107a12:	4611      	mov	r1, r2
 8107a14:	4618      	mov	r0, r3
 8107a16:	f000 fb7f 	bl	8108118 <_ZNSt8functionIFv10EEventType12UMessageData12EEventClientS2_EEC1IZN14DoIPDaemonTask7processEvEUlS0_S1_S2_S2_E_vEEOT_>
 8107a1a:	f107 030c 	add.w	r3, r7, #12
 8107a1e:	4619      	mov	r1, r3
 8107a20:	4620      	mov	r0, r4
 8107a22:	f001 f888 	bl	8108b36 <_ZN8EventBus7receiveESt8functionIFv10EEventType12UMessageData12EEventClientS3_EE>
 8107a26:	f107 030c 	add.w	r3, r7, #12
 8107a2a:	4618      	mov	r0, r3
 8107a2c:	f7ff ffd8 	bl	81079e0 <_ZNSt8functionIFv10EEventType12UMessageData12EEventClientS2_EED1Ev>
    processConnection();
 8107a30:	6878      	ldr	r0, [r7, #4]
 8107a32:	f7ff ff99 	bl	8107968 <_ZN14DoIPDaemonTask17processConnectionEv>
    
    EConnectionState newState;
    CM::EConnectionEvent connEvent;
    BaseType_t received = pdTRUE;
 8107a36:	2301      	movs	r3, #1
 8107a38:	627b      	str	r3, [r7, #36]	@ 0x24

	do
	{
		received = xQueueReceive(connectionEventsQueue, &(connEvent), static_cast<TickType_t>(0));
 8107a3a:	4b14      	ldr	r3, [pc, #80]	@ (8107a8c <_ZN14DoIPDaemonTask7processEv+0x90>)
 8107a3c:	681b      	ldr	r3, [r3, #0]
 8107a3e:	f107 010b 	add.w	r1, r7, #11
 8107a42:	2200      	movs	r2, #0
 8107a44:	4618      	mov	r0, r3
 8107a46:	f00f fca5 	bl	8117394 <xQueueReceive>
 8107a4a:	6278      	str	r0, [r7, #36]	@ 0x24
		if(received == pdTRUE)
 8107a4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8107a4e:	2b01      	cmp	r3, #1
 8107a50:	d114      	bne.n	8107a7c <_ZN14DoIPDaemonTask7processEv+0x80>
		{
			newState = onConnectionEvent(connEvent);
 8107a52:	7afb      	ldrb	r3, [r7, #11]
 8107a54:	4619      	mov	r1, r3
 8107a56:	6878      	ldr	r0, [r7, #4]
 8107a58:	f000 f81a 	bl	8107a90 <_ZN14DoIPDaemonTask17onConnectionEventEN17ConnectionManager16EConnectionEventE>
 8107a5c:	4603      	mov	r3, r0
 8107a5e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
            if(newState != current_connection_state)
 8107a62:	687b      	ldr	r3, [r7, #4]
 8107a64:	7b1b      	ldrb	r3, [r3, #12]
 8107a66:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8107a6a:	429a      	cmp	r2, r3
 8107a6c:	d006      	beq.n	8107a7c <_ZN14DoIPDaemonTask7processEv+0x80>
            {
                // transtition happened
                current_connection_state = newState;
 8107a6e:	687b      	ldr	r3, [r7, #4]
 8107a70:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8107a74:	731a      	strb	r2, [r3, #12]
                // Process again so that after every onEvent the processing state code is called at least once.
                // The chance of this happening is minimal, but not zero. 
                processConnection();
 8107a76:	6878      	ldr	r0, [r7, #4]
 8107a78:	f7ff ff76 	bl	8107968 <_ZN14DoIPDaemonTask17processConnectionEv>
            }
		}
	} while(received == pdTRUE);
 8107a7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8107a7e:	2b01      	cmp	r3, #1
 8107a80:	d0db      	beq.n	8107a3a <_ZN14DoIPDaemonTask7processEv+0x3e>
}
 8107a82:	bf00      	nop
 8107a84:	bf00      	nop
 8107a86:	372c      	adds	r7, #44	@ 0x2c
 8107a88:	46bd      	mov	sp, r7
 8107a8a:	bd90      	pop	{r4, r7, pc}
 8107a8c:	10000308 	.word	0x10000308

08107a90 <_ZN14DoIPDaemonTask17onConnectionEventEN17ConnectionManager16EConnectionEventE>:

DoIPDaemonTask::EConnectionState DoIPDaemonTask::onConnectionEvent(CM::EConnectionEvent event)
{
 8107a90:	b580      	push	{r7, lr}
 8107a92:	b082      	sub	sp, #8
 8107a94:	af00      	add	r7, sp, #0
 8107a96:	6078      	str	r0, [r7, #4]
 8107a98:	460b      	mov	r3, r1
 8107a9a:	70fb      	strb	r3, [r7, #3]
    switch(current_connection_state)
 8107a9c:	687b      	ldr	r3, [r7, #4]
 8107a9e:	7b1b      	ldrb	r3, [r3, #12]
 8107aa0:	2b04      	cmp	r3, #4
 8107aa2:	d830      	bhi.n	8107b06 <_ZN14DoIPDaemonTask17onConnectionEventEN17ConnectionManager16EConnectionEventE+0x76>
 8107aa4:	a201      	add	r2, pc, #4	@ (adr r2, 8107aac <_ZN14DoIPDaemonTask17onConnectionEventEN17ConnectionManager16EConnectionEventE+0x1c>)
 8107aa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8107aaa:	bf00      	nop
 8107aac:	08107ac1 	.word	0x08107ac1
 8107ab0:	08107acf 	.word	0x08107acf
 8107ab4:	08107add 	.word	0x08107add
 8107ab8:	08107aeb 	.word	0x08107aeb
 8107abc:	08107af9 	.word	0x08107af9
    {
        case STATE_ETHERNET_DISCONNECTED:
        {
            return onEventEthDisconnected(event);
 8107ac0:	78fb      	ldrb	r3, [r7, #3]
 8107ac2:	4619      	mov	r1, r3
 8107ac4:	6878      	ldr	r0, [r7, #4]
 8107ac6:	f000 f825 	bl	8107b14 <_ZN14DoIPDaemonTask22onEventEthDisconnectedEN17ConnectionManager16EConnectionEventE>
 8107aca:	4603      	mov	r3, r0
 8107acc:	e01d      	b.n	8107b0a <_ZN14DoIPDaemonTask17onConnectionEventEN17ConnectionManager16EConnectionEventE+0x7a>
        }
        case STATE_SERVICE_DISCOVERY:
        {
            return onEventDiscovery(event);
 8107ace:	78fb      	ldrb	r3, [r7, #3]
 8107ad0:	4619      	mov	r1, r3
 8107ad2:	6878      	ldr	r0, [r7, #4]
 8107ad4:	f000 f834 	bl	8107b40 <_ZN14DoIPDaemonTask16onEventDiscoveryEN17ConnectionManager16EConnectionEventE>
 8107ad8:	4603      	mov	r3, r0
 8107ada:	e016      	b.n	8107b0a <_ZN14DoIPDaemonTask17onConnectionEventEN17ConnectionManager16EConnectionEventE+0x7a>
        }
        case STATE_CONNECTING_TCP:
        {
            return onEventConnectingTCP(event);
 8107adc:	78fb      	ldrb	r3, [r7, #3]
 8107ade:	4619      	mov	r1, r3
 8107ae0:	6878      	ldr	r0, [r7, #4]
 8107ae2:	f000 f853 	bl	8107b8c <_ZN14DoIPDaemonTask20onEventConnectingTCPEN17ConnectionManager16EConnectionEventE>
 8107ae6:	4603      	mov	r3, r0
 8107ae8:	e00f      	b.n	8107b0a <_ZN14DoIPDaemonTask17onConnectionEventEN17ConnectionManager16EConnectionEventE+0x7a>
        }
        case STATE_CONNECTED_ECU:
        {
            return onEventConnectedECUDefault(event);
 8107aea:	78fb      	ldrb	r3, [r7, #3]
 8107aec:	4619      	mov	r1, r3
 8107aee:	6878      	ldr	r0, [r7, #4]
 8107af0:	f000 f88e 	bl	8107c10 <_ZN14DoIPDaemonTask26onEventConnectedECUDefaultEN17ConnectionManager16EConnectionEventE>
 8107af4:	4603      	mov	r3, r0
 8107af6:	e008      	b.n	8107b0a <_ZN14DoIPDaemonTask17onConnectionEventEN17ConnectionManager16EConnectionEventE+0x7a>
        }
        case STATE_WAITING_FOR_DATA_FROM_ECU:
        {
            return onEventWaitingForDataFromECU(event);
 8107af8:	78fb      	ldrb	r3, [r7, #3]
 8107afa:	4619      	mov	r1, r3
 8107afc:	6878      	ldr	r0, [r7, #4]
 8107afe:	f000 f8c1 	bl	8107c84 <_ZN14DoIPDaemonTask28onEventWaitingForDataFromECUEN17ConnectionManager16EConnectionEventE>
 8107b02:	4603      	mov	r3, r0
 8107b04:	e001      	b.n	8107b0a <_ZN14DoIPDaemonTask17onConnectionEventEN17ConnectionManager16EConnectionEventE+0x7a>
        }
        default:
        {
            return current_connection_state;
 8107b06:	687b      	ldr	r3, [r7, #4]
 8107b08:	7b1b      	ldrb	r3, [r3, #12]
        }
    }
}
 8107b0a:	4618      	mov	r0, r3
 8107b0c:	3708      	adds	r7, #8
 8107b0e:	46bd      	mov	sp, r7
 8107b10:	bd80      	pop	{r7, pc}
 8107b12:	bf00      	nop

08107b14 <_ZN14DoIPDaemonTask22onEventEthDisconnectedEN17ConnectionManager16EConnectionEventE>:

DoIPDaemonTask::EConnectionState DoIPDaemonTask::onEventEthDisconnected(CM::EConnectionEvent event)
{
 8107b14:	b580      	push	{r7, lr}
 8107b16:	b082      	sub	sp, #8
 8107b18:	af00      	add	r7, sp, #0
 8107b1a:	6078      	str	r0, [r7, #4]
 8107b1c:	460b      	mov	r3, r1
 8107b1e:	70fb      	strb	r3, [r7, #3]
    switch(event)
 8107b20:	78fb      	ldrb	r3, [r7, #3]
 8107b22:	2b00      	cmp	r3, #0
 8107b24:	d106      	bne.n	8107b34 <_ZN14DoIPDaemonTask22onEventEthDisconnectedEN17ConnectionManager16EConnectionEventE+0x20>
    {
        case CM::EConnectionEvent::EVENT_ETHERNET_CONNECTED:
        {
            conn_mgr.udpConnect();
 8107b26:	687b      	ldr	r3, [r7, #4]
 8107b28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8107b2a:	4618      	mov	r0, r3
 8107b2c:	f7fe fa56 	bl	8105fdc <_ZN17ConnectionManager10udpConnectEv>
            return STATE_SERVICE_DISCOVERY;
 8107b30:	2301      	movs	r3, #1
 8107b32:	e001      	b.n	8107b38 <_ZN14DoIPDaemonTask22onEventEthDisconnectedEN17ConnectionManager16EConnectionEventE+0x24>
        }
        default:
        {
            //no transition
            return current_connection_state;
 8107b34:	687b      	ldr	r3, [r7, #4]
 8107b36:	7b1b      	ldrb	r3, [r3, #12]
        }
    }
}
 8107b38:	4618      	mov	r0, r3
 8107b3a:	3708      	adds	r7, #8
 8107b3c:	46bd      	mov	sp, r7
 8107b3e:	bd80      	pop	{r7, pc}

08107b40 <_ZN14DoIPDaemonTask16onEventDiscoveryEN17ConnectionManager16EConnectionEventE>:

DoIPDaemonTask::EConnectionState DoIPDaemonTask::onEventDiscovery(CM::EConnectionEvent event)
{
 8107b40:	b580      	push	{r7, lr}
 8107b42:	b082      	sub	sp, #8
 8107b44:	af00      	add	r7, sp, #0
 8107b46:	6078      	str	r0, [r7, #4]
 8107b48:	460b      	mov	r3, r1
 8107b4a:	70fb      	strb	r3, [r7, #3]
    switch(event)
 8107b4c:	78fb      	ldrb	r3, [r7, #3]
 8107b4e:	2b01      	cmp	r3, #1
 8107b50:	d002      	beq.n	8107b58 <_ZN14DoIPDaemonTask16onEventDiscoveryEN17ConnectionManager16EConnectionEventE+0x18>
 8107b52:	2b02      	cmp	r3, #2
 8107b54:	d007      	beq.n	8107b66 <_ZN14DoIPDaemonTask16onEventDiscoveryEN17ConnectionManager16EConnectionEventE+0x26>
 8107b56:	e012      	b.n	8107b7e <_ZN14DoIPDaemonTask16onEventDiscoveryEN17ConnectionManager16EConnectionEventE+0x3e>
    {
        case CM::EConnectionEvent::EVENT_ETHERNET_DISCONNECTED:
        {
            conn_mgr.udpDisconnect();
 8107b58:	687b      	ldr	r3, [r7, #4]
 8107b5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8107b5c:	4618      	mov	r0, r3
 8107b5e:	f7fe fa6b 	bl	8106038 <_ZN17ConnectionManager13udpDisconnectEv>
            return STATE_ETHERNET_DISCONNECTED;
 8107b62:	2300      	movs	r3, #0
 8107b64:	e00d      	b.n	8107b82 <_ZN14DoIPDaemonTask16onEventDiscoveryEN17ConnectionManager16EConnectionEventE+0x42>
        }
        case CM::EConnectionEvent::EVENT_DISCOVERY_COMPLETED:
        {
            conn_mgr.udpDisconnect();
 8107b66:	687b      	ldr	r3, [r7, #4]
 8107b68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8107b6a:	4618      	mov	r0, r3
 8107b6c:	f7fe fa64 	bl	8106038 <_ZN17ConnectionManager13udpDisconnectEv>
            conn_mgr.tcpConnect();
 8107b70:	687b      	ldr	r3, [r7, #4]
 8107b72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8107b74:	4618      	mov	r0, r3
 8107b76:	f7fe fa8d 	bl	8106094 <_ZN17ConnectionManager10tcpConnectEv>
            return STATE_CONNECTING_TCP;
 8107b7a:	2302      	movs	r3, #2
 8107b7c:	e001      	b.n	8107b82 <_ZN14DoIPDaemonTask16onEventDiscoveryEN17ConnectionManager16EConnectionEventE+0x42>
        }
        default:
        {
            //no transition
            return current_connection_state;
 8107b7e:	687b      	ldr	r3, [r7, #4]
 8107b80:	7b1b      	ldrb	r3, [r3, #12]
        }
    }
}
 8107b82:	4618      	mov	r0, r3
 8107b84:	3708      	adds	r7, #8
 8107b86:	46bd      	mov	sp, r7
 8107b88:	bd80      	pop	{r7, pc}
	...

08107b8c <_ZN14DoIPDaemonTask20onEventConnectingTCPEN17ConnectionManager16EConnectionEventE>:

DoIPDaemonTask::EConnectionState DoIPDaemonTask::onEventConnectingTCP(CM::EConnectionEvent event)
{
 8107b8c:	b580      	push	{r7, lr}
 8107b8e:	b084      	sub	sp, #16
 8107b90:	af00      	add	r7, sp, #0
 8107b92:	6078      	str	r0, [r7, #4]
 8107b94:	460b      	mov	r3, r1
 8107b96:	70fb      	strb	r3, [r7, #3]
    switch(event)
 8107b98:	78fb      	ldrb	r3, [r7, #3]
 8107b9a:	2b04      	cmp	r3, #4
 8107b9c:	d00d      	beq.n	8107bba <_ZN14DoIPDaemonTask20onEventConnectingTCPEN17ConnectionManager16EConnectionEventE+0x2e>
 8107b9e:	2b04      	cmp	r3, #4
 8107ba0:	dc2e      	bgt.n	8107c00 <_ZN14DoIPDaemonTask20onEventConnectingTCPEN17ConnectionManager16EConnectionEventE+0x74>
 8107ba2:	2b01      	cmp	r3, #1
 8107ba4:	d002      	beq.n	8107bac <_ZN14DoIPDaemonTask20onEventConnectingTCPEN17ConnectionManager16EConnectionEventE+0x20>
 8107ba6:	2b03      	cmp	r3, #3
 8107ba8:	d013      	beq.n	8107bd2 <_ZN14DoIPDaemonTask20onEventConnectingTCPEN17ConnectionManager16EConnectionEventE+0x46>
 8107baa:	e029      	b.n	8107c00 <_ZN14DoIPDaemonTask20onEventConnectingTCPEN17ConnectionManager16EConnectionEventE+0x74>
    {
        case CM::EConnectionEvent::EVENT_ETHERNET_DISCONNECTED:
        {
            conn_mgr.tcpDisconnect();
 8107bac:	687b      	ldr	r3, [r7, #4]
 8107bae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8107bb0:	4618      	mov	r0, r3
 8107bb2:	f7fe faf9 	bl	81061a8 <_ZN17ConnectionManager13tcpDisconnectEv>
            return STATE_ETHERNET_DISCONNECTED;
 8107bb6:	2300      	movs	r3, #0
 8107bb8:	e024      	b.n	8107c04 <_ZN14DoIPDaemonTask20onEventConnectingTCPEN17ConnectionManager16EConnectionEventE+0x78>
        }
        case CM::EConnectionEvent::EVENT_TCP_CONNECTION_FAILED:
        {
            conn_mgr.tcpDisconnect();
 8107bba:	687b      	ldr	r3, [r7, #4]
 8107bbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8107bbe:	4618      	mov	r0, r3
 8107bc0:	f7fe faf2 	bl	81061a8 <_ZN17ConnectionManager13tcpDisconnectEv>
            conn_mgr.udpConnect();
 8107bc4:	687b      	ldr	r3, [r7, #4]
 8107bc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8107bc8:	4618      	mov	r0, r3
 8107bca:	f7fe fa07 	bl	8105fdc <_ZN17ConnectionManager10udpConnectEv>
            return STATE_SERVICE_DISCOVERY;
 8107bce:	2301      	movs	r3, #1
 8107bd0:	e018      	b.n	8107c04 <_ZN14DoIPDaemonTask20onEventConnectingTCPEN17ConnectionManager16EConnectionEventE+0x78>
        }
        case CM::EConnectionEvent::EVENT_TCP_CONNECTED:
        {
        	if((subscribed_data[0] != 0ULL) || (subscribed_data[1] != 0ULL))
 8107bd2:	687b      	ldr	r3, [r7, #4]
 8107bd4:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8107bd8:	4313      	orrs	r3, r2
 8107bda:	d104      	bne.n	8107be6 <_ZN14DoIPDaemonTask20onEventConnectingTCPEN17ConnectionManager16EConnectionEventE+0x5a>
 8107bdc:	687b      	ldr	r3, [r7, #4]
 8107bde:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8107be2:	4313      	orrs	r3, r2
 8107be4:	d00a      	beq.n	8107bfc <_ZN14DoIPDaemonTask20onEventConnectingTCPEN17ConnectionManager16EConnectionEventE+0x70>
        	{
        		CM::EConnectionEvent connEvent = CM::EConnectionEvent::EVENT_DATA_REQUESTED;
 8107be6:	2306      	movs	r3, #6
 8107be8:	73fb      	strb	r3, [r7, #15]
        		xQueueSend(connectionEventsQueue, &(connEvent), static_cast<TickType_t>(10000));
 8107bea:	4b08      	ldr	r3, [pc, #32]	@ (8107c0c <_ZN14DoIPDaemonTask20onEventConnectingTCPEN17ConnectionManager16EConnectionEventE+0x80>)
 8107bec:	6818      	ldr	r0, [r3, #0]
 8107bee:	f107 010f 	add.w	r1, r7, #15
 8107bf2:	2300      	movs	r3, #0
 8107bf4:	f242 7210 	movw	r2, #10000	@ 0x2710
 8107bf8:	f00f f99c 	bl	8116f34 <xQueueGenericSend>
        	}
            return STATE_CONNECTED_ECU;
 8107bfc:	2303      	movs	r3, #3
 8107bfe:	e001      	b.n	8107c04 <_ZN14DoIPDaemonTask20onEventConnectingTCPEN17ConnectionManager16EConnectionEventE+0x78>
        }
        default:
        {
            //no transition
            return current_connection_state;
 8107c00:	687b      	ldr	r3, [r7, #4]
 8107c02:	7b1b      	ldrb	r3, [r3, #12]
        }
    }
}
 8107c04:	4618      	mov	r0, r3
 8107c06:	3710      	adds	r7, #16
 8107c08:	46bd      	mov	sp, r7
 8107c0a:	bd80      	pop	{r7, pc}
 8107c0c:	10000308 	.word	0x10000308

08107c10 <_ZN14DoIPDaemonTask26onEventConnectedECUDefaultEN17ConnectionManager16EConnectionEventE>:

DoIPDaemonTask::EConnectionState DoIPDaemonTask::onEventConnectedECUDefault(CM::EConnectionEvent event)
{
 8107c10:	b580      	push	{r7, lr}
 8107c12:	b082      	sub	sp, #8
 8107c14:	af00      	add	r7, sp, #0
 8107c16:	6078      	str	r0, [r7, #4]
 8107c18:	460b      	mov	r3, r1
 8107c1a:	70fb      	strb	r3, [r7, #3]
    switch(event)
 8107c1c:	78fb      	ldrb	r3, [r7, #3]
 8107c1e:	2b06      	cmp	r3, #6
 8107c20:	d019      	beq.n	8107c56 <_ZN14DoIPDaemonTask26onEventConnectedECUDefaultEN17ConnectionManager16EConnectionEventE+0x46>
 8107c22:	2b06      	cmp	r3, #6
 8107c24:	dc28      	bgt.n	8107c78 <_ZN14DoIPDaemonTask26onEventConnectedECUDefaultEN17ConnectionManager16EConnectionEventE+0x68>
 8107c26:	2b01      	cmp	r3, #1
 8107c28:	d002      	beq.n	8107c30 <_ZN14DoIPDaemonTask26onEventConnectedECUDefaultEN17ConnectionManager16EConnectionEventE+0x20>
 8107c2a:	2b04      	cmp	r3, #4
 8107c2c:	d007      	beq.n	8107c3e <_ZN14DoIPDaemonTask26onEventConnectedECUDefaultEN17ConnectionManager16EConnectionEventE+0x2e>
 8107c2e:	e023      	b.n	8107c78 <_ZN14DoIPDaemonTask26onEventConnectedECUDefaultEN17ConnectionManager16EConnectionEventE+0x68>
    {
		case CM::EConnectionEvent::EVENT_ETHERNET_DISCONNECTED:
		{
			conn_mgr.tcpDisconnect();
 8107c30:	687b      	ldr	r3, [r7, #4]
 8107c32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8107c34:	4618      	mov	r0, r3
 8107c36:	f7fe fab7 	bl	81061a8 <_ZN17ConnectionManager13tcpDisconnectEv>
			return STATE_ETHERNET_DISCONNECTED;
 8107c3a:	2300      	movs	r3, #0
 8107c3c:	e01e      	b.n	8107c7c <_ZN14DoIPDaemonTask26onEventConnectedECUDefaultEN17ConnectionManager16EConnectionEventE+0x6c>
		}
        case CM::EConnectionEvent::EVENT_TCP_CONNECTION_FAILED:
        {
            conn_mgr.tcpDisconnect();
 8107c3e:	687b      	ldr	r3, [r7, #4]
 8107c40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8107c42:	4618      	mov	r0, r3
 8107c44:	f7fe fab0 	bl	81061a8 <_ZN17ConnectionManager13tcpDisconnectEv>
            conn_mgr.udpConnect();
 8107c48:	687b      	ldr	r3, [r7, #4]
 8107c4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8107c4c:	4618      	mov	r0, r3
 8107c4e:	f7fe f9c5 	bl	8105fdc <_ZN17ConnectionManager10udpConnectEv>
            return STATE_SERVICE_DISCOVERY;
 8107c52:	2301      	movs	r3, #1
 8107c54:	e012      	b.n	8107c7c <_ZN14DoIPDaemonTask26onEventConnectedECUDefaultEN17ConnectionManager16EConnectionEventE+0x6c>
        }
        case CM::EConnectionEvent::EVENT_DATA_REQUESTED:
        {
            if(subscribed_data[0] == 0ULL && subscribed_data[1] == 0ULL)
 8107c56:	687b      	ldr	r3, [r7, #4]
 8107c58:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8107c5c:	4313      	orrs	r3, r2
 8107c5e:	d106      	bne.n	8107c6e <_ZN14DoIPDaemonTask26onEventConnectedECUDefaultEN17ConnectionManager16EConnectionEventE+0x5e>
 8107c60:	687b      	ldr	r3, [r7, #4]
 8107c62:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8107c66:	4313      	orrs	r3, r2
 8107c68:	d101      	bne.n	8107c6e <_ZN14DoIPDaemonTask26onEventConnectedECUDefaultEN17ConnectionManager16EConnectionEventE+0x5e>
            {
                return STATE_CONNECTED_ECU;
 8107c6a:	2303      	movs	r3, #3
 8107c6c:	e006      	b.n	8107c7c <_ZN14DoIPDaemonTask26onEventConnectedECUDefaultEN17ConnectionManager16EConnectionEventE+0x6c>
            }
            else
            {
                sendNextRequest();
 8107c6e:	6878      	ldr	r0, [r7, #4]
 8107c70:	f000 f996 	bl	8107fa0 <_ZN14DoIPDaemonTask15sendNextRequestEv>
            }
            return STATE_WAITING_FOR_DATA_FROM_ECU;
 8107c74:	2304      	movs	r3, #4
 8107c76:	e001      	b.n	8107c7c <_ZN14DoIPDaemonTask26onEventConnectedECUDefaultEN17ConnectionManager16EConnectionEventE+0x6c>
        }
        default:
        {
            //no transition
            return current_connection_state;
 8107c78:	687b      	ldr	r3, [r7, #4]
 8107c7a:	7b1b      	ldrb	r3, [r3, #12]
        }
    }
}
 8107c7c:	4618      	mov	r0, r3
 8107c7e:	3708      	adds	r7, #8
 8107c80:	46bd      	mov	sp, r7
 8107c82:	bd80      	pop	{r7, pc}

08107c84 <_ZN14DoIPDaemonTask28onEventWaitingForDataFromECUEN17ConnectionManager16EConnectionEventE>:

DoIPDaemonTask::EConnectionState DoIPDaemonTask::onEventWaitingForDataFromECU(CM::EConnectionEvent event)
{
 8107c84:	b580      	push	{r7, lr}
 8107c86:	b082      	sub	sp, #8
 8107c88:	af00      	add	r7, sp, #0
 8107c8a:	6078      	str	r0, [r7, #4]
 8107c8c:	460b      	mov	r3, r1
 8107c8e:	70fb      	strb	r3, [r7, #3]
    switch(event)
 8107c90:	78fb      	ldrb	r3, [r7, #3]
 8107c92:	3b01      	subs	r3, #1
 8107c94:	2b07      	cmp	r3, #7
 8107c96:	d834      	bhi.n	8107d02 <_ZN14DoIPDaemonTask28onEventWaitingForDataFromECUEN17ConnectionManager16EConnectionEventE+0x7e>
 8107c98:	a201      	add	r2, pc, #4	@ (adr r2, 8107ca0 <_ZN14DoIPDaemonTask28onEventWaitingForDataFromECUEN17ConnectionManager16EConnectionEventE+0x1c>)
 8107c9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8107c9e:	bf00      	nop
 8107ca0:	08107cc1 	.word	0x08107cc1
 8107ca4:	08107d03 	.word	0x08107d03
 8107ca8:	08107d03 	.word	0x08107d03
 8107cac:	08107cc5 	.word	0x08107cc5
 8107cb0:	08107d03 	.word	0x08107d03
 8107cb4:	08107d03 	.word	0x08107d03
 8107cb8:	08107cff 	.word	0x08107cff
 8107cbc:	08107cdd 	.word	0x08107cdd
    {
        case CM::EConnectionEvent::EVENT_ETHERNET_DISCONNECTED:
        {
            return STATE_ETHERNET_DISCONNECTED;
 8107cc0:	2300      	movs	r3, #0
 8107cc2:	e020      	b.n	8107d06 <_ZN14DoIPDaemonTask28onEventWaitingForDataFromECUEN17ConnectionManager16EConnectionEventE+0x82>
        }
        case CM::EConnectionEvent::EVENT_TCP_CONNECTION_FAILED:
        {
            conn_mgr.tcpDisconnect();
 8107cc4:	687b      	ldr	r3, [r7, #4]
 8107cc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8107cc8:	4618      	mov	r0, r3
 8107cca:	f7fe fa6d 	bl	81061a8 <_ZN17ConnectionManager13tcpDisconnectEv>
            conn_mgr.udpConnect();
 8107cce:	687b      	ldr	r3, [r7, #4]
 8107cd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8107cd2:	4618      	mov	r0, r3
 8107cd4:	f7fe f982 	bl	8105fdc <_ZN17ConnectionManager10udpConnectEv>
            return STATE_SERVICE_DISCOVERY;
 8107cd8:	2301      	movs	r3, #1
 8107cda:	e014      	b.n	8107d06 <_ZN14DoIPDaemonTask28onEventWaitingForDataFromECUEN17ConnectionManager16EConnectionEventE+0x82>
        }
        case CM::EConnectionEvent::EVENT_TCP_READ_DATA_BY_ID_RECEIVED:
        {
            if(subscribed_data[0] == 0ULL && subscribed_data[1] == 0ULL)
 8107cdc:	687b      	ldr	r3, [r7, #4]
 8107cde:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8107ce2:	4313      	orrs	r3, r2
 8107ce4:	d106      	bne.n	8107cf4 <_ZN14DoIPDaemonTask28onEventWaitingForDataFromECUEN17ConnectionManager16EConnectionEventE+0x70>
 8107ce6:	687b      	ldr	r3, [r7, #4]
 8107ce8:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8107cec:	4313      	orrs	r3, r2
 8107cee:	d101      	bne.n	8107cf4 <_ZN14DoIPDaemonTask28onEventWaitingForDataFromECUEN17ConnectionManager16EConnectionEventE+0x70>
            {
                return STATE_CONNECTED_ECU;
 8107cf0:	2303      	movs	r3, #3
 8107cf2:	e008      	b.n	8107d06 <_ZN14DoIPDaemonTask28onEventWaitingForDataFromECUEN17ConnectionManager16EConnectionEventE+0x82>
            }
            else
            {
                sendNextRequest();
 8107cf4:	6878      	ldr	r0, [r7, #4]
 8107cf6:	f000 f953 	bl	8107fa0 <_ZN14DoIPDaemonTask15sendNextRequestEv>
            }
            return STATE_WAITING_FOR_DATA_FROM_ECU;
 8107cfa:	2304      	movs	r3, #4
 8107cfc:	e003      	b.n	8107d06 <_ZN14DoIPDaemonTask28onEventWaitingForDataFromECUEN17ConnectionManager16EConnectionEventE+0x82>
        }
        case CM::EConnectionEvent::EVENT_NO_DATA_TO_REQUEST:
        {
            return STATE_CONNECTED_ECU;
 8107cfe:	2303      	movs	r3, #3
 8107d00:	e001      	b.n	8107d06 <_ZN14DoIPDaemonTask28onEventWaitingForDataFromECUEN17ConnectionManager16EConnectionEventE+0x82>
        }
        default:
        {
            //no transition
            return current_connection_state;
 8107d02:	687b      	ldr	r3, [r7, #4]
 8107d04:	7b1b      	ldrb	r3, [r3, #12]
        }
    }   
}
 8107d06:	4618      	mov	r0, r3
 8107d08:	3708      	adds	r7, #8
 8107d0a:	46bd      	mov	sp, r7
 8107d0c:	bd80      	pop	{r7, pc}
 8107d0e:	bf00      	nop

08107d10 <_ZN14DoIPDaemonTask20onEventDataSubscribeERK12UMessageData>:

void DoIPDaemonTask::onEventDataSubscribe(const UMessageData& data)
{
 8107d10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8107d14:	b089      	sub	sp, #36	@ 0x24
 8107d16:	af00      	add	r7, sp, #0
 8107d18:	6178      	str	r0, [r7, #20]
 8107d1a:	6139      	str	r1, [r7, #16]
    for(int i = 1; i <= data.event_subscriptions[0]; i++)
 8107d1c:	2301      	movs	r3, #1
 8107d1e:	61fb      	str	r3, [r7, #28]
 8107d20:	e088      	b.n	8107e34 <_ZN14DoIPDaemonTask20onEventDataSubscribeERK12UMessageData+0x124>
    {
        if(data.event_subscriptions[i] > 63)
 8107d22:	693a      	ldr	r2, [r7, #16]
 8107d24:	69fb      	ldr	r3, [r7, #28]
 8107d26:	4413      	add	r3, r2
 8107d28:	781b      	ldrb	r3, [r3, #0]
 8107d2a:	2b3f      	cmp	r3, #63	@ 0x3f
 8107d2c:	d93f      	bls.n	8107dae <_ZN14DoIPDaemonTask20onEventDataSubscribeERK12UMessageData+0x9e>
        {
            subscribed_data[1] |= 1ULL << (data.event_subscriptions[i] - 64);
 8107d2e:	697b      	ldr	r3, [r7, #20]
 8107d30:	e9d3 ab06 	ldrd	sl, fp, [r3, #24]
 8107d34:	693a      	ldr	r2, [r7, #16]
 8107d36:	69fb      	ldr	r3, [r7, #28]
 8107d38:	4413      	add	r3, r2
 8107d3a:	781b      	ldrb	r3, [r3, #0]
 8107d3c:	f1a3 0040 	sub.w	r0, r3, #64	@ 0x40
 8107d40:	f04f 0201 	mov.w	r2, #1
 8107d44:	f04f 0300 	mov.w	r3, #0
 8107d48:	f1a0 0620 	sub.w	r6, r0, #32
 8107d4c:	f1c0 0120 	rsb	r1, r0, #32
 8107d50:	fa03 f500 	lsl.w	r5, r3, r0
 8107d54:	fa02 f606 	lsl.w	r6, r2, r6
 8107d58:	4335      	orrs	r5, r6
 8107d5a:	fa22 f101 	lsr.w	r1, r2, r1
 8107d5e:	430d      	orrs	r5, r1
 8107d60:	fa02 f400 	lsl.w	r4, r2, r0
 8107d64:	ea4a 0304 	orr.w	r3, sl, r4
 8107d68:	60bb      	str	r3, [r7, #8]
 8107d6a:	ea4b 0305 	orr.w	r3, fp, r5
 8107d6e:	60fb      	str	r3, [r7, #12]
 8107d70:	697b      	ldr	r3, [r7, #20]
 8107d72:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8107d76:	e9c3 1206 	strd	r1, r2, [r3, #24]
            if(currently_processed_request == REQUEST_INVALID)
 8107d7a:	697b      	ldr	r3, [r7, #20]
 8107d7c:	f993 3021 	ldrsb.w	r3, [r3, #33]	@ 0x21
 8107d80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8107d84:	d153      	bne.n	8107e2e <_ZN14DoIPDaemonTask20onEventDataSubscribeERK12UMessageData+0x11e>
            {
                currently_processed_request = static_cast<EDoIPRequest>(data.event_subscriptions[i]);
 8107d86:	693a      	ldr	r2, [r7, #16]
 8107d88:	69fb      	ldr	r3, [r7, #28]
 8107d8a:	4413      	add	r3, r2
 8107d8c:	781b      	ldrb	r3, [r3, #0]
 8107d8e:	b25a      	sxtb	r2, r3
 8107d90:	697b      	ldr	r3, [r7, #20]
 8107d92:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
                first_in_cycle = currently_processed_request;
 8107d96:	697b      	ldr	r3, [r7, #20]
 8107d98:	f993 2021 	ldrsb.w	r2, [r3, #33]	@ 0x21
 8107d9c:	697b      	ldr	r3, [r7, #20]
 8107d9e:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
                last_start_cycle_timestamp = xTaskGetTickCount() * (1000/configTICK_RATE_HZ);
 8107da2:	f010 fe79 	bl	8118a98 <xTaskGetTickCount>
 8107da6:	4602      	mov	r2, r0
 8107da8:	697b      	ldr	r3, [r7, #20]
 8107daa:	625a      	str	r2, [r3, #36]	@ 0x24
 8107dac:	e03f      	b.n	8107e2e <_ZN14DoIPDaemonTask20onEventDataSubscribeERK12UMessageData+0x11e>
            }
        }
        else
        {
            subscribed_data[0] |= 1ULL << data.event_subscriptions[i];
 8107dae:	697b      	ldr	r3, [r7, #20]
 8107db0:	e9d3 ab04 	ldrd	sl, fp, [r3, #16]
 8107db4:	693a      	ldr	r2, [r7, #16]
 8107db6:	69fb      	ldr	r3, [r7, #28]
 8107db8:	4413      	add	r3, r2
 8107dba:	781b      	ldrb	r3, [r3, #0]
 8107dbc:	4618      	mov	r0, r3
 8107dbe:	f04f 0201 	mov.w	r2, #1
 8107dc2:	f04f 0300 	mov.w	r3, #0
 8107dc6:	f1a0 0620 	sub.w	r6, r0, #32
 8107dca:	f1c0 0120 	rsb	r1, r0, #32
 8107dce:	fa03 f900 	lsl.w	r9, r3, r0
 8107dd2:	fa02 f606 	lsl.w	r6, r2, r6
 8107dd6:	ea49 0906 	orr.w	r9, r9, r6
 8107dda:	fa22 f101 	lsr.w	r1, r2, r1
 8107dde:	ea49 0901 	orr.w	r9, r9, r1
 8107de2:	fa02 f800 	lsl.w	r8, r2, r0
 8107de6:	ea4a 0308 	orr.w	r3, sl, r8
 8107dea:	603b      	str	r3, [r7, #0]
 8107dec:	ea4b 0309 	orr.w	r3, fp, r9
 8107df0:	607b      	str	r3, [r7, #4]
 8107df2:	697b      	ldr	r3, [r7, #20]
 8107df4:	e9d7 1200 	ldrd	r1, r2, [r7]
 8107df8:	e9c3 1204 	strd	r1, r2, [r3, #16]
            if(currently_processed_request == REQUEST_INVALID)
 8107dfc:	697b      	ldr	r3, [r7, #20]
 8107dfe:	f993 3021 	ldrsb.w	r3, [r3, #33]	@ 0x21
 8107e02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8107e06:	d112      	bne.n	8107e2e <_ZN14DoIPDaemonTask20onEventDataSubscribeERK12UMessageData+0x11e>
            {
                currently_processed_request = static_cast<EDoIPRequest>(data.event_subscriptions[i]);
 8107e08:	693a      	ldr	r2, [r7, #16]
 8107e0a:	69fb      	ldr	r3, [r7, #28]
 8107e0c:	4413      	add	r3, r2
 8107e0e:	781b      	ldrb	r3, [r3, #0]
 8107e10:	b25a      	sxtb	r2, r3
 8107e12:	697b      	ldr	r3, [r7, #20]
 8107e14:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
                first_in_cycle = currently_processed_request;
 8107e18:	697b      	ldr	r3, [r7, #20]
 8107e1a:	f993 2021 	ldrsb.w	r2, [r3, #33]	@ 0x21
 8107e1e:	697b      	ldr	r3, [r7, #20]
 8107e20:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
                last_start_cycle_timestamp = xTaskGetTickCount() * (1000/configTICK_RATE_HZ);
 8107e24:	f010 fe38 	bl	8118a98 <xTaskGetTickCount>
 8107e28:	4602      	mov	r2, r0
 8107e2a:	697b      	ldr	r3, [r7, #20]
 8107e2c:	625a      	str	r2, [r3, #36]	@ 0x24
    for(int i = 1; i <= data.event_subscriptions[0]; i++)
 8107e2e:	69fb      	ldr	r3, [r7, #28]
 8107e30:	3301      	adds	r3, #1
 8107e32:	61fb      	str	r3, [r7, #28]
 8107e34:	693b      	ldr	r3, [r7, #16]
 8107e36:	781b      	ldrb	r3, [r3, #0]
 8107e38:	461a      	mov	r2, r3
 8107e3a:	69fb      	ldr	r3, [r7, #28]
 8107e3c:	4293      	cmp	r3, r2
 8107e3e:	f77f af70 	ble.w	8107d22 <_ZN14DoIPDaemonTask20onEventDataSubscribeERK12UMessageData+0x12>
            }
        }
    }

    CM::EConnectionEvent connEvent = CM::EConnectionEvent::EVENT_DATA_REQUESTED;
 8107e42:	2306      	movs	r3, #6
 8107e44:	76fb      	strb	r3, [r7, #27]
    xQueueSend(connectionEventsQueue, &(connEvent), static_cast<TickType_t>(10000));
 8107e46:	4b07      	ldr	r3, [pc, #28]	@ (8107e64 <_ZN14DoIPDaemonTask20onEventDataSubscribeERK12UMessageData+0x154>)
 8107e48:	6818      	ldr	r0, [r3, #0]
 8107e4a:	f107 011b 	add.w	r1, r7, #27
 8107e4e:	2300      	movs	r3, #0
 8107e50:	f242 7210 	movw	r2, #10000	@ 0x2710
 8107e54:	f00f f86e 	bl	8116f34 <xQueueGenericSend>
}
 8107e58:	bf00      	nop
 8107e5a:	3724      	adds	r7, #36	@ 0x24
 8107e5c:	46bd      	mov	sp, r7
 8107e5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8107e62:	bf00      	nop
 8107e64:	10000308 	.word	0x10000308

08107e68 <_ZN14DoIPDaemonTask22onEventDataUnsubscribeERK12UMessageData>:

void DoIPDaemonTask::onEventDataUnsubscribe(const UMessageData& data)
{
 8107e68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8107e6c:	b087      	sub	sp, #28
 8107e6e:	af00      	add	r7, sp, #0
 8107e70:	6078      	str	r0, [r7, #4]
 8107e72:	6039      	str	r1, [r7, #0]
    for (int i = 1; i <= data.event_subscriptions[0]; i++)
 8107e74:	2101      	movs	r1, #1
 8107e76:	6179      	str	r1, [r7, #20]
 8107e78:	e017      	b.n	8107eaa <_ZN14DoIPDaemonTask22onEventDataUnsubscribeERK12UMessageData+0x42>
    {
        if (data.event_subscriptions[i] > 63)
 8107e7a:	6838      	ldr	r0, [r7, #0]
 8107e7c:	6979      	ldr	r1, [r7, #20]
 8107e7e:	4401      	add	r1, r0
 8107e80:	7809      	ldrb	r1, [r1, #0]
 8107e82:	293f      	cmp	r1, #63	@ 0x3f
 8107e84:	d907      	bls.n	8107e96 <_ZN14DoIPDaemonTask22onEventDataUnsubscribeERK12UMessageData+0x2e>
        {
            subscribed_data[1] &= 0ULL << (data.event_subscriptions[i] - 64);
 8107e86:	687e      	ldr	r6, [r7, #4]
 8107e88:	f04f 0000 	mov.w	r0, #0
 8107e8c:	f04f 0100 	mov.w	r1, #0
 8107e90:	e9c6 0106 	strd	r0, r1, [r6, #24]
 8107e94:	e006      	b.n	8107ea4 <_ZN14DoIPDaemonTask22onEventDataUnsubscribeERK12UMessageData+0x3c>
        }
        else
        {
            subscribed_data[0] &= 0ULL << data.event_subscriptions[i];
 8107e96:	687e      	ldr	r6, [r7, #4]
 8107e98:	f04f 0000 	mov.w	r0, #0
 8107e9c:	f04f 0100 	mov.w	r1, #0
 8107ea0:	e9c6 0104 	strd	r0, r1, [r6, #16]
    for (int i = 1; i <= data.event_subscriptions[0]; i++)
 8107ea4:	6979      	ldr	r1, [r7, #20]
 8107ea6:	3101      	adds	r1, #1
 8107ea8:	6179      	str	r1, [r7, #20]
 8107eaa:	6839      	ldr	r1, [r7, #0]
 8107eac:	7809      	ldrb	r1, [r1, #0]
 8107eae:	4608      	mov	r0, r1
 8107eb0:	6979      	ldr	r1, [r7, #20]
 8107eb2:	4281      	cmp	r1, r0
 8107eb4:	dde1      	ble.n	8107e7a <_ZN14DoIPDaemonTask22onEventDataUnsubscribeERK12UMessageData+0x12>
        }
    }

    if(subscribed_data[0] == 0ULL && subscribed_data[1] == 0ULL)
 8107eb6:	6879      	ldr	r1, [r7, #4]
 8107eb8:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
 8107ebc:	4301      	orrs	r1, r0
 8107ebe:	d118      	bne.n	8107ef2 <_ZN14DoIPDaemonTask22onEventDataUnsubscribeERK12UMessageData+0x8a>
 8107ec0:	6879      	ldr	r1, [r7, #4]
 8107ec2:	e9d1 0106 	ldrd	r0, r1, [r1, #24]
 8107ec6:	4301      	orrs	r1, r0
 8107ec8:	d113      	bne.n	8107ef2 <_ZN14DoIPDaemonTask22onEventDataUnsubscribeERK12UMessageData+0x8a>
    {
        currently_processed_request = REQUEST_INVALID;
 8107eca:	687b      	ldr	r3, [r7, #4]
 8107ecc:	22ff      	movs	r2, #255	@ 0xff
 8107ece:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
        first_in_cycle = REQUEST_INVALID;
 8107ed2:	687b      	ldr	r3, [r7, #4]
 8107ed4:	22ff      	movs	r2, #255	@ 0xff
 8107ed6:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
        CM::EConnectionEvent connEvent = CM::EConnectionEvent::EVENT_NO_DATA_TO_REQUEST;
 8107eda:	2307      	movs	r3, #7
 8107edc:	73fb      	strb	r3, [r7, #15]
        xQueueSend(connectionEventsQueue, &(connEvent), static_cast<TickType_t>(10000));
 8107ede:	4b2f      	ldr	r3, [pc, #188]	@ (8107f9c <_ZN14DoIPDaemonTask22onEventDataUnsubscribeERK12UMessageData+0x134>)
 8107ee0:	6818      	ldr	r0, [r3, #0]
 8107ee2:	f107 010f 	add.w	r1, r7, #15
 8107ee6:	2300      	movs	r3, #0
 8107ee8:	f242 7210 	movw	r2, #10000	@ 0x2710
 8107eec:	f00f f822 	bl	8116f34 <xQueueGenericSend>
    }
 8107ef0:	e04f      	b.n	8107f92 <_ZN14DoIPDaemonTask22onEventDataUnsubscribeERK12UMessageData+0x12a>
    else
    {
        for(int i = 1; i <= 128; i++)
 8107ef2:	2101      	movs	r1, #1
 8107ef4:	6139      	str	r1, [r7, #16]
 8107ef6:	e048      	b.n	8107f8a <_ZN14DoIPDaemonTask22onEventDataUnsubscribeERK12UMessageData+0x122>
        {
            if(i < 64)
 8107ef8:	6939      	ldr	r1, [r7, #16]
 8107efa:	293f      	cmp	r1, #63	@ 0x3f
 8107efc:	dc20      	bgt.n	8107f40 <_ZN14DoIPDaemonTask22onEventDataUnsubscribeERK12UMessageData+0xd8>
            {
                if(subscribed_data[0] & (1ULL << i))
 8107efe:	6879      	ldr	r1, [r7, #4]
 8107f00:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
 8107f04:	693e      	ldr	r6, [r7, #16]
 8107f06:	f1c6 0e20 	rsb	lr, r6, #32
 8107f0a:	f1a6 0c20 	sub.w	ip, r6, #32
 8107f0e:	fa20 f206 	lsr.w	r2, r0, r6
 8107f12:	fa01 fe0e 	lsl.w	lr, r1, lr
 8107f16:	ea42 020e 	orr.w	r2, r2, lr
 8107f1a:	fa21 fc0c 	lsr.w	ip, r1, ip
 8107f1e:	ea42 020c 	orr.w	r2, r2, ip
 8107f22:	fa21 f306 	lsr.w	r3, r1, r6
 8107f26:	f002 0801 	and.w	r8, r2, #1
 8107f2a:	f04f 0900 	mov.w	r9, #0
 8107f2e:	ea58 0109 	orrs.w	r1, r8, r9
 8107f32:	d027      	beq.n	8107f84 <_ZN14DoIPDaemonTask22onEventDataUnsubscribeERK12UMessageData+0x11c>
                {
                    first_in_cycle = static_cast<EDoIPRequest>(i);
 8107f34:	693b      	ldr	r3, [r7, #16]
 8107f36:	b25a      	sxtb	r2, r3
 8107f38:	687b      	ldr	r3, [r7, #4]
 8107f3a:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
                    break;
 8107f3e:	e028      	b.n	8107f92 <_ZN14DoIPDaemonTask22onEventDataUnsubscribeERK12UMessageData+0x12a>
                }
            }
            else
            {
                if(subscribed_data[1] & (1ULL << (i - 64)))
 8107f40:	6879      	ldr	r1, [r7, #4]
 8107f42:	e9d1 0106 	ldrd	r0, r1, [r1, #24]
 8107f46:	693e      	ldr	r6, [r7, #16]
 8107f48:	3e40      	subs	r6, #64	@ 0x40
 8107f4a:	f1c6 0e20 	rsb	lr, r6, #32
 8107f4e:	f1a6 0c20 	sub.w	ip, r6, #32
 8107f52:	fa20 f406 	lsr.w	r4, r0, r6
 8107f56:	fa01 fe0e 	lsl.w	lr, r1, lr
 8107f5a:	ea44 040e 	orr.w	r4, r4, lr
 8107f5e:	fa21 fc0c 	lsr.w	ip, r1, ip
 8107f62:	ea44 040c 	orr.w	r4, r4, ip
 8107f66:	fa21 f506 	lsr.w	r5, r1, r6
 8107f6a:	f004 0a01 	and.w	sl, r4, #1
 8107f6e:	f04f 0b00 	mov.w	fp, #0
 8107f72:	ea5a 010b 	orrs.w	r1, sl, fp
 8107f76:	d005      	beq.n	8107f84 <_ZN14DoIPDaemonTask22onEventDataUnsubscribeERK12UMessageData+0x11c>
                {
                    first_in_cycle = static_cast<EDoIPRequest>(i);
 8107f78:	693b      	ldr	r3, [r7, #16]
 8107f7a:	b25a      	sxtb	r2, r3
 8107f7c:	687b      	ldr	r3, [r7, #4]
 8107f7e:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
                    break;
 8107f82:	e006      	b.n	8107f92 <_ZN14DoIPDaemonTask22onEventDataUnsubscribeERK12UMessageData+0x12a>
        for(int i = 1; i <= 128; i++)
 8107f84:	6939      	ldr	r1, [r7, #16]
 8107f86:	3101      	adds	r1, #1
 8107f88:	6139      	str	r1, [r7, #16]
 8107f8a:	6939      	ldr	r1, [r7, #16]
 8107f8c:	2980      	cmp	r1, #128	@ 0x80
 8107f8e:	ddb3      	ble.n	8107ef8 <_ZN14DoIPDaemonTask22onEventDataUnsubscribeERK12UMessageData+0x90>
                }
            }
        }
    }
}
 8107f90:	bf00      	nop
 8107f92:	bf00      	nop
 8107f94:	371c      	adds	r7, #28
 8107f96:	46bd      	mov	sp, r7
 8107f98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8107f9c:	10000308 	.word	0x10000308

08107fa0 <_ZN14DoIPDaemonTask15sendNextRequestEv>:

void DoIPDaemonTask::sendNextRequest()
{
 8107fa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8107fa4:	b091      	sub	sp, #68	@ 0x44
 8107fa6:	af04      	add	r7, sp, #16
 8107fa8:	6078      	str	r0, [r7, #4]
    // it is ugly, but it is fast, which is critical here
    for (int i = currently_processed_request + 1; i < 129; i++) //it is 129 on purpose, because after 127th param is processed we will reset index to 0
 8107faa:	6879      	ldr	r1, [r7, #4]
 8107fac:	f991 1021 	ldrsb.w	r1, [r1, #33]	@ 0x21
 8107fb0:	3101      	adds	r1, #1
 8107fb2:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8107fb4:	e092      	b.n	81080dc <_ZN14DoIPDaemonTask15sendNextRequestEv+0x13c>
    {
        if(i > 127)
 8107fb6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8107fb8:	297f      	cmp	r1, #127	@ 0x7f
 8107fba:	dd01      	ble.n	8107fc0 <_ZN14DoIPDaemonTask15sendNextRequestEv+0x20>
        {
            i = 0;
 8107fbc:	2100      	movs	r1, #0
 8107fbe:	62f9      	str	r1, [r7, #44]	@ 0x2c
        }
        if(i < 64)
 8107fc0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8107fc2:	293f      	cmp	r1, #63	@ 0x3f
 8107fc4:	dc57      	bgt.n	8108076 <_ZN14DoIPDaemonTask15sendNextRequestEv+0xd6>
        {
            if (subscribed_data[0] & (1ULL << i))
 8107fc6:	6879      	ldr	r1, [r7, #4]
 8107fc8:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
 8107fcc:	6afe      	ldr	r6, [r7, #44]	@ 0x2c
 8107fce:	f1c6 0e20 	rsb	lr, r6, #32
 8107fd2:	f1a6 0c20 	sub.w	ip, r6, #32
 8107fd6:	fa20 f206 	lsr.w	r2, r0, r6
 8107fda:	fa01 fe0e 	lsl.w	lr, r1, lr
 8107fde:	ea42 020e 	orr.w	r2, r2, lr
 8107fe2:	fa21 fc0c 	lsr.w	ip, r1, ip
 8107fe6:	ea42 020c 	orr.w	r2, r2, ip
 8107fea:	fa21 f306 	lsr.w	r3, r1, r6
 8107fee:	f002 0801 	and.w	r8, r2, #1
 8107ff2:	f04f 0900 	mov.w	r9, #0
 8107ff6:	ea58 0109 	orrs.w	r1, r8, r9
 8107ffa:	d06c      	beq.n	81080d6 <_ZN14DoIPDaemonTask15sendNextRequestEv+0x136>
            {
                auto dataType = static_cast<EDoIPRequest>(i);
 8107ffc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8107ffe:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
                currently_processed_request = dataType;
 8108002:	687b      	ldr	r3, [r7, #4]
 8108004:	f897 202a 	ldrb.w	r2, [r7, #42]	@ 0x2a
 8108008:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
                if(currently_processed_request == first_in_cycle && subscribed_for_cycle_time)
 810800c:	687b      	ldr	r3, [r7, #4]
 810800e:	f993 2021 	ldrsb.w	r2, [r3, #33]	@ 0x21
 8108012:	687b      	ldr	r3, [r7, #4]
 8108014:	f993 3022 	ldrsb.w	r3, [r3, #34]	@ 0x22
 8108018:	429a      	cmp	r2, r3
 810801a:	d123      	bne.n	8108064 <_ZN14DoIPDaemonTask15sendNextRequestEv+0xc4>
 810801c:	687b      	ldr	r3, [r7, #4]
 810801e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8108022:	2b00      	cmp	r3, #0
 8108024:	d01e      	beq.n	8108064 <_ZN14DoIPDaemonTask15sendNextRequestEv+0xc4>
                {
                    auto current_timestamp = xTaskGetTickCount() * (1000/configTICK_RATE_HZ);
 8108026:	f010 fd37 	bl	8118a98 <xTaskGetTickCount>
 810802a:	6278      	str	r0, [r7, #36]	@ 0x24
                    auto ms_diff = current_timestamp - last_start_cycle_timestamp;
 810802c:	687b      	ldr	r3, [r7, #4]
 810802e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8108030:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8108032:	1ad3      	subs	r3, r2, r3
 8108034:	623b      	str	r3, [r7, #32]
                    last_start_cycle_timestamp = current_timestamp;
 8108036:	687b      	ldr	r3, [r7, #4]
 8108038:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 810803a:	625a      	str	r2, [r3, #36]	@ 0x24
                    UMessageData data;
                    data.last_request_cycle_ms = static_cast<uint16_t>(ms_diff);
 810803c:	6a3b      	ldr	r3, [r7, #32]
 810803e:	b29b      	uxth	r3, r3
 8108040:	81bb      	strh	r3, [r7, #12]
                    event_bus.send(EVENT_LAST_REQUEST_CYCLE_TOOK_MS, data, EVENT_CLIENT_FRONTEND);
 8108042:	687d      	ldr	r5, [r7, #4]
 8108044:	2300      	movs	r3, #0
 8108046:	9303      	str	r3, [sp, #12]
 8108048:	466c      	mov	r4, sp
 810804a:	f107 0314 	add.w	r3, r7, #20
 810804e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8108052:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8108056:	f107 030c 	add.w	r3, r7, #12
 810805a:	cb0c      	ldmia	r3, {r2, r3}
 810805c:	2186      	movs	r1, #134	@ 0x86
 810805e:	4628      	mov	r0, r5
 8108060:	f000 fd30 	bl	8108ac4 <_ZN8EventBus4sendE10EEventType12UMessageData12EEventClient>
                }
                conn_mgr.sendRequestForData(dataType);
 8108064:	687b      	ldr	r3, [r7, #4]
 8108066:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8108068:	f997 202a 	ldrsb.w	r2, [r7, #42]	@ 0x2a
 810806c:	4611      	mov	r1, r2
 810806e:	4618      	mov	r0, r3
 8108070:	f7fe fc66 	bl	8106940 <_ZN17ConnectionManager18sendRequestForDataEN7APIDoIP12EDoIPRequestE>
                break;
 8108074:	e037      	b.n	81080e6 <_ZN14DoIPDaemonTask15sendNextRequestEv+0x146>
            }
        }
        else
        {
            if (subscribed_data[1] & (1ULL << (i - 64)))
 8108076:	6879      	ldr	r1, [r7, #4]
 8108078:	e9d1 0106 	ldrd	r0, r1, [r1, #24]
 810807c:	6afe      	ldr	r6, [r7, #44]	@ 0x2c
 810807e:	3e40      	subs	r6, #64	@ 0x40
 8108080:	f1c6 0e20 	rsb	lr, r6, #32
 8108084:	f1a6 0c20 	sub.w	ip, r6, #32
 8108088:	fa20 f406 	lsr.w	r4, r0, r6
 810808c:	fa01 fe0e 	lsl.w	lr, r1, lr
 8108090:	ea44 040e 	orr.w	r4, r4, lr
 8108094:	fa21 fc0c 	lsr.w	ip, r1, ip
 8108098:	ea44 040c 	orr.w	r4, r4, ip
 810809c:	fa21 f506 	lsr.w	r5, r1, r6
 81080a0:	f004 0a01 	and.w	sl, r4, #1
 81080a4:	f04f 0b00 	mov.w	fp, #0
 81080a8:	ea5a 010b 	orrs.w	r1, sl, fp
 81080ac:	d013      	beq.n	81080d6 <_ZN14DoIPDaemonTask15sendNextRequestEv+0x136>
            {
                auto dataType = static_cast<EDoIPRequest>(i - 64);
 81080ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81080b0:	b2db      	uxtb	r3, r3
 81080b2:	3b40      	subs	r3, #64	@ 0x40
 81080b4:	b2db      	uxtb	r3, r3
 81080b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
                currently_processed_request = dataType;
 81080ba:	687b      	ldr	r3, [r7, #4]
 81080bc:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 81080c0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
                conn_mgr.sendRequestForData(dataType);
 81080c4:	687b      	ldr	r3, [r7, #4]
 81080c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81080c8:	f997 202b 	ldrsb.w	r2, [r7, #43]	@ 0x2b
 81080cc:	4611      	mov	r1, r2
 81080ce:	4618      	mov	r0, r3
 81080d0:	f7fe fc36 	bl	8106940 <_ZN17ConnectionManager18sendRequestForDataEN7APIDoIP12EDoIPRequestE>
                break;
 81080d4:	e007      	b.n	81080e6 <_ZN14DoIPDaemonTask15sendNextRequestEv+0x146>
    for (int i = currently_processed_request + 1; i < 129; i++) //it is 129 on purpose, because after 127th param is processed we will reset index to 0
 81080d6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 81080d8:	3101      	adds	r1, #1
 81080da:	62f9      	str	r1, [r7, #44]	@ 0x2c
 81080dc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 81080de:	2980      	cmp	r1, #128	@ 0x80
 81080e0:	f77f af69 	ble.w	8107fb6 <_ZN14DoIPDaemonTask15sendNextRequestEv+0x16>
            }
        }
    }
}
 81080e4:	bf00      	nop
 81080e6:	bf00      	nop
 81080e8:	3734      	adds	r7, #52	@ 0x34
 81080ea:	46bd      	mov	sp, r7
 81080ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

081080f0 <_ZNSt14_Function_baseC1Ev>:
    _Function_base() = default;
 81080f0:	b480      	push	{r7}
 81080f2:	b083      	sub	sp, #12
 81080f4:	af00      	add	r7, sp, #0
 81080f6:	6078      	str	r0, [r7, #4]
 81080f8:	687b      	ldr	r3, [r7, #4]
 81080fa:	461a      	mov	r2, r3
 81080fc:	2300      	movs	r3, #0
 81080fe:	6013      	str	r3, [r2, #0]
 8108100:	6053      	str	r3, [r2, #4]
 8108102:	687b      	ldr	r3, [r7, #4]
 8108104:	2200      	movs	r2, #0
 8108106:	609a      	str	r2, [r3, #8]
 8108108:	687b      	ldr	r3, [r7, #4]
 810810a:	4618      	mov	r0, r3
 810810c:	370c      	adds	r7, #12
 810810e:	46bd      	mov	sp, r7
 8108110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108114:	4770      	bx	lr
	...

08108118 <_ZNSt8functionIFv10EEventType12UMessageData12EEventClientS2_EEC1IZN14DoIPDaemonTask7processEvEUlS0_S1_S2_S2_E_vEEOT_>:
       */
      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 2774. std::function construction vs assignment
      template<typename _Functor,
	       typename _Constraints = _Requires<_Callable<_Functor>>>
	function(_Functor&& __f)
 8108118:	b590      	push	{r4, r7, lr}
 810811a:	b083      	sub	sp, #12
 810811c:	af00      	add	r7, sp, #0
 810811e:	6078      	str	r0, [r7, #4]
 8108120:	6039      	str	r1, [r7, #0]
	noexcept(_Handler<_Functor>::template _S_nothrow_init<_Functor>())
	: _Function_base()
 8108122:	687b      	ldr	r3, [r7, #4]
 8108124:	461a      	mov	r2, r3
 8108126:	2300      	movs	r3, #0
 8108128:	6013      	str	r3, [r2, #0]
 810812a:	6053      	str	r3, [r2, #4]
 810812c:	6093      	str	r3, [r2, #8]
 810812e:	687b      	ldr	r3, [r7, #4]
 8108130:	4618      	mov	r0, r3
 8108132:	f7ff ffdd 	bl	81080f0 <_ZNSt14_Function_baseC1Ev>
 8108136:	687b      	ldr	r3, [r7, #4]
 8108138:	2200      	movs	r2, #0
 810813a:	60da      	str	r2, [r3, #12]
	      "std::function target must be constructible from the "
	      "constructor argument");

	  using _My_handler = _Handler<_Functor>;

	  if (_My_handler::_M_not_empty_function(__f))
 810813c:	6838      	ldr	r0, [r7, #0]
 810813e:	f000 f81b 	bl	8108178 <_ZNSt14_Function_base13_Base_managerIZN14DoIPDaemonTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E21_M_not_empty_functionIS5_EEbRKT_>
 8108142:	4603      	mov	r3, r0
 8108144:	2b00      	cmp	r3, #0
 8108146:	d00e      	beq.n	8108166 <_ZNSt8functionIFv10EEventType12UMessageData12EEventClientS2_EEC1IZN14DoIPDaemonTask7processEvEUlS0_S1_S2_S2_E_vEEOT_+0x4e>
	    {
	      _My_handler::_M_init_functor(_M_functor,
 8108148:	687c      	ldr	r4, [r7, #4]
 810814a:	6838      	ldr	r0, [r7, #0]
 810814c:	f000 f81f 	bl	810818e <_ZSt7forwardIZN14DoIPDaemonTask7processEvEUl10EEventType12UMessageData12EEventClientS3_E_EOT_RNSt16remove_referenceIS5_E4typeE>
 8108150:	4603      	mov	r3, r0
 8108152:	4619      	mov	r1, r3
 8108154:	4620      	mov	r0, r4
 8108156:	f000 f825 	bl	81081a4 <_ZNSt14_Function_base13_Base_managerIZN14DoIPDaemonTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E15_M_init_functorIS5_EEvRSt9_Any_dataOT_>
					   std::forward<_Functor>(__f));
	      _M_invoker = &_My_handler::_M_invoke;
 810815a:	687b      	ldr	r3, [r7, #4]
 810815c:	4a04      	ldr	r2, [pc, #16]	@ (8108170 <_ZNSt8functionIFv10EEventType12UMessageData12EEventClientS2_EEC1IZN14DoIPDaemonTask7processEvEUlS0_S1_S2_S2_E_vEEOT_+0x58>)
 810815e:	60da      	str	r2, [r3, #12]
	      _M_manager = &_My_handler::_M_manager;
 8108160:	687b      	ldr	r3, [r7, #4]
 8108162:	4a04      	ldr	r2, [pc, #16]	@ (8108174 <_ZNSt8functionIFv10EEventType12UMessageData12EEventClientS2_EEC1IZN14DoIPDaemonTask7processEvEUlS0_S1_S2_S2_E_vEEOT_+0x5c>)
 8108164:	609a      	str	r2, [r3, #8]
	    }
	}
 8108166:	687b      	ldr	r3, [r7, #4]
 8108168:	4618      	mov	r0, r3
 810816a:	370c      	adds	r7, #12
 810816c:	46bd      	mov	sp, r7
 810816e:	bd90      	pop	{r4, r7, pc}
 8108170:	081081c9 	.word	0x081081c9
 8108174:	08108219 	.word	0x08108219

08108178 <_ZNSt14_Function_base13_Base_managerIZN14DoIPDaemonTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E21_M_not_empty_functionIS5_EEbRKT_>:
	  _M_not_empty_function(const _Tp&) noexcept
 8108178:	b480      	push	{r7}
 810817a:	b083      	sub	sp, #12
 810817c:	af00      	add	r7, sp, #0
 810817e:	6078      	str	r0, [r7, #4]
	  { return true; }
 8108180:	2301      	movs	r3, #1
 8108182:	4618      	mov	r0, r3
 8108184:	370c      	adds	r7, #12
 8108186:	46bd      	mov	sp, r7
 8108188:	f85d 7b04 	ldr.w	r7, [sp], #4
 810818c:	4770      	bx	lr

0810818e <_ZSt7forwardIZN14DoIPDaemonTask7processEvEUl10EEventType12UMessageData12EEventClientS3_E_EOT_RNSt16remove_referenceIS5_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 810818e:	b480      	push	{r7}
 8108190:	b083      	sub	sp, #12
 8108192:	af00      	add	r7, sp, #0
 8108194:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8108196:	687b      	ldr	r3, [r7, #4]
 8108198:	4618      	mov	r0, r3
 810819a:	370c      	adds	r7, #12
 810819c:	46bd      	mov	sp, r7
 810819e:	f85d 7b04 	ldr.w	r7, [sp], #4
 81081a2:	4770      	bx	lr

081081a4 <_ZNSt14_Function_base13_Base_managerIZN14DoIPDaemonTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E15_M_init_functorIS5_EEvRSt9_Any_dataOT_>:
	  _M_init_functor(_Any_data& __functor, _Fn&& __f)
 81081a4:	b590      	push	{r4, r7, lr}
 81081a6:	b083      	sub	sp, #12
 81081a8:	af00      	add	r7, sp, #0
 81081aa:	6078      	str	r0, [r7, #4]
 81081ac:	6039      	str	r1, [r7, #0]
	    _M_create(__functor, std::forward<_Fn>(__f), _Local_storage());
 81081ae:	6838      	ldr	r0, [r7, #0]
 81081b0:	f7ff ffed 	bl	810818e <_ZSt7forwardIZN14DoIPDaemonTask7processEvEUl10EEventType12UMessageData12EEventClientS3_E_EOT_RNSt16remove_referenceIS5_E4typeE>
 81081b4:	4603      	mov	r3, r0
 81081b6:	4622      	mov	r2, r4
 81081b8:	4619      	mov	r1, r3
 81081ba:	6878      	ldr	r0, [r7, #4]
 81081bc:	f000 f84b 	bl	8108256 <_ZNSt14_Function_base13_Base_managerIZN14DoIPDaemonTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E9_M_createIS5_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>
	  }
 81081c0:	bf00      	nop
 81081c2:	370c      	adds	r7, #12
 81081c4:	46bd      	mov	sp, r7
 81081c6:	bd90      	pop	{r4, r7, pc}

081081c8 <_ZNSt17_Function_handlerIFv10EEventType12UMessageData12EEventClientS2_EZN14DoIPDaemonTask7processEvEUlS0_S1_S2_S2_E_E9_M_invokeERKSt9_Any_dataOS0_OS1_OS2_SC_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 81081c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 81081cc:	b086      	sub	sp, #24
 81081ce:	af02      	add	r7, sp, #8
 81081d0:	60f8      	str	r0, [r7, #12]
 81081d2:	60b9      	str	r1, [r7, #8]
 81081d4:	607a      	str	r2, [r7, #4]
 81081d6:	603b      	str	r3, [r7, #0]
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
 81081d8:	68f8      	ldr	r0, [r7, #12]
 81081da:	f000 f855 	bl	8108288 <_ZNSt14_Function_base13_Base_managerIZN14DoIPDaemonTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E14_M_get_pointerERKSt9_Any_data>
 81081de:	4604      	mov	r4, r0
 81081e0:	68b8      	ldr	r0, [r7, #8]
 81081e2:	f000 f861 	bl	81082a8 <_ZSt7forwardI10EEventTypeEOT_RNSt16remove_referenceIS1_E4typeE>
 81081e6:	4605      	mov	r5, r0
 81081e8:	6878      	ldr	r0, [r7, #4]
 81081ea:	f000 f868 	bl	81082be <_ZSt7forwardI12UMessageDataEOT_RNSt16remove_referenceIS1_E4typeE>
 81081ee:	4606      	mov	r6, r0
 81081f0:	6838      	ldr	r0, [r7, #0]
 81081f2:	f000 f86f 	bl	81082d4 <_ZSt7forwardI12EEventClientEOT_RNSt16remove_referenceIS1_E4typeE>
 81081f6:	4680      	mov	r8, r0
 81081f8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 81081fa:	f000 f86b 	bl	81082d4 <_ZSt7forwardI12EEventClientEOT_RNSt16remove_referenceIS1_E4typeE>
 81081fe:	4603      	mov	r3, r0
 8108200:	9300      	str	r3, [sp, #0]
 8108202:	4643      	mov	r3, r8
 8108204:	4632      	mov	r2, r6
 8108206:	4629      	mov	r1, r5
 8108208:	4620      	mov	r0, r4
 810820a:	f000 f86e 	bl	81082ea <_ZSt10__invoke_rIvRZN14DoIPDaemonTask7processEvEUl10EEventType12UMessageData12EEventClientS3_E_JS1_S2_S3_S3_EENSt9enable_ifIX16is_invocable_r_vIT_T0_DpT1_EES7_E4typeEOS8_DpOS9_>
				     std::forward<_ArgTypes>(__args)...);
 810820e:	bf00      	nop
      }
 8108210:	3710      	adds	r7, #16
 8108212:	46bd      	mov	sp, r7
 8108214:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08108218 <_ZNSt17_Function_handlerIFv10EEventType12UMessageData12EEventClientS2_EZN14DoIPDaemonTask7processEvEUlS0_S1_S2_S2_E_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 8108218:	b590      	push	{r4, r7, lr}
 810821a:	b085      	sub	sp, #20
 810821c:	af00      	add	r7, sp, #0
 810821e:	60f8      	str	r0, [r7, #12]
 8108220:	60b9      	str	r1, [r7, #8]
 8108222:	4613      	mov	r3, r2
 8108224:	71fb      	strb	r3, [r7, #7]
	switch (__op)
 8108226:	79fb      	ldrb	r3, [r7, #7]
 8108228:	2b01      	cmp	r3, #1
 810822a:	d109      	bne.n	8108240 <_ZNSt17_Function_handlerIFv10EEventType12UMessageData12EEventClientS2_EZN14DoIPDaemonTask7processEvEUlS0_S1_S2_S2_E_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x28>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 810822c:	68b8      	ldr	r0, [r7, #8]
 810822e:	f000 f82b 	bl	8108288 <_ZNSt14_Function_base13_Base_managerIZN14DoIPDaemonTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E14_M_get_pointerERKSt9_Any_data>
 8108232:	4604      	mov	r4, r0
 8108234:	68f8      	ldr	r0, [r7, #12]
 8108236:	f000 f881 	bl	810833c <_ZNSt9_Any_data9_M_accessIPZN14DoIPDaemonTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_EERT_v>
 810823a:	4603      	mov	r3, r0
 810823c:	601c      	str	r4, [r3, #0]
	    break;
 810823e:	e005      	b.n	810824c <_ZNSt17_Function_handlerIFv10EEventType12UMessageData12EEventClientS2_EZN14DoIPDaemonTask7processEvEUlS0_S1_S2_S2_E_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x34>
	    _Base::_M_manager(__dest, __source, __op);
 8108240:	79fb      	ldrb	r3, [r7, #7]
 8108242:	461a      	mov	r2, r3
 8108244:	68b9      	ldr	r1, [r7, #8]
 8108246:	68f8      	ldr	r0, [r7, #12]
 8108248:	f000 f884 	bl	8108354 <_ZNSt14_Function_base13_Base_managerIZN14DoIPDaemonTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation>
	return false;
 810824c:	2300      	movs	r3, #0
      }
 810824e:	4618      	mov	r0, r3
 8108250:	3714      	adds	r7, #20
 8108252:	46bd      	mov	sp, r7
 8108254:	bd90      	pop	{r4, r7, pc}

08108256 <_ZNSt14_Function_base13_Base_managerIZN14DoIPDaemonTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E9_M_createIS5_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>:
	  _M_create(_Any_data& __dest, _Fn&& __f, true_type)
 8108256:	b590      	push	{r4, r7, lr}
 8108258:	b085      	sub	sp, #20
 810825a:	af00      	add	r7, sp, #0
 810825c:	60f8      	str	r0, [r7, #12]
 810825e:	60b9      	str	r1, [r7, #8]
 8108260:	713a      	strb	r2, [r7, #4]
	    ::new (__dest._M_access()) _Functor(std::forward<_Fn>(__f));
 8108262:	68f8      	ldr	r0, [r7, #12]
 8108264:	f7ff faac 	bl	81077c0 <_ZNSt9_Any_data9_M_accessEv>
 8108268:	4603      	mov	r3, r0
 810826a:	4619      	mov	r1, r3
 810826c:	2004      	movs	r0, #4
 810826e:	f7f9 f84d 	bl	810130c <_ZnwjPv>
 8108272:	4604      	mov	r4, r0
 8108274:	68b8      	ldr	r0, [r7, #8]
 8108276:	f7ff ff8a 	bl	810818e <_ZSt7forwardIZN14DoIPDaemonTask7processEvEUl10EEventType12UMessageData12EEventClientS3_E_EOT_RNSt16remove_referenceIS5_E4typeE>
 810827a:	4603      	mov	r3, r0
 810827c:	681b      	ldr	r3, [r3, #0]
 810827e:	6023      	str	r3, [r4, #0]
	  }
 8108280:	bf00      	nop
 8108282:	3714      	adds	r7, #20
 8108284:	46bd      	mov	sp, r7
 8108286:	bd90      	pop	{r4, r7, pc}

08108288 <_ZNSt14_Function_base13_Base_managerIZN14DoIPDaemonTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source) noexcept
 8108288:	b580      	push	{r7, lr}
 810828a:	b084      	sub	sp, #16
 810828c:	af00      	add	r7, sp, #0
 810828e:	6078      	str	r0, [r7, #4]
	      const _Functor& __f = __source._M_access<_Functor>();
 8108290:	6878      	ldr	r0, [r7, #4]
 8108292:	f000 f899 	bl	81083c8 <_ZNKSt9_Any_data9_M_accessIZN14DoIPDaemonTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_EERKT_v>
 8108296:	60f8      	str	r0, [r7, #12]
	      return const_cast<_Functor*>(std::__addressof(__f));
 8108298:	68f8      	ldr	r0, [r7, #12]
 810829a:	f000 f8a1 	bl	81083e0 <_ZSt11__addressofIKZN14DoIPDaemonTask7processEvEUl10EEventType12UMessageData12EEventClientS3_E_EPT_RS6_>
 810829e:	4603      	mov	r3, r0
	}
 81082a0:	4618      	mov	r0, r3
 81082a2:	3710      	adds	r7, #16
 81082a4:	46bd      	mov	sp, r7
 81082a6:	bd80      	pop	{r7, pc}

081082a8 <_ZSt7forwardI10EEventTypeEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 81082a8:	b480      	push	{r7}
 81082aa:	b083      	sub	sp, #12
 81082ac:	af00      	add	r7, sp, #0
 81082ae:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 81082b0:	687b      	ldr	r3, [r7, #4]
 81082b2:	4618      	mov	r0, r3
 81082b4:	370c      	adds	r7, #12
 81082b6:	46bd      	mov	sp, r7
 81082b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81082bc:	4770      	bx	lr

081082be <_ZSt7forwardI12UMessageDataEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 81082be:	b480      	push	{r7}
 81082c0:	b083      	sub	sp, #12
 81082c2:	af00      	add	r7, sp, #0
 81082c4:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 81082c6:	687b      	ldr	r3, [r7, #4]
 81082c8:	4618      	mov	r0, r3
 81082ca:	370c      	adds	r7, #12
 81082cc:	46bd      	mov	sp, r7
 81082ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 81082d2:	4770      	bx	lr

081082d4 <_ZSt7forwardI12EEventClientEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 81082d4:	b480      	push	{r7}
 81082d6:	b083      	sub	sp, #12
 81082d8:	af00      	add	r7, sp, #0
 81082da:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 81082dc:	687b      	ldr	r3, [r7, #4]
 81082de:	4618      	mov	r0, r3
 81082e0:	370c      	adds	r7, #12
 81082e2:	46bd      	mov	sp, r7
 81082e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81082e8:	4770      	bx	lr

081082ea <_ZSt10__invoke_rIvRZN14DoIPDaemonTask7processEvEUl10EEventType12UMessageData12EEventClientS3_E_JS1_S2_S3_S3_EENSt9enable_ifIX16is_invocable_r_vIT_T0_DpT1_EES7_E4typeEOS8_DpOS9_>:

#if __cplusplus >= 201703L
  // INVOKE<R>: Invoke a callable object and convert the result to R.
  template<typename _Res, typename _Callable, typename... _Args>
    constexpr enable_if_t<is_invocable_r_v<_Res, _Callable, _Args...>, _Res>
    __invoke_r(_Callable&& __fn, _Args&&... __args)
 81082ea:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 81082ee:	b087      	sub	sp, #28
 81082f0:	af02      	add	r7, sp, #8
 81082f2:	60f8      	str	r0, [r7, #12]
 81082f4:	60b9      	str	r1, [r7, #8]
 81082f6:	607a      	str	r2, [r7, #4]
 81082f8:	603b      	str	r3, [r7, #0]
    {
      using __result = __invoke_result<_Callable, _Args...>;
      using __type = typename __result::type;
      using __tag = typename __result::__invoke_type;
      if constexpr (is_void_v<_Res>)
	std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 81082fa:	68f8      	ldr	r0, [r7, #12]
 81082fc:	f000 f87b 	bl	81083f6 <_ZSt7forwardIRZN14DoIPDaemonTask7processEvEUl10EEventType12UMessageData12EEventClientS3_E_EOT_RNSt16remove_referenceIS6_E4typeE>
 8108300:	4605      	mov	r5, r0
 8108302:	68b8      	ldr	r0, [r7, #8]
 8108304:	f7ff ffd0 	bl	81082a8 <_ZSt7forwardI10EEventTypeEOT_RNSt16remove_referenceIS1_E4typeE>
 8108308:	4606      	mov	r6, r0
 810830a:	6878      	ldr	r0, [r7, #4]
 810830c:	f7ff ffd7 	bl	81082be <_ZSt7forwardI12UMessageDataEOT_RNSt16remove_referenceIS1_E4typeE>
 8108310:	4680      	mov	r8, r0
 8108312:	6838      	ldr	r0, [r7, #0]
 8108314:	f7ff ffde 	bl	81082d4 <_ZSt7forwardI12EEventClientEOT_RNSt16remove_referenceIS1_E4typeE>
 8108318:	4604      	mov	r4, r0
 810831a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 810831c:	f7ff ffda 	bl	81082d4 <_ZSt7forwardI12EEventClientEOT_RNSt16remove_referenceIS1_E4typeE>
 8108320:	4603      	mov	r3, r0
 8108322:	9301      	str	r3, [sp, #4]
 8108324:	9400      	str	r4, [sp, #0]
 8108326:	4643      	mov	r3, r8
 8108328:	4632      	mov	r2, r6
 810832a:	4629      	mov	r1, r5
 810832c:	4648      	mov	r0, r9
 810832e:	f000 f86d 	bl	810840c <_ZSt13__invoke_implIvRZN14DoIPDaemonTask7processEvEUl10EEventType12UMessageData12EEventClientS3_E_JS1_S2_S3_S3_EET_St14__invoke_otherOT0_DpOT1_>
					std::forward<_Args>(__args)...);
      else
	return std::__invoke_impl<__type>(__tag{},
					  std::forward<_Callable>(__fn),
					  std::forward<_Args>(__args)...);
    }
 8108332:	bf00      	nop
 8108334:	3714      	adds	r7, #20
 8108336:	46bd      	mov	sp, r7
 8108338:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0810833c <_ZNSt9_Any_data9_M_accessIPZN14DoIPDaemonTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_EERT_v>:
      _M_access() noexcept
 810833c:	b580      	push	{r7, lr}
 810833e:	b082      	sub	sp, #8
 8108340:	af00      	add	r7, sp, #0
 8108342:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8108344:	6878      	ldr	r0, [r7, #4]
 8108346:	f7ff fa3b 	bl	81077c0 <_ZNSt9_Any_data9_M_accessEv>
 810834a:	4603      	mov	r3, r0
 810834c:	4618      	mov	r0, r3
 810834e:	3708      	adds	r7, #8
 8108350:	46bd      	mov	sp, r7
 8108352:	bd80      	pop	{r7, pc}

08108354 <_ZNSt14_Function_base13_Base_managerIZN14DoIPDaemonTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 8108354:	b590      	push	{r4, r7, lr}
 8108356:	b085      	sub	sp, #20
 8108358:	af00      	add	r7, sp, #0
 810835a:	60f8      	str	r0, [r7, #12]
 810835c:	60b9      	str	r1, [r7, #8]
 810835e:	4613      	mov	r3, r2
 8108360:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
 8108362:	79fb      	ldrb	r3, [r7, #7]
 8108364:	2b03      	cmp	r3, #3
 8108366:	d82a      	bhi.n	81083be <_ZNSt14_Function_base13_Base_managerIZN14DoIPDaemonTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x6a>
 8108368:	a201      	add	r2, pc, #4	@ (adr r2, 8108370 <_ZNSt14_Function_base13_Base_managerIZN14DoIPDaemonTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x1c>)
 810836a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810836e:	bf00      	nop
 8108370:	08108381 	.word	0x08108381
 8108374:	0810838f 	.word	0x0810838f
 8108378:	081083a3 	.word	0x081083a3
 810837c:	081083b5 	.word	0x081083b5
	      __dest._M_access<const type_info*>() = nullptr;
 8108380:	68f8      	ldr	r0, [r7, #12]
 8108382:	f000 f876 	bl	8108472 <_ZNSt9_Any_data9_M_accessIPKSt9type_infoEERT_v>
 8108386:	4603      	mov	r3, r0
 8108388:	2200      	movs	r2, #0
 810838a:	601a      	str	r2, [r3, #0]
	      break;
 810838c:	e017      	b.n	81083be <_ZNSt14_Function_base13_Base_managerIZN14DoIPDaemonTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x6a>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 810838e:	68b8      	ldr	r0, [r7, #8]
 8108390:	f7ff ff7a 	bl	8108288 <_ZNSt14_Function_base13_Base_managerIZN14DoIPDaemonTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E14_M_get_pointerERKSt9_Any_data>
 8108394:	4604      	mov	r4, r0
 8108396:	68f8      	ldr	r0, [r7, #12]
 8108398:	f7ff ffd0 	bl	810833c <_ZNSt9_Any_data9_M_accessIPZN14DoIPDaemonTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_EERT_v>
 810839c:	4603      	mov	r3, r0
 810839e:	601c      	str	r4, [r3, #0]
	      break;
 81083a0:	e00d      	b.n	81083be <_ZNSt14_Function_base13_Base_managerIZN14DoIPDaemonTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x6a>
		  *const_cast<const _Functor*>(_M_get_pointer(__source)));
 81083a2:	68b8      	ldr	r0, [r7, #8]
 81083a4:	f7ff ff70 	bl	8108288 <_ZNSt14_Function_base13_Base_managerIZN14DoIPDaemonTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E14_M_get_pointerERKSt9_Any_data>
 81083a8:	4603      	mov	r3, r0
	      _M_init_functor(__dest,
 81083aa:	4619      	mov	r1, r3
 81083ac:	68f8      	ldr	r0, [r7, #12]
 81083ae:	f000 f86c 	bl	810848a <_ZNSt14_Function_base13_Base_managerIZN14DoIPDaemonTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E15_M_init_functorIRKS5_EEvRSt9_Any_dataOT_>
	      break;
 81083b2:	e004      	b.n	81083be <_ZNSt14_Function_base13_Base_managerIZN14DoIPDaemonTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x6a>
	      _M_destroy(__dest, _Local_storage());
 81083b4:	4621      	mov	r1, r4
 81083b6:	68f8      	ldr	r0, [r7, #12]
 81083b8:	f000 f879 	bl	81084ae <_ZNSt14_Function_base13_Base_managerIZN14DoIPDaemonTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>
	      break;
 81083bc:	bf00      	nop
	  return false;
 81083be:	2300      	movs	r3, #0
	}
 81083c0:	4618      	mov	r0, r3
 81083c2:	3714      	adds	r7, #20
 81083c4:	46bd      	mov	sp, r7
 81083c6:	bd90      	pop	{r4, r7, pc}

081083c8 <_ZNKSt9_Any_data9_M_accessIZN14DoIPDaemonTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_EERKT_v>:
      _M_access() const noexcept
 81083c8:	b580      	push	{r7, lr}
 81083ca:	b082      	sub	sp, #8
 81083cc:	af00      	add	r7, sp, #0
 81083ce:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 81083d0:	6878      	ldr	r0, [r7, #4]
 81083d2:	f7ff fa00 	bl	81077d6 <_ZNKSt9_Any_data9_M_accessEv>
 81083d6:	4603      	mov	r3, r0
 81083d8:	4618      	mov	r0, r3
 81083da:	3708      	adds	r7, #8
 81083dc:	46bd      	mov	sp, r7
 81083de:	bd80      	pop	{r7, pc}

081083e0 <_ZSt11__addressofIKZN14DoIPDaemonTask7processEvEUl10EEventType12UMessageData12EEventClientS3_E_EPT_RS6_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 81083e0:	b480      	push	{r7}
 81083e2:	b083      	sub	sp, #12
 81083e4:	af00      	add	r7, sp, #0
 81083e6:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 81083e8:	687b      	ldr	r3, [r7, #4]
 81083ea:	4618      	mov	r0, r3
 81083ec:	370c      	adds	r7, #12
 81083ee:	46bd      	mov	sp, r7
 81083f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81083f4:	4770      	bx	lr

081083f6 <_ZSt7forwardIRZN14DoIPDaemonTask7processEvEUl10EEventType12UMessageData12EEventClientS3_E_EOT_RNSt16remove_referenceIS6_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 81083f6:	b480      	push	{r7}
 81083f8:	b083      	sub	sp, #12
 81083fa:	af00      	add	r7, sp, #0
 81083fc:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 81083fe:	687b      	ldr	r3, [r7, #4]
 8108400:	4618      	mov	r0, r3
 8108402:	370c      	adds	r7, #12
 8108404:	46bd      	mov	sp, r7
 8108406:	f85d 7b04 	ldr.w	r7, [sp], #4
 810840a:	4770      	bx	lr

0810840c <_ZSt13__invoke_implIvRZN14DoIPDaemonTask7processEvEUl10EEventType12UMessageData12EEventClientS3_E_JS1_S2_S3_S3_EET_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 810840c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8108410:	b08a      	sub	sp, #40	@ 0x28
 8108412:	af06      	add	r7, sp, #24
 8108414:	7338      	strb	r0, [r7, #12]
 8108416:	60b9      	str	r1, [r7, #8]
 8108418:	607a      	str	r2, [r7, #4]
 810841a:	603b      	str	r3, [r7, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 810841c:	68b8      	ldr	r0, [r7, #8]
 810841e:	f7ff ffea 	bl	81083f6 <_ZSt7forwardIRZN14DoIPDaemonTask7processEvEUl10EEventType12UMessageData12EEventClientS3_E_EOT_RNSt16remove_referenceIS6_E4typeE>
 8108422:	4680      	mov	r8, r0
 8108424:	6878      	ldr	r0, [r7, #4]
 8108426:	f7ff ff3f 	bl	81082a8 <_ZSt7forwardI10EEventTypeEOT_RNSt16remove_referenceIS1_E4typeE>
 810842a:	4603      	mov	r3, r0
 810842c:	781e      	ldrb	r6, [r3, #0]
 810842e:	6838      	ldr	r0, [r7, #0]
 8108430:	f7ff ff45 	bl	81082be <_ZSt7forwardI12UMessageDataEOT_RNSt16remove_referenceIS1_E4typeE>
 8108434:	4604      	mov	r4, r0
 8108436:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8108438:	f7ff ff4c 	bl	81082d4 <_ZSt7forwardI12EEventClientEOT_RNSt16remove_referenceIS1_E4typeE>
 810843c:	4603      	mov	r3, r0
 810843e:	781d      	ldrb	r5, [r3, #0]
 8108440:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8108442:	f7ff ff47 	bl	81082d4 <_ZSt7forwardI12EEventClientEOT_RNSt16remove_referenceIS1_E4typeE>
 8108446:	4603      	mov	r3, r0
 8108448:	781b      	ldrb	r3, [r3, #0]
 810844a:	9304      	str	r3, [sp, #16]
 810844c:	9503      	str	r5, [sp, #12]
 810844e:	466d      	mov	r5, sp
 8108450:	f104 0308 	add.w	r3, r4, #8
 8108454:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8108458:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 810845c:	e894 000c 	ldmia.w	r4, {r2, r3}
 8108460:	4631      	mov	r1, r6
 8108462:	4640      	mov	r0, r8
 8108464:	f7ff fa93 	bl	810798e <_ZZN14DoIPDaemonTask7processEvENKUl10EEventType12UMessageData12EEventClientS2_E_clES0_S1_S2_S2_>
 8108468:	bf00      	nop
 810846a:	3710      	adds	r7, #16
 810846c:	46bd      	mov	sp, r7
 810846e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08108472 <_ZNSt9_Any_data9_M_accessIPKSt9type_infoEERT_v>:
      _M_access() noexcept
 8108472:	b580      	push	{r7, lr}
 8108474:	b082      	sub	sp, #8
 8108476:	af00      	add	r7, sp, #0
 8108478:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 810847a:	6878      	ldr	r0, [r7, #4]
 810847c:	f7ff f9a0 	bl	81077c0 <_ZNSt9_Any_data9_M_accessEv>
 8108480:	4603      	mov	r3, r0
 8108482:	4618      	mov	r0, r3
 8108484:	3708      	adds	r7, #8
 8108486:	46bd      	mov	sp, r7
 8108488:	bd80      	pop	{r7, pc}

0810848a <_ZNSt14_Function_base13_Base_managerIZN14DoIPDaemonTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E15_M_init_functorIRKS5_EEvRSt9_Any_dataOT_>:
	  _M_init_functor(_Any_data& __functor, _Fn&& __f)
 810848a:	b590      	push	{r4, r7, lr}
 810848c:	b083      	sub	sp, #12
 810848e:	af00      	add	r7, sp, #0
 8108490:	6078      	str	r0, [r7, #4]
 8108492:	6039      	str	r1, [r7, #0]
	    _M_create(__functor, std::forward<_Fn>(__f), _Local_storage());
 8108494:	6838      	ldr	r0, [r7, #0]
 8108496:	f000 f816 	bl	81084c6 <_ZSt7forwardIRKZN14DoIPDaemonTask7processEvEUl10EEventType12UMessageData12EEventClientS3_E_EOT_RNSt16remove_referenceIS7_E4typeE>
 810849a:	4603      	mov	r3, r0
 810849c:	4622      	mov	r2, r4
 810849e:	4619      	mov	r1, r3
 81084a0:	6878      	ldr	r0, [r7, #4]
 81084a2:	f000 f81b 	bl	81084dc <_ZNSt14_Function_base13_Base_managerIZN14DoIPDaemonTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E9_M_createIRKS5_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>
	  }
 81084a6:	bf00      	nop
 81084a8:	370c      	adds	r7, #12
 81084aa:	46bd      	mov	sp, r7
 81084ac:	bd90      	pop	{r4, r7, pc}

081084ae <_ZNSt14_Function_base13_Base_managerIZN14DoIPDaemonTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>:
	_M_destroy(_Any_data& __victim, true_type)
 81084ae:	b580      	push	{r7, lr}
 81084b0:	b082      	sub	sp, #8
 81084b2:	af00      	add	r7, sp, #0
 81084b4:	6078      	str	r0, [r7, #4]
 81084b6:	7039      	strb	r1, [r7, #0]
	  __victim._M_access<_Functor>().~_Functor();
 81084b8:	6878      	ldr	r0, [r7, #4]
 81084ba:	f000 f828 	bl	810850e <_ZNSt9_Any_data9_M_accessIZN14DoIPDaemonTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_EERT_v>
	}
 81084be:	bf00      	nop
 81084c0:	3708      	adds	r7, #8
 81084c2:	46bd      	mov	sp, r7
 81084c4:	bd80      	pop	{r7, pc}

081084c6 <_ZSt7forwardIRKZN14DoIPDaemonTask7processEvEUl10EEventType12UMessageData12EEventClientS3_E_EOT_RNSt16remove_referenceIS7_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 81084c6:	b480      	push	{r7}
 81084c8:	b083      	sub	sp, #12
 81084ca:	af00      	add	r7, sp, #0
 81084cc:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 81084ce:	687b      	ldr	r3, [r7, #4]
 81084d0:	4618      	mov	r0, r3
 81084d2:	370c      	adds	r7, #12
 81084d4:	46bd      	mov	sp, r7
 81084d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81084da:	4770      	bx	lr

081084dc <_ZNSt14_Function_base13_Base_managerIZN14DoIPDaemonTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E9_M_createIRKS5_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>:
	  _M_create(_Any_data& __dest, _Fn&& __f, true_type)
 81084dc:	b590      	push	{r4, r7, lr}
 81084de:	b085      	sub	sp, #20
 81084e0:	af00      	add	r7, sp, #0
 81084e2:	60f8      	str	r0, [r7, #12]
 81084e4:	60b9      	str	r1, [r7, #8]
 81084e6:	713a      	strb	r2, [r7, #4]
	    ::new (__dest._M_access()) _Functor(std::forward<_Fn>(__f));
 81084e8:	68f8      	ldr	r0, [r7, #12]
 81084ea:	f7ff f969 	bl	81077c0 <_ZNSt9_Any_data9_M_accessEv>
 81084ee:	4603      	mov	r3, r0
 81084f0:	4619      	mov	r1, r3
 81084f2:	2004      	movs	r0, #4
 81084f4:	f7f8 ff0a 	bl	810130c <_ZnwjPv>
 81084f8:	4604      	mov	r4, r0
 81084fa:	68b8      	ldr	r0, [r7, #8]
 81084fc:	f7ff ffe3 	bl	81084c6 <_ZSt7forwardIRKZN14DoIPDaemonTask7processEvEUl10EEventType12UMessageData12EEventClientS3_E_EOT_RNSt16remove_referenceIS7_E4typeE>
 8108500:	4603      	mov	r3, r0
 8108502:	681b      	ldr	r3, [r3, #0]
 8108504:	6023      	str	r3, [r4, #0]
	  }
 8108506:	bf00      	nop
 8108508:	3714      	adds	r7, #20
 810850a:	46bd      	mov	sp, r7
 810850c:	bd90      	pop	{r4, r7, pc}

0810850e <_ZNSt9_Any_data9_M_accessIZN14DoIPDaemonTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_EERT_v>:
      _M_access() noexcept
 810850e:	b580      	push	{r7, lr}
 8108510:	b082      	sub	sp, #8
 8108512:	af00      	add	r7, sp, #0
 8108514:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8108516:	6878      	ldr	r0, [r7, #4]
 8108518:	f7ff f952 	bl	81077c0 <_ZNSt9_Any_data9_M_accessEv>
 810851c:	4603      	mov	r3, r0
 810851e:	4618      	mov	r0, r3
 8108520:	3708      	adds	r7, #8
 8108522:	46bd      	mov	sp, r7
 8108524:	bd80      	pop	{r7, pc}
	...

08108528 <_Z41__static_initialization_and_destruction_0ii>:
 8108528:	b580      	push	{r7, lr}
 810852a:	b0ea      	sub	sp, #424	@ 0x1a8
 810852c:	af04      	add	r7, sp, #16
 810852e:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8108532:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8108536:	6018      	str	r0, [r3, #0]
 8108538:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 810853c:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8108540:	6019      	str	r1, [r3, #0]
 8108542:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8108546:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 810854a:	681b      	ldr	r3, [r3, #0]
 810854c:	2b01      	cmp	r3, #1
 810854e:	f040 8255 	bne.w	81089fc <_Z41__static_initialization_and_destruction_0ii+0x4d4>
 8108552:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8108556:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 810855a:	681b      	ldr	r3, [r3, #0]
 810855c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8108560:	4293      	cmp	r3, r2
 8108562:	f040 824b 	bne.w	81089fc <_Z41__static_initialization_and_destruction_0ii+0x4d4>
        
        IHKA_EVAPORATOR_TEMPERATURE_SENSOR = EVENT_DATA_UPDATE_IHKA_EVAPORATOR_TEMPERATURE_SENSOR,
        IHKA_TEMPERATURE_SELECTOR = EVENT_DATA_UPDATE_IHKA_TEMPERATURE_SELECTOR,
    };

    const std::unordered_map<EDoIPRequest, std::pair<std::variant<EUDSDID, EDynamicDataIndentifierRequestCode>, EECUAddress>> dataIdentifierMap =
 8108566:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 810856a:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 810856e:	4618      	mov	r0, r3
 8108570:	23f0      	movs	r3, #240	@ 0xf0
 8108572:	461a      	mov	r2, r3
 8108574:	2100      	movs	r1, #0
 8108576:	f01e fb91 	bl	8126c9c <memset>
 810857a:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 810857e:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8108582:	4aec      	ldr	r2, [pc, #944]	@ (8108934 <_Z41__static_initialization_and_destruction_0ii+0x40c>)
 8108584:	605a      	str	r2, [r3, #4]
 8108586:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 810858a:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 810858e:	2201      	movs	r2, #1
 8108590:	721a      	strb	r2, [r3, #8]
 8108592:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8108596:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 810859a:	2212      	movs	r2, #18
 810859c:	731a      	strb	r2, [r3, #12]
 810859e:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 81085a2:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 81085a6:	2201      	movs	r2, #1
 81085a8:	741a      	strb	r2, [r3, #16]
 81085aa:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 81085ae:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 81085b2:	4ae1      	ldr	r2, [pc, #900]	@ (8108938 <_Z41__static_initialization_and_destruction_0ii+0x410>)
 81085b4:	615a      	str	r2, [r3, #20]
 81085b6:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 81085ba:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 81085be:	2201      	movs	r2, #1
 81085c0:	761a      	strb	r2, [r3, #24]
 81085c2:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 81085c6:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 81085ca:	2212      	movs	r2, #18
 81085cc:	771a      	strb	r2, [r3, #28]
 81085ce:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 81085d2:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 81085d6:	2202      	movs	r2, #2
 81085d8:	f883 2020 	strb.w	r2, [r3, #32]
 81085dc:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 81085e0:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 81085e4:	4ad5      	ldr	r2, [pc, #852]	@ (810893c <_Z41__static_initialization_and_destruction_0ii+0x414>)
 81085e6:	625a      	str	r2, [r3, #36]	@ 0x24
 81085e8:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 81085ec:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 81085f0:	2201      	movs	r2, #1
 81085f2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
 81085f6:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 81085fa:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 81085fe:	2212      	movs	r2, #18
 8108600:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
 8108604:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8108608:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 810860c:	2203      	movs	r2, #3
 810860e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
 8108612:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8108616:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 810861a:	4ac9      	ldr	r2, [pc, #804]	@ (8108940 <_Z41__static_initialization_and_destruction_0ii+0x418>)
 810861c:	635a      	str	r2, [r3, #52]	@ 0x34
 810861e:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8108622:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8108626:	2201      	movs	r2, #1
 8108628:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
 810862c:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8108630:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8108634:	2212      	movs	r2, #18
 8108636:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 810863a:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 810863e:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8108642:	2204      	movs	r2, #4
 8108644:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8108648:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 810864c:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8108650:	4abc      	ldr	r2, [pc, #752]	@ (8108944 <_Z41__static_initialization_and_destruction_0ii+0x41c>)
 8108652:	645a      	str	r2, [r3, #68]	@ 0x44
 8108654:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8108658:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 810865c:	2201      	movs	r2, #1
 810865e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
 8108662:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8108666:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 810866a:	2212      	movs	r2, #18
 810866c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
 8108670:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8108674:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8108678:	2205      	movs	r2, #5
 810867a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 810867e:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8108682:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8108686:	4ab0      	ldr	r2, [pc, #704]	@ (8108948 <_Z41__static_initialization_and_destruction_0ii+0x420>)
 8108688:	655a      	str	r2, [r3, #84]	@ 0x54
 810868a:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 810868e:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8108692:	2201      	movs	r2, #1
 8108694:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8108698:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 810869c:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 81086a0:	2212      	movs	r2, #18
 81086a2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
 81086a6:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 81086aa:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 81086ae:	2206      	movs	r2, #6
 81086b0:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
 81086b4:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 81086b8:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 81086bc:	4aa3      	ldr	r2, [pc, #652]	@ (810894c <_Z41__static_initialization_and_destruction_0ii+0x424>)
 81086be:	665a      	str	r2, [r3, #100]	@ 0x64
 81086c0:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 81086c4:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 81086c8:	2201      	movs	r2, #1
 81086ca:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
 81086ce:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 81086d2:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 81086d6:	2212      	movs	r2, #18
 81086d8:	f883 206c 	strb.w	r2, [r3, #108]	@ 0x6c
 81086dc:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 81086e0:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 81086e4:	2207      	movs	r2, #7
 81086e6:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
 81086ea:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 81086ee:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 81086f2:	4a97      	ldr	r2, [pc, #604]	@ (8108950 <_Z41__static_initialization_and_destruction_0ii+0x428>)
 81086f4:	675a      	str	r2, [r3, #116]	@ 0x74
 81086f6:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 81086fa:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 81086fe:	2201      	movs	r2, #1
 8108700:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
 8108704:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8108708:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 810870c:	2212      	movs	r2, #18
 810870e:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
 8108712:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8108716:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 810871a:	2208      	movs	r2, #8
 810871c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
 8108720:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8108724:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8108728:	f24d 120d 	movw	r2, #53517	@ 0xd10d
 810872c:	f8a3 2084 	strh.w	r2, [r3, #132]	@ 0x84
 8108730:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8108734:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8108738:	2260      	movs	r2, #96	@ 0x60
 810873a:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c
 810873e:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8108742:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8108746:	2209      	movs	r2, #9
 8108748:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
 810874c:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8108750:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8108754:	f24d 1207 	movw	r2, #53511	@ 0xd107
 8108758:	f8a3 2094 	strh.w	r2, [r3, #148]	@ 0x94
 810875c:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8108760:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8108764:	2260      	movs	r2, #96	@ 0x60
 8108766:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
 810876a:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 810876e:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8108772:	220a      	movs	r2, #10
 8108774:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
 8108778:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 810877c:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8108780:	f24d 1212 	movw	r2, #53522	@ 0xd112
 8108784:	f8a3 20a4 	strh.w	r2, [r3, #164]	@ 0xa4
 8108788:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 810878c:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8108790:	2260      	movs	r2, #96	@ 0x60
 8108792:	f883 20ac 	strb.w	r2, [r3, #172]	@ 0xac
 8108796:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 810879a:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 810879e:	220b      	movs	r2, #11
 81087a0:	f883 20b0 	strb.w	r2, [r3, #176]	@ 0xb0
 81087a4:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 81087a8:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 81087ac:	f24d 1206 	movw	r2, #53510	@ 0xd106
 81087b0:	f8a3 20b4 	strh.w	r2, [r3, #180]	@ 0xb4
 81087b4:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 81087b8:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 81087bc:	2260      	movs	r2, #96	@ 0x60
 81087be:	f883 20bc 	strb.w	r2, [r3, #188]	@ 0xbc
 81087c2:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 81087c6:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 81087ca:	220c      	movs	r2, #12
 81087cc:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0
 81087d0:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 81087d4:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 81087d8:	f24d 121f 	movw	r2, #53535	@ 0xd11f
 81087dc:	f8a3 20c4 	strh.w	r2, [r3, #196]	@ 0xc4
 81087e0:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 81087e4:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 81087e8:	2260      	movs	r2, #96	@ 0x60
 81087ea:	f883 20cc 	strb.w	r2, [r3, #204]	@ 0xcc
 81087ee:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 81087f2:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 81087f6:	220d      	movs	r2, #13
 81087f8:	f883 20d0 	strb.w	r2, [r3, #208]	@ 0xd0
 81087fc:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8108800:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8108804:	f64d 125c 	movw	r2, #55644	@ 0xd95c
 8108808:	f8a3 20d4 	strh.w	r2, [r3, #212]	@ 0xd4
 810880c:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8108810:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8108814:	2278      	movs	r2, #120	@ 0x78
 8108816:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc
 810881a:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 810881e:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8108822:	220e      	movs	r2, #14
 8108824:	f883 20e0 	strb.w	r2, [r3, #224]	@ 0xe0
 8108828:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 810882c:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8108830:	f64d 1277 	movw	r2, #55671	@ 0xd977
 8108834:	f8a3 20e4 	strh.w	r2, [r3, #228]	@ 0xe4
 8108838:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 810883c:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8108840:	2278      	movs	r2, #120	@ 0x78
 8108842:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
 8108846:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 810884a:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 810884e:	f107 0210 	add.w	r2, r7, #16
 8108852:	601a      	str	r2, [r3, #0]
 8108854:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8108858:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 810885c:	220f      	movs	r2, #15
 810885e:	605a      	str	r2, [r3, #4]
 8108860:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8108864:	4618      	mov	r0, r3
 8108866:	f7f8 ffb9 	bl	81017dc <_ZNSaISt4pairIKN7APIDoIP12EDoIPRequestES_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEEEC1Ev>
 810886a:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 810886e:	f5a3 72c8 	sub.w	r2, r3, #400	@ 0x190
 8108872:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8108876:	9302      	str	r3, [sp, #8]
 8108878:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 810887c:	9301      	str	r3, [sp, #4]
 810887e:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8108882:	9300      	str	r3, [sp, #0]
 8108884:	2300      	movs	r3, #0
 8108886:	ca06      	ldmia	r2, {r1, r2}
 8108888:	4832      	ldr	r0, [pc, #200]	@ (8108954 <_Z41__static_initialization_and_destruction_0ii+0x42c>)
 810888a:	f7f8 ffbe 	bl	810180a <_ZNSt13unordered_mapIN7APIDoIP12EDoIPRequestESt4pairISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressESt4hashIS1_ESt8equal_toIS1_ESaIS2_IKS1_S8_EEEC1ESt16initializer_listISE_EjRKSA_RKSC_RKSF_>
 810888e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8108892:	4618      	mov	r0, r3
 8108894:	f7f8 ffae 	bl	81017f4 <_ZNSaISt4pairIKN7APIDoIP12EDoIPRequestES_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEEED1Ev>
    void prepareFirstRequestForDynamicData(uint8_t preparedPayload[], EECUAddress targetEcuAddr);
    void prepareSecondRequestForDynamicData(uint8_t preparedPayload[], EECUAddress targetEcuAddr, EDynamicDataIndentifierRequestCode ddirCode);

    std::optional<SMessage> extractDataFromResponse(const uint8_t dataPayload[], size_t size, EDoIPRequest dataType);

    const std::unordered_map<EDoIPRequest, const char*> EDoIPRequest_ToCStringMap = 
 8108898:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 810889c:	2278      	movs	r2, #120	@ 0x78
 810889e:	2100      	movs	r1, #0
 81088a0:	4618      	mov	r0, r3
 81088a2:	f01e f9fb 	bl	8126c9c <memset>
 81088a6:	4b2c      	ldr	r3, [pc, #176]	@ (8108958 <_Z41__static_initialization_and_destruction_0ii+0x430>)
 81088a8:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 81088ac:	2301      	movs	r3, #1
 81088ae:	f887 311c 	strb.w	r3, [r7, #284]	@ 0x11c
 81088b2:	4b2a      	ldr	r3, [pc, #168]	@ (810895c <_Z41__static_initialization_and_destruction_0ii+0x434>)
 81088b4:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 81088b8:	2302      	movs	r3, #2
 81088ba:	f887 3124 	strb.w	r3, [r7, #292]	@ 0x124
 81088be:	4b28      	ldr	r3, [pc, #160]	@ (8108960 <_Z41__static_initialization_and_destruction_0ii+0x438>)
 81088c0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 81088c4:	2303      	movs	r3, #3
 81088c6:	f887 312c 	strb.w	r3, [r7, #300]	@ 0x12c
 81088ca:	4b26      	ldr	r3, [pc, #152]	@ (8108964 <_Z41__static_initialization_and_destruction_0ii+0x43c>)
 81088cc:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 81088d0:	2304      	movs	r3, #4
 81088d2:	f887 3134 	strb.w	r3, [r7, #308]	@ 0x134
 81088d6:	4b24      	ldr	r3, [pc, #144]	@ (8108968 <_Z41__static_initialization_and_destruction_0ii+0x440>)
 81088d8:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 81088dc:	2305      	movs	r3, #5
 81088de:	f887 313c 	strb.w	r3, [r7, #316]	@ 0x13c
 81088e2:	4b22      	ldr	r3, [pc, #136]	@ (810896c <_Z41__static_initialization_and_destruction_0ii+0x444>)
 81088e4:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
 81088e8:	2306      	movs	r3, #6
 81088ea:	f887 3144 	strb.w	r3, [r7, #324]	@ 0x144
 81088ee:	4b20      	ldr	r3, [pc, #128]	@ (8108970 <_Z41__static_initialization_and_destruction_0ii+0x448>)
 81088f0:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
 81088f4:	2307      	movs	r3, #7
 81088f6:	f887 314c 	strb.w	r3, [r7, #332]	@ 0x14c
 81088fa:	4b1e      	ldr	r3, [pc, #120]	@ (8108974 <_Z41__static_initialization_and_destruction_0ii+0x44c>)
 81088fc:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8108900:	2308      	movs	r3, #8
 8108902:	f887 3154 	strb.w	r3, [r7, #340]	@ 0x154
 8108906:	4b1c      	ldr	r3, [pc, #112]	@ (8108978 <_Z41__static_initialization_and_destruction_0ii+0x450>)
 8108908:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 810890c:	2309      	movs	r3, #9
 810890e:	f887 315c 	strb.w	r3, [r7, #348]	@ 0x15c
 8108912:	4b1a      	ldr	r3, [pc, #104]	@ (810897c <_Z41__static_initialization_and_destruction_0ii+0x454>)
 8108914:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
 8108918:	230a      	movs	r3, #10
 810891a:	f887 3164 	strb.w	r3, [r7, #356]	@ 0x164
 810891e:	4b18      	ldr	r3, [pc, #96]	@ (8108980 <_Z41__static_initialization_and_destruction_0ii+0x458>)
 8108920:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
 8108924:	230b      	movs	r3, #11
 8108926:	f887 316c 	strb.w	r3, [r7, #364]	@ 0x16c
 810892a:	4b16      	ldr	r3, [pc, #88]	@ (8108984 <_Z41__static_initialization_and_destruction_0ii+0x45c>)
 810892c:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
 8108930:	230c      	movs	r3, #12
 8108932:	e029      	b.n	8108988 <_Z41__static_initialization_and_destruction_0ii+0x460>
 8108934:	44020102 	.word	0x44020102
 8108938:	48070102 	.word	0x48070102
 810893c:	43000101 	.word	0x43000101
 8108940:	46090101 	.word	0x46090101
 8108944:	42040101 	.word	0x42040101
 8108948:	42080102 	.word	0x42080102
 810894c:	481a0102 	.word	0x481a0102
 8108950:	4a290101 	.word	0x4a290101
 8108954:	100002d0 	.word	0x100002d0
 8108958:	08127c18 	.word	0x08127c18
 810895c:	08127c2c 	.word	0x08127c2c
 8108960:	08127c40 	.word	0x08127c40
 8108964:	08127c50 	.word	0x08127c50
 8108968:	08127c5c 	.word	0x08127c5c
 810896c:	08127c6c 	.word	0x08127c6c
 8108970:	08127c7c 	.word	0x08127c7c
 8108974:	08127c8c 	.word	0x08127c8c
 8108978:	08127ca0 	.word	0x08127ca0
 810897c:	08127cac 	.word	0x08127cac
 8108980:	08127cb8 	.word	0x08127cb8
 8108984:	08127cc8 	.word	0x08127cc8
 8108988:	f887 3174 	strb.w	r3, [r7, #372]	@ 0x174
 810898c:	4b29      	ldr	r3, [pc, #164]	@ (8108a34 <_Z41__static_initialization_and_destruction_0ii+0x50c>)
 810898e:	f8c7 3178 	str.w	r3, [r7, #376]	@ 0x178
 8108992:	230d      	movs	r3, #13
 8108994:	f887 317c 	strb.w	r3, [r7, #380]	@ 0x17c
 8108998:	4b27      	ldr	r3, [pc, #156]	@ (8108a38 <_Z41__static_initialization_and_destruction_0ii+0x510>)
 810899a:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 810899e:	230e      	movs	r3, #14
 81089a0:	f887 3184 	strb.w	r3, [r7, #388]	@ 0x184
 81089a4:	4b25      	ldr	r3, [pc, #148]	@ (8108a3c <_Z41__static_initialization_and_destruction_0ii+0x514>)
 81089a6:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 81089aa:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 81089ae:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 81089b2:	230f      	movs	r3, #15
 81089b4:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 81089b8:	f507 73ca 	add.w	r3, r7, #404	@ 0x194
 81089bc:	4618      	mov	r0, r3
 81089be:	f7f8 ff3d 	bl	810183c <_ZNSaISt4pairIKN7APIDoIP12EDoIPRequestEPKcEEC1Ev>
 81089c2:	f507 73ca 	add.w	r3, r7, #404	@ 0x194
 81089c6:	9302      	str	r3, [sp, #8]
 81089c8:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 81089cc:	9301      	str	r3, [sp, #4]
 81089ce:	f507 73c6 	add.w	r3, r7, #396	@ 0x18c
 81089d2:	9300      	str	r3, [sp, #0]
 81089d4:	2300      	movs	r3, #0
 81089d6:	f507 7286 	add.w	r2, r7, #268	@ 0x10c
 81089da:	ca06      	ldmia	r2, {r1, r2}
 81089dc:	4818      	ldr	r0, [pc, #96]	@ (8108a40 <_Z41__static_initialization_and_destruction_0ii+0x518>)
 81089de:	f7f8 ff44 	bl	810186a <_ZNSt13unordered_mapIN7APIDoIP12EDoIPRequestEPKcSt4hashIS1_ESt8equal_toIS1_ESaISt4pairIKS1_S3_EEEC1ESt16initializer_listISA_EjRKS5_RKS7_RKSB_>
 81089e2:	f507 73ca 	add.w	r3, r7, #404	@ 0x194
 81089e6:	4618      	mov	r0, r3
 81089e8:	f7f8 ff34 	bl	8101854 <_ZNSaISt4pairIKN7APIDoIP12EDoIPRequestEPKcEED1Ev>
QueueHandle_t connectionEventsQueue = xQueueCreate(16, sizeof(SMessage));
 81089ec:	2200      	movs	r2, #0
 81089ee:	211c      	movs	r1, #28
 81089f0:	2010      	movs	r0, #16
 81089f2:	f00e f91a 	bl	8116c2a <xQueueGenericCreate>
 81089f6:	4603      	mov	r3, r0
 81089f8:	4a12      	ldr	r2, [pc, #72]	@ (8108a44 <_Z41__static_initialization_and_destruction_0ii+0x51c>)
 81089fa:	6013      	str	r3, [r2, #0]
 81089fc:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8108a00:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8108a04:	681b      	ldr	r3, [r3, #0]
 8108a06:	2b00      	cmp	r3, #0
 8108a08:	d10e      	bne.n	8108a28 <_Z41__static_initialization_and_destruction_0ii+0x500>
 8108a0a:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8108a0e:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8108a12:	681b      	ldr	r3, [r3, #0]
 8108a14:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8108a18:	4293      	cmp	r3, r2
 8108a1a:	d105      	bne.n	8108a28 <_Z41__static_initialization_and_destruction_0ii+0x500>
 8108a1c:	4808      	ldr	r0, [pc, #32]	@ (8108a40 <_Z41__static_initialization_and_destruction_0ii+0x518>)
 8108a1e:	f7fb fb79 	bl	8104114 <_ZNSt13unordered_mapIN7APIDoIP12EDoIPRequestEPKcSt4hashIS1_ESt8equal_toIS1_ESaISt4pairIKS1_S3_EEED1Ev>
    const std::unordered_map<EDoIPRequest, std::pair<std::variant<EUDSDID, EDynamicDataIndentifierRequestCode>, EECUAddress>> dataIdentifierMap =
 8108a22:	4809      	ldr	r0, [pc, #36]	@ (8108a48 <_Z41__static_initialization_and_destruction_0ii+0x520>)
 8108a24:	f7fb fb83 	bl	810412e <_ZNSt13unordered_mapIN7APIDoIP12EDoIPRequestESt4pairISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressESt4hashIS1_ESt8equal_toIS1_ESaIS2_IKS1_S8_EEED1Ev>
}
 8108a28:	bf00      	nop
 8108a2a:	f507 77cc 	add.w	r7, r7, #408	@ 0x198
 8108a2e:	46bd      	mov	sp, r7
 8108a30:	bd80      	pop	{r7, pc}
 8108a32:	bf00      	nop
 8108a34:	08127ce0 	.word	0x08127ce0
 8108a38:	08127cf4 	.word	0x08127cf4
 8108a3c:	08127d04 	.word	0x08127d04
 8108a40:	100002ec 	.word	0x100002ec
 8108a44:	10000308 	.word	0x10000308
 8108a48:	100002d0 	.word	0x100002d0

08108a4c <_GLOBAL__sub_I_connectionEventsQueue>:
 8108a4c:	b580      	push	{r7, lr}
 8108a4e:	af00      	add	r7, sp, #0
 8108a50:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8108a54:	2001      	movs	r0, #1
 8108a56:	f7ff fd67 	bl	8108528 <_Z41__static_initialization_and_destruction_0ii>
 8108a5a:	bd80      	pop	{r7, pc}

08108a5c <_GLOBAL__sub_D_connectionEventsQueue>:
 8108a5c:	b580      	push	{r7, lr}
 8108a5e:	af00      	add	r7, sp, #0
 8108a60:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8108a64:	2000      	movs	r0, #0
 8108a66:	f7ff fd5f 	bl	8108528 <_Z41__static_initialization_and_destruction_0ii>
 8108a6a:	bd80      	pop	{r7, pc}

08108a6c <_ZNKSt14_Function_base8_M_emptyEv>:
    bool _M_empty() const { return !_M_manager; }
 8108a6c:	b480      	push	{r7}
 8108a6e:	b083      	sub	sp, #12
 8108a70:	af00      	add	r7, sp, #0
 8108a72:	6078      	str	r0, [r7, #4]
 8108a74:	687b      	ldr	r3, [r7, #4]
 8108a76:	689b      	ldr	r3, [r3, #8]
 8108a78:	2b00      	cmp	r3, #0
 8108a7a:	bf0c      	ite	eq
 8108a7c:	2301      	moveq	r3, #1
 8108a7e:	2300      	movne	r3, #0
 8108a80:	b2db      	uxtb	r3, r3
 8108a82:	4618      	mov	r0, r3
 8108a84:	370c      	adds	r7, #12
 8108a86:	46bd      	mov	sp, r7
 8108a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108a8c:	4770      	bx	lr
	...

08108a90 <_ZN8EventBusC1EP15QueueDefinition12EEventClient>:
#include "EventBus.h"

extern QueueHandle_t queueToEventManagerCM4;

EventBus::EventBus(QueueHandle_t queueSelf, EEventClient senderSelf)
 8108a90:	b480      	push	{r7}
 8108a92:	b085      	sub	sp, #20
 8108a94:	af00      	add	r7, sp, #0
 8108a96:	60f8      	str	r0, [r7, #12]
 8108a98:	60b9      	str	r1, [r7, #8]
 8108a9a:	4613      	mov	r3, r2
 8108a9c:	71fb      	strb	r3, [r7, #7]
					 : queue_self(queueSelf),
 8108a9e:	68fb      	ldr	r3, [r7, #12]
 8108aa0:	68ba      	ldr	r2, [r7, #8]
 8108aa2:	601a      	str	r2, [r3, #0]
					   sender_self(senderSelf),
 8108aa4:	68fb      	ldr	r3, [r7, #12]
 8108aa6:	79fa      	ldrb	r2, [r7, #7]
 8108aa8:	711a      	strb	r2, [r3, #4]
					   queue_event_manager(queueToEventManagerCM4){}
 8108aaa:	4b05      	ldr	r3, [pc, #20]	@ (8108ac0 <_ZN8EventBusC1EP15QueueDefinition12EEventClient+0x30>)
 8108aac:	681a      	ldr	r2, [r3, #0]
 8108aae:	68fb      	ldr	r3, [r7, #12]
 8108ab0:	609a      	str	r2, [r3, #8]
 8108ab2:	68fb      	ldr	r3, [r7, #12]
 8108ab4:	4618      	mov	r0, r3
 8108ab6:	3714      	adds	r7, #20
 8108ab8:	46bd      	mov	sp, r7
 8108aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108abe:	4770      	bx	lr
 8108ac0:	100001e8 	.word	0x100001e8

08108ac4 <_ZN8EventBus4sendE10EEventType12UMessageData12EEventClient>:

bool EventBus::send(EEventType event, UMessageData message, EEventClient eventReceiver)
{
 8108ac4:	b082      	sub	sp, #8
 8108ac6:	b5b0      	push	{r4, r5, r7, lr}
 8108ac8:	b08a      	sub	sp, #40	@ 0x28
 8108aca:	af00      	add	r7, sp, #0
 8108acc:	6078      	str	r0, [r7, #4]
 8108ace:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 8108ad2:	e880 000c 	stmia.w	r0, {r2, r3}
 8108ad6:	460b      	mov	r3, r1
 8108ad8:	70fb      	strb	r3, [r7, #3]
	if(queue_event_manager)
 8108ada:	687b      	ldr	r3, [r7, #4]
 8108adc:	689b      	ldr	r3, [r3, #8]
 8108ade:	2b00      	cmp	r3, #0
 8108ae0:	d021      	beq.n	8108b26 <_ZN8EventBus4sendE10EEventType12UMessageData12EEventClient+0x62>
	{
		SMessage msg = {event, message, sender_self, eventReceiver};
 8108ae2:	78fb      	ldrb	r3, [r7, #3]
 8108ae4:	723b      	strb	r3, [r7, #8]
 8108ae6:	f107 040c 	add.w	r4, r7, #12
 8108aea:	f107 0538 	add.w	r5, r7, #56	@ 0x38
 8108aee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8108af0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8108af2:	682b      	ldr	r3, [r5, #0]
 8108af4:	6023      	str	r3, [r4, #0]
 8108af6:	687b      	ldr	r3, [r7, #4]
 8108af8:	791b      	ldrb	r3, [r3, #4]
 8108afa:	f887 3020 	strb.w	r3, [r7, #32]
 8108afe:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8108b02:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
		BaseType_t ret = xQueueSend(queue_event_manager, static_cast<void*>(&msg), static_cast<TickType_t>(10));
 8108b06:	687b      	ldr	r3, [r7, #4]
 8108b08:	6898      	ldr	r0, [r3, #8]
 8108b0a:	f107 0108 	add.w	r1, r7, #8
 8108b0e:	2300      	movs	r3, #0
 8108b10:	220a      	movs	r2, #10
 8108b12:	f00e fa0f 	bl	8116f34 <xQueueGenericSend>
 8108b16:	6278      	str	r0, [r7, #36]	@ 0x24
		if( ret != pdPASS)
 8108b18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8108b1a:	2b01      	cmp	r3, #1
 8108b1c:	d001      	beq.n	8108b22 <_ZN8EventBus4sendE10EEventType12UMessageData12EEventClient+0x5e>
		{
			return false;
 8108b1e:	2300      	movs	r3, #0
 8108b20:	e002      	b.n	8108b28 <_ZN8EventBus4sendE10EEventType12UMessageData12EEventClient+0x64>
		}
		return true;
 8108b22:	2301      	movs	r3, #1
 8108b24:	e000      	b.n	8108b28 <_ZN8EventBus4sendE10EEventType12UMessageData12EEventClient+0x64>
	}
	return false;
 8108b26:	2300      	movs	r3, #0
}
 8108b28:	4618      	mov	r0, r3
 8108b2a:	3728      	adds	r7, #40	@ 0x28
 8108b2c:	46bd      	mov	sp, r7
 8108b2e:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8108b32:	b002      	add	sp, #8
 8108b34:	4770      	bx	lr

08108b36 <_ZN8EventBus7receiveESt8functionIFv10EEventType12UMessageData12EEventClientS3_EE>:

void EventBus::receive(OnEventFunction on_event_function)
{
 8108b36:	b5b0      	push	{r4, r5, r7, lr}
 8108b38:	b090      	sub	sp, #64	@ 0x40
 8108b3a:	af06      	add	r7, sp, #24
 8108b3c:	6078      	str	r0, [r7, #4]
 8108b3e:	6039      	str	r1, [r7, #0]
	if(queue_self)
 8108b40:	687b      	ldr	r3, [r7, #4]
 8108b42:	681b      	ldr	r3, [r3, #0]
 8108b44:	2b00      	cmp	r3, #0
 8108b46:	d025      	beq.n	8108b94 <_ZN8EventBus7receiveESt8functionIFv10EEventType12UMessageData12EEventClientS3_EE+0x5e>
	{
		SMessage msg;

		while(xQueueReceive(queue_self, &(msg), static_cast<TickType_t>(0)) == pdTRUE)
 8108b48:	e014      	b.n	8108b74 <_ZN8EventBus7receiveESt8functionIFv10EEventType12UMessageData12EEventClientS3_EE+0x3e>
		{
			on_event_function(msg.event_type, msg.message_data, msg.event_sender, msg.event_receiver);
 8108b4a:	7b3d      	ldrb	r5, [r7, #12]
 8108b4c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8108b50:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 8108b54:	9204      	str	r2, [sp, #16]
 8108b56:	9303      	str	r3, [sp, #12]
 8108b58:	466c      	mov	r4, sp
 8108b5a:	f107 0318 	add.w	r3, r7, #24
 8108b5e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8108b62:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8108b66:	f107 0310 	add.w	r3, r7, #16
 8108b6a:	cb0c      	ldmia	r3, {r2, r3}
 8108b6c:	4629      	mov	r1, r5
 8108b6e:	6838      	ldr	r0, [r7, #0]
 8108b70:	f000 f814 	bl	8108b9c <_ZNKSt8functionIFv10EEventType12UMessageData12EEventClientS2_EEclES0_S1_S2_S2_>
		while(xQueueReceive(queue_self, &(msg), static_cast<TickType_t>(0)) == pdTRUE)
 8108b74:	687b      	ldr	r3, [r7, #4]
 8108b76:	681b      	ldr	r3, [r3, #0]
 8108b78:	f107 010c 	add.w	r1, r7, #12
 8108b7c:	2200      	movs	r2, #0
 8108b7e:	4618      	mov	r0, r3
 8108b80:	f00e fc08 	bl	8117394 <xQueueReceive>
 8108b84:	4603      	mov	r3, r0
 8108b86:	2b01      	cmp	r3, #1
 8108b88:	bf0c      	ite	eq
 8108b8a:	2301      	moveq	r3, #1
 8108b8c:	2300      	movne	r3, #0
 8108b8e:	b2db      	uxtb	r3, r3
 8108b90:	2b00      	cmp	r3, #0
 8108b92:	d1da      	bne.n	8108b4a <_ZN8EventBus7receiveESt8functionIFv10EEventType12UMessageData12EEventClientS3_EE+0x14>
		}
	}
}
 8108b94:	bf00      	nop
 8108b96:	3728      	adds	r7, #40	@ 0x28
 8108b98:	46bd      	mov	sp, r7
 8108b9a:	bdb0      	pop	{r4, r5, r7, pc}

08108b9c <_ZNKSt8functionIFv10EEventType12UMessageData12EEventClientS2_EEclES0_S1_S2_S2_>:
       *
       *  The function call operator invokes the target function object
       *  stored by `this`.
       */
      _Res
      operator()(_ArgTypes... __args) const
 8108b9c:	b082      	sub	sp, #8
 8108b9e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8108ba2:	b085      	sub	sp, #20
 8108ba4:	af02      	add	r7, sp, #8
 8108ba6:	6078      	str	r0, [r7, #4]
 8108ba8:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 8108bac:	e880 000c 	stmia.w	r0, {r2, r3}
 8108bb0:	460b      	mov	r3, r1
 8108bb2:	70fb      	strb	r3, [r7, #3]
      {
	if (_M_empty())
 8108bb4:	687b      	ldr	r3, [r7, #4]
 8108bb6:	4618      	mov	r0, r3
 8108bb8:	f7ff ff58 	bl	8108a6c <_ZNKSt14_Function_base8_M_emptyEv>
 8108bbc:	4603      	mov	r3, r0
 8108bbe:	2b00      	cmp	r3, #0
 8108bc0:	d001      	beq.n	8108bc6 <_ZNKSt8functionIFv10EEventType12UMessageData12EEventClientS2_EEclES0_S1_S2_S2_+0x2a>
	  __throw_bad_function_call();
 8108bc2:	f01c ffcc 	bl	8125b5e <_ZSt25__throw_bad_function_callv>
	return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8108bc6:	687b      	ldr	r3, [r7, #4]
 8108bc8:	68dc      	ldr	r4, [r3, #12]
 8108bca:	687d      	ldr	r5, [r7, #4]
 8108bcc:	1cfb      	adds	r3, r7, #3
 8108bce:	4618      	mov	r0, r3
 8108bd0:	f7ff fb6a 	bl	81082a8 <_ZSt7forwardI10EEventTypeEOT_RNSt16remove_referenceIS1_E4typeE>
 8108bd4:	4606      	mov	r6, r0
 8108bd6:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 8108bda:	f7ff fb70 	bl	81082be <_ZSt7forwardI12UMessageDataEOT_RNSt16remove_referenceIS1_E4typeE>
 8108bde:	4680      	mov	r8, r0
 8108be0:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8108be4:	4618      	mov	r0, r3
 8108be6:	f7ff fb75 	bl	81082d4 <_ZSt7forwardI12EEventClientEOT_RNSt16remove_referenceIS1_E4typeE>
 8108bea:	4681      	mov	r9, r0
 8108bec:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8108bf0:	4618      	mov	r0, r3
 8108bf2:	f7ff fb6f 	bl	81082d4 <_ZSt7forwardI12EEventClientEOT_RNSt16remove_referenceIS1_E4typeE>
 8108bf6:	4603      	mov	r3, r0
 8108bf8:	9300      	str	r3, [sp, #0]
 8108bfa:	464b      	mov	r3, r9
 8108bfc:	4642      	mov	r2, r8
 8108bfe:	4631      	mov	r1, r6
 8108c00:	4628      	mov	r0, r5
 8108c02:	47a0      	blx	r4
 8108c04:	bf00      	nop
      }
 8108c06:	370c      	adds	r7, #12
 8108c08:	46bd      	mov	sp, r7
 8108c0a:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8108c0e:	b002      	add	sp, #8
 8108c10:	4770      	bx	lr

08108c12 <_ZSt21is_constant_evaluatedv>:

  /// Returns true only when called during constant evaluation.
  /// @since C++20
  constexpr inline bool
  is_constant_evaluated() noexcept
  {
 8108c12:	b480      	push	{r7}
 8108c14:	af00      	add	r7, sp, #0
#if __cpp_if_consteval >= 202106L
    if consteval { return true; } else { return false; }
#else
    return __builtin_is_constant_evaluated();
 8108c16:	2300      	movs	r3, #0
#endif
  }
 8108c18:	4618      	mov	r0, r3
 8108c1a:	46bd      	mov	sp, r7
 8108c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108c20:	4770      	bx	lr

08108c22 <_ZNSt15_Rb_tree_headerC1Ev>:
  struct _Rb_tree_header
  {
    _Rb_tree_node_base	_M_header;
    size_t		_M_node_count; // Keeps track of size of tree.

    _Rb_tree_header() _GLIBCXX_NOEXCEPT
 8108c22:	b580      	push	{r7, lr}
 8108c24:	b082      	sub	sp, #8
 8108c26:	af00      	add	r7, sp, #0
 8108c28:	6078      	str	r0, [r7, #4]
    {
      _M_header._M_color = _S_red;
 8108c2a:	687b      	ldr	r3, [r7, #4]
 8108c2c:	2200      	movs	r2, #0
 8108c2e:	701a      	strb	r2, [r3, #0]
      _M_reset();
 8108c30:	6878      	ldr	r0, [r7, #4]
 8108c32:	f000 f805 	bl	8108c40 <_ZNSt15_Rb_tree_header8_M_resetEv>
    }
 8108c36:	687b      	ldr	r3, [r7, #4]
 8108c38:	4618      	mov	r0, r3
 8108c3a:	3708      	adds	r7, #8
 8108c3c:	46bd      	mov	sp, r7
 8108c3e:	bd80      	pop	{r7, pc}

08108c40 <_ZNSt15_Rb_tree_header8_M_resetEv>:

      __from._M_reset();
    }

    void
    _M_reset()
 8108c40:	b480      	push	{r7}
 8108c42:	b083      	sub	sp, #12
 8108c44:	af00      	add	r7, sp, #0
 8108c46:	6078      	str	r0, [r7, #4]
    {
      _M_header._M_parent = 0;
 8108c48:	687b      	ldr	r3, [r7, #4]
 8108c4a:	2200      	movs	r2, #0
 8108c4c:	605a      	str	r2, [r3, #4]
      _M_header._M_left = &_M_header;
 8108c4e:	687a      	ldr	r2, [r7, #4]
 8108c50:	687b      	ldr	r3, [r7, #4]
 8108c52:	609a      	str	r2, [r3, #8]
      _M_header._M_right = &_M_header;
 8108c54:	687a      	ldr	r2, [r7, #4]
 8108c56:	687b      	ldr	r3, [r7, #4]
 8108c58:	60da      	str	r2, [r3, #12]
      _M_node_count = 0;
 8108c5a:	687b      	ldr	r3, [r7, #4]
 8108c5c:	2200      	movs	r2, #0
 8108c5e:	611a      	str	r2, [r3, #16]
    }
 8108c60:	bf00      	nop
 8108c62:	370c      	adds	r7, #12
 8108c64:	46bd      	mov	sp, r7
 8108c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108c6a:	4770      	bx	lr

08108c6c <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EEC1Ev>:
    public:
      // allocation/deallocation
#if __cplusplus < 201103L
      _Rb_tree() { }
#else
      _Rb_tree() = default;
 8108c6c:	b580      	push	{r7, lr}
 8108c6e:	b082      	sub	sp, #8
 8108c70:	af00      	add	r7, sp, #0
 8108c72:	6078      	str	r0, [r7, #4]
 8108c74:	687b      	ldr	r3, [r7, #4]
 8108c76:	4618      	mov	r0, r3
 8108c78:	f000 f955 	bl	8108f26 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE13_Rb_tree_implISA_Lb1EEC1Ev>
 8108c7c:	687b      	ldr	r3, [r7, #4]
 8108c7e:	4618      	mov	r0, r3
 8108c80:	3708      	adds	r7, #8
 8108c82:	46bd      	mov	sp, r7
 8108c84:	bd80      	pop	{r7, pc}

08108c86 <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEEC1Ev>:
       *  @brief  Default constructor creates no elements.
       */
#if __cplusplus < 201103L
      map() : _M_t() { }
#else
      map() = default;
 8108c86:	b580      	push	{r7, lr}
 8108c88:	b082      	sub	sp, #8
 8108c8a:	af00      	add	r7, sp, #0
 8108c8c:	6078      	str	r0, [r7, #4]
 8108c8e:	687b      	ldr	r3, [r7, #4]
 8108c90:	4618      	mov	r0, r3
 8108c92:	f7ff ffeb 	bl	8108c6c <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EEC1Ev>
 8108c96:	687b      	ldr	r3, [r7, #4]
 8108c98:	4618      	mov	r0, r3
 8108c9a:	3708      	adds	r7, #8
 8108c9c:	46bd      	mov	sp, r7
 8108c9e:	bd80      	pop	{r7, pc}

08108ca0 <_ZN19EventManagerCM4TaskC1Ev>:
		/* event queues of clients */
		EVENT_QUEUE_DAEMON_NATIVE = EVENT_CLIENT_DAEMON_NATIVE,
		EVENT_QUEUE_ETHERNET_CONNECTION_MANAGER = EVENT_CLIENT_ETHERNET_CONNECTION_MANAGER
	};

	EventManagerCM4Task() {};
 8108ca0:	b580      	push	{r7, lr}
 8108ca2:	b082      	sub	sp, #8
 8108ca4:	af00      	add	r7, sp, #0
 8108ca6:	6078      	str	r0, [r7, #4]
 8108ca8:	687b      	ldr	r3, [r7, #4]
 8108caa:	4618      	mov	r0, r3
 8108cac:	f7ff ffeb 	bl	8108c86 <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEEC1Ev>
 8108cb0:	687b      	ldr	r3, [r7, #4]
 8108cb2:	4618      	mov	r0, r3
 8108cb4:	3708      	adds	r7, #8
 8108cb6:	46bd      	mov	sp, r7
 8108cb8:	bd80      	pop	{r7, pc}
	...

08108cbc <_Z20StartTask_EventMgrM4Pv>:
extern QueueHandle_t queueToEventManagerCM4;
extern QueueHandle_t queueToNativeDaemon;
extern QueueHandle_t queueToDoIPDaemonTask;

void StartTask_EventMgrM4(void *argument)
{
 8108cbc:	b580      	push	{r7, lr}
 8108cbe:	b088      	sub	sp, #32
 8108cc0:	af00      	add	r7, sp, #0
 8108cc2:	6078      	str	r0, [r7, #4]
	EventManagerCM4Task eventManagerInstance;
 8108cc4:	f107 0308 	add.w	r3, r7, #8
 8108cc8:	4618      	mov	r0, r3
 8108cca:	f7ff ffe9 	bl	8108ca0 <_ZN19EventManagerCM4TaskC1Ev>
	eventManagerInstance.addQueue(EventManagerCM4Task::EVENT_QUEUE_DAEMON_NATIVE, queueToNativeDaemon);
 8108cce:	4b0d      	ldr	r3, [pc, #52]	@ (8108d04 <_Z20StartTask_EventMgrM4Pv+0x48>)
 8108cd0:	681a      	ldr	r2, [r3, #0]
 8108cd2:	f107 0308 	add.w	r3, r7, #8
 8108cd6:	2107      	movs	r1, #7
 8108cd8:	4618      	mov	r0, r3
 8108cda:	f000 f817 	bl	8108d0c <_ZN19EventManagerCM4Task8addQueueENS_11EEventQueueEP15QueueDefinition>
	eventManagerInstance.addQueue(EventManagerCM4Task::EVENT_QUEUE_ETHERNET_CONNECTION_MANAGER, queueToDoIPDaemonTask);
 8108cde:	4b0a      	ldr	r3, [pc, #40]	@ (8108d08 <_Z20StartTask_EventMgrM4Pv+0x4c>)
 8108ce0:	681a      	ldr	r2, [r3, #0]
 8108ce2:	f107 0308 	add.w	r3, r7, #8
 8108ce6:	2103      	movs	r1, #3
 8108ce8:	4618      	mov	r0, r3
 8108cea:	f000 f80f 	bl	8108d0c <_ZN19EventManagerCM4Task8addQueueENS_11EEventQueueEP15QueueDefinition>

	for(;;)
	{
		eventManagerInstance.process();
 8108cee:	f107 0308 	add.w	r3, r7, #8
 8108cf2:	4618      	mov	r0, r3
 8108cf4:	f000 f81d 	bl	8108d32 <_ZN19EventManagerCM4Task7processEv>
		osDelay(1);
 8108cf8:	2001      	movs	r0, #1
 8108cfa:	f00c fe0c 	bl	8115916 <osDelay>
		eventManagerInstance.process();
 8108cfe:	bf00      	nop
 8108d00:	e7f5      	b.n	8108cee <_Z20StartTask_EventMgrM4Pv+0x32>
 8108d02:	bf00      	nop
 8108d04:	100001ec 	.word	0x100001ec
 8108d08:	100001f0 	.word	0x100001f0

08108d0c <_ZN19EventManagerCM4Task8addQueueENS_11EEventQueueEP15QueueDefinition>:
	}
}


void EventManagerCM4Task::addQueue(EEventQueue eventClient, QueueHandle_t queueHandle)
{
 8108d0c:	b580      	push	{r7, lr}
 8108d0e:	b086      	sub	sp, #24
 8108d10:	af00      	add	r7, sp, #0
 8108d12:	60f8      	str	r0, [r7, #12]
 8108d14:	460b      	mov	r3, r1
 8108d16:	607a      	str	r2, [r7, #4]
 8108d18:	72fb      	strb	r3, [r7, #11]
	queue_handles.emplace(eventClient, queueHandle);
 8108d1a:	68f9      	ldr	r1, [r7, #12]
 8108d1c:	f107 0010 	add.w	r0, r7, #16
 8108d20:	1d3b      	adds	r3, r7, #4
 8108d22:	f107 020b 	add.w	r2, r7, #11
 8108d26:	f000 f946 	bl	8108fb6 <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEE7emplaceIJRS1_RS3_EEES6_ISt17_Rb_tree_iteratorIS8_EbEDpOT_>
}
 8108d2a:	bf00      	nop
 8108d2c:	3718      	adds	r7, #24
 8108d2e:	46bd      	mov	sp, r7
 8108d30:	bd80      	pop	{r7, pc}

08108d32 <_ZN19EventManagerCM4Task7processEv>:
	queue_handles.erase(eventClient);
}


void EventManagerCM4Task::process()
{
 8108d32:	b580      	push	{r7, lr}
 8108d34:	b086      	sub	sp, #24
 8108d36:	af00      	add	r7, sp, #0
 8108d38:	6078      	str	r0, [r7, #4]
	send(receive());
 8108d3a:	f107 030c 	add.w	r3, r7, #12
 8108d3e:	6879      	ldr	r1, [r7, #4]
 8108d40:	4618      	mov	r0, r3
 8108d42:	f000 f81b 	bl	8108d7c <_ZN19EventManagerCM4Task7receiveEv>
 8108d46:	f107 030c 	add.w	r3, r7, #12
 8108d4a:	4619      	mov	r1, r3
 8108d4c:	6878      	ldr	r0, [r7, #4]
 8108d4e:	f000 f86e 	bl	8108e2e <_ZN19EventManagerCM4Task4sendERKSt6vectorI8SMessageSaIS1_EE>
 8108d52:	f107 030c 	add.w	r3, r7, #12
 8108d56:	4618      	mov	r0, r3
 8108d58:	f000 f9a8 	bl	81090ac <_ZNSt6vectorI8SMessageSaIS0_EED1Ev>
}
 8108d5c:	bf00      	nop
 8108d5e:	3718      	adds	r7, #24
 8108d60:	46bd      	mov	sp, r7
 8108d62:	bd80      	pop	{r7, pc}

08108d64 <_ZNSt12_Vector_baseI8SMessageSaIS0_EE12_Vector_implD1Ev>:
	  _M_copy_data(__x);
	  __x._M_copy_data(__tmp);
	}
      };

      struct _Vector_impl
 8108d64:	b580      	push	{r7, lr}
 8108d66:	b082      	sub	sp, #8
 8108d68:	af00      	add	r7, sp, #0
 8108d6a:	6078      	str	r0, [r7, #4]
 8108d6c:	6878      	ldr	r0, [r7, #4]
 8108d6e:	f000 f9b8 	bl	81090e2 <_ZNSaI8SMessageED1Ev>
 8108d72:	687b      	ldr	r3, [r7, #4]
 8108d74:	4618      	mov	r0, r3
 8108d76:	3708      	adds	r7, #8
 8108d78:	46bd      	mov	sp, r7
 8108d7a:	bd80      	pop	{r7, pc}

08108d7c <_ZN19EventManagerCM4Task7receiveEv>:

std::vector<SMessage> EventManagerCM4Task::receive()
{
 8108d7c:	b580      	push	{r7, lr}
 8108d7e:	b08a      	sub	sp, #40	@ 0x28
 8108d80:	af00      	add	r7, sp, #0
 8108d82:	6078      	str	r0, [r7, #4]
 8108d84:	6039      	str	r1, [r7, #0]
	std::vector<SMessage> receivedMessages;
 8108d86:	687b      	ldr	r3, [r7, #4]
 8108d88:	461a      	mov	r2, r3
 8108d8a:	2300      	movs	r3, #0
 8108d8c:	6013      	str	r3, [r2, #0]
 8108d8e:	6053      	str	r3, [r2, #4]
 8108d90:	6093      	str	r3, [r2, #8]
	SMessage msg;

	BaseType_t ret = pdTRUE;
 8108d92:	2301      	movs	r3, #1
 8108d94:	627b      	str	r3, [r7, #36]	@ 0x24
	do
	{
		ret = xQueueReceive(queueToEventManagerCM4, &(msg), static_cast<TickType_t>(0));
 8108d96:	4b0d      	ldr	r3, [pc, #52]	@ (8108dcc <_ZN19EventManagerCM4Task7receiveEv+0x50>)
 8108d98:	681b      	ldr	r3, [r3, #0]
 8108d9a:	f107 0108 	add.w	r1, r7, #8
 8108d9e:	2200      	movs	r2, #0
 8108da0:	4618      	mov	r0, r3
 8108da2:	f00e faf7 	bl	8117394 <xQueueReceive>
 8108da6:	6278      	str	r0, [r7, #36]	@ 0x24
		if(ret == pdTRUE)
 8108da8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8108daa:	2b01      	cmp	r3, #1
 8108dac:	d105      	bne.n	8108dba <_ZN19EventManagerCM4Task7receiveEv+0x3e>
		{
			receivedMessages.push_back(msg);
 8108dae:	f107 0308 	add.w	r3, r7, #8
 8108db2:	4619      	mov	r1, r3
 8108db4:	6878      	ldr	r0, [r7, #4]
 8108db6:	f000 f9bd 	bl	8109134 <_ZNSt6vectorI8SMessageSaIS0_EE9push_backERKS0_>
		}
	} while(ret == pdTRUE);
 8108dba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8108dbc:	2b01      	cmp	r3, #1
 8108dbe:	d0ea      	beq.n	8108d96 <_ZN19EventManagerCM4Task7receiveEv+0x1a>

	return receivedMessages;
 8108dc0:	bf00      	nop
}
 8108dc2:	6878      	ldr	r0, [r7, #4]
 8108dc4:	3728      	adds	r7, #40	@ 0x28
 8108dc6:	46bd      	mov	sp, r7
 8108dc8:	bd80      	pop	{r7, pc}
 8108dca:	bf00      	nop
 8108dcc:	100001e8 	.word	0x100001e8

08108dd0 <_ZN9__gnu_cxxeqIPK8SMessageSt6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>:
    { return std::__detail::__synth3way(__lhs.base(), __rhs.base()); }

  template<typename _Iterator, typename _Container>
    [[nodiscard]]
    constexpr bool
    operator==(const __normal_iterator<_Iterator, _Container>& __lhs,
 8108dd0:	b590      	push	{r4, r7, lr}
 8108dd2:	b083      	sub	sp, #12
 8108dd4:	af00      	add	r7, sp, #0
 8108dd6:	6078      	str	r0, [r7, #4]
 8108dd8:	6039      	str	r1, [r7, #0]
	       const __normal_iterator<_Iterator, _Container>& __rhs)
    noexcept(noexcept(__lhs.base() == __rhs.base()))
    requires requires {
      { __lhs.base() == __rhs.base() } -> std::convertible_to<bool>;
    }
    { return __lhs.base() == __rhs.base(); }
 8108dda:	6878      	ldr	r0, [r7, #4]
 8108ddc:	f000 f810 	bl	8108e00 <_ZNK9__gnu_cxx17__normal_iteratorIPK8SMessageSt6vectorIS1_SaIS1_EEE4baseEv>
 8108de0:	4603      	mov	r3, r0
 8108de2:	681c      	ldr	r4, [r3, #0]
 8108de4:	6838      	ldr	r0, [r7, #0]
 8108de6:	f000 f80b 	bl	8108e00 <_ZNK9__gnu_cxx17__normal_iteratorIPK8SMessageSt6vectorIS1_SaIS1_EEE4baseEv>
 8108dea:	4603      	mov	r3, r0
 8108dec:	681b      	ldr	r3, [r3, #0]
 8108dee:	429c      	cmp	r4, r3
 8108df0:	bf0c      	ite	eq
 8108df2:	2301      	moveq	r3, #1
 8108df4:	2300      	movne	r3, #0
 8108df6:	b2db      	uxtb	r3, r3
 8108df8:	4618      	mov	r0, r3
 8108dfa:	370c      	adds	r7, #12
 8108dfc:	46bd      	mov	sp, r7
 8108dfe:	bd90      	pop	{r4, r7, pc}

08108e00 <_ZNK9__gnu_cxx17__normal_iteratorIPK8SMessageSt6vectorIS1_SaIS1_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8108e00:	b480      	push	{r7}
 8108e02:	b083      	sub	sp, #12
 8108e04:	af00      	add	r7, sp, #0
 8108e06:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8108e08:	687b      	ldr	r3, [r7, #4]
 8108e0a:	4618      	mov	r0, r3
 8108e0c:	370c      	adds	r7, #12
 8108e0e:	46bd      	mov	sp, r7
 8108e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108e14:	4770      	bx	lr

08108e16 <_ZNK9__gnu_cxx17__normal_iteratorIPK8SMessageSt6vectorIS1_SaIS1_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8108e16:	b480      	push	{r7}
 8108e18:	b083      	sub	sp, #12
 8108e1a:	af00      	add	r7, sp, #0
 8108e1c:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 8108e1e:	687b      	ldr	r3, [r7, #4]
 8108e20:	681b      	ldr	r3, [r3, #0]
 8108e22:	4618      	mov	r0, r3
 8108e24:	370c      	adds	r7, #12
 8108e26:	46bd      	mov	sp, r7
 8108e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108e2c:	4770      	bx	lr

08108e2e <_ZN19EventManagerCM4Task4sendERKSt6vectorI8SMessageSaIS1_EE>:

void EventManagerCM4Task::send(const std::vector<SMessage>& messages)
{
 8108e2e:	b5b0      	push	{r4, r5, r7, lr}
 8108e30:	b092      	sub	sp, #72	@ 0x48
 8108e32:	af00      	add	r7, sp, #0
 8108e34:	6078      	str	r0, [r7, #4]
 8108e36:	6039      	str	r1, [r7, #0]
	for(auto msg : messages)
 8108e38:	683b      	ldr	r3, [r7, #0]
 8108e3a:	643b      	str	r3, [r7, #64]	@ 0x40
 8108e3c:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8108e3e:	f000 f99f 	bl	8109180 <_ZNKSt6vectorI8SMessageSaIS0_EE5beginEv>
 8108e42:	4603      	mov	r3, r0
 8108e44:	61bb      	str	r3, [r7, #24]
 8108e46:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8108e48:	f000 f9aa 	bl	81091a0 <_ZNKSt6vectorI8SMessageSaIS0_EE3endEv>
 8108e4c:	4603      	mov	r3, r0
 8108e4e:	617b      	str	r3, [r7, #20]
 8108e50:	e056      	b.n	8108f00 <_ZN19EventManagerCM4Task4sendERKSt6vectorI8SMessageSaIS1_EE+0xd2>
 8108e52:	f107 0318 	add.w	r3, r7, #24
 8108e56:	4618      	mov	r0, r3
 8108e58:	f7ff ffdd 	bl	8108e16 <_ZNK9__gnu_cxx17__normal_iteratorIPK8SMessageSt6vectorIS1_SaIS1_EEEdeEv>
 8108e5c:	4603      	mov	r3, r0
 8108e5e:	f107 041c 	add.w	r4, r7, #28
 8108e62:	461d      	mov	r5, r3
 8108e64:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8108e66:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8108e68:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8108e6c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	{
		auto eventReceiver = static_cast<EEventQueue>(msg.event_receiver);
 8108e70:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8108e74:	74fb      	strb	r3, [r7, #19]
		auto it = queue_handles.find(eventReceiver);
 8108e76:	687b      	ldr	r3, [r7, #4]
 8108e78:	f107 0213 	add.w	r2, r7, #19
 8108e7c:	4611      	mov	r1, r2
 8108e7e:	4618      	mov	r0, r3
 8108e80:	f000 f9b0 	bl	81091e4 <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEE4findERS7_>
 8108e84:	4603      	mov	r3, r0
 8108e86:	60fb      	str	r3, [r7, #12]

		QueueHandle_t targetQueue;

		if(it != queue_handles.end())
 8108e88:	687b      	ldr	r3, [r7, #4]
 8108e8a:	4618      	mov	r0, r3
 8108e8c:	f000 f9b9 	bl	8109202 <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEE3endEv>
 8108e90:	4603      	mov	r3, r0
 8108e92:	63bb      	str	r3, [r7, #56]	@ 0x38
 8108e94:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 8108e98:	f107 030c 	add.w	r3, r7, #12
 8108e9c:	4611      	mov	r1, r2
 8108e9e:	4618      	mov	r0, r3
 8108ea0:	f000 f9bc 	bl	810921c <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEES9_>
 8108ea4:	4603      	mov	r3, r0
 8108ea6:	f083 0301 	eor.w	r3, r3, #1
 8108eaa:	b2db      	uxtb	r3, r3
 8108eac:	2b00      	cmp	r3, #0
 8108eae:	d00a      	beq.n	8108ec6 <_ZN19EventManagerCM4Task4sendERKSt6vectorI8SMessageSaIS1_EE+0x98>
		{
			targetQueue = queue_handles[eventReceiver];
 8108eb0:	687b      	ldr	r3, [r7, #4]
 8108eb2:	f107 0213 	add.w	r2, r7, #19
 8108eb6:	4611      	mov	r1, r2
 8108eb8:	4618      	mov	r0, r3
 8108eba:	f000 f9c3 	bl	8109244 <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_>
 8108ebe:	4603      	mov	r3, r0
 8108ec0:	681b      	ldr	r3, [r3, #0]
 8108ec2:	647b      	str	r3, [r7, #68]	@ 0x44
 8108ec4:	e00c      	b.n	8108ee0 <_ZN19EventManagerCM4Task4sendERKSt6vectorI8SMessageSaIS1_EE+0xb2>
		}
		else
		{
			// if receiver not found, then it means i has to be on CM7 side, so send to IPC connection damon.
			targetQueue = queue_handles[EVENT_QUEUE_DAEMON_NATIVE];
 8108ec6:	687b      	ldr	r3, [r7, #4]
 8108ec8:	2207      	movs	r2, #7
 8108eca:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 8108ece:	f107 023f 	add.w	r2, r7, #63	@ 0x3f
 8108ed2:	4611      	mov	r1, r2
 8108ed4:	4618      	mov	r0, r3
 8108ed6:	f000 fa11 	bl	81092fc <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEEixEOS1_>
 8108eda:	4603      	mov	r3, r0
 8108edc:	681b      	ldr	r3, [r3, #0]
 8108ede:	647b      	str	r3, [r7, #68]	@ 0x44
		}

		if(targetQueue)
 8108ee0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8108ee2:	2b00      	cmp	r3, #0
 8108ee4:	d007      	beq.n	8108ef6 <_ZN19EventManagerCM4Task4sendERKSt6vectorI8SMessageSaIS1_EE+0xc8>
		{
			xQueueSend(targetQueue, static_cast<void*>(&msg), portMAX_DELAY);
 8108ee6:	f107 011c 	add.w	r1, r7, #28
 8108eea:	2300      	movs	r3, #0
 8108eec:	f04f 32ff 	mov.w	r2, #4294967295
 8108ef0:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8108ef2:	f00e f81f 	bl	8116f34 <xQueueGenericSend>
	for(auto msg : messages)
 8108ef6:	f107 0318 	add.w	r3, r7, #24
 8108efa:	4618      	mov	r0, r3
 8108efc:	f000 f961 	bl	81091c2 <_ZN9__gnu_cxx17__normal_iteratorIPK8SMessageSt6vectorIS1_SaIS1_EEEppEv>
 8108f00:	f107 0214 	add.w	r2, r7, #20
 8108f04:	f107 0318 	add.w	r3, r7, #24
 8108f08:	4611      	mov	r1, r2
 8108f0a:	4618      	mov	r0, r3
 8108f0c:	f7ff ff60 	bl	8108dd0 <_ZN9__gnu_cxxeqIPK8SMessageSt6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>
 8108f10:	4603      	mov	r3, r0
 8108f12:	f083 0301 	eor.w	r3, r3, #1
 8108f16:	b2db      	uxtb	r3, r3
 8108f18:	2b00      	cmp	r3, #0
 8108f1a:	d19a      	bne.n	8108e52 <_ZN19EventManagerCM4Task4sendERKSt6vectorI8SMessageSaIS1_EE+0x24>
		}
	}
}
 8108f1c:	bf00      	nop
 8108f1e:	bf00      	nop
 8108f20:	3748      	adds	r7, #72	@ 0x48
 8108f22:	46bd      	mov	sp, r7
 8108f24:	bdb0      	pop	{r4, r5, r7, pc}

08108f26 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE13_Rb_tree_implISA_Lb1EEC1Ev>:
	  _Rb_tree_impl()
 8108f26:	b580      	push	{r7, lr}
 8108f28:	b082      	sub	sp, #8
 8108f2a:	af00      	add	r7, sp, #0
 8108f2c:	6078      	str	r0, [r7, #4]
	  : _Node_allocator()
 8108f2e:	6878      	ldr	r0, [r7, #4]
 8108f30:	f000 fa44 	bl	81093bc <_ZNSaISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEEC1Ev>
 8108f34:	687b      	ldr	r3, [r7, #4]
 8108f36:	4618      	mov	r0, r3
 8108f38:	f000 fa4c 	bl	81093d4 <_ZNSt20_Rb_tree_key_compareISt4lessIN19EventManagerCM4Task11EEventQueueEEEC1Ev>
 8108f3c:	687b      	ldr	r3, [r7, #4]
 8108f3e:	3304      	adds	r3, #4
 8108f40:	4618      	mov	r0, r3
 8108f42:	f7ff fe6e 	bl	8108c22 <_ZNSt15_Rb_tree_headerC1Ev>
	  { }
 8108f46:	687b      	ldr	r3, [r7, #4]
 8108f48:	4618      	mov	r0, r3
 8108f4a:	3708      	adds	r7, #8
 8108f4c:	46bd      	mov	sp, r7
 8108f4e:	bd80      	pop	{r7, pc}

08108f50 <_ZNSt4pairIRN19EventManagerCM4Task11EEventQueueERP15QueueDefinitionEC1ES2_S5_>:
      pair(const _T1& __x, const _T2& __y)
 8108f50:	b480      	push	{r7}
 8108f52:	b085      	sub	sp, #20
 8108f54:	af00      	add	r7, sp, #0
 8108f56:	60f8      	str	r0, [r7, #12]
 8108f58:	60b9      	str	r1, [r7, #8]
 8108f5a:	607a      	str	r2, [r7, #4]
      : first(__x), second(__y)
 8108f5c:	68fb      	ldr	r3, [r7, #12]
 8108f5e:	68ba      	ldr	r2, [r7, #8]
 8108f60:	601a      	str	r2, [r3, #0]
 8108f62:	68fb      	ldr	r3, [r7, #12]
 8108f64:	687a      	ldr	r2, [r7, #4]
 8108f66:	605a      	str	r2, [r3, #4]
      { }
 8108f68:	68fb      	ldr	r3, [r7, #12]
 8108f6a:	4618      	mov	r0, r3
 8108f6c:	3714      	adds	r7, #20
 8108f6e:	46bd      	mov	sp, r7
 8108f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108f74:	4770      	bx	lr

08108f76 <_ZSt3getILj0ERN19EventManagerCM4Task11EEventQueueERP15QueueDefinitionEONSt13tuple_elementIXT_ESt4pairIT0_T1_EE4typeEOSA_>:
    get(pair<_Tp1, _Tp2>& __in) noexcept
    { return __pair_get<_Int>::__get(__in); }

  template<size_t _Int, class _Tp1, class _Tp2>
    constexpr typename tuple_element<_Int, pair<_Tp1, _Tp2>>::type&&
    get(pair<_Tp1, _Tp2>&& __in) noexcept
 8108f76:	b580      	push	{r7, lr}
 8108f78:	b082      	sub	sp, #8
 8108f7a:	af00      	add	r7, sp, #0
 8108f7c:	6078      	str	r0, [r7, #4]
    { return __pair_get<_Int>::__move_get(std::move(__in)); }
 8108f7e:	6878      	ldr	r0, [r7, #4]
 8108f80:	f000 fa3f 	bl	8109402 <_ZSt4moveIRSt4pairIRN19EventManagerCM4Task11EEventQueueERP15QueueDefinitionEEONSt16remove_referenceIT_E4typeEOSA_>
 8108f84:	4603      	mov	r3, r0
 8108f86:	4618      	mov	r0, r3
 8108f88:	f000 fa46 	bl	8109418 <_ZNSt10__pair_getILj0EE10__move_getIRN19EventManagerCM4Task11EEventQueueERP15QueueDefinitionEEOT_OSt4pairIS8_T0_E>
 8108f8c:	4603      	mov	r3, r0
 8108f8e:	4618      	mov	r0, r3
 8108f90:	3708      	adds	r7, #8
 8108f92:	46bd      	mov	sp, r7
 8108f94:	bd80      	pop	{r7, pc}

08108f96 <_ZSt3getILj1ERN19EventManagerCM4Task11EEventQueueERP15QueueDefinitionEONSt13tuple_elementIXT_ESt4pairIT0_T1_EE4typeEOSA_>:
    get(pair<_Tp1, _Tp2>&& __in) noexcept
 8108f96:	b580      	push	{r7, lr}
 8108f98:	b082      	sub	sp, #8
 8108f9a:	af00      	add	r7, sp, #0
 8108f9c:	6078      	str	r0, [r7, #4]
    { return __pair_get<_Int>::__move_get(std::move(__in)); }
 8108f9e:	6878      	ldr	r0, [r7, #4]
 8108fa0:	f000 fa2f 	bl	8109402 <_ZSt4moveIRSt4pairIRN19EventManagerCM4Task11EEventQueueERP15QueueDefinitionEEONSt16remove_referenceIT_E4typeEOSA_>
 8108fa4:	4603      	mov	r3, r0
 8108fa6:	4618      	mov	r0, r3
 8108fa8:	f000 fa44 	bl	8109434 <_ZNSt10__pair_getILj1EE10__move_getIRN19EventManagerCM4Task11EEventQueueERP15QueueDefinitionEEOT0_OSt4pairIT_S8_E>
 8108fac:	4603      	mov	r3, r0
 8108fae:	4618      	mov	r0, r3
 8108fb0:	3708      	adds	r7, #8
 8108fb2:	46bd      	mov	sp, r7
 8108fb4:	bd80      	pop	{r7, pc}

08108fb6 <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEE7emplaceIJRS1_RS3_EEES6_ISt17_Rb_tree_iteratorIS8_EbEDpOT_>:
       *
       *  Insertion requires logarithmic time.
       */
      template<typename... _Args>
	std::pair<iterator, bool>
	emplace(_Args&&... __args)
 8108fb6:	b590      	push	{r4, r7, lr}
 8108fb8:	b091      	sub	sp, #68	@ 0x44
 8108fba:	af00      	add	r7, sp, #0
 8108fbc:	60f8      	str	r0, [r7, #12]
 8108fbe:	60b9      	str	r1, [r7, #8]
 8108fc0:	607a      	str	r2, [r7, #4]
 8108fc2:	603b      	str	r3, [r7, #0]
	{
#if __cplusplus >= 201703L
	  if constexpr (sizeof...(_Args) == 2)
	    if constexpr (is_same_v<allocator_type, allocator<value_type>>)
	      {
		auto&& [__a, __v] = pair<_Args&...>(__args...);
 8108fc4:	f107 0318 	add.w	r3, r7, #24
 8108fc8:	683a      	ldr	r2, [r7, #0]
 8108fca:	6879      	ldr	r1, [r7, #4]
 8108fcc:	4618      	mov	r0, r3
 8108fce:	f7ff ffbf 	bl	8108f50 <_ZNSt4pairIRN19EventManagerCM4Task11EEventQueueERP15QueueDefinitionEC1ES2_S5_>
 8108fd2:	f107 0318 	add.w	r3, r7, #24
 8108fd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8108fd8:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8108fda:	f7ff ffcc 	bl	8108f76 <_ZSt3getILj0ERN19EventManagerCM4Task11EEventQueueERP15QueueDefinitionEONSt13tuple_elementIXT_ESt4pairIT0_T1_EE4typeEOSA_>
 8108fde:	63b8      	str	r0, [r7, #56]	@ 0x38
 8108fe0:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8108fe2:	f7ff ffd8 	bl	8108f96 <_ZSt3getILj1ERN19EventManagerCM4Task11EEventQueueERP15QueueDefinitionEONSt13tuple_elementIXT_ESt4pairIT0_T1_EE4typeEOSA_>
 8108fe6:	6378      	str	r0, [r7, #52]	@ 0x34
		if constexpr (__usable_key<decltype(__a)>)
		  {
		    const key_type& __k = __a;
 8108fe8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8108fea:	633b      	str	r3, [r7, #48]	@ 0x30
		    iterator __i = lower_bound(__k);
 8108fec:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8108fee:	68b8      	ldr	r0, [r7, #8]
 8108ff0:	f000 fa2e 	bl	8109450 <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEE11lower_boundERS7_>
 8108ff4:	4603      	mov	r3, r0
 8108ff6:	617b      	str	r3, [r7, #20]
		    if (__i == end() || key_comp()(__k, (*__i).first))
 8108ff8:	68b8      	ldr	r0, [r7, #8]
 8108ffa:	f000 f902 	bl	8109202 <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEE3endEv>
 8108ffe:	4603      	mov	r3, r0
 8109000:	623b      	str	r3, [r7, #32]
 8109002:	f107 0220 	add.w	r2, r7, #32
 8109006:	f107 0314 	add.w	r3, r7, #20
 810900a:	4611      	mov	r1, r2
 810900c:	4618      	mov	r0, r3
 810900e:	f000 f905 	bl	810921c <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEES9_>
 8109012:	4603      	mov	r3, r0
 8109014:	2b00      	cmp	r3, #0
 8109016:	d112      	bne.n	810903e <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEE7emplaceIJRS1_RS3_EEES6_ISt17_Rb_tree_iteratorIS8_EbEDpOT_+0x88>
 8109018:	68b8      	ldr	r0, [r7, #8]
 810901a:	f000 fa28 	bl	810946e <_ZNKSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEE8key_compEv>
 810901e:	f107 0314 	add.w	r3, r7, #20
 8109022:	4618      	mov	r0, r3
 8109024:	f000 fa30 	bl	8109488 <_ZNKSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEdeEv>
 8109028:	4603      	mov	r3, r0
 810902a:	461a      	mov	r2, r3
 810902c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8109030:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8109032:	4618      	mov	r0, r3
 8109034:	f000 fa36 	bl	81094a4 <_ZNKSt4lessIN19EventManagerCM4Task11EEventQueueEEclERKS1_S4_>
 8109038:	4603      	mov	r3, r0
 810903a:	2b00      	cmp	r3, #0
 810903c:	d001      	beq.n	8109042 <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEE7emplaceIJRS1_RS3_EEES6_ISt17_Rb_tree_iteratorIS8_EbEDpOT_+0x8c>
 810903e:	2301      	movs	r3, #1
 8109040:	e000      	b.n	8109044 <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEE7emplaceIJRS1_RS3_EEES6_ISt17_Rb_tree_iteratorIS8_EbEDpOT_+0x8e>
 8109042:	2300      	movs	r3, #0
 8109044:	2b00      	cmp	r3, #0
 8109046:	d022      	beq.n	810908e <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEE7emplaceIJRS1_RS3_EEES6_ISt17_Rb_tree_iteratorIS8_EbEDpOT_+0xd8>
		      {
			__i = emplace_hint(__i, std::forward<_Args>(__args)...);
 8109048:	f107 0214 	add.w	r2, r7, #20
 810904c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8109050:	4611      	mov	r1, r2
 8109052:	4618      	mov	r0, r3
 8109054:	f000 fa51 	bl	81094fa <_ZNSt23_Rb_tree_const_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEC1ERKSt17_Rb_tree_iteratorIS6_E>
 8109058:	6878      	ldr	r0, [r7, #4]
 810905a:	f000 fa38 	bl	81094ce <_ZSt7forwardIRN19EventManagerCM4Task11EEventQueueEEOT_RNSt16remove_referenceIS3_E4typeE>
 810905e:	4604      	mov	r4, r0
 8109060:	6838      	ldr	r0, [r7, #0]
 8109062:	f000 fa3f 	bl	81094e4 <_ZSt7forwardIRP15QueueDefinitionEOT_RNSt16remove_referenceIS3_E4typeE>
 8109066:	4603      	mov	r3, r0
 8109068:	4622      	mov	r2, r4
 810906a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 810906c:	68b8      	ldr	r0, [r7, #8]
 810906e:	f000 fa54 	bl	810951a <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEE12emplace_hintIJRS1_RS3_EEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EDpOT_>
 8109072:	4603      	mov	r3, r0
 8109074:	617b      	str	r3, [r7, #20]
			return {__i, true};
 8109076:	2301      	movs	r3, #1
 8109078:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 810907c:	f107 022e 	add.w	r2, r7, #46	@ 0x2e
 8109080:	f107 0314 	add.w	r3, r7, #20
 8109084:	4619      	mov	r1, r3
 8109086:	68f8      	ldr	r0, [r7, #12]
 8109088:	f000 fa61 	bl	810954e <_ZNSt4pairISt17_Rb_tree_iteratorIS_IKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEbEC1IRS7_bEEOT_OT0_>
		    return {__i, false};
		  }
	      }
#endif
	  return _M_t._M_emplace_unique(std::forward<_Args>(__args)...);
	}
 810908c:	e00a      	b.n	81090a4 <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEE7emplaceIJRS1_RS3_EEES6_ISt17_Rb_tree_iteratorIS8_EbEDpOT_+0xee>
		    return {__i, false};
 810908e:	2300      	movs	r3, #0
 8109090:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8109094:	f107 022f 	add.w	r2, r7, #47	@ 0x2f
 8109098:	f107 0314 	add.w	r3, r7, #20
 810909c:	4619      	mov	r1, r3
 810909e:	68f8      	ldr	r0, [r7, #12]
 81090a0:	f000 fa55 	bl	810954e <_ZNSt4pairISt17_Rb_tree_iteratorIS_IKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEbEC1IRS7_bEEOT_OT0_>
	}
 81090a4:	68f8      	ldr	r0, [r7, #12]
 81090a6:	3744      	adds	r7, #68	@ 0x44
 81090a8:	46bd      	mov	sp, r7
 81090aa:	bd90      	pop	{r4, r7, pc}

081090ac <_ZNSt6vectorI8SMessageSaIS0_EED1Ev>:
       *  elements themselves are pointers, the pointed-to memory is
       *  not touched in any way.  Managing the pointer is the user's
       *  responsibility.
       */
      _GLIBCXX20_CONSTEXPR
      ~vector() _GLIBCXX_NOEXCEPT
 81090ac:	b5b0      	push	{r4, r5, r7, lr}
 81090ae:	b082      	sub	sp, #8
 81090b0:	af00      	add	r7, sp, #0
 81090b2:	6078      	str	r0, [r7, #4]
      {
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 81090b4:	687b      	ldr	r3, [r7, #4]
 81090b6:	681c      	ldr	r4, [r3, #0]
 81090b8:	687b      	ldr	r3, [r7, #4]
 81090ba:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 81090bc:	687b      	ldr	r3, [r7, #4]
 81090be:	4618      	mov	r0, r3
 81090c0:	f000 fa5e 	bl	8109580 <_ZNSt12_Vector_baseI8SMessageSaIS0_EE19_M_get_Tp_allocatorEv>
 81090c4:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 81090c6:	461a      	mov	r2, r3
 81090c8:	4629      	mov	r1, r5
 81090ca:	4620      	mov	r0, r4
 81090cc:	f000 fa63 	bl	8109596 <_ZSt8_DestroyIP8SMessageS0_EvT_S2_RSaIT0_E>
	_GLIBCXX_ASAN_ANNOTATE_BEFORE_DEALLOC;
      }
 81090d0:	687b      	ldr	r3, [r7, #4]
 81090d2:	4618      	mov	r0, r3
 81090d4:	f000 f810 	bl	81090f8 <_ZNSt12_Vector_baseI8SMessageSaIS0_EED1Ev>
 81090d8:	687b      	ldr	r3, [r7, #4]
 81090da:	4618      	mov	r0, r3
 81090dc:	3708      	adds	r7, #8
 81090de:	46bd      	mov	sp, r7
 81090e0:	bdb0      	pop	{r4, r5, r7, pc}

081090e2 <_ZNSaI8SMessageED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 81090e2:	b480      	push	{r7}
 81090e4:	b083      	sub	sp, #12
 81090e6:	af00      	add	r7, sp, #0
 81090e8:	6078      	str	r0, [r7, #4]
 81090ea:	687b      	ldr	r3, [r7, #4]
 81090ec:	4618      	mov	r0, r3
 81090ee:	370c      	adds	r7, #12
 81090f0:	46bd      	mov	sp, r7
 81090f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81090f6:	4770      	bx	lr

081090f8 <_ZNSt12_Vector_baseI8SMessageSaIS0_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 81090f8:	b580      	push	{r7, lr}
 81090fa:	b082      	sub	sp, #8
 81090fc:	af00      	add	r7, sp, #0
 81090fe:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 8109100:	687b      	ldr	r3, [r7, #4]
 8109102:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8109104:	687b      	ldr	r3, [r7, #4]
 8109106:	689a      	ldr	r2, [r3, #8]
 8109108:	687b      	ldr	r3, [r7, #4]
 810910a:	681b      	ldr	r3, [r3, #0]
 810910c:	1ad3      	subs	r3, r2, r3
 810910e:	109b      	asrs	r3, r3, #2
 8109110:	4a07      	ldr	r2, [pc, #28]	@ (8109130 <_ZNSt12_Vector_baseI8SMessageSaIS0_EED1Ev+0x38>)
 8109112:	fb02 f303 	mul.w	r3, r2, r3
	_M_deallocate(_M_impl._M_start,
 8109116:	461a      	mov	r2, r3
 8109118:	6878      	ldr	r0, [r7, #4]
 810911a:	f000 fa4a 	bl	81095b2 <_ZNSt12_Vector_baseI8SMessageSaIS0_EE13_M_deallocateEPS0_j>
      }
 810911e:	687b      	ldr	r3, [r7, #4]
 8109120:	4618      	mov	r0, r3
 8109122:	f7ff fe1f 	bl	8108d64 <_ZNSt12_Vector_baseI8SMessageSaIS0_EE12_Vector_implD1Ev>
 8109126:	687b      	ldr	r3, [r7, #4]
 8109128:	4618      	mov	r0, r3
 810912a:	3708      	adds	r7, #8
 810912c:	46bd      	mov	sp, r7
 810912e:	bd80      	pop	{r7, pc}
 8109130:	b6db6db7 	.word	0xb6db6db7

08109134 <_ZNSt6vectorI8SMessageSaIS0_EE9push_backERKS0_>:
       *  done in constant time if the %vector has preallocated space
       *  available.
       */
      _GLIBCXX20_CONSTEXPR
      void
      push_back(const value_type& __x)
 8109134:	b580      	push	{r7, lr}
 8109136:	b082      	sub	sp, #8
 8109138:	af00      	add	r7, sp, #0
 810913a:	6078      	str	r0, [r7, #4]
 810913c:	6039      	str	r1, [r7, #0]
      {
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 810913e:	687b      	ldr	r3, [r7, #4]
 8109140:	685a      	ldr	r2, [r3, #4]
 8109142:	687b      	ldr	r3, [r7, #4]
 8109144:	689b      	ldr	r3, [r3, #8]
 8109146:	429a      	cmp	r2, r3
 8109148:	d00d      	beq.n	8109166 <_ZNSt6vectorI8SMessageSaIS0_EE9push_backERKS0_+0x32>
	  {
	    _GLIBCXX_ASAN_ANNOTATE_GROW(1);
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 810914a:	6878      	ldr	r0, [r7, #4]
 810914c:	687b      	ldr	r3, [r7, #4]
 810914e:	685b      	ldr	r3, [r3, #4]
 8109150:	683a      	ldr	r2, [r7, #0]
 8109152:	4619      	mov	r1, r3
 8109154:	f000 fa40 	bl	81095d8 <_ZNSt16allocator_traitsISaI8SMessageEE9constructIS0_JRKS0_EEEvRS1_PT_DpOT0_>
				     __x);
	    ++this->_M_impl._M_finish;
 8109158:	687b      	ldr	r3, [r7, #4]
 810915a:	685b      	ldr	r3, [r3, #4]
 810915c:	f103 021c 	add.w	r2, r3, #28
 8109160:	687b      	ldr	r3, [r7, #4]
 8109162:	605a      	str	r2, [r3, #4]
	    _GLIBCXX_ASAN_ANNOTATE_GREW(1);
	  }
	else
	  _M_realloc_insert(end(), __x);
      }
 8109164:	e008      	b.n	8109178 <_ZNSt6vectorI8SMessageSaIS0_EE9push_backERKS0_+0x44>
	  _M_realloc_insert(end(), __x);
 8109166:	6878      	ldr	r0, [r7, #4]
 8109168:	f000 fa48 	bl	81095fc <_ZNSt6vectorI8SMessageSaIS0_EE3endEv>
 810916c:	4603      	mov	r3, r0
 810916e:	683a      	ldr	r2, [r7, #0]
 8109170:	4619      	mov	r1, r3
 8109172:	6878      	ldr	r0, [r7, #4]
 8109174:	f000 faf0 	bl	8109758 <_ZNSt6vectorI8SMessageSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>
      }
 8109178:	bf00      	nop
 810917a:	3708      	adds	r7, #8
 810917c:	46bd      	mov	sp, r7
 810917e:	bd80      	pop	{r7, pc}

08109180 <_ZNKSt6vectorI8SMessageSaIS0_EE5beginEv>:
      begin() const _GLIBCXX_NOEXCEPT
 8109180:	b580      	push	{r7, lr}
 8109182:	b084      	sub	sp, #16
 8109184:	af00      	add	r7, sp, #0
 8109186:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_start); }
 8109188:	687a      	ldr	r2, [r7, #4]
 810918a:	f107 030c 	add.w	r3, r7, #12
 810918e:	4611      	mov	r1, r2
 8109190:	4618      	mov	r0, r3
 8109192:	f000 fb6b 	bl	810986c <_ZN9__gnu_cxx17__normal_iteratorIPK8SMessageSt6vectorIS1_SaIS1_EEEC1ERKS3_>
 8109196:	68fb      	ldr	r3, [r7, #12]
 8109198:	4618      	mov	r0, r3
 810919a:	3710      	adds	r7, #16
 810919c:	46bd      	mov	sp, r7
 810919e:	bd80      	pop	{r7, pc}

081091a0 <_ZNKSt6vectorI8SMessageSaIS0_EE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
 81091a0:	b580      	push	{r7, lr}
 81091a2:	b084      	sub	sp, #16
 81091a4:	af00      	add	r7, sp, #0
 81091a6:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_finish); }
 81091a8:	687b      	ldr	r3, [r7, #4]
 81091aa:	1d1a      	adds	r2, r3, #4
 81091ac:	f107 030c 	add.w	r3, r7, #12
 81091b0:	4611      	mov	r1, r2
 81091b2:	4618      	mov	r0, r3
 81091b4:	f000 fb5a 	bl	810986c <_ZN9__gnu_cxx17__normal_iteratorIPK8SMessageSt6vectorIS1_SaIS1_EEEC1ERKS3_>
 81091b8:	68fb      	ldr	r3, [r7, #12]
 81091ba:	4618      	mov	r0, r3
 81091bc:	3710      	adds	r7, #16
 81091be:	46bd      	mov	sp, r7
 81091c0:	bd80      	pop	{r7, pc}

081091c2 <_ZN9__gnu_cxx17__normal_iteratorIPK8SMessageSt6vectorIS1_SaIS1_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 81091c2:	b480      	push	{r7}
 81091c4:	b083      	sub	sp, #12
 81091c6:	af00      	add	r7, sp, #0
 81091c8:	6078      	str	r0, [r7, #4]
	++_M_current;
 81091ca:	687b      	ldr	r3, [r7, #4]
 81091cc:	681b      	ldr	r3, [r3, #0]
 81091ce:	f103 021c 	add.w	r2, r3, #28
 81091d2:	687b      	ldr	r3, [r7, #4]
 81091d4:	601a      	str	r2, [r3, #0]
	return *this;
 81091d6:	687b      	ldr	r3, [r7, #4]
      }
 81091d8:	4618      	mov	r0, r3
 81091da:	370c      	adds	r7, #12
 81091dc:	46bd      	mov	sp, r7
 81091de:	f85d 7b04 	ldr.w	r7, [sp], #4
 81091e2:	4770      	bx	lr

081091e4 <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEE4findERS7_>:
       *  pointing to the sought after %pair.  If unsuccessful it returns the
       *  past-the-end ( @c end() ) iterator.
       */

      iterator
      find(const key_type& __x)
 81091e4:	b580      	push	{r7, lr}
 81091e6:	b082      	sub	sp, #8
 81091e8:	af00      	add	r7, sp, #0
 81091ea:	6078      	str	r0, [r7, #4]
 81091ec:	6039      	str	r1, [r7, #0]
      { return _M_t.find(__x); }
 81091ee:	687b      	ldr	r3, [r7, #4]
 81091f0:	6839      	ldr	r1, [r7, #0]
 81091f2:	4618      	mov	r0, r3
 81091f4:	f000 fb4a 	bl	810988c <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4findERS3_>
 81091f8:	4603      	mov	r3, r0
 81091fa:	4618      	mov	r0, r3
 81091fc:	3708      	adds	r7, #8
 81091fe:	46bd      	mov	sp, r7
 8109200:	bd80      	pop	{r7, pc}

08109202 <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8109202:	b580      	push	{r7, lr}
 8109204:	b082      	sub	sp, #8
 8109206:	af00      	add	r7, sp, #0
 8109208:	6078      	str	r0, [r7, #4]
      { return _M_t.end(); }
 810920a:	687b      	ldr	r3, [r7, #4]
 810920c:	4618      	mov	r0, r3
 810920e:	f000 fb79 	bl	8109904 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE3endEv>
 8109212:	4603      	mov	r3, r0
 8109214:	4618      	mov	r0, r3
 8109216:	3708      	adds	r7, #8
 8109218:	46bd      	mov	sp, r7
 810921a:	bd80      	pop	{r7, pc}

0810921c <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEES9_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 810921c:	b480      	push	{r7}
 810921e:	b083      	sub	sp, #12
 8109220:	af00      	add	r7, sp, #0
 8109222:	6078      	str	r0, [r7, #4]
 8109224:	6039      	str	r1, [r7, #0]
      { return __x._M_node == __y._M_node; }
 8109226:	687b      	ldr	r3, [r7, #4]
 8109228:	681a      	ldr	r2, [r3, #0]
 810922a:	683b      	ldr	r3, [r7, #0]
 810922c:	681b      	ldr	r3, [r3, #0]
 810922e:	429a      	cmp	r2, r3
 8109230:	bf0c      	ite	eq
 8109232:	2301      	moveq	r3, #1
 8109234:	2300      	movne	r3, #0
 8109236:	b2db      	uxtb	r3, r3
 8109238:	4618      	mov	r0, r3
 810923a:	370c      	adds	r7, #12
 810923c:	46bd      	mov	sp, r7
 810923e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109242:	4770      	bx	lr

08109244 <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_>:
      operator[](const key_type& __k)
 8109244:	b590      	push	{r4, r7, lr}
 8109246:	b08b      	sub	sp, #44	@ 0x2c
 8109248:	af02      	add	r7, sp, #8
 810924a:	6078      	str	r0, [r7, #4]
 810924c:	6039      	str	r1, [r7, #0]
	iterator __i = lower_bound(__k);
 810924e:	6839      	ldr	r1, [r7, #0]
 8109250:	6878      	ldr	r0, [r7, #4]
 8109252:	f000 f8fd 	bl	8109450 <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEE11lower_boundERS7_>
 8109256:	4603      	mov	r3, r0
 8109258:	60bb      	str	r3, [r7, #8]
	if (__i == end() || key_comp()(__k, (*__i).first))
 810925a:	6878      	ldr	r0, [r7, #4]
 810925c:	f7ff ffd1 	bl	8109202 <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEE3endEv>
 8109260:	4603      	mov	r3, r0
 8109262:	60fb      	str	r3, [r7, #12]
 8109264:	f107 020c 	add.w	r2, r7, #12
 8109268:	f107 0308 	add.w	r3, r7, #8
 810926c:	4611      	mov	r1, r2
 810926e:	4618      	mov	r0, r3
 8109270:	f7ff ffd4 	bl	810921c <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEES9_>
 8109274:	4603      	mov	r3, r0
 8109276:	2b00      	cmp	r3, #0
 8109278:	d112      	bne.n	81092a0 <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_+0x5c>
 810927a:	6878      	ldr	r0, [r7, #4]
 810927c:	f000 f8f7 	bl	810946e <_ZNKSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEE8key_compEv>
 8109280:	f107 0308 	add.w	r3, r7, #8
 8109284:	4618      	mov	r0, r3
 8109286:	f000 f8ff 	bl	8109488 <_ZNKSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEdeEv>
 810928a:	4603      	mov	r3, r0
 810928c:	461a      	mov	r2, r3
 810928e:	f107 0310 	add.w	r3, r7, #16
 8109292:	6839      	ldr	r1, [r7, #0]
 8109294:	4618      	mov	r0, r3
 8109296:	f000 f905 	bl	81094a4 <_ZNKSt4lessIN19EventManagerCM4Task11EEventQueueEEclERKS1_S4_>
 810929a:	4603      	mov	r3, r0
 810929c:	2b00      	cmp	r3, #0
 810929e:	d001      	beq.n	81092a4 <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_+0x60>
 81092a0:	2301      	movs	r3, #1
 81092a2:	e000      	b.n	81092a6 <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_+0x62>
 81092a4:	2300      	movs	r3, #0
 81092a6:	2b00      	cmp	r3, #0
 81092a8:	d01b      	beq.n	81092e2 <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_+0x9e>
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
 81092aa:	687c      	ldr	r4, [r7, #4]
 81092ac:	f107 0208 	add.w	r2, r7, #8
 81092b0:	f107 0314 	add.w	r3, r7, #20
 81092b4:	4611      	mov	r1, r2
 81092b6:	4618      	mov	r0, r3
 81092b8:	f000 f91f 	bl	81094fa <_ZNSt23_Rb_tree_const_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEC1ERKSt17_Rb_tree_iteratorIS6_E>
					    std::tuple<const key_type&>(__k),
 81092bc:	f107 0318 	add.w	r3, r7, #24
 81092c0:	6839      	ldr	r1, [r7, #0]
 81092c2:	4618      	mov	r0, r3
 81092c4:	f000 fb2f 	bl	8109926 <_ZNSt5tupleIJRKN19EventManagerCM4Task11EEventQueueEEEC1ILb1ELb1EEES3_>
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
 81092c8:	f107 0218 	add.w	r2, r7, #24
 81092cc:	f107 031c 	add.w	r3, r7, #28
 81092d0:	9300      	str	r3, [sp, #0]
 81092d2:	4613      	mov	r3, r2
 81092d4:	4a08      	ldr	r2, [pc, #32]	@ (81092f8 <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_+0xb4>)
 81092d6:	6979      	ldr	r1, [r7, #20]
 81092d8:	4620      	mov	r0, r4
 81092da:	f000 fb33 	bl	8109944 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EDpOT_>
 81092de:	4603      	mov	r3, r0
 81092e0:	60bb      	str	r3, [r7, #8]
	return (*__i).second;
 81092e2:	f107 0308 	add.w	r3, r7, #8
 81092e6:	4618      	mov	r0, r3
 81092e8:	f000 f8ce 	bl	8109488 <_ZNKSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEdeEv>
 81092ec:	4603      	mov	r3, r0
 81092ee:	3304      	adds	r3, #4
      }
 81092f0:	4618      	mov	r0, r3
 81092f2:	3724      	adds	r7, #36	@ 0x24
 81092f4:	46bd      	mov	sp, r7
 81092f6:	bd90      	pop	{r4, r7, pc}
 81092f8:	0812adf0 	.word	0x0812adf0

081092fc <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEEixEOS1_>:
      operator[](key_type&& __k)
 81092fc:	b590      	push	{r4, r7, lr}
 81092fe:	b08b      	sub	sp, #44	@ 0x2c
 8109300:	af02      	add	r7, sp, #8
 8109302:	6078      	str	r0, [r7, #4]
 8109304:	6039      	str	r1, [r7, #0]
	iterator __i = lower_bound(__k);
 8109306:	6839      	ldr	r1, [r7, #0]
 8109308:	6878      	ldr	r0, [r7, #4]
 810930a:	f000 f8a1 	bl	8109450 <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEE11lower_boundERS7_>
 810930e:	4603      	mov	r3, r0
 8109310:	60bb      	str	r3, [r7, #8]
	if (__i == end() || key_comp()(__k, (*__i).first))
 8109312:	6878      	ldr	r0, [r7, #4]
 8109314:	f7ff ff75 	bl	8109202 <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEE3endEv>
 8109318:	4603      	mov	r3, r0
 810931a:	60fb      	str	r3, [r7, #12]
 810931c:	f107 020c 	add.w	r2, r7, #12
 8109320:	f107 0308 	add.w	r3, r7, #8
 8109324:	4611      	mov	r1, r2
 8109326:	4618      	mov	r0, r3
 8109328:	f7ff ff78 	bl	810921c <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEES9_>
 810932c:	4603      	mov	r3, r0
 810932e:	2b00      	cmp	r3, #0
 8109330:	d112      	bne.n	8109358 <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEEixEOS1_+0x5c>
 8109332:	6878      	ldr	r0, [r7, #4]
 8109334:	f000 f89b 	bl	810946e <_ZNKSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEE8key_compEv>
 8109338:	f107 0308 	add.w	r3, r7, #8
 810933c:	4618      	mov	r0, r3
 810933e:	f000 f8a3 	bl	8109488 <_ZNKSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEdeEv>
 8109342:	4603      	mov	r3, r0
 8109344:	461a      	mov	r2, r3
 8109346:	f107 0310 	add.w	r3, r7, #16
 810934a:	6839      	ldr	r1, [r7, #0]
 810934c:	4618      	mov	r0, r3
 810934e:	f000 f8a9 	bl	81094a4 <_ZNKSt4lessIN19EventManagerCM4Task11EEventQueueEEclERKS1_S4_>
 8109352:	4603      	mov	r3, r0
 8109354:	2b00      	cmp	r3, #0
 8109356:	d001      	beq.n	810935c <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEEixEOS1_+0x60>
 8109358:	2301      	movs	r3, #1
 810935a:	e000      	b.n	810935e <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEEixEOS1_+0x62>
 810935c:	2300      	movs	r3, #0
 810935e:	2b00      	cmp	r3, #0
 8109360:	d01f      	beq.n	81093a2 <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEEixEOS1_+0xa6>
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
 8109362:	687c      	ldr	r4, [r7, #4]
 8109364:	f107 0208 	add.w	r2, r7, #8
 8109368:	f107 0314 	add.w	r3, r7, #20
 810936c:	4611      	mov	r1, r2
 810936e:	4618      	mov	r0, r3
 8109370:	f000 f8c3 	bl	81094fa <_ZNSt23_Rb_tree_const_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEC1ERKSt17_Rb_tree_iteratorIS6_E>
					std::forward_as_tuple(std::move(__k)),
 8109374:	6838      	ldr	r0, [r7, #0]
 8109376:	f000 fb2b 	bl	81099d0 <_ZSt4moveIRN19EventManagerCM4Task11EEventQueueEEONSt16remove_referenceIT_E4typeEOS4_>
 810937a:	4602      	mov	r2, r0
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
 810937c:	f107 0318 	add.w	r3, r7, #24
 8109380:	4611      	mov	r1, r2
 8109382:	4618      	mov	r0, r3
 8109384:	f000 fb2f 	bl	81099e6 <_ZSt16forward_as_tupleIJN19EventManagerCM4Task11EEventQueueEEESt5tupleIJDpOT_EES5_>
 8109388:	f107 0218 	add.w	r2, r7, #24
 810938c:	f107 031c 	add.w	r3, r7, #28
 8109390:	9300      	str	r3, [sp, #0]
 8109392:	4613      	mov	r3, r2
 8109394:	4a08      	ldr	r2, [pc, #32]	@ (81093b8 <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEEixEOS1_+0xbc>)
 8109396:	6979      	ldr	r1, [r7, #20]
 8109398:	4620      	mov	r0, r4
 810939a:	f000 fb35 	bl	8109a08 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJOS1_EESH_IJEEEEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EDpOT_>
 810939e:	4603      	mov	r3, r0
 81093a0:	60bb      	str	r3, [r7, #8]
	return (*__i).second;
 81093a2:	f107 0308 	add.w	r3, r7, #8
 81093a6:	4618      	mov	r0, r3
 81093a8:	f000 f86e 	bl	8109488 <_ZNKSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEdeEv>
 81093ac:	4603      	mov	r3, r0
 81093ae:	3304      	adds	r3, #4
      }
 81093b0:	4618      	mov	r0, r3
 81093b2:	3724      	adds	r7, #36	@ 0x24
 81093b4:	46bd      	mov	sp, r7
 81093b6:	bd90      	pop	{r4, r7, pc}
 81093b8:	0812adf0 	.word	0x0812adf0

081093bc <_ZNSaISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 81093bc:	b580      	push	{r7, lr}
 81093be:	b082      	sub	sp, #8
 81093c0:	af00      	add	r7, sp, #0
 81093c2:	6078      	str	r0, [r7, #4]
 81093c4:	6878      	ldr	r0, [r7, #4]
 81093c6:	f000 fb65 	bl	8109a94 <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEEC1Ev>
 81093ca:	687b      	ldr	r3, [r7, #4]
 81093cc:	4618      	mov	r0, r3
 81093ce:	3708      	adds	r7, #8
 81093d0:	46bd      	mov	sp, r7
 81093d2:	bd80      	pop	{r7, pc}

081093d4 <_ZNSt20_Rb_tree_key_compareISt4lessIN19EventManagerCM4Task11EEventQueueEEEC1Ev>:
      _Rb_tree_key_compare()
 81093d4:	b480      	push	{r7}
 81093d6:	b083      	sub	sp, #12
 81093d8:	af00      	add	r7, sp, #0
 81093da:	6078      	str	r0, [r7, #4]
      { }
 81093dc:	687b      	ldr	r3, [r7, #4]
 81093de:	4618      	mov	r0, r3
 81093e0:	370c      	adds	r7, #12
 81093e2:	46bd      	mov	sp, r7
 81093e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81093e8:	4770      	bx	lr

081093ea <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_beginEv>:
      _M_begin() _GLIBCXX_NOEXCEPT
 81093ea:	b580      	push	{r7, lr}
 81093ec:	b082      	sub	sp, #8
 81093ee:	af00      	add	r7, sp, #0
 81093f0:	6078      	str	r0, [r7, #4]
      { return _M_mbegin(); }
 81093f2:	6878      	ldr	r0, [r7, #4]
 81093f4:	f000 fb82 	bl	8109afc <_ZNKSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE9_M_mbeginEv>
 81093f8:	4603      	mov	r3, r0
 81093fa:	4618      	mov	r0, r3
 81093fc:	3708      	adds	r7, #8
 81093fe:	46bd      	mov	sp, r7
 8109400:	bd80      	pop	{r7, pc}

08109402 <_ZSt4moveIRSt4pairIRN19EventManagerCM4Task11EEventQueueERP15QueueDefinitionEEONSt16remove_referenceIT_E4typeEOSA_>:
    move(_Tp&& __t) noexcept
 8109402:	b480      	push	{r7}
 8109404:	b083      	sub	sp, #12
 8109406:	af00      	add	r7, sp, #0
 8109408:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 810940a:	687b      	ldr	r3, [r7, #4]
 810940c:	4618      	mov	r0, r3
 810940e:	370c      	adds	r7, #12
 8109410:	46bd      	mov	sp, r7
 8109412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109416:	4770      	bx	lr

08109418 <_ZNSt10__pair_getILj0EE10__move_getIRN19EventManagerCM4Task11EEventQueueERP15QueueDefinitionEEOT_OSt4pairIS8_T0_E>:
	__move_get(pair<_Tp1, _Tp2>&& __pair) noexcept
 8109418:	b580      	push	{r7, lr}
 810941a:	b082      	sub	sp, #8
 810941c:	af00      	add	r7, sp, #0
 810941e:	6078      	str	r0, [r7, #4]
	{ return std::forward<_Tp1>(__pair.first); }
 8109420:	687b      	ldr	r3, [r7, #4]
 8109422:	681b      	ldr	r3, [r3, #0]
 8109424:	4618      	mov	r0, r3
 8109426:	f000 f852 	bl	81094ce <_ZSt7forwardIRN19EventManagerCM4Task11EEventQueueEEOT_RNSt16remove_referenceIS3_E4typeE>
 810942a:	4603      	mov	r3, r0
 810942c:	4618      	mov	r0, r3
 810942e:	3708      	adds	r7, #8
 8109430:	46bd      	mov	sp, r7
 8109432:	bd80      	pop	{r7, pc}

08109434 <_ZNSt10__pair_getILj1EE10__move_getIRN19EventManagerCM4Task11EEventQueueERP15QueueDefinitionEEOT0_OSt4pairIT_S8_E>:
	__move_get(pair<_Tp1, _Tp2>&& __pair) noexcept
 8109434:	b580      	push	{r7, lr}
 8109436:	b082      	sub	sp, #8
 8109438:	af00      	add	r7, sp, #0
 810943a:	6078      	str	r0, [r7, #4]
	{ return std::forward<_Tp2>(__pair.second); }
 810943c:	687b      	ldr	r3, [r7, #4]
 810943e:	685b      	ldr	r3, [r3, #4]
 8109440:	4618      	mov	r0, r3
 8109442:	f000 f84f 	bl	81094e4 <_ZSt7forwardIRP15QueueDefinitionEOT_RNSt16remove_referenceIS3_E4typeE>
 8109446:	4603      	mov	r3, r0
 8109448:	4618      	mov	r0, r3
 810944a:	3708      	adds	r7, #8
 810944c:	46bd      	mov	sp, r7
 810944e:	bd80      	pop	{r7, pc}

08109450 <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEE11lower_boundERS7_>:
       *  that matches the given key.  If unsuccessful it returns an iterator
       *  pointing to the first element that has a greater value than given key
       *  or end() if no such element exists.
       */
      iterator
      lower_bound(const key_type& __x)
 8109450:	b580      	push	{r7, lr}
 8109452:	b082      	sub	sp, #8
 8109454:	af00      	add	r7, sp, #0
 8109456:	6078      	str	r0, [r7, #4]
 8109458:	6039      	str	r1, [r7, #0]
      { return _M_t.lower_bound(__x); }
 810945a:	687b      	ldr	r3, [r7, #4]
 810945c:	6839      	ldr	r1, [r7, #0]
 810945e:	4618      	mov	r0, r3
 8109460:	f000 fb58 	bl	8109b14 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11lower_boundERS3_>
 8109464:	4603      	mov	r3, r0
 8109466:	4618      	mov	r0, r3
 8109468:	3708      	adds	r7, #8
 810946a:	46bd      	mov	sp, r7
 810946c:	bd80      	pop	{r7, pc}

0810946e <_ZNKSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEE8key_compEv>:
      key_comp() const
 810946e:	b590      	push	{r4, r7, lr}
 8109470:	b083      	sub	sp, #12
 8109472:	af00      	add	r7, sp, #0
 8109474:	6078      	str	r0, [r7, #4]
      { return _M_t.key_comp(); }
 8109476:	687b      	ldr	r3, [r7, #4]
 8109478:	4618      	mov	r0, r3
 810947a:	f000 fb62 	bl	8109b42 <_ZNKSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8key_compEv>
 810947e:	bf00      	nop
 8109480:	4620      	mov	r0, r4
 8109482:	370c      	adds	r7, #12
 8109484:	46bd      	mov	sp, r7
 8109486:	bd90      	pop	{r4, r7, pc}

08109488 <_ZNKSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8109488:	b580      	push	{r7, lr}
 810948a:	b082      	sub	sp, #8
 810948c:	af00      	add	r7, sp, #0
 810948e:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Link_type>(_M_node)->_M_valptr(); }
 8109490:	687b      	ldr	r3, [r7, #4]
 8109492:	681b      	ldr	r3, [r3, #0]
 8109494:	4618      	mov	r0, r3
 8109496:	f000 fb5f 	bl	8109b58 <_ZNSt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEE9_M_valptrEv>
 810949a:	4603      	mov	r3, r0
 810949c:	4618      	mov	r0, r3
 810949e:	3708      	adds	r7, #8
 81094a0:	46bd      	mov	sp, r7
 81094a2:	bd80      	pop	{r7, pc}

081094a4 <_ZNKSt4lessIN19EventManagerCM4Task11EEventQueueEEclERKS1_S4_>:
  template<typename _Tp>
    struct less : public binary_function<_Tp, _Tp, bool>
    {
      _GLIBCXX14_CONSTEXPR
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
 81094a4:	b480      	push	{r7}
 81094a6:	b085      	sub	sp, #20
 81094a8:	af00      	add	r7, sp, #0
 81094aa:	60f8      	str	r0, [r7, #12]
 81094ac:	60b9      	str	r1, [r7, #8]
 81094ae:	607a      	str	r2, [r7, #4]
      { return __x < __y; }
 81094b0:	68bb      	ldr	r3, [r7, #8]
 81094b2:	781a      	ldrb	r2, [r3, #0]
 81094b4:	687b      	ldr	r3, [r7, #4]
 81094b6:	781b      	ldrb	r3, [r3, #0]
 81094b8:	429a      	cmp	r2, r3
 81094ba:	bf34      	ite	cc
 81094bc:	2301      	movcc	r3, #1
 81094be:	2300      	movcs	r3, #0
 81094c0:	b2db      	uxtb	r3, r3
 81094c2:	4618      	mov	r0, r3
 81094c4:	3714      	adds	r7, #20
 81094c6:	46bd      	mov	sp, r7
 81094c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81094cc:	4770      	bx	lr

081094ce <_ZSt7forwardIRN19EventManagerCM4Task11EEventQueueEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 81094ce:	b480      	push	{r7}
 81094d0:	b083      	sub	sp, #12
 81094d2:	af00      	add	r7, sp, #0
 81094d4:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 81094d6:	687b      	ldr	r3, [r7, #4]
 81094d8:	4618      	mov	r0, r3
 81094da:	370c      	adds	r7, #12
 81094dc:	46bd      	mov	sp, r7
 81094de:	f85d 7b04 	ldr.w	r7, [sp], #4
 81094e2:	4770      	bx	lr

081094e4 <_ZSt7forwardIRP15QueueDefinitionEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 81094e4:	b480      	push	{r7}
 81094e6:	b083      	sub	sp, #12
 81094e8:	af00      	add	r7, sp, #0
 81094ea:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 81094ec:	687b      	ldr	r3, [r7, #4]
 81094ee:	4618      	mov	r0, r3
 81094f0:	370c      	adds	r7, #12
 81094f2:	46bd      	mov	sp, r7
 81094f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81094f8:	4770      	bx	lr

081094fa <_ZNSt23_Rb_tree_const_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEC1ERKSt17_Rb_tree_iteratorIS6_E>:
      _Rb_tree_const_iterator(const iterator& __it) _GLIBCXX_NOEXCEPT
 81094fa:	b480      	push	{r7}
 81094fc:	b083      	sub	sp, #12
 81094fe:	af00      	add	r7, sp, #0
 8109500:	6078      	str	r0, [r7, #4]
 8109502:	6039      	str	r1, [r7, #0]
      : _M_node(__it._M_node) { }
 8109504:	683b      	ldr	r3, [r7, #0]
 8109506:	681a      	ldr	r2, [r3, #0]
 8109508:	687b      	ldr	r3, [r7, #4]
 810950a:	601a      	str	r2, [r3, #0]
 810950c:	687b      	ldr	r3, [r7, #4]
 810950e:	4618      	mov	r0, r3
 8109510:	370c      	adds	r7, #12
 8109512:	46bd      	mov	sp, r7
 8109514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109518:	4770      	bx	lr

0810951a <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEE12emplace_hintIJRS1_RS3_EEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EDpOT_>:
	emplace_hint(const_iterator __pos, _Args&&... __args)
 810951a:	b5b0      	push	{r4, r5, r7, lr}
 810951c:	b084      	sub	sp, #16
 810951e:	af00      	add	r7, sp, #0
 8109520:	60f8      	str	r0, [r7, #12]
 8109522:	60b9      	str	r1, [r7, #8]
 8109524:	607a      	str	r2, [r7, #4]
 8109526:	603b      	str	r3, [r7, #0]
	  return _M_t._M_emplace_hint_unique(__pos,
 8109528:	68fc      	ldr	r4, [r7, #12]
 810952a:	6878      	ldr	r0, [r7, #4]
 810952c:	f7ff ffcf 	bl	81094ce <_ZSt7forwardIRN19EventManagerCM4Task11EEventQueueEEOT_RNSt16remove_referenceIS3_E4typeE>
 8109530:	4605      	mov	r5, r0
 8109532:	6838      	ldr	r0, [r7, #0]
 8109534:	f7ff ffd6 	bl	81094e4 <_ZSt7forwardIRP15QueueDefinitionEOT_RNSt16remove_referenceIS3_E4typeE>
 8109538:	4603      	mov	r3, r0
 810953a:	462a      	mov	r2, r5
 810953c:	68b9      	ldr	r1, [r7, #8]
 810953e:	4620      	mov	r0, r4
 8109540:	f000 fb18 	bl	8109b74 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE22_M_emplace_hint_uniqueIJRS1_RS5_EEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EDpOT_>
 8109544:	4603      	mov	r3, r0
	}
 8109546:	4618      	mov	r0, r3
 8109548:	3710      	adds	r7, #16
 810954a:	46bd      	mov	sp, r7
 810954c:	bdb0      	pop	{r4, r5, r7, pc}

0810954e <_ZNSt4pairISt17_Rb_tree_iteratorIS_IKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEbEC1IRS7_bEEOT_OT0_>:
	pair(_U1&& __x, _U2&& __y)
 810954e:	b580      	push	{r7, lr}
 8109550:	b084      	sub	sp, #16
 8109552:	af00      	add	r7, sp, #0
 8109554:	60f8      	str	r0, [r7, #12]
 8109556:	60b9      	str	r1, [r7, #8]
 8109558:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y))
 810955a:	68b8      	ldr	r0, [r7, #8]
 810955c:	f000 fb4a 	bl	8109bf4 <_ZSt7forwardIRSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEEOT_RNSt16remove_referenceISA_E4typeE>
 8109560:	4602      	mov	r2, r0
 8109562:	68fb      	ldr	r3, [r7, #12]
 8109564:	6812      	ldr	r2, [r2, #0]
 8109566:	601a      	str	r2, [r3, #0]
 8109568:	6878      	ldr	r0, [r7, #4]
 810956a:	f7f8 f997 	bl	810189c <_ZSt7forwardIbEOT_RNSt16remove_referenceIS0_E4typeE>
 810956e:	4603      	mov	r3, r0
 8109570:	781a      	ldrb	r2, [r3, #0]
 8109572:	68fb      	ldr	r3, [r7, #12]
 8109574:	711a      	strb	r2, [r3, #4]
	{ }
 8109576:	68fb      	ldr	r3, [r7, #12]
 8109578:	4618      	mov	r0, r3
 810957a:	3710      	adds	r7, #16
 810957c:	46bd      	mov	sp, r7
 810957e:	bd80      	pop	{r7, pc}

08109580 <_ZNSt12_Vector_baseI8SMessageSaIS0_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8109580:	b480      	push	{r7}
 8109582:	b083      	sub	sp, #12
 8109584:	af00      	add	r7, sp, #0
 8109586:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8109588:	687b      	ldr	r3, [r7, #4]
 810958a:	4618      	mov	r0, r3
 810958c:	370c      	adds	r7, #12
 810958e:	46bd      	mov	sp, r7
 8109590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109594:	4770      	bx	lr

08109596 <_ZSt8_DestroyIP8SMessageS0_EvT_S2_RSaIT0_E>:
    }

  template<typename _ForwardIterator, typename _Tp>
    _GLIBCXX20_CONSTEXPR
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8109596:	b580      	push	{r7, lr}
 8109598:	b084      	sub	sp, #16
 810959a:	af00      	add	r7, sp, #0
 810959c:	60f8      	str	r0, [r7, #12]
 810959e:	60b9      	str	r1, [r7, #8]
 81095a0:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 81095a2:	68b9      	ldr	r1, [r7, #8]
 81095a4:	68f8      	ldr	r0, [r7, #12]
 81095a6:	f000 fc2b 	bl	8109e00 <_ZSt8_DestroyIP8SMessageEvT_S2_>
    }
 81095aa:	bf00      	nop
 81095ac:	3710      	adds	r7, #16
 81095ae:	46bd      	mov	sp, r7
 81095b0:	bd80      	pop	{r7, pc}

081095b2 <_ZNSt12_Vector_baseI8SMessageSaIS0_EE13_M_deallocateEPS0_j>:
      _M_deallocate(pointer __p, size_t __n)
 81095b2:	b580      	push	{r7, lr}
 81095b4:	b084      	sub	sp, #16
 81095b6:	af00      	add	r7, sp, #0
 81095b8:	60f8      	str	r0, [r7, #12]
 81095ba:	60b9      	str	r1, [r7, #8]
 81095bc:	607a      	str	r2, [r7, #4]
	if (__p)
 81095be:	68bb      	ldr	r3, [r7, #8]
 81095c0:	2b00      	cmp	r3, #0
 81095c2:	d005      	beq.n	81095d0 <_ZNSt12_Vector_baseI8SMessageSaIS0_EE13_M_deallocateEPS0_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 81095c4:	68fb      	ldr	r3, [r7, #12]
 81095c6:	687a      	ldr	r2, [r7, #4]
 81095c8:	68b9      	ldr	r1, [r7, #8]
 81095ca:	4618      	mov	r0, r3
 81095cc:	f000 fc2e 	bl	8109e2c <_ZNSt16allocator_traitsISaI8SMessageEE10deallocateERS1_PS0_j>
      }
 81095d0:	bf00      	nop
 81095d2:	3710      	adds	r7, #16
 81095d4:	46bd      	mov	sp, r7
 81095d6:	bd80      	pop	{r7, pc}

081095d8 <_ZNSt16allocator_traitsISaI8SMessageEE9constructIS0_JRKS0_EEEvRS1_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 81095d8:	b580      	push	{r7, lr}
 81095da:	b084      	sub	sp, #16
 81095dc:	af00      	add	r7, sp, #0
 81095de:	60f8      	str	r0, [r7, #12]
 81095e0:	60b9      	str	r1, [r7, #8]
 81095e2:	607a      	str	r2, [r7, #4]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 81095e4:	6878      	ldr	r0, [r7, #4]
 81095e6:	f000 fc40 	bl	8109e6a <_ZSt7forwardIRK8SMessageEOT_RNSt16remove_referenceIS3_E4typeE>
 81095ea:	4603      	mov	r3, r0
 81095ec:	4619      	mov	r1, r3
 81095ee:	68b8      	ldr	r0, [r7, #8]
 81095f0:	f000 fc46 	bl	8109e80 <_ZSt12construct_atI8SMessageJRKS0_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS4_DpOS5_>
	}
 81095f4:	bf00      	nop
 81095f6:	3710      	adds	r7, #16
 81095f8:	46bd      	mov	sp, r7
 81095fa:	bd80      	pop	{r7, pc}

081095fc <_ZNSt6vectorI8SMessageSaIS0_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 81095fc:	b580      	push	{r7, lr}
 81095fe:	b084      	sub	sp, #16
 8109600:	af00      	add	r7, sp, #0
 8109602:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 8109604:	687b      	ldr	r3, [r7, #4]
 8109606:	1d1a      	adds	r2, r3, #4
 8109608:	f107 030c 	add.w	r3, r7, #12
 810960c:	4611      	mov	r1, r2
 810960e:	4618      	mov	r0, r3
 8109610:	f000 fc52 	bl	8109eb8 <_ZN9__gnu_cxx17__normal_iteratorIP8SMessageSt6vectorIS1_SaIS1_EEEC1ERKS2_>
 8109614:	68fb      	ldr	r3, [r7, #12]
 8109616:	4618      	mov	r0, r3
 8109618:	3710      	adds	r7, #16
 810961a:	46bd      	mov	sp, r7
 810961c:	bd80      	pop	{r7, pc}
	...

08109620 <_ZNKSt6vectorI8SMessageSaIS0_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8109620:	b480      	push	{r7}
 8109622:	b083      	sub	sp, #12
 8109624:	af00      	add	r7, sp, #0
 8109626:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8109628:	687b      	ldr	r3, [r7, #4]
 810962a:	685a      	ldr	r2, [r3, #4]
 810962c:	687b      	ldr	r3, [r7, #4]
 810962e:	681b      	ldr	r3, [r3, #0]
 8109630:	1ad3      	subs	r3, r2, r3
 8109632:	109b      	asrs	r3, r3, #2
 8109634:	4a04      	ldr	r2, [pc, #16]	@ (8109648 <_ZNKSt6vectorI8SMessageSaIS0_EE4sizeEv+0x28>)
 8109636:	fb02 f303 	mul.w	r3, r2, r3
 810963a:	4618      	mov	r0, r3
 810963c:	370c      	adds	r7, #12
 810963e:	46bd      	mov	sp, r7
 8109640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109644:	4770      	bx	lr
 8109646:	bf00      	nop
 8109648:	b6db6db7 	.word	0xb6db6db7

0810964c <_ZSt3maxIjERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
 810964c:	b480      	push	{r7}
 810964e:	b083      	sub	sp, #12
 8109650:	af00      	add	r7, sp, #0
 8109652:	6078      	str	r0, [r7, #4]
 8109654:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 8109656:	687b      	ldr	r3, [r7, #4]
 8109658:	681a      	ldr	r2, [r3, #0]
 810965a:	683b      	ldr	r3, [r7, #0]
 810965c:	681b      	ldr	r3, [r3, #0]
 810965e:	429a      	cmp	r2, r3
 8109660:	d201      	bcs.n	8109666 <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 8109662:	683b      	ldr	r3, [r7, #0]
 8109664:	e000      	b.n	8109668 <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 8109666:	687b      	ldr	r3, [r7, #4]
    }
 8109668:	4618      	mov	r0, r3
 810966a:	370c      	adds	r7, #12
 810966c:	46bd      	mov	sp, r7
 810966e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109672:	4770      	bx	lr

08109674 <_ZNKSt6vectorI8SMessageSaIS0_EE12_M_check_lenEjPKc>:
#endif

      // Called by _M_fill_insert, _M_insert_aux etc.
      _GLIBCXX20_CONSTEXPR
      size_type
      _M_check_len(size_type __n, const char* __s) const
 8109674:	b590      	push	{r4, r7, lr}
 8109676:	b087      	sub	sp, #28
 8109678:	af00      	add	r7, sp, #0
 810967a:	60f8      	str	r0, [r7, #12]
 810967c:	60b9      	str	r1, [r7, #8]
 810967e:	607a      	str	r2, [r7, #4]
      {
	if (max_size() - size() < __n)
 8109680:	68f8      	ldr	r0, [r7, #12]
 8109682:	f000 fc29 	bl	8109ed8 <_ZNKSt6vectorI8SMessageSaIS0_EE8max_sizeEv>
 8109686:	4604      	mov	r4, r0
 8109688:	68f8      	ldr	r0, [r7, #12]
 810968a:	f7ff ffc9 	bl	8109620 <_ZNKSt6vectorI8SMessageSaIS0_EE4sizeEv>
 810968e:	4603      	mov	r3, r0
 8109690:	1ae2      	subs	r2, r4, r3
 8109692:	68bb      	ldr	r3, [r7, #8]
 8109694:	429a      	cmp	r2, r3
 8109696:	bf34      	ite	cc
 8109698:	2301      	movcc	r3, #1
 810969a:	2300      	movcs	r3, #0
 810969c:	b2db      	uxtb	r3, r3
 810969e:	2b00      	cmp	r3, #0
 81096a0:	d002      	beq.n	81096a8 <_ZNKSt6vectorI8SMessageSaIS0_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 81096a2:	6878      	ldr	r0, [r7, #4]
 81096a4:	f01c fa55 	bl	8125b52 <_ZSt20__throw_length_errorPKc>

	const size_type __len = size() + (std::max)(size(), __n);
 81096a8:	68f8      	ldr	r0, [r7, #12]
 81096aa:	f7ff ffb9 	bl	8109620 <_ZNKSt6vectorI8SMessageSaIS0_EE4sizeEv>
 81096ae:	4604      	mov	r4, r0
 81096b0:	68f8      	ldr	r0, [r7, #12]
 81096b2:	f7ff ffb5 	bl	8109620 <_ZNKSt6vectorI8SMessageSaIS0_EE4sizeEv>
 81096b6:	4603      	mov	r3, r0
 81096b8:	613b      	str	r3, [r7, #16]
 81096ba:	f107 0208 	add.w	r2, r7, #8
 81096be:	f107 0310 	add.w	r3, r7, #16
 81096c2:	4611      	mov	r1, r2
 81096c4:	4618      	mov	r0, r3
 81096c6:	f7ff ffc1 	bl	810964c <_ZSt3maxIjERKT_S2_S2_>
 81096ca:	4603      	mov	r3, r0
 81096cc:	681b      	ldr	r3, [r3, #0]
 81096ce:	4423      	add	r3, r4
 81096d0:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 81096d2:	68f8      	ldr	r0, [r7, #12]
 81096d4:	f7ff ffa4 	bl	8109620 <_ZNKSt6vectorI8SMessageSaIS0_EE4sizeEv>
 81096d8:	4602      	mov	r2, r0
 81096da:	697b      	ldr	r3, [r7, #20]
 81096dc:	4293      	cmp	r3, r2
 81096de:	d306      	bcc.n	81096ee <_ZNKSt6vectorI8SMessageSaIS0_EE12_M_check_lenEjPKc+0x7a>
 81096e0:	68f8      	ldr	r0, [r7, #12]
 81096e2:	f000 fbf9 	bl	8109ed8 <_ZNKSt6vectorI8SMessageSaIS0_EE8max_sizeEv>
 81096e6:	4602      	mov	r2, r0
 81096e8:	697b      	ldr	r3, [r7, #20]
 81096ea:	4293      	cmp	r3, r2
 81096ec:	d904      	bls.n	81096f8 <_ZNKSt6vectorI8SMessageSaIS0_EE12_M_check_lenEjPKc+0x84>
 81096ee:	68f8      	ldr	r0, [r7, #12]
 81096f0:	f000 fbf2 	bl	8109ed8 <_ZNKSt6vectorI8SMessageSaIS0_EE8max_sizeEv>
 81096f4:	4603      	mov	r3, r0
 81096f6:	e000      	b.n	81096fa <_ZNKSt6vectorI8SMessageSaIS0_EE12_M_check_lenEjPKc+0x86>
 81096f8:	697b      	ldr	r3, [r7, #20]
      }
 81096fa:	4618      	mov	r0, r3
 81096fc:	371c      	adds	r7, #28
 81096fe:	46bd      	mov	sp, r7
 8109700:	bd90      	pop	{r4, r7, pc}
	...

08109704 <_ZN9__gnu_cxxmiIP8SMessageSt6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS9_SC_>:
    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
    _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 8109704:	b590      	push	{r4, r7, lr}
 8109706:	b083      	sub	sp, #12
 8109708:	af00      	add	r7, sp, #0
 810970a:	6078      	str	r0, [r7, #4]
 810970c:	6039      	str	r1, [r7, #0]
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
 810970e:	6878      	ldr	r0, [r7, #4]
 8109710:	f000 fbf3 	bl	8109efa <_ZNK9__gnu_cxx17__normal_iteratorIP8SMessageSt6vectorIS1_SaIS1_EEE4baseEv>
 8109714:	4603      	mov	r3, r0
 8109716:	681c      	ldr	r4, [r3, #0]
 8109718:	6838      	ldr	r0, [r7, #0]
 810971a:	f000 fbee 	bl	8109efa <_ZNK9__gnu_cxx17__normal_iteratorIP8SMessageSt6vectorIS1_SaIS1_EEE4baseEv>
 810971e:	4603      	mov	r3, r0
 8109720:	681b      	ldr	r3, [r3, #0]
 8109722:	1ae3      	subs	r3, r4, r3
 8109724:	109b      	asrs	r3, r3, #2
 8109726:	4a03      	ldr	r2, [pc, #12]	@ (8109734 <_ZN9__gnu_cxxmiIP8SMessageSt6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS9_SC_+0x30>)
 8109728:	fb02 f303 	mul.w	r3, r2, r3
 810972c:	4618      	mov	r0, r3
 810972e:	370c      	adds	r7, #12
 8109730:	46bd      	mov	sp, r7
 8109732:	bd90      	pop	{r4, r7, pc}
 8109734:	b6db6db7 	.word	0xb6db6db7

08109738 <_ZNSt6vectorI8SMessageSaIS0_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8109738:	b580      	push	{r7, lr}
 810973a:	b084      	sub	sp, #16
 810973c:	af00      	add	r7, sp, #0
 810973e:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 8109740:	687a      	ldr	r2, [r7, #4]
 8109742:	f107 030c 	add.w	r3, r7, #12
 8109746:	4611      	mov	r1, r2
 8109748:	4618      	mov	r0, r3
 810974a:	f000 fbb5 	bl	8109eb8 <_ZN9__gnu_cxx17__normal_iteratorIP8SMessageSt6vectorIS1_SaIS1_EEEC1ERKS2_>
 810974e:	68fb      	ldr	r3, [r7, #12]
 8109750:	4618      	mov	r0, r3
 8109752:	3710      	adds	r7, #16
 8109754:	46bd      	mov	sp, r7
 8109756:	bd80      	pop	{r7, pc}

08109758 <_ZNSt6vectorI8SMessageSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>:
#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      _GLIBCXX20_CONSTEXPR
      void
      vector<_Tp, _Alloc>::
 8109758:	b5b0      	push	{r4, r5, r7, lr}
 810975a:	b08c      	sub	sp, #48	@ 0x30
 810975c:	af00      	add	r7, sp, #0
 810975e:	60f8      	str	r0, [r7, #12]
 8109760:	60b9      	str	r1, [r7, #8]
 8109762:	607a      	str	r2, [r7, #4]
    vector<_Tp, _Alloc>::
    _M_realloc_insert(iterator __position, const _Tp& __x)
#endif
    {
      const size_type __len =
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 8109764:	4a3f      	ldr	r2, [pc, #252]	@ (8109864 <_ZNSt6vectorI8SMessageSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x10c>)
 8109766:	2101      	movs	r1, #1
 8109768:	68f8      	ldr	r0, [r7, #12]
 810976a:	f7ff ff83 	bl	8109674 <_ZNKSt6vectorI8SMessageSaIS0_EE12_M_check_lenEjPKc>
 810976e:	62f8      	str	r0, [r7, #44]	@ 0x2c
      pointer __old_start = this->_M_impl._M_start;
 8109770:	68fb      	ldr	r3, [r7, #12]
 8109772:	681b      	ldr	r3, [r3, #0]
 8109774:	62bb      	str	r3, [r7, #40]	@ 0x28
      pointer __old_finish = this->_M_impl._M_finish;
 8109776:	68fb      	ldr	r3, [r7, #12]
 8109778:	685b      	ldr	r3, [r3, #4]
 810977a:	627b      	str	r3, [r7, #36]	@ 0x24
      const size_type __elems_before = __position - begin();
 810977c:	68f8      	ldr	r0, [r7, #12]
 810977e:	f7ff ffdb 	bl	8109738 <_ZNSt6vectorI8SMessageSaIS0_EE5beginEv>
 8109782:	4603      	mov	r3, r0
 8109784:	617b      	str	r3, [r7, #20]
 8109786:	f107 0214 	add.w	r2, r7, #20
 810978a:	f107 0308 	add.w	r3, r7, #8
 810978e:	4611      	mov	r1, r2
 8109790:	4618      	mov	r0, r3
 8109792:	f7ff ffb7 	bl	8109704 <_ZN9__gnu_cxxmiIP8SMessageSt6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS9_SC_>
 8109796:	4603      	mov	r3, r0
 8109798:	623b      	str	r3, [r7, #32]
      pointer __new_start(this->_M_allocate(__len));
 810979a:	68fb      	ldr	r3, [r7, #12]
 810979c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 810979e:	4618      	mov	r0, r3
 81097a0:	f000 fbb6 	bl	8109f10 <_ZNSt12_Vector_baseI8SMessageSaIS0_EE11_M_allocateEj>
 81097a4:	61f8      	str	r0, [r7, #28]
      pointer __new_finish(__new_start);
 81097a6:	69fb      	ldr	r3, [r7, #28]
 81097a8:	61bb      	str	r3, [r7, #24]
	  // The order of the three operations is dictated by the C++11
	  // case, where the moves could alter a new element belonging
	  // to the existing vector.  This is an issue only for callers
	  // taking the element by lvalue ref (see last bullet of C++11
	  // [res.on.arguments]).
	  _Alloc_traits::construct(this->_M_impl,
 81097aa:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 81097ac:	6a3a      	ldr	r2, [r7, #32]
 81097ae:	4613      	mov	r3, r2
 81097b0:	00db      	lsls	r3, r3, #3
 81097b2:	1a9b      	subs	r3, r3, r2
 81097b4:	009b      	lsls	r3, r3, #2
 81097b6:	461a      	mov	r2, r3
	  _Alloc_traits::construct(this->_M_impl,
 81097b8:	69fb      	ldr	r3, [r7, #28]
 81097ba:	189d      	adds	r5, r3, r2
 81097bc:	6878      	ldr	r0, [r7, #4]
 81097be:	f000 fb54 	bl	8109e6a <_ZSt7forwardIRK8SMessageEOT_RNSt16remove_referenceIS3_E4typeE>
 81097c2:	4603      	mov	r3, r0
 81097c4:	461a      	mov	r2, r3
 81097c6:	4629      	mov	r1, r5
 81097c8:	4620      	mov	r0, r4
 81097ca:	f7ff ff05 	bl	81095d8 <_ZNSt16allocator_traitsISaI8SMessageEE9constructIS0_JRKS0_EEEvRS1_PT_DpOT0_>
#if __cplusplus >= 201103L
				   std::forward<_Args>(__args)...);
#else
				   __x);
#endif
	  __new_finish = pointer();
 81097ce:	2300      	movs	r3, #0
 81097d0:	61bb      	str	r3, [r7, #24]

#if __cplusplus >= 201103L
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
	    {
	      __new_finish = _S_relocate(__old_start, __position.base(),
 81097d2:	f107 0308 	add.w	r3, r7, #8
 81097d6:	4618      	mov	r0, r3
 81097d8:	f000 fb8f 	bl	8109efa <_ZNK9__gnu_cxx17__normal_iteratorIP8SMessageSt6vectorIS1_SaIS1_EEE4baseEv>
 81097dc:	4603      	mov	r3, r0
 81097de:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 81097e0:	68fb      	ldr	r3, [r7, #12]
 81097e2:	4618      	mov	r0, r3
 81097e4:	f7ff fecc 	bl	8109580 <_ZNSt12_Vector_baseI8SMessageSaIS0_EE19_M_get_Tp_allocatorEv>
 81097e8:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 81097ea:	69fa      	ldr	r2, [r7, #28]
 81097ec:	4621      	mov	r1, r4
 81097ee:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 81097f0:	f000 fba2 	bl	8109f38 <_ZNSt6vectorI8SMessageSaIS0_EE11_S_relocateEPS0_S3_S3_RS1_>
 81097f4:	61b8      	str	r0, [r7, #24]

	      ++__new_finish;
 81097f6:	69bb      	ldr	r3, [r7, #24]
 81097f8:	331c      	adds	r3, #28
 81097fa:	61bb      	str	r3, [r7, #24]

	      __new_finish = _S_relocate(__position.base(), __old_finish,
 81097fc:	f107 0308 	add.w	r3, r7, #8
 8109800:	4618      	mov	r0, r3
 8109802:	f000 fb7a 	bl	8109efa <_ZNK9__gnu_cxx17__normal_iteratorIP8SMessageSt6vectorIS1_SaIS1_EEE4baseEv>
 8109806:	4603      	mov	r3, r0
 8109808:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 810980a:	68fb      	ldr	r3, [r7, #12]
 810980c:	4618      	mov	r0, r3
 810980e:	f7ff feb7 	bl	8109580 <_ZNSt12_Vector_baseI8SMessageSaIS0_EE19_M_get_Tp_allocatorEv>
 8109812:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8109814:	69ba      	ldr	r2, [r7, #24]
 8109816:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8109818:	4620      	mov	r0, r4
 810981a:	f000 fb8d 	bl	8109f38 <_ZNSt6vectorI8SMessageSaIS0_EE11_S_relocateEPS0_S3_S3_RS1_>
 810981e:	61b8      	str	r0, [r7, #24]
#if __cplusplus >= 201103L
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
#endif
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
      _GLIBCXX_ASAN_ANNOTATE_REINIT;
      _M_deallocate(__old_start,
 8109820:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 8109822:	68fb      	ldr	r3, [r7, #12]
 8109824:	689a      	ldr	r2, [r3, #8]
 8109826:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8109828:	1ad3      	subs	r3, r2, r3
 810982a:	109b      	asrs	r3, r3, #2
 810982c:	4a0e      	ldr	r2, [pc, #56]	@ (8109868 <_ZNSt6vectorI8SMessageSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x110>)
 810982e:	fb02 f303 	mul.w	r3, r2, r3
      _M_deallocate(__old_start,
 8109832:	461a      	mov	r2, r3
 8109834:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8109836:	f7ff febc 	bl	81095b2 <_ZNSt12_Vector_baseI8SMessageSaIS0_EE13_M_deallocateEPS0_j>
      this->_M_impl._M_start = __new_start;
 810983a:	68fb      	ldr	r3, [r7, #12]
 810983c:	69fa      	ldr	r2, [r7, #28]
 810983e:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 8109840:	68fb      	ldr	r3, [r7, #12]
 8109842:	69ba      	ldr	r2, [r7, #24]
 8109844:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8109846:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8109848:	4613      	mov	r3, r2
 810984a:	00db      	lsls	r3, r3, #3
 810984c:	1a9b      	subs	r3, r3, r2
 810984e:	009b      	lsls	r3, r3, #2
 8109850:	461a      	mov	r2, r3
 8109852:	69fb      	ldr	r3, [r7, #28]
 8109854:	441a      	add	r2, r3
 8109856:	68fb      	ldr	r3, [r7, #12]
 8109858:	609a      	str	r2, [r3, #8]
    }
 810985a:	bf00      	nop
 810985c:	3730      	adds	r7, #48	@ 0x30
 810985e:	46bd      	mov	sp, r7
 8109860:	bdb0      	pop	{r4, r5, r7, pc}
 8109862:	bf00      	nop
 8109864:	08127d14 	.word	0x08127d14
 8109868:	b6db6db7 	.word	0xb6db6db7

0810986c <_ZN9__gnu_cxx17__normal_iteratorIPK8SMessageSt6vectorIS1_SaIS1_EEEC1ERKS3_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 810986c:	b480      	push	{r7}
 810986e:	b083      	sub	sp, #12
 8109870:	af00      	add	r7, sp, #0
 8109872:	6078      	str	r0, [r7, #4]
 8109874:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8109876:	683b      	ldr	r3, [r7, #0]
 8109878:	681a      	ldr	r2, [r3, #0]
 810987a:	687b      	ldr	r3, [r7, #4]
 810987c:	601a      	str	r2, [r3, #0]
 810987e:	687b      	ldr	r3, [r7, #4]
 8109880:	4618      	mov	r0, r3
 8109882:	370c      	adds	r7, #12
 8109884:	46bd      	mov	sp, r7
 8109886:	f85d 7b04 	ldr.w	r7, [sp], #4
 810988a:	4770      	bx	lr

0810988c <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4findERS3_>:

  template<typename _Key, typename _Val, typename _KeyOfValue,
	   typename _Compare, typename _Alloc>
    typename _Rb_tree<_Key, _Val, _KeyOfValue,
		      _Compare, _Alloc>::iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 810988c:	b590      	push	{r4, r7, lr}
 810988e:	b085      	sub	sp, #20
 8109890:	af00      	add	r7, sp, #0
 8109892:	6078      	str	r0, [r7, #4]
 8109894:	6039      	str	r1, [r7, #0]
    find(const _Key& __k)
    {
      iterator __j = _M_lower_bound(_M_begin(), _M_end(), __k);
 8109896:	6878      	ldr	r0, [r7, #4]
 8109898:	f7ff fda7 	bl	81093ea <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_beginEv>
 810989c:	4604      	mov	r4, r0
 810989e:	6878      	ldr	r0, [r7, #4]
 81098a0:	f000 fb68 	bl	8109f74 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>
 81098a4:	4602      	mov	r2, r0
 81098a6:	683b      	ldr	r3, [r7, #0]
 81098a8:	4621      	mov	r1, r4
 81098aa:	6878      	ldr	r0, [r7, #4]
 81098ac:	f000 fb6e 	bl	8109f8c <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_>
 81098b0:	4603      	mov	r3, r0
 81098b2:	60bb      	str	r3, [r7, #8]
      return (__j == end()
 81098b4:	6878      	ldr	r0, [r7, #4]
 81098b6:	f000 f825 	bl	8109904 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE3endEv>
 81098ba:	4603      	mov	r3, r0
 81098bc:	60fb      	str	r3, [r7, #12]
 81098be:	f107 020c 	add.w	r2, r7, #12
 81098c2:	f107 0308 	add.w	r3, r7, #8
 81098c6:	4611      	mov	r1, r2
 81098c8:	4618      	mov	r0, r3
 81098ca:	f7ff fca7 	bl	810921c <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEES9_>
 81098ce:	4603      	mov	r3, r0
	      || _M_impl._M_key_compare(__k,
					_S_key(__j._M_node))) ? end() : __j;
 81098d0:	2b00      	cmp	r3, #0
 81098d2:	d10d      	bne.n	81098f0 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4findERS3_+0x64>
	      || _M_impl._M_key_compare(__k,
 81098d4:	687c      	ldr	r4, [r7, #4]
					_S_key(__j._M_node))) ? end() : __j;
 81098d6:	68bb      	ldr	r3, [r7, #8]
	      || _M_impl._M_key_compare(__k,
 81098d8:	4618      	mov	r0, r3
 81098da:	f000 fb88 	bl	8109fee <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 81098de:	4603      	mov	r3, r0
 81098e0:	461a      	mov	r2, r3
 81098e2:	6839      	ldr	r1, [r7, #0]
 81098e4:	4620      	mov	r0, r4
 81098e6:	f7ff fddd 	bl	81094a4 <_ZNKSt4lessIN19EventManagerCM4Task11EEventQueueEEclERKS1_S4_>
 81098ea:	4603      	mov	r3, r0
 81098ec:	2b00      	cmp	r3, #0
 81098ee:	d004      	beq.n	81098fa <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4findERS3_+0x6e>
					_S_key(__j._M_node))) ? end() : __j;
 81098f0:	6878      	ldr	r0, [r7, #4]
 81098f2:	f000 f807 	bl	8109904 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE3endEv>
 81098f6:	4603      	mov	r3, r0
 81098f8:	e000      	b.n	81098fc <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4findERS3_+0x70>
 81098fa:	68bb      	ldr	r3, [r7, #8]
    }
 81098fc:	4618      	mov	r0, r3
 81098fe:	3714      	adds	r7, #20
 8109900:	46bd      	mov	sp, r7
 8109902:	bd90      	pop	{r4, r7, pc}

08109904 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8109904:	b580      	push	{r7, lr}
 8109906:	b084      	sub	sp, #16
 8109908:	af00      	add	r7, sp, #0
 810990a:	6078      	str	r0, [r7, #4]
      { return iterator(&this->_M_impl._M_header); }
 810990c:	687b      	ldr	r3, [r7, #4]
 810990e:	1d1a      	adds	r2, r3, #4
 8109910:	f107 030c 	add.w	r3, r7, #12
 8109914:	4611      	mov	r1, r2
 8109916:	4618      	mov	r0, r3
 8109918:	f000 fa57 	bl	8109dca <_ZNSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEC1EPSt18_Rb_tree_node_base>
 810991c:	68fb      	ldr	r3, [r7, #12]
 810991e:	4618      	mov	r0, r3
 8109920:	3710      	adds	r7, #16
 8109922:	46bd      	mov	sp, r7
 8109924:	bd80      	pop	{r7, pc}

08109926 <_ZNSt5tupleIJRKN19EventManagerCM4Task11EEventQueueEEEC1ILb1ELb1EEES3_>:
	: _Inherited() { }

      template<bool _NotEmpty = (sizeof...(_Elements) >= 1),
	       _ImplicitCtor<_NotEmpty, const _Elements&...> = true>
	constexpr
	tuple(const _Elements&... __elements)
 8109926:	b580      	push	{r7, lr}
 8109928:	b082      	sub	sp, #8
 810992a:	af00      	add	r7, sp, #0
 810992c:	6078      	str	r0, [r7, #4]
 810992e:	6039      	str	r1, [r7, #0]
	noexcept(__nothrow_constructible<const _Elements&...>())
	: _Inherited(__elements...) { }
 8109930:	687b      	ldr	r3, [r7, #4]
 8109932:	6839      	ldr	r1, [r7, #0]
 8109934:	4618      	mov	r0, r3
 8109936:	f000 fb66 	bl	810a006 <_ZNSt11_Tuple_implILj0EJRKN19EventManagerCM4Task11EEventQueueEEEC1ES3_>
 810993a:	687b      	ldr	r3, [r7, #4]
 810993c:	4618      	mov	r0, r3
 810993e:	3708      	adds	r7, #8
 8109940:	46bd      	mov	sp, r7
 8109942:	bd80      	pop	{r7, pc}

08109944 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EDpOT_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8109944:	b5b0      	push	{r4, r5, r7, lr}
 8109946:	b08c      	sub	sp, #48	@ 0x30
 8109948:	af02      	add	r7, sp, #8
 810994a:	60f8      	str	r0, [r7, #12]
 810994c:	60b9      	str	r1, [r7, #8]
 810994e:	607a      	str	r2, [r7, #4]
 8109950:	603b      	str	r3, [r7, #0]
	_Auto_node __z(*this, std::forward<_Args>(__args)...);
 8109952:	6878      	ldr	r0, [r7, #4]
 8109954:	f000 fb66 	bl	810a024 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8109958:	4604      	mov	r4, r0
 810995a:	6838      	ldr	r0, [r7, #0]
 810995c:	f000 fb6d 	bl	810a03a <_ZSt7forwardISt5tupleIJRKN19EventManagerCM4Task11EEventQueueEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8109960:	4605      	mov	r5, r0
 8109962:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8109964:	f000 fb74 	bl	810a050 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8109968:	4603      	mov	r3, r0
 810996a:	f107 001c 	add.w	r0, r7, #28
 810996e:	9300      	str	r3, [sp, #0]
 8109970:	462b      	mov	r3, r5
 8109972:	4622      	mov	r2, r4
 8109974:	68f9      	ldr	r1, [r7, #12]
 8109976:	f000 fb76 	bl	810a066 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE10_Auto_nodeC1IJRKSt21piecewise_construct_tSt5tupleIJRS3_EESI_IJEEEEERSC_DpOT_>
	auto __res = _M_get_insert_hint_unique_pos(__pos, __z._M_key());
 810997a:	f107 031c 	add.w	r3, r7, #28
 810997e:	4618      	mov	r0, r3
 8109980:	f000 f9fc 	bl	8109d7c <_ZNKSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE10_Auto_node6_M_keyEv>
 8109984:	4603      	mov	r3, r0
 8109986:	f107 0014 	add.w	r0, r7, #20
 810998a:	68ba      	ldr	r2, [r7, #8]
 810998c:	68f9      	ldr	r1, [r7, #12]
 810998e:	f000 fb8d 	bl	810a0ac <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_>
	if (__res.second)
 8109992:	69bb      	ldr	r3, [r7, #24]
 8109994:	2b00      	cmp	r3, #0
 8109996:	d009      	beq.n	81099ac <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EDpOT_+0x68>
	  return __z._M_insert(__res);
 8109998:	f107 001c 	add.w	r0, r7, #28
 810999c:	f107 0314 	add.w	r3, r7, #20
 81099a0:	e893 0006 	ldmia.w	r3, {r1, r2}
 81099a4:	f000 f9f8 	bl	8109d98 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE10_Auto_node9_M_insertES2_IPSt18_Rb_tree_node_baseSF_E>
 81099a8:	4604      	mov	r4, r0
 81099aa:	e007      	b.n	81099bc <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EDpOT_+0x78>
	return iterator(__res.first);
 81099ac:	697a      	ldr	r2, [r7, #20]
 81099ae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 81099b2:	4611      	mov	r1, r2
 81099b4:	4618      	mov	r0, r3
 81099b6:	f000 fa08 	bl	8109dca <_ZNSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEC1EPSt18_Rb_tree_node_base>
 81099ba:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
      }
 81099bc:	f107 031c 	add.w	r3, r7, #28
 81099c0:	4618      	mov	r0, r3
 81099c2:	f000 f941 	bl	8109c48 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE10_Auto_nodeD1Ev>
 81099c6:	4623      	mov	r3, r4
 81099c8:	4618      	mov	r0, r3
 81099ca:	3728      	adds	r7, #40	@ 0x28
 81099cc:	46bd      	mov	sp, r7
 81099ce:	bdb0      	pop	{r4, r5, r7, pc}

081099d0 <_ZSt4moveIRN19EventManagerCM4Task11EEventQueueEEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 81099d0:	b480      	push	{r7}
 81099d2:	b083      	sub	sp, #12
 81099d4:	af00      	add	r7, sp, #0
 81099d6:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 81099d8:	687b      	ldr	r3, [r7, #4]
 81099da:	4618      	mov	r0, r3
 81099dc:	370c      	adds	r7, #12
 81099de:	46bd      	mov	sp, r7
 81099e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81099e4:	4770      	bx	lr

081099e6 <_ZSt16forward_as_tupleIJN19EventManagerCM4Task11EEventQueueEEESt5tupleIJDpOT_EES5_>:
  // _GLIBCXX_RESOLVE_LIB_DEFECTS
  // 2275. Why is forward_as_tuple not constexpr?
  /// std::forward_as_tuple
  template<typename... _Elements>
    constexpr tuple<_Elements&&...>
    forward_as_tuple(_Elements&&... __args) noexcept
 81099e6:	b580      	push	{r7, lr}
 81099e8:	b082      	sub	sp, #8
 81099ea:	af00      	add	r7, sp, #0
 81099ec:	6078      	str	r0, [r7, #4]
 81099ee:	6039      	str	r1, [r7, #0]
    { return tuple<_Elements&&...>(std::forward<_Elements>(__args)...); }
 81099f0:	6838      	ldr	r0, [r7, #0]
 81099f2:	f000 fc7e 	bl	810a2f2 <_ZSt7forwardIN19EventManagerCM4Task11EEventQueueEEOT_RNSt16remove_referenceIS2_E4typeE>
 81099f6:	4603      	mov	r3, r0
 81099f8:	4619      	mov	r1, r3
 81099fa:	6878      	ldr	r0, [r7, #4]
 81099fc:	f000 fc84 	bl	810a308 <_ZNSt5tupleIJON19EventManagerCM4Task11EEventQueueEEEC1IJS1_ELb1ELb1EEEDpOT_>
 8109a00:	6878      	ldr	r0, [r7, #4]
 8109a02:	3708      	adds	r7, #8
 8109a04:	46bd      	mov	sp, r7
 8109a06:	bd80      	pop	{r7, pc}

08109a08 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJOS1_EESH_IJEEEEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EDpOT_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8109a08:	b5b0      	push	{r4, r5, r7, lr}
 8109a0a:	b08c      	sub	sp, #48	@ 0x30
 8109a0c:	af02      	add	r7, sp, #8
 8109a0e:	60f8      	str	r0, [r7, #12]
 8109a10:	60b9      	str	r1, [r7, #8]
 8109a12:	607a      	str	r2, [r7, #4]
 8109a14:	603b      	str	r3, [r7, #0]
	_Auto_node __z(*this, std::forward<_Args>(__args)...);
 8109a16:	6878      	ldr	r0, [r7, #4]
 8109a18:	f000 fb04 	bl	810a024 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8109a1c:	4604      	mov	r4, r0
 8109a1e:	6838      	ldr	r0, [r7, #0]
 8109a20:	f000 fc85 	bl	810a32e <_ZSt7forwardISt5tupleIJON19EventManagerCM4Task11EEventQueueEEEEOT_RNSt16remove_referenceIS5_E4typeE>
 8109a24:	4605      	mov	r5, r0
 8109a26:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8109a28:	f000 fb12 	bl	810a050 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8109a2c:	4603      	mov	r3, r0
 8109a2e:	f107 001c 	add.w	r0, r7, #28
 8109a32:	9300      	str	r3, [sp, #0]
 8109a34:	462b      	mov	r3, r5
 8109a36:	4622      	mov	r2, r4
 8109a38:	68f9      	ldr	r1, [r7, #12]
 8109a3a:	f000 fc83 	bl	810a344 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE10_Auto_nodeC1IJRKSt21piecewise_construct_tSt5tupleIJOS1_EESI_IJEEEEERSC_DpOT_>
	auto __res = _M_get_insert_hint_unique_pos(__pos, __z._M_key());
 8109a3e:	f107 031c 	add.w	r3, r7, #28
 8109a42:	4618      	mov	r0, r3
 8109a44:	f000 f99a 	bl	8109d7c <_ZNKSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE10_Auto_node6_M_keyEv>
 8109a48:	4603      	mov	r3, r0
 8109a4a:	f107 0014 	add.w	r0, r7, #20
 8109a4e:	68ba      	ldr	r2, [r7, #8]
 8109a50:	68f9      	ldr	r1, [r7, #12]
 8109a52:	f000 fb2b 	bl	810a0ac <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_>
	if (__res.second)
 8109a56:	69bb      	ldr	r3, [r7, #24]
 8109a58:	2b00      	cmp	r3, #0
 8109a5a:	d009      	beq.n	8109a70 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJOS1_EESH_IJEEEEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EDpOT_+0x68>
	  return __z._M_insert(__res);
 8109a5c:	f107 001c 	add.w	r0, r7, #28
 8109a60:	f107 0314 	add.w	r3, r7, #20
 8109a64:	e893 0006 	ldmia.w	r3, {r1, r2}
 8109a68:	f000 f996 	bl	8109d98 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE10_Auto_node9_M_insertES2_IPSt18_Rb_tree_node_baseSF_E>
 8109a6c:	4604      	mov	r4, r0
 8109a6e:	e007      	b.n	8109a80 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJOS1_EESH_IJEEEEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EDpOT_+0x78>
	return iterator(__res.first);
 8109a70:	697a      	ldr	r2, [r7, #20]
 8109a72:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8109a76:	4611      	mov	r1, r2
 8109a78:	4618      	mov	r0, r3
 8109a7a:	f000 f9a6 	bl	8109dca <_ZNSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEC1EPSt18_Rb_tree_node_base>
 8109a7e:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
      }
 8109a80:	f107 031c 	add.w	r3, r7, #28
 8109a84:	4618      	mov	r0, r3
 8109a86:	f000 f8df 	bl	8109c48 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE10_Auto_nodeD1Ev>
 8109a8a:	4623      	mov	r3, r4
 8109a8c:	4618      	mov	r0, r3
 8109a8e:	3728      	adds	r7, #40	@ 0x28
 8109a90:	46bd      	mov	sp, r7
 8109a92:	bdb0      	pop	{r4, r5, r7, pc}

08109a94 <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEEC1Ev>:
      __new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8109a94:	b480      	push	{r7}
 8109a96:	b083      	sub	sp, #12
 8109a98:	af00      	add	r7, sp, #0
 8109a9a:	6078      	str	r0, [r7, #4]
 8109a9c:	687b      	ldr	r3, [r7, #4]
 8109a9e:	4618      	mov	r0, r3
 8109aa0:	370c      	adds	r7, #12
 8109aa2:	46bd      	mov	sp, r7
 8109aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109aa8:	4770      	bx	lr

08109aaa <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>:
      _S_right(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8109aaa:	b480      	push	{r7}
 8109aac:	b083      	sub	sp, #12
 8109aae:	af00      	add	r7, sp, #0
 8109ab0:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_right); }
 8109ab2:	687b      	ldr	r3, [r7, #4]
 8109ab4:	68db      	ldr	r3, [r3, #12]
 8109ab6:	4618      	mov	r0, r3
 8109ab8:	370c      	adds	r7, #12
 8109aba:	46bd      	mov	sp, r7
 8109abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109ac0:	4770      	bx	lr

08109ac2 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE7_S_leftEPSt18_Rb_tree_node_base>:
      _S_left(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8109ac2:	b480      	push	{r7}
 8109ac4:	b083      	sub	sp, #12
 8109ac6:	af00      	add	r7, sp, #0
 8109ac8:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_left); }
 8109aca:	687b      	ldr	r3, [r7, #4]
 8109acc:	689b      	ldr	r3, [r3, #8]
 8109ace:	4618      	mov	r0, r3
 8109ad0:	370c      	adds	r7, #12
 8109ad2:	46bd      	mov	sp, r7
 8109ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109ad8:	4770      	bx	lr

08109ada <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS6_E>:
      _M_drop_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8109ada:	b580      	push	{r7, lr}
 8109adc:	b082      	sub	sp, #8
 8109ade:	af00      	add	r7, sp, #0
 8109ae0:	6078      	str	r0, [r7, #4]
 8109ae2:	6039      	str	r1, [r7, #0]
	_M_destroy_node(__p);
 8109ae4:	6839      	ldr	r1, [r7, #0]
 8109ae6:	6878      	ldr	r0, [r7, #4]
 8109ae8:	f000 fc4f 	bl	810a38a <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS6_E>
	_M_put_node(__p);
 8109aec:	6839      	ldr	r1, [r7, #0]
 8109aee:	6878      	ldr	r0, [r7, #4]
 8109af0:	f000 fc60 	bl	810a3b4 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS6_E>
      }
 8109af4:	bf00      	nop
 8109af6:	3708      	adds	r7, #8
 8109af8:	46bd      	mov	sp, r7
 8109afa:	bd80      	pop	{r7, pc}

08109afc <_ZNKSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE9_M_mbeginEv>:
      _M_mbegin() const _GLIBCXX_NOEXCEPT
 8109afc:	b480      	push	{r7}
 8109afe:	b083      	sub	sp, #12
 8109b00:	af00      	add	r7, sp, #0
 8109b02:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
 8109b04:	687b      	ldr	r3, [r7, #4]
 8109b06:	689b      	ldr	r3, [r3, #8]
 8109b08:	4618      	mov	r0, r3
 8109b0a:	370c      	adds	r7, #12
 8109b0c:	46bd      	mov	sp, r7
 8109b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109b12:	4770      	bx	lr

08109b14 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11lower_boundERS3_>:
      lower_bound(const key_type& __k)
 8109b14:	b590      	push	{r4, r7, lr}
 8109b16:	b083      	sub	sp, #12
 8109b18:	af00      	add	r7, sp, #0
 8109b1a:	6078      	str	r0, [r7, #4]
 8109b1c:	6039      	str	r1, [r7, #0]
      { return _M_lower_bound(_M_begin(), _M_end(), __k); }
 8109b1e:	6878      	ldr	r0, [r7, #4]
 8109b20:	f7ff fc63 	bl	81093ea <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_beginEv>
 8109b24:	4604      	mov	r4, r0
 8109b26:	6878      	ldr	r0, [r7, #4]
 8109b28:	f000 fa24 	bl	8109f74 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>
 8109b2c:	4602      	mov	r2, r0
 8109b2e:	683b      	ldr	r3, [r7, #0]
 8109b30:	4621      	mov	r1, r4
 8109b32:	6878      	ldr	r0, [r7, #4]
 8109b34:	f000 fa2a 	bl	8109f8c <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_>
 8109b38:	4603      	mov	r3, r0
 8109b3a:	4618      	mov	r0, r3
 8109b3c:	370c      	adds	r7, #12
 8109b3e:	46bd      	mov	sp, r7
 8109b40:	bd90      	pop	{r4, r7, pc}

08109b42 <_ZNKSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8key_compEv>:
      key_comp() const
 8109b42:	b480      	push	{r7}
 8109b44:	b083      	sub	sp, #12
 8109b46:	af00      	add	r7, sp, #0
 8109b48:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_key_compare; }
 8109b4a:	bf00      	nop
 8109b4c:	4618      	mov	r0, r3
 8109b4e:	370c      	adds	r7, #12
 8109b50:	46bd      	mov	sp, r7
 8109b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109b56:	4770      	bx	lr

08109b58 <_ZNSt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEE9_M_valptrEv>:
      _M_valptr()
 8109b58:	b580      	push	{r7, lr}
 8109b5a:	b082      	sub	sp, #8
 8109b5c:	af00      	add	r7, sp, #0
 8109b5e:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 8109b60:	687b      	ldr	r3, [r7, #4]
 8109b62:	3310      	adds	r3, #16
 8109b64:	4618      	mov	r0, r3
 8109b66:	f000 fc37 	bl	810a3d8 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEE6_M_ptrEv>
 8109b6a:	4603      	mov	r3, r0
 8109b6c:	4618      	mov	r0, r3
 8109b6e:	3708      	adds	r7, #8
 8109b70:	46bd      	mov	sp, r7
 8109b72:	bd80      	pop	{r7, pc}

08109b74 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE22_M_emplace_hint_uniqueIJRS1_RS5_EEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EDpOT_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8109b74:	b590      	push	{r4, r7, lr}
 8109b76:	b08b      	sub	sp, #44	@ 0x2c
 8109b78:	af00      	add	r7, sp, #0
 8109b7a:	60f8      	str	r0, [r7, #12]
 8109b7c:	60b9      	str	r1, [r7, #8]
 8109b7e:	607a      	str	r2, [r7, #4]
 8109b80:	603b      	str	r3, [r7, #0]
	_Auto_node __z(*this, std::forward<_Args>(__args)...);
 8109b82:	6878      	ldr	r0, [r7, #4]
 8109b84:	f7ff fca3 	bl	81094ce <_ZSt7forwardIRN19EventManagerCM4Task11EEventQueueEEOT_RNSt16remove_referenceIS3_E4typeE>
 8109b88:	4604      	mov	r4, r0
 8109b8a:	6838      	ldr	r0, [r7, #0]
 8109b8c:	f7ff fcaa 	bl	81094e4 <_ZSt7forwardIRP15QueueDefinitionEOT_RNSt16remove_referenceIS3_E4typeE>
 8109b90:	4603      	mov	r3, r0
 8109b92:	f107 001c 	add.w	r0, r7, #28
 8109b96:	4622      	mov	r2, r4
 8109b98:	68f9      	ldr	r1, [r7, #12]
 8109b9a:	f000 f836 	bl	8109c0a <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE10_Auto_nodeC1IJRS1_RS5_EEERSC_DpOT_>
	auto __res = _M_get_insert_hint_unique_pos(__pos, __z._M_key());
 8109b9e:	f107 031c 	add.w	r3, r7, #28
 8109ba2:	4618      	mov	r0, r3
 8109ba4:	f000 f8ea 	bl	8109d7c <_ZNKSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE10_Auto_node6_M_keyEv>
 8109ba8:	4603      	mov	r3, r0
 8109baa:	f107 0014 	add.w	r0, r7, #20
 8109bae:	68ba      	ldr	r2, [r7, #8]
 8109bb0:	68f9      	ldr	r1, [r7, #12]
 8109bb2:	f000 fa7b 	bl	810a0ac <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_>
	if (__res.second)
 8109bb6:	69bb      	ldr	r3, [r7, #24]
 8109bb8:	2b00      	cmp	r3, #0
 8109bba:	d009      	beq.n	8109bd0 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE22_M_emplace_hint_uniqueIJRS1_RS5_EEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EDpOT_+0x5c>
	  return __z._M_insert(__res);
 8109bbc:	f107 001c 	add.w	r0, r7, #28
 8109bc0:	f107 0314 	add.w	r3, r7, #20
 8109bc4:	e893 0006 	ldmia.w	r3, {r1, r2}
 8109bc8:	f000 f8e6 	bl	8109d98 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE10_Auto_node9_M_insertES2_IPSt18_Rb_tree_node_baseSF_E>
 8109bcc:	4604      	mov	r4, r0
 8109bce:	e007      	b.n	8109be0 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE22_M_emplace_hint_uniqueIJRS1_RS5_EEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EDpOT_+0x6c>
	return iterator(__res.first);
 8109bd0:	697a      	ldr	r2, [r7, #20]
 8109bd2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8109bd6:	4611      	mov	r1, r2
 8109bd8:	4618      	mov	r0, r3
 8109bda:	f000 f8f6 	bl	8109dca <_ZNSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEC1EPSt18_Rb_tree_node_base>
 8109bde:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
      }
 8109be0:	f107 031c 	add.w	r3, r7, #28
 8109be4:	4618      	mov	r0, r3
 8109be6:	f000 f82f 	bl	8109c48 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE10_Auto_nodeD1Ev>
 8109bea:	4623      	mov	r3, r4
 8109bec:	4618      	mov	r0, r3
 8109bee:	372c      	adds	r7, #44	@ 0x2c
 8109bf0:	46bd      	mov	sp, r7
 8109bf2:	bd90      	pop	{r4, r7, pc}

08109bf4 <_ZSt7forwardIRSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEEOT_RNSt16remove_referenceISA_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8109bf4:	b480      	push	{r7}
 8109bf6:	b083      	sub	sp, #12
 8109bf8:	af00      	add	r7, sp, #0
 8109bfa:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8109bfc:	687b      	ldr	r3, [r7, #4]
 8109bfe:	4618      	mov	r0, r3
 8109c00:	370c      	adds	r7, #12
 8109c02:	46bd      	mov	sp, r7
 8109c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109c08:	4770      	bx	lr

08109c0a <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE10_Auto_nodeC1IJRS1_RS5_EEERSC_DpOT_>:
	  _Auto_node(_Rb_tree& __t, _Args&&... __args)
 8109c0a:	b590      	push	{r4, r7, lr}
 8109c0c:	b085      	sub	sp, #20
 8109c0e:	af00      	add	r7, sp, #0
 8109c10:	60f8      	str	r0, [r7, #12]
 8109c12:	60b9      	str	r1, [r7, #8]
 8109c14:	607a      	str	r2, [r7, #4]
 8109c16:	603b      	str	r3, [r7, #0]
	  : _M_t(__t),
 8109c18:	68fb      	ldr	r3, [r7, #12]
 8109c1a:	68ba      	ldr	r2, [r7, #8]
 8109c1c:	601a      	str	r2, [r3, #0]
	    _M_node(__t._M_create_node(std::forward<_Args>(__args)...))
 8109c1e:	6878      	ldr	r0, [r7, #4]
 8109c20:	f7ff fc55 	bl	81094ce <_ZSt7forwardIRN19EventManagerCM4Task11EEventQueueEEOT_RNSt16remove_referenceIS3_E4typeE>
 8109c24:	4604      	mov	r4, r0
 8109c26:	6838      	ldr	r0, [r7, #0]
 8109c28:	f7ff fc5c 	bl	81094e4 <_ZSt7forwardIRP15QueueDefinitionEOT_RNSt16remove_referenceIS3_E4typeE>
 8109c2c:	4603      	mov	r3, r0
 8109c2e:	461a      	mov	r2, r3
 8109c30:	4621      	mov	r1, r4
 8109c32:	68b8      	ldr	r0, [r7, #8]
 8109c34:	f000 fbdc 	bl	810a3f0 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_create_nodeIJRS1_RS5_EEEPSt13_Rb_tree_nodeIS6_EDpOT_>
 8109c38:	4602      	mov	r2, r0
 8109c3a:	68fb      	ldr	r3, [r7, #12]
 8109c3c:	605a      	str	r2, [r3, #4]
	  { }
 8109c3e:	68fb      	ldr	r3, [r7, #12]
 8109c40:	4618      	mov	r0, r3
 8109c42:	3714      	adds	r7, #20
 8109c44:	46bd      	mov	sp, r7
 8109c46:	bd90      	pop	{r4, r7, pc}

08109c48 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE10_Auto_nodeD1Ev>:
	~_Auto_node()
 8109c48:	b580      	push	{r7, lr}
 8109c4a:	b082      	sub	sp, #8
 8109c4c:	af00      	add	r7, sp, #0
 8109c4e:	6078      	str	r0, [r7, #4]
	  if (_M_node)
 8109c50:	687b      	ldr	r3, [r7, #4]
 8109c52:	685b      	ldr	r3, [r3, #4]
 8109c54:	2b00      	cmp	r3, #0
 8109c56:	d007      	beq.n	8109c68 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE10_Auto_nodeD1Ev+0x20>
	    _M_t._M_drop_node(_M_node);
 8109c58:	687b      	ldr	r3, [r7, #4]
 8109c5a:	681a      	ldr	r2, [r3, #0]
 8109c5c:	687b      	ldr	r3, [r7, #4]
 8109c5e:	685b      	ldr	r3, [r3, #4]
 8109c60:	4619      	mov	r1, r3
 8109c62:	4610      	mov	r0, r2
 8109c64:	f7ff ff39 	bl	8109ada <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS6_E>
	}
 8109c68:	687b      	ldr	r3, [r7, #4]
 8109c6a:	4618      	mov	r0, r3
 8109c6c:	3708      	adds	r7, #8
 8109c6e:	46bd      	mov	sp, r7
 8109c70:	bd80      	pop	{r7, pc}

08109c72 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8109c72:	b590      	push	{r4, r7, lr}
 8109c74:	b08b      	sub	sp, #44	@ 0x2c
 8109c76:	af00      	add	r7, sp, #0
 8109c78:	60f8      	str	r0, [r7, #12]
 8109c7a:	60b9      	str	r1, [r7, #8]
 8109c7c:	607a      	str	r2, [r7, #4]
      _Link_type __x = _M_begin();
 8109c7e:	68b8      	ldr	r0, [r7, #8]
 8109c80:	f7ff fbb3 	bl	81093ea <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_beginEv>
 8109c84:	4603      	mov	r3, r0
 8109c86:	61bb      	str	r3, [r7, #24]
      _Base_ptr __y = _M_end();
 8109c88:	68b8      	ldr	r0, [r7, #8]
 8109c8a:	f000 f973 	bl	8109f74 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>
 8109c8e:	4603      	mov	r3, r0
 8109c90:	617b      	str	r3, [r7, #20]
      bool __comp = true;
 8109c92:	2301      	movs	r3, #1
 8109c94:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      while (__x != 0)
 8109c98:	e01f      	b.n	8109cda <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x68>
	  __y = __x;
 8109c9a:	69bb      	ldr	r3, [r7, #24]
 8109c9c:	617b      	str	r3, [r7, #20]
	  __comp = _M_impl._M_key_compare(__k, _S_key(__x));
 8109c9e:	68bc      	ldr	r4, [r7, #8]
 8109ca0:	69bb      	ldr	r3, [r7, #24]
 8109ca2:	4618      	mov	r0, r3
 8109ca4:	f000 fbc0 	bl	810a428 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 8109ca8:	4603      	mov	r3, r0
 8109caa:	461a      	mov	r2, r3
 8109cac:	6879      	ldr	r1, [r7, #4]
 8109cae:	4620      	mov	r0, r4
 8109cb0:	f7ff fbf8 	bl	81094a4 <_ZNKSt4lessIN19EventManagerCM4Task11EEventQueueEEclERKS1_S4_>
 8109cb4:	4603      	mov	r3, r0
 8109cb6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	  __x = __comp ? _S_left(__x) : _S_right(__x);
 8109cba:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8109cbe:	2b00      	cmp	r3, #0
 8109cc0:	d005      	beq.n	8109cce <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x5c>
 8109cc2:	69bb      	ldr	r3, [r7, #24]
 8109cc4:	4618      	mov	r0, r3
 8109cc6:	f7ff fefc 	bl	8109ac2 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE7_S_leftEPSt18_Rb_tree_node_base>
 8109cca:	4603      	mov	r3, r0
 8109ccc:	e004      	b.n	8109cd8 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x66>
 8109cce:	69bb      	ldr	r3, [r7, #24]
 8109cd0:	4618      	mov	r0, r3
 8109cd2:	f7ff feea 	bl	8109aaa <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 8109cd6:	4603      	mov	r3, r0
 8109cd8:	61bb      	str	r3, [r7, #24]
      while (__x != 0)
 8109cda:	69bb      	ldr	r3, [r7, #24]
 8109cdc:	2b00      	cmp	r3, #0
 8109cde:	d1dc      	bne.n	8109c9a <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x28>
      iterator __j = iterator(__y);
 8109ce0:	697a      	ldr	r2, [r7, #20]
 8109ce2:	f107 0310 	add.w	r3, r7, #16
 8109ce6:	4611      	mov	r1, r2
 8109ce8:	4618      	mov	r0, r3
 8109cea:	f000 f86e 	bl	8109dca <_ZNSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEC1EPSt18_Rb_tree_node_base>
      if (__comp)
 8109cee:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8109cf2:	2b00      	cmp	r3, #0
 8109cf4:	d01d      	beq.n	8109d32 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0xc0>
	  if (__j == begin())
 8109cf6:	68b8      	ldr	r0, [r7, #8]
 8109cf8:	f000 fba9 	bl	810a44e <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE5beginEv>
 8109cfc:	4603      	mov	r3, r0
 8109cfe:	61fb      	str	r3, [r7, #28]
 8109d00:	f107 021c 	add.w	r2, r7, #28
 8109d04:	f107 0310 	add.w	r3, r7, #16
 8109d08:	4611      	mov	r1, r2
 8109d0a:	4618      	mov	r0, r3
 8109d0c:	f7ff fa86 	bl	810921c <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEES9_>
 8109d10:	4603      	mov	r3, r0
 8109d12:	2b00      	cmp	r3, #0
 8109d14:	d008      	beq.n	8109d28 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0xb6>
	    return _Res(__x, __y);
 8109d16:	f107 0214 	add.w	r2, r7, #20
 8109d1a:	f107 0318 	add.w	r3, r7, #24
 8109d1e:	4619      	mov	r1, r3
 8109d20:	68f8      	ldr	r0, [r7, #12]
 8109d22:	f000 fba5 	bl	810a470 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEERS1_EEOT_OT0_>
 8109d26:	e025      	b.n	8109d74 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x102>
	    --__j;
 8109d28:	f107 0310 	add.w	r3, r7, #16
 8109d2c:	4618      	mov	r0, r3
 8109d2e:	f000 fbb8 	bl	810a4a2 <_ZNSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEmmEv>
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
 8109d32:	68bc      	ldr	r4, [r7, #8]
 8109d34:	693b      	ldr	r3, [r7, #16]
 8109d36:	4618      	mov	r0, r3
 8109d38:	f000 f959 	bl	8109fee <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8109d3c:	4603      	mov	r3, r0
 8109d3e:	687a      	ldr	r2, [r7, #4]
 8109d40:	4619      	mov	r1, r3
 8109d42:	4620      	mov	r0, r4
 8109d44:	f7ff fbae 	bl	81094a4 <_ZNKSt4lessIN19EventManagerCM4Task11EEventQueueEEclERKS1_S4_>
 8109d48:	4603      	mov	r3, r0
 8109d4a:	2b00      	cmp	r3, #0
 8109d4c:	d008      	beq.n	8109d60 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0xee>
	return _Res(__x, __y);
 8109d4e:	f107 0214 	add.w	r2, r7, #20
 8109d52:	f107 0318 	add.w	r3, r7, #24
 8109d56:	4619      	mov	r1, r3
 8109d58:	68f8      	ldr	r0, [r7, #12]
 8109d5a:	f000 fb89 	bl	810a470 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEERS1_EEOT_OT0_>
 8109d5e:	e009      	b.n	8109d74 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x102>
      return _Res(__j._M_node, 0);
 8109d60:	2300      	movs	r3, #0
 8109d62:	623b      	str	r3, [r7, #32]
 8109d64:	f107 0220 	add.w	r2, r7, #32
 8109d68:	f107 0310 	add.w	r3, r7, #16
 8109d6c:	4619      	mov	r1, r3
 8109d6e:	68f8      	ldr	r0, [r7, #12]
 8109d70:	f000 fba8 	bl	810a4c4 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1ERKS1_S4_>
    }
 8109d74:	68f8      	ldr	r0, [r7, #12]
 8109d76:	372c      	adds	r7, #44	@ 0x2c
 8109d78:	46bd      	mov	sp, r7
 8109d7a:	bd90      	pop	{r4, r7, pc}

08109d7c <_ZNKSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE10_Auto_node6_M_keyEv>:
	_M_key() const
 8109d7c:	b580      	push	{r7, lr}
 8109d7e:	b082      	sub	sp, #8
 8109d80:	af00      	add	r7, sp, #0
 8109d82:	6078      	str	r0, [r7, #4]
	{ return _S_key(_M_node); }
 8109d84:	687b      	ldr	r3, [r7, #4]
 8109d86:	685b      	ldr	r3, [r3, #4]
 8109d88:	4618      	mov	r0, r3
 8109d8a:	f000 fb4d 	bl	810a428 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 8109d8e:	4603      	mov	r3, r0
 8109d90:	4618      	mov	r0, r3
 8109d92:	3708      	adds	r7, #8
 8109d94:	46bd      	mov	sp, r7
 8109d96:	bd80      	pop	{r7, pc}

08109d98 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE10_Auto_node9_M_insertES2_IPSt18_Rb_tree_node_baseSF_E>:
	_M_insert(pair<_Base_ptr, _Base_ptr> __p)
 8109d98:	b580      	push	{r7, lr}
 8109d9a:	b086      	sub	sp, #24
 8109d9c:	af00      	add	r7, sp, #0
 8109d9e:	60f8      	str	r0, [r7, #12]
 8109da0:	1d3b      	adds	r3, r7, #4
 8109da2:	e883 0006 	stmia.w	r3, {r1, r2}
	  auto __it = _M_t._M_insert_node(__p.first, __p.second, _M_node);
 8109da6:	68fb      	ldr	r3, [r7, #12]
 8109da8:	6818      	ldr	r0, [r3, #0]
 8109daa:	6879      	ldr	r1, [r7, #4]
 8109dac:	68ba      	ldr	r2, [r7, #8]
 8109dae:	68fb      	ldr	r3, [r7, #12]
 8109db0:	685b      	ldr	r3, [r3, #4]
 8109db2:	f000 fb9c 	bl	810a4ee <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E>
 8109db6:	4603      	mov	r3, r0
 8109db8:	617b      	str	r3, [r7, #20]
	  _M_node = nullptr;
 8109dba:	68fb      	ldr	r3, [r7, #12]
 8109dbc:	2200      	movs	r2, #0
 8109dbe:	605a      	str	r2, [r3, #4]
	  return __it;
 8109dc0:	697b      	ldr	r3, [r7, #20]
	}
 8109dc2:	4618      	mov	r0, r3
 8109dc4:	3718      	adds	r7, #24
 8109dc6:	46bd      	mov	sp, r7
 8109dc8:	bd80      	pop	{r7, pc}

08109dca <_ZNSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEC1EPSt18_Rb_tree_node_base>:
      _Rb_tree_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8109dca:	b480      	push	{r7}
 8109dcc:	b083      	sub	sp, #12
 8109dce:	af00      	add	r7, sp, #0
 8109dd0:	6078      	str	r0, [r7, #4]
 8109dd2:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 8109dd4:	687b      	ldr	r3, [r7, #4]
 8109dd6:	683a      	ldr	r2, [r7, #0]
 8109dd8:	601a      	str	r2, [r3, #0]
 8109dda:	687b      	ldr	r3, [r7, #4]
 8109ddc:	4618      	mov	r0, r3
 8109dde:	370c      	adds	r7, #12
 8109de0:	46bd      	mov	sp, r7
 8109de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109de6:	4770      	bx	lr

08109de8 <_ZNKSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8109de8:	b480      	push	{r7}
 8109dea:	b083      	sub	sp, #12
 8109dec:	af00      	add	r7, sp, #0
 8109dee:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_node_count; }
 8109df0:	687b      	ldr	r3, [r7, #4]
 8109df2:	695b      	ldr	r3, [r3, #20]
 8109df4:	4618      	mov	r0, r3
 8109df6:	370c      	adds	r7, #12
 8109df8:	46bd      	mov	sp, r7
 8109dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109dfe:	4770      	bx	lr

08109e00 <_ZSt8_DestroyIP8SMessageEvT_S2_>:
   * a trivial destructor, the compiler should optimize all of this
   * away, otherwise the objects' destructors must be invoked.
   */
  template<typename _ForwardIterator>
    _GLIBCXX20_CONSTEXPR inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8109e00:	b580      	push	{r7, lr}
 8109e02:	b082      	sub	sp, #8
 8109e04:	af00      	add	r7, sp, #0
 8109e06:	6078      	str	r0, [r7, #4]
 8109e08:	6039      	str	r1, [r7, #0]
      // A deleted destructor is trivial, this ensures we reject such types:
      static_assert(is_destructible<_Value_type>::value,
		    "value type is destructible");
#endif
#if __cplusplus >= 202002L
      if (std::__is_constant_evaluated())
 8109e0a:	f7fa fef3 	bl	8104bf4 <_ZSt23__is_constant_evaluatedv>
 8109e0e:	4603      	mov	r3, r0
 8109e10:	2b00      	cmp	r3, #0
 8109e12:	d004      	beq.n	8109e1e <_ZSt8_DestroyIP8SMessageEvT_S2_+0x1e>
	return _Destroy_aux<false>::__destroy(__first, __last);
 8109e14:	6839      	ldr	r1, [r7, #0]
 8109e16:	6878      	ldr	r0, [r7, #4]
 8109e18:	f000 fba6 	bl	810a568 <_ZNSt12_Destroy_auxILb0EE9__destroyIP8SMessageEEvT_S4_>
 8109e1c:	e003      	b.n	8109e26 <_ZSt8_DestroyIP8SMessageEvT_S2_+0x26>
#endif
      std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
	__destroy(__first, __last);
 8109e1e:	6839      	ldr	r1, [r7, #0]
 8109e20:	6878      	ldr	r0, [r7, #4]
 8109e22:	f000 fbba 	bl	810a59a <_ZNSt12_Destroy_auxILb1EE9__destroyIP8SMessageEEvT_S4_>
    }
 8109e26:	3708      	adds	r7, #8
 8109e28:	46bd      	mov	sp, r7
 8109e2a:	bd80      	pop	{r7, pc}

08109e2c <_ZNSt16allocator_traitsISaI8SMessageEE10deallocateERS1_PS0_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8109e2c:	b580      	push	{r7, lr}
 8109e2e:	b088      	sub	sp, #32
 8109e30:	af00      	add	r7, sp, #0
 8109e32:	60f8      	str	r0, [r7, #12]
 8109e34:	60b9      	str	r1, [r7, #8]
 8109e36:	607a      	str	r2, [r7, #4]
 8109e38:	68fb      	ldr	r3, [r7, #12]
 8109e3a:	61fb      	str	r3, [r7, #28]
 8109e3c:	68bb      	ldr	r3, [r7, #8]
 8109e3e:	61bb      	str	r3, [r7, #24]
 8109e40:	687b      	ldr	r3, [r7, #4]
 8109e42:	617b      	str	r3, [r7, #20]
	if (std::__is_constant_evaluated())
 8109e44:	f7fa fed6 	bl	8104bf4 <_ZSt23__is_constant_evaluatedv>
 8109e48:	4603      	mov	r3, r0
 8109e4a:	2b00      	cmp	r3, #0
 8109e4c:	d003      	beq.n	8109e56 <_ZNSt16allocator_traitsISaI8SMessageEE10deallocateERS1_PS0_j+0x2a>
	    ::operator delete(__p);
 8109e4e:	69b8      	ldr	r0, [r7, #24]
 8109e50:	f01b fd98 	bl	8125984 <_ZdlPv>
	    return;
 8109e54:	e005      	b.n	8109e62 <_ZNSt16allocator_traitsISaI8SMessageEE10deallocateERS1_PS0_j+0x36>
	__allocator_base<_Tp>::deallocate(__p, __n);
 8109e56:	697a      	ldr	r2, [r7, #20]
 8109e58:	69b9      	ldr	r1, [r7, #24]
 8109e5a:	69f8      	ldr	r0, [r7, #28]
 8109e5c:	f000 fdb4 	bl	810a9c8 <_ZNSt15__new_allocatorI8SMessageE10deallocateEPS0_j>
      { __a.deallocate(__p, __n); }
 8109e60:	bf00      	nop
 8109e62:	bf00      	nop
 8109e64:	3720      	adds	r7, #32
 8109e66:	46bd      	mov	sp, r7
 8109e68:	bd80      	pop	{r7, pc}

08109e6a <_ZSt7forwardIRK8SMessageEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8109e6a:	b480      	push	{r7}
 8109e6c:	b083      	sub	sp, #12
 8109e6e:	af00      	add	r7, sp, #0
 8109e70:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8109e72:	687b      	ldr	r3, [r7, #4]
 8109e74:	4618      	mov	r0, r3
 8109e76:	370c      	adds	r7, #12
 8109e78:	46bd      	mov	sp, r7
 8109e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109e7e:	4770      	bx	lr

08109e80 <_ZSt12construct_atI8SMessageJRKS0_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS4_DpOS5_>:
    construct_at(_Tp* __location, _Args&&... __args)
 8109e80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8109e82:	b083      	sub	sp, #12
 8109e84:	af00      	add	r7, sp, #0
 8109e86:	6078      	str	r0, [r7, #4]
 8109e88:	6039      	str	r1, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 8109e8a:	687b      	ldr	r3, [r7, #4]
 8109e8c:	4619      	mov	r1, r3
 8109e8e:	201c      	movs	r0, #28
 8109e90:	f7f7 fa3c 	bl	810130c <_ZnwjPv>
 8109e94:	4606      	mov	r6, r0
 8109e96:	6838      	ldr	r0, [r7, #0]
 8109e98:	f7ff ffe7 	bl	8109e6a <_ZSt7forwardIRK8SMessageEOT_RNSt16remove_referenceIS3_E4typeE>
 8109e9c:	4603      	mov	r3, r0
 8109e9e:	4634      	mov	r4, r6
 8109ea0:	461d      	mov	r5, r3
 8109ea2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8109ea4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8109ea6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8109eaa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8109eae:	4633      	mov	r3, r6
 8109eb0:	4618      	mov	r0, r3
 8109eb2:	370c      	adds	r7, #12
 8109eb4:	46bd      	mov	sp, r7
 8109eb6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08109eb8 <_ZN9__gnu_cxx17__normal_iteratorIP8SMessageSt6vectorIS1_SaIS1_EEEC1ERKS2_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8109eb8:	b480      	push	{r7}
 8109eba:	b083      	sub	sp, #12
 8109ebc:	af00      	add	r7, sp, #0
 8109ebe:	6078      	str	r0, [r7, #4]
 8109ec0:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8109ec2:	683b      	ldr	r3, [r7, #0]
 8109ec4:	681a      	ldr	r2, [r3, #0]
 8109ec6:	687b      	ldr	r3, [r7, #4]
 8109ec8:	601a      	str	r2, [r3, #0]
 8109eca:	687b      	ldr	r3, [r7, #4]
 8109ecc:	4618      	mov	r0, r3
 8109ece:	370c      	adds	r7, #12
 8109ed0:	46bd      	mov	sp, r7
 8109ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109ed6:	4770      	bx	lr

08109ed8 <_ZNKSt6vectorI8SMessageSaIS0_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8109ed8:	b580      	push	{r7, lr}
 8109eda:	b082      	sub	sp, #8
 8109edc:	af00      	add	r7, sp, #0
 8109ede:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 8109ee0:	687b      	ldr	r3, [r7, #4]
 8109ee2:	4618      	mov	r0, r3
 8109ee4:	f000 fb8e 	bl	810a604 <_ZNKSt12_Vector_baseI8SMessageSaIS0_EE19_M_get_Tp_allocatorEv>
 8109ee8:	4603      	mov	r3, r0
 8109eea:	4618      	mov	r0, r3
 8109eec:	f000 fb6e 	bl	810a5cc <_ZNSt6vectorI8SMessageSaIS0_EE11_S_max_sizeERKS1_>
 8109ef0:	4603      	mov	r3, r0
 8109ef2:	4618      	mov	r0, r3
 8109ef4:	3708      	adds	r7, #8
 8109ef6:	46bd      	mov	sp, r7
 8109ef8:	bd80      	pop	{r7, pc}

08109efa <_ZNK9__gnu_cxx17__normal_iteratorIP8SMessageSt6vectorIS1_SaIS1_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8109efa:	b480      	push	{r7}
 8109efc:	b083      	sub	sp, #12
 8109efe:	af00      	add	r7, sp, #0
 8109f00:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8109f02:	687b      	ldr	r3, [r7, #4]
 8109f04:	4618      	mov	r0, r3
 8109f06:	370c      	adds	r7, #12
 8109f08:	46bd      	mov	sp, r7
 8109f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109f0e:	4770      	bx	lr

08109f10 <_ZNSt12_Vector_baseI8SMessageSaIS0_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8109f10:	b580      	push	{r7, lr}
 8109f12:	b082      	sub	sp, #8
 8109f14:	af00      	add	r7, sp, #0
 8109f16:	6078      	str	r0, [r7, #4]
 8109f18:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8109f1a:	683b      	ldr	r3, [r7, #0]
 8109f1c:	2b00      	cmp	r3, #0
 8109f1e:	d006      	beq.n	8109f2e <_ZNSt12_Vector_baseI8SMessageSaIS0_EE11_M_allocateEj+0x1e>
 8109f20:	687b      	ldr	r3, [r7, #4]
 8109f22:	6839      	ldr	r1, [r7, #0]
 8109f24:	4618      	mov	r0, r3
 8109f26:	f000 fb78 	bl	810a61a <_ZNSt16allocator_traitsISaI8SMessageEE8allocateERS1_j>
 8109f2a:	4603      	mov	r3, r0
 8109f2c:	e000      	b.n	8109f30 <_ZNSt12_Vector_baseI8SMessageSaIS0_EE11_M_allocateEj+0x20>
 8109f2e:	2300      	movs	r3, #0
      }
 8109f30:	4618      	mov	r0, r3
 8109f32:	3708      	adds	r7, #8
 8109f34:	46bd      	mov	sp, r7
 8109f36:	bd80      	pop	{r7, pc}

08109f38 <_ZNSt6vectorI8SMessageSaIS0_EE11_S_relocateEPS0_S3_S3_RS1_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 8109f38:	b580      	push	{r7, lr}
 8109f3a:	b084      	sub	sp, #16
 8109f3c:	af00      	add	r7, sp, #0
 8109f3e:	60f8      	str	r0, [r7, #12]
 8109f40:	60b9      	str	r1, [r7, #8]
 8109f42:	607a      	str	r2, [r7, #4]
 8109f44:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 8109f46:	683b      	ldr	r3, [r7, #0]
 8109f48:	687a      	ldr	r2, [r7, #4]
 8109f4a:	68b9      	ldr	r1, [r7, #8]
 8109f4c:	68f8      	ldr	r0, [r7, #12]
 8109f4e:	f000 fb9c 	bl	810a68a <_ZSt12__relocate_aIP8SMessageS1_SaIS0_EET0_T_S4_S3_RT1_>
 8109f52:	4603      	mov	r3, r0
      }
 8109f54:	4618      	mov	r0, r3
 8109f56:	3710      	adds	r7, #16
 8109f58:	46bd      	mov	sp, r7
 8109f5a:	bd80      	pop	{r7, pc}

08109f5c <_ZNSt16allocator_traitsISaI8SMessageEE7destroyIS0_EEvRS1_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 8109f5c:	b580      	push	{r7, lr}
 8109f5e:	b082      	sub	sp, #8
 8109f60:	af00      	add	r7, sp, #0
 8109f62:	6078      	str	r0, [r7, #4]
 8109f64:	6039      	str	r1, [r7, #0]
	  std::destroy_at(__p);
 8109f66:	6838      	ldr	r0, [r7, #0]
 8109f68:	f000 fbac 	bl	810a6c4 <_ZSt10destroy_atI8SMessageEvPT_>
	}
 8109f6c:	bf00      	nop
 8109f6e:	3708      	adds	r7, #8
 8109f70:	46bd      	mov	sp, r7
 8109f72:	bd80      	pop	{r7, pc}

08109f74 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>:
      _M_end() _GLIBCXX_NOEXCEPT
 8109f74:	b480      	push	{r7}
 8109f76:	b083      	sub	sp, #12
 8109f78:	af00      	add	r7, sp, #0
 8109f7a:	6078      	str	r0, [r7, #4]
      { return &this->_M_impl._M_header; }
 8109f7c:	687b      	ldr	r3, [r7, #4]
 8109f7e:	3304      	adds	r3, #4
 8109f80:	4618      	mov	r0, r3
 8109f82:	370c      	adds	r7, #12
 8109f84:	46bd      	mov	sp, r7
 8109f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109f8a:	4770      	bx	lr

08109f8c <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8109f8c:	b590      	push	{r4, r7, lr}
 8109f8e:	b087      	sub	sp, #28
 8109f90:	af00      	add	r7, sp, #0
 8109f92:	60f8      	str	r0, [r7, #12]
 8109f94:	60b9      	str	r1, [r7, #8]
 8109f96:	607a      	str	r2, [r7, #4]
 8109f98:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 8109f9a:	e01a      	b.n	8109fd2 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_+0x46>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
 8109f9c:	68fc      	ldr	r4, [r7, #12]
 8109f9e:	68b8      	ldr	r0, [r7, #8]
 8109fa0:	f000 fa42 	bl	810a428 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 8109fa4:	4603      	mov	r3, r0
 8109fa6:	683a      	ldr	r2, [r7, #0]
 8109fa8:	4619      	mov	r1, r3
 8109faa:	4620      	mov	r0, r4
 8109fac:	f7ff fa7a 	bl	81094a4 <_ZNKSt4lessIN19EventManagerCM4Task11EEventQueueEEclERKS1_S4_>
 8109fb0:	4603      	mov	r3, r0
 8109fb2:	f083 0301 	eor.w	r3, r3, #1
 8109fb6:	b2db      	uxtb	r3, r3
 8109fb8:	2b00      	cmp	r3, #0
 8109fba:	d006      	beq.n	8109fca <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_+0x3e>
	  __y = __x, __x = _S_left(__x);
 8109fbc:	68bb      	ldr	r3, [r7, #8]
 8109fbe:	607b      	str	r3, [r7, #4]
 8109fc0:	68b8      	ldr	r0, [r7, #8]
 8109fc2:	f7ff fd7e 	bl	8109ac2 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE7_S_leftEPSt18_Rb_tree_node_base>
 8109fc6:	60b8      	str	r0, [r7, #8]
 8109fc8:	e003      	b.n	8109fd2 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_+0x46>
	  __x = _S_right(__x);
 8109fca:	68b8      	ldr	r0, [r7, #8]
 8109fcc:	f7ff fd6d 	bl	8109aaa <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 8109fd0:	60b8      	str	r0, [r7, #8]
      while (__x != 0)
 8109fd2:	68bb      	ldr	r3, [r7, #8]
 8109fd4:	2b00      	cmp	r3, #0
 8109fd6:	d1e1      	bne.n	8109f9c <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_+0x10>
      return iterator(__y);
 8109fd8:	f107 0314 	add.w	r3, r7, #20
 8109fdc:	6879      	ldr	r1, [r7, #4]
 8109fde:	4618      	mov	r0, r3
 8109fe0:	f7ff fef3 	bl	8109dca <_ZNSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEC1EPSt18_Rb_tree_node_base>
 8109fe4:	697b      	ldr	r3, [r7, #20]
    }
 8109fe6:	4618      	mov	r0, r3
 8109fe8:	371c      	adds	r7, #28
 8109fea:	46bd      	mov	sp, r7
 8109fec:	bd90      	pop	{r4, r7, pc}

08109fee <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>:
      _S_key(_Const_Base_ptr __x)
 8109fee:	b580      	push	{r7, lr}
 8109ff0:	b082      	sub	sp, #8
 8109ff2:	af00      	add	r7, sp, #0
 8109ff4:	6078      	str	r0, [r7, #4]
      { return _S_key(static_cast<_Const_Link_type>(__x)); }
 8109ff6:	6878      	ldr	r0, [r7, #4]
 8109ff8:	f000 fa16 	bl	810a428 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 8109ffc:	4603      	mov	r3, r0
 8109ffe:	4618      	mov	r0, r3
 810a000:	3708      	adds	r7, #8
 810a002:	46bd      	mov	sp, r7
 810a004:	bd80      	pop	{r7, pc}

0810a006 <_ZNSt11_Tuple_implILj0EJRKN19EventManagerCM4Task11EEventQueueEEEC1ES3_>:
      _Tuple_impl(const _Head& __head)
 810a006:	b580      	push	{r7, lr}
 810a008:	b082      	sub	sp, #8
 810a00a:	af00      	add	r7, sp, #0
 810a00c:	6078      	str	r0, [r7, #4]
 810a00e:	6039      	str	r1, [r7, #0]
      : _Base(__head)
 810a010:	687b      	ldr	r3, [r7, #4]
 810a012:	6839      	ldr	r1, [r7, #0]
 810a014:	4618      	mov	r0, r3
 810a016:	f000 fb5f 	bl	810a6d8 <_ZNSt10_Head_baseILj0ERKN19EventManagerCM4Task11EEventQueueELb0EEC1ES3_>
      { }
 810a01a:	687b      	ldr	r3, [r7, #4]
 810a01c:	4618      	mov	r0, r3
 810a01e:	3708      	adds	r7, #8
 810a020:	46bd      	mov	sp, r7
 810a022:	bd80      	pop	{r7, pc}

0810a024 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 810a024:	b480      	push	{r7}
 810a026:	b083      	sub	sp, #12
 810a028:	af00      	add	r7, sp, #0
 810a02a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 810a02c:	687b      	ldr	r3, [r7, #4]
 810a02e:	4618      	mov	r0, r3
 810a030:	370c      	adds	r7, #12
 810a032:	46bd      	mov	sp, r7
 810a034:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a038:	4770      	bx	lr

0810a03a <_ZSt7forwardISt5tupleIJRKN19EventManagerCM4Task11EEventQueueEEEEOT_RNSt16remove_referenceIS6_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 810a03a:	b480      	push	{r7}
 810a03c:	b083      	sub	sp, #12
 810a03e:	af00      	add	r7, sp, #0
 810a040:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 810a042:	687b      	ldr	r3, [r7, #4]
 810a044:	4618      	mov	r0, r3
 810a046:	370c      	adds	r7, #12
 810a048:	46bd      	mov	sp, r7
 810a04a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a04e:	4770      	bx	lr

0810a050 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 810a050:	b480      	push	{r7}
 810a052:	b083      	sub	sp, #12
 810a054:	af00      	add	r7, sp, #0
 810a056:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 810a058:	687b      	ldr	r3, [r7, #4]
 810a05a:	4618      	mov	r0, r3
 810a05c:	370c      	adds	r7, #12
 810a05e:	46bd      	mov	sp, r7
 810a060:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a064:	4770      	bx	lr

0810a066 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE10_Auto_nodeC1IJRKSt21piecewise_construct_tSt5tupleIJRS3_EESI_IJEEEEERSC_DpOT_>:
	  _Auto_node(_Rb_tree& __t, _Args&&... __args)
 810a066:	b5b0      	push	{r4, r5, r7, lr}
 810a068:	b084      	sub	sp, #16
 810a06a:	af00      	add	r7, sp, #0
 810a06c:	60f8      	str	r0, [r7, #12]
 810a06e:	60b9      	str	r1, [r7, #8]
 810a070:	607a      	str	r2, [r7, #4]
 810a072:	603b      	str	r3, [r7, #0]
	  : _M_t(__t),
 810a074:	68fb      	ldr	r3, [r7, #12]
 810a076:	68ba      	ldr	r2, [r7, #8]
 810a078:	601a      	str	r2, [r3, #0]
	    _M_node(__t._M_create_node(std::forward<_Args>(__args)...))
 810a07a:	6878      	ldr	r0, [r7, #4]
 810a07c:	f7ff ffd2 	bl	810a024 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 810a080:	4604      	mov	r4, r0
 810a082:	6838      	ldr	r0, [r7, #0]
 810a084:	f7ff ffd9 	bl	810a03a <_ZSt7forwardISt5tupleIJRKN19EventManagerCM4Task11EEventQueueEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 810a088:	4605      	mov	r5, r0
 810a08a:	6a38      	ldr	r0, [r7, #32]
 810a08c:	f7ff ffe0 	bl	810a050 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 810a090:	4603      	mov	r3, r0
 810a092:	462a      	mov	r2, r5
 810a094:	4621      	mov	r1, r4
 810a096:	68b8      	ldr	r0, [r7, #8]
 810a098:	f000 fb2d 	bl	810a6f6 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEEPSt13_Rb_tree_nodeIS6_EDpOT_>
 810a09c:	4602      	mov	r2, r0
 810a09e:	68fb      	ldr	r3, [r7, #12]
 810a0a0:	605a      	str	r2, [r3, #4]
	  { }
 810a0a2:	68fb      	ldr	r3, [r7, #12]
 810a0a4:	4618      	mov	r0, r3
 810a0a6:	3710      	adds	r7, #16
 810a0a8:	46bd      	mov	sp, r7
 810a0aa:	bdb0      	pop	{r4, r5, r7, pc}

0810a0ac <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 810a0ac:	b590      	push	{r4, r7, lr}
 810a0ae:	b08d      	sub	sp, #52	@ 0x34
 810a0b0:	af00      	add	r7, sp, #0
 810a0b2:	60f8      	str	r0, [r7, #12]
 810a0b4:	60b9      	str	r1, [r7, #8]
 810a0b6:	607a      	str	r2, [r7, #4]
 810a0b8:	603b      	str	r3, [r7, #0]
      iterator __pos = __position._M_const_cast();
 810a0ba:	1d3b      	adds	r3, r7, #4
 810a0bc:	4618      	mov	r0, r3
 810a0be:	f000 fb3d 	bl	810a73c <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEE13_M_const_castEv>
 810a0c2:	4603      	mov	r3, r0
 810a0c4:	61bb      	str	r3, [r7, #24]
      if (__pos._M_node == _M_end())
 810a0c6:	69bc      	ldr	r4, [r7, #24]
 810a0c8:	68b8      	ldr	r0, [r7, #8]
 810a0ca:	f7ff ff53 	bl	8109f74 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>
 810a0ce:	4603      	mov	r3, r0
 810a0d0:	429c      	cmp	r4, r3
 810a0d2:	bf0c      	ite	eq
 810a0d4:	2301      	moveq	r3, #1
 810a0d6:	2300      	movne	r3, #0
 810a0d8:	b2db      	uxtb	r3, r3
 810a0da:	2b00      	cmp	r3, #0
 810a0dc:	d030      	beq.n	810a140 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x94>
	  if (size() > 0
 810a0de:	68b8      	ldr	r0, [r7, #8]
 810a0e0:	f7ff fe82 	bl	8109de8 <_ZNKSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4sizeEv>
 810a0e4:	4603      	mov	r3, r0
	      && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
 810a0e6:	2b00      	cmp	r3, #0
 810a0e8:	d013      	beq.n	810a112 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x66>
 810a0ea:	68bc      	ldr	r4, [r7, #8]
 810a0ec:	68b8      	ldr	r0, [r7, #8]
 810a0ee:	f000 fb36 	bl	810a75e <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_rightmostEv>
 810a0f2:	4603      	mov	r3, r0
 810a0f4:	681b      	ldr	r3, [r3, #0]
 810a0f6:	4618      	mov	r0, r3
 810a0f8:	f7ff ff79 	bl	8109fee <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 810a0fc:	4603      	mov	r3, r0
 810a0fe:	683a      	ldr	r2, [r7, #0]
 810a100:	4619      	mov	r1, r3
 810a102:	4620      	mov	r0, r4
 810a104:	f7ff f9ce 	bl	81094a4 <_ZNKSt4lessIN19EventManagerCM4Task11EEventQueueEEclERKS1_S4_>
 810a108:	4603      	mov	r3, r0
 810a10a:	2b00      	cmp	r3, #0
 810a10c:	d001      	beq.n	810a112 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x66>
 810a10e:	2301      	movs	r3, #1
 810a110:	e000      	b.n	810a114 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x68>
 810a112:	2300      	movs	r3, #0
	  if (size() > 0
 810a114:	2b00      	cmp	r3, #0
 810a116:	d00c      	beq.n	810a132 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x86>
	    return _Res(0, _M_rightmost());
 810a118:	2300      	movs	r3, #0
 810a11a:	61fb      	str	r3, [r7, #28]
 810a11c:	68b8      	ldr	r0, [r7, #8]
 810a11e:	f000 fb1e 	bl	810a75e <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_rightmostEv>
 810a122:	4602      	mov	r2, r0
 810a124:	f107 031c 	add.w	r3, r7, #28
 810a128:	4619      	mov	r1, r3
 810a12a:	68f8      	ldr	r0, [r7, #12]
 810a12c:	f000 f9ca 	bl	810a4c4 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1ERKS1_S4_>
    }
 810a130:	e0db      	b.n	810a2ea <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 810a132:	68fb      	ldr	r3, [r7, #12]
 810a134:	683a      	ldr	r2, [r7, #0]
 810a136:	68b9      	ldr	r1, [r7, #8]
 810a138:	4618      	mov	r0, r3
 810a13a:	f7ff fd9a 	bl	8109c72 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_>
 810a13e:	e0d4      	b.n	810a2ea <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x23e>
      else if (_M_impl._M_key_compare(__k, _S_key(__pos._M_node)))
 810a140:	68bc      	ldr	r4, [r7, #8]
 810a142:	69bb      	ldr	r3, [r7, #24]
 810a144:	4618      	mov	r0, r3
 810a146:	f7ff ff52 	bl	8109fee <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 810a14a:	4603      	mov	r3, r0
 810a14c:	461a      	mov	r2, r3
 810a14e:	6839      	ldr	r1, [r7, #0]
 810a150:	4620      	mov	r0, r4
 810a152:	f7ff f9a7 	bl	81094a4 <_ZNKSt4lessIN19EventManagerCM4Task11EEventQueueEEclERKS1_S4_>
 810a156:	4603      	mov	r3, r0
 810a158:	2b00      	cmp	r3, #0
 810a15a:	d057      	beq.n	810a20c <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x160>
	  iterator __before = __pos;
 810a15c:	69bb      	ldr	r3, [r7, #24]
 810a15e:	617b      	str	r3, [r7, #20]
	  if (__pos._M_node == _M_leftmost()) // begin()
 810a160:	69bc      	ldr	r4, [r7, #24]
 810a162:	68b8      	ldr	r0, [r7, #8]
 810a164:	f000 fb07 	bl	810a776 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_leftmostEv>
 810a168:	4603      	mov	r3, r0
 810a16a:	681b      	ldr	r3, [r3, #0]
 810a16c:	429c      	cmp	r4, r3
 810a16e:	bf0c      	ite	eq
 810a170:	2301      	moveq	r3, #1
 810a172:	2300      	movne	r3, #0
 810a174:	b2db      	uxtb	r3, r3
 810a176:	2b00      	cmp	r3, #0
 810a178:	d00d      	beq.n	810a196 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0xea>
	    return _Res(_M_leftmost(), _M_leftmost());
 810a17a:	68b8      	ldr	r0, [r7, #8]
 810a17c:	f000 fafb 	bl	810a776 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_leftmostEv>
 810a180:	4604      	mov	r4, r0
 810a182:	68b8      	ldr	r0, [r7, #8]
 810a184:	f000 faf7 	bl	810a776 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_leftmostEv>
 810a188:	4603      	mov	r3, r0
 810a18a:	461a      	mov	r2, r3
 810a18c:	4621      	mov	r1, r4
 810a18e:	68f8      	ldr	r0, [r7, #12]
 810a190:	f000 fafd 	bl	810a78e <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_EEOT_OT0_>
 810a194:	e0a9      	b.n	810a2ea <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x23e>
	  else if (_M_impl._M_key_compare(_S_key((--__before)._M_node), __k))
 810a196:	68bc      	ldr	r4, [r7, #8]
 810a198:	f107 0314 	add.w	r3, r7, #20
 810a19c:	4618      	mov	r0, r3
 810a19e:	f000 f980 	bl	810a4a2 <_ZNSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEmmEv>
 810a1a2:	4603      	mov	r3, r0
 810a1a4:	681b      	ldr	r3, [r3, #0]
 810a1a6:	4618      	mov	r0, r3
 810a1a8:	f7ff ff21 	bl	8109fee <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 810a1ac:	4603      	mov	r3, r0
 810a1ae:	683a      	ldr	r2, [r7, #0]
 810a1b0:	4619      	mov	r1, r3
 810a1b2:	4620      	mov	r0, r4
 810a1b4:	f7ff f976 	bl	81094a4 <_ZNKSt4lessIN19EventManagerCM4Task11EEventQueueEEclERKS1_S4_>
 810a1b8:	4603      	mov	r3, r0
 810a1ba:	2b00      	cmp	r3, #0
 810a1bc:	d01f      	beq.n	810a1fe <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x152>
	      if (_S_right(__before._M_node) == 0)
 810a1be:	697b      	ldr	r3, [r7, #20]
 810a1c0:	4618      	mov	r0, r3
 810a1c2:	f7ff fc72 	bl	8109aaa <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 810a1c6:	4603      	mov	r3, r0
 810a1c8:	2b00      	cmp	r3, #0
 810a1ca:	bf0c      	ite	eq
 810a1cc:	2301      	moveq	r3, #1
 810a1ce:	2300      	movne	r3, #0
 810a1d0:	b2db      	uxtb	r3, r3
 810a1d2:	2b00      	cmp	r3, #0
 810a1d4:	d00a      	beq.n	810a1ec <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x140>
		return _Res(0, __before._M_node);
 810a1d6:	2300      	movs	r3, #0
 810a1d8:	623b      	str	r3, [r7, #32]
 810a1da:	f107 0214 	add.w	r2, r7, #20
 810a1de:	f107 0320 	add.w	r3, r7, #32
 810a1e2:	4619      	mov	r1, r3
 810a1e4:	68f8      	ldr	r0, [r7, #12]
 810a1e6:	f000 f96d 	bl	810a4c4 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1ERKS1_S4_>
    }
 810a1ea:	e07e      	b.n	810a2ea <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x23e>
		return _Res(__pos._M_node, __pos._M_node);
 810a1ec:	f107 0218 	add.w	r2, r7, #24
 810a1f0:	f107 0318 	add.w	r3, r7, #24
 810a1f4:	4619      	mov	r1, r3
 810a1f6:	68f8      	ldr	r0, [r7, #12]
 810a1f8:	f000 fac9 	bl	810a78e <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_EEOT_OT0_>
 810a1fc:	e075      	b.n	810a2ea <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 810a1fe:	68fb      	ldr	r3, [r7, #12]
 810a200:	683a      	ldr	r2, [r7, #0]
 810a202:	68b9      	ldr	r1, [r7, #8]
 810a204:	4618      	mov	r0, r3
 810a206:	f7ff fd34 	bl	8109c72 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_>
 810a20a:	e06e      	b.n	810a2ea <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x23e>
      else if (_M_impl._M_key_compare(_S_key(__pos._M_node), __k))
 810a20c:	68bc      	ldr	r4, [r7, #8]
 810a20e:	69bb      	ldr	r3, [r7, #24]
 810a210:	4618      	mov	r0, r3
 810a212:	f7ff feec 	bl	8109fee <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 810a216:	4603      	mov	r3, r0
 810a218:	683a      	ldr	r2, [r7, #0]
 810a21a:	4619      	mov	r1, r3
 810a21c:	4620      	mov	r0, r4
 810a21e:	f7ff f941 	bl	81094a4 <_ZNKSt4lessIN19EventManagerCM4Task11EEventQueueEEclERKS1_S4_>
 810a222:	4603      	mov	r3, r0
 810a224:	2b00      	cmp	r3, #0
 810a226:	d056      	beq.n	810a2d6 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x22a>
	  iterator __after = __pos;
 810a228:	69bb      	ldr	r3, [r7, #24]
 810a22a:	613b      	str	r3, [r7, #16]
	  if (__pos._M_node == _M_rightmost())
 810a22c:	69bc      	ldr	r4, [r7, #24]
 810a22e:	68b8      	ldr	r0, [r7, #8]
 810a230:	f000 fa95 	bl	810a75e <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_rightmostEv>
 810a234:	4603      	mov	r3, r0
 810a236:	681b      	ldr	r3, [r3, #0]
 810a238:	429c      	cmp	r4, r3
 810a23a:	bf0c      	ite	eq
 810a23c:	2301      	moveq	r3, #1
 810a23e:	2300      	movne	r3, #0
 810a240:	b2db      	uxtb	r3, r3
 810a242:	2b00      	cmp	r3, #0
 810a244:	d00c      	beq.n	810a260 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x1b4>
	    return _Res(0, _M_rightmost());
 810a246:	2300      	movs	r3, #0
 810a248:	627b      	str	r3, [r7, #36]	@ 0x24
 810a24a:	68b8      	ldr	r0, [r7, #8]
 810a24c:	f000 fa87 	bl	810a75e <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_rightmostEv>
 810a250:	4602      	mov	r2, r0
 810a252:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 810a256:	4619      	mov	r1, r3
 810a258:	68f8      	ldr	r0, [r7, #12]
 810a25a:	f000 f933 	bl	810a4c4 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1ERKS1_S4_>
    }
 810a25e:	e044      	b.n	810a2ea <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x23e>
	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
 810a260:	68bc      	ldr	r4, [r7, #8]
 810a262:	f107 0310 	add.w	r3, r7, #16
 810a266:	4618      	mov	r0, r3
 810a268:	f000 faaa 	bl	810a7c0 <_ZNSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEppEv>
 810a26c:	4603      	mov	r3, r0
 810a26e:	681b      	ldr	r3, [r3, #0]
 810a270:	4618      	mov	r0, r3
 810a272:	f7ff febc 	bl	8109fee <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 810a276:	4603      	mov	r3, r0
 810a278:	461a      	mov	r2, r3
 810a27a:	6839      	ldr	r1, [r7, #0]
 810a27c:	4620      	mov	r0, r4
 810a27e:	f7ff f911 	bl	81094a4 <_ZNKSt4lessIN19EventManagerCM4Task11EEventQueueEEclERKS1_S4_>
 810a282:	4603      	mov	r3, r0
 810a284:	2b00      	cmp	r3, #0
 810a286:	d01f      	beq.n	810a2c8 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x21c>
	      if (_S_right(__pos._M_node) == 0)
 810a288:	69bb      	ldr	r3, [r7, #24]
 810a28a:	4618      	mov	r0, r3
 810a28c:	f7ff fc0d 	bl	8109aaa <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 810a290:	4603      	mov	r3, r0
 810a292:	2b00      	cmp	r3, #0
 810a294:	bf0c      	ite	eq
 810a296:	2301      	moveq	r3, #1
 810a298:	2300      	movne	r3, #0
 810a29a:	b2db      	uxtb	r3, r3
 810a29c:	2b00      	cmp	r3, #0
 810a29e:	d00a      	beq.n	810a2b6 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x20a>
		return _Res(0, __pos._M_node);
 810a2a0:	2300      	movs	r3, #0
 810a2a2:	62bb      	str	r3, [r7, #40]	@ 0x28
 810a2a4:	f107 0218 	add.w	r2, r7, #24
 810a2a8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 810a2ac:	4619      	mov	r1, r3
 810a2ae:	68f8      	ldr	r0, [r7, #12]
 810a2b0:	f000 f908 	bl	810a4c4 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1ERKS1_S4_>
    }
 810a2b4:	e019      	b.n	810a2ea <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x23e>
		return _Res(__after._M_node, __after._M_node);
 810a2b6:	f107 0210 	add.w	r2, r7, #16
 810a2ba:	f107 0310 	add.w	r3, r7, #16
 810a2be:	4619      	mov	r1, r3
 810a2c0:	68f8      	ldr	r0, [r7, #12]
 810a2c2:	f000 fa64 	bl	810a78e <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_EEOT_OT0_>
 810a2c6:	e010      	b.n	810a2ea <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 810a2c8:	68fb      	ldr	r3, [r7, #12]
 810a2ca:	683a      	ldr	r2, [r7, #0]
 810a2cc:	68b9      	ldr	r1, [r7, #8]
 810a2ce:	4618      	mov	r0, r3
 810a2d0:	f7ff fccf 	bl	8109c72 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_>
 810a2d4:	e009      	b.n	810a2ea <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x23e>
	return _Res(__pos._M_node, 0);
 810a2d6:	2300      	movs	r3, #0
 810a2d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 810a2da:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 810a2de:	f107 0318 	add.w	r3, r7, #24
 810a2e2:	4619      	mov	r1, r3
 810a2e4:	68f8      	ldr	r0, [r7, #12]
 810a2e6:	f000 f8ed 	bl	810a4c4 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1ERKS1_S4_>
    }
 810a2ea:	68f8      	ldr	r0, [r7, #12]
 810a2ec:	3734      	adds	r7, #52	@ 0x34
 810a2ee:	46bd      	mov	sp, r7
 810a2f0:	bd90      	pop	{r4, r7, pc}

0810a2f2 <_ZSt7forwardIN19EventManagerCM4Task11EEventQueueEEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 810a2f2:	b480      	push	{r7}
 810a2f4:	b083      	sub	sp, #12
 810a2f6:	af00      	add	r7, sp, #0
 810a2f8:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 810a2fa:	687b      	ldr	r3, [r7, #4]
 810a2fc:	4618      	mov	r0, r3
 810a2fe:	370c      	adds	r7, #12
 810a300:	46bd      	mov	sp, r7
 810a302:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a306:	4770      	bx	lr

0810a308 <_ZNSt5tupleIJON19EventManagerCM4Task11EEventQueueEEEC1IJS1_ELb1ELb1EEEDpOT_>:
	tuple(_UElements&&... __elements)
 810a308:	b590      	push	{r4, r7, lr}
 810a30a:	b083      	sub	sp, #12
 810a30c:	af00      	add	r7, sp, #0
 810a30e:	6078      	str	r0, [r7, #4]
 810a310:	6039      	str	r1, [r7, #0]
	: _Inherited(std::forward<_UElements>(__elements)...) { }
 810a312:	687c      	ldr	r4, [r7, #4]
 810a314:	6838      	ldr	r0, [r7, #0]
 810a316:	f7ff ffec 	bl	810a2f2 <_ZSt7forwardIN19EventManagerCM4Task11EEventQueueEEOT_RNSt16remove_referenceIS2_E4typeE>
 810a31a:	4603      	mov	r3, r0
 810a31c:	4619      	mov	r1, r3
 810a31e:	4620      	mov	r0, r4
 810a320:	f000 fa5f 	bl	810a7e2 <_ZNSt11_Tuple_implILj0EJON19EventManagerCM4Task11EEventQueueEEEC1IS1_EEOT_>
 810a324:	687b      	ldr	r3, [r7, #4]
 810a326:	4618      	mov	r0, r3
 810a328:	370c      	adds	r7, #12
 810a32a:	46bd      	mov	sp, r7
 810a32c:	bd90      	pop	{r4, r7, pc}

0810a32e <_ZSt7forwardISt5tupleIJON19EventManagerCM4Task11EEventQueueEEEEOT_RNSt16remove_referenceIS5_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 810a32e:	b480      	push	{r7}
 810a330:	b083      	sub	sp, #12
 810a332:	af00      	add	r7, sp, #0
 810a334:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 810a336:	687b      	ldr	r3, [r7, #4]
 810a338:	4618      	mov	r0, r3
 810a33a:	370c      	adds	r7, #12
 810a33c:	46bd      	mov	sp, r7
 810a33e:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a342:	4770      	bx	lr

0810a344 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE10_Auto_nodeC1IJRKSt21piecewise_construct_tSt5tupleIJOS1_EESI_IJEEEEERSC_DpOT_>:
	  _Auto_node(_Rb_tree& __t, _Args&&... __args)
 810a344:	b5b0      	push	{r4, r5, r7, lr}
 810a346:	b084      	sub	sp, #16
 810a348:	af00      	add	r7, sp, #0
 810a34a:	60f8      	str	r0, [r7, #12]
 810a34c:	60b9      	str	r1, [r7, #8]
 810a34e:	607a      	str	r2, [r7, #4]
 810a350:	603b      	str	r3, [r7, #0]
	  : _M_t(__t),
 810a352:	68fb      	ldr	r3, [r7, #12]
 810a354:	68ba      	ldr	r2, [r7, #8]
 810a356:	601a      	str	r2, [r3, #0]
	    _M_node(__t._M_create_node(std::forward<_Args>(__args)...))
 810a358:	6878      	ldr	r0, [r7, #4]
 810a35a:	f7ff fe63 	bl	810a024 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 810a35e:	4604      	mov	r4, r0
 810a360:	6838      	ldr	r0, [r7, #0]
 810a362:	f7ff ffe4 	bl	810a32e <_ZSt7forwardISt5tupleIJON19EventManagerCM4Task11EEventQueueEEEEOT_RNSt16remove_referenceIS5_E4typeE>
 810a366:	4605      	mov	r5, r0
 810a368:	6a38      	ldr	r0, [r7, #32]
 810a36a:	f7ff fe71 	bl	810a050 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 810a36e:	4603      	mov	r3, r0
 810a370:	462a      	mov	r2, r5
 810a372:	4621      	mov	r1, r4
 810a374:	68b8      	ldr	r0, [r7, #8]
 810a376:	f000 fa47 	bl	810a808 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJOS1_EESH_IJEEEEEPSt13_Rb_tree_nodeIS6_EDpOT_>
 810a37a:	4602      	mov	r2, r0
 810a37c:	68fb      	ldr	r3, [r7, #12]
 810a37e:	605a      	str	r2, [r3, #4]
	  { }
 810a380:	68fb      	ldr	r3, [r7, #12]
 810a382:	4618      	mov	r0, r3
 810a384:	3710      	adds	r7, #16
 810a386:	46bd      	mov	sp, r7
 810a388:	bdb0      	pop	{r4, r5, r7, pc}

0810a38a <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS6_E>:
      _M_destroy_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 810a38a:	b590      	push	{r4, r7, lr}
 810a38c:	b083      	sub	sp, #12
 810a38e:	af00      	add	r7, sp, #0
 810a390:	6078      	str	r0, [r7, #4]
 810a392:	6039      	str	r1, [r7, #0]
	_Alloc_traits::destroy(_M_get_Node_allocator(), __p->_M_valptr());
 810a394:	6878      	ldr	r0, [r7, #4]
 810a396:	f000 fa5a 	bl	810a84e <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>
 810a39a:	4604      	mov	r4, r0
 810a39c:	6838      	ldr	r0, [r7, #0]
 810a39e:	f7ff fbdb 	bl	8109b58 <_ZNSt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEE9_M_valptrEv>
 810a3a2:	4603      	mov	r3, r0
 810a3a4:	4619      	mov	r1, r3
 810a3a6:	4620      	mov	r0, r4
 810a3a8:	f000 fa5c 	bl	810a864 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEEE7destroyIS7_EEvRS9_PT_>
      }
 810a3ac:	bf00      	nop
 810a3ae:	370c      	adds	r7, #12
 810a3b0:	46bd      	mov	sp, r7
 810a3b2:	bd90      	pop	{r4, r7, pc}

0810a3b4 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS6_E>:
      _M_put_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 810a3b4:	b580      	push	{r7, lr}
 810a3b6:	b082      	sub	sp, #8
 810a3b8:	af00      	add	r7, sp, #0
 810a3ba:	6078      	str	r0, [r7, #4]
 810a3bc:	6039      	str	r1, [r7, #0]
      { _Alloc_traits::deallocate(_M_get_Node_allocator(), __p, 1); }
 810a3be:	6878      	ldr	r0, [r7, #4]
 810a3c0:	f000 fa45 	bl	810a84e <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>
 810a3c4:	4603      	mov	r3, r0
 810a3c6:	2201      	movs	r2, #1
 810a3c8:	6839      	ldr	r1, [r7, #0]
 810a3ca:	4618      	mov	r0, r3
 810a3cc:	f000 fa56 	bl	810a87c <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEEE10deallocateERS9_PS8_j>
 810a3d0:	bf00      	nop
 810a3d2:	3708      	adds	r7, #8
 810a3d4:	46bd      	mov	sp, r7
 810a3d6:	bd80      	pop	{r7, pc}

0810a3d8 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEE6_M_ptrEv>:
      _M_ptr() noexcept
 810a3d8:	b580      	push	{r7, lr}
 810a3da:	b082      	sub	sp, #8
 810a3dc:	af00      	add	r7, sp, #0
 810a3de:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 810a3e0:	6878      	ldr	r0, [r7, #4]
 810a3e2:	f000 fa6a 	bl	810a8ba <_ZN9__gnu_cxx16__aligned_membufISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEE7_M_addrEv>
 810a3e6:	4603      	mov	r3, r0
 810a3e8:	4618      	mov	r0, r3
 810a3ea:	3708      	adds	r7, #8
 810a3ec:	46bd      	mov	sp, r7
 810a3ee:	bd80      	pop	{r7, pc}

0810a3f0 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_create_nodeIJRS1_RS5_EEEPSt13_Rb_tree_nodeIS6_EDpOT_>:
	_M_create_node(_Args&&... __args)
 810a3f0:	b590      	push	{r4, r7, lr}
 810a3f2:	b087      	sub	sp, #28
 810a3f4:	af00      	add	r7, sp, #0
 810a3f6:	60f8      	str	r0, [r7, #12]
 810a3f8:	60b9      	str	r1, [r7, #8]
 810a3fa:	607a      	str	r2, [r7, #4]
	  _Link_type __tmp = _M_get_node();
 810a3fc:	68f8      	ldr	r0, [r7, #12]
 810a3fe:	f000 fa67 	bl	810a8d0 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_get_nodeEv>
 810a402:	6178      	str	r0, [r7, #20]
	  _M_construct_node(__tmp, std::forward<_Args>(__args)...);
 810a404:	68b8      	ldr	r0, [r7, #8]
 810a406:	f7ff f862 	bl	81094ce <_ZSt7forwardIRN19EventManagerCM4Task11EEventQueueEEOT_RNSt16remove_referenceIS3_E4typeE>
 810a40a:	4604      	mov	r4, r0
 810a40c:	6878      	ldr	r0, [r7, #4]
 810a40e:	f7ff f869 	bl	81094e4 <_ZSt7forwardIRP15QueueDefinitionEOT_RNSt16remove_referenceIS3_E4typeE>
 810a412:	4603      	mov	r3, r0
 810a414:	4622      	mov	r2, r4
 810a416:	6979      	ldr	r1, [r7, #20]
 810a418:	68f8      	ldr	r0, [r7, #12]
 810a41a:	f000 fa6a 	bl	810a8f2 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE17_M_construct_nodeIJRS1_RS5_EEEvPSt13_Rb_tree_nodeIS6_EDpOT_>
	  return __tmp;
 810a41e:	697b      	ldr	r3, [r7, #20]
	}
 810a420:	4618      	mov	r0, r3
 810a422:	371c      	adds	r7, #28
 810a424:	46bd      	mov	sp, r7
 810a426:	bd90      	pop	{r4, r7, pc}

0810a428 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>:
      _S_key(_Const_Link_type __x)
 810a428:	b580      	push	{r7, lr}
 810a42a:	b084      	sub	sp, #16
 810a42c:	af00      	add	r7, sp, #0
 810a42e:	6078      	str	r0, [r7, #4]
	return _KeyOfValue()(*__x->_M_valptr());
 810a430:	6878      	ldr	r0, [r7, #4]
 810a432:	f000 fa83 	bl	810a93c <_ZNKSt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEE9_M_valptrEv>
 810a436:	4602      	mov	r2, r0
 810a438:	f107 030c 	add.w	r3, r7, #12
 810a43c:	4611      	mov	r1, r2
 810a43e:	4618      	mov	r0, r3
 810a440:	f000 fa8a 	bl	810a958 <_ZNKSt10_Select1stISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEclERKS6_>
 810a444:	4603      	mov	r3, r0
      }
 810a446:	4618      	mov	r0, r3
 810a448:	3710      	adds	r7, #16
 810a44a:	46bd      	mov	sp, r7
 810a44c:	bd80      	pop	{r7, pc}

0810a44e <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 810a44e:	b580      	push	{r7, lr}
 810a450:	b084      	sub	sp, #16
 810a452:	af00      	add	r7, sp, #0
 810a454:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_header._M_left); }
 810a456:	687b      	ldr	r3, [r7, #4]
 810a458:	68da      	ldr	r2, [r3, #12]
 810a45a:	f107 030c 	add.w	r3, r7, #12
 810a45e:	4611      	mov	r1, r2
 810a460:	4618      	mov	r0, r3
 810a462:	f7ff fcb2 	bl	8109dca <_ZNSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEC1EPSt18_Rb_tree_node_base>
 810a466:	68fb      	ldr	r3, [r7, #12]
 810a468:	4618      	mov	r0, r3
 810a46a:	3710      	adds	r7, #16
 810a46c:	46bd      	mov	sp, r7
 810a46e:	bd80      	pop	{r7, pc}

0810a470 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEERS1_EEOT_OT0_>:
	pair(_U1&& __x, _U2&& __y)
 810a470:	b580      	push	{r7, lr}
 810a472:	b084      	sub	sp, #16
 810a474:	af00      	add	r7, sp, #0
 810a476:	60f8      	str	r0, [r7, #12]
 810a478:	60b9      	str	r1, [r7, #8]
 810a47a:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y))
 810a47c:	68b8      	ldr	r0, [r7, #8]
 810a47e:	f000 fa77 	bl	810a970 <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEEOT_RNSt16remove_referenceISB_E4typeE>
 810a482:	4603      	mov	r3, r0
 810a484:	681a      	ldr	r2, [r3, #0]
 810a486:	68fb      	ldr	r3, [r7, #12]
 810a488:	601a      	str	r2, [r3, #0]
 810a48a:	6878      	ldr	r0, [r7, #4]
 810a48c:	f000 fa7b 	bl	810a986 <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 810a490:	4603      	mov	r3, r0
 810a492:	681a      	ldr	r2, [r3, #0]
 810a494:	68fb      	ldr	r3, [r7, #12]
 810a496:	605a      	str	r2, [r3, #4]
	{ }
 810a498:	68fb      	ldr	r3, [r7, #12]
 810a49a:	4618      	mov	r0, r3
 810a49c:	3710      	adds	r7, #16
 810a49e:	46bd      	mov	sp, r7
 810a4a0:	bd80      	pop	{r7, pc}

0810a4a2 <_ZNSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEmmEv>:
      operator--() _GLIBCXX_NOEXCEPT
 810a4a2:	b580      	push	{r7, lr}
 810a4a4:	b082      	sub	sp, #8
 810a4a6:	af00      	add	r7, sp, #0
 810a4a8:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_decrement(_M_node);
 810a4aa:	687b      	ldr	r3, [r7, #4]
 810a4ac:	681b      	ldr	r3, [r3, #0]
 810a4ae:	4618      	mov	r0, r3
 810a4b0:	f01b fae3 	bl	8125a7a <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
 810a4b4:	4602      	mov	r2, r0
 810a4b6:	687b      	ldr	r3, [r7, #4]
 810a4b8:	601a      	str	r2, [r3, #0]
	return *this;
 810a4ba:	687b      	ldr	r3, [r7, #4]
      }
 810a4bc:	4618      	mov	r0, r3
 810a4be:	3708      	adds	r7, #8
 810a4c0:	46bd      	mov	sp, r7
 810a4c2:	bd80      	pop	{r7, pc}

0810a4c4 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1ERKS1_S4_>:
      pair(const _T1& __x, const _T2& __y)
 810a4c4:	b480      	push	{r7}
 810a4c6:	b085      	sub	sp, #20
 810a4c8:	af00      	add	r7, sp, #0
 810a4ca:	60f8      	str	r0, [r7, #12]
 810a4cc:	60b9      	str	r1, [r7, #8]
 810a4ce:	607a      	str	r2, [r7, #4]
      : first(__x), second(__y)
 810a4d0:	68bb      	ldr	r3, [r7, #8]
 810a4d2:	681a      	ldr	r2, [r3, #0]
 810a4d4:	68fb      	ldr	r3, [r7, #12]
 810a4d6:	601a      	str	r2, [r3, #0]
 810a4d8:	687b      	ldr	r3, [r7, #4]
 810a4da:	681a      	ldr	r2, [r3, #0]
 810a4dc:	68fb      	ldr	r3, [r7, #12]
 810a4de:	605a      	str	r2, [r3, #4]
      { }
 810a4e0:	68fb      	ldr	r3, [r7, #12]
 810a4e2:	4618      	mov	r0, r3
 810a4e4:	3714      	adds	r7, #20
 810a4e6:	46bd      	mov	sp, r7
 810a4e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a4ec:	4770      	bx	lr

0810a4ee <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 810a4ee:	b5b0      	push	{r4, r5, r7, lr}
 810a4f0:	b086      	sub	sp, #24
 810a4f2:	af00      	add	r7, sp, #0
 810a4f4:	60f8      	str	r0, [r7, #12]
 810a4f6:	60b9      	str	r1, [r7, #8]
 810a4f8:	607a      	str	r2, [r7, #4]
 810a4fa:	603b      	str	r3, [r7, #0]
			    || _M_impl._M_key_compare(_S_key(__z),
 810a4fc:	68bb      	ldr	r3, [r7, #8]
 810a4fe:	2b00      	cmp	r3, #0
 810a500:	d117      	bne.n	810a532 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E+0x44>
      bool __insert_left = (__x != 0 || __p == _M_end()
 810a502:	68f8      	ldr	r0, [r7, #12]
 810a504:	f7ff fd36 	bl	8109f74 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>
 810a508:	4602      	mov	r2, r0
 810a50a:	687b      	ldr	r3, [r7, #4]
 810a50c:	4293      	cmp	r3, r2
 810a50e:	d010      	beq.n	810a532 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E+0x44>
			    || _M_impl._M_key_compare(_S_key(__z),
 810a510:	68fc      	ldr	r4, [r7, #12]
 810a512:	6838      	ldr	r0, [r7, #0]
 810a514:	f7ff ff88 	bl	810a428 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 810a518:	4605      	mov	r5, r0
 810a51a:	6878      	ldr	r0, [r7, #4]
 810a51c:	f7ff fd67 	bl	8109fee <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 810a520:	4603      	mov	r3, r0
 810a522:	461a      	mov	r2, r3
 810a524:	4629      	mov	r1, r5
 810a526:	4620      	mov	r0, r4
 810a528:	f7fe ffbc 	bl	81094a4 <_ZNKSt4lessIN19EventManagerCM4Task11EEventQueueEEclERKS1_S4_>
 810a52c:	4603      	mov	r3, r0
 810a52e:	2b00      	cmp	r3, #0
 810a530:	d001      	beq.n	810a536 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E+0x48>
 810a532:	2301      	movs	r3, #1
 810a534:	e000      	b.n	810a538 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E+0x4a>
 810a536:	2300      	movs	r3, #0
      bool __insert_left = (__x != 0 || __p == _M_end()
 810a538:	75fb      	strb	r3, [r7, #23]
				    this->_M_impl._M_header);
 810a53a:	68fb      	ldr	r3, [r7, #12]
 810a53c:	3304      	adds	r3, #4
      _Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
 810a53e:	7df8      	ldrb	r0, [r7, #23]
 810a540:	687a      	ldr	r2, [r7, #4]
 810a542:	6839      	ldr	r1, [r7, #0]
 810a544:	f01b fa9b 	bl	8125a7e <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
      ++_M_impl._M_node_count;
 810a548:	68fb      	ldr	r3, [r7, #12]
 810a54a:	695b      	ldr	r3, [r3, #20]
 810a54c:	1c5a      	adds	r2, r3, #1
 810a54e:	68fb      	ldr	r3, [r7, #12]
 810a550:	615a      	str	r2, [r3, #20]
      return iterator(__z);
 810a552:	f107 0310 	add.w	r3, r7, #16
 810a556:	6839      	ldr	r1, [r7, #0]
 810a558:	4618      	mov	r0, r3
 810a55a:	f7ff fc36 	bl	8109dca <_ZNSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEC1EPSt18_Rb_tree_node_base>
 810a55e:	693b      	ldr	r3, [r7, #16]
    }
 810a560:	4618      	mov	r0, r3
 810a562:	3718      	adds	r7, #24
 810a564:	46bd      	mov	sp, r7
 810a566:	bdb0      	pop	{r4, r5, r7, pc}

0810a568 <_ZNSt12_Destroy_auxILb0EE9__destroyIP8SMessageEEvT_S4_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
 810a568:	b580      	push	{r7, lr}
 810a56a:	b082      	sub	sp, #8
 810a56c:	af00      	add	r7, sp, #0
 810a56e:	6078      	str	r0, [r7, #4]
 810a570:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 810a572:	e009      	b.n	810a588 <_ZNSt12_Destroy_auxILb0EE9__destroyIP8SMessageEEvT_S4_+0x20>
	    std::_Destroy(std::__addressof(*__first));
 810a574:	6878      	ldr	r0, [r7, #4]
 810a576:	f000 fa11 	bl	810a99c <_ZSt11__addressofI8SMessageEPT_RS1_>
 810a57a:	4603      	mov	r3, r0
 810a57c:	4618      	mov	r0, r3
 810a57e:	f000 fa18 	bl	810a9b2 <_ZSt8_DestroyI8SMessageEvPT_>
	  for (; __first != __last; ++__first)
 810a582:	687b      	ldr	r3, [r7, #4]
 810a584:	331c      	adds	r3, #28
 810a586:	607b      	str	r3, [r7, #4]
 810a588:	687a      	ldr	r2, [r7, #4]
 810a58a:	683b      	ldr	r3, [r7, #0]
 810a58c:	429a      	cmp	r2, r3
 810a58e:	d1f1      	bne.n	810a574 <_ZNSt12_Destroy_auxILb0EE9__destroyIP8SMessageEEvT_S4_+0xc>
	}
 810a590:	bf00      	nop
 810a592:	bf00      	nop
 810a594:	3708      	adds	r7, #8
 810a596:	46bd      	mov	sp, r7
 810a598:	bd80      	pop	{r7, pc}

0810a59a <_ZNSt12_Destroy_auxILb1EE9__destroyIP8SMessageEEvT_S4_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 810a59a:	b480      	push	{r7}
 810a59c:	b083      	sub	sp, #12
 810a59e:	af00      	add	r7, sp, #0
 810a5a0:	6078      	str	r0, [r7, #4]
 810a5a2:	6039      	str	r1, [r7, #0]
 810a5a4:	bf00      	nop
 810a5a6:	370c      	adds	r7, #12
 810a5a8:	46bd      	mov	sp, r7
 810a5aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a5ae:	4770      	bx	lr

0810a5b0 <_ZNSt16allocator_traitsISaI8SMessageEE8max_sizeERKS1_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 810a5b0:	b480      	push	{r7}
 810a5b2:	b083      	sub	sp, #12
 810a5b4:	af00      	add	r7, sp, #0
 810a5b6:	6078      	str	r0, [r7, #4]
	return size_t(-1) / sizeof(value_type);
 810a5b8:	4b03      	ldr	r3, [pc, #12]	@ (810a5c8 <_ZNSt16allocator_traitsISaI8SMessageEE8max_sizeERKS1_+0x18>)
      }
 810a5ba:	4618      	mov	r0, r3
 810a5bc:	370c      	adds	r7, #12
 810a5be:	46bd      	mov	sp, r7
 810a5c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a5c4:	4770      	bx	lr
 810a5c6:	bf00      	nop
 810a5c8:	09249249 	.word	0x09249249

0810a5cc <_ZNSt6vectorI8SMessageSaIS0_EE11_S_max_sizeERKS1_>:
	      __N("cannot create std::vector larger than max_size()"));
	return __n;
      }

      static _GLIBCXX20_CONSTEXPR size_type
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 810a5cc:	b580      	push	{r7, lr}
 810a5ce:	b084      	sub	sp, #16
 810a5d0:	af00      	add	r7, sp, #0
 810a5d2:	6078      	str	r0, [r7, #4]
      {
	// std::distance(begin(), end()) cannot be greater than PTRDIFF_MAX,
	// and realistically we can't store more than PTRDIFF_MAX/sizeof(T)
	// (even if std::allocator_traits::max_size says we can).
	const size_t __diffmax
 810a5d4:	4b0a      	ldr	r3, [pc, #40]	@ (810a600 <_ZNSt6vectorI8SMessageSaIS0_EE11_S_max_sizeERKS1_+0x34>)
 810a5d6:	60fb      	str	r3, [r7, #12]
	  = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max / sizeof(_Tp);
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 810a5d8:	6878      	ldr	r0, [r7, #4]
 810a5da:	f7ff ffe9 	bl	810a5b0 <_ZNSt16allocator_traitsISaI8SMessageEE8max_sizeERKS1_>
 810a5de:	4603      	mov	r3, r0
 810a5e0:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 810a5e2:	f107 0208 	add.w	r2, r7, #8
 810a5e6:	f107 030c 	add.w	r3, r7, #12
 810a5ea:	4611      	mov	r1, r2
 810a5ec:	4618      	mov	r0, r3
 810a5ee:	f000 f9fd 	bl	810a9ec <_ZSt3minIjERKT_S2_S2_>
 810a5f2:	4603      	mov	r3, r0
 810a5f4:	681b      	ldr	r3, [r3, #0]
      }
 810a5f6:	4618      	mov	r0, r3
 810a5f8:	3710      	adds	r7, #16
 810a5fa:	46bd      	mov	sp, r7
 810a5fc:	bd80      	pop	{r7, pc}
 810a5fe:	bf00      	nop
 810a600:	04924924 	.word	0x04924924

0810a604 <_ZNKSt12_Vector_baseI8SMessageSaIS0_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 810a604:	b480      	push	{r7}
 810a606:	b083      	sub	sp, #12
 810a608:	af00      	add	r7, sp, #0
 810a60a:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 810a60c:	687b      	ldr	r3, [r7, #4]
 810a60e:	4618      	mov	r0, r3
 810a610:	370c      	adds	r7, #12
 810a612:	46bd      	mov	sp, r7
 810a614:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a618:	4770      	bx	lr

0810a61a <_ZNSt16allocator_traitsISaI8SMessageEE8allocateERS1_j>:
      allocate(allocator_type& __a, size_type __n)
 810a61a:	b5b0      	push	{r4, r5, r7, lr}
 810a61c:	b084      	sub	sp, #16
 810a61e:	af00      	add	r7, sp, #0
 810a620:	6078      	str	r0, [r7, #4]
 810a622:	6039      	str	r1, [r7, #0]
 810a624:	687b      	ldr	r3, [r7, #4]
 810a626:	60fb      	str	r3, [r7, #12]
 810a628:	683b      	ldr	r3, [r7, #0]
 810a62a:	60bb      	str	r3, [r7, #8]
	if (std::__is_constant_evaluated())
 810a62c:	f7fa fae2 	bl	8104bf4 <_ZSt23__is_constant_evaluatedv>
 810a630:	4603      	mov	r3, r0
 810a632:	2b00      	cmp	r3, #0
 810a634:	d01d      	beq.n	810a672 <_ZNSt16allocator_traitsISaI8SMessageEE8allocateERS1_j+0x58>
	    if (__builtin_mul_overflow(__n, sizeof(_Tp), &__n))
 810a636:	68bb      	ldr	r3, [r7, #8]
 810a638:	2100      	movs	r1, #0
 810a63a:	221c      	movs	r2, #28
 810a63c:	fba3 4502 	umull	r4, r5, r3, r2
 810a640:	f04f 0200 	mov.w	r2, #0
 810a644:	f04f 0300 	mov.w	r3, #0
 810a648:	002a      	movs	r2, r5
 810a64a:	2300      	movs	r3, #0
 810a64c:	2a00      	cmp	r2, #0
 810a64e:	d000      	beq.n	810a652 <_ZNSt16allocator_traitsISaI8SMessageEE8allocateERS1_j+0x38>
 810a650:	2101      	movs	r1, #1
 810a652:	4623      	mov	r3, r4
 810a654:	60bb      	str	r3, [r7, #8]
 810a656:	460b      	mov	r3, r1
 810a658:	f003 0301 	and.w	r3, r3, #1
 810a65c:	b2db      	uxtb	r3, r3
 810a65e:	2b00      	cmp	r3, #0
 810a660:	d001      	beq.n	810a666 <_ZNSt16allocator_traitsISaI8SMessageEE8allocateERS1_j+0x4c>
	      std::__throw_bad_array_new_length();
 810a662:	f01b fa73 	bl	8125b4c <_ZSt28__throw_bad_array_new_lengthv>
	    return static_cast<_Tp*>(::operator new(__n));
 810a666:	68bb      	ldr	r3, [r7, #8]
 810a668:	4618      	mov	r0, r3
 810a66a:	f01b f99e 	bl	81259aa <_Znwj>
 810a66e:	4603      	mov	r3, r0
 810a670:	e007      	b.n	810a682 <_ZNSt16allocator_traitsISaI8SMessageEE8allocateERS1_j+0x68>
	return __allocator_base<_Tp>::allocate(__n, 0);
 810a672:	68bb      	ldr	r3, [r7, #8]
 810a674:	2200      	movs	r2, #0
 810a676:	4619      	mov	r1, r3
 810a678:	68f8      	ldr	r0, [r7, #12]
 810a67a:	f000 fafd 	bl	810ac78 <_ZNSt15__new_allocatorI8SMessageE8allocateEjPKv>
 810a67e:	4603      	mov	r3, r0
 810a680:	bf00      	nop
      { return __a.allocate(__n); }
 810a682:	4618      	mov	r0, r3
 810a684:	3710      	adds	r7, #16
 810a686:	46bd      	mov	sp, r7
 810a688:	bdb0      	pop	{r4, r5, r7, pc}

0810a68a <_ZSt12__relocate_aIP8SMessageS1_SaIS0_EET0_T_S4_S3_RT1_>:

  template <typename _InputIterator, typename _ForwardIterator,
	    typename _Allocator>
    _GLIBCXX20_CONSTEXPR
    inline _ForwardIterator
    __relocate_a(_InputIterator __first, _InputIterator __last,
 810a68a:	b5b0      	push	{r4, r5, r7, lr}
 810a68c:	b084      	sub	sp, #16
 810a68e:	af00      	add	r7, sp, #0
 810a690:	60f8      	str	r0, [r7, #12]
 810a692:	60b9      	str	r1, [r7, #8]
 810a694:	607a      	str	r2, [r7, #4]
 810a696:	603b      	str	r3, [r7, #0]
		 _ForwardIterator __result, _Allocator& __alloc)
    noexcept(noexcept(__relocate_a_1(std::__niter_base(__first),
				     std::__niter_base(__last),
				     std::__niter_base(__result), __alloc)))
    {
      return std::__relocate_a_1(std::__niter_base(__first),
 810a698:	68f8      	ldr	r0, [r7, #12]
 810a69a:	f000 f9bb 	bl	810aa14 <_ZSt12__niter_baseIP8SMessageET_S2_>
 810a69e:	4604      	mov	r4, r0
 810a6a0:	68b8      	ldr	r0, [r7, #8]
 810a6a2:	f000 f9b7 	bl	810aa14 <_ZSt12__niter_baseIP8SMessageET_S2_>
 810a6a6:	4605      	mov	r5, r0
 810a6a8:	6878      	ldr	r0, [r7, #4]
 810a6aa:	f000 f9b3 	bl	810aa14 <_ZSt12__niter_baseIP8SMessageET_S2_>
 810a6ae:	4602      	mov	r2, r0
 810a6b0:	683b      	ldr	r3, [r7, #0]
 810a6b2:	4629      	mov	r1, r5
 810a6b4:	4620      	mov	r0, r4
 810a6b6:	f000 f9c9 	bl	810aa4c <_ZSt14__relocate_a_1I8SMessageS0_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS3_E4typeES5_S5_S5_RSaIT0_E>
 810a6ba:	4603      	mov	r3, r0
				 std::__niter_base(__last),
				 std::__niter_base(__result), __alloc);
    }
 810a6bc:	4618      	mov	r0, r3
 810a6be:	3710      	adds	r7, #16
 810a6c0:	46bd      	mov	sp, r7
 810a6c2:	bdb0      	pop	{r4, r5, r7, pc}

0810a6c4 <_ZSt10destroy_atI8SMessageEvPT_>:
    destroy_at(_Tp* __location)
 810a6c4:	b480      	push	{r7}
 810a6c6:	b083      	sub	sp, #12
 810a6c8:	af00      	add	r7, sp, #0
 810a6ca:	6078      	str	r0, [r7, #4]
    }
 810a6cc:	bf00      	nop
 810a6ce:	370c      	adds	r7, #12
 810a6d0:	46bd      	mov	sp, r7
 810a6d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a6d6:	4770      	bx	lr

0810a6d8 <_ZNSt10_Head_baseILj0ERKN19EventManagerCM4Task11EEventQueueELb0EEC1ES3_>:
      constexpr _Head_base(const _Head& __h)
 810a6d8:	b480      	push	{r7}
 810a6da:	b083      	sub	sp, #12
 810a6dc:	af00      	add	r7, sp, #0
 810a6de:	6078      	str	r0, [r7, #4]
 810a6e0:	6039      	str	r1, [r7, #0]
      : _M_head_impl(__h) { }
 810a6e2:	687b      	ldr	r3, [r7, #4]
 810a6e4:	683a      	ldr	r2, [r7, #0]
 810a6e6:	601a      	str	r2, [r3, #0]
 810a6e8:	687b      	ldr	r3, [r7, #4]
 810a6ea:	4618      	mov	r0, r3
 810a6ec:	370c      	adds	r7, #12
 810a6ee:	46bd      	mov	sp, r7
 810a6f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a6f4:	4770      	bx	lr

0810a6f6 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEEPSt13_Rb_tree_nodeIS6_EDpOT_>:
	_M_create_node(_Args&&... __args)
 810a6f6:	b5b0      	push	{r4, r5, r7, lr}
 810a6f8:	b088      	sub	sp, #32
 810a6fa:	af02      	add	r7, sp, #8
 810a6fc:	60f8      	str	r0, [r7, #12]
 810a6fe:	60b9      	str	r1, [r7, #8]
 810a700:	607a      	str	r2, [r7, #4]
 810a702:	603b      	str	r3, [r7, #0]
	  _Link_type __tmp = _M_get_node();
 810a704:	68f8      	ldr	r0, [r7, #12]
 810a706:	f000 f8e3 	bl	810a8d0 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_get_nodeEv>
 810a70a:	6178      	str	r0, [r7, #20]
	  _M_construct_node(__tmp, std::forward<_Args>(__args)...);
 810a70c:	68b8      	ldr	r0, [r7, #8]
 810a70e:	f7ff fc89 	bl	810a024 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 810a712:	4604      	mov	r4, r0
 810a714:	6878      	ldr	r0, [r7, #4]
 810a716:	f7ff fc90 	bl	810a03a <_ZSt7forwardISt5tupleIJRKN19EventManagerCM4Task11EEventQueueEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 810a71a:	4605      	mov	r5, r0
 810a71c:	6838      	ldr	r0, [r7, #0]
 810a71e:	f7ff fc97 	bl	810a050 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 810a722:	4603      	mov	r3, r0
 810a724:	9300      	str	r3, [sp, #0]
 810a726:	462b      	mov	r3, r5
 810a728:	4622      	mov	r2, r4
 810a72a:	6979      	ldr	r1, [r7, #20]
 810a72c:	68f8      	ldr	r0, [r7, #12]
 810a72e:	f000 f9d3 	bl	810aad8 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEEvPSt13_Rb_tree_nodeIS6_EDpOT_>
	  return __tmp;
 810a732:	697b      	ldr	r3, [r7, #20]
	}
 810a734:	4618      	mov	r0, r3
 810a736:	3718      	adds	r7, #24
 810a738:	46bd      	mov	sp, r7
 810a73a:	bdb0      	pop	{r4, r5, r7, pc}

0810a73c <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEE13_M_const_castEv>:
      _M_const_cast() const _GLIBCXX_NOEXCEPT
 810a73c:	b580      	push	{r7, lr}
 810a73e:	b084      	sub	sp, #16
 810a740:	af00      	add	r7, sp, #0
 810a742:	6078      	str	r0, [r7, #4]
      { return iterator(const_cast<typename iterator::_Base_ptr>(_M_node)); }
 810a744:	687b      	ldr	r3, [r7, #4]
 810a746:	681a      	ldr	r2, [r3, #0]
 810a748:	f107 030c 	add.w	r3, r7, #12
 810a74c:	4611      	mov	r1, r2
 810a74e:	4618      	mov	r0, r3
 810a750:	f7ff fb3b 	bl	8109dca <_ZNSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEC1EPSt18_Rb_tree_node_base>
 810a754:	68fb      	ldr	r3, [r7, #12]
 810a756:	4618      	mov	r0, r3
 810a758:	3710      	adds	r7, #16
 810a75a:	46bd      	mov	sp, r7
 810a75c:	bd80      	pop	{r7, pc}

0810a75e <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_rightmostEv>:
      _M_rightmost() _GLIBCXX_NOEXCEPT
 810a75e:	b480      	push	{r7}
 810a760:	b083      	sub	sp, #12
 810a762:	af00      	add	r7, sp, #0
 810a764:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_right; }
 810a766:	687b      	ldr	r3, [r7, #4]
 810a768:	3310      	adds	r3, #16
 810a76a:	4618      	mov	r0, r3
 810a76c:	370c      	adds	r7, #12
 810a76e:	46bd      	mov	sp, r7
 810a770:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a774:	4770      	bx	lr

0810a776 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_leftmostEv>:
      _M_leftmost() _GLIBCXX_NOEXCEPT
 810a776:	b480      	push	{r7}
 810a778:	b083      	sub	sp, #12
 810a77a:	af00      	add	r7, sp, #0
 810a77c:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_left; }
 810a77e:	687b      	ldr	r3, [r7, #4]
 810a780:	330c      	adds	r3, #12
 810a782:	4618      	mov	r0, r3
 810a784:	370c      	adds	r7, #12
 810a786:	46bd      	mov	sp, r7
 810a788:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a78c:	4770      	bx	lr

0810a78e <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_EEOT_OT0_>:
	pair(_U1&& __x, _U2&& __y)
 810a78e:	b580      	push	{r7, lr}
 810a790:	b084      	sub	sp, #16
 810a792:	af00      	add	r7, sp, #0
 810a794:	60f8      	str	r0, [r7, #12]
 810a796:	60b9      	str	r1, [r7, #8]
 810a798:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y))
 810a79a:	68b8      	ldr	r0, [r7, #8]
 810a79c:	f000 f8f3 	bl	810a986 <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 810a7a0:	4603      	mov	r3, r0
 810a7a2:	681a      	ldr	r2, [r3, #0]
 810a7a4:	68fb      	ldr	r3, [r7, #12]
 810a7a6:	601a      	str	r2, [r3, #0]
 810a7a8:	6878      	ldr	r0, [r7, #4]
 810a7aa:	f000 f8ec 	bl	810a986 <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 810a7ae:	4603      	mov	r3, r0
 810a7b0:	681a      	ldr	r2, [r3, #0]
 810a7b2:	68fb      	ldr	r3, [r7, #12]
 810a7b4:	605a      	str	r2, [r3, #4]
	{ }
 810a7b6:	68fb      	ldr	r3, [r7, #12]
 810a7b8:	4618      	mov	r0, r3
 810a7ba:	3710      	adds	r7, #16
 810a7bc:	46bd      	mov	sp, r7
 810a7be:	bd80      	pop	{r7, pc}

0810a7c0 <_ZNSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 810a7c0:	b580      	push	{r7, lr}
 810a7c2:	b082      	sub	sp, #8
 810a7c4:	af00      	add	r7, sp, #0
 810a7c6:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_increment(_M_node);
 810a7c8:	687b      	ldr	r3, [r7, #4]
 810a7ca:	681b      	ldr	r3, [r3, #0]
 810a7cc:	4618      	mov	r0, r3
 810a7ce:	f01b f952 	bl	8125a76 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>
 810a7d2:	4602      	mov	r2, r0
 810a7d4:	687b      	ldr	r3, [r7, #4]
 810a7d6:	601a      	str	r2, [r3, #0]
	return *this;
 810a7d8:	687b      	ldr	r3, [r7, #4]
      }
 810a7da:	4618      	mov	r0, r3
 810a7dc:	3708      	adds	r7, #8
 810a7de:	46bd      	mov	sp, r7
 810a7e0:	bd80      	pop	{r7, pc}

0810a7e2 <_ZNSt11_Tuple_implILj0EJON19EventManagerCM4Task11EEventQueueEEEC1IS1_EEOT_>:
	_Tuple_impl(_UHead&& __head)
 810a7e2:	b590      	push	{r4, r7, lr}
 810a7e4:	b083      	sub	sp, #12
 810a7e6:	af00      	add	r7, sp, #0
 810a7e8:	6078      	str	r0, [r7, #4]
 810a7ea:	6039      	str	r1, [r7, #0]
	: _Base(std::forward<_UHead>(__head))
 810a7ec:	687c      	ldr	r4, [r7, #4]
 810a7ee:	6838      	ldr	r0, [r7, #0]
 810a7f0:	f7ff fd7f 	bl	810a2f2 <_ZSt7forwardIN19EventManagerCM4Task11EEventQueueEEOT_RNSt16remove_referenceIS2_E4typeE>
 810a7f4:	4603      	mov	r3, r0
 810a7f6:	4619      	mov	r1, r3
 810a7f8:	4620      	mov	r0, r4
 810a7fa:	f000 f99a 	bl	810ab32 <_ZNSt10_Head_baseILj0EON19EventManagerCM4Task11EEventQueueELb0EEC1IS1_EEOT_>
	{ }
 810a7fe:	687b      	ldr	r3, [r7, #4]
 810a800:	4618      	mov	r0, r3
 810a802:	370c      	adds	r7, #12
 810a804:	46bd      	mov	sp, r7
 810a806:	bd90      	pop	{r4, r7, pc}

0810a808 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJOS1_EESH_IJEEEEEPSt13_Rb_tree_nodeIS6_EDpOT_>:
	_M_create_node(_Args&&... __args)
 810a808:	b5b0      	push	{r4, r5, r7, lr}
 810a80a:	b088      	sub	sp, #32
 810a80c:	af02      	add	r7, sp, #8
 810a80e:	60f8      	str	r0, [r7, #12]
 810a810:	60b9      	str	r1, [r7, #8]
 810a812:	607a      	str	r2, [r7, #4]
 810a814:	603b      	str	r3, [r7, #0]
	  _Link_type __tmp = _M_get_node();
 810a816:	68f8      	ldr	r0, [r7, #12]
 810a818:	f000 f85a 	bl	810a8d0 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_get_nodeEv>
 810a81c:	6178      	str	r0, [r7, #20]
	  _M_construct_node(__tmp, std::forward<_Args>(__args)...);
 810a81e:	68b8      	ldr	r0, [r7, #8]
 810a820:	f7ff fc00 	bl	810a024 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 810a824:	4604      	mov	r4, r0
 810a826:	6878      	ldr	r0, [r7, #4]
 810a828:	f7ff fd81 	bl	810a32e <_ZSt7forwardISt5tupleIJON19EventManagerCM4Task11EEventQueueEEEEOT_RNSt16remove_referenceIS5_E4typeE>
 810a82c:	4605      	mov	r5, r0
 810a82e:	6838      	ldr	r0, [r7, #0]
 810a830:	f7ff fc0e 	bl	810a050 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 810a834:	4603      	mov	r3, r0
 810a836:	9300      	str	r3, [sp, #0]
 810a838:	462b      	mov	r3, r5
 810a83a:	4622      	mov	r2, r4
 810a83c:	6979      	ldr	r1, [r7, #20]
 810a83e:	68f8      	ldr	r0, [r7, #12]
 810a840:	f000 f987 	bl	810ab52 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJOS1_EESH_IJEEEEEvPSt13_Rb_tree_nodeIS6_EDpOT_>
	  return __tmp;
 810a844:	697b      	ldr	r3, [r7, #20]
	}
 810a846:	4618      	mov	r0, r3
 810a848:	3718      	adds	r7, #24
 810a84a:	46bd      	mov	sp, r7
 810a84c:	bdb0      	pop	{r4, r5, r7, pc}

0810a84e <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>:
      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
 810a84e:	b480      	push	{r7}
 810a850:	b083      	sub	sp, #12
 810a852:	af00      	add	r7, sp, #0
 810a854:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 810a856:	687b      	ldr	r3, [r7, #4]
 810a858:	4618      	mov	r0, r3
 810a85a:	370c      	adds	r7, #12
 810a85c:	46bd      	mov	sp, r7
 810a85e:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a862:	4770      	bx	lr

0810a864 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEEE7destroyIS7_EEvRS9_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 810a864:	b580      	push	{r7, lr}
 810a866:	b082      	sub	sp, #8
 810a868:	af00      	add	r7, sp, #0
 810a86a:	6078      	str	r0, [r7, #4]
 810a86c:	6039      	str	r1, [r7, #0]
	  std::destroy_at(__p);
 810a86e:	6838      	ldr	r0, [r7, #0]
 810a870:	f000 f99c 	bl	810abac <_ZSt10destroy_atISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEvPT_>
	}
 810a874:	bf00      	nop
 810a876:	3708      	adds	r7, #8
 810a878:	46bd      	mov	sp, r7
 810a87a:	bd80      	pop	{r7, pc}

0810a87c <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEEE10deallocateERS9_PS8_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 810a87c:	b580      	push	{r7, lr}
 810a87e:	b088      	sub	sp, #32
 810a880:	af00      	add	r7, sp, #0
 810a882:	60f8      	str	r0, [r7, #12]
 810a884:	60b9      	str	r1, [r7, #8]
 810a886:	607a      	str	r2, [r7, #4]
 810a888:	68fb      	ldr	r3, [r7, #12]
 810a88a:	61fb      	str	r3, [r7, #28]
 810a88c:	68bb      	ldr	r3, [r7, #8]
 810a88e:	61bb      	str	r3, [r7, #24]
 810a890:	687b      	ldr	r3, [r7, #4]
 810a892:	617b      	str	r3, [r7, #20]
	if (std::__is_constant_evaluated())
 810a894:	f7fa f9ae 	bl	8104bf4 <_ZSt23__is_constant_evaluatedv>
 810a898:	4603      	mov	r3, r0
 810a89a:	2b00      	cmp	r3, #0
 810a89c:	d003      	beq.n	810a8a6 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEEE10deallocateERS9_PS8_j+0x2a>
	    ::operator delete(__p);
 810a89e:	69b8      	ldr	r0, [r7, #24]
 810a8a0:	f01b f870 	bl	8125984 <_ZdlPv>
	    return;
 810a8a4:	e005      	b.n	810a8b2 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEEE10deallocateERS9_PS8_j+0x36>
	__allocator_base<_Tp>::deallocate(__p, __n);
 810a8a6:	697a      	ldr	r2, [r7, #20]
 810a8a8:	69b9      	ldr	r1, [r7, #24]
 810a8aa:	69f8      	ldr	r0, [r7, #28]
 810a8ac:	f000 fa85 	bl	810adba <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEE10deallocateEPS8_j>
      { __a.deallocate(__p, __n); }
 810a8b0:	bf00      	nop
 810a8b2:	bf00      	nop
 810a8b4:	3720      	adds	r7, #32
 810a8b6:	46bd      	mov	sp, r7
 810a8b8:	bd80      	pop	{r7, pc}

0810a8ba <_ZN9__gnu_cxx16__aligned_membufISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEE7_M_addrEv>:
      _M_addr() noexcept
 810a8ba:	b480      	push	{r7}
 810a8bc:	b083      	sub	sp, #12
 810a8be:	af00      	add	r7, sp, #0
 810a8c0:	6078      	str	r0, [r7, #4]
      { return static_cast<void*>(&_M_storage); }
 810a8c2:	687b      	ldr	r3, [r7, #4]
 810a8c4:	4618      	mov	r0, r3
 810a8c6:	370c      	adds	r7, #12
 810a8c8:	46bd      	mov	sp, r7
 810a8ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a8ce:	4770      	bx	lr

0810a8d0 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_get_nodeEv>:
      _M_get_node()
 810a8d0:	b580      	push	{r7, lr}
 810a8d2:	b082      	sub	sp, #8
 810a8d4:	af00      	add	r7, sp, #0
 810a8d6:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::allocate(_M_get_Node_allocator(), 1); }
 810a8d8:	6878      	ldr	r0, [r7, #4]
 810a8da:	f7ff ffb8 	bl	810a84e <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>
 810a8de:	4603      	mov	r3, r0
 810a8e0:	2101      	movs	r1, #1
 810a8e2:	4618      	mov	r0, r3
 810a8e4:	f000 f96c 	bl	810abc0 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEEE8allocateERS9_j>
 810a8e8:	4603      	mov	r3, r0
 810a8ea:	4618      	mov	r0, r3
 810a8ec:	3708      	adds	r7, #8
 810a8ee:	46bd      	mov	sp, r7
 810a8f0:	bd80      	pop	{r7, pc}

0810a8f2 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE17_M_construct_nodeIJRS1_RS5_EEEvPSt13_Rb_tree_nodeIS6_EDpOT_>:
	_M_construct_node(_Link_type __node, _Args&&... __args)
 810a8f2:	b5f0      	push	{r4, r5, r6, r7, lr}
 810a8f4:	b085      	sub	sp, #20
 810a8f6:	af00      	add	r7, sp, #0
 810a8f8:	60f8      	str	r0, [r7, #12]
 810a8fa:	60b9      	str	r1, [r7, #8]
 810a8fc:	607a      	str	r2, [r7, #4]
 810a8fe:	603b      	str	r3, [r7, #0]
	      ::new(__node) _Rb_tree_node<_Val>;
 810a900:	68bb      	ldr	r3, [r7, #8]
 810a902:	4619      	mov	r1, r3
 810a904:	2018      	movs	r0, #24
 810a906:	f7f6 fd01 	bl	810130c <_ZnwjPv>
	      _Alloc_traits::construct(_M_get_Node_allocator(),
 810a90a:	68f8      	ldr	r0, [r7, #12]
 810a90c:	f7ff ff9f 	bl	810a84e <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>
 810a910:	4604      	mov	r4, r0
 810a912:	68b8      	ldr	r0, [r7, #8]
 810a914:	f7ff f920 	bl	8109b58 <_ZNSt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEE9_M_valptrEv>
 810a918:	4605      	mov	r5, r0
 810a91a:	6878      	ldr	r0, [r7, #4]
 810a91c:	f7fe fdd7 	bl	81094ce <_ZSt7forwardIRN19EventManagerCM4Task11EEventQueueEEOT_RNSt16remove_referenceIS3_E4typeE>
 810a920:	4606      	mov	r6, r0
 810a922:	6838      	ldr	r0, [r7, #0]
 810a924:	f7fe fdde 	bl	81094e4 <_ZSt7forwardIRP15QueueDefinitionEOT_RNSt16remove_referenceIS3_E4typeE>
 810a928:	4603      	mov	r3, r0
 810a92a:	4632      	mov	r2, r6
 810a92c:	4629      	mov	r1, r5
 810a92e:	4620      	mov	r0, r4
 810a930:	f000 f97e 	bl	810ac30 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEEE9constructIS7_JRS3_RS6_EEEvRS9_PT_DpOT0_>
	}
 810a934:	bf00      	nop
 810a936:	3714      	adds	r7, #20
 810a938:	46bd      	mov	sp, r7
 810a93a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0810a93c <_ZNKSt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEE9_M_valptrEv>:
      _M_valptr() const
 810a93c:	b580      	push	{r7, lr}
 810a93e:	b082      	sub	sp, #8
 810a940:	af00      	add	r7, sp, #0
 810a942:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 810a944:	687b      	ldr	r3, [r7, #4]
 810a946:	3310      	adds	r3, #16
 810a948:	4618      	mov	r0, r3
 810a94a:	f000 f989 	bl	810ac60 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEE6_M_ptrEv>
 810a94e:	4603      	mov	r3, r0
 810a950:	4618      	mov	r0, r3
 810a952:	3708      	adds	r7, #8
 810a954:	46bd      	mov	sp, r7
 810a956:	bd80      	pop	{r7, pc}

0810a958 <_ZNKSt10_Select1stISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEclERKS6_>:
      typename _Pair::first_type&
      operator()(_Pair& __x) const
      { return __x.first; }

      const typename _Pair::first_type&
      operator()(const _Pair& __x) const
 810a958:	b480      	push	{r7}
 810a95a:	b083      	sub	sp, #12
 810a95c:	af00      	add	r7, sp, #0
 810a95e:	6078      	str	r0, [r7, #4]
 810a960:	6039      	str	r1, [r7, #0]
      { return __x.first; }
 810a962:	683b      	ldr	r3, [r7, #0]
 810a964:	4618      	mov	r0, r3
 810a966:	370c      	adds	r7, #12
 810a968:	46bd      	mov	sp, r7
 810a96a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a96e:	4770      	bx	lr

0810a970 <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEEOT_RNSt16remove_referenceISB_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 810a970:	b480      	push	{r7}
 810a972:	b083      	sub	sp, #12
 810a974:	af00      	add	r7, sp, #0
 810a976:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 810a978:	687b      	ldr	r3, [r7, #4]
 810a97a:	4618      	mov	r0, r3
 810a97c:	370c      	adds	r7, #12
 810a97e:	46bd      	mov	sp, r7
 810a980:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a984:	4770      	bx	lr

0810a986 <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 810a986:	b480      	push	{r7}
 810a988:	b083      	sub	sp, #12
 810a98a:	af00      	add	r7, sp, #0
 810a98c:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 810a98e:	687b      	ldr	r3, [r7, #4]
 810a990:	4618      	mov	r0, r3
 810a992:	370c      	adds	r7, #12
 810a994:	46bd      	mov	sp, r7
 810a996:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a99a:	4770      	bx	lr

0810a99c <_ZSt11__addressofI8SMessageEPT_RS1_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 810a99c:	b480      	push	{r7}
 810a99e:	b083      	sub	sp, #12
 810a9a0:	af00      	add	r7, sp, #0
 810a9a2:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 810a9a4:	687b      	ldr	r3, [r7, #4]
 810a9a6:	4618      	mov	r0, r3
 810a9a8:	370c      	adds	r7, #12
 810a9aa:	46bd      	mov	sp, r7
 810a9ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a9b0:	4770      	bx	lr

0810a9b2 <_ZSt8_DestroyI8SMessageEvPT_>:
    _Destroy(_Tp* __pointer)
 810a9b2:	b580      	push	{r7, lr}
 810a9b4:	b082      	sub	sp, #8
 810a9b6:	af00      	add	r7, sp, #0
 810a9b8:	6078      	str	r0, [r7, #4]
      std::destroy_at(__pointer);
 810a9ba:	6878      	ldr	r0, [r7, #4]
 810a9bc:	f7ff fe82 	bl	810a6c4 <_ZSt10destroy_atI8SMessageEvPT_>
    }
 810a9c0:	bf00      	nop
 810a9c2:	3708      	adds	r7, #8
 810a9c4:	46bd      	mov	sp, r7
 810a9c6:	bd80      	pop	{r7, pc}

0810a9c8 <_ZNSt15__new_allocatorI8SMessageE10deallocateEPS0_j>:
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
 810a9c8:	b580      	push	{r7, lr}
 810a9ca:	b084      	sub	sp, #16
 810a9cc:	af00      	add	r7, sp, #0
 810a9ce:	60f8      	str	r0, [r7, #12]
 810a9d0:	60b9      	str	r1, [r7, #8]
 810a9d2:	607a      	str	r2, [r7, #4]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 810a9d4:	687a      	ldr	r2, [r7, #4]
 810a9d6:	4613      	mov	r3, r2
 810a9d8:	00db      	lsls	r3, r3, #3
 810a9da:	1a9b      	subs	r3, r3, r2
 810a9dc:	009b      	lsls	r3, r3, #2
 810a9de:	4619      	mov	r1, r3
 810a9e0:	68b8      	ldr	r0, [r7, #8]
 810a9e2:	f01a ffd1 	bl	8125988 <_ZdlPvj>
      }
 810a9e6:	3710      	adds	r7, #16
 810a9e8:	46bd      	mov	sp, r7
 810a9ea:	bd80      	pop	{r7, pc}

0810a9ec <_ZSt3minIjERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 810a9ec:	b480      	push	{r7}
 810a9ee:	b083      	sub	sp, #12
 810a9f0:	af00      	add	r7, sp, #0
 810a9f2:	6078      	str	r0, [r7, #4]
 810a9f4:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 810a9f6:	683b      	ldr	r3, [r7, #0]
 810a9f8:	681a      	ldr	r2, [r3, #0]
 810a9fa:	687b      	ldr	r3, [r7, #4]
 810a9fc:	681b      	ldr	r3, [r3, #0]
 810a9fe:	429a      	cmp	r2, r3
 810aa00:	d201      	bcs.n	810aa06 <_ZSt3minIjERKT_S2_S2_+0x1a>
	return __b;
 810aa02:	683b      	ldr	r3, [r7, #0]
 810aa04:	e000      	b.n	810aa08 <_ZSt3minIjERKT_S2_S2_+0x1c>
      return __a;
 810aa06:	687b      	ldr	r3, [r7, #4]
    }
 810aa08:	4618      	mov	r0, r3
 810aa0a:	370c      	adds	r7, #12
 810aa0c:	46bd      	mov	sp, r7
 810aa0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 810aa12:	4770      	bx	lr

0810aa14 <_ZSt12__niter_baseIP8SMessageET_S2_>:
  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the __normal_iterator wrapper. See copy, fill, ...
  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __niter_base(_Iterator __it)
 810aa14:	b480      	push	{r7}
 810aa16:	b083      	sub	sp, #12
 810aa18:	af00      	add	r7, sp, #0
 810aa1a:	6078      	str	r0, [r7, #4]
    _GLIBCXX_NOEXCEPT_IF(std::is_nothrow_copy_constructible<_Iterator>::value)
    { return __it; }
 810aa1c:	687b      	ldr	r3, [r7, #4]
 810aa1e:	4618      	mov	r0, r3
 810aa20:	370c      	adds	r7, #12
 810aa22:	46bd      	mov	sp, r7
 810aa24:	f85d 7b04 	ldr.w	r7, [sp], #4
 810aa28:	4770      	bx	lr

0810aa2a <_ZN9__gnu_cxx17__normal_iteratorIP8SMessagevEC1ERKS2_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 810aa2a:	b480      	push	{r7}
 810aa2c:	b083      	sub	sp, #12
 810aa2e:	af00      	add	r7, sp, #0
 810aa30:	6078      	str	r0, [r7, #4]
 810aa32:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 810aa34:	683b      	ldr	r3, [r7, #0]
 810aa36:	681a      	ldr	r2, [r3, #0]
 810aa38:	687b      	ldr	r3, [r7, #4]
 810aa3a:	601a      	str	r2, [r3, #0]
 810aa3c:	687b      	ldr	r3, [r7, #4]
 810aa3e:	4618      	mov	r0, r3
 810aa40:	370c      	adds	r7, #12
 810aa42:	46bd      	mov	sp, r7
 810aa44:	f85d 7b04 	ldr.w	r7, [sp], #4
 810aa48:	4770      	bx	lr
	...

0810aa4c <_ZSt14__relocate_a_1I8SMessageS0_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS3_E4typeES5_S5_S5_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
 810aa4c:	b580      	push	{r7, lr}
 810aa4e:	b086      	sub	sp, #24
 810aa50:	af00      	add	r7, sp, #0
 810aa52:	60f8      	str	r0, [r7, #12]
 810aa54:	60b9      	str	r1, [r7, #8]
 810aa56:	607a      	str	r2, [r7, #4]
 810aa58:	603b      	str	r3, [r7, #0]
      ptrdiff_t __count = __last - __first;
 810aa5a:	68ba      	ldr	r2, [r7, #8]
 810aa5c:	68fb      	ldr	r3, [r7, #12]
 810aa5e:	1ad3      	subs	r3, r2, r3
 810aa60:	109b      	asrs	r3, r3, #2
 810aa62:	4a1c      	ldr	r2, [pc, #112]	@ (810aad4 <_ZSt14__relocate_a_1I8SMessageS0_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS3_E4typeES5_S5_S5_RSaIT0_E+0x88>)
 810aa64:	fb02 f303 	mul.w	r3, r2, r3
 810aa68:	617b      	str	r3, [r7, #20]
      if (__count > 0)
 810aa6a:	697b      	ldr	r3, [r7, #20]
 810aa6c:	2b00      	cmp	r3, #0
 810aa6e:	dd25      	ble.n	810aabc <_ZSt14__relocate_a_1I8SMessageS0_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS3_E4typeES5_S5_S5_RSaIT0_E+0x70>
	  if (std::is_constant_evaluated())
 810aa70:	f7fe f8cf 	bl	8108c12 <_ZSt21is_constant_evaluatedv>
 810aa74:	4603      	mov	r3, r0
 810aa76:	2b00      	cmp	r3, #0
 810aa78:	d016      	beq.n	810aaa8 <_ZSt14__relocate_a_1I8SMessageS0_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS3_E4typeES5_S5_S5_RSaIT0_E+0x5c>
	      __gnu_cxx::__normal_iterator<_Tp*, void> __out(__result);
 810aa7a:	1d3a      	adds	r2, r7, #4
 810aa7c:	f107 0310 	add.w	r3, r7, #16
 810aa80:	4611      	mov	r1, r2
 810aa82:	4618      	mov	r0, r3
 810aa84:	f7ff ffd1 	bl	810aa2a <_ZN9__gnu_cxx17__normal_iteratorIP8SMessagevEC1ERKS2_>
	      __out = std::__relocate_a_1(__first, __last, __out, __alloc);
 810aa88:	683b      	ldr	r3, [r7, #0]
 810aa8a:	693a      	ldr	r2, [r7, #16]
 810aa8c:	68b9      	ldr	r1, [r7, #8]
 810aa8e:	68f8      	ldr	r0, [r7, #12]
 810aa90:	f000 f922 	bl	810acd8 <_ZSt14__relocate_a_1IP8SMessageN9__gnu_cxx17__normal_iteratorIS1_vEESaIS0_EET0_T_S7_S6_RT1_>
 810aa94:	4603      	mov	r3, r0
 810aa96:	613b      	str	r3, [r7, #16]
	      return __out.base();
 810aa98:	f107 0310 	add.w	r3, r7, #16
 810aa9c:	4618      	mov	r0, r3
 810aa9e:	f000 f949 	bl	810ad34 <_ZNK9__gnu_cxx17__normal_iteratorIP8SMessagevE4baseEv>
 810aaa2:	4603      	mov	r3, r0
 810aaa4:	681b      	ldr	r3, [r3, #0]
 810aaa6:	e010      	b.n	810aaca <_ZSt14__relocate_a_1I8SMessageS0_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS3_E4typeES5_S5_S5_RSaIT0_E+0x7e>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 810aaa8:	6878      	ldr	r0, [r7, #4]
 810aaaa:	697a      	ldr	r2, [r7, #20]
 810aaac:	4613      	mov	r3, r2
 810aaae:	00db      	lsls	r3, r3, #3
 810aab0:	1a9b      	subs	r3, r3, r2
 810aab2:	009b      	lsls	r3, r3, #2
 810aab4:	461a      	mov	r2, r3
 810aab6:	68f9      	ldr	r1, [r7, #12]
 810aab8:	f01c f8d6 	bl	8126c68 <memmove>
      return __result + __count;
 810aabc:	6879      	ldr	r1, [r7, #4]
 810aabe:	697a      	ldr	r2, [r7, #20]
 810aac0:	4613      	mov	r3, r2
 810aac2:	00db      	lsls	r3, r3, #3
 810aac4:	1a9b      	subs	r3, r3, r2
 810aac6:	009b      	lsls	r3, r3, #2
 810aac8:	440b      	add	r3, r1
    }
 810aaca:	4618      	mov	r0, r3
 810aacc:	3718      	adds	r7, #24
 810aace:	46bd      	mov	sp, r7
 810aad0:	bd80      	pop	{r7, pc}
 810aad2:	bf00      	nop
 810aad4:	b6db6db7 	.word	0xb6db6db7

0810aad8 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEEvPSt13_Rb_tree_nodeIS6_EDpOT_>:
	_M_construct_node(_Link_type __node, _Args&&... __args)
 810aad8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810aadc:	b086      	sub	sp, #24
 810aade:	af02      	add	r7, sp, #8
 810aae0:	60f8      	str	r0, [r7, #12]
 810aae2:	60b9      	str	r1, [r7, #8]
 810aae4:	607a      	str	r2, [r7, #4]
 810aae6:	603b      	str	r3, [r7, #0]
	      ::new(__node) _Rb_tree_node<_Val>;
 810aae8:	68bb      	ldr	r3, [r7, #8]
 810aaea:	4619      	mov	r1, r3
 810aaec:	2018      	movs	r0, #24
 810aaee:	f7f6 fc0d 	bl	810130c <_ZnwjPv>
	      _Alloc_traits::construct(_M_get_Node_allocator(),
 810aaf2:	68f8      	ldr	r0, [r7, #12]
 810aaf4:	f7ff feab 	bl	810a84e <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>
 810aaf8:	4604      	mov	r4, r0
 810aafa:	68b8      	ldr	r0, [r7, #8]
 810aafc:	f7ff f82c 	bl	8109b58 <_ZNSt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEE9_M_valptrEv>
 810ab00:	4605      	mov	r5, r0
 810ab02:	6878      	ldr	r0, [r7, #4]
 810ab04:	f7ff fa8e 	bl	810a024 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 810ab08:	4606      	mov	r6, r0
 810ab0a:	6838      	ldr	r0, [r7, #0]
 810ab0c:	f7ff fa95 	bl	810a03a <_ZSt7forwardISt5tupleIJRKN19EventManagerCM4Task11EEventQueueEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 810ab10:	4680      	mov	r8, r0
 810ab12:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 810ab14:	f7ff fa9c 	bl	810a050 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 810ab18:	4603      	mov	r3, r0
 810ab1a:	9300      	str	r3, [sp, #0]
 810ab1c:	4643      	mov	r3, r8
 810ab1e:	4632      	mov	r2, r6
 810ab20:	4629      	mov	r1, r5
 810ab22:	4620      	mov	r0, r4
 810ab24:	f000 f911 	bl	810ad4a <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEEE9constructIS7_JRKSt21piecewise_construct_tSt5tupleIJRS4_EESF_IJEEEEEvRS9_PT_DpOT0_>
	}
 810ab28:	bf00      	nop
 810ab2a:	3710      	adds	r7, #16
 810ab2c:	46bd      	mov	sp, r7
 810ab2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0810ab32 <_ZNSt10_Head_baseILj0EON19EventManagerCM4Task11EEventQueueELb0EEC1IS1_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 810ab32:	b580      	push	{r7, lr}
 810ab34:	b082      	sub	sp, #8
 810ab36:	af00      	add	r7, sp, #0
 810ab38:	6078      	str	r0, [r7, #4]
 810ab3a:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 810ab3c:	6838      	ldr	r0, [r7, #0]
 810ab3e:	f7ff fbd8 	bl	810a2f2 <_ZSt7forwardIN19EventManagerCM4Task11EEventQueueEEOT_RNSt16remove_referenceIS2_E4typeE>
 810ab42:	4602      	mov	r2, r0
 810ab44:	687b      	ldr	r3, [r7, #4]
 810ab46:	601a      	str	r2, [r3, #0]
 810ab48:	687b      	ldr	r3, [r7, #4]
 810ab4a:	4618      	mov	r0, r3
 810ab4c:	3708      	adds	r7, #8
 810ab4e:	46bd      	mov	sp, r7
 810ab50:	bd80      	pop	{r7, pc}

0810ab52 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJOS1_EESH_IJEEEEEvPSt13_Rb_tree_nodeIS6_EDpOT_>:
	_M_construct_node(_Link_type __node, _Args&&... __args)
 810ab52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810ab56:	b086      	sub	sp, #24
 810ab58:	af02      	add	r7, sp, #8
 810ab5a:	60f8      	str	r0, [r7, #12]
 810ab5c:	60b9      	str	r1, [r7, #8]
 810ab5e:	607a      	str	r2, [r7, #4]
 810ab60:	603b      	str	r3, [r7, #0]
	      ::new(__node) _Rb_tree_node<_Val>;
 810ab62:	68bb      	ldr	r3, [r7, #8]
 810ab64:	4619      	mov	r1, r3
 810ab66:	2018      	movs	r0, #24
 810ab68:	f7f6 fbd0 	bl	810130c <_ZnwjPv>
	      _Alloc_traits::construct(_M_get_Node_allocator(),
 810ab6c:	68f8      	ldr	r0, [r7, #12]
 810ab6e:	f7ff fe6e 	bl	810a84e <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>
 810ab72:	4604      	mov	r4, r0
 810ab74:	68b8      	ldr	r0, [r7, #8]
 810ab76:	f7fe ffef 	bl	8109b58 <_ZNSt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEE9_M_valptrEv>
 810ab7a:	4605      	mov	r5, r0
 810ab7c:	6878      	ldr	r0, [r7, #4]
 810ab7e:	f7ff fa51 	bl	810a024 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 810ab82:	4606      	mov	r6, r0
 810ab84:	6838      	ldr	r0, [r7, #0]
 810ab86:	f7ff fbd2 	bl	810a32e <_ZSt7forwardISt5tupleIJON19EventManagerCM4Task11EEventQueueEEEEOT_RNSt16remove_referenceIS5_E4typeE>
 810ab8a:	4680      	mov	r8, r0
 810ab8c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 810ab8e:	f7ff fa5f 	bl	810a050 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 810ab92:	4603      	mov	r3, r0
 810ab94:	9300      	str	r3, [sp, #0]
 810ab96:	4643      	mov	r3, r8
 810ab98:	4632      	mov	r2, r6
 810ab9a:	4629      	mov	r1, r5
 810ab9c:	4620      	mov	r0, r4
 810ab9e:	f000 f8f0 	bl	810ad82 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEEE9constructIS7_JRKSt21piecewise_construct_tSt5tupleIJOS3_EESF_IJEEEEEvRS9_PT_DpOT0_>
	}
 810aba2:	bf00      	nop
 810aba4:	3710      	adds	r7, #16
 810aba6:	46bd      	mov	sp, r7
 810aba8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0810abac <_ZSt10destroy_atISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEvPT_>:
    destroy_at(_Tp* __location)
 810abac:	b480      	push	{r7}
 810abae:	b083      	sub	sp, #12
 810abb0:	af00      	add	r7, sp, #0
 810abb2:	6078      	str	r0, [r7, #4]
    }
 810abb4:	bf00      	nop
 810abb6:	370c      	adds	r7, #12
 810abb8:	46bd      	mov	sp, r7
 810abba:	f85d 7b04 	ldr.w	r7, [sp], #4
 810abbe:	4770      	bx	lr

0810abc0 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEEE8allocateERS9_j>:
      allocate(allocator_type& __a, size_type __n)
 810abc0:	b5b0      	push	{r4, r5, r7, lr}
 810abc2:	b084      	sub	sp, #16
 810abc4:	af00      	add	r7, sp, #0
 810abc6:	6078      	str	r0, [r7, #4]
 810abc8:	6039      	str	r1, [r7, #0]
 810abca:	687b      	ldr	r3, [r7, #4]
 810abcc:	60fb      	str	r3, [r7, #12]
 810abce:	683b      	ldr	r3, [r7, #0]
 810abd0:	60bb      	str	r3, [r7, #8]
	if (std::__is_constant_evaluated())
 810abd2:	f7fa f80f 	bl	8104bf4 <_ZSt23__is_constant_evaluatedv>
 810abd6:	4603      	mov	r3, r0
 810abd8:	2b00      	cmp	r3, #0
 810abda:	d01d      	beq.n	810ac18 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEEE8allocateERS9_j+0x58>
	    if (__builtin_mul_overflow(__n, sizeof(_Tp), &__n))
 810abdc:	68bb      	ldr	r3, [r7, #8]
 810abde:	2100      	movs	r1, #0
 810abe0:	2218      	movs	r2, #24
 810abe2:	fba3 4502 	umull	r4, r5, r3, r2
 810abe6:	f04f 0200 	mov.w	r2, #0
 810abea:	f04f 0300 	mov.w	r3, #0
 810abee:	002a      	movs	r2, r5
 810abf0:	2300      	movs	r3, #0
 810abf2:	2a00      	cmp	r2, #0
 810abf4:	d000      	beq.n	810abf8 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEEE8allocateERS9_j+0x38>
 810abf6:	2101      	movs	r1, #1
 810abf8:	4623      	mov	r3, r4
 810abfa:	60bb      	str	r3, [r7, #8]
 810abfc:	460b      	mov	r3, r1
 810abfe:	f003 0301 	and.w	r3, r3, #1
 810ac02:	b2db      	uxtb	r3, r3
 810ac04:	2b00      	cmp	r3, #0
 810ac06:	d001      	beq.n	810ac0c <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEEE8allocateERS9_j+0x4c>
	      std::__throw_bad_array_new_length();
 810ac08:	f01a ffa0 	bl	8125b4c <_ZSt28__throw_bad_array_new_lengthv>
	    return static_cast<_Tp*>(::operator new(__n));
 810ac0c:	68bb      	ldr	r3, [r7, #8]
 810ac0e:	4618      	mov	r0, r3
 810ac10:	f01a fecb 	bl	81259aa <_Znwj>
 810ac14:	4603      	mov	r3, r0
 810ac16:	e007      	b.n	810ac28 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEEE8allocateERS9_j+0x68>
	return __allocator_base<_Tp>::allocate(__n, 0);
 810ac18:	68bb      	ldr	r3, [r7, #8]
 810ac1a:	2200      	movs	r2, #0
 810ac1c:	4619      	mov	r1, r3
 810ac1e:	68f8      	ldr	r0, [r7, #12]
 810ac20:	f000 f9be 	bl	810afa0 <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEE8allocateEjPKv>
 810ac24:	4603      	mov	r3, r0
 810ac26:	bf00      	nop
      { return __a.allocate(__n); }
 810ac28:	4618      	mov	r0, r3
 810ac2a:	3710      	adds	r7, #16
 810ac2c:	46bd      	mov	sp, r7
 810ac2e:	bdb0      	pop	{r4, r5, r7, pc}

0810ac30 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEEE9constructIS7_JRS3_RS6_EEEvRS9_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 810ac30:	b590      	push	{r4, r7, lr}
 810ac32:	b085      	sub	sp, #20
 810ac34:	af00      	add	r7, sp, #0
 810ac36:	60f8      	str	r0, [r7, #12]
 810ac38:	60b9      	str	r1, [r7, #8]
 810ac3a:	607a      	str	r2, [r7, #4]
 810ac3c:	603b      	str	r3, [r7, #0]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 810ac3e:	6878      	ldr	r0, [r7, #4]
 810ac40:	f7fe fc45 	bl	81094ce <_ZSt7forwardIRN19EventManagerCM4Task11EEventQueueEEOT_RNSt16remove_referenceIS3_E4typeE>
 810ac44:	4604      	mov	r4, r0
 810ac46:	6838      	ldr	r0, [r7, #0]
 810ac48:	f7fe fc4c 	bl	81094e4 <_ZSt7forwardIRP15QueueDefinitionEOT_RNSt16remove_referenceIS3_E4typeE>
 810ac4c:	4603      	mov	r3, r0
 810ac4e:	461a      	mov	r2, r3
 810ac50:	4621      	mov	r1, r4
 810ac52:	68b8      	ldr	r0, [r7, #8]
 810ac54:	f000 f8c3 	bl	810adde <_ZSt12construct_atISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEJRS2_RS5_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPSA_DpOSB_>
	}
 810ac58:	bf00      	nop
 810ac5a:	3714      	adds	r7, #20
 810ac5c:	46bd      	mov	sp, r7
 810ac5e:	bd90      	pop	{r4, r7, pc}

0810ac60 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEE6_M_ptrEv>:
      _M_ptr() const noexcept
 810ac60:	b580      	push	{r7, lr}
 810ac62:	b082      	sub	sp, #8
 810ac64:	af00      	add	r7, sp, #0
 810ac66:	6078      	str	r0, [r7, #4]
      { return static_cast<const _Tp*>(_M_addr()); }
 810ac68:	6878      	ldr	r0, [r7, #4]
 810ac6a:	f000 f8d6 	bl	810ae1a <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEE7_M_addrEv>
 810ac6e:	4603      	mov	r3, r0
 810ac70:	4618      	mov	r0, r3
 810ac72:	3708      	adds	r7, #8
 810ac74:	46bd      	mov	sp, r7
 810ac76:	bd80      	pop	{r7, pc}

0810ac78 <_ZNSt15__new_allocatorI8SMessageE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 810ac78:	b580      	push	{r7, lr}
 810ac7a:	b084      	sub	sp, #16
 810ac7c:	af00      	add	r7, sp, #0
 810ac7e:	60f8      	str	r0, [r7, #12]
 810ac80:	60b9      	str	r1, [r7, #8]
 810ac82:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 810ac84:	68f8      	ldr	r0, [r7, #12]
 810ac86:	f000 f8d3 	bl	810ae30 <_ZNKSt15__new_allocatorI8SMessageE11_M_max_sizeEv>
 810ac8a:	4602      	mov	r2, r0
 810ac8c:	68bb      	ldr	r3, [r7, #8]
 810ac8e:	4293      	cmp	r3, r2
 810ac90:	bf8c      	ite	hi
 810ac92:	2301      	movhi	r3, #1
 810ac94:	2300      	movls	r3, #0
 810ac96:	b2db      	uxtb	r3, r3
 810ac98:	2b00      	cmp	r3, #0
 810ac9a:	bf14      	ite	ne
 810ac9c:	2301      	movne	r3, #1
 810ac9e:	2300      	moveq	r3, #0
 810aca0:	b2db      	uxtb	r3, r3
 810aca2:	2b00      	cmp	r3, #0
 810aca4:	d007      	beq.n	810acb6 <_ZNSt15__new_allocatorI8SMessageE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 810aca6:	68bb      	ldr	r3, [r7, #8]
 810aca8:	4a0a      	ldr	r2, [pc, #40]	@ (810acd4 <_ZNSt15__new_allocatorI8SMessageE8allocateEjPKv+0x5c>)
 810acaa:	4293      	cmp	r3, r2
 810acac:	d901      	bls.n	810acb2 <_ZNSt15__new_allocatorI8SMessageE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 810acae:	f01a ff4d 	bl	8125b4c <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 810acb2:	f01a ff48 	bl	8125b46 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 810acb6:	68ba      	ldr	r2, [r7, #8]
 810acb8:	4613      	mov	r3, r2
 810acba:	00db      	lsls	r3, r3, #3
 810acbc:	1a9b      	subs	r3, r3, r2
 810acbe:	009b      	lsls	r3, r3, #2
 810acc0:	4618      	mov	r0, r3
 810acc2:	f01a fe72 	bl	81259aa <_Znwj>
 810acc6:	4603      	mov	r3, r0
 810acc8:	bf00      	nop
      }
 810acca:	4618      	mov	r0, r3
 810accc:	3710      	adds	r7, #16
 810acce:	46bd      	mov	sp, r7
 810acd0:	bd80      	pop	{r7, pc}
 810acd2:	bf00      	nop
 810acd4:	09249249 	.word	0x09249249

0810acd8 <_ZSt14__relocate_a_1IP8SMessageN9__gnu_cxx17__normal_iteratorIS1_vEESaIS0_EET0_T_S7_S6_RT1_>:
    __relocate_a_1(_InputIterator __first, _InputIterator __last,
 810acd8:	b590      	push	{r4, r7, lr}
 810acda:	b087      	sub	sp, #28
 810acdc:	af00      	add	r7, sp, #0
 810acde:	60f8      	str	r0, [r7, #12]
 810ace0:	60b9      	str	r1, [r7, #8]
 810ace2:	607a      	str	r2, [r7, #4]
 810ace4:	603b      	str	r3, [r7, #0]
      _ForwardIterator __cur = __result;
 810ace6:	687b      	ldr	r3, [r7, #4]
 810ace8:	617b      	str	r3, [r7, #20]
      for (; __first != __last; ++__first, (void)++__cur)
 810acea:	e01a      	b.n	810ad22 <_ZSt14__relocate_a_1IP8SMessageN9__gnu_cxx17__normal_iteratorIS1_vEESaIS0_EET0_T_S7_S6_RT1_+0x4a>
	std::__relocate_object_a(std::__addressof(*__cur),
 810acec:	f107 0314 	add.w	r3, r7, #20
 810acf0:	4618      	mov	r0, r3
 810acf2:	f000 f8bc 	bl	810ae6e <_ZNK9__gnu_cxx17__normal_iteratorIP8SMessagevEdeEv>
 810acf6:	4603      	mov	r3, r0
 810acf8:	4618      	mov	r0, r3
 810acfa:	f7ff fe4f 	bl	810a99c <_ZSt11__addressofI8SMessageEPT_RS1_>
 810acfe:	4604      	mov	r4, r0
 810ad00:	68f8      	ldr	r0, [r7, #12]
 810ad02:	f7ff fe4b 	bl	810a99c <_ZSt11__addressofI8SMessageEPT_RS1_>
 810ad06:	4603      	mov	r3, r0
 810ad08:	683a      	ldr	r2, [r7, #0]
 810ad0a:	4619      	mov	r1, r3
 810ad0c:	4620      	mov	r0, r4
 810ad0e:	f000 f8ba 	bl	810ae86 <_ZSt19__relocate_object_aI8SMessageS0_SaIS0_EEvPT_PT0_RT1_>
      for (; __first != __last; ++__first, (void)++__cur)
 810ad12:	68fb      	ldr	r3, [r7, #12]
 810ad14:	331c      	adds	r3, #28
 810ad16:	60fb      	str	r3, [r7, #12]
 810ad18:	f107 0314 	add.w	r3, r7, #20
 810ad1c:	4618      	mov	r0, r3
 810ad1e:	f000 f895 	bl	810ae4c <_ZN9__gnu_cxx17__normal_iteratorIP8SMessagevEppEv>
 810ad22:	68fa      	ldr	r2, [r7, #12]
 810ad24:	68bb      	ldr	r3, [r7, #8]
 810ad26:	429a      	cmp	r2, r3
 810ad28:	d1e0      	bne.n	810acec <_ZSt14__relocate_a_1IP8SMessageN9__gnu_cxx17__normal_iteratorIS1_vEESaIS0_EET0_T_S7_S6_RT1_+0x14>
      return __cur;
 810ad2a:	697b      	ldr	r3, [r7, #20]
    }
 810ad2c:	4618      	mov	r0, r3
 810ad2e:	371c      	adds	r7, #28
 810ad30:	46bd      	mov	sp, r7
 810ad32:	bd90      	pop	{r4, r7, pc}

0810ad34 <_ZNK9__gnu_cxx17__normal_iteratorIP8SMessagevE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 810ad34:	b480      	push	{r7}
 810ad36:	b083      	sub	sp, #12
 810ad38:	af00      	add	r7, sp, #0
 810ad3a:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 810ad3c:	687b      	ldr	r3, [r7, #4]
 810ad3e:	4618      	mov	r0, r3
 810ad40:	370c      	adds	r7, #12
 810ad42:	46bd      	mov	sp, r7
 810ad44:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ad48:	4770      	bx	lr

0810ad4a <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEEE9constructIS7_JRKSt21piecewise_construct_tSt5tupleIJRS4_EESF_IJEEEEEvRS9_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 810ad4a:	b5b0      	push	{r4, r5, r7, lr}
 810ad4c:	b084      	sub	sp, #16
 810ad4e:	af00      	add	r7, sp, #0
 810ad50:	60f8      	str	r0, [r7, #12]
 810ad52:	60b9      	str	r1, [r7, #8]
 810ad54:	607a      	str	r2, [r7, #4]
 810ad56:	603b      	str	r3, [r7, #0]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 810ad58:	6878      	ldr	r0, [r7, #4]
 810ad5a:	f7ff f963 	bl	810a024 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 810ad5e:	4604      	mov	r4, r0
 810ad60:	6838      	ldr	r0, [r7, #0]
 810ad62:	f7ff f96a 	bl	810a03a <_ZSt7forwardISt5tupleIJRKN19EventManagerCM4Task11EEventQueueEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 810ad66:	4605      	mov	r5, r0
 810ad68:	6a38      	ldr	r0, [r7, #32]
 810ad6a:	f7ff f971 	bl	810a050 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 810ad6e:	4603      	mov	r3, r0
 810ad70:	462a      	mov	r2, r5
 810ad72:	4621      	mov	r1, r4
 810ad74:	68b8      	ldr	r0, [r7, #8]
 810ad76:	f000 f8b1 	bl	810aedc <_ZSt12construct_atISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEJRKSt21piecewise_construct_tSt5tupleIJRS3_EESA_IJEEEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPSF_DpOSG_>
	}
 810ad7a:	bf00      	nop
 810ad7c:	3710      	adds	r7, #16
 810ad7e:	46bd      	mov	sp, r7
 810ad80:	bdb0      	pop	{r4, r5, r7, pc}

0810ad82 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEEE9constructIS7_JRKSt21piecewise_construct_tSt5tupleIJOS3_EESF_IJEEEEEvRS9_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 810ad82:	b5b0      	push	{r4, r5, r7, lr}
 810ad84:	b084      	sub	sp, #16
 810ad86:	af00      	add	r7, sp, #0
 810ad88:	60f8      	str	r0, [r7, #12]
 810ad8a:	60b9      	str	r1, [r7, #8]
 810ad8c:	607a      	str	r2, [r7, #4]
 810ad8e:	603b      	str	r3, [r7, #0]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 810ad90:	6878      	ldr	r0, [r7, #4]
 810ad92:	f7ff f947 	bl	810a024 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 810ad96:	4604      	mov	r4, r0
 810ad98:	6838      	ldr	r0, [r7, #0]
 810ad9a:	f7ff fac8 	bl	810a32e <_ZSt7forwardISt5tupleIJON19EventManagerCM4Task11EEventQueueEEEEOT_RNSt16remove_referenceIS5_E4typeE>
 810ad9e:	4605      	mov	r5, r0
 810ada0:	6a38      	ldr	r0, [r7, #32]
 810ada2:	f7ff f955 	bl	810a050 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 810ada6:	4603      	mov	r3, r0
 810ada8:	462a      	mov	r2, r5
 810adaa:	4621      	mov	r1, r4
 810adac:	68b8      	ldr	r0, [r7, #8]
 810adae:	f000 f8ce 	bl	810af4e <_ZSt12construct_atISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEJRKSt21piecewise_construct_tSt5tupleIJOS2_EESA_IJEEEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPSF_DpOSG_>
	}
 810adb2:	bf00      	nop
 810adb4:	3710      	adds	r7, #16
 810adb6:	46bd      	mov	sp, r7
 810adb8:	bdb0      	pop	{r4, r5, r7, pc}

0810adba <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEE10deallocateEPS8_j>:
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
 810adba:	b580      	push	{r7, lr}
 810adbc:	b084      	sub	sp, #16
 810adbe:	af00      	add	r7, sp, #0
 810adc0:	60f8      	str	r0, [r7, #12]
 810adc2:	60b9      	str	r1, [r7, #8]
 810adc4:	607a      	str	r2, [r7, #4]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 810adc6:	687a      	ldr	r2, [r7, #4]
 810adc8:	4613      	mov	r3, r2
 810adca:	005b      	lsls	r3, r3, #1
 810adcc:	4413      	add	r3, r2
 810adce:	00db      	lsls	r3, r3, #3
 810add0:	4619      	mov	r1, r3
 810add2:	68b8      	ldr	r0, [r7, #8]
 810add4:	f01a fdd8 	bl	8125988 <_ZdlPvj>
      }
 810add8:	3710      	adds	r7, #16
 810adda:	46bd      	mov	sp, r7
 810addc:	bd80      	pop	{r7, pc}

0810adde <_ZSt12construct_atISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEJRS2_RS5_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPSA_DpOSB_>:
    construct_at(_Tp* __location, _Args&&... __args)
 810adde:	b5b0      	push	{r4, r5, r7, lr}
 810ade0:	b084      	sub	sp, #16
 810ade2:	af00      	add	r7, sp, #0
 810ade4:	60f8      	str	r0, [r7, #12]
 810ade6:	60b9      	str	r1, [r7, #8]
 810ade8:	607a      	str	r2, [r7, #4]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 810adea:	68fb      	ldr	r3, [r7, #12]
 810adec:	4619      	mov	r1, r3
 810adee:	2008      	movs	r0, #8
 810adf0:	f7f6 fa8c 	bl	810130c <_ZnwjPv>
 810adf4:	4604      	mov	r4, r0
 810adf6:	68b8      	ldr	r0, [r7, #8]
 810adf8:	f7fe fb69 	bl	81094ce <_ZSt7forwardIRN19EventManagerCM4Task11EEventQueueEEOT_RNSt16remove_referenceIS3_E4typeE>
 810adfc:	4605      	mov	r5, r0
 810adfe:	6878      	ldr	r0, [r7, #4]
 810ae00:	f7fe fb70 	bl	81094e4 <_ZSt7forwardIRP15QueueDefinitionEOT_RNSt16remove_referenceIS3_E4typeE>
 810ae04:	4603      	mov	r3, r0
 810ae06:	461a      	mov	r2, r3
 810ae08:	4629      	mov	r1, r5
 810ae0a:	4620      	mov	r0, r4
 810ae0c:	f000 f8f8 	bl	810b000 <_ZNSt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEC1IRS1_RS4_EEOT_OT0_>
 810ae10:	4623      	mov	r3, r4
 810ae12:	4618      	mov	r0, r3
 810ae14:	3710      	adds	r7, #16
 810ae16:	46bd      	mov	sp, r7
 810ae18:	bdb0      	pop	{r4, r5, r7, pc}

0810ae1a <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEE7_M_addrEv>:
      _M_addr() const noexcept
 810ae1a:	b480      	push	{r7}
 810ae1c:	b083      	sub	sp, #12
 810ae1e:	af00      	add	r7, sp, #0
 810ae20:	6078      	str	r0, [r7, #4]
      { return static_cast<const void*>(&_M_storage); }
 810ae22:	687b      	ldr	r3, [r7, #4]
 810ae24:	4618      	mov	r0, r3
 810ae26:	370c      	adds	r7, #12
 810ae28:	46bd      	mov	sp, r7
 810ae2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ae2e:	4770      	bx	lr

0810ae30 <_ZNKSt15__new_allocatorI8SMessageE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 810ae30:	b480      	push	{r7}
 810ae32:	b083      	sub	sp, #12
 810ae34:	af00      	add	r7, sp, #0
 810ae36:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 810ae38:	4b03      	ldr	r3, [pc, #12]	@ (810ae48 <_ZNKSt15__new_allocatorI8SMessageE11_M_max_sizeEv+0x18>)
      }
 810ae3a:	4618      	mov	r0, r3
 810ae3c:	370c      	adds	r7, #12
 810ae3e:	46bd      	mov	sp, r7
 810ae40:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ae44:	4770      	bx	lr
 810ae46:	bf00      	nop
 810ae48:	04924924 	.word	0x04924924

0810ae4c <_ZN9__gnu_cxx17__normal_iteratorIP8SMessagevEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 810ae4c:	b480      	push	{r7}
 810ae4e:	b083      	sub	sp, #12
 810ae50:	af00      	add	r7, sp, #0
 810ae52:	6078      	str	r0, [r7, #4]
	++_M_current;
 810ae54:	687b      	ldr	r3, [r7, #4]
 810ae56:	681b      	ldr	r3, [r3, #0]
 810ae58:	f103 021c 	add.w	r2, r3, #28
 810ae5c:	687b      	ldr	r3, [r7, #4]
 810ae5e:	601a      	str	r2, [r3, #0]
	return *this;
 810ae60:	687b      	ldr	r3, [r7, #4]
      }
 810ae62:	4618      	mov	r0, r3
 810ae64:	370c      	adds	r7, #12
 810ae66:	46bd      	mov	sp, r7
 810ae68:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ae6c:	4770      	bx	lr

0810ae6e <_ZNK9__gnu_cxx17__normal_iteratorIP8SMessagevEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 810ae6e:	b480      	push	{r7}
 810ae70:	b083      	sub	sp, #12
 810ae72:	af00      	add	r7, sp, #0
 810ae74:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 810ae76:	687b      	ldr	r3, [r7, #4]
 810ae78:	681b      	ldr	r3, [r3, #0]
 810ae7a:	4618      	mov	r0, r3
 810ae7c:	370c      	adds	r7, #12
 810ae7e:	46bd      	mov	sp, r7
 810ae80:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ae84:	4770      	bx	lr

0810ae86 <_ZSt19__relocate_object_aI8SMessageS0_SaIS0_EEvPT_PT0_RT1_>:
    __relocate_object_a(_Tp* __restrict __dest, _Up* __restrict __orig,
 810ae86:	b580      	push	{r7, lr}
 810ae88:	b084      	sub	sp, #16
 810ae8a:	af00      	add	r7, sp, #0
 810ae8c:	60f8      	str	r0, [r7, #12]
 810ae8e:	60b9      	str	r1, [r7, #8]
 810ae90:	607a      	str	r2, [r7, #4]
      __traits::construct(__alloc, __dest, std::move(*__orig));
 810ae92:	68b8      	ldr	r0, [r7, #8]
 810ae94:	f000 f8cd 	bl	810b032 <_ZSt4moveIR8SMessageEONSt16remove_referenceIT_E4typeEOS3_>
 810ae98:	4603      	mov	r3, r0
 810ae9a:	461a      	mov	r2, r3
 810ae9c:	68f9      	ldr	r1, [r7, #12]
 810ae9e:	6878      	ldr	r0, [r7, #4]
 810aea0:	f000 f8d2 	bl	810b048 <_ZNSt16allocator_traitsISaI8SMessageEE9constructIS0_JS0_EEEvRS1_PT_DpOT0_>
      __traits::destroy(__alloc, std::__addressof(*__orig));
 810aea4:	68b8      	ldr	r0, [r7, #8]
 810aea6:	f7ff fd79 	bl	810a99c <_ZSt11__addressofI8SMessageEPT_RS1_>
 810aeaa:	4603      	mov	r3, r0
 810aeac:	4619      	mov	r1, r3
 810aeae:	6878      	ldr	r0, [r7, #4]
 810aeb0:	f7ff f854 	bl	8109f5c <_ZNSt16allocator_traitsISaI8SMessageEE7destroyIS0_EEvRS1_PT_>
    }
 810aeb4:	bf00      	nop
 810aeb6:	3710      	adds	r7, #16
 810aeb8:	46bd      	mov	sp, r7
 810aeba:	bd80      	pop	{r7, pc}

0810aebc <_ZNSt5tupleIJRKN19EventManagerCM4Task11EEventQueueEEEC1EOS4_>:
      constexpr tuple(tuple&&) = default;
 810aebc:	b580      	push	{r7, lr}
 810aebe:	b082      	sub	sp, #8
 810aec0:	af00      	add	r7, sp, #0
 810aec2:	6078      	str	r0, [r7, #4]
 810aec4:	6039      	str	r1, [r7, #0]
 810aec6:	687b      	ldr	r3, [r7, #4]
 810aec8:	683a      	ldr	r2, [r7, #0]
 810aeca:	4611      	mov	r1, r2
 810aecc:	4618      	mov	r0, r3
 810aece:	f000 f8cd 	bl	810b06c <_ZNSt11_Tuple_implILj0EJRKN19EventManagerCM4Task11EEventQueueEEEC1EOS4_>
 810aed2:	687b      	ldr	r3, [r7, #4]
 810aed4:	4618      	mov	r0, r3
 810aed6:	3708      	adds	r7, #8
 810aed8:	46bd      	mov	sp, r7
 810aeda:	bd80      	pop	{r7, pc}

0810aedc <_ZSt12construct_atISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEJRKSt21piecewise_construct_tSt5tupleIJRS3_EESA_IJEEEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPSF_DpOSG_>:
    construct_at(_Tp* __location, _Args&&... __args)
 810aedc:	b5f0      	push	{r4, r5, r6, r7, lr}
 810aede:	b087      	sub	sp, #28
 810aee0:	af00      	add	r7, sp, #0
 810aee2:	60f8      	str	r0, [r7, #12]
 810aee4:	60b9      	str	r1, [r7, #8]
 810aee6:	607a      	str	r2, [r7, #4]
 810aee8:	603b      	str	r3, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 810aeea:	68fb      	ldr	r3, [r7, #12]
 810aeec:	4619      	mov	r1, r3
 810aeee:	2008      	movs	r0, #8
 810aef0:	f7f6 fa0c 	bl	810130c <_ZnwjPv>
 810aef4:	4604      	mov	r4, r0
 810aef6:	68b8      	ldr	r0, [r7, #8]
 810aef8:	f7ff f894 	bl	810a024 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 810aefc:	6878      	ldr	r0, [r7, #4]
 810aefe:	f7ff f89c 	bl	810a03a <_ZSt7forwardISt5tupleIJRKN19EventManagerCM4Task11EEventQueueEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 810af02:	4602      	mov	r2, r0
 810af04:	f107 0314 	add.w	r3, r7, #20
 810af08:	4611      	mov	r1, r2
 810af0a:	4618      	mov	r0, r3
 810af0c:	f7ff ffd6 	bl	810aebc <_ZNSt5tupleIJRKN19EventManagerCM4Task11EEventQueueEEEC1EOS4_>
 810af10:	6838      	ldr	r0, [r7, #0]
 810af12:	f7ff f89d 	bl	810a050 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 810af16:	f107 0214 	add.w	r2, r7, #20
 810af1a:	4633      	mov	r3, r6
 810af1c:	4629      	mov	r1, r5
 810af1e:	4620      	mov	r0, r4
 810af20:	f000 f8b4 	bl	810b08c <_ZNSt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEC1IJRS2_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EES9_IJDpT0_EE>
 810af24:	4623      	mov	r3, r4
 810af26:	4618      	mov	r0, r3
 810af28:	371c      	adds	r7, #28
 810af2a:	46bd      	mov	sp, r7
 810af2c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0810af2e <_ZNSt5tupleIJON19EventManagerCM4Task11EEventQueueEEEC1EOS3_>:
 810af2e:	b580      	push	{r7, lr}
 810af30:	b082      	sub	sp, #8
 810af32:	af00      	add	r7, sp, #0
 810af34:	6078      	str	r0, [r7, #4]
 810af36:	6039      	str	r1, [r7, #0]
 810af38:	687b      	ldr	r3, [r7, #4]
 810af3a:	683a      	ldr	r2, [r7, #0]
 810af3c:	4611      	mov	r1, r2
 810af3e:	4618      	mov	r0, r3
 810af40:	f000 f8b8 	bl	810b0b4 <_ZNSt11_Tuple_implILj0EJON19EventManagerCM4Task11EEventQueueEEEC1EOS3_>
 810af44:	687b      	ldr	r3, [r7, #4]
 810af46:	4618      	mov	r0, r3
 810af48:	3708      	adds	r7, #8
 810af4a:	46bd      	mov	sp, r7
 810af4c:	bd80      	pop	{r7, pc}

0810af4e <_ZSt12construct_atISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEJRKSt21piecewise_construct_tSt5tupleIJOS2_EESA_IJEEEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPSF_DpOSG_>:
    construct_at(_Tp* __location, _Args&&... __args)
 810af4e:	b5f0      	push	{r4, r5, r6, r7, lr}
 810af50:	b087      	sub	sp, #28
 810af52:	af00      	add	r7, sp, #0
 810af54:	60f8      	str	r0, [r7, #12]
 810af56:	60b9      	str	r1, [r7, #8]
 810af58:	607a      	str	r2, [r7, #4]
 810af5a:	603b      	str	r3, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 810af5c:	68fb      	ldr	r3, [r7, #12]
 810af5e:	4619      	mov	r1, r3
 810af60:	2008      	movs	r0, #8
 810af62:	f7f6 f9d3 	bl	810130c <_ZnwjPv>
 810af66:	4604      	mov	r4, r0
 810af68:	68b8      	ldr	r0, [r7, #8]
 810af6a:	f7ff f85b 	bl	810a024 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 810af6e:	6878      	ldr	r0, [r7, #4]
 810af70:	f7ff f9dd 	bl	810a32e <_ZSt7forwardISt5tupleIJON19EventManagerCM4Task11EEventQueueEEEEOT_RNSt16remove_referenceIS5_E4typeE>
 810af74:	4602      	mov	r2, r0
 810af76:	f107 0314 	add.w	r3, r7, #20
 810af7a:	4611      	mov	r1, r2
 810af7c:	4618      	mov	r0, r3
 810af7e:	f7ff ffd6 	bl	810af2e <_ZNSt5tupleIJON19EventManagerCM4Task11EEventQueueEEEC1EOS3_>
 810af82:	6838      	ldr	r0, [r7, #0]
 810af84:	f7ff f864 	bl	810a050 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 810af88:	f107 0214 	add.w	r2, r7, #20
 810af8c:	4633      	mov	r3, r6
 810af8e:	4629      	mov	r1, r5
 810af90:	4620      	mov	r0, r4
 810af92:	f000 f89f 	bl	810b0d4 <_ZNSt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEC1IJOS1_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EES9_IJDpT0_EE>
 810af96:	4623      	mov	r3, r4
 810af98:	4618      	mov	r0, r3
 810af9a:	371c      	adds	r7, #28
 810af9c:	46bd      	mov	sp, r7
 810af9e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0810afa0 <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 810afa0:	b580      	push	{r7, lr}
 810afa2:	b084      	sub	sp, #16
 810afa4:	af00      	add	r7, sp, #0
 810afa6:	60f8      	str	r0, [r7, #12]
 810afa8:	60b9      	str	r1, [r7, #8]
 810afaa:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 810afac:	68f8      	ldr	r0, [r7, #12]
 810afae:	f000 f8a5 	bl	810b0fc <_ZNKSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEE11_M_max_sizeEv>
 810afb2:	4602      	mov	r2, r0
 810afb4:	68bb      	ldr	r3, [r7, #8]
 810afb6:	4293      	cmp	r3, r2
 810afb8:	bf8c      	ite	hi
 810afba:	2301      	movhi	r3, #1
 810afbc:	2300      	movls	r3, #0
 810afbe:	b2db      	uxtb	r3, r3
 810afc0:	2b00      	cmp	r3, #0
 810afc2:	bf14      	ite	ne
 810afc4:	2301      	movne	r3, #1
 810afc6:	2300      	moveq	r3, #0
 810afc8:	b2db      	uxtb	r3, r3
 810afca:	2b00      	cmp	r3, #0
 810afcc:	d007      	beq.n	810afde <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 810afce:	68bb      	ldr	r3, [r7, #8]
 810afd0:	4a0a      	ldr	r2, [pc, #40]	@ (810affc <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEE8allocateEjPKv+0x5c>)
 810afd2:	4293      	cmp	r3, r2
 810afd4:	d901      	bls.n	810afda <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 810afd6:	f01a fdb9 	bl	8125b4c <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 810afda:	f01a fdb4 	bl	8125b46 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 810afde:	68ba      	ldr	r2, [r7, #8]
 810afe0:	4613      	mov	r3, r2
 810afe2:	005b      	lsls	r3, r3, #1
 810afe4:	4413      	add	r3, r2
 810afe6:	00db      	lsls	r3, r3, #3
 810afe8:	4618      	mov	r0, r3
 810afea:	f01a fcde 	bl	81259aa <_Znwj>
 810afee:	4603      	mov	r3, r0
 810aff0:	bf00      	nop
      }
 810aff2:	4618      	mov	r0, r3
 810aff4:	3710      	adds	r7, #16
 810aff6:	46bd      	mov	sp, r7
 810aff8:	bd80      	pop	{r7, pc}
 810affa:	bf00      	nop
 810affc:	0aaaaaaa 	.word	0x0aaaaaaa

0810b000 <_ZNSt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEC1IRS1_RS4_EEOT_OT0_>:
	pair(_U1&& __x, _U2&& __y)
 810b000:	b580      	push	{r7, lr}
 810b002:	b084      	sub	sp, #16
 810b004:	af00      	add	r7, sp, #0
 810b006:	60f8      	str	r0, [r7, #12]
 810b008:	60b9      	str	r1, [r7, #8]
 810b00a:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y))
 810b00c:	68b8      	ldr	r0, [r7, #8]
 810b00e:	f7fe fa5e 	bl	81094ce <_ZSt7forwardIRN19EventManagerCM4Task11EEventQueueEEOT_RNSt16remove_referenceIS3_E4typeE>
 810b012:	4603      	mov	r3, r0
 810b014:	781a      	ldrb	r2, [r3, #0]
 810b016:	68fb      	ldr	r3, [r7, #12]
 810b018:	701a      	strb	r2, [r3, #0]
 810b01a:	6878      	ldr	r0, [r7, #4]
 810b01c:	f7fe fa62 	bl	81094e4 <_ZSt7forwardIRP15QueueDefinitionEOT_RNSt16remove_referenceIS3_E4typeE>
 810b020:	4603      	mov	r3, r0
 810b022:	681a      	ldr	r2, [r3, #0]
 810b024:	68fb      	ldr	r3, [r7, #12]
 810b026:	605a      	str	r2, [r3, #4]
	{ }
 810b028:	68fb      	ldr	r3, [r7, #12]
 810b02a:	4618      	mov	r0, r3
 810b02c:	3710      	adds	r7, #16
 810b02e:	46bd      	mov	sp, r7
 810b030:	bd80      	pop	{r7, pc}

0810b032 <_ZSt4moveIR8SMessageEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 810b032:	b480      	push	{r7}
 810b034:	b083      	sub	sp, #12
 810b036:	af00      	add	r7, sp, #0
 810b038:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 810b03a:	687b      	ldr	r3, [r7, #4]
 810b03c:	4618      	mov	r0, r3
 810b03e:	370c      	adds	r7, #12
 810b040:	46bd      	mov	sp, r7
 810b042:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b046:	4770      	bx	lr

0810b048 <_ZNSt16allocator_traitsISaI8SMessageEE9constructIS0_JS0_EEEvRS1_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 810b048:	b580      	push	{r7, lr}
 810b04a:	b084      	sub	sp, #16
 810b04c:	af00      	add	r7, sp, #0
 810b04e:	60f8      	str	r0, [r7, #12]
 810b050:	60b9      	str	r1, [r7, #8]
 810b052:	607a      	str	r2, [r7, #4]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 810b054:	6878      	ldr	r0, [r7, #4]
 810b056:	f000 f85f 	bl	810b118 <_ZSt7forwardI8SMessageEOT_RNSt16remove_referenceIS1_E4typeE>
 810b05a:	4603      	mov	r3, r0
 810b05c:	4619      	mov	r1, r3
 810b05e:	68b8      	ldr	r0, [r7, #8]
 810b060:	f000 f865 	bl	810b12e <_ZSt12construct_atI8SMessageJS0_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS2_DpOS3_>
	}
 810b064:	bf00      	nop
 810b066:	3710      	adds	r7, #16
 810b068:	46bd      	mov	sp, r7
 810b06a:	bd80      	pop	{r7, pc}

0810b06c <_ZNSt11_Tuple_implILj0EJRKN19EventManagerCM4Task11EEventQueueEEEC1EOS4_>:
      _Tuple_impl(_Tuple_impl&& __in)
 810b06c:	b480      	push	{r7}
 810b06e:	b083      	sub	sp, #12
 810b070:	af00      	add	r7, sp, #0
 810b072:	6078      	str	r0, [r7, #4]
 810b074:	6039      	str	r1, [r7, #0]
      : _Base(static_cast<_Base&&>(__in))
 810b076:	687b      	ldr	r3, [r7, #4]
 810b078:	683a      	ldr	r2, [r7, #0]
 810b07a:	6812      	ldr	r2, [r2, #0]
 810b07c:	601a      	str	r2, [r3, #0]
      { }
 810b07e:	687b      	ldr	r3, [r7, #4]
 810b080:	4618      	mov	r0, r3
 810b082:	370c      	adds	r7, #12
 810b084:	46bd      	mov	sp, r7
 810b086:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b08a:	4770      	bx	lr

0810b08c <_ZNSt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEC1IJRS2_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EES9_IJDpT0_EE>:
  */
  template<class _T1, class _T2>
    template<typename... _Args1, typename... _Args2>
      _GLIBCXX20_CONSTEXPR
      inline
      pair<_T1, _T2>::
 810b08c:	b5b0      	push	{r4, r5, r7, lr}
 810b08e:	b086      	sub	sp, #24
 810b090:	af02      	add	r7, sp, #8
 810b092:	60f8      	str	r0, [r7, #12]
 810b094:	7239      	strb	r1, [r7, #8]
 810b096:	607a      	str	r2, [r7, #4]
 810b098:	703b      	strb	r3, [r7, #0]
      pair(piecewise_construct_t,
	   tuple<_Args1...> __first, tuple<_Args2...> __second)
      : pair(__first, __second,
	     typename _Build_index_tuple<sizeof...(_Args1)>::__type(),
	     typename _Build_index_tuple<sizeof...(_Args2)>::__type())
 810b09a:	463a      	mov	r2, r7
 810b09c:	f88d 4000 	strb.w	r4, [sp]
 810b0a0:	462b      	mov	r3, r5
 810b0a2:	6879      	ldr	r1, [r7, #4]
 810b0a4:	68f8      	ldr	r0, [r7, #12]
 810b0a6:	f000 f85e 	bl	810b166 <_ZNSt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEC1IJRS2_EJLj0EEJEJEEERSt5tupleIJDpT_EERS8_IJDpT1_EESt12_Index_tupleIJXspT0_EEESH_IJXspT2_EEE>
      { }
 810b0aa:	68fb      	ldr	r3, [r7, #12]
 810b0ac:	4618      	mov	r0, r3
 810b0ae:	3710      	adds	r7, #16
 810b0b0:	46bd      	mov	sp, r7
 810b0b2:	bdb0      	pop	{r4, r5, r7, pc}

0810b0b4 <_ZNSt11_Tuple_implILj0EJON19EventManagerCM4Task11EEventQueueEEEC1EOS3_>:
      _Tuple_impl(_Tuple_impl&& __in)
 810b0b4:	b480      	push	{r7}
 810b0b6:	b083      	sub	sp, #12
 810b0b8:	af00      	add	r7, sp, #0
 810b0ba:	6078      	str	r0, [r7, #4]
 810b0bc:	6039      	str	r1, [r7, #0]
      : _Base(static_cast<_Base&&>(__in))
 810b0be:	687b      	ldr	r3, [r7, #4]
 810b0c0:	683a      	ldr	r2, [r7, #0]
 810b0c2:	6812      	ldr	r2, [r2, #0]
 810b0c4:	601a      	str	r2, [r3, #0]
      { }
 810b0c6:	687b      	ldr	r3, [r7, #4]
 810b0c8:	4618      	mov	r0, r3
 810b0ca:	370c      	adds	r7, #12
 810b0cc:	46bd      	mov	sp, r7
 810b0ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b0d2:	4770      	bx	lr

0810b0d4 <_ZNSt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEC1IJOS1_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EES9_IJDpT0_EE>:
      pair<_T1, _T2>::
 810b0d4:	b5b0      	push	{r4, r5, r7, lr}
 810b0d6:	b086      	sub	sp, #24
 810b0d8:	af02      	add	r7, sp, #8
 810b0da:	60f8      	str	r0, [r7, #12]
 810b0dc:	7239      	strb	r1, [r7, #8]
 810b0de:	607a      	str	r2, [r7, #4]
 810b0e0:	703b      	strb	r3, [r7, #0]
	     typename _Build_index_tuple<sizeof...(_Args2)>::__type())
 810b0e2:	463a      	mov	r2, r7
 810b0e4:	f88d 4000 	strb.w	r4, [sp]
 810b0e8:	462b      	mov	r3, r5
 810b0ea:	6879      	ldr	r1, [r7, #4]
 810b0ec:	68f8      	ldr	r0, [r7, #12]
 810b0ee:	f000 f854 	bl	810b19a <_ZNSt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEC1IJOS1_EJLj0EEJEJEEERSt5tupleIJDpT_EERS8_IJDpT1_EESt12_Index_tupleIJXspT0_EEESH_IJXspT2_EEE>
      { }
 810b0f2:	68fb      	ldr	r3, [r7, #12]
 810b0f4:	4618      	mov	r0, r3
 810b0f6:	3710      	adds	r7, #16
 810b0f8:	46bd      	mov	sp, r7
 810b0fa:	bdb0      	pop	{r4, r5, r7, pc}

0810b0fc <_ZNKSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 810b0fc:	b480      	push	{r7}
 810b0fe:	b083      	sub	sp, #12
 810b100:	af00      	add	r7, sp, #0
 810b102:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 810b104:	4b03      	ldr	r3, [pc, #12]	@ (810b114 <_ZNKSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEE11_M_max_sizeEv+0x18>)
      }
 810b106:	4618      	mov	r0, r3
 810b108:	370c      	adds	r7, #12
 810b10a:	46bd      	mov	sp, r7
 810b10c:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b110:	4770      	bx	lr
 810b112:	bf00      	nop
 810b114:	05555555 	.word	0x05555555

0810b118 <_ZSt7forwardI8SMessageEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 810b118:	b480      	push	{r7}
 810b11a:	b083      	sub	sp, #12
 810b11c:	af00      	add	r7, sp, #0
 810b11e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 810b120:	687b      	ldr	r3, [r7, #4]
 810b122:	4618      	mov	r0, r3
 810b124:	370c      	adds	r7, #12
 810b126:	46bd      	mov	sp, r7
 810b128:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b12c:	4770      	bx	lr

0810b12e <_ZSt12construct_atI8SMessageJS0_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS2_DpOS3_>:
    construct_at(_Tp* __location, _Args&&... __args)
 810b12e:	b5f0      	push	{r4, r5, r6, r7, lr}
 810b130:	b083      	sub	sp, #12
 810b132:	af00      	add	r7, sp, #0
 810b134:	6078      	str	r0, [r7, #4]
 810b136:	6039      	str	r1, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 810b138:	687b      	ldr	r3, [r7, #4]
 810b13a:	4619      	mov	r1, r3
 810b13c:	201c      	movs	r0, #28
 810b13e:	f7f6 f8e5 	bl	810130c <_ZnwjPv>
 810b142:	4606      	mov	r6, r0
 810b144:	6838      	ldr	r0, [r7, #0]
 810b146:	f7ff ffe7 	bl	810b118 <_ZSt7forwardI8SMessageEOT_RNSt16remove_referenceIS1_E4typeE>
 810b14a:	4603      	mov	r3, r0
 810b14c:	4634      	mov	r4, r6
 810b14e:	461d      	mov	r5, r3
 810b150:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 810b152:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 810b154:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 810b158:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 810b15c:	4633      	mov	r3, r6
 810b15e:	4618      	mov	r0, r3
 810b160:	370c      	adds	r7, #12
 810b162:	46bd      	mov	sp, r7
 810b164:	bdf0      	pop	{r4, r5, r6, r7, pc}

0810b166 <_ZNSt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEC1IJRS2_EJLj0EEJEJEEERSt5tupleIJDpT_EERS8_IJDpT1_EESt12_Index_tupleIJXspT0_EEESH_IJXspT2_EEE>:

  template<class _T1, class _T2>
    template<typename... _Args1, size_t... _Indexes1,
	     typename... _Args2, size_t... _Indexes2>
      _GLIBCXX20_CONSTEXPR inline
      pair<_T1, _T2>::
 810b166:	b580      	push	{r7, lr}
 810b168:	b084      	sub	sp, #16
 810b16a:	af00      	add	r7, sp, #0
 810b16c:	60f8      	str	r0, [r7, #12]
 810b16e:	60b9      	str	r1, [r7, #8]
 810b170:	607a      	str	r2, [r7, #4]
 810b172:	703b      	strb	r3, [r7, #0]
      pair(tuple<_Args1...>& __tuple1, tuple<_Args2...>& __tuple2,
	   _Index_tuple<_Indexes1...>, _Index_tuple<_Indexes2...>)
      : first(std::forward<_Args1>(std::get<_Indexes1>(__tuple1))...),
 810b174:	68b8      	ldr	r0, [r7, #8]
 810b176:	f000 f82a 	bl	810b1ce <_ZSt3getILj0EJRKN19EventManagerCM4Task11EEventQueueEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 810b17a:	4603      	mov	r3, r0
 810b17c:	4618      	mov	r0, r3
 810b17e:	f000 f833 	bl	810b1e8 <_ZSt7forwardIRKN19EventManagerCM4Task11EEventQueueEEOT_RNSt16remove_referenceIS4_E4typeE>
 810b182:	4603      	mov	r3, r0
 810b184:	781a      	ldrb	r2, [r3, #0]
 810b186:	68fb      	ldr	r3, [r7, #12]
 810b188:	701a      	strb	r2, [r3, #0]
	second(std::forward<_Args2>(std::get<_Indexes2>(__tuple2))...)
 810b18a:	68fb      	ldr	r3, [r7, #12]
 810b18c:	2200      	movs	r2, #0
 810b18e:	605a      	str	r2, [r3, #4]
      { }
 810b190:	68fb      	ldr	r3, [r7, #12]
 810b192:	4618      	mov	r0, r3
 810b194:	3710      	adds	r7, #16
 810b196:	46bd      	mov	sp, r7
 810b198:	bd80      	pop	{r7, pc}

0810b19a <_ZNSt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEC1IJOS1_EJLj0EEJEJEEERSt5tupleIJDpT_EERS8_IJDpT1_EESt12_Index_tupleIJXspT0_EEESH_IJXspT2_EEE>:
      pair<_T1, _T2>::
 810b19a:	b580      	push	{r7, lr}
 810b19c:	b084      	sub	sp, #16
 810b19e:	af00      	add	r7, sp, #0
 810b1a0:	60f8      	str	r0, [r7, #12]
 810b1a2:	60b9      	str	r1, [r7, #8]
 810b1a4:	607a      	str	r2, [r7, #4]
 810b1a6:	703b      	strb	r3, [r7, #0]
      : first(std::forward<_Args1>(std::get<_Indexes1>(__tuple1))...),
 810b1a8:	68b8      	ldr	r0, [r7, #8]
 810b1aa:	f000 f828 	bl	810b1fe <_ZSt3getILj0EJON19EventManagerCM4Task11EEventQueueEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS7_>
 810b1ae:	4603      	mov	r3, r0
 810b1b0:	4618      	mov	r0, r3
 810b1b2:	f000 f831 	bl	810b218 <_ZSt7forwardION19EventManagerCM4Task11EEventQueueEEOT_RNSt16remove_referenceIS3_E4typeE>
 810b1b6:	4603      	mov	r3, r0
 810b1b8:	781a      	ldrb	r2, [r3, #0]
 810b1ba:	68fb      	ldr	r3, [r7, #12]
 810b1bc:	701a      	strb	r2, [r3, #0]
	second(std::forward<_Args2>(std::get<_Indexes2>(__tuple2))...)
 810b1be:	68fb      	ldr	r3, [r7, #12]
 810b1c0:	2200      	movs	r2, #0
 810b1c2:	605a      	str	r2, [r3, #4]
      { }
 810b1c4:	68fb      	ldr	r3, [r7, #12]
 810b1c6:	4618      	mov	r0, r3
 810b1c8:	3710      	adds	r7, #16
 810b1ca:	46bd      	mov	sp, r7
 810b1cc:	bd80      	pop	{r7, pc}

0810b1ce <_ZSt3getILj0EJRKN19EventManagerCM4Task11EEventQueueEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 810b1ce:	b580      	push	{r7, lr}
 810b1d0:	b082      	sub	sp, #8
 810b1d2:	af00      	add	r7, sp, #0
 810b1d4:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 810b1d6:	687b      	ldr	r3, [r7, #4]
 810b1d8:	4618      	mov	r0, r3
 810b1da:	f000 f828 	bl	810b22e <_ZSt12__get_helperILj0ERKN19EventManagerCM4Task11EEventQueueEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 810b1de:	4603      	mov	r3, r0
 810b1e0:	4618      	mov	r0, r3
 810b1e2:	3708      	adds	r7, #8
 810b1e4:	46bd      	mov	sp, r7
 810b1e6:	bd80      	pop	{r7, pc}

0810b1e8 <_ZSt7forwardIRKN19EventManagerCM4Task11EEventQueueEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 810b1e8:	b480      	push	{r7}
 810b1ea:	b083      	sub	sp, #12
 810b1ec:	af00      	add	r7, sp, #0
 810b1ee:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 810b1f0:	687b      	ldr	r3, [r7, #4]
 810b1f2:	4618      	mov	r0, r3
 810b1f4:	370c      	adds	r7, #12
 810b1f6:	46bd      	mov	sp, r7
 810b1f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b1fc:	4770      	bx	lr

0810b1fe <_ZSt3getILj0EJON19EventManagerCM4Task11EEventQueueEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS7_>:
    get(tuple<_Elements...>& __t) noexcept
 810b1fe:	b580      	push	{r7, lr}
 810b200:	b082      	sub	sp, #8
 810b202:	af00      	add	r7, sp, #0
 810b204:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 810b206:	687b      	ldr	r3, [r7, #4]
 810b208:	4618      	mov	r0, r3
 810b20a:	f000 f81c 	bl	810b246 <_ZSt12__get_helperILj0EON19EventManagerCM4Task11EEventQueueEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 810b20e:	4603      	mov	r3, r0
 810b210:	4618      	mov	r0, r3
 810b212:	3708      	adds	r7, #8
 810b214:	46bd      	mov	sp, r7
 810b216:	bd80      	pop	{r7, pc}

0810b218 <_ZSt7forwardION19EventManagerCM4Task11EEventQueueEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 810b218:	b480      	push	{r7}
 810b21a:	b083      	sub	sp, #12
 810b21c:	af00      	add	r7, sp, #0
 810b21e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 810b220:	687b      	ldr	r3, [r7, #4]
 810b222:	4618      	mov	r0, r3
 810b224:	370c      	adds	r7, #12
 810b226:	46bd      	mov	sp, r7
 810b228:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b22c:	4770      	bx	lr

0810b22e <_ZSt12__get_helperILj0ERKN19EventManagerCM4Task11EEventQueueEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 810b22e:	b580      	push	{r7, lr}
 810b230:	b082      	sub	sp, #8
 810b232:	af00      	add	r7, sp, #0
 810b234:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 810b236:	6878      	ldr	r0, [r7, #4]
 810b238:	f000 f811 	bl	810b25e <_ZNSt11_Tuple_implILj0EJRKN19EventManagerCM4Task11EEventQueueEEE7_M_headERS4_>
 810b23c:	4603      	mov	r3, r0
 810b23e:	4618      	mov	r0, r3
 810b240:	3708      	adds	r7, #8
 810b242:	46bd      	mov	sp, r7
 810b244:	bd80      	pop	{r7, pc}

0810b246 <_ZSt12__get_helperILj0EON19EventManagerCM4Task11EEventQueueEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 810b246:	b580      	push	{r7, lr}
 810b248:	b082      	sub	sp, #8
 810b24a:	af00      	add	r7, sp, #0
 810b24c:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 810b24e:	6878      	ldr	r0, [r7, #4]
 810b250:	f000 f812 	bl	810b278 <_ZNSt11_Tuple_implILj0EJON19EventManagerCM4Task11EEventQueueEEE7_M_headERS3_>
 810b254:	4603      	mov	r3, r0
 810b256:	4618      	mov	r0, r3
 810b258:	3708      	adds	r7, #8
 810b25a:	46bd      	mov	sp, r7
 810b25c:	bd80      	pop	{r7, pc}

0810b25e <_ZNSt11_Tuple_implILj0EJRKN19EventManagerCM4Task11EEventQueueEEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 810b25e:	b580      	push	{r7, lr}
 810b260:	b082      	sub	sp, #8
 810b262:	af00      	add	r7, sp, #0
 810b264:	6078      	str	r0, [r7, #4]
 810b266:	687b      	ldr	r3, [r7, #4]
 810b268:	4618      	mov	r0, r3
 810b26a:	f000 f812 	bl	810b292 <_ZNSt10_Head_baseILj0ERKN19EventManagerCM4Task11EEventQueueELb0EE7_M_headERS4_>
 810b26e:	4603      	mov	r3, r0
 810b270:	4618      	mov	r0, r3
 810b272:	3708      	adds	r7, #8
 810b274:	46bd      	mov	sp, r7
 810b276:	bd80      	pop	{r7, pc}

0810b278 <_ZNSt11_Tuple_implILj0EJON19EventManagerCM4Task11EEventQueueEEE7_M_headERS3_>:
 810b278:	b580      	push	{r7, lr}
 810b27a:	b082      	sub	sp, #8
 810b27c:	af00      	add	r7, sp, #0
 810b27e:	6078      	str	r0, [r7, #4]
 810b280:	687b      	ldr	r3, [r7, #4]
 810b282:	4618      	mov	r0, r3
 810b284:	f000 f811 	bl	810b2aa <_ZNSt10_Head_baseILj0EON19EventManagerCM4Task11EEventQueueELb0EE7_M_headERS3_>
 810b288:	4603      	mov	r3, r0
 810b28a:	4618      	mov	r0, r3
 810b28c:	3708      	adds	r7, #8
 810b28e:	46bd      	mov	sp, r7
 810b290:	bd80      	pop	{r7, pc}

0810b292 <_ZNSt10_Head_baseILj0ERKN19EventManagerCM4Task11EEventQueueELb0EE7_M_headERS4_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 810b292:	b480      	push	{r7}
 810b294:	b083      	sub	sp, #12
 810b296:	af00      	add	r7, sp, #0
 810b298:	6078      	str	r0, [r7, #4]
 810b29a:	687b      	ldr	r3, [r7, #4]
 810b29c:	681b      	ldr	r3, [r3, #0]
 810b29e:	4618      	mov	r0, r3
 810b2a0:	370c      	adds	r7, #12
 810b2a2:	46bd      	mov	sp, r7
 810b2a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b2a8:	4770      	bx	lr

0810b2aa <_ZNSt10_Head_baseILj0EON19EventManagerCM4Task11EEventQueueELb0EE7_M_headERS3_>:
 810b2aa:	b480      	push	{r7}
 810b2ac:	b083      	sub	sp, #12
 810b2ae:	af00      	add	r7, sp, #0
 810b2b0:	6078      	str	r0, [r7, #4]
 810b2b2:	687b      	ldr	r3, [r7, #4]
 810b2b4:	681b      	ldr	r3, [r3, #0]
 810b2b6:	4618      	mov	r0, r3
 810b2b8:	370c      	adds	r7, #12
 810b2ba:	46bd      	mov	sp, r7
 810b2bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b2c0:	4770      	bx	lr

0810b2c2 <_Z18StartTask_EDaemonNPv>:
#include "cm_ipc.h"

extern QueueHandle_t queueToNativeDaemon;

void StartTask_EDaemonN(void *argument)
{
 810b2c2:	b580      	push	{r7, lr}
 810b2c4:	b086      	sub	sp, #24
 810b2c6:	af00      	add	r7, sp, #0
 810b2c8:	6078      	str	r0, [r7, #4]
	ipc_start();
 810b2ca:	f7f5 ff47 	bl	810115c <ipc_start>
	IPCDaemonNativeTask IPCDaemonNativeTaskInstance;
 810b2ce:	f107 030c 	add.w	r3, r7, #12
 810b2d2:	4618      	mov	r0, r3
 810b2d4:	f000 f80a 	bl	810b2ec <_ZN19IPCDaemonNativeTaskC1Ev>

	for(;;)
	{
		IPCDaemonNativeTaskInstance.process();
 810b2d8:	f107 030c 	add.w	r3, r7, #12
 810b2dc:	4618      	mov	r0, r3
 810b2de:	f000 f8b9 	bl	810b454 <_ZN19IPCDaemonNativeTask7processEv>
		osDelay(1);
 810b2e2:	2001      	movs	r0, #1
 810b2e4:	f00a fb17 	bl	8115916 <osDelay>
		IPCDaemonNativeTaskInstance.process();
 810b2e8:	bf00      	nop
 810b2ea:	e7f5      	b.n	810b2d8 <_Z18StartTask_EDaemonNPv+0x16>

0810b2ec <_ZN19IPCDaemonNativeTaskC1Ev>:
	}
}

IPCDaemonNativeTask::IPCDaemonNativeTask() : event_bus(EventBus(queueToNativeDaemon, EVENT_CLIENT_DAEMON_NATIVE)) {}
 810b2ec:	b580      	push	{r7, lr}
 810b2ee:	b082      	sub	sp, #8
 810b2f0:	af00      	add	r7, sp, #0
 810b2f2:	6078      	str	r0, [r7, #4]
 810b2f4:	687b      	ldr	r3, [r7, #4]
 810b2f6:	4a05      	ldr	r2, [pc, #20]	@ (810b30c <_ZN19IPCDaemonNativeTaskC1Ev+0x20>)
 810b2f8:	6811      	ldr	r1, [r2, #0]
 810b2fa:	2207      	movs	r2, #7
 810b2fc:	4618      	mov	r0, r3
 810b2fe:	f7fd fbc7 	bl	8108a90 <_ZN8EventBusC1EP15QueueDefinition12EEventClient>
 810b302:	687b      	ldr	r3, [r7, #4]
 810b304:	4618      	mov	r0, r3
 810b306:	3708      	adds	r7, #8
 810b308:	46bd      	mov	sp, r7
 810b30a:	bd80      	pop	{r7, pc}
 810b30c:	100001ec 	.word	0x100001ec

0810b310 <_ZN19IPCDaemonNativeTask7OnEventE10EEventType12UMessageData12EEventClientS2_>:

void IPCDaemonNativeTask::OnEvent(EEventType event, UMessageData msg, EEventClient eventSender, EEventClient eventReceiver)
{
 810b310:	b082      	sub	sp, #8
 810b312:	b5f0      	push	{r4, r5, r6, r7, lr}
 810b314:	b08f      	sub	sp, #60	@ 0x3c
 810b316:	af04      	add	r7, sp, #16
 810b318:	6078      	str	r0, [r7, #4]
 810b31a:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 810b31e:	e880 000c 	stmia.w	r0, {r2, r3}
 810b322:	460b      	mov	r3, r1
 810b324:	70fb      	strb	r3, [r7, #3]
	switch(eventReceiver)
 810b326:	f897 3058 	ldrb.w	r3, [r7, #88]	@ 0x58
 810b32a:	2b05      	cmp	r3, #5
 810b32c:	d023      	beq.n	810b376 <_ZN19IPCDaemonNativeTask7OnEventE10EEventType12UMessageData12EEventClientS2_+0x66>
 810b32e:	2b05      	cmp	r3, #5
 810b330:	dc34      	bgt.n	810b39c <_ZN19IPCDaemonNativeTask7OnEventE10EEventType12UMessageData12EEventClientS2_+0x8c>
 810b332:	2b00      	cmp	r3, #0
 810b334:	d002      	beq.n	810b33c <_ZN19IPCDaemonNativeTask7OnEventE10EEventType12UMessageData12EEventClientS2_+0x2c>
 810b336:	2b03      	cmp	r3, #3
 810b338:	d01d      	beq.n	810b376 <_ZN19IPCDaemonNativeTask7OnEventE10EEventType12UMessageData12EEventClientS2_+0x66>
	// if recipient is on CM4 side, then forward to event manager.
	case EVENT_CLIENT_ETHERNET_CONNECTION_MANAGER:
	case EVENT_CLIENT_THERMOMETER:
		event_bus.send(event, msg, eventReceiver);
	default:
		break;;
 810b33a:	e02f      	b.n	810b39c <_ZN19IPCDaemonNativeTask7OnEventE10EEventType12UMessageData12EEventClientS2_+0x8c>
		sMsg.event_type = event;
 810b33c:	78fb      	ldrb	r3, [r7, #3]
 810b33e:	723b      	strb	r3, [r7, #8]
		sMsg.message_data = msg;
 810b340:	f107 040c 	add.w	r4, r7, #12
 810b344:	f107 0540 	add.w	r5, r7, #64	@ 0x40
 810b348:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 810b34a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 810b34c:	682b      	ldr	r3, [r5, #0]
 810b34e:	6023      	str	r3, [r4, #0]
		sMsg.event_sender = eventSender;
 810b350:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 810b354:	f887 3020 	strb.w	r3, [r7, #32]
		sMsg.event_receiver = eventReceiver;
 810b358:	f897 3058 	ldrb.w	r3, [r7, #88]	@ 0x58
 810b35c:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
		size_t len = sizeof(sMsg);
 810b360:	231c      	movs	r3, #28
 810b362:	627b      	str	r3, [r7, #36]	@ 0x24
		ipc_sendmsg(&sMsg, len, 1000);
 810b364:	f107 0308 	add.w	r3, r7, #8
 810b368:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 810b36c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 810b36e:	4618      	mov	r0, r3
 810b370:	f7f5 ff7a 	bl	8101268 <ipc_sendmsg>
		break;
 810b374:	e013      	b.n	810b39e <_ZN19IPCDaemonNativeTask7OnEventE10EEventType12UMessageData12EEventClientS2_+0x8e>
		event_bus.send(event, msg, eventReceiver);
 810b376:	687d      	ldr	r5, [r7, #4]
 810b378:	78fe      	ldrb	r6, [r7, #3]
 810b37a:	f897 3058 	ldrb.w	r3, [r7, #88]	@ 0x58
 810b37e:	9303      	str	r3, [sp, #12]
 810b380:	466c      	mov	r4, sp
 810b382:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 810b386:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 810b38a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 810b38e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 810b392:	cb0c      	ldmia	r3, {r2, r3}
 810b394:	4631      	mov	r1, r6
 810b396:	4628      	mov	r0, r5
 810b398:	f7fd fb94 	bl	8108ac4 <_ZN8EventBus4sendE10EEventType12UMessageData12EEventClient>
		break;;
 810b39c:	bf00      	nop
	}
}
 810b39e:	bf00      	nop
 810b3a0:	372c      	adds	r7, #44	@ 0x2c
 810b3a2:	46bd      	mov	sp, r7
 810b3a4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 810b3a8:	b002      	add	sp, #8
 810b3aa:	4770      	bx	lr

0810b3ac <_ZN19IPCDaemonNativeTask17processIpcReceiveEv>:

void IPCDaemonNativeTask::processIpcReceive()
{
 810b3ac:	b5b0      	push	{r4, r5, r7, lr}
 810b3ae:	b092      	sub	sp, #72	@ 0x48
 810b3b0:	af06      	add	r7, sp, #24
 810b3b2:	6078      	str	r0, [r7, #4]
	SMessage sMsg;
	size_t len = sizeof(sMsg);
 810b3b4:	231c      	movs	r3, #28
 810b3b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
	size_t ret = ipc_recvmsg(&sMsg, len, 0);
 810b3b8:	f107 030c 	add.w	r3, r7, #12
 810b3bc:	2200      	movs	r2, #0
 810b3be:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 810b3c0:	4618      	mov	r0, r3
 810b3c2:	f7f5 ff79 	bl	81012b8 <ipc_recvmsg>
 810b3c6:	62b8      	str	r0, [r7, #40]	@ 0x28
	if(ret == len)
 810b3c8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 810b3ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810b3cc:	429a      	cmp	r2, r3
 810b3ce:	d114      	bne.n	810b3fa <_ZN19IPCDaemonNativeTask17processIpcReceiveEv+0x4e>
	{
		OnEvent(sMsg.event_type, sMsg.message_data, sMsg.event_sender, sMsg.event_receiver);
 810b3d0:	7b3d      	ldrb	r5, [r7, #12]
 810b3d2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 810b3d6:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 810b3da:	9204      	str	r2, [sp, #16]
 810b3dc:	9303      	str	r3, [sp, #12]
 810b3de:	466c      	mov	r4, sp
 810b3e0:	f107 0318 	add.w	r3, r7, #24
 810b3e4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 810b3e8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 810b3ec:	f107 0310 	add.w	r3, r7, #16
 810b3f0:	cb0c      	ldmia	r3, {r2, r3}
 810b3f2:	4629      	mov	r1, r5
 810b3f4:	6878      	ldr	r0, [r7, #4]
 810b3f6:	f7ff ff8b 	bl	810b310 <_ZN19IPCDaemonNativeTask7OnEventE10EEventType12UMessageData12EEventClientS2_>
	}
}
 810b3fa:	bf00      	nop
 810b3fc:	3730      	adds	r7, #48	@ 0x30
 810b3fe:	46bd      	mov	sp, r7
 810b400:	bdb0      	pop	{r4, r5, r7, pc}

0810b402 <_ZZN19IPCDaemonNativeTask7processEvENKUl10EEventType12UMessageData12EEventClientS2_E_clES0_S1_S2_S2_>:

void IPCDaemonNativeTask::process()
{
	processIpcReceive();
	event_bus.receive([this](EEventType event, UMessageData msg, EEventClient eventSender, EEventClient eventReceiver)
 810b402:	b082      	sub	sp, #8
 810b404:	b5f0      	push	{r4, r5, r6, r7, lr}
 810b406:	b089      	sub	sp, #36	@ 0x24
 810b408:	af06      	add	r7, sp, #24
 810b40a:	6078      	str	r0, [r7, #4]
 810b40c:	f107 0020 	add.w	r0, r7, #32
 810b410:	e880 000c 	stmia.w	r0, {r2, r3}
 810b414:	460b      	mov	r3, r1
 810b416:	70fb      	strb	r3, [r7, #3]
 810b418:	687b      	ldr	r3, [r7, #4]
 810b41a:	681d      	ldr	r5, [r3, #0]
                      {this->OnEvent(event, msg, eventSender, eventReceiver);});
 810b41c:	78fe      	ldrb	r6, [r7, #3]
 810b41e:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 810b422:	9304      	str	r3, [sp, #16]
 810b424:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 810b428:	9303      	str	r3, [sp, #12]
 810b42a:	466c      	mov	r4, sp
 810b42c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 810b430:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 810b434:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 810b438:	f107 0320 	add.w	r3, r7, #32
 810b43c:	cb0c      	ldmia	r3, {r2, r3}
 810b43e:	4631      	mov	r1, r6
 810b440:	4628      	mov	r0, r5
 810b442:	f7ff ff65 	bl	810b310 <_ZN19IPCDaemonNativeTask7OnEventE10EEventType12UMessageData12EEventClientS2_>
 810b446:	bf00      	nop
 810b448:	370c      	adds	r7, #12
 810b44a:	46bd      	mov	sp, r7
 810b44c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 810b450:	b002      	add	sp, #8
 810b452:	4770      	bx	lr

0810b454 <_ZN19IPCDaemonNativeTask7processEv>:
{
 810b454:	b590      	push	{r4, r7, lr}
 810b456:	b089      	sub	sp, #36	@ 0x24
 810b458:	af00      	add	r7, sp, #0
 810b45a:	6078      	str	r0, [r7, #4]
	processIpcReceive();
 810b45c:	6878      	ldr	r0, [r7, #4]
 810b45e:	f7ff ffa5 	bl	810b3ac <_ZN19IPCDaemonNativeTask17processIpcReceiveEv>
	event_bus.receive([this](EEventType event, UMessageData msg, EEventClient eventSender, EEventClient eventReceiver)
 810b462:	687c      	ldr	r4, [r7, #4]
 810b464:	687b      	ldr	r3, [r7, #4]
 810b466:	61fb      	str	r3, [r7, #28]
 810b468:	f107 021c 	add.w	r2, r7, #28
 810b46c:	f107 030c 	add.w	r3, r7, #12
 810b470:	4611      	mov	r1, r2
 810b472:	4618      	mov	r0, r3
 810b474:	f000 f810 	bl	810b498 <_ZNSt8functionIFv10EEventType12UMessageData12EEventClientS2_EEC1IZN19IPCDaemonNativeTask7processEvEUlS0_S1_S2_S2_E_vEEOT_>
 810b478:	f107 030c 	add.w	r3, r7, #12
 810b47c:	4619      	mov	r1, r3
 810b47e:	4620      	mov	r0, r4
 810b480:	f7fd fb59 	bl	8108b36 <_ZN8EventBus7receiveESt8functionIFv10EEventType12UMessageData12EEventClientS3_EE>
 810b484:	f107 030c 	add.w	r3, r7, #12
 810b488:	4618      	mov	r0, r3
 810b48a:	f7fc faa9 	bl	81079e0 <_ZNSt8functionIFv10EEventType12UMessageData12EEventClientS2_EED1Ev>
}
 810b48e:	bf00      	nop
 810b490:	3724      	adds	r7, #36	@ 0x24
 810b492:	46bd      	mov	sp, r7
 810b494:	bd90      	pop	{r4, r7, pc}
	...

0810b498 <_ZNSt8functionIFv10EEventType12UMessageData12EEventClientS2_EEC1IZN19IPCDaemonNativeTask7processEvEUlS0_S1_S2_S2_E_vEEOT_>:
	function(_Functor&& __f)
 810b498:	b590      	push	{r4, r7, lr}
 810b49a:	b083      	sub	sp, #12
 810b49c:	af00      	add	r7, sp, #0
 810b49e:	6078      	str	r0, [r7, #4]
 810b4a0:	6039      	str	r1, [r7, #0]
	: _Function_base()
 810b4a2:	687b      	ldr	r3, [r7, #4]
 810b4a4:	461a      	mov	r2, r3
 810b4a6:	2300      	movs	r3, #0
 810b4a8:	6013      	str	r3, [r2, #0]
 810b4aa:	6053      	str	r3, [r2, #4]
 810b4ac:	6093      	str	r3, [r2, #8]
 810b4ae:	687b      	ldr	r3, [r7, #4]
 810b4b0:	4618      	mov	r0, r3
 810b4b2:	f7fc fe1d 	bl	81080f0 <_ZNSt14_Function_baseC1Ev>
 810b4b6:	687b      	ldr	r3, [r7, #4]
 810b4b8:	2200      	movs	r2, #0
 810b4ba:	60da      	str	r2, [r3, #12]
	  if (_My_handler::_M_not_empty_function(__f))
 810b4bc:	6838      	ldr	r0, [r7, #0]
 810b4be:	f000 f81b 	bl	810b4f8 <_ZNSt14_Function_base13_Base_managerIZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E21_M_not_empty_functionIS5_EEbRKT_>
 810b4c2:	4603      	mov	r3, r0
 810b4c4:	2b00      	cmp	r3, #0
 810b4c6:	d00e      	beq.n	810b4e6 <_ZNSt8functionIFv10EEventType12UMessageData12EEventClientS2_EEC1IZN19IPCDaemonNativeTask7processEvEUlS0_S1_S2_S2_E_vEEOT_+0x4e>
	      _My_handler::_M_init_functor(_M_functor,
 810b4c8:	687c      	ldr	r4, [r7, #4]
 810b4ca:	6838      	ldr	r0, [r7, #0]
 810b4cc:	f000 f81f 	bl	810b50e <_ZSt7forwardIZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS3_E_EOT_RNSt16remove_referenceIS5_E4typeE>
 810b4d0:	4603      	mov	r3, r0
 810b4d2:	4619      	mov	r1, r3
 810b4d4:	4620      	mov	r0, r4
 810b4d6:	f000 f825 	bl	810b524 <_ZNSt14_Function_base13_Base_managerIZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E15_M_init_functorIS5_EEvRSt9_Any_dataOT_>
	      _M_invoker = &_My_handler::_M_invoke;
 810b4da:	687b      	ldr	r3, [r7, #4]
 810b4dc:	4a04      	ldr	r2, [pc, #16]	@ (810b4f0 <_ZNSt8functionIFv10EEventType12UMessageData12EEventClientS2_EEC1IZN19IPCDaemonNativeTask7processEvEUlS0_S1_S2_S2_E_vEEOT_+0x58>)
 810b4de:	60da      	str	r2, [r3, #12]
	      _M_manager = &_My_handler::_M_manager;
 810b4e0:	687b      	ldr	r3, [r7, #4]
 810b4e2:	4a04      	ldr	r2, [pc, #16]	@ (810b4f4 <_ZNSt8functionIFv10EEventType12UMessageData12EEventClientS2_EEC1IZN19IPCDaemonNativeTask7processEvEUlS0_S1_S2_S2_E_vEEOT_+0x5c>)
 810b4e4:	609a      	str	r2, [r3, #8]
	}
 810b4e6:	687b      	ldr	r3, [r7, #4]
 810b4e8:	4618      	mov	r0, r3
 810b4ea:	370c      	adds	r7, #12
 810b4ec:	46bd      	mov	sp, r7
 810b4ee:	bd90      	pop	{r4, r7, pc}
 810b4f0:	0810b549 	.word	0x0810b549
 810b4f4:	0810b599 	.word	0x0810b599

0810b4f8 <_ZNSt14_Function_base13_Base_managerIZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E21_M_not_empty_functionIS5_EEbRKT_>:
	  _M_not_empty_function(const _Tp&) noexcept
 810b4f8:	b480      	push	{r7}
 810b4fa:	b083      	sub	sp, #12
 810b4fc:	af00      	add	r7, sp, #0
 810b4fe:	6078      	str	r0, [r7, #4]
	  { return true; }
 810b500:	2301      	movs	r3, #1
 810b502:	4618      	mov	r0, r3
 810b504:	370c      	adds	r7, #12
 810b506:	46bd      	mov	sp, r7
 810b508:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b50c:	4770      	bx	lr

0810b50e <_ZSt7forwardIZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS3_E_EOT_RNSt16remove_referenceIS5_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 810b50e:	b480      	push	{r7}
 810b510:	b083      	sub	sp, #12
 810b512:	af00      	add	r7, sp, #0
 810b514:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 810b516:	687b      	ldr	r3, [r7, #4]
 810b518:	4618      	mov	r0, r3
 810b51a:	370c      	adds	r7, #12
 810b51c:	46bd      	mov	sp, r7
 810b51e:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b522:	4770      	bx	lr

0810b524 <_ZNSt14_Function_base13_Base_managerIZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E15_M_init_functorIS5_EEvRSt9_Any_dataOT_>:
	  _M_init_functor(_Any_data& __functor, _Fn&& __f)
 810b524:	b590      	push	{r4, r7, lr}
 810b526:	b083      	sub	sp, #12
 810b528:	af00      	add	r7, sp, #0
 810b52a:	6078      	str	r0, [r7, #4]
 810b52c:	6039      	str	r1, [r7, #0]
	    _M_create(__functor, std::forward<_Fn>(__f), _Local_storage());
 810b52e:	6838      	ldr	r0, [r7, #0]
 810b530:	f7ff ffed 	bl	810b50e <_ZSt7forwardIZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS3_E_EOT_RNSt16remove_referenceIS5_E4typeE>
 810b534:	4603      	mov	r3, r0
 810b536:	4622      	mov	r2, r4
 810b538:	4619      	mov	r1, r3
 810b53a:	6878      	ldr	r0, [r7, #4]
 810b53c:	f000 f84b 	bl	810b5d6 <_ZNSt14_Function_base13_Base_managerIZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E9_M_createIS5_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>
	  }
 810b540:	bf00      	nop
 810b542:	370c      	adds	r7, #12
 810b544:	46bd      	mov	sp, r7
 810b546:	bd90      	pop	{r4, r7, pc}

0810b548 <_ZNSt17_Function_handlerIFv10EEventType12UMessageData12EEventClientS2_EZN19IPCDaemonNativeTask7processEvEUlS0_S1_S2_S2_E_E9_M_invokeERKSt9_Any_dataOS0_OS1_OS2_SC_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 810b548:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810b54c:	b086      	sub	sp, #24
 810b54e:	af02      	add	r7, sp, #8
 810b550:	60f8      	str	r0, [r7, #12]
 810b552:	60b9      	str	r1, [r7, #8]
 810b554:	607a      	str	r2, [r7, #4]
 810b556:	603b      	str	r3, [r7, #0]
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
 810b558:	68f8      	ldr	r0, [r7, #12]
 810b55a:	f000 f855 	bl	810b608 <_ZNSt14_Function_base13_Base_managerIZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E14_M_get_pointerERKSt9_Any_data>
 810b55e:	4604      	mov	r4, r0
 810b560:	68b8      	ldr	r0, [r7, #8]
 810b562:	f7fc fea1 	bl	81082a8 <_ZSt7forwardI10EEventTypeEOT_RNSt16remove_referenceIS1_E4typeE>
 810b566:	4605      	mov	r5, r0
 810b568:	6878      	ldr	r0, [r7, #4]
 810b56a:	f7fc fea8 	bl	81082be <_ZSt7forwardI12UMessageDataEOT_RNSt16remove_referenceIS1_E4typeE>
 810b56e:	4606      	mov	r6, r0
 810b570:	6838      	ldr	r0, [r7, #0]
 810b572:	f7fc feaf 	bl	81082d4 <_ZSt7forwardI12EEventClientEOT_RNSt16remove_referenceIS1_E4typeE>
 810b576:	4680      	mov	r8, r0
 810b578:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 810b57a:	f7fc feab 	bl	81082d4 <_ZSt7forwardI12EEventClientEOT_RNSt16remove_referenceIS1_E4typeE>
 810b57e:	4603      	mov	r3, r0
 810b580:	9300      	str	r3, [sp, #0]
 810b582:	4643      	mov	r3, r8
 810b584:	4632      	mov	r2, r6
 810b586:	4629      	mov	r1, r5
 810b588:	4620      	mov	r0, r4
 810b58a:	f000 f84d 	bl	810b628 <_ZSt10__invoke_rIvRZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS3_E_JS1_S2_S3_S3_EENSt9enable_ifIX16is_invocable_r_vIT_T0_DpT1_EES7_E4typeEOS8_DpOS9_>
				     std::forward<_ArgTypes>(__args)...);
 810b58e:	bf00      	nop
      }
 810b590:	3710      	adds	r7, #16
 810b592:	46bd      	mov	sp, r7
 810b594:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0810b598 <_ZNSt17_Function_handlerIFv10EEventType12UMessageData12EEventClientS2_EZN19IPCDaemonNativeTask7processEvEUlS0_S1_S2_S2_E_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 810b598:	b590      	push	{r4, r7, lr}
 810b59a:	b085      	sub	sp, #20
 810b59c:	af00      	add	r7, sp, #0
 810b59e:	60f8      	str	r0, [r7, #12]
 810b5a0:	60b9      	str	r1, [r7, #8]
 810b5a2:	4613      	mov	r3, r2
 810b5a4:	71fb      	strb	r3, [r7, #7]
	switch (__op)
 810b5a6:	79fb      	ldrb	r3, [r7, #7]
 810b5a8:	2b01      	cmp	r3, #1
 810b5aa:	d109      	bne.n	810b5c0 <_ZNSt17_Function_handlerIFv10EEventType12UMessageData12EEventClientS2_EZN19IPCDaemonNativeTask7processEvEUlS0_S1_S2_S2_E_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x28>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 810b5ac:	68b8      	ldr	r0, [r7, #8]
 810b5ae:	f000 f82b 	bl	810b608 <_ZNSt14_Function_base13_Base_managerIZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E14_M_get_pointerERKSt9_Any_data>
 810b5b2:	4604      	mov	r4, r0
 810b5b4:	68f8      	ldr	r0, [r7, #12]
 810b5b6:	f000 f860 	bl	810b67a <_ZNSt9_Any_data9_M_accessIPZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_EERT_v>
 810b5ba:	4603      	mov	r3, r0
 810b5bc:	601c      	str	r4, [r3, #0]
	    break;
 810b5be:	e005      	b.n	810b5cc <_ZNSt17_Function_handlerIFv10EEventType12UMessageData12EEventClientS2_EZN19IPCDaemonNativeTask7processEvEUlS0_S1_S2_S2_E_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x34>
	    _Base::_M_manager(__dest, __source, __op);
 810b5c0:	79fb      	ldrb	r3, [r7, #7]
 810b5c2:	461a      	mov	r2, r3
 810b5c4:	68b9      	ldr	r1, [r7, #8]
 810b5c6:	68f8      	ldr	r0, [r7, #12]
 810b5c8:	f000 f864 	bl	810b694 <_ZNSt14_Function_base13_Base_managerIZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation>
	return false;
 810b5cc:	2300      	movs	r3, #0
      }
 810b5ce:	4618      	mov	r0, r3
 810b5d0:	3714      	adds	r7, #20
 810b5d2:	46bd      	mov	sp, r7
 810b5d4:	bd90      	pop	{r4, r7, pc}

0810b5d6 <_ZNSt14_Function_base13_Base_managerIZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E9_M_createIS5_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>:
	  _M_create(_Any_data& __dest, _Fn&& __f, true_type)
 810b5d6:	b590      	push	{r4, r7, lr}
 810b5d8:	b085      	sub	sp, #20
 810b5da:	af00      	add	r7, sp, #0
 810b5dc:	60f8      	str	r0, [r7, #12]
 810b5de:	60b9      	str	r1, [r7, #8]
 810b5e0:	713a      	strb	r2, [r7, #4]
	    ::new (__dest._M_access()) _Functor(std::forward<_Fn>(__f));
 810b5e2:	68f8      	ldr	r0, [r7, #12]
 810b5e4:	f7fc f8ec 	bl	81077c0 <_ZNSt9_Any_data9_M_accessEv>
 810b5e8:	4603      	mov	r3, r0
 810b5ea:	4619      	mov	r1, r3
 810b5ec:	2004      	movs	r0, #4
 810b5ee:	f7f5 fe8d 	bl	810130c <_ZnwjPv>
 810b5f2:	4604      	mov	r4, r0
 810b5f4:	68b8      	ldr	r0, [r7, #8]
 810b5f6:	f7ff ff8a 	bl	810b50e <_ZSt7forwardIZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS3_E_EOT_RNSt16remove_referenceIS5_E4typeE>
 810b5fa:	4603      	mov	r3, r0
 810b5fc:	681b      	ldr	r3, [r3, #0]
 810b5fe:	6023      	str	r3, [r4, #0]
	  }
 810b600:	bf00      	nop
 810b602:	3714      	adds	r7, #20
 810b604:	46bd      	mov	sp, r7
 810b606:	bd90      	pop	{r4, r7, pc}

0810b608 <_ZNSt14_Function_base13_Base_managerIZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source) noexcept
 810b608:	b580      	push	{r7, lr}
 810b60a:	b084      	sub	sp, #16
 810b60c:	af00      	add	r7, sp, #0
 810b60e:	6078      	str	r0, [r7, #4]
	      const _Functor& __f = __source._M_access<_Functor>();
 810b610:	6878      	ldr	r0, [r7, #4]
 810b612:	f000 f879 	bl	810b708 <_ZNKSt9_Any_data9_M_accessIZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_EERKT_v>
 810b616:	60f8      	str	r0, [r7, #12]
	      return const_cast<_Functor*>(std::__addressof(__f));
 810b618:	68f8      	ldr	r0, [r7, #12]
 810b61a:	f000 f881 	bl	810b720 <_ZSt11__addressofIKZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS3_E_EPT_RS6_>
 810b61e:	4603      	mov	r3, r0
	}
 810b620:	4618      	mov	r0, r3
 810b622:	3710      	adds	r7, #16
 810b624:	46bd      	mov	sp, r7
 810b626:	bd80      	pop	{r7, pc}

0810b628 <_ZSt10__invoke_rIvRZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS3_E_JS1_S2_S3_S3_EENSt9enable_ifIX16is_invocable_r_vIT_T0_DpT1_EES7_E4typeEOS8_DpOS9_>:
    __invoke_r(_Callable&& __fn, _Args&&... __args)
 810b628:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 810b62c:	b087      	sub	sp, #28
 810b62e:	af02      	add	r7, sp, #8
 810b630:	60f8      	str	r0, [r7, #12]
 810b632:	60b9      	str	r1, [r7, #8]
 810b634:	607a      	str	r2, [r7, #4]
 810b636:	603b      	str	r3, [r7, #0]
	std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 810b638:	68f8      	ldr	r0, [r7, #12]
 810b63a:	f000 f87c 	bl	810b736 <_ZSt7forwardIRZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS3_E_EOT_RNSt16remove_referenceIS6_E4typeE>
 810b63e:	4605      	mov	r5, r0
 810b640:	68b8      	ldr	r0, [r7, #8]
 810b642:	f7fc fe31 	bl	81082a8 <_ZSt7forwardI10EEventTypeEOT_RNSt16remove_referenceIS1_E4typeE>
 810b646:	4606      	mov	r6, r0
 810b648:	6878      	ldr	r0, [r7, #4]
 810b64a:	f7fc fe38 	bl	81082be <_ZSt7forwardI12UMessageDataEOT_RNSt16remove_referenceIS1_E4typeE>
 810b64e:	4680      	mov	r8, r0
 810b650:	6838      	ldr	r0, [r7, #0]
 810b652:	f7fc fe3f 	bl	81082d4 <_ZSt7forwardI12EEventClientEOT_RNSt16remove_referenceIS1_E4typeE>
 810b656:	4604      	mov	r4, r0
 810b658:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 810b65a:	f7fc fe3b 	bl	81082d4 <_ZSt7forwardI12EEventClientEOT_RNSt16remove_referenceIS1_E4typeE>
 810b65e:	4603      	mov	r3, r0
 810b660:	9301      	str	r3, [sp, #4]
 810b662:	9400      	str	r4, [sp, #0]
 810b664:	4643      	mov	r3, r8
 810b666:	4632      	mov	r2, r6
 810b668:	4629      	mov	r1, r5
 810b66a:	4648      	mov	r0, r9
 810b66c:	f000 f86e 	bl	810b74c <_ZSt13__invoke_implIvRZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS3_E_JS1_S2_S3_S3_EET_St14__invoke_otherOT0_DpOT1_>
    }
 810b670:	bf00      	nop
 810b672:	3714      	adds	r7, #20
 810b674:	46bd      	mov	sp, r7
 810b676:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0810b67a <_ZNSt9_Any_data9_M_accessIPZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_EERT_v>:
      _M_access() noexcept
 810b67a:	b580      	push	{r7, lr}
 810b67c:	b082      	sub	sp, #8
 810b67e:	af00      	add	r7, sp, #0
 810b680:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 810b682:	6878      	ldr	r0, [r7, #4]
 810b684:	f7fc f89c 	bl	81077c0 <_ZNSt9_Any_data9_M_accessEv>
 810b688:	4603      	mov	r3, r0
 810b68a:	4618      	mov	r0, r3
 810b68c:	3708      	adds	r7, #8
 810b68e:	46bd      	mov	sp, r7
 810b690:	bd80      	pop	{r7, pc}
	...

0810b694 <_ZNSt14_Function_base13_Base_managerIZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 810b694:	b590      	push	{r4, r7, lr}
 810b696:	b085      	sub	sp, #20
 810b698:	af00      	add	r7, sp, #0
 810b69a:	60f8      	str	r0, [r7, #12]
 810b69c:	60b9      	str	r1, [r7, #8]
 810b69e:	4613      	mov	r3, r2
 810b6a0:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
 810b6a2:	79fb      	ldrb	r3, [r7, #7]
 810b6a4:	2b03      	cmp	r3, #3
 810b6a6:	d82a      	bhi.n	810b6fe <_ZNSt14_Function_base13_Base_managerIZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x6a>
 810b6a8:	a201      	add	r2, pc, #4	@ (adr r2, 810b6b0 <_ZNSt14_Function_base13_Base_managerIZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x1c>)
 810b6aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810b6ae:	bf00      	nop
 810b6b0:	0810b6c1 	.word	0x0810b6c1
 810b6b4:	0810b6cf 	.word	0x0810b6cf
 810b6b8:	0810b6e3 	.word	0x0810b6e3
 810b6bc:	0810b6f5 	.word	0x0810b6f5
	      __dest._M_access<const type_info*>() = nullptr;
 810b6c0:	68f8      	ldr	r0, [r7, #12]
 810b6c2:	f7fc fed6 	bl	8108472 <_ZNSt9_Any_data9_M_accessIPKSt9type_infoEERT_v>
 810b6c6:	4603      	mov	r3, r0
 810b6c8:	2200      	movs	r2, #0
 810b6ca:	601a      	str	r2, [r3, #0]
	      break;
 810b6cc:	e017      	b.n	810b6fe <_ZNSt14_Function_base13_Base_managerIZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x6a>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 810b6ce:	68b8      	ldr	r0, [r7, #8]
 810b6d0:	f7ff ff9a 	bl	810b608 <_ZNSt14_Function_base13_Base_managerIZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E14_M_get_pointerERKSt9_Any_data>
 810b6d4:	4604      	mov	r4, r0
 810b6d6:	68f8      	ldr	r0, [r7, #12]
 810b6d8:	f7ff ffcf 	bl	810b67a <_ZNSt9_Any_data9_M_accessIPZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_EERT_v>
 810b6dc:	4603      	mov	r3, r0
 810b6de:	601c      	str	r4, [r3, #0]
	      break;
 810b6e0:	e00d      	b.n	810b6fe <_ZNSt14_Function_base13_Base_managerIZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x6a>
		  *const_cast<const _Functor*>(_M_get_pointer(__source)));
 810b6e2:	68b8      	ldr	r0, [r7, #8]
 810b6e4:	f7ff ff90 	bl	810b608 <_ZNSt14_Function_base13_Base_managerIZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E14_M_get_pointerERKSt9_Any_data>
 810b6e8:	4603      	mov	r3, r0
	      _M_init_functor(__dest,
 810b6ea:	4619      	mov	r1, r3
 810b6ec:	68f8      	ldr	r0, [r7, #12]
 810b6ee:	f000 f860 	bl	810b7b2 <_ZNSt14_Function_base13_Base_managerIZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E15_M_init_functorIRKS5_EEvRSt9_Any_dataOT_>
	      break;
 810b6f2:	e004      	b.n	810b6fe <_ZNSt14_Function_base13_Base_managerIZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x6a>
	      _M_destroy(__dest, _Local_storage());
 810b6f4:	4621      	mov	r1, r4
 810b6f6:	68f8      	ldr	r0, [r7, #12]
 810b6f8:	f000 f86d 	bl	810b7d6 <_ZNSt14_Function_base13_Base_managerIZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>
	      break;
 810b6fc:	bf00      	nop
	  return false;
 810b6fe:	2300      	movs	r3, #0
	}
 810b700:	4618      	mov	r0, r3
 810b702:	3714      	adds	r7, #20
 810b704:	46bd      	mov	sp, r7
 810b706:	bd90      	pop	{r4, r7, pc}

0810b708 <_ZNKSt9_Any_data9_M_accessIZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_EERKT_v>:
      _M_access() const noexcept
 810b708:	b580      	push	{r7, lr}
 810b70a:	b082      	sub	sp, #8
 810b70c:	af00      	add	r7, sp, #0
 810b70e:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 810b710:	6878      	ldr	r0, [r7, #4]
 810b712:	f7fc f860 	bl	81077d6 <_ZNKSt9_Any_data9_M_accessEv>
 810b716:	4603      	mov	r3, r0
 810b718:	4618      	mov	r0, r3
 810b71a:	3708      	adds	r7, #8
 810b71c:	46bd      	mov	sp, r7
 810b71e:	bd80      	pop	{r7, pc}

0810b720 <_ZSt11__addressofIKZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS3_E_EPT_RS6_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 810b720:	b480      	push	{r7}
 810b722:	b083      	sub	sp, #12
 810b724:	af00      	add	r7, sp, #0
 810b726:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 810b728:	687b      	ldr	r3, [r7, #4]
 810b72a:	4618      	mov	r0, r3
 810b72c:	370c      	adds	r7, #12
 810b72e:	46bd      	mov	sp, r7
 810b730:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b734:	4770      	bx	lr

0810b736 <_ZSt7forwardIRZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS3_E_EOT_RNSt16remove_referenceIS6_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 810b736:	b480      	push	{r7}
 810b738:	b083      	sub	sp, #12
 810b73a:	af00      	add	r7, sp, #0
 810b73c:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 810b73e:	687b      	ldr	r3, [r7, #4]
 810b740:	4618      	mov	r0, r3
 810b742:	370c      	adds	r7, #12
 810b744:	46bd      	mov	sp, r7
 810b746:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b74a:	4770      	bx	lr

0810b74c <_ZSt13__invoke_implIvRZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS3_E_JS1_S2_S3_S3_EET_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 810b74c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810b750:	b08a      	sub	sp, #40	@ 0x28
 810b752:	af06      	add	r7, sp, #24
 810b754:	7338      	strb	r0, [r7, #12]
 810b756:	60b9      	str	r1, [r7, #8]
 810b758:	607a      	str	r2, [r7, #4]
 810b75a:	603b      	str	r3, [r7, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 810b75c:	68b8      	ldr	r0, [r7, #8]
 810b75e:	f7ff ffea 	bl	810b736 <_ZSt7forwardIRZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS3_E_EOT_RNSt16remove_referenceIS6_E4typeE>
 810b762:	4680      	mov	r8, r0
 810b764:	6878      	ldr	r0, [r7, #4]
 810b766:	f7fc fd9f 	bl	81082a8 <_ZSt7forwardI10EEventTypeEOT_RNSt16remove_referenceIS1_E4typeE>
 810b76a:	4603      	mov	r3, r0
 810b76c:	781e      	ldrb	r6, [r3, #0]
 810b76e:	6838      	ldr	r0, [r7, #0]
 810b770:	f7fc fda5 	bl	81082be <_ZSt7forwardI12UMessageDataEOT_RNSt16remove_referenceIS1_E4typeE>
 810b774:	4604      	mov	r4, r0
 810b776:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 810b778:	f7fc fdac 	bl	81082d4 <_ZSt7forwardI12EEventClientEOT_RNSt16remove_referenceIS1_E4typeE>
 810b77c:	4603      	mov	r3, r0
 810b77e:	781d      	ldrb	r5, [r3, #0]
 810b780:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 810b782:	f7fc fda7 	bl	81082d4 <_ZSt7forwardI12EEventClientEOT_RNSt16remove_referenceIS1_E4typeE>
 810b786:	4603      	mov	r3, r0
 810b788:	781b      	ldrb	r3, [r3, #0]
 810b78a:	9304      	str	r3, [sp, #16]
 810b78c:	9503      	str	r5, [sp, #12]
 810b78e:	466d      	mov	r5, sp
 810b790:	f104 0308 	add.w	r3, r4, #8
 810b794:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 810b798:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 810b79c:	e894 000c 	ldmia.w	r4, {r2, r3}
 810b7a0:	4631      	mov	r1, r6
 810b7a2:	4640      	mov	r0, r8
 810b7a4:	f7ff fe2d 	bl	810b402 <_ZZN19IPCDaemonNativeTask7processEvENKUl10EEventType12UMessageData12EEventClientS2_E_clES0_S1_S2_S2_>
 810b7a8:	bf00      	nop
 810b7aa:	3710      	adds	r7, #16
 810b7ac:	46bd      	mov	sp, r7
 810b7ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0810b7b2 <_ZNSt14_Function_base13_Base_managerIZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E15_M_init_functorIRKS5_EEvRSt9_Any_dataOT_>:
	  _M_init_functor(_Any_data& __functor, _Fn&& __f)
 810b7b2:	b590      	push	{r4, r7, lr}
 810b7b4:	b083      	sub	sp, #12
 810b7b6:	af00      	add	r7, sp, #0
 810b7b8:	6078      	str	r0, [r7, #4]
 810b7ba:	6039      	str	r1, [r7, #0]
	    _M_create(__functor, std::forward<_Fn>(__f), _Local_storage());
 810b7bc:	6838      	ldr	r0, [r7, #0]
 810b7be:	f000 f816 	bl	810b7ee <_ZSt7forwardIRKZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS3_E_EOT_RNSt16remove_referenceIS7_E4typeE>
 810b7c2:	4603      	mov	r3, r0
 810b7c4:	4622      	mov	r2, r4
 810b7c6:	4619      	mov	r1, r3
 810b7c8:	6878      	ldr	r0, [r7, #4]
 810b7ca:	f000 f81b 	bl	810b804 <_ZNSt14_Function_base13_Base_managerIZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E9_M_createIRKS5_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>
	  }
 810b7ce:	bf00      	nop
 810b7d0:	370c      	adds	r7, #12
 810b7d2:	46bd      	mov	sp, r7
 810b7d4:	bd90      	pop	{r4, r7, pc}

0810b7d6 <_ZNSt14_Function_base13_Base_managerIZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>:
	_M_destroy(_Any_data& __victim, true_type)
 810b7d6:	b580      	push	{r7, lr}
 810b7d8:	b082      	sub	sp, #8
 810b7da:	af00      	add	r7, sp, #0
 810b7dc:	6078      	str	r0, [r7, #4]
 810b7de:	7039      	strb	r1, [r7, #0]
	  __victim._M_access<_Functor>().~_Functor();
 810b7e0:	6878      	ldr	r0, [r7, #4]
 810b7e2:	f000 f828 	bl	810b836 <_ZNSt9_Any_data9_M_accessIZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_EERT_v>
	}
 810b7e6:	bf00      	nop
 810b7e8:	3708      	adds	r7, #8
 810b7ea:	46bd      	mov	sp, r7
 810b7ec:	bd80      	pop	{r7, pc}

0810b7ee <_ZSt7forwardIRKZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS3_E_EOT_RNSt16remove_referenceIS7_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 810b7ee:	b480      	push	{r7}
 810b7f0:	b083      	sub	sp, #12
 810b7f2:	af00      	add	r7, sp, #0
 810b7f4:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 810b7f6:	687b      	ldr	r3, [r7, #4]
 810b7f8:	4618      	mov	r0, r3
 810b7fa:	370c      	adds	r7, #12
 810b7fc:	46bd      	mov	sp, r7
 810b7fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b802:	4770      	bx	lr

0810b804 <_ZNSt14_Function_base13_Base_managerIZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E9_M_createIRKS5_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>:
	  _M_create(_Any_data& __dest, _Fn&& __f, true_type)
 810b804:	b590      	push	{r4, r7, lr}
 810b806:	b085      	sub	sp, #20
 810b808:	af00      	add	r7, sp, #0
 810b80a:	60f8      	str	r0, [r7, #12]
 810b80c:	60b9      	str	r1, [r7, #8]
 810b80e:	713a      	strb	r2, [r7, #4]
	    ::new (__dest._M_access()) _Functor(std::forward<_Fn>(__f));
 810b810:	68f8      	ldr	r0, [r7, #12]
 810b812:	f7fb ffd5 	bl	81077c0 <_ZNSt9_Any_data9_M_accessEv>
 810b816:	4603      	mov	r3, r0
 810b818:	4619      	mov	r1, r3
 810b81a:	2004      	movs	r0, #4
 810b81c:	f7f5 fd76 	bl	810130c <_ZnwjPv>
 810b820:	4604      	mov	r4, r0
 810b822:	68b8      	ldr	r0, [r7, #8]
 810b824:	f7ff ffe3 	bl	810b7ee <_ZSt7forwardIRKZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS3_E_EOT_RNSt16remove_referenceIS7_E4typeE>
 810b828:	4603      	mov	r3, r0
 810b82a:	681b      	ldr	r3, [r3, #0]
 810b82c:	6023      	str	r3, [r4, #0]
	  }
 810b82e:	bf00      	nop
 810b830:	3714      	adds	r7, #20
 810b832:	46bd      	mov	sp, r7
 810b834:	bd90      	pop	{r4, r7, pc}

0810b836 <_ZNSt9_Any_data9_M_accessIZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_EERT_v>:
      _M_access() noexcept
 810b836:	b580      	push	{r7, lr}
 810b838:	b082      	sub	sp, #8
 810b83a:	af00      	add	r7, sp, #0
 810b83c:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 810b83e:	6878      	ldr	r0, [r7, #4]
 810b840:	f7fb ffbe 	bl	81077c0 <_ZNSt9_Any_data9_M_accessEv>
 810b844:	4603      	mov	r3, r0
 810b846:	4618      	mov	r0, r3
 810b848:	3708      	adds	r7, #8
 810b84a:	46bd      	mov	sp, r7
 810b84c:	bd80      	pop	{r7, pc}
	...

0810b850 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 810b850:	b580      	push	{r7, lr}
 810b852:	b084      	sub	sp, #16
 810b854:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 169;
 810b856:	4b92      	ldr	r3, [pc, #584]	@ (810baa0 <MX_LWIP_Init+0x250>)
 810b858:	22a9      	movs	r2, #169	@ 0xa9
 810b85a:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 254;
 810b85c:	4b90      	ldr	r3, [pc, #576]	@ (810baa0 <MX_LWIP_Init+0x250>)
 810b85e:	22fe      	movs	r2, #254	@ 0xfe
 810b860:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 810b862:	4b8f      	ldr	r3, [pc, #572]	@ (810baa0 <MX_LWIP_Init+0x250>)
 810b864:	2201      	movs	r2, #1
 810b866:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 1;
 810b868:	4b8d      	ldr	r3, [pc, #564]	@ (810baa0 <MX_LWIP_Init+0x250>)
 810b86a:	2201      	movs	r2, #1
 810b86c:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 810b86e:	4b8d      	ldr	r3, [pc, #564]	@ (810baa4 <MX_LWIP_Init+0x254>)
 810b870:	22ff      	movs	r2, #255	@ 0xff
 810b872:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 810b874:	4b8b      	ldr	r3, [pc, #556]	@ (810baa4 <MX_LWIP_Init+0x254>)
 810b876:	22ff      	movs	r2, #255	@ 0xff
 810b878:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 0;
 810b87a:	4b8a      	ldr	r3, [pc, #552]	@ (810baa4 <MX_LWIP_Init+0x254>)
 810b87c:	2200      	movs	r2, #0
 810b87e:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 810b880:	4b88      	ldr	r3, [pc, #544]	@ (810baa4 <MX_LWIP_Init+0x254>)
 810b882:	2200      	movs	r2, #0
 810b884:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 0;
 810b886:	4b88      	ldr	r3, [pc, #544]	@ (810baa8 <MX_LWIP_Init+0x258>)
 810b888:	2200      	movs	r2, #0
 810b88a:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 0;
 810b88c:	4b86      	ldr	r3, [pc, #536]	@ (810baa8 <MX_LWIP_Init+0x258>)
 810b88e:	2200      	movs	r2, #0
 810b890:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 810b892:	4b85      	ldr	r3, [pc, #532]	@ (810baa8 <MX_LWIP_Init+0x258>)
 810b894:	2200      	movs	r2, #0
 810b896:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 0;
 810b898:	4b83      	ldr	r3, [pc, #524]	@ (810baa8 <MX_LWIP_Init+0x258>)
 810b89a:	2200      	movs	r2, #0
 810b89c:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 810b89e:	2100      	movs	r1, #0
 810b8a0:	2000      	movs	r0, #0
 810b8a2:	f019 f9dd 	bl	8124c60 <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 810b8a6:	4b7e      	ldr	r3, [pc, #504]	@ (810baa0 <MX_LWIP_Init+0x250>)
 810b8a8:	781b      	ldrb	r3, [r3, #0]
 810b8aa:	061a      	lsls	r2, r3, #24
 810b8ac:	4b7c      	ldr	r3, [pc, #496]	@ (810baa0 <MX_LWIP_Init+0x250>)
 810b8ae:	785b      	ldrb	r3, [r3, #1]
 810b8b0:	041b      	lsls	r3, r3, #16
 810b8b2:	431a      	orrs	r2, r3
 810b8b4:	4b7a      	ldr	r3, [pc, #488]	@ (810baa0 <MX_LWIP_Init+0x250>)
 810b8b6:	789b      	ldrb	r3, [r3, #2]
 810b8b8:	021b      	lsls	r3, r3, #8
 810b8ba:	4313      	orrs	r3, r2
 810b8bc:	4a78      	ldr	r2, [pc, #480]	@ (810baa0 <MX_LWIP_Init+0x250>)
 810b8be:	78d2      	ldrb	r2, [r2, #3]
 810b8c0:	4313      	orrs	r3, r2
 810b8c2:	061a      	lsls	r2, r3, #24
 810b8c4:	4b76      	ldr	r3, [pc, #472]	@ (810baa0 <MX_LWIP_Init+0x250>)
 810b8c6:	781b      	ldrb	r3, [r3, #0]
 810b8c8:	0619      	lsls	r1, r3, #24
 810b8ca:	4b75      	ldr	r3, [pc, #468]	@ (810baa0 <MX_LWIP_Init+0x250>)
 810b8cc:	785b      	ldrb	r3, [r3, #1]
 810b8ce:	041b      	lsls	r3, r3, #16
 810b8d0:	4319      	orrs	r1, r3
 810b8d2:	4b73      	ldr	r3, [pc, #460]	@ (810baa0 <MX_LWIP_Init+0x250>)
 810b8d4:	789b      	ldrb	r3, [r3, #2]
 810b8d6:	021b      	lsls	r3, r3, #8
 810b8d8:	430b      	orrs	r3, r1
 810b8da:	4971      	ldr	r1, [pc, #452]	@ (810baa0 <MX_LWIP_Init+0x250>)
 810b8dc:	78c9      	ldrb	r1, [r1, #3]
 810b8de:	430b      	orrs	r3, r1
 810b8e0:	021b      	lsls	r3, r3, #8
 810b8e2:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 810b8e6:	431a      	orrs	r2, r3
 810b8e8:	4b6d      	ldr	r3, [pc, #436]	@ (810baa0 <MX_LWIP_Init+0x250>)
 810b8ea:	781b      	ldrb	r3, [r3, #0]
 810b8ec:	0619      	lsls	r1, r3, #24
 810b8ee:	4b6c      	ldr	r3, [pc, #432]	@ (810baa0 <MX_LWIP_Init+0x250>)
 810b8f0:	785b      	ldrb	r3, [r3, #1]
 810b8f2:	041b      	lsls	r3, r3, #16
 810b8f4:	4319      	orrs	r1, r3
 810b8f6:	4b6a      	ldr	r3, [pc, #424]	@ (810baa0 <MX_LWIP_Init+0x250>)
 810b8f8:	789b      	ldrb	r3, [r3, #2]
 810b8fa:	021b      	lsls	r3, r3, #8
 810b8fc:	430b      	orrs	r3, r1
 810b8fe:	4968      	ldr	r1, [pc, #416]	@ (810baa0 <MX_LWIP_Init+0x250>)
 810b900:	78c9      	ldrb	r1, [r1, #3]
 810b902:	430b      	orrs	r3, r1
 810b904:	0a1b      	lsrs	r3, r3, #8
 810b906:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 810b90a:	431a      	orrs	r2, r3
 810b90c:	4b64      	ldr	r3, [pc, #400]	@ (810baa0 <MX_LWIP_Init+0x250>)
 810b90e:	781b      	ldrb	r3, [r3, #0]
 810b910:	0619      	lsls	r1, r3, #24
 810b912:	4b63      	ldr	r3, [pc, #396]	@ (810baa0 <MX_LWIP_Init+0x250>)
 810b914:	785b      	ldrb	r3, [r3, #1]
 810b916:	041b      	lsls	r3, r3, #16
 810b918:	4319      	orrs	r1, r3
 810b91a:	4b61      	ldr	r3, [pc, #388]	@ (810baa0 <MX_LWIP_Init+0x250>)
 810b91c:	789b      	ldrb	r3, [r3, #2]
 810b91e:	021b      	lsls	r3, r3, #8
 810b920:	430b      	orrs	r3, r1
 810b922:	495f      	ldr	r1, [pc, #380]	@ (810baa0 <MX_LWIP_Init+0x250>)
 810b924:	78c9      	ldrb	r1, [r1, #3]
 810b926:	430b      	orrs	r3, r1
 810b928:	0e1b      	lsrs	r3, r3, #24
 810b92a:	4313      	orrs	r3, r2
 810b92c:	4a5f      	ldr	r2, [pc, #380]	@ (810baac <MX_LWIP_Init+0x25c>)
 810b92e:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 810b930:	4b5c      	ldr	r3, [pc, #368]	@ (810baa4 <MX_LWIP_Init+0x254>)
 810b932:	781b      	ldrb	r3, [r3, #0]
 810b934:	061a      	lsls	r2, r3, #24
 810b936:	4b5b      	ldr	r3, [pc, #364]	@ (810baa4 <MX_LWIP_Init+0x254>)
 810b938:	785b      	ldrb	r3, [r3, #1]
 810b93a:	041b      	lsls	r3, r3, #16
 810b93c:	431a      	orrs	r2, r3
 810b93e:	4b59      	ldr	r3, [pc, #356]	@ (810baa4 <MX_LWIP_Init+0x254>)
 810b940:	789b      	ldrb	r3, [r3, #2]
 810b942:	021b      	lsls	r3, r3, #8
 810b944:	4313      	orrs	r3, r2
 810b946:	4a57      	ldr	r2, [pc, #348]	@ (810baa4 <MX_LWIP_Init+0x254>)
 810b948:	78d2      	ldrb	r2, [r2, #3]
 810b94a:	4313      	orrs	r3, r2
 810b94c:	061a      	lsls	r2, r3, #24
 810b94e:	4b55      	ldr	r3, [pc, #340]	@ (810baa4 <MX_LWIP_Init+0x254>)
 810b950:	781b      	ldrb	r3, [r3, #0]
 810b952:	0619      	lsls	r1, r3, #24
 810b954:	4b53      	ldr	r3, [pc, #332]	@ (810baa4 <MX_LWIP_Init+0x254>)
 810b956:	785b      	ldrb	r3, [r3, #1]
 810b958:	041b      	lsls	r3, r3, #16
 810b95a:	4319      	orrs	r1, r3
 810b95c:	4b51      	ldr	r3, [pc, #324]	@ (810baa4 <MX_LWIP_Init+0x254>)
 810b95e:	789b      	ldrb	r3, [r3, #2]
 810b960:	021b      	lsls	r3, r3, #8
 810b962:	430b      	orrs	r3, r1
 810b964:	494f      	ldr	r1, [pc, #316]	@ (810baa4 <MX_LWIP_Init+0x254>)
 810b966:	78c9      	ldrb	r1, [r1, #3]
 810b968:	430b      	orrs	r3, r1
 810b96a:	021b      	lsls	r3, r3, #8
 810b96c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 810b970:	431a      	orrs	r2, r3
 810b972:	4b4c      	ldr	r3, [pc, #304]	@ (810baa4 <MX_LWIP_Init+0x254>)
 810b974:	781b      	ldrb	r3, [r3, #0]
 810b976:	0619      	lsls	r1, r3, #24
 810b978:	4b4a      	ldr	r3, [pc, #296]	@ (810baa4 <MX_LWIP_Init+0x254>)
 810b97a:	785b      	ldrb	r3, [r3, #1]
 810b97c:	041b      	lsls	r3, r3, #16
 810b97e:	4319      	orrs	r1, r3
 810b980:	4b48      	ldr	r3, [pc, #288]	@ (810baa4 <MX_LWIP_Init+0x254>)
 810b982:	789b      	ldrb	r3, [r3, #2]
 810b984:	021b      	lsls	r3, r3, #8
 810b986:	430b      	orrs	r3, r1
 810b988:	4946      	ldr	r1, [pc, #280]	@ (810baa4 <MX_LWIP_Init+0x254>)
 810b98a:	78c9      	ldrb	r1, [r1, #3]
 810b98c:	430b      	orrs	r3, r1
 810b98e:	0a1b      	lsrs	r3, r3, #8
 810b990:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 810b994:	431a      	orrs	r2, r3
 810b996:	4b43      	ldr	r3, [pc, #268]	@ (810baa4 <MX_LWIP_Init+0x254>)
 810b998:	781b      	ldrb	r3, [r3, #0]
 810b99a:	0619      	lsls	r1, r3, #24
 810b99c:	4b41      	ldr	r3, [pc, #260]	@ (810baa4 <MX_LWIP_Init+0x254>)
 810b99e:	785b      	ldrb	r3, [r3, #1]
 810b9a0:	041b      	lsls	r3, r3, #16
 810b9a2:	4319      	orrs	r1, r3
 810b9a4:	4b3f      	ldr	r3, [pc, #252]	@ (810baa4 <MX_LWIP_Init+0x254>)
 810b9a6:	789b      	ldrb	r3, [r3, #2]
 810b9a8:	021b      	lsls	r3, r3, #8
 810b9aa:	430b      	orrs	r3, r1
 810b9ac:	493d      	ldr	r1, [pc, #244]	@ (810baa4 <MX_LWIP_Init+0x254>)
 810b9ae:	78c9      	ldrb	r1, [r1, #3]
 810b9b0:	430b      	orrs	r3, r1
 810b9b2:	0e1b      	lsrs	r3, r3, #24
 810b9b4:	4313      	orrs	r3, r2
 810b9b6:	4a3e      	ldr	r2, [pc, #248]	@ (810bab0 <MX_LWIP_Init+0x260>)
 810b9b8:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 810b9ba:	4b3b      	ldr	r3, [pc, #236]	@ (810baa8 <MX_LWIP_Init+0x258>)
 810b9bc:	781b      	ldrb	r3, [r3, #0]
 810b9be:	061a      	lsls	r2, r3, #24
 810b9c0:	4b39      	ldr	r3, [pc, #228]	@ (810baa8 <MX_LWIP_Init+0x258>)
 810b9c2:	785b      	ldrb	r3, [r3, #1]
 810b9c4:	041b      	lsls	r3, r3, #16
 810b9c6:	431a      	orrs	r2, r3
 810b9c8:	4b37      	ldr	r3, [pc, #220]	@ (810baa8 <MX_LWIP_Init+0x258>)
 810b9ca:	789b      	ldrb	r3, [r3, #2]
 810b9cc:	021b      	lsls	r3, r3, #8
 810b9ce:	4313      	orrs	r3, r2
 810b9d0:	4a35      	ldr	r2, [pc, #212]	@ (810baa8 <MX_LWIP_Init+0x258>)
 810b9d2:	78d2      	ldrb	r2, [r2, #3]
 810b9d4:	4313      	orrs	r3, r2
 810b9d6:	061a      	lsls	r2, r3, #24
 810b9d8:	4b33      	ldr	r3, [pc, #204]	@ (810baa8 <MX_LWIP_Init+0x258>)
 810b9da:	781b      	ldrb	r3, [r3, #0]
 810b9dc:	0619      	lsls	r1, r3, #24
 810b9de:	4b32      	ldr	r3, [pc, #200]	@ (810baa8 <MX_LWIP_Init+0x258>)
 810b9e0:	785b      	ldrb	r3, [r3, #1]
 810b9e2:	041b      	lsls	r3, r3, #16
 810b9e4:	4319      	orrs	r1, r3
 810b9e6:	4b30      	ldr	r3, [pc, #192]	@ (810baa8 <MX_LWIP_Init+0x258>)
 810b9e8:	789b      	ldrb	r3, [r3, #2]
 810b9ea:	021b      	lsls	r3, r3, #8
 810b9ec:	430b      	orrs	r3, r1
 810b9ee:	492e      	ldr	r1, [pc, #184]	@ (810baa8 <MX_LWIP_Init+0x258>)
 810b9f0:	78c9      	ldrb	r1, [r1, #3]
 810b9f2:	430b      	orrs	r3, r1
 810b9f4:	021b      	lsls	r3, r3, #8
 810b9f6:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 810b9fa:	431a      	orrs	r2, r3
 810b9fc:	4b2a      	ldr	r3, [pc, #168]	@ (810baa8 <MX_LWIP_Init+0x258>)
 810b9fe:	781b      	ldrb	r3, [r3, #0]
 810ba00:	0619      	lsls	r1, r3, #24
 810ba02:	4b29      	ldr	r3, [pc, #164]	@ (810baa8 <MX_LWIP_Init+0x258>)
 810ba04:	785b      	ldrb	r3, [r3, #1]
 810ba06:	041b      	lsls	r3, r3, #16
 810ba08:	4319      	orrs	r1, r3
 810ba0a:	4b27      	ldr	r3, [pc, #156]	@ (810baa8 <MX_LWIP_Init+0x258>)
 810ba0c:	789b      	ldrb	r3, [r3, #2]
 810ba0e:	021b      	lsls	r3, r3, #8
 810ba10:	430b      	orrs	r3, r1
 810ba12:	4925      	ldr	r1, [pc, #148]	@ (810baa8 <MX_LWIP_Init+0x258>)
 810ba14:	78c9      	ldrb	r1, [r1, #3]
 810ba16:	430b      	orrs	r3, r1
 810ba18:	0a1b      	lsrs	r3, r3, #8
 810ba1a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 810ba1e:	431a      	orrs	r2, r3
 810ba20:	4b21      	ldr	r3, [pc, #132]	@ (810baa8 <MX_LWIP_Init+0x258>)
 810ba22:	781b      	ldrb	r3, [r3, #0]
 810ba24:	0619      	lsls	r1, r3, #24
 810ba26:	4b20      	ldr	r3, [pc, #128]	@ (810baa8 <MX_LWIP_Init+0x258>)
 810ba28:	785b      	ldrb	r3, [r3, #1]
 810ba2a:	041b      	lsls	r3, r3, #16
 810ba2c:	4319      	orrs	r1, r3
 810ba2e:	4b1e      	ldr	r3, [pc, #120]	@ (810baa8 <MX_LWIP_Init+0x258>)
 810ba30:	789b      	ldrb	r3, [r3, #2]
 810ba32:	021b      	lsls	r3, r3, #8
 810ba34:	430b      	orrs	r3, r1
 810ba36:	491c      	ldr	r1, [pc, #112]	@ (810baa8 <MX_LWIP_Init+0x258>)
 810ba38:	78c9      	ldrb	r1, [r1, #3]
 810ba3a:	430b      	orrs	r3, r1
 810ba3c:	0e1b      	lsrs	r3, r3, #24
 810ba3e:	4313      	orrs	r3, r2
 810ba40:	4a1c      	ldr	r2, [pc, #112]	@ (810bab4 <MX_LWIP_Init+0x264>)
 810ba42:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 810ba44:	4b1c      	ldr	r3, [pc, #112]	@ (810bab8 <MX_LWIP_Init+0x268>)
 810ba46:	9302      	str	r3, [sp, #8]
 810ba48:	4b1c      	ldr	r3, [pc, #112]	@ (810babc <MX_LWIP_Init+0x26c>)
 810ba4a:	9301      	str	r3, [sp, #4]
 810ba4c:	2300      	movs	r3, #0
 810ba4e:	9300      	str	r3, [sp, #0]
 810ba50:	4b18      	ldr	r3, [pc, #96]	@ (810bab4 <MX_LWIP_Init+0x264>)
 810ba52:	4a17      	ldr	r2, [pc, #92]	@ (810bab0 <MX_LWIP_Init+0x260>)
 810ba54:	4915      	ldr	r1, [pc, #84]	@ (810baac <MX_LWIP_Init+0x25c>)
 810ba56:	481a      	ldr	r0, [pc, #104]	@ (810bac0 <MX_LWIP_Init+0x270>)
 810ba58:	f011 fdf0 	bl	811d63c <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 810ba5c:	4818      	ldr	r0, [pc, #96]	@ (810bac0 <MX_LWIP_Init+0x270>)
 810ba5e:	f011 ff9f 	bl	811d9a0 <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 810ba62:	4817      	ldr	r0, [pc, #92]	@ (810bac0 <MX_LWIP_Init+0x270>)
 810ba64:	f011 ffac 	bl	811d9c0 <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 810ba68:	4916      	ldr	r1, [pc, #88]	@ (810bac4 <MX_LWIP_Init+0x274>)
 810ba6a:	4815      	ldr	r0, [pc, #84]	@ (810bac0 <MX_LWIP_Init+0x270>)
 810ba6c:	f012 f8aa 	bl	811dbc4 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 810ba70:	2224      	movs	r2, #36	@ 0x24
 810ba72:	2100      	movs	r1, #0
 810ba74:	4814      	ldr	r0, [pc, #80]	@ (810bac8 <MX_LWIP_Init+0x278>)
 810ba76:	f01b f911 	bl	8126c9c <memset>
  attributes.name = "EthLink";
 810ba7a:	4b13      	ldr	r3, [pc, #76]	@ (810bac8 <MX_LWIP_Init+0x278>)
 810ba7c:	4a13      	ldr	r2, [pc, #76]	@ (810bacc <MX_LWIP_Init+0x27c>)
 810ba7e:	601a      	str	r2, [r3, #0]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 810ba80:	4b11      	ldr	r3, [pc, #68]	@ (810bac8 <MX_LWIP_Init+0x278>)
 810ba82:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 810ba86:	615a      	str	r2, [r3, #20]
  attributes.priority = osPriorityBelowNormal;
 810ba88:	4b0f      	ldr	r3, [pc, #60]	@ (810bac8 <MX_LWIP_Init+0x278>)
 810ba8a:	2210      	movs	r2, #16
 810ba8c:	619a      	str	r2, [r3, #24]
  osThreadNew(ethernet_link_thread, &gnetif, &attributes);
 810ba8e:	4a0e      	ldr	r2, [pc, #56]	@ (810bac8 <MX_LWIP_Init+0x278>)
 810ba90:	490b      	ldr	r1, [pc, #44]	@ (810bac0 <MX_LWIP_Init+0x270>)
 810ba92:	480f      	ldr	r0, [pc, #60]	@ (810bad0 <MX_LWIP_Init+0x280>)
 810ba94:	f009 fead 	bl	81157f2 <osThreadNew>
/* USER CODE END H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 810ba98:	bf00      	nop
 810ba9a:	46bd      	mov	sp, r7
 810ba9c:	bd80      	pop	{r7, pc}
 810ba9e:	bf00      	nop
 810baa0:	1000034c 	.word	0x1000034c
 810baa4:	10000350 	.word	0x10000350
 810baa8:	10000354 	.word	0x10000354
 810baac:	10000340 	.word	0x10000340
 810bab0:	10000344 	.word	0x10000344
 810bab4:	10000348 	.word	0x10000348
 810bab8:	08124b9d 	.word	0x08124b9d
 810babc:	0810c021 	.word	0x0810c021
 810bac0:	1000030c 	.word	0x1000030c
 810bac4:	0810bad5 	.word	0x0810bad5
 810bac8:	10000358 	.word	0x10000358
 810bacc:	08127d30 	.word	0x08127d30
 810bad0:	0810c2e1 	.word	0x0810c2e1

0810bad4 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 810bad4:	b580      	push	{r7, lr}
 810bad6:	b090      	sub	sp, #64	@ 0x40
 810bad8:	af00      	add	r7, sp, #0
 810bada:	6078      	str	r0, [r7, #4]
  if (netif_is_up(netif))
 810badc:	687b      	ldr	r3, [r7, #4]
 810bade:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 810bae2:	f003 0301 	and.w	r3, r3, #1
 810bae6:	b2db      	uxtb	r3, r3
 810bae8:	2b00      	cmp	r3, #0
 810baea:	d015      	beq.n	810bb18 <ethernet_link_status_updated+0x44>
  {
/* USER CODE BEGIN 5 */
	SMessage msg;
	msg.event_type = EVENT_ETHERNET_PLUGGED;
 810baec:	2383      	movs	r3, #131	@ 0x83
 810baee:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
	msg.message_data.ethernet_plugged = true;
 810baf2:	2301      	movs	r3, #1
 810baf4:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
	msg.event_sender = EVENT_CLIENT_LWIP_LINK_STATE_MANAGER;
 810baf8:	2304      	movs	r3, #4
 810bafa:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
	msg.event_receiver = EVENT_CLIENT_ETHERNET_CONNECTION_MANAGER;
 810bafe:	2303      	movs	r3, #3
 810bb00:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
	xQueueSend(queueToEventManagerCM4, (void*)&msg, portMAX_DELAY);
 810bb04:	4b10      	ldr	r3, [pc, #64]	@ (810bb48 <ethernet_link_status_updated+0x74>)
 810bb06:	6818      	ldr	r0, [r3, #0]
 810bb08:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 810bb0c:	2300      	movs	r3, #0
 810bb0e:	f04f 32ff 	mov.w	r2, #4294967295
 810bb12:	f00b fa0f 	bl	8116f34 <xQueueGenericSend>
	msg.event_sender = EVENT_CLIENT_LWIP_LINK_STATE_MANAGER;
	msg.event_receiver = EVENT_CLIENT_ETHERNET_CONNECTION_MANAGER;
    xQueueSend(queueToEventManagerCM4, (void*)&msg, portMAX_DELAY);
/* USER CODE END 6 */
  }
}
 810bb16:	e012      	b.n	810bb3e <ethernet_link_status_updated+0x6a>
	msg.event_type = EVENT_ETHERNET_PLUGGED;
 810bb18:	2383      	movs	r3, #131	@ 0x83
 810bb1a:	723b      	strb	r3, [r7, #8]
	msg.message_data.ethernet_plugged = false;
 810bb1c:	2300      	movs	r3, #0
 810bb1e:	733b      	strb	r3, [r7, #12]
	msg.event_sender = EVENT_CLIENT_LWIP_LINK_STATE_MANAGER;
 810bb20:	2304      	movs	r3, #4
 810bb22:	f887 3020 	strb.w	r3, [r7, #32]
	msg.event_receiver = EVENT_CLIENT_ETHERNET_CONNECTION_MANAGER;
 810bb26:	2303      	movs	r3, #3
 810bb28:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
    xQueueSend(queueToEventManagerCM4, (void*)&msg, portMAX_DELAY);
 810bb2c:	4b06      	ldr	r3, [pc, #24]	@ (810bb48 <ethernet_link_status_updated+0x74>)
 810bb2e:	6818      	ldr	r0, [r3, #0]
 810bb30:	f107 0108 	add.w	r1, r7, #8
 810bb34:	2300      	movs	r3, #0
 810bb36:	f04f 32ff 	mov.w	r2, #4294967295
 810bb3a:	f00b f9fb 	bl	8116f34 <xQueueGenericSend>
}
 810bb3e:	bf00      	nop
 810bb40:	3740      	adds	r7, #64	@ 0x40
 810bb42:	46bd      	mov	sp, r7
 810bb44:	bd80      	pop	{r7, pc}
 810bb46:	bf00      	nop
 810bb48:	100001e8 	.word	0x100001e8

0810bb4c <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 810bb4c:	b580      	push	{r7, lr}
 810bb4e:	b082      	sub	sp, #8
 810bb50:	af00      	add	r7, sp, #0
 810bb52:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 810bb54:	4b04      	ldr	r3, [pc, #16]	@ (810bb68 <HAL_ETH_RxCpltCallback+0x1c>)
 810bb56:	681b      	ldr	r3, [r3, #0]
 810bb58:	4618      	mov	r0, r3
 810bb5a:	f00a f8e1 	bl	8115d20 <osSemaphoreRelease>
}
 810bb5e:	bf00      	nop
 810bb60:	3708      	adds	r7, #8
 810bb62:	46bd      	mov	sp, r7
 810bb64:	bd80      	pop	{r7, pc}
 810bb66:	bf00      	nop
 810bb68:	10000384 	.word	0x10000384

0810bb6c <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 810bb6c:	b580      	push	{r7, lr}
 810bb6e:	b082      	sub	sp, #8
 810bb70:	af00      	add	r7, sp, #0
 810bb72:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 810bb74:	4b04      	ldr	r3, [pc, #16]	@ (810bb88 <HAL_ETH_TxCpltCallback+0x1c>)
 810bb76:	681b      	ldr	r3, [r3, #0]
 810bb78:	4618      	mov	r0, r3
 810bb7a:	f00a f8d1 	bl	8115d20 <osSemaphoreRelease>
}
 810bb7e:	bf00      	nop
 810bb80:	3708      	adds	r7, #8
 810bb82:	46bd      	mov	sp, r7
 810bb84:	bd80      	pop	{r7, pc}
 810bb86:	bf00      	nop
 810bb88:	10000388 	.word	0x10000388

0810bb8c <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 810bb8c:	b580      	push	{r7, lr}
 810bb8e:	b082      	sub	sp, #8
 810bb90:	af00      	add	r7, sp, #0
 810bb92:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMACSR_RBU) == ETH_DMACSR_RBU)
 810bb94:	6878      	ldr	r0, [r7, #4]
 810bb96:	f004 faa4 	bl	81100e2 <HAL_ETH_GetDMAError>
 810bb9a:	4603      	mov	r3, r0
 810bb9c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 810bba0:	2b80      	cmp	r3, #128	@ 0x80
 810bba2:	d104      	bne.n	810bbae <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 810bba4:	4b04      	ldr	r3, [pc, #16]	@ (810bbb8 <HAL_ETH_ErrorCallback+0x2c>)
 810bba6:	681b      	ldr	r3, [r3, #0]
 810bba8:	4618      	mov	r0, r3
 810bbaa:	f00a f8b9 	bl	8115d20 <osSemaphoreRelease>
  }
}
 810bbae:	bf00      	nop
 810bbb0:	3708      	adds	r7, #8
 810bbb2:	46bd      	mov	sp, r7
 810bbb4:	bd80      	pop	{r7, pc}
 810bbb6:	bf00      	nop
 810bbb8:	10000384 	.word	0x10000384

0810bbbc <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 810bbbc:	b580      	push	{r7, lr}
 810bbbe:	b0aa      	sub	sp, #168	@ 0xa8
 810bbc0:	af00      	add	r7, sp, #0
 810bbc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 810bbc4:	2300      	movs	r3, #0
 810bbc6:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
/* USER CODE BEGIN OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  osThreadAttr_t attributes;
/* USER CODE END OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  uint32_t duplex, speed = 0;
 810bbca:	2300      	movs	r3, #0
 810bbcc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  int32_t PHYLinkState = 0;
 810bbd0:	2300      	movs	r3, #0
 810bbd2:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  ETH_MACConfigTypeDef MACConf = {0};
 810bbd6:	f107 0310 	add.w	r3, r7, #16
 810bbda:	2264      	movs	r2, #100	@ 0x64
 810bbdc:	2100      	movs	r1, #0
 810bbde:	4618      	mov	r0, r3
 810bbe0:	f01b f85c 	bl	8126c9c <memset>
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 810bbe4:	4b89      	ldr	r3, [pc, #548]	@ (810be0c <low_level_init+0x250>)
 810bbe6:	4a8a      	ldr	r2, [pc, #552]	@ (810be10 <low_level_init+0x254>)
 810bbe8:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 810bbea:	2300      	movs	r3, #0
 810bbec:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 810bbee:	2380      	movs	r3, #128	@ 0x80
 810bbf0:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 810bbf2:	23e1      	movs	r3, #225	@ 0xe1
 810bbf4:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 810bbf6:	2300      	movs	r3, #0
 810bbf8:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 810bbfa:	2300      	movs	r3, #0
 810bbfc:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 810bbfe:	2300      	movs	r3, #0
 810bc00:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 810bc02:	4a82      	ldr	r2, [pc, #520]	@ (810be0c <low_level_init+0x250>)
 810bc04:	f107 0308 	add.w	r3, r7, #8
 810bc08:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 810bc0a:	4b80      	ldr	r3, [pc, #512]	@ (810be0c <low_level_init+0x250>)
 810bc0c:	2201      	movs	r2, #1
 810bc0e:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 810bc10:	4b7e      	ldr	r3, [pc, #504]	@ (810be0c <low_level_init+0x250>)
 810bc12:	4a80      	ldr	r2, [pc, #512]	@ (810be14 <low_level_init+0x258>)
 810bc14:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 810bc16:	4b7d      	ldr	r3, [pc, #500]	@ (810be0c <low_level_init+0x250>)
 810bc18:	4a7f      	ldr	r2, [pc, #508]	@ (810be18 <low_level_init+0x25c>)
 810bc1a:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 810bc1c:	4b7b      	ldr	r3, [pc, #492]	@ (810be0c <low_level_init+0x250>)
 810bc1e:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 810bc22:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 810bc24:	4879      	ldr	r0, [pc, #484]	@ (810be0c <low_level_init+0x250>)
 810bc26:	f003 fa6b 	bl	810f100 <HAL_ETH_Init>
 810bc2a:	4603      	mov	r3, r0
 810bc2c:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 810bc30:	2238      	movs	r2, #56	@ 0x38
 810bc32:	2100      	movs	r1, #0
 810bc34:	4879      	ldr	r0, [pc, #484]	@ (810be1c <low_level_init+0x260>)
 810bc36:	f01b f831 	bl	8126c9c <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 810bc3a:	4b78      	ldr	r3, [pc, #480]	@ (810be1c <low_level_init+0x260>)
 810bc3c:	2221      	movs	r2, #33	@ 0x21
 810bc3e:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 810bc40:	4b76      	ldr	r3, [pc, #472]	@ (810be1c <low_level_init+0x260>)
 810bc42:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 810bc46:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 810bc48:	4b74      	ldr	r3, [pc, #464]	@ (810be1c <low_level_init+0x260>)
 810bc4a:	2200      	movs	r2, #0
 810bc4c:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 810bc4e:	4874      	ldr	r0, [pc, #464]	@ (810be20 <low_level_init+0x264>)
 810bc50:	f011 fbae 	bl	811d3b0 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 810bc54:	687b      	ldr	r3, [r7, #4]
 810bc56:	2206      	movs	r2, #6
 810bc58:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 810bc5c:	4b6b      	ldr	r3, [pc, #428]	@ (810be0c <low_level_init+0x250>)
 810bc5e:	685b      	ldr	r3, [r3, #4]
 810bc60:	781a      	ldrb	r2, [r3, #0]
 810bc62:	687b      	ldr	r3, [r7, #4]
 810bc64:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 810bc68:	4b68      	ldr	r3, [pc, #416]	@ (810be0c <low_level_init+0x250>)
 810bc6a:	685b      	ldr	r3, [r3, #4]
 810bc6c:	785a      	ldrb	r2, [r3, #1]
 810bc6e:	687b      	ldr	r3, [r7, #4]
 810bc70:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 810bc74:	4b65      	ldr	r3, [pc, #404]	@ (810be0c <low_level_init+0x250>)
 810bc76:	685b      	ldr	r3, [r3, #4]
 810bc78:	789a      	ldrb	r2, [r3, #2]
 810bc7a:	687b      	ldr	r3, [r7, #4]
 810bc7c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 810bc80:	4b62      	ldr	r3, [pc, #392]	@ (810be0c <low_level_init+0x250>)
 810bc82:	685b      	ldr	r3, [r3, #4]
 810bc84:	78da      	ldrb	r2, [r3, #3]
 810bc86:	687b      	ldr	r3, [r7, #4]
 810bc88:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 810bc8c:	4b5f      	ldr	r3, [pc, #380]	@ (810be0c <low_level_init+0x250>)
 810bc8e:	685b      	ldr	r3, [r3, #4]
 810bc90:	791a      	ldrb	r2, [r3, #4]
 810bc92:	687b      	ldr	r3, [r7, #4]
 810bc94:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 810bc98:	4b5c      	ldr	r3, [pc, #368]	@ (810be0c <low_level_init+0x250>)
 810bc9a:	685b      	ldr	r3, [r3, #4]
 810bc9c:	795a      	ldrb	r2, [r3, #5]
 810bc9e:	687b      	ldr	r3, [r7, #4]
 810bca0:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 810bca4:	687b      	ldr	r3, [r7, #4]
 810bca6:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 810bcaa:	849a      	strh	r2, [r3, #36]	@ 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 810bcac:	687b      	ldr	r3, [r7, #4]
 810bcae:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 810bcb2:	f043 030a 	orr.w	r3, r3, #10
 810bcb6:	b2da      	uxtb	r2, r3
 810bcb8:	687b      	ldr	r3, [r7, #4]
 810bcba:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  RxPktSemaphore = osSemaphoreNew(1, 0, NULL);
 810bcbe:	2200      	movs	r2, #0
 810bcc0:	2100      	movs	r1, #0
 810bcc2:	2001      	movs	r0, #1
 810bcc4:	f009 ff50 	bl	8115b68 <osSemaphoreNew>
 810bcc8:	4603      	mov	r3, r0
 810bcca:	4a56      	ldr	r2, [pc, #344]	@ (810be24 <low_level_init+0x268>)
 810bccc:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  TxPktSemaphore = osSemaphoreNew(1, 0, NULL);
 810bcce:	2200      	movs	r2, #0
 810bcd0:	2100      	movs	r1, #0
 810bcd2:	2001      	movs	r0, #1
 810bcd4:	f009 ff48 	bl	8115b68 <osSemaphoreNew>
 810bcd8:	4603      	mov	r3, r0
 810bcda:	4a53      	ldr	r2, [pc, #332]	@ (810be28 <low_level_init+0x26c>)
 810bcdc:	6013      	str	r3, [r2, #0]

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 810bcde:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 810bce2:	2224      	movs	r2, #36	@ 0x24
 810bce4:	2100      	movs	r1, #0
 810bce6:	4618      	mov	r0, r3
 810bce8:	f01a ffd8 	bl	8126c9c <memset>
  attributes.name = "EthIf";
 810bcec:	4b4f      	ldr	r3, [pc, #316]	@ (810be2c <low_level_init+0x270>)
 810bcee:	677b      	str	r3, [r7, #116]	@ 0x74
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 810bcf0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 810bcf4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  attributes.priority = osPriorityRealtime;
 810bcf8:	2330      	movs	r3, #48	@ 0x30
 810bcfa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  osThreadNew(ethernetif_input, netif, &attributes);
 810bcfe:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 810bd02:	461a      	mov	r2, r3
 810bd04:	6879      	ldr	r1, [r7, #4]
 810bd06:	484a      	ldr	r0, [pc, #296]	@ (810be30 <low_level_init+0x274>)
 810bd08:	f009 fd73 	bl	81157f2 <osThreadNew>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 810bd0c:	4949      	ldr	r1, [pc, #292]	@ (810be34 <low_level_init+0x278>)
 810bd0e:	484a      	ldr	r0, [pc, #296]	@ (810be38 <low_level_init+0x27c>)
 810bd10:	f002 ff4d 	bl	810ebae <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  if(LAN8742_Init(&LAN8742) != LAN8742_STATUS_OK)
 810bd14:	4848      	ldr	r0, [pc, #288]	@ (810be38 <low_level_init+0x27c>)
 810bd16:	f002 ff7c 	bl	810ec12 <LAN8742_Init>
 810bd1a:	4603      	mov	r3, r0
 810bd1c:	2b00      	cmp	r3, #0
 810bd1e:	d006      	beq.n	810bd2e <low_level_init+0x172>
  {
    netif_set_link_down(netif);
 810bd20:	6878      	ldr	r0, [r7, #4]
 810bd22:	f011 ff1f 	bl	811db64 <netif_set_link_down>
    netif_set_down(netif);
 810bd26:	6878      	ldr	r0, [r7, #4]
 810bd28:	f011 feb6 	bl	811da98 <netif_set_down>
 810bd2c:	e06b      	b.n	810be06 <low_level_init+0x24a>
    return;
  }

  if (hal_eth_init_status == HAL_OK)
 810bd2e:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 810bd32:	2b00      	cmp	r3, #0
 810bd34:	d165      	bne.n	810be02 <low_level_init+0x246>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 810bd36:	4840      	ldr	r0, [pc, #256]	@ (810be38 <low_level_init+0x27c>)
 810bd38:	f002 ffb8 	bl	810ecac <LAN8742_GetLinkState>
 810bd3c:	f8c7 0098 	str.w	r0, [r7, #152]	@ 0x98

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 810bd40:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 810bd44:	2b01      	cmp	r3, #1
 810bd46:	dc06      	bgt.n	810bd56 <low_level_init+0x19a>
    {
      netif_set_link_down(netif);
 810bd48:	6878      	ldr	r0, [r7, #4]
 810bd4a:	f011 ff0b 	bl	811db64 <netif_set_link_down>
      netif_set_down(netif);
 810bd4e:	6878      	ldr	r0, [r7, #4]
 810bd50:	f011 fea2 	bl	811da98 <netif_set_down>
 810bd54:	e057      	b.n	810be06 <low_level_init+0x24a>
    }
    else
    {
      switch (PHYLinkState)
 810bd56:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 810bd5a:	3b02      	subs	r3, #2
 810bd5c:	2b03      	cmp	r3, #3
 810bd5e:	d82b      	bhi.n	810bdb8 <low_level_init+0x1fc>
 810bd60:	a201      	add	r2, pc, #4	@ (adr r2, 810bd68 <low_level_init+0x1ac>)
 810bd62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810bd66:	bf00      	nop
 810bd68:	0810bd79 	.word	0x0810bd79
 810bd6c:	0810bd8b 	.word	0x0810bd8b
 810bd70:	0810bd9b 	.word	0x0810bd9b
 810bd74:	0810bdab 	.word	0x0810bdab
      {
      case LAN8742_STATUS_100MBITS_FULLDUPLEX:
        duplex = ETH_FULLDUPLEX_MODE;
 810bd78:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 810bd7c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_100M;
 810bd80:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 810bd84:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 810bd88:	e01f      	b.n	810bdca <low_level_init+0x20e>
      case LAN8742_STATUS_100MBITS_HALFDUPLEX:
        duplex = ETH_HALFDUPLEX_MODE;
 810bd8a:	2300      	movs	r3, #0
 810bd8c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_100M;
 810bd90:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 810bd94:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 810bd98:	e017      	b.n	810bdca <low_level_init+0x20e>
      case LAN8742_STATUS_10MBITS_FULLDUPLEX:
        duplex = ETH_FULLDUPLEX_MODE;
 810bd9a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 810bd9e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_10M;
 810bda2:	2300      	movs	r3, #0
 810bda4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 810bda8:	e00f      	b.n	810bdca <low_level_init+0x20e>
      case LAN8742_STATUS_10MBITS_HALFDUPLEX:
        duplex = ETH_HALFDUPLEX_MODE;
 810bdaa:	2300      	movs	r3, #0
 810bdac:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_10M;
 810bdb0:	2300      	movs	r3, #0
 810bdb2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 810bdb6:	e008      	b.n	810bdca <low_level_init+0x20e>
      default:
        duplex = ETH_FULLDUPLEX_MODE;
 810bdb8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 810bdbc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_100M;
 810bdc0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 810bdc4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 810bdc8:	bf00      	nop
      }

    /* Get MAC Config MAC */
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 810bdca:	f107 0310 	add.w	r3, r7, #16
 810bdce:	4619      	mov	r1, r3
 810bdd0:	480e      	ldr	r0, [pc, #56]	@ (810be0c <low_level_init+0x250>)
 810bdd2:	f003 ff3b 	bl	810fc4c <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 810bdd6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 810bdda:	62bb      	str	r3, [r7, #40]	@ 0x28
    MACConf.Speed = speed;
 810bddc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 810bde0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 810bde2:	f107 0310 	add.w	r3, r7, #16
 810bde6:	4619      	mov	r1, r3
 810bde8:	4808      	ldr	r0, [pc, #32]	@ (810be0c <low_level_init+0x250>)
 810bdea:	f004 f903 	bl	810fff4 <HAL_ETH_SetMACConfig>

    HAL_ETH_Start_IT(&heth);
 810bdee:	4807      	ldr	r0, [pc, #28]	@ (810be0c <low_level_init+0x250>)
 810bdf0:	f003 fa84 	bl	810f2fc <HAL_ETH_Start_IT>
    netif_set_up(netif);
 810bdf4:	6878      	ldr	r0, [r7, #4]
 810bdf6:	f011 fde3 	bl	811d9c0 <netif_set_up>
    netif_set_link_up(netif);
 810bdfa:	6878      	ldr	r0, [r7, #4]
 810bdfc:	f011 fe7e 	bl	811dafc <netif_set_link_up>
 810be00:	e001      	b.n	810be06 <low_level_init+0x24a>
    }

  }
  else
  {
    Error_Handler();
 810be02:	f7f5 fce5 	bl	81017d0 <Error_Handler>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 810be06:	37a8      	adds	r7, #168	@ 0xa8
 810be08:	46bd      	mov	sp, r7
 810be0a:	bd80      	pop	{r7, pc}
 810be0c:	1000038c 	.word	0x1000038c
 810be10:	40028000 	.word	0x40028000
 810be14:	10040100 	.word	0x10040100
 810be18:	10040000 	.word	0x10040000
 810be1c:	1000043c 	.word	0x1000043c
 810be20:	0812adf4 	.word	0x0812adf4
 810be24:	10000384 	.word	0x10000384
 810be28:	10000388 	.word	0x10000388
 810be2c:	08127d38 	.word	0x08127d38
 810be30:	0810bfcd 	.word	0x0810bfcd
 810be34:	10000000 	.word	0x10000000
 810be38:	10000474 	.word	0x10000474

0810be3c <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 810be3c:	b580      	push	{r7, lr}
 810be3e:	b092      	sub	sp, #72	@ 0x48
 810be40:	af00      	add	r7, sp, #0
 810be42:	6078      	str	r0, [r7, #4]
 810be44:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 810be46:	2300      	movs	r3, #0
 810be48:	647b      	str	r3, [r7, #68]	@ 0x44
  struct pbuf *q = NULL;
 810be4a:	2300      	movs	r3, #0
 810be4c:	643b      	str	r3, [r7, #64]	@ 0x40
  err_t errval = ERR_OK;
 810be4e:	2300      	movs	r3, #0
 810be50:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 810be54:	f107 030c 	add.w	r3, r7, #12
 810be58:	2230      	movs	r2, #48	@ 0x30
 810be5a:	2100      	movs	r1, #0
 810be5c:	4618      	mov	r0, r3
 810be5e:	f01a ff1d 	bl	8126c9c <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 810be62:	f107 030c 	add.w	r3, r7, #12
 810be66:	2230      	movs	r2, #48	@ 0x30
 810be68:	2100      	movs	r1, #0
 810be6a:	4618      	mov	r0, r3
 810be6c:	f01a ff16 	bl	8126c9c <memset>

  for(q = p; q != NULL; q = q->next)
 810be70:	683b      	ldr	r3, [r7, #0]
 810be72:	643b      	str	r3, [r7, #64]	@ 0x40
 810be74:	e045      	b.n	810bf02 <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 810be76:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 810be78:	2b03      	cmp	r3, #3
 810be7a:	d902      	bls.n	810be82 <low_level_output+0x46>
      return ERR_IF;
 810be7c:	f06f 030b 	mvn.w	r3, #11
 810be80:	e07f      	b.n	810bf82 <low_level_output+0x146>

    Txbuffer[i].buffer = q->payload;
 810be82:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 810be84:	6859      	ldr	r1, [r3, #4]
 810be86:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 810be88:	4613      	mov	r3, r2
 810be8a:	005b      	lsls	r3, r3, #1
 810be8c:	4413      	add	r3, r2
 810be8e:	009b      	lsls	r3, r3, #2
 810be90:	3348      	adds	r3, #72	@ 0x48
 810be92:	443b      	add	r3, r7
 810be94:	3b3c      	subs	r3, #60	@ 0x3c
 810be96:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 810be98:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 810be9a:	895b      	ldrh	r3, [r3, #10]
 810be9c:	4619      	mov	r1, r3
 810be9e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 810bea0:	4613      	mov	r3, r2
 810bea2:	005b      	lsls	r3, r3, #1
 810bea4:	4413      	add	r3, r2
 810bea6:	009b      	lsls	r3, r3, #2
 810bea8:	3348      	adds	r3, #72	@ 0x48
 810beaa:	443b      	add	r3, r7
 810beac:	3b38      	subs	r3, #56	@ 0x38
 810beae:	6019      	str	r1, [r3, #0]

    if(i>0)
 810beb0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 810beb2:	2b00      	cmp	r3, #0
 810beb4:	d011      	beq.n	810beda <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 810beb6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 810beb8:	1e5a      	subs	r2, r3, #1
 810beba:	f107 000c 	add.w	r0, r7, #12
 810bebe:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 810bec0:	460b      	mov	r3, r1
 810bec2:	005b      	lsls	r3, r3, #1
 810bec4:	440b      	add	r3, r1
 810bec6:	009b      	lsls	r3, r3, #2
 810bec8:	18c1      	adds	r1, r0, r3
 810beca:	4613      	mov	r3, r2
 810becc:	005b      	lsls	r3, r3, #1
 810bece:	4413      	add	r3, r2
 810bed0:	009b      	lsls	r3, r3, #2
 810bed2:	3348      	adds	r3, #72	@ 0x48
 810bed4:	443b      	add	r3, r7
 810bed6:	3b34      	subs	r3, #52	@ 0x34
 810bed8:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 810beda:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 810bedc:	681b      	ldr	r3, [r3, #0]
 810bede:	2b00      	cmp	r3, #0
 810bee0:	d109      	bne.n	810bef6 <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 810bee2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 810bee4:	4613      	mov	r3, r2
 810bee6:	005b      	lsls	r3, r3, #1
 810bee8:	4413      	add	r3, r2
 810beea:	009b      	lsls	r3, r3, #2
 810beec:	3348      	adds	r3, #72	@ 0x48
 810beee:	443b      	add	r3, r7
 810bef0:	3b34      	subs	r3, #52	@ 0x34
 810bef2:	2200      	movs	r2, #0
 810bef4:	601a      	str	r2, [r3, #0]
    }

    i++;
 810bef6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 810bef8:	3301      	adds	r3, #1
 810befa:	647b      	str	r3, [r7, #68]	@ 0x44
  for(q = p; q != NULL; q = q->next)
 810befc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 810befe:	681b      	ldr	r3, [r3, #0]
 810bf00:	643b      	str	r3, [r7, #64]	@ 0x40
 810bf02:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 810bf04:	2b00      	cmp	r3, #0
 810bf06:	d1b6      	bne.n	810be76 <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 810bf08:	683b      	ldr	r3, [r7, #0]
 810bf0a:	891b      	ldrh	r3, [r3, #8]
 810bf0c:	461a      	mov	r2, r3
 810bf0e:	4b1f      	ldr	r3, [pc, #124]	@ (810bf8c <low_level_output+0x150>)
 810bf10:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 810bf12:	4a1e      	ldr	r2, [pc, #120]	@ (810bf8c <low_level_output+0x150>)
 810bf14:	f107 030c 	add.w	r3, r7, #12
 810bf18:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 810bf1a:	4a1c      	ldr	r2, [pc, #112]	@ (810bf8c <low_level_output+0x150>)
 810bf1c:	683b      	ldr	r3, [r7, #0]
 810bf1e:	6353      	str	r3, [r2, #52]	@ 0x34

  pbuf_ref(p);
 810bf20:	6838      	ldr	r0, [r7, #0]
 810bf22:	f012 faa1 	bl	811e468 <pbuf_ref>

  do
  {
    if(HAL_ETH_Transmit_IT(&heth, &TxConfig) == HAL_OK)
 810bf26:	4919      	ldr	r1, [pc, #100]	@ (810bf8c <low_level_output+0x150>)
 810bf28:	4819      	ldr	r0, [pc, #100]	@ (810bf90 <low_level_output+0x154>)
 810bf2a:	f003 fad4 	bl	810f4d6 <HAL_ETH_Transmit_IT>
 810bf2e:	4603      	mov	r3, r0
 810bf30:	2b00      	cmp	r3, #0
 810bf32:	d103      	bne.n	810bf3c <low_level_output+0x100>
    {
      errval = ERR_OK;
 810bf34:	2300      	movs	r3, #0
 810bf36:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 810bf3a:	e01b      	b.n	810bf74 <low_level_output+0x138>
    }
    else
    {

      if(HAL_ETH_GetError(&heth) & HAL_ETH_ERROR_BUSY)
 810bf3c:	4814      	ldr	r0, [pc, #80]	@ (810bf90 <low_level_output+0x154>)
 810bf3e:	f004 f8c3 	bl	81100c8 <HAL_ETH_GetError>
 810bf42:	4603      	mov	r3, r0
 810bf44:	f003 0302 	and.w	r3, r3, #2
 810bf48:	2b00      	cmp	r3, #0
 810bf4a:	d00d      	beq.n	810bf68 <low_level_output+0x12c>
      {
        /* Wait for descriptors to become available */
        osSemaphoreAcquire(TxPktSemaphore, ETHIF_TX_TIMEOUT);
 810bf4c:	4b11      	ldr	r3, [pc, #68]	@ (810bf94 <low_level_output+0x158>)
 810bf4e:	681b      	ldr	r3, [r3, #0]
 810bf50:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 810bf54:	4618      	mov	r0, r3
 810bf56:	f009 fe91 	bl	8115c7c <osSemaphoreAcquire>
        HAL_ETH_ReleaseTxPacket(&heth);
 810bf5a:	480d      	ldr	r0, [pc, #52]	@ (810bf90 <low_level_output+0x154>)
 810bf5c:	f003 fc42 	bl	810f7e4 <HAL_ETH_ReleaseTxPacket>
        errval = ERR_BUF;
 810bf60:	23fe      	movs	r3, #254	@ 0xfe
 810bf62:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 810bf66:	e005      	b.n	810bf74 <low_level_output+0x138>
      }
      else
      {
        /* Other error */
        pbuf_free(p);
 810bf68:	6838      	ldr	r0, [r7, #0]
 810bf6a:	f012 f9d7 	bl	811e31c <pbuf_free>
        errval =  ERR_IF;
 810bf6e:	23f4      	movs	r3, #244	@ 0xf4
 810bf70:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
      }
    }
  }while(errval == ERR_BUF);
 810bf74:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 810bf78:	f113 0f02 	cmn.w	r3, #2
 810bf7c:	d0d3      	beq.n	810bf26 <low_level_output+0xea>

  return errval;
 810bf7e:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 810bf82:	4618      	mov	r0, r3
 810bf84:	3748      	adds	r7, #72	@ 0x48
 810bf86:	46bd      	mov	sp, r7
 810bf88:	bd80      	pop	{r7, pc}
 810bf8a:	bf00      	nop
 810bf8c:	1000043c 	.word	0x1000043c
 810bf90:	1000038c 	.word	0x1000038c
 810bf94:	10000388 	.word	0x10000388

0810bf98 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 810bf98:	b580      	push	{r7, lr}
 810bf9a:	b084      	sub	sp, #16
 810bf9c:	af00      	add	r7, sp, #0
 810bf9e:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 810bfa0:	2300      	movs	r3, #0
 810bfa2:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 810bfa4:	4b07      	ldr	r3, [pc, #28]	@ (810bfc4 <low_level_input+0x2c>)
 810bfa6:	781b      	ldrb	r3, [r3, #0]
 810bfa8:	2b00      	cmp	r3, #0
 810bfaa:	d105      	bne.n	810bfb8 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 810bfac:	f107 030c 	add.w	r3, r7, #12
 810bfb0:	4619      	mov	r1, r3
 810bfb2:	4805      	ldr	r0, [pc, #20]	@ (810bfc8 <low_level_input+0x30>)
 810bfb4:	f003 fae0 	bl	810f578 <HAL_ETH_ReadData>
  }

  return p;
 810bfb8:	68fb      	ldr	r3, [r7, #12]
}
 810bfba:	4618      	mov	r0, r3
 810bfbc:	3710      	adds	r7, #16
 810bfbe:	46bd      	mov	sp, r7
 810bfc0:	bd80      	pop	{r7, pc}
 810bfc2:	bf00      	nop
 810bfc4:	10000380 	.word	0x10000380
 810bfc8:	1000038c 	.word	0x1000038c

0810bfcc <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void* argument)
{
 810bfcc:	b580      	push	{r7, lr}
 810bfce:	b084      	sub	sp, #16
 810bfd0:	af00      	add	r7, sp, #0
 810bfd2:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 810bfd4:	2300      	movs	r3, #0
 810bfd6:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 810bfd8:	687b      	ldr	r3, [r7, #4]
 810bfda:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 810bfdc:	4b0f      	ldr	r3, [pc, #60]	@ (810c01c <ethernetif_input+0x50>)
 810bfde:	681b      	ldr	r3, [r3, #0]
 810bfe0:	f04f 31ff 	mov.w	r1, #4294967295
 810bfe4:	4618      	mov	r0, r3
 810bfe6:	f009 fe49 	bl	8115c7c <osSemaphoreAcquire>
 810bfea:	4603      	mov	r3, r0
 810bfec:	2b00      	cmp	r3, #0
 810bfee:	d1f5      	bne.n	810bfdc <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 810bff0:	68b8      	ldr	r0, [r7, #8]
 810bff2:	f7ff ffd1 	bl	810bf98 <low_level_input>
 810bff6:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 810bff8:	68fb      	ldr	r3, [r7, #12]
 810bffa:	2b00      	cmp	r3, #0
 810bffc:	d00a      	beq.n	810c014 <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 810bffe:	68bb      	ldr	r3, [r7, #8]
 810c000:	691b      	ldr	r3, [r3, #16]
 810c002:	68b9      	ldr	r1, [r7, #8]
 810c004:	68f8      	ldr	r0, [r7, #12]
 810c006:	4798      	blx	r3
 810c008:	4603      	mov	r3, r0
 810c00a:	2b00      	cmp	r3, #0
 810c00c:	d002      	beq.n	810c014 <ethernetif_input+0x48>
          {
            pbuf_free(p);
 810c00e:	68f8      	ldr	r0, [r7, #12]
 810c010:	f012 f984 	bl	811e31c <pbuf_free>
          }
        }
      } while(p!=NULL);
 810c014:	68fb      	ldr	r3, [r7, #12]
 810c016:	2b00      	cmp	r3, #0
 810c018:	d1ea      	bne.n	810bff0 <ethernetif_input+0x24>
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 810c01a:	e7df      	b.n	810bfdc <ethernetif_input+0x10>
 810c01c:	10000384 	.word	0x10000384

0810c020 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 810c020:	b580      	push	{r7, lr}
 810c022:	b082      	sub	sp, #8
 810c024:	af00      	add	r7, sp, #0
 810c026:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 810c028:	687b      	ldr	r3, [r7, #4]
 810c02a:	2b00      	cmp	r3, #0
 810c02c:	d106      	bne.n	810c03c <ethernetif_init+0x1c>
 810c02e:	4b0e      	ldr	r3, [pc, #56]	@ (810c068 <ethernetif_init+0x48>)
 810c030:	f44f 7206 	mov.w	r2, #536	@ 0x218
 810c034:	490d      	ldr	r1, [pc, #52]	@ (810c06c <ethernetif_init+0x4c>)
 810c036:	480e      	ldr	r0, [pc, #56]	@ (810c070 <ethernetif_init+0x50>)
 810c038:	f01a fd1c 	bl	8126a74 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 810c03c:	687b      	ldr	r3, [r7, #4]
 810c03e:	2273      	movs	r2, #115	@ 0x73
 810c040:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
  netif->name[1] = IFNAME1;
 810c044:	687b      	ldr	r3, [r7, #4]
 810c046:	2274      	movs	r2, #116	@ 0x74
 810c048:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 810c04c:	687b      	ldr	r3, [r7, #4]
 810c04e:	4a09      	ldr	r2, [pc, #36]	@ (810c074 <ethernetif_init+0x54>)
 810c050:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 810c052:	687b      	ldr	r3, [r7, #4]
 810c054:	4a08      	ldr	r2, [pc, #32]	@ (810c078 <ethernetif_init+0x58>)
 810c056:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 810c058:	6878      	ldr	r0, [r7, #4]
 810c05a:	f7ff fdaf 	bl	810bbbc <low_level_init>

  return ERR_OK;
 810c05e:	2300      	movs	r3, #0
}
 810c060:	4618      	mov	r0, r3
 810c062:	3708      	adds	r7, #8
 810c064:	46bd      	mov	sp, r7
 810c066:	bd80      	pop	{r7, pc}
 810c068:	08127d40 	.word	0x08127d40
 810c06c:	08127da4 	.word	0x08127da4
 810c070:	08127db4 	.word	0x08127db4
 810c074:	0811a8fd 	.word	0x0811a8fd
 810c078:	0810be3d 	.word	0x0810be3d

0810c07c <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 810c07c:	b580      	push	{r7, lr}
 810c07e:	b084      	sub	sp, #16
 810c080:	af00      	add	r7, sp, #0
 810c082:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 810c084:	687b      	ldr	r3, [r7, #4]
 810c086:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 810c088:	68f9      	ldr	r1, [r7, #12]
 810c08a:	4809      	ldr	r0, [pc, #36]	@ (810c0b0 <pbuf_free_custom+0x34>)
 810c08c:	f011 fa80 	bl	811d590 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 810c090:	4b08      	ldr	r3, [pc, #32]	@ (810c0b4 <pbuf_free_custom+0x38>)
 810c092:	781b      	ldrb	r3, [r3, #0]
 810c094:	2b01      	cmp	r3, #1
 810c096:	d107      	bne.n	810c0a8 <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 810c098:	4b06      	ldr	r3, [pc, #24]	@ (810c0b4 <pbuf_free_custom+0x38>)
 810c09a:	2200      	movs	r2, #0
 810c09c:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 810c09e:	4b06      	ldr	r3, [pc, #24]	@ (810c0b8 <pbuf_free_custom+0x3c>)
 810c0a0:	681b      	ldr	r3, [r3, #0]
 810c0a2:	4618      	mov	r0, r3
 810c0a4:	f009 fe3c 	bl	8115d20 <osSemaphoreRelease>
  }
}
 810c0a8:	bf00      	nop
 810c0aa:	3710      	adds	r7, #16
 810c0ac:	46bd      	mov	sp, r7
 810c0ae:	bd80      	pop	{r7, pc}
 810c0b0:	0812adf4 	.word	0x0812adf4
 810c0b4:	10000380 	.word	0x10000380
 810c0b8:	10000384 	.word	0x10000384

0810c0bc <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 810c0bc:	b580      	push	{r7, lr}
 810c0be:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 810c0c0:	f002 ff0a 	bl	810eed8 <HAL_GetTick>
 810c0c4:	4603      	mov	r3, r0
}
 810c0c6:	4618      	mov	r0, r3
 810c0c8:	bd80      	pop	{r7, pc}
	...

0810c0cc <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 810c0cc:	b580      	push	{r7, lr}
 810c0ce:	b08e      	sub	sp, #56	@ 0x38
 810c0d0:	af00      	add	r7, sp, #0
 810c0d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 810c0d4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 810c0d8:	2200      	movs	r2, #0
 810c0da:	601a      	str	r2, [r3, #0]
 810c0dc:	605a      	str	r2, [r3, #4]
 810c0de:	609a      	str	r2, [r3, #8]
 810c0e0:	60da      	str	r2, [r3, #12]
 810c0e2:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 810c0e4:	687b      	ldr	r3, [r7, #4]
 810c0e6:	681b      	ldr	r3, [r3, #0]
 810c0e8:	4a51      	ldr	r2, [pc, #324]	@ (810c230 <HAL_ETH_MspInit+0x164>)
 810c0ea:	4293      	cmp	r3, r2
 810c0ec:	f040 809b 	bne.w	810c226 <HAL_ETH_MspInit+0x15a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 810c0f0:	4b50      	ldr	r3, [pc, #320]	@ (810c234 <HAL_ETH_MspInit+0x168>)
 810c0f2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 810c0f6:	4a4f      	ldr	r2, [pc, #316]	@ (810c234 <HAL_ETH_MspInit+0x168>)
 810c0f8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 810c0fc:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 810c100:	4b4c      	ldr	r3, [pc, #304]	@ (810c234 <HAL_ETH_MspInit+0x168>)
 810c102:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 810c106:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 810c10a:	623b      	str	r3, [r7, #32]
 810c10c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 810c10e:	4b49      	ldr	r3, [pc, #292]	@ (810c234 <HAL_ETH_MspInit+0x168>)
 810c110:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 810c114:	4a47      	ldr	r2, [pc, #284]	@ (810c234 <HAL_ETH_MspInit+0x168>)
 810c116:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 810c11a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 810c11e:	4b45      	ldr	r3, [pc, #276]	@ (810c234 <HAL_ETH_MspInit+0x168>)
 810c120:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 810c124:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 810c128:	61fb      	str	r3, [r7, #28]
 810c12a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 810c12c:	4b41      	ldr	r3, [pc, #260]	@ (810c234 <HAL_ETH_MspInit+0x168>)
 810c12e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 810c132:	4a40      	ldr	r2, [pc, #256]	@ (810c234 <HAL_ETH_MspInit+0x168>)
 810c134:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 810c138:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 810c13c:	4b3d      	ldr	r3, [pc, #244]	@ (810c234 <HAL_ETH_MspInit+0x168>)
 810c13e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 810c142:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 810c146:	61bb      	str	r3, [r7, #24]
 810c148:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 810c14a:	4b3a      	ldr	r3, [pc, #232]	@ (810c234 <HAL_ETH_MspInit+0x168>)
 810c14c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810c150:	4a38      	ldr	r2, [pc, #224]	@ (810c234 <HAL_ETH_MspInit+0x168>)
 810c152:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 810c156:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 810c15a:	4b36      	ldr	r3, [pc, #216]	@ (810c234 <HAL_ETH_MspInit+0x168>)
 810c15c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810c160:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 810c164:	617b      	str	r3, [r7, #20]
 810c166:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 810c168:	4b32      	ldr	r3, [pc, #200]	@ (810c234 <HAL_ETH_MspInit+0x168>)
 810c16a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810c16e:	4a31      	ldr	r2, [pc, #196]	@ (810c234 <HAL_ETH_MspInit+0x168>)
 810c170:	f043 0304 	orr.w	r3, r3, #4
 810c174:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 810c178:	4b2e      	ldr	r3, [pc, #184]	@ (810c234 <HAL_ETH_MspInit+0x168>)
 810c17a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810c17e:	f003 0304 	and.w	r3, r3, #4
 810c182:	613b      	str	r3, [r7, #16]
 810c184:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 810c186:	4b2b      	ldr	r3, [pc, #172]	@ (810c234 <HAL_ETH_MspInit+0x168>)
 810c188:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810c18c:	4a29      	ldr	r2, [pc, #164]	@ (810c234 <HAL_ETH_MspInit+0x168>)
 810c18e:	f043 0301 	orr.w	r3, r3, #1
 810c192:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 810c196:	4b27      	ldr	r3, [pc, #156]	@ (810c234 <HAL_ETH_MspInit+0x168>)
 810c198:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810c19c:	f003 0301 	and.w	r3, r3, #1
 810c1a0:	60fb      	str	r3, [r7, #12]
 810c1a2:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> ETH_REF_CLK
    PA7     ------> ETH_CRS_DV
    PC4     ------> ETH_RXD0
    PC5     ------> ETH_RXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 810c1a4:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 810c1a8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 810c1aa:	2302      	movs	r3, #2
 810c1ac:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 810c1ae:	2300      	movs	r3, #0
 810c1b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 810c1b2:	2303      	movs	r3, #3
 810c1b4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 810c1b6:	230b      	movs	r3, #11
 810c1b8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 810c1ba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 810c1be:	4619      	mov	r1, r3
 810c1c0:	481d      	ldr	r0, [pc, #116]	@ (810c238 <HAL_ETH_MspInit+0x16c>)
 810c1c2:	f004 fd1b 	bl	8110bfc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 810c1c6:	2332      	movs	r3, #50	@ 0x32
 810c1c8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 810c1ca:	2302      	movs	r3, #2
 810c1cc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 810c1ce:	2300      	movs	r3, #0
 810c1d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 810c1d2:	2303      	movs	r3, #3
 810c1d4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 810c1d6:	230b      	movs	r3, #11
 810c1d8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 810c1da:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 810c1de:	4619      	mov	r1, r3
 810c1e0:	4816      	ldr	r0, [pc, #88]	@ (810c23c <HAL_ETH_MspInit+0x170>)
 810c1e2:	f004 fd0b 	bl	8110bfc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_7;
 810c1e6:	2386      	movs	r3, #134	@ 0x86
 810c1e8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 810c1ea:	2302      	movs	r3, #2
 810c1ec:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 810c1ee:	2300      	movs	r3, #0
 810c1f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 810c1f2:	2303      	movs	r3, #3
 810c1f4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 810c1f6:	230b      	movs	r3, #11
 810c1f8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 810c1fa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 810c1fe:	4619      	mov	r1, r3
 810c200:	480f      	ldr	r0, [pc, #60]	@ (810c240 <HAL_ETH_MspInit+0x174>)
 810c202:	f004 fcfb 	bl	8110bfc <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 810c206:	2200      	movs	r2, #0
 810c208:	2105      	movs	r1, #5
 810c20a:	203d      	movs	r0, #61	@ 0x3d
 810c20c:	f002 ff3c 	bl	810f088 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 810c210:	203d      	movs	r0, #61	@ 0x3d
 810c212:	f002 ff53 	bl	810f0bc <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(ETH_WKUP_IRQn, 6, 0);
 810c216:	2200      	movs	r2, #0
 810c218:	2106      	movs	r1, #6
 810c21a:	203e      	movs	r0, #62	@ 0x3e
 810c21c:	f002 ff34 	bl	810f088 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_WKUP_IRQn);
 810c220:	203e      	movs	r0, #62	@ 0x3e
 810c222:	f002 ff4b 	bl	810f0bc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 810c226:	bf00      	nop
 810c228:	3738      	adds	r7, #56	@ 0x38
 810c22a:	46bd      	mov	sp, r7
 810c22c:	bd80      	pop	{r7, pc}
 810c22e:	bf00      	nop
 810c230:	40028000 	.word	0x40028000
 810c234:	58024400 	.word	0x58024400
 810c238:	58021800 	.word	0x58021800
 810c23c:	58020800 	.word	0x58020800
 810c240:	58020000 	.word	0x58020000

0810c244 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 810c244:	b580      	push	{r7, lr}
 810c246:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 810c248:	4802      	ldr	r0, [pc, #8]	@ (810c254 <ETH_PHY_IO_Init+0x10>)
 810c24a:	f003 feed 	bl	8110028 <HAL_ETH_SetMDIOClockRange>

  return 0;
 810c24e:	2300      	movs	r3, #0
}
 810c250:	4618      	mov	r0, r3
 810c252:	bd80      	pop	{r7, pc}
 810c254:	1000038c 	.word	0x1000038c

0810c258 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 810c258:	b480      	push	{r7}
 810c25a:	af00      	add	r7, sp, #0
  return 0;
 810c25c:	2300      	movs	r3, #0
}
 810c25e:	4618      	mov	r0, r3
 810c260:	46bd      	mov	sp, r7
 810c262:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c266:	4770      	bx	lr

0810c268 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 810c268:	b580      	push	{r7, lr}
 810c26a:	b084      	sub	sp, #16
 810c26c:	af00      	add	r7, sp, #0
 810c26e:	60f8      	str	r0, [r7, #12]
 810c270:	60b9      	str	r1, [r7, #8]
 810c272:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 810c274:	687b      	ldr	r3, [r7, #4]
 810c276:	68ba      	ldr	r2, [r7, #8]
 810c278:	68f9      	ldr	r1, [r7, #12]
 810c27a:	4807      	ldr	r0, [pc, #28]	@ (810c298 <ETH_PHY_IO_ReadReg+0x30>)
 810c27c:	f003 fc3e 	bl	810fafc <HAL_ETH_ReadPHYRegister>
 810c280:	4603      	mov	r3, r0
 810c282:	2b00      	cmp	r3, #0
 810c284:	d002      	beq.n	810c28c <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 810c286:	f04f 33ff 	mov.w	r3, #4294967295
 810c28a:	e000      	b.n	810c28e <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 810c28c:	2300      	movs	r3, #0
}
 810c28e:	4618      	mov	r0, r3
 810c290:	3710      	adds	r7, #16
 810c292:	46bd      	mov	sp, r7
 810c294:	bd80      	pop	{r7, pc}
 810c296:	bf00      	nop
 810c298:	1000038c 	.word	0x1000038c

0810c29c <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 810c29c:	b580      	push	{r7, lr}
 810c29e:	b084      	sub	sp, #16
 810c2a0:	af00      	add	r7, sp, #0
 810c2a2:	60f8      	str	r0, [r7, #12]
 810c2a4:	60b9      	str	r1, [r7, #8]
 810c2a6:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 810c2a8:	687b      	ldr	r3, [r7, #4]
 810c2aa:	68ba      	ldr	r2, [r7, #8]
 810c2ac:	68f9      	ldr	r1, [r7, #12]
 810c2ae:	4807      	ldr	r0, [pc, #28]	@ (810c2cc <ETH_PHY_IO_WriteReg+0x30>)
 810c2b0:	f003 fc78 	bl	810fba4 <HAL_ETH_WritePHYRegister>
 810c2b4:	4603      	mov	r3, r0
 810c2b6:	2b00      	cmp	r3, #0
 810c2b8:	d002      	beq.n	810c2c0 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 810c2ba:	f04f 33ff 	mov.w	r3, #4294967295
 810c2be:	e000      	b.n	810c2c2 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 810c2c0:	2300      	movs	r3, #0
}
 810c2c2:	4618      	mov	r0, r3
 810c2c4:	3710      	adds	r7, #16
 810c2c6:	46bd      	mov	sp, r7
 810c2c8:	bd80      	pop	{r7, pc}
 810c2ca:	bf00      	nop
 810c2cc:	1000038c 	.word	0x1000038c

0810c2d0 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 810c2d0:	b580      	push	{r7, lr}
 810c2d2:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 810c2d4:	f002 fe00 	bl	810eed8 <HAL_GetTick>
 810c2d8:	4603      	mov	r3, r0
}
 810c2da:	4618      	mov	r0, r3
 810c2dc:	bd80      	pop	{r7, pc}
	...

0810c2e0 <ethernet_link_thread>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_thread(void* argument)
{
 810c2e0:	b580      	push	{r7, lr}
 810c2e2:	b0a0      	sub	sp, #128	@ 0x80
 810c2e4:	af00      	add	r7, sp, #0
 810c2e6:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 810c2e8:	f107 0308 	add.w	r3, r7, #8
 810c2ec:	2264      	movs	r2, #100	@ 0x64
 810c2ee:	2100      	movs	r1, #0
 810c2f0:	4618      	mov	r0, r3
 810c2f2:	f01a fcd3 	bl	8126c9c <memset>
  int32_t PHYLinkState = 0;
 810c2f6:	2300      	movs	r3, #0
 810c2f8:	673b      	str	r3, [r7, #112]	@ 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 810c2fa:	2300      	movs	r3, #0
 810c2fc:	67fb      	str	r3, [r7, #124]	@ 0x7c
 810c2fe:	2300      	movs	r3, #0
 810c300:	67bb      	str	r3, [r7, #120]	@ 0x78
 810c302:	2300      	movs	r3, #0
 810c304:	677b      	str	r3, [r7, #116]	@ 0x74

  struct netif *netif = (struct netif *) argument;
 810c306:	687b      	ldr	r3, [r7, #4]
 810c308:	66fb      	str	r3, [r7, #108]	@ 0x6c

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 810c30a:	483a      	ldr	r0, [pc, #232]	@ (810c3f4 <ethernet_link_thread+0x114>)
 810c30c:	f002 fcce 	bl	810ecac <LAN8742_GetLinkState>
 810c310:	6738      	str	r0, [r7, #112]	@ 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 810c312:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 810c314:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 810c318:	089b      	lsrs	r3, r3, #2
 810c31a:	f003 0301 	and.w	r3, r3, #1
 810c31e:	b2db      	uxtb	r3, r3
 810c320:	2b00      	cmp	r3, #0
 810c322:	d00c      	beq.n	810c33e <ethernet_link_thread+0x5e>
 810c324:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 810c326:	2b01      	cmp	r3, #1
 810c328:	dc09      	bgt.n	810c33e <ethernet_link_thread+0x5e>
  {
    HAL_ETH_Stop_IT(&heth);
 810c32a:	4833      	ldr	r0, [pc, #204]	@ (810c3f8 <ethernet_link_thread+0x118>)
 810c32c:	f003 f85b 	bl	810f3e6 <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 810c330:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 810c332:	f011 fbb1 	bl	811da98 <netif_set_down>
    netif_set_link_down(netif);
 810c336:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 810c338:	f011 fc14 	bl	811db64 <netif_set_link_down>
 810c33c:	e055      	b.n	810c3ea <ethernet_link_thread+0x10a>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 810c33e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 810c340:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 810c344:	f003 0304 	and.w	r3, r3, #4
 810c348:	2b00      	cmp	r3, #0
 810c34a:	d14e      	bne.n	810c3ea <ethernet_link_thread+0x10a>
 810c34c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 810c34e:	2b01      	cmp	r3, #1
 810c350:	dd4b      	ble.n	810c3ea <ethernet_link_thread+0x10a>
  {
    switch (PHYLinkState)
 810c352:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 810c354:	3b02      	subs	r3, #2
 810c356:	2b03      	cmp	r3, #3
 810c358:	d82a      	bhi.n	810c3b0 <ethernet_link_thread+0xd0>
 810c35a:	a201      	add	r2, pc, #4	@ (adr r2, 810c360 <ethernet_link_thread+0x80>)
 810c35c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810c360:	0810c371 	.word	0x0810c371
 810c364:	0810c383 	.word	0x0810c383
 810c368:	0810c393 	.word	0x0810c393
 810c36c:	0810c3a3 	.word	0x0810c3a3
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 810c370:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 810c374:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 810c376:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 810c37a:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 810c37c:	2301      	movs	r3, #1
 810c37e:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 810c380:	e017      	b.n	810c3b2 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 810c382:	2300      	movs	r3, #0
 810c384:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 810c386:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 810c38a:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 810c38c:	2301      	movs	r3, #1
 810c38e:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 810c390:	e00f      	b.n	810c3b2 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 810c392:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 810c396:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 810c398:	2300      	movs	r3, #0
 810c39a:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 810c39c:	2301      	movs	r3, #1
 810c39e:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 810c3a0:	e007      	b.n	810c3b2 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 810c3a2:	2300      	movs	r3, #0
 810c3a4:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 810c3a6:	2300      	movs	r3, #0
 810c3a8:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 810c3aa:	2301      	movs	r3, #1
 810c3ac:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 810c3ae:	e000      	b.n	810c3b2 <ethernet_link_thread+0xd2>
    default:
      break;
 810c3b0:	bf00      	nop
    }

    if(linkchanged)
 810c3b2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 810c3b4:	2b00      	cmp	r3, #0
 810c3b6:	d018      	beq.n	810c3ea <ethernet_link_thread+0x10a>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 810c3b8:	f107 0308 	add.w	r3, r7, #8
 810c3bc:	4619      	mov	r1, r3
 810c3be:	480e      	ldr	r0, [pc, #56]	@ (810c3f8 <ethernet_link_thread+0x118>)
 810c3c0:	f003 fc44 	bl	810fc4c <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 810c3c4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 810c3c6:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 810c3c8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 810c3ca:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 810c3cc:	f107 0308 	add.w	r3, r7, #8
 810c3d0:	4619      	mov	r1, r3
 810c3d2:	4809      	ldr	r0, [pc, #36]	@ (810c3f8 <ethernet_link_thread+0x118>)
 810c3d4:	f003 fe0e 	bl	810fff4 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start_IT(&heth);
 810c3d8:	4807      	ldr	r0, [pc, #28]	@ (810c3f8 <ethernet_link_thread+0x118>)
 810c3da:	f002 ff8f 	bl	810f2fc <HAL_ETH_Start_IT>
      netif_set_up(netif);
 810c3de:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 810c3e0:	f011 faee 	bl	811d9c0 <netif_set_up>
      netif_set_link_up(netif);
 810c3e4:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 810c3e6:	f011 fb89 	bl	811dafc <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 810c3ea:	2064      	movs	r0, #100	@ 0x64
 810c3ec:	f009 fa93 	bl	8115916 <osDelay>
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 810c3f0:	e78b      	b.n	810c30a <ethernet_link_thread+0x2a>
 810c3f2:	bf00      	nop
 810c3f4:	10000474 	.word	0x10000474
 810c3f8:	1000038c 	.word	0x1000038c

0810c3fc <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 810c3fc:	b580      	push	{r7, lr}
 810c3fe:	b086      	sub	sp, #24
 810c400:	af02      	add	r7, sp, #8
 810c402:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 810c404:	4812      	ldr	r0, [pc, #72]	@ (810c450 <HAL_ETH_RxAllocateCallback+0x54>)
 810c406:	f011 f84f 	bl	811d4a8 <memp_malloc_pool>
 810c40a:	60f8      	str	r0, [r7, #12]
  if (p)
 810c40c:	68fb      	ldr	r3, [r7, #12]
 810c40e:	2b00      	cmp	r3, #0
 810c410:	d014      	beq.n	810c43c <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 810c412:	68fb      	ldr	r3, [r7, #12]
 810c414:	f103 0220 	add.w	r2, r3, #32
 810c418:	687b      	ldr	r3, [r7, #4]
 810c41a:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 810c41c:	68fb      	ldr	r3, [r7, #12]
 810c41e:	4a0d      	ldr	r2, [pc, #52]	@ (810c454 <HAL_ETH_RxAllocateCallback+0x58>)
 810c420:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 810c422:	687b      	ldr	r3, [r7, #4]
 810c424:	681b      	ldr	r3, [r3, #0]
 810c426:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 810c42a:	9201      	str	r2, [sp, #4]
 810c42c:	9300      	str	r3, [sp, #0]
 810c42e:	68fb      	ldr	r3, [r7, #12]
 810c430:	2241      	movs	r2, #65	@ 0x41
 810c432:	2100      	movs	r1, #0
 810c434:	2000      	movs	r0, #0
 810c436:	f011 fdb9 	bl	811dfac <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 810c43a:	e005      	b.n	810c448 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 810c43c:	4b06      	ldr	r3, [pc, #24]	@ (810c458 <HAL_ETH_RxAllocateCallback+0x5c>)
 810c43e:	2201      	movs	r2, #1
 810c440:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 810c442:	687b      	ldr	r3, [r7, #4]
 810c444:	2200      	movs	r2, #0
 810c446:	601a      	str	r2, [r3, #0]
}
 810c448:	bf00      	nop
 810c44a:	3710      	adds	r7, #16
 810c44c:	46bd      	mov	sp, r7
 810c44e:	bd80      	pop	{r7, pc}
 810c450:	0812adf4 	.word	0x0812adf4
 810c454:	0810c07d 	.word	0x0810c07d
 810c458:	10000380 	.word	0x10000380

0810c45c <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 810c45c:	b480      	push	{r7}
 810c45e:	b089      	sub	sp, #36	@ 0x24
 810c460:	af00      	add	r7, sp, #0
 810c462:	60f8      	str	r0, [r7, #12]
 810c464:	60b9      	str	r1, [r7, #8]
 810c466:	607a      	str	r2, [r7, #4]
 810c468:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 810c46a:	68fb      	ldr	r3, [r7, #12]
 810c46c:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 810c46e:	68bb      	ldr	r3, [r7, #8]
 810c470:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 810c472:	2300      	movs	r3, #0
 810c474:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 810c476:	687b      	ldr	r3, [r7, #4]
 810c478:	3b20      	subs	r3, #32
 810c47a:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 810c47c:	69fb      	ldr	r3, [r7, #28]
 810c47e:	2200      	movs	r2, #0
 810c480:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 810c482:	69fb      	ldr	r3, [r7, #28]
 810c484:	2200      	movs	r2, #0
 810c486:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 810c488:	69fb      	ldr	r3, [r7, #28]
 810c48a:	887a      	ldrh	r2, [r7, #2]
 810c48c:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 810c48e:	69bb      	ldr	r3, [r7, #24]
 810c490:	681b      	ldr	r3, [r3, #0]
 810c492:	2b00      	cmp	r3, #0
 810c494:	d103      	bne.n	810c49e <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 810c496:	69bb      	ldr	r3, [r7, #24]
 810c498:	69fa      	ldr	r2, [r7, #28]
 810c49a:	601a      	str	r2, [r3, #0]
 810c49c:	e003      	b.n	810c4a6 <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 810c49e:	697b      	ldr	r3, [r7, #20]
 810c4a0:	681b      	ldr	r3, [r3, #0]
 810c4a2:	69fa      	ldr	r2, [r7, #28]
 810c4a4:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 810c4a6:	697b      	ldr	r3, [r7, #20]
 810c4a8:	69fa      	ldr	r2, [r7, #28]
 810c4aa:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 810c4ac:	69bb      	ldr	r3, [r7, #24]
 810c4ae:	681b      	ldr	r3, [r3, #0]
 810c4b0:	61fb      	str	r3, [r7, #28]
 810c4b2:	e009      	b.n	810c4c8 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 810c4b4:	69fb      	ldr	r3, [r7, #28]
 810c4b6:	891a      	ldrh	r2, [r3, #8]
 810c4b8:	887b      	ldrh	r3, [r7, #2]
 810c4ba:	4413      	add	r3, r2
 810c4bc:	b29a      	uxth	r2, r3
 810c4be:	69fb      	ldr	r3, [r7, #28]
 810c4c0:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 810c4c2:	69fb      	ldr	r3, [r7, #28]
 810c4c4:	681b      	ldr	r3, [r3, #0]
 810c4c6:	61fb      	str	r3, [r7, #28]
 810c4c8:	69fb      	ldr	r3, [r7, #28]
 810c4ca:	2b00      	cmp	r3, #0
 810c4cc:	d1f2      	bne.n	810c4b4 <HAL_ETH_RxLinkCallback+0x58>
  }

/* USER CODE END HAL ETH RxLinkCallback */
}
 810c4ce:	bf00      	nop
 810c4d0:	bf00      	nop
 810c4d2:	3724      	adds	r7, #36	@ 0x24
 810c4d4:	46bd      	mov	sp, r7
 810c4d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c4da:	4770      	bx	lr

0810c4dc <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 810c4dc:	b580      	push	{r7, lr}
 810c4de:	b082      	sub	sp, #8
 810c4e0:	af00      	add	r7, sp, #0
 810c4e2:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 810c4e4:	6878      	ldr	r0, [r7, #4]
 810c4e6:	f011 ff19 	bl	811e31c <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 810c4ea:	bf00      	nop
 810c4ec:	3708      	adds	r7, #8
 810c4ee:	46bd      	mov	sp, r7
 810c4f0:	bd80      	pop	{r7, pc}
	...

0810c4f4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 810c4f4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 810c52c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 810c4f8:	f002 fc60 	bl	810edbc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 810c4fc:	480c      	ldr	r0, [pc, #48]	@ (810c530 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 810c4fe:	490d      	ldr	r1, [pc, #52]	@ (810c534 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 810c500:	4a0d      	ldr	r2, [pc, #52]	@ (810c538 <LoopFillZerobss+0x1a>)
  movs r3, #0
 810c502:	2300      	movs	r3, #0
  b LoopCopyDataInit
 810c504:	e002      	b.n	810c50c <LoopCopyDataInit>

0810c506 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 810c506:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 810c508:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 810c50a:	3304      	adds	r3, #4

0810c50c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 810c50c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 810c50e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 810c510:	d3f9      	bcc.n	810c506 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 810c512:	4a0a      	ldr	r2, [pc, #40]	@ (810c53c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 810c514:	4c0a      	ldr	r4, [pc, #40]	@ (810c540 <LoopFillZerobss+0x22>)
  movs r3, #0
 810c516:	2300      	movs	r3, #0
  b LoopFillZerobss
 810c518:	e001      	b.n	810c51e <LoopFillZerobss>

0810c51a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 810c51a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 810c51c:	3204      	adds	r2, #4

0810c51e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 810c51e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 810c520:	d3fb      	bcc.n	810c51a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 810c522:	f01a fce3 	bl	8126eec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 810c526:	f7f4 ff65 	bl	81013f4 <main>
  bx  lr
 810c52a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 810c52c:	10048000 	.word	0x10048000
  ldr r0, =_sdata
 810c530:	10000000 	.word	0x10000000
  ldr r1, =_edata
 810c534:	10000090 	.word	0x10000090
  ldr r2, =_sidata
 810c538:	0812b584 	.word	0x0812b584
  ldr r2, =_sbss
 810c53c:	10000090 	.word	0x10000090
  ldr r4, =_ebss
 810c540:	1000e6cc 	.word	0x1000e6cc

0810c544 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 810c544:	e7fe      	b.n	810c544 <ADC3_IRQHandler>

0810c546 <_ZNSt9__cmp_cat8__unspecC1EPS0_>:

    enum class _Ncmp : type { _Unordered = 2 };

    struct __unspec
    {
      constexpr __unspec(__unspec*) noexcept { }
 810c546:	b480      	push	{r7}
 810c548:	b083      	sub	sp, #12
 810c54a:	af00      	add	r7, sp, #0
 810c54c:	6078      	str	r0, [r7, #4]
 810c54e:	6039      	str	r1, [r7, #0]
 810c550:	687b      	ldr	r3, [r7, #4]
 810c552:	4618      	mov	r0, r3
 810c554:	370c      	adds	r7, #12
 810c556:	46bd      	mov	sp, r7
 810c558:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c55c:	4770      	bx	lr

0810c55e <_ZStltSt15strong_orderingNSt9__cmp_cat8__unspecE>:
    friend constexpr bool
    operator==(strong_ordering, strong_ordering) noexcept = default;

    [[nodiscard]]
    friend constexpr bool
    operator< (strong_ordering __v, __cmp_cat::__unspec) noexcept
 810c55e:	b480      	push	{r7}
 810c560:	b083      	sub	sp, #12
 810c562:	af00      	add	r7, sp, #0
 810c564:	7138      	strb	r0, [r7, #4]
 810c566:	7039      	strb	r1, [r7, #0]
    { return __v._M_value < 0; }
 810c568:	f997 3004 	ldrsb.w	r3, [r7, #4]
 810c56c:	b2db      	uxtb	r3, r3
 810c56e:	09db      	lsrs	r3, r3, #7
 810c570:	b2db      	uxtb	r3, r3
 810c572:	4618      	mov	r0, r3
 810c574:	370c      	adds	r7, #12
 810c576:	46bd      	mov	sp, r7
 810c578:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c57c:	4770      	bx	lr

0810c57e <_ZN9__gnu_cxx5__ops16__iter_less_iterEv>:
  };

  _GLIBCXX14_CONSTEXPR
  inline _Iter_less_iter
  __iter_less_iter()
  { return _Iter_less_iter(); }
 810c57e:	b480      	push	{r7}
 810c580:	af00      	add	r7, sp, #0
 810c582:	bf00      	nop
 810c584:	4618      	mov	r0, r3
 810c586:	46bd      	mov	sp, r7
 810c588:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c58c:	4770      	bx	lr

0810c58e <_ZN9__gnu_cxx5__ops15__val_comp_iterENS0_15_Iter_less_iterE>:
  { return _Val_less_iter(); }

  _GLIBCXX20_CONSTEXPR
  inline _Val_less_iter
  __val_comp_iter(_Iter_less_iter)
  { return _Val_less_iter(); }
 810c58e:	b480      	push	{r7}
 810c590:	b083      	sub	sp, #12
 810c592:	af00      	add	r7, sp, #0
 810c594:	7138      	strb	r0, [r7, #4]
 810c596:	bf00      	nop
 810c598:	4618      	mov	r0, r3
 810c59a:	370c      	adds	r7, #12
 810c59c:	46bd      	mov	sp, r7
 810c59e:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c5a2:	4770      	bx	lr

0810c5a4 <_ZSt4__lgi>:

  /// This is a helper function for the sort routines and for random.tcc.
  //  Precondition: __n > 0.
  inline _GLIBCXX_CONSTEXPR int
  __lg(int __n)
  { return (int)sizeof(int) * __CHAR_BIT__  - 1 - __builtin_clz(__n); }
 810c5a4:	b480      	push	{r7}
 810c5a6:	b083      	sub	sp, #12
 810c5a8:	af00      	add	r7, sp, #0
 810c5aa:	6078      	str	r0, [r7, #4]
 810c5ac:	687b      	ldr	r3, [r7, #4]
 810c5ae:	fab3 f383 	clz	r3, r3
 810c5b2:	f1c3 031f 	rsb	r3, r3, #31
 810c5b6:	4618      	mov	r0, r3
 810c5b8:	370c      	adds	r7, #12
 810c5ba:	46bd      	mov	sp, r7
 810c5bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c5c0:	4770      	bx	lr

0810c5c2 <_ZSt5roundf>:
#endif

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  constexpr float
  round(float __x)
  { return __builtin_roundf(__x); }
 810c5c2:	b580      	push	{r7, lr}
 810c5c4:	b082      	sub	sp, #8
 810c5c6:	af00      	add	r7, sp, #0
 810c5c8:	ed87 0a01 	vstr	s0, [r7, #4]
 810c5cc:	ed97 0a01 	vldr	s0, [r7, #4]
 810c5d0:	f019 fbee 	bl	8125db0 <roundf>
 810c5d4:	eef0 7a40 	vmov.f32	s15, s0
 810c5d8:	eeb0 0a67 	vmov.f32	s0, s15
 810c5dc:	3708      	adds	r7, #8
 810c5de:	46bd      	mov	sp, r7
 810c5e0:	bd80      	pop	{r7, pc}
	...

0810c5e4 <_ZNSt14numeric_limitsIsE3minEv>:
    struct numeric_limits<short>
    {
      static _GLIBCXX_USE_CONSTEXPR bool is_specialized = true;

      static _GLIBCXX_CONSTEXPR short
      min() _GLIBCXX_USE_NOEXCEPT { return -__SHRT_MAX__ - 1; }
 810c5e4:	b480      	push	{r7}
 810c5e6:	af00      	add	r7, sp, #0
 810c5e8:	4b02      	ldr	r3, [pc, #8]	@ (810c5f4 <_ZNSt14numeric_limitsIsE3minEv+0x10>)
 810c5ea:	4618      	mov	r0, r3
 810c5ec:	46bd      	mov	sp, r7
 810c5ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c5f2:	4770      	bx	lr
 810c5f4:	ffff8000 	.word	0xffff8000

0810c5f8 <_Z15StartTask_CTempPv>:
constexpr uint16_t MCP9808_I2C_ADDRESS 	= 0x18 << 1;  // MCP9808 address (shift for HAL I2C)
constexpr uint8_t  MCP9808_TEMP_REG    	= 0x05;       // Temperature register


void StartTask_CTemp(void *argument)
{
 810c5f8:	b580      	push	{r7, lr}
 810c5fa:	b088      	sub	sp, #32
 810c5fc:	af00      	add	r7, sp, #0
 810c5fe:	6078      	str	r0, [r7, #4]
	TemperatureTask TemperatureTaskInstance;
 810c600:	f107 0308 	add.w	r3, r7, #8
 810c604:	4618      	mov	r0, r3
 810c606:	f000 f831 	bl	810c66c <_ZN15TemperatureTaskC1Ev>

    for (;;)
    {
    	TemperatureTaskInstance.process();
 810c60a:	f107 0308 	add.w	r3, r7, #8
 810c60e:	4618      	mov	r0, r3
 810c610:	f000 f848 	bl	810c6a4 <_ZN15TemperatureTask7processEv>
    	osDelay(2000);
 810c614:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 810c618:	f009 f97d 	bl	8115916 <osDelay>
    	TemperatureTaskInstance.process();
 810c61c:	bf00      	nop
 810c61e:	e7f4      	b.n	810c60a <_Z15StartTask_CTempPv+0x12>

0810c620 <_ZNSt12_Vector_baseIfSaIfEE12_Vector_implD1Ev>:
      struct _Vector_impl
 810c620:	b580      	push	{r7, lr}
 810c622:	b082      	sub	sp, #8
 810c624:	af00      	add	r7, sp, #0
 810c626:	6078      	str	r0, [r7, #4]
 810c628:	6878      	ldr	r0, [r7, #4]
 810c62a:	f000 f9da 	bl	810c9e2 <_ZNSaIfED1Ev>
 810c62e:	687b      	ldr	r3, [r7, #4]
 810c630:	4618      	mov	r0, r3
 810c632:	3708      	adds	r7, #8
 810c634:	46bd      	mov	sp, r7
 810c636:	bd80      	pop	{r7, pc}

0810c638 <_ZNSt12_Vector_baseIfSaIfEEC1Ev>:
      _Vector_base() = default;
 810c638:	b580      	push	{r7, lr}
 810c63a:	b082      	sub	sp, #8
 810c63c:	af00      	add	r7, sp, #0
 810c63e:	6078      	str	r0, [r7, #4]
 810c640:	687b      	ldr	r3, [r7, #4]
 810c642:	4618      	mov	r0, r3
 810c644:	f000 f9bd 	bl	810c9c2 <_ZNSt12_Vector_baseIfSaIfEE12_Vector_implC1Ev>
 810c648:	687b      	ldr	r3, [r7, #4]
 810c64a:	4618      	mov	r0, r3
 810c64c:	3708      	adds	r7, #8
 810c64e:	46bd      	mov	sp, r7
 810c650:	bd80      	pop	{r7, pc}

0810c652 <_ZNSt6vectorIfSaIfEEC1Ev>:
      vector() = default;
 810c652:	b580      	push	{r7, lr}
 810c654:	b082      	sub	sp, #8
 810c656:	af00      	add	r7, sp, #0
 810c658:	6078      	str	r0, [r7, #4]
 810c65a:	687b      	ldr	r3, [r7, #4]
 810c65c:	4618      	mov	r0, r3
 810c65e:	f7ff ffeb 	bl	810c638 <_ZNSt12_Vector_baseIfSaIfEEC1Ev>
 810c662:	687b      	ldr	r3, [r7, #4]
 810c664:	4618      	mov	r0, r3
 810c666:	3708      	adds	r7, #8
 810c668:	46bd      	mov	sp, r7
 810c66a:	bd80      	pop	{r7, pc}

0810c66c <_ZN15TemperatureTaskC1Ev>:
    }
}

TemperatureTask::TemperatureTask() : event_bus(EventBus(queueToTemperature, EVENT_CLIENT_THERMOMETER))
 810c66c:	b580      	push	{r7, lr}
 810c66e:	b082      	sub	sp, #8
 810c670:	af00      	add	r7, sp, #0
 810c672:	6078      	str	r0, [r7, #4]
 810c674:	687b      	ldr	r3, [r7, #4]
 810c676:	4618      	mov	r0, r3
 810c678:	f7ff ffeb 	bl	810c652 <_ZNSt6vectorIfSaIfEEC1Ev>
 810c67c:	687b      	ldr	r3, [r7, #4]
 810c67e:	330c      	adds	r3, #12
 810c680:	4a07      	ldr	r2, [pc, #28]	@ (810c6a0 <_ZN15TemperatureTaskC1Ev+0x34>)
 810c682:	6811      	ldr	r1, [r2, #0]
 810c684:	2205      	movs	r2, #5
 810c686:	4618      	mov	r0, r3
 810c688:	f7fc fa02 	bl	8108a90 <_ZN8EventBusC1EP15QueueDefinition12EEventClient>
{
	measurements.reserve(MEASUREMENTS_COUNT);
 810c68c:	687b      	ldr	r3, [r7, #4]
 810c68e:	2106      	movs	r1, #6
 810c690:	4618      	mov	r0, r3
 810c692:	f000 f9db 	bl	810ca4c <_ZNSt6vectorIfSaIfEE7reserveEj>
}
 810c696:	687b      	ldr	r3, [r7, #4]
 810c698:	4618      	mov	r0, r3
 810c69a:	3708      	adds	r7, #8
 810c69c:	46bd      	mov	sp, r7
 810c69e:	bd80      	pop	{r7, pc}
 810c6a0:	100001f4 	.word	0x100001f4

0810c6a4 <_ZN15TemperatureTask7processEv>:

void TemperatureTask::process()
{
 810c6a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 810c6a6:	b08f      	sub	sp, #60	@ 0x3c
 810c6a8:	af04      	add	r7, sp, #16
 810c6aa:	6078      	str	r0, [r7, #4]
	uint32_t err = doMeasurement();
 810c6ac:	6878      	ldr	r0, [r7, #4]
 810c6ae:	f000 f8b5 	bl	810c81c <_ZN15TemperatureTask13doMeasurementEv>
 810c6b2:	6278      	str	r0, [r7, #36]	@ 0x24
	if( err != HAL_I2C_ERROR_NONE)
 810c6b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810c6b6:	2b00      	cmp	r3, #0
 810c6b8:	d130      	bne.n	810c71c <_ZN15TemperatureTask7processEv+0x78>
	{
		return;
	}
	short int measurement = getMedian();
 810c6ba:	6878      	ldr	r0, [r7, #4]
 810c6bc:	f000 f834 	bl	810c728 <_ZN15TemperatureTask9getMedianEv>
 810c6c0:	4603      	mov	r3, r0
 810c6c2:	847b      	strh	r3, [r7, #34]	@ 0x22
	if(measurement == std::numeric_limits<short int>::min())
 810c6c4:	f7ff ff8e 	bl	810c5e4 <_ZNSt14numeric_limitsIsE3minEv>
 810c6c8:	4603      	mov	r3, r0
 810c6ca:	461a      	mov	r2, r3
 810c6cc:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 810c6d0:	4293      	cmp	r3, r2
 810c6d2:	bf0c      	ite	eq
 810c6d4:	2301      	moveq	r3, #1
 810c6d6:	2300      	movne	r3, #0
 810c6d8:	b2db      	uxtb	r3, r3
 810c6da:	2b00      	cmp	r3, #0
 810c6dc:	d120      	bne.n	810c720 <_ZN15TemperatureTask7processEv+0x7c>
	{
		return;
	}
	EEventClient receiver = EVENT_CLIENT_FRONTEND;
 810c6de:	2300      	movs	r3, #0
 810c6e0:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
	EEventType event = EVENT_UPDATE_ROOM_TEMPERATURE;
 810c6e4:	238b      	movs	r3, #139	@ 0x8b
 810c6e6:	f887 3020 	strb.w	r3, [r7, #32]
	UMessageData data;
	data.room_temperature = measurement;
 810c6ea:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 810c6ec:	81bb      	strh	r3, [r7, #12]
	event_bus.send(event, data, receiver);
 810c6ee:	687b      	ldr	r3, [r7, #4]
 810c6f0:	f103 050c 	add.w	r5, r3, #12
 810c6f4:	f897 6020 	ldrb.w	r6, [r7, #32]
 810c6f8:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 810c6fc:	9303      	str	r3, [sp, #12]
 810c6fe:	466c      	mov	r4, sp
 810c700:	f107 0314 	add.w	r3, r7, #20
 810c704:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 810c708:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 810c70c:	f107 030c 	add.w	r3, r7, #12
 810c710:	cb0c      	ldmia	r3, {r2, r3}
 810c712:	4631      	mov	r1, r6
 810c714:	4628      	mov	r0, r5
 810c716:	f7fc f9d5 	bl	8108ac4 <_ZN8EventBus4sendE10EEventType12UMessageData12EEventClient>
 810c71a:	e002      	b.n	810c722 <_ZN15TemperatureTask7processEv+0x7e>
		return;
 810c71c:	bf00      	nop
 810c71e:	e000      	b.n	810c722 <_ZN15TemperatureTask7processEv+0x7e>
		return;
 810c720:	bf00      	nop
}
 810c722:	372c      	adds	r7, #44	@ 0x2c
 810c724:	46bd      	mov	sp, r7
 810c726:	bdf0      	pop	{r4, r5, r6, r7, pc}

0810c728 <_ZN15TemperatureTask9getMedianEv>:

short int TemperatureTask::getMedian()
{
 810c728:	b590      	push	{r4, r7, lr}
 810c72a:	ed2d 8b02 	vpush	{d8}
 810c72e:	b089      	sub	sp, #36	@ 0x24
 810c730:	af00      	add	r7, sp, #0
 810c732:	6078      	str	r0, [r7, #4]
	short int median = std::numeric_limits<short>::min();
 810c734:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 810c738:	83fb      	strh	r3, [r7, #30]
	size_t currMesSize = measurements.size();
 810c73a:	687b      	ldr	r3, [r7, #4]
 810c73c:	4618      	mov	r0, r3
 810c73e:	f000 f974 	bl	810ca2a <_ZNKSt6vectorIfSaIfEE4sizeEv>
 810c742:	61b8      	str	r0, [r7, #24]

	if(currMesSize > 0)
 810c744:	69bb      	ldr	r3, [r7, #24]
 810c746:	2b00      	cmp	r3, #0
 810c748:	d05f      	beq.n	810c80a <_ZN15TemperatureTask9getMedianEv+0xe2>
	{
		std::vector<float> sortedCopy = measurements;
 810c74a:	687a      	ldr	r2, [r7, #4]
 810c74c:	f107 030c 	add.w	r3, r7, #12
 810c750:	4611      	mov	r1, r2
 810c752:	4618      	mov	r0, r3
 810c754:	f000 f9d4 	bl	810cb00 <_ZNSt6vectorIfSaIfEEC1ERKS1_>
		std::sort(sortedCopy.begin(), sortedCopy.end());
 810c758:	f107 030c 	add.w	r3, r7, #12
 810c75c:	4618      	mov	r0, r3
 810c75e:	f000 fa0c 	bl	810cb7a <_ZNSt6vectorIfSaIfEE5beginEv>
 810c762:	4604      	mov	r4, r0
 810c764:	f107 030c 	add.w	r3, r7, #12
 810c768:	4618      	mov	r0, r3
 810c76a:	f000 fa16 	bl	810cb9a <_ZNSt6vectorIfSaIfEE3endEv>
 810c76e:	4603      	mov	r3, r0
 810c770:	4619      	mov	r1, r3
 810c772:	4620      	mov	r0, r4
 810c774:	f000 fa22 	bl	810cbbc <_ZSt4sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEvT_S7_>

		if(currMesSize % 2 == 0)
 810c778:	69bb      	ldr	r3, [r7, #24]
 810c77a:	f003 0301 	and.w	r3, r3, #1
 810c77e:	2b00      	cmp	r3, #0
 810c780:	d128      	bne.n	810c7d4 <_ZN15TemperatureTask9getMedianEv+0xac>
		{
			median = static_cast<short int>(std::round((sortedCopy[currMesSize / 2 - 1] + sortedCopy[currMesSize / 2]) / 2));
 810c782:	69bb      	ldr	r3, [r7, #24]
 810c784:	085b      	lsrs	r3, r3, #1
 810c786:	1e5a      	subs	r2, r3, #1
 810c788:	f107 030c 	add.w	r3, r7, #12
 810c78c:	4611      	mov	r1, r2
 810c78e:	4618      	mov	r0, r3
 810c790:	f000 fa24 	bl	810cbdc <_ZNSt6vectorIfSaIfEEixEj>
 810c794:	4603      	mov	r3, r0
 810c796:	ed93 8a00 	vldr	s16, [r3]
 810c79a:	69bb      	ldr	r3, [r7, #24]
 810c79c:	085a      	lsrs	r2, r3, #1
 810c79e:	f107 030c 	add.w	r3, r7, #12
 810c7a2:	4611      	mov	r1, r2
 810c7a4:	4618      	mov	r0, r3
 810c7a6:	f000 fa19 	bl	810cbdc <_ZNSt6vectorIfSaIfEEixEj>
 810c7aa:	4603      	mov	r3, r0
 810c7ac:	edd3 7a00 	vldr	s15, [r3]
 810c7b0:	ee78 7a27 	vadd.f32	s15, s16, s15
 810c7b4:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 810c7b8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 810c7bc:	eeb0 0a47 	vmov.f32	s0, s14
 810c7c0:	f7ff feff 	bl	810c5c2 <_ZSt5roundf>
 810c7c4:	eef0 7a40 	vmov.f32	s15, s0
 810c7c8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 810c7cc:	ee17 3a90 	vmov	r3, s15
 810c7d0:	83fb      	strh	r3, [r7, #30]
 810c7d2:	e015      	b.n	810c800 <_ZN15TemperatureTask9getMedianEv+0xd8>
		}
		else
		{
			median = static_cast<short int>(std::round(sortedCopy[currMesSize / 2]));
 810c7d4:	69bb      	ldr	r3, [r7, #24]
 810c7d6:	085a      	lsrs	r2, r3, #1
 810c7d8:	f107 030c 	add.w	r3, r7, #12
 810c7dc:	4611      	mov	r1, r2
 810c7de:	4618      	mov	r0, r3
 810c7e0:	f000 f9fc 	bl	810cbdc <_ZNSt6vectorIfSaIfEEixEj>
 810c7e4:	4603      	mov	r3, r0
 810c7e6:	edd3 7a00 	vldr	s15, [r3]
 810c7ea:	eeb0 0a67 	vmov.f32	s0, s15
 810c7ee:	f7ff fee8 	bl	810c5c2 <_ZSt5roundf>
 810c7f2:	eef0 7a40 	vmov.f32	s15, s0
 810c7f6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 810c7fa:	ee17 3a90 	vmov	r3, s15
 810c7fe:	83fb      	strh	r3, [r7, #30]
		}
	}
 810c800:	f107 030c 	add.w	r3, r7, #12
 810c804:	4618      	mov	r0, r3
 810c806:	f000 f8c1 	bl	810c98c <_ZNSt6vectorIfSaIfEED1Ev>
	return median;
 810c80a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
}
 810c80e:	4618      	mov	r0, r3
 810c810:	3724      	adds	r7, #36	@ 0x24
 810c812:	46bd      	mov	sp, r7
 810c814:	ecbd 8b02 	vpop	{d8}
 810c818:	bd90      	pop	{r4, r7, pc}
	...

0810c81c <_ZN15TemperatureTask13doMeasurementEv>:

uint32_t TemperatureTask::doMeasurement()
{
 810c81c:	b5b0      	push	{r4, r5, r7, lr}
 810c81e:	ed2d 8b02 	vpush	{d8}
 810c822:	b090      	sub	sp, #64	@ 0x40
 810c824:	af04      	add	r7, sp, #16
 810c826:	6078      	str	r0, [r7, #4]
	uint8_t data[2];

    if (HAL_I2C_Mem_Read(&hi2c4, MCP9808_I2C_ADDRESS, MCP9808_TEMP_REG, I2C_MEMADD_SIZE_8BIT, data, 2, 1000u) != HAL_OK)
 810c828:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 810c82c:	9302      	str	r3, [sp, #8]
 810c82e:	2302      	movs	r3, #2
 810c830:	9301      	str	r3, [sp, #4]
 810c832:	f107 030c 	add.w	r3, r7, #12
 810c836:	9300      	str	r3, [sp, #0]
 810c838:	2301      	movs	r3, #1
 810c83a:	2205      	movs	r2, #5
 810c83c:	2130      	movs	r1, #48	@ 0x30
 810c83e:	4852      	ldr	r0, [pc, #328]	@ (810c988 <_ZN15TemperatureTask13doMeasurementEv+0x16c>)
 810c840:	f004 fdc4 	bl	81113cc <HAL_I2C_Mem_Read>
 810c844:	4603      	mov	r3, r0
 810c846:	2b00      	cmp	r3, #0
 810c848:	bf14      	ite	ne
 810c84a:	2301      	movne	r3, #1
 810c84c:	2300      	moveq	r3, #0
 810c84e:	b2db      	uxtb	r3, r3
 810c850:	2b00      	cmp	r3, #0
 810c852:	d00b      	beq.n	810c86c <_ZN15TemperatureTask13doMeasurementEv+0x50>
    {
    	uint32_t err = HAL_I2C_GetError(&hi2c4);
 810c854:	484c      	ldr	r0, [pc, #304]	@ (810c988 <_ZN15TemperatureTask13doMeasurementEv+0x16c>)
 810c856:	f004 fed3 	bl	8111600 <HAL_I2C_GetError>
 810c85a:	61b8      	str	r0, [r7, #24]
        // Error handling - restart I2C4 interface
    	HAL_I2C_DeInit(&hi2c4);
 810c85c:	484a      	ldr	r0, [pc, #296]	@ (810c988 <_ZN15TemperatureTask13doMeasurementEv+0x16c>)
 810c85e:	f004 fd86 	bl	811136e <HAL_I2C_DeInit>
    	HAL_I2C_Init(&hi2c4);
 810c862:	4849      	ldr	r0, [pc, #292]	@ (810c988 <_ZN15TemperatureTask13doMeasurementEv+0x16c>)
 810c864:	f004 fce8 	bl	8111238 <HAL_I2C_Init>
    	//do not block other tasks, try again later.
    	return err;
 810c868:	69bb      	ldr	r3, [r7, #24]
 810c86a:	e086      	b.n	810c97a <_ZN15TemperatureTask13doMeasurementEv+0x15e>
    }

	uint16_t dataLong;
	float tmpVal = 0;
 810c86c:	f04f 0300 	mov.w	r3, #0
 810c870:	62fb      	str	r3, [r7, #44]	@ 0x2c
	float tmpValDec;

	dataLong = ((data[0] << 8u) | data[1]);
 810c872:	7b3b      	ldrb	r3, [r7, #12]
 810c874:	021b      	lsls	r3, r3, #8
 810c876:	b21a      	sxth	r2, r3
 810c878:	7b7b      	ldrb	r3, [r7, #13]
 810c87a:	b21b      	sxth	r3, r3
 810c87c:	4313      	orrs	r3, r2
 810c87e:	b21b      	sxth	r3, r3
 810c880:	847b      	strh	r3, [r7, #34]	@ 0x22
	/* Extract the integer part from the fixed point value */
	tmpVal = ((dataLong & 0x0FFF) >> 4);
 810c882:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 810c884:	091b      	lsrs	r3, r3, #4
 810c886:	b29b      	uxth	r3, r3
 810c888:	b2db      	uxtb	r3, r3
 810c88a:	ee07 3a90 	vmov	s15, r3
 810c88e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 810c892:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c

	/* Extract decimal part */
	tmpValDec = 0.0625;
 810c896:	f04f 5376 	mov.w	r3, #1031798784	@ 0x3d800000
 810c89a:	62bb      	str	r3, [r7, #40]	@ 0x28
	for (int i=0; i < 4; i++)
 810c89c:	2300      	movs	r3, #0
 810c89e:	627b      	str	r3, [r7, #36]	@ 0x24
 810c8a0:	e01c      	b.n	810c8dc <_ZN15TemperatureTask13doMeasurementEv+0xc0>
	{
		tmpVal += ((dataLong >> i) & 0x0001) * tmpValDec;
 810c8a2:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 810c8a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810c8a6:	fa42 f303 	asr.w	r3, r2, r3
 810c8aa:	f003 0301 	and.w	r3, r3, #1
 810c8ae:	ee07 3a90 	vmov	s15, r3
 810c8b2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 810c8b6:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 810c8ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 810c8be:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 810c8c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 810c8c6:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
		tmpValDec *= 2u;
 810c8ca:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 810c8ce:	ee77 7aa7 	vadd.f32	s15, s15, s15
 810c8d2:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
	for (int i=0; i < 4; i++)
 810c8d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810c8d8:	3301      	adds	r3, #1
 810c8da:	627b      	str	r3, [r7, #36]	@ 0x24
 810c8dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810c8de:	2b03      	cmp	r3, #3
 810c8e0:	dddf      	ble.n	810c8a2 <_ZN15TemperatureTask13doMeasurementEv+0x86>
	}

	short int measurement = static_cast<short int>(tmpVal);
 810c8e2:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 810c8e6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 810c8ea:	ee17 3a90 	vmov	r3, s15
 810c8ee:	843b      	strh	r3, [r7, #32]

	size_t currMesSize = measurements.size();
 810c8f0:	687b      	ldr	r3, [r7, #4]
 810c8f2:	4618      	mov	r0, r3
 810c8f4:	f000 f899 	bl	810ca2a <_ZNKSt6vectorIfSaIfEE4sizeEv>
 810c8f8:	61f8      	str	r0, [r7, #28]

	if(currMesSize < MEASUREMENTS_COUNT)
 810c8fa:	69fb      	ldr	r3, [r7, #28]
 810c8fc:	2b05      	cmp	r3, #5
 810c8fe:	d80f      	bhi.n	810c920 <_ZN15TemperatureTask13doMeasurementEv+0x104>
	{
		measurements.push_back(measurement);
 810c900:	687b      	ldr	r3, [r7, #4]
 810c902:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 810c906:	ee07 2a90 	vmov	s15, r2
 810c90a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 810c90e:	edc7 7a04 	vstr	s15, [r7, #16]
 810c912:	f107 0210 	add.w	r2, r7, #16
 810c916:	4611      	mov	r1, r2
 810c918:	4618      	mov	r0, r3
 810c91a:	f000 f96f 	bl	810cbfc <_ZNSt6vectorIfSaIfEE9push_backEOf>
 810c91e:	e02b      	b.n	810c978 <_ZN15TemperatureTask13doMeasurementEv+0x15c>
	}
	else
	{
		std::rotate(measurements.begin(), measurements.begin() + 1, measurements.end());
 810c920:	687b      	ldr	r3, [r7, #4]
 810c922:	4618      	mov	r0, r3
 810c924:	f000 f929 	bl	810cb7a <_ZNSt6vectorIfSaIfEE5beginEv>
 810c928:	4604      	mov	r4, r0
 810c92a:	687b      	ldr	r3, [r7, #4]
 810c92c:	4618      	mov	r0, r3
 810c92e:	f000 f924 	bl	810cb7a <_ZNSt6vectorIfSaIfEE5beginEv>
 810c932:	4603      	mov	r3, r0
 810c934:	617b      	str	r3, [r7, #20]
 810c936:	f107 0314 	add.w	r3, r7, #20
 810c93a:	2101      	movs	r1, #1
 810c93c:	4618      	mov	r0, r3
 810c93e:	f000 f96e 	bl	810cc1e <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 810c942:	4605      	mov	r5, r0
 810c944:	687b      	ldr	r3, [r7, #4]
 810c946:	4618      	mov	r0, r3
 810c948:	f000 f927 	bl	810cb9a <_ZNSt6vectorIfSaIfEE3endEv>
 810c94c:	4603      	mov	r3, r0
 810c94e:	461a      	mov	r2, r3
 810c950:	4629      	mov	r1, r5
 810c952:	4620      	mov	r0, r4
 810c954:	f000 f97b 	bl	810cc4e <_ZNSt3_V26rotateIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEET_S8_S8_S8_>
		measurements[currMesSize - 1] = measurement;
 810c958:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 810c95c:	ee07 3a90 	vmov	s15, r3
 810c960:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 810c964:	687a      	ldr	r2, [r7, #4]
 810c966:	69fb      	ldr	r3, [r7, #28]
 810c968:	3b01      	subs	r3, #1
 810c96a:	4619      	mov	r1, r3
 810c96c:	4610      	mov	r0, r2
 810c96e:	f000 f935 	bl	810cbdc <_ZNSt6vectorIfSaIfEEixEj>
 810c972:	4603      	mov	r3, r0
 810c974:	ed83 8a00 	vstr	s16, [r3]
	}
	return HAL_I2C_ERROR_NONE;
 810c978:	2300      	movs	r3, #0
}
 810c97a:	4618      	mov	r0, r3
 810c97c:	3730      	adds	r7, #48	@ 0x30
 810c97e:	46bd      	mov	sp, r7
 810c980:	ecbd 8b02 	vpop	{d8}
 810c984:	bdb0      	pop	{r4, r5, r7, pc}
 810c986:	bf00      	nop
 810c988:	100000ec 	.word	0x100000ec

0810c98c <_ZNSt6vectorIfSaIfEED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 810c98c:	b5b0      	push	{r4, r5, r7, lr}
 810c98e:	b082      	sub	sp, #8
 810c990:	af00      	add	r7, sp, #0
 810c992:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 810c994:	687b      	ldr	r3, [r7, #4]
 810c996:	681c      	ldr	r4, [r3, #0]
 810c998:	687b      	ldr	r3, [r7, #4]
 810c99a:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 810c99c:	687b      	ldr	r3, [r7, #4]
 810c99e:	4618      	mov	r0, r3
 810c9a0:	f000 f96b 	bl	810cc7a <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 810c9a4:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 810c9a6:	461a      	mov	r2, r3
 810c9a8:	4629      	mov	r1, r5
 810c9aa:	4620      	mov	r0, r4
 810c9ac:	f000 f970 	bl	810cc90 <_ZSt8_DestroyIPffEvT_S1_RSaIT0_E>
      }
 810c9b0:	687b      	ldr	r3, [r7, #4]
 810c9b2:	4618      	mov	r0, r3
 810c9b4:	f000 f820 	bl	810c9f8 <_ZNSt12_Vector_baseIfSaIfEED1Ev>
 810c9b8:	687b      	ldr	r3, [r7, #4]
 810c9ba:	4618      	mov	r0, r3
 810c9bc:	3708      	adds	r7, #8
 810c9be:	46bd      	mov	sp, r7
 810c9c0:	bdb0      	pop	{r4, r5, r7, pc}

0810c9c2 <_ZNSt12_Vector_baseIfSaIfEE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 810c9c2:	b580      	push	{r7, lr}
 810c9c4:	b082      	sub	sp, #8
 810c9c6:	af00      	add	r7, sp, #0
 810c9c8:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 810c9ca:	6878      	ldr	r0, [r7, #4]
 810c9cc:	f000 f96e 	bl	810ccac <_ZNSaIfEC1Ev>
 810c9d0:	687b      	ldr	r3, [r7, #4]
 810c9d2:	4618      	mov	r0, r3
 810c9d4:	f000 f976 	bl	810ccc4 <_ZNSt12_Vector_baseIfSaIfEE17_Vector_impl_dataC1Ev>
	{ }
 810c9d8:	687b      	ldr	r3, [r7, #4]
 810c9da:	4618      	mov	r0, r3
 810c9dc:	3708      	adds	r7, #8
 810c9de:	46bd      	mov	sp, r7
 810c9e0:	bd80      	pop	{r7, pc}

0810c9e2 <_ZNSaIfED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 810c9e2:	b480      	push	{r7}
 810c9e4:	b083      	sub	sp, #12
 810c9e6:	af00      	add	r7, sp, #0
 810c9e8:	6078      	str	r0, [r7, #4]
 810c9ea:	687b      	ldr	r3, [r7, #4]
 810c9ec:	4618      	mov	r0, r3
 810c9ee:	370c      	adds	r7, #12
 810c9f0:	46bd      	mov	sp, r7
 810c9f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c9f6:	4770      	bx	lr

0810c9f8 <_ZNSt12_Vector_baseIfSaIfEED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 810c9f8:	b580      	push	{r7, lr}
 810c9fa:	b082      	sub	sp, #8
 810c9fc:	af00      	add	r7, sp, #0
 810c9fe:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 810ca00:	687b      	ldr	r3, [r7, #4]
 810ca02:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 810ca04:	687b      	ldr	r3, [r7, #4]
 810ca06:	689a      	ldr	r2, [r3, #8]
 810ca08:	687b      	ldr	r3, [r7, #4]
 810ca0a:	681b      	ldr	r3, [r3, #0]
 810ca0c:	1ad3      	subs	r3, r2, r3
 810ca0e:	109b      	asrs	r3, r3, #2
	_M_deallocate(_M_impl._M_start,
 810ca10:	461a      	mov	r2, r3
 810ca12:	6878      	ldr	r0, [r7, #4]
 810ca14:	f000 f96a 	bl	810ccec <_ZNSt12_Vector_baseIfSaIfEE13_M_deallocateEPfj>
      }
 810ca18:	687b      	ldr	r3, [r7, #4]
 810ca1a:	4618      	mov	r0, r3
 810ca1c:	f7ff fe00 	bl	810c620 <_ZNSt12_Vector_baseIfSaIfEE12_Vector_implD1Ev>
 810ca20:	687b      	ldr	r3, [r7, #4]
 810ca22:	4618      	mov	r0, r3
 810ca24:	3708      	adds	r7, #8
 810ca26:	46bd      	mov	sp, r7
 810ca28:	bd80      	pop	{r7, pc}

0810ca2a <_ZNKSt6vectorIfSaIfEE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 810ca2a:	b480      	push	{r7}
 810ca2c:	b083      	sub	sp, #12
 810ca2e:	af00      	add	r7, sp, #0
 810ca30:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 810ca32:	687b      	ldr	r3, [r7, #4]
 810ca34:	685a      	ldr	r2, [r3, #4]
 810ca36:	687b      	ldr	r3, [r7, #4]
 810ca38:	681b      	ldr	r3, [r3, #0]
 810ca3a:	1ad3      	subs	r3, r2, r3
 810ca3c:	109b      	asrs	r3, r3, #2
 810ca3e:	4618      	mov	r0, r3
 810ca40:	370c      	adds	r7, #12
 810ca42:	46bd      	mov	sp, r7
 810ca44:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ca48:	4770      	bx	lr
	...

0810ca4c <_ZNSt6vectorIfSaIfEE7reserveEj>:
    vector<_Tp, _Alloc>::
 810ca4c:	b5b0      	push	{r4, r5, r7, lr}
 810ca4e:	b084      	sub	sp, #16
 810ca50:	af00      	add	r7, sp, #0
 810ca52:	6078      	str	r0, [r7, #4]
 810ca54:	6039      	str	r1, [r7, #0]
      if (__n > this->max_size())
 810ca56:	6878      	ldr	r0, [r7, #4]
 810ca58:	f000 f95b 	bl	810cd12 <_ZNKSt6vectorIfSaIfEE8max_sizeEv>
 810ca5c:	4602      	mov	r2, r0
 810ca5e:	683b      	ldr	r3, [r7, #0]
 810ca60:	4293      	cmp	r3, r2
 810ca62:	bf8c      	ite	hi
 810ca64:	2301      	movhi	r3, #1
 810ca66:	2300      	movls	r3, #0
 810ca68:	b2db      	uxtb	r3, r3
 810ca6a:	2b00      	cmp	r3, #0
 810ca6c:	d002      	beq.n	810ca74 <_ZNSt6vectorIfSaIfEE7reserveEj+0x28>
	__throw_length_error(__N("vector::reserve"));
 810ca6e:	4823      	ldr	r0, [pc, #140]	@ (810cafc <_ZNSt6vectorIfSaIfEE7reserveEj+0xb0>)
 810ca70:	f019 f86f 	bl	8125b52 <_ZSt20__throw_length_errorPKc>
      if (this->capacity() < __n)
 810ca74:	6878      	ldr	r0, [r7, #4]
 810ca76:	f000 f95d 	bl	810cd34 <_ZNKSt6vectorIfSaIfEE8capacityEv>
 810ca7a:	4602      	mov	r2, r0
 810ca7c:	683b      	ldr	r3, [r7, #0]
 810ca7e:	4293      	cmp	r3, r2
 810ca80:	bf8c      	ite	hi
 810ca82:	2301      	movhi	r3, #1
 810ca84:	2300      	movls	r3, #0
 810ca86:	b2db      	uxtb	r3, r3
 810ca88:	2b00      	cmp	r3, #0
 810ca8a:	d033      	beq.n	810caf4 <_ZNSt6vectorIfSaIfEE7reserveEj+0xa8>
	  const size_type __old_size = size();
 810ca8c:	6878      	ldr	r0, [r7, #4]
 810ca8e:	f7ff ffcc 	bl	810ca2a <_ZNKSt6vectorIfSaIfEE4sizeEv>
 810ca92:	60f8      	str	r0, [r7, #12]
	      __tmp = this->_M_allocate(__n);
 810ca94:	687b      	ldr	r3, [r7, #4]
 810ca96:	6839      	ldr	r1, [r7, #0]
 810ca98:	4618      	mov	r0, r3
 810ca9a:	f000 f95b 	bl	810cd54 <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj>
 810ca9e:	60b8      	str	r0, [r7, #8]
	      _S_relocate(this->_M_impl._M_start, this->_M_impl._M_finish,
 810caa0:	687b      	ldr	r3, [r7, #4]
 810caa2:	681c      	ldr	r4, [r3, #0]
 810caa4:	687b      	ldr	r3, [r7, #4]
 810caa6:	685d      	ldr	r5, [r3, #4]
			  __tmp, _M_get_Tp_allocator());
 810caa8:	687b      	ldr	r3, [r7, #4]
 810caaa:	4618      	mov	r0, r3
 810caac:	f000 f8e5 	bl	810cc7a <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 810cab0:	4603      	mov	r3, r0
	      _S_relocate(this->_M_impl._M_start, this->_M_impl._M_finish,
 810cab2:	68ba      	ldr	r2, [r7, #8]
 810cab4:	4629      	mov	r1, r5
 810cab6:	4620      	mov	r0, r4
 810cab8:	f000 f960 	bl	810cd7c <_ZNSt6vectorIfSaIfEE11_S_relocateEPfS2_S2_RS0_>
	  _M_deallocate(this->_M_impl._M_start,
 810cabc:	6878      	ldr	r0, [r7, #4]
 810cabe:	687b      	ldr	r3, [r7, #4]
 810cac0:	6819      	ldr	r1, [r3, #0]
			this->_M_impl._M_end_of_storage
 810cac2:	687b      	ldr	r3, [r7, #4]
 810cac4:	689a      	ldr	r2, [r3, #8]
			- this->_M_impl._M_start);
 810cac6:	687b      	ldr	r3, [r7, #4]
 810cac8:	681b      	ldr	r3, [r3, #0]
 810caca:	1ad3      	subs	r3, r2, r3
 810cacc:	109b      	asrs	r3, r3, #2
	  _M_deallocate(this->_M_impl._M_start,
 810cace:	461a      	mov	r2, r3
 810cad0:	f000 f90c 	bl	810ccec <_ZNSt12_Vector_baseIfSaIfEE13_M_deallocateEPfj>
	  this->_M_impl._M_start = __tmp;
 810cad4:	687b      	ldr	r3, [r7, #4]
 810cad6:	68ba      	ldr	r2, [r7, #8]
 810cad8:	601a      	str	r2, [r3, #0]
	  this->_M_impl._M_finish = __tmp + __old_size;
 810cada:	68fb      	ldr	r3, [r7, #12]
 810cadc:	009b      	lsls	r3, r3, #2
 810cade:	68ba      	ldr	r2, [r7, #8]
 810cae0:	441a      	add	r2, r3
 810cae2:	687b      	ldr	r3, [r7, #4]
 810cae4:	605a      	str	r2, [r3, #4]
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 810cae6:	687b      	ldr	r3, [r7, #4]
 810cae8:	681a      	ldr	r2, [r3, #0]
 810caea:	683b      	ldr	r3, [r7, #0]
 810caec:	009b      	lsls	r3, r3, #2
 810caee:	441a      	add	r2, r3
 810caf0:	687b      	ldr	r3, [r7, #4]
 810caf2:	609a      	str	r2, [r3, #8]
    }
 810caf4:	bf00      	nop
 810caf6:	3710      	adds	r7, #16
 810caf8:	46bd      	mov	sp, r7
 810cafa:	bdb0      	pop	{r4, r5, r7, pc}
 810cafc:	08127ddc 	.word	0x08127ddc

0810cb00 <_ZNSt6vectorIfSaIfEEC1ERKS1_>:
      vector(const vector& __x)
 810cb00:	b5f0      	push	{r4, r5, r6, r7, lr}
 810cb02:	b085      	sub	sp, #20
 810cb04:	af00      	add	r7, sp, #0
 810cb06:	6078      	str	r0, [r7, #4]
 810cb08:	6039      	str	r1, [r7, #0]
	_Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()))
 810cb0a:	687c      	ldr	r4, [r7, #4]
 810cb0c:	6838      	ldr	r0, [r7, #0]
 810cb0e:	f7ff ff8c 	bl	810ca2a <_ZNKSt6vectorIfSaIfEE4sizeEv>
 810cb12:	4605      	mov	r5, r0
 810cb14:	683b      	ldr	r3, [r7, #0]
 810cb16:	4618      	mov	r0, r3
 810cb18:	f000 f942 	bl	810cda0 <_ZNKSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 810cb1c:	4602      	mov	r2, r0
 810cb1e:	f107 030c 	add.w	r3, r7, #12
 810cb22:	4611      	mov	r1, r2
 810cb24:	4618      	mov	r0, r3
 810cb26:	f000 f946 	bl	810cdb6 <_ZN9__gnu_cxx14__alloc_traitsISaIfEfE17_S_select_on_copyERKS1_>
 810cb2a:	f107 030c 	add.w	r3, r7, #12
 810cb2e:	461a      	mov	r2, r3
 810cb30:	4629      	mov	r1, r5
 810cb32:	4620      	mov	r0, r4
 810cb34:	f000 f94d 	bl	810cdd2 <_ZNSt12_Vector_baseIfSaIfEEC1EjRKS0_>
 810cb38:	f107 030c 	add.w	r3, r7, #12
 810cb3c:	4618      	mov	r0, r3
 810cb3e:	f7ff ff50 	bl	810c9e2 <_ZNSaIfED1Ev>
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 810cb42:	6838      	ldr	r0, [r7, #0]
 810cb44:	f000 f959 	bl	810cdfa <_ZNKSt6vectorIfSaIfEE5beginEv>
 810cb48:	4605      	mov	r5, r0
 810cb4a:	6838      	ldr	r0, [r7, #0]
 810cb4c:	f000 f965 	bl	810ce1a <_ZNKSt6vectorIfSaIfEE3endEv>
 810cb50:	4606      	mov	r6, r0
 810cb52:	687b      	ldr	r3, [r7, #4]
 810cb54:	681c      	ldr	r4, [r3, #0]
				      _M_get_Tp_allocator());
 810cb56:	687b      	ldr	r3, [r7, #4]
 810cb58:	4618      	mov	r0, r3
 810cb5a:	f000 f88e 	bl	810cc7a <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 810cb5e:	4603      	mov	r3, r0
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 810cb60:	4622      	mov	r2, r4
 810cb62:	4631      	mov	r1, r6
 810cb64:	4628      	mov	r0, r5
 810cb66:	f000 f969 	bl	810ce3c <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPffET0_T_SA_S9_RSaIT1_E>
 810cb6a:	4602      	mov	r2, r0
	this->_M_impl._M_finish =
 810cb6c:	687b      	ldr	r3, [r7, #4]
 810cb6e:	605a      	str	r2, [r3, #4]
      }
 810cb70:	687b      	ldr	r3, [r7, #4]
 810cb72:	4618      	mov	r0, r3
 810cb74:	3714      	adds	r7, #20
 810cb76:	46bd      	mov	sp, r7
 810cb78:	bdf0      	pop	{r4, r5, r6, r7, pc}

0810cb7a <_ZNSt6vectorIfSaIfEE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 810cb7a:	b580      	push	{r7, lr}
 810cb7c:	b084      	sub	sp, #16
 810cb7e:	af00      	add	r7, sp, #0
 810cb80:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 810cb82:	687a      	ldr	r2, [r7, #4]
 810cb84:	f107 030c 	add.w	r3, r7, #12
 810cb88:	4611      	mov	r1, r2
 810cb8a:	4618      	mov	r0, r3
 810cb8c:	f000 f974 	bl	810ce78 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEC1ERKS1_>
 810cb90:	68fb      	ldr	r3, [r7, #12]
 810cb92:	4618      	mov	r0, r3
 810cb94:	3710      	adds	r7, #16
 810cb96:	46bd      	mov	sp, r7
 810cb98:	bd80      	pop	{r7, pc}

0810cb9a <_ZNSt6vectorIfSaIfEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 810cb9a:	b580      	push	{r7, lr}
 810cb9c:	b084      	sub	sp, #16
 810cb9e:	af00      	add	r7, sp, #0
 810cba0:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 810cba2:	687b      	ldr	r3, [r7, #4]
 810cba4:	1d1a      	adds	r2, r3, #4
 810cba6:	f107 030c 	add.w	r3, r7, #12
 810cbaa:	4611      	mov	r1, r2
 810cbac:	4618      	mov	r0, r3
 810cbae:	f000 f963 	bl	810ce78 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEC1ERKS1_>
 810cbb2:	68fb      	ldr	r3, [r7, #12]
 810cbb4:	4618      	mov	r0, r3
 810cbb6:	3710      	adds	r7, #16
 810cbb8:	46bd      	mov	sp, r7
 810cbba:	bd80      	pop	{r7, pc}

0810cbbc <_ZSt4sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEvT_S7_>:
   *  @p stable_sort() if this is needed.
  */
  template<typename _RandomAccessIterator>
    _GLIBCXX20_CONSTEXPR
    inline void
    sort(_RandomAccessIterator __first, _RandomAccessIterator __last)
 810cbbc:	b590      	push	{r4, r7, lr}
 810cbbe:	b083      	sub	sp, #12
 810cbc0:	af00      	add	r7, sp, #0
 810cbc2:	6078      	str	r0, [r7, #4]
 810cbc4:	6039      	str	r1, [r7, #0]
      __glibcxx_function_requires(_LessThanComparableConcept<
	    typename iterator_traits<_RandomAccessIterator>::value_type>)
      __glibcxx_requires_valid_range(__first, __last);
      __glibcxx_requires_irreflexive(__first, __last);

      std::__sort(__first, __last, __gnu_cxx::__ops::__iter_less_iter());
 810cbc6:	f7ff fcda 	bl	810c57e <_ZN9__gnu_cxx5__ops16__iter_less_iterEv>
 810cbca:	4622      	mov	r2, r4
 810cbcc:	6839      	ldr	r1, [r7, #0]
 810cbce:	6878      	ldr	r0, [r7, #4]
 810cbd0:	f000 f99a 	bl	810cf08 <_ZSt6__sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_>
    }
 810cbd4:	bf00      	nop
 810cbd6:	370c      	adds	r7, #12
 810cbd8:	46bd      	mov	sp, r7
 810cbda:	bd90      	pop	{r4, r7, pc}

0810cbdc <_ZNSt6vectorIfSaIfEEixEj>:
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
 810cbdc:	b480      	push	{r7}
 810cbde:	b083      	sub	sp, #12
 810cbe0:	af00      	add	r7, sp, #0
 810cbe2:	6078      	str	r0, [r7, #4]
 810cbe4:	6039      	str	r1, [r7, #0]
	return *(this->_M_impl._M_start + __n);
 810cbe6:	687b      	ldr	r3, [r7, #4]
 810cbe8:	681a      	ldr	r2, [r3, #0]
 810cbea:	683b      	ldr	r3, [r7, #0]
 810cbec:	009b      	lsls	r3, r3, #2
 810cbee:	4413      	add	r3, r2
      }
 810cbf0:	4618      	mov	r0, r3
 810cbf2:	370c      	adds	r7, #12
 810cbf4:	46bd      	mov	sp, r7
 810cbf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 810cbfa:	4770      	bx	lr

0810cbfc <_ZNSt6vectorIfSaIfEE9push_backEOf>:
      push_back(value_type&& __x)
 810cbfc:	b580      	push	{r7, lr}
 810cbfe:	b082      	sub	sp, #8
 810cc00:	af00      	add	r7, sp, #0
 810cc02:	6078      	str	r0, [r7, #4]
 810cc04:	6039      	str	r1, [r7, #0]
      { emplace_back(std::move(__x)); }
 810cc06:	6838      	ldr	r0, [r7, #0]
 810cc08:	f000 f9ae 	bl	810cf68 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 810cc0c:	4603      	mov	r3, r0
 810cc0e:	4619      	mov	r1, r3
 810cc10:	6878      	ldr	r0, [r7, #4]
 810cc12:	f000 f9b4 	bl	810cf7e <_ZNSt6vectorIfSaIfEE12emplace_backIJfEEERfDpOT_>
 810cc16:	bf00      	nop
 810cc18:	3708      	adds	r7, #8
 810cc1a:	46bd      	mov	sp, r7
 810cc1c:	bd80      	pop	{r7, pc}

0810cc1e <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>:
      operator+(difference_type __n) const _GLIBCXX_NOEXCEPT
 810cc1e:	b580      	push	{r7, lr}
 810cc20:	b084      	sub	sp, #16
 810cc22:	af00      	add	r7, sp, #0
 810cc24:	6078      	str	r0, [r7, #4]
 810cc26:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current + __n); }
 810cc28:	687b      	ldr	r3, [r7, #4]
 810cc2a:	681a      	ldr	r2, [r3, #0]
 810cc2c:	683b      	ldr	r3, [r7, #0]
 810cc2e:	009b      	lsls	r3, r3, #2
 810cc30:	4413      	add	r3, r2
 810cc32:	60fb      	str	r3, [r7, #12]
 810cc34:	f107 020c 	add.w	r2, r7, #12
 810cc38:	f107 0308 	add.w	r3, r7, #8
 810cc3c:	4611      	mov	r1, r2
 810cc3e:	4618      	mov	r0, r3
 810cc40:	f000 f91a 	bl	810ce78 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEC1ERKS1_>
 810cc44:	68bb      	ldr	r3, [r7, #8]
 810cc46:	4618      	mov	r0, r3
 810cc48:	3710      	adds	r7, #16
 810cc4a:	46bd      	mov	sp, r7
 810cc4c:	bd80      	pop	{r7, pc}

0810cc4e <_ZNSt3_V26rotateIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEET_S8_S8_S8_>:
    rotate(_ForwardIterator __first, _ForwardIterator __middle,
 810cc4e:	b590      	push	{r4, r7, lr}
 810cc50:	b085      	sub	sp, #20
 810cc52:	af00      	add	r7, sp, #0
 810cc54:	60f8      	str	r0, [r7, #12]
 810cc56:	60b9      	str	r1, [r7, #8]
 810cc58:	607a      	str	r2, [r7, #4]
			   std::__iterator_category(__first));
 810cc5a:	f107 030c 	add.w	r3, r7, #12
 810cc5e:	4618      	mov	r0, r3
 810cc60:	f000 f9bf 	bl	810cfe2 <_ZSt19__iterator_categoryIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEENSt15iterator_traitsIT_E17iterator_categoryERKS8_>
      return std::__rotate(__first, __middle, __last,
 810cc64:	4623      	mov	r3, r4
 810cc66:	687a      	ldr	r2, [r7, #4]
 810cc68:	68b9      	ldr	r1, [r7, #8]
 810cc6a:	68f8      	ldr	r0, [r7, #12]
 810cc6c:	f000 f9c3 	bl	810cff6 <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEET_S8_S8_S8_St26random_access_iterator_tag>
 810cc70:	4603      	mov	r3, r0
    }
 810cc72:	4618      	mov	r0, r3
 810cc74:	3714      	adds	r7, #20
 810cc76:	46bd      	mov	sp, r7
 810cc78:	bd90      	pop	{r4, r7, pc}

0810cc7a <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 810cc7a:	b480      	push	{r7}
 810cc7c:	b083      	sub	sp, #12
 810cc7e:	af00      	add	r7, sp, #0
 810cc80:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 810cc82:	687b      	ldr	r3, [r7, #4]
 810cc84:	4618      	mov	r0, r3
 810cc86:	370c      	adds	r7, #12
 810cc88:	46bd      	mov	sp, r7
 810cc8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810cc8e:	4770      	bx	lr

0810cc90 <_ZSt8_DestroyIPffEvT_S1_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 810cc90:	b580      	push	{r7, lr}
 810cc92:	b084      	sub	sp, #16
 810cc94:	af00      	add	r7, sp, #0
 810cc96:	60f8      	str	r0, [r7, #12]
 810cc98:	60b9      	str	r1, [r7, #8]
 810cc9a:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 810cc9c:	68b9      	ldr	r1, [r7, #8]
 810cc9e:	68f8      	ldr	r0, [r7, #12]
 810cca0:	f000 fb1a 	bl	810d2d8 <_ZSt8_DestroyIPfEvT_S1_>
    }
 810cca4:	bf00      	nop
 810cca6:	3710      	adds	r7, #16
 810cca8:	46bd      	mov	sp, r7
 810ccaa:	bd80      	pop	{r7, pc}

0810ccac <_ZNSaIfEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 810ccac:	b580      	push	{r7, lr}
 810ccae:	b082      	sub	sp, #8
 810ccb0:	af00      	add	r7, sp, #0
 810ccb2:	6078      	str	r0, [r7, #4]
 810ccb4:	6878      	ldr	r0, [r7, #4]
 810ccb6:	f000 fb25 	bl	810d304 <_ZNSt15__new_allocatorIfEC1Ev>
 810ccba:	687b      	ldr	r3, [r7, #4]
 810ccbc:	4618      	mov	r0, r3
 810ccbe:	3708      	adds	r7, #8
 810ccc0:	46bd      	mov	sp, r7
 810ccc2:	bd80      	pop	{r7, pc}

0810ccc4 <_ZNSt12_Vector_baseIfSaIfEE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 810ccc4:	b480      	push	{r7}
 810ccc6:	b083      	sub	sp, #12
 810ccc8:	af00      	add	r7, sp, #0
 810ccca:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 810cccc:	687b      	ldr	r3, [r7, #4]
 810ccce:	2200      	movs	r2, #0
 810ccd0:	601a      	str	r2, [r3, #0]
 810ccd2:	687b      	ldr	r3, [r7, #4]
 810ccd4:	2200      	movs	r2, #0
 810ccd6:	605a      	str	r2, [r3, #4]
 810ccd8:	687b      	ldr	r3, [r7, #4]
 810ccda:	2200      	movs	r2, #0
 810ccdc:	609a      	str	r2, [r3, #8]
	{ }
 810ccde:	687b      	ldr	r3, [r7, #4]
 810cce0:	4618      	mov	r0, r3
 810cce2:	370c      	adds	r7, #12
 810cce4:	46bd      	mov	sp, r7
 810cce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ccea:	4770      	bx	lr

0810ccec <_ZNSt12_Vector_baseIfSaIfEE13_M_deallocateEPfj>:
      _M_deallocate(pointer __p, size_t __n)
 810ccec:	b580      	push	{r7, lr}
 810ccee:	b084      	sub	sp, #16
 810ccf0:	af00      	add	r7, sp, #0
 810ccf2:	60f8      	str	r0, [r7, #12]
 810ccf4:	60b9      	str	r1, [r7, #8]
 810ccf6:	607a      	str	r2, [r7, #4]
	if (__p)
 810ccf8:	68bb      	ldr	r3, [r7, #8]
 810ccfa:	2b00      	cmp	r3, #0
 810ccfc:	d005      	beq.n	810cd0a <_ZNSt12_Vector_baseIfSaIfEE13_M_deallocateEPfj+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 810ccfe:	68fb      	ldr	r3, [r7, #12]
 810cd00:	687a      	ldr	r2, [r7, #4]
 810cd02:	68b9      	ldr	r1, [r7, #8]
 810cd04:	4618      	mov	r0, r3
 810cd06:	f000 fb08 	bl	810d31a <_ZNSt16allocator_traitsISaIfEE10deallocateERS0_Pfj>
      }
 810cd0a:	bf00      	nop
 810cd0c:	3710      	adds	r7, #16
 810cd0e:	46bd      	mov	sp, r7
 810cd10:	bd80      	pop	{r7, pc}

0810cd12 <_ZNKSt6vectorIfSaIfEE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 810cd12:	b580      	push	{r7, lr}
 810cd14:	b082      	sub	sp, #8
 810cd16:	af00      	add	r7, sp, #0
 810cd18:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 810cd1a:	687b      	ldr	r3, [r7, #4]
 810cd1c:	4618      	mov	r0, r3
 810cd1e:	f000 f83f 	bl	810cda0 <_ZNKSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 810cd22:	4603      	mov	r3, r0
 810cd24:	4618      	mov	r0, r3
 810cd26:	f000 fb23 	bl	810d370 <_ZNSt6vectorIfSaIfEE11_S_max_sizeERKS0_>
 810cd2a:	4603      	mov	r3, r0
 810cd2c:	4618      	mov	r0, r3
 810cd2e:	3708      	adds	r7, #8
 810cd30:	46bd      	mov	sp, r7
 810cd32:	bd80      	pop	{r7, pc}

0810cd34 <_ZNKSt6vectorIfSaIfEE8capacityEv>:
      capacity() const _GLIBCXX_NOEXCEPT
 810cd34:	b480      	push	{r7}
 810cd36:	b083      	sub	sp, #12
 810cd38:	af00      	add	r7, sp, #0
 810cd3a:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_end_of_storage
 810cd3c:	687b      	ldr	r3, [r7, #4]
 810cd3e:	689a      	ldr	r2, [r3, #8]
			 - this->_M_impl._M_start); }
 810cd40:	687b      	ldr	r3, [r7, #4]
 810cd42:	681b      	ldr	r3, [r3, #0]
 810cd44:	1ad3      	subs	r3, r2, r3
 810cd46:	109b      	asrs	r3, r3, #2
 810cd48:	4618      	mov	r0, r3
 810cd4a:	370c      	adds	r7, #12
 810cd4c:	46bd      	mov	sp, r7
 810cd4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 810cd52:	4770      	bx	lr

0810cd54 <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj>:
      _M_allocate(size_t __n)
 810cd54:	b580      	push	{r7, lr}
 810cd56:	b082      	sub	sp, #8
 810cd58:	af00      	add	r7, sp, #0
 810cd5a:	6078      	str	r0, [r7, #4]
 810cd5c:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 810cd5e:	683b      	ldr	r3, [r7, #0]
 810cd60:	2b00      	cmp	r3, #0
 810cd62:	d006      	beq.n	810cd72 <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj+0x1e>
 810cd64:	687b      	ldr	r3, [r7, #4]
 810cd66:	6839      	ldr	r1, [r7, #0]
 810cd68:	4618      	mov	r0, r3
 810cd6a:	f000 fb1b 	bl	810d3a4 <_ZNSt16allocator_traitsISaIfEE8allocateERS0_j>
 810cd6e:	4603      	mov	r3, r0
 810cd70:	e000      	b.n	810cd74 <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj+0x20>
 810cd72:	2300      	movs	r3, #0
      }
 810cd74:	4618      	mov	r0, r3
 810cd76:	3708      	adds	r7, #8
 810cd78:	46bd      	mov	sp, r7
 810cd7a:	bd80      	pop	{r7, pc}

0810cd7c <_ZNSt6vectorIfSaIfEE11_S_relocateEPfS2_S2_RS0_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 810cd7c:	b580      	push	{r7, lr}
 810cd7e:	b084      	sub	sp, #16
 810cd80:	af00      	add	r7, sp, #0
 810cd82:	60f8      	str	r0, [r7, #12]
 810cd84:	60b9      	str	r1, [r7, #8]
 810cd86:	607a      	str	r2, [r7, #4]
 810cd88:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 810cd8a:	683b      	ldr	r3, [r7, #0]
 810cd8c:	687a      	ldr	r2, [r7, #4]
 810cd8e:	68b9      	ldr	r1, [r7, #8]
 810cd90:	68f8      	ldr	r0, [r7, #12]
 810cd92:	f000 fb38 	bl	810d406 <_ZSt12__relocate_aIPfS0_SaIfEET0_T_S3_S2_RT1_>
 810cd96:	4603      	mov	r3, r0
      }
 810cd98:	4618      	mov	r0, r3
 810cd9a:	3710      	adds	r7, #16
 810cd9c:	46bd      	mov	sp, r7
 810cd9e:	bd80      	pop	{r7, pc}

0810cda0 <_ZNKSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 810cda0:	b480      	push	{r7}
 810cda2:	b083      	sub	sp, #12
 810cda4:	af00      	add	r7, sp, #0
 810cda6:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 810cda8:	687b      	ldr	r3, [r7, #4]
 810cdaa:	4618      	mov	r0, r3
 810cdac:	370c      	adds	r7, #12
 810cdae:	46bd      	mov	sp, r7
 810cdb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 810cdb4:	4770      	bx	lr

0810cdb6 <_ZN9__gnu_cxx14__alloc_traitsISaIfEfE17_S_select_on_copyERKS1_>:
      std::__enable_if_t<__is_custom_pointer<_Ptr>::value>
      destroy(_Alloc& __a, _Ptr __p)
      noexcept(noexcept(_Base_type::destroy(__a, std::__to_address(__p))))
      { _Base_type::destroy(__a, std::__to_address(__p)); }

    static constexpr _Alloc _S_select_on_copy(const _Alloc& __a)
 810cdb6:	b580      	push	{r7, lr}
 810cdb8:	b082      	sub	sp, #8
 810cdba:	af00      	add	r7, sp, #0
 810cdbc:	6078      	str	r0, [r7, #4]
 810cdbe:	6039      	str	r1, [r7, #0]
    { return _Base_type::select_on_container_copy_construction(__a); }
 810cdc0:	687b      	ldr	r3, [r7, #4]
 810cdc2:	6839      	ldr	r1, [r7, #0]
 810cdc4:	4618      	mov	r0, r3
 810cdc6:	f000 fb3b 	bl	810d440 <_ZNSt16allocator_traitsISaIfEE37select_on_container_copy_constructionERKS0_>
 810cdca:	6878      	ldr	r0, [r7, #4]
 810cdcc:	3708      	adds	r7, #8
 810cdce:	46bd      	mov	sp, r7
 810cdd0:	bd80      	pop	{r7, pc}

0810cdd2 <_ZNSt12_Vector_baseIfSaIfEEC1EjRKS0_>:
      _Vector_base(size_t __n, const allocator_type& __a)
 810cdd2:	b580      	push	{r7, lr}
 810cdd4:	b084      	sub	sp, #16
 810cdd6:	af00      	add	r7, sp, #0
 810cdd8:	60f8      	str	r0, [r7, #12]
 810cdda:	60b9      	str	r1, [r7, #8]
 810cddc:	607a      	str	r2, [r7, #4]
      : _M_impl(__a)
 810cdde:	68fb      	ldr	r3, [r7, #12]
 810cde0:	6879      	ldr	r1, [r7, #4]
 810cde2:	4618      	mov	r0, r3
 810cde4:	f000 fb39 	bl	810d45a <_ZNSt12_Vector_baseIfSaIfEE12_Vector_implC1ERKS0_>
      { _M_create_storage(__n); }
 810cde8:	68b9      	ldr	r1, [r7, #8]
 810cdea:	68f8      	ldr	r0, [r7, #12]
 810cdec:	f000 fb47 	bl	810d47e <_ZNSt12_Vector_baseIfSaIfEE17_M_create_storageEj>
 810cdf0:	68fb      	ldr	r3, [r7, #12]
 810cdf2:	4618      	mov	r0, r3
 810cdf4:	3710      	adds	r7, #16
 810cdf6:	46bd      	mov	sp, r7
 810cdf8:	bd80      	pop	{r7, pc}

0810cdfa <_ZNKSt6vectorIfSaIfEE5beginEv>:
      begin() const _GLIBCXX_NOEXCEPT
 810cdfa:	b580      	push	{r7, lr}
 810cdfc:	b084      	sub	sp, #16
 810cdfe:	af00      	add	r7, sp, #0
 810ce00:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_start); }
 810ce02:	687a      	ldr	r2, [r7, #4]
 810ce04:	f107 030c 	add.w	r3, r7, #12
 810ce08:	4611      	mov	r1, r2
 810ce0a:	4618      	mov	r0, r3
 810ce0c:	f000 fb52 	bl	810d4b4 <_ZN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEC1ERKS2_>
 810ce10:	68fb      	ldr	r3, [r7, #12]
 810ce12:	4618      	mov	r0, r3
 810ce14:	3710      	adds	r7, #16
 810ce16:	46bd      	mov	sp, r7
 810ce18:	bd80      	pop	{r7, pc}

0810ce1a <_ZNKSt6vectorIfSaIfEE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
 810ce1a:	b580      	push	{r7, lr}
 810ce1c:	b084      	sub	sp, #16
 810ce1e:	af00      	add	r7, sp, #0
 810ce20:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_finish); }
 810ce22:	687b      	ldr	r3, [r7, #4]
 810ce24:	1d1a      	adds	r2, r3, #4
 810ce26:	f107 030c 	add.w	r3, r7, #12
 810ce2a:	4611      	mov	r1, r2
 810ce2c:	4618      	mov	r0, r3
 810ce2e:	f000 fb41 	bl	810d4b4 <_ZN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEC1ERKS2_>
 810ce32:	68fb      	ldr	r3, [r7, #12]
 810ce34:	4618      	mov	r0, r3
 810ce36:	3710      	adds	r7, #16
 810ce38:	46bd      	mov	sp, r7
 810ce3a:	bd80      	pop	{r7, pc}

0810ce3c <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPffET0_T_SA_S9_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 810ce3c:	b580      	push	{r7, lr}
 810ce3e:	b084      	sub	sp, #16
 810ce40:	af00      	add	r7, sp, #0
 810ce42:	60f8      	str	r0, [r7, #12]
 810ce44:	60b9      	str	r1, [r7, #8]
 810ce46:	607a      	str	r2, [r7, #4]
 810ce48:	603b      	str	r3, [r7, #0]
      if (std::is_constant_evaluated())
 810ce4a:	f7fb fee2 	bl	8108c12 <_ZSt21is_constant_evaluatedv>
 810ce4e:	4603      	mov	r3, r0
 810ce50:	2b00      	cmp	r3, #0
 810ce52:	d006      	beq.n	810ce62 <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPffET0_T_SA_S9_RSaIT1_E+0x26>
	return std::__do_uninit_copy(__first, __last, __result);
 810ce54:	687a      	ldr	r2, [r7, #4]
 810ce56:	68b9      	ldr	r1, [r7, #8]
 810ce58:	68f8      	ldr	r0, [r7, #12]
 810ce5a:	f000 fb5e 	bl	810d51a <_ZSt16__do_uninit_copyIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfET0_T_SA_S9_>
 810ce5e:	4603      	mov	r3, r0
 810ce60:	e006      	b.n	810ce70 <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPffET0_T_SA_S9_RSaIT1_E+0x34>
      return std::uninitialized_copy(__first, __last, __result);
 810ce62:	687a      	ldr	r2, [r7, #4]
 810ce64:	68b9      	ldr	r1, [r7, #8]
 810ce66:	68f8      	ldr	r0, [r7, #12]
 810ce68:	f000 fb89 	bl	810d57e <_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfET0_T_SA_S9_>
 810ce6c:	4603      	mov	r3, r0
 810ce6e:	bf00      	nop
    }
 810ce70:	4618      	mov	r0, r3
 810ce72:	3710      	adds	r7, #16
 810ce74:	46bd      	mov	sp, r7
 810ce76:	bd80      	pop	{r7, pc}

0810ce78 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEC1ERKS1_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 810ce78:	b480      	push	{r7}
 810ce7a:	b083      	sub	sp, #12
 810ce7c:	af00      	add	r7, sp, #0
 810ce7e:	6078      	str	r0, [r7, #4]
 810ce80:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 810ce82:	683b      	ldr	r3, [r7, #0]
 810ce84:	681a      	ldr	r2, [r3, #0]
 810ce86:	687b      	ldr	r3, [r7, #4]
 810ce88:	601a      	str	r2, [r3, #0]
 810ce8a:	687b      	ldr	r3, [r7, #4]
 810ce8c:	4618      	mov	r0, r3
 810ce8e:	370c      	adds	r7, #12
 810ce90:	46bd      	mov	sp, r7
 810ce92:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ce96:	4770      	bx	lr

0810ce98 <_ZN9__gnu_cxxeqIPfSt6vectorIfSaIfEEEEbRKNS_17__normal_iteratorIT_T0_EESA_>:
    operator==(const __normal_iterator<_Iterator, _Container>& __lhs,
 810ce98:	b590      	push	{r4, r7, lr}
 810ce9a:	b083      	sub	sp, #12
 810ce9c:	af00      	add	r7, sp, #0
 810ce9e:	6078      	str	r0, [r7, #4]
 810cea0:	6039      	str	r1, [r7, #0]
    { return __lhs.base() == __rhs.base(); }
 810cea2:	6878      	ldr	r0, [r7, #4]
 810cea4:	f000 f810 	bl	810cec8 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEE4baseEv>
 810cea8:	4603      	mov	r3, r0
 810ceaa:	681c      	ldr	r4, [r3, #0]
 810ceac:	6838      	ldr	r0, [r7, #0]
 810ceae:	f000 f80b 	bl	810cec8 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEE4baseEv>
 810ceb2:	4603      	mov	r3, r0
 810ceb4:	681b      	ldr	r3, [r3, #0]
 810ceb6:	429c      	cmp	r4, r3
 810ceb8:	bf0c      	ite	eq
 810ceba:	2301      	moveq	r3, #1
 810cebc:	2300      	movne	r3, #0
 810cebe:	b2db      	uxtb	r3, r3
 810cec0:	4618      	mov	r0, r3
 810cec2:	370c      	adds	r7, #12
 810cec4:	46bd      	mov	sp, r7
 810cec6:	bd90      	pop	{r4, r7, pc}

0810cec8 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 810cec8:	b480      	push	{r7}
 810ceca:	b083      	sub	sp, #12
 810cecc:	af00      	add	r7, sp, #0
 810cece:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 810ced0:	687b      	ldr	r3, [r7, #4]
 810ced2:	4618      	mov	r0, r3
 810ced4:	370c      	adds	r7, #12
 810ced6:	46bd      	mov	sp, r7
 810ced8:	f85d 7b04 	ldr.w	r7, [sp], #4
 810cedc:	4770      	bx	lr

0810cede <_ZN9__gnu_cxxmiIPfSt6vectorIfSaIfEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 810cede:	b590      	push	{r4, r7, lr}
 810cee0:	b083      	sub	sp, #12
 810cee2:	af00      	add	r7, sp, #0
 810cee4:	6078      	str	r0, [r7, #4]
 810cee6:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 810cee8:	6878      	ldr	r0, [r7, #4]
 810ceea:	f7ff ffed 	bl	810cec8 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEE4baseEv>
 810ceee:	4603      	mov	r3, r0
 810cef0:	681c      	ldr	r4, [r3, #0]
 810cef2:	6838      	ldr	r0, [r7, #0]
 810cef4:	f7ff ffe8 	bl	810cec8 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEE4baseEv>
 810cef8:	4603      	mov	r3, r0
 810cefa:	681b      	ldr	r3, [r3, #0]
 810cefc:	1ae3      	subs	r3, r4, r3
 810cefe:	109b      	asrs	r3, r3, #2
 810cf00:	4618      	mov	r0, r3
 810cf02:	370c      	adds	r7, #12
 810cf04:	46bd      	mov	sp, r7
 810cf06:	bd90      	pop	{r4, r7, pc}

0810cf08 <_ZSt6__sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_>:
    __sort(_RandomAccessIterator __first, _RandomAccessIterator __last,
 810cf08:	b5b0      	push	{r4, r5, r7, lr}
 810cf0a:	b084      	sub	sp, #16
 810cf0c:	af00      	add	r7, sp, #0
 810cf0e:	60f8      	str	r0, [r7, #12]
 810cf10:	60b9      	str	r1, [r7, #8]
 810cf12:	713a      	strb	r2, [r7, #4]
      if (__first != __last)
 810cf14:	f107 0208 	add.w	r2, r7, #8
 810cf18:	f107 030c 	add.w	r3, r7, #12
 810cf1c:	4611      	mov	r1, r2
 810cf1e:	4618      	mov	r0, r3
 810cf20:	f7ff ffba 	bl	810ce98 <_ZN9__gnu_cxxeqIPfSt6vectorIfSaIfEEEEbRKNS_17__normal_iteratorIT_T0_EESA_>
 810cf24:	4603      	mov	r3, r0
 810cf26:	f083 0301 	eor.w	r3, r3, #1
 810cf2a:	b2db      	uxtb	r3, r3
 810cf2c:	2b00      	cmp	r3, #0
 810cf2e:	d017      	beq.n	810cf60 <_ZSt6__sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_+0x58>
				std::__lg(__last - __first) * 2,
 810cf30:	f107 020c 	add.w	r2, r7, #12
 810cf34:	f107 0308 	add.w	r3, r7, #8
 810cf38:	4611      	mov	r1, r2
 810cf3a:	4618      	mov	r0, r3
 810cf3c:	f7ff ffcf 	bl	810cede <_ZN9__gnu_cxxmiIPfSt6vectorIfSaIfEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 810cf40:	4603      	mov	r3, r0
 810cf42:	4618      	mov	r0, r3
 810cf44:	f7ff fb2e 	bl	810c5a4 <_ZSt4__lgi>
 810cf48:	4603      	mov	r3, r0
	  std::__introsort_loop(__first, __last,
 810cf4a:	005a      	lsls	r2, r3, #1
 810cf4c:	462b      	mov	r3, r5
 810cf4e:	68b9      	ldr	r1, [r7, #8]
 810cf50:	68f8      	ldr	r0, [r7, #12]
 810cf52:	f000 fb28 	bl	810d5a6 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEiNS0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_>
	  std::__final_insertion_sort(__first, __last, __comp);
 810cf56:	4622      	mov	r2, r4
 810cf58:	68b9      	ldr	r1, [r7, #8]
 810cf5a:	68f8      	ldr	r0, [r7, #12]
 810cf5c:	f000 fb5a 	bl	810d614 <_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_>
    }
 810cf60:	bf00      	nop
 810cf62:	3710      	adds	r7, #16
 810cf64:	46bd      	mov	sp, r7
 810cf66:	bdb0      	pop	{r4, r5, r7, pc}

0810cf68 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>:
    move(_Tp&& __t) noexcept
 810cf68:	b480      	push	{r7}
 810cf6a:	b083      	sub	sp, #12
 810cf6c:	af00      	add	r7, sp, #0
 810cf6e:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 810cf70:	687b      	ldr	r3, [r7, #4]
 810cf72:	4618      	mov	r0, r3
 810cf74:	370c      	adds	r7, #12
 810cf76:	46bd      	mov	sp, r7
 810cf78:	f85d 7b04 	ldr.w	r7, [sp], #4
 810cf7c:	4770      	bx	lr

0810cf7e <_ZNSt6vectorIfSaIfEE12emplace_backIJfEEERfDpOT_>:
      vector<_Tp, _Alloc>::
 810cf7e:	b5b0      	push	{r4, r5, r7, lr}
 810cf80:	b082      	sub	sp, #8
 810cf82:	af00      	add	r7, sp, #0
 810cf84:	6078      	str	r0, [r7, #4]
 810cf86:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 810cf88:	687b      	ldr	r3, [r7, #4]
 810cf8a:	685a      	ldr	r2, [r3, #4]
 810cf8c:	687b      	ldr	r3, [r7, #4]
 810cf8e:	689b      	ldr	r3, [r3, #8]
 810cf90:	429a      	cmp	r2, r3
 810cf92:	d011      	beq.n	810cfb8 <_ZNSt6vectorIfSaIfEE12emplace_backIJfEEERfDpOT_+0x3a>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 810cf94:	687c      	ldr	r4, [r7, #4]
 810cf96:	687b      	ldr	r3, [r7, #4]
 810cf98:	685d      	ldr	r5, [r3, #4]
 810cf9a:	6838      	ldr	r0, [r7, #0]
 810cf9c:	f000 fb72 	bl	810d684 <_ZSt7forwardIfEOT_RNSt16remove_referenceIS0_E4typeE>
 810cfa0:	4603      	mov	r3, r0
 810cfa2:	461a      	mov	r2, r3
 810cfa4:	4629      	mov	r1, r5
 810cfa6:	4620      	mov	r0, r4
 810cfa8:	f000 fb77 	bl	810d69a <_ZNSt16allocator_traitsISaIfEE9constructIfJfEEEvRS0_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
 810cfac:	687b      	ldr	r3, [r7, #4]
 810cfae:	685b      	ldr	r3, [r3, #4]
 810cfb0:	1d1a      	adds	r2, r3, #4
 810cfb2:	687b      	ldr	r3, [r7, #4]
 810cfb4:	605a      	str	r2, [r3, #4]
 810cfb6:	e00c      	b.n	810cfd2 <_ZNSt6vectorIfSaIfEE12emplace_backIJfEEERfDpOT_+0x54>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 810cfb8:	6878      	ldr	r0, [r7, #4]
 810cfba:	f7ff fdee 	bl	810cb9a <_ZNSt6vectorIfSaIfEE3endEv>
 810cfbe:	4604      	mov	r4, r0
 810cfc0:	6838      	ldr	r0, [r7, #0]
 810cfc2:	f000 fb5f 	bl	810d684 <_ZSt7forwardIfEOT_RNSt16remove_referenceIS0_E4typeE>
 810cfc6:	4603      	mov	r3, r0
 810cfc8:	461a      	mov	r2, r3
 810cfca:	4621      	mov	r1, r4
 810cfcc:	6878      	ldr	r0, [r7, #4]
 810cfce:	f000 fbbd 	bl	810d74c <_ZNSt6vectorIfSaIfEE17_M_realloc_insertIJfEEEvN9__gnu_cxx17__normal_iteratorIPfS1_EEDpOT_>
	return back();
 810cfd2:	6878      	ldr	r0, [r7, #4]
 810cfd4:	f000 fc36 	bl	810d844 <_ZNSt6vectorIfSaIfEE4backEv>
 810cfd8:	4603      	mov	r3, r0
      }
 810cfda:	4618      	mov	r0, r3
 810cfdc:	3708      	adds	r7, #8
 810cfde:	46bd      	mov	sp, r7
 810cfe0:	bdb0      	pop	{r4, r5, r7, pc}

0810cfe2 <_ZSt19__iterator_categoryIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEENSt15iterator_traitsIT_E17iterator_categoryERKS8_>:
   *  sugar for internal library use only.
  */
  template<typename _Iter>
    inline _GLIBCXX_CONSTEXPR
    typename iterator_traits<_Iter>::iterator_category
    __iterator_category(const _Iter&)
 810cfe2:	b480      	push	{r7}
 810cfe4:	b083      	sub	sp, #12
 810cfe6:	af00      	add	r7, sp, #0
 810cfe8:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 810cfea:	4618      	mov	r0, r3
 810cfec:	370c      	adds	r7, #12
 810cfee:	46bd      	mov	sp, r7
 810cff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 810cff4:	4770      	bx	lr

0810cff6 <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEET_S8_S8_S8_St26random_access_iterator_tag>:
    __rotate(_RandomAccessIterator __first,
 810cff6:	b590      	push	{r4, r7, lr}
 810cff8:	b095      	sub	sp, #84	@ 0x54
 810cffa:	af00      	add	r7, sp, #0
 810cffc:	60f8      	str	r0, [r7, #12]
 810cffe:	60b9      	str	r1, [r7, #8]
 810d000:	607a      	str	r2, [r7, #4]
 810d002:	703b      	strb	r3, [r7, #0]
      if (__first == __middle)
 810d004:	f107 0208 	add.w	r2, r7, #8
 810d008:	f107 030c 	add.w	r3, r7, #12
 810d00c:	4611      	mov	r1, r2
 810d00e:	4618      	mov	r0, r3
 810d010:	f7ff ff42 	bl	810ce98 <_ZN9__gnu_cxxeqIPfSt6vectorIfSaIfEEEEbRKNS_17__normal_iteratorIT_T0_EESA_>
 810d014:	4603      	mov	r3, r0
 810d016:	2b00      	cmp	r3, #0
 810d018:	d001      	beq.n	810d01e <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEET_S8_S8_S8_St26random_access_iterator_tag+0x28>
	return __last;
 810d01a:	687b      	ldr	r3, [r7, #4]
 810d01c:	e158      	b.n	810d2d0 <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEET_S8_S8_S8_St26random_access_iterator_tag+0x2da>
      else if (__last == __middle)
 810d01e:	f107 0208 	add.w	r2, r7, #8
 810d022:	1d3b      	adds	r3, r7, #4
 810d024:	4611      	mov	r1, r2
 810d026:	4618      	mov	r0, r3
 810d028:	f7ff ff36 	bl	810ce98 <_ZN9__gnu_cxxeqIPfSt6vectorIfSaIfEEEEbRKNS_17__normal_iteratorIT_T0_EESA_>
 810d02c:	4603      	mov	r3, r0
 810d02e:	2b00      	cmp	r3, #0
 810d030:	d001      	beq.n	810d036 <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEET_S8_S8_S8_St26random_access_iterator_tag+0x40>
	return __first;
 810d032:	68fb      	ldr	r3, [r7, #12]
 810d034:	e14c      	b.n	810d2d0 <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEET_S8_S8_S8_St26random_access_iterator_tag+0x2da>
      _Distance __n = __last   - __first;
 810d036:	f107 020c 	add.w	r2, r7, #12
 810d03a:	1d3b      	adds	r3, r7, #4
 810d03c:	4611      	mov	r1, r2
 810d03e:	4618      	mov	r0, r3
 810d040:	f7ff ff4d 	bl	810cede <_ZN9__gnu_cxxmiIPfSt6vectorIfSaIfEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 810d044:	4603      	mov	r3, r0
 810d046:	633b      	str	r3, [r7, #48]	@ 0x30
      _Distance __k = __middle - __first;
 810d048:	f107 020c 	add.w	r2, r7, #12
 810d04c:	f107 0308 	add.w	r3, r7, #8
 810d050:	4611      	mov	r1, r2
 810d052:	4618      	mov	r0, r3
 810d054:	f7ff ff43 	bl	810cede <_ZN9__gnu_cxxmiIPfSt6vectorIfSaIfEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 810d058:	4603      	mov	r3, r0
 810d05a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (__k == __n - __k)
 810d05c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810d05e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810d060:	1ad2      	subs	r2, r2, r3
 810d062:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810d064:	429a      	cmp	r2, r3
 810d066:	d106      	bne.n	810d076 <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEET_S8_S8_S8_St26random_access_iterator_tag+0x80>
	  std::swap_ranges(__first, __middle, __middle);
 810d068:	68ba      	ldr	r2, [r7, #8]
 810d06a:	68b9      	ldr	r1, [r7, #8]
 810d06c:	68f8      	ldr	r0, [r7, #12]
 810d06e:	f000 fc04 	bl	810d87a <_ZSt11swap_rangesIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_ET0_T_S8_S7_>
	  return __middle;
 810d072:	68bb      	ldr	r3, [r7, #8]
 810d074:	e12c      	b.n	810d2d0 <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEET_S8_S8_S8_St26random_access_iterator_tag+0x2da>
      _RandomAccessIterator __p = __first;
 810d076:	68fb      	ldr	r3, [r7, #12]
 810d078:	62bb      	str	r3, [r7, #40]	@ 0x28
      _RandomAccessIterator __ret = __first + (__last - __middle);
 810d07a:	f107 0208 	add.w	r2, r7, #8
 810d07e:	1d3b      	adds	r3, r7, #4
 810d080:	4611      	mov	r1, r2
 810d082:	4618      	mov	r0, r3
 810d084:	f7ff ff2b 	bl	810cede <_ZN9__gnu_cxxmiIPfSt6vectorIfSaIfEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 810d088:	4602      	mov	r2, r0
 810d08a:	f107 030c 	add.w	r3, r7, #12
 810d08e:	4611      	mov	r1, r2
 810d090:	4618      	mov	r0, r3
 810d092:	f7ff fdc4 	bl	810cc1e <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 810d096:	4603      	mov	r3, r0
 810d098:	627b      	str	r3, [r7, #36]	@ 0x24
	  if (__k < __n - __k)
 810d09a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810d09c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810d09e:	1ad2      	subs	r2, r2, r3
 810d0a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810d0a2:	429a      	cmp	r2, r3
 810d0a4:	f340 8081 	ble.w	810d1aa <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEET_S8_S8_S8_St26random_access_iterator_tag+0x1b4>
	      if (__is_pod(_ValueType) && __k == 1)
 810d0a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810d0aa:	2b01      	cmp	r3, #1
 810d0ac:	d140      	bne.n	810d130 <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEET_S8_S8_S8_St26random_access_iterator_tag+0x13a>
		  _ValueType __t = _GLIBCXX_MOVE(*__p);
 810d0ae:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 810d0b2:	4618      	mov	r0, r3
 810d0b4:	f000 fc08 	bl	810d8c8 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 810d0b8:	4603      	mov	r3, r0
 810d0ba:	4618      	mov	r0, r3
 810d0bc:	f7ff ff54 	bl	810cf68 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 810d0c0:	4603      	mov	r3, r0
 810d0c2:	681b      	ldr	r3, [r3, #0]
 810d0c4:	61fb      	str	r3, [r7, #28]
		  _GLIBCXX_MOVE3(__p + 1, __p + __n, __p);
 810d0c6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 810d0ca:	2101      	movs	r1, #1
 810d0cc:	4618      	mov	r0, r3
 810d0ce:	f7ff fda6 	bl	810cc1e <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 810d0d2:	4604      	mov	r4, r0
 810d0d4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810d0d6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 810d0da:	4611      	mov	r1, r2
 810d0dc:	4618      	mov	r0, r3
 810d0de:	f7ff fd9e 	bl	810cc1e <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 810d0e2:	4603      	mov	r3, r0
 810d0e4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 810d0e6:	4619      	mov	r1, r3
 810d0e8:	4620      	mov	r0, r4
 810d0ea:	f000 fbf9 	bl	810d8e0 <_ZSt4moveIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_ET0_T_S8_S7_>
		  *(__p + __n - 1) = _GLIBCXX_MOVE(__t);
 810d0ee:	f107 031c 	add.w	r3, r7, #28
 810d0f2:	4618      	mov	r0, r3
 810d0f4:	f7ff ff38 	bl	810cf68 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 810d0f8:	4603      	mov	r3, r0
 810d0fa:	681c      	ldr	r4, [r3, #0]
 810d0fc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810d0fe:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 810d102:	4611      	mov	r1, r2
 810d104:	4618      	mov	r0, r3
 810d106:	f7ff fd8a 	bl	810cc1e <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 810d10a:	4603      	mov	r3, r0
 810d10c:	63bb      	str	r3, [r7, #56]	@ 0x38
 810d10e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 810d112:	2101      	movs	r1, #1
 810d114:	4618      	mov	r0, r3
 810d116:	f000 fbfb 	bl	810d910 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEmiEi>
 810d11a:	4603      	mov	r3, r0
 810d11c:	637b      	str	r3, [r7, #52]	@ 0x34
 810d11e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 810d122:	4618      	mov	r0, r3
 810d124:	f000 fbd0 	bl	810d8c8 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 810d128:	4603      	mov	r3, r0
 810d12a:	601c      	str	r4, [r3, #0]
		  return __ret;
 810d12c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810d12e:	e0cf      	b.n	810d2d0 <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEET_S8_S8_S8_St26random_access_iterator_tag+0x2da>
	      _RandomAccessIterator __q = __p + __k;
 810d130:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 810d132:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 810d136:	4611      	mov	r1, r2
 810d138:	4618      	mov	r0, r3
 810d13a:	f7ff fd70 	bl	810cc1e <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 810d13e:	4603      	mov	r3, r0
 810d140:	623b      	str	r3, [r7, #32]
	      for (_Distance __i = 0; __i < __n - __k; ++ __i)
 810d142:	2300      	movs	r3, #0
 810d144:	64fb      	str	r3, [r7, #76]	@ 0x4c
 810d146:	e010      	b.n	810d16a <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEET_S8_S8_S8_St26random_access_iterator_tag+0x174>
		  std::iter_swap(__p, __q);
 810d148:	6a39      	ldr	r1, [r7, #32]
 810d14a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 810d14c:	f000 fbf9 	bl	810d942 <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_EvT_T0_>
		  ++__p;
 810d150:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 810d154:	4618      	mov	r0, r3
 810d156:	f000 fc0b 	bl	810d970 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEppEv>
		  ++__q;
 810d15a:	f107 0320 	add.w	r3, r7, #32
 810d15e:	4618      	mov	r0, r3
 810d160:	f000 fc06 	bl	810d970 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEppEv>
	      for (_Distance __i = 0; __i < __n - __k; ++ __i)
 810d164:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 810d166:	3301      	adds	r3, #1
 810d168:	64fb      	str	r3, [r7, #76]	@ 0x4c
 810d16a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810d16c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810d16e:	1ad3      	subs	r3, r2, r3
 810d170:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 810d172:	429a      	cmp	r2, r3
 810d174:	dbe8      	blt.n	810d148 <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEET_S8_S8_S8_St26random_access_iterator_tag+0x152>
	      __n %= __k;
 810d176:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810d178:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 810d17a:	fb93 f1f2 	sdiv	r1, r3, r2
 810d17e:	fb01 f202 	mul.w	r2, r1, r2
 810d182:	1a9b      	subs	r3, r3, r2
 810d184:	633b      	str	r3, [r7, #48]	@ 0x30
	      if (__n == 0)
 810d186:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810d188:	2b00      	cmp	r3, #0
 810d18a:	d101      	bne.n	810d190 <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEET_S8_S8_S8_St26random_access_iterator_tag+0x19a>
		return __ret;
 810d18c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810d18e:	e09f      	b.n	810d2d0 <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEET_S8_S8_S8_St26random_access_iterator_tag+0x2da>
	      std::swap(__n, __k);
 810d190:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 810d194:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 810d198:	4611      	mov	r1, r2
 810d19a:	4618      	mov	r0, r3
 810d19c:	f000 fbf8 	bl	810d990 <_ZSt4swapIiENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS4_ESt18is_move_assignableIS4_EEE5valueEvE4typeERS4_SE_>
	      __k = __n - __k;
 810d1a0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810d1a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810d1a4:	1ad3      	subs	r3, r2, r3
 810d1a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 810d1a8:	e777      	b.n	810d09a <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEET_S8_S8_S8_St26random_access_iterator_tag+0xa4>
	      __k = __n - __k;
 810d1aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810d1ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810d1ae:	1ad3      	subs	r3, r2, r3
 810d1b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	      if (__is_pod(_ValueType) && __k == 1)
 810d1b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810d1b4:	2b01      	cmp	r3, #1
 810d1b6:	d149      	bne.n	810d24c <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEET_S8_S8_S8_St26random_access_iterator_tag+0x256>
		  _ValueType __t = _GLIBCXX_MOVE(*(__p + __n - 1));
 810d1b8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810d1ba:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 810d1be:	4611      	mov	r1, r2
 810d1c0:	4618      	mov	r0, r3
 810d1c2:	f7ff fd2c 	bl	810cc1e <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 810d1c6:	4603      	mov	r3, r0
 810d1c8:	643b      	str	r3, [r7, #64]	@ 0x40
 810d1ca:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 810d1ce:	2101      	movs	r1, #1
 810d1d0:	4618      	mov	r0, r3
 810d1d2:	f000 fb9d 	bl	810d910 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEmiEi>
 810d1d6:	4603      	mov	r3, r0
 810d1d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 810d1da:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 810d1de:	4618      	mov	r0, r3
 810d1e0:	f000 fb72 	bl	810d8c8 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 810d1e4:	4603      	mov	r3, r0
 810d1e6:	4618      	mov	r0, r3
 810d1e8:	f7ff febe 	bl	810cf68 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 810d1ec:	4603      	mov	r3, r0
 810d1ee:	681b      	ldr	r3, [r3, #0]
 810d1f0:	617b      	str	r3, [r7, #20]
		  _GLIBCXX_MOVE_BACKWARD3(__p, __p + __n - 1, __p + __n);
 810d1f2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810d1f4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 810d1f8:	4611      	mov	r1, r2
 810d1fa:	4618      	mov	r0, r3
 810d1fc:	f7ff fd0f 	bl	810cc1e <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 810d200:	4603      	mov	r3, r0
 810d202:	647b      	str	r3, [r7, #68]	@ 0x44
 810d204:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 810d208:	2101      	movs	r1, #1
 810d20a:	4618      	mov	r0, r3
 810d20c:	f000 fb80 	bl	810d910 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEmiEi>
 810d210:	4604      	mov	r4, r0
 810d212:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810d214:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 810d218:	4611      	mov	r1, r2
 810d21a:	4618      	mov	r0, r3
 810d21c:	f7ff fcff 	bl	810cc1e <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 810d220:	4603      	mov	r3, r0
 810d222:	461a      	mov	r2, r3
 810d224:	4621      	mov	r1, r4
 810d226:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 810d228:	f000 fbd1 	bl	810d9ce <_ZSt13move_backwardIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_ET0_T_S8_S7_>
		  *__p = _GLIBCXX_MOVE(__t);
 810d22c:	f107 0314 	add.w	r3, r7, #20
 810d230:	4618      	mov	r0, r3
 810d232:	f7ff fe99 	bl	810cf68 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 810d236:	4603      	mov	r3, r0
 810d238:	681c      	ldr	r4, [r3, #0]
 810d23a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 810d23e:	4618      	mov	r0, r3
 810d240:	f000 fb42 	bl	810d8c8 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 810d244:	4603      	mov	r3, r0
 810d246:	601c      	str	r4, [r3, #0]
		  return __ret;
 810d248:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810d24a:	e041      	b.n	810d2d0 <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEET_S8_S8_S8_St26random_access_iterator_tag+0x2da>
	      _RandomAccessIterator __q = __p + __n;
 810d24c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810d24e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 810d252:	4611      	mov	r1, r2
 810d254:	4618      	mov	r0, r3
 810d256:	f7ff fce2 	bl	810cc1e <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 810d25a:	4603      	mov	r3, r0
 810d25c:	61bb      	str	r3, [r7, #24]
	      __p = __q - __k;
 810d25e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 810d260:	f107 0318 	add.w	r3, r7, #24
 810d264:	4611      	mov	r1, r2
 810d266:	4618      	mov	r0, r3
 810d268:	f000 fb52 	bl	810d910 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEmiEi>
 810d26c:	4603      	mov	r3, r0
 810d26e:	62bb      	str	r3, [r7, #40]	@ 0x28
	      for (_Distance __i = 0; __i < __n - __k; ++ __i)
 810d270:	2300      	movs	r3, #0
 810d272:	64bb      	str	r3, [r7, #72]	@ 0x48
 810d274:	e010      	b.n	810d298 <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEET_S8_S8_S8_St26random_access_iterator_tag+0x2a2>
		  --__p;
 810d276:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 810d27a:	4618      	mov	r0, r3
 810d27c:	f000 fbbf 	bl	810d9fe <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEmmEv>
		  --__q;
 810d280:	f107 0318 	add.w	r3, r7, #24
 810d284:	4618      	mov	r0, r3
 810d286:	f000 fbba 	bl	810d9fe <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEmmEv>
		  std::iter_swap(__p, __q);
 810d28a:	69b9      	ldr	r1, [r7, #24]
 810d28c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 810d28e:	f000 fb58 	bl	810d942 <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_EvT_T0_>
	      for (_Distance __i = 0; __i < __n - __k; ++ __i)
 810d292:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 810d294:	3301      	adds	r3, #1
 810d296:	64bb      	str	r3, [r7, #72]	@ 0x48
 810d298:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810d29a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810d29c:	1ad3      	subs	r3, r2, r3
 810d29e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 810d2a0:	429a      	cmp	r2, r3
 810d2a2:	dbe8      	blt.n	810d276 <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEET_S8_S8_S8_St26random_access_iterator_tag+0x280>
	      __n %= __k;
 810d2a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810d2a6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 810d2a8:	fb93 f1f2 	sdiv	r1, r3, r2
 810d2ac:	fb01 f202 	mul.w	r2, r1, r2
 810d2b0:	1a9b      	subs	r3, r3, r2
 810d2b2:	633b      	str	r3, [r7, #48]	@ 0x30
	      if (__n == 0)
 810d2b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810d2b6:	2b00      	cmp	r3, #0
 810d2b8:	d101      	bne.n	810d2be <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEET_S8_S8_S8_St26random_access_iterator_tag+0x2c8>
		return __ret;
 810d2ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810d2bc:	e008      	b.n	810d2d0 <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEET_S8_S8_S8_St26random_access_iterator_tag+0x2da>
	      std::swap(__n, __k);
 810d2be:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 810d2c2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 810d2c6:	4611      	mov	r1, r2
 810d2c8:	4618      	mov	r0, r3
 810d2ca:	f000 fb61 	bl	810d990 <_ZSt4swapIiENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS4_ESt18is_move_assignableIS4_EEE5valueEvE4typeERS4_SE_>
      for (;;)
 810d2ce:	e6e4      	b.n	810d09a <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEET_S8_S8_S8_St26random_access_iterator_tag+0xa4>
    }
 810d2d0:	4618      	mov	r0, r3
 810d2d2:	3754      	adds	r7, #84	@ 0x54
 810d2d4:	46bd      	mov	sp, r7
 810d2d6:	bd90      	pop	{r4, r7, pc}

0810d2d8 <_ZSt8_DestroyIPfEvT_S1_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 810d2d8:	b580      	push	{r7, lr}
 810d2da:	b082      	sub	sp, #8
 810d2dc:	af00      	add	r7, sp, #0
 810d2de:	6078      	str	r0, [r7, #4]
 810d2e0:	6039      	str	r1, [r7, #0]
      if (std::__is_constant_evaluated())
 810d2e2:	f7f7 fc87 	bl	8104bf4 <_ZSt23__is_constant_evaluatedv>
 810d2e6:	4603      	mov	r3, r0
 810d2e8:	2b00      	cmp	r3, #0
 810d2ea:	d004      	beq.n	810d2f6 <_ZSt8_DestroyIPfEvT_S1_+0x1e>
	return _Destroy_aux<false>::__destroy(__first, __last);
 810d2ec:	6839      	ldr	r1, [r7, #0]
 810d2ee:	6878      	ldr	r0, [r7, #4]
 810d2f0:	f000 fb95 	bl	810da1e <_ZNSt12_Destroy_auxILb0EE9__destroyIPfEEvT_S3_>
 810d2f4:	e003      	b.n	810d2fe <_ZSt8_DestroyIPfEvT_S1_+0x26>
	__destroy(__first, __last);
 810d2f6:	6839      	ldr	r1, [r7, #0]
 810d2f8:	6878      	ldr	r0, [r7, #4]
 810d2fa:	f000 fba9 	bl	810da50 <_ZNSt12_Destroy_auxILb1EE9__destroyIPfEEvT_S3_>
    }
 810d2fe:	3708      	adds	r7, #8
 810d300:	46bd      	mov	sp, r7
 810d302:	bd80      	pop	{r7, pc}

0810d304 <_ZNSt15__new_allocatorIfEC1Ev>:
      __new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 810d304:	b480      	push	{r7}
 810d306:	b083      	sub	sp, #12
 810d308:	af00      	add	r7, sp, #0
 810d30a:	6078      	str	r0, [r7, #4]
 810d30c:	687b      	ldr	r3, [r7, #4]
 810d30e:	4618      	mov	r0, r3
 810d310:	370c      	adds	r7, #12
 810d312:	46bd      	mov	sp, r7
 810d314:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d318:	4770      	bx	lr

0810d31a <_ZNSt16allocator_traitsISaIfEE10deallocateERS0_Pfj>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 810d31a:	b580      	push	{r7, lr}
 810d31c:	b088      	sub	sp, #32
 810d31e:	af00      	add	r7, sp, #0
 810d320:	60f8      	str	r0, [r7, #12]
 810d322:	60b9      	str	r1, [r7, #8]
 810d324:	607a      	str	r2, [r7, #4]
 810d326:	68fb      	ldr	r3, [r7, #12]
 810d328:	61fb      	str	r3, [r7, #28]
 810d32a:	68bb      	ldr	r3, [r7, #8]
 810d32c:	61bb      	str	r3, [r7, #24]
 810d32e:	687b      	ldr	r3, [r7, #4]
 810d330:	617b      	str	r3, [r7, #20]
	if (std::__is_constant_evaluated())
 810d332:	f7f7 fc5f 	bl	8104bf4 <_ZSt23__is_constant_evaluatedv>
 810d336:	4603      	mov	r3, r0
 810d338:	2b00      	cmp	r3, #0
 810d33a:	d003      	beq.n	810d344 <_ZNSt16allocator_traitsISaIfEE10deallocateERS0_Pfj+0x2a>
	    ::operator delete(__p);
 810d33c:	69b8      	ldr	r0, [r7, #24]
 810d33e:	f018 fb21 	bl	8125984 <_ZdlPv>
	    return;
 810d342:	e005      	b.n	810d350 <_ZNSt16allocator_traitsISaIfEE10deallocateERS0_Pfj+0x36>
	__allocator_base<_Tp>::deallocate(__p, __n);
 810d344:	697a      	ldr	r2, [r7, #20]
 810d346:	69b9      	ldr	r1, [r7, #24]
 810d348:	69f8      	ldr	r0, [r7, #28]
 810d34a:	f000 fdd4 	bl	810def6 <_ZNSt15__new_allocatorIfE10deallocateEPfj>
      { __a.deallocate(__p, __n); }
 810d34e:	bf00      	nop
 810d350:	bf00      	nop
 810d352:	3720      	adds	r7, #32
 810d354:	46bd      	mov	sp, r7
 810d356:	bd80      	pop	{r7, pc}

0810d358 <_ZNSt16allocator_traitsISaIfEE8max_sizeERKS0_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 810d358:	b480      	push	{r7}
 810d35a:	b083      	sub	sp, #12
 810d35c:	af00      	add	r7, sp, #0
 810d35e:	6078      	str	r0, [r7, #4]
	return size_t(-1) / sizeof(value_type);
 810d360:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
      }
 810d364:	4618      	mov	r0, r3
 810d366:	370c      	adds	r7, #12
 810d368:	46bd      	mov	sp, r7
 810d36a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d36e:	4770      	bx	lr

0810d370 <_ZNSt6vectorIfSaIfEE11_S_max_sizeERKS0_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 810d370:	b580      	push	{r7, lr}
 810d372:	b084      	sub	sp, #16
 810d374:	af00      	add	r7, sp, #0
 810d376:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 810d378:	f06f 4360 	mvn.w	r3, #3758096384	@ 0xe0000000
 810d37c:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 810d37e:	6878      	ldr	r0, [r7, #4]
 810d380:	f7ff ffea 	bl	810d358 <_ZNSt16allocator_traitsISaIfEE8max_sizeERKS0_>
 810d384:	4603      	mov	r3, r0
 810d386:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 810d388:	f107 0208 	add.w	r2, r7, #8
 810d38c:	f107 030c 	add.w	r3, r7, #12
 810d390:	4611      	mov	r1, r2
 810d392:	4618      	mov	r0, r3
 810d394:	f7fd fb2a 	bl	810a9ec <_ZSt3minIjERKT_S2_S2_>
 810d398:	4603      	mov	r3, r0
 810d39a:	681b      	ldr	r3, [r3, #0]
      }
 810d39c:	4618      	mov	r0, r3
 810d39e:	3710      	adds	r7, #16
 810d3a0:	46bd      	mov	sp, r7
 810d3a2:	bd80      	pop	{r7, pc}

0810d3a4 <_ZNSt16allocator_traitsISaIfEE8allocateERS0_j>:
      allocate(allocator_type& __a, size_type __n)
 810d3a4:	b580      	push	{r7, lr}
 810d3a6:	b084      	sub	sp, #16
 810d3a8:	af00      	add	r7, sp, #0
 810d3aa:	6078      	str	r0, [r7, #4]
 810d3ac:	6039      	str	r1, [r7, #0]
 810d3ae:	687b      	ldr	r3, [r7, #4]
 810d3b0:	60fb      	str	r3, [r7, #12]
 810d3b2:	683b      	ldr	r3, [r7, #0]
 810d3b4:	60bb      	str	r3, [r7, #8]
	if (std::__is_constant_evaluated())
 810d3b6:	f7f7 fc1d 	bl	8104bf4 <_ZSt23__is_constant_evaluatedv>
 810d3ba:	4603      	mov	r3, r0
 810d3bc:	2b00      	cmp	r3, #0
 810d3be:	d016      	beq.n	810d3ee <_ZNSt16allocator_traitsISaIfEE8allocateERS0_j+0x4a>
	    if (__builtin_mul_overflow(__n, sizeof(_Tp), &__n))
 810d3c0:	68bb      	ldr	r3, [r7, #8]
 810d3c2:	2200      	movs	r2, #0
 810d3c4:	0099      	lsls	r1, r3, #2
 810d3c6:	0f9b      	lsrs	r3, r3, #30
 810d3c8:	2b00      	cmp	r3, #0
 810d3ca:	d000      	beq.n	810d3ce <_ZNSt16allocator_traitsISaIfEE8allocateERS0_j+0x2a>
 810d3cc:	2201      	movs	r2, #1
 810d3ce:	460b      	mov	r3, r1
 810d3d0:	60bb      	str	r3, [r7, #8]
 810d3d2:	4613      	mov	r3, r2
 810d3d4:	f003 0301 	and.w	r3, r3, #1
 810d3d8:	b2db      	uxtb	r3, r3
 810d3da:	2b00      	cmp	r3, #0
 810d3dc:	d001      	beq.n	810d3e2 <_ZNSt16allocator_traitsISaIfEE8allocateERS0_j+0x3e>
	      std::__throw_bad_array_new_length();
 810d3de:	f018 fbb5 	bl	8125b4c <_ZSt28__throw_bad_array_new_lengthv>
	    return static_cast<_Tp*>(::operator new(__n));
 810d3e2:	68bb      	ldr	r3, [r7, #8]
 810d3e4:	4618      	mov	r0, r3
 810d3e6:	f018 fae0 	bl	81259aa <_Znwj>
 810d3ea:	4603      	mov	r3, r0
 810d3ec:	e007      	b.n	810d3fe <_ZNSt16allocator_traitsISaIfEE8allocateERS0_j+0x5a>
	return __allocator_base<_Tp>::allocate(__n, 0);
 810d3ee:	68bb      	ldr	r3, [r7, #8]
 810d3f0:	2200      	movs	r2, #0
 810d3f2:	4619      	mov	r1, r3
 810d3f4:	68f8      	ldr	r0, [r7, #12]
 810d3f6:	f000 fd8d 	bl	810df14 <_ZNSt15__new_allocatorIfE8allocateEjPKv>
 810d3fa:	4603      	mov	r3, r0
 810d3fc:	bf00      	nop
      { return __a.allocate(__n); }
 810d3fe:	4618      	mov	r0, r3
 810d400:	3710      	adds	r7, #16
 810d402:	46bd      	mov	sp, r7
 810d404:	bd80      	pop	{r7, pc}

0810d406 <_ZSt12__relocate_aIPfS0_SaIfEET0_T_S3_S2_RT1_>:
    __relocate_a(_InputIterator __first, _InputIterator __last,
 810d406:	b5b0      	push	{r4, r5, r7, lr}
 810d408:	b084      	sub	sp, #16
 810d40a:	af00      	add	r7, sp, #0
 810d40c:	60f8      	str	r0, [r7, #12]
 810d40e:	60b9      	str	r1, [r7, #8]
 810d410:	607a      	str	r2, [r7, #4]
 810d412:	603b      	str	r3, [r7, #0]
      return std::__relocate_a_1(std::__niter_base(__first),
 810d414:	68f8      	ldr	r0, [r7, #12]
 810d416:	f000 fb26 	bl	810da66 <_ZSt12__niter_baseIPfET_S1_>
 810d41a:	4604      	mov	r4, r0
 810d41c:	68b8      	ldr	r0, [r7, #8]
 810d41e:	f000 fb22 	bl	810da66 <_ZSt12__niter_baseIPfET_S1_>
 810d422:	4605      	mov	r5, r0
 810d424:	6878      	ldr	r0, [r7, #4]
 810d426:	f000 fb1e 	bl	810da66 <_ZSt12__niter_baseIPfET_S1_>
 810d42a:	4602      	mov	r2, r0
 810d42c:	683b      	ldr	r3, [r7, #0]
 810d42e:	4629      	mov	r1, r5
 810d430:	4620      	mov	r0, r4
 810d432:	f000 fb33 	bl	810da9c <_ZSt14__relocate_a_1IffENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS2_E4typeES4_S4_S4_RSaIT0_E>
 810d436:	4603      	mov	r3, r0
    }
 810d438:	4618      	mov	r0, r3
 810d43a:	3710      	adds	r7, #16
 810d43c:	46bd      	mov	sp, r7
 810d43e:	bdb0      	pop	{r4, r5, r7, pc}

0810d440 <_ZNSt16allocator_traitsISaIfEE37select_on_container_copy_constructionERKS0_>:
      select_on_container_copy_construction(const allocator_type& __rhs)
 810d440:	b580      	push	{r7, lr}
 810d442:	b082      	sub	sp, #8
 810d444:	af00      	add	r7, sp, #0
 810d446:	6078      	str	r0, [r7, #4]
 810d448:	6039      	str	r1, [r7, #0]
      { return __rhs; }
 810d44a:	6839      	ldr	r1, [r7, #0]
 810d44c:	6878      	ldr	r0, [r7, #4]
 810d44e:	f000 fb5f 	bl	810db10 <_ZNSaIfEC1ERKS_>
 810d452:	6878      	ldr	r0, [r7, #4]
 810d454:	3708      	adds	r7, #8
 810d456:	46bd      	mov	sp, r7
 810d458:	bd80      	pop	{r7, pc}

0810d45a <_ZNSt12_Vector_baseIfSaIfEE12_Vector_implC1ERKS0_>:
	_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT
 810d45a:	b580      	push	{r7, lr}
 810d45c:	b082      	sub	sp, #8
 810d45e:	af00      	add	r7, sp, #0
 810d460:	6078      	str	r0, [r7, #4]
 810d462:	6039      	str	r1, [r7, #0]
	: _Tp_alloc_type(__a)
 810d464:	6839      	ldr	r1, [r7, #0]
 810d466:	6878      	ldr	r0, [r7, #4]
 810d468:	f000 fb52 	bl	810db10 <_ZNSaIfEC1ERKS_>
 810d46c:	687b      	ldr	r3, [r7, #4]
 810d46e:	4618      	mov	r0, r3
 810d470:	f7ff fc28 	bl	810ccc4 <_ZNSt12_Vector_baseIfSaIfEE17_Vector_impl_dataC1Ev>
	{ }
 810d474:	687b      	ldr	r3, [r7, #4]
 810d476:	4618      	mov	r0, r3
 810d478:	3708      	adds	r7, #8
 810d47a:	46bd      	mov	sp, r7
 810d47c:	bd80      	pop	{r7, pc}

0810d47e <_ZNSt12_Vector_baseIfSaIfEE17_M_create_storageEj>:
      _M_create_storage(size_t __n)
 810d47e:	b580      	push	{r7, lr}
 810d480:	b082      	sub	sp, #8
 810d482:	af00      	add	r7, sp, #0
 810d484:	6078      	str	r0, [r7, #4]
 810d486:	6039      	str	r1, [r7, #0]
	this->_M_impl._M_start = this->_M_allocate(__n);
 810d488:	6839      	ldr	r1, [r7, #0]
 810d48a:	6878      	ldr	r0, [r7, #4]
 810d48c:	f7ff fc62 	bl	810cd54 <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj>
 810d490:	4602      	mov	r2, r0
 810d492:	687b      	ldr	r3, [r7, #4]
 810d494:	601a      	str	r2, [r3, #0]
	this->_M_impl._M_finish = this->_M_impl._M_start;
 810d496:	687b      	ldr	r3, [r7, #4]
 810d498:	681a      	ldr	r2, [r3, #0]
 810d49a:	687b      	ldr	r3, [r7, #4]
 810d49c:	605a      	str	r2, [r3, #4]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 810d49e:	687b      	ldr	r3, [r7, #4]
 810d4a0:	681a      	ldr	r2, [r3, #0]
 810d4a2:	683b      	ldr	r3, [r7, #0]
 810d4a4:	009b      	lsls	r3, r3, #2
 810d4a6:	441a      	add	r2, r3
 810d4a8:	687b      	ldr	r3, [r7, #4]
 810d4aa:	609a      	str	r2, [r3, #8]
      }
 810d4ac:	bf00      	nop
 810d4ae:	3708      	adds	r7, #8
 810d4b0:	46bd      	mov	sp, r7
 810d4b2:	bd80      	pop	{r7, pc}

0810d4b4 <_ZN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEC1ERKS2_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 810d4b4:	b480      	push	{r7}
 810d4b6:	b083      	sub	sp, #12
 810d4b8:	af00      	add	r7, sp, #0
 810d4ba:	6078      	str	r0, [r7, #4]
 810d4bc:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 810d4be:	683b      	ldr	r3, [r7, #0]
 810d4c0:	681a      	ldr	r2, [r3, #0]
 810d4c2:	687b      	ldr	r3, [r7, #4]
 810d4c4:	601a      	str	r2, [r3, #0]
 810d4c6:	687b      	ldr	r3, [r7, #4]
 810d4c8:	4618      	mov	r0, r3
 810d4ca:	370c      	adds	r7, #12
 810d4cc:	46bd      	mov	sp, r7
 810d4ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d4d2:	4770      	bx	lr

0810d4d4 <_ZN9__gnu_cxxeqIPKfSt6vectorIfSaIfEEEEbRKNS_17__normal_iteratorIT_T0_EESB_>:
    operator==(const __normal_iterator<_Iterator, _Container>& __lhs,
 810d4d4:	b590      	push	{r4, r7, lr}
 810d4d6:	b083      	sub	sp, #12
 810d4d8:	af00      	add	r7, sp, #0
 810d4da:	6078      	str	r0, [r7, #4]
 810d4dc:	6039      	str	r1, [r7, #0]
    { return __lhs.base() == __rhs.base(); }
 810d4de:	6878      	ldr	r0, [r7, #4]
 810d4e0:	f000 f810 	bl	810d504 <_ZNK9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEE4baseEv>
 810d4e4:	4603      	mov	r3, r0
 810d4e6:	681c      	ldr	r4, [r3, #0]
 810d4e8:	6838      	ldr	r0, [r7, #0]
 810d4ea:	f000 f80b 	bl	810d504 <_ZNK9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEE4baseEv>
 810d4ee:	4603      	mov	r3, r0
 810d4f0:	681b      	ldr	r3, [r3, #0]
 810d4f2:	429c      	cmp	r4, r3
 810d4f4:	bf0c      	ite	eq
 810d4f6:	2301      	moveq	r3, #1
 810d4f8:	2300      	movne	r3, #0
 810d4fa:	b2db      	uxtb	r3, r3
 810d4fc:	4618      	mov	r0, r3
 810d4fe:	370c      	adds	r7, #12
 810d500:	46bd      	mov	sp, r7
 810d502:	bd90      	pop	{r4, r7, pc}

0810d504 <_ZNK9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 810d504:	b480      	push	{r7}
 810d506:	b083      	sub	sp, #12
 810d508:	af00      	add	r7, sp, #0
 810d50a:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 810d50c:	687b      	ldr	r3, [r7, #4]
 810d50e:	4618      	mov	r0, r3
 810d510:	370c      	adds	r7, #12
 810d512:	46bd      	mov	sp, r7
 810d514:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d518:	4770      	bx	lr

0810d51a <_ZSt16__do_uninit_copyIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfET0_T_SA_S9_>:
    __do_uninit_copy(_InputIterator __first, _InputIterator __last,
 810d51a:	b590      	push	{r4, r7, lr}
 810d51c:	b087      	sub	sp, #28
 810d51e:	af00      	add	r7, sp, #0
 810d520:	60f8      	str	r0, [r7, #12]
 810d522:	60b9      	str	r1, [r7, #8]
 810d524:	607a      	str	r2, [r7, #4]
      _ForwardIterator __cur = __result;
 810d526:	687b      	ldr	r3, [r7, #4]
 810d528:	617b      	str	r3, [r7, #20]
	  for (; __first != __last; ++__first, (void)++__cur)
 810d52a:	e015      	b.n	810d558 <_ZSt16__do_uninit_copyIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfET0_T_SA_S9_+0x3e>
	    std::_Construct(std::__addressof(*__cur), *__first);
 810d52c:	6978      	ldr	r0, [r7, #20]
 810d52e:	f000 fb0d 	bl	810db4c <_ZSt11__addressofIfEPT_RS0_>
 810d532:	4604      	mov	r4, r0
 810d534:	f107 030c 	add.w	r3, r7, #12
 810d538:	4618      	mov	r0, r3
 810d53a:	f000 fb12 	bl	810db62 <_ZNK9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEdeEv>
 810d53e:	4603      	mov	r3, r0
 810d540:	4619      	mov	r1, r3
 810d542:	4620      	mov	r0, r4
 810d544:	f000 fb19 	bl	810db7a <_ZSt10_ConstructIfJRKfEEvPT_DpOT0_>
	  for (; __first != __last; ++__first, (void)++__cur)
 810d548:	f107 030c 	add.w	r3, r7, #12
 810d54c:	4618      	mov	r0, r3
 810d54e:	f000 faed 	bl	810db2c <_ZN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEppEv>
 810d552:	697b      	ldr	r3, [r7, #20]
 810d554:	3304      	adds	r3, #4
 810d556:	617b      	str	r3, [r7, #20]
 810d558:	f107 0208 	add.w	r2, r7, #8
 810d55c:	f107 030c 	add.w	r3, r7, #12
 810d560:	4611      	mov	r1, r2
 810d562:	4618      	mov	r0, r3
 810d564:	f7ff ffb6 	bl	810d4d4 <_ZN9__gnu_cxxeqIPKfSt6vectorIfSaIfEEEEbRKNS_17__normal_iteratorIT_T0_EESB_>
 810d568:	4603      	mov	r3, r0
 810d56a:	f083 0301 	eor.w	r3, r3, #1
 810d56e:	b2db      	uxtb	r3, r3
 810d570:	2b00      	cmp	r3, #0
 810d572:	d1db      	bne.n	810d52c <_ZSt16__do_uninit_copyIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfET0_T_SA_S9_+0x12>
	  return __cur;
 810d574:	697b      	ldr	r3, [r7, #20]
    }
 810d576:	4618      	mov	r0, r3
 810d578:	371c      	adds	r7, #28
 810d57a:	46bd      	mov	sp, r7
 810d57c:	bd90      	pop	{r4, r7, pc}

0810d57e <_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfET0_T_SA_S9_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 810d57e:	b580      	push	{r7, lr}
 810d580:	b086      	sub	sp, #24
 810d582:	af00      	add	r7, sp, #0
 810d584:	60f8      	str	r0, [r7, #12]
 810d586:	60b9      	str	r1, [r7, #8]
 810d588:	607a      	str	r2, [r7, #4]
      const bool __can_memmove = __is_trivial(_ValueType1);
 810d58a:	2301      	movs	r3, #1
 810d58c:	75fb      	strb	r3, [r7, #23]
      const bool __assignable
 810d58e:	2301      	movs	r3, #1
 810d590:	75bb      	strb	r3, [r7, #22]
	__uninit_copy(__first, __last, __result);
 810d592:	687a      	ldr	r2, [r7, #4]
 810d594:	68b9      	ldr	r1, [r7, #8]
 810d596:	68f8      	ldr	r0, [r7, #12]
 810d598:	f000 fb11 	bl	810dbbe <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfEET0_T_SC_SB_>
 810d59c:	4603      	mov	r3, r0
    }
 810d59e:	4618      	mov	r0, r3
 810d5a0:	3718      	adds	r7, #24
 810d5a2:	46bd      	mov	sp, r7
 810d5a4:	bd80      	pop	{r7, pc}

0810d5a6 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEiNS0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_>:
    __introsort_loop(_RandomAccessIterator __first,
 810d5a6:	b5f0      	push	{r4, r5, r6, r7, lr}
 810d5a8:	b087      	sub	sp, #28
 810d5aa:	af00      	add	r7, sp, #0
 810d5ac:	60f8      	str	r0, [r7, #12]
 810d5ae:	60b9      	str	r1, [r7, #8]
 810d5b0:	607a      	str	r2, [r7, #4]
 810d5b2:	703b      	strb	r3, [r7, #0]
      while (__last - __first > int(_S_threshold))
 810d5b4:	e01b      	b.n	810d5ee <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEiNS0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_+0x48>
	  if (__depth_limit == 0)
 810d5b6:	687b      	ldr	r3, [r7, #4]
 810d5b8:	2b00      	cmp	r3, #0
 810d5ba:	d106      	bne.n	810d5ca <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEiNS0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_+0x24>
	      std::__partial_sort(__first, __last, __last, __comp);
 810d5bc:	4633      	mov	r3, r6
 810d5be:	68ba      	ldr	r2, [r7, #8]
 810d5c0:	68b9      	ldr	r1, [r7, #8]
 810d5c2:	68f8      	ldr	r0, [r7, #12]
 810d5c4:	f000 fb0b 	bl	810dbde <_ZSt14__partial_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_T0_>
 810d5c8:	e021      	b.n	810d60e <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEiNS0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_+0x68>
	  --__depth_limit;
 810d5ca:	687b      	ldr	r3, [r7, #4]
 810d5cc:	3b01      	subs	r3, #1
 810d5ce:	607b      	str	r3, [r7, #4]
	    std::__unguarded_partition_pivot(__first, __last, __comp);
 810d5d0:	462a      	mov	r2, r5
 810d5d2:	68b9      	ldr	r1, [r7, #8]
 810d5d4:	68f8      	ldr	r0, [r7, #12]
 810d5d6:	f000 fb19 	bl	810dc0c <_ZSt27__unguarded_partition_pivotIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEET_S9_S9_T0_>
 810d5da:	4603      	mov	r3, r0
 810d5dc:	617b      	str	r3, [r7, #20]
	  std::__introsort_loop(__cut, __last, __depth_limit, __comp);
 810d5de:	4623      	mov	r3, r4
 810d5e0:	687a      	ldr	r2, [r7, #4]
 810d5e2:	68b9      	ldr	r1, [r7, #8]
 810d5e4:	6978      	ldr	r0, [r7, #20]
 810d5e6:	f7ff ffde 	bl	810d5a6 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEiNS0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_>
	  __last = __cut;
 810d5ea:	697b      	ldr	r3, [r7, #20]
 810d5ec:	60bb      	str	r3, [r7, #8]
      while (__last - __first > int(_S_threshold))
 810d5ee:	f107 020c 	add.w	r2, r7, #12
 810d5f2:	f107 0308 	add.w	r3, r7, #8
 810d5f6:	4611      	mov	r1, r2
 810d5f8:	4618      	mov	r0, r3
 810d5fa:	f7ff fc70 	bl	810cede <_ZN9__gnu_cxxmiIPfSt6vectorIfSaIfEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 810d5fe:	4603      	mov	r3, r0
 810d600:	2b10      	cmp	r3, #16
 810d602:	bfcc      	ite	gt
 810d604:	2301      	movgt	r3, #1
 810d606:	2300      	movle	r3, #0
 810d608:	b2db      	uxtb	r3, r3
 810d60a:	2b00      	cmp	r3, #0
 810d60c:	d1d3      	bne.n	810d5b6 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEiNS0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_+0x10>
    }
 810d60e:	371c      	adds	r7, #28
 810d610:	46bd      	mov	sp, r7
 810d612:	bdf0      	pop	{r4, r5, r6, r7, pc}

0810d614 <_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_>:
    __final_insertion_sort(_RandomAccessIterator __first,
 810d614:	b5f0      	push	{r4, r5, r6, r7, lr}
 810d616:	b085      	sub	sp, #20
 810d618:	af00      	add	r7, sp, #0
 810d61a:	60f8      	str	r0, [r7, #12]
 810d61c:	60b9      	str	r1, [r7, #8]
 810d61e:	713a      	strb	r2, [r7, #4]
      if (__last - __first > int(_S_threshold))
 810d620:	f107 020c 	add.w	r2, r7, #12
 810d624:	f107 0308 	add.w	r3, r7, #8
 810d628:	4611      	mov	r1, r2
 810d62a:	4618      	mov	r0, r3
 810d62c:	f7ff fc57 	bl	810cede <_ZN9__gnu_cxxmiIPfSt6vectorIfSaIfEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 810d630:	4603      	mov	r3, r0
 810d632:	2b10      	cmp	r3, #16
 810d634:	bfcc      	ite	gt
 810d636:	2301      	movgt	r3, #1
 810d638:	2300      	movle	r3, #0
 810d63a:	b2db      	uxtb	r3, r3
 810d63c:	2b00      	cmp	r3, #0
 810d63e:	d018      	beq.n	810d672 <_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_+0x5e>
	  std::__insertion_sort(__first, __first + int(_S_threshold), __comp);
 810d640:	f107 030c 	add.w	r3, r7, #12
 810d644:	2110      	movs	r1, #16
 810d646:	4618      	mov	r0, r3
 810d648:	f7ff fae9 	bl	810cc1e <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 810d64c:	4603      	mov	r3, r0
 810d64e:	4632      	mov	r2, r6
 810d650:	4619      	mov	r1, r3
 810d652:	68f8      	ldr	r0, [r7, #12]
 810d654:	f000 fb1a 	bl	810dc8c <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_>
	  std::__unguarded_insertion_sort(__first + int(_S_threshold), __last,
 810d658:	f107 030c 	add.w	r3, r7, #12
 810d65c:	2110      	movs	r1, #16
 810d65e:	4618      	mov	r0, r3
 810d660:	f7ff fadd 	bl	810cc1e <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 810d664:	4603      	mov	r3, r0
 810d666:	462a      	mov	r2, r5
 810d668:	68b9      	ldr	r1, [r7, #8]
 810d66a:	4618      	mov	r0, r3
 810d66c:	f000 fb77 	bl	810dd5e <_ZSt26__unguarded_insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_>
    }
 810d670:	e004      	b.n	810d67c <_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_+0x68>
	std::__insertion_sort(__first, __last, __comp);
 810d672:	4622      	mov	r2, r4
 810d674:	68b9      	ldr	r1, [r7, #8]
 810d676:	68f8      	ldr	r0, [r7, #12]
 810d678:	f000 fb08 	bl	810dc8c <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_>
    }
 810d67c:	bf00      	nop
 810d67e:	3714      	adds	r7, #20
 810d680:	46bd      	mov	sp, r7
 810d682:	bdf0      	pop	{r4, r5, r6, r7, pc}

0810d684 <_ZSt7forwardIfEOT_RNSt16remove_referenceIS0_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 810d684:	b480      	push	{r7}
 810d686:	b083      	sub	sp, #12
 810d688:	af00      	add	r7, sp, #0
 810d68a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 810d68c:	687b      	ldr	r3, [r7, #4]
 810d68e:	4618      	mov	r0, r3
 810d690:	370c      	adds	r7, #12
 810d692:	46bd      	mov	sp, r7
 810d694:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d698:	4770      	bx	lr

0810d69a <_ZNSt16allocator_traitsISaIfEE9constructIfJfEEEvRS0_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 810d69a:	b580      	push	{r7, lr}
 810d69c:	b084      	sub	sp, #16
 810d69e:	af00      	add	r7, sp, #0
 810d6a0:	60f8      	str	r0, [r7, #12]
 810d6a2:	60b9      	str	r1, [r7, #8]
 810d6a4:	607a      	str	r2, [r7, #4]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 810d6a6:	6878      	ldr	r0, [r7, #4]
 810d6a8:	f7ff ffec 	bl	810d684 <_ZSt7forwardIfEOT_RNSt16remove_referenceIS0_E4typeE>
 810d6ac:	4603      	mov	r3, r0
 810d6ae:	4619      	mov	r1, r3
 810d6b0:	68b8      	ldr	r0, [r7, #8]
 810d6b2:	f000 fb7c 	bl	810ddae <_ZSt12construct_atIfJfEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS1_DpOS2_>
	}
 810d6b6:	bf00      	nop
 810d6b8:	3710      	adds	r7, #16
 810d6ba:	46bd      	mov	sp, r7
 810d6bc:	bd80      	pop	{r7, pc}

0810d6be <_ZNKSt6vectorIfSaIfEE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 810d6be:	b590      	push	{r4, r7, lr}
 810d6c0:	b087      	sub	sp, #28
 810d6c2:	af00      	add	r7, sp, #0
 810d6c4:	60f8      	str	r0, [r7, #12]
 810d6c6:	60b9      	str	r1, [r7, #8]
 810d6c8:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 810d6ca:	68f8      	ldr	r0, [r7, #12]
 810d6cc:	f7ff fb21 	bl	810cd12 <_ZNKSt6vectorIfSaIfEE8max_sizeEv>
 810d6d0:	4604      	mov	r4, r0
 810d6d2:	68f8      	ldr	r0, [r7, #12]
 810d6d4:	f7ff f9a9 	bl	810ca2a <_ZNKSt6vectorIfSaIfEE4sizeEv>
 810d6d8:	4603      	mov	r3, r0
 810d6da:	1ae2      	subs	r2, r4, r3
 810d6dc:	68bb      	ldr	r3, [r7, #8]
 810d6de:	429a      	cmp	r2, r3
 810d6e0:	bf34      	ite	cc
 810d6e2:	2301      	movcc	r3, #1
 810d6e4:	2300      	movcs	r3, #0
 810d6e6:	b2db      	uxtb	r3, r3
 810d6e8:	2b00      	cmp	r3, #0
 810d6ea:	d002      	beq.n	810d6f2 <_ZNKSt6vectorIfSaIfEE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 810d6ec:	6878      	ldr	r0, [r7, #4]
 810d6ee:	f018 fa30 	bl	8125b52 <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + (std::max)(size(), __n);
 810d6f2:	68f8      	ldr	r0, [r7, #12]
 810d6f4:	f7ff f999 	bl	810ca2a <_ZNKSt6vectorIfSaIfEE4sizeEv>
 810d6f8:	4604      	mov	r4, r0
 810d6fa:	68f8      	ldr	r0, [r7, #12]
 810d6fc:	f7ff f995 	bl	810ca2a <_ZNKSt6vectorIfSaIfEE4sizeEv>
 810d700:	4603      	mov	r3, r0
 810d702:	613b      	str	r3, [r7, #16]
 810d704:	f107 0208 	add.w	r2, r7, #8
 810d708:	f107 0310 	add.w	r3, r7, #16
 810d70c:	4611      	mov	r1, r2
 810d70e:	4618      	mov	r0, r3
 810d710:	f7fb ff9c 	bl	810964c <_ZSt3maxIjERKT_S2_S2_>
 810d714:	4603      	mov	r3, r0
 810d716:	681b      	ldr	r3, [r3, #0]
 810d718:	4423      	add	r3, r4
 810d71a:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 810d71c:	68f8      	ldr	r0, [r7, #12]
 810d71e:	f7ff f984 	bl	810ca2a <_ZNKSt6vectorIfSaIfEE4sizeEv>
 810d722:	4602      	mov	r2, r0
 810d724:	697b      	ldr	r3, [r7, #20]
 810d726:	4293      	cmp	r3, r2
 810d728:	d306      	bcc.n	810d738 <_ZNKSt6vectorIfSaIfEE12_M_check_lenEjPKc+0x7a>
 810d72a:	68f8      	ldr	r0, [r7, #12]
 810d72c:	f7ff faf1 	bl	810cd12 <_ZNKSt6vectorIfSaIfEE8max_sizeEv>
 810d730:	4602      	mov	r2, r0
 810d732:	697b      	ldr	r3, [r7, #20]
 810d734:	4293      	cmp	r3, r2
 810d736:	d904      	bls.n	810d742 <_ZNKSt6vectorIfSaIfEE12_M_check_lenEjPKc+0x84>
 810d738:	68f8      	ldr	r0, [r7, #12]
 810d73a:	f7ff faea 	bl	810cd12 <_ZNKSt6vectorIfSaIfEE8max_sizeEv>
 810d73e:	4603      	mov	r3, r0
 810d740:	e000      	b.n	810d744 <_ZNKSt6vectorIfSaIfEE12_M_check_lenEjPKc+0x86>
 810d742:	697b      	ldr	r3, [r7, #20]
      }
 810d744:	4618      	mov	r0, r3
 810d746:	371c      	adds	r7, #28
 810d748:	46bd      	mov	sp, r7
 810d74a:	bd90      	pop	{r4, r7, pc}

0810d74c <_ZNSt6vectorIfSaIfEE17_M_realloc_insertIJfEEEvN9__gnu_cxx17__normal_iteratorIPfS1_EEDpOT_>:
      vector<_Tp, _Alloc>::
 810d74c:	b5b0      	push	{r4, r5, r7, lr}
 810d74e:	b08c      	sub	sp, #48	@ 0x30
 810d750:	af00      	add	r7, sp, #0
 810d752:	60f8      	str	r0, [r7, #12]
 810d754:	60b9      	str	r1, [r7, #8]
 810d756:	607a      	str	r2, [r7, #4]
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 810d758:	4a39      	ldr	r2, [pc, #228]	@ (810d840 <_ZNSt6vectorIfSaIfEE17_M_realloc_insertIJfEEEvN9__gnu_cxx17__normal_iteratorIPfS1_EEDpOT_+0xf4>)
 810d75a:	2101      	movs	r1, #1
 810d75c:	68f8      	ldr	r0, [r7, #12]
 810d75e:	f7ff ffae 	bl	810d6be <_ZNKSt6vectorIfSaIfEE12_M_check_lenEjPKc>
 810d762:	62f8      	str	r0, [r7, #44]	@ 0x2c
      pointer __old_start = this->_M_impl._M_start;
 810d764:	68fb      	ldr	r3, [r7, #12]
 810d766:	681b      	ldr	r3, [r3, #0]
 810d768:	62bb      	str	r3, [r7, #40]	@ 0x28
      pointer __old_finish = this->_M_impl._M_finish;
 810d76a:	68fb      	ldr	r3, [r7, #12]
 810d76c:	685b      	ldr	r3, [r3, #4]
 810d76e:	627b      	str	r3, [r7, #36]	@ 0x24
      const size_type __elems_before = __position - begin();
 810d770:	68f8      	ldr	r0, [r7, #12]
 810d772:	f7ff fa02 	bl	810cb7a <_ZNSt6vectorIfSaIfEE5beginEv>
 810d776:	4603      	mov	r3, r0
 810d778:	617b      	str	r3, [r7, #20]
 810d77a:	f107 0214 	add.w	r2, r7, #20
 810d77e:	f107 0308 	add.w	r3, r7, #8
 810d782:	4611      	mov	r1, r2
 810d784:	4618      	mov	r0, r3
 810d786:	f7ff fbaa 	bl	810cede <_ZN9__gnu_cxxmiIPfSt6vectorIfSaIfEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 810d78a:	4603      	mov	r3, r0
 810d78c:	623b      	str	r3, [r7, #32]
      pointer __new_start(this->_M_allocate(__len));
 810d78e:	68fb      	ldr	r3, [r7, #12]
 810d790:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 810d792:	4618      	mov	r0, r3
 810d794:	f7ff fade 	bl	810cd54 <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj>
 810d798:	61f8      	str	r0, [r7, #28]
      pointer __new_finish(__new_start);
 810d79a:	69fb      	ldr	r3, [r7, #28]
 810d79c:	61bb      	str	r3, [r7, #24]
	  _Alloc_traits::construct(this->_M_impl,
 810d79e:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 810d7a0:	6a3b      	ldr	r3, [r7, #32]
 810d7a2:	009b      	lsls	r3, r3, #2
	  _Alloc_traits::construct(this->_M_impl,
 810d7a4:	69fa      	ldr	r2, [r7, #28]
 810d7a6:	18d5      	adds	r5, r2, r3
 810d7a8:	6878      	ldr	r0, [r7, #4]
 810d7aa:	f7ff ff6b 	bl	810d684 <_ZSt7forwardIfEOT_RNSt16remove_referenceIS0_E4typeE>
 810d7ae:	4603      	mov	r3, r0
 810d7b0:	461a      	mov	r2, r3
 810d7b2:	4629      	mov	r1, r5
 810d7b4:	4620      	mov	r0, r4
 810d7b6:	f7ff ff70 	bl	810d69a <_ZNSt16allocator_traitsISaIfEE9constructIfJfEEEvRS0_PT_DpOT0_>
	  __new_finish = pointer();
 810d7ba:	2300      	movs	r3, #0
 810d7bc:	61bb      	str	r3, [r7, #24]
	      __new_finish = _S_relocate(__old_start, __position.base(),
 810d7be:	f107 0308 	add.w	r3, r7, #8
 810d7c2:	4618      	mov	r0, r3
 810d7c4:	f7ff fb80 	bl	810cec8 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEE4baseEv>
 810d7c8:	4603      	mov	r3, r0
 810d7ca:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 810d7cc:	68fb      	ldr	r3, [r7, #12]
 810d7ce:	4618      	mov	r0, r3
 810d7d0:	f7ff fa53 	bl	810cc7a <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 810d7d4:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 810d7d6:	69fa      	ldr	r2, [r7, #28]
 810d7d8:	4621      	mov	r1, r4
 810d7da:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 810d7dc:	f7ff face 	bl	810cd7c <_ZNSt6vectorIfSaIfEE11_S_relocateEPfS2_S2_RS0_>
 810d7e0:	61b8      	str	r0, [r7, #24]
	      ++__new_finish;
 810d7e2:	69bb      	ldr	r3, [r7, #24]
 810d7e4:	3304      	adds	r3, #4
 810d7e6:	61bb      	str	r3, [r7, #24]
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 810d7e8:	f107 0308 	add.w	r3, r7, #8
 810d7ec:	4618      	mov	r0, r3
 810d7ee:	f7ff fb6b 	bl	810cec8 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEE4baseEv>
 810d7f2:	4603      	mov	r3, r0
 810d7f4:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 810d7f6:	68fb      	ldr	r3, [r7, #12]
 810d7f8:	4618      	mov	r0, r3
 810d7fa:	f7ff fa3e 	bl	810cc7a <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 810d7fe:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 810d800:	69ba      	ldr	r2, [r7, #24]
 810d802:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 810d804:	4620      	mov	r0, r4
 810d806:	f7ff fab9 	bl	810cd7c <_ZNSt6vectorIfSaIfEE11_S_relocateEPfS2_S2_RS0_>
 810d80a:	61b8      	str	r0, [r7, #24]
      _M_deallocate(__old_start,
 810d80c:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 810d80e:	68fb      	ldr	r3, [r7, #12]
 810d810:	689a      	ldr	r2, [r3, #8]
 810d812:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810d814:	1ad3      	subs	r3, r2, r3
 810d816:	109b      	asrs	r3, r3, #2
      _M_deallocate(__old_start,
 810d818:	461a      	mov	r2, r3
 810d81a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 810d81c:	f7ff fa66 	bl	810ccec <_ZNSt12_Vector_baseIfSaIfEE13_M_deallocateEPfj>
      this->_M_impl._M_start = __new_start;
 810d820:	68fb      	ldr	r3, [r7, #12]
 810d822:	69fa      	ldr	r2, [r7, #28]
 810d824:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 810d826:	68fb      	ldr	r3, [r7, #12]
 810d828:	69ba      	ldr	r2, [r7, #24]
 810d82a:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 810d82c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810d82e:	009b      	lsls	r3, r3, #2
 810d830:	69fa      	ldr	r2, [r7, #28]
 810d832:	441a      	add	r2, r3
 810d834:	68fb      	ldr	r3, [r7, #12]
 810d836:	609a      	str	r2, [r3, #8]
    }
 810d838:	bf00      	nop
 810d83a:	3730      	adds	r7, #48	@ 0x30
 810d83c:	46bd      	mov	sp, r7
 810d83e:	bdb0      	pop	{r4, r5, r7, pc}
 810d840:	08127dec 	.word	0x08127dec

0810d844 <_ZNSt6vectorIfSaIfEE4backEv>:
      back() _GLIBCXX_NOEXCEPT
 810d844:	b580      	push	{r7, lr}
 810d846:	b084      	sub	sp, #16
 810d848:	af00      	add	r7, sp, #0
 810d84a:	6078      	str	r0, [r7, #4]
	return *(end() - 1);
 810d84c:	6878      	ldr	r0, [r7, #4]
 810d84e:	f7ff f9a4 	bl	810cb9a <_ZNSt6vectorIfSaIfEE3endEv>
 810d852:	4603      	mov	r3, r0
 810d854:	60fb      	str	r3, [r7, #12]
 810d856:	f107 030c 	add.w	r3, r7, #12
 810d85a:	2101      	movs	r1, #1
 810d85c:	4618      	mov	r0, r3
 810d85e:	f000 f857 	bl	810d910 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEmiEi>
 810d862:	4603      	mov	r3, r0
 810d864:	60bb      	str	r3, [r7, #8]
 810d866:	f107 0308 	add.w	r3, r7, #8
 810d86a:	4618      	mov	r0, r3
 810d86c:	f000 f82c 	bl	810d8c8 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 810d870:	4603      	mov	r3, r0
      }
 810d872:	4618      	mov	r0, r3
 810d874:	3710      	adds	r7, #16
 810d876:	46bd      	mov	sp, r7
 810d878:	bd80      	pop	{r7, pc}

0810d87a <_ZSt11swap_rangesIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_ET0_T_S8_S7_>:
    swap_ranges(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
 810d87a:	b580      	push	{r7, lr}
 810d87c:	b084      	sub	sp, #16
 810d87e:	af00      	add	r7, sp, #0
 810d880:	60f8      	str	r0, [r7, #12]
 810d882:	60b9      	str	r1, [r7, #8]
 810d884:	607a      	str	r2, [r7, #4]
      for (; __first1 != __last1; ++__first1, (void)++__first2)
 810d886:	e00c      	b.n	810d8a2 <_ZSt11swap_rangesIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_ET0_T_S8_S7_+0x28>
	std::iter_swap(__first1, __first2);
 810d888:	6879      	ldr	r1, [r7, #4]
 810d88a:	68f8      	ldr	r0, [r7, #12]
 810d88c:	f000 f859 	bl	810d942 <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_EvT_T0_>
      for (; __first1 != __last1; ++__first1, (void)++__first2)
 810d890:	f107 030c 	add.w	r3, r7, #12
 810d894:	4618      	mov	r0, r3
 810d896:	f000 f86b 	bl	810d970 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEppEv>
 810d89a:	1d3b      	adds	r3, r7, #4
 810d89c:	4618      	mov	r0, r3
 810d89e:	f000 f867 	bl	810d970 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEppEv>
 810d8a2:	f107 0208 	add.w	r2, r7, #8
 810d8a6:	f107 030c 	add.w	r3, r7, #12
 810d8aa:	4611      	mov	r1, r2
 810d8ac:	4618      	mov	r0, r3
 810d8ae:	f7ff faf3 	bl	810ce98 <_ZN9__gnu_cxxeqIPfSt6vectorIfSaIfEEEEbRKNS_17__normal_iteratorIT_T0_EESA_>
 810d8b2:	4603      	mov	r3, r0
 810d8b4:	f083 0301 	eor.w	r3, r3, #1
 810d8b8:	b2db      	uxtb	r3, r3
 810d8ba:	2b00      	cmp	r3, #0
 810d8bc:	d1e4      	bne.n	810d888 <_ZSt11swap_rangesIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_ET0_T_S8_S7_+0xe>
      return __first2;
 810d8be:	687b      	ldr	r3, [r7, #4]
    }
 810d8c0:	4618      	mov	r0, r3
 810d8c2:	3710      	adds	r7, #16
 810d8c4:	46bd      	mov	sp, r7
 810d8c6:	bd80      	pop	{r7, pc}

0810d8c8 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 810d8c8:	b480      	push	{r7}
 810d8ca:	b083      	sub	sp, #12
 810d8cc:	af00      	add	r7, sp, #0
 810d8ce:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 810d8d0:	687b      	ldr	r3, [r7, #4]
 810d8d2:	681b      	ldr	r3, [r3, #0]
 810d8d4:	4618      	mov	r0, r3
 810d8d6:	370c      	adds	r7, #12
 810d8d8:	46bd      	mov	sp, r7
 810d8da:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d8de:	4770      	bx	lr

0810d8e0 <_ZSt4moveIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_ET0_T_S8_S7_>:
    move(_II __first, _II __last, _OI __result)
 810d8e0:	b590      	push	{r4, r7, lr}
 810d8e2:	b085      	sub	sp, #20
 810d8e4:	af00      	add	r7, sp, #0
 810d8e6:	60f8      	str	r0, [r7, #12]
 810d8e8:	60b9      	str	r1, [r7, #8]
 810d8ea:	607a      	str	r2, [r7, #4]
      return std::__copy_move_a<true>(std::__miter_base(__first),
 810d8ec:	68f8      	ldr	r0, [r7, #12]
 810d8ee:	f000 fa80 	bl	810ddf2 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEET_S7_>
 810d8f2:	4604      	mov	r4, r0
 810d8f4:	68b8      	ldr	r0, [r7, #8]
 810d8f6:	f000 fa7c 	bl	810ddf2 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEET_S7_>
 810d8fa:	4603      	mov	r3, r0
 810d8fc:	687a      	ldr	r2, [r7, #4]
 810d8fe:	4619      	mov	r1, r3
 810d900:	4620      	mov	r0, r4
 810d902:	f000 fa81 	bl	810de08 <_ZSt13__copy_move_aILb1EN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_ET1_T0_S8_S7_>
 810d906:	4603      	mov	r3, r0
    }
 810d908:	4618      	mov	r0, r3
 810d90a:	3714      	adds	r7, #20
 810d90c:	46bd      	mov	sp, r7
 810d90e:	bd90      	pop	{r4, r7, pc}

0810d910 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEmiEi>:
      operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
 810d910:	b580      	push	{r7, lr}
 810d912:	b084      	sub	sp, #16
 810d914:	af00      	add	r7, sp, #0
 810d916:	6078      	str	r0, [r7, #4]
 810d918:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current - __n); }
 810d91a:	687b      	ldr	r3, [r7, #4]
 810d91c:	681a      	ldr	r2, [r3, #0]
 810d91e:	683b      	ldr	r3, [r7, #0]
 810d920:	009b      	lsls	r3, r3, #2
 810d922:	425b      	negs	r3, r3
 810d924:	4413      	add	r3, r2
 810d926:	60fb      	str	r3, [r7, #12]
 810d928:	f107 020c 	add.w	r2, r7, #12
 810d92c:	f107 0308 	add.w	r3, r7, #8
 810d930:	4611      	mov	r1, r2
 810d932:	4618      	mov	r0, r3
 810d934:	f7ff faa0 	bl	810ce78 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEC1ERKS1_>
 810d938:	68bb      	ldr	r3, [r7, #8]
 810d93a:	4618      	mov	r0, r3
 810d93c:	3710      	adds	r7, #16
 810d93e:	46bd      	mov	sp, r7
 810d940:	bd80      	pop	{r7, pc}

0810d942 <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_EvT_T0_>:
    iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
 810d942:	b590      	push	{r4, r7, lr}
 810d944:	b083      	sub	sp, #12
 810d946:	af00      	add	r7, sp, #0
 810d948:	6078      	str	r0, [r7, #4]
 810d94a:	6039      	str	r1, [r7, #0]
      swap(*__a, *__b);
 810d94c:	1d3b      	adds	r3, r7, #4
 810d94e:	4618      	mov	r0, r3
 810d950:	f7ff ffba 	bl	810d8c8 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 810d954:	4604      	mov	r4, r0
 810d956:	463b      	mov	r3, r7
 810d958:	4618      	mov	r0, r3
 810d95a:	f7ff ffb5 	bl	810d8c8 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 810d95e:	4603      	mov	r3, r0
 810d960:	4619      	mov	r1, r3
 810d962:	4620      	mov	r0, r4
 810d964:	f000 fa71 	bl	810de4a <_ZSt4swapIfENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS4_ESt18is_move_assignableIS4_EEE5valueEvE4typeERS4_SE_>
    }
 810d968:	bf00      	nop
 810d96a:	370c      	adds	r7, #12
 810d96c:	46bd      	mov	sp, r7
 810d96e:	bd90      	pop	{r4, r7, pc}

0810d970 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 810d970:	b480      	push	{r7}
 810d972:	b083      	sub	sp, #12
 810d974:	af00      	add	r7, sp, #0
 810d976:	6078      	str	r0, [r7, #4]
	++_M_current;
 810d978:	687b      	ldr	r3, [r7, #4]
 810d97a:	681b      	ldr	r3, [r3, #0]
 810d97c:	1d1a      	adds	r2, r3, #4
 810d97e:	687b      	ldr	r3, [r7, #4]
 810d980:	601a      	str	r2, [r3, #0]
	return *this;
 810d982:	687b      	ldr	r3, [r7, #4]
      }
 810d984:	4618      	mov	r0, r3
 810d986:	370c      	adds	r7, #12
 810d988:	46bd      	mov	sp, r7
 810d98a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d98e:	4770      	bx	lr

0810d990 <_ZSt4swapIiENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS4_ESt18is_move_assignableIS4_EEE5valueEvE4typeERS4_SE_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
 810d990:	b580      	push	{r7, lr}
 810d992:	b084      	sub	sp, #16
 810d994:	af00      	add	r7, sp, #0
 810d996:	6078      	str	r0, [r7, #4]
 810d998:	6039      	str	r1, [r7, #0]
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 810d99a:	6878      	ldr	r0, [r7, #4]
 810d99c:	f000 fa74 	bl	810de88 <_ZSt4moveIRiEONSt16remove_referenceIT_E4typeEOS2_>
 810d9a0:	4603      	mov	r3, r0
 810d9a2:	681b      	ldr	r3, [r3, #0]
 810d9a4:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 810d9a6:	6838      	ldr	r0, [r7, #0]
 810d9a8:	f000 fa6e 	bl	810de88 <_ZSt4moveIRiEONSt16remove_referenceIT_E4typeEOS2_>
 810d9ac:	4603      	mov	r3, r0
 810d9ae:	681a      	ldr	r2, [r3, #0]
 810d9b0:	687b      	ldr	r3, [r7, #4]
 810d9b2:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 810d9b4:	f107 030c 	add.w	r3, r7, #12
 810d9b8:	4618      	mov	r0, r3
 810d9ba:	f000 fa65 	bl	810de88 <_ZSt4moveIRiEONSt16remove_referenceIT_E4typeEOS2_>
 810d9be:	4603      	mov	r3, r0
 810d9c0:	681a      	ldr	r2, [r3, #0]
 810d9c2:	683b      	ldr	r3, [r7, #0]
 810d9c4:	601a      	str	r2, [r3, #0]
    }
 810d9c6:	bf00      	nop
 810d9c8:	3710      	adds	r7, #16
 810d9ca:	46bd      	mov	sp, r7
 810d9cc:	bd80      	pop	{r7, pc}

0810d9ce <_ZSt13move_backwardIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_ET0_T_S8_S7_>:
    move_backward(_BI1 __first, _BI1 __last, _BI2 __result)
 810d9ce:	b590      	push	{r4, r7, lr}
 810d9d0:	b085      	sub	sp, #20
 810d9d2:	af00      	add	r7, sp, #0
 810d9d4:	60f8      	str	r0, [r7, #12]
 810d9d6:	60b9      	str	r1, [r7, #8]
 810d9d8:	607a      	str	r2, [r7, #4]
      return std::__copy_move_backward_a<true>(std::__miter_base(__first),
 810d9da:	68f8      	ldr	r0, [r7, #12]
 810d9dc:	f000 fa09 	bl	810ddf2 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEET_S7_>
 810d9e0:	4604      	mov	r4, r0
 810d9e2:	68b8      	ldr	r0, [r7, #8]
 810d9e4:	f000 fa05 	bl	810ddf2 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEET_S7_>
 810d9e8:	4603      	mov	r3, r0
 810d9ea:	687a      	ldr	r2, [r7, #4]
 810d9ec:	4619      	mov	r1, r3
 810d9ee:	4620      	mov	r0, r4
 810d9f0:	f000 fa55 	bl	810de9e <_ZSt22__copy_move_backward_aILb1EN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_ET1_T0_S8_S7_>
 810d9f4:	4603      	mov	r3, r0
    }
 810d9f6:	4618      	mov	r0, r3
 810d9f8:	3714      	adds	r7, #20
 810d9fa:	46bd      	mov	sp, r7
 810d9fc:	bd90      	pop	{r4, r7, pc}

0810d9fe <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEmmEv>:
      operator--() _GLIBCXX_NOEXCEPT
 810d9fe:	b480      	push	{r7}
 810da00:	b083      	sub	sp, #12
 810da02:	af00      	add	r7, sp, #0
 810da04:	6078      	str	r0, [r7, #4]
	--_M_current;
 810da06:	687b      	ldr	r3, [r7, #4]
 810da08:	681b      	ldr	r3, [r3, #0]
 810da0a:	1f1a      	subs	r2, r3, #4
 810da0c:	687b      	ldr	r3, [r7, #4]
 810da0e:	601a      	str	r2, [r3, #0]
	return *this;
 810da10:	687b      	ldr	r3, [r7, #4]
      }
 810da12:	4618      	mov	r0, r3
 810da14:	370c      	adds	r7, #12
 810da16:	46bd      	mov	sp, r7
 810da18:	f85d 7b04 	ldr.w	r7, [sp], #4
 810da1c:	4770      	bx	lr

0810da1e <_ZNSt12_Destroy_auxILb0EE9__destroyIPfEEvT_S3_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
 810da1e:	b580      	push	{r7, lr}
 810da20:	b082      	sub	sp, #8
 810da22:	af00      	add	r7, sp, #0
 810da24:	6078      	str	r0, [r7, #4]
 810da26:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 810da28:	e009      	b.n	810da3e <_ZNSt12_Destroy_auxILb0EE9__destroyIPfEEvT_S3_+0x20>
	    std::_Destroy(std::__addressof(*__first));
 810da2a:	6878      	ldr	r0, [r7, #4]
 810da2c:	f000 f88e 	bl	810db4c <_ZSt11__addressofIfEPT_RS0_>
 810da30:	4603      	mov	r3, r0
 810da32:	4618      	mov	r0, r3
 810da34:	f000 fa54 	bl	810dee0 <_ZSt8_DestroyIfEvPT_>
	  for (; __first != __last; ++__first)
 810da38:	687b      	ldr	r3, [r7, #4]
 810da3a:	3304      	adds	r3, #4
 810da3c:	607b      	str	r3, [r7, #4]
 810da3e:	687a      	ldr	r2, [r7, #4]
 810da40:	683b      	ldr	r3, [r7, #0]
 810da42:	429a      	cmp	r2, r3
 810da44:	d1f1      	bne.n	810da2a <_ZNSt12_Destroy_auxILb0EE9__destroyIPfEEvT_S3_+0xc>
	}
 810da46:	bf00      	nop
 810da48:	bf00      	nop
 810da4a:	3708      	adds	r7, #8
 810da4c:	46bd      	mov	sp, r7
 810da4e:	bd80      	pop	{r7, pc}

0810da50 <_ZNSt12_Destroy_auxILb1EE9__destroyIPfEEvT_S3_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 810da50:	b480      	push	{r7}
 810da52:	b083      	sub	sp, #12
 810da54:	af00      	add	r7, sp, #0
 810da56:	6078      	str	r0, [r7, #4]
 810da58:	6039      	str	r1, [r7, #0]
 810da5a:	bf00      	nop
 810da5c:	370c      	adds	r7, #12
 810da5e:	46bd      	mov	sp, r7
 810da60:	f85d 7b04 	ldr.w	r7, [sp], #4
 810da64:	4770      	bx	lr

0810da66 <_ZSt12__niter_baseIPfET_S1_>:
    __niter_base(_Iterator __it)
 810da66:	b480      	push	{r7}
 810da68:	b083      	sub	sp, #12
 810da6a:	af00      	add	r7, sp, #0
 810da6c:	6078      	str	r0, [r7, #4]
    { return __it; }
 810da6e:	687b      	ldr	r3, [r7, #4]
 810da70:	4618      	mov	r0, r3
 810da72:	370c      	adds	r7, #12
 810da74:	46bd      	mov	sp, r7
 810da76:	f85d 7b04 	ldr.w	r7, [sp], #4
 810da7a:	4770      	bx	lr

0810da7c <_ZN9__gnu_cxx17__normal_iteratorIPfvEC1ERKS1_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 810da7c:	b480      	push	{r7}
 810da7e:	b083      	sub	sp, #12
 810da80:	af00      	add	r7, sp, #0
 810da82:	6078      	str	r0, [r7, #4]
 810da84:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 810da86:	683b      	ldr	r3, [r7, #0]
 810da88:	681a      	ldr	r2, [r3, #0]
 810da8a:	687b      	ldr	r3, [r7, #4]
 810da8c:	601a      	str	r2, [r3, #0]
 810da8e:	687b      	ldr	r3, [r7, #4]
 810da90:	4618      	mov	r0, r3
 810da92:	370c      	adds	r7, #12
 810da94:	46bd      	mov	sp, r7
 810da96:	f85d 7b04 	ldr.w	r7, [sp], #4
 810da9a:	4770      	bx	lr

0810da9c <_ZSt14__relocate_a_1IffENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS2_E4typeES4_S4_S4_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
 810da9c:	b580      	push	{r7, lr}
 810da9e:	b086      	sub	sp, #24
 810daa0:	af00      	add	r7, sp, #0
 810daa2:	60f8      	str	r0, [r7, #12]
 810daa4:	60b9      	str	r1, [r7, #8]
 810daa6:	607a      	str	r2, [r7, #4]
 810daa8:	603b      	str	r3, [r7, #0]
      ptrdiff_t __count = __last - __first;
 810daaa:	68ba      	ldr	r2, [r7, #8]
 810daac:	68fb      	ldr	r3, [r7, #12]
 810daae:	1ad3      	subs	r3, r2, r3
 810dab0:	109b      	asrs	r3, r3, #2
 810dab2:	617b      	str	r3, [r7, #20]
      if (__count > 0)
 810dab4:	697b      	ldr	r3, [r7, #20]
 810dab6:	2b00      	cmp	r3, #0
 810dab8:	dd22      	ble.n	810db00 <_ZSt14__relocate_a_1IffENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS2_E4typeES4_S4_S4_RSaIT0_E+0x64>
	  if (std::is_constant_evaluated())
 810daba:	f7fb f8aa 	bl	8108c12 <_ZSt21is_constant_evaluatedv>
 810dabe:	4603      	mov	r3, r0
 810dac0:	2b00      	cmp	r3, #0
 810dac2:	d016      	beq.n	810daf2 <_ZSt14__relocate_a_1IffENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS2_E4typeES4_S4_S4_RSaIT0_E+0x56>
	      __gnu_cxx::__normal_iterator<_Tp*, void> __out(__result);
 810dac4:	1d3a      	adds	r2, r7, #4
 810dac6:	f107 0310 	add.w	r3, r7, #16
 810daca:	4611      	mov	r1, r2
 810dacc:	4618      	mov	r0, r3
 810dace:	f7ff ffd5 	bl	810da7c <_ZN9__gnu_cxx17__normal_iteratorIPfvEC1ERKS1_>
	      __out = std::__relocate_a_1(__first, __last, __out, __alloc);
 810dad2:	683b      	ldr	r3, [r7, #0]
 810dad4:	693a      	ldr	r2, [r7, #16]
 810dad6:	68b9      	ldr	r1, [r7, #8]
 810dad8:	68f8      	ldr	r0, [r7, #12]
 810dada:	f000 fa45 	bl	810df68 <_ZSt14__relocate_a_1IPfN9__gnu_cxx17__normal_iteratorIS0_vEESaIfEET0_T_S6_S5_RT1_>
 810dade:	4603      	mov	r3, r0
 810dae0:	613b      	str	r3, [r7, #16]
	      return __out.base();
 810dae2:	f107 0310 	add.w	r3, r7, #16
 810dae6:	4618      	mov	r0, r3
 810dae8:	f000 fa6c 	bl	810dfc4 <_ZNK9__gnu_cxx17__normal_iteratorIPfvE4baseEv>
 810daec:	4603      	mov	r3, r0
 810daee:	681b      	ldr	r3, [r3, #0]
 810daf0:	e00a      	b.n	810db08 <_ZSt14__relocate_a_1IffENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS2_E4typeES4_S4_S4_RSaIT0_E+0x6c>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 810daf2:	6878      	ldr	r0, [r7, #4]
 810daf4:	697b      	ldr	r3, [r7, #20]
 810daf6:	009b      	lsls	r3, r3, #2
 810daf8:	461a      	mov	r2, r3
 810dafa:	68f9      	ldr	r1, [r7, #12]
 810dafc:	f019 f8b4 	bl	8126c68 <memmove>
      return __result + __count;
 810db00:	687a      	ldr	r2, [r7, #4]
 810db02:	697b      	ldr	r3, [r7, #20]
 810db04:	009b      	lsls	r3, r3, #2
 810db06:	4413      	add	r3, r2
    }
 810db08:	4618      	mov	r0, r3
 810db0a:	3718      	adds	r7, #24
 810db0c:	46bd      	mov	sp, r7
 810db0e:	bd80      	pop	{r7, pc}

0810db10 <_ZNSaIfEC1ERKS_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 810db10:	b580      	push	{r7, lr}
 810db12:	b082      	sub	sp, #8
 810db14:	af00      	add	r7, sp, #0
 810db16:	6078      	str	r0, [r7, #4]
 810db18:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 810db1a:	6839      	ldr	r1, [r7, #0]
 810db1c:	6878      	ldr	r0, [r7, #4]
 810db1e:	f000 fa5c 	bl	810dfda <_ZNSt15__new_allocatorIfEC1ERKS0_>
 810db22:	687b      	ldr	r3, [r7, #4]
 810db24:	4618      	mov	r0, r3
 810db26:	3708      	adds	r7, #8
 810db28:	46bd      	mov	sp, r7
 810db2a:	bd80      	pop	{r7, pc}

0810db2c <_ZN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 810db2c:	b480      	push	{r7}
 810db2e:	b083      	sub	sp, #12
 810db30:	af00      	add	r7, sp, #0
 810db32:	6078      	str	r0, [r7, #4]
	++_M_current;
 810db34:	687b      	ldr	r3, [r7, #4]
 810db36:	681b      	ldr	r3, [r3, #0]
 810db38:	1d1a      	adds	r2, r3, #4
 810db3a:	687b      	ldr	r3, [r7, #4]
 810db3c:	601a      	str	r2, [r3, #0]
	return *this;
 810db3e:	687b      	ldr	r3, [r7, #4]
      }
 810db40:	4618      	mov	r0, r3
 810db42:	370c      	adds	r7, #12
 810db44:	46bd      	mov	sp, r7
 810db46:	f85d 7b04 	ldr.w	r7, [sp], #4
 810db4a:	4770      	bx	lr

0810db4c <_ZSt11__addressofIfEPT_RS0_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 810db4c:	b480      	push	{r7}
 810db4e:	b083      	sub	sp, #12
 810db50:	af00      	add	r7, sp, #0
 810db52:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 810db54:	687b      	ldr	r3, [r7, #4]
 810db56:	4618      	mov	r0, r3
 810db58:	370c      	adds	r7, #12
 810db5a:	46bd      	mov	sp, r7
 810db5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 810db60:	4770      	bx	lr

0810db62 <_ZNK9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 810db62:	b480      	push	{r7}
 810db64:	b083      	sub	sp, #12
 810db66:	af00      	add	r7, sp, #0
 810db68:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 810db6a:	687b      	ldr	r3, [r7, #4]
 810db6c:	681b      	ldr	r3, [r3, #0]
 810db6e:	4618      	mov	r0, r3
 810db70:	370c      	adds	r7, #12
 810db72:	46bd      	mov	sp, r7
 810db74:	f85d 7b04 	ldr.w	r7, [sp], #4
 810db78:	4770      	bx	lr

0810db7a <_ZSt10_ConstructIfJRKfEEvPT_DpOT0_>:
    _Construct(_Tp* __p, _Args&&... __args)
 810db7a:	b590      	push	{r4, r7, lr}
 810db7c:	b083      	sub	sp, #12
 810db7e:	af00      	add	r7, sp, #0
 810db80:	6078      	str	r0, [r7, #4]
 810db82:	6039      	str	r1, [r7, #0]
      if (std::__is_constant_evaluated())
 810db84:	f7f7 f836 	bl	8104bf4 <_ZSt23__is_constant_evaluatedv>
 810db88:	4603      	mov	r3, r0
 810db8a:	2b00      	cmp	r3, #0
 810db8c:	d008      	beq.n	810dba0 <_ZSt10_ConstructIfJRKfEEvPT_DpOT0_+0x26>
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 810db8e:	6838      	ldr	r0, [r7, #0]
 810db90:	f000 fa2f 	bl	810dff2 <_ZSt7forwardIRKfEOT_RNSt16remove_referenceIS2_E4typeE>
 810db94:	4603      	mov	r3, r0
 810db96:	4619      	mov	r1, r3
 810db98:	6878      	ldr	r0, [r7, #4]
 810db9a:	f000 fa35 	bl	810e008 <_ZSt12construct_atIfJRKfEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>
	  return;
 810db9e:	e00b      	b.n	810dbb8 <_ZSt10_ConstructIfJRKfEEvPT_DpOT0_+0x3e>
      ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
 810dba0:	687b      	ldr	r3, [r7, #4]
 810dba2:	4619      	mov	r1, r3
 810dba4:	2004      	movs	r0, #4
 810dba6:	f7f3 fbb1 	bl	810130c <_ZnwjPv>
 810dbaa:	4604      	mov	r4, r0
 810dbac:	6838      	ldr	r0, [r7, #0]
 810dbae:	f000 fa20 	bl	810dff2 <_ZSt7forwardIRKfEOT_RNSt16remove_referenceIS2_E4typeE>
 810dbb2:	4603      	mov	r3, r0
 810dbb4:	681b      	ldr	r3, [r3, #0]
 810dbb6:	6023      	str	r3, [r4, #0]
    }
 810dbb8:	370c      	adds	r7, #12
 810dbba:	46bd      	mov	sp, r7
 810dbbc:	bd90      	pop	{r4, r7, pc}

0810dbbe <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfEET0_T_SC_SB_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 810dbbe:	b580      	push	{r7, lr}
 810dbc0:	b084      	sub	sp, #16
 810dbc2:	af00      	add	r7, sp, #0
 810dbc4:	60f8      	str	r0, [r7, #12]
 810dbc6:	60b9      	str	r1, [r7, #8]
 810dbc8:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 810dbca:	687a      	ldr	r2, [r7, #4]
 810dbcc:	68b9      	ldr	r1, [r7, #8]
 810dbce:	68f8      	ldr	r0, [r7, #12]
 810dbd0:	f000 fa30 	bl	810e034 <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfET0_T_SA_S9_>
 810dbd4:	4603      	mov	r3, r0
 810dbd6:	4618      	mov	r0, r3
 810dbd8:	3710      	adds	r7, #16
 810dbda:	46bd      	mov	sp, r7
 810dbdc:	bd80      	pop	{r7, pc}

0810dbde <_ZSt14__partial_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_T0_>:
    __partial_sort(_RandomAccessIterator __first,
 810dbde:	b590      	push	{r4, r7, lr}
 810dbe0:	b085      	sub	sp, #20
 810dbe2:	af00      	add	r7, sp, #0
 810dbe4:	60f8      	str	r0, [r7, #12]
 810dbe6:	60b9      	str	r1, [r7, #8]
 810dbe8:	607a      	str	r2, [r7, #4]
 810dbea:	703b      	strb	r3, [r7, #0]
      std::__heap_select(__first, __middle, __last, __comp);
 810dbec:	4623      	mov	r3, r4
 810dbee:	687a      	ldr	r2, [r7, #4]
 810dbf0:	68b9      	ldr	r1, [r7, #8]
 810dbf2:	68f8      	ldr	r0, [r7, #12]
 810dbf4:	f000 fa6e 	bl	810e0d4 <_ZSt13__heap_selectIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_T0_>
      std::__sort_heap(__first, __middle, __comp);
 810dbf8:	463b      	mov	r3, r7
 810dbfa:	461a      	mov	r2, r3
 810dbfc:	68b9      	ldr	r1, [r7, #8]
 810dbfe:	68f8      	ldr	r0, [r7, #12]
 810dc00:	f000 faa6 	bl	810e150 <_ZSt11__sort_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_RT0_>
    }
 810dc04:	bf00      	nop
 810dc06:	3714      	adds	r7, #20
 810dc08:	46bd      	mov	sp, r7
 810dc0a:	bd90      	pop	{r4, r7, pc}

0810dc0c <_ZSt27__unguarded_partition_pivotIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEET_S9_S9_T0_>:
    __unguarded_partition_pivot(_RandomAccessIterator __first,
 810dc0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 810dc0e:	b089      	sub	sp, #36	@ 0x24
 810dc10:	af02      	add	r7, sp, #8
 810dc12:	60f8      	str	r0, [r7, #12]
 810dc14:	60b9      	str	r1, [r7, #8]
 810dc16:	713a      	strb	r2, [r7, #4]
      _RandomAccessIterator __mid = __first + (__last - __first) / 2;
 810dc18:	f107 020c 	add.w	r2, r7, #12
 810dc1c:	f107 0308 	add.w	r3, r7, #8
 810dc20:	4611      	mov	r1, r2
 810dc22:	4618      	mov	r0, r3
 810dc24:	f7ff f95b 	bl	810cede <_ZN9__gnu_cxxmiIPfSt6vectorIfSaIfEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 810dc28:	4603      	mov	r3, r0
 810dc2a:	0fda      	lsrs	r2, r3, #31
 810dc2c:	4413      	add	r3, r2
 810dc2e:	105b      	asrs	r3, r3, #1
 810dc30:	461a      	mov	r2, r3
 810dc32:	f107 030c 	add.w	r3, r7, #12
 810dc36:	4611      	mov	r1, r2
 810dc38:	4618      	mov	r0, r3
 810dc3a:	f7fe fff0 	bl	810cc1e <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 810dc3e:	4603      	mov	r3, r0
 810dc40:	617b      	str	r3, [r7, #20]
      std::__move_median_to_first(__first, __first + 1, __mid, __last - 1,
 810dc42:	f107 030c 	add.w	r3, r7, #12
 810dc46:	2101      	movs	r1, #1
 810dc48:	4618      	mov	r0, r3
 810dc4a:	f7fe ffe8 	bl	810cc1e <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 810dc4e:	4604      	mov	r4, r0
 810dc50:	f107 0308 	add.w	r3, r7, #8
 810dc54:	2101      	movs	r1, #1
 810dc56:	4618      	mov	r0, r3
 810dc58:	f7ff fe5a 	bl	810d910 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEmiEi>
 810dc5c:	4603      	mov	r3, r0
 810dc5e:	f88d 5000 	strb.w	r5, [sp]
 810dc62:	697a      	ldr	r2, [r7, #20]
 810dc64:	4621      	mov	r1, r4
 810dc66:	68f8      	ldr	r0, [r7, #12]
 810dc68:	f000 fa99 	bl	810e19e <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_S9_T0_>
      return std::__unguarded_partition(__first + 1, __last, __first, __comp);
 810dc6c:	f107 030c 	add.w	r3, r7, #12
 810dc70:	2101      	movs	r1, #1
 810dc72:	4618      	mov	r0, r3
 810dc74:	f7fe ffd3 	bl	810cc1e <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 810dc78:	4633      	mov	r3, r6
 810dc7a:	68fa      	ldr	r2, [r7, #12]
 810dc7c:	68b9      	ldr	r1, [r7, #8]
 810dc7e:	f000 fae3 	bl	810e248 <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEET_S9_S9_S9_T0_>
 810dc82:	4603      	mov	r3, r0
    }
 810dc84:	4618      	mov	r0, r3
 810dc86:	371c      	adds	r7, #28
 810dc88:	46bd      	mov	sp, r7
 810dc8a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0810dc8c <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_>:
    __insertion_sort(_RandomAccessIterator __first,
 810dc8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 810dc8e:	b087      	sub	sp, #28
 810dc90:	af00      	add	r7, sp, #0
 810dc92:	60f8      	str	r0, [r7, #12]
 810dc94:	60b9      	str	r1, [r7, #8]
 810dc96:	713a      	strb	r2, [r7, #4]
      if (__first == __last) return;
 810dc98:	f107 0208 	add.w	r2, r7, #8
 810dc9c:	f107 030c 	add.w	r3, r7, #12
 810dca0:	4611      	mov	r1, r2
 810dca2:	4618      	mov	r0, r3
 810dca4:	f7ff f8f8 	bl	810ce98 <_ZN9__gnu_cxxeqIPfSt6vectorIfSaIfEEEEbRKNS_17__normal_iteratorIT_T0_EESA_>
 810dca8:	4603      	mov	r3, r0
 810dcaa:	2b00      	cmp	r3, #0
 810dcac:	d153      	bne.n	810dd56 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_+0xca>
      for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)
 810dcae:	f107 030c 	add.w	r3, r7, #12
 810dcb2:	2101      	movs	r1, #1
 810dcb4:	4618      	mov	r0, r3
 810dcb6:	f7fe ffb2 	bl	810cc1e <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 810dcba:	4603      	mov	r3, r0
 810dcbc:	617b      	str	r3, [r7, #20]
 810dcbe:	e03b      	b.n	810dd38 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_+0xac>
	  if (__comp(__i, __first))
 810dcc0:	1d3b      	adds	r3, r7, #4
 810dcc2:	68fa      	ldr	r2, [r7, #12]
 810dcc4:	6979      	ldr	r1, [r7, #20]
 810dcc6:	4618      	mov	r0, r3
 810dcc8:	f000 fb11 	bl	810e2ee <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPfSt6vectorIfSaIfEEEES8_EEbT_T0_>
 810dccc:	4603      	mov	r3, r0
 810dcce:	2b00      	cmp	r3, #0
 810dcd0:	d026      	beq.n	810dd20 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_+0x94>
		__val = _GLIBCXX_MOVE(*__i);
 810dcd2:	f107 0314 	add.w	r3, r7, #20
 810dcd6:	4618      	mov	r0, r3
 810dcd8:	f7ff fdf6 	bl	810d8c8 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 810dcdc:	4603      	mov	r3, r0
 810dcde:	4618      	mov	r0, r3
 810dce0:	f7ff f942 	bl	810cf68 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 810dce4:	4603      	mov	r3, r0
 810dce6:	681b      	ldr	r3, [r3, #0]
 810dce8:	613b      	str	r3, [r7, #16]
	      _GLIBCXX_MOVE_BACKWARD3(__first, __i, __i + 1);
 810dcea:	f107 0314 	add.w	r3, r7, #20
 810dcee:	2101      	movs	r1, #1
 810dcf0:	4618      	mov	r0, r3
 810dcf2:	f7fe ff94 	bl	810cc1e <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 810dcf6:	4603      	mov	r3, r0
 810dcf8:	461a      	mov	r2, r3
 810dcfa:	6979      	ldr	r1, [r7, #20]
 810dcfc:	68f8      	ldr	r0, [r7, #12]
 810dcfe:	f7ff fe66 	bl	810d9ce <_ZSt13move_backwardIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_ET0_T_S8_S7_>
	      *__first = _GLIBCXX_MOVE(__val);
 810dd02:	f107 0310 	add.w	r3, r7, #16
 810dd06:	4618      	mov	r0, r3
 810dd08:	f7ff f92e 	bl	810cf68 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 810dd0c:	4603      	mov	r3, r0
 810dd0e:	681c      	ldr	r4, [r3, #0]
 810dd10:	f107 030c 	add.w	r3, r7, #12
 810dd14:	4618      	mov	r0, r3
 810dd16:	f7ff fdd7 	bl	810d8c8 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 810dd1a:	4603      	mov	r3, r0
 810dd1c:	601c      	str	r4, [r3, #0]
 810dd1e:	e006      	b.n	810dd2e <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_+0xa2>
				__gnu_cxx::__ops::__val_comp_iter(__comp));
 810dd20:	4630      	mov	r0, r6
 810dd22:	f7fe fc34 	bl	810c58e <_ZN9__gnu_cxx5__ops15__val_comp_iterENS0_15_Iter_less_iterE>
	    std::__unguarded_linear_insert(__i,
 810dd26:	4629      	mov	r1, r5
 810dd28:	6978      	ldr	r0, [r7, #20]
 810dd2a:	f000 fb05 	bl	810e338 <_ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops14_Val_less_iterEEvT_T0_>
      for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)
 810dd2e:	f107 0314 	add.w	r3, r7, #20
 810dd32:	4618      	mov	r0, r3
 810dd34:	f7ff fe1c 	bl	810d970 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEppEv>
 810dd38:	f107 0208 	add.w	r2, r7, #8
 810dd3c:	f107 0314 	add.w	r3, r7, #20
 810dd40:	4611      	mov	r1, r2
 810dd42:	4618      	mov	r0, r3
 810dd44:	f7ff f8a8 	bl	810ce98 <_ZN9__gnu_cxxeqIPfSt6vectorIfSaIfEEEEbRKNS_17__normal_iteratorIT_T0_EESA_>
 810dd48:	4603      	mov	r3, r0
 810dd4a:	f083 0301 	eor.w	r3, r3, #1
 810dd4e:	b2db      	uxtb	r3, r3
 810dd50:	2b00      	cmp	r3, #0
 810dd52:	d1b5      	bne.n	810dcc0 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_+0x34>
 810dd54:	e000      	b.n	810dd58 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_+0xcc>
      if (__first == __last) return;
 810dd56:	bf00      	nop
    }
 810dd58:	371c      	adds	r7, #28
 810dd5a:	46bd      	mov	sp, r7
 810dd5c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0810dd5e <_ZSt26__unguarded_insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_>:
    __unguarded_insertion_sort(_RandomAccessIterator __first,
 810dd5e:	b5b0      	push	{r4, r5, r7, lr}
 810dd60:	b086      	sub	sp, #24
 810dd62:	af00      	add	r7, sp, #0
 810dd64:	60f8      	str	r0, [r7, #12]
 810dd66:	60b9      	str	r1, [r7, #8]
 810dd68:	713a      	strb	r2, [r7, #4]
      for (_RandomAccessIterator __i = __first; __i != __last; ++__i)
 810dd6a:	68fb      	ldr	r3, [r7, #12]
 810dd6c:	617b      	str	r3, [r7, #20]
 810dd6e:	e00b      	b.n	810dd88 <_ZSt26__unguarded_insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_+0x2a>
				__gnu_cxx::__ops::__val_comp_iter(__comp));
 810dd70:	4628      	mov	r0, r5
 810dd72:	f7fe fc0c 	bl	810c58e <_ZN9__gnu_cxx5__ops15__val_comp_iterENS0_15_Iter_less_iterE>
	std::__unguarded_linear_insert(__i,
 810dd76:	4621      	mov	r1, r4
 810dd78:	6978      	ldr	r0, [r7, #20]
 810dd7a:	f000 fadd 	bl	810e338 <_ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops14_Val_less_iterEEvT_T0_>
      for (_RandomAccessIterator __i = __first; __i != __last; ++__i)
 810dd7e:	f107 0314 	add.w	r3, r7, #20
 810dd82:	4618      	mov	r0, r3
 810dd84:	f7ff fdf4 	bl	810d970 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEppEv>
 810dd88:	f107 0208 	add.w	r2, r7, #8
 810dd8c:	f107 0314 	add.w	r3, r7, #20
 810dd90:	4611      	mov	r1, r2
 810dd92:	4618      	mov	r0, r3
 810dd94:	f7ff f880 	bl	810ce98 <_ZN9__gnu_cxxeqIPfSt6vectorIfSaIfEEEEbRKNS_17__normal_iteratorIT_T0_EESA_>
 810dd98:	4603      	mov	r3, r0
 810dd9a:	f083 0301 	eor.w	r3, r3, #1
 810dd9e:	b2db      	uxtb	r3, r3
 810dda0:	2b00      	cmp	r3, #0
 810dda2:	d1e5      	bne.n	810dd70 <_ZSt26__unguarded_insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_+0x12>
    }
 810dda4:	bf00      	nop
 810dda6:	bf00      	nop
 810dda8:	3718      	adds	r7, #24
 810ddaa:	46bd      	mov	sp, r7
 810ddac:	bdb0      	pop	{r4, r5, r7, pc}

0810ddae <_ZSt12construct_atIfJfEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS1_DpOS2_>:
    construct_at(_Tp* __location, _Args&&... __args)
 810ddae:	b590      	push	{r4, r7, lr}
 810ddb0:	b083      	sub	sp, #12
 810ddb2:	af00      	add	r7, sp, #0
 810ddb4:	6078      	str	r0, [r7, #4]
 810ddb6:	6039      	str	r1, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 810ddb8:	687b      	ldr	r3, [r7, #4]
 810ddba:	4619      	mov	r1, r3
 810ddbc:	2004      	movs	r0, #4
 810ddbe:	f7f3 faa5 	bl	810130c <_ZnwjPv>
 810ddc2:	4604      	mov	r4, r0
 810ddc4:	6838      	ldr	r0, [r7, #0]
 810ddc6:	f7ff fc5d 	bl	810d684 <_ZSt7forwardIfEOT_RNSt16remove_referenceIS0_E4typeE>
 810ddca:	4603      	mov	r3, r0
 810ddcc:	681b      	ldr	r3, [r3, #0]
 810ddce:	6023      	str	r3, [r4, #0]
 810ddd0:	4623      	mov	r3, r4
 810ddd2:	4618      	mov	r0, r3
 810ddd4:	370c      	adds	r7, #12
 810ddd6:	46bd      	mov	sp, r7
 810ddd8:	bd90      	pop	{r4, r7, pc}

0810ddda <_ZNSt16allocator_traitsISaIfEE7destroyIfEEvRS0_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 810ddda:	b580      	push	{r7, lr}
 810dddc:	b082      	sub	sp, #8
 810ddde:	af00      	add	r7, sp, #0
 810dde0:	6078      	str	r0, [r7, #4]
 810dde2:	6039      	str	r1, [r7, #0]
	  std::destroy_at(__p);
 810dde4:	6838      	ldr	r0, [r7, #0]
 810dde6:	f000 faf2 	bl	810e3ce <_ZSt10destroy_atIfEvPT_>
	}
 810ddea:	bf00      	nop
 810ddec:	3708      	adds	r7, #8
 810ddee:	46bd      	mov	sp, r7
 810ddf0:	bd80      	pop	{r7, pc}

0810ddf2 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEET_S7_>:
  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __miter_base(_Iterator __it)
 810ddf2:	b480      	push	{r7}
 810ddf4:	b083      	sub	sp, #12
 810ddf6:	af00      	add	r7, sp, #0
 810ddf8:	6078      	str	r0, [r7, #4]
    { return __it; }
 810ddfa:	687b      	ldr	r3, [r7, #4]
 810ddfc:	4618      	mov	r0, r3
 810ddfe:	370c      	adds	r7, #12
 810de00:	46bd      	mov	sp, r7
 810de02:	f85d 7b04 	ldr.w	r7, [sp], #4
 810de06:	4770      	bx	lr

0810de08 <_ZSt13__copy_move_aILb1EN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_ET1_T0_S8_S7_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 810de08:	b5b0      	push	{r4, r5, r7, lr}
 810de0a:	b084      	sub	sp, #16
 810de0c:	af00      	add	r7, sp, #0
 810de0e:	60f8      	str	r0, [r7, #12]
 810de10:	60b9      	str	r1, [r7, #8]
 810de12:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 810de14:	68f8      	ldr	r0, [r7, #12]
 810de16:	f000 fae4 	bl	810e3e2 <_ZSt12__niter_baseIPfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>
 810de1a:	4604      	mov	r4, r0
 810de1c:	68b8      	ldr	r0, [r7, #8]
 810de1e:	f000 fae0 	bl	810e3e2 <_ZSt12__niter_baseIPfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>
 810de22:	4605      	mov	r5, r0
 810de24:	6878      	ldr	r0, [r7, #4]
 810de26:	f000 fadc 	bl	810e3e2 <_ZSt12__niter_baseIPfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>
 810de2a:	4603      	mov	r3, r0
 810de2c:	461a      	mov	r2, r3
 810de2e:	4629      	mov	r1, r5
 810de30:	4620      	mov	r0, r4
 810de32:	f000 fae4 	bl	810e3fe <_ZSt14__copy_move_a1ILb1EPfS0_ET1_T0_S2_S1_>
 810de36:	4603      	mov	r3, r0
 810de38:	4619      	mov	r1, r3
 810de3a:	6878      	ldr	r0, [r7, #4]
 810de3c:	f000 faef 	bl	810e41e <_ZSt12__niter_wrapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES2_ET_S7_T0_>
 810de40:	4603      	mov	r3, r0
    }
 810de42:	4618      	mov	r0, r3
 810de44:	3710      	adds	r7, #16
 810de46:	46bd      	mov	sp, r7
 810de48:	bdb0      	pop	{r4, r5, r7, pc}

0810de4a <_ZSt4swapIfENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS4_ESt18is_move_assignableIS4_EEE5valueEvE4typeERS4_SE_>:
    swap(_Tp& __a, _Tp& __b)
 810de4a:	b580      	push	{r7, lr}
 810de4c:	b084      	sub	sp, #16
 810de4e:	af00      	add	r7, sp, #0
 810de50:	6078      	str	r0, [r7, #4]
 810de52:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 810de54:	6878      	ldr	r0, [r7, #4]
 810de56:	f7ff f887 	bl	810cf68 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 810de5a:	4603      	mov	r3, r0
 810de5c:	681b      	ldr	r3, [r3, #0]
 810de5e:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 810de60:	6838      	ldr	r0, [r7, #0]
 810de62:	f7ff f881 	bl	810cf68 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 810de66:	4603      	mov	r3, r0
 810de68:	681a      	ldr	r2, [r3, #0]
 810de6a:	687b      	ldr	r3, [r7, #4]
 810de6c:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 810de6e:	f107 030c 	add.w	r3, r7, #12
 810de72:	4618      	mov	r0, r3
 810de74:	f7ff f878 	bl	810cf68 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 810de78:	4603      	mov	r3, r0
 810de7a:	681a      	ldr	r2, [r3, #0]
 810de7c:	683b      	ldr	r3, [r7, #0]
 810de7e:	601a      	str	r2, [r3, #0]
    }
 810de80:	bf00      	nop
 810de82:	3710      	adds	r7, #16
 810de84:	46bd      	mov	sp, r7
 810de86:	bd80      	pop	{r7, pc}

0810de88 <_ZSt4moveIRiEONSt16remove_referenceIT_E4typeEOS2_>:
    move(_Tp&& __t) noexcept
 810de88:	b480      	push	{r7}
 810de8a:	b083      	sub	sp, #12
 810de8c:	af00      	add	r7, sp, #0
 810de8e:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 810de90:	687b      	ldr	r3, [r7, #4]
 810de92:	4618      	mov	r0, r3
 810de94:	370c      	adds	r7, #12
 810de96:	46bd      	mov	sp, r7
 810de98:	f85d 7b04 	ldr.w	r7, [sp], #4
 810de9c:	4770      	bx	lr

0810de9e <_ZSt22__copy_move_backward_aILb1EN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_ET1_T0_S8_S7_>:
    __copy_move_backward_a(_II __first, _II __last, _OI __result)
 810de9e:	b5b0      	push	{r4, r5, r7, lr}
 810dea0:	b084      	sub	sp, #16
 810dea2:	af00      	add	r7, sp, #0
 810dea4:	60f8      	str	r0, [r7, #12]
 810dea6:	60b9      	str	r1, [r7, #8]
 810dea8:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 810deaa:	68f8      	ldr	r0, [r7, #12]
 810deac:	f000 fa99 	bl	810e3e2 <_ZSt12__niter_baseIPfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>
 810deb0:	4604      	mov	r4, r0
 810deb2:	68b8      	ldr	r0, [r7, #8]
 810deb4:	f000 fa95 	bl	810e3e2 <_ZSt12__niter_baseIPfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>
 810deb8:	4605      	mov	r5, r0
 810deba:	6878      	ldr	r0, [r7, #4]
 810debc:	f000 fa91 	bl	810e3e2 <_ZSt12__niter_baseIPfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>
 810dec0:	4603      	mov	r3, r0
 810dec2:	461a      	mov	r2, r3
 810dec4:	4629      	mov	r1, r5
 810dec6:	4620      	mov	r0, r4
 810dec8:	f000 fac0 	bl	810e44c <_ZSt23__copy_move_backward_a1ILb1EPfS0_ET1_T0_S2_S1_>
 810decc:	4603      	mov	r3, r0
 810dece:	4619      	mov	r1, r3
 810ded0:	6878      	ldr	r0, [r7, #4]
 810ded2:	f000 faa4 	bl	810e41e <_ZSt12__niter_wrapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES2_ET_S7_T0_>
 810ded6:	4603      	mov	r3, r0
    }
 810ded8:	4618      	mov	r0, r3
 810deda:	3710      	adds	r7, #16
 810dedc:	46bd      	mov	sp, r7
 810dede:	bdb0      	pop	{r4, r5, r7, pc}

0810dee0 <_ZSt8_DestroyIfEvPT_>:
    _Destroy(_Tp* __pointer)
 810dee0:	b580      	push	{r7, lr}
 810dee2:	b082      	sub	sp, #8
 810dee4:	af00      	add	r7, sp, #0
 810dee6:	6078      	str	r0, [r7, #4]
      std::destroy_at(__pointer);
 810dee8:	6878      	ldr	r0, [r7, #4]
 810deea:	f000 fa70 	bl	810e3ce <_ZSt10destroy_atIfEvPT_>
    }
 810deee:	bf00      	nop
 810def0:	3708      	adds	r7, #8
 810def2:	46bd      	mov	sp, r7
 810def4:	bd80      	pop	{r7, pc}

0810def6 <_ZNSt15__new_allocatorIfE10deallocateEPfj>:
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
 810def6:	b580      	push	{r7, lr}
 810def8:	b084      	sub	sp, #16
 810defa:	af00      	add	r7, sp, #0
 810defc:	60f8      	str	r0, [r7, #12]
 810defe:	60b9      	str	r1, [r7, #8]
 810df00:	607a      	str	r2, [r7, #4]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 810df02:	687b      	ldr	r3, [r7, #4]
 810df04:	009b      	lsls	r3, r3, #2
 810df06:	4619      	mov	r1, r3
 810df08:	68b8      	ldr	r0, [r7, #8]
 810df0a:	f017 fd3d 	bl	8125988 <_ZdlPvj>
      }
 810df0e:	3710      	adds	r7, #16
 810df10:	46bd      	mov	sp, r7
 810df12:	bd80      	pop	{r7, pc}

0810df14 <_ZNSt15__new_allocatorIfE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 810df14:	b580      	push	{r7, lr}
 810df16:	b084      	sub	sp, #16
 810df18:	af00      	add	r7, sp, #0
 810df1a:	60f8      	str	r0, [r7, #12]
 810df1c:	60b9      	str	r1, [r7, #8]
 810df1e:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 810df20:	68f8      	ldr	r0, [r7, #12]
 810df22:	f000 faa3 	bl	810e46c <_ZNKSt15__new_allocatorIfE11_M_max_sizeEv>
 810df26:	4602      	mov	r2, r0
 810df28:	68bb      	ldr	r3, [r7, #8]
 810df2a:	4293      	cmp	r3, r2
 810df2c:	bf8c      	ite	hi
 810df2e:	2301      	movhi	r3, #1
 810df30:	2300      	movls	r3, #0
 810df32:	b2db      	uxtb	r3, r3
 810df34:	2b00      	cmp	r3, #0
 810df36:	bf14      	ite	ne
 810df38:	2301      	movne	r3, #1
 810df3a:	2300      	moveq	r3, #0
 810df3c:	b2db      	uxtb	r3, r3
 810df3e:	2b00      	cmp	r3, #0
 810df40:	d007      	beq.n	810df52 <_ZNSt15__new_allocatorIfE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 810df42:	68bb      	ldr	r3, [r7, #8]
 810df44:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 810df48:	d301      	bcc.n	810df4e <_ZNSt15__new_allocatorIfE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 810df4a:	f017 fdff 	bl	8125b4c <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 810df4e:	f017 fdfa 	bl	8125b46 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 810df52:	68bb      	ldr	r3, [r7, #8]
 810df54:	009b      	lsls	r3, r3, #2
 810df56:	4618      	mov	r0, r3
 810df58:	f017 fd27 	bl	81259aa <_Znwj>
 810df5c:	4603      	mov	r3, r0
 810df5e:	bf00      	nop
      }
 810df60:	4618      	mov	r0, r3
 810df62:	3710      	adds	r7, #16
 810df64:	46bd      	mov	sp, r7
 810df66:	bd80      	pop	{r7, pc}

0810df68 <_ZSt14__relocate_a_1IPfN9__gnu_cxx17__normal_iteratorIS0_vEESaIfEET0_T_S6_S5_RT1_>:
    __relocate_a_1(_InputIterator __first, _InputIterator __last,
 810df68:	b590      	push	{r4, r7, lr}
 810df6a:	b087      	sub	sp, #28
 810df6c:	af00      	add	r7, sp, #0
 810df6e:	60f8      	str	r0, [r7, #12]
 810df70:	60b9      	str	r1, [r7, #8]
 810df72:	607a      	str	r2, [r7, #4]
 810df74:	603b      	str	r3, [r7, #0]
      _ForwardIterator __cur = __result;
 810df76:	687b      	ldr	r3, [r7, #4]
 810df78:	617b      	str	r3, [r7, #20]
      for (; __first != __last; ++__first, (void)++__cur)
 810df7a:	e01a      	b.n	810dfb2 <_ZSt14__relocate_a_1IPfN9__gnu_cxx17__normal_iteratorIS0_vEESaIfEET0_T_S6_S5_RT1_+0x4a>
	std::__relocate_object_a(std::__addressof(*__cur),
 810df7c:	f107 0314 	add.w	r3, r7, #20
 810df80:	4618      	mov	r0, r3
 810df82:	f000 fa8f 	bl	810e4a4 <_ZNK9__gnu_cxx17__normal_iteratorIPfvEdeEv>
 810df86:	4603      	mov	r3, r0
 810df88:	4618      	mov	r0, r3
 810df8a:	f7ff fddf 	bl	810db4c <_ZSt11__addressofIfEPT_RS0_>
 810df8e:	4604      	mov	r4, r0
 810df90:	68f8      	ldr	r0, [r7, #12]
 810df92:	f7ff fddb 	bl	810db4c <_ZSt11__addressofIfEPT_RS0_>
 810df96:	4603      	mov	r3, r0
 810df98:	683a      	ldr	r2, [r7, #0]
 810df9a:	4619      	mov	r1, r3
 810df9c:	4620      	mov	r0, r4
 810df9e:	f000 fa8d 	bl	810e4bc <_ZSt19__relocate_object_aIffSaIfEEvPT_PT0_RT1_>
      for (; __first != __last; ++__first, (void)++__cur)
 810dfa2:	68fb      	ldr	r3, [r7, #12]
 810dfa4:	3304      	adds	r3, #4
 810dfa6:	60fb      	str	r3, [r7, #12]
 810dfa8:	f107 0314 	add.w	r3, r7, #20
 810dfac:	4618      	mov	r0, r3
 810dfae:	f000 fa69 	bl	810e484 <_ZN9__gnu_cxx17__normal_iteratorIPfvEppEv>
 810dfb2:	68fa      	ldr	r2, [r7, #12]
 810dfb4:	68bb      	ldr	r3, [r7, #8]
 810dfb6:	429a      	cmp	r2, r3
 810dfb8:	d1e0      	bne.n	810df7c <_ZSt14__relocate_a_1IPfN9__gnu_cxx17__normal_iteratorIS0_vEESaIfEET0_T_S6_S5_RT1_+0x14>
      return __cur;
 810dfba:	697b      	ldr	r3, [r7, #20]
    }
 810dfbc:	4618      	mov	r0, r3
 810dfbe:	371c      	adds	r7, #28
 810dfc0:	46bd      	mov	sp, r7
 810dfc2:	bd90      	pop	{r4, r7, pc}

0810dfc4 <_ZNK9__gnu_cxx17__normal_iteratorIPfvE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 810dfc4:	b480      	push	{r7}
 810dfc6:	b083      	sub	sp, #12
 810dfc8:	af00      	add	r7, sp, #0
 810dfca:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 810dfcc:	687b      	ldr	r3, [r7, #4]
 810dfce:	4618      	mov	r0, r3
 810dfd0:	370c      	adds	r7, #12
 810dfd2:	46bd      	mov	sp, r7
 810dfd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 810dfd8:	4770      	bx	lr

0810dfda <_ZNSt15__new_allocatorIfEC1ERKS0_>:
      __new_allocator(const __new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 810dfda:	b480      	push	{r7}
 810dfdc:	b083      	sub	sp, #12
 810dfde:	af00      	add	r7, sp, #0
 810dfe0:	6078      	str	r0, [r7, #4]
 810dfe2:	6039      	str	r1, [r7, #0]
 810dfe4:	687b      	ldr	r3, [r7, #4]
 810dfe6:	4618      	mov	r0, r3
 810dfe8:	370c      	adds	r7, #12
 810dfea:	46bd      	mov	sp, r7
 810dfec:	f85d 7b04 	ldr.w	r7, [sp], #4
 810dff0:	4770      	bx	lr

0810dff2 <_ZSt7forwardIRKfEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 810dff2:	b480      	push	{r7}
 810dff4:	b083      	sub	sp, #12
 810dff6:	af00      	add	r7, sp, #0
 810dff8:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 810dffa:	687b      	ldr	r3, [r7, #4]
 810dffc:	4618      	mov	r0, r3
 810dffe:	370c      	adds	r7, #12
 810e000:	46bd      	mov	sp, r7
 810e002:	f85d 7b04 	ldr.w	r7, [sp], #4
 810e006:	4770      	bx	lr

0810e008 <_ZSt12construct_atIfJRKfEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>:
    construct_at(_Tp* __location, _Args&&... __args)
 810e008:	b590      	push	{r4, r7, lr}
 810e00a:	b083      	sub	sp, #12
 810e00c:	af00      	add	r7, sp, #0
 810e00e:	6078      	str	r0, [r7, #4]
 810e010:	6039      	str	r1, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 810e012:	687b      	ldr	r3, [r7, #4]
 810e014:	4619      	mov	r1, r3
 810e016:	2004      	movs	r0, #4
 810e018:	f7f3 f978 	bl	810130c <_ZnwjPv>
 810e01c:	4604      	mov	r4, r0
 810e01e:	6838      	ldr	r0, [r7, #0]
 810e020:	f7ff ffe7 	bl	810dff2 <_ZSt7forwardIRKfEOT_RNSt16remove_referenceIS2_E4typeE>
 810e024:	4603      	mov	r3, r0
 810e026:	681b      	ldr	r3, [r3, #0]
 810e028:	6023      	str	r3, [r4, #0]
 810e02a:	4623      	mov	r3, r4
 810e02c:	4618      	mov	r0, r3
 810e02e:	370c      	adds	r7, #12
 810e030:	46bd      	mov	sp, r7
 810e032:	bd90      	pop	{r4, r7, pc}

0810e034 <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfET0_T_SA_S9_>:
    copy(_II __first, _II __last, _OI __result)
 810e034:	b590      	push	{r4, r7, lr}
 810e036:	b085      	sub	sp, #20
 810e038:	af00      	add	r7, sp, #0
 810e03a:	60f8      	str	r0, [r7, #12]
 810e03c:	60b9      	str	r1, [r7, #8]
 810e03e:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 810e040:	68f8      	ldr	r0, [r7, #12]
 810e042:	f000 fa56 	bl	810e4f2 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEET_S8_>
 810e046:	4604      	mov	r4, r0
 810e048:	68b8      	ldr	r0, [r7, #8]
 810e04a:	f000 fa52 	bl	810e4f2 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEET_S8_>
 810e04e:	4603      	mov	r3, r0
 810e050:	687a      	ldr	r2, [r7, #4]
 810e052:	4619      	mov	r1, r3
 810e054:	4620      	mov	r0, r4
 810e056:	f000 fa57 	bl	810e508 <_ZSt13__copy_move_aILb0EN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfET1_T0_SA_S9_>
 810e05a:	4603      	mov	r3, r0
    }
 810e05c:	4618      	mov	r0, r3
 810e05e:	3714      	adds	r7, #20
 810e060:	46bd      	mov	sp, r7
 810e062:	bd90      	pop	{r4, r7, pc}

0810e064 <_ZNKSt8__detail10_Synth3wayclIPfS2_EEDaRKT_RKT0_>:
	}

      template<typename _Tp, typename _Up>
	[[nodiscard]]
	constexpr auto
	operator()(const _Tp& __t, const _Up& __u) const
 810e064:	b480      	push	{r7}
 810e066:	b085      	sub	sp, #20
 810e068:	af00      	add	r7, sp, #0
 810e06a:	60f8      	str	r0, [r7, #12]
 810e06c:	60b9      	str	r1, [r7, #8]
 810e06e:	607a      	str	r2, [r7, #4]
	  { __t < __u } -> __boolean_testable;
	  { __u < __t } -> __boolean_testable;
	}
	{
	  if constexpr (three_way_comparable_with<_Tp, _Up>)
	    return __t <=> __u;
 810e070:	68bb      	ldr	r3, [r7, #8]
 810e072:	681a      	ldr	r2, [r3, #0]
 810e074:	687b      	ldr	r3, [r7, #4]
 810e076:	681b      	ldr	r3, [r3, #0]
 810e078:	429a      	cmp	r2, r3
 810e07a:	d009      	beq.n	810e090 <_ZNKSt8__detail10_Synth3wayclIPfS2_EEDaRKT_RKT0_+0x2c>
 810e07c:	68bb      	ldr	r3, [r7, #8]
 810e07e:	681a      	ldr	r2, [r3, #0]
 810e080:	687b      	ldr	r3, [r7, #4]
 810e082:	681b      	ldr	r3, [r3, #0]
 810e084:	429a      	cmp	r2, r3
 810e086:	d201      	bcs.n	810e08c <_ZNKSt8__detail10_Synth3wayclIPfS2_EEDaRKT_RKT0_+0x28>
 810e088:	23ff      	movs	r3, #255	@ 0xff
 810e08a:	e002      	b.n	810e092 <_ZNKSt8__detail10_Synth3wayclIPfS2_EEDaRKT_RKT0_+0x2e>
 810e08c:	2301      	movs	r3, #1
 810e08e:	e000      	b.n	810e092 <_ZNKSt8__detail10_Synth3wayclIPfS2_EEDaRKT_RKT0_+0x2e>
 810e090:	2300      	movs	r3, #0
	      else if (__u < __t)
		return weak_ordering::greater;
	      else
		return weak_ordering::equivalent;
	    }
	}
 810e092:	4618      	mov	r0, r3
 810e094:	3714      	adds	r7, #20
 810e096:	46bd      	mov	sp, r7
 810e098:	f85d 7b04 	ldr.w	r7, [sp], #4
 810e09c:	4770      	bx	lr
	...

0810e0a0 <_ZN9__gnu_cxxssIPfSt6vectorIfSaIfEEEEDTclL_ZNSt8__detail11__synth3wayEEcl7declvalIRT_EEcl7declvalIS7_EEEERKNS_17__normal_iteratorIS6_T0_EESD_>:
    operator<=>(const __normal_iterator<_Iterator, _Container>& __lhs,
 810e0a0:	b590      	push	{r4, r7, lr}
 810e0a2:	b083      	sub	sp, #12
 810e0a4:	af00      	add	r7, sp, #0
 810e0a6:	6078      	str	r0, [r7, #4]
 810e0a8:	6039      	str	r1, [r7, #0]
    { return std::__detail::__synth3way(__lhs.base(), __rhs.base()); }
 810e0aa:	6878      	ldr	r0, [r7, #4]
 810e0ac:	f7fe ff0c 	bl	810cec8 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEE4baseEv>
 810e0b0:	4604      	mov	r4, r0
 810e0b2:	6838      	ldr	r0, [r7, #0]
 810e0b4:	f7fe ff08 	bl	810cec8 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEE4baseEv>
 810e0b8:	4603      	mov	r3, r0
 810e0ba:	461a      	mov	r2, r3
 810e0bc:	4621      	mov	r1, r4
 810e0be:	4804      	ldr	r0, [pc, #16]	@ (810e0d0 <_ZN9__gnu_cxxssIPfSt6vectorIfSaIfEEEEDTclL_ZNSt8__detail11__synth3wayEEcl7declvalIRT_EEcl7declvalIS7_EEEERKNS_17__normal_iteratorIS6_T0_EESD_+0x30>)
 810e0c0:	f7ff ffd0 	bl	810e064 <_ZNKSt8__detail10_Synth3wayclIPfS2_EEDaRKT_RKT0_>
 810e0c4:	4603      	mov	r3, r0
 810e0c6:	4618      	mov	r0, r3
 810e0c8:	370c      	adds	r7, #12
 810e0ca:	46bd      	mov	sp, r7
 810e0cc:	bd90      	pop	{r4, r7, pc}
 810e0ce:	bf00      	nop
 810e0d0:	0812ae00 	.word	0x0812ae00

0810e0d4 <_ZSt13__heap_selectIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_T0_>:
    __heap_select(_RandomAccessIterator __first,
 810e0d4:	b590      	push	{r4, r7, lr}
 810e0d6:	b087      	sub	sp, #28
 810e0d8:	af00      	add	r7, sp, #0
 810e0da:	60f8      	str	r0, [r7, #12]
 810e0dc:	60b9      	str	r1, [r7, #8]
 810e0de:	607a      	str	r2, [r7, #4]
 810e0e0:	703b      	strb	r3, [r7, #0]
      std::__make_heap(__first, __middle, __comp);
 810e0e2:	463b      	mov	r3, r7
 810e0e4:	461a      	mov	r2, r3
 810e0e6:	68b9      	ldr	r1, [r7, #8]
 810e0e8:	68f8      	ldr	r0, [r7, #12]
 810e0ea:	f000 fa30 	bl	810e54e <_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_RT0_>
      for (_RandomAccessIterator __i = __middle; __i < __last; ++__i)
 810e0ee:	68bb      	ldr	r3, [r7, #8]
 810e0f0:	613b      	str	r3, [r7, #16]
 810e0f2:	e013      	b.n	810e11c <_ZSt13__heap_selectIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_T0_+0x48>
	if (__comp(__i, __first))
 810e0f4:	463b      	mov	r3, r7
 810e0f6:	68fa      	ldr	r2, [r7, #12]
 810e0f8:	6939      	ldr	r1, [r7, #16]
 810e0fa:	4618      	mov	r0, r3
 810e0fc:	f000 f8f7 	bl	810e2ee <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPfSt6vectorIfSaIfEEEES8_EEbT_T0_>
 810e100:	4603      	mov	r3, r0
 810e102:	2b00      	cmp	r3, #0
 810e104:	d005      	beq.n	810e112 <_ZSt13__heap_selectIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_T0_+0x3e>
	  std::__pop_heap(__first, __middle, __i, __comp);
 810e106:	463b      	mov	r3, r7
 810e108:	693a      	ldr	r2, [r7, #16]
 810e10a:	68b9      	ldr	r1, [r7, #8]
 810e10c:	68f8      	ldr	r0, [r7, #12]
 810e10e:	f000 fa74 	bl	810e5fa <_ZSt10__pop_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_RT0_>
      for (_RandomAccessIterator __i = __middle; __i < __last; ++__i)
 810e112:	f107 0310 	add.w	r3, r7, #16
 810e116:	4618      	mov	r0, r3
 810e118:	f7ff fc2a 	bl	810d970 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEppEv>
 810e11c:	1d3a      	adds	r2, r7, #4
 810e11e:	f107 0310 	add.w	r3, r7, #16
 810e122:	4611      	mov	r1, r2
 810e124:	4618      	mov	r0, r3
 810e126:	f7ff ffbb 	bl	810e0a0 <_ZN9__gnu_cxxssIPfSt6vectorIfSaIfEEEEDTclL_ZNSt8__detail11__synth3wayEEcl7declvalIRT_EEcl7declvalIS7_EEEERKNS_17__normal_iteratorIS6_T0_EESD_>
 810e12a:	4604      	mov	r4, r0
 810e12c:	f107 0314 	add.w	r3, r7, #20
 810e130:	2100      	movs	r1, #0
 810e132:	4618      	mov	r0, r3
 810e134:	f7fe fa07 	bl	810c546 <_ZNSt9__cmp_cat8__unspecC1EPS0_>
 810e138:	7d39      	ldrb	r1, [r7, #20]
 810e13a:	4620      	mov	r0, r4
 810e13c:	f7fe fa0f 	bl	810c55e <_ZStltSt15strong_orderingNSt9__cmp_cat8__unspecE>
 810e140:	4603      	mov	r3, r0
 810e142:	2b00      	cmp	r3, #0
 810e144:	d1d6      	bne.n	810e0f4 <_ZSt13__heap_selectIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_T0_+0x20>
    }
 810e146:	bf00      	nop
 810e148:	bf00      	nop
 810e14a:	371c      	adds	r7, #28
 810e14c:	46bd      	mov	sp, r7
 810e14e:	bd90      	pop	{r4, r7, pc}

0810e150 <_ZSt11__sort_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_RT0_>:
    }

  template<typename _RandomAccessIterator, typename _Compare>
    _GLIBCXX20_CONSTEXPR
    void
    __sort_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
 810e150:	b580      	push	{r7, lr}
 810e152:	b084      	sub	sp, #16
 810e154:	af00      	add	r7, sp, #0
 810e156:	60f8      	str	r0, [r7, #12]
 810e158:	60b9      	str	r1, [r7, #8]
 810e15a:	607a      	str	r2, [r7, #4]
		_Compare& __comp)
    {
      while (__last - __first > 1)
 810e15c:	e00a      	b.n	810e174 <_ZSt11__sort_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_RT0_+0x24>
	{
	  --__last;
 810e15e:	f107 0308 	add.w	r3, r7, #8
 810e162:	4618      	mov	r0, r3
 810e164:	f7ff fc4b 	bl	810d9fe <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEmmEv>
	  std::__pop_heap(__first, __last, __last, __comp);
 810e168:	687b      	ldr	r3, [r7, #4]
 810e16a:	68ba      	ldr	r2, [r7, #8]
 810e16c:	68b9      	ldr	r1, [r7, #8]
 810e16e:	68f8      	ldr	r0, [r7, #12]
 810e170:	f000 fa43 	bl	810e5fa <_ZSt10__pop_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_RT0_>
      while (__last - __first > 1)
 810e174:	f107 020c 	add.w	r2, r7, #12
 810e178:	f107 0308 	add.w	r3, r7, #8
 810e17c:	4611      	mov	r1, r2
 810e17e:	4618      	mov	r0, r3
 810e180:	f7fe fead 	bl	810cede <_ZN9__gnu_cxxmiIPfSt6vectorIfSaIfEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 810e184:	4603      	mov	r3, r0
 810e186:	2b01      	cmp	r3, #1
 810e188:	bfcc      	ite	gt
 810e18a:	2301      	movgt	r3, #1
 810e18c:	2300      	movle	r3, #0
 810e18e:	b2db      	uxtb	r3, r3
 810e190:	2b00      	cmp	r3, #0
 810e192:	d1e4      	bne.n	810e15e <_ZSt11__sort_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_RT0_+0xe>
	}
    }
 810e194:	bf00      	nop
 810e196:	bf00      	nop
 810e198:	3710      	adds	r7, #16
 810e19a:	46bd      	mov	sp, r7
 810e19c:	bd80      	pop	{r7, pc}

0810e19e <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_S9_T0_>:
    __move_median_to_first(_Iterator __result,_Iterator __a, _Iterator __b,
 810e19e:	b580      	push	{r7, lr}
 810e1a0:	b084      	sub	sp, #16
 810e1a2:	af00      	add	r7, sp, #0
 810e1a4:	60f8      	str	r0, [r7, #12]
 810e1a6:	60b9      	str	r1, [r7, #8]
 810e1a8:	607a      	str	r2, [r7, #4]
 810e1aa:	603b      	str	r3, [r7, #0]
      if (__comp(__a, __b))
 810e1ac:	687a      	ldr	r2, [r7, #4]
 810e1ae:	68b9      	ldr	r1, [r7, #8]
 810e1b0:	f107 0018 	add.w	r0, r7, #24
 810e1b4:	f000 f89b 	bl	810e2ee <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPfSt6vectorIfSaIfEEEES8_EEbT_T0_>
 810e1b8:	4603      	mov	r3, r0
 810e1ba:	2b00      	cmp	r3, #0
 810e1bc:	d020      	beq.n	810e200 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_S9_T0_+0x62>
	  if (__comp(__b, __c))
 810e1be:	683a      	ldr	r2, [r7, #0]
 810e1c0:	6879      	ldr	r1, [r7, #4]
 810e1c2:	f107 0018 	add.w	r0, r7, #24
 810e1c6:	f000 f892 	bl	810e2ee <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPfSt6vectorIfSaIfEEEES8_EEbT_T0_>
 810e1ca:	4603      	mov	r3, r0
 810e1cc:	2b00      	cmp	r3, #0
 810e1ce:	d004      	beq.n	810e1da <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_S9_T0_+0x3c>
	    std::iter_swap(__result, __b);
 810e1d0:	6879      	ldr	r1, [r7, #4]
 810e1d2:	68f8      	ldr	r0, [r7, #12]
 810e1d4:	f7ff fbb5 	bl	810d942 <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_EvT_T0_>
    }
 810e1d8:	e032      	b.n	810e240 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_S9_T0_+0xa2>
	  else if (__comp(__a, __c))
 810e1da:	683a      	ldr	r2, [r7, #0]
 810e1dc:	68b9      	ldr	r1, [r7, #8]
 810e1de:	f107 0018 	add.w	r0, r7, #24
 810e1e2:	f000 f884 	bl	810e2ee <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPfSt6vectorIfSaIfEEEES8_EEbT_T0_>
 810e1e6:	4603      	mov	r3, r0
 810e1e8:	2b00      	cmp	r3, #0
 810e1ea:	d004      	beq.n	810e1f6 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_S9_T0_+0x58>
	    std::iter_swap(__result, __c);
 810e1ec:	6839      	ldr	r1, [r7, #0]
 810e1ee:	68f8      	ldr	r0, [r7, #12]
 810e1f0:	f7ff fba7 	bl	810d942 <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_EvT_T0_>
    }
 810e1f4:	e024      	b.n	810e240 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_S9_T0_+0xa2>
	    std::iter_swap(__result, __a);
 810e1f6:	68b9      	ldr	r1, [r7, #8]
 810e1f8:	68f8      	ldr	r0, [r7, #12]
 810e1fa:	f7ff fba2 	bl	810d942 <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_EvT_T0_>
    }
 810e1fe:	e01f      	b.n	810e240 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_S9_T0_+0xa2>
      else if (__comp(__a, __c))
 810e200:	683a      	ldr	r2, [r7, #0]
 810e202:	68b9      	ldr	r1, [r7, #8]
 810e204:	f107 0018 	add.w	r0, r7, #24
 810e208:	f000 f871 	bl	810e2ee <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPfSt6vectorIfSaIfEEEES8_EEbT_T0_>
 810e20c:	4603      	mov	r3, r0
 810e20e:	2b00      	cmp	r3, #0
 810e210:	d004      	beq.n	810e21c <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_S9_T0_+0x7e>
	std::iter_swap(__result, __a);
 810e212:	68b9      	ldr	r1, [r7, #8]
 810e214:	68f8      	ldr	r0, [r7, #12]
 810e216:	f7ff fb94 	bl	810d942 <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_EvT_T0_>
    }
 810e21a:	e011      	b.n	810e240 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_S9_T0_+0xa2>
      else if (__comp(__b, __c))
 810e21c:	683a      	ldr	r2, [r7, #0]
 810e21e:	6879      	ldr	r1, [r7, #4]
 810e220:	f107 0018 	add.w	r0, r7, #24
 810e224:	f000 f863 	bl	810e2ee <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPfSt6vectorIfSaIfEEEES8_EEbT_T0_>
 810e228:	4603      	mov	r3, r0
 810e22a:	2b00      	cmp	r3, #0
 810e22c:	d004      	beq.n	810e238 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_S9_T0_+0x9a>
	std::iter_swap(__result, __c);
 810e22e:	6839      	ldr	r1, [r7, #0]
 810e230:	68f8      	ldr	r0, [r7, #12]
 810e232:	f7ff fb86 	bl	810d942 <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_EvT_T0_>
    }
 810e236:	e003      	b.n	810e240 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_S9_T0_+0xa2>
	std::iter_swap(__result, __b);
 810e238:	6879      	ldr	r1, [r7, #4]
 810e23a:	68f8      	ldr	r0, [r7, #12]
 810e23c:	f7ff fb81 	bl	810d942 <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_EvT_T0_>
    }
 810e240:	bf00      	nop
 810e242:	3710      	adds	r7, #16
 810e244:	46bd      	mov	sp, r7
 810e246:	bd80      	pop	{r7, pc}

0810e248 <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEET_S9_S9_S9_T0_>:
    __unguarded_partition(_RandomAccessIterator __first,
 810e248:	b590      	push	{r4, r7, lr}
 810e24a:	b087      	sub	sp, #28
 810e24c:	af00      	add	r7, sp, #0
 810e24e:	60f8      	str	r0, [r7, #12]
 810e250:	60b9      	str	r1, [r7, #8]
 810e252:	607a      	str	r2, [r7, #4]
 810e254:	703b      	strb	r3, [r7, #0]
	  while (__comp(__first, __pivot))
 810e256:	e004      	b.n	810e262 <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEET_S9_S9_S9_T0_+0x1a>
	    ++__first;
 810e258:	f107 030c 	add.w	r3, r7, #12
 810e25c:	4618      	mov	r0, r3
 810e25e:	f7ff fb87 	bl	810d970 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEppEv>
	  while (__comp(__first, __pivot))
 810e262:	463b      	mov	r3, r7
 810e264:	687a      	ldr	r2, [r7, #4]
 810e266:	68f9      	ldr	r1, [r7, #12]
 810e268:	4618      	mov	r0, r3
 810e26a:	f000 f840 	bl	810e2ee <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPfSt6vectorIfSaIfEEEES8_EEbT_T0_>
 810e26e:	4603      	mov	r3, r0
 810e270:	2b00      	cmp	r3, #0
 810e272:	d1f1      	bne.n	810e258 <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEET_S9_S9_S9_T0_+0x10>
	  --__last;
 810e274:	f107 0308 	add.w	r3, r7, #8
 810e278:	4618      	mov	r0, r3
 810e27a:	f7ff fbc0 	bl	810d9fe <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEmmEv>
	  while (__comp(__pivot, __last))
 810e27e:	e004      	b.n	810e28a <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEET_S9_S9_S9_T0_+0x42>
	    --__last;
 810e280:	f107 0308 	add.w	r3, r7, #8
 810e284:	4618      	mov	r0, r3
 810e286:	f7ff fbba 	bl	810d9fe <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEmmEv>
	  while (__comp(__pivot, __last))
 810e28a:	463b      	mov	r3, r7
 810e28c:	68ba      	ldr	r2, [r7, #8]
 810e28e:	6879      	ldr	r1, [r7, #4]
 810e290:	4618      	mov	r0, r3
 810e292:	f000 f82c 	bl	810e2ee <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPfSt6vectorIfSaIfEEEES8_EEbT_T0_>
 810e296:	4603      	mov	r3, r0
 810e298:	2b00      	cmp	r3, #0
 810e29a:	d1f1      	bne.n	810e280 <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEET_S9_S9_S9_T0_+0x38>
	  if (!(__first < __last))
 810e29c:	f107 0208 	add.w	r2, r7, #8
 810e2a0:	f107 030c 	add.w	r3, r7, #12
 810e2a4:	4611      	mov	r1, r2
 810e2a6:	4618      	mov	r0, r3
 810e2a8:	f7ff fefa 	bl	810e0a0 <_ZN9__gnu_cxxssIPfSt6vectorIfSaIfEEEEDTclL_ZNSt8__detail11__synth3wayEEcl7declvalIRT_EEcl7declvalIS7_EEEERKNS_17__normal_iteratorIS6_T0_EESD_>
 810e2ac:	4604      	mov	r4, r0
 810e2ae:	f107 0314 	add.w	r3, r7, #20
 810e2b2:	2100      	movs	r1, #0
 810e2b4:	4618      	mov	r0, r3
 810e2b6:	f7fe f946 	bl	810c546 <_ZNSt9__cmp_cat8__unspecC1EPS0_>
 810e2ba:	7d39      	ldrb	r1, [r7, #20]
 810e2bc:	4620      	mov	r0, r4
 810e2be:	f7fe f94e 	bl	810c55e <_ZStltSt15strong_orderingNSt9__cmp_cat8__unspecE>
 810e2c2:	4603      	mov	r3, r0
 810e2c4:	f083 0301 	eor.w	r3, r3, #1
 810e2c8:	b2db      	uxtb	r3, r3
 810e2ca:	2b00      	cmp	r3, #0
 810e2cc:	d001      	beq.n	810e2d2 <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEET_S9_S9_S9_T0_+0x8a>
	    return __first;
 810e2ce:	68fb      	ldr	r3, [r7, #12]
 810e2d0:	e009      	b.n	810e2e6 <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEET_S9_S9_S9_T0_+0x9e>
	  std::iter_swap(__first, __last);
 810e2d2:	68b9      	ldr	r1, [r7, #8]
 810e2d4:	68f8      	ldr	r0, [r7, #12]
 810e2d6:	f7ff fb34 	bl	810d942 <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_EvT_T0_>
	  ++__first;
 810e2da:	f107 030c 	add.w	r3, r7, #12
 810e2de:	4618      	mov	r0, r3
 810e2e0:	f7ff fb46 	bl	810d970 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEppEv>
	  while (__comp(__first, __pivot))
 810e2e4:	e7bd      	b.n	810e262 <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEET_S9_S9_S9_T0_+0x1a>
    }
 810e2e6:	4618      	mov	r0, r3
 810e2e8:	371c      	adds	r7, #28
 810e2ea:	46bd      	mov	sp, r7
 810e2ec:	bd90      	pop	{r4, r7, pc}

0810e2ee <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPfSt6vectorIfSaIfEEEES8_EEbT_T0_>:
      operator()(_Iterator1 __it1, _Iterator2 __it2) const
 810e2ee:	b580      	push	{r7, lr}
 810e2f0:	ed2d 8b02 	vpush	{d8}
 810e2f4:	b084      	sub	sp, #16
 810e2f6:	af00      	add	r7, sp, #0
 810e2f8:	60f8      	str	r0, [r7, #12]
 810e2fa:	60b9      	str	r1, [r7, #8]
 810e2fc:	607a      	str	r2, [r7, #4]
      { return *__it1 < *__it2; }
 810e2fe:	f107 0308 	add.w	r3, r7, #8
 810e302:	4618      	mov	r0, r3
 810e304:	f7ff fae0 	bl	810d8c8 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 810e308:	4603      	mov	r3, r0
 810e30a:	ed93 8a00 	vldr	s16, [r3]
 810e30e:	1d3b      	adds	r3, r7, #4
 810e310:	4618      	mov	r0, r3
 810e312:	f7ff fad9 	bl	810d8c8 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 810e316:	4603      	mov	r3, r0
 810e318:	edd3 7a00 	vldr	s15, [r3]
 810e31c:	eeb4 8ae7 	vcmpe.f32	s16, s15
 810e320:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810e324:	bf4c      	ite	mi
 810e326:	2301      	movmi	r3, #1
 810e328:	2300      	movpl	r3, #0
 810e32a:	b2db      	uxtb	r3, r3
 810e32c:	4618      	mov	r0, r3
 810e32e:	3710      	adds	r7, #16
 810e330:	46bd      	mov	sp, r7
 810e332:	ecbd 8b02 	vpop	{d8}
 810e336:	bd80      	pop	{r7, pc}

0810e338 <_ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops14_Val_less_iterEEvT_T0_>:
    __unguarded_linear_insert(_RandomAccessIterator __last,
 810e338:	b590      	push	{r4, r7, lr}
 810e33a:	b085      	sub	sp, #20
 810e33c:	af00      	add	r7, sp, #0
 810e33e:	6078      	str	r0, [r7, #4]
 810e340:	7039      	strb	r1, [r7, #0]
	__val = _GLIBCXX_MOVE(*__last);
 810e342:	1d3b      	adds	r3, r7, #4
 810e344:	4618      	mov	r0, r3
 810e346:	f7ff fabf 	bl	810d8c8 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 810e34a:	4603      	mov	r3, r0
 810e34c:	4618      	mov	r0, r3
 810e34e:	f7fe fe0b 	bl	810cf68 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 810e352:	4603      	mov	r3, r0
 810e354:	681b      	ldr	r3, [r3, #0]
 810e356:	60fb      	str	r3, [r7, #12]
      _RandomAccessIterator __next = __last;
 810e358:	687b      	ldr	r3, [r7, #4]
 810e35a:	60bb      	str	r3, [r7, #8]
      --__next;
 810e35c:	f107 0308 	add.w	r3, r7, #8
 810e360:	4618      	mov	r0, r3
 810e362:	f7ff fb4c 	bl	810d9fe <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEmmEv>
      while (__comp(__val, __next))
 810e366:	e017      	b.n	810e398 <_ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops14_Val_less_iterEEvT_T0_+0x60>
	  *__last = _GLIBCXX_MOVE(*__next);
 810e368:	f107 0308 	add.w	r3, r7, #8
 810e36c:	4618      	mov	r0, r3
 810e36e:	f7ff faab 	bl	810d8c8 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 810e372:	4603      	mov	r3, r0
 810e374:	4618      	mov	r0, r3
 810e376:	f7fe fdf7 	bl	810cf68 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 810e37a:	4603      	mov	r3, r0
 810e37c:	681c      	ldr	r4, [r3, #0]
 810e37e:	1d3b      	adds	r3, r7, #4
 810e380:	4618      	mov	r0, r3
 810e382:	f7ff faa1 	bl	810d8c8 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 810e386:	4603      	mov	r3, r0
 810e388:	601c      	str	r4, [r3, #0]
	  __last = __next;
 810e38a:	68bb      	ldr	r3, [r7, #8]
 810e38c:	607b      	str	r3, [r7, #4]
	  --__next;
 810e38e:	f107 0308 	add.w	r3, r7, #8
 810e392:	4618      	mov	r0, r3
 810e394:	f7ff fb33 	bl	810d9fe <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEmmEv>
      while (__comp(__val, __next))
 810e398:	f107 010c 	add.w	r1, r7, #12
 810e39c:	463b      	mov	r3, r7
 810e39e:	68ba      	ldr	r2, [r7, #8]
 810e3a0:	4618      	mov	r0, r3
 810e3a2:	f000 f96a 	bl	810e67a <_ZNK9__gnu_cxx5__ops14_Val_less_iterclIfNS_17__normal_iteratorIPfSt6vectorIfSaIfEEEEEEbRT_T0_>
 810e3a6:	4603      	mov	r3, r0
 810e3a8:	2b00      	cmp	r3, #0
 810e3aa:	d1dd      	bne.n	810e368 <_ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops14_Val_less_iterEEvT_T0_+0x30>
      *__last = _GLIBCXX_MOVE(__val);
 810e3ac:	f107 030c 	add.w	r3, r7, #12
 810e3b0:	4618      	mov	r0, r3
 810e3b2:	f7fe fdd9 	bl	810cf68 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 810e3b6:	4603      	mov	r3, r0
 810e3b8:	681c      	ldr	r4, [r3, #0]
 810e3ba:	1d3b      	adds	r3, r7, #4
 810e3bc:	4618      	mov	r0, r3
 810e3be:	f7ff fa83 	bl	810d8c8 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 810e3c2:	4603      	mov	r3, r0
 810e3c4:	601c      	str	r4, [r3, #0]
    }
 810e3c6:	bf00      	nop
 810e3c8:	3714      	adds	r7, #20
 810e3ca:	46bd      	mov	sp, r7
 810e3cc:	bd90      	pop	{r4, r7, pc}

0810e3ce <_ZSt10destroy_atIfEvPT_>:
    destroy_at(_Tp* __location)
 810e3ce:	b480      	push	{r7}
 810e3d0:	b083      	sub	sp, #12
 810e3d2:	af00      	add	r7, sp, #0
 810e3d4:	6078      	str	r0, [r7, #4]
    }
 810e3d6:	bf00      	nop
 810e3d8:	370c      	adds	r7, #12
 810e3da:	46bd      	mov	sp, r7
 810e3dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 810e3e0:	4770      	bx	lr

0810e3e2 <_ZSt12__niter_baseIPfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>:
_GLIBCXX_BEGIN_NAMESPACE_VERSION

  template<typename _Iterator, typename _Container>
    _GLIBCXX20_CONSTEXPR
    _Iterator
    __niter_base(__gnu_cxx::__normal_iterator<_Iterator, _Container> __it)
 810e3e2:	b580      	push	{r7, lr}
 810e3e4:	b082      	sub	sp, #8
 810e3e6:	af00      	add	r7, sp, #0
 810e3e8:	6078      	str	r0, [r7, #4]
    _GLIBCXX_NOEXCEPT_IF(std::is_nothrow_copy_constructible<_Iterator>::value)
    { return __it.base(); }
 810e3ea:	1d3b      	adds	r3, r7, #4
 810e3ec:	4618      	mov	r0, r3
 810e3ee:	f7fe fd6b 	bl	810cec8 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEE4baseEv>
 810e3f2:	4603      	mov	r3, r0
 810e3f4:	681b      	ldr	r3, [r3, #0]
 810e3f6:	4618      	mov	r0, r3
 810e3f8:	3708      	adds	r7, #8
 810e3fa:	46bd      	mov	sp, r7
 810e3fc:	bd80      	pop	{r7, pc}

0810e3fe <_ZSt14__copy_move_a1ILb1EPfS0_ET1_T0_S2_S1_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 810e3fe:	b580      	push	{r7, lr}
 810e400:	b084      	sub	sp, #16
 810e402:	af00      	add	r7, sp, #0
 810e404:	60f8      	str	r0, [r7, #12]
 810e406:	60b9      	str	r1, [r7, #8]
 810e408:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 810e40a:	687a      	ldr	r2, [r7, #4]
 810e40c:	68b9      	ldr	r1, [r7, #8]
 810e40e:	68f8      	ldr	r0, [r7, #12]
 810e410:	f000 f953 	bl	810e6ba <_ZSt14__copy_move_a2ILb1EPfS0_ET1_T0_S2_S1_>
 810e414:	4603      	mov	r3, r0
 810e416:	4618      	mov	r0, r3
 810e418:	3710      	adds	r7, #16
 810e41a:	46bd      	mov	sp, r7
 810e41c:	bd80      	pop	{r7, pc}

0810e41e <_ZSt12__niter_wrapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES2_ET_S7_T0_>:
    __niter_wrap(_From __from, _To __res)
 810e41e:	b580      	push	{r7, lr}
 810e420:	b082      	sub	sp, #8
 810e422:	af00      	add	r7, sp, #0
 810e424:	6078      	str	r0, [r7, #4]
 810e426:	6039      	str	r1, [r7, #0]
    { return __from + (__res - std::__niter_base(__from)); }
 810e428:	6878      	ldr	r0, [r7, #4]
 810e42a:	f7ff ffda 	bl	810e3e2 <_ZSt12__niter_baseIPfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>
 810e42e:	4602      	mov	r2, r0
 810e430:	683b      	ldr	r3, [r7, #0]
 810e432:	1a9b      	subs	r3, r3, r2
 810e434:	109b      	asrs	r3, r3, #2
 810e436:	461a      	mov	r2, r3
 810e438:	1d3b      	adds	r3, r7, #4
 810e43a:	4611      	mov	r1, r2
 810e43c:	4618      	mov	r0, r3
 810e43e:	f7fe fbee 	bl	810cc1e <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 810e442:	4603      	mov	r3, r0
 810e444:	4618      	mov	r0, r3
 810e446:	3708      	adds	r7, #8
 810e448:	46bd      	mov	sp, r7
 810e44a:	bd80      	pop	{r7, pc}

0810e44c <_ZSt23__copy_move_backward_a1ILb1EPfS0_ET1_T0_S2_S1_>:
    __copy_move_backward_a1(_BI1 __first, _BI1 __last, _BI2 __result)
 810e44c:	b580      	push	{r7, lr}
 810e44e:	b084      	sub	sp, #16
 810e450:	af00      	add	r7, sp, #0
 810e452:	60f8      	str	r0, [r7, #12]
 810e454:	60b9      	str	r1, [r7, #8]
 810e456:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_backward_a2<_IsMove>(__first, __last, __result); }
 810e458:	687a      	ldr	r2, [r7, #4]
 810e45a:	68b9      	ldr	r1, [r7, #8]
 810e45c:	68f8      	ldr	r0, [r7, #12]
 810e45e:	f000 f949 	bl	810e6f4 <_ZSt23__copy_move_backward_a2ILb1EPfS0_ET1_T0_S2_S1_>
 810e462:	4603      	mov	r3, r0
 810e464:	4618      	mov	r0, r3
 810e466:	3710      	adds	r7, #16
 810e468:	46bd      	mov	sp, r7
 810e46a:	bd80      	pop	{r7, pc}

0810e46c <_ZNKSt15__new_allocatorIfE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 810e46c:	b480      	push	{r7}
 810e46e:	b083      	sub	sp, #12
 810e470:	af00      	add	r7, sp, #0
 810e472:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 810e474:	f06f 4360 	mvn.w	r3, #3758096384	@ 0xe0000000
      }
 810e478:	4618      	mov	r0, r3
 810e47a:	370c      	adds	r7, #12
 810e47c:	46bd      	mov	sp, r7
 810e47e:	f85d 7b04 	ldr.w	r7, [sp], #4
 810e482:	4770      	bx	lr

0810e484 <_ZN9__gnu_cxx17__normal_iteratorIPfvEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 810e484:	b480      	push	{r7}
 810e486:	b083      	sub	sp, #12
 810e488:	af00      	add	r7, sp, #0
 810e48a:	6078      	str	r0, [r7, #4]
	++_M_current;
 810e48c:	687b      	ldr	r3, [r7, #4]
 810e48e:	681b      	ldr	r3, [r3, #0]
 810e490:	1d1a      	adds	r2, r3, #4
 810e492:	687b      	ldr	r3, [r7, #4]
 810e494:	601a      	str	r2, [r3, #0]
	return *this;
 810e496:	687b      	ldr	r3, [r7, #4]
      }
 810e498:	4618      	mov	r0, r3
 810e49a:	370c      	adds	r7, #12
 810e49c:	46bd      	mov	sp, r7
 810e49e:	f85d 7b04 	ldr.w	r7, [sp], #4
 810e4a2:	4770      	bx	lr

0810e4a4 <_ZNK9__gnu_cxx17__normal_iteratorIPfvEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 810e4a4:	b480      	push	{r7}
 810e4a6:	b083      	sub	sp, #12
 810e4a8:	af00      	add	r7, sp, #0
 810e4aa:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 810e4ac:	687b      	ldr	r3, [r7, #4]
 810e4ae:	681b      	ldr	r3, [r3, #0]
 810e4b0:	4618      	mov	r0, r3
 810e4b2:	370c      	adds	r7, #12
 810e4b4:	46bd      	mov	sp, r7
 810e4b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 810e4ba:	4770      	bx	lr

0810e4bc <_ZSt19__relocate_object_aIffSaIfEEvPT_PT0_RT1_>:
    __relocate_object_a(_Tp* __restrict __dest, _Up* __restrict __orig,
 810e4bc:	b580      	push	{r7, lr}
 810e4be:	b084      	sub	sp, #16
 810e4c0:	af00      	add	r7, sp, #0
 810e4c2:	60f8      	str	r0, [r7, #12]
 810e4c4:	60b9      	str	r1, [r7, #8]
 810e4c6:	607a      	str	r2, [r7, #4]
      __traits::construct(__alloc, __dest, std::move(*__orig));
 810e4c8:	68b8      	ldr	r0, [r7, #8]
 810e4ca:	f7fe fd4d 	bl	810cf68 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 810e4ce:	4603      	mov	r3, r0
 810e4d0:	461a      	mov	r2, r3
 810e4d2:	68f9      	ldr	r1, [r7, #12]
 810e4d4:	6878      	ldr	r0, [r7, #4]
 810e4d6:	f7ff f8e0 	bl	810d69a <_ZNSt16allocator_traitsISaIfEE9constructIfJfEEEvRS0_PT_DpOT0_>
      __traits::destroy(__alloc, std::__addressof(*__orig));
 810e4da:	68b8      	ldr	r0, [r7, #8]
 810e4dc:	f7ff fb36 	bl	810db4c <_ZSt11__addressofIfEPT_RS0_>
 810e4e0:	4603      	mov	r3, r0
 810e4e2:	4619      	mov	r1, r3
 810e4e4:	6878      	ldr	r0, [r7, #4]
 810e4e6:	f7ff fc78 	bl	810ddda <_ZNSt16allocator_traitsISaIfEE7destroyIfEEvRS0_PT_>
    }
 810e4ea:	bf00      	nop
 810e4ec:	3710      	adds	r7, #16
 810e4ee:	46bd      	mov	sp, r7
 810e4f0:	bd80      	pop	{r7, pc}

0810e4f2 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEET_S8_>:
    __miter_base(_Iterator __it)
 810e4f2:	b480      	push	{r7}
 810e4f4:	b083      	sub	sp, #12
 810e4f6:	af00      	add	r7, sp, #0
 810e4f8:	6078      	str	r0, [r7, #4]
    { return __it; }
 810e4fa:	687b      	ldr	r3, [r7, #4]
 810e4fc:	4618      	mov	r0, r3
 810e4fe:	370c      	adds	r7, #12
 810e500:	46bd      	mov	sp, r7
 810e502:	f85d 7b04 	ldr.w	r7, [sp], #4
 810e506:	4770      	bx	lr

0810e508 <_ZSt13__copy_move_aILb0EN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfET1_T0_SA_S9_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 810e508:	b5b0      	push	{r4, r5, r7, lr}
 810e50a:	b084      	sub	sp, #16
 810e50c:	af00      	add	r7, sp, #0
 810e50e:	60f8      	str	r0, [r7, #12]
 810e510:	60b9      	str	r1, [r7, #8]
 810e512:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 810e514:	68f8      	ldr	r0, [r7, #12]
 810e516:	f000 f90a 	bl	810e72e <_ZSt12__niter_baseIPKfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 810e51a:	4604      	mov	r4, r0
 810e51c:	68b8      	ldr	r0, [r7, #8]
 810e51e:	f000 f906 	bl	810e72e <_ZSt12__niter_baseIPKfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 810e522:	4605      	mov	r5, r0
 810e524:	687b      	ldr	r3, [r7, #4]
 810e526:	4618      	mov	r0, r3
 810e528:	f7ff fa9d 	bl	810da66 <_ZSt12__niter_baseIPfET_S1_>
 810e52c:	4603      	mov	r3, r0
 810e52e:	461a      	mov	r2, r3
 810e530:	4629      	mov	r1, r5
 810e532:	4620      	mov	r0, r4
 810e534:	f000 f909 	bl	810e74a <_ZSt14__copy_move_a1ILb0EPKfPfET1_T0_S4_S3_>
 810e538:	4602      	mov	r2, r0
 810e53a:	1d3b      	adds	r3, r7, #4
 810e53c:	4611      	mov	r1, r2
 810e53e:	4618      	mov	r0, r3
 810e540:	f000 f913 	bl	810e76a <_ZSt12__niter_wrapIPfET_RKS1_S1_>
 810e544:	4603      	mov	r3, r0
    }
 810e546:	4618      	mov	r0, r3
 810e548:	3710      	adds	r7, #16
 810e54a:	46bd      	mov	sp, r7
 810e54c:	bdb0      	pop	{r4, r5, r7, pc}

0810e54e <_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_RT0_>:
    __make_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
 810e54e:	b590      	push	{r4, r7, lr}
 810e550:	b089      	sub	sp, #36	@ 0x24
 810e552:	af00      	add	r7, sp, #0
 810e554:	60f8      	str	r0, [r7, #12]
 810e556:	60b9      	str	r1, [r7, #8]
 810e558:	607a      	str	r2, [r7, #4]
      if (__last - __first < 2)
 810e55a:	f107 020c 	add.w	r2, r7, #12
 810e55e:	f107 0308 	add.w	r3, r7, #8
 810e562:	4611      	mov	r1, r2
 810e564:	4618      	mov	r0, r3
 810e566:	f7fe fcba 	bl	810cede <_ZN9__gnu_cxxmiIPfSt6vectorIfSaIfEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 810e56a:	4603      	mov	r3, r0
 810e56c:	2b01      	cmp	r3, #1
 810e56e:	bfd4      	ite	le
 810e570:	2301      	movle	r3, #1
 810e572:	2300      	movgt	r3, #0
 810e574:	b2db      	uxtb	r3, r3
 810e576:	2b00      	cmp	r3, #0
 810e578:	d139      	bne.n	810e5ee <_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_RT0_+0xa0>
      const _DistanceType __len = __last - __first;
 810e57a:	f107 020c 	add.w	r2, r7, #12
 810e57e:	f107 0308 	add.w	r3, r7, #8
 810e582:	4611      	mov	r1, r2
 810e584:	4618      	mov	r0, r3
 810e586:	f7fe fcaa 	bl	810cede <_ZN9__gnu_cxxmiIPfSt6vectorIfSaIfEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 810e58a:	61b8      	str	r0, [r7, #24]
      _DistanceType __parent = (__len - 2) / 2;
 810e58c:	69bb      	ldr	r3, [r7, #24]
 810e58e:	3b02      	subs	r3, #2
 810e590:	0fda      	lsrs	r2, r3, #31
 810e592:	4413      	add	r3, r2
 810e594:	105b      	asrs	r3, r3, #1
 810e596:	61fb      	str	r3, [r7, #28]
	  _ValueType __value = _GLIBCXX_MOVE(*(__first + __parent));
 810e598:	f107 030c 	add.w	r3, r7, #12
 810e59c:	69f9      	ldr	r1, [r7, #28]
 810e59e:	4618      	mov	r0, r3
 810e5a0:	f7fe fb3d 	bl	810cc1e <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 810e5a4:	4603      	mov	r3, r0
 810e5a6:	617b      	str	r3, [r7, #20]
 810e5a8:	f107 0314 	add.w	r3, r7, #20
 810e5ac:	4618      	mov	r0, r3
 810e5ae:	f7ff f98b 	bl	810d8c8 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 810e5b2:	4603      	mov	r3, r0
 810e5b4:	4618      	mov	r0, r3
 810e5b6:	f7fe fcd7 	bl	810cf68 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 810e5ba:	4603      	mov	r3, r0
 810e5bc:	681b      	ldr	r3, [r3, #0]
 810e5be:	613b      	str	r3, [r7, #16]
	  std::__adjust_heap(__first, __parent, __len, _GLIBCXX_MOVE(__value),
 810e5c0:	f107 0310 	add.w	r3, r7, #16
 810e5c4:	4618      	mov	r0, r3
 810e5c6:	f7fe fccf 	bl	810cf68 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 810e5ca:	4603      	mov	r3, r0
 810e5cc:	edd3 7a00 	vldr	s15, [r3]
 810e5d0:	4623      	mov	r3, r4
 810e5d2:	eeb0 0a67 	vmov.f32	s0, s15
 810e5d6:	69ba      	ldr	r2, [r7, #24]
 810e5d8:	69f9      	ldr	r1, [r7, #28]
 810e5da:	68f8      	ldr	r0, [r7, #12]
 810e5dc:	f000 f8d1 	bl	810e782 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEifNS0_5__ops15_Iter_less_iterEEvT_T0_SA_T1_T2_>
	  if (__parent == 0)
 810e5e0:	69fb      	ldr	r3, [r7, #28]
 810e5e2:	2b00      	cmp	r3, #0
 810e5e4:	d005      	beq.n	810e5f2 <_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_RT0_+0xa4>
	  __parent--;
 810e5e6:	69fb      	ldr	r3, [r7, #28]
 810e5e8:	3b01      	subs	r3, #1
 810e5ea:	61fb      	str	r3, [r7, #28]
      while (true)
 810e5ec:	e7d4      	b.n	810e598 <_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_RT0_+0x4a>
	return;
 810e5ee:	bf00      	nop
 810e5f0:	e000      	b.n	810e5f4 <_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_RT0_+0xa6>
	    return;
 810e5f2:	bf00      	nop
    }
 810e5f4:	3724      	adds	r7, #36	@ 0x24
 810e5f6:	46bd      	mov	sp, r7
 810e5f8:	bd90      	pop	{r4, r7, pc}

0810e5fa <_ZSt10__pop_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_RT0_>:
    __pop_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
 810e5fa:	b5b0      	push	{r4, r5, r7, lr}
 810e5fc:	b086      	sub	sp, #24
 810e5fe:	af00      	add	r7, sp, #0
 810e600:	60f8      	str	r0, [r7, #12]
 810e602:	60b9      	str	r1, [r7, #8]
 810e604:	607a      	str	r2, [r7, #4]
 810e606:	603b      	str	r3, [r7, #0]
      _ValueType __value = _GLIBCXX_MOVE(*__result);
 810e608:	1d3b      	adds	r3, r7, #4
 810e60a:	4618      	mov	r0, r3
 810e60c:	f7ff f95c 	bl	810d8c8 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 810e610:	4603      	mov	r3, r0
 810e612:	4618      	mov	r0, r3
 810e614:	f7fe fca8 	bl	810cf68 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 810e618:	4603      	mov	r3, r0
 810e61a:	681b      	ldr	r3, [r3, #0]
 810e61c:	617b      	str	r3, [r7, #20]
      *__result = _GLIBCXX_MOVE(*__first);
 810e61e:	f107 030c 	add.w	r3, r7, #12
 810e622:	4618      	mov	r0, r3
 810e624:	f7ff f950 	bl	810d8c8 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 810e628:	4603      	mov	r3, r0
 810e62a:	4618      	mov	r0, r3
 810e62c:	f7fe fc9c 	bl	810cf68 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 810e630:	4603      	mov	r3, r0
 810e632:	681c      	ldr	r4, [r3, #0]
 810e634:	1d3b      	adds	r3, r7, #4
 810e636:	4618      	mov	r0, r3
 810e638:	f7ff f946 	bl	810d8c8 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 810e63c:	4603      	mov	r3, r0
 810e63e:	601c      	str	r4, [r3, #0]
			 _DistanceType(__last - __first),
 810e640:	f107 020c 	add.w	r2, r7, #12
 810e644:	f107 0308 	add.w	r3, r7, #8
 810e648:	4611      	mov	r1, r2
 810e64a:	4618      	mov	r0, r3
 810e64c:	f7fe fc47 	bl	810cede <_ZN9__gnu_cxxmiIPfSt6vectorIfSaIfEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 810e650:	4604      	mov	r4, r0
			 _GLIBCXX_MOVE(__value), __comp);
 810e652:	f107 0314 	add.w	r3, r7, #20
 810e656:	4618      	mov	r0, r3
 810e658:	f7fe fc86 	bl	810cf68 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 810e65c:	4603      	mov	r3, r0
      std::__adjust_heap(__first, _DistanceType(0),
 810e65e:	edd3 7a00 	vldr	s15, [r3]
 810e662:	462b      	mov	r3, r5
 810e664:	eeb0 0a67 	vmov.f32	s0, s15
 810e668:	4622      	mov	r2, r4
 810e66a:	2100      	movs	r1, #0
 810e66c:	68f8      	ldr	r0, [r7, #12]
 810e66e:	f000 f888 	bl	810e782 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEifNS0_5__ops15_Iter_less_iterEEvT_T0_SA_T1_T2_>
    }
 810e672:	bf00      	nop
 810e674:	3718      	adds	r7, #24
 810e676:	46bd      	mov	sp, r7
 810e678:	bdb0      	pop	{r4, r5, r7, pc}

0810e67a <_ZNK9__gnu_cxx5__ops14_Val_less_iterclIfNS_17__normal_iteratorIPfSt6vectorIfSaIfEEEEEEbRT_T0_>:
      operator()(_Value& __val, _Iterator __it) const
 810e67a:	b580      	push	{r7, lr}
 810e67c:	ed2d 8b02 	vpush	{d8}
 810e680:	b084      	sub	sp, #16
 810e682:	af00      	add	r7, sp, #0
 810e684:	60f8      	str	r0, [r7, #12]
 810e686:	60b9      	str	r1, [r7, #8]
 810e688:	607a      	str	r2, [r7, #4]
      { return __val < *__it; }
 810e68a:	68bb      	ldr	r3, [r7, #8]
 810e68c:	ed93 8a00 	vldr	s16, [r3]
 810e690:	1d3b      	adds	r3, r7, #4
 810e692:	4618      	mov	r0, r3
 810e694:	f7ff f918 	bl	810d8c8 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 810e698:	4603      	mov	r3, r0
 810e69a:	edd3 7a00 	vldr	s15, [r3]
 810e69e:	eeb4 8ae7 	vcmpe.f32	s16, s15
 810e6a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810e6a6:	bf4c      	ite	mi
 810e6a8:	2301      	movmi	r3, #1
 810e6aa:	2300      	movpl	r3, #0
 810e6ac:	b2db      	uxtb	r3, r3
 810e6ae:	4618      	mov	r0, r3
 810e6b0:	3710      	adds	r7, #16
 810e6b2:	46bd      	mov	sp, r7
 810e6b4:	ecbd 8b02 	vpop	{d8}
 810e6b8:	bd80      	pop	{r7, pc}

0810e6ba <_ZSt14__copy_move_a2ILb1EPfS0_ET1_T0_S2_S1_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 810e6ba:	b580      	push	{r7, lr}
 810e6bc:	b084      	sub	sp, #16
 810e6be:	af00      	add	r7, sp, #0
 810e6c0:	60f8      	str	r0, [r7, #12]
 810e6c2:	60b9      	str	r1, [r7, #8]
 810e6c4:	607a      	str	r2, [r7, #4]
      if (std::is_constant_evaluated())
 810e6c6:	f7fa faa4 	bl	8108c12 <_ZSt21is_constant_evaluatedv>
 810e6ca:	4603      	mov	r3, r0
 810e6cc:	2b00      	cmp	r3, #0
 810e6ce:	d006      	beq.n	810e6de <_ZSt14__copy_move_a2ILb1EPfS0_ET1_T0_S2_S1_+0x24>
	  __copy_m(__first, __last, __result);
 810e6d0:	687a      	ldr	r2, [r7, #4]
 810e6d2:	68b9      	ldr	r1, [r7, #8]
 810e6d4:	68f8      	ldr	r0, [r7, #12]
 810e6d6:	f000 f8fc 	bl	810e8d2 <_ZNSt11__copy_moveILb1ELb0ESt26random_access_iterator_tagE8__copy_mIPfS3_EET0_T_S5_S4_>
 810e6da:	4603      	mov	r3, r0
 810e6dc:	e006      	b.n	810e6ec <_ZSt14__copy_move_a2ILb1EPfS0_ET1_T0_S2_S1_+0x32>
			      _Category>::__copy_m(__first, __last, __result);
 810e6de:	687a      	ldr	r2, [r7, #4]
 810e6e0:	68b9      	ldr	r1, [r7, #8]
 810e6e2:	68f8      	ldr	r0, [r7, #12]
 810e6e4:	f000 f919 	bl	810e91a <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>
 810e6e8:	4603      	mov	r3, r0
 810e6ea:	bf00      	nop
    }
 810e6ec:	4618      	mov	r0, r3
 810e6ee:	3710      	adds	r7, #16
 810e6f0:	46bd      	mov	sp, r7
 810e6f2:	bd80      	pop	{r7, pc}

0810e6f4 <_ZSt23__copy_move_backward_a2ILb1EPfS0_ET1_T0_S2_S1_>:
    __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
 810e6f4:	b580      	push	{r7, lr}
 810e6f6:	b084      	sub	sp, #16
 810e6f8:	af00      	add	r7, sp, #0
 810e6fa:	60f8      	str	r0, [r7, #12]
 810e6fc:	60b9      	str	r1, [r7, #8]
 810e6fe:	607a      	str	r2, [r7, #4]
      if (std::is_constant_evaluated())
 810e700:	f7fa fa87 	bl	8108c12 <_ZSt21is_constant_evaluatedv>
 810e704:	4603      	mov	r3, r0
 810e706:	2b00      	cmp	r3, #0
 810e708:	d006      	beq.n	810e718 <_ZSt23__copy_move_backward_a2ILb1EPfS0_ET1_T0_S2_S1_+0x24>
	  __copy_move_b(__first, __last, __result);
 810e70a:	687a      	ldr	r2, [r7, #4]
 810e70c:	68b9      	ldr	r1, [r7, #8]
 810e70e:	68f8      	ldr	r0, [r7, #12]
 810e710:	f000 f920 	bl	810e954 <_ZNSt20__copy_move_backwardILb1ELb0ESt26random_access_iterator_tagE13__copy_move_bIPfS3_EET0_T_S5_S4_>
 810e714:	4603      	mov	r3, r0
 810e716:	e006      	b.n	810e726 <_ZSt23__copy_move_backward_a2ILb1EPfS0_ET1_T0_S2_S1_+0x32>
				       _Category>::__copy_move_b(__first,
 810e718:	687a      	ldr	r2, [r7, #4]
 810e71a:	68b9      	ldr	r1, [r7, #8]
 810e71c:	68f8      	ldr	r0, [r7, #12]
 810e71e:	f000 f93d 	bl	810e99c <_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bIfEEPT_PKS3_S6_S4_>
 810e722:	4603      	mov	r3, r0
								 __result);
 810e724:	bf00      	nop
    }
 810e726:	4618      	mov	r0, r3
 810e728:	3710      	adds	r7, #16
 810e72a:	46bd      	mov	sp, r7
 810e72c:	bd80      	pop	{r7, pc}

0810e72e <_ZSt12__niter_baseIPKfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>:
    __niter_base(__gnu_cxx::__normal_iterator<_Iterator, _Container> __it)
 810e72e:	b580      	push	{r7, lr}
 810e730:	b082      	sub	sp, #8
 810e732:	af00      	add	r7, sp, #0
 810e734:	6078      	str	r0, [r7, #4]
    { return __it.base(); }
 810e736:	1d3b      	adds	r3, r7, #4
 810e738:	4618      	mov	r0, r3
 810e73a:	f7fe fee3 	bl	810d504 <_ZNK9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEE4baseEv>
 810e73e:	4603      	mov	r3, r0
 810e740:	681b      	ldr	r3, [r3, #0]
 810e742:	4618      	mov	r0, r3
 810e744:	3708      	adds	r7, #8
 810e746:	46bd      	mov	sp, r7
 810e748:	bd80      	pop	{r7, pc}

0810e74a <_ZSt14__copy_move_a1ILb0EPKfPfET1_T0_S4_S3_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 810e74a:	b580      	push	{r7, lr}
 810e74c:	b084      	sub	sp, #16
 810e74e:	af00      	add	r7, sp, #0
 810e750:	60f8      	str	r0, [r7, #12]
 810e752:	60b9      	str	r1, [r7, #8]
 810e754:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 810e756:	687a      	ldr	r2, [r7, #4]
 810e758:	68b9      	ldr	r1, [r7, #8]
 810e75a:	68f8      	ldr	r0, [r7, #12]
 810e75c:	f000 f940 	bl	810e9e0 <_ZSt14__copy_move_a2ILb0EPKfPfET1_T0_S4_S3_>
 810e760:	4603      	mov	r3, r0
 810e762:	4618      	mov	r0, r3
 810e764:	3710      	adds	r7, #16
 810e766:	46bd      	mov	sp, r7
 810e768:	bd80      	pop	{r7, pc}

0810e76a <_ZSt12__niter_wrapIPfET_RKS1_S1_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 810e76a:	b480      	push	{r7}
 810e76c:	b083      	sub	sp, #12
 810e76e:	af00      	add	r7, sp, #0
 810e770:	6078      	str	r0, [r7, #4]
 810e772:	6039      	str	r1, [r7, #0]
    { return __res; }
 810e774:	683b      	ldr	r3, [r7, #0]
 810e776:	4618      	mov	r0, r3
 810e778:	370c      	adds	r7, #12
 810e77a:	46bd      	mov	sp, r7
 810e77c:	f85d 7b04 	ldr.w	r7, [sp], #4
 810e780:	4770      	bx	lr

0810e782 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEifNS0_5__ops15_Iter_less_iterEEvT_T0_SA_T1_T2_>:
    __adjust_heap(_RandomAccessIterator __first, _Distance __holeIndex,
 810e782:	b590      	push	{r4, r7, lr}
 810e784:	b08f      	sub	sp, #60	@ 0x3c
 810e786:	af00      	add	r7, sp, #0
 810e788:	6178      	str	r0, [r7, #20]
 810e78a:	6139      	str	r1, [r7, #16]
 810e78c:	60fa      	str	r2, [r7, #12]
 810e78e:	ed87 0a02 	vstr	s0, [r7, #8]
 810e792:	713b      	strb	r3, [r7, #4]
      const _Distance __topIndex = __holeIndex;
 810e794:	693b      	ldr	r3, [r7, #16]
 810e796:	633b      	str	r3, [r7, #48]	@ 0x30
      _Distance __secondChild = __holeIndex;
 810e798:	693b      	ldr	r3, [r7, #16]
 810e79a:	637b      	str	r3, [r7, #52]	@ 0x34
      while (__secondChild < (__len - 1) / 2)
 810e79c:	e042      	b.n	810e824 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEifNS0_5__ops15_Iter_less_iterEEvT_T0_SA_T1_T2_+0xa2>
	  __secondChild = 2 * (__secondChild + 1);
 810e79e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810e7a0:	3301      	adds	r3, #1
 810e7a2:	005b      	lsls	r3, r3, #1
 810e7a4:	637b      	str	r3, [r7, #52]	@ 0x34
	  if (__comp(__first + __secondChild,
 810e7a6:	f107 0314 	add.w	r3, r7, #20
 810e7aa:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 810e7ac:	4618      	mov	r0, r3
 810e7ae:	f7fe fa36 	bl	810cc1e <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 810e7b2:	4604      	mov	r4, r0
 810e7b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810e7b6:	1e5a      	subs	r2, r3, #1
 810e7b8:	f107 0314 	add.w	r3, r7, #20
 810e7bc:	4611      	mov	r1, r2
 810e7be:	4618      	mov	r0, r3
 810e7c0:	f7fe fa2d 	bl	810cc1e <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 810e7c4:	4602      	mov	r2, r0
 810e7c6:	1d3b      	adds	r3, r7, #4
 810e7c8:	4621      	mov	r1, r4
 810e7ca:	4618      	mov	r0, r3
 810e7cc:	f7ff fd8f 	bl	810e2ee <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPfSt6vectorIfSaIfEEEES8_EEbT_T0_>
 810e7d0:	4603      	mov	r3, r0
 810e7d2:	2b00      	cmp	r3, #0
 810e7d4:	d002      	beq.n	810e7dc <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEifNS0_5__ops15_Iter_less_iterEEvT_T0_SA_T1_T2_+0x5a>
	    __secondChild--;
 810e7d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810e7d8:	3b01      	subs	r3, #1
 810e7da:	637b      	str	r3, [r7, #52]	@ 0x34
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first + __secondChild));
 810e7dc:	f107 0314 	add.w	r3, r7, #20
 810e7e0:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 810e7e2:	4618      	mov	r0, r3
 810e7e4:	f7fe fa1b 	bl	810cc1e <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 810e7e8:	4603      	mov	r3, r0
 810e7ea:	623b      	str	r3, [r7, #32]
 810e7ec:	f107 0320 	add.w	r3, r7, #32
 810e7f0:	4618      	mov	r0, r3
 810e7f2:	f7ff f869 	bl	810d8c8 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 810e7f6:	4603      	mov	r3, r0
 810e7f8:	4618      	mov	r0, r3
 810e7fa:	f7fe fbb5 	bl	810cf68 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 810e7fe:	4603      	mov	r3, r0
 810e800:	681c      	ldr	r4, [r3, #0]
 810e802:	f107 0314 	add.w	r3, r7, #20
 810e806:	6939      	ldr	r1, [r7, #16]
 810e808:	4618      	mov	r0, r3
 810e80a:	f7fe fa08 	bl	810cc1e <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 810e80e:	4603      	mov	r3, r0
 810e810:	627b      	str	r3, [r7, #36]	@ 0x24
 810e812:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 810e816:	4618      	mov	r0, r3
 810e818:	f7ff f856 	bl	810d8c8 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 810e81c:	4603      	mov	r3, r0
 810e81e:	601c      	str	r4, [r3, #0]
	  __holeIndex = __secondChild;
 810e820:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810e822:	613b      	str	r3, [r7, #16]
      while (__secondChild < (__len - 1) / 2)
 810e824:	68fb      	ldr	r3, [r7, #12]
 810e826:	3b01      	subs	r3, #1
 810e828:	0fda      	lsrs	r2, r3, #31
 810e82a:	4413      	add	r3, r2
 810e82c:	105b      	asrs	r3, r3, #1
 810e82e:	461a      	mov	r2, r3
 810e830:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810e832:	4293      	cmp	r3, r2
 810e834:	dbb3      	blt.n	810e79e <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEifNS0_5__ops15_Iter_less_iterEEvT_T0_SA_T1_T2_+0x1c>
      if ((__len & 1) == 0 && __secondChild == (__len - 2) / 2)
 810e836:	68fb      	ldr	r3, [r7, #12]
 810e838:	f003 0301 	and.w	r3, r3, #1
 810e83c:	2b00      	cmp	r3, #0
 810e83e:	d133      	bne.n	810e8a8 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEifNS0_5__ops15_Iter_less_iterEEvT_T0_SA_T1_T2_+0x126>
 810e840:	68fb      	ldr	r3, [r7, #12]
 810e842:	3b02      	subs	r3, #2
 810e844:	0fda      	lsrs	r2, r3, #31
 810e846:	4413      	add	r3, r2
 810e848:	105b      	asrs	r3, r3, #1
 810e84a:	461a      	mov	r2, r3
 810e84c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810e84e:	4293      	cmp	r3, r2
 810e850:	d12a      	bne.n	810e8a8 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEifNS0_5__ops15_Iter_less_iterEEvT_T0_SA_T1_T2_+0x126>
	  __secondChild = 2 * (__secondChild + 1);
 810e852:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810e854:	3301      	adds	r3, #1
 810e856:	005b      	lsls	r3, r3, #1
 810e858:	637b      	str	r3, [r7, #52]	@ 0x34
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first
 810e85a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810e85c:	1e5a      	subs	r2, r3, #1
 810e85e:	f107 0314 	add.w	r3, r7, #20
 810e862:	4611      	mov	r1, r2
 810e864:	4618      	mov	r0, r3
 810e866:	f7fe f9da 	bl	810cc1e <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 810e86a:	4603      	mov	r3, r0
 810e86c:	62bb      	str	r3, [r7, #40]	@ 0x28
 810e86e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 810e872:	4618      	mov	r0, r3
 810e874:	f7ff f828 	bl	810d8c8 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 810e878:	4603      	mov	r3, r0
 810e87a:	4618      	mov	r0, r3
 810e87c:	f7fe fb74 	bl	810cf68 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 810e880:	4603      	mov	r3, r0
 810e882:	681c      	ldr	r4, [r3, #0]
 810e884:	f107 0314 	add.w	r3, r7, #20
 810e888:	6939      	ldr	r1, [r7, #16]
 810e88a:	4618      	mov	r0, r3
 810e88c:	f7fe f9c7 	bl	810cc1e <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 810e890:	4603      	mov	r3, r0
 810e892:	62fb      	str	r3, [r7, #44]	@ 0x2c
 810e894:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 810e898:	4618      	mov	r0, r3
 810e89a:	f7ff f815 	bl	810d8c8 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 810e89e:	4603      	mov	r3, r0
 810e8a0:	601c      	str	r4, [r3, #0]
	  __holeIndex = __secondChild - 1;
 810e8a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810e8a4:	3b01      	subs	r3, #1
 810e8a6:	613b      	str	r3, [r7, #16]
		       _GLIBCXX_MOVE(__value), __cmp);
 810e8a8:	f107 0308 	add.w	r3, r7, #8
 810e8ac:	4618      	mov	r0, r3
 810e8ae:	f7fe fb5b 	bl	810cf68 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 810e8b2:	4603      	mov	r3, r0
      std::__push_heap(__first, __holeIndex, __topIndex,
 810e8b4:	edd3 7a00 	vldr	s15, [r3]
 810e8b8:	f107 031c 	add.w	r3, r7, #28
 810e8bc:	eeb0 0a67 	vmov.f32	s0, s15
 810e8c0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810e8c2:	6939      	ldr	r1, [r7, #16]
 810e8c4:	6978      	ldr	r0, [r7, #20]
 810e8c6:	f000 f8a8 	bl	810ea1a <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEifNS0_5__ops14_Iter_less_valEEvT_T0_SA_T1_RT2_>
    }
 810e8ca:	bf00      	nop
 810e8cc:	373c      	adds	r7, #60	@ 0x3c
 810e8ce:	46bd      	mov	sp, r7
 810e8d0:	bd90      	pop	{r4, r7, pc}

0810e8d2 <_ZNSt11__copy_moveILb1ELb0ESt26random_access_iterator_tagE8__copy_mIPfS3_EET0_T_S5_S4_>:
	__copy_m(_II __first, _II __last, _OI __result)
 810e8d2:	b580      	push	{r7, lr}
 810e8d4:	b086      	sub	sp, #24
 810e8d6:	af00      	add	r7, sp, #0
 810e8d8:	60f8      	str	r0, [r7, #12]
 810e8da:	60b9      	str	r1, [r7, #8]
 810e8dc:	607a      	str	r2, [r7, #4]
	  for(_Distance __n = __last - __first; __n > 0; --__n)
 810e8de:	68ba      	ldr	r2, [r7, #8]
 810e8e0:	68fb      	ldr	r3, [r7, #12]
 810e8e2:	1ad3      	subs	r3, r2, r3
 810e8e4:	109b      	asrs	r3, r3, #2
 810e8e6:	617b      	str	r3, [r7, #20]
 810e8e8:	e00f      	b.n	810e90a <_ZNSt11__copy_moveILb1ELb0ESt26random_access_iterator_tagE8__copy_mIPfS3_EET0_T_S5_S4_+0x38>
	      *__result = std::move(*__first);
 810e8ea:	68f8      	ldr	r0, [r7, #12]
 810e8ec:	f7fe fb3c 	bl	810cf68 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 810e8f0:	4603      	mov	r3, r0
 810e8f2:	681a      	ldr	r2, [r3, #0]
 810e8f4:	687b      	ldr	r3, [r7, #4]
 810e8f6:	601a      	str	r2, [r3, #0]
	      ++__first;
 810e8f8:	68fb      	ldr	r3, [r7, #12]
 810e8fa:	3304      	adds	r3, #4
 810e8fc:	60fb      	str	r3, [r7, #12]
	      ++__result;
 810e8fe:	687b      	ldr	r3, [r7, #4]
 810e900:	3304      	adds	r3, #4
 810e902:	607b      	str	r3, [r7, #4]
	  for(_Distance __n = __last - __first; __n > 0; --__n)
 810e904:	697b      	ldr	r3, [r7, #20]
 810e906:	3b01      	subs	r3, #1
 810e908:	617b      	str	r3, [r7, #20]
 810e90a:	697b      	ldr	r3, [r7, #20]
 810e90c:	2b00      	cmp	r3, #0
 810e90e:	dcec      	bgt.n	810e8ea <_ZNSt11__copy_moveILb1ELb0ESt26random_access_iterator_tagE8__copy_mIPfS3_EET0_T_S5_S4_+0x18>
	  return __result;
 810e910:	687b      	ldr	r3, [r7, #4]
	}
 810e912:	4618      	mov	r0, r3
 810e914:	3718      	adds	r7, #24
 810e916:	46bd      	mov	sp, r7
 810e918:	bd80      	pop	{r7, pc}

0810e91a <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 810e91a:	b580      	push	{r7, lr}
 810e91c:	b086      	sub	sp, #24
 810e91e:	af00      	add	r7, sp, #0
 810e920:	60f8      	str	r0, [r7, #12]
 810e922:	60b9      	str	r1, [r7, #8]
 810e924:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 810e926:	68ba      	ldr	r2, [r7, #8]
 810e928:	68fb      	ldr	r3, [r7, #12]
 810e92a:	1ad3      	subs	r3, r2, r3
 810e92c:	109b      	asrs	r3, r3, #2
 810e92e:	617b      	str	r3, [r7, #20]
	  if (_Num)
 810e930:	697b      	ldr	r3, [r7, #20]
 810e932:	2b00      	cmp	r3, #0
 810e934:	d006      	beq.n	810e944 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 810e936:	697b      	ldr	r3, [r7, #20]
 810e938:	009b      	lsls	r3, r3, #2
 810e93a:	461a      	mov	r2, r3
 810e93c:	68f9      	ldr	r1, [r7, #12]
 810e93e:	6878      	ldr	r0, [r7, #4]
 810e940:	f018 f992 	bl	8126c68 <memmove>
	  return __result + _Num;
 810e944:	697b      	ldr	r3, [r7, #20]
 810e946:	009b      	lsls	r3, r3, #2
 810e948:	687a      	ldr	r2, [r7, #4]
 810e94a:	4413      	add	r3, r2
	}
 810e94c:	4618      	mov	r0, r3
 810e94e:	3718      	adds	r7, #24
 810e950:	46bd      	mov	sp, r7
 810e952:	bd80      	pop	{r7, pc}

0810e954 <_ZNSt20__copy_move_backwardILb1ELb0ESt26random_access_iterator_tagE13__copy_move_bIPfS3_EET0_T_S5_S4_>:
	__copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result)
 810e954:	b580      	push	{r7, lr}
 810e956:	b086      	sub	sp, #24
 810e958:	af00      	add	r7, sp, #0
 810e95a:	60f8      	str	r0, [r7, #12]
 810e95c:	60b9      	str	r1, [r7, #8]
 810e95e:	607a      	str	r2, [r7, #4]
	    __n = __last - __first;
 810e960:	68ba      	ldr	r2, [r7, #8]
 810e962:	68fb      	ldr	r3, [r7, #12]
 810e964:	1ad3      	subs	r3, r2, r3
 810e966:	109b      	asrs	r3, r3, #2
 810e968:	617b      	str	r3, [r7, #20]
	  for (; __n > 0; --__n)
 810e96a:	e00f      	b.n	810e98c <_ZNSt20__copy_move_backwardILb1ELb0ESt26random_access_iterator_tagE13__copy_move_bIPfS3_EET0_T_S5_S4_+0x38>
	    *--__result = std::move(*--__last);
 810e96c:	68bb      	ldr	r3, [r7, #8]
 810e96e:	3b04      	subs	r3, #4
 810e970:	60bb      	str	r3, [r7, #8]
 810e972:	68b8      	ldr	r0, [r7, #8]
 810e974:	f7fe faf8 	bl	810cf68 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 810e978:	4603      	mov	r3, r0
 810e97a:	681a      	ldr	r2, [r3, #0]
 810e97c:	687b      	ldr	r3, [r7, #4]
 810e97e:	3b04      	subs	r3, #4
 810e980:	607b      	str	r3, [r7, #4]
 810e982:	687b      	ldr	r3, [r7, #4]
 810e984:	601a      	str	r2, [r3, #0]
	  for (; __n > 0; --__n)
 810e986:	697b      	ldr	r3, [r7, #20]
 810e988:	3b01      	subs	r3, #1
 810e98a:	617b      	str	r3, [r7, #20]
 810e98c:	697b      	ldr	r3, [r7, #20]
 810e98e:	2b00      	cmp	r3, #0
 810e990:	dcec      	bgt.n	810e96c <_ZNSt20__copy_move_backwardILb1ELb0ESt26random_access_iterator_tagE13__copy_move_bIPfS3_EET0_T_S5_S4_+0x18>
	  return __result;
 810e992:	687b      	ldr	r3, [r7, #4]
	}
 810e994:	4618      	mov	r0, r3
 810e996:	3718      	adds	r7, #24
 810e998:	46bd      	mov	sp, r7
 810e99a:	bd80      	pop	{r7, pc}

0810e99c <_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bIfEEPT_PKS3_S6_S4_>:
	__copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
 810e99c:	b580      	push	{r7, lr}
 810e99e:	b086      	sub	sp, #24
 810e9a0:	af00      	add	r7, sp, #0
 810e9a2:	60f8      	str	r0, [r7, #12]
 810e9a4:	60b9      	str	r1, [r7, #8]
 810e9a6:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 810e9a8:	68ba      	ldr	r2, [r7, #8]
 810e9aa:	68fb      	ldr	r3, [r7, #12]
 810e9ac:	1ad3      	subs	r3, r2, r3
 810e9ae:	109b      	asrs	r3, r3, #2
 810e9b0:	617b      	str	r3, [r7, #20]
	  if (_Num)
 810e9b2:	697b      	ldr	r3, [r7, #20]
 810e9b4:	2b00      	cmp	r3, #0
 810e9b6:	d00a      	beq.n	810e9ce <_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bIfEEPT_PKS3_S6_S4_+0x32>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 810e9b8:	697b      	ldr	r3, [r7, #20]
 810e9ba:	009b      	lsls	r3, r3, #2
 810e9bc:	425b      	negs	r3, r3
 810e9be:	687a      	ldr	r2, [r7, #4]
 810e9c0:	18d0      	adds	r0, r2, r3
 810e9c2:	697b      	ldr	r3, [r7, #20]
 810e9c4:	009b      	lsls	r3, r3, #2
 810e9c6:	461a      	mov	r2, r3
 810e9c8:	68f9      	ldr	r1, [r7, #12]
 810e9ca:	f018 f94d 	bl	8126c68 <memmove>
	  return __result - _Num;
 810e9ce:	697b      	ldr	r3, [r7, #20]
 810e9d0:	009b      	lsls	r3, r3, #2
 810e9d2:	425b      	negs	r3, r3
 810e9d4:	687a      	ldr	r2, [r7, #4]
 810e9d6:	4413      	add	r3, r2
	}
 810e9d8:	4618      	mov	r0, r3
 810e9da:	3718      	adds	r7, #24
 810e9dc:	46bd      	mov	sp, r7
 810e9de:	bd80      	pop	{r7, pc}

0810e9e0 <_ZSt14__copy_move_a2ILb0EPKfPfET1_T0_S4_S3_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 810e9e0:	b580      	push	{r7, lr}
 810e9e2:	b084      	sub	sp, #16
 810e9e4:	af00      	add	r7, sp, #0
 810e9e6:	60f8      	str	r0, [r7, #12]
 810e9e8:	60b9      	str	r1, [r7, #8]
 810e9ea:	607a      	str	r2, [r7, #4]
      if (std::is_constant_evaluated())
 810e9ec:	f7fa f911 	bl	8108c12 <_ZSt21is_constant_evaluatedv>
 810e9f0:	4603      	mov	r3, r0
 810e9f2:	2b00      	cmp	r3, #0
 810e9f4:	d006      	beq.n	810ea04 <_ZSt14__copy_move_a2ILb0EPKfPfET1_T0_S4_S3_+0x24>
	  __copy_m(__first, __last, __result);
 810e9f6:	687a      	ldr	r2, [r7, #4]
 810e9f8:	68b9      	ldr	r1, [r7, #8]
 810e9fa:	68f8      	ldr	r0, [r7, #12]
 810e9fc:	f000 f87a 	bl	810eaf4 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKfPfEET0_T_S7_S6_>
 810ea00:	4603      	mov	r3, r0
 810ea02:	e006      	b.n	810ea12 <_ZSt14__copy_move_a2ILb0EPKfPfET1_T0_S4_S3_+0x32>
			      _Category>::__copy_m(__first, __last, __result);
 810ea04:	687a      	ldr	r2, [r7, #4]
 810ea06:	68b9      	ldr	r1, [r7, #8]
 810ea08:	68f8      	ldr	r0, [r7, #12]
 810ea0a:	f000 f896 	bl	810eb3a <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>
 810ea0e:	4603      	mov	r3, r0
 810ea10:	bf00      	nop
    }
 810ea12:	4618      	mov	r0, r3
 810ea14:	3710      	adds	r7, #16
 810ea16:	46bd      	mov	sp, r7
 810ea18:	bd80      	pop	{r7, pc}

0810ea1a <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEifNS0_5__ops14_Iter_less_valEEvT_T0_SA_T1_RT2_>:
    __push_heap(_RandomAccessIterator __first,
 810ea1a:	b590      	push	{r4, r7, lr}
 810ea1c:	b08b      	sub	sp, #44	@ 0x2c
 810ea1e:	af00      	add	r7, sp, #0
 810ea20:	6178      	str	r0, [r7, #20]
 810ea22:	6139      	str	r1, [r7, #16]
 810ea24:	60fa      	str	r2, [r7, #12]
 810ea26:	ed87 0a02 	vstr	s0, [r7, #8]
 810ea2a:	607b      	str	r3, [r7, #4]
      _Distance __parent = (__holeIndex - 1) / 2;
 810ea2c:	693b      	ldr	r3, [r7, #16]
 810ea2e:	3b01      	subs	r3, #1
 810ea30:	0fda      	lsrs	r2, r3, #31
 810ea32:	4413      	add	r3, r2
 810ea34:	105b      	asrs	r3, r3, #1
 810ea36:	627b      	str	r3, [r7, #36]	@ 0x24
      while (__holeIndex > __topIndex && __comp(__first + __parent, __value))
 810ea38:	e029      	b.n	810ea8e <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEifNS0_5__ops14_Iter_less_valEEvT_T0_SA_T1_RT2_+0x74>
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first + __parent));
 810ea3a:	f107 0314 	add.w	r3, r7, #20
 810ea3e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 810ea40:	4618      	mov	r0, r3
 810ea42:	f7fe f8ec 	bl	810cc1e <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 810ea46:	4603      	mov	r3, r0
 810ea48:	61bb      	str	r3, [r7, #24]
 810ea4a:	f107 0318 	add.w	r3, r7, #24
 810ea4e:	4618      	mov	r0, r3
 810ea50:	f7fe ff3a 	bl	810d8c8 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 810ea54:	4603      	mov	r3, r0
 810ea56:	4618      	mov	r0, r3
 810ea58:	f7fe fa86 	bl	810cf68 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 810ea5c:	4603      	mov	r3, r0
 810ea5e:	681c      	ldr	r4, [r3, #0]
 810ea60:	f107 0314 	add.w	r3, r7, #20
 810ea64:	6939      	ldr	r1, [r7, #16]
 810ea66:	4618      	mov	r0, r3
 810ea68:	f7fe f8d9 	bl	810cc1e <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 810ea6c:	4603      	mov	r3, r0
 810ea6e:	61fb      	str	r3, [r7, #28]
 810ea70:	f107 031c 	add.w	r3, r7, #28
 810ea74:	4618      	mov	r0, r3
 810ea76:	f7fe ff27 	bl	810d8c8 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 810ea7a:	4603      	mov	r3, r0
 810ea7c:	601c      	str	r4, [r3, #0]
	  __holeIndex = __parent;
 810ea7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810ea80:	613b      	str	r3, [r7, #16]
	  __parent = (__holeIndex - 1) / 2;
 810ea82:	693b      	ldr	r3, [r7, #16]
 810ea84:	3b01      	subs	r3, #1
 810ea86:	0fda      	lsrs	r2, r3, #31
 810ea88:	4413      	add	r3, r2
 810ea8a:	105b      	asrs	r3, r3, #1
 810ea8c:	627b      	str	r3, [r7, #36]	@ 0x24
      while (__holeIndex > __topIndex && __comp(__first + __parent, __value))
 810ea8e:	693a      	ldr	r2, [r7, #16]
 810ea90:	68fb      	ldr	r3, [r7, #12]
 810ea92:	429a      	cmp	r2, r3
 810ea94:	dd11      	ble.n	810eaba <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEifNS0_5__ops14_Iter_less_valEEvT_T0_SA_T1_RT2_+0xa0>
 810ea96:	f107 0314 	add.w	r3, r7, #20
 810ea9a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 810ea9c:	4618      	mov	r0, r3
 810ea9e:	f7fe f8be 	bl	810cc1e <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 810eaa2:	4601      	mov	r1, r0
 810eaa4:	f107 0308 	add.w	r3, r7, #8
 810eaa8:	461a      	mov	r2, r3
 810eaaa:	6878      	ldr	r0, [r7, #4]
 810eaac:	f000 f862 	bl	810eb74 <_ZNK9__gnu_cxx5__ops14_Iter_less_valclINS_17__normal_iteratorIPfSt6vectorIfSaIfEEEEfEEbT_RT0_>
 810eab0:	4603      	mov	r3, r0
 810eab2:	2b00      	cmp	r3, #0
 810eab4:	d001      	beq.n	810eaba <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEifNS0_5__ops14_Iter_less_valEEvT_T0_SA_T1_RT2_+0xa0>
 810eab6:	2301      	movs	r3, #1
 810eab8:	e000      	b.n	810eabc <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEifNS0_5__ops14_Iter_less_valEEvT_T0_SA_T1_RT2_+0xa2>
 810eaba:	2300      	movs	r3, #0
 810eabc:	2b00      	cmp	r3, #0
 810eabe:	d1bc      	bne.n	810ea3a <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEifNS0_5__ops14_Iter_less_valEEvT_T0_SA_T1_RT2_+0x20>
      *(__first + __holeIndex) = _GLIBCXX_MOVE(__value);
 810eac0:	f107 0308 	add.w	r3, r7, #8
 810eac4:	4618      	mov	r0, r3
 810eac6:	f7fe fa4f 	bl	810cf68 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 810eaca:	4603      	mov	r3, r0
 810eacc:	681c      	ldr	r4, [r3, #0]
 810eace:	f107 0314 	add.w	r3, r7, #20
 810ead2:	6939      	ldr	r1, [r7, #16]
 810ead4:	4618      	mov	r0, r3
 810ead6:	f7fe f8a2 	bl	810cc1e <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 810eada:	4603      	mov	r3, r0
 810eadc:	623b      	str	r3, [r7, #32]
 810eade:	f107 0320 	add.w	r3, r7, #32
 810eae2:	4618      	mov	r0, r3
 810eae4:	f7fe fef0 	bl	810d8c8 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 810eae8:	4603      	mov	r3, r0
 810eaea:	601c      	str	r4, [r3, #0]
    }
 810eaec:	bf00      	nop
 810eaee:	372c      	adds	r7, #44	@ 0x2c
 810eaf0:	46bd      	mov	sp, r7
 810eaf2:	bd90      	pop	{r4, r7, pc}

0810eaf4 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKfPfEET0_T_S7_S6_>:
	__copy_m(_II __first, _II __last, _OI __result)
 810eaf4:	b480      	push	{r7}
 810eaf6:	b087      	sub	sp, #28
 810eaf8:	af00      	add	r7, sp, #0
 810eafa:	60f8      	str	r0, [r7, #12]
 810eafc:	60b9      	str	r1, [r7, #8]
 810eafe:	607a      	str	r2, [r7, #4]
	  for(_Distance __n = __last - __first; __n > 0; --__n)
 810eb00:	68ba      	ldr	r2, [r7, #8]
 810eb02:	68fb      	ldr	r3, [r7, #12]
 810eb04:	1ad3      	subs	r3, r2, r3
 810eb06:	109b      	asrs	r3, r3, #2
 810eb08:	617b      	str	r3, [r7, #20]
 810eb0a:	e00c      	b.n	810eb26 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKfPfEET0_T_S7_S6_+0x32>
	      *__result = *__first;
 810eb0c:	68fb      	ldr	r3, [r7, #12]
 810eb0e:	681a      	ldr	r2, [r3, #0]
 810eb10:	687b      	ldr	r3, [r7, #4]
 810eb12:	601a      	str	r2, [r3, #0]
	      ++__first;
 810eb14:	68fb      	ldr	r3, [r7, #12]
 810eb16:	3304      	adds	r3, #4
 810eb18:	60fb      	str	r3, [r7, #12]
	      ++__result;
 810eb1a:	687b      	ldr	r3, [r7, #4]
 810eb1c:	3304      	adds	r3, #4
 810eb1e:	607b      	str	r3, [r7, #4]
	  for(_Distance __n = __last - __first; __n > 0; --__n)
 810eb20:	697b      	ldr	r3, [r7, #20]
 810eb22:	3b01      	subs	r3, #1
 810eb24:	617b      	str	r3, [r7, #20]
 810eb26:	697b      	ldr	r3, [r7, #20]
 810eb28:	2b00      	cmp	r3, #0
 810eb2a:	dcef      	bgt.n	810eb0c <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKfPfEET0_T_S7_S6_+0x18>
	  return __result;
 810eb2c:	687b      	ldr	r3, [r7, #4]
	}
 810eb2e:	4618      	mov	r0, r3
 810eb30:	371c      	adds	r7, #28
 810eb32:	46bd      	mov	sp, r7
 810eb34:	f85d 7b04 	ldr.w	r7, [sp], #4
 810eb38:	4770      	bx	lr

0810eb3a <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 810eb3a:	b580      	push	{r7, lr}
 810eb3c:	b086      	sub	sp, #24
 810eb3e:	af00      	add	r7, sp, #0
 810eb40:	60f8      	str	r0, [r7, #12]
 810eb42:	60b9      	str	r1, [r7, #8]
 810eb44:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 810eb46:	68ba      	ldr	r2, [r7, #8]
 810eb48:	68fb      	ldr	r3, [r7, #12]
 810eb4a:	1ad3      	subs	r3, r2, r3
 810eb4c:	109b      	asrs	r3, r3, #2
 810eb4e:	617b      	str	r3, [r7, #20]
	  if (_Num)
 810eb50:	697b      	ldr	r3, [r7, #20]
 810eb52:	2b00      	cmp	r3, #0
 810eb54:	d006      	beq.n	810eb64 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 810eb56:	697b      	ldr	r3, [r7, #20]
 810eb58:	009b      	lsls	r3, r3, #2
 810eb5a:	461a      	mov	r2, r3
 810eb5c:	68f9      	ldr	r1, [r7, #12]
 810eb5e:	6878      	ldr	r0, [r7, #4]
 810eb60:	f018 f882 	bl	8126c68 <memmove>
	  return __result + _Num;
 810eb64:	697b      	ldr	r3, [r7, #20]
 810eb66:	009b      	lsls	r3, r3, #2
 810eb68:	687a      	ldr	r2, [r7, #4]
 810eb6a:	4413      	add	r3, r2
	}
 810eb6c:	4618      	mov	r0, r3
 810eb6e:	3718      	adds	r7, #24
 810eb70:	46bd      	mov	sp, r7
 810eb72:	bd80      	pop	{r7, pc}

0810eb74 <_ZNK9__gnu_cxx5__ops14_Iter_less_valclINS_17__normal_iteratorIPfSt6vectorIfSaIfEEEEfEEbT_RT0_>:
      operator()(_Iterator __it, _Value& __val) const
 810eb74:	b580      	push	{r7, lr}
 810eb76:	b084      	sub	sp, #16
 810eb78:	af00      	add	r7, sp, #0
 810eb7a:	60f8      	str	r0, [r7, #12]
 810eb7c:	60b9      	str	r1, [r7, #8]
 810eb7e:	607a      	str	r2, [r7, #4]
      { return *__it < __val; }
 810eb80:	f107 0308 	add.w	r3, r7, #8
 810eb84:	4618      	mov	r0, r3
 810eb86:	f7fe fe9f 	bl	810d8c8 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 810eb8a:	4603      	mov	r3, r0
 810eb8c:	ed93 7a00 	vldr	s14, [r3]
 810eb90:	687b      	ldr	r3, [r7, #4]
 810eb92:	edd3 7a00 	vldr	s15, [r3]
 810eb96:	eeb4 7ae7 	vcmpe.f32	s14, s15
 810eb9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810eb9e:	bf4c      	ite	mi
 810eba0:	2301      	movmi	r3, #1
 810eba2:	2300      	movpl	r3, #0
 810eba4:	b2db      	uxtb	r3, r3
 810eba6:	4618      	mov	r0, r3
 810eba8:	3710      	adds	r7, #16
 810ebaa:	46bd      	mov	sp, r7
 810ebac:	bd80      	pop	{r7, pc}

0810ebae <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 810ebae:	b480      	push	{r7}
 810ebb0:	b083      	sub	sp, #12
 810ebb2:	af00      	add	r7, sp, #0
 810ebb4:	6078      	str	r0, [r7, #4]
 810ebb6:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 810ebb8:	687b      	ldr	r3, [r7, #4]
 810ebba:	2b00      	cmp	r3, #0
 810ebbc:	d00b      	beq.n	810ebd6 <LAN8742_RegisterBusIO+0x28>
 810ebbe:	683b      	ldr	r3, [r7, #0]
 810ebc0:	68db      	ldr	r3, [r3, #12]
 810ebc2:	2b00      	cmp	r3, #0
 810ebc4:	d007      	beq.n	810ebd6 <LAN8742_RegisterBusIO+0x28>
 810ebc6:	683b      	ldr	r3, [r7, #0]
 810ebc8:	689b      	ldr	r3, [r3, #8]
 810ebca:	2b00      	cmp	r3, #0
 810ebcc:	d003      	beq.n	810ebd6 <LAN8742_RegisterBusIO+0x28>
 810ebce:	683b      	ldr	r3, [r7, #0]
 810ebd0:	691b      	ldr	r3, [r3, #16]
 810ebd2:	2b00      	cmp	r3, #0
 810ebd4:	d102      	bne.n	810ebdc <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 810ebd6:	f04f 33ff 	mov.w	r3, #4294967295
 810ebda:	e014      	b.n	810ec06 <LAN8742_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 810ebdc:	683b      	ldr	r3, [r7, #0]
 810ebde:	681a      	ldr	r2, [r3, #0]
 810ebe0:	687b      	ldr	r3, [r7, #4]
 810ebe2:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 810ebe4:	683b      	ldr	r3, [r7, #0]
 810ebe6:	685a      	ldr	r2, [r3, #4]
 810ebe8:	687b      	ldr	r3, [r7, #4]
 810ebea:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 810ebec:	683b      	ldr	r3, [r7, #0]
 810ebee:	68da      	ldr	r2, [r3, #12]
 810ebf0:	687b      	ldr	r3, [r7, #4]
 810ebf2:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 810ebf4:	683b      	ldr	r3, [r7, #0]
 810ebf6:	689a      	ldr	r2, [r3, #8]
 810ebf8:	687b      	ldr	r3, [r7, #4]
 810ebfa:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 810ebfc:	683b      	ldr	r3, [r7, #0]
 810ebfe:	691a      	ldr	r2, [r3, #16]
 810ec00:	687b      	ldr	r3, [r7, #4]
 810ec02:	619a      	str	r2, [r3, #24]

  return LAN8742_STATUS_OK;
 810ec04:	2300      	movs	r3, #0
}
 810ec06:	4618      	mov	r0, r3
 810ec08:	370c      	adds	r7, #12
 810ec0a:	46bd      	mov	sp, r7
 810ec0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ec10:	4770      	bx	lr

0810ec12 <LAN8742_Init>:
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ADDRESS_ERROR if cannot find device address
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 810ec12:	b580      	push	{r7, lr}
 810ec14:	b086      	sub	sp, #24
 810ec16:	af00      	add	r7, sp, #0
 810ec18:	6078      	str	r0, [r7, #4]
   uint32_t regvalue = 0, addr = 0;
 810ec1a:	2300      	movs	r3, #0
 810ec1c:	60fb      	str	r3, [r7, #12]
 810ec1e:	2300      	movs	r3, #0
 810ec20:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 810ec22:	2300      	movs	r3, #0
 810ec24:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 810ec26:	687b      	ldr	r3, [r7, #4]
 810ec28:	685b      	ldr	r3, [r3, #4]
 810ec2a:	2b00      	cmp	r3, #0
 810ec2c:	d139      	bne.n	810eca2 <LAN8742_Init+0x90>
   {
     if(pObj->IO.Init != 0)
 810ec2e:	687b      	ldr	r3, [r7, #4]
 810ec30:	689b      	ldr	r3, [r3, #8]
 810ec32:	2b00      	cmp	r3, #0
 810ec34:	d002      	beq.n	810ec3c <LAN8742_Init+0x2a>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 810ec36:	687b      	ldr	r3, [r7, #4]
 810ec38:	689b      	ldr	r3, [r3, #8]
 810ec3a:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 810ec3c:	687b      	ldr	r3, [r7, #4]
 810ec3e:	2220      	movs	r2, #32
 810ec40:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 810ec42:	2300      	movs	r3, #0
 810ec44:	617b      	str	r3, [r7, #20]
 810ec46:	e01c      	b.n	810ec82 <LAN8742_Init+0x70>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 810ec48:	687b      	ldr	r3, [r7, #4]
 810ec4a:	695b      	ldr	r3, [r3, #20]
 810ec4c:	f107 020c 	add.w	r2, r7, #12
 810ec50:	2112      	movs	r1, #18
 810ec52:	6978      	ldr	r0, [r7, #20]
 810ec54:	4798      	blx	r3
 810ec56:	4603      	mov	r3, r0
 810ec58:	2b00      	cmp	r3, #0
 810ec5a:	da03      	bge.n	810ec64 <LAN8742_Init+0x52>
       {
         status = LAN8742_STATUS_READ_ERROR;
 810ec5c:	f06f 0304 	mvn.w	r3, #4
 810ec60:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 810ec62:	e00b      	b.n	810ec7c <LAN8742_Init+0x6a>
       }

       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 810ec64:	68fb      	ldr	r3, [r7, #12]
 810ec66:	f003 031f 	and.w	r3, r3, #31
 810ec6a:	697a      	ldr	r2, [r7, #20]
 810ec6c:	429a      	cmp	r2, r3
 810ec6e:	d105      	bne.n	810ec7c <LAN8742_Init+0x6a>
       {
         pObj->DevAddr = addr;
 810ec70:	687b      	ldr	r3, [r7, #4]
 810ec72:	697a      	ldr	r2, [r7, #20]
 810ec74:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 810ec76:	2300      	movs	r3, #0
 810ec78:	613b      	str	r3, [r7, #16]
         break;
 810ec7a:	e005      	b.n	810ec88 <LAN8742_Init+0x76>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 810ec7c:	697b      	ldr	r3, [r7, #20]
 810ec7e:	3301      	adds	r3, #1
 810ec80:	617b      	str	r3, [r7, #20]
 810ec82:	697b      	ldr	r3, [r7, #20]
 810ec84:	2b1f      	cmp	r3, #31
 810ec86:	d9df      	bls.n	810ec48 <LAN8742_Init+0x36>
       }
     }

     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 810ec88:	687b      	ldr	r3, [r7, #4]
 810ec8a:	681b      	ldr	r3, [r3, #0]
 810ec8c:	2b1f      	cmp	r3, #31
 810ec8e:	d902      	bls.n	810ec96 <LAN8742_Init+0x84>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 810ec90:	f06f 0302 	mvn.w	r3, #2
 810ec94:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 810ec96:	693b      	ldr	r3, [r7, #16]
 810ec98:	2b00      	cmp	r3, #0
 810ec9a:	d102      	bne.n	810eca2 <LAN8742_Init+0x90>
     {
       pObj->Is_Initialized = 1;
 810ec9c:	687b      	ldr	r3, [r7, #4]
 810ec9e:	2201      	movs	r2, #1
 810eca0:	605a      	str	r2, [r3, #4]
     }
   }

   return status;
 810eca2:	693b      	ldr	r3, [r7, #16]
 }
 810eca4:	4618      	mov	r0, r3
 810eca6:	3718      	adds	r7, #24
 810eca8:	46bd      	mov	sp, r7
 810ecaa:	bd80      	pop	{r7, pc}

0810ecac <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 810ecac:	b580      	push	{r7, lr}
 810ecae:	b084      	sub	sp, #16
 810ecb0:	af00      	add	r7, sp, #0
 810ecb2:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 810ecb4:	2300      	movs	r3, #0
 810ecb6:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 810ecb8:	687b      	ldr	r3, [r7, #4]
 810ecba:	695b      	ldr	r3, [r3, #20]
 810ecbc:	687a      	ldr	r2, [r7, #4]
 810ecbe:	6810      	ldr	r0, [r2, #0]
 810ecc0:	f107 020c 	add.w	r2, r7, #12
 810ecc4:	2101      	movs	r1, #1
 810ecc6:	4798      	blx	r3
 810ecc8:	4603      	mov	r3, r0
 810ecca:	2b00      	cmp	r3, #0
 810eccc:	da02      	bge.n	810ecd4 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 810ecce:	f06f 0304 	mvn.w	r3, #4
 810ecd2:	e06e      	b.n	810edb2 <LAN8742_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 810ecd4:	687b      	ldr	r3, [r7, #4]
 810ecd6:	695b      	ldr	r3, [r3, #20]
 810ecd8:	687a      	ldr	r2, [r7, #4]
 810ecda:	6810      	ldr	r0, [r2, #0]
 810ecdc:	f107 020c 	add.w	r2, r7, #12
 810ece0:	2101      	movs	r1, #1
 810ece2:	4798      	blx	r3
 810ece4:	4603      	mov	r3, r0
 810ece6:	2b00      	cmp	r3, #0
 810ece8:	da02      	bge.n	810ecf0 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 810ecea:	f06f 0304 	mvn.w	r3, #4
 810ecee:	e060      	b.n	810edb2 <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 810ecf0:	68fb      	ldr	r3, [r7, #12]
 810ecf2:	f003 0304 	and.w	r3, r3, #4
 810ecf6:	2b00      	cmp	r3, #0
 810ecf8:	d101      	bne.n	810ecfe <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;
 810ecfa:	2301      	movs	r3, #1
 810ecfc:	e059      	b.n	810edb2 <LAN8742_GetLinkState+0x106>
  }

  /* Check Auto negotiation */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 810ecfe:	687b      	ldr	r3, [r7, #4]
 810ed00:	695b      	ldr	r3, [r3, #20]
 810ed02:	687a      	ldr	r2, [r7, #4]
 810ed04:	6810      	ldr	r0, [r2, #0]
 810ed06:	f107 020c 	add.w	r2, r7, #12
 810ed0a:	2100      	movs	r1, #0
 810ed0c:	4798      	blx	r3
 810ed0e:	4603      	mov	r3, r0
 810ed10:	2b00      	cmp	r3, #0
 810ed12:	da02      	bge.n	810ed1a <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 810ed14:	f06f 0304 	mvn.w	r3, #4
 810ed18:	e04b      	b.n	810edb2 <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 810ed1a:	68fb      	ldr	r3, [r7, #12]
 810ed1c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 810ed20:	2b00      	cmp	r3, #0
 810ed22:	d11b      	bne.n	810ed5c <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE))
 810ed24:	68fb      	ldr	r3, [r7, #12]
 810ed26:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 810ed2a:	2b00      	cmp	r3, #0
 810ed2c:	d006      	beq.n	810ed3c <LAN8742_GetLinkState+0x90>
 810ed2e:	68fb      	ldr	r3, [r7, #12]
 810ed30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 810ed34:	2b00      	cmp	r3, #0
 810ed36:	d001      	beq.n	810ed3c <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 810ed38:	2302      	movs	r3, #2
 810ed3a:	e03a      	b.n	810edb2 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 810ed3c:	68fb      	ldr	r3, [r7, #12]
 810ed3e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 810ed42:	2b00      	cmp	r3, #0
 810ed44:	d001      	beq.n	810ed4a <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 810ed46:	2303      	movs	r3, #3
 810ed48:	e033      	b.n	810edb2 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 810ed4a:	68fb      	ldr	r3, [r7, #12]
 810ed4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 810ed50:	2b00      	cmp	r3, #0
 810ed52:	d001      	beq.n	810ed58 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 810ed54:	2304      	movs	r3, #4
 810ed56:	e02c      	b.n	810edb2 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 810ed58:	2305      	movs	r3, #5
 810ed5a:	e02a      	b.n	810edb2 <LAN8742_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 810ed5c:	687b      	ldr	r3, [r7, #4]
 810ed5e:	695b      	ldr	r3, [r3, #20]
 810ed60:	687a      	ldr	r2, [r7, #4]
 810ed62:	6810      	ldr	r0, [r2, #0]
 810ed64:	f107 020c 	add.w	r2, r7, #12
 810ed68:	211f      	movs	r1, #31
 810ed6a:	4798      	blx	r3
 810ed6c:	4603      	mov	r3, r0
 810ed6e:	2b00      	cmp	r3, #0
 810ed70:	da02      	bge.n	810ed78 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 810ed72:	f06f 0304 	mvn.w	r3, #4
 810ed76:	e01c      	b.n	810edb2 <LAN8742_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 810ed78:	68fb      	ldr	r3, [r7, #12]
 810ed7a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 810ed7e:	2b00      	cmp	r3, #0
 810ed80:	d101      	bne.n	810ed86 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 810ed82:	2306      	movs	r3, #6
 810ed84:	e015      	b.n	810edb2 <LAN8742_GetLinkState+0x106>
    }

    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 810ed86:	68fb      	ldr	r3, [r7, #12]
 810ed88:	f003 031c 	and.w	r3, r3, #28
 810ed8c:	2b18      	cmp	r3, #24
 810ed8e:	d101      	bne.n	810ed94 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 810ed90:	2302      	movs	r3, #2
 810ed92:	e00e      	b.n	810edb2 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 810ed94:	68fb      	ldr	r3, [r7, #12]
 810ed96:	f003 031c 	and.w	r3, r3, #28
 810ed9a:	2b08      	cmp	r3, #8
 810ed9c:	d101      	bne.n	810eda2 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 810ed9e:	2303      	movs	r3, #3
 810eda0:	e007      	b.n	810edb2 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 810eda2:	68fb      	ldr	r3, [r7, #12]
 810eda4:	f003 031c 	and.w	r3, r3, #28
 810eda8:	2b14      	cmp	r3, #20
 810edaa:	d101      	bne.n	810edb0 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 810edac:	2304      	movs	r3, #4
 810edae:	e000      	b.n	810edb2 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 810edb0:	2305      	movs	r3, #5
    }
  }
}
 810edb2:	4618      	mov	r0, r3
 810edb4:	3710      	adds	r7, #16
 810edb6:	46bd      	mov	sp, r7
 810edb8:	bd80      	pop	{r7, pc}
	...

0810edbc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 810edbc:	b480      	push	{r7}
 810edbe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 810edc0:	4b0b      	ldr	r3, [pc, #44]	@ (810edf0 <SystemInit+0x34>)
 810edc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 810edc6:	4a0a      	ldr	r2, [pc, #40]	@ (810edf0 <SystemInit+0x34>)
 810edc8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 810edcc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 810edd0:	4b07      	ldr	r3, [pc, #28]	@ (810edf0 <SystemInit+0x34>)
 810edd2:	691b      	ldr	r3, [r3, #16]
 810edd4:	4a06      	ldr	r2, [pc, #24]	@ (810edf0 <SystemInit+0x34>)
 810edd6:	f043 0310 	orr.w	r3, r3, #16
 810edda:	6113      	str	r3, [r2, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D2_AXISRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BANK2_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 810eddc:	4b04      	ldr	r3, [pc, #16]	@ (810edf0 <SystemInit+0x34>)
 810edde:	f04f 6201 	mov.w	r2, #135266304	@ 0x8100000
 810ede2:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 810ede4:	bf00      	nop
 810ede6:	46bd      	mov	sp, r7
 810ede8:	f85d 7b04 	ldr.w	r7, [sp], #4
 810edec:	4770      	bx	lr
 810edee:	bf00      	nop
 810edf0:	e000ed00 	.word	0xe000ed00

0810edf4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 810edf4:	b580      	push	{r7, lr}
 810edf6:	b082      	sub	sp, #8
 810edf8:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 810edfa:	4b28      	ldr	r3, [pc, #160]	@ (810ee9c <HAL_Init+0xa8>)
 810edfc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 810ee00:	4a26      	ldr	r2, [pc, #152]	@ (810ee9c <HAL_Init+0xa8>)
 810ee02:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 810ee06:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 810ee0a:	4b24      	ldr	r3, [pc, #144]	@ (810ee9c <HAL_Init+0xa8>)
 810ee0c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 810ee10:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 810ee14:	603b      	str	r3, [r7, #0]
 810ee16:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 810ee18:	4b21      	ldr	r3, [pc, #132]	@ (810eea0 <HAL_Init+0xac>)
 810ee1a:	681b      	ldr	r3, [r3, #0]
 810ee1c:	f423 237f 	bic.w	r3, r3, #1044480	@ 0xff000
 810ee20:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 810ee24:	4a1e      	ldr	r2, [pc, #120]	@ (810eea0 <HAL_Init+0xac>)
 810ee26:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 810ee2a:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 810ee2c:	4b1c      	ldr	r3, [pc, #112]	@ (810eea0 <HAL_Init+0xac>)
 810ee2e:	681b      	ldr	r3, [r3, #0]
 810ee30:	4a1b      	ldr	r2, [pc, #108]	@ (810eea0 <HAL_Init+0xac>)
 810ee32:	f043 0301 	orr.w	r3, r3, #1
 810ee36:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 810ee38:	2003      	movs	r0, #3
 810ee3a:	f000 f91a 	bl	810f072 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 810ee3e:	f002 ff79 	bl	8111d34 <HAL_RCC_GetSysClockFreq>
 810ee42:	4602      	mov	r2, r0
 810ee44:	4b15      	ldr	r3, [pc, #84]	@ (810ee9c <HAL_Init+0xa8>)
 810ee46:	699b      	ldr	r3, [r3, #24]
 810ee48:	0a1b      	lsrs	r3, r3, #8
 810ee4a:	f003 030f 	and.w	r3, r3, #15
 810ee4e:	4915      	ldr	r1, [pc, #84]	@ (810eea4 <HAL_Init+0xb0>)
 810ee50:	5ccb      	ldrb	r3, [r1, r3]
 810ee52:	f003 031f 	and.w	r3, r3, #31
 810ee56:	fa22 f303 	lsr.w	r3, r2, r3
 810ee5a:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 810ee5c:	4b0f      	ldr	r3, [pc, #60]	@ (810ee9c <HAL_Init+0xa8>)
 810ee5e:	699b      	ldr	r3, [r3, #24]
 810ee60:	f003 030f 	and.w	r3, r3, #15
 810ee64:	4a0f      	ldr	r2, [pc, #60]	@ (810eea4 <HAL_Init+0xb0>)
 810ee66:	5cd3      	ldrb	r3, [r2, r3]
 810ee68:	f003 031f 	and.w	r3, r3, #31
 810ee6c:	687a      	ldr	r2, [r7, #4]
 810ee6e:	fa22 f303 	lsr.w	r3, r2, r3
 810ee72:	4a0d      	ldr	r2, [pc, #52]	@ (810eea8 <HAL_Init+0xb4>)
 810ee74:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 810ee76:	4b0c      	ldr	r3, [pc, #48]	@ (810eea8 <HAL_Init+0xb4>)
 810ee78:	681b      	ldr	r3, [r3, #0]
 810ee7a:	4a0c      	ldr	r2, [pc, #48]	@ (810eeac <HAL_Init+0xb8>)
 810ee7c:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 810ee7e:	2000      	movs	r0, #0
 810ee80:	f7f5 fd42 	bl	8104908 <HAL_InitTick>
 810ee84:	4603      	mov	r3, r0
 810ee86:	2b00      	cmp	r3, #0
 810ee88:	d001      	beq.n	810ee8e <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 810ee8a:	2301      	movs	r3, #1
 810ee8c:	e002      	b.n	810ee94 <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 810ee8e:	f7f5 fc1b 	bl	81046c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 810ee92:	2300      	movs	r3, #0
}
 810ee94:	4618      	mov	r0, r3
 810ee96:	3708      	adds	r7, #8
 810ee98:	46bd      	mov	sp, r7
 810ee9a:	bd80      	pop	{r7, pc}
 810ee9c:	58024400 	.word	0x58024400
 810eea0:	40024400 	.word	0x40024400
 810eea4:	0812ae04 	.word	0x0812ae04
 810eea8:	10000018 	.word	0x10000018
 810eeac:	10000014 	.word	0x10000014

0810eeb0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 810eeb0:	b480      	push	{r7}
 810eeb2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 810eeb4:	4b06      	ldr	r3, [pc, #24]	@ (810eed0 <HAL_IncTick+0x20>)
 810eeb6:	781b      	ldrb	r3, [r3, #0]
 810eeb8:	461a      	mov	r2, r3
 810eeba:	4b06      	ldr	r3, [pc, #24]	@ (810eed4 <HAL_IncTick+0x24>)
 810eebc:	681b      	ldr	r3, [r3, #0]
 810eebe:	4413      	add	r3, r2
 810eec0:	4a04      	ldr	r2, [pc, #16]	@ (810eed4 <HAL_IncTick+0x24>)
 810eec2:	6013      	str	r3, [r2, #0]
}
 810eec4:	bf00      	nop
 810eec6:	46bd      	mov	sp, r7
 810eec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 810eecc:	4770      	bx	lr
 810eece:	bf00      	nop
 810eed0:	10000020 	.word	0x10000020
 810eed4:	10000494 	.word	0x10000494

0810eed8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 810eed8:	b480      	push	{r7}
 810eeda:	af00      	add	r7, sp, #0
  return uwTick;
 810eedc:	4b03      	ldr	r3, [pc, #12]	@ (810eeec <HAL_GetTick+0x14>)
 810eede:	681b      	ldr	r3, [r3, #0]
}
 810eee0:	4618      	mov	r0, r3
 810eee2:	46bd      	mov	sp, r7
 810eee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 810eee8:	4770      	bx	lr
 810eeea:	bf00      	nop
 810eeec:	10000494 	.word	0x10000494

0810eef0 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 810eef0:	b480      	push	{r7}
 810eef2:	b083      	sub	sp, #12
 810eef4:	af00      	add	r7, sp, #0
 810eef6:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 810eef8:	4b06      	ldr	r3, [pc, #24]	@ (810ef14 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 810eefa:	685b      	ldr	r3, [r3, #4]
 810eefc:	f423 0260 	bic.w	r2, r3, #14680064	@ 0xe00000
 810ef00:	4904      	ldr	r1, [pc, #16]	@ (810ef14 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 810ef02:	687b      	ldr	r3, [r7, #4]
 810ef04:	4313      	orrs	r3, r2
 810ef06:	604b      	str	r3, [r1, #4]
}
 810ef08:	bf00      	nop
 810ef0a:	370c      	adds	r7, #12
 810ef0c:	46bd      	mov	sp, r7
 810ef0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ef12:	4770      	bx	lr
 810ef14:	58000400 	.word	0x58000400

0810ef18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 810ef18:	b480      	push	{r7}
 810ef1a:	b085      	sub	sp, #20
 810ef1c:	af00      	add	r7, sp, #0
 810ef1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 810ef20:	687b      	ldr	r3, [r7, #4]
 810ef22:	f003 0307 	and.w	r3, r3, #7
 810ef26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 810ef28:	4b0c      	ldr	r3, [pc, #48]	@ (810ef5c <__NVIC_SetPriorityGrouping+0x44>)
 810ef2a:	68db      	ldr	r3, [r3, #12]
 810ef2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 810ef2e:	68ba      	ldr	r2, [r7, #8]
 810ef30:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 810ef34:	4013      	ands	r3, r2
 810ef36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 810ef38:	68fb      	ldr	r3, [r7, #12]
 810ef3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 810ef3c:	68bb      	ldr	r3, [r7, #8]
 810ef3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 810ef40:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 810ef44:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 810ef48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 810ef4a:	4a04      	ldr	r2, [pc, #16]	@ (810ef5c <__NVIC_SetPriorityGrouping+0x44>)
 810ef4c:	68bb      	ldr	r3, [r7, #8]
 810ef4e:	60d3      	str	r3, [r2, #12]
}
 810ef50:	bf00      	nop
 810ef52:	3714      	adds	r7, #20
 810ef54:	46bd      	mov	sp, r7
 810ef56:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ef5a:	4770      	bx	lr
 810ef5c:	e000ed00 	.word	0xe000ed00

0810ef60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 810ef60:	b480      	push	{r7}
 810ef62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 810ef64:	4b04      	ldr	r3, [pc, #16]	@ (810ef78 <__NVIC_GetPriorityGrouping+0x18>)
 810ef66:	68db      	ldr	r3, [r3, #12]
 810ef68:	0a1b      	lsrs	r3, r3, #8
 810ef6a:	f003 0307 	and.w	r3, r3, #7
}
 810ef6e:	4618      	mov	r0, r3
 810ef70:	46bd      	mov	sp, r7
 810ef72:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ef76:	4770      	bx	lr
 810ef78:	e000ed00 	.word	0xe000ed00

0810ef7c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 810ef7c:	b480      	push	{r7}
 810ef7e:	b083      	sub	sp, #12
 810ef80:	af00      	add	r7, sp, #0
 810ef82:	4603      	mov	r3, r0
 810ef84:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 810ef86:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 810ef8a:	2b00      	cmp	r3, #0
 810ef8c:	db0b      	blt.n	810efa6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 810ef8e:	88fb      	ldrh	r3, [r7, #6]
 810ef90:	f003 021f 	and.w	r2, r3, #31
 810ef94:	4907      	ldr	r1, [pc, #28]	@ (810efb4 <__NVIC_EnableIRQ+0x38>)
 810ef96:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 810ef9a:	095b      	lsrs	r3, r3, #5
 810ef9c:	2001      	movs	r0, #1
 810ef9e:	fa00 f202 	lsl.w	r2, r0, r2
 810efa2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 810efa6:	bf00      	nop
 810efa8:	370c      	adds	r7, #12
 810efaa:	46bd      	mov	sp, r7
 810efac:	f85d 7b04 	ldr.w	r7, [sp], #4
 810efb0:	4770      	bx	lr
 810efb2:	bf00      	nop
 810efb4:	e000e100 	.word	0xe000e100

0810efb8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 810efb8:	b480      	push	{r7}
 810efba:	b083      	sub	sp, #12
 810efbc:	af00      	add	r7, sp, #0
 810efbe:	4603      	mov	r3, r0
 810efc0:	6039      	str	r1, [r7, #0]
 810efc2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 810efc4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 810efc8:	2b00      	cmp	r3, #0
 810efca:	db0a      	blt.n	810efe2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 810efcc:	683b      	ldr	r3, [r7, #0]
 810efce:	b2da      	uxtb	r2, r3
 810efd0:	490c      	ldr	r1, [pc, #48]	@ (810f004 <__NVIC_SetPriority+0x4c>)
 810efd2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 810efd6:	0112      	lsls	r2, r2, #4
 810efd8:	b2d2      	uxtb	r2, r2
 810efda:	440b      	add	r3, r1
 810efdc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 810efe0:	e00a      	b.n	810eff8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 810efe2:	683b      	ldr	r3, [r7, #0]
 810efe4:	b2da      	uxtb	r2, r3
 810efe6:	4908      	ldr	r1, [pc, #32]	@ (810f008 <__NVIC_SetPriority+0x50>)
 810efe8:	88fb      	ldrh	r3, [r7, #6]
 810efea:	f003 030f 	and.w	r3, r3, #15
 810efee:	3b04      	subs	r3, #4
 810eff0:	0112      	lsls	r2, r2, #4
 810eff2:	b2d2      	uxtb	r2, r2
 810eff4:	440b      	add	r3, r1
 810eff6:	761a      	strb	r2, [r3, #24]
}
 810eff8:	bf00      	nop
 810effa:	370c      	adds	r7, #12
 810effc:	46bd      	mov	sp, r7
 810effe:	f85d 7b04 	ldr.w	r7, [sp], #4
 810f002:	4770      	bx	lr
 810f004:	e000e100 	.word	0xe000e100
 810f008:	e000ed00 	.word	0xe000ed00

0810f00c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 810f00c:	b480      	push	{r7}
 810f00e:	b089      	sub	sp, #36	@ 0x24
 810f010:	af00      	add	r7, sp, #0
 810f012:	60f8      	str	r0, [r7, #12]
 810f014:	60b9      	str	r1, [r7, #8]
 810f016:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 810f018:	68fb      	ldr	r3, [r7, #12]
 810f01a:	f003 0307 	and.w	r3, r3, #7
 810f01e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 810f020:	69fb      	ldr	r3, [r7, #28]
 810f022:	f1c3 0307 	rsb	r3, r3, #7
 810f026:	2b04      	cmp	r3, #4
 810f028:	bf28      	it	cs
 810f02a:	2304      	movcs	r3, #4
 810f02c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 810f02e:	69fb      	ldr	r3, [r7, #28]
 810f030:	3304      	adds	r3, #4
 810f032:	2b06      	cmp	r3, #6
 810f034:	d902      	bls.n	810f03c <NVIC_EncodePriority+0x30>
 810f036:	69fb      	ldr	r3, [r7, #28]
 810f038:	3b03      	subs	r3, #3
 810f03a:	e000      	b.n	810f03e <NVIC_EncodePriority+0x32>
 810f03c:	2300      	movs	r3, #0
 810f03e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 810f040:	f04f 32ff 	mov.w	r2, #4294967295
 810f044:	69bb      	ldr	r3, [r7, #24]
 810f046:	fa02 f303 	lsl.w	r3, r2, r3
 810f04a:	43da      	mvns	r2, r3
 810f04c:	68bb      	ldr	r3, [r7, #8]
 810f04e:	401a      	ands	r2, r3
 810f050:	697b      	ldr	r3, [r7, #20]
 810f052:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 810f054:	f04f 31ff 	mov.w	r1, #4294967295
 810f058:	697b      	ldr	r3, [r7, #20]
 810f05a:	fa01 f303 	lsl.w	r3, r1, r3
 810f05e:	43d9      	mvns	r1, r3
 810f060:	687b      	ldr	r3, [r7, #4]
 810f062:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 810f064:	4313      	orrs	r3, r2
         );
}
 810f066:	4618      	mov	r0, r3
 810f068:	3724      	adds	r7, #36	@ 0x24
 810f06a:	46bd      	mov	sp, r7
 810f06c:	f85d 7b04 	ldr.w	r7, [sp], #4
 810f070:	4770      	bx	lr

0810f072 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 810f072:	b580      	push	{r7, lr}
 810f074:	b082      	sub	sp, #8
 810f076:	af00      	add	r7, sp, #0
 810f078:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 810f07a:	6878      	ldr	r0, [r7, #4]
 810f07c:	f7ff ff4c 	bl	810ef18 <__NVIC_SetPriorityGrouping>
}
 810f080:	bf00      	nop
 810f082:	3708      	adds	r7, #8
 810f084:	46bd      	mov	sp, r7
 810f086:	bd80      	pop	{r7, pc}

0810f088 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 810f088:	b580      	push	{r7, lr}
 810f08a:	b086      	sub	sp, #24
 810f08c:	af00      	add	r7, sp, #0
 810f08e:	4603      	mov	r3, r0
 810f090:	60b9      	str	r1, [r7, #8]
 810f092:	607a      	str	r2, [r7, #4]
 810f094:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 810f096:	f7ff ff63 	bl	810ef60 <__NVIC_GetPriorityGrouping>
 810f09a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 810f09c:	687a      	ldr	r2, [r7, #4]
 810f09e:	68b9      	ldr	r1, [r7, #8]
 810f0a0:	6978      	ldr	r0, [r7, #20]
 810f0a2:	f7ff ffb3 	bl	810f00c <NVIC_EncodePriority>
 810f0a6:	4602      	mov	r2, r0
 810f0a8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 810f0ac:	4611      	mov	r1, r2
 810f0ae:	4618      	mov	r0, r3
 810f0b0:	f7ff ff82 	bl	810efb8 <__NVIC_SetPriority>
}
 810f0b4:	bf00      	nop
 810f0b6:	3718      	adds	r7, #24
 810f0b8:	46bd      	mov	sp, r7
 810f0ba:	bd80      	pop	{r7, pc}

0810f0bc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 810f0bc:	b580      	push	{r7, lr}
 810f0be:	b082      	sub	sp, #8
 810f0c0:	af00      	add	r7, sp, #0
 810f0c2:	4603      	mov	r3, r0
 810f0c4:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 810f0c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 810f0ca:	4618      	mov	r0, r3
 810f0cc:	f7ff ff56 	bl	810ef7c <__NVIC_EnableIRQ>
}
 810f0d0:	bf00      	nop
 810f0d2:	3708      	adds	r7, #8
 810f0d4:	46bd      	mov	sp, r7
 810f0d6:	bd80      	pop	{r7, pc}

0810f0d8 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 810f0d8:	b480      	push	{r7}
 810f0da:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 810f0dc:	4b07      	ldr	r3, [pc, #28]	@ (810f0fc <HAL_GetCurrentCPUID+0x24>)
 810f0de:	681b      	ldr	r3, [r3, #0]
 810f0e0:	091b      	lsrs	r3, r3, #4
 810f0e2:	f003 030f 	and.w	r3, r3, #15
 810f0e6:	2b07      	cmp	r3, #7
 810f0e8:	d101      	bne.n	810f0ee <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 810f0ea:	2303      	movs	r3, #3
 810f0ec:	e000      	b.n	810f0f0 <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 810f0ee:	2301      	movs	r3, #1
  }
}
 810f0f0:	4618      	mov	r0, r3
 810f0f2:	46bd      	mov	sp, r7
 810f0f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 810f0f8:	4770      	bx	lr
 810f0fa:	bf00      	nop
 810f0fc:	e000ed00 	.word	0xe000ed00

0810f100 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 810f100:	b580      	push	{r7, lr}
 810f102:	b084      	sub	sp, #16
 810f104:	af00      	add	r7, sp, #0
 810f106:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 810f108:	687b      	ldr	r3, [r7, #4]
 810f10a:	2b00      	cmp	r3, #0
 810f10c:	d101      	bne.n	810f112 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 810f10e:	2301      	movs	r3, #1
 810f110:	e0e7      	b.n	810f2e2 <HAL_ETH_Init+0x1e2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 810f112:	687b      	ldr	r3, [r7, #4]
 810f114:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 810f118:	2b00      	cmp	r3, #0
 810f11a:	d106      	bne.n	810f12a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 810f11c:	687b      	ldr	r3, [r7, #4]
 810f11e:	2223      	movs	r2, #35	@ 0x23
 810f120:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 810f124:	6878      	ldr	r0, [r7, #4]
 810f126:	f7fc ffd1 	bl	810c0cc <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 810f12a:	4b70      	ldr	r3, [pc, #448]	@ (810f2ec <HAL_ETH_Init+0x1ec>)
 810f12c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 810f130:	4a6e      	ldr	r2, [pc, #440]	@ (810f2ec <HAL_ETH_Init+0x1ec>)
 810f132:	f043 0302 	orr.w	r3, r3, #2
 810f136:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 810f13a:	4b6c      	ldr	r3, [pc, #432]	@ (810f2ec <HAL_ETH_Init+0x1ec>)
 810f13c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 810f140:	f003 0302 	and.w	r3, r3, #2
 810f144:	60bb      	str	r3, [r7, #8]
 810f146:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 810f148:	687b      	ldr	r3, [r7, #4]
 810f14a:	7a1b      	ldrb	r3, [r3, #8]
 810f14c:	2b00      	cmp	r3, #0
 810f14e:	d103      	bne.n	810f158 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 810f150:	2000      	movs	r0, #0
 810f152:	f7ff fecd 	bl	810eef0 <HAL_SYSCFG_ETHInterfaceSelect>
 810f156:	e003      	b.n	810f160 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 810f158:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 810f15c:	f7ff fec8 	bl	810eef0 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 810f160:	4b63      	ldr	r3, [pc, #396]	@ (810f2f0 <HAL_ETH_Init+0x1f0>)
 810f162:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 810f164:	687b      	ldr	r3, [r7, #4]
 810f166:	681b      	ldr	r3, [r3, #0]
 810f168:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 810f16c:	681b      	ldr	r3, [r3, #0]
 810f16e:	687a      	ldr	r2, [r7, #4]
 810f170:	6812      	ldr	r2, [r2, #0]
 810f172:	f043 0301 	orr.w	r3, r3, #1
 810f176:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 810f17a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 810f17c:	f7ff feac 	bl	810eed8 <HAL_GetTick>
 810f180:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 810f182:	e011      	b.n	810f1a8 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 810f184:	f7ff fea8 	bl	810eed8 <HAL_GetTick>
 810f188:	4602      	mov	r2, r0
 810f18a:	68fb      	ldr	r3, [r7, #12]
 810f18c:	1ad3      	subs	r3, r2, r3
 810f18e:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 810f192:	d909      	bls.n	810f1a8 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 810f194:	687b      	ldr	r3, [r7, #4]
 810f196:	2204      	movs	r2, #4
 810f198:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 810f19c:	687b      	ldr	r3, [r7, #4]
 810f19e:	22e0      	movs	r2, #224	@ 0xe0
 810f1a0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 810f1a4:	2301      	movs	r3, #1
 810f1a6:	e09c      	b.n	810f2e2 <HAL_ETH_Init+0x1e2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 810f1a8:	687b      	ldr	r3, [r7, #4]
 810f1aa:	681b      	ldr	r3, [r3, #0]
 810f1ac:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 810f1b0:	681b      	ldr	r3, [r3, #0]
 810f1b2:	f003 0301 	and.w	r3, r3, #1
 810f1b6:	2b00      	cmp	r3, #0
 810f1b8:	d1e4      	bne.n	810f184 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 810f1ba:	6878      	ldr	r0, [r7, #4]
 810f1bc:	f000 ff34 	bl	8110028 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 810f1c0:	f002 ff32 	bl	8112028 <HAL_RCC_GetHCLKFreq>
 810f1c4:	4603      	mov	r3, r0
 810f1c6:	4a4b      	ldr	r2, [pc, #300]	@ (810f2f4 <HAL_ETH_Init+0x1f4>)
 810f1c8:	fba2 2303 	umull	r2, r3, r2, r3
 810f1cc:	0c9a      	lsrs	r2, r3, #18
 810f1ce:	687b      	ldr	r3, [r7, #4]
 810f1d0:	681b      	ldr	r3, [r3, #0]
 810f1d2:	3a01      	subs	r2, #1
 810f1d4:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 810f1d8:	6878      	ldr	r0, [r7, #4]
 810f1da:	f001 f931 	bl	8110440 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 810f1de:	687b      	ldr	r3, [r7, #4]
 810f1e0:	681b      	ldr	r3, [r3, #0]
 810f1e2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 810f1e6:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 810f1ea:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
 810f1ee:	687a      	ldr	r2, [r7, #4]
 810f1f0:	6812      	ldr	r2, [r2, #0]
 810f1f2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 810f1f6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 810f1fa:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 810f1fe:	687b      	ldr	r3, [r7, #4]
 810f200:	695b      	ldr	r3, [r3, #20]
 810f202:	f003 0303 	and.w	r3, r3, #3
 810f206:	2b00      	cmp	r3, #0
 810f208:	d009      	beq.n	810f21e <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 810f20a:	687b      	ldr	r3, [r7, #4]
 810f20c:	2201      	movs	r2, #1
 810f20e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 810f212:	687b      	ldr	r3, [r7, #4]
 810f214:	22e0      	movs	r2, #224	@ 0xe0
 810f216:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Return Error */
    return HAL_ERROR;
 810f21a:	2301      	movs	r3, #1
 810f21c:	e061      	b.n	810f2e2 <HAL_ETH_Init+0x1e2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 810f21e:	687b      	ldr	r3, [r7, #4]
 810f220:	681b      	ldr	r3, [r3, #0]
 810f222:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 810f226:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 810f22a:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 810f22e:	f023 037e 	bic.w	r3, r3, #126	@ 0x7e
 810f232:	687a      	ldr	r2, [r7, #4]
 810f234:	6952      	ldr	r2, [r2, #20]
 810f236:	0051      	lsls	r1, r2, #1
 810f238:	687a      	ldr	r2, [r7, #4]
 810f23a:	6812      	ldr	r2, [r2, #0]
 810f23c:	430b      	orrs	r3, r1
 810f23e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 810f242:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 810f246:	6878      	ldr	r0, [r7, #4]
 810f248:	f001 f997 	bl	811057a <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 810f24c:	6878      	ldr	r0, [r7, #4]
 810f24e:	f001 f9dd 	bl	811060c <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 810f252:	687b      	ldr	r3, [r7, #4]
 810f254:	685b      	ldr	r3, [r3, #4]
 810f256:	3305      	adds	r3, #5
 810f258:	781b      	ldrb	r3, [r3, #0]
 810f25a:	021a      	lsls	r2, r3, #8
 810f25c:	687b      	ldr	r3, [r7, #4]
 810f25e:	685b      	ldr	r3, [r3, #4]
 810f260:	3304      	adds	r3, #4
 810f262:	781b      	ldrb	r3, [r3, #0]
 810f264:	4619      	mov	r1, r3
 810f266:	687b      	ldr	r3, [r7, #4]
 810f268:	681b      	ldr	r3, [r3, #0]
 810f26a:	430a      	orrs	r2, r1
 810f26c:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 810f270:	687b      	ldr	r3, [r7, #4]
 810f272:	685b      	ldr	r3, [r3, #4]
 810f274:	3303      	adds	r3, #3
 810f276:	781b      	ldrb	r3, [r3, #0]
 810f278:	061a      	lsls	r2, r3, #24
 810f27a:	687b      	ldr	r3, [r7, #4]
 810f27c:	685b      	ldr	r3, [r3, #4]
 810f27e:	3302      	adds	r3, #2
 810f280:	781b      	ldrb	r3, [r3, #0]
 810f282:	041b      	lsls	r3, r3, #16
 810f284:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 810f286:	687b      	ldr	r3, [r7, #4]
 810f288:	685b      	ldr	r3, [r3, #4]
 810f28a:	3301      	adds	r3, #1
 810f28c:	781b      	ldrb	r3, [r3, #0]
 810f28e:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 810f290:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 810f292:	687b      	ldr	r3, [r7, #4]
 810f294:	685b      	ldr	r3, [r3, #4]
 810f296:	781b      	ldrb	r3, [r3, #0]
 810f298:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 810f29a:	687b      	ldr	r3, [r7, #4]
 810f29c:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 810f29e:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 810f2a0:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 810f2a4:	687b      	ldr	r3, [r7, #4]
 810f2a6:	681b      	ldr	r3, [r3, #0]
 810f2a8:	f8d3 170c 	ldr.w	r1, [r3, #1804]	@ 0x70c
 810f2ac:	687b      	ldr	r3, [r7, #4]
 810f2ae:	681a      	ldr	r2, [r3, #0]
 810f2b0:	4b11      	ldr	r3, [pc, #68]	@ (810f2f8 <HAL_ETH_Init+0x1f8>)
 810f2b2:	430b      	orrs	r3, r1
 810f2b4:	f8c2 370c 	str.w	r3, [r2, #1804]	@ 0x70c
          ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 810f2b8:	687b      	ldr	r3, [r7, #4]
 810f2ba:	681b      	ldr	r3, [r3, #0]
 810f2bc:	f8d3 3710 	ldr.w	r3, [r3, #1808]	@ 0x710
 810f2c0:	687a      	ldr	r2, [r7, #4]
 810f2c2:	6812      	ldr	r2, [r2, #0]
 810f2c4:	f043 6342 	orr.w	r3, r3, #203423744	@ 0xc200000
 810f2c8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 810f2cc:	f8c2 3710 	str.w	r3, [r2, #1808]	@ 0x710
          ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 810f2d0:	687b      	ldr	r3, [r7, #4]
 810f2d2:	2200      	movs	r2, #0
 810f2d4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 810f2d8:	687b      	ldr	r3, [r7, #4]
 810f2da:	2210      	movs	r2, #16
 810f2dc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 810f2e0:	2300      	movs	r3, #0
}
 810f2e2:	4618      	mov	r0, r3
 810f2e4:	3710      	adds	r7, #16
 810f2e6:	46bd      	mov	sp, r7
 810f2e8:	bd80      	pop	{r7, pc}
 810f2ea:	bf00      	nop
 810f2ec:	58024400 	.word	0x58024400
 810f2f0:	58000400 	.word	0x58000400
 810f2f4:	431bde83 	.word	0x431bde83
 810f2f8:	0c020060 	.word	0x0c020060

0810f2fc <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 810f2fc:	b580      	push	{r7, lr}
 810f2fe:	b082      	sub	sp, #8
 810f300:	af00      	add	r7, sp, #0
 810f302:	6078      	str	r0, [r7, #4]
  if (heth->gState == HAL_ETH_STATE_READY)
 810f304:	687b      	ldr	r3, [r7, #4]
 810f306:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 810f30a:	2b10      	cmp	r3, #16
 810f30c:	d166      	bne.n	810f3dc <HAL_ETH_Start_IT+0xe0>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 810f30e:	687b      	ldr	r3, [r7, #4]
 810f310:	2223      	movs	r2, #35	@ 0x23
 810f312:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 810f316:	687b      	ldr	r3, [r7, #4]
 810f318:	2201      	movs	r2, #1
 810f31a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 810f31c:	687b      	ldr	r3, [r7, #4]
 810f31e:	2204      	movs	r2, #4
 810f320:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 810f322:	6878      	ldr	r0, [r7, #4]
 810f324:	f000 f9e5 	bl	810f6f2 <ETH_UpdateDescriptor>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 810f328:	687b      	ldr	r3, [r7, #4]
 810f32a:	681b      	ldr	r3, [r3, #0]
 810f32c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 810f330:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 810f334:	687a      	ldr	r2, [r7, #4]
 810f336:	6812      	ldr	r2, [r2, #0]
 810f338:	f043 0301 	orr.w	r3, r3, #1
 810f33c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 810f340:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 810f344:	687b      	ldr	r3, [r7, #4]
 810f346:	681b      	ldr	r3, [r3, #0]
 810f348:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 810f34c:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 810f350:	687a      	ldr	r2, [r7, #4]
 810f352:	6812      	ldr	r2, [r2, #0]
 810f354:	f043 0301 	orr.w	r3, r3, #1
 810f358:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 810f35c:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108

    /* Clear Tx and Rx process stopped flags */
    heth->Instance->DMACSR |= (ETH_DMACSR_TPS | ETH_DMACSR_RPS);
 810f360:	687b      	ldr	r3, [r7, #4]
 810f362:	681b      	ldr	r3, [r3, #0]
 810f364:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 810f368:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 810f36c:	687a      	ldr	r2, [r7, #4]
 810f36e:	6812      	ldr	r2, [r2, #0]
 810f370:	f443 7381 	orr.w	r3, r3, #258	@ 0x102
 810f374:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 810f378:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 810f37c:	687b      	ldr	r3, [r7, #4]
 810f37e:	681b      	ldr	r3, [r3, #0]
 810f380:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 810f384:	687b      	ldr	r3, [r7, #4]
 810f386:	681b      	ldr	r3, [r3, #0]
 810f388:	f042 0201 	orr.w	r2, r2, #1
 810f38c:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 810f390:	687b      	ldr	r3, [r7, #4]
 810f392:	681b      	ldr	r3, [r3, #0]
 810f394:	681a      	ldr	r2, [r3, #0]
 810f396:	687b      	ldr	r3, [r7, #4]
 810f398:	681b      	ldr	r3, [r3, #0]
 810f39a:	f042 0202 	orr.w	r2, r2, #2
 810f39e:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 810f3a0:	687b      	ldr	r3, [r7, #4]
 810f3a2:	681b      	ldr	r3, [r3, #0]
 810f3a4:	681a      	ldr	r2, [r3, #0]
 810f3a6:	687b      	ldr	r3, [r7, #4]
 810f3a8:	681b      	ldr	r3, [r3, #0]
 810f3aa:	f042 0201 	orr.w	r2, r2, #1
 810f3ae:	601a      	str	r2, [r3, #0]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 810f3b0:	687b      	ldr	r3, [r7, #4]
 810f3b2:	681b      	ldr	r3, [r3, #0]
 810f3b4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 810f3b8:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 810f3bc:	687a      	ldr	r2, [r7, #4]
 810f3be:	6812      	ldr	r2, [r2, #0]
 810f3c0:	f443 4350 	orr.w	r3, r3, #53248	@ 0xd000
 810f3c4:	f043 03c1 	orr.w	r3, r3, #193	@ 0xc1
 810f3c8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 810f3cc:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
                                   ETH_DMACIER_FBEE | ETH_DMACIER_AIE | ETH_DMACIER_RBUE));

    heth->gState = HAL_ETH_STATE_STARTED;
 810f3d0:	687b      	ldr	r3, [r7, #4]
 810f3d2:	2223      	movs	r2, #35	@ 0x23
 810f3d4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    return HAL_OK;
 810f3d8:	2300      	movs	r3, #0
 810f3da:	e000      	b.n	810f3de <HAL_ETH_Start_IT+0xe2>
  }
  else
  {
    return HAL_ERROR;
 810f3dc:	2301      	movs	r3, #1
  }
}
 810f3de:	4618      	mov	r0, r3
 810f3e0:	3708      	adds	r7, #8
 810f3e2:	46bd      	mov	sp, r7
 810f3e4:	bd80      	pop	{r7, pc}

0810f3e6 <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 810f3e6:	b480      	push	{r7}
 810f3e8:	b085      	sub	sp, #20
 810f3ea:	af00      	add	r7, sp, #0
 810f3ec:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 810f3ee:	687b      	ldr	r3, [r7, #4]
 810f3f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 810f3f4:	2b23      	cmp	r3, #35	@ 0x23
 810f3f6:	d167      	bne.n	810f4c8 <HAL_ETH_Stop_IT+0xe2>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 810f3f8:	687b      	ldr	r3, [r7, #4]
 810f3fa:	2223      	movs	r2, #35	@ 0x23
 810f3fc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Disable interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 810f400:	687b      	ldr	r3, [r7, #4]
 810f402:	681b      	ldr	r3, [r3, #0]
 810f404:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 810f408:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 810f40c:	687a      	ldr	r2, [r7, #4]
 810f40e:	6812      	ldr	r2, [r2, #0]
 810f410:	f423 4350 	bic.w	r3, r3, #53248	@ 0xd000
 810f414:	f023 03c1 	bic.w	r3, r3, #193	@ 0xc1
 810f418:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 810f41c:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
                                    ETH_DMACIER_FBEE | ETH_DMACIER_AIE | ETH_DMACIER_RBUE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 810f420:	687b      	ldr	r3, [r7, #4]
 810f422:	681b      	ldr	r3, [r3, #0]
 810f424:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 810f428:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 810f42c:	687a      	ldr	r2, [r7, #4]
 810f42e:	6812      	ldr	r2, [r2, #0]
 810f430:	f023 0301 	bic.w	r3, r3, #1
 810f434:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 810f438:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 810f43c:	687b      	ldr	r3, [r7, #4]
 810f43e:	681b      	ldr	r3, [r3, #0]
 810f440:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 810f444:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 810f448:	687a      	ldr	r2, [r7, #4]
 810f44a:	6812      	ldr	r2, [r2, #0]
 810f44c:	f023 0301 	bic.w	r3, r3, #1
 810f450:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 810f454:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 810f458:	687b      	ldr	r3, [r7, #4]
 810f45a:	681b      	ldr	r3, [r3, #0]
 810f45c:	681a      	ldr	r2, [r3, #0]
 810f45e:	687b      	ldr	r3, [r7, #4]
 810f460:	681b      	ldr	r3, [r3, #0]
 810f462:	f022 0201 	bic.w	r2, r2, #1
 810f466:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 810f468:	687b      	ldr	r3, [r7, #4]
 810f46a:	681b      	ldr	r3, [r3, #0]
 810f46c:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 810f470:	687b      	ldr	r3, [r7, #4]
 810f472:	681b      	ldr	r3, [r3, #0]
 810f474:	f042 0201 	orr.w	r2, r2, #1
 810f478:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 810f47c:	687b      	ldr	r3, [r7, #4]
 810f47e:	681b      	ldr	r3, [r3, #0]
 810f480:	681a      	ldr	r2, [r3, #0]
 810f482:	687b      	ldr	r3, [r7, #4]
 810f484:	681b      	ldr	r3, [r3, #0]
 810f486:	f022 0202 	bic.w	r2, r2, #2
 810f48a:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 810f48c:	2300      	movs	r3, #0
 810f48e:	60fb      	str	r3, [r7, #12]
 810f490:	e00e      	b.n	810f4b0 <HAL_ETH_Stop_IT+0xca>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 810f492:	687b      	ldr	r3, [r7, #4]
 810f494:	68fa      	ldr	r2, [r7, #12]
 810f496:	3212      	adds	r2, #18
 810f498:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 810f49c:	60bb      	str	r3, [r7, #8]
      CLEAR_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 810f49e:	68bb      	ldr	r3, [r7, #8]
 810f4a0:	68db      	ldr	r3, [r3, #12]
 810f4a2:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 810f4a6:	68bb      	ldr	r3, [r7, #8]
 810f4a8:	60da      	str	r2, [r3, #12]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 810f4aa:	68fb      	ldr	r3, [r7, #12]
 810f4ac:	3301      	adds	r3, #1
 810f4ae:	60fb      	str	r3, [r7, #12]
 810f4b0:	68fb      	ldr	r3, [r7, #12]
 810f4b2:	2b03      	cmp	r3, #3
 810f4b4:	d9ed      	bls.n	810f492 <HAL_ETH_Stop_IT+0xac>
    }

    heth->RxDescList.ItMode = 0U;
 810f4b6:	687b      	ldr	r3, [r7, #4]
 810f4b8:	2200      	movs	r2, #0
 810f4ba:	659a      	str	r2, [r3, #88]	@ 0x58

    heth->gState = HAL_ETH_STATE_READY;
 810f4bc:	687b      	ldr	r3, [r7, #4]
 810f4be:	2210      	movs	r2, #16
 810f4c0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Return function status */
    return HAL_OK;
 810f4c4:	2300      	movs	r3, #0
 810f4c6:	e000      	b.n	810f4ca <HAL_ETH_Stop_IT+0xe4>
  }
  else
  {
    return HAL_ERROR;
 810f4c8:	2301      	movs	r3, #1
  }
}
 810f4ca:	4618      	mov	r0, r3
 810f4cc:	3714      	adds	r7, #20
 810f4ce:	46bd      	mov	sp, r7
 810f4d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 810f4d4:	4770      	bx	lr

0810f4d6 <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfigTypeDef *pTxConfig)
{
 810f4d6:	b580      	push	{r7, lr}
 810f4d8:	b082      	sub	sp, #8
 810f4da:	af00      	add	r7, sp, #0
 810f4dc:	6078      	str	r0, [r7, #4]
 810f4de:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 810f4e0:	683b      	ldr	r3, [r7, #0]
 810f4e2:	2b00      	cmp	r3, #0
 810f4e4:	d109      	bne.n	810f4fa <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 810f4e6:	687b      	ldr	r3, [r7, #4]
 810f4e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 810f4ec:	f043 0201 	orr.w	r2, r3, #1
 810f4f0:	687b      	ldr	r3, [r7, #4]
 810f4f2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 810f4f6:	2301      	movs	r3, #1
 810f4f8:	e03a      	b.n	810f570 <HAL_ETH_Transmit_IT+0x9a>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 810f4fa:	687b      	ldr	r3, [r7, #4]
 810f4fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 810f500:	2b23      	cmp	r3, #35	@ 0x23
 810f502:	d134      	bne.n	810f56e <HAL_ETH_Transmit_IT+0x98>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 810f504:	683b      	ldr	r3, [r7, #0]
 810f506:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 810f508:	687b      	ldr	r3, [r7, #4]
 810f50a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 810f50c:	2201      	movs	r2, #1
 810f50e:	6839      	ldr	r1, [r7, #0]
 810f510:	6878      	ldr	r0, [r7, #4]
 810f512:	f001 f8d8 	bl	81106c6 <ETH_Prepare_Tx_Descriptors>
 810f516:	4603      	mov	r3, r0
 810f518:	2b00      	cmp	r3, #0
 810f51a:	d009      	beq.n	810f530 <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 810f51c:	687b      	ldr	r3, [r7, #4]
 810f51e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 810f522:	f043 0202 	orr.w	r2, r3, #2
 810f526:	687b      	ldr	r3, [r7, #4]
 810f528:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      return HAL_ERROR;
 810f52c:	2301      	movs	r3, #1
 810f52e:	e01f      	b.n	810f570 <HAL_ETH_Transmit_IT+0x9a>
  __ASM volatile ("dsb 0xF":::"memory");
 810f530:	f3bf 8f4f 	dsb	sy
}
 810f534:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 810f536:	687b      	ldr	r3, [r7, #4]
 810f538:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810f53a:	1c5a      	adds	r2, r3, #1
 810f53c:	687b      	ldr	r3, [r7, #4]
 810f53e:	629a      	str	r2, [r3, #40]	@ 0x28
 810f540:	687b      	ldr	r3, [r7, #4]
 810f542:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810f544:	2b03      	cmp	r3, #3
 810f546:	d904      	bls.n	810f552 <HAL_ETH_Transmit_IT+0x7c>
 810f548:	687b      	ldr	r3, [r7, #4]
 810f54a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810f54c:	1f1a      	subs	r2, r3, #4
 810f54e:	687b      	ldr	r3, [r7, #4]
 810f550:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 810f552:	687b      	ldr	r3, [r7, #4]
 810f554:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 810f556:	687b      	ldr	r3, [r7, #4]
 810f558:	681a      	ldr	r2, [r3, #0]
 810f55a:	687b      	ldr	r3, [r7, #4]
 810f55c:	3106      	adds	r1, #6
 810f55e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 810f562:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 810f566:	f8c2 3120 	str.w	r3, [r2, #288]	@ 0x120

    return HAL_OK;
 810f56a:	2300      	movs	r3, #0
 810f56c:	e000      	b.n	810f570 <HAL_ETH_Transmit_IT+0x9a>

  }
  else
  {
    return HAL_ERROR;
 810f56e:	2301      	movs	r3, #1
  }
}
 810f570:	4618      	mov	r0, r3
 810f572:	3708      	adds	r7, #8
 810f574:	46bd      	mov	sp, r7
 810f576:	bd80      	pop	{r7, pc}

0810f578 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 810f578:	b580      	push	{r7, lr}
 810f57a:	b088      	sub	sp, #32
 810f57c:	af00      	add	r7, sp, #0
 810f57e:	6078      	str	r0, [r7, #4]
 810f580:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 810f582:	2300      	movs	r3, #0
 810f584:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 810f586:	2300      	movs	r3, #0
 810f588:	74fb      	strb	r3, [r7, #19]

  if (pAppBuff == NULL)
 810f58a:	683b      	ldr	r3, [r7, #0]
 810f58c:	2b00      	cmp	r3, #0
 810f58e:	d109      	bne.n	810f5a4 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 810f590:	687b      	ldr	r3, [r7, #4]
 810f592:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 810f596:	f043 0201 	orr.w	r2, r3, #1
 810f59a:	687b      	ldr	r3, [r7, #4]
 810f59c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 810f5a0:	2301      	movs	r3, #1
 810f5a2:	e0a2      	b.n	810f6ea <HAL_ETH_ReadData+0x172>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 810f5a4:	687b      	ldr	r3, [r7, #4]
 810f5a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 810f5aa:	2b23      	cmp	r3, #35	@ 0x23
 810f5ac:	d001      	beq.n	810f5b2 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 810f5ae:	2301      	movs	r3, #1
 810f5b0:	e09b      	b.n	810f6ea <HAL_ETH_ReadData+0x172>
  }

  descidx = heth->RxDescList.RxDescIdx;
 810f5b2:	687b      	ldr	r3, [r7, #4]
 810f5b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 810f5b6:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 810f5b8:	687b      	ldr	r3, [r7, #4]
 810f5ba:	69fa      	ldr	r2, [r7, #28]
 810f5bc:	3212      	adds	r2, #18
 810f5be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 810f5c2:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 810f5c4:	687b      	ldr	r3, [r7, #4]
 810f5c6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 810f5c8:	f1c3 0304 	rsb	r3, r3, #4
 810f5cc:	60fb      	str	r3, [r7, #12]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 810f5ce:	e064      	b.n	810f69a <HAL_ETH_ReadData+0x122>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_CTXT)  != (uint32_t)RESET)
 810f5d0:	69bb      	ldr	r3, [r7, #24]
 810f5d2:	68db      	ldr	r3, [r3, #12]
 810f5d4:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 810f5d8:	2b00      	cmp	r3, #0
 810f5da:	d007      	beq.n	810f5ec <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC1;
 810f5dc:	69bb      	ldr	r3, [r7, #24]
 810f5de:	685a      	ldr	r2, [r3, #4]
 810f5e0:	687b      	ldr	r3, [r7, #4]
 810f5e2:	679a      	str	r2, [r3, #120]	@ 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC0;
 810f5e4:	69bb      	ldr	r3, [r7, #24]
 810f5e6:	681a      	ldr	r2, [r3, #0]
 810f5e8:	687b      	ldr	r3, [r7, #4]
 810f5ea:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 810f5ec:	69bb      	ldr	r3, [r7, #24]
 810f5ee:	68db      	ldr	r3, [r3, #12]
 810f5f0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 810f5f4:	2b00      	cmp	r3, #0
 810f5f6:	d103      	bne.n	810f600 <HAL_ETH_ReadData+0x88>
 810f5f8:	687b      	ldr	r3, [r7, #4]
 810f5fa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 810f5fc:	2b00      	cmp	r3, #0
 810f5fe:	d03a      	beq.n	810f676 <HAL_ETH_ReadData+0xfe>
    {
      /* Check if first descriptor */
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET)
 810f600:	69bb      	ldr	r3, [r7, #24]
 810f602:	68db      	ldr	r3, [r3, #12]
 810f604:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 810f608:	2b00      	cmp	r3, #0
 810f60a:	d005      	beq.n	810f618 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 810f60c:	687b      	ldr	r3, [r7, #4]
 810f60e:	2200      	movs	r2, #0
 810f610:	661a      	str	r2, [r3, #96]	@ 0x60
        heth->RxDescList.RxDataLength = 0;
 810f612:	687b      	ldr	r3, [r7, #4]
 810f614:	2200      	movs	r2, #0
 810f616:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      bufflength = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL) - heth->RxDescList.RxDataLength;
 810f618:	69bb      	ldr	r3, [r7, #24]
 810f61a:	68db      	ldr	r3, [r3, #12]
 810f61c:	f3c3 020e 	ubfx	r2, r3, #0, #15
 810f620:	687b      	ldr	r3, [r7, #4]
 810f622:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 810f624:	1ad3      	subs	r3, r2, r3
 810f626:	60bb      	str	r3, [r7, #8]

      /* Check if last descriptor */
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_LD) != (uint32_t)RESET)
 810f628:	69bb      	ldr	r3, [r7, #24]
 810f62a:	68db      	ldr	r3, [r3, #12]
 810f62c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 810f630:	2b00      	cmp	r3, #0
 810f632:	d005      	beq.n	810f640 <HAL_ETH_ReadData+0xc8>
      {
        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC3;
 810f634:	69bb      	ldr	r3, [r7, #24]
 810f636:	68da      	ldr	r2, [r3, #12]
 810f638:	687b      	ldr	r3, [r7, #4]
 810f63a:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Packet ready */
        rxdataready = 1;
 810f63c:	2301      	movs	r3, #1
 810f63e:	74fb      	strb	r3, [r7, #19]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 810f640:	687b      	ldr	r3, [r7, #4]
 810f642:	f103 007c 	add.w	r0, r3, #124	@ 0x7c
 810f646:	687b      	ldr	r3, [r7, #4]
 810f648:	f103 0180 	add.w	r1, r3, #128	@ 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 810f64c:	69bb      	ldr	r3, [r7, #24]
 810f64e:	691b      	ldr	r3, [r3, #16]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 810f650:	461a      	mov	r2, r3
 810f652:	68bb      	ldr	r3, [r7, #8]
 810f654:	b29b      	uxth	r3, r3
 810f656:	f7fc ff01 	bl	810c45c <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 810f65a:	687b      	ldr	r3, [r7, #4]
 810f65c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 810f65e:	1c5a      	adds	r2, r3, #1
 810f660:	687b      	ldr	r3, [r7, #4]
 810f662:	661a      	str	r2, [r3, #96]	@ 0x60
      heth->RxDescList.RxDataLength += bufflength;
 810f664:	687b      	ldr	r3, [r7, #4]
 810f666:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 810f668:	68bb      	ldr	r3, [r7, #8]
 810f66a:	441a      	add	r2, r3
 810f66c:	687b      	ldr	r3, [r7, #4]
 810f66e:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 810f670:	69bb      	ldr	r3, [r7, #24]
 810f672:	2200      	movs	r2, #0
 810f674:	611a      	str	r2, [r3, #16]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 810f676:	69fb      	ldr	r3, [r7, #28]
 810f678:	3301      	adds	r3, #1
 810f67a:	61fb      	str	r3, [r7, #28]
 810f67c:	69fb      	ldr	r3, [r7, #28]
 810f67e:	2b03      	cmp	r3, #3
 810f680:	d902      	bls.n	810f688 <HAL_ETH_ReadData+0x110>
 810f682:	69fb      	ldr	r3, [r7, #28]
 810f684:	3b04      	subs	r3, #4
 810f686:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 810f688:	687b      	ldr	r3, [r7, #4]
 810f68a:	69fa      	ldr	r2, [r7, #28]
 810f68c:	3212      	adds	r2, #18
 810f68e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 810f692:	61bb      	str	r3, [r7, #24]
    desccnt++;
 810f694:	697b      	ldr	r3, [r7, #20]
 810f696:	3301      	adds	r3, #1
 810f698:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 810f69a:	69bb      	ldr	r3, [r7, #24]
 810f69c:	68db      	ldr	r3, [r3, #12]
         && (rxdataready == 0U))
 810f69e:	2b00      	cmp	r3, #0
 810f6a0:	db06      	blt.n	810f6b0 <HAL_ETH_ReadData+0x138>
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 810f6a2:	697a      	ldr	r2, [r7, #20]
 810f6a4:	68fb      	ldr	r3, [r7, #12]
 810f6a6:	429a      	cmp	r2, r3
 810f6a8:	d202      	bcs.n	810f6b0 <HAL_ETH_ReadData+0x138>
         && (rxdataready == 0U))
 810f6aa:	7cfb      	ldrb	r3, [r7, #19]
 810f6ac:	2b00      	cmp	r3, #0
 810f6ae:	d08f      	beq.n	810f5d0 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 810f6b0:	687b      	ldr	r3, [r7, #4]
 810f6b2:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 810f6b4:	697b      	ldr	r3, [r7, #20]
 810f6b6:	441a      	add	r2, r3
 810f6b8:	687b      	ldr	r3, [r7, #4]
 810f6ba:	66da      	str	r2, [r3, #108]	@ 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 810f6bc:	687b      	ldr	r3, [r7, #4]
 810f6be:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 810f6c0:	2b00      	cmp	r3, #0
 810f6c2:	d002      	beq.n	810f6ca <HAL_ETH_ReadData+0x152>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 810f6c4:	6878      	ldr	r0, [r7, #4]
 810f6c6:	f000 f814 	bl	810f6f2 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 810f6ca:	687b      	ldr	r3, [r7, #4]
 810f6cc:	69fa      	ldr	r2, [r7, #28]
 810f6ce:	65da      	str	r2, [r3, #92]	@ 0x5c

  if (rxdataready == 1U)
 810f6d0:	7cfb      	ldrb	r3, [r7, #19]
 810f6d2:	2b01      	cmp	r3, #1
 810f6d4:	d108      	bne.n	810f6e8 <HAL_ETH_ReadData+0x170>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 810f6d6:	687b      	ldr	r3, [r7, #4]
 810f6d8:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 810f6da:	683b      	ldr	r3, [r7, #0]
 810f6dc:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 810f6de:	687b      	ldr	r3, [r7, #4]
 810f6e0:	2200      	movs	r2, #0
 810f6e2:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 810f6e4:	2300      	movs	r3, #0
 810f6e6:	e000      	b.n	810f6ea <HAL_ETH_ReadData+0x172>
  }

  /* Packet not ready */
  return HAL_ERROR;
 810f6e8:	2301      	movs	r3, #1
}
 810f6ea:	4618      	mov	r0, r3
 810f6ec:	3720      	adds	r7, #32
 810f6ee:	46bd      	mov	sp, r7
 810f6f0:	bd80      	pop	{r7, pc}

0810f6f2 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 810f6f2:	b580      	push	{r7, lr}
 810f6f4:	b088      	sub	sp, #32
 810f6f6:	af00      	add	r7, sp, #0
 810f6f8:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t tailidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 810f6fa:	2300      	movs	r3, #0
 810f6fc:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 810f6fe:	2301      	movs	r3, #1
 810f700:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 810f702:	687b      	ldr	r3, [r7, #4]
 810f704:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 810f706:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 810f708:	687b      	ldr	r3, [r7, #4]
 810f70a:	69fa      	ldr	r2, [r7, #28]
 810f70c:	3212      	adds	r2, #18
 810f70e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 810f712:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 810f714:	687b      	ldr	r3, [r7, #4]
 810f716:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 810f718:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 810f71a:	e038      	b.n	810f78e <ETH_UpdateDescriptor+0x9c>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 810f71c:	697b      	ldr	r3, [r7, #20]
 810f71e:	691b      	ldr	r3, [r3, #16]
 810f720:	2b00      	cmp	r3, #0
 810f722:	d112      	bne.n	810f74a <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 810f724:	f107 0308 	add.w	r3, r7, #8
 810f728:	4618      	mov	r0, r3
 810f72a:	f7fc fe67 	bl	810c3fc <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 810f72e:	68bb      	ldr	r3, [r7, #8]
 810f730:	2b00      	cmp	r3, #0
 810f732:	d102      	bne.n	810f73a <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 810f734:	2300      	movs	r3, #0
 810f736:	74fb      	strb	r3, [r7, #19]
 810f738:	e007      	b.n	810f74a <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 810f73a:	68bb      	ldr	r3, [r7, #8]
 810f73c:	461a      	mov	r2, r3
 810f73e:	697b      	ldr	r3, [r7, #20]
 810f740:	611a      	str	r2, [r3, #16]
        WRITE_REG(dmarxdesc->DESC0, (uint32_t)buff);
 810f742:	68bb      	ldr	r3, [r7, #8]
 810f744:	461a      	mov	r2, r3
 810f746:	697b      	ldr	r3, [r7, #20]
 810f748:	601a      	str	r2, [r3, #0]
      }
    }

    if (allocStatus != 0U)
 810f74a:	7cfb      	ldrb	r3, [r7, #19]
 810f74c:	2b00      	cmp	r3, #0
 810f74e:	d01e      	beq.n	810f78e <ETH_UpdateDescriptor+0x9c>
    {

      if (heth->RxDescList.ItMode != 0U)
 810f750:	687b      	ldr	r3, [r7, #4]
 810f752:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810f754:	2b00      	cmp	r3, #0
 810f756:	d004      	beq.n	810f762 <ETH_UpdateDescriptor+0x70>
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V | ETH_DMARXNDESCRF_IOC);
 810f758:	697b      	ldr	r3, [r7, #20]
 810f75a:	f04f 4241 	mov.w	r2, #3238002688	@ 0xc1000000
 810f75e:	60da      	str	r2, [r3, #12]
 810f760:	e003      	b.n	810f76a <ETH_UpdateDescriptor+0x78>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V);
 810f762:	697b      	ldr	r3, [r7, #20]
 810f764:	f04f 4201 	mov.w	r2, #2164260864	@ 0x81000000
 810f768:	60da      	str	r2, [r3, #12]
      }

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 810f76a:	69fb      	ldr	r3, [r7, #28]
 810f76c:	3301      	adds	r3, #1
 810f76e:	61fb      	str	r3, [r7, #28]
 810f770:	69fb      	ldr	r3, [r7, #28]
 810f772:	2b03      	cmp	r3, #3
 810f774:	d902      	bls.n	810f77c <ETH_UpdateDescriptor+0x8a>
 810f776:	69fb      	ldr	r3, [r7, #28]
 810f778:	3b04      	subs	r3, #4
 810f77a:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 810f77c:	687b      	ldr	r3, [r7, #4]
 810f77e:	69fa      	ldr	r2, [r7, #28]
 810f780:	3212      	adds	r2, #18
 810f782:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 810f786:	617b      	str	r3, [r7, #20]
      desccount--;
 810f788:	69bb      	ldr	r3, [r7, #24]
 810f78a:	3b01      	subs	r3, #1
 810f78c:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 810f78e:	69bb      	ldr	r3, [r7, #24]
 810f790:	2b00      	cmp	r3, #0
 810f792:	d002      	beq.n	810f79a <ETH_UpdateDescriptor+0xa8>
 810f794:	7cfb      	ldrb	r3, [r7, #19]
 810f796:	2b00      	cmp	r3, #0
 810f798:	d1c0      	bne.n	810f71c <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 810f79a:	687b      	ldr	r3, [r7, #4]
 810f79c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 810f79e:	69ba      	ldr	r2, [r7, #24]
 810f7a0:	429a      	cmp	r2, r3
 810f7a2:	d01b      	beq.n	810f7dc <ETH_UpdateDescriptor+0xea>
  {
    /* Set the tail pointer index */
    tailidx = (descidx + 1U) % ETH_RX_DESC_CNT;
 810f7a4:	69fb      	ldr	r3, [r7, #28]
 810f7a6:	3301      	adds	r3, #1
 810f7a8:	f003 0303 	and.w	r3, r3, #3
 810f7ac:	60fb      	str	r3, [r7, #12]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 810f7ae:	f3bf 8f5f 	dmb	sy
}
 810f7b2:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 810f7b4:	687b      	ldr	r3, [r7, #4]
 810f7b6:	6919      	ldr	r1, [r3, #16]
 810f7b8:	68fa      	ldr	r2, [r7, #12]
 810f7ba:	4613      	mov	r3, r2
 810f7bc:	005b      	lsls	r3, r3, #1
 810f7be:	4413      	add	r3, r2
 810f7c0:	00db      	lsls	r3, r3, #3
 810f7c2:	18ca      	adds	r2, r1, r3
 810f7c4:	687b      	ldr	r3, [r7, #4]
 810f7c6:	681b      	ldr	r3, [r3, #0]
 810f7c8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 810f7cc:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128

    heth->RxDescList.RxBuildDescIdx = descidx;
 810f7d0:	687b      	ldr	r3, [r7, #4]
 810f7d2:	69fa      	ldr	r2, [r7, #28]
 810f7d4:	669a      	str	r2, [r3, #104]	@ 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 810f7d6:	687b      	ldr	r3, [r7, #4]
 810f7d8:	69ba      	ldr	r2, [r7, #24]
 810f7da:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
}
 810f7dc:	bf00      	nop
 810f7de:	3720      	adds	r7, #32
 810f7e0:	46bd      	mov	sp, r7
 810f7e2:	bd80      	pop	{r7, pc}

0810f7e4 <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 810f7e4:	b580      	push	{r7, lr}
 810f7e6:	b086      	sub	sp, #24
 810f7e8:	af00      	add	r7, sp, #0
 810f7ea:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 810f7ec:	687b      	ldr	r3, [r7, #4]
 810f7ee:	3318      	adds	r3, #24
 810f7f0:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 810f7f2:	68bb      	ldr	r3, [r7, #8]
 810f7f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810f7f6:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 810f7f8:	68bb      	ldr	r3, [r7, #8]
 810f7fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810f7fc:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 810f7fe:	2301      	movs	r3, #1
 810f800:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 810f802:	e047      	b.n	810f894 <HAL_ETH_ReleaseTxPacket+0xb0>
  {
    pktInUse = 1U;
 810f804:	2301      	movs	r3, #1
 810f806:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 810f808:	697b      	ldr	r3, [r7, #20]
 810f80a:	3b01      	subs	r3, #1
 810f80c:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 810f80e:	68ba      	ldr	r2, [r7, #8]
 810f810:	693b      	ldr	r3, [r7, #16]
 810f812:	3304      	adds	r3, #4
 810f814:	009b      	lsls	r3, r3, #2
 810f816:	4413      	add	r3, r2
 810f818:	685b      	ldr	r3, [r3, #4]
 810f81a:	2b00      	cmp	r3, #0
 810f81c:	d10a      	bne.n	810f834 <HAL_ETH_ReleaseTxPacket+0x50>
    {
      /* No packet in use, skip to next.  */
      INCR_TX_DESC_INDEX(idx, 1U);
 810f81e:	693b      	ldr	r3, [r7, #16]
 810f820:	3301      	adds	r3, #1
 810f822:	613b      	str	r3, [r7, #16]
 810f824:	693b      	ldr	r3, [r7, #16]
 810f826:	2b03      	cmp	r3, #3
 810f828:	d902      	bls.n	810f830 <HAL_ETH_ReleaseTxPacket+0x4c>
 810f82a:	693b      	ldr	r3, [r7, #16]
 810f82c:	3b04      	subs	r3, #4
 810f82e:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 810f830:	2300      	movs	r3, #0
 810f832:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 810f834:	7bbb      	ldrb	r3, [r7, #14]
 810f836:	2b00      	cmp	r3, #0
 810f838:	d02c      	beq.n	810f894 <HAL_ETH_ReleaseTxPacket+0xb0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC3 & ETH_DMATXNDESCRF_OWN) == 0U)
 810f83a:	687b      	ldr	r3, [r7, #4]
 810f83c:	68d9      	ldr	r1, [r3, #12]
 810f83e:	693a      	ldr	r2, [r7, #16]
 810f840:	4613      	mov	r3, r2
 810f842:	005b      	lsls	r3, r3, #1
 810f844:	4413      	add	r3, r2
 810f846:	00db      	lsls	r3, r3, #3
 810f848:	440b      	add	r3, r1
 810f84a:	68db      	ldr	r3, [r3, #12]
 810f84c:	2b00      	cmp	r3, #0
 810f84e:	db1f      	blt.n	810f890 <HAL_ETH_ReleaseTxPacket+0xac>
        {
          HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
        }
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 810f850:	68ba      	ldr	r2, [r7, #8]
 810f852:	693b      	ldr	r3, [r7, #16]
 810f854:	3304      	adds	r3, #4
 810f856:	009b      	lsls	r3, r3, #2
 810f858:	4413      	add	r3, r2
 810f85a:	685b      	ldr	r3, [r3, #4]
 810f85c:	4618      	mov	r0, r3
 810f85e:	f7fc fe3d 	bl	810c4dc <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 810f862:	68ba      	ldr	r2, [r7, #8]
 810f864:	693b      	ldr	r3, [r7, #16]
 810f866:	3304      	adds	r3, #4
 810f868:	009b      	lsls	r3, r3, #2
 810f86a:	4413      	add	r3, r2
 810f86c:	2200      	movs	r2, #0
 810f86e:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        INCR_TX_DESC_INDEX(idx, 1U);
 810f870:	693b      	ldr	r3, [r7, #16]
 810f872:	3301      	adds	r3, #1
 810f874:	613b      	str	r3, [r7, #16]
 810f876:	693b      	ldr	r3, [r7, #16]
 810f878:	2b03      	cmp	r3, #3
 810f87a:	d902      	bls.n	810f882 <HAL_ETH_ReleaseTxPacket+0x9e>
 810f87c:	693b      	ldr	r3, [r7, #16]
 810f87e:	3b04      	subs	r3, #4
 810f880:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 810f882:	68bb      	ldr	r3, [r7, #8]
 810f884:	697a      	ldr	r2, [r7, #20]
 810f886:	629a      	str	r2, [r3, #40]	@ 0x28
        dmatxdesclist->releaseIndex = idx;
 810f888:	68bb      	ldr	r3, [r7, #8]
 810f88a:	693a      	ldr	r2, [r7, #16]
 810f88c:	62da      	str	r2, [r3, #44]	@ 0x2c
 810f88e:	e001      	b.n	810f894 <HAL_ETH_ReleaseTxPacket+0xb0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 810f890:	2300      	movs	r3, #0
 810f892:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 810f894:	697b      	ldr	r3, [r7, #20]
 810f896:	2b00      	cmp	r3, #0
 810f898:	d002      	beq.n	810f8a0 <HAL_ETH_ReleaseTxPacket+0xbc>
 810f89a:	7bfb      	ldrb	r3, [r7, #15]
 810f89c:	2b00      	cmp	r3, #0
 810f89e:	d1b1      	bne.n	810f804 <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 810f8a0:	2300      	movs	r3, #0
}
 810f8a2:	4618      	mov	r0, r3
 810f8a4:	3718      	adds	r7, #24
 810f8a6:	46bd      	mov	sp, r7
 810f8a8:	bd80      	pop	{r7, pc}
	...

0810f8ac <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 810f8ac:	b580      	push	{r7, lr}
 810f8ae:	b088      	sub	sp, #32
 810f8b0:	af00      	add	r7, sp, #0
 810f8b2:	6078      	str	r0, [r7, #4]
  uint32_t mac_flag = READ_REG(heth->Instance->MACISR);
 810f8b4:	687b      	ldr	r3, [r7, #4]
 810f8b6:	681b      	ldr	r3, [r3, #0]
 810f8b8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 810f8bc:	61fb      	str	r3, [r7, #28]
  uint32_t dma_flag = READ_REG(heth->Instance->DMACSR);
 810f8be:	687b      	ldr	r3, [r7, #4]
 810f8c0:	681b      	ldr	r3, [r3, #0]
 810f8c2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 810f8c6:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 810f8ca:	61bb      	str	r3, [r7, #24]
  uint32_t dma_itsource = READ_REG(heth->Instance->DMACIER);
 810f8cc:	687b      	ldr	r3, [r7, #4]
 810f8ce:	681b      	ldr	r3, [r3, #0]
 810f8d0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 810f8d4:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 810f8d8:	617b      	str	r3, [r7, #20]
  uint32_t exti_d1_flag = READ_REG(EXTI_D1->PR3);
 810f8da:	4b77      	ldr	r3, [pc, #476]	@ (810fab8 <HAL_ETH_IRQHandler+0x20c>)
 810f8dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810f8de:	613b      	str	r3, [r7, #16]
#if defined(DUAL_CORE)
  uint32_t exti_d2_flag = READ_REG(EXTI_D2->PR3);
 810f8e0:	4b76      	ldr	r3, [pc, #472]	@ (810fabc <HAL_ETH_IRQHandler+0x210>)
 810f8e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810f8e4:	60fb      	str	r3, [r7, #12]
#endif /* DUAL_CORE */

  /* Packet received */
  if (((dma_flag & ETH_DMACSR_RI) != 0U) && ((dma_itsource & ETH_DMACIER_RIE) != 0U))
 810f8e6:	69bb      	ldr	r3, [r7, #24]
 810f8e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 810f8ec:	2b00      	cmp	r3, #0
 810f8ee:	d010      	beq.n	810f912 <HAL_ETH_IRQHandler+0x66>
 810f8f0:	697b      	ldr	r3, [r7, #20]
 810f8f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 810f8f6:	2b00      	cmp	r3, #0
 810f8f8:	d00b      	beq.n	810f912 <HAL_ETH_IRQHandler+0x66>
  {
    /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_RI | ETH_DMACSR_NIS);
 810f8fa:	687b      	ldr	r3, [r7, #4]
 810f8fc:	681b      	ldr	r3, [r3, #0]
 810f8fe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 810f902:	461a      	mov	r2, r3
 810f904:	f248 0340 	movw	r3, #32832	@ 0x8040
 810f908:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 810f90c:	6878      	ldr	r0, [r7, #4]
 810f90e:	f7fc f91d 	bl	810bb4c <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* Packet transmitted */
  if (((dma_flag & ETH_DMACSR_TI) != 0U) && ((dma_itsource & ETH_DMACIER_TIE) != 0U))
 810f912:	69bb      	ldr	r3, [r7, #24]
 810f914:	f003 0301 	and.w	r3, r3, #1
 810f918:	2b00      	cmp	r3, #0
 810f91a:	d010      	beq.n	810f93e <HAL_ETH_IRQHandler+0x92>
 810f91c:	697b      	ldr	r3, [r7, #20]
 810f91e:	f003 0301 	and.w	r3, r3, #1
 810f922:	2b00      	cmp	r3, #0
 810f924:	d00b      	beq.n	810f93e <HAL_ETH_IRQHandler+0x92>
  {
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_TI | ETH_DMACSR_NIS);
 810f926:	687b      	ldr	r3, [r7, #4]
 810f928:	681b      	ldr	r3, [r3, #0]
 810f92a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 810f92e:	461a      	mov	r2, r3
 810f930:	f248 0301 	movw	r3, #32769	@ 0x8001
 810f934:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Transmit complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 810f938:	6878      	ldr	r0, [r7, #4]
 810f93a:	f7fc f917 	bl	810bb6c <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* ETH DMA Error */
  if (((dma_flag & ETH_DMACSR_AIS) != 0U) && ((dma_itsource & ETH_DMACIER_AIE) != 0U))
 810f93e:	69bb      	ldr	r3, [r7, #24]
 810f940:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 810f944:	2b00      	cmp	r3, #0
 810f946:	d047      	beq.n	810f9d8 <HAL_ETH_IRQHandler+0x12c>
 810f948:	697b      	ldr	r3, [r7, #20]
 810f94a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 810f94e:	2b00      	cmp	r3, #0
 810f950:	d042      	beq.n	810f9d8 <HAL_ETH_IRQHandler+0x12c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 810f952:	687b      	ldr	r3, [r7, #4]
 810f954:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 810f958:	f043 0208 	orr.w	r2, r3, #8
 810f95c:	687b      	ldr	r3, [r7, #4]
 810f95e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* if fatal bus error occurred */
    if ((dma_flag & ETH_DMACSR_FBE) != 0U)
 810f962:	69bb      	ldr	r3, [r7, #24]
 810f964:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 810f968:	2b00      	cmp	r3, #0
 810f96a:	d01e      	beq.n	810f9aa <HAL_ETH_IRQHandler+0xfe>
    {
      /* Get DMA error code  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_FBE | ETH_DMACSR_TPS | ETH_DMACSR_RPS));
 810f96c:	687b      	ldr	r3, [r7, #4]
 810f96e:	681b      	ldr	r3, [r3, #0]
 810f970:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 810f974:	f8d3 2160 	ldr.w	r2, [r3, #352]	@ 0x160
 810f978:	f241 1302 	movw	r3, #4354	@ 0x1102
 810f97c:	4013      	ands	r3, r2
 810f97e:	687a      	ldr	r2, [r7, #4]
 810f980:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c

      /* Disable all interrupts */
      __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMACIER_NIE | ETH_DMACIER_AIE);
 810f984:	687b      	ldr	r3, [r7, #4]
 810f986:	681b      	ldr	r3, [r3, #0]
 810f988:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 810f98c:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 810f990:	687a      	ldr	r2, [r7, #4]
 810f992:	6812      	ldr	r2, [r2, #0]
 810f994:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 810f998:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 810f99c:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134

      /* Set HAL state to ERROR */
      heth->gState = HAL_ETH_STATE_ERROR;
 810f9a0:	687b      	ldr	r3, [r7, #4]
 810f9a2:	22e0      	movs	r2, #224	@ 0xe0
 810f9a4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 810f9a8:	e013      	b.n	810f9d2 <HAL_ETH_IRQHandler+0x126>
    }
    else
    {
      /* Get DMA error status  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 810f9aa:	687b      	ldr	r3, [r7, #4]
 810f9ac:	681b      	ldr	r3, [r3, #0]
 810f9ae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 810f9b2:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 810f9b6:	f403 42cd 	and.w	r2, r3, #26240	@ 0x6680
 810f9ba:	687b      	ldr	r3, [r7, #4]
 810f9bc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
                                                             ETH_DMACSR_RBU | ETH_DMACSR_AIS));

      /* Clear the interrupt summary flag */
      __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 810f9c0:	687b      	ldr	r3, [r7, #4]
 810f9c2:	681b      	ldr	r3, [r3, #0]
 810f9c4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 810f9c8:	461a      	mov	r2, r3
 810f9ca:	f44f 43cd 	mov.w	r3, #26240	@ 0x6680
 810f9ce:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet DMA Error callback */
    HAL_ETH_ErrorCallback(heth);
 810f9d2:	6878      	ldr	r0, [r7, #4]
 810f9d4:	f7fc f8da 	bl	810bb8c <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* ETH MAC Error IT */
  if (((mac_flag & ETH_MACIER_RXSTSIE) == ETH_MACIER_RXSTSIE) || \
 810f9d8:	69fb      	ldr	r3, [r7, #28]
 810f9da:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 810f9de:	2b00      	cmp	r3, #0
 810f9e0:	d104      	bne.n	810f9ec <HAL_ETH_IRQHandler+0x140>
      ((mac_flag & ETH_MACIER_TXSTSIE) == ETH_MACIER_TXSTSIE))
 810f9e2:	69fb      	ldr	r3, [r7, #28]
 810f9e4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((mac_flag & ETH_MACIER_RXSTSIE) == ETH_MACIER_RXSTSIE) || \
 810f9e8:	2b00      	cmp	r3, #0
 810f9ea:	d019      	beq.n	810fa20 <HAL_ETH_IRQHandler+0x174>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_MAC;
 810f9ec:	687b      	ldr	r3, [r7, #4]
 810f9ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 810f9f2:	f043 0210 	orr.w	r2, r3, #16
 810f9f6:	687b      	ldr	r3, [r7, #4]
 810f9f8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Get MAC Rx Tx status and clear Status register pending bit */
    heth->MACErrorCode = READ_REG(heth->Instance->MACRXTXSR);
 810f9fc:	687b      	ldr	r3, [r7, #4]
 810f9fe:	681b      	ldr	r3, [r3, #0]
 810fa00:	f8d3 20b8 	ldr.w	r2, [r3, #184]	@ 0xb8
 810fa04:	687b      	ldr	r3, [r7, #4]
 810fa06:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    heth->gState = HAL_ETH_STATE_ERROR;
 810fa0a:	687b      	ldr	r3, [r7, #4]
 810fa0c:	22e0      	movs	r2, #224	@ 0xe0
 810fa0e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 810fa12:	6878      	ldr	r0, [r7, #4]
 810fa14:	f7fc f8ba 	bl	810bb8c <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    heth->MACErrorCode = (uint32_t)(0x0U);
 810fa18:	687b      	ldr	r3, [r7, #4]
 810fa1a:	2200      	movs	r2, #0
 810fa1c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  }

  /* ETH PMT IT */
  if ((mac_flag & ETH_MAC_PMT_IT) != 0U)
 810fa20:	69fb      	ldr	r3, [r7, #28]
 810fa22:	f003 0310 	and.w	r3, r3, #16
 810fa26:	2b00      	cmp	r3, #0
 810fa28:	d00f      	beq.n	810fa4a <HAL_ETH_IRQHandler+0x19e>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPCSR, (ETH_MACPCSR_RWKPRCVD | ETH_MACPCSR_MGKPRCVD));
 810fa2a:	687b      	ldr	r3, [r7, #4]
 810fa2c:	681b      	ldr	r3, [r3, #0]
 810fa2e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 810fa32:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 810fa36:	687b      	ldr	r3, [r7, #4]
 810fa38:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 810fa3c:	6878      	ldr	r0, [r7, #4]
 810fa3e:	f000 f83f 	bl	810fac0 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 810fa42:	687b      	ldr	r3, [r7, #4]
 810fa44:	2200      	movs	r2, #0
 810fa46:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  }

  /* ETH EEE IT */
  if ((mac_flag & ETH_MAC_LPI_IT) != 0U)
 810fa4a:	69fb      	ldr	r3, [r7, #28]
 810fa4c:	f003 0320 	and.w	r3, r3, #32
 810fa50:	2b00      	cmp	r3, #0
 810fa52:	d00f      	beq.n	810fa74 <HAL_ETH_IRQHandler+0x1c8>
  {
    /* Get MAC LPI interrupt source and clear the status register pending bit */
    heth->MACLPIEvent = READ_BIT(heth->Instance->MACLCSR, 0x0000000FU);
 810fa54:	687b      	ldr	r3, [r7, #4]
 810fa56:	681b      	ldr	r3, [r3, #0]
 810fa58:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 810fa5c:	f003 020f 	and.w	r2, r3, #15
 810fa60:	687b      	ldr	r3, [r7, #4]
 810fa62:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered EEE callback*/
    heth->EEECallback(heth);
#else
    /* Ethernet EEE callback */
    HAL_ETH_EEECallback(heth);
 810fa66:	6878      	ldr	r0, [r7, #4]
 810fa68:	f000 f834 	bl	810fad4 <HAL_ETH_EEECallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACLPIEvent = (uint32_t)(0x0U);
 810fa6c:	687b      	ldr	r3, [r7, #4]
 810fa6e:	2200      	movs	r2, #0
 810fa70:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  }

#if defined(DUAL_CORE)
  if (HAL_GetCurrentCPUID() == CM7_CPUID)
 810fa74:	f7ff fb30 	bl	810f0d8 <HAL_GetCurrentCPUID>
 810fa78:	4603      	mov	r3, r0
 810fa7a:	2b03      	cmp	r3, #3
 810fa7c:	d10c      	bne.n	810fa98 <HAL_ETH_IRQHandler+0x1ec>
  {
    /* check ETH WAKEUP exti flag */
    if ((exti_d1_flag & ETH_WAKEUP_EXTI_LINE) != 0U)
 810fa7e:	693b      	ldr	r3, [r7, #16]
 810fa80:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 810fa84:	2b00      	cmp	r3, #0
 810fa86:	d013      	beq.n	810fab0 <HAL_ETH_IRQHandler+0x204>
    {
      /* Clear ETH WAKEUP Exti pending bit */
      __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 810fa88:	4b0b      	ldr	r3, [pc, #44]	@ (810fab8 <HAL_ETH_IRQHandler+0x20c>)
 810fa8a:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 810fa8e:	629a      	str	r2, [r3, #40]	@ 0x28
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered WakeUp callback*/
      heth->WakeUpCallback(heth);
#else
      /* ETH WAKEUP callback */
      HAL_ETH_WakeUpCallback(heth);
 810fa90:	6878      	ldr	r0, [r7, #4]
 810fa92:	f000 f829 	bl	810fae8 <HAL_ETH_WakeUpCallback>
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
#endif /* DUAL_CORE */
}
 810fa96:	e00b      	b.n	810fab0 <HAL_ETH_IRQHandler+0x204>
    if ((exti_d2_flag & ETH_WAKEUP_EXTI_LINE) != 0U)
 810fa98:	68fb      	ldr	r3, [r7, #12]
 810fa9a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 810fa9e:	2b00      	cmp	r3, #0
 810faa0:	d006      	beq.n	810fab0 <HAL_ETH_IRQHandler+0x204>
      __HAL_ETH_WAKEUP_EXTID2_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 810faa2:	4b06      	ldr	r3, [pc, #24]	@ (810fabc <HAL_ETH_IRQHandler+0x210>)
 810faa4:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 810faa8:	629a      	str	r2, [r3, #40]	@ 0x28
      HAL_ETH_WakeUpCallback(heth);
 810faaa:	6878      	ldr	r0, [r7, #4]
 810faac:	f000 f81c 	bl	810fae8 <HAL_ETH_WakeUpCallback>
}
 810fab0:	bf00      	nop
 810fab2:	3720      	adds	r7, #32
 810fab4:	46bd      	mov	sp, r7
 810fab6:	bd80      	pop	{r7, pc}
 810fab8:	58000080 	.word	0x58000080
 810fabc:	580000c0 	.word	0x580000c0

0810fac0 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 810fac0:	b480      	push	{r7}
 810fac2:	b083      	sub	sp, #12
 810fac4:	af00      	add	r7, sp, #0
 810fac6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 810fac8:	bf00      	nop
 810faca:	370c      	adds	r7, #12
 810facc:	46bd      	mov	sp, r7
 810face:	f85d 7b04 	ldr.w	r7, [sp], #4
 810fad2:	4770      	bx	lr

0810fad4 <HAL_ETH_EEECallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_EEECallback(ETH_HandleTypeDef *heth)
{
 810fad4:	b480      	push	{r7}
 810fad6:	b083      	sub	sp, #12
 810fad8:	af00      	add	r7, sp, #0
 810fada:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_EEECallback could be implemented in the user file
  */
}
 810fadc:	bf00      	nop
 810fade:	370c      	adds	r7, #12
 810fae0:	46bd      	mov	sp, r7
 810fae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 810fae6:	4770      	bx	lr

0810fae8 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 810fae8:	b480      	push	{r7}
 810faea:	b083      	sub	sp, #12
 810faec:	af00      	add	r7, sp, #0
 810faee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 810faf0:	bf00      	nop
 810faf2:	370c      	adds	r7, #12
 810faf4:	46bd      	mov	sp, r7
 810faf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 810fafa:	4770      	bx	lr

0810fafc <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 810fafc:	b580      	push	{r7, lr}
 810fafe:	b086      	sub	sp, #24
 810fb00:	af00      	add	r7, sp, #0
 810fb02:	60f8      	str	r0, [r7, #12]
 810fb04:	60b9      	str	r1, [r7, #8]
 810fb06:	607a      	str	r2, [r7, #4]
 810fb08:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 810fb0a:	68fb      	ldr	r3, [r7, #12]
 810fb0c:	681b      	ldr	r3, [r3, #0]
 810fb0e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 810fb12:	f003 0301 	and.w	r3, r3, #1
 810fb16:	2b00      	cmp	r3, #0
 810fb18:	d001      	beq.n	810fb1e <HAL_ETH_ReadPHYRegister+0x22>
  {
    return HAL_ERROR;
 810fb1a:	2301      	movs	r3, #1
 810fb1c:	e03e      	b.n	810fb9c <HAL_ETH_ReadPHYRegister+0xa0>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 810fb1e:	68fb      	ldr	r3, [r7, #12]
 810fb20:	681b      	ldr	r3, [r3, #0]
 810fb22:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 810fb26:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the read mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 810fb28:	697b      	ldr	r3, [r7, #20]
 810fb2a:	f023 7278 	bic.w	r2, r3, #65011712	@ 0x3e00000
 810fb2e:	68bb      	ldr	r3, [r7, #8]
 810fb30:	055b      	lsls	r3, r3, #21
 810fb32:	4313      	orrs	r3, r2
 810fb34:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 810fb36:	697b      	ldr	r3, [r7, #20]
 810fb38:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 810fb3c:	687b      	ldr	r3, [r7, #4]
 810fb3e:	041b      	lsls	r3, r3, #16
 810fb40:	4313      	orrs	r3, r2
 810fb42:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_RD);
 810fb44:	697b      	ldr	r3, [r7, #20]
 810fb46:	f043 030c 	orr.w	r3, r3, #12
 810fb4a:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 810fb4c:	697b      	ldr	r3, [r7, #20]
 810fb4e:	f043 0301 	orr.w	r3, r3, #1
 810fb52:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MDII Address register */
  WRITE_REG(heth->Instance->MACMDIOAR, tmpreg);
 810fb54:	68fb      	ldr	r3, [r7, #12]
 810fb56:	681b      	ldr	r3, [r3, #0]
 810fb58:	697a      	ldr	r2, [r7, #20]
 810fb5a:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

  tickstart = HAL_GetTick();
 810fb5e:	f7ff f9bb 	bl	810eed8 <HAL_GetTick>
 810fb62:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 810fb64:	e009      	b.n	810fb7a <HAL_ETH_ReadPHYRegister+0x7e>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 810fb66:	f7ff f9b7 	bl	810eed8 <HAL_GetTick>
 810fb6a:	4602      	mov	r2, r0
 810fb6c:	693b      	ldr	r3, [r7, #16]
 810fb6e:	1ad3      	subs	r3, r2, r3
 810fb70:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 810fb74:	d901      	bls.n	810fb7a <HAL_ETH_ReadPHYRegister+0x7e>
    {
      return HAL_ERROR;
 810fb76:	2301      	movs	r3, #1
 810fb78:	e010      	b.n	810fb9c <HAL_ETH_ReadPHYRegister+0xa0>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 810fb7a:	68fb      	ldr	r3, [r7, #12]
 810fb7c:	681b      	ldr	r3, [r3, #0]
 810fb7e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 810fb82:	f003 0301 	and.w	r3, r3, #1
 810fb86:	2b00      	cmp	r3, #0
 810fb88:	d1ed      	bne.n	810fb66 <HAL_ETH_ReadPHYRegister+0x6a>
    }
  }

  /* Get MACMIIDR value */
  WRITE_REG(*pRegValue, (uint16_t)heth->Instance->MACMDIODR);
 810fb8a:	68fb      	ldr	r3, [r7, #12]
 810fb8c:	681b      	ldr	r3, [r3, #0]
 810fb8e:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 810fb92:	b29b      	uxth	r3, r3
 810fb94:	461a      	mov	r2, r3
 810fb96:	683b      	ldr	r3, [r7, #0]
 810fb98:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 810fb9a:	2300      	movs	r3, #0
}
 810fb9c:	4618      	mov	r0, r3
 810fb9e:	3718      	adds	r7, #24
 810fba0:	46bd      	mov	sp, r7
 810fba2:	bd80      	pop	{r7, pc}

0810fba4 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 810fba4:	b580      	push	{r7, lr}
 810fba6:	b086      	sub	sp, #24
 810fba8:	af00      	add	r7, sp, #0
 810fbaa:	60f8      	str	r0, [r7, #12]
 810fbac:	60b9      	str	r1, [r7, #8]
 810fbae:	607a      	str	r2, [r7, #4]
 810fbb0:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 810fbb2:	68fb      	ldr	r3, [r7, #12]
 810fbb4:	681b      	ldr	r3, [r3, #0]
 810fbb6:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 810fbba:	f003 0301 	and.w	r3, r3, #1
 810fbbe:	2b00      	cmp	r3, #0
 810fbc0:	d001      	beq.n	810fbc6 <HAL_ETH_WritePHYRegister+0x22>
  {
    return HAL_ERROR;
 810fbc2:	2301      	movs	r3, #1
 810fbc4:	e03c      	b.n	810fc40 <HAL_ETH_WritePHYRegister+0x9c>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 810fbc6:	68fb      	ldr	r3, [r7, #12]
 810fbc8:	681b      	ldr	r3, [r3, #0]
 810fbca:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 810fbce:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the write mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 810fbd0:	697b      	ldr	r3, [r7, #20]
 810fbd2:	f023 7278 	bic.w	r2, r3, #65011712	@ 0x3e00000
 810fbd6:	68bb      	ldr	r3, [r7, #8]
 810fbd8:	055b      	lsls	r3, r3, #21
 810fbda:	4313      	orrs	r3, r2
 810fbdc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 810fbde:	697b      	ldr	r3, [r7, #20]
 810fbe0:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 810fbe4:	687b      	ldr	r3, [r7, #4]
 810fbe6:	041b      	lsls	r3, r3, #16
 810fbe8:	4313      	orrs	r3, r2
 810fbea:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_WR);
 810fbec:	697b      	ldr	r3, [r7, #20]
 810fbee:	f023 030c 	bic.w	r3, r3, #12
 810fbf2:	f043 0304 	orr.w	r3, r3, #4
 810fbf6:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 810fbf8:	697b      	ldr	r3, [r7, #20]
 810fbfa:	f043 0301 	orr.w	r3, r3, #1
 810fbfe:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  WRITE_REG(ETH->MACMDIODR, (uint16_t)RegValue);
 810fc00:	683b      	ldr	r3, [r7, #0]
 810fc02:	b29a      	uxth	r2, r3
 810fc04:	4b10      	ldr	r3, [pc, #64]	@ (810fc48 <HAL_ETH_WritePHYRegister+0xa4>)
 810fc06:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Write the result value into the MII Address register */
  WRITE_REG(ETH->MACMDIOAR, tmpreg);
 810fc0a:	4a0f      	ldr	r2, [pc, #60]	@ (810fc48 <HAL_ETH_WritePHYRegister+0xa4>)
 810fc0c:	697b      	ldr	r3, [r7, #20]
 810fc0e:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200

  tickstart = HAL_GetTick();
 810fc12:	f7ff f961 	bl	810eed8 <HAL_GetTick>
 810fc16:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 810fc18:	e009      	b.n	810fc2e <HAL_ETH_WritePHYRegister+0x8a>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 810fc1a:	f7ff f95d 	bl	810eed8 <HAL_GetTick>
 810fc1e:	4602      	mov	r2, r0
 810fc20:	693b      	ldr	r3, [r7, #16]
 810fc22:	1ad3      	subs	r3, r2, r3
 810fc24:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 810fc28:	d901      	bls.n	810fc2e <HAL_ETH_WritePHYRegister+0x8a>
    {
      return HAL_ERROR;
 810fc2a:	2301      	movs	r3, #1
 810fc2c:	e008      	b.n	810fc40 <HAL_ETH_WritePHYRegister+0x9c>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 810fc2e:	68fb      	ldr	r3, [r7, #12]
 810fc30:	681b      	ldr	r3, [r3, #0]
 810fc32:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 810fc36:	f003 0301 	and.w	r3, r3, #1
 810fc3a:	2b00      	cmp	r3, #0
 810fc3c:	d1ed      	bne.n	810fc1a <HAL_ETH_WritePHYRegister+0x76>
    }
  }

  return HAL_OK;
 810fc3e:	2300      	movs	r3, #0
}
 810fc40:	4618      	mov	r0, r3
 810fc42:	3718      	adds	r7, #24
 810fc44:	46bd      	mov	sp, r7
 810fc46:	bd80      	pop	{r7, pc}
 810fc48:	40028000 	.word	0x40028000

0810fc4c <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(const ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 810fc4c:	b480      	push	{r7}
 810fc4e:	b083      	sub	sp, #12
 810fc50:	af00      	add	r7, sp, #0
 810fc52:	6078      	str	r0, [r7, #4]
 810fc54:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 810fc56:	683b      	ldr	r3, [r7, #0]
 810fc58:	2b00      	cmp	r3, #0
 810fc5a:	d101      	bne.n	810fc60 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 810fc5c:	2301      	movs	r3, #1
 810fc5e:	e1c3      	b.n	810ffe8 <HAL_ETH_GetMACConfig+0x39c>
  }

  /* Get MAC parameters */
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 810fc60:	687b      	ldr	r3, [r7, #4]
 810fc62:	681b      	ldr	r3, [r3, #0]
 810fc64:	681b      	ldr	r3, [r3, #0]
 810fc66:	f003 020c 	and.w	r2, r3, #12
 810fc6a:	683b      	ldr	r3, [r7, #0]
 810fc6c:	62da      	str	r2, [r3, #44]	@ 0x2c
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 810fc6e:	687b      	ldr	r3, [r7, #4]
 810fc70:	681b      	ldr	r3, [r3, #0]
 810fc72:	681b      	ldr	r3, [r3, #0]
 810fc74:	f003 0310 	and.w	r3, r3, #16
 810fc78:	2b00      	cmp	r3, #0
 810fc7a:	bf14      	ite	ne
 810fc7c:	2301      	movne	r3, #1
 810fc7e:	2300      	moveq	r3, #0
 810fc80:	b2db      	uxtb	r3, r3
 810fc82:	461a      	mov	r2, r3
 810fc84:	683b      	ldr	r3, [r7, #0]
 810fc86:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 810fc8a:	687b      	ldr	r3, [r7, #4]
 810fc8c:	681b      	ldr	r3, [r3, #0]
 810fc8e:	681b      	ldr	r3, [r3, #0]
 810fc90:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 810fc94:	683b      	ldr	r3, [r7, #0]
 810fc96:	625a      	str	r2, [r3, #36]	@ 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DR) >> 8) == 0U) ? ENABLE : DISABLE;
 810fc98:	687b      	ldr	r3, [r7, #4]
 810fc9a:	681b      	ldr	r3, [r3, #0]
 810fc9c:	681b      	ldr	r3, [r3, #0]
 810fc9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 810fca2:	2b00      	cmp	r3, #0
 810fca4:	bf0c      	ite	eq
 810fca6:	2301      	moveq	r3, #1
 810fca8:	2300      	movne	r3, #0
 810fcaa:	b2db      	uxtb	r3, r3
 810fcac:	461a      	mov	r2, r3
 810fcae:	683b      	ldr	r3, [r7, #0]
 810fcb0:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 810fcb4:	687b      	ldr	r3, [r7, #4]
 810fcb6:	681b      	ldr	r3, [r3, #0]
 810fcb8:	681b      	ldr	r3, [r3, #0]
 810fcba:	f403 7300 	and.w	r3, r3, #512	@ 0x200
                                        ? ENABLE : DISABLE;
 810fcbe:	2b00      	cmp	r3, #0
 810fcc0:	bf14      	ite	ne
 810fcc2:	2301      	movne	r3, #1
 810fcc4:	2300      	moveq	r3, #0
 810fcc6:	b2db      	uxtb	r3, r3
 810fcc8:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 810fcca:	683b      	ldr	r3, [r7, #0]
 810fccc:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DO) >> 10) == 0U) ? ENABLE : DISABLE;
 810fcce:	687b      	ldr	r3, [r7, #4]
 810fcd0:	681b      	ldr	r3, [r3, #0]
 810fcd2:	681b      	ldr	r3, [r3, #0]
 810fcd4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 810fcd8:	2b00      	cmp	r3, #0
 810fcda:	bf0c      	ite	eq
 810fcdc:	2301      	moveq	r3, #1
 810fcde:	2300      	movne	r3, #0
 810fce0:	b2db      	uxtb	r3, r3
 810fce2:	461a      	mov	r2, r3
 810fce4:	683b      	ldr	r3, [r7, #0]
 810fce6:	779a      	strb	r2, [r3, #30]
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 810fce8:	687b      	ldr	r3, [r7, #4]
 810fcea:	681b      	ldr	r3, [r3, #0]
 810fcec:	681b      	ldr	r3, [r3, #0]
                                                   ETH_MACCR_ECRSFD) >> 11) > 0U) ? ENABLE : DISABLE;
 810fcee:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 810fcf2:	2b00      	cmp	r3, #0
 810fcf4:	bf14      	ite	ne
 810fcf6:	2301      	movne	r3, #1
 810fcf8:	2300      	moveq	r3, #0
 810fcfa:	b2db      	uxtb	r3, r3
 810fcfc:	461a      	mov	r2, r3
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 810fcfe:	683b      	ldr	r3, [r7, #0]
 810fd00:	775a      	strb	r2, [r3, #29]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 810fd02:	687b      	ldr	r3, [r7, #4]
 810fd04:	681b      	ldr	r3, [r3, #0]
 810fd06:	681b      	ldr	r3, [r3, #0]
 810fd08:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 810fd0c:	2b00      	cmp	r3, #0
 810fd0e:	bf14      	ite	ne
 810fd10:	2301      	movne	r3, #1
 810fd12:	2300      	moveq	r3, #0
 810fd14:	b2db      	uxtb	r3, r3
 810fd16:	461a      	mov	r2, r3
 810fd18:	683b      	ldr	r3, [r7, #0]
 810fd1a:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 810fd1c:	687b      	ldr	r3, [r7, #4]
 810fd1e:	681b      	ldr	r3, [r3, #0]
 810fd20:	681b      	ldr	r3, [r3, #0]
 810fd22:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 810fd26:	683b      	ldr	r3, [r7, #0]
 810fd28:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 810fd2a:	687b      	ldr	r3, [r7, #4]
 810fd2c:	681b      	ldr	r3, [r3, #0]
 810fd2e:	681b      	ldr	r3, [r3, #0]
 810fd30:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 810fd34:	683b      	ldr	r3, [r7, #0]
 810fd36:	615a      	str	r2, [r3, #20]
  macconf->JumboPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JE) >> 16) > 0U) ? ENABLE : DISABLE;
 810fd38:	687b      	ldr	r3, [r7, #4]
 810fd3a:	681b      	ldr	r3, [r3, #0]
 810fd3c:	681b      	ldr	r3, [r3, #0]
 810fd3e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 810fd42:	2b00      	cmp	r3, #0
 810fd44:	bf14      	ite	ne
 810fd46:	2301      	movne	r3, #1
 810fd48:	2300      	moveq	r3, #0
 810fd4a:	b2db      	uxtb	r3, r3
 810fd4c:	461a      	mov	r2, r3
 810fd4e:	683b      	ldr	r3, [r7, #0]
 810fd50:	749a      	strb	r2, [r3, #18]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 17) == 0U) ? ENABLE : DISABLE;
 810fd52:	687b      	ldr	r3, [r7, #4]
 810fd54:	681b      	ldr	r3, [r3, #0]
 810fd56:	681b      	ldr	r3, [r3, #0]
 810fd58:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 810fd5c:	2b00      	cmp	r3, #0
 810fd5e:	bf0c      	ite	eq
 810fd60:	2301      	moveq	r3, #1
 810fd62:	2300      	movne	r3, #0
 810fd64:	b2db      	uxtb	r3, r3
 810fd66:	461a      	mov	r2, r3
 810fd68:	683b      	ldr	r3, [r7, #0]
 810fd6a:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 19) == 0U) ? ENABLE : DISABLE;
 810fd6c:	687b      	ldr	r3, [r7, #4]
 810fd6e:	681b      	ldr	r3, [r3, #0]
 810fd70:	681b      	ldr	r3, [r3, #0]
 810fd72:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 810fd76:	2b00      	cmp	r3, #0
 810fd78:	bf0c      	ite	eq
 810fd7a:	2301      	moveq	r3, #1
 810fd7c:	2300      	movne	r3, #0
 810fd7e:	b2db      	uxtb	r3, r3
 810fd80:	461a      	mov	r2, r3
 810fd82:	683b      	ldr	r3, [r7, #0]
 810fd84:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ACS) >> 20) > 0U) ? ENABLE : DISABLE;
 810fd86:	687b      	ldr	r3, [r7, #4]
 810fd88:	681b      	ldr	r3, [r3, #0]
 810fd8a:	681b      	ldr	r3, [r3, #0]
 810fd8c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 810fd90:	2b00      	cmp	r3, #0
 810fd92:	bf14      	ite	ne
 810fd94:	2301      	movne	r3, #1
 810fd96:	2300      	moveq	r3, #0
 810fd98:	b2db      	uxtb	r3, r3
 810fd9a:	461a      	mov	r2, r3
 810fd9c:	683b      	ldr	r3, [r7, #0]
 810fd9e:	73da      	strb	r2, [r3, #15]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CST) >> 21) > 0U) ? ENABLE : DISABLE;
 810fda0:	687b      	ldr	r3, [r7, #4]
 810fda2:	681b      	ldr	r3, [r3, #0]
 810fda4:	681b      	ldr	r3, [r3, #0]
 810fda6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 810fdaa:	2b00      	cmp	r3, #0
 810fdac:	bf14      	ite	ne
 810fdae:	2301      	movne	r3, #1
 810fdb0:	2300      	moveq	r3, #0
 810fdb2:	b2db      	uxtb	r3, r3
 810fdb4:	461a      	mov	r2, r3
 810fdb6:	683b      	ldr	r3, [r7, #0]
 810fdb8:	739a      	strb	r2, [r3, #14]
  macconf->Support2KPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_S2KP) >> 22) > 0U) ? ENABLE : DISABLE;
 810fdba:	687b      	ldr	r3, [r7, #4]
 810fdbc:	681b      	ldr	r3, [r3, #0]
 810fdbe:	681b      	ldr	r3, [r3, #0]
 810fdc0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 810fdc4:	2b00      	cmp	r3, #0
 810fdc6:	bf14      	ite	ne
 810fdc8:	2301      	movne	r3, #1
 810fdca:	2300      	moveq	r3, #0
 810fdcc:	b2db      	uxtb	r3, r3
 810fdce:	461a      	mov	r2, r3
 810fdd0:	683b      	ldr	r3, [r7, #0]
 810fdd2:	735a      	strb	r2, [r3, #13]
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 810fdd4:	687b      	ldr	r3, [r7, #4]
 810fdd6:	681b      	ldr	r3, [r3, #0]
 810fdd8:	681b      	ldr	r3, [r3, #0]
                                                    ETH_MACCR_GPSLCE) >> 23) > 0U) ? ENABLE : DISABLE;
 810fdda:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 810fdde:	2b00      	cmp	r3, #0
 810fde0:	bf14      	ite	ne
 810fde2:	2301      	movne	r3, #1
 810fde4:	2300      	moveq	r3, #0
 810fde6:	b2db      	uxtb	r3, r3
 810fde8:	461a      	mov	r2, r3
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 810fdea:	683b      	ldr	r3, [r7, #0]
 810fdec:	731a      	strb	r2, [r3, #12]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPG);
 810fdee:	687b      	ldr	r3, [r7, #4]
 810fdf0:	681b      	ldr	r3, [r3, #0]
 810fdf2:	681b      	ldr	r3, [r3, #0]
 810fdf4:	f003 62e0 	and.w	r2, r3, #117440512	@ 0x7000000
 810fdf8:	683b      	ldr	r3, [r7, #0]
 810fdfa:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPC) >> 27) > 0U) ? ENABLE : DISABLE;
 810fdfc:	687b      	ldr	r3, [r7, #4]
 810fdfe:	681b      	ldr	r3, [r3, #0]
 810fe00:	681b      	ldr	r3, [r3, #0]
 810fe02:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 810fe06:	2b00      	cmp	r3, #0
 810fe08:	bf14      	ite	ne
 810fe0a:	2301      	movne	r3, #1
 810fe0c:	2300      	moveq	r3, #0
 810fe0e:	b2db      	uxtb	r3, r3
 810fe10:	461a      	mov	r2, r3
 810fe12:	683b      	ldr	r3, [r7, #0]
 810fe14:	711a      	strb	r2, [r3, #4]
  macconf->SourceAddrControl = READ_BIT(heth->Instance->MACCR, ETH_MACCR_SARC);
 810fe16:	687b      	ldr	r3, [r7, #4]
 810fe18:	681b      	ldr	r3, [r3, #0]
 810fe1a:	681b      	ldr	r3, [r3, #0]
 810fe1c:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 810fe20:	683b      	ldr	r3, [r7, #0]
 810fe22:	601a      	str	r2, [r3, #0]

  macconf->GiantPacketSizeLimit = READ_BIT(heth->Instance->MACECR, ETH_MACECR_GPSL);
 810fe24:	687b      	ldr	r3, [r7, #4]
 810fe26:	681b      	ldr	r3, [r3, #0]
 810fe28:	685b      	ldr	r3, [r3, #4]
 810fe2a:	f3c3 020d 	ubfx	r2, r3, #0, #14
 810fe2e:	683b      	ldr	r3, [r7, #0]
 810fe30:	635a      	str	r2, [r3, #52]	@ 0x34
  macconf->CRCCheckingRxPackets = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_DCRCC) >> 16) == 0U) ? ENABLE : DISABLE;
 810fe32:	687b      	ldr	r3, [r7, #4]
 810fe34:	681b      	ldr	r3, [r3, #0]
 810fe36:	685b      	ldr	r3, [r3, #4]
 810fe38:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 810fe3c:	2b00      	cmp	r3, #0
 810fe3e:	bf0c      	ite	eq
 810fe40:	2301      	moveq	r3, #1
 810fe42:	2300      	movne	r3, #0
 810fe44:	b2db      	uxtb	r3, r3
 810fe46:	461a      	mov	r2, r3
 810fe48:	683b      	ldr	r3, [r7, #0]
 810fe4a:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
  macconf->SlowProtocolDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_SPEN) >> 17) > 0U) ? ENABLE : DISABLE;
 810fe4e:	687b      	ldr	r3, [r7, #4]
 810fe50:	681b      	ldr	r3, [r3, #0]
 810fe52:	685b      	ldr	r3, [r3, #4]
 810fe54:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 810fe58:	2b00      	cmp	r3, #0
 810fe5a:	bf14      	ite	ne
 810fe5c:	2301      	movne	r3, #1
 810fe5e:	2300      	moveq	r3, #0
 810fe60:	b2db      	uxtb	r3, r3
 810fe62:	461a      	mov	r2, r3
 810fe64:	683b      	ldr	r3, [r7, #0]
 810fe66:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 810fe6a:	687b      	ldr	r3, [r7, #4]
 810fe6c:	681b      	ldr	r3, [r3, #0]
 810fe6e:	685b      	ldr	r3, [r3, #4]
                                                        ETH_MACECR_USP) >> 18) > 0U) ? ENABLE : DISABLE;
 810fe70:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 810fe74:	2b00      	cmp	r3, #0
 810fe76:	bf14      	ite	ne
 810fe78:	2301      	movne	r3, #1
 810fe7a:	2300      	moveq	r3, #0
 810fe7c:	b2db      	uxtb	r3, r3
 810fe7e:	461a      	mov	r2, r3
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 810fe80:	683b      	ldr	r3, [r7, #0]
 810fe82:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 810fe86:	687b      	ldr	r3, [r7, #4]
 810fe88:	681b      	ldr	r3, [r3, #0]
 810fe8a:	685b      	ldr	r3, [r3, #4]
 810fe8c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
                                    ? ENABLE : DISABLE;
 810fe90:	2b00      	cmp	r3, #0
 810fe92:	bf14      	ite	ne
 810fe94:	2301      	movne	r3, #1
 810fe96:	2300      	moveq	r3, #0
 810fe98:	b2db      	uxtb	r3, r3
 810fe9a:	461a      	mov	r2, r3
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 810fe9c:	683b      	ldr	r3, [r7, #0]
 810fe9e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  macconf->ExtendedInterPacketGapVal = READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPG) >> 25;
 810fea2:	687b      	ldr	r3, [r7, #4]
 810fea4:	681b      	ldr	r3, [r3, #0]
 810fea6:	685b      	ldr	r3, [r3, #4]
 810fea8:	0e5b      	lsrs	r3, r3, #25
 810feaa:	f003 021f 	and.w	r2, r3, #31
 810feae:	683b      	ldr	r3, [r7, #0]
 810feb0:	63da      	str	r2, [r3, #60]	@ 0x3c

  macconf->ProgrammableWatchdog = ((READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_PWE) >> 8) > 0U) ? ENABLE : DISABLE;
 810feb2:	687b      	ldr	r3, [r7, #4]
 810feb4:	681b      	ldr	r3, [r3, #0]
 810feb6:	68db      	ldr	r3, [r3, #12]
 810feb8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 810febc:	2b00      	cmp	r3, #0
 810febe:	bf14      	ite	ne
 810fec0:	2301      	movne	r3, #1
 810fec2:	2300      	moveq	r3, #0
 810fec4:	b2db      	uxtb	r3, r3
 810fec6:	461a      	mov	r2, r3
 810fec8:	683b      	ldr	r3, [r7, #0]
 810feca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  macconf->WatchdogTimeout = READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_WTO);
 810fece:	687b      	ldr	r3, [r7, #4]
 810fed0:	681b      	ldr	r3, [r3, #0]
 810fed2:	68db      	ldr	r3, [r3, #12]
 810fed4:	f003 020f 	and.w	r2, r3, #15
 810fed8:	683b      	ldr	r3, [r7, #0]
 810feda:	645a      	str	r2, [r3, #68]	@ 0x44

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_TFE) >> 1) > 0U) ? ENABLE : DISABLE;
 810fedc:	687b      	ldr	r3, [r7, #4]
 810fede:	681b      	ldr	r3, [r3, #0]
 810fee0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 810fee2:	f003 0302 	and.w	r3, r3, #2
 810fee6:	2b00      	cmp	r3, #0
 810fee8:	bf14      	ite	ne
 810feea:	2301      	movne	r3, #1
 810feec:	2300      	moveq	r3, #0
 810feee:	b2db      	uxtb	r3, r3
 810fef0:	461a      	mov	r2, r3
 810fef2:	683b      	ldr	r3, [r7, #0]
 810fef4:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_DZPQ) >> 7) == 0U) ? ENABLE : DISABLE;
 810fef8:	687b      	ldr	r3, [r7, #4]
 810fefa:	681b      	ldr	r3, [r3, #0]
 810fefc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 810fefe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 810ff02:	2b00      	cmp	r3, #0
 810ff04:	bf0c      	ite	eq
 810ff06:	2301      	moveq	r3, #1
 810ff08:	2300      	movne	r3, #0
 810ff0a:	b2db      	uxtb	r3, r3
 810ff0c:	461a      	mov	r2, r3
 810ff0e:	683b      	ldr	r3, [r7, #0]
 810ff10:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PLT);
 810ff14:	687b      	ldr	r3, [r7, #4]
 810ff16:	681b      	ldr	r3, [r3, #0]
 810ff18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 810ff1a:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 810ff1e:	683b      	ldr	r3, [r7, #0]
 810ff20:	651a      	str	r2, [r3, #80]	@ 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PT) >> 16);
 810ff22:	687b      	ldr	r3, [r7, #4]
 810ff24:	681b      	ldr	r3, [r3, #0]
 810ff26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 810ff28:	0c1b      	lsrs	r3, r3, #16
 810ff2a:	b29a      	uxth	r2, r3
 810ff2c:	683b      	ldr	r3, [r7, #0]
 810ff2e:	649a      	str	r2, [r3, #72]	@ 0x48
  macconf->ReceiveFlowControl = (READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_RFE) > 0U) ? ENABLE : DISABLE;
 810ff30:	687b      	ldr	r3, [r7, #4]
 810ff32:	681b      	ldr	r3, [r3, #0]
 810ff34:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 810ff38:	f003 0301 	and.w	r3, r3, #1
 810ff3c:	2b00      	cmp	r3, #0
 810ff3e:	bf14      	ite	ne
 810ff40:	2301      	movne	r3, #1
 810ff42:	2300      	moveq	r3, #0
 810ff44:	b2db      	uxtb	r3, r3
 810ff46:	461a      	mov	r2, r3
 810ff48:	683b      	ldr	r3, [r7, #0]
 810ff4a:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 810ff4e:	687b      	ldr	r3, [r7, #4]
 810ff50:	681b      	ldr	r3, [r3, #0]
 810ff52:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 810ff56:	f003 0302 	and.w	r3, r3, #2
                                      ? ENABLE : DISABLE;
 810ff5a:	2b00      	cmp	r3, #0
 810ff5c:	bf14      	ite	ne
 810ff5e:	2301      	movne	r3, #1
 810ff60:	2300      	moveq	r3, #0
 810ff62:	b2db      	uxtb	r3, r3
 810ff64:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 810ff66:	683b      	ldr	r3, [r7, #0]
 810ff68:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55

  macconf->TransmitQueueMode = READ_BIT(heth->Instance->MTLTQOMR, (ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF));
 810ff6c:	687b      	ldr	r3, [r7, #4]
 810ff6e:	681b      	ldr	r3, [r3, #0]
 810ff70:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 810ff74:	f003 0272 	and.w	r2, r3, #114	@ 0x72
 810ff78:	683b      	ldr	r3, [r7, #0]
 810ff7a:	659a      	str	r2, [r3, #88]	@ 0x58

  macconf->ReceiveQueueMode = READ_BIT(heth->Instance->MTLRQOMR, (ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF));
 810ff7c:	687b      	ldr	r3, [r7, #4]
 810ff7e:	681b      	ldr	r3, [r3, #0]
 810ff80:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 810ff84:	f003 0223 	and.w	r2, r3, #35	@ 0x23
 810ff88:	683b      	ldr	r3, [r7, #0]
 810ff8a:	65da      	str	r2, [r3, #92]	@ 0x5c
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 810ff8c:	687b      	ldr	r3, [r7, #4]
 810ff8e:	681b      	ldr	r3, [r3, #0]
 810ff90:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
                                                      ETH_MTLRQOMR_FUP) >> 3) > 0U) ? ENABLE : DISABLE;
 810ff94:	f003 0308 	and.w	r3, r3, #8
 810ff98:	2b00      	cmp	r3, #0
 810ff9a:	bf14      	ite	ne
 810ff9c:	2301      	movne	r3, #1
 810ff9e:	2300      	moveq	r3, #0
 810ffa0:	b2db      	uxtb	r3, r3
 810ffa2:	461a      	mov	r2, r3
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 810ffa4:	683b      	ldr	r3, [r7, #0]
 810ffa6:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
  macconf->ForwardRxErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FEP) >> 4) > 0U) ? ENABLE : DISABLE;
 810ffaa:	687b      	ldr	r3, [r7, #4]
 810ffac:	681b      	ldr	r3, [r3, #0]
 810ffae:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 810ffb2:	f003 0310 	and.w	r3, r3, #16
 810ffb6:	2b00      	cmp	r3, #0
 810ffb8:	bf14      	ite	ne
 810ffba:	2301      	movne	r3, #1
 810ffbc:	2300      	moveq	r3, #0
 810ffbe:	b2db      	uxtb	r3, r3
 810ffc0:	461a      	mov	r2, r3
 810ffc2:	683b      	ldr	r3, [r7, #0]
 810ffc4:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 810ffc8:	687b      	ldr	r3, [r7, #4]
 810ffca:	681b      	ldr	r3, [r3, #0]
 810ffcc:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
                                                     ETH_MTLRQOMR_DISTCPEF) >> 6) == 0U) ? ENABLE : DISABLE;
 810ffd0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 810ffd4:	2b00      	cmp	r3, #0
 810ffd6:	bf0c      	ite	eq
 810ffd8:	2301      	moveq	r3, #1
 810ffda:	2300      	movne	r3, #0
 810ffdc:	b2db      	uxtb	r3, r3
 810ffde:	461a      	mov	r2, r3
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 810ffe0:	683b      	ldr	r3, [r7, #0]
 810ffe2:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  return HAL_OK;
 810ffe6:	2300      	movs	r3, #0
}
 810ffe8:	4618      	mov	r0, r3
 810ffea:	370c      	adds	r7, #12
 810ffec:	46bd      	mov	sp, r7
 810ffee:	f85d 7b04 	ldr.w	r7, [sp], #4
 810fff2:	4770      	bx	lr

0810fff4 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 810fff4:	b580      	push	{r7, lr}
 810fff6:	b082      	sub	sp, #8
 810fff8:	af00      	add	r7, sp, #0
 810fffa:	6078      	str	r0, [r7, #4]
 810fffc:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 810fffe:	683b      	ldr	r3, [r7, #0]
 8110000:	2b00      	cmp	r3, #0
 8110002:	d101      	bne.n	8110008 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8110004:	2301      	movs	r3, #1
 8110006:	e00b      	b.n	8110020 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8110008:	687b      	ldr	r3, [r7, #4]
 811000a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 811000e:	2b10      	cmp	r3, #16
 8110010:	d105      	bne.n	811001e <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8110012:	6839      	ldr	r1, [r7, #0]
 8110014:	6878      	ldr	r0, [r7, #4]
 8110016:	f000 f871 	bl	81100fc <ETH_SetMACConfig>

    return HAL_OK;
 811001a:	2300      	movs	r3, #0
 811001c:	e000      	b.n	8110020 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 811001e:	2301      	movs	r3, #1
  }
}
 8110020:	4618      	mov	r0, r3
 8110022:	3708      	adds	r7, #8
 8110024:	46bd      	mov	sp, r7
 8110026:	bd80      	pop	{r7, pc}

08110028 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8110028:	b580      	push	{r7, lr}
 811002a:	b084      	sub	sp, #16
 811002c:	af00      	add	r7, sp, #0
 811002e:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8110030:	687b      	ldr	r3, [r7, #4]
 8110032:	681b      	ldr	r3, [r3, #0]
 8110034:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8110038:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 811003a:	68fb      	ldr	r3, [r7, #12]
 811003c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8110040:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8110042:	f001 fff1 	bl	8112028 <HAL_RCC_GetHCLKFreq>
 8110046:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 8110048:	68bb      	ldr	r3, [r7, #8]
 811004a:	4a1a      	ldr	r2, [pc, #104]	@ (81100b4 <HAL_ETH_SetMDIOClockRange+0x8c>)
 811004c:	4293      	cmp	r3, r2
 811004e:	d804      	bhi.n	811005a <HAL_ETH_SetMDIOClockRange+0x32>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8110050:	68fb      	ldr	r3, [r7, #12]
 8110052:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8110056:	60fb      	str	r3, [r7, #12]
 8110058:	e022      	b.n	81100a0 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 60000000U)
 811005a:	68bb      	ldr	r3, [r7, #8]
 811005c:	4a16      	ldr	r2, [pc, #88]	@ (81100b8 <HAL_ETH_SetMDIOClockRange+0x90>)
 811005e:	4293      	cmp	r3, r2
 8110060:	d204      	bcs.n	811006c <HAL_ETH_SetMDIOClockRange+0x44>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8110062:	68fb      	ldr	r3, [r7, #12]
 8110064:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8110068:	60fb      	str	r3, [r7, #12]
 811006a:	e019      	b.n	81100a0 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 100000000U)
 811006c:	68bb      	ldr	r3, [r7, #8]
 811006e:	4a13      	ldr	r2, [pc, #76]	@ (81100bc <HAL_ETH_SetMDIOClockRange+0x94>)
 8110070:	4293      	cmp	r3, r2
 8110072:	d915      	bls.n	81100a0 <HAL_ETH_SetMDIOClockRange+0x78>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if (hclk < 150000000U)
 8110074:	68bb      	ldr	r3, [r7, #8]
 8110076:	4a12      	ldr	r2, [pc, #72]	@ (81100c0 <HAL_ETH_SetMDIOClockRange+0x98>)
 8110078:	4293      	cmp	r3, r2
 811007a:	d804      	bhi.n	8110086 <HAL_ETH_SetMDIOClockRange+0x5e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 811007c:	68fb      	ldr	r3, [r7, #12]
 811007e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8110082:	60fb      	str	r3, [r7, #12]
 8110084:	e00c      	b.n	81100a0 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 250000000U)
 8110086:	68bb      	ldr	r3, [r7, #8]
 8110088:	4a0e      	ldr	r2, [pc, #56]	@ (81100c4 <HAL_ETH_SetMDIOClockRange+0x9c>)
 811008a:	4293      	cmp	r3, r2
 811008c:	d804      	bhi.n	8110098 <HAL_ETH_SetMDIOClockRange+0x70>
  {
    /* CSR Clock Range between 150-250 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 811008e:	68fb      	ldr	r3, [r7, #12]
 8110090:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8110094:	60fb      	str	r3, [r7, #12]
 8110096:	e003      	b.n	81100a0 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else /* (hclk >= 250000000U) */
  {
    /* CSR Clock >= 250 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 8110098:	68fb      	ldr	r3, [r7, #12]
 811009a:	f443 63a0 	orr.w	r3, r3, #1280	@ 0x500
 811009e:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 81100a0:	687b      	ldr	r3, [r7, #4]
 81100a2:	681b      	ldr	r3, [r3, #0]
 81100a4:	68fa      	ldr	r2, [r7, #12]
 81100a6:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
}
 81100aa:	bf00      	nop
 81100ac:	3710      	adds	r7, #16
 81100ae:	46bd      	mov	sp, r7
 81100b0:	bd80      	pop	{r7, pc}
 81100b2:	bf00      	nop
 81100b4:	02160ebf 	.word	0x02160ebf
 81100b8:	03938700 	.word	0x03938700
 81100bc:	05f5e0ff 	.word	0x05f5e0ff
 81100c0:	08f0d17f 	.word	0x08f0d17f
 81100c4:	0ee6b27f 	.word	0x0ee6b27f

081100c8 <HAL_ETH_GetError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH Error Code
  */
uint32_t HAL_ETH_GetError(const ETH_HandleTypeDef *heth)
{
 81100c8:	b480      	push	{r7}
 81100ca:	b083      	sub	sp, #12
 81100cc:	af00      	add	r7, sp, #0
 81100ce:	6078      	str	r0, [r7, #4]
  return heth->ErrorCode;
 81100d0:	687b      	ldr	r3, [r7, #4]
 81100d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
}
 81100d6:	4618      	mov	r0, r3
 81100d8:	370c      	adds	r7, #12
 81100da:	46bd      	mov	sp, r7
 81100dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 81100e0:	4770      	bx	lr

081100e2 <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(const ETH_HandleTypeDef *heth)
{
 81100e2:	b480      	push	{r7}
 81100e4:	b083      	sub	sp, #12
 81100e6:	af00      	add	r7, sp, #0
 81100e8:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 81100ea:	687b      	ldr	r3, [r7, #4]
 81100ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
}
 81100f0:	4618      	mov	r0, r3
 81100f2:	370c      	adds	r7, #12
 81100f4:	46bd      	mov	sp, r7
 81100f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81100fa:	4770      	bx	lr

081100fc <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 81100fc:	b480      	push	{r7}
 81100fe:	b085      	sub	sp, #20
 8110100:	af00      	add	r7, sp, #0
 8110102:	6078      	str	r0, [r7, #4]
 8110104:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8110106:	683b      	ldr	r3, [r7, #0]
 8110108:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 811010a:	683b      	ldr	r3, [r7, #0]
 811010c:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 811010e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8110110:	683b      	ldr	r3, [r7, #0]
 8110112:	791b      	ldrb	r3, [r3, #4]
 8110114:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8110116:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8110118:	683b      	ldr	r3, [r7, #0]
 811011a:	7b1b      	ldrb	r3, [r3, #12]
 811011c:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 811011e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8110120:	683b      	ldr	r3, [r7, #0]
 8110122:	7b5b      	ldrb	r3, [r3, #13]
 8110124:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8110126:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8110128:	683b      	ldr	r3, [r7, #0]
 811012a:	7b9b      	ldrb	r3, [r3, #14]
 811012c:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 811012e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8110130:	683b      	ldr	r3, [r7, #0]
 8110132:	7bdb      	ldrb	r3, [r3, #15]
 8110134:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8110136:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8110138:	683a      	ldr	r2, [r7, #0]
 811013a:	7c12      	ldrb	r2, [r2, #16]
 811013c:	2a00      	cmp	r2, #0
 811013e:	d102      	bne.n	8110146 <ETH_SetMACConfig+0x4a>
 8110140:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8110144:	e000      	b.n	8110148 <ETH_SetMACConfig+0x4c>
 8110146:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8110148:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 811014a:	683a      	ldr	r2, [r7, #0]
 811014c:	7c52      	ldrb	r2, [r2, #17]
 811014e:	2a00      	cmp	r2, #0
 8110150:	d102      	bne.n	8110158 <ETH_SetMACConfig+0x5c>
 8110152:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8110156:	e000      	b.n	811015a <ETH_SetMACConfig+0x5e>
 8110158:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 811015a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 811015c:	683b      	ldr	r3, [r7, #0]
 811015e:	7c9b      	ldrb	r3, [r3, #18]
 8110160:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8110162:	431a      	orrs	r2, r3
               macconf->Speed |
 8110164:	683b      	ldr	r3, [r7, #0]
 8110166:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8110168:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 811016a:	683b      	ldr	r3, [r7, #0]
 811016c:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 811016e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8110170:	683b      	ldr	r3, [r7, #0]
 8110172:	7f1b      	ldrb	r3, [r3, #28]
 8110174:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8110176:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8110178:	683b      	ldr	r3, [r7, #0]
 811017a:	7f5b      	ldrb	r3, [r3, #29]
 811017c:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 811017e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8110180:	683a      	ldr	r2, [r7, #0]
 8110182:	7f92      	ldrb	r2, [r2, #30]
 8110184:	2a00      	cmp	r2, #0
 8110186:	d102      	bne.n	811018e <ETH_SetMACConfig+0x92>
 8110188:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 811018c:	e000      	b.n	8110190 <ETH_SetMACConfig+0x94>
 811018e:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8110190:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8110192:	683b      	ldr	r3, [r7, #0]
 8110194:	7fdb      	ldrb	r3, [r3, #31]
 8110196:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8110198:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 811019a:	683a      	ldr	r2, [r7, #0]
 811019c:	f892 2020 	ldrb.w	r2, [r2, #32]
 81101a0:	2a00      	cmp	r2, #0
 81101a2:	d102      	bne.n	81101aa <ETH_SetMACConfig+0xae>
 81101a4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 81101a8:	e000      	b.n	81101ac <ETH_SetMACConfig+0xb0>
 81101aa:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 81101ac:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 81101ae:	683b      	ldr	r3, [r7, #0]
 81101b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 81101b2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 81101b4:	683b      	ldr	r3, [r7, #0]
 81101b6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 81101ba:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 81101bc:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 81101be:	683b      	ldr	r3, [r7, #0]
 81101c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  macregval = (macconf->InterPacketGapVal |
 81101c2:	4313      	orrs	r3, r2
 81101c4:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 81101c6:	687b      	ldr	r3, [r7, #4]
 81101c8:	681b      	ldr	r3, [r3, #0]
 81101ca:	681a      	ldr	r2, [r3, #0]
 81101cc:	4b57      	ldr	r3, [pc, #348]	@ (811032c <ETH_SetMACConfig+0x230>)
 81101ce:	4013      	ands	r3, r2
 81101d0:	687a      	ldr	r2, [r7, #4]
 81101d2:	6812      	ldr	r2, [r2, #0]
 81101d4:	68f9      	ldr	r1, [r7, #12]
 81101d6:	430b      	orrs	r3, r1
 81101d8:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 81101da:	683b      	ldr	r3, [r7, #0]
 81101dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 81101de:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 81101e0:	683b      	ldr	r3, [r7, #0]
 81101e2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 81101e6:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 81101e8:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 81101ea:	683b      	ldr	r3, [r7, #0]
 81101ec:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 81101f0:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 81101f2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 81101f4:	683b      	ldr	r3, [r7, #0]
 81101f6:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 81101fa:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 81101fc:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 81101fe:	683a      	ldr	r2, [r7, #0]
 8110200:	f892 2032 	ldrb.w	r2, [r2, #50]	@ 0x32
 8110204:	2a00      	cmp	r2, #0
 8110206:	d102      	bne.n	811020e <ETH_SetMACConfig+0x112>
 8110208:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 811020c:	e000      	b.n	8110210 <ETH_SetMACConfig+0x114>
 811020e:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8110210:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8110212:	683b      	ldr	r3, [r7, #0]
 8110214:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8110216:	4313      	orrs	r3, r2
 8110218:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 811021a:	687b      	ldr	r3, [r7, #4]
 811021c:	681b      	ldr	r3, [r3, #0]
 811021e:	685a      	ldr	r2, [r3, #4]
 8110220:	4b43      	ldr	r3, [pc, #268]	@ (8110330 <ETH_SetMACConfig+0x234>)
 8110222:	4013      	ands	r3, r2
 8110224:	687a      	ldr	r2, [r7, #4]
 8110226:	6812      	ldr	r2, [r2, #0]
 8110228:	68f9      	ldr	r1, [r7, #12]
 811022a:	430b      	orrs	r3, r1
 811022c:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 811022e:	683b      	ldr	r3, [r7, #0]
 8110230:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8110234:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8110236:	683b      	ldr	r3, [r7, #0]
 8110238:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 811023a:	4313      	orrs	r3, r2
 811023c:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 811023e:	687b      	ldr	r3, [r7, #4]
 8110240:	681b      	ldr	r3, [r3, #0]
 8110242:	68db      	ldr	r3, [r3, #12]
 8110244:	f423 7387 	bic.w	r3, r3, #270	@ 0x10e
 8110248:	f023 0301 	bic.w	r3, r3, #1
 811024c:	687a      	ldr	r2, [r7, #4]
 811024e:	6812      	ldr	r2, [r2, #0]
 8110250:	68f9      	ldr	r1, [r7, #12]
 8110252:	430b      	orrs	r3, r1
 8110254:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8110256:	683b      	ldr	r3, [r7, #0]
 8110258:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 811025c:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 811025e:	683b      	ldr	r3, [r7, #0]
 8110260:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8110262:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8110264:	683a      	ldr	r2, [r7, #0]
 8110266:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 811026a:	2a00      	cmp	r2, #0
 811026c:	d101      	bne.n	8110272 <ETH_SetMACConfig+0x176>
 811026e:	2280      	movs	r2, #128	@ 0x80
 8110270:	e000      	b.n	8110274 <ETH_SetMACConfig+0x178>
 8110272:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8110274:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8110276:	683b      	ldr	r3, [r7, #0]
 8110278:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 811027a:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 811027c:	4313      	orrs	r3, r2
 811027e:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8110280:	687b      	ldr	r3, [r7, #4]
 8110282:	681b      	ldr	r3, [r3, #0]
 8110284:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8110286:	f64f 730d 	movw	r3, #65293	@ 0xff0d
 811028a:	4013      	ands	r3, r2
 811028c:	687a      	ldr	r2, [r7, #4]
 811028e:	6812      	ldr	r2, [r2, #0]
 8110290:	68f9      	ldr	r1, [r7, #12]
 8110292:	430b      	orrs	r3, r1
 8110294:	6713      	str	r3, [r2, #112]	@ 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8110296:	683b      	ldr	r3, [r7, #0]
 8110298:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 811029c:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 811029e:	683b      	ldr	r3, [r7, #0]
 81102a0:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 81102a4:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 81102a6:	4313      	orrs	r3, r2
 81102a8:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 81102aa:	687b      	ldr	r3, [r7, #4]
 81102ac:	681b      	ldr	r3, [r3, #0]
 81102ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 81102b2:	f023 0103 	bic.w	r1, r3, #3
 81102b6:	687b      	ldr	r3, [r7, #4]
 81102b8:	681b      	ldr	r3, [r3, #0]
 81102ba:	68fa      	ldr	r2, [r7, #12]
 81102bc:	430a      	orrs	r2, r1
 81102be:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 81102c2:	687b      	ldr	r3, [r7, #4]
 81102c4:	681b      	ldr	r3, [r3, #0]
 81102c6:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 81102ca:	f023 0172 	bic.w	r1, r3, #114	@ 0x72
 81102ce:	683b      	ldr	r3, [r7, #0]
 81102d0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 81102d2:	687b      	ldr	r3, [r7, #4]
 81102d4:	681b      	ldr	r3, [r3, #0]
 81102d6:	430a      	orrs	r2, r1
 81102d8:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 81102dc:	683b      	ldr	r3, [r7, #0]
 81102de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 81102e0:	683a      	ldr	r2, [r7, #0]
 81102e2:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 81102e6:	2a00      	cmp	r2, #0
 81102e8:	d101      	bne.n	81102ee <ETH_SetMACConfig+0x1f2>
 81102ea:	2240      	movs	r2, #64	@ 0x40
 81102ec:	e000      	b.n	81102f0 <ETH_SetMACConfig+0x1f4>
 81102ee:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 81102f0:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 81102f2:	683b      	ldr	r3, [r7, #0]
 81102f4:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 81102f8:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 81102fa:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 81102fc:	683b      	ldr	r3, [r7, #0]
 81102fe:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 8110302:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8110304:	4313      	orrs	r3, r2
 8110306:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8110308:	687b      	ldr	r3, [r7, #4]
 811030a:	681b      	ldr	r3, [r3, #0]
 811030c:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8110310:	f023 017b 	bic.w	r1, r3, #123	@ 0x7b
 8110314:	687b      	ldr	r3, [r7, #4]
 8110316:	681b      	ldr	r3, [r3, #0]
 8110318:	68fa      	ldr	r2, [r7, #12]
 811031a:	430a      	orrs	r2, r1
 811031c:	f8c3 2d30 	str.w	r2, [r3, #3376]	@ 0xd30
}
 8110320:	bf00      	nop
 8110322:	3714      	adds	r7, #20
 8110324:	46bd      	mov	sp, r7
 8110326:	f85d 7b04 	ldr.w	r7, [sp], #4
 811032a:	4770      	bx	lr
 811032c:	00048083 	.word	0x00048083
 8110330:	c0f88000 	.word	0xc0f88000

08110334 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8110334:	b480      	push	{r7}
 8110336:	b085      	sub	sp, #20
 8110338:	af00      	add	r7, sp, #0
 811033a:	6078      	str	r0, [r7, #4]
 811033c:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 811033e:	687b      	ldr	r3, [r7, #4]
 8110340:	681b      	ldr	r3, [r3, #0]
 8110342:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8110346:	681b      	ldr	r3, [r3, #0]
 8110348:	f423 43f0 	bic.w	r3, r3, #30720	@ 0x7800
 811034c:	f023 0302 	bic.w	r3, r3, #2
 8110350:	683a      	ldr	r2, [r7, #0]
 8110352:	6811      	ldr	r1, [r2, #0]
 8110354:	687a      	ldr	r2, [r7, #4]
 8110356:	6812      	ldr	r2, [r2, #0]
 8110358:	430b      	orrs	r3, r1
 811035a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 811035e:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8110360:	683b      	ldr	r3, [r7, #0]
 8110362:	791b      	ldrb	r3, [r3, #4]
 8110364:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8110366:	683b      	ldr	r3, [r7, #0]
 8110368:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 811036a:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 811036c:	683b      	ldr	r3, [r7, #0]
 811036e:	7b1b      	ldrb	r3, [r3, #12]
 8110370:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8110372:	4313      	orrs	r3, r2
 8110374:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8110376:	687b      	ldr	r3, [r7, #4]
 8110378:	681b      	ldr	r3, [r3, #0]
 811037a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 811037e:	685b      	ldr	r3, [r3, #4]
 8110380:	f423 4350 	bic.w	r3, r3, #53248	@ 0xd000
 8110384:	f023 0301 	bic.w	r3, r3, #1
 8110388:	687a      	ldr	r2, [r7, #4]
 811038a:	6812      	ldr	r2, [r2, #0]
 811038c:	68f9      	ldr	r1, [r7, #12]
 811038e:	430b      	orrs	r3, r1
 8110390:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8110394:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8110396:	683b      	ldr	r3, [r7, #0]
 8110398:	7b5b      	ldrb	r3, [r3, #13]
 811039a:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 811039c:	683b      	ldr	r3, [r7, #0]
 811039e:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 81103a0:	4313      	orrs	r3, r2
 81103a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 81103a4:	687b      	ldr	r3, [r7, #4]
 81103a6:	681b      	ldr	r3, [r3, #0]
 81103a8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 81103ac:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 81103b0:	4b21      	ldr	r3, [pc, #132]	@ (8110438 <ETH_SetDMAConfig+0x104>)
 81103b2:	4013      	ands	r3, r2
 81103b4:	687a      	ldr	r2, [r7, #4]
 81103b6:	6812      	ldr	r2, [r2, #0]
 81103b8:	68f9      	ldr	r1, [r7, #12]
 81103ba:	430b      	orrs	r3, r1
 81103bc:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 81103c0:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 81103c4:	683b      	ldr	r3, [r7, #0]
 81103c6:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 81103c8:	683b      	ldr	r3, [r7, #0]
 81103ca:	7d1b      	ldrb	r3, [r3, #20]
 81103cc:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 81103ce:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 81103d0:	683b      	ldr	r3, [r7, #0]
 81103d2:	7f5b      	ldrb	r3, [r3, #29]
 81103d4:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 81103d6:	4313      	orrs	r3, r2
 81103d8:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 81103da:	687b      	ldr	r3, [r7, #4]
 81103dc:	681b      	ldr	r3, [r3, #0]
 81103de:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 81103e2:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 81103e6:	4b15      	ldr	r3, [pc, #84]	@ (811043c <ETH_SetDMAConfig+0x108>)
 81103e8:	4013      	ands	r3, r2
 81103ea:	687a      	ldr	r2, [r7, #4]
 81103ec:	6812      	ldr	r2, [r2, #0]
 81103ee:	68f9      	ldr	r1, [r7, #12]
 81103f0:	430b      	orrs	r3, r1
 81103f2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 81103f6:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 81103fa:	683b      	ldr	r3, [r7, #0]
 81103fc:	7f1b      	ldrb	r3, [r3, #28]
 81103fe:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8110400:	683b      	ldr	r3, [r7, #0]
 8110402:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8110404:	4313      	orrs	r3, r2
 8110406:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8110408:	687b      	ldr	r3, [r7, #4]
 811040a:	681b      	ldr	r3, [r3, #0]
 811040c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8110410:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8110414:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8110418:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
 811041c:	687a      	ldr	r2, [r7, #4]
 811041e:	6812      	ldr	r2, [r2, #0]
 8110420:	68f9      	ldr	r1, [r7, #12]
 8110422:	430b      	orrs	r3, r1
 8110424:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8110428:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
}
 811042c:	bf00      	nop
 811042e:	3714      	adds	r7, #20
 8110430:	46bd      	mov	sp, r7
 8110432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8110436:	4770      	bx	lr
 8110438:	fffec000 	.word	0xfffec000
 811043c:	ffc0efef 	.word	0xffc0efef

08110440 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8110440:	b580      	push	{r7, lr}
 8110442:	b0a4      	sub	sp, #144	@ 0x90
 8110444:	af00      	add	r7, sp, #0
 8110446:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8110448:	2301      	movs	r3, #1
 811044a:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 811044e:	2300      	movs	r3, #0
 8110450:	653b      	str	r3, [r7, #80]	@ 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8110452:	2300      	movs	r3, #0
 8110454:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8110458:	2300      	movs	r3, #0
 811045a:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 811045e:	2301      	movs	r3, #1
 8110460:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8110464:	2301      	movs	r3, #1
 8110466:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 811046a:	2301      	movs	r3, #1
 811046c:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8110470:	2300      	movs	r3, #0
 8110472:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8110476:	2301      	movs	r3, #1
 8110478:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 811047c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8110480:	647b      	str	r3, [r7, #68]	@ 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8110482:	2300      	movs	r3, #0
 8110484:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 8110488:	2300      	movs	r3, #0
 811048a:	66bb      	str	r3, [r7, #104]	@ 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 811048c:	2300      	movs	r3, #0
 811048e:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8110492:	2300      	movs	r3, #0
 8110494:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 8110498:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
 811049c:	663b      	str	r3, [r7, #96]	@ 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 811049e:	2300      	movs	r3, #0
 81104a0:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 81104a4:	2300      	movs	r3, #0
 81104a6:	637b      	str	r3, [r7, #52]	@ 0x34
  macDefaultConf.Jabber = ENABLE;
 81104a8:	2301      	movs	r3, #1
 81104aa:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 81104ae:	2300      	movs	r3, #0
 81104b0:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 81104b4:	2300      	movs	r3, #0
 81104b6:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 81104ba:	2300      	movs	r3, #0
 81104bc:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.PauseTime = 0x0U;
 81104be:	2300      	movs	r3, #0
 81104c0:	677b      	str	r3, [r7, #116]	@ 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 81104c2:	2300      	movs	r3, #0
 81104c4:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 81104c6:	2300      	movs	r3, #0
 81104c8:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 81104cc:	2300      	movs	r3, #0
 81104ce:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 81104d2:	2301      	movs	r3, #1
 81104d4:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 81104d8:	2320      	movs	r3, #32
 81104da:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 81104de:	2301      	movs	r3, #1
 81104e0:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 81104e4:	2300      	movs	r3, #0
 81104e6:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 81104ea:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 81104ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 81104f0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 81104f4:	643b      	str	r3, [r7, #64]	@ 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 81104f6:	2300      	movs	r3, #0
 81104f8:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 81104fc:	2302      	movs	r3, #2
 81104fe:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8110502:	2300      	movs	r3, #0
 8110504:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8110508:	2300      	movs	r3, #0
 811050a:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 811050e:	2300      	movs	r3, #0
 8110510:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8110514:	2301      	movs	r3, #1
 8110516:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 811051a:	2300      	movs	r3, #0
 811051c:	673b      	str	r3, [r7, #112]	@ 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 811051e:	2301      	movs	r3, #1
 8110520:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8110524:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8110528:	4619      	mov	r1, r3
 811052a:	6878      	ldr	r0, [r7, #4]
 811052c:	f7ff fde6 	bl	81100fc <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8110530:	2301      	movs	r3, #1
 8110532:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8110534:	2301      	movs	r3, #1
 8110536:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8110538:	2300      	movs	r3, #0
 811053a:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 811053c:	2300      	movs	r3, #0
 811053e:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8110542:	2300      	movs	r3, #0
 8110544:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8110546:	2300      	movs	r3, #0
 8110548:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 811054a:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 811054e:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8110550:	2300      	movs	r3, #0
 8110552:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8110554:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8110558:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 811055a:	2300      	movs	r3, #0
 811055c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8110560:	f44f 7306 	mov.w	r3, #536	@ 0x218
 8110564:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8110566:	f107 0308 	add.w	r3, r7, #8
 811056a:	4619      	mov	r1, r3
 811056c:	6878      	ldr	r0, [r7, #4]
 811056e:	f7ff fee1 	bl	8110334 <ETH_SetDMAConfig>
}
 8110572:	bf00      	nop
 8110574:	3790      	adds	r7, #144	@ 0x90
 8110576:	46bd      	mov	sp, r7
 8110578:	bd80      	pop	{r7, pc}

0811057a <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 811057a:	b480      	push	{r7}
 811057c:	b085      	sub	sp, #20
 811057e:	af00      	add	r7, sp, #0
 8110580:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8110582:	2300      	movs	r3, #0
 8110584:	60fb      	str	r3, [r7, #12]
 8110586:	e01d      	b.n	81105c4 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8110588:	687b      	ldr	r3, [r7, #4]
 811058a:	68d9      	ldr	r1, [r3, #12]
 811058c:	68fa      	ldr	r2, [r7, #12]
 811058e:	4613      	mov	r3, r2
 8110590:	005b      	lsls	r3, r3, #1
 8110592:	4413      	add	r3, r2
 8110594:	00db      	lsls	r3, r3, #3
 8110596:	440b      	add	r3, r1
 8110598:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 811059a:	68bb      	ldr	r3, [r7, #8]
 811059c:	2200      	movs	r2, #0
 811059e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 81105a0:	68bb      	ldr	r3, [r7, #8]
 81105a2:	2200      	movs	r2, #0
 81105a4:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 81105a6:	68bb      	ldr	r3, [r7, #8]
 81105a8:	2200      	movs	r2, #0
 81105aa:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 81105ac:	68bb      	ldr	r3, [r7, #8]
 81105ae:	2200      	movs	r2, #0
 81105b0:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 81105b2:	68b9      	ldr	r1, [r7, #8]
 81105b4:	687b      	ldr	r3, [r7, #4]
 81105b6:	68fa      	ldr	r2, [r7, #12]
 81105b8:	3206      	adds	r2, #6
 81105ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 81105be:	68fb      	ldr	r3, [r7, #12]
 81105c0:	3301      	adds	r3, #1
 81105c2:	60fb      	str	r3, [r7, #12]
 81105c4:	68fb      	ldr	r3, [r7, #12]
 81105c6:	2b03      	cmp	r3, #3
 81105c8:	d9de      	bls.n	8110588 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 81105ca:	687b      	ldr	r3, [r7, #4]
 81105cc:	2200      	movs	r2, #0
 81105ce:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 81105d0:	687b      	ldr	r3, [r7, #4]
 81105d2:	681b      	ldr	r3, [r3, #0]
 81105d4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 81105d8:	461a      	mov	r2, r3
 81105da:	2303      	movs	r3, #3
 81105dc:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 81105e0:	687b      	ldr	r3, [r7, #4]
 81105e2:	68da      	ldr	r2, [r3, #12]
 81105e4:	687b      	ldr	r3, [r7, #4]
 81105e6:	681b      	ldr	r3, [r3, #0]
 81105e8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 81105ec:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 81105f0:	687b      	ldr	r3, [r7, #4]
 81105f2:	68da      	ldr	r2, [r3, #12]
 81105f4:	687b      	ldr	r3, [r7, #4]
 81105f6:	681b      	ldr	r3, [r3, #0]
 81105f8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 81105fc:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
}
 8110600:	bf00      	nop
 8110602:	3714      	adds	r7, #20
 8110604:	46bd      	mov	sp, r7
 8110606:	f85d 7b04 	ldr.w	r7, [sp], #4
 811060a:	4770      	bx	lr

0811060c <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 811060c:	b480      	push	{r7}
 811060e:	b085      	sub	sp, #20
 8110610:	af00      	add	r7, sp, #0
 8110612:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8110614:	2300      	movs	r3, #0
 8110616:	60fb      	str	r3, [r7, #12]
 8110618:	e023      	b.n	8110662 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 811061a:	687b      	ldr	r3, [r7, #4]
 811061c:	6919      	ldr	r1, [r3, #16]
 811061e:	68fa      	ldr	r2, [r7, #12]
 8110620:	4613      	mov	r3, r2
 8110622:	005b      	lsls	r3, r3, #1
 8110624:	4413      	add	r3, r2
 8110626:	00db      	lsls	r3, r3, #3
 8110628:	440b      	add	r3, r1
 811062a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 811062c:	68bb      	ldr	r3, [r7, #8]
 811062e:	2200      	movs	r2, #0
 8110630:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8110632:	68bb      	ldr	r3, [r7, #8]
 8110634:	2200      	movs	r2, #0
 8110636:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8110638:	68bb      	ldr	r3, [r7, #8]
 811063a:	2200      	movs	r2, #0
 811063c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 811063e:	68bb      	ldr	r3, [r7, #8]
 8110640:	2200      	movs	r2, #0
 8110642:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8110644:	68bb      	ldr	r3, [r7, #8]
 8110646:	2200      	movs	r2, #0
 8110648:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 811064a:	68bb      	ldr	r3, [r7, #8]
 811064c:	2200      	movs	r2, #0
 811064e:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8110650:	68b9      	ldr	r1, [r7, #8]
 8110652:	687b      	ldr	r3, [r7, #4]
 8110654:	68fa      	ldr	r2, [r7, #12]
 8110656:	3212      	adds	r2, #18
 8110658:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 811065c:	68fb      	ldr	r3, [r7, #12]
 811065e:	3301      	adds	r3, #1
 8110660:	60fb      	str	r3, [r7, #12]
 8110662:	68fb      	ldr	r3, [r7, #12]
 8110664:	2b03      	cmp	r3, #3
 8110666:	d9d8      	bls.n	811061a <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8110668:	687b      	ldr	r3, [r7, #4]
 811066a:	2200      	movs	r2, #0
 811066c:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 811066e:	687b      	ldr	r3, [r7, #4]
 8110670:	2200      	movs	r2, #0
 8110672:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8110674:	687b      	ldr	r3, [r7, #4]
 8110676:	2200      	movs	r2, #0
 8110678:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 811067a:	687b      	ldr	r3, [r7, #4]
 811067c:	2200      	movs	r2, #0
 811067e:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8110680:	687b      	ldr	r3, [r7, #4]
 8110682:	2200      	movs	r2, #0
 8110684:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8110686:	687b      	ldr	r3, [r7, #4]
 8110688:	681b      	ldr	r3, [r3, #0]
 811068a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 811068e:	461a      	mov	r2, r3
 8110690:	2303      	movs	r3, #3
 8110692:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8110696:	687b      	ldr	r3, [r7, #4]
 8110698:	691a      	ldr	r2, [r3, #16]
 811069a:	687b      	ldr	r3, [r7, #4]
 811069c:	681b      	ldr	r3, [r3, #0]
 811069e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 81106a2:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 81106a6:	687b      	ldr	r3, [r7, #4]
 81106a8:	691b      	ldr	r3, [r3, #16]
 81106aa:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 81106ae:	687b      	ldr	r3, [r7, #4]
 81106b0:	681b      	ldr	r3, [r3, #0]
 81106b2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 81106b6:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
}
 81106ba:	bf00      	nop
 81106bc:	3714      	adds	r7, #20
 81106be:	46bd      	mov	sp, r7
 81106c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81106c4:	4770      	bx	lr

081106c6 <ETH_Prepare_Tx_Descriptors>:
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, const ETH_TxPacketConfigTypeDef *pTxConfig,
                                           uint32_t ItMode)
{
 81106c6:	b480      	push	{r7}
 81106c8:	b091      	sub	sp, #68	@ 0x44
 81106ca:	af00      	add	r7, sp, #0
 81106cc:	60f8      	str	r0, [r7, #12]
 81106ce:	60b9      	str	r1, [r7, #8]
 81106d0:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 81106d2:	68fb      	ldr	r3, [r7, #12]
 81106d4:	3318      	adds	r3, #24
 81106d6:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 81106d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81106da:	691b      	ldr	r3, [r3, #16]
 81106dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 81106de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81106e0:	691b      	ldr	r3, [r3, #16]
 81106e2:	623b      	str	r3, [r7, #32]
  uint32_t idx;
  uint32_t descnbr = 0;
 81106e4:	2300      	movs	r3, #0
 81106e6:	637b      	str	r3, [r7, #52]	@ 0x34
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 81106e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81106ea:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 81106ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 81106f0:	633b      	str	r3, [r7, #48]	@ 0x30

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 81106f2:	68bb      	ldr	r3, [r7, #8]
 81106f4:	689b      	ldr	r3, [r3, #8]
 81106f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t           bd_count = 0;
 81106f8:	2300      	movs	r3, #0
 81106fa:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t primask_bit;

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 81106fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81106fe:	68db      	ldr	r3, [r3, #12]
 8110700:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8110704:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8110708:	d007      	beq.n	811071a <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 811070a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 811070c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 811070e:	3304      	adds	r3, #4
 8110710:	009b      	lsls	r3, r3, #2
 8110712:	4413      	add	r3, r2
 8110714:	685b      	ldr	r3, [r3, #4]
 8110716:	2b00      	cmp	r3, #0
 8110718:	d001      	beq.n	811071e <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 811071a:	2302      	movs	r3, #2
 811071c:	e267      	b.n	8110bee <ETH_Prepare_Tx_Descriptors+0x528>

  /***************************************************************************/
  /*****************    Context descriptor configuration (Optional) **********/
  /***************************************************************************/
  /* If VLAN tag is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 811071e:	68bb      	ldr	r3, [r7, #8]
 8110720:	681b      	ldr	r3, [r3, #0]
 8110722:	f003 0304 	and.w	r3, r3, #4
 8110726:	2b00      	cmp	r3, #0
 8110728:	d044      	beq.n	81107b4 <ETH_Prepare_Tx_Descriptors+0xee>
  {
    /* Set vlan tag value */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_VT, pTxConfig->VlanTag);
 811072a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811072c:	68db      	ldr	r3, [r3, #12]
 811072e:	0c1b      	lsrs	r3, r3, #16
 8110730:	041b      	lsls	r3, r3, #16
 8110732:	68ba      	ldr	r2, [r7, #8]
 8110734:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8110736:	431a      	orrs	r2, r3
 8110738:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811073a:	60da      	str	r2, [r3, #12]
    /* Set vlan tag valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_VLTV);
 811073c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811073e:	68db      	ldr	r3, [r3, #12]
 8110740:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8110744:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8110746:	60da      	str	r2, [r3, #12]
    /* Set the descriptor as the vlan input source */
    SET_BIT(heth->Instance->MACVIR, ETH_MACVIR_VLTI);
 8110748:	68fb      	ldr	r3, [r7, #12]
 811074a:	681b      	ldr	r3, [r3, #0]
 811074c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 811074e:	68fb      	ldr	r3, [r7, #12]
 8110750:	681b      	ldr	r3, [r3, #0]
 8110752:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8110756:	661a      	str	r2, [r3, #96]	@ 0x60

    /* if inner VLAN is enabled */
    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_INNERVLANTAG) != (uint32_t)RESET)
 8110758:	68bb      	ldr	r3, [r7, #8]
 811075a:	681b      	ldr	r3, [r3, #0]
 811075c:	f003 0308 	and.w	r3, r3, #8
 8110760:	2b00      	cmp	r3, #0
 8110762:	d027      	beq.n	81107b4 <ETH_Prepare_Tx_Descriptors+0xee>
    {
      /* Set inner vlan tag value */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_IVT, (pTxConfig->InnerVlanTag << 16));
 8110764:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8110766:	689b      	ldr	r3, [r3, #8]
 8110768:	b29a      	uxth	r2, r3
 811076a:	68bb      	ldr	r3, [r7, #8]
 811076c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 811076e:	041b      	lsls	r3, r3, #16
 8110770:	431a      	orrs	r2, r3
 8110772:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8110774:	609a      	str	r2, [r3, #8]
      /* Set inner vlan tag valid bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_IVLTV);
 8110776:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8110778:	68db      	ldr	r3, [r3, #12]
 811077a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 811077e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8110780:	60da      	str	r2, [r3, #12]

      /* Set Vlan Tag control */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_IVTIR, pTxConfig->InnerVlanCtrl);
 8110782:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8110784:	68db      	ldr	r3, [r3, #12]
 8110786:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 811078a:	68bb      	ldr	r3, [r7, #8]
 811078c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 811078e:	431a      	orrs	r2, r3
 8110790:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8110792:	60da      	str	r2, [r3, #12]

      /* Set the descriptor as the inner vlan input source */
      SET_BIT(heth->Instance->MACIVIR, ETH_MACIVIR_VLTI);
 8110794:	68fb      	ldr	r3, [r7, #12]
 8110796:	681b      	ldr	r3, [r3, #0]
 8110798:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 811079a:	68fb      	ldr	r3, [r7, #12]
 811079c:	681b      	ldr	r3, [r3, #0]
 811079e:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 81107a2:	665a      	str	r2, [r3, #100]	@ 0x64
      /* Enable double VLAN processing */
      SET_BIT(heth->Instance->MACVTR, ETH_MACVTR_EDVLP);
 81107a4:	68fb      	ldr	r3, [r7, #12]
 81107a6:	681b      	ldr	r3, [r3, #0]
 81107a8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 81107aa:	68fb      	ldr	r3, [r7, #12]
 81107ac:	681b      	ldr	r3, [r3, #0]
 81107ae:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 81107b2:	651a      	str	r2, [r3, #80]	@ 0x50
    }
  }

  /* if tcp segmentation is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 81107b4:	68bb      	ldr	r3, [r7, #8]
 81107b6:	681b      	ldr	r3, [r3, #0]
 81107b8:	f003 0310 	and.w	r3, r3, #16
 81107bc:	2b00      	cmp	r3, #0
 81107be:	d010      	beq.n	81107e2 <ETH_Prepare_Tx_Descriptors+0x11c>
  {
    /* Set MSS value */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_MSS, pTxConfig->MaxSegmentSize);
 81107c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81107c2:	689b      	ldr	r3, [r3, #8]
 81107c4:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 81107c8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 81107cc:	68ba      	ldr	r2, [r7, #8]
 81107ce:	6992      	ldr	r2, [r2, #24]
 81107d0:	431a      	orrs	r2, r3
 81107d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81107d4:	609a      	str	r2, [r3, #8]
    /* Set MSS valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_TCMSSV);
 81107d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81107d8:	68db      	ldr	r3, [r3, #12]
 81107da:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 81107de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81107e0:	60da      	str	r2, [r3, #12]
  }

  if ((READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 81107e2:	68bb      	ldr	r3, [r7, #8]
 81107e4:	681b      	ldr	r3, [r3, #0]
 81107e6:	f003 0304 	and.w	r3, r3, #4
 81107ea:	2b00      	cmp	r3, #0
 81107ec:	d105      	bne.n	81107fa <ETH_Prepare_Tx_Descriptors+0x134>
      || (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET))
 81107ee:	68bb      	ldr	r3, [r7, #8]
 81107f0:	681b      	ldr	r3, [r3, #0]
 81107f2:	f003 0310 	and.w	r3, r3, #16
 81107f6:	2b00      	cmp	r3, #0
 81107f8:	d036      	beq.n	8110868 <ETH_Prepare_Tx_Descriptors+0x1a2>
  {
    /* Set as context descriptor */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_CTXT);
 81107fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81107fc:	68db      	ldr	r3, [r3, #12]
 81107fe:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8110802:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8110804:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8110806:	f3bf 8f5f 	dmb	sy
}
 811080a:	bf00      	nop
    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 811080c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811080e:	68db      	ldr	r3, [r3, #12]
 8110810:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8110814:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8110816:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8110818:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 811081a:	3301      	adds	r3, #1
 811081c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 811081e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8110820:	2b03      	cmp	r3, #3
 8110822:	d902      	bls.n	811082a <ETH_Prepare_Tx_Descriptors+0x164>
 8110824:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8110826:	3b04      	subs	r3, #4
 8110828:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 811082a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811082c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 811082e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8110832:	633b      	str	r3, [r7, #48]	@ 0x30

    descnbr += 1U;
 8110834:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8110836:	3301      	adds	r3, #1
 8110838:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if (READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 811083a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811083c:	68db      	ldr	r3, [r3, #12]
 811083e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8110842:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8110846:	d10f      	bne.n	8110868 <ETH_Prepare_Tx_Descriptors+0x1a2>
    {
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 8110848:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811084a:	6a3a      	ldr	r2, [r7, #32]
 811084c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8110850:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("dmb 0xF":::"memory");
 8110852:	f3bf 8f5f 	dmb	sy
}
 8110856:	bf00      	nop
      /* Ensure rest of descriptor is written to RAM before the OWN bit */
      __DMB();
      /* Clear own bit */
      CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8110858:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811085a:	68db      	ldr	r3, [r3, #12]
 811085c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8110860:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8110862:	60da      	str	r2, [r3, #12]

      return HAL_ETH_ERROR_BUSY;
 8110864:	2302      	movs	r3, #2
 8110866:	e1c2      	b.n	8110bee <ETH_Prepare_Tx_Descriptors+0x528>

  /***************************************************************************/
  /*****************    Normal descriptors configuration     *****************/
  /***************************************************************************/

  descnbr += 1U;
 8110868:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 811086a:	3301      	adds	r3, #1
 811086c:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 811086e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8110870:	681b      	ldr	r3, [r3, #0]
 8110872:	461a      	mov	r2, r3
 8110874:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8110876:	601a      	str	r2, [r3, #0]
  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8110878:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811087a:	689b      	ldr	r3, [r3, #8]
 811087c:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8110880:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8110884:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8110886:	6852      	ldr	r2, [r2, #4]
 8110888:	431a      	orrs	r2, r3
 811088a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811088c:	609a      	str	r2, [r3, #8]

  if (txbuffer->next != NULL)
 811088e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8110890:	689b      	ldr	r3, [r3, #8]
 8110892:	2b00      	cmp	r3, #0
 8110894:	d014      	beq.n	81108c0 <ETH_Prepare_Tx_Descriptors+0x1fa>
  {
    txbuffer = txbuffer->next;
 8110896:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8110898:	689b      	ldr	r3, [r3, #8]
 811089a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    /* Set buffer 2 address */
    WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 811089c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811089e:	681b      	ldr	r3, [r3, #0]
 81108a0:	461a      	mov	r2, r3
 81108a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81108a4:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 81108a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81108a8:	689b      	ldr	r3, [r3, #8]
 81108aa:	f023 537f 	bic.w	r3, r3, #1069547520	@ 0x3fc00000
 81108ae:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
 81108b2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 81108b4:	6852      	ldr	r2, [r2, #4]
 81108b6:	0412      	lsls	r2, r2, #16
 81108b8:	431a      	orrs	r2, r3
 81108ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81108bc:	609a      	str	r2, [r3, #8]
 81108be:	e00a      	b.n	81108d6 <ETH_Prepare_Tx_Descriptors+0x210>
  }
  else
  {
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 81108c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81108c2:	2200      	movs	r2, #0
 81108c4:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 81108c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81108c8:	689b      	ldr	r3, [r3, #8]
 81108ca:	f023 537f 	bic.w	r3, r3, #1069547520	@ 0x3fc00000
 81108ce:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
 81108d2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 81108d4:	6093      	str	r3, [r2, #8]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 81108d6:	68bb      	ldr	r3, [r7, #8]
 81108d8:	681b      	ldr	r3, [r3, #0]
 81108da:	f003 0310 	and.w	r3, r3, #16
 81108de:	2b00      	cmp	r3, #0
 81108e0:	d019      	beq.n	8110916 <ETH_Prepare_Tx_Descriptors+0x250>
  {
    /* Set TCP Header length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 81108e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81108e4:	68db      	ldr	r3, [r3, #12]
 81108e6:	f423 02f0 	bic.w	r2, r3, #7864320	@ 0x780000
 81108ea:	68bb      	ldr	r3, [r7, #8]
 81108ec:	6a1b      	ldr	r3, [r3, #32]
 81108ee:	04db      	lsls	r3, r3, #19
 81108f0:	431a      	orrs	r2, r3
 81108f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81108f4:	60da      	str	r2, [r3, #12]
    /* Set TCP payload length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 81108f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81108f8:	68db      	ldr	r3, [r3, #12]
 81108fa:	0c9b      	lsrs	r3, r3, #18
 81108fc:	049b      	lsls	r3, r3, #18
 81108fe:	68ba      	ldr	r2, [r7, #8]
 8110900:	69d2      	ldr	r2, [r2, #28]
 8110902:	431a      	orrs	r2, r3
 8110904:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8110906:	60da      	str	r2, [r3, #12]
    /* Set TCP Segmentation Enabled bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8110908:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811090a:	68db      	ldr	r3, [r3, #12]
 811090c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8110910:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8110912:	60da      	str	r2, [r3, #12]
 8110914:	e028      	b.n	8110968 <ETH_Prepare_Tx_Descriptors+0x2a2>
  }
  else
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8110916:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8110918:	68db      	ldr	r3, [r3, #12]
 811091a:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 811091e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8110922:	68ba      	ldr	r2, [r7, #8]
 8110924:	6852      	ldr	r2, [r2, #4]
 8110926:	431a      	orrs	r2, r3
 8110928:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811092a:	60da      	str	r2, [r3, #12]

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 811092c:	68bb      	ldr	r3, [r7, #8]
 811092e:	681b      	ldr	r3, [r3, #0]
 8110930:	f003 0301 	and.w	r3, r3, #1
 8110934:	2b00      	cmp	r3, #0
 8110936:	d008      	beq.n	811094a <ETH_Prepare_Tx_Descriptors+0x284>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8110938:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811093a:	68db      	ldr	r3, [r3, #12]
 811093c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8110940:	68bb      	ldr	r3, [r7, #8]
 8110942:	695b      	ldr	r3, [r3, #20]
 8110944:	431a      	orrs	r2, r3
 8110946:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8110948:	60da      	str	r2, [r3, #12]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != (uint32_t)RESET)
 811094a:	68bb      	ldr	r3, [r7, #8]
 811094c:	681b      	ldr	r3, [r3, #0]
 811094e:	f003 0320 	and.w	r3, r3, #32
 8110952:	2b00      	cmp	r3, #0
 8110954:	d008      	beq.n	8110968 <ETH_Prepare_Tx_Descriptors+0x2a2>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl);
 8110956:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8110958:	68db      	ldr	r3, [r3, #12]
 811095a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 811095e:	68bb      	ldr	r3, [r7, #8]
 8110960:	691b      	ldr	r3, [r3, #16]
 8110962:	431a      	orrs	r2, r3
 8110964:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8110966:	60da      	str	r2, [r3, #12]
    }
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8110968:	68bb      	ldr	r3, [r7, #8]
 811096a:	681b      	ldr	r3, [r3, #0]
 811096c:	f003 0304 	and.w	r3, r3, #4
 8110970:	2b00      	cmp	r3, #0
 8110972:	d008      	beq.n	8110986 <ETH_Prepare_Tx_Descriptors+0x2c0>
  {
    /* Set Vlan Tag control */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_VTIR, pTxConfig->VlanCtrl);
 8110974:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8110976:	689b      	ldr	r3, [r3, #8]
 8110978:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 811097c:	68bb      	ldr	r3, [r7, #8]
 811097e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8110980:	431a      	orrs	r2, r3
 8110982:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8110984:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8110986:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8110988:	68db      	ldr	r3, [r3, #12]
 811098a:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 811098e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8110990:	60da      	str	r2, [r3, #12]
  /* Mark it as NORMAL descriptor */
  CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8110992:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8110994:	68db      	ldr	r3, [r3, #12]
 8110996:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 811099a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811099c:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 811099e:	f3bf 8f5f 	dmb	sy
}
 81109a2:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 81109a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81109a6:	68db      	ldr	r3, [r3, #12]
 81109a8:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 81109ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81109ae:	60da      	str	r2, [r3, #12]

  /* If source address insertion/replacement is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_SAIC) != (uint32_t)RESET)
 81109b0:	68bb      	ldr	r3, [r7, #8]
 81109b2:	681b      	ldr	r3, [r3, #0]
 81109b4:	f003 0302 	and.w	r3, r3, #2
 81109b8:	2b00      	cmp	r3, #0
 81109ba:	f000 80d9 	beq.w	8110b70 <ETH_Prepare_Tx_Descriptors+0x4aa>
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_SAIC, pTxConfig->SrcAddrCtrl);
 81109be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81109c0:	68db      	ldr	r3, [r3, #12]
 81109c2:	f023 7260 	bic.w	r2, r3, #58720256	@ 0x3800000
 81109c6:	68bb      	ldr	r3, [r7, #8]
 81109c8:	68db      	ldr	r3, [r3, #12]
 81109ca:	431a      	orrs	r2, r3
 81109cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81109ce:	60da      	str	r2, [r3, #12]
  }

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 81109d0:	e0ce      	b.n	8110b70 <ETH_Prepare_Tx_Descriptors+0x4aa>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 81109d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81109d4:	68db      	ldr	r3, [r3, #12]
 81109d6:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 81109da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81109dc:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 81109de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 81109e0:	3301      	adds	r3, #1
 81109e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 81109e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 81109e6:	2b03      	cmp	r3, #3
 81109e8:	d902      	bls.n	81109f0 <ETH_Prepare_Tx_Descriptors+0x32a>
 81109ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 81109ec:	3b04      	subs	r3, #4
 81109ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 81109f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81109f2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 81109f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 81109f8:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 81109fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81109fc:	68db      	ldr	r3, [r3, #12]
 81109fe:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8110a02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8110a04:	60da      	str	r2, [r3, #12]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN) == ETH_DMATXNDESCRF_OWN)
 8110a06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8110a08:	68db      	ldr	r3, [r3, #12]
 8110a0a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8110a0e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8110a12:	d007      	beq.n	8110a24 <ETH_Prepare_Tx_Descriptors+0x35e>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8110a14:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8110a16:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8110a18:	3304      	adds	r3, #4
 8110a1a:	009b      	lsls	r3, r3, #2
 8110a1c:	4413      	add	r3, r2
 8110a1e:	685b      	ldr	r3, [r3, #4]
 8110a20:	2b00      	cmp	r3, #0
 8110a22:	d029      	beq.n	8110a78 <ETH_Prepare_Tx_Descriptors+0x3b2>
    {
      descidx = firstdescidx;
 8110a24:	6a3b      	ldr	r3, [r7, #32]
 8110a26:	63fb      	str	r3, [r7, #60]	@ 0x3c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8110a28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8110a2a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8110a2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8110a30:	633b      	str	r3, [r7, #48]	@ 0x30

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8110a32:	2300      	movs	r3, #0
 8110a34:	63bb      	str	r3, [r7, #56]	@ 0x38
 8110a36:	e019      	b.n	8110a6c <ETH_Prepare_Tx_Descriptors+0x3a6>
  __ASM volatile ("dmb 0xF":::"memory");
 8110a38:	f3bf 8f5f 	dmb	sy
}
 8110a3c:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8110a3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8110a40:	68db      	ldr	r3, [r3, #12]
 8110a42:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8110a46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8110a48:	60da      	str	r2, [r3, #12]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8110a4a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8110a4c:	3301      	adds	r3, #1
 8110a4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8110a50:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8110a52:	2b03      	cmp	r3, #3
 8110a54:	d902      	bls.n	8110a5c <ETH_Prepare_Tx_Descriptors+0x396>
 8110a56:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8110a58:	3b04      	subs	r3, #4
 8110a5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8110a5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8110a5e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8110a60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8110a64:	633b      	str	r3, [r7, #48]	@ 0x30
      for (idx = 0; idx < descnbr; idx ++)
 8110a66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8110a68:	3301      	adds	r3, #1
 8110a6a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8110a6c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8110a6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8110a70:	429a      	cmp	r2, r3
 8110a72:	d3e1      	bcc.n	8110a38 <ETH_Prepare_Tx_Descriptors+0x372>
      }

      return HAL_ETH_ERROR_BUSY;
 8110a74:	2302      	movs	r3, #2
 8110a76:	e0ba      	b.n	8110bee <ETH_Prepare_Tx_Descriptors+0x528>
    }

    descnbr += 1U;
 8110a78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8110a7a:	3301      	adds	r3, #1
 8110a7c:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8110a7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8110a80:	689b      	ldr	r3, [r3, #8]
 8110a82:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8110a84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8110a86:	681b      	ldr	r3, [r3, #0]
 8110a88:	461a      	mov	r2, r3
 8110a8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8110a8c:	601a      	str	r2, [r3, #0]
    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8110a8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8110a90:	689b      	ldr	r3, [r3, #8]
 8110a92:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8110a96:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8110a9a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8110a9c:	6852      	ldr	r2, [r2, #4]
 8110a9e:	431a      	orrs	r2, r3
 8110aa0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8110aa2:	609a      	str	r2, [r3, #8]

    if (txbuffer->next != NULL)
 8110aa4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8110aa6:	689b      	ldr	r3, [r3, #8]
 8110aa8:	2b00      	cmp	r3, #0
 8110aaa:	d014      	beq.n	8110ad6 <ETH_Prepare_Tx_Descriptors+0x410>
    {
      /* Get the next Tx buffer in the list */
      txbuffer = txbuffer->next;
 8110aac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8110aae:	689b      	ldr	r3, [r3, #8]
 8110ab0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Set buffer 2 address */
      WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8110ab2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8110ab4:	681b      	ldr	r3, [r3, #0]
 8110ab6:	461a      	mov	r2, r3
 8110ab8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8110aba:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8110abc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8110abe:	689b      	ldr	r3, [r3, #8]
 8110ac0:	f023 537f 	bic.w	r3, r3, #1069547520	@ 0x3fc00000
 8110ac4:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
 8110ac8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8110aca:	6852      	ldr	r2, [r2, #4]
 8110acc:	0412      	lsls	r2, r2, #16
 8110ace:	431a      	orrs	r2, r3
 8110ad0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8110ad2:	609a      	str	r2, [r3, #8]
 8110ad4:	e00a      	b.n	8110aec <ETH_Prepare_Tx_Descriptors+0x426>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8110ad6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8110ad8:	2200      	movs	r2, #0
 8110ada:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8110adc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8110ade:	689b      	ldr	r3, [r3, #8]
 8110ae0:	f023 537f 	bic.w	r3, r3, #1069547520	@ 0x3fc00000
 8110ae4:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
 8110ae8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8110aea:	6093      	str	r3, [r2, #8]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8110aec:	68bb      	ldr	r3, [r7, #8]
 8110aee:	681b      	ldr	r3, [r3, #0]
 8110af0:	f003 0310 	and.w	r3, r3, #16
 8110af4:	2b00      	cmp	r3, #0
 8110af6:	d00f      	beq.n	8110b18 <ETH_Prepare_Tx_Descriptors+0x452>
    {
      /* Set TCP payload length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8110af8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8110afa:	68db      	ldr	r3, [r3, #12]
 8110afc:	0c9b      	lsrs	r3, r3, #18
 8110afe:	049b      	lsls	r3, r3, #18
 8110b00:	68ba      	ldr	r2, [r7, #8]
 8110b02:	69d2      	ldr	r2, [r2, #28]
 8110b04:	431a      	orrs	r2, r3
 8110b06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8110b08:	60da      	str	r2, [r3, #12]
      /* Set TCP Segmentation Enabled bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8110b0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8110b0c:	68db      	ldr	r3, [r3, #12]
 8110b0e:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8110b12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8110b14:	60da      	str	r2, [r3, #12]
 8110b16:	e019      	b.n	8110b4c <ETH_Prepare_Tx_Descriptors+0x486>
    }
    else
    {
      /* Set the packet length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8110b18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8110b1a:	68db      	ldr	r3, [r3, #12]
 8110b1c:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8110b20:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8110b24:	68ba      	ldr	r2, [r7, #8]
 8110b26:	6852      	ldr	r2, [r2, #4]
 8110b28:	431a      	orrs	r2, r3
 8110b2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8110b2c:	60da      	str	r2, [r3, #12]

      if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 8110b2e:	68bb      	ldr	r3, [r7, #8]
 8110b30:	681b      	ldr	r3, [r3, #0]
 8110b32:	f003 0301 	and.w	r3, r3, #1
 8110b36:	2b00      	cmp	r3, #0
 8110b38:	d008      	beq.n	8110b4c <ETH_Prepare_Tx_Descriptors+0x486>
      {
        /* Checksum Insertion Control */
        MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8110b3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8110b3c:	68db      	ldr	r3, [r3, #12]
 8110b3e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8110b42:	68bb      	ldr	r3, [r7, #8]
 8110b44:	695b      	ldr	r3, [r3, #20]
 8110b46:	431a      	orrs	r2, r3
 8110b48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8110b4a:	60da      	str	r2, [r3, #12]
      }
    }

    bd_count += 1U;
 8110b4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8110b4e:	3301      	adds	r3, #1
 8110b50:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("dmb 0xF":::"memory");
 8110b52:	f3bf 8f5f 	dmb	sy
}
 8110b56:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8110b58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8110b5a:	68db      	ldr	r3, [r3, #12]
 8110b5c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8110b60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8110b62:	60da      	str	r2, [r3, #12]
    /* Mark it as NORMAL descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8110b64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8110b66:	68db      	ldr	r3, [r3, #12]
 8110b68:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8110b6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8110b6e:	60da      	str	r2, [r3, #12]
  while (txbuffer->next != NULL)
 8110b70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8110b72:	689b      	ldr	r3, [r3, #8]
 8110b74:	2b00      	cmp	r3, #0
 8110b76:	f47f af2c 	bne.w	81109d2 <ETH_Prepare_Tx_Descriptors+0x30c>
  }

  if (ItMode != ((uint32_t)RESET))
 8110b7a:	687b      	ldr	r3, [r7, #4]
 8110b7c:	2b00      	cmp	r3, #0
 8110b7e:	d006      	beq.n	8110b8e <ETH_Prepare_Tx_Descriptors+0x4c8>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8110b80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8110b82:	689b      	ldr	r3, [r3, #8]
 8110b84:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8110b88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8110b8a:	609a      	str	r2, [r3, #8]
 8110b8c:	e005      	b.n	8110b9a <ETH_Prepare_Tx_Descriptors+0x4d4>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8110b8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8110b90:	689b      	ldr	r3, [r3, #8]
 8110b92:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8110b96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8110b98:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8110b9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8110b9c:	68db      	ldr	r3, [r3, #12]
 8110b9e:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8110ba2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8110ba4:	60da      	str	r2, [r3, #12]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8110ba6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8110ba8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8110baa:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8110bac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8110bae:	3304      	adds	r3, #4
 8110bb0:	009b      	lsls	r3, r3, #2
 8110bb2:	440b      	add	r3, r1
 8110bb4:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8110bb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8110bb8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8110bba:	611a      	str	r2, [r3, #16]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8110bbc:	f3ef 8310 	mrs	r3, PRIMASK
 8110bc0:	613b      	str	r3, [r7, #16]
  return(result);
 8110bc2:	693b      	ldr	r3, [r7, #16]

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 8110bc4:	61fb      	str	r3, [r7, #28]
 8110bc6:	2301      	movs	r3, #1
 8110bc8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8110bca:	697b      	ldr	r3, [r7, #20]
 8110bcc:	f383 8810 	msr	PRIMASK, r3
}
 8110bd0:	bf00      	nop
  __set_PRIMASK(1);

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8110bd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8110bd4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8110bd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8110bd8:	4413      	add	r3, r2
 8110bda:	1c5a      	adds	r2, r3, #1
 8110bdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8110bde:	629a      	str	r2, [r3, #40]	@ 0x28
 8110be0:	69fb      	ldr	r3, [r7, #28]
 8110be2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8110be4:	69bb      	ldr	r3, [r7, #24]
 8110be6:	f383 8810 	msr	PRIMASK, r3
}
 8110bea:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);

  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8110bec:	2300      	movs	r3, #0
}
 8110bee:	4618      	mov	r0, r3
 8110bf0:	3744      	adds	r7, #68	@ 0x44
 8110bf2:	46bd      	mov	sp, r7
 8110bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8110bf8:	4770      	bx	lr
	...

08110bfc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8110bfc:	b480      	push	{r7}
 8110bfe:	b089      	sub	sp, #36	@ 0x24
 8110c00:	af00      	add	r7, sp, #0
 8110c02:	6078      	str	r0, [r7, #4]
 8110c04:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8110c06:	2300      	movs	r3, #0
 8110c08:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
 8110c0a:	4b89      	ldr	r3, [pc, #548]	@ (8110e30 <HAL_GPIO_Init+0x234>)
 8110c0c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8110c0e:	e194      	b.n	8110f3a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8110c10:	683b      	ldr	r3, [r7, #0]
 8110c12:	681a      	ldr	r2, [r3, #0]
 8110c14:	2101      	movs	r1, #1
 8110c16:	69fb      	ldr	r3, [r7, #28]
 8110c18:	fa01 f303 	lsl.w	r3, r1, r3
 8110c1c:	4013      	ands	r3, r2
 8110c1e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8110c20:	693b      	ldr	r3, [r7, #16]
 8110c22:	2b00      	cmp	r3, #0
 8110c24:	f000 8186 	beq.w	8110f34 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8110c28:	683b      	ldr	r3, [r7, #0]
 8110c2a:	685b      	ldr	r3, [r3, #4]
 8110c2c:	f003 0303 	and.w	r3, r3, #3
 8110c30:	2b01      	cmp	r3, #1
 8110c32:	d005      	beq.n	8110c40 <HAL_GPIO_Init+0x44>
 8110c34:	683b      	ldr	r3, [r7, #0]
 8110c36:	685b      	ldr	r3, [r3, #4]
 8110c38:	f003 0303 	and.w	r3, r3, #3
 8110c3c:	2b02      	cmp	r3, #2
 8110c3e:	d130      	bne.n	8110ca2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8110c40:	687b      	ldr	r3, [r7, #4]
 8110c42:	689b      	ldr	r3, [r3, #8]
 8110c44:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8110c46:	69fb      	ldr	r3, [r7, #28]
 8110c48:	005b      	lsls	r3, r3, #1
 8110c4a:	2203      	movs	r2, #3
 8110c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8110c50:	43db      	mvns	r3, r3
 8110c52:	69ba      	ldr	r2, [r7, #24]
 8110c54:	4013      	ands	r3, r2
 8110c56:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8110c58:	683b      	ldr	r3, [r7, #0]
 8110c5a:	68da      	ldr	r2, [r3, #12]
 8110c5c:	69fb      	ldr	r3, [r7, #28]
 8110c5e:	005b      	lsls	r3, r3, #1
 8110c60:	fa02 f303 	lsl.w	r3, r2, r3
 8110c64:	69ba      	ldr	r2, [r7, #24]
 8110c66:	4313      	orrs	r3, r2
 8110c68:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8110c6a:	687b      	ldr	r3, [r7, #4]
 8110c6c:	69ba      	ldr	r2, [r7, #24]
 8110c6e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8110c70:	687b      	ldr	r3, [r7, #4]
 8110c72:	685b      	ldr	r3, [r3, #4]
 8110c74:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8110c76:	2201      	movs	r2, #1
 8110c78:	69fb      	ldr	r3, [r7, #28]
 8110c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8110c7e:	43db      	mvns	r3, r3
 8110c80:	69ba      	ldr	r2, [r7, #24]
 8110c82:	4013      	ands	r3, r2
 8110c84:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8110c86:	683b      	ldr	r3, [r7, #0]
 8110c88:	685b      	ldr	r3, [r3, #4]
 8110c8a:	091b      	lsrs	r3, r3, #4
 8110c8c:	f003 0201 	and.w	r2, r3, #1
 8110c90:	69fb      	ldr	r3, [r7, #28]
 8110c92:	fa02 f303 	lsl.w	r3, r2, r3
 8110c96:	69ba      	ldr	r2, [r7, #24]
 8110c98:	4313      	orrs	r3, r2
 8110c9a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8110c9c:	687b      	ldr	r3, [r7, #4]
 8110c9e:	69ba      	ldr	r2, [r7, #24]
 8110ca0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8110ca2:	683b      	ldr	r3, [r7, #0]
 8110ca4:	685b      	ldr	r3, [r3, #4]
 8110ca6:	f003 0303 	and.w	r3, r3, #3
 8110caa:	2b03      	cmp	r3, #3
 8110cac:	d017      	beq.n	8110cde <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8110cae:	687b      	ldr	r3, [r7, #4]
 8110cb0:	68db      	ldr	r3, [r3, #12]
 8110cb2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8110cb4:	69fb      	ldr	r3, [r7, #28]
 8110cb6:	005b      	lsls	r3, r3, #1
 8110cb8:	2203      	movs	r2, #3
 8110cba:	fa02 f303 	lsl.w	r3, r2, r3
 8110cbe:	43db      	mvns	r3, r3
 8110cc0:	69ba      	ldr	r2, [r7, #24]
 8110cc2:	4013      	ands	r3, r2
 8110cc4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8110cc6:	683b      	ldr	r3, [r7, #0]
 8110cc8:	689a      	ldr	r2, [r3, #8]
 8110cca:	69fb      	ldr	r3, [r7, #28]
 8110ccc:	005b      	lsls	r3, r3, #1
 8110cce:	fa02 f303 	lsl.w	r3, r2, r3
 8110cd2:	69ba      	ldr	r2, [r7, #24]
 8110cd4:	4313      	orrs	r3, r2
 8110cd6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8110cd8:	687b      	ldr	r3, [r7, #4]
 8110cda:	69ba      	ldr	r2, [r7, #24]
 8110cdc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8110cde:	683b      	ldr	r3, [r7, #0]
 8110ce0:	685b      	ldr	r3, [r3, #4]
 8110ce2:	f003 0303 	and.w	r3, r3, #3
 8110ce6:	2b02      	cmp	r3, #2
 8110ce8:	d123      	bne.n	8110d32 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8110cea:	69fb      	ldr	r3, [r7, #28]
 8110cec:	08da      	lsrs	r2, r3, #3
 8110cee:	687b      	ldr	r3, [r7, #4]
 8110cf0:	3208      	adds	r2, #8
 8110cf2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8110cf6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8110cf8:	69fb      	ldr	r3, [r7, #28]
 8110cfa:	f003 0307 	and.w	r3, r3, #7
 8110cfe:	009b      	lsls	r3, r3, #2
 8110d00:	220f      	movs	r2, #15
 8110d02:	fa02 f303 	lsl.w	r3, r2, r3
 8110d06:	43db      	mvns	r3, r3
 8110d08:	69ba      	ldr	r2, [r7, #24]
 8110d0a:	4013      	ands	r3, r2
 8110d0c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8110d0e:	683b      	ldr	r3, [r7, #0]
 8110d10:	691a      	ldr	r2, [r3, #16]
 8110d12:	69fb      	ldr	r3, [r7, #28]
 8110d14:	f003 0307 	and.w	r3, r3, #7
 8110d18:	009b      	lsls	r3, r3, #2
 8110d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8110d1e:	69ba      	ldr	r2, [r7, #24]
 8110d20:	4313      	orrs	r3, r2
 8110d22:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8110d24:	69fb      	ldr	r3, [r7, #28]
 8110d26:	08da      	lsrs	r2, r3, #3
 8110d28:	687b      	ldr	r3, [r7, #4]
 8110d2a:	3208      	adds	r2, #8
 8110d2c:	69b9      	ldr	r1, [r7, #24]
 8110d2e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8110d32:	687b      	ldr	r3, [r7, #4]
 8110d34:	681b      	ldr	r3, [r3, #0]
 8110d36:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8110d38:	69fb      	ldr	r3, [r7, #28]
 8110d3a:	005b      	lsls	r3, r3, #1
 8110d3c:	2203      	movs	r2, #3
 8110d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8110d42:	43db      	mvns	r3, r3
 8110d44:	69ba      	ldr	r2, [r7, #24]
 8110d46:	4013      	ands	r3, r2
 8110d48:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8110d4a:	683b      	ldr	r3, [r7, #0]
 8110d4c:	685b      	ldr	r3, [r3, #4]
 8110d4e:	f003 0203 	and.w	r2, r3, #3
 8110d52:	69fb      	ldr	r3, [r7, #28]
 8110d54:	005b      	lsls	r3, r3, #1
 8110d56:	fa02 f303 	lsl.w	r3, r2, r3
 8110d5a:	69ba      	ldr	r2, [r7, #24]
 8110d5c:	4313      	orrs	r3, r2
 8110d5e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8110d60:	687b      	ldr	r3, [r7, #4]
 8110d62:	69ba      	ldr	r2, [r7, #24]
 8110d64:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8110d66:	683b      	ldr	r3, [r7, #0]
 8110d68:	685b      	ldr	r3, [r3, #4]
 8110d6a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8110d6e:	2b00      	cmp	r3, #0
 8110d70:	f000 80e0 	beq.w	8110f34 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8110d74:	4b2f      	ldr	r3, [pc, #188]	@ (8110e34 <HAL_GPIO_Init+0x238>)
 8110d76:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8110d7a:	4a2e      	ldr	r2, [pc, #184]	@ (8110e34 <HAL_GPIO_Init+0x238>)
 8110d7c:	f043 0302 	orr.w	r3, r3, #2
 8110d80:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8110d84:	4b2b      	ldr	r3, [pc, #172]	@ (8110e34 <HAL_GPIO_Init+0x238>)
 8110d86:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8110d8a:	f003 0302 	and.w	r3, r3, #2
 8110d8e:	60fb      	str	r3, [r7, #12]
 8110d90:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8110d92:	4a29      	ldr	r2, [pc, #164]	@ (8110e38 <HAL_GPIO_Init+0x23c>)
 8110d94:	69fb      	ldr	r3, [r7, #28]
 8110d96:	089b      	lsrs	r3, r3, #2
 8110d98:	3302      	adds	r3, #2
 8110d9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8110d9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8110da0:	69fb      	ldr	r3, [r7, #28]
 8110da2:	f003 0303 	and.w	r3, r3, #3
 8110da6:	009b      	lsls	r3, r3, #2
 8110da8:	220f      	movs	r2, #15
 8110daa:	fa02 f303 	lsl.w	r3, r2, r3
 8110dae:	43db      	mvns	r3, r3
 8110db0:	69ba      	ldr	r2, [r7, #24]
 8110db2:	4013      	ands	r3, r2
 8110db4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8110db6:	687b      	ldr	r3, [r7, #4]
 8110db8:	4a20      	ldr	r2, [pc, #128]	@ (8110e3c <HAL_GPIO_Init+0x240>)
 8110dba:	4293      	cmp	r3, r2
 8110dbc:	d052      	beq.n	8110e64 <HAL_GPIO_Init+0x268>
 8110dbe:	687b      	ldr	r3, [r7, #4]
 8110dc0:	4a1f      	ldr	r2, [pc, #124]	@ (8110e40 <HAL_GPIO_Init+0x244>)
 8110dc2:	4293      	cmp	r3, r2
 8110dc4:	d031      	beq.n	8110e2a <HAL_GPIO_Init+0x22e>
 8110dc6:	687b      	ldr	r3, [r7, #4]
 8110dc8:	4a1e      	ldr	r2, [pc, #120]	@ (8110e44 <HAL_GPIO_Init+0x248>)
 8110dca:	4293      	cmp	r3, r2
 8110dcc:	d02b      	beq.n	8110e26 <HAL_GPIO_Init+0x22a>
 8110dce:	687b      	ldr	r3, [r7, #4]
 8110dd0:	4a1d      	ldr	r2, [pc, #116]	@ (8110e48 <HAL_GPIO_Init+0x24c>)
 8110dd2:	4293      	cmp	r3, r2
 8110dd4:	d025      	beq.n	8110e22 <HAL_GPIO_Init+0x226>
 8110dd6:	687b      	ldr	r3, [r7, #4]
 8110dd8:	4a1c      	ldr	r2, [pc, #112]	@ (8110e4c <HAL_GPIO_Init+0x250>)
 8110dda:	4293      	cmp	r3, r2
 8110ddc:	d01f      	beq.n	8110e1e <HAL_GPIO_Init+0x222>
 8110dde:	687b      	ldr	r3, [r7, #4]
 8110de0:	4a1b      	ldr	r2, [pc, #108]	@ (8110e50 <HAL_GPIO_Init+0x254>)
 8110de2:	4293      	cmp	r3, r2
 8110de4:	d019      	beq.n	8110e1a <HAL_GPIO_Init+0x21e>
 8110de6:	687b      	ldr	r3, [r7, #4]
 8110de8:	4a1a      	ldr	r2, [pc, #104]	@ (8110e54 <HAL_GPIO_Init+0x258>)
 8110dea:	4293      	cmp	r3, r2
 8110dec:	d013      	beq.n	8110e16 <HAL_GPIO_Init+0x21a>
 8110dee:	687b      	ldr	r3, [r7, #4]
 8110df0:	4a19      	ldr	r2, [pc, #100]	@ (8110e58 <HAL_GPIO_Init+0x25c>)
 8110df2:	4293      	cmp	r3, r2
 8110df4:	d00d      	beq.n	8110e12 <HAL_GPIO_Init+0x216>
 8110df6:	687b      	ldr	r3, [r7, #4]
 8110df8:	4a18      	ldr	r2, [pc, #96]	@ (8110e5c <HAL_GPIO_Init+0x260>)
 8110dfa:	4293      	cmp	r3, r2
 8110dfc:	d007      	beq.n	8110e0e <HAL_GPIO_Init+0x212>
 8110dfe:	687b      	ldr	r3, [r7, #4]
 8110e00:	4a17      	ldr	r2, [pc, #92]	@ (8110e60 <HAL_GPIO_Init+0x264>)
 8110e02:	4293      	cmp	r3, r2
 8110e04:	d101      	bne.n	8110e0a <HAL_GPIO_Init+0x20e>
 8110e06:	2309      	movs	r3, #9
 8110e08:	e02d      	b.n	8110e66 <HAL_GPIO_Init+0x26a>
 8110e0a:	230a      	movs	r3, #10
 8110e0c:	e02b      	b.n	8110e66 <HAL_GPIO_Init+0x26a>
 8110e0e:	2308      	movs	r3, #8
 8110e10:	e029      	b.n	8110e66 <HAL_GPIO_Init+0x26a>
 8110e12:	2307      	movs	r3, #7
 8110e14:	e027      	b.n	8110e66 <HAL_GPIO_Init+0x26a>
 8110e16:	2306      	movs	r3, #6
 8110e18:	e025      	b.n	8110e66 <HAL_GPIO_Init+0x26a>
 8110e1a:	2305      	movs	r3, #5
 8110e1c:	e023      	b.n	8110e66 <HAL_GPIO_Init+0x26a>
 8110e1e:	2304      	movs	r3, #4
 8110e20:	e021      	b.n	8110e66 <HAL_GPIO_Init+0x26a>
 8110e22:	2303      	movs	r3, #3
 8110e24:	e01f      	b.n	8110e66 <HAL_GPIO_Init+0x26a>
 8110e26:	2302      	movs	r3, #2
 8110e28:	e01d      	b.n	8110e66 <HAL_GPIO_Init+0x26a>
 8110e2a:	2301      	movs	r3, #1
 8110e2c:	e01b      	b.n	8110e66 <HAL_GPIO_Init+0x26a>
 8110e2e:	bf00      	nop
 8110e30:	580000c0 	.word	0x580000c0
 8110e34:	58024400 	.word	0x58024400
 8110e38:	58000400 	.word	0x58000400
 8110e3c:	58020000 	.word	0x58020000
 8110e40:	58020400 	.word	0x58020400
 8110e44:	58020800 	.word	0x58020800
 8110e48:	58020c00 	.word	0x58020c00
 8110e4c:	58021000 	.word	0x58021000
 8110e50:	58021400 	.word	0x58021400
 8110e54:	58021800 	.word	0x58021800
 8110e58:	58021c00 	.word	0x58021c00
 8110e5c:	58022000 	.word	0x58022000
 8110e60:	58022400 	.word	0x58022400
 8110e64:	2300      	movs	r3, #0
 8110e66:	69fa      	ldr	r2, [r7, #28]
 8110e68:	f002 0203 	and.w	r2, r2, #3
 8110e6c:	0092      	lsls	r2, r2, #2
 8110e6e:	4093      	lsls	r3, r2
 8110e70:	69ba      	ldr	r2, [r7, #24]
 8110e72:	4313      	orrs	r3, r2
 8110e74:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8110e76:	4938      	ldr	r1, [pc, #224]	@ (8110f58 <HAL_GPIO_Init+0x35c>)
 8110e78:	69fb      	ldr	r3, [r7, #28]
 8110e7a:	089b      	lsrs	r3, r3, #2
 8110e7c:	3302      	adds	r3, #2
 8110e7e:	69ba      	ldr	r2, [r7, #24]
 8110e80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8110e84:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8110e88:	681b      	ldr	r3, [r3, #0]
 8110e8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8110e8c:	693b      	ldr	r3, [r7, #16]
 8110e8e:	43db      	mvns	r3, r3
 8110e90:	69ba      	ldr	r2, [r7, #24]
 8110e92:	4013      	ands	r3, r2
 8110e94:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8110e96:	683b      	ldr	r3, [r7, #0]
 8110e98:	685b      	ldr	r3, [r3, #4]
 8110e9a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8110e9e:	2b00      	cmp	r3, #0
 8110ea0:	d003      	beq.n	8110eaa <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8110ea2:	69ba      	ldr	r2, [r7, #24]
 8110ea4:	693b      	ldr	r3, [r7, #16]
 8110ea6:	4313      	orrs	r3, r2
 8110ea8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8110eaa:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8110eae:	69bb      	ldr	r3, [r7, #24]
 8110eb0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8110eb2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8110eb6:	685b      	ldr	r3, [r3, #4]
 8110eb8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8110eba:	693b      	ldr	r3, [r7, #16]
 8110ebc:	43db      	mvns	r3, r3
 8110ebe:	69ba      	ldr	r2, [r7, #24]
 8110ec0:	4013      	ands	r3, r2
 8110ec2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8110ec4:	683b      	ldr	r3, [r7, #0]
 8110ec6:	685b      	ldr	r3, [r3, #4]
 8110ec8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8110ecc:	2b00      	cmp	r3, #0
 8110ece:	d003      	beq.n	8110ed8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8110ed0:	69ba      	ldr	r2, [r7, #24]
 8110ed2:	693b      	ldr	r3, [r7, #16]
 8110ed4:	4313      	orrs	r3, r2
 8110ed6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8110ed8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8110edc:	69bb      	ldr	r3, [r7, #24]
 8110ede:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8110ee0:	697b      	ldr	r3, [r7, #20]
 8110ee2:	685b      	ldr	r3, [r3, #4]
 8110ee4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8110ee6:	693b      	ldr	r3, [r7, #16]
 8110ee8:	43db      	mvns	r3, r3
 8110eea:	69ba      	ldr	r2, [r7, #24]
 8110eec:	4013      	ands	r3, r2
 8110eee:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8110ef0:	683b      	ldr	r3, [r7, #0]
 8110ef2:	685b      	ldr	r3, [r3, #4]
 8110ef4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8110ef8:	2b00      	cmp	r3, #0
 8110efa:	d003      	beq.n	8110f04 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8110efc:	69ba      	ldr	r2, [r7, #24]
 8110efe:	693b      	ldr	r3, [r7, #16]
 8110f00:	4313      	orrs	r3, r2
 8110f02:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8110f04:	697b      	ldr	r3, [r7, #20]
 8110f06:	69ba      	ldr	r2, [r7, #24]
 8110f08:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8110f0a:	697b      	ldr	r3, [r7, #20]
 8110f0c:	681b      	ldr	r3, [r3, #0]
 8110f0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8110f10:	693b      	ldr	r3, [r7, #16]
 8110f12:	43db      	mvns	r3, r3
 8110f14:	69ba      	ldr	r2, [r7, #24]
 8110f16:	4013      	ands	r3, r2
 8110f18:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8110f1a:	683b      	ldr	r3, [r7, #0]
 8110f1c:	685b      	ldr	r3, [r3, #4]
 8110f1e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8110f22:	2b00      	cmp	r3, #0
 8110f24:	d003      	beq.n	8110f2e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8110f26:	69ba      	ldr	r2, [r7, #24]
 8110f28:	693b      	ldr	r3, [r7, #16]
 8110f2a:	4313      	orrs	r3, r2
 8110f2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8110f2e:	697b      	ldr	r3, [r7, #20]
 8110f30:	69ba      	ldr	r2, [r7, #24]
 8110f32:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8110f34:	69fb      	ldr	r3, [r7, #28]
 8110f36:	3301      	adds	r3, #1
 8110f38:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8110f3a:	683b      	ldr	r3, [r7, #0]
 8110f3c:	681a      	ldr	r2, [r3, #0]
 8110f3e:	69fb      	ldr	r3, [r7, #28]
 8110f40:	fa22 f303 	lsr.w	r3, r2, r3
 8110f44:	2b00      	cmp	r3, #0
 8110f46:	f47f ae63 	bne.w	8110c10 <HAL_GPIO_Init+0x14>
  }
}
 8110f4a:	bf00      	nop
 8110f4c:	bf00      	nop
 8110f4e:	3724      	adds	r7, #36	@ 0x24
 8110f50:	46bd      	mov	sp, r7
 8110f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8110f56:	4770      	bx	lr
 8110f58:	58000400 	.word	0x58000400

08110f5c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8110f5c:	b480      	push	{r7}
 8110f5e:	b087      	sub	sp, #28
 8110f60:	af00      	add	r7, sp, #0
 8110f62:	6078      	str	r0, [r7, #4]
 8110f64:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8110f66:	2300      	movs	r3, #0
 8110f68:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent;
  uint32_t tmp;
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
 8110f6a:	4b75      	ldr	r3, [pc, #468]	@ (8111140 <HAL_GPIO_DeInit+0x1e4>)
 8110f6c:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 8110f6e:	e0d9      	b.n	8111124 <HAL_GPIO_DeInit+0x1c8>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 8110f70:	2201      	movs	r2, #1
 8110f72:	697b      	ldr	r3, [r7, #20]
 8110f74:	fa02 f303 	lsl.w	r3, r2, r3
 8110f78:	683a      	ldr	r2, [r7, #0]
 8110f7a:	4013      	ands	r3, r2
 8110f7c:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
 8110f7e:	68fb      	ldr	r3, [r7, #12]
 8110f80:	2b00      	cmp	r3, #0
 8110f82:	f000 80cc 	beq.w	811111e <HAL_GPIO_DeInit+0x1c2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
 8110f86:	4a6f      	ldr	r2, [pc, #444]	@ (8111144 <HAL_GPIO_DeInit+0x1e8>)
 8110f88:	697b      	ldr	r3, [r7, #20]
 8110f8a:	089b      	lsrs	r3, r3, #2
 8110f8c:	3302      	adds	r3, #2
 8110f8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8110f92:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8110f94:	697b      	ldr	r3, [r7, #20]
 8110f96:	f003 0303 	and.w	r3, r3, #3
 8110f9a:	009b      	lsls	r3, r3, #2
 8110f9c:	220f      	movs	r2, #15
 8110f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8110fa2:	68ba      	ldr	r2, [r7, #8]
 8110fa4:	4013      	ands	r3, r2
 8110fa6:	60bb      	str	r3, [r7, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8110fa8:	687b      	ldr	r3, [r7, #4]
 8110faa:	4a67      	ldr	r2, [pc, #412]	@ (8111148 <HAL_GPIO_DeInit+0x1ec>)
 8110fac:	4293      	cmp	r3, r2
 8110fae:	d037      	beq.n	8111020 <HAL_GPIO_DeInit+0xc4>
 8110fb0:	687b      	ldr	r3, [r7, #4]
 8110fb2:	4a66      	ldr	r2, [pc, #408]	@ (811114c <HAL_GPIO_DeInit+0x1f0>)
 8110fb4:	4293      	cmp	r3, r2
 8110fb6:	d031      	beq.n	811101c <HAL_GPIO_DeInit+0xc0>
 8110fb8:	687b      	ldr	r3, [r7, #4]
 8110fba:	4a65      	ldr	r2, [pc, #404]	@ (8111150 <HAL_GPIO_DeInit+0x1f4>)
 8110fbc:	4293      	cmp	r3, r2
 8110fbe:	d02b      	beq.n	8111018 <HAL_GPIO_DeInit+0xbc>
 8110fc0:	687b      	ldr	r3, [r7, #4]
 8110fc2:	4a64      	ldr	r2, [pc, #400]	@ (8111154 <HAL_GPIO_DeInit+0x1f8>)
 8110fc4:	4293      	cmp	r3, r2
 8110fc6:	d025      	beq.n	8111014 <HAL_GPIO_DeInit+0xb8>
 8110fc8:	687b      	ldr	r3, [r7, #4]
 8110fca:	4a63      	ldr	r2, [pc, #396]	@ (8111158 <HAL_GPIO_DeInit+0x1fc>)
 8110fcc:	4293      	cmp	r3, r2
 8110fce:	d01f      	beq.n	8111010 <HAL_GPIO_DeInit+0xb4>
 8110fd0:	687b      	ldr	r3, [r7, #4]
 8110fd2:	4a62      	ldr	r2, [pc, #392]	@ (811115c <HAL_GPIO_DeInit+0x200>)
 8110fd4:	4293      	cmp	r3, r2
 8110fd6:	d019      	beq.n	811100c <HAL_GPIO_DeInit+0xb0>
 8110fd8:	687b      	ldr	r3, [r7, #4]
 8110fda:	4a61      	ldr	r2, [pc, #388]	@ (8111160 <HAL_GPIO_DeInit+0x204>)
 8110fdc:	4293      	cmp	r3, r2
 8110fde:	d013      	beq.n	8111008 <HAL_GPIO_DeInit+0xac>
 8110fe0:	687b      	ldr	r3, [r7, #4]
 8110fe2:	4a60      	ldr	r2, [pc, #384]	@ (8111164 <HAL_GPIO_DeInit+0x208>)
 8110fe4:	4293      	cmp	r3, r2
 8110fe6:	d00d      	beq.n	8111004 <HAL_GPIO_DeInit+0xa8>
 8110fe8:	687b      	ldr	r3, [r7, #4]
 8110fea:	4a5f      	ldr	r2, [pc, #380]	@ (8111168 <HAL_GPIO_DeInit+0x20c>)
 8110fec:	4293      	cmp	r3, r2
 8110fee:	d007      	beq.n	8111000 <HAL_GPIO_DeInit+0xa4>
 8110ff0:	687b      	ldr	r3, [r7, #4]
 8110ff2:	4a5e      	ldr	r2, [pc, #376]	@ (811116c <HAL_GPIO_DeInit+0x210>)
 8110ff4:	4293      	cmp	r3, r2
 8110ff6:	d101      	bne.n	8110ffc <HAL_GPIO_DeInit+0xa0>
 8110ff8:	2309      	movs	r3, #9
 8110ffa:	e012      	b.n	8111022 <HAL_GPIO_DeInit+0xc6>
 8110ffc:	230a      	movs	r3, #10
 8110ffe:	e010      	b.n	8111022 <HAL_GPIO_DeInit+0xc6>
 8111000:	2308      	movs	r3, #8
 8111002:	e00e      	b.n	8111022 <HAL_GPIO_DeInit+0xc6>
 8111004:	2307      	movs	r3, #7
 8111006:	e00c      	b.n	8111022 <HAL_GPIO_DeInit+0xc6>
 8111008:	2306      	movs	r3, #6
 811100a:	e00a      	b.n	8111022 <HAL_GPIO_DeInit+0xc6>
 811100c:	2305      	movs	r3, #5
 811100e:	e008      	b.n	8111022 <HAL_GPIO_DeInit+0xc6>
 8111010:	2304      	movs	r3, #4
 8111012:	e006      	b.n	8111022 <HAL_GPIO_DeInit+0xc6>
 8111014:	2303      	movs	r3, #3
 8111016:	e004      	b.n	8111022 <HAL_GPIO_DeInit+0xc6>
 8111018:	2302      	movs	r3, #2
 811101a:	e002      	b.n	8111022 <HAL_GPIO_DeInit+0xc6>
 811101c:	2301      	movs	r3, #1
 811101e:	e000      	b.n	8111022 <HAL_GPIO_DeInit+0xc6>
 8111020:	2300      	movs	r3, #0
 8111022:	697a      	ldr	r2, [r7, #20]
 8111024:	f002 0203 	and.w	r2, r2, #3
 8111028:	0092      	lsls	r2, r2, #2
 811102a:	4093      	lsls	r3, r2
 811102c:	68ba      	ldr	r2, [r7, #8]
 811102e:	429a      	cmp	r2, r3
 8111030:	d136      	bne.n	81110a0 <HAL_GPIO_DeInit+0x144>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 8111032:	693b      	ldr	r3, [r7, #16]
 8111034:	681a      	ldr	r2, [r3, #0]
 8111036:	68fb      	ldr	r3, [r7, #12]
 8111038:	43db      	mvns	r3, r3
 811103a:	401a      	ands	r2, r3
 811103c:	693b      	ldr	r3, [r7, #16]
 811103e:	601a      	str	r2, [r3, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 8111040:	693b      	ldr	r3, [r7, #16]
 8111042:	685a      	ldr	r2, [r3, #4]
 8111044:	68fb      	ldr	r3, [r7, #12]
 8111046:	43db      	mvns	r3, r3
 8111048:	401a      	ands	r2, r3
 811104a:	693b      	ldr	r3, [r7, #16]
 811104c:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 811104e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8111052:	685a      	ldr	r2, [r3, #4]
 8111054:	68fb      	ldr	r3, [r7, #12]
 8111056:	43db      	mvns	r3, r3
 8111058:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 811105c:	4013      	ands	r3, r2
 811105e:	604b      	str	r3, [r1, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 8111060:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8111064:	681a      	ldr	r2, [r3, #0]
 8111066:	68fb      	ldr	r3, [r7, #12]
 8111068:	43db      	mvns	r3, r3
 811106a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 811106e:	4013      	ands	r3, r2
 8111070:	600b      	str	r3, [r1, #0]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 8111072:	697b      	ldr	r3, [r7, #20]
 8111074:	f003 0303 	and.w	r3, r3, #3
 8111078:	009b      	lsls	r3, r3, #2
 811107a:	220f      	movs	r2, #15
 811107c:	fa02 f303 	lsl.w	r3, r2, r3
 8111080:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8111082:	4a30      	ldr	r2, [pc, #192]	@ (8111144 <HAL_GPIO_DeInit+0x1e8>)
 8111084:	697b      	ldr	r3, [r7, #20]
 8111086:	089b      	lsrs	r3, r3, #2
 8111088:	3302      	adds	r3, #2
 811108a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 811108e:	68bb      	ldr	r3, [r7, #8]
 8111090:	43da      	mvns	r2, r3
 8111092:	482c      	ldr	r0, [pc, #176]	@ (8111144 <HAL_GPIO_DeInit+0x1e8>)
 8111094:	697b      	ldr	r3, [r7, #20]
 8111096:	089b      	lsrs	r3, r3, #2
 8111098:	400a      	ands	r2, r1
 811109a:	3302      	adds	r3, #2
 811109c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 81110a0:	687b      	ldr	r3, [r7, #4]
 81110a2:	681a      	ldr	r2, [r3, #0]
 81110a4:	697b      	ldr	r3, [r7, #20]
 81110a6:	005b      	lsls	r3, r3, #1
 81110a8:	2103      	movs	r1, #3
 81110aa:	fa01 f303 	lsl.w	r3, r1, r3
 81110ae:	431a      	orrs	r2, r3
 81110b0:	687b      	ldr	r3, [r7, #4]
 81110b2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 81110b4:	697b      	ldr	r3, [r7, #20]
 81110b6:	08da      	lsrs	r2, r3, #3
 81110b8:	687b      	ldr	r3, [r7, #4]
 81110ba:	3208      	adds	r2, #8
 81110bc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 81110c0:	697b      	ldr	r3, [r7, #20]
 81110c2:	f003 0307 	and.w	r3, r3, #7
 81110c6:	009b      	lsls	r3, r3, #2
 81110c8:	220f      	movs	r2, #15
 81110ca:	fa02 f303 	lsl.w	r3, r2, r3
 81110ce:	43db      	mvns	r3, r3
 81110d0:	697a      	ldr	r2, [r7, #20]
 81110d2:	08d2      	lsrs	r2, r2, #3
 81110d4:	4019      	ands	r1, r3
 81110d6:	687b      	ldr	r3, [r7, #4]
 81110d8:	3208      	adds	r2, #8
 81110da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 81110de:	687b      	ldr	r3, [r7, #4]
 81110e0:	68da      	ldr	r2, [r3, #12]
 81110e2:	697b      	ldr	r3, [r7, #20]
 81110e4:	005b      	lsls	r3, r3, #1
 81110e6:	2103      	movs	r1, #3
 81110e8:	fa01 f303 	lsl.w	r3, r1, r3
 81110ec:	43db      	mvns	r3, r3
 81110ee:	401a      	ands	r2, r3
 81110f0:	687b      	ldr	r3, [r7, #4]
 81110f2:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 81110f4:	687b      	ldr	r3, [r7, #4]
 81110f6:	685a      	ldr	r2, [r3, #4]
 81110f8:	2101      	movs	r1, #1
 81110fa:	697b      	ldr	r3, [r7, #20]
 81110fc:	fa01 f303 	lsl.w	r3, r1, r3
 8111100:	43db      	mvns	r3, r3
 8111102:	401a      	ands	r2, r3
 8111104:	687b      	ldr	r3, [r7, #4]
 8111106:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8111108:	687b      	ldr	r3, [r7, #4]
 811110a:	689a      	ldr	r2, [r3, #8]
 811110c:	697b      	ldr	r3, [r7, #20]
 811110e:	005b      	lsls	r3, r3, #1
 8111110:	2103      	movs	r1, #3
 8111112:	fa01 f303 	lsl.w	r3, r1, r3
 8111116:	43db      	mvns	r3, r3
 8111118:	401a      	ands	r2, r3
 811111a:	687b      	ldr	r3, [r7, #4]
 811111c:	609a      	str	r2, [r3, #8]
    }

    position++;
 811111e:	697b      	ldr	r3, [r7, #20]
 8111120:	3301      	adds	r3, #1
 8111122:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00U)
 8111124:	683a      	ldr	r2, [r7, #0]
 8111126:	697b      	ldr	r3, [r7, #20]
 8111128:	fa22 f303 	lsr.w	r3, r2, r3
 811112c:	2b00      	cmp	r3, #0
 811112e:	f47f af1f 	bne.w	8110f70 <HAL_GPIO_DeInit+0x14>
  }
}
 8111132:	bf00      	nop
 8111134:	bf00      	nop
 8111136:	371c      	adds	r7, #28
 8111138:	46bd      	mov	sp, r7
 811113a:	f85d 7b04 	ldr.w	r7, [sp], #4
 811113e:	4770      	bx	lr
 8111140:	580000c0 	.word	0x580000c0
 8111144:	58000400 	.word	0x58000400
 8111148:	58020000 	.word	0x58020000
 811114c:	58020400 	.word	0x58020400
 8111150:	58020800 	.word	0x58020800
 8111154:	58020c00 	.word	0x58020c00
 8111158:	58021000 	.word	0x58021000
 811115c:	58021400 	.word	0x58021400
 8111160:	58021800 	.word	0x58021800
 8111164:	58021c00 	.word	0x58021c00
 8111168:	58022000 	.word	0x58022000
 811116c:	58022400 	.word	0x58022400

08111170 <HAL_HSEM_Take>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_HSEM_Take(uint32_t SemID, uint32_t ProcessID)
{
 8111170:	b480      	push	{r7}
 8111172:	b083      	sub	sp, #12
 8111174:	af00      	add	r7, sp, #0
 8111176:	6078      	str	r0, [r7, #4]
 8111178:	6039      	str	r1, [r7, #0]
    /*take success when MasterID and ProcessID match and take bit set*/
    return HAL_OK;
  }
#else
  /* First step  write R register with MasterID, processID and take bit=1*/
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT | HSEM_R_LOCK);
 811117a:	490e      	ldr	r1, [pc, #56]	@ (81111b4 <HAL_HSEM_Take+0x44>)
 811117c:	683b      	ldr	r3, [r7, #0]
 811117e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8111182:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8111186:	687a      	ldr	r2, [r7, #4]
 8111188:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  /* second step : read the R register . Take achieved if MasterID and processID match and take bit set to 1 */
  if (HSEM->R[SemID] == (ProcessID | HSEM_CR_COREID_CURRENT | HSEM_R_LOCK))
 811118c:	4a09      	ldr	r2, [pc, #36]	@ (81111b4 <HAL_HSEM_Take+0x44>)
 811118e:	687b      	ldr	r3, [r7, #4]
 8111190:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8111194:	683b      	ldr	r3, [r7, #0]
 8111196:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 811119a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 811119e:	429a      	cmp	r2, r3
 81111a0:	d101      	bne.n	81111a6 <HAL_HSEM_Take+0x36>
  {
    /*take success when MasterID and ProcessID match and take bit set*/
    return HAL_OK;
 81111a2:	2300      	movs	r3, #0
 81111a4:	e000      	b.n	81111a8 <HAL_HSEM_Take+0x38>
  }
#endif

  /* Semaphore take fails*/
  return HAL_ERROR;
 81111a6:	2301      	movs	r3, #1
}
 81111a8:	4618      	mov	r0, r3
 81111aa:	370c      	adds	r7, #12
 81111ac:	46bd      	mov	sp, r7
 81111ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 81111b2:	4770      	bx	lr
 81111b4:	58026400 	.word	0x58026400

081111b8 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 81111b8:	b480      	push	{r7}
 81111ba:	b083      	sub	sp, #12
 81111bc:	af00      	add	r7, sp, #0
 81111be:	6078      	str	r0, [r7, #4]
 81111c0:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 81111c2:	4906      	ldr	r1, [pc, #24]	@ (81111dc <HAL_HSEM_Release+0x24>)
 81111c4:	683b      	ldr	r3, [r7, #0]
 81111c6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 81111ca:	687b      	ldr	r3, [r7, #4]
 81111cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 81111d0:	bf00      	nop
 81111d2:	370c      	adds	r7, #12
 81111d4:	46bd      	mov	sp, r7
 81111d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81111da:	4770      	bx	lr
 81111dc:	58026400 	.word	0x58026400

081111e0 <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 81111e0:	b480      	push	{r7}
 81111e2:	b083      	sub	sp, #12
 81111e4:	af00      	add	r7, sp, #0
 81111e6:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 81111e8:	4b05      	ldr	r3, [pc, #20]	@ (8111200 <HAL_HSEM_ActivateNotification+0x20>)
 81111ea:	681a      	ldr	r2, [r3, #0]
 81111ec:	4904      	ldr	r1, [pc, #16]	@ (8111200 <HAL_HSEM_ActivateNotification+0x20>)
 81111ee:	687b      	ldr	r3, [r7, #4]
 81111f0:	4313      	orrs	r3, r2
 81111f2:	600b      	str	r3, [r1, #0]
#endif
}
 81111f4:	bf00      	nop
 81111f6:	370c      	adds	r7, #12
 81111f8:	46bd      	mov	sp, r7
 81111fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 81111fe:	4770      	bx	lr
 8111200:	58026510 	.word	0x58026510

08111204 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8111204:	b580      	push	{r7, lr}
 8111206:	b082      	sub	sp, #8
 8111208:	af00      	add	r7, sp, #0
    /*Clear Flags*/
    HSEM->C2ICR = ((uint32_t)statusreg);
  }
#else
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 811120a:	4b0a      	ldr	r3, [pc, #40]	@ (8111234 <HAL_HSEM_IRQHandler+0x30>)
 811120c:	68db      	ldr	r3, [r3, #12]
 811120e:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8111210:	4b08      	ldr	r3, [pc, #32]	@ (8111234 <HAL_HSEM_IRQHandler+0x30>)
 8111212:	681a      	ldr	r2, [r3, #0]
 8111214:	687b      	ldr	r3, [r7, #4]
 8111216:	43db      	mvns	r3, r3
 8111218:	4906      	ldr	r1, [pc, #24]	@ (8111234 <HAL_HSEM_IRQHandler+0x30>)
 811121a:	4013      	ands	r3, r2
 811121c:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 811121e:	4a05      	ldr	r2, [pc, #20]	@ (8111234 <HAL_HSEM_IRQHandler+0x30>)
 8111220:	687b      	ldr	r3, [r7, #4]
 8111222:	6053      	str	r3, [r2, #4]

#endif
  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8111224:	6878      	ldr	r0, [r7, #4]
 8111226:	f7ef ff53 	bl	81010d0 <HAL_HSEM_FreeCallback>
}
 811122a:	bf00      	nop
 811122c:	3708      	adds	r7, #8
 811122e:	46bd      	mov	sp, r7
 8111230:	bd80      	pop	{r7, pc}
 8111232:	bf00      	nop
 8111234:	58026510 	.word	0x58026510

08111238 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8111238:	b580      	push	{r7, lr}
 811123a:	b082      	sub	sp, #8
 811123c:	af00      	add	r7, sp, #0
 811123e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8111240:	687b      	ldr	r3, [r7, #4]
 8111242:	2b00      	cmp	r3, #0
 8111244:	d101      	bne.n	811124a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8111246:	2301      	movs	r3, #1
 8111248:	e08d      	b.n	8111366 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 811124a:	687b      	ldr	r3, [r7, #4]
 811124c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8111250:	b2db      	uxtb	r3, r3
 8111252:	2b00      	cmp	r3, #0
 8111254:	d106      	bne.n	8111264 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8111256:	687b      	ldr	r3, [r7, #4]
 8111258:	2200      	movs	r2, #0
 811125a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 811125e:	6878      	ldr	r0, [r7, #4]
 8111260:	f7f3 fa58 	bl	8104714 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8111264:	687b      	ldr	r3, [r7, #4]
 8111266:	2224      	movs	r2, #36	@ 0x24
 8111268:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 811126c:	687b      	ldr	r3, [r7, #4]
 811126e:	681b      	ldr	r3, [r3, #0]
 8111270:	681a      	ldr	r2, [r3, #0]
 8111272:	687b      	ldr	r3, [r7, #4]
 8111274:	681b      	ldr	r3, [r3, #0]
 8111276:	f022 0201 	bic.w	r2, r2, #1
 811127a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 811127c:	687b      	ldr	r3, [r7, #4]
 811127e:	685a      	ldr	r2, [r3, #4]
 8111280:	687b      	ldr	r3, [r7, #4]
 8111282:	681b      	ldr	r3, [r3, #0]
 8111284:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8111288:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 811128a:	687b      	ldr	r3, [r7, #4]
 811128c:	681b      	ldr	r3, [r3, #0]
 811128e:	689a      	ldr	r2, [r3, #8]
 8111290:	687b      	ldr	r3, [r7, #4]
 8111292:	681b      	ldr	r3, [r3, #0]
 8111294:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8111298:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 811129a:	687b      	ldr	r3, [r7, #4]
 811129c:	68db      	ldr	r3, [r3, #12]
 811129e:	2b01      	cmp	r3, #1
 81112a0:	d107      	bne.n	81112b2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 81112a2:	687b      	ldr	r3, [r7, #4]
 81112a4:	689a      	ldr	r2, [r3, #8]
 81112a6:	687b      	ldr	r3, [r7, #4]
 81112a8:	681b      	ldr	r3, [r3, #0]
 81112aa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 81112ae:	609a      	str	r2, [r3, #8]
 81112b0:	e006      	b.n	81112c0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 81112b2:	687b      	ldr	r3, [r7, #4]
 81112b4:	689a      	ldr	r2, [r3, #8]
 81112b6:	687b      	ldr	r3, [r7, #4]
 81112b8:	681b      	ldr	r3, [r3, #0]
 81112ba:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 81112be:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 81112c0:	687b      	ldr	r3, [r7, #4]
 81112c2:	68db      	ldr	r3, [r3, #12]
 81112c4:	2b02      	cmp	r3, #2
 81112c6:	d108      	bne.n	81112da <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 81112c8:	687b      	ldr	r3, [r7, #4]
 81112ca:	681b      	ldr	r3, [r3, #0]
 81112cc:	685a      	ldr	r2, [r3, #4]
 81112ce:	687b      	ldr	r3, [r7, #4]
 81112d0:	681b      	ldr	r3, [r3, #0]
 81112d2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 81112d6:	605a      	str	r2, [r3, #4]
 81112d8:	e007      	b.n	81112ea <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 81112da:	687b      	ldr	r3, [r7, #4]
 81112dc:	681b      	ldr	r3, [r3, #0]
 81112de:	685a      	ldr	r2, [r3, #4]
 81112e0:	687b      	ldr	r3, [r7, #4]
 81112e2:	681b      	ldr	r3, [r3, #0]
 81112e4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 81112e8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 81112ea:	687b      	ldr	r3, [r7, #4]
 81112ec:	681b      	ldr	r3, [r3, #0]
 81112ee:	685b      	ldr	r3, [r3, #4]
 81112f0:	687a      	ldr	r2, [r7, #4]
 81112f2:	6812      	ldr	r2, [r2, #0]
 81112f4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 81112f8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 81112fc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 81112fe:	687b      	ldr	r3, [r7, #4]
 8111300:	681b      	ldr	r3, [r3, #0]
 8111302:	68da      	ldr	r2, [r3, #12]
 8111304:	687b      	ldr	r3, [r7, #4]
 8111306:	681b      	ldr	r3, [r3, #0]
 8111308:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 811130c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 811130e:	687b      	ldr	r3, [r7, #4]
 8111310:	691a      	ldr	r2, [r3, #16]
 8111312:	687b      	ldr	r3, [r7, #4]
 8111314:	695b      	ldr	r3, [r3, #20]
 8111316:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 811131a:	687b      	ldr	r3, [r7, #4]
 811131c:	699b      	ldr	r3, [r3, #24]
 811131e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8111320:	687b      	ldr	r3, [r7, #4]
 8111322:	681b      	ldr	r3, [r3, #0]
 8111324:	430a      	orrs	r2, r1
 8111326:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8111328:	687b      	ldr	r3, [r7, #4]
 811132a:	69d9      	ldr	r1, [r3, #28]
 811132c:	687b      	ldr	r3, [r7, #4]
 811132e:	6a1a      	ldr	r2, [r3, #32]
 8111330:	687b      	ldr	r3, [r7, #4]
 8111332:	681b      	ldr	r3, [r3, #0]
 8111334:	430a      	orrs	r2, r1
 8111336:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8111338:	687b      	ldr	r3, [r7, #4]
 811133a:	681b      	ldr	r3, [r3, #0]
 811133c:	681a      	ldr	r2, [r3, #0]
 811133e:	687b      	ldr	r3, [r7, #4]
 8111340:	681b      	ldr	r3, [r3, #0]
 8111342:	f042 0201 	orr.w	r2, r2, #1
 8111346:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8111348:	687b      	ldr	r3, [r7, #4]
 811134a:	2200      	movs	r2, #0
 811134c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 811134e:	687b      	ldr	r3, [r7, #4]
 8111350:	2220      	movs	r2, #32
 8111352:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8111356:	687b      	ldr	r3, [r7, #4]
 8111358:	2200      	movs	r2, #0
 811135a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 811135c:	687b      	ldr	r3, [r7, #4]
 811135e:	2200      	movs	r2, #0
 8111360:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8111364:	2300      	movs	r3, #0
}
 8111366:	4618      	mov	r0, r3
 8111368:	3708      	adds	r7, #8
 811136a:	46bd      	mov	sp, r7
 811136c:	bd80      	pop	{r7, pc}

0811136e <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 811136e:	b580      	push	{r7, lr}
 8111370:	b082      	sub	sp, #8
 8111372:	af00      	add	r7, sp, #0
 8111374:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8111376:	687b      	ldr	r3, [r7, #4]
 8111378:	2b00      	cmp	r3, #0
 811137a:	d101      	bne.n	8111380 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 811137c:	2301      	movs	r3, #1
 811137e:	e021      	b.n	81113c4 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8111380:	687b      	ldr	r3, [r7, #4]
 8111382:	2224      	movs	r2, #36	@ 0x24
 8111384:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8111388:	687b      	ldr	r3, [r7, #4]
 811138a:	681b      	ldr	r3, [r3, #0]
 811138c:	681a      	ldr	r2, [r3, #0]
 811138e:	687b      	ldr	r3, [r7, #4]
 8111390:	681b      	ldr	r3, [r3, #0]
 8111392:	f022 0201 	bic.w	r2, r2, #1
 8111396:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8111398:	6878      	ldr	r0, [r7, #4]
 811139a:	f7f3 fa25 	bl	81047e8 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 811139e:	687b      	ldr	r3, [r7, #4]
 81113a0:	2200      	movs	r2, #0
 81113a2:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 81113a4:	687b      	ldr	r3, [r7, #4]
 81113a6:	2200      	movs	r2, #0
 81113a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 81113ac:	687b      	ldr	r3, [r7, #4]
 81113ae:	2200      	movs	r2, #0
 81113b0:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 81113b2:	687b      	ldr	r3, [r7, #4]
 81113b4:	2200      	movs	r2, #0
 81113b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 81113ba:	687b      	ldr	r3, [r7, #4]
 81113bc:	2200      	movs	r2, #0
 81113be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 81113c2:	2300      	movs	r3, #0
}
 81113c4:	4618      	mov	r0, r3
 81113c6:	3708      	adds	r7, #8
 81113c8:	46bd      	mov	sp, r7
 81113ca:	bd80      	pop	{r7, pc}

081113cc <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 81113cc:	b580      	push	{r7, lr}
 81113ce:	b088      	sub	sp, #32
 81113d0:	af02      	add	r7, sp, #8
 81113d2:	60f8      	str	r0, [r7, #12]
 81113d4:	4608      	mov	r0, r1
 81113d6:	4611      	mov	r1, r2
 81113d8:	461a      	mov	r2, r3
 81113da:	4603      	mov	r3, r0
 81113dc:	817b      	strh	r3, [r7, #10]
 81113de:	460b      	mov	r3, r1
 81113e0:	813b      	strh	r3, [r7, #8]
 81113e2:	4613      	mov	r3, r2
 81113e4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 81113e6:	68fb      	ldr	r3, [r7, #12]
 81113e8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 81113ec:	b2db      	uxtb	r3, r3
 81113ee:	2b20      	cmp	r3, #32
 81113f0:	f040 80fd 	bne.w	81115ee <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 81113f4:	6a3b      	ldr	r3, [r7, #32]
 81113f6:	2b00      	cmp	r3, #0
 81113f8:	d002      	beq.n	8111400 <HAL_I2C_Mem_Read+0x34>
 81113fa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 81113fc:	2b00      	cmp	r3, #0
 81113fe:	d105      	bne.n	811140c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8111400:	68fb      	ldr	r3, [r7, #12]
 8111402:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8111406:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8111408:	2301      	movs	r3, #1
 811140a:	e0f1      	b.n	81115f0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 811140c:	68fb      	ldr	r3, [r7, #12]
 811140e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8111412:	2b01      	cmp	r3, #1
 8111414:	d101      	bne.n	811141a <HAL_I2C_Mem_Read+0x4e>
 8111416:	2302      	movs	r3, #2
 8111418:	e0ea      	b.n	81115f0 <HAL_I2C_Mem_Read+0x224>
 811141a:	68fb      	ldr	r3, [r7, #12]
 811141c:	2201      	movs	r2, #1
 811141e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8111422:	f7fd fd59 	bl	810eed8 <HAL_GetTick>
 8111426:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8111428:	697b      	ldr	r3, [r7, #20]
 811142a:	9300      	str	r3, [sp, #0]
 811142c:	2319      	movs	r3, #25
 811142e:	2201      	movs	r2, #1
 8111430:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8111434:	68f8      	ldr	r0, [r7, #12]
 8111436:	f000 f967 	bl	8111708 <I2C_WaitOnFlagUntilTimeout>
 811143a:	4603      	mov	r3, r0
 811143c:	2b00      	cmp	r3, #0
 811143e:	d001      	beq.n	8111444 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8111440:	2301      	movs	r3, #1
 8111442:	e0d5      	b.n	81115f0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8111444:	68fb      	ldr	r3, [r7, #12]
 8111446:	2222      	movs	r2, #34	@ 0x22
 8111448:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 811144c:	68fb      	ldr	r3, [r7, #12]
 811144e:	2240      	movs	r2, #64	@ 0x40
 8111450:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8111454:	68fb      	ldr	r3, [r7, #12]
 8111456:	2200      	movs	r2, #0
 8111458:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 811145a:	68fb      	ldr	r3, [r7, #12]
 811145c:	6a3a      	ldr	r2, [r7, #32]
 811145e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8111460:	68fb      	ldr	r3, [r7, #12]
 8111462:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8111464:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8111466:	68fb      	ldr	r3, [r7, #12]
 8111468:	2200      	movs	r2, #0
 811146a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 811146c:	88f8      	ldrh	r0, [r7, #6]
 811146e:	893a      	ldrh	r2, [r7, #8]
 8111470:	8979      	ldrh	r1, [r7, #10]
 8111472:	697b      	ldr	r3, [r7, #20]
 8111474:	9301      	str	r3, [sp, #4]
 8111476:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8111478:	9300      	str	r3, [sp, #0]
 811147a:	4603      	mov	r3, r0
 811147c:	68f8      	ldr	r0, [r7, #12]
 811147e:	f000 f8cb 	bl	8111618 <I2C_RequestMemoryRead>
 8111482:	4603      	mov	r3, r0
 8111484:	2b00      	cmp	r3, #0
 8111486:	d005      	beq.n	8111494 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8111488:	68fb      	ldr	r3, [r7, #12]
 811148a:	2200      	movs	r2, #0
 811148c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8111490:	2301      	movs	r3, #1
 8111492:	e0ad      	b.n	81115f0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8111494:	68fb      	ldr	r3, [r7, #12]
 8111496:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8111498:	b29b      	uxth	r3, r3
 811149a:	2bff      	cmp	r3, #255	@ 0xff
 811149c:	d90e      	bls.n	81114bc <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 811149e:	68fb      	ldr	r3, [r7, #12]
 81114a0:	22ff      	movs	r2, #255	@ 0xff
 81114a2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 81114a4:	68fb      	ldr	r3, [r7, #12]
 81114a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 81114a8:	b2da      	uxtb	r2, r3
 81114aa:	8979      	ldrh	r1, [r7, #10]
 81114ac:	4b52      	ldr	r3, [pc, #328]	@ (81115f8 <HAL_I2C_Mem_Read+0x22c>)
 81114ae:	9300      	str	r3, [sp, #0]
 81114b0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 81114b4:	68f8      	ldr	r0, [r7, #12]
 81114b6:	f000 faeb 	bl	8111a90 <I2C_TransferConfig>
 81114ba:	e00f      	b.n	81114dc <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 81114bc:	68fb      	ldr	r3, [r7, #12]
 81114be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 81114c0:	b29a      	uxth	r2, r3
 81114c2:	68fb      	ldr	r3, [r7, #12]
 81114c4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 81114c6:	68fb      	ldr	r3, [r7, #12]
 81114c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 81114ca:	b2da      	uxtb	r2, r3
 81114cc:	8979      	ldrh	r1, [r7, #10]
 81114ce:	4b4a      	ldr	r3, [pc, #296]	@ (81115f8 <HAL_I2C_Mem_Read+0x22c>)
 81114d0:	9300      	str	r3, [sp, #0]
 81114d2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 81114d6:	68f8      	ldr	r0, [r7, #12]
 81114d8:	f000 fada 	bl	8111a90 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 81114dc:	697b      	ldr	r3, [r7, #20]
 81114de:	9300      	str	r3, [sp, #0]
 81114e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81114e2:	2200      	movs	r2, #0
 81114e4:	2104      	movs	r1, #4
 81114e6:	68f8      	ldr	r0, [r7, #12]
 81114e8:	f000 f90e 	bl	8111708 <I2C_WaitOnFlagUntilTimeout>
 81114ec:	4603      	mov	r3, r0
 81114ee:	2b00      	cmp	r3, #0
 81114f0:	d001      	beq.n	81114f6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 81114f2:	2301      	movs	r3, #1
 81114f4:	e07c      	b.n	81115f0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 81114f6:	68fb      	ldr	r3, [r7, #12]
 81114f8:	681b      	ldr	r3, [r3, #0]
 81114fa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 81114fc:	68fb      	ldr	r3, [r7, #12]
 81114fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8111500:	b2d2      	uxtb	r2, r2
 8111502:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8111504:	68fb      	ldr	r3, [r7, #12]
 8111506:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8111508:	1c5a      	adds	r2, r3, #1
 811150a:	68fb      	ldr	r3, [r7, #12]
 811150c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 811150e:	68fb      	ldr	r3, [r7, #12]
 8111510:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8111512:	3b01      	subs	r3, #1
 8111514:	b29a      	uxth	r2, r3
 8111516:	68fb      	ldr	r3, [r7, #12]
 8111518:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 811151a:	68fb      	ldr	r3, [r7, #12]
 811151c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 811151e:	b29b      	uxth	r3, r3
 8111520:	3b01      	subs	r3, #1
 8111522:	b29a      	uxth	r2, r3
 8111524:	68fb      	ldr	r3, [r7, #12]
 8111526:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8111528:	68fb      	ldr	r3, [r7, #12]
 811152a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 811152c:	b29b      	uxth	r3, r3
 811152e:	2b00      	cmp	r3, #0
 8111530:	d034      	beq.n	811159c <HAL_I2C_Mem_Read+0x1d0>
 8111532:	68fb      	ldr	r3, [r7, #12]
 8111534:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8111536:	2b00      	cmp	r3, #0
 8111538:	d130      	bne.n	811159c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 811153a:	697b      	ldr	r3, [r7, #20]
 811153c:	9300      	str	r3, [sp, #0]
 811153e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8111540:	2200      	movs	r2, #0
 8111542:	2180      	movs	r1, #128	@ 0x80
 8111544:	68f8      	ldr	r0, [r7, #12]
 8111546:	f000 f8df 	bl	8111708 <I2C_WaitOnFlagUntilTimeout>
 811154a:	4603      	mov	r3, r0
 811154c:	2b00      	cmp	r3, #0
 811154e:	d001      	beq.n	8111554 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8111550:	2301      	movs	r3, #1
 8111552:	e04d      	b.n	81115f0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8111554:	68fb      	ldr	r3, [r7, #12]
 8111556:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8111558:	b29b      	uxth	r3, r3
 811155a:	2bff      	cmp	r3, #255	@ 0xff
 811155c:	d90e      	bls.n	811157c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 811155e:	68fb      	ldr	r3, [r7, #12]
 8111560:	22ff      	movs	r2, #255	@ 0xff
 8111562:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8111564:	68fb      	ldr	r3, [r7, #12]
 8111566:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8111568:	b2da      	uxtb	r2, r3
 811156a:	8979      	ldrh	r1, [r7, #10]
 811156c:	2300      	movs	r3, #0
 811156e:	9300      	str	r3, [sp, #0]
 8111570:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8111574:	68f8      	ldr	r0, [r7, #12]
 8111576:	f000 fa8b 	bl	8111a90 <I2C_TransferConfig>
 811157a:	e00f      	b.n	811159c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 811157c:	68fb      	ldr	r3, [r7, #12]
 811157e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8111580:	b29a      	uxth	r2, r3
 8111582:	68fb      	ldr	r3, [r7, #12]
 8111584:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8111586:	68fb      	ldr	r3, [r7, #12]
 8111588:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 811158a:	b2da      	uxtb	r2, r3
 811158c:	8979      	ldrh	r1, [r7, #10]
 811158e:	2300      	movs	r3, #0
 8111590:	9300      	str	r3, [sp, #0]
 8111592:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8111596:	68f8      	ldr	r0, [r7, #12]
 8111598:	f000 fa7a 	bl	8111a90 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 811159c:	68fb      	ldr	r3, [r7, #12]
 811159e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 81115a0:	b29b      	uxth	r3, r3
 81115a2:	2b00      	cmp	r3, #0
 81115a4:	d19a      	bne.n	81114dc <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 81115a6:	697a      	ldr	r2, [r7, #20]
 81115a8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 81115aa:	68f8      	ldr	r0, [r7, #12]
 81115ac:	f000 f94c 	bl	8111848 <I2C_WaitOnSTOPFlagUntilTimeout>
 81115b0:	4603      	mov	r3, r0
 81115b2:	2b00      	cmp	r3, #0
 81115b4:	d001      	beq.n	81115ba <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 81115b6:	2301      	movs	r3, #1
 81115b8:	e01a      	b.n	81115f0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 81115ba:	68fb      	ldr	r3, [r7, #12]
 81115bc:	681b      	ldr	r3, [r3, #0]
 81115be:	2220      	movs	r2, #32
 81115c0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 81115c2:	68fb      	ldr	r3, [r7, #12]
 81115c4:	681b      	ldr	r3, [r3, #0]
 81115c6:	6859      	ldr	r1, [r3, #4]
 81115c8:	68fb      	ldr	r3, [r7, #12]
 81115ca:	681a      	ldr	r2, [r3, #0]
 81115cc:	4b0b      	ldr	r3, [pc, #44]	@ (81115fc <HAL_I2C_Mem_Read+0x230>)
 81115ce:	400b      	ands	r3, r1
 81115d0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 81115d2:	68fb      	ldr	r3, [r7, #12]
 81115d4:	2220      	movs	r2, #32
 81115d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 81115da:	68fb      	ldr	r3, [r7, #12]
 81115dc:	2200      	movs	r2, #0
 81115de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 81115e2:	68fb      	ldr	r3, [r7, #12]
 81115e4:	2200      	movs	r2, #0
 81115e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 81115ea:	2300      	movs	r3, #0
 81115ec:	e000      	b.n	81115f0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 81115ee:	2302      	movs	r3, #2
  }
}
 81115f0:	4618      	mov	r0, r3
 81115f2:	3718      	adds	r7, #24
 81115f4:	46bd      	mov	sp, r7
 81115f6:	bd80      	pop	{r7, pc}
 81115f8:	80002400 	.word	0x80002400
 81115fc:	fe00e800 	.word	0xfe00e800

08111600 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(const I2C_HandleTypeDef *hi2c)
{
 8111600:	b480      	push	{r7}
 8111602:	b083      	sub	sp, #12
 8111604:	af00      	add	r7, sp, #0
 8111606:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8111608:	687b      	ldr	r3, [r7, #4]
 811160a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
}
 811160c:	4618      	mov	r0, r3
 811160e:	370c      	adds	r7, #12
 8111610:	46bd      	mov	sp, r7
 8111612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8111616:	4770      	bx	lr

08111618 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8111618:	b580      	push	{r7, lr}
 811161a:	b086      	sub	sp, #24
 811161c:	af02      	add	r7, sp, #8
 811161e:	60f8      	str	r0, [r7, #12]
 8111620:	4608      	mov	r0, r1
 8111622:	4611      	mov	r1, r2
 8111624:	461a      	mov	r2, r3
 8111626:	4603      	mov	r3, r0
 8111628:	817b      	strh	r3, [r7, #10]
 811162a:	460b      	mov	r3, r1
 811162c:	813b      	strh	r3, [r7, #8]
 811162e:	4613      	mov	r3, r2
 8111630:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8111632:	88fb      	ldrh	r3, [r7, #6]
 8111634:	b2da      	uxtb	r2, r3
 8111636:	8979      	ldrh	r1, [r7, #10]
 8111638:	4b20      	ldr	r3, [pc, #128]	@ (81116bc <I2C_RequestMemoryRead+0xa4>)
 811163a:	9300      	str	r3, [sp, #0]
 811163c:	2300      	movs	r3, #0
 811163e:	68f8      	ldr	r0, [r7, #12]
 8111640:	f000 fa26 	bl	8111a90 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8111644:	69fa      	ldr	r2, [r7, #28]
 8111646:	69b9      	ldr	r1, [r7, #24]
 8111648:	68f8      	ldr	r0, [r7, #12]
 811164a:	f000 f8b6 	bl	81117ba <I2C_WaitOnTXISFlagUntilTimeout>
 811164e:	4603      	mov	r3, r0
 8111650:	2b00      	cmp	r3, #0
 8111652:	d001      	beq.n	8111658 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8111654:	2301      	movs	r3, #1
 8111656:	e02c      	b.n	81116b2 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8111658:	88fb      	ldrh	r3, [r7, #6]
 811165a:	2b01      	cmp	r3, #1
 811165c:	d105      	bne.n	811166a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 811165e:	893b      	ldrh	r3, [r7, #8]
 8111660:	b2da      	uxtb	r2, r3
 8111662:	68fb      	ldr	r3, [r7, #12]
 8111664:	681b      	ldr	r3, [r3, #0]
 8111666:	629a      	str	r2, [r3, #40]	@ 0x28
 8111668:	e015      	b.n	8111696 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 811166a:	893b      	ldrh	r3, [r7, #8]
 811166c:	0a1b      	lsrs	r3, r3, #8
 811166e:	b29b      	uxth	r3, r3
 8111670:	b2da      	uxtb	r2, r3
 8111672:	68fb      	ldr	r3, [r7, #12]
 8111674:	681b      	ldr	r3, [r3, #0]
 8111676:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8111678:	69fa      	ldr	r2, [r7, #28]
 811167a:	69b9      	ldr	r1, [r7, #24]
 811167c:	68f8      	ldr	r0, [r7, #12]
 811167e:	f000 f89c 	bl	81117ba <I2C_WaitOnTXISFlagUntilTimeout>
 8111682:	4603      	mov	r3, r0
 8111684:	2b00      	cmp	r3, #0
 8111686:	d001      	beq.n	811168c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8111688:	2301      	movs	r3, #1
 811168a:	e012      	b.n	81116b2 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 811168c:	893b      	ldrh	r3, [r7, #8]
 811168e:	b2da      	uxtb	r2, r3
 8111690:	68fb      	ldr	r3, [r7, #12]
 8111692:	681b      	ldr	r3, [r3, #0]
 8111694:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8111696:	69fb      	ldr	r3, [r7, #28]
 8111698:	9300      	str	r3, [sp, #0]
 811169a:	69bb      	ldr	r3, [r7, #24]
 811169c:	2200      	movs	r2, #0
 811169e:	2140      	movs	r1, #64	@ 0x40
 81116a0:	68f8      	ldr	r0, [r7, #12]
 81116a2:	f000 f831 	bl	8111708 <I2C_WaitOnFlagUntilTimeout>
 81116a6:	4603      	mov	r3, r0
 81116a8:	2b00      	cmp	r3, #0
 81116aa:	d001      	beq.n	81116b0 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 81116ac:	2301      	movs	r3, #1
 81116ae:	e000      	b.n	81116b2 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 81116b0:	2300      	movs	r3, #0
}
 81116b2:	4618      	mov	r0, r3
 81116b4:	3710      	adds	r7, #16
 81116b6:	46bd      	mov	sp, r7
 81116b8:	bd80      	pop	{r7, pc}
 81116ba:	bf00      	nop
 81116bc:	80002000 	.word	0x80002000

081116c0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 81116c0:	b480      	push	{r7}
 81116c2:	b083      	sub	sp, #12
 81116c4:	af00      	add	r7, sp, #0
 81116c6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 81116c8:	687b      	ldr	r3, [r7, #4]
 81116ca:	681b      	ldr	r3, [r3, #0]
 81116cc:	699b      	ldr	r3, [r3, #24]
 81116ce:	f003 0302 	and.w	r3, r3, #2
 81116d2:	2b02      	cmp	r3, #2
 81116d4:	d103      	bne.n	81116de <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 81116d6:	687b      	ldr	r3, [r7, #4]
 81116d8:	681b      	ldr	r3, [r3, #0]
 81116da:	2200      	movs	r2, #0
 81116dc:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 81116de:	687b      	ldr	r3, [r7, #4]
 81116e0:	681b      	ldr	r3, [r3, #0]
 81116e2:	699b      	ldr	r3, [r3, #24]
 81116e4:	f003 0301 	and.w	r3, r3, #1
 81116e8:	2b01      	cmp	r3, #1
 81116ea:	d007      	beq.n	81116fc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 81116ec:	687b      	ldr	r3, [r7, #4]
 81116ee:	681b      	ldr	r3, [r3, #0]
 81116f0:	699a      	ldr	r2, [r3, #24]
 81116f2:	687b      	ldr	r3, [r7, #4]
 81116f4:	681b      	ldr	r3, [r3, #0]
 81116f6:	f042 0201 	orr.w	r2, r2, #1
 81116fa:	619a      	str	r2, [r3, #24]
  }
}
 81116fc:	bf00      	nop
 81116fe:	370c      	adds	r7, #12
 8111700:	46bd      	mov	sp, r7
 8111702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8111706:	4770      	bx	lr

08111708 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8111708:	b580      	push	{r7, lr}
 811170a:	b084      	sub	sp, #16
 811170c:	af00      	add	r7, sp, #0
 811170e:	60f8      	str	r0, [r7, #12]
 8111710:	60b9      	str	r1, [r7, #8]
 8111712:	603b      	str	r3, [r7, #0]
 8111714:	4613      	mov	r3, r2
 8111716:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8111718:	e03b      	b.n	8111792 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 811171a:	69ba      	ldr	r2, [r7, #24]
 811171c:	6839      	ldr	r1, [r7, #0]
 811171e:	68f8      	ldr	r0, [r7, #12]
 8111720:	f000 f8d6 	bl	81118d0 <I2C_IsErrorOccurred>
 8111724:	4603      	mov	r3, r0
 8111726:	2b00      	cmp	r3, #0
 8111728:	d001      	beq.n	811172e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 811172a:	2301      	movs	r3, #1
 811172c:	e041      	b.n	81117b2 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 811172e:	683b      	ldr	r3, [r7, #0]
 8111730:	f1b3 3fff 	cmp.w	r3, #4294967295
 8111734:	d02d      	beq.n	8111792 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8111736:	f7fd fbcf 	bl	810eed8 <HAL_GetTick>
 811173a:	4602      	mov	r2, r0
 811173c:	69bb      	ldr	r3, [r7, #24]
 811173e:	1ad3      	subs	r3, r2, r3
 8111740:	683a      	ldr	r2, [r7, #0]
 8111742:	429a      	cmp	r2, r3
 8111744:	d302      	bcc.n	811174c <I2C_WaitOnFlagUntilTimeout+0x44>
 8111746:	683b      	ldr	r3, [r7, #0]
 8111748:	2b00      	cmp	r3, #0
 811174a:	d122      	bne.n	8111792 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 811174c:	68fb      	ldr	r3, [r7, #12]
 811174e:	681b      	ldr	r3, [r3, #0]
 8111750:	699a      	ldr	r2, [r3, #24]
 8111752:	68bb      	ldr	r3, [r7, #8]
 8111754:	4013      	ands	r3, r2
 8111756:	68ba      	ldr	r2, [r7, #8]
 8111758:	429a      	cmp	r2, r3
 811175a:	bf0c      	ite	eq
 811175c:	2301      	moveq	r3, #1
 811175e:	2300      	movne	r3, #0
 8111760:	b2db      	uxtb	r3, r3
 8111762:	461a      	mov	r2, r3
 8111764:	79fb      	ldrb	r3, [r7, #7]
 8111766:	429a      	cmp	r2, r3
 8111768:	d113      	bne.n	8111792 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 811176a:	68fb      	ldr	r3, [r7, #12]
 811176c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 811176e:	f043 0220 	orr.w	r2, r3, #32
 8111772:	68fb      	ldr	r3, [r7, #12]
 8111774:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8111776:	68fb      	ldr	r3, [r7, #12]
 8111778:	2220      	movs	r2, #32
 811177a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 811177e:	68fb      	ldr	r3, [r7, #12]
 8111780:	2200      	movs	r2, #0
 8111782:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8111786:	68fb      	ldr	r3, [r7, #12]
 8111788:	2200      	movs	r2, #0
 811178a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 811178e:	2301      	movs	r3, #1
 8111790:	e00f      	b.n	81117b2 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8111792:	68fb      	ldr	r3, [r7, #12]
 8111794:	681b      	ldr	r3, [r3, #0]
 8111796:	699a      	ldr	r2, [r3, #24]
 8111798:	68bb      	ldr	r3, [r7, #8]
 811179a:	4013      	ands	r3, r2
 811179c:	68ba      	ldr	r2, [r7, #8]
 811179e:	429a      	cmp	r2, r3
 81117a0:	bf0c      	ite	eq
 81117a2:	2301      	moveq	r3, #1
 81117a4:	2300      	movne	r3, #0
 81117a6:	b2db      	uxtb	r3, r3
 81117a8:	461a      	mov	r2, r3
 81117aa:	79fb      	ldrb	r3, [r7, #7]
 81117ac:	429a      	cmp	r2, r3
 81117ae:	d0b4      	beq.n	811171a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 81117b0:	2300      	movs	r3, #0
}
 81117b2:	4618      	mov	r0, r3
 81117b4:	3710      	adds	r7, #16
 81117b6:	46bd      	mov	sp, r7
 81117b8:	bd80      	pop	{r7, pc}

081117ba <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 81117ba:	b580      	push	{r7, lr}
 81117bc:	b084      	sub	sp, #16
 81117be:	af00      	add	r7, sp, #0
 81117c0:	60f8      	str	r0, [r7, #12]
 81117c2:	60b9      	str	r1, [r7, #8]
 81117c4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 81117c6:	e033      	b.n	8111830 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 81117c8:	687a      	ldr	r2, [r7, #4]
 81117ca:	68b9      	ldr	r1, [r7, #8]
 81117cc:	68f8      	ldr	r0, [r7, #12]
 81117ce:	f000 f87f 	bl	81118d0 <I2C_IsErrorOccurred>
 81117d2:	4603      	mov	r3, r0
 81117d4:	2b00      	cmp	r3, #0
 81117d6:	d001      	beq.n	81117dc <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 81117d8:	2301      	movs	r3, #1
 81117da:	e031      	b.n	8111840 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 81117dc:	68bb      	ldr	r3, [r7, #8]
 81117de:	f1b3 3fff 	cmp.w	r3, #4294967295
 81117e2:	d025      	beq.n	8111830 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 81117e4:	f7fd fb78 	bl	810eed8 <HAL_GetTick>
 81117e8:	4602      	mov	r2, r0
 81117ea:	687b      	ldr	r3, [r7, #4]
 81117ec:	1ad3      	subs	r3, r2, r3
 81117ee:	68ba      	ldr	r2, [r7, #8]
 81117f0:	429a      	cmp	r2, r3
 81117f2:	d302      	bcc.n	81117fa <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 81117f4:	68bb      	ldr	r3, [r7, #8]
 81117f6:	2b00      	cmp	r3, #0
 81117f8:	d11a      	bne.n	8111830 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 81117fa:	68fb      	ldr	r3, [r7, #12]
 81117fc:	681b      	ldr	r3, [r3, #0]
 81117fe:	699b      	ldr	r3, [r3, #24]
 8111800:	f003 0302 	and.w	r3, r3, #2
 8111804:	2b02      	cmp	r3, #2
 8111806:	d013      	beq.n	8111830 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8111808:	68fb      	ldr	r3, [r7, #12]
 811180a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 811180c:	f043 0220 	orr.w	r2, r3, #32
 8111810:	68fb      	ldr	r3, [r7, #12]
 8111812:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8111814:	68fb      	ldr	r3, [r7, #12]
 8111816:	2220      	movs	r2, #32
 8111818:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 811181c:	68fb      	ldr	r3, [r7, #12]
 811181e:	2200      	movs	r2, #0
 8111820:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8111824:	68fb      	ldr	r3, [r7, #12]
 8111826:	2200      	movs	r2, #0
 8111828:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 811182c:	2301      	movs	r3, #1
 811182e:	e007      	b.n	8111840 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8111830:	68fb      	ldr	r3, [r7, #12]
 8111832:	681b      	ldr	r3, [r3, #0]
 8111834:	699b      	ldr	r3, [r3, #24]
 8111836:	f003 0302 	and.w	r3, r3, #2
 811183a:	2b02      	cmp	r3, #2
 811183c:	d1c4      	bne.n	81117c8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 811183e:	2300      	movs	r3, #0
}
 8111840:	4618      	mov	r0, r3
 8111842:	3710      	adds	r7, #16
 8111844:	46bd      	mov	sp, r7
 8111846:	bd80      	pop	{r7, pc}

08111848 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8111848:	b580      	push	{r7, lr}
 811184a:	b084      	sub	sp, #16
 811184c:	af00      	add	r7, sp, #0
 811184e:	60f8      	str	r0, [r7, #12]
 8111850:	60b9      	str	r1, [r7, #8]
 8111852:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8111854:	e02f      	b.n	81118b6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8111856:	687a      	ldr	r2, [r7, #4]
 8111858:	68b9      	ldr	r1, [r7, #8]
 811185a:	68f8      	ldr	r0, [r7, #12]
 811185c:	f000 f838 	bl	81118d0 <I2C_IsErrorOccurred>
 8111860:	4603      	mov	r3, r0
 8111862:	2b00      	cmp	r3, #0
 8111864:	d001      	beq.n	811186a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8111866:	2301      	movs	r3, #1
 8111868:	e02d      	b.n	81118c6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 811186a:	f7fd fb35 	bl	810eed8 <HAL_GetTick>
 811186e:	4602      	mov	r2, r0
 8111870:	687b      	ldr	r3, [r7, #4]
 8111872:	1ad3      	subs	r3, r2, r3
 8111874:	68ba      	ldr	r2, [r7, #8]
 8111876:	429a      	cmp	r2, r3
 8111878:	d302      	bcc.n	8111880 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 811187a:	68bb      	ldr	r3, [r7, #8]
 811187c:	2b00      	cmp	r3, #0
 811187e:	d11a      	bne.n	81118b6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8111880:	68fb      	ldr	r3, [r7, #12]
 8111882:	681b      	ldr	r3, [r3, #0]
 8111884:	699b      	ldr	r3, [r3, #24]
 8111886:	f003 0320 	and.w	r3, r3, #32
 811188a:	2b20      	cmp	r3, #32
 811188c:	d013      	beq.n	81118b6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 811188e:	68fb      	ldr	r3, [r7, #12]
 8111890:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8111892:	f043 0220 	orr.w	r2, r3, #32
 8111896:	68fb      	ldr	r3, [r7, #12]
 8111898:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 811189a:	68fb      	ldr	r3, [r7, #12]
 811189c:	2220      	movs	r2, #32
 811189e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 81118a2:	68fb      	ldr	r3, [r7, #12]
 81118a4:	2200      	movs	r2, #0
 81118a6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 81118aa:	68fb      	ldr	r3, [r7, #12]
 81118ac:	2200      	movs	r2, #0
 81118ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 81118b2:	2301      	movs	r3, #1
 81118b4:	e007      	b.n	81118c6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 81118b6:	68fb      	ldr	r3, [r7, #12]
 81118b8:	681b      	ldr	r3, [r3, #0]
 81118ba:	699b      	ldr	r3, [r3, #24]
 81118bc:	f003 0320 	and.w	r3, r3, #32
 81118c0:	2b20      	cmp	r3, #32
 81118c2:	d1c8      	bne.n	8111856 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 81118c4:	2300      	movs	r3, #0
}
 81118c6:	4618      	mov	r0, r3
 81118c8:	3710      	adds	r7, #16
 81118ca:	46bd      	mov	sp, r7
 81118cc:	bd80      	pop	{r7, pc}
	...

081118d0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 81118d0:	b580      	push	{r7, lr}
 81118d2:	b08a      	sub	sp, #40	@ 0x28
 81118d4:	af00      	add	r7, sp, #0
 81118d6:	60f8      	str	r0, [r7, #12]
 81118d8:	60b9      	str	r1, [r7, #8]
 81118da:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 81118dc:	2300      	movs	r3, #0
 81118de:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 81118e2:	68fb      	ldr	r3, [r7, #12]
 81118e4:	681b      	ldr	r3, [r3, #0]
 81118e6:	699b      	ldr	r3, [r3, #24]
 81118e8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 81118ea:	2300      	movs	r3, #0
 81118ec:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 81118ee:	687b      	ldr	r3, [r7, #4]
 81118f0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 81118f2:	69bb      	ldr	r3, [r7, #24]
 81118f4:	f003 0310 	and.w	r3, r3, #16
 81118f8:	2b00      	cmp	r3, #0
 81118fa:	d068      	beq.n	81119ce <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 81118fc:	68fb      	ldr	r3, [r7, #12]
 81118fe:	681b      	ldr	r3, [r3, #0]
 8111900:	2210      	movs	r2, #16
 8111902:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8111904:	e049      	b.n	811199a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8111906:	68bb      	ldr	r3, [r7, #8]
 8111908:	f1b3 3fff 	cmp.w	r3, #4294967295
 811190c:	d045      	beq.n	811199a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 811190e:	f7fd fae3 	bl	810eed8 <HAL_GetTick>
 8111912:	4602      	mov	r2, r0
 8111914:	69fb      	ldr	r3, [r7, #28]
 8111916:	1ad3      	subs	r3, r2, r3
 8111918:	68ba      	ldr	r2, [r7, #8]
 811191a:	429a      	cmp	r2, r3
 811191c:	d302      	bcc.n	8111924 <I2C_IsErrorOccurred+0x54>
 811191e:	68bb      	ldr	r3, [r7, #8]
 8111920:	2b00      	cmp	r3, #0
 8111922:	d13a      	bne.n	811199a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8111924:	68fb      	ldr	r3, [r7, #12]
 8111926:	681b      	ldr	r3, [r3, #0]
 8111928:	685b      	ldr	r3, [r3, #4]
 811192a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 811192e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8111930:	68fb      	ldr	r3, [r7, #12]
 8111932:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8111936:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8111938:	68fb      	ldr	r3, [r7, #12]
 811193a:	681b      	ldr	r3, [r3, #0]
 811193c:	699b      	ldr	r3, [r3, #24]
 811193e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8111942:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8111946:	d121      	bne.n	811198c <I2C_IsErrorOccurred+0xbc>
 8111948:	697b      	ldr	r3, [r7, #20]
 811194a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 811194e:	d01d      	beq.n	811198c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8111950:	7cfb      	ldrb	r3, [r7, #19]
 8111952:	2b20      	cmp	r3, #32
 8111954:	d01a      	beq.n	811198c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8111956:	68fb      	ldr	r3, [r7, #12]
 8111958:	681b      	ldr	r3, [r3, #0]
 811195a:	685a      	ldr	r2, [r3, #4]
 811195c:	68fb      	ldr	r3, [r7, #12]
 811195e:	681b      	ldr	r3, [r3, #0]
 8111960:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8111964:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8111966:	f7fd fab7 	bl	810eed8 <HAL_GetTick>
 811196a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 811196c:	e00e      	b.n	811198c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 811196e:	f7fd fab3 	bl	810eed8 <HAL_GetTick>
 8111972:	4602      	mov	r2, r0
 8111974:	69fb      	ldr	r3, [r7, #28]
 8111976:	1ad3      	subs	r3, r2, r3
 8111978:	2b19      	cmp	r3, #25
 811197a:	d907      	bls.n	811198c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 811197c:	6a3b      	ldr	r3, [r7, #32]
 811197e:	f043 0320 	orr.w	r3, r3, #32
 8111982:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8111984:	2301      	movs	r3, #1
 8111986:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 811198a:	e006      	b.n	811199a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 811198c:	68fb      	ldr	r3, [r7, #12]
 811198e:	681b      	ldr	r3, [r3, #0]
 8111990:	699b      	ldr	r3, [r3, #24]
 8111992:	f003 0320 	and.w	r3, r3, #32
 8111996:	2b20      	cmp	r3, #32
 8111998:	d1e9      	bne.n	811196e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 811199a:	68fb      	ldr	r3, [r7, #12]
 811199c:	681b      	ldr	r3, [r3, #0]
 811199e:	699b      	ldr	r3, [r3, #24]
 81119a0:	f003 0320 	and.w	r3, r3, #32
 81119a4:	2b20      	cmp	r3, #32
 81119a6:	d003      	beq.n	81119b0 <I2C_IsErrorOccurred+0xe0>
 81119a8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 81119ac:	2b00      	cmp	r3, #0
 81119ae:	d0aa      	beq.n	8111906 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 81119b0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 81119b4:	2b00      	cmp	r3, #0
 81119b6:	d103      	bne.n	81119c0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 81119b8:	68fb      	ldr	r3, [r7, #12]
 81119ba:	681b      	ldr	r3, [r3, #0]
 81119bc:	2220      	movs	r2, #32
 81119be:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 81119c0:	6a3b      	ldr	r3, [r7, #32]
 81119c2:	f043 0304 	orr.w	r3, r3, #4
 81119c6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 81119c8:	2301      	movs	r3, #1
 81119ca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 81119ce:	68fb      	ldr	r3, [r7, #12]
 81119d0:	681b      	ldr	r3, [r3, #0]
 81119d2:	699b      	ldr	r3, [r3, #24]
 81119d4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 81119d6:	69bb      	ldr	r3, [r7, #24]
 81119d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 81119dc:	2b00      	cmp	r3, #0
 81119de:	d00b      	beq.n	81119f8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 81119e0:	6a3b      	ldr	r3, [r7, #32]
 81119e2:	f043 0301 	orr.w	r3, r3, #1
 81119e6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 81119e8:	68fb      	ldr	r3, [r7, #12]
 81119ea:	681b      	ldr	r3, [r3, #0]
 81119ec:	f44f 7280 	mov.w	r2, #256	@ 0x100
 81119f0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 81119f2:	2301      	movs	r3, #1
 81119f4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 81119f8:	69bb      	ldr	r3, [r7, #24]
 81119fa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 81119fe:	2b00      	cmp	r3, #0
 8111a00:	d00b      	beq.n	8111a1a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8111a02:	6a3b      	ldr	r3, [r7, #32]
 8111a04:	f043 0308 	orr.w	r3, r3, #8
 8111a08:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8111a0a:	68fb      	ldr	r3, [r7, #12]
 8111a0c:	681b      	ldr	r3, [r3, #0]
 8111a0e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8111a12:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8111a14:	2301      	movs	r3, #1
 8111a16:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8111a1a:	69bb      	ldr	r3, [r7, #24]
 8111a1c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8111a20:	2b00      	cmp	r3, #0
 8111a22:	d00b      	beq.n	8111a3c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8111a24:	6a3b      	ldr	r3, [r7, #32]
 8111a26:	f043 0302 	orr.w	r3, r3, #2
 8111a2a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8111a2c:	68fb      	ldr	r3, [r7, #12]
 8111a2e:	681b      	ldr	r3, [r3, #0]
 8111a30:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8111a34:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8111a36:	2301      	movs	r3, #1
 8111a38:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8111a3c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8111a40:	2b00      	cmp	r3, #0
 8111a42:	d01c      	beq.n	8111a7e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8111a44:	68f8      	ldr	r0, [r7, #12]
 8111a46:	f7ff fe3b 	bl	81116c0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8111a4a:	68fb      	ldr	r3, [r7, #12]
 8111a4c:	681b      	ldr	r3, [r3, #0]
 8111a4e:	6859      	ldr	r1, [r3, #4]
 8111a50:	68fb      	ldr	r3, [r7, #12]
 8111a52:	681a      	ldr	r2, [r3, #0]
 8111a54:	4b0d      	ldr	r3, [pc, #52]	@ (8111a8c <I2C_IsErrorOccurred+0x1bc>)
 8111a56:	400b      	ands	r3, r1
 8111a58:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8111a5a:	68fb      	ldr	r3, [r7, #12]
 8111a5c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8111a5e:	6a3b      	ldr	r3, [r7, #32]
 8111a60:	431a      	orrs	r2, r3
 8111a62:	68fb      	ldr	r3, [r7, #12]
 8111a64:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8111a66:	68fb      	ldr	r3, [r7, #12]
 8111a68:	2220      	movs	r2, #32
 8111a6a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8111a6e:	68fb      	ldr	r3, [r7, #12]
 8111a70:	2200      	movs	r2, #0
 8111a72:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8111a76:	68fb      	ldr	r3, [r7, #12]
 8111a78:	2200      	movs	r2, #0
 8111a7a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8111a7e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8111a82:	4618      	mov	r0, r3
 8111a84:	3728      	adds	r7, #40	@ 0x28
 8111a86:	46bd      	mov	sp, r7
 8111a88:	bd80      	pop	{r7, pc}
 8111a8a:	bf00      	nop
 8111a8c:	fe00e800 	.word	0xfe00e800

08111a90 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8111a90:	b480      	push	{r7}
 8111a92:	b087      	sub	sp, #28
 8111a94:	af00      	add	r7, sp, #0
 8111a96:	60f8      	str	r0, [r7, #12]
 8111a98:	607b      	str	r3, [r7, #4]
 8111a9a:	460b      	mov	r3, r1
 8111a9c:	817b      	strh	r3, [r7, #10]
 8111a9e:	4613      	mov	r3, r2
 8111aa0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8111aa2:	897b      	ldrh	r3, [r7, #10]
 8111aa4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8111aa8:	7a7b      	ldrb	r3, [r7, #9]
 8111aaa:	041b      	lsls	r3, r3, #16
 8111aac:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8111ab0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8111ab2:	687b      	ldr	r3, [r7, #4]
 8111ab4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8111ab6:	6a3b      	ldr	r3, [r7, #32]
 8111ab8:	4313      	orrs	r3, r2
 8111aba:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8111abe:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8111ac0:	68fb      	ldr	r3, [r7, #12]
 8111ac2:	681b      	ldr	r3, [r3, #0]
 8111ac4:	685a      	ldr	r2, [r3, #4]
 8111ac6:	6a3b      	ldr	r3, [r7, #32]
 8111ac8:	0d5b      	lsrs	r3, r3, #21
 8111aca:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8111ace:	4b08      	ldr	r3, [pc, #32]	@ (8111af0 <I2C_TransferConfig+0x60>)
 8111ad0:	430b      	orrs	r3, r1
 8111ad2:	43db      	mvns	r3, r3
 8111ad4:	ea02 0103 	and.w	r1, r2, r3
 8111ad8:	68fb      	ldr	r3, [r7, #12]
 8111ada:	681b      	ldr	r3, [r3, #0]
 8111adc:	697a      	ldr	r2, [r7, #20]
 8111ade:	430a      	orrs	r2, r1
 8111ae0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8111ae2:	bf00      	nop
 8111ae4:	371c      	adds	r7, #28
 8111ae6:	46bd      	mov	sp, r7
 8111ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8111aec:	4770      	bx	lr
 8111aee:	bf00      	nop
 8111af0:	03ff63ff 	.word	0x03ff63ff

08111af4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8111af4:	b480      	push	{r7}
 8111af6:	b083      	sub	sp, #12
 8111af8:	af00      	add	r7, sp, #0
 8111afa:	6078      	str	r0, [r7, #4]
 8111afc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8111afe:	687b      	ldr	r3, [r7, #4]
 8111b00:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8111b04:	b2db      	uxtb	r3, r3
 8111b06:	2b20      	cmp	r3, #32
 8111b08:	d138      	bne.n	8111b7c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8111b0a:	687b      	ldr	r3, [r7, #4]
 8111b0c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8111b10:	2b01      	cmp	r3, #1
 8111b12:	d101      	bne.n	8111b18 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8111b14:	2302      	movs	r3, #2
 8111b16:	e032      	b.n	8111b7e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8111b18:	687b      	ldr	r3, [r7, #4]
 8111b1a:	2201      	movs	r2, #1
 8111b1c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8111b20:	687b      	ldr	r3, [r7, #4]
 8111b22:	2224      	movs	r2, #36	@ 0x24
 8111b24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8111b28:	687b      	ldr	r3, [r7, #4]
 8111b2a:	681b      	ldr	r3, [r3, #0]
 8111b2c:	681a      	ldr	r2, [r3, #0]
 8111b2e:	687b      	ldr	r3, [r7, #4]
 8111b30:	681b      	ldr	r3, [r3, #0]
 8111b32:	f022 0201 	bic.w	r2, r2, #1
 8111b36:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8111b38:	687b      	ldr	r3, [r7, #4]
 8111b3a:	681b      	ldr	r3, [r3, #0]
 8111b3c:	681a      	ldr	r2, [r3, #0]
 8111b3e:	687b      	ldr	r3, [r7, #4]
 8111b40:	681b      	ldr	r3, [r3, #0]
 8111b42:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8111b46:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8111b48:	687b      	ldr	r3, [r7, #4]
 8111b4a:	681b      	ldr	r3, [r3, #0]
 8111b4c:	6819      	ldr	r1, [r3, #0]
 8111b4e:	687b      	ldr	r3, [r7, #4]
 8111b50:	681b      	ldr	r3, [r3, #0]
 8111b52:	683a      	ldr	r2, [r7, #0]
 8111b54:	430a      	orrs	r2, r1
 8111b56:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8111b58:	687b      	ldr	r3, [r7, #4]
 8111b5a:	681b      	ldr	r3, [r3, #0]
 8111b5c:	681a      	ldr	r2, [r3, #0]
 8111b5e:	687b      	ldr	r3, [r7, #4]
 8111b60:	681b      	ldr	r3, [r3, #0]
 8111b62:	f042 0201 	orr.w	r2, r2, #1
 8111b66:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8111b68:	687b      	ldr	r3, [r7, #4]
 8111b6a:	2220      	movs	r2, #32
 8111b6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8111b70:	687b      	ldr	r3, [r7, #4]
 8111b72:	2200      	movs	r2, #0
 8111b74:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8111b78:	2300      	movs	r3, #0
 8111b7a:	e000      	b.n	8111b7e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8111b7c:	2302      	movs	r3, #2
  }
}
 8111b7e:	4618      	mov	r0, r3
 8111b80:	370c      	adds	r7, #12
 8111b82:	46bd      	mov	sp, r7
 8111b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8111b88:	4770      	bx	lr

08111b8a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8111b8a:	b480      	push	{r7}
 8111b8c:	b085      	sub	sp, #20
 8111b8e:	af00      	add	r7, sp, #0
 8111b90:	6078      	str	r0, [r7, #4]
 8111b92:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8111b94:	687b      	ldr	r3, [r7, #4]
 8111b96:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8111b9a:	b2db      	uxtb	r3, r3
 8111b9c:	2b20      	cmp	r3, #32
 8111b9e:	d139      	bne.n	8111c14 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8111ba0:	687b      	ldr	r3, [r7, #4]
 8111ba2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8111ba6:	2b01      	cmp	r3, #1
 8111ba8:	d101      	bne.n	8111bae <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8111baa:	2302      	movs	r3, #2
 8111bac:	e033      	b.n	8111c16 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8111bae:	687b      	ldr	r3, [r7, #4]
 8111bb0:	2201      	movs	r2, #1
 8111bb2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8111bb6:	687b      	ldr	r3, [r7, #4]
 8111bb8:	2224      	movs	r2, #36	@ 0x24
 8111bba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8111bbe:	687b      	ldr	r3, [r7, #4]
 8111bc0:	681b      	ldr	r3, [r3, #0]
 8111bc2:	681a      	ldr	r2, [r3, #0]
 8111bc4:	687b      	ldr	r3, [r7, #4]
 8111bc6:	681b      	ldr	r3, [r3, #0]
 8111bc8:	f022 0201 	bic.w	r2, r2, #1
 8111bcc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8111bce:	687b      	ldr	r3, [r7, #4]
 8111bd0:	681b      	ldr	r3, [r3, #0]
 8111bd2:	681b      	ldr	r3, [r3, #0]
 8111bd4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8111bd6:	68fb      	ldr	r3, [r7, #12]
 8111bd8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8111bdc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8111bde:	683b      	ldr	r3, [r7, #0]
 8111be0:	021b      	lsls	r3, r3, #8
 8111be2:	68fa      	ldr	r2, [r7, #12]
 8111be4:	4313      	orrs	r3, r2
 8111be6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8111be8:	687b      	ldr	r3, [r7, #4]
 8111bea:	681b      	ldr	r3, [r3, #0]
 8111bec:	68fa      	ldr	r2, [r7, #12]
 8111bee:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8111bf0:	687b      	ldr	r3, [r7, #4]
 8111bf2:	681b      	ldr	r3, [r3, #0]
 8111bf4:	681a      	ldr	r2, [r3, #0]
 8111bf6:	687b      	ldr	r3, [r7, #4]
 8111bf8:	681b      	ldr	r3, [r3, #0]
 8111bfa:	f042 0201 	orr.w	r2, r2, #1
 8111bfe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8111c00:	687b      	ldr	r3, [r7, #4]
 8111c02:	2220      	movs	r2, #32
 8111c04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8111c08:	687b      	ldr	r3, [r7, #4]
 8111c0a:	2200      	movs	r2, #0
 8111c0c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8111c10:	2300      	movs	r3, #0
 8111c12:	e000      	b.n	8111c16 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8111c14:	2302      	movs	r3, #2
  }
}
 8111c16:	4618      	mov	r0, r3
 8111c18:	3714      	adds	r7, #20
 8111c1a:	46bd      	mov	sp, r7
 8111c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8111c20:	4770      	bx	lr
	...

08111c24 <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 8111c24:	b580      	push	{r7, lr}
 8111c26:	b084      	sub	sp, #16
 8111c28:	af00      	add	r7, sp, #0
 8111c2a:	60f8      	str	r0, [r7, #12]
 8111c2c:	460b      	mov	r3, r1
 8111c2e:	607a      	str	r2, [r7, #4]
 8111c30:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 8111c32:	4b37      	ldr	r3, [pc, #220]	@ (8111d10 <HAL_PWREx_EnterSTOPMode+0xec>)
 8111c34:	681b      	ldr	r3, [r3, #0]
 8111c36:	f023 0201 	bic.w	r2, r3, #1
 8111c3a:	4935      	ldr	r1, [pc, #212]	@ (8111d10 <HAL_PWREx_EnterSTOPMode+0xec>)
 8111c3c:	68fb      	ldr	r3, [r7, #12]
 8111c3e:	4313      	orrs	r3, r2
 8111c40:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 8111c42:	687b      	ldr	r3, [r7, #4]
 8111c44:	2b00      	cmp	r3, #0
 8111c46:	d123      	bne.n	8111c90 <HAL_PWREx_EnterSTOPMode+0x6c>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 8111c48:	f7fd fa46 	bl	810f0d8 <HAL_GetCurrentCPUID>
 8111c4c:	4603      	mov	r3, r0
 8111c4e:	2b03      	cmp	r3, #3
 8111c50:	d158      	bne.n	8111d04 <HAL_PWREx_EnterSTOPMode+0xe0>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 8111c52:	4b2f      	ldr	r3, [pc, #188]	@ (8111d10 <HAL_PWREx_EnterSTOPMode+0xec>)
 8111c54:	691b      	ldr	r3, [r3, #16]
 8111c56:	4a2e      	ldr	r2, [pc, #184]	@ (8111d10 <HAL_PWREx_EnterSTOPMode+0xec>)
 8111c58:	f023 0301 	bic.w	r3, r3, #1
 8111c5c:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8111c5e:	4b2d      	ldr	r3, [pc, #180]	@ (8111d14 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8111c60:	691b      	ldr	r3, [r3, #16]
 8111c62:	4a2c      	ldr	r2, [pc, #176]	@ (8111d14 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8111c64:	f043 0304 	orr.w	r3, r3, #4
 8111c68:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8111c6a:	f3bf 8f4f 	dsb	sy
}
 8111c6e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8111c70:	f3bf 8f6f 	isb	sy
}
 8111c74:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8111c76:	7afb      	ldrb	r3, [r7, #11]
 8111c78:	2b01      	cmp	r3, #1
 8111c7a:	d101      	bne.n	8111c80 <HAL_PWREx_EnterSTOPMode+0x5c>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8111c7c:	bf30      	wfi
 8111c7e:	e000      	b.n	8111c82 <HAL_PWREx_EnterSTOPMode+0x5e>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8111c80:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8111c82:	4b24      	ldr	r3, [pc, #144]	@ (8111d14 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8111c84:	691b      	ldr	r3, [r3, #16]
 8111c86:	4a23      	ldr	r2, [pc, #140]	@ (8111d14 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8111c88:	f023 0304 	bic.w	r3, r3, #4
 8111c8c:	6113      	str	r3, [r2, #16]
 8111c8e:	e03c      	b.n	8111d0a <HAL_PWREx_EnterSTOPMode+0xe6>
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 8111c90:	687b      	ldr	r3, [r7, #4]
 8111c92:	2b01      	cmp	r3, #1
 8111c94:	d123      	bne.n	8111cde <HAL_PWREx_EnterSTOPMode+0xba>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 8111c96:	f7fd fa1f 	bl	810f0d8 <HAL_GetCurrentCPUID>
 8111c9a:	4603      	mov	r3, r0
 8111c9c:	2b01      	cmp	r3, #1
 8111c9e:	d133      	bne.n	8111d08 <HAL_PWREx_EnterSTOPMode+0xe4>
      */
      return;
    }

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 8111ca0:	4b1b      	ldr	r3, [pc, #108]	@ (8111d10 <HAL_PWREx_EnterSTOPMode+0xec>)
 8111ca2:	695b      	ldr	r3, [r3, #20]
 8111ca4:	4a1a      	ldr	r2, [pc, #104]	@ (8111d10 <HAL_PWREx_EnterSTOPMode+0xec>)
 8111ca6:	f023 0302 	bic.w	r3, r3, #2
 8111caa:	6153      	str	r3, [r2, #20]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8111cac:	4b19      	ldr	r3, [pc, #100]	@ (8111d14 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8111cae:	691b      	ldr	r3, [r3, #16]
 8111cb0:	4a18      	ldr	r2, [pc, #96]	@ (8111d14 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8111cb2:	f043 0304 	orr.w	r3, r3, #4
 8111cb6:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8111cb8:	f3bf 8f4f 	dsb	sy
}
 8111cbc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8111cbe:	f3bf 8f6f 	isb	sy
}
 8111cc2:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8111cc4:	7afb      	ldrb	r3, [r7, #11]
 8111cc6:	2b01      	cmp	r3, #1
 8111cc8:	d101      	bne.n	8111cce <HAL_PWREx_EnterSTOPMode+0xaa>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8111cca:	bf30      	wfi
 8111ccc:	e000      	b.n	8111cd0 <HAL_PWREx_EnterSTOPMode+0xac>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8111cce:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8111cd0:	4b10      	ldr	r3, [pc, #64]	@ (8111d14 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8111cd2:	691b      	ldr	r3, [r3, #16]
 8111cd4:	4a0f      	ldr	r2, [pc, #60]	@ (8111d14 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8111cd6:	f023 0304 	bic.w	r3, r3, #4
 8111cda:	6113      	str	r3, [r2, #16]
 8111cdc:	e015      	b.n	8111d0a <HAL_PWREx_EnterSTOPMode+0xe6>
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8111cde:	f7fd f9fb 	bl	810f0d8 <HAL_GetCurrentCPUID>
 8111ce2:	4603      	mov	r3, r0
 8111ce4:	2b03      	cmp	r3, #3
 8111ce6:	d106      	bne.n	8111cf6 <HAL_PWREx_EnterSTOPMode+0xd2>
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 8111ce8:	4b09      	ldr	r3, [pc, #36]	@ (8111d10 <HAL_PWREx_EnterSTOPMode+0xec>)
 8111cea:	691b      	ldr	r3, [r3, #16]
 8111cec:	4a08      	ldr	r2, [pc, #32]	@ (8111d10 <HAL_PWREx_EnterSTOPMode+0xec>)
 8111cee:	f023 0304 	bic.w	r3, r3, #4
 8111cf2:	6113      	str	r3, [r2, #16]
 8111cf4:	e009      	b.n	8111d0a <HAL_PWREx_EnterSTOPMode+0xe6>
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 8111cf6:	4b06      	ldr	r3, [pc, #24]	@ (8111d10 <HAL_PWREx_EnterSTOPMode+0xec>)
 8111cf8:	695b      	ldr	r3, [r3, #20]
 8111cfa:	4a05      	ldr	r2, [pc, #20]	@ (8111d10 <HAL_PWREx_EnterSTOPMode+0xec>)
 8111cfc:	f023 0304 	bic.w	r3, r3, #4
 8111d00:	6153      	str	r3, [r2, #20]
 8111d02:	e002      	b.n	8111d0a <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8111d04:	bf00      	nop
 8111d06:	e000      	b.n	8111d0a <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8111d08:	bf00      	nop
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 8111d0a:	3710      	adds	r7, #16
 8111d0c:	46bd      	mov	sp, r7
 8111d0e:	bd80      	pop	{r7, pc}
 8111d10:	58024800 	.word	0x58024800
 8111d14:	e000ed00 	.word	0xe000ed00

08111d18 <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 8111d18:	b580      	push	{r7, lr}
 8111d1a:	af00      	add	r7, sp, #0
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8111d1c:	f7fd f9dc 	bl	810f0d8 <HAL_GetCurrentCPUID>
 8111d20:	4603      	mov	r3, r0
 8111d22:	2b03      	cmp	r3, #3
 8111d24:	d101      	bne.n	8111d2a <HAL_PWREx_ClearPendingEvent+0x12>
  {
    __WFE ();
 8111d26:	bf20      	wfe
    __WFE ();
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 8111d28:	e001      	b.n	8111d2e <HAL_PWREx_ClearPendingEvent+0x16>
    __SEV ();
 8111d2a:	bf40      	sev
    __WFE ();
 8111d2c:	bf20      	wfe
}
 8111d2e:	bf00      	nop
 8111d30:	bd80      	pop	{r7, pc}
	...

08111d34 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8111d34:	b480      	push	{r7}
 8111d36:	b089      	sub	sp, #36	@ 0x24
 8111d38:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8111d3a:	4bb3      	ldr	r3, [pc, #716]	@ (8112008 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8111d3c:	691b      	ldr	r3, [r3, #16]
 8111d3e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8111d42:	2b18      	cmp	r3, #24
 8111d44:	f200 8155 	bhi.w	8111ff2 <HAL_RCC_GetSysClockFreq+0x2be>
 8111d48:	a201      	add	r2, pc, #4	@ (adr r2, 8111d50 <HAL_RCC_GetSysClockFreq+0x1c>)
 8111d4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8111d4e:	bf00      	nop
 8111d50:	08111db5 	.word	0x08111db5
 8111d54:	08111ff3 	.word	0x08111ff3
 8111d58:	08111ff3 	.word	0x08111ff3
 8111d5c:	08111ff3 	.word	0x08111ff3
 8111d60:	08111ff3 	.word	0x08111ff3
 8111d64:	08111ff3 	.word	0x08111ff3
 8111d68:	08111ff3 	.word	0x08111ff3
 8111d6c:	08111ff3 	.word	0x08111ff3
 8111d70:	08111ddb 	.word	0x08111ddb
 8111d74:	08111ff3 	.word	0x08111ff3
 8111d78:	08111ff3 	.word	0x08111ff3
 8111d7c:	08111ff3 	.word	0x08111ff3
 8111d80:	08111ff3 	.word	0x08111ff3
 8111d84:	08111ff3 	.word	0x08111ff3
 8111d88:	08111ff3 	.word	0x08111ff3
 8111d8c:	08111ff3 	.word	0x08111ff3
 8111d90:	08111de1 	.word	0x08111de1
 8111d94:	08111ff3 	.word	0x08111ff3
 8111d98:	08111ff3 	.word	0x08111ff3
 8111d9c:	08111ff3 	.word	0x08111ff3
 8111da0:	08111ff3 	.word	0x08111ff3
 8111da4:	08111ff3 	.word	0x08111ff3
 8111da8:	08111ff3 	.word	0x08111ff3
 8111dac:	08111ff3 	.word	0x08111ff3
 8111db0:	08111de7 	.word	0x08111de7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8111db4:	4b94      	ldr	r3, [pc, #592]	@ (8112008 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8111db6:	681b      	ldr	r3, [r3, #0]
 8111db8:	f003 0320 	and.w	r3, r3, #32
 8111dbc:	2b00      	cmp	r3, #0
 8111dbe:	d009      	beq.n	8111dd4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8111dc0:	4b91      	ldr	r3, [pc, #580]	@ (8112008 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8111dc2:	681b      	ldr	r3, [r3, #0]
 8111dc4:	08db      	lsrs	r3, r3, #3
 8111dc6:	f003 0303 	and.w	r3, r3, #3
 8111dca:	4a90      	ldr	r2, [pc, #576]	@ (811200c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8111dcc:	fa22 f303 	lsr.w	r3, r2, r3
 8111dd0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8111dd2:	e111      	b.n	8111ff8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8111dd4:	4b8d      	ldr	r3, [pc, #564]	@ (811200c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8111dd6:	61bb      	str	r3, [r7, #24]
      break;
 8111dd8:	e10e      	b.n	8111ff8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8111dda:	4b8d      	ldr	r3, [pc, #564]	@ (8112010 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8111ddc:	61bb      	str	r3, [r7, #24]
      break;
 8111dde:	e10b      	b.n	8111ff8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8111de0:	4b8c      	ldr	r3, [pc, #560]	@ (8112014 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8111de2:	61bb      	str	r3, [r7, #24]
      break;
 8111de4:	e108      	b.n	8111ff8 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8111de6:	4b88      	ldr	r3, [pc, #544]	@ (8112008 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8111de8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8111dea:	f003 0303 	and.w	r3, r3, #3
 8111dee:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8111df0:	4b85      	ldr	r3, [pc, #532]	@ (8112008 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8111df2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8111df4:	091b      	lsrs	r3, r3, #4
 8111df6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8111dfa:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8111dfc:	4b82      	ldr	r3, [pc, #520]	@ (8112008 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8111dfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8111e00:	f003 0301 	and.w	r3, r3, #1
 8111e04:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8111e06:	4b80      	ldr	r3, [pc, #512]	@ (8112008 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8111e08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8111e0a:	08db      	lsrs	r3, r3, #3
 8111e0c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8111e10:	68fa      	ldr	r2, [r7, #12]
 8111e12:	fb02 f303 	mul.w	r3, r2, r3
 8111e16:	ee07 3a90 	vmov	s15, r3
 8111e1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8111e1e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8111e22:	693b      	ldr	r3, [r7, #16]
 8111e24:	2b00      	cmp	r3, #0
 8111e26:	f000 80e1 	beq.w	8111fec <HAL_RCC_GetSysClockFreq+0x2b8>
 8111e2a:	697b      	ldr	r3, [r7, #20]
 8111e2c:	2b02      	cmp	r3, #2
 8111e2e:	f000 8083 	beq.w	8111f38 <HAL_RCC_GetSysClockFreq+0x204>
 8111e32:	697b      	ldr	r3, [r7, #20]
 8111e34:	2b02      	cmp	r3, #2
 8111e36:	f200 80a1 	bhi.w	8111f7c <HAL_RCC_GetSysClockFreq+0x248>
 8111e3a:	697b      	ldr	r3, [r7, #20]
 8111e3c:	2b00      	cmp	r3, #0
 8111e3e:	d003      	beq.n	8111e48 <HAL_RCC_GetSysClockFreq+0x114>
 8111e40:	697b      	ldr	r3, [r7, #20]
 8111e42:	2b01      	cmp	r3, #1
 8111e44:	d056      	beq.n	8111ef4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8111e46:	e099      	b.n	8111f7c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8111e48:	4b6f      	ldr	r3, [pc, #444]	@ (8112008 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8111e4a:	681b      	ldr	r3, [r3, #0]
 8111e4c:	f003 0320 	and.w	r3, r3, #32
 8111e50:	2b00      	cmp	r3, #0
 8111e52:	d02d      	beq.n	8111eb0 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8111e54:	4b6c      	ldr	r3, [pc, #432]	@ (8112008 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8111e56:	681b      	ldr	r3, [r3, #0]
 8111e58:	08db      	lsrs	r3, r3, #3
 8111e5a:	f003 0303 	and.w	r3, r3, #3
 8111e5e:	4a6b      	ldr	r2, [pc, #428]	@ (811200c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8111e60:	fa22 f303 	lsr.w	r3, r2, r3
 8111e64:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8111e66:	687b      	ldr	r3, [r7, #4]
 8111e68:	ee07 3a90 	vmov	s15, r3
 8111e6c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8111e70:	693b      	ldr	r3, [r7, #16]
 8111e72:	ee07 3a90 	vmov	s15, r3
 8111e76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8111e7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8111e7e:	4b62      	ldr	r3, [pc, #392]	@ (8112008 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8111e80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8111e82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8111e86:	ee07 3a90 	vmov	s15, r3
 8111e8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8111e8e:	ed97 6a02 	vldr	s12, [r7, #8]
 8111e92:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8112018 <HAL_RCC_GetSysClockFreq+0x2e4>
 8111e96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8111e9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8111e9e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8111ea2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8111ea6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8111eaa:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8111eae:	e087      	b.n	8111fc0 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8111eb0:	693b      	ldr	r3, [r7, #16]
 8111eb2:	ee07 3a90 	vmov	s15, r3
 8111eb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8111eba:	eddf 6a58 	vldr	s13, [pc, #352]	@ 811201c <HAL_RCC_GetSysClockFreq+0x2e8>
 8111ebe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8111ec2:	4b51      	ldr	r3, [pc, #324]	@ (8112008 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8111ec4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8111ec6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8111eca:	ee07 3a90 	vmov	s15, r3
 8111ece:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8111ed2:	ed97 6a02 	vldr	s12, [r7, #8]
 8111ed6:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8112018 <HAL_RCC_GetSysClockFreq+0x2e4>
 8111eda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8111ede:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8111ee2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8111ee6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8111eea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8111eee:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8111ef2:	e065      	b.n	8111fc0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8111ef4:	693b      	ldr	r3, [r7, #16]
 8111ef6:	ee07 3a90 	vmov	s15, r3
 8111efa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8111efe:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8112020 <HAL_RCC_GetSysClockFreq+0x2ec>
 8111f02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8111f06:	4b40      	ldr	r3, [pc, #256]	@ (8112008 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8111f08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8111f0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8111f0e:	ee07 3a90 	vmov	s15, r3
 8111f12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8111f16:	ed97 6a02 	vldr	s12, [r7, #8]
 8111f1a:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8112018 <HAL_RCC_GetSysClockFreq+0x2e4>
 8111f1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8111f22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8111f26:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8111f2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8111f2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8111f32:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8111f36:	e043      	b.n	8111fc0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8111f38:	693b      	ldr	r3, [r7, #16]
 8111f3a:	ee07 3a90 	vmov	s15, r3
 8111f3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8111f42:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8112024 <HAL_RCC_GetSysClockFreq+0x2f0>
 8111f46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8111f4a:	4b2f      	ldr	r3, [pc, #188]	@ (8112008 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8111f4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8111f4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8111f52:	ee07 3a90 	vmov	s15, r3
 8111f56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8111f5a:	ed97 6a02 	vldr	s12, [r7, #8]
 8111f5e:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8112018 <HAL_RCC_GetSysClockFreq+0x2e4>
 8111f62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8111f66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8111f6a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8111f6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8111f72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8111f76:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8111f7a:	e021      	b.n	8111fc0 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8111f7c:	693b      	ldr	r3, [r7, #16]
 8111f7e:	ee07 3a90 	vmov	s15, r3
 8111f82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8111f86:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8112020 <HAL_RCC_GetSysClockFreq+0x2ec>
 8111f8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8111f8e:	4b1e      	ldr	r3, [pc, #120]	@ (8112008 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8111f90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8111f92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8111f96:	ee07 3a90 	vmov	s15, r3
 8111f9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8111f9e:	ed97 6a02 	vldr	s12, [r7, #8]
 8111fa2:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8112018 <HAL_RCC_GetSysClockFreq+0x2e4>
 8111fa6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8111faa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8111fae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8111fb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8111fb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8111fba:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8111fbe:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8111fc0:	4b11      	ldr	r3, [pc, #68]	@ (8112008 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8111fc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8111fc4:	0a5b      	lsrs	r3, r3, #9
 8111fc6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8111fca:	3301      	adds	r3, #1
 8111fcc:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8111fce:	683b      	ldr	r3, [r7, #0]
 8111fd0:	ee07 3a90 	vmov	s15, r3
 8111fd4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8111fd8:	edd7 6a07 	vldr	s13, [r7, #28]
 8111fdc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8111fe0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8111fe4:	ee17 3a90 	vmov	r3, s15
 8111fe8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8111fea:	e005      	b.n	8111ff8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8111fec:	2300      	movs	r3, #0
 8111fee:	61bb      	str	r3, [r7, #24]
      break;
 8111ff0:	e002      	b.n	8111ff8 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8111ff2:	4b07      	ldr	r3, [pc, #28]	@ (8112010 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8111ff4:	61bb      	str	r3, [r7, #24]
      break;
 8111ff6:	bf00      	nop
  }

  return sysclockfreq;
 8111ff8:	69bb      	ldr	r3, [r7, #24]
}
 8111ffa:	4618      	mov	r0, r3
 8111ffc:	3724      	adds	r7, #36	@ 0x24
 8111ffe:	46bd      	mov	sp, r7
 8112000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8112004:	4770      	bx	lr
 8112006:	bf00      	nop
 8112008:	58024400 	.word	0x58024400
 811200c:	03d09000 	.word	0x03d09000
 8112010:	003d0900 	.word	0x003d0900
 8112014:	017d7840 	.word	0x017d7840
 8112018:	46000000 	.word	0x46000000
 811201c:	4c742400 	.word	0x4c742400
 8112020:	4a742400 	.word	0x4a742400
 8112024:	4bbebc20 	.word	0x4bbebc20

08112028 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8112028:	b580      	push	{r7, lr}
 811202a:	b082      	sub	sp, #8
 811202c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 811202e:	f7ff fe81 	bl	8111d34 <HAL_RCC_GetSysClockFreq>
 8112032:	4602      	mov	r2, r0
 8112034:	4b11      	ldr	r3, [pc, #68]	@ (811207c <HAL_RCC_GetHCLKFreq+0x54>)
 8112036:	699b      	ldr	r3, [r3, #24]
 8112038:	0a1b      	lsrs	r3, r3, #8
 811203a:	f003 030f 	and.w	r3, r3, #15
 811203e:	4910      	ldr	r1, [pc, #64]	@ (8112080 <HAL_RCC_GetHCLKFreq+0x58>)
 8112040:	5ccb      	ldrb	r3, [r1, r3]
 8112042:	f003 031f 	and.w	r3, r3, #31
 8112046:	fa22 f303 	lsr.w	r3, r2, r3
 811204a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 811204c:	4b0b      	ldr	r3, [pc, #44]	@ (811207c <HAL_RCC_GetHCLKFreq+0x54>)
 811204e:	699b      	ldr	r3, [r3, #24]
 8112050:	f003 030f 	and.w	r3, r3, #15
 8112054:	4a0a      	ldr	r2, [pc, #40]	@ (8112080 <HAL_RCC_GetHCLKFreq+0x58>)
 8112056:	5cd3      	ldrb	r3, [r2, r3]
 8112058:	f003 031f 	and.w	r3, r3, #31
 811205c:	687a      	ldr	r2, [r7, #4]
 811205e:	fa22 f303 	lsr.w	r3, r2, r3
 8112062:	4a08      	ldr	r2, [pc, #32]	@ (8112084 <HAL_RCC_GetHCLKFreq+0x5c>)
 8112064:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8112066:	4b07      	ldr	r3, [pc, #28]	@ (8112084 <HAL_RCC_GetHCLKFreq+0x5c>)
 8112068:	681b      	ldr	r3, [r3, #0]
 811206a:	4a07      	ldr	r2, [pc, #28]	@ (8112088 <HAL_RCC_GetHCLKFreq+0x60>)
 811206c:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 811206e:	4b05      	ldr	r3, [pc, #20]	@ (8112084 <HAL_RCC_GetHCLKFreq+0x5c>)
 8112070:	681b      	ldr	r3, [r3, #0]
}
 8112072:	4618      	mov	r0, r3
 8112074:	3708      	adds	r7, #8
 8112076:	46bd      	mov	sp, r7
 8112078:	bd80      	pop	{r7, pc}
 811207a:	bf00      	nop
 811207c:	58024400 	.word	0x58024400
 8112080:	0812ae04 	.word	0x0812ae04
 8112084:	10000018 	.word	0x10000018
 8112088:	10000014 	.word	0x10000014

0811208c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 811208c:	b580      	push	{r7, lr}
 811208e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8112090:	f7ff ffca 	bl	8112028 <HAL_RCC_GetHCLKFreq>
 8112094:	4602      	mov	r2, r0
 8112096:	4b06      	ldr	r3, [pc, #24]	@ (81120b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8112098:	69db      	ldr	r3, [r3, #28]
 811209a:	091b      	lsrs	r3, r3, #4
 811209c:	f003 0307 	and.w	r3, r3, #7
 81120a0:	4904      	ldr	r1, [pc, #16]	@ (81120b4 <HAL_RCC_GetPCLK1Freq+0x28>)
 81120a2:	5ccb      	ldrb	r3, [r1, r3]
 81120a4:	f003 031f 	and.w	r3, r3, #31
 81120a8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 81120ac:	4618      	mov	r0, r3
 81120ae:	bd80      	pop	{r7, pc}
 81120b0:	58024400 	.word	0x58024400
 81120b4:	0812ae04 	.word	0x0812ae04

081120b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 81120b8:	b580      	push	{r7, lr}
 81120ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 81120bc:	f7ff ffb4 	bl	8112028 <HAL_RCC_GetHCLKFreq>
 81120c0:	4602      	mov	r2, r0
 81120c2:	4b06      	ldr	r3, [pc, #24]	@ (81120dc <HAL_RCC_GetPCLK2Freq+0x24>)
 81120c4:	69db      	ldr	r3, [r3, #28]
 81120c6:	0a1b      	lsrs	r3, r3, #8
 81120c8:	f003 0307 	and.w	r3, r3, #7
 81120cc:	4904      	ldr	r1, [pc, #16]	@ (81120e0 <HAL_RCC_GetPCLK2Freq+0x28>)
 81120ce:	5ccb      	ldrb	r3, [r1, r3]
 81120d0:	f003 031f 	and.w	r3, r3, #31
 81120d4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 81120d8:	4618      	mov	r0, r3
 81120da:	bd80      	pop	{r7, pc}
 81120dc:	58024400 	.word	0x58024400
 81120e0:	0812ae04 	.word	0x0812ae04

081120e4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 81120e4:	b480      	push	{r7}
 81120e6:	b083      	sub	sp, #12
 81120e8:	af00      	add	r7, sp, #0
 81120ea:	6078      	str	r0, [r7, #4]
 81120ec:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 81120ee:	687b      	ldr	r3, [r7, #4]
 81120f0:	223f      	movs	r2, #63	@ 0x3f
 81120f2:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 81120f4:	4b1a      	ldr	r3, [pc, #104]	@ (8112160 <HAL_RCC_GetClockConfig+0x7c>)
 81120f6:	691b      	ldr	r3, [r3, #16]
 81120f8:	f003 0207 	and.w	r2, r3, #7
 81120fc:	687b      	ldr	r3, [r7, #4]
 81120fe:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8112100:	4b17      	ldr	r3, [pc, #92]	@ (8112160 <HAL_RCC_GetClockConfig+0x7c>)
 8112102:	699b      	ldr	r3, [r3, #24]
 8112104:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8112108:	687b      	ldr	r3, [r7, #4]
 811210a:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 811210c:	4b14      	ldr	r3, [pc, #80]	@ (8112160 <HAL_RCC_GetClockConfig+0x7c>)
 811210e:	699b      	ldr	r3, [r3, #24]
 8112110:	f003 020f 	and.w	r2, r3, #15
 8112114:	687b      	ldr	r3, [r7, #4]
 8112116:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8112118:	4b11      	ldr	r3, [pc, #68]	@ (8112160 <HAL_RCC_GetClockConfig+0x7c>)
 811211a:	699b      	ldr	r3, [r3, #24]
 811211c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8112120:	687b      	ldr	r3, [r7, #4]
 8112122:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8112124:	4b0e      	ldr	r3, [pc, #56]	@ (8112160 <HAL_RCC_GetClockConfig+0x7c>)
 8112126:	69db      	ldr	r3, [r3, #28]
 8112128:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 811212c:	687b      	ldr	r3, [r7, #4]
 811212e:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8112130:	4b0b      	ldr	r3, [pc, #44]	@ (8112160 <HAL_RCC_GetClockConfig+0x7c>)
 8112132:	69db      	ldr	r3, [r3, #28]
 8112134:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8112138:	687b      	ldr	r3, [r7, #4]
 811213a:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 811213c:	4b08      	ldr	r3, [pc, #32]	@ (8112160 <HAL_RCC_GetClockConfig+0x7c>)
 811213e:	6a1b      	ldr	r3, [r3, #32]
 8112140:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8112144:	687b      	ldr	r3, [r7, #4]
 8112146:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8112148:	4b06      	ldr	r3, [pc, #24]	@ (8112164 <HAL_RCC_GetClockConfig+0x80>)
 811214a:	681b      	ldr	r3, [r3, #0]
 811214c:	f003 020f 	and.w	r2, r3, #15
 8112150:	683b      	ldr	r3, [r7, #0]
 8112152:	601a      	str	r2, [r3, #0]
}
 8112154:	bf00      	nop
 8112156:	370c      	adds	r7, #12
 8112158:	46bd      	mov	sp, r7
 811215a:	f85d 7b04 	ldr.w	r7, [sp], #4
 811215e:	4770      	bx	lr
 8112160:	58024400 	.word	0x58024400
 8112164:	52002000 	.word	0x52002000

08112168 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8112168:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 811216c:	b0cc      	sub	sp, #304	@ 0x130
 811216e:	af00      	add	r7, sp, #0
 8112170:	f8c7 011c 	str.w	r0, [r7, #284]	@ 0x11c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8112174:	2300      	movs	r3, #0
 8112176:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 811217a:	2300      	movs	r3, #0
 811217c:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8112180:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8112184:	e9d3 2300 	ldrd	r2, r3, [r3]
 8112188:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 811218c:	2500      	movs	r5, #0
 811218e:	ea54 0305 	orrs.w	r3, r4, r5
 8112192:	d049      	beq.n	8112228 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8112194:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8112198:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 811219a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 811219e:	d02f      	beq.n	8112200 <HAL_RCCEx_PeriphCLKConfig+0x98>
 81121a0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 81121a4:	d828      	bhi.n	81121f8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 81121a6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 81121aa:	d01a      	beq.n	81121e2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 81121ac:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 81121b0:	d822      	bhi.n	81121f8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 81121b2:	2b00      	cmp	r3, #0
 81121b4:	d003      	beq.n	81121be <HAL_RCCEx_PeriphCLKConfig+0x56>
 81121b6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 81121ba:	d007      	beq.n	81121cc <HAL_RCCEx_PeriphCLKConfig+0x64>
 81121bc:	e01c      	b.n	81121f8 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81121be:	4bb8      	ldr	r3, [pc, #736]	@ (81124a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81121c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81121c2:	4ab7      	ldr	r2, [pc, #732]	@ (81124a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81121c4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 81121c8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 81121ca:	e01a      	b.n	8112202 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 81121cc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81121d0:	3308      	adds	r3, #8
 81121d2:	2102      	movs	r1, #2
 81121d4:	4618      	mov	r0, r3
 81121d6:	f001 fccf 	bl	8113b78 <RCCEx_PLL2_Config>
 81121da:	4603      	mov	r3, r0
 81121dc:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 81121e0:	e00f      	b.n	8112202 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 81121e2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81121e6:	3328      	adds	r3, #40	@ 0x28
 81121e8:	2102      	movs	r1, #2
 81121ea:	4618      	mov	r0, r3
 81121ec:	f001 fd76 	bl	8113cdc <RCCEx_PLL3_Config>
 81121f0:	4603      	mov	r3, r0
 81121f2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 81121f6:	e004      	b.n	8112202 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81121f8:	2301      	movs	r3, #1
 81121fa:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 81121fe:	e000      	b.n	8112202 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8112200:	bf00      	nop
    }

    if (ret == HAL_OK)
 8112202:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8112206:	2b00      	cmp	r3, #0
 8112208:	d10a      	bne.n	8112220 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 811220a:	4ba5      	ldr	r3, [pc, #660]	@ (81124a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 811220c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 811220e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8112212:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8112216:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8112218:	4aa1      	ldr	r2, [pc, #644]	@ (81124a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 811221a:	430b      	orrs	r3, r1
 811221c:	6513      	str	r3, [r2, #80]	@ 0x50
 811221e:	e003      	b.n	8112228 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8112220:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8112224:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8112228:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 811222c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8112230:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8112234:	f04f 0900 	mov.w	r9, #0
 8112238:	ea58 0309 	orrs.w	r3, r8, r9
 811223c:	d047      	beq.n	81122ce <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 811223e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8112242:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8112244:	2b04      	cmp	r3, #4
 8112246:	d82a      	bhi.n	811229e <HAL_RCCEx_PeriphCLKConfig+0x136>
 8112248:	a201      	add	r2, pc, #4	@ (adr r2, 8112250 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 811224a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 811224e:	bf00      	nop
 8112250:	08112265 	.word	0x08112265
 8112254:	08112273 	.word	0x08112273
 8112258:	08112289 	.word	0x08112289
 811225c:	081122a7 	.word	0x081122a7
 8112260:	081122a7 	.word	0x081122a7
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8112264:	4b8e      	ldr	r3, [pc, #568]	@ (81124a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8112266:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8112268:	4a8d      	ldr	r2, [pc, #564]	@ (81124a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 811226a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 811226e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8112270:	e01a      	b.n	81122a8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8112272:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8112276:	3308      	adds	r3, #8
 8112278:	2100      	movs	r1, #0
 811227a:	4618      	mov	r0, r3
 811227c:	f001 fc7c 	bl	8113b78 <RCCEx_PLL2_Config>
 8112280:	4603      	mov	r3, r0
 8112282:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8112286:	e00f      	b.n	81122a8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8112288:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 811228c:	3328      	adds	r3, #40	@ 0x28
 811228e:	2100      	movs	r1, #0
 8112290:	4618      	mov	r0, r3
 8112292:	f001 fd23 	bl	8113cdc <RCCEx_PLL3_Config>
 8112296:	4603      	mov	r3, r0
 8112298:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 811229c:	e004      	b.n	81122a8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 811229e:	2301      	movs	r3, #1
 81122a0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 81122a4:	e000      	b.n	81122a8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 81122a6:	bf00      	nop
    }

    if (ret == HAL_OK)
 81122a8:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81122ac:	2b00      	cmp	r3, #0
 81122ae:	d10a      	bne.n	81122c6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 81122b0:	4b7b      	ldr	r3, [pc, #492]	@ (81124a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81122b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 81122b4:	f023 0107 	bic.w	r1, r3, #7
 81122b8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81122bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 81122be:	4a78      	ldr	r2, [pc, #480]	@ (81124a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81122c0:	430b      	orrs	r3, r1
 81122c2:	6513      	str	r3, [r2, #80]	@ 0x50
 81122c4:	e003      	b.n	81122ce <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81122c6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81122ca:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 81122ce:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81122d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 81122d6:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 81122da:	f04f 0b00 	mov.w	fp, #0
 81122de:	ea5a 030b 	orrs.w	r3, sl, fp
 81122e2:	d04c      	beq.n	811237e <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 81122e4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81122e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 81122ea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 81122ee:	d030      	beq.n	8112352 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 81122f0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 81122f4:	d829      	bhi.n	811234a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 81122f6:	2bc0      	cmp	r3, #192	@ 0xc0
 81122f8:	d02d      	beq.n	8112356 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 81122fa:	2bc0      	cmp	r3, #192	@ 0xc0
 81122fc:	d825      	bhi.n	811234a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 81122fe:	2b80      	cmp	r3, #128	@ 0x80
 8112300:	d018      	beq.n	8112334 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8112302:	2b80      	cmp	r3, #128	@ 0x80
 8112304:	d821      	bhi.n	811234a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8112306:	2b00      	cmp	r3, #0
 8112308:	d002      	beq.n	8112310 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 811230a:	2b40      	cmp	r3, #64	@ 0x40
 811230c:	d007      	beq.n	811231e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 811230e:	e01c      	b.n	811234a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8112310:	4b63      	ldr	r3, [pc, #396]	@ (81124a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8112312:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8112314:	4a62      	ldr	r2, [pc, #392]	@ (81124a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8112316:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 811231a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 811231c:	e01c      	b.n	8112358 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 811231e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8112322:	3308      	adds	r3, #8
 8112324:	2100      	movs	r1, #0
 8112326:	4618      	mov	r0, r3
 8112328:	f001 fc26 	bl	8113b78 <RCCEx_PLL2_Config>
 811232c:	4603      	mov	r3, r0
 811232e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8112332:	e011      	b.n	8112358 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8112334:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8112338:	3328      	adds	r3, #40	@ 0x28
 811233a:	2100      	movs	r1, #0
 811233c:	4618      	mov	r0, r3
 811233e:	f001 fccd 	bl	8113cdc <RCCEx_PLL3_Config>
 8112342:	4603      	mov	r3, r0
 8112344:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8112348:	e006      	b.n	8112358 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 811234a:	2301      	movs	r3, #1
 811234c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8112350:	e002      	b.n	8112358 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8112352:	bf00      	nop
 8112354:	e000      	b.n	8112358 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8112356:	bf00      	nop
    }

    if (ret == HAL_OK)
 8112358:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 811235c:	2b00      	cmp	r3, #0
 811235e:	d10a      	bne.n	8112376 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8112360:	4b4f      	ldr	r3, [pc, #316]	@ (81124a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8112362:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8112364:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8112368:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 811236c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 811236e:	4a4c      	ldr	r2, [pc, #304]	@ (81124a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8112370:	430b      	orrs	r3, r1
 8112372:	6513      	str	r3, [r2, #80]	@ 0x50
 8112374:	e003      	b.n	811237e <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8112376:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 811237a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 811237e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8112382:	e9d3 2300 	ldrd	r2, r3, [r3]
 8112386:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 811238a:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 811238e:	2300      	movs	r3, #0
 8112390:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8112394:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	@ 0x110
 8112398:	460b      	mov	r3, r1
 811239a:	4313      	orrs	r3, r2
 811239c:	d053      	beq.n	8112446 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 811239e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81123a2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 81123a6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 81123aa:	d035      	beq.n	8112418 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 81123ac:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 81123b0:	d82e      	bhi.n	8112410 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 81123b2:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 81123b6:	d031      	beq.n	811241c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 81123b8:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 81123bc:	d828      	bhi.n	8112410 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 81123be:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 81123c2:	d01a      	beq.n	81123fa <HAL_RCCEx_PeriphCLKConfig+0x292>
 81123c4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 81123c8:	d822      	bhi.n	8112410 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 81123ca:	2b00      	cmp	r3, #0
 81123cc:	d003      	beq.n	81123d6 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 81123ce:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 81123d2:	d007      	beq.n	81123e4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 81123d4:	e01c      	b.n	8112410 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81123d6:	4b32      	ldr	r3, [pc, #200]	@ (81124a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81123d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81123da:	4a31      	ldr	r2, [pc, #196]	@ (81124a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81123dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 81123e0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 81123e2:	e01c      	b.n	811241e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 81123e4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81123e8:	3308      	adds	r3, #8
 81123ea:	2100      	movs	r1, #0
 81123ec:	4618      	mov	r0, r3
 81123ee:	f001 fbc3 	bl	8113b78 <RCCEx_PLL2_Config>
 81123f2:	4603      	mov	r3, r0
 81123f4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 81123f8:	e011      	b.n	811241e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 81123fa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81123fe:	3328      	adds	r3, #40	@ 0x28
 8112400:	2100      	movs	r1, #0
 8112402:	4618      	mov	r0, r3
 8112404:	f001 fc6a 	bl	8113cdc <RCCEx_PLL3_Config>
 8112408:	4603      	mov	r3, r0
 811240a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 811240e:	e006      	b.n	811241e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8112410:	2301      	movs	r3, #1
 8112412:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8112416:	e002      	b.n	811241e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8112418:	bf00      	nop
 811241a:	e000      	b.n	811241e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 811241c:	bf00      	nop
    }

    if (ret == HAL_OK)
 811241e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8112422:	2b00      	cmp	r3, #0
 8112424:	d10b      	bne.n	811243e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8112426:	4b1e      	ldr	r3, [pc, #120]	@ (81124a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8112428:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 811242a:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 811242e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8112432:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8112436:	4a1a      	ldr	r2, [pc, #104]	@ (81124a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8112438:	430b      	orrs	r3, r1
 811243a:	6593      	str	r3, [r2, #88]	@ 0x58
 811243c:	e003      	b.n	8112446 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 811243e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8112442:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8112446:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 811244a:	e9d3 2300 	ldrd	r2, r3, [r3]
 811244e:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8112452:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8112456:	2300      	movs	r3, #0
 8112458:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 811245c:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8112460:	460b      	mov	r3, r1
 8112462:	4313      	orrs	r3, r2
 8112464:	d056      	beq.n	8112514 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8112466:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 811246a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 811246e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8112472:	d038      	beq.n	81124e6 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8112474:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8112478:	d831      	bhi.n	81124de <HAL_RCCEx_PeriphCLKConfig+0x376>
 811247a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 811247e:	d034      	beq.n	81124ea <HAL_RCCEx_PeriphCLKConfig+0x382>
 8112480:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8112484:	d82b      	bhi.n	81124de <HAL_RCCEx_PeriphCLKConfig+0x376>
 8112486:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 811248a:	d01d      	beq.n	81124c8 <HAL_RCCEx_PeriphCLKConfig+0x360>
 811248c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8112490:	d825      	bhi.n	81124de <HAL_RCCEx_PeriphCLKConfig+0x376>
 8112492:	2b00      	cmp	r3, #0
 8112494:	d006      	beq.n	81124a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8112496:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 811249a:	d00a      	beq.n	81124b2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 811249c:	e01f      	b.n	81124de <HAL_RCCEx_PeriphCLKConfig+0x376>
 811249e:	bf00      	nop
 81124a0:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81124a4:	4ba2      	ldr	r3, [pc, #648]	@ (8112730 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81124a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81124a8:	4aa1      	ldr	r2, [pc, #644]	@ (8112730 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81124aa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 81124ae:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 81124b0:	e01c      	b.n	81124ec <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 81124b2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81124b6:	3308      	adds	r3, #8
 81124b8:	2100      	movs	r1, #0
 81124ba:	4618      	mov	r0, r3
 81124bc:	f001 fb5c 	bl	8113b78 <RCCEx_PLL2_Config>
 81124c0:	4603      	mov	r3, r0
 81124c2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 81124c6:	e011      	b.n	81124ec <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 81124c8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81124cc:	3328      	adds	r3, #40	@ 0x28
 81124ce:	2100      	movs	r1, #0
 81124d0:	4618      	mov	r0, r3
 81124d2:	f001 fc03 	bl	8113cdc <RCCEx_PLL3_Config>
 81124d6:	4603      	mov	r3, r0
 81124d8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 81124dc:	e006      	b.n	81124ec <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 81124de:	2301      	movs	r3, #1
 81124e0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 81124e4:	e002      	b.n	81124ec <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 81124e6:	bf00      	nop
 81124e8:	e000      	b.n	81124ec <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 81124ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 81124ec:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81124f0:	2b00      	cmp	r3, #0
 81124f2:	d10b      	bne.n	811250c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 81124f4:	4b8e      	ldr	r3, [pc, #568]	@ (8112730 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81124f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81124f8:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 81124fc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8112500:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8112504:	4a8a      	ldr	r2, [pc, #552]	@ (8112730 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8112506:	430b      	orrs	r3, r1
 8112508:	6593      	str	r3, [r2, #88]	@ 0x58
 811250a:	e003      	b.n	8112514 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 811250c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8112510:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8112514:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8112518:	e9d3 2300 	ldrd	r2, r3, [r3]
 811251c:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8112520:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8112524:	2300      	movs	r3, #0
 8112526:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 811252a:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 811252e:	460b      	mov	r3, r1
 8112530:	4313      	orrs	r3, r2
 8112532:	d03a      	beq.n	81125aa <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8112534:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8112538:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 811253a:	2b30      	cmp	r3, #48	@ 0x30
 811253c:	d01f      	beq.n	811257e <HAL_RCCEx_PeriphCLKConfig+0x416>
 811253e:	2b30      	cmp	r3, #48	@ 0x30
 8112540:	d819      	bhi.n	8112576 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8112542:	2b20      	cmp	r3, #32
 8112544:	d00c      	beq.n	8112560 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8112546:	2b20      	cmp	r3, #32
 8112548:	d815      	bhi.n	8112576 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 811254a:	2b00      	cmp	r3, #0
 811254c:	d019      	beq.n	8112582 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 811254e:	2b10      	cmp	r3, #16
 8112550:	d111      	bne.n	8112576 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8112552:	4b77      	ldr	r3, [pc, #476]	@ (8112730 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8112554:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8112556:	4a76      	ldr	r2, [pc, #472]	@ (8112730 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8112558:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 811255c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 811255e:	e011      	b.n	8112584 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8112560:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8112564:	3308      	adds	r3, #8
 8112566:	2102      	movs	r1, #2
 8112568:	4618      	mov	r0, r3
 811256a:	f001 fb05 	bl	8113b78 <RCCEx_PLL2_Config>
 811256e:	4603      	mov	r3, r0
 8112570:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8112574:	e006      	b.n	8112584 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8112576:	2301      	movs	r3, #1
 8112578:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 811257c:	e002      	b.n	8112584 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 811257e:	bf00      	nop
 8112580:	e000      	b.n	8112584 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8112582:	bf00      	nop
    }

    if (ret == HAL_OK)
 8112584:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8112588:	2b00      	cmp	r3, #0
 811258a:	d10a      	bne.n	81125a2 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 811258c:	4b68      	ldr	r3, [pc, #416]	@ (8112730 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 811258e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8112590:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8112594:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8112598:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 811259a:	4a65      	ldr	r2, [pc, #404]	@ (8112730 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 811259c:	430b      	orrs	r3, r1
 811259e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 81125a0:	e003      	b.n	81125aa <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81125a2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81125a6:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 81125aa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81125ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 81125b2:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 81125b6:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 81125ba:	2300      	movs	r3, #0
 81125bc:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 81125c0:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 81125c4:	460b      	mov	r3, r1
 81125c6:	4313      	orrs	r3, r2
 81125c8:	d051      	beq.n	811266e <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 81125ca:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81125ce:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 81125d0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 81125d4:	d035      	beq.n	8112642 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 81125d6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 81125da:	d82e      	bhi.n	811263a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 81125dc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 81125e0:	d031      	beq.n	8112646 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 81125e2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 81125e6:	d828      	bhi.n	811263a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 81125e8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 81125ec:	d01a      	beq.n	8112624 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 81125ee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 81125f2:	d822      	bhi.n	811263a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 81125f4:	2b00      	cmp	r3, #0
 81125f6:	d003      	beq.n	8112600 <HAL_RCCEx_PeriphCLKConfig+0x498>
 81125f8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 81125fc:	d007      	beq.n	811260e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 81125fe:	e01c      	b.n	811263a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8112600:	4b4b      	ldr	r3, [pc, #300]	@ (8112730 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8112602:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8112604:	4a4a      	ldr	r2, [pc, #296]	@ (8112730 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8112606:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 811260a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 811260c:	e01c      	b.n	8112648 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 811260e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8112612:	3308      	adds	r3, #8
 8112614:	2100      	movs	r1, #0
 8112616:	4618      	mov	r0, r3
 8112618:	f001 faae 	bl	8113b78 <RCCEx_PLL2_Config>
 811261c:	4603      	mov	r3, r0
 811261e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8112622:	e011      	b.n	8112648 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8112624:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8112628:	3328      	adds	r3, #40	@ 0x28
 811262a:	2100      	movs	r1, #0
 811262c:	4618      	mov	r0, r3
 811262e:	f001 fb55 	bl	8113cdc <RCCEx_PLL3_Config>
 8112632:	4603      	mov	r3, r0
 8112634:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8112638:	e006      	b.n	8112648 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 811263a:	2301      	movs	r3, #1
 811263c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8112640:	e002      	b.n	8112648 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8112642:	bf00      	nop
 8112644:	e000      	b.n	8112648 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8112646:	bf00      	nop
    }

    if (ret == HAL_OK)
 8112648:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 811264c:	2b00      	cmp	r3, #0
 811264e:	d10a      	bne.n	8112666 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8112650:	4b37      	ldr	r3, [pc, #220]	@ (8112730 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8112652:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8112654:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8112658:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 811265c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 811265e:	4a34      	ldr	r2, [pc, #208]	@ (8112730 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8112660:	430b      	orrs	r3, r1
 8112662:	6513      	str	r3, [r2, #80]	@ 0x50
 8112664:	e003      	b.n	811266e <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8112666:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 811266a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 811266e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8112672:	e9d3 2300 	ldrd	r2, r3, [r3]
 8112676:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 811267a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 811267e:	2300      	movs	r3, #0
 8112680:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8112684:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8112688:	460b      	mov	r3, r1
 811268a:	4313      	orrs	r3, r2
 811268c:	d056      	beq.n	811273c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 811268e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8112692:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8112694:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8112698:	d033      	beq.n	8112702 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 811269a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 811269e:	d82c      	bhi.n	81126fa <HAL_RCCEx_PeriphCLKConfig+0x592>
 81126a0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 81126a4:	d02f      	beq.n	8112706 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 81126a6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 81126aa:	d826      	bhi.n	81126fa <HAL_RCCEx_PeriphCLKConfig+0x592>
 81126ac:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 81126b0:	d02b      	beq.n	811270a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 81126b2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 81126b6:	d820      	bhi.n	81126fa <HAL_RCCEx_PeriphCLKConfig+0x592>
 81126b8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 81126bc:	d012      	beq.n	81126e4 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 81126be:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 81126c2:	d81a      	bhi.n	81126fa <HAL_RCCEx_PeriphCLKConfig+0x592>
 81126c4:	2b00      	cmp	r3, #0
 81126c6:	d022      	beq.n	811270e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 81126c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 81126cc:	d115      	bne.n	81126fa <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 81126ce:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81126d2:	3308      	adds	r3, #8
 81126d4:	2101      	movs	r1, #1
 81126d6:	4618      	mov	r0, r3
 81126d8:	f001 fa4e 	bl	8113b78 <RCCEx_PLL2_Config>
 81126dc:	4603      	mov	r3, r0
 81126de:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 81126e2:	e015      	b.n	8112710 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 81126e4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81126e8:	3328      	adds	r3, #40	@ 0x28
 81126ea:	2101      	movs	r1, #1
 81126ec:	4618      	mov	r0, r3
 81126ee:	f001 faf5 	bl	8113cdc <RCCEx_PLL3_Config>
 81126f2:	4603      	mov	r3, r0
 81126f4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 81126f8:	e00a      	b.n	8112710 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81126fa:	2301      	movs	r3, #1
 81126fc:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8112700:	e006      	b.n	8112710 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8112702:	bf00      	nop
 8112704:	e004      	b.n	8112710 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8112706:	bf00      	nop
 8112708:	e002      	b.n	8112710 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 811270a:	bf00      	nop
 811270c:	e000      	b.n	8112710 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 811270e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8112710:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8112714:	2b00      	cmp	r3, #0
 8112716:	d10d      	bne.n	8112734 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8112718:	4b05      	ldr	r3, [pc, #20]	@ (8112730 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 811271a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 811271c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8112720:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8112724:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8112726:	4a02      	ldr	r2, [pc, #8]	@ (8112730 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8112728:	430b      	orrs	r3, r1
 811272a:	6513      	str	r3, [r2, #80]	@ 0x50
 811272c:	e006      	b.n	811273c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 811272e:	bf00      	nop
 8112730:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8112734:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8112738:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 811273c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8112740:	e9d3 2300 	ldrd	r2, r3, [r3]
 8112744:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8112748:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 811274c:	2300      	movs	r3, #0
 811274e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8112752:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8112756:	460b      	mov	r3, r1
 8112758:	4313      	orrs	r3, r2
 811275a:	d055      	beq.n	8112808 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 811275c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8112760:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8112764:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8112768:	d033      	beq.n	81127d2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 811276a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 811276e:	d82c      	bhi.n	81127ca <HAL_RCCEx_PeriphCLKConfig+0x662>
 8112770:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8112774:	d02f      	beq.n	81127d6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8112776:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 811277a:	d826      	bhi.n	81127ca <HAL_RCCEx_PeriphCLKConfig+0x662>
 811277c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8112780:	d02b      	beq.n	81127da <HAL_RCCEx_PeriphCLKConfig+0x672>
 8112782:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8112786:	d820      	bhi.n	81127ca <HAL_RCCEx_PeriphCLKConfig+0x662>
 8112788:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 811278c:	d012      	beq.n	81127b4 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 811278e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8112792:	d81a      	bhi.n	81127ca <HAL_RCCEx_PeriphCLKConfig+0x662>
 8112794:	2b00      	cmp	r3, #0
 8112796:	d022      	beq.n	81127de <HAL_RCCEx_PeriphCLKConfig+0x676>
 8112798:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 811279c:	d115      	bne.n	81127ca <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 811279e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81127a2:	3308      	adds	r3, #8
 81127a4:	2101      	movs	r1, #1
 81127a6:	4618      	mov	r0, r3
 81127a8:	f001 f9e6 	bl	8113b78 <RCCEx_PLL2_Config>
 81127ac:	4603      	mov	r3, r0
 81127ae:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 81127b2:	e015      	b.n	81127e0 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 81127b4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81127b8:	3328      	adds	r3, #40	@ 0x28
 81127ba:	2101      	movs	r1, #1
 81127bc:	4618      	mov	r0, r3
 81127be:	f001 fa8d 	bl	8113cdc <RCCEx_PLL3_Config>
 81127c2:	4603      	mov	r3, r0
 81127c4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 81127c8:	e00a      	b.n	81127e0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 81127ca:	2301      	movs	r3, #1
 81127cc:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 81127d0:	e006      	b.n	81127e0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 81127d2:	bf00      	nop
 81127d4:	e004      	b.n	81127e0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 81127d6:	bf00      	nop
 81127d8:	e002      	b.n	81127e0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 81127da:	bf00      	nop
 81127dc:	e000      	b.n	81127e0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 81127de:	bf00      	nop
    }

    if (ret == HAL_OK)
 81127e0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81127e4:	2b00      	cmp	r3, #0
 81127e6:	d10b      	bne.n	8112800 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 81127e8:	4bb7      	ldr	r3, [pc, #732]	@ (8112ac8 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 81127ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81127ec:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 81127f0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81127f4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 81127f8:	4ab3      	ldr	r2, [pc, #716]	@ (8112ac8 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 81127fa:	430b      	orrs	r3, r1
 81127fc:	6593      	str	r3, [r2, #88]	@ 0x58
 81127fe:	e003      	b.n	8112808 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8112800:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8112804:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(DSI)
  /*---------------------------- DSI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 8112808:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 811280c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8112810:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 8112814:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8112818:	2300      	movs	r3, #0
 811281a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 811281e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8112822:	460b      	mov	r3, r1
 8112824:	4313      	orrs	r3, r2
 8112826:	d02a      	beq.n	811287e <HAL_RCCEx_PeriphCLKConfig+0x716>
  {
    switch (PeriphClkInit->DsiClockSelection)
 8112828:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 811282c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 811282e:	2b00      	cmp	r3, #0
 8112830:	d011      	beq.n	8112856 <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 8112832:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8112836:	d10a      	bne.n	811284e <HAL_RCCEx_PeriphCLKConfig+0x6e6>
    {

      case RCC_DSICLKSOURCE_PLL2: /* PLL2 is used as clock source for DSI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8112838:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 811283c:	3308      	adds	r3, #8
 811283e:	2101      	movs	r1, #1
 8112840:	4618      	mov	r0, r3
 8112842:	f001 f999 	bl	8113b78 <RCCEx_PLL2_Config>
 8112846:	4603      	mov	r3, r0
 8112848:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* DSI clock source configuration done later after clock selection check */
        break;
 811284c:	e004      	b.n	8112858 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        /* PHY is used as clock source for DSI*/
        /* DSI clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 811284e:	2301      	movs	r3, #1
 8112850:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8112854:	e000      	b.n	8112858 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        break;
 8112856:	bf00      	nop
    }

    if (ret == HAL_OK)
 8112858:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 811285c:	2b00      	cmp	r3, #0
 811285e:	d10a      	bne.n	8112876 <HAL_RCCEx_PeriphCLKConfig+0x70e>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 8112860:	4b99      	ldr	r3, [pc, #612]	@ (8112ac8 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8112862:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8112864:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8112868:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 811286c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 811286e:	4a96      	ldr	r2, [pc, #600]	@ (8112ac8 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8112870:	430b      	orrs	r3, r1
 8112872:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8112874:	e003      	b.n	811287e <HAL_RCCEx_PeriphCLKConfig+0x716>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8112876:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 811287a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 811287e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8112882:	e9d3 2300 	ldrd	r2, r3, [r3]
 8112886:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 811288a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 811288e:	2300      	movs	r3, #0
 8112890:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8112894:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8112898:	460b      	mov	r3, r1
 811289a:	4313      	orrs	r3, r2
 811289c:	d037      	beq.n	811290e <HAL_RCCEx_PeriphCLKConfig+0x7a6>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 811289e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81128a2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 81128a4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 81128a8:	d00e      	beq.n	81128c8 <HAL_RCCEx_PeriphCLKConfig+0x760>
 81128aa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 81128ae:	d816      	bhi.n	81128de <HAL_RCCEx_PeriphCLKConfig+0x776>
 81128b0:	2b00      	cmp	r3, #0
 81128b2:	d018      	beq.n	81128e6 <HAL_RCCEx_PeriphCLKConfig+0x77e>
 81128b4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 81128b8:	d111      	bne.n	81128de <HAL_RCCEx_PeriphCLKConfig+0x776>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81128ba:	4b83      	ldr	r3, [pc, #524]	@ (8112ac8 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 81128bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81128be:	4a82      	ldr	r2, [pc, #520]	@ (8112ac8 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 81128c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 81128c4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 81128c6:	e00f      	b.n	81128e8 <HAL_RCCEx_PeriphCLKConfig+0x780>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 81128c8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81128cc:	3308      	adds	r3, #8
 81128ce:	2101      	movs	r1, #1
 81128d0:	4618      	mov	r0, r3
 81128d2:	f001 f951 	bl	8113b78 <RCCEx_PLL2_Config>
 81128d6:	4603      	mov	r3, r0
 81128d8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 81128dc:	e004      	b.n	81128e8 <HAL_RCCEx_PeriphCLKConfig+0x780>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81128de:	2301      	movs	r3, #1
 81128e0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 81128e4:	e000      	b.n	81128e8 <HAL_RCCEx_PeriphCLKConfig+0x780>
        break;
 81128e6:	bf00      	nop
    }

    if (ret == HAL_OK)
 81128e8:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81128ec:	2b00      	cmp	r3, #0
 81128ee:	d10a      	bne.n	8112906 <HAL_RCCEx_PeriphCLKConfig+0x79e>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 81128f0:	4b75      	ldr	r3, [pc, #468]	@ (8112ac8 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 81128f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 81128f4:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 81128f8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81128fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 81128fe:	4a72      	ldr	r2, [pc, #456]	@ (8112ac8 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8112900:	430b      	orrs	r3, r1
 8112902:	6513      	str	r3, [r2, #80]	@ 0x50
 8112904:	e003      	b.n	811290e <HAL_RCCEx_PeriphCLKConfig+0x7a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8112906:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 811290a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 811290e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8112912:	e9d3 2300 	ldrd	r2, r3, [r3]
 8112916:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 811291a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 811291e:	2300      	movs	r3, #0
 8112920:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8112924:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8112928:	460b      	mov	r3, r1
 811292a:	4313      	orrs	r3, r2
 811292c:	d03a      	beq.n	81129a4 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    switch (PeriphClkInit->FmcClockSelection)
 811292e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8112932:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8112934:	2b03      	cmp	r3, #3
 8112936:	d81d      	bhi.n	8112974 <HAL_RCCEx_PeriphCLKConfig+0x80c>
 8112938:	a201      	add	r2, pc, #4	@ (adr r2, 8112940 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 811293a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 811293e:	bf00      	nop
 8112940:	0811297d 	.word	0x0811297d
 8112944:	08112951 	.word	0x08112951
 8112948:	0811295f 	.word	0x0811295f
 811294c:	0811297d 	.word	0x0811297d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8112950:	4b5d      	ldr	r3, [pc, #372]	@ (8112ac8 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8112952:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8112954:	4a5c      	ldr	r2, [pc, #368]	@ (8112ac8 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8112956:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 811295a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 811295c:	e00f      	b.n	811297e <HAL_RCCEx_PeriphCLKConfig+0x816>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 811295e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8112962:	3308      	adds	r3, #8
 8112964:	2102      	movs	r1, #2
 8112966:	4618      	mov	r0, r3
 8112968:	f001 f906 	bl	8113b78 <RCCEx_PLL2_Config>
 811296c:	4603      	mov	r3, r0
 811296e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* FMC clock source configuration done later after clock selection check */
        break;
 8112972:	e004      	b.n	811297e <HAL_RCCEx_PeriphCLKConfig+0x816>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8112974:	2301      	movs	r3, #1
 8112976:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 811297a:	e000      	b.n	811297e <HAL_RCCEx_PeriphCLKConfig+0x816>
        break;
 811297c:	bf00      	nop
    }

    if (ret == HAL_OK)
 811297e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8112982:	2b00      	cmp	r3, #0
 8112984:	d10a      	bne.n	811299c <HAL_RCCEx_PeriphCLKConfig+0x834>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8112986:	4b50      	ldr	r3, [pc, #320]	@ (8112ac8 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8112988:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 811298a:	f023 0103 	bic.w	r1, r3, #3
 811298e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8112992:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8112994:	4a4c      	ldr	r2, [pc, #304]	@ (8112ac8 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8112996:	430b      	orrs	r3, r1
 8112998:	64d3      	str	r3, [r2, #76]	@ 0x4c
 811299a:	e003      	b.n	81129a4 <HAL_RCCEx_PeriphCLKConfig+0x83c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 811299c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81129a0:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 81129a4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81129a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 81129ac:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 81129b0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 81129b4:	2300      	movs	r3, #0
 81129b6:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 81129ba:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 81129be:	460b      	mov	r3, r1
 81129c0:	4313      	orrs	r3, r2
 81129c2:	f000 80a0 	beq.w	8112b06 <HAL_RCCEx_PeriphCLKConfig+0x99e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 81129c6:	4b41      	ldr	r3, [pc, #260]	@ (8112acc <HAL_RCCEx_PeriphCLKConfig+0x964>)
 81129c8:	681b      	ldr	r3, [r3, #0]
 81129ca:	4a40      	ldr	r2, [pc, #256]	@ (8112acc <HAL_RCCEx_PeriphCLKConfig+0x964>)
 81129cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 81129d0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 81129d2:	f7fc fa81 	bl	810eed8 <HAL_GetTick>
 81129d6:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 81129da:	e00b      	b.n	81129f4 <HAL_RCCEx_PeriphCLKConfig+0x88c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 81129dc:	f7fc fa7c 	bl	810eed8 <HAL_GetTick>
 81129e0:	4602      	mov	r2, r0
 81129e2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 81129e6:	1ad3      	subs	r3, r2, r3
 81129e8:	2b64      	cmp	r3, #100	@ 0x64
 81129ea:	d903      	bls.n	81129f4 <HAL_RCCEx_PeriphCLKConfig+0x88c>
      {
        ret = HAL_TIMEOUT;
 81129ec:	2303      	movs	r3, #3
 81129ee:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 81129f2:	e005      	b.n	8112a00 <HAL_RCCEx_PeriphCLKConfig+0x898>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 81129f4:	4b35      	ldr	r3, [pc, #212]	@ (8112acc <HAL_RCCEx_PeriphCLKConfig+0x964>)
 81129f6:	681b      	ldr	r3, [r3, #0]
 81129f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 81129fc:	2b00      	cmp	r3, #0
 81129fe:	d0ed      	beq.n	81129dc <HAL_RCCEx_PeriphCLKConfig+0x874>
      }
    }

    if (ret == HAL_OK)
 8112a00:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8112a04:	2b00      	cmp	r3, #0
 8112a06:	d17a      	bne.n	8112afe <HAL_RCCEx_PeriphCLKConfig+0x996>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8112a08:	4b2f      	ldr	r3, [pc, #188]	@ (8112ac8 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8112a0a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8112a0c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8112a10:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8112a14:	4053      	eors	r3, r2
 8112a16:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8112a1a:	2b00      	cmp	r3, #0
 8112a1c:	d015      	beq.n	8112a4a <HAL_RCCEx_PeriphCLKConfig+0x8e2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8112a1e:	4b2a      	ldr	r3, [pc, #168]	@ (8112ac8 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8112a20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8112a22:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8112a26:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8112a2a:	4b27      	ldr	r3, [pc, #156]	@ (8112ac8 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8112a2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8112a2e:	4a26      	ldr	r2, [pc, #152]	@ (8112ac8 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8112a30:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8112a34:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8112a36:	4b24      	ldr	r3, [pc, #144]	@ (8112ac8 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8112a38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8112a3a:	4a23      	ldr	r2, [pc, #140]	@ (8112ac8 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8112a3c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8112a40:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8112a42:	4a21      	ldr	r2, [pc, #132]	@ (8112ac8 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8112a44:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8112a48:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8112a4a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8112a4e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8112a52:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8112a56:	d118      	bne.n	8112a8a <HAL_RCCEx_PeriphCLKConfig+0x922>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8112a58:	f7fc fa3e 	bl	810eed8 <HAL_GetTick>
 8112a5c:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8112a60:	e00d      	b.n	8112a7e <HAL_RCCEx_PeriphCLKConfig+0x916>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8112a62:	f7fc fa39 	bl	810eed8 <HAL_GetTick>
 8112a66:	4602      	mov	r2, r0
 8112a68:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8112a6c:	1ad2      	subs	r2, r2, r3
 8112a6e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8112a72:	429a      	cmp	r2, r3
 8112a74:	d903      	bls.n	8112a7e <HAL_RCCEx_PeriphCLKConfig+0x916>
          {
            ret = HAL_TIMEOUT;
 8112a76:	2303      	movs	r3, #3
 8112a78:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
            break;
 8112a7c:	e005      	b.n	8112a8a <HAL_RCCEx_PeriphCLKConfig+0x922>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8112a7e:	4b12      	ldr	r3, [pc, #72]	@ (8112ac8 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8112a80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8112a82:	f003 0302 	and.w	r3, r3, #2
 8112a86:	2b00      	cmp	r3, #0
 8112a88:	d0eb      	beq.n	8112a62 <HAL_RCCEx_PeriphCLKConfig+0x8fa>
          }
        }
      }

      if (ret == HAL_OK)
 8112a8a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8112a8e:	2b00      	cmp	r3, #0
 8112a90:	d130      	bne.n	8112af4 <HAL_RCCEx_PeriphCLKConfig+0x98c>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8112a92:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8112a96:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8112a9a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8112a9e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8112aa2:	d115      	bne.n	8112ad0 <HAL_RCCEx_PeriphCLKConfig+0x968>
 8112aa4:	4b08      	ldr	r3, [pc, #32]	@ (8112ac8 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8112aa6:	691b      	ldr	r3, [r3, #16]
 8112aa8:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8112aac:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8112ab0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8112ab4:	091b      	lsrs	r3, r3, #4
 8112ab6:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8112aba:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8112abe:	4a02      	ldr	r2, [pc, #8]	@ (8112ac8 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8112ac0:	430b      	orrs	r3, r1
 8112ac2:	6113      	str	r3, [r2, #16]
 8112ac4:	e00a      	b.n	8112adc <HAL_RCCEx_PeriphCLKConfig+0x974>
 8112ac6:	bf00      	nop
 8112ac8:	58024400 	.word	0x58024400
 8112acc:	58024800 	.word	0x58024800
 8112ad0:	4bd4      	ldr	r3, [pc, #848]	@ (8112e24 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8112ad2:	691b      	ldr	r3, [r3, #16]
 8112ad4:	4ad3      	ldr	r2, [pc, #844]	@ (8112e24 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8112ad6:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8112ada:	6113      	str	r3, [r2, #16]
 8112adc:	4bd1      	ldr	r3, [pc, #836]	@ (8112e24 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8112ade:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8112ae0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8112ae4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8112ae8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8112aec:	4acd      	ldr	r2, [pc, #820]	@ (8112e24 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8112aee:	430b      	orrs	r3, r1
 8112af0:	6713      	str	r3, [r2, #112]	@ 0x70
 8112af2:	e008      	b.n	8112b06 <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8112af4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8112af8:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
 8112afc:	e003      	b.n	8112b06 <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8112afe:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8112b02:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8112b06:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8112b0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8112b0e:	f002 0301 	and.w	r3, r2, #1
 8112b12:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8112b16:	2300      	movs	r3, #0
 8112b18:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8112b1c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8112b20:	460b      	mov	r3, r1
 8112b22:	4313      	orrs	r3, r2
 8112b24:	f000 808b 	beq.w	8112c3e <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8112b28:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8112b2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8112b30:	2b28      	cmp	r3, #40	@ 0x28
 8112b32:	d86b      	bhi.n	8112c0c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8112b34:	a201      	add	r2, pc, #4	@ (adr r2, 8112b3c <HAL_RCCEx_PeriphCLKConfig+0x9d4>)
 8112b36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8112b3a:	bf00      	nop
 8112b3c:	08112c15 	.word	0x08112c15
 8112b40:	08112c0d 	.word	0x08112c0d
 8112b44:	08112c0d 	.word	0x08112c0d
 8112b48:	08112c0d 	.word	0x08112c0d
 8112b4c:	08112c0d 	.word	0x08112c0d
 8112b50:	08112c0d 	.word	0x08112c0d
 8112b54:	08112c0d 	.word	0x08112c0d
 8112b58:	08112c0d 	.word	0x08112c0d
 8112b5c:	08112be1 	.word	0x08112be1
 8112b60:	08112c0d 	.word	0x08112c0d
 8112b64:	08112c0d 	.word	0x08112c0d
 8112b68:	08112c0d 	.word	0x08112c0d
 8112b6c:	08112c0d 	.word	0x08112c0d
 8112b70:	08112c0d 	.word	0x08112c0d
 8112b74:	08112c0d 	.word	0x08112c0d
 8112b78:	08112c0d 	.word	0x08112c0d
 8112b7c:	08112bf7 	.word	0x08112bf7
 8112b80:	08112c0d 	.word	0x08112c0d
 8112b84:	08112c0d 	.word	0x08112c0d
 8112b88:	08112c0d 	.word	0x08112c0d
 8112b8c:	08112c0d 	.word	0x08112c0d
 8112b90:	08112c0d 	.word	0x08112c0d
 8112b94:	08112c0d 	.word	0x08112c0d
 8112b98:	08112c0d 	.word	0x08112c0d
 8112b9c:	08112c15 	.word	0x08112c15
 8112ba0:	08112c0d 	.word	0x08112c0d
 8112ba4:	08112c0d 	.word	0x08112c0d
 8112ba8:	08112c0d 	.word	0x08112c0d
 8112bac:	08112c0d 	.word	0x08112c0d
 8112bb0:	08112c0d 	.word	0x08112c0d
 8112bb4:	08112c0d 	.word	0x08112c0d
 8112bb8:	08112c0d 	.word	0x08112c0d
 8112bbc:	08112c15 	.word	0x08112c15
 8112bc0:	08112c0d 	.word	0x08112c0d
 8112bc4:	08112c0d 	.word	0x08112c0d
 8112bc8:	08112c0d 	.word	0x08112c0d
 8112bcc:	08112c0d 	.word	0x08112c0d
 8112bd0:	08112c0d 	.word	0x08112c0d
 8112bd4:	08112c0d 	.word	0x08112c0d
 8112bd8:	08112c0d 	.word	0x08112c0d
 8112bdc:	08112c15 	.word	0x08112c15
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8112be0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8112be4:	3308      	adds	r3, #8
 8112be6:	2101      	movs	r1, #1
 8112be8:	4618      	mov	r0, r3
 8112bea:	f000 ffc5 	bl	8113b78 <RCCEx_PLL2_Config>
 8112bee:	4603      	mov	r3, r0
 8112bf0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8112bf4:	e00f      	b.n	8112c16 <HAL_RCCEx_PeriphCLKConfig+0xaae>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8112bf6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8112bfa:	3328      	adds	r3, #40	@ 0x28
 8112bfc:	2101      	movs	r1, #1
 8112bfe:	4618      	mov	r0, r3
 8112c00:	f001 f86c 	bl	8113cdc <RCCEx_PLL3_Config>
 8112c04:	4603      	mov	r3, r0
 8112c06:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8112c0a:	e004      	b.n	8112c16 <HAL_RCCEx_PeriphCLKConfig+0xaae>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8112c0c:	2301      	movs	r3, #1
 8112c0e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8112c12:	e000      	b.n	8112c16 <HAL_RCCEx_PeriphCLKConfig+0xaae>
        break;
 8112c14:	bf00      	nop
    }

    if (ret == HAL_OK)
 8112c16:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8112c1a:	2b00      	cmp	r3, #0
 8112c1c:	d10b      	bne.n	8112c36 <HAL_RCCEx_PeriphCLKConfig+0xace>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8112c1e:	4b81      	ldr	r3, [pc, #516]	@ (8112e24 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8112c20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8112c22:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8112c26:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8112c2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8112c2e:	4a7d      	ldr	r2, [pc, #500]	@ (8112e24 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8112c30:	430b      	orrs	r3, r1
 8112c32:	6553      	str	r3, [r2, #84]	@ 0x54
 8112c34:	e003      	b.n	8112c3e <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8112c36:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8112c3a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8112c3e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8112c42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8112c46:	f002 0302 	and.w	r3, r2, #2
 8112c4a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8112c4e:	2300      	movs	r3, #0
 8112c50:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8112c54:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8112c58:	460b      	mov	r3, r1
 8112c5a:	4313      	orrs	r3, r2
 8112c5c:	d042      	beq.n	8112ce4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8112c5e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8112c62:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8112c64:	2b05      	cmp	r3, #5
 8112c66:	d825      	bhi.n	8112cb4 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
 8112c68:	a201      	add	r2, pc, #4	@ (adr r2, 8112c70 <HAL_RCCEx_PeriphCLKConfig+0xb08>)
 8112c6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8112c6e:	bf00      	nop
 8112c70:	08112cbd 	.word	0x08112cbd
 8112c74:	08112c89 	.word	0x08112c89
 8112c78:	08112c9f 	.word	0x08112c9f
 8112c7c:	08112cbd 	.word	0x08112cbd
 8112c80:	08112cbd 	.word	0x08112cbd
 8112c84:	08112cbd 	.word	0x08112cbd
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8112c88:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8112c8c:	3308      	adds	r3, #8
 8112c8e:	2101      	movs	r1, #1
 8112c90:	4618      	mov	r0, r3
 8112c92:	f000 ff71 	bl	8113b78 <RCCEx_PLL2_Config>
 8112c96:	4603      	mov	r3, r0
 8112c98:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8112c9c:	e00f      	b.n	8112cbe <HAL_RCCEx_PeriphCLKConfig+0xb56>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8112c9e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8112ca2:	3328      	adds	r3, #40	@ 0x28
 8112ca4:	2101      	movs	r1, #1
 8112ca6:	4618      	mov	r0, r3
 8112ca8:	f001 f818 	bl	8113cdc <RCCEx_PLL3_Config>
 8112cac:	4603      	mov	r3, r0
 8112cae:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8112cb2:	e004      	b.n	8112cbe <HAL_RCCEx_PeriphCLKConfig+0xb56>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8112cb4:	2301      	movs	r3, #1
 8112cb6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8112cba:	e000      	b.n	8112cbe <HAL_RCCEx_PeriphCLKConfig+0xb56>
        break;
 8112cbc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8112cbe:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8112cc2:	2b00      	cmp	r3, #0
 8112cc4:	d10a      	bne.n	8112cdc <HAL_RCCEx_PeriphCLKConfig+0xb74>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8112cc6:	4b57      	ldr	r3, [pc, #348]	@ (8112e24 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8112cc8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8112cca:	f023 0107 	bic.w	r1, r3, #7
 8112cce:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8112cd2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8112cd4:	4a53      	ldr	r2, [pc, #332]	@ (8112e24 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8112cd6:	430b      	orrs	r3, r1
 8112cd8:	6553      	str	r3, [r2, #84]	@ 0x54
 8112cda:	e003      	b.n	8112ce4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8112cdc:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8112ce0:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8112ce4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8112ce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8112cec:	f002 0304 	and.w	r3, r2, #4
 8112cf0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8112cf4:	2300      	movs	r3, #0
 8112cf6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8112cfa:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8112cfe:	460b      	mov	r3, r1
 8112d00:	4313      	orrs	r3, r2
 8112d02:	d044      	beq.n	8112d8e <HAL_RCCEx_PeriphCLKConfig+0xc26>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8112d04:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8112d08:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8112d0c:	2b05      	cmp	r3, #5
 8112d0e:	d825      	bhi.n	8112d5c <HAL_RCCEx_PeriphCLKConfig+0xbf4>
 8112d10:	a201      	add	r2, pc, #4	@ (adr r2, 8112d18 <HAL_RCCEx_PeriphCLKConfig+0xbb0>)
 8112d12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8112d16:	bf00      	nop
 8112d18:	08112d65 	.word	0x08112d65
 8112d1c:	08112d31 	.word	0x08112d31
 8112d20:	08112d47 	.word	0x08112d47
 8112d24:	08112d65 	.word	0x08112d65
 8112d28:	08112d65 	.word	0x08112d65
 8112d2c:	08112d65 	.word	0x08112d65
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8112d30:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8112d34:	3308      	adds	r3, #8
 8112d36:	2101      	movs	r1, #1
 8112d38:	4618      	mov	r0, r3
 8112d3a:	f000 ff1d 	bl	8113b78 <RCCEx_PLL2_Config>
 8112d3e:	4603      	mov	r3, r0
 8112d40:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8112d44:	e00f      	b.n	8112d66 <HAL_RCCEx_PeriphCLKConfig+0xbfe>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8112d46:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8112d4a:	3328      	adds	r3, #40	@ 0x28
 8112d4c:	2101      	movs	r1, #1
 8112d4e:	4618      	mov	r0, r3
 8112d50:	f000 ffc4 	bl	8113cdc <RCCEx_PLL3_Config>
 8112d54:	4603      	mov	r3, r0
 8112d56:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8112d5a:	e004      	b.n	8112d66 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8112d5c:	2301      	movs	r3, #1
 8112d5e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8112d62:	e000      	b.n	8112d66 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        break;
 8112d64:	bf00      	nop
    }

    if (ret == HAL_OK)
 8112d66:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8112d6a:	2b00      	cmp	r3, #0
 8112d6c:	d10b      	bne.n	8112d86 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8112d6e:	4b2d      	ldr	r3, [pc, #180]	@ (8112e24 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8112d70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8112d72:	f023 0107 	bic.w	r1, r3, #7
 8112d76:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8112d7a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8112d7e:	4a29      	ldr	r2, [pc, #164]	@ (8112e24 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8112d80:	430b      	orrs	r3, r1
 8112d82:	6593      	str	r3, [r2, #88]	@ 0x58
 8112d84:	e003      	b.n	8112d8e <HAL_RCCEx_PeriphCLKConfig+0xc26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8112d86:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8112d8a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8112d8e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8112d92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8112d96:	f002 0320 	and.w	r3, r2, #32
 8112d9a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8112d9e:	2300      	movs	r3, #0
 8112da0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8112da4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8112da8:	460b      	mov	r3, r1
 8112daa:	4313      	orrs	r3, r2
 8112dac:	d057      	beq.n	8112e5e <HAL_RCCEx_PeriphCLKConfig+0xcf6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8112dae:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8112db2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8112db6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8112dba:	d035      	beq.n	8112e28 <HAL_RCCEx_PeriphCLKConfig+0xcc0>
 8112dbc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8112dc0:	d82c      	bhi.n	8112e1c <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8112dc2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8112dc6:	d031      	beq.n	8112e2c <HAL_RCCEx_PeriphCLKConfig+0xcc4>
 8112dc8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8112dcc:	d826      	bhi.n	8112e1c <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8112dce:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8112dd2:	d02d      	beq.n	8112e30 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
 8112dd4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8112dd8:	d820      	bhi.n	8112e1c <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8112dda:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8112dde:	d012      	beq.n	8112e06 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
 8112de0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8112de4:	d81a      	bhi.n	8112e1c <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8112de6:	2b00      	cmp	r3, #0
 8112de8:	d024      	beq.n	8112e34 <HAL_RCCEx_PeriphCLKConfig+0xccc>
 8112dea:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8112dee:	d115      	bne.n	8112e1c <HAL_RCCEx_PeriphCLKConfig+0xcb4>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8112df0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8112df4:	3308      	adds	r3, #8
 8112df6:	2100      	movs	r1, #0
 8112df8:	4618      	mov	r0, r3
 8112dfa:	f000 febd 	bl	8113b78 <RCCEx_PLL2_Config>
 8112dfe:	4603      	mov	r3, r0
 8112e00:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8112e04:	e017      	b.n	8112e36 <HAL_RCCEx_PeriphCLKConfig+0xcce>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8112e06:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8112e0a:	3328      	adds	r3, #40	@ 0x28
 8112e0c:	2102      	movs	r1, #2
 8112e0e:	4618      	mov	r0, r3
 8112e10:	f000 ff64 	bl	8113cdc <RCCEx_PLL3_Config>
 8112e14:	4603      	mov	r3, r0
 8112e16:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8112e1a:	e00c      	b.n	8112e36 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8112e1c:	2301      	movs	r3, #1
 8112e1e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8112e22:	e008      	b.n	8112e36 <HAL_RCCEx_PeriphCLKConfig+0xcce>
 8112e24:	58024400 	.word	0x58024400
        break;
 8112e28:	bf00      	nop
 8112e2a:	e004      	b.n	8112e36 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8112e2c:	bf00      	nop
 8112e2e:	e002      	b.n	8112e36 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8112e30:	bf00      	nop
 8112e32:	e000      	b.n	8112e36 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8112e34:	bf00      	nop
    }

    if (ret == HAL_OK)
 8112e36:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8112e3a:	2b00      	cmp	r3, #0
 8112e3c:	d10b      	bne.n	8112e56 <HAL_RCCEx_PeriphCLKConfig+0xcee>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8112e3e:	4bc2      	ldr	r3, [pc, #776]	@ (8113148 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8112e40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8112e42:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8112e46:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8112e4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8112e4e:	4abe      	ldr	r2, [pc, #760]	@ (8113148 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8112e50:	430b      	orrs	r3, r1
 8112e52:	6553      	str	r3, [r2, #84]	@ 0x54
 8112e54:	e003      	b.n	8112e5e <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8112e56:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8112e5a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8112e5e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8112e62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8112e66:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8112e6a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8112e6e:	2300      	movs	r3, #0
 8112e70:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8112e74:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8112e78:	460b      	mov	r3, r1
 8112e7a:	4313      	orrs	r3, r2
 8112e7c:	d055      	beq.n	8112f2a <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8112e7e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8112e82:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8112e86:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8112e8a:	d033      	beq.n	8112ef4 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
 8112e8c:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8112e90:	d82c      	bhi.n	8112eec <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8112e92:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8112e96:	d02f      	beq.n	8112ef8 <HAL_RCCEx_PeriphCLKConfig+0xd90>
 8112e98:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8112e9c:	d826      	bhi.n	8112eec <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8112e9e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8112ea2:	d02b      	beq.n	8112efc <HAL_RCCEx_PeriphCLKConfig+0xd94>
 8112ea4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8112ea8:	d820      	bhi.n	8112eec <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8112eaa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8112eae:	d012      	beq.n	8112ed6 <HAL_RCCEx_PeriphCLKConfig+0xd6e>
 8112eb0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8112eb4:	d81a      	bhi.n	8112eec <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8112eb6:	2b00      	cmp	r3, #0
 8112eb8:	d022      	beq.n	8112f00 <HAL_RCCEx_PeriphCLKConfig+0xd98>
 8112eba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8112ebe:	d115      	bne.n	8112eec <HAL_RCCEx_PeriphCLKConfig+0xd84>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8112ec0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8112ec4:	3308      	adds	r3, #8
 8112ec6:	2100      	movs	r1, #0
 8112ec8:	4618      	mov	r0, r3
 8112eca:	f000 fe55 	bl	8113b78 <RCCEx_PLL2_Config>
 8112ece:	4603      	mov	r3, r0
 8112ed0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8112ed4:	e015      	b.n	8112f02 <HAL_RCCEx_PeriphCLKConfig+0xd9a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8112ed6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8112eda:	3328      	adds	r3, #40	@ 0x28
 8112edc:	2102      	movs	r1, #2
 8112ede:	4618      	mov	r0, r3
 8112ee0:	f000 fefc 	bl	8113cdc <RCCEx_PLL3_Config>
 8112ee4:	4603      	mov	r3, r0
 8112ee6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8112eea:	e00a      	b.n	8112f02 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8112eec:	2301      	movs	r3, #1
 8112eee:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8112ef2:	e006      	b.n	8112f02 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8112ef4:	bf00      	nop
 8112ef6:	e004      	b.n	8112f02 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8112ef8:	bf00      	nop
 8112efa:	e002      	b.n	8112f02 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8112efc:	bf00      	nop
 8112efe:	e000      	b.n	8112f02 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8112f00:	bf00      	nop
    }

    if (ret == HAL_OK)
 8112f02:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8112f06:	2b00      	cmp	r3, #0
 8112f08:	d10b      	bne.n	8112f22 <HAL_RCCEx_PeriphCLKConfig+0xdba>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8112f0a:	4b8f      	ldr	r3, [pc, #572]	@ (8113148 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8112f0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8112f0e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8112f12:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8112f16:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8112f1a:	4a8b      	ldr	r2, [pc, #556]	@ (8113148 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8112f1c:	430b      	orrs	r3, r1
 8112f1e:	6593      	str	r3, [r2, #88]	@ 0x58
 8112f20:	e003      	b.n	8112f2a <HAL_RCCEx_PeriphCLKConfig+0xdc2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8112f22:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8112f26:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8112f2a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8112f2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8112f32:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8112f36:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8112f3a:	2300      	movs	r3, #0
 8112f3c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8112f40:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8112f44:	460b      	mov	r3, r1
 8112f46:	4313      	orrs	r3, r2
 8112f48:	d055      	beq.n	8112ff6 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8112f4a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8112f4e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8112f52:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8112f56:	d033      	beq.n	8112fc0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
 8112f58:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8112f5c:	d82c      	bhi.n	8112fb8 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8112f5e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8112f62:	d02f      	beq.n	8112fc4 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 8112f64:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8112f68:	d826      	bhi.n	8112fb8 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8112f6a:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8112f6e:	d02b      	beq.n	8112fc8 <HAL_RCCEx_PeriphCLKConfig+0xe60>
 8112f70:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8112f74:	d820      	bhi.n	8112fb8 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8112f76:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8112f7a:	d012      	beq.n	8112fa2 <HAL_RCCEx_PeriphCLKConfig+0xe3a>
 8112f7c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8112f80:	d81a      	bhi.n	8112fb8 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8112f82:	2b00      	cmp	r3, #0
 8112f84:	d022      	beq.n	8112fcc <HAL_RCCEx_PeriphCLKConfig+0xe64>
 8112f86:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8112f8a:	d115      	bne.n	8112fb8 <HAL_RCCEx_PeriphCLKConfig+0xe50>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8112f8c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8112f90:	3308      	adds	r3, #8
 8112f92:	2100      	movs	r1, #0
 8112f94:	4618      	mov	r0, r3
 8112f96:	f000 fdef 	bl	8113b78 <RCCEx_PLL2_Config>
 8112f9a:	4603      	mov	r3, r0
 8112f9c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8112fa0:	e015      	b.n	8112fce <HAL_RCCEx_PeriphCLKConfig+0xe66>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8112fa2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8112fa6:	3328      	adds	r3, #40	@ 0x28
 8112fa8:	2102      	movs	r1, #2
 8112faa:	4618      	mov	r0, r3
 8112fac:	f000 fe96 	bl	8113cdc <RCCEx_PLL3_Config>
 8112fb0:	4603      	mov	r3, r0
 8112fb2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8112fb6:	e00a      	b.n	8112fce <HAL_RCCEx_PeriphCLKConfig+0xe66>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8112fb8:	2301      	movs	r3, #1
 8112fba:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8112fbe:	e006      	b.n	8112fce <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8112fc0:	bf00      	nop
 8112fc2:	e004      	b.n	8112fce <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8112fc4:	bf00      	nop
 8112fc6:	e002      	b.n	8112fce <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8112fc8:	bf00      	nop
 8112fca:	e000      	b.n	8112fce <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8112fcc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8112fce:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8112fd2:	2b00      	cmp	r3, #0
 8112fd4:	d10b      	bne.n	8112fee <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8112fd6:	4b5c      	ldr	r3, [pc, #368]	@ (8113148 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8112fd8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8112fda:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8112fde:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8112fe2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8112fe6:	4a58      	ldr	r2, [pc, #352]	@ (8113148 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8112fe8:	430b      	orrs	r3, r1
 8112fea:	6593      	str	r3, [r2, #88]	@ 0x58
 8112fec:	e003      	b.n	8112ff6 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8112fee:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8112ff2:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8112ff6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8112ffa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8112ffe:	f002 0308 	and.w	r3, r2, #8
 8113002:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8113006:	2300      	movs	r3, #0
 8113008:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 811300c:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8113010:	460b      	mov	r3, r1
 8113012:	4313      	orrs	r3, r2
 8113014:	d01e      	beq.n	8113054 <HAL_RCCEx_PeriphCLKConfig+0xeec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8113016:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 811301a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 811301e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8113022:	d10c      	bne.n	811303e <HAL_RCCEx_PeriphCLKConfig+0xed6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8113024:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8113028:	3328      	adds	r3, #40	@ 0x28
 811302a:	2102      	movs	r1, #2
 811302c:	4618      	mov	r0, r3
 811302e:	f000 fe55 	bl	8113cdc <RCCEx_PLL3_Config>
 8113032:	4603      	mov	r3, r0
 8113034:	2b00      	cmp	r3, #0
 8113036:	d002      	beq.n	811303e <HAL_RCCEx_PeriphCLKConfig+0xed6>
      {
        status = HAL_ERROR;
 8113038:	2301      	movs	r3, #1
 811303a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 811303e:	4b42      	ldr	r3, [pc, #264]	@ (8113148 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8113040:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8113042:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8113046:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 811304a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 811304e:	4a3e      	ldr	r2, [pc, #248]	@ (8113148 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8113050:	430b      	orrs	r3, r1
 8113052:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8113054:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8113058:	e9d3 2300 	ldrd	r2, r3, [r3]
 811305c:	f002 0310 	and.w	r3, r2, #16
 8113060:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8113064:	2300      	movs	r3, #0
 8113066:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 811306a:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 811306e:	460b      	mov	r3, r1
 8113070:	4313      	orrs	r3, r2
 8113072:	d01e      	beq.n	81130b2 <HAL_RCCEx_PeriphCLKConfig+0xf4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8113074:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8113078:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 811307c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8113080:	d10c      	bne.n	811309c <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8113082:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8113086:	3328      	adds	r3, #40	@ 0x28
 8113088:	2102      	movs	r1, #2
 811308a:	4618      	mov	r0, r3
 811308c:	f000 fe26 	bl	8113cdc <RCCEx_PLL3_Config>
 8113090:	4603      	mov	r3, r0
 8113092:	2b00      	cmp	r3, #0
 8113094:	d002      	beq.n	811309c <HAL_RCCEx_PeriphCLKConfig+0xf34>
      {
        status = HAL_ERROR;
 8113096:	2301      	movs	r3, #1
 8113098:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 811309c:	4b2a      	ldr	r3, [pc, #168]	@ (8113148 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 811309e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81130a0:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 81130a4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81130a8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 81130ac:	4a26      	ldr	r2, [pc, #152]	@ (8113148 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 81130ae:	430b      	orrs	r3, r1
 81130b0:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 81130b2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81130b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 81130ba:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 81130be:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 81130c2:	2300      	movs	r3, #0
 81130c4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 81130c8:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 81130cc:	460b      	mov	r3, r1
 81130ce:	4313      	orrs	r3, r2
 81130d0:	d040      	beq.n	8113154 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    switch (PeriphClkInit->AdcClockSelection)
 81130d2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81130d6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 81130da:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 81130de:	d022      	beq.n	8113126 <HAL_RCCEx_PeriphCLKConfig+0xfbe>
 81130e0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 81130e4:	d81b      	bhi.n	811311e <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 81130e6:	2b00      	cmp	r3, #0
 81130e8:	d003      	beq.n	81130f2 <HAL_RCCEx_PeriphCLKConfig+0xf8a>
 81130ea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 81130ee:	d00b      	beq.n	8113108 <HAL_RCCEx_PeriphCLKConfig+0xfa0>
 81130f0:	e015      	b.n	811311e <HAL_RCCEx_PeriphCLKConfig+0xfb6>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 81130f2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81130f6:	3308      	adds	r3, #8
 81130f8:	2100      	movs	r1, #0
 81130fa:	4618      	mov	r0, r3
 81130fc:	f000 fd3c 	bl	8113b78 <RCCEx_PLL2_Config>
 8113100:	4603      	mov	r3, r0
 8113102:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8113106:	e00f      	b.n	8113128 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8113108:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 811310c:	3328      	adds	r3, #40	@ 0x28
 811310e:	2102      	movs	r1, #2
 8113110:	4618      	mov	r0, r3
 8113112:	f000 fde3 	bl	8113cdc <RCCEx_PLL3_Config>
 8113116:	4603      	mov	r3, r0
 8113118:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 811311c:	e004      	b.n	8113128 <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 811311e:	2301      	movs	r3, #1
 8113120:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8113124:	e000      	b.n	8113128 <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        break;
 8113126:	bf00      	nop
    }

    if (ret == HAL_OK)
 8113128:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 811312c:	2b00      	cmp	r3, #0
 811312e:	d10d      	bne.n	811314c <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8113130:	4b05      	ldr	r3, [pc, #20]	@ (8113148 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8113132:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8113134:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8113138:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 811313c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8113140:	4a01      	ldr	r2, [pc, #4]	@ (8113148 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8113142:	430b      	orrs	r3, r1
 8113144:	6593      	str	r3, [r2, #88]	@ 0x58
 8113146:	e005      	b.n	8113154 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 8113148:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 811314c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8113150:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8113154:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8113158:	e9d3 2300 	ldrd	r2, r3, [r3]
 811315c:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8113160:	67bb      	str	r3, [r7, #120]	@ 0x78
 8113162:	2300      	movs	r3, #0
 8113164:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8113166:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 811316a:	460b      	mov	r3, r1
 811316c:	4313      	orrs	r3, r2
 811316e:	d03b      	beq.n	81131e8 <HAL_RCCEx_PeriphCLKConfig+0x1080>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8113170:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8113174:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8113178:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 811317c:	d01f      	beq.n	81131be <HAL_RCCEx_PeriphCLKConfig+0x1056>
 811317e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8113182:	d818      	bhi.n	81131b6 <HAL_RCCEx_PeriphCLKConfig+0x104e>
 8113184:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8113188:	d003      	beq.n	8113192 <HAL_RCCEx_PeriphCLKConfig+0x102a>
 811318a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 811318e:	d007      	beq.n	81131a0 <HAL_RCCEx_PeriphCLKConfig+0x1038>
 8113190:	e011      	b.n	81131b6 <HAL_RCCEx_PeriphCLKConfig+0x104e>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8113192:	4b64      	ldr	r3, [pc, #400]	@ (8113324 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8113194:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8113196:	4a63      	ldr	r2, [pc, #396]	@ (8113324 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8113198:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 811319c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 811319e:	e00f      	b.n	81131c0 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 81131a0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81131a4:	3328      	adds	r3, #40	@ 0x28
 81131a6:	2101      	movs	r1, #1
 81131a8:	4618      	mov	r0, r3
 81131aa:	f000 fd97 	bl	8113cdc <RCCEx_PLL3_Config>
 81131ae:	4603      	mov	r3, r0
 81131b0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* USB clock source configuration done later after clock selection check */
        break;
 81131b4:	e004      	b.n	81131c0 <HAL_RCCEx_PeriphCLKConfig+0x1058>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81131b6:	2301      	movs	r3, #1
 81131b8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 81131bc:	e000      	b.n	81131c0 <HAL_RCCEx_PeriphCLKConfig+0x1058>
        break;
 81131be:	bf00      	nop
    }

    if (ret == HAL_OK)
 81131c0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81131c4:	2b00      	cmp	r3, #0
 81131c6:	d10b      	bne.n	81131e0 <HAL_RCCEx_PeriphCLKConfig+0x1078>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 81131c8:	4b56      	ldr	r3, [pc, #344]	@ (8113324 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 81131ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81131cc:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 81131d0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81131d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 81131d8:	4a52      	ldr	r2, [pc, #328]	@ (8113324 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 81131da:	430b      	orrs	r3, r1
 81131dc:	6553      	str	r3, [r2, #84]	@ 0x54
 81131de:	e003      	b.n	81131e8 <HAL_RCCEx_PeriphCLKConfig+0x1080>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81131e0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81131e4:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 81131e8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81131ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 81131f0:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 81131f4:	673b      	str	r3, [r7, #112]	@ 0x70
 81131f6:	2300      	movs	r3, #0
 81131f8:	677b      	str	r3, [r7, #116]	@ 0x74
 81131fa:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 81131fe:	460b      	mov	r3, r1
 8113200:	4313      	orrs	r3, r2
 8113202:	d031      	beq.n	8113268 <HAL_RCCEx_PeriphCLKConfig+0x1100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8113204:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8113208:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 811320a:	2b00      	cmp	r3, #0
 811320c:	d003      	beq.n	8113216 <HAL_RCCEx_PeriphCLKConfig+0x10ae>
 811320e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8113212:	d007      	beq.n	8113224 <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 8113214:	e011      	b.n	811323a <HAL_RCCEx_PeriphCLKConfig+0x10d2>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8113216:	4b43      	ldr	r3, [pc, #268]	@ (8113324 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8113218:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 811321a:	4a42      	ldr	r2, [pc, #264]	@ (8113324 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 811321c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8113220:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8113222:	e00e      	b.n	8113242 <HAL_RCCEx_PeriphCLKConfig+0x10da>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8113224:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8113228:	3308      	adds	r3, #8
 811322a:	2102      	movs	r1, #2
 811322c:	4618      	mov	r0, r3
 811322e:	f000 fca3 	bl	8113b78 <RCCEx_PLL2_Config>
 8113232:	4603      	mov	r3, r0
 8113234:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8113238:	e003      	b.n	8113242 <HAL_RCCEx_PeriphCLKConfig+0x10da>

      default:
        ret = HAL_ERROR;
 811323a:	2301      	movs	r3, #1
 811323c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8113240:	bf00      	nop
    }

    if (ret == HAL_OK)
 8113242:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8113246:	2b00      	cmp	r3, #0
 8113248:	d10a      	bne.n	8113260 <HAL_RCCEx_PeriphCLKConfig+0x10f8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 811324a:	4b36      	ldr	r3, [pc, #216]	@ (8113324 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 811324c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 811324e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8113252:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8113256:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8113258:	4a32      	ldr	r2, [pc, #200]	@ (8113324 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 811325a:	430b      	orrs	r3, r1
 811325c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 811325e:	e003      	b.n	8113268 <HAL_RCCEx_PeriphCLKConfig+0x1100>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8113260:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8113264:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8113268:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 811326c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8113270:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8113274:	66bb      	str	r3, [r7, #104]	@ 0x68
 8113276:	2300      	movs	r3, #0
 8113278:	66fb      	str	r3, [r7, #108]	@ 0x6c
 811327a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 811327e:	460b      	mov	r3, r1
 8113280:	4313      	orrs	r3, r2
 8113282:	d00c      	beq.n	811329e <HAL_RCCEx_PeriphCLKConfig+0x1136>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8113284:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8113288:	3328      	adds	r3, #40	@ 0x28
 811328a:	2102      	movs	r1, #2
 811328c:	4618      	mov	r0, r3
 811328e:	f000 fd25 	bl	8113cdc <RCCEx_PLL3_Config>
 8113292:	4603      	mov	r3, r0
 8113294:	2b00      	cmp	r3, #0
 8113296:	d002      	beq.n	811329e <HAL_RCCEx_PeriphCLKConfig+0x1136>
    {
      status = HAL_ERROR;
 8113298:	2301      	movs	r3, #1
 811329a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 811329e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81132a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 81132a6:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 81132aa:	663b      	str	r3, [r7, #96]	@ 0x60
 81132ac:	2300      	movs	r3, #0
 81132ae:	667b      	str	r3, [r7, #100]	@ 0x64
 81132b0:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 81132b4:	460b      	mov	r3, r1
 81132b6:	4313      	orrs	r3, r2
 81132b8:	d03a      	beq.n	8113330 <HAL_RCCEx_PeriphCLKConfig+0x11c8>
  {

    switch (PeriphClkInit->RngClockSelection)
 81132ba:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81132be:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 81132c2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 81132c6:	d018      	beq.n	81132fa <HAL_RCCEx_PeriphCLKConfig+0x1192>
 81132c8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 81132cc:	d811      	bhi.n	81132f2 <HAL_RCCEx_PeriphCLKConfig+0x118a>
 81132ce:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 81132d2:	d014      	beq.n	81132fe <HAL_RCCEx_PeriphCLKConfig+0x1196>
 81132d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 81132d8:	d80b      	bhi.n	81132f2 <HAL_RCCEx_PeriphCLKConfig+0x118a>
 81132da:	2b00      	cmp	r3, #0
 81132dc:	d011      	beq.n	8113302 <HAL_RCCEx_PeriphCLKConfig+0x119a>
 81132de:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 81132e2:	d106      	bne.n	81132f2 <HAL_RCCEx_PeriphCLKConfig+0x118a>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81132e4:	4b0f      	ldr	r3, [pc, #60]	@ (8113324 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 81132e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81132e8:	4a0e      	ldr	r2, [pc, #56]	@ (8113324 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 81132ea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 81132ee:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 81132f0:	e008      	b.n	8113304 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81132f2:	2301      	movs	r3, #1
 81132f4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 81132f8:	e004      	b.n	8113304 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 81132fa:	bf00      	nop
 81132fc:	e002      	b.n	8113304 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 81132fe:	bf00      	nop
 8113300:	e000      	b.n	8113304 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 8113302:	bf00      	nop
    }

    if (ret == HAL_OK)
 8113304:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8113308:	2b00      	cmp	r3, #0
 811330a:	d10d      	bne.n	8113328 <HAL_RCCEx_PeriphCLKConfig+0x11c0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 811330c:	4b05      	ldr	r3, [pc, #20]	@ (8113324 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 811330e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8113310:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8113314:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8113318:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 811331c:	4a01      	ldr	r2, [pc, #4]	@ (8113324 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 811331e:	430b      	orrs	r3, r1
 8113320:	6553      	str	r3, [r2, #84]	@ 0x54
 8113322:	e005      	b.n	8113330 <HAL_RCCEx_PeriphCLKConfig+0x11c8>
 8113324:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8113328:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 811332c:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8113330:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8113334:	e9d3 2300 	ldrd	r2, r3, [r3]
 8113338:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 811333c:	65bb      	str	r3, [r7, #88]	@ 0x58
 811333e:	2300      	movs	r3, #0
 8113340:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8113342:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8113346:	460b      	mov	r3, r1
 8113348:	4313      	orrs	r3, r2
 811334a:	d009      	beq.n	8113360 <HAL_RCCEx_PeriphCLKConfig+0x11f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 811334c:	4baa      	ldr	r3, [pc, #680]	@ (81135f8 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 811334e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8113350:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8113354:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8113358:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 811335a:	4aa7      	ldr	r2, [pc, #668]	@ (81135f8 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 811335c:	430b      	orrs	r3, r1
 811335e:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8113360:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8113364:	e9d3 2300 	ldrd	r2, r3, [r3]
 8113368:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 811336c:	653b      	str	r3, [r7, #80]	@ 0x50
 811336e:	2300      	movs	r3, #0
 8113370:	657b      	str	r3, [r7, #84]	@ 0x54
 8113372:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8113376:	460b      	mov	r3, r1
 8113378:	4313      	orrs	r3, r2
 811337a:	d00a      	beq.n	8113392 <HAL_RCCEx_PeriphCLKConfig+0x122a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 811337c:	4b9e      	ldr	r3, [pc, #632]	@ (81135f8 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 811337e:	691b      	ldr	r3, [r3, #16]
 8113380:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8113384:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8113388:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 811338c:	4a9a      	ldr	r2, [pc, #616]	@ (81135f8 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 811338e:	430b      	orrs	r3, r1
 8113390:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8113392:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8113396:	e9d3 2300 	ldrd	r2, r3, [r3]
 811339a:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 811339e:	64bb      	str	r3, [r7, #72]	@ 0x48
 81133a0:	2300      	movs	r3, #0
 81133a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 81133a4:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 81133a8:	460b      	mov	r3, r1
 81133aa:	4313      	orrs	r3, r2
 81133ac:	d009      	beq.n	81133c2 <HAL_RCCEx_PeriphCLKConfig+0x125a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 81133ae:	4b92      	ldr	r3, [pc, #584]	@ (81135f8 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 81133b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 81133b2:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 81133b6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81133ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 81133bc:	4a8e      	ldr	r2, [pc, #568]	@ (81135f8 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 81133be:	430b      	orrs	r3, r1
 81133c0:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 81133c2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81133c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 81133ca:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 81133ce:	643b      	str	r3, [r7, #64]	@ 0x40
 81133d0:	2300      	movs	r3, #0
 81133d2:	647b      	str	r3, [r7, #68]	@ 0x44
 81133d4:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 81133d8:	460b      	mov	r3, r1
 81133da:	4313      	orrs	r3, r2
 81133dc:	d00e      	beq.n	81133fc <HAL_RCCEx_PeriphCLKConfig+0x1294>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 81133de:	4b86      	ldr	r3, [pc, #536]	@ (81135f8 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 81133e0:	691b      	ldr	r3, [r3, #16]
 81133e2:	4a85      	ldr	r2, [pc, #532]	@ (81135f8 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 81133e4:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 81133e8:	6113      	str	r3, [r2, #16]
 81133ea:	4b83      	ldr	r3, [pc, #524]	@ (81135f8 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 81133ec:	6919      	ldr	r1, [r3, #16]
 81133ee:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81133f2:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 81133f6:	4a80      	ldr	r2, [pc, #512]	@ (81135f8 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 81133f8:	430b      	orrs	r3, r1
 81133fa:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 81133fc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8113400:	e9d3 2300 	ldrd	r2, r3, [r3]
 8113404:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8113408:	63bb      	str	r3, [r7, #56]	@ 0x38
 811340a:	2300      	movs	r3, #0
 811340c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 811340e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8113412:	460b      	mov	r3, r1
 8113414:	4313      	orrs	r3, r2
 8113416:	d009      	beq.n	811342c <HAL_RCCEx_PeriphCLKConfig+0x12c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8113418:	4b77      	ldr	r3, [pc, #476]	@ (81135f8 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 811341a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 811341c:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8113420:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8113424:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8113426:	4a74      	ldr	r2, [pc, #464]	@ (81135f8 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8113428:	430b      	orrs	r3, r1
 811342a:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 811342c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8113430:	e9d3 2300 	ldrd	r2, r3, [r3]
 8113434:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8113438:	633b      	str	r3, [r7, #48]	@ 0x30
 811343a:	2300      	movs	r3, #0
 811343c:	637b      	str	r3, [r7, #52]	@ 0x34
 811343e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8113442:	460b      	mov	r3, r1
 8113444:	4313      	orrs	r3, r2
 8113446:	d00a      	beq.n	811345e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8113448:	4b6b      	ldr	r3, [pc, #428]	@ (81135f8 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 811344a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 811344c:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8113450:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8113454:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8113458:	4a67      	ldr	r2, [pc, #412]	@ (81135f8 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 811345a:	430b      	orrs	r3, r1
 811345c:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 811345e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8113462:	e9d3 2300 	ldrd	r2, r3, [r3]
 8113466:	2100      	movs	r1, #0
 8113468:	62b9      	str	r1, [r7, #40]	@ 0x28
 811346a:	f003 0301 	and.w	r3, r3, #1
 811346e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8113470:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8113474:	460b      	mov	r3, r1
 8113476:	4313      	orrs	r3, r2
 8113478:	d011      	beq.n	811349e <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 811347a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 811347e:	3308      	adds	r3, #8
 8113480:	2100      	movs	r1, #0
 8113482:	4618      	mov	r0, r3
 8113484:	f000 fb78 	bl	8113b78 <RCCEx_PLL2_Config>
 8113488:	4603      	mov	r3, r0
 811348a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 811348e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8113492:	2b00      	cmp	r3, #0
 8113494:	d003      	beq.n	811349e <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8113496:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 811349a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 811349e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81134a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 81134a6:	2100      	movs	r1, #0
 81134a8:	6239      	str	r1, [r7, #32]
 81134aa:	f003 0302 	and.w	r3, r3, #2
 81134ae:	627b      	str	r3, [r7, #36]	@ 0x24
 81134b0:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 81134b4:	460b      	mov	r3, r1
 81134b6:	4313      	orrs	r3, r2
 81134b8:	d011      	beq.n	81134de <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 81134ba:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81134be:	3308      	adds	r3, #8
 81134c0:	2101      	movs	r1, #1
 81134c2:	4618      	mov	r0, r3
 81134c4:	f000 fb58 	bl	8113b78 <RCCEx_PLL2_Config>
 81134c8:	4603      	mov	r3, r0
 81134ca:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 81134ce:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81134d2:	2b00      	cmp	r3, #0
 81134d4:	d003      	beq.n	81134de <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 81134d6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81134da:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 81134de:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81134e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 81134e6:	2100      	movs	r1, #0
 81134e8:	61b9      	str	r1, [r7, #24]
 81134ea:	f003 0304 	and.w	r3, r3, #4
 81134ee:	61fb      	str	r3, [r7, #28]
 81134f0:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 81134f4:	460b      	mov	r3, r1
 81134f6:	4313      	orrs	r3, r2
 81134f8:	d011      	beq.n	811351e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 81134fa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81134fe:	3308      	adds	r3, #8
 8113500:	2102      	movs	r1, #2
 8113502:	4618      	mov	r0, r3
 8113504:	f000 fb38 	bl	8113b78 <RCCEx_PLL2_Config>
 8113508:	4603      	mov	r3, r0
 811350a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 811350e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8113512:	2b00      	cmp	r3, #0
 8113514:	d003      	beq.n	811351e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8113516:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 811351a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 811351e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8113522:	e9d3 2300 	ldrd	r2, r3, [r3]
 8113526:	2100      	movs	r1, #0
 8113528:	6139      	str	r1, [r7, #16]
 811352a:	f003 0308 	and.w	r3, r3, #8
 811352e:	617b      	str	r3, [r7, #20]
 8113530:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8113534:	460b      	mov	r3, r1
 8113536:	4313      	orrs	r3, r2
 8113538:	d011      	beq.n	811355e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 811353a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 811353e:	3328      	adds	r3, #40	@ 0x28
 8113540:	2100      	movs	r1, #0
 8113542:	4618      	mov	r0, r3
 8113544:	f000 fbca 	bl	8113cdc <RCCEx_PLL3_Config>
 8113548:	4603      	mov	r3, r0
 811354a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
  
    if (ret == HAL_OK)
 811354e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8113552:	2b00      	cmp	r3, #0
 8113554:	d003      	beq.n	811355e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8113556:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 811355a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 811355e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8113562:	e9d3 2300 	ldrd	r2, r3, [r3]
 8113566:	2100      	movs	r1, #0
 8113568:	60b9      	str	r1, [r7, #8]
 811356a:	f003 0310 	and.w	r3, r3, #16
 811356e:	60fb      	str	r3, [r7, #12]
 8113570:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8113574:	460b      	mov	r3, r1
 8113576:	4313      	orrs	r3, r2
 8113578:	d011      	beq.n	811359e <HAL_RCCEx_PeriphCLKConfig+0x1436>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 811357a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 811357e:	3328      	adds	r3, #40	@ 0x28
 8113580:	2101      	movs	r1, #1
 8113582:	4618      	mov	r0, r3
 8113584:	f000 fbaa 	bl	8113cdc <RCCEx_PLL3_Config>
 8113588:	4603      	mov	r3, r0
 811358a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 811358e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8113592:	2b00      	cmp	r3, #0
 8113594:	d003      	beq.n	811359e <HAL_RCCEx_PeriphCLKConfig+0x1436>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8113596:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 811359a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 811359e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81135a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 81135a6:	2100      	movs	r1, #0
 81135a8:	6039      	str	r1, [r7, #0]
 81135aa:	f003 0320 	and.w	r3, r3, #32
 81135ae:	607b      	str	r3, [r7, #4]
 81135b0:	e9d7 1200 	ldrd	r1, r2, [r7]
 81135b4:	460b      	mov	r3, r1
 81135b6:	4313      	orrs	r3, r2
 81135b8:	d011      	beq.n	81135de <HAL_RCCEx_PeriphCLKConfig+0x1476>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 81135ba:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81135be:	3328      	adds	r3, #40	@ 0x28
 81135c0:	2102      	movs	r1, #2
 81135c2:	4618      	mov	r0, r3
 81135c4:	f000 fb8a 	bl	8113cdc <RCCEx_PLL3_Config>
 81135c8:	4603      	mov	r3, r0
 81135ca:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 81135ce:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81135d2:	2b00      	cmp	r3, #0
 81135d4:	d003      	beq.n	81135de <HAL_RCCEx_PeriphCLKConfig+0x1476>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 81135d6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81135da:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    } 
  }

  if (status == HAL_OK)
 81135de:	f897 312e 	ldrb.w	r3, [r7, #302]	@ 0x12e
 81135e2:	2b00      	cmp	r3, #0
 81135e4:	d101      	bne.n	81135ea <HAL_RCCEx_PeriphCLKConfig+0x1482>
  {
    return HAL_OK;
 81135e6:	2300      	movs	r3, #0
 81135e8:	e000      	b.n	81135ec <HAL_RCCEx_PeriphCLKConfig+0x1484>
  }
  return HAL_ERROR;
 81135ea:	2301      	movs	r3, #1
}
 81135ec:	4618      	mov	r0, r3
 81135ee:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 81135f2:	46bd      	mov	sp, r7
 81135f4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 81135f8:	58024400 	.word	0x58024400

081135fc <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 81135fc:	b580      	push	{r7, lr}
 81135fe:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8113600:	f7fe fd12 	bl	8112028 <HAL_RCC_GetHCLKFreq>
 8113604:	4602      	mov	r2, r0
 8113606:	4b06      	ldr	r3, [pc, #24]	@ (8113620 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8113608:	6a1b      	ldr	r3, [r3, #32]
 811360a:	091b      	lsrs	r3, r3, #4
 811360c:	f003 0307 	and.w	r3, r3, #7
 8113610:	4904      	ldr	r1, [pc, #16]	@ (8113624 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8113612:	5ccb      	ldrb	r3, [r1, r3]
 8113614:	f003 031f 	and.w	r3, r3, #31
 8113618:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 811361c:	4618      	mov	r0, r3
 811361e:	bd80      	pop	{r7, pc}
 8113620:	58024400 	.word	0x58024400
 8113624:	0812ae04 	.word	0x0812ae04

08113628 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8113628:	b480      	push	{r7}
 811362a:	b089      	sub	sp, #36	@ 0x24
 811362c:	af00      	add	r7, sp, #0
 811362e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8113630:	4ba1      	ldr	r3, [pc, #644]	@ (81138b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8113632:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8113634:	f003 0303 	and.w	r3, r3, #3
 8113638:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 811363a:	4b9f      	ldr	r3, [pc, #636]	@ (81138b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 811363c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 811363e:	0b1b      	lsrs	r3, r3, #12
 8113640:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8113644:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8113646:	4b9c      	ldr	r3, [pc, #624]	@ (81138b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8113648:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 811364a:	091b      	lsrs	r3, r3, #4
 811364c:	f003 0301 	and.w	r3, r3, #1
 8113650:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8113652:	4b99      	ldr	r3, [pc, #612]	@ (81138b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8113654:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8113656:	08db      	lsrs	r3, r3, #3
 8113658:	f3c3 030c 	ubfx	r3, r3, #0, #13
 811365c:	693a      	ldr	r2, [r7, #16]
 811365e:	fb02 f303 	mul.w	r3, r2, r3
 8113662:	ee07 3a90 	vmov	s15, r3
 8113666:	eef8 7a67 	vcvt.f32.u32	s15, s15
 811366a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 811366e:	697b      	ldr	r3, [r7, #20]
 8113670:	2b00      	cmp	r3, #0
 8113672:	f000 8111 	beq.w	8113898 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8113676:	69bb      	ldr	r3, [r7, #24]
 8113678:	2b02      	cmp	r3, #2
 811367a:	f000 8083 	beq.w	8113784 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 811367e:	69bb      	ldr	r3, [r7, #24]
 8113680:	2b02      	cmp	r3, #2
 8113682:	f200 80a1 	bhi.w	81137c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8113686:	69bb      	ldr	r3, [r7, #24]
 8113688:	2b00      	cmp	r3, #0
 811368a:	d003      	beq.n	8113694 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 811368c:	69bb      	ldr	r3, [r7, #24]
 811368e:	2b01      	cmp	r3, #1
 8113690:	d056      	beq.n	8113740 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8113692:	e099      	b.n	81137c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8113694:	4b88      	ldr	r3, [pc, #544]	@ (81138b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8113696:	681b      	ldr	r3, [r3, #0]
 8113698:	f003 0320 	and.w	r3, r3, #32
 811369c:	2b00      	cmp	r3, #0
 811369e:	d02d      	beq.n	81136fc <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 81136a0:	4b85      	ldr	r3, [pc, #532]	@ (81138b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81136a2:	681b      	ldr	r3, [r3, #0]
 81136a4:	08db      	lsrs	r3, r3, #3
 81136a6:	f003 0303 	and.w	r3, r3, #3
 81136aa:	4a84      	ldr	r2, [pc, #528]	@ (81138bc <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 81136ac:	fa22 f303 	lsr.w	r3, r2, r3
 81136b0:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 81136b2:	68bb      	ldr	r3, [r7, #8]
 81136b4:	ee07 3a90 	vmov	s15, r3
 81136b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81136bc:	697b      	ldr	r3, [r7, #20]
 81136be:	ee07 3a90 	vmov	s15, r3
 81136c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81136c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81136ca:	4b7b      	ldr	r3, [pc, #492]	@ (81138b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81136cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 81136ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81136d2:	ee07 3a90 	vmov	s15, r3
 81136d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81136da:	ed97 6a03 	vldr	s12, [r7, #12]
 81136de:	eddf 5a78 	vldr	s11, [pc, #480]	@ 81138c0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 81136e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81136e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81136ea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81136ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81136f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 81136f6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 81136fa:	e087      	b.n	811380c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 81136fc:	697b      	ldr	r3, [r7, #20]
 81136fe:	ee07 3a90 	vmov	s15, r3
 8113702:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8113706:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 81138c4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 811370a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 811370e:	4b6a      	ldr	r3, [pc, #424]	@ (81138b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8113710:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8113712:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8113716:	ee07 3a90 	vmov	s15, r3
 811371a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 811371e:	ed97 6a03 	vldr	s12, [r7, #12]
 8113722:	eddf 5a67 	vldr	s11, [pc, #412]	@ 81138c0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8113726:	eec6 7a25 	vdiv.f32	s15, s12, s11
 811372a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 811372e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8113732:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8113736:	ee67 7a27 	vmul.f32	s15, s14, s15
 811373a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 811373e:	e065      	b.n	811380c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8113740:	697b      	ldr	r3, [r7, #20]
 8113742:	ee07 3a90 	vmov	s15, r3
 8113746:	eef8 7a67 	vcvt.f32.u32	s15, s15
 811374a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 81138c8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 811374e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8113752:	4b59      	ldr	r3, [pc, #356]	@ (81138b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8113754:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8113756:	f3c3 0308 	ubfx	r3, r3, #0, #9
 811375a:	ee07 3a90 	vmov	s15, r3
 811375e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8113762:	ed97 6a03 	vldr	s12, [r7, #12]
 8113766:	eddf 5a56 	vldr	s11, [pc, #344]	@ 81138c0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 811376a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 811376e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8113772:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8113776:	ee77 7aa6 	vadd.f32	s15, s15, s13
 811377a:	ee67 7a27 	vmul.f32	s15, s14, s15
 811377e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8113782:	e043      	b.n	811380c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8113784:	697b      	ldr	r3, [r7, #20]
 8113786:	ee07 3a90 	vmov	s15, r3
 811378a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 811378e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 81138cc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8113792:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8113796:	4b48      	ldr	r3, [pc, #288]	@ (81138b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8113798:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 811379a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 811379e:	ee07 3a90 	vmov	s15, r3
 81137a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81137a6:	ed97 6a03 	vldr	s12, [r7, #12]
 81137aa:	eddf 5a45 	vldr	s11, [pc, #276]	@ 81138c0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 81137ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81137b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81137b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81137ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81137be:	ee67 7a27 	vmul.f32	s15, s14, s15
 81137c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81137c6:	e021      	b.n	811380c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 81137c8:	697b      	ldr	r3, [r7, #20]
 81137ca:	ee07 3a90 	vmov	s15, r3
 81137ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81137d2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 81138c8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 81137d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81137da:	4b37      	ldr	r3, [pc, #220]	@ (81138b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81137dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 81137de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81137e2:	ee07 3a90 	vmov	s15, r3
 81137e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81137ea:	ed97 6a03 	vldr	s12, [r7, #12]
 81137ee:	eddf 5a34 	vldr	s11, [pc, #208]	@ 81138c0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 81137f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81137f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81137fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81137fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8113802:	ee67 7a27 	vmul.f32	s15, s14, s15
 8113806:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 811380a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 811380c:	4b2a      	ldr	r3, [pc, #168]	@ (81138b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 811380e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8113810:	0a5b      	lsrs	r3, r3, #9
 8113812:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8113816:	ee07 3a90 	vmov	s15, r3
 811381a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 811381e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8113822:	ee37 7a87 	vadd.f32	s14, s15, s14
 8113826:	edd7 6a07 	vldr	s13, [r7, #28]
 811382a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 811382e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8113832:	ee17 2a90 	vmov	r2, s15
 8113836:	687b      	ldr	r3, [r7, #4]
 8113838:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 811383a:	4b1f      	ldr	r3, [pc, #124]	@ (81138b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 811383c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 811383e:	0c1b      	lsrs	r3, r3, #16
 8113840:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8113844:	ee07 3a90 	vmov	s15, r3
 8113848:	eef8 7a67 	vcvt.f32.u32	s15, s15
 811384c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8113850:	ee37 7a87 	vadd.f32	s14, s15, s14
 8113854:	edd7 6a07 	vldr	s13, [r7, #28]
 8113858:	eec6 7a87 	vdiv.f32	s15, s13, s14
 811385c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8113860:	ee17 2a90 	vmov	r2, s15
 8113864:	687b      	ldr	r3, [r7, #4]
 8113866:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8113868:	4b13      	ldr	r3, [pc, #76]	@ (81138b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 811386a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 811386c:	0e1b      	lsrs	r3, r3, #24
 811386e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8113872:	ee07 3a90 	vmov	s15, r3
 8113876:	eef8 7a67 	vcvt.f32.u32	s15, s15
 811387a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 811387e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8113882:	edd7 6a07 	vldr	s13, [r7, #28]
 8113886:	eec6 7a87 	vdiv.f32	s15, s13, s14
 811388a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 811388e:	ee17 2a90 	vmov	r2, s15
 8113892:	687b      	ldr	r3, [r7, #4]
 8113894:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8113896:	e008      	b.n	81138aa <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8113898:	687b      	ldr	r3, [r7, #4]
 811389a:	2200      	movs	r2, #0
 811389c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 811389e:	687b      	ldr	r3, [r7, #4]
 81138a0:	2200      	movs	r2, #0
 81138a2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 81138a4:	687b      	ldr	r3, [r7, #4]
 81138a6:	2200      	movs	r2, #0
 81138a8:	609a      	str	r2, [r3, #8]
}
 81138aa:	bf00      	nop
 81138ac:	3724      	adds	r7, #36	@ 0x24
 81138ae:	46bd      	mov	sp, r7
 81138b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81138b4:	4770      	bx	lr
 81138b6:	bf00      	nop
 81138b8:	58024400 	.word	0x58024400
 81138bc:	03d09000 	.word	0x03d09000
 81138c0:	46000000 	.word	0x46000000
 81138c4:	4c742400 	.word	0x4c742400
 81138c8:	4a742400 	.word	0x4a742400
 81138cc:	4bbebc20 	.word	0x4bbebc20

081138d0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 81138d0:	b480      	push	{r7}
 81138d2:	b089      	sub	sp, #36	@ 0x24
 81138d4:	af00      	add	r7, sp, #0
 81138d6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 81138d8:	4ba1      	ldr	r3, [pc, #644]	@ (8113b60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81138da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81138dc:	f003 0303 	and.w	r3, r3, #3
 81138e0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 81138e2:	4b9f      	ldr	r3, [pc, #636]	@ (8113b60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81138e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81138e6:	0d1b      	lsrs	r3, r3, #20
 81138e8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 81138ec:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 81138ee:	4b9c      	ldr	r3, [pc, #624]	@ (8113b60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81138f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81138f2:	0a1b      	lsrs	r3, r3, #8
 81138f4:	f003 0301 	and.w	r3, r3, #1
 81138f8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 81138fa:	4b99      	ldr	r3, [pc, #612]	@ (8113b60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81138fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 81138fe:	08db      	lsrs	r3, r3, #3
 8113900:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8113904:	693a      	ldr	r2, [r7, #16]
 8113906:	fb02 f303 	mul.w	r3, r2, r3
 811390a:	ee07 3a90 	vmov	s15, r3
 811390e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8113912:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8113916:	697b      	ldr	r3, [r7, #20]
 8113918:	2b00      	cmp	r3, #0
 811391a:	f000 8111 	beq.w	8113b40 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 811391e:	69bb      	ldr	r3, [r7, #24]
 8113920:	2b02      	cmp	r3, #2
 8113922:	f000 8083 	beq.w	8113a2c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8113926:	69bb      	ldr	r3, [r7, #24]
 8113928:	2b02      	cmp	r3, #2
 811392a:	f200 80a1 	bhi.w	8113a70 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 811392e:	69bb      	ldr	r3, [r7, #24]
 8113930:	2b00      	cmp	r3, #0
 8113932:	d003      	beq.n	811393c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8113934:	69bb      	ldr	r3, [r7, #24]
 8113936:	2b01      	cmp	r3, #1
 8113938:	d056      	beq.n	81139e8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 811393a:	e099      	b.n	8113a70 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 811393c:	4b88      	ldr	r3, [pc, #544]	@ (8113b60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 811393e:	681b      	ldr	r3, [r3, #0]
 8113940:	f003 0320 	and.w	r3, r3, #32
 8113944:	2b00      	cmp	r3, #0
 8113946:	d02d      	beq.n	81139a4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8113948:	4b85      	ldr	r3, [pc, #532]	@ (8113b60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 811394a:	681b      	ldr	r3, [r3, #0]
 811394c:	08db      	lsrs	r3, r3, #3
 811394e:	f003 0303 	and.w	r3, r3, #3
 8113952:	4a84      	ldr	r2, [pc, #528]	@ (8113b64 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8113954:	fa22 f303 	lsr.w	r3, r2, r3
 8113958:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 811395a:	68bb      	ldr	r3, [r7, #8]
 811395c:	ee07 3a90 	vmov	s15, r3
 8113960:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8113964:	697b      	ldr	r3, [r7, #20]
 8113966:	ee07 3a90 	vmov	s15, r3
 811396a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 811396e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8113972:	4b7b      	ldr	r3, [pc, #492]	@ (8113b60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8113974:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8113976:	f3c3 0308 	ubfx	r3, r3, #0, #9
 811397a:	ee07 3a90 	vmov	s15, r3
 811397e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8113982:	ed97 6a03 	vldr	s12, [r7, #12]
 8113986:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8113b68 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 811398a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 811398e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8113992:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8113996:	ee77 7aa6 	vadd.f32	s15, s15, s13
 811399a:	ee67 7a27 	vmul.f32	s15, s14, s15
 811399e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 81139a2:	e087      	b.n	8113ab4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 81139a4:	697b      	ldr	r3, [r7, #20]
 81139a6:	ee07 3a90 	vmov	s15, r3
 81139aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81139ae:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8113b6c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 81139b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81139b6:	4b6a      	ldr	r3, [pc, #424]	@ (8113b60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81139b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 81139ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81139be:	ee07 3a90 	vmov	s15, r3
 81139c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81139c6:	ed97 6a03 	vldr	s12, [r7, #12]
 81139ca:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8113b68 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 81139ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81139d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81139d6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81139da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81139de:	ee67 7a27 	vmul.f32	s15, s14, s15
 81139e2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81139e6:	e065      	b.n	8113ab4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 81139e8:	697b      	ldr	r3, [r7, #20]
 81139ea:	ee07 3a90 	vmov	s15, r3
 81139ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81139f2:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8113b70 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 81139f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81139fa:	4b59      	ldr	r3, [pc, #356]	@ (8113b60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81139fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 81139fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8113a02:	ee07 3a90 	vmov	s15, r3
 8113a06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8113a0a:	ed97 6a03 	vldr	s12, [r7, #12]
 8113a0e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8113b68 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8113a12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8113a16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8113a1a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8113a1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8113a22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8113a26:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8113a2a:	e043      	b.n	8113ab4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8113a2c:	697b      	ldr	r3, [r7, #20]
 8113a2e:	ee07 3a90 	vmov	s15, r3
 8113a32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8113a36:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8113b74 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8113a3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8113a3e:	4b48      	ldr	r3, [pc, #288]	@ (8113b60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8113a40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8113a42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8113a46:	ee07 3a90 	vmov	s15, r3
 8113a4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8113a4e:	ed97 6a03 	vldr	s12, [r7, #12]
 8113a52:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8113b68 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8113a56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8113a5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8113a5e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8113a62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8113a66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8113a6a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8113a6e:	e021      	b.n	8113ab4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8113a70:	697b      	ldr	r3, [r7, #20]
 8113a72:	ee07 3a90 	vmov	s15, r3
 8113a76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8113a7a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8113b70 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8113a7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8113a82:	4b37      	ldr	r3, [pc, #220]	@ (8113b60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8113a84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8113a86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8113a8a:	ee07 3a90 	vmov	s15, r3
 8113a8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8113a92:	ed97 6a03 	vldr	s12, [r7, #12]
 8113a96:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8113b68 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8113a9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8113a9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8113aa2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8113aa6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8113aaa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8113aae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8113ab2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8113ab4:	4b2a      	ldr	r3, [pc, #168]	@ (8113b60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8113ab6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8113ab8:	0a5b      	lsrs	r3, r3, #9
 8113aba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8113abe:	ee07 3a90 	vmov	s15, r3
 8113ac2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8113ac6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8113aca:	ee37 7a87 	vadd.f32	s14, s15, s14
 8113ace:	edd7 6a07 	vldr	s13, [r7, #28]
 8113ad2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8113ad6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8113ada:	ee17 2a90 	vmov	r2, s15
 8113ade:	687b      	ldr	r3, [r7, #4]
 8113ae0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8113ae2:	4b1f      	ldr	r3, [pc, #124]	@ (8113b60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8113ae4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8113ae6:	0c1b      	lsrs	r3, r3, #16
 8113ae8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8113aec:	ee07 3a90 	vmov	s15, r3
 8113af0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8113af4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8113af8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8113afc:	edd7 6a07 	vldr	s13, [r7, #28]
 8113b00:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8113b04:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8113b08:	ee17 2a90 	vmov	r2, s15
 8113b0c:	687b      	ldr	r3, [r7, #4]
 8113b0e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8113b10:	4b13      	ldr	r3, [pc, #76]	@ (8113b60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8113b12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8113b14:	0e1b      	lsrs	r3, r3, #24
 8113b16:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8113b1a:	ee07 3a90 	vmov	s15, r3
 8113b1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8113b22:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8113b26:	ee37 7a87 	vadd.f32	s14, s15, s14
 8113b2a:	edd7 6a07 	vldr	s13, [r7, #28]
 8113b2e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8113b32:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8113b36:	ee17 2a90 	vmov	r2, s15
 8113b3a:	687b      	ldr	r3, [r7, #4]
 8113b3c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8113b3e:	e008      	b.n	8113b52 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8113b40:	687b      	ldr	r3, [r7, #4]
 8113b42:	2200      	movs	r2, #0
 8113b44:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8113b46:	687b      	ldr	r3, [r7, #4]
 8113b48:	2200      	movs	r2, #0
 8113b4a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8113b4c:	687b      	ldr	r3, [r7, #4]
 8113b4e:	2200      	movs	r2, #0
 8113b50:	609a      	str	r2, [r3, #8]
}
 8113b52:	bf00      	nop
 8113b54:	3724      	adds	r7, #36	@ 0x24
 8113b56:	46bd      	mov	sp, r7
 8113b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8113b5c:	4770      	bx	lr
 8113b5e:	bf00      	nop
 8113b60:	58024400 	.word	0x58024400
 8113b64:	03d09000 	.word	0x03d09000
 8113b68:	46000000 	.word	0x46000000
 8113b6c:	4c742400 	.word	0x4c742400
 8113b70:	4a742400 	.word	0x4a742400
 8113b74:	4bbebc20 	.word	0x4bbebc20

08113b78 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8113b78:	b580      	push	{r7, lr}
 8113b7a:	b084      	sub	sp, #16
 8113b7c:	af00      	add	r7, sp, #0
 8113b7e:	6078      	str	r0, [r7, #4]
 8113b80:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8113b82:	2300      	movs	r3, #0
 8113b84:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8113b86:	4b54      	ldr	r3, [pc, #336]	@ (8113cd8 <RCCEx_PLL2_Config+0x160>)
 8113b88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8113b8a:	f003 0303 	and.w	r3, r3, #3
 8113b8e:	2b03      	cmp	r3, #3
 8113b90:	d101      	bne.n	8113b96 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8113b92:	2301      	movs	r3, #1
 8113b94:	e09b      	b.n	8113cce <RCCEx_PLL2_Config+0x156>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8113b96:	4b50      	ldr	r3, [pc, #320]	@ (8113cd8 <RCCEx_PLL2_Config+0x160>)
 8113b98:	681b      	ldr	r3, [r3, #0]
 8113b9a:	4a4f      	ldr	r2, [pc, #316]	@ (8113cd8 <RCCEx_PLL2_Config+0x160>)
 8113b9c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8113ba0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8113ba2:	f7fb f999 	bl	810eed8 <HAL_GetTick>
 8113ba6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8113ba8:	e008      	b.n	8113bbc <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8113baa:	f7fb f995 	bl	810eed8 <HAL_GetTick>
 8113bae:	4602      	mov	r2, r0
 8113bb0:	68bb      	ldr	r3, [r7, #8]
 8113bb2:	1ad3      	subs	r3, r2, r3
 8113bb4:	2b02      	cmp	r3, #2
 8113bb6:	d901      	bls.n	8113bbc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8113bb8:	2303      	movs	r3, #3
 8113bba:	e088      	b.n	8113cce <RCCEx_PLL2_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8113bbc:	4b46      	ldr	r3, [pc, #280]	@ (8113cd8 <RCCEx_PLL2_Config+0x160>)
 8113bbe:	681b      	ldr	r3, [r3, #0]
 8113bc0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8113bc4:	2b00      	cmp	r3, #0
 8113bc6:	d1f0      	bne.n	8113baa <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8113bc8:	4b43      	ldr	r3, [pc, #268]	@ (8113cd8 <RCCEx_PLL2_Config+0x160>)
 8113bca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8113bcc:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8113bd0:	687b      	ldr	r3, [r7, #4]
 8113bd2:	681b      	ldr	r3, [r3, #0]
 8113bd4:	031b      	lsls	r3, r3, #12
 8113bd6:	4940      	ldr	r1, [pc, #256]	@ (8113cd8 <RCCEx_PLL2_Config+0x160>)
 8113bd8:	4313      	orrs	r3, r2
 8113bda:	628b      	str	r3, [r1, #40]	@ 0x28
 8113bdc:	687b      	ldr	r3, [r7, #4]
 8113bde:	685b      	ldr	r3, [r3, #4]
 8113be0:	3b01      	subs	r3, #1
 8113be2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8113be6:	687b      	ldr	r3, [r7, #4]
 8113be8:	689b      	ldr	r3, [r3, #8]
 8113bea:	3b01      	subs	r3, #1
 8113bec:	025b      	lsls	r3, r3, #9
 8113bee:	b29b      	uxth	r3, r3
 8113bf0:	431a      	orrs	r2, r3
 8113bf2:	687b      	ldr	r3, [r7, #4]
 8113bf4:	68db      	ldr	r3, [r3, #12]
 8113bf6:	3b01      	subs	r3, #1
 8113bf8:	041b      	lsls	r3, r3, #16
 8113bfa:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8113bfe:	431a      	orrs	r2, r3
 8113c00:	687b      	ldr	r3, [r7, #4]
 8113c02:	691b      	ldr	r3, [r3, #16]
 8113c04:	3b01      	subs	r3, #1
 8113c06:	061b      	lsls	r3, r3, #24
 8113c08:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8113c0c:	4932      	ldr	r1, [pc, #200]	@ (8113cd8 <RCCEx_PLL2_Config+0x160>)
 8113c0e:	4313      	orrs	r3, r2
 8113c10:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8113c12:	4b31      	ldr	r3, [pc, #196]	@ (8113cd8 <RCCEx_PLL2_Config+0x160>)
 8113c14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8113c16:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8113c1a:	687b      	ldr	r3, [r7, #4]
 8113c1c:	695b      	ldr	r3, [r3, #20]
 8113c1e:	492e      	ldr	r1, [pc, #184]	@ (8113cd8 <RCCEx_PLL2_Config+0x160>)
 8113c20:	4313      	orrs	r3, r2
 8113c22:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8113c24:	4b2c      	ldr	r3, [pc, #176]	@ (8113cd8 <RCCEx_PLL2_Config+0x160>)
 8113c26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8113c28:	f023 0220 	bic.w	r2, r3, #32
 8113c2c:	687b      	ldr	r3, [r7, #4]
 8113c2e:	699b      	ldr	r3, [r3, #24]
 8113c30:	4929      	ldr	r1, [pc, #164]	@ (8113cd8 <RCCEx_PLL2_Config+0x160>)
 8113c32:	4313      	orrs	r3, r2
 8113c34:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8113c36:	4b28      	ldr	r3, [pc, #160]	@ (8113cd8 <RCCEx_PLL2_Config+0x160>)
 8113c38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8113c3a:	4a27      	ldr	r2, [pc, #156]	@ (8113cd8 <RCCEx_PLL2_Config+0x160>)
 8113c3c:	f023 0310 	bic.w	r3, r3, #16
 8113c40:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8113c42:	4b25      	ldr	r3, [pc, #148]	@ (8113cd8 <RCCEx_PLL2_Config+0x160>)
 8113c44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8113c46:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8113c4a:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8113c4e:	687a      	ldr	r2, [r7, #4]
 8113c50:	69d2      	ldr	r2, [r2, #28]
 8113c52:	00d2      	lsls	r2, r2, #3
 8113c54:	4920      	ldr	r1, [pc, #128]	@ (8113cd8 <RCCEx_PLL2_Config+0x160>)
 8113c56:	4313      	orrs	r3, r2
 8113c58:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8113c5a:	4b1f      	ldr	r3, [pc, #124]	@ (8113cd8 <RCCEx_PLL2_Config+0x160>)
 8113c5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8113c5e:	4a1e      	ldr	r2, [pc, #120]	@ (8113cd8 <RCCEx_PLL2_Config+0x160>)
 8113c60:	f043 0310 	orr.w	r3, r3, #16
 8113c64:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8113c66:	683b      	ldr	r3, [r7, #0]
 8113c68:	2b00      	cmp	r3, #0
 8113c6a:	d106      	bne.n	8113c7a <RCCEx_PLL2_Config+0x102>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8113c6c:	4b1a      	ldr	r3, [pc, #104]	@ (8113cd8 <RCCEx_PLL2_Config+0x160>)
 8113c6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8113c70:	4a19      	ldr	r2, [pc, #100]	@ (8113cd8 <RCCEx_PLL2_Config+0x160>)
 8113c72:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8113c76:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8113c78:	e00f      	b.n	8113c9a <RCCEx_PLL2_Config+0x122>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8113c7a:	683b      	ldr	r3, [r7, #0]
 8113c7c:	2b01      	cmp	r3, #1
 8113c7e:	d106      	bne.n	8113c8e <RCCEx_PLL2_Config+0x116>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8113c80:	4b15      	ldr	r3, [pc, #84]	@ (8113cd8 <RCCEx_PLL2_Config+0x160>)
 8113c82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8113c84:	4a14      	ldr	r2, [pc, #80]	@ (8113cd8 <RCCEx_PLL2_Config+0x160>)
 8113c86:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8113c8a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8113c8c:	e005      	b.n	8113c9a <RCCEx_PLL2_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8113c8e:	4b12      	ldr	r3, [pc, #72]	@ (8113cd8 <RCCEx_PLL2_Config+0x160>)
 8113c90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8113c92:	4a11      	ldr	r2, [pc, #68]	@ (8113cd8 <RCCEx_PLL2_Config+0x160>)
 8113c94:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8113c98:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8113c9a:	4b0f      	ldr	r3, [pc, #60]	@ (8113cd8 <RCCEx_PLL2_Config+0x160>)
 8113c9c:	681b      	ldr	r3, [r3, #0]
 8113c9e:	4a0e      	ldr	r2, [pc, #56]	@ (8113cd8 <RCCEx_PLL2_Config+0x160>)
 8113ca0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8113ca4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8113ca6:	f7fb f917 	bl	810eed8 <HAL_GetTick>
 8113caa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8113cac:	e008      	b.n	8113cc0 <RCCEx_PLL2_Config+0x148>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8113cae:	f7fb f913 	bl	810eed8 <HAL_GetTick>
 8113cb2:	4602      	mov	r2, r0
 8113cb4:	68bb      	ldr	r3, [r7, #8]
 8113cb6:	1ad3      	subs	r3, r2, r3
 8113cb8:	2b02      	cmp	r3, #2
 8113cba:	d901      	bls.n	8113cc0 <RCCEx_PLL2_Config+0x148>
      {
        return HAL_TIMEOUT;
 8113cbc:	2303      	movs	r3, #3
 8113cbe:	e006      	b.n	8113cce <RCCEx_PLL2_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8113cc0:	4b05      	ldr	r3, [pc, #20]	@ (8113cd8 <RCCEx_PLL2_Config+0x160>)
 8113cc2:	681b      	ldr	r3, [r3, #0]
 8113cc4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8113cc8:	2b00      	cmp	r3, #0
 8113cca:	d0f0      	beq.n	8113cae <RCCEx_PLL2_Config+0x136>
    }

  }


  return status;
 8113ccc:	7bfb      	ldrb	r3, [r7, #15]
}
 8113cce:	4618      	mov	r0, r3
 8113cd0:	3710      	adds	r7, #16
 8113cd2:	46bd      	mov	sp, r7
 8113cd4:	bd80      	pop	{r7, pc}
 8113cd6:	bf00      	nop
 8113cd8:	58024400 	.word	0x58024400

08113cdc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8113cdc:	b580      	push	{r7, lr}
 8113cde:	b084      	sub	sp, #16
 8113ce0:	af00      	add	r7, sp, #0
 8113ce2:	6078      	str	r0, [r7, #4]
 8113ce4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8113ce6:	2300      	movs	r3, #0
 8113ce8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8113cea:	4b54      	ldr	r3, [pc, #336]	@ (8113e3c <RCCEx_PLL3_Config+0x160>)
 8113cec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8113cee:	f003 0303 	and.w	r3, r3, #3
 8113cf2:	2b03      	cmp	r3, #3
 8113cf4:	d101      	bne.n	8113cfa <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8113cf6:	2301      	movs	r3, #1
 8113cf8:	e09b      	b.n	8113e32 <RCCEx_PLL3_Config+0x156>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8113cfa:	4b50      	ldr	r3, [pc, #320]	@ (8113e3c <RCCEx_PLL3_Config+0x160>)
 8113cfc:	681b      	ldr	r3, [r3, #0]
 8113cfe:	4a4f      	ldr	r2, [pc, #316]	@ (8113e3c <RCCEx_PLL3_Config+0x160>)
 8113d00:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8113d04:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8113d06:	f7fb f8e7 	bl	810eed8 <HAL_GetTick>
 8113d0a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8113d0c:	e008      	b.n	8113d20 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8113d0e:	f7fb f8e3 	bl	810eed8 <HAL_GetTick>
 8113d12:	4602      	mov	r2, r0
 8113d14:	68bb      	ldr	r3, [r7, #8]
 8113d16:	1ad3      	subs	r3, r2, r3
 8113d18:	2b02      	cmp	r3, #2
 8113d1a:	d901      	bls.n	8113d20 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8113d1c:	2303      	movs	r3, #3
 8113d1e:	e088      	b.n	8113e32 <RCCEx_PLL3_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8113d20:	4b46      	ldr	r3, [pc, #280]	@ (8113e3c <RCCEx_PLL3_Config+0x160>)
 8113d22:	681b      	ldr	r3, [r3, #0]
 8113d24:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8113d28:	2b00      	cmp	r3, #0
 8113d2a:	d1f0      	bne.n	8113d0e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8113d2c:	4b43      	ldr	r3, [pc, #268]	@ (8113e3c <RCCEx_PLL3_Config+0x160>)
 8113d2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8113d30:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8113d34:	687b      	ldr	r3, [r7, #4]
 8113d36:	681b      	ldr	r3, [r3, #0]
 8113d38:	051b      	lsls	r3, r3, #20
 8113d3a:	4940      	ldr	r1, [pc, #256]	@ (8113e3c <RCCEx_PLL3_Config+0x160>)
 8113d3c:	4313      	orrs	r3, r2
 8113d3e:	628b      	str	r3, [r1, #40]	@ 0x28
 8113d40:	687b      	ldr	r3, [r7, #4]
 8113d42:	685b      	ldr	r3, [r3, #4]
 8113d44:	3b01      	subs	r3, #1
 8113d46:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8113d4a:	687b      	ldr	r3, [r7, #4]
 8113d4c:	689b      	ldr	r3, [r3, #8]
 8113d4e:	3b01      	subs	r3, #1
 8113d50:	025b      	lsls	r3, r3, #9
 8113d52:	b29b      	uxth	r3, r3
 8113d54:	431a      	orrs	r2, r3
 8113d56:	687b      	ldr	r3, [r7, #4]
 8113d58:	68db      	ldr	r3, [r3, #12]
 8113d5a:	3b01      	subs	r3, #1
 8113d5c:	041b      	lsls	r3, r3, #16
 8113d5e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8113d62:	431a      	orrs	r2, r3
 8113d64:	687b      	ldr	r3, [r7, #4]
 8113d66:	691b      	ldr	r3, [r3, #16]
 8113d68:	3b01      	subs	r3, #1
 8113d6a:	061b      	lsls	r3, r3, #24
 8113d6c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8113d70:	4932      	ldr	r1, [pc, #200]	@ (8113e3c <RCCEx_PLL3_Config+0x160>)
 8113d72:	4313      	orrs	r3, r2
 8113d74:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8113d76:	4b31      	ldr	r3, [pc, #196]	@ (8113e3c <RCCEx_PLL3_Config+0x160>)
 8113d78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8113d7a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8113d7e:	687b      	ldr	r3, [r7, #4]
 8113d80:	695b      	ldr	r3, [r3, #20]
 8113d82:	492e      	ldr	r1, [pc, #184]	@ (8113e3c <RCCEx_PLL3_Config+0x160>)
 8113d84:	4313      	orrs	r3, r2
 8113d86:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8113d88:	4b2c      	ldr	r3, [pc, #176]	@ (8113e3c <RCCEx_PLL3_Config+0x160>)
 8113d8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8113d8c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8113d90:	687b      	ldr	r3, [r7, #4]
 8113d92:	699b      	ldr	r3, [r3, #24]
 8113d94:	4929      	ldr	r1, [pc, #164]	@ (8113e3c <RCCEx_PLL3_Config+0x160>)
 8113d96:	4313      	orrs	r3, r2
 8113d98:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8113d9a:	4b28      	ldr	r3, [pc, #160]	@ (8113e3c <RCCEx_PLL3_Config+0x160>)
 8113d9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8113d9e:	4a27      	ldr	r2, [pc, #156]	@ (8113e3c <RCCEx_PLL3_Config+0x160>)
 8113da0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8113da4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8113da6:	4b25      	ldr	r3, [pc, #148]	@ (8113e3c <RCCEx_PLL3_Config+0x160>)
 8113da8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8113daa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8113dae:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8113db2:	687a      	ldr	r2, [r7, #4]
 8113db4:	69d2      	ldr	r2, [r2, #28]
 8113db6:	00d2      	lsls	r2, r2, #3
 8113db8:	4920      	ldr	r1, [pc, #128]	@ (8113e3c <RCCEx_PLL3_Config+0x160>)
 8113dba:	4313      	orrs	r3, r2
 8113dbc:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8113dbe:	4b1f      	ldr	r3, [pc, #124]	@ (8113e3c <RCCEx_PLL3_Config+0x160>)
 8113dc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8113dc2:	4a1e      	ldr	r2, [pc, #120]	@ (8113e3c <RCCEx_PLL3_Config+0x160>)
 8113dc4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8113dc8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8113dca:	683b      	ldr	r3, [r7, #0]
 8113dcc:	2b00      	cmp	r3, #0
 8113dce:	d106      	bne.n	8113dde <RCCEx_PLL3_Config+0x102>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8113dd0:	4b1a      	ldr	r3, [pc, #104]	@ (8113e3c <RCCEx_PLL3_Config+0x160>)
 8113dd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8113dd4:	4a19      	ldr	r2, [pc, #100]	@ (8113e3c <RCCEx_PLL3_Config+0x160>)
 8113dd6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8113dda:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8113ddc:	e00f      	b.n	8113dfe <RCCEx_PLL3_Config+0x122>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8113dde:	683b      	ldr	r3, [r7, #0]
 8113de0:	2b01      	cmp	r3, #1
 8113de2:	d106      	bne.n	8113df2 <RCCEx_PLL3_Config+0x116>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8113de4:	4b15      	ldr	r3, [pc, #84]	@ (8113e3c <RCCEx_PLL3_Config+0x160>)
 8113de6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8113de8:	4a14      	ldr	r2, [pc, #80]	@ (8113e3c <RCCEx_PLL3_Config+0x160>)
 8113dea:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8113dee:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8113df0:	e005      	b.n	8113dfe <RCCEx_PLL3_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8113df2:	4b12      	ldr	r3, [pc, #72]	@ (8113e3c <RCCEx_PLL3_Config+0x160>)
 8113df4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8113df6:	4a11      	ldr	r2, [pc, #68]	@ (8113e3c <RCCEx_PLL3_Config+0x160>)
 8113df8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8113dfc:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8113dfe:	4b0f      	ldr	r3, [pc, #60]	@ (8113e3c <RCCEx_PLL3_Config+0x160>)
 8113e00:	681b      	ldr	r3, [r3, #0]
 8113e02:	4a0e      	ldr	r2, [pc, #56]	@ (8113e3c <RCCEx_PLL3_Config+0x160>)
 8113e04:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8113e08:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8113e0a:	f7fb f865 	bl	810eed8 <HAL_GetTick>
 8113e0e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8113e10:	e008      	b.n	8113e24 <RCCEx_PLL3_Config+0x148>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8113e12:	f7fb f861 	bl	810eed8 <HAL_GetTick>
 8113e16:	4602      	mov	r2, r0
 8113e18:	68bb      	ldr	r3, [r7, #8]
 8113e1a:	1ad3      	subs	r3, r2, r3
 8113e1c:	2b02      	cmp	r3, #2
 8113e1e:	d901      	bls.n	8113e24 <RCCEx_PLL3_Config+0x148>
      {
        return HAL_TIMEOUT;
 8113e20:	2303      	movs	r3, #3
 8113e22:	e006      	b.n	8113e32 <RCCEx_PLL3_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8113e24:	4b05      	ldr	r3, [pc, #20]	@ (8113e3c <RCCEx_PLL3_Config+0x160>)
 8113e26:	681b      	ldr	r3, [r3, #0]
 8113e28:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8113e2c:	2b00      	cmp	r3, #0
 8113e2e:	d0f0      	beq.n	8113e12 <RCCEx_PLL3_Config+0x136>
    }

  }


  return status;
 8113e30:	7bfb      	ldrb	r3, [r7, #15]
}
 8113e32:	4618      	mov	r0, r3
 8113e34:	3710      	adds	r7, #16
 8113e36:	46bd      	mov	sp, r7
 8113e38:	bd80      	pop	{r7, pc}
 8113e3a:	bf00      	nop
 8113e3c:	58024400 	.word	0x58024400

08113e40 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8113e40:	b580      	push	{r7, lr}
 8113e42:	b082      	sub	sp, #8
 8113e44:	af00      	add	r7, sp, #0
 8113e46:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8113e48:	687b      	ldr	r3, [r7, #4]
 8113e4a:	2b00      	cmp	r3, #0
 8113e4c:	d101      	bne.n	8113e52 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8113e4e:	2301      	movs	r3, #1
 8113e50:	e049      	b.n	8113ee6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8113e52:	687b      	ldr	r3, [r7, #4]
 8113e54:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8113e58:	b2db      	uxtb	r3, r3
 8113e5a:	2b00      	cmp	r3, #0
 8113e5c:	d106      	bne.n	8113e6c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8113e5e:	687b      	ldr	r3, [r7, #4]
 8113e60:	2200      	movs	r2, #0
 8113e62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8113e66:	6878      	ldr	r0, [r7, #4]
 8113e68:	f000 f841 	bl	8113eee <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8113e6c:	687b      	ldr	r3, [r7, #4]
 8113e6e:	2202      	movs	r2, #2
 8113e70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8113e74:	687b      	ldr	r3, [r7, #4]
 8113e76:	681a      	ldr	r2, [r3, #0]
 8113e78:	687b      	ldr	r3, [r7, #4]
 8113e7a:	3304      	adds	r3, #4
 8113e7c:	4619      	mov	r1, r3
 8113e7e:	4610      	mov	r0, r2
 8113e80:	f000 f9e8 	bl	8114254 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8113e84:	687b      	ldr	r3, [r7, #4]
 8113e86:	2201      	movs	r2, #1
 8113e88:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8113e8c:	687b      	ldr	r3, [r7, #4]
 8113e8e:	2201      	movs	r2, #1
 8113e90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8113e94:	687b      	ldr	r3, [r7, #4]
 8113e96:	2201      	movs	r2, #1
 8113e98:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8113e9c:	687b      	ldr	r3, [r7, #4]
 8113e9e:	2201      	movs	r2, #1
 8113ea0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8113ea4:	687b      	ldr	r3, [r7, #4]
 8113ea6:	2201      	movs	r2, #1
 8113ea8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8113eac:	687b      	ldr	r3, [r7, #4]
 8113eae:	2201      	movs	r2, #1
 8113eb0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8113eb4:	687b      	ldr	r3, [r7, #4]
 8113eb6:	2201      	movs	r2, #1
 8113eb8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8113ebc:	687b      	ldr	r3, [r7, #4]
 8113ebe:	2201      	movs	r2, #1
 8113ec0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8113ec4:	687b      	ldr	r3, [r7, #4]
 8113ec6:	2201      	movs	r2, #1
 8113ec8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8113ecc:	687b      	ldr	r3, [r7, #4]
 8113ece:	2201      	movs	r2, #1
 8113ed0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8113ed4:	687b      	ldr	r3, [r7, #4]
 8113ed6:	2201      	movs	r2, #1
 8113ed8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8113edc:	687b      	ldr	r3, [r7, #4]
 8113ede:	2201      	movs	r2, #1
 8113ee0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8113ee4:	2300      	movs	r3, #0
}
 8113ee6:	4618      	mov	r0, r3
 8113ee8:	3708      	adds	r7, #8
 8113eea:	46bd      	mov	sp, r7
 8113eec:	bd80      	pop	{r7, pc}

08113eee <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8113eee:	b480      	push	{r7}
 8113ef0:	b083      	sub	sp, #12
 8113ef2:	af00      	add	r7, sp, #0
 8113ef4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8113ef6:	bf00      	nop
 8113ef8:	370c      	adds	r7, #12
 8113efa:	46bd      	mov	sp, r7
 8113efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8113f00:	4770      	bx	lr
	...

08113f04 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8113f04:	b480      	push	{r7}
 8113f06:	b085      	sub	sp, #20
 8113f08:	af00      	add	r7, sp, #0
 8113f0a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8113f0c:	687b      	ldr	r3, [r7, #4]
 8113f0e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8113f12:	b2db      	uxtb	r3, r3
 8113f14:	2b01      	cmp	r3, #1
 8113f16:	d001      	beq.n	8113f1c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8113f18:	2301      	movs	r3, #1
 8113f1a:	e054      	b.n	8113fc6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8113f1c:	687b      	ldr	r3, [r7, #4]
 8113f1e:	2202      	movs	r2, #2
 8113f20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8113f24:	687b      	ldr	r3, [r7, #4]
 8113f26:	681b      	ldr	r3, [r3, #0]
 8113f28:	68da      	ldr	r2, [r3, #12]
 8113f2a:	687b      	ldr	r3, [r7, #4]
 8113f2c:	681b      	ldr	r3, [r3, #0]
 8113f2e:	f042 0201 	orr.w	r2, r2, #1
 8113f32:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8113f34:	687b      	ldr	r3, [r7, #4]
 8113f36:	681b      	ldr	r3, [r3, #0]
 8113f38:	4a26      	ldr	r2, [pc, #152]	@ (8113fd4 <HAL_TIM_Base_Start_IT+0xd0>)
 8113f3a:	4293      	cmp	r3, r2
 8113f3c:	d022      	beq.n	8113f84 <HAL_TIM_Base_Start_IT+0x80>
 8113f3e:	687b      	ldr	r3, [r7, #4]
 8113f40:	681b      	ldr	r3, [r3, #0]
 8113f42:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8113f46:	d01d      	beq.n	8113f84 <HAL_TIM_Base_Start_IT+0x80>
 8113f48:	687b      	ldr	r3, [r7, #4]
 8113f4a:	681b      	ldr	r3, [r3, #0]
 8113f4c:	4a22      	ldr	r2, [pc, #136]	@ (8113fd8 <HAL_TIM_Base_Start_IT+0xd4>)
 8113f4e:	4293      	cmp	r3, r2
 8113f50:	d018      	beq.n	8113f84 <HAL_TIM_Base_Start_IT+0x80>
 8113f52:	687b      	ldr	r3, [r7, #4]
 8113f54:	681b      	ldr	r3, [r3, #0]
 8113f56:	4a21      	ldr	r2, [pc, #132]	@ (8113fdc <HAL_TIM_Base_Start_IT+0xd8>)
 8113f58:	4293      	cmp	r3, r2
 8113f5a:	d013      	beq.n	8113f84 <HAL_TIM_Base_Start_IT+0x80>
 8113f5c:	687b      	ldr	r3, [r7, #4]
 8113f5e:	681b      	ldr	r3, [r3, #0]
 8113f60:	4a1f      	ldr	r2, [pc, #124]	@ (8113fe0 <HAL_TIM_Base_Start_IT+0xdc>)
 8113f62:	4293      	cmp	r3, r2
 8113f64:	d00e      	beq.n	8113f84 <HAL_TIM_Base_Start_IT+0x80>
 8113f66:	687b      	ldr	r3, [r7, #4]
 8113f68:	681b      	ldr	r3, [r3, #0]
 8113f6a:	4a1e      	ldr	r2, [pc, #120]	@ (8113fe4 <HAL_TIM_Base_Start_IT+0xe0>)
 8113f6c:	4293      	cmp	r3, r2
 8113f6e:	d009      	beq.n	8113f84 <HAL_TIM_Base_Start_IT+0x80>
 8113f70:	687b      	ldr	r3, [r7, #4]
 8113f72:	681b      	ldr	r3, [r3, #0]
 8113f74:	4a1c      	ldr	r2, [pc, #112]	@ (8113fe8 <HAL_TIM_Base_Start_IT+0xe4>)
 8113f76:	4293      	cmp	r3, r2
 8113f78:	d004      	beq.n	8113f84 <HAL_TIM_Base_Start_IT+0x80>
 8113f7a:	687b      	ldr	r3, [r7, #4]
 8113f7c:	681b      	ldr	r3, [r3, #0]
 8113f7e:	4a1b      	ldr	r2, [pc, #108]	@ (8113fec <HAL_TIM_Base_Start_IT+0xe8>)
 8113f80:	4293      	cmp	r3, r2
 8113f82:	d115      	bne.n	8113fb0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8113f84:	687b      	ldr	r3, [r7, #4]
 8113f86:	681b      	ldr	r3, [r3, #0]
 8113f88:	689a      	ldr	r2, [r3, #8]
 8113f8a:	4b19      	ldr	r3, [pc, #100]	@ (8113ff0 <HAL_TIM_Base_Start_IT+0xec>)
 8113f8c:	4013      	ands	r3, r2
 8113f8e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8113f90:	68fb      	ldr	r3, [r7, #12]
 8113f92:	2b06      	cmp	r3, #6
 8113f94:	d015      	beq.n	8113fc2 <HAL_TIM_Base_Start_IT+0xbe>
 8113f96:	68fb      	ldr	r3, [r7, #12]
 8113f98:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8113f9c:	d011      	beq.n	8113fc2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8113f9e:	687b      	ldr	r3, [r7, #4]
 8113fa0:	681b      	ldr	r3, [r3, #0]
 8113fa2:	681a      	ldr	r2, [r3, #0]
 8113fa4:	687b      	ldr	r3, [r7, #4]
 8113fa6:	681b      	ldr	r3, [r3, #0]
 8113fa8:	f042 0201 	orr.w	r2, r2, #1
 8113fac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8113fae:	e008      	b.n	8113fc2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8113fb0:	687b      	ldr	r3, [r7, #4]
 8113fb2:	681b      	ldr	r3, [r3, #0]
 8113fb4:	681a      	ldr	r2, [r3, #0]
 8113fb6:	687b      	ldr	r3, [r7, #4]
 8113fb8:	681b      	ldr	r3, [r3, #0]
 8113fba:	f042 0201 	orr.w	r2, r2, #1
 8113fbe:	601a      	str	r2, [r3, #0]
 8113fc0:	e000      	b.n	8113fc4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8113fc2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8113fc4:	2300      	movs	r3, #0
}
 8113fc6:	4618      	mov	r0, r3
 8113fc8:	3714      	adds	r7, #20
 8113fca:	46bd      	mov	sp, r7
 8113fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8113fd0:	4770      	bx	lr
 8113fd2:	bf00      	nop
 8113fd4:	40010000 	.word	0x40010000
 8113fd8:	40000400 	.word	0x40000400
 8113fdc:	40000800 	.word	0x40000800
 8113fe0:	40000c00 	.word	0x40000c00
 8113fe4:	40010400 	.word	0x40010400
 8113fe8:	40001800 	.word	0x40001800
 8113fec:	40014000 	.word	0x40014000
 8113ff0:	00010007 	.word	0x00010007

08113ff4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8113ff4:	b580      	push	{r7, lr}
 8113ff6:	b084      	sub	sp, #16
 8113ff8:	af00      	add	r7, sp, #0
 8113ffa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8113ffc:	687b      	ldr	r3, [r7, #4]
 8113ffe:	681b      	ldr	r3, [r3, #0]
 8114000:	68db      	ldr	r3, [r3, #12]
 8114002:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8114004:	687b      	ldr	r3, [r7, #4]
 8114006:	681b      	ldr	r3, [r3, #0]
 8114008:	691b      	ldr	r3, [r3, #16]
 811400a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 811400c:	68bb      	ldr	r3, [r7, #8]
 811400e:	f003 0302 	and.w	r3, r3, #2
 8114012:	2b00      	cmp	r3, #0
 8114014:	d020      	beq.n	8114058 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8114016:	68fb      	ldr	r3, [r7, #12]
 8114018:	f003 0302 	and.w	r3, r3, #2
 811401c:	2b00      	cmp	r3, #0
 811401e:	d01b      	beq.n	8114058 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8114020:	687b      	ldr	r3, [r7, #4]
 8114022:	681b      	ldr	r3, [r3, #0]
 8114024:	f06f 0202 	mvn.w	r2, #2
 8114028:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 811402a:	687b      	ldr	r3, [r7, #4]
 811402c:	2201      	movs	r2, #1
 811402e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8114030:	687b      	ldr	r3, [r7, #4]
 8114032:	681b      	ldr	r3, [r3, #0]
 8114034:	699b      	ldr	r3, [r3, #24]
 8114036:	f003 0303 	and.w	r3, r3, #3
 811403a:	2b00      	cmp	r3, #0
 811403c:	d003      	beq.n	8114046 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 811403e:	6878      	ldr	r0, [r7, #4]
 8114040:	f000 f8e9 	bl	8114216 <HAL_TIM_IC_CaptureCallback>
 8114044:	e005      	b.n	8114052 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8114046:	6878      	ldr	r0, [r7, #4]
 8114048:	f000 f8db 	bl	8114202 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 811404c:	6878      	ldr	r0, [r7, #4]
 811404e:	f000 f8ec 	bl	811422a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8114052:	687b      	ldr	r3, [r7, #4]
 8114054:	2200      	movs	r2, #0
 8114056:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8114058:	68bb      	ldr	r3, [r7, #8]
 811405a:	f003 0304 	and.w	r3, r3, #4
 811405e:	2b00      	cmp	r3, #0
 8114060:	d020      	beq.n	81140a4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8114062:	68fb      	ldr	r3, [r7, #12]
 8114064:	f003 0304 	and.w	r3, r3, #4
 8114068:	2b00      	cmp	r3, #0
 811406a:	d01b      	beq.n	81140a4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 811406c:	687b      	ldr	r3, [r7, #4]
 811406e:	681b      	ldr	r3, [r3, #0]
 8114070:	f06f 0204 	mvn.w	r2, #4
 8114074:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8114076:	687b      	ldr	r3, [r7, #4]
 8114078:	2202      	movs	r2, #2
 811407a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 811407c:	687b      	ldr	r3, [r7, #4]
 811407e:	681b      	ldr	r3, [r3, #0]
 8114080:	699b      	ldr	r3, [r3, #24]
 8114082:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8114086:	2b00      	cmp	r3, #0
 8114088:	d003      	beq.n	8114092 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 811408a:	6878      	ldr	r0, [r7, #4]
 811408c:	f000 f8c3 	bl	8114216 <HAL_TIM_IC_CaptureCallback>
 8114090:	e005      	b.n	811409e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8114092:	6878      	ldr	r0, [r7, #4]
 8114094:	f000 f8b5 	bl	8114202 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8114098:	6878      	ldr	r0, [r7, #4]
 811409a:	f000 f8c6 	bl	811422a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 811409e:	687b      	ldr	r3, [r7, #4]
 81140a0:	2200      	movs	r2, #0
 81140a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 81140a4:	68bb      	ldr	r3, [r7, #8]
 81140a6:	f003 0308 	and.w	r3, r3, #8
 81140aa:	2b00      	cmp	r3, #0
 81140ac:	d020      	beq.n	81140f0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 81140ae:	68fb      	ldr	r3, [r7, #12]
 81140b0:	f003 0308 	and.w	r3, r3, #8
 81140b4:	2b00      	cmp	r3, #0
 81140b6:	d01b      	beq.n	81140f0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 81140b8:	687b      	ldr	r3, [r7, #4]
 81140ba:	681b      	ldr	r3, [r3, #0]
 81140bc:	f06f 0208 	mvn.w	r2, #8
 81140c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 81140c2:	687b      	ldr	r3, [r7, #4]
 81140c4:	2204      	movs	r2, #4
 81140c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 81140c8:	687b      	ldr	r3, [r7, #4]
 81140ca:	681b      	ldr	r3, [r3, #0]
 81140cc:	69db      	ldr	r3, [r3, #28]
 81140ce:	f003 0303 	and.w	r3, r3, #3
 81140d2:	2b00      	cmp	r3, #0
 81140d4:	d003      	beq.n	81140de <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 81140d6:	6878      	ldr	r0, [r7, #4]
 81140d8:	f000 f89d 	bl	8114216 <HAL_TIM_IC_CaptureCallback>
 81140dc:	e005      	b.n	81140ea <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 81140de:	6878      	ldr	r0, [r7, #4]
 81140e0:	f000 f88f 	bl	8114202 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 81140e4:	6878      	ldr	r0, [r7, #4]
 81140e6:	f000 f8a0 	bl	811422a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 81140ea:	687b      	ldr	r3, [r7, #4]
 81140ec:	2200      	movs	r2, #0
 81140ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 81140f0:	68bb      	ldr	r3, [r7, #8]
 81140f2:	f003 0310 	and.w	r3, r3, #16
 81140f6:	2b00      	cmp	r3, #0
 81140f8:	d020      	beq.n	811413c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 81140fa:	68fb      	ldr	r3, [r7, #12]
 81140fc:	f003 0310 	and.w	r3, r3, #16
 8114100:	2b00      	cmp	r3, #0
 8114102:	d01b      	beq.n	811413c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8114104:	687b      	ldr	r3, [r7, #4]
 8114106:	681b      	ldr	r3, [r3, #0]
 8114108:	f06f 0210 	mvn.w	r2, #16
 811410c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 811410e:	687b      	ldr	r3, [r7, #4]
 8114110:	2208      	movs	r2, #8
 8114112:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8114114:	687b      	ldr	r3, [r7, #4]
 8114116:	681b      	ldr	r3, [r3, #0]
 8114118:	69db      	ldr	r3, [r3, #28]
 811411a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 811411e:	2b00      	cmp	r3, #0
 8114120:	d003      	beq.n	811412a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8114122:	6878      	ldr	r0, [r7, #4]
 8114124:	f000 f877 	bl	8114216 <HAL_TIM_IC_CaptureCallback>
 8114128:	e005      	b.n	8114136 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 811412a:	6878      	ldr	r0, [r7, #4]
 811412c:	f000 f869 	bl	8114202 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8114130:	6878      	ldr	r0, [r7, #4]
 8114132:	f000 f87a 	bl	811422a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8114136:	687b      	ldr	r3, [r7, #4]
 8114138:	2200      	movs	r2, #0
 811413a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 811413c:	68bb      	ldr	r3, [r7, #8]
 811413e:	f003 0301 	and.w	r3, r3, #1
 8114142:	2b00      	cmp	r3, #0
 8114144:	d00c      	beq.n	8114160 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8114146:	68fb      	ldr	r3, [r7, #12]
 8114148:	f003 0301 	and.w	r3, r3, #1
 811414c:	2b00      	cmp	r3, #0
 811414e:	d007      	beq.n	8114160 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8114150:	687b      	ldr	r3, [r7, #4]
 8114152:	681b      	ldr	r3, [r3, #0]
 8114154:	f06f 0201 	mvn.w	r2, #1
 8114158:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 811415a:	6878      	ldr	r0, [r7, #4]
 811415c:	f7ed fb26 	bl	81017ac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8114160:	68bb      	ldr	r3, [r7, #8]
 8114162:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8114166:	2b00      	cmp	r3, #0
 8114168:	d104      	bne.n	8114174 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 811416a:	68bb      	ldr	r3, [r7, #8]
 811416c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8114170:	2b00      	cmp	r3, #0
 8114172:	d00c      	beq.n	811418e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8114174:	68fb      	ldr	r3, [r7, #12]
 8114176:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 811417a:	2b00      	cmp	r3, #0
 811417c:	d007      	beq.n	811418e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 811417e:	687b      	ldr	r3, [r7, #4]
 8114180:	681b      	ldr	r3, [r3, #0]
 8114182:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8114186:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8114188:	6878      	ldr	r0, [r7, #4]
 811418a:	f000 f913 	bl	81143b4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 811418e:	68bb      	ldr	r3, [r7, #8]
 8114190:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8114194:	2b00      	cmp	r3, #0
 8114196:	d00c      	beq.n	81141b2 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8114198:	68fb      	ldr	r3, [r7, #12]
 811419a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 811419e:	2b00      	cmp	r3, #0
 81141a0:	d007      	beq.n	81141b2 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 81141a2:	687b      	ldr	r3, [r7, #4]
 81141a4:	681b      	ldr	r3, [r3, #0]
 81141a6:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 81141aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 81141ac:	6878      	ldr	r0, [r7, #4]
 81141ae:	f000 f90b 	bl	81143c8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 81141b2:	68bb      	ldr	r3, [r7, #8]
 81141b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 81141b8:	2b00      	cmp	r3, #0
 81141ba:	d00c      	beq.n	81141d6 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 81141bc:	68fb      	ldr	r3, [r7, #12]
 81141be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 81141c2:	2b00      	cmp	r3, #0
 81141c4:	d007      	beq.n	81141d6 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 81141c6:	687b      	ldr	r3, [r7, #4]
 81141c8:	681b      	ldr	r3, [r3, #0]
 81141ca:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 81141ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 81141d0:	6878      	ldr	r0, [r7, #4]
 81141d2:	f000 f834 	bl	811423e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 81141d6:	68bb      	ldr	r3, [r7, #8]
 81141d8:	f003 0320 	and.w	r3, r3, #32
 81141dc:	2b00      	cmp	r3, #0
 81141de:	d00c      	beq.n	81141fa <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 81141e0:	68fb      	ldr	r3, [r7, #12]
 81141e2:	f003 0320 	and.w	r3, r3, #32
 81141e6:	2b00      	cmp	r3, #0
 81141e8:	d007      	beq.n	81141fa <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 81141ea:	687b      	ldr	r3, [r7, #4]
 81141ec:	681b      	ldr	r3, [r3, #0]
 81141ee:	f06f 0220 	mvn.w	r2, #32
 81141f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 81141f4:	6878      	ldr	r0, [r7, #4]
 81141f6:	f000 f8d3 	bl	81143a0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 81141fa:	bf00      	nop
 81141fc:	3710      	adds	r7, #16
 81141fe:	46bd      	mov	sp, r7
 8114200:	bd80      	pop	{r7, pc}

08114202 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8114202:	b480      	push	{r7}
 8114204:	b083      	sub	sp, #12
 8114206:	af00      	add	r7, sp, #0
 8114208:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 811420a:	bf00      	nop
 811420c:	370c      	adds	r7, #12
 811420e:	46bd      	mov	sp, r7
 8114210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8114214:	4770      	bx	lr

08114216 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8114216:	b480      	push	{r7}
 8114218:	b083      	sub	sp, #12
 811421a:	af00      	add	r7, sp, #0
 811421c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 811421e:	bf00      	nop
 8114220:	370c      	adds	r7, #12
 8114222:	46bd      	mov	sp, r7
 8114224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8114228:	4770      	bx	lr

0811422a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 811422a:	b480      	push	{r7}
 811422c:	b083      	sub	sp, #12
 811422e:	af00      	add	r7, sp, #0
 8114230:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8114232:	bf00      	nop
 8114234:	370c      	adds	r7, #12
 8114236:	46bd      	mov	sp, r7
 8114238:	f85d 7b04 	ldr.w	r7, [sp], #4
 811423c:	4770      	bx	lr

0811423e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 811423e:	b480      	push	{r7}
 8114240:	b083      	sub	sp, #12
 8114242:	af00      	add	r7, sp, #0
 8114244:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8114246:	bf00      	nop
 8114248:	370c      	adds	r7, #12
 811424a:	46bd      	mov	sp, r7
 811424c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8114250:	4770      	bx	lr
	...

08114254 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8114254:	b480      	push	{r7}
 8114256:	b085      	sub	sp, #20
 8114258:	af00      	add	r7, sp, #0
 811425a:	6078      	str	r0, [r7, #4]
 811425c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 811425e:	687b      	ldr	r3, [r7, #4]
 8114260:	681b      	ldr	r3, [r3, #0]
 8114262:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8114264:	687b      	ldr	r3, [r7, #4]
 8114266:	4a46      	ldr	r2, [pc, #280]	@ (8114380 <TIM_Base_SetConfig+0x12c>)
 8114268:	4293      	cmp	r3, r2
 811426a:	d013      	beq.n	8114294 <TIM_Base_SetConfig+0x40>
 811426c:	687b      	ldr	r3, [r7, #4]
 811426e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8114272:	d00f      	beq.n	8114294 <TIM_Base_SetConfig+0x40>
 8114274:	687b      	ldr	r3, [r7, #4]
 8114276:	4a43      	ldr	r2, [pc, #268]	@ (8114384 <TIM_Base_SetConfig+0x130>)
 8114278:	4293      	cmp	r3, r2
 811427a:	d00b      	beq.n	8114294 <TIM_Base_SetConfig+0x40>
 811427c:	687b      	ldr	r3, [r7, #4]
 811427e:	4a42      	ldr	r2, [pc, #264]	@ (8114388 <TIM_Base_SetConfig+0x134>)
 8114280:	4293      	cmp	r3, r2
 8114282:	d007      	beq.n	8114294 <TIM_Base_SetConfig+0x40>
 8114284:	687b      	ldr	r3, [r7, #4]
 8114286:	4a41      	ldr	r2, [pc, #260]	@ (811438c <TIM_Base_SetConfig+0x138>)
 8114288:	4293      	cmp	r3, r2
 811428a:	d003      	beq.n	8114294 <TIM_Base_SetConfig+0x40>
 811428c:	687b      	ldr	r3, [r7, #4]
 811428e:	4a40      	ldr	r2, [pc, #256]	@ (8114390 <TIM_Base_SetConfig+0x13c>)
 8114290:	4293      	cmp	r3, r2
 8114292:	d108      	bne.n	81142a6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8114294:	68fb      	ldr	r3, [r7, #12]
 8114296:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 811429a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 811429c:	683b      	ldr	r3, [r7, #0]
 811429e:	685b      	ldr	r3, [r3, #4]
 81142a0:	68fa      	ldr	r2, [r7, #12]
 81142a2:	4313      	orrs	r3, r2
 81142a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 81142a6:	687b      	ldr	r3, [r7, #4]
 81142a8:	4a35      	ldr	r2, [pc, #212]	@ (8114380 <TIM_Base_SetConfig+0x12c>)
 81142aa:	4293      	cmp	r3, r2
 81142ac:	d01f      	beq.n	81142ee <TIM_Base_SetConfig+0x9a>
 81142ae:	687b      	ldr	r3, [r7, #4]
 81142b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 81142b4:	d01b      	beq.n	81142ee <TIM_Base_SetConfig+0x9a>
 81142b6:	687b      	ldr	r3, [r7, #4]
 81142b8:	4a32      	ldr	r2, [pc, #200]	@ (8114384 <TIM_Base_SetConfig+0x130>)
 81142ba:	4293      	cmp	r3, r2
 81142bc:	d017      	beq.n	81142ee <TIM_Base_SetConfig+0x9a>
 81142be:	687b      	ldr	r3, [r7, #4]
 81142c0:	4a31      	ldr	r2, [pc, #196]	@ (8114388 <TIM_Base_SetConfig+0x134>)
 81142c2:	4293      	cmp	r3, r2
 81142c4:	d013      	beq.n	81142ee <TIM_Base_SetConfig+0x9a>
 81142c6:	687b      	ldr	r3, [r7, #4]
 81142c8:	4a30      	ldr	r2, [pc, #192]	@ (811438c <TIM_Base_SetConfig+0x138>)
 81142ca:	4293      	cmp	r3, r2
 81142cc:	d00f      	beq.n	81142ee <TIM_Base_SetConfig+0x9a>
 81142ce:	687b      	ldr	r3, [r7, #4]
 81142d0:	4a2f      	ldr	r2, [pc, #188]	@ (8114390 <TIM_Base_SetConfig+0x13c>)
 81142d2:	4293      	cmp	r3, r2
 81142d4:	d00b      	beq.n	81142ee <TIM_Base_SetConfig+0x9a>
 81142d6:	687b      	ldr	r3, [r7, #4]
 81142d8:	4a2e      	ldr	r2, [pc, #184]	@ (8114394 <TIM_Base_SetConfig+0x140>)
 81142da:	4293      	cmp	r3, r2
 81142dc:	d007      	beq.n	81142ee <TIM_Base_SetConfig+0x9a>
 81142de:	687b      	ldr	r3, [r7, #4]
 81142e0:	4a2d      	ldr	r2, [pc, #180]	@ (8114398 <TIM_Base_SetConfig+0x144>)
 81142e2:	4293      	cmp	r3, r2
 81142e4:	d003      	beq.n	81142ee <TIM_Base_SetConfig+0x9a>
 81142e6:	687b      	ldr	r3, [r7, #4]
 81142e8:	4a2c      	ldr	r2, [pc, #176]	@ (811439c <TIM_Base_SetConfig+0x148>)
 81142ea:	4293      	cmp	r3, r2
 81142ec:	d108      	bne.n	8114300 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 81142ee:	68fb      	ldr	r3, [r7, #12]
 81142f0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 81142f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 81142f6:	683b      	ldr	r3, [r7, #0]
 81142f8:	68db      	ldr	r3, [r3, #12]
 81142fa:	68fa      	ldr	r2, [r7, #12]
 81142fc:	4313      	orrs	r3, r2
 81142fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8114300:	68fb      	ldr	r3, [r7, #12]
 8114302:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8114306:	683b      	ldr	r3, [r7, #0]
 8114308:	695b      	ldr	r3, [r3, #20]
 811430a:	4313      	orrs	r3, r2
 811430c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 811430e:	687b      	ldr	r3, [r7, #4]
 8114310:	68fa      	ldr	r2, [r7, #12]
 8114312:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8114314:	683b      	ldr	r3, [r7, #0]
 8114316:	689a      	ldr	r2, [r3, #8]
 8114318:	687b      	ldr	r3, [r7, #4]
 811431a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 811431c:	683b      	ldr	r3, [r7, #0]
 811431e:	681a      	ldr	r2, [r3, #0]
 8114320:	687b      	ldr	r3, [r7, #4]
 8114322:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8114324:	687b      	ldr	r3, [r7, #4]
 8114326:	4a16      	ldr	r2, [pc, #88]	@ (8114380 <TIM_Base_SetConfig+0x12c>)
 8114328:	4293      	cmp	r3, r2
 811432a:	d00f      	beq.n	811434c <TIM_Base_SetConfig+0xf8>
 811432c:	687b      	ldr	r3, [r7, #4]
 811432e:	4a18      	ldr	r2, [pc, #96]	@ (8114390 <TIM_Base_SetConfig+0x13c>)
 8114330:	4293      	cmp	r3, r2
 8114332:	d00b      	beq.n	811434c <TIM_Base_SetConfig+0xf8>
 8114334:	687b      	ldr	r3, [r7, #4]
 8114336:	4a17      	ldr	r2, [pc, #92]	@ (8114394 <TIM_Base_SetConfig+0x140>)
 8114338:	4293      	cmp	r3, r2
 811433a:	d007      	beq.n	811434c <TIM_Base_SetConfig+0xf8>
 811433c:	687b      	ldr	r3, [r7, #4]
 811433e:	4a16      	ldr	r2, [pc, #88]	@ (8114398 <TIM_Base_SetConfig+0x144>)
 8114340:	4293      	cmp	r3, r2
 8114342:	d003      	beq.n	811434c <TIM_Base_SetConfig+0xf8>
 8114344:	687b      	ldr	r3, [r7, #4]
 8114346:	4a15      	ldr	r2, [pc, #84]	@ (811439c <TIM_Base_SetConfig+0x148>)
 8114348:	4293      	cmp	r3, r2
 811434a:	d103      	bne.n	8114354 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 811434c:	683b      	ldr	r3, [r7, #0]
 811434e:	691a      	ldr	r2, [r3, #16]
 8114350:	687b      	ldr	r3, [r7, #4]
 8114352:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8114354:	687b      	ldr	r3, [r7, #4]
 8114356:	2201      	movs	r2, #1
 8114358:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 811435a:	687b      	ldr	r3, [r7, #4]
 811435c:	691b      	ldr	r3, [r3, #16]
 811435e:	f003 0301 	and.w	r3, r3, #1
 8114362:	2b01      	cmp	r3, #1
 8114364:	d105      	bne.n	8114372 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8114366:	687b      	ldr	r3, [r7, #4]
 8114368:	691b      	ldr	r3, [r3, #16]
 811436a:	f023 0201 	bic.w	r2, r3, #1
 811436e:	687b      	ldr	r3, [r7, #4]
 8114370:	611a      	str	r2, [r3, #16]
  }
}
 8114372:	bf00      	nop
 8114374:	3714      	adds	r7, #20
 8114376:	46bd      	mov	sp, r7
 8114378:	f85d 7b04 	ldr.w	r7, [sp], #4
 811437c:	4770      	bx	lr
 811437e:	bf00      	nop
 8114380:	40010000 	.word	0x40010000
 8114384:	40000400 	.word	0x40000400
 8114388:	40000800 	.word	0x40000800
 811438c:	40000c00 	.word	0x40000c00
 8114390:	40010400 	.word	0x40010400
 8114394:	40014000 	.word	0x40014000
 8114398:	40014400 	.word	0x40014400
 811439c:	40014800 	.word	0x40014800

081143a0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 81143a0:	b480      	push	{r7}
 81143a2:	b083      	sub	sp, #12
 81143a4:	af00      	add	r7, sp, #0
 81143a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 81143a8:	bf00      	nop
 81143aa:	370c      	adds	r7, #12
 81143ac:	46bd      	mov	sp, r7
 81143ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 81143b2:	4770      	bx	lr

081143b4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 81143b4:	b480      	push	{r7}
 81143b6:	b083      	sub	sp, #12
 81143b8:	af00      	add	r7, sp, #0
 81143ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 81143bc:	bf00      	nop
 81143be:	370c      	adds	r7, #12
 81143c0:	46bd      	mov	sp, r7
 81143c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81143c6:	4770      	bx	lr

081143c8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 81143c8:	b480      	push	{r7}
 81143ca:	b083      	sub	sp, #12
 81143cc:	af00      	add	r7, sp, #0
 81143ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 81143d0:	bf00      	nop
 81143d2:	370c      	adds	r7, #12
 81143d4:	46bd      	mov	sp, r7
 81143d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81143da:	4770      	bx	lr

081143dc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 81143dc:	b580      	push	{r7, lr}
 81143de:	b082      	sub	sp, #8
 81143e0:	af00      	add	r7, sp, #0
 81143e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 81143e4:	687b      	ldr	r3, [r7, #4]
 81143e6:	2b00      	cmp	r3, #0
 81143e8:	d101      	bne.n	81143ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 81143ea:	2301      	movs	r3, #1
 81143ec:	e042      	b.n	8114474 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 81143ee:	687b      	ldr	r3, [r7, #4]
 81143f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 81143f4:	2b00      	cmp	r3, #0
 81143f6:	d106      	bne.n	8114406 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 81143f8:	687b      	ldr	r3, [r7, #4]
 81143fa:	2200      	movs	r2, #0
 81143fc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8114400:	6878      	ldr	r0, [r7, #4]
 8114402:	f7f0 fa17 	bl	8104834 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8114406:	687b      	ldr	r3, [r7, #4]
 8114408:	2224      	movs	r2, #36	@ 0x24
 811440a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 811440e:	687b      	ldr	r3, [r7, #4]
 8114410:	681b      	ldr	r3, [r3, #0]
 8114412:	681a      	ldr	r2, [r3, #0]
 8114414:	687b      	ldr	r3, [r7, #4]
 8114416:	681b      	ldr	r3, [r3, #0]
 8114418:	f022 0201 	bic.w	r2, r2, #1
 811441c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 811441e:	687b      	ldr	r3, [r7, #4]
 8114420:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8114422:	2b00      	cmp	r3, #0
 8114424:	d002      	beq.n	811442c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8114426:	6878      	ldr	r0, [r7, #4]
 8114428:	f000 fe1e 	bl	8115068 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 811442c:	6878      	ldr	r0, [r7, #4]
 811442e:	f000 f8b3 	bl	8114598 <UART_SetConfig>
 8114432:	4603      	mov	r3, r0
 8114434:	2b01      	cmp	r3, #1
 8114436:	d101      	bne.n	811443c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8114438:	2301      	movs	r3, #1
 811443a:	e01b      	b.n	8114474 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 811443c:	687b      	ldr	r3, [r7, #4]
 811443e:	681b      	ldr	r3, [r3, #0]
 8114440:	685a      	ldr	r2, [r3, #4]
 8114442:	687b      	ldr	r3, [r7, #4]
 8114444:	681b      	ldr	r3, [r3, #0]
 8114446:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 811444a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 811444c:	687b      	ldr	r3, [r7, #4]
 811444e:	681b      	ldr	r3, [r3, #0]
 8114450:	689a      	ldr	r2, [r3, #8]
 8114452:	687b      	ldr	r3, [r7, #4]
 8114454:	681b      	ldr	r3, [r3, #0]
 8114456:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 811445a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 811445c:	687b      	ldr	r3, [r7, #4]
 811445e:	681b      	ldr	r3, [r3, #0]
 8114460:	681a      	ldr	r2, [r3, #0]
 8114462:	687b      	ldr	r3, [r7, #4]
 8114464:	681b      	ldr	r3, [r3, #0]
 8114466:	f042 0201 	orr.w	r2, r2, #1
 811446a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 811446c:	6878      	ldr	r0, [r7, #4]
 811446e:	f000 fe9d 	bl	81151ac <UART_CheckIdleState>
 8114472:	4603      	mov	r3, r0
}
 8114474:	4618      	mov	r0, r3
 8114476:	3708      	adds	r7, #8
 8114478:	46bd      	mov	sp, r7
 811447a:	bd80      	pop	{r7, pc}

0811447c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 811447c:	b580      	push	{r7, lr}
 811447e:	b08a      	sub	sp, #40	@ 0x28
 8114480:	af02      	add	r7, sp, #8
 8114482:	60f8      	str	r0, [r7, #12]
 8114484:	60b9      	str	r1, [r7, #8]
 8114486:	603b      	str	r3, [r7, #0]
 8114488:	4613      	mov	r3, r2
 811448a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 811448c:	68fb      	ldr	r3, [r7, #12]
 811448e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8114492:	2b20      	cmp	r3, #32
 8114494:	d17b      	bne.n	811458e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8114496:	68bb      	ldr	r3, [r7, #8]
 8114498:	2b00      	cmp	r3, #0
 811449a:	d002      	beq.n	81144a2 <HAL_UART_Transmit+0x26>
 811449c:	88fb      	ldrh	r3, [r7, #6]
 811449e:	2b00      	cmp	r3, #0
 81144a0:	d101      	bne.n	81144a6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 81144a2:	2301      	movs	r3, #1
 81144a4:	e074      	b.n	8114590 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 81144a6:	68fb      	ldr	r3, [r7, #12]
 81144a8:	2200      	movs	r2, #0
 81144aa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 81144ae:	68fb      	ldr	r3, [r7, #12]
 81144b0:	2221      	movs	r2, #33	@ 0x21
 81144b2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 81144b6:	f7fa fd0f 	bl	810eed8 <HAL_GetTick>
 81144ba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 81144bc:	68fb      	ldr	r3, [r7, #12]
 81144be:	88fa      	ldrh	r2, [r7, #6]
 81144c0:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 81144c4:	68fb      	ldr	r3, [r7, #12]
 81144c6:	88fa      	ldrh	r2, [r7, #6]
 81144c8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 81144cc:	68fb      	ldr	r3, [r7, #12]
 81144ce:	689b      	ldr	r3, [r3, #8]
 81144d0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 81144d4:	d108      	bne.n	81144e8 <HAL_UART_Transmit+0x6c>
 81144d6:	68fb      	ldr	r3, [r7, #12]
 81144d8:	691b      	ldr	r3, [r3, #16]
 81144da:	2b00      	cmp	r3, #0
 81144dc:	d104      	bne.n	81144e8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 81144de:	2300      	movs	r3, #0
 81144e0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 81144e2:	68bb      	ldr	r3, [r7, #8]
 81144e4:	61bb      	str	r3, [r7, #24]
 81144e6:	e003      	b.n	81144f0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 81144e8:	68bb      	ldr	r3, [r7, #8]
 81144ea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 81144ec:	2300      	movs	r3, #0
 81144ee:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 81144f0:	e030      	b.n	8114554 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 81144f2:	683b      	ldr	r3, [r7, #0]
 81144f4:	9300      	str	r3, [sp, #0]
 81144f6:	697b      	ldr	r3, [r7, #20]
 81144f8:	2200      	movs	r2, #0
 81144fa:	2180      	movs	r1, #128	@ 0x80
 81144fc:	68f8      	ldr	r0, [r7, #12]
 81144fe:	f000 feff 	bl	8115300 <UART_WaitOnFlagUntilTimeout>
 8114502:	4603      	mov	r3, r0
 8114504:	2b00      	cmp	r3, #0
 8114506:	d005      	beq.n	8114514 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8114508:	68fb      	ldr	r3, [r7, #12]
 811450a:	2220      	movs	r2, #32
 811450c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8114510:	2303      	movs	r3, #3
 8114512:	e03d      	b.n	8114590 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8114514:	69fb      	ldr	r3, [r7, #28]
 8114516:	2b00      	cmp	r3, #0
 8114518:	d10b      	bne.n	8114532 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 811451a:	69bb      	ldr	r3, [r7, #24]
 811451c:	881b      	ldrh	r3, [r3, #0]
 811451e:	461a      	mov	r2, r3
 8114520:	68fb      	ldr	r3, [r7, #12]
 8114522:	681b      	ldr	r3, [r3, #0]
 8114524:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8114528:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 811452a:	69bb      	ldr	r3, [r7, #24]
 811452c:	3302      	adds	r3, #2
 811452e:	61bb      	str	r3, [r7, #24]
 8114530:	e007      	b.n	8114542 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8114532:	69fb      	ldr	r3, [r7, #28]
 8114534:	781a      	ldrb	r2, [r3, #0]
 8114536:	68fb      	ldr	r3, [r7, #12]
 8114538:	681b      	ldr	r3, [r3, #0]
 811453a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 811453c:	69fb      	ldr	r3, [r7, #28]
 811453e:	3301      	adds	r3, #1
 8114540:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8114542:	68fb      	ldr	r3, [r7, #12]
 8114544:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8114548:	b29b      	uxth	r3, r3
 811454a:	3b01      	subs	r3, #1
 811454c:	b29a      	uxth	r2, r3
 811454e:	68fb      	ldr	r3, [r7, #12]
 8114550:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8114554:	68fb      	ldr	r3, [r7, #12]
 8114556:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 811455a:	b29b      	uxth	r3, r3
 811455c:	2b00      	cmp	r3, #0
 811455e:	d1c8      	bne.n	81144f2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8114560:	683b      	ldr	r3, [r7, #0]
 8114562:	9300      	str	r3, [sp, #0]
 8114564:	697b      	ldr	r3, [r7, #20]
 8114566:	2200      	movs	r2, #0
 8114568:	2140      	movs	r1, #64	@ 0x40
 811456a:	68f8      	ldr	r0, [r7, #12]
 811456c:	f000 fec8 	bl	8115300 <UART_WaitOnFlagUntilTimeout>
 8114570:	4603      	mov	r3, r0
 8114572:	2b00      	cmp	r3, #0
 8114574:	d005      	beq.n	8114582 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8114576:	68fb      	ldr	r3, [r7, #12]
 8114578:	2220      	movs	r2, #32
 811457a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 811457e:	2303      	movs	r3, #3
 8114580:	e006      	b.n	8114590 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8114582:	68fb      	ldr	r3, [r7, #12]
 8114584:	2220      	movs	r2, #32
 8114586:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 811458a:	2300      	movs	r3, #0
 811458c:	e000      	b.n	8114590 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 811458e:	2302      	movs	r3, #2
  }
}
 8114590:	4618      	mov	r0, r3
 8114592:	3720      	adds	r7, #32
 8114594:	46bd      	mov	sp, r7
 8114596:	bd80      	pop	{r7, pc}

08114598 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8114598:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 811459c:	b092      	sub	sp, #72	@ 0x48
 811459e:	af00      	add	r7, sp, #0
 81145a0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 81145a2:	2300      	movs	r3, #0
 81145a4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 81145a8:	697b      	ldr	r3, [r7, #20]
 81145aa:	689a      	ldr	r2, [r3, #8]
 81145ac:	697b      	ldr	r3, [r7, #20]
 81145ae:	691b      	ldr	r3, [r3, #16]
 81145b0:	431a      	orrs	r2, r3
 81145b2:	697b      	ldr	r3, [r7, #20]
 81145b4:	695b      	ldr	r3, [r3, #20]
 81145b6:	431a      	orrs	r2, r3
 81145b8:	697b      	ldr	r3, [r7, #20]
 81145ba:	69db      	ldr	r3, [r3, #28]
 81145bc:	4313      	orrs	r3, r2
 81145be:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 81145c0:	697b      	ldr	r3, [r7, #20]
 81145c2:	681b      	ldr	r3, [r3, #0]
 81145c4:	681a      	ldr	r2, [r3, #0]
 81145c6:	4bbd      	ldr	r3, [pc, #756]	@ (81148bc <UART_SetConfig+0x324>)
 81145c8:	4013      	ands	r3, r2
 81145ca:	697a      	ldr	r2, [r7, #20]
 81145cc:	6812      	ldr	r2, [r2, #0]
 81145ce:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 81145d0:	430b      	orrs	r3, r1
 81145d2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 81145d4:	697b      	ldr	r3, [r7, #20]
 81145d6:	681b      	ldr	r3, [r3, #0]
 81145d8:	685b      	ldr	r3, [r3, #4]
 81145da:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 81145de:	697b      	ldr	r3, [r7, #20]
 81145e0:	68da      	ldr	r2, [r3, #12]
 81145e2:	697b      	ldr	r3, [r7, #20]
 81145e4:	681b      	ldr	r3, [r3, #0]
 81145e6:	430a      	orrs	r2, r1
 81145e8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 81145ea:	697b      	ldr	r3, [r7, #20]
 81145ec:	699b      	ldr	r3, [r3, #24]
 81145ee:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 81145f0:	697b      	ldr	r3, [r7, #20]
 81145f2:	681b      	ldr	r3, [r3, #0]
 81145f4:	4ab2      	ldr	r2, [pc, #712]	@ (81148c0 <UART_SetConfig+0x328>)
 81145f6:	4293      	cmp	r3, r2
 81145f8:	d004      	beq.n	8114604 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 81145fa:	697b      	ldr	r3, [r7, #20]
 81145fc:	6a1b      	ldr	r3, [r3, #32]
 81145fe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8114600:	4313      	orrs	r3, r2
 8114602:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8114604:	697b      	ldr	r3, [r7, #20]
 8114606:	681b      	ldr	r3, [r3, #0]
 8114608:	689b      	ldr	r3, [r3, #8]
 811460a:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 811460e:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8114612:	697a      	ldr	r2, [r7, #20]
 8114614:	6812      	ldr	r2, [r2, #0]
 8114616:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8114618:	430b      	orrs	r3, r1
 811461a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 811461c:	697b      	ldr	r3, [r7, #20]
 811461e:	681b      	ldr	r3, [r3, #0]
 8114620:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8114622:	f023 010f 	bic.w	r1, r3, #15
 8114626:	697b      	ldr	r3, [r7, #20]
 8114628:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 811462a:	697b      	ldr	r3, [r7, #20]
 811462c:	681b      	ldr	r3, [r3, #0]
 811462e:	430a      	orrs	r2, r1
 8114630:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8114632:	697b      	ldr	r3, [r7, #20]
 8114634:	681b      	ldr	r3, [r3, #0]
 8114636:	4aa3      	ldr	r2, [pc, #652]	@ (81148c4 <UART_SetConfig+0x32c>)
 8114638:	4293      	cmp	r3, r2
 811463a:	d177      	bne.n	811472c <UART_SetConfig+0x194>
 811463c:	4ba2      	ldr	r3, [pc, #648]	@ (81148c8 <UART_SetConfig+0x330>)
 811463e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8114640:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8114644:	2b28      	cmp	r3, #40	@ 0x28
 8114646:	d86d      	bhi.n	8114724 <UART_SetConfig+0x18c>
 8114648:	a201      	add	r2, pc, #4	@ (adr r2, 8114650 <UART_SetConfig+0xb8>)
 811464a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 811464e:	bf00      	nop
 8114650:	081146f5 	.word	0x081146f5
 8114654:	08114725 	.word	0x08114725
 8114658:	08114725 	.word	0x08114725
 811465c:	08114725 	.word	0x08114725
 8114660:	08114725 	.word	0x08114725
 8114664:	08114725 	.word	0x08114725
 8114668:	08114725 	.word	0x08114725
 811466c:	08114725 	.word	0x08114725
 8114670:	081146fd 	.word	0x081146fd
 8114674:	08114725 	.word	0x08114725
 8114678:	08114725 	.word	0x08114725
 811467c:	08114725 	.word	0x08114725
 8114680:	08114725 	.word	0x08114725
 8114684:	08114725 	.word	0x08114725
 8114688:	08114725 	.word	0x08114725
 811468c:	08114725 	.word	0x08114725
 8114690:	08114705 	.word	0x08114705
 8114694:	08114725 	.word	0x08114725
 8114698:	08114725 	.word	0x08114725
 811469c:	08114725 	.word	0x08114725
 81146a0:	08114725 	.word	0x08114725
 81146a4:	08114725 	.word	0x08114725
 81146a8:	08114725 	.word	0x08114725
 81146ac:	08114725 	.word	0x08114725
 81146b0:	0811470d 	.word	0x0811470d
 81146b4:	08114725 	.word	0x08114725
 81146b8:	08114725 	.word	0x08114725
 81146bc:	08114725 	.word	0x08114725
 81146c0:	08114725 	.word	0x08114725
 81146c4:	08114725 	.word	0x08114725
 81146c8:	08114725 	.word	0x08114725
 81146cc:	08114725 	.word	0x08114725
 81146d0:	08114715 	.word	0x08114715
 81146d4:	08114725 	.word	0x08114725
 81146d8:	08114725 	.word	0x08114725
 81146dc:	08114725 	.word	0x08114725
 81146e0:	08114725 	.word	0x08114725
 81146e4:	08114725 	.word	0x08114725
 81146e8:	08114725 	.word	0x08114725
 81146ec:	08114725 	.word	0x08114725
 81146f0:	0811471d 	.word	0x0811471d
 81146f4:	2301      	movs	r3, #1
 81146f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81146fa:	e220      	b.n	8114b3e <UART_SetConfig+0x5a6>
 81146fc:	2304      	movs	r3, #4
 81146fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8114702:	e21c      	b.n	8114b3e <UART_SetConfig+0x5a6>
 8114704:	2308      	movs	r3, #8
 8114706:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 811470a:	e218      	b.n	8114b3e <UART_SetConfig+0x5a6>
 811470c:	2310      	movs	r3, #16
 811470e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8114712:	e214      	b.n	8114b3e <UART_SetConfig+0x5a6>
 8114714:	2320      	movs	r3, #32
 8114716:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 811471a:	e210      	b.n	8114b3e <UART_SetConfig+0x5a6>
 811471c:	2340      	movs	r3, #64	@ 0x40
 811471e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8114722:	e20c      	b.n	8114b3e <UART_SetConfig+0x5a6>
 8114724:	2380      	movs	r3, #128	@ 0x80
 8114726:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 811472a:	e208      	b.n	8114b3e <UART_SetConfig+0x5a6>
 811472c:	697b      	ldr	r3, [r7, #20]
 811472e:	681b      	ldr	r3, [r3, #0]
 8114730:	4a66      	ldr	r2, [pc, #408]	@ (81148cc <UART_SetConfig+0x334>)
 8114732:	4293      	cmp	r3, r2
 8114734:	d130      	bne.n	8114798 <UART_SetConfig+0x200>
 8114736:	4b64      	ldr	r3, [pc, #400]	@ (81148c8 <UART_SetConfig+0x330>)
 8114738:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 811473a:	f003 0307 	and.w	r3, r3, #7
 811473e:	2b05      	cmp	r3, #5
 8114740:	d826      	bhi.n	8114790 <UART_SetConfig+0x1f8>
 8114742:	a201      	add	r2, pc, #4	@ (adr r2, 8114748 <UART_SetConfig+0x1b0>)
 8114744:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8114748:	08114761 	.word	0x08114761
 811474c:	08114769 	.word	0x08114769
 8114750:	08114771 	.word	0x08114771
 8114754:	08114779 	.word	0x08114779
 8114758:	08114781 	.word	0x08114781
 811475c:	08114789 	.word	0x08114789
 8114760:	2300      	movs	r3, #0
 8114762:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8114766:	e1ea      	b.n	8114b3e <UART_SetConfig+0x5a6>
 8114768:	2304      	movs	r3, #4
 811476a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 811476e:	e1e6      	b.n	8114b3e <UART_SetConfig+0x5a6>
 8114770:	2308      	movs	r3, #8
 8114772:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8114776:	e1e2      	b.n	8114b3e <UART_SetConfig+0x5a6>
 8114778:	2310      	movs	r3, #16
 811477a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 811477e:	e1de      	b.n	8114b3e <UART_SetConfig+0x5a6>
 8114780:	2320      	movs	r3, #32
 8114782:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8114786:	e1da      	b.n	8114b3e <UART_SetConfig+0x5a6>
 8114788:	2340      	movs	r3, #64	@ 0x40
 811478a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 811478e:	e1d6      	b.n	8114b3e <UART_SetConfig+0x5a6>
 8114790:	2380      	movs	r3, #128	@ 0x80
 8114792:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8114796:	e1d2      	b.n	8114b3e <UART_SetConfig+0x5a6>
 8114798:	697b      	ldr	r3, [r7, #20]
 811479a:	681b      	ldr	r3, [r3, #0]
 811479c:	4a4c      	ldr	r2, [pc, #304]	@ (81148d0 <UART_SetConfig+0x338>)
 811479e:	4293      	cmp	r3, r2
 81147a0:	d130      	bne.n	8114804 <UART_SetConfig+0x26c>
 81147a2:	4b49      	ldr	r3, [pc, #292]	@ (81148c8 <UART_SetConfig+0x330>)
 81147a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81147a6:	f003 0307 	and.w	r3, r3, #7
 81147aa:	2b05      	cmp	r3, #5
 81147ac:	d826      	bhi.n	81147fc <UART_SetConfig+0x264>
 81147ae:	a201      	add	r2, pc, #4	@ (adr r2, 81147b4 <UART_SetConfig+0x21c>)
 81147b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81147b4:	081147cd 	.word	0x081147cd
 81147b8:	081147d5 	.word	0x081147d5
 81147bc:	081147dd 	.word	0x081147dd
 81147c0:	081147e5 	.word	0x081147e5
 81147c4:	081147ed 	.word	0x081147ed
 81147c8:	081147f5 	.word	0x081147f5
 81147cc:	2300      	movs	r3, #0
 81147ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81147d2:	e1b4      	b.n	8114b3e <UART_SetConfig+0x5a6>
 81147d4:	2304      	movs	r3, #4
 81147d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81147da:	e1b0      	b.n	8114b3e <UART_SetConfig+0x5a6>
 81147dc:	2308      	movs	r3, #8
 81147de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81147e2:	e1ac      	b.n	8114b3e <UART_SetConfig+0x5a6>
 81147e4:	2310      	movs	r3, #16
 81147e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81147ea:	e1a8      	b.n	8114b3e <UART_SetConfig+0x5a6>
 81147ec:	2320      	movs	r3, #32
 81147ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81147f2:	e1a4      	b.n	8114b3e <UART_SetConfig+0x5a6>
 81147f4:	2340      	movs	r3, #64	@ 0x40
 81147f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81147fa:	e1a0      	b.n	8114b3e <UART_SetConfig+0x5a6>
 81147fc:	2380      	movs	r3, #128	@ 0x80
 81147fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8114802:	e19c      	b.n	8114b3e <UART_SetConfig+0x5a6>
 8114804:	697b      	ldr	r3, [r7, #20]
 8114806:	681b      	ldr	r3, [r3, #0]
 8114808:	4a32      	ldr	r2, [pc, #200]	@ (81148d4 <UART_SetConfig+0x33c>)
 811480a:	4293      	cmp	r3, r2
 811480c:	d130      	bne.n	8114870 <UART_SetConfig+0x2d8>
 811480e:	4b2e      	ldr	r3, [pc, #184]	@ (81148c8 <UART_SetConfig+0x330>)
 8114810:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8114812:	f003 0307 	and.w	r3, r3, #7
 8114816:	2b05      	cmp	r3, #5
 8114818:	d826      	bhi.n	8114868 <UART_SetConfig+0x2d0>
 811481a:	a201      	add	r2, pc, #4	@ (adr r2, 8114820 <UART_SetConfig+0x288>)
 811481c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8114820:	08114839 	.word	0x08114839
 8114824:	08114841 	.word	0x08114841
 8114828:	08114849 	.word	0x08114849
 811482c:	08114851 	.word	0x08114851
 8114830:	08114859 	.word	0x08114859
 8114834:	08114861 	.word	0x08114861
 8114838:	2300      	movs	r3, #0
 811483a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 811483e:	e17e      	b.n	8114b3e <UART_SetConfig+0x5a6>
 8114840:	2304      	movs	r3, #4
 8114842:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8114846:	e17a      	b.n	8114b3e <UART_SetConfig+0x5a6>
 8114848:	2308      	movs	r3, #8
 811484a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 811484e:	e176      	b.n	8114b3e <UART_SetConfig+0x5a6>
 8114850:	2310      	movs	r3, #16
 8114852:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8114856:	e172      	b.n	8114b3e <UART_SetConfig+0x5a6>
 8114858:	2320      	movs	r3, #32
 811485a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 811485e:	e16e      	b.n	8114b3e <UART_SetConfig+0x5a6>
 8114860:	2340      	movs	r3, #64	@ 0x40
 8114862:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8114866:	e16a      	b.n	8114b3e <UART_SetConfig+0x5a6>
 8114868:	2380      	movs	r3, #128	@ 0x80
 811486a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 811486e:	e166      	b.n	8114b3e <UART_SetConfig+0x5a6>
 8114870:	697b      	ldr	r3, [r7, #20]
 8114872:	681b      	ldr	r3, [r3, #0]
 8114874:	4a18      	ldr	r2, [pc, #96]	@ (81148d8 <UART_SetConfig+0x340>)
 8114876:	4293      	cmp	r3, r2
 8114878:	d140      	bne.n	81148fc <UART_SetConfig+0x364>
 811487a:	4b13      	ldr	r3, [pc, #76]	@ (81148c8 <UART_SetConfig+0x330>)
 811487c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 811487e:	f003 0307 	and.w	r3, r3, #7
 8114882:	2b05      	cmp	r3, #5
 8114884:	d836      	bhi.n	81148f4 <UART_SetConfig+0x35c>
 8114886:	a201      	add	r2, pc, #4	@ (adr r2, 811488c <UART_SetConfig+0x2f4>)
 8114888:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 811488c:	081148a5 	.word	0x081148a5
 8114890:	081148ad 	.word	0x081148ad
 8114894:	081148b5 	.word	0x081148b5
 8114898:	081148dd 	.word	0x081148dd
 811489c:	081148e5 	.word	0x081148e5
 81148a0:	081148ed 	.word	0x081148ed
 81148a4:	2300      	movs	r3, #0
 81148a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81148aa:	e148      	b.n	8114b3e <UART_SetConfig+0x5a6>
 81148ac:	2304      	movs	r3, #4
 81148ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81148b2:	e144      	b.n	8114b3e <UART_SetConfig+0x5a6>
 81148b4:	2308      	movs	r3, #8
 81148b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81148ba:	e140      	b.n	8114b3e <UART_SetConfig+0x5a6>
 81148bc:	cfff69f3 	.word	0xcfff69f3
 81148c0:	58000c00 	.word	0x58000c00
 81148c4:	40011000 	.word	0x40011000
 81148c8:	58024400 	.word	0x58024400
 81148cc:	40004400 	.word	0x40004400
 81148d0:	40004800 	.word	0x40004800
 81148d4:	40004c00 	.word	0x40004c00
 81148d8:	40005000 	.word	0x40005000
 81148dc:	2310      	movs	r3, #16
 81148de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81148e2:	e12c      	b.n	8114b3e <UART_SetConfig+0x5a6>
 81148e4:	2320      	movs	r3, #32
 81148e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81148ea:	e128      	b.n	8114b3e <UART_SetConfig+0x5a6>
 81148ec:	2340      	movs	r3, #64	@ 0x40
 81148ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81148f2:	e124      	b.n	8114b3e <UART_SetConfig+0x5a6>
 81148f4:	2380      	movs	r3, #128	@ 0x80
 81148f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81148fa:	e120      	b.n	8114b3e <UART_SetConfig+0x5a6>
 81148fc:	697b      	ldr	r3, [r7, #20]
 81148fe:	681b      	ldr	r3, [r3, #0]
 8114900:	4acb      	ldr	r2, [pc, #812]	@ (8114c30 <UART_SetConfig+0x698>)
 8114902:	4293      	cmp	r3, r2
 8114904:	d176      	bne.n	81149f4 <UART_SetConfig+0x45c>
 8114906:	4bcb      	ldr	r3, [pc, #812]	@ (8114c34 <UART_SetConfig+0x69c>)
 8114908:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 811490a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 811490e:	2b28      	cmp	r3, #40	@ 0x28
 8114910:	d86c      	bhi.n	81149ec <UART_SetConfig+0x454>
 8114912:	a201      	add	r2, pc, #4	@ (adr r2, 8114918 <UART_SetConfig+0x380>)
 8114914:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8114918:	081149bd 	.word	0x081149bd
 811491c:	081149ed 	.word	0x081149ed
 8114920:	081149ed 	.word	0x081149ed
 8114924:	081149ed 	.word	0x081149ed
 8114928:	081149ed 	.word	0x081149ed
 811492c:	081149ed 	.word	0x081149ed
 8114930:	081149ed 	.word	0x081149ed
 8114934:	081149ed 	.word	0x081149ed
 8114938:	081149c5 	.word	0x081149c5
 811493c:	081149ed 	.word	0x081149ed
 8114940:	081149ed 	.word	0x081149ed
 8114944:	081149ed 	.word	0x081149ed
 8114948:	081149ed 	.word	0x081149ed
 811494c:	081149ed 	.word	0x081149ed
 8114950:	081149ed 	.word	0x081149ed
 8114954:	081149ed 	.word	0x081149ed
 8114958:	081149cd 	.word	0x081149cd
 811495c:	081149ed 	.word	0x081149ed
 8114960:	081149ed 	.word	0x081149ed
 8114964:	081149ed 	.word	0x081149ed
 8114968:	081149ed 	.word	0x081149ed
 811496c:	081149ed 	.word	0x081149ed
 8114970:	081149ed 	.word	0x081149ed
 8114974:	081149ed 	.word	0x081149ed
 8114978:	081149d5 	.word	0x081149d5
 811497c:	081149ed 	.word	0x081149ed
 8114980:	081149ed 	.word	0x081149ed
 8114984:	081149ed 	.word	0x081149ed
 8114988:	081149ed 	.word	0x081149ed
 811498c:	081149ed 	.word	0x081149ed
 8114990:	081149ed 	.word	0x081149ed
 8114994:	081149ed 	.word	0x081149ed
 8114998:	081149dd 	.word	0x081149dd
 811499c:	081149ed 	.word	0x081149ed
 81149a0:	081149ed 	.word	0x081149ed
 81149a4:	081149ed 	.word	0x081149ed
 81149a8:	081149ed 	.word	0x081149ed
 81149ac:	081149ed 	.word	0x081149ed
 81149b0:	081149ed 	.word	0x081149ed
 81149b4:	081149ed 	.word	0x081149ed
 81149b8:	081149e5 	.word	0x081149e5
 81149bc:	2301      	movs	r3, #1
 81149be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81149c2:	e0bc      	b.n	8114b3e <UART_SetConfig+0x5a6>
 81149c4:	2304      	movs	r3, #4
 81149c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81149ca:	e0b8      	b.n	8114b3e <UART_SetConfig+0x5a6>
 81149cc:	2308      	movs	r3, #8
 81149ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81149d2:	e0b4      	b.n	8114b3e <UART_SetConfig+0x5a6>
 81149d4:	2310      	movs	r3, #16
 81149d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81149da:	e0b0      	b.n	8114b3e <UART_SetConfig+0x5a6>
 81149dc:	2320      	movs	r3, #32
 81149de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81149e2:	e0ac      	b.n	8114b3e <UART_SetConfig+0x5a6>
 81149e4:	2340      	movs	r3, #64	@ 0x40
 81149e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81149ea:	e0a8      	b.n	8114b3e <UART_SetConfig+0x5a6>
 81149ec:	2380      	movs	r3, #128	@ 0x80
 81149ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81149f2:	e0a4      	b.n	8114b3e <UART_SetConfig+0x5a6>
 81149f4:	697b      	ldr	r3, [r7, #20]
 81149f6:	681b      	ldr	r3, [r3, #0]
 81149f8:	4a8f      	ldr	r2, [pc, #572]	@ (8114c38 <UART_SetConfig+0x6a0>)
 81149fa:	4293      	cmp	r3, r2
 81149fc:	d130      	bne.n	8114a60 <UART_SetConfig+0x4c8>
 81149fe:	4b8d      	ldr	r3, [pc, #564]	@ (8114c34 <UART_SetConfig+0x69c>)
 8114a00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8114a02:	f003 0307 	and.w	r3, r3, #7
 8114a06:	2b05      	cmp	r3, #5
 8114a08:	d826      	bhi.n	8114a58 <UART_SetConfig+0x4c0>
 8114a0a:	a201      	add	r2, pc, #4	@ (adr r2, 8114a10 <UART_SetConfig+0x478>)
 8114a0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8114a10:	08114a29 	.word	0x08114a29
 8114a14:	08114a31 	.word	0x08114a31
 8114a18:	08114a39 	.word	0x08114a39
 8114a1c:	08114a41 	.word	0x08114a41
 8114a20:	08114a49 	.word	0x08114a49
 8114a24:	08114a51 	.word	0x08114a51
 8114a28:	2300      	movs	r3, #0
 8114a2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8114a2e:	e086      	b.n	8114b3e <UART_SetConfig+0x5a6>
 8114a30:	2304      	movs	r3, #4
 8114a32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8114a36:	e082      	b.n	8114b3e <UART_SetConfig+0x5a6>
 8114a38:	2308      	movs	r3, #8
 8114a3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8114a3e:	e07e      	b.n	8114b3e <UART_SetConfig+0x5a6>
 8114a40:	2310      	movs	r3, #16
 8114a42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8114a46:	e07a      	b.n	8114b3e <UART_SetConfig+0x5a6>
 8114a48:	2320      	movs	r3, #32
 8114a4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8114a4e:	e076      	b.n	8114b3e <UART_SetConfig+0x5a6>
 8114a50:	2340      	movs	r3, #64	@ 0x40
 8114a52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8114a56:	e072      	b.n	8114b3e <UART_SetConfig+0x5a6>
 8114a58:	2380      	movs	r3, #128	@ 0x80
 8114a5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8114a5e:	e06e      	b.n	8114b3e <UART_SetConfig+0x5a6>
 8114a60:	697b      	ldr	r3, [r7, #20]
 8114a62:	681b      	ldr	r3, [r3, #0]
 8114a64:	4a75      	ldr	r2, [pc, #468]	@ (8114c3c <UART_SetConfig+0x6a4>)
 8114a66:	4293      	cmp	r3, r2
 8114a68:	d130      	bne.n	8114acc <UART_SetConfig+0x534>
 8114a6a:	4b72      	ldr	r3, [pc, #456]	@ (8114c34 <UART_SetConfig+0x69c>)
 8114a6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8114a6e:	f003 0307 	and.w	r3, r3, #7
 8114a72:	2b05      	cmp	r3, #5
 8114a74:	d826      	bhi.n	8114ac4 <UART_SetConfig+0x52c>
 8114a76:	a201      	add	r2, pc, #4	@ (adr r2, 8114a7c <UART_SetConfig+0x4e4>)
 8114a78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8114a7c:	08114a95 	.word	0x08114a95
 8114a80:	08114a9d 	.word	0x08114a9d
 8114a84:	08114aa5 	.word	0x08114aa5
 8114a88:	08114aad 	.word	0x08114aad
 8114a8c:	08114ab5 	.word	0x08114ab5
 8114a90:	08114abd 	.word	0x08114abd
 8114a94:	2300      	movs	r3, #0
 8114a96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8114a9a:	e050      	b.n	8114b3e <UART_SetConfig+0x5a6>
 8114a9c:	2304      	movs	r3, #4
 8114a9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8114aa2:	e04c      	b.n	8114b3e <UART_SetConfig+0x5a6>
 8114aa4:	2308      	movs	r3, #8
 8114aa6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8114aaa:	e048      	b.n	8114b3e <UART_SetConfig+0x5a6>
 8114aac:	2310      	movs	r3, #16
 8114aae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8114ab2:	e044      	b.n	8114b3e <UART_SetConfig+0x5a6>
 8114ab4:	2320      	movs	r3, #32
 8114ab6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8114aba:	e040      	b.n	8114b3e <UART_SetConfig+0x5a6>
 8114abc:	2340      	movs	r3, #64	@ 0x40
 8114abe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8114ac2:	e03c      	b.n	8114b3e <UART_SetConfig+0x5a6>
 8114ac4:	2380      	movs	r3, #128	@ 0x80
 8114ac6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8114aca:	e038      	b.n	8114b3e <UART_SetConfig+0x5a6>
 8114acc:	697b      	ldr	r3, [r7, #20]
 8114ace:	681b      	ldr	r3, [r3, #0]
 8114ad0:	4a5b      	ldr	r2, [pc, #364]	@ (8114c40 <UART_SetConfig+0x6a8>)
 8114ad2:	4293      	cmp	r3, r2
 8114ad4:	d130      	bne.n	8114b38 <UART_SetConfig+0x5a0>
 8114ad6:	4b57      	ldr	r3, [pc, #348]	@ (8114c34 <UART_SetConfig+0x69c>)
 8114ad8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8114ada:	f003 0307 	and.w	r3, r3, #7
 8114ade:	2b05      	cmp	r3, #5
 8114ae0:	d826      	bhi.n	8114b30 <UART_SetConfig+0x598>
 8114ae2:	a201      	add	r2, pc, #4	@ (adr r2, 8114ae8 <UART_SetConfig+0x550>)
 8114ae4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8114ae8:	08114b01 	.word	0x08114b01
 8114aec:	08114b09 	.word	0x08114b09
 8114af0:	08114b11 	.word	0x08114b11
 8114af4:	08114b19 	.word	0x08114b19
 8114af8:	08114b21 	.word	0x08114b21
 8114afc:	08114b29 	.word	0x08114b29
 8114b00:	2302      	movs	r3, #2
 8114b02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8114b06:	e01a      	b.n	8114b3e <UART_SetConfig+0x5a6>
 8114b08:	2304      	movs	r3, #4
 8114b0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8114b0e:	e016      	b.n	8114b3e <UART_SetConfig+0x5a6>
 8114b10:	2308      	movs	r3, #8
 8114b12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8114b16:	e012      	b.n	8114b3e <UART_SetConfig+0x5a6>
 8114b18:	2310      	movs	r3, #16
 8114b1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8114b1e:	e00e      	b.n	8114b3e <UART_SetConfig+0x5a6>
 8114b20:	2320      	movs	r3, #32
 8114b22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8114b26:	e00a      	b.n	8114b3e <UART_SetConfig+0x5a6>
 8114b28:	2340      	movs	r3, #64	@ 0x40
 8114b2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8114b2e:	e006      	b.n	8114b3e <UART_SetConfig+0x5a6>
 8114b30:	2380      	movs	r3, #128	@ 0x80
 8114b32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8114b36:	e002      	b.n	8114b3e <UART_SetConfig+0x5a6>
 8114b38:	2380      	movs	r3, #128	@ 0x80
 8114b3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8114b3e:	697b      	ldr	r3, [r7, #20]
 8114b40:	681b      	ldr	r3, [r3, #0]
 8114b42:	4a3f      	ldr	r2, [pc, #252]	@ (8114c40 <UART_SetConfig+0x6a8>)
 8114b44:	4293      	cmp	r3, r2
 8114b46:	f040 80f8 	bne.w	8114d3a <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8114b4a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8114b4e:	2b20      	cmp	r3, #32
 8114b50:	dc46      	bgt.n	8114be0 <UART_SetConfig+0x648>
 8114b52:	2b02      	cmp	r3, #2
 8114b54:	f2c0 8082 	blt.w	8114c5c <UART_SetConfig+0x6c4>
 8114b58:	3b02      	subs	r3, #2
 8114b5a:	2b1e      	cmp	r3, #30
 8114b5c:	d87e      	bhi.n	8114c5c <UART_SetConfig+0x6c4>
 8114b5e:	a201      	add	r2, pc, #4	@ (adr r2, 8114b64 <UART_SetConfig+0x5cc>)
 8114b60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8114b64:	08114be7 	.word	0x08114be7
 8114b68:	08114c5d 	.word	0x08114c5d
 8114b6c:	08114bef 	.word	0x08114bef
 8114b70:	08114c5d 	.word	0x08114c5d
 8114b74:	08114c5d 	.word	0x08114c5d
 8114b78:	08114c5d 	.word	0x08114c5d
 8114b7c:	08114bff 	.word	0x08114bff
 8114b80:	08114c5d 	.word	0x08114c5d
 8114b84:	08114c5d 	.word	0x08114c5d
 8114b88:	08114c5d 	.word	0x08114c5d
 8114b8c:	08114c5d 	.word	0x08114c5d
 8114b90:	08114c5d 	.word	0x08114c5d
 8114b94:	08114c5d 	.word	0x08114c5d
 8114b98:	08114c5d 	.word	0x08114c5d
 8114b9c:	08114c0f 	.word	0x08114c0f
 8114ba0:	08114c5d 	.word	0x08114c5d
 8114ba4:	08114c5d 	.word	0x08114c5d
 8114ba8:	08114c5d 	.word	0x08114c5d
 8114bac:	08114c5d 	.word	0x08114c5d
 8114bb0:	08114c5d 	.word	0x08114c5d
 8114bb4:	08114c5d 	.word	0x08114c5d
 8114bb8:	08114c5d 	.word	0x08114c5d
 8114bbc:	08114c5d 	.word	0x08114c5d
 8114bc0:	08114c5d 	.word	0x08114c5d
 8114bc4:	08114c5d 	.word	0x08114c5d
 8114bc8:	08114c5d 	.word	0x08114c5d
 8114bcc:	08114c5d 	.word	0x08114c5d
 8114bd0:	08114c5d 	.word	0x08114c5d
 8114bd4:	08114c5d 	.word	0x08114c5d
 8114bd8:	08114c5d 	.word	0x08114c5d
 8114bdc:	08114c4f 	.word	0x08114c4f
 8114be0:	2b40      	cmp	r3, #64	@ 0x40
 8114be2:	d037      	beq.n	8114c54 <UART_SetConfig+0x6bc>
 8114be4:	e03a      	b.n	8114c5c <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8114be6:	f7fe fd09 	bl	81135fc <HAL_RCCEx_GetD3PCLK1Freq>
 8114bea:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8114bec:	e03c      	b.n	8114c68 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8114bee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8114bf2:	4618      	mov	r0, r3
 8114bf4:	f7fe fd18 	bl	8113628 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8114bf8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8114bfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8114bfc:	e034      	b.n	8114c68 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8114bfe:	f107 0318 	add.w	r3, r7, #24
 8114c02:	4618      	mov	r0, r3
 8114c04:	f7fe fe64 	bl	81138d0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8114c08:	69fb      	ldr	r3, [r7, #28]
 8114c0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8114c0c:	e02c      	b.n	8114c68 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8114c0e:	4b09      	ldr	r3, [pc, #36]	@ (8114c34 <UART_SetConfig+0x69c>)
 8114c10:	681b      	ldr	r3, [r3, #0]
 8114c12:	f003 0320 	and.w	r3, r3, #32
 8114c16:	2b00      	cmp	r3, #0
 8114c18:	d016      	beq.n	8114c48 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8114c1a:	4b06      	ldr	r3, [pc, #24]	@ (8114c34 <UART_SetConfig+0x69c>)
 8114c1c:	681b      	ldr	r3, [r3, #0]
 8114c1e:	08db      	lsrs	r3, r3, #3
 8114c20:	f003 0303 	and.w	r3, r3, #3
 8114c24:	4a07      	ldr	r2, [pc, #28]	@ (8114c44 <UART_SetConfig+0x6ac>)
 8114c26:	fa22 f303 	lsr.w	r3, r2, r3
 8114c2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8114c2c:	e01c      	b.n	8114c68 <UART_SetConfig+0x6d0>
 8114c2e:	bf00      	nop
 8114c30:	40011400 	.word	0x40011400
 8114c34:	58024400 	.word	0x58024400
 8114c38:	40007800 	.word	0x40007800
 8114c3c:	40007c00 	.word	0x40007c00
 8114c40:	58000c00 	.word	0x58000c00
 8114c44:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8114c48:	4b9d      	ldr	r3, [pc, #628]	@ (8114ec0 <UART_SetConfig+0x928>)
 8114c4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8114c4c:	e00c      	b.n	8114c68 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8114c4e:	4b9d      	ldr	r3, [pc, #628]	@ (8114ec4 <UART_SetConfig+0x92c>)
 8114c50:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8114c52:	e009      	b.n	8114c68 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8114c54:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8114c58:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8114c5a:	e005      	b.n	8114c68 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8114c5c:	2300      	movs	r3, #0
 8114c5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8114c60:	2301      	movs	r3, #1
 8114c62:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8114c66:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8114c68:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8114c6a:	2b00      	cmp	r3, #0
 8114c6c:	f000 81de 	beq.w	811502c <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8114c70:	697b      	ldr	r3, [r7, #20]
 8114c72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8114c74:	4a94      	ldr	r2, [pc, #592]	@ (8114ec8 <UART_SetConfig+0x930>)
 8114c76:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8114c7a:	461a      	mov	r2, r3
 8114c7c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8114c7e:	fbb3 f3f2 	udiv	r3, r3, r2
 8114c82:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8114c84:	697b      	ldr	r3, [r7, #20]
 8114c86:	685a      	ldr	r2, [r3, #4]
 8114c88:	4613      	mov	r3, r2
 8114c8a:	005b      	lsls	r3, r3, #1
 8114c8c:	4413      	add	r3, r2
 8114c8e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8114c90:	429a      	cmp	r2, r3
 8114c92:	d305      	bcc.n	8114ca0 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8114c94:	697b      	ldr	r3, [r7, #20]
 8114c96:	685b      	ldr	r3, [r3, #4]
 8114c98:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8114c9a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8114c9c:	429a      	cmp	r2, r3
 8114c9e:	d903      	bls.n	8114ca8 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8114ca0:	2301      	movs	r3, #1
 8114ca2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8114ca6:	e1c1      	b.n	811502c <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8114ca8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8114caa:	2200      	movs	r2, #0
 8114cac:	60bb      	str	r3, [r7, #8]
 8114cae:	60fa      	str	r2, [r7, #12]
 8114cb0:	697b      	ldr	r3, [r7, #20]
 8114cb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8114cb4:	4a84      	ldr	r2, [pc, #528]	@ (8114ec8 <UART_SetConfig+0x930>)
 8114cb6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8114cba:	b29b      	uxth	r3, r3
 8114cbc:	2200      	movs	r2, #0
 8114cbe:	603b      	str	r3, [r7, #0]
 8114cc0:	607a      	str	r2, [r7, #4]
 8114cc2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8114cc6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8114cca:	f7eb ffcf 	bl	8100c6c <__aeabi_uldivmod>
 8114cce:	4602      	mov	r2, r0
 8114cd0:	460b      	mov	r3, r1
 8114cd2:	4610      	mov	r0, r2
 8114cd4:	4619      	mov	r1, r3
 8114cd6:	f04f 0200 	mov.w	r2, #0
 8114cda:	f04f 0300 	mov.w	r3, #0
 8114cde:	020b      	lsls	r3, r1, #8
 8114ce0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8114ce4:	0202      	lsls	r2, r0, #8
 8114ce6:	6979      	ldr	r1, [r7, #20]
 8114ce8:	6849      	ldr	r1, [r1, #4]
 8114cea:	0849      	lsrs	r1, r1, #1
 8114cec:	2000      	movs	r0, #0
 8114cee:	460c      	mov	r4, r1
 8114cf0:	4605      	mov	r5, r0
 8114cf2:	eb12 0804 	adds.w	r8, r2, r4
 8114cf6:	eb43 0905 	adc.w	r9, r3, r5
 8114cfa:	697b      	ldr	r3, [r7, #20]
 8114cfc:	685b      	ldr	r3, [r3, #4]
 8114cfe:	2200      	movs	r2, #0
 8114d00:	469a      	mov	sl, r3
 8114d02:	4693      	mov	fp, r2
 8114d04:	4652      	mov	r2, sl
 8114d06:	465b      	mov	r3, fp
 8114d08:	4640      	mov	r0, r8
 8114d0a:	4649      	mov	r1, r9
 8114d0c:	f7eb ffae 	bl	8100c6c <__aeabi_uldivmod>
 8114d10:	4602      	mov	r2, r0
 8114d12:	460b      	mov	r3, r1
 8114d14:	4613      	mov	r3, r2
 8114d16:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8114d18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8114d1a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8114d1e:	d308      	bcc.n	8114d32 <UART_SetConfig+0x79a>
 8114d20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8114d22:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8114d26:	d204      	bcs.n	8114d32 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8114d28:	697b      	ldr	r3, [r7, #20]
 8114d2a:	681b      	ldr	r3, [r3, #0]
 8114d2c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8114d2e:	60da      	str	r2, [r3, #12]
 8114d30:	e17c      	b.n	811502c <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8114d32:	2301      	movs	r3, #1
 8114d34:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8114d38:	e178      	b.n	811502c <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8114d3a:	697b      	ldr	r3, [r7, #20]
 8114d3c:	69db      	ldr	r3, [r3, #28]
 8114d3e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8114d42:	f040 80c5 	bne.w	8114ed0 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8114d46:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8114d4a:	2b20      	cmp	r3, #32
 8114d4c:	dc48      	bgt.n	8114de0 <UART_SetConfig+0x848>
 8114d4e:	2b00      	cmp	r3, #0
 8114d50:	db7b      	blt.n	8114e4a <UART_SetConfig+0x8b2>
 8114d52:	2b20      	cmp	r3, #32
 8114d54:	d879      	bhi.n	8114e4a <UART_SetConfig+0x8b2>
 8114d56:	a201      	add	r2, pc, #4	@ (adr r2, 8114d5c <UART_SetConfig+0x7c4>)
 8114d58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8114d5c:	08114de7 	.word	0x08114de7
 8114d60:	08114def 	.word	0x08114def
 8114d64:	08114e4b 	.word	0x08114e4b
 8114d68:	08114e4b 	.word	0x08114e4b
 8114d6c:	08114df7 	.word	0x08114df7
 8114d70:	08114e4b 	.word	0x08114e4b
 8114d74:	08114e4b 	.word	0x08114e4b
 8114d78:	08114e4b 	.word	0x08114e4b
 8114d7c:	08114e07 	.word	0x08114e07
 8114d80:	08114e4b 	.word	0x08114e4b
 8114d84:	08114e4b 	.word	0x08114e4b
 8114d88:	08114e4b 	.word	0x08114e4b
 8114d8c:	08114e4b 	.word	0x08114e4b
 8114d90:	08114e4b 	.word	0x08114e4b
 8114d94:	08114e4b 	.word	0x08114e4b
 8114d98:	08114e4b 	.word	0x08114e4b
 8114d9c:	08114e17 	.word	0x08114e17
 8114da0:	08114e4b 	.word	0x08114e4b
 8114da4:	08114e4b 	.word	0x08114e4b
 8114da8:	08114e4b 	.word	0x08114e4b
 8114dac:	08114e4b 	.word	0x08114e4b
 8114db0:	08114e4b 	.word	0x08114e4b
 8114db4:	08114e4b 	.word	0x08114e4b
 8114db8:	08114e4b 	.word	0x08114e4b
 8114dbc:	08114e4b 	.word	0x08114e4b
 8114dc0:	08114e4b 	.word	0x08114e4b
 8114dc4:	08114e4b 	.word	0x08114e4b
 8114dc8:	08114e4b 	.word	0x08114e4b
 8114dcc:	08114e4b 	.word	0x08114e4b
 8114dd0:	08114e4b 	.word	0x08114e4b
 8114dd4:	08114e4b 	.word	0x08114e4b
 8114dd8:	08114e4b 	.word	0x08114e4b
 8114ddc:	08114e3d 	.word	0x08114e3d
 8114de0:	2b40      	cmp	r3, #64	@ 0x40
 8114de2:	d02e      	beq.n	8114e42 <UART_SetConfig+0x8aa>
 8114de4:	e031      	b.n	8114e4a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8114de6:	f7fd f951 	bl	811208c <HAL_RCC_GetPCLK1Freq>
 8114dea:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8114dec:	e033      	b.n	8114e56 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8114dee:	f7fd f963 	bl	81120b8 <HAL_RCC_GetPCLK2Freq>
 8114df2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8114df4:	e02f      	b.n	8114e56 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8114df6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8114dfa:	4618      	mov	r0, r3
 8114dfc:	f7fe fc14 	bl	8113628 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8114e00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8114e02:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8114e04:	e027      	b.n	8114e56 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8114e06:	f107 0318 	add.w	r3, r7, #24
 8114e0a:	4618      	mov	r0, r3
 8114e0c:	f7fe fd60 	bl	81138d0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8114e10:	69fb      	ldr	r3, [r7, #28]
 8114e12:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8114e14:	e01f      	b.n	8114e56 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8114e16:	4b2d      	ldr	r3, [pc, #180]	@ (8114ecc <UART_SetConfig+0x934>)
 8114e18:	681b      	ldr	r3, [r3, #0]
 8114e1a:	f003 0320 	and.w	r3, r3, #32
 8114e1e:	2b00      	cmp	r3, #0
 8114e20:	d009      	beq.n	8114e36 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8114e22:	4b2a      	ldr	r3, [pc, #168]	@ (8114ecc <UART_SetConfig+0x934>)
 8114e24:	681b      	ldr	r3, [r3, #0]
 8114e26:	08db      	lsrs	r3, r3, #3
 8114e28:	f003 0303 	and.w	r3, r3, #3
 8114e2c:	4a24      	ldr	r2, [pc, #144]	@ (8114ec0 <UART_SetConfig+0x928>)
 8114e2e:	fa22 f303 	lsr.w	r3, r2, r3
 8114e32:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8114e34:	e00f      	b.n	8114e56 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8114e36:	4b22      	ldr	r3, [pc, #136]	@ (8114ec0 <UART_SetConfig+0x928>)
 8114e38:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8114e3a:	e00c      	b.n	8114e56 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8114e3c:	4b21      	ldr	r3, [pc, #132]	@ (8114ec4 <UART_SetConfig+0x92c>)
 8114e3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8114e40:	e009      	b.n	8114e56 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8114e42:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8114e46:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8114e48:	e005      	b.n	8114e56 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8114e4a:	2300      	movs	r3, #0
 8114e4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8114e4e:	2301      	movs	r3, #1
 8114e50:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8114e54:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8114e56:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8114e58:	2b00      	cmp	r3, #0
 8114e5a:	f000 80e7 	beq.w	811502c <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8114e5e:	697b      	ldr	r3, [r7, #20]
 8114e60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8114e62:	4a19      	ldr	r2, [pc, #100]	@ (8114ec8 <UART_SetConfig+0x930>)
 8114e64:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8114e68:	461a      	mov	r2, r3
 8114e6a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8114e6c:	fbb3 f3f2 	udiv	r3, r3, r2
 8114e70:	005a      	lsls	r2, r3, #1
 8114e72:	697b      	ldr	r3, [r7, #20]
 8114e74:	685b      	ldr	r3, [r3, #4]
 8114e76:	085b      	lsrs	r3, r3, #1
 8114e78:	441a      	add	r2, r3
 8114e7a:	697b      	ldr	r3, [r7, #20]
 8114e7c:	685b      	ldr	r3, [r3, #4]
 8114e7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8114e82:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8114e84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8114e86:	2b0f      	cmp	r3, #15
 8114e88:	d916      	bls.n	8114eb8 <UART_SetConfig+0x920>
 8114e8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8114e8c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8114e90:	d212      	bcs.n	8114eb8 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8114e92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8114e94:	b29b      	uxth	r3, r3
 8114e96:	f023 030f 	bic.w	r3, r3, #15
 8114e9a:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8114e9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8114e9e:	085b      	lsrs	r3, r3, #1
 8114ea0:	b29b      	uxth	r3, r3
 8114ea2:	f003 0307 	and.w	r3, r3, #7
 8114ea6:	b29a      	uxth	r2, r3
 8114ea8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8114eaa:	4313      	orrs	r3, r2
 8114eac:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8114eae:	697b      	ldr	r3, [r7, #20]
 8114eb0:	681b      	ldr	r3, [r3, #0]
 8114eb2:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8114eb4:	60da      	str	r2, [r3, #12]
 8114eb6:	e0b9      	b.n	811502c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8114eb8:	2301      	movs	r3, #1
 8114eba:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8114ebe:	e0b5      	b.n	811502c <UART_SetConfig+0xa94>
 8114ec0:	03d09000 	.word	0x03d09000
 8114ec4:	003d0900 	.word	0x003d0900
 8114ec8:	0812ae14 	.word	0x0812ae14
 8114ecc:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8114ed0:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8114ed4:	2b20      	cmp	r3, #32
 8114ed6:	dc49      	bgt.n	8114f6c <UART_SetConfig+0x9d4>
 8114ed8:	2b00      	cmp	r3, #0
 8114eda:	db7c      	blt.n	8114fd6 <UART_SetConfig+0xa3e>
 8114edc:	2b20      	cmp	r3, #32
 8114ede:	d87a      	bhi.n	8114fd6 <UART_SetConfig+0xa3e>
 8114ee0:	a201      	add	r2, pc, #4	@ (adr r2, 8114ee8 <UART_SetConfig+0x950>)
 8114ee2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8114ee6:	bf00      	nop
 8114ee8:	08114f73 	.word	0x08114f73
 8114eec:	08114f7b 	.word	0x08114f7b
 8114ef0:	08114fd7 	.word	0x08114fd7
 8114ef4:	08114fd7 	.word	0x08114fd7
 8114ef8:	08114f83 	.word	0x08114f83
 8114efc:	08114fd7 	.word	0x08114fd7
 8114f00:	08114fd7 	.word	0x08114fd7
 8114f04:	08114fd7 	.word	0x08114fd7
 8114f08:	08114f93 	.word	0x08114f93
 8114f0c:	08114fd7 	.word	0x08114fd7
 8114f10:	08114fd7 	.word	0x08114fd7
 8114f14:	08114fd7 	.word	0x08114fd7
 8114f18:	08114fd7 	.word	0x08114fd7
 8114f1c:	08114fd7 	.word	0x08114fd7
 8114f20:	08114fd7 	.word	0x08114fd7
 8114f24:	08114fd7 	.word	0x08114fd7
 8114f28:	08114fa3 	.word	0x08114fa3
 8114f2c:	08114fd7 	.word	0x08114fd7
 8114f30:	08114fd7 	.word	0x08114fd7
 8114f34:	08114fd7 	.word	0x08114fd7
 8114f38:	08114fd7 	.word	0x08114fd7
 8114f3c:	08114fd7 	.word	0x08114fd7
 8114f40:	08114fd7 	.word	0x08114fd7
 8114f44:	08114fd7 	.word	0x08114fd7
 8114f48:	08114fd7 	.word	0x08114fd7
 8114f4c:	08114fd7 	.word	0x08114fd7
 8114f50:	08114fd7 	.word	0x08114fd7
 8114f54:	08114fd7 	.word	0x08114fd7
 8114f58:	08114fd7 	.word	0x08114fd7
 8114f5c:	08114fd7 	.word	0x08114fd7
 8114f60:	08114fd7 	.word	0x08114fd7
 8114f64:	08114fd7 	.word	0x08114fd7
 8114f68:	08114fc9 	.word	0x08114fc9
 8114f6c:	2b40      	cmp	r3, #64	@ 0x40
 8114f6e:	d02e      	beq.n	8114fce <UART_SetConfig+0xa36>
 8114f70:	e031      	b.n	8114fd6 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8114f72:	f7fd f88b 	bl	811208c <HAL_RCC_GetPCLK1Freq>
 8114f76:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8114f78:	e033      	b.n	8114fe2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8114f7a:	f7fd f89d 	bl	81120b8 <HAL_RCC_GetPCLK2Freq>
 8114f7e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8114f80:	e02f      	b.n	8114fe2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8114f82:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8114f86:	4618      	mov	r0, r3
 8114f88:	f7fe fb4e 	bl	8113628 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8114f8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8114f8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8114f90:	e027      	b.n	8114fe2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8114f92:	f107 0318 	add.w	r3, r7, #24
 8114f96:	4618      	mov	r0, r3
 8114f98:	f7fe fc9a 	bl	81138d0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8114f9c:	69fb      	ldr	r3, [r7, #28]
 8114f9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8114fa0:	e01f      	b.n	8114fe2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8114fa2:	4b2d      	ldr	r3, [pc, #180]	@ (8115058 <UART_SetConfig+0xac0>)
 8114fa4:	681b      	ldr	r3, [r3, #0]
 8114fa6:	f003 0320 	and.w	r3, r3, #32
 8114faa:	2b00      	cmp	r3, #0
 8114fac:	d009      	beq.n	8114fc2 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8114fae:	4b2a      	ldr	r3, [pc, #168]	@ (8115058 <UART_SetConfig+0xac0>)
 8114fb0:	681b      	ldr	r3, [r3, #0]
 8114fb2:	08db      	lsrs	r3, r3, #3
 8114fb4:	f003 0303 	and.w	r3, r3, #3
 8114fb8:	4a28      	ldr	r2, [pc, #160]	@ (811505c <UART_SetConfig+0xac4>)
 8114fba:	fa22 f303 	lsr.w	r3, r2, r3
 8114fbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8114fc0:	e00f      	b.n	8114fe2 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8114fc2:	4b26      	ldr	r3, [pc, #152]	@ (811505c <UART_SetConfig+0xac4>)
 8114fc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8114fc6:	e00c      	b.n	8114fe2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8114fc8:	4b25      	ldr	r3, [pc, #148]	@ (8115060 <UART_SetConfig+0xac8>)
 8114fca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8114fcc:	e009      	b.n	8114fe2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8114fce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8114fd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8114fd4:	e005      	b.n	8114fe2 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8114fd6:	2300      	movs	r3, #0
 8114fd8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8114fda:	2301      	movs	r3, #1
 8114fdc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8114fe0:	bf00      	nop
    }

    if (pclk != 0U)
 8114fe2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8114fe4:	2b00      	cmp	r3, #0
 8114fe6:	d021      	beq.n	811502c <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8114fe8:	697b      	ldr	r3, [r7, #20]
 8114fea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8114fec:	4a1d      	ldr	r2, [pc, #116]	@ (8115064 <UART_SetConfig+0xacc>)
 8114fee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8114ff2:	461a      	mov	r2, r3
 8114ff4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8114ff6:	fbb3 f2f2 	udiv	r2, r3, r2
 8114ffa:	697b      	ldr	r3, [r7, #20]
 8114ffc:	685b      	ldr	r3, [r3, #4]
 8114ffe:	085b      	lsrs	r3, r3, #1
 8115000:	441a      	add	r2, r3
 8115002:	697b      	ldr	r3, [r7, #20]
 8115004:	685b      	ldr	r3, [r3, #4]
 8115006:	fbb2 f3f3 	udiv	r3, r2, r3
 811500a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 811500c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 811500e:	2b0f      	cmp	r3, #15
 8115010:	d909      	bls.n	8115026 <UART_SetConfig+0xa8e>
 8115012:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8115014:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8115018:	d205      	bcs.n	8115026 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 811501a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 811501c:	b29a      	uxth	r2, r3
 811501e:	697b      	ldr	r3, [r7, #20]
 8115020:	681b      	ldr	r3, [r3, #0]
 8115022:	60da      	str	r2, [r3, #12]
 8115024:	e002      	b.n	811502c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8115026:	2301      	movs	r3, #1
 8115028:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 811502c:	697b      	ldr	r3, [r7, #20]
 811502e:	2201      	movs	r2, #1
 8115030:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8115034:	697b      	ldr	r3, [r7, #20]
 8115036:	2201      	movs	r2, #1
 8115038:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 811503c:	697b      	ldr	r3, [r7, #20]
 811503e:	2200      	movs	r2, #0
 8115040:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8115042:	697b      	ldr	r3, [r7, #20]
 8115044:	2200      	movs	r2, #0
 8115046:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8115048:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 811504c:	4618      	mov	r0, r3
 811504e:	3748      	adds	r7, #72	@ 0x48
 8115050:	46bd      	mov	sp, r7
 8115052:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8115056:	bf00      	nop
 8115058:	58024400 	.word	0x58024400
 811505c:	03d09000 	.word	0x03d09000
 8115060:	003d0900 	.word	0x003d0900
 8115064:	0812ae14 	.word	0x0812ae14

08115068 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8115068:	b480      	push	{r7}
 811506a:	b083      	sub	sp, #12
 811506c:	af00      	add	r7, sp, #0
 811506e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8115070:	687b      	ldr	r3, [r7, #4]
 8115072:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8115074:	f003 0308 	and.w	r3, r3, #8
 8115078:	2b00      	cmp	r3, #0
 811507a:	d00a      	beq.n	8115092 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 811507c:	687b      	ldr	r3, [r7, #4]
 811507e:	681b      	ldr	r3, [r3, #0]
 8115080:	685b      	ldr	r3, [r3, #4]
 8115082:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8115086:	687b      	ldr	r3, [r7, #4]
 8115088:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 811508a:	687b      	ldr	r3, [r7, #4]
 811508c:	681b      	ldr	r3, [r3, #0]
 811508e:	430a      	orrs	r2, r1
 8115090:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8115092:	687b      	ldr	r3, [r7, #4]
 8115094:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8115096:	f003 0301 	and.w	r3, r3, #1
 811509a:	2b00      	cmp	r3, #0
 811509c:	d00a      	beq.n	81150b4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 811509e:	687b      	ldr	r3, [r7, #4]
 81150a0:	681b      	ldr	r3, [r3, #0]
 81150a2:	685b      	ldr	r3, [r3, #4]
 81150a4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 81150a8:	687b      	ldr	r3, [r7, #4]
 81150aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 81150ac:	687b      	ldr	r3, [r7, #4]
 81150ae:	681b      	ldr	r3, [r3, #0]
 81150b0:	430a      	orrs	r2, r1
 81150b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 81150b4:	687b      	ldr	r3, [r7, #4]
 81150b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81150b8:	f003 0302 	and.w	r3, r3, #2
 81150bc:	2b00      	cmp	r3, #0
 81150be:	d00a      	beq.n	81150d6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 81150c0:	687b      	ldr	r3, [r7, #4]
 81150c2:	681b      	ldr	r3, [r3, #0]
 81150c4:	685b      	ldr	r3, [r3, #4]
 81150c6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 81150ca:	687b      	ldr	r3, [r7, #4]
 81150cc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 81150ce:	687b      	ldr	r3, [r7, #4]
 81150d0:	681b      	ldr	r3, [r3, #0]
 81150d2:	430a      	orrs	r2, r1
 81150d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 81150d6:	687b      	ldr	r3, [r7, #4]
 81150d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81150da:	f003 0304 	and.w	r3, r3, #4
 81150de:	2b00      	cmp	r3, #0
 81150e0:	d00a      	beq.n	81150f8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 81150e2:	687b      	ldr	r3, [r7, #4]
 81150e4:	681b      	ldr	r3, [r3, #0]
 81150e6:	685b      	ldr	r3, [r3, #4]
 81150e8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 81150ec:	687b      	ldr	r3, [r7, #4]
 81150ee:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 81150f0:	687b      	ldr	r3, [r7, #4]
 81150f2:	681b      	ldr	r3, [r3, #0]
 81150f4:	430a      	orrs	r2, r1
 81150f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 81150f8:	687b      	ldr	r3, [r7, #4]
 81150fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81150fc:	f003 0310 	and.w	r3, r3, #16
 8115100:	2b00      	cmp	r3, #0
 8115102:	d00a      	beq.n	811511a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8115104:	687b      	ldr	r3, [r7, #4]
 8115106:	681b      	ldr	r3, [r3, #0]
 8115108:	689b      	ldr	r3, [r3, #8]
 811510a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 811510e:	687b      	ldr	r3, [r7, #4]
 8115110:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8115112:	687b      	ldr	r3, [r7, #4]
 8115114:	681b      	ldr	r3, [r3, #0]
 8115116:	430a      	orrs	r2, r1
 8115118:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 811511a:	687b      	ldr	r3, [r7, #4]
 811511c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 811511e:	f003 0320 	and.w	r3, r3, #32
 8115122:	2b00      	cmp	r3, #0
 8115124:	d00a      	beq.n	811513c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8115126:	687b      	ldr	r3, [r7, #4]
 8115128:	681b      	ldr	r3, [r3, #0]
 811512a:	689b      	ldr	r3, [r3, #8]
 811512c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8115130:	687b      	ldr	r3, [r7, #4]
 8115132:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8115134:	687b      	ldr	r3, [r7, #4]
 8115136:	681b      	ldr	r3, [r3, #0]
 8115138:	430a      	orrs	r2, r1
 811513a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 811513c:	687b      	ldr	r3, [r7, #4]
 811513e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8115140:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8115144:	2b00      	cmp	r3, #0
 8115146:	d01a      	beq.n	811517e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8115148:	687b      	ldr	r3, [r7, #4]
 811514a:	681b      	ldr	r3, [r3, #0]
 811514c:	685b      	ldr	r3, [r3, #4]
 811514e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8115152:	687b      	ldr	r3, [r7, #4]
 8115154:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8115156:	687b      	ldr	r3, [r7, #4]
 8115158:	681b      	ldr	r3, [r3, #0]
 811515a:	430a      	orrs	r2, r1
 811515c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 811515e:	687b      	ldr	r3, [r7, #4]
 8115160:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8115162:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8115166:	d10a      	bne.n	811517e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8115168:	687b      	ldr	r3, [r7, #4]
 811516a:	681b      	ldr	r3, [r3, #0]
 811516c:	685b      	ldr	r3, [r3, #4]
 811516e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8115172:	687b      	ldr	r3, [r7, #4]
 8115174:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8115176:	687b      	ldr	r3, [r7, #4]
 8115178:	681b      	ldr	r3, [r3, #0]
 811517a:	430a      	orrs	r2, r1
 811517c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 811517e:	687b      	ldr	r3, [r7, #4]
 8115180:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8115182:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8115186:	2b00      	cmp	r3, #0
 8115188:	d00a      	beq.n	81151a0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 811518a:	687b      	ldr	r3, [r7, #4]
 811518c:	681b      	ldr	r3, [r3, #0]
 811518e:	685b      	ldr	r3, [r3, #4]
 8115190:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8115194:	687b      	ldr	r3, [r7, #4]
 8115196:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8115198:	687b      	ldr	r3, [r7, #4]
 811519a:	681b      	ldr	r3, [r3, #0]
 811519c:	430a      	orrs	r2, r1
 811519e:	605a      	str	r2, [r3, #4]
  }
}
 81151a0:	bf00      	nop
 81151a2:	370c      	adds	r7, #12
 81151a4:	46bd      	mov	sp, r7
 81151a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81151aa:	4770      	bx	lr

081151ac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 81151ac:	b580      	push	{r7, lr}
 81151ae:	b098      	sub	sp, #96	@ 0x60
 81151b0:	af02      	add	r7, sp, #8
 81151b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 81151b4:	687b      	ldr	r3, [r7, #4]
 81151b6:	2200      	movs	r2, #0
 81151b8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 81151bc:	f7f9 fe8c 	bl	810eed8 <HAL_GetTick>
 81151c0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 81151c2:	687b      	ldr	r3, [r7, #4]
 81151c4:	681b      	ldr	r3, [r3, #0]
 81151c6:	681b      	ldr	r3, [r3, #0]
 81151c8:	f003 0308 	and.w	r3, r3, #8
 81151cc:	2b08      	cmp	r3, #8
 81151ce:	d12f      	bne.n	8115230 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 81151d0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 81151d4:	9300      	str	r3, [sp, #0]
 81151d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 81151d8:	2200      	movs	r2, #0
 81151da:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 81151de:	6878      	ldr	r0, [r7, #4]
 81151e0:	f000 f88e 	bl	8115300 <UART_WaitOnFlagUntilTimeout>
 81151e4:	4603      	mov	r3, r0
 81151e6:	2b00      	cmp	r3, #0
 81151e8:	d022      	beq.n	8115230 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 81151ea:	687b      	ldr	r3, [r7, #4]
 81151ec:	681b      	ldr	r3, [r3, #0]
 81151ee:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 81151f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81151f2:	e853 3f00 	ldrex	r3, [r3]
 81151f6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 81151f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81151fa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 81151fe:	653b      	str	r3, [r7, #80]	@ 0x50
 8115200:	687b      	ldr	r3, [r7, #4]
 8115202:	681b      	ldr	r3, [r3, #0]
 8115204:	461a      	mov	r2, r3
 8115206:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8115208:	647b      	str	r3, [r7, #68]	@ 0x44
 811520a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 811520c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 811520e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8115210:	e841 2300 	strex	r3, r2, [r1]
 8115214:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8115216:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8115218:	2b00      	cmp	r3, #0
 811521a:	d1e6      	bne.n	81151ea <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 811521c:	687b      	ldr	r3, [r7, #4]
 811521e:	2220      	movs	r2, #32
 8115220:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8115224:	687b      	ldr	r3, [r7, #4]
 8115226:	2200      	movs	r2, #0
 8115228:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 811522c:	2303      	movs	r3, #3
 811522e:	e063      	b.n	81152f8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8115230:	687b      	ldr	r3, [r7, #4]
 8115232:	681b      	ldr	r3, [r3, #0]
 8115234:	681b      	ldr	r3, [r3, #0]
 8115236:	f003 0304 	and.w	r3, r3, #4
 811523a:	2b04      	cmp	r3, #4
 811523c:	d149      	bne.n	81152d2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 811523e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8115242:	9300      	str	r3, [sp, #0]
 8115244:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8115246:	2200      	movs	r2, #0
 8115248:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 811524c:	6878      	ldr	r0, [r7, #4]
 811524e:	f000 f857 	bl	8115300 <UART_WaitOnFlagUntilTimeout>
 8115252:	4603      	mov	r3, r0
 8115254:	2b00      	cmp	r3, #0
 8115256:	d03c      	beq.n	81152d2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8115258:	687b      	ldr	r3, [r7, #4]
 811525a:	681b      	ldr	r3, [r3, #0]
 811525c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 811525e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8115260:	e853 3f00 	ldrex	r3, [r3]
 8115264:	623b      	str	r3, [r7, #32]
   return(result);
 8115266:	6a3b      	ldr	r3, [r7, #32]
 8115268:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 811526c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 811526e:	687b      	ldr	r3, [r7, #4]
 8115270:	681b      	ldr	r3, [r3, #0]
 8115272:	461a      	mov	r2, r3
 8115274:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8115276:	633b      	str	r3, [r7, #48]	@ 0x30
 8115278:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 811527a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 811527c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 811527e:	e841 2300 	strex	r3, r2, [r1]
 8115282:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8115284:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8115286:	2b00      	cmp	r3, #0
 8115288:	d1e6      	bne.n	8115258 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 811528a:	687b      	ldr	r3, [r7, #4]
 811528c:	681b      	ldr	r3, [r3, #0]
 811528e:	3308      	adds	r3, #8
 8115290:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8115292:	693b      	ldr	r3, [r7, #16]
 8115294:	e853 3f00 	ldrex	r3, [r3]
 8115298:	60fb      	str	r3, [r7, #12]
   return(result);
 811529a:	68fb      	ldr	r3, [r7, #12]
 811529c:	f023 0301 	bic.w	r3, r3, #1
 81152a0:	64bb      	str	r3, [r7, #72]	@ 0x48
 81152a2:	687b      	ldr	r3, [r7, #4]
 81152a4:	681b      	ldr	r3, [r3, #0]
 81152a6:	3308      	adds	r3, #8
 81152a8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 81152aa:	61fa      	str	r2, [r7, #28]
 81152ac:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 81152ae:	69b9      	ldr	r1, [r7, #24]
 81152b0:	69fa      	ldr	r2, [r7, #28]
 81152b2:	e841 2300 	strex	r3, r2, [r1]
 81152b6:	617b      	str	r3, [r7, #20]
   return(result);
 81152b8:	697b      	ldr	r3, [r7, #20]
 81152ba:	2b00      	cmp	r3, #0
 81152bc:	d1e5      	bne.n	811528a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 81152be:	687b      	ldr	r3, [r7, #4]
 81152c0:	2220      	movs	r2, #32
 81152c2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 81152c6:	687b      	ldr	r3, [r7, #4]
 81152c8:	2200      	movs	r2, #0
 81152ca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 81152ce:	2303      	movs	r3, #3
 81152d0:	e012      	b.n	81152f8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 81152d2:	687b      	ldr	r3, [r7, #4]
 81152d4:	2220      	movs	r2, #32
 81152d6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 81152da:	687b      	ldr	r3, [r7, #4]
 81152dc:	2220      	movs	r2, #32
 81152de:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 81152e2:	687b      	ldr	r3, [r7, #4]
 81152e4:	2200      	movs	r2, #0
 81152e6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 81152e8:	687b      	ldr	r3, [r7, #4]
 81152ea:	2200      	movs	r2, #0
 81152ec:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 81152ee:	687b      	ldr	r3, [r7, #4]
 81152f0:	2200      	movs	r2, #0
 81152f2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 81152f6:	2300      	movs	r3, #0
}
 81152f8:	4618      	mov	r0, r3
 81152fa:	3758      	adds	r7, #88	@ 0x58
 81152fc:	46bd      	mov	sp, r7
 81152fe:	bd80      	pop	{r7, pc}

08115300 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8115300:	b580      	push	{r7, lr}
 8115302:	b084      	sub	sp, #16
 8115304:	af00      	add	r7, sp, #0
 8115306:	60f8      	str	r0, [r7, #12]
 8115308:	60b9      	str	r1, [r7, #8]
 811530a:	603b      	str	r3, [r7, #0]
 811530c:	4613      	mov	r3, r2
 811530e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8115310:	e04f      	b.n	81153b2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8115312:	69bb      	ldr	r3, [r7, #24]
 8115314:	f1b3 3fff 	cmp.w	r3, #4294967295
 8115318:	d04b      	beq.n	81153b2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 811531a:	f7f9 fddd 	bl	810eed8 <HAL_GetTick>
 811531e:	4602      	mov	r2, r0
 8115320:	683b      	ldr	r3, [r7, #0]
 8115322:	1ad3      	subs	r3, r2, r3
 8115324:	69ba      	ldr	r2, [r7, #24]
 8115326:	429a      	cmp	r2, r3
 8115328:	d302      	bcc.n	8115330 <UART_WaitOnFlagUntilTimeout+0x30>
 811532a:	69bb      	ldr	r3, [r7, #24]
 811532c:	2b00      	cmp	r3, #0
 811532e:	d101      	bne.n	8115334 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8115330:	2303      	movs	r3, #3
 8115332:	e04e      	b.n	81153d2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8115334:	68fb      	ldr	r3, [r7, #12]
 8115336:	681b      	ldr	r3, [r3, #0]
 8115338:	681b      	ldr	r3, [r3, #0]
 811533a:	f003 0304 	and.w	r3, r3, #4
 811533e:	2b00      	cmp	r3, #0
 8115340:	d037      	beq.n	81153b2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8115342:	68bb      	ldr	r3, [r7, #8]
 8115344:	2b80      	cmp	r3, #128	@ 0x80
 8115346:	d034      	beq.n	81153b2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8115348:	68bb      	ldr	r3, [r7, #8]
 811534a:	2b40      	cmp	r3, #64	@ 0x40
 811534c:	d031      	beq.n	81153b2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 811534e:	68fb      	ldr	r3, [r7, #12]
 8115350:	681b      	ldr	r3, [r3, #0]
 8115352:	69db      	ldr	r3, [r3, #28]
 8115354:	f003 0308 	and.w	r3, r3, #8
 8115358:	2b08      	cmp	r3, #8
 811535a:	d110      	bne.n	811537e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 811535c:	68fb      	ldr	r3, [r7, #12]
 811535e:	681b      	ldr	r3, [r3, #0]
 8115360:	2208      	movs	r2, #8
 8115362:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8115364:	68f8      	ldr	r0, [r7, #12]
 8115366:	f000 f838 	bl	81153da <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 811536a:	68fb      	ldr	r3, [r7, #12]
 811536c:	2208      	movs	r2, #8
 811536e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8115372:	68fb      	ldr	r3, [r7, #12]
 8115374:	2200      	movs	r2, #0
 8115376:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 811537a:	2301      	movs	r3, #1
 811537c:	e029      	b.n	81153d2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 811537e:	68fb      	ldr	r3, [r7, #12]
 8115380:	681b      	ldr	r3, [r3, #0]
 8115382:	69db      	ldr	r3, [r3, #28]
 8115384:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8115388:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 811538c:	d111      	bne.n	81153b2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 811538e:	68fb      	ldr	r3, [r7, #12]
 8115390:	681b      	ldr	r3, [r3, #0]
 8115392:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8115396:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8115398:	68f8      	ldr	r0, [r7, #12]
 811539a:	f000 f81e 	bl	81153da <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 811539e:	68fb      	ldr	r3, [r7, #12]
 81153a0:	2220      	movs	r2, #32
 81153a2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 81153a6:	68fb      	ldr	r3, [r7, #12]
 81153a8:	2200      	movs	r2, #0
 81153aa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 81153ae:	2303      	movs	r3, #3
 81153b0:	e00f      	b.n	81153d2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 81153b2:	68fb      	ldr	r3, [r7, #12]
 81153b4:	681b      	ldr	r3, [r3, #0]
 81153b6:	69da      	ldr	r2, [r3, #28]
 81153b8:	68bb      	ldr	r3, [r7, #8]
 81153ba:	4013      	ands	r3, r2
 81153bc:	68ba      	ldr	r2, [r7, #8]
 81153be:	429a      	cmp	r2, r3
 81153c0:	bf0c      	ite	eq
 81153c2:	2301      	moveq	r3, #1
 81153c4:	2300      	movne	r3, #0
 81153c6:	b2db      	uxtb	r3, r3
 81153c8:	461a      	mov	r2, r3
 81153ca:	79fb      	ldrb	r3, [r7, #7]
 81153cc:	429a      	cmp	r2, r3
 81153ce:	d0a0      	beq.n	8115312 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 81153d0:	2300      	movs	r3, #0
}
 81153d2:	4618      	mov	r0, r3
 81153d4:	3710      	adds	r7, #16
 81153d6:	46bd      	mov	sp, r7
 81153d8:	bd80      	pop	{r7, pc}

081153da <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 81153da:	b480      	push	{r7}
 81153dc:	b095      	sub	sp, #84	@ 0x54
 81153de:	af00      	add	r7, sp, #0
 81153e0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 81153e2:	687b      	ldr	r3, [r7, #4]
 81153e4:	681b      	ldr	r3, [r3, #0]
 81153e6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 81153e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81153ea:	e853 3f00 	ldrex	r3, [r3]
 81153ee:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 81153f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81153f2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 81153f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 81153f8:	687b      	ldr	r3, [r7, #4]
 81153fa:	681b      	ldr	r3, [r3, #0]
 81153fc:	461a      	mov	r2, r3
 81153fe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8115400:	643b      	str	r3, [r7, #64]	@ 0x40
 8115402:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8115404:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8115406:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8115408:	e841 2300 	strex	r3, r2, [r1]
 811540c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 811540e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8115410:	2b00      	cmp	r3, #0
 8115412:	d1e6      	bne.n	81153e2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8115414:	687b      	ldr	r3, [r7, #4]
 8115416:	681b      	ldr	r3, [r3, #0]
 8115418:	3308      	adds	r3, #8
 811541a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 811541c:	6a3b      	ldr	r3, [r7, #32]
 811541e:	e853 3f00 	ldrex	r3, [r3]
 8115422:	61fb      	str	r3, [r7, #28]
   return(result);
 8115424:	69fb      	ldr	r3, [r7, #28]
 8115426:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 811542a:	f023 0301 	bic.w	r3, r3, #1
 811542e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8115430:	687b      	ldr	r3, [r7, #4]
 8115432:	681b      	ldr	r3, [r3, #0]
 8115434:	3308      	adds	r3, #8
 8115436:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8115438:	62fa      	str	r2, [r7, #44]	@ 0x2c
 811543a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 811543c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 811543e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8115440:	e841 2300 	strex	r3, r2, [r1]
 8115444:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8115446:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8115448:	2b00      	cmp	r3, #0
 811544a:	d1e3      	bne.n	8115414 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 811544c:	687b      	ldr	r3, [r7, #4]
 811544e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8115450:	2b01      	cmp	r3, #1
 8115452:	d118      	bne.n	8115486 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8115454:	687b      	ldr	r3, [r7, #4]
 8115456:	681b      	ldr	r3, [r3, #0]
 8115458:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 811545a:	68fb      	ldr	r3, [r7, #12]
 811545c:	e853 3f00 	ldrex	r3, [r3]
 8115460:	60bb      	str	r3, [r7, #8]
   return(result);
 8115462:	68bb      	ldr	r3, [r7, #8]
 8115464:	f023 0310 	bic.w	r3, r3, #16
 8115468:	647b      	str	r3, [r7, #68]	@ 0x44
 811546a:	687b      	ldr	r3, [r7, #4]
 811546c:	681b      	ldr	r3, [r3, #0]
 811546e:	461a      	mov	r2, r3
 8115470:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8115472:	61bb      	str	r3, [r7, #24]
 8115474:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8115476:	6979      	ldr	r1, [r7, #20]
 8115478:	69ba      	ldr	r2, [r7, #24]
 811547a:	e841 2300 	strex	r3, r2, [r1]
 811547e:	613b      	str	r3, [r7, #16]
   return(result);
 8115480:	693b      	ldr	r3, [r7, #16]
 8115482:	2b00      	cmp	r3, #0
 8115484:	d1e6      	bne.n	8115454 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8115486:	687b      	ldr	r3, [r7, #4]
 8115488:	2220      	movs	r2, #32
 811548a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 811548e:	687b      	ldr	r3, [r7, #4]
 8115490:	2200      	movs	r2, #0
 8115492:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8115494:	687b      	ldr	r3, [r7, #4]
 8115496:	2200      	movs	r2, #0
 8115498:	675a      	str	r2, [r3, #116]	@ 0x74
}
 811549a:	bf00      	nop
 811549c:	3754      	adds	r7, #84	@ 0x54
 811549e:	46bd      	mov	sp, r7
 81154a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81154a4:	4770      	bx	lr

081154a6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 81154a6:	b480      	push	{r7}
 81154a8:	b085      	sub	sp, #20
 81154aa:	af00      	add	r7, sp, #0
 81154ac:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 81154ae:	687b      	ldr	r3, [r7, #4]
 81154b0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 81154b4:	2b01      	cmp	r3, #1
 81154b6:	d101      	bne.n	81154bc <HAL_UARTEx_DisableFifoMode+0x16>
 81154b8:	2302      	movs	r3, #2
 81154ba:	e027      	b.n	811550c <HAL_UARTEx_DisableFifoMode+0x66>
 81154bc:	687b      	ldr	r3, [r7, #4]
 81154be:	2201      	movs	r2, #1
 81154c0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 81154c4:	687b      	ldr	r3, [r7, #4]
 81154c6:	2224      	movs	r2, #36	@ 0x24
 81154c8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 81154cc:	687b      	ldr	r3, [r7, #4]
 81154ce:	681b      	ldr	r3, [r3, #0]
 81154d0:	681b      	ldr	r3, [r3, #0]
 81154d2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 81154d4:	687b      	ldr	r3, [r7, #4]
 81154d6:	681b      	ldr	r3, [r3, #0]
 81154d8:	681a      	ldr	r2, [r3, #0]
 81154da:	687b      	ldr	r3, [r7, #4]
 81154dc:	681b      	ldr	r3, [r3, #0]
 81154de:	f022 0201 	bic.w	r2, r2, #1
 81154e2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 81154e4:	68fb      	ldr	r3, [r7, #12]
 81154e6:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 81154ea:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 81154ec:	687b      	ldr	r3, [r7, #4]
 81154ee:	2200      	movs	r2, #0
 81154f0:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 81154f2:	687b      	ldr	r3, [r7, #4]
 81154f4:	681b      	ldr	r3, [r3, #0]
 81154f6:	68fa      	ldr	r2, [r7, #12]
 81154f8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 81154fa:	687b      	ldr	r3, [r7, #4]
 81154fc:	2220      	movs	r2, #32
 81154fe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8115502:	687b      	ldr	r3, [r7, #4]
 8115504:	2200      	movs	r2, #0
 8115506:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 811550a:	2300      	movs	r3, #0
}
 811550c:	4618      	mov	r0, r3
 811550e:	3714      	adds	r7, #20
 8115510:	46bd      	mov	sp, r7
 8115512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8115516:	4770      	bx	lr

08115518 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8115518:	b580      	push	{r7, lr}
 811551a:	b084      	sub	sp, #16
 811551c:	af00      	add	r7, sp, #0
 811551e:	6078      	str	r0, [r7, #4]
 8115520:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8115522:	687b      	ldr	r3, [r7, #4]
 8115524:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8115528:	2b01      	cmp	r3, #1
 811552a:	d101      	bne.n	8115530 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 811552c:	2302      	movs	r3, #2
 811552e:	e02d      	b.n	811558c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8115530:	687b      	ldr	r3, [r7, #4]
 8115532:	2201      	movs	r2, #1
 8115534:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8115538:	687b      	ldr	r3, [r7, #4]
 811553a:	2224      	movs	r2, #36	@ 0x24
 811553c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8115540:	687b      	ldr	r3, [r7, #4]
 8115542:	681b      	ldr	r3, [r3, #0]
 8115544:	681b      	ldr	r3, [r3, #0]
 8115546:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8115548:	687b      	ldr	r3, [r7, #4]
 811554a:	681b      	ldr	r3, [r3, #0]
 811554c:	681a      	ldr	r2, [r3, #0]
 811554e:	687b      	ldr	r3, [r7, #4]
 8115550:	681b      	ldr	r3, [r3, #0]
 8115552:	f022 0201 	bic.w	r2, r2, #1
 8115556:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8115558:	687b      	ldr	r3, [r7, #4]
 811555a:	681b      	ldr	r3, [r3, #0]
 811555c:	689b      	ldr	r3, [r3, #8]
 811555e:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8115562:	687b      	ldr	r3, [r7, #4]
 8115564:	681b      	ldr	r3, [r3, #0]
 8115566:	683a      	ldr	r2, [r7, #0]
 8115568:	430a      	orrs	r2, r1
 811556a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 811556c:	6878      	ldr	r0, [r7, #4]
 811556e:	f000 f84f 	bl	8115610 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8115572:	687b      	ldr	r3, [r7, #4]
 8115574:	681b      	ldr	r3, [r3, #0]
 8115576:	68fa      	ldr	r2, [r7, #12]
 8115578:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 811557a:	687b      	ldr	r3, [r7, #4]
 811557c:	2220      	movs	r2, #32
 811557e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8115582:	687b      	ldr	r3, [r7, #4]
 8115584:	2200      	movs	r2, #0
 8115586:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 811558a:	2300      	movs	r3, #0
}
 811558c:	4618      	mov	r0, r3
 811558e:	3710      	adds	r7, #16
 8115590:	46bd      	mov	sp, r7
 8115592:	bd80      	pop	{r7, pc}

08115594 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8115594:	b580      	push	{r7, lr}
 8115596:	b084      	sub	sp, #16
 8115598:	af00      	add	r7, sp, #0
 811559a:	6078      	str	r0, [r7, #4]
 811559c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 811559e:	687b      	ldr	r3, [r7, #4]
 81155a0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 81155a4:	2b01      	cmp	r3, #1
 81155a6:	d101      	bne.n	81155ac <HAL_UARTEx_SetRxFifoThreshold+0x18>
 81155a8:	2302      	movs	r3, #2
 81155aa:	e02d      	b.n	8115608 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 81155ac:	687b      	ldr	r3, [r7, #4]
 81155ae:	2201      	movs	r2, #1
 81155b0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 81155b4:	687b      	ldr	r3, [r7, #4]
 81155b6:	2224      	movs	r2, #36	@ 0x24
 81155b8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 81155bc:	687b      	ldr	r3, [r7, #4]
 81155be:	681b      	ldr	r3, [r3, #0]
 81155c0:	681b      	ldr	r3, [r3, #0]
 81155c2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 81155c4:	687b      	ldr	r3, [r7, #4]
 81155c6:	681b      	ldr	r3, [r3, #0]
 81155c8:	681a      	ldr	r2, [r3, #0]
 81155ca:	687b      	ldr	r3, [r7, #4]
 81155cc:	681b      	ldr	r3, [r3, #0]
 81155ce:	f022 0201 	bic.w	r2, r2, #1
 81155d2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 81155d4:	687b      	ldr	r3, [r7, #4]
 81155d6:	681b      	ldr	r3, [r3, #0]
 81155d8:	689b      	ldr	r3, [r3, #8]
 81155da:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 81155de:	687b      	ldr	r3, [r7, #4]
 81155e0:	681b      	ldr	r3, [r3, #0]
 81155e2:	683a      	ldr	r2, [r7, #0]
 81155e4:	430a      	orrs	r2, r1
 81155e6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 81155e8:	6878      	ldr	r0, [r7, #4]
 81155ea:	f000 f811 	bl	8115610 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 81155ee:	687b      	ldr	r3, [r7, #4]
 81155f0:	681b      	ldr	r3, [r3, #0]
 81155f2:	68fa      	ldr	r2, [r7, #12]
 81155f4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 81155f6:	687b      	ldr	r3, [r7, #4]
 81155f8:	2220      	movs	r2, #32
 81155fa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 81155fe:	687b      	ldr	r3, [r7, #4]
 8115600:	2200      	movs	r2, #0
 8115602:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8115606:	2300      	movs	r3, #0
}
 8115608:	4618      	mov	r0, r3
 811560a:	3710      	adds	r7, #16
 811560c:	46bd      	mov	sp, r7
 811560e:	bd80      	pop	{r7, pc}

08115610 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8115610:	b480      	push	{r7}
 8115612:	b085      	sub	sp, #20
 8115614:	af00      	add	r7, sp, #0
 8115616:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8115618:	687b      	ldr	r3, [r7, #4]
 811561a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 811561c:	2b00      	cmp	r3, #0
 811561e:	d108      	bne.n	8115632 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8115620:	687b      	ldr	r3, [r7, #4]
 8115622:	2201      	movs	r2, #1
 8115624:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8115628:	687b      	ldr	r3, [r7, #4]
 811562a:	2201      	movs	r2, #1
 811562c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8115630:	e031      	b.n	8115696 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8115632:	2310      	movs	r3, #16
 8115634:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8115636:	2310      	movs	r3, #16
 8115638:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 811563a:	687b      	ldr	r3, [r7, #4]
 811563c:	681b      	ldr	r3, [r3, #0]
 811563e:	689b      	ldr	r3, [r3, #8]
 8115640:	0e5b      	lsrs	r3, r3, #25
 8115642:	b2db      	uxtb	r3, r3
 8115644:	f003 0307 	and.w	r3, r3, #7
 8115648:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 811564a:	687b      	ldr	r3, [r7, #4]
 811564c:	681b      	ldr	r3, [r3, #0]
 811564e:	689b      	ldr	r3, [r3, #8]
 8115650:	0f5b      	lsrs	r3, r3, #29
 8115652:	b2db      	uxtb	r3, r3
 8115654:	f003 0307 	and.w	r3, r3, #7
 8115658:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 811565a:	7bbb      	ldrb	r3, [r7, #14]
 811565c:	7b3a      	ldrb	r2, [r7, #12]
 811565e:	4911      	ldr	r1, [pc, #68]	@ (81156a4 <UARTEx_SetNbDataToProcess+0x94>)
 8115660:	5c8a      	ldrb	r2, [r1, r2]
 8115662:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8115666:	7b3a      	ldrb	r2, [r7, #12]
 8115668:	490f      	ldr	r1, [pc, #60]	@ (81156a8 <UARTEx_SetNbDataToProcess+0x98>)
 811566a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 811566c:	fb93 f3f2 	sdiv	r3, r3, r2
 8115670:	b29a      	uxth	r2, r3
 8115672:	687b      	ldr	r3, [r7, #4]
 8115674:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8115678:	7bfb      	ldrb	r3, [r7, #15]
 811567a:	7b7a      	ldrb	r2, [r7, #13]
 811567c:	4909      	ldr	r1, [pc, #36]	@ (81156a4 <UARTEx_SetNbDataToProcess+0x94>)
 811567e:	5c8a      	ldrb	r2, [r1, r2]
 8115680:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8115684:	7b7a      	ldrb	r2, [r7, #13]
 8115686:	4908      	ldr	r1, [pc, #32]	@ (81156a8 <UARTEx_SetNbDataToProcess+0x98>)
 8115688:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 811568a:	fb93 f3f2 	sdiv	r3, r3, r2
 811568e:	b29a      	uxth	r2, r3
 8115690:	687b      	ldr	r3, [r7, #4]
 8115692:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8115696:	bf00      	nop
 8115698:	3714      	adds	r7, #20
 811569a:	46bd      	mov	sp, r7
 811569c:	f85d 7b04 	ldr.w	r7, [sp], #4
 81156a0:	4770      	bx	lr
 81156a2:	bf00      	nop
 81156a4:	0812ae2c 	.word	0x0812ae2c
 81156a8:	0812ae34 	.word	0x0812ae34

081156ac <__NVIC_SetPriority>:
{
 81156ac:	b480      	push	{r7}
 81156ae:	b083      	sub	sp, #12
 81156b0:	af00      	add	r7, sp, #0
 81156b2:	4603      	mov	r3, r0
 81156b4:	6039      	str	r1, [r7, #0]
 81156b6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 81156b8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81156bc:	2b00      	cmp	r3, #0
 81156be:	db0a      	blt.n	81156d6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 81156c0:	683b      	ldr	r3, [r7, #0]
 81156c2:	b2da      	uxtb	r2, r3
 81156c4:	490c      	ldr	r1, [pc, #48]	@ (81156f8 <__NVIC_SetPriority+0x4c>)
 81156c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81156ca:	0112      	lsls	r2, r2, #4
 81156cc:	b2d2      	uxtb	r2, r2
 81156ce:	440b      	add	r3, r1
 81156d0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 81156d4:	e00a      	b.n	81156ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 81156d6:	683b      	ldr	r3, [r7, #0]
 81156d8:	b2da      	uxtb	r2, r3
 81156da:	4908      	ldr	r1, [pc, #32]	@ (81156fc <__NVIC_SetPriority+0x50>)
 81156dc:	88fb      	ldrh	r3, [r7, #6]
 81156de:	f003 030f 	and.w	r3, r3, #15
 81156e2:	3b04      	subs	r3, #4
 81156e4:	0112      	lsls	r2, r2, #4
 81156e6:	b2d2      	uxtb	r2, r2
 81156e8:	440b      	add	r3, r1
 81156ea:	761a      	strb	r2, [r3, #24]
}
 81156ec:	bf00      	nop
 81156ee:	370c      	adds	r7, #12
 81156f0:	46bd      	mov	sp, r7
 81156f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81156f6:	4770      	bx	lr
 81156f8:	e000e100 	.word	0xe000e100
 81156fc:	e000ed00 	.word	0xe000ed00

08115700 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8115700:	b580      	push	{r7, lr}
 8115702:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8115704:	4b05      	ldr	r3, [pc, #20]	@ (811571c <SysTick_Handler+0x1c>)
 8115706:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8115708:	f003 fd58 	bl	81191bc <xTaskGetSchedulerState>
 811570c:	4603      	mov	r3, r0
 811570e:	2b01      	cmp	r3, #1
 8115710:	d001      	beq.n	8115716 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8115712:	f001 f911 	bl	8116938 <xPortSysTickHandler>
  }
}
 8115716:	bf00      	nop
 8115718:	bd80      	pop	{r7, pc}
 811571a:	bf00      	nop
 811571c:	e000e010 	.word	0xe000e010

08115720 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8115720:	b580      	push	{r7, lr}
 8115722:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8115724:	2100      	movs	r1, #0
 8115726:	f06f 0004 	mvn.w	r0, #4
 811572a:	f7ff ffbf 	bl	81156ac <__NVIC_SetPriority>
#endif
}
 811572e:	bf00      	nop
 8115730:	bd80      	pop	{r7, pc}
	...

08115734 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8115734:	b480      	push	{r7}
 8115736:	b083      	sub	sp, #12
 8115738:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 811573a:	f3ef 8305 	mrs	r3, IPSR
 811573e:	603b      	str	r3, [r7, #0]
  return(result);
 8115740:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8115742:	2b00      	cmp	r3, #0
 8115744:	d003      	beq.n	811574e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8115746:	f06f 0305 	mvn.w	r3, #5
 811574a:	607b      	str	r3, [r7, #4]
 811574c:	e00c      	b.n	8115768 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 811574e:	4b0a      	ldr	r3, [pc, #40]	@ (8115778 <osKernelInitialize+0x44>)
 8115750:	681b      	ldr	r3, [r3, #0]
 8115752:	2b00      	cmp	r3, #0
 8115754:	d105      	bne.n	8115762 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8115756:	4b08      	ldr	r3, [pc, #32]	@ (8115778 <osKernelInitialize+0x44>)
 8115758:	2201      	movs	r2, #1
 811575a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 811575c:	2300      	movs	r3, #0
 811575e:	607b      	str	r3, [r7, #4]
 8115760:	e002      	b.n	8115768 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8115762:	f04f 33ff 	mov.w	r3, #4294967295
 8115766:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8115768:	687b      	ldr	r3, [r7, #4]
}
 811576a:	4618      	mov	r0, r3
 811576c:	370c      	adds	r7, #12
 811576e:	46bd      	mov	sp, r7
 8115770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8115774:	4770      	bx	lr
 8115776:	bf00      	nop
 8115778:	10000498 	.word	0x10000498

0811577c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 811577c:	b580      	push	{r7, lr}
 811577e:	b082      	sub	sp, #8
 8115780:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8115782:	f3ef 8305 	mrs	r3, IPSR
 8115786:	603b      	str	r3, [r7, #0]
  return(result);
 8115788:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 811578a:	2b00      	cmp	r3, #0
 811578c:	d003      	beq.n	8115796 <osKernelStart+0x1a>
    stat = osErrorISR;
 811578e:	f06f 0305 	mvn.w	r3, #5
 8115792:	607b      	str	r3, [r7, #4]
 8115794:	e010      	b.n	81157b8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8115796:	4b0b      	ldr	r3, [pc, #44]	@ (81157c4 <osKernelStart+0x48>)
 8115798:	681b      	ldr	r3, [r3, #0]
 811579a:	2b01      	cmp	r3, #1
 811579c:	d109      	bne.n	81157b2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 811579e:	f7ff ffbf 	bl	8115720 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 81157a2:	4b08      	ldr	r3, [pc, #32]	@ (81157c4 <osKernelStart+0x48>)
 81157a4:	2202      	movs	r2, #2
 81157a6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 81157a8:	f003 f85a 	bl	8118860 <vTaskStartScheduler>
      stat = osOK;
 81157ac:	2300      	movs	r3, #0
 81157ae:	607b      	str	r3, [r7, #4]
 81157b0:	e002      	b.n	81157b8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 81157b2:	f04f 33ff 	mov.w	r3, #4294967295
 81157b6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 81157b8:	687b      	ldr	r3, [r7, #4]
}
 81157ba:	4618      	mov	r0, r3
 81157bc:	3708      	adds	r7, #8
 81157be:	46bd      	mov	sp, r7
 81157c0:	bd80      	pop	{r7, pc}
 81157c2:	bf00      	nop
 81157c4:	10000498 	.word	0x10000498

081157c8 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 81157c8:	b580      	push	{r7, lr}
 81157ca:	b082      	sub	sp, #8
 81157cc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 81157ce:	f3ef 8305 	mrs	r3, IPSR
 81157d2:	603b      	str	r3, [r7, #0]
  return(result);
 81157d4:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 81157d6:	2b00      	cmp	r3, #0
 81157d8:	d003      	beq.n	81157e2 <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 81157da:	f003 f96d 	bl	8118ab8 <xTaskGetTickCountFromISR>
 81157de:	6078      	str	r0, [r7, #4]
 81157e0:	e002      	b.n	81157e8 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 81157e2:	f003 f959 	bl	8118a98 <xTaskGetTickCount>
 81157e6:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 81157e8:	687b      	ldr	r3, [r7, #4]
}
 81157ea:	4618      	mov	r0, r3
 81157ec:	3708      	adds	r7, #8
 81157ee:	46bd      	mov	sp, r7
 81157f0:	bd80      	pop	{r7, pc}

081157f2 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 81157f2:	b580      	push	{r7, lr}
 81157f4:	b08e      	sub	sp, #56	@ 0x38
 81157f6:	af04      	add	r7, sp, #16
 81157f8:	60f8      	str	r0, [r7, #12]
 81157fa:	60b9      	str	r1, [r7, #8]
 81157fc:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 81157fe:	2300      	movs	r3, #0
 8115800:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8115802:	f3ef 8305 	mrs	r3, IPSR
 8115806:	617b      	str	r3, [r7, #20]
  return(result);
 8115808:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 811580a:	2b00      	cmp	r3, #0
 811580c:	d17e      	bne.n	811590c <osThreadNew+0x11a>
 811580e:	68fb      	ldr	r3, [r7, #12]
 8115810:	2b00      	cmp	r3, #0
 8115812:	d07b      	beq.n	811590c <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8115814:	2380      	movs	r3, #128	@ 0x80
 8115816:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8115818:	2318      	movs	r3, #24
 811581a:	61fb      	str	r3, [r7, #28]

    name = NULL;
 811581c:	2300      	movs	r3, #0
 811581e:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8115820:	f04f 33ff 	mov.w	r3, #4294967295
 8115824:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8115826:	687b      	ldr	r3, [r7, #4]
 8115828:	2b00      	cmp	r3, #0
 811582a:	d045      	beq.n	81158b8 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 811582c:	687b      	ldr	r3, [r7, #4]
 811582e:	681b      	ldr	r3, [r3, #0]
 8115830:	2b00      	cmp	r3, #0
 8115832:	d002      	beq.n	811583a <osThreadNew+0x48>
        name = attr->name;
 8115834:	687b      	ldr	r3, [r7, #4]
 8115836:	681b      	ldr	r3, [r3, #0]
 8115838:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 811583a:	687b      	ldr	r3, [r7, #4]
 811583c:	699b      	ldr	r3, [r3, #24]
 811583e:	2b00      	cmp	r3, #0
 8115840:	d002      	beq.n	8115848 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8115842:	687b      	ldr	r3, [r7, #4]
 8115844:	699b      	ldr	r3, [r3, #24]
 8115846:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8115848:	69fb      	ldr	r3, [r7, #28]
 811584a:	2b00      	cmp	r3, #0
 811584c:	d008      	beq.n	8115860 <osThreadNew+0x6e>
 811584e:	69fb      	ldr	r3, [r7, #28]
 8115850:	2b38      	cmp	r3, #56	@ 0x38
 8115852:	d805      	bhi.n	8115860 <osThreadNew+0x6e>
 8115854:	687b      	ldr	r3, [r7, #4]
 8115856:	685b      	ldr	r3, [r3, #4]
 8115858:	f003 0301 	and.w	r3, r3, #1
 811585c:	2b00      	cmp	r3, #0
 811585e:	d001      	beq.n	8115864 <osThreadNew+0x72>
        return (NULL);
 8115860:	2300      	movs	r3, #0
 8115862:	e054      	b.n	811590e <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8115864:	687b      	ldr	r3, [r7, #4]
 8115866:	695b      	ldr	r3, [r3, #20]
 8115868:	2b00      	cmp	r3, #0
 811586a:	d003      	beq.n	8115874 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 811586c:	687b      	ldr	r3, [r7, #4]
 811586e:	695b      	ldr	r3, [r3, #20]
 8115870:	089b      	lsrs	r3, r3, #2
 8115872:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8115874:	687b      	ldr	r3, [r7, #4]
 8115876:	689b      	ldr	r3, [r3, #8]
 8115878:	2b00      	cmp	r3, #0
 811587a:	d00e      	beq.n	811589a <osThreadNew+0xa8>
 811587c:	687b      	ldr	r3, [r7, #4]
 811587e:	68db      	ldr	r3, [r3, #12]
 8115880:	2ba7      	cmp	r3, #167	@ 0xa7
 8115882:	d90a      	bls.n	811589a <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8115884:	687b      	ldr	r3, [r7, #4]
 8115886:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8115888:	2b00      	cmp	r3, #0
 811588a:	d006      	beq.n	811589a <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 811588c:	687b      	ldr	r3, [r7, #4]
 811588e:	695b      	ldr	r3, [r3, #20]
 8115890:	2b00      	cmp	r3, #0
 8115892:	d002      	beq.n	811589a <osThreadNew+0xa8>
        mem = 1;
 8115894:	2301      	movs	r3, #1
 8115896:	61bb      	str	r3, [r7, #24]
 8115898:	e010      	b.n	81158bc <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 811589a:	687b      	ldr	r3, [r7, #4]
 811589c:	689b      	ldr	r3, [r3, #8]
 811589e:	2b00      	cmp	r3, #0
 81158a0:	d10c      	bne.n	81158bc <osThreadNew+0xca>
 81158a2:	687b      	ldr	r3, [r7, #4]
 81158a4:	68db      	ldr	r3, [r3, #12]
 81158a6:	2b00      	cmp	r3, #0
 81158a8:	d108      	bne.n	81158bc <osThreadNew+0xca>
 81158aa:	687b      	ldr	r3, [r7, #4]
 81158ac:	691b      	ldr	r3, [r3, #16]
 81158ae:	2b00      	cmp	r3, #0
 81158b0:	d104      	bne.n	81158bc <osThreadNew+0xca>
          mem = 0;
 81158b2:	2300      	movs	r3, #0
 81158b4:	61bb      	str	r3, [r7, #24]
 81158b6:	e001      	b.n	81158bc <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 81158b8:	2300      	movs	r3, #0
 81158ba:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 81158bc:	69bb      	ldr	r3, [r7, #24]
 81158be:	2b01      	cmp	r3, #1
 81158c0:	d110      	bne.n	81158e4 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 81158c2:	687b      	ldr	r3, [r7, #4]
 81158c4:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 81158c6:	687a      	ldr	r2, [r7, #4]
 81158c8:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 81158ca:	9202      	str	r2, [sp, #8]
 81158cc:	9301      	str	r3, [sp, #4]
 81158ce:	69fb      	ldr	r3, [r7, #28]
 81158d0:	9300      	str	r3, [sp, #0]
 81158d2:	68bb      	ldr	r3, [r7, #8]
 81158d4:	6a3a      	ldr	r2, [r7, #32]
 81158d6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 81158d8:	68f8      	ldr	r0, [r7, #12]
 81158da:	f002 fdcd 	bl	8118478 <xTaskCreateStatic>
 81158de:	4603      	mov	r3, r0
 81158e0:	613b      	str	r3, [r7, #16]
 81158e2:	e013      	b.n	811590c <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 81158e4:	69bb      	ldr	r3, [r7, #24]
 81158e6:	2b00      	cmp	r3, #0
 81158e8:	d110      	bne.n	811590c <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 81158ea:	6a3b      	ldr	r3, [r7, #32]
 81158ec:	b29a      	uxth	r2, r3
 81158ee:	f107 0310 	add.w	r3, r7, #16
 81158f2:	9301      	str	r3, [sp, #4]
 81158f4:	69fb      	ldr	r3, [r7, #28]
 81158f6:	9300      	str	r3, [sp, #0]
 81158f8:	68bb      	ldr	r3, [r7, #8]
 81158fa:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 81158fc:	68f8      	ldr	r0, [r7, #12]
 81158fe:	f002 fe1b 	bl	8118538 <xTaskCreate>
 8115902:	4603      	mov	r3, r0
 8115904:	2b01      	cmp	r3, #1
 8115906:	d001      	beq.n	811590c <osThreadNew+0x11a>
            hTask = NULL;
 8115908:	2300      	movs	r3, #0
 811590a:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 811590c:	693b      	ldr	r3, [r7, #16]
}
 811590e:	4618      	mov	r0, r3
 8115910:	3728      	adds	r7, #40	@ 0x28
 8115912:	46bd      	mov	sp, r7
 8115914:	bd80      	pop	{r7, pc}

08115916 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8115916:	b580      	push	{r7, lr}
 8115918:	b084      	sub	sp, #16
 811591a:	af00      	add	r7, sp, #0
 811591c:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 811591e:	f3ef 8305 	mrs	r3, IPSR
 8115922:	60bb      	str	r3, [r7, #8]
  return(result);
 8115924:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8115926:	2b00      	cmp	r3, #0
 8115928:	d003      	beq.n	8115932 <osDelay+0x1c>
    stat = osErrorISR;
 811592a:	f06f 0305 	mvn.w	r3, #5
 811592e:	60fb      	str	r3, [r7, #12]
 8115930:	e007      	b.n	8115942 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8115932:	2300      	movs	r3, #0
 8115934:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8115936:	687b      	ldr	r3, [r7, #4]
 8115938:	2b00      	cmp	r3, #0
 811593a:	d002      	beq.n	8115942 <osDelay+0x2c>
      vTaskDelay(ticks);
 811593c:	6878      	ldr	r0, [r7, #4]
 811593e:	f002 ff59 	bl	81187f4 <vTaskDelay>
    }
  }

  return (stat);
 8115942:	68fb      	ldr	r3, [r7, #12]
}
 8115944:	4618      	mov	r0, r3
 8115946:	3710      	adds	r7, #16
 8115948:	46bd      	mov	sp, r7
 811594a:	bd80      	pop	{r7, pc}

0811594c <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 811594c:	b580      	push	{r7, lr}
 811594e:	b088      	sub	sp, #32
 8115950:	af00      	add	r7, sp, #0
 8115952:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8115954:	2300      	movs	r3, #0
 8115956:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8115958:	f3ef 8305 	mrs	r3, IPSR
 811595c:	60bb      	str	r3, [r7, #8]
  return(result);
 811595e:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8115960:	2b00      	cmp	r3, #0
 8115962:	d174      	bne.n	8115a4e <osMutexNew+0x102>
    if (attr != NULL) {
 8115964:	687b      	ldr	r3, [r7, #4]
 8115966:	2b00      	cmp	r3, #0
 8115968:	d003      	beq.n	8115972 <osMutexNew+0x26>
      type = attr->attr_bits;
 811596a:	687b      	ldr	r3, [r7, #4]
 811596c:	685b      	ldr	r3, [r3, #4]
 811596e:	61bb      	str	r3, [r7, #24]
 8115970:	e001      	b.n	8115976 <osMutexNew+0x2a>
    } else {
      type = 0U;
 8115972:	2300      	movs	r3, #0
 8115974:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8115976:	69bb      	ldr	r3, [r7, #24]
 8115978:	f003 0301 	and.w	r3, r3, #1
 811597c:	2b00      	cmp	r3, #0
 811597e:	d002      	beq.n	8115986 <osMutexNew+0x3a>
      rmtx = 1U;
 8115980:	2301      	movs	r3, #1
 8115982:	617b      	str	r3, [r7, #20]
 8115984:	e001      	b.n	811598a <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8115986:	2300      	movs	r3, #0
 8115988:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 811598a:	69bb      	ldr	r3, [r7, #24]
 811598c:	f003 0308 	and.w	r3, r3, #8
 8115990:	2b00      	cmp	r3, #0
 8115992:	d15c      	bne.n	8115a4e <osMutexNew+0x102>
      mem = -1;
 8115994:	f04f 33ff 	mov.w	r3, #4294967295
 8115998:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 811599a:	687b      	ldr	r3, [r7, #4]
 811599c:	2b00      	cmp	r3, #0
 811599e:	d015      	beq.n	81159cc <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 81159a0:	687b      	ldr	r3, [r7, #4]
 81159a2:	689b      	ldr	r3, [r3, #8]
 81159a4:	2b00      	cmp	r3, #0
 81159a6:	d006      	beq.n	81159b6 <osMutexNew+0x6a>
 81159a8:	687b      	ldr	r3, [r7, #4]
 81159aa:	68db      	ldr	r3, [r3, #12]
 81159ac:	2b4f      	cmp	r3, #79	@ 0x4f
 81159ae:	d902      	bls.n	81159b6 <osMutexNew+0x6a>
          mem = 1;
 81159b0:	2301      	movs	r3, #1
 81159b2:	613b      	str	r3, [r7, #16]
 81159b4:	e00c      	b.n	81159d0 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 81159b6:	687b      	ldr	r3, [r7, #4]
 81159b8:	689b      	ldr	r3, [r3, #8]
 81159ba:	2b00      	cmp	r3, #0
 81159bc:	d108      	bne.n	81159d0 <osMutexNew+0x84>
 81159be:	687b      	ldr	r3, [r7, #4]
 81159c0:	68db      	ldr	r3, [r3, #12]
 81159c2:	2b00      	cmp	r3, #0
 81159c4:	d104      	bne.n	81159d0 <osMutexNew+0x84>
            mem = 0;
 81159c6:	2300      	movs	r3, #0
 81159c8:	613b      	str	r3, [r7, #16]
 81159ca:	e001      	b.n	81159d0 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 81159cc:	2300      	movs	r3, #0
 81159ce:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 81159d0:	693b      	ldr	r3, [r7, #16]
 81159d2:	2b01      	cmp	r3, #1
 81159d4:	d112      	bne.n	81159fc <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 81159d6:	697b      	ldr	r3, [r7, #20]
 81159d8:	2b00      	cmp	r3, #0
 81159da:	d007      	beq.n	81159ec <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 81159dc:	687b      	ldr	r3, [r7, #4]
 81159de:	689b      	ldr	r3, [r3, #8]
 81159e0:	4619      	mov	r1, r3
 81159e2:	2004      	movs	r0, #4
 81159e4:	f001 f9b1 	bl	8116d4a <xQueueCreateMutexStatic>
 81159e8:	61f8      	str	r0, [r7, #28]
 81159ea:	e016      	b.n	8115a1a <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 81159ec:	687b      	ldr	r3, [r7, #4]
 81159ee:	689b      	ldr	r3, [r3, #8]
 81159f0:	4619      	mov	r1, r3
 81159f2:	2001      	movs	r0, #1
 81159f4:	f001 f9a9 	bl	8116d4a <xQueueCreateMutexStatic>
 81159f8:	61f8      	str	r0, [r7, #28]
 81159fa:	e00e      	b.n	8115a1a <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 81159fc:	693b      	ldr	r3, [r7, #16]
 81159fe:	2b00      	cmp	r3, #0
 8115a00:	d10b      	bne.n	8115a1a <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8115a02:	697b      	ldr	r3, [r7, #20]
 8115a04:	2b00      	cmp	r3, #0
 8115a06:	d004      	beq.n	8115a12 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8115a08:	2004      	movs	r0, #4
 8115a0a:	f001 f986 	bl	8116d1a <xQueueCreateMutex>
 8115a0e:	61f8      	str	r0, [r7, #28]
 8115a10:	e003      	b.n	8115a1a <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8115a12:	2001      	movs	r0, #1
 8115a14:	f001 f981 	bl	8116d1a <xQueueCreateMutex>
 8115a18:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8115a1a:	69fb      	ldr	r3, [r7, #28]
 8115a1c:	2b00      	cmp	r3, #0
 8115a1e:	d00c      	beq.n	8115a3a <osMutexNew+0xee>
        if (attr != NULL) {
 8115a20:	687b      	ldr	r3, [r7, #4]
 8115a22:	2b00      	cmp	r3, #0
 8115a24:	d003      	beq.n	8115a2e <osMutexNew+0xe2>
          name = attr->name;
 8115a26:	687b      	ldr	r3, [r7, #4]
 8115a28:	681b      	ldr	r3, [r3, #0]
 8115a2a:	60fb      	str	r3, [r7, #12]
 8115a2c:	e001      	b.n	8115a32 <osMutexNew+0xe6>
        } else {
          name = NULL;
 8115a2e:	2300      	movs	r3, #0
 8115a30:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8115a32:	68f9      	ldr	r1, [r7, #12]
 8115a34:	69f8      	ldr	r0, [r7, #28]
 8115a36:	f002 f86d 	bl	8117b14 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8115a3a:	69fb      	ldr	r3, [r7, #28]
 8115a3c:	2b00      	cmp	r3, #0
 8115a3e:	d006      	beq.n	8115a4e <osMutexNew+0x102>
 8115a40:	697b      	ldr	r3, [r7, #20]
 8115a42:	2b00      	cmp	r3, #0
 8115a44:	d003      	beq.n	8115a4e <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8115a46:	69fb      	ldr	r3, [r7, #28]
 8115a48:	f043 0301 	orr.w	r3, r3, #1
 8115a4c:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8115a4e:	69fb      	ldr	r3, [r7, #28]
}
 8115a50:	4618      	mov	r0, r3
 8115a52:	3720      	adds	r7, #32
 8115a54:	46bd      	mov	sp, r7
 8115a56:	bd80      	pop	{r7, pc}

08115a58 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8115a58:	b580      	push	{r7, lr}
 8115a5a:	b086      	sub	sp, #24
 8115a5c:	af00      	add	r7, sp, #0
 8115a5e:	6078      	str	r0, [r7, #4]
 8115a60:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8115a62:	687b      	ldr	r3, [r7, #4]
 8115a64:	f023 0301 	bic.w	r3, r3, #1
 8115a68:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8115a6a:	687b      	ldr	r3, [r7, #4]
 8115a6c:	f003 0301 	and.w	r3, r3, #1
 8115a70:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8115a72:	2300      	movs	r3, #0
 8115a74:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8115a76:	f3ef 8305 	mrs	r3, IPSR
 8115a7a:	60bb      	str	r3, [r7, #8]
  return(result);
 8115a7c:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8115a7e:	2b00      	cmp	r3, #0
 8115a80:	d003      	beq.n	8115a8a <osMutexAcquire+0x32>
    stat = osErrorISR;
 8115a82:	f06f 0305 	mvn.w	r3, #5
 8115a86:	617b      	str	r3, [r7, #20]
 8115a88:	e02c      	b.n	8115ae4 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 8115a8a:	693b      	ldr	r3, [r7, #16]
 8115a8c:	2b00      	cmp	r3, #0
 8115a8e:	d103      	bne.n	8115a98 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 8115a90:	f06f 0303 	mvn.w	r3, #3
 8115a94:	617b      	str	r3, [r7, #20]
 8115a96:	e025      	b.n	8115ae4 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 8115a98:	68fb      	ldr	r3, [r7, #12]
 8115a9a:	2b00      	cmp	r3, #0
 8115a9c:	d011      	beq.n	8115ac2 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8115a9e:	6839      	ldr	r1, [r7, #0]
 8115aa0:	6938      	ldr	r0, [r7, #16]
 8115aa2:	f001 f9a2 	bl	8116dea <xQueueTakeMutexRecursive>
 8115aa6:	4603      	mov	r3, r0
 8115aa8:	2b01      	cmp	r3, #1
 8115aaa:	d01b      	beq.n	8115ae4 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8115aac:	683b      	ldr	r3, [r7, #0]
 8115aae:	2b00      	cmp	r3, #0
 8115ab0:	d003      	beq.n	8115aba <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 8115ab2:	f06f 0301 	mvn.w	r3, #1
 8115ab6:	617b      	str	r3, [r7, #20]
 8115ab8:	e014      	b.n	8115ae4 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8115aba:	f06f 0302 	mvn.w	r3, #2
 8115abe:	617b      	str	r3, [r7, #20]
 8115ac0:	e010      	b.n	8115ae4 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8115ac2:	6839      	ldr	r1, [r7, #0]
 8115ac4:	6938      	ldr	r0, [r7, #16]
 8115ac6:	f001 fd47 	bl	8117558 <xQueueSemaphoreTake>
 8115aca:	4603      	mov	r3, r0
 8115acc:	2b01      	cmp	r3, #1
 8115ace:	d009      	beq.n	8115ae4 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8115ad0:	683b      	ldr	r3, [r7, #0]
 8115ad2:	2b00      	cmp	r3, #0
 8115ad4:	d003      	beq.n	8115ade <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 8115ad6:	f06f 0301 	mvn.w	r3, #1
 8115ada:	617b      	str	r3, [r7, #20]
 8115adc:	e002      	b.n	8115ae4 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8115ade:	f06f 0302 	mvn.w	r3, #2
 8115ae2:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 8115ae4:	697b      	ldr	r3, [r7, #20]
}
 8115ae6:	4618      	mov	r0, r3
 8115ae8:	3718      	adds	r7, #24
 8115aea:	46bd      	mov	sp, r7
 8115aec:	bd80      	pop	{r7, pc}

08115aee <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8115aee:	b580      	push	{r7, lr}
 8115af0:	b086      	sub	sp, #24
 8115af2:	af00      	add	r7, sp, #0
 8115af4:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8115af6:	687b      	ldr	r3, [r7, #4]
 8115af8:	f023 0301 	bic.w	r3, r3, #1
 8115afc:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8115afe:	687b      	ldr	r3, [r7, #4]
 8115b00:	f003 0301 	and.w	r3, r3, #1
 8115b04:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8115b06:	2300      	movs	r3, #0
 8115b08:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8115b0a:	f3ef 8305 	mrs	r3, IPSR
 8115b0e:	60bb      	str	r3, [r7, #8]
  return(result);
 8115b10:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8115b12:	2b00      	cmp	r3, #0
 8115b14:	d003      	beq.n	8115b1e <osMutexRelease+0x30>
    stat = osErrorISR;
 8115b16:	f06f 0305 	mvn.w	r3, #5
 8115b1a:	617b      	str	r3, [r7, #20]
 8115b1c:	e01f      	b.n	8115b5e <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 8115b1e:	693b      	ldr	r3, [r7, #16]
 8115b20:	2b00      	cmp	r3, #0
 8115b22:	d103      	bne.n	8115b2c <osMutexRelease+0x3e>
    stat = osErrorParameter;
 8115b24:	f06f 0303 	mvn.w	r3, #3
 8115b28:	617b      	str	r3, [r7, #20]
 8115b2a:	e018      	b.n	8115b5e <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 8115b2c:	68fb      	ldr	r3, [r7, #12]
 8115b2e:	2b00      	cmp	r3, #0
 8115b30:	d009      	beq.n	8115b46 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8115b32:	6938      	ldr	r0, [r7, #16]
 8115b34:	f001 f924 	bl	8116d80 <xQueueGiveMutexRecursive>
 8115b38:	4603      	mov	r3, r0
 8115b3a:	2b01      	cmp	r3, #1
 8115b3c:	d00f      	beq.n	8115b5e <osMutexRelease+0x70>
        stat = osErrorResource;
 8115b3e:	f06f 0302 	mvn.w	r3, #2
 8115b42:	617b      	str	r3, [r7, #20]
 8115b44:	e00b      	b.n	8115b5e <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8115b46:	2300      	movs	r3, #0
 8115b48:	2200      	movs	r2, #0
 8115b4a:	2100      	movs	r1, #0
 8115b4c:	6938      	ldr	r0, [r7, #16]
 8115b4e:	f001 f9f1 	bl	8116f34 <xQueueGenericSend>
 8115b52:	4603      	mov	r3, r0
 8115b54:	2b01      	cmp	r3, #1
 8115b56:	d002      	beq.n	8115b5e <osMutexRelease+0x70>
        stat = osErrorResource;
 8115b58:	f06f 0302 	mvn.w	r3, #2
 8115b5c:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8115b5e:	697b      	ldr	r3, [r7, #20]
}
 8115b60:	4618      	mov	r0, r3
 8115b62:	3718      	adds	r7, #24
 8115b64:	46bd      	mov	sp, r7
 8115b66:	bd80      	pop	{r7, pc}

08115b68 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8115b68:	b580      	push	{r7, lr}
 8115b6a:	b08a      	sub	sp, #40	@ 0x28
 8115b6c:	af02      	add	r7, sp, #8
 8115b6e:	60f8      	str	r0, [r7, #12]
 8115b70:	60b9      	str	r1, [r7, #8]
 8115b72:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8115b74:	2300      	movs	r3, #0
 8115b76:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8115b78:	f3ef 8305 	mrs	r3, IPSR
 8115b7c:	613b      	str	r3, [r7, #16]
  return(result);
 8115b7e:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8115b80:	2b00      	cmp	r3, #0
 8115b82:	d175      	bne.n	8115c70 <osSemaphoreNew+0x108>
 8115b84:	68fb      	ldr	r3, [r7, #12]
 8115b86:	2b00      	cmp	r3, #0
 8115b88:	d072      	beq.n	8115c70 <osSemaphoreNew+0x108>
 8115b8a:	68ba      	ldr	r2, [r7, #8]
 8115b8c:	68fb      	ldr	r3, [r7, #12]
 8115b8e:	429a      	cmp	r2, r3
 8115b90:	d86e      	bhi.n	8115c70 <osSemaphoreNew+0x108>
    mem = -1;
 8115b92:	f04f 33ff 	mov.w	r3, #4294967295
 8115b96:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8115b98:	687b      	ldr	r3, [r7, #4]
 8115b9a:	2b00      	cmp	r3, #0
 8115b9c:	d015      	beq.n	8115bca <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8115b9e:	687b      	ldr	r3, [r7, #4]
 8115ba0:	689b      	ldr	r3, [r3, #8]
 8115ba2:	2b00      	cmp	r3, #0
 8115ba4:	d006      	beq.n	8115bb4 <osSemaphoreNew+0x4c>
 8115ba6:	687b      	ldr	r3, [r7, #4]
 8115ba8:	68db      	ldr	r3, [r3, #12]
 8115baa:	2b4f      	cmp	r3, #79	@ 0x4f
 8115bac:	d902      	bls.n	8115bb4 <osSemaphoreNew+0x4c>
        mem = 1;
 8115bae:	2301      	movs	r3, #1
 8115bb0:	61bb      	str	r3, [r7, #24]
 8115bb2:	e00c      	b.n	8115bce <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8115bb4:	687b      	ldr	r3, [r7, #4]
 8115bb6:	689b      	ldr	r3, [r3, #8]
 8115bb8:	2b00      	cmp	r3, #0
 8115bba:	d108      	bne.n	8115bce <osSemaphoreNew+0x66>
 8115bbc:	687b      	ldr	r3, [r7, #4]
 8115bbe:	68db      	ldr	r3, [r3, #12]
 8115bc0:	2b00      	cmp	r3, #0
 8115bc2:	d104      	bne.n	8115bce <osSemaphoreNew+0x66>
          mem = 0;
 8115bc4:	2300      	movs	r3, #0
 8115bc6:	61bb      	str	r3, [r7, #24]
 8115bc8:	e001      	b.n	8115bce <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8115bca:	2300      	movs	r3, #0
 8115bcc:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8115bce:	69bb      	ldr	r3, [r7, #24]
 8115bd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8115bd4:	d04c      	beq.n	8115c70 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8115bd6:	68fb      	ldr	r3, [r7, #12]
 8115bd8:	2b01      	cmp	r3, #1
 8115bda:	d128      	bne.n	8115c2e <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8115bdc:	69bb      	ldr	r3, [r7, #24]
 8115bde:	2b01      	cmp	r3, #1
 8115be0:	d10a      	bne.n	8115bf8 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8115be2:	687b      	ldr	r3, [r7, #4]
 8115be4:	689b      	ldr	r3, [r3, #8]
 8115be6:	2203      	movs	r2, #3
 8115be8:	9200      	str	r2, [sp, #0]
 8115bea:	2200      	movs	r2, #0
 8115bec:	2100      	movs	r1, #0
 8115bee:	2001      	movs	r0, #1
 8115bf0:	f000 ff9e 	bl	8116b30 <xQueueGenericCreateStatic>
 8115bf4:	61f8      	str	r0, [r7, #28]
 8115bf6:	e005      	b.n	8115c04 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8115bf8:	2203      	movs	r2, #3
 8115bfa:	2100      	movs	r1, #0
 8115bfc:	2001      	movs	r0, #1
 8115bfe:	f001 f814 	bl	8116c2a <xQueueGenericCreate>
 8115c02:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8115c04:	69fb      	ldr	r3, [r7, #28]
 8115c06:	2b00      	cmp	r3, #0
 8115c08:	d022      	beq.n	8115c50 <osSemaphoreNew+0xe8>
 8115c0a:	68bb      	ldr	r3, [r7, #8]
 8115c0c:	2b00      	cmp	r3, #0
 8115c0e:	d01f      	beq.n	8115c50 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8115c10:	2300      	movs	r3, #0
 8115c12:	2200      	movs	r2, #0
 8115c14:	2100      	movs	r1, #0
 8115c16:	69f8      	ldr	r0, [r7, #28]
 8115c18:	f001 f98c 	bl	8116f34 <xQueueGenericSend>
 8115c1c:	4603      	mov	r3, r0
 8115c1e:	2b01      	cmp	r3, #1
 8115c20:	d016      	beq.n	8115c50 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8115c22:	69f8      	ldr	r0, [r7, #28]
 8115c24:	f001 fe2a 	bl	811787c <vQueueDelete>
            hSemaphore = NULL;
 8115c28:	2300      	movs	r3, #0
 8115c2a:	61fb      	str	r3, [r7, #28]
 8115c2c:	e010      	b.n	8115c50 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8115c2e:	69bb      	ldr	r3, [r7, #24]
 8115c30:	2b01      	cmp	r3, #1
 8115c32:	d108      	bne.n	8115c46 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8115c34:	687b      	ldr	r3, [r7, #4]
 8115c36:	689b      	ldr	r3, [r3, #8]
 8115c38:	461a      	mov	r2, r3
 8115c3a:	68b9      	ldr	r1, [r7, #8]
 8115c3c:	68f8      	ldr	r0, [r7, #12]
 8115c3e:	f001 f90b 	bl	8116e58 <xQueueCreateCountingSemaphoreStatic>
 8115c42:	61f8      	str	r0, [r7, #28]
 8115c44:	e004      	b.n	8115c50 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8115c46:	68b9      	ldr	r1, [r7, #8]
 8115c48:	68f8      	ldr	r0, [r7, #12]
 8115c4a:	f001 f93e 	bl	8116eca <xQueueCreateCountingSemaphore>
 8115c4e:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8115c50:	69fb      	ldr	r3, [r7, #28]
 8115c52:	2b00      	cmp	r3, #0
 8115c54:	d00c      	beq.n	8115c70 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8115c56:	687b      	ldr	r3, [r7, #4]
 8115c58:	2b00      	cmp	r3, #0
 8115c5a:	d003      	beq.n	8115c64 <osSemaphoreNew+0xfc>
          name = attr->name;
 8115c5c:	687b      	ldr	r3, [r7, #4]
 8115c5e:	681b      	ldr	r3, [r3, #0]
 8115c60:	617b      	str	r3, [r7, #20]
 8115c62:	e001      	b.n	8115c68 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8115c64:	2300      	movs	r3, #0
 8115c66:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8115c68:	6979      	ldr	r1, [r7, #20]
 8115c6a:	69f8      	ldr	r0, [r7, #28]
 8115c6c:	f001 ff52 	bl	8117b14 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8115c70:	69fb      	ldr	r3, [r7, #28]
}
 8115c72:	4618      	mov	r0, r3
 8115c74:	3720      	adds	r7, #32
 8115c76:	46bd      	mov	sp, r7
 8115c78:	bd80      	pop	{r7, pc}
	...

08115c7c <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8115c7c:	b580      	push	{r7, lr}
 8115c7e:	b086      	sub	sp, #24
 8115c80:	af00      	add	r7, sp, #0
 8115c82:	6078      	str	r0, [r7, #4]
 8115c84:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8115c86:	687b      	ldr	r3, [r7, #4]
 8115c88:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8115c8a:	2300      	movs	r3, #0
 8115c8c:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8115c8e:	693b      	ldr	r3, [r7, #16]
 8115c90:	2b00      	cmp	r3, #0
 8115c92:	d103      	bne.n	8115c9c <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8115c94:	f06f 0303 	mvn.w	r3, #3
 8115c98:	617b      	str	r3, [r7, #20]
 8115c9a:	e039      	b.n	8115d10 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8115c9c:	f3ef 8305 	mrs	r3, IPSR
 8115ca0:	60fb      	str	r3, [r7, #12]
  return(result);
 8115ca2:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8115ca4:	2b00      	cmp	r3, #0
 8115ca6:	d022      	beq.n	8115cee <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8115ca8:	683b      	ldr	r3, [r7, #0]
 8115caa:	2b00      	cmp	r3, #0
 8115cac:	d003      	beq.n	8115cb6 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8115cae:	f06f 0303 	mvn.w	r3, #3
 8115cb2:	617b      	str	r3, [r7, #20]
 8115cb4:	e02c      	b.n	8115d10 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8115cb6:	2300      	movs	r3, #0
 8115cb8:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8115cba:	f107 0308 	add.w	r3, r7, #8
 8115cbe:	461a      	mov	r2, r3
 8115cc0:	2100      	movs	r1, #0
 8115cc2:	6938      	ldr	r0, [r7, #16]
 8115cc4:	f001 fd58 	bl	8117778 <xQueueReceiveFromISR>
 8115cc8:	4603      	mov	r3, r0
 8115cca:	2b01      	cmp	r3, #1
 8115ccc:	d003      	beq.n	8115cd6 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8115cce:	f06f 0302 	mvn.w	r3, #2
 8115cd2:	617b      	str	r3, [r7, #20]
 8115cd4:	e01c      	b.n	8115d10 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8115cd6:	68bb      	ldr	r3, [r7, #8]
 8115cd8:	2b00      	cmp	r3, #0
 8115cda:	d019      	beq.n	8115d10 <osSemaphoreAcquire+0x94>
 8115cdc:	4b0f      	ldr	r3, [pc, #60]	@ (8115d1c <osSemaphoreAcquire+0xa0>)
 8115cde:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8115ce2:	601a      	str	r2, [r3, #0]
 8115ce4:	f3bf 8f4f 	dsb	sy
 8115ce8:	f3bf 8f6f 	isb	sy
 8115cec:	e010      	b.n	8115d10 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8115cee:	6839      	ldr	r1, [r7, #0]
 8115cf0:	6938      	ldr	r0, [r7, #16]
 8115cf2:	f001 fc31 	bl	8117558 <xQueueSemaphoreTake>
 8115cf6:	4603      	mov	r3, r0
 8115cf8:	2b01      	cmp	r3, #1
 8115cfa:	d009      	beq.n	8115d10 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8115cfc:	683b      	ldr	r3, [r7, #0]
 8115cfe:	2b00      	cmp	r3, #0
 8115d00:	d003      	beq.n	8115d0a <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8115d02:	f06f 0301 	mvn.w	r3, #1
 8115d06:	617b      	str	r3, [r7, #20]
 8115d08:	e002      	b.n	8115d10 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8115d0a:	f06f 0302 	mvn.w	r3, #2
 8115d0e:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8115d10:	697b      	ldr	r3, [r7, #20]
}
 8115d12:	4618      	mov	r0, r3
 8115d14:	3718      	adds	r7, #24
 8115d16:	46bd      	mov	sp, r7
 8115d18:	bd80      	pop	{r7, pc}
 8115d1a:	bf00      	nop
 8115d1c:	e000ed04 	.word	0xe000ed04

08115d20 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8115d20:	b580      	push	{r7, lr}
 8115d22:	b086      	sub	sp, #24
 8115d24:	af00      	add	r7, sp, #0
 8115d26:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8115d28:	687b      	ldr	r3, [r7, #4]
 8115d2a:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8115d2c:	2300      	movs	r3, #0
 8115d2e:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8115d30:	693b      	ldr	r3, [r7, #16]
 8115d32:	2b00      	cmp	r3, #0
 8115d34:	d103      	bne.n	8115d3e <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8115d36:	f06f 0303 	mvn.w	r3, #3
 8115d3a:	617b      	str	r3, [r7, #20]
 8115d3c:	e02c      	b.n	8115d98 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8115d3e:	f3ef 8305 	mrs	r3, IPSR
 8115d42:	60fb      	str	r3, [r7, #12]
  return(result);
 8115d44:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8115d46:	2b00      	cmp	r3, #0
 8115d48:	d01a      	beq.n	8115d80 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8115d4a:	2300      	movs	r3, #0
 8115d4c:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8115d4e:	f107 0308 	add.w	r3, r7, #8
 8115d52:	4619      	mov	r1, r3
 8115d54:	6938      	ldr	r0, [r7, #16]
 8115d56:	f001 fa8d 	bl	8117274 <xQueueGiveFromISR>
 8115d5a:	4603      	mov	r3, r0
 8115d5c:	2b01      	cmp	r3, #1
 8115d5e:	d003      	beq.n	8115d68 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8115d60:	f06f 0302 	mvn.w	r3, #2
 8115d64:	617b      	str	r3, [r7, #20]
 8115d66:	e017      	b.n	8115d98 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8115d68:	68bb      	ldr	r3, [r7, #8]
 8115d6a:	2b00      	cmp	r3, #0
 8115d6c:	d014      	beq.n	8115d98 <osSemaphoreRelease+0x78>
 8115d6e:	4b0d      	ldr	r3, [pc, #52]	@ (8115da4 <osSemaphoreRelease+0x84>)
 8115d70:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8115d74:	601a      	str	r2, [r3, #0]
 8115d76:	f3bf 8f4f 	dsb	sy
 8115d7a:	f3bf 8f6f 	isb	sy
 8115d7e:	e00b      	b.n	8115d98 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8115d80:	2300      	movs	r3, #0
 8115d82:	2200      	movs	r2, #0
 8115d84:	2100      	movs	r1, #0
 8115d86:	6938      	ldr	r0, [r7, #16]
 8115d88:	f001 f8d4 	bl	8116f34 <xQueueGenericSend>
 8115d8c:	4603      	mov	r3, r0
 8115d8e:	2b01      	cmp	r3, #1
 8115d90:	d002      	beq.n	8115d98 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8115d92:	f06f 0302 	mvn.w	r3, #2
 8115d96:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8115d98:	697b      	ldr	r3, [r7, #20]
}
 8115d9a:	4618      	mov	r0, r3
 8115d9c:	3718      	adds	r7, #24
 8115d9e:	46bd      	mov	sp, r7
 8115da0:	bd80      	pop	{r7, pc}
 8115da2:	bf00      	nop
 8115da4:	e000ed04 	.word	0xe000ed04

08115da8 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8115da8:	b580      	push	{r7, lr}
 8115daa:	b08a      	sub	sp, #40	@ 0x28
 8115dac:	af02      	add	r7, sp, #8
 8115dae:	60f8      	str	r0, [r7, #12]
 8115db0:	60b9      	str	r1, [r7, #8]
 8115db2:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8115db4:	2300      	movs	r3, #0
 8115db6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8115db8:	f3ef 8305 	mrs	r3, IPSR
 8115dbc:	613b      	str	r3, [r7, #16]
  return(result);
 8115dbe:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8115dc0:	2b00      	cmp	r3, #0
 8115dc2:	d15f      	bne.n	8115e84 <osMessageQueueNew+0xdc>
 8115dc4:	68fb      	ldr	r3, [r7, #12]
 8115dc6:	2b00      	cmp	r3, #0
 8115dc8:	d05c      	beq.n	8115e84 <osMessageQueueNew+0xdc>
 8115dca:	68bb      	ldr	r3, [r7, #8]
 8115dcc:	2b00      	cmp	r3, #0
 8115dce:	d059      	beq.n	8115e84 <osMessageQueueNew+0xdc>
    mem = -1;
 8115dd0:	f04f 33ff 	mov.w	r3, #4294967295
 8115dd4:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8115dd6:	687b      	ldr	r3, [r7, #4]
 8115dd8:	2b00      	cmp	r3, #0
 8115dda:	d029      	beq.n	8115e30 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8115ddc:	687b      	ldr	r3, [r7, #4]
 8115dde:	689b      	ldr	r3, [r3, #8]
 8115de0:	2b00      	cmp	r3, #0
 8115de2:	d012      	beq.n	8115e0a <osMessageQueueNew+0x62>
 8115de4:	687b      	ldr	r3, [r7, #4]
 8115de6:	68db      	ldr	r3, [r3, #12]
 8115de8:	2b4f      	cmp	r3, #79	@ 0x4f
 8115dea:	d90e      	bls.n	8115e0a <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8115dec:	687b      	ldr	r3, [r7, #4]
 8115dee:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8115df0:	2b00      	cmp	r3, #0
 8115df2:	d00a      	beq.n	8115e0a <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8115df4:	687b      	ldr	r3, [r7, #4]
 8115df6:	695a      	ldr	r2, [r3, #20]
 8115df8:	68fb      	ldr	r3, [r7, #12]
 8115dfa:	68b9      	ldr	r1, [r7, #8]
 8115dfc:	fb01 f303 	mul.w	r3, r1, r3
 8115e00:	429a      	cmp	r2, r3
 8115e02:	d302      	bcc.n	8115e0a <osMessageQueueNew+0x62>
        mem = 1;
 8115e04:	2301      	movs	r3, #1
 8115e06:	61bb      	str	r3, [r7, #24]
 8115e08:	e014      	b.n	8115e34 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8115e0a:	687b      	ldr	r3, [r7, #4]
 8115e0c:	689b      	ldr	r3, [r3, #8]
 8115e0e:	2b00      	cmp	r3, #0
 8115e10:	d110      	bne.n	8115e34 <osMessageQueueNew+0x8c>
 8115e12:	687b      	ldr	r3, [r7, #4]
 8115e14:	68db      	ldr	r3, [r3, #12]
 8115e16:	2b00      	cmp	r3, #0
 8115e18:	d10c      	bne.n	8115e34 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8115e1a:	687b      	ldr	r3, [r7, #4]
 8115e1c:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8115e1e:	2b00      	cmp	r3, #0
 8115e20:	d108      	bne.n	8115e34 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8115e22:	687b      	ldr	r3, [r7, #4]
 8115e24:	695b      	ldr	r3, [r3, #20]
 8115e26:	2b00      	cmp	r3, #0
 8115e28:	d104      	bne.n	8115e34 <osMessageQueueNew+0x8c>
          mem = 0;
 8115e2a:	2300      	movs	r3, #0
 8115e2c:	61bb      	str	r3, [r7, #24]
 8115e2e:	e001      	b.n	8115e34 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8115e30:	2300      	movs	r3, #0
 8115e32:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8115e34:	69bb      	ldr	r3, [r7, #24]
 8115e36:	2b01      	cmp	r3, #1
 8115e38:	d10b      	bne.n	8115e52 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8115e3a:	687b      	ldr	r3, [r7, #4]
 8115e3c:	691a      	ldr	r2, [r3, #16]
 8115e3e:	687b      	ldr	r3, [r7, #4]
 8115e40:	689b      	ldr	r3, [r3, #8]
 8115e42:	2100      	movs	r1, #0
 8115e44:	9100      	str	r1, [sp, #0]
 8115e46:	68b9      	ldr	r1, [r7, #8]
 8115e48:	68f8      	ldr	r0, [r7, #12]
 8115e4a:	f000 fe71 	bl	8116b30 <xQueueGenericCreateStatic>
 8115e4e:	61f8      	str	r0, [r7, #28]
 8115e50:	e008      	b.n	8115e64 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8115e52:	69bb      	ldr	r3, [r7, #24]
 8115e54:	2b00      	cmp	r3, #0
 8115e56:	d105      	bne.n	8115e64 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8115e58:	2200      	movs	r2, #0
 8115e5a:	68b9      	ldr	r1, [r7, #8]
 8115e5c:	68f8      	ldr	r0, [r7, #12]
 8115e5e:	f000 fee4 	bl	8116c2a <xQueueGenericCreate>
 8115e62:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8115e64:	69fb      	ldr	r3, [r7, #28]
 8115e66:	2b00      	cmp	r3, #0
 8115e68:	d00c      	beq.n	8115e84 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8115e6a:	687b      	ldr	r3, [r7, #4]
 8115e6c:	2b00      	cmp	r3, #0
 8115e6e:	d003      	beq.n	8115e78 <osMessageQueueNew+0xd0>
        name = attr->name;
 8115e70:	687b      	ldr	r3, [r7, #4]
 8115e72:	681b      	ldr	r3, [r3, #0]
 8115e74:	617b      	str	r3, [r7, #20]
 8115e76:	e001      	b.n	8115e7c <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8115e78:	2300      	movs	r3, #0
 8115e7a:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8115e7c:	6979      	ldr	r1, [r7, #20]
 8115e7e:	69f8      	ldr	r0, [r7, #28]
 8115e80:	f001 fe48 	bl	8117b14 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8115e84:	69fb      	ldr	r3, [r7, #28]
}
 8115e86:	4618      	mov	r0, r3
 8115e88:	3720      	adds	r7, #32
 8115e8a:	46bd      	mov	sp, r7
 8115e8c:	bd80      	pop	{r7, pc}
	...

08115e90 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8115e90:	b580      	push	{r7, lr}
 8115e92:	b088      	sub	sp, #32
 8115e94:	af00      	add	r7, sp, #0
 8115e96:	60f8      	str	r0, [r7, #12]
 8115e98:	60b9      	str	r1, [r7, #8]
 8115e9a:	603b      	str	r3, [r7, #0]
 8115e9c:	4613      	mov	r3, r2
 8115e9e:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8115ea0:	68fb      	ldr	r3, [r7, #12]
 8115ea2:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8115ea4:	2300      	movs	r3, #0
 8115ea6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8115ea8:	f3ef 8305 	mrs	r3, IPSR
 8115eac:	617b      	str	r3, [r7, #20]
  return(result);
 8115eae:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8115eb0:	2b00      	cmp	r3, #0
 8115eb2:	d028      	beq.n	8115f06 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8115eb4:	69bb      	ldr	r3, [r7, #24]
 8115eb6:	2b00      	cmp	r3, #0
 8115eb8:	d005      	beq.n	8115ec6 <osMessageQueuePut+0x36>
 8115eba:	68bb      	ldr	r3, [r7, #8]
 8115ebc:	2b00      	cmp	r3, #0
 8115ebe:	d002      	beq.n	8115ec6 <osMessageQueuePut+0x36>
 8115ec0:	683b      	ldr	r3, [r7, #0]
 8115ec2:	2b00      	cmp	r3, #0
 8115ec4:	d003      	beq.n	8115ece <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8115ec6:	f06f 0303 	mvn.w	r3, #3
 8115eca:	61fb      	str	r3, [r7, #28]
 8115ecc:	e038      	b.n	8115f40 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8115ece:	2300      	movs	r3, #0
 8115ed0:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8115ed2:	f107 0210 	add.w	r2, r7, #16
 8115ed6:	2300      	movs	r3, #0
 8115ed8:	68b9      	ldr	r1, [r7, #8]
 8115eda:	69b8      	ldr	r0, [r7, #24]
 8115edc:	f001 f92c 	bl	8117138 <xQueueGenericSendFromISR>
 8115ee0:	4603      	mov	r3, r0
 8115ee2:	2b01      	cmp	r3, #1
 8115ee4:	d003      	beq.n	8115eee <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8115ee6:	f06f 0302 	mvn.w	r3, #2
 8115eea:	61fb      	str	r3, [r7, #28]
 8115eec:	e028      	b.n	8115f40 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8115eee:	693b      	ldr	r3, [r7, #16]
 8115ef0:	2b00      	cmp	r3, #0
 8115ef2:	d025      	beq.n	8115f40 <osMessageQueuePut+0xb0>
 8115ef4:	4b15      	ldr	r3, [pc, #84]	@ (8115f4c <osMessageQueuePut+0xbc>)
 8115ef6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8115efa:	601a      	str	r2, [r3, #0]
 8115efc:	f3bf 8f4f 	dsb	sy
 8115f00:	f3bf 8f6f 	isb	sy
 8115f04:	e01c      	b.n	8115f40 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8115f06:	69bb      	ldr	r3, [r7, #24]
 8115f08:	2b00      	cmp	r3, #0
 8115f0a:	d002      	beq.n	8115f12 <osMessageQueuePut+0x82>
 8115f0c:	68bb      	ldr	r3, [r7, #8]
 8115f0e:	2b00      	cmp	r3, #0
 8115f10:	d103      	bne.n	8115f1a <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8115f12:	f06f 0303 	mvn.w	r3, #3
 8115f16:	61fb      	str	r3, [r7, #28]
 8115f18:	e012      	b.n	8115f40 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8115f1a:	2300      	movs	r3, #0
 8115f1c:	683a      	ldr	r2, [r7, #0]
 8115f1e:	68b9      	ldr	r1, [r7, #8]
 8115f20:	69b8      	ldr	r0, [r7, #24]
 8115f22:	f001 f807 	bl	8116f34 <xQueueGenericSend>
 8115f26:	4603      	mov	r3, r0
 8115f28:	2b01      	cmp	r3, #1
 8115f2a:	d009      	beq.n	8115f40 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8115f2c:	683b      	ldr	r3, [r7, #0]
 8115f2e:	2b00      	cmp	r3, #0
 8115f30:	d003      	beq.n	8115f3a <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8115f32:	f06f 0301 	mvn.w	r3, #1
 8115f36:	61fb      	str	r3, [r7, #28]
 8115f38:	e002      	b.n	8115f40 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8115f3a:	f06f 0302 	mvn.w	r3, #2
 8115f3e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8115f40:	69fb      	ldr	r3, [r7, #28]
}
 8115f42:	4618      	mov	r0, r3
 8115f44:	3720      	adds	r7, #32
 8115f46:	46bd      	mov	sp, r7
 8115f48:	bd80      	pop	{r7, pc}
 8115f4a:	bf00      	nop
 8115f4c:	e000ed04 	.word	0xe000ed04

08115f50 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8115f50:	b580      	push	{r7, lr}
 8115f52:	b088      	sub	sp, #32
 8115f54:	af00      	add	r7, sp, #0
 8115f56:	60f8      	str	r0, [r7, #12]
 8115f58:	60b9      	str	r1, [r7, #8]
 8115f5a:	607a      	str	r2, [r7, #4]
 8115f5c:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8115f5e:	68fb      	ldr	r3, [r7, #12]
 8115f60:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8115f62:	2300      	movs	r3, #0
 8115f64:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8115f66:	f3ef 8305 	mrs	r3, IPSR
 8115f6a:	617b      	str	r3, [r7, #20]
  return(result);
 8115f6c:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8115f6e:	2b00      	cmp	r3, #0
 8115f70:	d028      	beq.n	8115fc4 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8115f72:	69bb      	ldr	r3, [r7, #24]
 8115f74:	2b00      	cmp	r3, #0
 8115f76:	d005      	beq.n	8115f84 <osMessageQueueGet+0x34>
 8115f78:	68bb      	ldr	r3, [r7, #8]
 8115f7a:	2b00      	cmp	r3, #0
 8115f7c:	d002      	beq.n	8115f84 <osMessageQueueGet+0x34>
 8115f7e:	683b      	ldr	r3, [r7, #0]
 8115f80:	2b00      	cmp	r3, #0
 8115f82:	d003      	beq.n	8115f8c <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8115f84:	f06f 0303 	mvn.w	r3, #3
 8115f88:	61fb      	str	r3, [r7, #28]
 8115f8a:	e037      	b.n	8115ffc <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8115f8c:	2300      	movs	r3, #0
 8115f8e:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8115f90:	f107 0310 	add.w	r3, r7, #16
 8115f94:	461a      	mov	r2, r3
 8115f96:	68b9      	ldr	r1, [r7, #8]
 8115f98:	69b8      	ldr	r0, [r7, #24]
 8115f9a:	f001 fbed 	bl	8117778 <xQueueReceiveFromISR>
 8115f9e:	4603      	mov	r3, r0
 8115fa0:	2b01      	cmp	r3, #1
 8115fa2:	d003      	beq.n	8115fac <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8115fa4:	f06f 0302 	mvn.w	r3, #2
 8115fa8:	61fb      	str	r3, [r7, #28]
 8115faa:	e027      	b.n	8115ffc <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8115fac:	693b      	ldr	r3, [r7, #16]
 8115fae:	2b00      	cmp	r3, #0
 8115fb0:	d024      	beq.n	8115ffc <osMessageQueueGet+0xac>
 8115fb2:	4b15      	ldr	r3, [pc, #84]	@ (8116008 <osMessageQueueGet+0xb8>)
 8115fb4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8115fb8:	601a      	str	r2, [r3, #0]
 8115fba:	f3bf 8f4f 	dsb	sy
 8115fbe:	f3bf 8f6f 	isb	sy
 8115fc2:	e01b      	b.n	8115ffc <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8115fc4:	69bb      	ldr	r3, [r7, #24]
 8115fc6:	2b00      	cmp	r3, #0
 8115fc8:	d002      	beq.n	8115fd0 <osMessageQueueGet+0x80>
 8115fca:	68bb      	ldr	r3, [r7, #8]
 8115fcc:	2b00      	cmp	r3, #0
 8115fce:	d103      	bne.n	8115fd8 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8115fd0:	f06f 0303 	mvn.w	r3, #3
 8115fd4:	61fb      	str	r3, [r7, #28]
 8115fd6:	e011      	b.n	8115ffc <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8115fd8:	683a      	ldr	r2, [r7, #0]
 8115fda:	68b9      	ldr	r1, [r7, #8]
 8115fdc:	69b8      	ldr	r0, [r7, #24]
 8115fde:	f001 f9d9 	bl	8117394 <xQueueReceive>
 8115fe2:	4603      	mov	r3, r0
 8115fe4:	2b01      	cmp	r3, #1
 8115fe6:	d009      	beq.n	8115ffc <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8115fe8:	683b      	ldr	r3, [r7, #0]
 8115fea:	2b00      	cmp	r3, #0
 8115fec:	d003      	beq.n	8115ff6 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8115fee:	f06f 0301 	mvn.w	r3, #1
 8115ff2:	61fb      	str	r3, [r7, #28]
 8115ff4:	e002      	b.n	8115ffc <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8115ff6:	f06f 0302 	mvn.w	r3, #2
 8115ffa:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8115ffc:	69fb      	ldr	r3, [r7, #28]
}
 8115ffe:	4618      	mov	r0, r3
 8116000:	3720      	adds	r7, #32
 8116002:	46bd      	mov	sp, r7
 8116004:	bd80      	pop	{r7, pc}
 8116006:	bf00      	nop
 8116008:	e000ed04 	.word	0xe000ed04

0811600c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 811600c:	b480      	push	{r7}
 811600e:	b085      	sub	sp, #20
 8116010:	af00      	add	r7, sp, #0
 8116012:	60f8      	str	r0, [r7, #12]
 8116014:	60b9      	str	r1, [r7, #8]
 8116016:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8116018:	68fb      	ldr	r3, [r7, #12]
 811601a:	4a07      	ldr	r2, [pc, #28]	@ (8116038 <vApplicationGetIdleTaskMemory+0x2c>)
 811601c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 811601e:	68bb      	ldr	r3, [r7, #8]
 8116020:	4a06      	ldr	r2, [pc, #24]	@ (811603c <vApplicationGetIdleTaskMemory+0x30>)
 8116022:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8116024:	687b      	ldr	r3, [r7, #4]
 8116026:	2280      	movs	r2, #128	@ 0x80
 8116028:	601a      	str	r2, [r3, #0]
}
 811602a:	bf00      	nop
 811602c:	3714      	adds	r7, #20
 811602e:	46bd      	mov	sp, r7
 8116030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8116034:	4770      	bx	lr
 8116036:	bf00      	nop
 8116038:	1000049c 	.word	0x1000049c
 811603c:	10000544 	.word	0x10000544

08116040 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8116040:	b480      	push	{r7}
 8116042:	b085      	sub	sp, #20
 8116044:	af00      	add	r7, sp, #0
 8116046:	60f8      	str	r0, [r7, #12]
 8116048:	60b9      	str	r1, [r7, #8]
 811604a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 811604c:	68fb      	ldr	r3, [r7, #12]
 811604e:	4a07      	ldr	r2, [pc, #28]	@ (811606c <vApplicationGetTimerTaskMemory+0x2c>)
 8116050:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8116052:	68bb      	ldr	r3, [r7, #8]
 8116054:	4a06      	ldr	r2, [pc, #24]	@ (8116070 <vApplicationGetTimerTaskMemory+0x30>)
 8116056:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8116058:	687b      	ldr	r3, [r7, #4]
 811605a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 811605e:	601a      	str	r2, [r3, #0]
}
 8116060:	bf00      	nop
 8116062:	3714      	adds	r7, #20
 8116064:	46bd      	mov	sp, r7
 8116066:	f85d 7b04 	ldr.w	r7, [sp], #4
 811606a:	4770      	bx	lr
 811606c:	10000744 	.word	0x10000744
 8116070:	100007ec 	.word	0x100007ec

08116074 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8116074:	b580      	push	{r7, lr}
 8116076:	b08a      	sub	sp, #40	@ 0x28
 8116078:	af00      	add	r7, sp, #0
 811607a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 811607c:	2300      	movs	r3, #0
 811607e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8116080:	f002 fc5e 	bl	8118940 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8116084:	4b5c      	ldr	r3, [pc, #368]	@ (81161f8 <pvPortMalloc+0x184>)
 8116086:	681b      	ldr	r3, [r3, #0]
 8116088:	2b00      	cmp	r3, #0
 811608a:	d101      	bne.n	8116090 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 811608c:	f000 f924 	bl	81162d8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8116090:	4b5a      	ldr	r3, [pc, #360]	@ (81161fc <pvPortMalloc+0x188>)
 8116092:	681a      	ldr	r2, [r3, #0]
 8116094:	687b      	ldr	r3, [r7, #4]
 8116096:	4013      	ands	r3, r2
 8116098:	2b00      	cmp	r3, #0
 811609a:	f040 8095 	bne.w	81161c8 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 811609e:	687b      	ldr	r3, [r7, #4]
 81160a0:	2b00      	cmp	r3, #0
 81160a2:	d01e      	beq.n	81160e2 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 81160a4:	2208      	movs	r2, #8
 81160a6:	687b      	ldr	r3, [r7, #4]
 81160a8:	4413      	add	r3, r2
 81160aa:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 81160ac:	687b      	ldr	r3, [r7, #4]
 81160ae:	f003 0307 	and.w	r3, r3, #7
 81160b2:	2b00      	cmp	r3, #0
 81160b4:	d015      	beq.n	81160e2 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 81160b6:	687b      	ldr	r3, [r7, #4]
 81160b8:	f023 0307 	bic.w	r3, r3, #7
 81160bc:	3308      	adds	r3, #8
 81160be:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 81160c0:	687b      	ldr	r3, [r7, #4]
 81160c2:	f003 0307 	and.w	r3, r3, #7
 81160c6:	2b00      	cmp	r3, #0
 81160c8:	d00b      	beq.n	81160e2 <pvPortMalloc+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 81160ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81160ce:	f383 8811 	msr	BASEPRI, r3
 81160d2:	f3bf 8f6f 	isb	sy
 81160d6:	f3bf 8f4f 	dsb	sy
 81160da:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 81160dc:	bf00      	nop
 81160de:	bf00      	nop
 81160e0:	e7fd      	b.n	81160de <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 81160e2:	687b      	ldr	r3, [r7, #4]
 81160e4:	2b00      	cmp	r3, #0
 81160e6:	d06f      	beq.n	81161c8 <pvPortMalloc+0x154>
 81160e8:	4b45      	ldr	r3, [pc, #276]	@ (8116200 <pvPortMalloc+0x18c>)
 81160ea:	681b      	ldr	r3, [r3, #0]
 81160ec:	687a      	ldr	r2, [r7, #4]
 81160ee:	429a      	cmp	r2, r3
 81160f0:	d86a      	bhi.n	81161c8 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 81160f2:	4b44      	ldr	r3, [pc, #272]	@ (8116204 <pvPortMalloc+0x190>)
 81160f4:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 81160f6:	4b43      	ldr	r3, [pc, #268]	@ (8116204 <pvPortMalloc+0x190>)
 81160f8:	681b      	ldr	r3, [r3, #0]
 81160fa:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 81160fc:	e004      	b.n	8116108 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 81160fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8116100:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8116102:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8116104:	681b      	ldr	r3, [r3, #0]
 8116106:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8116108:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811610a:	685b      	ldr	r3, [r3, #4]
 811610c:	687a      	ldr	r2, [r7, #4]
 811610e:	429a      	cmp	r2, r3
 8116110:	d903      	bls.n	811611a <pvPortMalloc+0xa6>
 8116112:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8116114:	681b      	ldr	r3, [r3, #0]
 8116116:	2b00      	cmp	r3, #0
 8116118:	d1f1      	bne.n	81160fe <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 811611a:	4b37      	ldr	r3, [pc, #220]	@ (81161f8 <pvPortMalloc+0x184>)
 811611c:	681b      	ldr	r3, [r3, #0]
 811611e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8116120:	429a      	cmp	r2, r3
 8116122:	d051      	beq.n	81161c8 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8116124:	6a3b      	ldr	r3, [r7, #32]
 8116126:	681b      	ldr	r3, [r3, #0]
 8116128:	2208      	movs	r2, #8
 811612a:	4413      	add	r3, r2
 811612c:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 811612e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8116130:	681a      	ldr	r2, [r3, #0]
 8116132:	6a3b      	ldr	r3, [r7, #32]
 8116134:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8116136:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8116138:	685a      	ldr	r2, [r3, #4]
 811613a:	687b      	ldr	r3, [r7, #4]
 811613c:	1ad2      	subs	r2, r2, r3
 811613e:	2308      	movs	r3, #8
 8116140:	005b      	lsls	r3, r3, #1
 8116142:	429a      	cmp	r2, r3
 8116144:	d920      	bls.n	8116188 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8116146:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8116148:	687b      	ldr	r3, [r7, #4]
 811614a:	4413      	add	r3, r2
 811614c:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 811614e:	69bb      	ldr	r3, [r7, #24]
 8116150:	f003 0307 	and.w	r3, r3, #7
 8116154:	2b00      	cmp	r3, #0
 8116156:	d00b      	beq.n	8116170 <pvPortMalloc+0xfc>
	__asm volatile
 8116158:	f04f 0350 	mov.w	r3, #80	@ 0x50
 811615c:	f383 8811 	msr	BASEPRI, r3
 8116160:	f3bf 8f6f 	isb	sy
 8116164:	f3bf 8f4f 	dsb	sy
 8116168:	613b      	str	r3, [r7, #16]
}
 811616a:	bf00      	nop
 811616c:	bf00      	nop
 811616e:	e7fd      	b.n	811616c <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8116170:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8116172:	685a      	ldr	r2, [r3, #4]
 8116174:	687b      	ldr	r3, [r7, #4]
 8116176:	1ad2      	subs	r2, r2, r3
 8116178:	69bb      	ldr	r3, [r7, #24]
 811617a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 811617c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811617e:	687a      	ldr	r2, [r7, #4]
 8116180:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8116182:	69b8      	ldr	r0, [r7, #24]
 8116184:	f000 f90a 	bl	811639c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8116188:	4b1d      	ldr	r3, [pc, #116]	@ (8116200 <pvPortMalloc+0x18c>)
 811618a:	681a      	ldr	r2, [r3, #0]
 811618c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811618e:	685b      	ldr	r3, [r3, #4]
 8116190:	1ad3      	subs	r3, r2, r3
 8116192:	4a1b      	ldr	r2, [pc, #108]	@ (8116200 <pvPortMalloc+0x18c>)
 8116194:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8116196:	4b1a      	ldr	r3, [pc, #104]	@ (8116200 <pvPortMalloc+0x18c>)
 8116198:	681a      	ldr	r2, [r3, #0]
 811619a:	4b1b      	ldr	r3, [pc, #108]	@ (8116208 <pvPortMalloc+0x194>)
 811619c:	681b      	ldr	r3, [r3, #0]
 811619e:	429a      	cmp	r2, r3
 81161a0:	d203      	bcs.n	81161aa <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 81161a2:	4b17      	ldr	r3, [pc, #92]	@ (8116200 <pvPortMalloc+0x18c>)
 81161a4:	681b      	ldr	r3, [r3, #0]
 81161a6:	4a18      	ldr	r2, [pc, #96]	@ (8116208 <pvPortMalloc+0x194>)
 81161a8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 81161aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81161ac:	685a      	ldr	r2, [r3, #4]
 81161ae:	4b13      	ldr	r3, [pc, #76]	@ (81161fc <pvPortMalloc+0x188>)
 81161b0:	681b      	ldr	r3, [r3, #0]
 81161b2:	431a      	orrs	r2, r3
 81161b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81161b6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 81161b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81161ba:	2200      	movs	r2, #0
 81161bc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 81161be:	4b13      	ldr	r3, [pc, #76]	@ (811620c <pvPortMalloc+0x198>)
 81161c0:	681b      	ldr	r3, [r3, #0]
 81161c2:	3301      	adds	r3, #1
 81161c4:	4a11      	ldr	r2, [pc, #68]	@ (811620c <pvPortMalloc+0x198>)
 81161c6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 81161c8:	f002 fbc8 	bl	811895c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 81161cc:	69fb      	ldr	r3, [r7, #28]
 81161ce:	f003 0307 	and.w	r3, r3, #7
 81161d2:	2b00      	cmp	r3, #0
 81161d4:	d00b      	beq.n	81161ee <pvPortMalloc+0x17a>
	__asm volatile
 81161d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81161da:	f383 8811 	msr	BASEPRI, r3
 81161de:	f3bf 8f6f 	isb	sy
 81161e2:	f3bf 8f4f 	dsb	sy
 81161e6:	60fb      	str	r3, [r7, #12]
}
 81161e8:	bf00      	nop
 81161ea:	bf00      	nop
 81161ec:	e7fd      	b.n	81161ea <pvPortMalloc+0x176>
	return pvReturn;
 81161ee:	69fb      	ldr	r3, [r7, #28]
}
 81161f0:	4618      	mov	r0, r3
 81161f2:	3728      	adds	r7, #40	@ 0x28
 81161f4:	46bd      	mov	sp, r7
 81161f6:	bd80      	pop	{r7, pc}
 81161f8:	1000abf4 	.word	0x1000abf4
 81161fc:	1000ac08 	.word	0x1000ac08
 8116200:	1000abf8 	.word	0x1000abf8
 8116204:	1000abec 	.word	0x1000abec
 8116208:	1000abfc 	.word	0x1000abfc
 811620c:	1000ac00 	.word	0x1000ac00

08116210 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8116210:	b580      	push	{r7, lr}
 8116212:	b086      	sub	sp, #24
 8116214:	af00      	add	r7, sp, #0
 8116216:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8116218:	687b      	ldr	r3, [r7, #4]
 811621a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 811621c:	687b      	ldr	r3, [r7, #4]
 811621e:	2b00      	cmp	r3, #0
 8116220:	d04f      	beq.n	81162c2 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8116222:	2308      	movs	r3, #8
 8116224:	425b      	negs	r3, r3
 8116226:	697a      	ldr	r2, [r7, #20]
 8116228:	4413      	add	r3, r2
 811622a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 811622c:	697b      	ldr	r3, [r7, #20]
 811622e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8116230:	693b      	ldr	r3, [r7, #16]
 8116232:	685a      	ldr	r2, [r3, #4]
 8116234:	4b25      	ldr	r3, [pc, #148]	@ (81162cc <vPortFree+0xbc>)
 8116236:	681b      	ldr	r3, [r3, #0]
 8116238:	4013      	ands	r3, r2
 811623a:	2b00      	cmp	r3, #0
 811623c:	d10b      	bne.n	8116256 <vPortFree+0x46>
	__asm volatile
 811623e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8116242:	f383 8811 	msr	BASEPRI, r3
 8116246:	f3bf 8f6f 	isb	sy
 811624a:	f3bf 8f4f 	dsb	sy
 811624e:	60fb      	str	r3, [r7, #12]
}
 8116250:	bf00      	nop
 8116252:	bf00      	nop
 8116254:	e7fd      	b.n	8116252 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8116256:	693b      	ldr	r3, [r7, #16]
 8116258:	681b      	ldr	r3, [r3, #0]
 811625a:	2b00      	cmp	r3, #0
 811625c:	d00b      	beq.n	8116276 <vPortFree+0x66>
	__asm volatile
 811625e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8116262:	f383 8811 	msr	BASEPRI, r3
 8116266:	f3bf 8f6f 	isb	sy
 811626a:	f3bf 8f4f 	dsb	sy
 811626e:	60bb      	str	r3, [r7, #8]
}
 8116270:	bf00      	nop
 8116272:	bf00      	nop
 8116274:	e7fd      	b.n	8116272 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8116276:	693b      	ldr	r3, [r7, #16]
 8116278:	685a      	ldr	r2, [r3, #4]
 811627a:	4b14      	ldr	r3, [pc, #80]	@ (81162cc <vPortFree+0xbc>)
 811627c:	681b      	ldr	r3, [r3, #0]
 811627e:	4013      	ands	r3, r2
 8116280:	2b00      	cmp	r3, #0
 8116282:	d01e      	beq.n	81162c2 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8116284:	693b      	ldr	r3, [r7, #16]
 8116286:	681b      	ldr	r3, [r3, #0]
 8116288:	2b00      	cmp	r3, #0
 811628a:	d11a      	bne.n	81162c2 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 811628c:	693b      	ldr	r3, [r7, #16]
 811628e:	685a      	ldr	r2, [r3, #4]
 8116290:	4b0e      	ldr	r3, [pc, #56]	@ (81162cc <vPortFree+0xbc>)
 8116292:	681b      	ldr	r3, [r3, #0]
 8116294:	43db      	mvns	r3, r3
 8116296:	401a      	ands	r2, r3
 8116298:	693b      	ldr	r3, [r7, #16]
 811629a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 811629c:	f002 fb50 	bl	8118940 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 81162a0:	693b      	ldr	r3, [r7, #16]
 81162a2:	685a      	ldr	r2, [r3, #4]
 81162a4:	4b0a      	ldr	r3, [pc, #40]	@ (81162d0 <vPortFree+0xc0>)
 81162a6:	681b      	ldr	r3, [r3, #0]
 81162a8:	4413      	add	r3, r2
 81162aa:	4a09      	ldr	r2, [pc, #36]	@ (81162d0 <vPortFree+0xc0>)
 81162ac:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 81162ae:	6938      	ldr	r0, [r7, #16]
 81162b0:	f000 f874 	bl	811639c <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 81162b4:	4b07      	ldr	r3, [pc, #28]	@ (81162d4 <vPortFree+0xc4>)
 81162b6:	681b      	ldr	r3, [r3, #0]
 81162b8:	3301      	adds	r3, #1
 81162ba:	4a06      	ldr	r2, [pc, #24]	@ (81162d4 <vPortFree+0xc4>)
 81162bc:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 81162be:	f002 fb4d 	bl	811895c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 81162c2:	bf00      	nop
 81162c4:	3718      	adds	r7, #24
 81162c6:	46bd      	mov	sp, r7
 81162c8:	bd80      	pop	{r7, pc}
 81162ca:	bf00      	nop
 81162cc:	1000ac08 	.word	0x1000ac08
 81162d0:	1000abf8 	.word	0x1000abf8
 81162d4:	1000ac04 	.word	0x1000ac04

081162d8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 81162d8:	b480      	push	{r7}
 81162da:	b085      	sub	sp, #20
 81162dc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 81162de:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 81162e2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 81162e4:	4b27      	ldr	r3, [pc, #156]	@ (8116384 <prvHeapInit+0xac>)
 81162e6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 81162e8:	68fb      	ldr	r3, [r7, #12]
 81162ea:	f003 0307 	and.w	r3, r3, #7
 81162ee:	2b00      	cmp	r3, #0
 81162f0:	d00c      	beq.n	811630c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 81162f2:	68fb      	ldr	r3, [r7, #12]
 81162f4:	3307      	adds	r3, #7
 81162f6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 81162f8:	68fb      	ldr	r3, [r7, #12]
 81162fa:	f023 0307 	bic.w	r3, r3, #7
 81162fe:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8116300:	68ba      	ldr	r2, [r7, #8]
 8116302:	68fb      	ldr	r3, [r7, #12]
 8116304:	1ad3      	subs	r3, r2, r3
 8116306:	4a1f      	ldr	r2, [pc, #124]	@ (8116384 <prvHeapInit+0xac>)
 8116308:	4413      	add	r3, r2
 811630a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 811630c:	68fb      	ldr	r3, [r7, #12]
 811630e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8116310:	4a1d      	ldr	r2, [pc, #116]	@ (8116388 <prvHeapInit+0xb0>)
 8116312:	687b      	ldr	r3, [r7, #4]
 8116314:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8116316:	4b1c      	ldr	r3, [pc, #112]	@ (8116388 <prvHeapInit+0xb0>)
 8116318:	2200      	movs	r2, #0
 811631a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 811631c:	687b      	ldr	r3, [r7, #4]
 811631e:	68ba      	ldr	r2, [r7, #8]
 8116320:	4413      	add	r3, r2
 8116322:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8116324:	2208      	movs	r2, #8
 8116326:	68fb      	ldr	r3, [r7, #12]
 8116328:	1a9b      	subs	r3, r3, r2
 811632a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 811632c:	68fb      	ldr	r3, [r7, #12]
 811632e:	f023 0307 	bic.w	r3, r3, #7
 8116332:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8116334:	68fb      	ldr	r3, [r7, #12]
 8116336:	4a15      	ldr	r2, [pc, #84]	@ (811638c <prvHeapInit+0xb4>)
 8116338:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 811633a:	4b14      	ldr	r3, [pc, #80]	@ (811638c <prvHeapInit+0xb4>)
 811633c:	681b      	ldr	r3, [r3, #0]
 811633e:	2200      	movs	r2, #0
 8116340:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8116342:	4b12      	ldr	r3, [pc, #72]	@ (811638c <prvHeapInit+0xb4>)
 8116344:	681b      	ldr	r3, [r3, #0]
 8116346:	2200      	movs	r2, #0
 8116348:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 811634a:	687b      	ldr	r3, [r7, #4]
 811634c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 811634e:	683b      	ldr	r3, [r7, #0]
 8116350:	68fa      	ldr	r2, [r7, #12]
 8116352:	1ad2      	subs	r2, r2, r3
 8116354:	683b      	ldr	r3, [r7, #0]
 8116356:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8116358:	4b0c      	ldr	r3, [pc, #48]	@ (811638c <prvHeapInit+0xb4>)
 811635a:	681a      	ldr	r2, [r3, #0]
 811635c:	683b      	ldr	r3, [r7, #0]
 811635e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8116360:	683b      	ldr	r3, [r7, #0]
 8116362:	685b      	ldr	r3, [r3, #4]
 8116364:	4a0a      	ldr	r2, [pc, #40]	@ (8116390 <prvHeapInit+0xb8>)
 8116366:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8116368:	683b      	ldr	r3, [r7, #0]
 811636a:	685b      	ldr	r3, [r3, #4]
 811636c:	4a09      	ldr	r2, [pc, #36]	@ (8116394 <prvHeapInit+0xbc>)
 811636e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8116370:	4b09      	ldr	r3, [pc, #36]	@ (8116398 <prvHeapInit+0xc0>)
 8116372:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8116376:	601a      	str	r2, [r3, #0]
}
 8116378:	bf00      	nop
 811637a:	3714      	adds	r7, #20
 811637c:	46bd      	mov	sp, r7
 811637e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8116382:	4770      	bx	lr
 8116384:	10000bec 	.word	0x10000bec
 8116388:	1000abec 	.word	0x1000abec
 811638c:	1000abf4 	.word	0x1000abf4
 8116390:	1000abfc 	.word	0x1000abfc
 8116394:	1000abf8 	.word	0x1000abf8
 8116398:	1000ac08 	.word	0x1000ac08

0811639c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 811639c:	b480      	push	{r7}
 811639e:	b085      	sub	sp, #20
 81163a0:	af00      	add	r7, sp, #0
 81163a2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 81163a4:	4b28      	ldr	r3, [pc, #160]	@ (8116448 <prvInsertBlockIntoFreeList+0xac>)
 81163a6:	60fb      	str	r3, [r7, #12]
 81163a8:	e002      	b.n	81163b0 <prvInsertBlockIntoFreeList+0x14>
 81163aa:	68fb      	ldr	r3, [r7, #12]
 81163ac:	681b      	ldr	r3, [r3, #0]
 81163ae:	60fb      	str	r3, [r7, #12]
 81163b0:	68fb      	ldr	r3, [r7, #12]
 81163b2:	681b      	ldr	r3, [r3, #0]
 81163b4:	687a      	ldr	r2, [r7, #4]
 81163b6:	429a      	cmp	r2, r3
 81163b8:	d8f7      	bhi.n	81163aa <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 81163ba:	68fb      	ldr	r3, [r7, #12]
 81163bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 81163be:	68fb      	ldr	r3, [r7, #12]
 81163c0:	685b      	ldr	r3, [r3, #4]
 81163c2:	68ba      	ldr	r2, [r7, #8]
 81163c4:	4413      	add	r3, r2
 81163c6:	687a      	ldr	r2, [r7, #4]
 81163c8:	429a      	cmp	r2, r3
 81163ca:	d108      	bne.n	81163de <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 81163cc:	68fb      	ldr	r3, [r7, #12]
 81163ce:	685a      	ldr	r2, [r3, #4]
 81163d0:	687b      	ldr	r3, [r7, #4]
 81163d2:	685b      	ldr	r3, [r3, #4]
 81163d4:	441a      	add	r2, r3
 81163d6:	68fb      	ldr	r3, [r7, #12]
 81163d8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 81163da:	68fb      	ldr	r3, [r7, #12]
 81163dc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 81163de:	687b      	ldr	r3, [r7, #4]
 81163e0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 81163e2:	687b      	ldr	r3, [r7, #4]
 81163e4:	685b      	ldr	r3, [r3, #4]
 81163e6:	68ba      	ldr	r2, [r7, #8]
 81163e8:	441a      	add	r2, r3
 81163ea:	68fb      	ldr	r3, [r7, #12]
 81163ec:	681b      	ldr	r3, [r3, #0]
 81163ee:	429a      	cmp	r2, r3
 81163f0:	d118      	bne.n	8116424 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 81163f2:	68fb      	ldr	r3, [r7, #12]
 81163f4:	681a      	ldr	r2, [r3, #0]
 81163f6:	4b15      	ldr	r3, [pc, #84]	@ (811644c <prvInsertBlockIntoFreeList+0xb0>)
 81163f8:	681b      	ldr	r3, [r3, #0]
 81163fa:	429a      	cmp	r2, r3
 81163fc:	d00d      	beq.n	811641a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 81163fe:	687b      	ldr	r3, [r7, #4]
 8116400:	685a      	ldr	r2, [r3, #4]
 8116402:	68fb      	ldr	r3, [r7, #12]
 8116404:	681b      	ldr	r3, [r3, #0]
 8116406:	685b      	ldr	r3, [r3, #4]
 8116408:	441a      	add	r2, r3
 811640a:	687b      	ldr	r3, [r7, #4]
 811640c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 811640e:	68fb      	ldr	r3, [r7, #12]
 8116410:	681b      	ldr	r3, [r3, #0]
 8116412:	681a      	ldr	r2, [r3, #0]
 8116414:	687b      	ldr	r3, [r7, #4]
 8116416:	601a      	str	r2, [r3, #0]
 8116418:	e008      	b.n	811642c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 811641a:	4b0c      	ldr	r3, [pc, #48]	@ (811644c <prvInsertBlockIntoFreeList+0xb0>)
 811641c:	681a      	ldr	r2, [r3, #0]
 811641e:	687b      	ldr	r3, [r7, #4]
 8116420:	601a      	str	r2, [r3, #0]
 8116422:	e003      	b.n	811642c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8116424:	68fb      	ldr	r3, [r7, #12]
 8116426:	681a      	ldr	r2, [r3, #0]
 8116428:	687b      	ldr	r3, [r7, #4]
 811642a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 811642c:	68fa      	ldr	r2, [r7, #12]
 811642e:	687b      	ldr	r3, [r7, #4]
 8116430:	429a      	cmp	r2, r3
 8116432:	d002      	beq.n	811643a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8116434:	68fb      	ldr	r3, [r7, #12]
 8116436:	687a      	ldr	r2, [r7, #4]
 8116438:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 811643a:	bf00      	nop
 811643c:	3714      	adds	r7, #20
 811643e:	46bd      	mov	sp, r7
 8116440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8116444:	4770      	bx	lr
 8116446:	bf00      	nop
 8116448:	1000abec 	.word	0x1000abec
 811644c:	1000abf4 	.word	0x1000abf4

08116450 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8116450:	b480      	push	{r7}
 8116452:	b083      	sub	sp, #12
 8116454:	af00      	add	r7, sp, #0
 8116456:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8116458:	687b      	ldr	r3, [r7, #4]
 811645a:	f103 0208 	add.w	r2, r3, #8
 811645e:	687b      	ldr	r3, [r7, #4]
 8116460:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8116462:	687b      	ldr	r3, [r7, #4]
 8116464:	f04f 32ff 	mov.w	r2, #4294967295
 8116468:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 811646a:	687b      	ldr	r3, [r7, #4]
 811646c:	f103 0208 	add.w	r2, r3, #8
 8116470:	687b      	ldr	r3, [r7, #4]
 8116472:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8116474:	687b      	ldr	r3, [r7, #4]
 8116476:	f103 0208 	add.w	r2, r3, #8
 811647a:	687b      	ldr	r3, [r7, #4]
 811647c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 811647e:	687b      	ldr	r3, [r7, #4]
 8116480:	2200      	movs	r2, #0
 8116482:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8116484:	bf00      	nop
 8116486:	370c      	adds	r7, #12
 8116488:	46bd      	mov	sp, r7
 811648a:	f85d 7b04 	ldr.w	r7, [sp], #4
 811648e:	4770      	bx	lr

08116490 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8116490:	b480      	push	{r7}
 8116492:	b083      	sub	sp, #12
 8116494:	af00      	add	r7, sp, #0
 8116496:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8116498:	687b      	ldr	r3, [r7, #4]
 811649a:	2200      	movs	r2, #0
 811649c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 811649e:	bf00      	nop
 81164a0:	370c      	adds	r7, #12
 81164a2:	46bd      	mov	sp, r7
 81164a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81164a8:	4770      	bx	lr

081164aa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 81164aa:	b480      	push	{r7}
 81164ac:	b085      	sub	sp, #20
 81164ae:	af00      	add	r7, sp, #0
 81164b0:	6078      	str	r0, [r7, #4]
 81164b2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 81164b4:	687b      	ldr	r3, [r7, #4]
 81164b6:	685b      	ldr	r3, [r3, #4]
 81164b8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 81164ba:	683b      	ldr	r3, [r7, #0]
 81164bc:	68fa      	ldr	r2, [r7, #12]
 81164be:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 81164c0:	68fb      	ldr	r3, [r7, #12]
 81164c2:	689a      	ldr	r2, [r3, #8]
 81164c4:	683b      	ldr	r3, [r7, #0]
 81164c6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 81164c8:	68fb      	ldr	r3, [r7, #12]
 81164ca:	689b      	ldr	r3, [r3, #8]
 81164cc:	683a      	ldr	r2, [r7, #0]
 81164ce:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 81164d0:	68fb      	ldr	r3, [r7, #12]
 81164d2:	683a      	ldr	r2, [r7, #0]
 81164d4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 81164d6:	683b      	ldr	r3, [r7, #0]
 81164d8:	687a      	ldr	r2, [r7, #4]
 81164da:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 81164dc:	687b      	ldr	r3, [r7, #4]
 81164de:	681b      	ldr	r3, [r3, #0]
 81164e0:	1c5a      	adds	r2, r3, #1
 81164e2:	687b      	ldr	r3, [r7, #4]
 81164e4:	601a      	str	r2, [r3, #0]
}
 81164e6:	bf00      	nop
 81164e8:	3714      	adds	r7, #20
 81164ea:	46bd      	mov	sp, r7
 81164ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 81164f0:	4770      	bx	lr

081164f2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 81164f2:	b480      	push	{r7}
 81164f4:	b085      	sub	sp, #20
 81164f6:	af00      	add	r7, sp, #0
 81164f8:	6078      	str	r0, [r7, #4]
 81164fa:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 81164fc:	683b      	ldr	r3, [r7, #0]
 81164fe:	681b      	ldr	r3, [r3, #0]
 8116500:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8116502:	68bb      	ldr	r3, [r7, #8]
 8116504:	f1b3 3fff 	cmp.w	r3, #4294967295
 8116508:	d103      	bne.n	8116512 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 811650a:	687b      	ldr	r3, [r7, #4]
 811650c:	691b      	ldr	r3, [r3, #16]
 811650e:	60fb      	str	r3, [r7, #12]
 8116510:	e00c      	b.n	811652c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8116512:	687b      	ldr	r3, [r7, #4]
 8116514:	3308      	adds	r3, #8
 8116516:	60fb      	str	r3, [r7, #12]
 8116518:	e002      	b.n	8116520 <vListInsert+0x2e>
 811651a:	68fb      	ldr	r3, [r7, #12]
 811651c:	685b      	ldr	r3, [r3, #4]
 811651e:	60fb      	str	r3, [r7, #12]
 8116520:	68fb      	ldr	r3, [r7, #12]
 8116522:	685b      	ldr	r3, [r3, #4]
 8116524:	681b      	ldr	r3, [r3, #0]
 8116526:	68ba      	ldr	r2, [r7, #8]
 8116528:	429a      	cmp	r2, r3
 811652a:	d2f6      	bcs.n	811651a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 811652c:	68fb      	ldr	r3, [r7, #12]
 811652e:	685a      	ldr	r2, [r3, #4]
 8116530:	683b      	ldr	r3, [r7, #0]
 8116532:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8116534:	683b      	ldr	r3, [r7, #0]
 8116536:	685b      	ldr	r3, [r3, #4]
 8116538:	683a      	ldr	r2, [r7, #0]
 811653a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 811653c:	683b      	ldr	r3, [r7, #0]
 811653e:	68fa      	ldr	r2, [r7, #12]
 8116540:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8116542:	68fb      	ldr	r3, [r7, #12]
 8116544:	683a      	ldr	r2, [r7, #0]
 8116546:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8116548:	683b      	ldr	r3, [r7, #0]
 811654a:	687a      	ldr	r2, [r7, #4]
 811654c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 811654e:	687b      	ldr	r3, [r7, #4]
 8116550:	681b      	ldr	r3, [r3, #0]
 8116552:	1c5a      	adds	r2, r3, #1
 8116554:	687b      	ldr	r3, [r7, #4]
 8116556:	601a      	str	r2, [r3, #0]
}
 8116558:	bf00      	nop
 811655a:	3714      	adds	r7, #20
 811655c:	46bd      	mov	sp, r7
 811655e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8116562:	4770      	bx	lr

08116564 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8116564:	b480      	push	{r7}
 8116566:	b085      	sub	sp, #20
 8116568:	af00      	add	r7, sp, #0
 811656a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 811656c:	687b      	ldr	r3, [r7, #4]
 811656e:	691b      	ldr	r3, [r3, #16]
 8116570:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8116572:	687b      	ldr	r3, [r7, #4]
 8116574:	685b      	ldr	r3, [r3, #4]
 8116576:	687a      	ldr	r2, [r7, #4]
 8116578:	6892      	ldr	r2, [r2, #8]
 811657a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 811657c:	687b      	ldr	r3, [r7, #4]
 811657e:	689b      	ldr	r3, [r3, #8]
 8116580:	687a      	ldr	r2, [r7, #4]
 8116582:	6852      	ldr	r2, [r2, #4]
 8116584:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8116586:	68fb      	ldr	r3, [r7, #12]
 8116588:	685b      	ldr	r3, [r3, #4]
 811658a:	687a      	ldr	r2, [r7, #4]
 811658c:	429a      	cmp	r2, r3
 811658e:	d103      	bne.n	8116598 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8116590:	687b      	ldr	r3, [r7, #4]
 8116592:	689a      	ldr	r2, [r3, #8]
 8116594:	68fb      	ldr	r3, [r7, #12]
 8116596:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8116598:	687b      	ldr	r3, [r7, #4]
 811659a:	2200      	movs	r2, #0
 811659c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 811659e:	68fb      	ldr	r3, [r7, #12]
 81165a0:	681b      	ldr	r3, [r3, #0]
 81165a2:	1e5a      	subs	r2, r3, #1
 81165a4:	68fb      	ldr	r3, [r7, #12]
 81165a6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 81165a8:	68fb      	ldr	r3, [r7, #12]
 81165aa:	681b      	ldr	r3, [r3, #0]
}
 81165ac:	4618      	mov	r0, r3
 81165ae:	3714      	adds	r7, #20
 81165b0:	46bd      	mov	sp, r7
 81165b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81165b6:	4770      	bx	lr

081165b8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 81165b8:	b480      	push	{r7}
 81165ba:	b085      	sub	sp, #20
 81165bc:	af00      	add	r7, sp, #0
 81165be:	60f8      	str	r0, [r7, #12]
 81165c0:	60b9      	str	r1, [r7, #8]
 81165c2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 81165c4:	68fb      	ldr	r3, [r7, #12]
 81165c6:	3b04      	subs	r3, #4
 81165c8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 81165ca:	68fb      	ldr	r3, [r7, #12]
 81165cc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 81165d0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 81165d2:	68fb      	ldr	r3, [r7, #12]
 81165d4:	3b04      	subs	r3, #4
 81165d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 81165d8:	68bb      	ldr	r3, [r7, #8]
 81165da:	f023 0201 	bic.w	r2, r3, #1
 81165de:	68fb      	ldr	r3, [r7, #12]
 81165e0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 81165e2:	68fb      	ldr	r3, [r7, #12]
 81165e4:	3b04      	subs	r3, #4
 81165e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 81165e8:	4a0c      	ldr	r2, [pc, #48]	@ (811661c <pxPortInitialiseStack+0x64>)
 81165ea:	68fb      	ldr	r3, [r7, #12]
 81165ec:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 81165ee:	68fb      	ldr	r3, [r7, #12]
 81165f0:	3b14      	subs	r3, #20
 81165f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 81165f4:	687a      	ldr	r2, [r7, #4]
 81165f6:	68fb      	ldr	r3, [r7, #12]
 81165f8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 81165fa:	68fb      	ldr	r3, [r7, #12]
 81165fc:	3b04      	subs	r3, #4
 81165fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8116600:	68fb      	ldr	r3, [r7, #12]
 8116602:	f06f 0202 	mvn.w	r2, #2
 8116606:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8116608:	68fb      	ldr	r3, [r7, #12]
 811660a:	3b20      	subs	r3, #32
 811660c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 811660e:	68fb      	ldr	r3, [r7, #12]
}
 8116610:	4618      	mov	r0, r3
 8116612:	3714      	adds	r7, #20
 8116614:	46bd      	mov	sp, r7
 8116616:	f85d 7b04 	ldr.w	r7, [sp], #4
 811661a:	4770      	bx	lr
 811661c:	08116621 	.word	0x08116621

08116620 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8116620:	b480      	push	{r7}
 8116622:	b085      	sub	sp, #20
 8116624:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8116626:	2300      	movs	r3, #0
 8116628:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 811662a:	4b13      	ldr	r3, [pc, #76]	@ (8116678 <prvTaskExitError+0x58>)
 811662c:	681b      	ldr	r3, [r3, #0]
 811662e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8116632:	d00b      	beq.n	811664c <prvTaskExitError+0x2c>
	__asm volatile
 8116634:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8116638:	f383 8811 	msr	BASEPRI, r3
 811663c:	f3bf 8f6f 	isb	sy
 8116640:	f3bf 8f4f 	dsb	sy
 8116644:	60fb      	str	r3, [r7, #12]
}
 8116646:	bf00      	nop
 8116648:	bf00      	nop
 811664a:	e7fd      	b.n	8116648 <prvTaskExitError+0x28>
	__asm volatile
 811664c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8116650:	f383 8811 	msr	BASEPRI, r3
 8116654:	f3bf 8f6f 	isb	sy
 8116658:	f3bf 8f4f 	dsb	sy
 811665c:	60bb      	str	r3, [r7, #8]
}
 811665e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8116660:	bf00      	nop
 8116662:	687b      	ldr	r3, [r7, #4]
 8116664:	2b00      	cmp	r3, #0
 8116666:	d0fc      	beq.n	8116662 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8116668:	bf00      	nop
 811666a:	bf00      	nop
 811666c:	3714      	adds	r7, #20
 811666e:	46bd      	mov	sp, r7
 8116670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8116674:	4770      	bx	lr
 8116676:	bf00      	nop
 8116678:	10000024 	.word	0x10000024
 811667c:	00000000 	.word	0x00000000

08116680 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8116680:	4b07      	ldr	r3, [pc, #28]	@ (81166a0 <pxCurrentTCBConst2>)
 8116682:	6819      	ldr	r1, [r3, #0]
 8116684:	6808      	ldr	r0, [r1, #0]
 8116686:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 811668a:	f380 8809 	msr	PSP, r0
 811668e:	f3bf 8f6f 	isb	sy
 8116692:	f04f 0000 	mov.w	r0, #0
 8116696:	f380 8811 	msr	BASEPRI, r0
 811669a:	4770      	bx	lr
 811669c:	f3af 8000 	nop.w

081166a0 <pxCurrentTCBConst2>:
 81166a0:	1000ac54 	.word	0x1000ac54
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 81166a4:	bf00      	nop
 81166a6:	bf00      	nop

081166a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 81166a8:	4808      	ldr	r0, [pc, #32]	@ (81166cc <prvPortStartFirstTask+0x24>)
 81166aa:	6800      	ldr	r0, [r0, #0]
 81166ac:	6800      	ldr	r0, [r0, #0]
 81166ae:	f380 8808 	msr	MSP, r0
 81166b2:	f04f 0000 	mov.w	r0, #0
 81166b6:	f380 8814 	msr	CONTROL, r0
 81166ba:	b662      	cpsie	i
 81166bc:	b661      	cpsie	f
 81166be:	f3bf 8f4f 	dsb	sy
 81166c2:	f3bf 8f6f 	isb	sy
 81166c6:	df00      	svc	0
 81166c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 81166ca:	bf00      	nop
 81166cc:	e000ed08 	.word	0xe000ed08

081166d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 81166d0:	b580      	push	{r7, lr}
 81166d2:	b086      	sub	sp, #24
 81166d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 81166d6:	4b47      	ldr	r3, [pc, #284]	@ (81167f4 <xPortStartScheduler+0x124>)
 81166d8:	681b      	ldr	r3, [r3, #0]
 81166da:	4a47      	ldr	r2, [pc, #284]	@ (81167f8 <xPortStartScheduler+0x128>)
 81166dc:	4293      	cmp	r3, r2
 81166de:	d10b      	bne.n	81166f8 <xPortStartScheduler+0x28>
	__asm volatile
 81166e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81166e4:	f383 8811 	msr	BASEPRI, r3
 81166e8:	f3bf 8f6f 	isb	sy
 81166ec:	f3bf 8f4f 	dsb	sy
 81166f0:	613b      	str	r3, [r7, #16]
}
 81166f2:	bf00      	nop
 81166f4:	bf00      	nop
 81166f6:	e7fd      	b.n	81166f4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 81166f8:	4b3e      	ldr	r3, [pc, #248]	@ (81167f4 <xPortStartScheduler+0x124>)
 81166fa:	681b      	ldr	r3, [r3, #0]
 81166fc:	4a3f      	ldr	r2, [pc, #252]	@ (81167fc <xPortStartScheduler+0x12c>)
 81166fe:	4293      	cmp	r3, r2
 8116700:	d10b      	bne.n	811671a <xPortStartScheduler+0x4a>
	__asm volatile
 8116702:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8116706:	f383 8811 	msr	BASEPRI, r3
 811670a:	f3bf 8f6f 	isb	sy
 811670e:	f3bf 8f4f 	dsb	sy
 8116712:	60fb      	str	r3, [r7, #12]
}
 8116714:	bf00      	nop
 8116716:	bf00      	nop
 8116718:	e7fd      	b.n	8116716 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 811671a:	4b39      	ldr	r3, [pc, #228]	@ (8116800 <xPortStartScheduler+0x130>)
 811671c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 811671e:	697b      	ldr	r3, [r7, #20]
 8116720:	781b      	ldrb	r3, [r3, #0]
 8116722:	b2db      	uxtb	r3, r3
 8116724:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8116726:	697b      	ldr	r3, [r7, #20]
 8116728:	22ff      	movs	r2, #255	@ 0xff
 811672a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 811672c:	697b      	ldr	r3, [r7, #20]
 811672e:	781b      	ldrb	r3, [r3, #0]
 8116730:	b2db      	uxtb	r3, r3
 8116732:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8116734:	78fb      	ldrb	r3, [r7, #3]
 8116736:	b2db      	uxtb	r3, r3
 8116738:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 811673c:	b2da      	uxtb	r2, r3
 811673e:	4b31      	ldr	r3, [pc, #196]	@ (8116804 <xPortStartScheduler+0x134>)
 8116740:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8116742:	4b31      	ldr	r3, [pc, #196]	@ (8116808 <xPortStartScheduler+0x138>)
 8116744:	2207      	movs	r2, #7
 8116746:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8116748:	e009      	b.n	811675e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 811674a:	4b2f      	ldr	r3, [pc, #188]	@ (8116808 <xPortStartScheduler+0x138>)
 811674c:	681b      	ldr	r3, [r3, #0]
 811674e:	3b01      	subs	r3, #1
 8116750:	4a2d      	ldr	r2, [pc, #180]	@ (8116808 <xPortStartScheduler+0x138>)
 8116752:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8116754:	78fb      	ldrb	r3, [r7, #3]
 8116756:	b2db      	uxtb	r3, r3
 8116758:	005b      	lsls	r3, r3, #1
 811675a:	b2db      	uxtb	r3, r3
 811675c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 811675e:	78fb      	ldrb	r3, [r7, #3]
 8116760:	b2db      	uxtb	r3, r3
 8116762:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8116766:	2b80      	cmp	r3, #128	@ 0x80
 8116768:	d0ef      	beq.n	811674a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 811676a:	4b27      	ldr	r3, [pc, #156]	@ (8116808 <xPortStartScheduler+0x138>)
 811676c:	681b      	ldr	r3, [r3, #0]
 811676e:	f1c3 0307 	rsb	r3, r3, #7
 8116772:	2b04      	cmp	r3, #4
 8116774:	d00b      	beq.n	811678e <xPortStartScheduler+0xbe>
	__asm volatile
 8116776:	f04f 0350 	mov.w	r3, #80	@ 0x50
 811677a:	f383 8811 	msr	BASEPRI, r3
 811677e:	f3bf 8f6f 	isb	sy
 8116782:	f3bf 8f4f 	dsb	sy
 8116786:	60bb      	str	r3, [r7, #8]
}
 8116788:	bf00      	nop
 811678a:	bf00      	nop
 811678c:	e7fd      	b.n	811678a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 811678e:	4b1e      	ldr	r3, [pc, #120]	@ (8116808 <xPortStartScheduler+0x138>)
 8116790:	681b      	ldr	r3, [r3, #0]
 8116792:	021b      	lsls	r3, r3, #8
 8116794:	4a1c      	ldr	r2, [pc, #112]	@ (8116808 <xPortStartScheduler+0x138>)
 8116796:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8116798:	4b1b      	ldr	r3, [pc, #108]	@ (8116808 <xPortStartScheduler+0x138>)
 811679a:	681b      	ldr	r3, [r3, #0]
 811679c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 81167a0:	4a19      	ldr	r2, [pc, #100]	@ (8116808 <xPortStartScheduler+0x138>)
 81167a2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 81167a4:	687b      	ldr	r3, [r7, #4]
 81167a6:	b2da      	uxtb	r2, r3
 81167a8:	697b      	ldr	r3, [r7, #20]
 81167aa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 81167ac:	4b17      	ldr	r3, [pc, #92]	@ (811680c <xPortStartScheduler+0x13c>)
 81167ae:	681b      	ldr	r3, [r3, #0]
 81167b0:	4a16      	ldr	r2, [pc, #88]	@ (811680c <xPortStartScheduler+0x13c>)
 81167b2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 81167b6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 81167b8:	4b14      	ldr	r3, [pc, #80]	@ (811680c <xPortStartScheduler+0x13c>)
 81167ba:	681b      	ldr	r3, [r3, #0]
 81167bc:	4a13      	ldr	r2, [pc, #76]	@ (811680c <xPortStartScheduler+0x13c>)
 81167be:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 81167c2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 81167c4:	f000 f8da 	bl	811697c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 81167c8:	4b11      	ldr	r3, [pc, #68]	@ (8116810 <xPortStartScheduler+0x140>)
 81167ca:	2200      	movs	r2, #0
 81167cc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 81167ce:	f000 f8f9 	bl	81169c4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 81167d2:	4b10      	ldr	r3, [pc, #64]	@ (8116814 <xPortStartScheduler+0x144>)
 81167d4:	681b      	ldr	r3, [r3, #0]
 81167d6:	4a0f      	ldr	r2, [pc, #60]	@ (8116814 <xPortStartScheduler+0x144>)
 81167d8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 81167dc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 81167de:	f7ff ff63 	bl	81166a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 81167e2:	f002 fa35 	bl	8118c50 <vTaskSwitchContext>
	prvTaskExitError();
 81167e6:	f7ff ff1b 	bl	8116620 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 81167ea:	2300      	movs	r3, #0
}
 81167ec:	4618      	mov	r0, r3
 81167ee:	3718      	adds	r7, #24
 81167f0:	46bd      	mov	sp, r7
 81167f2:	bd80      	pop	{r7, pc}
 81167f4:	e000ed00 	.word	0xe000ed00
 81167f8:	410fc271 	.word	0x410fc271
 81167fc:	410fc270 	.word	0x410fc270
 8116800:	e000e400 	.word	0xe000e400
 8116804:	1000ac0c 	.word	0x1000ac0c
 8116808:	1000ac10 	.word	0x1000ac10
 811680c:	e000ed20 	.word	0xe000ed20
 8116810:	10000024 	.word	0x10000024
 8116814:	e000ef34 	.word	0xe000ef34

08116818 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8116818:	b480      	push	{r7}
 811681a:	b083      	sub	sp, #12
 811681c:	af00      	add	r7, sp, #0
	__asm volatile
 811681e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8116822:	f383 8811 	msr	BASEPRI, r3
 8116826:	f3bf 8f6f 	isb	sy
 811682a:	f3bf 8f4f 	dsb	sy
 811682e:	607b      	str	r3, [r7, #4]
}
 8116830:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8116832:	4b10      	ldr	r3, [pc, #64]	@ (8116874 <vPortEnterCritical+0x5c>)
 8116834:	681b      	ldr	r3, [r3, #0]
 8116836:	3301      	adds	r3, #1
 8116838:	4a0e      	ldr	r2, [pc, #56]	@ (8116874 <vPortEnterCritical+0x5c>)
 811683a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 811683c:	4b0d      	ldr	r3, [pc, #52]	@ (8116874 <vPortEnterCritical+0x5c>)
 811683e:	681b      	ldr	r3, [r3, #0]
 8116840:	2b01      	cmp	r3, #1
 8116842:	d110      	bne.n	8116866 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8116844:	4b0c      	ldr	r3, [pc, #48]	@ (8116878 <vPortEnterCritical+0x60>)
 8116846:	681b      	ldr	r3, [r3, #0]
 8116848:	b2db      	uxtb	r3, r3
 811684a:	2b00      	cmp	r3, #0
 811684c:	d00b      	beq.n	8116866 <vPortEnterCritical+0x4e>
	__asm volatile
 811684e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8116852:	f383 8811 	msr	BASEPRI, r3
 8116856:	f3bf 8f6f 	isb	sy
 811685a:	f3bf 8f4f 	dsb	sy
 811685e:	603b      	str	r3, [r7, #0]
}
 8116860:	bf00      	nop
 8116862:	bf00      	nop
 8116864:	e7fd      	b.n	8116862 <vPortEnterCritical+0x4a>
	}
}
 8116866:	bf00      	nop
 8116868:	370c      	adds	r7, #12
 811686a:	46bd      	mov	sp, r7
 811686c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8116870:	4770      	bx	lr
 8116872:	bf00      	nop
 8116874:	10000024 	.word	0x10000024
 8116878:	e000ed04 	.word	0xe000ed04

0811687c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 811687c:	b480      	push	{r7}
 811687e:	b083      	sub	sp, #12
 8116880:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8116882:	4b12      	ldr	r3, [pc, #72]	@ (81168cc <vPortExitCritical+0x50>)
 8116884:	681b      	ldr	r3, [r3, #0]
 8116886:	2b00      	cmp	r3, #0
 8116888:	d10b      	bne.n	81168a2 <vPortExitCritical+0x26>
	__asm volatile
 811688a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 811688e:	f383 8811 	msr	BASEPRI, r3
 8116892:	f3bf 8f6f 	isb	sy
 8116896:	f3bf 8f4f 	dsb	sy
 811689a:	607b      	str	r3, [r7, #4]
}
 811689c:	bf00      	nop
 811689e:	bf00      	nop
 81168a0:	e7fd      	b.n	811689e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 81168a2:	4b0a      	ldr	r3, [pc, #40]	@ (81168cc <vPortExitCritical+0x50>)
 81168a4:	681b      	ldr	r3, [r3, #0]
 81168a6:	3b01      	subs	r3, #1
 81168a8:	4a08      	ldr	r2, [pc, #32]	@ (81168cc <vPortExitCritical+0x50>)
 81168aa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 81168ac:	4b07      	ldr	r3, [pc, #28]	@ (81168cc <vPortExitCritical+0x50>)
 81168ae:	681b      	ldr	r3, [r3, #0]
 81168b0:	2b00      	cmp	r3, #0
 81168b2:	d105      	bne.n	81168c0 <vPortExitCritical+0x44>
 81168b4:	2300      	movs	r3, #0
 81168b6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 81168b8:	683b      	ldr	r3, [r7, #0]
 81168ba:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 81168be:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 81168c0:	bf00      	nop
 81168c2:	370c      	adds	r7, #12
 81168c4:	46bd      	mov	sp, r7
 81168c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81168ca:	4770      	bx	lr
 81168cc:	10000024 	.word	0x10000024

081168d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 81168d0:	f3ef 8009 	mrs	r0, PSP
 81168d4:	f3bf 8f6f 	isb	sy
 81168d8:	4b15      	ldr	r3, [pc, #84]	@ (8116930 <pxCurrentTCBConst>)
 81168da:	681a      	ldr	r2, [r3, #0]
 81168dc:	f01e 0f10 	tst.w	lr, #16
 81168e0:	bf08      	it	eq
 81168e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 81168e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 81168ea:	6010      	str	r0, [r2, #0]
 81168ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 81168f0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 81168f4:	f380 8811 	msr	BASEPRI, r0
 81168f8:	f3bf 8f4f 	dsb	sy
 81168fc:	f3bf 8f6f 	isb	sy
 8116900:	f002 f9a6 	bl	8118c50 <vTaskSwitchContext>
 8116904:	f04f 0000 	mov.w	r0, #0
 8116908:	f380 8811 	msr	BASEPRI, r0
 811690c:	bc09      	pop	{r0, r3}
 811690e:	6819      	ldr	r1, [r3, #0]
 8116910:	6808      	ldr	r0, [r1, #0]
 8116912:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8116916:	f01e 0f10 	tst.w	lr, #16
 811691a:	bf08      	it	eq
 811691c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8116920:	f380 8809 	msr	PSP, r0
 8116924:	f3bf 8f6f 	isb	sy
 8116928:	4770      	bx	lr
 811692a:	bf00      	nop
 811692c:	f3af 8000 	nop.w

08116930 <pxCurrentTCBConst>:
 8116930:	1000ac54 	.word	0x1000ac54
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8116934:	bf00      	nop
 8116936:	bf00      	nop

08116938 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8116938:	b580      	push	{r7, lr}
 811693a:	b082      	sub	sp, #8
 811693c:	af00      	add	r7, sp, #0
	__asm volatile
 811693e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8116942:	f383 8811 	msr	BASEPRI, r3
 8116946:	f3bf 8f6f 	isb	sy
 811694a:	f3bf 8f4f 	dsb	sy
 811694e:	607b      	str	r3, [r7, #4]
}
 8116950:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8116952:	f002 f8c3 	bl	8118adc <xTaskIncrementTick>
 8116956:	4603      	mov	r3, r0
 8116958:	2b00      	cmp	r3, #0
 811695a:	d003      	beq.n	8116964 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 811695c:	4b06      	ldr	r3, [pc, #24]	@ (8116978 <xPortSysTickHandler+0x40>)
 811695e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8116962:	601a      	str	r2, [r3, #0]
 8116964:	2300      	movs	r3, #0
 8116966:	603b      	str	r3, [r7, #0]
	__asm volatile
 8116968:	683b      	ldr	r3, [r7, #0]
 811696a:	f383 8811 	msr	BASEPRI, r3
}
 811696e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8116970:	bf00      	nop
 8116972:	3708      	adds	r7, #8
 8116974:	46bd      	mov	sp, r7
 8116976:	bd80      	pop	{r7, pc}
 8116978:	e000ed04 	.word	0xe000ed04

0811697c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 811697c:	b480      	push	{r7}
 811697e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8116980:	4b0b      	ldr	r3, [pc, #44]	@ (81169b0 <vPortSetupTimerInterrupt+0x34>)
 8116982:	2200      	movs	r2, #0
 8116984:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8116986:	4b0b      	ldr	r3, [pc, #44]	@ (81169b4 <vPortSetupTimerInterrupt+0x38>)
 8116988:	2200      	movs	r2, #0
 811698a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 811698c:	4b0a      	ldr	r3, [pc, #40]	@ (81169b8 <vPortSetupTimerInterrupt+0x3c>)
 811698e:	681b      	ldr	r3, [r3, #0]
 8116990:	4a0a      	ldr	r2, [pc, #40]	@ (81169bc <vPortSetupTimerInterrupt+0x40>)
 8116992:	fba2 2303 	umull	r2, r3, r2, r3
 8116996:	099b      	lsrs	r3, r3, #6
 8116998:	4a09      	ldr	r2, [pc, #36]	@ (81169c0 <vPortSetupTimerInterrupt+0x44>)
 811699a:	3b01      	subs	r3, #1
 811699c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 811699e:	4b04      	ldr	r3, [pc, #16]	@ (81169b0 <vPortSetupTimerInterrupt+0x34>)
 81169a0:	2207      	movs	r2, #7
 81169a2:	601a      	str	r2, [r3, #0]
}
 81169a4:	bf00      	nop
 81169a6:	46bd      	mov	sp, r7
 81169a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81169ac:	4770      	bx	lr
 81169ae:	bf00      	nop
 81169b0:	e000e010 	.word	0xe000e010
 81169b4:	e000e018 	.word	0xe000e018
 81169b8:	10000018 	.word	0x10000018
 81169bc:	10624dd3 	.word	0x10624dd3
 81169c0:	e000e014 	.word	0xe000e014

081169c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 81169c4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 81169d4 <vPortEnableVFP+0x10>
 81169c8:	6801      	ldr	r1, [r0, #0]
 81169ca:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 81169ce:	6001      	str	r1, [r0, #0]
 81169d0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 81169d2:	bf00      	nop
 81169d4:	e000ed88 	.word	0xe000ed88

081169d8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 81169d8:	b480      	push	{r7}
 81169da:	b085      	sub	sp, #20
 81169dc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 81169de:	f3ef 8305 	mrs	r3, IPSR
 81169e2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 81169e4:	68fb      	ldr	r3, [r7, #12]
 81169e6:	2b0f      	cmp	r3, #15
 81169e8:	d915      	bls.n	8116a16 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 81169ea:	4a18      	ldr	r2, [pc, #96]	@ (8116a4c <vPortValidateInterruptPriority+0x74>)
 81169ec:	68fb      	ldr	r3, [r7, #12]
 81169ee:	4413      	add	r3, r2
 81169f0:	781b      	ldrb	r3, [r3, #0]
 81169f2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 81169f4:	4b16      	ldr	r3, [pc, #88]	@ (8116a50 <vPortValidateInterruptPriority+0x78>)
 81169f6:	781b      	ldrb	r3, [r3, #0]
 81169f8:	7afa      	ldrb	r2, [r7, #11]
 81169fa:	429a      	cmp	r2, r3
 81169fc:	d20b      	bcs.n	8116a16 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 81169fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8116a02:	f383 8811 	msr	BASEPRI, r3
 8116a06:	f3bf 8f6f 	isb	sy
 8116a0a:	f3bf 8f4f 	dsb	sy
 8116a0e:	607b      	str	r3, [r7, #4]
}
 8116a10:	bf00      	nop
 8116a12:	bf00      	nop
 8116a14:	e7fd      	b.n	8116a12 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8116a16:	4b0f      	ldr	r3, [pc, #60]	@ (8116a54 <vPortValidateInterruptPriority+0x7c>)
 8116a18:	681b      	ldr	r3, [r3, #0]
 8116a1a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8116a1e:	4b0e      	ldr	r3, [pc, #56]	@ (8116a58 <vPortValidateInterruptPriority+0x80>)
 8116a20:	681b      	ldr	r3, [r3, #0]
 8116a22:	429a      	cmp	r2, r3
 8116a24:	d90b      	bls.n	8116a3e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8116a26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8116a2a:	f383 8811 	msr	BASEPRI, r3
 8116a2e:	f3bf 8f6f 	isb	sy
 8116a32:	f3bf 8f4f 	dsb	sy
 8116a36:	603b      	str	r3, [r7, #0]
}
 8116a38:	bf00      	nop
 8116a3a:	bf00      	nop
 8116a3c:	e7fd      	b.n	8116a3a <vPortValidateInterruptPriority+0x62>
	}
 8116a3e:	bf00      	nop
 8116a40:	3714      	adds	r7, #20
 8116a42:	46bd      	mov	sp, r7
 8116a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8116a48:	4770      	bx	lr
 8116a4a:	bf00      	nop
 8116a4c:	e000e3f0 	.word	0xe000e3f0
 8116a50:	1000ac0c 	.word	0x1000ac0c
 8116a54:	e000ed0c 	.word	0xe000ed0c
 8116a58:	1000ac10 	.word	0x1000ac10

08116a5c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8116a5c:	b580      	push	{r7, lr}
 8116a5e:	b084      	sub	sp, #16
 8116a60:	af00      	add	r7, sp, #0
 8116a62:	6078      	str	r0, [r7, #4]
 8116a64:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8116a66:	687b      	ldr	r3, [r7, #4]
 8116a68:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8116a6a:	68fb      	ldr	r3, [r7, #12]
 8116a6c:	2b00      	cmp	r3, #0
 8116a6e:	d10b      	bne.n	8116a88 <xQueueGenericReset+0x2c>
	__asm volatile
 8116a70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8116a74:	f383 8811 	msr	BASEPRI, r3
 8116a78:	f3bf 8f6f 	isb	sy
 8116a7c:	f3bf 8f4f 	dsb	sy
 8116a80:	60bb      	str	r3, [r7, #8]
}
 8116a82:	bf00      	nop
 8116a84:	bf00      	nop
 8116a86:	e7fd      	b.n	8116a84 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8116a88:	f7ff fec6 	bl	8116818 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8116a8c:	68fb      	ldr	r3, [r7, #12]
 8116a8e:	681a      	ldr	r2, [r3, #0]
 8116a90:	68fb      	ldr	r3, [r7, #12]
 8116a92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8116a94:	68f9      	ldr	r1, [r7, #12]
 8116a96:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8116a98:	fb01 f303 	mul.w	r3, r1, r3
 8116a9c:	441a      	add	r2, r3
 8116a9e:	68fb      	ldr	r3, [r7, #12]
 8116aa0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8116aa2:	68fb      	ldr	r3, [r7, #12]
 8116aa4:	2200      	movs	r2, #0
 8116aa6:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8116aa8:	68fb      	ldr	r3, [r7, #12]
 8116aaa:	681a      	ldr	r2, [r3, #0]
 8116aac:	68fb      	ldr	r3, [r7, #12]
 8116aae:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8116ab0:	68fb      	ldr	r3, [r7, #12]
 8116ab2:	681a      	ldr	r2, [r3, #0]
 8116ab4:	68fb      	ldr	r3, [r7, #12]
 8116ab6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8116ab8:	3b01      	subs	r3, #1
 8116aba:	68f9      	ldr	r1, [r7, #12]
 8116abc:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8116abe:	fb01 f303 	mul.w	r3, r1, r3
 8116ac2:	441a      	add	r2, r3
 8116ac4:	68fb      	ldr	r3, [r7, #12]
 8116ac6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8116ac8:	68fb      	ldr	r3, [r7, #12]
 8116aca:	22ff      	movs	r2, #255	@ 0xff
 8116acc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8116ad0:	68fb      	ldr	r3, [r7, #12]
 8116ad2:	22ff      	movs	r2, #255	@ 0xff
 8116ad4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8116ad8:	683b      	ldr	r3, [r7, #0]
 8116ada:	2b00      	cmp	r3, #0
 8116adc:	d114      	bne.n	8116b08 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8116ade:	68fb      	ldr	r3, [r7, #12]
 8116ae0:	691b      	ldr	r3, [r3, #16]
 8116ae2:	2b00      	cmp	r3, #0
 8116ae4:	d01a      	beq.n	8116b1c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8116ae6:	68fb      	ldr	r3, [r7, #12]
 8116ae8:	3310      	adds	r3, #16
 8116aea:	4618      	mov	r0, r3
 8116aec:	f002 f968 	bl	8118dc0 <xTaskRemoveFromEventList>
 8116af0:	4603      	mov	r3, r0
 8116af2:	2b00      	cmp	r3, #0
 8116af4:	d012      	beq.n	8116b1c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8116af6:	4b0d      	ldr	r3, [pc, #52]	@ (8116b2c <xQueueGenericReset+0xd0>)
 8116af8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8116afc:	601a      	str	r2, [r3, #0]
 8116afe:	f3bf 8f4f 	dsb	sy
 8116b02:	f3bf 8f6f 	isb	sy
 8116b06:	e009      	b.n	8116b1c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8116b08:	68fb      	ldr	r3, [r7, #12]
 8116b0a:	3310      	adds	r3, #16
 8116b0c:	4618      	mov	r0, r3
 8116b0e:	f7ff fc9f 	bl	8116450 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8116b12:	68fb      	ldr	r3, [r7, #12]
 8116b14:	3324      	adds	r3, #36	@ 0x24
 8116b16:	4618      	mov	r0, r3
 8116b18:	f7ff fc9a 	bl	8116450 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8116b1c:	f7ff feae 	bl	811687c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8116b20:	2301      	movs	r3, #1
}
 8116b22:	4618      	mov	r0, r3
 8116b24:	3710      	adds	r7, #16
 8116b26:	46bd      	mov	sp, r7
 8116b28:	bd80      	pop	{r7, pc}
 8116b2a:	bf00      	nop
 8116b2c:	e000ed04 	.word	0xe000ed04

08116b30 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8116b30:	b580      	push	{r7, lr}
 8116b32:	b08e      	sub	sp, #56	@ 0x38
 8116b34:	af02      	add	r7, sp, #8
 8116b36:	60f8      	str	r0, [r7, #12]
 8116b38:	60b9      	str	r1, [r7, #8]
 8116b3a:	607a      	str	r2, [r7, #4]
 8116b3c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8116b3e:	68fb      	ldr	r3, [r7, #12]
 8116b40:	2b00      	cmp	r3, #0
 8116b42:	d10b      	bne.n	8116b5c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8116b44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8116b48:	f383 8811 	msr	BASEPRI, r3
 8116b4c:	f3bf 8f6f 	isb	sy
 8116b50:	f3bf 8f4f 	dsb	sy
 8116b54:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8116b56:	bf00      	nop
 8116b58:	bf00      	nop
 8116b5a:	e7fd      	b.n	8116b58 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8116b5c:	683b      	ldr	r3, [r7, #0]
 8116b5e:	2b00      	cmp	r3, #0
 8116b60:	d10b      	bne.n	8116b7a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8116b62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8116b66:	f383 8811 	msr	BASEPRI, r3
 8116b6a:	f3bf 8f6f 	isb	sy
 8116b6e:	f3bf 8f4f 	dsb	sy
 8116b72:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8116b74:	bf00      	nop
 8116b76:	bf00      	nop
 8116b78:	e7fd      	b.n	8116b76 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8116b7a:	687b      	ldr	r3, [r7, #4]
 8116b7c:	2b00      	cmp	r3, #0
 8116b7e:	d002      	beq.n	8116b86 <xQueueGenericCreateStatic+0x56>
 8116b80:	68bb      	ldr	r3, [r7, #8]
 8116b82:	2b00      	cmp	r3, #0
 8116b84:	d001      	beq.n	8116b8a <xQueueGenericCreateStatic+0x5a>
 8116b86:	2301      	movs	r3, #1
 8116b88:	e000      	b.n	8116b8c <xQueueGenericCreateStatic+0x5c>
 8116b8a:	2300      	movs	r3, #0
 8116b8c:	2b00      	cmp	r3, #0
 8116b8e:	d10b      	bne.n	8116ba8 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8116b90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8116b94:	f383 8811 	msr	BASEPRI, r3
 8116b98:	f3bf 8f6f 	isb	sy
 8116b9c:	f3bf 8f4f 	dsb	sy
 8116ba0:	623b      	str	r3, [r7, #32]
}
 8116ba2:	bf00      	nop
 8116ba4:	bf00      	nop
 8116ba6:	e7fd      	b.n	8116ba4 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8116ba8:	687b      	ldr	r3, [r7, #4]
 8116baa:	2b00      	cmp	r3, #0
 8116bac:	d102      	bne.n	8116bb4 <xQueueGenericCreateStatic+0x84>
 8116bae:	68bb      	ldr	r3, [r7, #8]
 8116bb0:	2b00      	cmp	r3, #0
 8116bb2:	d101      	bne.n	8116bb8 <xQueueGenericCreateStatic+0x88>
 8116bb4:	2301      	movs	r3, #1
 8116bb6:	e000      	b.n	8116bba <xQueueGenericCreateStatic+0x8a>
 8116bb8:	2300      	movs	r3, #0
 8116bba:	2b00      	cmp	r3, #0
 8116bbc:	d10b      	bne.n	8116bd6 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8116bbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8116bc2:	f383 8811 	msr	BASEPRI, r3
 8116bc6:	f3bf 8f6f 	isb	sy
 8116bca:	f3bf 8f4f 	dsb	sy
 8116bce:	61fb      	str	r3, [r7, #28]
}
 8116bd0:	bf00      	nop
 8116bd2:	bf00      	nop
 8116bd4:	e7fd      	b.n	8116bd2 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8116bd6:	2350      	movs	r3, #80	@ 0x50
 8116bd8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8116bda:	697b      	ldr	r3, [r7, #20]
 8116bdc:	2b50      	cmp	r3, #80	@ 0x50
 8116bde:	d00b      	beq.n	8116bf8 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8116be0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8116be4:	f383 8811 	msr	BASEPRI, r3
 8116be8:	f3bf 8f6f 	isb	sy
 8116bec:	f3bf 8f4f 	dsb	sy
 8116bf0:	61bb      	str	r3, [r7, #24]
}
 8116bf2:	bf00      	nop
 8116bf4:	bf00      	nop
 8116bf6:	e7fd      	b.n	8116bf4 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8116bf8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8116bfa:	683b      	ldr	r3, [r7, #0]
 8116bfc:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8116bfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8116c00:	2b00      	cmp	r3, #0
 8116c02:	d00d      	beq.n	8116c20 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8116c04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8116c06:	2201      	movs	r2, #1
 8116c08:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8116c0c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8116c10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8116c12:	9300      	str	r3, [sp, #0]
 8116c14:	4613      	mov	r3, r2
 8116c16:	687a      	ldr	r2, [r7, #4]
 8116c18:	68b9      	ldr	r1, [r7, #8]
 8116c1a:	68f8      	ldr	r0, [r7, #12]
 8116c1c:	f000 f840 	bl	8116ca0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8116c20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8116c22:	4618      	mov	r0, r3
 8116c24:	3730      	adds	r7, #48	@ 0x30
 8116c26:	46bd      	mov	sp, r7
 8116c28:	bd80      	pop	{r7, pc}

08116c2a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8116c2a:	b580      	push	{r7, lr}
 8116c2c:	b08a      	sub	sp, #40	@ 0x28
 8116c2e:	af02      	add	r7, sp, #8
 8116c30:	60f8      	str	r0, [r7, #12]
 8116c32:	60b9      	str	r1, [r7, #8]
 8116c34:	4613      	mov	r3, r2
 8116c36:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8116c38:	68fb      	ldr	r3, [r7, #12]
 8116c3a:	2b00      	cmp	r3, #0
 8116c3c:	d10b      	bne.n	8116c56 <xQueueGenericCreate+0x2c>
	__asm volatile
 8116c3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8116c42:	f383 8811 	msr	BASEPRI, r3
 8116c46:	f3bf 8f6f 	isb	sy
 8116c4a:	f3bf 8f4f 	dsb	sy
 8116c4e:	613b      	str	r3, [r7, #16]
}
 8116c50:	bf00      	nop
 8116c52:	bf00      	nop
 8116c54:	e7fd      	b.n	8116c52 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8116c56:	68fb      	ldr	r3, [r7, #12]
 8116c58:	68ba      	ldr	r2, [r7, #8]
 8116c5a:	fb02 f303 	mul.w	r3, r2, r3
 8116c5e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8116c60:	69fb      	ldr	r3, [r7, #28]
 8116c62:	3350      	adds	r3, #80	@ 0x50
 8116c64:	4618      	mov	r0, r3
 8116c66:	f7ff fa05 	bl	8116074 <pvPortMalloc>
 8116c6a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8116c6c:	69bb      	ldr	r3, [r7, #24]
 8116c6e:	2b00      	cmp	r3, #0
 8116c70:	d011      	beq.n	8116c96 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8116c72:	69bb      	ldr	r3, [r7, #24]
 8116c74:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8116c76:	697b      	ldr	r3, [r7, #20]
 8116c78:	3350      	adds	r3, #80	@ 0x50
 8116c7a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8116c7c:	69bb      	ldr	r3, [r7, #24]
 8116c7e:	2200      	movs	r2, #0
 8116c80:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8116c84:	79fa      	ldrb	r2, [r7, #7]
 8116c86:	69bb      	ldr	r3, [r7, #24]
 8116c88:	9300      	str	r3, [sp, #0]
 8116c8a:	4613      	mov	r3, r2
 8116c8c:	697a      	ldr	r2, [r7, #20]
 8116c8e:	68b9      	ldr	r1, [r7, #8]
 8116c90:	68f8      	ldr	r0, [r7, #12]
 8116c92:	f000 f805 	bl	8116ca0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8116c96:	69bb      	ldr	r3, [r7, #24]
	}
 8116c98:	4618      	mov	r0, r3
 8116c9a:	3720      	adds	r7, #32
 8116c9c:	46bd      	mov	sp, r7
 8116c9e:	bd80      	pop	{r7, pc}

08116ca0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8116ca0:	b580      	push	{r7, lr}
 8116ca2:	b084      	sub	sp, #16
 8116ca4:	af00      	add	r7, sp, #0
 8116ca6:	60f8      	str	r0, [r7, #12]
 8116ca8:	60b9      	str	r1, [r7, #8]
 8116caa:	607a      	str	r2, [r7, #4]
 8116cac:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8116cae:	68bb      	ldr	r3, [r7, #8]
 8116cb0:	2b00      	cmp	r3, #0
 8116cb2:	d103      	bne.n	8116cbc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8116cb4:	69bb      	ldr	r3, [r7, #24]
 8116cb6:	69ba      	ldr	r2, [r7, #24]
 8116cb8:	601a      	str	r2, [r3, #0]
 8116cba:	e002      	b.n	8116cc2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8116cbc:	69bb      	ldr	r3, [r7, #24]
 8116cbe:	687a      	ldr	r2, [r7, #4]
 8116cc0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8116cc2:	69bb      	ldr	r3, [r7, #24]
 8116cc4:	68fa      	ldr	r2, [r7, #12]
 8116cc6:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8116cc8:	69bb      	ldr	r3, [r7, #24]
 8116cca:	68ba      	ldr	r2, [r7, #8]
 8116ccc:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8116cce:	2101      	movs	r1, #1
 8116cd0:	69b8      	ldr	r0, [r7, #24]
 8116cd2:	f7ff fec3 	bl	8116a5c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8116cd6:	69bb      	ldr	r3, [r7, #24]
 8116cd8:	78fa      	ldrb	r2, [r7, #3]
 8116cda:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8116cde:	bf00      	nop
 8116ce0:	3710      	adds	r7, #16
 8116ce2:	46bd      	mov	sp, r7
 8116ce4:	bd80      	pop	{r7, pc}

08116ce6 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8116ce6:	b580      	push	{r7, lr}
 8116ce8:	b082      	sub	sp, #8
 8116cea:	af00      	add	r7, sp, #0
 8116cec:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8116cee:	687b      	ldr	r3, [r7, #4]
 8116cf0:	2b00      	cmp	r3, #0
 8116cf2:	d00e      	beq.n	8116d12 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8116cf4:	687b      	ldr	r3, [r7, #4]
 8116cf6:	2200      	movs	r2, #0
 8116cf8:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8116cfa:	687b      	ldr	r3, [r7, #4]
 8116cfc:	2200      	movs	r2, #0
 8116cfe:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8116d00:	687b      	ldr	r3, [r7, #4]
 8116d02:	2200      	movs	r2, #0
 8116d04:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8116d06:	2300      	movs	r3, #0
 8116d08:	2200      	movs	r2, #0
 8116d0a:	2100      	movs	r1, #0
 8116d0c:	6878      	ldr	r0, [r7, #4]
 8116d0e:	f000 f911 	bl	8116f34 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8116d12:	bf00      	nop
 8116d14:	3708      	adds	r7, #8
 8116d16:	46bd      	mov	sp, r7
 8116d18:	bd80      	pop	{r7, pc}

08116d1a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8116d1a:	b580      	push	{r7, lr}
 8116d1c:	b086      	sub	sp, #24
 8116d1e:	af00      	add	r7, sp, #0
 8116d20:	4603      	mov	r3, r0
 8116d22:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8116d24:	2301      	movs	r3, #1
 8116d26:	617b      	str	r3, [r7, #20]
 8116d28:	2300      	movs	r3, #0
 8116d2a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8116d2c:	79fb      	ldrb	r3, [r7, #7]
 8116d2e:	461a      	mov	r2, r3
 8116d30:	6939      	ldr	r1, [r7, #16]
 8116d32:	6978      	ldr	r0, [r7, #20]
 8116d34:	f7ff ff79 	bl	8116c2a <xQueueGenericCreate>
 8116d38:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8116d3a:	68f8      	ldr	r0, [r7, #12]
 8116d3c:	f7ff ffd3 	bl	8116ce6 <prvInitialiseMutex>

		return xNewQueue;
 8116d40:	68fb      	ldr	r3, [r7, #12]
	}
 8116d42:	4618      	mov	r0, r3
 8116d44:	3718      	adds	r7, #24
 8116d46:	46bd      	mov	sp, r7
 8116d48:	bd80      	pop	{r7, pc}

08116d4a <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8116d4a:	b580      	push	{r7, lr}
 8116d4c:	b088      	sub	sp, #32
 8116d4e:	af02      	add	r7, sp, #8
 8116d50:	4603      	mov	r3, r0
 8116d52:	6039      	str	r1, [r7, #0]
 8116d54:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8116d56:	2301      	movs	r3, #1
 8116d58:	617b      	str	r3, [r7, #20]
 8116d5a:	2300      	movs	r3, #0
 8116d5c:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8116d5e:	79fb      	ldrb	r3, [r7, #7]
 8116d60:	9300      	str	r3, [sp, #0]
 8116d62:	683b      	ldr	r3, [r7, #0]
 8116d64:	2200      	movs	r2, #0
 8116d66:	6939      	ldr	r1, [r7, #16]
 8116d68:	6978      	ldr	r0, [r7, #20]
 8116d6a:	f7ff fee1 	bl	8116b30 <xQueueGenericCreateStatic>
 8116d6e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8116d70:	68f8      	ldr	r0, [r7, #12]
 8116d72:	f7ff ffb8 	bl	8116ce6 <prvInitialiseMutex>

		return xNewQueue;
 8116d76:	68fb      	ldr	r3, [r7, #12]
	}
 8116d78:	4618      	mov	r0, r3
 8116d7a:	3718      	adds	r7, #24
 8116d7c:	46bd      	mov	sp, r7
 8116d7e:	bd80      	pop	{r7, pc}

08116d80 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8116d80:	b590      	push	{r4, r7, lr}
 8116d82:	b087      	sub	sp, #28
 8116d84:	af00      	add	r7, sp, #0
 8116d86:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8116d88:	687b      	ldr	r3, [r7, #4]
 8116d8a:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8116d8c:	693b      	ldr	r3, [r7, #16]
 8116d8e:	2b00      	cmp	r3, #0
 8116d90:	d10b      	bne.n	8116daa <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 8116d92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8116d96:	f383 8811 	msr	BASEPRI, r3
 8116d9a:	f3bf 8f6f 	isb	sy
 8116d9e:	f3bf 8f4f 	dsb	sy
 8116da2:	60fb      	str	r3, [r7, #12]
}
 8116da4:	bf00      	nop
 8116da6:	bf00      	nop
 8116da8:	e7fd      	b.n	8116da6 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8116daa:	693b      	ldr	r3, [r7, #16]
 8116dac:	689c      	ldr	r4, [r3, #8]
 8116dae:	f002 f9f5 	bl	811919c <xTaskGetCurrentTaskHandle>
 8116db2:	4603      	mov	r3, r0
 8116db4:	429c      	cmp	r4, r3
 8116db6:	d111      	bne.n	8116ddc <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8116db8:	693b      	ldr	r3, [r7, #16]
 8116dba:	68db      	ldr	r3, [r3, #12]
 8116dbc:	1e5a      	subs	r2, r3, #1
 8116dbe:	693b      	ldr	r3, [r7, #16]
 8116dc0:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8116dc2:	693b      	ldr	r3, [r7, #16]
 8116dc4:	68db      	ldr	r3, [r3, #12]
 8116dc6:	2b00      	cmp	r3, #0
 8116dc8:	d105      	bne.n	8116dd6 <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8116dca:	2300      	movs	r3, #0
 8116dcc:	2200      	movs	r2, #0
 8116dce:	2100      	movs	r1, #0
 8116dd0:	6938      	ldr	r0, [r7, #16]
 8116dd2:	f000 f8af 	bl	8116f34 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8116dd6:	2301      	movs	r3, #1
 8116dd8:	617b      	str	r3, [r7, #20]
 8116dda:	e001      	b.n	8116de0 <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8116ddc:	2300      	movs	r3, #0
 8116dde:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8116de0:	697b      	ldr	r3, [r7, #20]
	}
 8116de2:	4618      	mov	r0, r3
 8116de4:	371c      	adds	r7, #28
 8116de6:	46bd      	mov	sp, r7
 8116de8:	bd90      	pop	{r4, r7, pc}

08116dea <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8116dea:	b590      	push	{r4, r7, lr}
 8116dec:	b087      	sub	sp, #28
 8116dee:	af00      	add	r7, sp, #0
 8116df0:	6078      	str	r0, [r7, #4]
 8116df2:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8116df4:	687b      	ldr	r3, [r7, #4]
 8116df6:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8116df8:	693b      	ldr	r3, [r7, #16]
 8116dfa:	2b00      	cmp	r3, #0
 8116dfc:	d10b      	bne.n	8116e16 <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 8116dfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8116e02:	f383 8811 	msr	BASEPRI, r3
 8116e06:	f3bf 8f6f 	isb	sy
 8116e0a:	f3bf 8f4f 	dsb	sy
 8116e0e:	60fb      	str	r3, [r7, #12]
}
 8116e10:	bf00      	nop
 8116e12:	bf00      	nop
 8116e14:	e7fd      	b.n	8116e12 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8116e16:	693b      	ldr	r3, [r7, #16]
 8116e18:	689c      	ldr	r4, [r3, #8]
 8116e1a:	f002 f9bf 	bl	811919c <xTaskGetCurrentTaskHandle>
 8116e1e:	4603      	mov	r3, r0
 8116e20:	429c      	cmp	r4, r3
 8116e22:	d107      	bne.n	8116e34 <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8116e24:	693b      	ldr	r3, [r7, #16]
 8116e26:	68db      	ldr	r3, [r3, #12]
 8116e28:	1c5a      	adds	r2, r3, #1
 8116e2a:	693b      	ldr	r3, [r7, #16]
 8116e2c:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8116e2e:	2301      	movs	r3, #1
 8116e30:	617b      	str	r3, [r7, #20]
 8116e32:	e00c      	b.n	8116e4e <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8116e34:	6839      	ldr	r1, [r7, #0]
 8116e36:	6938      	ldr	r0, [r7, #16]
 8116e38:	f000 fb8e 	bl	8117558 <xQueueSemaphoreTake>
 8116e3c:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8116e3e:	697b      	ldr	r3, [r7, #20]
 8116e40:	2b00      	cmp	r3, #0
 8116e42:	d004      	beq.n	8116e4e <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8116e44:	693b      	ldr	r3, [r7, #16]
 8116e46:	68db      	ldr	r3, [r3, #12]
 8116e48:	1c5a      	adds	r2, r3, #1
 8116e4a:	693b      	ldr	r3, [r7, #16]
 8116e4c:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8116e4e:	697b      	ldr	r3, [r7, #20]
	}
 8116e50:	4618      	mov	r0, r3
 8116e52:	371c      	adds	r7, #28
 8116e54:	46bd      	mov	sp, r7
 8116e56:	bd90      	pop	{r4, r7, pc}

08116e58 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8116e58:	b580      	push	{r7, lr}
 8116e5a:	b08a      	sub	sp, #40	@ 0x28
 8116e5c:	af02      	add	r7, sp, #8
 8116e5e:	60f8      	str	r0, [r7, #12]
 8116e60:	60b9      	str	r1, [r7, #8]
 8116e62:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8116e64:	68fb      	ldr	r3, [r7, #12]
 8116e66:	2b00      	cmp	r3, #0
 8116e68:	d10b      	bne.n	8116e82 <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 8116e6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8116e6e:	f383 8811 	msr	BASEPRI, r3
 8116e72:	f3bf 8f6f 	isb	sy
 8116e76:	f3bf 8f4f 	dsb	sy
 8116e7a:	61bb      	str	r3, [r7, #24]
}
 8116e7c:	bf00      	nop
 8116e7e:	bf00      	nop
 8116e80:	e7fd      	b.n	8116e7e <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8116e82:	68ba      	ldr	r2, [r7, #8]
 8116e84:	68fb      	ldr	r3, [r7, #12]
 8116e86:	429a      	cmp	r2, r3
 8116e88:	d90b      	bls.n	8116ea2 <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 8116e8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8116e8e:	f383 8811 	msr	BASEPRI, r3
 8116e92:	f3bf 8f6f 	isb	sy
 8116e96:	f3bf 8f4f 	dsb	sy
 8116e9a:	617b      	str	r3, [r7, #20]
}
 8116e9c:	bf00      	nop
 8116e9e:	bf00      	nop
 8116ea0:	e7fd      	b.n	8116e9e <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8116ea2:	2302      	movs	r3, #2
 8116ea4:	9300      	str	r3, [sp, #0]
 8116ea6:	687b      	ldr	r3, [r7, #4]
 8116ea8:	2200      	movs	r2, #0
 8116eaa:	2100      	movs	r1, #0
 8116eac:	68f8      	ldr	r0, [r7, #12]
 8116eae:	f7ff fe3f 	bl	8116b30 <xQueueGenericCreateStatic>
 8116eb2:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8116eb4:	69fb      	ldr	r3, [r7, #28]
 8116eb6:	2b00      	cmp	r3, #0
 8116eb8:	d002      	beq.n	8116ec0 <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8116eba:	69fb      	ldr	r3, [r7, #28]
 8116ebc:	68ba      	ldr	r2, [r7, #8]
 8116ebe:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8116ec0:	69fb      	ldr	r3, [r7, #28]
	}
 8116ec2:	4618      	mov	r0, r3
 8116ec4:	3720      	adds	r7, #32
 8116ec6:	46bd      	mov	sp, r7
 8116ec8:	bd80      	pop	{r7, pc}

08116eca <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8116eca:	b580      	push	{r7, lr}
 8116ecc:	b086      	sub	sp, #24
 8116ece:	af00      	add	r7, sp, #0
 8116ed0:	6078      	str	r0, [r7, #4]
 8116ed2:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8116ed4:	687b      	ldr	r3, [r7, #4]
 8116ed6:	2b00      	cmp	r3, #0
 8116ed8:	d10b      	bne.n	8116ef2 <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 8116eda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8116ede:	f383 8811 	msr	BASEPRI, r3
 8116ee2:	f3bf 8f6f 	isb	sy
 8116ee6:	f3bf 8f4f 	dsb	sy
 8116eea:	613b      	str	r3, [r7, #16]
}
 8116eec:	bf00      	nop
 8116eee:	bf00      	nop
 8116ef0:	e7fd      	b.n	8116eee <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8116ef2:	683a      	ldr	r2, [r7, #0]
 8116ef4:	687b      	ldr	r3, [r7, #4]
 8116ef6:	429a      	cmp	r2, r3
 8116ef8:	d90b      	bls.n	8116f12 <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 8116efa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8116efe:	f383 8811 	msr	BASEPRI, r3
 8116f02:	f3bf 8f6f 	isb	sy
 8116f06:	f3bf 8f4f 	dsb	sy
 8116f0a:	60fb      	str	r3, [r7, #12]
}
 8116f0c:	bf00      	nop
 8116f0e:	bf00      	nop
 8116f10:	e7fd      	b.n	8116f0e <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8116f12:	2202      	movs	r2, #2
 8116f14:	2100      	movs	r1, #0
 8116f16:	6878      	ldr	r0, [r7, #4]
 8116f18:	f7ff fe87 	bl	8116c2a <xQueueGenericCreate>
 8116f1c:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8116f1e:	697b      	ldr	r3, [r7, #20]
 8116f20:	2b00      	cmp	r3, #0
 8116f22:	d002      	beq.n	8116f2a <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8116f24:	697b      	ldr	r3, [r7, #20]
 8116f26:	683a      	ldr	r2, [r7, #0]
 8116f28:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8116f2a:	697b      	ldr	r3, [r7, #20]
	}
 8116f2c:	4618      	mov	r0, r3
 8116f2e:	3718      	adds	r7, #24
 8116f30:	46bd      	mov	sp, r7
 8116f32:	bd80      	pop	{r7, pc}

08116f34 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8116f34:	b580      	push	{r7, lr}
 8116f36:	b08e      	sub	sp, #56	@ 0x38
 8116f38:	af00      	add	r7, sp, #0
 8116f3a:	60f8      	str	r0, [r7, #12]
 8116f3c:	60b9      	str	r1, [r7, #8]
 8116f3e:	607a      	str	r2, [r7, #4]
 8116f40:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8116f42:	2300      	movs	r3, #0
 8116f44:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8116f46:	68fb      	ldr	r3, [r7, #12]
 8116f48:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8116f4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8116f4c:	2b00      	cmp	r3, #0
 8116f4e:	d10b      	bne.n	8116f68 <xQueueGenericSend+0x34>
	__asm volatile
 8116f50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8116f54:	f383 8811 	msr	BASEPRI, r3
 8116f58:	f3bf 8f6f 	isb	sy
 8116f5c:	f3bf 8f4f 	dsb	sy
 8116f60:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8116f62:	bf00      	nop
 8116f64:	bf00      	nop
 8116f66:	e7fd      	b.n	8116f64 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8116f68:	68bb      	ldr	r3, [r7, #8]
 8116f6a:	2b00      	cmp	r3, #0
 8116f6c:	d103      	bne.n	8116f76 <xQueueGenericSend+0x42>
 8116f6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8116f70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8116f72:	2b00      	cmp	r3, #0
 8116f74:	d101      	bne.n	8116f7a <xQueueGenericSend+0x46>
 8116f76:	2301      	movs	r3, #1
 8116f78:	e000      	b.n	8116f7c <xQueueGenericSend+0x48>
 8116f7a:	2300      	movs	r3, #0
 8116f7c:	2b00      	cmp	r3, #0
 8116f7e:	d10b      	bne.n	8116f98 <xQueueGenericSend+0x64>
	__asm volatile
 8116f80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8116f84:	f383 8811 	msr	BASEPRI, r3
 8116f88:	f3bf 8f6f 	isb	sy
 8116f8c:	f3bf 8f4f 	dsb	sy
 8116f90:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8116f92:	bf00      	nop
 8116f94:	bf00      	nop
 8116f96:	e7fd      	b.n	8116f94 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8116f98:	683b      	ldr	r3, [r7, #0]
 8116f9a:	2b02      	cmp	r3, #2
 8116f9c:	d103      	bne.n	8116fa6 <xQueueGenericSend+0x72>
 8116f9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8116fa0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8116fa2:	2b01      	cmp	r3, #1
 8116fa4:	d101      	bne.n	8116faa <xQueueGenericSend+0x76>
 8116fa6:	2301      	movs	r3, #1
 8116fa8:	e000      	b.n	8116fac <xQueueGenericSend+0x78>
 8116faa:	2300      	movs	r3, #0
 8116fac:	2b00      	cmp	r3, #0
 8116fae:	d10b      	bne.n	8116fc8 <xQueueGenericSend+0x94>
	__asm volatile
 8116fb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8116fb4:	f383 8811 	msr	BASEPRI, r3
 8116fb8:	f3bf 8f6f 	isb	sy
 8116fbc:	f3bf 8f4f 	dsb	sy
 8116fc0:	623b      	str	r3, [r7, #32]
}
 8116fc2:	bf00      	nop
 8116fc4:	bf00      	nop
 8116fc6:	e7fd      	b.n	8116fc4 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8116fc8:	f002 f8f8 	bl	81191bc <xTaskGetSchedulerState>
 8116fcc:	4603      	mov	r3, r0
 8116fce:	2b00      	cmp	r3, #0
 8116fd0:	d102      	bne.n	8116fd8 <xQueueGenericSend+0xa4>
 8116fd2:	687b      	ldr	r3, [r7, #4]
 8116fd4:	2b00      	cmp	r3, #0
 8116fd6:	d101      	bne.n	8116fdc <xQueueGenericSend+0xa8>
 8116fd8:	2301      	movs	r3, #1
 8116fda:	e000      	b.n	8116fde <xQueueGenericSend+0xaa>
 8116fdc:	2300      	movs	r3, #0
 8116fde:	2b00      	cmp	r3, #0
 8116fe0:	d10b      	bne.n	8116ffa <xQueueGenericSend+0xc6>
	__asm volatile
 8116fe2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8116fe6:	f383 8811 	msr	BASEPRI, r3
 8116fea:	f3bf 8f6f 	isb	sy
 8116fee:	f3bf 8f4f 	dsb	sy
 8116ff2:	61fb      	str	r3, [r7, #28]
}
 8116ff4:	bf00      	nop
 8116ff6:	bf00      	nop
 8116ff8:	e7fd      	b.n	8116ff6 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8116ffa:	f7ff fc0d 	bl	8116818 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8116ffe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8117000:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8117002:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8117004:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8117006:	429a      	cmp	r2, r3
 8117008:	d302      	bcc.n	8117010 <xQueueGenericSend+0xdc>
 811700a:	683b      	ldr	r3, [r7, #0]
 811700c:	2b02      	cmp	r3, #2
 811700e:	d129      	bne.n	8117064 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8117010:	683a      	ldr	r2, [r7, #0]
 8117012:	68b9      	ldr	r1, [r7, #8]
 8117014:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8117016:	f000 fc6d 	bl	81178f4 <prvCopyDataToQueue>
 811701a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 811701c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811701e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8117020:	2b00      	cmp	r3, #0
 8117022:	d010      	beq.n	8117046 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8117024:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8117026:	3324      	adds	r3, #36	@ 0x24
 8117028:	4618      	mov	r0, r3
 811702a:	f001 fec9 	bl	8118dc0 <xTaskRemoveFromEventList>
 811702e:	4603      	mov	r3, r0
 8117030:	2b00      	cmp	r3, #0
 8117032:	d013      	beq.n	811705c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8117034:	4b3f      	ldr	r3, [pc, #252]	@ (8117134 <xQueueGenericSend+0x200>)
 8117036:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 811703a:	601a      	str	r2, [r3, #0]
 811703c:	f3bf 8f4f 	dsb	sy
 8117040:	f3bf 8f6f 	isb	sy
 8117044:	e00a      	b.n	811705c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8117046:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8117048:	2b00      	cmp	r3, #0
 811704a:	d007      	beq.n	811705c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 811704c:	4b39      	ldr	r3, [pc, #228]	@ (8117134 <xQueueGenericSend+0x200>)
 811704e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8117052:	601a      	str	r2, [r3, #0]
 8117054:	f3bf 8f4f 	dsb	sy
 8117058:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 811705c:	f7ff fc0e 	bl	811687c <vPortExitCritical>
				return pdPASS;
 8117060:	2301      	movs	r3, #1
 8117062:	e063      	b.n	811712c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8117064:	687b      	ldr	r3, [r7, #4]
 8117066:	2b00      	cmp	r3, #0
 8117068:	d103      	bne.n	8117072 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 811706a:	f7ff fc07 	bl	811687c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 811706e:	2300      	movs	r3, #0
 8117070:	e05c      	b.n	811712c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8117072:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8117074:	2b00      	cmp	r3, #0
 8117076:	d106      	bne.n	8117086 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8117078:	f107 0314 	add.w	r3, r7, #20
 811707c:	4618      	mov	r0, r3
 811707e:	f001 ff2b 	bl	8118ed8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8117082:	2301      	movs	r3, #1
 8117084:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8117086:	f7ff fbf9 	bl	811687c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 811708a:	f001 fc59 	bl	8118940 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 811708e:	f7ff fbc3 	bl	8116818 <vPortEnterCritical>
 8117092:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8117094:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8117098:	b25b      	sxtb	r3, r3
 811709a:	f1b3 3fff 	cmp.w	r3, #4294967295
 811709e:	d103      	bne.n	81170a8 <xQueueGenericSend+0x174>
 81170a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81170a2:	2200      	movs	r2, #0
 81170a4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 81170a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81170aa:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 81170ae:	b25b      	sxtb	r3, r3
 81170b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 81170b4:	d103      	bne.n	81170be <xQueueGenericSend+0x18a>
 81170b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81170b8:	2200      	movs	r2, #0
 81170ba:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 81170be:	f7ff fbdd 	bl	811687c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 81170c2:	1d3a      	adds	r2, r7, #4
 81170c4:	f107 0314 	add.w	r3, r7, #20
 81170c8:	4611      	mov	r1, r2
 81170ca:	4618      	mov	r0, r3
 81170cc:	f001 ff1a 	bl	8118f04 <xTaskCheckForTimeOut>
 81170d0:	4603      	mov	r3, r0
 81170d2:	2b00      	cmp	r3, #0
 81170d4:	d124      	bne.n	8117120 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 81170d6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 81170d8:	f000 fd04 	bl	8117ae4 <prvIsQueueFull>
 81170dc:	4603      	mov	r3, r0
 81170de:	2b00      	cmp	r3, #0
 81170e0:	d018      	beq.n	8117114 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 81170e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81170e4:	3310      	adds	r3, #16
 81170e6:	687a      	ldr	r2, [r7, #4]
 81170e8:	4611      	mov	r1, r2
 81170ea:	4618      	mov	r0, r3
 81170ec:	f001 fe16 	bl	8118d1c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 81170f0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 81170f2:	f000 fc8f 	bl	8117a14 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 81170f6:	f001 fc31 	bl	811895c <xTaskResumeAll>
 81170fa:	4603      	mov	r3, r0
 81170fc:	2b00      	cmp	r3, #0
 81170fe:	f47f af7c 	bne.w	8116ffa <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8117102:	4b0c      	ldr	r3, [pc, #48]	@ (8117134 <xQueueGenericSend+0x200>)
 8117104:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8117108:	601a      	str	r2, [r3, #0]
 811710a:	f3bf 8f4f 	dsb	sy
 811710e:	f3bf 8f6f 	isb	sy
 8117112:	e772      	b.n	8116ffa <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8117114:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8117116:	f000 fc7d 	bl	8117a14 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 811711a:	f001 fc1f 	bl	811895c <xTaskResumeAll>
 811711e:	e76c      	b.n	8116ffa <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8117120:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8117122:	f000 fc77 	bl	8117a14 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8117126:	f001 fc19 	bl	811895c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 811712a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 811712c:	4618      	mov	r0, r3
 811712e:	3738      	adds	r7, #56	@ 0x38
 8117130:	46bd      	mov	sp, r7
 8117132:	bd80      	pop	{r7, pc}
 8117134:	e000ed04 	.word	0xe000ed04

08117138 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8117138:	b580      	push	{r7, lr}
 811713a:	b090      	sub	sp, #64	@ 0x40
 811713c:	af00      	add	r7, sp, #0
 811713e:	60f8      	str	r0, [r7, #12]
 8117140:	60b9      	str	r1, [r7, #8]
 8117142:	607a      	str	r2, [r7, #4]
 8117144:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8117146:	68fb      	ldr	r3, [r7, #12]
 8117148:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 811714a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 811714c:	2b00      	cmp	r3, #0
 811714e:	d10b      	bne.n	8117168 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8117150:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8117154:	f383 8811 	msr	BASEPRI, r3
 8117158:	f3bf 8f6f 	isb	sy
 811715c:	f3bf 8f4f 	dsb	sy
 8117160:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8117162:	bf00      	nop
 8117164:	bf00      	nop
 8117166:	e7fd      	b.n	8117164 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8117168:	68bb      	ldr	r3, [r7, #8]
 811716a:	2b00      	cmp	r3, #0
 811716c:	d103      	bne.n	8117176 <xQueueGenericSendFromISR+0x3e>
 811716e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8117170:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8117172:	2b00      	cmp	r3, #0
 8117174:	d101      	bne.n	811717a <xQueueGenericSendFromISR+0x42>
 8117176:	2301      	movs	r3, #1
 8117178:	e000      	b.n	811717c <xQueueGenericSendFromISR+0x44>
 811717a:	2300      	movs	r3, #0
 811717c:	2b00      	cmp	r3, #0
 811717e:	d10b      	bne.n	8117198 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8117180:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8117184:	f383 8811 	msr	BASEPRI, r3
 8117188:	f3bf 8f6f 	isb	sy
 811718c:	f3bf 8f4f 	dsb	sy
 8117190:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8117192:	bf00      	nop
 8117194:	bf00      	nop
 8117196:	e7fd      	b.n	8117194 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8117198:	683b      	ldr	r3, [r7, #0]
 811719a:	2b02      	cmp	r3, #2
 811719c:	d103      	bne.n	81171a6 <xQueueGenericSendFromISR+0x6e>
 811719e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81171a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 81171a2:	2b01      	cmp	r3, #1
 81171a4:	d101      	bne.n	81171aa <xQueueGenericSendFromISR+0x72>
 81171a6:	2301      	movs	r3, #1
 81171a8:	e000      	b.n	81171ac <xQueueGenericSendFromISR+0x74>
 81171aa:	2300      	movs	r3, #0
 81171ac:	2b00      	cmp	r3, #0
 81171ae:	d10b      	bne.n	81171c8 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 81171b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81171b4:	f383 8811 	msr	BASEPRI, r3
 81171b8:	f3bf 8f6f 	isb	sy
 81171bc:	f3bf 8f4f 	dsb	sy
 81171c0:	623b      	str	r3, [r7, #32]
}
 81171c2:	bf00      	nop
 81171c4:	bf00      	nop
 81171c6:	e7fd      	b.n	81171c4 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 81171c8:	f7ff fc06 	bl	81169d8 <vPortValidateInterruptPriority>
	__asm volatile
 81171cc:	f3ef 8211 	mrs	r2, BASEPRI
 81171d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81171d4:	f383 8811 	msr	BASEPRI, r3
 81171d8:	f3bf 8f6f 	isb	sy
 81171dc:	f3bf 8f4f 	dsb	sy
 81171e0:	61fa      	str	r2, [r7, #28]
 81171e2:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 81171e4:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 81171e6:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 81171e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81171ea:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 81171ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81171ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 81171f0:	429a      	cmp	r2, r3
 81171f2:	d302      	bcc.n	81171fa <xQueueGenericSendFromISR+0xc2>
 81171f4:	683b      	ldr	r3, [r7, #0]
 81171f6:	2b02      	cmp	r3, #2
 81171f8:	d12f      	bne.n	811725a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 81171fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81171fc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8117200:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8117204:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8117206:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8117208:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 811720a:	683a      	ldr	r2, [r7, #0]
 811720c:	68b9      	ldr	r1, [r7, #8]
 811720e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8117210:	f000 fb70 	bl	81178f4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8117214:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8117218:	f1b3 3fff 	cmp.w	r3, #4294967295
 811721c:	d112      	bne.n	8117244 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 811721e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8117220:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8117222:	2b00      	cmp	r3, #0
 8117224:	d016      	beq.n	8117254 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8117226:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8117228:	3324      	adds	r3, #36	@ 0x24
 811722a:	4618      	mov	r0, r3
 811722c:	f001 fdc8 	bl	8118dc0 <xTaskRemoveFromEventList>
 8117230:	4603      	mov	r3, r0
 8117232:	2b00      	cmp	r3, #0
 8117234:	d00e      	beq.n	8117254 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8117236:	687b      	ldr	r3, [r7, #4]
 8117238:	2b00      	cmp	r3, #0
 811723a:	d00b      	beq.n	8117254 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 811723c:	687b      	ldr	r3, [r7, #4]
 811723e:	2201      	movs	r2, #1
 8117240:	601a      	str	r2, [r3, #0]
 8117242:	e007      	b.n	8117254 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8117244:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8117248:	3301      	adds	r3, #1
 811724a:	b2db      	uxtb	r3, r3
 811724c:	b25a      	sxtb	r2, r3
 811724e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8117250:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8117254:	2301      	movs	r3, #1
 8117256:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8117258:	e001      	b.n	811725e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 811725a:	2300      	movs	r3, #0
 811725c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 811725e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8117260:	617b      	str	r3, [r7, #20]
	__asm volatile
 8117262:	697b      	ldr	r3, [r7, #20]
 8117264:	f383 8811 	msr	BASEPRI, r3
}
 8117268:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 811726a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 811726c:	4618      	mov	r0, r3
 811726e:	3740      	adds	r7, #64	@ 0x40
 8117270:	46bd      	mov	sp, r7
 8117272:	bd80      	pop	{r7, pc}

08117274 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8117274:	b580      	push	{r7, lr}
 8117276:	b08e      	sub	sp, #56	@ 0x38
 8117278:	af00      	add	r7, sp, #0
 811727a:	6078      	str	r0, [r7, #4]
 811727c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 811727e:	687b      	ldr	r3, [r7, #4]
 8117280:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8117282:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8117284:	2b00      	cmp	r3, #0
 8117286:	d10b      	bne.n	81172a0 <xQueueGiveFromISR+0x2c>
	__asm volatile
 8117288:	f04f 0350 	mov.w	r3, #80	@ 0x50
 811728c:	f383 8811 	msr	BASEPRI, r3
 8117290:	f3bf 8f6f 	isb	sy
 8117294:	f3bf 8f4f 	dsb	sy
 8117298:	623b      	str	r3, [r7, #32]
}
 811729a:	bf00      	nop
 811729c:	bf00      	nop
 811729e:	e7fd      	b.n	811729c <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 81172a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81172a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 81172a4:	2b00      	cmp	r3, #0
 81172a6:	d00b      	beq.n	81172c0 <xQueueGiveFromISR+0x4c>
	__asm volatile
 81172a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81172ac:	f383 8811 	msr	BASEPRI, r3
 81172b0:	f3bf 8f6f 	isb	sy
 81172b4:	f3bf 8f4f 	dsb	sy
 81172b8:	61fb      	str	r3, [r7, #28]
}
 81172ba:	bf00      	nop
 81172bc:	bf00      	nop
 81172be:	e7fd      	b.n	81172bc <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 81172c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81172c2:	681b      	ldr	r3, [r3, #0]
 81172c4:	2b00      	cmp	r3, #0
 81172c6:	d103      	bne.n	81172d0 <xQueueGiveFromISR+0x5c>
 81172c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81172ca:	689b      	ldr	r3, [r3, #8]
 81172cc:	2b00      	cmp	r3, #0
 81172ce:	d101      	bne.n	81172d4 <xQueueGiveFromISR+0x60>
 81172d0:	2301      	movs	r3, #1
 81172d2:	e000      	b.n	81172d6 <xQueueGiveFromISR+0x62>
 81172d4:	2300      	movs	r3, #0
 81172d6:	2b00      	cmp	r3, #0
 81172d8:	d10b      	bne.n	81172f2 <xQueueGiveFromISR+0x7e>
	__asm volatile
 81172da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81172de:	f383 8811 	msr	BASEPRI, r3
 81172e2:	f3bf 8f6f 	isb	sy
 81172e6:	f3bf 8f4f 	dsb	sy
 81172ea:	61bb      	str	r3, [r7, #24]
}
 81172ec:	bf00      	nop
 81172ee:	bf00      	nop
 81172f0:	e7fd      	b.n	81172ee <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 81172f2:	f7ff fb71 	bl	81169d8 <vPortValidateInterruptPriority>
	__asm volatile
 81172f6:	f3ef 8211 	mrs	r2, BASEPRI
 81172fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81172fe:	f383 8811 	msr	BASEPRI, r3
 8117302:	f3bf 8f6f 	isb	sy
 8117306:	f3bf 8f4f 	dsb	sy
 811730a:	617a      	str	r2, [r7, #20]
 811730c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 811730e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8117310:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8117312:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8117314:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8117316:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8117318:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811731a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 811731c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 811731e:	429a      	cmp	r2, r3
 8117320:	d22b      	bcs.n	811737a <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8117322:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8117324:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8117328:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 811732c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 811732e:	1c5a      	adds	r2, r3, #1
 8117330:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8117332:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8117334:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8117338:	f1b3 3fff 	cmp.w	r3, #4294967295
 811733c:	d112      	bne.n	8117364 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 811733e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8117340:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8117342:	2b00      	cmp	r3, #0
 8117344:	d016      	beq.n	8117374 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8117346:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8117348:	3324      	adds	r3, #36	@ 0x24
 811734a:	4618      	mov	r0, r3
 811734c:	f001 fd38 	bl	8118dc0 <xTaskRemoveFromEventList>
 8117350:	4603      	mov	r3, r0
 8117352:	2b00      	cmp	r3, #0
 8117354:	d00e      	beq.n	8117374 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8117356:	683b      	ldr	r3, [r7, #0]
 8117358:	2b00      	cmp	r3, #0
 811735a:	d00b      	beq.n	8117374 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 811735c:	683b      	ldr	r3, [r7, #0]
 811735e:	2201      	movs	r2, #1
 8117360:	601a      	str	r2, [r3, #0]
 8117362:	e007      	b.n	8117374 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8117364:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8117368:	3301      	adds	r3, #1
 811736a:	b2db      	uxtb	r3, r3
 811736c:	b25a      	sxtb	r2, r3
 811736e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8117370:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8117374:	2301      	movs	r3, #1
 8117376:	637b      	str	r3, [r7, #52]	@ 0x34
 8117378:	e001      	b.n	811737e <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 811737a:	2300      	movs	r3, #0
 811737c:	637b      	str	r3, [r7, #52]	@ 0x34
 811737e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8117380:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8117382:	68fb      	ldr	r3, [r7, #12]
 8117384:	f383 8811 	msr	BASEPRI, r3
}
 8117388:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 811738a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 811738c:	4618      	mov	r0, r3
 811738e:	3738      	adds	r7, #56	@ 0x38
 8117390:	46bd      	mov	sp, r7
 8117392:	bd80      	pop	{r7, pc}

08117394 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8117394:	b580      	push	{r7, lr}
 8117396:	b08c      	sub	sp, #48	@ 0x30
 8117398:	af00      	add	r7, sp, #0
 811739a:	60f8      	str	r0, [r7, #12]
 811739c:	60b9      	str	r1, [r7, #8]
 811739e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 81173a0:	2300      	movs	r3, #0
 81173a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 81173a4:	68fb      	ldr	r3, [r7, #12]
 81173a6:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 81173a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81173aa:	2b00      	cmp	r3, #0
 81173ac:	d10b      	bne.n	81173c6 <xQueueReceive+0x32>
	__asm volatile
 81173ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81173b2:	f383 8811 	msr	BASEPRI, r3
 81173b6:	f3bf 8f6f 	isb	sy
 81173ba:	f3bf 8f4f 	dsb	sy
 81173be:	623b      	str	r3, [r7, #32]
}
 81173c0:	bf00      	nop
 81173c2:	bf00      	nop
 81173c4:	e7fd      	b.n	81173c2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 81173c6:	68bb      	ldr	r3, [r7, #8]
 81173c8:	2b00      	cmp	r3, #0
 81173ca:	d103      	bne.n	81173d4 <xQueueReceive+0x40>
 81173cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81173ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 81173d0:	2b00      	cmp	r3, #0
 81173d2:	d101      	bne.n	81173d8 <xQueueReceive+0x44>
 81173d4:	2301      	movs	r3, #1
 81173d6:	e000      	b.n	81173da <xQueueReceive+0x46>
 81173d8:	2300      	movs	r3, #0
 81173da:	2b00      	cmp	r3, #0
 81173dc:	d10b      	bne.n	81173f6 <xQueueReceive+0x62>
	__asm volatile
 81173de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81173e2:	f383 8811 	msr	BASEPRI, r3
 81173e6:	f3bf 8f6f 	isb	sy
 81173ea:	f3bf 8f4f 	dsb	sy
 81173ee:	61fb      	str	r3, [r7, #28]
}
 81173f0:	bf00      	nop
 81173f2:	bf00      	nop
 81173f4:	e7fd      	b.n	81173f2 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 81173f6:	f001 fee1 	bl	81191bc <xTaskGetSchedulerState>
 81173fa:	4603      	mov	r3, r0
 81173fc:	2b00      	cmp	r3, #0
 81173fe:	d102      	bne.n	8117406 <xQueueReceive+0x72>
 8117400:	687b      	ldr	r3, [r7, #4]
 8117402:	2b00      	cmp	r3, #0
 8117404:	d101      	bne.n	811740a <xQueueReceive+0x76>
 8117406:	2301      	movs	r3, #1
 8117408:	e000      	b.n	811740c <xQueueReceive+0x78>
 811740a:	2300      	movs	r3, #0
 811740c:	2b00      	cmp	r3, #0
 811740e:	d10b      	bne.n	8117428 <xQueueReceive+0x94>
	__asm volatile
 8117410:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8117414:	f383 8811 	msr	BASEPRI, r3
 8117418:	f3bf 8f6f 	isb	sy
 811741c:	f3bf 8f4f 	dsb	sy
 8117420:	61bb      	str	r3, [r7, #24]
}
 8117422:	bf00      	nop
 8117424:	bf00      	nop
 8117426:	e7fd      	b.n	8117424 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8117428:	f7ff f9f6 	bl	8116818 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 811742c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 811742e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8117430:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8117432:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8117434:	2b00      	cmp	r3, #0
 8117436:	d01f      	beq.n	8117478 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8117438:	68b9      	ldr	r1, [r7, #8]
 811743a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 811743c:	f000 fac4 	bl	81179c8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8117440:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8117442:	1e5a      	subs	r2, r3, #1
 8117444:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8117446:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8117448:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 811744a:	691b      	ldr	r3, [r3, #16]
 811744c:	2b00      	cmp	r3, #0
 811744e:	d00f      	beq.n	8117470 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8117450:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8117452:	3310      	adds	r3, #16
 8117454:	4618      	mov	r0, r3
 8117456:	f001 fcb3 	bl	8118dc0 <xTaskRemoveFromEventList>
 811745a:	4603      	mov	r3, r0
 811745c:	2b00      	cmp	r3, #0
 811745e:	d007      	beq.n	8117470 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8117460:	4b3c      	ldr	r3, [pc, #240]	@ (8117554 <xQueueReceive+0x1c0>)
 8117462:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8117466:	601a      	str	r2, [r3, #0]
 8117468:	f3bf 8f4f 	dsb	sy
 811746c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8117470:	f7ff fa04 	bl	811687c <vPortExitCritical>
				return pdPASS;
 8117474:	2301      	movs	r3, #1
 8117476:	e069      	b.n	811754c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8117478:	687b      	ldr	r3, [r7, #4]
 811747a:	2b00      	cmp	r3, #0
 811747c:	d103      	bne.n	8117486 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 811747e:	f7ff f9fd 	bl	811687c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8117482:	2300      	movs	r3, #0
 8117484:	e062      	b.n	811754c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8117486:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8117488:	2b00      	cmp	r3, #0
 811748a:	d106      	bne.n	811749a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 811748c:	f107 0310 	add.w	r3, r7, #16
 8117490:	4618      	mov	r0, r3
 8117492:	f001 fd21 	bl	8118ed8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8117496:	2301      	movs	r3, #1
 8117498:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 811749a:	f7ff f9ef 	bl	811687c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 811749e:	f001 fa4f 	bl	8118940 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 81174a2:	f7ff f9b9 	bl	8116818 <vPortEnterCritical>
 81174a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81174a8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 81174ac:	b25b      	sxtb	r3, r3
 81174ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 81174b2:	d103      	bne.n	81174bc <xQueueReceive+0x128>
 81174b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81174b6:	2200      	movs	r2, #0
 81174b8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 81174bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81174be:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 81174c2:	b25b      	sxtb	r3, r3
 81174c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 81174c8:	d103      	bne.n	81174d2 <xQueueReceive+0x13e>
 81174ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81174cc:	2200      	movs	r2, #0
 81174ce:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 81174d2:	f7ff f9d3 	bl	811687c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 81174d6:	1d3a      	adds	r2, r7, #4
 81174d8:	f107 0310 	add.w	r3, r7, #16
 81174dc:	4611      	mov	r1, r2
 81174de:	4618      	mov	r0, r3
 81174e0:	f001 fd10 	bl	8118f04 <xTaskCheckForTimeOut>
 81174e4:	4603      	mov	r3, r0
 81174e6:	2b00      	cmp	r3, #0
 81174e8:	d123      	bne.n	8117532 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 81174ea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 81174ec:	f000 fae4 	bl	8117ab8 <prvIsQueueEmpty>
 81174f0:	4603      	mov	r3, r0
 81174f2:	2b00      	cmp	r3, #0
 81174f4:	d017      	beq.n	8117526 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 81174f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81174f8:	3324      	adds	r3, #36	@ 0x24
 81174fa:	687a      	ldr	r2, [r7, #4]
 81174fc:	4611      	mov	r1, r2
 81174fe:	4618      	mov	r0, r3
 8117500:	f001 fc0c 	bl	8118d1c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8117504:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8117506:	f000 fa85 	bl	8117a14 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 811750a:	f001 fa27 	bl	811895c <xTaskResumeAll>
 811750e:	4603      	mov	r3, r0
 8117510:	2b00      	cmp	r3, #0
 8117512:	d189      	bne.n	8117428 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8117514:	4b0f      	ldr	r3, [pc, #60]	@ (8117554 <xQueueReceive+0x1c0>)
 8117516:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 811751a:	601a      	str	r2, [r3, #0]
 811751c:	f3bf 8f4f 	dsb	sy
 8117520:	f3bf 8f6f 	isb	sy
 8117524:	e780      	b.n	8117428 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8117526:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8117528:	f000 fa74 	bl	8117a14 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 811752c:	f001 fa16 	bl	811895c <xTaskResumeAll>
 8117530:	e77a      	b.n	8117428 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8117532:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8117534:	f000 fa6e 	bl	8117a14 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8117538:	f001 fa10 	bl	811895c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 811753c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 811753e:	f000 fabb 	bl	8117ab8 <prvIsQueueEmpty>
 8117542:	4603      	mov	r3, r0
 8117544:	2b00      	cmp	r3, #0
 8117546:	f43f af6f 	beq.w	8117428 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 811754a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 811754c:	4618      	mov	r0, r3
 811754e:	3730      	adds	r7, #48	@ 0x30
 8117550:	46bd      	mov	sp, r7
 8117552:	bd80      	pop	{r7, pc}
 8117554:	e000ed04 	.word	0xe000ed04

08117558 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8117558:	b580      	push	{r7, lr}
 811755a:	b08e      	sub	sp, #56	@ 0x38
 811755c:	af00      	add	r7, sp, #0
 811755e:	6078      	str	r0, [r7, #4]
 8117560:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8117562:	2300      	movs	r3, #0
 8117564:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8117566:	687b      	ldr	r3, [r7, #4]
 8117568:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 811756a:	2300      	movs	r3, #0
 811756c:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 811756e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8117570:	2b00      	cmp	r3, #0
 8117572:	d10b      	bne.n	811758c <xQueueSemaphoreTake+0x34>
	__asm volatile
 8117574:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8117578:	f383 8811 	msr	BASEPRI, r3
 811757c:	f3bf 8f6f 	isb	sy
 8117580:	f3bf 8f4f 	dsb	sy
 8117584:	623b      	str	r3, [r7, #32]
}
 8117586:	bf00      	nop
 8117588:	bf00      	nop
 811758a:	e7fd      	b.n	8117588 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 811758c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811758e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8117590:	2b00      	cmp	r3, #0
 8117592:	d00b      	beq.n	81175ac <xQueueSemaphoreTake+0x54>
	__asm volatile
 8117594:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8117598:	f383 8811 	msr	BASEPRI, r3
 811759c:	f3bf 8f6f 	isb	sy
 81175a0:	f3bf 8f4f 	dsb	sy
 81175a4:	61fb      	str	r3, [r7, #28]
}
 81175a6:	bf00      	nop
 81175a8:	bf00      	nop
 81175aa:	e7fd      	b.n	81175a8 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 81175ac:	f001 fe06 	bl	81191bc <xTaskGetSchedulerState>
 81175b0:	4603      	mov	r3, r0
 81175b2:	2b00      	cmp	r3, #0
 81175b4:	d102      	bne.n	81175bc <xQueueSemaphoreTake+0x64>
 81175b6:	683b      	ldr	r3, [r7, #0]
 81175b8:	2b00      	cmp	r3, #0
 81175ba:	d101      	bne.n	81175c0 <xQueueSemaphoreTake+0x68>
 81175bc:	2301      	movs	r3, #1
 81175be:	e000      	b.n	81175c2 <xQueueSemaphoreTake+0x6a>
 81175c0:	2300      	movs	r3, #0
 81175c2:	2b00      	cmp	r3, #0
 81175c4:	d10b      	bne.n	81175de <xQueueSemaphoreTake+0x86>
	__asm volatile
 81175c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81175ca:	f383 8811 	msr	BASEPRI, r3
 81175ce:	f3bf 8f6f 	isb	sy
 81175d2:	f3bf 8f4f 	dsb	sy
 81175d6:	61bb      	str	r3, [r7, #24]
}
 81175d8:	bf00      	nop
 81175da:	bf00      	nop
 81175dc:	e7fd      	b.n	81175da <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 81175de:	f7ff f91b 	bl	8116818 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 81175e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81175e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 81175e6:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 81175e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81175ea:	2b00      	cmp	r3, #0
 81175ec:	d024      	beq.n	8117638 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 81175ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81175f0:	1e5a      	subs	r2, r3, #1
 81175f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81175f4:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 81175f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81175f8:	681b      	ldr	r3, [r3, #0]
 81175fa:	2b00      	cmp	r3, #0
 81175fc:	d104      	bne.n	8117608 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 81175fe:	f001 ff57 	bl	81194b0 <pvTaskIncrementMutexHeldCount>
 8117602:	4602      	mov	r2, r0
 8117604:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8117606:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8117608:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811760a:	691b      	ldr	r3, [r3, #16]
 811760c:	2b00      	cmp	r3, #0
 811760e:	d00f      	beq.n	8117630 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8117610:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8117612:	3310      	adds	r3, #16
 8117614:	4618      	mov	r0, r3
 8117616:	f001 fbd3 	bl	8118dc0 <xTaskRemoveFromEventList>
 811761a:	4603      	mov	r3, r0
 811761c:	2b00      	cmp	r3, #0
 811761e:	d007      	beq.n	8117630 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8117620:	4b54      	ldr	r3, [pc, #336]	@ (8117774 <xQueueSemaphoreTake+0x21c>)
 8117622:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8117626:	601a      	str	r2, [r3, #0]
 8117628:	f3bf 8f4f 	dsb	sy
 811762c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8117630:	f7ff f924 	bl	811687c <vPortExitCritical>
				return pdPASS;
 8117634:	2301      	movs	r3, #1
 8117636:	e098      	b.n	811776a <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8117638:	683b      	ldr	r3, [r7, #0]
 811763a:	2b00      	cmp	r3, #0
 811763c:	d112      	bne.n	8117664 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 811763e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8117640:	2b00      	cmp	r3, #0
 8117642:	d00b      	beq.n	811765c <xQueueSemaphoreTake+0x104>
	__asm volatile
 8117644:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8117648:	f383 8811 	msr	BASEPRI, r3
 811764c:	f3bf 8f6f 	isb	sy
 8117650:	f3bf 8f4f 	dsb	sy
 8117654:	617b      	str	r3, [r7, #20]
}
 8117656:	bf00      	nop
 8117658:	bf00      	nop
 811765a:	e7fd      	b.n	8117658 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 811765c:	f7ff f90e 	bl	811687c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8117660:	2300      	movs	r3, #0
 8117662:	e082      	b.n	811776a <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8117664:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8117666:	2b00      	cmp	r3, #0
 8117668:	d106      	bne.n	8117678 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 811766a:	f107 030c 	add.w	r3, r7, #12
 811766e:	4618      	mov	r0, r3
 8117670:	f001 fc32 	bl	8118ed8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8117674:	2301      	movs	r3, #1
 8117676:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8117678:	f7ff f900 	bl	811687c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 811767c:	f001 f960 	bl	8118940 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8117680:	f7ff f8ca 	bl	8116818 <vPortEnterCritical>
 8117684:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8117686:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 811768a:	b25b      	sxtb	r3, r3
 811768c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8117690:	d103      	bne.n	811769a <xQueueSemaphoreTake+0x142>
 8117692:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8117694:	2200      	movs	r2, #0
 8117696:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 811769a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811769c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 81176a0:	b25b      	sxtb	r3, r3
 81176a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 81176a6:	d103      	bne.n	81176b0 <xQueueSemaphoreTake+0x158>
 81176a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81176aa:	2200      	movs	r2, #0
 81176ac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 81176b0:	f7ff f8e4 	bl	811687c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 81176b4:	463a      	mov	r2, r7
 81176b6:	f107 030c 	add.w	r3, r7, #12
 81176ba:	4611      	mov	r1, r2
 81176bc:	4618      	mov	r0, r3
 81176be:	f001 fc21 	bl	8118f04 <xTaskCheckForTimeOut>
 81176c2:	4603      	mov	r3, r0
 81176c4:	2b00      	cmp	r3, #0
 81176c6:	d132      	bne.n	811772e <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 81176c8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 81176ca:	f000 f9f5 	bl	8117ab8 <prvIsQueueEmpty>
 81176ce:	4603      	mov	r3, r0
 81176d0:	2b00      	cmp	r3, #0
 81176d2:	d026      	beq.n	8117722 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 81176d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81176d6:	681b      	ldr	r3, [r3, #0]
 81176d8:	2b00      	cmp	r3, #0
 81176da:	d109      	bne.n	81176f0 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 81176dc:	f7ff f89c 	bl	8116818 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 81176e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81176e2:	689b      	ldr	r3, [r3, #8]
 81176e4:	4618      	mov	r0, r3
 81176e6:	f001 fd87 	bl	81191f8 <xTaskPriorityInherit>
 81176ea:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 81176ec:	f7ff f8c6 	bl	811687c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 81176f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81176f2:	3324      	adds	r3, #36	@ 0x24
 81176f4:	683a      	ldr	r2, [r7, #0]
 81176f6:	4611      	mov	r1, r2
 81176f8:	4618      	mov	r0, r3
 81176fa:	f001 fb0f 	bl	8118d1c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 81176fe:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8117700:	f000 f988 	bl	8117a14 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8117704:	f001 f92a 	bl	811895c <xTaskResumeAll>
 8117708:	4603      	mov	r3, r0
 811770a:	2b00      	cmp	r3, #0
 811770c:	f47f af67 	bne.w	81175de <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8117710:	4b18      	ldr	r3, [pc, #96]	@ (8117774 <xQueueSemaphoreTake+0x21c>)
 8117712:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8117716:	601a      	str	r2, [r3, #0]
 8117718:	f3bf 8f4f 	dsb	sy
 811771c:	f3bf 8f6f 	isb	sy
 8117720:	e75d      	b.n	81175de <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8117722:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8117724:	f000 f976 	bl	8117a14 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8117728:	f001 f918 	bl	811895c <xTaskResumeAll>
 811772c:	e757      	b.n	81175de <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 811772e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8117730:	f000 f970 	bl	8117a14 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8117734:	f001 f912 	bl	811895c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8117738:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 811773a:	f000 f9bd 	bl	8117ab8 <prvIsQueueEmpty>
 811773e:	4603      	mov	r3, r0
 8117740:	2b00      	cmp	r3, #0
 8117742:	f43f af4c 	beq.w	81175de <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8117746:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8117748:	2b00      	cmp	r3, #0
 811774a:	d00d      	beq.n	8117768 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 811774c:	f7ff f864 	bl	8116818 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8117750:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8117752:	f000 f8b7 	bl	81178c4 <prvGetDisinheritPriorityAfterTimeout>
 8117756:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8117758:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811775a:	689b      	ldr	r3, [r3, #8]
 811775c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 811775e:	4618      	mov	r0, r3
 8117760:	f001 fe22 	bl	81193a8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8117764:	f7ff f88a 	bl	811687c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8117768:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 811776a:	4618      	mov	r0, r3
 811776c:	3738      	adds	r7, #56	@ 0x38
 811776e:	46bd      	mov	sp, r7
 8117770:	bd80      	pop	{r7, pc}
 8117772:	bf00      	nop
 8117774:	e000ed04 	.word	0xe000ed04

08117778 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8117778:	b580      	push	{r7, lr}
 811777a:	b08e      	sub	sp, #56	@ 0x38
 811777c:	af00      	add	r7, sp, #0
 811777e:	60f8      	str	r0, [r7, #12]
 8117780:	60b9      	str	r1, [r7, #8]
 8117782:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8117784:	68fb      	ldr	r3, [r7, #12]
 8117786:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8117788:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811778a:	2b00      	cmp	r3, #0
 811778c:	d10b      	bne.n	81177a6 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 811778e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8117792:	f383 8811 	msr	BASEPRI, r3
 8117796:	f3bf 8f6f 	isb	sy
 811779a:	f3bf 8f4f 	dsb	sy
 811779e:	623b      	str	r3, [r7, #32]
}
 81177a0:	bf00      	nop
 81177a2:	bf00      	nop
 81177a4:	e7fd      	b.n	81177a2 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 81177a6:	68bb      	ldr	r3, [r7, #8]
 81177a8:	2b00      	cmp	r3, #0
 81177aa:	d103      	bne.n	81177b4 <xQueueReceiveFromISR+0x3c>
 81177ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81177ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 81177b0:	2b00      	cmp	r3, #0
 81177b2:	d101      	bne.n	81177b8 <xQueueReceiveFromISR+0x40>
 81177b4:	2301      	movs	r3, #1
 81177b6:	e000      	b.n	81177ba <xQueueReceiveFromISR+0x42>
 81177b8:	2300      	movs	r3, #0
 81177ba:	2b00      	cmp	r3, #0
 81177bc:	d10b      	bne.n	81177d6 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 81177be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81177c2:	f383 8811 	msr	BASEPRI, r3
 81177c6:	f3bf 8f6f 	isb	sy
 81177ca:	f3bf 8f4f 	dsb	sy
 81177ce:	61fb      	str	r3, [r7, #28]
}
 81177d0:	bf00      	nop
 81177d2:	bf00      	nop
 81177d4:	e7fd      	b.n	81177d2 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 81177d6:	f7ff f8ff 	bl	81169d8 <vPortValidateInterruptPriority>
	__asm volatile
 81177da:	f3ef 8211 	mrs	r2, BASEPRI
 81177de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81177e2:	f383 8811 	msr	BASEPRI, r3
 81177e6:	f3bf 8f6f 	isb	sy
 81177ea:	f3bf 8f4f 	dsb	sy
 81177ee:	61ba      	str	r2, [r7, #24]
 81177f0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 81177f2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 81177f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 81177f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81177f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 81177fa:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 81177fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81177fe:	2b00      	cmp	r3, #0
 8117800:	d02f      	beq.n	8117862 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8117802:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8117804:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8117808:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 811780c:	68b9      	ldr	r1, [r7, #8]
 811780e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8117810:	f000 f8da 	bl	81179c8 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8117814:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8117816:	1e5a      	subs	r2, r3, #1
 8117818:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811781a:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 811781c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8117820:	f1b3 3fff 	cmp.w	r3, #4294967295
 8117824:	d112      	bne.n	811784c <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8117826:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8117828:	691b      	ldr	r3, [r3, #16]
 811782a:	2b00      	cmp	r3, #0
 811782c:	d016      	beq.n	811785c <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 811782e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8117830:	3310      	adds	r3, #16
 8117832:	4618      	mov	r0, r3
 8117834:	f001 fac4 	bl	8118dc0 <xTaskRemoveFromEventList>
 8117838:	4603      	mov	r3, r0
 811783a:	2b00      	cmp	r3, #0
 811783c:	d00e      	beq.n	811785c <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 811783e:	687b      	ldr	r3, [r7, #4]
 8117840:	2b00      	cmp	r3, #0
 8117842:	d00b      	beq.n	811785c <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8117844:	687b      	ldr	r3, [r7, #4]
 8117846:	2201      	movs	r2, #1
 8117848:	601a      	str	r2, [r3, #0]
 811784a:	e007      	b.n	811785c <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 811784c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8117850:	3301      	adds	r3, #1
 8117852:	b2db      	uxtb	r3, r3
 8117854:	b25a      	sxtb	r2, r3
 8117856:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8117858:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 811785c:	2301      	movs	r3, #1
 811785e:	637b      	str	r3, [r7, #52]	@ 0x34
 8117860:	e001      	b.n	8117866 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8117862:	2300      	movs	r3, #0
 8117864:	637b      	str	r3, [r7, #52]	@ 0x34
 8117866:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8117868:	613b      	str	r3, [r7, #16]
	__asm volatile
 811786a:	693b      	ldr	r3, [r7, #16]
 811786c:	f383 8811 	msr	BASEPRI, r3
}
 8117870:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8117872:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8117874:	4618      	mov	r0, r3
 8117876:	3738      	adds	r7, #56	@ 0x38
 8117878:	46bd      	mov	sp, r7
 811787a:	bd80      	pop	{r7, pc}

0811787c <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 811787c:	b580      	push	{r7, lr}
 811787e:	b084      	sub	sp, #16
 8117880:	af00      	add	r7, sp, #0
 8117882:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8117884:	687b      	ldr	r3, [r7, #4]
 8117886:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8117888:	68fb      	ldr	r3, [r7, #12]
 811788a:	2b00      	cmp	r3, #0
 811788c:	d10b      	bne.n	81178a6 <vQueueDelete+0x2a>
	__asm volatile
 811788e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8117892:	f383 8811 	msr	BASEPRI, r3
 8117896:	f3bf 8f6f 	isb	sy
 811789a:	f3bf 8f4f 	dsb	sy
 811789e:	60bb      	str	r3, [r7, #8]
}
 81178a0:	bf00      	nop
 81178a2:	bf00      	nop
 81178a4:	e7fd      	b.n	81178a2 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 81178a6:	68f8      	ldr	r0, [r7, #12]
 81178a8:	f000 f95e 	bl	8117b68 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 81178ac:	68fb      	ldr	r3, [r7, #12]
 81178ae:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 81178b2:	2b00      	cmp	r3, #0
 81178b4:	d102      	bne.n	81178bc <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 81178b6:	68f8      	ldr	r0, [r7, #12]
 81178b8:	f7fe fcaa 	bl	8116210 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 81178bc:	bf00      	nop
 81178be:	3710      	adds	r7, #16
 81178c0:	46bd      	mov	sp, r7
 81178c2:	bd80      	pop	{r7, pc}

081178c4 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 81178c4:	b480      	push	{r7}
 81178c6:	b085      	sub	sp, #20
 81178c8:	af00      	add	r7, sp, #0
 81178ca:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 81178cc:	687b      	ldr	r3, [r7, #4]
 81178ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 81178d0:	2b00      	cmp	r3, #0
 81178d2:	d006      	beq.n	81178e2 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 81178d4:	687b      	ldr	r3, [r7, #4]
 81178d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 81178d8:	681b      	ldr	r3, [r3, #0]
 81178da:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 81178de:	60fb      	str	r3, [r7, #12]
 81178e0:	e001      	b.n	81178e6 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 81178e2:	2300      	movs	r3, #0
 81178e4:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 81178e6:	68fb      	ldr	r3, [r7, #12]
	}
 81178e8:	4618      	mov	r0, r3
 81178ea:	3714      	adds	r7, #20
 81178ec:	46bd      	mov	sp, r7
 81178ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 81178f2:	4770      	bx	lr

081178f4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 81178f4:	b580      	push	{r7, lr}
 81178f6:	b086      	sub	sp, #24
 81178f8:	af00      	add	r7, sp, #0
 81178fa:	60f8      	str	r0, [r7, #12]
 81178fc:	60b9      	str	r1, [r7, #8]
 81178fe:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8117900:	2300      	movs	r3, #0
 8117902:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8117904:	68fb      	ldr	r3, [r7, #12]
 8117906:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8117908:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 811790a:	68fb      	ldr	r3, [r7, #12]
 811790c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 811790e:	2b00      	cmp	r3, #0
 8117910:	d10d      	bne.n	811792e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8117912:	68fb      	ldr	r3, [r7, #12]
 8117914:	681b      	ldr	r3, [r3, #0]
 8117916:	2b00      	cmp	r3, #0
 8117918:	d14d      	bne.n	81179b6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 811791a:	68fb      	ldr	r3, [r7, #12]
 811791c:	689b      	ldr	r3, [r3, #8]
 811791e:	4618      	mov	r0, r3
 8117920:	f001 fcd2 	bl	81192c8 <xTaskPriorityDisinherit>
 8117924:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8117926:	68fb      	ldr	r3, [r7, #12]
 8117928:	2200      	movs	r2, #0
 811792a:	609a      	str	r2, [r3, #8]
 811792c:	e043      	b.n	81179b6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 811792e:	687b      	ldr	r3, [r7, #4]
 8117930:	2b00      	cmp	r3, #0
 8117932:	d119      	bne.n	8117968 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8117934:	68fb      	ldr	r3, [r7, #12]
 8117936:	6858      	ldr	r0, [r3, #4]
 8117938:	68fb      	ldr	r3, [r7, #12]
 811793a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 811793c:	461a      	mov	r2, r3
 811793e:	68b9      	ldr	r1, [r7, #8]
 8117940:	f00f fafb 	bl	8126f3a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8117944:	68fb      	ldr	r3, [r7, #12]
 8117946:	685a      	ldr	r2, [r3, #4]
 8117948:	68fb      	ldr	r3, [r7, #12]
 811794a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 811794c:	441a      	add	r2, r3
 811794e:	68fb      	ldr	r3, [r7, #12]
 8117950:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8117952:	68fb      	ldr	r3, [r7, #12]
 8117954:	685a      	ldr	r2, [r3, #4]
 8117956:	68fb      	ldr	r3, [r7, #12]
 8117958:	689b      	ldr	r3, [r3, #8]
 811795a:	429a      	cmp	r2, r3
 811795c:	d32b      	bcc.n	81179b6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 811795e:	68fb      	ldr	r3, [r7, #12]
 8117960:	681a      	ldr	r2, [r3, #0]
 8117962:	68fb      	ldr	r3, [r7, #12]
 8117964:	605a      	str	r2, [r3, #4]
 8117966:	e026      	b.n	81179b6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8117968:	68fb      	ldr	r3, [r7, #12]
 811796a:	68d8      	ldr	r0, [r3, #12]
 811796c:	68fb      	ldr	r3, [r7, #12]
 811796e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8117970:	461a      	mov	r2, r3
 8117972:	68b9      	ldr	r1, [r7, #8]
 8117974:	f00f fae1 	bl	8126f3a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8117978:	68fb      	ldr	r3, [r7, #12]
 811797a:	68da      	ldr	r2, [r3, #12]
 811797c:	68fb      	ldr	r3, [r7, #12]
 811797e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8117980:	425b      	negs	r3, r3
 8117982:	441a      	add	r2, r3
 8117984:	68fb      	ldr	r3, [r7, #12]
 8117986:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8117988:	68fb      	ldr	r3, [r7, #12]
 811798a:	68da      	ldr	r2, [r3, #12]
 811798c:	68fb      	ldr	r3, [r7, #12]
 811798e:	681b      	ldr	r3, [r3, #0]
 8117990:	429a      	cmp	r2, r3
 8117992:	d207      	bcs.n	81179a4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8117994:	68fb      	ldr	r3, [r7, #12]
 8117996:	689a      	ldr	r2, [r3, #8]
 8117998:	68fb      	ldr	r3, [r7, #12]
 811799a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 811799c:	425b      	negs	r3, r3
 811799e:	441a      	add	r2, r3
 81179a0:	68fb      	ldr	r3, [r7, #12]
 81179a2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 81179a4:	687b      	ldr	r3, [r7, #4]
 81179a6:	2b02      	cmp	r3, #2
 81179a8:	d105      	bne.n	81179b6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 81179aa:	693b      	ldr	r3, [r7, #16]
 81179ac:	2b00      	cmp	r3, #0
 81179ae:	d002      	beq.n	81179b6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 81179b0:	693b      	ldr	r3, [r7, #16]
 81179b2:	3b01      	subs	r3, #1
 81179b4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 81179b6:	693b      	ldr	r3, [r7, #16]
 81179b8:	1c5a      	adds	r2, r3, #1
 81179ba:	68fb      	ldr	r3, [r7, #12]
 81179bc:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 81179be:	697b      	ldr	r3, [r7, #20]
}
 81179c0:	4618      	mov	r0, r3
 81179c2:	3718      	adds	r7, #24
 81179c4:	46bd      	mov	sp, r7
 81179c6:	bd80      	pop	{r7, pc}

081179c8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 81179c8:	b580      	push	{r7, lr}
 81179ca:	b082      	sub	sp, #8
 81179cc:	af00      	add	r7, sp, #0
 81179ce:	6078      	str	r0, [r7, #4]
 81179d0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 81179d2:	687b      	ldr	r3, [r7, #4]
 81179d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 81179d6:	2b00      	cmp	r3, #0
 81179d8:	d018      	beq.n	8117a0c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 81179da:	687b      	ldr	r3, [r7, #4]
 81179dc:	68da      	ldr	r2, [r3, #12]
 81179de:	687b      	ldr	r3, [r7, #4]
 81179e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 81179e2:	441a      	add	r2, r3
 81179e4:	687b      	ldr	r3, [r7, #4]
 81179e6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 81179e8:	687b      	ldr	r3, [r7, #4]
 81179ea:	68da      	ldr	r2, [r3, #12]
 81179ec:	687b      	ldr	r3, [r7, #4]
 81179ee:	689b      	ldr	r3, [r3, #8]
 81179f0:	429a      	cmp	r2, r3
 81179f2:	d303      	bcc.n	81179fc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 81179f4:	687b      	ldr	r3, [r7, #4]
 81179f6:	681a      	ldr	r2, [r3, #0]
 81179f8:	687b      	ldr	r3, [r7, #4]
 81179fa:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 81179fc:	687b      	ldr	r3, [r7, #4]
 81179fe:	68d9      	ldr	r1, [r3, #12]
 8117a00:	687b      	ldr	r3, [r7, #4]
 8117a02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8117a04:	461a      	mov	r2, r3
 8117a06:	6838      	ldr	r0, [r7, #0]
 8117a08:	f00f fa97 	bl	8126f3a <memcpy>
	}
}
 8117a0c:	bf00      	nop
 8117a0e:	3708      	adds	r7, #8
 8117a10:	46bd      	mov	sp, r7
 8117a12:	bd80      	pop	{r7, pc}

08117a14 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8117a14:	b580      	push	{r7, lr}
 8117a16:	b084      	sub	sp, #16
 8117a18:	af00      	add	r7, sp, #0
 8117a1a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8117a1c:	f7fe fefc 	bl	8116818 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8117a20:	687b      	ldr	r3, [r7, #4]
 8117a22:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8117a26:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8117a28:	e011      	b.n	8117a4e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8117a2a:	687b      	ldr	r3, [r7, #4]
 8117a2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8117a2e:	2b00      	cmp	r3, #0
 8117a30:	d012      	beq.n	8117a58 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8117a32:	687b      	ldr	r3, [r7, #4]
 8117a34:	3324      	adds	r3, #36	@ 0x24
 8117a36:	4618      	mov	r0, r3
 8117a38:	f001 f9c2 	bl	8118dc0 <xTaskRemoveFromEventList>
 8117a3c:	4603      	mov	r3, r0
 8117a3e:	2b00      	cmp	r3, #0
 8117a40:	d001      	beq.n	8117a46 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8117a42:	f001 fac3 	bl	8118fcc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8117a46:	7bfb      	ldrb	r3, [r7, #15]
 8117a48:	3b01      	subs	r3, #1
 8117a4a:	b2db      	uxtb	r3, r3
 8117a4c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8117a4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8117a52:	2b00      	cmp	r3, #0
 8117a54:	dce9      	bgt.n	8117a2a <prvUnlockQueue+0x16>
 8117a56:	e000      	b.n	8117a5a <prvUnlockQueue+0x46>
					break;
 8117a58:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8117a5a:	687b      	ldr	r3, [r7, #4]
 8117a5c:	22ff      	movs	r2, #255	@ 0xff
 8117a5e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8117a62:	f7fe ff0b 	bl	811687c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8117a66:	f7fe fed7 	bl	8116818 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8117a6a:	687b      	ldr	r3, [r7, #4]
 8117a6c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8117a70:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8117a72:	e011      	b.n	8117a98 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8117a74:	687b      	ldr	r3, [r7, #4]
 8117a76:	691b      	ldr	r3, [r3, #16]
 8117a78:	2b00      	cmp	r3, #0
 8117a7a:	d012      	beq.n	8117aa2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8117a7c:	687b      	ldr	r3, [r7, #4]
 8117a7e:	3310      	adds	r3, #16
 8117a80:	4618      	mov	r0, r3
 8117a82:	f001 f99d 	bl	8118dc0 <xTaskRemoveFromEventList>
 8117a86:	4603      	mov	r3, r0
 8117a88:	2b00      	cmp	r3, #0
 8117a8a:	d001      	beq.n	8117a90 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8117a8c:	f001 fa9e 	bl	8118fcc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8117a90:	7bbb      	ldrb	r3, [r7, #14]
 8117a92:	3b01      	subs	r3, #1
 8117a94:	b2db      	uxtb	r3, r3
 8117a96:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8117a98:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8117a9c:	2b00      	cmp	r3, #0
 8117a9e:	dce9      	bgt.n	8117a74 <prvUnlockQueue+0x60>
 8117aa0:	e000      	b.n	8117aa4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8117aa2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8117aa4:	687b      	ldr	r3, [r7, #4]
 8117aa6:	22ff      	movs	r2, #255	@ 0xff
 8117aa8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8117aac:	f7fe fee6 	bl	811687c <vPortExitCritical>
}
 8117ab0:	bf00      	nop
 8117ab2:	3710      	adds	r7, #16
 8117ab4:	46bd      	mov	sp, r7
 8117ab6:	bd80      	pop	{r7, pc}

08117ab8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8117ab8:	b580      	push	{r7, lr}
 8117aba:	b084      	sub	sp, #16
 8117abc:	af00      	add	r7, sp, #0
 8117abe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8117ac0:	f7fe feaa 	bl	8116818 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8117ac4:	687b      	ldr	r3, [r7, #4]
 8117ac6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8117ac8:	2b00      	cmp	r3, #0
 8117aca:	d102      	bne.n	8117ad2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8117acc:	2301      	movs	r3, #1
 8117ace:	60fb      	str	r3, [r7, #12]
 8117ad0:	e001      	b.n	8117ad6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8117ad2:	2300      	movs	r3, #0
 8117ad4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8117ad6:	f7fe fed1 	bl	811687c <vPortExitCritical>

	return xReturn;
 8117ada:	68fb      	ldr	r3, [r7, #12]
}
 8117adc:	4618      	mov	r0, r3
 8117ade:	3710      	adds	r7, #16
 8117ae0:	46bd      	mov	sp, r7
 8117ae2:	bd80      	pop	{r7, pc}

08117ae4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8117ae4:	b580      	push	{r7, lr}
 8117ae6:	b084      	sub	sp, #16
 8117ae8:	af00      	add	r7, sp, #0
 8117aea:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8117aec:	f7fe fe94 	bl	8116818 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8117af0:	687b      	ldr	r3, [r7, #4]
 8117af2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8117af4:	687b      	ldr	r3, [r7, #4]
 8117af6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8117af8:	429a      	cmp	r2, r3
 8117afa:	d102      	bne.n	8117b02 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8117afc:	2301      	movs	r3, #1
 8117afe:	60fb      	str	r3, [r7, #12]
 8117b00:	e001      	b.n	8117b06 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8117b02:	2300      	movs	r3, #0
 8117b04:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8117b06:	f7fe feb9 	bl	811687c <vPortExitCritical>

	return xReturn;
 8117b0a:	68fb      	ldr	r3, [r7, #12]
}
 8117b0c:	4618      	mov	r0, r3
 8117b0e:	3710      	adds	r7, #16
 8117b10:	46bd      	mov	sp, r7
 8117b12:	bd80      	pop	{r7, pc}

08117b14 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8117b14:	b480      	push	{r7}
 8117b16:	b085      	sub	sp, #20
 8117b18:	af00      	add	r7, sp, #0
 8117b1a:	6078      	str	r0, [r7, #4]
 8117b1c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8117b1e:	2300      	movs	r3, #0
 8117b20:	60fb      	str	r3, [r7, #12]
 8117b22:	e014      	b.n	8117b4e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8117b24:	4a0f      	ldr	r2, [pc, #60]	@ (8117b64 <vQueueAddToRegistry+0x50>)
 8117b26:	68fb      	ldr	r3, [r7, #12]
 8117b28:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8117b2c:	2b00      	cmp	r3, #0
 8117b2e:	d10b      	bne.n	8117b48 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8117b30:	490c      	ldr	r1, [pc, #48]	@ (8117b64 <vQueueAddToRegistry+0x50>)
 8117b32:	68fb      	ldr	r3, [r7, #12]
 8117b34:	683a      	ldr	r2, [r7, #0]
 8117b36:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8117b3a:	4a0a      	ldr	r2, [pc, #40]	@ (8117b64 <vQueueAddToRegistry+0x50>)
 8117b3c:	68fb      	ldr	r3, [r7, #12]
 8117b3e:	00db      	lsls	r3, r3, #3
 8117b40:	4413      	add	r3, r2
 8117b42:	687a      	ldr	r2, [r7, #4]
 8117b44:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8117b46:	e006      	b.n	8117b56 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8117b48:	68fb      	ldr	r3, [r7, #12]
 8117b4a:	3301      	adds	r3, #1
 8117b4c:	60fb      	str	r3, [r7, #12]
 8117b4e:	68fb      	ldr	r3, [r7, #12]
 8117b50:	2b07      	cmp	r3, #7
 8117b52:	d9e7      	bls.n	8117b24 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8117b54:	bf00      	nop
 8117b56:	bf00      	nop
 8117b58:	3714      	adds	r7, #20
 8117b5a:	46bd      	mov	sp, r7
 8117b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8117b60:	4770      	bx	lr
 8117b62:	bf00      	nop
 8117b64:	1000ac14 	.word	0x1000ac14

08117b68 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8117b68:	b480      	push	{r7}
 8117b6a:	b085      	sub	sp, #20
 8117b6c:	af00      	add	r7, sp, #0
 8117b6e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8117b70:	2300      	movs	r3, #0
 8117b72:	60fb      	str	r3, [r7, #12]
 8117b74:	e016      	b.n	8117ba4 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8117b76:	4a10      	ldr	r2, [pc, #64]	@ (8117bb8 <vQueueUnregisterQueue+0x50>)
 8117b78:	68fb      	ldr	r3, [r7, #12]
 8117b7a:	00db      	lsls	r3, r3, #3
 8117b7c:	4413      	add	r3, r2
 8117b7e:	685b      	ldr	r3, [r3, #4]
 8117b80:	687a      	ldr	r2, [r7, #4]
 8117b82:	429a      	cmp	r2, r3
 8117b84:	d10b      	bne.n	8117b9e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8117b86:	4a0c      	ldr	r2, [pc, #48]	@ (8117bb8 <vQueueUnregisterQueue+0x50>)
 8117b88:	68fb      	ldr	r3, [r7, #12]
 8117b8a:	2100      	movs	r1, #0
 8117b8c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8117b90:	4a09      	ldr	r2, [pc, #36]	@ (8117bb8 <vQueueUnregisterQueue+0x50>)
 8117b92:	68fb      	ldr	r3, [r7, #12]
 8117b94:	00db      	lsls	r3, r3, #3
 8117b96:	4413      	add	r3, r2
 8117b98:	2200      	movs	r2, #0
 8117b9a:	605a      	str	r2, [r3, #4]
				break;
 8117b9c:	e006      	b.n	8117bac <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8117b9e:	68fb      	ldr	r3, [r7, #12]
 8117ba0:	3301      	adds	r3, #1
 8117ba2:	60fb      	str	r3, [r7, #12]
 8117ba4:	68fb      	ldr	r3, [r7, #12]
 8117ba6:	2b07      	cmp	r3, #7
 8117ba8:	d9e5      	bls.n	8117b76 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8117baa:	bf00      	nop
 8117bac:	bf00      	nop
 8117bae:	3714      	adds	r7, #20
 8117bb0:	46bd      	mov	sp, r7
 8117bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8117bb6:	4770      	bx	lr
 8117bb8:	1000ac14 	.word	0x1000ac14

08117bbc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8117bbc:	b580      	push	{r7, lr}
 8117bbe:	b086      	sub	sp, #24
 8117bc0:	af00      	add	r7, sp, #0
 8117bc2:	60f8      	str	r0, [r7, #12]
 8117bc4:	60b9      	str	r1, [r7, #8]
 8117bc6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8117bc8:	68fb      	ldr	r3, [r7, #12]
 8117bca:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8117bcc:	f7fe fe24 	bl	8116818 <vPortEnterCritical>
 8117bd0:	697b      	ldr	r3, [r7, #20]
 8117bd2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8117bd6:	b25b      	sxtb	r3, r3
 8117bd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8117bdc:	d103      	bne.n	8117be6 <vQueueWaitForMessageRestricted+0x2a>
 8117bde:	697b      	ldr	r3, [r7, #20]
 8117be0:	2200      	movs	r2, #0
 8117be2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8117be6:	697b      	ldr	r3, [r7, #20]
 8117be8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8117bec:	b25b      	sxtb	r3, r3
 8117bee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8117bf2:	d103      	bne.n	8117bfc <vQueueWaitForMessageRestricted+0x40>
 8117bf4:	697b      	ldr	r3, [r7, #20]
 8117bf6:	2200      	movs	r2, #0
 8117bf8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8117bfc:	f7fe fe3e 	bl	811687c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8117c00:	697b      	ldr	r3, [r7, #20]
 8117c02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8117c04:	2b00      	cmp	r3, #0
 8117c06:	d106      	bne.n	8117c16 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8117c08:	697b      	ldr	r3, [r7, #20]
 8117c0a:	3324      	adds	r3, #36	@ 0x24
 8117c0c:	687a      	ldr	r2, [r7, #4]
 8117c0e:	68b9      	ldr	r1, [r7, #8]
 8117c10:	4618      	mov	r0, r3
 8117c12:	f001 f8a9 	bl	8118d68 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8117c16:	6978      	ldr	r0, [r7, #20]
 8117c18:	f7ff fefc 	bl	8117a14 <prvUnlockQueue>
	}
 8117c1c:	bf00      	nop
 8117c1e:	3718      	adds	r7, #24
 8117c20:	46bd      	mov	sp, r7
 8117c22:	bd80      	pop	{r7, pc}

08117c24 <xStreamBufferGenericCreateStatic>:
	StreamBufferHandle_t xStreamBufferGenericCreateStatic( size_t xBufferSizeBytes,
														   size_t xTriggerLevelBytes,
														   BaseType_t xIsMessageBuffer,
														   uint8_t * const pucStreamBufferStorageArea,
														   StaticStreamBuffer_t * const pxStaticStreamBuffer )
	{
 8117c24:	b580      	push	{r7, lr}
 8117c26:	b090      	sub	sp, #64	@ 0x40
 8117c28:	af02      	add	r7, sp, #8
 8117c2a:	60f8      	str	r0, [r7, #12]
 8117c2c:	60b9      	str	r1, [r7, #8]
 8117c2e:	607a      	str	r2, [r7, #4]
 8117c30:	603b      	str	r3, [r7, #0]
	StreamBuffer_t * const pxStreamBuffer = ( StreamBuffer_t * ) pxStaticStreamBuffer; /*lint !e740 !e9087 Safe cast as StaticStreamBuffer_t is opaque Streambuffer_t. */
 8117c32:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8117c34:	62fb      	str	r3, [r7, #44]	@ 0x2c
	StreamBufferHandle_t xReturn;
	uint8_t ucFlags;

		configASSERT( pucStreamBufferStorageArea );
 8117c36:	683b      	ldr	r3, [r7, #0]
 8117c38:	2b00      	cmp	r3, #0
 8117c3a:	d10b      	bne.n	8117c54 <xStreamBufferGenericCreateStatic+0x30>
	__asm volatile
 8117c3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8117c40:	f383 8811 	msr	BASEPRI, r3
 8117c44:	f3bf 8f6f 	isb	sy
 8117c48:	f3bf 8f4f 	dsb	sy
 8117c4c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8117c4e:	bf00      	nop
 8117c50:	bf00      	nop
 8117c52:	e7fd      	b.n	8117c50 <xStreamBufferGenericCreateStatic+0x2c>
		configASSERT( pxStaticStreamBuffer );
 8117c54:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8117c56:	2b00      	cmp	r3, #0
 8117c58:	d10b      	bne.n	8117c72 <xStreamBufferGenericCreateStatic+0x4e>
	__asm volatile
 8117c5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8117c5e:	f383 8811 	msr	BASEPRI, r3
 8117c62:	f3bf 8f6f 	isb	sy
 8117c66:	f3bf 8f4f 	dsb	sy
 8117c6a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8117c6c:	bf00      	nop
 8117c6e:	bf00      	nop
 8117c70:	e7fd      	b.n	8117c6e <xStreamBufferGenericCreateStatic+0x4a>
		configASSERT( xTriggerLevelBytes <= xBufferSizeBytes );
 8117c72:	68ba      	ldr	r2, [r7, #8]
 8117c74:	68fb      	ldr	r3, [r7, #12]
 8117c76:	429a      	cmp	r2, r3
 8117c78:	d90b      	bls.n	8117c92 <xStreamBufferGenericCreateStatic+0x6e>
	__asm volatile
 8117c7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8117c7e:	f383 8811 	msr	BASEPRI, r3
 8117c82:	f3bf 8f6f 	isb	sy
 8117c86:	f3bf 8f4f 	dsb	sy
 8117c8a:	623b      	str	r3, [r7, #32]
}
 8117c8c:	bf00      	nop
 8117c8e:	bf00      	nop
 8117c90:	e7fd      	b.n	8117c8e <xStreamBufferGenericCreateStatic+0x6a>

		/* A trigger level of 0 would cause a waiting task to unblock even when
		the buffer was empty. */
		if( xTriggerLevelBytes == ( size_t ) 0 )
 8117c92:	68bb      	ldr	r3, [r7, #8]
 8117c94:	2b00      	cmp	r3, #0
 8117c96:	d101      	bne.n	8117c9c <xStreamBufferGenericCreateStatic+0x78>
		{
			xTriggerLevelBytes = ( size_t ) 1;
 8117c98:	2301      	movs	r3, #1
 8117c9a:	60bb      	str	r3, [r7, #8]
		}

		if( xIsMessageBuffer != pdFALSE )
 8117c9c:	687b      	ldr	r3, [r7, #4]
 8117c9e:	2b00      	cmp	r3, #0
 8117ca0:	d003      	beq.n	8117caa <xStreamBufferGenericCreateStatic+0x86>
		{
			/* Statically allocated message buffer. */
			ucFlags = sbFLAGS_IS_MESSAGE_BUFFER | sbFLAGS_IS_STATICALLY_ALLOCATED;
 8117ca2:	2303      	movs	r3, #3
 8117ca4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 8117ca8:	e002      	b.n	8117cb0 <xStreamBufferGenericCreateStatic+0x8c>
		}
		else
		{
			/* Statically allocated stream buffer. */
			ucFlags = sbFLAGS_IS_STATICALLY_ALLOCATED;
 8117caa:	2302      	movs	r3, #2
 8117cac:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

		/* In case the stream buffer is going to be used as a message buffer
		(that is, it will hold discrete messages with a little meta data that
		says how big the next message is) check the buffer will be large enough
		to hold at least one message. */
		configASSERT( xBufferSizeBytes > sbBYTES_TO_STORE_MESSAGE_LENGTH );
 8117cb0:	68fb      	ldr	r3, [r7, #12]
 8117cb2:	2b04      	cmp	r3, #4
 8117cb4:	d80b      	bhi.n	8117cce <xStreamBufferGenericCreateStatic+0xaa>
	__asm volatile
 8117cb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8117cba:	f383 8811 	msr	BASEPRI, r3
 8117cbe:	f3bf 8f6f 	isb	sy
 8117cc2:	f3bf 8f4f 	dsb	sy
 8117cc6:	61fb      	str	r3, [r7, #28]
}
 8117cc8:	bf00      	nop
 8117cca:	bf00      	nop
 8117ccc:	e7fd      	b.n	8117cca <xStreamBufferGenericCreateStatic+0xa6>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticStreamBuffer_t equals the size of the real
			message buffer structure. */
			volatile size_t xSize = sizeof( StaticStreamBuffer_t );
 8117cce:	2324      	movs	r3, #36	@ 0x24
 8117cd0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( StreamBuffer_t ) );
 8117cd2:	697b      	ldr	r3, [r7, #20]
 8117cd4:	2b24      	cmp	r3, #36	@ 0x24
 8117cd6:	d00b      	beq.n	8117cf0 <xStreamBufferGenericCreateStatic+0xcc>
	__asm volatile
 8117cd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8117cdc:	f383 8811 	msr	BASEPRI, r3
 8117ce0:	f3bf 8f6f 	isb	sy
 8117ce4:	f3bf 8f4f 	dsb	sy
 8117ce8:	61bb      	str	r3, [r7, #24]
}
 8117cea:	bf00      	nop
 8117cec:	bf00      	nop
 8117cee:	e7fd      	b.n	8117cec <xStreamBufferGenericCreateStatic+0xc8>
		} /*lint !e529 xSize is referenced is configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		if( ( pucStreamBufferStorageArea != NULL ) && ( pxStaticStreamBuffer != NULL ) )
 8117cf0:	683b      	ldr	r3, [r7, #0]
 8117cf2:	2b00      	cmp	r3, #0
 8117cf4:	d015      	beq.n	8117d22 <xStreamBufferGenericCreateStatic+0xfe>
 8117cf6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8117cf8:	2b00      	cmp	r3, #0
 8117cfa:	d012      	beq.n	8117d22 <xStreamBufferGenericCreateStatic+0xfe>
		{
			prvInitialiseNewStreamBuffer( pxStreamBuffer,
 8117cfc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8117d00:	9300      	str	r3, [sp, #0]
 8117d02:	68bb      	ldr	r3, [r7, #8]
 8117d04:	68fa      	ldr	r2, [r7, #12]
 8117d06:	6839      	ldr	r1, [r7, #0]
 8117d08:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8117d0a:	f000 fb81 	bl	8118410 <prvInitialiseNewStreamBuffer>
										  xTriggerLevelBytes,
										  ucFlags );

			/* Remember this was statically allocated in case it is ever deleted
			again. */
			pxStreamBuffer->ucFlags |= sbFLAGS_IS_STATICALLY_ALLOCATED;
 8117d0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8117d10:	7f1b      	ldrb	r3, [r3, #28]
 8117d12:	f043 0302 	orr.w	r3, r3, #2
 8117d16:	b2da      	uxtb	r2, r3
 8117d18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8117d1a:	771a      	strb	r2, [r3, #28]

			traceSTREAM_BUFFER_CREATE( pxStreamBuffer, xIsMessageBuffer );

			xReturn = ( StreamBufferHandle_t ) pxStaticStreamBuffer; /*lint !e9087 Data hiding requires cast to opaque type. */
 8117d1c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8117d1e:	637b      	str	r3, [r7, #52]	@ 0x34
 8117d20:	e001      	b.n	8117d26 <xStreamBufferGenericCreateStatic+0x102>
		}
		else
		{
			xReturn = NULL;
 8117d22:	2300      	movs	r3, #0
 8117d24:	637b      	str	r3, [r7, #52]	@ 0x34
			traceSTREAM_BUFFER_CREATE_STATIC_FAILED( xReturn, xIsMessageBuffer );
		}

		return xReturn;
 8117d26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
	}
 8117d28:	4618      	mov	r0, r3
 8117d2a:	3738      	adds	r7, #56	@ 0x38
 8117d2c:	46bd      	mov	sp, r7
 8117d2e:	bd80      	pop	{r7, pc}

08117d30 <xStreamBufferSpacesAvailable>:
	return xReturn;
}
/*-----------------------------------------------------------*/

size_t xStreamBufferSpacesAvailable( StreamBufferHandle_t xStreamBuffer )
{
 8117d30:	b480      	push	{r7}
 8117d32:	b087      	sub	sp, #28
 8117d34:	af00      	add	r7, sp, #0
 8117d36:	6078      	str	r0, [r7, #4]
const StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 8117d38:	687b      	ldr	r3, [r7, #4]
 8117d3a:	613b      	str	r3, [r7, #16]
size_t xSpace;

	configASSERT( pxStreamBuffer );
 8117d3c:	693b      	ldr	r3, [r7, #16]
 8117d3e:	2b00      	cmp	r3, #0
 8117d40:	d10b      	bne.n	8117d5a <xStreamBufferSpacesAvailable+0x2a>
	__asm volatile
 8117d42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8117d46:	f383 8811 	msr	BASEPRI, r3
 8117d4a:	f3bf 8f6f 	isb	sy
 8117d4e:	f3bf 8f4f 	dsb	sy
 8117d52:	60fb      	str	r3, [r7, #12]
}
 8117d54:	bf00      	nop
 8117d56:	bf00      	nop
 8117d58:	e7fd      	b.n	8117d56 <xStreamBufferSpacesAvailable+0x26>

	xSpace = pxStreamBuffer->xLength + pxStreamBuffer->xTail;
 8117d5a:	693b      	ldr	r3, [r7, #16]
 8117d5c:	689a      	ldr	r2, [r3, #8]
 8117d5e:	693b      	ldr	r3, [r7, #16]
 8117d60:	681b      	ldr	r3, [r3, #0]
 8117d62:	4413      	add	r3, r2
 8117d64:	617b      	str	r3, [r7, #20]
	xSpace -= pxStreamBuffer->xHead;
 8117d66:	693b      	ldr	r3, [r7, #16]
 8117d68:	685b      	ldr	r3, [r3, #4]
 8117d6a:	697a      	ldr	r2, [r7, #20]
 8117d6c:	1ad3      	subs	r3, r2, r3
 8117d6e:	617b      	str	r3, [r7, #20]
	xSpace -= ( size_t ) 1;
 8117d70:	697b      	ldr	r3, [r7, #20]
 8117d72:	3b01      	subs	r3, #1
 8117d74:	617b      	str	r3, [r7, #20]

	if( xSpace >= pxStreamBuffer->xLength )
 8117d76:	693b      	ldr	r3, [r7, #16]
 8117d78:	689b      	ldr	r3, [r3, #8]
 8117d7a:	697a      	ldr	r2, [r7, #20]
 8117d7c:	429a      	cmp	r2, r3
 8117d7e:	d304      	bcc.n	8117d8a <xStreamBufferSpacesAvailable+0x5a>
	{
		xSpace -= pxStreamBuffer->xLength;
 8117d80:	693b      	ldr	r3, [r7, #16]
 8117d82:	689b      	ldr	r3, [r3, #8]
 8117d84:	697a      	ldr	r2, [r7, #20]
 8117d86:	1ad3      	subs	r3, r2, r3
 8117d88:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xSpace;
 8117d8a:	697b      	ldr	r3, [r7, #20]
}
 8117d8c:	4618      	mov	r0, r3
 8117d8e:	371c      	adds	r7, #28
 8117d90:	46bd      	mov	sp, r7
 8117d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8117d96:	4770      	bx	lr

08117d98 <xStreamBufferSend>:

size_t xStreamBufferSend( StreamBufferHandle_t xStreamBuffer,
						  const void *pvTxData,
						  size_t xDataLengthBytes,
						  TickType_t xTicksToWait )
{
 8117d98:	b580      	push	{r7, lr}
 8117d9a:	b090      	sub	sp, #64	@ 0x40
 8117d9c:	af02      	add	r7, sp, #8
 8117d9e:	60f8      	str	r0, [r7, #12]
 8117da0:	60b9      	str	r1, [r7, #8]
 8117da2:	607a      	str	r2, [r7, #4]
 8117da4:	603b      	str	r3, [r7, #0]
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 8117da6:	68fb      	ldr	r3, [r7, #12]
 8117da8:	62fb      	str	r3, [r7, #44]	@ 0x2c
size_t xReturn, xSpace = 0;
 8117daa:	2300      	movs	r3, #0
 8117dac:	637b      	str	r3, [r7, #52]	@ 0x34
size_t xRequiredSpace = xDataLengthBytes;
 8117dae:	687b      	ldr	r3, [r7, #4]
 8117db0:	633b      	str	r3, [r7, #48]	@ 0x30
TimeOut_t xTimeOut;

	configASSERT( pvTxData );
 8117db2:	68bb      	ldr	r3, [r7, #8]
 8117db4:	2b00      	cmp	r3, #0
 8117db6:	d10b      	bne.n	8117dd0 <xStreamBufferSend+0x38>
	__asm volatile
 8117db8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8117dbc:	f383 8811 	msr	BASEPRI, r3
 8117dc0:	f3bf 8f6f 	isb	sy
 8117dc4:	f3bf 8f4f 	dsb	sy
 8117dc8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8117dca:	bf00      	nop
 8117dcc:	bf00      	nop
 8117dce:	e7fd      	b.n	8117dcc <xStreamBufferSend+0x34>
	configASSERT( pxStreamBuffer );
 8117dd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8117dd2:	2b00      	cmp	r3, #0
 8117dd4:	d10b      	bne.n	8117dee <xStreamBufferSend+0x56>
	__asm volatile
 8117dd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8117dda:	f383 8811 	msr	BASEPRI, r3
 8117dde:	f3bf 8f6f 	isb	sy
 8117de2:	f3bf 8f4f 	dsb	sy
 8117de6:	623b      	str	r3, [r7, #32]
}
 8117de8:	bf00      	nop
 8117dea:	bf00      	nop
 8117dec:	e7fd      	b.n	8117dea <xStreamBufferSend+0x52>

	/* This send function is used to write to both message buffers and stream
	buffers.  If this is a message buffer then the space needed must be
	increased by the amount of bytes needed to store the length of the
	message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 8117dee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8117df0:	7f1b      	ldrb	r3, [r3, #28]
 8117df2:	f003 0301 	and.w	r3, r3, #1
 8117df6:	2b00      	cmp	r3, #0
 8117df8:	d012      	beq.n	8117e20 <xStreamBufferSend+0x88>
	{
		xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
 8117dfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8117dfc:	3304      	adds	r3, #4
 8117dfe:	633b      	str	r3, [r7, #48]	@ 0x30

		/* Overflow? */
		configASSERT( xRequiredSpace > xDataLengthBytes );
 8117e00:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8117e02:	687b      	ldr	r3, [r7, #4]
 8117e04:	429a      	cmp	r2, r3
 8117e06:	d80b      	bhi.n	8117e20 <xStreamBufferSend+0x88>
	__asm volatile
 8117e08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8117e0c:	f383 8811 	msr	BASEPRI, r3
 8117e10:	f3bf 8f6f 	isb	sy
 8117e14:	f3bf 8f4f 	dsb	sy
 8117e18:	61fb      	str	r3, [r7, #28]
}
 8117e1a:	bf00      	nop
 8117e1c:	bf00      	nop
 8117e1e:	e7fd      	b.n	8117e1c <xStreamBufferSend+0x84>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	if( xTicksToWait != ( TickType_t ) 0 )
 8117e20:	683b      	ldr	r3, [r7, #0]
 8117e22:	2b00      	cmp	r3, #0
 8117e24:	d03f      	beq.n	8117ea6 <xStreamBufferSend+0x10e>
	{
		vTaskSetTimeOutState( &xTimeOut );
 8117e26:	f107 0310 	add.w	r3, r7, #16
 8117e2a:	4618      	mov	r0, r3
 8117e2c:	f001 f82c 	bl	8118e88 <vTaskSetTimeOutState>

		do
		{
			/* Wait until the required number of bytes are free in the message
			buffer. */
			taskENTER_CRITICAL();
 8117e30:	f7fe fcf2 	bl	8116818 <vPortEnterCritical>
			{
				xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
 8117e34:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8117e36:	f7ff ff7b 	bl	8117d30 <xStreamBufferSpacesAvailable>
 8117e3a:	6378      	str	r0, [r7, #52]	@ 0x34

				if( xSpace < xRequiredSpace )
 8117e3c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8117e3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8117e40:	429a      	cmp	r2, r3
 8117e42:	d218      	bcs.n	8117e76 <xStreamBufferSend+0xde>
				{
					/* Clear notification state as going to wait for space. */
					( void ) xTaskNotifyStateClear( NULL );
 8117e44:	2000      	movs	r0, #0
 8117e46:	f001 fc8d 	bl	8119764 <xTaskNotifyStateClear>

					/* Should only be one writer. */
					configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
 8117e4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8117e4c:	695b      	ldr	r3, [r3, #20]
 8117e4e:	2b00      	cmp	r3, #0
 8117e50:	d00b      	beq.n	8117e6a <xStreamBufferSend+0xd2>
	__asm volatile
 8117e52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8117e56:	f383 8811 	msr	BASEPRI, r3
 8117e5a:	f3bf 8f6f 	isb	sy
 8117e5e:	f3bf 8f4f 	dsb	sy
 8117e62:	61bb      	str	r3, [r7, #24]
}
 8117e64:	bf00      	nop
 8117e66:	bf00      	nop
 8117e68:	e7fd      	b.n	8117e66 <xStreamBufferSend+0xce>
					pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
 8117e6a:	f001 f997 	bl	811919c <xTaskGetCurrentTaskHandle>
 8117e6e:	4602      	mov	r2, r0
 8117e70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8117e72:	615a      	str	r2, [r3, #20]
 8117e74:	e002      	b.n	8117e7c <xStreamBufferSend+0xe4>
				}
				else
				{
					taskEXIT_CRITICAL();
 8117e76:	f7fe fd01 	bl	811687c <vPortExitCritical>
					break;
 8117e7a:	e014      	b.n	8117ea6 <xStreamBufferSend+0x10e>
				}
			}
			taskEXIT_CRITICAL();
 8117e7c:	f7fe fcfe 	bl	811687c <vPortExitCritical>

			traceBLOCKING_ON_STREAM_BUFFER_SEND( xStreamBuffer );
			( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
 8117e80:	683b      	ldr	r3, [r7, #0]
 8117e82:	2200      	movs	r2, #0
 8117e84:	2100      	movs	r1, #0
 8117e86:	2000      	movs	r0, #0
 8117e88:	f001 fb26 	bl	81194d8 <xTaskNotifyWait>
			pxStreamBuffer->xTaskWaitingToSend = NULL;
 8117e8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8117e8e:	2200      	movs	r2, #0
 8117e90:	615a      	str	r2, [r3, #20]

		} while( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE );
 8117e92:	463a      	mov	r2, r7
 8117e94:	f107 0310 	add.w	r3, r7, #16
 8117e98:	4611      	mov	r1, r2
 8117e9a:	4618      	mov	r0, r3
 8117e9c:	f001 f832 	bl	8118f04 <xTaskCheckForTimeOut>
 8117ea0:	4603      	mov	r3, r0
 8117ea2:	2b00      	cmp	r3, #0
 8117ea4:	d0c4      	beq.n	8117e30 <xStreamBufferSend+0x98>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	if( xSpace == ( size_t ) 0 )
 8117ea6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8117ea8:	2b00      	cmp	r3, #0
 8117eaa:	d103      	bne.n	8117eb4 <xStreamBufferSend+0x11c>
	{
		xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
 8117eac:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8117eae:	f7ff ff3f 	bl	8117d30 <xStreamBufferSpacesAvailable>
 8117eb2:	6378      	str	r0, [r7, #52]	@ 0x34
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
 8117eb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8117eb6:	9300      	str	r3, [sp, #0]
 8117eb8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8117eba:	687a      	ldr	r2, [r7, #4]
 8117ebc:	68b9      	ldr	r1, [r7, #8]
 8117ebe:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8117ec0:	f000 f814 	bl	8117eec <prvWriteMessageToBuffer>
 8117ec4:	62b8      	str	r0, [r7, #40]	@ 0x28

	if( xReturn > ( size_t ) 0 )
 8117ec6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8117ec8:	2b00      	cmp	r3, #0
 8117eca:	d00a      	beq.n	8117ee2 <xStreamBufferSend+0x14a>
	{
		traceSTREAM_BUFFER_SEND( xStreamBuffer, xReturn );

		/* Was a task waiting for the data? */
		if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
 8117ecc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8117ece:	f000 fa7f 	bl	81183d0 <prvBytesInBuffer>
 8117ed2:	4602      	mov	r2, r0
 8117ed4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8117ed6:	68db      	ldr	r3, [r3, #12]
 8117ed8:	429a      	cmp	r2, r3
 8117eda:	d302      	bcc.n	8117ee2 <xStreamBufferSend+0x14a>
		{
			sbSEND_COMPLETED( pxStreamBuffer );
 8117edc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8117ede:	f7e9 f993 	bl	8101208 <vGenerateRemoteInterrupt>
	{
		mtCOVERAGE_TEST_MARKER();
		traceSTREAM_BUFFER_SEND_FAILED( xStreamBuffer );
	}

	return xReturn;
 8117ee2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
}
 8117ee4:	4618      	mov	r0, r3
 8117ee6:	3738      	adds	r7, #56	@ 0x38
 8117ee8:	46bd      	mov	sp, r7
 8117eea:	bd80      	pop	{r7, pc}

08117eec <prvWriteMessageToBuffer>:
static size_t prvWriteMessageToBuffer( StreamBuffer_t * const pxStreamBuffer,
									   const void * pvTxData,
									   size_t xDataLengthBytes,
									   size_t xSpace,
									   size_t xRequiredSpace )
{
 8117eec:	b580      	push	{r7, lr}
 8117eee:	b086      	sub	sp, #24
 8117ef0:	af00      	add	r7, sp, #0
 8117ef2:	60f8      	str	r0, [r7, #12]
 8117ef4:	60b9      	str	r1, [r7, #8]
 8117ef6:	607a      	str	r2, [r7, #4]
 8117ef8:	603b      	str	r3, [r7, #0]
	BaseType_t xShouldWrite;
	size_t xReturn;

	if( xSpace == ( size_t ) 0 )
 8117efa:	683b      	ldr	r3, [r7, #0]
 8117efc:	2b00      	cmp	r3, #0
 8117efe:	d102      	bne.n	8117f06 <prvWriteMessageToBuffer+0x1a>
	{
		/* Doesn't matter if this is a stream buffer or a message buffer, there
		is no space to write. */
		xShouldWrite = pdFALSE;
 8117f00:	2300      	movs	r3, #0
 8117f02:	617b      	str	r3, [r7, #20]
 8117f04:	e01d      	b.n	8117f42 <prvWriteMessageToBuffer+0x56>
	}
	else if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) == ( uint8_t ) 0 )
 8117f06:	68fb      	ldr	r3, [r7, #12]
 8117f08:	7f1b      	ldrb	r3, [r3, #28]
 8117f0a:	f003 0301 	and.w	r3, r3, #1
 8117f0e:	2b00      	cmp	r3, #0
 8117f10:	d108      	bne.n	8117f24 <prvWriteMessageToBuffer+0x38>
	{
		/* This is a stream buffer, as opposed to a message buffer, so writing a
		stream of bytes rather than discrete messages.  Write as many bytes as
		possible. */
		xShouldWrite = pdTRUE;
 8117f12:	2301      	movs	r3, #1
 8117f14:	617b      	str	r3, [r7, #20]
		xDataLengthBytes = configMIN( xDataLengthBytes, xSpace );
 8117f16:	687a      	ldr	r2, [r7, #4]
 8117f18:	683b      	ldr	r3, [r7, #0]
 8117f1a:	4293      	cmp	r3, r2
 8117f1c:	bf28      	it	cs
 8117f1e:	4613      	movcs	r3, r2
 8117f20:	607b      	str	r3, [r7, #4]
 8117f22:	e00e      	b.n	8117f42 <prvWriteMessageToBuffer+0x56>
	}
	else if( xSpace >= xRequiredSpace )
 8117f24:	683a      	ldr	r2, [r7, #0]
 8117f26:	6a3b      	ldr	r3, [r7, #32]
 8117f28:	429a      	cmp	r2, r3
 8117f2a:	d308      	bcc.n	8117f3e <prvWriteMessageToBuffer+0x52>
	{
		/* This is a message buffer, as opposed to a stream buffer, and there
		is enough space to write both the message length and the message itself
		into the buffer.  Start by writing the length of the data, the data
		itself will be written later in this function. */
		xShouldWrite = pdTRUE;
 8117f2c:	2301      	movs	r3, #1
 8117f2e:	617b      	str	r3, [r7, #20]
		( void ) prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) &( xDataLengthBytes ), sbBYTES_TO_STORE_MESSAGE_LENGTH );
 8117f30:	1d3b      	adds	r3, r7, #4
 8117f32:	2204      	movs	r2, #4
 8117f34:	4619      	mov	r1, r3
 8117f36:	68f8      	ldr	r0, [r7, #12]
 8117f38:	f000 f958 	bl	81181ec <prvWriteBytesToBuffer>
 8117f3c:	e001      	b.n	8117f42 <prvWriteMessageToBuffer+0x56>
	}
	else
	{
		/* There is space available, but not enough space. */
		xShouldWrite = pdFALSE;
 8117f3e:	2300      	movs	r3, #0
 8117f40:	617b      	str	r3, [r7, #20]
	}

	if( xShouldWrite != pdFALSE )
 8117f42:	697b      	ldr	r3, [r7, #20]
 8117f44:	2b00      	cmp	r3, #0
 8117f46:	d007      	beq.n	8117f58 <prvWriteMessageToBuffer+0x6c>
	{
		/* Writes the data itself. */
		xReturn = prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) pvTxData, xDataLengthBytes ); /*lint !e9079 Storage buffer is implemented as uint8_t for ease of sizing, alighment and access. */
 8117f48:	687b      	ldr	r3, [r7, #4]
 8117f4a:	461a      	mov	r2, r3
 8117f4c:	68b9      	ldr	r1, [r7, #8]
 8117f4e:	68f8      	ldr	r0, [r7, #12]
 8117f50:	f000 f94c 	bl	81181ec <prvWriteBytesToBuffer>
 8117f54:	6138      	str	r0, [r7, #16]
 8117f56:	e001      	b.n	8117f5c <prvWriteMessageToBuffer+0x70>
	}
	else
	{
		xReturn = 0;
 8117f58:	2300      	movs	r3, #0
 8117f5a:	613b      	str	r3, [r7, #16]
	}

	return xReturn;
 8117f5c:	693b      	ldr	r3, [r7, #16]
}
 8117f5e:	4618      	mov	r0, r3
 8117f60:	3718      	adds	r7, #24
 8117f62:	46bd      	mov	sp, r7
 8117f64:	bd80      	pop	{r7, pc}

08117f66 <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
							 void *pvRxData,
							 size_t xBufferLengthBytes,
							 TickType_t xTicksToWait )
{
 8117f66:	b580      	push	{r7, lr}
 8117f68:	b08e      	sub	sp, #56	@ 0x38
 8117f6a:	af02      	add	r7, sp, #8
 8117f6c:	60f8      	str	r0, [r7, #12]
 8117f6e:	60b9      	str	r1, [r7, #8]
 8117f70:	607a      	str	r2, [r7, #4]
 8117f72:	603b      	str	r3, [r7, #0]
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 8117f74:	68fb      	ldr	r3, [r7, #12]
 8117f76:	623b      	str	r3, [r7, #32]
size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
 8117f78:	2300      	movs	r3, #0
 8117f7a:	62fb      	str	r3, [r7, #44]	@ 0x2c

	configASSERT( pvRxData );
 8117f7c:	68bb      	ldr	r3, [r7, #8]
 8117f7e:	2b00      	cmp	r3, #0
 8117f80:	d10b      	bne.n	8117f9a <xStreamBufferReceive+0x34>
	__asm volatile
 8117f82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8117f86:	f383 8811 	msr	BASEPRI, r3
 8117f8a:	f3bf 8f6f 	isb	sy
 8117f8e:	f3bf 8f4f 	dsb	sy
 8117f92:	61fb      	str	r3, [r7, #28]
}
 8117f94:	bf00      	nop
 8117f96:	bf00      	nop
 8117f98:	e7fd      	b.n	8117f96 <xStreamBufferReceive+0x30>
	configASSERT( pxStreamBuffer );
 8117f9a:	6a3b      	ldr	r3, [r7, #32]
 8117f9c:	2b00      	cmp	r3, #0
 8117f9e:	d10b      	bne.n	8117fb8 <xStreamBufferReceive+0x52>
	__asm volatile
 8117fa0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8117fa4:	f383 8811 	msr	BASEPRI, r3
 8117fa8:	f3bf 8f6f 	isb	sy
 8117fac:	f3bf 8f4f 	dsb	sy
 8117fb0:	61bb      	str	r3, [r7, #24]
}
 8117fb2:	bf00      	nop
 8117fb4:	bf00      	nop
 8117fb6:	e7fd      	b.n	8117fb4 <xStreamBufferReceive+0x4e>
	/* This receive function is used by both message buffers, which store
	discrete messages, and stream buffers, which store a continuous stream of
	bytes.  Discrete messages include an additional
	sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
	message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 8117fb8:	6a3b      	ldr	r3, [r7, #32]
 8117fba:	7f1b      	ldrb	r3, [r3, #28]
 8117fbc:	f003 0301 	and.w	r3, r3, #1
 8117fc0:	2b00      	cmp	r3, #0
 8117fc2:	d002      	beq.n	8117fca <xStreamBufferReceive+0x64>
	{
		xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
 8117fc4:	2304      	movs	r3, #4
 8117fc6:	627b      	str	r3, [r7, #36]	@ 0x24
 8117fc8:	e001      	b.n	8117fce <xStreamBufferReceive+0x68>
	}
	else
	{
		xBytesToStoreMessageLength = 0;
 8117fca:	2300      	movs	r3, #0
 8117fcc:	627b      	str	r3, [r7, #36]	@ 0x24
	}

	if( xTicksToWait != ( TickType_t ) 0 )
 8117fce:	683b      	ldr	r3, [r7, #0]
 8117fd0:	2b00      	cmp	r3, #0
 8117fd2:	d035      	beq.n	8118040 <xStreamBufferReceive+0xda>
	{
		/* Checking if there is data and clearing the notification state must be
		performed atomically. */
		taskENTER_CRITICAL();
 8117fd4:	f7fe fc20 	bl	8116818 <vPortEnterCritical>
		{
			xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 8117fd8:	6a38      	ldr	r0, [r7, #32]
 8117fda:	f000 f9f9 	bl	81183d0 <prvBytesInBuffer>
 8117fde:	62b8      	str	r0, [r7, #40]	@ 0x28
			/* If this function was invoked by a message buffer read then
			xBytesToStoreMessageLength holds the number of bytes used to hold
			the length of the next discrete message.  If this function was
			invoked by a stream buffer read then xBytesToStoreMessageLength will
			be 0. */
			if( xBytesAvailable <= xBytesToStoreMessageLength )
 8117fe0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8117fe2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8117fe4:	429a      	cmp	r2, r3
 8117fe6:	d817      	bhi.n	8118018 <xStreamBufferReceive+0xb2>
			{
				/* Clear notification state as going to wait for data. */
				( void ) xTaskNotifyStateClear( NULL );
 8117fe8:	2000      	movs	r0, #0
 8117fea:	f001 fbbb 	bl	8119764 <xTaskNotifyStateClear>

				/* Should only be one reader. */
				configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
 8117fee:	6a3b      	ldr	r3, [r7, #32]
 8117ff0:	691b      	ldr	r3, [r3, #16]
 8117ff2:	2b00      	cmp	r3, #0
 8117ff4:	d00b      	beq.n	811800e <xStreamBufferReceive+0xa8>
	__asm volatile
 8117ff6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8117ffa:	f383 8811 	msr	BASEPRI, r3
 8117ffe:	f3bf 8f6f 	isb	sy
 8118002:	f3bf 8f4f 	dsb	sy
 8118006:	617b      	str	r3, [r7, #20]
}
 8118008:	bf00      	nop
 811800a:	bf00      	nop
 811800c:	e7fd      	b.n	811800a <xStreamBufferReceive+0xa4>
				pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
 811800e:	f001 f8c5 	bl	811919c <xTaskGetCurrentTaskHandle>
 8118012:	4602      	mov	r2, r0
 8118014:	6a3b      	ldr	r3, [r7, #32]
 8118016:	611a      	str	r2, [r3, #16]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8118018:	f7fe fc30 	bl	811687c <vPortExitCritical>

		if( xBytesAvailable <= xBytesToStoreMessageLength )
 811801c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 811801e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8118020:	429a      	cmp	r2, r3
 8118022:	d811      	bhi.n	8118048 <xStreamBufferReceive+0xe2>
		{
			/* Wait for data to be available. */
			traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
			( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
 8118024:	683b      	ldr	r3, [r7, #0]
 8118026:	2200      	movs	r2, #0
 8118028:	2100      	movs	r1, #0
 811802a:	2000      	movs	r0, #0
 811802c:	f001 fa54 	bl	81194d8 <xTaskNotifyWait>
			pxStreamBuffer->xTaskWaitingToReceive = NULL;
 8118030:	6a3b      	ldr	r3, [r7, #32]
 8118032:	2200      	movs	r2, #0
 8118034:	611a      	str	r2, [r3, #16]

			/* Recheck the data available after blocking. */
			xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 8118036:	6a38      	ldr	r0, [r7, #32]
 8118038:	f000 f9ca 	bl	81183d0 <prvBytesInBuffer>
 811803c:	62b8      	str	r0, [r7, #40]	@ 0x28
 811803e:	e003      	b.n	8118048 <xStreamBufferReceive+0xe2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 8118040:	6a38      	ldr	r0, [r7, #32]
 8118042:	f000 f9c5 	bl	81183d0 <prvBytesInBuffer>
 8118046:	62b8      	str	r0, [r7, #40]	@ 0x28
	/* Whether receiving a discrete message (where xBytesToStoreMessageLength
	holds the number of bytes used to store the message length) or a stream of
	bytes (where xBytesToStoreMessageLength is zero), the number of bytes
	available must be greater than xBytesToStoreMessageLength to be able to
	read bytes from the buffer. */
	if( xBytesAvailable > xBytesToStoreMessageLength )
 8118048:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 811804a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811804c:	429a      	cmp	r2, r3
 811804e:	d90e      	bls.n	811806e <xStreamBufferReceive+0x108>
	{
		xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );
 8118050:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8118052:	9300      	str	r3, [sp, #0]
 8118054:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8118056:	687a      	ldr	r2, [r7, #4]
 8118058:	68b9      	ldr	r1, [r7, #8]
 811805a:	6a38      	ldr	r0, [r7, #32]
 811805c:	f000 f80c 	bl	8118078 <prvReadMessageFromBuffer>
 8118060:	62f8      	str	r0, [r7, #44]	@ 0x2c

		/* Was a task waiting for space in the buffer? */
		if( xReceivedLength != ( size_t ) 0 )
 8118062:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8118064:	2b00      	cmp	r3, #0
 8118066:	d002      	beq.n	811806e <xStreamBufferReceive+0x108>
		{
			traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
			sbRECEIVE_COMPLETED( pxStreamBuffer );
 8118068:	6a38      	ldr	r0, [r7, #32]
 811806a:	f7e9 f8cd 	bl	8101208 <vGenerateRemoteInterrupt>
	{
		traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
		mtCOVERAGE_TEST_MARKER();
	}

	return xReceivedLength;
 811806e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8118070:	4618      	mov	r0, r3
 8118072:	3730      	adds	r7, #48	@ 0x30
 8118074:	46bd      	mov	sp, r7
 8118076:	bd80      	pop	{r7, pc}

08118078 <prvReadMessageFromBuffer>:
static size_t prvReadMessageFromBuffer( StreamBuffer_t *pxStreamBuffer,
										void *pvRxData,
										size_t xBufferLengthBytes,
										size_t xBytesAvailable,
										size_t xBytesToStoreMessageLength )
{
 8118078:	b580      	push	{r7, lr}
 811807a:	b088      	sub	sp, #32
 811807c:	af00      	add	r7, sp, #0
 811807e:	60f8      	str	r0, [r7, #12]
 8118080:	60b9      	str	r1, [r7, #8]
 8118082:	607a      	str	r2, [r7, #4]
 8118084:	603b      	str	r3, [r7, #0]
size_t xOriginalTail, xReceivedLength, xNextMessageLength;
configMESSAGE_BUFFER_LENGTH_TYPE xTempNextMessageLength;

	if( xBytesToStoreMessageLength != ( size_t ) 0 )
 8118086:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8118088:	2b00      	cmp	r3, #0
 811808a:	d019      	beq.n	81180c0 <prvReadMessageFromBuffer+0x48>
	{
		/* A discrete message is being received.  First receive the length
		of the message.  A copy of the tail is stored so the buffer can be
		returned to its prior state if the length of the message is too
		large for the provided buffer. */
		xOriginalTail = pxStreamBuffer->xTail;
 811808c:	68fb      	ldr	r3, [r7, #12]
 811808e:	681b      	ldr	r3, [r3, #0]
 8118090:	61bb      	str	r3, [r7, #24]
		( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempNextMessageLength, xBytesToStoreMessageLength, xBytesAvailable );
 8118092:	f107 0110 	add.w	r1, r7, #16
 8118096:	683b      	ldr	r3, [r7, #0]
 8118098:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 811809a:	68f8      	ldr	r0, [r7, #12]
 811809c:	f000 f91b 	bl	81182d6 <prvReadBytesFromBuffer>
		xNextMessageLength = ( size_t ) xTempNextMessageLength;
 81180a0:	693b      	ldr	r3, [r7, #16]
 81180a2:	61fb      	str	r3, [r7, #28]

		/* Reduce the number of bytes available by the number of bytes just
		read out. */
		xBytesAvailable -= xBytesToStoreMessageLength;
 81180a4:	683a      	ldr	r2, [r7, #0]
 81180a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81180a8:	1ad3      	subs	r3, r2, r3
 81180aa:	603b      	str	r3, [r7, #0]

		/* Check there is enough space in the buffer provided by the
		user. */
		if( xNextMessageLength > xBufferLengthBytes )
 81180ac:	69fa      	ldr	r2, [r7, #28]
 81180ae:	687b      	ldr	r3, [r7, #4]
 81180b0:	429a      	cmp	r2, r3
 81180b2:	d907      	bls.n	81180c4 <prvReadMessageFromBuffer+0x4c>
		{
			/* The user has provided insufficient space to read the message
			so return the buffer to its previous state (so the length of
			the message is in the buffer again). */
			pxStreamBuffer->xTail = xOriginalTail;
 81180b4:	68fb      	ldr	r3, [r7, #12]
 81180b6:	69ba      	ldr	r2, [r7, #24]
 81180b8:	601a      	str	r2, [r3, #0]
			xNextMessageLength = 0;
 81180ba:	2300      	movs	r3, #0
 81180bc:	61fb      	str	r3, [r7, #28]
 81180be:	e001      	b.n	81180c4 <prvReadMessageFromBuffer+0x4c>
	}
	else
	{
		/* A stream of bytes is being received (as opposed to a discrete
		message), so read as many bytes as possible. */
		xNextMessageLength = xBufferLengthBytes;
 81180c0:	687b      	ldr	r3, [r7, #4]
 81180c2:	61fb      	str	r3, [r7, #28]
	}

	/* Read the actual data. */
	xReceivedLength = prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) pvRxData, xNextMessageLength, xBytesAvailable ); /*lint !e9079 Data storage area is implemented as uint8_t array for ease of sizing, indexing and alignment. */
 81180c4:	683b      	ldr	r3, [r7, #0]
 81180c6:	69fa      	ldr	r2, [r7, #28]
 81180c8:	68b9      	ldr	r1, [r7, #8]
 81180ca:	68f8      	ldr	r0, [r7, #12]
 81180cc:	f000 f903 	bl	81182d6 <prvReadBytesFromBuffer>
 81180d0:	6178      	str	r0, [r7, #20]

	return xReceivedLength;
 81180d2:	697b      	ldr	r3, [r7, #20]
}
 81180d4:	4618      	mov	r0, r3
 81180d6:	3720      	adds	r7, #32
 81180d8:	46bd      	mov	sp, r7
 81180da:	bd80      	pop	{r7, pc}

081180dc <xStreamBufferSendCompletedFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xStreamBufferSendCompletedFromISR( StreamBufferHandle_t xStreamBuffer, BaseType_t *pxHigherPriorityTaskWoken )
{
 81180dc:	b580      	push	{r7, lr}
 81180de:	b08c      	sub	sp, #48	@ 0x30
 81180e0:	af02      	add	r7, sp, #8
 81180e2:	6078      	str	r0, [r7, #4]
 81180e4:	6039      	str	r1, [r7, #0]
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 81180e6:	687b      	ldr	r3, [r7, #4]
 81180e8:	623b      	str	r3, [r7, #32]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;

	configASSERT( pxStreamBuffer );
 81180ea:	6a3b      	ldr	r3, [r7, #32]
 81180ec:	2b00      	cmp	r3, #0
 81180ee:	d10b      	bne.n	8118108 <xStreamBufferSendCompletedFromISR+0x2c>
	__asm volatile
 81180f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81180f4:	f383 8811 	msr	BASEPRI, r3
 81180f8:	f3bf 8f6f 	isb	sy
 81180fc:	f3bf 8f4f 	dsb	sy
 8118100:	61bb      	str	r3, [r7, #24]
}
 8118102:	bf00      	nop
 8118104:	bf00      	nop
 8118106:	e7fd      	b.n	8118104 <xStreamBufferSendCompletedFromISR+0x28>
	__asm volatile
 8118108:	f3ef 8211 	mrs	r2, BASEPRI
 811810c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8118110:	f383 8811 	msr	BASEPRI, r3
 8118114:	f3bf 8f6f 	isb	sy
 8118118:	f3bf 8f4f 	dsb	sy
 811811c:	617a      	str	r2, [r7, #20]
 811811e:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8118120:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = ( UBaseType_t ) portSET_INTERRUPT_MASK_FROM_ISR();
 8118122:	61fb      	str	r3, [r7, #28]
	{
		if( ( pxStreamBuffer )->xTaskWaitingToReceive != NULL )
 8118124:	6a3b      	ldr	r3, [r7, #32]
 8118126:	691b      	ldr	r3, [r3, #16]
 8118128:	2b00      	cmp	r3, #0
 811812a:	d00e      	beq.n	811814a <xStreamBufferSendCompletedFromISR+0x6e>
		{
			( void ) xTaskNotifyFromISR( ( pxStreamBuffer )->xTaskWaitingToReceive,
 811812c:	6a3b      	ldr	r3, [r7, #32]
 811812e:	6918      	ldr	r0, [r3, #16]
 8118130:	683b      	ldr	r3, [r7, #0]
 8118132:	9300      	str	r3, [sp, #0]
 8118134:	2300      	movs	r3, #0
 8118136:	2200      	movs	r2, #0
 8118138:	2100      	movs	r1, #0
 811813a:	f001 fa2d 	bl	8119598 <xTaskGenericNotifyFromISR>
										 ( uint32_t ) 0,
										 eNoAction,
										 pxHigherPriorityTaskWoken );
			( pxStreamBuffer )->xTaskWaitingToReceive = NULL;
 811813e:	6a3b      	ldr	r3, [r7, #32]
 8118140:	2200      	movs	r2, #0
 8118142:	611a      	str	r2, [r3, #16]
			xReturn = pdTRUE;
 8118144:	2301      	movs	r3, #1
 8118146:	627b      	str	r3, [r7, #36]	@ 0x24
 8118148:	e001      	b.n	811814e <xStreamBufferSendCompletedFromISR+0x72>
		}
		else
		{
			xReturn = pdFALSE;
 811814a:	2300      	movs	r3, #0
 811814c:	627b      	str	r3, [r7, #36]	@ 0x24
 811814e:	69fb      	ldr	r3, [r7, #28]
 8118150:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8118152:	68fb      	ldr	r3, [r7, #12]
 8118154:	f383 8811 	msr	BASEPRI, r3
}
 8118158:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 811815a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 811815c:	4618      	mov	r0, r3
 811815e:	3728      	adds	r7, #40	@ 0x28
 8118160:	46bd      	mov	sp, r7
 8118162:	bd80      	pop	{r7, pc}

08118164 <xStreamBufferReceiveCompletedFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xStreamBufferReceiveCompletedFromISR( StreamBufferHandle_t xStreamBuffer, BaseType_t *pxHigherPriorityTaskWoken )
{
 8118164:	b580      	push	{r7, lr}
 8118166:	b08c      	sub	sp, #48	@ 0x30
 8118168:	af02      	add	r7, sp, #8
 811816a:	6078      	str	r0, [r7, #4]
 811816c:	6039      	str	r1, [r7, #0]
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 811816e:	687b      	ldr	r3, [r7, #4]
 8118170:	623b      	str	r3, [r7, #32]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;

	configASSERT( pxStreamBuffer );
 8118172:	6a3b      	ldr	r3, [r7, #32]
 8118174:	2b00      	cmp	r3, #0
 8118176:	d10b      	bne.n	8118190 <xStreamBufferReceiveCompletedFromISR+0x2c>
	__asm volatile
 8118178:	f04f 0350 	mov.w	r3, #80	@ 0x50
 811817c:	f383 8811 	msr	BASEPRI, r3
 8118180:	f3bf 8f6f 	isb	sy
 8118184:	f3bf 8f4f 	dsb	sy
 8118188:	61bb      	str	r3, [r7, #24]
}
 811818a:	bf00      	nop
 811818c:	bf00      	nop
 811818e:	e7fd      	b.n	811818c <xStreamBufferReceiveCompletedFromISR+0x28>
	__asm volatile
 8118190:	f3ef 8211 	mrs	r2, BASEPRI
 8118194:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8118198:	f383 8811 	msr	BASEPRI, r3
 811819c:	f3bf 8f6f 	isb	sy
 81181a0:	f3bf 8f4f 	dsb	sy
 81181a4:	617a      	str	r2, [r7, #20]
 81181a6:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 81181a8:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = ( UBaseType_t ) portSET_INTERRUPT_MASK_FROM_ISR();
 81181aa:	61fb      	str	r3, [r7, #28]
	{
		if( ( pxStreamBuffer )->xTaskWaitingToSend != NULL )
 81181ac:	6a3b      	ldr	r3, [r7, #32]
 81181ae:	695b      	ldr	r3, [r3, #20]
 81181b0:	2b00      	cmp	r3, #0
 81181b2:	d00e      	beq.n	81181d2 <xStreamBufferReceiveCompletedFromISR+0x6e>
		{
			( void ) xTaskNotifyFromISR( ( pxStreamBuffer )->xTaskWaitingToSend,
 81181b4:	6a3b      	ldr	r3, [r7, #32]
 81181b6:	6958      	ldr	r0, [r3, #20]
 81181b8:	683b      	ldr	r3, [r7, #0]
 81181ba:	9300      	str	r3, [sp, #0]
 81181bc:	2300      	movs	r3, #0
 81181be:	2200      	movs	r2, #0
 81181c0:	2100      	movs	r1, #0
 81181c2:	f001 f9e9 	bl	8119598 <xTaskGenericNotifyFromISR>
										 ( uint32_t ) 0,
										 eNoAction,
										 pxHigherPriorityTaskWoken );
			( pxStreamBuffer )->xTaskWaitingToSend = NULL;
 81181c6:	6a3b      	ldr	r3, [r7, #32]
 81181c8:	2200      	movs	r2, #0
 81181ca:	615a      	str	r2, [r3, #20]
			xReturn = pdTRUE;
 81181cc:	2301      	movs	r3, #1
 81181ce:	627b      	str	r3, [r7, #36]	@ 0x24
 81181d0:	e001      	b.n	81181d6 <xStreamBufferReceiveCompletedFromISR+0x72>
		}
		else
		{
			xReturn = pdFALSE;
 81181d2:	2300      	movs	r3, #0
 81181d4:	627b      	str	r3, [r7, #36]	@ 0x24
 81181d6:	69fb      	ldr	r3, [r7, #28]
 81181d8:	60fb      	str	r3, [r7, #12]
	__asm volatile
 81181da:	68fb      	ldr	r3, [r7, #12]
 81181dc:	f383 8811 	msr	BASEPRI, r3
}
 81181e0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 81181e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 81181e4:	4618      	mov	r0, r3
 81181e6:	3728      	adds	r7, #40	@ 0x28
 81181e8:	46bd      	mov	sp, r7
 81181ea:	bd80      	pop	{r7, pc}

081181ec <prvWriteBytesToBuffer>:
/*-----------------------------------------------------------*/

static size_t prvWriteBytesToBuffer( StreamBuffer_t * const pxStreamBuffer, const uint8_t *pucData, size_t xCount )
{
 81181ec:	b580      	push	{r7, lr}
 81181ee:	b08a      	sub	sp, #40	@ 0x28
 81181f0:	af00      	add	r7, sp, #0
 81181f2:	60f8      	str	r0, [r7, #12]
 81181f4:	60b9      	str	r1, [r7, #8]
 81181f6:	607a      	str	r2, [r7, #4]
size_t xNextHead, xFirstLength;

	configASSERT( xCount > ( size_t ) 0 );
 81181f8:	687b      	ldr	r3, [r7, #4]
 81181fa:	2b00      	cmp	r3, #0
 81181fc:	d10b      	bne.n	8118216 <prvWriteBytesToBuffer+0x2a>
	__asm volatile
 81181fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8118202:	f383 8811 	msr	BASEPRI, r3
 8118206:	f3bf 8f6f 	isb	sy
 811820a:	f3bf 8f4f 	dsb	sy
 811820e:	61fb      	str	r3, [r7, #28]
}
 8118210:	bf00      	nop
 8118212:	bf00      	nop
 8118214:	e7fd      	b.n	8118212 <prvWriteBytesToBuffer+0x26>

	xNextHead = pxStreamBuffer->xHead;
 8118216:	68fb      	ldr	r3, [r7, #12]
 8118218:	685b      	ldr	r3, [r3, #4]
 811821a:	627b      	str	r3, [r7, #36]	@ 0x24

	/* Calculate the number of bytes that can be added in the first write -
	which may be less than the total number of bytes that need to be added if
	the buffer will wrap back to the beginning. */
	xFirstLength = configMIN( pxStreamBuffer->xLength - xNextHead, xCount );
 811821c:	68fb      	ldr	r3, [r7, #12]
 811821e:	689a      	ldr	r2, [r3, #8]
 8118220:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8118222:	1ad3      	subs	r3, r2, r3
 8118224:	687a      	ldr	r2, [r7, #4]
 8118226:	4293      	cmp	r3, r2
 8118228:	bf28      	it	cs
 811822a:	4613      	movcs	r3, r2
 811822c:	623b      	str	r3, [r7, #32]

	/* Write as many bytes as can be written in the first write. */
	configASSERT( ( xNextHead + xFirstLength ) <= pxStreamBuffer->xLength );
 811822e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8118230:	6a3b      	ldr	r3, [r7, #32]
 8118232:	441a      	add	r2, r3
 8118234:	68fb      	ldr	r3, [r7, #12]
 8118236:	689b      	ldr	r3, [r3, #8]
 8118238:	429a      	cmp	r2, r3
 811823a:	d90b      	bls.n	8118254 <prvWriteBytesToBuffer+0x68>
	__asm volatile
 811823c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8118240:	f383 8811 	msr	BASEPRI, r3
 8118244:	f3bf 8f6f 	isb	sy
 8118248:	f3bf 8f4f 	dsb	sy
 811824c:	61bb      	str	r3, [r7, #24]
}
 811824e:	bf00      	nop
 8118250:	bf00      	nop
 8118252:	e7fd      	b.n	8118250 <prvWriteBytesToBuffer+0x64>
	( void ) memcpy( ( void* ) ( &( pxStreamBuffer->pucBuffer[ xNextHead ] ) ), ( const void * ) pucData, xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 8118254:	68fb      	ldr	r3, [r7, #12]
 8118256:	699a      	ldr	r2, [r3, #24]
 8118258:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811825a:	4413      	add	r3, r2
 811825c:	6a3a      	ldr	r2, [r7, #32]
 811825e:	68b9      	ldr	r1, [r7, #8]
 8118260:	4618      	mov	r0, r3
 8118262:	f00e fe6a 	bl	8126f3a <memcpy>

	/* If the number of bytes written was less than the number that could be
	written in the first write... */
	if( xCount > xFirstLength )
 8118266:	687a      	ldr	r2, [r7, #4]
 8118268:	6a3b      	ldr	r3, [r7, #32]
 811826a:	429a      	cmp	r2, r3
 811826c:	d91d      	bls.n	81182aa <prvWriteBytesToBuffer+0xbe>
	{
		/* ...then write the remaining bytes to the start of the buffer. */
		configASSERT( ( xCount - xFirstLength ) <= pxStreamBuffer->xLength );
 811826e:	687a      	ldr	r2, [r7, #4]
 8118270:	6a3b      	ldr	r3, [r7, #32]
 8118272:	1ad2      	subs	r2, r2, r3
 8118274:	68fb      	ldr	r3, [r7, #12]
 8118276:	689b      	ldr	r3, [r3, #8]
 8118278:	429a      	cmp	r2, r3
 811827a:	d90b      	bls.n	8118294 <prvWriteBytesToBuffer+0xa8>
	__asm volatile
 811827c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8118280:	f383 8811 	msr	BASEPRI, r3
 8118284:	f3bf 8f6f 	isb	sy
 8118288:	f3bf 8f4f 	dsb	sy
 811828c:	617b      	str	r3, [r7, #20]
}
 811828e:	bf00      	nop
 8118290:	bf00      	nop
 8118292:	e7fd      	b.n	8118290 <prvWriteBytesToBuffer+0xa4>
		( void ) memcpy( ( void * ) pxStreamBuffer->pucBuffer, ( const void * ) &( pucData[ xFirstLength ] ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 8118294:	68fb      	ldr	r3, [r7, #12]
 8118296:	6998      	ldr	r0, [r3, #24]
 8118298:	68ba      	ldr	r2, [r7, #8]
 811829a:	6a3b      	ldr	r3, [r7, #32]
 811829c:	18d1      	adds	r1, r2, r3
 811829e:	687a      	ldr	r2, [r7, #4]
 81182a0:	6a3b      	ldr	r3, [r7, #32]
 81182a2:	1ad3      	subs	r3, r2, r3
 81182a4:	461a      	mov	r2, r3
 81182a6:	f00e fe48 	bl	8126f3a <memcpy>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	xNextHead += xCount;
 81182aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 81182ac:	687b      	ldr	r3, [r7, #4]
 81182ae:	4413      	add	r3, r2
 81182b0:	627b      	str	r3, [r7, #36]	@ 0x24
	if( xNextHead >= pxStreamBuffer->xLength )
 81182b2:	68fb      	ldr	r3, [r7, #12]
 81182b4:	689b      	ldr	r3, [r3, #8]
 81182b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 81182b8:	429a      	cmp	r2, r3
 81182ba:	d304      	bcc.n	81182c6 <prvWriteBytesToBuffer+0xda>
	{
		xNextHead -= pxStreamBuffer->xLength;
 81182bc:	68fb      	ldr	r3, [r7, #12]
 81182be:	689b      	ldr	r3, [r3, #8]
 81182c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 81182c2:	1ad3      	subs	r3, r2, r3
 81182c4:	627b      	str	r3, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxStreamBuffer->xHead = xNextHead;
 81182c6:	68fb      	ldr	r3, [r7, #12]
 81182c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 81182ca:	605a      	str	r2, [r3, #4]

	return xCount;
 81182cc:	687b      	ldr	r3, [r7, #4]
}
 81182ce:	4618      	mov	r0, r3
 81182d0:	3728      	adds	r7, #40	@ 0x28
 81182d2:	46bd      	mov	sp, r7
 81182d4:	bd80      	pop	{r7, pc}

081182d6 <prvReadBytesFromBuffer>:
/*-----------------------------------------------------------*/

static size_t prvReadBytesFromBuffer( StreamBuffer_t *pxStreamBuffer, uint8_t *pucData, size_t xMaxCount, size_t xBytesAvailable )
{
 81182d6:	b580      	push	{r7, lr}
 81182d8:	b08a      	sub	sp, #40	@ 0x28
 81182da:	af00      	add	r7, sp, #0
 81182dc:	60f8      	str	r0, [r7, #12]
 81182de:	60b9      	str	r1, [r7, #8]
 81182e0:	607a      	str	r2, [r7, #4]
 81182e2:	603b      	str	r3, [r7, #0]
size_t xCount, xFirstLength, xNextTail;

	/* Use the minimum of the wanted bytes and the available bytes. */
	xCount = configMIN( xBytesAvailable, xMaxCount );
 81182e4:	687a      	ldr	r2, [r7, #4]
 81182e6:	683b      	ldr	r3, [r7, #0]
 81182e8:	4293      	cmp	r3, r2
 81182ea:	bf28      	it	cs
 81182ec:	4613      	movcs	r3, r2
 81182ee:	623b      	str	r3, [r7, #32]

	if( xCount > ( size_t ) 0 )
 81182f0:	6a3b      	ldr	r3, [r7, #32]
 81182f2:	2b00      	cmp	r3, #0
 81182f4:	d067      	beq.n	81183c6 <prvReadBytesFromBuffer+0xf0>
	{
		xNextTail = pxStreamBuffer->xTail;
 81182f6:	68fb      	ldr	r3, [r7, #12]
 81182f8:	681b      	ldr	r3, [r3, #0]
 81182fa:	627b      	str	r3, [r7, #36]	@ 0x24

		/* Calculate the number of bytes that can be read - which may be
		less than the number wanted if the data wraps around to the start of
		the buffer. */
		xFirstLength = configMIN( pxStreamBuffer->xLength - xNextTail, xCount );
 81182fc:	68fb      	ldr	r3, [r7, #12]
 81182fe:	689a      	ldr	r2, [r3, #8]
 8118300:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8118302:	1ad3      	subs	r3, r2, r3
 8118304:	6a3a      	ldr	r2, [r7, #32]
 8118306:	4293      	cmp	r3, r2
 8118308:	bf28      	it	cs
 811830a:	4613      	movcs	r3, r2
 811830c:	61fb      	str	r3, [r7, #28]

		/* Obtain the number of bytes it is possible to obtain in the first
		read.  Asserts check bounds of read and write. */
		configASSERT( xFirstLength <= xMaxCount );
 811830e:	69fa      	ldr	r2, [r7, #28]
 8118310:	687b      	ldr	r3, [r7, #4]
 8118312:	429a      	cmp	r2, r3
 8118314:	d90b      	bls.n	811832e <prvReadBytesFromBuffer+0x58>
	__asm volatile
 8118316:	f04f 0350 	mov.w	r3, #80	@ 0x50
 811831a:	f383 8811 	msr	BASEPRI, r3
 811831e:	f3bf 8f6f 	isb	sy
 8118322:	f3bf 8f4f 	dsb	sy
 8118326:	61bb      	str	r3, [r7, #24]
}
 8118328:	bf00      	nop
 811832a:	bf00      	nop
 811832c:	e7fd      	b.n	811832a <prvReadBytesFromBuffer+0x54>
		configASSERT( ( xNextTail + xFirstLength ) <= pxStreamBuffer->xLength );
 811832e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8118330:	69fb      	ldr	r3, [r7, #28]
 8118332:	441a      	add	r2, r3
 8118334:	68fb      	ldr	r3, [r7, #12]
 8118336:	689b      	ldr	r3, [r3, #8]
 8118338:	429a      	cmp	r2, r3
 811833a:	d90b      	bls.n	8118354 <prvReadBytesFromBuffer+0x7e>
	__asm volatile
 811833c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8118340:	f383 8811 	msr	BASEPRI, r3
 8118344:	f3bf 8f6f 	isb	sy
 8118348:	f3bf 8f4f 	dsb	sy
 811834c:	617b      	str	r3, [r7, #20]
}
 811834e:	bf00      	nop
 8118350:	bf00      	nop
 8118352:	e7fd      	b.n	8118350 <prvReadBytesFromBuffer+0x7a>
		( void ) memcpy( ( void * ) pucData, ( const void * ) &( pxStreamBuffer->pucBuffer[ xNextTail ] ), xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 8118354:	68fb      	ldr	r3, [r7, #12]
 8118356:	699a      	ldr	r2, [r3, #24]
 8118358:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811835a:	4413      	add	r3, r2
 811835c:	69fa      	ldr	r2, [r7, #28]
 811835e:	4619      	mov	r1, r3
 8118360:	68b8      	ldr	r0, [r7, #8]
 8118362:	f00e fdea 	bl	8126f3a <memcpy>

		/* If the total number of wanted bytes is greater than the number
		that could be read in the first read... */
		if( xCount > xFirstLength )
 8118366:	6a3a      	ldr	r2, [r7, #32]
 8118368:	69fb      	ldr	r3, [r7, #28]
 811836a:	429a      	cmp	r2, r3
 811836c:	d91a      	bls.n	81183a4 <prvReadBytesFromBuffer+0xce>
		{
			/*...then read the remaining bytes from the start of the buffer. */
			configASSERT( xCount <= xMaxCount );
 811836e:	6a3a      	ldr	r2, [r7, #32]
 8118370:	687b      	ldr	r3, [r7, #4]
 8118372:	429a      	cmp	r2, r3
 8118374:	d90b      	bls.n	811838e <prvReadBytesFromBuffer+0xb8>
	__asm volatile
 8118376:	f04f 0350 	mov.w	r3, #80	@ 0x50
 811837a:	f383 8811 	msr	BASEPRI, r3
 811837e:	f3bf 8f6f 	isb	sy
 8118382:	f3bf 8f4f 	dsb	sy
 8118386:	613b      	str	r3, [r7, #16]
}
 8118388:	bf00      	nop
 811838a:	bf00      	nop
 811838c:	e7fd      	b.n	811838a <prvReadBytesFromBuffer+0xb4>
			( void ) memcpy( ( void * ) &( pucData[ xFirstLength ] ), ( void * ) ( pxStreamBuffer->pucBuffer ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 811838e:	68ba      	ldr	r2, [r7, #8]
 8118390:	69fb      	ldr	r3, [r7, #28]
 8118392:	18d0      	adds	r0, r2, r3
 8118394:	68fb      	ldr	r3, [r7, #12]
 8118396:	6999      	ldr	r1, [r3, #24]
 8118398:	6a3a      	ldr	r2, [r7, #32]
 811839a:	69fb      	ldr	r3, [r7, #28]
 811839c:	1ad3      	subs	r3, r2, r3
 811839e:	461a      	mov	r2, r3
 81183a0:	f00e fdcb 	bl	8126f3a <memcpy>
			mtCOVERAGE_TEST_MARKER();
		}

		/* Move the tail pointer to effectively remove the data read from
		the buffer. */
		xNextTail += xCount;
 81183a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 81183a6:	6a3b      	ldr	r3, [r7, #32]
 81183a8:	4413      	add	r3, r2
 81183aa:	627b      	str	r3, [r7, #36]	@ 0x24

		if( xNextTail >= pxStreamBuffer->xLength )
 81183ac:	68fb      	ldr	r3, [r7, #12]
 81183ae:	689b      	ldr	r3, [r3, #8]
 81183b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 81183b2:	429a      	cmp	r2, r3
 81183b4:	d304      	bcc.n	81183c0 <prvReadBytesFromBuffer+0xea>
		{
			xNextTail -= pxStreamBuffer->xLength;
 81183b6:	68fb      	ldr	r3, [r7, #12]
 81183b8:	689b      	ldr	r3, [r3, #8]
 81183ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 81183bc:	1ad3      	subs	r3, r2, r3
 81183be:	627b      	str	r3, [r7, #36]	@ 0x24
		}

		pxStreamBuffer->xTail = xNextTail;
 81183c0:	68fb      	ldr	r3, [r7, #12]
 81183c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 81183c4:	601a      	str	r2, [r3, #0]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xCount;
 81183c6:	6a3b      	ldr	r3, [r7, #32]
}
 81183c8:	4618      	mov	r0, r3
 81183ca:	3728      	adds	r7, #40	@ 0x28
 81183cc:	46bd      	mov	sp, r7
 81183ce:	bd80      	pop	{r7, pc}

081183d0 <prvBytesInBuffer>:
/*-----------------------------------------------------------*/

static size_t prvBytesInBuffer( const StreamBuffer_t * const pxStreamBuffer )
{
 81183d0:	b480      	push	{r7}
 81183d2:	b085      	sub	sp, #20
 81183d4:	af00      	add	r7, sp, #0
 81183d6:	6078      	str	r0, [r7, #4]
/* Returns the distance between xTail and xHead. */
size_t xCount;

	xCount = pxStreamBuffer->xLength + pxStreamBuffer->xHead;
 81183d8:	687b      	ldr	r3, [r7, #4]
 81183da:	689a      	ldr	r2, [r3, #8]
 81183dc:	687b      	ldr	r3, [r7, #4]
 81183de:	685b      	ldr	r3, [r3, #4]
 81183e0:	4413      	add	r3, r2
 81183e2:	60fb      	str	r3, [r7, #12]
	xCount -= pxStreamBuffer->xTail;
 81183e4:	687b      	ldr	r3, [r7, #4]
 81183e6:	681b      	ldr	r3, [r3, #0]
 81183e8:	68fa      	ldr	r2, [r7, #12]
 81183ea:	1ad3      	subs	r3, r2, r3
 81183ec:	60fb      	str	r3, [r7, #12]
	if ( xCount >= pxStreamBuffer->xLength )
 81183ee:	687b      	ldr	r3, [r7, #4]
 81183f0:	689b      	ldr	r3, [r3, #8]
 81183f2:	68fa      	ldr	r2, [r7, #12]
 81183f4:	429a      	cmp	r2, r3
 81183f6:	d304      	bcc.n	8118402 <prvBytesInBuffer+0x32>
	{
		xCount -= pxStreamBuffer->xLength;
 81183f8:	687b      	ldr	r3, [r7, #4]
 81183fa:	689b      	ldr	r3, [r3, #8]
 81183fc:	68fa      	ldr	r2, [r7, #12]
 81183fe:	1ad3      	subs	r3, r2, r3
 8118400:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xCount;
 8118402:	68fb      	ldr	r3, [r7, #12]
}
 8118404:	4618      	mov	r0, r3
 8118406:	3714      	adds	r7, #20
 8118408:	46bd      	mov	sp, r7
 811840a:	f85d 7b04 	ldr.w	r7, [sp], #4
 811840e:	4770      	bx	lr

08118410 <prvInitialiseNewStreamBuffer>:
static void prvInitialiseNewStreamBuffer( StreamBuffer_t * const pxStreamBuffer,
										  uint8_t * const pucBuffer,
										  size_t xBufferSizeBytes,
										  size_t xTriggerLevelBytes,
										  uint8_t ucFlags )
{
 8118410:	b580      	push	{r7, lr}
 8118412:	b086      	sub	sp, #24
 8118414:	af00      	add	r7, sp, #0
 8118416:	60f8      	str	r0, [r7, #12]
 8118418:	60b9      	str	r1, [r7, #8]
 811841a:	607a      	str	r2, [r7, #4]
 811841c:	603b      	str	r3, [r7, #0]
	#if( configASSERT_DEFINED == 1 )
	{
		/* The value written just has to be identifiable when looking at the
		memory.  Don't use 0xA5 as that is the stack fill value and could
		result in confusion as to what is actually being observed. */
		const BaseType_t xWriteValue = 0x55;
 811841e:	2355      	movs	r3, #85	@ 0x55
 8118420:	617b      	str	r3, [r7, #20]
		configASSERT( memset( pucBuffer, ( int ) xWriteValue, xBufferSizeBytes ) == pucBuffer );
 8118422:	687a      	ldr	r2, [r7, #4]
 8118424:	6979      	ldr	r1, [r7, #20]
 8118426:	68b8      	ldr	r0, [r7, #8]
 8118428:	f00e fc38 	bl	8126c9c <memset>
 811842c:	4602      	mov	r2, r0
 811842e:	68bb      	ldr	r3, [r7, #8]
 8118430:	4293      	cmp	r3, r2
 8118432:	d00b      	beq.n	811844c <prvInitialiseNewStreamBuffer+0x3c>
	__asm volatile
 8118434:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8118438:	f383 8811 	msr	BASEPRI, r3
 811843c:	f3bf 8f6f 	isb	sy
 8118440:	f3bf 8f4f 	dsb	sy
 8118444:	613b      	str	r3, [r7, #16]
}
 8118446:	bf00      	nop
 8118448:	bf00      	nop
 811844a:	e7fd      	b.n	8118448 <prvInitialiseNewStreamBuffer+0x38>
	} /*lint !e529 !e438 xWriteValue is only used if configASSERT() is defined. */
	#endif

	( void ) memset( ( void * ) pxStreamBuffer, 0x00, sizeof( StreamBuffer_t ) ); /*lint !e9087 memset() requires void *. */
 811844c:	2224      	movs	r2, #36	@ 0x24
 811844e:	2100      	movs	r1, #0
 8118450:	68f8      	ldr	r0, [r7, #12]
 8118452:	f00e fc23 	bl	8126c9c <memset>
	pxStreamBuffer->pucBuffer = pucBuffer;
 8118456:	68fb      	ldr	r3, [r7, #12]
 8118458:	68ba      	ldr	r2, [r7, #8]
 811845a:	619a      	str	r2, [r3, #24]
	pxStreamBuffer->xLength = xBufferSizeBytes;
 811845c:	68fb      	ldr	r3, [r7, #12]
 811845e:	687a      	ldr	r2, [r7, #4]
 8118460:	609a      	str	r2, [r3, #8]
	pxStreamBuffer->xTriggerLevelBytes = xTriggerLevelBytes;
 8118462:	68fb      	ldr	r3, [r7, #12]
 8118464:	683a      	ldr	r2, [r7, #0]
 8118466:	60da      	str	r2, [r3, #12]
	pxStreamBuffer->ucFlags = ucFlags;
 8118468:	68fb      	ldr	r3, [r7, #12]
 811846a:	f897 2020 	ldrb.w	r2, [r7, #32]
 811846e:	771a      	strb	r2, [r3, #28]
}
 8118470:	bf00      	nop
 8118472:	3718      	adds	r7, #24
 8118474:	46bd      	mov	sp, r7
 8118476:	bd80      	pop	{r7, pc}

08118478 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8118478:	b580      	push	{r7, lr}
 811847a:	b08e      	sub	sp, #56	@ 0x38
 811847c:	af04      	add	r7, sp, #16
 811847e:	60f8      	str	r0, [r7, #12]
 8118480:	60b9      	str	r1, [r7, #8]
 8118482:	607a      	str	r2, [r7, #4]
 8118484:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8118486:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8118488:	2b00      	cmp	r3, #0
 811848a:	d10b      	bne.n	81184a4 <xTaskCreateStatic+0x2c>
	__asm volatile
 811848c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8118490:	f383 8811 	msr	BASEPRI, r3
 8118494:	f3bf 8f6f 	isb	sy
 8118498:	f3bf 8f4f 	dsb	sy
 811849c:	623b      	str	r3, [r7, #32]
}
 811849e:	bf00      	nop
 81184a0:	bf00      	nop
 81184a2:	e7fd      	b.n	81184a0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 81184a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81184a6:	2b00      	cmp	r3, #0
 81184a8:	d10b      	bne.n	81184c2 <xTaskCreateStatic+0x4a>
	__asm volatile
 81184aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81184ae:	f383 8811 	msr	BASEPRI, r3
 81184b2:	f3bf 8f6f 	isb	sy
 81184b6:	f3bf 8f4f 	dsb	sy
 81184ba:	61fb      	str	r3, [r7, #28]
}
 81184bc:	bf00      	nop
 81184be:	bf00      	nop
 81184c0:	e7fd      	b.n	81184be <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 81184c2:	23a8      	movs	r3, #168	@ 0xa8
 81184c4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 81184c6:	693b      	ldr	r3, [r7, #16]
 81184c8:	2ba8      	cmp	r3, #168	@ 0xa8
 81184ca:	d00b      	beq.n	81184e4 <xTaskCreateStatic+0x6c>
	__asm volatile
 81184cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81184d0:	f383 8811 	msr	BASEPRI, r3
 81184d4:	f3bf 8f6f 	isb	sy
 81184d8:	f3bf 8f4f 	dsb	sy
 81184dc:	61bb      	str	r3, [r7, #24]
}
 81184de:	bf00      	nop
 81184e0:	bf00      	nop
 81184e2:	e7fd      	b.n	81184e0 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 81184e4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 81184e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81184e8:	2b00      	cmp	r3, #0
 81184ea:	d01e      	beq.n	811852a <xTaskCreateStatic+0xb2>
 81184ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81184ee:	2b00      	cmp	r3, #0
 81184f0:	d01b      	beq.n	811852a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 81184f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81184f4:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 81184f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81184f8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 81184fa:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 81184fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81184fe:	2202      	movs	r2, #2
 8118500:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8118504:	2300      	movs	r3, #0
 8118506:	9303      	str	r3, [sp, #12]
 8118508:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811850a:	9302      	str	r3, [sp, #8]
 811850c:	f107 0314 	add.w	r3, r7, #20
 8118510:	9301      	str	r3, [sp, #4]
 8118512:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8118514:	9300      	str	r3, [sp, #0]
 8118516:	683b      	ldr	r3, [r7, #0]
 8118518:	687a      	ldr	r2, [r7, #4]
 811851a:	68b9      	ldr	r1, [r7, #8]
 811851c:	68f8      	ldr	r0, [r7, #12]
 811851e:	f000 f851 	bl	81185c4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8118522:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8118524:	f000 f8f6 	bl	8118714 <prvAddNewTaskToReadyList>
 8118528:	e001      	b.n	811852e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 811852a:	2300      	movs	r3, #0
 811852c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 811852e:	697b      	ldr	r3, [r7, #20]
	}
 8118530:	4618      	mov	r0, r3
 8118532:	3728      	adds	r7, #40	@ 0x28
 8118534:	46bd      	mov	sp, r7
 8118536:	bd80      	pop	{r7, pc}

08118538 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8118538:	b580      	push	{r7, lr}
 811853a:	b08c      	sub	sp, #48	@ 0x30
 811853c:	af04      	add	r7, sp, #16
 811853e:	60f8      	str	r0, [r7, #12]
 8118540:	60b9      	str	r1, [r7, #8]
 8118542:	603b      	str	r3, [r7, #0]
 8118544:	4613      	mov	r3, r2
 8118546:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8118548:	88fb      	ldrh	r3, [r7, #6]
 811854a:	009b      	lsls	r3, r3, #2
 811854c:	4618      	mov	r0, r3
 811854e:	f7fd fd91 	bl	8116074 <pvPortMalloc>
 8118552:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8118554:	697b      	ldr	r3, [r7, #20]
 8118556:	2b00      	cmp	r3, #0
 8118558:	d00e      	beq.n	8118578 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 811855a:	20a8      	movs	r0, #168	@ 0xa8
 811855c:	f7fd fd8a 	bl	8116074 <pvPortMalloc>
 8118560:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8118562:	69fb      	ldr	r3, [r7, #28]
 8118564:	2b00      	cmp	r3, #0
 8118566:	d003      	beq.n	8118570 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8118568:	69fb      	ldr	r3, [r7, #28]
 811856a:	697a      	ldr	r2, [r7, #20]
 811856c:	631a      	str	r2, [r3, #48]	@ 0x30
 811856e:	e005      	b.n	811857c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8118570:	6978      	ldr	r0, [r7, #20]
 8118572:	f7fd fe4d 	bl	8116210 <vPortFree>
 8118576:	e001      	b.n	811857c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8118578:	2300      	movs	r3, #0
 811857a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 811857c:	69fb      	ldr	r3, [r7, #28]
 811857e:	2b00      	cmp	r3, #0
 8118580:	d017      	beq.n	81185b2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8118582:	69fb      	ldr	r3, [r7, #28]
 8118584:	2200      	movs	r2, #0
 8118586:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 811858a:	88fa      	ldrh	r2, [r7, #6]
 811858c:	2300      	movs	r3, #0
 811858e:	9303      	str	r3, [sp, #12]
 8118590:	69fb      	ldr	r3, [r7, #28]
 8118592:	9302      	str	r3, [sp, #8]
 8118594:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8118596:	9301      	str	r3, [sp, #4]
 8118598:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 811859a:	9300      	str	r3, [sp, #0]
 811859c:	683b      	ldr	r3, [r7, #0]
 811859e:	68b9      	ldr	r1, [r7, #8]
 81185a0:	68f8      	ldr	r0, [r7, #12]
 81185a2:	f000 f80f 	bl	81185c4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 81185a6:	69f8      	ldr	r0, [r7, #28]
 81185a8:	f000 f8b4 	bl	8118714 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 81185ac:	2301      	movs	r3, #1
 81185ae:	61bb      	str	r3, [r7, #24]
 81185b0:	e002      	b.n	81185b8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 81185b2:	f04f 33ff 	mov.w	r3, #4294967295
 81185b6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 81185b8:	69bb      	ldr	r3, [r7, #24]
	}
 81185ba:	4618      	mov	r0, r3
 81185bc:	3720      	adds	r7, #32
 81185be:	46bd      	mov	sp, r7
 81185c0:	bd80      	pop	{r7, pc}
	...

081185c4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 81185c4:	b580      	push	{r7, lr}
 81185c6:	b088      	sub	sp, #32
 81185c8:	af00      	add	r7, sp, #0
 81185ca:	60f8      	str	r0, [r7, #12]
 81185cc:	60b9      	str	r1, [r7, #8]
 81185ce:	607a      	str	r2, [r7, #4]
 81185d0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 81185d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81185d4:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 81185d6:	687b      	ldr	r3, [r7, #4]
 81185d8:	009b      	lsls	r3, r3, #2
 81185da:	461a      	mov	r2, r3
 81185dc:	21a5      	movs	r1, #165	@ 0xa5
 81185de:	f00e fb5d 	bl	8126c9c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 81185e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81185e4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 81185e6:	687b      	ldr	r3, [r7, #4]
 81185e8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 81185ec:	3b01      	subs	r3, #1
 81185ee:	009b      	lsls	r3, r3, #2
 81185f0:	4413      	add	r3, r2
 81185f2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 81185f4:	69bb      	ldr	r3, [r7, #24]
 81185f6:	f023 0307 	bic.w	r3, r3, #7
 81185fa:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 81185fc:	69bb      	ldr	r3, [r7, #24]
 81185fe:	f003 0307 	and.w	r3, r3, #7
 8118602:	2b00      	cmp	r3, #0
 8118604:	d00b      	beq.n	811861e <prvInitialiseNewTask+0x5a>
	__asm volatile
 8118606:	f04f 0350 	mov.w	r3, #80	@ 0x50
 811860a:	f383 8811 	msr	BASEPRI, r3
 811860e:	f3bf 8f6f 	isb	sy
 8118612:	f3bf 8f4f 	dsb	sy
 8118616:	617b      	str	r3, [r7, #20]
}
 8118618:	bf00      	nop
 811861a:	bf00      	nop
 811861c:	e7fd      	b.n	811861a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 811861e:	68bb      	ldr	r3, [r7, #8]
 8118620:	2b00      	cmp	r3, #0
 8118622:	d01f      	beq.n	8118664 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8118624:	2300      	movs	r3, #0
 8118626:	61fb      	str	r3, [r7, #28]
 8118628:	e012      	b.n	8118650 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 811862a:	68ba      	ldr	r2, [r7, #8]
 811862c:	69fb      	ldr	r3, [r7, #28]
 811862e:	4413      	add	r3, r2
 8118630:	7819      	ldrb	r1, [r3, #0]
 8118632:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8118634:	69fb      	ldr	r3, [r7, #28]
 8118636:	4413      	add	r3, r2
 8118638:	3334      	adds	r3, #52	@ 0x34
 811863a:	460a      	mov	r2, r1
 811863c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 811863e:	68ba      	ldr	r2, [r7, #8]
 8118640:	69fb      	ldr	r3, [r7, #28]
 8118642:	4413      	add	r3, r2
 8118644:	781b      	ldrb	r3, [r3, #0]
 8118646:	2b00      	cmp	r3, #0
 8118648:	d006      	beq.n	8118658 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 811864a:	69fb      	ldr	r3, [r7, #28]
 811864c:	3301      	adds	r3, #1
 811864e:	61fb      	str	r3, [r7, #28]
 8118650:	69fb      	ldr	r3, [r7, #28]
 8118652:	2b0f      	cmp	r3, #15
 8118654:	d9e9      	bls.n	811862a <prvInitialiseNewTask+0x66>
 8118656:	e000      	b.n	811865a <prvInitialiseNewTask+0x96>
			{
				break;
 8118658:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 811865a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811865c:	2200      	movs	r2, #0
 811865e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8118662:	e003      	b.n	811866c <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8118664:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8118666:	2200      	movs	r2, #0
 8118668:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 811866c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 811866e:	2b37      	cmp	r3, #55	@ 0x37
 8118670:	d901      	bls.n	8118676 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8118672:	2337      	movs	r3, #55	@ 0x37
 8118674:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8118676:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8118678:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 811867a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 811867c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811867e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8118680:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8118682:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8118684:	2200      	movs	r2, #0
 8118686:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8118688:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811868a:	3304      	adds	r3, #4
 811868c:	4618      	mov	r0, r3
 811868e:	f7fd feff 	bl	8116490 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8118692:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8118694:	3318      	adds	r3, #24
 8118696:	4618      	mov	r0, r3
 8118698:	f7fd fefa 	bl	8116490 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 811869c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811869e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 81186a0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 81186a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81186a4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 81186a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81186aa:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 81186ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81186ae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 81186b0:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 81186b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81186b4:	2200      	movs	r2, #0
 81186b6:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 81186ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81186bc:	2200      	movs	r2, #0
 81186be:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 81186c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81186c4:	3354      	adds	r3, #84	@ 0x54
 81186c6:	224c      	movs	r2, #76	@ 0x4c
 81186c8:	2100      	movs	r1, #0
 81186ca:	4618      	mov	r0, r3
 81186cc:	f00e fae6 	bl	8126c9c <memset>
 81186d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81186d2:	4a0d      	ldr	r2, [pc, #52]	@ (8118708 <prvInitialiseNewTask+0x144>)
 81186d4:	659a      	str	r2, [r3, #88]	@ 0x58
 81186d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81186d8:	4a0c      	ldr	r2, [pc, #48]	@ (811870c <prvInitialiseNewTask+0x148>)
 81186da:	65da      	str	r2, [r3, #92]	@ 0x5c
 81186dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81186de:	4a0c      	ldr	r2, [pc, #48]	@ (8118710 <prvInitialiseNewTask+0x14c>)
 81186e0:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 81186e2:	683a      	ldr	r2, [r7, #0]
 81186e4:	68f9      	ldr	r1, [r7, #12]
 81186e6:	69b8      	ldr	r0, [r7, #24]
 81186e8:	f7fd ff66 	bl	81165b8 <pxPortInitialiseStack>
 81186ec:	4602      	mov	r2, r0
 81186ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81186f0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 81186f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81186f4:	2b00      	cmp	r3, #0
 81186f6:	d002      	beq.n	81186fe <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 81186f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81186fa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 81186fc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 81186fe:	bf00      	nop
 8118700:	3720      	adds	r7, #32
 8118702:	46bd      	mov	sp, r7
 8118704:	bd80      	pop	{r7, pc}
 8118706:	bf00      	nop
 8118708:	1000e588 	.word	0x1000e588
 811870c:	1000e5f0 	.word	0x1000e5f0
 8118710:	1000e658 	.word	0x1000e658

08118714 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8118714:	b580      	push	{r7, lr}
 8118716:	b082      	sub	sp, #8
 8118718:	af00      	add	r7, sp, #0
 811871a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 811871c:	f7fe f87c 	bl	8116818 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8118720:	4b2d      	ldr	r3, [pc, #180]	@ (81187d8 <prvAddNewTaskToReadyList+0xc4>)
 8118722:	681b      	ldr	r3, [r3, #0]
 8118724:	3301      	adds	r3, #1
 8118726:	4a2c      	ldr	r2, [pc, #176]	@ (81187d8 <prvAddNewTaskToReadyList+0xc4>)
 8118728:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 811872a:	4b2c      	ldr	r3, [pc, #176]	@ (81187dc <prvAddNewTaskToReadyList+0xc8>)
 811872c:	681b      	ldr	r3, [r3, #0]
 811872e:	2b00      	cmp	r3, #0
 8118730:	d109      	bne.n	8118746 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8118732:	4a2a      	ldr	r2, [pc, #168]	@ (81187dc <prvAddNewTaskToReadyList+0xc8>)
 8118734:	687b      	ldr	r3, [r7, #4]
 8118736:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8118738:	4b27      	ldr	r3, [pc, #156]	@ (81187d8 <prvAddNewTaskToReadyList+0xc4>)
 811873a:	681b      	ldr	r3, [r3, #0]
 811873c:	2b01      	cmp	r3, #1
 811873e:	d110      	bne.n	8118762 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8118740:	f000 fc68 	bl	8119014 <prvInitialiseTaskLists>
 8118744:	e00d      	b.n	8118762 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8118746:	4b26      	ldr	r3, [pc, #152]	@ (81187e0 <prvAddNewTaskToReadyList+0xcc>)
 8118748:	681b      	ldr	r3, [r3, #0]
 811874a:	2b00      	cmp	r3, #0
 811874c:	d109      	bne.n	8118762 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 811874e:	4b23      	ldr	r3, [pc, #140]	@ (81187dc <prvAddNewTaskToReadyList+0xc8>)
 8118750:	681b      	ldr	r3, [r3, #0]
 8118752:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8118754:	687b      	ldr	r3, [r7, #4]
 8118756:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8118758:	429a      	cmp	r2, r3
 811875a:	d802      	bhi.n	8118762 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 811875c:	4a1f      	ldr	r2, [pc, #124]	@ (81187dc <prvAddNewTaskToReadyList+0xc8>)
 811875e:	687b      	ldr	r3, [r7, #4]
 8118760:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8118762:	4b20      	ldr	r3, [pc, #128]	@ (81187e4 <prvAddNewTaskToReadyList+0xd0>)
 8118764:	681b      	ldr	r3, [r3, #0]
 8118766:	3301      	adds	r3, #1
 8118768:	4a1e      	ldr	r2, [pc, #120]	@ (81187e4 <prvAddNewTaskToReadyList+0xd0>)
 811876a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 811876c:	4b1d      	ldr	r3, [pc, #116]	@ (81187e4 <prvAddNewTaskToReadyList+0xd0>)
 811876e:	681a      	ldr	r2, [r3, #0]
 8118770:	687b      	ldr	r3, [r7, #4]
 8118772:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8118774:	687b      	ldr	r3, [r7, #4]
 8118776:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8118778:	4b1b      	ldr	r3, [pc, #108]	@ (81187e8 <prvAddNewTaskToReadyList+0xd4>)
 811877a:	681b      	ldr	r3, [r3, #0]
 811877c:	429a      	cmp	r2, r3
 811877e:	d903      	bls.n	8118788 <prvAddNewTaskToReadyList+0x74>
 8118780:	687b      	ldr	r3, [r7, #4]
 8118782:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8118784:	4a18      	ldr	r2, [pc, #96]	@ (81187e8 <prvAddNewTaskToReadyList+0xd4>)
 8118786:	6013      	str	r3, [r2, #0]
 8118788:	687b      	ldr	r3, [r7, #4]
 811878a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 811878c:	4613      	mov	r3, r2
 811878e:	009b      	lsls	r3, r3, #2
 8118790:	4413      	add	r3, r2
 8118792:	009b      	lsls	r3, r3, #2
 8118794:	4a15      	ldr	r2, [pc, #84]	@ (81187ec <prvAddNewTaskToReadyList+0xd8>)
 8118796:	441a      	add	r2, r3
 8118798:	687b      	ldr	r3, [r7, #4]
 811879a:	3304      	adds	r3, #4
 811879c:	4619      	mov	r1, r3
 811879e:	4610      	mov	r0, r2
 81187a0:	f7fd fe83 	bl	81164aa <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 81187a4:	f7fe f86a 	bl	811687c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 81187a8:	4b0d      	ldr	r3, [pc, #52]	@ (81187e0 <prvAddNewTaskToReadyList+0xcc>)
 81187aa:	681b      	ldr	r3, [r3, #0]
 81187ac:	2b00      	cmp	r3, #0
 81187ae:	d00e      	beq.n	81187ce <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 81187b0:	4b0a      	ldr	r3, [pc, #40]	@ (81187dc <prvAddNewTaskToReadyList+0xc8>)
 81187b2:	681b      	ldr	r3, [r3, #0]
 81187b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 81187b6:	687b      	ldr	r3, [r7, #4]
 81187b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81187ba:	429a      	cmp	r2, r3
 81187bc:	d207      	bcs.n	81187ce <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 81187be:	4b0c      	ldr	r3, [pc, #48]	@ (81187f0 <prvAddNewTaskToReadyList+0xdc>)
 81187c0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 81187c4:	601a      	str	r2, [r3, #0]
 81187c6:	f3bf 8f4f 	dsb	sy
 81187ca:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 81187ce:	bf00      	nop
 81187d0:	3708      	adds	r7, #8
 81187d2:	46bd      	mov	sp, r7
 81187d4:	bd80      	pop	{r7, pc}
 81187d6:	bf00      	nop
 81187d8:	1000b128 	.word	0x1000b128
 81187dc:	1000ac54 	.word	0x1000ac54
 81187e0:	1000b134 	.word	0x1000b134
 81187e4:	1000b144 	.word	0x1000b144
 81187e8:	1000b130 	.word	0x1000b130
 81187ec:	1000ac58 	.word	0x1000ac58
 81187f0:	e000ed04 	.word	0xe000ed04

081187f4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 81187f4:	b580      	push	{r7, lr}
 81187f6:	b084      	sub	sp, #16
 81187f8:	af00      	add	r7, sp, #0
 81187fa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 81187fc:	2300      	movs	r3, #0
 81187fe:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8118800:	687b      	ldr	r3, [r7, #4]
 8118802:	2b00      	cmp	r3, #0
 8118804:	d018      	beq.n	8118838 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8118806:	4b14      	ldr	r3, [pc, #80]	@ (8118858 <vTaskDelay+0x64>)
 8118808:	681b      	ldr	r3, [r3, #0]
 811880a:	2b00      	cmp	r3, #0
 811880c:	d00b      	beq.n	8118826 <vTaskDelay+0x32>
	__asm volatile
 811880e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8118812:	f383 8811 	msr	BASEPRI, r3
 8118816:	f3bf 8f6f 	isb	sy
 811881a:	f3bf 8f4f 	dsb	sy
 811881e:	60bb      	str	r3, [r7, #8]
}
 8118820:	bf00      	nop
 8118822:	bf00      	nop
 8118824:	e7fd      	b.n	8118822 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8118826:	f000 f88b 	bl	8118940 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 811882a:	2100      	movs	r1, #0
 811882c:	6878      	ldr	r0, [r7, #4]
 811882e:	f000 ffbf 	bl	81197b0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8118832:	f000 f893 	bl	811895c <xTaskResumeAll>
 8118836:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8118838:	68fb      	ldr	r3, [r7, #12]
 811883a:	2b00      	cmp	r3, #0
 811883c:	d107      	bne.n	811884e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 811883e:	4b07      	ldr	r3, [pc, #28]	@ (811885c <vTaskDelay+0x68>)
 8118840:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8118844:	601a      	str	r2, [r3, #0]
 8118846:	f3bf 8f4f 	dsb	sy
 811884a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 811884e:	bf00      	nop
 8118850:	3710      	adds	r7, #16
 8118852:	46bd      	mov	sp, r7
 8118854:	bd80      	pop	{r7, pc}
 8118856:	bf00      	nop
 8118858:	1000b150 	.word	0x1000b150
 811885c:	e000ed04 	.word	0xe000ed04

08118860 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8118860:	b580      	push	{r7, lr}
 8118862:	b08a      	sub	sp, #40	@ 0x28
 8118864:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8118866:	2300      	movs	r3, #0
 8118868:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 811886a:	2300      	movs	r3, #0
 811886c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 811886e:	463a      	mov	r2, r7
 8118870:	1d39      	adds	r1, r7, #4
 8118872:	f107 0308 	add.w	r3, r7, #8
 8118876:	4618      	mov	r0, r3
 8118878:	f7fd fbc8 	bl	811600c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 811887c:	6839      	ldr	r1, [r7, #0]
 811887e:	687b      	ldr	r3, [r7, #4]
 8118880:	68ba      	ldr	r2, [r7, #8]
 8118882:	9202      	str	r2, [sp, #8]
 8118884:	9301      	str	r3, [sp, #4]
 8118886:	2300      	movs	r3, #0
 8118888:	9300      	str	r3, [sp, #0]
 811888a:	2300      	movs	r3, #0
 811888c:	460a      	mov	r2, r1
 811888e:	4924      	ldr	r1, [pc, #144]	@ (8118920 <vTaskStartScheduler+0xc0>)
 8118890:	4824      	ldr	r0, [pc, #144]	@ (8118924 <vTaskStartScheduler+0xc4>)
 8118892:	f7ff fdf1 	bl	8118478 <xTaskCreateStatic>
 8118896:	4603      	mov	r3, r0
 8118898:	4a23      	ldr	r2, [pc, #140]	@ (8118928 <vTaskStartScheduler+0xc8>)
 811889a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 811889c:	4b22      	ldr	r3, [pc, #136]	@ (8118928 <vTaskStartScheduler+0xc8>)
 811889e:	681b      	ldr	r3, [r3, #0]
 81188a0:	2b00      	cmp	r3, #0
 81188a2:	d002      	beq.n	81188aa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 81188a4:	2301      	movs	r3, #1
 81188a6:	617b      	str	r3, [r7, #20]
 81188a8:	e001      	b.n	81188ae <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 81188aa:	2300      	movs	r3, #0
 81188ac:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 81188ae:	697b      	ldr	r3, [r7, #20]
 81188b0:	2b01      	cmp	r3, #1
 81188b2:	d102      	bne.n	81188ba <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 81188b4:	f000 ffd0 	bl	8119858 <xTimerCreateTimerTask>
 81188b8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 81188ba:	697b      	ldr	r3, [r7, #20]
 81188bc:	2b01      	cmp	r3, #1
 81188be:	d11b      	bne.n	81188f8 <vTaskStartScheduler+0x98>
	__asm volatile
 81188c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81188c4:	f383 8811 	msr	BASEPRI, r3
 81188c8:	f3bf 8f6f 	isb	sy
 81188cc:	f3bf 8f4f 	dsb	sy
 81188d0:	613b      	str	r3, [r7, #16]
}
 81188d2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 81188d4:	4b15      	ldr	r3, [pc, #84]	@ (811892c <vTaskStartScheduler+0xcc>)
 81188d6:	681b      	ldr	r3, [r3, #0]
 81188d8:	3354      	adds	r3, #84	@ 0x54
 81188da:	4a15      	ldr	r2, [pc, #84]	@ (8118930 <vTaskStartScheduler+0xd0>)
 81188dc:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 81188de:	4b15      	ldr	r3, [pc, #84]	@ (8118934 <vTaskStartScheduler+0xd4>)
 81188e0:	f04f 32ff 	mov.w	r2, #4294967295
 81188e4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 81188e6:	4b14      	ldr	r3, [pc, #80]	@ (8118938 <vTaskStartScheduler+0xd8>)
 81188e8:	2201      	movs	r2, #1
 81188ea:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 81188ec:	4b13      	ldr	r3, [pc, #76]	@ (811893c <vTaskStartScheduler+0xdc>)
 81188ee:	2200      	movs	r2, #0
 81188f0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 81188f2:	f7fd feed 	bl	81166d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 81188f6:	e00f      	b.n	8118918 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 81188f8:	697b      	ldr	r3, [r7, #20]
 81188fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 81188fe:	d10b      	bne.n	8118918 <vTaskStartScheduler+0xb8>
	__asm volatile
 8118900:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8118904:	f383 8811 	msr	BASEPRI, r3
 8118908:	f3bf 8f6f 	isb	sy
 811890c:	f3bf 8f4f 	dsb	sy
 8118910:	60fb      	str	r3, [r7, #12]
}
 8118912:	bf00      	nop
 8118914:	bf00      	nop
 8118916:	e7fd      	b.n	8118914 <vTaskStartScheduler+0xb4>
}
 8118918:	bf00      	nop
 811891a:	3718      	adds	r7, #24
 811891c:	46bd      	mov	sp, r7
 811891e:	bd80      	pop	{r7, pc}
 8118920:	08127e08 	.word	0x08127e08
 8118924:	08118fe5 	.word	0x08118fe5
 8118928:	1000b14c 	.word	0x1000b14c
 811892c:	1000ac54 	.word	0x1000ac54
 8118930:	10000040 	.word	0x10000040
 8118934:	1000b148 	.word	0x1000b148
 8118938:	1000b134 	.word	0x1000b134
 811893c:	1000b12c 	.word	0x1000b12c

08118940 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8118940:	b480      	push	{r7}
 8118942:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8118944:	4b04      	ldr	r3, [pc, #16]	@ (8118958 <vTaskSuspendAll+0x18>)
 8118946:	681b      	ldr	r3, [r3, #0]
 8118948:	3301      	adds	r3, #1
 811894a:	4a03      	ldr	r2, [pc, #12]	@ (8118958 <vTaskSuspendAll+0x18>)
 811894c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 811894e:	bf00      	nop
 8118950:	46bd      	mov	sp, r7
 8118952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8118956:	4770      	bx	lr
 8118958:	1000b150 	.word	0x1000b150

0811895c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 811895c:	b580      	push	{r7, lr}
 811895e:	b084      	sub	sp, #16
 8118960:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8118962:	2300      	movs	r3, #0
 8118964:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8118966:	2300      	movs	r3, #0
 8118968:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 811896a:	4b42      	ldr	r3, [pc, #264]	@ (8118a74 <xTaskResumeAll+0x118>)
 811896c:	681b      	ldr	r3, [r3, #0]
 811896e:	2b00      	cmp	r3, #0
 8118970:	d10b      	bne.n	811898a <xTaskResumeAll+0x2e>
	__asm volatile
 8118972:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8118976:	f383 8811 	msr	BASEPRI, r3
 811897a:	f3bf 8f6f 	isb	sy
 811897e:	f3bf 8f4f 	dsb	sy
 8118982:	603b      	str	r3, [r7, #0]
}
 8118984:	bf00      	nop
 8118986:	bf00      	nop
 8118988:	e7fd      	b.n	8118986 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 811898a:	f7fd ff45 	bl	8116818 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 811898e:	4b39      	ldr	r3, [pc, #228]	@ (8118a74 <xTaskResumeAll+0x118>)
 8118990:	681b      	ldr	r3, [r3, #0]
 8118992:	3b01      	subs	r3, #1
 8118994:	4a37      	ldr	r2, [pc, #220]	@ (8118a74 <xTaskResumeAll+0x118>)
 8118996:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8118998:	4b36      	ldr	r3, [pc, #216]	@ (8118a74 <xTaskResumeAll+0x118>)
 811899a:	681b      	ldr	r3, [r3, #0]
 811899c:	2b00      	cmp	r3, #0
 811899e:	d162      	bne.n	8118a66 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 81189a0:	4b35      	ldr	r3, [pc, #212]	@ (8118a78 <xTaskResumeAll+0x11c>)
 81189a2:	681b      	ldr	r3, [r3, #0]
 81189a4:	2b00      	cmp	r3, #0
 81189a6:	d05e      	beq.n	8118a66 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 81189a8:	e02f      	b.n	8118a0a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 81189aa:	4b34      	ldr	r3, [pc, #208]	@ (8118a7c <xTaskResumeAll+0x120>)
 81189ac:	68db      	ldr	r3, [r3, #12]
 81189ae:	68db      	ldr	r3, [r3, #12]
 81189b0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 81189b2:	68fb      	ldr	r3, [r7, #12]
 81189b4:	3318      	adds	r3, #24
 81189b6:	4618      	mov	r0, r3
 81189b8:	f7fd fdd4 	bl	8116564 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 81189bc:	68fb      	ldr	r3, [r7, #12]
 81189be:	3304      	adds	r3, #4
 81189c0:	4618      	mov	r0, r3
 81189c2:	f7fd fdcf 	bl	8116564 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 81189c6:	68fb      	ldr	r3, [r7, #12]
 81189c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 81189ca:	4b2d      	ldr	r3, [pc, #180]	@ (8118a80 <xTaskResumeAll+0x124>)
 81189cc:	681b      	ldr	r3, [r3, #0]
 81189ce:	429a      	cmp	r2, r3
 81189d0:	d903      	bls.n	81189da <xTaskResumeAll+0x7e>
 81189d2:	68fb      	ldr	r3, [r7, #12]
 81189d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81189d6:	4a2a      	ldr	r2, [pc, #168]	@ (8118a80 <xTaskResumeAll+0x124>)
 81189d8:	6013      	str	r3, [r2, #0]
 81189da:	68fb      	ldr	r3, [r7, #12]
 81189dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 81189de:	4613      	mov	r3, r2
 81189e0:	009b      	lsls	r3, r3, #2
 81189e2:	4413      	add	r3, r2
 81189e4:	009b      	lsls	r3, r3, #2
 81189e6:	4a27      	ldr	r2, [pc, #156]	@ (8118a84 <xTaskResumeAll+0x128>)
 81189e8:	441a      	add	r2, r3
 81189ea:	68fb      	ldr	r3, [r7, #12]
 81189ec:	3304      	adds	r3, #4
 81189ee:	4619      	mov	r1, r3
 81189f0:	4610      	mov	r0, r2
 81189f2:	f7fd fd5a 	bl	81164aa <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 81189f6:	68fb      	ldr	r3, [r7, #12]
 81189f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 81189fa:	4b23      	ldr	r3, [pc, #140]	@ (8118a88 <xTaskResumeAll+0x12c>)
 81189fc:	681b      	ldr	r3, [r3, #0]
 81189fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8118a00:	429a      	cmp	r2, r3
 8118a02:	d302      	bcc.n	8118a0a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8118a04:	4b21      	ldr	r3, [pc, #132]	@ (8118a8c <xTaskResumeAll+0x130>)
 8118a06:	2201      	movs	r2, #1
 8118a08:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8118a0a:	4b1c      	ldr	r3, [pc, #112]	@ (8118a7c <xTaskResumeAll+0x120>)
 8118a0c:	681b      	ldr	r3, [r3, #0]
 8118a0e:	2b00      	cmp	r3, #0
 8118a10:	d1cb      	bne.n	81189aa <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8118a12:	68fb      	ldr	r3, [r7, #12]
 8118a14:	2b00      	cmp	r3, #0
 8118a16:	d001      	beq.n	8118a1c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8118a18:	f000 fba0 	bl	811915c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8118a1c:	4b1c      	ldr	r3, [pc, #112]	@ (8118a90 <xTaskResumeAll+0x134>)
 8118a1e:	681b      	ldr	r3, [r3, #0]
 8118a20:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8118a22:	687b      	ldr	r3, [r7, #4]
 8118a24:	2b00      	cmp	r3, #0
 8118a26:	d010      	beq.n	8118a4a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8118a28:	f000 f858 	bl	8118adc <xTaskIncrementTick>
 8118a2c:	4603      	mov	r3, r0
 8118a2e:	2b00      	cmp	r3, #0
 8118a30:	d002      	beq.n	8118a38 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8118a32:	4b16      	ldr	r3, [pc, #88]	@ (8118a8c <xTaskResumeAll+0x130>)
 8118a34:	2201      	movs	r2, #1
 8118a36:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8118a38:	687b      	ldr	r3, [r7, #4]
 8118a3a:	3b01      	subs	r3, #1
 8118a3c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8118a3e:	687b      	ldr	r3, [r7, #4]
 8118a40:	2b00      	cmp	r3, #0
 8118a42:	d1f1      	bne.n	8118a28 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8118a44:	4b12      	ldr	r3, [pc, #72]	@ (8118a90 <xTaskResumeAll+0x134>)
 8118a46:	2200      	movs	r2, #0
 8118a48:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8118a4a:	4b10      	ldr	r3, [pc, #64]	@ (8118a8c <xTaskResumeAll+0x130>)
 8118a4c:	681b      	ldr	r3, [r3, #0]
 8118a4e:	2b00      	cmp	r3, #0
 8118a50:	d009      	beq.n	8118a66 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8118a52:	2301      	movs	r3, #1
 8118a54:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8118a56:	4b0f      	ldr	r3, [pc, #60]	@ (8118a94 <xTaskResumeAll+0x138>)
 8118a58:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8118a5c:	601a      	str	r2, [r3, #0]
 8118a5e:	f3bf 8f4f 	dsb	sy
 8118a62:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8118a66:	f7fd ff09 	bl	811687c <vPortExitCritical>

	return xAlreadyYielded;
 8118a6a:	68bb      	ldr	r3, [r7, #8]
}
 8118a6c:	4618      	mov	r0, r3
 8118a6e:	3710      	adds	r7, #16
 8118a70:	46bd      	mov	sp, r7
 8118a72:	bd80      	pop	{r7, pc}
 8118a74:	1000b150 	.word	0x1000b150
 8118a78:	1000b128 	.word	0x1000b128
 8118a7c:	1000b0e8 	.word	0x1000b0e8
 8118a80:	1000b130 	.word	0x1000b130
 8118a84:	1000ac58 	.word	0x1000ac58
 8118a88:	1000ac54 	.word	0x1000ac54
 8118a8c:	1000b13c 	.word	0x1000b13c
 8118a90:	1000b138 	.word	0x1000b138
 8118a94:	e000ed04 	.word	0xe000ed04

08118a98 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8118a98:	b480      	push	{r7}
 8118a9a:	b083      	sub	sp, #12
 8118a9c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8118a9e:	4b05      	ldr	r3, [pc, #20]	@ (8118ab4 <xTaskGetTickCount+0x1c>)
 8118aa0:	681b      	ldr	r3, [r3, #0]
 8118aa2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8118aa4:	687b      	ldr	r3, [r7, #4]
}
 8118aa6:	4618      	mov	r0, r3
 8118aa8:	370c      	adds	r7, #12
 8118aaa:	46bd      	mov	sp, r7
 8118aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8118ab0:	4770      	bx	lr
 8118ab2:	bf00      	nop
 8118ab4:	1000b12c 	.word	0x1000b12c

08118ab8 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8118ab8:	b580      	push	{r7, lr}
 8118aba:	b082      	sub	sp, #8
 8118abc:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8118abe:	f7fd ff8b 	bl	81169d8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8118ac2:	2300      	movs	r3, #0
 8118ac4:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8118ac6:	4b04      	ldr	r3, [pc, #16]	@ (8118ad8 <xTaskGetTickCountFromISR+0x20>)
 8118ac8:	681b      	ldr	r3, [r3, #0]
 8118aca:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8118acc:	683b      	ldr	r3, [r7, #0]
}
 8118ace:	4618      	mov	r0, r3
 8118ad0:	3708      	adds	r7, #8
 8118ad2:	46bd      	mov	sp, r7
 8118ad4:	bd80      	pop	{r7, pc}
 8118ad6:	bf00      	nop
 8118ad8:	1000b12c 	.word	0x1000b12c

08118adc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8118adc:	b580      	push	{r7, lr}
 8118ade:	b086      	sub	sp, #24
 8118ae0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8118ae2:	2300      	movs	r3, #0
 8118ae4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8118ae6:	4b4f      	ldr	r3, [pc, #316]	@ (8118c24 <xTaskIncrementTick+0x148>)
 8118ae8:	681b      	ldr	r3, [r3, #0]
 8118aea:	2b00      	cmp	r3, #0
 8118aec:	f040 8090 	bne.w	8118c10 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8118af0:	4b4d      	ldr	r3, [pc, #308]	@ (8118c28 <xTaskIncrementTick+0x14c>)
 8118af2:	681b      	ldr	r3, [r3, #0]
 8118af4:	3301      	adds	r3, #1
 8118af6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8118af8:	4a4b      	ldr	r2, [pc, #300]	@ (8118c28 <xTaskIncrementTick+0x14c>)
 8118afa:	693b      	ldr	r3, [r7, #16]
 8118afc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8118afe:	693b      	ldr	r3, [r7, #16]
 8118b00:	2b00      	cmp	r3, #0
 8118b02:	d121      	bne.n	8118b48 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8118b04:	4b49      	ldr	r3, [pc, #292]	@ (8118c2c <xTaskIncrementTick+0x150>)
 8118b06:	681b      	ldr	r3, [r3, #0]
 8118b08:	681b      	ldr	r3, [r3, #0]
 8118b0a:	2b00      	cmp	r3, #0
 8118b0c:	d00b      	beq.n	8118b26 <xTaskIncrementTick+0x4a>
	__asm volatile
 8118b0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8118b12:	f383 8811 	msr	BASEPRI, r3
 8118b16:	f3bf 8f6f 	isb	sy
 8118b1a:	f3bf 8f4f 	dsb	sy
 8118b1e:	603b      	str	r3, [r7, #0]
}
 8118b20:	bf00      	nop
 8118b22:	bf00      	nop
 8118b24:	e7fd      	b.n	8118b22 <xTaskIncrementTick+0x46>
 8118b26:	4b41      	ldr	r3, [pc, #260]	@ (8118c2c <xTaskIncrementTick+0x150>)
 8118b28:	681b      	ldr	r3, [r3, #0]
 8118b2a:	60fb      	str	r3, [r7, #12]
 8118b2c:	4b40      	ldr	r3, [pc, #256]	@ (8118c30 <xTaskIncrementTick+0x154>)
 8118b2e:	681b      	ldr	r3, [r3, #0]
 8118b30:	4a3e      	ldr	r2, [pc, #248]	@ (8118c2c <xTaskIncrementTick+0x150>)
 8118b32:	6013      	str	r3, [r2, #0]
 8118b34:	4a3e      	ldr	r2, [pc, #248]	@ (8118c30 <xTaskIncrementTick+0x154>)
 8118b36:	68fb      	ldr	r3, [r7, #12]
 8118b38:	6013      	str	r3, [r2, #0]
 8118b3a:	4b3e      	ldr	r3, [pc, #248]	@ (8118c34 <xTaskIncrementTick+0x158>)
 8118b3c:	681b      	ldr	r3, [r3, #0]
 8118b3e:	3301      	adds	r3, #1
 8118b40:	4a3c      	ldr	r2, [pc, #240]	@ (8118c34 <xTaskIncrementTick+0x158>)
 8118b42:	6013      	str	r3, [r2, #0]
 8118b44:	f000 fb0a 	bl	811915c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8118b48:	4b3b      	ldr	r3, [pc, #236]	@ (8118c38 <xTaskIncrementTick+0x15c>)
 8118b4a:	681b      	ldr	r3, [r3, #0]
 8118b4c:	693a      	ldr	r2, [r7, #16]
 8118b4e:	429a      	cmp	r2, r3
 8118b50:	d349      	bcc.n	8118be6 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8118b52:	4b36      	ldr	r3, [pc, #216]	@ (8118c2c <xTaskIncrementTick+0x150>)
 8118b54:	681b      	ldr	r3, [r3, #0]
 8118b56:	681b      	ldr	r3, [r3, #0]
 8118b58:	2b00      	cmp	r3, #0
 8118b5a:	d104      	bne.n	8118b66 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8118b5c:	4b36      	ldr	r3, [pc, #216]	@ (8118c38 <xTaskIncrementTick+0x15c>)
 8118b5e:	f04f 32ff 	mov.w	r2, #4294967295
 8118b62:	601a      	str	r2, [r3, #0]
					break;
 8118b64:	e03f      	b.n	8118be6 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8118b66:	4b31      	ldr	r3, [pc, #196]	@ (8118c2c <xTaskIncrementTick+0x150>)
 8118b68:	681b      	ldr	r3, [r3, #0]
 8118b6a:	68db      	ldr	r3, [r3, #12]
 8118b6c:	68db      	ldr	r3, [r3, #12]
 8118b6e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8118b70:	68bb      	ldr	r3, [r7, #8]
 8118b72:	685b      	ldr	r3, [r3, #4]
 8118b74:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8118b76:	693a      	ldr	r2, [r7, #16]
 8118b78:	687b      	ldr	r3, [r7, #4]
 8118b7a:	429a      	cmp	r2, r3
 8118b7c:	d203      	bcs.n	8118b86 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8118b7e:	4a2e      	ldr	r2, [pc, #184]	@ (8118c38 <xTaskIncrementTick+0x15c>)
 8118b80:	687b      	ldr	r3, [r7, #4]
 8118b82:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8118b84:	e02f      	b.n	8118be6 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8118b86:	68bb      	ldr	r3, [r7, #8]
 8118b88:	3304      	adds	r3, #4
 8118b8a:	4618      	mov	r0, r3
 8118b8c:	f7fd fcea 	bl	8116564 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8118b90:	68bb      	ldr	r3, [r7, #8]
 8118b92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8118b94:	2b00      	cmp	r3, #0
 8118b96:	d004      	beq.n	8118ba2 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8118b98:	68bb      	ldr	r3, [r7, #8]
 8118b9a:	3318      	adds	r3, #24
 8118b9c:	4618      	mov	r0, r3
 8118b9e:	f7fd fce1 	bl	8116564 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8118ba2:	68bb      	ldr	r3, [r7, #8]
 8118ba4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8118ba6:	4b25      	ldr	r3, [pc, #148]	@ (8118c3c <xTaskIncrementTick+0x160>)
 8118ba8:	681b      	ldr	r3, [r3, #0]
 8118baa:	429a      	cmp	r2, r3
 8118bac:	d903      	bls.n	8118bb6 <xTaskIncrementTick+0xda>
 8118bae:	68bb      	ldr	r3, [r7, #8]
 8118bb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8118bb2:	4a22      	ldr	r2, [pc, #136]	@ (8118c3c <xTaskIncrementTick+0x160>)
 8118bb4:	6013      	str	r3, [r2, #0]
 8118bb6:	68bb      	ldr	r3, [r7, #8]
 8118bb8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8118bba:	4613      	mov	r3, r2
 8118bbc:	009b      	lsls	r3, r3, #2
 8118bbe:	4413      	add	r3, r2
 8118bc0:	009b      	lsls	r3, r3, #2
 8118bc2:	4a1f      	ldr	r2, [pc, #124]	@ (8118c40 <xTaskIncrementTick+0x164>)
 8118bc4:	441a      	add	r2, r3
 8118bc6:	68bb      	ldr	r3, [r7, #8]
 8118bc8:	3304      	adds	r3, #4
 8118bca:	4619      	mov	r1, r3
 8118bcc:	4610      	mov	r0, r2
 8118bce:	f7fd fc6c 	bl	81164aa <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8118bd2:	68bb      	ldr	r3, [r7, #8]
 8118bd4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8118bd6:	4b1b      	ldr	r3, [pc, #108]	@ (8118c44 <xTaskIncrementTick+0x168>)
 8118bd8:	681b      	ldr	r3, [r3, #0]
 8118bda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8118bdc:	429a      	cmp	r2, r3
 8118bde:	d3b8      	bcc.n	8118b52 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8118be0:	2301      	movs	r3, #1
 8118be2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8118be4:	e7b5      	b.n	8118b52 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8118be6:	4b17      	ldr	r3, [pc, #92]	@ (8118c44 <xTaskIncrementTick+0x168>)
 8118be8:	681b      	ldr	r3, [r3, #0]
 8118bea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8118bec:	4914      	ldr	r1, [pc, #80]	@ (8118c40 <xTaskIncrementTick+0x164>)
 8118bee:	4613      	mov	r3, r2
 8118bf0:	009b      	lsls	r3, r3, #2
 8118bf2:	4413      	add	r3, r2
 8118bf4:	009b      	lsls	r3, r3, #2
 8118bf6:	440b      	add	r3, r1
 8118bf8:	681b      	ldr	r3, [r3, #0]
 8118bfa:	2b01      	cmp	r3, #1
 8118bfc:	d901      	bls.n	8118c02 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8118bfe:	2301      	movs	r3, #1
 8118c00:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8118c02:	4b11      	ldr	r3, [pc, #68]	@ (8118c48 <xTaskIncrementTick+0x16c>)
 8118c04:	681b      	ldr	r3, [r3, #0]
 8118c06:	2b00      	cmp	r3, #0
 8118c08:	d007      	beq.n	8118c1a <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8118c0a:	2301      	movs	r3, #1
 8118c0c:	617b      	str	r3, [r7, #20]
 8118c0e:	e004      	b.n	8118c1a <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8118c10:	4b0e      	ldr	r3, [pc, #56]	@ (8118c4c <xTaskIncrementTick+0x170>)
 8118c12:	681b      	ldr	r3, [r3, #0]
 8118c14:	3301      	adds	r3, #1
 8118c16:	4a0d      	ldr	r2, [pc, #52]	@ (8118c4c <xTaskIncrementTick+0x170>)
 8118c18:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8118c1a:	697b      	ldr	r3, [r7, #20]
}
 8118c1c:	4618      	mov	r0, r3
 8118c1e:	3718      	adds	r7, #24
 8118c20:	46bd      	mov	sp, r7
 8118c22:	bd80      	pop	{r7, pc}
 8118c24:	1000b150 	.word	0x1000b150
 8118c28:	1000b12c 	.word	0x1000b12c
 8118c2c:	1000b0e0 	.word	0x1000b0e0
 8118c30:	1000b0e4 	.word	0x1000b0e4
 8118c34:	1000b140 	.word	0x1000b140
 8118c38:	1000b148 	.word	0x1000b148
 8118c3c:	1000b130 	.word	0x1000b130
 8118c40:	1000ac58 	.word	0x1000ac58
 8118c44:	1000ac54 	.word	0x1000ac54
 8118c48:	1000b13c 	.word	0x1000b13c
 8118c4c:	1000b138 	.word	0x1000b138

08118c50 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8118c50:	b480      	push	{r7}
 8118c52:	b085      	sub	sp, #20
 8118c54:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8118c56:	4b2b      	ldr	r3, [pc, #172]	@ (8118d04 <vTaskSwitchContext+0xb4>)
 8118c58:	681b      	ldr	r3, [r3, #0]
 8118c5a:	2b00      	cmp	r3, #0
 8118c5c:	d003      	beq.n	8118c66 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8118c5e:	4b2a      	ldr	r3, [pc, #168]	@ (8118d08 <vTaskSwitchContext+0xb8>)
 8118c60:	2201      	movs	r2, #1
 8118c62:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8118c64:	e047      	b.n	8118cf6 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8118c66:	4b28      	ldr	r3, [pc, #160]	@ (8118d08 <vTaskSwitchContext+0xb8>)
 8118c68:	2200      	movs	r2, #0
 8118c6a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8118c6c:	4b27      	ldr	r3, [pc, #156]	@ (8118d0c <vTaskSwitchContext+0xbc>)
 8118c6e:	681b      	ldr	r3, [r3, #0]
 8118c70:	60fb      	str	r3, [r7, #12]
 8118c72:	e011      	b.n	8118c98 <vTaskSwitchContext+0x48>
 8118c74:	68fb      	ldr	r3, [r7, #12]
 8118c76:	2b00      	cmp	r3, #0
 8118c78:	d10b      	bne.n	8118c92 <vTaskSwitchContext+0x42>
	__asm volatile
 8118c7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8118c7e:	f383 8811 	msr	BASEPRI, r3
 8118c82:	f3bf 8f6f 	isb	sy
 8118c86:	f3bf 8f4f 	dsb	sy
 8118c8a:	607b      	str	r3, [r7, #4]
}
 8118c8c:	bf00      	nop
 8118c8e:	bf00      	nop
 8118c90:	e7fd      	b.n	8118c8e <vTaskSwitchContext+0x3e>
 8118c92:	68fb      	ldr	r3, [r7, #12]
 8118c94:	3b01      	subs	r3, #1
 8118c96:	60fb      	str	r3, [r7, #12]
 8118c98:	491d      	ldr	r1, [pc, #116]	@ (8118d10 <vTaskSwitchContext+0xc0>)
 8118c9a:	68fa      	ldr	r2, [r7, #12]
 8118c9c:	4613      	mov	r3, r2
 8118c9e:	009b      	lsls	r3, r3, #2
 8118ca0:	4413      	add	r3, r2
 8118ca2:	009b      	lsls	r3, r3, #2
 8118ca4:	440b      	add	r3, r1
 8118ca6:	681b      	ldr	r3, [r3, #0]
 8118ca8:	2b00      	cmp	r3, #0
 8118caa:	d0e3      	beq.n	8118c74 <vTaskSwitchContext+0x24>
 8118cac:	68fa      	ldr	r2, [r7, #12]
 8118cae:	4613      	mov	r3, r2
 8118cb0:	009b      	lsls	r3, r3, #2
 8118cb2:	4413      	add	r3, r2
 8118cb4:	009b      	lsls	r3, r3, #2
 8118cb6:	4a16      	ldr	r2, [pc, #88]	@ (8118d10 <vTaskSwitchContext+0xc0>)
 8118cb8:	4413      	add	r3, r2
 8118cba:	60bb      	str	r3, [r7, #8]
 8118cbc:	68bb      	ldr	r3, [r7, #8]
 8118cbe:	685b      	ldr	r3, [r3, #4]
 8118cc0:	685a      	ldr	r2, [r3, #4]
 8118cc2:	68bb      	ldr	r3, [r7, #8]
 8118cc4:	605a      	str	r2, [r3, #4]
 8118cc6:	68bb      	ldr	r3, [r7, #8]
 8118cc8:	685a      	ldr	r2, [r3, #4]
 8118cca:	68bb      	ldr	r3, [r7, #8]
 8118ccc:	3308      	adds	r3, #8
 8118cce:	429a      	cmp	r2, r3
 8118cd0:	d104      	bne.n	8118cdc <vTaskSwitchContext+0x8c>
 8118cd2:	68bb      	ldr	r3, [r7, #8]
 8118cd4:	685b      	ldr	r3, [r3, #4]
 8118cd6:	685a      	ldr	r2, [r3, #4]
 8118cd8:	68bb      	ldr	r3, [r7, #8]
 8118cda:	605a      	str	r2, [r3, #4]
 8118cdc:	68bb      	ldr	r3, [r7, #8]
 8118cde:	685b      	ldr	r3, [r3, #4]
 8118ce0:	68db      	ldr	r3, [r3, #12]
 8118ce2:	4a0c      	ldr	r2, [pc, #48]	@ (8118d14 <vTaskSwitchContext+0xc4>)
 8118ce4:	6013      	str	r3, [r2, #0]
 8118ce6:	4a09      	ldr	r2, [pc, #36]	@ (8118d0c <vTaskSwitchContext+0xbc>)
 8118ce8:	68fb      	ldr	r3, [r7, #12]
 8118cea:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8118cec:	4b09      	ldr	r3, [pc, #36]	@ (8118d14 <vTaskSwitchContext+0xc4>)
 8118cee:	681b      	ldr	r3, [r3, #0]
 8118cf0:	3354      	adds	r3, #84	@ 0x54
 8118cf2:	4a09      	ldr	r2, [pc, #36]	@ (8118d18 <vTaskSwitchContext+0xc8>)
 8118cf4:	6013      	str	r3, [r2, #0]
}
 8118cf6:	bf00      	nop
 8118cf8:	3714      	adds	r7, #20
 8118cfa:	46bd      	mov	sp, r7
 8118cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8118d00:	4770      	bx	lr
 8118d02:	bf00      	nop
 8118d04:	1000b150 	.word	0x1000b150
 8118d08:	1000b13c 	.word	0x1000b13c
 8118d0c:	1000b130 	.word	0x1000b130
 8118d10:	1000ac58 	.word	0x1000ac58
 8118d14:	1000ac54 	.word	0x1000ac54
 8118d18:	10000040 	.word	0x10000040

08118d1c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8118d1c:	b580      	push	{r7, lr}
 8118d1e:	b084      	sub	sp, #16
 8118d20:	af00      	add	r7, sp, #0
 8118d22:	6078      	str	r0, [r7, #4]
 8118d24:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8118d26:	687b      	ldr	r3, [r7, #4]
 8118d28:	2b00      	cmp	r3, #0
 8118d2a:	d10b      	bne.n	8118d44 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8118d2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8118d30:	f383 8811 	msr	BASEPRI, r3
 8118d34:	f3bf 8f6f 	isb	sy
 8118d38:	f3bf 8f4f 	dsb	sy
 8118d3c:	60fb      	str	r3, [r7, #12]
}
 8118d3e:	bf00      	nop
 8118d40:	bf00      	nop
 8118d42:	e7fd      	b.n	8118d40 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8118d44:	4b07      	ldr	r3, [pc, #28]	@ (8118d64 <vTaskPlaceOnEventList+0x48>)
 8118d46:	681b      	ldr	r3, [r3, #0]
 8118d48:	3318      	adds	r3, #24
 8118d4a:	4619      	mov	r1, r3
 8118d4c:	6878      	ldr	r0, [r7, #4]
 8118d4e:	f7fd fbd0 	bl	81164f2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8118d52:	2101      	movs	r1, #1
 8118d54:	6838      	ldr	r0, [r7, #0]
 8118d56:	f000 fd2b 	bl	81197b0 <prvAddCurrentTaskToDelayedList>
}
 8118d5a:	bf00      	nop
 8118d5c:	3710      	adds	r7, #16
 8118d5e:	46bd      	mov	sp, r7
 8118d60:	bd80      	pop	{r7, pc}
 8118d62:	bf00      	nop
 8118d64:	1000ac54 	.word	0x1000ac54

08118d68 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8118d68:	b580      	push	{r7, lr}
 8118d6a:	b086      	sub	sp, #24
 8118d6c:	af00      	add	r7, sp, #0
 8118d6e:	60f8      	str	r0, [r7, #12]
 8118d70:	60b9      	str	r1, [r7, #8]
 8118d72:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8118d74:	68fb      	ldr	r3, [r7, #12]
 8118d76:	2b00      	cmp	r3, #0
 8118d78:	d10b      	bne.n	8118d92 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8118d7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8118d7e:	f383 8811 	msr	BASEPRI, r3
 8118d82:	f3bf 8f6f 	isb	sy
 8118d86:	f3bf 8f4f 	dsb	sy
 8118d8a:	617b      	str	r3, [r7, #20]
}
 8118d8c:	bf00      	nop
 8118d8e:	bf00      	nop
 8118d90:	e7fd      	b.n	8118d8e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8118d92:	4b0a      	ldr	r3, [pc, #40]	@ (8118dbc <vTaskPlaceOnEventListRestricted+0x54>)
 8118d94:	681b      	ldr	r3, [r3, #0]
 8118d96:	3318      	adds	r3, #24
 8118d98:	4619      	mov	r1, r3
 8118d9a:	68f8      	ldr	r0, [r7, #12]
 8118d9c:	f7fd fb85 	bl	81164aa <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8118da0:	687b      	ldr	r3, [r7, #4]
 8118da2:	2b00      	cmp	r3, #0
 8118da4:	d002      	beq.n	8118dac <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8118da6:	f04f 33ff 	mov.w	r3, #4294967295
 8118daa:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8118dac:	6879      	ldr	r1, [r7, #4]
 8118dae:	68b8      	ldr	r0, [r7, #8]
 8118db0:	f000 fcfe 	bl	81197b0 <prvAddCurrentTaskToDelayedList>
	}
 8118db4:	bf00      	nop
 8118db6:	3718      	adds	r7, #24
 8118db8:	46bd      	mov	sp, r7
 8118dba:	bd80      	pop	{r7, pc}
 8118dbc:	1000ac54 	.word	0x1000ac54

08118dc0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8118dc0:	b580      	push	{r7, lr}
 8118dc2:	b086      	sub	sp, #24
 8118dc4:	af00      	add	r7, sp, #0
 8118dc6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8118dc8:	687b      	ldr	r3, [r7, #4]
 8118dca:	68db      	ldr	r3, [r3, #12]
 8118dcc:	68db      	ldr	r3, [r3, #12]
 8118dce:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8118dd0:	693b      	ldr	r3, [r7, #16]
 8118dd2:	2b00      	cmp	r3, #0
 8118dd4:	d10b      	bne.n	8118dee <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8118dd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8118dda:	f383 8811 	msr	BASEPRI, r3
 8118dde:	f3bf 8f6f 	isb	sy
 8118de2:	f3bf 8f4f 	dsb	sy
 8118de6:	60fb      	str	r3, [r7, #12]
}
 8118de8:	bf00      	nop
 8118dea:	bf00      	nop
 8118dec:	e7fd      	b.n	8118dea <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8118dee:	693b      	ldr	r3, [r7, #16]
 8118df0:	3318      	adds	r3, #24
 8118df2:	4618      	mov	r0, r3
 8118df4:	f7fd fbb6 	bl	8116564 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8118df8:	4b1d      	ldr	r3, [pc, #116]	@ (8118e70 <xTaskRemoveFromEventList+0xb0>)
 8118dfa:	681b      	ldr	r3, [r3, #0]
 8118dfc:	2b00      	cmp	r3, #0
 8118dfe:	d11d      	bne.n	8118e3c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8118e00:	693b      	ldr	r3, [r7, #16]
 8118e02:	3304      	adds	r3, #4
 8118e04:	4618      	mov	r0, r3
 8118e06:	f7fd fbad 	bl	8116564 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8118e0a:	693b      	ldr	r3, [r7, #16]
 8118e0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8118e0e:	4b19      	ldr	r3, [pc, #100]	@ (8118e74 <xTaskRemoveFromEventList+0xb4>)
 8118e10:	681b      	ldr	r3, [r3, #0]
 8118e12:	429a      	cmp	r2, r3
 8118e14:	d903      	bls.n	8118e1e <xTaskRemoveFromEventList+0x5e>
 8118e16:	693b      	ldr	r3, [r7, #16]
 8118e18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8118e1a:	4a16      	ldr	r2, [pc, #88]	@ (8118e74 <xTaskRemoveFromEventList+0xb4>)
 8118e1c:	6013      	str	r3, [r2, #0]
 8118e1e:	693b      	ldr	r3, [r7, #16]
 8118e20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8118e22:	4613      	mov	r3, r2
 8118e24:	009b      	lsls	r3, r3, #2
 8118e26:	4413      	add	r3, r2
 8118e28:	009b      	lsls	r3, r3, #2
 8118e2a:	4a13      	ldr	r2, [pc, #76]	@ (8118e78 <xTaskRemoveFromEventList+0xb8>)
 8118e2c:	441a      	add	r2, r3
 8118e2e:	693b      	ldr	r3, [r7, #16]
 8118e30:	3304      	adds	r3, #4
 8118e32:	4619      	mov	r1, r3
 8118e34:	4610      	mov	r0, r2
 8118e36:	f7fd fb38 	bl	81164aa <vListInsertEnd>
 8118e3a:	e005      	b.n	8118e48 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8118e3c:	693b      	ldr	r3, [r7, #16]
 8118e3e:	3318      	adds	r3, #24
 8118e40:	4619      	mov	r1, r3
 8118e42:	480e      	ldr	r0, [pc, #56]	@ (8118e7c <xTaskRemoveFromEventList+0xbc>)
 8118e44:	f7fd fb31 	bl	81164aa <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8118e48:	693b      	ldr	r3, [r7, #16]
 8118e4a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8118e4c:	4b0c      	ldr	r3, [pc, #48]	@ (8118e80 <xTaskRemoveFromEventList+0xc0>)
 8118e4e:	681b      	ldr	r3, [r3, #0]
 8118e50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8118e52:	429a      	cmp	r2, r3
 8118e54:	d905      	bls.n	8118e62 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8118e56:	2301      	movs	r3, #1
 8118e58:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8118e5a:	4b0a      	ldr	r3, [pc, #40]	@ (8118e84 <xTaskRemoveFromEventList+0xc4>)
 8118e5c:	2201      	movs	r2, #1
 8118e5e:	601a      	str	r2, [r3, #0]
 8118e60:	e001      	b.n	8118e66 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8118e62:	2300      	movs	r3, #0
 8118e64:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8118e66:	697b      	ldr	r3, [r7, #20]
}
 8118e68:	4618      	mov	r0, r3
 8118e6a:	3718      	adds	r7, #24
 8118e6c:	46bd      	mov	sp, r7
 8118e6e:	bd80      	pop	{r7, pc}
 8118e70:	1000b150 	.word	0x1000b150
 8118e74:	1000b130 	.word	0x1000b130
 8118e78:	1000ac58 	.word	0x1000ac58
 8118e7c:	1000b0e8 	.word	0x1000b0e8
 8118e80:	1000ac54 	.word	0x1000ac54
 8118e84:	1000b13c 	.word	0x1000b13c

08118e88 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8118e88:	b580      	push	{r7, lr}
 8118e8a:	b084      	sub	sp, #16
 8118e8c:	af00      	add	r7, sp, #0
 8118e8e:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 8118e90:	687b      	ldr	r3, [r7, #4]
 8118e92:	2b00      	cmp	r3, #0
 8118e94:	d10b      	bne.n	8118eae <vTaskSetTimeOutState+0x26>
	__asm volatile
 8118e96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8118e9a:	f383 8811 	msr	BASEPRI, r3
 8118e9e:	f3bf 8f6f 	isb	sy
 8118ea2:	f3bf 8f4f 	dsb	sy
 8118ea6:	60fb      	str	r3, [r7, #12]
}
 8118ea8:	bf00      	nop
 8118eaa:	bf00      	nop
 8118eac:	e7fd      	b.n	8118eaa <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 8118eae:	f7fd fcb3 	bl	8116818 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 8118eb2:	4b07      	ldr	r3, [pc, #28]	@ (8118ed0 <vTaskSetTimeOutState+0x48>)
 8118eb4:	681a      	ldr	r2, [r3, #0]
 8118eb6:	687b      	ldr	r3, [r7, #4]
 8118eb8:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 8118eba:	4b06      	ldr	r3, [pc, #24]	@ (8118ed4 <vTaskSetTimeOutState+0x4c>)
 8118ebc:	681a      	ldr	r2, [r3, #0]
 8118ebe:	687b      	ldr	r3, [r7, #4]
 8118ec0:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 8118ec2:	f7fd fcdb 	bl	811687c <vPortExitCritical>
}
 8118ec6:	bf00      	nop
 8118ec8:	3710      	adds	r7, #16
 8118eca:	46bd      	mov	sp, r7
 8118ecc:	bd80      	pop	{r7, pc}
 8118ece:	bf00      	nop
 8118ed0:	1000b140 	.word	0x1000b140
 8118ed4:	1000b12c 	.word	0x1000b12c

08118ed8 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8118ed8:	b480      	push	{r7}
 8118eda:	b083      	sub	sp, #12
 8118edc:	af00      	add	r7, sp, #0
 8118ede:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8118ee0:	4b06      	ldr	r3, [pc, #24]	@ (8118efc <vTaskInternalSetTimeOutState+0x24>)
 8118ee2:	681a      	ldr	r2, [r3, #0]
 8118ee4:	687b      	ldr	r3, [r7, #4]
 8118ee6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8118ee8:	4b05      	ldr	r3, [pc, #20]	@ (8118f00 <vTaskInternalSetTimeOutState+0x28>)
 8118eea:	681a      	ldr	r2, [r3, #0]
 8118eec:	687b      	ldr	r3, [r7, #4]
 8118eee:	605a      	str	r2, [r3, #4]
}
 8118ef0:	bf00      	nop
 8118ef2:	370c      	adds	r7, #12
 8118ef4:	46bd      	mov	sp, r7
 8118ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8118efa:	4770      	bx	lr
 8118efc:	1000b140 	.word	0x1000b140
 8118f00:	1000b12c 	.word	0x1000b12c

08118f04 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8118f04:	b580      	push	{r7, lr}
 8118f06:	b088      	sub	sp, #32
 8118f08:	af00      	add	r7, sp, #0
 8118f0a:	6078      	str	r0, [r7, #4]
 8118f0c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8118f0e:	687b      	ldr	r3, [r7, #4]
 8118f10:	2b00      	cmp	r3, #0
 8118f12:	d10b      	bne.n	8118f2c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8118f14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8118f18:	f383 8811 	msr	BASEPRI, r3
 8118f1c:	f3bf 8f6f 	isb	sy
 8118f20:	f3bf 8f4f 	dsb	sy
 8118f24:	613b      	str	r3, [r7, #16]
}
 8118f26:	bf00      	nop
 8118f28:	bf00      	nop
 8118f2a:	e7fd      	b.n	8118f28 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8118f2c:	683b      	ldr	r3, [r7, #0]
 8118f2e:	2b00      	cmp	r3, #0
 8118f30:	d10b      	bne.n	8118f4a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8118f32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8118f36:	f383 8811 	msr	BASEPRI, r3
 8118f3a:	f3bf 8f6f 	isb	sy
 8118f3e:	f3bf 8f4f 	dsb	sy
 8118f42:	60fb      	str	r3, [r7, #12]
}
 8118f44:	bf00      	nop
 8118f46:	bf00      	nop
 8118f48:	e7fd      	b.n	8118f46 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8118f4a:	f7fd fc65 	bl	8116818 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8118f4e:	4b1d      	ldr	r3, [pc, #116]	@ (8118fc4 <xTaskCheckForTimeOut+0xc0>)
 8118f50:	681b      	ldr	r3, [r3, #0]
 8118f52:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8118f54:	687b      	ldr	r3, [r7, #4]
 8118f56:	685b      	ldr	r3, [r3, #4]
 8118f58:	69ba      	ldr	r2, [r7, #24]
 8118f5a:	1ad3      	subs	r3, r2, r3
 8118f5c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8118f5e:	683b      	ldr	r3, [r7, #0]
 8118f60:	681b      	ldr	r3, [r3, #0]
 8118f62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8118f66:	d102      	bne.n	8118f6e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8118f68:	2300      	movs	r3, #0
 8118f6a:	61fb      	str	r3, [r7, #28]
 8118f6c:	e023      	b.n	8118fb6 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8118f6e:	687b      	ldr	r3, [r7, #4]
 8118f70:	681a      	ldr	r2, [r3, #0]
 8118f72:	4b15      	ldr	r3, [pc, #84]	@ (8118fc8 <xTaskCheckForTimeOut+0xc4>)
 8118f74:	681b      	ldr	r3, [r3, #0]
 8118f76:	429a      	cmp	r2, r3
 8118f78:	d007      	beq.n	8118f8a <xTaskCheckForTimeOut+0x86>
 8118f7a:	687b      	ldr	r3, [r7, #4]
 8118f7c:	685b      	ldr	r3, [r3, #4]
 8118f7e:	69ba      	ldr	r2, [r7, #24]
 8118f80:	429a      	cmp	r2, r3
 8118f82:	d302      	bcc.n	8118f8a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8118f84:	2301      	movs	r3, #1
 8118f86:	61fb      	str	r3, [r7, #28]
 8118f88:	e015      	b.n	8118fb6 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8118f8a:	683b      	ldr	r3, [r7, #0]
 8118f8c:	681b      	ldr	r3, [r3, #0]
 8118f8e:	697a      	ldr	r2, [r7, #20]
 8118f90:	429a      	cmp	r2, r3
 8118f92:	d20b      	bcs.n	8118fac <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8118f94:	683b      	ldr	r3, [r7, #0]
 8118f96:	681a      	ldr	r2, [r3, #0]
 8118f98:	697b      	ldr	r3, [r7, #20]
 8118f9a:	1ad2      	subs	r2, r2, r3
 8118f9c:	683b      	ldr	r3, [r7, #0]
 8118f9e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8118fa0:	6878      	ldr	r0, [r7, #4]
 8118fa2:	f7ff ff99 	bl	8118ed8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8118fa6:	2300      	movs	r3, #0
 8118fa8:	61fb      	str	r3, [r7, #28]
 8118faa:	e004      	b.n	8118fb6 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8118fac:	683b      	ldr	r3, [r7, #0]
 8118fae:	2200      	movs	r2, #0
 8118fb0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8118fb2:	2301      	movs	r3, #1
 8118fb4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8118fb6:	f7fd fc61 	bl	811687c <vPortExitCritical>

	return xReturn;
 8118fba:	69fb      	ldr	r3, [r7, #28]
}
 8118fbc:	4618      	mov	r0, r3
 8118fbe:	3720      	adds	r7, #32
 8118fc0:	46bd      	mov	sp, r7
 8118fc2:	bd80      	pop	{r7, pc}
 8118fc4:	1000b12c 	.word	0x1000b12c
 8118fc8:	1000b140 	.word	0x1000b140

08118fcc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8118fcc:	b480      	push	{r7}
 8118fce:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8118fd0:	4b03      	ldr	r3, [pc, #12]	@ (8118fe0 <vTaskMissedYield+0x14>)
 8118fd2:	2201      	movs	r2, #1
 8118fd4:	601a      	str	r2, [r3, #0]
}
 8118fd6:	bf00      	nop
 8118fd8:	46bd      	mov	sp, r7
 8118fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8118fde:	4770      	bx	lr
 8118fe0:	1000b13c 	.word	0x1000b13c

08118fe4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8118fe4:	b580      	push	{r7, lr}
 8118fe6:	b082      	sub	sp, #8
 8118fe8:	af00      	add	r7, sp, #0
 8118fea:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8118fec:	f000 f852 	bl	8119094 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8118ff0:	4b06      	ldr	r3, [pc, #24]	@ (811900c <prvIdleTask+0x28>)
 8118ff2:	681b      	ldr	r3, [r3, #0]
 8118ff4:	2b01      	cmp	r3, #1
 8118ff6:	d9f9      	bls.n	8118fec <prvIdleTask+0x8>
			{
				taskYIELD();
 8118ff8:	4b05      	ldr	r3, [pc, #20]	@ (8119010 <prvIdleTask+0x2c>)
 8118ffa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8118ffe:	601a      	str	r2, [r3, #0]
 8119000:	f3bf 8f4f 	dsb	sy
 8119004:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8119008:	e7f0      	b.n	8118fec <prvIdleTask+0x8>
 811900a:	bf00      	nop
 811900c:	1000ac58 	.word	0x1000ac58
 8119010:	e000ed04 	.word	0xe000ed04

08119014 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8119014:	b580      	push	{r7, lr}
 8119016:	b082      	sub	sp, #8
 8119018:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 811901a:	2300      	movs	r3, #0
 811901c:	607b      	str	r3, [r7, #4]
 811901e:	e00c      	b.n	811903a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8119020:	687a      	ldr	r2, [r7, #4]
 8119022:	4613      	mov	r3, r2
 8119024:	009b      	lsls	r3, r3, #2
 8119026:	4413      	add	r3, r2
 8119028:	009b      	lsls	r3, r3, #2
 811902a:	4a12      	ldr	r2, [pc, #72]	@ (8119074 <prvInitialiseTaskLists+0x60>)
 811902c:	4413      	add	r3, r2
 811902e:	4618      	mov	r0, r3
 8119030:	f7fd fa0e 	bl	8116450 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8119034:	687b      	ldr	r3, [r7, #4]
 8119036:	3301      	adds	r3, #1
 8119038:	607b      	str	r3, [r7, #4]
 811903a:	687b      	ldr	r3, [r7, #4]
 811903c:	2b37      	cmp	r3, #55	@ 0x37
 811903e:	d9ef      	bls.n	8119020 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8119040:	480d      	ldr	r0, [pc, #52]	@ (8119078 <prvInitialiseTaskLists+0x64>)
 8119042:	f7fd fa05 	bl	8116450 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8119046:	480d      	ldr	r0, [pc, #52]	@ (811907c <prvInitialiseTaskLists+0x68>)
 8119048:	f7fd fa02 	bl	8116450 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 811904c:	480c      	ldr	r0, [pc, #48]	@ (8119080 <prvInitialiseTaskLists+0x6c>)
 811904e:	f7fd f9ff 	bl	8116450 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8119052:	480c      	ldr	r0, [pc, #48]	@ (8119084 <prvInitialiseTaskLists+0x70>)
 8119054:	f7fd f9fc 	bl	8116450 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8119058:	480b      	ldr	r0, [pc, #44]	@ (8119088 <prvInitialiseTaskLists+0x74>)
 811905a:	f7fd f9f9 	bl	8116450 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 811905e:	4b0b      	ldr	r3, [pc, #44]	@ (811908c <prvInitialiseTaskLists+0x78>)
 8119060:	4a05      	ldr	r2, [pc, #20]	@ (8119078 <prvInitialiseTaskLists+0x64>)
 8119062:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8119064:	4b0a      	ldr	r3, [pc, #40]	@ (8119090 <prvInitialiseTaskLists+0x7c>)
 8119066:	4a05      	ldr	r2, [pc, #20]	@ (811907c <prvInitialiseTaskLists+0x68>)
 8119068:	601a      	str	r2, [r3, #0]
}
 811906a:	bf00      	nop
 811906c:	3708      	adds	r7, #8
 811906e:	46bd      	mov	sp, r7
 8119070:	bd80      	pop	{r7, pc}
 8119072:	bf00      	nop
 8119074:	1000ac58 	.word	0x1000ac58
 8119078:	1000b0b8 	.word	0x1000b0b8
 811907c:	1000b0cc 	.word	0x1000b0cc
 8119080:	1000b0e8 	.word	0x1000b0e8
 8119084:	1000b0fc 	.word	0x1000b0fc
 8119088:	1000b114 	.word	0x1000b114
 811908c:	1000b0e0 	.word	0x1000b0e0
 8119090:	1000b0e4 	.word	0x1000b0e4

08119094 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8119094:	b580      	push	{r7, lr}
 8119096:	b082      	sub	sp, #8
 8119098:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 811909a:	e019      	b.n	81190d0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 811909c:	f7fd fbbc 	bl	8116818 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 81190a0:	4b10      	ldr	r3, [pc, #64]	@ (81190e4 <prvCheckTasksWaitingTermination+0x50>)
 81190a2:	68db      	ldr	r3, [r3, #12]
 81190a4:	68db      	ldr	r3, [r3, #12]
 81190a6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 81190a8:	687b      	ldr	r3, [r7, #4]
 81190aa:	3304      	adds	r3, #4
 81190ac:	4618      	mov	r0, r3
 81190ae:	f7fd fa59 	bl	8116564 <uxListRemove>
				--uxCurrentNumberOfTasks;
 81190b2:	4b0d      	ldr	r3, [pc, #52]	@ (81190e8 <prvCheckTasksWaitingTermination+0x54>)
 81190b4:	681b      	ldr	r3, [r3, #0]
 81190b6:	3b01      	subs	r3, #1
 81190b8:	4a0b      	ldr	r2, [pc, #44]	@ (81190e8 <prvCheckTasksWaitingTermination+0x54>)
 81190ba:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 81190bc:	4b0b      	ldr	r3, [pc, #44]	@ (81190ec <prvCheckTasksWaitingTermination+0x58>)
 81190be:	681b      	ldr	r3, [r3, #0]
 81190c0:	3b01      	subs	r3, #1
 81190c2:	4a0a      	ldr	r2, [pc, #40]	@ (81190ec <prvCheckTasksWaitingTermination+0x58>)
 81190c4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 81190c6:	f7fd fbd9 	bl	811687c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 81190ca:	6878      	ldr	r0, [r7, #4]
 81190cc:	f000 f810 	bl	81190f0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 81190d0:	4b06      	ldr	r3, [pc, #24]	@ (81190ec <prvCheckTasksWaitingTermination+0x58>)
 81190d2:	681b      	ldr	r3, [r3, #0]
 81190d4:	2b00      	cmp	r3, #0
 81190d6:	d1e1      	bne.n	811909c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 81190d8:	bf00      	nop
 81190da:	bf00      	nop
 81190dc:	3708      	adds	r7, #8
 81190de:	46bd      	mov	sp, r7
 81190e0:	bd80      	pop	{r7, pc}
 81190e2:	bf00      	nop
 81190e4:	1000b0fc 	.word	0x1000b0fc
 81190e8:	1000b128 	.word	0x1000b128
 81190ec:	1000b110 	.word	0x1000b110

081190f0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 81190f0:	b580      	push	{r7, lr}
 81190f2:	b084      	sub	sp, #16
 81190f4:	af00      	add	r7, sp, #0
 81190f6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 81190f8:	687b      	ldr	r3, [r7, #4]
 81190fa:	3354      	adds	r3, #84	@ 0x54
 81190fc:	4618      	mov	r0, r3
 81190fe:	f00d fe3f 	bl	8126d80 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8119102:	687b      	ldr	r3, [r7, #4]
 8119104:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8119108:	2b00      	cmp	r3, #0
 811910a:	d108      	bne.n	811911e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 811910c:	687b      	ldr	r3, [r7, #4]
 811910e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8119110:	4618      	mov	r0, r3
 8119112:	f7fd f87d 	bl	8116210 <vPortFree>
				vPortFree( pxTCB );
 8119116:	6878      	ldr	r0, [r7, #4]
 8119118:	f7fd f87a 	bl	8116210 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 811911c:	e019      	b.n	8119152 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 811911e:	687b      	ldr	r3, [r7, #4]
 8119120:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8119124:	2b01      	cmp	r3, #1
 8119126:	d103      	bne.n	8119130 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8119128:	6878      	ldr	r0, [r7, #4]
 811912a:	f7fd f871 	bl	8116210 <vPortFree>
	}
 811912e:	e010      	b.n	8119152 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8119130:	687b      	ldr	r3, [r7, #4]
 8119132:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8119136:	2b02      	cmp	r3, #2
 8119138:	d00b      	beq.n	8119152 <prvDeleteTCB+0x62>
	__asm volatile
 811913a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 811913e:	f383 8811 	msr	BASEPRI, r3
 8119142:	f3bf 8f6f 	isb	sy
 8119146:	f3bf 8f4f 	dsb	sy
 811914a:	60fb      	str	r3, [r7, #12]
}
 811914c:	bf00      	nop
 811914e:	bf00      	nop
 8119150:	e7fd      	b.n	811914e <prvDeleteTCB+0x5e>
	}
 8119152:	bf00      	nop
 8119154:	3710      	adds	r7, #16
 8119156:	46bd      	mov	sp, r7
 8119158:	bd80      	pop	{r7, pc}
	...

0811915c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 811915c:	b480      	push	{r7}
 811915e:	b083      	sub	sp, #12
 8119160:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8119162:	4b0c      	ldr	r3, [pc, #48]	@ (8119194 <prvResetNextTaskUnblockTime+0x38>)
 8119164:	681b      	ldr	r3, [r3, #0]
 8119166:	681b      	ldr	r3, [r3, #0]
 8119168:	2b00      	cmp	r3, #0
 811916a:	d104      	bne.n	8119176 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 811916c:	4b0a      	ldr	r3, [pc, #40]	@ (8119198 <prvResetNextTaskUnblockTime+0x3c>)
 811916e:	f04f 32ff 	mov.w	r2, #4294967295
 8119172:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8119174:	e008      	b.n	8119188 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8119176:	4b07      	ldr	r3, [pc, #28]	@ (8119194 <prvResetNextTaskUnblockTime+0x38>)
 8119178:	681b      	ldr	r3, [r3, #0]
 811917a:	68db      	ldr	r3, [r3, #12]
 811917c:	68db      	ldr	r3, [r3, #12]
 811917e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8119180:	687b      	ldr	r3, [r7, #4]
 8119182:	685b      	ldr	r3, [r3, #4]
 8119184:	4a04      	ldr	r2, [pc, #16]	@ (8119198 <prvResetNextTaskUnblockTime+0x3c>)
 8119186:	6013      	str	r3, [r2, #0]
}
 8119188:	bf00      	nop
 811918a:	370c      	adds	r7, #12
 811918c:	46bd      	mov	sp, r7
 811918e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8119192:	4770      	bx	lr
 8119194:	1000b0e0 	.word	0x1000b0e0
 8119198:	1000b148 	.word	0x1000b148

0811919c <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 811919c:	b480      	push	{r7}
 811919e:	b083      	sub	sp, #12
 81191a0:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 81191a2:	4b05      	ldr	r3, [pc, #20]	@ (81191b8 <xTaskGetCurrentTaskHandle+0x1c>)
 81191a4:	681b      	ldr	r3, [r3, #0]
 81191a6:	607b      	str	r3, [r7, #4]

		return xReturn;
 81191a8:	687b      	ldr	r3, [r7, #4]
	}
 81191aa:	4618      	mov	r0, r3
 81191ac:	370c      	adds	r7, #12
 81191ae:	46bd      	mov	sp, r7
 81191b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81191b4:	4770      	bx	lr
 81191b6:	bf00      	nop
 81191b8:	1000ac54 	.word	0x1000ac54

081191bc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 81191bc:	b480      	push	{r7}
 81191be:	b083      	sub	sp, #12
 81191c0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 81191c2:	4b0b      	ldr	r3, [pc, #44]	@ (81191f0 <xTaskGetSchedulerState+0x34>)
 81191c4:	681b      	ldr	r3, [r3, #0]
 81191c6:	2b00      	cmp	r3, #0
 81191c8:	d102      	bne.n	81191d0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 81191ca:	2301      	movs	r3, #1
 81191cc:	607b      	str	r3, [r7, #4]
 81191ce:	e008      	b.n	81191e2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 81191d0:	4b08      	ldr	r3, [pc, #32]	@ (81191f4 <xTaskGetSchedulerState+0x38>)
 81191d2:	681b      	ldr	r3, [r3, #0]
 81191d4:	2b00      	cmp	r3, #0
 81191d6:	d102      	bne.n	81191de <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 81191d8:	2302      	movs	r3, #2
 81191da:	607b      	str	r3, [r7, #4]
 81191dc:	e001      	b.n	81191e2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 81191de:	2300      	movs	r3, #0
 81191e0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 81191e2:	687b      	ldr	r3, [r7, #4]
	}
 81191e4:	4618      	mov	r0, r3
 81191e6:	370c      	adds	r7, #12
 81191e8:	46bd      	mov	sp, r7
 81191ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 81191ee:	4770      	bx	lr
 81191f0:	1000b134 	.word	0x1000b134
 81191f4:	1000b150 	.word	0x1000b150

081191f8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 81191f8:	b580      	push	{r7, lr}
 81191fa:	b084      	sub	sp, #16
 81191fc:	af00      	add	r7, sp, #0
 81191fe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8119200:	687b      	ldr	r3, [r7, #4]
 8119202:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8119204:	2300      	movs	r3, #0
 8119206:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8119208:	687b      	ldr	r3, [r7, #4]
 811920a:	2b00      	cmp	r3, #0
 811920c:	d051      	beq.n	81192b2 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 811920e:	68bb      	ldr	r3, [r7, #8]
 8119210:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8119212:	4b2a      	ldr	r3, [pc, #168]	@ (81192bc <xTaskPriorityInherit+0xc4>)
 8119214:	681b      	ldr	r3, [r3, #0]
 8119216:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8119218:	429a      	cmp	r2, r3
 811921a:	d241      	bcs.n	81192a0 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 811921c:	68bb      	ldr	r3, [r7, #8]
 811921e:	699b      	ldr	r3, [r3, #24]
 8119220:	2b00      	cmp	r3, #0
 8119222:	db06      	blt.n	8119232 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8119224:	4b25      	ldr	r3, [pc, #148]	@ (81192bc <xTaskPriorityInherit+0xc4>)
 8119226:	681b      	ldr	r3, [r3, #0]
 8119228:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 811922a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 811922e:	68bb      	ldr	r3, [r7, #8]
 8119230:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8119232:	68bb      	ldr	r3, [r7, #8]
 8119234:	6959      	ldr	r1, [r3, #20]
 8119236:	68bb      	ldr	r3, [r7, #8]
 8119238:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 811923a:	4613      	mov	r3, r2
 811923c:	009b      	lsls	r3, r3, #2
 811923e:	4413      	add	r3, r2
 8119240:	009b      	lsls	r3, r3, #2
 8119242:	4a1f      	ldr	r2, [pc, #124]	@ (81192c0 <xTaskPriorityInherit+0xc8>)
 8119244:	4413      	add	r3, r2
 8119246:	4299      	cmp	r1, r3
 8119248:	d122      	bne.n	8119290 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 811924a:	68bb      	ldr	r3, [r7, #8]
 811924c:	3304      	adds	r3, #4
 811924e:	4618      	mov	r0, r3
 8119250:	f7fd f988 	bl	8116564 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8119254:	4b19      	ldr	r3, [pc, #100]	@ (81192bc <xTaskPriorityInherit+0xc4>)
 8119256:	681b      	ldr	r3, [r3, #0]
 8119258:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 811925a:	68bb      	ldr	r3, [r7, #8]
 811925c:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 811925e:	68bb      	ldr	r3, [r7, #8]
 8119260:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8119262:	4b18      	ldr	r3, [pc, #96]	@ (81192c4 <xTaskPriorityInherit+0xcc>)
 8119264:	681b      	ldr	r3, [r3, #0]
 8119266:	429a      	cmp	r2, r3
 8119268:	d903      	bls.n	8119272 <xTaskPriorityInherit+0x7a>
 811926a:	68bb      	ldr	r3, [r7, #8]
 811926c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 811926e:	4a15      	ldr	r2, [pc, #84]	@ (81192c4 <xTaskPriorityInherit+0xcc>)
 8119270:	6013      	str	r3, [r2, #0]
 8119272:	68bb      	ldr	r3, [r7, #8]
 8119274:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8119276:	4613      	mov	r3, r2
 8119278:	009b      	lsls	r3, r3, #2
 811927a:	4413      	add	r3, r2
 811927c:	009b      	lsls	r3, r3, #2
 811927e:	4a10      	ldr	r2, [pc, #64]	@ (81192c0 <xTaskPriorityInherit+0xc8>)
 8119280:	441a      	add	r2, r3
 8119282:	68bb      	ldr	r3, [r7, #8]
 8119284:	3304      	adds	r3, #4
 8119286:	4619      	mov	r1, r3
 8119288:	4610      	mov	r0, r2
 811928a:	f7fd f90e 	bl	81164aa <vListInsertEnd>
 811928e:	e004      	b.n	811929a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8119290:	4b0a      	ldr	r3, [pc, #40]	@ (81192bc <xTaskPriorityInherit+0xc4>)
 8119292:	681b      	ldr	r3, [r3, #0]
 8119294:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8119296:	68bb      	ldr	r3, [r7, #8]
 8119298:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 811929a:	2301      	movs	r3, #1
 811929c:	60fb      	str	r3, [r7, #12]
 811929e:	e008      	b.n	81192b2 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 81192a0:	68bb      	ldr	r3, [r7, #8]
 81192a2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 81192a4:	4b05      	ldr	r3, [pc, #20]	@ (81192bc <xTaskPriorityInherit+0xc4>)
 81192a6:	681b      	ldr	r3, [r3, #0]
 81192a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81192aa:	429a      	cmp	r2, r3
 81192ac:	d201      	bcs.n	81192b2 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 81192ae:	2301      	movs	r3, #1
 81192b0:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 81192b2:	68fb      	ldr	r3, [r7, #12]
	}
 81192b4:	4618      	mov	r0, r3
 81192b6:	3710      	adds	r7, #16
 81192b8:	46bd      	mov	sp, r7
 81192ba:	bd80      	pop	{r7, pc}
 81192bc:	1000ac54 	.word	0x1000ac54
 81192c0:	1000ac58 	.word	0x1000ac58
 81192c4:	1000b130 	.word	0x1000b130

081192c8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 81192c8:	b580      	push	{r7, lr}
 81192ca:	b086      	sub	sp, #24
 81192cc:	af00      	add	r7, sp, #0
 81192ce:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 81192d0:	687b      	ldr	r3, [r7, #4]
 81192d2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 81192d4:	2300      	movs	r3, #0
 81192d6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 81192d8:	687b      	ldr	r3, [r7, #4]
 81192da:	2b00      	cmp	r3, #0
 81192dc:	d058      	beq.n	8119390 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 81192de:	4b2f      	ldr	r3, [pc, #188]	@ (811939c <xTaskPriorityDisinherit+0xd4>)
 81192e0:	681b      	ldr	r3, [r3, #0]
 81192e2:	693a      	ldr	r2, [r7, #16]
 81192e4:	429a      	cmp	r2, r3
 81192e6:	d00b      	beq.n	8119300 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 81192e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81192ec:	f383 8811 	msr	BASEPRI, r3
 81192f0:	f3bf 8f6f 	isb	sy
 81192f4:	f3bf 8f4f 	dsb	sy
 81192f8:	60fb      	str	r3, [r7, #12]
}
 81192fa:	bf00      	nop
 81192fc:	bf00      	nop
 81192fe:	e7fd      	b.n	81192fc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8119300:	693b      	ldr	r3, [r7, #16]
 8119302:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8119304:	2b00      	cmp	r3, #0
 8119306:	d10b      	bne.n	8119320 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8119308:	f04f 0350 	mov.w	r3, #80	@ 0x50
 811930c:	f383 8811 	msr	BASEPRI, r3
 8119310:	f3bf 8f6f 	isb	sy
 8119314:	f3bf 8f4f 	dsb	sy
 8119318:	60bb      	str	r3, [r7, #8]
}
 811931a:	bf00      	nop
 811931c:	bf00      	nop
 811931e:	e7fd      	b.n	811931c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8119320:	693b      	ldr	r3, [r7, #16]
 8119322:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8119324:	1e5a      	subs	r2, r3, #1
 8119326:	693b      	ldr	r3, [r7, #16]
 8119328:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 811932a:	693b      	ldr	r3, [r7, #16]
 811932c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 811932e:	693b      	ldr	r3, [r7, #16]
 8119330:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8119332:	429a      	cmp	r2, r3
 8119334:	d02c      	beq.n	8119390 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8119336:	693b      	ldr	r3, [r7, #16]
 8119338:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 811933a:	2b00      	cmp	r3, #0
 811933c:	d128      	bne.n	8119390 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 811933e:	693b      	ldr	r3, [r7, #16]
 8119340:	3304      	adds	r3, #4
 8119342:	4618      	mov	r0, r3
 8119344:	f7fd f90e 	bl	8116564 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8119348:	693b      	ldr	r3, [r7, #16]
 811934a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 811934c:	693b      	ldr	r3, [r7, #16]
 811934e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8119350:	693b      	ldr	r3, [r7, #16]
 8119352:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8119354:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8119358:	693b      	ldr	r3, [r7, #16]
 811935a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 811935c:	693b      	ldr	r3, [r7, #16]
 811935e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8119360:	4b0f      	ldr	r3, [pc, #60]	@ (81193a0 <xTaskPriorityDisinherit+0xd8>)
 8119362:	681b      	ldr	r3, [r3, #0]
 8119364:	429a      	cmp	r2, r3
 8119366:	d903      	bls.n	8119370 <xTaskPriorityDisinherit+0xa8>
 8119368:	693b      	ldr	r3, [r7, #16]
 811936a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 811936c:	4a0c      	ldr	r2, [pc, #48]	@ (81193a0 <xTaskPriorityDisinherit+0xd8>)
 811936e:	6013      	str	r3, [r2, #0]
 8119370:	693b      	ldr	r3, [r7, #16]
 8119372:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8119374:	4613      	mov	r3, r2
 8119376:	009b      	lsls	r3, r3, #2
 8119378:	4413      	add	r3, r2
 811937a:	009b      	lsls	r3, r3, #2
 811937c:	4a09      	ldr	r2, [pc, #36]	@ (81193a4 <xTaskPriorityDisinherit+0xdc>)
 811937e:	441a      	add	r2, r3
 8119380:	693b      	ldr	r3, [r7, #16]
 8119382:	3304      	adds	r3, #4
 8119384:	4619      	mov	r1, r3
 8119386:	4610      	mov	r0, r2
 8119388:	f7fd f88f 	bl	81164aa <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 811938c:	2301      	movs	r3, #1
 811938e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8119390:	697b      	ldr	r3, [r7, #20]
	}
 8119392:	4618      	mov	r0, r3
 8119394:	3718      	adds	r7, #24
 8119396:	46bd      	mov	sp, r7
 8119398:	bd80      	pop	{r7, pc}
 811939a:	bf00      	nop
 811939c:	1000ac54 	.word	0x1000ac54
 81193a0:	1000b130 	.word	0x1000b130
 81193a4:	1000ac58 	.word	0x1000ac58

081193a8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 81193a8:	b580      	push	{r7, lr}
 81193aa:	b088      	sub	sp, #32
 81193ac:	af00      	add	r7, sp, #0
 81193ae:	6078      	str	r0, [r7, #4]
 81193b0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 81193b2:	687b      	ldr	r3, [r7, #4]
 81193b4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 81193b6:	2301      	movs	r3, #1
 81193b8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 81193ba:	687b      	ldr	r3, [r7, #4]
 81193bc:	2b00      	cmp	r3, #0
 81193be:	d06c      	beq.n	811949a <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 81193c0:	69bb      	ldr	r3, [r7, #24]
 81193c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 81193c4:	2b00      	cmp	r3, #0
 81193c6:	d10b      	bne.n	81193e0 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 81193c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81193cc:	f383 8811 	msr	BASEPRI, r3
 81193d0:	f3bf 8f6f 	isb	sy
 81193d4:	f3bf 8f4f 	dsb	sy
 81193d8:	60fb      	str	r3, [r7, #12]
}
 81193da:	bf00      	nop
 81193dc:	bf00      	nop
 81193de:	e7fd      	b.n	81193dc <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 81193e0:	69bb      	ldr	r3, [r7, #24]
 81193e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 81193e4:	683a      	ldr	r2, [r7, #0]
 81193e6:	429a      	cmp	r2, r3
 81193e8:	d902      	bls.n	81193f0 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 81193ea:	683b      	ldr	r3, [r7, #0]
 81193ec:	61fb      	str	r3, [r7, #28]
 81193ee:	e002      	b.n	81193f6 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 81193f0:	69bb      	ldr	r3, [r7, #24]
 81193f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 81193f4:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 81193f6:	69bb      	ldr	r3, [r7, #24]
 81193f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81193fa:	69fa      	ldr	r2, [r7, #28]
 81193fc:	429a      	cmp	r2, r3
 81193fe:	d04c      	beq.n	811949a <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8119400:	69bb      	ldr	r3, [r7, #24]
 8119402:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8119404:	697a      	ldr	r2, [r7, #20]
 8119406:	429a      	cmp	r2, r3
 8119408:	d147      	bne.n	811949a <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 811940a:	4b26      	ldr	r3, [pc, #152]	@ (81194a4 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 811940c:	681b      	ldr	r3, [r3, #0]
 811940e:	69ba      	ldr	r2, [r7, #24]
 8119410:	429a      	cmp	r2, r3
 8119412:	d10b      	bne.n	811942c <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8119414:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8119418:	f383 8811 	msr	BASEPRI, r3
 811941c:	f3bf 8f6f 	isb	sy
 8119420:	f3bf 8f4f 	dsb	sy
 8119424:	60bb      	str	r3, [r7, #8]
}
 8119426:	bf00      	nop
 8119428:	bf00      	nop
 811942a:	e7fd      	b.n	8119428 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 811942c:	69bb      	ldr	r3, [r7, #24]
 811942e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8119430:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8119432:	69bb      	ldr	r3, [r7, #24]
 8119434:	69fa      	ldr	r2, [r7, #28]
 8119436:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8119438:	69bb      	ldr	r3, [r7, #24]
 811943a:	699b      	ldr	r3, [r3, #24]
 811943c:	2b00      	cmp	r3, #0
 811943e:	db04      	blt.n	811944a <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8119440:	69fb      	ldr	r3, [r7, #28]
 8119442:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8119446:	69bb      	ldr	r3, [r7, #24]
 8119448:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 811944a:	69bb      	ldr	r3, [r7, #24]
 811944c:	6959      	ldr	r1, [r3, #20]
 811944e:	693a      	ldr	r2, [r7, #16]
 8119450:	4613      	mov	r3, r2
 8119452:	009b      	lsls	r3, r3, #2
 8119454:	4413      	add	r3, r2
 8119456:	009b      	lsls	r3, r3, #2
 8119458:	4a13      	ldr	r2, [pc, #76]	@ (81194a8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 811945a:	4413      	add	r3, r2
 811945c:	4299      	cmp	r1, r3
 811945e:	d11c      	bne.n	811949a <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8119460:	69bb      	ldr	r3, [r7, #24]
 8119462:	3304      	adds	r3, #4
 8119464:	4618      	mov	r0, r3
 8119466:	f7fd f87d 	bl	8116564 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 811946a:	69bb      	ldr	r3, [r7, #24]
 811946c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 811946e:	4b0f      	ldr	r3, [pc, #60]	@ (81194ac <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8119470:	681b      	ldr	r3, [r3, #0]
 8119472:	429a      	cmp	r2, r3
 8119474:	d903      	bls.n	811947e <vTaskPriorityDisinheritAfterTimeout+0xd6>
 8119476:	69bb      	ldr	r3, [r7, #24]
 8119478:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 811947a:	4a0c      	ldr	r2, [pc, #48]	@ (81194ac <vTaskPriorityDisinheritAfterTimeout+0x104>)
 811947c:	6013      	str	r3, [r2, #0]
 811947e:	69bb      	ldr	r3, [r7, #24]
 8119480:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8119482:	4613      	mov	r3, r2
 8119484:	009b      	lsls	r3, r3, #2
 8119486:	4413      	add	r3, r2
 8119488:	009b      	lsls	r3, r3, #2
 811948a:	4a07      	ldr	r2, [pc, #28]	@ (81194a8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 811948c:	441a      	add	r2, r3
 811948e:	69bb      	ldr	r3, [r7, #24]
 8119490:	3304      	adds	r3, #4
 8119492:	4619      	mov	r1, r3
 8119494:	4610      	mov	r0, r2
 8119496:	f7fd f808 	bl	81164aa <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 811949a:	bf00      	nop
 811949c:	3720      	adds	r7, #32
 811949e:	46bd      	mov	sp, r7
 81194a0:	bd80      	pop	{r7, pc}
 81194a2:	bf00      	nop
 81194a4:	1000ac54 	.word	0x1000ac54
 81194a8:	1000ac58 	.word	0x1000ac58
 81194ac:	1000b130 	.word	0x1000b130

081194b0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 81194b0:	b480      	push	{r7}
 81194b2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 81194b4:	4b07      	ldr	r3, [pc, #28]	@ (81194d4 <pvTaskIncrementMutexHeldCount+0x24>)
 81194b6:	681b      	ldr	r3, [r3, #0]
 81194b8:	2b00      	cmp	r3, #0
 81194ba:	d004      	beq.n	81194c6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 81194bc:	4b05      	ldr	r3, [pc, #20]	@ (81194d4 <pvTaskIncrementMutexHeldCount+0x24>)
 81194be:	681b      	ldr	r3, [r3, #0]
 81194c0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 81194c2:	3201      	adds	r2, #1
 81194c4:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 81194c6:	4b03      	ldr	r3, [pc, #12]	@ (81194d4 <pvTaskIncrementMutexHeldCount+0x24>)
 81194c8:	681b      	ldr	r3, [r3, #0]
	}
 81194ca:	4618      	mov	r0, r3
 81194cc:	46bd      	mov	sp, r7
 81194ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 81194d2:	4770      	bx	lr
 81194d4:	1000ac54 	.word	0x1000ac54

081194d8 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 81194d8:	b580      	push	{r7, lr}
 81194da:	b086      	sub	sp, #24
 81194dc:	af00      	add	r7, sp, #0
 81194de:	60f8      	str	r0, [r7, #12]
 81194e0:	60b9      	str	r1, [r7, #8]
 81194e2:	607a      	str	r2, [r7, #4]
 81194e4:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 81194e6:	f7fd f997 	bl	8116818 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 81194ea:	4b29      	ldr	r3, [pc, #164]	@ (8119590 <xTaskNotifyWait+0xb8>)
 81194ec:	681b      	ldr	r3, [r3, #0]
 81194ee:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 81194f2:	b2db      	uxtb	r3, r3
 81194f4:	2b02      	cmp	r3, #2
 81194f6:	d01c      	beq.n	8119532 <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 81194f8:	4b25      	ldr	r3, [pc, #148]	@ (8119590 <xTaskNotifyWait+0xb8>)
 81194fa:	681b      	ldr	r3, [r3, #0]
 81194fc:	f8d3 10a0 	ldr.w	r1, [r3, #160]	@ 0xa0
 8119500:	68fa      	ldr	r2, [r7, #12]
 8119502:	43d2      	mvns	r2, r2
 8119504:	400a      	ands	r2, r1
 8119506:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 811950a:	4b21      	ldr	r3, [pc, #132]	@ (8119590 <xTaskNotifyWait+0xb8>)
 811950c:	681b      	ldr	r3, [r3, #0]
 811950e:	2201      	movs	r2, #1
 8119510:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

				if( xTicksToWait > ( TickType_t ) 0 )
 8119514:	683b      	ldr	r3, [r7, #0]
 8119516:	2b00      	cmp	r3, #0
 8119518:	d00b      	beq.n	8119532 <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 811951a:	2101      	movs	r1, #1
 811951c:	6838      	ldr	r0, [r7, #0]
 811951e:	f000 f947 	bl	81197b0 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8119522:	4b1c      	ldr	r3, [pc, #112]	@ (8119594 <xTaskNotifyWait+0xbc>)
 8119524:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8119528:	601a      	str	r2, [r3, #0]
 811952a:	f3bf 8f4f 	dsb	sy
 811952e:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8119532:	f7fd f9a3 	bl	811687c <vPortExitCritical>

		taskENTER_CRITICAL();
 8119536:	f7fd f96f 	bl	8116818 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 811953a:	687b      	ldr	r3, [r7, #4]
 811953c:	2b00      	cmp	r3, #0
 811953e:	d005      	beq.n	811954c <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8119540:	4b13      	ldr	r3, [pc, #76]	@ (8119590 <xTaskNotifyWait+0xb8>)
 8119542:	681b      	ldr	r3, [r3, #0]
 8119544:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8119548:	687b      	ldr	r3, [r7, #4]
 811954a:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 811954c:	4b10      	ldr	r3, [pc, #64]	@ (8119590 <xTaskNotifyWait+0xb8>)
 811954e:	681b      	ldr	r3, [r3, #0]
 8119550:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 8119554:	b2db      	uxtb	r3, r3
 8119556:	2b02      	cmp	r3, #2
 8119558:	d002      	beq.n	8119560 <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 811955a:	2300      	movs	r3, #0
 811955c:	617b      	str	r3, [r7, #20]
 811955e:	e00a      	b.n	8119576 <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8119560:	4b0b      	ldr	r3, [pc, #44]	@ (8119590 <xTaskNotifyWait+0xb8>)
 8119562:	681b      	ldr	r3, [r3, #0]
 8119564:	f8d3 10a0 	ldr.w	r1, [r3, #160]	@ 0xa0
 8119568:	68ba      	ldr	r2, [r7, #8]
 811956a:	43d2      	mvns	r2, r2
 811956c:	400a      	ands	r2, r1
 811956e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
				xReturn = pdTRUE;
 8119572:	2301      	movs	r3, #1
 8119574:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8119576:	4b06      	ldr	r3, [pc, #24]	@ (8119590 <xTaskNotifyWait+0xb8>)
 8119578:	681b      	ldr	r3, [r3, #0]
 811957a:	2200      	movs	r2, #0
 811957c:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
		}
		taskEXIT_CRITICAL();
 8119580:	f7fd f97c 	bl	811687c <vPortExitCritical>

		return xReturn;
 8119584:	697b      	ldr	r3, [r7, #20]
	}
 8119586:	4618      	mov	r0, r3
 8119588:	3718      	adds	r7, #24
 811958a:	46bd      	mov	sp, r7
 811958c:	bd80      	pop	{r7, pc}
 811958e:	bf00      	nop
 8119590:	1000ac54 	.word	0x1000ac54
 8119594:	e000ed04 	.word	0xe000ed04

08119598 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8119598:	b580      	push	{r7, lr}
 811959a:	b08e      	sub	sp, #56	@ 0x38
 811959c:	af00      	add	r7, sp, #0
 811959e:	60f8      	str	r0, [r7, #12]
 81195a0:	60b9      	str	r1, [r7, #8]
 81195a2:	603b      	str	r3, [r7, #0]
 81195a4:	4613      	mov	r3, r2
 81195a6:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 81195a8:	2301      	movs	r3, #1
 81195aa:	637b      	str	r3, [r7, #52]	@ 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 81195ac:	68fb      	ldr	r3, [r7, #12]
 81195ae:	2b00      	cmp	r3, #0
 81195b0:	d10b      	bne.n	81195ca <xTaskGenericNotifyFromISR+0x32>
	__asm volatile
 81195b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81195b6:	f383 8811 	msr	BASEPRI, r3
 81195ba:	f3bf 8f6f 	isb	sy
 81195be:	f3bf 8f4f 	dsb	sy
 81195c2:	627b      	str	r3, [r7, #36]	@ 0x24
}
 81195c4:	bf00      	nop
 81195c6:	bf00      	nop
 81195c8:	e7fd      	b.n	81195c6 <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 81195ca:	f7fd fa05 	bl	81169d8 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 81195ce:	68fb      	ldr	r3, [r7, #12]
 81195d0:	633b      	str	r3, [r7, #48]	@ 0x30
	__asm volatile
 81195d2:	f3ef 8211 	mrs	r2, BASEPRI
 81195d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81195da:	f383 8811 	msr	BASEPRI, r3
 81195de:	f3bf 8f6f 	isb	sy
 81195e2:	f3bf 8f4f 	dsb	sy
 81195e6:	623a      	str	r2, [r7, #32]
 81195e8:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 81195ea:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 81195ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 81195ee:	683b      	ldr	r3, [r7, #0]
 81195f0:	2b00      	cmp	r3, #0
 81195f2:	d004      	beq.n	81195fe <xTaskGenericNotifyFromISR+0x66>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 81195f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81195f6:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 81195fa:	683b      	ldr	r3, [r7, #0]
 81195fc:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 81195fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8119600:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 8119604:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8119608:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811960a:	2202      	movs	r2, #2
 811960c:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

			switch( eAction )
 8119610:	79fb      	ldrb	r3, [r7, #7]
 8119612:	2b04      	cmp	r3, #4
 8119614:	d82e      	bhi.n	8119674 <xTaskGenericNotifyFromISR+0xdc>
 8119616:	a201      	add	r2, pc, #4	@ (adr r2, 811961c <xTaskGenericNotifyFromISR+0x84>)
 8119618:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 811961c:	08119699 	.word	0x08119699
 8119620:	08119631 	.word	0x08119631
 8119624:	08119643 	.word	0x08119643
 8119628:	08119653 	.word	0x08119653
 811962c:	0811965d 	.word	0x0811965d
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8119630:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8119632:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8119636:	68bb      	ldr	r3, [r7, #8]
 8119638:	431a      	orrs	r2, r3
 811963a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811963c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 8119640:	e02d      	b.n	811969e <xTaskGenericNotifyFromISR+0x106>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8119642:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8119644:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8119648:	1c5a      	adds	r2, r3, #1
 811964a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811964c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 8119650:	e025      	b.n	811969e <xTaskGenericNotifyFromISR+0x106>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8119652:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8119654:	68ba      	ldr	r2, [r7, #8]
 8119656:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 811965a:	e020      	b.n	811969e <xTaskGenericNotifyFromISR+0x106>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 811965c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8119660:	2b02      	cmp	r3, #2
 8119662:	d004      	beq.n	811966e <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8119664:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8119666:	68ba      	ldr	r2, [r7, #8]
 8119668:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 811966c:	e017      	b.n	811969e <xTaskGenericNotifyFromISR+0x106>
						xReturn = pdFAIL;
 811966e:	2300      	movs	r3, #0
 8119670:	637b      	str	r3, [r7, #52]	@ 0x34
					break;
 8119672:	e014      	b.n	811969e <xTaskGenericNotifyFromISR+0x106>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8119674:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8119676:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 811967a:	f1b3 3fff 	cmp.w	r3, #4294967295
 811967e:	d00d      	beq.n	811969c <xTaskGenericNotifyFromISR+0x104>
	__asm volatile
 8119680:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8119684:	f383 8811 	msr	BASEPRI, r3
 8119688:	f3bf 8f6f 	isb	sy
 811968c:	f3bf 8f4f 	dsb	sy
 8119690:	61bb      	str	r3, [r7, #24]
}
 8119692:	bf00      	nop
 8119694:	bf00      	nop
 8119696:	e7fd      	b.n	8119694 <xTaskGenericNotifyFromISR+0xfc>
					break;
 8119698:	bf00      	nop
 811969a:	e000      	b.n	811969e <xTaskGenericNotifyFromISR+0x106>
					break;
 811969c:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 811969e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 81196a2:	2b01      	cmp	r3, #1
 81196a4:	d147      	bne.n	8119736 <xTaskGenericNotifyFromISR+0x19e>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 81196a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81196a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81196aa:	2b00      	cmp	r3, #0
 81196ac:	d00b      	beq.n	81196c6 <xTaskGenericNotifyFromISR+0x12e>
	__asm volatile
 81196ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81196b2:	f383 8811 	msr	BASEPRI, r3
 81196b6:	f3bf 8f6f 	isb	sy
 81196ba:	f3bf 8f4f 	dsb	sy
 81196be:	617b      	str	r3, [r7, #20]
}
 81196c0:	bf00      	nop
 81196c2:	bf00      	nop
 81196c4:	e7fd      	b.n	81196c2 <xTaskGenericNotifyFromISR+0x12a>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 81196c6:	4b21      	ldr	r3, [pc, #132]	@ (811974c <xTaskGenericNotifyFromISR+0x1b4>)
 81196c8:	681b      	ldr	r3, [r3, #0]
 81196ca:	2b00      	cmp	r3, #0
 81196cc:	d11d      	bne.n	811970a <xTaskGenericNotifyFromISR+0x172>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 81196ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81196d0:	3304      	adds	r3, #4
 81196d2:	4618      	mov	r0, r3
 81196d4:	f7fc ff46 	bl	8116564 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 81196d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81196da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 81196dc:	4b1c      	ldr	r3, [pc, #112]	@ (8119750 <xTaskGenericNotifyFromISR+0x1b8>)
 81196de:	681b      	ldr	r3, [r3, #0]
 81196e0:	429a      	cmp	r2, r3
 81196e2:	d903      	bls.n	81196ec <xTaskGenericNotifyFromISR+0x154>
 81196e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81196e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81196e8:	4a19      	ldr	r2, [pc, #100]	@ (8119750 <xTaskGenericNotifyFromISR+0x1b8>)
 81196ea:	6013      	str	r3, [r2, #0]
 81196ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81196ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 81196f0:	4613      	mov	r3, r2
 81196f2:	009b      	lsls	r3, r3, #2
 81196f4:	4413      	add	r3, r2
 81196f6:	009b      	lsls	r3, r3, #2
 81196f8:	4a16      	ldr	r2, [pc, #88]	@ (8119754 <xTaskGenericNotifyFromISR+0x1bc>)
 81196fa:	441a      	add	r2, r3
 81196fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81196fe:	3304      	adds	r3, #4
 8119700:	4619      	mov	r1, r3
 8119702:	4610      	mov	r0, r2
 8119704:	f7fc fed1 	bl	81164aa <vListInsertEnd>
 8119708:	e005      	b.n	8119716 <xTaskGenericNotifyFromISR+0x17e>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 811970a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811970c:	3318      	adds	r3, #24
 811970e:	4619      	mov	r1, r3
 8119710:	4811      	ldr	r0, [pc, #68]	@ (8119758 <xTaskGenericNotifyFromISR+0x1c0>)
 8119712:	f7fc feca 	bl	81164aa <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8119716:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8119718:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 811971a:	4b10      	ldr	r3, [pc, #64]	@ (811975c <xTaskGenericNotifyFromISR+0x1c4>)
 811971c:	681b      	ldr	r3, [r3, #0]
 811971e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8119720:	429a      	cmp	r2, r3
 8119722:	d908      	bls.n	8119736 <xTaskGenericNotifyFromISR+0x19e>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8119724:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8119726:	2b00      	cmp	r3, #0
 8119728:	d002      	beq.n	8119730 <xTaskGenericNotifyFromISR+0x198>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 811972a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 811972c:	2201      	movs	r2, #1
 811972e:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8119730:	4b0b      	ldr	r3, [pc, #44]	@ (8119760 <xTaskGenericNotifyFromISR+0x1c8>)
 8119732:	2201      	movs	r2, #1
 8119734:	601a      	str	r2, [r3, #0]
 8119736:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8119738:	613b      	str	r3, [r7, #16]
	__asm volatile
 811973a:	693b      	ldr	r3, [r7, #16]
 811973c:	f383 8811 	msr	BASEPRI, r3
}
 8119740:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 8119742:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
	}
 8119744:	4618      	mov	r0, r3
 8119746:	3738      	adds	r7, #56	@ 0x38
 8119748:	46bd      	mov	sp, r7
 811974a:	bd80      	pop	{r7, pc}
 811974c:	1000b150 	.word	0x1000b150
 8119750:	1000b130 	.word	0x1000b130
 8119754:	1000ac58 	.word	0x1000ac58
 8119758:	1000b0e8 	.word	0x1000b0e8
 811975c:	1000ac54 	.word	0x1000ac54
 8119760:	1000b13c 	.word	0x1000b13c

08119764 <xTaskNotifyStateClear>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask )
	{
 8119764:	b580      	push	{r7, lr}
 8119766:	b084      	sub	sp, #16
 8119768:	af00      	add	r7, sp, #0
 811976a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	BaseType_t xReturn;

		/* If null is passed in here then it is the calling task that is having
		its notification state cleared. */
		pxTCB = prvGetTCBFromHandle( xTask );
 811976c:	687b      	ldr	r3, [r7, #4]
 811976e:	2b00      	cmp	r3, #0
 8119770:	d102      	bne.n	8119778 <xTaskNotifyStateClear+0x14>
 8119772:	4b0e      	ldr	r3, [pc, #56]	@ (81197ac <xTaskNotifyStateClear+0x48>)
 8119774:	681b      	ldr	r3, [r3, #0]
 8119776:	e000      	b.n	811977a <xTaskNotifyStateClear+0x16>
 8119778:	687b      	ldr	r3, [r7, #4]
 811977a:	60bb      	str	r3, [r7, #8]

		taskENTER_CRITICAL();
 811977c:	f7fd f84c 	bl	8116818 <vPortEnterCritical>
		{
			if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
 8119780:	68bb      	ldr	r3, [r7, #8]
 8119782:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 8119786:	b2db      	uxtb	r3, r3
 8119788:	2b02      	cmp	r3, #2
 811978a:	d106      	bne.n	811979a <xTaskNotifyStateClear+0x36>
			{
				pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 811978c:	68bb      	ldr	r3, [r7, #8]
 811978e:	2200      	movs	r2, #0
 8119790:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
				xReturn = pdPASS;
 8119794:	2301      	movs	r3, #1
 8119796:	60fb      	str	r3, [r7, #12]
 8119798:	e001      	b.n	811979e <xTaskNotifyStateClear+0x3a>
			}
			else
			{
				xReturn = pdFAIL;
 811979a:	2300      	movs	r3, #0
 811979c:	60fb      	str	r3, [r7, #12]
			}
		}
		taskEXIT_CRITICAL();
 811979e:	f7fd f86d 	bl	811687c <vPortExitCritical>

		return xReturn;
 81197a2:	68fb      	ldr	r3, [r7, #12]
	}
 81197a4:	4618      	mov	r0, r3
 81197a6:	3710      	adds	r7, #16
 81197a8:	46bd      	mov	sp, r7
 81197aa:	bd80      	pop	{r7, pc}
 81197ac:	1000ac54 	.word	0x1000ac54

081197b0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 81197b0:	b580      	push	{r7, lr}
 81197b2:	b084      	sub	sp, #16
 81197b4:	af00      	add	r7, sp, #0
 81197b6:	6078      	str	r0, [r7, #4]
 81197b8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 81197ba:	4b21      	ldr	r3, [pc, #132]	@ (8119840 <prvAddCurrentTaskToDelayedList+0x90>)
 81197bc:	681b      	ldr	r3, [r3, #0]
 81197be:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 81197c0:	4b20      	ldr	r3, [pc, #128]	@ (8119844 <prvAddCurrentTaskToDelayedList+0x94>)
 81197c2:	681b      	ldr	r3, [r3, #0]
 81197c4:	3304      	adds	r3, #4
 81197c6:	4618      	mov	r0, r3
 81197c8:	f7fc fecc 	bl	8116564 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 81197cc:	687b      	ldr	r3, [r7, #4]
 81197ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 81197d2:	d10a      	bne.n	81197ea <prvAddCurrentTaskToDelayedList+0x3a>
 81197d4:	683b      	ldr	r3, [r7, #0]
 81197d6:	2b00      	cmp	r3, #0
 81197d8:	d007      	beq.n	81197ea <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 81197da:	4b1a      	ldr	r3, [pc, #104]	@ (8119844 <prvAddCurrentTaskToDelayedList+0x94>)
 81197dc:	681b      	ldr	r3, [r3, #0]
 81197de:	3304      	adds	r3, #4
 81197e0:	4619      	mov	r1, r3
 81197e2:	4819      	ldr	r0, [pc, #100]	@ (8119848 <prvAddCurrentTaskToDelayedList+0x98>)
 81197e4:	f7fc fe61 	bl	81164aa <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 81197e8:	e026      	b.n	8119838 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 81197ea:	68fa      	ldr	r2, [r7, #12]
 81197ec:	687b      	ldr	r3, [r7, #4]
 81197ee:	4413      	add	r3, r2
 81197f0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 81197f2:	4b14      	ldr	r3, [pc, #80]	@ (8119844 <prvAddCurrentTaskToDelayedList+0x94>)
 81197f4:	681b      	ldr	r3, [r3, #0]
 81197f6:	68ba      	ldr	r2, [r7, #8]
 81197f8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 81197fa:	68ba      	ldr	r2, [r7, #8]
 81197fc:	68fb      	ldr	r3, [r7, #12]
 81197fe:	429a      	cmp	r2, r3
 8119800:	d209      	bcs.n	8119816 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8119802:	4b12      	ldr	r3, [pc, #72]	@ (811984c <prvAddCurrentTaskToDelayedList+0x9c>)
 8119804:	681a      	ldr	r2, [r3, #0]
 8119806:	4b0f      	ldr	r3, [pc, #60]	@ (8119844 <prvAddCurrentTaskToDelayedList+0x94>)
 8119808:	681b      	ldr	r3, [r3, #0]
 811980a:	3304      	adds	r3, #4
 811980c:	4619      	mov	r1, r3
 811980e:	4610      	mov	r0, r2
 8119810:	f7fc fe6f 	bl	81164f2 <vListInsert>
}
 8119814:	e010      	b.n	8119838 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8119816:	4b0e      	ldr	r3, [pc, #56]	@ (8119850 <prvAddCurrentTaskToDelayedList+0xa0>)
 8119818:	681a      	ldr	r2, [r3, #0]
 811981a:	4b0a      	ldr	r3, [pc, #40]	@ (8119844 <prvAddCurrentTaskToDelayedList+0x94>)
 811981c:	681b      	ldr	r3, [r3, #0]
 811981e:	3304      	adds	r3, #4
 8119820:	4619      	mov	r1, r3
 8119822:	4610      	mov	r0, r2
 8119824:	f7fc fe65 	bl	81164f2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8119828:	4b0a      	ldr	r3, [pc, #40]	@ (8119854 <prvAddCurrentTaskToDelayedList+0xa4>)
 811982a:	681b      	ldr	r3, [r3, #0]
 811982c:	68ba      	ldr	r2, [r7, #8]
 811982e:	429a      	cmp	r2, r3
 8119830:	d202      	bcs.n	8119838 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8119832:	4a08      	ldr	r2, [pc, #32]	@ (8119854 <prvAddCurrentTaskToDelayedList+0xa4>)
 8119834:	68bb      	ldr	r3, [r7, #8]
 8119836:	6013      	str	r3, [r2, #0]
}
 8119838:	bf00      	nop
 811983a:	3710      	adds	r7, #16
 811983c:	46bd      	mov	sp, r7
 811983e:	bd80      	pop	{r7, pc}
 8119840:	1000b12c 	.word	0x1000b12c
 8119844:	1000ac54 	.word	0x1000ac54
 8119848:	1000b114 	.word	0x1000b114
 811984c:	1000b0e4 	.word	0x1000b0e4
 8119850:	1000b0e0 	.word	0x1000b0e0
 8119854:	1000b148 	.word	0x1000b148

08119858 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8119858:	b580      	push	{r7, lr}
 811985a:	b08a      	sub	sp, #40	@ 0x28
 811985c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 811985e:	2300      	movs	r3, #0
 8119860:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8119862:	f000 fb13 	bl	8119e8c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8119866:	4b1d      	ldr	r3, [pc, #116]	@ (81198dc <xTimerCreateTimerTask+0x84>)
 8119868:	681b      	ldr	r3, [r3, #0]
 811986a:	2b00      	cmp	r3, #0
 811986c:	d021      	beq.n	81198b2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 811986e:	2300      	movs	r3, #0
 8119870:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8119872:	2300      	movs	r3, #0
 8119874:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8119876:	1d3a      	adds	r2, r7, #4
 8119878:	f107 0108 	add.w	r1, r7, #8
 811987c:	f107 030c 	add.w	r3, r7, #12
 8119880:	4618      	mov	r0, r3
 8119882:	f7fc fbdd 	bl	8116040 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8119886:	6879      	ldr	r1, [r7, #4]
 8119888:	68bb      	ldr	r3, [r7, #8]
 811988a:	68fa      	ldr	r2, [r7, #12]
 811988c:	9202      	str	r2, [sp, #8]
 811988e:	9301      	str	r3, [sp, #4]
 8119890:	2302      	movs	r3, #2
 8119892:	9300      	str	r3, [sp, #0]
 8119894:	2300      	movs	r3, #0
 8119896:	460a      	mov	r2, r1
 8119898:	4911      	ldr	r1, [pc, #68]	@ (81198e0 <xTimerCreateTimerTask+0x88>)
 811989a:	4812      	ldr	r0, [pc, #72]	@ (81198e4 <xTimerCreateTimerTask+0x8c>)
 811989c:	f7fe fdec 	bl	8118478 <xTaskCreateStatic>
 81198a0:	4603      	mov	r3, r0
 81198a2:	4a11      	ldr	r2, [pc, #68]	@ (81198e8 <xTimerCreateTimerTask+0x90>)
 81198a4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 81198a6:	4b10      	ldr	r3, [pc, #64]	@ (81198e8 <xTimerCreateTimerTask+0x90>)
 81198a8:	681b      	ldr	r3, [r3, #0]
 81198aa:	2b00      	cmp	r3, #0
 81198ac:	d001      	beq.n	81198b2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 81198ae:	2301      	movs	r3, #1
 81198b0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 81198b2:	697b      	ldr	r3, [r7, #20]
 81198b4:	2b00      	cmp	r3, #0
 81198b6:	d10b      	bne.n	81198d0 <xTimerCreateTimerTask+0x78>
	__asm volatile
 81198b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81198bc:	f383 8811 	msr	BASEPRI, r3
 81198c0:	f3bf 8f6f 	isb	sy
 81198c4:	f3bf 8f4f 	dsb	sy
 81198c8:	613b      	str	r3, [r7, #16]
}
 81198ca:	bf00      	nop
 81198cc:	bf00      	nop
 81198ce:	e7fd      	b.n	81198cc <xTimerCreateTimerTask+0x74>
	return xReturn;
 81198d0:	697b      	ldr	r3, [r7, #20]
}
 81198d2:	4618      	mov	r0, r3
 81198d4:	3718      	adds	r7, #24
 81198d6:	46bd      	mov	sp, r7
 81198d8:	bd80      	pop	{r7, pc}
 81198da:	bf00      	nop
 81198dc:	1000b184 	.word	0x1000b184
 81198e0:	08127e10 	.word	0x08127e10
 81198e4:	08119a25 	.word	0x08119a25
 81198e8:	1000b188 	.word	0x1000b188

081198ec <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 81198ec:	b580      	push	{r7, lr}
 81198ee:	b08a      	sub	sp, #40	@ 0x28
 81198f0:	af00      	add	r7, sp, #0
 81198f2:	60f8      	str	r0, [r7, #12]
 81198f4:	60b9      	str	r1, [r7, #8]
 81198f6:	607a      	str	r2, [r7, #4]
 81198f8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 81198fa:	2300      	movs	r3, #0
 81198fc:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 81198fe:	68fb      	ldr	r3, [r7, #12]
 8119900:	2b00      	cmp	r3, #0
 8119902:	d10b      	bne.n	811991c <xTimerGenericCommand+0x30>
	__asm volatile
 8119904:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8119908:	f383 8811 	msr	BASEPRI, r3
 811990c:	f3bf 8f6f 	isb	sy
 8119910:	f3bf 8f4f 	dsb	sy
 8119914:	623b      	str	r3, [r7, #32]
}
 8119916:	bf00      	nop
 8119918:	bf00      	nop
 811991a:	e7fd      	b.n	8119918 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 811991c:	4b19      	ldr	r3, [pc, #100]	@ (8119984 <xTimerGenericCommand+0x98>)
 811991e:	681b      	ldr	r3, [r3, #0]
 8119920:	2b00      	cmp	r3, #0
 8119922:	d02a      	beq.n	811997a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8119924:	68bb      	ldr	r3, [r7, #8]
 8119926:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8119928:	687b      	ldr	r3, [r7, #4]
 811992a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 811992c:	68fb      	ldr	r3, [r7, #12]
 811992e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8119930:	68bb      	ldr	r3, [r7, #8]
 8119932:	2b05      	cmp	r3, #5
 8119934:	dc18      	bgt.n	8119968 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8119936:	f7ff fc41 	bl	81191bc <xTaskGetSchedulerState>
 811993a:	4603      	mov	r3, r0
 811993c:	2b02      	cmp	r3, #2
 811993e:	d109      	bne.n	8119954 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8119940:	4b10      	ldr	r3, [pc, #64]	@ (8119984 <xTimerGenericCommand+0x98>)
 8119942:	6818      	ldr	r0, [r3, #0]
 8119944:	f107 0110 	add.w	r1, r7, #16
 8119948:	2300      	movs	r3, #0
 811994a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 811994c:	f7fd faf2 	bl	8116f34 <xQueueGenericSend>
 8119950:	6278      	str	r0, [r7, #36]	@ 0x24
 8119952:	e012      	b.n	811997a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8119954:	4b0b      	ldr	r3, [pc, #44]	@ (8119984 <xTimerGenericCommand+0x98>)
 8119956:	6818      	ldr	r0, [r3, #0]
 8119958:	f107 0110 	add.w	r1, r7, #16
 811995c:	2300      	movs	r3, #0
 811995e:	2200      	movs	r2, #0
 8119960:	f7fd fae8 	bl	8116f34 <xQueueGenericSend>
 8119964:	6278      	str	r0, [r7, #36]	@ 0x24
 8119966:	e008      	b.n	811997a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8119968:	4b06      	ldr	r3, [pc, #24]	@ (8119984 <xTimerGenericCommand+0x98>)
 811996a:	6818      	ldr	r0, [r3, #0]
 811996c:	f107 0110 	add.w	r1, r7, #16
 8119970:	2300      	movs	r3, #0
 8119972:	683a      	ldr	r2, [r7, #0]
 8119974:	f7fd fbe0 	bl	8117138 <xQueueGenericSendFromISR>
 8119978:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 811997a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 811997c:	4618      	mov	r0, r3
 811997e:	3728      	adds	r7, #40	@ 0x28
 8119980:	46bd      	mov	sp, r7
 8119982:	bd80      	pop	{r7, pc}
 8119984:	1000b184 	.word	0x1000b184

08119988 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8119988:	b580      	push	{r7, lr}
 811998a:	b088      	sub	sp, #32
 811998c:	af02      	add	r7, sp, #8
 811998e:	6078      	str	r0, [r7, #4]
 8119990:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8119992:	4b23      	ldr	r3, [pc, #140]	@ (8119a20 <prvProcessExpiredTimer+0x98>)
 8119994:	681b      	ldr	r3, [r3, #0]
 8119996:	68db      	ldr	r3, [r3, #12]
 8119998:	68db      	ldr	r3, [r3, #12]
 811999a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 811999c:	697b      	ldr	r3, [r7, #20]
 811999e:	3304      	adds	r3, #4
 81199a0:	4618      	mov	r0, r3
 81199a2:	f7fc fddf 	bl	8116564 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 81199a6:	697b      	ldr	r3, [r7, #20]
 81199a8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 81199ac:	f003 0304 	and.w	r3, r3, #4
 81199b0:	2b00      	cmp	r3, #0
 81199b2:	d023      	beq.n	81199fc <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 81199b4:	697b      	ldr	r3, [r7, #20]
 81199b6:	699a      	ldr	r2, [r3, #24]
 81199b8:	687b      	ldr	r3, [r7, #4]
 81199ba:	18d1      	adds	r1, r2, r3
 81199bc:	687b      	ldr	r3, [r7, #4]
 81199be:	683a      	ldr	r2, [r7, #0]
 81199c0:	6978      	ldr	r0, [r7, #20]
 81199c2:	f000 f8d5 	bl	8119b70 <prvInsertTimerInActiveList>
 81199c6:	4603      	mov	r3, r0
 81199c8:	2b00      	cmp	r3, #0
 81199ca:	d020      	beq.n	8119a0e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 81199cc:	2300      	movs	r3, #0
 81199ce:	9300      	str	r3, [sp, #0]
 81199d0:	2300      	movs	r3, #0
 81199d2:	687a      	ldr	r2, [r7, #4]
 81199d4:	2100      	movs	r1, #0
 81199d6:	6978      	ldr	r0, [r7, #20]
 81199d8:	f7ff ff88 	bl	81198ec <xTimerGenericCommand>
 81199dc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 81199de:	693b      	ldr	r3, [r7, #16]
 81199e0:	2b00      	cmp	r3, #0
 81199e2:	d114      	bne.n	8119a0e <prvProcessExpiredTimer+0x86>
	__asm volatile
 81199e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81199e8:	f383 8811 	msr	BASEPRI, r3
 81199ec:	f3bf 8f6f 	isb	sy
 81199f0:	f3bf 8f4f 	dsb	sy
 81199f4:	60fb      	str	r3, [r7, #12]
}
 81199f6:	bf00      	nop
 81199f8:	bf00      	nop
 81199fa:	e7fd      	b.n	81199f8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 81199fc:	697b      	ldr	r3, [r7, #20]
 81199fe:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8119a02:	f023 0301 	bic.w	r3, r3, #1
 8119a06:	b2da      	uxtb	r2, r3
 8119a08:	697b      	ldr	r3, [r7, #20]
 8119a0a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8119a0e:	697b      	ldr	r3, [r7, #20]
 8119a10:	6a1b      	ldr	r3, [r3, #32]
 8119a12:	6978      	ldr	r0, [r7, #20]
 8119a14:	4798      	blx	r3
}
 8119a16:	bf00      	nop
 8119a18:	3718      	adds	r7, #24
 8119a1a:	46bd      	mov	sp, r7
 8119a1c:	bd80      	pop	{r7, pc}
 8119a1e:	bf00      	nop
 8119a20:	1000b17c 	.word	0x1000b17c

08119a24 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8119a24:	b580      	push	{r7, lr}
 8119a26:	b084      	sub	sp, #16
 8119a28:	af00      	add	r7, sp, #0
 8119a2a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8119a2c:	f107 0308 	add.w	r3, r7, #8
 8119a30:	4618      	mov	r0, r3
 8119a32:	f000 f859 	bl	8119ae8 <prvGetNextExpireTime>
 8119a36:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8119a38:	68bb      	ldr	r3, [r7, #8]
 8119a3a:	4619      	mov	r1, r3
 8119a3c:	68f8      	ldr	r0, [r7, #12]
 8119a3e:	f000 f805 	bl	8119a4c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8119a42:	f000 f8d7 	bl	8119bf4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8119a46:	bf00      	nop
 8119a48:	e7f0      	b.n	8119a2c <prvTimerTask+0x8>
	...

08119a4c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8119a4c:	b580      	push	{r7, lr}
 8119a4e:	b084      	sub	sp, #16
 8119a50:	af00      	add	r7, sp, #0
 8119a52:	6078      	str	r0, [r7, #4]
 8119a54:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8119a56:	f7fe ff73 	bl	8118940 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8119a5a:	f107 0308 	add.w	r3, r7, #8
 8119a5e:	4618      	mov	r0, r3
 8119a60:	f000 f866 	bl	8119b30 <prvSampleTimeNow>
 8119a64:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8119a66:	68bb      	ldr	r3, [r7, #8]
 8119a68:	2b00      	cmp	r3, #0
 8119a6a:	d130      	bne.n	8119ace <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8119a6c:	683b      	ldr	r3, [r7, #0]
 8119a6e:	2b00      	cmp	r3, #0
 8119a70:	d10a      	bne.n	8119a88 <prvProcessTimerOrBlockTask+0x3c>
 8119a72:	687a      	ldr	r2, [r7, #4]
 8119a74:	68fb      	ldr	r3, [r7, #12]
 8119a76:	429a      	cmp	r2, r3
 8119a78:	d806      	bhi.n	8119a88 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8119a7a:	f7fe ff6f 	bl	811895c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8119a7e:	68f9      	ldr	r1, [r7, #12]
 8119a80:	6878      	ldr	r0, [r7, #4]
 8119a82:	f7ff ff81 	bl	8119988 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8119a86:	e024      	b.n	8119ad2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8119a88:	683b      	ldr	r3, [r7, #0]
 8119a8a:	2b00      	cmp	r3, #0
 8119a8c:	d008      	beq.n	8119aa0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8119a8e:	4b13      	ldr	r3, [pc, #76]	@ (8119adc <prvProcessTimerOrBlockTask+0x90>)
 8119a90:	681b      	ldr	r3, [r3, #0]
 8119a92:	681b      	ldr	r3, [r3, #0]
 8119a94:	2b00      	cmp	r3, #0
 8119a96:	d101      	bne.n	8119a9c <prvProcessTimerOrBlockTask+0x50>
 8119a98:	2301      	movs	r3, #1
 8119a9a:	e000      	b.n	8119a9e <prvProcessTimerOrBlockTask+0x52>
 8119a9c:	2300      	movs	r3, #0
 8119a9e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8119aa0:	4b0f      	ldr	r3, [pc, #60]	@ (8119ae0 <prvProcessTimerOrBlockTask+0x94>)
 8119aa2:	6818      	ldr	r0, [r3, #0]
 8119aa4:	687a      	ldr	r2, [r7, #4]
 8119aa6:	68fb      	ldr	r3, [r7, #12]
 8119aa8:	1ad3      	subs	r3, r2, r3
 8119aaa:	683a      	ldr	r2, [r7, #0]
 8119aac:	4619      	mov	r1, r3
 8119aae:	f7fe f885 	bl	8117bbc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8119ab2:	f7fe ff53 	bl	811895c <xTaskResumeAll>
 8119ab6:	4603      	mov	r3, r0
 8119ab8:	2b00      	cmp	r3, #0
 8119aba:	d10a      	bne.n	8119ad2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8119abc:	4b09      	ldr	r3, [pc, #36]	@ (8119ae4 <prvProcessTimerOrBlockTask+0x98>)
 8119abe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8119ac2:	601a      	str	r2, [r3, #0]
 8119ac4:	f3bf 8f4f 	dsb	sy
 8119ac8:	f3bf 8f6f 	isb	sy
}
 8119acc:	e001      	b.n	8119ad2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8119ace:	f7fe ff45 	bl	811895c <xTaskResumeAll>
}
 8119ad2:	bf00      	nop
 8119ad4:	3710      	adds	r7, #16
 8119ad6:	46bd      	mov	sp, r7
 8119ad8:	bd80      	pop	{r7, pc}
 8119ada:	bf00      	nop
 8119adc:	1000b180 	.word	0x1000b180
 8119ae0:	1000b184 	.word	0x1000b184
 8119ae4:	e000ed04 	.word	0xe000ed04

08119ae8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8119ae8:	b480      	push	{r7}
 8119aea:	b085      	sub	sp, #20
 8119aec:	af00      	add	r7, sp, #0
 8119aee:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8119af0:	4b0e      	ldr	r3, [pc, #56]	@ (8119b2c <prvGetNextExpireTime+0x44>)
 8119af2:	681b      	ldr	r3, [r3, #0]
 8119af4:	681b      	ldr	r3, [r3, #0]
 8119af6:	2b00      	cmp	r3, #0
 8119af8:	d101      	bne.n	8119afe <prvGetNextExpireTime+0x16>
 8119afa:	2201      	movs	r2, #1
 8119afc:	e000      	b.n	8119b00 <prvGetNextExpireTime+0x18>
 8119afe:	2200      	movs	r2, #0
 8119b00:	687b      	ldr	r3, [r7, #4]
 8119b02:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8119b04:	687b      	ldr	r3, [r7, #4]
 8119b06:	681b      	ldr	r3, [r3, #0]
 8119b08:	2b00      	cmp	r3, #0
 8119b0a:	d105      	bne.n	8119b18 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8119b0c:	4b07      	ldr	r3, [pc, #28]	@ (8119b2c <prvGetNextExpireTime+0x44>)
 8119b0e:	681b      	ldr	r3, [r3, #0]
 8119b10:	68db      	ldr	r3, [r3, #12]
 8119b12:	681b      	ldr	r3, [r3, #0]
 8119b14:	60fb      	str	r3, [r7, #12]
 8119b16:	e001      	b.n	8119b1c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8119b18:	2300      	movs	r3, #0
 8119b1a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8119b1c:	68fb      	ldr	r3, [r7, #12]
}
 8119b1e:	4618      	mov	r0, r3
 8119b20:	3714      	adds	r7, #20
 8119b22:	46bd      	mov	sp, r7
 8119b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8119b28:	4770      	bx	lr
 8119b2a:	bf00      	nop
 8119b2c:	1000b17c 	.word	0x1000b17c

08119b30 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8119b30:	b580      	push	{r7, lr}
 8119b32:	b084      	sub	sp, #16
 8119b34:	af00      	add	r7, sp, #0
 8119b36:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8119b38:	f7fe ffae 	bl	8118a98 <xTaskGetTickCount>
 8119b3c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8119b3e:	4b0b      	ldr	r3, [pc, #44]	@ (8119b6c <prvSampleTimeNow+0x3c>)
 8119b40:	681b      	ldr	r3, [r3, #0]
 8119b42:	68fa      	ldr	r2, [r7, #12]
 8119b44:	429a      	cmp	r2, r3
 8119b46:	d205      	bcs.n	8119b54 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8119b48:	f000 f93a 	bl	8119dc0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8119b4c:	687b      	ldr	r3, [r7, #4]
 8119b4e:	2201      	movs	r2, #1
 8119b50:	601a      	str	r2, [r3, #0]
 8119b52:	e002      	b.n	8119b5a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8119b54:	687b      	ldr	r3, [r7, #4]
 8119b56:	2200      	movs	r2, #0
 8119b58:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8119b5a:	4a04      	ldr	r2, [pc, #16]	@ (8119b6c <prvSampleTimeNow+0x3c>)
 8119b5c:	68fb      	ldr	r3, [r7, #12]
 8119b5e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8119b60:	68fb      	ldr	r3, [r7, #12]
}
 8119b62:	4618      	mov	r0, r3
 8119b64:	3710      	adds	r7, #16
 8119b66:	46bd      	mov	sp, r7
 8119b68:	bd80      	pop	{r7, pc}
 8119b6a:	bf00      	nop
 8119b6c:	1000b18c 	.word	0x1000b18c

08119b70 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8119b70:	b580      	push	{r7, lr}
 8119b72:	b086      	sub	sp, #24
 8119b74:	af00      	add	r7, sp, #0
 8119b76:	60f8      	str	r0, [r7, #12]
 8119b78:	60b9      	str	r1, [r7, #8]
 8119b7a:	607a      	str	r2, [r7, #4]
 8119b7c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8119b7e:	2300      	movs	r3, #0
 8119b80:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8119b82:	68fb      	ldr	r3, [r7, #12]
 8119b84:	68ba      	ldr	r2, [r7, #8]
 8119b86:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8119b88:	68fb      	ldr	r3, [r7, #12]
 8119b8a:	68fa      	ldr	r2, [r7, #12]
 8119b8c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8119b8e:	68ba      	ldr	r2, [r7, #8]
 8119b90:	687b      	ldr	r3, [r7, #4]
 8119b92:	429a      	cmp	r2, r3
 8119b94:	d812      	bhi.n	8119bbc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8119b96:	687a      	ldr	r2, [r7, #4]
 8119b98:	683b      	ldr	r3, [r7, #0]
 8119b9a:	1ad2      	subs	r2, r2, r3
 8119b9c:	68fb      	ldr	r3, [r7, #12]
 8119b9e:	699b      	ldr	r3, [r3, #24]
 8119ba0:	429a      	cmp	r2, r3
 8119ba2:	d302      	bcc.n	8119baa <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8119ba4:	2301      	movs	r3, #1
 8119ba6:	617b      	str	r3, [r7, #20]
 8119ba8:	e01b      	b.n	8119be2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8119baa:	4b10      	ldr	r3, [pc, #64]	@ (8119bec <prvInsertTimerInActiveList+0x7c>)
 8119bac:	681a      	ldr	r2, [r3, #0]
 8119bae:	68fb      	ldr	r3, [r7, #12]
 8119bb0:	3304      	adds	r3, #4
 8119bb2:	4619      	mov	r1, r3
 8119bb4:	4610      	mov	r0, r2
 8119bb6:	f7fc fc9c 	bl	81164f2 <vListInsert>
 8119bba:	e012      	b.n	8119be2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8119bbc:	687a      	ldr	r2, [r7, #4]
 8119bbe:	683b      	ldr	r3, [r7, #0]
 8119bc0:	429a      	cmp	r2, r3
 8119bc2:	d206      	bcs.n	8119bd2 <prvInsertTimerInActiveList+0x62>
 8119bc4:	68ba      	ldr	r2, [r7, #8]
 8119bc6:	683b      	ldr	r3, [r7, #0]
 8119bc8:	429a      	cmp	r2, r3
 8119bca:	d302      	bcc.n	8119bd2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8119bcc:	2301      	movs	r3, #1
 8119bce:	617b      	str	r3, [r7, #20]
 8119bd0:	e007      	b.n	8119be2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8119bd2:	4b07      	ldr	r3, [pc, #28]	@ (8119bf0 <prvInsertTimerInActiveList+0x80>)
 8119bd4:	681a      	ldr	r2, [r3, #0]
 8119bd6:	68fb      	ldr	r3, [r7, #12]
 8119bd8:	3304      	adds	r3, #4
 8119bda:	4619      	mov	r1, r3
 8119bdc:	4610      	mov	r0, r2
 8119bde:	f7fc fc88 	bl	81164f2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8119be2:	697b      	ldr	r3, [r7, #20]
}
 8119be4:	4618      	mov	r0, r3
 8119be6:	3718      	adds	r7, #24
 8119be8:	46bd      	mov	sp, r7
 8119bea:	bd80      	pop	{r7, pc}
 8119bec:	1000b180 	.word	0x1000b180
 8119bf0:	1000b17c 	.word	0x1000b17c

08119bf4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8119bf4:	b580      	push	{r7, lr}
 8119bf6:	b08e      	sub	sp, #56	@ 0x38
 8119bf8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8119bfa:	e0ce      	b.n	8119d9a <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8119bfc:	687b      	ldr	r3, [r7, #4]
 8119bfe:	2b00      	cmp	r3, #0
 8119c00:	da19      	bge.n	8119c36 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8119c02:	1d3b      	adds	r3, r7, #4
 8119c04:	3304      	adds	r3, #4
 8119c06:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8119c08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8119c0a:	2b00      	cmp	r3, #0
 8119c0c:	d10b      	bne.n	8119c26 <prvProcessReceivedCommands+0x32>
	__asm volatile
 8119c0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8119c12:	f383 8811 	msr	BASEPRI, r3
 8119c16:	f3bf 8f6f 	isb	sy
 8119c1a:	f3bf 8f4f 	dsb	sy
 8119c1e:	61fb      	str	r3, [r7, #28]
}
 8119c20:	bf00      	nop
 8119c22:	bf00      	nop
 8119c24:	e7fd      	b.n	8119c22 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8119c26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8119c28:	681b      	ldr	r3, [r3, #0]
 8119c2a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8119c2c:	6850      	ldr	r0, [r2, #4]
 8119c2e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8119c30:	6892      	ldr	r2, [r2, #8]
 8119c32:	4611      	mov	r1, r2
 8119c34:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8119c36:	687b      	ldr	r3, [r7, #4]
 8119c38:	2b00      	cmp	r3, #0
 8119c3a:	f2c0 80ae 	blt.w	8119d9a <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8119c3e:	68fb      	ldr	r3, [r7, #12]
 8119c40:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8119c42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8119c44:	695b      	ldr	r3, [r3, #20]
 8119c46:	2b00      	cmp	r3, #0
 8119c48:	d004      	beq.n	8119c54 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8119c4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8119c4c:	3304      	adds	r3, #4
 8119c4e:	4618      	mov	r0, r3
 8119c50:	f7fc fc88 	bl	8116564 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8119c54:	463b      	mov	r3, r7
 8119c56:	4618      	mov	r0, r3
 8119c58:	f7ff ff6a 	bl	8119b30 <prvSampleTimeNow>
 8119c5c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8119c5e:	687b      	ldr	r3, [r7, #4]
 8119c60:	2b09      	cmp	r3, #9
 8119c62:	f200 8097 	bhi.w	8119d94 <prvProcessReceivedCommands+0x1a0>
 8119c66:	a201      	add	r2, pc, #4	@ (adr r2, 8119c6c <prvProcessReceivedCommands+0x78>)
 8119c68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8119c6c:	08119c95 	.word	0x08119c95
 8119c70:	08119c95 	.word	0x08119c95
 8119c74:	08119c95 	.word	0x08119c95
 8119c78:	08119d0b 	.word	0x08119d0b
 8119c7c:	08119d1f 	.word	0x08119d1f
 8119c80:	08119d6b 	.word	0x08119d6b
 8119c84:	08119c95 	.word	0x08119c95
 8119c88:	08119c95 	.word	0x08119c95
 8119c8c:	08119d0b 	.word	0x08119d0b
 8119c90:	08119d1f 	.word	0x08119d1f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8119c94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8119c96:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8119c9a:	f043 0301 	orr.w	r3, r3, #1
 8119c9e:	b2da      	uxtb	r2, r3
 8119ca0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8119ca2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8119ca6:	68ba      	ldr	r2, [r7, #8]
 8119ca8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8119caa:	699b      	ldr	r3, [r3, #24]
 8119cac:	18d1      	adds	r1, r2, r3
 8119cae:	68bb      	ldr	r3, [r7, #8]
 8119cb0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8119cb2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8119cb4:	f7ff ff5c 	bl	8119b70 <prvInsertTimerInActiveList>
 8119cb8:	4603      	mov	r3, r0
 8119cba:	2b00      	cmp	r3, #0
 8119cbc:	d06c      	beq.n	8119d98 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8119cbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8119cc0:	6a1b      	ldr	r3, [r3, #32]
 8119cc2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8119cc4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8119cc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8119cc8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8119ccc:	f003 0304 	and.w	r3, r3, #4
 8119cd0:	2b00      	cmp	r3, #0
 8119cd2:	d061      	beq.n	8119d98 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8119cd4:	68ba      	ldr	r2, [r7, #8]
 8119cd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8119cd8:	699b      	ldr	r3, [r3, #24]
 8119cda:	441a      	add	r2, r3
 8119cdc:	2300      	movs	r3, #0
 8119cde:	9300      	str	r3, [sp, #0]
 8119ce0:	2300      	movs	r3, #0
 8119ce2:	2100      	movs	r1, #0
 8119ce4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8119ce6:	f7ff fe01 	bl	81198ec <xTimerGenericCommand>
 8119cea:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8119cec:	6a3b      	ldr	r3, [r7, #32]
 8119cee:	2b00      	cmp	r3, #0
 8119cf0:	d152      	bne.n	8119d98 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8119cf2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8119cf6:	f383 8811 	msr	BASEPRI, r3
 8119cfa:	f3bf 8f6f 	isb	sy
 8119cfe:	f3bf 8f4f 	dsb	sy
 8119d02:	61bb      	str	r3, [r7, #24]
}
 8119d04:	bf00      	nop
 8119d06:	bf00      	nop
 8119d08:	e7fd      	b.n	8119d06 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8119d0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8119d0c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8119d10:	f023 0301 	bic.w	r3, r3, #1
 8119d14:	b2da      	uxtb	r2, r3
 8119d16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8119d18:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8119d1c:	e03d      	b.n	8119d9a <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8119d1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8119d20:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8119d24:	f043 0301 	orr.w	r3, r3, #1
 8119d28:	b2da      	uxtb	r2, r3
 8119d2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8119d2c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8119d30:	68ba      	ldr	r2, [r7, #8]
 8119d32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8119d34:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8119d36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8119d38:	699b      	ldr	r3, [r3, #24]
 8119d3a:	2b00      	cmp	r3, #0
 8119d3c:	d10b      	bne.n	8119d56 <prvProcessReceivedCommands+0x162>
	__asm volatile
 8119d3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8119d42:	f383 8811 	msr	BASEPRI, r3
 8119d46:	f3bf 8f6f 	isb	sy
 8119d4a:	f3bf 8f4f 	dsb	sy
 8119d4e:	617b      	str	r3, [r7, #20]
}
 8119d50:	bf00      	nop
 8119d52:	bf00      	nop
 8119d54:	e7fd      	b.n	8119d52 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8119d56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8119d58:	699a      	ldr	r2, [r3, #24]
 8119d5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8119d5c:	18d1      	adds	r1, r2, r3
 8119d5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8119d60:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8119d62:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8119d64:	f7ff ff04 	bl	8119b70 <prvInsertTimerInActiveList>
					break;
 8119d68:	e017      	b.n	8119d9a <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8119d6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8119d6c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8119d70:	f003 0302 	and.w	r3, r3, #2
 8119d74:	2b00      	cmp	r3, #0
 8119d76:	d103      	bne.n	8119d80 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8119d78:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8119d7a:	f7fc fa49 	bl	8116210 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8119d7e:	e00c      	b.n	8119d9a <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8119d80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8119d82:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8119d86:	f023 0301 	bic.w	r3, r3, #1
 8119d8a:	b2da      	uxtb	r2, r3
 8119d8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8119d8e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8119d92:	e002      	b.n	8119d9a <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8119d94:	bf00      	nop
 8119d96:	e000      	b.n	8119d9a <prvProcessReceivedCommands+0x1a6>
					break;
 8119d98:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8119d9a:	4b08      	ldr	r3, [pc, #32]	@ (8119dbc <prvProcessReceivedCommands+0x1c8>)
 8119d9c:	681b      	ldr	r3, [r3, #0]
 8119d9e:	1d39      	adds	r1, r7, #4
 8119da0:	2200      	movs	r2, #0
 8119da2:	4618      	mov	r0, r3
 8119da4:	f7fd faf6 	bl	8117394 <xQueueReceive>
 8119da8:	4603      	mov	r3, r0
 8119daa:	2b00      	cmp	r3, #0
 8119dac:	f47f af26 	bne.w	8119bfc <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8119db0:	bf00      	nop
 8119db2:	bf00      	nop
 8119db4:	3730      	adds	r7, #48	@ 0x30
 8119db6:	46bd      	mov	sp, r7
 8119db8:	bd80      	pop	{r7, pc}
 8119dba:	bf00      	nop
 8119dbc:	1000b184 	.word	0x1000b184

08119dc0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8119dc0:	b580      	push	{r7, lr}
 8119dc2:	b088      	sub	sp, #32
 8119dc4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8119dc6:	e049      	b.n	8119e5c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8119dc8:	4b2e      	ldr	r3, [pc, #184]	@ (8119e84 <prvSwitchTimerLists+0xc4>)
 8119dca:	681b      	ldr	r3, [r3, #0]
 8119dcc:	68db      	ldr	r3, [r3, #12]
 8119dce:	681b      	ldr	r3, [r3, #0]
 8119dd0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8119dd2:	4b2c      	ldr	r3, [pc, #176]	@ (8119e84 <prvSwitchTimerLists+0xc4>)
 8119dd4:	681b      	ldr	r3, [r3, #0]
 8119dd6:	68db      	ldr	r3, [r3, #12]
 8119dd8:	68db      	ldr	r3, [r3, #12]
 8119dda:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8119ddc:	68fb      	ldr	r3, [r7, #12]
 8119dde:	3304      	adds	r3, #4
 8119de0:	4618      	mov	r0, r3
 8119de2:	f7fc fbbf 	bl	8116564 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8119de6:	68fb      	ldr	r3, [r7, #12]
 8119de8:	6a1b      	ldr	r3, [r3, #32]
 8119dea:	68f8      	ldr	r0, [r7, #12]
 8119dec:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8119dee:	68fb      	ldr	r3, [r7, #12]
 8119df0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8119df4:	f003 0304 	and.w	r3, r3, #4
 8119df8:	2b00      	cmp	r3, #0
 8119dfa:	d02f      	beq.n	8119e5c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8119dfc:	68fb      	ldr	r3, [r7, #12]
 8119dfe:	699b      	ldr	r3, [r3, #24]
 8119e00:	693a      	ldr	r2, [r7, #16]
 8119e02:	4413      	add	r3, r2
 8119e04:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8119e06:	68ba      	ldr	r2, [r7, #8]
 8119e08:	693b      	ldr	r3, [r7, #16]
 8119e0a:	429a      	cmp	r2, r3
 8119e0c:	d90e      	bls.n	8119e2c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8119e0e:	68fb      	ldr	r3, [r7, #12]
 8119e10:	68ba      	ldr	r2, [r7, #8]
 8119e12:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8119e14:	68fb      	ldr	r3, [r7, #12]
 8119e16:	68fa      	ldr	r2, [r7, #12]
 8119e18:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8119e1a:	4b1a      	ldr	r3, [pc, #104]	@ (8119e84 <prvSwitchTimerLists+0xc4>)
 8119e1c:	681a      	ldr	r2, [r3, #0]
 8119e1e:	68fb      	ldr	r3, [r7, #12]
 8119e20:	3304      	adds	r3, #4
 8119e22:	4619      	mov	r1, r3
 8119e24:	4610      	mov	r0, r2
 8119e26:	f7fc fb64 	bl	81164f2 <vListInsert>
 8119e2a:	e017      	b.n	8119e5c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8119e2c:	2300      	movs	r3, #0
 8119e2e:	9300      	str	r3, [sp, #0]
 8119e30:	2300      	movs	r3, #0
 8119e32:	693a      	ldr	r2, [r7, #16]
 8119e34:	2100      	movs	r1, #0
 8119e36:	68f8      	ldr	r0, [r7, #12]
 8119e38:	f7ff fd58 	bl	81198ec <xTimerGenericCommand>
 8119e3c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8119e3e:	687b      	ldr	r3, [r7, #4]
 8119e40:	2b00      	cmp	r3, #0
 8119e42:	d10b      	bne.n	8119e5c <prvSwitchTimerLists+0x9c>
	__asm volatile
 8119e44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8119e48:	f383 8811 	msr	BASEPRI, r3
 8119e4c:	f3bf 8f6f 	isb	sy
 8119e50:	f3bf 8f4f 	dsb	sy
 8119e54:	603b      	str	r3, [r7, #0]
}
 8119e56:	bf00      	nop
 8119e58:	bf00      	nop
 8119e5a:	e7fd      	b.n	8119e58 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8119e5c:	4b09      	ldr	r3, [pc, #36]	@ (8119e84 <prvSwitchTimerLists+0xc4>)
 8119e5e:	681b      	ldr	r3, [r3, #0]
 8119e60:	681b      	ldr	r3, [r3, #0]
 8119e62:	2b00      	cmp	r3, #0
 8119e64:	d1b0      	bne.n	8119dc8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8119e66:	4b07      	ldr	r3, [pc, #28]	@ (8119e84 <prvSwitchTimerLists+0xc4>)
 8119e68:	681b      	ldr	r3, [r3, #0]
 8119e6a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8119e6c:	4b06      	ldr	r3, [pc, #24]	@ (8119e88 <prvSwitchTimerLists+0xc8>)
 8119e6e:	681b      	ldr	r3, [r3, #0]
 8119e70:	4a04      	ldr	r2, [pc, #16]	@ (8119e84 <prvSwitchTimerLists+0xc4>)
 8119e72:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8119e74:	4a04      	ldr	r2, [pc, #16]	@ (8119e88 <prvSwitchTimerLists+0xc8>)
 8119e76:	697b      	ldr	r3, [r7, #20]
 8119e78:	6013      	str	r3, [r2, #0]
}
 8119e7a:	bf00      	nop
 8119e7c:	3718      	adds	r7, #24
 8119e7e:	46bd      	mov	sp, r7
 8119e80:	bd80      	pop	{r7, pc}
 8119e82:	bf00      	nop
 8119e84:	1000b17c 	.word	0x1000b17c
 8119e88:	1000b180 	.word	0x1000b180

08119e8c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8119e8c:	b580      	push	{r7, lr}
 8119e8e:	b082      	sub	sp, #8
 8119e90:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8119e92:	f7fc fcc1 	bl	8116818 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8119e96:	4b15      	ldr	r3, [pc, #84]	@ (8119eec <prvCheckForValidListAndQueue+0x60>)
 8119e98:	681b      	ldr	r3, [r3, #0]
 8119e9a:	2b00      	cmp	r3, #0
 8119e9c:	d120      	bne.n	8119ee0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8119e9e:	4814      	ldr	r0, [pc, #80]	@ (8119ef0 <prvCheckForValidListAndQueue+0x64>)
 8119ea0:	f7fc fad6 	bl	8116450 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8119ea4:	4813      	ldr	r0, [pc, #76]	@ (8119ef4 <prvCheckForValidListAndQueue+0x68>)
 8119ea6:	f7fc fad3 	bl	8116450 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8119eaa:	4b13      	ldr	r3, [pc, #76]	@ (8119ef8 <prvCheckForValidListAndQueue+0x6c>)
 8119eac:	4a10      	ldr	r2, [pc, #64]	@ (8119ef0 <prvCheckForValidListAndQueue+0x64>)
 8119eae:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8119eb0:	4b12      	ldr	r3, [pc, #72]	@ (8119efc <prvCheckForValidListAndQueue+0x70>)
 8119eb2:	4a10      	ldr	r2, [pc, #64]	@ (8119ef4 <prvCheckForValidListAndQueue+0x68>)
 8119eb4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8119eb6:	2300      	movs	r3, #0
 8119eb8:	9300      	str	r3, [sp, #0]
 8119eba:	4b11      	ldr	r3, [pc, #68]	@ (8119f00 <prvCheckForValidListAndQueue+0x74>)
 8119ebc:	4a11      	ldr	r2, [pc, #68]	@ (8119f04 <prvCheckForValidListAndQueue+0x78>)
 8119ebe:	2110      	movs	r1, #16
 8119ec0:	200a      	movs	r0, #10
 8119ec2:	f7fc fe35 	bl	8116b30 <xQueueGenericCreateStatic>
 8119ec6:	4603      	mov	r3, r0
 8119ec8:	4a08      	ldr	r2, [pc, #32]	@ (8119eec <prvCheckForValidListAndQueue+0x60>)
 8119eca:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8119ecc:	4b07      	ldr	r3, [pc, #28]	@ (8119eec <prvCheckForValidListAndQueue+0x60>)
 8119ece:	681b      	ldr	r3, [r3, #0]
 8119ed0:	2b00      	cmp	r3, #0
 8119ed2:	d005      	beq.n	8119ee0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8119ed4:	4b05      	ldr	r3, [pc, #20]	@ (8119eec <prvCheckForValidListAndQueue+0x60>)
 8119ed6:	681b      	ldr	r3, [r3, #0]
 8119ed8:	490b      	ldr	r1, [pc, #44]	@ (8119f08 <prvCheckForValidListAndQueue+0x7c>)
 8119eda:	4618      	mov	r0, r3
 8119edc:	f7fd fe1a 	bl	8117b14 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8119ee0:	f7fc fccc 	bl	811687c <vPortExitCritical>
}
 8119ee4:	bf00      	nop
 8119ee6:	46bd      	mov	sp, r7
 8119ee8:	bd80      	pop	{r7, pc}
 8119eea:	bf00      	nop
 8119eec:	1000b184 	.word	0x1000b184
 8119ef0:	1000b154 	.word	0x1000b154
 8119ef4:	1000b168 	.word	0x1000b168
 8119ef8:	1000b17c 	.word	0x1000b17c
 8119efc:	1000b180 	.word	0x1000b180
 8119f00:	1000b230 	.word	0x1000b230
 8119f04:	1000b190 	.word	0x1000b190
 8119f08:	08127e18 	.word	0x08127e18

08119f0c <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8119f0c:	b480      	push	{r7}
 8119f0e:	b083      	sub	sp, #12
 8119f10:	af00      	add	r7, sp, #0
 8119f12:	4603      	mov	r3, r0
 8119f14:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8119f16:	88fb      	ldrh	r3, [r7, #6]
 8119f18:	021b      	lsls	r3, r3, #8
 8119f1a:	b21a      	sxth	r2, r3
 8119f1c:	88fb      	ldrh	r3, [r7, #6]
 8119f1e:	0a1b      	lsrs	r3, r3, #8
 8119f20:	b29b      	uxth	r3, r3
 8119f22:	b21b      	sxth	r3, r3
 8119f24:	4313      	orrs	r3, r2
 8119f26:	b21b      	sxth	r3, r3
 8119f28:	b29b      	uxth	r3, r3
}
 8119f2a:	4618      	mov	r0, r3
 8119f2c:	370c      	adds	r7, #12
 8119f2e:	46bd      	mov	sp, r7
 8119f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8119f34:	4770      	bx	lr

08119f36 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8119f36:	b480      	push	{r7}
 8119f38:	b083      	sub	sp, #12
 8119f3a:	af00      	add	r7, sp, #0
 8119f3c:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8119f3e:	687b      	ldr	r3, [r7, #4]
 8119f40:	061a      	lsls	r2, r3, #24
 8119f42:	687b      	ldr	r3, [r7, #4]
 8119f44:	021b      	lsls	r3, r3, #8
 8119f46:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8119f4a:	431a      	orrs	r2, r3
 8119f4c:	687b      	ldr	r3, [r7, #4]
 8119f4e:	0a1b      	lsrs	r3, r3, #8
 8119f50:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8119f54:	431a      	orrs	r2, r3
 8119f56:	687b      	ldr	r3, [r7, #4]
 8119f58:	0e1b      	lsrs	r3, r3, #24
 8119f5a:	4313      	orrs	r3, r2
}
 8119f5c:	4618      	mov	r0, r3
 8119f5e:	370c      	adds	r7, #12
 8119f60:	46bd      	mov	sp, r7
 8119f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8119f66:	4770      	bx	lr

08119f68 <free_etharp_q>:
 *
 * @param q a qeueue of etharp_q_entry's to free
 */
static void
free_etharp_q(struct etharp_q_entry *q)
{
 8119f68:	b580      	push	{r7, lr}
 8119f6a:	b084      	sub	sp, #16
 8119f6c:	af00      	add	r7, sp, #0
 8119f6e:	6078      	str	r0, [r7, #4]
  struct etharp_q_entry *r;
  LWIP_ASSERT("q != NULL", q != NULL);
 8119f70:	687b      	ldr	r3, [r7, #4]
 8119f72:	2b00      	cmp	r3, #0
 8119f74:	d11e      	bne.n	8119fb4 <free_etharp_q+0x4c>
 8119f76:	4b13      	ldr	r3, [pc, #76]	@ (8119fc4 <free_etharp_q+0x5c>)
 8119f78:	2296      	movs	r2, #150	@ 0x96
 8119f7a:	4913      	ldr	r1, [pc, #76]	@ (8119fc8 <free_etharp_q+0x60>)
 8119f7c:	4813      	ldr	r0, [pc, #76]	@ (8119fcc <free_etharp_q+0x64>)
 8119f7e:	f00c fd79 	bl	8126a74 <iprintf>
  while (q) {
 8119f82:	e017      	b.n	8119fb4 <free_etharp_q+0x4c>
    r = q;
 8119f84:	687b      	ldr	r3, [r7, #4]
 8119f86:	60fb      	str	r3, [r7, #12]
    q = q->next;
 8119f88:	687b      	ldr	r3, [r7, #4]
 8119f8a:	681b      	ldr	r3, [r3, #0]
 8119f8c:	607b      	str	r3, [r7, #4]
    LWIP_ASSERT("r->p != NULL", (r->p != NULL));
 8119f8e:	68fb      	ldr	r3, [r7, #12]
 8119f90:	685b      	ldr	r3, [r3, #4]
 8119f92:	2b00      	cmp	r3, #0
 8119f94:	d105      	bne.n	8119fa2 <free_etharp_q+0x3a>
 8119f96:	4b0b      	ldr	r3, [pc, #44]	@ (8119fc4 <free_etharp_q+0x5c>)
 8119f98:	229a      	movs	r2, #154	@ 0x9a
 8119f9a:	490d      	ldr	r1, [pc, #52]	@ (8119fd0 <free_etharp_q+0x68>)
 8119f9c:	480b      	ldr	r0, [pc, #44]	@ (8119fcc <free_etharp_q+0x64>)
 8119f9e:	f00c fd69 	bl	8126a74 <iprintf>
    pbuf_free(r->p);
 8119fa2:	68fb      	ldr	r3, [r7, #12]
 8119fa4:	685b      	ldr	r3, [r3, #4]
 8119fa6:	4618      	mov	r0, r3
 8119fa8:	f004 f9b8 	bl	811e31c <pbuf_free>
    memp_free(MEMP_ARP_QUEUE, r);
 8119fac:	68f9      	ldr	r1, [r7, #12]
 8119fae:	2009      	movs	r0, #9
 8119fb0:	f003 fb12 	bl	811d5d8 <memp_free>
  while (q) {
 8119fb4:	687b      	ldr	r3, [r7, #4]
 8119fb6:	2b00      	cmp	r3, #0
 8119fb8:	d1e4      	bne.n	8119f84 <free_etharp_q+0x1c>
  }
}
 8119fba:	bf00      	nop
 8119fbc:	bf00      	nop
 8119fbe:	3710      	adds	r7, #16
 8119fc0:	46bd      	mov	sp, r7
 8119fc2:	bd80      	pop	{r7, pc}
 8119fc4:	08127e20 	.word	0x08127e20
 8119fc8:	08127e9c 	.word	0x08127e9c
 8119fcc:	08127ea8 	.word	0x08127ea8
 8119fd0:	08127ed0 	.word	0x08127ed0

08119fd4 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8119fd4:	b580      	push	{r7, lr}
 8119fd6:	b082      	sub	sp, #8
 8119fd8:	af00      	add	r7, sp, #0
 8119fda:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8119fdc:	4915      	ldr	r1, [pc, #84]	@ (811a034 <etharp_free_entry+0x60>)
 8119fde:	687a      	ldr	r2, [r7, #4]
 8119fe0:	4613      	mov	r3, r2
 8119fe2:	005b      	lsls	r3, r3, #1
 8119fe4:	4413      	add	r3, r2
 8119fe6:	00db      	lsls	r3, r3, #3
 8119fe8:	440b      	add	r3, r1
 8119fea:	681b      	ldr	r3, [r3, #0]
 8119fec:	2b00      	cmp	r3, #0
 8119fee:	d013      	beq.n	811a018 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8119ff0:	4910      	ldr	r1, [pc, #64]	@ (811a034 <etharp_free_entry+0x60>)
 8119ff2:	687a      	ldr	r2, [r7, #4]
 8119ff4:	4613      	mov	r3, r2
 8119ff6:	005b      	lsls	r3, r3, #1
 8119ff8:	4413      	add	r3, r2
 8119ffa:	00db      	lsls	r3, r3, #3
 8119ffc:	440b      	add	r3, r1
 8119ffe:	681b      	ldr	r3, [r3, #0]
 811a000:	4618      	mov	r0, r3
 811a002:	f7ff ffb1 	bl	8119f68 <free_etharp_q>
    arp_table[i].q = NULL;
 811a006:	490b      	ldr	r1, [pc, #44]	@ (811a034 <etharp_free_entry+0x60>)
 811a008:	687a      	ldr	r2, [r7, #4]
 811a00a:	4613      	mov	r3, r2
 811a00c:	005b      	lsls	r3, r3, #1
 811a00e:	4413      	add	r3, r2
 811a010:	00db      	lsls	r3, r3, #3
 811a012:	440b      	add	r3, r1
 811a014:	2200      	movs	r2, #0
 811a016:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 811a018:	4906      	ldr	r1, [pc, #24]	@ (811a034 <etharp_free_entry+0x60>)
 811a01a:	687a      	ldr	r2, [r7, #4]
 811a01c:	4613      	mov	r3, r2
 811a01e:	005b      	lsls	r3, r3, #1
 811a020:	4413      	add	r3, r2
 811a022:	00db      	lsls	r3, r3, #3
 811a024:	440b      	add	r3, r1
 811a026:	3314      	adds	r3, #20
 811a028:	2200      	movs	r2, #0
 811a02a:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 811a02c:	bf00      	nop
 811a02e:	3708      	adds	r7, #8
 811a030:	46bd      	mov	sp, r7
 811a032:	bd80      	pop	{r7, pc}
 811a034:	1000b280 	.word	0x1000b280

0811a038 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 811a038:	b580      	push	{r7, lr}
 811a03a:	b082      	sub	sp, #8
 811a03c:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 811a03e:	2300      	movs	r3, #0
 811a040:	607b      	str	r3, [r7, #4]
 811a042:	e09a      	b.n	811a17a <etharp_tmr+0x142>
    u8_t state = arp_table[i].state;
 811a044:	4951      	ldr	r1, [pc, #324]	@ (811a18c <etharp_tmr+0x154>)
 811a046:	687a      	ldr	r2, [r7, #4]
 811a048:	4613      	mov	r3, r2
 811a04a:	005b      	lsls	r3, r3, #1
 811a04c:	4413      	add	r3, r2
 811a04e:	00db      	lsls	r3, r3, #3
 811a050:	440b      	add	r3, r1
 811a052:	3314      	adds	r3, #20
 811a054:	781b      	ldrb	r3, [r3, #0]
 811a056:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 811a058:	78fb      	ldrb	r3, [r7, #3]
 811a05a:	2b00      	cmp	r3, #0
 811a05c:	f000 808a 	beq.w	811a174 <etharp_tmr+0x13c>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
 811a060:	78fb      	ldrb	r3, [r7, #3]
 811a062:	2b05      	cmp	r3, #5
 811a064:	f000 8086 	beq.w	811a174 <etharp_tmr+0x13c>
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 811a068:	4948      	ldr	r1, [pc, #288]	@ (811a18c <etharp_tmr+0x154>)
 811a06a:	687a      	ldr	r2, [r7, #4]
 811a06c:	4613      	mov	r3, r2
 811a06e:	005b      	lsls	r3, r3, #1
 811a070:	4413      	add	r3, r2
 811a072:	00db      	lsls	r3, r3, #3
 811a074:	440b      	add	r3, r1
 811a076:	3312      	adds	r3, #18
 811a078:	881b      	ldrh	r3, [r3, #0]
 811a07a:	3301      	adds	r3, #1
 811a07c:	b298      	uxth	r0, r3
 811a07e:	4943      	ldr	r1, [pc, #268]	@ (811a18c <etharp_tmr+0x154>)
 811a080:	687a      	ldr	r2, [r7, #4]
 811a082:	4613      	mov	r3, r2
 811a084:	005b      	lsls	r3, r3, #1
 811a086:	4413      	add	r3, r2
 811a088:	00db      	lsls	r3, r3, #3
 811a08a:	440b      	add	r3, r1
 811a08c:	3312      	adds	r3, #18
 811a08e:	4602      	mov	r2, r0
 811a090:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 811a092:	493e      	ldr	r1, [pc, #248]	@ (811a18c <etharp_tmr+0x154>)
 811a094:	687a      	ldr	r2, [r7, #4]
 811a096:	4613      	mov	r3, r2
 811a098:	005b      	lsls	r3, r3, #1
 811a09a:	4413      	add	r3, r2
 811a09c:	00db      	lsls	r3, r3, #3
 811a09e:	440b      	add	r3, r1
 811a0a0:	3312      	adds	r3, #18
 811a0a2:	881b      	ldrh	r3, [r3, #0]
 811a0a4:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 811a0a8:	d215      	bcs.n	811a0d6 <etharp_tmr+0x9e>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 811a0aa:	4938      	ldr	r1, [pc, #224]	@ (811a18c <etharp_tmr+0x154>)
 811a0ac:	687a      	ldr	r2, [r7, #4]
 811a0ae:	4613      	mov	r3, r2
 811a0b0:	005b      	lsls	r3, r3, #1
 811a0b2:	4413      	add	r3, r2
 811a0b4:	00db      	lsls	r3, r3, #3
 811a0b6:	440b      	add	r3, r1
 811a0b8:	3314      	adds	r3, #20
 811a0ba:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 811a0bc:	2b01      	cmp	r3, #1
 811a0be:	d10e      	bne.n	811a0de <etharp_tmr+0xa6>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 811a0c0:	4932      	ldr	r1, [pc, #200]	@ (811a18c <etharp_tmr+0x154>)
 811a0c2:	687a      	ldr	r2, [r7, #4]
 811a0c4:	4613      	mov	r3, r2
 811a0c6:	005b      	lsls	r3, r3, #1
 811a0c8:	4413      	add	r3, r2
 811a0ca:	00db      	lsls	r3, r3, #3
 811a0cc:	440b      	add	r3, r1
 811a0ce:	3312      	adds	r3, #18
 811a0d0:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 811a0d2:	2b04      	cmp	r3, #4
 811a0d4:	d903      	bls.n	811a0de <etharp_tmr+0xa6>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 811a0d6:	6878      	ldr	r0, [r7, #4]
 811a0d8:	f7ff ff7c 	bl	8119fd4 <etharp_free_entry>
 811a0dc:	e04a      	b.n	811a174 <etharp_tmr+0x13c>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 811a0de:	492b      	ldr	r1, [pc, #172]	@ (811a18c <etharp_tmr+0x154>)
 811a0e0:	687a      	ldr	r2, [r7, #4]
 811a0e2:	4613      	mov	r3, r2
 811a0e4:	005b      	lsls	r3, r3, #1
 811a0e6:	4413      	add	r3, r2
 811a0e8:	00db      	lsls	r3, r3, #3
 811a0ea:	440b      	add	r3, r1
 811a0ec:	3314      	adds	r3, #20
 811a0ee:	781b      	ldrb	r3, [r3, #0]
 811a0f0:	2b03      	cmp	r3, #3
 811a0f2:	d10a      	bne.n	811a10a <etharp_tmr+0xd2>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 811a0f4:	4925      	ldr	r1, [pc, #148]	@ (811a18c <etharp_tmr+0x154>)
 811a0f6:	687a      	ldr	r2, [r7, #4]
 811a0f8:	4613      	mov	r3, r2
 811a0fa:	005b      	lsls	r3, r3, #1
 811a0fc:	4413      	add	r3, r2
 811a0fe:	00db      	lsls	r3, r3, #3
 811a100:	440b      	add	r3, r1
 811a102:	3314      	adds	r3, #20
 811a104:	2204      	movs	r2, #4
 811a106:	701a      	strb	r2, [r3, #0]
 811a108:	e034      	b.n	811a174 <etharp_tmr+0x13c>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 811a10a:	4920      	ldr	r1, [pc, #128]	@ (811a18c <etharp_tmr+0x154>)
 811a10c:	687a      	ldr	r2, [r7, #4]
 811a10e:	4613      	mov	r3, r2
 811a110:	005b      	lsls	r3, r3, #1
 811a112:	4413      	add	r3, r2
 811a114:	00db      	lsls	r3, r3, #3
 811a116:	440b      	add	r3, r1
 811a118:	3314      	adds	r3, #20
 811a11a:	781b      	ldrb	r3, [r3, #0]
 811a11c:	2b04      	cmp	r3, #4
 811a11e:	d10a      	bne.n	811a136 <etharp_tmr+0xfe>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 811a120:	491a      	ldr	r1, [pc, #104]	@ (811a18c <etharp_tmr+0x154>)
 811a122:	687a      	ldr	r2, [r7, #4]
 811a124:	4613      	mov	r3, r2
 811a126:	005b      	lsls	r3, r3, #1
 811a128:	4413      	add	r3, r2
 811a12a:	00db      	lsls	r3, r3, #3
 811a12c:	440b      	add	r3, r1
 811a12e:	3314      	adds	r3, #20
 811a130:	2202      	movs	r2, #2
 811a132:	701a      	strb	r2, [r3, #0]
 811a134:	e01e      	b.n	811a174 <etharp_tmr+0x13c>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 811a136:	4915      	ldr	r1, [pc, #84]	@ (811a18c <etharp_tmr+0x154>)
 811a138:	687a      	ldr	r2, [r7, #4]
 811a13a:	4613      	mov	r3, r2
 811a13c:	005b      	lsls	r3, r3, #1
 811a13e:	4413      	add	r3, r2
 811a140:	00db      	lsls	r3, r3, #3
 811a142:	440b      	add	r3, r1
 811a144:	3314      	adds	r3, #20
 811a146:	781b      	ldrb	r3, [r3, #0]
 811a148:	2b01      	cmp	r3, #1
 811a14a:	d113      	bne.n	811a174 <etharp_tmr+0x13c>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 811a14c:	490f      	ldr	r1, [pc, #60]	@ (811a18c <etharp_tmr+0x154>)
 811a14e:	687a      	ldr	r2, [r7, #4]
 811a150:	4613      	mov	r3, r2
 811a152:	005b      	lsls	r3, r3, #1
 811a154:	4413      	add	r3, r2
 811a156:	00db      	lsls	r3, r3, #3
 811a158:	440b      	add	r3, r1
 811a15a:	3308      	adds	r3, #8
 811a15c:	6818      	ldr	r0, [r3, #0]
 811a15e:	687a      	ldr	r2, [r7, #4]
 811a160:	4613      	mov	r3, r2
 811a162:	005b      	lsls	r3, r3, #1
 811a164:	4413      	add	r3, r2
 811a166:	00db      	lsls	r3, r3, #3
 811a168:	4a08      	ldr	r2, [pc, #32]	@ (811a18c <etharp_tmr+0x154>)
 811a16a:	4413      	add	r3, r2
 811a16c:	3304      	adds	r3, #4
 811a16e:	4619      	mov	r1, r3
 811a170:	f000 fefe 	bl	811af70 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 811a174:	687b      	ldr	r3, [r7, #4]
 811a176:	3301      	adds	r3, #1
 811a178:	607b      	str	r3, [r7, #4]
 811a17a:	687b      	ldr	r3, [r7, #4]
 811a17c:	2b09      	cmp	r3, #9
 811a17e:	f77f af61 	ble.w	811a044 <etharp_tmr+0xc>
      }
    }
  }
}
 811a182:	bf00      	nop
 811a184:	bf00      	nop
 811a186:	3708      	adds	r7, #8
 811a188:	46bd      	mov	sp, r7
 811a18a:	bd80      	pop	{r7, pc}
 811a18c:	1000b280 	.word	0x1000b280

0811a190 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 811a190:	b580      	push	{r7, lr}
 811a192:	b08a      	sub	sp, #40	@ 0x28
 811a194:	af00      	add	r7, sp, #0
 811a196:	60f8      	str	r0, [r7, #12]
 811a198:	460b      	mov	r3, r1
 811a19a:	607a      	str	r2, [r7, #4]
 811a19c:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 811a19e:	230a      	movs	r3, #10
 811a1a0:	84fb      	strh	r3, [r7, #38]	@ 0x26
 811a1a2:	230a      	movs	r3, #10
 811a1a4:	84bb      	strh	r3, [r7, #36]	@ 0x24
  s16_t empty = ARP_TABLE_SIZE;
 811a1a6:	230a      	movs	r3, #10
 811a1a8:	847b      	strh	r3, [r7, #34]	@ 0x22
  s16_t i = 0;
 811a1aa:	2300      	movs	r3, #0
 811a1ac:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 811a1ae:	230a      	movs	r3, #10
 811a1b0:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 811a1b2:	2300      	movs	r3, #0
 811a1b4:	83bb      	strh	r3, [r7, #28]
 811a1b6:	2300      	movs	r3, #0
 811a1b8:	837b      	strh	r3, [r7, #26]
 811a1ba:	2300      	movs	r3, #0
 811a1bc:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 811a1be:	2300      	movs	r3, #0
 811a1c0:	843b      	strh	r3, [r7, #32]
 811a1c2:	e0b1      	b.n	811a328 <etharp_find_entry+0x198>
    u8_t state = arp_table[i].state;
 811a1c4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 811a1c8:	49a7      	ldr	r1, [pc, #668]	@ (811a468 <etharp_find_entry+0x2d8>)
 811a1ca:	4613      	mov	r3, r2
 811a1cc:	005b      	lsls	r3, r3, #1
 811a1ce:	4413      	add	r3, r2
 811a1d0:	00db      	lsls	r3, r3, #3
 811a1d2:	440b      	add	r3, r1
 811a1d4:	3314      	adds	r3, #20
 811a1d6:	781b      	ldrb	r3, [r3, #0]
 811a1d8:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 811a1da:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 811a1de:	2b0a      	cmp	r3, #10
 811a1e0:	d105      	bne.n	811a1ee <etharp_find_entry+0x5e>
 811a1e2:	7dfb      	ldrb	r3, [r7, #23]
 811a1e4:	2b00      	cmp	r3, #0
 811a1e6:	d102      	bne.n	811a1ee <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 811a1e8:	8c3b      	ldrh	r3, [r7, #32]
 811a1ea:	847b      	strh	r3, [r7, #34]	@ 0x22
 811a1ec:	e098      	b.n	811a320 <etharp_find_entry+0x190>
    } else if (state != ETHARP_STATE_EMPTY) {
 811a1ee:	7dfb      	ldrb	r3, [r7, #23]
 811a1f0:	2b00      	cmp	r3, #0
 811a1f2:	f000 8095 	beq.w	811a320 <etharp_find_entry+0x190>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 811a1f6:	7dfb      	ldrb	r3, [r7, #23]
 811a1f8:	2b01      	cmp	r3, #1
 811a1fa:	d009      	beq.n	811a210 <etharp_find_entry+0x80>
 811a1fc:	7dfb      	ldrb	r3, [r7, #23]
 811a1fe:	2b01      	cmp	r3, #1
 811a200:	d806      	bhi.n	811a210 <etharp_find_entry+0x80>
 811a202:	4b9a      	ldr	r3, [pc, #616]	@ (811a46c <etharp_find_entry+0x2dc>)
 811a204:	f240 1223 	movw	r2, #291	@ 0x123
 811a208:	4999      	ldr	r1, [pc, #612]	@ (811a470 <etharp_find_entry+0x2e0>)
 811a20a:	489a      	ldr	r0, [pc, #616]	@ (811a474 <etharp_find_entry+0x2e4>)
 811a20c:	f00c fc32 	bl	8126a74 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 811a210:	68fb      	ldr	r3, [r7, #12]
 811a212:	2b00      	cmp	r3, #0
 811a214:	d020      	beq.n	811a258 <etharp_find_entry+0xc8>
 811a216:	68fb      	ldr	r3, [r7, #12]
 811a218:	6819      	ldr	r1, [r3, #0]
 811a21a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 811a21e:	4892      	ldr	r0, [pc, #584]	@ (811a468 <etharp_find_entry+0x2d8>)
 811a220:	4613      	mov	r3, r2
 811a222:	005b      	lsls	r3, r3, #1
 811a224:	4413      	add	r3, r2
 811a226:	00db      	lsls	r3, r3, #3
 811a228:	4403      	add	r3, r0
 811a22a:	3304      	adds	r3, #4
 811a22c:	681b      	ldr	r3, [r3, #0]
 811a22e:	4299      	cmp	r1, r3
 811a230:	d112      	bne.n	811a258 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 811a232:	687b      	ldr	r3, [r7, #4]
 811a234:	2b00      	cmp	r3, #0
 811a236:	d00c      	beq.n	811a252 <etharp_find_entry+0xc2>
 811a238:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 811a23c:	498a      	ldr	r1, [pc, #552]	@ (811a468 <etharp_find_entry+0x2d8>)
 811a23e:	4613      	mov	r3, r2
 811a240:	005b      	lsls	r3, r3, #1
 811a242:	4413      	add	r3, r2
 811a244:	00db      	lsls	r3, r3, #3
 811a246:	440b      	add	r3, r1
 811a248:	3308      	adds	r3, #8
 811a24a:	681b      	ldr	r3, [r3, #0]
 811a24c:	687a      	ldr	r2, [r7, #4]
 811a24e:	429a      	cmp	r2, r3
 811a250:	d102      	bne.n	811a258 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 811a252:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 811a256:	e103      	b.n	811a460 <etharp_find_entry+0x2d0>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 811a258:	7dfb      	ldrb	r3, [r7, #23]
 811a25a:	2b01      	cmp	r3, #1
 811a25c:	d140      	bne.n	811a2e0 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 811a25e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 811a262:	4981      	ldr	r1, [pc, #516]	@ (811a468 <etharp_find_entry+0x2d8>)
 811a264:	4613      	mov	r3, r2
 811a266:	005b      	lsls	r3, r3, #1
 811a268:	4413      	add	r3, r2
 811a26a:	00db      	lsls	r3, r3, #3
 811a26c:	440b      	add	r3, r1
 811a26e:	681b      	ldr	r3, [r3, #0]
 811a270:	2b00      	cmp	r3, #0
 811a272:	d01a      	beq.n	811a2aa <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 811a274:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 811a278:	497b      	ldr	r1, [pc, #492]	@ (811a468 <etharp_find_entry+0x2d8>)
 811a27a:	4613      	mov	r3, r2
 811a27c:	005b      	lsls	r3, r3, #1
 811a27e:	4413      	add	r3, r2
 811a280:	00db      	lsls	r3, r3, #3
 811a282:	440b      	add	r3, r1
 811a284:	3312      	adds	r3, #18
 811a286:	881b      	ldrh	r3, [r3, #0]
 811a288:	8bba      	ldrh	r2, [r7, #28]
 811a28a:	429a      	cmp	r2, r3
 811a28c:	d848      	bhi.n	811a320 <etharp_find_entry+0x190>
            old_queue = i;
 811a28e:	8c3b      	ldrh	r3, [r7, #32]
 811a290:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 811a292:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 811a296:	4974      	ldr	r1, [pc, #464]	@ (811a468 <etharp_find_entry+0x2d8>)
 811a298:	4613      	mov	r3, r2
 811a29a:	005b      	lsls	r3, r3, #1
 811a29c:	4413      	add	r3, r2
 811a29e:	00db      	lsls	r3, r3, #3
 811a2a0:	440b      	add	r3, r1
 811a2a2:	3312      	adds	r3, #18
 811a2a4:	881b      	ldrh	r3, [r3, #0]
 811a2a6:	83bb      	strh	r3, [r7, #28]
 811a2a8:	e03a      	b.n	811a320 <etharp_find_entry+0x190>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 811a2aa:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 811a2ae:	496e      	ldr	r1, [pc, #440]	@ (811a468 <etharp_find_entry+0x2d8>)
 811a2b0:	4613      	mov	r3, r2
 811a2b2:	005b      	lsls	r3, r3, #1
 811a2b4:	4413      	add	r3, r2
 811a2b6:	00db      	lsls	r3, r3, #3
 811a2b8:	440b      	add	r3, r1
 811a2ba:	3312      	adds	r3, #18
 811a2bc:	881b      	ldrh	r3, [r3, #0]
 811a2be:	8b7a      	ldrh	r2, [r7, #26]
 811a2c0:	429a      	cmp	r2, r3
 811a2c2:	d82d      	bhi.n	811a320 <etharp_find_entry+0x190>
            old_pending = i;
 811a2c4:	8c3b      	ldrh	r3, [r7, #32]
 811a2c6:	84fb      	strh	r3, [r7, #38]	@ 0x26
            age_pending = arp_table[i].ctime;
 811a2c8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 811a2cc:	4966      	ldr	r1, [pc, #408]	@ (811a468 <etharp_find_entry+0x2d8>)
 811a2ce:	4613      	mov	r3, r2
 811a2d0:	005b      	lsls	r3, r3, #1
 811a2d2:	4413      	add	r3, r2
 811a2d4:	00db      	lsls	r3, r3, #3
 811a2d6:	440b      	add	r3, r1
 811a2d8:	3312      	adds	r3, #18
 811a2da:	881b      	ldrh	r3, [r3, #0]
 811a2dc:	837b      	strh	r3, [r7, #26]
 811a2de:	e01f      	b.n	811a320 <etharp_find_entry+0x190>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 811a2e0:	7dfb      	ldrb	r3, [r7, #23]
 811a2e2:	2b01      	cmp	r3, #1
 811a2e4:	d91c      	bls.n	811a320 <etharp_find_entry+0x190>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
 811a2e6:	7dfb      	ldrb	r3, [r7, #23]
 811a2e8:	2b04      	cmp	r3, #4
 811a2ea:	d819      	bhi.n	811a320 <etharp_find_entry+0x190>
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 811a2ec:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 811a2f0:	495d      	ldr	r1, [pc, #372]	@ (811a468 <etharp_find_entry+0x2d8>)
 811a2f2:	4613      	mov	r3, r2
 811a2f4:	005b      	lsls	r3, r3, #1
 811a2f6:	4413      	add	r3, r2
 811a2f8:	00db      	lsls	r3, r3, #3
 811a2fa:	440b      	add	r3, r1
 811a2fc:	3312      	adds	r3, #18
 811a2fe:	881b      	ldrh	r3, [r3, #0]
 811a300:	8b3a      	ldrh	r2, [r7, #24]
 811a302:	429a      	cmp	r2, r3
 811a304:	d80c      	bhi.n	811a320 <etharp_find_entry+0x190>
            old_stable = i;
 811a306:	8c3b      	ldrh	r3, [r7, #32]
 811a308:	84bb      	strh	r3, [r7, #36]	@ 0x24
            age_stable = arp_table[i].ctime;
 811a30a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 811a30e:	4956      	ldr	r1, [pc, #344]	@ (811a468 <etharp_find_entry+0x2d8>)
 811a310:	4613      	mov	r3, r2
 811a312:	005b      	lsls	r3, r3, #1
 811a314:	4413      	add	r3, r2
 811a316:	00db      	lsls	r3, r3, #3
 811a318:	440b      	add	r3, r1
 811a31a:	3312      	adds	r3, #18
 811a31c:	881b      	ldrh	r3, [r3, #0]
 811a31e:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 811a320:	8c3b      	ldrh	r3, [r7, #32]
 811a322:	3301      	adds	r3, #1
 811a324:	b29b      	uxth	r3, r3
 811a326:	843b      	strh	r3, [r7, #32]
 811a328:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 811a32c:	2b09      	cmp	r3, #9
 811a32e:	f77f af49 	ble.w	811a1c4 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 811a332:	7afb      	ldrb	r3, [r7, #11]
 811a334:	f003 0302 	and.w	r3, r3, #2
 811a338:	2b00      	cmp	r3, #0
 811a33a:	d108      	bne.n	811a34e <etharp_find_entry+0x1be>
 811a33c:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 811a340:	2b0a      	cmp	r3, #10
 811a342:	d107      	bne.n	811a354 <etharp_find_entry+0x1c4>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 811a344:	7afb      	ldrb	r3, [r7, #11]
 811a346:	f003 0301 	and.w	r3, r3, #1
 811a34a:	2b00      	cmp	r3, #0
 811a34c:	d102      	bne.n	811a354 <etharp_find_entry+0x1c4>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 811a34e:	f04f 33ff 	mov.w	r3, #4294967295
 811a352:	e085      	b.n	811a460 <etharp_find_entry+0x2d0>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 811a354:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 811a358:	2b09      	cmp	r3, #9
 811a35a:	dc02      	bgt.n	811a362 <etharp_find_entry+0x1d2>
    i = empty;
 811a35c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 811a35e:	843b      	strh	r3, [r7, #32]
 811a360:	e039      	b.n	811a3d6 <etharp_find_entry+0x246>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 811a362:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 811a366:	2b09      	cmp	r3, #9
 811a368:	dc14      	bgt.n	811a394 <etharp_find_entry+0x204>
      /* recycle oldest stable*/
      i = old_stable;
 811a36a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 811a36c:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 811a36e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 811a372:	493d      	ldr	r1, [pc, #244]	@ (811a468 <etharp_find_entry+0x2d8>)
 811a374:	4613      	mov	r3, r2
 811a376:	005b      	lsls	r3, r3, #1
 811a378:	4413      	add	r3, r2
 811a37a:	00db      	lsls	r3, r3, #3
 811a37c:	440b      	add	r3, r1
 811a37e:	681b      	ldr	r3, [r3, #0]
 811a380:	2b00      	cmp	r3, #0
 811a382:	d018      	beq.n	811a3b6 <etharp_find_entry+0x226>
 811a384:	4b39      	ldr	r3, [pc, #228]	@ (811a46c <etharp_find_entry+0x2dc>)
 811a386:	f240 126d 	movw	r2, #365	@ 0x16d
 811a38a:	493b      	ldr	r1, [pc, #236]	@ (811a478 <etharp_find_entry+0x2e8>)
 811a38c:	4839      	ldr	r0, [pc, #228]	@ (811a474 <etharp_find_entry+0x2e4>)
 811a38e:	f00c fb71 	bl	8126a74 <iprintf>
 811a392:	e010      	b.n	811a3b6 <etharp_find_entry+0x226>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 811a394:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 811a398:	2b09      	cmp	r3, #9
 811a39a:	dc02      	bgt.n	811a3a2 <etharp_find_entry+0x212>
      /* recycle oldest pending */
      i = old_pending;
 811a39c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 811a39e:	843b      	strh	r3, [r7, #32]
 811a3a0:	e009      	b.n	811a3b6 <etharp_find_entry+0x226>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 811a3a2:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 811a3a6:	2b09      	cmp	r3, #9
 811a3a8:	dc02      	bgt.n	811a3b0 <etharp_find_entry+0x220>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 811a3aa:	8bfb      	ldrh	r3, [r7, #30]
 811a3ac:	843b      	strh	r3, [r7, #32]
 811a3ae:	e002      	b.n	811a3b6 <etharp_find_entry+0x226>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 811a3b0:	f04f 33ff 	mov.w	r3, #4294967295
 811a3b4:	e054      	b.n	811a460 <etharp_find_entry+0x2d0>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 811a3b6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 811a3ba:	2b09      	cmp	r3, #9
 811a3bc:	dd06      	ble.n	811a3cc <etharp_find_entry+0x23c>
 811a3be:	4b2b      	ldr	r3, [pc, #172]	@ (811a46c <etharp_find_entry+0x2dc>)
 811a3c0:	f240 127f 	movw	r2, #383	@ 0x17f
 811a3c4:	492d      	ldr	r1, [pc, #180]	@ (811a47c <etharp_find_entry+0x2ec>)
 811a3c6:	482b      	ldr	r0, [pc, #172]	@ (811a474 <etharp_find_entry+0x2e4>)
 811a3c8:	f00c fb54 	bl	8126a74 <iprintf>
    etharp_free_entry(i);
 811a3cc:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 811a3d0:	4618      	mov	r0, r3
 811a3d2:	f7ff fdff 	bl	8119fd4 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 811a3d6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 811a3da:	2b09      	cmp	r3, #9
 811a3dc:	dd06      	ble.n	811a3ec <etharp_find_entry+0x25c>
 811a3de:	4b23      	ldr	r3, [pc, #140]	@ (811a46c <etharp_find_entry+0x2dc>)
 811a3e0:	f240 1283 	movw	r2, #387	@ 0x183
 811a3e4:	4925      	ldr	r1, [pc, #148]	@ (811a47c <etharp_find_entry+0x2ec>)
 811a3e6:	4823      	ldr	r0, [pc, #140]	@ (811a474 <etharp_find_entry+0x2e4>)
 811a3e8:	f00c fb44 	bl	8126a74 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 811a3ec:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 811a3f0:	491d      	ldr	r1, [pc, #116]	@ (811a468 <etharp_find_entry+0x2d8>)
 811a3f2:	4613      	mov	r3, r2
 811a3f4:	005b      	lsls	r3, r3, #1
 811a3f6:	4413      	add	r3, r2
 811a3f8:	00db      	lsls	r3, r3, #3
 811a3fa:	440b      	add	r3, r1
 811a3fc:	3314      	adds	r3, #20
 811a3fe:	781b      	ldrb	r3, [r3, #0]
 811a400:	2b00      	cmp	r3, #0
 811a402:	d006      	beq.n	811a412 <etharp_find_entry+0x282>
 811a404:	4b19      	ldr	r3, [pc, #100]	@ (811a46c <etharp_find_entry+0x2dc>)
 811a406:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 811a40a:	491d      	ldr	r1, [pc, #116]	@ (811a480 <etharp_find_entry+0x2f0>)
 811a40c:	4819      	ldr	r0, [pc, #100]	@ (811a474 <etharp_find_entry+0x2e4>)
 811a40e:	f00c fb31 	bl	8126a74 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 811a412:	68fb      	ldr	r3, [r7, #12]
 811a414:	2b00      	cmp	r3, #0
 811a416:	d00b      	beq.n	811a430 <etharp_find_entry+0x2a0>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 811a418:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 811a41c:	68fb      	ldr	r3, [r7, #12]
 811a41e:	6819      	ldr	r1, [r3, #0]
 811a420:	4811      	ldr	r0, [pc, #68]	@ (811a468 <etharp_find_entry+0x2d8>)
 811a422:	4613      	mov	r3, r2
 811a424:	005b      	lsls	r3, r3, #1
 811a426:	4413      	add	r3, r2
 811a428:	00db      	lsls	r3, r3, #3
 811a42a:	4403      	add	r3, r0
 811a42c:	3304      	adds	r3, #4
 811a42e:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 811a430:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 811a434:	490c      	ldr	r1, [pc, #48]	@ (811a468 <etharp_find_entry+0x2d8>)
 811a436:	4613      	mov	r3, r2
 811a438:	005b      	lsls	r3, r3, #1
 811a43a:	4413      	add	r3, r2
 811a43c:	00db      	lsls	r3, r3, #3
 811a43e:	440b      	add	r3, r1
 811a440:	3312      	adds	r3, #18
 811a442:	2200      	movs	r2, #0
 811a444:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 811a446:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 811a44a:	4907      	ldr	r1, [pc, #28]	@ (811a468 <etharp_find_entry+0x2d8>)
 811a44c:	4613      	mov	r3, r2
 811a44e:	005b      	lsls	r3, r3, #1
 811a450:	4413      	add	r3, r2
 811a452:	00db      	lsls	r3, r3, #3
 811a454:	440b      	add	r3, r1
 811a456:	3308      	adds	r3, #8
 811a458:	687a      	ldr	r2, [r7, #4]
 811a45a:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 811a45c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 811a460:	4618      	mov	r0, r3
 811a462:	3728      	adds	r7, #40	@ 0x28
 811a464:	46bd      	mov	sp, r7
 811a466:	bd80      	pop	{r7, pc}
 811a468:	1000b280 	.word	0x1000b280
 811a46c:	08127e20 	.word	0x08127e20
 811a470:	08127ee0 	.word	0x08127ee0
 811a474:	08127ea8 	.word	0x08127ea8
 811a478:	08127f20 	.word	0x08127f20
 811a47c:	08127f38 	.word	0x08127f38
 811a480:	08127f4c 	.word	0x08127f4c

0811a484 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 811a484:	b580      	push	{r7, lr}
 811a486:	b08a      	sub	sp, #40	@ 0x28
 811a488:	af02      	add	r7, sp, #8
 811a48a:	60f8      	str	r0, [r7, #12]
 811a48c:	60b9      	str	r1, [r7, #8]
 811a48e:	607a      	str	r2, [r7, #4]
 811a490:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 811a492:	68fb      	ldr	r3, [r7, #12]
 811a494:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 811a498:	2b06      	cmp	r3, #6
 811a49a:	d006      	beq.n	811a4aa <etharp_update_arp_entry+0x26>
 811a49c:	4b5c      	ldr	r3, [pc, #368]	@ (811a610 <etharp_update_arp_entry+0x18c>)
 811a49e:	f240 12a9 	movw	r2, #425	@ 0x1a9
 811a4a2:	495c      	ldr	r1, [pc, #368]	@ (811a614 <etharp_update_arp_entry+0x190>)
 811a4a4:	485c      	ldr	r0, [pc, #368]	@ (811a618 <etharp_update_arp_entry+0x194>)
 811a4a6:	f00c fae5 	bl	8126a74 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 811a4aa:	68bb      	ldr	r3, [r7, #8]
 811a4ac:	2b00      	cmp	r3, #0
 811a4ae:	d012      	beq.n	811a4d6 <etharp_update_arp_entry+0x52>
 811a4b0:	68bb      	ldr	r3, [r7, #8]
 811a4b2:	681b      	ldr	r3, [r3, #0]
 811a4b4:	2b00      	cmp	r3, #0
 811a4b6:	d00e      	beq.n	811a4d6 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 811a4b8:	68bb      	ldr	r3, [r7, #8]
 811a4ba:	681b      	ldr	r3, [r3, #0]
 811a4bc:	68f9      	ldr	r1, [r7, #12]
 811a4be:	4618      	mov	r0, r3
 811a4c0:	f001 fb5c 	bl	811bb7c <ip4_addr_isbroadcast_u32>
 811a4c4:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 811a4c6:	2b00      	cmp	r3, #0
 811a4c8:	d105      	bne.n	811a4d6 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 811a4ca:	68bb      	ldr	r3, [r7, #8]
 811a4cc:	681b      	ldr	r3, [r3, #0]
 811a4ce:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 811a4d2:	2be0      	cmp	r3, #224	@ 0xe0
 811a4d4:	d102      	bne.n	811a4dc <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 811a4d6:	f06f 030f 	mvn.w	r3, #15
 811a4da:	e095      	b.n	811a608 <etharp_update_arp_entry+0x184>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 811a4dc:	78fb      	ldrb	r3, [r7, #3]
 811a4de:	68fa      	ldr	r2, [r7, #12]
 811a4e0:	4619      	mov	r1, r3
 811a4e2:	68b8      	ldr	r0, [r7, #8]
 811a4e4:	f7ff fe54 	bl	811a190 <etharp_find_entry>
 811a4e8:	4603      	mov	r3, r0
 811a4ea:	83fb      	strh	r3, [r7, #30]
  /* bail out if no entry could be found */
  if (i < 0) {
 811a4ec:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 811a4f0:	2b00      	cmp	r3, #0
 811a4f2:	da02      	bge.n	811a4fa <etharp_update_arp_entry+0x76>
    return (err_t)i;
 811a4f4:	8bfb      	ldrh	r3, [r7, #30]
 811a4f6:	b25b      	sxtb	r3, r3
 811a4f8:	e086      	b.n	811a608 <etharp_update_arp_entry+0x184>
  }

#if ETHARP_SUPPORT_STATIC_ENTRIES
  if (flags & ETHARP_FLAG_STATIC_ENTRY) {
 811a4fa:	78fb      	ldrb	r3, [r7, #3]
 811a4fc:	f003 0304 	and.w	r3, r3, #4
 811a500:	2b00      	cmp	r3, #0
 811a502:	d00b      	beq.n	811a51c <etharp_update_arp_entry+0x98>
    /* record static type */
    arp_table[i].state = ETHARP_STATE_STATIC;
 811a504:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 811a508:	4944      	ldr	r1, [pc, #272]	@ (811a61c <etharp_update_arp_entry+0x198>)
 811a50a:	4613      	mov	r3, r2
 811a50c:	005b      	lsls	r3, r3, #1
 811a50e:	4413      	add	r3, r2
 811a510:	00db      	lsls	r3, r3, #3
 811a512:	440b      	add	r3, r1
 811a514:	3314      	adds	r3, #20
 811a516:	2205      	movs	r2, #5
 811a518:	701a      	strb	r2, [r3, #0]
 811a51a:	e019      	b.n	811a550 <etharp_update_arp_entry+0xcc>
  } else if (arp_table[i].state == ETHARP_STATE_STATIC) {
 811a51c:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 811a520:	493e      	ldr	r1, [pc, #248]	@ (811a61c <etharp_update_arp_entry+0x198>)
 811a522:	4613      	mov	r3, r2
 811a524:	005b      	lsls	r3, r3, #1
 811a526:	4413      	add	r3, r2
 811a528:	00db      	lsls	r3, r3, #3
 811a52a:	440b      	add	r3, r1
 811a52c:	3314      	adds	r3, #20
 811a52e:	781b      	ldrb	r3, [r3, #0]
 811a530:	2b05      	cmp	r3, #5
 811a532:	d102      	bne.n	811a53a <etharp_update_arp_entry+0xb6>
    /* found entry is a static type, don't overwrite it */
    return ERR_VAL;
 811a534:	f06f 0305 	mvn.w	r3, #5
 811a538:	e066      	b.n	811a608 <etharp_update_arp_entry+0x184>
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 811a53a:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 811a53e:	4937      	ldr	r1, [pc, #220]	@ (811a61c <etharp_update_arp_entry+0x198>)
 811a540:	4613      	mov	r3, r2
 811a542:	005b      	lsls	r3, r3, #1
 811a544:	4413      	add	r3, r2
 811a546:	00db      	lsls	r3, r3, #3
 811a548:	440b      	add	r3, r1
 811a54a:	3314      	adds	r3, #20
 811a54c:	2202      	movs	r2, #2
 811a54e:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 811a550:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 811a554:	4931      	ldr	r1, [pc, #196]	@ (811a61c <etharp_update_arp_entry+0x198>)
 811a556:	4613      	mov	r3, r2
 811a558:	005b      	lsls	r3, r3, #1
 811a55a:	4413      	add	r3, r2
 811a55c:	00db      	lsls	r3, r3, #3
 811a55e:	440b      	add	r3, r1
 811a560:	3308      	adds	r3, #8
 811a562:	68fa      	ldr	r2, [r7, #12]
 811a564:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 811a566:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 811a56a:	4613      	mov	r3, r2
 811a56c:	005b      	lsls	r3, r3, #1
 811a56e:	4413      	add	r3, r2
 811a570:	00db      	lsls	r3, r3, #3
 811a572:	3308      	adds	r3, #8
 811a574:	4a29      	ldr	r2, [pc, #164]	@ (811a61c <etharp_update_arp_entry+0x198>)
 811a576:	4413      	add	r3, r2
 811a578:	3304      	adds	r3, #4
 811a57a:	2206      	movs	r2, #6
 811a57c:	6879      	ldr	r1, [r7, #4]
 811a57e:	4618      	mov	r0, r3
 811a580:	f00c fcdb 	bl	8126f3a <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 811a584:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 811a588:	4924      	ldr	r1, [pc, #144]	@ (811a61c <etharp_update_arp_entry+0x198>)
 811a58a:	4613      	mov	r3, r2
 811a58c:	005b      	lsls	r3, r3, #1
 811a58e:	4413      	add	r3, r2
 811a590:	00db      	lsls	r3, r3, #3
 811a592:	440b      	add	r3, r1
 811a594:	3312      	adds	r3, #18
 811a596:	2200      	movs	r2, #0
 811a598:	801a      	strh	r2, [r3, #0]
  /* this is where we will send out queued packets! */
#if ARP_QUEUEING
  while (arp_table[i].q != NULL) {
 811a59a:	e029      	b.n	811a5f0 <etharp_update_arp_entry+0x16c>
    struct pbuf *p;
    /* remember remainder of queue */
    struct etharp_q_entry *q = arp_table[i].q;
 811a59c:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 811a5a0:	491e      	ldr	r1, [pc, #120]	@ (811a61c <etharp_update_arp_entry+0x198>)
 811a5a2:	4613      	mov	r3, r2
 811a5a4:	005b      	lsls	r3, r3, #1
 811a5a6:	4413      	add	r3, r2
 811a5a8:	00db      	lsls	r3, r3, #3
 811a5aa:	440b      	add	r3, r1
 811a5ac:	681b      	ldr	r3, [r3, #0]
 811a5ae:	61bb      	str	r3, [r7, #24]
    /* pop first item off the queue */
    arp_table[i].q = q->next;
 811a5b0:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 811a5b4:	69bb      	ldr	r3, [r7, #24]
 811a5b6:	6819      	ldr	r1, [r3, #0]
 811a5b8:	4818      	ldr	r0, [pc, #96]	@ (811a61c <etharp_update_arp_entry+0x198>)
 811a5ba:	4613      	mov	r3, r2
 811a5bc:	005b      	lsls	r3, r3, #1
 811a5be:	4413      	add	r3, r2
 811a5c0:	00db      	lsls	r3, r3, #3
 811a5c2:	4403      	add	r3, r0
 811a5c4:	6019      	str	r1, [r3, #0]
    /* get the packet pointer */
    p = q->p;
 811a5c6:	69bb      	ldr	r3, [r7, #24]
 811a5c8:	685b      	ldr	r3, [r3, #4]
 811a5ca:	617b      	str	r3, [r7, #20]
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
 811a5cc:	69b9      	ldr	r1, [r7, #24]
 811a5ce:	2009      	movs	r0, #9
 811a5d0:	f003 f802 	bl	811d5d8 <memp_free>
  if (arp_table[i].q != NULL) {
    struct pbuf *p = arp_table[i].q;
    arp_table[i].q = NULL;
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 811a5d4:	68fb      	ldr	r3, [r7, #12]
 811a5d6:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 811a5da:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 811a5de:	9300      	str	r3, [sp, #0]
 811a5e0:	687b      	ldr	r3, [r7, #4]
 811a5e2:	6979      	ldr	r1, [r7, #20]
 811a5e4:	68f8      	ldr	r0, [r7, #12]
 811a5e6:	f000 fd63 	bl	811b0b0 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 811a5ea:	6978      	ldr	r0, [r7, #20]
 811a5ec:	f003 fe96 	bl	811e31c <pbuf_free>
  while (arp_table[i].q != NULL) {
 811a5f0:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 811a5f4:	4909      	ldr	r1, [pc, #36]	@ (811a61c <etharp_update_arp_entry+0x198>)
 811a5f6:	4613      	mov	r3, r2
 811a5f8:	005b      	lsls	r3, r3, #1
 811a5fa:	4413      	add	r3, r2
 811a5fc:	00db      	lsls	r3, r3, #3
 811a5fe:	440b      	add	r3, r1
 811a600:	681b      	ldr	r3, [r3, #0]
 811a602:	2b00      	cmp	r3, #0
 811a604:	d1ca      	bne.n	811a59c <etharp_update_arp_entry+0x118>
  }
  return ERR_OK;
 811a606:	2300      	movs	r3, #0
}
 811a608:	4618      	mov	r0, r3
 811a60a:	3720      	adds	r7, #32
 811a60c:	46bd      	mov	sp, r7
 811a60e:	bd80      	pop	{r7, pc}
 811a610:	08127e20 	.word	0x08127e20
 811a614:	08127f78 	.word	0x08127f78
 811a618:	08127ea8 	.word	0x08127ea8
 811a61c:	1000b280 	.word	0x1000b280

0811a620 <etharp_add_static_entry>:
 * @param ethaddr ethernet address for the new static entry
 * @return See return values of etharp_add_static_entry
 */
err_t
etharp_add_static_entry(const ip4_addr_t *ipaddr, struct eth_addr *ethaddr)
{
 811a620:	b580      	push	{r7, lr}
 811a622:	b084      	sub	sp, #16
 811a624:	af00      	add	r7, sp, #0
 811a626:	6078      	str	r0, [r7, #4]
 811a628:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_add_static_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));

  netif = ip4_route(ipaddr);
 811a62a:	6878      	ldr	r0, [r7, #4]
 811a62c:	f001 f810 	bl	811b650 <ip4_route>
 811a630:	60f8      	str	r0, [r7, #12]
  if (netif == NULL) {
 811a632:	68fb      	ldr	r3, [r7, #12]
 811a634:	2b00      	cmp	r3, #0
 811a636:	d102      	bne.n	811a63e <etharp_add_static_entry+0x1e>
    return ERR_RTE;
 811a638:	f06f 0303 	mvn.w	r3, #3
 811a63c:	e006      	b.n	811a64c <etharp_add_static_entry+0x2c>
  }

  return etharp_update_arp_entry(netif, ipaddr, ethaddr, ETHARP_FLAG_TRY_HARD | ETHARP_FLAG_STATIC_ENTRY);
 811a63e:	2305      	movs	r3, #5
 811a640:	683a      	ldr	r2, [r7, #0]
 811a642:	6879      	ldr	r1, [r7, #4]
 811a644:	68f8      	ldr	r0, [r7, #12]
 811a646:	f7ff ff1d 	bl	811a484 <etharp_update_arp_entry>
 811a64a:	4603      	mov	r3, r0
}
 811a64c:	4618      	mov	r0, r3
 811a64e:	3710      	adds	r7, #16
 811a650:	46bd      	mov	sp, r7
 811a652:	bd80      	pop	{r7, pc}

0811a654 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 811a654:	b580      	push	{r7, lr}
 811a656:	b084      	sub	sp, #16
 811a658:	af00      	add	r7, sp, #0
 811a65a:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 811a65c:	2300      	movs	r3, #0
 811a65e:	60fb      	str	r3, [r7, #12]
 811a660:	e01e      	b.n	811a6a0 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 811a662:	4913      	ldr	r1, [pc, #76]	@ (811a6b0 <etharp_cleanup_netif+0x5c>)
 811a664:	68fa      	ldr	r2, [r7, #12]
 811a666:	4613      	mov	r3, r2
 811a668:	005b      	lsls	r3, r3, #1
 811a66a:	4413      	add	r3, r2
 811a66c:	00db      	lsls	r3, r3, #3
 811a66e:	440b      	add	r3, r1
 811a670:	3314      	adds	r3, #20
 811a672:	781b      	ldrb	r3, [r3, #0]
 811a674:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 811a676:	7afb      	ldrb	r3, [r7, #11]
 811a678:	2b00      	cmp	r3, #0
 811a67a:	d00e      	beq.n	811a69a <etharp_cleanup_netif+0x46>
 811a67c:	490c      	ldr	r1, [pc, #48]	@ (811a6b0 <etharp_cleanup_netif+0x5c>)
 811a67e:	68fa      	ldr	r2, [r7, #12]
 811a680:	4613      	mov	r3, r2
 811a682:	005b      	lsls	r3, r3, #1
 811a684:	4413      	add	r3, r2
 811a686:	00db      	lsls	r3, r3, #3
 811a688:	440b      	add	r3, r1
 811a68a:	3308      	adds	r3, #8
 811a68c:	681b      	ldr	r3, [r3, #0]
 811a68e:	687a      	ldr	r2, [r7, #4]
 811a690:	429a      	cmp	r2, r3
 811a692:	d102      	bne.n	811a69a <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 811a694:	68f8      	ldr	r0, [r7, #12]
 811a696:	f7ff fc9d 	bl	8119fd4 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 811a69a:	68fb      	ldr	r3, [r7, #12]
 811a69c:	3301      	adds	r3, #1
 811a69e:	60fb      	str	r3, [r7, #12]
 811a6a0:	68fb      	ldr	r3, [r7, #12]
 811a6a2:	2b09      	cmp	r3, #9
 811a6a4:	dddd      	ble.n	811a662 <etharp_cleanup_netif+0xe>
    }
  }
}
 811a6a6:	bf00      	nop
 811a6a8:	bf00      	nop
 811a6aa:	3710      	adds	r7, #16
 811a6ac:	46bd      	mov	sp, r7
 811a6ae:	bd80      	pop	{r7, pc}
 811a6b0:	1000b280 	.word	0x1000b280

0811a6b4 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 811a6b4:	b5b0      	push	{r4, r5, r7, lr}
 811a6b6:	b08a      	sub	sp, #40	@ 0x28
 811a6b8:	af04      	add	r7, sp, #16
 811a6ba:	6078      	str	r0, [r7, #4]
 811a6bc:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 811a6be:	683b      	ldr	r3, [r7, #0]
 811a6c0:	2b00      	cmp	r3, #0
 811a6c2:	d107      	bne.n	811a6d4 <etharp_input+0x20>
 811a6c4:	4b3d      	ldr	r3, [pc, #244]	@ (811a7bc <etharp_input+0x108>)
 811a6c6:	f240 228a 	movw	r2, #650	@ 0x28a
 811a6ca:	493d      	ldr	r1, [pc, #244]	@ (811a7c0 <etharp_input+0x10c>)
 811a6cc:	483d      	ldr	r0, [pc, #244]	@ (811a7c4 <etharp_input+0x110>)
 811a6ce:	f00c f9d1 	bl	8126a74 <iprintf>
 811a6d2:	e06f      	b.n	811a7b4 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 811a6d4:	687b      	ldr	r3, [r7, #4]
 811a6d6:	685b      	ldr	r3, [r3, #4]
 811a6d8:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 811a6da:	693b      	ldr	r3, [r7, #16]
 811a6dc:	881b      	ldrh	r3, [r3, #0]
 811a6de:	b29b      	uxth	r3, r3
 811a6e0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 811a6e4:	d10c      	bne.n	811a700 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 811a6e6:	693b      	ldr	r3, [r7, #16]
 811a6e8:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 811a6ea:	2b06      	cmp	r3, #6
 811a6ec:	d108      	bne.n	811a700 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 811a6ee:	693b      	ldr	r3, [r7, #16]
 811a6f0:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 811a6f2:	2b04      	cmp	r3, #4
 811a6f4:	d104      	bne.n	811a700 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 811a6f6:	693b      	ldr	r3, [r7, #16]
 811a6f8:	885b      	ldrh	r3, [r3, #2]
 811a6fa:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 811a6fc:	2b08      	cmp	r3, #8
 811a6fe:	d003      	beq.n	811a708 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 811a700:	6878      	ldr	r0, [r7, #4]
 811a702:	f003 fe0b 	bl	811e31c <pbuf_free>
    return;
 811a706:	e055      	b.n	811a7b4 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 811a708:	693b      	ldr	r3, [r7, #16]
 811a70a:	330e      	adds	r3, #14
 811a70c:	681b      	ldr	r3, [r3, #0]
 811a70e:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 811a710:	693b      	ldr	r3, [r7, #16]
 811a712:	3318      	adds	r3, #24
 811a714:	681b      	ldr	r3, [r3, #0]
 811a716:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 811a718:	683b      	ldr	r3, [r7, #0]
 811a71a:	3304      	adds	r3, #4
 811a71c:	681b      	ldr	r3, [r3, #0]
 811a71e:	2b00      	cmp	r3, #0
 811a720:	d102      	bne.n	811a728 <etharp_input+0x74>
    for_us = 0;
 811a722:	2300      	movs	r3, #0
 811a724:	75fb      	strb	r3, [r7, #23]
 811a726:	e009      	b.n	811a73c <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 811a728:	68ba      	ldr	r2, [r7, #8]
 811a72a:	683b      	ldr	r3, [r7, #0]
 811a72c:	3304      	adds	r3, #4
 811a72e:	681b      	ldr	r3, [r3, #0]
 811a730:	429a      	cmp	r2, r3
 811a732:	bf0c      	ite	eq
 811a734:	2301      	moveq	r3, #1
 811a736:	2300      	movne	r3, #0
 811a738:	b2db      	uxtb	r3, r3
 811a73a:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 811a73c:	693b      	ldr	r3, [r7, #16]
 811a73e:	f103 0208 	add.w	r2, r3, #8
 811a742:	7dfb      	ldrb	r3, [r7, #23]
 811a744:	2b00      	cmp	r3, #0
 811a746:	d001      	beq.n	811a74c <etharp_input+0x98>
 811a748:	2301      	movs	r3, #1
 811a74a:	e000      	b.n	811a74e <etharp_input+0x9a>
 811a74c:	2302      	movs	r3, #2
 811a74e:	f107 010c 	add.w	r1, r7, #12
 811a752:	6838      	ldr	r0, [r7, #0]
 811a754:	f7ff fe96 	bl	811a484 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 811a758:	693b      	ldr	r3, [r7, #16]
 811a75a:	88db      	ldrh	r3, [r3, #6]
 811a75c:	b29b      	uxth	r3, r3
 811a75e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 811a762:	d003      	beq.n	811a76c <etharp_input+0xb8>
 811a764:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 811a768:	d01e      	beq.n	811a7a8 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 811a76a:	e020      	b.n	811a7ae <etharp_input+0xfa>
      if (for_us) {
 811a76c:	7dfb      	ldrb	r3, [r7, #23]
 811a76e:	2b00      	cmp	r3, #0
 811a770:	d01c      	beq.n	811a7ac <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 811a772:	683b      	ldr	r3, [r7, #0]
 811a774:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 811a778:	693b      	ldr	r3, [r7, #16]
 811a77a:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 811a77e:	683b      	ldr	r3, [r7, #0]
 811a780:	f103 0526 	add.w	r5, r3, #38	@ 0x26
 811a784:	683b      	ldr	r3, [r7, #0]
 811a786:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 811a788:	693a      	ldr	r2, [r7, #16]
 811a78a:	3208      	adds	r2, #8
        etharp_raw(netif,
 811a78c:	2102      	movs	r1, #2
 811a78e:	9103      	str	r1, [sp, #12]
 811a790:	f107 010c 	add.w	r1, r7, #12
 811a794:	9102      	str	r1, [sp, #8]
 811a796:	9201      	str	r2, [sp, #4]
 811a798:	9300      	str	r3, [sp, #0]
 811a79a:	462b      	mov	r3, r5
 811a79c:	4622      	mov	r2, r4
 811a79e:	4601      	mov	r1, r0
 811a7a0:	6838      	ldr	r0, [r7, #0]
 811a7a2:	f000 fb37 	bl	811ae14 <etharp_raw>
      break;
 811a7a6:	e001      	b.n	811a7ac <etharp_input+0xf8>
      break;
 811a7a8:	bf00      	nop
 811a7aa:	e000      	b.n	811a7ae <etharp_input+0xfa>
      break;
 811a7ac:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 811a7ae:	6878      	ldr	r0, [r7, #4]
 811a7b0:	f003 fdb4 	bl	811e31c <pbuf_free>
}
 811a7b4:	3718      	adds	r7, #24
 811a7b6:	46bd      	mov	sp, r7
 811a7b8:	bdb0      	pop	{r4, r5, r7, pc}
 811a7ba:	bf00      	nop
 811a7bc:	08127e20 	.word	0x08127e20
 811a7c0:	08127fd0 	.word	0x08127fd0
 811a7c4:	08127ea8 	.word	0x08127ea8

0811a7c8 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 811a7c8:	b580      	push	{r7, lr}
 811a7ca:	b086      	sub	sp, #24
 811a7cc:	af02      	add	r7, sp, #8
 811a7ce:	60f8      	str	r0, [r7, #12]
 811a7d0:	60b9      	str	r1, [r7, #8]
 811a7d2:	4613      	mov	r3, r2
 811a7d4:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 811a7d6:	79fa      	ldrb	r2, [r7, #7]
 811a7d8:	4944      	ldr	r1, [pc, #272]	@ (811a8ec <etharp_output_to_arp_index+0x124>)
 811a7da:	4613      	mov	r3, r2
 811a7dc:	005b      	lsls	r3, r3, #1
 811a7de:	4413      	add	r3, r2
 811a7e0:	00db      	lsls	r3, r3, #3
 811a7e2:	440b      	add	r3, r1
 811a7e4:	3314      	adds	r3, #20
 811a7e6:	781b      	ldrb	r3, [r3, #0]
 811a7e8:	2b01      	cmp	r3, #1
 811a7ea:	d806      	bhi.n	811a7fa <etharp_output_to_arp_index+0x32>
 811a7ec:	4b40      	ldr	r3, [pc, #256]	@ (811a8f0 <etharp_output_to_arp_index+0x128>)
 811a7ee:	f240 22ee 	movw	r2, #750	@ 0x2ee
 811a7f2:	4940      	ldr	r1, [pc, #256]	@ (811a8f4 <etharp_output_to_arp_index+0x12c>)
 811a7f4:	4840      	ldr	r0, [pc, #256]	@ (811a8f8 <etharp_output_to_arp_index+0x130>)
 811a7f6:	f00c f93d 	bl	8126a74 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 811a7fa:	79fa      	ldrb	r2, [r7, #7]
 811a7fc:	493b      	ldr	r1, [pc, #236]	@ (811a8ec <etharp_output_to_arp_index+0x124>)
 811a7fe:	4613      	mov	r3, r2
 811a800:	005b      	lsls	r3, r3, #1
 811a802:	4413      	add	r3, r2
 811a804:	00db      	lsls	r3, r3, #3
 811a806:	440b      	add	r3, r1
 811a808:	3314      	adds	r3, #20
 811a80a:	781b      	ldrb	r3, [r3, #0]
 811a80c:	2b02      	cmp	r3, #2
 811a80e:	d153      	bne.n	811a8b8 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 811a810:	79fa      	ldrb	r2, [r7, #7]
 811a812:	4936      	ldr	r1, [pc, #216]	@ (811a8ec <etharp_output_to_arp_index+0x124>)
 811a814:	4613      	mov	r3, r2
 811a816:	005b      	lsls	r3, r3, #1
 811a818:	4413      	add	r3, r2
 811a81a:	00db      	lsls	r3, r3, #3
 811a81c:	440b      	add	r3, r1
 811a81e:	3312      	adds	r3, #18
 811a820:	881b      	ldrh	r3, [r3, #0]
 811a822:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 811a826:	d919      	bls.n	811a85c <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 811a828:	79fa      	ldrb	r2, [r7, #7]
 811a82a:	4613      	mov	r3, r2
 811a82c:	005b      	lsls	r3, r3, #1
 811a82e:	4413      	add	r3, r2
 811a830:	00db      	lsls	r3, r3, #3
 811a832:	4a2e      	ldr	r2, [pc, #184]	@ (811a8ec <etharp_output_to_arp_index+0x124>)
 811a834:	4413      	add	r3, r2
 811a836:	3304      	adds	r3, #4
 811a838:	4619      	mov	r1, r3
 811a83a:	68f8      	ldr	r0, [r7, #12]
 811a83c:	f000 fb98 	bl	811af70 <etharp_request>
 811a840:	4603      	mov	r3, r0
 811a842:	2b00      	cmp	r3, #0
 811a844:	d138      	bne.n	811a8b8 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 811a846:	79fa      	ldrb	r2, [r7, #7]
 811a848:	4928      	ldr	r1, [pc, #160]	@ (811a8ec <etharp_output_to_arp_index+0x124>)
 811a84a:	4613      	mov	r3, r2
 811a84c:	005b      	lsls	r3, r3, #1
 811a84e:	4413      	add	r3, r2
 811a850:	00db      	lsls	r3, r3, #3
 811a852:	440b      	add	r3, r1
 811a854:	3314      	adds	r3, #20
 811a856:	2203      	movs	r2, #3
 811a858:	701a      	strb	r2, [r3, #0]
 811a85a:	e02d      	b.n	811a8b8 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 811a85c:	79fa      	ldrb	r2, [r7, #7]
 811a85e:	4923      	ldr	r1, [pc, #140]	@ (811a8ec <etharp_output_to_arp_index+0x124>)
 811a860:	4613      	mov	r3, r2
 811a862:	005b      	lsls	r3, r3, #1
 811a864:	4413      	add	r3, r2
 811a866:	00db      	lsls	r3, r3, #3
 811a868:	440b      	add	r3, r1
 811a86a:	3312      	adds	r3, #18
 811a86c:	881b      	ldrh	r3, [r3, #0]
 811a86e:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 811a872:	d321      	bcc.n	811a8b8 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 811a874:	79fa      	ldrb	r2, [r7, #7]
 811a876:	4613      	mov	r3, r2
 811a878:	005b      	lsls	r3, r3, #1
 811a87a:	4413      	add	r3, r2
 811a87c:	00db      	lsls	r3, r3, #3
 811a87e:	4a1b      	ldr	r2, [pc, #108]	@ (811a8ec <etharp_output_to_arp_index+0x124>)
 811a880:	4413      	add	r3, r2
 811a882:	1d19      	adds	r1, r3, #4
 811a884:	79fa      	ldrb	r2, [r7, #7]
 811a886:	4613      	mov	r3, r2
 811a888:	005b      	lsls	r3, r3, #1
 811a88a:	4413      	add	r3, r2
 811a88c:	00db      	lsls	r3, r3, #3
 811a88e:	3308      	adds	r3, #8
 811a890:	4a16      	ldr	r2, [pc, #88]	@ (811a8ec <etharp_output_to_arp_index+0x124>)
 811a892:	4413      	add	r3, r2
 811a894:	3304      	adds	r3, #4
 811a896:	461a      	mov	r2, r3
 811a898:	68f8      	ldr	r0, [r7, #12]
 811a89a:	f000 fb47 	bl	811af2c <etharp_request_dst>
 811a89e:	4603      	mov	r3, r0
 811a8a0:	2b00      	cmp	r3, #0
 811a8a2:	d109      	bne.n	811a8b8 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 811a8a4:	79fa      	ldrb	r2, [r7, #7]
 811a8a6:	4911      	ldr	r1, [pc, #68]	@ (811a8ec <etharp_output_to_arp_index+0x124>)
 811a8a8:	4613      	mov	r3, r2
 811a8aa:	005b      	lsls	r3, r3, #1
 811a8ac:	4413      	add	r3, r2
 811a8ae:	00db      	lsls	r3, r3, #3
 811a8b0:	440b      	add	r3, r1
 811a8b2:	3314      	adds	r3, #20
 811a8b4:	2203      	movs	r2, #3
 811a8b6:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 811a8b8:	68fb      	ldr	r3, [r7, #12]
 811a8ba:	f103 0126 	add.w	r1, r3, #38	@ 0x26
 811a8be:	79fa      	ldrb	r2, [r7, #7]
 811a8c0:	4613      	mov	r3, r2
 811a8c2:	005b      	lsls	r3, r3, #1
 811a8c4:	4413      	add	r3, r2
 811a8c6:	00db      	lsls	r3, r3, #3
 811a8c8:	3308      	adds	r3, #8
 811a8ca:	4a08      	ldr	r2, [pc, #32]	@ (811a8ec <etharp_output_to_arp_index+0x124>)
 811a8cc:	4413      	add	r3, r2
 811a8ce:	3304      	adds	r3, #4
 811a8d0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 811a8d4:	9200      	str	r2, [sp, #0]
 811a8d6:	460a      	mov	r2, r1
 811a8d8:	68b9      	ldr	r1, [r7, #8]
 811a8da:	68f8      	ldr	r0, [r7, #12]
 811a8dc:	f000 fbe8 	bl	811b0b0 <ethernet_output>
 811a8e0:	4603      	mov	r3, r0
}
 811a8e2:	4618      	mov	r0, r3
 811a8e4:	3710      	adds	r7, #16
 811a8e6:	46bd      	mov	sp, r7
 811a8e8:	bd80      	pop	{r7, pc}
 811a8ea:	bf00      	nop
 811a8ec:	1000b280 	.word	0x1000b280
 811a8f0:	08127e20 	.word	0x08127e20
 811a8f4:	08127ff0 	.word	0x08127ff0
 811a8f8:	08127ea8 	.word	0x08127ea8

0811a8fc <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 811a8fc:	b580      	push	{r7, lr}
 811a8fe:	b08a      	sub	sp, #40	@ 0x28
 811a900:	af02      	add	r7, sp, #8
 811a902:	60f8      	str	r0, [r7, #12]
 811a904:	60b9      	str	r1, [r7, #8]
 811a906:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 811a908:	687b      	ldr	r3, [r7, #4]
 811a90a:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 811a90c:	68fb      	ldr	r3, [r7, #12]
 811a90e:	2b00      	cmp	r3, #0
 811a910:	d106      	bne.n	811a920 <etharp_output+0x24>
 811a912:	4b73      	ldr	r3, [pc, #460]	@ (811aae0 <etharp_output+0x1e4>)
 811a914:	f240 321e 	movw	r2, #798	@ 0x31e
 811a918:	4972      	ldr	r1, [pc, #456]	@ (811aae4 <etharp_output+0x1e8>)
 811a91a:	4873      	ldr	r0, [pc, #460]	@ (811aae8 <etharp_output+0x1ec>)
 811a91c:	f00c f8aa 	bl	8126a74 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 811a920:	68bb      	ldr	r3, [r7, #8]
 811a922:	2b00      	cmp	r3, #0
 811a924:	d106      	bne.n	811a934 <etharp_output+0x38>
 811a926:	4b6e      	ldr	r3, [pc, #440]	@ (811aae0 <etharp_output+0x1e4>)
 811a928:	f240 321f 	movw	r2, #799	@ 0x31f
 811a92c:	496f      	ldr	r1, [pc, #444]	@ (811aaec <etharp_output+0x1f0>)
 811a92e:	486e      	ldr	r0, [pc, #440]	@ (811aae8 <etharp_output+0x1ec>)
 811a930:	f00c f8a0 	bl	8126a74 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 811a934:	687b      	ldr	r3, [r7, #4]
 811a936:	2b00      	cmp	r3, #0
 811a938:	d106      	bne.n	811a948 <etharp_output+0x4c>
 811a93a:	4b69      	ldr	r3, [pc, #420]	@ (811aae0 <etharp_output+0x1e4>)
 811a93c:	f44f 7248 	mov.w	r2, #800	@ 0x320
 811a940:	496b      	ldr	r1, [pc, #428]	@ (811aaf0 <etharp_output+0x1f4>)
 811a942:	4869      	ldr	r0, [pc, #420]	@ (811aae8 <etharp_output+0x1ec>)
 811a944:	f00c f896 	bl	8126a74 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 811a948:	687b      	ldr	r3, [r7, #4]
 811a94a:	681b      	ldr	r3, [r3, #0]
 811a94c:	68f9      	ldr	r1, [r7, #12]
 811a94e:	4618      	mov	r0, r3
 811a950:	f001 f914 	bl	811bb7c <ip4_addr_isbroadcast_u32>
 811a954:	4603      	mov	r3, r0
 811a956:	2b00      	cmp	r3, #0
 811a958:	d002      	beq.n	811a960 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 811a95a:	4b66      	ldr	r3, [pc, #408]	@ (811aaf4 <etharp_output+0x1f8>)
 811a95c:	61fb      	str	r3, [r7, #28]
 811a95e:	e0af      	b.n	811aac0 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 811a960:	687b      	ldr	r3, [r7, #4]
 811a962:	681b      	ldr	r3, [r3, #0]
 811a964:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 811a968:	2be0      	cmp	r3, #224	@ 0xe0
 811a96a:	d118      	bne.n	811a99e <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 811a96c:	2301      	movs	r3, #1
 811a96e:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 811a970:	2300      	movs	r3, #0
 811a972:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 811a974:	235e      	movs	r3, #94	@ 0x5e
 811a976:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 811a978:	687b      	ldr	r3, [r7, #4]
 811a97a:	3301      	adds	r3, #1
 811a97c:	781b      	ldrb	r3, [r3, #0]
 811a97e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 811a982:	b2db      	uxtb	r3, r3
 811a984:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 811a986:	687b      	ldr	r3, [r7, #4]
 811a988:	3302      	adds	r3, #2
 811a98a:	781b      	ldrb	r3, [r3, #0]
 811a98c:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 811a98e:	687b      	ldr	r3, [r7, #4]
 811a990:	3303      	adds	r3, #3
 811a992:	781b      	ldrb	r3, [r3, #0]
 811a994:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 811a996:	f107 0310 	add.w	r3, r7, #16
 811a99a:	61fb      	str	r3, [r7, #28]
 811a99c:	e090      	b.n	811aac0 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 811a99e:	687b      	ldr	r3, [r7, #4]
 811a9a0:	681a      	ldr	r2, [r3, #0]
 811a9a2:	68fb      	ldr	r3, [r7, #12]
 811a9a4:	3304      	adds	r3, #4
 811a9a6:	681b      	ldr	r3, [r3, #0]
 811a9a8:	405a      	eors	r2, r3
 811a9aa:	68fb      	ldr	r3, [r7, #12]
 811a9ac:	3308      	adds	r3, #8
 811a9ae:	681b      	ldr	r3, [r3, #0]
 811a9b0:	4013      	ands	r3, r2
 811a9b2:	2b00      	cmp	r3, #0
 811a9b4:	d012      	beq.n	811a9dc <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 811a9b6:	687b      	ldr	r3, [r7, #4]
 811a9b8:	681b      	ldr	r3, [r3, #0]
 811a9ba:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 811a9bc:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 811a9c0:	4293      	cmp	r3, r2
 811a9c2:	d00b      	beq.n	811a9dc <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 811a9c4:	68fb      	ldr	r3, [r7, #12]
 811a9c6:	330c      	adds	r3, #12
 811a9c8:	681b      	ldr	r3, [r3, #0]
 811a9ca:	2b00      	cmp	r3, #0
 811a9cc:	d003      	beq.n	811a9d6 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 811a9ce:	68fb      	ldr	r3, [r7, #12]
 811a9d0:	330c      	adds	r3, #12
 811a9d2:	61bb      	str	r3, [r7, #24]
 811a9d4:	e002      	b.n	811a9dc <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 811a9d6:	f06f 0303 	mvn.w	r3, #3
 811a9da:	e07d      	b.n	811aad8 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 811a9dc:	4b46      	ldr	r3, [pc, #280]	@ (811aaf8 <etharp_output+0x1fc>)
 811a9de:	781b      	ldrb	r3, [r3, #0]
 811a9e0:	4619      	mov	r1, r3
 811a9e2:	4a46      	ldr	r2, [pc, #280]	@ (811aafc <etharp_output+0x200>)
 811a9e4:	460b      	mov	r3, r1
 811a9e6:	005b      	lsls	r3, r3, #1
 811a9e8:	440b      	add	r3, r1
 811a9ea:	00db      	lsls	r3, r3, #3
 811a9ec:	4413      	add	r3, r2
 811a9ee:	3314      	adds	r3, #20
 811a9f0:	781b      	ldrb	r3, [r3, #0]
 811a9f2:	2b01      	cmp	r3, #1
 811a9f4:	d925      	bls.n	811aa42 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 811a9f6:	4b40      	ldr	r3, [pc, #256]	@ (811aaf8 <etharp_output+0x1fc>)
 811a9f8:	781b      	ldrb	r3, [r3, #0]
 811a9fa:	4619      	mov	r1, r3
 811a9fc:	4a3f      	ldr	r2, [pc, #252]	@ (811aafc <etharp_output+0x200>)
 811a9fe:	460b      	mov	r3, r1
 811aa00:	005b      	lsls	r3, r3, #1
 811aa02:	440b      	add	r3, r1
 811aa04:	00db      	lsls	r3, r3, #3
 811aa06:	4413      	add	r3, r2
 811aa08:	3308      	adds	r3, #8
 811aa0a:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 811aa0c:	68fa      	ldr	r2, [r7, #12]
 811aa0e:	429a      	cmp	r2, r3
 811aa10:	d117      	bne.n	811aa42 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 811aa12:	69bb      	ldr	r3, [r7, #24]
 811aa14:	681a      	ldr	r2, [r3, #0]
 811aa16:	4b38      	ldr	r3, [pc, #224]	@ (811aaf8 <etharp_output+0x1fc>)
 811aa18:	781b      	ldrb	r3, [r3, #0]
 811aa1a:	4618      	mov	r0, r3
 811aa1c:	4937      	ldr	r1, [pc, #220]	@ (811aafc <etharp_output+0x200>)
 811aa1e:	4603      	mov	r3, r0
 811aa20:	005b      	lsls	r3, r3, #1
 811aa22:	4403      	add	r3, r0
 811aa24:	00db      	lsls	r3, r3, #3
 811aa26:	440b      	add	r3, r1
 811aa28:	3304      	adds	r3, #4
 811aa2a:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 811aa2c:	429a      	cmp	r2, r3
 811aa2e:	d108      	bne.n	811aa42 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 811aa30:	4b31      	ldr	r3, [pc, #196]	@ (811aaf8 <etharp_output+0x1fc>)
 811aa32:	781b      	ldrb	r3, [r3, #0]
 811aa34:	461a      	mov	r2, r3
 811aa36:	68b9      	ldr	r1, [r7, #8]
 811aa38:	68f8      	ldr	r0, [r7, #12]
 811aa3a:	f7ff fec5 	bl	811a7c8 <etharp_output_to_arp_index>
 811aa3e:	4603      	mov	r3, r0
 811aa40:	e04a      	b.n	811aad8 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 811aa42:	2300      	movs	r3, #0
 811aa44:	75fb      	strb	r3, [r7, #23]
 811aa46:	e031      	b.n	811aaac <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 811aa48:	7dfa      	ldrb	r2, [r7, #23]
 811aa4a:	492c      	ldr	r1, [pc, #176]	@ (811aafc <etharp_output+0x200>)
 811aa4c:	4613      	mov	r3, r2
 811aa4e:	005b      	lsls	r3, r3, #1
 811aa50:	4413      	add	r3, r2
 811aa52:	00db      	lsls	r3, r3, #3
 811aa54:	440b      	add	r3, r1
 811aa56:	3314      	adds	r3, #20
 811aa58:	781b      	ldrb	r3, [r3, #0]
 811aa5a:	2b01      	cmp	r3, #1
 811aa5c:	d923      	bls.n	811aaa6 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 811aa5e:	7dfa      	ldrb	r2, [r7, #23]
 811aa60:	4926      	ldr	r1, [pc, #152]	@ (811aafc <etharp_output+0x200>)
 811aa62:	4613      	mov	r3, r2
 811aa64:	005b      	lsls	r3, r3, #1
 811aa66:	4413      	add	r3, r2
 811aa68:	00db      	lsls	r3, r3, #3
 811aa6a:	440b      	add	r3, r1
 811aa6c:	3308      	adds	r3, #8
 811aa6e:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 811aa70:	68fa      	ldr	r2, [r7, #12]
 811aa72:	429a      	cmp	r2, r3
 811aa74:	d117      	bne.n	811aaa6 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 811aa76:	69bb      	ldr	r3, [r7, #24]
 811aa78:	6819      	ldr	r1, [r3, #0]
 811aa7a:	7dfa      	ldrb	r2, [r7, #23]
 811aa7c:	481f      	ldr	r0, [pc, #124]	@ (811aafc <etharp_output+0x200>)
 811aa7e:	4613      	mov	r3, r2
 811aa80:	005b      	lsls	r3, r3, #1
 811aa82:	4413      	add	r3, r2
 811aa84:	00db      	lsls	r3, r3, #3
 811aa86:	4403      	add	r3, r0
 811aa88:	3304      	adds	r3, #4
 811aa8a:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 811aa8c:	4299      	cmp	r1, r3
 811aa8e:	d10a      	bne.n	811aaa6 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 811aa90:	4a19      	ldr	r2, [pc, #100]	@ (811aaf8 <etharp_output+0x1fc>)
 811aa92:	7dfb      	ldrb	r3, [r7, #23]
 811aa94:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 811aa96:	7dfb      	ldrb	r3, [r7, #23]
 811aa98:	461a      	mov	r2, r3
 811aa9a:	68b9      	ldr	r1, [r7, #8]
 811aa9c:	68f8      	ldr	r0, [r7, #12]
 811aa9e:	f7ff fe93 	bl	811a7c8 <etharp_output_to_arp_index>
 811aaa2:	4603      	mov	r3, r0
 811aaa4:	e018      	b.n	811aad8 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 811aaa6:	7dfb      	ldrb	r3, [r7, #23]
 811aaa8:	3301      	adds	r3, #1
 811aaaa:	75fb      	strb	r3, [r7, #23]
 811aaac:	7dfb      	ldrb	r3, [r7, #23]
 811aaae:	2b09      	cmp	r3, #9
 811aab0:	d9ca      	bls.n	811aa48 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 811aab2:	68ba      	ldr	r2, [r7, #8]
 811aab4:	69b9      	ldr	r1, [r7, #24]
 811aab6:	68f8      	ldr	r0, [r7, #12]
 811aab8:	f000 f822 	bl	811ab00 <etharp_query>
 811aabc:	4603      	mov	r3, r0
 811aabe:	e00b      	b.n	811aad8 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 811aac0:	68fb      	ldr	r3, [r7, #12]
 811aac2:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 811aac6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 811aaca:	9300      	str	r3, [sp, #0]
 811aacc:	69fb      	ldr	r3, [r7, #28]
 811aace:	68b9      	ldr	r1, [r7, #8]
 811aad0:	68f8      	ldr	r0, [r7, #12]
 811aad2:	f000 faed 	bl	811b0b0 <ethernet_output>
 811aad6:	4603      	mov	r3, r0
}
 811aad8:	4618      	mov	r0, r3
 811aada:	3720      	adds	r7, #32
 811aadc:	46bd      	mov	sp, r7
 811aade:	bd80      	pop	{r7, pc}
 811aae0:	08127e20 	.word	0x08127e20
 811aae4:	08127fd0 	.word	0x08127fd0
 811aae8:	08127ea8 	.word	0x08127ea8
 811aaec:	08127e9c 	.word	0x08127e9c
 811aaf0:	08127fc0 	.word	0x08127fc0
 811aaf4:	0812ae3c 	.word	0x0812ae3c
 811aaf8:	1000b370 	.word	0x1000b370
 811aafc:	1000b280 	.word	0x1000b280

0811ab00 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 811ab00:	b580      	push	{r7, lr}
 811ab02:	b090      	sub	sp, #64	@ 0x40
 811ab04:	af02      	add	r7, sp, #8
 811ab06:	60f8      	str	r0, [r7, #12]
 811ab08:	60b9      	str	r1, [r7, #8]
 811ab0a:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 811ab0c:	68fb      	ldr	r3, [r7, #12]
 811ab0e:	3326      	adds	r3, #38	@ 0x26
 811ab10:	61fb      	str	r3, [r7, #28]
  err_t result = ERR_MEM;
 811ab12:	23ff      	movs	r3, #255	@ 0xff
 811ab14:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  int is_new_entry = 0;
 811ab18:	2300      	movs	r3, #0
 811ab1a:	633b      	str	r3, [r7, #48]	@ 0x30
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 811ab1c:	68bb      	ldr	r3, [r7, #8]
 811ab1e:	681b      	ldr	r3, [r3, #0]
 811ab20:	68f9      	ldr	r1, [r7, #12]
 811ab22:	4618      	mov	r0, r3
 811ab24:	f001 f82a 	bl	811bb7c <ip4_addr_isbroadcast_u32>
 811ab28:	4603      	mov	r3, r0
 811ab2a:	2b00      	cmp	r3, #0
 811ab2c:	d10c      	bne.n	811ab48 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 811ab2e:	68bb      	ldr	r3, [r7, #8]
 811ab30:	681b      	ldr	r3, [r3, #0]
 811ab32:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 811ab36:	2be0      	cmp	r3, #224	@ 0xe0
 811ab38:	d006      	beq.n	811ab48 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 811ab3a:	68bb      	ldr	r3, [r7, #8]
 811ab3c:	2b00      	cmp	r3, #0
 811ab3e:	d003      	beq.n	811ab48 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 811ab40:	68bb      	ldr	r3, [r7, #8]
 811ab42:	681b      	ldr	r3, [r3, #0]
 811ab44:	2b00      	cmp	r3, #0
 811ab46:	d102      	bne.n	811ab4e <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 811ab48:	f06f 030f 	mvn.w	r3, #15
 811ab4c:	e14e      	b.n	811adec <etharp_query+0x2ec>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 811ab4e:	68fa      	ldr	r2, [r7, #12]
 811ab50:	2101      	movs	r1, #1
 811ab52:	68b8      	ldr	r0, [r7, #8]
 811ab54:	f7ff fb1c 	bl	811a190 <etharp_find_entry>
 811ab58:	4603      	mov	r3, r0
 811ab5a:	837b      	strh	r3, [r7, #26]

  /* could not find or create entry? */
  if (i_err < 0) {
 811ab5c:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 811ab60:	2b00      	cmp	r3, #0
 811ab62:	da02      	bge.n	811ab6a <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 811ab64:	8b7b      	ldrh	r3, [r7, #26]
 811ab66:	b25b      	sxtb	r3, r3
 811ab68:	e140      	b.n	811adec <etharp_query+0x2ec>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 811ab6a:	8b7b      	ldrh	r3, [r7, #26]
 811ab6c:	2b7e      	cmp	r3, #126	@ 0x7e
 811ab6e:	d906      	bls.n	811ab7e <etharp_query+0x7e>
 811ab70:	4ba0      	ldr	r3, [pc, #640]	@ (811adf4 <etharp_query+0x2f4>)
 811ab72:	f240 32c1 	movw	r2, #961	@ 0x3c1
 811ab76:	49a0      	ldr	r1, [pc, #640]	@ (811adf8 <etharp_query+0x2f8>)
 811ab78:	48a0      	ldr	r0, [pc, #640]	@ (811adfc <etharp_query+0x2fc>)
 811ab7a:	f00b ff7b 	bl	8126a74 <iprintf>
  i = (netif_addr_idx_t)i_err;
 811ab7e:	8b7b      	ldrh	r3, [r7, #26]
 811ab80:	767b      	strb	r3, [r7, #25]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 811ab82:	7e7a      	ldrb	r2, [r7, #25]
 811ab84:	499e      	ldr	r1, [pc, #632]	@ (811ae00 <etharp_query+0x300>)
 811ab86:	4613      	mov	r3, r2
 811ab88:	005b      	lsls	r3, r3, #1
 811ab8a:	4413      	add	r3, r2
 811ab8c:	00db      	lsls	r3, r3, #3
 811ab8e:	440b      	add	r3, r1
 811ab90:	3314      	adds	r3, #20
 811ab92:	781b      	ldrb	r3, [r3, #0]
 811ab94:	2b00      	cmp	r3, #0
 811ab96:	d115      	bne.n	811abc4 <etharp_query+0xc4>
    is_new_entry = 1;
 811ab98:	2301      	movs	r3, #1
 811ab9a:	633b      	str	r3, [r7, #48]	@ 0x30
    arp_table[i].state = ETHARP_STATE_PENDING;
 811ab9c:	7e7a      	ldrb	r2, [r7, #25]
 811ab9e:	4998      	ldr	r1, [pc, #608]	@ (811ae00 <etharp_query+0x300>)
 811aba0:	4613      	mov	r3, r2
 811aba2:	005b      	lsls	r3, r3, #1
 811aba4:	4413      	add	r3, r2
 811aba6:	00db      	lsls	r3, r3, #3
 811aba8:	440b      	add	r3, r1
 811abaa:	3314      	adds	r3, #20
 811abac:	2201      	movs	r2, #1
 811abae:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 811abb0:	7e7a      	ldrb	r2, [r7, #25]
 811abb2:	4993      	ldr	r1, [pc, #588]	@ (811ae00 <etharp_query+0x300>)
 811abb4:	4613      	mov	r3, r2
 811abb6:	005b      	lsls	r3, r3, #1
 811abb8:	4413      	add	r3, r2
 811abba:	00db      	lsls	r3, r3, #3
 811abbc:	440b      	add	r3, r1
 811abbe:	3308      	adds	r3, #8
 811abc0:	68fa      	ldr	r2, [r7, #12]
 811abc2:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 811abc4:	7e7a      	ldrb	r2, [r7, #25]
 811abc6:	498e      	ldr	r1, [pc, #568]	@ (811ae00 <etharp_query+0x300>)
 811abc8:	4613      	mov	r3, r2
 811abca:	005b      	lsls	r3, r3, #1
 811abcc:	4413      	add	r3, r2
 811abce:	00db      	lsls	r3, r3, #3
 811abd0:	440b      	add	r3, r1
 811abd2:	3314      	adds	r3, #20
 811abd4:	781b      	ldrb	r3, [r3, #0]
 811abd6:	2b01      	cmp	r3, #1
 811abd8:	d011      	beq.n	811abfe <etharp_query+0xfe>
 811abda:	7e7a      	ldrb	r2, [r7, #25]
 811abdc:	4988      	ldr	r1, [pc, #544]	@ (811ae00 <etharp_query+0x300>)
 811abde:	4613      	mov	r3, r2
 811abe0:	005b      	lsls	r3, r3, #1
 811abe2:	4413      	add	r3, r2
 811abe4:	00db      	lsls	r3, r3, #3
 811abe6:	440b      	add	r3, r1
 811abe8:	3314      	adds	r3, #20
 811abea:	781b      	ldrb	r3, [r3, #0]
 811abec:	2b01      	cmp	r3, #1
 811abee:	d806      	bhi.n	811abfe <etharp_query+0xfe>
 811abf0:	4b80      	ldr	r3, [pc, #512]	@ (811adf4 <etharp_query+0x2f4>)
 811abf2:	f240 32cd 	movw	r2, #973	@ 0x3cd
 811abf6:	4983      	ldr	r1, [pc, #524]	@ (811ae04 <etharp_query+0x304>)
 811abf8:	4880      	ldr	r0, [pc, #512]	@ (811adfc <etharp_query+0x2fc>)
 811abfa:	f00b ff3b 	bl	8126a74 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 811abfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811ac00:	2b00      	cmp	r3, #0
 811ac02:	d102      	bne.n	811ac0a <etharp_query+0x10a>
 811ac04:	687b      	ldr	r3, [r7, #4]
 811ac06:	2b00      	cmp	r3, #0
 811ac08:	d10c      	bne.n	811ac24 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 811ac0a:	68b9      	ldr	r1, [r7, #8]
 811ac0c:	68f8      	ldr	r0, [r7, #12]
 811ac0e:	f000 f9af 	bl	811af70 <etharp_request>
 811ac12:	4603      	mov	r3, r0
 811ac14:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 811ac18:	687b      	ldr	r3, [r7, #4]
 811ac1a:	2b00      	cmp	r3, #0
 811ac1c:	d102      	bne.n	811ac24 <etharp_query+0x124>
      return result;
 811ac1e:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 811ac22:	e0e3      	b.n	811adec <etharp_query+0x2ec>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 811ac24:	687b      	ldr	r3, [r7, #4]
 811ac26:	2b00      	cmp	r3, #0
 811ac28:	d106      	bne.n	811ac38 <etharp_query+0x138>
 811ac2a:	4b72      	ldr	r3, [pc, #456]	@ (811adf4 <etharp_query+0x2f4>)
 811ac2c:	f240 32e1 	movw	r2, #993	@ 0x3e1
 811ac30:	4975      	ldr	r1, [pc, #468]	@ (811ae08 <etharp_query+0x308>)
 811ac32:	4872      	ldr	r0, [pc, #456]	@ (811adfc <etharp_query+0x2fc>)
 811ac34:	f00b ff1e 	bl	8126a74 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 811ac38:	7e7a      	ldrb	r2, [r7, #25]
 811ac3a:	4971      	ldr	r1, [pc, #452]	@ (811ae00 <etharp_query+0x300>)
 811ac3c:	4613      	mov	r3, r2
 811ac3e:	005b      	lsls	r3, r3, #1
 811ac40:	4413      	add	r3, r2
 811ac42:	00db      	lsls	r3, r3, #3
 811ac44:	440b      	add	r3, r1
 811ac46:	3314      	adds	r3, #20
 811ac48:	781b      	ldrb	r3, [r3, #0]
 811ac4a:	2b01      	cmp	r3, #1
 811ac4c:	d917      	bls.n	811ac7e <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 811ac4e:	4a6f      	ldr	r2, [pc, #444]	@ (811ae0c <etharp_query+0x30c>)
 811ac50:	7e7b      	ldrb	r3, [r7, #25]
 811ac52:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 811ac54:	7e7a      	ldrb	r2, [r7, #25]
 811ac56:	4613      	mov	r3, r2
 811ac58:	005b      	lsls	r3, r3, #1
 811ac5a:	4413      	add	r3, r2
 811ac5c:	00db      	lsls	r3, r3, #3
 811ac5e:	3308      	adds	r3, #8
 811ac60:	4a67      	ldr	r2, [pc, #412]	@ (811ae00 <etharp_query+0x300>)
 811ac62:	4413      	add	r3, r2
 811ac64:	3304      	adds	r3, #4
 811ac66:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 811ac6a:	9200      	str	r2, [sp, #0]
 811ac6c:	69fa      	ldr	r2, [r7, #28]
 811ac6e:	6879      	ldr	r1, [r7, #4]
 811ac70:	68f8      	ldr	r0, [r7, #12]
 811ac72:	f000 fa1d 	bl	811b0b0 <ethernet_output>
 811ac76:	4603      	mov	r3, r0
 811ac78:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 811ac7c:	e0b4      	b.n	811ade8 <etharp_query+0x2e8>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 811ac7e:	7e7a      	ldrb	r2, [r7, #25]
 811ac80:	495f      	ldr	r1, [pc, #380]	@ (811ae00 <etharp_query+0x300>)
 811ac82:	4613      	mov	r3, r2
 811ac84:	005b      	lsls	r3, r3, #1
 811ac86:	4413      	add	r3, r2
 811ac88:	00db      	lsls	r3, r3, #3
 811ac8a:	440b      	add	r3, r1
 811ac8c:	3314      	adds	r3, #20
 811ac8e:	781b      	ldrb	r3, [r3, #0]
 811ac90:	2b01      	cmp	r3, #1
 811ac92:	f040 80a9 	bne.w	811ade8 <etharp_query+0x2e8>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 811ac96:	2300      	movs	r3, #0
 811ac98:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 811ac9a:	687b      	ldr	r3, [r7, #4]
 811ac9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    while (p) {
 811ac9e:	e01c      	b.n	811acda <etharp_query+0x1da>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 811aca0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811aca2:	895a      	ldrh	r2, [r3, #10]
 811aca4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811aca6:	891b      	ldrh	r3, [r3, #8]
 811aca8:	429a      	cmp	r2, r3
 811acaa:	d10a      	bne.n	811acc2 <etharp_query+0x1c2>
 811acac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811acae:	681b      	ldr	r3, [r3, #0]
 811acb0:	2b00      	cmp	r3, #0
 811acb2:	d006      	beq.n	811acc2 <etharp_query+0x1c2>
 811acb4:	4b4f      	ldr	r3, [pc, #316]	@ (811adf4 <etharp_query+0x2f4>)
 811acb6:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 811acba:	4955      	ldr	r1, [pc, #340]	@ (811ae10 <etharp_query+0x310>)
 811acbc:	484f      	ldr	r0, [pc, #316]	@ (811adfc <etharp_query+0x2fc>)
 811acbe:	f00b fed9 	bl	8126a74 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 811acc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811acc4:	7b1b      	ldrb	r3, [r3, #12]
 811acc6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 811acca:	2b00      	cmp	r3, #0
 811accc:	d002      	beq.n	811acd4 <etharp_query+0x1d4>
        copy_needed = 1;
 811acce:	2301      	movs	r3, #1
 811acd0:	62bb      	str	r3, [r7, #40]	@ 0x28
        break;
 811acd2:	e005      	b.n	811ace0 <etharp_query+0x1e0>
      }
      p = p->next;
 811acd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811acd6:	681b      	ldr	r3, [r3, #0]
 811acd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    while (p) {
 811acda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811acdc:	2b00      	cmp	r3, #0
 811acde:	d1df      	bne.n	811aca0 <etharp_query+0x1a0>
    }
    if (copy_needed) {
 811ace0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 811ace2:	2b00      	cmp	r3, #0
 811ace4:	d007      	beq.n	811acf6 <etharp_query+0x1f6>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 811ace6:	687a      	ldr	r2, [r7, #4]
 811ace8:	f44f 7120 	mov.w	r1, #640	@ 0x280
 811acec:	200e      	movs	r0, #14
 811acee:	f003 fd8d 	bl	811e80c <pbuf_clone>
 811acf2:	62f8      	str	r0, [r7, #44]	@ 0x2c
 811acf4:	e004      	b.n	811ad00 <etharp_query+0x200>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 811acf6:	687b      	ldr	r3, [r7, #4]
 811acf8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pbuf_ref(p);
 811acfa:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 811acfc:	f003 fbb4 	bl	811e468 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 811ad00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811ad02:	2b00      	cmp	r3, #0
 811ad04:	d06d      	beq.n	811ade2 <etharp_query+0x2e2>
      /* queue packet ... */
#if ARP_QUEUEING
      struct etharp_q_entry *new_entry;
      /* allocate a new arp queue entry */
      new_entry = (struct etharp_q_entry *)memp_malloc(MEMP_ARP_QUEUE);
 811ad06:	2009      	movs	r0, #9
 811ad08:	f002 fbf0 	bl	811d4ec <memp_malloc>
 811ad0c:	6178      	str	r0, [r7, #20]
      if (new_entry != NULL) {
 811ad0e:	697b      	ldr	r3, [r7, #20]
 811ad10:	2b00      	cmp	r3, #0
 811ad12:	d05f      	beq.n	811add4 <etharp_query+0x2d4>
        unsigned int qlen = 0;
 811ad14:	2300      	movs	r3, #0
 811ad16:	627b      	str	r3, [r7, #36]	@ 0x24
        new_entry->next = 0;
 811ad18:	697b      	ldr	r3, [r7, #20]
 811ad1a:	2200      	movs	r2, #0
 811ad1c:	601a      	str	r2, [r3, #0]
        new_entry->p = p;
 811ad1e:	697b      	ldr	r3, [r7, #20]
 811ad20:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 811ad22:	605a      	str	r2, [r3, #4]
        if (arp_table[i].q != NULL) {
 811ad24:	7e7a      	ldrb	r2, [r7, #25]
 811ad26:	4936      	ldr	r1, [pc, #216]	@ (811ae00 <etharp_query+0x300>)
 811ad28:	4613      	mov	r3, r2
 811ad2a:	005b      	lsls	r3, r3, #1
 811ad2c:	4413      	add	r3, r2
 811ad2e:	00db      	lsls	r3, r3, #3
 811ad30:	440b      	add	r3, r1
 811ad32:	681b      	ldr	r3, [r3, #0]
 811ad34:	2b00      	cmp	r3, #0
 811ad36:	d01a      	beq.n	811ad6e <etharp_query+0x26e>
          /* queue was already existent, append the new entry to the end */
          struct etharp_q_entry *r;
          r = arp_table[i].q;
 811ad38:	7e7a      	ldrb	r2, [r7, #25]
 811ad3a:	4931      	ldr	r1, [pc, #196]	@ (811ae00 <etharp_query+0x300>)
 811ad3c:	4613      	mov	r3, r2
 811ad3e:	005b      	lsls	r3, r3, #1
 811ad40:	4413      	add	r3, r2
 811ad42:	00db      	lsls	r3, r3, #3
 811ad44:	440b      	add	r3, r1
 811ad46:	681b      	ldr	r3, [r3, #0]
 811ad48:	623b      	str	r3, [r7, #32]
          qlen++;
 811ad4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811ad4c:	3301      	adds	r3, #1
 811ad4e:	627b      	str	r3, [r7, #36]	@ 0x24
          while (r->next != NULL) {
 811ad50:	e005      	b.n	811ad5e <etharp_query+0x25e>
            r = r->next;
 811ad52:	6a3b      	ldr	r3, [r7, #32]
 811ad54:	681b      	ldr	r3, [r3, #0]
 811ad56:	623b      	str	r3, [r7, #32]
            qlen++;
 811ad58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811ad5a:	3301      	adds	r3, #1
 811ad5c:	627b      	str	r3, [r7, #36]	@ 0x24
          while (r->next != NULL) {
 811ad5e:	6a3b      	ldr	r3, [r7, #32]
 811ad60:	681b      	ldr	r3, [r3, #0]
 811ad62:	2b00      	cmp	r3, #0
 811ad64:	d1f5      	bne.n	811ad52 <etharp_query+0x252>
          }
          r->next = new_entry;
 811ad66:	6a3b      	ldr	r3, [r7, #32]
 811ad68:	697a      	ldr	r2, [r7, #20]
 811ad6a:	601a      	str	r2, [r3, #0]
 811ad6c:	e008      	b.n	811ad80 <etharp_query+0x280>
        } else {
          /* queue did not exist, first item in queue */
          arp_table[i].q = new_entry;
 811ad6e:	7e7a      	ldrb	r2, [r7, #25]
 811ad70:	4923      	ldr	r1, [pc, #140]	@ (811ae00 <etharp_query+0x300>)
 811ad72:	4613      	mov	r3, r2
 811ad74:	005b      	lsls	r3, r3, #1
 811ad76:	4413      	add	r3, r2
 811ad78:	00db      	lsls	r3, r3, #3
 811ad7a:	440b      	add	r3, r1
 811ad7c:	697a      	ldr	r2, [r7, #20]
 811ad7e:	601a      	str	r2, [r3, #0]
        }
#if ARP_QUEUE_LEN
        if (qlen >= ARP_QUEUE_LEN) {
 811ad80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811ad82:	2b02      	cmp	r3, #2
 811ad84:	d922      	bls.n	811adcc <etharp_query+0x2cc>
          struct etharp_q_entry *old;
          old = arp_table[i].q;
 811ad86:	7e7a      	ldrb	r2, [r7, #25]
 811ad88:	491d      	ldr	r1, [pc, #116]	@ (811ae00 <etharp_query+0x300>)
 811ad8a:	4613      	mov	r3, r2
 811ad8c:	005b      	lsls	r3, r3, #1
 811ad8e:	4413      	add	r3, r2
 811ad90:	00db      	lsls	r3, r3, #3
 811ad92:	440b      	add	r3, r1
 811ad94:	681b      	ldr	r3, [r3, #0]
 811ad96:	613b      	str	r3, [r7, #16]
          arp_table[i].q = arp_table[i].q->next;
 811ad98:	7e7a      	ldrb	r2, [r7, #25]
 811ad9a:	4919      	ldr	r1, [pc, #100]	@ (811ae00 <etharp_query+0x300>)
 811ad9c:	4613      	mov	r3, r2
 811ad9e:	005b      	lsls	r3, r3, #1
 811ada0:	4413      	add	r3, r2
 811ada2:	00db      	lsls	r3, r3, #3
 811ada4:	440b      	add	r3, r1
 811ada6:	681b      	ldr	r3, [r3, #0]
 811ada8:	7e7a      	ldrb	r2, [r7, #25]
 811adaa:	6819      	ldr	r1, [r3, #0]
 811adac:	4814      	ldr	r0, [pc, #80]	@ (811ae00 <etharp_query+0x300>)
 811adae:	4613      	mov	r3, r2
 811adb0:	005b      	lsls	r3, r3, #1
 811adb2:	4413      	add	r3, r2
 811adb4:	00db      	lsls	r3, r3, #3
 811adb6:	4403      	add	r3, r0
 811adb8:	6019      	str	r1, [r3, #0]
          pbuf_free(old->p);
 811adba:	693b      	ldr	r3, [r7, #16]
 811adbc:	685b      	ldr	r3, [r3, #4]
 811adbe:	4618      	mov	r0, r3
 811adc0:	f003 faac 	bl	811e31c <pbuf_free>
          memp_free(MEMP_ARP_QUEUE, old);
 811adc4:	6939      	ldr	r1, [r7, #16]
 811adc6:	2009      	movs	r0, #9
 811adc8:	f002 fc06 	bl	811d5d8 <memp_free>
        }
#endif
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, i));
        result = ERR_OK;
 811adcc:	2300      	movs	r3, #0
 811adce:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 811add2:	e009      	b.n	811ade8 <etharp_query+0x2e8>
      } else {
        /* the pool MEMP_ARP_QUEUE is empty */
        pbuf_free(p);
 811add4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 811add6:	f003 faa1 	bl	811e31c <pbuf_free>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
 811adda:	23ff      	movs	r3, #255	@ 0xff
 811addc:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 811ade0:	e002      	b.n	811ade8 <etharp_query+0x2e8>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 811ade2:	23ff      	movs	r3, #255	@ 0xff
 811ade4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    }
  }
  return result;
 811ade8:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 811adec:	4618      	mov	r0, r3
 811adee:	3738      	adds	r7, #56	@ 0x38
 811adf0:	46bd      	mov	sp, r7
 811adf2:	bd80      	pop	{r7, pc}
 811adf4:	08127e20 	.word	0x08127e20
 811adf8:	08128020 	.word	0x08128020
 811adfc:	08127ea8 	.word	0x08127ea8
 811ae00:	1000b280 	.word	0x1000b280
 811ae04:	08128030 	.word	0x08128030
 811ae08:	08127e9c 	.word	0x08127e9c
 811ae0c:	1000b370 	.word	0x1000b370
 811ae10:	08128058 	.word	0x08128058

0811ae14 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 811ae14:	b580      	push	{r7, lr}
 811ae16:	b08a      	sub	sp, #40	@ 0x28
 811ae18:	af02      	add	r7, sp, #8
 811ae1a:	60f8      	str	r0, [r7, #12]
 811ae1c:	60b9      	str	r1, [r7, #8]
 811ae1e:	607a      	str	r2, [r7, #4]
 811ae20:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 811ae22:	2300      	movs	r3, #0
 811ae24:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 811ae26:	68fb      	ldr	r3, [r7, #12]
 811ae28:	2b00      	cmp	r3, #0
 811ae2a:	d106      	bne.n	811ae3a <etharp_raw+0x26>
 811ae2c:	4b3a      	ldr	r3, [pc, #232]	@ (811af18 <etharp_raw+0x104>)
 811ae2e:	f240 4257 	movw	r2, #1111	@ 0x457
 811ae32:	493a      	ldr	r1, [pc, #232]	@ (811af1c <etharp_raw+0x108>)
 811ae34:	483a      	ldr	r0, [pc, #232]	@ (811af20 <etharp_raw+0x10c>)
 811ae36:	f00b fe1d 	bl	8126a74 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 811ae3a:	f44f 7220 	mov.w	r2, #640	@ 0x280
 811ae3e:	211c      	movs	r1, #28
 811ae40:	200e      	movs	r0, #14
 811ae42:	f002 ff89 	bl	811dd58 <pbuf_alloc>
 811ae46:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 811ae48:	69bb      	ldr	r3, [r7, #24]
 811ae4a:	2b00      	cmp	r3, #0
 811ae4c:	d102      	bne.n	811ae54 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 811ae4e:	f04f 33ff 	mov.w	r3, #4294967295
 811ae52:	e05d      	b.n	811af10 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 811ae54:	69bb      	ldr	r3, [r7, #24]
 811ae56:	895b      	ldrh	r3, [r3, #10]
 811ae58:	2b1b      	cmp	r3, #27
 811ae5a:	d806      	bhi.n	811ae6a <etharp_raw+0x56>
 811ae5c:	4b2e      	ldr	r3, [pc, #184]	@ (811af18 <etharp_raw+0x104>)
 811ae5e:	f240 4262 	movw	r2, #1122	@ 0x462
 811ae62:	4930      	ldr	r1, [pc, #192]	@ (811af24 <etharp_raw+0x110>)
 811ae64:	482e      	ldr	r0, [pc, #184]	@ (811af20 <etharp_raw+0x10c>)
 811ae66:	f00b fe05 	bl	8126a74 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 811ae6a:	69bb      	ldr	r3, [r7, #24]
 811ae6c:	685b      	ldr	r3, [r3, #4]
 811ae6e:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 811ae70:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 811ae72:	4618      	mov	r0, r3
 811ae74:	f7ff f84a 	bl	8119f0c <lwip_htons>
 811ae78:	4603      	mov	r3, r0
 811ae7a:	461a      	mov	r2, r3
 811ae7c:	697b      	ldr	r3, [r7, #20]
 811ae7e:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 811ae80:	68fb      	ldr	r3, [r7, #12]
 811ae82:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 811ae86:	2b06      	cmp	r3, #6
 811ae88:	d006      	beq.n	811ae98 <etharp_raw+0x84>
 811ae8a:	4b23      	ldr	r3, [pc, #140]	@ (811af18 <etharp_raw+0x104>)
 811ae8c:	f240 4269 	movw	r2, #1129	@ 0x469
 811ae90:	4925      	ldr	r1, [pc, #148]	@ (811af28 <etharp_raw+0x114>)
 811ae92:	4823      	ldr	r0, [pc, #140]	@ (811af20 <etharp_raw+0x10c>)
 811ae94:	f00b fdee 	bl	8126a74 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 811ae98:	697b      	ldr	r3, [r7, #20]
 811ae9a:	3308      	adds	r3, #8
 811ae9c:	2206      	movs	r2, #6
 811ae9e:	6839      	ldr	r1, [r7, #0]
 811aea0:	4618      	mov	r0, r3
 811aea2:	f00c f84a 	bl	8126f3a <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 811aea6:	697b      	ldr	r3, [r7, #20]
 811aea8:	3312      	adds	r3, #18
 811aeaa:	2206      	movs	r2, #6
 811aeac:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 811aeae:	4618      	mov	r0, r3
 811aeb0:	f00c f843 	bl	8126f3a <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 811aeb4:	697b      	ldr	r3, [r7, #20]
 811aeb6:	330e      	adds	r3, #14
 811aeb8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 811aeba:	6812      	ldr	r2, [r2, #0]
 811aebc:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 811aebe:	697b      	ldr	r3, [r7, #20]
 811aec0:	3318      	adds	r3, #24
 811aec2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 811aec4:	6812      	ldr	r2, [r2, #0]
 811aec6:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 811aec8:	697b      	ldr	r3, [r7, #20]
 811aeca:	2200      	movs	r2, #0
 811aecc:	701a      	strb	r2, [r3, #0]
 811aece:	2200      	movs	r2, #0
 811aed0:	f042 0201 	orr.w	r2, r2, #1
 811aed4:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 811aed6:	697b      	ldr	r3, [r7, #20]
 811aed8:	2200      	movs	r2, #0
 811aeda:	f042 0208 	orr.w	r2, r2, #8
 811aede:	709a      	strb	r2, [r3, #2]
 811aee0:	2200      	movs	r2, #0
 811aee2:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 811aee4:	697b      	ldr	r3, [r7, #20]
 811aee6:	2206      	movs	r2, #6
 811aee8:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 811aeea:	697b      	ldr	r3, [r7, #20]
 811aeec:	2204      	movs	r2, #4
 811aeee:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 811aef0:	f640 0306 	movw	r3, #2054	@ 0x806
 811aef4:	9300      	str	r3, [sp, #0]
 811aef6:	687b      	ldr	r3, [r7, #4]
 811aef8:	68ba      	ldr	r2, [r7, #8]
 811aefa:	69b9      	ldr	r1, [r7, #24]
 811aefc:	68f8      	ldr	r0, [r7, #12]
 811aefe:	f000 f8d7 	bl	811b0b0 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 811af02:	69b8      	ldr	r0, [r7, #24]
 811af04:	f003 fa0a 	bl	811e31c <pbuf_free>
  p = NULL;
 811af08:	2300      	movs	r3, #0
 811af0a:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 811af0c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 811af10:	4618      	mov	r0, r3
 811af12:	3720      	adds	r7, #32
 811af14:	46bd      	mov	sp, r7
 811af16:	bd80      	pop	{r7, pc}
 811af18:	08127e20 	.word	0x08127e20
 811af1c:	08127fd0 	.word	0x08127fd0
 811af20:	08127ea8 	.word	0x08127ea8
 811af24:	08128074 	.word	0x08128074
 811af28:	081280a8 	.word	0x081280a8

0811af2c <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 811af2c:	b580      	push	{r7, lr}
 811af2e:	b088      	sub	sp, #32
 811af30:	af04      	add	r7, sp, #16
 811af32:	60f8      	str	r0, [r7, #12]
 811af34:	60b9      	str	r1, [r7, #8]
 811af36:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 811af38:	68fb      	ldr	r3, [r7, #12]
 811af3a:	f103 0126 	add.w	r1, r3, #38	@ 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 811af3e:	68fb      	ldr	r3, [r7, #12]
 811af40:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 811af44:	68fb      	ldr	r3, [r7, #12]
 811af46:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 811af48:	2201      	movs	r2, #1
 811af4a:	9203      	str	r2, [sp, #12]
 811af4c:	68ba      	ldr	r2, [r7, #8]
 811af4e:	9202      	str	r2, [sp, #8]
 811af50:	4a06      	ldr	r2, [pc, #24]	@ (811af6c <etharp_request_dst+0x40>)
 811af52:	9201      	str	r2, [sp, #4]
 811af54:	9300      	str	r3, [sp, #0]
 811af56:	4603      	mov	r3, r0
 811af58:	687a      	ldr	r2, [r7, #4]
 811af5a:	68f8      	ldr	r0, [r7, #12]
 811af5c:	f7ff ff5a 	bl	811ae14 <etharp_raw>
 811af60:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 811af62:	4618      	mov	r0, r3
 811af64:	3710      	adds	r7, #16
 811af66:	46bd      	mov	sp, r7
 811af68:	bd80      	pop	{r7, pc}
 811af6a:	bf00      	nop
 811af6c:	0812ae44 	.word	0x0812ae44

0811af70 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 811af70:	b580      	push	{r7, lr}
 811af72:	b082      	sub	sp, #8
 811af74:	af00      	add	r7, sp, #0
 811af76:	6078      	str	r0, [r7, #4]
 811af78:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 811af7a:	4a05      	ldr	r2, [pc, #20]	@ (811af90 <etharp_request+0x20>)
 811af7c:	6839      	ldr	r1, [r7, #0]
 811af7e:	6878      	ldr	r0, [r7, #4]
 811af80:	f7ff ffd4 	bl	811af2c <etharp_request_dst>
 811af84:	4603      	mov	r3, r0
}
 811af86:	4618      	mov	r0, r3
 811af88:	3708      	adds	r7, #8
 811af8a:	46bd      	mov	sp, r7
 811af8c:	bd80      	pop	{r7, pc}
 811af8e:	bf00      	nop
 811af90:	0812ae3c 	.word	0x0812ae3c

0811af94 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 811af94:	b580      	push	{r7, lr}
 811af96:	b086      	sub	sp, #24
 811af98:	af00      	add	r7, sp, #0
 811af9a:	6078      	str	r0, [r7, #4]
 811af9c:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 811af9e:	230e      	movs	r3, #14
 811afa0:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 811afa2:	687b      	ldr	r3, [r7, #4]
 811afa4:	895b      	ldrh	r3, [r3, #10]
 811afa6:	2b0e      	cmp	r3, #14
 811afa8:	d96e      	bls.n	811b088 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 811afaa:	687b      	ldr	r3, [r7, #4]
 811afac:	7bdb      	ldrb	r3, [r3, #15]
 811afae:	2b00      	cmp	r3, #0
 811afb0:	d106      	bne.n	811afc0 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 811afb2:	683b      	ldr	r3, [r7, #0]
 811afb4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 811afb8:	3301      	adds	r3, #1
 811afba:	b2da      	uxtb	r2, r3
 811afbc:	687b      	ldr	r3, [r7, #4]
 811afbe:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 811afc0:	687b      	ldr	r3, [r7, #4]
 811afc2:	685b      	ldr	r3, [r3, #4]
 811afc4:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 811afc6:	693b      	ldr	r3, [r7, #16]
 811afc8:	7b1a      	ldrb	r2, [r3, #12]
 811afca:	7b5b      	ldrb	r3, [r3, #13]
 811afcc:	021b      	lsls	r3, r3, #8
 811afce:	4313      	orrs	r3, r2
 811afd0:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 811afd2:	693b      	ldr	r3, [r7, #16]
 811afd4:	781b      	ldrb	r3, [r3, #0]
 811afd6:	f003 0301 	and.w	r3, r3, #1
 811afda:	2b00      	cmp	r3, #0
 811afdc:	d023      	beq.n	811b026 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 811afde:	693b      	ldr	r3, [r7, #16]
 811afe0:	781b      	ldrb	r3, [r3, #0]
 811afe2:	2b01      	cmp	r3, #1
 811afe4:	d10f      	bne.n	811b006 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 811afe6:	693b      	ldr	r3, [r7, #16]
 811afe8:	785b      	ldrb	r3, [r3, #1]
 811afea:	2b00      	cmp	r3, #0
 811afec:	d11b      	bne.n	811b026 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 811afee:	693b      	ldr	r3, [r7, #16]
 811aff0:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 811aff2:	2b5e      	cmp	r3, #94	@ 0x5e
 811aff4:	d117      	bne.n	811b026 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 811aff6:	687b      	ldr	r3, [r7, #4]
 811aff8:	7b5b      	ldrb	r3, [r3, #13]
 811affa:	f043 0310 	orr.w	r3, r3, #16
 811affe:	b2da      	uxtb	r2, r3
 811b000:	687b      	ldr	r3, [r7, #4]
 811b002:	735a      	strb	r2, [r3, #13]
 811b004:	e00f      	b.n	811b026 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 811b006:	693b      	ldr	r3, [r7, #16]
 811b008:	2206      	movs	r2, #6
 811b00a:	4928      	ldr	r1, [pc, #160]	@ (811b0ac <ethernet_input+0x118>)
 811b00c:	4618      	mov	r0, r3
 811b00e:	f00b fe1b 	bl	8126c48 <memcmp>
 811b012:	4603      	mov	r3, r0
 811b014:	2b00      	cmp	r3, #0
 811b016:	d106      	bne.n	811b026 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 811b018:	687b      	ldr	r3, [r7, #4]
 811b01a:	7b5b      	ldrb	r3, [r3, #13]
 811b01c:	f043 0308 	orr.w	r3, r3, #8
 811b020:	b2da      	uxtb	r2, r3
 811b022:	687b      	ldr	r3, [r7, #4]
 811b024:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 811b026:	89fb      	ldrh	r3, [r7, #14]
 811b028:	2b08      	cmp	r3, #8
 811b02a:	d003      	beq.n	811b034 <ethernet_input+0xa0>
 811b02c:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 811b030:	d014      	beq.n	811b05c <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 811b032:	e032      	b.n	811b09a <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 811b034:	683b      	ldr	r3, [r7, #0]
 811b036:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 811b03a:	f003 0308 	and.w	r3, r3, #8
 811b03e:	2b00      	cmp	r3, #0
 811b040:	d024      	beq.n	811b08c <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 811b042:	8afb      	ldrh	r3, [r7, #22]
 811b044:	4619      	mov	r1, r3
 811b046:	6878      	ldr	r0, [r7, #4]
 811b048:	f003 f8e2 	bl	811e210 <pbuf_remove_header>
 811b04c:	4603      	mov	r3, r0
 811b04e:	2b00      	cmp	r3, #0
 811b050:	d11e      	bne.n	811b090 <ethernet_input+0xfc>
        ip4_input(p, netif);
 811b052:	6839      	ldr	r1, [r7, #0]
 811b054:	6878      	ldr	r0, [r7, #4]
 811b056:	f000 fb95 	bl	811b784 <ip4_input>
      break;
 811b05a:	e013      	b.n	811b084 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 811b05c:	683b      	ldr	r3, [r7, #0]
 811b05e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 811b062:	f003 0308 	and.w	r3, r3, #8
 811b066:	2b00      	cmp	r3, #0
 811b068:	d014      	beq.n	811b094 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 811b06a:	8afb      	ldrh	r3, [r7, #22]
 811b06c:	4619      	mov	r1, r3
 811b06e:	6878      	ldr	r0, [r7, #4]
 811b070:	f003 f8ce 	bl	811e210 <pbuf_remove_header>
 811b074:	4603      	mov	r3, r0
 811b076:	2b00      	cmp	r3, #0
 811b078:	d10e      	bne.n	811b098 <ethernet_input+0x104>
        etharp_input(p, netif);
 811b07a:	6839      	ldr	r1, [r7, #0]
 811b07c:	6878      	ldr	r0, [r7, #4]
 811b07e:	f7ff fb19 	bl	811a6b4 <etharp_input>
      break;
 811b082:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 811b084:	2300      	movs	r3, #0
 811b086:	e00c      	b.n	811b0a2 <ethernet_input+0x10e>
    goto free_and_return;
 811b088:	bf00      	nop
 811b08a:	e006      	b.n	811b09a <ethernet_input+0x106>
        goto free_and_return;
 811b08c:	bf00      	nop
 811b08e:	e004      	b.n	811b09a <ethernet_input+0x106>
        goto free_and_return;
 811b090:	bf00      	nop
 811b092:	e002      	b.n	811b09a <ethernet_input+0x106>
        goto free_and_return;
 811b094:	bf00      	nop
 811b096:	e000      	b.n	811b09a <ethernet_input+0x106>
        goto free_and_return;
 811b098:	bf00      	nop

free_and_return:
  pbuf_free(p);
 811b09a:	6878      	ldr	r0, [r7, #4]
 811b09c:	f003 f93e 	bl	811e31c <pbuf_free>
  return ERR_OK;
 811b0a0:	2300      	movs	r3, #0
}
 811b0a2:	4618      	mov	r0, r3
 811b0a4:	3718      	adds	r7, #24
 811b0a6:	46bd      	mov	sp, r7
 811b0a8:	bd80      	pop	{r7, pc}
 811b0aa:	bf00      	nop
 811b0ac:	0812ae3c 	.word	0x0812ae3c

0811b0b0 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 811b0b0:	b580      	push	{r7, lr}
 811b0b2:	b086      	sub	sp, #24
 811b0b4:	af00      	add	r7, sp, #0
 811b0b6:	60f8      	str	r0, [r7, #12]
 811b0b8:	60b9      	str	r1, [r7, #8]
 811b0ba:	607a      	str	r2, [r7, #4]
 811b0bc:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 811b0be:	8c3b      	ldrh	r3, [r7, #32]
 811b0c0:	4618      	mov	r0, r3
 811b0c2:	f7fe ff23 	bl	8119f0c <lwip_htons>
 811b0c6:	4603      	mov	r3, r0
 811b0c8:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 811b0ca:	210e      	movs	r1, #14
 811b0cc:	68b8      	ldr	r0, [r7, #8]
 811b0ce:	f003 f88f 	bl	811e1f0 <pbuf_add_header>
 811b0d2:	4603      	mov	r3, r0
 811b0d4:	2b00      	cmp	r3, #0
 811b0d6:	d125      	bne.n	811b124 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 811b0d8:	68bb      	ldr	r3, [r7, #8]
 811b0da:	685b      	ldr	r3, [r3, #4]
 811b0dc:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 811b0de:	693b      	ldr	r3, [r7, #16]
 811b0e0:	8afa      	ldrh	r2, [r7, #22]
 811b0e2:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 811b0e4:	693b      	ldr	r3, [r7, #16]
 811b0e6:	2206      	movs	r2, #6
 811b0e8:	6839      	ldr	r1, [r7, #0]
 811b0ea:	4618      	mov	r0, r3
 811b0ec:	f00b ff25 	bl	8126f3a <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 811b0f0:	693b      	ldr	r3, [r7, #16]
 811b0f2:	3306      	adds	r3, #6
 811b0f4:	2206      	movs	r2, #6
 811b0f6:	6879      	ldr	r1, [r7, #4]
 811b0f8:	4618      	mov	r0, r3
 811b0fa:	f00b ff1e 	bl	8126f3a <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 811b0fe:	68fb      	ldr	r3, [r7, #12]
 811b100:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 811b104:	2b06      	cmp	r3, #6
 811b106:	d006      	beq.n	811b116 <ethernet_output+0x66>
 811b108:	4b0a      	ldr	r3, [pc, #40]	@ (811b134 <ethernet_output+0x84>)
 811b10a:	f44f 7299 	mov.w	r2, #306	@ 0x132
 811b10e:	490a      	ldr	r1, [pc, #40]	@ (811b138 <ethernet_output+0x88>)
 811b110:	480a      	ldr	r0, [pc, #40]	@ (811b13c <ethernet_output+0x8c>)
 811b112:	f00b fcaf 	bl	8126a74 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 811b116:	68fb      	ldr	r3, [r7, #12]
 811b118:	699b      	ldr	r3, [r3, #24]
 811b11a:	68b9      	ldr	r1, [r7, #8]
 811b11c:	68f8      	ldr	r0, [r7, #12]
 811b11e:	4798      	blx	r3
 811b120:	4603      	mov	r3, r0
 811b122:	e002      	b.n	811b12a <ethernet_output+0x7a>
      goto pbuf_header_failed;
 811b124:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 811b126:	f06f 0301 	mvn.w	r3, #1
}
 811b12a:	4618      	mov	r0, r3
 811b12c:	3718      	adds	r7, #24
 811b12e:	46bd      	mov	sp, r7
 811b130:	bd80      	pop	{r7, pc}
 811b132:	bf00      	nop
 811b134:	081280ec 	.word	0x081280ec
 811b138:	08128164 	.word	0x08128164
 811b13c:	08128198 	.word	0x08128198

0811b140 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 811b140:	b580      	push	{r7, lr}
 811b142:	b08e      	sub	sp, #56	@ 0x38
 811b144:	af04      	add	r7, sp, #16
 811b146:	6078      	str	r0, [r7, #4]
 811b148:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 811b14a:	4b87      	ldr	r3, [pc, #540]	@ (811b368 <icmp_input+0x228>)
 811b14c:	689b      	ldr	r3, [r3, #8]
 811b14e:	627b      	str	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 811b150:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811b152:	781b      	ldrb	r3, [r3, #0]
 811b154:	f003 030f 	and.w	r3, r3, #15
 811b158:	b2db      	uxtb	r3, r3
 811b15a:	009b      	lsls	r3, r3, #2
 811b15c:	b2db      	uxtb	r3, r3
 811b15e:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (hlen < IP_HLEN) {
 811b160:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 811b162:	2b13      	cmp	r3, #19
 811b164:	f240 80e8 	bls.w	811b338 <icmp_input+0x1f8>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 811b168:	687b      	ldr	r3, [r7, #4]
 811b16a:	895b      	ldrh	r3, [r3, #10]
 811b16c:	2b03      	cmp	r3, #3
 811b16e:	f240 80e5 	bls.w	811b33c <icmp_input+0x1fc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 811b172:	687b      	ldr	r3, [r7, #4]
 811b174:	685b      	ldr	r3, [r3, #4]
 811b176:	781b      	ldrb	r3, [r3, #0]
 811b178:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 811b17c:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 811b180:	2b00      	cmp	r3, #0
 811b182:	f000 80d2 	beq.w	811b32a <icmp_input+0x1ea>
 811b186:	2b08      	cmp	r3, #8
 811b188:	f040 80d2 	bne.w	811b330 <icmp_input+0x1f0>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 811b18c:	4b77      	ldr	r3, [pc, #476]	@ (811b36c <icmp_input+0x22c>)
 811b18e:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 811b190:	4b75      	ldr	r3, [pc, #468]	@ (811b368 <icmp_input+0x228>)
 811b192:	695b      	ldr	r3, [r3, #20]
 811b194:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 811b198:	2be0      	cmp	r3, #224	@ 0xe0
 811b19a:	f000 80d6 	beq.w	811b34a <icmp_input+0x20a>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 811b19e:	4b72      	ldr	r3, [pc, #456]	@ (811b368 <icmp_input+0x228>)
 811b1a0:	695b      	ldr	r3, [r3, #20]
 811b1a2:	4a71      	ldr	r2, [pc, #452]	@ (811b368 <icmp_input+0x228>)
 811b1a4:	6812      	ldr	r2, [r2, #0]
 811b1a6:	4611      	mov	r1, r2
 811b1a8:	4618      	mov	r0, r3
 811b1aa:	f000 fce7 	bl	811bb7c <ip4_addr_isbroadcast_u32>
 811b1ae:	4603      	mov	r3, r0
 811b1b0:	2b00      	cmp	r3, #0
 811b1b2:	f040 80cc 	bne.w	811b34e <icmp_input+0x20e>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 811b1b6:	687b      	ldr	r3, [r7, #4]
 811b1b8:	891b      	ldrh	r3, [r3, #8]
 811b1ba:	2b07      	cmp	r3, #7
 811b1bc:	f240 80c0 	bls.w	811b340 <icmp_input+0x200>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
        goto lenerr;
      }
#if CHECKSUM_CHECK_ICMP
      IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_ICMP) {
        if (inet_chksum_pbuf(p) != 0) {
 811b1c0:	6878      	ldr	r0, [r7, #4]
 811b1c2:	f000 f9e0 	bl	811b586 <inet_chksum_pbuf>
 811b1c6:	4603      	mov	r3, r0
 811b1c8:	2b00      	cmp	r3, #0
 811b1ca:	d003      	beq.n	811b1d4 <icmp_input+0x94>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: checksum failed for received ICMP echo\n"));
          pbuf_free(p);
 811b1cc:	6878      	ldr	r0, [r7, #4]
 811b1ce:	f003 f8a5 	bl	811e31c <pbuf_free>
          ICMP_STATS_INC(icmp.chkerr);
          MIB2_STATS_INC(mib2.icmpinerrors);
          return;
 811b1d2:	e0c5      	b.n	811b360 <icmp_input+0x220>
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 811b1d4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 811b1d6:	330e      	adds	r3, #14
 811b1d8:	4619      	mov	r1, r3
 811b1da:	6878      	ldr	r0, [r7, #4]
 811b1dc:	f003 f808 	bl	811e1f0 <pbuf_add_header>
 811b1e0:	4603      	mov	r3, r0
 811b1e2:	2b00      	cmp	r3, #0
 811b1e4:	d04b      	beq.n	811b27e <icmp_input+0x13e>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 811b1e6:	687b      	ldr	r3, [r7, #4]
 811b1e8:	891a      	ldrh	r2, [r3, #8]
 811b1ea:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 811b1ec:	4413      	add	r3, r2
 811b1ee:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 811b1f0:	687b      	ldr	r3, [r7, #4]
 811b1f2:	891b      	ldrh	r3, [r3, #8]
 811b1f4:	8b7a      	ldrh	r2, [r7, #26]
 811b1f6:	429a      	cmp	r2, r3
 811b1f8:	f0c0 80ab 	bcc.w	811b352 <icmp_input+0x212>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 811b1fc:	8b7b      	ldrh	r3, [r7, #26]
 811b1fe:	f44f 7220 	mov.w	r2, #640	@ 0x280
 811b202:	4619      	mov	r1, r3
 811b204:	200e      	movs	r0, #14
 811b206:	f002 fda7 	bl	811dd58 <pbuf_alloc>
 811b20a:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 811b20c:	697b      	ldr	r3, [r7, #20]
 811b20e:	2b00      	cmp	r3, #0
 811b210:	f000 80a1 	beq.w	811b356 <icmp_input+0x216>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 811b214:	697b      	ldr	r3, [r7, #20]
 811b216:	895b      	ldrh	r3, [r3, #10]
 811b218:	461a      	mov	r2, r3
 811b21a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 811b21c:	3308      	adds	r3, #8
 811b21e:	429a      	cmp	r2, r3
 811b220:	d203      	bcs.n	811b22a <icmp_input+0xea>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 811b222:	6978      	ldr	r0, [r7, #20]
 811b224:	f003 f87a 	bl	811e31c <pbuf_free>
          goto icmperr;
 811b228:	e096      	b.n	811b358 <icmp_input+0x218>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 811b22a:	697b      	ldr	r3, [r7, #20]
 811b22c:	685b      	ldr	r3, [r3, #4]
 811b22e:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 811b230:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 811b232:	4618      	mov	r0, r3
 811b234:	f00b fe81 	bl	8126f3a <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 811b238:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 811b23a:	4619      	mov	r1, r3
 811b23c:	6978      	ldr	r0, [r7, #20]
 811b23e:	f002 ffe7 	bl	811e210 <pbuf_remove_header>
 811b242:	4603      	mov	r3, r0
 811b244:	2b00      	cmp	r3, #0
 811b246:	d009      	beq.n	811b25c <icmp_input+0x11c>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 811b248:	4b49      	ldr	r3, [pc, #292]	@ (811b370 <icmp_input+0x230>)
 811b24a:	22b6      	movs	r2, #182	@ 0xb6
 811b24c:	4949      	ldr	r1, [pc, #292]	@ (811b374 <icmp_input+0x234>)
 811b24e:	484a      	ldr	r0, [pc, #296]	@ (811b378 <icmp_input+0x238>)
 811b250:	f00b fc10 	bl	8126a74 <iprintf>
          pbuf_free(r);
 811b254:	6978      	ldr	r0, [r7, #20]
 811b256:	f003 f861 	bl	811e31c <pbuf_free>
          goto icmperr;
 811b25a:	e07d      	b.n	811b358 <icmp_input+0x218>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 811b25c:	6879      	ldr	r1, [r7, #4]
 811b25e:	6978      	ldr	r0, [r7, #20]
 811b260:	f003 f990 	bl	811e584 <pbuf_copy>
 811b264:	4603      	mov	r3, r0
 811b266:	2b00      	cmp	r3, #0
 811b268:	d003      	beq.n	811b272 <icmp_input+0x132>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 811b26a:	6978      	ldr	r0, [r7, #20]
 811b26c:	f003 f856 	bl	811e31c <pbuf_free>
          goto icmperr;
 811b270:	e072      	b.n	811b358 <icmp_input+0x218>
        }
        /* free the original p */
        pbuf_free(p);
 811b272:	6878      	ldr	r0, [r7, #4]
 811b274:	f003 f852 	bl	811e31c <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 811b278:	697b      	ldr	r3, [r7, #20]
 811b27a:	607b      	str	r3, [r7, #4]
 811b27c:	e00f      	b.n	811b29e <icmp_input+0x15e>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 811b27e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 811b280:	330e      	adds	r3, #14
 811b282:	4619      	mov	r1, r3
 811b284:	6878      	ldr	r0, [r7, #4]
 811b286:	f002 ffc3 	bl	811e210 <pbuf_remove_header>
 811b28a:	4603      	mov	r3, r0
 811b28c:	2b00      	cmp	r3, #0
 811b28e:	d006      	beq.n	811b29e <icmp_input+0x15e>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 811b290:	4b37      	ldr	r3, [pc, #220]	@ (811b370 <icmp_input+0x230>)
 811b292:	22c7      	movs	r2, #199	@ 0xc7
 811b294:	4939      	ldr	r1, [pc, #228]	@ (811b37c <icmp_input+0x23c>)
 811b296:	4838      	ldr	r0, [pc, #224]	@ (811b378 <icmp_input+0x238>)
 811b298:	f00b fbec 	bl	8126a74 <iprintf>
          goto icmperr;
 811b29c:	e05c      	b.n	811b358 <icmp_input+0x218>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 811b29e:	687b      	ldr	r3, [r7, #4]
 811b2a0:	685b      	ldr	r3, [r3, #4]
 811b2a2:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 811b2a4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 811b2a6:	4619      	mov	r1, r3
 811b2a8:	6878      	ldr	r0, [r7, #4]
 811b2aa:	f002 ffa1 	bl	811e1f0 <pbuf_add_header>
 811b2ae:	4603      	mov	r3, r0
 811b2b0:	2b00      	cmp	r3, #0
 811b2b2:	d13c      	bne.n	811b32e <icmp_input+0x1ee>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 811b2b4:	687b      	ldr	r3, [r7, #4]
 811b2b6:	685b      	ldr	r3, [r3, #4]
 811b2b8:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 811b2ba:	69fb      	ldr	r3, [r7, #28]
 811b2bc:	681a      	ldr	r2, [r3, #0]
 811b2be:	68fb      	ldr	r3, [r7, #12]
 811b2c0:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 811b2c2:	4b29      	ldr	r3, [pc, #164]	@ (811b368 <icmp_input+0x228>)
 811b2c4:	691a      	ldr	r2, [r3, #16]
 811b2c6:	68fb      	ldr	r3, [r7, #12]
 811b2c8:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 811b2ca:	693b      	ldr	r3, [r7, #16]
 811b2cc:	2200      	movs	r2, #0
 811b2ce:	701a      	strb	r2, [r3, #0]
#if CHECKSUM_GEN_ICMP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_ICMP) {
          /* adjust the checksum */
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 811b2d0:	693b      	ldr	r3, [r7, #16]
 811b2d2:	885b      	ldrh	r3, [r3, #2]
 811b2d4:	b29b      	uxth	r3, r3
 811b2d6:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
 811b2da:	4293      	cmp	r3, r2
 811b2dc:	d907      	bls.n	811b2ee <icmp_input+0x1ae>
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 811b2de:	693b      	ldr	r3, [r7, #16]
 811b2e0:	885b      	ldrh	r3, [r3, #2]
 811b2e2:	b29b      	uxth	r3, r3
 811b2e4:	3309      	adds	r3, #9
 811b2e6:	b29a      	uxth	r2, r3
 811b2e8:	693b      	ldr	r3, [r7, #16]
 811b2ea:	805a      	strh	r2, [r3, #2]
 811b2ec:	e006      	b.n	811b2fc <icmp_input+0x1bc>
          } else {
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 811b2ee:	693b      	ldr	r3, [r7, #16]
 811b2f0:	885b      	ldrh	r3, [r3, #2]
 811b2f2:	b29b      	uxth	r3, r3
 811b2f4:	3308      	adds	r3, #8
 811b2f6:	b29a      	uxth	r2, r3
 811b2f8:	693b      	ldr	r3, [r7, #16]
 811b2fa:	805a      	strh	r2, [r3, #2]
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 811b2fc:	68fb      	ldr	r3, [r7, #12]
 811b2fe:	22ff      	movs	r2, #255	@ 0xff
 811b300:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 811b302:	68fb      	ldr	r3, [r7, #12]
 811b304:	2200      	movs	r2, #0
 811b306:	729a      	strb	r2, [r3, #10]
 811b308:	2200      	movs	r2, #0
 811b30a:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 811b30c:	683b      	ldr	r3, [r7, #0]
 811b30e:	9302      	str	r3, [sp, #8]
 811b310:	2301      	movs	r3, #1
 811b312:	9301      	str	r3, [sp, #4]
 811b314:	2300      	movs	r3, #0
 811b316:	9300      	str	r3, [sp, #0]
 811b318:	23ff      	movs	r3, #255	@ 0xff
 811b31a:	2200      	movs	r2, #0
 811b31c:	69f9      	ldr	r1, [r7, #28]
 811b31e:	6878      	ldr	r0, [r7, #4]
 811b320:	f000 fb54 	bl	811b9cc <ip4_output_if>
 811b324:	4603      	mov	r3, r0
 811b326:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 811b328:	e001      	b.n	811b32e <icmp_input+0x1ee>
      break;
 811b32a:	bf00      	nop
 811b32c:	e000      	b.n	811b330 <icmp_input+0x1f0>
      break;
 811b32e:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 811b330:	6878      	ldr	r0, [r7, #4]
 811b332:	f002 fff3 	bl	811e31c <pbuf_free>
  return;
 811b336:	e013      	b.n	811b360 <icmp_input+0x220>
    goto lenerr;
 811b338:	bf00      	nop
 811b33a:	e002      	b.n	811b342 <icmp_input+0x202>
    goto lenerr;
 811b33c:	bf00      	nop
 811b33e:	e000      	b.n	811b342 <icmp_input+0x202>
        goto lenerr;
 811b340:	bf00      	nop
lenerr:
  pbuf_free(p);
 811b342:	6878      	ldr	r0, [r7, #4]
 811b344:	f002 ffea 	bl	811e31c <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 811b348:	e00a      	b.n	811b360 <icmp_input+0x220>
        goto icmperr;
 811b34a:	bf00      	nop
 811b34c:	e004      	b.n	811b358 <icmp_input+0x218>
        goto icmperr;
 811b34e:	bf00      	nop
 811b350:	e002      	b.n	811b358 <icmp_input+0x218>
          goto icmperr;
 811b352:	bf00      	nop
 811b354:	e000      	b.n	811b358 <icmp_input+0x218>
          goto icmperr;
 811b356:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 811b358:	6878      	ldr	r0, [r7, #4]
 811b35a:	f002 ffdf 	bl	811e31c <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 811b35e:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 811b360:	3728      	adds	r7, #40	@ 0x28
 811b362:	46bd      	mov	sp, r7
 811b364:	bd80      	pop	{r7, pc}
 811b366:	bf00      	nop
 811b368:	1000b374 	.word	0x1000b374
 811b36c:	1000b388 	.word	0x1000b388
 811b370:	081281c0 	.word	0x081281c0
 811b374:	08128238 	.word	0x08128238
 811b378:	08128270 	.word	0x08128270
 811b37c:	08128298 	.word	0x08128298

0811b380 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 811b380:	b580      	push	{r7, lr}
 811b382:	b082      	sub	sp, #8
 811b384:	af00      	add	r7, sp, #0
 811b386:	6078      	str	r0, [r7, #4]
 811b388:	460b      	mov	r3, r1
 811b38a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 811b38c:	78fb      	ldrb	r3, [r7, #3]
 811b38e:	461a      	mov	r2, r3
 811b390:	2103      	movs	r1, #3
 811b392:	6878      	ldr	r0, [r7, #4]
 811b394:	f000 f814 	bl	811b3c0 <icmp_send_response>
}
 811b398:	bf00      	nop
 811b39a:	3708      	adds	r7, #8
 811b39c:	46bd      	mov	sp, r7
 811b39e:	bd80      	pop	{r7, pc}

0811b3a0 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 811b3a0:	b580      	push	{r7, lr}
 811b3a2:	b082      	sub	sp, #8
 811b3a4:	af00      	add	r7, sp, #0
 811b3a6:	6078      	str	r0, [r7, #4]
 811b3a8:	460b      	mov	r3, r1
 811b3aa:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 811b3ac:	78fb      	ldrb	r3, [r7, #3]
 811b3ae:	461a      	mov	r2, r3
 811b3b0:	210b      	movs	r1, #11
 811b3b2:	6878      	ldr	r0, [r7, #4]
 811b3b4:	f000 f804 	bl	811b3c0 <icmp_send_response>
}
 811b3b8:	bf00      	nop
 811b3ba:	3708      	adds	r7, #8
 811b3bc:	46bd      	mov	sp, r7
 811b3be:	bd80      	pop	{r7, pc}

0811b3c0 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 811b3c0:	b580      	push	{r7, lr}
 811b3c2:	b08c      	sub	sp, #48	@ 0x30
 811b3c4:	af04      	add	r7, sp, #16
 811b3c6:	6078      	str	r0, [r7, #4]
 811b3c8:	460b      	mov	r3, r1
 811b3ca:	70fb      	strb	r3, [r7, #3]
 811b3cc:	4613      	mov	r3, r2
 811b3ce:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 811b3d0:	f44f 7220 	mov.w	r2, #640	@ 0x280
 811b3d4:	2124      	movs	r1, #36	@ 0x24
 811b3d6:	2022      	movs	r0, #34	@ 0x22
 811b3d8:	f002 fcbe 	bl	811dd58 <pbuf_alloc>
 811b3dc:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 811b3de:	69fb      	ldr	r3, [r7, #28]
 811b3e0:	2b00      	cmp	r3, #0
 811b3e2:	d056      	beq.n	811b492 <icmp_send_response+0xd2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 811b3e4:	69fb      	ldr	r3, [r7, #28]
 811b3e6:	895b      	ldrh	r3, [r3, #10]
 811b3e8:	2b23      	cmp	r3, #35	@ 0x23
 811b3ea:	d806      	bhi.n	811b3fa <icmp_send_response+0x3a>
 811b3ec:	4b2b      	ldr	r3, [pc, #172]	@ (811b49c <icmp_send_response+0xdc>)
 811b3ee:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 811b3f2:	492b      	ldr	r1, [pc, #172]	@ (811b4a0 <icmp_send_response+0xe0>)
 811b3f4:	482b      	ldr	r0, [pc, #172]	@ (811b4a4 <icmp_send_response+0xe4>)
 811b3f6:	f00b fb3d 	bl	8126a74 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 811b3fa:	687b      	ldr	r3, [r7, #4]
 811b3fc:	685b      	ldr	r3, [r3, #4]
 811b3fe:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 811b400:	69fb      	ldr	r3, [r7, #28]
 811b402:	685b      	ldr	r3, [r3, #4]
 811b404:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 811b406:	697b      	ldr	r3, [r7, #20]
 811b408:	78fa      	ldrb	r2, [r7, #3]
 811b40a:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 811b40c:	697b      	ldr	r3, [r7, #20]
 811b40e:	78ba      	ldrb	r2, [r7, #2]
 811b410:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 811b412:	697b      	ldr	r3, [r7, #20]
 811b414:	2200      	movs	r2, #0
 811b416:	711a      	strb	r2, [r3, #4]
 811b418:	2200      	movs	r2, #0
 811b41a:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 811b41c:	697b      	ldr	r3, [r7, #20]
 811b41e:	2200      	movs	r2, #0
 811b420:	719a      	strb	r2, [r3, #6]
 811b422:	2200      	movs	r2, #0
 811b424:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 811b426:	69fb      	ldr	r3, [r7, #28]
 811b428:	685b      	ldr	r3, [r3, #4]
 811b42a:	f103 0008 	add.w	r0, r3, #8
 811b42e:	687b      	ldr	r3, [r7, #4]
 811b430:	685b      	ldr	r3, [r3, #4]
 811b432:	221c      	movs	r2, #28
 811b434:	4619      	mov	r1, r3
 811b436:	f00b fd80 	bl	8126f3a <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 811b43a:	69bb      	ldr	r3, [r7, #24]
 811b43c:	68db      	ldr	r3, [r3, #12]
 811b43e:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 811b440:	f107 030c 	add.w	r3, r7, #12
 811b444:	4618      	mov	r0, r3
 811b446:	f000 f903 	bl	811b650 <ip4_route>
 811b44a:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 811b44c:	693b      	ldr	r3, [r7, #16]
 811b44e:	2b00      	cmp	r3, #0
 811b450:	d01b      	beq.n	811b48a <icmp_send_response+0xca>
    /* calculate checksum */
    icmphdr->chksum = 0;
 811b452:	697b      	ldr	r3, [r7, #20]
 811b454:	2200      	movs	r2, #0
 811b456:	709a      	strb	r2, [r3, #2]
 811b458:	2200      	movs	r2, #0
 811b45a:	70da      	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 811b45c:	69fb      	ldr	r3, [r7, #28]
 811b45e:	895b      	ldrh	r3, [r3, #10]
 811b460:	4619      	mov	r1, r3
 811b462:	6978      	ldr	r0, [r7, #20]
 811b464:	f000 f87d 	bl	811b562 <inet_chksum>
 811b468:	4603      	mov	r3, r0
 811b46a:	461a      	mov	r2, r3
 811b46c:	697b      	ldr	r3, [r7, #20]
 811b46e:	805a      	strh	r2, [r3, #2]
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 811b470:	f107 020c 	add.w	r2, r7, #12
 811b474:	693b      	ldr	r3, [r7, #16]
 811b476:	9302      	str	r3, [sp, #8]
 811b478:	2301      	movs	r3, #1
 811b47a:	9301      	str	r3, [sp, #4]
 811b47c:	2300      	movs	r3, #0
 811b47e:	9300      	str	r3, [sp, #0]
 811b480:	23ff      	movs	r3, #255	@ 0xff
 811b482:	2100      	movs	r1, #0
 811b484:	69f8      	ldr	r0, [r7, #28]
 811b486:	f000 faa1 	bl	811b9cc <ip4_output_if>
  }
  pbuf_free(q);
 811b48a:	69f8      	ldr	r0, [r7, #28]
 811b48c:	f002 ff46 	bl	811e31c <pbuf_free>
 811b490:	e000      	b.n	811b494 <icmp_send_response+0xd4>
    return;
 811b492:	bf00      	nop
}
 811b494:	3720      	adds	r7, #32
 811b496:	46bd      	mov	sp, r7
 811b498:	bd80      	pop	{r7, pc}
 811b49a:	bf00      	nop
 811b49c:	081281c0 	.word	0x081281c0
 811b4a0:	081282cc 	.word	0x081282cc
 811b4a4:	08128270 	.word	0x08128270

0811b4a8 <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 811b4a8:	b480      	push	{r7}
 811b4aa:	b089      	sub	sp, #36	@ 0x24
 811b4ac:	af00      	add	r7, sp, #0
 811b4ae:	6078      	str	r0, [r7, #4]
 811b4b0:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
 811b4b2:	687b      	ldr	r3, [r7, #4]
 811b4b4:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
 811b4b6:	2300      	movs	r3, #0
 811b4b8:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
 811b4ba:	2300      	movs	r3, #0
 811b4bc:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 811b4be:	69fb      	ldr	r3, [r7, #28]
 811b4c0:	f003 0301 	and.w	r3, r3, #1
 811b4c4:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 811b4c6:	693b      	ldr	r3, [r7, #16]
 811b4c8:	2b00      	cmp	r3, #0
 811b4ca:	d00d      	beq.n	811b4e8 <lwip_standard_chksum+0x40>
 811b4cc:	683b      	ldr	r3, [r7, #0]
 811b4ce:	2b00      	cmp	r3, #0
 811b4d0:	dd0a      	ble.n	811b4e8 <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 811b4d2:	69fa      	ldr	r2, [r7, #28]
 811b4d4:	1c53      	adds	r3, r2, #1
 811b4d6:	61fb      	str	r3, [r7, #28]
 811b4d8:	f107 030e 	add.w	r3, r7, #14
 811b4dc:	3301      	adds	r3, #1
 811b4de:	7812      	ldrb	r2, [r2, #0]
 811b4e0:	701a      	strb	r2, [r3, #0]
    len--;
 811b4e2:	683b      	ldr	r3, [r7, #0]
 811b4e4:	3b01      	subs	r3, #1
 811b4e6:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
 811b4e8:	69fb      	ldr	r3, [r7, #28]
 811b4ea:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 811b4ec:	e00a      	b.n	811b504 <lwip_standard_chksum+0x5c>
    sum += *ps++;
 811b4ee:	69bb      	ldr	r3, [r7, #24]
 811b4f0:	1c9a      	adds	r2, r3, #2
 811b4f2:	61ba      	str	r2, [r7, #24]
 811b4f4:	881b      	ldrh	r3, [r3, #0]
 811b4f6:	461a      	mov	r2, r3
 811b4f8:	697b      	ldr	r3, [r7, #20]
 811b4fa:	4413      	add	r3, r2
 811b4fc:	617b      	str	r3, [r7, #20]
    len -= 2;
 811b4fe:	683b      	ldr	r3, [r7, #0]
 811b500:	3b02      	subs	r3, #2
 811b502:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 811b504:	683b      	ldr	r3, [r7, #0]
 811b506:	2b01      	cmp	r3, #1
 811b508:	dcf1      	bgt.n	811b4ee <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 811b50a:	683b      	ldr	r3, [r7, #0]
 811b50c:	2b00      	cmp	r3, #0
 811b50e:	dd04      	ble.n	811b51a <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 811b510:	f107 030e 	add.w	r3, r7, #14
 811b514:	69ba      	ldr	r2, [r7, #24]
 811b516:	7812      	ldrb	r2, [r2, #0]
 811b518:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 811b51a:	89fb      	ldrh	r3, [r7, #14]
 811b51c:	461a      	mov	r2, r3
 811b51e:	697b      	ldr	r3, [r7, #20]
 811b520:	4413      	add	r3, r2
 811b522:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 811b524:	697b      	ldr	r3, [r7, #20]
 811b526:	0c1a      	lsrs	r2, r3, #16
 811b528:	697b      	ldr	r3, [r7, #20]
 811b52a:	b29b      	uxth	r3, r3
 811b52c:	4413      	add	r3, r2
 811b52e:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 811b530:	697b      	ldr	r3, [r7, #20]
 811b532:	0c1a      	lsrs	r2, r3, #16
 811b534:	697b      	ldr	r3, [r7, #20]
 811b536:	b29b      	uxth	r3, r3
 811b538:	4413      	add	r3, r2
 811b53a:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 811b53c:	693b      	ldr	r3, [r7, #16]
 811b53e:	2b00      	cmp	r3, #0
 811b540:	d007      	beq.n	811b552 <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
 811b542:	697b      	ldr	r3, [r7, #20]
 811b544:	021b      	lsls	r3, r3, #8
 811b546:	b29a      	uxth	r2, r3
 811b548:	697b      	ldr	r3, [r7, #20]
 811b54a:	0a1b      	lsrs	r3, r3, #8
 811b54c:	b2db      	uxtb	r3, r3
 811b54e:	4313      	orrs	r3, r2
 811b550:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 811b552:	697b      	ldr	r3, [r7, #20]
 811b554:	b29b      	uxth	r3, r3
}
 811b556:	4618      	mov	r0, r3
 811b558:	3724      	adds	r7, #36	@ 0x24
 811b55a:	46bd      	mov	sp, r7
 811b55c:	f85d 7b04 	ldr.w	r7, [sp], #4
 811b560:	4770      	bx	lr

0811b562 <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 811b562:	b580      	push	{r7, lr}
 811b564:	b082      	sub	sp, #8
 811b566:	af00      	add	r7, sp, #0
 811b568:	6078      	str	r0, [r7, #4]
 811b56a:	460b      	mov	r3, r1
 811b56c:	807b      	strh	r3, [r7, #2]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 811b56e:	887b      	ldrh	r3, [r7, #2]
 811b570:	4619      	mov	r1, r3
 811b572:	6878      	ldr	r0, [r7, #4]
 811b574:	f7ff ff98 	bl	811b4a8 <lwip_standard_chksum>
 811b578:	4603      	mov	r3, r0
 811b57a:	43db      	mvns	r3, r3
 811b57c:	b29b      	uxth	r3, r3
}
 811b57e:	4618      	mov	r0, r3
 811b580:	3708      	adds	r7, #8
 811b582:	46bd      	mov	sp, r7
 811b584:	bd80      	pop	{r7, pc}

0811b586 <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
 811b586:	b580      	push	{r7, lr}
 811b588:	b086      	sub	sp, #24
 811b58a:	af00      	add	r7, sp, #0
 811b58c:	6078      	str	r0, [r7, #4]
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;
 811b58e:	2300      	movs	r3, #0
 811b590:	60fb      	str	r3, [r7, #12]

  acc = 0;
 811b592:	2300      	movs	r3, #0
 811b594:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 811b596:	687b      	ldr	r3, [r7, #4]
 811b598:	613b      	str	r3, [r7, #16]
 811b59a:	e02b      	b.n	811b5f4 <inet_chksum_pbuf+0x6e>
    acc += LWIP_CHKSUM(q->payload, q->len);
 811b59c:	693b      	ldr	r3, [r7, #16]
 811b59e:	685a      	ldr	r2, [r3, #4]
 811b5a0:	693b      	ldr	r3, [r7, #16]
 811b5a2:	895b      	ldrh	r3, [r3, #10]
 811b5a4:	4619      	mov	r1, r3
 811b5a6:	4610      	mov	r0, r2
 811b5a8:	f7ff ff7e 	bl	811b4a8 <lwip_standard_chksum>
 811b5ac:	4603      	mov	r3, r0
 811b5ae:	461a      	mov	r2, r3
 811b5b0:	697b      	ldr	r3, [r7, #20]
 811b5b2:	4413      	add	r3, r2
 811b5b4:	617b      	str	r3, [r7, #20]
    acc = FOLD_U32T(acc);
 811b5b6:	697b      	ldr	r3, [r7, #20]
 811b5b8:	0c1a      	lsrs	r2, r3, #16
 811b5ba:	697b      	ldr	r3, [r7, #20]
 811b5bc:	b29b      	uxth	r3, r3
 811b5be:	4413      	add	r3, r2
 811b5c0:	617b      	str	r3, [r7, #20]
    if (q->len % 2 != 0) {
 811b5c2:	693b      	ldr	r3, [r7, #16]
 811b5c4:	895b      	ldrh	r3, [r3, #10]
 811b5c6:	f003 0301 	and.w	r3, r3, #1
 811b5ca:	b29b      	uxth	r3, r3
 811b5cc:	2b00      	cmp	r3, #0
 811b5ce:	d00e      	beq.n	811b5ee <inet_chksum_pbuf+0x68>
      swapped = !swapped;
 811b5d0:	68fb      	ldr	r3, [r7, #12]
 811b5d2:	2b00      	cmp	r3, #0
 811b5d4:	bf0c      	ite	eq
 811b5d6:	2301      	moveq	r3, #1
 811b5d8:	2300      	movne	r3, #0
 811b5da:	b2db      	uxtb	r3, r3
 811b5dc:	60fb      	str	r3, [r7, #12]
      acc = SWAP_BYTES_IN_WORD(acc);
 811b5de:	697b      	ldr	r3, [r7, #20]
 811b5e0:	021b      	lsls	r3, r3, #8
 811b5e2:	b29a      	uxth	r2, r3
 811b5e4:	697b      	ldr	r3, [r7, #20]
 811b5e6:	0a1b      	lsrs	r3, r3, #8
 811b5e8:	b2db      	uxtb	r3, r3
 811b5ea:	4313      	orrs	r3, r2
 811b5ec:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 811b5ee:	693b      	ldr	r3, [r7, #16]
 811b5f0:	681b      	ldr	r3, [r3, #0]
 811b5f2:	613b      	str	r3, [r7, #16]
 811b5f4:	693b      	ldr	r3, [r7, #16]
 811b5f6:	2b00      	cmp	r3, #0
 811b5f8:	d1d0      	bne.n	811b59c <inet_chksum_pbuf+0x16>
    }
  }

  if (swapped) {
 811b5fa:	68fb      	ldr	r3, [r7, #12]
 811b5fc:	2b00      	cmp	r3, #0
 811b5fe:	d007      	beq.n	811b610 <inet_chksum_pbuf+0x8a>
    acc = SWAP_BYTES_IN_WORD(acc);
 811b600:	697b      	ldr	r3, [r7, #20]
 811b602:	021b      	lsls	r3, r3, #8
 811b604:	b29a      	uxth	r2, r3
 811b606:	697b      	ldr	r3, [r7, #20]
 811b608:	0a1b      	lsrs	r3, r3, #8
 811b60a:	b2db      	uxtb	r3, r3
 811b60c:	4313      	orrs	r3, r2
 811b60e:	617b      	str	r3, [r7, #20]
  }
  return (u16_t)~(acc & 0xffffUL);
 811b610:	697b      	ldr	r3, [r7, #20]
 811b612:	b29b      	uxth	r3, r3
 811b614:	43db      	mvns	r3, r3
 811b616:	b29b      	uxth	r3, r3
}
 811b618:	4618      	mov	r0, r3
 811b61a:	3718      	adds	r7, #24
 811b61c:	46bd      	mov	sp, r7
 811b61e:	bd80      	pop	{r7, pc}

0811b620 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 811b620:	b580      	push	{r7, lr}
 811b622:	b082      	sub	sp, #8
 811b624:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 811b626:	2300      	movs	r3, #0
 811b628:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 811b62a:	f003 f997 	bl	811e95c <sys_init>
#endif /* !NO_SYS */
  mem_init();
 811b62e:	f001 fba3 	bl	811cd78 <mem_init>
  memp_init();
 811b632:	f001 feed 	bl	811d410 <memp_init>
  pbuf_init();
  netif_init();
 811b636:	f001 fff9 	bl	811d62c <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 811b63a:	f009 fcf9 	bl	8125030 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 811b63e:	f003 fa09 	bl	811ea54 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 811b642:	f009 fc3b 	bl	8124ebc <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 811b646:	bf00      	nop
 811b648:	3708      	adds	r7, #8
 811b64a:	46bd      	mov	sp, r7
 811b64c:	bd80      	pop	{r7, pc}
	...

0811b650 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 811b650:	b480      	push	{r7}
 811b652:	b085      	sub	sp, #20
 811b654:	af00      	add	r7, sp, #0
 811b656:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 811b658:	4b33      	ldr	r3, [pc, #204]	@ (811b728 <ip4_route+0xd8>)
 811b65a:	681b      	ldr	r3, [r3, #0]
 811b65c:	60fb      	str	r3, [r7, #12]
 811b65e:	e036      	b.n	811b6ce <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 811b660:	68fb      	ldr	r3, [r7, #12]
 811b662:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 811b666:	f003 0301 	and.w	r3, r3, #1
 811b66a:	b2db      	uxtb	r3, r3
 811b66c:	2b00      	cmp	r3, #0
 811b66e:	d02b      	beq.n	811b6c8 <ip4_route+0x78>
 811b670:	68fb      	ldr	r3, [r7, #12]
 811b672:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 811b676:	089b      	lsrs	r3, r3, #2
 811b678:	f003 0301 	and.w	r3, r3, #1
 811b67c:	b2db      	uxtb	r3, r3
 811b67e:	2b00      	cmp	r3, #0
 811b680:	d022      	beq.n	811b6c8 <ip4_route+0x78>
 811b682:	68fb      	ldr	r3, [r7, #12]
 811b684:	3304      	adds	r3, #4
 811b686:	681b      	ldr	r3, [r3, #0]
 811b688:	2b00      	cmp	r3, #0
 811b68a:	d01d      	beq.n	811b6c8 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 811b68c:	687b      	ldr	r3, [r7, #4]
 811b68e:	681a      	ldr	r2, [r3, #0]
 811b690:	68fb      	ldr	r3, [r7, #12]
 811b692:	3304      	adds	r3, #4
 811b694:	681b      	ldr	r3, [r3, #0]
 811b696:	405a      	eors	r2, r3
 811b698:	68fb      	ldr	r3, [r7, #12]
 811b69a:	3308      	adds	r3, #8
 811b69c:	681b      	ldr	r3, [r3, #0]
 811b69e:	4013      	ands	r3, r2
 811b6a0:	2b00      	cmp	r3, #0
 811b6a2:	d101      	bne.n	811b6a8 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 811b6a4:	68fb      	ldr	r3, [r7, #12]
 811b6a6:	e038      	b.n	811b71a <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 811b6a8:	68fb      	ldr	r3, [r7, #12]
 811b6aa:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 811b6ae:	f003 0302 	and.w	r3, r3, #2
 811b6b2:	2b00      	cmp	r3, #0
 811b6b4:	d108      	bne.n	811b6c8 <ip4_route+0x78>
 811b6b6:	687b      	ldr	r3, [r7, #4]
 811b6b8:	681a      	ldr	r2, [r3, #0]
 811b6ba:	68fb      	ldr	r3, [r7, #12]
 811b6bc:	330c      	adds	r3, #12
 811b6be:	681b      	ldr	r3, [r3, #0]
 811b6c0:	429a      	cmp	r2, r3
 811b6c2:	d101      	bne.n	811b6c8 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 811b6c4:	68fb      	ldr	r3, [r7, #12]
 811b6c6:	e028      	b.n	811b71a <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 811b6c8:	68fb      	ldr	r3, [r7, #12]
 811b6ca:	681b      	ldr	r3, [r3, #0]
 811b6cc:	60fb      	str	r3, [r7, #12]
 811b6ce:	68fb      	ldr	r3, [r7, #12]
 811b6d0:	2b00      	cmp	r3, #0
 811b6d2:	d1c5      	bne.n	811b660 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 811b6d4:	4b15      	ldr	r3, [pc, #84]	@ (811b72c <ip4_route+0xdc>)
 811b6d6:	681b      	ldr	r3, [r3, #0]
 811b6d8:	2b00      	cmp	r3, #0
 811b6da:	d01a      	beq.n	811b712 <ip4_route+0xc2>
 811b6dc:	4b13      	ldr	r3, [pc, #76]	@ (811b72c <ip4_route+0xdc>)
 811b6de:	681b      	ldr	r3, [r3, #0]
 811b6e0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 811b6e4:	f003 0301 	and.w	r3, r3, #1
 811b6e8:	2b00      	cmp	r3, #0
 811b6ea:	d012      	beq.n	811b712 <ip4_route+0xc2>
 811b6ec:	4b0f      	ldr	r3, [pc, #60]	@ (811b72c <ip4_route+0xdc>)
 811b6ee:	681b      	ldr	r3, [r3, #0]
 811b6f0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 811b6f4:	f003 0304 	and.w	r3, r3, #4
 811b6f8:	2b00      	cmp	r3, #0
 811b6fa:	d00a      	beq.n	811b712 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 811b6fc:	4b0b      	ldr	r3, [pc, #44]	@ (811b72c <ip4_route+0xdc>)
 811b6fe:	681b      	ldr	r3, [r3, #0]
 811b700:	3304      	adds	r3, #4
 811b702:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 811b704:	2b00      	cmp	r3, #0
 811b706:	d004      	beq.n	811b712 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 811b708:	687b      	ldr	r3, [r7, #4]
 811b70a:	681b      	ldr	r3, [r3, #0]
 811b70c:	b2db      	uxtb	r3, r3
 811b70e:	2b7f      	cmp	r3, #127	@ 0x7f
 811b710:	d101      	bne.n	811b716 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 811b712:	2300      	movs	r3, #0
 811b714:	e001      	b.n	811b71a <ip4_route+0xca>
  }

  return netif_default;
 811b716:	4b05      	ldr	r3, [pc, #20]	@ (811b72c <ip4_route+0xdc>)
 811b718:	681b      	ldr	r3, [r3, #0]
}
 811b71a:	4618      	mov	r0, r3
 811b71c:	3714      	adds	r7, #20
 811b71e:	46bd      	mov	sp, r7
 811b720:	f85d 7b04 	ldr.w	r7, [sp], #4
 811b724:	4770      	bx	lr
 811b726:	bf00      	nop
 811b728:	1000e4fc 	.word	0x1000e4fc
 811b72c:	1000e500 	.word	0x1000e500

0811b730 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 811b730:	b580      	push	{r7, lr}
 811b732:	b082      	sub	sp, #8
 811b734:	af00      	add	r7, sp, #0
 811b736:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 811b738:	687b      	ldr	r3, [r7, #4]
 811b73a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 811b73e:	f003 0301 	and.w	r3, r3, #1
 811b742:	b2db      	uxtb	r3, r3
 811b744:	2b00      	cmp	r3, #0
 811b746:	d016      	beq.n	811b776 <ip4_input_accept+0x46>
 811b748:	687b      	ldr	r3, [r7, #4]
 811b74a:	3304      	adds	r3, #4
 811b74c:	681b      	ldr	r3, [r3, #0]
 811b74e:	2b00      	cmp	r3, #0
 811b750:	d011      	beq.n	811b776 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 811b752:	4b0b      	ldr	r3, [pc, #44]	@ (811b780 <ip4_input_accept+0x50>)
 811b754:	695a      	ldr	r2, [r3, #20]
 811b756:	687b      	ldr	r3, [r7, #4]
 811b758:	3304      	adds	r3, #4
 811b75a:	681b      	ldr	r3, [r3, #0]
 811b75c:	429a      	cmp	r2, r3
 811b75e:	d008      	beq.n	811b772 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 811b760:	4b07      	ldr	r3, [pc, #28]	@ (811b780 <ip4_input_accept+0x50>)
 811b762:	695b      	ldr	r3, [r3, #20]
 811b764:	6879      	ldr	r1, [r7, #4]
 811b766:	4618      	mov	r0, r3
 811b768:	f000 fa08 	bl	811bb7c <ip4_addr_isbroadcast_u32>
 811b76c:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 811b76e:	2b00      	cmp	r3, #0
 811b770:	d001      	beq.n	811b776 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 811b772:	2301      	movs	r3, #1
 811b774:	e000      	b.n	811b778 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 811b776:	2300      	movs	r3, #0
}
 811b778:	4618      	mov	r0, r3
 811b77a:	3708      	adds	r7, #8
 811b77c:	46bd      	mov	sp, r7
 811b77e:	bd80      	pop	{r7, pc}
 811b780:	1000b374 	.word	0x1000b374

0811b784 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 811b784:	b580      	push	{r7, lr}
 811b786:	b086      	sub	sp, #24
 811b788:	af00      	add	r7, sp, #0
 811b78a:	6078      	str	r0, [r7, #4]
 811b78c:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 811b78e:	687b      	ldr	r3, [r7, #4]
 811b790:	685b      	ldr	r3, [r3, #4]
 811b792:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 811b794:	697b      	ldr	r3, [r7, #20]
 811b796:	781b      	ldrb	r3, [r3, #0]
 811b798:	091b      	lsrs	r3, r3, #4
 811b79a:	b2db      	uxtb	r3, r3
 811b79c:	2b04      	cmp	r3, #4
 811b79e:	d004      	beq.n	811b7aa <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 811b7a0:	6878      	ldr	r0, [r7, #4]
 811b7a2:	f002 fdbb 	bl	811e31c <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 811b7a6:	2300      	movs	r3, #0
 811b7a8:	e107      	b.n	811b9ba <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 811b7aa:	697b      	ldr	r3, [r7, #20]
 811b7ac:	781b      	ldrb	r3, [r3, #0]
 811b7ae:	f003 030f 	and.w	r3, r3, #15
 811b7b2:	b2db      	uxtb	r3, r3
 811b7b4:	009b      	lsls	r3, r3, #2
 811b7b6:	b2db      	uxtb	r3, r3
 811b7b8:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 811b7ba:	697b      	ldr	r3, [r7, #20]
 811b7bc:	885b      	ldrh	r3, [r3, #2]
 811b7be:	b29b      	uxth	r3, r3
 811b7c0:	4618      	mov	r0, r3
 811b7c2:	f7fe fba3 	bl	8119f0c <lwip_htons>
 811b7c6:	4603      	mov	r3, r0
 811b7c8:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 811b7ca:	687b      	ldr	r3, [r7, #4]
 811b7cc:	891b      	ldrh	r3, [r3, #8]
 811b7ce:	89ba      	ldrh	r2, [r7, #12]
 811b7d0:	429a      	cmp	r2, r3
 811b7d2:	d204      	bcs.n	811b7de <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 811b7d4:	89bb      	ldrh	r3, [r7, #12]
 811b7d6:	4619      	mov	r1, r3
 811b7d8:	6878      	ldr	r0, [r7, #4]
 811b7da:	f002 fc1b 	bl	811e014 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 811b7de:	687b      	ldr	r3, [r7, #4]
 811b7e0:	895b      	ldrh	r3, [r3, #10]
 811b7e2:	89fa      	ldrh	r2, [r7, #14]
 811b7e4:	429a      	cmp	r2, r3
 811b7e6:	d807      	bhi.n	811b7f8 <ip4_input+0x74>
 811b7e8:	687b      	ldr	r3, [r7, #4]
 811b7ea:	891b      	ldrh	r3, [r3, #8]
 811b7ec:	89ba      	ldrh	r2, [r7, #12]
 811b7ee:	429a      	cmp	r2, r3
 811b7f0:	d802      	bhi.n	811b7f8 <ip4_input+0x74>
 811b7f2:	89fb      	ldrh	r3, [r7, #14]
 811b7f4:	2b13      	cmp	r3, #19
 811b7f6:	d804      	bhi.n	811b802 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 811b7f8:	6878      	ldr	r0, [r7, #4]
 811b7fa:	f002 fd8f 	bl	811e31c <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 811b7fe:	2300      	movs	r3, #0
 811b800:	e0db      	b.n	811b9ba <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 811b802:	697b      	ldr	r3, [r7, #20]
 811b804:	691b      	ldr	r3, [r3, #16]
 811b806:	4a6f      	ldr	r2, [pc, #444]	@ (811b9c4 <ip4_input+0x240>)
 811b808:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 811b80a:	697b      	ldr	r3, [r7, #20]
 811b80c:	68db      	ldr	r3, [r3, #12]
 811b80e:	4a6d      	ldr	r2, [pc, #436]	@ (811b9c4 <ip4_input+0x240>)
 811b810:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 811b812:	4b6c      	ldr	r3, [pc, #432]	@ (811b9c4 <ip4_input+0x240>)
 811b814:	695b      	ldr	r3, [r3, #20]
 811b816:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 811b81a:	2be0      	cmp	r3, #224	@ 0xe0
 811b81c:	d112      	bne.n	811b844 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 811b81e:	683b      	ldr	r3, [r7, #0]
 811b820:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 811b824:	f003 0301 	and.w	r3, r3, #1
 811b828:	b2db      	uxtb	r3, r3
 811b82a:	2b00      	cmp	r3, #0
 811b82c:	d007      	beq.n	811b83e <ip4_input+0xba>
 811b82e:	683b      	ldr	r3, [r7, #0]
 811b830:	3304      	adds	r3, #4
 811b832:	681b      	ldr	r3, [r3, #0]
 811b834:	2b00      	cmp	r3, #0
 811b836:	d002      	beq.n	811b83e <ip4_input+0xba>
      netif = inp;
 811b838:	683b      	ldr	r3, [r7, #0]
 811b83a:	613b      	str	r3, [r7, #16]
 811b83c:	e02a      	b.n	811b894 <ip4_input+0x110>
    } else {
      netif = NULL;
 811b83e:	2300      	movs	r3, #0
 811b840:	613b      	str	r3, [r7, #16]
 811b842:	e027      	b.n	811b894 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 811b844:	6838      	ldr	r0, [r7, #0]
 811b846:	f7ff ff73 	bl	811b730 <ip4_input_accept>
 811b84a:	4603      	mov	r3, r0
 811b84c:	2b00      	cmp	r3, #0
 811b84e:	d002      	beq.n	811b856 <ip4_input+0xd2>
      netif = inp;
 811b850:	683b      	ldr	r3, [r7, #0]
 811b852:	613b      	str	r3, [r7, #16]
 811b854:	e01e      	b.n	811b894 <ip4_input+0x110>
    } else {
      netif = NULL;
 811b856:	2300      	movs	r3, #0
 811b858:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 811b85a:	4b5a      	ldr	r3, [pc, #360]	@ (811b9c4 <ip4_input+0x240>)
 811b85c:	695b      	ldr	r3, [r3, #20]
 811b85e:	b2db      	uxtb	r3, r3
 811b860:	2b7f      	cmp	r3, #127	@ 0x7f
 811b862:	d017      	beq.n	811b894 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 811b864:	4b58      	ldr	r3, [pc, #352]	@ (811b9c8 <ip4_input+0x244>)
 811b866:	681b      	ldr	r3, [r3, #0]
 811b868:	613b      	str	r3, [r7, #16]
 811b86a:	e00e      	b.n	811b88a <ip4_input+0x106>
          if (netif == inp) {
 811b86c:	693a      	ldr	r2, [r7, #16]
 811b86e:	683b      	ldr	r3, [r7, #0]
 811b870:	429a      	cmp	r2, r3
 811b872:	d006      	beq.n	811b882 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 811b874:	6938      	ldr	r0, [r7, #16]
 811b876:	f7ff ff5b 	bl	811b730 <ip4_input_accept>
 811b87a:	4603      	mov	r3, r0
 811b87c:	2b00      	cmp	r3, #0
 811b87e:	d108      	bne.n	811b892 <ip4_input+0x10e>
 811b880:	e000      	b.n	811b884 <ip4_input+0x100>
            continue;
 811b882:	bf00      	nop
        NETIF_FOREACH(netif) {
 811b884:	693b      	ldr	r3, [r7, #16]
 811b886:	681b      	ldr	r3, [r3, #0]
 811b888:	613b      	str	r3, [r7, #16]
 811b88a:	693b      	ldr	r3, [r7, #16]
 811b88c:	2b00      	cmp	r3, #0
 811b88e:	d1ed      	bne.n	811b86c <ip4_input+0xe8>
 811b890:	e000      	b.n	811b894 <ip4_input+0x110>
            break;
 811b892:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 811b894:	4b4b      	ldr	r3, [pc, #300]	@ (811b9c4 <ip4_input+0x240>)
 811b896:	691b      	ldr	r3, [r3, #16]
 811b898:	6839      	ldr	r1, [r7, #0]
 811b89a:	4618      	mov	r0, r3
 811b89c:	f000 f96e 	bl	811bb7c <ip4_addr_isbroadcast_u32>
 811b8a0:	4603      	mov	r3, r0
 811b8a2:	2b00      	cmp	r3, #0
 811b8a4:	d105      	bne.n	811b8b2 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 811b8a6:	4b47      	ldr	r3, [pc, #284]	@ (811b9c4 <ip4_input+0x240>)
 811b8a8:	691b      	ldr	r3, [r3, #16]
 811b8aa:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 811b8ae:	2be0      	cmp	r3, #224	@ 0xe0
 811b8b0:	d104      	bne.n	811b8bc <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 811b8b2:	6878      	ldr	r0, [r7, #4]
 811b8b4:	f002 fd32 	bl	811e31c <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 811b8b8:	2300      	movs	r3, #0
 811b8ba:	e07e      	b.n	811b9ba <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 811b8bc:	693b      	ldr	r3, [r7, #16]
 811b8be:	2b00      	cmp	r3, #0
 811b8c0:	d104      	bne.n	811b8cc <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 811b8c2:	6878      	ldr	r0, [r7, #4]
 811b8c4:	f002 fd2a 	bl	811e31c <pbuf_free>
    return ERR_OK;
 811b8c8:	2300      	movs	r3, #0
 811b8ca:	e076      	b.n	811b9ba <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 811b8cc:	697b      	ldr	r3, [r7, #20]
 811b8ce:	88db      	ldrh	r3, [r3, #6]
 811b8d0:	b29b      	uxth	r3, r3
 811b8d2:	461a      	mov	r2, r3
 811b8d4:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 811b8d8:	4013      	ands	r3, r2
 811b8da:	2b00      	cmp	r3, #0
 811b8dc:	d00b      	beq.n	811b8f6 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 811b8de:	6878      	ldr	r0, [r7, #4]
 811b8e0:	f000 fe4c 	bl	811c57c <ip4_reass>
 811b8e4:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 811b8e6:	687b      	ldr	r3, [r7, #4]
 811b8e8:	2b00      	cmp	r3, #0
 811b8ea:	d101      	bne.n	811b8f0 <ip4_input+0x16c>
      return ERR_OK;
 811b8ec:	2300      	movs	r3, #0
 811b8ee:	e064      	b.n	811b9ba <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 811b8f0:	687b      	ldr	r3, [r7, #4]
 811b8f2:	685b      	ldr	r3, [r3, #4]
 811b8f4:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 811b8f6:	4a33      	ldr	r2, [pc, #204]	@ (811b9c4 <ip4_input+0x240>)
 811b8f8:	693b      	ldr	r3, [r7, #16]
 811b8fa:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 811b8fc:	4a31      	ldr	r2, [pc, #196]	@ (811b9c4 <ip4_input+0x240>)
 811b8fe:	683b      	ldr	r3, [r7, #0]
 811b900:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 811b902:	4a30      	ldr	r2, [pc, #192]	@ (811b9c4 <ip4_input+0x240>)
 811b904:	697b      	ldr	r3, [r7, #20]
 811b906:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 811b908:	697b      	ldr	r3, [r7, #20]
 811b90a:	781b      	ldrb	r3, [r3, #0]
 811b90c:	f003 030f 	and.w	r3, r3, #15
 811b910:	b2db      	uxtb	r3, r3
 811b912:	009b      	lsls	r3, r3, #2
 811b914:	b2db      	uxtb	r3, r3
 811b916:	461a      	mov	r2, r3
 811b918:	4b2a      	ldr	r3, [pc, #168]	@ (811b9c4 <ip4_input+0x240>)
 811b91a:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 811b91c:	89fb      	ldrh	r3, [r7, #14]
 811b91e:	4619      	mov	r1, r3
 811b920:	6878      	ldr	r0, [r7, #4]
 811b922:	f002 fc75 	bl	811e210 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 811b926:	697b      	ldr	r3, [r7, #20]
 811b928:	7a5b      	ldrb	r3, [r3, #9]
 811b92a:	2b11      	cmp	r3, #17
 811b92c:	d006      	beq.n	811b93c <ip4_input+0x1b8>
 811b92e:	2b11      	cmp	r3, #17
 811b930:	dc13      	bgt.n	811b95a <ip4_input+0x1d6>
 811b932:	2b01      	cmp	r3, #1
 811b934:	d00c      	beq.n	811b950 <ip4_input+0x1cc>
 811b936:	2b06      	cmp	r3, #6
 811b938:	d005      	beq.n	811b946 <ip4_input+0x1c2>
 811b93a:	e00e      	b.n	811b95a <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 811b93c:	6839      	ldr	r1, [r7, #0]
 811b93e:	6878      	ldr	r0, [r7, #4]
 811b940:	f009 fc24 	bl	812518c <udp_input>
        break;
 811b944:	e026      	b.n	811b994 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 811b946:	6839      	ldr	r1, [r7, #0]
 811b948:	6878      	ldr	r0, [r7, #4]
 811b94a:	f004 fe85 	bl	8120658 <tcp_input>
        break;
 811b94e:	e021      	b.n	811b994 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 811b950:	6839      	ldr	r1, [r7, #0]
 811b952:	6878      	ldr	r0, [r7, #4]
 811b954:	f7ff fbf4 	bl	811b140 <icmp_input>
        break;
 811b958:	e01c      	b.n	811b994 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 811b95a:	4b1a      	ldr	r3, [pc, #104]	@ (811b9c4 <ip4_input+0x240>)
 811b95c:	695b      	ldr	r3, [r3, #20]
 811b95e:	6939      	ldr	r1, [r7, #16]
 811b960:	4618      	mov	r0, r3
 811b962:	f000 f90b 	bl	811bb7c <ip4_addr_isbroadcast_u32>
 811b966:	4603      	mov	r3, r0
 811b968:	2b00      	cmp	r3, #0
 811b96a:	d10f      	bne.n	811b98c <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 811b96c:	4b15      	ldr	r3, [pc, #84]	@ (811b9c4 <ip4_input+0x240>)
 811b96e:	695b      	ldr	r3, [r3, #20]
 811b970:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 811b974:	2be0      	cmp	r3, #224	@ 0xe0
 811b976:	d009      	beq.n	811b98c <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 811b978:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 811b97c:	4619      	mov	r1, r3
 811b97e:	6878      	ldr	r0, [r7, #4]
 811b980:	f002 fcb9 	bl	811e2f6 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 811b984:	2102      	movs	r1, #2
 811b986:	6878      	ldr	r0, [r7, #4]
 811b988:	f7ff fcfa 	bl	811b380 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 811b98c:	6878      	ldr	r0, [r7, #4]
 811b98e:	f002 fcc5 	bl	811e31c <pbuf_free>
        break;
 811b992:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 811b994:	4b0b      	ldr	r3, [pc, #44]	@ (811b9c4 <ip4_input+0x240>)
 811b996:	2200      	movs	r2, #0
 811b998:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 811b99a:	4b0a      	ldr	r3, [pc, #40]	@ (811b9c4 <ip4_input+0x240>)
 811b99c:	2200      	movs	r2, #0
 811b99e:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 811b9a0:	4b08      	ldr	r3, [pc, #32]	@ (811b9c4 <ip4_input+0x240>)
 811b9a2:	2200      	movs	r2, #0
 811b9a4:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 811b9a6:	4b07      	ldr	r3, [pc, #28]	@ (811b9c4 <ip4_input+0x240>)
 811b9a8:	2200      	movs	r2, #0
 811b9aa:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 811b9ac:	4b05      	ldr	r3, [pc, #20]	@ (811b9c4 <ip4_input+0x240>)
 811b9ae:	2200      	movs	r2, #0
 811b9b0:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 811b9b2:	4b04      	ldr	r3, [pc, #16]	@ (811b9c4 <ip4_input+0x240>)
 811b9b4:	2200      	movs	r2, #0
 811b9b6:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 811b9b8:	2300      	movs	r3, #0
}
 811b9ba:	4618      	mov	r0, r3
 811b9bc:	3718      	adds	r7, #24
 811b9be:	46bd      	mov	sp, r7
 811b9c0:	bd80      	pop	{r7, pc}
 811b9c2:	bf00      	nop
 811b9c4:	1000b374 	.word	0x1000b374
 811b9c8:	1000e4fc 	.word	0x1000e4fc

0811b9cc <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 811b9cc:	b580      	push	{r7, lr}
 811b9ce:	b08a      	sub	sp, #40	@ 0x28
 811b9d0:	af04      	add	r7, sp, #16
 811b9d2:	60f8      	str	r0, [r7, #12]
 811b9d4:	60b9      	str	r1, [r7, #8]
 811b9d6:	607a      	str	r2, [r7, #4]
 811b9d8:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 811b9da:	68bb      	ldr	r3, [r7, #8]
 811b9dc:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 811b9de:	687b      	ldr	r3, [r7, #4]
 811b9e0:	2b00      	cmp	r3, #0
 811b9e2:	d009      	beq.n	811b9f8 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 811b9e4:	68bb      	ldr	r3, [r7, #8]
 811b9e6:	2b00      	cmp	r3, #0
 811b9e8:	d003      	beq.n	811b9f2 <ip4_output_if+0x26>
 811b9ea:	68bb      	ldr	r3, [r7, #8]
 811b9ec:	681b      	ldr	r3, [r3, #0]
 811b9ee:	2b00      	cmp	r3, #0
 811b9f0:	d102      	bne.n	811b9f8 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 811b9f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 811b9f4:	3304      	adds	r3, #4
 811b9f6:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 811b9f8:	78fa      	ldrb	r2, [r7, #3]
 811b9fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 811b9fc:	9302      	str	r3, [sp, #8]
 811b9fe:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 811ba02:	9301      	str	r3, [sp, #4]
 811ba04:	f897 3020 	ldrb.w	r3, [r7, #32]
 811ba08:	9300      	str	r3, [sp, #0]
 811ba0a:	4613      	mov	r3, r2
 811ba0c:	687a      	ldr	r2, [r7, #4]
 811ba0e:	6979      	ldr	r1, [r7, #20]
 811ba10:	68f8      	ldr	r0, [r7, #12]
 811ba12:	f000 f805 	bl	811ba20 <ip4_output_if_src>
 811ba16:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 811ba18:	4618      	mov	r0, r3
 811ba1a:	3718      	adds	r7, #24
 811ba1c:	46bd      	mov	sp, r7
 811ba1e:	bd80      	pop	{r7, pc}

0811ba20 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 811ba20:	b580      	push	{r7, lr}
 811ba22:	b088      	sub	sp, #32
 811ba24:	af00      	add	r7, sp, #0
 811ba26:	60f8      	str	r0, [r7, #12]
 811ba28:	60b9      	str	r1, [r7, #8]
 811ba2a:	607a      	str	r2, [r7, #4]
 811ba2c:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 811ba2e:	68fb      	ldr	r3, [r7, #12]
 811ba30:	7b9b      	ldrb	r3, [r3, #14]
 811ba32:	2b01      	cmp	r3, #1
 811ba34:	d006      	beq.n	811ba44 <ip4_output_if_src+0x24>
 811ba36:	4b4b      	ldr	r3, [pc, #300]	@ (811bb64 <ip4_output_if_src+0x144>)
 811ba38:	f44f 7255 	mov.w	r2, #852	@ 0x354
 811ba3c:	494a      	ldr	r1, [pc, #296]	@ (811bb68 <ip4_output_if_src+0x148>)
 811ba3e:	484b      	ldr	r0, [pc, #300]	@ (811bb6c <ip4_output_if_src+0x14c>)
 811ba40:	f00b f818 	bl	8126a74 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 811ba44:	687b      	ldr	r3, [r7, #4]
 811ba46:	2b00      	cmp	r3, #0
 811ba48:	d060      	beq.n	811bb0c <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 811ba4a:	2314      	movs	r3, #20
 811ba4c:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 811ba4e:	2114      	movs	r1, #20
 811ba50:	68f8      	ldr	r0, [r7, #12]
 811ba52:	f002 fbcd 	bl	811e1f0 <pbuf_add_header>
 811ba56:	4603      	mov	r3, r0
 811ba58:	2b00      	cmp	r3, #0
 811ba5a:	d002      	beq.n	811ba62 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 811ba5c:	f06f 0301 	mvn.w	r3, #1
 811ba60:	e07c      	b.n	811bb5c <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 811ba62:	68fb      	ldr	r3, [r7, #12]
 811ba64:	685b      	ldr	r3, [r3, #4]
 811ba66:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 811ba68:	68fb      	ldr	r3, [r7, #12]
 811ba6a:	895b      	ldrh	r3, [r3, #10]
 811ba6c:	2b13      	cmp	r3, #19
 811ba6e:	d806      	bhi.n	811ba7e <ip4_output_if_src+0x5e>
 811ba70:	4b3c      	ldr	r3, [pc, #240]	@ (811bb64 <ip4_output_if_src+0x144>)
 811ba72:	f44f 7262 	mov.w	r2, #904	@ 0x388
 811ba76:	493e      	ldr	r1, [pc, #248]	@ (811bb70 <ip4_output_if_src+0x150>)
 811ba78:	483c      	ldr	r0, [pc, #240]	@ (811bb6c <ip4_output_if_src+0x14c>)
 811ba7a:	f00a fffb 	bl	8126a74 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 811ba7e:	69fb      	ldr	r3, [r7, #28]
 811ba80:	78fa      	ldrb	r2, [r7, #3]
 811ba82:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 811ba84:	69fb      	ldr	r3, [r7, #28]
 811ba86:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 811ba8a:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 811ba8c:	687b      	ldr	r3, [r7, #4]
 811ba8e:	681a      	ldr	r2, [r3, #0]
 811ba90:	69fb      	ldr	r3, [r7, #28]
 811ba92:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 811ba94:	8b7b      	ldrh	r3, [r7, #26]
 811ba96:	089b      	lsrs	r3, r3, #2
 811ba98:	b29b      	uxth	r3, r3
 811ba9a:	b2db      	uxtb	r3, r3
 811ba9c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 811baa0:	b2da      	uxtb	r2, r3
 811baa2:	69fb      	ldr	r3, [r7, #28]
 811baa4:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 811baa6:	69fb      	ldr	r3, [r7, #28]
 811baa8:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 811baac:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 811baae:	68fb      	ldr	r3, [r7, #12]
 811bab0:	891b      	ldrh	r3, [r3, #8]
 811bab2:	4618      	mov	r0, r3
 811bab4:	f7fe fa2a 	bl	8119f0c <lwip_htons>
 811bab8:	4603      	mov	r3, r0
 811baba:	461a      	mov	r2, r3
 811babc:	69fb      	ldr	r3, [r7, #28]
 811babe:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 811bac0:	69fb      	ldr	r3, [r7, #28]
 811bac2:	2200      	movs	r2, #0
 811bac4:	719a      	strb	r2, [r3, #6]
 811bac6:	2200      	movs	r2, #0
 811bac8:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 811baca:	4b2a      	ldr	r3, [pc, #168]	@ (811bb74 <ip4_output_if_src+0x154>)
 811bacc:	881b      	ldrh	r3, [r3, #0]
 811bace:	4618      	mov	r0, r3
 811bad0:	f7fe fa1c 	bl	8119f0c <lwip_htons>
 811bad4:	4603      	mov	r3, r0
 811bad6:	461a      	mov	r2, r3
 811bad8:	69fb      	ldr	r3, [r7, #28]
 811bada:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 811badc:	4b25      	ldr	r3, [pc, #148]	@ (811bb74 <ip4_output_if_src+0x154>)
 811bade:	881b      	ldrh	r3, [r3, #0]
 811bae0:	3301      	adds	r3, #1
 811bae2:	b29a      	uxth	r2, r3
 811bae4:	4b23      	ldr	r3, [pc, #140]	@ (811bb74 <ip4_output_if_src+0x154>)
 811bae6:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 811bae8:	68bb      	ldr	r3, [r7, #8]
 811baea:	2b00      	cmp	r3, #0
 811baec:	d104      	bne.n	811baf8 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 811baee:	4b22      	ldr	r3, [pc, #136]	@ (811bb78 <ip4_output_if_src+0x158>)
 811baf0:	681a      	ldr	r2, [r3, #0]
 811baf2:	69fb      	ldr	r3, [r7, #28]
 811baf4:	60da      	str	r2, [r3, #12]
 811baf6:	e003      	b.n	811bb00 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 811baf8:	68bb      	ldr	r3, [r7, #8]
 811bafa:	681a      	ldr	r2, [r3, #0]
 811bafc:	69fb      	ldr	r3, [r7, #28]
 811bafe:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 811bb00:	69fb      	ldr	r3, [r7, #28]
 811bb02:	2200      	movs	r2, #0
 811bb04:	729a      	strb	r2, [r3, #10]
 811bb06:	2200      	movs	r2, #0
 811bb08:	72da      	strb	r2, [r3, #11]
 811bb0a:	e00f      	b.n	811bb2c <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 811bb0c:	68fb      	ldr	r3, [r7, #12]
 811bb0e:	895b      	ldrh	r3, [r3, #10]
 811bb10:	2b13      	cmp	r3, #19
 811bb12:	d802      	bhi.n	811bb1a <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 811bb14:	f06f 0301 	mvn.w	r3, #1
 811bb18:	e020      	b.n	811bb5c <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 811bb1a:	68fb      	ldr	r3, [r7, #12]
 811bb1c:	685b      	ldr	r3, [r3, #4]
 811bb1e:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 811bb20:	69fb      	ldr	r3, [r7, #28]
 811bb22:	691b      	ldr	r3, [r3, #16]
 811bb24:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 811bb26:	f107 0314 	add.w	r3, r7, #20
 811bb2a:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 811bb2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811bb2e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 811bb30:	2b00      	cmp	r3, #0
 811bb32:	d00c      	beq.n	811bb4e <ip4_output_if_src+0x12e>
 811bb34:	68fb      	ldr	r3, [r7, #12]
 811bb36:	891a      	ldrh	r2, [r3, #8]
 811bb38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811bb3a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 811bb3c:	429a      	cmp	r2, r3
 811bb3e:	d906      	bls.n	811bb4e <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 811bb40:	687a      	ldr	r2, [r7, #4]
 811bb42:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 811bb44:	68f8      	ldr	r0, [r7, #12]
 811bb46:	f000 ff0d 	bl	811c964 <ip4_frag>
 811bb4a:	4603      	mov	r3, r0
 811bb4c:	e006      	b.n	811bb5c <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 811bb4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811bb50:	695b      	ldr	r3, [r3, #20]
 811bb52:	687a      	ldr	r2, [r7, #4]
 811bb54:	68f9      	ldr	r1, [r7, #12]
 811bb56:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 811bb58:	4798      	blx	r3
 811bb5a:	4603      	mov	r3, r0
}
 811bb5c:	4618      	mov	r0, r3
 811bb5e:	3720      	adds	r7, #32
 811bb60:	46bd      	mov	sp, r7
 811bb62:	bd80      	pop	{r7, pc}
 811bb64:	081282f8 	.word	0x081282f8
 811bb68:	08128370 	.word	0x08128370
 811bb6c:	0812837c 	.word	0x0812837c
 811bb70:	081283a4 	.word	0x081283a4
 811bb74:	1000b38c 	.word	0x1000b38c
 811bb78:	0812ae4c 	.word	0x0812ae4c

0811bb7c <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 811bb7c:	b480      	push	{r7}
 811bb7e:	b085      	sub	sp, #20
 811bb80:	af00      	add	r7, sp, #0
 811bb82:	6078      	str	r0, [r7, #4]
 811bb84:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 811bb86:	687b      	ldr	r3, [r7, #4]
 811bb88:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 811bb8a:	687b      	ldr	r3, [r7, #4]
 811bb8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 811bb90:	d002      	beq.n	811bb98 <ip4_addr_isbroadcast_u32+0x1c>
 811bb92:	687b      	ldr	r3, [r7, #4]
 811bb94:	2b00      	cmp	r3, #0
 811bb96:	d101      	bne.n	811bb9c <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 811bb98:	2301      	movs	r3, #1
 811bb9a:	e02a      	b.n	811bbf2 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 811bb9c:	683b      	ldr	r3, [r7, #0]
 811bb9e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 811bba2:	f003 0302 	and.w	r3, r3, #2
 811bba6:	2b00      	cmp	r3, #0
 811bba8:	d101      	bne.n	811bbae <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 811bbaa:	2300      	movs	r3, #0
 811bbac:	e021      	b.n	811bbf2 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 811bbae:	683b      	ldr	r3, [r7, #0]
 811bbb0:	3304      	adds	r3, #4
 811bbb2:	681b      	ldr	r3, [r3, #0]
 811bbb4:	687a      	ldr	r2, [r7, #4]
 811bbb6:	429a      	cmp	r2, r3
 811bbb8:	d101      	bne.n	811bbbe <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 811bbba:	2300      	movs	r3, #0
 811bbbc:	e019      	b.n	811bbf2 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 811bbbe:	68fa      	ldr	r2, [r7, #12]
 811bbc0:	683b      	ldr	r3, [r7, #0]
 811bbc2:	3304      	adds	r3, #4
 811bbc4:	681b      	ldr	r3, [r3, #0]
 811bbc6:	405a      	eors	r2, r3
 811bbc8:	683b      	ldr	r3, [r7, #0]
 811bbca:	3308      	adds	r3, #8
 811bbcc:	681b      	ldr	r3, [r3, #0]
 811bbce:	4013      	ands	r3, r2
 811bbd0:	2b00      	cmp	r3, #0
 811bbd2:	d10d      	bne.n	811bbf0 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 811bbd4:	683b      	ldr	r3, [r7, #0]
 811bbd6:	3308      	adds	r3, #8
 811bbd8:	681b      	ldr	r3, [r3, #0]
 811bbda:	43da      	mvns	r2, r3
 811bbdc:	687b      	ldr	r3, [r7, #4]
 811bbde:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 811bbe0:	683b      	ldr	r3, [r7, #0]
 811bbe2:	3308      	adds	r3, #8
 811bbe4:	681b      	ldr	r3, [r3, #0]
 811bbe6:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 811bbe8:	429a      	cmp	r2, r3
 811bbea:	d101      	bne.n	811bbf0 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 811bbec:	2301      	movs	r3, #1
 811bbee:	e000      	b.n	811bbf2 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 811bbf0:	2300      	movs	r3, #0
  }
}
 811bbf2:	4618      	mov	r0, r3
 811bbf4:	3714      	adds	r7, #20
 811bbf6:	46bd      	mov	sp, r7
 811bbf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 811bbfc:	4770      	bx	lr
	...

0811bc00 <ip4addr_aton>:
 * @param addr pointer to which to save the ip address in network order
 * @return 1 if cp could be converted to addr, 0 on failure
 */
int
ip4addr_aton(const char *cp, ip4_addr_t *addr)
{
 811bc00:	b580      	push	{r7, lr}
 811bc02:	b08a      	sub	sp, #40	@ 0x28
 811bc04:	af00      	add	r7, sp, #0
 811bc06:	6078      	str	r0, [r7, #4]
 811bc08:	6039      	str	r1, [r7, #0]
  u32_t val;
  u8_t base;
  char c;
  u32_t parts[4];
  u32_t *pp = parts;
 811bc0a:	f107 030c 	add.w	r3, r7, #12
 811bc0e:	61fb      	str	r3, [r7, #28]

  c = *cp;
 811bc10:	687b      	ldr	r3, [r7, #4]
 811bc12:	781b      	ldrb	r3, [r3, #0]
 811bc14:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    /*
     * Collect number up to ``.''.
     * Values are specified as for C:
     * 0x=hex, 0=octal, 1-9=decimal.
     */
    if (!lwip_isdigit(c)) {
 811bc18:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 811bc1c:	3301      	adds	r3, #1
 811bc1e:	4a89      	ldr	r2, [pc, #548]	@ (811be44 <ip4addr_aton+0x244>)
 811bc20:	4413      	add	r3, r2
 811bc22:	781b      	ldrb	r3, [r3, #0]
 811bc24:	f003 0304 	and.w	r3, r3, #4
 811bc28:	2b00      	cmp	r3, #0
 811bc2a:	d101      	bne.n	811bc30 <ip4addr_aton+0x30>
      return 0;
 811bc2c:	2300      	movs	r3, #0
 811bc2e:	e105      	b.n	811be3c <ip4addr_aton+0x23c>
    }
    val = 0;
 811bc30:	2300      	movs	r3, #0
 811bc32:	627b      	str	r3, [r7, #36]	@ 0x24
    base = 10;
 811bc34:	230a      	movs	r3, #10
 811bc36:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    if (c == '0') {
 811bc3a:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 811bc3e:	2b30      	cmp	r3, #48	@ 0x30
 811bc40:	d11c      	bne.n	811bc7c <ip4addr_aton+0x7c>
      c = *++cp;
 811bc42:	687b      	ldr	r3, [r7, #4]
 811bc44:	3301      	adds	r3, #1
 811bc46:	607b      	str	r3, [r7, #4]
 811bc48:	687b      	ldr	r3, [r7, #4]
 811bc4a:	781b      	ldrb	r3, [r3, #0]
 811bc4c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
      if (c == 'x' || c == 'X') {
 811bc50:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 811bc54:	2b78      	cmp	r3, #120	@ 0x78
 811bc56:	d003      	beq.n	811bc60 <ip4addr_aton+0x60>
 811bc58:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 811bc5c:	2b58      	cmp	r3, #88	@ 0x58
 811bc5e:	d10a      	bne.n	811bc76 <ip4addr_aton+0x76>
        base = 16;
 811bc60:	2310      	movs	r3, #16
 811bc62:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        c = *++cp;
 811bc66:	687b      	ldr	r3, [r7, #4]
 811bc68:	3301      	adds	r3, #1
 811bc6a:	607b      	str	r3, [r7, #4]
 811bc6c:	687b      	ldr	r3, [r7, #4]
 811bc6e:	781b      	ldrb	r3, [r3, #0]
 811bc70:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 811bc74:	e002      	b.n	811bc7c <ip4addr_aton+0x7c>
      } else {
        base = 8;
 811bc76:	2308      	movs	r3, #8
 811bc78:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
      }
    }
    for (;;) {
      if (lwip_isdigit(c)) {
 811bc7c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 811bc80:	3301      	adds	r3, #1
 811bc82:	4a70      	ldr	r2, [pc, #448]	@ (811be44 <ip4addr_aton+0x244>)
 811bc84:	4413      	add	r3, r2
 811bc86:	781b      	ldrb	r3, [r3, #0]
 811bc88:	f003 0304 	and.w	r3, r3, #4
 811bc8c:	2b00      	cmp	r3, #0
 811bc8e:	d011      	beq.n	811bcb4 <ip4addr_aton+0xb4>
        val = (val * base) + (u32_t)(c - '0');
 811bc90:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 811bc94:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 811bc96:	fb03 f202 	mul.w	r2, r3, r2
 811bc9a:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 811bc9e:	4413      	add	r3, r2
 811bca0:	3b30      	subs	r3, #48	@ 0x30
 811bca2:	627b      	str	r3, [r7, #36]	@ 0x24
        c = *++cp;
 811bca4:	687b      	ldr	r3, [r7, #4]
 811bca6:	3301      	adds	r3, #1
 811bca8:	607b      	str	r3, [r7, #4]
 811bcaa:	687b      	ldr	r3, [r7, #4]
 811bcac:	781b      	ldrb	r3, [r3, #0]
 811bcae:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 811bcb2:	e7e3      	b.n	811bc7c <ip4addr_aton+0x7c>
      } else if (base == 16 && lwip_isxdigit(c)) {
 811bcb4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 811bcb8:	2b10      	cmp	r3, #16
 811bcba:	d127      	bne.n	811bd0c <ip4addr_aton+0x10c>
 811bcbc:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 811bcc0:	3301      	adds	r3, #1
 811bcc2:	4a60      	ldr	r2, [pc, #384]	@ (811be44 <ip4addr_aton+0x244>)
 811bcc4:	4413      	add	r3, r2
 811bcc6:	781b      	ldrb	r3, [r3, #0]
 811bcc8:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 811bccc:	2b00      	cmp	r3, #0
 811bcce:	d01d      	beq.n	811bd0c <ip4addr_aton+0x10c>
        val = (val << 4) | (u32_t)(c + 10 - (lwip_islower(c) ? 'a' : 'A'));
 811bcd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811bcd2:	011b      	lsls	r3, r3, #4
 811bcd4:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 811bcd8:	f102 010a 	add.w	r1, r2, #10
 811bcdc:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 811bce0:	3201      	adds	r2, #1
 811bce2:	4858      	ldr	r0, [pc, #352]	@ (811be44 <ip4addr_aton+0x244>)
 811bce4:	4402      	add	r2, r0
 811bce6:	7812      	ldrb	r2, [r2, #0]
 811bce8:	f002 0203 	and.w	r2, r2, #3
 811bcec:	2a02      	cmp	r2, #2
 811bcee:	d101      	bne.n	811bcf4 <ip4addr_aton+0xf4>
 811bcf0:	2261      	movs	r2, #97	@ 0x61
 811bcf2:	e000      	b.n	811bcf6 <ip4addr_aton+0xf6>
 811bcf4:	2241      	movs	r2, #65	@ 0x41
 811bcf6:	1a8a      	subs	r2, r1, r2
 811bcf8:	4313      	orrs	r3, r2
 811bcfa:	627b      	str	r3, [r7, #36]	@ 0x24
        c = *++cp;
 811bcfc:	687b      	ldr	r3, [r7, #4]
 811bcfe:	3301      	adds	r3, #1
 811bd00:	607b      	str	r3, [r7, #4]
 811bd02:	687b      	ldr	r3, [r7, #4]
 811bd04:	781b      	ldrb	r3, [r3, #0]
 811bd06:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
      if (lwip_isdigit(c)) {
 811bd0a:	e7b7      	b.n	811bc7c <ip4addr_aton+0x7c>
      } else {
        break;
      }
    }
    if (c == '.') {
 811bd0c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 811bd10:	2b2e      	cmp	r3, #46	@ 0x2e
 811bd12:	d114      	bne.n	811bd3e <ip4addr_aton+0x13e>
       * Internet format:
       *  a.b.c.d
       *  a.b.c   (with c treated as 16 bits)
       *  a.b (with b treated as 24 bits)
       */
      if (pp >= parts + 3) {
 811bd14:	f107 030c 	add.w	r3, r7, #12
 811bd18:	330c      	adds	r3, #12
 811bd1a:	69fa      	ldr	r2, [r7, #28]
 811bd1c:	429a      	cmp	r2, r3
 811bd1e:	d301      	bcc.n	811bd24 <ip4addr_aton+0x124>
        return 0;
 811bd20:	2300      	movs	r3, #0
 811bd22:	e08b      	b.n	811be3c <ip4addr_aton+0x23c>
      }
      *pp++ = val;
 811bd24:	69fb      	ldr	r3, [r7, #28]
 811bd26:	1d1a      	adds	r2, r3, #4
 811bd28:	61fa      	str	r2, [r7, #28]
 811bd2a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 811bd2c:	601a      	str	r2, [r3, #0]
      c = *++cp;
 811bd2e:	687b      	ldr	r3, [r7, #4]
 811bd30:	3301      	adds	r3, #1
 811bd32:	607b      	str	r3, [r7, #4]
 811bd34:	687b      	ldr	r3, [r7, #4]
 811bd36:	781b      	ldrb	r3, [r3, #0]
 811bd38:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    if (!lwip_isdigit(c)) {
 811bd3c:	e76c      	b.n	811bc18 <ip4addr_aton+0x18>
    } else {
      break;
 811bd3e:	bf00      	nop
    }
  }
  /*
   * Check for trailing characters.
   */
  if (c != '\0' && !lwip_isspace(c)) {
 811bd40:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 811bd44:	2b00      	cmp	r3, #0
 811bd46:	d00b      	beq.n	811bd60 <ip4addr_aton+0x160>
 811bd48:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 811bd4c:	3301      	adds	r3, #1
 811bd4e:	4a3d      	ldr	r2, [pc, #244]	@ (811be44 <ip4addr_aton+0x244>)
 811bd50:	4413      	add	r3, r2
 811bd52:	781b      	ldrb	r3, [r3, #0]
 811bd54:	f003 0308 	and.w	r3, r3, #8
 811bd58:	2b00      	cmp	r3, #0
 811bd5a:	d101      	bne.n	811bd60 <ip4addr_aton+0x160>
    return 0;
 811bd5c:	2300      	movs	r3, #0
 811bd5e:	e06d      	b.n	811be3c <ip4addr_aton+0x23c>
  }
  /*
   * Concoct the address according to
   * the number of parts specified.
   */
  switch (pp - parts + 1) {
 811bd60:	f107 030c 	add.w	r3, r7, #12
 811bd64:	69fa      	ldr	r2, [r7, #28]
 811bd66:	1ad3      	subs	r3, r2, r3
 811bd68:	109b      	asrs	r3, r3, #2
 811bd6a:	3301      	adds	r3, #1
 811bd6c:	2b04      	cmp	r3, #4
 811bd6e:	d853      	bhi.n	811be18 <ip4addr_aton+0x218>
 811bd70:	a201      	add	r2, pc, #4	@ (adr r2, 811bd78 <ip4addr_aton+0x178>)
 811bd72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 811bd76:	bf00      	nop
 811bd78:	0811bd8d 	.word	0x0811bd8d
 811bd7c:	0811be27 	.word	0x0811be27
 811bd80:	0811bd91 	.word	0x0811bd91
 811bd84:	0811bdb3 	.word	0x0811bdb3
 811bd88:	0811bde1 	.word	0x0811bde1

    case 0:
      return 0;       /* initial nondigit */
 811bd8c:	2300      	movs	r3, #0
 811bd8e:	e055      	b.n	811be3c <ip4addr_aton+0x23c>

    case 1:             /* a -- 32 bits */
      break;

    case 2:             /* a.b -- 8.24 bits */
      if (val > 0xffffffUL) {
 811bd90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811bd92:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 811bd96:	d301      	bcc.n	811bd9c <ip4addr_aton+0x19c>
        return 0;
 811bd98:	2300      	movs	r3, #0
 811bd9a:	e04f      	b.n	811be3c <ip4addr_aton+0x23c>
      }
      if (parts[0] > 0xff) {
 811bd9c:	68fb      	ldr	r3, [r7, #12]
 811bd9e:	2bff      	cmp	r3, #255	@ 0xff
 811bda0:	d901      	bls.n	811bda6 <ip4addr_aton+0x1a6>
        return 0;
 811bda2:	2300      	movs	r3, #0
 811bda4:	e04a      	b.n	811be3c <ip4addr_aton+0x23c>
      }
      val |= parts[0] << 24;
 811bda6:	68fb      	ldr	r3, [r7, #12]
 811bda8:	061b      	lsls	r3, r3, #24
 811bdaa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 811bdac:	4313      	orrs	r3, r2
 811bdae:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 811bdb0:	e03a      	b.n	811be28 <ip4addr_aton+0x228>

    case 3:             /* a.b.c -- 8.8.16 bits */
      if (val > 0xffff) {
 811bdb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811bdb4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 811bdb8:	d301      	bcc.n	811bdbe <ip4addr_aton+0x1be>
        return 0;
 811bdba:	2300      	movs	r3, #0
 811bdbc:	e03e      	b.n	811be3c <ip4addr_aton+0x23c>
      }
      if ((parts[0] > 0xff) || (parts[1] > 0xff)) {
 811bdbe:	68fb      	ldr	r3, [r7, #12]
 811bdc0:	2bff      	cmp	r3, #255	@ 0xff
 811bdc2:	d802      	bhi.n	811bdca <ip4addr_aton+0x1ca>
 811bdc4:	693b      	ldr	r3, [r7, #16]
 811bdc6:	2bff      	cmp	r3, #255	@ 0xff
 811bdc8:	d901      	bls.n	811bdce <ip4addr_aton+0x1ce>
        return 0;
 811bdca:	2300      	movs	r3, #0
 811bdcc:	e036      	b.n	811be3c <ip4addr_aton+0x23c>
      }
      val |= (parts[0] << 24) | (parts[1] << 16);
 811bdce:	68fb      	ldr	r3, [r7, #12]
 811bdd0:	061a      	lsls	r2, r3, #24
 811bdd2:	693b      	ldr	r3, [r7, #16]
 811bdd4:	041b      	lsls	r3, r3, #16
 811bdd6:	4313      	orrs	r3, r2
 811bdd8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 811bdda:	4313      	orrs	r3, r2
 811bddc:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 811bdde:	e023      	b.n	811be28 <ip4addr_aton+0x228>

    case 4:             /* a.b.c.d -- 8.8.8.8 bits */
      if (val > 0xff) {
 811bde0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811bde2:	2bff      	cmp	r3, #255	@ 0xff
 811bde4:	d901      	bls.n	811bdea <ip4addr_aton+0x1ea>
        return 0;
 811bde6:	2300      	movs	r3, #0
 811bde8:	e028      	b.n	811be3c <ip4addr_aton+0x23c>
      }
      if ((parts[0] > 0xff) || (parts[1] > 0xff) || (parts[2] > 0xff)) {
 811bdea:	68fb      	ldr	r3, [r7, #12]
 811bdec:	2bff      	cmp	r3, #255	@ 0xff
 811bdee:	d805      	bhi.n	811bdfc <ip4addr_aton+0x1fc>
 811bdf0:	693b      	ldr	r3, [r7, #16]
 811bdf2:	2bff      	cmp	r3, #255	@ 0xff
 811bdf4:	d802      	bhi.n	811bdfc <ip4addr_aton+0x1fc>
 811bdf6:	697b      	ldr	r3, [r7, #20]
 811bdf8:	2bff      	cmp	r3, #255	@ 0xff
 811bdfa:	d901      	bls.n	811be00 <ip4addr_aton+0x200>
        return 0;
 811bdfc:	2300      	movs	r3, #0
 811bdfe:	e01d      	b.n	811be3c <ip4addr_aton+0x23c>
      }
      val |= (parts[0] << 24) | (parts[1] << 16) | (parts[2] << 8);
 811be00:	68fb      	ldr	r3, [r7, #12]
 811be02:	061a      	lsls	r2, r3, #24
 811be04:	693b      	ldr	r3, [r7, #16]
 811be06:	041b      	lsls	r3, r3, #16
 811be08:	431a      	orrs	r2, r3
 811be0a:	697b      	ldr	r3, [r7, #20]
 811be0c:	021b      	lsls	r3, r3, #8
 811be0e:	4313      	orrs	r3, r2
 811be10:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 811be12:	4313      	orrs	r3, r2
 811be14:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 811be16:	e007      	b.n	811be28 <ip4addr_aton+0x228>
    default:
      LWIP_ASSERT("unhandled", 0);
 811be18:	4b0b      	ldr	r3, [pc, #44]	@ (811be48 <ip4addr_aton+0x248>)
 811be1a:	22f9      	movs	r2, #249	@ 0xf9
 811be1c:	490b      	ldr	r1, [pc, #44]	@ (811be4c <ip4addr_aton+0x24c>)
 811be1e:	480c      	ldr	r0, [pc, #48]	@ (811be50 <ip4addr_aton+0x250>)
 811be20:	f00a fe28 	bl	8126a74 <iprintf>
      break;
 811be24:	e000      	b.n	811be28 <ip4addr_aton+0x228>
      break;
 811be26:	bf00      	nop
  }
  if (addr) {
 811be28:	683b      	ldr	r3, [r7, #0]
 811be2a:	2b00      	cmp	r3, #0
 811be2c:	d005      	beq.n	811be3a <ip4addr_aton+0x23a>
    ip4_addr_set_u32(addr, lwip_htonl(val));
 811be2e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 811be30:	f7fe f881 	bl	8119f36 <lwip_htonl>
 811be34:	4602      	mov	r2, r0
 811be36:	683b      	ldr	r3, [r7, #0]
 811be38:	601a      	str	r2, [r3, #0]
  }
  return 1;
 811be3a:	2301      	movs	r3, #1
}
 811be3c:	4618      	mov	r0, r3
 811be3e:	3728      	adds	r7, #40	@ 0x28
 811be40:	46bd      	mov	sp, r7
 811be42:	bd80      	pop	{r7, pc}
 811be44:	0812b3e3 	.word	0x0812b3e3
 811be48:	081283d4 	.word	0x081283d4
 811be4c:	08128450 	.word	0x08128450
 811be50:	0812845c 	.word	0x0812845c

0811be54 <ip4addr_ntoa>:
 * @return pointer to a global static (!) buffer that holds the ASCII
 *         representation of addr
 */
char *
ip4addr_ntoa(const ip4_addr_t *addr)
{
 811be54:	b580      	push	{r7, lr}
 811be56:	b082      	sub	sp, #8
 811be58:	af00      	add	r7, sp, #0
 811be5a:	6078      	str	r0, [r7, #4]
  static char str[IP4ADDR_STRLEN_MAX];
  return ip4addr_ntoa_r(addr, str, IP4ADDR_STRLEN_MAX);
 811be5c:	2210      	movs	r2, #16
 811be5e:	4904      	ldr	r1, [pc, #16]	@ (811be70 <ip4addr_ntoa+0x1c>)
 811be60:	6878      	ldr	r0, [r7, #4]
 811be62:	f000 f807 	bl	811be74 <ip4addr_ntoa_r>
 811be66:	4603      	mov	r3, r0
}
 811be68:	4618      	mov	r0, r3
 811be6a:	3708      	adds	r7, #8
 811be6c:	46bd      	mov	sp, r7
 811be6e:	bd80      	pop	{r7, pc}
 811be70:	1000b390 	.word	0x1000b390

0811be74 <ip4addr_ntoa_r>:
 * @return either pointer to buf which now holds the ASCII
 *         representation of addr or NULL if buf was too small
 */
char *
ip4addr_ntoa_r(const ip4_addr_t *addr, char *buf, int buflen)
{
 811be74:	b480      	push	{r7}
 811be76:	b08d      	sub	sp, #52	@ 0x34
 811be78:	af00      	add	r7, sp, #0
 811be7a:	60f8      	str	r0, [r7, #12]
 811be7c:	60b9      	str	r1, [r7, #8]
 811be7e:	607a      	str	r2, [r7, #4]
  char *rp;
  u8_t *ap;
  u8_t rem;
  u8_t n;
  u8_t i;
  int len = 0;
 811be80:	2300      	movs	r3, #0
 811be82:	623b      	str	r3, [r7, #32]

  s_addr = ip4_addr_get_u32(addr);
 811be84:	68fb      	ldr	r3, [r7, #12]
 811be86:	681b      	ldr	r3, [r3, #0]
 811be88:	61bb      	str	r3, [r7, #24]

  rp = buf;
 811be8a:	68bb      	ldr	r3, [r7, #8]
 811be8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  ap = (u8_t *)&s_addr;
 811be8e:	f107 0318 	add.w	r3, r7, #24
 811be92:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (n = 0; n < 4; n++) {
 811be94:	2300      	movs	r3, #0
 811be96:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 811be9a:	e058      	b.n	811bf4e <ip4addr_ntoa_r+0xda>
    i = 0;
 811be9c:	2300      	movs	r3, #0
 811be9e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    do {
      rem = *ap % (u8_t)10;
 811bea2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 811bea4:	781a      	ldrb	r2, [r3, #0]
 811bea6:	4b32      	ldr	r3, [pc, #200]	@ (811bf70 <ip4addr_ntoa_r+0xfc>)
 811bea8:	fba3 1302 	umull	r1, r3, r3, r2
 811beac:	08d9      	lsrs	r1, r3, #3
 811beae:	460b      	mov	r3, r1
 811beb0:	009b      	lsls	r3, r3, #2
 811beb2:	440b      	add	r3, r1
 811beb4:	005b      	lsls	r3, r3, #1
 811beb6:	1ad3      	subs	r3, r2, r3
 811beb8:	77fb      	strb	r3, [r7, #31]
      *ap /= (u8_t)10;
 811beba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 811bebc:	781b      	ldrb	r3, [r3, #0]
 811bebe:	4a2c      	ldr	r2, [pc, #176]	@ (811bf70 <ip4addr_ntoa_r+0xfc>)
 811bec0:	fba2 2303 	umull	r2, r3, r2, r3
 811bec4:	08db      	lsrs	r3, r3, #3
 811bec6:	b2da      	uxtb	r2, r3
 811bec8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 811beca:	701a      	strb	r2, [r3, #0]
      inv[i++] = (char)('0' + rem);
 811becc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 811bed0:	1c5a      	adds	r2, r3, #1
 811bed2:	f887 2026 	strb.w	r2, [r7, #38]	@ 0x26
 811bed6:	4619      	mov	r1, r3
 811bed8:	7ffb      	ldrb	r3, [r7, #31]
 811beda:	3330      	adds	r3, #48	@ 0x30
 811bedc:	b2da      	uxtb	r2, r3
 811bede:	f101 0330 	add.w	r3, r1, #48	@ 0x30
 811bee2:	443b      	add	r3, r7
 811bee4:	f803 2c1c 	strb.w	r2, [r3, #-28]
    } while (*ap);
 811bee8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 811beea:	781b      	ldrb	r3, [r3, #0]
 811beec:	2b00      	cmp	r3, #0
 811beee:	d1d8      	bne.n	811bea2 <ip4addr_ntoa_r+0x2e>
    while (i--) {
 811bef0:	e011      	b.n	811bf16 <ip4addr_ntoa_r+0xa2>
      if (len++ >= buflen) {
 811bef2:	6a3b      	ldr	r3, [r7, #32]
 811bef4:	1c5a      	adds	r2, r3, #1
 811bef6:	623a      	str	r2, [r7, #32]
 811bef8:	687a      	ldr	r2, [r7, #4]
 811befa:	429a      	cmp	r2, r3
 811befc:	dc01      	bgt.n	811bf02 <ip4addr_ntoa_r+0x8e>
        return NULL;
 811befe:	2300      	movs	r3, #0
 811bf00:	e030      	b.n	811bf64 <ip4addr_ntoa_r+0xf0>
      }
      *rp++ = inv[i];
 811bf02:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 811bf06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811bf08:	1c59      	adds	r1, r3, #1
 811bf0a:	62f9      	str	r1, [r7, #44]	@ 0x2c
 811bf0c:	3230      	adds	r2, #48	@ 0x30
 811bf0e:	443a      	add	r2, r7
 811bf10:	f812 2c1c 	ldrb.w	r2, [r2, #-28]
 811bf14:	701a      	strb	r2, [r3, #0]
    while (i--) {
 811bf16:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 811bf1a:	1e5a      	subs	r2, r3, #1
 811bf1c:	f887 2026 	strb.w	r2, [r7, #38]	@ 0x26
 811bf20:	2b00      	cmp	r3, #0
 811bf22:	d1e6      	bne.n	811bef2 <ip4addr_ntoa_r+0x7e>
    }
    if (len++ >= buflen) {
 811bf24:	6a3b      	ldr	r3, [r7, #32]
 811bf26:	1c5a      	adds	r2, r3, #1
 811bf28:	623a      	str	r2, [r7, #32]
 811bf2a:	687a      	ldr	r2, [r7, #4]
 811bf2c:	429a      	cmp	r2, r3
 811bf2e:	dc01      	bgt.n	811bf34 <ip4addr_ntoa_r+0xc0>
      return NULL;
 811bf30:	2300      	movs	r3, #0
 811bf32:	e017      	b.n	811bf64 <ip4addr_ntoa_r+0xf0>
    }
    *rp++ = '.';
 811bf34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811bf36:	1c5a      	adds	r2, r3, #1
 811bf38:	62fa      	str	r2, [r7, #44]	@ 0x2c
 811bf3a:	222e      	movs	r2, #46	@ 0x2e
 811bf3c:	701a      	strb	r2, [r3, #0]
    ap++;
 811bf3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 811bf40:	3301      	adds	r3, #1
 811bf42:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (n = 0; n < 4; n++) {
 811bf44:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 811bf48:	3301      	adds	r3, #1
 811bf4a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 811bf4e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 811bf52:	2b03      	cmp	r3, #3
 811bf54:	d9a2      	bls.n	811be9c <ip4addr_ntoa_r+0x28>
  }
  *--rp = 0;
 811bf56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811bf58:	3b01      	subs	r3, #1
 811bf5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 811bf5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811bf5e:	2200      	movs	r2, #0
 811bf60:	701a      	strb	r2, [r3, #0]
  return buf;
 811bf62:	68bb      	ldr	r3, [r7, #8]
}
 811bf64:	4618      	mov	r0, r3
 811bf66:	3734      	adds	r7, #52	@ 0x34
 811bf68:	46bd      	mov	sp, r7
 811bf6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 811bf6e:	4770      	bx	lr
 811bf70:	cccccccd 	.word	0xcccccccd

0811bf74 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 811bf74:	b580      	push	{r7, lr}
 811bf76:	b084      	sub	sp, #16
 811bf78:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 811bf7a:	2300      	movs	r3, #0
 811bf7c:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 811bf7e:	4b12      	ldr	r3, [pc, #72]	@ (811bfc8 <ip_reass_tmr+0x54>)
 811bf80:	681b      	ldr	r3, [r3, #0]
 811bf82:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 811bf84:	e018      	b.n	811bfb8 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 811bf86:	68fb      	ldr	r3, [r7, #12]
 811bf88:	7fdb      	ldrb	r3, [r3, #31]
 811bf8a:	2b00      	cmp	r3, #0
 811bf8c:	d00b      	beq.n	811bfa6 <ip_reass_tmr+0x32>
      r->timer--;
 811bf8e:	68fb      	ldr	r3, [r7, #12]
 811bf90:	7fdb      	ldrb	r3, [r3, #31]
 811bf92:	3b01      	subs	r3, #1
 811bf94:	b2da      	uxtb	r2, r3
 811bf96:	68fb      	ldr	r3, [r7, #12]
 811bf98:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 811bf9a:	68fb      	ldr	r3, [r7, #12]
 811bf9c:	60bb      	str	r3, [r7, #8]
      r = r->next;
 811bf9e:	68fb      	ldr	r3, [r7, #12]
 811bfa0:	681b      	ldr	r3, [r3, #0]
 811bfa2:	60fb      	str	r3, [r7, #12]
 811bfa4:	e008      	b.n	811bfb8 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 811bfa6:	68fb      	ldr	r3, [r7, #12]
 811bfa8:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 811bfaa:	68fb      	ldr	r3, [r7, #12]
 811bfac:	681b      	ldr	r3, [r3, #0]
 811bfae:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 811bfb0:	68b9      	ldr	r1, [r7, #8]
 811bfb2:	6878      	ldr	r0, [r7, #4]
 811bfb4:	f000 f80a 	bl	811bfcc <ip_reass_free_complete_datagram>
  while (r != NULL) {
 811bfb8:	68fb      	ldr	r3, [r7, #12]
 811bfba:	2b00      	cmp	r3, #0
 811bfbc:	d1e3      	bne.n	811bf86 <ip_reass_tmr+0x12>
    }
  }
}
 811bfbe:	bf00      	nop
 811bfc0:	bf00      	nop
 811bfc2:	3710      	adds	r7, #16
 811bfc4:	46bd      	mov	sp, r7
 811bfc6:	bd80      	pop	{r7, pc}
 811bfc8:	1000b3a0 	.word	0x1000b3a0

0811bfcc <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 811bfcc:	b580      	push	{r7, lr}
 811bfce:	b088      	sub	sp, #32
 811bfd0:	af00      	add	r7, sp, #0
 811bfd2:	6078      	str	r0, [r7, #4]
 811bfd4:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 811bfd6:	2300      	movs	r3, #0
 811bfd8:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 811bfda:	683a      	ldr	r2, [r7, #0]
 811bfdc:	687b      	ldr	r3, [r7, #4]
 811bfde:	429a      	cmp	r2, r3
 811bfe0:	d105      	bne.n	811bfee <ip_reass_free_complete_datagram+0x22>
 811bfe2:	4b45      	ldr	r3, [pc, #276]	@ (811c0f8 <ip_reass_free_complete_datagram+0x12c>)
 811bfe4:	22ab      	movs	r2, #171	@ 0xab
 811bfe6:	4945      	ldr	r1, [pc, #276]	@ (811c0fc <ip_reass_free_complete_datagram+0x130>)
 811bfe8:	4845      	ldr	r0, [pc, #276]	@ (811c100 <ip_reass_free_complete_datagram+0x134>)
 811bfea:	f00a fd43 	bl	8126a74 <iprintf>
  if (prev != NULL) {
 811bfee:	683b      	ldr	r3, [r7, #0]
 811bff0:	2b00      	cmp	r3, #0
 811bff2:	d00a      	beq.n	811c00a <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 811bff4:	683b      	ldr	r3, [r7, #0]
 811bff6:	681b      	ldr	r3, [r3, #0]
 811bff8:	687a      	ldr	r2, [r7, #4]
 811bffa:	429a      	cmp	r2, r3
 811bffc:	d005      	beq.n	811c00a <ip_reass_free_complete_datagram+0x3e>
 811bffe:	4b3e      	ldr	r3, [pc, #248]	@ (811c0f8 <ip_reass_free_complete_datagram+0x12c>)
 811c000:	22ad      	movs	r2, #173	@ 0xad
 811c002:	4940      	ldr	r1, [pc, #256]	@ (811c104 <ip_reass_free_complete_datagram+0x138>)
 811c004:	483e      	ldr	r0, [pc, #248]	@ (811c100 <ip_reass_free_complete_datagram+0x134>)
 811c006:	f00a fd35 	bl	8126a74 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 811c00a:	687b      	ldr	r3, [r7, #4]
 811c00c:	685b      	ldr	r3, [r3, #4]
 811c00e:	685b      	ldr	r3, [r3, #4]
 811c010:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 811c012:	697b      	ldr	r3, [r7, #20]
 811c014:	889b      	ldrh	r3, [r3, #4]
 811c016:	b29b      	uxth	r3, r3
 811c018:	2b00      	cmp	r3, #0
 811c01a:	d12a      	bne.n	811c072 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 811c01c:	687b      	ldr	r3, [r7, #4]
 811c01e:	685b      	ldr	r3, [r3, #4]
 811c020:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 811c022:	697b      	ldr	r3, [r7, #20]
 811c024:	681a      	ldr	r2, [r3, #0]
 811c026:	687b      	ldr	r3, [r7, #4]
 811c028:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 811c02a:	69bb      	ldr	r3, [r7, #24]
 811c02c:	6858      	ldr	r0, [r3, #4]
 811c02e:	687b      	ldr	r3, [r7, #4]
 811c030:	3308      	adds	r3, #8
 811c032:	2214      	movs	r2, #20
 811c034:	4619      	mov	r1, r3
 811c036:	f00a ff80 	bl	8126f3a <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 811c03a:	2101      	movs	r1, #1
 811c03c:	69b8      	ldr	r0, [r7, #24]
 811c03e:	f7ff f9af 	bl	811b3a0 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 811c042:	69b8      	ldr	r0, [r7, #24]
 811c044:	f002 f9f8 	bl	811e438 <pbuf_clen>
 811c048:	4603      	mov	r3, r0
 811c04a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 811c04c:	8bfa      	ldrh	r2, [r7, #30]
 811c04e:	8a7b      	ldrh	r3, [r7, #18]
 811c050:	4413      	add	r3, r2
 811c052:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 811c056:	db05      	blt.n	811c064 <ip_reass_free_complete_datagram+0x98>
 811c058:	4b27      	ldr	r3, [pc, #156]	@ (811c0f8 <ip_reass_free_complete_datagram+0x12c>)
 811c05a:	22bc      	movs	r2, #188	@ 0xbc
 811c05c:	492a      	ldr	r1, [pc, #168]	@ (811c108 <ip_reass_free_complete_datagram+0x13c>)
 811c05e:	4828      	ldr	r0, [pc, #160]	@ (811c100 <ip_reass_free_complete_datagram+0x134>)
 811c060:	f00a fd08 	bl	8126a74 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 811c064:	8bfa      	ldrh	r2, [r7, #30]
 811c066:	8a7b      	ldrh	r3, [r7, #18]
 811c068:	4413      	add	r3, r2
 811c06a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 811c06c:	69b8      	ldr	r0, [r7, #24]
 811c06e:	f002 f955 	bl	811e31c <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 811c072:	687b      	ldr	r3, [r7, #4]
 811c074:	685b      	ldr	r3, [r3, #4]
 811c076:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 811c078:	e01f      	b.n	811c0ba <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 811c07a:	69bb      	ldr	r3, [r7, #24]
 811c07c:	685b      	ldr	r3, [r3, #4]
 811c07e:	617b      	str	r3, [r7, #20]
    pcur = p;
 811c080:	69bb      	ldr	r3, [r7, #24]
 811c082:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 811c084:	697b      	ldr	r3, [r7, #20]
 811c086:	681b      	ldr	r3, [r3, #0]
 811c088:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 811c08a:	68f8      	ldr	r0, [r7, #12]
 811c08c:	f002 f9d4 	bl	811e438 <pbuf_clen>
 811c090:	4603      	mov	r3, r0
 811c092:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 811c094:	8bfa      	ldrh	r2, [r7, #30]
 811c096:	8a7b      	ldrh	r3, [r7, #18]
 811c098:	4413      	add	r3, r2
 811c09a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 811c09e:	db05      	blt.n	811c0ac <ip_reass_free_complete_datagram+0xe0>
 811c0a0:	4b15      	ldr	r3, [pc, #84]	@ (811c0f8 <ip_reass_free_complete_datagram+0x12c>)
 811c0a2:	22cc      	movs	r2, #204	@ 0xcc
 811c0a4:	4918      	ldr	r1, [pc, #96]	@ (811c108 <ip_reass_free_complete_datagram+0x13c>)
 811c0a6:	4816      	ldr	r0, [pc, #88]	@ (811c100 <ip_reass_free_complete_datagram+0x134>)
 811c0a8:	f00a fce4 	bl	8126a74 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 811c0ac:	8bfa      	ldrh	r2, [r7, #30]
 811c0ae:	8a7b      	ldrh	r3, [r7, #18]
 811c0b0:	4413      	add	r3, r2
 811c0b2:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 811c0b4:	68f8      	ldr	r0, [r7, #12]
 811c0b6:	f002 f931 	bl	811e31c <pbuf_free>
  while (p != NULL) {
 811c0ba:	69bb      	ldr	r3, [r7, #24]
 811c0bc:	2b00      	cmp	r3, #0
 811c0be:	d1dc      	bne.n	811c07a <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 811c0c0:	6839      	ldr	r1, [r7, #0]
 811c0c2:	6878      	ldr	r0, [r7, #4]
 811c0c4:	f000 f8c2 	bl	811c24c <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 811c0c8:	4b10      	ldr	r3, [pc, #64]	@ (811c10c <ip_reass_free_complete_datagram+0x140>)
 811c0ca:	881b      	ldrh	r3, [r3, #0]
 811c0cc:	8bfa      	ldrh	r2, [r7, #30]
 811c0ce:	429a      	cmp	r2, r3
 811c0d0:	d905      	bls.n	811c0de <ip_reass_free_complete_datagram+0x112>
 811c0d2:	4b09      	ldr	r3, [pc, #36]	@ (811c0f8 <ip_reass_free_complete_datagram+0x12c>)
 811c0d4:	22d2      	movs	r2, #210	@ 0xd2
 811c0d6:	490e      	ldr	r1, [pc, #56]	@ (811c110 <ip_reass_free_complete_datagram+0x144>)
 811c0d8:	4809      	ldr	r0, [pc, #36]	@ (811c100 <ip_reass_free_complete_datagram+0x134>)
 811c0da:	f00a fccb 	bl	8126a74 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 811c0de:	4b0b      	ldr	r3, [pc, #44]	@ (811c10c <ip_reass_free_complete_datagram+0x140>)
 811c0e0:	881a      	ldrh	r2, [r3, #0]
 811c0e2:	8bfb      	ldrh	r3, [r7, #30]
 811c0e4:	1ad3      	subs	r3, r2, r3
 811c0e6:	b29a      	uxth	r2, r3
 811c0e8:	4b08      	ldr	r3, [pc, #32]	@ (811c10c <ip_reass_free_complete_datagram+0x140>)
 811c0ea:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 811c0ec:	8bfb      	ldrh	r3, [r7, #30]
}
 811c0ee:	4618      	mov	r0, r3
 811c0f0:	3720      	adds	r7, #32
 811c0f2:	46bd      	mov	sp, r7
 811c0f4:	bd80      	pop	{r7, pc}
 811c0f6:	bf00      	nop
 811c0f8:	08128484 	.word	0x08128484
 811c0fc:	08128500 	.word	0x08128500
 811c100:	0812850c 	.word	0x0812850c
 811c104:	08128534 	.word	0x08128534
 811c108:	08128548 	.word	0x08128548
 811c10c:	1000b3a4 	.word	0x1000b3a4
 811c110:	08128568 	.word	0x08128568

0811c114 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 811c114:	b580      	push	{r7, lr}
 811c116:	b08a      	sub	sp, #40	@ 0x28
 811c118:	af00      	add	r7, sp, #0
 811c11a:	6078      	str	r0, [r7, #4]
 811c11c:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 811c11e:	2300      	movs	r3, #0
 811c120:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 811c122:	2300      	movs	r3, #0
 811c124:	623b      	str	r3, [r7, #32]
    prev = NULL;
 811c126:	2300      	movs	r3, #0
 811c128:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 811c12a:	2300      	movs	r3, #0
 811c12c:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 811c12e:	2300      	movs	r3, #0
 811c130:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 811c132:	4b28      	ldr	r3, [pc, #160]	@ (811c1d4 <ip_reass_remove_oldest_datagram+0xc0>)
 811c134:	681b      	ldr	r3, [r3, #0]
 811c136:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 811c138:	e030      	b.n	811c19c <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 811c13a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811c13c:	695a      	ldr	r2, [r3, #20]
 811c13e:	687b      	ldr	r3, [r7, #4]
 811c140:	68db      	ldr	r3, [r3, #12]
 811c142:	429a      	cmp	r2, r3
 811c144:	d10c      	bne.n	811c160 <ip_reass_remove_oldest_datagram+0x4c>
 811c146:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811c148:	699a      	ldr	r2, [r3, #24]
 811c14a:	687b      	ldr	r3, [r7, #4]
 811c14c:	691b      	ldr	r3, [r3, #16]
 811c14e:	429a      	cmp	r2, r3
 811c150:	d106      	bne.n	811c160 <ip_reass_remove_oldest_datagram+0x4c>
 811c152:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811c154:	899a      	ldrh	r2, [r3, #12]
 811c156:	687b      	ldr	r3, [r7, #4]
 811c158:	889b      	ldrh	r3, [r3, #4]
 811c15a:	b29b      	uxth	r3, r3
 811c15c:	429a      	cmp	r2, r3
 811c15e:	d014      	beq.n	811c18a <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 811c160:	693b      	ldr	r3, [r7, #16]
 811c162:	3301      	adds	r3, #1
 811c164:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 811c166:	6a3b      	ldr	r3, [r7, #32]
 811c168:	2b00      	cmp	r3, #0
 811c16a:	d104      	bne.n	811c176 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 811c16c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811c16e:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 811c170:	69fb      	ldr	r3, [r7, #28]
 811c172:	61bb      	str	r3, [r7, #24]
 811c174:	e009      	b.n	811c18a <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 811c176:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811c178:	7fda      	ldrb	r2, [r3, #31]
 811c17a:	6a3b      	ldr	r3, [r7, #32]
 811c17c:	7fdb      	ldrb	r3, [r3, #31]
 811c17e:	429a      	cmp	r2, r3
 811c180:	d803      	bhi.n	811c18a <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 811c182:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811c184:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 811c186:	69fb      	ldr	r3, [r7, #28]
 811c188:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 811c18a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811c18c:	681b      	ldr	r3, [r3, #0]
 811c18e:	2b00      	cmp	r3, #0
 811c190:	d001      	beq.n	811c196 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 811c192:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811c194:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 811c196:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811c198:	681b      	ldr	r3, [r3, #0]
 811c19a:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 811c19c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811c19e:	2b00      	cmp	r3, #0
 811c1a0:	d1cb      	bne.n	811c13a <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 811c1a2:	6a3b      	ldr	r3, [r7, #32]
 811c1a4:	2b00      	cmp	r3, #0
 811c1a6:	d008      	beq.n	811c1ba <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 811c1a8:	69b9      	ldr	r1, [r7, #24]
 811c1aa:	6a38      	ldr	r0, [r7, #32]
 811c1ac:	f7ff ff0e 	bl	811bfcc <ip_reass_free_complete_datagram>
 811c1b0:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 811c1b2:	697a      	ldr	r2, [r7, #20]
 811c1b4:	68fb      	ldr	r3, [r7, #12]
 811c1b6:	4413      	add	r3, r2
 811c1b8:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 811c1ba:	697a      	ldr	r2, [r7, #20]
 811c1bc:	683b      	ldr	r3, [r7, #0]
 811c1be:	429a      	cmp	r2, r3
 811c1c0:	da02      	bge.n	811c1c8 <ip_reass_remove_oldest_datagram+0xb4>
 811c1c2:	693b      	ldr	r3, [r7, #16]
 811c1c4:	2b01      	cmp	r3, #1
 811c1c6:	dcac      	bgt.n	811c122 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 811c1c8:	697b      	ldr	r3, [r7, #20]
}
 811c1ca:	4618      	mov	r0, r3
 811c1cc:	3728      	adds	r7, #40	@ 0x28
 811c1ce:	46bd      	mov	sp, r7
 811c1d0:	bd80      	pop	{r7, pc}
 811c1d2:	bf00      	nop
 811c1d4:	1000b3a0 	.word	0x1000b3a0

0811c1d8 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 811c1d8:	b580      	push	{r7, lr}
 811c1da:	b084      	sub	sp, #16
 811c1dc:	af00      	add	r7, sp, #0
 811c1de:	6078      	str	r0, [r7, #4]
 811c1e0:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 811c1e2:	2004      	movs	r0, #4
 811c1e4:	f001 f982 	bl	811d4ec <memp_malloc>
 811c1e8:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 811c1ea:	68fb      	ldr	r3, [r7, #12]
 811c1ec:	2b00      	cmp	r3, #0
 811c1ee:	d110      	bne.n	811c212 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 811c1f0:	6839      	ldr	r1, [r7, #0]
 811c1f2:	6878      	ldr	r0, [r7, #4]
 811c1f4:	f7ff ff8e 	bl	811c114 <ip_reass_remove_oldest_datagram>
 811c1f8:	4602      	mov	r2, r0
 811c1fa:	683b      	ldr	r3, [r7, #0]
 811c1fc:	4293      	cmp	r3, r2
 811c1fe:	dc03      	bgt.n	811c208 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 811c200:	2004      	movs	r0, #4
 811c202:	f001 f973 	bl	811d4ec <memp_malloc>
 811c206:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 811c208:	68fb      	ldr	r3, [r7, #12]
 811c20a:	2b00      	cmp	r3, #0
 811c20c:	d101      	bne.n	811c212 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 811c20e:	2300      	movs	r3, #0
 811c210:	e016      	b.n	811c240 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 811c212:	2220      	movs	r2, #32
 811c214:	2100      	movs	r1, #0
 811c216:	68f8      	ldr	r0, [r7, #12]
 811c218:	f00a fd40 	bl	8126c9c <memset>
  ipr->timer = IP_REASS_MAXAGE;
 811c21c:	68fb      	ldr	r3, [r7, #12]
 811c21e:	220f      	movs	r2, #15
 811c220:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 811c222:	4b09      	ldr	r3, [pc, #36]	@ (811c248 <ip_reass_enqueue_new_datagram+0x70>)
 811c224:	681a      	ldr	r2, [r3, #0]
 811c226:	68fb      	ldr	r3, [r7, #12]
 811c228:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 811c22a:	4a07      	ldr	r2, [pc, #28]	@ (811c248 <ip_reass_enqueue_new_datagram+0x70>)
 811c22c:	68fb      	ldr	r3, [r7, #12]
 811c22e:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 811c230:	68fb      	ldr	r3, [r7, #12]
 811c232:	3308      	adds	r3, #8
 811c234:	2214      	movs	r2, #20
 811c236:	6879      	ldr	r1, [r7, #4]
 811c238:	4618      	mov	r0, r3
 811c23a:	f00a fe7e 	bl	8126f3a <memcpy>
  return ipr;
 811c23e:	68fb      	ldr	r3, [r7, #12]
}
 811c240:	4618      	mov	r0, r3
 811c242:	3710      	adds	r7, #16
 811c244:	46bd      	mov	sp, r7
 811c246:	bd80      	pop	{r7, pc}
 811c248:	1000b3a0 	.word	0x1000b3a0

0811c24c <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 811c24c:	b580      	push	{r7, lr}
 811c24e:	b082      	sub	sp, #8
 811c250:	af00      	add	r7, sp, #0
 811c252:	6078      	str	r0, [r7, #4]
 811c254:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 811c256:	4b10      	ldr	r3, [pc, #64]	@ (811c298 <ip_reass_dequeue_datagram+0x4c>)
 811c258:	681b      	ldr	r3, [r3, #0]
 811c25a:	687a      	ldr	r2, [r7, #4]
 811c25c:	429a      	cmp	r2, r3
 811c25e:	d104      	bne.n	811c26a <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 811c260:	687b      	ldr	r3, [r7, #4]
 811c262:	681b      	ldr	r3, [r3, #0]
 811c264:	4a0c      	ldr	r2, [pc, #48]	@ (811c298 <ip_reass_dequeue_datagram+0x4c>)
 811c266:	6013      	str	r3, [r2, #0]
 811c268:	e00d      	b.n	811c286 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 811c26a:	683b      	ldr	r3, [r7, #0]
 811c26c:	2b00      	cmp	r3, #0
 811c26e:	d106      	bne.n	811c27e <ip_reass_dequeue_datagram+0x32>
 811c270:	4b0a      	ldr	r3, [pc, #40]	@ (811c29c <ip_reass_dequeue_datagram+0x50>)
 811c272:	f240 1245 	movw	r2, #325	@ 0x145
 811c276:	490a      	ldr	r1, [pc, #40]	@ (811c2a0 <ip_reass_dequeue_datagram+0x54>)
 811c278:	480a      	ldr	r0, [pc, #40]	@ (811c2a4 <ip_reass_dequeue_datagram+0x58>)
 811c27a:	f00a fbfb 	bl	8126a74 <iprintf>
    prev->next = ipr->next;
 811c27e:	687b      	ldr	r3, [r7, #4]
 811c280:	681a      	ldr	r2, [r3, #0]
 811c282:	683b      	ldr	r3, [r7, #0]
 811c284:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 811c286:	6879      	ldr	r1, [r7, #4]
 811c288:	2004      	movs	r0, #4
 811c28a:	f001 f9a5 	bl	811d5d8 <memp_free>
}
 811c28e:	bf00      	nop
 811c290:	3708      	adds	r7, #8
 811c292:	46bd      	mov	sp, r7
 811c294:	bd80      	pop	{r7, pc}
 811c296:	bf00      	nop
 811c298:	1000b3a0 	.word	0x1000b3a0
 811c29c:	08128484 	.word	0x08128484
 811c2a0:	0812858c 	.word	0x0812858c
 811c2a4:	0812850c 	.word	0x0812850c

0811c2a8 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 811c2a8:	b580      	push	{r7, lr}
 811c2aa:	b08c      	sub	sp, #48	@ 0x30
 811c2ac:	af00      	add	r7, sp, #0
 811c2ae:	60f8      	str	r0, [r7, #12]
 811c2b0:	60b9      	str	r1, [r7, #8]
 811c2b2:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 811c2b4:	2300      	movs	r3, #0
 811c2b6:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 811c2b8:	2301      	movs	r3, #1
 811c2ba:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 811c2bc:	68bb      	ldr	r3, [r7, #8]
 811c2be:	685b      	ldr	r3, [r3, #4]
 811c2c0:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 811c2c2:	69fb      	ldr	r3, [r7, #28]
 811c2c4:	885b      	ldrh	r3, [r3, #2]
 811c2c6:	b29b      	uxth	r3, r3
 811c2c8:	4618      	mov	r0, r3
 811c2ca:	f7fd fe1f 	bl	8119f0c <lwip_htons>
 811c2ce:	4603      	mov	r3, r0
 811c2d0:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 811c2d2:	69fb      	ldr	r3, [r7, #28]
 811c2d4:	781b      	ldrb	r3, [r3, #0]
 811c2d6:	f003 030f 	and.w	r3, r3, #15
 811c2da:	b2db      	uxtb	r3, r3
 811c2dc:	009b      	lsls	r3, r3, #2
 811c2de:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 811c2e0:	7e7b      	ldrb	r3, [r7, #25]
 811c2e2:	b29b      	uxth	r3, r3
 811c2e4:	8b7a      	ldrh	r2, [r7, #26]
 811c2e6:	429a      	cmp	r2, r3
 811c2e8:	d202      	bcs.n	811c2f0 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 811c2ea:	f04f 33ff 	mov.w	r3, #4294967295
 811c2ee:	e135      	b.n	811c55c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 811c2f0:	7e7b      	ldrb	r3, [r7, #25]
 811c2f2:	b29b      	uxth	r3, r3
 811c2f4:	8b7a      	ldrh	r2, [r7, #26]
 811c2f6:	1ad3      	subs	r3, r2, r3
 811c2f8:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 811c2fa:	69fb      	ldr	r3, [r7, #28]
 811c2fc:	88db      	ldrh	r3, [r3, #6]
 811c2fe:	b29b      	uxth	r3, r3
 811c300:	4618      	mov	r0, r3
 811c302:	f7fd fe03 	bl	8119f0c <lwip_htons>
 811c306:	4603      	mov	r3, r0
 811c308:	f3c3 030c 	ubfx	r3, r3, #0, #13
 811c30c:	b29b      	uxth	r3, r3
 811c30e:	00db      	lsls	r3, r3, #3
 811c310:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 811c312:	68bb      	ldr	r3, [r7, #8]
 811c314:	685b      	ldr	r3, [r3, #4]
 811c316:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 811c318:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811c31a:	2200      	movs	r2, #0
 811c31c:	701a      	strb	r2, [r3, #0]
 811c31e:	2200      	movs	r2, #0
 811c320:	705a      	strb	r2, [r3, #1]
 811c322:	2200      	movs	r2, #0
 811c324:	709a      	strb	r2, [r3, #2]
 811c326:	2200      	movs	r2, #0
 811c328:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 811c32a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811c32c:	8afa      	ldrh	r2, [r7, #22]
 811c32e:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 811c330:	8afa      	ldrh	r2, [r7, #22]
 811c332:	8b7b      	ldrh	r3, [r7, #26]
 811c334:	4413      	add	r3, r2
 811c336:	b29a      	uxth	r2, r3
 811c338:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811c33a:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 811c33c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811c33e:	88db      	ldrh	r3, [r3, #6]
 811c340:	b29b      	uxth	r3, r3
 811c342:	8afa      	ldrh	r2, [r7, #22]
 811c344:	429a      	cmp	r2, r3
 811c346:	d902      	bls.n	811c34e <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 811c348:	f04f 33ff 	mov.w	r3, #4294967295
 811c34c:	e106      	b.n	811c55c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 811c34e:	68fb      	ldr	r3, [r7, #12]
 811c350:	685b      	ldr	r3, [r3, #4]
 811c352:	627b      	str	r3, [r7, #36]	@ 0x24
 811c354:	e068      	b.n	811c428 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 811c356:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811c358:	685b      	ldr	r3, [r3, #4]
 811c35a:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 811c35c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811c35e:	889b      	ldrh	r3, [r3, #4]
 811c360:	b29a      	uxth	r2, r3
 811c362:	693b      	ldr	r3, [r7, #16]
 811c364:	889b      	ldrh	r3, [r3, #4]
 811c366:	b29b      	uxth	r3, r3
 811c368:	429a      	cmp	r2, r3
 811c36a:	d235      	bcs.n	811c3d8 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 811c36c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811c36e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 811c370:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 811c372:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 811c374:	2b00      	cmp	r3, #0
 811c376:	d020      	beq.n	811c3ba <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 811c378:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811c37a:	889b      	ldrh	r3, [r3, #4]
 811c37c:	b29a      	uxth	r2, r3
 811c37e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 811c380:	88db      	ldrh	r3, [r3, #6]
 811c382:	b29b      	uxth	r3, r3
 811c384:	429a      	cmp	r2, r3
 811c386:	d307      	bcc.n	811c398 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 811c388:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811c38a:	88db      	ldrh	r3, [r3, #6]
 811c38c:	b29a      	uxth	r2, r3
 811c38e:	693b      	ldr	r3, [r7, #16]
 811c390:	889b      	ldrh	r3, [r3, #4]
 811c392:	b29b      	uxth	r3, r3
 811c394:	429a      	cmp	r2, r3
 811c396:	d902      	bls.n	811c39e <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 811c398:	f04f 33ff 	mov.w	r3, #4294967295
 811c39c:	e0de      	b.n	811c55c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 811c39e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 811c3a0:	68ba      	ldr	r2, [r7, #8]
 811c3a2:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 811c3a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 811c3a6:	88db      	ldrh	r3, [r3, #6]
 811c3a8:	b29a      	uxth	r2, r3
 811c3aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811c3ac:	889b      	ldrh	r3, [r3, #4]
 811c3ae:	b29b      	uxth	r3, r3
 811c3b0:	429a      	cmp	r2, r3
 811c3b2:	d03d      	beq.n	811c430 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 811c3b4:	2300      	movs	r3, #0
 811c3b6:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 811c3b8:	e03a      	b.n	811c430 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 811c3ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811c3bc:	88db      	ldrh	r3, [r3, #6]
 811c3be:	b29a      	uxth	r2, r3
 811c3c0:	693b      	ldr	r3, [r7, #16]
 811c3c2:	889b      	ldrh	r3, [r3, #4]
 811c3c4:	b29b      	uxth	r3, r3
 811c3c6:	429a      	cmp	r2, r3
 811c3c8:	d902      	bls.n	811c3d0 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 811c3ca:	f04f 33ff 	mov.w	r3, #4294967295
 811c3ce:	e0c5      	b.n	811c55c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 811c3d0:	68fb      	ldr	r3, [r7, #12]
 811c3d2:	68ba      	ldr	r2, [r7, #8]
 811c3d4:	605a      	str	r2, [r3, #4]
      break;
 811c3d6:	e02b      	b.n	811c430 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 811c3d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811c3da:	889b      	ldrh	r3, [r3, #4]
 811c3dc:	b29a      	uxth	r2, r3
 811c3de:	693b      	ldr	r3, [r7, #16]
 811c3e0:	889b      	ldrh	r3, [r3, #4]
 811c3e2:	b29b      	uxth	r3, r3
 811c3e4:	429a      	cmp	r2, r3
 811c3e6:	d102      	bne.n	811c3ee <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 811c3e8:	f04f 33ff 	mov.w	r3, #4294967295
 811c3ec:	e0b6      	b.n	811c55c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 811c3ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811c3f0:	889b      	ldrh	r3, [r3, #4]
 811c3f2:	b29a      	uxth	r2, r3
 811c3f4:	693b      	ldr	r3, [r7, #16]
 811c3f6:	88db      	ldrh	r3, [r3, #6]
 811c3f8:	b29b      	uxth	r3, r3
 811c3fa:	429a      	cmp	r2, r3
 811c3fc:	d202      	bcs.n	811c404 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 811c3fe:	f04f 33ff 	mov.w	r3, #4294967295
 811c402:	e0ab      	b.n	811c55c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 811c404:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 811c406:	2b00      	cmp	r3, #0
 811c408:	d009      	beq.n	811c41e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 811c40a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 811c40c:	88db      	ldrh	r3, [r3, #6]
 811c40e:	b29a      	uxth	r2, r3
 811c410:	693b      	ldr	r3, [r7, #16]
 811c412:	889b      	ldrh	r3, [r3, #4]
 811c414:	b29b      	uxth	r3, r3
 811c416:	429a      	cmp	r2, r3
 811c418:	d001      	beq.n	811c41e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 811c41a:	2300      	movs	r3, #0
 811c41c:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 811c41e:	693b      	ldr	r3, [r7, #16]
 811c420:	681b      	ldr	r3, [r3, #0]
 811c422:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 811c424:	693b      	ldr	r3, [r7, #16]
 811c426:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 811c428:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811c42a:	2b00      	cmp	r3, #0
 811c42c:	d193      	bne.n	811c356 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 811c42e:	e000      	b.n	811c432 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 811c430:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 811c432:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811c434:	2b00      	cmp	r3, #0
 811c436:	d12d      	bne.n	811c494 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 811c438:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 811c43a:	2b00      	cmp	r3, #0
 811c43c:	d01c      	beq.n	811c478 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 811c43e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 811c440:	88db      	ldrh	r3, [r3, #6]
 811c442:	b29a      	uxth	r2, r3
 811c444:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811c446:	889b      	ldrh	r3, [r3, #4]
 811c448:	b29b      	uxth	r3, r3
 811c44a:	429a      	cmp	r2, r3
 811c44c:	d906      	bls.n	811c45c <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 811c44e:	4b45      	ldr	r3, [pc, #276]	@ (811c564 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 811c450:	f44f 72db 	mov.w	r2, #438	@ 0x1b6
 811c454:	4944      	ldr	r1, [pc, #272]	@ (811c568 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 811c456:	4845      	ldr	r0, [pc, #276]	@ (811c56c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 811c458:	f00a fb0c 	bl	8126a74 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 811c45c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 811c45e:	68ba      	ldr	r2, [r7, #8]
 811c460:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 811c462:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 811c464:	88db      	ldrh	r3, [r3, #6]
 811c466:	b29a      	uxth	r2, r3
 811c468:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811c46a:	889b      	ldrh	r3, [r3, #4]
 811c46c:	b29b      	uxth	r3, r3
 811c46e:	429a      	cmp	r2, r3
 811c470:	d010      	beq.n	811c494 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 811c472:	2300      	movs	r3, #0
 811c474:	623b      	str	r3, [r7, #32]
 811c476:	e00d      	b.n	811c494 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 811c478:	68fb      	ldr	r3, [r7, #12]
 811c47a:	685b      	ldr	r3, [r3, #4]
 811c47c:	2b00      	cmp	r3, #0
 811c47e:	d006      	beq.n	811c48e <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 811c480:	4b38      	ldr	r3, [pc, #224]	@ (811c564 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 811c482:	f44f 72df 	mov.w	r2, #446	@ 0x1be
 811c486:	493a      	ldr	r1, [pc, #232]	@ (811c570 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 811c488:	4838      	ldr	r0, [pc, #224]	@ (811c56c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 811c48a:	f00a faf3 	bl	8126a74 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 811c48e:	68fb      	ldr	r3, [r7, #12]
 811c490:	68ba      	ldr	r2, [r7, #8]
 811c492:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 811c494:	687b      	ldr	r3, [r7, #4]
 811c496:	2b00      	cmp	r3, #0
 811c498:	d105      	bne.n	811c4a6 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 811c49a:	68fb      	ldr	r3, [r7, #12]
 811c49c:	7f9b      	ldrb	r3, [r3, #30]
 811c49e:	f003 0301 	and.w	r3, r3, #1
 811c4a2:	2b00      	cmp	r3, #0
 811c4a4:	d059      	beq.n	811c55a <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 811c4a6:	6a3b      	ldr	r3, [r7, #32]
 811c4a8:	2b00      	cmp	r3, #0
 811c4aa:	d04f      	beq.n	811c54c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 811c4ac:	68fb      	ldr	r3, [r7, #12]
 811c4ae:	685b      	ldr	r3, [r3, #4]
 811c4b0:	2b00      	cmp	r3, #0
 811c4b2:	d006      	beq.n	811c4c2 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 811c4b4:	68fb      	ldr	r3, [r7, #12]
 811c4b6:	685b      	ldr	r3, [r3, #4]
 811c4b8:	685b      	ldr	r3, [r3, #4]
 811c4ba:	889b      	ldrh	r3, [r3, #4]
 811c4bc:	b29b      	uxth	r3, r3
 811c4be:	2b00      	cmp	r3, #0
 811c4c0:	d002      	beq.n	811c4c8 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 811c4c2:	2300      	movs	r3, #0
 811c4c4:	623b      	str	r3, [r7, #32]
 811c4c6:	e041      	b.n	811c54c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 811c4c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811c4ca:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 811c4cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811c4ce:	681b      	ldr	r3, [r3, #0]
 811c4d0:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 811c4d2:	e012      	b.n	811c4fa <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 811c4d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811c4d6:	685b      	ldr	r3, [r3, #4]
 811c4d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 811c4da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 811c4dc:	88db      	ldrh	r3, [r3, #6]
 811c4de:	b29a      	uxth	r2, r3
 811c4e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811c4e2:	889b      	ldrh	r3, [r3, #4]
 811c4e4:	b29b      	uxth	r3, r3
 811c4e6:	429a      	cmp	r2, r3
 811c4e8:	d002      	beq.n	811c4f0 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 811c4ea:	2300      	movs	r3, #0
 811c4ec:	623b      	str	r3, [r7, #32]
            break;
 811c4ee:	e007      	b.n	811c500 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 811c4f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811c4f2:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 811c4f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811c4f6:	681b      	ldr	r3, [r3, #0]
 811c4f8:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 811c4fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811c4fc:	2b00      	cmp	r3, #0
 811c4fe:	d1e9      	bne.n	811c4d4 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 811c500:	6a3b      	ldr	r3, [r7, #32]
 811c502:	2b00      	cmp	r3, #0
 811c504:	d022      	beq.n	811c54c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 811c506:	68fb      	ldr	r3, [r7, #12]
 811c508:	685b      	ldr	r3, [r3, #4]
 811c50a:	2b00      	cmp	r3, #0
 811c50c:	d106      	bne.n	811c51c <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 811c50e:	4b15      	ldr	r3, [pc, #84]	@ (811c564 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 811c510:	f240 12df 	movw	r2, #479	@ 0x1df
 811c514:	4917      	ldr	r1, [pc, #92]	@ (811c574 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 811c516:	4815      	ldr	r0, [pc, #84]	@ (811c56c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 811c518:	f00a faac 	bl	8126a74 <iprintf>
          LWIP_ASSERT("sanity check",
 811c51c:	68fb      	ldr	r3, [r7, #12]
 811c51e:	685b      	ldr	r3, [r3, #4]
 811c520:	685b      	ldr	r3, [r3, #4]
 811c522:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 811c524:	429a      	cmp	r2, r3
 811c526:	d106      	bne.n	811c536 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 811c528:	4b0e      	ldr	r3, [pc, #56]	@ (811c564 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 811c52a:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 811c52e:	4911      	ldr	r1, [pc, #68]	@ (811c574 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 811c530:	480e      	ldr	r0, [pc, #56]	@ (811c56c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 811c532:	f00a fa9f 	bl	8126a74 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 811c536:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811c538:	681b      	ldr	r3, [r3, #0]
 811c53a:	2b00      	cmp	r3, #0
 811c53c:	d006      	beq.n	811c54c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 811c53e:	4b09      	ldr	r3, [pc, #36]	@ (811c564 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 811c540:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 811c544:	490c      	ldr	r1, [pc, #48]	@ (811c578 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 811c546:	4809      	ldr	r0, [pc, #36]	@ (811c56c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 811c548:	f00a fa94 	bl	8126a74 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 811c54c:	6a3b      	ldr	r3, [r7, #32]
 811c54e:	2b00      	cmp	r3, #0
 811c550:	bf14      	ite	ne
 811c552:	2301      	movne	r3, #1
 811c554:	2300      	moveq	r3, #0
 811c556:	b2db      	uxtb	r3, r3
 811c558:	e000      	b.n	811c55c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 811c55a:	2300      	movs	r3, #0
}
 811c55c:	4618      	mov	r0, r3
 811c55e:	3730      	adds	r7, #48	@ 0x30
 811c560:	46bd      	mov	sp, r7
 811c562:	bd80      	pop	{r7, pc}
 811c564:	08128484 	.word	0x08128484
 811c568:	081285a8 	.word	0x081285a8
 811c56c:	0812850c 	.word	0x0812850c
 811c570:	081285c8 	.word	0x081285c8
 811c574:	08128600 	.word	0x08128600
 811c578:	08128610 	.word	0x08128610

0811c57c <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 811c57c:	b580      	push	{r7, lr}
 811c57e:	b08e      	sub	sp, #56	@ 0x38
 811c580:	af00      	add	r7, sp, #0
 811c582:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 811c584:	687b      	ldr	r3, [r7, #4]
 811c586:	685b      	ldr	r3, [r3, #4]
 811c588:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 811c58a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 811c58c:	781b      	ldrb	r3, [r3, #0]
 811c58e:	f003 030f 	and.w	r3, r3, #15
 811c592:	b2db      	uxtb	r3, r3
 811c594:	009b      	lsls	r3, r3, #2
 811c596:	b2db      	uxtb	r3, r3
 811c598:	2b14      	cmp	r3, #20
 811c59a:	f040 8171 	bne.w	811c880 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 811c59e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 811c5a0:	88db      	ldrh	r3, [r3, #6]
 811c5a2:	b29b      	uxth	r3, r3
 811c5a4:	4618      	mov	r0, r3
 811c5a6:	f7fd fcb1 	bl	8119f0c <lwip_htons>
 811c5aa:	4603      	mov	r3, r0
 811c5ac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 811c5b0:	b29b      	uxth	r3, r3
 811c5b2:	00db      	lsls	r3, r3, #3
 811c5b4:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 811c5b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 811c5b8:	885b      	ldrh	r3, [r3, #2]
 811c5ba:	b29b      	uxth	r3, r3
 811c5bc:	4618      	mov	r0, r3
 811c5be:	f7fd fca5 	bl	8119f0c <lwip_htons>
 811c5c2:	4603      	mov	r3, r0
 811c5c4:	84bb      	strh	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 811c5c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 811c5c8:	781b      	ldrb	r3, [r3, #0]
 811c5ca:	f003 030f 	and.w	r3, r3, #15
 811c5ce:	b2db      	uxtb	r3, r3
 811c5d0:	009b      	lsls	r3, r3, #2
 811c5d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (hlen > len) {
 811c5d6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 811c5da:	b29b      	uxth	r3, r3
 811c5dc:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 811c5de:	429a      	cmp	r2, r3
 811c5e0:	f0c0 8150 	bcc.w	811c884 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 811c5e4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 811c5e8:	b29b      	uxth	r3, r3
 811c5ea:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 811c5ec:	1ad3      	subs	r3, r2, r3
 811c5ee:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 811c5f0:	6878      	ldr	r0, [r7, #4]
 811c5f2:	f001 ff21 	bl	811e438 <pbuf_clen>
 811c5f6:	4603      	mov	r3, r0
 811c5f8:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 811c5fa:	4b8c      	ldr	r3, [pc, #560]	@ (811c82c <ip4_reass+0x2b0>)
 811c5fc:	881b      	ldrh	r3, [r3, #0]
 811c5fe:	461a      	mov	r2, r3
 811c600:	8c3b      	ldrh	r3, [r7, #32]
 811c602:	4413      	add	r3, r2
 811c604:	2b0a      	cmp	r3, #10
 811c606:	dd10      	ble.n	811c62a <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 811c608:	8c3b      	ldrh	r3, [r7, #32]
 811c60a:	4619      	mov	r1, r3
 811c60c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 811c60e:	f7ff fd81 	bl	811c114 <ip_reass_remove_oldest_datagram>
 811c612:	4603      	mov	r3, r0
 811c614:	2b00      	cmp	r3, #0
 811c616:	f000 8137 	beq.w	811c888 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 811c61a:	4b84      	ldr	r3, [pc, #528]	@ (811c82c <ip4_reass+0x2b0>)
 811c61c:	881b      	ldrh	r3, [r3, #0]
 811c61e:	461a      	mov	r2, r3
 811c620:	8c3b      	ldrh	r3, [r7, #32]
 811c622:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 811c624:	2b0a      	cmp	r3, #10
 811c626:	f300 812f 	bgt.w	811c888 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 811c62a:	4b81      	ldr	r3, [pc, #516]	@ (811c830 <ip4_reass+0x2b4>)
 811c62c:	681b      	ldr	r3, [r3, #0]
 811c62e:	633b      	str	r3, [r7, #48]	@ 0x30
 811c630:	e015      	b.n	811c65e <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 811c632:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811c634:	695a      	ldr	r2, [r3, #20]
 811c636:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 811c638:	68db      	ldr	r3, [r3, #12]
 811c63a:	429a      	cmp	r2, r3
 811c63c:	d10c      	bne.n	811c658 <ip4_reass+0xdc>
 811c63e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811c640:	699a      	ldr	r2, [r3, #24]
 811c642:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 811c644:	691b      	ldr	r3, [r3, #16]
 811c646:	429a      	cmp	r2, r3
 811c648:	d106      	bne.n	811c658 <ip4_reass+0xdc>
 811c64a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811c64c:	899a      	ldrh	r2, [r3, #12]
 811c64e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 811c650:	889b      	ldrh	r3, [r3, #4]
 811c652:	b29b      	uxth	r3, r3
 811c654:	429a      	cmp	r2, r3
 811c656:	d006      	beq.n	811c666 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 811c658:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811c65a:	681b      	ldr	r3, [r3, #0]
 811c65c:	633b      	str	r3, [r7, #48]	@ 0x30
 811c65e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811c660:	2b00      	cmp	r3, #0
 811c662:	d1e6      	bne.n	811c632 <ip4_reass+0xb6>
 811c664:	e000      	b.n	811c668 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 811c666:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 811c668:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811c66a:	2b00      	cmp	r3, #0
 811c66c:	d109      	bne.n	811c682 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 811c66e:	8c3b      	ldrh	r3, [r7, #32]
 811c670:	4619      	mov	r1, r3
 811c672:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 811c674:	f7ff fdb0 	bl	811c1d8 <ip_reass_enqueue_new_datagram>
 811c678:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 811c67a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811c67c:	2b00      	cmp	r3, #0
 811c67e:	d11c      	bne.n	811c6ba <ip4_reass+0x13e>
      goto nullreturn;
 811c680:	e105      	b.n	811c88e <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 811c682:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 811c684:	88db      	ldrh	r3, [r3, #6]
 811c686:	b29b      	uxth	r3, r3
 811c688:	4618      	mov	r0, r3
 811c68a:	f7fd fc3f 	bl	8119f0c <lwip_htons>
 811c68e:	4603      	mov	r3, r0
 811c690:	f3c3 030c 	ubfx	r3, r3, #0, #13
 811c694:	2b00      	cmp	r3, #0
 811c696:	d110      	bne.n	811c6ba <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 811c698:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811c69a:	89db      	ldrh	r3, [r3, #14]
 811c69c:	4618      	mov	r0, r3
 811c69e:	f7fd fc35 	bl	8119f0c <lwip_htons>
 811c6a2:	4603      	mov	r3, r0
 811c6a4:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 811c6a8:	2b00      	cmp	r3, #0
 811c6aa:	d006      	beq.n	811c6ba <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 811c6ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811c6ae:	3308      	adds	r3, #8
 811c6b0:	2214      	movs	r2, #20
 811c6b2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 811c6b4:	4618      	mov	r0, r3
 811c6b6:	f00a fc40 	bl	8126f3a <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 811c6ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 811c6bc:	88db      	ldrh	r3, [r3, #6]
 811c6be:	b29b      	uxth	r3, r3
 811c6c0:	f003 0320 	and.w	r3, r3, #32
 811c6c4:	2b00      	cmp	r3, #0
 811c6c6:	bf0c      	ite	eq
 811c6c8:	2301      	moveq	r3, #1
 811c6ca:	2300      	movne	r3, #0
 811c6cc:	b2db      	uxtb	r3, r3
 811c6ce:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 811c6d0:	69fb      	ldr	r3, [r7, #28]
 811c6d2:	2b00      	cmp	r3, #0
 811c6d4:	d00e      	beq.n	811c6f4 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 811c6d6:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 811c6d8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 811c6da:	4413      	add	r3, r2
 811c6dc:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 811c6de:	8b7a      	ldrh	r2, [r7, #26]
 811c6e0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 811c6e2:	429a      	cmp	r2, r3
 811c6e4:	f0c0 80a0 	bcc.w	811c828 <ip4_reass+0x2ac>
 811c6e8:	8b7b      	ldrh	r3, [r7, #26]
 811c6ea:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 811c6ee:	4293      	cmp	r3, r2
 811c6f0:	f200 809a 	bhi.w	811c828 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 811c6f4:	69fa      	ldr	r2, [r7, #28]
 811c6f6:	6879      	ldr	r1, [r7, #4]
 811c6f8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 811c6fa:	f7ff fdd5 	bl	811c2a8 <ip_reass_chain_frag_into_datagram_and_validate>
 811c6fe:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 811c700:	697b      	ldr	r3, [r7, #20]
 811c702:	f1b3 3fff 	cmp.w	r3, #4294967295
 811c706:	f000 809b 	beq.w	811c840 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 811c70a:	4b48      	ldr	r3, [pc, #288]	@ (811c82c <ip4_reass+0x2b0>)
 811c70c:	881a      	ldrh	r2, [r3, #0]
 811c70e:	8c3b      	ldrh	r3, [r7, #32]
 811c710:	4413      	add	r3, r2
 811c712:	b29a      	uxth	r2, r3
 811c714:	4b45      	ldr	r3, [pc, #276]	@ (811c82c <ip4_reass+0x2b0>)
 811c716:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 811c718:	69fb      	ldr	r3, [r7, #28]
 811c71a:	2b00      	cmp	r3, #0
 811c71c:	d00d      	beq.n	811c73a <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 811c71e:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 811c720:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 811c722:	4413      	add	r3, r2
 811c724:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 811c726:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811c728:	8a7a      	ldrh	r2, [r7, #18]
 811c72a:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 811c72c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811c72e:	7f9b      	ldrb	r3, [r3, #30]
 811c730:	f043 0301 	orr.w	r3, r3, #1
 811c734:	b2da      	uxtb	r2, r3
 811c736:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811c738:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 811c73a:	697b      	ldr	r3, [r7, #20]
 811c73c:	2b01      	cmp	r3, #1
 811c73e:	d171      	bne.n	811c824 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 811c740:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811c742:	8b9b      	ldrh	r3, [r3, #28]
 811c744:	3314      	adds	r3, #20
 811c746:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 811c748:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811c74a:	685b      	ldr	r3, [r3, #4]
 811c74c:	685b      	ldr	r3, [r3, #4]
 811c74e:	681b      	ldr	r3, [r3, #0]
 811c750:	637b      	str	r3, [r7, #52]	@ 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 811c752:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811c754:	685b      	ldr	r3, [r3, #4]
 811c756:	685b      	ldr	r3, [r3, #4]
 811c758:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 811c75a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811c75c:	3308      	adds	r3, #8
 811c75e:	2214      	movs	r2, #20
 811c760:	4619      	mov	r1, r3
 811c762:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 811c764:	f00a fbe9 	bl	8126f3a <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 811c768:	8a3b      	ldrh	r3, [r7, #16]
 811c76a:	4618      	mov	r0, r3
 811c76c:	f7fd fbce 	bl	8119f0c <lwip_htons>
 811c770:	4603      	mov	r3, r0
 811c772:	461a      	mov	r2, r3
 811c774:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 811c776:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 811c778:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 811c77a:	2200      	movs	r2, #0
 811c77c:	719a      	strb	r2, [r3, #6]
 811c77e:	2200      	movs	r2, #0
 811c780:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 811c782:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 811c784:	2200      	movs	r2, #0
 811c786:	729a      	strb	r2, [r3, #10]
 811c788:	2200      	movs	r2, #0
 811c78a:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 811c78c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811c78e:	685b      	ldr	r3, [r3, #4]
 811c790:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 811c792:	e00d      	b.n	811c7b0 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 811c794:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 811c796:	685b      	ldr	r3, [r3, #4]
 811c798:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 811c79a:	2114      	movs	r1, #20
 811c79c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 811c79e:	f001 fd37 	bl	811e210 <pbuf_remove_header>
      pbuf_cat(p, r);
 811c7a2:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 811c7a4:	6878      	ldr	r0, [r7, #4]
 811c7a6:	f001 fe87 	bl	811e4b8 <pbuf_cat>
      r = iprh->next_pbuf;
 811c7aa:	68fb      	ldr	r3, [r7, #12]
 811c7ac:	681b      	ldr	r3, [r3, #0]
 811c7ae:	637b      	str	r3, [r7, #52]	@ 0x34
    while (r != NULL) {
 811c7b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 811c7b2:	2b00      	cmp	r3, #0
 811c7b4:	d1ee      	bne.n	811c794 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 811c7b6:	4b1e      	ldr	r3, [pc, #120]	@ (811c830 <ip4_reass+0x2b4>)
 811c7b8:	681b      	ldr	r3, [r3, #0]
 811c7ba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 811c7bc:	429a      	cmp	r2, r3
 811c7be:	d102      	bne.n	811c7c6 <ip4_reass+0x24a>
      ipr_prev = NULL;
 811c7c0:	2300      	movs	r3, #0
 811c7c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 811c7c4:	e010      	b.n	811c7e8 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 811c7c6:	4b1a      	ldr	r3, [pc, #104]	@ (811c830 <ip4_reass+0x2b4>)
 811c7c8:	681b      	ldr	r3, [r3, #0]
 811c7ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
 811c7cc:	e007      	b.n	811c7de <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 811c7ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811c7d0:	681b      	ldr	r3, [r3, #0]
 811c7d2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 811c7d4:	429a      	cmp	r2, r3
 811c7d6:	d006      	beq.n	811c7e6 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 811c7d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811c7da:	681b      	ldr	r3, [r3, #0]
 811c7dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 811c7de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811c7e0:	2b00      	cmp	r3, #0
 811c7e2:	d1f4      	bne.n	811c7ce <ip4_reass+0x252>
 811c7e4:	e000      	b.n	811c7e8 <ip4_reass+0x26c>
          break;
 811c7e6:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 811c7e8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 811c7ea:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 811c7ec:	f7ff fd2e 	bl	811c24c <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 811c7f0:	6878      	ldr	r0, [r7, #4]
 811c7f2:	f001 fe21 	bl	811e438 <pbuf_clen>
 811c7f6:	4603      	mov	r3, r0
 811c7f8:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 811c7fa:	4b0c      	ldr	r3, [pc, #48]	@ (811c82c <ip4_reass+0x2b0>)
 811c7fc:	881b      	ldrh	r3, [r3, #0]
 811c7fe:	8c3a      	ldrh	r2, [r7, #32]
 811c800:	429a      	cmp	r2, r3
 811c802:	d906      	bls.n	811c812 <ip4_reass+0x296>
 811c804:	4b0b      	ldr	r3, [pc, #44]	@ (811c834 <ip4_reass+0x2b8>)
 811c806:	f240 229b 	movw	r2, #667	@ 0x29b
 811c80a:	490b      	ldr	r1, [pc, #44]	@ (811c838 <ip4_reass+0x2bc>)
 811c80c:	480b      	ldr	r0, [pc, #44]	@ (811c83c <ip4_reass+0x2c0>)
 811c80e:	f00a f931 	bl	8126a74 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 811c812:	4b06      	ldr	r3, [pc, #24]	@ (811c82c <ip4_reass+0x2b0>)
 811c814:	881a      	ldrh	r2, [r3, #0]
 811c816:	8c3b      	ldrh	r3, [r7, #32]
 811c818:	1ad3      	subs	r3, r2, r3
 811c81a:	b29a      	uxth	r2, r3
 811c81c:	4b03      	ldr	r3, [pc, #12]	@ (811c82c <ip4_reass+0x2b0>)
 811c81e:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 811c820:	687b      	ldr	r3, [r7, #4]
 811c822:	e038      	b.n	811c896 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 811c824:	2300      	movs	r3, #0
 811c826:	e036      	b.n	811c896 <ip4_reass+0x31a>
      goto nullreturn_ipr;
 811c828:	bf00      	nop
 811c82a:	e00a      	b.n	811c842 <ip4_reass+0x2c6>
 811c82c:	1000b3a4 	.word	0x1000b3a4
 811c830:	1000b3a0 	.word	0x1000b3a0
 811c834:	08128484 	.word	0x08128484
 811c838:	08128634 	.word	0x08128634
 811c83c:	0812850c 	.word	0x0812850c
    goto nullreturn_ipr;
 811c840:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 811c842:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811c844:	2b00      	cmp	r3, #0
 811c846:	d106      	bne.n	811c856 <ip4_reass+0x2da>
 811c848:	4b15      	ldr	r3, [pc, #84]	@ (811c8a0 <ip4_reass+0x324>)
 811c84a:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 811c84e:	4915      	ldr	r1, [pc, #84]	@ (811c8a4 <ip4_reass+0x328>)
 811c850:	4815      	ldr	r0, [pc, #84]	@ (811c8a8 <ip4_reass+0x32c>)
 811c852:	f00a f90f 	bl	8126a74 <iprintf>
  if (ipr->p == NULL) {
 811c856:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811c858:	685b      	ldr	r3, [r3, #4]
 811c85a:	2b00      	cmp	r3, #0
 811c85c:	d116      	bne.n	811c88c <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 811c85e:	4b13      	ldr	r3, [pc, #76]	@ (811c8ac <ip4_reass+0x330>)
 811c860:	681b      	ldr	r3, [r3, #0]
 811c862:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 811c864:	429a      	cmp	r2, r3
 811c866:	d006      	beq.n	811c876 <ip4_reass+0x2fa>
 811c868:	4b0d      	ldr	r3, [pc, #52]	@ (811c8a0 <ip4_reass+0x324>)
 811c86a:	f240 22ab 	movw	r2, #683	@ 0x2ab
 811c86e:	4910      	ldr	r1, [pc, #64]	@ (811c8b0 <ip4_reass+0x334>)
 811c870:	480d      	ldr	r0, [pc, #52]	@ (811c8a8 <ip4_reass+0x32c>)
 811c872:	f00a f8ff 	bl	8126a74 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 811c876:	2100      	movs	r1, #0
 811c878:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 811c87a:	f7ff fce7 	bl	811c24c <ip_reass_dequeue_datagram>
 811c87e:	e006      	b.n	811c88e <ip4_reass+0x312>
    goto nullreturn;
 811c880:	bf00      	nop
 811c882:	e004      	b.n	811c88e <ip4_reass+0x312>
    goto nullreturn;
 811c884:	bf00      	nop
 811c886:	e002      	b.n	811c88e <ip4_reass+0x312>
      goto nullreturn;
 811c888:	bf00      	nop
 811c88a:	e000      	b.n	811c88e <ip4_reass+0x312>
  }

nullreturn:
 811c88c:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 811c88e:	6878      	ldr	r0, [r7, #4]
 811c890:	f001 fd44 	bl	811e31c <pbuf_free>
  return NULL;
 811c894:	2300      	movs	r3, #0
}
 811c896:	4618      	mov	r0, r3
 811c898:	3738      	adds	r7, #56	@ 0x38
 811c89a:	46bd      	mov	sp, r7
 811c89c:	bd80      	pop	{r7, pc}
 811c89e:	bf00      	nop
 811c8a0:	08128484 	.word	0x08128484
 811c8a4:	08128650 	.word	0x08128650
 811c8a8:	0812850c 	.word	0x0812850c
 811c8ac:	1000b3a0 	.word	0x1000b3a0
 811c8b0:	0812865c 	.word	0x0812865c

0811c8b4 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 811c8b4:	b580      	push	{r7, lr}
 811c8b6:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 811c8b8:	2005      	movs	r0, #5
 811c8ba:	f000 fe17 	bl	811d4ec <memp_malloc>
 811c8be:	4603      	mov	r3, r0
}
 811c8c0:	4618      	mov	r0, r3
 811c8c2:	bd80      	pop	{r7, pc}

0811c8c4 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 811c8c4:	b580      	push	{r7, lr}
 811c8c6:	b082      	sub	sp, #8
 811c8c8:	af00      	add	r7, sp, #0
 811c8ca:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 811c8cc:	687b      	ldr	r3, [r7, #4]
 811c8ce:	2b00      	cmp	r3, #0
 811c8d0:	d106      	bne.n	811c8e0 <ip_frag_free_pbuf_custom_ref+0x1c>
 811c8d2:	4b07      	ldr	r3, [pc, #28]	@ (811c8f0 <ip_frag_free_pbuf_custom_ref+0x2c>)
 811c8d4:	f44f 7231 	mov.w	r2, #708	@ 0x2c4
 811c8d8:	4906      	ldr	r1, [pc, #24]	@ (811c8f4 <ip_frag_free_pbuf_custom_ref+0x30>)
 811c8da:	4807      	ldr	r0, [pc, #28]	@ (811c8f8 <ip_frag_free_pbuf_custom_ref+0x34>)
 811c8dc:	f00a f8ca 	bl	8126a74 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 811c8e0:	6879      	ldr	r1, [r7, #4]
 811c8e2:	2005      	movs	r0, #5
 811c8e4:	f000 fe78 	bl	811d5d8 <memp_free>
}
 811c8e8:	bf00      	nop
 811c8ea:	3708      	adds	r7, #8
 811c8ec:	46bd      	mov	sp, r7
 811c8ee:	bd80      	pop	{r7, pc}
 811c8f0:	08128484 	.word	0x08128484
 811c8f4:	0812867c 	.word	0x0812867c
 811c8f8:	0812850c 	.word	0x0812850c

0811c8fc <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 811c8fc:	b580      	push	{r7, lr}
 811c8fe:	b084      	sub	sp, #16
 811c900:	af00      	add	r7, sp, #0
 811c902:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 811c904:	687b      	ldr	r3, [r7, #4]
 811c906:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 811c908:	68fb      	ldr	r3, [r7, #12]
 811c90a:	2b00      	cmp	r3, #0
 811c90c:	d106      	bne.n	811c91c <ipfrag_free_pbuf_custom+0x20>
 811c90e:	4b11      	ldr	r3, [pc, #68]	@ (811c954 <ipfrag_free_pbuf_custom+0x58>)
 811c910:	f240 22ce 	movw	r2, #718	@ 0x2ce
 811c914:	4910      	ldr	r1, [pc, #64]	@ (811c958 <ipfrag_free_pbuf_custom+0x5c>)
 811c916:	4811      	ldr	r0, [pc, #68]	@ (811c95c <ipfrag_free_pbuf_custom+0x60>)
 811c918:	f00a f8ac 	bl	8126a74 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 811c91c:	68fa      	ldr	r2, [r7, #12]
 811c91e:	687b      	ldr	r3, [r7, #4]
 811c920:	429a      	cmp	r2, r3
 811c922:	d006      	beq.n	811c932 <ipfrag_free_pbuf_custom+0x36>
 811c924:	4b0b      	ldr	r3, [pc, #44]	@ (811c954 <ipfrag_free_pbuf_custom+0x58>)
 811c926:	f240 22cf 	movw	r2, #719	@ 0x2cf
 811c92a:	490d      	ldr	r1, [pc, #52]	@ (811c960 <ipfrag_free_pbuf_custom+0x64>)
 811c92c:	480b      	ldr	r0, [pc, #44]	@ (811c95c <ipfrag_free_pbuf_custom+0x60>)
 811c92e:	f00a f8a1 	bl	8126a74 <iprintf>
  if (pcr->original != NULL) {
 811c932:	68fb      	ldr	r3, [r7, #12]
 811c934:	695b      	ldr	r3, [r3, #20]
 811c936:	2b00      	cmp	r3, #0
 811c938:	d004      	beq.n	811c944 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 811c93a:	68fb      	ldr	r3, [r7, #12]
 811c93c:	695b      	ldr	r3, [r3, #20]
 811c93e:	4618      	mov	r0, r3
 811c940:	f001 fcec 	bl	811e31c <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 811c944:	68f8      	ldr	r0, [r7, #12]
 811c946:	f7ff ffbd 	bl	811c8c4 <ip_frag_free_pbuf_custom_ref>
}
 811c94a:	bf00      	nop
 811c94c:	3710      	adds	r7, #16
 811c94e:	46bd      	mov	sp, r7
 811c950:	bd80      	pop	{r7, pc}
 811c952:	bf00      	nop
 811c954:	08128484 	.word	0x08128484
 811c958:	08128688 	.word	0x08128688
 811c95c:	0812850c 	.word	0x0812850c
 811c960:	08128694 	.word	0x08128694

0811c964 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 811c964:	b580      	push	{r7, lr}
 811c966:	b094      	sub	sp, #80	@ 0x50
 811c968:	af02      	add	r7, sp, #8
 811c96a:	60f8      	str	r0, [r7, #12]
 811c96c:	60b9      	str	r1, [r7, #8]
 811c96e:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 811c970:	2300      	movs	r3, #0
 811c972:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 811c976:	68bb      	ldr	r3, [r7, #8]
 811c978:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 811c97a:	3b14      	subs	r3, #20
 811c97c:	2b00      	cmp	r3, #0
 811c97e:	da00      	bge.n	811c982 <ip4_frag+0x1e>
 811c980:	3307      	adds	r3, #7
 811c982:	10db      	asrs	r3, r3, #3
 811c984:	877b      	strh	r3, [r7, #58]	@ 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 811c986:	2314      	movs	r3, #20
 811c988:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 811c98a:	68fb      	ldr	r3, [r7, #12]
 811c98c:	685b      	ldr	r3, [r3, #4]
 811c98e:	637b      	str	r3, [r7, #52]	@ 0x34
  iphdr = original_iphdr;
 811c990:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 811c992:	633b      	str	r3, [r7, #48]	@ 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 811c994:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811c996:	781b      	ldrb	r3, [r3, #0]
 811c998:	f003 030f 	and.w	r3, r3, #15
 811c99c:	b2db      	uxtb	r3, r3
 811c99e:	009b      	lsls	r3, r3, #2
 811c9a0:	b2db      	uxtb	r3, r3
 811c9a2:	2b14      	cmp	r3, #20
 811c9a4:	d002      	beq.n	811c9ac <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 811c9a6:	f06f 0305 	mvn.w	r3, #5
 811c9aa:	e110      	b.n	811cbce <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 811c9ac:	68fb      	ldr	r3, [r7, #12]
 811c9ae:	895b      	ldrh	r3, [r3, #10]
 811c9b0:	2b13      	cmp	r3, #19
 811c9b2:	d809      	bhi.n	811c9c8 <ip4_frag+0x64>
 811c9b4:	4b88      	ldr	r3, [pc, #544]	@ (811cbd8 <ip4_frag+0x274>)
 811c9b6:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 811c9ba:	4988      	ldr	r1, [pc, #544]	@ (811cbdc <ip4_frag+0x278>)
 811c9bc:	4888      	ldr	r0, [pc, #544]	@ (811cbe0 <ip4_frag+0x27c>)
 811c9be:	f00a f859 	bl	8126a74 <iprintf>
 811c9c2:	f06f 0305 	mvn.w	r3, #5
 811c9c6:	e102      	b.n	811cbce <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 811c9c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811c9ca:	88db      	ldrh	r3, [r3, #6]
 811c9cc:	b29b      	uxth	r3, r3
 811c9ce:	4618      	mov	r0, r3
 811c9d0:	f7fd fa9c 	bl	8119f0c <lwip_htons>
 811c9d4:	4603      	mov	r3, r0
 811c9d6:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  ofo = tmp & IP_OFFMASK;
 811c9d8:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 811c9da:	f3c3 030c 	ubfx	r3, r3, #0, #13
 811c9de:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 811c9e2:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 811c9e4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 811c9e8:	62fb      	str	r3, [r7, #44]	@ 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 811c9ea:	68fb      	ldr	r3, [r7, #12]
 811c9ec:	891b      	ldrh	r3, [r3, #8]
 811c9ee:	3b14      	subs	r3, #20
 811c9f0:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

  while (left) {
 811c9f4:	e0e1      	b.n	811cbba <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 811c9f6:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 811c9f8:	00db      	lsls	r3, r3, #3
 811c9fa:	b29b      	uxth	r3, r3
 811c9fc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 811ca00:	4293      	cmp	r3, r2
 811ca02:	bf28      	it	cs
 811ca04:	4613      	movcs	r3, r2
 811ca06:	857b      	strh	r3, [r7, #42]	@ 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 811ca08:	f44f 7220 	mov.w	r2, #640	@ 0x280
 811ca0c:	2114      	movs	r1, #20
 811ca0e:	200e      	movs	r0, #14
 811ca10:	f001 f9a2 	bl	811dd58 <pbuf_alloc>
 811ca14:	6278      	str	r0, [r7, #36]	@ 0x24
    if (rambuf == NULL) {
 811ca16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811ca18:	2b00      	cmp	r3, #0
 811ca1a:	f000 80d5 	beq.w	811cbc8 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 811ca1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811ca20:	895b      	ldrh	r3, [r3, #10]
 811ca22:	2b13      	cmp	r3, #19
 811ca24:	d806      	bhi.n	811ca34 <ip4_frag+0xd0>
 811ca26:	4b6c      	ldr	r3, [pc, #432]	@ (811cbd8 <ip4_frag+0x274>)
 811ca28:	f44f 7249 	mov.w	r2, #804	@ 0x324
 811ca2c:	496d      	ldr	r1, [pc, #436]	@ (811cbe4 <ip4_frag+0x280>)
 811ca2e:	486c      	ldr	r0, [pc, #432]	@ (811cbe0 <ip4_frag+0x27c>)
 811ca30:	f00a f820 	bl	8126a74 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 811ca34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811ca36:	685b      	ldr	r3, [r3, #4]
 811ca38:	2214      	movs	r2, #20
 811ca3a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 811ca3c:	4618      	mov	r0, r3
 811ca3e:	f00a fa7c 	bl	8126f3a <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 811ca42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811ca44:	685b      	ldr	r3, [r3, #4]
 811ca46:	633b      	str	r3, [r7, #48]	@ 0x30

    left_to_copy = fragsize;
 811ca48:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 811ca4a:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    while (left_to_copy) {
 811ca4e:	e064      	b.n	811cb1a <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 811ca50:	68fb      	ldr	r3, [r7, #12]
 811ca52:	895a      	ldrh	r2, [r3, #10]
 811ca54:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 811ca56:	1ad3      	subs	r3, r2, r3
 811ca58:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 811ca5a:	68fb      	ldr	r3, [r7, #12]
 811ca5c:	895b      	ldrh	r3, [r3, #10]
 811ca5e:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 811ca60:	429a      	cmp	r2, r3
 811ca62:	d906      	bls.n	811ca72 <ip4_frag+0x10e>
 811ca64:	4b5c      	ldr	r3, [pc, #368]	@ (811cbd8 <ip4_frag+0x274>)
 811ca66:	f240 322d 	movw	r2, #813	@ 0x32d
 811ca6a:	495f      	ldr	r1, [pc, #380]	@ (811cbe8 <ip4_frag+0x284>)
 811ca6c:	485c      	ldr	r0, [pc, #368]	@ (811cbe0 <ip4_frag+0x27c>)
 811ca6e:	f00a f801 	bl	8126a74 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 811ca72:	8bfa      	ldrh	r2, [r7, #30]
 811ca74:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 811ca78:	4293      	cmp	r3, r2
 811ca7a:	bf28      	it	cs
 811ca7c:	4613      	movcs	r3, r2
 811ca7e:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 811ca82:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 811ca86:	2b00      	cmp	r3, #0
 811ca88:	d105      	bne.n	811ca96 <ip4_frag+0x132>
        poff = 0;
 811ca8a:	2300      	movs	r3, #0
 811ca8c:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 811ca8e:	68fb      	ldr	r3, [r7, #12]
 811ca90:	681b      	ldr	r3, [r3, #0]
 811ca92:	60fb      	str	r3, [r7, #12]
        continue;
 811ca94:	e041      	b.n	811cb1a <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 811ca96:	f7ff ff0d 	bl	811c8b4 <ip_frag_alloc_pbuf_custom_ref>
 811ca9a:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 811ca9c:	69bb      	ldr	r3, [r7, #24]
 811ca9e:	2b00      	cmp	r3, #0
 811caa0:	d103      	bne.n	811caaa <ip4_frag+0x146>
        pbuf_free(rambuf);
 811caa2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 811caa4:	f001 fc3a 	bl	811e31c <pbuf_free>
        goto memerr;
 811caa8:	e08f      	b.n	811cbca <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 811caaa:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 811caac:	68fb      	ldr	r3, [r7, #12]
 811caae:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 811cab0:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 811cab2:	4413      	add	r3, r2
 811cab4:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 811cab8:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 811cabc:	9201      	str	r2, [sp, #4]
 811cabe:	9300      	str	r3, [sp, #0]
 811cac0:	4603      	mov	r3, r0
 811cac2:	2241      	movs	r2, #65	@ 0x41
 811cac4:	2000      	movs	r0, #0
 811cac6:	f001 fa71 	bl	811dfac <pbuf_alloced_custom>
 811caca:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 811cacc:	697b      	ldr	r3, [r7, #20]
 811cace:	2b00      	cmp	r3, #0
 811cad0:	d106      	bne.n	811cae0 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 811cad2:	69b8      	ldr	r0, [r7, #24]
 811cad4:	f7ff fef6 	bl	811c8c4 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 811cad8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 811cada:	f001 fc1f 	bl	811e31c <pbuf_free>
        goto memerr;
 811cade:	e074      	b.n	811cbca <ip4_frag+0x266>
      }
      pbuf_ref(p);
 811cae0:	68f8      	ldr	r0, [r7, #12]
 811cae2:	f001 fcc1 	bl	811e468 <pbuf_ref>
      pcr->original = p;
 811cae6:	69bb      	ldr	r3, [r7, #24]
 811cae8:	68fa      	ldr	r2, [r7, #12]
 811caea:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 811caec:	69bb      	ldr	r3, [r7, #24]
 811caee:	4a3f      	ldr	r2, [pc, #252]	@ (811cbec <ip4_frag+0x288>)
 811caf0:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 811caf2:	6979      	ldr	r1, [r7, #20]
 811caf4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 811caf6:	f001 fcdf 	bl	811e4b8 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 811cafa:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 811cafe:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 811cb02:	1ad3      	subs	r3, r2, r3
 811cb04:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
      if (left_to_copy) {
 811cb08:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 811cb0c:	2b00      	cmp	r3, #0
 811cb0e:	d004      	beq.n	811cb1a <ip4_frag+0x1b6>
        poff = 0;
 811cb10:	2300      	movs	r3, #0
 811cb12:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 811cb14:	68fb      	ldr	r3, [r7, #12]
 811cb16:	681b      	ldr	r3, [r3, #0]
 811cb18:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 811cb1a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 811cb1e:	2b00      	cmp	r3, #0
 811cb20:	d196      	bne.n	811ca50 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 811cb22:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 811cb24:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 811cb28:	4413      	add	r3, r2
 811cb2a:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 811cb2c:	68bb      	ldr	r3, [r7, #8]
 811cb2e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 811cb30:	f1a3 0213 	sub.w	r2, r3, #19
 811cb34:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 811cb38:	429a      	cmp	r2, r3
 811cb3a:	bfcc      	ite	gt
 811cb3c:	2301      	movgt	r3, #1
 811cb3e:	2300      	movle	r3, #0
 811cb40:	b2db      	uxtb	r3, r3
 811cb42:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 811cb44:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 811cb48:	f3c3 030c 	ubfx	r3, r3, #0, #13
 811cb4c:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    if (!last || mf_set) {
 811cb4e:	6a3b      	ldr	r3, [r7, #32]
 811cb50:	2b00      	cmp	r3, #0
 811cb52:	d002      	beq.n	811cb5a <ip4_frag+0x1f6>
 811cb54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811cb56:	2b00      	cmp	r3, #0
 811cb58:	d003      	beq.n	811cb62 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 811cb5a:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 811cb5c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 811cb60:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 811cb62:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 811cb64:	4618      	mov	r0, r3
 811cb66:	f7fd f9d1 	bl	8119f0c <lwip_htons>
 811cb6a:	4603      	mov	r3, r0
 811cb6c:	461a      	mov	r2, r3
 811cb6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811cb70:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 811cb72:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 811cb74:	3314      	adds	r3, #20
 811cb76:	b29b      	uxth	r3, r3
 811cb78:	4618      	mov	r0, r3
 811cb7a:	f7fd f9c7 	bl	8119f0c <lwip_htons>
 811cb7e:	4603      	mov	r3, r0
 811cb80:	461a      	mov	r2, r3
 811cb82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811cb84:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 811cb86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811cb88:	2200      	movs	r2, #0
 811cb8a:	729a      	strb	r2, [r3, #10]
 811cb8c:	2200      	movs	r2, #0
 811cb8e:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 811cb90:	68bb      	ldr	r3, [r7, #8]
 811cb92:	695b      	ldr	r3, [r3, #20]
 811cb94:	687a      	ldr	r2, [r7, #4]
 811cb96:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 811cb98:	68b8      	ldr	r0, [r7, #8]
 811cb9a:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 811cb9c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 811cb9e:	f001 fbbd 	bl	811e31c <pbuf_free>
    left = (u16_t)(left - fragsize);
 811cba2:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 811cba6:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 811cba8:	1ad3      	subs	r3, r2, r3
 811cbaa:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    ofo = (u16_t)(ofo + nfb);
 811cbae:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 811cbb2:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 811cbb4:	4413      	add	r3, r2
 811cbb6:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  while (left) {
 811cbba:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 811cbbe:	2b00      	cmp	r3, #0
 811cbc0:	f47f af19 	bne.w	811c9f6 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 811cbc4:	2300      	movs	r3, #0
 811cbc6:	e002      	b.n	811cbce <ip4_frag+0x26a>
      goto memerr;
 811cbc8:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 811cbca:	f04f 33ff 	mov.w	r3, #4294967295
}
 811cbce:	4618      	mov	r0, r3
 811cbd0:	3748      	adds	r7, #72	@ 0x48
 811cbd2:	46bd      	mov	sp, r7
 811cbd4:	bd80      	pop	{r7, pc}
 811cbd6:	bf00      	nop
 811cbd8:	08128484 	.word	0x08128484
 811cbdc:	081286a0 	.word	0x081286a0
 811cbe0:	0812850c 	.word	0x0812850c
 811cbe4:	081286bc 	.word	0x081286bc
 811cbe8:	081286dc 	.word	0x081286dc
 811cbec:	0811c8fd 	.word	0x0811c8fd

0811cbf0 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 811cbf0:	b480      	push	{r7}
 811cbf2:	b083      	sub	sp, #12
 811cbf4:	af00      	add	r7, sp, #0
 811cbf6:	6078      	str	r0, [r7, #4]
  return (struct mem *)(void *)&ram[ptr];
 811cbf8:	4b04      	ldr	r3, [pc, #16]	@ (811cc0c <ptr_to_mem+0x1c>)
 811cbfa:	681a      	ldr	r2, [r3, #0]
 811cbfc:	687b      	ldr	r3, [r7, #4]
 811cbfe:	4413      	add	r3, r2
}
 811cc00:	4618      	mov	r0, r3
 811cc02:	370c      	adds	r7, #12
 811cc04:	46bd      	mov	sp, r7
 811cc06:	f85d 7b04 	ldr.w	r7, [sp], #4
 811cc0a:	4770      	bx	lr
 811cc0c:	1000b3a8 	.word	0x1000b3a8

0811cc10 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 811cc10:	b480      	push	{r7}
 811cc12:	b083      	sub	sp, #12
 811cc14:	af00      	add	r7, sp, #0
 811cc16:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 811cc18:	4b04      	ldr	r3, [pc, #16]	@ (811cc2c <mem_to_ptr+0x1c>)
 811cc1a:	681b      	ldr	r3, [r3, #0]
 811cc1c:	687a      	ldr	r2, [r7, #4]
 811cc1e:	1ad3      	subs	r3, r2, r3
}
 811cc20:	4618      	mov	r0, r3
 811cc22:	370c      	adds	r7, #12
 811cc24:	46bd      	mov	sp, r7
 811cc26:	f85d 7b04 	ldr.w	r7, [sp], #4
 811cc2a:	4770      	bx	lr
 811cc2c:	1000b3a8 	.word	0x1000b3a8

0811cc30 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 811cc30:	b590      	push	{r4, r7, lr}
 811cc32:	b085      	sub	sp, #20
 811cc34:	af00      	add	r7, sp, #0
 811cc36:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 811cc38:	4b45      	ldr	r3, [pc, #276]	@ (811cd50 <plug_holes+0x120>)
 811cc3a:	681b      	ldr	r3, [r3, #0]
 811cc3c:	687a      	ldr	r2, [r7, #4]
 811cc3e:	429a      	cmp	r2, r3
 811cc40:	d206      	bcs.n	811cc50 <plug_holes+0x20>
 811cc42:	4b44      	ldr	r3, [pc, #272]	@ (811cd54 <plug_holes+0x124>)
 811cc44:	f240 12df 	movw	r2, #479	@ 0x1df
 811cc48:	4943      	ldr	r1, [pc, #268]	@ (811cd58 <plug_holes+0x128>)
 811cc4a:	4844      	ldr	r0, [pc, #272]	@ (811cd5c <plug_holes+0x12c>)
 811cc4c:	f009 ff12 	bl	8126a74 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 811cc50:	4b43      	ldr	r3, [pc, #268]	@ (811cd60 <plug_holes+0x130>)
 811cc52:	681b      	ldr	r3, [r3, #0]
 811cc54:	687a      	ldr	r2, [r7, #4]
 811cc56:	429a      	cmp	r2, r3
 811cc58:	d306      	bcc.n	811cc68 <plug_holes+0x38>
 811cc5a:	4b3e      	ldr	r3, [pc, #248]	@ (811cd54 <plug_holes+0x124>)
 811cc5c:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 811cc60:	4940      	ldr	r1, [pc, #256]	@ (811cd64 <plug_holes+0x134>)
 811cc62:	483e      	ldr	r0, [pc, #248]	@ (811cd5c <plug_holes+0x12c>)
 811cc64:	f009 ff06 	bl	8126a74 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 811cc68:	687b      	ldr	r3, [r7, #4]
 811cc6a:	7a1b      	ldrb	r3, [r3, #8]
 811cc6c:	2b00      	cmp	r3, #0
 811cc6e:	d006      	beq.n	811cc7e <plug_holes+0x4e>
 811cc70:	4b38      	ldr	r3, [pc, #224]	@ (811cd54 <plug_holes+0x124>)
 811cc72:	f240 12e1 	movw	r2, #481	@ 0x1e1
 811cc76:	493c      	ldr	r1, [pc, #240]	@ (811cd68 <plug_holes+0x138>)
 811cc78:	4838      	ldr	r0, [pc, #224]	@ (811cd5c <plug_holes+0x12c>)
 811cc7a:	f009 fefb 	bl	8126a74 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 811cc7e:	687b      	ldr	r3, [r7, #4]
 811cc80:	681b      	ldr	r3, [r3, #0]
 811cc82:	4a3a      	ldr	r2, [pc, #232]	@ (811cd6c <plug_holes+0x13c>)
 811cc84:	4293      	cmp	r3, r2
 811cc86:	d906      	bls.n	811cc96 <plug_holes+0x66>
 811cc88:	4b32      	ldr	r3, [pc, #200]	@ (811cd54 <plug_holes+0x124>)
 811cc8a:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 811cc8e:	4938      	ldr	r1, [pc, #224]	@ (811cd70 <plug_holes+0x140>)
 811cc90:	4832      	ldr	r0, [pc, #200]	@ (811cd5c <plug_holes+0x12c>)
 811cc92:	f009 feef 	bl	8126a74 <iprintf>

  nmem = ptr_to_mem(mem->next);
 811cc96:	687b      	ldr	r3, [r7, #4]
 811cc98:	681b      	ldr	r3, [r3, #0]
 811cc9a:	4618      	mov	r0, r3
 811cc9c:	f7ff ffa8 	bl	811cbf0 <ptr_to_mem>
 811cca0:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 811cca2:	687a      	ldr	r2, [r7, #4]
 811cca4:	68fb      	ldr	r3, [r7, #12]
 811cca6:	429a      	cmp	r2, r3
 811cca8:	d024      	beq.n	811ccf4 <plug_holes+0xc4>
 811ccaa:	68fb      	ldr	r3, [r7, #12]
 811ccac:	7a1b      	ldrb	r3, [r3, #8]
 811ccae:	2b00      	cmp	r3, #0
 811ccb0:	d120      	bne.n	811ccf4 <plug_holes+0xc4>
 811ccb2:	4b2b      	ldr	r3, [pc, #172]	@ (811cd60 <plug_holes+0x130>)
 811ccb4:	681b      	ldr	r3, [r3, #0]
 811ccb6:	68fa      	ldr	r2, [r7, #12]
 811ccb8:	429a      	cmp	r2, r3
 811ccba:	d01b      	beq.n	811ccf4 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 811ccbc:	4b2d      	ldr	r3, [pc, #180]	@ (811cd74 <plug_holes+0x144>)
 811ccbe:	681b      	ldr	r3, [r3, #0]
 811ccc0:	68fa      	ldr	r2, [r7, #12]
 811ccc2:	429a      	cmp	r2, r3
 811ccc4:	d102      	bne.n	811cccc <plug_holes+0x9c>
      lfree = mem;
 811ccc6:	4a2b      	ldr	r2, [pc, #172]	@ (811cd74 <plug_holes+0x144>)
 811ccc8:	687b      	ldr	r3, [r7, #4]
 811ccca:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 811cccc:	68fb      	ldr	r3, [r7, #12]
 811ccce:	681a      	ldr	r2, [r3, #0]
 811ccd0:	687b      	ldr	r3, [r7, #4]
 811ccd2:	601a      	str	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 811ccd4:	68fb      	ldr	r3, [r7, #12]
 811ccd6:	681b      	ldr	r3, [r3, #0]
 811ccd8:	4a24      	ldr	r2, [pc, #144]	@ (811cd6c <plug_holes+0x13c>)
 811ccda:	4293      	cmp	r3, r2
 811ccdc:	d00a      	beq.n	811ccf4 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 811ccde:	68fb      	ldr	r3, [r7, #12]
 811cce0:	681b      	ldr	r3, [r3, #0]
 811cce2:	4618      	mov	r0, r3
 811cce4:	f7ff ff84 	bl	811cbf0 <ptr_to_mem>
 811cce8:	4604      	mov	r4, r0
 811ccea:	6878      	ldr	r0, [r7, #4]
 811ccec:	f7ff ff90 	bl	811cc10 <mem_to_ptr>
 811ccf0:	4603      	mov	r3, r0
 811ccf2:	6063      	str	r3, [r4, #4]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 811ccf4:	687b      	ldr	r3, [r7, #4]
 811ccf6:	685b      	ldr	r3, [r3, #4]
 811ccf8:	4618      	mov	r0, r3
 811ccfa:	f7ff ff79 	bl	811cbf0 <ptr_to_mem>
 811ccfe:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 811cd00:	68ba      	ldr	r2, [r7, #8]
 811cd02:	687b      	ldr	r3, [r7, #4]
 811cd04:	429a      	cmp	r2, r3
 811cd06:	d01f      	beq.n	811cd48 <plug_holes+0x118>
 811cd08:	68bb      	ldr	r3, [r7, #8]
 811cd0a:	7a1b      	ldrb	r3, [r3, #8]
 811cd0c:	2b00      	cmp	r3, #0
 811cd0e:	d11b      	bne.n	811cd48 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 811cd10:	4b18      	ldr	r3, [pc, #96]	@ (811cd74 <plug_holes+0x144>)
 811cd12:	681b      	ldr	r3, [r3, #0]
 811cd14:	687a      	ldr	r2, [r7, #4]
 811cd16:	429a      	cmp	r2, r3
 811cd18:	d102      	bne.n	811cd20 <plug_holes+0xf0>
      lfree = pmem;
 811cd1a:	4a16      	ldr	r2, [pc, #88]	@ (811cd74 <plug_holes+0x144>)
 811cd1c:	68bb      	ldr	r3, [r7, #8]
 811cd1e:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 811cd20:	687b      	ldr	r3, [r7, #4]
 811cd22:	681a      	ldr	r2, [r3, #0]
 811cd24:	68bb      	ldr	r3, [r7, #8]
 811cd26:	601a      	str	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 811cd28:	687b      	ldr	r3, [r7, #4]
 811cd2a:	681b      	ldr	r3, [r3, #0]
 811cd2c:	4a0f      	ldr	r2, [pc, #60]	@ (811cd6c <plug_holes+0x13c>)
 811cd2e:	4293      	cmp	r3, r2
 811cd30:	d00a      	beq.n	811cd48 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 811cd32:	687b      	ldr	r3, [r7, #4]
 811cd34:	681b      	ldr	r3, [r3, #0]
 811cd36:	4618      	mov	r0, r3
 811cd38:	f7ff ff5a 	bl	811cbf0 <ptr_to_mem>
 811cd3c:	4604      	mov	r4, r0
 811cd3e:	68b8      	ldr	r0, [r7, #8]
 811cd40:	f7ff ff66 	bl	811cc10 <mem_to_ptr>
 811cd44:	4603      	mov	r3, r0
 811cd46:	6063      	str	r3, [r4, #4]
    }
  }
}
 811cd48:	bf00      	nop
 811cd4a:	3714      	adds	r7, #20
 811cd4c:	46bd      	mov	sp, r7
 811cd4e:	bd90      	pop	{r4, r7, pc}
 811cd50:	1000b3a8 	.word	0x1000b3a8
 811cd54:	081286ec 	.word	0x081286ec
 811cd58:	08128760 	.word	0x08128760
 811cd5c:	08128778 	.word	0x08128778
 811cd60:	1000b3ac 	.word	0x1000b3ac
 811cd64:	081287a0 	.word	0x081287a0
 811cd68:	081287bc 	.word	0x081287bc
 811cd6c:	0001ffe8 	.word	0x0001ffe8
 811cd70:	081287d8 	.word	0x081287d8
 811cd74:	1000b3b4 	.word	0x1000b3b4

0811cd78 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 811cd78:	b580      	push	{r7, lr}
 811cd7a:	b082      	sub	sp, #8
 811cd7c:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 811cd7e:	4b1b      	ldr	r3, [pc, #108]	@ (811cdec <mem_init+0x74>)
 811cd80:	4a1b      	ldr	r2, [pc, #108]	@ (811cdf0 <mem_init+0x78>)
 811cd82:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 811cd84:	4b19      	ldr	r3, [pc, #100]	@ (811cdec <mem_init+0x74>)
 811cd86:	681b      	ldr	r3, [r3, #0]
 811cd88:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 811cd8a:	687b      	ldr	r3, [r7, #4]
 811cd8c:	4a19      	ldr	r2, [pc, #100]	@ (811cdf4 <mem_init+0x7c>)
 811cd8e:	601a      	str	r2, [r3, #0]
  mem->prev = 0;
 811cd90:	687b      	ldr	r3, [r7, #4]
 811cd92:	2200      	movs	r2, #0
 811cd94:	605a      	str	r2, [r3, #4]
  mem->used = 0;
 811cd96:	687b      	ldr	r3, [r7, #4]
 811cd98:	2200      	movs	r2, #0
 811cd9a:	721a      	strb	r2, [r3, #8]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 811cd9c:	4815      	ldr	r0, [pc, #84]	@ (811cdf4 <mem_init+0x7c>)
 811cd9e:	f7ff ff27 	bl	811cbf0 <ptr_to_mem>
 811cda2:	4603      	mov	r3, r0
 811cda4:	4a14      	ldr	r2, [pc, #80]	@ (811cdf8 <mem_init+0x80>)
 811cda6:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 811cda8:	4b13      	ldr	r3, [pc, #76]	@ (811cdf8 <mem_init+0x80>)
 811cdaa:	681b      	ldr	r3, [r3, #0]
 811cdac:	2201      	movs	r2, #1
 811cdae:	721a      	strb	r2, [r3, #8]
  ram_end->next = MEM_SIZE_ALIGNED;
 811cdb0:	4b11      	ldr	r3, [pc, #68]	@ (811cdf8 <mem_init+0x80>)
 811cdb2:	681b      	ldr	r3, [r3, #0]
 811cdb4:	4a0f      	ldr	r2, [pc, #60]	@ (811cdf4 <mem_init+0x7c>)
 811cdb6:	601a      	str	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 811cdb8:	4b0f      	ldr	r3, [pc, #60]	@ (811cdf8 <mem_init+0x80>)
 811cdba:	681b      	ldr	r3, [r3, #0]
 811cdbc:	4a0d      	ldr	r2, [pc, #52]	@ (811cdf4 <mem_init+0x7c>)
 811cdbe:	605a      	str	r2, [r3, #4]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 811cdc0:	4b0a      	ldr	r3, [pc, #40]	@ (811cdec <mem_init+0x74>)
 811cdc2:	681b      	ldr	r3, [r3, #0]
 811cdc4:	4a0d      	ldr	r2, [pc, #52]	@ (811cdfc <mem_init+0x84>)
 811cdc6:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 811cdc8:	480d      	ldr	r0, [pc, #52]	@ (811ce00 <mem_init+0x88>)
 811cdca:	f001 fdd3 	bl	811e974 <sys_mutex_new>
 811cdce:	4603      	mov	r3, r0
 811cdd0:	2b00      	cmp	r3, #0
 811cdd2:	d006      	beq.n	811cde2 <mem_init+0x6a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 811cdd4:	4b0b      	ldr	r3, [pc, #44]	@ (811ce04 <mem_init+0x8c>)
 811cdd6:	f240 221f 	movw	r2, #543	@ 0x21f
 811cdda:	490b      	ldr	r1, [pc, #44]	@ (811ce08 <mem_init+0x90>)
 811cddc:	480b      	ldr	r0, [pc, #44]	@ (811ce0c <mem_init+0x94>)
 811cdde:	f009 fe49 	bl	8126a74 <iprintf>
  }
}
 811cde2:	bf00      	nop
 811cde4:	3708      	adds	r7, #8
 811cde6:	46bd      	mov	sp, r7
 811cde8:	bd80      	pop	{r7, pc}
 811cdea:	bf00      	nop
 811cdec:	1000b3a8 	.word	0x1000b3a8
 811cdf0:	10020000 	.word	0x10020000
 811cdf4:	0001ffe8 	.word	0x0001ffe8
 811cdf8:	1000b3ac 	.word	0x1000b3ac
 811cdfc:	1000b3b4 	.word	0x1000b3b4
 811ce00:	1000b3b0 	.word	0x1000b3b0
 811ce04:	081286ec 	.word	0x081286ec
 811ce08:	08128804 	.word	0x08128804
 811ce0c:	08128778 	.word	0x08128778

0811ce10 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 811ce10:	b580      	push	{r7, lr}
 811ce12:	b086      	sub	sp, #24
 811ce14:	af00      	add	r7, sp, #0
 811ce16:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 811ce18:	6878      	ldr	r0, [r7, #4]
 811ce1a:	f7ff fef9 	bl	811cc10 <mem_to_ptr>
 811ce1e:	6178      	str	r0, [r7, #20]
  nmem = ptr_to_mem(mem->next);
 811ce20:	687b      	ldr	r3, [r7, #4]
 811ce22:	681b      	ldr	r3, [r3, #0]
 811ce24:	4618      	mov	r0, r3
 811ce26:	f7ff fee3 	bl	811cbf0 <ptr_to_mem>
 811ce2a:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 811ce2c:	687b      	ldr	r3, [r7, #4]
 811ce2e:	685b      	ldr	r3, [r3, #4]
 811ce30:	4618      	mov	r0, r3
 811ce32:	f7ff fedd 	bl	811cbf0 <ptr_to_mem>
 811ce36:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 811ce38:	687b      	ldr	r3, [r7, #4]
 811ce3a:	681b      	ldr	r3, [r3, #0]
 811ce3c:	4a11      	ldr	r2, [pc, #68]	@ (811ce84 <mem_link_valid+0x74>)
 811ce3e:	4293      	cmp	r3, r2
 811ce40:	d818      	bhi.n	811ce74 <mem_link_valid+0x64>
 811ce42:	687b      	ldr	r3, [r7, #4]
 811ce44:	685b      	ldr	r3, [r3, #4]
 811ce46:	4a0f      	ldr	r2, [pc, #60]	@ (811ce84 <mem_link_valid+0x74>)
 811ce48:	4293      	cmp	r3, r2
 811ce4a:	d813      	bhi.n	811ce74 <mem_link_valid+0x64>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 811ce4c:	687b      	ldr	r3, [r7, #4]
 811ce4e:	685b      	ldr	r3, [r3, #4]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 811ce50:	697a      	ldr	r2, [r7, #20]
 811ce52:	429a      	cmp	r2, r3
 811ce54:	d004      	beq.n	811ce60 <mem_link_valid+0x50>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 811ce56:	68fb      	ldr	r3, [r7, #12]
 811ce58:	681b      	ldr	r3, [r3, #0]
 811ce5a:	697a      	ldr	r2, [r7, #20]
 811ce5c:	429a      	cmp	r2, r3
 811ce5e:	d109      	bne.n	811ce74 <mem_link_valid+0x64>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 811ce60:	4b09      	ldr	r3, [pc, #36]	@ (811ce88 <mem_link_valid+0x78>)
 811ce62:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 811ce64:	693a      	ldr	r2, [r7, #16]
 811ce66:	429a      	cmp	r2, r3
 811ce68:	d006      	beq.n	811ce78 <mem_link_valid+0x68>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 811ce6a:	693b      	ldr	r3, [r7, #16]
 811ce6c:	685b      	ldr	r3, [r3, #4]
 811ce6e:	697a      	ldr	r2, [r7, #20]
 811ce70:	429a      	cmp	r2, r3
 811ce72:	d001      	beq.n	811ce78 <mem_link_valid+0x68>
    return 0;
 811ce74:	2300      	movs	r3, #0
 811ce76:	e000      	b.n	811ce7a <mem_link_valid+0x6a>
  }
  return 1;
 811ce78:	2301      	movs	r3, #1
}
 811ce7a:	4618      	mov	r0, r3
 811ce7c:	3718      	adds	r7, #24
 811ce7e:	46bd      	mov	sp, r7
 811ce80:	bd80      	pop	{r7, pc}
 811ce82:	bf00      	nop
 811ce84:	0001ffe8 	.word	0x0001ffe8
 811ce88:	1000b3ac 	.word	0x1000b3ac

0811ce8c <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 811ce8c:	b580      	push	{r7, lr}
 811ce8e:	b088      	sub	sp, #32
 811ce90:	af00      	add	r7, sp, #0
 811ce92:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 811ce94:	687b      	ldr	r3, [r7, #4]
 811ce96:	2b00      	cmp	r3, #0
 811ce98:	d070      	beq.n	811cf7c <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 811ce9a:	687b      	ldr	r3, [r7, #4]
 811ce9c:	f003 0303 	and.w	r3, r3, #3
 811cea0:	2b00      	cmp	r3, #0
 811cea2:	d00d      	beq.n	811cec0 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 811cea4:	4b37      	ldr	r3, [pc, #220]	@ (811cf84 <mem_free+0xf8>)
 811cea6:	f240 2273 	movw	r2, #627	@ 0x273
 811ceaa:	4937      	ldr	r1, [pc, #220]	@ (811cf88 <mem_free+0xfc>)
 811ceac:	4837      	ldr	r0, [pc, #220]	@ (811cf8c <mem_free+0x100>)
 811ceae:	f009 fde1 	bl	8126a74 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 811ceb2:	f001 fdb1 	bl	811ea18 <sys_arch_protect>
 811ceb6:	60f8      	str	r0, [r7, #12]
 811ceb8:	68f8      	ldr	r0, [r7, #12]
 811ceba:	f001 fdbb 	bl	811ea34 <sys_arch_unprotect>
    return;
 811cebe:	e05e      	b.n	811cf7e <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 811cec0:	687b      	ldr	r3, [r7, #4]
 811cec2:	3b0c      	subs	r3, #12
 811cec4:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 811cec6:	4b32      	ldr	r3, [pc, #200]	@ (811cf90 <mem_free+0x104>)
 811cec8:	681b      	ldr	r3, [r3, #0]
 811ceca:	69fa      	ldr	r2, [r7, #28]
 811cecc:	429a      	cmp	r2, r3
 811cece:	d306      	bcc.n	811cede <mem_free+0x52>
 811ced0:	687b      	ldr	r3, [r7, #4]
 811ced2:	f103 020c 	add.w	r2, r3, #12
 811ced6:	4b2f      	ldr	r3, [pc, #188]	@ (811cf94 <mem_free+0x108>)
 811ced8:	681b      	ldr	r3, [r3, #0]
 811ceda:	429a      	cmp	r2, r3
 811cedc:	d90d      	bls.n	811cefa <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 811cede:	4b29      	ldr	r3, [pc, #164]	@ (811cf84 <mem_free+0xf8>)
 811cee0:	f240 227f 	movw	r2, #639	@ 0x27f
 811cee4:	492c      	ldr	r1, [pc, #176]	@ (811cf98 <mem_free+0x10c>)
 811cee6:	4829      	ldr	r0, [pc, #164]	@ (811cf8c <mem_free+0x100>)
 811cee8:	f009 fdc4 	bl	8126a74 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 811ceec:	f001 fd94 	bl	811ea18 <sys_arch_protect>
 811cef0:	6138      	str	r0, [r7, #16]
 811cef2:	6938      	ldr	r0, [r7, #16]
 811cef4:	f001 fd9e 	bl	811ea34 <sys_arch_unprotect>
    return;
 811cef8:	e041      	b.n	811cf7e <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 811cefa:	4828      	ldr	r0, [pc, #160]	@ (811cf9c <mem_free+0x110>)
 811cefc:	f001 fd50 	bl	811e9a0 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 811cf00:	69fb      	ldr	r3, [r7, #28]
 811cf02:	7a1b      	ldrb	r3, [r3, #8]
 811cf04:	2b00      	cmp	r3, #0
 811cf06:	d110      	bne.n	811cf2a <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 811cf08:	4b1e      	ldr	r3, [pc, #120]	@ (811cf84 <mem_free+0xf8>)
 811cf0a:	f44f 7223 	mov.w	r2, #652	@ 0x28c
 811cf0e:	4924      	ldr	r1, [pc, #144]	@ (811cfa0 <mem_free+0x114>)
 811cf10:	481e      	ldr	r0, [pc, #120]	@ (811cf8c <mem_free+0x100>)
 811cf12:	f009 fdaf 	bl	8126a74 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 811cf16:	4821      	ldr	r0, [pc, #132]	@ (811cf9c <mem_free+0x110>)
 811cf18:	f001 fd51 	bl	811e9be <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 811cf1c:	f001 fd7c 	bl	811ea18 <sys_arch_protect>
 811cf20:	6178      	str	r0, [r7, #20]
 811cf22:	6978      	ldr	r0, [r7, #20]
 811cf24:	f001 fd86 	bl	811ea34 <sys_arch_unprotect>
    return;
 811cf28:	e029      	b.n	811cf7e <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 811cf2a:	69f8      	ldr	r0, [r7, #28]
 811cf2c:	f7ff ff70 	bl	811ce10 <mem_link_valid>
 811cf30:	4603      	mov	r3, r0
 811cf32:	2b00      	cmp	r3, #0
 811cf34:	d110      	bne.n	811cf58 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 811cf36:	4b13      	ldr	r3, [pc, #76]	@ (811cf84 <mem_free+0xf8>)
 811cf38:	f240 2295 	movw	r2, #661	@ 0x295
 811cf3c:	4919      	ldr	r1, [pc, #100]	@ (811cfa4 <mem_free+0x118>)
 811cf3e:	4813      	ldr	r0, [pc, #76]	@ (811cf8c <mem_free+0x100>)
 811cf40:	f009 fd98 	bl	8126a74 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 811cf44:	4815      	ldr	r0, [pc, #84]	@ (811cf9c <mem_free+0x110>)
 811cf46:	f001 fd3a 	bl	811e9be <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 811cf4a:	f001 fd65 	bl	811ea18 <sys_arch_protect>
 811cf4e:	61b8      	str	r0, [r7, #24]
 811cf50:	69b8      	ldr	r0, [r7, #24]
 811cf52:	f001 fd6f 	bl	811ea34 <sys_arch_unprotect>
    return;
 811cf56:	e012      	b.n	811cf7e <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 811cf58:	69fb      	ldr	r3, [r7, #28]
 811cf5a:	2200      	movs	r2, #0
 811cf5c:	721a      	strb	r2, [r3, #8]

  if (mem < lfree) {
 811cf5e:	4b12      	ldr	r3, [pc, #72]	@ (811cfa8 <mem_free+0x11c>)
 811cf60:	681b      	ldr	r3, [r3, #0]
 811cf62:	69fa      	ldr	r2, [r7, #28]
 811cf64:	429a      	cmp	r2, r3
 811cf66:	d202      	bcs.n	811cf6e <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 811cf68:	4a0f      	ldr	r2, [pc, #60]	@ (811cfa8 <mem_free+0x11c>)
 811cf6a:	69fb      	ldr	r3, [r7, #28]
 811cf6c:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 811cf6e:	69f8      	ldr	r0, [r7, #28]
 811cf70:	f7ff fe5e 	bl	811cc30 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 811cf74:	4809      	ldr	r0, [pc, #36]	@ (811cf9c <mem_free+0x110>)
 811cf76:	f001 fd22 	bl	811e9be <sys_mutex_unlock>
 811cf7a:	e000      	b.n	811cf7e <mem_free+0xf2>
    return;
 811cf7c:	bf00      	nop
}
 811cf7e:	3720      	adds	r7, #32
 811cf80:	46bd      	mov	sp, r7
 811cf82:	bd80      	pop	{r7, pc}
 811cf84:	081286ec 	.word	0x081286ec
 811cf88:	08128820 	.word	0x08128820
 811cf8c:	08128778 	.word	0x08128778
 811cf90:	1000b3a8 	.word	0x1000b3a8
 811cf94:	1000b3ac 	.word	0x1000b3ac
 811cf98:	08128844 	.word	0x08128844
 811cf9c:	1000b3b0 	.word	0x1000b3b0
 811cfa0:	08128860 	.word	0x08128860
 811cfa4:	08128888 	.word	0x08128888
 811cfa8:	1000b3b4 	.word	0x1000b3b4

0811cfac <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 811cfac:	b580      	push	{r7, lr}
 811cfae:	b08a      	sub	sp, #40	@ 0x28
 811cfb0:	af00      	add	r7, sp, #0
 811cfb2:	6078      	str	r0, [r7, #4]
 811cfb4:	6039      	str	r1, [r7, #0]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 811cfb6:	683b      	ldr	r3, [r7, #0]
 811cfb8:	3303      	adds	r3, #3
 811cfba:	f023 0303 	bic.w	r3, r3, #3
 811cfbe:	627b      	str	r3, [r7, #36]	@ 0x24
  if (newsize < MIN_SIZE_ALIGNED) {
 811cfc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811cfc2:	2b0b      	cmp	r3, #11
 811cfc4:	d801      	bhi.n	811cfca <mem_trim+0x1e>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 811cfc6:	230c      	movs	r3, #12
 811cfc8:	627b      	str	r3, [r7, #36]	@ 0x24
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 811cfca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811cfcc:	4a6e      	ldr	r2, [pc, #440]	@ (811d188 <mem_trim+0x1dc>)
 811cfce:	4293      	cmp	r3, r2
 811cfd0:	d803      	bhi.n	811cfda <mem_trim+0x2e>
 811cfd2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 811cfd4:	683b      	ldr	r3, [r7, #0]
 811cfd6:	429a      	cmp	r2, r3
 811cfd8:	d201      	bcs.n	811cfde <mem_trim+0x32>
    return NULL;
 811cfda:	2300      	movs	r3, #0
 811cfdc:	e0d0      	b.n	811d180 <mem_trim+0x1d4>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 811cfde:	4b6b      	ldr	r3, [pc, #428]	@ (811d18c <mem_trim+0x1e0>)
 811cfe0:	681b      	ldr	r3, [r3, #0]
 811cfe2:	687a      	ldr	r2, [r7, #4]
 811cfe4:	429a      	cmp	r2, r3
 811cfe6:	d304      	bcc.n	811cff2 <mem_trim+0x46>
 811cfe8:	4b69      	ldr	r3, [pc, #420]	@ (811d190 <mem_trim+0x1e4>)
 811cfea:	681b      	ldr	r3, [r3, #0]
 811cfec:	687a      	ldr	r2, [r7, #4]
 811cfee:	429a      	cmp	r2, r3
 811cff0:	d306      	bcc.n	811d000 <mem_trim+0x54>
 811cff2:	4b68      	ldr	r3, [pc, #416]	@ (811d194 <mem_trim+0x1e8>)
 811cff4:	f240 22d1 	movw	r2, #721	@ 0x2d1
 811cff8:	4967      	ldr	r1, [pc, #412]	@ (811d198 <mem_trim+0x1ec>)
 811cffa:	4868      	ldr	r0, [pc, #416]	@ (811d19c <mem_trim+0x1f0>)
 811cffc:	f009 fd3a 	bl	8126a74 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 811d000:	4b62      	ldr	r3, [pc, #392]	@ (811d18c <mem_trim+0x1e0>)
 811d002:	681b      	ldr	r3, [r3, #0]
 811d004:	687a      	ldr	r2, [r7, #4]
 811d006:	429a      	cmp	r2, r3
 811d008:	d304      	bcc.n	811d014 <mem_trim+0x68>
 811d00a:	4b61      	ldr	r3, [pc, #388]	@ (811d190 <mem_trim+0x1e4>)
 811d00c:	681b      	ldr	r3, [r3, #0]
 811d00e:	687a      	ldr	r2, [r7, #4]
 811d010:	429a      	cmp	r2, r3
 811d012:	d307      	bcc.n	811d024 <mem_trim+0x78>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 811d014:	f001 fd00 	bl	811ea18 <sys_arch_protect>
 811d018:	60b8      	str	r0, [r7, #8]
 811d01a:	68b8      	ldr	r0, [r7, #8]
 811d01c:	f001 fd0a 	bl	811ea34 <sys_arch_unprotect>
    return rmem;
 811d020:	687b      	ldr	r3, [r7, #4]
 811d022:	e0ad      	b.n	811d180 <mem_trim+0x1d4>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 811d024:	687b      	ldr	r3, [r7, #4]
 811d026:	3b0c      	subs	r3, #12
 811d028:	623b      	str	r3, [r7, #32]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 811d02a:	6a38      	ldr	r0, [r7, #32]
 811d02c:	f7ff fdf0 	bl	811cc10 <mem_to_ptr>
 811d030:	61f8      	str	r0, [r7, #28]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 811d032:	6a3b      	ldr	r3, [r7, #32]
 811d034:	681a      	ldr	r2, [r3, #0]
 811d036:	69fb      	ldr	r3, [r7, #28]
 811d038:	1ad3      	subs	r3, r2, r3
 811d03a:	3b0c      	subs	r3, #12
 811d03c:	61bb      	str	r3, [r7, #24]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 811d03e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 811d040:	69bb      	ldr	r3, [r7, #24]
 811d042:	429a      	cmp	r2, r3
 811d044:	d906      	bls.n	811d054 <mem_trim+0xa8>
 811d046:	4b53      	ldr	r3, [pc, #332]	@ (811d194 <mem_trim+0x1e8>)
 811d048:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 811d04c:	4954      	ldr	r1, [pc, #336]	@ (811d1a0 <mem_trim+0x1f4>)
 811d04e:	4853      	ldr	r0, [pc, #332]	@ (811d19c <mem_trim+0x1f0>)
 811d050:	f009 fd10 	bl	8126a74 <iprintf>
  if (newsize > size) {
 811d054:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 811d056:	69bb      	ldr	r3, [r7, #24]
 811d058:	429a      	cmp	r2, r3
 811d05a:	d901      	bls.n	811d060 <mem_trim+0xb4>
    /* not supported */
    return NULL;
 811d05c:	2300      	movs	r3, #0
 811d05e:	e08f      	b.n	811d180 <mem_trim+0x1d4>
  }
  if (newsize == size) {
 811d060:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 811d062:	69bb      	ldr	r3, [r7, #24]
 811d064:	429a      	cmp	r2, r3
 811d066:	d101      	bne.n	811d06c <mem_trim+0xc0>
    /* No change in size, simply return */
    return rmem;
 811d068:	687b      	ldr	r3, [r7, #4]
 811d06a:	e089      	b.n	811d180 <mem_trim+0x1d4>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 811d06c:	484d      	ldr	r0, [pc, #308]	@ (811d1a4 <mem_trim+0x1f8>)
 811d06e:	f001 fc97 	bl	811e9a0 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 811d072:	6a3b      	ldr	r3, [r7, #32]
 811d074:	681b      	ldr	r3, [r3, #0]
 811d076:	4618      	mov	r0, r3
 811d078:	f7ff fdba 	bl	811cbf0 <ptr_to_mem>
 811d07c:	6178      	str	r0, [r7, #20]
  if (mem2->used == 0) {
 811d07e:	697b      	ldr	r3, [r7, #20]
 811d080:	7a1b      	ldrb	r3, [r3, #8]
 811d082:	2b00      	cmp	r3, #0
 811d084:	d13c      	bne.n	811d100 <mem_trim+0x154>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 811d086:	6a3b      	ldr	r3, [r7, #32]
 811d088:	681b      	ldr	r3, [r3, #0]
 811d08a:	4a3f      	ldr	r2, [pc, #252]	@ (811d188 <mem_trim+0x1dc>)
 811d08c:	4293      	cmp	r3, r2
 811d08e:	d106      	bne.n	811d09e <mem_trim+0xf2>
 811d090:	4b40      	ldr	r3, [pc, #256]	@ (811d194 <mem_trim+0x1e8>)
 811d092:	f240 22f5 	movw	r2, #757	@ 0x2f5
 811d096:	4944      	ldr	r1, [pc, #272]	@ (811d1a8 <mem_trim+0x1fc>)
 811d098:	4840      	ldr	r0, [pc, #256]	@ (811d19c <mem_trim+0x1f0>)
 811d09a:	f009 fceb 	bl	8126a74 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 811d09e:	697b      	ldr	r3, [r7, #20]
 811d0a0:	681b      	ldr	r3, [r3, #0]
 811d0a2:	60fb      	str	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 811d0a4:	69fa      	ldr	r2, [r7, #28]
 811d0a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811d0a8:	4413      	add	r3, r2
 811d0aa:	330c      	adds	r3, #12
 811d0ac:	613b      	str	r3, [r7, #16]
    if (lfree == mem2) {
 811d0ae:	4b3f      	ldr	r3, [pc, #252]	@ (811d1ac <mem_trim+0x200>)
 811d0b0:	681b      	ldr	r3, [r3, #0]
 811d0b2:	697a      	ldr	r2, [r7, #20]
 811d0b4:	429a      	cmp	r2, r3
 811d0b6:	d105      	bne.n	811d0c4 <mem_trim+0x118>
      lfree = ptr_to_mem(ptr2);
 811d0b8:	6938      	ldr	r0, [r7, #16]
 811d0ba:	f7ff fd99 	bl	811cbf0 <ptr_to_mem>
 811d0be:	4603      	mov	r3, r0
 811d0c0:	4a3a      	ldr	r2, [pc, #232]	@ (811d1ac <mem_trim+0x200>)
 811d0c2:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 811d0c4:	6938      	ldr	r0, [r7, #16]
 811d0c6:	f7ff fd93 	bl	811cbf0 <ptr_to_mem>
 811d0ca:	6178      	str	r0, [r7, #20]
    mem2->used = 0;
 811d0cc:	697b      	ldr	r3, [r7, #20]
 811d0ce:	2200      	movs	r2, #0
 811d0d0:	721a      	strb	r2, [r3, #8]
    /* restore the next pointer */
    mem2->next = next;
 811d0d2:	697b      	ldr	r3, [r7, #20]
 811d0d4:	68fa      	ldr	r2, [r7, #12]
 811d0d6:	601a      	str	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 811d0d8:	697b      	ldr	r3, [r7, #20]
 811d0da:	69fa      	ldr	r2, [r7, #28]
 811d0dc:	605a      	str	r2, [r3, #4]
    /* link mem to it */
    mem->next = ptr2;
 811d0de:	6a3b      	ldr	r3, [r7, #32]
 811d0e0:	693a      	ldr	r2, [r7, #16]
 811d0e2:	601a      	str	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 811d0e4:	697b      	ldr	r3, [r7, #20]
 811d0e6:	681b      	ldr	r3, [r3, #0]
 811d0e8:	4a27      	ldr	r2, [pc, #156]	@ (811d188 <mem_trim+0x1dc>)
 811d0ea:	4293      	cmp	r3, r2
 811d0ec:	d044      	beq.n	811d178 <mem_trim+0x1cc>
      ptr_to_mem(mem2->next)->prev = ptr2;
 811d0ee:	697b      	ldr	r3, [r7, #20]
 811d0f0:	681b      	ldr	r3, [r3, #0]
 811d0f2:	4618      	mov	r0, r3
 811d0f4:	f7ff fd7c 	bl	811cbf0 <ptr_to_mem>
 811d0f8:	4602      	mov	r2, r0
 811d0fa:	693b      	ldr	r3, [r7, #16]
 811d0fc:	6053      	str	r3, [r2, #4]
 811d0fe:	e03b      	b.n	811d178 <mem_trim+0x1cc>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 811d100:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811d102:	3318      	adds	r3, #24
 811d104:	69ba      	ldr	r2, [r7, #24]
 811d106:	429a      	cmp	r2, r3
 811d108:	d336      	bcc.n	811d178 <mem_trim+0x1cc>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 811d10a:	69fa      	ldr	r2, [r7, #28]
 811d10c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811d10e:	4413      	add	r3, r2
 811d110:	330c      	adds	r3, #12
 811d112:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 811d114:	6a3b      	ldr	r3, [r7, #32]
 811d116:	681b      	ldr	r3, [r3, #0]
 811d118:	4a1b      	ldr	r2, [pc, #108]	@ (811d188 <mem_trim+0x1dc>)
 811d11a:	4293      	cmp	r3, r2
 811d11c:	d106      	bne.n	811d12c <mem_trim+0x180>
 811d11e:	4b1d      	ldr	r3, [pc, #116]	@ (811d194 <mem_trim+0x1e8>)
 811d120:	f240 3216 	movw	r2, #790	@ 0x316
 811d124:	4920      	ldr	r1, [pc, #128]	@ (811d1a8 <mem_trim+0x1fc>)
 811d126:	481d      	ldr	r0, [pc, #116]	@ (811d19c <mem_trim+0x1f0>)
 811d128:	f009 fca4 	bl	8126a74 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 811d12c:	6938      	ldr	r0, [r7, #16]
 811d12e:	f7ff fd5f 	bl	811cbf0 <ptr_to_mem>
 811d132:	6178      	str	r0, [r7, #20]
    if (mem2 < lfree) {
 811d134:	4b1d      	ldr	r3, [pc, #116]	@ (811d1ac <mem_trim+0x200>)
 811d136:	681b      	ldr	r3, [r3, #0]
 811d138:	697a      	ldr	r2, [r7, #20]
 811d13a:	429a      	cmp	r2, r3
 811d13c:	d202      	bcs.n	811d144 <mem_trim+0x198>
      lfree = mem2;
 811d13e:	4a1b      	ldr	r2, [pc, #108]	@ (811d1ac <mem_trim+0x200>)
 811d140:	697b      	ldr	r3, [r7, #20]
 811d142:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 811d144:	697b      	ldr	r3, [r7, #20]
 811d146:	2200      	movs	r2, #0
 811d148:	721a      	strb	r2, [r3, #8]
    mem2->next = mem->next;
 811d14a:	6a3b      	ldr	r3, [r7, #32]
 811d14c:	681a      	ldr	r2, [r3, #0]
 811d14e:	697b      	ldr	r3, [r7, #20]
 811d150:	601a      	str	r2, [r3, #0]
    mem2->prev = ptr;
 811d152:	697b      	ldr	r3, [r7, #20]
 811d154:	69fa      	ldr	r2, [r7, #28]
 811d156:	605a      	str	r2, [r3, #4]
    mem->next = ptr2;
 811d158:	6a3b      	ldr	r3, [r7, #32]
 811d15a:	693a      	ldr	r2, [r7, #16]
 811d15c:	601a      	str	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 811d15e:	697b      	ldr	r3, [r7, #20]
 811d160:	681b      	ldr	r3, [r3, #0]
 811d162:	4a09      	ldr	r2, [pc, #36]	@ (811d188 <mem_trim+0x1dc>)
 811d164:	4293      	cmp	r3, r2
 811d166:	d007      	beq.n	811d178 <mem_trim+0x1cc>
      ptr_to_mem(mem2->next)->prev = ptr2;
 811d168:	697b      	ldr	r3, [r7, #20]
 811d16a:	681b      	ldr	r3, [r3, #0]
 811d16c:	4618      	mov	r0, r3
 811d16e:	f7ff fd3f 	bl	811cbf0 <ptr_to_mem>
 811d172:	4602      	mov	r2, r0
 811d174:	693b      	ldr	r3, [r7, #16]
 811d176:	6053      	str	r3, [r2, #4]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 811d178:	480a      	ldr	r0, [pc, #40]	@ (811d1a4 <mem_trim+0x1f8>)
 811d17a:	f001 fc20 	bl	811e9be <sys_mutex_unlock>
  return rmem;
 811d17e:	687b      	ldr	r3, [r7, #4]
}
 811d180:	4618      	mov	r0, r3
 811d182:	3728      	adds	r7, #40	@ 0x28
 811d184:	46bd      	mov	sp, r7
 811d186:	bd80      	pop	{r7, pc}
 811d188:	0001ffe8 	.word	0x0001ffe8
 811d18c:	1000b3a8 	.word	0x1000b3a8
 811d190:	1000b3ac 	.word	0x1000b3ac
 811d194:	081286ec 	.word	0x081286ec
 811d198:	081288bc 	.word	0x081288bc
 811d19c:	08128778 	.word	0x08128778
 811d1a0:	081288d4 	.word	0x081288d4
 811d1a4:	1000b3b0 	.word	0x1000b3b0
 811d1a8:	081288f4 	.word	0x081288f4
 811d1ac:	1000b3b4 	.word	0x1000b3b4

0811d1b0 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 811d1b0:	b580      	push	{r7, lr}
 811d1b2:	b088      	sub	sp, #32
 811d1b4:	af00      	add	r7, sp, #0
 811d1b6:	6078      	str	r0, [r7, #4]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 811d1b8:	687b      	ldr	r3, [r7, #4]
 811d1ba:	2b00      	cmp	r3, #0
 811d1bc:	d101      	bne.n	811d1c2 <mem_malloc+0x12>
    return NULL;
 811d1be:	2300      	movs	r3, #0
 811d1c0:	e0db      	b.n	811d37a <mem_malloc+0x1ca>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 811d1c2:	687b      	ldr	r3, [r7, #4]
 811d1c4:	3303      	adds	r3, #3
 811d1c6:	f023 0303 	bic.w	r3, r3, #3
 811d1ca:	61bb      	str	r3, [r7, #24]
  if (size < MIN_SIZE_ALIGNED) {
 811d1cc:	69bb      	ldr	r3, [r7, #24]
 811d1ce:	2b0b      	cmp	r3, #11
 811d1d0:	d801      	bhi.n	811d1d6 <mem_malloc+0x26>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 811d1d2:	230c      	movs	r3, #12
 811d1d4:	61bb      	str	r3, [r7, #24]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 811d1d6:	69bb      	ldr	r3, [r7, #24]
 811d1d8:	4a6a      	ldr	r2, [pc, #424]	@ (811d384 <mem_malloc+0x1d4>)
 811d1da:	4293      	cmp	r3, r2
 811d1dc:	d803      	bhi.n	811d1e6 <mem_malloc+0x36>
 811d1de:	69ba      	ldr	r2, [r7, #24]
 811d1e0:	687b      	ldr	r3, [r7, #4]
 811d1e2:	429a      	cmp	r2, r3
 811d1e4:	d201      	bcs.n	811d1ea <mem_malloc+0x3a>
    return NULL;
 811d1e6:	2300      	movs	r3, #0
 811d1e8:	e0c7      	b.n	811d37a <mem_malloc+0x1ca>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 811d1ea:	4867      	ldr	r0, [pc, #412]	@ (811d388 <mem_malloc+0x1d8>)
 811d1ec:	f001 fbd8 	bl	811e9a0 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 811d1f0:	4b66      	ldr	r3, [pc, #408]	@ (811d38c <mem_malloc+0x1dc>)
 811d1f2:	681b      	ldr	r3, [r3, #0]
 811d1f4:	4618      	mov	r0, r3
 811d1f6:	f7ff fd0b 	bl	811cc10 <mem_to_ptr>
 811d1fa:	61f8      	str	r0, [r7, #28]
 811d1fc:	e0b0      	b.n	811d360 <mem_malloc+0x1b0>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 811d1fe:	69f8      	ldr	r0, [r7, #28]
 811d200:	f7ff fcf6 	bl	811cbf0 <ptr_to_mem>
 811d204:	6138      	str	r0, [r7, #16]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 811d206:	693b      	ldr	r3, [r7, #16]
 811d208:	7a1b      	ldrb	r3, [r3, #8]
 811d20a:	2b00      	cmp	r3, #0
 811d20c:	f040 80a2 	bne.w	811d354 <mem_malloc+0x1a4>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 811d210:	693b      	ldr	r3, [r7, #16]
 811d212:	681a      	ldr	r2, [r3, #0]
 811d214:	69fb      	ldr	r3, [r7, #28]
 811d216:	1ad3      	subs	r3, r2, r3
 811d218:	3b0c      	subs	r3, #12
      if ((!mem->used) &&
 811d21a:	69ba      	ldr	r2, [r7, #24]
 811d21c:	429a      	cmp	r2, r3
 811d21e:	f200 8099 	bhi.w	811d354 <mem_malloc+0x1a4>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 811d222:	693b      	ldr	r3, [r7, #16]
 811d224:	681a      	ldr	r2, [r3, #0]
 811d226:	69fb      	ldr	r3, [r7, #28]
 811d228:	1ad3      	subs	r3, r2, r3
 811d22a:	f1a3 020c 	sub.w	r2, r3, #12
 811d22e:	69bb      	ldr	r3, [r7, #24]
 811d230:	3318      	adds	r3, #24
 811d232:	429a      	cmp	r2, r3
 811d234:	d331      	bcc.n	811d29a <mem_malloc+0xea>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 811d236:	69fa      	ldr	r2, [r7, #28]
 811d238:	69bb      	ldr	r3, [r7, #24]
 811d23a:	4413      	add	r3, r2
 811d23c:	330c      	adds	r3, #12
 811d23e:	60fb      	str	r3, [r7, #12]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 811d240:	68fb      	ldr	r3, [r7, #12]
 811d242:	4a50      	ldr	r2, [pc, #320]	@ (811d384 <mem_malloc+0x1d4>)
 811d244:	4293      	cmp	r3, r2
 811d246:	d106      	bne.n	811d256 <mem_malloc+0xa6>
 811d248:	4b51      	ldr	r3, [pc, #324]	@ (811d390 <mem_malloc+0x1e0>)
 811d24a:	f240 3287 	movw	r2, #903	@ 0x387
 811d24e:	4951      	ldr	r1, [pc, #324]	@ (811d394 <mem_malloc+0x1e4>)
 811d250:	4851      	ldr	r0, [pc, #324]	@ (811d398 <mem_malloc+0x1e8>)
 811d252:	f009 fc0f 	bl	8126a74 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 811d256:	68f8      	ldr	r0, [r7, #12]
 811d258:	f7ff fcca 	bl	811cbf0 <ptr_to_mem>
 811d25c:	60b8      	str	r0, [r7, #8]
          mem2->used = 0;
 811d25e:	68bb      	ldr	r3, [r7, #8]
 811d260:	2200      	movs	r2, #0
 811d262:	721a      	strb	r2, [r3, #8]
          mem2->next = mem->next;
 811d264:	693b      	ldr	r3, [r7, #16]
 811d266:	681a      	ldr	r2, [r3, #0]
 811d268:	68bb      	ldr	r3, [r7, #8]
 811d26a:	601a      	str	r2, [r3, #0]
          mem2->prev = ptr;
 811d26c:	68bb      	ldr	r3, [r7, #8]
 811d26e:	69fa      	ldr	r2, [r7, #28]
 811d270:	605a      	str	r2, [r3, #4]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 811d272:	693b      	ldr	r3, [r7, #16]
 811d274:	68fa      	ldr	r2, [r7, #12]
 811d276:	601a      	str	r2, [r3, #0]
          mem->used = 1;
 811d278:	693b      	ldr	r3, [r7, #16]
 811d27a:	2201      	movs	r2, #1
 811d27c:	721a      	strb	r2, [r3, #8]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 811d27e:	68bb      	ldr	r3, [r7, #8]
 811d280:	681b      	ldr	r3, [r3, #0]
 811d282:	4a40      	ldr	r2, [pc, #256]	@ (811d384 <mem_malloc+0x1d4>)
 811d284:	4293      	cmp	r3, r2
 811d286:	d00b      	beq.n	811d2a0 <mem_malloc+0xf0>
            ptr_to_mem(mem2->next)->prev = ptr2;
 811d288:	68bb      	ldr	r3, [r7, #8]
 811d28a:	681b      	ldr	r3, [r3, #0]
 811d28c:	4618      	mov	r0, r3
 811d28e:	f7ff fcaf 	bl	811cbf0 <ptr_to_mem>
 811d292:	4602      	mov	r2, r0
 811d294:	68fb      	ldr	r3, [r7, #12]
 811d296:	6053      	str	r3, [r2, #4]
 811d298:	e002      	b.n	811d2a0 <mem_malloc+0xf0>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 811d29a:	693b      	ldr	r3, [r7, #16]
 811d29c:	2201      	movs	r2, #1
 811d29e:	721a      	strb	r2, [r3, #8]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 811d2a0:	4b3a      	ldr	r3, [pc, #232]	@ (811d38c <mem_malloc+0x1dc>)
 811d2a2:	681b      	ldr	r3, [r3, #0]
 811d2a4:	693a      	ldr	r2, [r7, #16]
 811d2a6:	429a      	cmp	r2, r3
 811d2a8:	d127      	bne.n	811d2fa <mem_malloc+0x14a>
          struct mem *cur = lfree;
 811d2aa:	4b38      	ldr	r3, [pc, #224]	@ (811d38c <mem_malloc+0x1dc>)
 811d2ac:	681b      	ldr	r3, [r3, #0]
 811d2ae:	617b      	str	r3, [r7, #20]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 811d2b0:	e005      	b.n	811d2be <mem_malloc+0x10e>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 811d2b2:	697b      	ldr	r3, [r7, #20]
 811d2b4:	681b      	ldr	r3, [r3, #0]
 811d2b6:	4618      	mov	r0, r3
 811d2b8:	f7ff fc9a 	bl	811cbf0 <ptr_to_mem>
 811d2bc:	6178      	str	r0, [r7, #20]
          while (cur->used && cur != ram_end) {
 811d2be:	697b      	ldr	r3, [r7, #20]
 811d2c0:	7a1b      	ldrb	r3, [r3, #8]
 811d2c2:	2b00      	cmp	r3, #0
 811d2c4:	d004      	beq.n	811d2d0 <mem_malloc+0x120>
 811d2c6:	4b35      	ldr	r3, [pc, #212]	@ (811d39c <mem_malloc+0x1ec>)
 811d2c8:	681b      	ldr	r3, [r3, #0]
 811d2ca:	697a      	ldr	r2, [r7, #20]
 811d2cc:	429a      	cmp	r2, r3
 811d2ce:	d1f0      	bne.n	811d2b2 <mem_malloc+0x102>
          }
          lfree = cur;
 811d2d0:	4a2e      	ldr	r2, [pc, #184]	@ (811d38c <mem_malloc+0x1dc>)
 811d2d2:	697b      	ldr	r3, [r7, #20]
 811d2d4:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 811d2d6:	4b2d      	ldr	r3, [pc, #180]	@ (811d38c <mem_malloc+0x1dc>)
 811d2d8:	681a      	ldr	r2, [r3, #0]
 811d2da:	4b30      	ldr	r3, [pc, #192]	@ (811d39c <mem_malloc+0x1ec>)
 811d2dc:	681b      	ldr	r3, [r3, #0]
 811d2de:	429a      	cmp	r2, r3
 811d2e0:	d00b      	beq.n	811d2fa <mem_malloc+0x14a>
 811d2e2:	4b2a      	ldr	r3, [pc, #168]	@ (811d38c <mem_malloc+0x1dc>)
 811d2e4:	681b      	ldr	r3, [r3, #0]
 811d2e6:	7a1b      	ldrb	r3, [r3, #8]
 811d2e8:	2b00      	cmp	r3, #0
 811d2ea:	d006      	beq.n	811d2fa <mem_malloc+0x14a>
 811d2ec:	4b28      	ldr	r3, [pc, #160]	@ (811d390 <mem_malloc+0x1e0>)
 811d2ee:	f240 32b5 	movw	r2, #949	@ 0x3b5
 811d2f2:	492b      	ldr	r1, [pc, #172]	@ (811d3a0 <mem_malloc+0x1f0>)
 811d2f4:	4828      	ldr	r0, [pc, #160]	@ (811d398 <mem_malloc+0x1e8>)
 811d2f6:	f009 fbbd 	bl	8126a74 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 811d2fa:	4823      	ldr	r0, [pc, #140]	@ (811d388 <mem_malloc+0x1d8>)
 811d2fc:	f001 fb5f 	bl	811e9be <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 811d300:	693a      	ldr	r2, [r7, #16]
 811d302:	69bb      	ldr	r3, [r7, #24]
 811d304:	4413      	add	r3, r2
 811d306:	330c      	adds	r3, #12
 811d308:	4a24      	ldr	r2, [pc, #144]	@ (811d39c <mem_malloc+0x1ec>)
 811d30a:	6812      	ldr	r2, [r2, #0]
 811d30c:	4293      	cmp	r3, r2
 811d30e:	d906      	bls.n	811d31e <mem_malloc+0x16e>
 811d310:	4b1f      	ldr	r3, [pc, #124]	@ (811d390 <mem_malloc+0x1e0>)
 811d312:	f240 32b9 	movw	r2, #953	@ 0x3b9
 811d316:	4923      	ldr	r1, [pc, #140]	@ (811d3a4 <mem_malloc+0x1f4>)
 811d318:	481f      	ldr	r0, [pc, #124]	@ (811d398 <mem_malloc+0x1e8>)
 811d31a:	f009 fbab 	bl	8126a74 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 811d31e:	693b      	ldr	r3, [r7, #16]
 811d320:	f003 0303 	and.w	r3, r3, #3
 811d324:	2b00      	cmp	r3, #0
 811d326:	d006      	beq.n	811d336 <mem_malloc+0x186>
 811d328:	4b19      	ldr	r3, [pc, #100]	@ (811d390 <mem_malloc+0x1e0>)
 811d32a:	f240 32bb 	movw	r2, #955	@ 0x3bb
 811d32e:	491e      	ldr	r1, [pc, #120]	@ (811d3a8 <mem_malloc+0x1f8>)
 811d330:	4819      	ldr	r0, [pc, #100]	@ (811d398 <mem_malloc+0x1e8>)
 811d332:	f009 fb9f 	bl	8126a74 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 811d336:	693b      	ldr	r3, [r7, #16]
 811d338:	f003 0303 	and.w	r3, r3, #3
 811d33c:	2b00      	cmp	r3, #0
 811d33e:	d006      	beq.n	811d34e <mem_malloc+0x19e>
 811d340:	4b13      	ldr	r3, [pc, #76]	@ (811d390 <mem_malloc+0x1e0>)
 811d342:	f240 32bd 	movw	r2, #957	@ 0x3bd
 811d346:	4919      	ldr	r1, [pc, #100]	@ (811d3ac <mem_malloc+0x1fc>)
 811d348:	4813      	ldr	r0, [pc, #76]	@ (811d398 <mem_malloc+0x1e8>)
 811d34a:	f009 fb93 	bl	8126a74 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 811d34e:	693b      	ldr	r3, [r7, #16]
 811d350:	330c      	adds	r3, #12
 811d352:	e012      	b.n	811d37a <mem_malloc+0x1ca>
         ptr = ptr_to_mem(ptr)->next) {
 811d354:	69f8      	ldr	r0, [r7, #28]
 811d356:	f7ff fc4b 	bl	811cbf0 <ptr_to_mem>
 811d35a:	4603      	mov	r3, r0
 811d35c:	681b      	ldr	r3, [r3, #0]
 811d35e:	61fb      	str	r3, [r7, #28]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 811d360:	69bb      	ldr	r3, [r7, #24]
 811d362:	f5c3 33ff 	rsb	r3, r3, #130560	@ 0x1fe00
 811d366:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 811d36a:	69fa      	ldr	r2, [r7, #28]
 811d36c:	429a      	cmp	r2, r3
 811d36e:	f4ff af46 	bcc.w	811d1fe <mem_malloc+0x4e>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 811d372:	4805      	ldr	r0, [pc, #20]	@ (811d388 <mem_malloc+0x1d8>)
 811d374:	f001 fb23 	bl	811e9be <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 811d378:	2300      	movs	r3, #0
}
 811d37a:	4618      	mov	r0, r3
 811d37c:	3720      	adds	r7, #32
 811d37e:	46bd      	mov	sp, r7
 811d380:	bd80      	pop	{r7, pc}
 811d382:	bf00      	nop
 811d384:	0001ffe8 	.word	0x0001ffe8
 811d388:	1000b3b0 	.word	0x1000b3b0
 811d38c:	1000b3b4 	.word	0x1000b3b4
 811d390:	081286ec 	.word	0x081286ec
 811d394:	081288f4 	.word	0x081288f4
 811d398:	08128778 	.word	0x08128778
 811d39c:	1000b3ac 	.word	0x1000b3ac
 811d3a0:	08128908 	.word	0x08128908
 811d3a4:	08128924 	.word	0x08128924
 811d3a8:	08128954 	.word	0x08128954
 811d3ac:	08128984 	.word	0x08128984

0811d3b0 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 811d3b0:	b480      	push	{r7}
 811d3b2:	b085      	sub	sp, #20
 811d3b4:	af00      	add	r7, sp, #0
 811d3b6:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 811d3b8:	687b      	ldr	r3, [r7, #4]
 811d3ba:	689b      	ldr	r3, [r3, #8]
 811d3bc:	2200      	movs	r2, #0
 811d3be:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 811d3c0:	687b      	ldr	r3, [r7, #4]
 811d3c2:	685b      	ldr	r3, [r3, #4]
 811d3c4:	3303      	adds	r3, #3
 811d3c6:	f023 0303 	bic.w	r3, r3, #3
 811d3ca:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 811d3cc:	2300      	movs	r3, #0
 811d3ce:	60fb      	str	r3, [r7, #12]
 811d3d0:	e011      	b.n	811d3f6 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 811d3d2:	687b      	ldr	r3, [r7, #4]
 811d3d4:	689b      	ldr	r3, [r3, #8]
 811d3d6:	681a      	ldr	r2, [r3, #0]
 811d3d8:	68bb      	ldr	r3, [r7, #8]
 811d3da:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 811d3dc:	687b      	ldr	r3, [r7, #4]
 811d3de:	689b      	ldr	r3, [r3, #8]
 811d3e0:	68ba      	ldr	r2, [r7, #8]
 811d3e2:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 811d3e4:	687b      	ldr	r3, [r7, #4]
 811d3e6:	881b      	ldrh	r3, [r3, #0]
 811d3e8:	461a      	mov	r2, r3
 811d3ea:	68bb      	ldr	r3, [r7, #8]
 811d3ec:	4413      	add	r3, r2
 811d3ee:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 811d3f0:	68fb      	ldr	r3, [r7, #12]
 811d3f2:	3301      	adds	r3, #1
 811d3f4:	60fb      	str	r3, [r7, #12]
 811d3f6:	687b      	ldr	r3, [r7, #4]
 811d3f8:	885b      	ldrh	r3, [r3, #2]
 811d3fa:	461a      	mov	r2, r3
 811d3fc:	68fb      	ldr	r3, [r7, #12]
 811d3fe:	4293      	cmp	r3, r2
 811d400:	dbe7      	blt.n	811d3d2 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 811d402:	bf00      	nop
 811d404:	bf00      	nop
 811d406:	3714      	adds	r7, #20
 811d408:	46bd      	mov	sp, r7
 811d40a:	f85d 7b04 	ldr.w	r7, [sp], #4
 811d40e:	4770      	bx	lr

0811d410 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 811d410:	b580      	push	{r7, lr}
 811d412:	b082      	sub	sp, #8
 811d414:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 811d416:	2300      	movs	r3, #0
 811d418:	80fb      	strh	r3, [r7, #6]
 811d41a:	e009      	b.n	811d430 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 811d41c:	88fb      	ldrh	r3, [r7, #6]
 811d41e:	4a08      	ldr	r2, [pc, #32]	@ (811d440 <memp_init+0x30>)
 811d420:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 811d424:	4618      	mov	r0, r3
 811d426:	f7ff ffc3 	bl	811d3b0 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 811d42a:	88fb      	ldrh	r3, [r7, #6]
 811d42c:	3301      	adds	r3, #1
 811d42e:	80fb      	strh	r3, [r7, #6]
 811d430:	88fb      	ldrh	r3, [r7, #6]
 811d432:	2b0c      	cmp	r3, #12
 811d434:	d9f2      	bls.n	811d41c <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 811d436:	bf00      	nop
 811d438:	bf00      	nop
 811d43a:	3708      	adds	r7, #8
 811d43c:	46bd      	mov	sp, r7
 811d43e:	bd80      	pop	{r7, pc}
 811d440:	0812aeec 	.word	0x0812aeec

0811d444 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 811d444:	b580      	push	{r7, lr}
 811d446:	b084      	sub	sp, #16
 811d448:	af00      	add	r7, sp, #0
 811d44a:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 811d44c:	f001 fae4 	bl	811ea18 <sys_arch_protect>
 811d450:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 811d452:	687b      	ldr	r3, [r7, #4]
 811d454:	689b      	ldr	r3, [r3, #8]
 811d456:	681b      	ldr	r3, [r3, #0]
 811d458:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 811d45a:	68bb      	ldr	r3, [r7, #8]
 811d45c:	2b00      	cmp	r3, #0
 811d45e:	d015      	beq.n	811d48c <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 811d460:	687b      	ldr	r3, [r7, #4]
 811d462:	689b      	ldr	r3, [r3, #8]
 811d464:	68ba      	ldr	r2, [r7, #8]
 811d466:	6812      	ldr	r2, [r2, #0]
 811d468:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 811d46a:	68bb      	ldr	r3, [r7, #8]
 811d46c:	f003 0303 	and.w	r3, r3, #3
 811d470:	2b00      	cmp	r3, #0
 811d472:	d006      	beq.n	811d482 <do_memp_malloc_pool+0x3e>
 811d474:	4b09      	ldr	r3, [pc, #36]	@ (811d49c <do_memp_malloc_pool+0x58>)
 811d476:	f44f 728c 	mov.w	r2, #280	@ 0x118
 811d47a:	4909      	ldr	r1, [pc, #36]	@ (811d4a0 <do_memp_malloc_pool+0x5c>)
 811d47c:	4809      	ldr	r0, [pc, #36]	@ (811d4a4 <do_memp_malloc_pool+0x60>)
 811d47e:	f009 faf9 	bl	8126a74 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 811d482:	68f8      	ldr	r0, [r7, #12]
 811d484:	f001 fad6 	bl	811ea34 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 811d488:	68bb      	ldr	r3, [r7, #8]
 811d48a:	e003      	b.n	811d494 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 811d48c:	68f8      	ldr	r0, [r7, #12]
 811d48e:	f001 fad1 	bl	811ea34 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 811d492:	2300      	movs	r3, #0
}
 811d494:	4618      	mov	r0, r3
 811d496:	3710      	adds	r7, #16
 811d498:	46bd      	mov	sp, r7
 811d49a:	bd80      	pop	{r7, pc}
 811d49c:	081289a8 	.word	0x081289a8
 811d4a0:	08128a1c 	.word	0x08128a1c
 811d4a4:	08128a40 	.word	0x08128a40

0811d4a8 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 811d4a8:	b580      	push	{r7, lr}
 811d4aa:	b082      	sub	sp, #8
 811d4ac:	af00      	add	r7, sp, #0
 811d4ae:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 811d4b0:	687b      	ldr	r3, [r7, #4]
 811d4b2:	2b00      	cmp	r3, #0
 811d4b4:	d106      	bne.n	811d4c4 <memp_malloc_pool+0x1c>
 811d4b6:	4b0a      	ldr	r3, [pc, #40]	@ (811d4e0 <memp_malloc_pool+0x38>)
 811d4b8:	f44f 729e 	mov.w	r2, #316	@ 0x13c
 811d4bc:	4909      	ldr	r1, [pc, #36]	@ (811d4e4 <memp_malloc_pool+0x3c>)
 811d4be:	480a      	ldr	r0, [pc, #40]	@ (811d4e8 <memp_malloc_pool+0x40>)
 811d4c0:	f009 fad8 	bl	8126a74 <iprintf>
  if (desc == NULL) {
 811d4c4:	687b      	ldr	r3, [r7, #4]
 811d4c6:	2b00      	cmp	r3, #0
 811d4c8:	d101      	bne.n	811d4ce <memp_malloc_pool+0x26>
    return NULL;
 811d4ca:	2300      	movs	r3, #0
 811d4cc:	e003      	b.n	811d4d6 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 811d4ce:	6878      	ldr	r0, [r7, #4]
 811d4d0:	f7ff ffb8 	bl	811d444 <do_memp_malloc_pool>
 811d4d4:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 811d4d6:	4618      	mov	r0, r3
 811d4d8:	3708      	adds	r7, #8
 811d4da:	46bd      	mov	sp, r7
 811d4dc:	bd80      	pop	{r7, pc}
 811d4de:	bf00      	nop
 811d4e0:	081289a8 	.word	0x081289a8
 811d4e4:	08128a68 	.word	0x08128a68
 811d4e8:	08128a40 	.word	0x08128a40

0811d4ec <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 811d4ec:	b580      	push	{r7, lr}
 811d4ee:	b084      	sub	sp, #16
 811d4f0:	af00      	add	r7, sp, #0
 811d4f2:	4603      	mov	r3, r0
 811d4f4:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 811d4f6:	79fb      	ldrb	r3, [r7, #7]
 811d4f8:	2b0c      	cmp	r3, #12
 811d4fa:	d908      	bls.n	811d50e <memp_malloc+0x22>
 811d4fc:	4b0a      	ldr	r3, [pc, #40]	@ (811d528 <memp_malloc+0x3c>)
 811d4fe:	f240 1257 	movw	r2, #343	@ 0x157
 811d502:	490a      	ldr	r1, [pc, #40]	@ (811d52c <memp_malloc+0x40>)
 811d504:	480a      	ldr	r0, [pc, #40]	@ (811d530 <memp_malloc+0x44>)
 811d506:	f009 fab5 	bl	8126a74 <iprintf>
 811d50a:	2300      	movs	r3, #0
 811d50c:	e008      	b.n	811d520 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 811d50e:	79fb      	ldrb	r3, [r7, #7]
 811d510:	4a08      	ldr	r2, [pc, #32]	@ (811d534 <memp_malloc+0x48>)
 811d512:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 811d516:	4618      	mov	r0, r3
 811d518:	f7ff ff94 	bl	811d444 <do_memp_malloc_pool>
 811d51c:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 811d51e:	68fb      	ldr	r3, [r7, #12]
}
 811d520:	4618      	mov	r0, r3
 811d522:	3710      	adds	r7, #16
 811d524:	46bd      	mov	sp, r7
 811d526:	bd80      	pop	{r7, pc}
 811d528:	081289a8 	.word	0x081289a8
 811d52c:	08128a7c 	.word	0x08128a7c
 811d530:	08128a40 	.word	0x08128a40
 811d534:	0812aeec 	.word	0x0812aeec

0811d538 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 811d538:	b580      	push	{r7, lr}
 811d53a:	b084      	sub	sp, #16
 811d53c:	af00      	add	r7, sp, #0
 811d53e:	6078      	str	r0, [r7, #4]
 811d540:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 811d542:	683b      	ldr	r3, [r7, #0]
 811d544:	f003 0303 	and.w	r3, r3, #3
 811d548:	2b00      	cmp	r3, #0
 811d54a:	d006      	beq.n	811d55a <do_memp_free_pool+0x22>
 811d54c:	4b0d      	ldr	r3, [pc, #52]	@ (811d584 <do_memp_free_pool+0x4c>)
 811d54e:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 811d552:	490d      	ldr	r1, [pc, #52]	@ (811d588 <do_memp_free_pool+0x50>)
 811d554:	480d      	ldr	r0, [pc, #52]	@ (811d58c <do_memp_free_pool+0x54>)
 811d556:	f009 fa8d 	bl	8126a74 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 811d55a:	683b      	ldr	r3, [r7, #0]
 811d55c:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 811d55e:	f001 fa5b 	bl	811ea18 <sys_arch_protect>
 811d562:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 811d564:	687b      	ldr	r3, [r7, #4]
 811d566:	689b      	ldr	r3, [r3, #8]
 811d568:	681a      	ldr	r2, [r3, #0]
 811d56a:	68fb      	ldr	r3, [r7, #12]
 811d56c:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 811d56e:	687b      	ldr	r3, [r7, #4]
 811d570:	689b      	ldr	r3, [r3, #8]
 811d572:	68fa      	ldr	r2, [r7, #12]
 811d574:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 811d576:	68b8      	ldr	r0, [r7, #8]
 811d578:	f001 fa5c 	bl	811ea34 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 811d57c:	bf00      	nop
 811d57e:	3710      	adds	r7, #16
 811d580:	46bd      	mov	sp, r7
 811d582:	bd80      	pop	{r7, pc}
 811d584:	081289a8 	.word	0x081289a8
 811d588:	08128a9c 	.word	0x08128a9c
 811d58c:	08128a40 	.word	0x08128a40

0811d590 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 811d590:	b580      	push	{r7, lr}
 811d592:	b082      	sub	sp, #8
 811d594:	af00      	add	r7, sp, #0
 811d596:	6078      	str	r0, [r7, #4]
 811d598:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 811d59a:	687b      	ldr	r3, [r7, #4]
 811d59c:	2b00      	cmp	r3, #0
 811d59e:	d106      	bne.n	811d5ae <memp_free_pool+0x1e>
 811d5a0:	4b0a      	ldr	r3, [pc, #40]	@ (811d5cc <memp_free_pool+0x3c>)
 811d5a2:	f240 1295 	movw	r2, #405	@ 0x195
 811d5a6:	490a      	ldr	r1, [pc, #40]	@ (811d5d0 <memp_free_pool+0x40>)
 811d5a8:	480a      	ldr	r0, [pc, #40]	@ (811d5d4 <memp_free_pool+0x44>)
 811d5aa:	f009 fa63 	bl	8126a74 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 811d5ae:	687b      	ldr	r3, [r7, #4]
 811d5b0:	2b00      	cmp	r3, #0
 811d5b2:	d007      	beq.n	811d5c4 <memp_free_pool+0x34>
 811d5b4:	683b      	ldr	r3, [r7, #0]
 811d5b6:	2b00      	cmp	r3, #0
 811d5b8:	d004      	beq.n	811d5c4 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 811d5ba:	6839      	ldr	r1, [r7, #0]
 811d5bc:	6878      	ldr	r0, [r7, #4]
 811d5be:	f7ff ffbb 	bl	811d538 <do_memp_free_pool>
 811d5c2:	e000      	b.n	811d5c6 <memp_free_pool+0x36>
    return;
 811d5c4:	bf00      	nop
}
 811d5c6:	3708      	adds	r7, #8
 811d5c8:	46bd      	mov	sp, r7
 811d5ca:	bd80      	pop	{r7, pc}
 811d5cc:	081289a8 	.word	0x081289a8
 811d5d0:	08128a68 	.word	0x08128a68
 811d5d4:	08128a40 	.word	0x08128a40

0811d5d8 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 811d5d8:	b580      	push	{r7, lr}
 811d5da:	b082      	sub	sp, #8
 811d5dc:	af00      	add	r7, sp, #0
 811d5de:	4603      	mov	r3, r0
 811d5e0:	6039      	str	r1, [r7, #0]
 811d5e2:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 811d5e4:	79fb      	ldrb	r3, [r7, #7]
 811d5e6:	2b0c      	cmp	r3, #12
 811d5e8:	d907      	bls.n	811d5fa <memp_free+0x22>
 811d5ea:	4b0c      	ldr	r3, [pc, #48]	@ (811d61c <memp_free+0x44>)
 811d5ec:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 811d5f0:	490b      	ldr	r1, [pc, #44]	@ (811d620 <memp_free+0x48>)
 811d5f2:	480c      	ldr	r0, [pc, #48]	@ (811d624 <memp_free+0x4c>)
 811d5f4:	f009 fa3e 	bl	8126a74 <iprintf>
 811d5f8:	e00c      	b.n	811d614 <memp_free+0x3c>

  if (mem == NULL) {
 811d5fa:	683b      	ldr	r3, [r7, #0]
 811d5fc:	2b00      	cmp	r3, #0
 811d5fe:	d008      	beq.n	811d612 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 811d600:	79fb      	ldrb	r3, [r7, #7]
 811d602:	4a09      	ldr	r2, [pc, #36]	@ (811d628 <memp_free+0x50>)
 811d604:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 811d608:	6839      	ldr	r1, [r7, #0]
 811d60a:	4618      	mov	r0, r3
 811d60c:	f7ff ff94 	bl	811d538 <do_memp_free_pool>
 811d610:	e000      	b.n	811d614 <memp_free+0x3c>
    return;
 811d612:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 811d614:	3708      	adds	r7, #8
 811d616:	46bd      	mov	sp, r7
 811d618:	bd80      	pop	{r7, pc}
 811d61a:	bf00      	nop
 811d61c:	081289a8 	.word	0x081289a8
 811d620:	08128abc 	.word	0x08128abc
 811d624:	08128a40 	.word	0x08128a40
 811d628:	0812aeec 	.word	0x0812aeec

0811d62c <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 811d62c:	b480      	push	{r7}
 811d62e:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 811d630:	bf00      	nop
 811d632:	46bd      	mov	sp, r7
 811d634:	f85d 7b04 	ldr.w	r7, [sp], #4
 811d638:	4770      	bx	lr
	...

0811d63c <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 811d63c:	b580      	push	{r7, lr}
 811d63e:	b086      	sub	sp, #24
 811d640:	af00      	add	r7, sp, #0
 811d642:	60f8      	str	r0, [r7, #12]
 811d644:	60b9      	str	r1, [r7, #8]
 811d646:	607a      	str	r2, [r7, #4]
 811d648:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 811d64a:	68fb      	ldr	r3, [r7, #12]
 811d64c:	2b00      	cmp	r3, #0
 811d64e:	d108      	bne.n	811d662 <netif_add+0x26>
 811d650:	4b57      	ldr	r3, [pc, #348]	@ (811d7b0 <netif_add+0x174>)
 811d652:	f240 1227 	movw	r2, #295	@ 0x127
 811d656:	4957      	ldr	r1, [pc, #348]	@ (811d7b4 <netif_add+0x178>)
 811d658:	4857      	ldr	r0, [pc, #348]	@ (811d7b8 <netif_add+0x17c>)
 811d65a:	f009 fa0b 	bl	8126a74 <iprintf>
 811d65e:	2300      	movs	r3, #0
 811d660:	e0a2      	b.n	811d7a8 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 811d662:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811d664:	2b00      	cmp	r3, #0
 811d666:	d108      	bne.n	811d67a <netif_add+0x3e>
 811d668:	4b51      	ldr	r3, [pc, #324]	@ (811d7b0 <netif_add+0x174>)
 811d66a:	f44f 7294 	mov.w	r2, #296	@ 0x128
 811d66e:	4953      	ldr	r1, [pc, #332]	@ (811d7bc <netif_add+0x180>)
 811d670:	4851      	ldr	r0, [pc, #324]	@ (811d7b8 <netif_add+0x17c>)
 811d672:	f009 f9ff 	bl	8126a74 <iprintf>
 811d676:	2300      	movs	r3, #0
 811d678:	e096      	b.n	811d7a8 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 811d67a:	68bb      	ldr	r3, [r7, #8]
 811d67c:	2b00      	cmp	r3, #0
 811d67e:	d101      	bne.n	811d684 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 811d680:	4b4f      	ldr	r3, [pc, #316]	@ (811d7c0 <netif_add+0x184>)
 811d682:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 811d684:	687b      	ldr	r3, [r7, #4]
 811d686:	2b00      	cmp	r3, #0
 811d688:	d101      	bne.n	811d68e <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 811d68a:	4b4d      	ldr	r3, [pc, #308]	@ (811d7c0 <netif_add+0x184>)
 811d68c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 811d68e:	683b      	ldr	r3, [r7, #0]
 811d690:	2b00      	cmp	r3, #0
 811d692:	d101      	bne.n	811d698 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 811d694:	4b4a      	ldr	r3, [pc, #296]	@ (811d7c0 <netif_add+0x184>)
 811d696:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 811d698:	68fb      	ldr	r3, [r7, #12]
 811d69a:	2200      	movs	r2, #0
 811d69c:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 811d69e:	68fb      	ldr	r3, [r7, #12]
 811d6a0:	2200      	movs	r2, #0
 811d6a2:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 811d6a4:	68fb      	ldr	r3, [r7, #12]
 811d6a6:	2200      	movs	r2, #0
 811d6a8:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 811d6aa:	68fb      	ldr	r3, [r7, #12]
 811d6ac:	4a45      	ldr	r2, [pc, #276]	@ (811d7c4 <netif_add+0x188>)
 811d6ae:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 811d6b0:	68fb      	ldr	r3, [r7, #12]
 811d6b2:	2200      	movs	r2, #0
 811d6b4:	849a      	strh	r2, [r3, #36]	@ 0x24
  netif->flags = 0;
 811d6b6:	68fb      	ldr	r3, [r7, #12]
 811d6b8:	2200      	movs	r2, #0
 811d6ba:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 811d6be:	68fb      	ldr	r3, [r7, #12]
 811d6c0:	2200      	movs	r2, #0
 811d6c2:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 811d6c4:	68fb      	ldr	r3, [r7, #12]
 811d6c6:	6a3a      	ldr	r2, [r7, #32]
 811d6c8:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 811d6ca:	4b3f      	ldr	r3, [pc, #252]	@ (811d7c8 <netif_add+0x18c>)
 811d6cc:	781a      	ldrb	r2, [r3, #0]
 811d6ce:	68fb      	ldr	r3, [r7, #12]
 811d6d0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  netif->input = input;
 811d6d4:	68fb      	ldr	r3, [r7, #12]
 811d6d6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 811d6d8:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 811d6da:	683b      	ldr	r3, [r7, #0]
 811d6dc:	687a      	ldr	r2, [r7, #4]
 811d6de:	68b9      	ldr	r1, [r7, #8]
 811d6e0:	68f8      	ldr	r0, [r7, #12]
 811d6e2:	f000 f913 	bl	811d90c <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 811d6e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811d6e8:	68f8      	ldr	r0, [r7, #12]
 811d6ea:	4798      	blx	r3
 811d6ec:	4603      	mov	r3, r0
 811d6ee:	2b00      	cmp	r3, #0
 811d6f0:	d001      	beq.n	811d6f6 <netif_add+0xba>
    return NULL;
 811d6f2:	2300      	movs	r3, #0
 811d6f4:	e058      	b.n	811d7a8 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 811d6f6:	68fb      	ldr	r3, [r7, #12]
 811d6f8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 811d6fc:	2bff      	cmp	r3, #255	@ 0xff
 811d6fe:	d103      	bne.n	811d708 <netif_add+0xcc>
        netif->num = 0;
 811d700:	68fb      	ldr	r3, [r7, #12]
 811d702:	2200      	movs	r2, #0
 811d704:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      }
      num_netifs = 0;
 811d708:	2300      	movs	r3, #0
 811d70a:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 811d70c:	4b2f      	ldr	r3, [pc, #188]	@ (811d7cc <netif_add+0x190>)
 811d70e:	681b      	ldr	r3, [r3, #0]
 811d710:	617b      	str	r3, [r7, #20]
 811d712:	e02b      	b.n	811d76c <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 811d714:	697a      	ldr	r2, [r7, #20]
 811d716:	68fb      	ldr	r3, [r7, #12]
 811d718:	429a      	cmp	r2, r3
 811d71a:	d106      	bne.n	811d72a <netif_add+0xee>
 811d71c:	4b24      	ldr	r3, [pc, #144]	@ (811d7b0 <netif_add+0x174>)
 811d71e:	f240 128b 	movw	r2, #395	@ 0x18b
 811d722:	492b      	ldr	r1, [pc, #172]	@ (811d7d0 <netif_add+0x194>)
 811d724:	4824      	ldr	r0, [pc, #144]	@ (811d7b8 <netif_add+0x17c>)
 811d726:	f009 f9a5 	bl	8126a74 <iprintf>
        num_netifs++;
 811d72a:	693b      	ldr	r3, [r7, #16]
 811d72c:	3301      	adds	r3, #1
 811d72e:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 811d730:	693b      	ldr	r3, [r7, #16]
 811d732:	2bff      	cmp	r3, #255	@ 0xff
 811d734:	dd06      	ble.n	811d744 <netif_add+0x108>
 811d736:	4b1e      	ldr	r3, [pc, #120]	@ (811d7b0 <netif_add+0x174>)
 811d738:	f240 128d 	movw	r2, #397	@ 0x18d
 811d73c:	4925      	ldr	r1, [pc, #148]	@ (811d7d4 <netif_add+0x198>)
 811d73e:	481e      	ldr	r0, [pc, #120]	@ (811d7b8 <netif_add+0x17c>)
 811d740:	f009 f998 	bl	8126a74 <iprintf>
        if (netif2->num == netif->num) {
 811d744:	697b      	ldr	r3, [r7, #20]
 811d746:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 811d74a:	68fb      	ldr	r3, [r7, #12]
 811d74c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 811d750:	429a      	cmp	r2, r3
 811d752:	d108      	bne.n	811d766 <netif_add+0x12a>
          netif->num++;
 811d754:	68fb      	ldr	r3, [r7, #12]
 811d756:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 811d75a:	3301      	adds	r3, #1
 811d75c:	b2da      	uxtb	r2, r3
 811d75e:	68fb      	ldr	r3, [r7, #12]
 811d760:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          break;
 811d764:	e005      	b.n	811d772 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 811d766:	697b      	ldr	r3, [r7, #20]
 811d768:	681b      	ldr	r3, [r3, #0]
 811d76a:	617b      	str	r3, [r7, #20]
 811d76c:	697b      	ldr	r3, [r7, #20]
 811d76e:	2b00      	cmp	r3, #0
 811d770:	d1d0      	bne.n	811d714 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 811d772:	697b      	ldr	r3, [r7, #20]
 811d774:	2b00      	cmp	r3, #0
 811d776:	d1be      	bne.n	811d6f6 <netif_add+0xba>
  }
  if (netif->num == 254) {
 811d778:	68fb      	ldr	r3, [r7, #12]
 811d77a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 811d77e:	2bfe      	cmp	r3, #254	@ 0xfe
 811d780:	d103      	bne.n	811d78a <netif_add+0x14e>
    netif_num = 0;
 811d782:	4b11      	ldr	r3, [pc, #68]	@ (811d7c8 <netif_add+0x18c>)
 811d784:	2200      	movs	r2, #0
 811d786:	701a      	strb	r2, [r3, #0]
 811d788:	e006      	b.n	811d798 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 811d78a:	68fb      	ldr	r3, [r7, #12]
 811d78c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 811d790:	3301      	adds	r3, #1
 811d792:	b2da      	uxtb	r2, r3
 811d794:	4b0c      	ldr	r3, [pc, #48]	@ (811d7c8 <netif_add+0x18c>)
 811d796:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 811d798:	4b0c      	ldr	r3, [pc, #48]	@ (811d7cc <netif_add+0x190>)
 811d79a:	681a      	ldr	r2, [r3, #0]
 811d79c:	68fb      	ldr	r3, [r7, #12]
 811d79e:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 811d7a0:	4a0a      	ldr	r2, [pc, #40]	@ (811d7cc <netif_add+0x190>)
 811d7a2:	68fb      	ldr	r3, [r7, #12]
 811d7a4:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 811d7a6:	68fb      	ldr	r3, [r7, #12]
}
 811d7a8:	4618      	mov	r0, r3
 811d7aa:	3718      	adds	r7, #24
 811d7ac:	46bd      	mov	sp, r7
 811d7ae:	bd80      	pop	{r7, pc}
 811d7b0:	08128ad8 	.word	0x08128ad8
 811d7b4:	08128bac 	.word	0x08128bac
 811d7b8:	08128b68 	.word	0x08128b68
 811d7bc:	08128bc8 	.word	0x08128bc8
 811d7c0:	0812ae4c 	.word	0x0812ae4c
 811d7c4:	0811dbe7 	.word	0x0811dbe7
 811d7c8:	1000e504 	.word	0x1000e504
 811d7cc:	1000e4fc 	.word	0x1000e4fc
 811d7d0:	08128bec 	.word	0x08128bec
 811d7d4:	08128c00 	.word	0x08128c00

0811d7d8 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 811d7d8:	b580      	push	{r7, lr}
 811d7da:	b082      	sub	sp, #8
 811d7dc:	af00      	add	r7, sp, #0
 811d7de:	6078      	str	r0, [r7, #4]
 811d7e0:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 811d7e2:	6839      	ldr	r1, [r7, #0]
 811d7e4:	6878      	ldr	r0, [r7, #4]
 811d7e6:	f002 fee5 	bl	81205b4 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 811d7ea:	6839      	ldr	r1, [r7, #0]
 811d7ec:	6878      	ldr	r0, [r7, #4]
 811d7ee:	f008 f899 	bl	8125924 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 811d7f2:	bf00      	nop
 811d7f4:	3708      	adds	r7, #8
 811d7f6:	46bd      	mov	sp, r7
 811d7f8:	bd80      	pop	{r7, pc}
	...

0811d7fc <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 811d7fc:	b580      	push	{r7, lr}
 811d7fe:	b086      	sub	sp, #24
 811d800:	af00      	add	r7, sp, #0
 811d802:	60f8      	str	r0, [r7, #12]
 811d804:	60b9      	str	r1, [r7, #8]
 811d806:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 811d808:	68bb      	ldr	r3, [r7, #8]
 811d80a:	2b00      	cmp	r3, #0
 811d80c:	d106      	bne.n	811d81c <netif_do_set_ipaddr+0x20>
 811d80e:	4b1d      	ldr	r3, [pc, #116]	@ (811d884 <netif_do_set_ipaddr+0x88>)
 811d810:	f240 12cb 	movw	r2, #459	@ 0x1cb
 811d814:	491c      	ldr	r1, [pc, #112]	@ (811d888 <netif_do_set_ipaddr+0x8c>)
 811d816:	481d      	ldr	r0, [pc, #116]	@ (811d88c <netif_do_set_ipaddr+0x90>)
 811d818:	f009 f92c 	bl	8126a74 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 811d81c:	687b      	ldr	r3, [r7, #4]
 811d81e:	2b00      	cmp	r3, #0
 811d820:	d106      	bne.n	811d830 <netif_do_set_ipaddr+0x34>
 811d822:	4b18      	ldr	r3, [pc, #96]	@ (811d884 <netif_do_set_ipaddr+0x88>)
 811d824:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 811d828:	4917      	ldr	r1, [pc, #92]	@ (811d888 <netif_do_set_ipaddr+0x8c>)
 811d82a:	4818      	ldr	r0, [pc, #96]	@ (811d88c <netif_do_set_ipaddr+0x90>)
 811d82c:	f009 f922 	bl	8126a74 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 811d830:	68bb      	ldr	r3, [r7, #8]
 811d832:	681a      	ldr	r2, [r3, #0]
 811d834:	68fb      	ldr	r3, [r7, #12]
 811d836:	3304      	adds	r3, #4
 811d838:	681b      	ldr	r3, [r3, #0]
 811d83a:	429a      	cmp	r2, r3
 811d83c:	d01c      	beq.n	811d878 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 811d83e:	68bb      	ldr	r3, [r7, #8]
 811d840:	681b      	ldr	r3, [r3, #0]
 811d842:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 811d844:	68fb      	ldr	r3, [r7, #12]
 811d846:	3304      	adds	r3, #4
 811d848:	681a      	ldr	r2, [r3, #0]
 811d84a:	687b      	ldr	r3, [r7, #4]
 811d84c:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 811d84e:	f107 0314 	add.w	r3, r7, #20
 811d852:	4619      	mov	r1, r3
 811d854:	6878      	ldr	r0, [r7, #4]
 811d856:	f7ff ffbf 	bl	811d7d8 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 811d85a:	68bb      	ldr	r3, [r7, #8]
 811d85c:	2b00      	cmp	r3, #0
 811d85e:	d002      	beq.n	811d866 <netif_do_set_ipaddr+0x6a>
 811d860:	68bb      	ldr	r3, [r7, #8]
 811d862:	681b      	ldr	r3, [r3, #0]
 811d864:	e000      	b.n	811d868 <netif_do_set_ipaddr+0x6c>
 811d866:	2300      	movs	r3, #0
 811d868:	68fa      	ldr	r2, [r7, #12]
 811d86a:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 811d86c:	2101      	movs	r1, #1
 811d86e:	68f8      	ldr	r0, [r7, #12]
 811d870:	f000 f8d2 	bl	811da18 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 811d874:	2301      	movs	r3, #1
 811d876:	e000      	b.n	811d87a <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 811d878:	2300      	movs	r3, #0
}
 811d87a:	4618      	mov	r0, r3
 811d87c:	3718      	adds	r7, #24
 811d87e:	46bd      	mov	sp, r7
 811d880:	bd80      	pop	{r7, pc}
 811d882:	bf00      	nop
 811d884:	08128ad8 	.word	0x08128ad8
 811d888:	08128c30 	.word	0x08128c30
 811d88c:	08128b68 	.word	0x08128b68

0811d890 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 811d890:	b480      	push	{r7}
 811d892:	b085      	sub	sp, #20
 811d894:	af00      	add	r7, sp, #0
 811d896:	60f8      	str	r0, [r7, #12]
 811d898:	60b9      	str	r1, [r7, #8]
 811d89a:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 811d89c:	68bb      	ldr	r3, [r7, #8]
 811d89e:	681a      	ldr	r2, [r3, #0]
 811d8a0:	68fb      	ldr	r3, [r7, #12]
 811d8a2:	3308      	adds	r3, #8
 811d8a4:	681b      	ldr	r3, [r3, #0]
 811d8a6:	429a      	cmp	r2, r3
 811d8a8:	d00a      	beq.n	811d8c0 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 811d8aa:	68bb      	ldr	r3, [r7, #8]
 811d8ac:	2b00      	cmp	r3, #0
 811d8ae:	d002      	beq.n	811d8b6 <netif_do_set_netmask+0x26>
 811d8b0:	68bb      	ldr	r3, [r7, #8]
 811d8b2:	681b      	ldr	r3, [r3, #0]
 811d8b4:	e000      	b.n	811d8b8 <netif_do_set_netmask+0x28>
 811d8b6:	2300      	movs	r3, #0
 811d8b8:	68fa      	ldr	r2, [r7, #12]
 811d8ba:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 811d8bc:	2301      	movs	r3, #1
 811d8be:	e000      	b.n	811d8c2 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 811d8c0:	2300      	movs	r3, #0
}
 811d8c2:	4618      	mov	r0, r3
 811d8c4:	3714      	adds	r7, #20
 811d8c6:	46bd      	mov	sp, r7
 811d8c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 811d8cc:	4770      	bx	lr

0811d8ce <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 811d8ce:	b480      	push	{r7}
 811d8d0:	b085      	sub	sp, #20
 811d8d2:	af00      	add	r7, sp, #0
 811d8d4:	60f8      	str	r0, [r7, #12]
 811d8d6:	60b9      	str	r1, [r7, #8]
 811d8d8:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 811d8da:	68bb      	ldr	r3, [r7, #8]
 811d8dc:	681a      	ldr	r2, [r3, #0]
 811d8de:	68fb      	ldr	r3, [r7, #12]
 811d8e0:	330c      	adds	r3, #12
 811d8e2:	681b      	ldr	r3, [r3, #0]
 811d8e4:	429a      	cmp	r2, r3
 811d8e6:	d00a      	beq.n	811d8fe <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 811d8e8:	68bb      	ldr	r3, [r7, #8]
 811d8ea:	2b00      	cmp	r3, #0
 811d8ec:	d002      	beq.n	811d8f4 <netif_do_set_gw+0x26>
 811d8ee:	68bb      	ldr	r3, [r7, #8]
 811d8f0:	681b      	ldr	r3, [r3, #0]
 811d8f2:	e000      	b.n	811d8f6 <netif_do_set_gw+0x28>
 811d8f4:	2300      	movs	r3, #0
 811d8f6:	68fa      	ldr	r2, [r7, #12]
 811d8f8:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 811d8fa:	2301      	movs	r3, #1
 811d8fc:	e000      	b.n	811d900 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 811d8fe:	2300      	movs	r3, #0
}
 811d900:	4618      	mov	r0, r3
 811d902:	3714      	adds	r7, #20
 811d904:	46bd      	mov	sp, r7
 811d906:	f85d 7b04 	ldr.w	r7, [sp], #4
 811d90a:	4770      	bx	lr

0811d90c <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 811d90c:	b580      	push	{r7, lr}
 811d90e:	b088      	sub	sp, #32
 811d910:	af00      	add	r7, sp, #0
 811d912:	60f8      	str	r0, [r7, #12]
 811d914:	60b9      	str	r1, [r7, #8]
 811d916:	607a      	str	r2, [r7, #4]
 811d918:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 811d91a:	2300      	movs	r3, #0
 811d91c:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 811d91e:	2300      	movs	r3, #0
 811d920:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 811d922:	68bb      	ldr	r3, [r7, #8]
 811d924:	2b00      	cmp	r3, #0
 811d926:	d101      	bne.n	811d92c <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 811d928:	4b1c      	ldr	r3, [pc, #112]	@ (811d99c <netif_set_addr+0x90>)
 811d92a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 811d92c:	687b      	ldr	r3, [r7, #4]
 811d92e:	2b00      	cmp	r3, #0
 811d930:	d101      	bne.n	811d936 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 811d932:	4b1a      	ldr	r3, [pc, #104]	@ (811d99c <netif_set_addr+0x90>)
 811d934:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 811d936:	683b      	ldr	r3, [r7, #0]
 811d938:	2b00      	cmp	r3, #0
 811d93a:	d101      	bne.n	811d940 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 811d93c:	4b17      	ldr	r3, [pc, #92]	@ (811d99c <netif_set_addr+0x90>)
 811d93e:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 811d940:	68bb      	ldr	r3, [r7, #8]
 811d942:	2b00      	cmp	r3, #0
 811d944:	d003      	beq.n	811d94e <netif_set_addr+0x42>
 811d946:	68bb      	ldr	r3, [r7, #8]
 811d948:	681b      	ldr	r3, [r3, #0]
 811d94a:	2b00      	cmp	r3, #0
 811d94c:	d101      	bne.n	811d952 <netif_set_addr+0x46>
 811d94e:	2301      	movs	r3, #1
 811d950:	e000      	b.n	811d954 <netif_set_addr+0x48>
 811d952:	2300      	movs	r3, #0
 811d954:	617b      	str	r3, [r7, #20]
  if (remove) {
 811d956:	697b      	ldr	r3, [r7, #20]
 811d958:	2b00      	cmp	r3, #0
 811d95a:	d006      	beq.n	811d96a <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 811d95c:	f107 0310 	add.w	r3, r7, #16
 811d960:	461a      	mov	r2, r3
 811d962:	68b9      	ldr	r1, [r7, #8]
 811d964:	68f8      	ldr	r0, [r7, #12]
 811d966:	f7ff ff49 	bl	811d7fc <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 811d96a:	69fa      	ldr	r2, [r7, #28]
 811d96c:	6879      	ldr	r1, [r7, #4]
 811d96e:	68f8      	ldr	r0, [r7, #12]
 811d970:	f7ff ff8e 	bl	811d890 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 811d974:	69ba      	ldr	r2, [r7, #24]
 811d976:	6839      	ldr	r1, [r7, #0]
 811d978:	68f8      	ldr	r0, [r7, #12]
 811d97a:	f7ff ffa8 	bl	811d8ce <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 811d97e:	697b      	ldr	r3, [r7, #20]
 811d980:	2b00      	cmp	r3, #0
 811d982:	d106      	bne.n	811d992 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 811d984:	f107 0310 	add.w	r3, r7, #16
 811d988:	461a      	mov	r2, r3
 811d98a:	68b9      	ldr	r1, [r7, #8]
 811d98c:	68f8      	ldr	r0, [r7, #12]
 811d98e:	f7ff ff35 	bl	811d7fc <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 811d992:	bf00      	nop
 811d994:	3720      	adds	r7, #32
 811d996:	46bd      	mov	sp, r7
 811d998:	bd80      	pop	{r7, pc}
 811d99a:	bf00      	nop
 811d99c:	0812ae4c 	.word	0x0812ae4c

0811d9a0 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 811d9a0:	b480      	push	{r7}
 811d9a2:	b083      	sub	sp, #12
 811d9a4:	af00      	add	r7, sp, #0
 811d9a6:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 811d9a8:	4a04      	ldr	r2, [pc, #16]	@ (811d9bc <netif_set_default+0x1c>)
 811d9aa:	687b      	ldr	r3, [r7, #4]
 811d9ac:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 811d9ae:	bf00      	nop
 811d9b0:	370c      	adds	r7, #12
 811d9b2:	46bd      	mov	sp, r7
 811d9b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 811d9b8:	4770      	bx	lr
 811d9ba:	bf00      	nop
 811d9bc:	1000e500 	.word	0x1000e500

0811d9c0 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 811d9c0:	b580      	push	{r7, lr}
 811d9c2:	b082      	sub	sp, #8
 811d9c4:	af00      	add	r7, sp, #0
 811d9c6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 811d9c8:	687b      	ldr	r3, [r7, #4]
 811d9ca:	2b00      	cmp	r3, #0
 811d9cc:	d107      	bne.n	811d9de <netif_set_up+0x1e>
 811d9ce:	4b0f      	ldr	r3, [pc, #60]	@ (811da0c <netif_set_up+0x4c>)
 811d9d0:	f44f 7254 	mov.w	r2, #848	@ 0x350
 811d9d4:	490e      	ldr	r1, [pc, #56]	@ (811da10 <netif_set_up+0x50>)
 811d9d6:	480f      	ldr	r0, [pc, #60]	@ (811da14 <netif_set_up+0x54>)
 811d9d8:	f009 f84c 	bl	8126a74 <iprintf>
 811d9dc:	e013      	b.n	811da06 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 811d9de:	687b      	ldr	r3, [r7, #4]
 811d9e0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 811d9e4:	f003 0301 	and.w	r3, r3, #1
 811d9e8:	2b00      	cmp	r3, #0
 811d9ea:	d10c      	bne.n	811da06 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 811d9ec:	687b      	ldr	r3, [r7, #4]
 811d9ee:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 811d9f2:	f043 0301 	orr.w	r3, r3, #1
 811d9f6:	b2da      	uxtb	r2, r3
 811d9f8:	687b      	ldr	r3, [r7, #4]
 811d9fa:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 811d9fe:	2103      	movs	r1, #3
 811da00:	6878      	ldr	r0, [r7, #4]
 811da02:	f000 f809 	bl	811da18 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 811da06:	3708      	adds	r7, #8
 811da08:	46bd      	mov	sp, r7
 811da0a:	bd80      	pop	{r7, pc}
 811da0c:	08128ad8 	.word	0x08128ad8
 811da10:	08128ca0 	.word	0x08128ca0
 811da14:	08128b68 	.word	0x08128b68

0811da18 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 811da18:	b580      	push	{r7, lr}
 811da1a:	b082      	sub	sp, #8
 811da1c:	af00      	add	r7, sp, #0
 811da1e:	6078      	str	r0, [r7, #4]
 811da20:	460b      	mov	r3, r1
 811da22:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 811da24:	687b      	ldr	r3, [r7, #4]
 811da26:	2b00      	cmp	r3, #0
 811da28:	d106      	bne.n	811da38 <netif_issue_reports+0x20>
 811da2a:	4b18      	ldr	r3, [pc, #96]	@ (811da8c <netif_issue_reports+0x74>)
 811da2c:	f240 326d 	movw	r2, #877	@ 0x36d
 811da30:	4917      	ldr	r1, [pc, #92]	@ (811da90 <netif_issue_reports+0x78>)
 811da32:	4818      	ldr	r0, [pc, #96]	@ (811da94 <netif_issue_reports+0x7c>)
 811da34:	f009 f81e 	bl	8126a74 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 811da38:	687b      	ldr	r3, [r7, #4]
 811da3a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 811da3e:	f003 0304 	and.w	r3, r3, #4
 811da42:	2b00      	cmp	r3, #0
 811da44:	d01e      	beq.n	811da84 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 811da46:	687b      	ldr	r3, [r7, #4]
 811da48:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 811da4c:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 811da50:	2b00      	cmp	r3, #0
 811da52:	d017      	beq.n	811da84 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 811da54:	78fb      	ldrb	r3, [r7, #3]
 811da56:	f003 0301 	and.w	r3, r3, #1
 811da5a:	2b00      	cmp	r3, #0
 811da5c:	d013      	beq.n	811da86 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 811da5e:	687b      	ldr	r3, [r7, #4]
 811da60:	3304      	adds	r3, #4
 811da62:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 811da64:	2b00      	cmp	r3, #0
 811da66:	d00e      	beq.n	811da86 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 811da68:	687b      	ldr	r3, [r7, #4]
 811da6a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 811da6e:	f003 0308 	and.w	r3, r3, #8
 811da72:	2b00      	cmp	r3, #0
 811da74:	d007      	beq.n	811da86 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 811da76:	687b      	ldr	r3, [r7, #4]
 811da78:	3304      	adds	r3, #4
 811da7a:	4619      	mov	r1, r3
 811da7c:	6878      	ldr	r0, [r7, #4]
 811da7e:	f7fd fa77 	bl	811af70 <etharp_request>
 811da82:	e000      	b.n	811da86 <netif_issue_reports+0x6e>
    return;
 811da84:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 811da86:	3708      	adds	r7, #8
 811da88:	46bd      	mov	sp, r7
 811da8a:	bd80      	pop	{r7, pc}
 811da8c:	08128ad8 	.word	0x08128ad8
 811da90:	08128cbc 	.word	0x08128cbc
 811da94:	08128b68 	.word	0x08128b68

0811da98 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 811da98:	b580      	push	{r7, lr}
 811da9a:	b082      	sub	sp, #8
 811da9c:	af00      	add	r7, sp, #0
 811da9e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 811daa0:	687b      	ldr	r3, [r7, #4]
 811daa2:	2b00      	cmp	r3, #0
 811daa4:	d107      	bne.n	811dab6 <netif_set_down+0x1e>
 811daa6:	4b12      	ldr	r3, [pc, #72]	@ (811daf0 <netif_set_down+0x58>)
 811daa8:	f240 329b 	movw	r2, #923	@ 0x39b
 811daac:	4911      	ldr	r1, [pc, #68]	@ (811daf4 <netif_set_down+0x5c>)
 811daae:	4812      	ldr	r0, [pc, #72]	@ (811daf8 <netif_set_down+0x60>)
 811dab0:	f008 ffe0 	bl	8126a74 <iprintf>
 811dab4:	e019      	b.n	811daea <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 811dab6:	687b      	ldr	r3, [r7, #4]
 811dab8:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 811dabc:	f003 0301 	and.w	r3, r3, #1
 811dac0:	2b00      	cmp	r3, #0
 811dac2:	d012      	beq.n	811daea <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 811dac4:	687b      	ldr	r3, [r7, #4]
 811dac6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 811daca:	f023 0301 	bic.w	r3, r3, #1
 811dace:	b2da      	uxtb	r2, r3
 811dad0:	687b      	ldr	r3, [r7, #4]
 811dad2:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 811dad6:	687b      	ldr	r3, [r7, #4]
 811dad8:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 811dadc:	f003 0308 	and.w	r3, r3, #8
 811dae0:	2b00      	cmp	r3, #0
 811dae2:	d002      	beq.n	811daea <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 811dae4:	6878      	ldr	r0, [r7, #4]
 811dae6:	f7fc fdb5 	bl	811a654 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 811daea:	3708      	adds	r7, #8
 811daec:	46bd      	mov	sp, r7
 811daee:	bd80      	pop	{r7, pc}
 811daf0:	08128ad8 	.word	0x08128ad8
 811daf4:	08128ce0 	.word	0x08128ce0
 811daf8:	08128b68 	.word	0x08128b68

0811dafc <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 811dafc:	b580      	push	{r7, lr}
 811dafe:	b082      	sub	sp, #8
 811db00:	af00      	add	r7, sp, #0
 811db02:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 811db04:	687b      	ldr	r3, [r7, #4]
 811db06:	2b00      	cmp	r3, #0
 811db08:	d107      	bne.n	811db1a <netif_set_link_up+0x1e>
 811db0a:	4b13      	ldr	r3, [pc, #76]	@ (811db58 <netif_set_link_up+0x5c>)
 811db0c:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 811db10:	4912      	ldr	r1, [pc, #72]	@ (811db5c <netif_set_link_up+0x60>)
 811db12:	4813      	ldr	r0, [pc, #76]	@ (811db60 <netif_set_link_up+0x64>)
 811db14:	f008 ffae 	bl	8126a74 <iprintf>
 811db18:	e01b      	b.n	811db52 <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 811db1a:	687b      	ldr	r3, [r7, #4]
 811db1c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 811db20:	f003 0304 	and.w	r3, r3, #4
 811db24:	2b00      	cmp	r3, #0
 811db26:	d114      	bne.n	811db52 <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 811db28:	687b      	ldr	r3, [r7, #4]
 811db2a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 811db2e:	f043 0304 	orr.w	r3, r3, #4
 811db32:	b2da      	uxtb	r2, r3
 811db34:	687b      	ldr	r3, [r7, #4]
 811db36:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 811db3a:	2103      	movs	r1, #3
 811db3c:	6878      	ldr	r0, [r7, #4]
 811db3e:	f7ff ff6b 	bl	811da18 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 811db42:	687b      	ldr	r3, [r7, #4]
 811db44:	69db      	ldr	r3, [r3, #28]
 811db46:	2b00      	cmp	r3, #0
 811db48:	d003      	beq.n	811db52 <netif_set_link_up+0x56>
 811db4a:	687b      	ldr	r3, [r7, #4]
 811db4c:	69db      	ldr	r3, [r3, #28]
 811db4e:	6878      	ldr	r0, [r7, #4]
 811db50:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 811db52:	3708      	adds	r7, #8
 811db54:	46bd      	mov	sp, r7
 811db56:	bd80      	pop	{r7, pc}
 811db58:	08128ad8 	.word	0x08128ad8
 811db5c:	08128d00 	.word	0x08128d00
 811db60:	08128b68 	.word	0x08128b68

0811db64 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 811db64:	b580      	push	{r7, lr}
 811db66:	b082      	sub	sp, #8
 811db68:	af00      	add	r7, sp, #0
 811db6a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 811db6c:	687b      	ldr	r3, [r7, #4]
 811db6e:	2b00      	cmp	r3, #0
 811db70:	d107      	bne.n	811db82 <netif_set_link_down+0x1e>
 811db72:	4b11      	ldr	r3, [pc, #68]	@ (811dbb8 <netif_set_link_down+0x54>)
 811db74:	f240 4206 	movw	r2, #1030	@ 0x406
 811db78:	4910      	ldr	r1, [pc, #64]	@ (811dbbc <netif_set_link_down+0x58>)
 811db7a:	4811      	ldr	r0, [pc, #68]	@ (811dbc0 <netif_set_link_down+0x5c>)
 811db7c:	f008 ff7a 	bl	8126a74 <iprintf>
 811db80:	e017      	b.n	811dbb2 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 811db82:	687b      	ldr	r3, [r7, #4]
 811db84:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 811db88:	f003 0304 	and.w	r3, r3, #4
 811db8c:	2b00      	cmp	r3, #0
 811db8e:	d010      	beq.n	811dbb2 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 811db90:	687b      	ldr	r3, [r7, #4]
 811db92:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 811db96:	f023 0304 	bic.w	r3, r3, #4
 811db9a:	b2da      	uxtb	r2, r3
 811db9c:	687b      	ldr	r3, [r7, #4]
 811db9e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    NETIF_LINK_CALLBACK(netif);
 811dba2:	687b      	ldr	r3, [r7, #4]
 811dba4:	69db      	ldr	r3, [r3, #28]
 811dba6:	2b00      	cmp	r3, #0
 811dba8:	d003      	beq.n	811dbb2 <netif_set_link_down+0x4e>
 811dbaa:	687b      	ldr	r3, [r7, #4]
 811dbac:	69db      	ldr	r3, [r3, #28]
 811dbae:	6878      	ldr	r0, [r7, #4]
 811dbb0:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 811dbb2:	3708      	adds	r7, #8
 811dbb4:	46bd      	mov	sp, r7
 811dbb6:	bd80      	pop	{r7, pc}
 811dbb8:	08128ad8 	.word	0x08128ad8
 811dbbc:	08128d24 	.word	0x08128d24
 811dbc0:	08128b68 	.word	0x08128b68

0811dbc4 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 811dbc4:	b480      	push	{r7}
 811dbc6:	b083      	sub	sp, #12
 811dbc8:	af00      	add	r7, sp, #0
 811dbca:	6078      	str	r0, [r7, #4]
 811dbcc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 811dbce:	687b      	ldr	r3, [r7, #4]
 811dbd0:	2b00      	cmp	r3, #0
 811dbd2:	d002      	beq.n	811dbda <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 811dbd4:	687b      	ldr	r3, [r7, #4]
 811dbd6:	683a      	ldr	r2, [r7, #0]
 811dbd8:	61da      	str	r2, [r3, #28]
  }
}
 811dbda:	bf00      	nop
 811dbdc:	370c      	adds	r7, #12
 811dbde:	46bd      	mov	sp, r7
 811dbe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 811dbe4:	4770      	bx	lr

0811dbe6 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 811dbe6:	b480      	push	{r7}
 811dbe8:	b085      	sub	sp, #20
 811dbea:	af00      	add	r7, sp, #0
 811dbec:	60f8      	str	r0, [r7, #12]
 811dbee:	60b9      	str	r1, [r7, #8]
 811dbf0:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 811dbf2:	f06f 030b 	mvn.w	r3, #11
}
 811dbf6:	4618      	mov	r0, r3
 811dbf8:	3714      	adds	r7, #20
 811dbfa:	46bd      	mov	sp, r7
 811dbfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 811dc00:	4770      	bx	lr
	...

0811dc04 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 811dc04:	b480      	push	{r7}
 811dc06:	b085      	sub	sp, #20
 811dc08:	af00      	add	r7, sp, #0
 811dc0a:	4603      	mov	r3, r0
 811dc0c:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 811dc0e:	79fb      	ldrb	r3, [r7, #7]
 811dc10:	2b00      	cmp	r3, #0
 811dc12:	d013      	beq.n	811dc3c <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 811dc14:	4b0d      	ldr	r3, [pc, #52]	@ (811dc4c <netif_get_by_index+0x48>)
 811dc16:	681b      	ldr	r3, [r3, #0]
 811dc18:	60fb      	str	r3, [r7, #12]
 811dc1a:	e00c      	b.n	811dc36 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 811dc1c:	68fb      	ldr	r3, [r7, #12]
 811dc1e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 811dc22:	3301      	adds	r3, #1
 811dc24:	b2db      	uxtb	r3, r3
 811dc26:	79fa      	ldrb	r2, [r7, #7]
 811dc28:	429a      	cmp	r2, r3
 811dc2a:	d101      	bne.n	811dc30 <netif_get_by_index+0x2c>
        return netif; /* found! */
 811dc2c:	68fb      	ldr	r3, [r7, #12]
 811dc2e:	e006      	b.n	811dc3e <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 811dc30:	68fb      	ldr	r3, [r7, #12]
 811dc32:	681b      	ldr	r3, [r3, #0]
 811dc34:	60fb      	str	r3, [r7, #12]
 811dc36:	68fb      	ldr	r3, [r7, #12]
 811dc38:	2b00      	cmp	r3, #0
 811dc3a:	d1ef      	bne.n	811dc1c <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 811dc3c:	2300      	movs	r3, #0
}
 811dc3e:	4618      	mov	r0, r3
 811dc40:	3714      	adds	r7, #20
 811dc42:	46bd      	mov	sp, r7
 811dc44:	f85d 7b04 	ldr.w	r7, [sp], #4
 811dc48:	4770      	bx	lr
 811dc4a:	bf00      	nop
 811dc4c:	1000e4fc 	.word	0x1000e4fc

0811dc50 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 811dc50:	b580      	push	{r7, lr}
 811dc52:	b082      	sub	sp, #8
 811dc54:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 811dc56:	f000 fedf 	bl	811ea18 <sys_arch_protect>
 811dc5a:	6038      	str	r0, [r7, #0]
 811dc5c:	4b0d      	ldr	r3, [pc, #52]	@ (811dc94 <pbuf_free_ooseq+0x44>)
 811dc5e:	2200      	movs	r2, #0
 811dc60:	701a      	strb	r2, [r3, #0]
 811dc62:	6838      	ldr	r0, [r7, #0]
 811dc64:	f000 fee6 	bl	811ea34 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 811dc68:	4b0b      	ldr	r3, [pc, #44]	@ (811dc98 <pbuf_free_ooseq+0x48>)
 811dc6a:	681b      	ldr	r3, [r3, #0]
 811dc6c:	607b      	str	r3, [r7, #4]
 811dc6e:	e00a      	b.n	811dc86 <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 811dc70:	687b      	ldr	r3, [r7, #4]
 811dc72:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 811dc74:	2b00      	cmp	r3, #0
 811dc76:	d003      	beq.n	811dc80 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 811dc78:	6878      	ldr	r0, [r7, #4]
 811dc7a:	f002 fcd9 	bl	8120630 <tcp_free_ooseq>
      return;
 811dc7e:	e005      	b.n	811dc8c <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 811dc80:	687b      	ldr	r3, [r7, #4]
 811dc82:	68db      	ldr	r3, [r3, #12]
 811dc84:	607b      	str	r3, [r7, #4]
 811dc86:	687b      	ldr	r3, [r7, #4]
 811dc88:	2b00      	cmp	r3, #0
 811dc8a:	d1f1      	bne.n	811dc70 <pbuf_free_ooseq+0x20>
    }
  }
}
 811dc8c:	3708      	adds	r7, #8
 811dc8e:	46bd      	mov	sp, r7
 811dc90:	bd80      	pop	{r7, pc}
 811dc92:	bf00      	nop
 811dc94:	1000e505 	.word	0x1000e505
 811dc98:	1000e518 	.word	0x1000e518

0811dc9c <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 811dc9c:	b580      	push	{r7, lr}
 811dc9e:	b082      	sub	sp, #8
 811dca0:	af00      	add	r7, sp, #0
 811dca2:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 811dca4:	f7ff ffd4 	bl	811dc50 <pbuf_free_ooseq>
}
 811dca8:	bf00      	nop
 811dcaa:	3708      	adds	r7, #8
 811dcac:	46bd      	mov	sp, r7
 811dcae:	bd80      	pop	{r7, pc}

0811dcb0 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 811dcb0:	b580      	push	{r7, lr}
 811dcb2:	b082      	sub	sp, #8
 811dcb4:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 811dcb6:	f000 feaf 	bl	811ea18 <sys_arch_protect>
 811dcba:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 811dcbc:	4b0f      	ldr	r3, [pc, #60]	@ (811dcfc <pbuf_pool_is_empty+0x4c>)
 811dcbe:	781b      	ldrb	r3, [r3, #0]
 811dcc0:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 811dcc2:	4b0e      	ldr	r3, [pc, #56]	@ (811dcfc <pbuf_pool_is_empty+0x4c>)
 811dcc4:	2201      	movs	r2, #1
 811dcc6:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 811dcc8:	6878      	ldr	r0, [r7, #4]
 811dcca:	f000 feb3 	bl	811ea34 <sys_arch_unprotect>

  if (!queued) {
 811dcce:	78fb      	ldrb	r3, [r7, #3]
 811dcd0:	2b00      	cmp	r3, #0
 811dcd2:	d10f      	bne.n	811dcf4 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 811dcd4:	2100      	movs	r1, #0
 811dcd6:	480a      	ldr	r0, [pc, #40]	@ (811dd00 <pbuf_pool_is_empty+0x50>)
 811dcd8:	f006 ff82 	bl	8124be0 <tcpip_try_callback>
 811dcdc:	4603      	mov	r3, r0
 811dcde:	2b00      	cmp	r3, #0
 811dce0:	d008      	beq.n	811dcf4 <pbuf_pool_is_empty+0x44>
 811dce2:	f000 fe99 	bl	811ea18 <sys_arch_protect>
 811dce6:	6078      	str	r0, [r7, #4]
 811dce8:	4b04      	ldr	r3, [pc, #16]	@ (811dcfc <pbuf_pool_is_empty+0x4c>)
 811dcea:	2200      	movs	r2, #0
 811dcec:	701a      	strb	r2, [r3, #0]
 811dcee:	6878      	ldr	r0, [r7, #4]
 811dcf0:	f000 fea0 	bl	811ea34 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 811dcf4:	bf00      	nop
 811dcf6:	3708      	adds	r7, #8
 811dcf8:	46bd      	mov	sp, r7
 811dcfa:	bd80      	pop	{r7, pc}
 811dcfc:	1000e505 	.word	0x1000e505
 811dd00:	0811dc9d 	.word	0x0811dc9d

0811dd04 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 811dd04:	b480      	push	{r7}
 811dd06:	b085      	sub	sp, #20
 811dd08:	af00      	add	r7, sp, #0
 811dd0a:	60f8      	str	r0, [r7, #12]
 811dd0c:	60b9      	str	r1, [r7, #8]
 811dd0e:	4611      	mov	r1, r2
 811dd10:	461a      	mov	r2, r3
 811dd12:	460b      	mov	r3, r1
 811dd14:	80fb      	strh	r3, [r7, #6]
 811dd16:	4613      	mov	r3, r2
 811dd18:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 811dd1a:	68fb      	ldr	r3, [r7, #12]
 811dd1c:	2200      	movs	r2, #0
 811dd1e:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 811dd20:	68fb      	ldr	r3, [r7, #12]
 811dd22:	68ba      	ldr	r2, [r7, #8]
 811dd24:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 811dd26:	68fb      	ldr	r3, [r7, #12]
 811dd28:	88fa      	ldrh	r2, [r7, #6]
 811dd2a:	811a      	strh	r2, [r3, #8]
  p->len = len;
 811dd2c:	68fb      	ldr	r3, [r7, #12]
 811dd2e:	88ba      	ldrh	r2, [r7, #4]
 811dd30:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 811dd32:	8b3b      	ldrh	r3, [r7, #24]
 811dd34:	b2da      	uxtb	r2, r3
 811dd36:	68fb      	ldr	r3, [r7, #12]
 811dd38:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 811dd3a:	68fb      	ldr	r3, [r7, #12]
 811dd3c:	7f3a      	ldrb	r2, [r7, #28]
 811dd3e:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 811dd40:	68fb      	ldr	r3, [r7, #12]
 811dd42:	2201      	movs	r2, #1
 811dd44:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 811dd46:	68fb      	ldr	r3, [r7, #12]
 811dd48:	2200      	movs	r2, #0
 811dd4a:	73da      	strb	r2, [r3, #15]
}
 811dd4c:	bf00      	nop
 811dd4e:	3714      	adds	r7, #20
 811dd50:	46bd      	mov	sp, r7
 811dd52:	f85d 7b04 	ldr.w	r7, [sp], #4
 811dd56:	4770      	bx	lr

0811dd58 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 811dd58:	b580      	push	{r7, lr}
 811dd5a:	b08c      	sub	sp, #48	@ 0x30
 811dd5c:	af02      	add	r7, sp, #8
 811dd5e:	4603      	mov	r3, r0
 811dd60:	71fb      	strb	r3, [r7, #7]
 811dd62:	460b      	mov	r3, r1
 811dd64:	80bb      	strh	r3, [r7, #4]
 811dd66:	4613      	mov	r3, r2
 811dd68:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 811dd6a:	79fb      	ldrb	r3, [r7, #7]
 811dd6c:	847b      	strh	r3, [r7, #34]	@ 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 811dd6e:	887b      	ldrh	r3, [r7, #2]
 811dd70:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 811dd74:	d07f      	beq.n	811de76 <pbuf_alloc+0x11e>
 811dd76:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 811dd7a:	f300 80c7 	bgt.w	811df0c <pbuf_alloc+0x1b4>
 811dd7e:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 811dd82:	d010      	beq.n	811dda6 <pbuf_alloc+0x4e>
 811dd84:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 811dd88:	f300 80c0 	bgt.w	811df0c <pbuf_alloc+0x1b4>
 811dd8c:	2b01      	cmp	r3, #1
 811dd8e:	d002      	beq.n	811dd96 <pbuf_alloc+0x3e>
 811dd90:	2b41      	cmp	r3, #65	@ 0x41
 811dd92:	f040 80bb 	bne.w	811df0c <pbuf_alloc+0x1b4>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 811dd96:	887a      	ldrh	r2, [r7, #2]
 811dd98:	88bb      	ldrh	r3, [r7, #4]
 811dd9a:	4619      	mov	r1, r3
 811dd9c:	2000      	movs	r0, #0
 811dd9e:	f000 f8d1 	bl	811df44 <pbuf_alloc_reference>
 811dda2:	6278      	str	r0, [r7, #36]	@ 0x24
      break;
 811dda4:	e0bc      	b.n	811df20 <pbuf_alloc+0x1c8>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 811dda6:	2300      	movs	r3, #0
 811dda8:	627b      	str	r3, [r7, #36]	@ 0x24
      last = NULL;
 811ddaa:	2300      	movs	r3, #0
 811ddac:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 811ddae:	88bb      	ldrh	r3, [r7, #4]
 811ddb0:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 811ddb2:	200c      	movs	r0, #12
 811ddb4:	f7ff fb9a 	bl	811d4ec <memp_malloc>
 811ddb8:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 811ddba:	693b      	ldr	r3, [r7, #16]
 811ddbc:	2b00      	cmp	r3, #0
 811ddbe:	d109      	bne.n	811ddd4 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 811ddc0:	f7ff ff76 	bl	811dcb0 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 811ddc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811ddc6:	2b00      	cmp	r3, #0
 811ddc8:	d002      	beq.n	811ddd0 <pbuf_alloc+0x78>
            pbuf_free(p);
 811ddca:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 811ddcc:	f000 faa6 	bl	811e31c <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 811ddd0:	2300      	movs	r3, #0
 811ddd2:	e0a6      	b.n	811df22 <pbuf_alloc+0x1ca>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 811ddd4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 811ddd6:	3303      	adds	r3, #3
 811ddd8:	b29b      	uxth	r3, r3
 811ddda:	f023 0303 	bic.w	r3, r3, #3
 811ddde:	b29b      	uxth	r3, r3
 811dde0:	f5c3 7314 	rsb	r3, r3, #592	@ 0x250
 811dde4:	b29b      	uxth	r3, r3
 811dde6:	8b7a      	ldrh	r2, [r7, #26]
 811dde8:	4293      	cmp	r3, r2
 811ddea:	bf28      	it	cs
 811ddec:	4613      	movcs	r3, r2
 811ddee:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 811ddf0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 811ddf2:	3310      	adds	r3, #16
 811ddf4:	693a      	ldr	r2, [r7, #16]
 811ddf6:	4413      	add	r3, r2
 811ddf8:	3303      	adds	r3, #3
 811ddfa:	f023 0303 	bic.w	r3, r3, #3
 811ddfe:	4618      	mov	r0, r3
 811de00:	89f9      	ldrh	r1, [r7, #14]
 811de02:	8b7a      	ldrh	r2, [r7, #26]
 811de04:	2300      	movs	r3, #0
 811de06:	9301      	str	r3, [sp, #4]
 811de08:	887b      	ldrh	r3, [r7, #2]
 811de0a:	9300      	str	r3, [sp, #0]
 811de0c:	460b      	mov	r3, r1
 811de0e:	4601      	mov	r1, r0
 811de10:	6938      	ldr	r0, [r7, #16]
 811de12:	f7ff ff77 	bl	811dd04 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 811de16:	693b      	ldr	r3, [r7, #16]
 811de18:	685b      	ldr	r3, [r3, #4]
 811de1a:	f003 0303 	and.w	r3, r3, #3
 811de1e:	2b00      	cmp	r3, #0
 811de20:	d006      	beq.n	811de30 <pbuf_alloc+0xd8>
 811de22:	4b42      	ldr	r3, [pc, #264]	@ (811df2c <pbuf_alloc+0x1d4>)
 811de24:	f44f 7280 	mov.w	r2, #256	@ 0x100
 811de28:	4941      	ldr	r1, [pc, #260]	@ (811df30 <pbuf_alloc+0x1d8>)
 811de2a:	4842      	ldr	r0, [pc, #264]	@ (811df34 <pbuf_alloc+0x1dc>)
 811de2c:	f008 fe22 	bl	8126a74 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 811de30:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 811de32:	3303      	adds	r3, #3
 811de34:	f023 0303 	bic.w	r3, r3, #3
 811de38:	f5b3 7f14 	cmp.w	r3, #592	@ 0x250
 811de3c:	d106      	bne.n	811de4c <pbuf_alloc+0xf4>
 811de3e:	4b3b      	ldr	r3, [pc, #236]	@ (811df2c <pbuf_alloc+0x1d4>)
 811de40:	f44f 7281 	mov.w	r2, #258	@ 0x102
 811de44:	493c      	ldr	r1, [pc, #240]	@ (811df38 <pbuf_alloc+0x1e0>)
 811de46:	483b      	ldr	r0, [pc, #236]	@ (811df34 <pbuf_alloc+0x1dc>)
 811de48:	f008 fe14 	bl	8126a74 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 811de4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811de4e:	2b00      	cmp	r3, #0
 811de50:	d102      	bne.n	811de58 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 811de52:	693b      	ldr	r3, [r7, #16]
 811de54:	627b      	str	r3, [r7, #36]	@ 0x24
 811de56:	e002      	b.n	811de5e <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 811de58:	69fb      	ldr	r3, [r7, #28]
 811de5a:	693a      	ldr	r2, [r7, #16]
 811de5c:	601a      	str	r2, [r3, #0]
        }
        last = q;
 811de5e:	693b      	ldr	r3, [r7, #16]
 811de60:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 811de62:	8b7a      	ldrh	r2, [r7, #26]
 811de64:	89fb      	ldrh	r3, [r7, #14]
 811de66:	1ad3      	subs	r3, r2, r3
 811de68:	837b      	strh	r3, [r7, #26]
        offset = 0;
 811de6a:	2300      	movs	r3, #0
 811de6c:	847b      	strh	r3, [r7, #34]	@ 0x22
      } while (rem_len > 0);
 811de6e:	8b7b      	ldrh	r3, [r7, #26]
 811de70:	2b00      	cmp	r3, #0
 811de72:	d19e      	bne.n	811ddb2 <pbuf_alloc+0x5a>
      break;
 811de74:	e054      	b.n	811df20 <pbuf_alloc+0x1c8>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 811de76:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 811de78:	3303      	adds	r3, #3
 811de7a:	b29b      	uxth	r3, r3
 811de7c:	f023 0303 	bic.w	r3, r3, #3
 811de80:	b29a      	uxth	r2, r3
 811de82:	88bb      	ldrh	r3, [r7, #4]
 811de84:	3303      	adds	r3, #3
 811de86:	b29b      	uxth	r3, r3
 811de88:	f023 0303 	bic.w	r3, r3, #3
 811de8c:	b29b      	uxth	r3, r3
 811de8e:	4413      	add	r3, r2
 811de90:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 811de92:	8b3b      	ldrh	r3, [r7, #24]
 811de94:	3310      	adds	r3, #16
 811de96:	617b      	str	r3, [r7, #20]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 811de98:	8b3a      	ldrh	r2, [r7, #24]
 811de9a:	88bb      	ldrh	r3, [r7, #4]
 811de9c:	3303      	adds	r3, #3
 811de9e:	f023 0303 	bic.w	r3, r3, #3
 811dea2:	429a      	cmp	r2, r3
 811dea4:	d306      	bcc.n	811deb4 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 811dea6:	88bb      	ldrh	r3, [r7, #4]
 811dea8:	3303      	adds	r3, #3
 811deaa:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 811deae:	697a      	ldr	r2, [r7, #20]
 811deb0:	429a      	cmp	r2, r3
 811deb2:	d201      	bcs.n	811deb8 <pbuf_alloc+0x160>
        return NULL;
 811deb4:	2300      	movs	r3, #0
 811deb6:	e034      	b.n	811df22 <pbuf_alloc+0x1ca>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 811deb8:	6978      	ldr	r0, [r7, #20]
 811deba:	f7ff f979 	bl	811d1b0 <mem_malloc>
 811debe:	6278      	str	r0, [r7, #36]	@ 0x24
      if (p == NULL) {
 811dec0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811dec2:	2b00      	cmp	r3, #0
 811dec4:	d101      	bne.n	811deca <pbuf_alloc+0x172>
        return NULL;
 811dec6:	2300      	movs	r3, #0
 811dec8:	e02b      	b.n	811df22 <pbuf_alloc+0x1ca>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 811deca:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 811decc:	3310      	adds	r3, #16
 811dece:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 811ded0:	4413      	add	r3, r2
 811ded2:	3303      	adds	r3, #3
 811ded4:	f023 0303 	bic.w	r3, r3, #3
 811ded8:	4618      	mov	r0, r3
 811deda:	88b9      	ldrh	r1, [r7, #4]
 811dedc:	88ba      	ldrh	r2, [r7, #4]
 811dede:	2300      	movs	r3, #0
 811dee0:	9301      	str	r3, [sp, #4]
 811dee2:	887b      	ldrh	r3, [r7, #2]
 811dee4:	9300      	str	r3, [sp, #0]
 811dee6:	460b      	mov	r3, r1
 811dee8:	4601      	mov	r1, r0
 811deea:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 811deec:	f7ff ff0a 	bl	811dd04 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 811def0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811def2:	685b      	ldr	r3, [r3, #4]
 811def4:	f003 0303 	and.w	r3, r3, #3
 811def8:	2b00      	cmp	r3, #0
 811defa:	d010      	beq.n	811df1e <pbuf_alloc+0x1c6>
 811defc:	4b0b      	ldr	r3, [pc, #44]	@ (811df2c <pbuf_alloc+0x1d4>)
 811defe:	f44f 7291 	mov.w	r2, #290	@ 0x122
 811df02:	490e      	ldr	r1, [pc, #56]	@ (811df3c <pbuf_alloc+0x1e4>)
 811df04:	480b      	ldr	r0, [pc, #44]	@ (811df34 <pbuf_alloc+0x1dc>)
 811df06:	f008 fdb5 	bl	8126a74 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 811df0a:	e008      	b.n	811df1e <pbuf_alloc+0x1c6>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 811df0c:	4b07      	ldr	r3, [pc, #28]	@ (811df2c <pbuf_alloc+0x1d4>)
 811df0e:	f240 1227 	movw	r2, #295	@ 0x127
 811df12:	490b      	ldr	r1, [pc, #44]	@ (811df40 <pbuf_alloc+0x1e8>)
 811df14:	4807      	ldr	r0, [pc, #28]	@ (811df34 <pbuf_alloc+0x1dc>)
 811df16:	f008 fdad 	bl	8126a74 <iprintf>
      return NULL;
 811df1a:	2300      	movs	r3, #0
 811df1c:	e001      	b.n	811df22 <pbuf_alloc+0x1ca>
      break;
 811df1e:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 811df20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 811df22:	4618      	mov	r0, r3
 811df24:	3728      	adds	r7, #40	@ 0x28
 811df26:	46bd      	mov	sp, r7
 811df28:	bd80      	pop	{r7, pc}
 811df2a:	bf00      	nop
 811df2c:	08128d48 	.word	0x08128d48
 811df30:	08128dbc 	.word	0x08128dbc
 811df34:	08128dec 	.word	0x08128dec
 811df38:	08128e14 	.word	0x08128e14
 811df3c:	08128e48 	.word	0x08128e48
 811df40:	08128e74 	.word	0x08128e74

0811df44 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 811df44:	b580      	push	{r7, lr}
 811df46:	b086      	sub	sp, #24
 811df48:	af02      	add	r7, sp, #8
 811df4a:	6078      	str	r0, [r7, #4]
 811df4c:	460b      	mov	r3, r1
 811df4e:	807b      	strh	r3, [r7, #2]
 811df50:	4613      	mov	r3, r2
 811df52:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 811df54:	883b      	ldrh	r3, [r7, #0]
 811df56:	2b41      	cmp	r3, #65	@ 0x41
 811df58:	d009      	beq.n	811df6e <pbuf_alloc_reference+0x2a>
 811df5a:	883b      	ldrh	r3, [r7, #0]
 811df5c:	2b01      	cmp	r3, #1
 811df5e:	d006      	beq.n	811df6e <pbuf_alloc_reference+0x2a>
 811df60:	4b0f      	ldr	r3, [pc, #60]	@ (811dfa0 <pbuf_alloc_reference+0x5c>)
 811df62:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 811df66:	490f      	ldr	r1, [pc, #60]	@ (811dfa4 <pbuf_alloc_reference+0x60>)
 811df68:	480f      	ldr	r0, [pc, #60]	@ (811dfa8 <pbuf_alloc_reference+0x64>)
 811df6a:	f008 fd83 	bl	8126a74 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 811df6e:	200b      	movs	r0, #11
 811df70:	f7ff fabc 	bl	811d4ec <memp_malloc>
 811df74:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 811df76:	68fb      	ldr	r3, [r7, #12]
 811df78:	2b00      	cmp	r3, #0
 811df7a:	d101      	bne.n	811df80 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 811df7c:	2300      	movs	r3, #0
 811df7e:	e00b      	b.n	811df98 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 811df80:	8879      	ldrh	r1, [r7, #2]
 811df82:	887a      	ldrh	r2, [r7, #2]
 811df84:	2300      	movs	r3, #0
 811df86:	9301      	str	r3, [sp, #4]
 811df88:	883b      	ldrh	r3, [r7, #0]
 811df8a:	9300      	str	r3, [sp, #0]
 811df8c:	460b      	mov	r3, r1
 811df8e:	6879      	ldr	r1, [r7, #4]
 811df90:	68f8      	ldr	r0, [r7, #12]
 811df92:	f7ff feb7 	bl	811dd04 <pbuf_init_alloced_pbuf>
  return p;
 811df96:	68fb      	ldr	r3, [r7, #12]
}
 811df98:	4618      	mov	r0, r3
 811df9a:	3710      	adds	r7, #16
 811df9c:	46bd      	mov	sp, r7
 811df9e:	bd80      	pop	{r7, pc}
 811dfa0:	08128d48 	.word	0x08128d48
 811dfa4:	08128e90 	.word	0x08128e90
 811dfa8:	08128dec 	.word	0x08128dec

0811dfac <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 811dfac:	b580      	push	{r7, lr}
 811dfae:	b088      	sub	sp, #32
 811dfb0:	af02      	add	r7, sp, #8
 811dfb2:	607b      	str	r3, [r7, #4]
 811dfb4:	4603      	mov	r3, r0
 811dfb6:	73fb      	strb	r3, [r7, #15]
 811dfb8:	460b      	mov	r3, r1
 811dfba:	81bb      	strh	r3, [r7, #12]
 811dfbc:	4613      	mov	r3, r2
 811dfbe:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 811dfc0:	7bfb      	ldrb	r3, [r7, #15]
 811dfc2:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 811dfc4:	8a7b      	ldrh	r3, [r7, #18]
 811dfc6:	3303      	adds	r3, #3
 811dfc8:	f023 0203 	bic.w	r2, r3, #3
 811dfcc:	89bb      	ldrh	r3, [r7, #12]
 811dfce:	441a      	add	r2, r3
 811dfd0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 811dfd2:	429a      	cmp	r2, r3
 811dfd4:	d901      	bls.n	811dfda <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 811dfd6:	2300      	movs	r3, #0
 811dfd8:	e018      	b.n	811e00c <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 811dfda:	6a3b      	ldr	r3, [r7, #32]
 811dfdc:	2b00      	cmp	r3, #0
 811dfde:	d007      	beq.n	811dff0 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 811dfe0:	8a7b      	ldrh	r3, [r7, #18]
 811dfe2:	3303      	adds	r3, #3
 811dfe4:	f023 0303 	bic.w	r3, r3, #3
 811dfe8:	6a3a      	ldr	r2, [r7, #32]
 811dfea:	4413      	add	r3, r2
 811dfec:	617b      	str	r3, [r7, #20]
 811dfee:	e001      	b.n	811dff4 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 811dff0:	2300      	movs	r3, #0
 811dff2:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 811dff4:	6878      	ldr	r0, [r7, #4]
 811dff6:	89b9      	ldrh	r1, [r7, #12]
 811dff8:	89ba      	ldrh	r2, [r7, #12]
 811dffa:	2302      	movs	r3, #2
 811dffc:	9301      	str	r3, [sp, #4]
 811dffe:	897b      	ldrh	r3, [r7, #10]
 811e000:	9300      	str	r3, [sp, #0]
 811e002:	460b      	mov	r3, r1
 811e004:	6979      	ldr	r1, [r7, #20]
 811e006:	f7ff fe7d 	bl	811dd04 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 811e00a:	687b      	ldr	r3, [r7, #4]
}
 811e00c:	4618      	mov	r0, r3
 811e00e:	3718      	adds	r7, #24
 811e010:	46bd      	mov	sp, r7
 811e012:	bd80      	pop	{r7, pc}

0811e014 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 811e014:	b580      	push	{r7, lr}
 811e016:	b084      	sub	sp, #16
 811e018:	af00      	add	r7, sp, #0
 811e01a:	6078      	str	r0, [r7, #4]
 811e01c:	460b      	mov	r3, r1
 811e01e:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 811e020:	687b      	ldr	r3, [r7, #4]
 811e022:	2b00      	cmp	r3, #0
 811e024:	d106      	bne.n	811e034 <pbuf_realloc+0x20>
 811e026:	4b39      	ldr	r3, [pc, #228]	@ (811e10c <pbuf_realloc+0xf8>)
 811e028:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 811e02c:	4938      	ldr	r1, [pc, #224]	@ (811e110 <pbuf_realloc+0xfc>)
 811e02e:	4839      	ldr	r0, [pc, #228]	@ (811e114 <pbuf_realloc+0x100>)
 811e030:	f008 fd20 	bl	8126a74 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 811e034:	687b      	ldr	r3, [r7, #4]
 811e036:	891b      	ldrh	r3, [r3, #8]
 811e038:	887a      	ldrh	r2, [r7, #2]
 811e03a:	429a      	cmp	r2, r3
 811e03c:	d261      	bcs.n	811e102 <pbuf_realloc+0xee>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 811e03e:	687b      	ldr	r3, [r7, #4]
 811e040:	891a      	ldrh	r2, [r3, #8]
 811e042:	887b      	ldrh	r3, [r7, #2]
 811e044:	1ad3      	subs	r3, r2, r3
 811e046:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 811e048:	887b      	ldrh	r3, [r7, #2]
 811e04a:	817b      	strh	r3, [r7, #10]
  q = p;
 811e04c:	687b      	ldr	r3, [r7, #4]
 811e04e:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 811e050:	e018      	b.n	811e084 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 811e052:	68fb      	ldr	r3, [r7, #12]
 811e054:	895b      	ldrh	r3, [r3, #10]
 811e056:	897a      	ldrh	r2, [r7, #10]
 811e058:	1ad3      	subs	r3, r2, r3
 811e05a:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 811e05c:	68fb      	ldr	r3, [r7, #12]
 811e05e:	891a      	ldrh	r2, [r3, #8]
 811e060:	893b      	ldrh	r3, [r7, #8]
 811e062:	1ad3      	subs	r3, r2, r3
 811e064:	b29a      	uxth	r2, r3
 811e066:	68fb      	ldr	r3, [r7, #12]
 811e068:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 811e06a:	68fb      	ldr	r3, [r7, #12]
 811e06c:	681b      	ldr	r3, [r3, #0]
 811e06e:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 811e070:	68fb      	ldr	r3, [r7, #12]
 811e072:	2b00      	cmp	r3, #0
 811e074:	d106      	bne.n	811e084 <pbuf_realloc+0x70>
 811e076:	4b25      	ldr	r3, [pc, #148]	@ (811e10c <pbuf_realloc+0xf8>)
 811e078:	f240 12af 	movw	r2, #431	@ 0x1af
 811e07c:	4926      	ldr	r1, [pc, #152]	@ (811e118 <pbuf_realloc+0x104>)
 811e07e:	4825      	ldr	r0, [pc, #148]	@ (811e114 <pbuf_realloc+0x100>)
 811e080:	f008 fcf8 	bl	8126a74 <iprintf>
  while (rem_len > q->len) {
 811e084:	68fb      	ldr	r3, [r7, #12]
 811e086:	895b      	ldrh	r3, [r3, #10]
 811e088:	897a      	ldrh	r2, [r7, #10]
 811e08a:	429a      	cmp	r2, r3
 811e08c:	d8e1      	bhi.n	811e052 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 811e08e:	68fb      	ldr	r3, [r7, #12]
 811e090:	7b1b      	ldrb	r3, [r3, #12]
 811e092:	f003 030f 	and.w	r3, r3, #15
 811e096:	2b00      	cmp	r3, #0
 811e098:	d11f      	bne.n	811e0da <pbuf_realloc+0xc6>
 811e09a:	68fb      	ldr	r3, [r7, #12]
 811e09c:	895b      	ldrh	r3, [r3, #10]
 811e09e:	897a      	ldrh	r2, [r7, #10]
 811e0a0:	429a      	cmp	r2, r3
 811e0a2:	d01a      	beq.n	811e0da <pbuf_realloc+0xc6>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 811e0a4:	68fb      	ldr	r3, [r7, #12]
 811e0a6:	7b5b      	ldrb	r3, [r3, #13]
 811e0a8:	f003 0302 	and.w	r3, r3, #2
 811e0ac:	2b00      	cmp	r3, #0
 811e0ae:	d114      	bne.n	811e0da <pbuf_realloc+0xc6>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 811e0b0:	68fb      	ldr	r3, [r7, #12]
 811e0b2:	685a      	ldr	r2, [r3, #4]
 811e0b4:	68fb      	ldr	r3, [r7, #12]
 811e0b6:	1ad2      	subs	r2, r2, r3
 811e0b8:	897b      	ldrh	r3, [r7, #10]
 811e0ba:	4413      	add	r3, r2
 811e0bc:	4619      	mov	r1, r3
 811e0be:	68f8      	ldr	r0, [r7, #12]
 811e0c0:	f7fe ff74 	bl	811cfac <mem_trim>
 811e0c4:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 811e0c6:	68fb      	ldr	r3, [r7, #12]
 811e0c8:	2b00      	cmp	r3, #0
 811e0ca:	d106      	bne.n	811e0da <pbuf_realloc+0xc6>
 811e0cc:	4b0f      	ldr	r3, [pc, #60]	@ (811e10c <pbuf_realloc+0xf8>)
 811e0ce:	f240 12bd 	movw	r2, #445	@ 0x1bd
 811e0d2:	4912      	ldr	r1, [pc, #72]	@ (811e11c <pbuf_realloc+0x108>)
 811e0d4:	480f      	ldr	r0, [pc, #60]	@ (811e114 <pbuf_realloc+0x100>)
 811e0d6:	f008 fccd 	bl	8126a74 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 811e0da:	68fb      	ldr	r3, [r7, #12]
 811e0dc:	897a      	ldrh	r2, [r7, #10]
 811e0de:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 811e0e0:	68fb      	ldr	r3, [r7, #12]
 811e0e2:	895a      	ldrh	r2, [r3, #10]
 811e0e4:	68fb      	ldr	r3, [r7, #12]
 811e0e6:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 811e0e8:	68fb      	ldr	r3, [r7, #12]
 811e0ea:	681b      	ldr	r3, [r3, #0]
 811e0ec:	2b00      	cmp	r3, #0
 811e0ee:	d004      	beq.n	811e0fa <pbuf_realloc+0xe6>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 811e0f0:	68fb      	ldr	r3, [r7, #12]
 811e0f2:	681b      	ldr	r3, [r3, #0]
 811e0f4:	4618      	mov	r0, r3
 811e0f6:	f000 f911 	bl	811e31c <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 811e0fa:	68fb      	ldr	r3, [r7, #12]
 811e0fc:	2200      	movs	r2, #0
 811e0fe:	601a      	str	r2, [r3, #0]
 811e100:	e000      	b.n	811e104 <pbuf_realloc+0xf0>
    return;
 811e102:	bf00      	nop

}
 811e104:	3710      	adds	r7, #16
 811e106:	46bd      	mov	sp, r7
 811e108:	bd80      	pop	{r7, pc}
 811e10a:	bf00      	nop
 811e10c:	08128d48 	.word	0x08128d48
 811e110:	08128ea4 	.word	0x08128ea4
 811e114:	08128dec 	.word	0x08128dec
 811e118:	08128ebc 	.word	0x08128ebc
 811e11c:	08128ed4 	.word	0x08128ed4

0811e120 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 811e120:	b580      	push	{r7, lr}
 811e122:	b086      	sub	sp, #24
 811e124:	af00      	add	r7, sp, #0
 811e126:	60f8      	str	r0, [r7, #12]
 811e128:	60b9      	str	r1, [r7, #8]
 811e12a:	4613      	mov	r3, r2
 811e12c:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 811e12e:	68fb      	ldr	r3, [r7, #12]
 811e130:	2b00      	cmp	r3, #0
 811e132:	d106      	bne.n	811e142 <pbuf_add_header_impl+0x22>
 811e134:	4b2b      	ldr	r3, [pc, #172]	@ (811e1e4 <pbuf_add_header_impl+0xc4>)
 811e136:	f240 12df 	movw	r2, #479	@ 0x1df
 811e13a:	492b      	ldr	r1, [pc, #172]	@ (811e1e8 <pbuf_add_header_impl+0xc8>)
 811e13c:	482b      	ldr	r0, [pc, #172]	@ (811e1ec <pbuf_add_header_impl+0xcc>)
 811e13e:	f008 fc99 	bl	8126a74 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 811e142:	68fb      	ldr	r3, [r7, #12]
 811e144:	2b00      	cmp	r3, #0
 811e146:	d003      	beq.n	811e150 <pbuf_add_header_impl+0x30>
 811e148:	68bb      	ldr	r3, [r7, #8]
 811e14a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 811e14e:	d301      	bcc.n	811e154 <pbuf_add_header_impl+0x34>
    return 1;
 811e150:	2301      	movs	r3, #1
 811e152:	e043      	b.n	811e1dc <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 811e154:	68bb      	ldr	r3, [r7, #8]
 811e156:	2b00      	cmp	r3, #0
 811e158:	d101      	bne.n	811e15e <pbuf_add_header_impl+0x3e>
    return 0;
 811e15a:	2300      	movs	r3, #0
 811e15c:	e03e      	b.n	811e1dc <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 811e15e:	68bb      	ldr	r3, [r7, #8]
 811e160:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 811e162:	68fb      	ldr	r3, [r7, #12]
 811e164:	891a      	ldrh	r2, [r3, #8]
 811e166:	8a7b      	ldrh	r3, [r7, #18]
 811e168:	4413      	add	r3, r2
 811e16a:	b29b      	uxth	r3, r3
 811e16c:	8a7a      	ldrh	r2, [r7, #18]
 811e16e:	429a      	cmp	r2, r3
 811e170:	d901      	bls.n	811e176 <pbuf_add_header_impl+0x56>
    return 1;
 811e172:	2301      	movs	r3, #1
 811e174:	e032      	b.n	811e1dc <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 811e176:	68fb      	ldr	r3, [r7, #12]
 811e178:	7b1b      	ldrb	r3, [r3, #12]
 811e17a:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 811e17c:	8a3b      	ldrh	r3, [r7, #16]
 811e17e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 811e182:	2b00      	cmp	r3, #0
 811e184:	d00c      	beq.n	811e1a0 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 811e186:	68fb      	ldr	r3, [r7, #12]
 811e188:	685a      	ldr	r2, [r3, #4]
 811e18a:	68bb      	ldr	r3, [r7, #8]
 811e18c:	425b      	negs	r3, r3
 811e18e:	4413      	add	r3, r2
 811e190:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 811e192:	68fb      	ldr	r3, [r7, #12]
 811e194:	3310      	adds	r3, #16
 811e196:	697a      	ldr	r2, [r7, #20]
 811e198:	429a      	cmp	r2, r3
 811e19a:	d20d      	bcs.n	811e1b8 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 811e19c:	2301      	movs	r3, #1
 811e19e:	e01d      	b.n	811e1dc <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 811e1a0:	79fb      	ldrb	r3, [r7, #7]
 811e1a2:	2b00      	cmp	r3, #0
 811e1a4:	d006      	beq.n	811e1b4 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 811e1a6:	68fb      	ldr	r3, [r7, #12]
 811e1a8:	685a      	ldr	r2, [r3, #4]
 811e1aa:	68bb      	ldr	r3, [r7, #8]
 811e1ac:	425b      	negs	r3, r3
 811e1ae:	4413      	add	r3, r2
 811e1b0:	617b      	str	r3, [r7, #20]
 811e1b2:	e001      	b.n	811e1b8 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 811e1b4:	2301      	movs	r3, #1
 811e1b6:	e011      	b.n	811e1dc <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 811e1b8:	68fb      	ldr	r3, [r7, #12]
 811e1ba:	697a      	ldr	r2, [r7, #20]
 811e1bc:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 811e1be:	68fb      	ldr	r3, [r7, #12]
 811e1c0:	895a      	ldrh	r2, [r3, #10]
 811e1c2:	8a7b      	ldrh	r3, [r7, #18]
 811e1c4:	4413      	add	r3, r2
 811e1c6:	b29a      	uxth	r2, r3
 811e1c8:	68fb      	ldr	r3, [r7, #12]
 811e1ca:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 811e1cc:	68fb      	ldr	r3, [r7, #12]
 811e1ce:	891a      	ldrh	r2, [r3, #8]
 811e1d0:	8a7b      	ldrh	r3, [r7, #18]
 811e1d2:	4413      	add	r3, r2
 811e1d4:	b29a      	uxth	r2, r3
 811e1d6:	68fb      	ldr	r3, [r7, #12]
 811e1d8:	811a      	strh	r2, [r3, #8]


  return 0;
 811e1da:	2300      	movs	r3, #0
}
 811e1dc:	4618      	mov	r0, r3
 811e1de:	3718      	adds	r7, #24
 811e1e0:	46bd      	mov	sp, r7
 811e1e2:	bd80      	pop	{r7, pc}
 811e1e4:	08128d48 	.word	0x08128d48
 811e1e8:	08128ef0 	.word	0x08128ef0
 811e1ec:	08128dec 	.word	0x08128dec

0811e1f0 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 811e1f0:	b580      	push	{r7, lr}
 811e1f2:	b082      	sub	sp, #8
 811e1f4:	af00      	add	r7, sp, #0
 811e1f6:	6078      	str	r0, [r7, #4]
 811e1f8:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 811e1fa:	2200      	movs	r2, #0
 811e1fc:	6839      	ldr	r1, [r7, #0]
 811e1fe:	6878      	ldr	r0, [r7, #4]
 811e200:	f7ff ff8e 	bl	811e120 <pbuf_add_header_impl>
 811e204:	4603      	mov	r3, r0
}
 811e206:	4618      	mov	r0, r3
 811e208:	3708      	adds	r7, #8
 811e20a:	46bd      	mov	sp, r7
 811e20c:	bd80      	pop	{r7, pc}
	...

0811e210 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 811e210:	b580      	push	{r7, lr}
 811e212:	b084      	sub	sp, #16
 811e214:	af00      	add	r7, sp, #0
 811e216:	6078      	str	r0, [r7, #4]
 811e218:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 811e21a:	687b      	ldr	r3, [r7, #4]
 811e21c:	2b00      	cmp	r3, #0
 811e21e:	d106      	bne.n	811e22e <pbuf_remove_header+0x1e>
 811e220:	4b20      	ldr	r3, [pc, #128]	@ (811e2a4 <pbuf_remove_header+0x94>)
 811e222:	f240 224b 	movw	r2, #587	@ 0x24b
 811e226:	4920      	ldr	r1, [pc, #128]	@ (811e2a8 <pbuf_remove_header+0x98>)
 811e228:	4820      	ldr	r0, [pc, #128]	@ (811e2ac <pbuf_remove_header+0x9c>)
 811e22a:	f008 fc23 	bl	8126a74 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 811e22e:	687b      	ldr	r3, [r7, #4]
 811e230:	2b00      	cmp	r3, #0
 811e232:	d003      	beq.n	811e23c <pbuf_remove_header+0x2c>
 811e234:	683b      	ldr	r3, [r7, #0]
 811e236:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 811e23a:	d301      	bcc.n	811e240 <pbuf_remove_header+0x30>
    return 1;
 811e23c:	2301      	movs	r3, #1
 811e23e:	e02c      	b.n	811e29a <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 811e240:	683b      	ldr	r3, [r7, #0]
 811e242:	2b00      	cmp	r3, #0
 811e244:	d101      	bne.n	811e24a <pbuf_remove_header+0x3a>
    return 0;
 811e246:	2300      	movs	r3, #0
 811e248:	e027      	b.n	811e29a <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 811e24a:	683b      	ldr	r3, [r7, #0]
 811e24c:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 811e24e:	687b      	ldr	r3, [r7, #4]
 811e250:	895b      	ldrh	r3, [r3, #10]
 811e252:	89fa      	ldrh	r2, [r7, #14]
 811e254:	429a      	cmp	r2, r3
 811e256:	d908      	bls.n	811e26a <pbuf_remove_header+0x5a>
 811e258:	4b12      	ldr	r3, [pc, #72]	@ (811e2a4 <pbuf_remove_header+0x94>)
 811e25a:	f240 2255 	movw	r2, #597	@ 0x255
 811e25e:	4914      	ldr	r1, [pc, #80]	@ (811e2b0 <pbuf_remove_header+0xa0>)
 811e260:	4812      	ldr	r0, [pc, #72]	@ (811e2ac <pbuf_remove_header+0x9c>)
 811e262:	f008 fc07 	bl	8126a74 <iprintf>
 811e266:	2301      	movs	r3, #1
 811e268:	e017      	b.n	811e29a <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 811e26a:	687b      	ldr	r3, [r7, #4]
 811e26c:	685b      	ldr	r3, [r3, #4]
 811e26e:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 811e270:	687b      	ldr	r3, [r7, #4]
 811e272:	685a      	ldr	r2, [r3, #4]
 811e274:	683b      	ldr	r3, [r7, #0]
 811e276:	441a      	add	r2, r3
 811e278:	687b      	ldr	r3, [r7, #4]
 811e27a:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 811e27c:	687b      	ldr	r3, [r7, #4]
 811e27e:	895a      	ldrh	r2, [r3, #10]
 811e280:	89fb      	ldrh	r3, [r7, #14]
 811e282:	1ad3      	subs	r3, r2, r3
 811e284:	b29a      	uxth	r2, r3
 811e286:	687b      	ldr	r3, [r7, #4]
 811e288:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 811e28a:	687b      	ldr	r3, [r7, #4]
 811e28c:	891a      	ldrh	r2, [r3, #8]
 811e28e:	89fb      	ldrh	r3, [r7, #14]
 811e290:	1ad3      	subs	r3, r2, r3
 811e292:	b29a      	uxth	r2, r3
 811e294:	687b      	ldr	r3, [r7, #4]
 811e296:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 811e298:	2300      	movs	r3, #0
}
 811e29a:	4618      	mov	r0, r3
 811e29c:	3710      	adds	r7, #16
 811e29e:	46bd      	mov	sp, r7
 811e2a0:	bd80      	pop	{r7, pc}
 811e2a2:	bf00      	nop
 811e2a4:	08128d48 	.word	0x08128d48
 811e2a8:	08128ef0 	.word	0x08128ef0
 811e2ac:	08128dec 	.word	0x08128dec
 811e2b0:	08128efc 	.word	0x08128efc

0811e2b4 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 811e2b4:	b580      	push	{r7, lr}
 811e2b6:	b082      	sub	sp, #8
 811e2b8:	af00      	add	r7, sp, #0
 811e2ba:	6078      	str	r0, [r7, #4]
 811e2bc:	460b      	mov	r3, r1
 811e2be:	807b      	strh	r3, [r7, #2]
 811e2c0:	4613      	mov	r3, r2
 811e2c2:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 811e2c4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 811e2c8:	2b00      	cmp	r3, #0
 811e2ca:	da08      	bge.n	811e2de <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 811e2cc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 811e2d0:	425b      	negs	r3, r3
 811e2d2:	4619      	mov	r1, r3
 811e2d4:	6878      	ldr	r0, [r7, #4]
 811e2d6:	f7ff ff9b 	bl	811e210 <pbuf_remove_header>
 811e2da:	4603      	mov	r3, r0
 811e2dc:	e007      	b.n	811e2ee <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 811e2de:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 811e2e2:	787a      	ldrb	r2, [r7, #1]
 811e2e4:	4619      	mov	r1, r3
 811e2e6:	6878      	ldr	r0, [r7, #4]
 811e2e8:	f7ff ff1a 	bl	811e120 <pbuf_add_header_impl>
 811e2ec:	4603      	mov	r3, r0
  }
}
 811e2ee:	4618      	mov	r0, r3
 811e2f0:	3708      	adds	r7, #8
 811e2f2:	46bd      	mov	sp, r7
 811e2f4:	bd80      	pop	{r7, pc}

0811e2f6 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 811e2f6:	b580      	push	{r7, lr}
 811e2f8:	b082      	sub	sp, #8
 811e2fa:	af00      	add	r7, sp, #0
 811e2fc:	6078      	str	r0, [r7, #4]
 811e2fe:	460b      	mov	r3, r1
 811e300:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 811e302:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 811e306:	2201      	movs	r2, #1
 811e308:	4619      	mov	r1, r3
 811e30a:	6878      	ldr	r0, [r7, #4]
 811e30c:	f7ff ffd2 	bl	811e2b4 <pbuf_header_impl>
 811e310:	4603      	mov	r3, r0
}
 811e312:	4618      	mov	r0, r3
 811e314:	3708      	adds	r7, #8
 811e316:	46bd      	mov	sp, r7
 811e318:	bd80      	pop	{r7, pc}
	...

0811e31c <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 811e31c:	b580      	push	{r7, lr}
 811e31e:	b088      	sub	sp, #32
 811e320:	af00      	add	r7, sp, #0
 811e322:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 811e324:	687b      	ldr	r3, [r7, #4]
 811e326:	2b00      	cmp	r3, #0
 811e328:	d10b      	bne.n	811e342 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 811e32a:	687b      	ldr	r3, [r7, #4]
 811e32c:	2b00      	cmp	r3, #0
 811e32e:	d106      	bne.n	811e33e <pbuf_free+0x22>
 811e330:	4b3b      	ldr	r3, [pc, #236]	@ (811e420 <pbuf_free+0x104>)
 811e332:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 811e336:	493b      	ldr	r1, [pc, #236]	@ (811e424 <pbuf_free+0x108>)
 811e338:	483b      	ldr	r0, [pc, #236]	@ (811e428 <pbuf_free+0x10c>)
 811e33a:	f008 fb9b 	bl	8126a74 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 811e33e:	2300      	movs	r3, #0
 811e340:	e069      	b.n	811e416 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 811e342:	2300      	movs	r3, #0
 811e344:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 811e346:	e062      	b.n	811e40e <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 811e348:	f000 fb66 	bl	811ea18 <sys_arch_protect>
 811e34c:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 811e34e:	687b      	ldr	r3, [r7, #4]
 811e350:	7b9b      	ldrb	r3, [r3, #14]
 811e352:	2b00      	cmp	r3, #0
 811e354:	d106      	bne.n	811e364 <pbuf_free+0x48>
 811e356:	4b32      	ldr	r3, [pc, #200]	@ (811e420 <pbuf_free+0x104>)
 811e358:	f240 22f1 	movw	r2, #753	@ 0x2f1
 811e35c:	4933      	ldr	r1, [pc, #204]	@ (811e42c <pbuf_free+0x110>)
 811e35e:	4832      	ldr	r0, [pc, #200]	@ (811e428 <pbuf_free+0x10c>)
 811e360:	f008 fb88 	bl	8126a74 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 811e364:	687b      	ldr	r3, [r7, #4]
 811e366:	7b9b      	ldrb	r3, [r3, #14]
 811e368:	3b01      	subs	r3, #1
 811e36a:	b2da      	uxtb	r2, r3
 811e36c:	687b      	ldr	r3, [r7, #4]
 811e36e:	739a      	strb	r2, [r3, #14]
 811e370:	687b      	ldr	r3, [r7, #4]
 811e372:	7b9b      	ldrb	r3, [r3, #14]
 811e374:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 811e376:	69b8      	ldr	r0, [r7, #24]
 811e378:	f000 fb5c 	bl	811ea34 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 811e37c:	7dfb      	ldrb	r3, [r7, #23]
 811e37e:	2b00      	cmp	r3, #0
 811e380:	d143      	bne.n	811e40a <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 811e382:	687b      	ldr	r3, [r7, #4]
 811e384:	681b      	ldr	r3, [r3, #0]
 811e386:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 811e388:	687b      	ldr	r3, [r7, #4]
 811e38a:	7b1b      	ldrb	r3, [r3, #12]
 811e38c:	f003 030f 	and.w	r3, r3, #15
 811e390:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 811e392:	687b      	ldr	r3, [r7, #4]
 811e394:	7b5b      	ldrb	r3, [r3, #13]
 811e396:	f003 0302 	and.w	r3, r3, #2
 811e39a:	2b00      	cmp	r3, #0
 811e39c:	d011      	beq.n	811e3c2 <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 811e39e:	687b      	ldr	r3, [r7, #4]
 811e3a0:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 811e3a2:	68bb      	ldr	r3, [r7, #8]
 811e3a4:	691b      	ldr	r3, [r3, #16]
 811e3a6:	2b00      	cmp	r3, #0
 811e3a8:	d106      	bne.n	811e3b8 <pbuf_free+0x9c>
 811e3aa:	4b1d      	ldr	r3, [pc, #116]	@ (811e420 <pbuf_free+0x104>)
 811e3ac:	f240 22ff 	movw	r2, #767	@ 0x2ff
 811e3b0:	491f      	ldr	r1, [pc, #124]	@ (811e430 <pbuf_free+0x114>)
 811e3b2:	481d      	ldr	r0, [pc, #116]	@ (811e428 <pbuf_free+0x10c>)
 811e3b4:	f008 fb5e 	bl	8126a74 <iprintf>
        pc->custom_free_function(p);
 811e3b8:	68bb      	ldr	r3, [r7, #8]
 811e3ba:	691b      	ldr	r3, [r3, #16]
 811e3bc:	6878      	ldr	r0, [r7, #4]
 811e3be:	4798      	blx	r3
 811e3c0:	e01d      	b.n	811e3fe <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 811e3c2:	7bfb      	ldrb	r3, [r7, #15]
 811e3c4:	2b02      	cmp	r3, #2
 811e3c6:	d104      	bne.n	811e3d2 <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 811e3c8:	6879      	ldr	r1, [r7, #4]
 811e3ca:	200c      	movs	r0, #12
 811e3cc:	f7ff f904 	bl	811d5d8 <memp_free>
 811e3d0:	e015      	b.n	811e3fe <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 811e3d2:	7bfb      	ldrb	r3, [r7, #15]
 811e3d4:	2b01      	cmp	r3, #1
 811e3d6:	d104      	bne.n	811e3e2 <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 811e3d8:	6879      	ldr	r1, [r7, #4]
 811e3da:	200b      	movs	r0, #11
 811e3dc:	f7ff f8fc 	bl	811d5d8 <memp_free>
 811e3e0:	e00d      	b.n	811e3fe <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 811e3e2:	7bfb      	ldrb	r3, [r7, #15]
 811e3e4:	2b00      	cmp	r3, #0
 811e3e6:	d103      	bne.n	811e3f0 <pbuf_free+0xd4>
          mem_free(p);
 811e3e8:	6878      	ldr	r0, [r7, #4]
 811e3ea:	f7fe fd4f 	bl	811ce8c <mem_free>
 811e3ee:	e006      	b.n	811e3fe <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 811e3f0:	4b0b      	ldr	r3, [pc, #44]	@ (811e420 <pbuf_free+0x104>)
 811e3f2:	f240 320f 	movw	r2, #783	@ 0x30f
 811e3f6:	490f      	ldr	r1, [pc, #60]	@ (811e434 <pbuf_free+0x118>)
 811e3f8:	480b      	ldr	r0, [pc, #44]	@ (811e428 <pbuf_free+0x10c>)
 811e3fa:	f008 fb3b 	bl	8126a74 <iprintf>
        }
      }
      count++;
 811e3fe:	7ffb      	ldrb	r3, [r7, #31]
 811e400:	3301      	adds	r3, #1
 811e402:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 811e404:	693b      	ldr	r3, [r7, #16]
 811e406:	607b      	str	r3, [r7, #4]
 811e408:	e001      	b.n	811e40e <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 811e40a:	2300      	movs	r3, #0
 811e40c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 811e40e:	687b      	ldr	r3, [r7, #4]
 811e410:	2b00      	cmp	r3, #0
 811e412:	d199      	bne.n	811e348 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 811e414:	7ffb      	ldrb	r3, [r7, #31]
}
 811e416:	4618      	mov	r0, r3
 811e418:	3720      	adds	r7, #32
 811e41a:	46bd      	mov	sp, r7
 811e41c:	bd80      	pop	{r7, pc}
 811e41e:	bf00      	nop
 811e420:	08128d48 	.word	0x08128d48
 811e424:	08128ef0 	.word	0x08128ef0
 811e428:	08128dec 	.word	0x08128dec
 811e42c:	08128f1c 	.word	0x08128f1c
 811e430:	08128f34 	.word	0x08128f34
 811e434:	08128f58 	.word	0x08128f58

0811e438 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 811e438:	b480      	push	{r7}
 811e43a:	b085      	sub	sp, #20
 811e43c:	af00      	add	r7, sp, #0
 811e43e:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 811e440:	2300      	movs	r3, #0
 811e442:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 811e444:	e005      	b.n	811e452 <pbuf_clen+0x1a>
    ++len;
 811e446:	89fb      	ldrh	r3, [r7, #14]
 811e448:	3301      	adds	r3, #1
 811e44a:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 811e44c:	687b      	ldr	r3, [r7, #4]
 811e44e:	681b      	ldr	r3, [r3, #0]
 811e450:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 811e452:	687b      	ldr	r3, [r7, #4]
 811e454:	2b00      	cmp	r3, #0
 811e456:	d1f6      	bne.n	811e446 <pbuf_clen+0xe>
  }
  return len;
 811e458:	89fb      	ldrh	r3, [r7, #14]
}
 811e45a:	4618      	mov	r0, r3
 811e45c:	3714      	adds	r7, #20
 811e45e:	46bd      	mov	sp, r7
 811e460:	f85d 7b04 	ldr.w	r7, [sp], #4
 811e464:	4770      	bx	lr
	...

0811e468 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 811e468:	b580      	push	{r7, lr}
 811e46a:	b084      	sub	sp, #16
 811e46c:	af00      	add	r7, sp, #0
 811e46e:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 811e470:	687b      	ldr	r3, [r7, #4]
 811e472:	2b00      	cmp	r3, #0
 811e474:	d016      	beq.n	811e4a4 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 811e476:	f000 facf 	bl	811ea18 <sys_arch_protect>
 811e47a:	60f8      	str	r0, [r7, #12]
 811e47c:	687b      	ldr	r3, [r7, #4]
 811e47e:	7b9b      	ldrb	r3, [r3, #14]
 811e480:	3301      	adds	r3, #1
 811e482:	b2da      	uxtb	r2, r3
 811e484:	687b      	ldr	r3, [r7, #4]
 811e486:	739a      	strb	r2, [r3, #14]
 811e488:	68f8      	ldr	r0, [r7, #12]
 811e48a:	f000 fad3 	bl	811ea34 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 811e48e:	687b      	ldr	r3, [r7, #4]
 811e490:	7b9b      	ldrb	r3, [r3, #14]
 811e492:	2b00      	cmp	r3, #0
 811e494:	d106      	bne.n	811e4a4 <pbuf_ref+0x3c>
 811e496:	4b05      	ldr	r3, [pc, #20]	@ (811e4ac <pbuf_ref+0x44>)
 811e498:	f240 3242 	movw	r2, #834	@ 0x342
 811e49c:	4904      	ldr	r1, [pc, #16]	@ (811e4b0 <pbuf_ref+0x48>)
 811e49e:	4805      	ldr	r0, [pc, #20]	@ (811e4b4 <pbuf_ref+0x4c>)
 811e4a0:	f008 fae8 	bl	8126a74 <iprintf>
  }
}
 811e4a4:	bf00      	nop
 811e4a6:	3710      	adds	r7, #16
 811e4a8:	46bd      	mov	sp, r7
 811e4aa:	bd80      	pop	{r7, pc}
 811e4ac:	08128d48 	.word	0x08128d48
 811e4b0:	08128f6c 	.word	0x08128f6c
 811e4b4:	08128dec 	.word	0x08128dec

0811e4b8 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 811e4b8:	b580      	push	{r7, lr}
 811e4ba:	b084      	sub	sp, #16
 811e4bc:	af00      	add	r7, sp, #0
 811e4be:	6078      	str	r0, [r7, #4]
 811e4c0:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 811e4c2:	687b      	ldr	r3, [r7, #4]
 811e4c4:	2b00      	cmp	r3, #0
 811e4c6:	d002      	beq.n	811e4ce <pbuf_cat+0x16>
 811e4c8:	683b      	ldr	r3, [r7, #0]
 811e4ca:	2b00      	cmp	r3, #0
 811e4cc:	d107      	bne.n	811e4de <pbuf_cat+0x26>
 811e4ce:	4b20      	ldr	r3, [pc, #128]	@ (811e550 <pbuf_cat+0x98>)
 811e4d0:	f240 3259 	movw	r2, #857	@ 0x359
 811e4d4:	491f      	ldr	r1, [pc, #124]	@ (811e554 <pbuf_cat+0x9c>)
 811e4d6:	4820      	ldr	r0, [pc, #128]	@ (811e558 <pbuf_cat+0xa0>)
 811e4d8:	f008 facc 	bl	8126a74 <iprintf>
 811e4dc:	e034      	b.n	811e548 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 811e4de:	687b      	ldr	r3, [r7, #4]
 811e4e0:	60fb      	str	r3, [r7, #12]
 811e4e2:	e00a      	b.n	811e4fa <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 811e4e4:	68fb      	ldr	r3, [r7, #12]
 811e4e6:	891a      	ldrh	r2, [r3, #8]
 811e4e8:	683b      	ldr	r3, [r7, #0]
 811e4ea:	891b      	ldrh	r3, [r3, #8]
 811e4ec:	4413      	add	r3, r2
 811e4ee:	b29a      	uxth	r2, r3
 811e4f0:	68fb      	ldr	r3, [r7, #12]
 811e4f2:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 811e4f4:	68fb      	ldr	r3, [r7, #12]
 811e4f6:	681b      	ldr	r3, [r3, #0]
 811e4f8:	60fb      	str	r3, [r7, #12]
 811e4fa:	68fb      	ldr	r3, [r7, #12]
 811e4fc:	681b      	ldr	r3, [r3, #0]
 811e4fe:	2b00      	cmp	r3, #0
 811e500:	d1f0      	bne.n	811e4e4 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 811e502:	68fb      	ldr	r3, [r7, #12]
 811e504:	891a      	ldrh	r2, [r3, #8]
 811e506:	68fb      	ldr	r3, [r7, #12]
 811e508:	895b      	ldrh	r3, [r3, #10]
 811e50a:	429a      	cmp	r2, r3
 811e50c:	d006      	beq.n	811e51c <pbuf_cat+0x64>
 811e50e:	4b10      	ldr	r3, [pc, #64]	@ (811e550 <pbuf_cat+0x98>)
 811e510:	f240 3262 	movw	r2, #866	@ 0x362
 811e514:	4911      	ldr	r1, [pc, #68]	@ (811e55c <pbuf_cat+0xa4>)
 811e516:	4810      	ldr	r0, [pc, #64]	@ (811e558 <pbuf_cat+0xa0>)
 811e518:	f008 faac 	bl	8126a74 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 811e51c:	68fb      	ldr	r3, [r7, #12]
 811e51e:	681b      	ldr	r3, [r3, #0]
 811e520:	2b00      	cmp	r3, #0
 811e522:	d006      	beq.n	811e532 <pbuf_cat+0x7a>
 811e524:	4b0a      	ldr	r3, [pc, #40]	@ (811e550 <pbuf_cat+0x98>)
 811e526:	f240 3263 	movw	r2, #867	@ 0x363
 811e52a:	490d      	ldr	r1, [pc, #52]	@ (811e560 <pbuf_cat+0xa8>)
 811e52c:	480a      	ldr	r0, [pc, #40]	@ (811e558 <pbuf_cat+0xa0>)
 811e52e:	f008 faa1 	bl	8126a74 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 811e532:	68fb      	ldr	r3, [r7, #12]
 811e534:	891a      	ldrh	r2, [r3, #8]
 811e536:	683b      	ldr	r3, [r7, #0]
 811e538:	891b      	ldrh	r3, [r3, #8]
 811e53a:	4413      	add	r3, r2
 811e53c:	b29a      	uxth	r2, r3
 811e53e:	68fb      	ldr	r3, [r7, #12]
 811e540:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 811e542:	68fb      	ldr	r3, [r7, #12]
 811e544:	683a      	ldr	r2, [r7, #0]
 811e546:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 811e548:	3710      	adds	r7, #16
 811e54a:	46bd      	mov	sp, r7
 811e54c:	bd80      	pop	{r7, pc}
 811e54e:	bf00      	nop
 811e550:	08128d48 	.word	0x08128d48
 811e554:	08128f80 	.word	0x08128f80
 811e558:	08128dec 	.word	0x08128dec
 811e55c:	08128fb8 	.word	0x08128fb8
 811e560:	08128fe8 	.word	0x08128fe8

0811e564 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 811e564:	b580      	push	{r7, lr}
 811e566:	b082      	sub	sp, #8
 811e568:	af00      	add	r7, sp, #0
 811e56a:	6078      	str	r0, [r7, #4]
 811e56c:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 811e56e:	6839      	ldr	r1, [r7, #0]
 811e570:	6878      	ldr	r0, [r7, #4]
 811e572:	f7ff ffa1 	bl	811e4b8 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 811e576:	6838      	ldr	r0, [r7, #0]
 811e578:	f7ff ff76 	bl	811e468 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 811e57c:	bf00      	nop
 811e57e:	3708      	adds	r7, #8
 811e580:	46bd      	mov	sp, r7
 811e582:	bd80      	pop	{r7, pc}

0811e584 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 811e584:	b580      	push	{r7, lr}
 811e586:	b086      	sub	sp, #24
 811e588:	af00      	add	r7, sp, #0
 811e58a:	6078      	str	r0, [r7, #4]
 811e58c:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 811e58e:	2300      	movs	r3, #0
 811e590:	617b      	str	r3, [r7, #20]
 811e592:	2300      	movs	r3, #0
 811e594:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 811e596:	687b      	ldr	r3, [r7, #4]
 811e598:	2b00      	cmp	r3, #0
 811e59a:	d008      	beq.n	811e5ae <pbuf_copy+0x2a>
 811e59c:	683b      	ldr	r3, [r7, #0]
 811e59e:	2b00      	cmp	r3, #0
 811e5a0:	d005      	beq.n	811e5ae <pbuf_copy+0x2a>
 811e5a2:	687b      	ldr	r3, [r7, #4]
 811e5a4:	891a      	ldrh	r2, [r3, #8]
 811e5a6:	683b      	ldr	r3, [r7, #0]
 811e5a8:	891b      	ldrh	r3, [r3, #8]
 811e5aa:	429a      	cmp	r2, r3
 811e5ac:	d209      	bcs.n	811e5c2 <pbuf_copy+0x3e>
 811e5ae:	4b57      	ldr	r3, [pc, #348]	@ (811e70c <pbuf_copy+0x188>)
 811e5b0:	f240 32c9 	movw	r2, #969	@ 0x3c9
 811e5b4:	4956      	ldr	r1, [pc, #344]	@ (811e710 <pbuf_copy+0x18c>)
 811e5b6:	4857      	ldr	r0, [pc, #348]	@ (811e714 <pbuf_copy+0x190>)
 811e5b8:	f008 fa5c 	bl	8126a74 <iprintf>
 811e5bc:	f06f 030f 	mvn.w	r3, #15
 811e5c0:	e09f      	b.n	811e702 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 811e5c2:	687b      	ldr	r3, [r7, #4]
 811e5c4:	895b      	ldrh	r3, [r3, #10]
 811e5c6:	461a      	mov	r2, r3
 811e5c8:	697b      	ldr	r3, [r7, #20]
 811e5ca:	1ad2      	subs	r2, r2, r3
 811e5cc:	683b      	ldr	r3, [r7, #0]
 811e5ce:	895b      	ldrh	r3, [r3, #10]
 811e5d0:	4619      	mov	r1, r3
 811e5d2:	693b      	ldr	r3, [r7, #16]
 811e5d4:	1acb      	subs	r3, r1, r3
 811e5d6:	429a      	cmp	r2, r3
 811e5d8:	d306      	bcc.n	811e5e8 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 811e5da:	683b      	ldr	r3, [r7, #0]
 811e5dc:	895b      	ldrh	r3, [r3, #10]
 811e5de:	461a      	mov	r2, r3
 811e5e0:	693b      	ldr	r3, [r7, #16]
 811e5e2:	1ad3      	subs	r3, r2, r3
 811e5e4:	60fb      	str	r3, [r7, #12]
 811e5e6:	e005      	b.n	811e5f4 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 811e5e8:	687b      	ldr	r3, [r7, #4]
 811e5ea:	895b      	ldrh	r3, [r3, #10]
 811e5ec:	461a      	mov	r2, r3
 811e5ee:	697b      	ldr	r3, [r7, #20]
 811e5f0:	1ad3      	subs	r3, r2, r3
 811e5f2:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 811e5f4:	687b      	ldr	r3, [r7, #4]
 811e5f6:	685a      	ldr	r2, [r3, #4]
 811e5f8:	697b      	ldr	r3, [r7, #20]
 811e5fa:	18d0      	adds	r0, r2, r3
 811e5fc:	683b      	ldr	r3, [r7, #0]
 811e5fe:	685a      	ldr	r2, [r3, #4]
 811e600:	693b      	ldr	r3, [r7, #16]
 811e602:	4413      	add	r3, r2
 811e604:	68fa      	ldr	r2, [r7, #12]
 811e606:	4619      	mov	r1, r3
 811e608:	f008 fc97 	bl	8126f3a <memcpy>
    offset_to += len;
 811e60c:	697a      	ldr	r2, [r7, #20]
 811e60e:	68fb      	ldr	r3, [r7, #12]
 811e610:	4413      	add	r3, r2
 811e612:	617b      	str	r3, [r7, #20]
    offset_from += len;
 811e614:	693a      	ldr	r2, [r7, #16]
 811e616:	68fb      	ldr	r3, [r7, #12]
 811e618:	4413      	add	r3, r2
 811e61a:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 811e61c:	687b      	ldr	r3, [r7, #4]
 811e61e:	895b      	ldrh	r3, [r3, #10]
 811e620:	461a      	mov	r2, r3
 811e622:	697b      	ldr	r3, [r7, #20]
 811e624:	4293      	cmp	r3, r2
 811e626:	d906      	bls.n	811e636 <pbuf_copy+0xb2>
 811e628:	4b38      	ldr	r3, [pc, #224]	@ (811e70c <pbuf_copy+0x188>)
 811e62a:	f240 32d9 	movw	r2, #985	@ 0x3d9
 811e62e:	493a      	ldr	r1, [pc, #232]	@ (811e718 <pbuf_copy+0x194>)
 811e630:	4838      	ldr	r0, [pc, #224]	@ (811e714 <pbuf_copy+0x190>)
 811e632:	f008 fa1f 	bl	8126a74 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 811e636:	683b      	ldr	r3, [r7, #0]
 811e638:	895b      	ldrh	r3, [r3, #10]
 811e63a:	461a      	mov	r2, r3
 811e63c:	693b      	ldr	r3, [r7, #16]
 811e63e:	4293      	cmp	r3, r2
 811e640:	d906      	bls.n	811e650 <pbuf_copy+0xcc>
 811e642:	4b32      	ldr	r3, [pc, #200]	@ (811e70c <pbuf_copy+0x188>)
 811e644:	f240 32da 	movw	r2, #986	@ 0x3da
 811e648:	4934      	ldr	r1, [pc, #208]	@ (811e71c <pbuf_copy+0x198>)
 811e64a:	4832      	ldr	r0, [pc, #200]	@ (811e714 <pbuf_copy+0x190>)
 811e64c:	f008 fa12 	bl	8126a74 <iprintf>
    if (offset_from >= p_from->len) {
 811e650:	683b      	ldr	r3, [r7, #0]
 811e652:	895b      	ldrh	r3, [r3, #10]
 811e654:	461a      	mov	r2, r3
 811e656:	693b      	ldr	r3, [r7, #16]
 811e658:	4293      	cmp	r3, r2
 811e65a:	d304      	bcc.n	811e666 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 811e65c:	2300      	movs	r3, #0
 811e65e:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 811e660:	683b      	ldr	r3, [r7, #0]
 811e662:	681b      	ldr	r3, [r3, #0]
 811e664:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 811e666:	687b      	ldr	r3, [r7, #4]
 811e668:	895b      	ldrh	r3, [r3, #10]
 811e66a:	461a      	mov	r2, r3
 811e66c:	697b      	ldr	r3, [r7, #20]
 811e66e:	4293      	cmp	r3, r2
 811e670:	d114      	bne.n	811e69c <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 811e672:	2300      	movs	r3, #0
 811e674:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 811e676:	687b      	ldr	r3, [r7, #4]
 811e678:	681b      	ldr	r3, [r3, #0]
 811e67a:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 811e67c:	687b      	ldr	r3, [r7, #4]
 811e67e:	2b00      	cmp	r3, #0
 811e680:	d10c      	bne.n	811e69c <pbuf_copy+0x118>
 811e682:	683b      	ldr	r3, [r7, #0]
 811e684:	2b00      	cmp	r3, #0
 811e686:	d009      	beq.n	811e69c <pbuf_copy+0x118>
 811e688:	4b20      	ldr	r3, [pc, #128]	@ (811e70c <pbuf_copy+0x188>)
 811e68a:	f44f 7279 	mov.w	r2, #996	@ 0x3e4
 811e68e:	4924      	ldr	r1, [pc, #144]	@ (811e720 <pbuf_copy+0x19c>)
 811e690:	4820      	ldr	r0, [pc, #128]	@ (811e714 <pbuf_copy+0x190>)
 811e692:	f008 f9ef 	bl	8126a74 <iprintf>
 811e696:	f06f 030f 	mvn.w	r3, #15
 811e69a:	e032      	b.n	811e702 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 811e69c:	683b      	ldr	r3, [r7, #0]
 811e69e:	2b00      	cmp	r3, #0
 811e6a0:	d013      	beq.n	811e6ca <pbuf_copy+0x146>
 811e6a2:	683b      	ldr	r3, [r7, #0]
 811e6a4:	895a      	ldrh	r2, [r3, #10]
 811e6a6:	683b      	ldr	r3, [r7, #0]
 811e6a8:	891b      	ldrh	r3, [r3, #8]
 811e6aa:	429a      	cmp	r2, r3
 811e6ac:	d10d      	bne.n	811e6ca <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 811e6ae:	683b      	ldr	r3, [r7, #0]
 811e6b0:	681b      	ldr	r3, [r3, #0]
 811e6b2:	2b00      	cmp	r3, #0
 811e6b4:	d009      	beq.n	811e6ca <pbuf_copy+0x146>
 811e6b6:	4b15      	ldr	r3, [pc, #84]	@ (811e70c <pbuf_copy+0x188>)
 811e6b8:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 811e6bc:	4919      	ldr	r1, [pc, #100]	@ (811e724 <pbuf_copy+0x1a0>)
 811e6be:	4815      	ldr	r0, [pc, #84]	@ (811e714 <pbuf_copy+0x190>)
 811e6c0:	f008 f9d8 	bl	8126a74 <iprintf>
 811e6c4:	f06f 0305 	mvn.w	r3, #5
 811e6c8:	e01b      	b.n	811e702 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 811e6ca:	687b      	ldr	r3, [r7, #4]
 811e6cc:	2b00      	cmp	r3, #0
 811e6ce:	d013      	beq.n	811e6f8 <pbuf_copy+0x174>
 811e6d0:	687b      	ldr	r3, [r7, #4]
 811e6d2:	895a      	ldrh	r2, [r3, #10]
 811e6d4:	687b      	ldr	r3, [r7, #4]
 811e6d6:	891b      	ldrh	r3, [r3, #8]
 811e6d8:	429a      	cmp	r2, r3
 811e6da:	d10d      	bne.n	811e6f8 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 811e6dc:	687b      	ldr	r3, [r7, #4]
 811e6de:	681b      	ldr	r3, [r3, #0]
 811e6e0:	2b00      	cmp	r3, #0
 811e6e2:	d009      	beq.n	811e6f8 <pbuf_copy+0x174>
 811e6e4:	4b09      	ldr	r3, [pc, #36]	@ (811e70c <pbuf_copy+0x188>)
 811e6e6:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 811e6ea:	490e      	ldr	r1, [pc, #56]	@ (811e724 <pbuf_copy+0x1a0>)
 811e6ec:	4809      	ldr	r0, [pc, #36]	@ (811e714 <pbuf_copy+0x190>)
 811e6ee:	f008 f9c1 	bl	8126a74 <iprintf>
 811e6f2:	f06f 0305 	mvn.w	r3, #5
 811e6f6:	e004      	b.n	811e702 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 811e6f8:	683b      	ldr	r3, [r7, #0]
 811e6fa:	2b00      	cmp	r3, #0
 811e6fc:	f47f af61 	bne.w	811e5c2 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 811e700:	2300      	movs	r3, #0
}
 811e702:	4618      	mov	r0, r3
 811e704:	3718      	adds	r7, #24
 811e706:	46bd      	mov	sp, r7
 811e708:	bd80      	pop	{r7, pc}
 811e70a:	bf00      	nop
 811e70c:	08128d48 	.word	0x08128d48
 811e710:	08129034 	.word	0x08129034
 811e714:	08128dec 	.word	0x08128dec
 811e718:	08129064 	.word	0x08129064
 811e71c:	0812907c 	.word	0x0812907c
 811e720:	08129098 	.word	0x08129098
 811e724:	081290a8 	.word	0x081290a8

0811e728 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 811e728:	b580      	push	{r7, lr}
 811e72a:	b088      	sub	sp, #32
 811e72c:	af00      	add	r7, sp, #0
 811e72e:	60f8      	str	r0, [r7, #12]
 811e730:	60b9      	str	r1, [r7, #8]
 811e732:	4611      	mov	r1, r2
 811e734:	461a      	mov	r2, r3
 811e736:	460b      	mov	r3, r1
 811e738:	80fb      	strh	r3, [r7, #6]
 811e73a:	4613      	mov	r3, r2
 811e73c:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 811e73e:	2300      	movs	r3, #0
 811e740:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 811e742:	2300      	movs	r3, #0
 811e744:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 811e746:	68fb      	ldr	r3, [r7, #12]
 811e748:	2b00      	cmp	r3, #0
 811e74a:	d108      	bne.n	811e75e <pbuf_copy_partial+0x36>
 811e74c:	4b2b      	ldr	r3, [pc, #172]	@ (811e7fc <pbuf_copy_partial+0xd4>)
 811e74e:	f240 420a 	movw	r2, #1034	@ 0x40a
 811e752:	492b      	ldr	r1, [pc, #172]	@ (811e800 <pbuf_copy_partial+0xd8>)
 811e754:	482b      	ldr	r0, [pc, #172]	@ (811e804 <pbuf_copy_partial+0xdc>)
 811e756:	f008 f98d 	bl	8126a74 <iprintf>
 811e75a:	2300      	movs	r3, #0
 811e75c:	e04a      	b.n	811e7f4 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 811e75e:	68bb      	ldr	r3, [r7, #8]
 811e760:	2b00      	cmp	r3, #0
 811e762:	d108      	bne.n	811e776 <pbuf_copy_partial+0x4e>
 811e764:	4b25      	ldr	r3, [pc, #148]	@ (811e7fc <pbuf_copy_partial+0xd4>)
 811e766:	f240 420b 	movw	r2, #1035	@ 0x40b
 811e76a:	4927      	ldr	r1, [pc, #156]	@ (811e808 <pbuf_copy_partial+0xe0>)
 811e76c:	4825      	ldr	r0, [pc, #148]	@ (811e804 <pbuf_copy_partial+0xdc>)
 811e76e:	f008 f981 	bl	8126a74 <iprintf>
 811e772:	2300      	movs	r3, #0
 811e774:	e03e      	b.n	811e7f4 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 811e776:	68fb      	ldr	r3, [r7, #12]
 811e778:	61fb      	str	r3, [r7, #28]
 811e77a:	e034      	b.n	811e7e6 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 811e77c:	88bb      	ldrh	r3, [r7, #4]
 811e77e:	2b00      	cmp	r3, #0
 811e780:	d00a      	beq.n	811e798 <pbuf_copy_partial+0x70>
 811e782:	69fb      	ldr	r3, [r7, #28]
 811e784:	895b      	ldrh	r3, [r3, #10]
 811e786:	88ba      	ldrh	r2, [r7, #4]
 811e788:	429a      	cmp	r2, r3
 811e78a:	d305      	bcc.n	811e798 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 811e78c:	69fb      	ldr	r3, [r7, #28]
 811e78e:	895b      	ldrh	r3, [r3, #10]
 811e790:	88ba      	ldrh	r2, [r7, #4]
 811e792:	1ad3      	subs	r3, r2, r3
 811e794:	80bb      	strh	r3, [r7, #4]
 811e796:	e023      	b.n	811e7e0 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 811e798:	69fb      	ldr	r3, [r7, #28]
 811e79a:	895a      	ldrh	r2, [r3, #10]
 811e79c:	88bb      	ldrh	r3, [r7, #4]
 811e79e:	1ad3      	subs	r3, r2, r3
 811e7a0:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 811e7a2:	8b3a      	ldrh	r2, [r7, #24]
 811e7a4:	88fb      	ldrh	r3, [r7, #6]
 811e7a6:	429a      	cmp	r2, r3
 811e7a8:	d901      	bls.n	811e7ae <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 811e7aa:	88fb      	ldrh	r3, [r7, #6]
 811e7ac:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 811e7ae:	8b7b      	ldrh	r3, [r7, #26]
 811e7b0:	68ba      	ldr	r2, [r7, #8]
 811e7b2:	18d0      	adds	r0, r2, r3
 811e7b4:	69fb      	ldr	r3, [r7, #28]
 811e7b6:	685a      	ldr	r2, [r3, #4]
 811e7b8:	88bb      	ldrh	r3, [r7, #4]
 811e7ba:	4413      	add	r3, r2
 811e7bc:	8b3a      	ldrh	r2, [r7, #24]
 811e7be:	4619      	mov	r1, r3
 811e7c0:	f008 fbbb 	bl	8126f3a <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 811e7c4:	8afa      	ldrh	r2, [r7, #22]
 811e7c6:	8b3b      	ldrh	r3, [r7, #24]
 811e7c8:	4413      	add	r3, r2
 811e7ca:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 811e7cc:	8b7a      	ldrh	r2, [r7, #26]
 811e7ce:	8b3b      	ldrh	r3, [r7, #24]
 811e7d0:	4413      	add	r3, r2
 811e7d2:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 811e7d4:	88fa      	ldrh	r2, [r7, #6]
 811e7d6:	8b3b      	ldrh	r3, [r7, #24]
 811e7d8:	1ad3      	subs	r3, r2, r3
 811e7da:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 811e7dc:	2300      	movs	r3, #0
 811e7de:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 811e7e0:	69fb      	ldr	r3, [r7, #28]
 811e7e2:	681b      	ldr	r3, [r3, #0]
 811e7e4:	61fb      	str	r3, [r7, #28]
 811e7e6:	88fb      	ldrh	r3, [r7, #6]
 811e7e8:	2b00      	cmp	r3, #0
 811e7ea:	d002      	beq.n	811e7f2 <pbuf_copy_partial+0xca>
 811e7ec:	69fb      	ldr	r3, [r7, #28]
 811e7ee:	2b00      	cmp	r3, #0
 811e7f0:	d1c4      	bne.n	811e77c <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 811e7f2:	8afb      	ldrh	r3, [r7, #22]
}
 811e7f4:	4618      	mov	r0, r3
 811e7f6:	3720      	adds	r7, #32
 811e7f8:	46bd      	mov	sp, r7
 811e7fa:	bd80      	pop	{r7, pc}
 811e7fc:	08128d48 	.word	0x08128d48
 811e800:	081290d4 	.word	0x081290d4
 811e804:	08128dec 	.word	0x08128dec
 811e808:	081290f4 	.word	0x081290f4

0811e80c <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 811e80c:	b580      	push	{r7, lr}
 811e80e:	b084      	sub	sp, #16
 811e810:	af00      	add	r7, sp, #0
 811e812:	4603      	mov	r3, r0
 811e814:	603a      	str	r2, [r7, #0]
 811e816:	71fb      	strb	r3, [r7, #7]
 811e818:	460b      	mov	r3, r1
 811e81a:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 811e81c:	683b      	ldr	r3, [r7, #0]
 811e81e:	8919      	ldrh	r1, [r3, #8]
 811e820:	88ba      	ldrh	r2, [r7, #4]
 811e822:	79fb      	ldrb	r3, [r7, #7]
 811e824:	4618      	mov	r0, r3
 811e826:	f7ff fa97 	bl	811dd58 <pbuf_alloc>
 811e82a:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 811e82c:	68fb      	ldr	r3, [r7, #12]
 811e82e:	2b00      	cmp	r3, #0
 811e830:	d101      	bne.n	811e836 <pbuf_clone+0x2a>
    return NULL;
 811e832:	2300      	movs	r3, #0
 811e834:	e011      	b.n	811e85a <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 811e836:	6839      	ldr	r1, [r7, #0]
 811e838:	68f8      	ldr	r0, [r7, #12]
 811e83a:	f7ff fea3 	bl	811e584 <pbuf_copy>
 811e83e:	4603      	mov	r3, r0
 811e840:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 811e842:	f997 300b 	ldrsb.w	r3, [r7, #11]
 811e846:	2b00      	cmp	r3, #0
 811e848:	d006      	beq.n	811e858 <pbuf_clone+0x4c>
 811e84a:	4b06      	ldr	r3, [pc, #24]	@ (811e864 <pbuf_clone+0x58>)
 811e84c:	f240 5224 	movw	r2, #1316	@ 0x524
 811e850:	4905      	ldr	r1, [pc, #20]	@ (811e868 <pbuf_clone+0x5c>)
 811e852:	4806      	ldr	r0, [pc, #24]	@ (811e86c <pbuf_clone+0x60>)
 811e854:	f008 f90e 	bl	8126a74 <iprintf>
  return q;
 811e858:	68fb      	ldr	r3, [r7, #12]
}
 811e85a:	4618      	mov	r0, r3
 811e85c:	3710      	adds	r7, #16
 811e85e:	46bd      	mov	sp, r7
 811e860:	bd80      	pop	{r7, pc}
 811e862:	bf00      	nop
 811e864:	08128d48 	.word	0x08128d48
 811e868:	08129200 	.word	0x08129200
 811e86c:	08128dec 	.word	0x08128dec

0811e870 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 811e870:	b580      	push	{r7, lr}
 811e872:	b082      	sub	sp, #8
 811e874:	af00      	add	r7, sp, #0
 811e876:	6078      	str	r0, [r7, #4]
 811e878:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
#else
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 811e87a:	683b      	ldr	r3, [r7, #0]
 811e87c:	2200      	movs	r2, #0
 811e87e:	2104      	movs	r1, #4
 811e880:	4618      	mov	r0, r3
 811e882:	f7f7 fa91 	bl	8115da8 <osMessageQueueNew>
 811e886:	4602      	mov	r2, r0
 811e888:	687b      	ldr	r3, [r7, #4]
 811e88a:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 811e88c:	687b      	ldr	r3, [r7, #4]
 811e88e:	681b      	ldr	r3, [r3, #0]
 811e890:	2b00      	cmp	r3, #0
 811e892:	d102      	bne.n	811e89a <sys_mbox_new+0x2a>
    return ERR_MEM;
 811e894:	f04f 33ff 	mov.w	r3, #4294967295
 811e898:	e000      	b.n	811e89c <sys_mbox_new+0x2c>

  return ERR_OK;
 811e89a:	2300      	movs	r3, #0
}
 811e89c:	4618      	mov	r0, r3
 811e89e:	3708      	adds	r7, #8
 811e8a0:	46bd      	mov	sp, r7
 811e8a2:	bd80      	pop	{r7, pc}

0811e8a4 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 811e8a4:	b580      	push	{r7, lr}
 811e8a6:	b084      	sub	sp, #16
 811e8a8:	af00      	add	r7, sp, #0
 811e8aa:	6078      	str	r0, [r7, #4]
 811e8ac:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 811e8ae:	687b      	ldr	r3, [r7, #4]
 811e8b0:	6818      	ldr	r0, [r3, #0]
 811e8b2:	4639      	mov	r1, r7
 811e8b4:	2300      	movs	r3, #0
 811e8b6:	2200      	movs	r2, #0
 811e8b8:	f7f7 faea 	bl	8115e90 <osMessageQueuePut>
 811e8bc:	4603      	mov	r3, r0
 811e8be:	2b00      	cmp	r3, #0
 811e8c0:	d102      	bne.n	811e8c8 <sys_mbox_trypost+0x24>
#endif
  {
    result = ERR_OK;
 811e8c2:	2300      	movs	r3, #0
 811e8c4:	73fb      	strb	r3, [r7, #15]
 811e8c6:	e001      	b.n	811e8cc <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 811e8c8:	23ff      	movs	r3, #255	@ 0xff
 811e8ca:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 811e8cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 811e8d0:	4618      	mov	r0, r3
 811e8d2:	3710      	adds	r7, #16
 811e8d4:	46bd      	mov	sp, r7
 811e8d6:	bd80      	pop	{r7, pc}

0811e8d8 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 811e8d8:	b580      	push	{r7, lr}
 811e8da:	b086      	sub	sp, #24
 811e8dc:	af00      	add	r7, sp, #0
 811e8de:	60f8      	str	r0, [r7, #12]
 811e8e0:	60b9      	str	r1, [r7, #8]
 811e8e2:	607a      	str	r2, [r7, #4]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
 811e8e4:	f7f6 ff70 	bl	81157c8 <osKernelGetTickCount>
 811e8e8:	6178      	str	r0, [r7, #20]
#endif
  if(timeout != 0)
 811e8ea:	687b      	ldr	r3, [r7, #4]
 811e8ec:	2b00      	cmp	r3, #0
 811e8ee:	d013      	beq.n	811e918 <sys_arch_mbox_fetch+0x40>
    {
      *msg = (void *)event.value.v;
      return (osKernelSysTick() - starttime);
    }
#else
    status = osMessageQueueGet(*mbox, msg, 0, timeout);
 811e8f0:	68fb      	ldr	r3, [r7, #12]
 811e8f2:	6818      	ldr	r0, [r3, #0]
 811e8f4:	687b      	ldr	r3, [r7, #4]
 811e8f6:	2200      	movs	r2, #0
 811e8f8:	68b9      	ldr	r1, [r7, #8]
 811e8fa:	f7f7 fb29 	bl	8115f50 <osMessageQueueGet>
 811e8fe:	6138      	str	r0, [r7, #16]
    if (status == osOK)
 811e900:	693b      	ldr	r3, [r7, #16]
 811e902:	2b00      	cmp	r3, #0
 811e904:	d105      	bne.n	811e912 <sys_arch_mbox_fetch+0x3a>
    {
      return (osKernelGetTickCount() - starttime);
 811e906:	f7f6 ff5f 	bl	81157c8 <osKernelGetTickCount>
 811e90a:	4602      	mov	r2, r0
 811e90c:	697b      	ldr	r3, [r7, #20]
 811e90e:	1ad3      	subs	r3, r2, r3
 811e910:	e00f      	b.n	811e932 <sys_arch_mbox_fetch+0x5a>
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 811e912:	f04f 33ff 	mov.w	r3, #4294967295
 811e916:	e00c      	b.n	811e932 <sys_arch_mbox_fetch+0x5a>
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
    *msg = (void *)event.value.v;
    return (osKernelSysTick() - starttime);
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
 811e918:	68fb      	ldr	r3, [r7, #12]
 811e91a:	6818      	ldr	r0, [r3, #0]
 811e91c:	f04f 33ff 	mov.w	r3, #4294967295
 811e920:	2200      	movs	r2, #0
 811e922:	68b9      	ldr	r1, [r7, #8]
 811e924:	f7f7 fb14 	bl	8115f50 <osMessageQueueGet>
    return (osKernelGetTickCount() - starttime);
 811e928:	f7f6 ff4e 	bl	81157c8 <osKernelGetTickCount>
 811e92c:	4602      	mov	r2, r0
 811e92e:	697b      	ldr	r3, [r7, #20]
 811e930:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 811e932:	4618      	mov	r0, r3
 811e934:	3718      	adds	r7, #24
 811e936:	46bd      	mov	sp, r7
 811e938:	bd80      	pop	{r7, pc}

0811e93a <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 811e93a:	b480      	push	{r7}
 811e93c:	b083      	sub	sp, #12
 811e93e:	af00      	add	r7, sp, #0
 811e940:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 811e942:	687b      	ldr	r3, [r7, #4]
 811e944:	681b      	ldr	r3, [r3, #0]
 811e946:	2b00      	cmp	r3, #0
 811e948:	d101      	bne.n	811e94e <sys_mbox_valid+0x14>
    return 0;
 811e94a:	2300      	movs	r3, #0
 811e94c:	e000      	b.n	811e950 <sys_mbox_valid+0x16>
  else
    return 1;
 811e94e:	2301      	movs	r3, #1
}
 811e950:	4618      	mov	r0, r3
 811e952:	370c      	adds	r7, #12
 811e954:	46bd      	mov	sp, r7
 811e956:	f85d 7b04 	ldr.w	r7, [sp], #4
 811e95a:	4770      	bx	lr

0811e95c <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 811e95c:	b580      	push	{r7, lr}
 811e95e:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
#else
  lwip_sys_mutex = osMutexNew(NULL);
 811e960:	2000      	movs	r0, #0
 811e962:	f7f6 fff3 	bl	811594c <osMutexNew>
 811e966:	4603      	mov	r3, r0
 811e968:	4a01      	ldr	r2, [pc, #4]	@ (811e970 <sys_init+0x14>)
 811e96a:	6013      	str	r3, [r2, #0]
#endif
}
 811e96c:	bf00      	nop
 811e96e:	bd80      	pop	{r7, pc}
 811e970:	1000e508 	.word	0x1000e508

0811e974 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 811e974:	b580      	push	{r7, lr}
 811e976:	b082      	sub	sp, #8
 811e978:	af00      	add	r7, sp, #0
 811e97a:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
  *mutex = osMutexCreate(osMutex(MUTEX));
#else
  *mutex = osMutexNew(NULL);
 811e97c:	2000      	movs	r0, #0
 811e97e:	f7f6 ffe5 	bl	811594c <osMutexNew>
 811e982:	4602      	mov	r2, r0
 811e984:	687b      	ldr	r3, [r7, #4]
 811e986:	601a      	str	r2, [r3, #0]
#endif

  if(*mutex == NULL)
 811e988:	687b      	ldr	r3, [r7, #4]
 811e98a:	681b      	ldr	r3, [r3, #0]
 811e98c:	2b00      	cmp	r3, #0
 811e98e:	d102      	bne.n	811e996 <sys_mutex_new+0x22>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 811e990:	f04f 33ff 	mov.w	r3, #4294967295
 811e994:	e000      	b.n	811e998 <sys_mutex_new+0x24>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 811e996:	2300      	movs	r3, #0
}
 811e998:	4618      	mov	r0, r3
 811e99a:	3708      	adds	r7, #8
 811e99c:	46bd      	mov	sp, r7
 811e99e:	bd80      	pop	{r7, pc}

0811e9a0 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 811e9a0:	b580      	push	{r7, lr}
 811e9a2:	b082      	sub	sp, #8
 811e9a4:	af00      	add	r7, sp, #0
 811e9a6:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
#else
  osMutexAcquire(*mutex, osWaitForever);
 811e9a8:	687b      	ldr	r3, [r7, #4]
 811e9aa:	681b      	ldr	r3, [r3, #0]
 811e9ac:	f04f 31ff 	mov.w	r1, #4294967295
 811e9b0:	4618      	mov	r0, r3
 811e9b2:	f7f7 f851 	bl	8115a58 <osMutexAcquire>
#endif
}
 811e9b6:	bf00      	nop
 811e9b8:	3708      	adds	r7, #8
 811e9ba:	46bd      	mov	sp, r7
 811e9bc:	bd80      	pop	{r7, pc}

0811e9be <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 811e9be:	b580      	push	{r7, lr}
 811e9c0:	b082      	sub	sp, #8
 811e9c2:	af00      	add	r7, sp, #0
 811e9c4:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 811e9c6:	687b      	ldr	r3, [r7, #4]
 811e9c8:	681b      	ldr	r3, [r3, #0]
 811e9ca:	4618      	mov	r0, r3
 811e9cc:	f7f7 f88f 	bl	8115aee <osMutexRelease>
}
 811e9d0:	bf00      	nop
 811e9d2:	3708      	adds	r7, #8
 811e9d4:	46bd      	mov	sp, r7
 811e9d6:	bd80      	pop	{r7, pc}

0811e9d8 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 811e9d8:	b580      	push	{r7, lr}
 811e9da:	b08e      	sub	sp, #56	@ 0x38
 811e9dc:	af00      	add	r7, sp, #0
 811e9de:	60f8      	str	r0, [r7, #12]
 811e9e0:	60b9      	str	r1, [r7, #8]
 811e9e2:	607a      	str	r2, [r7, #4]
 811e9e4:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
  return osThreadCreate(&os_thread_def, arg);
#else
  const osThreadAttr_t attributes = {
 811e9e6:	f107 0314 	add.w	r3, r7, #20
 811e9ea:	2224      	movs	r2, #36	@ 0x24
 811e9ec:	2100      	movs	r1, #0
 811e9ee:	4618      	mov	r0, r3
 811e9f0:	f008 f954 	bl	8126c9c <memset>
 811e9f4:	68fb      	ldr	r3, [r7, #12]
 811e9f6:	617b      	str	r3, [r7, #20]
 811e9f8:	683b      	ldr	r3, [r7, #0]
 811e9fa:	62bb      	str	r3, [r7, #40]	@ 0x28
 811e9fc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 811e9fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
                        .name = name,
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
 811ea00:	f107 0314 	add.w	r3, r7, #20
 811ea04:	461a      	mov	r2, r3
 811ea06:	6879      	ldr	r1, [r7, #4]
 811ea08:	68b8      	ldr	r0, [r7, #8]
 811ea0a:	f7f6 fef2 	bl	81157f2 <osThreadNew>
 811ea0e:	4603      	mov	r3, r0
#endif
}
 811ea10:	4618      	mov	r0, r3
 811ea12:	3738      	adds	r7, #56	@ 0x38
 811ea14:	46bd      	mov	sp, r7
 811ea16:	bd80      	pop	{r7, pc}

0811ea18 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 811ea18:	b580      	push	{r7, lr}
 811ea1a:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
 811ea1c:	4b04      	ldr	r3, [pc, #16]	@ (811ea30 <sys_arch_protect+0x18>)
 811ea1e:	681b      	ldr	r3, [r3, #0]
 811ea20:	f04f 31ff 	mov.w	r1, #4294967295
 811ea24:	4618      	mov	r0, r3
 811ea26:	f7f7 f817 	bl	8115a58 <osMutexAcquire>
#endif
  return (sys_prot_t)1;
 811ea2a:	2301      	movs	r3, #1
}
 811ea2c:	4618      	mov	r0, r3
 811ea2e:	bd80      	pop	{r7, pc}
 811ea30:	1000e508 	.word	0x1000e508

0811ea34 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 811ea34:	b580      	push	{r7, lr}
 811ea36:	b082      	sub	sp, #8
 811ea38:	af00      	add	r7, sp, #0
 811ea3a:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 811ea3c:	4b04      	ldr	r3, [pc, #16]	@ (811ea50 <sys_arch_unprotect+0x1c>)
 811ea3e:	681b      	ldr	r3, [r3, #0]
 811ea40:	4618      	mov	r0, r3
 811ea42:	f7f7 f854 	bl	8115aee <osMutexRelease>
}
 811ea46:	bf00      	nop
 811ea48:	3708      	adds	r7, #8
 811ea4a:	46bd      	mov	sp, r7
 811ea4c:	bd80      	pop	{r7, pc}
 811ea4e:	bf00      	nop
 811ea50:	1000e508 	.word	0x1000e508

0811ea54 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 811ea54:	b580      	push	{r7, lr}
 811ea56:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 811ea58:	f007 fa94 	bl	8125f84 <rand>
 811ea5c:	4603      	mov	r3, r0
 811ea5e:	b29b      	uxth	r3, r3
 811ea60:	f3c3 030d 	ubfx	r3, r3, #0, #14
 811ea64:	b29b      	uxth	r3, r3
 811ea66:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 811ea6a:	b29a      	uxth	r2, r3
 811ea6c:	4b01      	ldr	r3, [pc, #4]	@ (811ea74 <tcp_init+0x20>)
 811ea6e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 811ea70:	bf00      	nop
 811ea72:	bd80      	pop	{r7, pc}
 811ea74:	10000028 	.word	0x10000028

0811ea78 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 811ea78:	b580      	push	{r7, lr}
 811ea7a:	b082      	sub	sp, #8
 811ea7c:	af00      	add	r7, sp, #0
 811ea7e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 811ea80:	687b      	ldr	r3, [r7, #4]
 811ea82:	7d1b      	ldrb	r3, [r3, #20]
 811ea84:	2b01      	cmp	r3, #1
 811ea86:	d105      	bne.n	811ea94 <tcp_free+0x1c>
 811ea88:	4b06      	ldr	r3, [pc, #24]	@ (811eaa4 <tcp_free+0x2c>)
 811ea8a:	22d4      	movs	r2, #212	@ 0xd4
 811ea8c:	4906      	ldr	r1, [pc, #24]	@ (811eaa8 <tcp_free+0x30>)
 811ea8e:	4807      	ldr	r0, [pc, #28]	@ (811eaac <tcp_free+0x34>)
 811ea90:	f007 fff0 	bl	8126a74 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 811ea94:	6879      	ldr	r1, [r7, #4]
 811ea96:	2001      	movs	r0, #1
 811ea98:	f7fe fd9e 	bl	811d5d8 <memp_free>
}
 811ea9c:	bf00      	nop
 811ea9e:	3708      	adds	r7, #8
 811eaa0:	46bd      	mov	sp, r7
 811eaa2:	bd80      	pop	{r7, pc}
 811eaa4:	0812928c 	.word	0x0812928c
 811eaa8:	08129300 	.word	0x08129300
 811eaac:	08129314 	.word	0x08129314

0811eab0 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 811eab0:	b580      	push	{r7, lr}
 811eab2:	b082      	sub	sp, #8
 811eab4:	af00      	add	r7, sp, #0
 811eab6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 811eab8:	687b      	ldr	r3, [r7, #4]
 811eaba:	7d1b      	ldrb	r3, [r3, #20]
 811eabc:	2b01      	cmp	r3, #1
 811eabe:	d105      	bne.n	811eacc <tcp_free_listen+0x1c>
 811eac0:	4b06      	ldr	r3, [pc, #24]	@ (811eadc <tcp_free_listen+0x2c>)
 811eac2:	22df      	movs	r2, #223	@ 0xdf
 811eac4:	4906      	ldr	r1, [pc, #24]	@ (811eae0 <tcp_free_listen+0x30>)
 811eac6:	4807      	ldr	r0, [pc, #28]	@ (811eae4 <tcp_free_listen+0x34>)
 811eac8:	f007 ffd4 	bl	8126a74 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 811eacc:	6879      	ldr	r1, [r7, #4]
 811eace:	2002      	movs	r0, #2
 811ead0:	f7fe fd82 	bl	811d5d8 <memp_free>
}
 811ead4:	bf00      	nop
 811ead6:	3708      	adds	r7, #8
 811ead8:	46bd      	mov	sp, r7
 811eada:	bd80      	pop	{r7, pc}
 811eadc:	0812928c 	.word	0x0812928c
 811eae0:	0812933c 	.word	0x0812933c
 811eae4:	08129314 	.word	0x08129314

0811eae8 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 811eae8:	b580      	push	{r7, lr}
 811eaea:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 811eaec:	f001 f8a2 	bl	811fc34 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 811eaf0:	4b07      	ldr	r3, [pc, #28]	@ (811eb10 <tcp_tmr+0x28>)
 811eaf2:	781b      	ldrb	r3, [r3, #0]
 811eaf4:	3301      	adds	r3, #1
 811eaf6:	b2da      	uxtb	r2, r3
 811eaf8:	4b05      	ldr	r3, [pc, #20]	@ (811eb10 <tcp_tmr+0x28>)
 811eafa:	701a      	strb	r2, [r3, #0]
 811eafc:	4b04      	ldr	r3, [pc, #16]	@ (811eb10 <tcp_tmr+0x28>)
 811eafe:	781b      	ldrb	r3, [r3, #0]
 811eb00:	f003 0301 	and.w	r3, r3, #1
 811eb04:	2b00      	cmp	r3, #0
 811eb06:	d001      	beq.n	811eb0c <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 811eb08:	f000 fd48 	bl	811f59c <tcp_slowtmr>
  }
}
 811eb0c:	bf00      	nop
 811eb0e:	bd80      	pop	{r7, pc}
 811eb10:	1000e521 	.word	0x1000e521

0811eb14 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 811eb14:	b580      	push	{r7, lr}
 811eb16:	b084      	sub	sp, #16
 811eb18:	af00      	add	r7, sp, #0
 811eb1a:	6078      	str	r0, [r7, #4]
 811eb1c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 811eb1e:	683b      	ldr	r3, [r7, #0]
 811eb20:	2b00      	cmp	r3, #0
 811eb22:	d105      	bne.n	811eb30 <tcp_remove_listener+0x1c>
 811eb24:	4b0d      	ldr	r3, [pc, #52]	@ (811eb5c <tcp_remove_listener+0x48>)
 811eb26:	22ff      	movs	r2, #255	@ 0xff
 811eb28:	490d      	ldr	r1, [pc, #52]	@ (811eb60 <tcp_remove_listener+0x4c>)
 811eb2a:	480e      	ldr	r0, [pc, #56]	@ (811eb64 <tcp_remove_listener+0x50>)
 811eb2c:	f007 ffa2 	bl	8126a74 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 811eb30:	687b      	ldr	r3, [r7, #4]
 811eb32:	60fb      	str	r3, [r7, #12]
 811eb34:	e00a      	b.n	811eb4c <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 811eb36:	68fb      	ldr	r3, [r7, #12]
 811eb38:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 811eb3a:	683a      	ldr	r2, [r7, #0]
 811eb3c:	429a      	cmp	r2, r3
 811eb3e:	d102      	bne.n	811eb46 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 811eb40:	68fb      	ldr	r3, [r7, #12]
 811eb42:	2200      	movs	r2, #0
 811eb44:	67da      	str	r2, [r3, #124]	@ 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 811eb46:	68fb      	ldr	r3, [r7, #12]
 811eb48:	68db      	ldr	r3, [r3, #12]
 811eb4a:	60fb      	str	r3, [r7, #12]
 811eb4c:	68fb      	ldr	r3, [r7, #12]
 811eb4e:	2b00      	cmp	r3, #0
 811eb50:	d1f1      	bne.n	811eb36 <tcp_remove_listener+0x22>
    }
  }
}
 811eb52:	bf00      	nop
 811eb54:	bf00      	nop
 811eb56:	3710      	adds	r7, #16
 811eb58:	46bd      	mov	sp, r7
 811eb5a:	bd80      	pop	{r7, pc}
 811eb5c:	0812928c 	.word	0x0812928c
 811eb60:	08129358 	.word	0x08129358
 811eb64:	08129314 	.word	0x08129314

0811eb68 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 811eb68:	b580      	push	{r7, lr}
 811eb6a:	b084      	sub	sp, #16
 811eb6c:	af00      	add	r7, sp, #0
 811eb6e:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 811eb70:	687b      	ldr	r3, [r7, #4]
 811eb72:	2b00      	cmp	r3, #0
 811eb74:	d106      	bne.n	811eb84 <tcp_listen_closed+0x1c>
 811eb76:	4b14      	ldr	r3, [pc, #80]	@ (811ebc8 <tcp_listen_closed+0x60>)
 811eb78:	f240 1211 	movw	r2, #273	@ 0x111
 811eb7c:	4913      	ldr	r1, [pc, #76]	@ (811ebcc <tcp_listen_closed+0x64>)
 811eb7e:	4814      	ldr	r0, [pc, #80]	@ (811ebd0 <tcp_listen_closed+0x68>)
 811eb80:	f007 ff78 	bl	8126a74 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 811eb84:	687b      	ldr	r3, [r7, #4]
 811eb86:	7d1b      	ldrb	r3, [r3, #20]
 811eb88:	2b01      	cmp	r3, #1
 811eb8a:	d006      	beq.n	811eb9a <tcp_listen_closed+0x32>
 811eb8c:	4b0e      	ldr	r3, [pc, #56]	@ (811ebc8 <tcp_listen_closed+0x60>)
 811eb8e:	f44f 7289 	mov.w	r2, #274	@ 0x112
 811eb92:	4910      	ldr	r1, [pc, #64]	@ (811ebd4 <tcp_listen_closed+0x6c>)
 811eb94:	480e      	ldr	r0, [pc, #56]	@ (811ebd0 <tcp_listen_closed+0x68>)
 811eb96:	f007 ff6d 	bl	8126a74 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 811eb9a:	2301      	movs	r3, #1
 811eb9c:	60fb      	str	r3, [r7, #12]
 811eb9e:	e00b      	b.n	811ebb8 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 811eba0:	4a0d      	ldr	r2, [pc, #52]	@ (811ebd8 <tcp_listen_closed+0x70>)
 811eba2:	68fb      	ldr	r3, [r7, #12]
 811eba4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 811eba8:	681b      	ldr	r3, [r3, #0]
 811ebaa:	6879      	ldr	r1, [r7, #4]
 811ebac:	4618      	mov	r0, r3
 811ebae:	f7ff ffb1 	bl	811eb14 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 811ebb2:	68fb      	ldr	r3, [r7, #12]
 811ebb4:	3301      	adds	r3, #1
 811ebb6:	60fb      	str	r3, [r7, #12]
 811ebb8:	68fb      	ldr	r3, [r7, #12]
 811ebba:	2b03      	cmp	r3, #3
 811ebbc:	d9f0      	bls.n	811eba0 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 811ebbe:	bf00      	nop
 811ebc0:	bf00      	nop
 811ebc2:	3710      	adds	r7, #16
 811ebc4:	46bd      	mov	sp, r7
 811ebc6:	bd80      	pop	{r7, pc}
 811ebc8:	0812928c 	.word	0x0812928c
 811ebcc:	08129380 	.word	0x08129380
 811ebd0:	08129314 	.word	0x08129314
 811ebd4:	0812938c 	.word	0x0812938c
 811ebd8:	0812af38 	.word	0x0812af38

0811ebdc <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 811ebdc:	b5b0      	push	{r4, r5, r7, lr}
 811ebde:	b088      	sub	sp, #32
 811ebe0:	af04      	add	r7, sp, #16
 811ebe2:	6078      	str	r0, [r7, #4]
 811ebe4:	460b      	mov	r3, r1
 811ebe6:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 811ebe8:	687b      	ldr	r3, [r7, #4]
 811ebea:	2b00      	cmp	r3, #0
 811ebec:	d106      	bne.n	811ebfc <tcp_close_shutdown+0x20>
 811ebee:	4b63      	ldr	r3, [pc, #396]	@ (811ed7c <tcp_close_shutdown+0x1a0>)
 811ebf0:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 811ebf4:	4962      	ldr	r1, [pc, #392]	@ (811ed80 <tcp_close_shutdown+0x1a4>)
 811ebf6:	4863      	ldr	r0, [pc, #396]	@ (811ed84 <tcp_close_shutdown+0x1a8>)
 811ebf8:	f007 ff3c 	bl	8126a74 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 811ebfc:	78fb      	ldrb	r3, [r7, #3]
 811ebfe:	2b00      	cmp	r3, #0
 811ec00:	d066      	beq.n	811ecd0 <tcp_close_shutdown+0xf4>
 811ec02:	687b      	ldr	r3, [r7, #4]
 811ec04:	7d1b      	ldrb	r3, [r3, #20]
 811ec06:	2b04      	cmp	r3, #4
 811ec08:	d003      	beq.n	811ec12 <tcp_close_shutdown+0x36>
 811ec0a:	687b      	ldr	r3, [r7, #4]
 811ec0c:	7d1b      	ldrb	r3, [r3, #20]
 811ec0e:	2b07      	cmp	r3, #7
 811ec10:	d15e      	bne.n	811ecd0 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 811ec12:	687b      	ldr	r3, [r7, #4]
 811ec14:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 811ec16:	2b00      	cmp	r3, #0
 811ec18:	d104      	bne.n	811ec24 <tcp_close_shutdown+0x48>
 811ec1a:	687b      	ldr	r3, [r7, #4]
 811ec1c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 811ec1e:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 811ec22:	d055      	beq.n	811ecd0 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 811ec24:	687b      	ldr	r3, [r7, #4]
 811ec26:	8b5b      	ldrh	r3, [r3, #26]
 811ec28:	f003 0310 	and.w	r3, r3, #16
 811ec2c:	2b00      	cmp	r3, #0
 811ec2e:	d106      	bne.n	811ec3e <tcp_close_shutdown+0x62>
 811ec30:	4b52      	ldr	r3, [pc, #328]	@ (811ed7c <tcp_close_shutdown+0x1a0>)
 811ec32:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 811ec36:	4954      	ldr	r1, [pc, #336]	@ (811ed88 <tcp_close_shutdown+0x1ac>)
 811ec38:	4852      	ldr	r0, [pc, #328]	@ (811ed84 <tcp_close_shutdown+0x1a8>)
 811ec3a:	f007 ff1b 	bl	8126a74 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 811ec3e:	687b      	ldr	r3, [r7, #4]
 811ec40:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 811ec42:	687b      	ldr	r3, [r7, #4]
 811ec44:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 811ec46:	687d      	ldr	r5, [r7, #4]
 811ec48:	687b      	ldr	r3, [r7, #4]
 811ec4a:	3304      	adds	r3, #4
 811ec4c:	687a      	ldr	r2, [r7, #4]
 811ec4e:	8ad2      	ldrh	r2, [r2, #22]
 811ec50:	6879      	ldr	r1, [r7, #4]
 811ec52:	8b09      	ldrh	r1, [r1, #24]
 811ec54:	9102      	str	r1, [sp, #8]
 811ec56:	9201      	str	r2, [sp, #4]
 811ec58:	9300      	str	r3, [sp, #0]
 811ec5a:	462b      	mov	r3, r5
 811ec5c:	4622      	mov	r2, r4
 811ec5e:	4601      	mov	r1, r0
 811ec60:	6878      	ldr	r0, [r7, #4]
 811ec62:	f005 fd4b 	bl	81246fc <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 811ec66:	6878      	ldr	r0, [r7, #4]
 811ec68:	f001 fb2e 	bl	81202c8 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 811ec6c:	4b47      	ldr	r3, [pc, #284]	@ (811ed8c <tcp_close_shutdown+0x1b0>)
 811ec6e:	681b      	ldr	r3, [r3, #0]
 811ec70:	687a      	ldr	r2, [r7, #4]
 811ec72:	429a      	cmp	r2, r3
 811ec74:	d105      	bne.n	811ec82 <tcp_close_shutdown+0xa6>
 811ec76:	4b45      	ldr	r3, [pc, #276]	@ (811ed8c <tcp_close_shutdown+0x1b0>)
 811ec78:	681b      	ldr	r3, [r3, #0]
 811ec7a:	68db      	ldr	r3, [r3, #12]
 811ec7c:	4a43      	ldr	r2, [pc, #268]	@ (811ed8c <tcp_close_shutdown+0x1b0>)
 811ec7e:	6013      	str	r3, [r2, #0]
 811ec80:	e013      	b.n	811ecaa <tcp_close_shutdown+0xce>
 811ec82:	4b42      	ldr	r3, [pc, #264]	@ (811ed8c <tcp_close_shutdown+0x1b0>)
 811ec84:	681b      	ldr	r3, [r3, #0]
 811ec86:	60fb      	str	r3, [r7, #12]
 811ec88:	e00c      	b.n	811eca4 <tcp_close_shutdown+0xc8>
 811ec8a:	68fb      	ldr	r3, [r7, #12]
 811ec8c:	68db      	ldr	r3, [r3, #12]
 811ec8e:	687a      	ldr	r2, [r7, #4]
 811ec90:	429a      	cmp	r2, r3
 811ec92:	d104      	bne.n	811ec9e <tcp_close_shutdown+0xc2>
 811ec94:	687b      	ldr	r3, [r7, #4]
 811ec96:	68da      	ldr	r2, [r3, #12]
 811ec98:	68fb      	ldr	r3, [r7, #12]
 811ec9a:	60da      	str	r2, [r3, #12]
 811ec9c:	e005      	b.n	811ecaa <tcp_close_shutdown+0xce>
 811ec9e:	68fb      	ldr	r3, [r7, #12]
 811eca0:	68db      	ldr	r3, [r3, #12]
 811eca2:	60fb      	str	r3, [r7, #12]
 811eca4:	68fb      	ldr	r3, [r7, #12]
 811eca6:	2b00      	cmp	r3, #0
 811eca8:	d1ef      	bne.n	811ec8a <tcp_close_shutdown+0xae>
 811ecaa:	687b      	ldr	r3, [r7, #4]
 811ecac:	2200      	movs	r2, #0
 811ecae:	60da      	str	r2, [r3, #12]
 811ecb0:	4b37      	ldr	r3, [pc, #220]	@ (811ed90 <tcp_close_shutdown+0x1b4>)
 811ecb2:	2201      	movs	r2, #1
 811ecb4:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 811ecb6:	4b37      	ldr	r3, [pc, #220]	@ (811ed94 <tcp_close_shutdown+0x1b8>)
 811ecb8:	681b      	ldr	r3, [r3, #0]
 811ecba:	687a      	ldr	r2, [r7, #4]
 811ecbc:	429a      	cmp	r2, r3
 811ecbe:	d102      	bne.n	811ecc6 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 811ecc0:	f003 ffc2 	bl	8122c48 <tcp_trigger_input_pcb_close>
 811ecc4:	e002      	b.n	811eccc <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 811ecc6:	6878      	ldr	r0, [r7, #4]
 811ecc8:	f7ff fed6 	bl	811ea78 <tcp_free>
      }
      return ERR_OK;
 811eccc:	2300      	movs	r3, #0
 811ecce:	e050      	b.n	811ed72 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 811ecd0:	687b      	ldr	r3, [r7, #4]
 811ecd2:	7d1b      	ldrb	r3, [r3, #20]
 811ecd4:	2b02      	cmp	r3, #2
 811ecd6:	d03b      	beq.n	811ed50 <tcp_close_shutdown+0x174>
 811ecd8:	2b02      	cmp	r3, #2
 811ecda:	dc44      	bgt.n	811ed66 <tcp_close_shutdown+0x18a>
 811ecdc:	2b00      	cmp	r3, #0
 811ecde:	d002      	beq.n	811ece6 <tcp_close_shutdown+0x10a>
 811ece0:	2b01      	cmp	r3, #1
 811ece2:	d02a      	beq.n	811ed3a <tcp_close_shutdown+0x15e>
 811ece4:	e03f      	b.n	811ed66 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 811ece6:	687b      	ldr	r3, [r7, #4]
 811ece8:	8adb      	ldrh	r3, [r3, #22]
 811ecea:	2b00      	cmp	r3, #0
 811ecec:	d021      	beq.n	811ed32 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 811ecee:	4b2a      	ldr	r3, [pc, #168]	@ (811ed98 <tcp_close_shutdown+0x1bc>)
 811ecf0:	681b      	ldr	r3, [r3, #0]
 811ecf2:	687a      	ldr	r2, [r7, #4]
 811ecf4:	429a      	cmp	r2, r3
 811ecf6:	d105      	bne.n	811ed04 <tcp_close_shutdown+0x128>
 811ecf8:	4b27      	ldr	r3, [pc, #156]	@ (811ed98 <tcp_close_shutdown+0x1bc>)
 811ecfa:	681b      	ldr	r3, [r3, #0]
 811ecfc:	68db      	ldr	r3, [r3, #12]
 811ecfe:	4a26      	ldr	r2, [pc, #152]	@ (811ed98 <tcp_close_shutdown+0x1bc>)
 811ed00:	6013      	str	r3, [r2, #0]
 811ed02:	e013      	b.n	811ed2c <tcp_close_shutdown+0x150>
 811ed04:	4b24      	ldr	r3, [pc, #144]	@ (811ed98 <tcp_close_shutdown+0x1bc>)
 811ed06:	681b      	ldr	r3, [r3, #0]
 811ed08:	60bb      	str	r3, [r7, #8]
 811ed0a:	e00c      	b.n	811ed26 <tcp_close_shutdown+0x14a>
 811ed0c:	68bb      	ldr	r3, [r7, #8]
 811ed0e:	68db      	ldr	r3, [r3, #12]
 811ed10:	687a      	ldr	r2, [r7, #4]
 811ed12:	429a      	cmp	r2, r3
 811ed14:	d104      	bne.n	811ed20 <tcp_close_shutdown+0x144>
 811ed16:	687b      	ldr	r3, [r7, #4]
 811ed18:	68da      	ldr	r2, [r3, #12]
 811ed1a:	68bb      	ldr	r3, [r7, #8]
 811ed1c:	60da      	str	r2, [r3, #12]
 811ed1e:	e005      	b.n	811ed2c <tcp_close_shutdown+0x150>
 811ed20:	68bb      	ldr	r3, [r7, #8]
 811ed22:	68db      	ldr	r3, [r3, #12]
 811ed24:	60bb      	str	r3, [r7, #8]
 811ed26:	68bb      	ldr	r3, [r7, #8]
 811ed28:	2b00      	cmp	r3, #0
 811ed2a:	d1ef      	bne.n	811ed0c <tcp_close_shutdown+0x130>
 811ed2c:	687b      	ldr	r3, [r7, #4]
 811ed2e:	2200      	movs	r2, #0
 811ed30:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 811ed32:	6878      	ldr	r0, [r7, #4]
 811ed34:	f7ff fea0 	bl	811ea78 <tcp_free>
      break;
 811ed38:	e01a      	b.n	811ed70 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 811ed3a:	6878      	ldr	r0, [r7, #4]
 811ed3c:	f7ff ff14 	bl	811eb68 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 811ed40:	6879      	ldr	r1, [r7, #4]
 811ed42:	4816      	ldr	r0, [pc, #88]	@ (811ed9c <tcp_close_shutdown+0x1c0>)
 811ed44:	f001 fb10 	bl	8120368 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 811ed48:	6878      	ldr	r0, [r7, #4]
 811ed4a:	f7ff feb1 	bl	811eab0 <tcp_free_listen>
      break;
 811ed4e:	e00f      	b.n	811ed70 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 811ed50:	6879      	ldr	r1, [r7, #4]
 811ed52:	480e      	ldr	r0, [pc, #56]	@ (811ed8c <tcp_close_shutdown+0x1b0>)
 811ed54:	f001 fb08 	bl	8120368 <tcp_pcb_remove>
 811ed58:	4b0d      	ldr	r3, [pc, #52]	@ (811ed90 <tcp_close_shutdown+0x1b4>)
 811ed5a:	2201      	movs	r2, #1
 811ed5c:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 811ed5e:	6878      	ldr	r0, [r7, #4]
 811ed60:	f7ff fe8a 	bl	811ea78 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 811ed64:	e004      	b.n	811ed70 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 811ed66:	6878      	ldr	r0, [r7, #4]
 811ed68:	f000 f81a 	bl	811eda0 <tcp_close_shutdown_fin>
 811ed6c:	4603      	mov	r3, r0
 811ed6e:	e000      	b.n	811ed72 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 811ed70:	2300      	movs	r3, #0
}
 811ed72:	4618      	mov	r0, r3
 811ed74:	3710      	adds	r7, #16
 811ed76:	46bd      	mov	sp, r7
 811ed78:	bdb0      	pop	{r4, r5, r7, pc}
 811ed7a:	bf00      	nop
 811ed7c:	0812928c 	.word	0x0812928c
 811ed80:	081293a4 	.word	0x081293a4
 811ed84:	08129314 	.word	0x08129314
 811ed88:	081293c4 	.word	0x081293c4
 811ed8c:	1000e518 	.word	0x1000e518
 811ed90:	1000e520 	.word	0x1000e520
 811ed94:	1000e558 	.word	0x1000e558
 811ed98:	1000e510 	.word	0x1000e510
 811ed9c:	1000e514 	.word	0x1000e514

0811eda0 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 811eda0:	b580      	push	{r7, lr}
 811eda2:	b084      	sub	sp, #16
 811eda4:	af00      	add	r7, sp, #0
 811eda6:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 811eda8:	687b      	ldr	r3, [r7, #4]
 811edaa:	2b00      	cmp	r3, #0
 811edac:	d106      	bne.n	811edbc <tcp_close_shutdown_fin+0x1c>
 811edae:	4b2e      	ldr	r3, [pc, #184]	@ (811ee68 <tcp_close_shutdown_fin+0xc8>)
 811edb0:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 811edb4:	492d      	ldr	r1, [pc, #180]	@ (811ee6c <tcp_close_shutdown_fin+0xcc>)
 811edb6:	482e      	ldr	r0, [pc, #184]	@ (811ee70 <tcp_close_shutdown_fin+0xd0>)
 811edb8:	f007 fe5c 	bl	8126a74 <iprintf>

  switch (pcb->state) {
 811edbc:	687b      	ldr	r3, [r7, #4]
 811edbe:	7d1b      	ldrb	r3, [r3, #20]
 811edc0:	2b07      	cmp	r3, #7
 811edc2:	d020      	beq.n	811ee06 <tcp_close_shutdown_fin+0x66>
 811edc4:	2b07      	cmp	r3, #7
 811edc6:	dc2b      	bgt.n	811ee20 <tcp_close_shutdown_fin+0x80>
 811edc8:	2b03      	cmp	r3, #3
 811edca:	d002      	beq.n	811edd2 <tcp_close_shutdown_fin+0x32>
 811edcc:	2b04      	cmp	r3, #4
 811edce:	d00d      	beq.n	811edec <tcp_close_shutdown_fin+0x4c>
 811edd0:	e026      	b.n	811ee20 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 811edd2:	6878      	ldr	r0, [r7, #4]
 811edd4:	f004 fda0 	bl	8123918 <tcp_send_fin>
 811edd8:	4603      	mov	r3, r0
 811edda:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 811eddc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 811ede0:	2b00      	cmp	r3, #0
 811ede2:	d11f      	bne.n	811ee24 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 811ede4:	687b      	ldr	r3, [r7, #4]
 811ede6:	2205      	movs	r2, #5
 811ede8:	751a      	strb	r2, [r3, #20]
      }
      break;
 811edea:	e01b      	b.n	811ee24 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 811edec:	6878      	ldr	r0, [r7, #4]
 811edee:	f004 fd93 	bl	8123918 <tcp_send_fin>
 811edf2:	4603      	mov	r3, r0
 811edf4:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 811edf6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 811edfa:	2b00      	cmp	r3, #0
 811edfc:	d114      	bne.n	811ee28 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 811edfe:	687b      	ldr	r3, [r7, #4]
 811ee00:	2205      	movs	r2, #5
 811ee02:	751a      	strb	r2, [r3, #20]
      }
      break;
 811ee04:	e010      	b.n	811ee28 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 811ee06:	6878      	ldr	r0, [r7, #4]
 811ee08:	f004 fd86 	bl	8123918 <tcp_send_fin>
 811ee0c:	4603      	mov	r3, r0
 811ee0e:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 811ee10:	f997 300f 	ldrsb.w	r3, [r7, #15]
 811ee14:	2b00      	cmp	r3, #0
 811ee16:	d109      	bne.n	811ee2c <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 811ee18:	687b      	ldr	r3, [r7, #4]
 811ee1a:	2209      	movs	r2, #9
 811ee1c:	751a      	strb	r2, [r3, #20]
      }
      break;
 811ee1e:	e005      	b.n	811ee2c <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 811ee20:	2300      	movs	r3, #0
 811ee22:	e01c      	b.n	811ee5e <tcp_close_shutdown_fin+0xbe>
      break;
 811ee24:	bf00      	nop
 811ee26:	e002      	b.n	811ee2e <tcp_close_shutdown_fin+0x8e>
      break;
 811ee28:	bf00      	nop
 811ee2a:	e000      	b.n	811ee2e <tcp_close_shutdown_fin+0x8e>
      break;
 811ee2c:	bf00      	nop
  }

  if (err == ERR_OK) {
 811ee2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 811ee32:	2b00      	cmp	r3, #0
 811ee34:	d103      	bne.n	811ee3e <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 811ee36:	6878      	ldr	r0, [r7, #4]
 811ee38:	f004 feac 	bl	8123b94 <tcp_output>
 811ee3c:	e00d      	b.n	811ee5a <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 811ee3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 811ee42:	f1b3 3fff 	cmp.w	r3, #4294967295
 811ee46:	d108      	bne.n	811ee5a <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 811ee48:	687b      	ldr	r3, [r7, #4]
 811ee4a:	8b5b      	ldrh	r3, [r3, #26]
 811ee4c:	f043 0308 	orr.w	r3, r3, #8
 811ee50:	b29a      	uxth	r2, r3
 811ee52:	687b      	ldr	r3, [r7, #4]
 811ee54:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 811ee56:	2300      	movs	r3, #0
 811ee58:	e001      	b.n	811ee5e <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 811ee5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 811ee5e:	4618      	mov	r0, r3
 811ee60:	3710      	adds	r7, #16
 811ee62:	46bd      	mov	sp, r7
 811ee64:	bd80      	pop	{r7, pc}
 811ee66:	bf00      	nop
 811ee68:	0812928c 	.word	0x0812928c
 811ee6c:	08129380 	.word	0x08129380
 811ee70:	08129314 	.word	0x08129314

0811ee74 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 811ee74:	b580      	push	{r7, lr}
 811ee76:	b082      	sub	sp, #8
 811ee78:	af00      	add	r7, sp, #0
 811ee7a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 811ee7c:	687b      	ldr	r3, [r7, #4]
 811ee7e:	2b00      	cmp	r3, #0
 811ee80:	d109      	bne.n	811ee96 <tcp_close+0x22>
 811ee82:	4b0f      	ldr	r3, [pc, #60]	@ (811eec0 <tcp_close+0x4c>)
 811ee84:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 811ee88:	490e      	ldr	r1, [pc, #56]	@ (811eec4 <tcp_close+0x50>)
 811ee8a:	480f      	ldr	r0, [pc, #60]	@ (811eec8 <tcp_close+0x54>)
 811ee8c:	f007 fdf2 	bl	8126a74 <iprintf>
 811ee90:	f06f 030f 	mvn.w	r3, #15
 811ee94:	e00f      	b.n	811eeb6 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 811ee96:	687b      	ldr	r3, [r7, #4]
 811ee98:	7d1b      	ldrb	r3, [r3, #20]
 811ee9a:	2b01      	cmp	r3, #1
 811ee9c:	d006      	beq.n	811eeac <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 811ee9e:	687b      	ldr	r3, [r7, #4]
 811eea0:	8b5b      	ldrh	r3, [r3, #26]
 811eea2:	f043 0310 	orr.w	r3, r3, #16
 811eea6:	b29a      	uxth	r2, r3
 811eea8:	687b      	ldr	r3, [r7, #4]
 811eeaa:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 811eeac:	2101      	movs	r1, #1
 811eeae:	6878      	ldr	r0, [r7, #4]
 811eeb0:	f7ff fe94 	bl	811ebdc <tcp_close_shutdown>
 811eeb4:	4603      	mov	r3, r0
}
 811eeb6:	4618      	mov	r0, r3
 811eeb8:	3708      	adds	r7, #8
 811eeba:	46bd      	mov	sp, r7
 811eebc:	bd80      	pop	{r7, pc}
 811eebe:	bf00      	nop
 811eec0:	0812928c 	.word	0x0812928c
 811eec4:	081293e0 	.word	0x081293e0
 811eec8:	08129314 	.word	0x08129314

0811eecc <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 811eecc:	b580      	push	{r7, lr}
 811eece:	b08e      	sub	sp, #56	@ 0x38
 811eed0:	af04      	add	r7, sp, #16
 811eed2:	6078      	str	r0, [r7, #4]
 811eed4:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 811eed6:	687b      	ldr	r3, [r7, #4]
 811eed8:	2b00      	cmp	r3, #0
 811eeda:	d107      	bne.n	811eeec <tcp_abandon+0x20>
 811eedc:	4b52      	ldr	r3, [pc, #328]	@ (811f028 <tcp_abandon+0x15c>)
 811eede:	f240 223d 	movw	r2, #573	@ 0x23d
 811eee2:	4952      	ldr	r1, [pc, #328]	@ (811f02c <tcp_abandon+0x160>)
 811eee4:	4852      	ldr	r0, [pc, #328]	@ (811f030 <tcp_abandon+0x164>)
 811eee6:	f007 fdc5 	bl	8126a74 <iprintf>
 811eeea:	e099      	b.n	811f020 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 811eeec:	687b      	ldr	r3, [r7, #4]
 811eeee:	7d1b      	ldrb	r3, [r3, #20]
 811eef0:	2b01      	cmp	r3, #1
 811eef2:	d106      	bne.n	811ef02 <tcp_abandon+0x36>
 811eef4:	4b4c      	ldr	r3, [pc, #304]	@ (811f028 <tcp_abandon+0x15c>)
 811eef6:	f44f 7210 	mov.w	r2, #576	@ 0x240
 811eefa:	494e      	ldr	r1, [pc, #312]	@ (811f034 <tcp_abandon+0x168>)
 811eefc:	484c      	ldr	r0, [pc, #304]	@ (811f030 <tcp_abandon+0x164>)
 811eefe:	f007 fdb9 	bl	8126a74 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 811ef02:	687b      	ldr	r3, [r7, #4]
 811ef04:	7d1b      	ldrb	r3, [r3, #20]
 811ef06:	2b0a      	cmp	r3, #10
 811ef08:	d107      	bne.n	811ef1a <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 811ef0a:	6879      	ldr	r1, [r7, #4]
 811ef0c:	484a      	ldr	r0, [pc, #296]	@ (811f038 <tcp_abandon+0x16c>)
 811ef0e:	f001 fa2b 	bl	8120368 <tcp_pcb_remove>
    tcp_free(pcb);
 811ef12:	6878      	ldr	r0, [r7, #4]
 811ef14:	f7ff fdb0 	bl	811ea78 <tcp_free>
 811ef18:	e082      	b.n	811f020 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 811ef1a:	2300      	movs	r3, #0
 811ef1c:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t local_port = 0;
 811ef1e:	2300      	movs	r3, #0
 811ef20:	847b      	strh	r3, [r7, #34]	@ 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 811ef22:	687b      	ldr	r3, [r7, #4]
 811ef24:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 811ef26:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 811ef28:	687b      	ldr	r3, [r7, #4]
 811ef2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 811ef2c:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 811ef2e:	687b      	ldr	r3, [r7, #4]
 811ef30:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 811ef34:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 811ef36:	687b      	ldr	r3, [r7, #4]
 811ef38:	691b      	ldr	r3, [r3, #16]
 811ef3a:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 811ef3c:	687b      	ldr	r3, [r7, #4]
 811ef3e:	7d1b      	ldrb	r3, [r3, #20]
 811ef40:	2b00      	cmp	r3, #0
 811ef42:	d126      	bne.n	811ef92 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 811ef44:	687b      	ldr	r3, [r7, #4]
 811ef46:	8adb      	ldrh	r3, [r3, #22]
 811ef48:	2b00      	cmp	r3, #0
 811ef4a:	d02e      	beq.n	811efaa <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 811ef4c:	4b3b      	ldr	r3, [pc, #236]	@ (811f03c <tcp_abandon+0x170>)
 811ef4e:	681b      	ldr	r3, [r3, #0]
 811ef50:	687a      	ldr	r2, [r7, #4]
 811ef52:	429a      	cmp	r2, r3
 811ef54:	d105      	bne.n	811ef62 <tcp_abandon+0x96>
 811ef56:	4b39      	ldr	r3, [pc, #228]	@ (811f03c <tcp_abandon+0x170>)
 811ef58:	681b      	ldr	r3, [r3, #0]
 811ef5a:	68db      	ldr	r3, [r3, #12]
 811ef5c:	4a37      	ldr	r2, [pc, #220]	@ (811f03c <tcp_abandon+0x170>)
 811ef5e:	6013      	str	r3, [r2, #0]
 811ef60:	e013      	b.n	811ef8a <tcp_abandon+0xbe>
 811ef62:	4b36      	ldr	r3, [pc, #216]	@ (811f03c <tcp_abandon+0x170>)
 811ef64:	681b      	ldr	r3, [r3, #0]
 811ef66:	61fb      	str	r3, [r7, #28]
 811ef68:	e00c      	b.n	811ef84 <tcp_abandon+0xb8>
 811ef6a:	69fb      	ldr	r3, [r7, #28]
 811ef6c:	68db      	ldr	r3, [r3, #12]
 811ef6e:	687a      	ldr	r2, [r7, #4]
 811ef70:	429a      	cmp	r2, r3
 811ef72:	d104      	bne.n	811ef7e <tcp_abandon+0xb2>
 811ef74:	687b      	ldr	r3, [r7, #4]
 811ef76:	68da      	ldr	r2, [r3, #12]
 811ef78:	69fb      	ldr	r3, [r7, #28]
 811ef7a:	60da      	str	r2, [r3, #12]
 811ef7c:	e005      	b.n	811ef8a <tcp_abandon+0xbe>
 811ef7e:	69fb      	ldr	r3, [r7, #28]
 811ef80:	68db      	ldr	r3, [r3, #12]
 811ef82:	61fb      	str	r3, [r7, #28]
 811ef84:	69fb      	ldr	r3, [r7, #28]
 811ef86:	2b00      	cmp	r3, #0
 811ef88:	d1ef      	bne.n	811ef6a <tcp_abandon+0x9e>
 811ef8a:	687b      	ldr	r3, [r7, #4]
 811ef8c:	2200      	movs	r2, #0
 811ef8e:	60da      	str	r2, [r3, #12]
 811ef90:	e00b      	b.n	811efaa <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 811ef92:	683b      	ldr	r3, [r7, #0]
 811ef94:	627b      	str	r3, [r7, #36]	@ 0x24
      local_port = pcb->local_port;
 811ef96:	687b      	ldr	r3, [r7, #4]
 811ef98:	8adb      	ldrh	r3, [r3, #22]
 811ef9a:	847b      	strh	r3, [r7, #34]	@ 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 811ef9c:	6879      	ldr	r1, [r7, #4]
 811ef9e:	4828      	ldr	r0, [pc, #160]	@ (811f040 <tcp_abandon+0x174>)
 811efa0:	f001 f9e2 	bl	8120368 <tcp_pcb_remove>
 811efa4:	4b27      	ldr	r3, [pc, #156]	@ (811f044 <tcp_abandon+0x178>)
 811efa6:	2201      	movs	r2, #1
 811efa8:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 811efaa:	687b      	ldr	r3, [r7, #4]
 811efac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 811efae:	2b00      	cmp	r3, #0
 811efb0:	d004      	beq.n	811efbc <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 811efb2:	687b      	ldr	r3, [r7, #4]
 811efb4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 811efb6:	4618      	mov	r0, r3
 811efb8:	f000 ff1c 	bl	811fdf4 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 811efbc:	687b      	ldr	r3, [r7, #4]
 811efbe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 811efc0:	2b00      	cmp	r3, #0
 811efc2:	d004      	beq.n	811efce <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 811efc4:	687b      	ldr	r3, [r7, #4]
 811efc6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 811efc8:	4618      	mov	r0, r3
 811efca:	f000 ff13 	bl	811fdf4 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 811efce:	687b      	ldr	r3, [r7, #4]
 811efd0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 811efd2:	2b00      	cmp	r3, #0
 811efd4:	d004      	beq.n	811efe0 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 811efd6:	687b      	ldr	r3, [r7, #4]
 811efd8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 811efda:	4618      	mov	r0, r3
 811efdc:	f000 ff0a 	bl	811fdf4 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 811efe0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811efe2:	2b00      	cmp	r3, #0
 811efe4:	d00e      	beq.n	811f004 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 811efe6:	6879      	ldr	r1, [r7, #4]
 811efe8:	687b      	ldr	r3, [r7, #4]
 811efea:	3304      	adds	r3, #4
 811efec:	687a      	ldr	r2, [r7, #4]
 811efee:	8b12      	ldrh	r2, [r2, #24]
 811eff0:	9202      	str	r2, [sp, #8]
 811eff2:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 811eff4:	9201      	str	r2, [sp, #4]
 811eff6:	9300      	str	r3, [sp, #0]
 811eff8:	460b      	mov	r3, r1
 811effa:	697a      	ldr	r2, [r7, #20]
 811effc:	69b9      	ldr	r1, [r7, #24]
 811effe:	6878      	ldr	r0, [r7, #4]
 811f000:	f005 fb7c 	bl	81246fc <tcp_rst>
    }
    last_state = pcb->state;
 811f004:	687b      	ldr	r3, [r7, #4]
 811f006:	7d1b      	ldrb	r3, [r3, #20]
 811f008:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 811f00a:	6878      	ldr	r0, [r7, #4]
 811f00c:	f7ff fd34 	bl	811ea78 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 811f010:	693b      	ldr	r3, [r7, #16]
 811f012:	2b00      	cmp	r3, #0
 811f014:	d004      	beq.n	811f020 <tcp_abandon+0x154>
 811f016:	693b      	ldr	r3, [r7, #16]
 811f018:	f06f 010c 	mvn.w	r1, #12
 811f01c:	68f8      	ldr	r0, [r7, #12]
 811f01e:	4798      	blx	r3
  }
}
 811f020:	3728      	adds	r7, #40	@ 0x28
 811f022:	46bd      	mov	sp, r7
 811f024:	bd80      	pop	{r7, pc}
 811f026:	bf00      	nop
 811f028:	0812928c 	.word	0x0812928c
 811f02c:	08129414 	.word	0x08129414
 811f030:	08129314 	.word	0x08129314
 811f034:	08129430 	.word	0x08129430
 811f038:	1000e51c 	.word	0x1000e51c
 811f03c:	1000e510 	.word	0x1000e510
 811f040:	1000e518 	.word	0x1000e518
 811f044:	1000e520 	.word	0x1000e520

0811f048 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 811f048:	b580      	push	{r7, lr}
 811f04a:	b082      	sub	sp, #8
 811f04c:	af00      	add	r7, sp, #0
 811f04e:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 811f050:	2101      	movs	r1, #1
 811f052:	6878      	ldr	r0, [r7, #4]
 811f054:	f7ff ff3a 	bl	811eecc <tcp_abandon>
}
 811f058:	bf00      	nop
 811f05a:	3708      	adds	r7, #8
 811f05c:	46bd      	mov	sp, r7
 811f05e:	bd80      	pop	{r7, pc}

0811f060 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 811f060:	b580      	push	{r7, lr}
 811f062:	b088      	sub	sp, #32
 811f064:	af00      	add	r7, sp, #0
 811f066:	60f8      	str	r0, [r7, #12]
 811f068:	60b9      	str	r1, [r7, #8]
 811f06a:	4613      	mov	r3, r2
 811f06c:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 811f06e:	2304      	movs	r3, #4
 811f070:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 811f072:	68bb      	ldr	r3, [r7, #8]
 811f074:	2b00      	cmp	r3, #0
 811f076:	d101      	bne.n	811f07c <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 811f078:	4b3e      	ldr	r3, [pc, #248]	@ (811f174 <tcp_bind+0x114>)
 811f07a:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 811f07c:	68fb      	ldr	r3, [r7, #12]
 811f07e:	2b00      	cmp	r3, #0
 811f080:	d109      	bne.n	811f096 <tcp_bind+0x36>
 811f082:	4b3d      	ldr	r3, [pc, #244]	@ (811f178 <tcp_bind+0x118>)
 811f084:	f240 22a9 	movw	r2, #681	@ 0x2a9
 811f088:	493c      	ldr	r1, [pc, #240]	@ (811f17c <tcp_bind+0x11c>)
 811f08a:	483d      	ldr	r0, [pc, #244]	@ (811f180 <tcp_bind+0x120>)
 811f08c:	f007 fcf2 	bl	8126a74 <iprintf>
 811f090:	f06f 030f 	mvn.w	r3, #15
 811f094:	e06a      	b.n	811f16c <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 811f096:	68fb      	ldr	r3, [r7, #12]
 811f098:	7d1b      	ldrb	r3, [r3, #20]
 811f09a:	2b00      	cmp	r3, #0
 811f09c:	d009      	beq.n	811f0b2 <tcp_bind+0x52>
 811f09e:	4b36      	ldr	r3, [pc, #216]	@ (811f178 <tcp_bind+0x118>)
 811f0a0:	f240 22ab 	movw	r2, #683	@ 0x2ab
 811f0a4:	4937      	ldr	r1, [pc, #220]	@ (811f184 <tcp_bind+0x124>)
 811f0a6:	4836      	ldr	r0, [pc, #216]	@ (811f180 <tcp_bind+0x120>)
 811f0a8:	f007 fce4 	bl	8126a74 <iprintf>
 811f0ac:	f06f 0305 	mvn.w	r3, #5
 811f0b0:	e05c      	b.n	811f16c <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 811f0b2:	88fb      	ldrh	r3, [r7, #6]
 811f0b4:	2b00      	cmp	r3, #0
 811f0b6:	d109      	bne.n	811f0cc <tcp_bind+0x6c>
    port = tcp_new_port();
 811f0b8:	f000 f912 	bl	811f2e0 <tcp_new_port>
 811f0bc:	4603      	mov	r3, r0
 811f0be:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 811f0c0:	88fb      	ldrh	r3, [r7, #6]
 811f0c2:	2b00      	cmp	r3, #0
 811f0c4:	d135      	bne.n	811f132 <tcp_bind+0xd2>
      return ERR_BUF;
 811f0c6:	f06f 0301 	mvn.w	r3, #1
 811f0ca:	e04f      	b.n	811f16c <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 811f0cc:	2300      	movs	r3, #0
 811f0ce:	61fb      	str	r3, [r7, #28]
 811f0d0:	e02b      	b.n	811f12a <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 811f0d2:	4a2d      	ldr	r2, [pc, #180]	@ (811f188 <tcp_bind+0x128>)
 811f0d4:	69fb      	ldr	r3, [r7, #28]
 811f0d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 811f0da:	681b      	ldr	r3, [r3, #0]
 811f0dc:	61bb      	str	r3, [r7, #24]
 811f0de:	e01e      	b.n	811f11e <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 811f0e0:	69bb      	ldr	r3, [r7, #24]
 811f0e2:	8adb      	ldrh	r3, [r3, #22]
 811f0e4:	88fa      	ldrh	r2, [r7, #6]
 811f0e6:	429a      	cmp	r2, r3
 811f0e8:	d116      	bne.n	811f118 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 811f0ea:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 811f0ec:	2b00      	cmp	r3, #0
 811f0ee:	d010      	beq.n	811f112 <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 811f0f0:	69bb      	ldr	r3, [r7, #24]
 811f0f2:	681b      	ldr	r3, [r3, #0]
 811f0f4:	2b00      	cmp	r3, #0
 811f0f6:	d00c      	beq.n	811f112 <tcp_bind+0xb2>
 811f0f8:	68bb      	ldr	r3, [r7, #8]
 811f0fa:	2b00      	cmp	r3, #0
 811f0fc:	d009      	beq.n	811f112 <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 811f0fe:	68bb      	ldr	r3, [r7, #8]
 811f100:	681b      	ldr	r3, [r3, #0]
 811f102:	2b00      	cmp	r3, #0
 811f104:	d005      	beq.n	811f112 <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 811f106:	69bb      	ldr	r3, [r7, #24]
 811f108:	681a      	ldr	r2, [r3, #0]
 811f10a:	68bb      	ldr	r3, [r7, #8]
 811f10c:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 811f10e:	429a      	cmp	r2, r3
 811f110:	d102      	bne.n	811f118 <tcp_bind+0xb8>
              return ERR_USE;
 811f112:	f06f 0307 	mvn.w	r3, #7
 811f116:	e029      	b.n	811f16c <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 811f118:	69bb      	ldr	r3, [r7, #24]
 811f11a:	68db      	ldr	r3, [r3, #12]
 811f11c:	61bb      	str	r3, [r7, #24]
 811f11e:	69bb      	ldr	r3, [r7, #24]
 811f120:	2b00      	cmp	r3, #0
 811f122:	d1dd      	bne.n	811f0e0 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 811f124:	69fb      	ldr	r3, [r7, #28]
 811f126:	3301      	adds	r3, #1
 811f128:	61fb      	str	r3, [r7, #28]
 811f12a:	69fa      	ldr	r2, [r7, #28]
 811f12c:	697b      	ldr	r3, [r7, #20]
 811f12e:	429a      	cmp	r2, r3
 811f130:	dbcf      	blt.n	811f0d2 <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 811f132:	68bb      	ldr	r3, [r7, #8]
 811f134:	2b00      	cmp	r3, #0
 811f136:	d00c      	beq.n	811f152 <tcp_bind+0xf2>
 811f138:	68bb      	ldr	r3, [r7, #8]
 811f13a:	681b      	ldr	r3, [r3, #0]
 811f13c:	2b00      	cmp	r3, #0
 811f13e:	d008      	beq.n	811f152 <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 811f140:	68bb      	ldr	r3, [r7, #8]
 811f142:	2b00      	cmp	r3, #0
 811f144:	d002      	beq.n	811f14c <tcp_bind+0xec>
 811f146:	68bb      	ldr	r3, [r7, #8]
 811f148:	681b      	ldr	r3, [r3, #0]
 811f14a:	e000      	b.n	811f14e <tcp_bind+0xee>
 811f14c:	2300      	movs	r3, #0
 811f14e:	68fa      	ldr	r2, [r7, #12]
 811f150:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 811f152:	68fb      	ldr	r3, [r7, #12]
 811f154:	88fa      	ldrh	r2, [r7, #6]
 811f156:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 811f158:	4b0c      	ldr	r3, [pc, #48]	@ (811f18c <tcp_bind+0x12c>)
 811f15a:	681a      	ldr	r2, [r3, #0]
 811f15c:	68fb      	ldr	r3, [r7, #12]
 811f15e:	60da      	str	r2, [r3, #12]
 811f160:	4a0a      	ldr	r2, [pc, #40]	@ (811f18c <tcp_bind+0x12c>)
 811f162:	68fb      	ldr	r3, [r7, #12]
 811f164:	6013      	str	r3, [r2, #0]
 811f166:	f005 fde9 	bl	8124d3c <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 811f16a:	2300      	movs	r3, #0
}
 811f16c:	4618      	mov	r0, r3
 811f16e:	3720      	adds	r7, #32
 811f170:	46bd      	mov	sp, r7
 811f172:	bd80      	pop	{r7, pc}
 811f174:	0812ae4c 	.word	0x0812ae4c
 811f178:	0812928c 	.word	0x0812928c
 811f17c:	08129464 	.word	0x08129464
 811f180:	08129314 	.word	0x08129314
 811f184:	0812947c 	.word	0x0812947c
 811f188:	0812af38 	.word	0x0812af38
 811f18c:	1000e510 	.word	0x1000e510

0811f190 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 811f190:	b580      	push	{r7, lr}
 811f192:	b084      	sub	sp, #16
 811f194:	af00      	add	r7, sp, #0
 811f196:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 811f198:	687b      	ldr	r3, [r7, #4]
 811f19a:	2b00      	cmp	r3, #0
 811f19c:	d106      	bne.n	811f1ac <tcp_update_rcv_ann_wnd+0x1c>
 811f19e:	4b25      	ldr	r3, [pc, #148]	@ (811f234 <tcp_update_rcv_ann_wnd+0xa4>)
 811f1a0:	f240 32a6 	movw	r2, #934	@ 0x3a6
 811f1a4:	4924      	ldr	r1, [pc, #144]	@ (811f238 <tcp_update_rcv_ann_wnd+0xa8>)
 811f1a6:	4825      	ldr	r0, [pc, #148]	@ (811f23c <tcp_update_rcv_ann_wnd+0xac>)
 811f1a8:	f007 fc64 	bl	8126a74 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 811f1ac:	687b      	ldr	r3, [r7, #4]
 811f1ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 811f1b0:	687a      	ldr	r2, [r7, #4]
 811f1b2:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 811f1b4:	4413      	add	r3, r2
 811f1b6:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 811f1b8:	687b      	ldr	r3, [r7, #4]
 811f1ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 811f1bc:	687a      	ldr	r2, [r7, #4]
 811f1be:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 811f1c0:	f5b2 6f86 	cmp.w	r2, #1072	@ 0x430
 811f1c4:	bf28      	it	cs
 811f1c6:	f44f 6286 	movcs.w	r2, #1072	@ 0x430
 811f1ca:	b292      	uxth	r2, r2
 811f1cc:	4413      	add	r3, r2
 811f1ce:	68fa      	ldr	r2, [r7, #12]
 811f1d0:	1ad3      	subs	r3, r2, r3
 811f1d2:	2b00      	cmp	r3, #0
 811f1d4:	db08      	blt.n	811f1e8 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 811f1d6:	687b      	ldr	r3, [r7, #4]
 811f1d8:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 811f1da:	687b      	ldr	r3, [r7, #4]
 811f1dc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 811f1de:	687b      	ldr	r3, [r7, #4]
 811f1e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 811f1e2:	68fa      	ldr	r2, [r7, #12]
 811f1e4:	1ad3      	subs	r3, r2, r3
 811f1e6:	e020      	b.n	811f22a <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 811f1e8:	687b      	ldr	r3, [r7, #4]
 811f1ea:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 811f1ec:	687b      	ldr	r3, [r7, #4]
 811f1ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 811f1f0:	1ad3      	subs	r3, r2, r3
 811f1f2:	2b00      	cmp	r3, #0
 811f1f4:	dd03      	ble.n	811f1fe <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 811f1f6:	687b      	ldr	r3, [r7, #4]
 811f1f8:	2200      	movs	r2, #0
 811f1fa:	855a      	strh	r2, [r3, #42]	@ 0x2a
 811f1fc:	e014      	b.n	811f228 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 811f1fe:	687b      	ldr	r3, [r7, #4]
 811f200:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 811f202:	687b      	ldr	r3, [r7, #4]
 811f204:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 811f206:	1ad3      	subs	r3, r2, r3
 811f208:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 811f20a:	68bb      	ldr	r3, [r7, #8]
 811f20c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 811f210:	d306      	bcc.n	811f220 <tcp_update_rcv_ann_wnd+0x90>
 811f212:	4b08      	ldr	r3, [pc, #32]	@ (811f234 <tcp_update_rcv_ann_wnd+0xa4>)
 811f214:	f240 32b6 	movw	r2, #950	@ 0x3b6
 811f218:	4909      	ldr	r1, [pc, #36]	@ (811f240 <tcp_update_rcv_ann_wnd+0xb0>)
 811f21a:	4808      	ldr	r0, [pc, #32]	@ (811f23c <tcp_update_rcv_ann_wnd+0xac>)
 811f21c:	f007 fc2a 	bl	8126a74 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 811f220:	68bb      	ldr	r3, [r7, #8]
 811f222:	b29a      	uxth	r2, r3
 811f224:	687b      	ldr	r3, [r7, #4]
 811f226:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
    return 0;
 811f228:	2300      	movs	r3, #0
  }
}
 811f22a:	4618      	mov	r0, r3
 811f22c:	3710      	adds	r7, #16
 811f22e:	46bd      	mov	sp, r7
 811f230:	bd80      	pop	{r7, pc}
 811f232:	bf00      	nop
 811f234:	0812928c 	.word	0x0812928c
 811f238:	0812952c 	.word	0x0812952c
 811f23c:	08129314 	.word	0x08129314
 811f240:	08129550 	.word	0x08129550

0811f244 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 811f244:	b580      	push	{r7, lr}
 811f246:	b084      	sub	sp, #16
 811f248:	af00      	add	r7, sp, #0
 811f24a:	6078      	str	r0, [r7, #4]
 811f24c:	460b      	mov	r3, r1
 811f24e:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 811f250:	687b      	ldr	r3, [r7, #4]
 811f252:	2b00      	cmp	r3, #0
 811f254:	d107      	bne.n	811f266 <tcp_recved+0x22>
 811f256:	4b1e      	ldr	r3, [pc, #120]	@ (811f2d0 <tcp_recved+0x8c>)
 811f258:	f240 32cf 	movw	r2, #975	@ 0x3cf
 811f25c:	491d      	ldr	r1, [pc, #116]	@ (811f2d4 <tcp_recved+0x90>)
 811f25e:	481e      	ldr	r0, [pc, #120]	@ (811f2d8 <tcp_recved+0x94>)
 811f260:	f007 fc08 	bl	8126a74 <iprintf>
 811f264:	e031      	b.n	811f2ca <tcp_recved+0x86>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 811f266:	687b      	ldr	r3, [r7, #4]
 811f268:	7d1b      	ldrb	r3, [r3, #20]
 811f26a:	2b01      	cmp	r3, #1
 811f26c:	d106      	bne.n	811f27c <tcp_recved+0x38>
 811f26e:	4b18      	ldr	r3, [pc, #96]	@ (811f2d0 <tcp_recved+0x8c>)
 811f270:	f240 32d2 	movw	r2, #978	@ 0x3d2
 811f274:	4919      	ldr	r1, [pc, #100]	@ (811f2dc <tcp_recved+0x98>)
 811f276:	4818      	ldr	r0, [pc, #96]	@ (811f2d8 <tcp_recved+0x94>)
 811f278:	f007 fbfc 	bl	8126a74 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 811f27c:	687b      	ldr	r3, [r7, #4]
 811f27e:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 811f280:	887b      	ldrh	r3, [r7, #2]
 811f282:	4413      	add	r3, r2
 811f284:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 811f286:	89fb      	ldrh	r3, [r7, #14]
 811f288:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 811f28c:	d804      	bhi.n	811f298 <tcp_recved+0x54>
 811f28e:	687b      	ldr	r3, [r7, #4]
 811f290:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 811f292:	89fa      	ldrh	r2, [r7, #14]
 811f294:	429a      	cmp	r2, r3
 811f296:	d204      	bcs.n	811f2a2 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 811f298:	687b      	ldr	r3, [r7, #4]
 811f29a:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 811f29e:	851a      	strh	r2, [r3, #40]	@ 0x28
 811f2a0:	e002      	b.n	811f2a8 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 811f2a2:	687b      	ldr	r3, [r7, #4]
 811f2a4:	89fa      	ldrh	r2, [r7, #14]
 811f2a6:	851a      	strh	r2, [r3, #40]	@ 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 811f2a8:	6878      	ldr	r0, [r7, #4]
 811f2aa:	f7ff ff71 	bl	811f190 <tcp_update_rcv_ann_wnd>
 811f2ae:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 811f2b0:	68bb      	ldr	r3, [r7, #8]
 811f2b2:	2b00      	cmp	r3, #0
 811f2b4:	d009      	beq.n	811f2ca <tcp_recved+0x86>
    tcp_ack_now(pcb);
 811f2b6:	687b      	ldr	r3, [r7, #4]
 811f2b8:	8b5b      	ldrh	r3, [r3, #26]
 811f2ba:	f043 0302 	orr.w	r3, r3, #2
 811f2be:	b29a      	uxth	r2, r3
 811f2c0:	687b      	ldr	r3, [r7, #4]
 811f2c2:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 811f2c4:	6878      	ldr	r0, [r7, #4]
 811f2c6:	f004 fc65 	bl	8123b94 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 811f2ca:	3710      	adds	r7, #16
 811f2cc:	46bd      	mov	sp, r7
 811f2ce:	bd80      	pop	{r7, pc}
 811f2d0:	0812928c 	.word	0x0812928c
 811f2d4:	0812956c 	.word	0x0812956c
 811f2d8:	08129314 	.word	0x08129314
 811f2dc:	08129584 	.word	0x08129584

0811f2e0 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 811f2e0:	b480      	push	{r7}
 811f2e2:	b083      	sub	sp, #12
 811f2e4:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 811f2e6:	2300      	movs	r3, #0
 811f2e8:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 811f2ea:	4b1e      	ldr	r3, [pc, #120]	@ (811f364 <tcp_new_port+0x84>)
 811f2ec:	881b      	ldrh	r3, [r3, #0]
 811f2ee:	3301      	adds	r3, #1
 811f2f0:	b29a      	uxth	r2, r3
 811f2f2:	4b1c      	ldr	r3, [pc, #112]	@ (811f364 <tcp_new_port+0x84>)
 811f2f4:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 811f2f6:	4b1b      	ldr	r3, [pc, #108]	@ (811f364 <tcp_new_port+0x84>)
 811f2f8:	881b      	ldrh	r3, [r3, #0]
 811f2fa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 811f2fe:	4293      	cmp	r3, r2
 811f300:	d103      	bne.n	811f30a <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 811f302:	4b18      	ldr	r3, [pc, #96]	@ (811f364 <tcp_new_port+0x84>)
 811f304:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 811f308:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 811f30a:	2300      	movs	r3, #0
 811f30c:	71fb      	strb	r3, [r7, #7]
 811f30e:	e01e      	b.n	811f34e <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 811f310:	79fb      	ldrb	r3, [r7, #7]
 811f312:	4a15      	ldr	r2, [pc, #84]	@ (811f368 <tcp_new_port+0x88>)
 811f314:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 811f318:	681b      	ldr	r3, [r3, #0]
 811f31a:	603b      	str	r3, [r7, #0]
 811f31c:	e011      	b.n	811f342 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 811f31e:	683b      	ldr	r3, [r7, #0]
 811f320:	8ada      	ldrh	r2, [r3, #22]
 811f322:	4b10      	ldr	r3, [pc, #64]	@ (811f364 <tcp_new_port+0x84>)
 811f324:	881b      	ldrh	r3, [r3, #0]
 811f326:	429a      	cmp	r2, r3
 811f328:	d108      	bne.n	811f33c <tcp_new_port+0x5c>
        n++;
 811f32a:	88bb      	ldrh	r3, [r7, #4]
 811f32c:	3301      	adds	r3, #1
 811f32e:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 811f330:	88bb      	ldrh	r3, [r7, #4]
 811f332:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 811f336:	d3d8      	bcc.n	811f2ea <tcp_new_port+0xa>
          return 0;
 811f338:	2300      	movs	r3, #0
 811f33a:	e00d      	b.n	811f358 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 811f33c:	683b      	ldr	r3, [r7, #0]
 811f33e:	68db      	ldr	r3, [r3, #12]
 811f340:	603b      	str	r3, [r7, #0]
 811f342:	683b      	ldr	r3, [r7, #0]
 811f344:	2b00      	cmp	r3, #0
 811f346:	d1ea      	bne.n	811f31e <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 811f348:	79fb      	ldrb	r3, [r7, #7]
 811f34a:	3301      	adds	r3, #1
 811f34c:	71fb      	strb	r3, [r7, #7]
 811f34e:	79fb      	ldrb	r3, [r7, #7]
 811f350:	2b03      	cmp	r3, #3
 811f352:	d9dd      	bls.n	811f310 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 811f354:	4b03      	ldr	r3, [pc, #12]	@ (811f364 <tcp_new_port+0x84>)
 811f356:	881b      	ldrh	r3, [r3, #0]
}
 811f358:	4618      	mov	r0, r3
 811f35a:	370c      	adds	r7, #12
 811f35c:	46bd      	mov	sp, r7
 811f35e:	f85d 7b04 	ldr.w	r7, [sp], #4
 811f362:	4770      	bx	lr
 811f364:	10000028 	.word	0x10000028
 811f368:	0812af38 	.word	0x0812af38

0811f36c <tcp_connect>:
 *         other err_t values if connect request couldn't be sent
 */
err_t
tcp_connect(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port,
            tcp_connected_fn connected)
{
 811f36c:	b580      	push	{r7, lr}
 811f36e:	b08a      	sub	sp, #40	@ 0x28
 811f370:	af00      	add	r7, sp, #0
 811f372:	60f8      	str	r0, [r7, #12]
 811f374:	60b9      	str	r1, [r7, #8]
 811f376:	603b      	str	r3, [r7, #0]
 811f378:	4613      	mov	r3, r2
 811f37a:	80fb      	strh	r3, [r7, #6]
  struct netif *netif = NULL;
 811f37c:	2300      	movs	r3, #0
 811f37e:	627b      	str	r3, [r7, #36]	@ 0x24
  u32_t iss;
  u16_t old_local_port;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 811f380:	68fb      	ldr	r3, [r7, #12]
 811f382:	2b00      	cmp	r3, #0
 811f384:	d109      	bne.n	811f39a <tcp_connect+0x2e>
 811f386:	4b7d      	ldr	r3, [pc, #500]	@ (811f57c <tcp_connect+0x210>)
 811f388:	f240 4235 	movw	r2, #1077	@ 0x435
 811f38c:	497c      	ldr	r1, [pc, #496]	@ (811f580 <tcp_connect+0x214>)
 811f38e:	487d      	ldr	r0, [pc, #500]	@ (811f584 <tcp_connect+0x218>)
 811f390:	f007 fb70 	bl	8126a74 <iprintf>
 811f394:	f06f 030f 	mvn.w	r3, #15
 811f398:	e0ec      	b.n	811f574 <tcp_connect+0x208>
  LWIP_ERROR("tcp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 811f39a:	68bb      	ldr	r3, [r7, #8]
 811f39c:	2b00      	cmp	r3, #0
 811f39e:	d109      	bne.n	811f3b4 <tcp_connect+0x48>
 811f3a0:	4b76      	ldr	r3, [pc, #472]	@ (811f57c <tcp_connect+0x210>)
 811f3a2:	f240 4236 	movw	r2, #1078	@ 0x436
 811f3a6:	4978      	ldr	r1, [pc, #480]	@ (811f588 <tcp_connect+0x21c>)
 811f3a8:	4876      	ldr	r0, [pc, #472]	@ (811f584 <tcp_connect+0x218>)
 811f3aa:	f007 fb63 	bl	8126a74 <iprintf>
 811f3ae:	f06f 030f 	mvn.w	r3, #15
 811f3b2:	e0df      	b.n	811f574 <tcp_connect+0x208>

  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 811f3b4:	68fb      	ldr	r3, [r7, #12]
 811f3b6:	7d1b      	ldrb	r3, [r3, #20]
 811f3b8:	2b00      	cmp	r3, #0
 811f3ba:	d009      	beq.n	811f3d0 <tcp_connect+0x64>
 811f3bc:	4b6f      	ldr	r3, [pc, #444]	@ (811f57c <tcp_connect+0x210>)
 811f3be:	f44f 6287 	mov.w	r2, #1080	@ 0x438
 811f3c2:	4972      	ldr	r1, [pc, #456]	@ (811f58c <tcp_connect+0x220>)
 811f3c4:	486f      	ldr	r0, [pc, #444]	@ (811f584 <tcp_connect+0x218>)
 811f3c6:	f007 fb55 	bl	8126a74 <iprintf>
 811f3ca:	f06f 0309 	mvn.w	r3, #9
 811f3ce:	e0d1      	b.n	811f574 <tcp_connect+0x208>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_connect to port %"U16_F"\n", port));
  ip_addr_set(&pcb->remote_ip, ipaddr);
 811f3d0:	68bb      	ldr	r3, [r7, #8]
 811f3d2:	2b00      	cmp	r3, #0
 811f3d4:	d002      	beq.n	811f3dc <tcp_connect+0x70>
 811f3d6:	68bb      	ldr	r3, [r7, #8]
 811f3d8:	681b      	ldr	r3, [r3, #0]
 811f3da:	e000      	b.n	811f3de <tcp_connect+0x72>
 811f3dc:	2300      	movs	r3, #0
 811f3de:	68fa      	ldr	r2, [r7, #12]
 811f3e0:	6053      	str	r3, [r2, #4]
  pcb->remote_port = port;
 811f3e2:	68fb      	ldr	r3, [r7, #12]
 811f3e4:	88fa      	ldrh	r2, [r7, #6]
 811f3e6:	831a      	strh	r2, [r3, #24]

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 811f3e8:	68fb      	ldr	r3, [r7, #12]
 811f3ea:	7a1b      	ldrb	r3, [r3, #8]
 811f3ec:	2b00      	cmp	r3, #0
 811f3ee:	d006      	beq.n	811f3fe <tcp_connect+0x92>
    netif = netif_get_by_index(pcb->netif_idx);
 811f3f0:	68fb      	ldr	r3, [r7, #12]
 811f3f2:	7a1b      	ldrb	r3, [r3, #8]
 811f3f4:	4618      	mov	r0, r3
 811f3f6:	f7fe fc05 	bl	811dc04 <netif_get_by_index>
 811f3fa:	6278      	str	r0, [r7, #36]	@ 0x24
 811f3fc:	e005      	b.n	811f40a <tcp_connect+0x9e>
  } else {
    /* check if we have a route to the remote host */
    netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 811f3fe:	68fb      	ldr	r3, [r7, #12]
 811f400:	3304      	adds	r3, #4
 811f402:	4618      	mov	r0, r3
 811f404:	f7fc f924 	bl	811b650 <ip4_route>
 811f408:	6278      	str	r0, [r7, #36]	@ 0x24
  }
  if (netif == NULL) {
 811f40a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811f40c:	2b00      	cmp	r3, #0
 811f40e:	d102      	bne.n	811f416 <tcp_connect+0xaa>
    /* Don't even try to send a SYN packet if we have no route since that will fail. */
    return ERR_RTE;
 811f410:	f06f 0303 	mvn.w	r3, #3
 811f414:	e0ae      	b.n	811f574 <tcp_connect+0x208>
  }

  /* check if local IP has been assigned to pcb, if not, get one */
  if (ip_addr_isany(&pcb->local_ip)) {
 811f416:	68fb      	ldr	r3, [r7, #12]
 811f418:	2b00      	cmp	r3, #0
 811f41a:	d003      	beq.n	811f424 <tcp_connect+0xb8>
 811f41c:	68fb      	ldr	r3, [r7, #12]
 811f41e:	681b      	ldr	r3, [r3, #0]
 811f420:	2b00      	cmp	r3, #0
 811f422:	d111      	bne.n	811f448 <tcp_connect+0xdc>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, ipaddr);
 811f424:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811f426:	2b00      	cmp	r3, #0
 811f428:	d002      	beq.n	811f430 <tcp_connect+0xc4>
 811f42a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811f42c:	3304      	adds	r3, #4
 811f42e:	e000      	b.n	811f432 <tcp_connect+0xc6>
 811f430:	2300      	movs	r3, #0
 811f432:	61fb      	str	r3, [r7, #28]
    if (local_ip == NULL) {
 811f434:	69fb      	ldr	r3, [r7, #28]
 811f436:	2b00      	cmp	r3, #0
 811f438:	d102      	bne.n	811f440 <tcp_connect+0xd4>
      return ERR_RTE;
 811f43a:	f06f 0303 	mvn.w	r3, #3
 811f43e:	e099      	b.n	811f574 <tcp_connect+0x208>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 811f440:	69fb      	ldr	r3, [r7, #28]
 811f442:	681a      	ldr	r2, [r3, #0]
 811f444:	68fb      	ldr	r3, [r7, #12]
 811f446:	601a      	str	r2, [r3, #0]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST)) {
    ip6_addr_assign_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST, netif);
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  old_local_port = pcb->local_port;
 811f448:	68fb      	ldr	r3, [r7, #12]
 811f44a:	8adb      	ldrh	r3, [r3, #22]
 811f44c:	837b      	strh	r3, [r7, #26]
  if (pcb->local_port == 0) {
 811f44e:	68fb      	ldr	r3, [r7, #12]
 811f450:	8adb      	ldrh	r3, [r3, #22]
 811f452:	2b00      	cmp	r3, #0
 811f454:	d10c      	bne.n	811f470 <tcp_connect+0x104>
    pcb->local_port = tcp_new_port();
 811f456:	f7ff ff43 	bl	811f2e0 <tcp_new_port>
 811f45a:	4603      	mov	r3, r0
 811f45c:	461a      	mov	r2, r3
 811f45e:	68fb      	ldr	r3, [r7, #12]
 811f460:	82da      	strh	r2, [r3, #22]
    if (pcb->local_port == 0) {
 811f462:	68fb      	ldr	r3, [r7, #12]
 811f464:	8adb      	ldrh	r3, [r3, #22]
 811f466:	2b00      	cmp	r3, #0
 811f468:	d102      	bne.n	811f470 <tcp_connect+0x104>
      return ERR_BUF;
 811f46a:	f06f 0301 	mvn.w	r3, #1
 811f46e:	e081      	b.n	811f574 <tcp_connect+0x208>
      }
    }
#endif /* SO_REUSE */
  }

  iss = tcp_next_iss(pcb);
 811f470:	68f8      	ldr	r0, [r7, #12]
 811f472:	f001 f80d 	bl	8120490 <tcp_next_iss>
 811f476:	6178      	str	r0, [r7, #20]
  pcb->rcv_nxt = 0;
 811f478:	68fb      	ldr	r3, [r7, #12]
 811f47a:	2200      	movs	r2, #0
 811f47c:	625a      	str	r2, [r3, #36]	@ 0x24
  pcb->snd_nxt = iss;
 811f47e:	68fb      	ldr	r3, [r7, #12]
 811f480:	697a      	ldr	r2, [r7, #20]
 811f482:	651a      	str	r2, [r3, #80]	@ 0x50
  pcb->lastack = iss - 1;
 811f484:	697b      	ldr	r3, [r7, #20]
 811f486:	1e5a      	subs	r2, r3, #1
 811f488:	68fb      	ldr	r3, [r7, #12]
 811f48a:	645a      	str	r2, [r3, #68]	@ 0x44
  pcb->snd_wl2 = iss - 1;
 811f48c:	697b      	ldr	r3, [r7, #20]
 811f48e:	1e5a      	subs	r2, r3, #1
 811f490:	68fb      	ldr	r3, [r7, #12]
 811f492:	659a      	str	r2, [r3, #88]	@ 0x58
  pcb->snd_lbb = iss - 1;
 811f494:	697b      	ldr	r3, [r7, #20]
 811f496:	1e5a      	subs	r2, r3, #1
 811f498:	68fb      	ldr	r3, [r7, #12]
 811f49a:	65da      	str	r2, [r3, #92]	@ 0x5c
  /* Start with a window that does not need scaling. When window scaling is
     enabled and used, the window is enlarged when both sides agree on scaling. */
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 811f49c:	68fb      	ldr	r3, [r7, #12]
 811f49e:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 811f4a2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 811f4a4:	68fb      	ldr	r3, [r7, #12]
 811f4a6:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 811f4a8:	68fb      	ldr	r3, [r7, #12]
 811f4aa:	851a      	strh	r2, [r3, #40]	@ 0x28
  pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 811f4ac:	68fb      	ldr	r3, [r7, #12]
 811f4ae:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 811f4b0:	68fb      	ldr	r3, [r7, #12]
 811f4b2:	62da      	str	r2, [r3, #44]	@ 0x2c
  pcb->snd_wnd = TCP_WND;
 811f4b4:	68fb      	ldr	r3, [r7, #12]
 811f4b6:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 811f4ba:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  /* As initial send MSS, we use TCP_MSS but limit it to 536.
     The send MSS is updated when an MSS option is received. */
  pcb->mss = INITIAL_MSS;
 811f4be:	68fb      	ldr	r3, [r7, #12]
 811f4c0:	f44f 7206 	mov.w	r2, #536	@ 0x218
 811f4c4:	865a      	strh	r2, [r3, #50]	@ 0x32
#if TCP_CALCULATE_EFF_SEND_MSS
  pcb->mss = tcp_eff_send_mss_netif(pcb->mss, netif, &pcb->remote_ip);
 811f4c6:	68fb      	ldr	r3, [r7, #12]
 811f4c8:	8e58      	ldrh	r0, [r3, #50]	@ 0x32
 811f4ca:	68fb      	ldr	r3, [r7, #12]
 811f4cc:	3304      	adds	r3, #4
 811f4ce:	461a      	mov	r2, r3
 811f4d0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 811f4d2:	f001 f803 	bl	81204dc <tcp_eff_send_mss_netif>
 811f4d6:	4603      	mov	r3, r0
 811f4d8:	461a      	mov	r2, r3
 811f4da:	68fb      	ldr	r3, [r7, #12]
 811f4dc:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
  pcb->cwnd = 1;
 811f4de:	68fb      	ldr	r3, [r7, #12]
 811f4e0:	2201      	movs	r2, #1
 811f4e2:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
#if LWIP_CALLBACK_API
  pcb->connected = connected;
 811f4e6:	68fb      	ldr	r3, [r7, #12]
 811f4e8:	683a      	ldr	r2, [r7, #0]
 811f4ea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(connected);
#endif /* LWIP_CALLBACK_API */

  /* Send a SYN together with the MSS option. */
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 811f4ee:	2102      	movs	r1, #2
 811f4f0:	68f8      	ldr	r0, [r7, #12]
 811f4f2:	f004 fa61 	bl	81239b8 <tcp_enqueue_flags>
 811f4f6:	4603      	mov	r3, r0
 811f4f8:	74fb      	strb	r3, [r7, #19]
  if (ret == ERR_OK) {
 811f4fa:	f997 3013 	ldrsb.w	r3, [r7, #19]
 811f4fe:	2b00      	cmp	r3, #0
 811f500:	d136      	bne.n	811f570 <tcp_connect+0x204>
    /* SYN segment was enqueued, changed the pcbs state now */
    pcb->state = SYN_SENT;
 811f502:	68fb      	ldr	r3, [r7, #12]
 811f504:	2202      	movs	r2, #2
 811f506:	751a      	strb	r2, [r3, #20]
    if (old_local_port != 0) {
 811f508:	8b7b      	ldrh	r3, [r7, #26]
 811f50a:	2b00      	cmp	r3, #0
 811f50c:	d021      	beq.n	811f552 <tcp_connect+0x1e6>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 811f50e:	4b20      	ldr	r3, [pc, #128]	@ (811f590 <tcp_connect+0x224>)
 811f510:	681b      	ldr	r3, [r3, #0]
 811f512:	68fa      	ldr	r2, [r7, #12]
 811f514:	429a      	cmp	r2, r3
 811f516:	d105      	bne.n	811f524 <tcp_connect+0x1b8>
 811f518:	4b1d      	ldr	r3, [pc, #116]	@ (811f590 <tcp_connect+0x224>)
 811f51a:	681b      	ldr	r3, [r3, #0]
 811f51c:	68db      	ldr	r3, [r3, #12]
 811f51e:	4a1c      	ldr	r2, [pc, #112]	@ (811f590 <tcp_connect+0x224>)
 811f520:	6013      	str	r3, [r2, #0]
 811f522:	e013      	b.n	811f54c <tcp_connect+0x1e0>
 811f524:	4b1a      	ldr	r3, [pc, #104]	@ (811f590 <tcp_connect+0x224>)
 811f526:	681b      	ldr	r3, [r3, #0]
 811f528:	623b      	str	r3, [r7, #32]
 811f52a:	e00c      	b.n	811f546 <tcp_connect+0x1da>
 811f52c:	6a3b      	ldr	r3, [r7, #32]
 811f52e:	68db      	ldr	r3, [r3, #12]
 811f530:	68fa      	ldr	r2, [r7, #12]
 811f532:	429a      	cmp	r2, r3
 811f534:	d104      	bne.n	811f540 <tcp_connect+0x1d4>
 811f536:	68fb      	ldr	r3, [r7, #12]
 811f538:	68da      	ldr	r2, [r3, #12]
 811f53a:	6a3b      	ldr	r3, [r7, #32]
 811f53c:	60da      	str	r2, [r3, #12]
 811f53e:	e005      	b.n	811f54c <tcp_connect+0x1e0>
 811f540:	6a3b      	ldr	r3, [r7, #32]
 811f542:	68db      	ldr	r3, [r3, #12]
 811f544:	623b      	str	r3, [r7, #32]
 811f546:	6a3b      	ldr	r3, [r7, #32]
 811f548:	2b00      	cmp	r3, #0
 811f54a:	d1ef      	bne.n	811f52c <tcp_connect+0x1c0>
 811f54c:	68fb      	ldr	r3, [r7, #12]
 811f54e:	2200      	movs	r2, #0
 811f550:	60da      	str	r2, [r3, #12]
    }
    TCP_REG_ACTIVE(pcb);
 811f552:	4b10      	ldr	r3, [pc, #64]	@ (811f594 <tcp_connect+0x228>)
 811f554:	681a      	ldr	r2, [r3, #0]
 811f556:	68fb      	ldr	r3, [r7, #12]
 811f558:	60da      	str	r2, [r3, #12]
 811f55a:	4a0e      	ldr	r2, [pc, #56]	@ (811f594 <tcp_connect+0x228>)
 811f55c:	68fb      	ldr	r3, [r7, #12]
 811f55e:	6013      	str	r3, [r2, #0]
 811f560:	f005 fbec 	bl	8124d3c <tcp_timer_needed>
 811f564:	4b0c      	ldr	r3, [pc, #48]	@ (811f598 <tcp_connect+0x22c>)
 811f566:	2201      	movs	r2, #1
 811f568:	701a      	strb	r2, [r3, #0]
    MIB2_STATS_INC(mib2.tcpactiveopens);

    tcp_output(pcb);
 811f56a:	68f8      	ldr	r0, [r7, #12]
 811f56c:	f004 fb12 	bl	8123b94 <tcp_output>
  }
  return ret;
 811f570:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 811f574:	4618      	mov	r0, r3
 811f576:	3728      	adds	r7, #40	@ 0x28
 811f578:	46bd      	mov	sp, r7
 811f57a:	bd80      	pop	{r7, pc}
 811f57c:	0812928c 	.word	0x0812928c
 811f580:	081295ac 	.word	0x081295ac
 811f584:	08129314 	.word	0x08129314
 811f588:	081295c8 	.word	0x081295c8
 811f58c:	081295e4 	.word	0x081295e4
 811f590:	1000e510 	.word	0x1000e510
 811f594:	1000e518 	.word	0x1000e518
 811f598:	1000e520 	.word	0x1000e520

0811f59c <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 811f59c:	b5b0      	push	{r4, r5, r7, lr}
 811f59e:	b090      	sub	sp, #64	@ 0x40
 811f5a0:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 811f5a2:	2300      	movs	r3, #0
 811f5a4:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  ++tcp_ticks;
 811f5a8:	4b95      	ldr	r3, [pc, #596]	@ (811f800 <tcp_slowtmr+0x264>)
 811f5aa:	681b      	ldr	r3, [r3, #0]
 811f5ac:	3301      	adds	r3, #1
 811f5ae:	4a94      	ldr	r2, [pc, #592]	@ (811f800 <tcp_slowtmr+0x264>)
 811f5b0:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 811f5b2:	4b94      	ldr	r3, [pc, #592]	@ (811f804 <tcp_slowtmr+0x268>)
 811f5b4:	781b      	ldrb	r3, [r3, #0]
 811f5b6:	3301      	adds	r3, #1
 811f5b8:	b2da      	uxtb	r2, r3
 811f5ba:	4b92      	ldr	r3, [pc, #584]	@ (811f804 <tcp_slowtmr+0x268>)
 811f5bc:	701a      	strb	r2, [r3, #0]
 811f5be:	e000      	b.n	811f5c2 <tcp_slowtmr+0x26>
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
        TCP_EVENT_POLL(prev, err);
        if (tcp_active_pcbs_changed) {
          goto tcp_slowtmr_start;
 811f5c0:	bf00      	nop
  prev = NULL;
 811f5c2:	2300      	movs	r3, #0
 811f5c4:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_active_pcbs;
 811f5c6:	4b90      	ldr	r3, [pc, #576]	@ (811f808 <tcp_slowtmr+0x26c>)
 811f5c8:	681b      	ldr	r3, [r3, #0]
 811f5ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 811f5cc:	e2bb      	b.n	811fb46 <tcp_slowtmr+0x5aa>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 811f5ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811f5d0:	7d1b      	ldrb	r3, [r3, #20]
 811f5d2:	2b00      	cmp	r3, #0
 811f5d4:	d106      	bne.n	811f5e4 <tcp_slowtmr+0x48>
 811f5d6:	4b8d      	ldr	r3, [pc, #564]	@ (811f80c <tcp_slowtmr+0x270>)
 811f5d8:	f240 42be 	movw	r2, #1214	@ 0x4be
 811f5dc:	498c      	ldr	r1, [pc, #560]	@ (811f810 <tcp_slowtmr+0x274>)
 811f5de:	488d      	ldr	r0, [pc, #564]	@ (811f814 <tcp_slowtmr+0x278>)
 811f5e0:	f007 fa48 	bl	8126a74 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 811f5e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811f5e6:	7d1b      	ldrb	r3, [r3, #20]
 811f5e8:	2b01      	cmp	r3, #1
 811f5ea:	d106      	bne.n	811f5fa <tcp_slowtmr+0x5e>
 811f5ec:	4b87      	ldr	r3, [pc, #540]	@ (811f80c <tcp_slowtmr+0x270>)
 811f5ee:	f240 42bf 	movw	r2, #1215	@ 0x4bf
 811f5f2:	4989      	ldr	r1, [pc, #548]	@ (811f818 <tcp_slowtmr+0x27c>)
 811f5f4:	4887      	ldr	r0, [pc, #540]	@ (811f814 <tcp_slowtmr+0x278>)
 811f5f6:	f007 fa3d 	bl	8126a74 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 811f5fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811f5fc:	7d1b      	ldrb	r3, [r3, #20]
 811f5fe:	2b0a      	cmp	r3, #10
 811f600:	d106      	bne.n	811f610 <tcp_slowtmr+0x74>
 811f602:	4b82      	ldr	r3, [pc, #520]	@ (811f80c <tcp_slowtmr+0x270>)
 811f604:	f44f 6298 	mov.w	r2, #1216	@ 0x4c0
 811f608:	4984      	ldr	r1, [pc, #528]	@ (811f81c <tcp_slowtmr+0x280>)
 811f60a:	4882      	ldr	r0, [pc, #520]	@ (811f814 <tcp_slowtmr+0x278>)
 811f60c:	f007 fa32 	bl	8126a74 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 811f610:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811f612:	7f9a      	ldrb	r2, [r3, #30]
 811f614:	4b7b      	ldr	r3, [pc, #492]	@ (811f804 <tcp_slowtmr+0x268>)
 811f616:	781b      	ldrb	r3, [r3, #0]
 811f618:	429a      	cmp	r2, r3
 811f61a:	d105      	bne.n	811f628 <tcp_slowtmr+0x8c>
      prev = pcb;
 811f61c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811f61e:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 811f620:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811f622:	68db      	ldr	r3, [r3, #12]
 811f624:	62fb      	str	r3, [r7, #44]	@ 0x2c
      continue;
 811f626:	e28e      	b.n	811fb46 <tcp_slowtmr+0x5aa>
    pcb->last_timer = tcp_timer_ctr;
 811f628:	4b76      	ldr	r3, [pc, #472]	@ (811f804 <tcp_slowtmr+0x268>)
 811f62a:	781a      	ldrb	r2, [r3, #0]
 811f62c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811f62e:	779a      	strb	r2, [r3, #30]
    pcb_remove = 0;
 811f630:	2300      	movs	r3, #0
 811f632:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    pcb_reset = 0;
 811f636:	2300      	movs	r3, #0
 811f638:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 811f63c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811f63e:	7d1b      	ldrb	r3, [r3, #20]
 811f640:	2b02      	cmp	r3, #2
 811f642:	d10a      	bne.n	811f65a <tcp_slowtmr+0xbe>
 811f644:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811f646:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 811f64a:	2b05      	cmp	r3, #5
 811f64c:	d905      	bls.n	811f65a <tcp_slowtmr+0xbe>
      ++pcb_remove;
 811f64e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 811f652:	3301      	adds	r3, #1
 811f654:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 811f658:	e11e      	b.n	811f898 <tcp_slowtmr+0x2fc>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 811f65a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811f65c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 811f660:	2b0b      	cmp	r3, #11
 811f662:	d905      	bls.n	811f670 <tcp_slowtmr+0xd4>
      ++pcb_remove;
 811f664:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 811f668:	3301      	adds	r3, #1
 811f66a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 811f66e:	e113      	b.n	811f898 <tcp_slowtmr+0x2fc>
      if (pcb->persist_backoff > 0) {
 811f670:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811f672:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 811f676:	2b00      	cmp	r3, #0
 811f678:	d075      	beq.n	811f766 <tcp_slowtmr+0x1ca>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 811f67a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811f67c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 811f67e:	2b00      	cmp	r3, #0
 811f680:	d006      	beq.n	811f690 <tcp_slowtmr+0xf4>
 811f682:	4b62      	ldr	r3, [pc, #392]	@ (811f80c <tcp_slowtmr+0x270>)
 811f684:	f240 42d4 	movw	r2, #1236	@ 0x4d4
 811f688:	4965      	ldr	r1, [pc, #404]	@ (811f820 <tcp_slowtmr+0x284>)
 811f68a:	4862      	ldr	r0, [pc, #392]	@ (811f814 <tcp_slowtmr+0x278>)
 811f68c:	f007 f9f2 	bl	8126a74 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 811f690:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811f692:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 811f694:	2b00      	cmp	r3, #0
 811f696:	d106      	bne.n	811f6a6 <tcp_slowtmr+0x10a>
 811f698:	4b5c      	ldr	r3, [pc, #368]	@ (811f80c <tcp_slowtmr+0x270>)
 811f69a:	f240 42d5 	movw	r2, #1237	@ 0x4d5
 811f69e:	4961      	ldr	r1, [pc, #388]	@ (811f824 <tcp_slowtmr+0x288>)
 811f6a0:	485c      	ldr	r0, [pc, #368]	@ (811f814 <tcp_slowtmr+0x278>)
 811f6a2:	f007 f9e7 	bl	8126a74 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 811f6a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811f6a8:	f893 30a2 	ldrb.w	r3, [r3, #162]	@ 0xa2
 811f6ac:	2b0b      	cmp	r3, #11
 811f6ae:	d905      	bls.n	811f6bc <tcp_slowtmr+0x120>
          ++pcb_remove; /* max probes reached */
 811f6b0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 811f6b4:	3301      	adds	r3, #1
 811f6b6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 811f6ba:	e0ed      	b.n	811f898 <tcp_slowtmr+0x2fc>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 811f6bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811f6be:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 811f6c2:	3b01      	subs	r3, #1
 811f6c4:	4a58      	ldr	r2, [pc, #352]	@ (811f828 <tcp_slowtmr+0x28c>)
 811f6c6:	5cd3      	ldrb	r3, [r2, r3]
 811f6c8:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 811f6ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811f6cc:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 811f6d0:	7c7a      	ldrb	r2, [r7, #17]
 811f6d2:	429a      	cmp	r2, r3
 811f6d4:	d907      	bls.n	811f6e6 <tcp_slowtmr+0x14a>
            pcb->persist_cnt++;
 811f6d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811f6d8:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 811f6dc:	3301      	adds	r3, #1
 811f6de:	b2da      	uxtb	r2, r3
 811f6e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811f6e2:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
          if (pcb->persist_cnt >= backoff_cnt) {
 811f6e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811f6e8:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 811f6ec:	7c7a      	ldrb	r2, [r7, #17]
 811f6ee:	429a      	cmp	r2, r3
 811f6f0:	f200 80d2 	bhi.w	811f898 <tcp_slowtmr+0x2fc>
            int next_slot = 1; /* increment timer to next slot */
 811f6f4:	2301      	movs	r3, #1
 811f6f6:	623b      	str	r3, [r7, #32]
            if (pcb->snd_wnd == 0) {
 811f6f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811f6fa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 811f6fe:	2b00      	cmp	r3, #0
 811f700:	d108      	bne.n	811f714 <tcp_slowtmr+0x178>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 811f702:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 811f704:	f005 f8ee 	bl	81248e4 <tcp_zero_window_probe>
 811f708:	4603      	mov	r3, r0
 811f70a:	2b00      	cmp	r3, #0
 811f70c:	d014      	beq.n	811f738 <tcp_slowtmr+0x19c>
                next_slot = 0; /* try probe again with current slot */
 811f70e:	2300      	movs	r3, #0
 811f710:	623b      	str	r3, [r7, #32]
 811f712:	e011      	b.n	811f738 <tcp_slowtmr+0x19c>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 811f714:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811f716:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 811f71a:	4619      	mov	r1, r3
 811f71c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 811f71e:	f003 ffb3 	bl	8123688 <tcp_split_unsent_seg>
 811f722:	4603      	mov	r3, r0
 811f724:	2b00      	cmp	r3, #0
 811f726:	d107      	bne.n	811f738 <tcp_slowtmr+0x19c>
                if (tcp_output(pcb) == ERR_OK) {
 811f728:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 811f72a:	f004 fa33 	bl	8123b94 <tcp_output>
 811f72e:	4603      	mov	r3, r0
 811f730:	2b00      	cmp	r3, #0
 811f732:	d101      	bne.n	811f738 <tcp_slowtmr+0x19c>
                  next_slot = 0;
 811f734:	2300      	movs	r3, #0
 811f736:	623b      	str	r3, [r7, #32]
            if (next_slot) {
 811f738:	6a3b      	ldr	r3, [r7, #32]
 811f73a:	2b00      	cmp	r3, #0
 811f73c:	f000 80ac 	beq.w	811f898 <tcp_slowtmr+0x2fc>
              pcb->persist_cnt = 0;
 811f740:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811f742:	2200      	movs	r2, #0
 811f744:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 811f748:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811f74a:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 811f74e:	2b06      	cmp	r3, #6
 811f750:	f200 80a2 	bhi.w	811f898 <tcp_slowtmr+0x2fc>
                pcb->persist_backoff++;
 811f754:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811f756:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 811f75a:	3301      	adds	r3, #1
 811f75c:	b2da      	uxtb	r2, r3
 811f75e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811f760:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1
 811f764:	e098      	b.n	811f898 <tcp_slowtmr+0x2fc>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 811f766:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811f768:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 811f76c:	2b00      	cmp	r3, #0
 811f76e:	db0f      	blt.n	811f790 <tcp_slowtmr+0x1f4>
 811f770:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811f772:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 811f776:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 811f77a:	4293      	cmp	r3, r2
 811f77c:	d008      	beq.n	811f790 <tcp_slowtmr+0x1f4>
          ++pcb->rtime;
 811f77e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811f780:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 811f784:	b29b      	uxth	r3, r3
 811f786:	3301      	adds	r3, #1
 811f788:	b29b      	uxth	r3, r3
 811f78a:	b21a      	sxth	r2, r3
 811f78c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811f78e:	861a      	strh	r2, [r3, #48]	@ 0x30
        if (pcb->rtime >= pcb->rto) {
 811f790:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811f792:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
 811f796:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811f798:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 811f79c:	429a      	cmp	r2, r3
 811f79e:	db7b      	blt.n	811f898 <tcp_slowtmr+0x2fc>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 811f7a0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 811f7a2:	f004 fceb 	bl	812417c <tcp_rexmit_rto_prepare>
 811f7a6:	4603      	mov	r3, r0
 811f7a8:	2b00      	cmp	r3, #0
 811f7aa:	d007      	beq.n	811f7bc <tcp_slowtmr+0x220>
 811f7ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811f7ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 811f7b0:	2b00      	cmp	r3, #0
 811f7b2:	d171      	bne.n	811f898 <tcp_slowtmr+0x2fc>
 811f7b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811f7b6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 811f7b8:	2b00      	cmp	r3, #0
 811f7ba:	d06d      	beq.n	811f898 <tcp_slowtmr+0x2fc>
            if (pcb->state != SYN_SENT) {
 811f7bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811f7be:	7d1b      	ldrb	r3, [r3, #20]
 811f7c0:	2b02      	cmp	r3, #2
 811f7c2:	d03a      	beq.n	811f83a <tcp_slowtmr+0x29e>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 811f7c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811f7c6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 811f7ca:	2b0c      	cmp	r3, #12
 811f7cc:	bf28      	it	cs
 811f7ce:	230c      	movcs	r3, #12
 811f7d0:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 811f7d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811f7d4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 811f7d8:	10db      	asrs	r3, r3, #3
 811f7da:	b21b      	sxth	r3, r3
 811f7dc:	461a      	mov	r2, r3
 811f7de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811f7e0:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 811f7e4:	4413      	add	r3, r2
 811f7e6:	7efa      	ldrb	r2, [r7, #27]
 811f7e8:	4910      	ldr	r1, [pc, #64]	@ (811f82c <tcp_slowtmr+0x290>)
 811f7ea:	5c8a      	ldrb	r2, [r1, r2]
 811f7ec:	4093      	lsls	r3, r2
 811f7ee:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 811f7f0:	697b      	ldr	r3, [r7, #20]
 811f7f2:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 811f7f6:	4293      	cmp	r3, r2
 811f7f8:	dc1a      	bgt.n	811f830 <tcp_slowtmr+0x294>
 811f7fa:	697b      	ldr	r3, [r7, #20]
 811f7fc:	b21a      	sxth	r2, r3
 811f7fe:	e019      	b.n	811f834 <tcp_slowtmr+0x298>
 811f800:	1000e50c 	.word	0x1000e50c
 811f804:	1000e522 	.word	0x1000e522
 811f808:	1000e518 	.word	0x1000e518
 811f80c:	0812928c 	.word	0x0812928c
 811f810:	08129614 	.word	0x08129614
 811f814:	08129314 	.word	0x08129314
 811f818:	08129640 	.word	0x08129640
 811f81c:	0812966c 	.word	0x0812966c
 811f820:	0812969c 	.word	0x0812969c
 811f824:	081296d0 	.word	0x081296d0
 811f828:	0812af30 	.word	0x0812af30
 811f82c:	0812af20 	.word	0x0812af20
 811f830:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 811f834:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811f836:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
            pcb->rtime = 0;
 811f83a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811f83c:	2200      	movs	r2, #0
 811f83e:	861a      	strh	r2, [r3, #48]	@ 0x30
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 811f840:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811f842:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 811f846:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811f848:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 811f84c:	4293      	cmp	r3, r2
 811f84e:	bf28      	it	cs
 811f850:	4613      	movcs	r3, r2
 811f852:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 811f854:	8a7b      	ldrh	r3, [r7, #18]
 811f856:	085b      	lsrs	r3, r3, #1
 811f858:	b29a      	uxth	r2, r3
 811f85a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811f85c:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 811f860:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811f862:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 811f866:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811f868:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 811f86a:	005b      	lsls	r3, r3, #1
 811f86c:	b29b      	uxth	r3, r3
 811f86e:	429a      	cmp	r2, r3
 811f870:	d206      	bcs.n	811f880 <tcp_slowtmr+0x2e4>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 811f872:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811f874:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 811f876:	005b      	lsls	r3, r3, #1
 811f878:	b29a      	uxth	r2, r3
 811f87a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811f87c:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            pcb->cwnd = pcb->mss;
 811f880:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811f882:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 811f884:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811f886:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
            pcb->bytes_acked = 0;
 811f88a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811f88c:	2200      	movs	r2, #0
 811f88e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            tcp_rexmit_rto_commit(pcb);
 811f892:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 811f894:	f004 fce2 	bl	812425c <tcp_rexmit_rto_commit>
    if (pcb->state == FIN_WAIT_2) {
 811f898:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811f89a:	7d1b      	ldrb	r3, [r3, #20]
 811f89c:	2b06      	cmp	r3, #6
 811f89e:	d112      	bne.n	811f8c6 <tcp_slowtmr+0x32a>
      if (pcb->flags & TF_RXCLOSED) {
 811f8a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811f8a2:	8b5b      	ldrh	r3, [r3, #26]
 811f8a4:	f003 0310 	and.w	r3, r3, #16
 811f8a8:	2b00      	cmp	r3, #0
 811f8aa:	d00c      	beq.n	811f8c6 <tcp_slowtmr+0x32a>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 811f8ac:	4b96      	ldr	r3, [pc, #600]	@ (811fb08 <tcp_slowtmr+0x56c>)
 811f8ae:	681a      	ldr	r2, [r3, #0]
 811f8b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811f8b2:	6a1b      	ldr	r3, [r3, #32]
 811f8b4:	1ad3      	subs	r3, r2, r3
 811f8b6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 811f8ba:	d904      	bls.n	811f8c6 <tcp_slowtmr+0x32a>
          ++pcb_remove;
 811f8bc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 811f8c0:	3301      	adds	r3, #1
 811f8c2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 811f8c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811f8c8:	7a5b      	ldrb	r3, [r3, #9]
 811f8ca:	f003 0308 	and.w	r3, r3, #8
 811f8ce:	2b00      	cmp	r3, #0
 811f8d0:	d053      	beq.n	811f97a <tcp_slowtmr+0x3de>
        ((pcb->state == ESTABLISHED) ||
 811f8d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811f8d4:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 811f8d6:	2b04      	cmp	r3, #4
 811f8d8:	d003      	beq.n	811f8e2 <tcp_slowtmr+0x346>
         (pcb->state == CLOSE_WAIT))) {
 811f8da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811f8dc:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 811f8de:	2b07      	cmp	r3, #7
 811f8e0:	d14b      	bne.n	811f97a <tcp_slowtmr+0x3de>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 811f8e2:	4b89      	ldr	r3, [pc, #548]	@ (811fb08 <tcp_slowtmr+0x56c>)
 811f8e4:	681a      	ldr	r2, [r3, #0]
 811f8e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811f8e8:	6a1b      	ldr	r3, [r3, #32]
 811f8ea:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 811f8ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811f8ee:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 811f8f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811f8f4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 811f8f8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 811f8fa:	f8d0 0098 	ldr.w	r0, [r0, #152]	@ 0x98
 811f8fe:	fb00 f303 	mul.w	r3, r0, r3
 811f902:	440b      	add	r3, r1
 811f904:	4981      	ldr	r1, [pc, #516]	@ (811fb0c <tcp_slowtmr+0x570>)
 811f906:	fba1 1303 	umull	r1, r3, r1, r3
 811f90a:	091b      	lsrs	r3, r3, #4
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 811f90c:	429a      	cmp	r2, r3
 811f90e:	d90a      	bls.n	811f926 <tcp_slowtmr+0x38a>
        ++pcb_remove;
 811f910:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 811f914:	3301      	adds	r3, #1
 811f916:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        ++pcb_reset;
 811f91a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 811f91e:	3301      	adds	r3, #1
 811f920:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 811f924:	e029      	b.n	811f97a <tcp_slowtmr+0x3de>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 811f926:	4b78      	ldr	r3, [pc, #480]	@ (811fb08 <tcp_slowtmr+0x56c>)
 811f928:	681a      	ldr	r2, [r3, #0]
 811f92a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811f92c:	6a1b      	ldr	r3, [r3, #32]
 811f92e:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 811f930:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811f932:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 811f936:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811f938:	f893 30a3 	ldrb.w	r3, [r3, #163]	@ 0xa3
 811f93c:	4618      	mov	r0, r3
 811f93e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811f940:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 811f944:	fb00 f303 	mul.w	r3, r0, r3
 811f948:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 811f94a:	4970      	ldr	r1, [pc, #448]	@ (811fb0c <tcp_slowtmr+0x570>)
 811f94c:	fba1 1303 	umull	r1, r3, r1, r3
 811f950:	091b      	lsrs	r3, r3, #4
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 811f952:	429a      	cmp	r2, r3
 811f954:	d911      	bls.n	811f97a <tcp_slowtmr+0x3de>
        err = tcp_keepalive(pcb);
 811f956:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 811f958:	f004 ff84 	bl	8124864 <tcp_keepalive>
 811f95c:	4603      	mov	r3, r0
 811f95e:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (err == ERR_OK) {
 811f962:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 811f966:	2b00      	cmp	r3, #0
 811f968:	d107      	bne.n	811f97a <tcp_slowtmr+0x3de>
          pcb->keep_cnt_sent++;
 811f96a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811f96c:	f893 30a3 	ldrb.w	r3, [r3, #163]	@ 0xa3
 811f970:	3301      	adds	r3, #1
 811f972:	b2da      	uxtb	r2, r3
 811f974:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811f976:	f883 20a3 	strb.w	r2, [r3, #163]	@ 0xa3
    if (pcb->ooseq != NULL &&
 811f97a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811f97c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 811f97e:	2b00      	cmp	r3, #0
 811f980:	d011      	beq.n	811f9a6 <tcp_slowtmr+0x40a>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 811f982:	4b61      	ldr	r3, [pc, #388]	@ (811fb08 <tcp_slowtmr+0x56c>)
 811f984:	681a      	ldr	r2, [r3, #0]
 811f986:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811f988:	6a1b      	ldr	r3, [r3, #32]
 811f98a:	1ad2      	subs	r2, r2, r3
 811f98c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811f98e:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 811f992:	4619      	mov	r1, r3
 811f994:	460b      	mov	r3, r1
 811f996:	005b      	lsls	r3, r3, #1
 811f998:	440b      	add	r3, r1
 811f99a:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 811f99c:	429a      	cmp	r2, r3
 811f99e:	d302      	bcc.n	811f9a6 <tcp_slowtmr+0x40a>
      tcp_free_ooseq(pcb);
 811f9a0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 811f9a2:	f000 fe45 	bl	8120630 <tcp_free_ooseq>
    if (pcb->state == SYN_RCVD) {
 811f9a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811f9a8:	7d1b      	ldrb	r3, [r3, #20]
 811f9aa:	2b03      	cmp	r3, #3
 811f9ac:	d10c      	bne.n	811f9c8 <tcp_slowtmr+0x42c>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 811f9ae:	4b56      	ldr	r3, [pc, #344]	@ (811fb08 <tcp_slowtmr+0x56c>)
 811f9b0:	681a      	ldr	r2, [r3, #0]
 811f9b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811f9b4:	6a1b      	ldr	r3, [r3, #32]
 811f9b6:	1ad3      	subs	r3, r2, r3
 811f9b8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 811f9bc:	d904      	bls.n	811f9c8 <tcp_slowtmr+0x42c>
        ++pcb_remove;
 811f9be:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 811f9c2:	3301      	adds	r3, #1
 811f9c4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb->state == LAST_ACK) {
 811f9c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811f9ca:	7d1b      	ldrb	r3, [r3, #20]
 811f9cc:	2b09      	cmp	r3, #9
 811f9ce:	d10d      	bne.n	811f9ec <tcp_slowtmr+0x450>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 811f9d0:	4b4d      	ldr	r3, [pc, #308]	@ (811fb08 <tcp_slowtmr+0x56c>)
 811f9d2:	681a      	ldr	r2, [r3, #0]
 811f9d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811f9d6:	6a1b      	ldr	r3, [r3, #32]
 811f9d8:	1ad3      	subs	r3, r2, r3
 811f9da:	f241 7270 	movw	r2, #6000	@ 0x1770
 811f9de:	4293      	cmp	r3, r2
 811f9e0:	d904      	bls.n	811f9ec <tcp_slowtmr+0x450>
        ++pcb_remove;
 811f9e2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 811f9e6:	3301      	adds	r3, #1
 811f9e8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb_remove) {
 811f9ec:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 811f9f0:	2b00      	cmp	r3, #0
 811f9f2:	d060      	beq.n	811fab6 <tcp_slowtmr+0x51a>
      tcp_err_fn err_fn = pcb->errf;
 811f9f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811f9f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 811f9fa:	60fb      	str	r3, [r7, #12]
      tcp_pcb_purge(pcb);
 811f9fc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 811f9fe:	f000 fc63 	bl	81202c8 <tcp_pcb_purge>
      if (prev != NULL) {
 811fa02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 811fa04:	2b00      	cmp	r3, #0
 811fa06:	d010      	beq.n	811fa2a <tcp_slowtmr+0x48e>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 811fa08:	4b41      	ldr	r3, [pc, #260]	@ (811fb10 <tcp_slowtmr+0x574>)
 811fa0a:	681b      	ldr	r3, [r3, #0]
 811fa0c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 811fa0e:	429a      	cmp	r2, r3
 811fa10:	d106      	bne.n	811fa20 <tcp_slowtmr+0x484>
 811fa12:	4b40      	ldr	r3, [pc, #256]	@ (811fb14 <tcp_slowtmr+0x578>)
 811fa14:	f240 526d 	movw	r2, #1389	@ 0x56d
 811fa18:	493f      	ldr	r1, [pc, #252]	@ (811fb18 <tcp_slowtmr+0x57c>)
 811fa1a:	4840      	ldr	r0, [pc, #256]	@ (811fb1c <tcp_slowtmr+0x580>)
 811fa1c:	f007 f82a 	bl	8126a74 <iprintf>
        prev->next = pcb->next;
 811fa20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811fa22:	68da      	ldr	r2, [r3, #12]
 811fa24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 811fa26:	60da      	str	r2, [r3, #12]
 811fa28:	e00f      	b.n	811fa4a <tcp_slowtmr+0x4ae>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 811fa2a:	4b39      	ldr	r3, [pc, #228]	@ (811fb10 <tcp_slowtmr+0x574>)
 811fa2c:	681b      	ldr	r3, [r3, #0]
 811fa2e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 811fa30:	429a      	cmp	r2, r3
 811fa32:	d006      	beq.n	811fa42 <tcp_slowtmr+0x4a6>
 811fa34:	4b37      	ldr	r3, [pc, #220]	@ (811fb14 <tcp_slowtmr+0x578>)
 811fa36:	f240 5271 	movw	r2, #1393	@ 0x571
 811fa3a:	4939      	ldr	r1, [pc, #228]	@ (811fb20 <tcp_slowtmr+0x584>)
 811fa3c:	4837      	ldr	r0, [pc, #220]	@ (811fb1c <tcp_slowtmr+0x580>)
 811fa3e:	f007 f819 	bl	8126a74 <iprintf>
        tcp_active_pcbs = pcb->next;
 811fa42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811fa44:	68db      	ldr	r3, [r3, #12]
 811fa46:	4a32      	ldr	r2, [pc, #200]	@ (811fb10 <tcp_slowtmr+0x574>)
 811fa48:	6013      	str	r3, [r2, #0]
      if (pcb_reset) {
 811fa4a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 811fa4e:	2b00      	cmp	r3, #0
 811fa50:	d013      	beq.n	811fa7a <tcp_slowtmr+0x4de>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 811fa52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811fa54:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 811fa56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811fa58:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 811fa5a:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 811fa5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811fa5e:	3304      	adds	r3, #4
 811fa60:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 811fa62:	8ad2      	ldrh	r2, [r2, #22]
 811fa64:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 811fa66:	8b09      	ldrh	r1, [r1, #24]
 811fa68:	9102      	str	r1, [sp, #8]
 811fa6a:	9201      	str	r2, [sp, #4]
 811fa6c:	9300      	str	r3, [sp, #0]
 811fa6e:	462b      	mov	r3, r5
 811fa70:	4622      	mov	r2, r4
 811fa72:	4601      	mov	r1, r0
 811fa74:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 811fa76:	f004 fe41 	bl	81246fc <tcp_rst>
      err_arg = pcb->callback_arg;
 811fa7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811fa7c:	691b      	ldr	r3, [r3, #16]
 811fa7e:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 811fa80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811fa82:	7d1b      	ldrb	r3, [r3, #20]
 811fa84:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 811fa86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811fa88:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 811fa8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811fa8c:	68db      	ldr	r3, [r3, #12]
 811fa8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 811fa90:	6838      	ldr	r0, [r7, #0]
 811fa92:	f7fe fff1 	bl	811ea78 <tcp_free>
      tcp_active_pcbs_changed = 0;
 811fa96:	4b23      	ldr	r3, [pc, #140]	@ (811fb24 <tcp_slowtmr+0x588>)
 811fa98:	2200      	movs	r2, #0
 811fa9a:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 811fa9c:	68fb      	ldr	r3, [r7, #12]
 811fa9e:	2b00      	cmp	r3, #0
 811faa0:	d004      	beq.n	811faac <tcp_slowtmr+0x510>
 811faa2:	68fb      	ldr	r3, [r7, #12]
 811faa4:	f06f 010c 	mvn.w	r1, #12
 811faa8:	68b8      	ldr	r0, [r7, #8]
 811faaa:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 811faac:	4b1d      	ldr	r3, [pc, #116]	@ (811fb24 <tcp_slowtmr+0x588>)
 811faae:	781b      	ldrb	r3, [r3, #0]
 811fab0:	2b00      	cmp	r3, #0
 811fab2:	d048      	beq.n	811fb46 <tcp_slowtmr+0x5aa>
        goto tcp_slowtmr_start;
 811fab4:	e585      	b.n	811f5c2 <tcp_slowtmr+0x26>
      prev = pcb;
 811fab6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811fab8:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 811faba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811fabc:	68db      	ldr	r3, [r3, #12]
 811fabe:	62fb      	str	r3, [r7, #44]	@ 0x2c
      ++prev->polltmr;
 811fac0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 811fac2:	7f1b      	ldrb	r3, [r3, #28]
 811fac4:	3301      	adds	r3, #1
 811fac6:	b2da      	uxtb	r2, r3
 811fac8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 811faca:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 811facc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 811face:	7f1a      	ldrb	r2, [r3, #28]
 811fad0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 811fad2:	7f5b      	ldrb	r3, [r3, #29]
 811fad4:	429a      	cmp	r2, r3
 811fad6:	d336      	bcc.n	811fb46 <tcp_slowtmr+0x5aa>
        prev->polltmr = 0;
 811fad8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 811fada:	2200      	movs	r2, #0
 811fadc:	771a      	strb	r2, [r3, #28]
        tcp_active_pcbs_changed = 0;
 811fade:	4b11      	ldr	r3, [pc, #68]	@ (811fb24 <tcp_slowtmr+0x588>)
 811fae0:	2200      	movs	r2, #0
 811fae2:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 811fae4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 811fae6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 811faea:	2b00      	cmp	r3, #0
 811faec:	d01c      	beq.n	811fb28 <tcp_slowtmr+0x58c>
 811faee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 811faf0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 811faf4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 811faf6:	6912      	ldr	r2, [r2, #16]
 811faf8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 811fafa:	4610      	mov	r0, r2
 811fafc:	4798      	blx	r3
 811fafe:	4603      	mov	r3, r0
 811fb00:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 811fb04:	e013      	b.n	811fb2e <tcp_slowtmr+0x592>
 811fb06:	bf00      	nop
 811fb08:	1000e50c 	.word	0x1000e50c
 811fb0c:	cccccccd 	.word	0xcccccccd
 811fb10:	1000e518 	.word	0x1000e518
 811fb14:	0812928c 	.word	0x0812928c
 811fb18:	08129708 	.word	0x08129708
 811fb1c:	08129314 	.word	0x08129314
 811fb20:	08129734 	.word	0x08129734
 811fb24:	1000e520 	.word	0x1000e520
 811fb28:	2300      	movs	r3, #0
 811fb2a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (tcp_active_pcbs_changed) {
 811fb2e:	4b39      	ldr	r3, [pc, #228]	@ (811fc14 <tcp_slowtmr+0x678>)
 811fb30:	781b      	ldrb	r3, [r3, #0]
 811fb32:	2b00      	cmp	r3, #0
 811fb34:	f47f ad44 	bne.w	811f5c0 <tcp_slowtmr+0x24>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 811fb38:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 811fb3c:	2b00      	cmp	r3, #0
 811fb3e:	d102      	bne.n	811fb46 <tcp_slowtmr+0x5aa>
          tcp_output(prev);
 811fb40:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 811fb42:	f004 f827 	bl	8123b94 <tcp_output>
  while (pcb != NULL) {
 811fb46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811fb48:	2b00      	cmp	r3, #0
 811fb4a:	f47f ad40 	bne.w	811f5ce <tcp_slowtmr+0x32>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 811fb4e:	2300      	movs	r3, #0
 811fb50:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_tw_pcbs;
 811fb52:	4b31      	ldr	r3, [pc, #196]	@ (811fc18 <tcp_slowtmr+0x67c>)
 811fb54:	681b      	ldr	r3, [r3, #0]
 811fb56:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 811fb58:	e054      	b.n	811fc04 <tcp_slowtmr+0x668>
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 811fb5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811fb5c:	7d1b      	ldrb	r3, [r3, #20]
 811fb5e:	2b0a      	cmp	r3, #10
 811fb60:	d006      	beq.n	811fb70 <tcp_slowtmr+0x5d4>
 811fb62:	4b2e      	ldr	r3, [pc, #184]	@ (811fc1c <tcp_slowtmr+0x680>)
 811fb64:	f240 52a1 	movw	r2, #1441	@ 0x5a1
 811fb68:	492d      	ldr	r1, [pc, #180]	@ (811fc20 <tcp_slowtmr+0x684>)
 811fb6a:	482e      	ldr	r0, [pc, #184]	@ (811fc24 <tcp_slowtmr+0x688>)
 811fb6c:	f006 ff82 	bl	8126a74 <iprintf>
    pcb_remove = 0;
 811fb70:	2300      	movs	r3, #0
 811fb72:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 811fb76:	4b2c      	ldr	r3, [pc, #176]	@ (811fc28 <tcp_slowtmr+0x68c>)
 811fb78:	681a      	ldr	r2, [r3, #0]
 811fb7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811fb7c:	6a1b      	ldr	r3, [r3, #32]
 811fb7e:	1ad3      	subs	r3, r2, r3
 811fb80:	f241 7270 	movw	r2, #6000	@ 0x1770
 811fb84:	4293      	cmp	r3, r2
 811fb86:	d904      	bls.n	811fb92 <tcp_slowtmr+0x5f6>
      ++pcb_remove;
 811fb88:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 811fb8c:	3301      	adds	r3, #1
 811fb8e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 811fb92:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 811fb96:	2b00      	cmp	r3, #0
 811fb98:	d02f      	beq.n	811fbfa <tcp_slowtmr+0x65e>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 811fb9a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 811fb9c:	f000 fb94 	bl	81202c8 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 811fba0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 811fba2:	2b00      	cmp	r3, #0
 811fba4:	d010      	beq.n	811fbc8 <tcp_slowtmr+0x62c>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 811fba6:	4b1c      	ldr	r3, [pc, #112]	@ (811fc18 <tcp_slowtmr+0x67c>)
 811fba8:	681b      	ldr	r3, [r3, #0]
 811fbaa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 811fbac:	429a      	cmp	r2, r3
 811fbae:	d106      	bne.n	811fbbe <tcp_slowtmr+0x622>
 811fbb0:	4b1a      	ldr	r3, [pc, #104]	@ (811fc1c <tcp_slowtmr+0x680>)
 811fbb2:	f240 52af 	movw	r2, #1455	@ 0x5af
 811fbb6:	491d      	ldr	r1, [pc, #116]	@ (811fc2c <tcp_slowtmr+0x690>)
 811fbb8:	481a      	ldr	r0, [pc, #104]	@ (811fc24 <tcp_slowtmr+0x688>)
 811fbba:	f006 ff5b 	bl	8126a74 <iprintf>
        prev->next = pcb->next;
 811fbbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811fbc0:	68da      	ldr	r2, [r3, #12]
 811fbc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 811fbc4:	60da      	str	r2, [r3, #12]
 811fbc6:	e00f      	b.n	811fbe8 <tcp_slowtmr+0x64c>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 811fbc8:	4b13      	ldr	r3, [pc, #76]	@ (811fc18 <tcp_slowtmr+0x67c>)
 811fbca:	681b      	ldr	r3, [r3, #0]
 811fbcc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 811fbce:	429a      	cmp	r2, r3
 811fbd0:	d006      	beq.n	811fbe0 <tcp_slowtmr+0x644>
 811fbd2:	4b12      	ldr	r3, [pc, #72]	@ (811fc1c <tcp_slowtmr+0x680>)
 811fbd4:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 811fbd8:	4915      	ldr	r1, [pc, #84]	@ (811fc30 <tcp_slowtmr+0x694>)
 811fbda:	4812      	ldr	r0, [pc, #72]	@ (811fc24 <tcp_slowtmr+0x688>)
 811fbdc:	f006 ff4a 	bl	8126a74 <iprintf>
        tcp_tw_pcbs = pcb->next;
 811fbe0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811fbe2:	68db      	ldr	r3, [r3, #12]
 811fbe4:	4a0c      	ldr	r2, [pc, #48]	@ (811fc18 <tcp_slowtmr+0x67c>)
 811fbe6:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 811fbe8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811fbea:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 811fbec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811fbee:	68db      	ldr	r3, [r3, #12]
 811fbf0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 811fbf2:	69f8      	ldr	r0, [r7, #28]
 811fbf4:	f7fe ff40 	bl	811ea78 <tcp_free>
 811fbf8:	e004      	b.n	811fc04 <tcp_slowtmr+0x668>
    } else {
      prev = pcb;
 811fbfa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811fbfc:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 811fbfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811fc00:	68db      	ldr	r3, [r3, #12]
 811fc02:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 811fc04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811fc06:	2b00      	cmp	r3, #0
 811fc08:	d1a7      	bne.n	811fb5a <tcp_slowtmr+0x5be>
    }
  }
}
 811fc0a:	bf00      	nop
 811fc0c:	bf00      	nop
 811fc0e:	3730      	adds	r7, #48	@ 0x30
 811fc10:	46bd      	mov	sp, r7
 811fc12:	bdb0      	pop	{r4, r5, r7, pc}
 811fc14:	1000e520 	.word	0x1000e520
 811fc18:	1000e51c 	.word	0x1000e51c
 811fc1c:	0812928c 	.word	0x0812928c
 811fc20:	08129760 	.word	0x08129760
 811fc24:	08129314 	.word	0x08129314
 811fc28:	1000e50c 	.word	0x1000e50c
 811fc2c:	08129790 	.word	0x08129790
 811fc30:	081297b8 	.word	0x081297b8

0811fc34 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 811fc34:	b580      	push	{r7, lr}
 811fc36:	b082      	sub	sp, #8
 811fc38:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 811fc3a:	4b2d      	ldr	r3, [pc, #180]	@ (811fcf0 <tcp_fasttmr+0xbc>)
 811fc3c:	781b      	ldrb	r3, [r3, #0]
 811fc3e:	3301      	adds	r3, #1
 811fc40:	b2da      	uxtb	r2, r3
 811fc42:	4b2b      	ldr	r3, [pc, #172]	@ (811fcf0 <tcp_fasttmr+0xbc>)
 811fc44:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 811fc46:	4b2b      	ldr	r3, [pc, #172]	@ (811fcf4 <tcp_fasttmr+0xc0>)
 811fc48:	681b      	ldr	r3, [r3, #0]
 811fc4a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 811fc4c:	e048      	b.n	811fce0 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 811fc4e:	687b      	ldr	r3, [r7, #4]
 811fc50:	7f9a      	ldrb	r2, [r3, #30]
 811fc52:	4b27      	ldr	r3, [pc, #156]	@ (811fcf0 <tcp_fasttmr+0xbc>)
 811fc54:	781b      	ldrb	r3, [r3, #0]
 811fc56:	429a      	cmp	r2, r3
 811fc58:	d03f      	beq.n	811fcda <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 811fc5a:	4b25      	ldr	r3, [pc, #148]	@ (811fcf0 <tcp_fasttmr+0xbc>)
 811fc5c:	781a      	ldrb	r2, [r3, #0]
 811fc5e:	687b      	ldr	r3, [r7, #4]
 811fc60:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 811fc62:	687b      	ldr	r3, [r7, #4]
 811fc64:	8b5b      	ldrh	r3, [r3, #26]
 811fc66:	f003 0301 	and.w	r3, r3, #1
 811fc6a:	2b00      	cmp	r3, #0
 811fc6c:	d010      	beq.n	811fc90 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 811fc6e:	687b      	ldr	r3, [r7, #4]
 811fc70:	8b5b      	ldrh	r3, [r3, #26]
 811fc72:	f043 0302 	orr.w	r3, r3, #2
 811fc76:	b29a      	uxth	r2, r3
 811fc78:	687b      	ldr	r3, [r7, #4]
 811fc7a:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 811fc7c:	6878      	ldr	r0, [r7, #4]
 811fc7e:	f003 ff89 	bl	8123b94 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 811fc82:	687b      	ldr	r3, [r7, #4]
 811fc84:	8b5b      	ldrh	r3, [r3, #26]
 811fc86:	f023 0303 	bic.w	r3, r3, #3
 811fc8a:	b29a      	uxth	r2, r3
 811fc8c:	687b      	ldr	r3, [r7, #4]
 811fc8e:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 811fc90:	687b      	ldr	r3, [r7, #4]
 811fc92:	8b5b      	ldrh	r3, [r3, #26]
 811fc94:	f003 0308 	and.w	r3, r3, #8
 811fc98:	2b00      	cmp	r3, #0
 811fc9a:	d009      	beq.n	811fcb0 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 811fc9c:	687b      	ldr	r3, [r7, #4]
 811fc9e:	8b5b      	ldrh	r3, [r3, #26]
 811fca0:	f023 0308 	bic.w	r3, r3, #8
 811fca4:	b29a      	uxth	r2, r3
 811fca6:	687b      	ldr	r3, [r7, #4]
 811fca8:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 811fcaa:	6878      	ldr	r0, [r7, #4]
 811fcac:	f7ff f878 	bl	811eda0 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 811fcb0:	687b      	ldr	r3, [r7, #4]
 811fcb2:	68db      	ldr	r3, [r3, #12]
 811fcb4:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 811fcb6:	687b      	ldr	r3, [r7, #4]
 811fcb8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 811fcba:	2b00      	cmp	r3, #0
 811fcbc:	d00a      	beq.n	811fcd4 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 811fcbe:	4b0e      	ldr	r3, [pc, #56]	@ (811fcf8 <tcp_fasttmr+0xc4>)
 811fcc0:	2200      	movs	r2, #0
 811fcc2:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 811fcc4:	6878      	ldr	r0, [r7, #4]
 811fcc6:	f000 f819 	bl	811fcfc <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 811fcca:	4b0b      	ldr	r3, [pc, #44]	@ (811fcf8 <tcp_fasttmr+0xc4>)
 811fccc:	781b      	ldrb	r3, [r3, #0]
 811fcce:	2b00      	cmp	r3, #0
 811fcd0:	d000      	beq.n	811fcd4 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 811fcd2:	e7b8      	b.n	811fc46 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 811fcd4:	683b      	ldr	r3, [r7, #0]
 811fcd6:	607b      	str	r3, [r7, #4]
 811fcd8:	e002      	b.n	811fce0 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 811fcda:	687b      	ldr	r3, [r7, #4]
 811fcdc:	68db      	ldr	r3, [r3, #12]
 811fcde:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 811fce0:	687b      	ldr	r3, [r7, #4]
 811fce2:	2b00      	cmp	r3, #0
 811fce4:	d1b3      	bne.n	811fc4e <tcp_fasttmr+0x1a>
    }
  }
}
 811fce6:	bf00      	nop
 811fce8:	bf00      	nop
 811fcea:	3708      	adds	r7, #8
 811fcec:	46bd      	mov	sp, r7
 811fcee:	bd80      	pop	{r7, pc}
 811fcf0:	1000e522 	.word	0x1000e522
 811fcf4:	1000e518 	.word	0x1000e518
 811fcf8:	1000e520 	.word	0x1000e520

0811fcfc <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 811fcfc:	b590      	push	{r4, r7, lr}
 811fcfe:	b085      	sub	sp, #20
 811fd00:	af00      	add	r7, sp, #0
 811fd02:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 811fd04:	687b      	ldr	r3, [r7, #4]
 811fd06:	2b00      	cmp	r3, #0
 811fd08:	d109      	bne.n	811fd1e <tcp_process_refused_data+0x22>
 811fd0a:	4b37      	ldr	r3, [pc, #220]	@ (811fde8 <tcp_process_refused_data+0xec>)
 811fd0c:	f240 6209 	movw	r2, #1545	@ 0x609
 811fd10:	4936      	ldr	r1, [pc, #216]	@ (811fdec <tcp_process_refused_data+0xf0>)
 811fd12:	4837      	ldr	r0, [pc, #220]	@ (811fdf0 <tcp_process_refused_data+0xf4>)
 811fd14:	f006 feae 	bl	8126a74 <iprintf>
 811fd18:	f06f 030f 	mvn.w	r3, #15
 811fd1c:	e060      	b.n	811fde0 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 811fd1e:	687b      	ldr	r3, [r7, #4]
 811fd20:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 811fd22:	7b5b      	ldrb	r3, [r3, #13]
 811fd24:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 811fd26:	687b      	ldr	r3, [r7, #4]
 811fd28:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 811fd2a:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 811fd2c:	687b      	ldr	r3, [r7, #4]
 811fd2e:	2200      	movs	r2, #0
 811fd30:	679a      	str	r2, [r3, #120]	@ 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 811fd32:	687b      	ldr	r3, [r7, #4]
 811fd34:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 811fd38:	2b00      	cmp	r3, #0
 811fd3a:	d00b      	beq.n	811fd54 <tcp_process_refused_data+0x58>
 811fd3c:	687b      	ldr	r3, [r7, #4]
 811fd3e:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 811fd42:	687b      	ldr	r3, [r7, #4]
 811fd44:	6918      	ldr	r0, [r3, #16]
 811fd46:	2300      	movs	r3, #0
 811fd48:	68ba      	ldr	r2, [r7, #8]
 811fd4a:	6879      	ldr	r1, [r7, #4]
 811fd4c:	47a0      	blx	r4
 811fd4e:	4603      	mov	r3, r0
 811fd50:	73fb      	strb	r3, [r7, #15]
 811fd52:	e007      	b.n	811fd64 <tcp_process_refused_data+0x68>
 811fd54:	2300      	movs	r3, #0
 811fd56:	68ba      	ldr	r2, [r7, #8]
 811fd58:	6879      	ldr	r1, [r7, #4]
 811fd5a:	2000      	movs	r0, #0
 811fd5c:	f000 f8a4 	bl	811fea8 <tcp_recv_null>
 811fd60:	4603      	mov	r3, r0
 811fd62:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 811fd64:	f997 300f 	ldrsb.w	r3, [r7, #15]
 811fd68:	2b00      	cmp	r3, #0
 811fd6a:	d12a      	bne.n	811fdc2 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 811fd6c:	7bbb      	ldrb	r3, [r7, #14]
 811fd6e:	f003 0320 	and.w	r3, r3, #32
 811fd72:	2b00      	cmp	r3, #0
 811fd74:	d033      	beq.n	811fdde <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 811fd76:	687b      	ldr	r3, [r7, #4]
 811fd78:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 811fd7a:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 811fd7e:	d005      	beq.n	811fd8c <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 811fd80:	687b      	ldr	r3, [r7, #4]
 811fd82:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 811fd84:	3301      	adds	r3, #1
 811fd86:	b29a      	uxth	r2, r3
 811fd88:	687b      	ldr	r3, [r7, #4]
 811fd8a:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 811fd8c:	687b      	ldr	r3, [r7, #4]
 811fd8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 811fd92:	2b00      	cmp	r3, #0
 811fd94:	d00b      	beq.n	811fdae <tcp_process_refused_data+0xb2>
 811fd96:	687b      	ldr	r3, [r7, #4]
 811fd98:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 811fd9c:	687b      	ldr	r3, [r7, #4]
 811fd9e:	6918      	ldr	r0, [r3, #16]
 811fda0:	2300      	movs	r3, #0
 811fda2:	2200      	movs	r2, #0
 811fda4:	6879      	ldr	r1, [r7, #4]
 811fda6:	47a0      	blx	r4
 811fda8:	4603      	mov	r3, r0
 811fdaa:	73fb      	strb	r3, [r7, #15]
 811fdac:	e001      	b.n	811fdb2 <tcp_process_refused_data+0xb6>
 811fdae:	2300      	movs	r3, #0
 811fdb0:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 811fdb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 811fdb6:	f113 0f0d 	cmn.w	r3, #13
 811fdba:	d110      	bne.n	811fdde <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 811fdbc:	f06f 030c 	mvn.w	r3, #12
 811fdc0:	e00e      	b.n	811fde0 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 811fdc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 811fdc6:	f113 0f0d 	cmn.w	r3, #13
 811fdca:	d102      	bne.n	811fdd2 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 811fdcc:	f06f 030c 	mvn.w	r3, #12
 811fdd0:	e006      	b.n	811fde0 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 811fdd2:	687b      	ldr	r3, [r7, #4]
 811fdd4:	68ba      	ldr	r2, [r7, #8]
 811fdd6:	679a      	str	r2, [r3, #120]	@ 0x78
      return ERR_INPROGRESS;
 811fdd8:	f06f 0304 	mvn.w	r3, #4
 811fddc:	e000      	b.n	811fde0 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 811fdde:	2300      	movs	r3, #0
}
 811fde0:	4618      	mov	r0, r3
 811fde2:	3714      	adds	r7, #20
 811fde4:	46bd      	mov	sp, r7
 811fde6:	bd90      	pop	{r4, r7, pc}
 811fde8:	0812928c 	.word	0x0812928c
 811fdec:	081297e0 	.word	0x081297e0
 811fdf0:	08129314 	.word	0x08129314

0811fdf4 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 811fdf4:	b580      	push	{r7, lr}
 811fdf6:	b084      	sub	sp, #16
 811fdf8:	af00      	add	r7, sp, #0
 811fdfa:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 811fdfc:	e007      	b.n	811fe0e <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 811fdfe:	687b      	ldr	r3, [r7, #4]
 811fe00:	681b      	ldr	r3, [r3, #0]
 811fe02:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 811fe04:	6878      	ldr	r0, [r7, #4]
 811fe06:	f000 f80a 	bl	811fe1e <tcp_seg_free>
    seg = next;
 811fe0a:	68fb      	ldr	r3, [r7, #12]
 811fe0c:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 811fe0e:	687b      	ldr	r3, [r7, #4]
 811fe10:	2b00      	cmp	r3, #0
 811fe12:	d1f4      	bne.n	811fdfe <tcp_segs_free+0xa>
  }
}
 811fe14:	bf00      	nop
 811fe16:	bf00      	nop
 811fe18:	3710      	adds	r7, #16
 811fe1a:	46bd      	mov	sp, r7
 811fe1c:	bd80      	pop	{r7, pc}

0811fe1e <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 811fe1e:	b580      	push	{r7, lr}
 811fe20:	b082      	sub	sp, #8
 811fe22:	af00      	add	r7, sp, #0
 811fe24:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 811fe26:	687b      	ldr	r3, [r7, #4]
 811fe28:	2b00      	cmp	r3, #0
 811fe2a:	d00c      	beq.n	811fe46 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 811fe2c:	687b      	ldr	r3, [r7, #4]
 811fe2e:	685b      	ldr	r3, [r3, #4]
 811fe30:	2b00      	cmp	r3, #0
 811fe32:	d004      	beq.n	811fe3e <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 811fe34:	687b      	ldr	r3, [r7, #4]
 811fe36:	685b      	ldr	r3, [r3, #4]
 811fe38:	4618      	mov	r0, r3
 811fe3a:	f7fe fa6f 	bl	811e31c <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 811fe3e:	6879      	ldr	r1, [r7, #4]
 811fe40:	2003      	movs	r0, #3
 811fe42:	f7fd fbc9 	bl	811d5d8 <memp_free>
  }
}
 811fe46:	bf00      	nop
 811fe48:	3708      	adds	r7, #8
 811fe4a:	46bd      	mov	sp, r7
 811fe4c:	bd80      	pop	{r7, pc}
	...

0811fe50 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 811fe50:	b580      	push	{r7, lr}
 811fe52:	b084      	sub	sp, #16
 811fe54:	af00      	add	r7, sp, #0
 811fe56:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 811fe58:	687b      	ldr	r3, [r7, #4]
 811fe5a:	2b00      	cmp	r3, #0
 811fe5c:	d106      	bne.n	811fe6c <tcp_seg_copy+0x1c>
 811fe5e:	4b0f      	ldr	r3, [pc, #60]	@ (811fe9c <tcp_seg_copy+0x4c>)
 811fe60:	f240 6282 	movw	r2, #1666	@ 0x682
 811fe64:	490e      	ldr	r1, [pc, #56]	@ (811fea0 <tcp_seg_copy+0x50>)
 811fe66:	480f      	ldr	r0, [pc, #60]	@ (811fea4 <tcp_seg_copy+0x54>)
 811fe68:	f006 fe04 	bl	8126a74 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 811fe6c:	2003      	movs	r0, #3
 811fe6e:	f7fd fb3d 	bl	811d4ec <memp_malloc>
 811fe72:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 811fe74:	68fb      	ldr	r3, [r7, #12]
 811fe76:	2b00      	cmp	r3, #0
 811fe78:	d101      	bne.n	811fe7e <tcp_seg_copy+0x2e>
    return NULL;
 811fe7a:	2300      	movs	r3, #0
 811fe7c:	e00a      	b.n	811fe94 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 811fe7e:	2210      	movs	r2, #16
 811fe80:	6879      	ldr	r1, [r7, #4]
 811fe82:	68f8      	ldr	r0, [r7, #12]
 811fe84:	f007 f859 	bl	8126f3a <memcpy>
  pbuf_ref(cseg->p);
 811fe88:	68fb      	ldr	r3, [r7, #12]
 811fe8a:	685b      	ldr	r3, [r3, #4]
 811fe8c:	4618      	mov	r0, r3
 811fe8e:	f7fe faeb 	bl	811e468 <pbuf_ref>
  return cseg;
 811fe92:	68fb      	ldr	r3, [r7, #12]
}
 811fe94:	4618      	mov	r0, r3
 811fe96:	3710      	adds	r7, #16
 811fe98:	46bd      	mov	sp, r7
 811fe9a:	bd80      	pop	{r7, pc}
 811fe9c:	0812928c 	.word	0x0812928c
 811fea0:	08129824 	.word	0x08129824
 811fea4:	08129314 	.word	0x08129314

0811fea8 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 811fea8:	b580      	push	{r7, lr}
 811feaa:	b084      	sub	sp, #16
 811feac:	af00      	add	r7, sp, #0
 811feae:	60f8      	str	r0, [r7, #12]
 811feb0:	60b9      	str	r1, [r7, #8]
 811feb2:	607a      	str	r2, [r7, #4]
 811feb4:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 811feb6:	68bb      	ldr	r3, [r7, #8]
 811feb8:	2b00      	cmp	r3, #0
 811feba:	d109      	bne.n	811fed0 <tcp_recv_null+0x28>
 811febc:	4b12      	ldr	r3, [pc, #72]	@ (811ff08 <tcp_recv_null+0x60>)
 811febe:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 811fec2:	4912      	ldr	r1, [pc, #72]	@ (811ff0c <tcp_recv_null+0x64>)
 811fec4:	4812      	ldr	r0, [pc, #72]	@ (811ff10 <tcp_recv_null+0x68>)
 811fec6:	f006 fdd5 	bl	8126a74 <iprintf>
 811feca:	f06f 030f 	mvn.w	r3, #15
 811fece:	e016      	b.n	811fefe <tcp_recv_null+0x56>

  if (p != NULL) {
 811fed0:	687b      	ldr	r3, [r7, #4]
 811fed2:	2b00      	cmp	r3, #0
 811fed4:	d009      	beq.n	811feea <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 811fed6:	687b      	ldr	r3, [r7, #4]
 811fed8:	891b      	ldrh	r3, [r3, #8]
 811feda:	4619      	mov	r1, r3
 811fedc:	68b8      	ldr	r0, [r7, #8]
 811fede:	f7ff f9b1 	bl	811f244 <tcp_recved>
    pbuf_free(p);
 811fee2:	6878      	ldr	r0, [r7, #4]
 811fee4:	f7fe fa1a 	bl	811e31c <pbuf_free>
 811fee8:	e008      	b.n	811fefc <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 811feea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 811feee:	2b00      	cmp	r3, #0
 811fef0:	d104      	bne.n	811fefc <tcp_recv_null+0x54>
    return tcp_close(pcb);
 811fef2:	68b8      	ldr	r0, [r7, #8]
 811fef4:	f7fe ffbe 	bl	811ee74 <tcp_close>
 811fef8:	4603      	mov	r3, r0
 811fefa:	e000      	b.n	811fefe <tcp_recv_null+0x56>
  }
  return ERR_OK;
 811fefc:	2300      	movs	r3, #0
}
 811fefe:	4618      	mov	r0, r3
 811ff00:	3710      	adds	r7, #16
 811ff02:	46bd      	mov	sp, r7
 811ff04:	bd80      	pop	{r7, pc}
 811ff06:	bf00      	nop
 811ff08:	0812928c 	.word	0x0812928c
 811ff0c:	08129840 	.word	0x08129840
 811ff10:	08129314 	.word	0x08129314

0811ff14 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 811ff14:	b580      	push	{r7, lr}
 811ff16:	b086      	sub	sp, #24
 811ff18:	af00      	add	r7, sp, #0
 811ff1a:	4603      	mov	r3, r0
 811ff1c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 811ff1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 811ff22:	2b00      	cmp	r3, #0
 811ff24:	db01      	blt.n	811ff2a <tcp_kill_prio+0x16>
 811ff26:	79fb      	ldrb	r3, [r7, #7]
 811ff28:	e000      	b.n	811ff2c <tcp_kill_prio+0x18>
 811ff2a:	237f      	movs	r3, #127	@ 0x7f
 811ff2c:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 811ff2e:	7afb      	ldrb	r3, [r7, #11]
 811ff30:	2b00      	cmp	r3, #0
 811ff32:	d034      	beq.n	811ff9e <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 811ff34:	7afb      	ldrb	r3, [r7, #11]
 811ff36:	3b01      	subs	r3, #1
 811ff38:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 811ff3a:	2300      	movs	r3, #0
 811ff3c:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 811ff3e:	2300      	movs	r3, #0
 811ff40:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 811ff42:	4b19      	ldr	r3, [pc, #100]	@ (811ffa8 <tcp_kill_prio+0x94>)
 811ff44:	681b      	ldr	r3, [r3, #0]
 811ff46:	617b      	str	r3, [r7, #20]
 811ff48:	e01f      	b.n	811ff8a <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 811ff4a:	697b      	ldr	r3, [r7, #20]
 811ff4c:	7d5b      	ldrb	r3, [r3, #21]
 811ff4e:	7afa      	ldrb	r2, [r7, #11]
 811ff50:	429a      	cmp	r2, r3
 811ff52:	d80c      	bhi.n	811ff6e <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 811ff54:	697b      	ldr	r3, [r7, #20]
 811ff56:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 811ff58:	7afa      	ldrb	r2, [r7, #11]
 811ff5a:	429a      	cmp	r2, r3
 811ff5c:	d112      	bne.n	811ff84 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 811ff5e:	4b13      	ldr	r3, [pc, #76]	@ (811ffac <tcp_kill_prio+0x98>)
 811ff60:	681a      	ldr	r2, [r3, #0]
 811ff62:	697b      	ldr	r3, [r7, #20]
 811ff64:	6a1b      	ldr	r3, [r3, #32]
 811ff66:	1ad3      	subs	r3, r2, r3
 811ff68:	68fa      	ldr	r2, [r7, #12]
 811ff6a:	429a      	cmp	r2, r3
 811ff6c:	d80a      	bhi.n	811ff84 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 811ff6e:	4b0f      	ldr	r3, [pc, #60]	@ (811ffac <tcp_kill_prio+0x98>)
 811ff70:	681a      	ldr	r2, [r3, #0]
 811ff72:	697b      	ldr	r3, [r7, #20]
 811ff74:	6a1b      	ldr	r3, [r3, #32]
 811ff76:	1ad3      	subs	r3, r2, r3
 811ff78:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 811ff7a:	697b      	ldr	r3, [r7, #20]
 811ff7c:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 811ff7e:	697b      	ldr	r3, [r7, #20]
 811ff80:	7d5b      	ldrb	r3, [r3, #21]
 811ff82:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 811ff84:	697b      	ldr	r3, [r7, #20]
 811ff86:	68db      	ldr	r3, [r3, #12]
 811ff88:	617b      	str	r3, [r7, #20]
 811ff8a:	697b      	ldr	r3, [r7, #20]
 811ff8c:	2b00      	cmp	r3, #0
 811ff8e:	d1dc      	bne.n	811ff4a <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 811ff90:	693b      	ldr	r3, [r7, #16]
 811ff92:	2b00      	cmp	r3, #0
 811ff94:	d004      	beq.n	811ffa0 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 811ff96:	6938      	ldr	r0, [r7, #16]
 811ff98:	f7ff f856 	bl	811f048 <tcp_abort>
 811ff9c:	e000      	b.n	811ffa0 <tcp_kill_prio+0x8c>
    return;
 811ff9e:	bf00      	nop
  }
}
 811ffa0:	3718      	adds	r7, #24
 811ffa2:	46bd      	mov	sp, r7
 811ffa4:	bd80      	pop	{r7, pc}
 811ffa6:	bf00      	nop
 811ffa8:	1000e518 	.word	0x1000e518
 811ffac:	1000e50c 	.word	0x1000e50c

0811ffb0 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 811ffb0:	b580      	push	{r7, lr}
 811ffb2:	b086      	sub	sp, #24
 811ffb4:	af00      	add	r7, sp, #0
 811ffb6:	4603      	mov	r3, r0
 811ffb8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 811ffba:	79fb      	ldrb	r3, [r7, #7]
 811ffbc:	2b08      	cmp	r3, #8
 811ffbe:	d009      	beq.n	811ffd4 <tcp_kill_state+0x24>
 811ffc0:	79fb      	ldrb	r3, [r7, #7]
 811ffc2:	2b09      	cmp	r3, #9
 811ffc4:	d006      	beq.n	811ffd4 <tcp_kill_state+0x24>
 811ffc6:	4b1a      	ldr	r3, [pc, #104]	@ (8120030 <tcp_kill_state+0x80>)
 811ffc8:	f240 62dd 	movw	r2, #1757	@ 0x6dd
 811ffcc:	4919      	ldr	r1, [pc, #100]	@ (8120034 <tcp_kill_state+0x84>)
 811ffce:	481a      	ldr	r0, [pc, #104]	@ (8120038 <tcp_kill_state+0x88>)
 811ffd0:	f006 fd50 	bl	8126a74 <iprintf>

  inactivity = 0;
 811ffd4:	2300      	movs	r3, #0
 811ffd6:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 811ffd8:	2300      	movs	r3, #0
 811ffda:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 811ffdc:	4b17      	ldr	r3, [pc, #92]	@ (812003c <tcp_kill_state+0x8c>)
 811ffde:	681b      	ldr	r3, [r3, #0]
 811ffe0:	617b      	str	r3, [r7, #20]
 811ffe2:	e017      	b.n	8120014 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 811ffe4:	697b      	ldr	r3, [r7, #20]
 811ffe6:	7d1b      	ldrb	r3, [r3, #20]
 811ffe8:	79fa      	ldrb	r2, [r7, #7]
 811ffea:	429a      	cmp	r2, r3
 811ffec:	d10f      	bne.n	812000e <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 811ffee:	4b14      	ldr	r3, [pc, #80]	@ (8120040 <tcp_kill_state+0x90>)
 811fff0:	681a      	ldr	r2, [r3, #0]
 811fff2:	697b      	ldr	r3, [r7, #20]
 811fff4:	6a1b      	ldr	r3, [r3, #32]
 811fff6:	1ad3      	subs	r3, r2, r3
 811fff8:	68fa      	ldr	r2, [r7, #12]
 811fffa:	429a      	cmp	r2, r3
 811fffc:	d807      	bhi.n	812000e <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 811fffe:	4b10      	ldr	r3, [pc, #64]	@ (8120040 <tcp_kill_state+0x90>)
 8120000:	681a      	ldr	r2, [r3, #0]
 8120002:	697b      	ldr	r3, [r7, #20]
 8120004:	6a1b      	ldr	r3, [r3, #32]
 8120006:	1ad3      	subs	r3, r2, r3
 8120008:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 812000a:	697b      	ldr	r3, [r7, #20]
 812000c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 812000e:	697b      	ldr	r3, [r7, #20]
 8120010:	68db      	ldr	r3, [r3, #12]
 8120012:	617b      	str	r3, [r7, #20]
 8120014:	697b      	ldr	r3, [r7, #20]
 8120016:	2b00      	cmp	r3, #0
 8120018:	d1e4      	bne.n	811ffe4 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 812001a:	693b      	ldr	r3, [r7, #16]
 812001c:	2b00      	cmp	r3, #0
 812001e:	d003      	beq.n	8120028 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8120020:	2100      	movs	r1, #0
 8120022:	6938      	ldr	r0, [r7, #16]
 8120024:	f7fe ff52 	bl	811eecc <tcp_abandon>
  }
}
 8120028:	bf00      	nop
 812002a:	3718      	adds	r7, #24
 812002c:	46bd      	mov	sp, r7
 812002e:	bd80      	pop	{r7, pc}
 8120030:	0812928c 	.word	0x0812928c
 8120034:	0812985c 	.word	0x0812985c
 8120038:	08129314 	.word	0x08129314
 812003c:	1000e518 	.word	0x1000e518
 8120040:	1000e50c 	.word	0x1000e50c

08120044 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8120044:	b580      	push	{r7, lr}
 8120046:	b084      	sub	sp, #16
 8120048:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 812004a:	2300      	movs	r3, #0
 812004c:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 812004e:	2300      	movs	r3, #0
 8120050:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8120052:	4b12      	ldr	r3, [pc, #72]	@ (812009c <tcp_kill_timewait+0x58>)
 8120054:	681b      	ldr	r3, [r3, #0]
 8120056:	60fb      	str	r3, [r7, #12]
 8120058:	e012      	b.n	8120080 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 812005a:	4b11      	ldr	r3, [pc, #68]	@ (81200a0 <tcp_kill_timewait+0x5c>)
 812005c:	681a      	ldr	r2, [r3, #0]
 812005e:	68fb      	ldr	r3, [r7, #12]
 8120060:	6a1b      	ldr	r3, [r3, #32]
 8120062:	1ad3      	subs	r3, r2, r3
 8120064:	687a      	ldr	r2, [r7, #4]
 8120066:	429a      	cmp	r2, r3
 8120068:	d807      	bhi.n	812007a <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 812006a:	4b0d      	ldr	r3, [pc, #52]	@ (81200a0 <tcp_kill_timewait+0x5c>)
 812006c:	681a      	ldr	r2, [r3, #0]
 812006e:	68fb      	ldr	r3, [r7, #12]
 8120070:	6a1b      	ldr	r3, [r3, #32]
 8120072:	1ad3      	subs	r3, r2, r3
 8120074:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8120076:	68fb      	ldr	r3, [r7, #12]
 8120078:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 812007a:	68fb      	ldr	r3, [r7, #12]
 812007c:	68db      	ldr	r3, [r3, #12]
 812007e:	60fb      	str	r3, [r7, #12]
 8120080:	68fb      	ldr	r3, [r7, #12]
 8120082:	2b00      	cmp	r3, #0
 8120084:	d1e9      	bne.n	812005a <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8120086:	68bb      	ldr	r3, [r7, #8]
 8120088:	2b00      	cmp	r3, #0
 812008a:	d002      	beq.n	8120092 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 812008c:	68b8      	ldr	r0, [r7, #8]
 812008e:	f7fe ffdb 	bl	811f048 <tcp_abort>
  }
}
 8120092:	bf00      	nop
 8120094:	3710      	adds	r7, #16
 8120096:	46bd      	mov	sp, r7
 8120098:	bd80      	pop	{r7, pc}
 812009a:	bf00      	nop
 812009c:	1000e51c 	.word	0x1000e51c
 81200a0:	1000e50c 	.word	0x1000e50c

081200a4 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 81200a4:	b580      	push	{r7, lr}
 81200a6:	b082      	sub	sp, #8
 81200a8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 81200aa:	4b10      	ldr	r3, [pc, #64]	@ (81200ec <tcp_handle_closepend+0x48>)
 81200ac:	681b      	ldr	r3, [r3, #0]
 81200ae:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 81200b0:	e014      	b.n	81200dc <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 81200b2:	687b      	ldr	r3, [r7, #4]
 81200b4:	68db      	ldr	r3, [r3, #12]
 81200b6:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 81200b8:	687b      	ldr	r3, [r7, #4]
 81200ba:	8b5b      	ldrh	r3, [r3, #26]
 81200bc:	f003 0308 	and.w	r3, r3, #8
 81200c0:	2b00      	cmp	r3, #0
 81200c2:	d009      	beq.n	81200d8 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 81200c4:	687b      	ldr	r3, [r7, #4]
 81200c6:	8b5b      	ldrh	r3, [r3, #26]
 81200c8:	f023 0308 	bic.w	r3, r3, #8
 81200cc:	b29a      	uxth	r2, r3
 81200ce:	687b      	ldr	r3, [r7, #4]
 81200d0:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 81200d2:	6878      	ldr	r0, [r7, #4]
 81200d4:	f7fe fe64 	bl	811eda0 <tcp_close_shutdown_fin>
    }
    pcb = next;
 81200d8:	683b      	ldr	r3, [r7, #0]
 81200da:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 81200dc:	687b      	ldr	r3, [r7, #4]
 81200de:	2b00      	cmp	r3, #0
 81200e0:	d1e7      	bne.n	81200b2 <tcp_handle_closepend+0xe>
  }
}
 81200e2:	bf00      	nop
 81200e4:	bf00      	nop
 81200e6:	3708      	adds	r7, #8
 81200e8:	46bd      	mov	sp, r7
 81200ea:	bd80      	pop	{r7, pc}
 81200ec:	1000e518 	.word	0x1000e518

081200f0 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 81200f0:	b580      	push	{r7, lr}
 81200f2:	b084      	sub	sp, #16
 81200f4:	af00      	add	r7, sp, #0
 81200f6:	4603      	mov	r3, r0
 81200f8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 81200fa:	2001      	movs	r0, #1
 81200fc:	f7fd f9f6 	bl	811d4ec <memp_malloc>
 8120100:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8120102:	68fb      	ldr	r3, [r7, #12]
 8120104:	2b00      	cmp	r3, #0
 8120106:	d126      	bne.n	8120156 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8120108:	f7ff ffcc 	bl	81200a4 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 812010c:	f7ff ff9a 	bl	8120044 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8120110:	2001      	movs	r0, #1
 8120112:	f7fd f9eb 	bl	811d4ec <memp_malloc>
 8120116:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8120118:	68fb      	ldr	r3, [r7, #12]
 812011a:	2b00      	cmp	r3, #0
 812011c:	d11b      	bne.n	8120156 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 812011e:	2009      	movs	r0, #9
 8120120:	f7ff ff46 	bl	811ffb0 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8120124:	2001      	movs	r0, #1
 8120126:	f7fd f9e1 	bl	811d4ec <memp_malloc>
 812012a:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 812012c:	68fb      	ldr	r3, [r7, #12]
 812012e:	2b00      	cmp	r3, #0
 8120130:	d111      	bne.n	8120156 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8120132:	2008      	movs	r0, #8
 8120134:	f7ff ff3c 	bl	811ffb0 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8120138:	2001      	movs	r0, #1
 812013a:	f7fd f9d7 	bl	811d4ec <memp_malloc>
 812013e:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8120140:	68fb      	ldr	r3, [r7, #12]
 8120142:	2b00      	cmp	r3, #0
 8120144:	d107      	bne.n	8120156 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8120146:	79fb      	ldrb	r3, [r7, #7]
 8120148:	4618      	mov	r0, r3
 812014a:	f7ff fee3 	bl	811ff14 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 812014e:	2001      	movs	r0, #1
 8120150:	f7fd f9cc 	bl	811d4ec <memp_malloc>
 8120154:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8120156:	68fb      	ldr	r3, [r7, #12]
 8120158:	2b00      	cmp	r3, #0
 812015a:	d047      	beq.n	81201ec <tcp_alloc+0xfc>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 812015c:	22a4      	movs	r2, #164	@ 0xa4
 812015e:	2100      	movs	r1, #0
 8120160:	68f8      	ldr	r0, [r7, #12]
 8120162:	f006 fd9b 	bl	8126c9c <memset>
    pcb->prio = prio;
 8120166:	68fb      	ldr	r3, [r7, #12]
 8120168:	79fa      	ldrb	r2, [r7, #7]
 812016a:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 812016c:	68fb      	ldr	r3, [r7, #12]
 812016e:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 8120172:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8120176:	68fb      	ldr	r3, [r7, #12]
 8120178:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 812017c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 812017e:	68fb      	ldr	r3, [r7, #12]
 8120180:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 8120182:	68fb      	ldr	r3, [r7, #12]
 8120184:	851a      	strh	r2, [r3, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 8120186:	68fb      	ldr	r3, [r7, #12]
 8120188:	22ff      	movs	r2, #255	@ 0xff
 812018a:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 812018c:	68fb      	ldr	r3, [r7, #12]
 812018e:	f44f 7206 	mov.w	r2, #536	@ 0x218
 8120192:	865a      	strh	r2, [r3, #50]	@ 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8120194:	68fb      	ldr	r3, [r7, #12]
 8120196:	2296      	movs	r2, #150	@ 0x96
 8120198:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 812019c:	68fb      	ldr	r3, [r7, #12]
 812019e:	2296      	movs	r2, #150	@ 0x96
 81201a0:	87da      	strh	r2, [r3, #62]	@ 0x3e
    pcb->rtime = -1;
 81201a2:	68fb      	ldr	r3, [r7, #12]
 81201a4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 81201a8:	861a      	strh	r2, [r3, #48]	@ 0x30
    pcb->cwnd = 1;
 81201aa:	68fb      	ldr	r3, [r7, #12]
 81201ac:	2201      	movs	r2, #1
 81201ae:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->tmr = tcp_ticks;
 81201b2:	4b11      	ldr	r3, [pc, #68]	@ (81201f8 <tcp_alloc+0x108>)
 81201b4:	681a      	ldr	r2, [r3, #0]
 81201b6:	68fb      	ldr	r3, [r7, #12]
 81201b8:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 81201ba:	4b10      	ldr	r3, [pc, #64]	@ (81201fc <tcp_alloc+0x10c>)
 81201bc:	781a      	ldrb	r2, [r3, #0]
 81201be:	68fb      	ldr	r3, [r7, #12]
 81201c0:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 81201c2:	68fb      	ldr	r3, [r7, #12]
 81201c4:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 81201c8:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 81201cc:	68fb      	ldr	r3, [r7, #12]
 81201ce:	4a0c      	ldr	r2, [pc, #48]	@ (8120200 <tcp_alloc+0x110>)
 81201d0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 81201d4:	68fb      	ldr	r3, [r7, #12]
 81201d6:	4a0b      	ldr	r2, [pc, #44]	@ (8120204 <tcp_alloc+0x114>)
 81201d8:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
 81201dc:	68fb      	ldr	r3, [r7, #12]
 81201de:	4a0a      	ldr	r2, [pc, #40]	@ (8120208 <tcp_alloc+0x118>)
 81201e0:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
 81201e4:	68fb      	ldr	r3, [r7, #12]
 81201e6:	2209      	movs	r2, #9
 81201e8:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 81201ec:	68fb      	ldr	r3, [r7, #12]
}
 81201ee:	4618      	mov	r0, r3
 81201f0:	3710      	adds	r7, #16
 81201f2:	46bd      	mov	sp, r7
 81201f4:	bd80      	pop	{r7, pc}
 81201f6:	bf00      	nop
 81201f8:	1000e50c 	.word	0x1000e50c
 81201fc:	1000e522 	.word	0x1000e522
 8120200:	0811fea9 	.word	0x0811fea9
 8120204:	006ddd00 	.word	0x006ddd00
 8120208:	000124f8 	.word	0x000124f8

0812020c <tcp_new>:
 *
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new(void)
{
 812020c:	b580      	push	{r7, lr}
 812020e:	af00      	add	r7, sp, #0
  return tcp_alloc(TCP_PRIO_NORMAL);
 8120210:	2040      	movs	r0, #64	@ 0x40
 8120212:	f7ff ff6d 	bl	81200f0 <tcp_alloc>
 8120216:	4603      	mov	r3, r0
}
 8120218:	4618      	mov	r0, r3
 812021a:	bd80      	pop	{r7, pc}

0812021c <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 812021c:	b480      	push	{r7}
 812021e:	b083      	sub	sp, #12
 8120220:	af00      	add	r7, sp, #0
 8120222:	6078      	str	r0, [r7, #4]
 8120224:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 8120226:	687b      	ldr	r3, [r7, #4]
 8120228:	2b00      	cmp	r3, #0
 812022a:	d002      	beq.n	8120232 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 812022c:	687b      	ldr	r3, [r7, #4]
 812022e:	683a      	ldr	r2, [r7, #0]
 8120230:	611a      	str	r2, [r3, #16]
  }
}
 8120232:	bf00      	nop
 8120234:	370c      	adds	r7, #12
 8120236:	46bd      	mov	sp, r7
 8120238:	f85d 7b04 	ldr.w	r7, [sp], #4
 812023c:	4770      	bx	lr
	...

08120240 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 8120240:	b580      	push	{r7, lr}
 8120242:	b082      	sub	sp, #8
 8120244:	af00      	add	r7, sp, #0
 8120246:	6078      	str	r0, [r7, #4]
 8120248:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 812024a:	687b      	ldr	r3, [r7, #4]
 812024c:	2b00      	cmp	r3, #0
 812024e:	d00e      	beq.n	812026e <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 8120250:	687b      	ldr	r3, [r7, #4]
 8120252:	7d1b      	ldrb	r3, [r3, #20]
 8120254:	2b01      	cmp	r3, #1
 8120256:	d106      	bne.n	8120266 <tcp_recv+0x26>
 8120258:	4b07      	ldr	r3, [pc, #28]	@ (8120278 <tcp_recv+0x38>)
 812025a:	f240 72df 	movw	r2, #2015	@ 0x7df
 812025e:	4907      	ldr	r1, [pc, #28]	@ (812027c <tcp_recv+0x3c>)
 8120260:	4807      	ldr	r0, [pc, #28]	@ (8120280 <tcp_recv+0x40>)
 8120262:	f006 fc07 	bl	8126a74 <iprintf>
    pcb->recv = recv;
 8120266:	687b      	ldr	r3, [r7, #4]
 8120268:	683a      	ldr	r2, [r7, #0]
 812026a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }
}
 812026e:	bf00      	nop
 8120270:	3708      	adds	r7, #8
 8120272:	46bd      	mov	sp, r7
 8120274:	bd80      	pop	{r7, pc}
 8120276:	bf00      	nop
 8120278:	0812928c 	.word	0x0812928c
 812027c:	0812986c 	.word	0x0812986c
 8120280:	08129314 	.word	0x08129314

08120284 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 8120284:	b580      	push	{r7, lr}
 8120286:	b082      	sub	sp, #8
 8120288:	af00      	add	r7, sp, #0
 812028a:	6078      	str	r0, [r7, #4]
 812028c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 812028e:	687b      	ldr	r3, [r7, #4]
 8120290:	2b00      	cmp	r3, #0
 8120292:	d00e      	beq.n	81202b2 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 8120294:	687b      	ldr	r3, [r7, #4]
 8120296:	7d1b      	ldrb	r3, [r3, #20]
 8120298:	2b01      	cmp	r3, #1
 812029a:	d106      	bne.n	81202aa <tcp_err+0x26>
 812029c:	4b07      	ldr	r3, [pc, #28]	@ (81202bc <tcp_err+0x38>)
 812029e:	f640 020d 	movw	r2, #2061	@ 0x80d
 81202a2:	4907      	ldr	r1, [pc, #28]	@ (81202c0 <tcp_err+0x3c>)
 81202a4:	4807      	ldr	r0, [pc, #28]	@ (81202c4 <tcp_err+0x40>)
 81202a6:	f006 fbe5 	bl	8126a74 <iprintf>
    pcb->errf = err;
 81202aa:	687b      	ldr	r3, [r7, #4]
 81202ac:	683a      	ldr	r2, [r7, #0]
 81202ae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  }
}
 81202b2:	bf00      	nop
 81202b4:	3708      	adds	r7, #8
 81202b6:	46bd      	mov	sp, r7
 81202b8:	bd80      	pop	{r7, pc}
 81202ba:	bf00      	nop
 81202bc:	0812928c 	.word	0x0812928c
 81202c0:	081298bc 	.word	0x081298bc
 81202c4:	08129314 	.word	0x08129314

081202c8 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 81202c8:	b580      	push	{r7, lr}
 81202ca:	b082      	sub	sp, #8
 81202cc:	af00      	add	r7, sp, #0
 81202ce:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 81202d0:	687b      	ldr	r3, [r7, #4]
 81202d2:	2b00      	cmp	r3, #0
 81202d4:	d107      	bne.n	81202e6 <tcp_pcb_purge+0x1e>
 81202d6:	4b21      	ldr	r3, [pc, #132]	@ (812035c <tcp_pcb_purge+0x94>)
 81202d8:	f640 0251 	movw	r2, #2129	@ 0x851
 81202dc:	4920      	ldr	r1, [pc, #128]	@ (8120360 <tcp_pcb_purge+0x98>)
 81202de:	4821      	ldr	r0, [pc, #132]	@ (8120364 <tcp_pcb_purge+0x9c>)
 81202e0:	f006 fbc8 	bl	8126a74 <iprintf>
 81202e4:	e037      	b.n	8120356 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 81202e6:	687b      	ldr	r3, [r7, #4]
 81202e8:	7d1b      	ldrb	r3, [r3, #20]
 81202ea:	2b00      	cmp	r3, #0
 81202ec:	d033      	beq.n	8120356 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 81202ee:	687b      	ldr	r3, [r7, #4]
 81202f0:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 81202f2:	2b0a      	cmp	r3, #10
 81202f4:	d02f      	beq.n	8120356 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 81202f6:	687b      	ldr	r3, [r7, #4]
 81202f8:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 81202fa:	2b01      	cmp	r3, #1
 81202fc:	d02b      	beq.n	8120356 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 81202fe:	687b      	ldr	r3, [r7, #4]
 8120300:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8120302:	2b00      	cmp	r3, #0
 8120304:	d007      	beq.n	8120316 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8120306:	687b      	ldr	r3, [r7, #4]
 8120308:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 812030a:	4618      	mov	r0, r3
 812030c:	f7fe f806 	bl	811e31c <pbuf_free>
      pcb->refused_data = NULL;
 8120310:	687b      	ldr	r3, [r7, #4]
 8120312:	2200      	movs	r2, #0
 8120314:	679a      	str	r2, [r3, #120]	@ 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8120316:	687b      	ldr	r3, [r7, #4]
 8120318:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 812031a:	2b00      	cmp	r3, #0
 812031c:	d002      	beq.n	8120324 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 812031e:	6878      	ldr	r0, [r7, #4]
 8120320:	f000 f986 	bl	8120630 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8120324:	687b      	ldr	r3, [r7, #4]
 8120326:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 812032a:	861a      	strh	r2, [r3, #48]	@ 0x30

    tcp_segs_free(pcb->unsent);
 812032c:	687b      	ldr	r3, [r7, #4]
 812032e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8120330:	4618      	mov	r0, r3
 8120332:	f7ff fd5f 	bl	811fdf4 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8120336:	687b      	ldr	r3, [r7, #4]
 8120338:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 812033a:	4618      	mov	r0, r3
 812033c:	f7ff fd5a 	bl	811fdf4 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8120340:	687b      	ldr	r3, [r7, #4]
 8120342:	2200      	movs	r2, #0
 8120344:	66da      	str	r2, [r3, #108]	@ 0x6c
 8120346:	687b      	ldr	r3, [r7, #4]
 8120348:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 812034a:	687b      	ldr	r3, [r7, #4]
 812034c:	671a      	str	r2, [r3, #112]	@ 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 812034e:	687b      	ldr	r3, [r7, #4]
 8120350:	2200      	movs	r2, #0
 8120352:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8120356:	3708      	adds	r7, #8
 8120358:	46bd      	mov	sp, r7
 812035a:	bd80      	pop	{r7, pc}
 812035c:	0812928c 	.word	0x0812928c
 8120360:	0812991c 	.word	0x0812991c
 8120364:	08129314 	.word	0x08129314

08120368 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8120368:	b580      	push	{r7, lr}
 812036a:	b084      	sub	sp, #16
 812036c:	af00      	add	r7, sp, #0
 812036e:	6078      	str	r0, [r7, #4]
 8120370:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8120372:	683b      	ldr	r3, [r7, #0]
 8120374:	2b00      	cmp	r3, #0
 8120376:	d106      	bne.n	8120386 <tcp_pcb_remove+0x1e>
 8120378:	4b3e      	ldr	r3, [pc, #248]	@ (8120474 <tcp_pcb_remove+0x10c>)
 812037a:	f640 0283 	movw	r2, #2179	@ 0x883
 812037e:	493e      	ldr	r1, [pc, #248]	@ (8120478 <tcp_pcb_remove+0x110>)
 8120380:	483e      	ldr	r0, [pc, #248]	@ (812047c <tcp_pcb_remove+0x114>)
 8120382:	f006 fb77 	bl	8126a74 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8120386:	687b      	ldr	r3, [r7, #4]
 8120388:	2b00      	cmp	r3, #0
 812038a:	d106      	bne.n	812039a <tcp_pcb_remove+0x32>
 812038c:	4b39      	ldr	r3, [pc, #228]	@ (8120474 <tcp_pcb_remove+0x10c>)
 812038e:	f640 0284 	movw	r2, #2180	@ 0x884
 8120392:	493b      	ldr	r1, [pc, #236]	@ (8120480 <tcp_pcb_remove+0x118>)
 8120394:	4839      	ldr	r0, [pc, #228]	@ (812047c <tcp_pcb_remove+0x114>)
 8120396:	f006 fb6d 	bl	8126a74 <iprintf>

  TCP_RMV(pcblist, pcb);
 812039a:	687b      	ldr	r3, [r7, #4]
 812039c:	681b      	ldr	r3, [r3, #0]
 812039e:	683a      	ldr	r2, [r7, #0]
 81203a0:	429a      	cmp	r2, r3
 81203a2:	d105      	bne.n	81203b0 <tcp_pcb_remove+0x48>
 81203a4:	687b      	ldr	r3, [r7, #4]
 81203a6:	681b      	ldr	r3, [r3, #0]
 81203a8:	68da      	ldr	r2, [r3, #12]
 81203aa:	687b      	ldr	r3, [r7, #4]
 81203ac:	601a      	str	r2, [r3, #0]
 81203ae:	e013      	b.n	81203d8 <tcp_pcb_remove+0x70>
 81203b0:	687b      	ldr	r3, [r7, #4]
 81203b2:	681b      	ldr	r3, [r3, #0]
 81203b4:	60fb      	str	r3, [r7, #12]
 81203b6:	e00c      	b.n	81203d2 <tcp_pcb_remove+0x6a>
 81203b8:	68fb      	ldr	r3, [r7, #12]
 81203ba:	68db      	ldr	r3, [r3, #12]
 81203bc:	683a      	ldr	r2, [r7, #0]
 81203be:	429a      	cmp	r2, r3
 81203c0:	d104      	bne.n	81203cc <tcp_pcb_remove+0x64>
 81203c2:	683b      	ldr	r3, [r7, #0]
 81203c4:	68da      	ldr	r2, [r3, #12]
 81203c6:	68fb      	ldr	r3, [r7, #12]
 81203c8:	60da      	str	r2, [r3, #12]
 81203ca:	e005      	b.n	81203d8 <tcp_pcb_remove+0x70>
 81203cc:	68fb      	ldr	r3, [r7, #12]
 81203ce:	68db      	ldr	r3, [r3, #12]
 81203d0:	60fb      	str	r3, [r7, #12]
 81203d2:	68fb      	ldr	r3, [r7, #12]
 81203d4:	2b00      	cmp	r3, #0
 81203d6:	d1ef      	bne.n	81203b8 <tcp_pcb_remove+0x50>
 81203d8:	683b      	ldr	r3, [r7, #0]
 81203da:	2200      	movs	r2, #0
 81203dc:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 81203de:	6838      	ldr	r0, [r7, #0]
 81203e0:	f7ff ff72 	bl	81202c8 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 81203e4:	683b      	ldr	r3, [r7, #0]
 81203e6:	7d1b      	ldrb	r3, [r3, #20]
 81203e8:	2b0a      	cmp	r3, #10
 81203ea:	d013      	beq.n	8120414 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 81203ec:	683b      	ldr	r3, [r7, #0]
 81203ee:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 81203f0:	2b01      	cmp	r3, #1
 81203f2:	d00f      	beq.n	8120414 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 81203f4:	683b      	ldr	r3, [r7, #0]
 81203f6:	8b5b      	ldrh	r3, [r3, #26]
 81203f8:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 81203fc:	2b00      	cmp	r3, #0
 81203fe:	d009      	beq.n	8120414 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8120400:	683b      	ldr	r3, [r7, #0]
 8120402:	8b5b      	ldrh	r3, [r3, #26]
 8120404:	f043 0302 	orr.w	r3, r3, #2
 8120408:	b29a      	uxth	r2, r3
 812040a:	683b      	ldr	r3, [r7, #0]
 812040c:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 812040e:	6838      	ldr	r0, [r7, #0]
 8120410:	f003 fbc0 	bl	8123b94 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8120414:	683b      	ldr	r3, [r7, #0]
 8120416:	7d1b      	ldrb	r3, [r3, #20]
 8120418:	2b01      	cmp	r3, #1
 812041a:	d020      	beq.n	812045e <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 812041c:	683b      	ldr	r3, [r7, #0]
 812041e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8120420:	2b00      	cmp	r3, #0
 8120422:	d006      	beq.n	8120432 <tcp_pcb_remove+0xca>
 8120424:	4b13      	ldr	r3, [pc, #76]	@ (8120474 <tcp_pcb_remove+0x10c>)
 8120426:	f640 0293 	movw	r2, #2195	@ 0x893
 812042a:	4916      	ldr	r1, [pc, #88]	@ (8120484 <tcp_pcb_remove+0x11c>)
 812042c:	4813      	ldr	r0, [pc, #76]	@ (812047c <tcp_pcb_remove+0x114>)
 812042e:	f006 fb21 	bl	8126a74 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8120432:	683b      	ldr	r3, [r7, #0]
 8120434:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8120436:	2b00      	cmp	r3, #0
 8120438:	d006      	beq.n	8120448 <tcp_pcb_remove+0xe0>
 812043a:	4b0e      	ldr	r3, [pc, #56]	@ (8120474 <tcp_pcb_remove+0x10c>)
 812043c:	f640 0294 	movw	r2, #2196	@ 0x894
 8120440:	4911      	ldr	r1, [pc, #68]	@ (8120488 <tcp_pcb_remove+0x120>)
 8120442:	480e      	ldr	r0, [pc, #56]	@ (812047c <tcp_pcb_remove+0x114>)
 8120444:	f006 fb16 	bl	8126a74 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8120448:	683b      	ldr	r3, [r7, #0]
 812044a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 812044c:	2b00      	cmp	r3, #0
 812044e:	d006      	beq.n	812045e <tcp_pcb_remove+0xf6>
 8120450:	4b08      	ldr	r3, [pc, #32]	@ (8120474 <tcp_pcb_remove+0x10c>)
 8120452:	f640 0296 	movw	r2, #2198	@ 0x896
 8120456:	490d      	ldr	r1, [pc, #52]	@ (812048c <tcp_pcb_remove+0x124>)
 8120458:	4808      	ldr	r0, [pc, #32]	@ (812047c <tcp_pcb_remove+0x114>)
 812045a:	f006 fb0b 	bl	8126a74 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 812045e:	683b      	ldr	r3, [r7, #0]
 8120460:	2200      	movs	r2, #0
 8120462:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8120464:	683b      	ldr	r3, [r7, #0]
 8120466:	2200      	movs	r2, #0
 8120468:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 812046a:	bf00      	nop
 812046c:	3710      	adds	r7, #16
 812046e:	46bd      	mov	sp, r7
 8120470:	bd80      	pop	{r7, pc}
 8120472:	bf00      	nop
 8120474:	0812928c 	.word	0x0812928c
 8120478:	08129938 	.word	0x08129938
 812047c:	08129314 	.word	0x08129314
 8120480:	08129954 	.word	0x08129954
 8120484:	08129974 	.word	0x08129974
 8120488:	0812998c 	.word	0x0812998c
 812048c:	081299a8 	.word	0x081299a8

08120490 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8120490:	b580      	push	{r7, lr}
 8120492:	b082      	sub	sp, #8
 8120494:	af00      	add	r7, sp, #0
 8120496:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8120498:	687b      	ldr	r3, [r7, #4]
 812049a:	2b00      	cmp	r3, #0
 812049c:	d106      	bne.n	81204ac <tcp_next_iss+0x1c>
 812049e:	4b0a      	ldr	r3, [pc, #40]	@ (81204c8 <tcp_next_iss+0x38>)
 81204a0:	f640 02af 	movw	r2, #2223	@ 0x8af
 81204a4:	4909      	ldr	r1, [pc, #36]	@ (81204cc <tcp_next_iss+0x3c>)
 81204a6:	480a      	ldr	r0, [pc, #40]	@ (81204d0 <tcp_next_iss+0x40>)
 81204a8:	f006 fae4 	bl	8126a74 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 81204ac:	4b09      	ldr	r3, [pc, #36]	@ (81204d4 <tcp_next_iss+0x44>)
 81204ae:	681a      	ldr	r2, [r3, #0]
 81204b0:	4b09      	ldr	r3, [pc, #36]	@ (81204d8 <tcp_next_iss+0x48>)
 81204b2:	681b      	ldr	r3, [r3, #0]
 81204b4:	4413      	add	r3, r2
 81204b6:	4a07      	ldr	r2, [pc, #28]	@ (81204d4 <tcp_next_iss+0x44>)
 81204b8:	6013      	str	r3, [r2, #0]
  return iss;
 81204ba:	4b06      	ldr	r3, [pc, #24]	@ (81204d4 <tcp_next_iss+0x44>)
 81204bc:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 81204be:	4618      	mov	r0, r3
 81204c0:	3708      	adds	r7, #8
 81204c2:	46bd      	mov	sp, r7
 81204c4:	bd80      	pop	{r7, pc}
 81204c6:	bf00      	nop
 81204c8:	0812928c 	.word	0x0812928c
 81204cc:	081299c0 	.word	0x081299c0
 81204d0:	08129314 	.word	0x08129314
 81204d4:	1000002c 	.word	0x1000002c
 81204d8:	1000e50c 	.word	0x1000e50c

081204dc <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 81204dc:	b580      	push	{r7, lr}
 81204de:	b086      	sub	sp, #24
 81204e0:	af00      	add	r7, sp, #0
 81204e2:	4603      	mov	r3, r0
 81204e4:	60b9      	str	r1, [r7, #8]
 81204e6:	607a      	str	r2, [r7, #4]
 81204e8:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 81204ea:	687b      	ldr	r3, [r7, #4]
 81204ec:	2b00      	cmp	r3, #0
 81204ee:	d106      	bne.n	81204fe <tcp_eff_send_mss_netif+0x22>
 81204f0:	4b14      	ldr	r3, [pc, #80]	@ (8120544 <tcp_eff_send_mss_netif+0x68>)
 81204f2:	f640 02c5 	movw	r2, #2245	@ 0x8c5
 81204f6:	4914      	ldr	r1, [pc, #80]	@ (8120548 <tcp_eff_send_mss_netif+0x6c>)
 81204f8:	4814      	ldr	r0, [pc, #80]	@ (812054c <tcp_eff_send_mss_netif+0x70>)
 81204fa:	f006 fabb 	bl	8126a74 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 81204fe:	68bb      	ldr	r3, [r7, #8]
 8120500:	2b00      	cmp	r3, #0
 8120502:	d101      	bne.n	8120508 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8120504:	89fb      	ldrh	r3, [r7, #14]
 8120506:	e019      	b.n	812053c <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8120508:	68bb      	ldr	r3, [r7, #8]
 812050a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 812050c:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 812050e:	8afb      	ldrh	r3, [r7, #22]
 8120510:	2b00      	cmp	r3, #0
 8120512:	d012      	beq.n	812053a <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8120514:	2328      	movs	r3, #40	@ 0x28
 8120516:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8120518:	8afa      	ldrh	r2, [r7, #22]
 812051a:	8abb      	ldrh	r3, [r7, #20]
 812051c:	429a      	cmp	r2, r3
 812051e:	d904      	bls.n	812052a <tcp_eff_send_mss_netif+0x4e>
 8120520:	8afa      	ldrh	r2, [r7, #22]
 8120522:	8abb      	ldrh	r3, [r7, #20]
 8120524:	1ad3      	subs	r3, r2, r3
 8120526:	b29b      	uxth	r3, r3
 8120528:	e000      	b.n	812052c <tcp_eff_send_mss_netif+0x50>
 812052a:	2300      	movs	r3, #0
 812052c:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 812052e:	8a7a      	ldrh	r2, [r7, #18]
 8120530:	89fb      	ldrh	r3, [r7, #14]
 8120532:	4293      	cmp	r3, r2
 8120534:	bf28      	it	cs
 8120536:	4613      	movcs	r3, r2
 8120538:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 812053a:	89fb      	ldrh	r3, [r7, #14]
}
 812053c:	4618      	mov	r0, r3
 812053e:	3718      	adds	r7, #24
 8120540:	46bd      	mov	sp, r7
 8120542:	bd80      	pop	{r7, pc}
 8120544:	0812928c 	.word	0x0812928c
 8120548:	081299dc 	.word	0x081299dc
 812054c:	08129314 	.word	0x08129314

08120550 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8120550:	b580      	push	{r7, lr}
 8120552:	b084      	sub	sp, #16
 8120554:	af00      	add	r7, sp, #0
 8120556:	6078      	str	r0, [r7, #4]
 8120558:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 812055a:	683b      	ldr	r3, [r7, #0]
 812055c:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 812055e:	687b      	ldr	r3, [r7, #4]
 8120560:	2b00      	cmp	r3, #0
 8120562:	d119      	bne.n	8120598 <tcp_netif_ip_addr_changed_pcblist+0x48>
 8120564:	4b10      	ldr	r3, [pc, #64]	@ (81205a8 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 8120566:	f44f 6210 	mov.w	r2, #2304	@ 0x900
 812056a:	4910      	ldr	r1, [pc, #64]	@ (81205ac <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 812056c:	4810      	ldr	r0, [pc, #64]	@ (81205b0 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 812056e:	f006 fa81 	bl	8126a74 <iprintf>

  while (pcb != NULL) {
 8120572:	e011      	b.n	8120598 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8120574:	68fb      	ldr	r3, [r7, #12]
 8120576:	681a      	ldr	r2, [r3, #0]
 8120578:	687b      	ldr	r3, [r7, #4]
 812057a:	681b      	ldr	r3, [r3, #0]
 812057c:	429a      	cmp	r2, r3
 812057e:	d108      	bne.n	8120592 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8120580:	68fb      	ldr	r3, [r7, #12]
 8120582:	68db      	ldr	r3, [r3, #12]
 8120584:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8120586:	68f8      	ldr	r0, [r7, #12]
 8120588:	f7fe fd5e 	bl	811f048 <tcp_abort>
      pcb = next;
 812058c:	68bb      	ldr	r3, [r7, #8]
 812058e:	60fb      	str	r3, [r7, #12]
 8120590:	e002      	b.n	8120598 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 8120592:	68fb      	ldr	r3, [r7, #12]
 8120594:	68db      	ldr	r3, [r3, #12]
 8120596:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8120598:	68fb      	ldr	r3, [r7, #12]
 812059a:	2b00      	cmp	r3, #0
 812059c:	d1ea      	bne.n	8120574 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 812059e:	bf00      	nop
 81205a0:	bf00      	nop
 81205a2:	3710      	adds	r7, #16
 81205a4:	46bd      	mov	sp, r7
 81205a6:	bd80      	pop	{r7, pc}
 81205a8:	0812928c 	.word	0x0812928c
 81205ac:	08129a04 	.word	0x08129a04
 81205b0:	08129314 	.word	0x08129314

081205b4 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 81205b4:	b580      	push	{r7, lr}
 81205b6:	b084      	sub	sp, #16
 81205b8:	af00      	add	r7, sp, #0
 81205ba:	6078      	str	r0, [r7, #4]
 81205bc:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 81205be:	687b      	ldr	r3, [r7, #4]
 81205c0:	2b00      	cmp	r3, #0
 81205c2:	d02a      	beq.n	812061a <tcp_netif_ip_addr_changed+0x66>
 81205c4:	687b      	ldr	r3, [r7, #4]
 81205c6:	681b      	ldr	r3, [r3, #0]
 81205c8:	2b00      	cmp	r3, #0
 81205ca:	d026      	beq.n	812061a <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 81205cc:	4b15      	ldr	r3, [pc, #84]	@ (8120624 <tcp_netif_ip_addr_changed+0x70>)
 81205ce:	681b      	ldr	r3, [r3, #0]
 81205d0:	4619      	mov	r1, r3
 81205d2:	6878      	ldr	r0, [r7, #4]
 81205d4:	f7ff ffbc 	bl	8120550 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 81205d8:	4b13      	ldr	r3, [pc, #76]	@ (8120628 <tcp_netif_ip_addr_changed+0x74>)
 81205da:	681b      	ldr	r3, [r3, #0]
 81205dc:	4619      	mov	r1, r3
 81205de:	6878      	ldr	r0, [r7, #4]
 81205e0:	f7ff ffb6 	bl	8120550 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 81205e4:	683b      	ldr	r3, [r7, #0]
 81205e6:	2b00      	cmp	r3, #0
 81205e8:	d017      	beq.n	812061a <tcp_netif_ip_addr_changed+0x66>
 81205ea:	683b      	ldr	r3, [r7, #0]
 81205ec:	681b      	ldr	r3, [r3, #0]
 81205ee:	2b00      	cmp	r3, #0
 81205f0:	d013      	beq.n	812061a <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 81205f2:	4b0e      	ldr	r3, [pc, #56]	@ (812062c <tcp_netif_ip_addr_changed+0x78>)
 81205f4:	681b      	ldr	r3, [r3, #0]
 81205f6:	60fb      	str	r3, [r7, #12]
 81205f8:	e00c      	b.n	8120614 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 81205fa:	68fb      	ldr	r3, [r7, #12]
 81205fc:	681a      	ldr	r2, [r3, #0]
 81205fe:	687b      	ldr	r3, [r7, #4]
 8120600:	681b      	ldr	r3, [r3, #0]
 8120602:	429a      	cmp	r2, r3
 8120604:	d103      	bne.n	812060e <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8120606:	683b      	ldr	r3, [r7, #0]
 8120608:	681a      	ldr	r2, [r3, #0]
 812060a:	68fb      	ldr	r3, [r7, #12]
 812060c:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 812060e:	68fb      	ldr	r3, [r7, #12]
 8120610:	68db      	ldr	r3, [r3, #12]
 8120612:	60fb      	str	r3, [r7, #12]
 8120614:	68fb      	ldr	r3, [r7, #12]
 8120616:	2b00      	cmp	r3, #0
 8120618:	d1ef      	bne.n	81205fa <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 812061a:	bf00      	nop
 812061c:	3710      	adds	r7, #16
 812061e:	46bd      	mov	sp, r7
 8120620:	bd80      	pop	{r7, pc}
 8120622:	bf00      	nop
 8120624:	1000e518 	.word	0x1000e518
 8120628:	1000e510 	.word	0x1000e510
 812062c:	1000e514 	.word	0x1000e514

08120630 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8120630:	b580      	push	{r7, lr}
 8120632:	b082      	sub	sp, #8
 8120634:	af00      	add	r7, sp, #0
 8120636:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8120638:	687b      	ldr	r3, [r7, #4]
 812063a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 812063c:	2b00      	cmp	r3, #0
 812063e:	d007      	beq.n	8120650 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8120640:	687b      	ldr	r3, [r7, #4]
 8120642:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8120644:	4618      	mov	r0, r3
 8120646:	f7ff fbd5 	bl	811fdf4 <tcp_segs_free>
    pcb->ooseq = NULL;
 812064a:	687b      	ldr	r3, [r7, #4]
 812064c:	2200      	movs	r2, #0
 812064e:	675a      	str	r2, [r3, #116]	@ 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8120650:	bf00      	nop
 8120652:	3708      	adds	r7, #8
 8120654:	46bd      	mov	sp, r7
 8120656:	bd80      	pop	{r7, pc}

08120658 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8120658:	b590      	push	{r4, r7, lr}
 812065a:	b08d      	sub	sp, #52	@ 0x34
 812065c:	af04      	add	r7, sp, #16
 812065e:	6078      	str	r0, [r7, #4]
 8120660:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8120662:	687b      	ldr	r3, [r7, #4]
 8120664:	2b00      	cmp	r3, #0
 8120666:	d105      	bne.n	8120674 <tcp_input+0x1c>
 8120668:	4b9b      	ldr	r3, [pc, #620]	@ (81208d8 <tcp_input+0x280>)
 812066a:	2283      	movs	r2, #131	@ 0x83
 812066c:	499b      	ldr	r1, [pc, #620]	@ (81208dc <tcp_input+0x284>)
 812066e:	489c      	ldr	r0, [pc, #624]	@ (81208e0 <tcp_input+0x288>)
 8120670:	f006 fa00 	bl	8126a74 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8120674:	687b      	ldr	r3, [r7, #4]
 8120676:	685b      	ldr	r3, [r3, #4]
 8120678:	4a9a      	ldr	r2, [pc, #616]	@ (81208e4 <tcp_input+0x28c>)
 812067a:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 812067c:	687b      	ldr	r3, [r7, #4]
 812067e:	895b      	ldrh	r3, [r3, #10]
 8120680:	2b13      	cmp	r3, #19
 8120682:	f240 83d1 	bls.w	8120e28 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8120686:	4b98      	ldr	r3, [pc, #608]	@ (81208e8 <tcp_input+0x290>)
 8120688:	695b      	ldr	r3, [r3, #20]
 812068a:	4a97      	ldr	r2, [pc, #604]	@ (81208e8 <tcp_input+0x290>)
 812068c:	6812      	ldr	r2, [r2, #0]
 812068e:	4611      	mov	r1, r2
 8120690:	4618      	mov	r0, r3
 8120692:	f7fb fa73 	bl	811bb7c <ip4_addr_isbroadcast_u32>
 8120696:	4603      	mov	r3, r0
 8120698:	2b00      	cmp	r3, #0
 812069a:	f040 83c7 	bne.w	8120e2c <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 812069e:	4b92      	ldr	r3, [pc, #584]	@ (81208e8 <tcp_input+0x290>)
 81206a0:	695b      	ldr	r3, [r3, #20]
 81206a2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 81206a6:	2be0      	cmp	r3, #224	@ 0xe0
 81206a8:	f000 83c0 	beq.w	8120e2c <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 81206ac:	4b8d      	ldr	r3, [pc, #564]	@ (81208e4 <tcp_input+0x28c>)
 81206ae:	681b      	ldr	r3, [r3, #0]
 81206b0:	899b      	ldrh	r3, [r3, #12]
 81206b2:	b29b      	uxth	r3, r3
 81206b4:	4618      	mov	r0, r3
 81206b6:	f7f9 fc29 	bl	8119f0c <lwip_htons>
 81206ba:	4603      	mov	r3, r0
 81206bc:	0b1b      	lsrs	r3, r3, #12
 81206be:	b29b      	uxth	r3, r3
 81206c0:	b2db      	uxtb	r3, r3
 81206c2:	009b      	lsls	r3, r3, #2
 81206c4:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 81206c6:	7cbb      	ldrb	r3, [r7, #18]
 81206c8:	2b13      	cmp	r3, #19
 81206ca:	f240 83b1 	bls.w	8120e30 <tcp_input+0x7d8>
 81206ce:	7cbb      	ldrb	r3, [r7, #18]
 81206d0:	b29a      	uxth	r2, r3
 81206d2:	687b      	ldr	r3, [r7, #4]
 81206d4:	891b      	ldrh	r3, [r3, #8]
 81206d6:	429a      	cmp	r2, r3
 81206d8:	f200 83aa 	bhi.w	8120e30 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 81206dc:	7cbb      	ldrb	r3, [r7, #18]
 81206de:	b29b      	uxth	r3, r3
 81206e0:	3b14      	subs	r3, #20
 81206e2:	b29a      	uxth	r2, r3
 81206e4:	4b81      	ldr	r3, [pc, #516]	@ (81208ec <tcp_input+0x294>)
 81206e6:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 81206e8:	4b81      	ldr	r3, [pc, #516]	@ (81208f0 <tcp_input+0x298>)
 81206ea:	2200      	movs	r2, #0
 81206ec:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 81206ee:	687b      	ldr	r3, [r7, #4]
 81206f0:	895a      	ldrh	r2, [r3, #10]
 81206f2:	7cbb      	ldrb	r3, [r7, #18]
 81206f4:	b29b      	uxth	r3, r3
 81206f6:	429a      	cmp	r2, r3
 81206f8:	d309      	bcc.n	812070e <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 81206fa:	4b7c      	ldr	r3, [pc, #496]	@ (81208ec <tcp_input+0x294>)
 81206fc:	881a      	ldrh	r2, [r3, #0]
 81206fe:	4b7d      	ldr	r3, [pc, #500]	@ (81208f4 <tcp_input+0x29c>)
 8120700:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8120702:	7cbb      	ldrb	r3, [r7, #18]
 8120704:	4619      	mov	r1, r3
 8120706:	6878      	ldr	r0, [r7, #4]
 8120708:	f7fd fd82 	bl	811e210 <pbuf_remove_header>
 812070c:	e04e      	b.n	81207ac <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 812070e:	687b      	ldr	r3, [r7, #4]
 8120710:	681b      	ldr	r3, [r3, #0]
 8120712:	2b00      	cmp	r3, #0
 8120714:	d105      	bne.n	8120722 <tcp_input+0xca>
 8120716:	4b70      	ldr	r3, [pc, #448]	@ (81208d8 <tcp_input+0x280>)
 8120718:	22c2      	movs	r2, #194	@ 0xc2
 812071a:	4977      	ldr	r1, [pc, #476]	@ (81208f8 <tcp_input+0x2a0>)
 812071c:	4870      	ldr	r0, [pc, #448]	@ (81208e0 <tcp_input+0x288>)
 812071e:	f006 f9a9 	bl	8126a74 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8120722:	2114      	movs	r1, #20
 8120724:	6878      	ldr	r0, [r7, #4]
 8120726:	f7fd fd73 	bl	811e210 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 812072a:	687b      	ldr	r3, [r7, #4]
 812072c:	895a      	ldrh	r2, [r3, #10]
 812072e:	4b71      	ldr	r3, [pc, #452]	@ (81208f4 <tcp_input+0x29c>)
 8120730:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8120732:	4b6e      	ldr	r3, [pc, #440]	@ (81208ec <tcp_input+0x294>)
 8120734:	881a      	ldrh	r2, [r3, #0]
 8120736:	4b6f      	ldr	r3, [pc, #444]	@ (81208f4 <tcp_input+0x29c>)
 8120738:	881b      	ldrh	r3, [r3, #0]
 812073a:	1ad3      	subs	r3, r2, r3
 812073c:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 812073e:	4b6d      	ldr	r3, [pc, #436]	@ (81208f4 <tcp_input+0x29c>)
 8120740:	881b      	ldrh	r3, [r3, #0]
 8120742:	4619      	mov	r1, r3
 8120744:	6878      	ldr	r0, [r7, #4]
 8120746:	f7fd fd63 	bl	811e210 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 812074a:	687b      	ldr	r3, [r7, #4]
 812074c:	681b      	ldr	r3, [r3, #0]
 812074e:	895b      	ldrh	r3, [r3, #10]
 8120750:	8a3a      	ldrh	r2, [r7, #16]
 8120752:	429a      	cmp	r2, r3
 8120754:	f200 836e 	bhi.w	8120e34 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8120758:	687b      	ldr	r3, [r7, #4]
 812075a:	681b      	ldr	r3, [r3, #0]
 812075c:	685b      	ldr	r3, [r3, #4]
 812075e:	4a64      	ldr	r2, [pc, #400]	@ (81208f0 <tcp_input+0x298>)
 8120760:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8120762:	687b      	ldr	r3, [r7, #4]
 8120764:	681b      	ldr	r3, [r3, #0]
 8120766:	8a3a      	ldrh	r2, [r7, #16]
 8120768:	4611      	mov	r1, r2
 812076a:	4618      	mov	r0, r3
 812076c:	f7fd fd50 	bl	811e210 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8120770:	687b      	ldr	r3, [r7, #4]
 8120772:	891a      	ldrh	r2, [r3, #8]
 8120774:	8a3b      	ldrh	r3, [r7, #16]
 8120776:	1ad3      	subs	r3, r2, r3
 8120778:	b29a      	uxth	r2, r3
 812077a:	687b      	ldr	r3, [r7, #4]
 812077c:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 812077e:	687b      	ldr	r3, [r7, #4]
 8120780:	895b      	ldrh	r3, [r3, #10]
 8120782:	2b00      	cmp	r3, #0
 8120784:	d005      	beq.n	8120792 <tcp_input+0x13a>
 8120786:	4b54      	ldr	r3, [pc, #336]	@ (81208d8 <tcp_input+0x280>)
 8120788:	22df      	movs	r2, #223	@ 0xdf
 812078a:	495c      	ldr	r1, [pc, #368]	@ (81208fc <tcp_input+0x2a4>)
 812078c:	4854      	ldr	r0, [pc, #336]	@ (81208e0 <tcp_input+0x288>)
 812078e:	f006 f971 	bl	8126a74 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8120792:	687b      	ldr	r3, [r7, #4]
 8120794:	891a      	ldrh	r2, [r3, #8]
 8120796:	687b      	ldr	r3, [r7, #4]
 8120798:	681b      	ldr	r3, [r3, #0]
 812079a:	891b      	ldrh	r3, [r3, #8]
 812079c:	429a      	cmp	r2, r3
 812079e:	d005      	beq.n	81207ac <tcp_input+0x154>
 81207a0:	4b4d      	ldr	r3, [pc, #308]	@ (81208d8 <tcp_input+0x280>)
 81207a2:	22e0      	movs	r2, #224	@ 0xe0
 81207a4:	4956      	ldr	r1, [pc, #344]	@ (8120900 <tcp_input+0x2a8>)
 81207a6:	484e      	ldr	r0, [pc, #312]	@ (81208e0 <tcp_input+0x288>)
 81207a8:	f006 f964 	bl	8126a74 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 81207ac:	4b4d      	ldr	r3, [pc, #308]	@ (81208e4 <tcp_input+0x28c>)
 81207ae:	681b      	ldr	r3, [r3, #0]
 81207b0:	881b      	ldrh	r3, [r3, #0]
 81207b2:	b29b      	uxth	r3, r3
 81207b4:	4a4b      	ldr	r2, [pc, #300]	@ (81208e4 <tcp_input+0x28c>)
 81207b6:	6814      	ldr	r4, [r2, #0]
 81207b8:	4618      	mov	r0, r3
 81207ba:	f7f9 fba7 	bl	8119f0c <lwip_htons>
 81207be:	4603      	mov	r3, r0
 81207c0:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 81207c2:	4b48      	ldr	r3, [pc, #288]	@ (81208e4 <tcp_input+0x28c>)
 81207c4:	681b      	ldr	r3, [r3, #0]
 81207c6:	885b      	ldrh	r3, [r3, #2]
 81207c8:	b29b      	uxth	r3, r3
 81207ca:	4a46      	ldr	r2, [pc, #280]	@ (81208e4 <tcp_input+0x28c>)
 81207cc:	6814      	ldr	r4, [r2, #0]
 81207ce:	4618      	mov	r0, r3
 81207d0:	f7f9 fb9c 	bl	8119f0c <lwip_htons>
 81207d4:	4603      	mov	r3, r0
 81207d6:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 81207d8:	4b42      	ldr	r3, [pc, #264]	@ (81208e4 <tcp_input+0x28c>)
 81207da:	681b      	ldr	r3, [r3, #0]
 81207dc:	685b      	ldr	r3, [r3, #4]
 81207de:	4a41      	ldr	r2, [pc, #260]	@ (81208e4 <tcp_input+0x28c>)
 81207e0:	6814      	ldr	r4, [r2, #0]
 81207e2:	4618      	mov	r0, r3
 81207e4:	f7f9 fba7 	bl	8119f36 <lwip_htonl>
 81207e8:	4603      	mov	r3, r0
 81207ea:	6063      	str	r3, [r4, #4]
 81207ec:	6863      	ldr	r3, [r4, #4]
 81207ee:	4a45      	ldr	r2, [pc, #276]	@ (8120904 <tcp_input+0x2ac>)
 81207f0:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 81207f2:	4b3c      	ldr	r3, [pc, #240]	@ (81208e4 <tcp_input+0x28c>)
 81207f4:	681b      	ldr	r3, [r3, #0]
 81207f6:	689b      	ldr	r3, [r3, #8]
 81207f8:	4a3a      	ldr	r2, [pc, #232]	@ (81208e4 <tcp_input+0x28c>)
 81207fa:	6814      	ldr	r4, [r2, #0]
 81207fc:	4618      	mov	r0, r3
 81207fe:	f7f9 fb9a 	bl	8119f36 <lwip_htonl>
 8120802:	4603      	mov	r3, r0
 8120804:	60a3      	str	r3, [r4, #8]
 8120806:	68a3      	ldr	r3, [r4, #8]
 8120808:	4a3f      	ldr	r2, [pc, #252]	@ (8120908 <tcp_input+0x2b0>)
 812080a:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 812080c:	4b35      	ldr	r3, [pc, #212]	@ (81208e4 <tcp_input+0x28c>)
 812080e:	681b      	ldr	r3, [r3, #0]
 8120810:	89db      	ldrh	r3, [r3, #14]
 8120812:	b29b      	uxth	r3, r3
 8120814:	4a33      	ldr	r2, [pc, #204]	@ (81208e4 <tcp_input+0x28c>)
 8120816:	6814      	ldr	r4, [r2, #0]
 8120818:	4618      	mov	r0, r3
 812081a:	f7f9 fb77 	bl	8119f0c <lwip_htons>
 812081e:	4603      	mov	r3, r0
 8120820:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8120822:	4b30      	ldr	r3, [pc, #192]	@ (81208e4 <tcp_input+0x28c>)
 8120824:	681b      	ldr	r3, [r3, #0]
 8120826:	899b      	ldrh	r3, [r3, #12]
 8120828:	b29b      	uxth	r3, r3
 812082a:	4618      	mov	r0, r3
 812082c:	f7f9 fb6e 	bl	8119f0c <lwip_htons>
 8120830:	4603      	mov	r3, r0
 8120832:	b2db      	uxtb	r3, r3
 8120834:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8120838:	b2da      	uxtb	r2, r3
 812083a:	4b34      	ldr	r3, [pc, #208]	@ (812090c <tcp_input+0x2b4>)
 812083c:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 812083e:	687b      	ldr	r3, [r7, #4]
 8120840:	891a      	ldrh	r2, [r3, #8]
 8120842:	4b33      	ldr	r3, [pc, #204]	@ (8120910 <tcp_input+0x2b8>)
 8120844:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8120846:	4b31      	ldr	r3, [pc, #196]	@ (812090c <tcp_input+0x2b4>)
 8120848:	781b      	ldrb	r3, [r3, #0]
 812084a:	f003 0303 	and.w	r3, r3, #3
 812084e:	2b00      	cmp	r3, #0
 8120850:	d00c      	beq.n	812086c <tcp_input+0x214>
    tcplen++;
 8120852:	4b2f      	ldr	r3, [pc, #188]	@ (8120910 <tcp_input+0x2b8>)
 8120854:	881b      	ldrh	r3, [r3, #0]
 8120856:	3301      	adds	r3, #1
 8120858:	b29a      	uxth	r2, r3
 812085a:	4b2d      	ldr	r3, [pc, #180]	@ (8120910 <tcp_input+0x2b8>)
 812085c:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 812085e:	687b      	ldr	r3, [r7, #4]
 8120860:	891a      	ldrh	r2, [r3, #8]
 8120862:	4b2b      	ldr	r3, [pc, #172]	@ (8120910 <tcp_input+0x2b8>)
 8120864:	881b      	ldrh	r3, [r3, #0]
 8120866:	429a      	cmp	r2, r3
 8120868:	f200 82e6 	bhi.w	8120e38 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 812086c:	2300      	movs	r3, #0
 812086e:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8120870:	4b28      	ldr	r3, [pc, #160]	@ (8120914 <tcp_input+0x2bc>)
 8120872:	681b      	ldr	r3, [r3, #0]
 8120874:	61fb      	str	r3, [r7, #28]
 8120876:	e09d      	b.n	81209b4 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8120878:	69fb      	ldr	r3, [r7, #28]
 812087a:	7d1b      	ldrb	r3, [r3, #20]
 812087c:	2b00      	cmp	r3, #0
 812087e:	d105      	bne.n	812088c <tcp_input+0x234>
 8120880:	4b15      	ldr	r3, [pc, #84]	@ (81208d8 <tcp_input+0x280>)
 8120882:	22fb      	movs	r2, #251	@ 0xfb
 8120884:	4924      	ldr	r1, [pc, #144]	@ (8120918 <tcp_input+0x2c0>)
 8120886:	4816      	ldr	r0, [pc, #88]	@ (81208e0 <tcp_input+0x288>)
 8120888:	f006 f8f4 	bl	8126a74 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 812088c:	69fb      	ldr	r3, [r7, #28]
 812088e:	7d1b      	ldrb	r3, [r3, #20]
 8120890:	2b0a      	cmp	r3, #10
 8120892:	d105      	bne.n	81208a0 <tcp_input+0x248>
 8120894:	4b10      	ldr	r3, [pc, #64]	@ (81208d8 <tcp_input+0x280>)
 8120896:	22fc      	movs	r2, #252	@ 0xfc
 8120898:	4920      	ldr	r1, [pc, #128]	@ (812091c <tcp_input+0x2c4>)
 812089a:	4811      	ldr	r0, [pc, #68]	@ (81208e0 <tcp_input+0x288>)
 812089c:	f006 f8ea 	bl	8126a74 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 81208a0:	69fb      	ldr	r3, [r7, #28]
 81208a2:	7d1b      	ldrb	r3, [r3, #20]
 81208a4:	2b01      	cmp	r3, #1
 81208a6:	d105      	bne.n	81208b4 <tcp_input+0x25c>
 81208a8:	4b0b      	ldr	r3, [pc, #44]	@ (81208d8 <tcp_input+0x280>)
 81208aa:	22fd      	movs	r2, #253	@ 0xfd
 81208ac:	491c      	ldr	r1, [pc, #112]	@ (8120920 <tcp_input+0x2c8>)
 81208ae:	480c      	ldr	r0, [pc, #48]	@ (81208e0 <tcp_input+0x288>)
 81208b0:	f006 f8e0 	bl	8126a74 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 81208b4:	69fb      	ldr	r3, [r7, #28]
 81208b6:	7a1b      	ldrb	r3, [r3, #8]
 81208b8:	2b00      	cmp	r3, #0
 81208ba:	d033      	beq.n	8120924 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 81208bc:	69fb      	ldr	r3, [r7, #28]
 81208be:	7a1a      	ldrb	r2, [r3, #8]
 81208c0:	4b09      	ldr	r3, [pc, #36]	@ (81208e8 <tcp_input+0x290>)
 81208c2:	685b      	ldr	r3, [r3, #4]
 81208c4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 81208c8:	3301      	adds	r3, #1
 81208ca:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 81208cc:	429a      	cmp	r2, r3
 81208ce:	d029      	beq.n	8120924 <tcp_input+0x2cc>
      prev = pcb;
 81208d0:	69fb      	ldr	r3, [r7, #28]
 81208d2:	61bb      	str	r3, [r7, #24]
      continue;
 81208d4:	e06b      	b.n	81209ae <tcp_input+0x356>
 81208d6:	bf00      	nop
 81208d8:	08129a38 	.word	0x08129a38
 81208dc:	08129aac 	.word	0x08129aac
 81208e0:	08129ac4 	.word	0x08129ac4
 81208e4:	1000e534 	.word	0x1000e534
 81208e8:	1000b374 	.word	0x1000b374
 81208ec:	1000e538 	.word	0x1000e538
 81208f0:	1000e53c 	.word	0x1000e53c
 81208f4:	1000e53a 	.word	0x1000e53a
 81208f8:	08129aec 	.word	0x08129aec
 81208fc:	08129afc 	.word	0x08129afc
 8120900:	08129b08 	.word	0x08129b08
 8120904:	1000e544 	.word	0x1000e544
 8120908:	1000e548 	.word	0x1000e548
 812090c:	1000e550 	.word	0x1000e550
 8120910:	1000e54e 	.word	0x1000e54e
 8120914:	1000e518 	.word	0x1000e518
 8120918:	08129b28 	.word	0x08129b28
 812091c:	08129b50 	.word	0x08129b50
 8120920:	08129b7c 	.word	0x08129b7c
    }

    if (pcb->remote_port == tcphdr->src &&
 8120924:	69fb      	ldr	r3, [r7, #28]
 8120926:	8b1a      	ldrh	r2, [r3, #24]
 8120928:	4b72      	ldr	r3, [pc, #456]	@ (8120af4 <tcp_input+0x49c>)
 812092a:	681b      	ldr	r3, [r3, #0]
 812092c:	881b      	ldrh	r3, [r3, #0]
 812092e:	b29b      	uxth	r3, r3
 8120930:	429a      	cmp	r2, r3
 8120932:	d13a      	bne.n	81209aa <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8120934:	69fb      	ldr	r3, [r7, #28]
 8120936:	8ada      	ldrh	r2, [r3, #22]
 8120938:	4b6e      	ldr	r3, [pc, #440]	@ (8120af4 <tcp_input+0x49c>)
 812093a:	681b      	ldr	r3, [r3, #0]
 812093c:	885b      	ldrh	r3, [r3, #2]
 812093e:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8120940:	429a      	cmp	r2, r3
 8120942:	d132      	bne.n	81209aa <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8120944:	69fb      	ldr	r3, [r7, #28]
 8120946:	685a      	ldr	r2, [r3, #4]
 8120948:	4b6b      	ldr	r3, [pc, #428]	@ (8120af8 <tcp_input+0x4a0>)
 812094a:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 812094c:	429a      	cmp	r2, r3
 812094e:	d12c      	bne.n	81209aa <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8120950:	69fb      	ldr	r3, [r7, #28]
 8120952:	681a      	ldr	r2, [r3, #0]
 8120954:	4b68      	ldr	r3, [pc, #416]	@ (8120af8 <tcp_input+0x4a0>)
 8120956:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8120958:	429a      	cmp	r2, r3
 812095a:	d126      	bne.n	81209aa <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 812095c:	69fb      	ldr	r3, [r7, #28]
 812095e:	68db      	ldr	r3, [r3, #12]
 8120960:	69fa      	ldr	r2, [r7, #28]
 8120962:	429a      	cmp	r2, r3
 8120964:	d106      	bne.n	8120974 <tcp_input+0x31c>
 8120966:	4b65      	ldr	r3, [pc, #404]	@ (8120afc <tcp_input+0x4a4>)
 8120968:	f240 120d 	movw	r2, #269	@ 0x10d
 812096c:	4964      	ldr	r1, [pc, #400]	@ (8120b00 <tcp_input+0x4a8>)
 812096e:	4865      	ldr	r0, [pc, #404]	@ (8120b04 <tcp_input+0x4ac>)
 8120970:	f006 f880 	bl	8126a74 <iprintf>
      if (prev != NULL) {
 8120974:	69bb      	ldr	r3, [r7, #24]
 8120976:	2b00      	cmp	r3, #0
 8120978:	d00a      	beq.n	8120990 <tcp_input+0x338>
        prev->next = pcb->next;
 812097a:	69fb      	ldr	r3, [r7, #28]
 812097c:	68da      	ldr	r2, [r3, #12]
 812097e:	69bb      	ldr	r3, [r7, #24]
 8120980:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8120982:	4b61      	ldr	r3, [pc, #388]	@ (8120b08 <tcp_input+0x4b0>)
 8120984:	681a      	ldr	r2, [r3, #0]
 8120986:	69fb      	ldr	r3, [r7, #28]
 8120988:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 812098a:	4a5f      	ldr	r2, [pc, #380]	@ (8120b08 <tcp_input+0x4b0>)
 812098c:	69fb      	ldr	r3, [r7, #28]
 812098e:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8120990:	69fb      	ldr	r3, [r7, #28]
 8120992:	68db      	ldr	r3, [r3, #12]
 8120994:	69fa      	ldr	r2, [r7, #28]
 8120996:	429a      	cmp	r2, r3
 8120998:	d111      	bne.n	81209be <tcp_input+0x366>
 812099a:	4b58      	ldr	r3, [pc, #352]	@ (8120afc <tcp_input+0x4a4>)
 812099c:	f240 1215 	movw	r2, #277	@ 0x115
 81209a0:	495a      	ldr	r1, [pc, #360]	@ (8120b0c <tcp_input+0x4b4>)
 81209a2:	4858      	ldr	r0, [pc, #352]	@ (8120b04 <tcp_input+0x4ac>)
 81209a4:	f006 f866 	bl	8126a74 <iprintf>
      break;
 81209a8:	e009      	b.n	81209be <tcp_input+0x366>
    }
    prev = pcb;
 81209aa:	69fb      	ldr	r3, [r7, #28]
 81209ac:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 81209ae:	69fb      	ldr	r3, [r7, #28]
 81209b0:	68db      	ldr	r3, [r3, #12]
 81209b2:	61fb      	str	r3, [r7, #28]
 81209b4:	69fb      	ldr	r3, [r7, #28]
 81209b6:	2b00      	cmp	r3, #0
 81209b8:	f47f af5e 	bne.w	8120878 <tcp_input+0x220>
 81209bc:	e000      	b.n	81209c0 <tcp_input+0x368>
      break;
 81209be:	bf00      	nop
  }

  if (pcb == NULL) {
 81209c0:	69fb      	ldr	r3, [r7, #28]
 81209c2:	2b00      	cmp	r3, #0
 81209c4:	f040 80aa 	bne.w	8120b1c <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 81209c8:	4b51      	ldr	r3, [pc, #324]	@ (8120b10 <tcp_input+0x4b8>)
 81209ca:	681b      	ldr	r3, [r3, #0]
 81209cc:	61fb      	str	r3, [r7, #28]
 81209ce:	e03f      	b.n	8120a50 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 81209d0:	69fb      	ldr	r3, [r7, #28]
 81209d2:	7d1b      	ldrb	r3, [r3, #20]
 81209d4:	2b0a      	cmp	r3, #10
 81209d6:	d006      	beq.n	81209e6 <tcp_input+0x38e>
 81209d8:	4b48      	ldr	r3, [pc, #288]	@ (8120afc <tcp_input+0x4a4>)
 81209da:	f240 121f 	movw	r2, #287	@ 0x11f
 81209de:	494d      	ldr	r1, [pc, #308]	@ (8120b14 <tcp_input+0x4bc>)
 81209e0:	4848      	ldr	r0, [pc, #288]	@ (8120b04 <tcp_input+0x4ac>)
 81209e2:	f006 f847 	bl	8126a74 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 81209e6:	69fb      	ldr	r3, [r7, #28]
 81209e8:	7a1b      	ldrb	r3, [r3, #8]
 81209ea:	2b00      	cmp	r3, #0
 81209ec:	d009      	beq.n	8120a02 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 81209ee:	69fb      	ldr	r3, [r7, #28]
 81209f0:	7a1a      	ldrb	r2, [r3, #8]
 81209f2:	4b41      	ldr	r3, [pc, #260]	@ (8120af8 <tcp_input+0x4a0>)
 81209f4:	685b      	ldr	r3, [r3, #4]
 81209f6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 81209fa:	3301      	adds	r3, #1
 81209fc:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 81209fe:	429a      	cmp	r2, r3
 8120a00:	d122      	bne.n	8120a48 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8120a02:	69fb      	ldr	r3, [r7, #28]
 8120a04:	8b1a      	ldrh	r2, [r3, #24]
 8120a06:	4b3b      	ldr	r3, [pc, #236]	@ (8120af4 <tcp_input+0x49c>)
 8120a08:	681b      	ldr	r3, [r3, #0]
 8120a0a:	881b      	ldrh	r3, [r3, #0]
 8120a0c:	b29b      	uxth	r3, r3
 8120a0e:	429a      	cmp	r2, r3
 8120a10:	d11b      	bne.n	8120a4a <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8120a12:	69fb      	ldr	r3, [r7, #28]
 8120a14:	8ada      	ldrh	r2, [r3, #22]
 8120a16:	4b37      	ldr	r3, [pc, #220]	@ (8120af4 <tcp_input+0x49c>)
 8120a18:	681b      	ldr	r3, [r3, #0]
 8120a1a:	885b      	ldrh	r3, [r3, #2]
 8120a1c:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8120a1e:	429a      	cmp	r2, r3
 8120a20:	d113      	bne.n	8120a4a <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8120a22:	69fb      	ldr	r3, [r7, #28]
 8120a24:	685a      	ldr	r2, [r3, #4]
 8120a26:	4b34      	ldr	r3, [pc, #208]	@ (8120af8 <tcp_input+0x4a0>)
 8120a28:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8120a2a:	429a      	cmp	r2, r3
 8120a2c:	d10d      	bne.n	8120a4a <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8120a2e:	69fb      	ldr	r3, [r7, #28]
 8120a30:	681a      	ldr	r2, [r3, #0]
 8120a32:	4b31      	ldr	r3, [pc, #196]	@ (8120af8 <tcp_input+0x4a0>)
 8120a34:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8120a36:	429a      	cmp	r2, r3
 8120a38:	d107      	bne.n	8120a4a <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8120a3a:	69f8      	ldr	r0, [r7, #28]
 8120a3c:	f000 fb56 	bl	81210ec <tcp_timewait_input>
        }
        pbuf_free(p);
 8120a40:	6878      	ldr	r0, [r7, #4]
 8120a42:	f7fd fc6b 	bl	811e31c <pbuf_free>
        return;
 8120a46:	e1fd      	b.n	8120e44 <tcp_input+0x7ec>
        continue;
 8120a48:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8120a4a:	69fb      	ldr	r3, [r7, #28]
 8120a4c:	68db      	ldr	r3, [r3, #12]
 8120a4e:	61fb      	str	r3, [r7, #28]
 8120a50:	69fb      	ldr	r3, [r7, #28]
 8120a52:	2b00      	cmp	r3, #0
 8120a54:	d1bc      	bne.n	81209d0 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8120a56:	2300      	movs	r3, #0
 8120a58:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8120a5a:	4b2f      	ldr	r3, [pc, #188]	@ (8120b18 <tcp_input+0x4c0>)
 8120a5c:	681b      	ldr	r3, [r3, #0]
 8120a5e:	617b      	str	r3, [r7, #20]
 8120a60:	e02a      	b.n	8120ab8 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8120a62:	697b      	ldr	r3, [r7, #20]
 8120a64:	7a1b      	ldrb	r3, [r3, #8]
 8120a66:	2b00      	cmp	r3, #0
 8120a68:	d00c      	beq.n	8120a84 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8120a6a:	697b      	ldr	r3, [r7, #20]
 8120a6c:	7a1a      	ldrb	r2, [r3, #8]
 8120a6e:	4b22      	ldr	r3, [pc, #136]	@ (8120af8 <tcp_input+0x4a0>)
 8120a70:	685b      	ldr	r3, [r3, #4]
 8120a72:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8120a76:	3301      	adds	r3, #1
 8120a78:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8120a7a:	429a      	cmp	r2, r3
 8120a7c:	d002      	beq.n	8120a84 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 8120a7e:	697b      	ldr	r3, [r7, #20]
 8120a80:	61bb      	str	r3, [r7, #24]
        continue;
 8120a82:	e016      	b.n	8120ab2 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8120a84:	697b      	ldr	r3, [r7, #20]
 8120a86:	8ada      	ldrh	r2, [r3, #22]
 8120a88:	4b1a      	ldr	r3, [pc, #104]	@ (8120af4 <tcp_input+0x49c>)
 8120a8a:	681b      	ldr	r3, [r3, #0]
 8120a8c:	885b      	ldrh	r3, [r3, #2]
 8120a8e:	b29b      	uxth	r3, r3
 8120a90:	429a      	cmp	r2, r3
 8120a92:	d10c      	bne.n	8120aae <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8120a94:	697b      	ldr	r3, [r7, #20]
 8120a96:	681a      	ldr	r2, [r3, #0]
 8120a98:	4b17      	ldr	r3, [pc, #92]	@ (8120af8 <tcp_input+0x4a0>)
 8120a9a:	695b      	ldr	r3, [r3, #20]
 8120a9c:	429a      	cmp	r2, r3
 8120a9e:	d00f      	beq.n	8120ac0 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8120aa0:	697b      	ldr	r3, [r7, #20]
 8120aa2:	2b00      	cmp	r3, #0
 8120aa4:	d00d      	beq.n	8120ac2 <tcp_input+0x46a>
 8120aa6:	697b      	ldr	r3, [r7, #20]
 8120aa8:	681b      	ldr	r3, [r3, #0]
 8120aaa:	2b00      	cmp	r3, #0
 8120aac:	d009      	beq.n	8120ac2 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8120aae:	697b      	ldr	r3, [r7, #20]
 8120ab0:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8120ab2:	697b      	ldr	r3, [r7, #20]
 8120ab4:	68db      	ldr	r3, [r3, #12]
 8120ab6:	617b      	str	r3, [r7, #20]
 8120ab8:	697b      	ldr	r3, [r7, #20]
 8120aba:	2b00      	cmp	r3, #0
 8120abc:	d1d1      	bne.n	8120a62 <tcp_input+0x40a>
 8120abe:	e000      	b.n	8120ac2 <tcp_input+0x46a>
            break;
 8120ac0:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8120ac2:	697b      	ldr	r3, [r7, #20]
 8120ac4:	2b00      	cmp	r3, #0
 8120ac6:	d029      	beq.n	8120b1c <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8120ac8:	69bb      	ldr	r3, [r7, #24]
 8120aca:	2b00      	cmp	r3, #0
 8120acc:	d00a      	beq.n	8120ae4 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8120ace:	697b      	ldr	r3, [r7, #20]
 8120ad0:	68da      	ldr	r2, [r3, #12]
 8120ad2:	69bb      	ldr	r3, [r7, #24]
 8120ad4:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8120ad6:	4b10      	ldr	r3, [pc, #64]	@ (8120b18 <tcp_input+0x4c0>)
 8120ad8:	681a      	ldr	r2, [r3, #0]
 8120ada:	697b      	ldr	r3, [r7, #20]
 8120adc:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8120ade:	4a0e      	ldr	r2, [pc, #56]	@ (8120b18 <tcp_input+0x4c0>)
 8120ae0:	697b      	ldr	r3, [r7, #20]
 8120ae2:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8120ae4:	6978      	ldr	r0, [r7, #20]
 8120ae6:	f000 fa03 	bl	8120ef0 <tcp_listen_input>
      }
      pbuf_free(p);
 8120aea:	6878      	ldr	r0, [r7, #4]
 8120aec:	f7fd fc16 	bl	811e31c <pbuf_free>
      return;
 8120af0:	e1a8      	b.n	8120e44 <tcp_input+0x7ec>
 8120af2:	bf00      	nop
 8120af4:	1000e534 	.word	0x1000e534
 8120af8:	1000b374 	.word	0x1000b374
 8120afc:	08129a38 	.word	0x08129a38
 8120b00:	08129ba4 	.word	0x08129ba4
 8120b04:	08129ac4 	.word	0x08129ac4
 8120b08:	1000e518 	.word	0x1000e518
 8120b0c:	08129bd0 	.word	0x08129bd0
 8120b10:	1000e51c 	.word	0x1000e51c
 8120b14:	08129bfc 	.word	0x08129bfc
 8120b18:	1000e514 	.word	0x1000e514
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8120b1c:	69fb      	ldr	r3, [r7, #28]
 8120b1e:	2b00      	cmp	r3, #0
 8120b20:	f000 8158 	beq.w	8120dd4 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8120b24:	4b95      	ldr	r3, [pc, #596]	@ (8120d7c <tcp_input+0x724>)
 8120b26:	2200      	movs	r2, #0
 8120b28:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8120b2a:	687b      	ldr	r3, [r7, #4]
 8120b2c:	891a      	ldrh	r2, [r3, #8]
 8120b2e:	4b93      	ldr	r3, [pc, #588]	@ (8120d7c <tcp_input+0x724>)
 8120b30:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8120b32:	4a92      	ldr	r2, [pc, #584]	@ (8120d7c <tcp_input+0x724>)
 8120b34:	687b      	ldr	r3, [r7, #4]
 8120b36:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8120b38:	4b91      	ldr	r3, [pc, #580]	@ (8120d80 <tcp_input+0x728>)
 8120b3a:	681b      	ldr	r3, [r3, #0]
 8120b3c:	4a8f      	ldr	r2, [pc, #572]	@ (8120d7c <tcp_input+0x724>)
 8120b3e:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8120b40:	4b90      	ldr	r3, [pc, #576]	@ (8120d84 <tcp_input+0x72c>)
 8120b42:	2200      	movs	r2, #0
 8120b44:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8120b46:	4b90      	ldr	r3, [pc, #576]	@ (8120d88 <tcp_input+0x730>)
 8120b48:	2200      	movs	r2, #0
 8120b4a:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8120b4c:	4b8f      	ldr	r3, [pc, #572]	@ (8120d8c <tcp_input+0x734>)
 8120b4e:	2200      	movs	r2, #0
 8120b50:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8120b52:	4b8f      	ldr	r3, [pc, #572]	@ (8120d90 <tcp_input+0x738>)
 8120b54:	781b      	ldrb	r3, [r3, #0]
 8120b56:	f003 0308 	and.w	r3, r3, #8
 8120b5a:	2b00      	cmp	r3, #0
 8120b5c:	d006      	beq.n	8120b6c <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 8120b5e:	687b      	ldr	r3, [r7, #4]
 8120b60:	7b5b      	ldrb	r3, [r3, #13]
 8120b62:	f043 0301 	orr.w	r3, r3, #1
 8120b66:	b2da      	uxtb	r2, r3
 8120b68:	687b      	ldr	r3, [r7, #4]
 8120b6a:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8120b6c:	69fb      	ldr	r3, [r7, #28]
 8120b6e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8120b70:	2b00      	cmp	r3, #0
 8120b72:	d017      	beq.n	8120ba4 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8120b74:	69f8      	ldr	r0, [r7, #28]
 8120b76:	f7ff f8c1 	bl	811fcfc <tcp_process_refused_data>
 8120b7a:	4603      	mov	r3, r0
 8120b7c:	f113 0f0d 	cmn.w	r3, #13
 8120b80:	d007      	beq.n	8120b92 <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8120b82:	69fb      	ldr	r3, [r7, #28]
 8120b84:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8120b86:	2b00      	cmp	r3, #0
 8120b88:	d00c      	beq.n	8120ba4 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8120b8a:	4b82      	ldr	r3, [pc, #520]	@ (8120d94 <tcp_input+0x73c>)
 8120b8c:	881b      	ldrh	r3, [r3, #0]
 8120b8e:	2b00      	cmp	r3, #0
 8120b90:	d008      	beq.n	8120ba4 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8120b92:	69fb      	ldr	r3, [r7, #28]
 8120b94:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8120b96:	2b00      	cmp	r3, #0
 8120b98:	f040 80e3 	bne.w	8120d62 <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8120b9c:	69f8      	ldr	r0, [r7, #28]
 8120b9e:	f003 fdff 	bl	81247a0 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8120ba2:	e0de      	b.n	8120d62 <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 8120ba4:	4a7c      	ldr	r2, [pc, #496]	@ (8120d98 <tcp_input+0x740>)
 8120ba6:	69fb      	ldr	r3, [r7, #28]
 8120ba8:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8120baa:	69f8      	ldr	r0, [r7, #28]
 8120bac:	f000 fb18 	bl	81211e0 <tcp_process>
 8120bb0:	4603      	mov	r3, r0
 8120bb2:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8120bb4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8120bb8:	f113 0f0d 	cmn.w	r3, #13
 8120bbc:	f000 80d3 	beq.w	8120d66 <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 8120bc0:	4b71      	ldr	r3, [pc, #452]	@ (8120d88 <tcp_input+0x730>)
 8120bc2:	781b      	ldrb	r3, [r3, #0]
 8120bc4:	f003 0308 	and.w	r3, r3, #8
 8120bc8:	2b00      	cmp	r3, #0
 8120bca:	d015      	beq.n	8120bf8 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8120bcc:	69fb      	ldr	r3, [r7, #28]
 8120bce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8120bd2:	2b00      	cmp	r3, #0
 8120bd4:	d008      	beq.n	8120be8 <tcp_input+0x590>
 8120bd6:	69fb      	ldr	r3, [r7, #28]
 8120bd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8120bdc:	69fa      	ldr	r2, [r7, #28]
 8120bde:	6912      	ldr	r2, [r2, #16]
 8120be0:	f06f 010d 	mvn.w	r1, #13
 8120be4:	4610      	mov	r0, r2
 8120be6:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8120be8:	69f9      	ldr	r1, [r7, #28]
 8120bea:	486c      	ldr	r0, [pc, #432]	@ (8120d9c <tcp_input+0x744>)
 8120bec:	f7ff fbbc 	bl	8120368 <tcp_pcb_remove>
        tcp_free(pcb);
 8120bf0:	69f8      	ldr	r0, [r7, #28]
 8120bf2:	f7fd ff41 	bl	811ea78 <tcp_free>
 8120bf6:	e0da      	b.n	8120dae <tcp_input+0x756>
      } else {
        err = ERR_OK;
 8120bf8:	2300      	movs	r3, #0
 8120bfa:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8120bfc:	4b63      	ldr	r3, [pc, #396]	@ (8120d8c <tcp_input+0x734>)
 8120bfe:	881b      	ldrh	r3, [r3, #0]
 8120c00:	2b00      	cmp	r3, #0
 8120c02:	d01d      	beq.n	8120c40 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8120c04:	4b61      	ldr	r3, [pc, #388]	@ (8120d8c <tcp_input+0x734>)
 8120c06:	881b      	ldrh	r3, [r3, #0]
 8120c08:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8120c0a:	69fb      	ldr	r3, [r7, #28]
 8120c0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8120c10:	2b00      	cmp	r3, #0
 8120c12:	d00a      	beq.n	8120c2a <tcp_input+0x5d2>
 8120c14:	69fb      	ldr	r3, [r7, #28]
 8120c16:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8120c1a:	69fa      	ldr	r2, [r7, #28]
 8120c1c:	6910      	ldr	r0, [r2, #16]
 8120c1e:	89fa      	ldrh	r2, [r7, #14]
 8120c20:	69f9      	ldr	r1, [r7, #28]
 8120c22:	4798      	blx	r3
 8120c24:	4603      	mov	r3, r0
 8120c26:	74fb      	strb	r3, [r7, #19]
 8120c28:	e001      	b.n	8120c2e <tcp_input+0x5d6>
 8120c2a:	2300      	movs	r3, #0
 8120c2c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8120c2e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8120c32:	f113 0f0d 	cmn.w	r3, #13
 8120c36:	f000 8098 	beq.w	8120d6a <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 8120c3a:	4b54      	ldr	r3, [pc, #336]	@ (8120d8c <tcp_input+0x734>)
 8120c3c:	2200      	movs	r2, #0
 8120c3e:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8120c40:	69f8      	ldr	r0, [r7, #28]
 8120c42:	f000 f915 	bl	8120e70 <tcp_input_delayed_close>
 8120c46:	4603      	mov	r3, r0
 8120c48:	2b00      	cmp	r3, #0
 8120c4a:	f040 8090 	bne.w	8120d6e <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8120c4e:	4b4d      	ldr	r3, [pc, #308]	@ (8120d84 <tcp_input+0x72c>)
 8120c50:	681b      	ldr	r3, [r3, #0]
 8120c52:	2b00      	cmp	r3, #0
 8120c54:	d041      	beq.n	8120cda <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8120c56:	69fb      	ldr	r3, [r7, #28]
 8120c58:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8120c5a:	2b00      	cmp	r3, #0
 8120c5c:	d006      	beq.n	8120c6c <tcp_input+0x614>
 8120c5e:	4b50      	ldr	r3, [pc, #320]	@ (8120da0 <tcp_input+0x748>)
 8120c60:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 8120c64:	494f      	ldr	r1, [pc, #316]	@ (8120da4 <tcp_input+0x74c>)
 8120c66:	4850      	ldr	r0, [pc, #320]	@ (8120da8 <tcp_input+0x750>)
 8120c68:	f005 ff04 	bl	8126a74 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8120c6c:	69fb      	ldr	r3, [r7, #28]
 8120c6e:	8b5b      	ldrh	r3, [r3, #26]
 8120c70:	f003 0310 	and.w	r3, r3, #16
 8120c74:	2b00      	cmp	r3, #0
 8120c76:	d008      	beq.n	8120c8a <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8120c78:	4b42      	ldr	r3, [pc, #264]	@ (8120d84 <tcp_input+0x72c>)
 8120c7a:	681b      	ldr	r3, [r3, #0]
 8120c7c:	4618      	mov	r0, r3
 8120c7e:	f7fd fb4d 	bl	811e31c <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8120c82:	69f8      	ldr	r0, [r7, #28]
 8120c84:	f7fe f9e0 	bl	811f048 <tcp_abort>
            goto aborted;
 8120c88:	e091      	b.n	8120dae <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8120c8a:	69fb      	ldr	r3, [r7, #28]
 8120c8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8120c90:	2b00      	cmp	r3, #0
 8120c92:	d00c      	beq.n	8120cae <tcp_input+0x656>
 8120c94:	69fb      	ldr	r3, [r7, #28]
 8120c96:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8120c9a:	69fb      	ldr	r3, [r7, #28]
 8120c9c:	6918      	ldr	r0, [r3, #16]
 8120c9e:	4b39      	ldr	r3, [pc, #228]	@ (8120d84 <tcp_input+0x72c>)
 8120ca0:	681a      	ldr	r2, [r3, #0]
 8120ca2:	2300      	movs	r3, #0
 8120ca4:	69f9      	ldr	r1, [r7, #28]
 8120ca6:	47a0      	blx	r4
 8120ca8:	4603      	mov	r3, r0
 8120caa:	74fb      	strb	r3, [r7, #19]
 8120cac:	e008      	b.n	8120cc0 <tcp_input+0x668>
 8120cae:	4b35      	ldr	r3, [pc, #212]	@ (8120d84 <tcp_input+0x72c>)
 8120cb0:	681a      	ldr	r2, [r3, #0]
 8120cb2:	2300      	movs	r3, #0
 8120cb4:	69f9      	ldr	r1, [r7, #28]
 8120cb6:	2000      	movs	r0, #0
 8120cb8:	f7ff f8f6 	bl	811fea8 <tcp_recv_null>
 8120cbc:	4603      	mov	r3, r0
 8120cbe:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8120cc0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8120cc4:	f113 0f0d 	cmn.w	r3, #13
 8120cc8:	d053      	beq.n	8120d72 <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8120cca:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8120cce:	2b00      	cmp	r3, #0
 8120cd0:	d003      	beq.n	8120cda <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8120cd2:	4b2c      	ldr	r3, [pc, #176]	@ (8120d84 <tcp_input+0x72c>)
 8120cd4:	681a      	ldr	r2, [r3, #0]
 8120cd6:	69fb      	ldr	r3, [r7, #28]
 8120cd8:	679a      	str	r2, [r3, #120]	@ 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8120cda:	4b2b      	ldr	r3, [pc, #172]	@ (8120d88 <tcp_input+0x730>)
 8120cdc:	781b      	ldrb	r3, [r3, #0]
 8120cde:	f003 0320 	and.w	r3, r3, #32
 8120ce2:	2b00      	cmp	r3, #0
 8120ce4:	d030      	beq.n	8120d48 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 8120ce6:	69fb      	ldr	r3, [r7, #28]
 8120ce8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8120cea:	2b00      	cmp	r3, #0
 8120cec:	d009      	beq.n	8120d02 <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8120cee:	69fb      	ldr	r3, [r7, #28]
 8120cf0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8120cf2:	7b5a      	ldrb	r2, [r3, #13]
 8120cf4:	69fb      	ldr	r3, [r7, #28]
 8120cf6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8120cf8:	f042 0220 	orr.w	r2, r2, #32
 8120cfc:	b2d2      	uxtb	r2, r2
 8120cfe:	735a      	strb	r2, [r3, #13]
 8120d00:	e022      	b.n	8120d48 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8120d02:	69fb      	ldr	r3, [r7, #28]
 8120d04:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8120d06:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8120d0a:	d005      	beq.n	8120d18 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 8120d0c:	69fb      	ldr	r3, [r7, #28]
 8120d0e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8120d10:	3301      	adds	r3, #1
 8120d12:	b29a      	uxth	r2, r3
 8120d14:	69fb      	ldr	r3, [r7, #28]
 8120d16:	851a      	strh	r2, [r3, #40]	@ 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8120d18:	69fb      	ldr	r3, [r7, #28]
 8120d1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8120d1e:	2b00      	cmp	r3, #0
 8120d20:	d00b      	beq.n	8120d3a <tcp_input+0x6e2>
 8120d22:	69fb      	ldr	r3, [r7, #28]
 8120d24:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8120d28:	69fb      	ldr	r3, [r7, #28]
 8120d2a:	6918      	ldr	r0, [r3, #16]
 8120d2c:	2300      	movs	r3, #0
 8120d2e:	2200      	movs	r2, #0
 8120d30:	69f9      	ldr	r1, [r7, #28]
 8120d32:	47a0      	blx	r4
 8120d34:	4603      	mov	r3, r0
 8120d36:	74fb      	strb	r3, [r7, #19]
 8120d38:	e001      	b.n	8120d3e <tcp_input+0x6e6>
 8120d3a:	2300      	movs	r3, #0
 8120d3c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8120d3e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8120d42:	f113 0f0d 	cmn.w	r3, #13
 8120d46:	d016      	beq.n	8120d76 <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8120d48:	4b13      	ldr	r3, [pc, #76]	@ (8120d98 <tcp_input+0x740>)
 8120d4a:	2200      	movs	r2, #0
 8120d4c:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8120d4e:	69f8      	ldr	r0, [r7, #28]
 8120d50:	f000 f88e 	bl	8120e70 <tcp_input_delayed_close>
 8120d54:	4603      	mov	r3, r0
 8120d56:	2b00      	cmp	r3, #0
 8120d58:	d128      	bne.n	8120dac <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8120d5a:	69f8      	ldr	r0, [r7, #28]
 8120d5c:	f002 ff1a 	bl	8123b94 <tcp_output>
 8120d60:	e025      	b.n	8120dae <tcp_input+0x756>
        goto aborted;
 8120d62:	bf00      	nop
 8120d64:	e023      	b.n	8120dae <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8120d66:	bf00      	nop
 8120d68:	e021      	b.n	8120dae <tcp_input+0x756>
              goto aborted;
 8120d6a:	bf00      	nop
 8120d6c:	e01f      	b.n	8120dae <tcp_input+0x756>
          goto aborted;
 8120d6e:	bf00      	nop
 8120d70:	e01d      	b.n	8120dae <tcp_input+0x756>
            goto aborted;
 8120d72:	bf00      	nop
 8120d74:	e01b      	b.n	8120dae <tcp_input+0x756>
              goto aborted;
 8120d76:	bf00      	nop
 8120d78:	e019      	b.n	8120dae <tcp_input+0x756>
 8120d7a:	bf00      	nop
 8120d7c:	1000e524 	.word	0x1000e524
 8120d80:	1000e534 	.word	0x1000e534
 8120d84:	1000e554 	.word	0x1000e554
 8120d88:	1000e551 	.word	0x1000e551
 8120d8c:	1000e54c 	.word	0x1000e54c
 8120d90:	1000e550 	.word	0x1000e550
 8120d94:	1000e54e 	.word	0x1000e54e
 8120d98:	1000e558 	.word	0x1000e558
 8120d9c:	1000e518 	.word	0x1000e518
 8120da0:	08129a38 	.word	0x08129a38
 8120da4:	08129c2c 	.word	0x08129c2c
 8120da8:	08129ac4 	.word	0x08129ac4
          goto aborted;
 8120dac:	bf00      	nop
    tcp_input_pcb = NULL;
 8120dae:	4b27      	ldr	r3, [pc, #156]	@ (8120e4c <tcp_input+0x7f4>)
 8120db0:	2200      	movs	r2, #0
 8120db2:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8120db4:	4b26      	ldr	r3, [pc, #152]	@ (8120e50 <tcp_input+0x7f8>)
 8120db6:	2200      	movs	r2, #0
 8120db8:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8120dba:	4b26      	ldr	r3, [pc, #152]	@ (8120e54 <tcp_input+0x7fc>)
 8120dbc:	685b      	ldr	r3, [r3, #4]
 8120dbe:	2b00      	cmp	r3, #0
 8120dc0:	d03f      	beq.n	8120e42 <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 8120dc2:	4b24      	ldr	r3, [pc, #144]	@ (8120e54 <tcp_input+0x7fc>)
 8120dc4:	685b      	ldr	r3, [r3, #4]
 8120dc6:	4618      	mov	r0, r3
 8120dc8:	f7fd faa8 	bl	811e31c <pbuf_free>
      inseg.p = NULL;
 8120dcc:	4b21      	ldr	r3, [pc, #132]	@ (8120e54 <tcp_input+0x7fc>)
 8120dce:	2200      	movs	r2, #0
 8120dd0:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8120dd2:	e036      	b.n	8120e42 <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8120dd4:	4b20      	ldr	r3, [pc, #128]	@ (8120e58 <tcp_input+0x800>)
 8120dd6:	681b      	ldr	r3, [r3, #0]
 8120dd8:	899b      	ldrh	r3, [r3, #12]
 8120dda:	b29b      	uxth	r3, r3
 8120ddc:	4618      	mov	r0, r3
 8120dde:	f7f9 f895 	bl	8119f0c <lwip_htons>
 8120de2:	4603      	mov	r3, r0
 8120de4:	b2db      	uxtb	r3, r3
 8120de6:	f003 0304 	and.w	r3, r3, #4
 8120dea:	2b00      	cmp	r3, #0
 8120dec:	d118      	bne.n	8120e20 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8120dee:	4b1b      	ldr	r3, [pc, #108]	@ (8120e5c <tcp_input+0x804>)
 8120df0:	6819      	ldr	r1, [r3, #0]
 8120df2:	4b1b      	ldr	r3, [pc, #108]	@ (8120e60 <tcp_input+0x808>)
 8120df4:	881b      	ldrh	r3, [r3, #0]
 8120df6:	461a      	mov	r2, r3
 8120df8:	4b1a      	ldr	r3, [pc, #104]	@ (8120e64 <tcp_input+0x80c>)
 8120dfa:	681b      	ldr	r3, [r3, #0]
 8120dfc:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8120dfe:	4b16      	ldr	r3, [pc, #88]	@ (8120e58 <tcp_input+0x800>)
 8120e00:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8120e02:	885b      	ldrh	r3, [r3, #2]
 8120e04:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8120e06:	4a14      	ldr	r2, [pc, #80]	@ (8120e58 <tcp_input+0x800>)
 8120e08:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8120e0a:	8812      	ldrh	r2, [r2, #0]
 8120e0c:	b292      	uxth	r2, r2
 8120e0e:	9202      	str	r2, [sp, #8]
 8120e10:	9301      	str	r3, [sp, #4]
 8120e12:	4b15      	ldr	r3, [pc, #84]	@ (8120e68 <tcp_input+0x810>)
 8120e14:	9300      	str	r3, [sp, #0]
 8120e16:	4b15      	ldr	r3, [pc, #84]	@ (8120e6c <tcp_input+0x814>)
 8120e18:	4602      	mov	r2, r0
 8120e1a:	2000      	movs	r0, #0
 8120e1c:	f003 fc6e 	bl	81246fc <tcp_rst>
    pbuf_free(p);
 8120e20:	6878      	ldr	r0, [r7, #4]
 8120e22:	f7fd fa7b 	bl	811e31c <pbuf_free>
  return;
 8120e26:	e00c      	b.n	8120e42 <tcp_input+0x7ea>
    goto dropped;
 8120e28:	bf00      	nop
 8120e2a:	e006      	b.n	8120e3a <tcp_input+0x7e2>
    goto dropped;
 8120e2c:	bf00      	nop
 8120e2e:	e004      	b.n	8120e3a <tcp_input+0x7e2>
    goto dropped;
 8120e30:	bf00      	nop
 8120e32:	e002      	b.n	8120e3a <tcp_input+0x7e2>
      goto dropped;
 8120e34:	bf00      	nop
 8120e36:	e000      	b.n	8120e3a <tcp_input+0x7e2>
      goto dropped;
 8120e38:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8120e3a:	6878      	ldr	r0, [r7, #4]
 8120e3c:	f7fd fa6e 	bl	811e31c <pbuf_free>
 8120e40:	e000      	b.n	8120e44 <tcp_input+0x7ec>
  return;
 8120e42:	bf00      	nop
}
 8120e44:	3724      	adds	r7, #36	@ 0x24
 8120e46:	46bd      	mov	sp, r7
 8120e48:	bd90      	pop	{r4, r7, pc}
 8120e4a:	bf00      	nop
 8120e4c:	1000e558 	.word	0x1000e558
 8120e50:	1000e554 	.word	0x1000e554
 8120e54:	1000e524 	.word	0x1000e524
 8120e58:	1000e534 	.word	0x1000e534
 8120e5c:	1000e548 	.word	0x1000e548
 8120e60:	1000e54e 	.word	0x1000e54e
 8120e64:	1000e544 	.word	0x1000e544
 8120e68:	1000b384 	.word	0x1000b384
 8120e6c:	1000b388 	.word	0x1000b388

08120e70 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8120e70:	b580      	push	{r7, lr}
 8120e72:	b082      	sub	sp, #8
 8120e74:	af00      	add	r7, sp, #0
 8120e76:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8120e78:	687b      	ldr	r3, [r7, #4]
 8120e7a:	2b00      	cmp	r3, #0
 8120e7c:	d106      	bne.n	8120e8c <tcp_input_delayed_close+0x1c>
 8120e7e:	4b17      	ldr	r3, [pc, #92]	@ (8120edc <tcp_input_delayed_close+0x6c>)
 8120e80:	f240 225a 	movw	r2, #602	@ 0x25a
 8120e84:	4916      	ldr	r1, [pc, #88]	@ (8120ee0 <tcp_input_delayed_close+0x70>)
 8120e86:	4817      	ldr	r0, [pc, #92]	@ (8120ee4 <tcp_input_delayed_close+0x74>)
 8120e88:	f005 fdf4 	bl	8126a74 <iprintf>

  if (recv_flags & TF_CLOSED) {
 8120e8c:	4b16      	ldr	r3, [pc, #88]	@ (8120ee8 <tcp_input_delayed_close+0x78>)
 8120e8e:	781b      	ldrb	r3, [r3, #0]
 8120e90:	f003 0310 	and.w	r3, r3, #16
 8120e94:	2b00      	cmp	r3, #0
 8120e96:	d01c      	beq.n	8120ed2 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8120e98:	687b      	ldr	r3, [r7, #4]
 8120e9a:	8b5b      	ldrh	r3, [r3, #26]
 8120e9c:	f003 0310 	and.w	r3, r3, #16
 8120ea0:	2b00      	cmp	r3, #0
 8120ea2:	d10d      	bne.n	8120ec0 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8120ea4:	687b      	ldr	r3, [r7, #4]
 8120ea6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8120eaa:	2b00      	cmp	r3, #0
 8120eac:	d008      	beq.n	8120ec0 <tcp_input_delayed_close+0x50>
 8120eae:	687b      	ldr	r3, [r7, #4]
 8120eb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8120eb4:	687a      	ldr	r2, [r7, #4]
 8120eb6:	6912      	ldr	r2, [r2, #16]
 8120eb8:	f06f 010e 	mvn.w	r1, #14
 8120ebc:	4610      	mov	r0, r2
 8120ebe:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8120ec0:	6879      	ldr	r1, [r7, #4]
 8120ec2:	480a      	ldr	r0, [pc, #40]	@ (8120eec <tcp_input_delayed_close+0x7c>)
 8120ec4:	f7ff fa50 	bl	8120368 <tcp_pcb_remove>
    tcp_free(pcb);
 8120ec8:	6878      	ldr	r0, [r7, #4]
 8120eca:	f7fd fdd5 	bl	811ea78 <tcp_free>
    return 1;
 8120ece:	2301      	movs	r3, #1
 8120ed0:	e000      	b.n	8120ed4 <tcp_input_delayed_close+0x64>
  }
  return 0;
 8120ed2:	2300      	movs	r3, #0
}
 8120ed4:	4618      	mov	r0, r3
 8120ed6:	3708      	adds	r7, #8
 8120ed8:	46bd      	mov	sp, r7
 8120eda:	bd80      	pop	{r7, pc}
 8120edc:	08129a38 	.word	0x08129a38
 8120ee0:	08129c48 	.word	0x08129c48
 8120ee4:	08129ac4 	.word	0x08129ac4
 8120ee8:	1000e551 	.word	0x1000e551
 8120eec:	1000e518 	.word	0x1000e518

08120ef0 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8120ef0:	b590      	push	{r4, r7, lr}
 8120ef2:	b08b      	sub	sp, #44	@ 0x2c
 8120ef4:	af04      	add	r7, sp, #16
 8120ef6:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8120ef8:	4b6f      	ldr	r3, [pc, #444]	@ (81210b8 <tcp_listen_input+0x1c8>)
 8120efa:	781b      	ldrb	r3, [r3, #0]
 8120efc:	f003 0304 	and.w	r3, r3, #4
 8120f00:	2b00      	cmp	r3, #0
 8120f02:	f040 80d2 	bne.w	81210aa <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8120f06:	687b      	ldr	r3, [r7, #4]
 8120f08:	2b00      	cmp	r3, #0
 8120f0a:	d106      	bne.n	8120f1a <tcp_listen_input+0x2a>
 8120f0c:	4b6b      	ldr	r3, [pc, #428]	@ (81210bc <tcp_listen_input+0x1cc>)
 8120f0e:	f240 2281 	movw	r2, #641	@ 0x281
 8120f12:	496b      	ldr	r1, [pc, #428]	@ (81210c0 <tcp_listen_input+0x1d0>)
 8120f14:	486b      	ldr	r0, [pc, #428]	@ (81210c4 <tcp_listen_input+0x1d4>)
 8120f16:	f005 fdad 	bl	8126a74 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8120f1a:	4b67      	ldr	r3, [pc, #412]	@ (81210b8 <tcp_listen_input+0x1c8>)
 8120f1c:	781b      	ldrb	r3, [r3, #0]
 8120f1e:	f003 0310 	and.w	r3, r3, #16
 8120f22:	2b00      	cmp	r3, #0
 8120f24:	d019      	beq.n	8120f5a <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8120f26:	4b68      	ldr	r3, [pc, #416]	@ (81210c8 <tcp_listen_input+0x1d8>)
 8120f28:	6819      	ldr	r1, [r3, #0]
 8120f2a:	4b68      	ldr	r3, [pc, #416]	@ (81210cc <tcp_listen_input+0x1dc>)
 8120f2c:	881b      	ldrh	r3, [r3, #0]
 8120f2e:	461a      	mov	r2, r3
 8120f30:	4b67      	ldr	r3, [pc, #412]	@ (81210d0 <tcp_listen_input+0x1e0>)
 8120f32:	681b      	ldr	r3, [r3, #0]
 8120f34:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8120f36:	4b67      	ldr	r3, [pc, #412]	@ (81210d4 <tcp_listen_input+0x1e4>)
 8120f38:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8120f3a:	885b      	ldrh	r3, [r3, #2]
 8120f3c:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8120f3e:	4a65      	ldr	r2, [pc, #404]	@ (81210d4 <tcp_listen_input+0x1e4>)
 8120f40:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8120f42:	8812      	ldrh	r2, [r2, #0]
 8120f44:	b292      	uxth	r2, r2
 8120f46:	9202      	str	r2, [sp, #8]
 8120f48:	9301      	str	r3, [sp, #4]
 8120f4a:	4b63      	ldr	r3, [pc, #396]	@ (81210d8 <tcp_listen_input+0x1e8>)
 8120f4c:	9300      	str	r3, [sp, #0]
 8120f4e:	4b63      	ldr	r3, [pc, #396]	@ (81210dc <tcp_listen_input+0x1ec>)
 8120f50:	4602      	mov	r2, r0
 8120f52:	6878      	ldr	r0, [r7, #4]
 8120f54:	f003 fbd2 	bl	81246fc <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8120f58:	e0a9      	b.n	81210ae <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 8120f5a:	4b57      	ldr	r3, [pc, #348]	@ (81210b8 <tcp_listen_input+0x1c8>)
 8120f5c:	781b      	ldrb	r3, [r3, #0]
 8120f5e:	f003 0302 	and.w	r3, r3, #2
 8120f62:	2b00      	cmp	r3, #0
 8120f64:	f000 80a3 	beq.w	81210ae <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8120f68:	687b      	ldr	r3, [r7, #4]
 8120f6a:	7d5b      	ldrb	r3, [r3, #21]
 8120f6c:	4618      	mov	r0, r3
 8120f6e:	f7ff f8bf 	bl	81200f0 <tcp_alloc>
 8120f72:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8120f74:	697b      	ldr	r3, [r7, #20]
 8120f76:	2b00      	cmp	r3, #0
 8120f78:	d111      	bne.n	8120f9e <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8120f7a:	687b      	ldr	r3, [r7, #4]
 8120f7c:	699b      	ldr	r3, [r3, #24]
 8120f7e:	2b00      	cmp	r3, #0
 8120f80:	d00a      	beq.n	8120f98 <tcp_listen_input+0xa8>
 8120f82:	687b      	ldr	r3, [r7, #4]
 8120f84:	699b      	ldr	r3, [r3, #24]
 8120f86:	687a      	ldr	r2, [r7, #4]
 8120f88:	6910      	ldr	r0, [r2, #16]
 8120f8a:	f04f 32ff 	mov.w	r2, #4294967295
 8120f8e:	2100      	movs	r1, #0
 8120f90:	4798      	blx	r3
 8120f92:	4603      	mov	r3, r0
 8120f94:	73bb      	strb	r3, [r7, #14]
      return;
 8120f96:	e08b      	b.n	81210b0 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8120f98:	23f0      	movs	r3, #240	@ 0xf0
 8120f9a:	73bb      	strb	r3, [r7, #14]
      return;
 8120f9c:	e088      	b.n	81210b0 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8120f9e:	4b50      	ldr	r3, [pc, #320]	@ (81210e0 <tcp_listen_input+0x1f0>)
 8120fa0:	695a      	ldr	r2, [r3, #20]
 8120fa2:	697b      	ldr	r3, [r7, #20]
 8120fa4:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8120fa6:	4b4e      	ldr	r3, [pc, #312]	@ (81210e0 <tcp_listen_input+0x1f0>)
 8120fa8:	691a      	ldr	r2, [r3, #16]
 8120faa:	697b      	ldr	r3, [r7, #20]
 8120fac:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8120fae:	687b      	ldr	r3, [r7, #4]
 8120fb0:	8ada      	ldrh	r2, [r3, #22]
 8120fb2:	697b      	ldr	r3, [r7, #20]
 8120fb4:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8120fb6:	4b47      	ldr	r3, [pc, #284]	@ (81210d4 <tcp_listen_input+0x1e4>)
 8120fb8:	681b      	ldr	r3, [r3, #0]
 8120fba:	881b      	ldrh	r3, [r3, #0]
 8120fbc:	b29a      	uxth	r2, r3
 8120fbe:	697b      	ldr	r3, [r7, #20]
 8120fc0:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8120fc2:	697b      	ldr	r3, [r7, #20]
 8120fc4:	2203      	movs	r2, #3
 8120fc6:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8120fc8:	4b41      	ldr	r3, [pc, #260]	@ (81210d0 <tcp_listen_input+0x1e0>)
 8120fca:	681b      	ldr	r3, [r3, #0]
 8120fcc:	1c5a      	adds	r2, r3, #1
 8120fce:	697b      	ldr	r3, [r7, #20]
 8120fd0:	625a      	str	r2, [r3, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8120fd2:	697b      	ldr	r3, [r7, #20]
 8120fd4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8120fd6:	697b      	ldr	r3, [r7, #20]
 8120fd8:	62da      	str	r2, [r3, #44]	@ 0x2c
    iss = tcp_next_iss(npcb);
 8120fda:	6978      	ldr	r0, [r7, #20]
 8120fdc:	f7ff fa58 	bl	8120490 <tcp_next_iss>
 8120fe0:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8120fe2:	697b      	ldr	r3, [r7, #20]
 8120fe4:	693a      	ldr	r2, [r7, #16]
 8120fe6:	659a      	str	r2, [r3, #88]	@ 0x58
    npcb->snd_nxt = iss;
 8120fe8:	697b      	ldr	r3, [r7, #20]
 8120fea:	693a      	ldr	r2, [r7, #16]
 8120fec:	651a      	str	r2, [r3, #80]	@ 0x50
    npcb->lastack = iss;
 8120fee:	697b      	ldr	r3, [r7, #20]
 8120ff0:	693a      	ldr	r2, [r7, #16]
 8120ff2:	645a      	str	r2, [r3, #68]	@ 0x44
    npcb->snd_lbb = iss;
 8120ff4:	697b      	ldr	r3, [r7, #20]
 8120ff6:	693a      	ldr	r2, [r7, #16]
 8120ff8:	65da      	str	r2, [r3, #92]	@ 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8120ffa:	4b35      	ldr	r3, [pc, #212]	@ (81210d0 <tcp_listen_input+0x1e0>)
 8120ffc:	681b      	ldr	r3, [r3, #0]
 8120ffe:	1e5a      	subs	r2, r3, #1
 8121000:	697b      	ldr	r3, [r7, #20]
 8121002:	655a      	str	r2, [r3, #84]	@ 0x54
    npcb->callback_arg = pcb->callback_arg;
 8121004:	687b      	ldr	r3, [r7, #4]
 8121006:	691a      	ldr	r2, [r3, #16]
 8121008:	697b      	ldr	r3, [r7, #20]
 812100a:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 812100c:	697b      	ldr	r3, [r7, #20]
 812100e:	687a      	ldr	r2, [r7, #4]
 8121010:	67da      	str	r2, [r3, #124]	@ 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8121012:	687b      	ldr	r3, [r7, #4]
 8121014:	7a5b      	ldrb	r3, [r3, #9]
 8121016:	f003 030c 	and.w	r3, r3, #12
 812101a:	b2da      	uxtb	r2, r3
 812101c:	697b      	ldr	r3, [r7, #20]
 812101e:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8121020:	687b      	ldr	r3, [r7, #4]
 8121022:	7a1a      	ldrb	r2, [r3, #8]
 8121024:	697b      	ldr	r3, [r7, #20]
 8121026:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8121028:	4b2e      	ldr	r3, [pc, #184]	@ (81210e4 <tcp_listen_input+0x1f4>)
 812102a:	681a      	ldr	r2, [r3, #0]
 812102c:	697b      	ldr	r3, [r7, #20]
 812102e:	60da      	str	r2, [r3, #12]
 8121030:	4a2c      	ldr	r2, [pc, #176]	@ (81210e4 <tcp_listen_input+0x1f4>)
 8121032:	697b      	ldr	r3, [r7, #20]
 8121034:	6013      	str	r3, [r2, #0]
 8121036:	f003 fe81 	bl	8124d3c <tcp_timer_needed>
 812103a:	4b2b      	ldr	r3, [pc, #172]	@ (81210e8 <tcp_listen_input+0x1f8>)
 812103c:	2201      	movs	r2, #1
 812103e:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8121040:	6978      	ldr	r0, [r7, #20]
 8121042:	f001 fd8b 	bl	8122b5c <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8121046:	4b23      	ldr	r3, [pc, #140]	@ (81210d4 <tcp_listen_input+0x1e4>)
 8121048:	681b      	ldr	r3, [r3, #0]
 812104a:	89db      	ldrh	r3, [r3, #14]
 812104c:	b29a      	uxth	r2, r3
 812104e:	697b      	ldr	r3, [r7, #20]
 8121050:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8121054:	697b      	ldr	r3, [r7, #20]
 8121056:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 812105a:	697b      	ldr	r3, [r7, #20]
 812105c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8121060:	697b      	ldr	r3, [r7, #20]
 8121062:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 8121064:	697b      	ldr	r3, [r7, #20]
 8121066:	3304      	adds	r3, #4
 8121068:	4618      	mov	r0, r3
 812106a:	f7fa faf1 	bl	811b650 <ip4_route>
 812106e:	4601      	mov	r1, r0
 8121070:	697b      	ldr	r3, [r7, #20]
 8121072:	3304      	adds	r3, #4
 8121074:	461a      	mov	r2, r3
 8121076:	4620      	mov	r0, r4
 8121078:	f7ff fa30 	bl	81204dc <tcp_eff_send_mss_netif>
 812107c:	4603      	mov	r3, r0
 812107e:	461a      	mov	r2, r3
 8121080:	697b      	ldr	r3, [r7, #20]
 8121082:	865a      	strh	r2, [r3, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8121084:	2112      	movs	r1, #18
 8121086:	6978      	ldr	r0, [r7, #20]
 8121088:	f002 fc96 	bl	81239b8 <tcp_enqueue_flags>
 812108c:	4603      	mov	r3, r0
 812108e:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8121090:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8121094:	2b00      	cmp	r3, #0
 8121096:	d004      	beq.n	81210a2 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8121098:	2100      	movs	r1, #0
 812109a:	6978      	ldr	r0, [r7, #20]
 812109c:	f7fd ff16 	bl	811eecc <tcp_abandon>
      return;
 81210a0:	e006      	b.n	81210b0 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 81210a2:	6978      	ldr	r0, [r7, #20]
 81210a4:	f002 fd76 	bl	8123b94 <tcp_output>
  return;
 81210a8:	e001      	b.n	81210ae <tcp_listen_input+0x1be>
    return;
 81210aa:	bf00      	nop
 81210ac:	e000      	b.n	81210b0 <tcp_listen_input+0x1c0>
  return;
 81210ae:	bf00      	nop
}
 81210b0:	371c      	adds	r7, #28
 81210b2:	46bd      	mov	sp, r7
 81210b4:	bd90      	pop	{r4, r7, pc}
 81210b6:	bf00      	nop
 81210b8:	1000e550 	.word	0x1000e550
 81210bc:	08129a38 	.word	0x08129a38
 81210c0:	08129c70 	.word	0x08129c70
 81210c4:	08129ac4 	.word	0x08129ac4
 81210c8:	1000e548 	.word	0x1000e548
 81210cc:	1000e54e 	.word	0x1000e54e
 81210d0:	1000e544 	.word	0x1000e544
 81210d4:	1000e534 	.word	0x1000e534
 81210d8:	1000b384 	.word	0x1000b384
 81210dc:	1000b388 	.word	0x1000b388
 81210e0:	1000b374 	.word	0x1000b374
 81210e4:	1000e518 	.word	0x1000e518
 81210e8:	1000e520 	.word	0x1000e520

081210ec <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 81210ec:	b580      	push	{r7, lr}
 81210ee:	b086      	sub	sp, #24
 81210f0:	af04      	add	r7, sp, #16
 81210f2:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 81210f4:	4b2f      	ldr	r3, [pc, #188]	@ (81211b4 <tcp_timewait_input+0xc8>)
 81210f6:	781b      	ldrb	r3, [r3, #0]
 81210f8:	f003 0304 	and.w	r3, r3, #4
 81210fc:	2b00      	cmp	r3, #0
 81210fe:	d153      	bne.n	81211a8 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8121100:	687b      	ldr	r3, [r7, #4]
 8121102:	2b00      	cmp	r3, #0
 8121104:	d106      	bne.n	8121114 <tcp_timewait_input+0x28>
 8121106:	4b2c      	ldr	r3, [pc, #176]	@ (81211b8 <tcp_timewait_input+0xcc>)
 8121108:	f240 22ee 	movw	r2, #750	@ 0x2ee
 812110c:	492b      	ldr	r1, [pc, #172]	@ (81211bc <tcp_timewait_input+0xd0>)
 812110e:	482c      	ldr	r0, [pc, #176]	@ (81211c0 <tcp_timewait_input+0xd4>)
 8121110:	f005 fcb0 	bl	8126a74 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8121114:	4b27      	ldr	r3, [pc, #156]	@ (81211b4 <tcp_timewait_input+0xc8>)
 8121116:	781b      	ldrb	r3, [r3, #0]
 8121118:	f003 0302 	and.w	r3, r3, #2
 812111c:	2b00      	cmp	r3, #0
 812111e:	d02a      	beq.n	8121176 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8121120:	4b28      	ldr	r3, [pc, #160]	@ (81211c4 <tcp_timewait_input+0xd8>)
 8121122:	681a      	ldr	r2, [r3, #0]
 8121124:	687b      	ldr	r3, [r7, #4]
 8121126:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8121128:	1ad3      	subs	r3, r2, r3
 812112a:	2b00      	cmp	r3, #0
 812112c:	db2d      	blt.n	812118a <tcp_timewait_input+0x9e>
 812112e:	4b25      	ldr	r3, [pc, #148]	@ (81211c4 <tcp_timewait_input+0xd8>)
 8121130:	681a      	ldr	r2, [r3, #0]
 8121132:	687b      	ldr	r3, [r7, #4]
 8121134:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8121136:	6879      	ldr	r1, [r7, #4]
 8121138:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 812113a:	440b      	add	r3, r1
 812113c:	1ad3      	subs	r3, r2, r3
 812113e:	2b00      	cmp	r3, #0
 8121140:	dc23      	bgt.n	812118a <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8121142:	4b21      	ldr	r3, [pc, #132]	@ (81211c8 <tcp_timewait_input+0xdc>)
 8121144:	6819      	ldr	r1, [r3, #0]
 8121146:	4b21      	ldr	r3, [pc, #132]	@ (81211cc <tcp_timewait_input+0xe0>)
 8121148:	881b      	ldrh	r3, [r3, #0]
 812114a:	461a      	mov	r2, r3
 812114c:	4b1d      	ldr	r3, [pc, #116]	@ (81211c4 <tcp_timewait_input+0xd8>)
 812114e:	681b      	ldr	r3, [r3, #0]
 8121150:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8121152:	4b1f      	ldr	r3, [pc, #124]	@ (81211d0 <tcp_timewait_input+0xe4>)
 8121154:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8121156:	885b      	ldrh	r3, [r3, #2]
 8121158:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 812115a:	4a1d      	ldr	r2, [pc, #116]	@ (81211d0 <tcp_timewait_input+0xe4>)
 812115c:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 812115e:	8812      	ldrh	r2, [r2, #0]
 8121160:	b292      	uxth	r2, r2
 8121162:	9202      	str	r2, [sp, #8]
 8121164:	9301      	str	r3, [sp, #4]
 8121166:	4b1b      	ldr	r3, [pc, #108]	@ (81211d4 <tcp_timewait_input+0xe8>)
 8121168:	9300      	str	r3, [sp, #0]
 812116a:	4b1b      	ldr	r3, [pc, #108]	@ (81211d8 <tcp_timewait_input+0xec>)
 812116c:	4602      	mov	r2, r0
 812116e:	6878      	ldr	r0, [r7, #4]
 8121170:	f003 fac4 	bl	81246fc <tcp_rst>
      return;
 8121174:	e01b      	b.n	81211ae <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8121176:	4b0f      	ldr	r3, [pc, #60]	@ (81211b4 <tcp_timewait_input+0xc8>)
 8121178:	781b      	ldrb	r3, [r3, #0]
 812117a:	f003 0301 	and.w	r3, r3, #1
 812117e:	2b00      	cmp	r3, #0
 8121180:	d003      	beq.n	812118a <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8121182:	4b16      	ldr	r3, [pc, #88]	@ (81211dc <tcp_timewait_input+0xf0>)
 8121184:	681a      	ldr	r2, [r3, #0]
 8121186:	687b      	ldr	r3, [r7, #4]
 8121188:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 812118a:	4b10      	ldr	r3, [pc, #64]	@ (81211cc <tcp_timewait_input+0xe0>)
 812118c:	881b      	ldrh	r3, [r3, #0]
 812118e:	2b00      	cmp	r3, #0
 8121190:	d00c      	beq.n	81211ac <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8121192:	687b      	ldr	r3, [r7, #4]
 8121194:	8b5b      	ldrh	r3, [r3, #26]
 8121196:	f043 0302 	orr.w	r3, r3, #2
 812119a:	b29a      	uxth	r2, r3
 812119c:	687b      	ldr	r3, [r7, #4]
 812119e:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 81211a0:	6878      	ldr	r0, [r7, #4]
 81211a2:	f002 fcf7 	bl	8123b94 <tcp_output>
  }
  return;
 81211a6:	e001      	b.n	81211ac <tcp_timewait_input+0xc0>
    return;
 81211a8:	bf00      	nop
 81211aa:	e000      	b.n	81211ae <tcp_timewait_input+0xc2>
  return;
 81211ac:	bf00      	nop
}
 81211ae:	3708      	adds	r7, #8
 81211b0:	46bd      	mov	sp, r7
 81211b2:	bd80      	pop	{r7, pc}
 81211b4:	1000e550 	.word	0x1000e550
 81211b8:	08129a38 	.word	0x08129a38
 81211bc:	08129c90 	.word	0x08129c90
 81211c0:	08129ac4 	.word	0x08129ac4
 81211c4:	1000e544 	.word	0x1000e544
 81211c8:	1000e548 	.word	0x1000e548
 81211cc:	1000e54e 	.word	0x1000e54e
 81211d0:	1000e534 	.word	0x1000e534
 81211d4:	1000b384 	.word	0x1000b384
 81211d8:	1000b388 	.word	0x1000b388
 81211dc:	1000e50c 	.word	0x1000e50c

081211e0 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 81211e0:	b590      	push	{r4, r7, lr}
 81211e2:	b08d      	sub	sp, #52	@ 0x34
 81211e4:	af04      	add	r7, sp, #16
 81211e6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 81211e8:	2300      	movs	r3, #0
 81211ea:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 81211ec:	2300      	movs	r3, #0
 81211ee:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 81211f0:	687b      	ldr	r3, [r7, #4]
 81211f2:	2b00      	cmp	r3, #0
 81211f4:	d106      	bne.n	8121204 <tcp_process+0x24>
 81211f6:	4b9d      	ldr	r3, [pc, #628]	@ (812146c <tcp_process+0x28c>)
 81211f8:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 81211fc:	499c      	ldr	r1, [pc, #624]	@ (8121470 <tcp_process+0x290>)
 81211fe:	489d      	ldr	r0, [pc, #628]	@ (8121474 <tcp_process+0x294>)
 8121200:	f005 fc38 	bl	8126a74 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8121204:	4b9c      	ldr	r3, [pc, #624]	@ (8121478 <tcp_process+0x298>)
 8121206:	781b      	ldrb	r3, [r3, #0]
 8121208:	f003 0304 	and.w	r3, r3, #4
 812120c:	2b00      	cmp	r3, #0
 812120e:	d04e      	beq.n	81212ae <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8121210:	687b      	ldr	r3, [r7, #4]
 8121212:	7d1b      	ldrb	r3, [r3, #20]
 8121214:	2b02      	cmp	r3, #2
 8121216:	d108      	bne.n	812122a <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8121218:	687b      	ldr	r3, [r7, #4]
 812121a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 812121c:	4b97      	ldr	r3, [pc, #604]	@ (812147c <tcp_process+0x29c>)
 812121e:	681b      	ldr	r3, [r3, #0]
 8121220:	429a      	cmp	r2, r3
 8121222:	d123      	bne.n	812126c <tcp_process+0x8c>
        acceptable = 1;
 8121224:	2301      	movs	r3, #1
 8121226:	76fb      	strb	r3, [r7, #27]
 8121228:	e020      	b.n	812126c <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 812122a:	687b      	ldr	r3, [r7, #4]
 812122c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 812122e:	4b94      	ldr	r3, [pc, #592]	@ (8121480 <tcp_process+0x2a0>)
 8121230:	681b      	ldr	r3, [r3, #0]
 8121232:	429a      	cmp	r2, r3
 8121234:	d102      	bne.n	812123c <tcp_process+0x5c>
        acceptable = 1;
 8121236:	2301      	movs	r3, #1
 8121238:	76fb      	strb	r3, [r7, #27]
 812123a:	e017      	b.n	812126c <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 812123c:	4b90      	ldr	r3, [pc, #576]	@ (8121480 <tcp_process+0x2a0>)
 812123e:	681a      	ldr	r2, [r3, #0]
 8121240:	687b      	ldr	r3, [r7, #4]
 8121242:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8121244:	1ad3      	subs	r3, r2, r3
 8121246:	2b00      	cmp	r3, #0
 8121248:	db10      	blt.n	812126c <tcp_process+0x8c>
 812124a:	4b8d      	ldr	r3, [pc, #564]	@ (8121480 <tcp_process+0x2a0>)
 812124c:	681a      	ldr	r2, [r3, #0]
 812124e:	687b      	ldr	r3, [r7, #4]
 8121250:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8121252:	6879      	ldr	r1, [r7, #4]
 8121254:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8121256:	440b      	add	r3, r1
 8121258:	1ad3      	subs	r3, r2, r3
 812125a:	2b00      	cmp	r3, #0
 812125c:	dc06      	bgt.n	812126c <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 812125e:	687b      	ldr	r3, [r7, #4]
 8121260:	8b5b      	ldrh	r3, [r3, #26]
 8121262:	f043 0302 	orr.w	r3, r3, #2
 8121266:	b29a      	uxth	r2, r3
 8121268:	687b      	ldr	r3, [r7, #4]
 812126a:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 812126c:	7efb      	ldrb	r3, [r7, #27]
 812126e:	2b00      	cmp	r3, #0
 8121270:	d01b      	beq.n	81212aa <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8121272:	687b      	ldr	r3, [r7, #4]
 8121274:	7d1b      	ldrb	r3, [r3, #20]
 8121276:	2b00      	cmp	r3, #0
 8121278:	d106      	bne.n	8121288 <tcp_process+0xa8>
 812127a:	4b7c      	ldr	r3, [pc, #496]	@ (812146c <tcp_process+0x28c>)
 812127c:	f44f 724e 	mov.w	r2, #824	@ 0x338
 8121280:	4980      	ldr	r1, [pc, #512]	@ (8121484 <tcp_process+0x2a4>)
 8121282:	487c      	ldr	r0, [pc, #496]	@ (8121474 <tcp_process+0x294>)
 8121284:	f005 fbf6 	bl	8126a74 <iprintf>
      recv_flags |= TF_RESET;
 8121288:	4b7f      	ldr	r3, [pc, #508]	@ (8121488 <tcp_process+0x2a8>)
 812128a:	781b      	ldrb	r3, [r3, #0]
 812128c:	f043 0308 	orr.w	r3, r3, #8
 8121290:	b2da      	uxtb	r2, r3
 8121292:	4b7d      	ldr	r3, [pc, #500]	@ (8121488 <tcp_process+0x2a8>)
 8121294:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8121296:	687b      	ldr	r3, [r7, #4]
 8121298:	8b5b      	ldrh	r3, [r3, #26]
 812129a:	f023 0301 	bic.w	r3, r3, #1
 812129e:	b29a      	uxth	r2, r3
 81212a0:	687b      	ldr	r3, [r7, #4]
 81212a2:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 81212a4:	f06f 030d 	mvn.w	r3, #13
 81212a8:	e37a      	b.n	81219a0 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 81212aa:	2300      	movs	r3, #0
 81212ac:	e378      	b.n	81219a0 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 81212ae:	4b72      	ldr	r3, [pc, #456]	@ (8121478 <tcp_process+0x298>)
 81212b0:	781b      	ldrb	r3, [r3, #0]
 81212b2:	f003 0302 	and.w	r3, r3, #2
 81212b6:	2b00      	cmp	r3, #0
 81212b8:	d010      	beq.n	81212dc <tcp_process+0xfc>
 81212ba:	687b      	ldr	r3, [r7, #4]
 81212bc:	7d1b      	ldrb	r3, [r3, #20]
 81212be:	2b02      	cmp	r3, #2
 81212c0:	d00c      	beq.n	81212dc <tcp_process+0xfc>
 81212c2:	687b      	ldr	r3, [r7, #4]
 81212c4:	7d1b      	ldrb	r3, [r3, #20]
 81212c6:	2b03      	cmp	r3, #3
 81212c8:	d008      	beq.n	81212dc <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 81212ca:	687b      	ldr	r3, [r7, #4]
 81212cc:	8b5b      	ldrh	r3, [r3, #26]
 81212ce:	f043 0302 	orr.w	r3, r3, #2
 81212d2:	b29a      	uxth	r2, r3
 81212d4:	687b      	ldr	r3, [r7, #4]
 81212d6:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 81212d8:	2300      	movs	r3, #0
 81212da:	e361      	b.n	81219a0 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 81212dc:	687b      	ldr	r3, [r7, #4]
 81212de:	8b5b      	ldrh	r3, [r3, #26]
 81212e0:	f003 0310 	and.w	r3, r3, #16
 81212e4:	2b00      	cmp	r3, #0
 81212e6:	d103      	bne.n	81212f0 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 81212e8:	4b68      	ldr	r3, [pc, #416]	@ (812148c <tcp_process+0x2ac>)
 81212ea:	681a      	ldr	r2, [r3, #0]
 81212ec:	687b      	ldr	r3, [r7, #4]
 81212ee:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 81212f0:	687b      	ldr	r3, [r7, #4]
 81212f2:	2200      	movs	r2, #0
 81212f4:	f883 20a3 	strb.w	r2, [r3, #163]	@ 0xa3
  pcb->persist_probe = 0;
 81212f8:	687b      	ldr	r3, [r7, #4]
 81212fa:	2200      	movs	r2, #0
 81212fc:	f883 20a2 	strb.w	r2, [r3, #162]	@ 0xa2

  tcp_parseopt(pcb);
 8121300:	6878      	ldr	r0, [r7, #4]
 8121302:	f001 fc2b 	bl	8122b5c <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8121306:	687b      	ldr	r3, [r7, #4]
 8121308:	7d1b      	ldrb	r3, [r3, #20]
 812130a:	3b02      	subs	r3, #2
 812130c:	2b07      	cmp	r3, #7
 812130e:	f200 8337 	bhi.w	8121980 <tcp_process+0x7a0>
 8121312:	a201      	add	r2, pc, #4	@ (adr r2, 8121318 <tcp_process+0x138>)
 8121314:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8121318:	08121339 	.word	0x08121339
 812131c:	08121569 	.word	0x08121569
 8121320:	081216e1 	.word	0x081216e1
 8121324:	0812170b 	.word	0x0812170b
 8121328:	0812182f 	.word	0x0812182f
 812132c:	081216e1 	.word	0x081216e1
 8121330:	081218bb 	.word	0x081218bb
 8121334:	0812194b 	.word	0x0812194b
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8121338:	4b4f      	ldr	r3, [pc, #316]	@ (8121478 <tcp_process+0x298>)
 812133a:	781b      	ldrb	r3, [r3, #0]
 812133c:	f003 0310 	and.w	r3, r3, #16
 8121340:	2b00      	cmp	r3, #0
 8121342:	f000 80e4 	beq.w	812150e <tcp_process+0x32e>
 8121346:	4b4c      	ldr	r3, [pc, #304]	@ (8121478 <tcp_process+0x298>)
 8121348:	781b      	ldrb	r3, [r3, #0]
 812134a:	f003 0302 	and.w	r3, r3, #2
 812134e:	2b00      	cmp	r3, #0
 8121350:	f000 80dd 	beq.w	812150e <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8121354:	687b      	ldr	r3, [r7, #4]
 8121356:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8121358:	1c5a      	adds	r2, r3, #1
 812135a:	4b48      	ldr	r3, [pc, #288]	@ (812147c <tcp_process+0x29c>)
 812135c:	681b      	ldr	r3, [r3, #0]
 812135e:	429a      	cmp	r2, r3
 8121360:	f040 80d5 	bne.w	812150e <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8121364:	4b46      	ldr	r3, [pc, #280]	@ (8121480 <tcp_process+0x2a0>)
 8121366:	681b      	ldr	r3, [r3, #0]
 8121368:	1c5a      	adds	r2, r3, #1
 812136a:	687b      	ldr	r3, [r7, #4]
 812136c:	625a      	str	r2, [r3, #36]	@ 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 812136e:	687b      	ldr	r3, [r7, #4]
 8121370:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8121372:	687b      	ldr	r3, [r7, #4]
 8121374:	62da      	str	r2, [r3, #44]	@ 0x2c
        pcb->lastack = ackno;
 8121376:	4b41      	ldr	r3, [pc, #260]	@ (812147c <tcp_process+0x29c>)
 8121378:	681a      	ldr	r2, [r3, #0]
 812137a:	687b      	ldr	r3, [r7, #4]
 812137c:	645a      	str	r2, [r3, #68]	@ 0x44
        pcb->snd_wnd = tcphdr->wnd;
 812137e:	4b44      	ldr	r3, [pc, #272]	@ (8121490 <tcp_process+0x2b0>)
 8121380:	681b      	ldr	r3, [r3, #0]
 8121382:	89db      	ldrh	r3, [r3, #14]
 8121384:	b29a      	uxth	r2, r3
 8121386:	687b      	ldr	r3, [r7, #4]
 8121388:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 812138c:	687b      	ldr	r3, [r7, #4]
 812138e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8121392:	687b      	ldr	r3, [r7, #4]
 8121394:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8121398:	4b39      	ldr	r3, [pc, #228]	@ (8121480 <tcp_process+0x2a0>)
 812139a:	681b      	ldr	r3, [r3, #0]
 812139c:	1e5a      	subs	r2, r3, #1
 812139e:	687b      	ldr	r3, [r7, #4]
 81213a0:	655a      	str	r2, [r3, #84]	@ 0x54
        pcb->state = ESTABLISHED;
 81213a2:	687b      	ldr	r3, [r7, #4]
 81213a4:	2204      	movs	r2, #4
 81213a6:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 81213a8:	687b      	ldr	r3, [r7, #4]
 81213aa:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 81213ac:	687b      	ldr	r3, [r7, #4]
 81213ae:	3304      	adds	r3, #4
 81213b0:	4618      	mov	r0, r3
 81213b2:	f7fa f94d 	bl	811b650 <ip4_route>
 81213b6:	4601      	mov	r1, r0
 81213b8:	687b      	ldr	r3, [r7, #4]
 81213ba:	3304      	adds	r3, #4
 81213bc:	461a      	mov	r2, r3
 81213be:	4620      	mov	r0, r4
 81213c0:	f7ff f88c 	bl	81204dc <tcp_eff_send_mss_netif>
 81213c4:	4603      	mov	r3, r0
 81213c6:	461a      	mov	r2, r3
 81213c8:	687b      	ldr	r3, [r7, #4]
 81213ca:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 81213cc:	687b      	ldr	r3, [r7, #4]
 81213ce:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 81213d0:	009a      	lsls	r2, r3, #2
 81213d2:	687b      	ldr	r3, [r7, #4]
 81213d4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 81213d6:	005b      	lsls	r3, r3, #1
 81213d8:	f241 111c 	movw	r1, #4380	@ 0x111c
 81213dc:	428b      	cmp	r3, r1
 81213de:	bf38      	it	cc
 81213e0:	460b      	movcc	r3, r1
 81213e2:	429a      	cmp	r2, r3
 81213e4:	d204      	bcs.n	81213f0 <tcp_process+0x210>
 81213e6:	687b      	ldr	r3, [r7, #4]
 81213e8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 81213ea:	009b      	lsls	r3, r3, #2
 81213ec:	b29b      	uxth	r3, r3
 81213ee:	e00d      	b.n	812140c <tcp_process+0x22c>
 81213f0:	687b      	ldr	r3, [r7, #4]
 81213f2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 81213f4:	005b      	lsls	r3, r3, #1
 81213f6:	f241 121c 	movw	r2, #4380	@ 0x111c
 81213fa:	4293      	cmp	r3, r2
 81213fc:	d904      	bls.n	8121408 <tcp_process+0x228>
 81213fe:	687b      	ldr	r3, [r7, #4]
 8121400:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8121402:	005b      	lsls	r3, r3, #1
 8121404:	b29b      	uxth	r3, r3
 8121406:	e001      	b.n	812140c <tcp_process+0x22c>
 8121408:	f241 131c 	movw	r3, #4380	@ 0x111c
 812140c:	687a      	ldr	r2, [r7, #4]
 812140e:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8121412:	687b      	ldr	r3, [r7, #4]
 8121414:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8121418:	2b00      	cmp	r3, #0
 812141a:	d106      	bne.n	812142a <tcp_process+0x24a>
 812141c:	4b13      	ldr	r3, [pc, #76]	@ (812146c <tcp_process+0x28c>)
 812141e:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 8121422:	491c      	ldr	r1, [pc, #112]	@ (8121494 <tcp_process+0x2b4>)
 8121424:	4813      	ldr	r0, [pc, #76]	@ (8121474 <tcp_process+0x294>)
 8121426:	f005 fb25 	bl	8126a74 <iprintf>
        --pcb->snd_queuelen;
 812142a:	687b      	ldr	r3, [r7, #4]
 812142c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8121430:	3b01      	subs	r3, #1
 8121432:	b29a      	uxth	r2, r3
 8121434:	687b      	ldr	r3, [r7, #4]
 8121436:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 812143a:	687b      	ldr	r3, [r7, #4]
 812143c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 812143e:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8121440:	69fb      	ldr	r3, [r7, #28]
 8121442:	2b00      	cmp	r3, #0
 8121444:	d12a      	bne.n	812149c <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8121446:	687b      	ldr	r3, [r7, #4]
 8121448:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 812144a:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 812144c:	69fb      	ldr	r3, [r7, #28]
 812144e:	2b00      	cmp	r3, #0
 8121450:	d106      	bne.n	8121460 <tcp_process+0x280>
 8121452:	4b06      	ldr	r3, [pc, #24]	@ (812146c <tcp_process+0x28c>)
 8121454:	f44f 725d 	mov.w	r2, #884	@ 0x374
 8121458:	490f      	ldr	r1, [pc, #60]	@ (8121498 <tcp_process+0x2b8>)
 812145a:	4806      	ldr	r0, [pc, #24]	@ (8121474 <tcp_process+0x294>)
 812145c:	f005 fb0a 	bl	8126a74 <iprintf>
          pcb->unsent = rseg->next;
 8121460:	69fb      	ldr	r3, [r7, #28]
 8121462:	681a      	ldr	r2, [r3, #0]
 8121464:	687b      	ldr	r3, [r7, #4]
 8121466:	66da      	str	r2, [r3, #108]	@ 0x6c
 8121468:	e01c      	b.n	81214a4 <tcp_process+0x2c4>
 812146a:	bf00      	nop
 812146c:	08129a38 	.word	0x08129a38
 8121470:	08129cb0 	.word	0x08129cb0
 8121474:	08129ac4 	.word	0x08129ac4
 8121478:	1000e550 	.word	0x1000e550
 812147c:	1000e548 	.word	0x1000e548
 8121480:	1000e544 	.word	0x1000e544
 8121484:	08129ccc 	.word	0x08129ccc
 8121488:	1000e551 	.word	0x1000e551
 812148c:	1000e50c 	.word	0x1000e50c
 8121490:	1000e534 	.word	0x1000e534
 8121494:	08129cec 	.word	0x08129cec
 8121498:	08129d04 	.word	0x08129d04
        } else {
          pcb->unacked = rseg->next;
 812149c:	69fb      	ldr	r3, [r7, #28]
 812149e:	681a      	ldr	r2, [r3, #0]
 81214a0:	687b      	ldr	r3, [r7, #4]
 81214a2:	671a      	str	r2, [r3, #112]	@ 0x70
        }
        tcp_seg_free(rseg);
 81214a4:	69f8      	ldr	r0, [r7, #28]
 81214a6:	f7fe fcba 	bl	811fe1e <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 81214aa:	687b      	ldr	r3, [r7, #4]
 81214ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 81214ae:	2b00      	cmp	r3, #0
 81214b0:	d104      	bne.n	81214bc <tcp_process+0x2dc>
          pcb->rtime = -1;
 81214b2:	687b      	ldr	r3, [r7, #4]
 81214b4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 81214b8:	861a      	strh	r2, [r3, #48]	@ 0x30
 81214ba:	e006      	b.n	81214ca <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 81214bc:	687b      	ldr	r3, [r7, #4]
 81214be:	2200      	movs	r2, #0
 81214c0:	861a      	strh	r2, [r3, #48]	@ 0x30
          pcb->nrtx = 0;
 81214c2:	687b      	ldr	r3, [r7, #4]
 81214c4:	2200      	movs	r2, #0
 81214c6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 81214ca:	687b      	ldr	r3, [r7, #4]
 81214cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 81214d0:	2b00      	cmp	r3, #0
 81214d2:	d00a      	beq.n	81214ea <tcp_process+0x30a>
 81214d4:	687b      	ldr	r3, [r7, #4]
 81214d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 81214da:	687a      	ldr	r2, [r7, #4]
 81214dc:	6910      	ldr	r0, [r2, #16]
 81214de:	2200      	movs	r2, #0
 81214e0:	6879      	ldr	r1, [r7, #4]
 81214e2:	4798      	blx	r3
 81214e4:	4603      	mov	r3, r0
 81214e6:	76bb      	strb	r3, [r7, #26]
 81214e8:	e001      	b.n	81214ee <tcp_process+0x30e>
 81214ea:	2300      	movs	r3, #0
 81214ec:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 81214ee:	f997 301a 	ldrsb.w	r3, [r7, #26]
 81214f2:	f113 0f0d 	cmn.w	r3, #13
 81214f6:	d102      	bne.n	81214fe <tcp_process+0x31e>
          return ERR_ABRT;
 81214f8:	f06f 030c 	mvn.w	r3, #12
 81214fc:	e250      	b.n	81219a0 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 81214fe:	687b      	ldr	r3, [r7, #4]
 8121500:	8b5b      	ldrh	r3, [r3, #26]
 8121502:	f043 0302 	orr.w	r3, r3, #2
 8121506:	b29a      	uxth	r2, r3
 8121508:	687b      	ldr	r3, [r7, #4]
 812150a:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 812150c:	e23a      	b.n	8121984 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 812150e:	4b98      	ldr	r3, [pc, #608]	@ (8121770 <tcp_process+0x590>)
 8121510:	781b      	ldrb	r3, [r3, #0]
 8121512:	f003 0310 	and.w	r3, r3, #16
 8121516:	2b00      	cmp	r3, #0
 8121518:	f000 8234 	beq.w	8121984 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 812151c:	4b95      	ldr	r3, [pc, #596]	@ (8121774 <tcp_process+0x594>)
 812151e:	6819      	ldr	r1, [r3, #0]
 8121520:	4b95      	ldr	r3, [pc, #596]	@ (8121778 <tcp_process+0x598>)
 8121522:	881b      	ldrh	r3, [r3, #0]
 8121524:	461a      	mov	r2, r3
 8121526:	4b95      	ldr	r3, [pc, #596]	@ (812177c <tcp_process+0x59c>)
 8121528:	681b      	ldr	r3, [r3, #0]
 812152a:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 812152c:	4b94      	ldr	r3, [pc, #592]	@ (8121780 <tcp_process+0x5a0>)
 812152e:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8121530:	885b      	ldrh	r3, [r3, #2]
 8121532:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8121534:	4a92      	ldr	r2, [pc, #584]	@ (8121780 <tcp_process+0x5a0>)
 8121536:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8121538:	8812      	ldrh	r2, [r2, #0]
 812153a:	b292      	uxth	r2, r2
 812153c:	9202      	str	r2, [sp, #8]
 812153e:	9301      	str	r3, [sp, #4]
 8121540:	4b90      	ldr	r3, [pc, #576]	@ (8121784 <tcp_process+0x5a4>)
 8121542:	9300      	str	r3, [sp, #0]
 8121544:	4b90      	ldr	r3, [pc, #576]	@ (8121788 <tcp_process+0x5a8>)
 8121546:	4602      	mov	r2, r0
 8121548:	6878      	ldr	r0, [r7, #4]
 812154a:	f003 f8d7 	bl	81246fc <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 812154e:	687b      	ldr	r3, [r7, #4]
 8121550:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8121554:	2b05      	cmp	r3, #5
 8121556:	f200 8215 	bhi.w	8121984 <tcp_process+0x7a4>
          pcb->rtime = 0;
 812155a:	687b      	ldr	r3, [r7, #4]
 812155c:	2200      	movs	r2, #0
 812155e:	861a      	strh	r2, [r3, #48]	@ 0x30
          tcp_rexmit_rto(pcb);
 8121560:	6878      	ldr	r0, [r7, #4]
 8121562:	f002 fea3 	bl	81242ac <tcp_rexmit_rto>
      break;
 8121566:	e20d      	b.n	8121984 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8121568:	4b81      	ldr	r3, [pc, #516]	@ (8121770 <tcp_process+0x590>)
 812156a:	781b      	ldrb	r3, [r3, #0]
 812156c:	f003 0310 	and.w	r3, r3, #16
 8121570:	2b00      	cmp	r3, #0
 8121572:	f000 80a1 	beq.w	81216b8 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8121576:	4b7f      	ldr	r3, [pc, #508]	@ (8121774 <tcp_process+0x594>)
 8121578:	681a      	ldr	r2, [r3, #0]
 812157a:	687b      	ldr	r3, [r7, #4]
 812157c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 812157e:	1ad3      	subs	r3, r2, r3
 8121580:	3b01      	subs	r3, #1
 8121582:	2b00      	cmp	r3, #0
 8121584:	db7e      	blt.n	8121684 <tcp_process+0x4a4>
 8121586:	4b7b      	ldr	r3, [pc, #492]	@ (8121774 <tcp_process+0x594>)
 8121588:	681a      	ldr	r2, [r3, #0]
 812158a:	687b      	ldr	r3, [r7, #4]
 812158c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 812158e:	1ad3      	subs	r3, r2, r3
 8121590:	2b00      	cmp	r3, #0
 8121592:	dc77      	bgt.n	8121684 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8121594:	687b      	ldr	r3, [r7, #4]
 8121596:	2204      	movs	r2, #4
 8121598:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 812159a:	687b      	ldr	r3, [r7, #4]
 812159c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 812159e:	2b00      	cmp	r3, #0
 81215a0:	d102      	bne.n	81215a8 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 81215a2:	23fa      	movs	r3, #250	@ 0xfa
 81215a4:	76bb      	strb	r3, [r7, #26]
 81215a6:	e01d      	b.n	81215e4 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 81215a8:	687b      	ldr	r3, [r7, #4]
 81215aa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 81215ac:	699b      	ldr	r3, [r3, #24]
 81215ae:	2b00      	cmp	r3, #0
 81215b0:	d106      	bne.n	81215c0 <tcp_process+0x3e0>
 81215b2:	4b76      	ldr	r3, [pc, #472]	@ (812178c <tcp_process+0x5ac>)
 81215b4:	f44f 726a 	mov.w	r2, #936	@ 0x3a8
 81215b8:	4975      	ldr	r1, [pc, #468]	@ (8121790 <tcp_process+0x5b0>)
 81215ba:	4876      	ldr	r0, [pc, #472]	@ (8121794 <tcp_process+0x5b4>)
 81215bc:	f005 fa5a 	bl	8126a74 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 81215c0:	687b      	ldr	r3, [r7, #4]
 81215c2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 81215c4:	699b      	ldr	r3, [r3, #24]
 81215c6:	2b00      	cmp	r3, #0
 81215c8:	d00a      	beq.n	81215e0 <tcp_process+0x400>
 81215ca:	687b      	ldr	r3, [r7, #4]
 81215cc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 81215ce:	699b      	ldr	r3, [r3, #24]
 81215d0:	687a      	ldr	r2, [r7, #4]
 81215d2:	6910      	ldr	r0, [r2, #16]
 81215d4:	2200      	movs	r2, #0
 81215d6:	6879      	ldr	r1, [r7, #4]
 81215d8:	4798      	blx	r3
 81215da:	4603      	mov	r3, r0
 81215dc:	76bb      	strb	r3, [r7, #26]
 81215de:	e001      	b.n	81215e4 <tcp_process+0x404>
 81215e0:	23f0      	movs	r3, #240	@ 0xf0
 81215e2:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 81215e4:	f997 301a 	ldrsb.w	r3, [r7, #26]
 81215e8:	2b00      	cmp	r3, #0
 81215ea:	d00a      	beq.n	8121602 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 81215ec:	f997 301a 	ldrsb.w	r3, [r7, #26]
 81215f0:	f113 0f0d 	cmn.w	r3, #13
 81215f4:	d002      	beq.n	81215fc <tcp_process+0x41c>
              tcp_abort(pcb);
 81215f6:	6878      	ldr	r0, [r7, #4]
 81215f8:	f7fd fd26 	bl	811f048 <tcp_abort>
            }
            return ERR_ABRT;
 81215fc:	f06f 030c 	mvn.w	r3, #12
 8121600:	e1ce      	b.n	81219a0 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8121602:	6878      	ldr	r0, [r7, #4]
 8121604:	f000 fae0 	bl	8121bc8 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8121608:	4b63      	ldr	r3, [pc, #396]	@ (8121798 <tcp_process+0x5b8>)
 812160a:	881b      	ldrh	r3, [r3, #0]
 812160c:	2b00      	cmp	r3, #0
 812160e:	d005      	beq.n	812161c <tcp_process+0x43c>
            recv_acked--;
 8121610:	4b61      	ldr	r3, [pc, #388]	@ (8121798 <tcp_process+0x5b8>)
 8121612:	881b      	ldrh	r3, [r3, #0]
 8121614:	3b01      	subs	r3, #1
 8121616:	b29a      	uxth	r2, r3
 8121618:	4b5f      	ldr	r3, [pc, #380]	@ (8121798 <tcp_process+0x5b8>)
 812161a:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 812161c:	687b      	ldr	r3, [r7, #4]
 812161e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8121620:	009a      	lsls	r2, r3, #2
 8121622:	687b      	ldr	r3, [r7, #4]
 8121624:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8121626:	005b      	lsls	r3, r3, #1
 8121628:	f241 111c 	movw	r1, #4380	@ 0x111c
 812162c:	428b      	cmp	r3, r1
 812162e:	bf38      	it	cc
 8121630:	460b      	movcc	r3, r1
 8121632:	429a      	cmp	r2, r3
 8121634:	d204      	bcs.n	8121640 <tcp_process+0x460>
 8121636:	687b      	ldr	r3, [r7, #4]
 8121638:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 812163a:	009b      	lsls	r3, r3, #2
 812163c:	b29b      	uxth	r3, r3
 812163e:	e00d      	b.n	812165c <tcp_process+0x47c>
 8121640:	687b      	ldr	r3, [r7, #4]
 8121642:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8121644:	005b      	lsls	r3, r3, #1
 8121646:	f241 121c 	movw	r2, #4380	@ 0x111c
 812164a:	4293      	cmp	r3, r2
 812164c:	d904      	bls.n	8121658 <tcp_process+0x478>
 812164e:	687b      	ldr	r3, [r7, #4]
 8121650:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8121652:	005b      	lsls	r3, r3, #1
 8121654:	b29b      	uxth	r3, r3
 8121656:	e001      	b.n	812165c <tcp_process+0x47c>
 8121658:	f241 131c 	movw	r3, #4380	@ 0x111c
 812165c:	687a      	ldr	r2, [r7, #4]
 812165e:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8121662:	4b4e      	ldr	r3, [pc, #312]	@ (812179c <tcp_process+0x5bc>)
 8121664:	781b      	ldrb	r3, [r3, #0]
 8121666:	f003 0320 	and.w	r3, r3, #32
 812166a:	2b00      	cmp	r3, #0
 812166c:	d037      	beq.n	81216de <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 812166e:	687b      	ldr	r3, [r7, #4]
 8121670:	8b5b      	ldrh	r3, [r3, #26]
 8121672:	f043 0302 	orr.w	r3, r3, #2
 8121676:	b29a      	uxth	r2, r3
 8121678:	687b      	ldr	r3, [r7, #4]
 812167a:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 812167c:	687b      	ldr	r3, [r7, #4]
 812167e:	2207      	movs	r2, #7
 8121680:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8121682:	e02c      	b.n	81216de <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8121684:	4b3b      	ldr	r3, [pc, #236]	@ (8121774 <tcp_process+0x594>)
 8121686:	6819      	ldr	r1, [r3, #0]
 8121688:	4b3b      	ldr	r3, [pc, #236]	@ (8121778 <tcp_process+0x598>)
 812168a:	881b      	ldrh	r3, [r3, #0]
 812168c:	461a      	mov	r2, r3
 812168e:	4b3b      	ldr	r3, [pc, #236]	@ (812177c <tcp_process+0x59c>)
 8121690:	681b      	ldr	r3, [r3, #0]
 8121692:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8121694:	4b3a      	ldr	r3, [pc, #232]	@ (8121780 <tcp_process+0x5a0>)
 8121696:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8121698:	885b      	ldrh	r3, [r3, #2]
 812169a:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 812169c:	4a38      	ldr	r2, [pc, #224]	@ (8121780 <tcp_process+0x5a0>)
 812169e:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 81216a0:	8812      	ldrh	r2, [r2, #0]
 81216a2:	b292      	uxth	r2, r2
 81216a4:	9202      	str	r2, [sp, #8]
 81216a6:	9301      	str	r3, [sp, #4]
 81216a8:	4b36      	ldr	r3, [pc, #216]	@ (8121784 <tcp_process+0x5a4>)
 81216aa:	9300      	str	r3, [sp, #0]
 81216ac:	4b36      	ldr	r3, [pc, #216]	@ (8121788 <tcp_process+0x5a8>)
 81216ae:	4602      	mov	r2, r0
 81216b0:	6878      	ldr	r0, [r7, #4]
 81216b2:	f003 f823 	bl	81246fc <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 81216b6:	e167      	b.n	8121988 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 81216b8:	4b2d      	ldr	r3, [pc, #180]	@ (8121770 <tcp_process+0x590>)
 81216ba:	781b      	ldrb	r3, [r3, #0]
 81216bc:	f003 0302 	and.w	r3, r3, #2
 81216c0:	2b00      	cmp	r3, #0
 81216c2:	f000 8161 	beq.w	8121988 <tcp_process+0x7a8>
 81216c6:	687b      	ldr	r3, [r7, #4]
 81216c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 81216ca:	1e5a      	subs	r2, r3, #1
 81216cc:	4b2b      	ldr	r3, [pc, #172]	@ (812177c <tcp_process+0x59c>)
 81216ce:	681b      	ldr	r3, [r3, #0]
 81216d0:	429a      	cmp	r2, r3
 81216d2:	f040 8159 	bne.w	8121988 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 81216d6:	6878      	ldr	r0, [r7, #4]
 81216d8:	f002 fe0a 	bl	81242f0 <tcp_rexmit>
      break;
 81216dc:	e154      	b.n	8121988 <tcp_process+0x7a8>
 81216de:	e153      	b.n	8121988 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 81216e0:	6878      	ldr	r0, [r7, #4]
 81216e2:	f000 fa71 	bl	8121bc8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 81216e6:	4b2d      	ldr	r3, [pc, #180]	@ (812179c <tcp_process+0x5bc>)
 81216e8:	781b      	ldrb	r3, [r3, #0]
 81216ea:	f003 0320 	and.w	r3, r3, #32
 81216ee:	2b00      	cmp	r3, #0
 81216f0:	f000 814c 	beq.w	812198c <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 81216f4:	687b      	ldr	r3, [r7, #4]
 81216f6:	8b5b      	ldrh	r3, [r3, #26]
 81216f8:	f043 0302 	orr.w	r3, r3, #2
 81216fc:	b29a      	uxth	r2, r3
 81216fe:	687b      	ldr	r3, [r7, #4]
 8121700:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8121702:	687b      	ldr	r3, [r7, #4]
 8121704:	2207      	movs	r2, #7
 8121706:	751a      	strb	r2, [r3, #20]
      }
      break;
 8121708:	e140      	b.n	812198c <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 812170a:	6878      	ldr	r0, [r7, #4]
 812170c:	f000 fa5c 	bl	8121bc8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8121710:	4b22      	ldr	r3, [pc, #136]	@ (812179c <tcp_process+0x5bc>)
 8121712:	781b      	ldrb	r3, [r3, #0]
 8121714:	f003 0320 	and.w	r3, r3, #32
 8121718:	2b00      	cmp	r3, #0
 812171a:	d071      	beq.n	8121800 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 812171c:	4b14      	ldr	r3, [pc, #80]	@ (8121770 <tcp_process+0x590>)
 812171e:	781b      	ldrb	r3, [r3, #0]
 8121720:	f003 0310 	and.w	r3, r3, #16
 8121724:	2b00      	cmp	r3, #0
 8121726:	d060      	beq.n	81217ea <tcp_process+0x60a>
 8121728:	687b      	ldr	r3, [r7, #4]
 812172a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 812172c:	4b11      	ldr	r3, [pc, #68]	@ (8121774 <tcp_process+0x594>)
 812172e:	681b      	ldr	r3, [r3, #0]
 8121730:	429a      	cmp	r2, r3
 8121732:	d15a      	bne.n	81217ea <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8121734:	687b      	ldr	r3, [r7, #4]
 8121736:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8121738:	2b00      	cmp	r3, #0
 812173a:	d156      	bne.n	81217ea <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 812173c:	687b      	ldr	r3, [r7, #4]
 812173e:	8b5b      	ldrh	r3, [r3, #26]
 8121740:	f043 0302 	orr.w	r3, r3, #2
 8121744:	b29a      	uxth	r2, r3
 8121746:	687b      	ldr	r3, [r7, #4]
 8121748:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 812174a:	6878      	ldr	r0, [r7, #4]
 812174c:	f7fe fdbc 	bl	81202c8 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8121750:	4b13      	ldr	r3, [pc, #76]	@ (81217a0 <tcp_process+0x5c0>)
 8121752:	681b      	ldr	r3, [r3, #0]
 8121754:	687a      	ldr	r2, [r7, #4]
 8121756:	429a      	cmp	r2, r3
 8121758:	d105      	bne.n	8121766 <tcp_process+0x586>
 812175a:	4b11      	ldr	r3, [pc, #68]	@ (81217a0 <tcp_process+0x5c0>)
 812175c:	681b      	ldr	r3, [r3, #0]
 812175e:	68db      	ldr	r3, [r3, #12]
 8121760:	4a0f      	ldr	r2, [pc, #60]	@ (81217a0 <tcp_process+0x5c0>)
 8121762:	6013      	str	r3, [r2, #0]
 8121764:	e02e      	b.n	81217c4 <tcp_process+0x5e4>
 8121766:	4b0e      	ldr	r3, [pc, #56]	@ (81217a0 <tcp_process+0x5c0>)
 8121768:	681b      	ldr	r3, [r3, #0]
 812176a:	617b      	str	r3, [r7, #20]
 812176c:	e027      	b.n	81217be <tcp_process+0x5de>
 812176e:	bf00      	nop
 8121770:	1000e550 	.word	0x1000e550
 8121774:	1000e548 	.word	0x1000e548
 8121778:	1000e54e 	.word	0x1000e54e
 812177c:	1000e544 	.word	0x1000e544
 8121780:	1000e534 	.word	0x1000e534
 8121784:	1000b384 	.word	0x1000b384
 8121788:	1000b388 	.word	0x1000b388
 812178c:	08129a38 	.word	0x08129a38
 8121790:	08129d18 	.word	0x08129d18
 8121794:	08129ac4 	.word	0x08129ac4
 8121798:	1000e54c 	.word	0x1000e54c
 812179c:	1000e551 	.word	0x1000e551
 81217a0:	1000e518 	.word	0x1000e518
 81217a4:	697b      	ldr	r3, [r7, #20]
 81217a6:	68db      	ldr	r3, [r3, #12]
 81217a8:	687a      	ldr	r2, [r7, #4]
 81217aa:	429a      	cmp	r2, r3
 81217ac:	d104      	bne.n	81217b8 <tcp_process+0x5d8>
 81217ae:	687b      	ldr	r3, [r7, #4]
 81217b0:	68da      	ldr	r2, [r3, #12]
 81217b2:	697b      	ldr	r3, [r7, #20]
 81217b4:	60da      	str	r2, [r3, #12]
 81217b6:	e005      	b.n	81217c4 <tcp_process+0x5e4>
 81217b8:	697b      	ldr	r3, [r7, #20]
 81217ba:	68db      	ldr	r3, [r3, #12]
 81217bc:	617b      	str	r3, [r7, #20]
 81217be:	697b      	ldr	r3, [r7, #20]
 81217c0:	2b00      	cmp	r3, #0
 81217c2:	d1ef      	bne.n	81217a4 <tcp_process+0x5c4>
 81217c4:	687b      	ldr	r3, [r7, #4]
 81217c6:	2200      	movs	r2, #0
 81217c8:	60da      	str	r2, [r3, #12]
 81217ca:	4b77      	ldr	r3, [pc, #476]	@ (81219a8 <tcp_process+0x7c8>)
 81217cc:	2201      	movs	r2, #1
 81217ce:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 81217d0:	687b      	ldr	r3, [r7, #4]
 81217d2:	220a      	movs	r2, #10
 81217d4:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 81217d6:	4b75      	ldr	r3, [pc, #468]	@ (81219ac <tcp_process+0x7cc>)
 81217d8:	681a      	ldr	r2, [r3, #0]
 81217da:	687b      	ldr	r3, [r7, #4]
 81217dc:	60da      	str	r2, [r3, #12]
 81217de:	4a73      	ldr	r2, [pc, #460]	@ (81219ac <tcp_process+0x7cc>)
 81217e0:	687b      	ldr	r3, [r7, #4]
 81217e2:	6013      	str	r3, [r2, #0]
 81217e4:	f003 faaa 	bl	8124d3c <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 81217e8:	e0d2      	b.n	8121990 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 81217ea:	687b      	ldr	r3, [r7, #4]
 81217ec:	8b5b      	ldrh	r3, [r3, #26]
 81217ee:	f043 0302 	orr.w	r3, r3, #2
 81217f2:	b29a      	uxth	r2, r3
 81217f4:	687b      	ldr	r3, [r7, #4]
 81217f6:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 81217f8:	687b      	ldr	r3, [r7, #4]
 81217fa:	2208      	movs	r2, #8
 81217fc:	751a      	strb	r2, [r3, #20]
      break;
 81217fe:	e0c7      	b.n	8121990 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8121800:	4b6b      	ldr	r3, [pc, #428]	@ (81219b0 <tcp_process+0x7d0>)
 8121802:	781b      	ldrb	r3, [r3, #0]
 8121804:	f003 0310 	and.w	r3, r3, #16
 8121808:	2b00      	cmp	r3, #0
 812180a:	f000 80c1 	beq.w	8121990 <tcp_process+0x7b0>
 812180e:	687b      	ldr	r3, [r7, #4]
 8121810:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8121812:	4b68      	ldr	r3, [pc, #416]	@ (81219b4 <tcp_process+0x7d4>)
 8121814:	681b      	ldr	r3, [r3, #0]
 8121816:	429a      	cmp	r2, r3
 8121818:	f040 80ba 	bne.w	8121990 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 812181c:	687b      	ldr	r3, [r7, #4]
 812181e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8121820:	2b00      	cmp	r3, #0
 8121822:	f040 80b5 	bne.w	8121990 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8121826:	687b      	ldr	r3, [r7, #4]
 8121828:	2206      	movs	r2, #6
 812182a:	751a      	strb	r2, [r3, #20]
      break;
 812182c:	e0b0      	b.n	8121990 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 812182e:	6878      	ldr	r0, [r7, #4]
 8121830:	f000 f9ca 	bl	8121bc8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8121834:	4b60      	ldr	r3, [pc, #384]	@ (81219b8 <tcp_process+0x7d8>)
 8121836:	781b      	ldrb	r3, [r3, #0]
 8121838:	f003 0320 	and.w	r3, r3, #32
 812183c:	2b00      	cmp	r3, #0
 812183e:	f000 80a9 	beq.w	8121994 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8121842:	687b      	ldr	r3, [r7, #4]
 8121844:	8b5b      	ldrh	r3, [r3, #26]
 8121846:	f043 0302 	orr.w	r3, r3, #2
 812184a:	b29a      	uxth	r2, r3
 812184c:	687b      	ldr	r3, [r7, #4]
 812184e:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8121850:	6878      	ldr	r0, [r7, #4]
 8121852:	f7fe fd39 	bl	81202c8 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8121856:	4b59      	ldr	r3, [pc, #356]	@ (81219bc <tcp_process+0x7dc>)
 8121858:	681b      	ldr	r3, [r3, #0]
 812185a:	687a      	ldr	r2, [r7, #4]
 812185c:	429a      	cmp	r2, r3
 812185e:	d105      	bne.n	812186c <tcp_process+0x68c>
 8121860:	4b56      	ldr	r3, [pc, #344]	@ (81219bc <tcp_process+0x7dc>)
 8121862:	681b      	ldr	r3, [r3, #0]
 8121864:	68db      	ldr	r3, [r3, #12]
 8121866:	4a55      	ldr	r2, [pc, #340]	@ (81219bc <tcp_process+0x7dc>)
 8121868:	6013      	str	r3, [r2, #0]
 812186a:	e013      	b.n	8121894 <tcp_process+0x6b4>
 812186c:	4b53      	ldr	r3, [pc, #332]	@ (81219bc <tcp_process+0x7dc>)
 812186e:	681b      	ldr	r3, [r3, #0]
 8121870:	613b      	str	r3, [r7, #16]
 8121872:	e00c      	b.n	812188e <tcp_process+0x6ae>
 8121874:	693b      	ldr	r3, [r7, #16]
 8121876:	68db      	ldr	r3, [r3, #12]
 8121878:	687a      	ldr	r2, [r7, #4]
 812187a:	429a      	cmp	r2, r3
 812187c:	d104      	bne.n	8121888 <tcp_process+0x6a8>
 812187e:	687b      	ldr	r3, [r7, #4]
 8121880:	68da      	ldr	r2, [r3, #12]
 8121882:	693b      	ldr	r3, [r7, #16]
 8121884:	60da      	str	r2, [r3, #12]
 8121886:	e005      	b.n	8121894 <tcp_process+0x6b4>
 8121888:	693b      	ldr	r3, [r7, #16]
 812188a:	68db      	ldr	r3, [r3, #12]
 812188c:	613b      	str	r3, [r7, #16]
 812188e:	693b      	ldr	r3, [r7, #16]
 8121890:	2b00      	cmp	r3, #0
 8121892:	d1ef      	bne.n	8121874 <tcp_process+0x694>
 8121894:	687b      	ldr	r3, [r7, #4]
 8121896:	2200      	movs	r2, #0
 8121898:	60da      	str	r2, [r3, #12]
 812189a:	4b43      	ldr	r3, [pc, #268]	@ (81219a8 <tcp_process+0x7c8>)
 812189c:	2201      	movs	r2, #1
 812189e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 81218a0:	687b      	ldr	r3, [r7, #4]
 81218a2:	220a      	movs	r2, #10
 81218a4:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 81218a6:	4b41      	ldr	r3, [pc, #260]	@ (81219ac <tcp_process+0x7cc>)
 81218a8:	681a      	ldr	r2, [r3, #0]
 81218aa:	687b      	ldr	r3, [r7, #4]
 81218ac:	60da      	str	r2, [r3, #12]
 81218ae:	4a3f      	ldr	r2, [pc, #252]	@ (81219ac <tcp_process+0x7cc>)
 81218b0:	687b      	ldr	r3, [r7, #4]
 81218b2:	6013      	str	r3, [r2, #0]
 81218b4:	f003 fa42 	bl	8124d3c <tcp_timer_needed>
      }
      break;
 81218b8:	e06c      	b.n	8121994 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 81218ba:	6878      	ldr	r0, [r7, #4]
 81218bc:	f000 f984 	bl	8121bc8 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 81218c0:	4b3b      	ldr	r3, [pc, #236]	@ (81219b0 <tcp_process+0x7d0>)
 81218c2:	781b      	ldrb	r3, [r3, #0]
 81218c4:	f003 0310 	and.w	r3, r3, #16
 81218c8:	2b00      	cmp	r3, #0
 81218ca:	d065      	beq.n	8121998 <tcp_process+0x7b8>
 81218cc:	687b      	ldr	r3, [r7, #4]
 81218ce:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 81218d0:	4b38      	ldr	r3, [pc, #224]	@ (81219b4 <tcp_process+0x7d4>)
 81218d2:	681b      	ldr	r3, [r3, #0]
 81218d4:	429a      	cmp	r2, r3
 81218d6:	d15f      	bne.n	8121998 <tcp_process+0x7b8>
 81218d8:	687b      	ldr	r3, [r7, #4]
 81218da:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 81218dc:	2b00      	cmp	r3, #0
 81218de:	d15b      	bne.n	8121998 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 81218e0:	6878      	ldr	r0, [r7, #4]
 81218e2:	f7fe fcf1 	bl	81202c8 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 81218e6:	4b35      	ldr	r3, [pc, #212]	@ (81219bc <tcp_process+0x7dc>)
 81218e8:	681b      	ldr	r3, [r3, #0]
 81218ea:	687a      	ldr	r2, [r7, #4]
 81218ec:	429a      	cmp	r2, r3
 81218ee:	d105      	bne.n	81218fc <tcp_process+0x71c>
 81218f0:	4b32      	ldr	r3, [pc, #200]	@ (81219bc <tcp_process+0x7dc>)
 81218f2:	681b      	ldr	r3, [r3, #0]
 81218f4:	68db      	ldr	r3, [r3, #12]
 81218f6:	4a31      	ldr	r2, [pc, #196]	@ (81219bc <tcp_process+0x7dc>)
 81218f8:	6013      	str	r3, [r2, #0]
 81218fa:	e013      	b.n	8121924 <tcp_process+0x744>
 81218fc:	4b2f      	ldr	r3, [pc, #188]	@ (81219bc <tcp_process+0x7dc>)
 81218fe:	681b      	ldr	r3, [r3, #0]
 8121900:	60fb      	str	r3, [r7, #12]
 8121902:	e00c      	b.n	812191e <tcp_process+0x73e>
 8121904:	68fb      	ldr	r3, [r7, #12]
 8121906:	68db      	ldr	r3, [r3, #12]
 8121908:	687a      	ldr	r2, [r7, #4]
 812190a:	429a      	cmp	r2, r3
 812190c:	d104      	bne.n	8121918 <tcp_process+0x738>
 812190e:	687b      	ldr	r3, [r7, #4]
 8121910:	68da      	ldr	r2, [r3, #12]
 8121912:	68fb      	ldr	r3, [r7, #12]
 8121914:	60da      	str	r2, [r3, #12]
 8121916:	e005      	b.n	8121924 <tcp_process+0x744>
 8121918:	68fb      	ldr	r3, [r7, #12]
 812191a:	68db      	ldr	r3, [r3, #12]
 812191c:	60fb      	str	r3, [r7, #12]
 812191e:	68fb      	ldr	r3, [r7, #12]
 8121920:	2b00      	cmp	r3, #0
 8121922:	d1ef      	bne.n	8121904 <tcp_process+0x724>
 8121924:	687b      	ldr	r3, [r7, #4]
 8121926:	2200      	movs	r2, #0
 8121928:	60da      	str	r2, [r3, #12]
 812192a:	4b1f      	ldr	r3, [pc, #124]	@ (81219a8 <tcp_process+0x7c8>)
 812192c:	2201      	movs	r2, #1
 812192e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8121930:	687b      	ldr	r3, [r7, #4]
 8121932:	220a      	movs	r2, #10
 8121934:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8121936:	4b1d      	ldr	r3, [pc, #116]	@ (81219ac <tcp_process+0x7cc>)
 8121938:	681a      	ldr	r2, [r3, #0]
 812193a:	687b      	ldr	r3, [r7, #4]
 812193c:	60da      	str	r2, [r3, #12]
 812193e:	4a1b      	ldr	r2, [pc, #108]	@ (81219ac <tcp_process+0x7cc>)
 8121940:	687b      	ldr	r3, [r7, #4]
 8121942:	6013      	str	r3, [r2, #0]
 8121944:	f003 f9fa 	bl	8124d3c <tcp_timer_needed>
      }
      break;
 8121948:	e026      	b.n	8121998 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 812194a:	6878      	ldr	r0, [r7, #4]
 812194c:	f000 f93c 	bl	8121bc8 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8121950:	4b17      	ldr	r3, [pc, #92]	@ (81219b0 <tcp_process+0x7d0>)
 8121952:	781b      	ldrb	r3, [r3, #0]
 8121954:	f003 0310 	and.w	r3, r3, #16
 8121958:	2b00      	cmp	r3, #0
 812195a:	d01f      	beq.n	812199c <tcp_process+0x7bc>
 812195c:	687b      	ldr	r3, [r7, #4]
 812195e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8121960:	4b14      	ldr	r3, [pc, #80]	@ (81219b4 <tcp_process+0x7d4>)
 8121962:	681b      	ldr	r3, [r3, #0]
 8121964:	429a      	cmp	r2, r3
 8121966:	d119      	bne.n	812199c <tcp_process+0x7bc>
 8121968:	687b      	ldr	r3, [r7, #4]
 812196a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 812196c:	2b00      	cmp	r3, #0
 812196e:	d115      	bne.n	812199c <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8121970:	4b11      	ldr	r3, [pc, #68]	@ (81219b8 <tcp_process+0x7d8>)
 8121972:	781b      	ldrb	r3, [r3, #0]
 8121974:	f043 0310 	orr.w	r3, r3, #16
 8121978:	b2da      	uxtb	r2, r3
 812197a:	4b0f      	ldr	r3, [pc, #60]	@ (81219b8 <tcp_process+0x7d8>)
 812197c:	701a      	strb	r2, [r3, #0]
      }
      break;
 812197e:	e00d      	b.n	812199c <tcp_process+0x7bc>
    default:
      break;
 8121980:	bf00      	nop
 8121982:	e00c      	b.n	812199e <tcp_process+0x7be>
      break;
 8121984:	bf00      	nop
 8121986:	e00a      	b.n	812199e <tcp_process+0x7be>
      break;
 8121988:	bf00      	nop
 812198a:	e008      	b.n	812199e <tcp_process+0x7be>
      break;
 812198c:	bf00      	nop
 812198e:	e006      	b.n	812199e <tcp_process+0x7be>
      break;
 8121990:	bf00      	nop
 8121992:	e004      	b.n	812199e <tcp_process+0x7be>
      break;
 8121994:	bf00      	nop
 8121996:	e002      	b.n	812199e <tcp_process+0x7be>
      break;
 8121998:	bf00      	nop
 812199a:	e000      	b.n	812199e <tcp_process+0x7be>
      break;
 812199c:	bf00      	nop
  }
  return ERR_OK;
 812199e:	2300      	movs	r3, #0
}
 81219a0:	4618      	mov	r0, r3
 81219a2:	3724      	adds	r7, #36	@ 0x24
 81219a4:	46bd      	mov	sp, r7
 81219a6:	bd90      	pop	{r4, r7, pc}
 81219a8:	1000e520 	.word	0x1000e520
 81219ac:	1000e51c 	.word	0x1000e51c
 81219b0:	1000e550 	.word	0x1000e550
 81219b4:	1000e548 	.word	0x1000e548
 81219b8:	1000e551 	.word	0x1000e551
 81219bc:	1000e518 	.word	0x1000e518

081219c0 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 81219c0:	b590      	push	{r4, r7, lr}
 81219c2:	b085      	sub	sp, #20
 81219c4:	af00      	add	r7, sp, #0
 81219c6:	6078      	str	r0, [r7, #4]
 81219c8:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 81219ca:	687b      	ldr	r3, [r7, #4]
 81219cc:	2b00      	cmp	r3, #0
 81219ce:	d106      	bne.n	81219de <tcp_oos_insert_segment+0x1e>
 81219d0:	4b3b      	ldr	r3, [pc, #236]	@ (8121ac0 <tcp_oos_insert_segment+0x100>)
 81219d2:	f240 421f 	movw	r2, #1055	@ 0x41f
 81219d6:	493b      	ldr	r1, [pc, #236]	@ (8121ac4 <tcp_oos_insert_segment+0x104>)
 81219d8:	483b      	ldr	r0, [pc, #236]	@ (8121ac8 <tcp_oos_insert_segment+0x108>)
 81219da:	f005 f84b 	bl	8126a74 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 81219de:	687b      	ldr	r3, [r7, #4]
 81219e0:	68db      	ldr	r3, [r3, #12]
 81219e2:	899b      	ldrh	r3, [r3, #12]
 81219e4:	b29b      	uxth	r3, r3
 81219e6:	4618      	mov	r0, r3
 81219e8:	f7f8 fa90 	bl	8119f0c <lwip_htons>
 81219ec:	4603      	mov	r3, r0
 81219ee:	b2db      	uxtb	r3, r3
 81219f0:	f003 0301 	and.w	r3, r3, #1
 81219f4:	2b00      	cmp	r3, #0
 81219f6:	d028      	beq.n	8121a4a <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 81219f8:	6838      	ldr	r0, [r7, #0]
 81219fa:	f7fe f9fb 	bl	811fdf4 <tcp_segs_free>
    next = NULL;
 81219fe:	2300      	movs	r3, #0
 8121a00:	603b      	str	r3, [r7, #0]
 8121a02:	e056      	b.n	8121ab2 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8121a04:	683b      	ldr	r3, [r7, #0]
 8121a06:	68db      	ldr	r3, [r3, #12]
 8121a08:	899b      	ldrh	r3, [r3, #12]
 8121a0a:	b29b      	uxth	r3, r3
 8121a0c:	4618      	mov	r0, r3
 8121a0e:	f7f8 fa7d 	bl	8119f0c <lwip_htons>
 8121a12:	4603      	mov	r3, r0
 8121a14:	b2db      	uxtb	r3, r3
 8121a16:	f003 0301 	and.w	r3, r3, #1
 8121a1a:	2b00      	cmp	r3, #0
 8121a1c:	d00d      	beq.n	8121a3a <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8121a1e:	687b      	ldr	r3, [r7, #4]
 8121a20:	68db      	ldr	r3, [r3, #12]
 8121a22:	899b      	ldrh	r3, [r3, #12]
 8121a24:	b29c      	uxth	r4, r3
 8121a26:	2001      	movs	r0, #1
 8121a28:	f7f8 fa70 	bl	8119f0c <lwip_htons>
 8121a2c:	4603      	mov	r3, r0
 8121a2e:	461a      	mov	r2, r3
 8121a30:	687b      	ldr	r3, [r7, #4]
 8121a32:	68db      	ldr	r3, [r3, #12]
 8121a34:	4322      	orrs	r2, r4
 8121a36:	b292      	uxth	r2, r2
 8121a38:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8121a3a:	683b      	ldr	r3, [r7, #0]
 8121a3c:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8121a3e:	683b      	ldr	r3, [r7, #0]
 8121a40:	681b      	ldr	r3, [r3, #0]
 8121a42:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8121a44:	68f8      	ldr	r0, [r7, #12]
 8121a46:	f7fe f9ea 	bl	811fe1e <tcp_seg_free>
    while (next &&
 8121a4a:	683b      	ldr	r3, [r7, #0]
 8121a4c:	2b00      	cmp	r3, #0
 8121a4e:	d00e      	beq.n	8121a6e <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8121a50:	687b      	ldr	r3, [r7, #4]
 8121a52:	891b      	ldrh	r3, [r3, #8]
 8121a54:	461a      	mov	r2, r3
 8121a56:	4b1d      	ldr	r3, [pc, #116]	@ (8121acc <tcp_oos_insert_segment+0x10c>)
 8121a58:	681b      	ldr	r3, [r3, #0]
 8121a5a:	441a      	add	r2, r3
 8121a5c:	683b      	ldr	r3, [r7, #0]
 8121a5e:	68db      	ldr	r3, [r3, #12]
 8121a60:	685b      	ldr	r3, [r3, #4]
 8121a62:	6839      	ldr	r1, [r7, #0]
 8121a64:	8909      	ldrh	r1, [r1, #8]
 8121a66:	440b      	add	r3, r1
 8121a68:	1ad3      	subs	r3, r2, r3
    while (next &&
 8121a6a:	2b00      	cmp	r3, #0
 8121a6c:	daca      	bge.n	8121a04 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8121a6e:	683b      	ldr	r3, [r7, #0]
 8121a70:	2b00      	cmp	r3, #0
 8121a72:	d01e      	beq.n	8121ab2 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8121a74:	687b      	ldr	r3, [r7, #4]
 8121a76:	891b      	ldrh	r3, [r3, #8]
 8121a78:	461a      	mov	r2, r3
 8121a7a:	4b14      	ldr	r3, [pc, #80]	@ (8121acc <tcp_oos_insert_segment+0x10c>)
 8121a7c:	681b      	ldr	r3, [r3, #0]
 8121a7e:	441a      	add	r2, r3
 8121a80:	683b      	ldr	r3, [r7, #0]
 8121a82:	68db      	ldr	r3, [r3, #12]
 8121a84:	685b      	ldr	r3, [r3, #4]
 8121a86:	1ad3      	subs	r3, r2, r3
    if (next &&
 8121a88:	2b00      	cmp	r3, #0
 8121a8a:	dd12      	ble.n	8121ab2 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8121a8c:	683b      	ldr	r3, [r7, #0]
 8121a8e:	68db      	ldr	r3, [r3, #12]
 8121a90:	685b      	ldr	r3, [r3, #4]
 8121a92:	b29a      	uxth	r2, r3
 8121a94:	4b0d      	ldr	r3, [pc, #52]	@ (8121acc <tcp_oos_insert_segment+0x10c>)
 8121a96:	681b      	ldr	r3, [r3, #0]
 8121a98:	b29b      	uxth	r3, r3
 8121a9a:	1ad3      	subs	r3, r2, r3
 8121a9c:	b29a      	uxth	r2, r3
 8121a9e:	687b      	ldr	r3, [r7, #4]
 8121aa0:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8121aa2:	687b      	ldr	r3, [r7, #4]
 8121aa4:	685a      	ldr	r2, [r3, #4]
 8121aa6:	687b      	ldr	r3, [r7, #4]
 8121aa8:	891b      	ldrh	r3, [r3, #8]
 8121aaa:	4619      	mov	r1, r3
 8121aac:	4610      	mov	r0, r2
 8121aae:	f7fc fab1 	bl	811e014 <pbuf_realloc>
    }
  }
  cseg->next = next;
 8121ab2:	687b      	ldr	r3, [r7, #4]
 8121ab4:	683a      	ldr	r2, [r7, #0]
 8121ab6:	601a      	str	r2, [r3, #0]
}
 8121ab8:	bf00      	nop
 8121aba:	3714      	adds	r7, #20
 8121abc:	46bd      	mov	sp, r7
 8121abe:	bd90      	pop	{r4, r7, pc}
 8121ac0:	08129a38 	.word	0x08129a38
 8121ac4:	08129d38 	.word	0x08129d38
 8121ac8:	08129ac4 	.word	0x08129ac4
 8121acc:	1000e544 	.word	0x1000e544

08121ad0 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8121ad0:	b5b0      	push	{r4, r5, r7, lr}
 8121ad2:	b086      	sub	sp, #24
 8121ad4:	af00      	add	r7, sp, #0
 8121ad6:	60f8      	str	r0, [r7, #12]
 8121ad8:	60b9      	str	r1, [r7, #8]
 8121ada:	607a      	str	r2, [r7, #4]
 8121adc:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8121ade:	e03e      	b.n	8121b5e <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8121ae0:	68bb      	ldr	r3, [r7, #8]
 8121ae2:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8121ae4:	68bb      	ldr	r3, [r7, #8]
 8121ae6:	681b      	ldr	r3, [r3, #0]
 8121ae8:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8121aea:	697b      	ldr	r3, [r7, #20]
 8121aec:	685b      	ldr	r3, [r3, #4]
 8121aee:	4618      	mov	r0, r3
 8121af0:	f7fc fca2 	bl	811e438 <pbuf_clen>
 8121af4:	4603      	mov	r3, r0
 8121af6:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8121af8:	68fb      	ldr	r3, [r7, #12]
 8121afa:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8121afe:	8a7a      	ldrh	r2, [r7, #18]
 8121b00:	429a      	cmp	r2, r3
 8121b02:	d906      	bls.n	8121b12 <tcp_free_acked_segments+0x42>
 8121b04:	4b2a      	ldr	r3, [pc, #168]	@ (8121bb0 <tcp_free_acked_segments+0xe0>)
 8121b06:	f240 4257 	movw	r2, #1111	@ 0x457
 8121b0a:	492a      	ldr	r1, [pc, #168]	@ (8121bb4 <tcp_free_acked_segments+0xe4>)
 8121b0c:	482a      	ldr	r0, [pc, #168]	@ (8121bb8 <tcp_free_acked_segments+0xe8>)
 8121b0e:	f004 ffb1 	bl	8126a74 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8121b12:	68fb      	ldr	r3, [r7, #12]
 8121b14:	f8b3 2066 	ldrh.w	r2, [r3, #102]	@ 0x66
 8121b18:	8a7b      	ldrh	r3, [r7, #18]
 8121b1a:	1ad3      	subs	r3, r2, r3
 8121b1c:	b29a      	uxth	r2, r3
 8121b1e:	68fb      	ldr	r3, [r7, #12]
 8121b20:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8121b24:	697b      	ldr	r3, [r7, #20]
 8121b26:	891a      	ldrh	r2, [r3, #8]
 8121b28:	4b24      	ldr	r3, [pc, #144]	@ (8121bbc <tcp_free_acked_segments+0xec>)
 8121b2a:	881b      	ldrh	r3, [r3, #0]
 8121b2c:	4413      	add	r3, r2
 8121b2e:	b29a      	uxth	r2, r3
 8121b30:	4b22      	ldr	r3, [pc, #136]	@ (8121bbc <tcp_free_acked_segments+0xec>)
 8121b32:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8121b34:	6978      	ldr	r0, [r7, #20]
 8121b36:	f7fe f972 	bl	811fe1e <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8121b3a:	68fb      	ldr	r3, [r7, #12]
 8121b3c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8121b40:	2b00      	cmp	r3, #0
 8121b42:	d00c      	beq.n	8121b5e <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8121b44:	68bb      	ldr	r3, [r7, #8]
 8121b46:	2b00      	cmp	r3, #0
 8121b48:	d109      	bne.n	8121b5e <tcp_free_acked_segments+0x8e>
 8121b4a:	683b      	ldr	r3, [r7, #0]
 8121b4c:	2b00      	cmp	r3, #0
 8121b4e:	d106      	bne.n	8121b5e <tcp_free_acked_segments+0x8e>
 8121b50:	4b17      	ldr	r3, [pc, #92]	@ (8121bb0 <tcp_free_acked_segments+0xe0>)
 8121b52:	f240 4261 	movw	r2, #1121	@ 0x461
 8121b56:	491a      	ldr	r1, [pc, #104]	@ (8121bc0 <tcp_free_acked_segments+0xf0>)
 8121b58:	4817      	ldr	r0, [pc, #92]	@ (8121bb8 <tcp_free_acked_segments+0xe8>)
 8121b5a:	f004 ff8b 	bl	8126a74 <iprintf>
  while (seg_list != NULL &&
 8121b5e:	68bb      	ldr	r3, [r7, #8]
 8121b60:	2b00      	cmp	r3, #0
 8121b62:	d020      	beq.n	8121ba6 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8121b64:	68bb      	ldr	r3, [r7, #8]
 8121b66:	68db      	ldr	r3, [r3, #12]
 8121b68:	685b      	ldr	r3, [r3, #4]
 8121b6a:	4618      	mov	r0, r3
 8121b6c:	f7f8 f9e3 	bl	8119f36 <lwip_htonl>
 8121b70:	4604      	mov	r4, r0
 8121b72:	68bb      	ldr	r3, [r7, #8]
 8121b74:	891b      	ldrh	r3, [r3, #8]
 8121b76:	461d      	mov	r5, r3
 8121b78:	68bb      	ldr	r3, [r7, #8]
 8121b7a:	68db      	ldr	r3, [r3, #12]
 8121b7c:	899b      	ldrh	r3, [r3, #12]
 8121b7e:	b29b      	uxth	r3, r3
 8121b80:	4618      	mov	r0, r3
 8121b82:	f7f8 f9c3 	bl	8119f0c <lwip_htons>
 8121b86:	4603      	mov	r3, r0
 8121b88:	b2db      	uxtb	r3, r3
 8121b8a:	f003 0303 	and.w	r3, r3, #3
 8121b8e:	2b00      	cmp	r3, #0
 8121b90:	d001      	beq.n	8121b96 <tcp_free_acked_segments+0xc6>
 8121b92:	2301      	movs	r3, #1
 8121b94:	e000      	b.n	8121b98 <tcp_free_acked_segments+0xc8>
 8121b96:	2300      	movs	r3, #0
 8121b98:	442b      	add	r3, r5
 8121b9a:	18e2      	adds	r2, r4, r3
 8121b9c:	4b09      	ldr	r3, [pc, #36]	@ (8121bc4 <tcp_free_acked_segments+0xf4>)
 8121b9e:	681b      	ldr	r3, [r3, #0]
 8121ba0:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8121ba2:	2b00      	cmp	r3, #0
 8121ba4:	dd9c      	ble.n	8121ae0 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8121ba6:	68bb      	ldr	r3, [r7, #8]
}
 8121ba8:	4618      	mov	r0, r3
 8121baa:	3718      	adds	r7, #24
 8121bac:	46bd      	mov	sp, r7
 8121bae:	bdb0      	pop	{r4, r5, r7, pc}
 8121bb0:	08129a38 	.word	0x08129a38
 8121bb4:	08129d60 	.word	0x08129d60
 8121bb8:	08129ac4 	.word	0x08129ac4
 8121bbc:	1000e54c 	.word	0x1000e54c
 8121bc0:	08129d88 	.word	0x08129d88
 8121bc4:	1000e548 	.word	0x1000e548

08121bc8 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8121bc8:	b5b0      	push	{r4, r5, r7, lr}
 8121bca:	b094      	sub	sp, #80	@ 0x50
 8121bcc:	af00      	add	r7, sp, #0
 8121bce:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8121bd0:	2300      	movs	r3, #0
 8121bd2:	64bb      	str	r3, [r7, #72]	@ 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8121bd4:	687b      	ldr	r3, [r7, #4]
 8121bd6:	2b00      	cmp	r3, #0
 8121bd8:	d106      	bne.n	8121be8 <tcp_receive+0x20>
 8121bda:	4b91      	ldr	r3, [pc, #580]	@ (8121e20 <tcp_receive+0x258>)
 8121bdc:	f240 427b 	movw	r2, #1147	@ 0x47b
 8121be0:	4990      	ldr	r1, [pc, #576]	@ (8121e24 <tcp_receive+0x25c>)
 8121be2:	4891      	ldr	r0, [pc, #580]	@ (8121e28 <tcp_receive+0x260>)
 8121be4:	f004 ff46 	bl	8126a74 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8121be8:	687b      	ldr	r3, [r7, #4]
 8121bea:	7d1b      	ldrb	r3, [r3, #20]
 8121bec:	2b03      	cmp	r3, #3
 8121bee:	d806      	bhi.n	8121bfe <tcp_receive+0x36>
 8121bf0:	4b8b      	ldr	r3, [pc, #556]	@ (8121e20 <tcp_receive+0x258>)
 8121bf2:	f240 427c 	movw	r2, #1148	@ 0x47c
 8121bf6:	498d      	ldr	r1, [pc, #564]	@ (8121e2c <tcp_receive+0x264>)
 8121bf8:	488b      	ldr	r0, [pc, #556]	@ (8121e28 <tcp_receive+0x260>)
 8121bfa:	f004 ff3b 	bl	8126a74 <iprintf>

  if (flags & TCP_ACK) {
 8121bfe:	4b8c      	ldr	r3, [pc, #560]	@ (8121e30 <tcp_receive+0x268>)
 8121c00:	781b      	ldrb	r3, [r3, #0]
 8121c02:	f003 0310 	and.w	r3, r3, #16
 8121c06:	2b00      	cmp	r3, #0
 8121c08:	f000 8264 	beq.w	81220d4 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8121c0c:	687b      	ldr	r3, [r7, #4]
 8121c0e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8121c12:	461a      	mov	r2, r3
 8121c14:	687b      	ldr	r3, [r7, #4]
 8121c16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8121c18:	4413      	add	r3, r2
 8121c1a:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8121c1c:	687b      	ldr	r3, [r7, #4]
 8121c1e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8121c20:	4b84      	ldr	r3, [pc, #528]	@ (8121e34 <tcp_receive+0x26c>)
 8121c22:	681b      	ldr	r3, [r3, #0]
 8121c24:	1ad3      	subs	r3, r2, r3
 8121c26:	2b00      	cmp	r3, #0
 8121c28:	db1b      	blt.n	8121c62 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8121c2a:	687b      	ldr	r3, [r7, #4]
 8121c2c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8121c2e:	4b81      	ldr	r3, [pc, #516]	@ (8121e34 <tcp_receive+0x26c>)
 8121c30:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8121c32:	429a      	cmp	r2, r3
 8121c34:	d106      	bne.n	8121c44 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8121c36:	687b      	ldr	r3, [r7, #4]
 8121c38:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8121c3a:	4b7f      	ldr	r3, [pc, #508]	@ (8121e38 <tcp_receive+0x270>)
 8121c3c:	681b      	ldr	r3, [r3, #0]
 8121c3e:	1ad3      	subs	r3, r2, r3
 8121c40:	2b00      	cmp	r3, #0
 8121c42:	db0e      	blt.n	8121c62 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8121c44:	687b      	ldr	r3, [r7, #4]
 8121c46:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8121c48:	4b7b      	ldr	r3, [pc, #492]	@ (8121e38 <tcp_receive+0x270>)
 8121c4a:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8121c4c:	429a      	cmp	r2, r3
 8121c4e:	d125      	bne.n	8121c9c <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8121c50:	4b7a      	ldr	r3, [pc, #488]	@ (8121e3c <tcp_receive+0x274>)
 8121c52:	681b      	ldr	r3, [r3, #0]
 8121c54:	89db      	ldrh	r3, [r3, #14]
 8121c56:	b29a      	uxth	r2, r3
 8121c58:	687b      	ldr	r3, [r7, #4]
 8121c5a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8121c5e:	429a      	cmp	r2, r3
 8121c60:	d91c      	bls.n	8121c9c <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8121c62:	4b76      	ldr	r3, [pc, #472]	@ (8121e3c <tcp_receive+0x274>)
 8121c64:	681b      	ldr	r3, [r3, #0]
 8121c66:	89db      	ldrh	r3, [r3, #14]
 8121c68:	b29a      	uxth	r2, r3
 8121c6a:	687b      	ldr	r3, [r7, #4]
 8121c6c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8121c70:	687b      	ldr	r3, [r7, #4]
 8121c72:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 8121c76:	687b      	ldr	r3, [r7, #4]
 8121c78:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8121c7c:	429a      	cmp	r2, r3
 8121c7e:	d205      	bcs.n	8121c8c <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8121c80:	687b      	ldr	r3, [r7, #4]
 8121c82:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8121c86:	687b      	ldr	r3, [r7, #4]
 8121c88:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      }
      pcb->snd_wl1 = seqno;
 8121c8c:	4b69      	ldr	r3, [pc, #420]	@ (8121e34 <tcp_receive+0x26c>)
 8121c8e:	681a      	ldr	r2, [r3, #0]
 8121c90:	687b      	ldr	r3, [r7, #4]
 8121c92:	655a      	str	r2, [r3, #84]	@ 0x54
      pcb->snd_wl2 = ackno;
 8121c94:	4b68      	ldr	r3, [pc, #416]	@ (8121e38 <tcp_receive+0x270>)
 8121c96:	681a      	ldr	r2, [r3, #0]
 8121c98:	687b      	ldr	r3, [r7, #4]
 8121c9a:	659a      	str	r2, [r3, #88]	@ 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8121c9c:	4b66      	ldr	r3, [pc, #408]	@ (8121e38 <tcp_receive+0x270>)
 8121c9e:	681a      	ldr	r2, [r3, #0]
 8121ca0:	687b      	ldr	r3, [r7, #4]
 8121ca2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8121ca4:	1ad3      	subs	r3, r2, r3
 8121ca6:	2b00      	cmp	r3, #0
 8121ca8:	dc58      	bgt.n	8121d5c <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8121caa:	4b65      	ldr	r3, [pc, #404]	@ (8121e40 <tcp_receive+0x278>)
 8121cac:	881b      	ldrh	r3, [r3, #0]
 8121cae:	2b00      	cmp	r3, #0
 8121cb0:	d14b      	bne.n	8121d4a <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8121cb2:	687b      	ldr	r3, [r7, #4]
 8121cb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8121cb6:	687a      	ldr	r2, [r7, #4]
 8121cb8:	f8b2 2060 	ldrh.w	r2, [r2, #96]	@ 0x60
 8121cbc:	4413      	add	r3, r2
 8121cbe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8121cc0:	429a      	cmp	r2, r3
 8121cc2:	d142      	bne.n	8121d4a <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8121cc4:	687b      	ldr	r3, [r7, #4]
 8121cc6:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8121cca:	2b00      	cmp	r3, #0
 8121ccc:	db3d      	blt.n	8121d4a <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8121cce:	687b      	ldr	r3, [r7, #4]
 8121cd0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8121cd2:	4b59      	ldr	r3, [pc, #356]	@ (8121e38 <tcp_receive+0x270>)
 8121cd4:	681b      	ldr	r3, [r3, #0]
 8121cd6:	429a      	cmp	r2, r3
 8121cd8:	d137      	bne.n	8121d4a <tcp_receive+0x182>
              found_dupack = 1;
 8121cda:	2301      	movs	r3, #1
 8121cdc:	64bb      	str	r3, [r7, #72]	@ 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8121cde:	687b      	ldr	r3, [r7, #4]
 8121ce0:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8121ce4:	2bff      	cmp	r3, #255	@ 0xff
 8121ce6:	d007      	beq.n	8121cf8 <tcp_receive+0x130>
                ++pcb->dupacks;
 8121ce8:	687b      	ldr	r3, [r7, #4]
 8121cea:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8121cee:	3301      	adds	r3, #1
 8121cf0:	b2da      	uxtb	r2, r3
 8121cf2:	687b      	ldr	r3, [r7, #4]
 8121cf4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
              }
              if (pcb->dupacks > 3) {
 8121cf8:	687b      	ldr	r3, [r7, #4]
 8121cfa:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8121cfe:	2b03      	cmp	r3, #3
 8121d00:	d91b      	bls.n	8121d3a <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8121d02:	687b      	ldr	r3, [r7, #4]
 8121d04:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8121d08:	687b      	ldr	r3, [r7, #4]
 8121d0a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8121d0c:	4413      	add	r3, r2
 8121d0e:	b29a      	uxth	r2, r3
 8121d10:	687b      	ldr	r3, [r7, #4]
 8121d12:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8121d16:	429a      	cmp	r2, r3
 8121d18:	d30a      	bcc.n	8121d30 <tcp_receive+0x168>
 8121d1a:	687b      	ldr	r3, [r7, #4]
 8121d1c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8121d20:	687b      	ldr	r3, [r7, #4]
 8121d22:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8121d24:	4413      	add	r3, r2
 8121d26:	b29a      	uxth	r2, r3
 8121d28:	687b      	ldr	r3, [r7, #4]
 8121d2a:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8121d2e:	e004      	b.n	8121d3a <tcp_receive+0x172>
 8121d30:	687b      	ldr	r3, [r7, #4]
 8121d32:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8121d36:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
              }
              if (pcb->dupacks >= 3) {
 8121d3a:	687b      	ldr	r3, [r7, #4]
 8121d3c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8121d40:	2b02      	cmp	r3, #2
 8121d42:	d902      	bls.n	8121d4a <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8121d44:	6878      	ldr	r0, [r7, #4]
 8121d46:	f002 fb3f 	bl	81243c8 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8121d4a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8121d4c:	2b00      	cmp	r3, #0
 8121d4e:	f040 8161 	bne.w	8122014 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 8121d52:	687b      	ldr	r3, [r7, #4]
 8121d54:	2200      	movs	r2, #0
 8121d56:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8121d5a:	e15b      	b.n	8122014 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8121d5c:	4b36      	ldr	r3, [pc, #216]	@ (8121e38 <tcp_receive+0x270>)
 8121d5e:	681a      	ldr	r2, [r3, #0]
 8121d60:	687b      	ldr	r3, [r7, #4]
 8121d62:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8121d64:	1ad3      	subs	r3, r2, r3
 8121d66:	3b01      	subs	r3, #1
 8121d68:	2b00      	cmp	r3, #0
 8121d6a:	f2c0 814e 	blt.w	812200a <tcp_receive+0x442>
 8121d6e:	4b32      	ldr	r3, [pc, #200]	@ (8121e38 <tcp_receive+0x270>)
 8121d70:	681a      	ldr	r2, [r3, #0]
 8121d72:	687b      	ldr	r3, [r7, #4]
 8121d74:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8121d76:	1ad3      	subs	r3, r2, r3
 8121d78:	2b00      	cmp	r3, #0
 8121d7a:	f300 8146 	bgt.w	812200a <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8121d7e:	687b      	ldr	r3, [r7, #4]
 8121d80:	8b5b      	ldrh	r3, [r3, #26]
 8121d82:	f003 0304 	and.w	r3, r3, #4
 8121d86:	2b00      	cmp	r3, #0
 8121d88:	d010      	beq.n	8121dac <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8121d8a:	687b      	ldr	r3, [r7, #4]
 8121d8c:	8b5b      	ldrh	r3, [r3, #26]
 8121d8e:	f023 0304 	bic.w	r3, r3, #4
 8121d92:	b29a      	uxth	r2, r3
 8121d94:	687b      	ldr	r3, [r7, #4]
 8121d96:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8121d98:	687b      	ldr	r3, [r7, #4]
 8121d9a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8121d9e:	687b      	ldr	r3, [r7, #4]
 8121da0:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
        pcb->bytes_acked = 0;
 8121da4:	687b      	ldr	r3, [r7, #4]
 8121da6:	2200      	movs	r2, #0
 8121da8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8121dac:	687b      	ldr	r3, [r7, #4]
 8121dae:	2200      	movs	r2, #0
 8121db0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8121db4:	687b      	ldr	r3, [r7, #4]
 8121db6:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8121dba:	10db      	asrs	r3, r3, #3
 8121dbc:	b21b      	sxth	r3, r3
 8121dbe:	b29a      	uxth	r2, r3
 8121dc0:	687b      	ldr	r3, [r7, #4]
 8121dc2:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8121dc6:	b29b      	uxth	r3, r3
 8121dc8:	4413      	add	r3, r2
 8121dca:	b29b      	uxth	r3, r3
 8121dcc:	b21a      	sxth	r2, r3
 8121dce:	687b      	ldr	r3, [r7, #4]
 8121dd0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8121dd4:	4b18      	ldr	r3, [pc, #96]	@ (8121e38 <tcp_receive+0x270>)
 8121dd6:	681b      	ldr	r3, [r3, #0]
 8121dd8:	b29a      	uxth	r2, r3
 8121dda:	687b      	ldr	r3, [r7, #4]
 8121ddc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8121dde:	b29b      	uxth	r3, r3
 8121de0:	1ad3      	subs	r3, r2, r3
 8121de2:	85fb      	strh	r3, [r7, #46]	@ 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8121de4:	687b      	ldr	r3, [r7, #4]
 8121de6:	2200      	movs	r2, #0
 8121de8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      pcb->lastack = ackno;
 8121dec:	4b12      	ldr	r3, [pc, #72]	@ (8121e38 <tcp_receive+0x270>)
 8121dee:	681a      	ldr	r2, [r3, #0]
 8121df0:	687b      	ldr	r3, [r7, #4]
 8121df2:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8121df4:	687b      	ldr	r3, [r7, #4]
 8121df6:	7d1b      	ldrb	r3, [r3, #20]
 8121df8:	2b03      	cmp	r3, #3
 8121dfa:	f240 8097 	bls.w	8121f2c <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 8121dfe:	687b      	ldr	r3, [r7, #4]
 8121e00:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8121e04:	687b      	ldr	r3, [r7, #4]
 8121e06:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8121e0a:	429a      	cmp	r2, r3
 8121e0c:	d245      	bcs.n	8121e9a <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8121e0e:	687b      	ldr	r3, [r7, #4]
 8121e10:	8b5b      	ldrh	r3, [r3, #26]
 8121e12:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8121e16:	2b00      	cmp	r3, #0
 8121e18:	d014      	beq.n	8121e44 <tcp_receive+0x27c>
 8121e1a:	2301      	movs	r3, #1
 8121e1c:	e013      	b.n	8121e46 <tcp_receive+0x27e>
 8121e1e:	bf00      	nop
 8121e20:	08129a38 	.word	0x08129a38
 8121e24:	08129da8 	.word	0x08129da8
 8121e28:	08129ac4 	.word	0x08129ac4
 8121e2c:	08129dc4 	.word	0x08129dc4
 8121e30:	1000e550 	.word	0x1000e550
 8121e34:	1000e544 	.word	0x1000e544
 8121e38:	1000e548 	.word	0x1000e548
 8121e3c:	1000e534 	.word	0x1000e534
 8121e40:	1000e54e 	.word	0x1000e54e
 8121e44:	2302      	movs	r3, #2
 8121e46:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8121e4a:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8121e4e:	b29a      	uxth	r2, r3
 8121e50:	687b      	ldr	r3, [r7, #4]
 8121e52:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8121e54:	fb12 f303 	smulbb	r3, r2, r3
 8121e58:	b29b      	uxth	r3, r3
 8121e5a:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8121e5c:	4293      	cmp	r3, r2
 8121e5e:	bf28      	it	cs
 8121e60:	4613      	movcs	r3, r2
 8121e62:	857b      	strh	r3, [r7, #42]	@ 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8121e64:	687b      	ldr	r3, [r7, #4]
 8121e66:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8121e6a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8121e6c:	4413      	add	r3, r2
 8121e6e:	b29a      	uxth	r2, r3
 8121e70:	687b      	ldr	r3, [r7, #4]
 8121e72:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8121e76:	429a      	cmp	r2, r3
 8121e78:	d309      	bcc.n	8121e8e <tcp_receive+0x2c6>
 8121e7a:	687b      	ldr	r3, [r7, #4]
 8121e7c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8121e80:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8121e82:	4413      	add	r3, r2
 8121e84:	b29a      	uxth	r2, r3
 8121e86:	687b      	ldr	r3, [r7, #4]
 8121e88:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8121e8c:	e04e      	b.n	8121f2c <tcp_receive+0x364>
 8121e8e:	687b      	ldr	r3, [r7, #4]
 8121e90:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8121e94:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8121e98:	e048      	b.n	8121f2c <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8121e9a:	687b      	ldr	r3, [r7, #4]
 8121e9c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8121ea0:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8121ea2:	4413      	add	r3, r2
 8121ea4:	b29a      	uxth	r2, r3
 8121ea6:	687b      	ldr	r3, [r7, #4]
 8121ea8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8121eac:	429a      	cmp	r2, r3
 8121eae:	d309      	bcc.n	8121ec4 <tcp_receive+0x2fc>
 8121eb0:	687b      	ldr	r3, [r7, #4]
 8121eb2:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8121eb6:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8121eb8:	4413      	add	r3, r2
 8121eba:	b29a      	uxth	r2, r3
 8121ebc:	687b      	ldr	r3, [r7, #4]
 8121ebe:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8121ec2:	e004      	b.n	8121ece <tcp_receive+0x306>
 8121ec4:	687b      	ldr	r3, [r7, #4]
 8121ec6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8121eca:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8121ece:	687b      	ldr	r3, [r7, #4]
 8121ed0:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8121ed4:	687b      	ldr	r3, [r7, #4]
 8121ed6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8121eda:	429a      	cmp	r2, r3
 8121edc:	d326      	bcc.n	8121f2c <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8121ede:	687b      	ldr	r3, [r7, #4]
 8121ee0:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8121ee4:	687b      	ldr	r3, [r7, #4]
 8121ee6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8121eea:	1ad3      	subs	r3, r2, r3
 8121eec:	b29a      	uxth	r2, r3
 8121eee:	687b      	ldr	r3, [r7, #4]
 8121ef0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8121ef4:	687b      	ldr	r3, [r7, #4]
 8121ef6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8121efa:	687b      	ldr	r3, [r7, #4]
 8121efc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8121efe:	4413      	add	r3, r2
 8121f00:	b29a      	uxth	r2, r3
 8121f02:	687b      	ldr	r3, [r7, #4]
 8121f04:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8121f08:	429a      	cmp	r2, r3
 8121f0a:	d30a      	bcc.n	8121f22 <tcp_receive+0x35a>
 8121f0c:	687b      	ldr	r3, [r7, #4]
 8121f0e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8121f12:	687b      	ldr	r3, [r7, #4]
 8121f14:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8121f16:	4413      	add	r3, r2
 8121f18:	b29a      	uxth	r2, r3
 8121f1a:	687b      	ldr	r3, [r7, #4]
 8121f1c:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8121f20:	e004      	b.n	8121f2c <tcp_receive+0x364>
 8121f22:	687b      	ldr	r3, [r7, #4]
 8121f24:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8121f28:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8121f2c:	687b      	ldr	r3, [r7, #4]
 8121f2e:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8121f30:	687b      	ldr	r3, [r7, #4]
 8121f32:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8121f34:	4a98      	ldr	r2, [pc, #608]	@ (8122198 <tcp_receive+0x5d0>)
 8121f36:	6878      	ldr	r0, [r7, #4]
 8121f38:	f7ff fdca 	bl	8121ad0 <tcp_free_acked_segments>
 8121f3c:	4602      	mov	r2, r0
 8121f3e:	687b      	ldr	r3, [r7, #4]
 8121f40:	671a      	str	r2, [r3, #112]	@ 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8121f42:	687b      	ldr	r3, [r7, #4]
 8121f44:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
 8121f46:	687b      	ldr	r3, [r7, #4]
 8121f48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8121f4a:	4a94      	ldr	r2, [pc, #592]	@ (812219c <tcp_receive+0x5d4>)
 8121f4c:	6878      	ldr	r0, [r7, #4]
 8121f4e:	f7ff fdbf 	bl	8121ad0 <tcp_free_acked_segments>
 8121f52:	4602      	mov	r2, r0
 8121f54:	687b      	ldr	r3, [r7, #4]
 8121f56:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8121f58:	687b      	ldr	r3, [r7, #4]
 8121f5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8121f5c:	2b00      	cmp	r3, #0
 8121f5e:	d104      	bne.n	8121f6a <tcp_receive+0x3a2>
        pcb->rtime = -1;
 8121f60:	687b      	ldr	r3, [r7, #4]
 8121f62:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8121f66:	861a      	strh	r2, [r3, #48]	@ 0x30
 8121f68:	e002      	b.n	8121f70 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 8121f6a:	687b      	ldr	r3, [r7, #4]
 8121f6c:	2200      	movs	r2, #0
 8121f6e:	861a      	strh	r2, [r3, #48]	@ 0x30
      }

      pcb->polltmr = 0;
 8121f70:	687b      	ldr	r3, [r7, #4]
 8121f72:	2200      	movs	r2, #0
 8121f74:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8121f76:	687b      	ldr	r3, [r7, #4]
 8121f78:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8121f7a:	2b00      	cmp	r3, #0
 8121f7c:	d103      	bne.n	8121f86 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 8121f7e:	687b      	ldr	r3, [r7, #4]
 8121f80:	2200      	movs	r2, #0
 8121f82:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8121f86:	687b      	ldr	r3, [r7, #4]
 8121f88:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 8121f8c:	4b84      	ldr	r3, [pc, #528]	@ (81221a0 <tcp_receive+0x5d8>)
 8121f8e:	881b      	ldrh	r3, [r3, #0]
 8121f90:	4413      	add	r3, r2
 8121f92:	b29a      	uxth	r2, r3
 8121f94:	687b      	ldr	r3, [r7, #4]
 8121f96:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8121f9a:	687b      	ldr	r3, [r7, #4]
 8121f9c:	8b5b      	ldrh	r3, [r3, #26]
 8121f9e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8121fa2:	2b00      	cmp	r3, #0
 8121fa4:	d035      	beq.n	8122012 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8121fa6:	687b      	ldr	r3, [r7, #4]
 8121fa8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8121faa:	2b00      	cmp	r3, #0
 8121fac:	d118      	bne.n	8121fe0 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 8121fae:	687b      	ldr	r3, [r7, #4]
 8121fb0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8121fb2:	2b00      	cmp	r3, #0
 8121fb4:	d00c      	beq.n	8121fd0 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8121fb6:	687b      	ldr	r3, [r7, #4]
 8121fb8:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 8121fba:	687b      	ldr	r3, [r7, #4]
 8121fbc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8121fbe:	68db      	ldr	r3, [r3, #12]
 8121fc0:	685b      	ldr	r3, [r3, #4]
 8121fc2:	4618      	mov	r0, r3
 8121fc4:	f7f7 ffb7 	bl	8119f36 <lwip_htonl>
 8121fc8:	4603      	mov	r3, r0
 8121fca:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8121fcc:	2b00      	cmp	r3, #0
 8121fce:	dc20      	bgt.n	8122012 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 8121fd0:	687b      	ldr	r3, [r7, #4]
 8121fd2:	8b5b      	ldrh	r3, [r3, #26]
 8121fd4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8121fd8:	b29a      	uxth	r2, r3
 8121fda:	687b      	ldr	r3, [r7, #4]
 8121fdc:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8121fde:	e018      	b.n	8122012 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8121fe0:	687b      	ldr	r3, [r7, #4]
 8121fe2:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 8121fe4:	687b      	ldr	r3, [r7, #4]
 8121fe6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8121fe8:	68db      	ldr	r3, [r3, #12]
 8121fea:	685b      	ldr	r3, [r3, #4]
 8121fec:	4618      	mov	r0, r3
 8121fee:	f7f7 ffa2 	bl	8119f36 <lwip_htonl>
 8121ff2:	4603      	mov	r3, r0
 8121ff4:	1ae3      	subs	r3, r4, r3
 8121ff6:	2b00      	cmp	r3, #0
 8121ff8:	dc0b      	bgt.n	8122012 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 8121ffa:	687b      	ldr	r3, [r7, #4]
 8121ffc:	8b5b      	ldrh	r3, [r3, #26]
 8121ffe:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8122002:	b29a      	uxth	r2, r3
 8122004:	687b      	ldr	r3, [r7, #4]
 8122006:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8122008:	e003      	b.n	8122012 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 812200a:	6878      	ldr	r0, [r7, #4]
 812200c:	f002 fbc8 	bl	81247a0 <tcp_send_empty_ack>
 8122010:	e000      	b.n	8122014 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8122012:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8122014:	687b      	ldr	r3, [r7, #4]
 8122016:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8122018:	2b00      	cmp	r3, #0
 812201a:	d05b      	beq.n	81220d4 <tcp_receive+0x50c>
 812201c:	687b      	ldr	r3, [r7, #4]
 812201e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8122020:	4b60      	ldr	r3, [pc, #384]	@ (81221a4 <tcp_receive+0x5dc>)
 8122022:	681b      	ldr	r3, [r3, #0]
 8122024:	1ad3      	subs	r3, r2, r3
 8122026:	2b00      	cmp	r3, #0
 8122028:	da54      	bge.n	81220d4 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 812202a:	4b5f      	ldr	r3, [pc, #380]	@ (81221a8 <tcp_receive+0x5e0>)
 812202c:	681b      	ldr	r3, [r3, #0]
 812202e:	b29a      	uxth	r2, r3
 8122030:	687b      	ldr	r3, [r7, #4]
 8122032:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8122034:	b29b      	uxth	r3, r3
 8122036:	1ad3      	subs	r3, r2, r3
 8122038:	b29b      	uxth	r3, r3
 812203a:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 812203e:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8122042:	687b      	ldr	r3, [r7, #4]
 8122044:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8122048:	10db      	asrs	r3, r3, #3
 812204a:	b21b      	sxth	r3, r3
 812204c:	b29b      	uxth	r3, r3
 812204e:	1ad3      	subs	r3, r2, r3
 8122050:	b29b      	uxth	r3, r3
 8122052:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8122056:	687b      	ldr	r3, [r7, #4]
 8122058:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 812205c:	b29a      	uxth	r2, r3
 812205e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8122062:	4413      	add	r3, r2
 8122064:	b29b      	uxth	r3, r3
 8122066:	b21a      	sxth	r2, r3
 8122068:	687b      	ldr	r3, [r7, #4]
 812206a:	879a      	strh	r2, [r3, #60]	@ 0x3c
      if (m < 0) {
 812206c:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 8122070:	2b00      	cmp	r3, #0
 8122072:	da05      	bge.n	8122080 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 8122074:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8122078:	425b      	negs	r3, r3
 812207a:	b29b      	uxth	r3, r3
 812207c:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8122080:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8122084:	687b      	ldr	r3, [r7, #4]
 8122086:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 812208a:	109b      	asrs	r3, r3, #2
 812208c:	b21b      	sxth	r3, r3
 812208e:	b29b      	uxth	r3, r3
 8122090:	1ad3      	subs	r3, r2, r3
 8122092:	b29b      	uxth	r3, r3
 8122094:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8122098:	687b      	ldr	r3, [r7, #4]
 812209a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 812209e:	b29a      	uxth	r2, r3
 81220a0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 81220a4:	4413      	add	r3, r2
 81220a6:	b29b      	uxth	r3, r3
 81220a8:	b21a      	sxth	r2, r3
 81220aa:	687b      	ldr	r3, [r7, #4]
 81220ac:	87da      	strh	r2, [r3, #62]	@ 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 81220ae:	687b      	ldr	r3, [r7, #4]
 81220b0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 81220b4:	10db      	asrs	r3, r3, #3
 81220b6:	b21b      	sxth	r3, r3
 81220b8:	b29a      	uxth	r2, r3
 81220ba:	687b      	ldr	r3, [r7, #4]
 81220bc:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 81220c0:	b29b      	uxth	r3, r3
 81220c2:	4413      	add	r3, r2
 81220c4:	b29b      	uxth	r3, r3
 81220c6:	b21a      	sxth	r2, r3
 81220c8:	687b      	ldr	r3, [r7, #4]
 81220ca:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 81220ce:	687b      	ldr	r3, [r7, #4]
 81220d0:	2200      	movs	r2, #0
 81220d2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 81220d4:	4b35      	ldr	r3, [pc, #212]	@ (81221ac <tcp_receive+0x5e4>)
 81220d6:	881b      	ldrh	r3, [r3, #0]
 81220d8:	2b00      	cmp	r3, #0
 81220da:	f000 84df 	beq.w	8122a9c <tcp_receive+0xed4>
 81220de:	687b      	ldr	r3, [r7, #4]
 81220e0:	7d1b      	ldrb	r3, [r3, #20]
 81220e2:	2b06      	cmp	r3, #6
 81220e4:	f200 84da 	bhi.w	8122a9c <tcp_receive+0xed4>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 81220e8:	687b      	ldr	r3, [r7, #4]
 81220ea:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 81220ec:	4b30      	ldr	r3, [pc, #192]	@ (81221b0 <tcp_receive+0x5e8>)
 81220ee:	681b      	ldr	r3, [r3, #0]
 81220f0:	1ad3      	subs	r3, r2, r3
 81220f2:	3b01      	subs	r3, #1
 81220f4:	2b00      	cmp	r3, #0
 81220f6:	f2c0 808f 	blt.w	8122218 <tcp_receive+0x650>
 81220fa:	687b      	ldr	r3, [r7, #4]
 81220fc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 81220fe:	4b2b      	ldr	r3, [pc, #172]	@ (81221ac <tcp_receive+0x5e4>)
 8122100:	881b      	ldrh	r3, [r3, #0]
 8122102:	4619      	mov	r1, r3
 8122104:	4b2a      	ldr	r3, [pc, #168]	@ (81221b0 <tcp_receive+0x5e8>)
 8122106:	681b      	ldr	r3, [r3, #0]
 8122108:	440b      	add	r3, r1
 812210a:	1ad3      	subs	r3, r2, r3
 812210c:	3301      	adds	r3, #1
 812210e:	2b00      	cmp	r3, #0
 8122110:	f300 8082 	bgt.w	8122218 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8122114:	4b27      	ldr	r3, [pc, #156]	@ (81221b4 <tcp_receive+0x5ec>)
 8122116:	685b      	ldr	r3, [r3, #4]
 8122118:	647b      	str	r3, [r7, #68]	@ 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 812211a:	687b      	ldr	r3, [r7, #4]
 812211c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 812211e:	4b24      	ldr	r3, [pc, #144]	@ (81221b0 <tcp_receive+0x5e8>)
 8122120:	681b      	ldr	r3, [r3, #0]
 8122122:	1ad3      	subs	r3, r2, r3
 8122124:	627b      	str	r3, [r7, #36]	@ 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8122126:	4b23      	ldr	r3, [pc, #140]	@ (81221b4 <tcp_receive+0x5ec>)
 8122128:	685b      	ldr	r3, [r3, #4]
 812212a:	2b00      	cmp	r3, #0
 812212c:	d106      	bne.n	812213c <tcp_receive+0x574>
 812212e:	4b22      	ldr	r3, [pc, #136]	@ (81221b8 <tcp_receive+0x5f0>)
 8122130:	f240 5294 	movw	r2, #1428	@ 0x594
 8122134:	4921      	ldr	r1, [pc, #132]	@ (81221bc <tcp_receive+0x5f4>)
 8122136:	4822      	ldr	r0, [pc, #136]	@ (81221c0 <tcp_receive+0x5f8>)
 8122138:	f004 fc9c 	bl	8126a74 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 812213c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 812213e:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8122142:	4293      	cmp	r3, r2
 8122144:	d906      	bls.n	8122154 <tcp_receive+0x58c>
 8122146:	4b1c      	ldr	r3, [pc, #112]	@ (81221b8 <tcp_receive+0x5f0>)
 8122148:	f240 5295 	movw	r2, #1429	@ 0x595
 812214c:	491d      	ldr	r1, [pc, #116]	@ (81221c4 <tcp_receive+0x5fc>)
 812214e:	481c      	ldr	r0, [pc, #112]	@ (81221c0 <tcp_receive+0x5f8>)
 8122150:	f004 fc90 	bl	8126a74 <iprintf>
      off = (u16_t)off32;
 8122154:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8122156:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 812215a:	4b16      	ldr	r3, [pc, #88]	@ (81221b4 <tcp_receive+0x5ec>)
 812215c:	685b      	ldr	r3, [r3, #4]
 812215e:	891b      	ldrh	r3, [r3, #8]
 8122160:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8122164:	429a      	cmp	r2, r3
 8122166:	d906      	bls.n	8122176 <tcp_receive+0x5ae>
 8122168:	4b13      	ldr	r3, [pc, #76]	@ (81221b8 <tcp_receive+0x5f0>)
 812216a:	f240 5297 	movw	r2, #1431	@ 0x597
 812216e:	4916      	ldr	r1, [pc, #88]	@ (81221c8 <tcp_receive+0x600>)
 8122170:	4813      	ldr	r0, [pc, #76]	@ (81221c0 <tcp_receive+0x5f8>)
 8122172:	f004 fc7f 	bl	8126a74 <iprintf>
      inseg.len -= off;
 8122176:	4b0f      	ldr	r3, [pc, #60]	@ (81221b4 <tcp_receive+0x5ec>)
 8122178:	891a      	ldrh	r2, [r3, #8]
 812217a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 812217e:	1ad3      	subs	r3, r2, r3
 8122180:	b29a      	uxth	r2, r3
 8122182:	4b0c      	ldr	r3, [pc, #48]	@ (81221b4 <tcp_receive+0x5ec>)
 8122184:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8122186:	4b0b      	ldr	r3, [pc, #44]	@ (81221b4 <tcp_receive+0x5ec>)
 8122188:	685b      	ldr	r3, [r3, #4]
 812218a:	891a      	ldrh	r2, [r3, #8]
 812218c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8122190:	1ad3      	subs	r3, r2, r3
 8122192:	847b      	strh	r3, [r7, #34]	@ 0x22
      while (p->len < off) {
 8122194:	e02a      	b.n	81221ec <tcp_receive+0x624>
 8122196:	bf00      	nop
 8122198:	08129de0 	.word	0x08129de0
 812219c:	08129de8 	.word	0x08129de8
 81221a0:	1000e54c 	.word	0x1000e54c
 81221a4:	1000e548 	.word	0x1000e548
 81221a8:	1000e50c 	.word	0x1000e50c
 81221ac:	1000e54e 	.word	0x1000e54e
 81221b0:	1000e544 	.word	0x1000e544
 81221b4:	1000e524 	.word	0x1000e524
 81221b8:	08129a38 	.word	0x08129a38
 81221bc:	08129df0 	.word	0x08129df0
 81221c0:	08129ac4 	.word	0x08129ac4
 81221c4:	08129e00 	.word	0x08129e00
 81221c8:	08129e10 	.word	0x08129e10
        off -= p->len;
 81221cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 81221ce:	895b      	ldrh	r3, [r3, #10]
 81221d0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 81221d4:	1ad3      	subs	r3, r2, r3
 81221d6:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 81221da:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 81221dc:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 81221de:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 81221e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 81221e2:	2200      	movs	r2, #0
 81221e4:	815a      	strh	r2, [r3, #10]
        p = p->next;
 81221e6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 81221e8:	681b      	ldr	r3, [r3, #0]
 81221ea:	647b      	str	r3, [r7, #68]	@ 0x44
      while (p->len < off) {
 81221ec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 81221ee:	895b      	ldrh	r3, [r3, #10]
 81221f0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 81221f4:	429a      	cmp	r2, r3
 81221f6:	d8e9      	bhi.n	81221cc <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 81221f8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 81221fc:	4619      	mov	r1, r3
 81221fe:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8122200:	f7fc f806 	bl	811e210 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8122204:	687b      	ldr	r3, [r7, #4]
 8122206:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8122208:	4a90      	ldr	r2, [pc, #576]	@ (812244c <tcp_receive+0x884>)
 812220a:	6013      	str	r3, [r2, #0]
 812220c:	4b90      	ldr	r3, [pc, #576]	@ (8122450 <tcp_receive+0x888>)
 812220e:	68db      	ldr	r3, [r3, #12]
 8122210:	4a8e      	ldr	r2, [pc, #568]	@ (812244c <tcp_receive+0x884>)
 8122212:	6812      	ldr	r2, [r2, #0]
 8122214:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8122216:	e00d      	b.n	8122234 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8122218:	4b8c      	ldr	r3, [pc, #560]	@ (812244c <tcp_receive+0x884>)
 812221a:	681a      	ldr	r2, [r3, #0]
 812221c:	687b      	ldr	r3, [r7, #4]
 812221e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8122220:	1ad3      	subs	r3, r2, r3
 8122222:	2b00      	cmp	r3, #0
 8122224:	da06      	bge.n	8122234 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8122226:	687b      	ldr	r3, [r7, #4]
 8122228:	8b5b      	ldrh	r3, [r3, #26]
 812222a:	f043 0302 	orr.w	r3, r3, #2
 812222e:	b29a      	uxth	r2, r3
 8122230:	687b      	ldr	r3, [r7, #4]
 8122232:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8122234:	4b85      	ldr	r3, [pc, #532]	@ (812244c <tcp_receive+0x884>)
 8122236:	681a      	ldr	r2, [r3, #0]
 8122238:	687b      	ldr	r3, [r7, #4]
 812223a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 812223c:	1ad3      	subs	r3, r2, r3
 812223e:	2b00      	cmp	r3, #0
 8122240:	f2c0 8427 	blt.w	8122a92 <tcp_receive+0xeca>
 8122244:	4b81      	ldr	r3, [pc, #516]	@ (812244c <tcp_receive+0x884>)
 8122246:	681a      	ldr	r2, [r3, #0]
 8122248:	687b      	ldr	r3, [r7, #4]
 812224a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 812224c:	6879      	ldr	r1, [r7, #4]
 812224e:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8122250:	440b      	add	r3, r1
 8122252:	1ad3      	subs	r3, r2, r3
 8122254:	3301      	adds	r3, #1
 8122256:	2b00      	cmp	r3, #0
 8122258:	f300 841b 	bgt.w	8122a92 <tcp_receive+0xeca>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 812225c:	687b      	ldr	r3, [r7, #4]
 812225e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8122260:	4b7a      	ldr	r3, [pc, #488]	@ (812244c <tcp_receive+0x884>)
 8122262:	681b      	ldr	r3, [r3, #0]
 8122264:	429a      	cmp	r2, r3
 8122266:	f040 8298 	bne.w	812279a <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 812226a:	4b79      	ldr	r3, [pc, #484]	@ (8122450 <tcp_receive+0x888>)
 812226c:	891c      	ldrh	r4, [r3, #8]
 812226e:	4b78      	ldr	r3, [pc, #480]	@ (8122450 <tcp_receive+0x888>)
 8122270:	68db      	ldr	r3, [r3, #12]
 8122272:	899b      	ldrh	r3, [r3, #12]
 8122274:	b29b      	uxth	r3, r3
 8122276:	4618      	mov	r0, r3
 8122278:	f7f7 fe48 	bl	8119f0c <lwip_htons>
 812227c:	4603      	mov	r3, r0
 812227e:	b2db      	uxtb	r3, r3
 8122280:	f003 0303 	and.w	r3, r3, #3
 8122284:	2b00      	cmp	r3, #0
 8122286:	d001      	beq.n	812228c <tcp_receive+0x6c4>
 8122288:	2301      	movs	r3, #1
 812228a:	e000      	b.n	812228e <tcp_receive+0x6c6>
 812228c:	2300      	movs	r3, #0
 812228e:	4423      	add	r3, r4
 8122290:	b29a      	uxth	r2, r3
 8122292:	4b70      	ldr	r3, [pc, #448]	@ (8122454 <tcp_receive+0x88c>)
 8122294:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8122296:	687b      	ldr	r3, [r7, #4]
 8122298:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 812229a:	4b6e      	ldr	r3, [pc, #440]	@ (8122454 <tcp_receive+0x88c>)
 812229c:	881b      	ldrh	r3, [r3, #0]
 812229e:	429a      	cmp	r2, r3
 81222a0:	d274      	bcs.n	812238c <tcp_receive+0x7c4>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 81222a2:	4b6b      	ldr	r3, [pc, #428]	@ (8122450 <tcp_receive+0x888>)
 81222a4:	68db      	ldr	r3, [r3, #12]
 81222a6:	899b      	ldrh	r3, [r3, #12]
 81222a8:	b29b      	uxth	r3, r3
 81222aa:	4618      	mov	r0, r3
 81222ac:	f7f7 fe2e 	bl	8119f0c <lwip_htons>
 81222b0:	4603      	mov	r3, r0
 81222b2:	b2db      	uxtb	r3, r3
 81222b4:	f003 0301 	and.w	r3, r3, #1
 81222b8:	2b00      	cmp	r3, #0
 81222ba:	d01e      	beq.n	81222fa <tcp_receive+0x732>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 81222bc:	4b64      	ldr	r3, [pc, #400]	@ (8122450 <tcp_receive+0x888>)
 81222be:	68db      	ldr	r3, [r3, #12]
 81222c0:	899b      	ldrh	r3, [r3, #12]
 81222c2:	b29b      	uxth	r3, r3
 81222c4:	b21b      	sxth	r3, r3
 81222c6:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 81222ca:	b21c      	sxth	r4, r3
 81222cc:	4b60      	ldr	r3, [pc, #384]	@ (8122450 <tcp_receive+0x888>)
 81222ce:	68db      	ldr	r3, [r3, #12]
 81222d0:	899b      	ldrh	r3, [r3, #12]
 81222d2:	b29b      	uxth	r3, r3
 81222d4:	4618      	mov	r0, r3
 81222d6:	f7f7 fe19 	bl	8119f0c <lwip_htons>
 81222da:	4603      	mov	r3, r0
 81222dc:	b2db      	uxtb	r3, r3
 81222de:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 81222e2:	b29b      	uxth	r3, r3
 81222e4:	4618      	mov	r0, r3
 81222e6:	f7f7 fe11 	bl	8119f0c <lwip_htons>
 81222ea:	4603      	mov	r3, r0
 81222ec:	b21b      	sxth	r3, r3
 81222ee:	4323      	orrs	r3, r4
 81222f0:	b21a      	sxth	r2, r3
 81222f2:	4b57      	ldr	r3, [pc, #348]	@ (8122450 <tcp_receive+0x888>)
 81222f4:	68db      	ldr	r3, [r3, #12]
 81222f6:	b292      	uxth	r2, r2
 81222f8:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 81222fa:	687b      	ldr	r3, [r7, #4]
 81222fc:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 81222fe:	4b54      	ldr	r3, [pc, #336]	@ (8122450 <tcp_receive+0x888>)
 8122300:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8122302:	4b53      	ldr	r3, [pc, #332]	@ (8122450 <tcp_receive+0x888>)
 8122304:	68db      	ldr	r3, [r3, #12]
 8122306:	899b      	ldrh	r3, [r3, #12]
 8122308:	b29b      	uxth	r3, r3
 812230a:	4618      	mov	r0, r3
 812230c:	f7f7 fdfe 	bl	8119f0c <lwip_htons>
 8122310:	4603      	mov	r3, r0
 8122312:	b2db      	uxtb	r3, r3
 8122314:	f003 0302 	and.w	r3, r3, #2
 8122318:	2b00      	cmp	r3, #0
 812231a:	d005      	beq.n	8122328 <tcp_receive+0x760>
            inseg.len -= 1;
 812231c:	4b4c      	ldr	r3, [pc, #304]	@ (8122450 <tcp_receive+0x888>)
 812231e:	891b      	ldrh	r3, [r3, #8]
 8122320:	3b01      	subs	r3, #1
 8122322:	b29a      	uxth	r2, r3
 8122324:	4b4a      	ldr	r3, [pc, #296]	@ (8122450 <tcp_receive+0x888>)
 8122326:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8122328:	4b49      	ldr	r3, [pc, #292]	@ (8122450 <tcp_receive+0x888>)
 812232a:	685b      	ldr	r3, [r3, #4]
 812232c:	4a48      	ldr	r2, [pc, #288]	@ (8122450 <tcp_receive+0x888>)
 812232e:	8912      	ldrh	r2, [r2, #8]
 8122330:	4611      	mov	r1, r2
 8122332:	4618      	mov	r0, r3
 8122334:	f7fb fe6e 	bl	811e014 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8122338:	4b45      	ldr	r3, [pc, #276]	@ (8122450 <tcp_receive+0x888>)
 812233a:	891c      	ldrh	r4, [r3, #8]
 812233c:	4b44      	ldr	r3, [pc, #272]	@ (8122450 <tcp_receive+0x888>)
 812233e:	68db      	ldr	r3, [r3, #12]
 8122340:	899b      	ldrh	r3, [r3, #12]
 8122342:	b29b      	uxth	r3, r3
 8122344:	4618      	mov	r0, r3
 8122346:	f7f7 fde1 	bl	8119f0c <lwip_htons>
 812234a:	4603      	mov	r3, r0
 812234c:	b2db      	uxtb	r3, r3
 812234e:	f003 0303 	and.w	r3, r3, #3
 8122352:	2b00      	cmp	r3, #0
 8122354:	d001      	beq.n	812235a <tcp_receive+0x792>
 8122356:	2301      	movs	r3, #1
 8122358:	e000      	b.n	812235c <tcp_receive+0x794>
 812235a:	2300      	movs	r3, #0
 812235c:	4423      	add	r3, r4
 812235e:	b29a      	uxth	r2, r3
 8122360:	4b3c      	ldr	r3, [pc, #240]	@ (8122454 <tcp_receive+0x88c>)
 8122362:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8122364:	4b3b      	ldr	r3, [pc, #236]	@ (8122454 <tcp_receive+0x88c>)
 8122366:	881b      	ldrh	r3, [r3, #0]
 8122368:	461a      	mov	r2, r3
 812236a:	4b38      	ldr	r3, [pc, #224]	@ (812244c <tcp_receive+0x884>)
 812236c:	681b      	ldr	r3, [r3, #0]
 812236e:	441a      	add	r2, r3
 8122370:	687b      	ldr	r3, [r7, #4]
 8122372:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8122374:	6879      	ldr	r1, [r7, #4]
 8122376:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8122378:	440b      	add	r3, r1
 812237a:	429a      	cmp	r2, r3
 812237c:	d006      	beq.n	812238c <tcp_receive+0x7c4>
 812237e:	4b36      	ldr	r3, [pc, #216]	@ (8122458 <tcp_receive+0x890>)
 8122380:	f240 52cb 	movw	r2, #1483	@ 0x5cb
 8122384:	4935      	ldr	r1, [pc, #212]	@ (812245c <tcp_receive+0x894>)
 8122386:	4836      	ldr	r0, [pc, #216]	@ (8122460 <tcp_receive+0x898>)
 8122388:	f004 fb74 	bl	8126a74 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 812238c:	687b      	ldr	r3, [r7, #4]
 812238e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8122390:	2b00      	cmp	r3, #0
 8122392:	f000 80e6 	beq.w	8122562 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8122396:	4b2e      	ldr	r3, [pc, #184]	@ (8122450 <tcp_receive+0x888>)
 8122398:	68db      	ldr	r3, [r3, #12]
 812239a:	899b      	ldrh	r3, [r3, #12]
 812239c:	b29b      	uxth	r3, r3
 812239e:	4618      	mov	r0, r3
 81223a0:	f7f7 fdb4 	bl	8119f0c <lwip_htons>
 81223a4:	4603      	mov	r3, r0
 81223a6:	b2db      	uxtb	r3, r3
 81223a8:	f003 0301 	and.w	r3, r3, #1
 81223ac:	2b00      	cmp	r3, #0
 81223ae:	d010      	beq.n	81223d2 <tcp_receive+0x80a>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 81223b0:	e00a      	b.n	81223c8 <tcp_receive+0x800>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 81223b2:	687b      	ldr	r3, [r7, #4]
 81223b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 81223b6:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 81223b8:	687b      	ldr	r3, [r7, #4]
 81223ba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 81223bc:	681a      	ldr	r2, [r3, #0]
 81223be:	687b      	ldr	r3, [r7, #4]
 81223c0:	675a      	str	r2, [r3, #116]	@ 0x74
              tcp_seg_free(old_ooseq);
 81223c2:	68f8      	ldr	r0, [r7, #12]
 81223c4:	f7fd fd2b 	bl	811fe1e <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 81223c8:	687b      	ldr	r3, [r7, #4]
 81223ca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 81223cc:	2b00      	cmp	r3, #0
 81223ce:	d1f0      	bne.n	81223b2 <tcp_receive+0x7ea>
 81223d0:	e0c7      	b.n	8122562 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 81223d2:	687b      	ldr	r3, [r7, #4]
 81223d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 81223d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 81223d8:	e051      	b.n	812247e <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 81223da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 81223dc:	68db      	ldr	r3, [r3, #12]
 81223de:	899b      	ldrh	r3, [r3, #12]
 81223e0:	b29b      	uxth	r3, r3
 81223e2:	4618      	mov	r0, r3
 81223e4:	f7f7 fd92 	bl	8119f0c <lwip_htons>
 81223e8:	4603      	mov	r3, r0
 81223ea:	b2db      	uxtb	r3, r3
 81223ec:	f003 0301 	and.w	r3, r3, #1
 81223f0:	2b00      	cmp	r3, #0
 81223f2:	d03c      	beq.n	812246e <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 81223f4:	4b16      	ldr	r3, [pc, #88]	@ (8122450 <tcp_receive+0x888>)
 81223f6:	68db      	ldr	r3, [r3, #12]
 81223f8:	899b      	ldrh	r3, [r3, #12]
 81223fa:	b29b      	uxth	r3, r3
 81223fc:	4618      	mov	r0, r3
 81223fe:	f7f7 fd85 	bl	8119f0c <lwip_htons>
 8122402:	4603      	mov	r3, r0
 8122404:	b2db      	uxtb	r3, r3
 8122406:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 812240a:	2b00      	cmp	r3, #0
 812240c:	d12f      	bne.n	812246e <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 812240e:	4b10      	ldr	r3, [pc, #64]	@ (8122450 <tcp_receive+0x888>)
 8122410:	68db      	ldr	r3, [r3, #12]
 8122412:	899b      	ldrh	r3, [r3, #12]
 8122414:	b29c      	uxth	r4, r3
 8122416:	2001      	movs	r0, #1
 8122418:	f7f7 fd78 	bl	8119f0c <lwip_htons>
 812241c:	4603      	mov	r3, r0
 812241e:	461a      	mov	r2, r3
 8122420:	4b0b      	ldr	r3, [pc, #44]	@ (8122450 <tcp_receive+0x888>)
 8122422:	68db      	ldr	r3, [r3, #12]
 8122424:	4322      	orrs	r2, r4
 8122426:	b292      	uxth	r2, r2
 8122428:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 812242a:	4b09      	ldr	r3, [pc, #36]	@ (8122450 <tcp_receive+0x888>)
 812242c:	891c      	ldrh	r4, [r3, #8]
 812242e:	4b08      	ldr	r3, [pc, #32]	@ (8122450 <tcp_receive+0x888>)
 8122430:	68db      	ldr	r3, [r3, #12]
 8122432:	899b      	ldrh	r3, [r3, #12]
 8122434:	b29b      	uxth	r3, r3
 8122436:	4618      	mov	r0, r3
 8122438:	f7f7 fd68 	bl	8119f0c <lwip_htons>
 812243c:	4603      	mov	r3, r0
 812243e:	b2db      	uxtb	r3, r3
 8122440:	f003 0303 	and.w	r3, r3, #3
 8122444:	2b00      	cmp	r3, #0
 8122446:	d00d      	beq.n	8122464 <tcp_receive+0x89c>
 8122448:	2301      	movs	r3, #1
 812244a:	e00c      	b.n	8122466 <tcp_receive+0x89e>
 812244c:	1000e544 	.word	0x1000e544
 8122450:	1000e524 	.word	0x1000e524
 8122454:	1000e54e 	.word	0x1000e54e
 8122458:	08129a38 	.word	0x08129a38
 812245c:	08129e20 	.word	0x08129e20
 8122460:	08129ac4 	.word	0x08129ac4
 8122464:	2300      	movs	r3, #0
 8122466:	4423      	add	r3, r4
 8122468:	b29a      	uxth	r2, r3
 812246a:	4b98      	ldr	r3, [pc, #608]	@ (81226cc <tcp_receive+0xb04>)
 812246c:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 812246e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8122470:	613b      	str	r3, [r7, #16]
              next = next->next;
 8122472:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8122474:	681b      	ldr	r3, [r3, #0]
 8122476:	63fb      	str	r3, [r7, #60]	@ 0x3c
              tcp_seg_free(tmp);
 8122478:	6938      	ldr	r0, [r7, #16]
 812247a:	f7fd fcd0 	bl	811fe1e <tcp_seg_free>
            while (next &&
 812247e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8122480:	2b00      	cmp	r3, #0
 8122482:	d00e      	beq.n	81224a2 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8122484:	4b91      	ldr	r3, [pc, #580]	@ (81226cc <tcp_receive+0xb04>)
 8122486:	881b      	ldrh	r3, [r3, #0]
 8122488:	461a      	mov	r2, r3
 812248a:	4b91      	ldr	r3, [pc, #580]	@ (81226d0 <tcp_receive+0xb08>)
 812248c:	681b      	ldr	r3, [r3, #0]
 812248e:	441a      	add	r2, r3
 8122490:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8122492:	68db      	ldr	r3, [r3, #12]
 8122494:	685b      	ldr	r3, [r3, #4]
 8122496:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8122498:	8909      	ldrh	r1, [r1, #8]
 812249a:	440b      	add	r3, r1
 812249c:	1ad3      	subs	r3, r2, r3
            while (next &&
 812249e:	2b00      	cmp	r3, #0
 81224a0:	da9b      	bge.n	81223da <tcp_receive+0x812>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 81224a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 81224a4:	2b00      	cmp	r3, #0
 81224a6:	d059      	beq.n	812255c <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 81224a8:	4b88      	ldr	r3, [pc, #544]	@ (81226cc <tcp_receive+0xb04>)
 81224aa:	881b      	ldrh	r3, [r3, #0]
 81224ac:	461a      	mov	r2, r3
 81224ae:	4b88      	ldr	r3, [pc, #544]	@ (81226d0 <tcp_receive+0xb08>)
 81224b0:	681b      	ldr	r3, [r3, #0]
 81224b2:	441a      	add	r2, r3
 81224b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 81224b6:	68db      	ldr	r3, [r3, #12]
 81224b8:	685b      	ldr	r3, [r3, #4]
 81224ba:	1ad3      	subs	r3, r2, r3
            if (next &&
 81224bc:	2b00      	cmp	r3, #0
 81224be:	dd4d      	ble.n	812255c <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 81224c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 81224c2:	68db      	ldr	r3, [r3, #12]
 81224c4:	685b      	ldr	r3, [r3, #4]
 81224c6:	b29a      	uxth	r2, r3
 81224c8:	4b81      	ldr	r3, [pc, #516]	@ (81226d0 <tcp_receive+0xb08>)
 81224ca:	681b      	ldr	r3, [r3, #0]
 81224cc:	b29b      	uxth	r3, r3
 81224ce:	1ad3      	subs	r3, r2, r3
 81224d0:	b29a      	uxth	r2, r3
 81224d2:	4b80      	ldr	r3, [pc, #512]	@ (81226d4 <tcp_receive+0xb0c>)
 81224d4:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 81224d6:	4b7f      	ldr	r3, [pc, #508]	@ (81226d4 <tcp_receive+0xb0c>)
 81224d8:	68db      	ldr	r3, [r3, #12]
 81224da:	899b      	ldrh	r3, [r3, #12]
 81224dc:	b29b      	uxth	r3, r3
 81224de:	4618      	mov	r0, r3
 81224e0:	f7f7 fd14 	bl	8119f0c <lwip_htons>
 81224e4:	4603      	mov	r3, r0
 81224e6:	b2db      	uxtb	r3, r3
 81224e8:	f003 0302 	and.w	r3, r3, #2
 81224ec:	2b00      	cmp	r3, #0
 81224ee:	d005      	beq.n	81224fc <tcp_receive+0x934>
                inseg.len -= 1;
 81224f0:	4b78      	ldr	r3, [pc, #480]	@ (81226d4 <tcp_receive+0xb0c>)
 81224f2:	891b      	ldrh	r3, [r3, #8]
 81224f4:	3b01      	subs	r3, #1
 81224f6:	b29a      	uxth	r2, r3
 81224f8:	4b76      	ldr	r3, [pc, #472]	@ (81226d4 <tcp_receive+0xb0c>)
 81224fa:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 81224fc:	4b75      	ldr	r3, [pc, #468]	@ (81226d4 <tcp_receive+0xb0c>)
 81224fe:	685b      	ldr	r3, [r3, #4]
 8122500:	4a74      	ldr	r2, [pc, #464]	@ (81226d4 <tcp_receive+0xb0c>)
 8122502:	8912      	ldrh	r2, [r2, #8]
 8122504:	4611      	mov	r1, r2
 8122506:	4618      	mov	r0, r3
 8122508:	f7fb fd84 	bl	811e014 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 812250c:	4b71      	ldr	r3, [pc, #452]	@ (81226d4 <tcp_receive+0xb0c>)
 812250e:	891c      	ldrh	r4, [r3, #8]
 8122510:	4b70      	ldr	r3, [pc, #448]	@ (81226d4 <tcp_receive+0xb0c>)
 8122512:	68db      	ldr	r3, [r3, #12]
 8122514:	899b      	ldrh	r3, [r3, #12]
 8122516:	b29b      	uxth	r3, r3
 8122518:	4618      	mov	r0, r3
 812251a:	f7f7 fcf7 	bl	8119f0c <lwip_htons>
 812251e:	4603      	mov	r3, r0
 8122520:	b2db      	uxtb	r3, r3
 8122522:	f003 0303 	and.w	r3, r3, #3
 8122526:	2b00      	cmp	r3, #0
 8122528:	d001      	beq.n	812252e <tcp_receive+0x966>
 812252a:	2301      	movs	r3, #1
 812252c:	e000      	b.n	8122530 <tcp_receive+0x968>
 812252e:	2300      	movs	r3, #0
 8122530:	4423      	add	r3, r4
 8122532:	b29a      	uxth	r2, r3
 8122534:	4b65      	ldr	r3, [pc, #404]	@ (81226cc <tcp_receive+0xb04>)
 8122536:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8122538:	4b64      	ldr	r3, [pc, #400]	@ (81226cc <tcp_receive+0xb04>)
 812253a:	881b      	ldrh	r3, [r3, #0]
 812253c:	461a      	mov	r2, r3
 812253e:	4b64      	ldr	r3, [pc, #400]	@ (81226d0 <tcp_receive+0xb08>)
 8122540:	681b      	ldr	r3, [r3, #0]
 8122542:	441a      	add	r2, r3
 8122544:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8122546:	68db      	ldr	r3, [r3, #12]
 8122548:	685b      	ldr	r3, [r3, #4]
 812254a:	429a      	cmp	r2, r3
 812254c:	d006      	beq.n	812255c <tcp_receive+0x994>
 812254e:	4b62      	ldr	r3, [pc, #392]	@ (81226d8 <tcp_receive+0xb10>)
 8122550:	f240 52fc 	movw	r2, #1532	@ 0x5fc
 8122554:	4961      	ldr	r1, [pc, #388]	@ (81226dc <tcp_receive+0xb14>)
 8122556:	4862      	ldr	r0, [pc, #392]	@ (81226e0 <tcp_receive+0xb18>)
 8122558:	f004 fa8c 	bl	8126a74 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 812255c:	687b      	ldr	r3, [r7, #4]
 812255e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8122560:	675a      	str	r2, [r3, #116]	@ 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8122562:	4b5a      	ldr	r3, [pc, #360]	@ (81226cc <tcp_receive+0xb04>)
 8122564:	881b      	ldrh	r3, [r3, #0]
 8122566:	461a      	mov	r2, r3
 8122568:	4b59      	ldr	r3, [pc, #356]	@ (81226d0 <tcp_receive+0xb08>)
 812256a:	681b      	ldr	r3, [r3, #0]
 812256c:	441a      	add	r2, r3
 812256e:	687b      	ldr	r3, [r7, #4]
 8122570:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8122572:	687b      	ldr	r3, [r7, #4]
 8122574:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8122576:	4b55      	ldr	r3, [pc, #340]	@ (81226cc <tcp_receive+0xb04>)
 8122578:	881b      	ldrh	r3, [r3, #0]
 812257a:	429a      	cmp	r2, r3
 812257c:	d206      	bcs.n	812258c <tcp_receive+0x9c4>
 812257e:	4b56      	ldr	r3, [pc, #344]	@ (81226d8 <tcp_receive+0xb10>)
 8122580:	f240 6207 	movw	r2, #1543	@ 0x607
 8122584:	4957      	ldr	r1, [pc, #348]	@ (81226e4 <tcp_receive+0xb1c>)
 8122586:	4856      	ldr	r0, [pc, #344]	@ (81226e0 <tcp_receive+0xb18>)
 8122588:	f004 fa74 	bl	8126a74 <iprintf>
        pcb->rcv_wnd -= tcplen;
 812258c:	687b      	ldr	r3, [r7, #4]
 812258e:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8122590:	4b4e      	ldr	r3, [pc, #312]	@ (81226cc <tcp_receive+0xb04>)
 8122592:	881b      	ldrh	r3, [r3, #0]
 8122594:	1ad3      	subs	r3, r2, r3
 8122596:	b29a      	uxth	r2, r3
 8122598:	687b      	ldr	r3, [r7, #4]
 812259a:	851a      	strh	r2, [r3, #40]	@ 0x28

        tcp_update_rcv_ann_wnd(pcb);
 812259c:	6878      	ldr	r0, [r7, #4]
 812259e:	f7fc fdf7 	bl	811f190 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 81225a2:	4b4c      	ldr	r3, [pc, #304]	@ (81226d4 <tcp_receive+0xb0c>)
 81225a4:	685b      	ldr	r3, [r3, #4]
 81225a6:	891b      	ldrh	r3, [r3, #8]
 81225a8:	2b00      	cmp	r3, #0
 81225aa:	d006      	beq.n	81225ba <tcp_receive+0x9f2>
          recv_data = inseg.p;
 81225ac:	4b49      	ldr	r3, [pc, #292]	@ (81226d4 <tcp_receive+0xb0c>)
 81225ae:	685b      	ldr	r3, [r3, #4]
 81225b0:	4a4d      	ldr	r2, [pc, #308]	@ (81226e8 <tcp_receive+0xb20>)
 81225b2:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 81225b4:	4b47      	ldr	r3, [pc, #284]	@ (81226d4 <tcp_receive+0xb0c>)
 81225b6:	2200      	movs	r2, #0
 81225b8:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 81225ba:	4b46      	ldr	r3, [pc, #280]	@ (81226d4 <tcp_receive+0xb0c>)
 81225bc:	68db      	ldr	r3, [r3, #12]
 81225be:	899b      	ldrh	r3, [r3, #12]
 81225c0:	b29b      	uxth	r3, r3
 81225c2:	4618      	mov	r0, r3
 81225c4:	f7f7 fca2 	bl	8119f0c <lwip_htons>
 81225c8:	4603      	mov	r3, r0
 81225ca:	b2db      	uxtb	r3, r3
 81225cc:	f003 0301 	and.w	r3, r3, #1
 81225d0:	2b00      	cmp	r3, #0
 81225d2:	f000 80b8 	beq.w	8122746 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 81225d6:	4b45      	ldr	r3, [pc, #276]	@ (81226ec <tcp_receive+0xb24>)
 81225d8:	781b      	ldrb	r3, [r3, #0]
 81225da:	f043 0320 	orr.w	r3, r3, #32
 81225de:	b2da      	uxtb	r2, r3
 81225e0:	4b42      	ldr	r3, [pc, #264]	@ (81226ec <tcp_receive+0xb24>)
 81225e2:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 81225e4:	e0af      	b.n	8122746 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 81225e6:	687b      	ldr	r3, [r7, #4]
 81225e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 81225ea:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 81225ec:	687b      	ldr	r3, [r7, #4]
 81225ee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 81225f0:	68db      	ldr	r3, [r3, #12]
 81225f2:	685b      	ldr	r3, [r3, #4]
 81225f4:	4a36      	ldr	r2, [pc, #216]	@ (81226d0 <tcp_receive+0xb08>)
 81225f6:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 81225f8:	68bb      	ldr	r3, [r7, #8]
 81225fa:	891b      	ldrh	r3, [r3, #8]
 81225fc:	461c      	mov	r4, r3
 81225fe:	68bb      	ldr	r3, [r7, #8]
 8122600:	68db      	ldr	r3, [r3, #12]
 8122602:	899b      	ldrh	r3, [r3, #12]
 8122604:	b29b      	uxth	r3, r3
 8122606:	4618      	mov	r0, r3
 8122608:	f7f7 fc80 	bl	8119f0c <lwip_htons>
 812260c:	4603      	mov	r3, r0
 812260e:	b2db      	uxtb	r3, r3
 8122610:	f003 0303 	and.w	r3, r3, #3
 8122614:	2b00      	cmp	r3, #0
 8122616:	d001      	beq.n	812261c <tcp_receive+0xa54>
 8122618:	2301      	movs	r3, #1
 812261a:	e000      	b.n	812261e <tcp_receive+0xa56>
 812261c:	2300      	movs	r3, #0
 812261e:	191a      	adds	r2, r3, r4
 8122620:	687b      	ldr	r3, [r7, #4]
 8122622:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8122624:	441a      	add	r2, r3
 8122626:	687b      	ldr	r3, [r7, #4]
 8122628:	625a      	str	r2, [r3, #36]	@ 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 812262a:	687b      	ldr	r3, [r7, #4]
 812262c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 812262e:	461c      	mov	r4, r3
 8122630:	68bb      	ldr	r3, [r7, #8]
 8122632:	891b      	ldrh	r3, [r3, #8]
 8122634:	461d      	mov	r5, r3
 8122636:	68bb      	ldr	r3, [r7, #8]
 8122638:	68db      	ldr	r3, [r3, #12]
 812263a:	899b      	ldrh	r3, [r3, #12]
 812263c:	b29b      	uxth	r3, r3
 812263e:	4618      	mov	r0, r3
 8122640:	f7f7 fc64 	bl	8119f0c <lwip_htons>
 8122644:	4603      	mov	r3, r0
 8122646:	b2db      	uxtb	r3, r3
 8122648:	f003 0303 	and.w	r3, r3, #3
 812264c:	2b00      	cmp	r3, #0
 812264e:	d001      	beq.n	8122654 <tcp_receive+0xa8c>
 8122650:	2301      	movs	r3, #1
 8122652:	e000      	b.n	8122656 <tcp_receive+0xa8e>
 8122654:	2300      	movs	r3, #0
 8122656:	442b      	add	r3, r5
 8122658:	429c      	cmp	r4, r3
 812265a:	d206      	bcs.n	812266a <tcp_receive+0xaa2>
 812265c:	4b1e      	ldr	r3, [pc, #120]	@ (81226d8 <tcp_receive+0xb10>)
 812265e:	f240 622b 	movw	r2, #1579	@ 0x62b
 8122662:	4923      	ldr	r1, [pc, #140]	@ (81226f0 <tcp_receive+0xb28>)
 8122664:	481e      	ldr	r0, [pc, #120]	@ (81226e0 <tcp_receive+0xb18>)
 8122666:	f004 fa05 	bl	8126a74 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 812266a:	68bb      	ldr	r3, [r7, #8]
 812266c:	891b      	ldrh	r3, [r3, #8]
 812266e:	461c      	mov	r4, r3
 8122670:	68bb      	ldr	r3, [r7, #8]
 8122672:	68db      	ldr	r3, [r3, #12]
 8122674:	899b      	ldrh	r3, [r3, #12]
 8122676:	b29b      	uxth	r3, r3
 8122678:	4618      	mov	r0, r3
 812267a:	f7f7 fc47 	bl	8119f0c <lwip_htons>
 812267e:	4603      	mov	r3, r0
 8122680:	b2db      	uxtb	r3, r3
 8122682:	f003 0303 	and.w	r3, r3, #3
 8122686:	2b00      	cmp	r3, #0
 8122688:	d001      	beq.n	812268e <tcp_receive+0xac6>
 812268a:	2301      	movs	r3, #1
 812268c:	e000      	b.n	8122690 <tcp_receive+0xac8>
 812268e:	2300      	movs	r3, #0
 8122690:	1919      	adds	r1, r3, r4
 8122692:	687b      	ldr	r3, [r7, #4]
 8122694:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8122696:	b28b      	uxth	r3, r1
 8122698:	1ad3      	subs	r3, r2, r3
 812269a:	b29a      	uxth	r2, r3
 812269c:	687b      	ldr	r3, [r7, #4]
 812269e:	851a      	strh	r2, [r3, #40]	@ 0x28

          tcp_update_rcv_ann_wnd(pcb);
 81226a0:	6878      	ldr	r0, [r7, #4]
 81226a2:	f7fc fd75 	bl	811f190 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 81226a6:	68bb      	ldr	r3, [r7, #8]
 81226a8:	685b      	ldr	r3, [r3, #4]
 81226aa:	891b      	ldrh	r3, [r3, #8]
 81226ac:	2b00      	cmp	r3, #0
 81226ae:	d028      	beq.n	8122702 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 81226b0:	4b0d      	ldr	r3, [pc, #52]	@ (81226e8 <tcp_receive+0xb20>)
 81226b2:	681b      	ldr	r3, [r3, #0]
 81226b4:	2b00      	cmp	r3, #0
 81226b6:	d01d      	beq.n	81226f4 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 81226b8:	4b0b      	ldr	r3, [pc, #44]	@ (81226e8 <tcp_receive+0xb20>)
 81226ba:	681a      	ldr	r2, [r3, #0]
 81226bc:	68bb      	ldr	r3, [r7, #8]
 81226be:	685b      	ldr	r3, [r3, #4]
 81226c0:	4619      	mov	r1, r3
 81226c2:	4610      	mov	r0, r2
 81226c4:	f7fb fef8 	bl	811e4b8 <pbuf_cat>
 81226c8:	e018      	b.n	81226fc <tcp_receive+0xb34>
 81226ca:	bf00      	nop
 81226cc:	1000e54e 	.word	0x1000e54e
 81226d0:	1000e544 	.word	0x1000e544
 81226d4:	1000e524 	.word	0x1000e524
 81226d8:	08129a38 	.word	0x08129a38
 81226dc:	08129e58 	.word	0x08129e58
 81226e0:	08129ac4 	.word	0x08129ac4
 81226e4:	08129e94 	.word	0x08129e94
 81226e8:	1000e554 	.word	0x1000e554
 81226ec:	1000e551 	.word	0x1000e551
 81226f0:	08129eb4 	.word	0x08129eb4
            } else {
              recv_data = cseg->p;
 81226f4:	68bb      	ldr	r3, [r7, #8]
 81226f6:	685b      	ldr	r3, [r3, #4]
 81226f8:	4a70      	ldr	r2, [pc, #448]	@ (81228bc <tcp_receive+0xcf4>)
 81226fa:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 81226fc:	68bb      	ldr	r3, [r7, #8]
 81226fe:	2200      	movs	r2, #0
 8122700:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8122702:	68bb      	ldr	r3, [r7, #8]
 8122704:	68db      	ldr	r3, [r3, #12]
 8122706:	899b      	ldrh	r3, [r3, #12]
 8122708:	b29b      	uxth	r3, r3
 812270a:	4618      	mov	r0, r3
 812270c:	f7f7 fbfe 	bl	8119f0c <lwip_htons>
 8122710:	4603      	mov	r3, r0
 8122712:	b2db      	uxtb	r3, r3
 8122714:	f003 0301 	and.w	r3, r3, #1
 8122718:	2b00      	cmp	r3, #0
 812271a:	d00d      	beq.n	8122738 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 812271c:	4b68      	ldr	r3, [pc, #416]	@ (81228c0 <tcp_receive+0xcf8>)
 812271e:	781b      	ldrb	r3, [r3, #0]
 8122720:	f043 0320 	orr.w	r3, r3, #32
 8122724:	b2da      	uxtb	r2, r3
 8122726:	4b66      	ldr	r3, [pc, #408]	@ (81228c0 <tcp_receive+0xcf8>)
 8122728:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 812272a:	687b      	ldr	r3, [r7, #4]
 812272c:	7d1b      	ldrb	r3, [r3, #20]
 812272e:	2b04      	cmp	r3, #4
 8122730:	d102      	bne.n	8122738 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 8122732:	687b      	ldr	r3, [r7, #4]
 8122734:	2207      	movs	r2, #7
 8122736:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8122738:	68bb      	ldr	r3, [r7, #8]
 812273a:	681a      	ldr	r2, [r3, #0]
 812273c:	687b      	ldr	r3, [r7, #4]
 812273e:	675a      	str	r2, [r3, #116]	@ 0x74
          tcp_seg_free(cseg);
 8122740:	68b8      	ldr	r0, [r7, #8]
 8122742:	f7fd fb6c 	bl	811fe1e <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8122746:	687b      	ldr	r3, [r7, #4]
 8122748:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 812274a:	2b00      	cmp	r3, #0
 812274c:	d008      	beq.n	8122760 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 812274e:	687b      	ldr	r3, [r7, #4]
 8122750:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8122752:	68db      	ldr	r3, [r3, #12]
 8122754:	685a      	ldr	r2, [r3, #4]
 8122756:	687b      	ldr	r3, [r7, #4]
 8122758:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        while (pcb->ooseq != NULL &&
 812275a:	429a      	cmp	r2, r3
 812275c:	f43f af43 	beq.w	81225e6 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8122760:	687b      	ldr	r3, [r7, #4]
 8122762:	8b5b      	ldrh	r3, [r3, #26]
 8122764:	f003 0301 	and.w	r3, r3, #1
 8122768:	2b00      	cmp	r3, #0
 812276a:	d00e      	beq.n	812278a <tcp_receive+0xbc2>
 812276c:	687b      	ldr	r3, [r7, #4]
 812276e:	8b5b      	ldrh	r3, [r3, #26]
 8122770:	f023 0301 	bic.w	r3, r3, #1
 8122774:	b29a      	uxth	r2, r3
 8122776:	687b      	ldr	r3, [r7, #4]
 8122778:	835a      	strh	r2, [r3, #26]
 812277a:	687b      	ldr	r3, [r7, #4]
 812277c:	8b5b      	ldrh	r3, [r3, #26]
 812277e:	f043 0302 	orr.w	r3, r3, #2
 8122782:	b29a      	uxth	r2, r3
 8122784:	687b      	ldr	r3, [r7, #4]
 8122786:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8122788:	e187      	b.n	8122a9a <tcp_receive+0xed2>
        tcp_ack(pcb);
 812278a:	687b      	ldr	r3, [r7, #4]
 812278c:	8b5b      	ldrh	r3, [r3, #26]
 812278e:	f043 0301 	orr.w	r3, r3, #1
 8122792:	b29a      	uxth	r2, r3
 8122794:	687b      	ldr	r3, [r7, #4]
 8122796:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8122798:	e17f      	b.n	8122a9a <tcp_receive+0xed2>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 812279a:	687b      	ldr	r3, [r7, #4]
 812279c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 812279e:	2b00      	cmp	r3, #0
 81227a0:	d106      	bne.n	81227b0 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 81227a2:	4848      	ldr	r0, [pc, #288]	@ (81228c4 <tcp_receive+0xcfc>)
 81227a4:	f7fd fb54 	bl	811fe50 <tcp_seg_copy>
 81227a8:	4602      	mov	r2, r0
 81227aa:	687b      	ldr	r3, [r7, #4]
 81227ac:	675a      	str	r2, [r3, #116]	@ 0x74
 81227ae:	e16c      	b.n	8122a8a <tcp_receive+0xec2>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 81227b0:	2300      	movs	r3, #0
 81227b2:	637b      	str	r3, [r7, #52]	@ 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 81227b4:	687b      	ldr	r3, [r7, #4]
 81227b6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 81227b8:	63bb      	str	r3, [r7, #56]	@ 0x38
 81227ba:	e156      	b.n	8122a6a <tcp_receive+0xea2>
            if (seqno == next->tcphdr->seqno) {
 81227bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81227be:	68db      	ldr	r3, [r3, #12]
 81227c0:	685a      	ldr	r2, [r3, #4]
 81227c2:	4b41      	ldr	r3, [pc, #260]	@ (81228c8 <tcp_receive+0xd00>)
 81227c4:	681b      	ldr	r3, [r3, #0]
 81227c6:	429a      	cmp	r2, r3
 81227c8:	d11d      	bne.n	8122806 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 81227ca:	4b3e      	ldr	r3, [pc, #248]	@ (81228c4 <tcp_receive+0xcfc>)
 81227cc:	891a      	ldrh	r2, [r3, #8]
 81227ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81227d0:	891b      	ldrh	r3, [r3, #8]
 81227d2:	429a      	cmp	r2, r3
 81227d4:	f240 814e 	bls.w	8122a74 <tcp_receive+0xeac>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 81227d8:	483a      	ldr	r0, [pc, #232]	@ (81228c4 <tcp_receive+0xcfc>)
 81227da:	f7fd fb39 	bl	811fe50 <tcp_seg_copy>
 81227de:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 81227e0:	697b      	ldr	r3, [r7, #20]
 81227e2:	2b00      	cmp	r3, #0
 81227e4:	f000 8148 	beq.w	8122a78 <tcp_receive+0xeb0>
                  if (prev != NULL) {
 81227e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81227ea:	2b00      	cmp	r3, #0
 81227ec:	d003      	beq.n	81227f6 <tcp_receive+0xc2e>
                    prev->next = cseg;
 81227ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81227f0:	697a      	ldr	r2, [r7, #20]
 81227f2:	601a      	str	r2, [r3, #0]
 81227f4:	e002      	b.n	81227fc <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 81227f6:	687b      	ldr	r3, [r7, #4]
 81227f8:	697a      	ldr	r2, [r7, #20]
 81227fa:	675a      	str	r2, [r3, #116]	@ 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 81227fc:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 81227fe:	6978      	ldr	r0, [r7, #20]
 8122800:	f7ff f8de 	bl	81219c0 <tcp_oos_insert_segment>
                }
                break;
 8122804:	e138      	b.n	8122a78 <tcp_receive+0xeb0>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8122806:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8122808:	2b00      	cmp	r3, #0
 812280a:	d117      	bne.n	812283c <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 812280c:	4b2e      	ldr	r3, [pc, #184]	@ (81228c8 <tcp_receive+0xd00>)
 812280e:	681a      	ldr	r2, [r3, #0]
 8122810:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8122812:	68db      	ldr	r3, [r3, #12]
 8122814:	685b      	ldr	r3, [r3, #4]
 8122816:	1ad3      	subs	r3, r2, r3
 8122818:	2b00      	cmp	r3, #0
 812281a:	da57      	bge.n	81228cc <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 812281c:	4829      	ldr	r0, [pc, #164]	@ (81228c4 <tcp_receive+0xcfc>)
 812281e:	f7fd fb17 	bl	811fe50 <tcp_seg_copy>
 8122822:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8122824:	69bb      	ldr	r3, [r7, #24]
 8122826:	2b00      	cmp	r3, #0
 8122828:	f000 8128 	beq.w	8122a7c <tcp_receive+0xeb4>
                    pcb->ooseq = cseg;
 812282c:	687b      	ldr	r3, [r7, #4]
 812282e:	69ba      	ldr	r2, [r7, #24]
 8122830:	675a      	str	r2, [r3, #116]	@ 0x74
                    tcp_oos_insert_segment(cseg, next);
 8122832:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8122834:	69b8      	ldr	r0, [r7, #24]
 8122836:	f7ff f8c3 	bl	81219c0 <tcp_oos_insert_segment>
                  }
                  break;
 812283a:	e11f      	b.n	8122a7c <tcp_receive+0xeb4>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 812283c:	4b22      	ldr	r3, [pc, #136]	@ (81228c8 <tcp_receive+0xd00>)
 812283e:	681a      	ldr	r2, [r3, #0]
 8122840:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8122842:	68db      	ldr	r3, [r3, #12]
 8122844:	685b      	ldr	r3, [r3, #4]
 8122846:	1ad3      	subs	r3, r2, r3
 8122848:	3b01      	subs	r3, #1
 812284a:	2b00      	cmp	r3, #0
 812284c:	db3e      	blt.n	81228cc <tcp_receive+0xd04>
 812284e:	4b1e      	ldr	r3, [pc, #120]	@ (81228c8 <tcp_receive+0xd00>)
 8122850:	681a      	ldr	r2, [r3, #0]
 8122852:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8122854:	68db      	ldr	r3, [r3, #12]
 8122856:	685b      	ldr	r3, [r3, #4]
 8122858:	1ad3      	subs	r3, r2, r3
 812285a:	3301      	adds	r3, #1
 812285c:	2b00      	cmp	r3, #0
 812285e:	dc35      	bgt.n	81228cc <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8122860:	4818      	ldr	r0, [pc, #96]	@ (81228c4 <tcp_receive+0xcfc>)
 8122862:	f7fd faf5 	bl	811fe50 <tcp_seg_copy>
 8122866:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8122868:	69fb      	ldr	r3, [r7, #28]
 812286a:	2b00      	cmp	r3, #0
 812286c:	f000 8108 	beq.w	8122a80 <tcp_receive+0xeb8>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8122870:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8122872:	68db      	ldr	r3, [r3, #12]
 8122874:	685b      	ldr	r3, [r3, #4]
 8122876:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8122878:	8912      	ldrh	r2, [r2, #8]
 812287a:	441a      	add	r2, r3
 812287c:	4b12      	ldr	r3, [pc, #72]	@ (81228c8 <tcp_receive+0xd00>)
 812287e:	681b      	ldr	r3, [r3, #0]
 8122880:	1ad3      	subs	r3, r2, r3
 8122882:	2b00      	cmp	r3, #0
 8122884:	dd12      	ble.n	81228ac <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8122886:	4b10      	ldr	r3, [pc, #64]	@ (81228c8 <tcp_receive+0xd00>)
 8122888:	681b      	ldr	r3, [r3, #0]
 812288a:	b29a      	uxth	r2, r3
 812288c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 812288e:	68db      	ldr	r3, [r3, #12]
 8122890:	685b      	ldr	r3, [r3, #4]
 8122892:	b29b      	uxth	r3, r3
 8122894:	1ad3      	subs	r3, r2, r3
 8122896:	b29a      	uxth	r2, r3
 8122898:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 812289a:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 812289c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 812289e:	685a      	ldr	r2, [r3, #4]
 81228a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81228a2:	891b      	ldrh	r3, [r3, #8]
 81228a4:	4619      	mov	r1, r3
 81228a6:	4610      	mov	r0, r2
 81228a8:	f7fb fbb4 	bl	811e014 <pbuf_realloc>
                    }
                    prev->next = cseg;
 81228ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81228ae:	69fa      	ldr	r2, [r7, #28]
 81228b0:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 81228b2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 81228b4:	69f8      	ldr	r0, [r7, #28]
 81228b6:	f7ff f883 	bl	81219c0 <tcp_oos_insert_segment>
                  }
                  break;
 81228ba:	e0e1      	b.n	8122a80 <tcp_receive+0xeb8>
 81228bc:	1000e554 	.word	0x1000e554
 81228c0:	1000e551 	.word	0x1000e551
 81228c4:	1000e524 	.word	0x1000e524
 81228c8:	1000e544 	.word	0x1000e544
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 81228cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81228ce:	637b      	str	r3, [r7, #52]	@ 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 81228d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81228d2:	681b      	ldr	r3, [r3, #0]
 81228d4:	2b00      	cmp	r3, #0
 81228d6:	f040 80c5 	bne.w	8122a64 <tcp_receive+0xe9c>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 81228da:	4b7f      	ldr	r3, [pc, #508]	@ (8122ad8 <tcp_receive+0xf10>)
 81228dc:	681a      	ldr	r2, [r3, #0]
 81228de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81228e0:	68db      	ldr	r3, [r3, #12]
 81228e2:	685b      	ldr	r3, [r3, #4]
 81228e4:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 81228e6:	2b00      	cmp	r3, #0
 81228e8:	f340 80bc 	ble.w	8122a64 <tcp_receive+0xe9c>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 81228ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81228ee:	68db      	ldr	r3, [r3, #12]
 81228f0:	899b      	ldrh	r3, [r3, #12]
 81228f2:	b29b      	uxth	r3, r3
 81228f4:	4618      	mov	r0, r3
 81228f6:	f7f7 fb09 	bl	8119f0c <lwip_htons>
 81228fa:	4603      	mov	r3, r0
 81228fc:	b2db      	uxtb	r3, r3
 81228fe:	f003 0301 	and.w	r3, r3, #1
 8122902:	2b00      	cmp	r3, #0
 8122904:	f040 80be 	bne.w	8122a84 <tcp_receive+0xebc>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8122908:	4874      	ldr	r0, [pc, #464]	@ (8122adc <tcp_receive+0xf14>)
 812290a:	f7fd faa1 	bl	811fe50 <tcp_seg_copy>
 812290e:	4602      	mov	r2, r0
 8122910:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8122912:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8122914:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8122916:	681b      	ldr	r3, [r3, #0]
 8122918:	2b00      	cmp	r3, #0
 812291a:	f000 80b5 	beq.w	8122a88 <tcp_receive+0xec0>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 812291e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8122920:	68db      	ldr	r3, [r3, #12]
 8122922:	685b      	ldr	r3, [r3, #4]
 8122924:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8122926:	8912      	ldrh	r2, [r2, #8]
 8122928:	441a      	add	r2, r3
 812292a:	4b6b      	ldr	r3, [pc, #428]	@ (8122ad8 <tcp_receive+0xf10>)
 812292c:	681b      	ldr	r3, [r3, #0]
 812292e:	1ad3      	subs	r3, r2, r3
 8122930:	2b00      	cmp	r3, #0
 8122932:	dd12      	ble.n	812295a <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8122934:	4b68      	ldr	r3, [pc, #416]	@ (8122ad8 <tcp_receive+0xf10>)
 8122936:	681b      	ldr	r3, [r3, #0]
 8122938:	b29a      	uxth	r2, r3
 812293a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 812293c:	68db      	ldr	r3, [r3, #12]
 812293e:	685b      	ldr	r3, [r3, #4]
 8122940:	b29b      	uxth	r3, r3
 8122942:	1ad3      	subs	r3, r2, r3
 8122944:	b29a      	uxth	r2, r3
 8122946:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8122948:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 812294a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 812294c:	685a      	ldr	r2, [r3, #4]
 812294e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8122950:	891b      	ldrh	r3, [r3, #8]
 8122952:	4619      	mov	r1, r3
 8122954:	4610      	mov	r0, r2
 8122956:	f7fb fb5d 	bl	811e014 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 812295a:	4b61      	ldr	r3, [pc, #388]	@ (8122ae0 <tcp_receive+0xf18>)
 812295c:	881b      	ldrh	r3, [r3, #0]
 812295e:	461a      	mov	r2, r3
 8122960:	4b5d      	ldr	r3, [pc, #372]	@ (8122ad8 <tcp_receive+0xf10>)
 8122962:	681b      	ldr	r3, [r3, #0]
 8122964:	441a      	add	r2, r3
 8122966:	687b      	ldr	r3, [r7, #4]
 8122968:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 812296a:	6879      	ldr	r1, [r7, #4]
 812296c:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 812296e:	440b      	add	r3, r1
 8122970:	1ad3      	subs	r3, r2, r3
 8122972:	2b00      	cmp	r3, #0
 8122974:	f340 8088 	ble.w	8122a88 <tcp_receive+0xec0>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8122978:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 812297a:	681b      	ldr	r3, [r3, #0]
 812297c:	68db      	ldr	r3, [r3, #12]
 812297e:	899b      	ldrh	r3, [r3, #12]
 8122980:	b29b      	uxth	r3, r3
 8122982:	4618      	mov	r0, r3
 8122984:	f7f7 fac2 	bl	8119f0c <lwip_htons>
 8122988:	4603      	mov	r3, r0
 812298a:	b2db      	uxtb	r3, r3
 812298c:	f003 0301 	and.w	r3, r3, #1
 8122990:	2b00      	cmp	r3, #0
 8122992:	d021      	beq.n	81229d8 <tcp_receive+0xe10>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8122994:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8122996:	681b      	ldr	r3, [r3, #0]
 8122998:	68db      	ldr	r3, [r3, #12]
 812299a:	899b      	ldrh	r3, [r3, #12]
 812299c:	b29b      	uxth	r3, r3
 812299e:	b21b      	sxth	r3, r3
 81229a0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 81229a4:	b21c      	sxth	r4, r3
 81229a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81229a8:	681b      	ldr	r3, [r3, #0]
 81229aa:	68db      	ldr	r3, [r3, #12]
 81229ac:	899b      	ldrh	r3, [r3, #12]
 81229ae:	b29b      	uxth	r3, r3
 81229b0:	4618      	mov	r0, r3
 81229b2:	f7f7 faab 	bl	8119f0c <lwip_htons>
 81229b6:	4603      	mov	r3, r0
 81229b8:	b2db      	uxtb	r3, r3
 81229ba:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 81229be:	b29b      	uxth	r3, r3
 81229c0:	4618      	mov	r0, r3
 81229c2:	f7f7 faa3 	bl	8119f0c <lwip_htons>
 81229c6:	4603      	mov	r3, r0
 81229c8:	b21b      	sxth	r3, r3
 81229ca:	4323      	orrs	r3, r4
 81229cc:	b21a      	sxth	r2, r3
 81229ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81229d0:	681b      	ldr	r3, [r3, #0]
 81229d2:	68db      	ldr	r3, [r3, #12]
 81229d4:	b292      	uxth	r2, r2
 81229d6:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 81229d8:	687b      	ldr	r3, [r7, #4]
 81229da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 81229dc:	b29a      	uxth	r2, r3
 81229de:	687b      	ldr	r3, [r7, #4]
 81229e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 81229e2:	4413      	add	r3, r2
 81229e4:	b299      	uxth	r1, r3
 81229e6:	4b3c      	ldr	r3, [pc, #240]	@ (8122ad8 <tcp_receive+0xf10>)
 81229e8:	681b      	ldr	r3, [r3, #0]
 81229ea:	b29a      	uxth	r2, r3
 81229ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81229ee:	681b      	ldr	r3, [r3, #0]
 81229f0:	1a8a      	subs	r2, r1, r2
 81229f2:	b292      	uxth	r2, r2
 81229f4:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 81229f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81229f8:	681b      	ldr	r3, [r3, #0]
 81229fa:	685a      	ldr	r2, [r3, #4]
 81229fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81229fe:	681b      	ldr	r3, [r3, #0]
 8122a00:	891b      	ldrh	r3, [r3, #8]
 8122a02:	4619      	mov	r1, r3
 8122a04:	4610      	mov	r0, r2
 8122a06:	f7fb fb05 	bl	811e014 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8122a0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8122a0c:	681b      	ldr	r3, [r3, #0]
 8122a0e:	891c      	ldrh	r4, [r3, #8]
 8122a10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8122a12:	681b      	ldr	r3, [r3, #0]
 8122a14:	68db      	ldr	r3, [r3, #12]
 8122a16:	899b      	ldrh	r3, [r3, #12]
 8122a18:	b29b      	uxth	r3, r3
 8122a1a:	4618      	mov	r0, r3
 8122a1c:	f7f7 fa76 	bl	8119f0c <lwip_htons>
 8122a20:	4603      	mov	r3, r0
 8122a22:	b2db      	uxtb	r3, r3
 8122a24:	f003 0303 	and.w	r3, r3, #3
 8122a28:	2b00      	cmp	r3, #0
 8122a2a:	d001      	beq.n	8122a30 <tcp_receive+0xe68>
 8122a2c:	2301      	movs	r3, #1
 8122a2e:	e000      	b.n	8122a32 <tcp_receive+0xe6a>
 8122a30:	2300      	movs	r3, #0
 8122a32:	4423      	add	r3, r4
 8122a34:	b29a      	uxth	r2, r3
 8122a36:	4b2a      	ldr	r3, [pc, #168]	@ (8122ae0 <tcp_receive+0xf18>)
 8122a38:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8122a3a:	4b29      	ldr	r3, [pc, #164]	@ (8122ae0 <tcp_receive+0xf18>)
 8122a3c:	881b      	ldrh	r3, [r3, #0]
 8122a3e:	461a      	mov	r2, r3
 8122a40:	4b25      	ldr	r3, [pc, #148]	@ (8122ad8 <tcp_receive+0xf10>)
 8122a42:	681b      	ldr	r3, [r3, #0]
 8122a44:	441a      	add	r2, r3
 8122a46:	687b      	ldr	r3, [r7, #4]
 8122a48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8122a4a:	6879      	ldr	r1, [r7, #4]
 8122a4c:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8122a4e:	440b      	add	r3, r1
 8122a50:	429a      	cmp	r2, r3
 8122a52:	d019      	beq.n	8122a88 <tcp_receive+0xec0>
 8122a54:	4b23      	ldr	r3, [pc, #140]	@ (8122ae4 <tcp_receive+0xf1c>)
 8122a56:	f44f 62df 	mov.w	r2, #1784	@ 0x6f8
 8122a5a:	4923      	ldr	r1, [pc, #140]	@ (8122ae8 <tcp_receive+0xf20>)
 8122a5c:	4823      	ldr	r0, [pc, #140]	@ (8122aec <tcp_receive+0xf24>)
 8122a5e:	f004 f809 	bl	8126a74 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8122a62:	e011      	b.n	8122a88 <tcp_receive+0xec0>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8122a64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8122a66:	681b      	ldr	r3, [r3, #0]
 8122a68:	63bb      	str	r3, [r7, #56]	@ 0x38
 8122a6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8122a6c:	2b00      	cmp	r3, #0
 8122a6e:	f47f aea5 	bne.w	81227bc <tcp_receive+0xbf4>
 8122a72:	e00a      	b.n	8122a8a <tcp_receive+0xec2>
                break;
 8122a74:	bf00      	nop
 8122a76:	e008      	b.n	8122a8a <tcp_receive+0xec2>
                break;
 8122a78:	bf00      	nop
 8122a7a:	e006      	b.n	8122a8a <tcp_receive+0xec2>
                  break;
 8122a7c:	bf00      	nop
 8122a7e:	e004      	b.n	8122a8a <tcp_receive+0xec2>
                  break;
 8122a80:	bf00      	nop
 8122a82:	e002      	b.n	8122a8a <tcp_receive+0xec2>
                  break;
 8122a84:	bf00      	nop
 8122a86:	e000      	b.n	8122a8a <tcp_receive+0xec2>
                break;
 8122a88:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8122a8a:	6878      	ldr	r0, [r7, #4]
 8122a8c:	f001 fe88 	bl	81247a0 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8122a90:	e003      	b.n	8122a9a <tcp_receive+0xed2>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8122a92:	6878      	ldr	r0, [r7, #4]
 8122a94:	f001 fe84 	bl	81247a0 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8122a98:	e01a      	b.n	8122ad0 <tcp_receive+0xf08>
 8122a9a:	e019      	b.n	8122ad0 <tcp_receive+0xf08>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8122a9c:	4b0e      	ldr	r3, [pc, #56]	@ (8122ad8 <tcp_receive+0xf10>)
 8122a9e:	681a      	ldr	r2, [r3, #0]
 8122aa0:	687b      	ldr	r3, [r7, #4]
 8122aa2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8122aa4:	1ad3      	subs	r3, r2, r3
 8122aa6:	2b00      	cmp	r3, #0
 8122aa8:	db0a      	blt.n	8122ac0 <tcp_receive+0xef8>
 8122aaa:	4b0b      	ldr	r3, [pc, #44]	@ (8122ad8 <tcp_receive+0xf10>)
 8122aac:	681a      	ldr	r2, [r3, #0]
 8122aae:	687b      	ldr	r3, [r7, #4]
 8122ab0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8122ab2:	6879      	ldr	r1, [r7, #4]
 8122ab4:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8122ab6:	440b      	add	r3, r1
 8122ab8:	1ad3      	subs	r3, r2, r3
 8122aba:	3301      	adds	r3, #1
 8122abc:	2b00      	cmp	r3, #0
 8122abe:	dd07      	ble.n	8122ad0 <tcp_receive+0xf08>
      tcp_ack_now(pcb);
 8122ac0:	687b      	ldr	r3, [r7, #4]
 8122ac2:	8b5b      	ldrh	r3, [r3, #26]
 8122ac4:	f043 0302 	orr.w	r3, r3, #2
 8122ac8:	b29a      	uxth	r2, r3
 8122aca:	687b      	ldr	r3, [r7, #4]
 8122acc:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8122ace:	e7ff      	b.n	8122ad0 <tcp_receive+0xf08>
 8122ad0:	bf00      	nop
 8122ad2:	3750      	adds	r7, #80	@ 0x50
 8122ad4:	46bd      	mov	sp, r7
 8122ad6:	bdb0      	pop	{r4, r5, r7, pc}
 8122ad8:	1000e544 	.word	0x1000e544
 8122adc:	1000e524 	.word	0x1000e524
 8122ae0:	1000e54e 	.word	0x1000e54e
 8122ae4:	08129a38 	.word	0x08129a38
 8122ae8:	08129e20 	.word	0x08129e20
 8122aec:	08129ac4 	.word	0x08129ac4

08122af0 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8122af0:	b480      	push	{r7}
 8122af2:	b083      	sub	sp, #12
 8122af4:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8122af6:	4b15      	ldr	r3, [pc, #84]	@ (8122b4c <tcp_get_next_optbyte+0x5c>)
 8122af8:	881b      	ldrh	r3, [r3, #0]
 8122afa:	1c5a      	adds	r2, r3, #1
 8122afc:	b291      	uxth	r1, r2
 8122afe:	4a13      	ldr	r2, [pc, #76]	@ (8122b4c <tcp_get_next_optbyte+0x5c>)
 8122b00:	8011      	strh	r1, [r2, #0]
 8122b02:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8122b04:	4b12      	ldr	r3, [pc, #72]	@ (8122b50 <tcp_get_next_optbyte+0x60>)
 8122b06:	681b      	ldr	r3, [r3, #0]
 8122b08:	2b00      	cmp	r3, #0
 8122b0a:	d004      	beq.n	8122b16 <tcp_get_next_optbyte+0x26>
 8122b0c:	4b11      	ldr	r3, [pc, #68]	@ (8122b54 <tcp_get_next_optbyte+0x64>)
 8122b0e:	881b      	ldrh	r3, [r3, #0]
 8122b10:	88fa      	ldrh	r2, [r7, #6]
 8122b12:	429a      	cmp	r2, r3
 8122b14:	d208      	bcs.n	8122b28 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8122b16:	4b10      	ldr	r3, [pc, #64]	@ (8122b58 <tcp_get_next_optbyte+0x68>)
 8122b18:	681b      	ldr	r3, [r3, #0]
 8122b1a:	3314      	adds	r3, #20
 8122b1c:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8122b1e:	88fb      	ldrh	r3, [r7, #6]
 8122b20:	683a      	ldr	r2, [r7, #0]
 8122b22:	4413      	add	r3, r2
 8122b24:	781b      	ldrb	r3, [r3, #0]
 8122b26:	e00b      	b.n	8122b40 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8122b28:	88fb      	ldrh	r3, [r7, #6]
 8122b2a:	b2da      	uxtb	r2, r3
 8122b2c:	4b09      	ldr	r3, [pc, #36]	@ (8122b54 <tcp_get_next_optbyte+0x64>)
 8122b2e:	881b      	ldrh	r3, [r3, #0]
 8122b30:	b2db      	uxtb	r3, r3
 8122b32:	1ad3      	subs	r3, r2, r3
 8122b34:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8122b36:	4b06      	ldr	r3, [pc, #24]	@ (8122b50 <tcp_get_next_optbyte+0x60>)
 8122b38:	681a      	ldr	r2, [r3, #0]
 8122b3a:	797b      	ldrb	r3, [r7, #5]
 8122b3c:	4413      	add	r3, r2
 8122b3e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8122b40:	4618      	mov	r0, r3
 8122b42:	370c      	adds	r7, #12
 8122b44:	46bd      	mov	sp, r7
 8122b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8122b4a:	4770      	bx	lr
 8122b4c:	1000e540 	.word	0x1000e540
 8122b50:	1000e53c 	.word	0x1000e53c
 8122b54:	1000e53a 	.word	0x1000e53a
 8122b58:	1000e534 	.word	0x1000e534

08122b5c <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8122b5c:	b580      	push	{r7, lr}
 8122b5e:	b084      	sub	sp, #16
 8122b60:	af00      	add	r7, sp, #0
 8122b62:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8122b64:	687b      	ldr	r3, [r7, #4]
 8122b66:	2b00      	cmp	r3, #0
 8122b68:	d106      	bne.n	8122b78 <tcp_parseopt+0x1c>
 8122b6a:	4b32      	ldr	r3, [pc, #200]	@ (8122c34 <tcp_parseopt+0xd8>)
 8122b6c:	f240 727d 	movw	r2, #1917	@ 0x77d
 8122b70:	4931      	ldr	r1, [pc, #196]	@ (8122c38 <tcp_parseopt+0xdc>)
 8122b72:	4832      	ldr	r0, [pc, #200]	@ (8122c3c <tcp_parseopt+0xe0>)
 8122b74:	f003 ff7e 	bl	8126a74 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8122b78:	4b31      	ldr	r3, [pc, #196]	@ (8122c40 <tcp_parseopt+0xe4>)
 8122b7a:	881b      	ldrh	r3, [r3, #0]
 8122b7c:	2b00      	cmp	r3, #0
 8122b7e:	d056      	beq.n	8122c2e <tcp_parseopt+0xd2>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8122b80:	4b30      	ldr	r3, [pc, #192]	@ (8122c44 <tcp_parseopt+0xe8>)
 8122b82:	2200      	movs	r2, #0
 8122b84:	801a      	strh	r2, [r3, #0]
 8122b86:	e046      	b.n	8122c16 <tcp_parseopt+0xba>
      u8_t opt = tcp_get_next_optbyte();
 8122b88:	f7ff ffb2 	bl	8122af0 <tcp_get_next_optbyte>
 8122b8c:	4603      	mov	r3, r0
 8122b8e:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8122b90:	7bfb      	ldrb	r3, [r7, #15]
 8122b92:	2b02      	cmp	r3, #2
 8122b94:	d006      	beq.n	8122ba4 <tcp_parseopt+0x48>
 8122b96:	2b02      	cmp	r3, #2
 8122b98:	dc2a      	bgt.n	8122bf0 <tcp_parseopt+0x94>
 8122b9a:	2b00      	cmp	r3, #0
 8122b9c:	d042      	beq.n	8122c24 <tcp_parseopt+0xc8>
 8122b9e:	2b01      	cmp	r3, #1
 8122ba0:	d038      	beq.n	8122c14 <tcp_parseopt+0xb8>
 8122ba2:	e025      	b.n	8122bf0 <tcp_parseopt+0x94>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8122ba4:	f7ff ffa4 	bl	8122af0 <tcp_get_next_optbyte>
 8122ba8:	4603      	mov	r3, r0
 8122baa:	2b04      	cmp	r3, #4
 8122bac:	d13c      	bne.n	8122c28 <tcp_parseopt+0xcc>
 8122bae:	4b25      	ldr	r3, [pc, #148]	@ (8122c44 <tcp_parseopt+0xe8>)
 8122bb0:	881b      	ldrh	r3, [r3, #0]
 8122bb2:	3301      	adds	r3, #1
 8122bb4:	4a22      	ldr	r2, [pc, #136]	@ (8122c40 <tcp_parseopt+0xe4>)
 8122bb6:	8812      	ldrh	r2, [r2, #0]
 8122bb8:	4293      	cmp	r3, r2
 8122bba:	da35      	bge.n	8122c28 <tcp_parseopt+0xcc>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8122bbc:	f7ff ff98 	bl	8122af0 <tcp_get_next_optbyte>
 8122bc0:	4603      	mov	r3, r0
 8122bc2:	021b      	lsls	r3, r3, #8
 8122bc4:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8122bc6:	f7ff ff93 	bl	8122af0 <tcp_get_next_optbyte>
 8122bca:	4603      	mov	r3, r0
 8122bcc:	461a      	mov	r2, r3
 8122bce:	89bb      	ldrh	r3, [r7, #12]
 8122bd0:	4313      	orrs	r3, r2
 8122bd2:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8122bd4:	89bb      	ldrh	r3, [r7, #12]
 8122bd6:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 8122bda:	d804      	bhi.n	8122be6 <tcp_parseopt+0x8a>
 8122bdc:	89bb      	ldrh	r3, [r7, #12]
 8122bde:	2b00      	cmp	r3, #0
 8122be0:	d001      	beq.n	8122be6 <tcp_parseopt+0x8a>
 8122be2:	89ba      	ldrh	r2, [r7, #12]
 8122be4:	e001      	b.n	8122bea <tcp_parseopt+0x8e>
 8122be6:	f44f 7206 	mov.w	r2, #536	@ 0x218
 8122bea:	687b      	ldr	r3, [r7, #4]
 8122bec:	865a      	strh	r2, [r3, #50]	@ 0x32
          break;
 8122bee:	e012      	b.n	8122c16 <tcp_parseopt+0xba>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8122bf0:	f7ff ff7e 	bl	8122af0 <tcp_get_next_optbyte>
 8122bf4:	4603      	mov	r3, r0
 8122bf6:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8122bf8:	7afb      	ldrb	r3, [r7, #11]
 8122bfa:	2b01      	cmp	r3, #1
 8122bfc:	d916      	bls.n	8122c2c <tcp_parseopt+0xd0>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8122bfe:	7afb      	ldrb	r3, [r7, #11]
 8122c00:	b29a      	uxth	r2, r3
 8122c02:	4b10      	ldr	r3, [pc, #64]	@ (8122c44 <tcp_parseopt+0xe8>)
 8122c04:	881b      	ldrh	r3, [r3, #0]
 8122c06:	4413      	add	r3, r2
 8122c08:	b29b      	uxth	r3, r3
 8122c0a:	3b02      	subs	r3, #2
 8122c0c:	b29a      	uxth	r2, r3
 8122c0e:	4b0d      	ldr	r3, [pc, #52]	@ (8122c44 <tcp_parseopt+0xe8>)
 8122c10:	801a      	strh	r2, [r3, #0]
 8122c12:	e000      	b.n	8122c16 <tcp_parseopt+0xba>
          break;
 8122c14:	bf00      	nop
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8122c16:	4b0b      	ldr	r3, [pc, #44]	@ (8122c44 <tcp_parseopt+0xe8>)
 8122c18:	881a      	ldrh	r2, [r3, #0]
 8122c1a:	4b09      	ldr	r3, [pc, #36]	@ (8122c40 <tcp_parseopt+0xe4>)
 8122c1c:	881b      	ldrh	r3, [r3, #0]
 8122c1e:	429a      	cmp	r2, r3
 8122c20:	d3b2      	bcc.n	8122b88 <tcp_parseopt+0x2c>
 8122c22:	e004      	b.n	8122c2e <tcp_parseopt+0xd2>
          return;
 8122c24:	bf00      	nop
 8122c26:	e002      	b.n	8122c2e <tcp_parseopt+0xd2>
            return;
 8122c28:	bf00      	nop
 8122c2a:	e000      	b.n	8122c2e <tcp_parseopt+0xd2>
            return;
 8122c2c:	bf00      	nop
      }
    }
  }
}
 8122c2e:	3710      	adds	r7, #16
 8122c30:	46bd      	mov	sp, r7
 8122c32:	bd80      	pop	{r7, pc}
 8122c34:	08129a38 	.word	0x08129a38
 8122c38:	08129edc 	.word	0x08129edc
 8122c3c:	08129ac4 	.word	0x08129ac4
 8122c40:	1000e538 	.word	0x1000e538
 8122c44:	1000e540 	.word	0x1000e540

08122c48 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8122c48:	b480      	push	{r7}
 8122c4a:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8122c4c:	4b05      	ldr	r3, [pc, #20]	@ (8122c64 <tcp_trigger_input_pcb_close+0x1c>)
 8122c4e:	781b      	ldrb	r3, [r3, #0]
 8122c50:	f043 0310 	orr.w	r3, r3, #16
 8122c54:	b2da      	uxtb	r2, r3
 8122c56:	4b03      	ldr	r3, [pc, #12]	@ (8122c64 <tcp_trigger_input_pcb_close+0x1c>)
 8122c58:	701a      	strb	r2, [r3, #0]
}
 8122c5a:	bf00      	nop
 8122c5c:	46bd      	mov	sp, r7
 8122c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8122c62:	4770      	bx	lr
 8122c64:	1000e551 	.word	0x1000e551

08122c68 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8122c68:	b580      	push	{r7, lr}
 8122c6a:	b084      	sub	sp, #16
 8122c6c:	af00      	add	r7, sp, #0
 8122c6e:	60f8      	str	r0, [r7, #12]
 8122c70:	60b9      	str	r1, [r7, #8]
 8122c72:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8122c74:	68fb      	ldr	r3, [r7, #12]
 8122c76:	2b00      	cmp	r3, #0
 8122c78:	d00a      	beq.n	8122c90 <tcp_route+0x28>
 8122c7a:	68fb      	ldr	r3, [r7, #12]
 8122c7c:	7a1b      	ldrb	r3, [r3, #8]
 8122c7e:	2b00      	cmp	r3, #0
 8122c80:	d006      	beq.n	8122c90 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8122c82:	68fb      	ldr	r3, [r7, #12]
 8122c84:	7a1b      	ldrb	r3, [r3, #8]
 8122c86:	4618      	mov	r0, r3
 8122c88:	f7fa ffbc 	bl	811dc04 <netif_get_by_index>
 8122c8c:	4603      	mov	r3, r0
 8122c8e:	e003      	b.n	8122c98 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8122c90:	6878      	ldr	r0, [r7, #4]
 8122c92:	f7f8 fcdd 	bl	811b650 <ip4_route>
 8122c96:	4603      	mov	r3, r0
  }
}
 8122c98:	4618      	mov	r0, r3
 8122c9a:	3710      	adds	r7, #16
 8122c9c:	46bd      	mov	sp, r7
 8122c9e:	bd80      	pop	{r7, pc}

08122ca0 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8122ca0:	b590      	push	{r4, r7, lr}
 8122ca2:	b087      	sub	sp, #28
 8122ca4:	af00      	add	r7, sp, #0
 8122ca6:	60f8      	str	r0, [r7, #12]
 8122ca8:	60b9      	str	r1, [r7, #8]
 8122caa:	603b      	str	r3, [r7, #0]
 8122cac:	4613      	mov	r3, r2
 8122cae:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8122cb0:	68fb      	ldr	r3, [r7, #12]
 8122cb2:	2b00      	cmp	r3, #0
 8122cb4:	d105      	bne.n	8122cc2 <tcp_create_segment+0x22>
 8122cb6:	4b43      	ldr	r3, [pc, #268]	@ (8122dc4 <tcp_create_segment+0x124>)
 8122cb8:	22a3      	movs	r2, #163	@ 0xa3
 8122cba:	4943      	ldr	r1, [pc, #268]	@ (8122dc8 <tcp_create_segment+0x128>)
 8122cbc:	4843      	ldr	r0, [pc, #268]	@ (8122dcc <tcp_create_segment+0x12c>)
 8122cbe:	f003 fed9 	bl	8126a74 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8122cc2:	68bb      	ldr	r3, [r7, #8]
 8122cc4:	2b00      	cmp	r3, #0
 8122cc6:	d105      	bne.n	8122cd4 <tcp_create_segment+0x34>
 8122cc8:	4b3e      	ldr	r3, [pc, #248]	@ (8122dc4 <tcp_create_segment+0x124>)
 8122cca:	22a4      	movs	r2, #164	@ 0xa4
 8122ccc:	4940      	ldr	r1, [pc, #256]	@ (8122dd0 <tcp_create_segment+0x130>)
 8122cce:	483f      	ldr	r0, [pc, #252]	@ (8122dcc <tcp_create_segment+0x12c>)
 8122cd0:	f003 fed0 	bl	8126a74 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8122cd4:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8122cd8:	009b      	lsls	r3, r3, #2
 8122cda:	b2db      	uxtb	r3, r3
 8122cdc:	f003 0304 	and.w	r3, r3, #4
 8122ce0:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8122ce2:	2003      	movs	r0, #3
 8122ce4:	f7fa fc02 	bl	811d4ec <memp_malloc>
 8122ce8:	6138      	str	r0, [r7, #16]
 8122cea:	693b      	ldr	r3, [r7, #16]
 8122cec:	2b00      	cmp	r3, #0
 8122cee:	d104      	bne.n	8122cfa <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8122cf0:	68b8      	ldr	r0, [r7, #8]
 8122cf2:	f7fb fb13 	bl	811e31c <pbuf_free>
    return NULL;
 8122cf6:	2300      	movs	r3, #0
 8122cf8:	e060      	b.n	8122dbc <tcp_create_segment+0x11c>
  }
  seg->flags = optflags;
 8122cfa:	693b      	ldr	r3, [r7, #16]
 8122cfc:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8122d00:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8122d02:	693b      	ldr	r3, [r7, #16]
 8122d04:	2200      	movs	r2, #0
 8122d06:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8122d08:	693b      	ldr	r3, [r7, #16]
 8122d0a:	68ba      	ldr	r2, [r7, #8]
 8122d0c:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8122d0e:	68bb      	ldr	r3, [r7, #8]
 8122d10:	891a      	ldrh	r2, [r3, #8]
 8122d12:	7dfb      	ldrb	r3, [r7, #23]
 8122d14:	b29b      	uxth	r3, r3
 8122d16:	429a      	cmp	r2, r3
 8122d18:	d205      	bcs.n	8122d26 <tcp_create_segment+0x86>
 8122d1a:	4b2a      	ldr	r3, [pc, #168]	@ (8122dc4 <tcp_create_segment+0x124>)
 8122d1c:	22b0      	movs	r2, #176	@ 0xb0
 8122d1e:	492d      	ldr	r1, [pc, #180]	@ (8122dd4 <tcp_create_segment+0x134>)
 8122d20:	482a      	ldr	r0, [pc, #168]	@ (8122dcc <tcp_create_segment+0x12c>)
 8122d22:	f003 fea7 	bl	8126a74 <iprintf>
  seg->len = p->tot_len - optlen;
 8122d26:	68bb      	ldr	r3, [r7, #8]
 8122d28:	891a      	ldrh	r2, [r3, #8]
 8122d2a:	7dfb      	ldrb	r3, [r7, #23]
 8122d2c:	b29b      	uxth	r3, r3
 8122d2e:	1ad3      	subs	r3, r2, r3
 8122d30:	b29a      	uxth	r2, r3
 8122d32:	693b      	ldr	r3, [r7, #16]
 8122d34:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8122d36:	2114      	movs	r1, #20
 8122d38:	68b8      	ldr	r0, [r7, #8]
 8122d3a:	f7fb fa59 	bl	811e1f0 <pbuf_add_header>
 8122d3e:	4603      	mov	r3, r0
 8122d40:	2b00      	cmp	r3, #0
 8122d42:	d004      	beq.n	8122d4e <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8122d44:	6938      	ldr	r0, [r7, #16]
 8122d46:	f7fd f86a 	bl	811fe1e <tcp_seg_free>
    return NULL;
 8122d4a:	2300      	movs	r3, #0
 8122d4c:	e036      	b.n	8122dbc <tcp_create_segment+0x11c>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8122d4e:	693b      	ldr	r3, [r7, #16]
 8122d50:	685b      	ldr	r3, [r3, #4]
 8122d52:	685a      	ldr	r2, [r3, #4]
 8122d54:	693b      	ldr	r3, [r7, #16]
 8122d56:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8122d58:	68fb      	ldr	r3, [r7, #12]
 8122d5a:	8ada      	ldrh	r2, [r3, #22]
 8122d5c:	693b      	ldr	r3, [r7, #16]
 8122d5e:	68dc      	ldr	r4, [r3, #12]
 8122d60:	4610      	mov	r0, r2
 8122d62:	f7f7 f8d3 	bl	8119f0c <lwip_htons>
 8122d66:	4603      	mov	r3, r0
 8122d68:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8122d6a:	68fb      	ldr	r3, [r7, #12]
 8122d6c:	8b1a      	ldrh	r2, [r3, #24]
 8122d6e:	693b      	ldr	r3, [r7, #16]
 8122d70:	68dc      	ldr	r4, [r3, #12]
 8122d72:	4610      	mov	r0, r2
 8122d74:	f7f7 f8ca 	bl	8119f0c <lwip_htons>
 8122d78:	4603      	mov	r3, r0
 8122d7a:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8122d7c:	693b      	ldr	r3, [r7, #16]
 8122d7e:	68dc      	ldr	r4, [r3, #12]
 8122d80:	6838      	ldr	r0, [r7, #0]
 8122d82:	f7f7 f8d8 	bl	8119f36 <lwip_htonl>
 8122d86:	4603      	mov	r3, r0
 8122d88:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8122d8a:	7dfb      	ldrb	r3, [r7, #23]
 8122d8c:	089b      	lsrs	r3, r3, #2
 8122d8e:	b2db      	uxtb	r3, r3
 8122d90:	3305      	adds	r3, #5
 8122d92:	b29b      	uxth	r3, r3
 8122d94:	031b      	lsls	r3, r3, #12
 8122d96:	b29a      	uxth	r2, r3
 8122d98:	79fb      	ldrb	r3, [r7, #7]
 8122d9a:	b29b      	uxth	r3, r3
 8122d9c:	4313      	orrs	r3, r2
 8122d9e:	b29a      	uxth	r2, r3
 8122da0:	693b      	ldr	r3, [r7, #16]
 8122da2:	68dc      	ldr	r4, [r3, #12]
 8122da4:	4610      	mov	r0, r2
 8122da6:	f7f7 f8b1 	bl	8119f0c <lwip_htons>
 8122daa:	4603      	mov	r3, r0
 8122dac:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8122dae:	693b      	ldr	r3, [r7, #16]
 8122db0:	68db      	ldr	r3, [r3, #12]
 8122db2:	2200      	movs	r2, #0
 8122db4:	749a      	strb	r2, [r3, #18]
 8122db6:	2200      	movs	r2, #0
 8122db8:	74da      	strb	r2, [r3, #19]
  return seg;
 8122dba:	693b      	ldr	r3, [r7, #16]
}
 8122dbc:	4618      	mov	r0, r3
 8122dbe:	371c      	adds	r7, #28
 8122dc0:	46bd      	mov	sp, r7
 8122dc2:	bd90      	pop	{r4, r7, pc}
 8122dc4:	08129ef8 	.word	0x08129ef8
 8122dc8:	08129f70 	.word	0x08129f70
 8122dcc:	08129f90 	.word	0x08129f90
 8122dd0:	08129fb8 	.word	0x08129fb8
 8122dd4:	08129fdc 	.word	0x08129fdc

08122dd8 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8122dd8:	b580      	push	{r7, lr}
 8122dda:	b086      	sub	sp, #24
 8122ddc:	af00      	add	r7, sp, #0
 8122dde:	607b      	str	r3, [r7, #4]
 8122de0:	4603      	mov	r3, r0
 8122de2:	73fb      	strb	r3, [r7, #15]
 8122de4:	460b      	mov	r3, r1
 8122de6:	81bb      	strh	r3, [r7, #12]
 8122de8:	4613      	mov	r3, r2
 8122dea:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 8122dec:	89bb      	ldrh	r3, [r7, #12]
 8122dee:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 8122df0:	687b      	ldr	r3, [r7, #4]
 8122df2:	2b00      	cmp	r3, #0
 8122df4:	d105      	bne.n	8122e02 <tcp_pbuf_prealloc+0x2a>
 8122df6:	4b30      	ldr	r3, [pc, #192]	@ (8122eb8 <tcp_pbuf_prealloc+0xe0>)
 8122df8:	22e8      	movs	r2, #232	@ 0xe8
 8122dfa:	4930      	ldr	r1, [pc, #192]	@ (8122ebc <tcp_pbuf_prealloc+0xe4>)
 8122dfc:	4830      	ldr	r0, [pc, #192]	@ (8122ec0 <tcp_pbuf_prealloc+0xe8>)
 8122dfe:	f003 fe39 	bl	8126a74 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 8122e02:	6a3b      	ldr	r3, [r7, #32]
 8122e04:	2b00      	cmp	r3, #0
 8122e06:	d105      	bne.n	8122e14 <tcp_pbuf_prealloc+0x3c>
 8122e08:	4b2b      	ldr	r3, [pc, #172]	@ (8122eb8 <tcp_pbuf_prealloc+0xe0>)
 8122e0a:	22e9      	movs	r2, #233	@ 0xe9
 8122e0c:	492d      	ldr	r1, [pc, #180]	@ (8122ec4 <tcp_pbuf_prealloc+0xec>)
 8122e0e:	482c      	ldr	r0, [pc, #176]	@ (8122ec0 <tcp_pbuf_prealloc+0xe8>)
 8122e10:	f003 fe30 	bl	8126a74 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 8122e14:	89ba      	ldrh	r2, [r7, #12]
 8122e16:	897b      	ldrh	r3, [r7, #10]
 8122e18:	429a      	cmp	r2, r3
 8122e1a:	d221      	bcs.n	8122e60 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8122e1c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8122e20:	f003 0302 	and.w	r3, r3, #2
 8122e24:	2b00      	cmp	r3, #0
 8122e26:	d111      	bne.n	8122e4c <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 8122e28:	6a3b      	ldr	r3, [r7, #32]
 8122e2a:	8b5b      	ldrh	r3, [r3, #26]
 8122e2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8122e30:	2b00      	cmp	r3, #0
 8122e32:	d115      	bne.n	8122e60 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 8122e34:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8122e38:	2b00      	cmp	r3, #0
 8122e3a:	d007      	beq.n	8122e4c <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 8122e3c:	6a3b      	ldr	r3, [r7, #32]
 8122e3e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
         (!first_seg ||
 8122e40:	2b00      	cmp	r3, #0
 8122e42:	d103      	bne.n	8122e4c <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 8122e44:	6a3b      	ldr	r3, [r7, #32]
 8122e46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
          pcb->unsent != NULL ||
 8122e48:	2b00      	cmp	r3, #0
 8122e4a:	d009      	beq.n	8122e60 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8122e4c:	89bb      	ldrh	r3, [r7, #12]
 8122e4e:	f203 231b 	addw	r3, r3, #539	@ 0x21b
 8122e52:	f023 0203 	bic.w	r2, r3, #3
 8122e56:	897b      	ldrh	r3, [r7, #10]
 8122e58:	4293      	cmp	r3, r2
 8122e5a:	bf28      	it	cs
 8122e5c:	4613      	movcs	r3, r2
 8122e5e:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8122e60:	8af9      	ldrh	r1, [r7, #22]
 8122e62:	7bfb      	ldrb	r3, [r7, #15]
 8122e64:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8122e68:	4618      	mov	r0, r3
 8122e6a:	f7fa ff75 	bl	811dd58 <pbuf_alloc>
 8122e6e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8122e70:	693b      	ldr	r3, [r7, #16]
 8122e72:	2b00      	cmp	r3, #0
 8122e74:	d101      	bne.n	8122e7a <tcp_pbuf_prealloc+0xa2>
    return NULL;
 8122e76:	2300      	movs	r3, #0
 8122e78:	e019      	b.n	8122eae <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 8122e7a:	693b      	ldr	r3, [r7, #16]
 8122e7c:	681b      	ldr	r3, [r3, #0]
 8122e7e:	2b00      	cmp	r3, #0
 8122e80:	d006      	beq.n	8122e90 <tcp_pbuf_prealloc+0xb8>
 8122e82:	4b0d      	ldr	r3, [pc, #52]	@ (8122eb8 <tcp_pbuf_prealloc+0xe0>)
 8122e84:	f240 120b 	movw	r2, #267	@ 0x10b
 8122e88:	490f      	ldr	r1, [pc, #60]	@ (8122ec8 <tcp_pbuf_prealloc+0xf0>)
 8122e8a:	480d      	ldr	r0, [pc, #52]	@ (8122ec0 <tcp_pbuf_prealloc+0xe8>)
 8122e8c:	f003 fdf2 	bl	8126a74 <iprintf>
  *oversize = p->len - length;
 8122e90:	693b      	ldr	r3, [r7, #16]
 8122e92:	895a      	ldrh	r2, [r3, #10]
 8122e94:	89bb      	ldrh	r3, [r7, #12]
 8122e96:	1ad3      	subs	r3, r2, r3
 8122e98:	b29a      	uxth	r2, r3
 8122e9a:	687b      	ldr	r3, [r7, #4]
 8122e9c:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 8122e9e:	693b      	ldr	r3, [r7, #16]
 8122ea0:	89ba      	ldrh	r2, [r7, #12]
 8122ea2:	811a      	strh	r2, [r3, #8]
 8122ea4:	693b      	ldr	r3, [r7, #16]
 8122ea6:	891a      	ldrh	r2, [r3, #8]
 8122ea8:	693b      	ldr	r3, [r7, #16]
 8122eaa:	815a      	strh	r2, [r3, #10]
  return p;
 8122eac:	693b      	ldr	r3, [r7, #16]
}
 8122eae:	4618      	mov	r0, r3
 8122eb0:	3718      	adds	r7, #24
 8122eb2:	46bd      	mov	sp, r7
 8122eb4:	bd80      	pop	{r7, pc}
 8122eb6:	bf00      	nop
 8122eb8:	08129ef8 	.word	0x08129ef8
 8122ebc:	08129ff4 	.word	0x08129ff4
 8122ec0:	08129f90 	.word	0x08129f90
 8122ec4:	0812a018 	.word	0x0812a018
 8122ec8:	0812a038 	.word	0x0812a038

08122ecc <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 8122ecc:	b580      	push	{r7, lr}
 8122ece:	b082      	sub	sp, #8
 8122ed0:	af00      	add	r7, sp, #0
 8122ed2:	6078      	str	r0, [r7, #4]
 8122ed4:	460b      	mov	r3, r1
 8122ed6:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 8122ed8:	687b      	ldr	r3, [r7, #4]
 8122eda:	2b00      	cmp	r3, #0
 8122edc:	d106      	bne.n	8122eec <tcp_write_checks+0x20>
 8122ede:	4b33      	ldr	r3, [pc, #204]	@ (8122fac <tcp_write_checks+0xe0>)
 8122ee0:	f240 1233 	movw	r2, #307	@ 0x133
 8122ee4:	4932      	ldr	r1, [pc, #200]	@ (8122fb0 <tcp_write_checks+0xe4>)
 8122ee6:	4833      	ldr	r0, [pc, #204]	@ (8122fb4 <tcp_write_checks+0xe8>)
 8122ee8:	f003 fdc4 	bl	8126a74 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 8122eec:	687b      	ldr	r3, [r7, #4]
 8122eee:	7d1b      	ldrb	r3, [r3, #20]
 8122ef0:	2b04      	cmp	r3, #4
 8122ef2:	d00e      	beq.n	8122f12 <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 8122ef4:	687b      	ldr	r3, [r7, #4]
 8122ef6:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 8122ef8:	2b07      	cmp	r3, #7
 8122efa:	d00a      	beq.n	8122f12 <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 8122efc:	687b      	ldr	r3, [r7, #4]
 8122efe:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 8122f00:	2b02      	cmp	r3, #2
 8122f02:	d006      	beq.n	8122f12 <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 8122f04:	687b      	ldr	r3, [r7, #4]
 8122f06:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 8122f08:	2b03      	cmp	r3, #3
 8122f0a:	d002      	beq.n	8122f12 <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 8122f0c:	f06f 030a 	mvn.w	r3, #10
 8122f10:	e048      	b.n	8122fa4 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 8122f12:	887b      	ldrh	r3, [r7, #2]
 8122f14:	2b00      	cmp	r3, #0
 8122f16:	d101      	bne.n	8122f1c <tcp_write_checks+0x50>
    return ERR_OK;
 8122f18:	2300      	movs	r3, #0
 8122f1a:	e043      	b.n	8122fa4 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 8122f1c:	687b      	ldr	r3, [r7, #4]
 8122f1e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8122f22:	887a      	ldrh	r2, [r7, #2]
 8122f24:	429a      	cmp	r2, r3
 8122f26:	d909      	bls.n	8122f3c <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8122f28:	687b      	ldr	r3, [r7, #4]
 8122f2a:	8b5b      	ldrh	r3, [r3, #26]
 8122f2c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8122f30:	b29a      	uxth	r2, r3
 8122f32:	687b      	ldr	r3, [r7, #4]
 8122f34:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8122f36:	f04f 33ff 	mov.w	r3, #4294967295
 8122f3a:	e033      	b.n	8122fa4 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 8122f3c:	687b      	ldr	r3, [r7, #4]
 8122f3e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8122f42:	2b0f      	cmp	r3, #15
 8122f44:	d909      	bls.n	8122f5a <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8122f46:	687b      	ldr	r3, [r7, #4]
 8122f48:	8b5b      	ldrh	r3, [r3, #26]
 8122f4a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8122f4e:	b29a      	uxth	r2, r3
 8122f50:	687b      	ldr	r3, [r7, #4]
 8122f52:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8122f54:	f04f 33ff 	mov.w	r3, #4294967295
 8122f58:	e024      	b.n	8122fa4 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 8122f5a:	687b      	ldr	r3, [r7, #4]
 8122f5c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8122f60:	2b00      	cmp	r3, #0
 8122f62:	d00f      	beq.n	8122f84 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 8122f64:	687b      	ldr	r3, [r7, #4]
 8122f66:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8122f68:	2b00      	cmp	r3, #0
 8122f6a:	d11a      	bne.n	8122fa2 <tcp_write_checks+0xd6>
 8122f6c:	687b      	ldr	r3, [r7, #4]
 8122f6e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8122f70:	2b00      	cmp	r3, #0
 8122f72:	d116      	bne.n	8122fa2 <tcp_write_checks+0xd6>
 8122f74:	4b0d      	ldr	r3, [pc, #52]	@ (8122fac <tcp_write_checks+0xe0>)
 8122f76:	f240 1255 	movw	r2, #341	@ 0x155
 8122f7a:	490f      	ldr	r1, [pc, #60]	@ (8122fb8 <tcp_write_checks+0xec>)
 8122f7c:	480d      	ldr	r0, [pc, #52]	@ (8122fb4 <tcp_write_checks+0xe8>)
 8122f7e:	f003 fd79 	bl	8126a74 <iprintf>
 8122f82:	e00e      	b.n	8122fa2 <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 8122f84:	687b      	ldr	r3, [r7, #4]
 8122f86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8122f88:	2b00      	cmp	r3, #0
 8122f8a:	d103      	bne.n	8122f94 <tcp_write_checks+0xc8>
 8122f8c:	687b      	ldr	r3, [r7, #4]
 8122f8e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8122f90:	2b00      	cmp	r3, #0
 8122f92:	d006      	beq.n	8122fa2 <tcp_write_checks+0xd6>
 8122f94:	4b05      	ldr	r3, [pc, #20]	@ (8122fac <tcp_write_checks+0xe0>)
 8122f96:	f44f 72ac 	mov.w	r2, #344	@ 0x158
 8122f9a:	4908      	ldr	r1, [pc, #32]	@ (8122fbc <tcp_write_checks+0xf0>)
 8122f9c:	4805      	ldr	r0, [pc, #20]	@ (8122fb4 <tcp_write_checks+0xe8>)
 8122f9e:	f003 fd69 	bl	8126a74 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 8122fa2:	2300      	movs	r3, #0
}
 8122fa4:	4618      	mov	r0, r3
 8122fa6:	3708      	adds	r7, #8
 8122fa8:	46bd      	mov	sp, r7
 8122faa:	bd80      	pop	{r7, pc}
 8122fac:	08129ef8 	.word	0x08129ef8
 8122fb0:	0812a04c 	.word	0x0812a04c
 8122fb4:	08129f90 	.word	0x08129f90
 8122fb8:	0812a06c 	.word	0x0812a06c
 8122fbc:	0812a0a8 	.word	0x0812a0a8

08122fc0 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 8122fc0:	b590      	push	{r4, r7, lr}
 8122fc2:	b09b      	sub	sp, #108	@ 0x6c
 8122fc4:	af04      	add	r7, sp, #16
 8122fc6:	60f8      	str	r0, [r7, #12]
 8122fc8:	60b9      	str	r1, [r7, #8]
 8122fca:	4611      	mov	r1, r2
 8122fcc:	461a      	mov	r2, r3
 8122fce:	460b      	mov	r3, r1
 8122fd0:	80fb      	strh	r3, [r7, #6]
 8122fd2:	4613      	mov	r3, r2
 8122fd4:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 8122fd6:	2300      	movs	r3, #0
 8122fd8:	657b      	str	r3, [r7, #84]	@ 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8122fda:	2300      	movs	r3, #0
 8122fdc:	653b      	str	r3, [r7, #80]	@ 0x50
 8122fde:	2300      	movs	r3, #0
 8122fe0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8122fe2:	2300      	movs	r3, #0
 8122fe4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8122fe6:	2300      	movs	r3, #0
 8122fe8:	647b      	str	r3, [r7, #68]	@ 0x44
  u16_t pos = 0; /* position in 'arg' data */
 8122fea:	2300      	movs	r3, #0
 8122fec:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 8122ff0:	2300      	movs	r3, #0
 8122ff2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 8122ff6:	2300      	movs	r3, #0
 8122ff8:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 8122ffa:	2300      	movs	r3, #0
 8122ffc:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 8122ffe:	2300      	movs	r3, #0
 8123000:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 8123002:	68fb      	ldr	r3, [r7, #12]
 8123004:	2b00      	cmp	r3, #0
 8123006:	d109      	bne.n	812301c <tcp_write+0x5c>
 8123008:	4ba4      	ldr	r3, [pc, #656]	@ (812329c <tcp_write+0x2dc>)
 812300a:	f44f 72cf 	mov.w	r2, #414	@ 0x19e
 812300e:	49a4      	ldr	r1, [pc, #656]	@ (81232a0 <tcp_write+0x2e0>)
 8123010:	48a4      	ldr	r0, [pc, #656]	@ (81232a4 <tcp_write+0x2e4>)
 8123012:	f003 fd2f 	bl	8126a74 <iprintf>
 8123016:	f06f 030f 	mvn.w	r3, #15
 812301a:	e32a      	b.n	8123672 <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 812301c:	68fb      	ldr	r3, [r7, #12]
 812301e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8123022:	085b      	lsrs	r3, r3, #1
 8123024:	b29a      	uxth	r2, r3
 8123026:	68fb      	ldr	r3, [r7, #12]
 8123028:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 812302a:	4293      	cmp	r3, r2
 812302c:	bf28      	it	cs
 812302e:	4613      	movcs	r3, r2
 8123030:	84bb      	strh	r3, [r7, #36]	@ 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 8123032:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8123034:	2b00      	cmp	r3, #0
 8123036:	d102      	bne.n	812303e <tcp_write+0x7e>
 8123038:	68fb      	ldr	r3, [r7, #12]
 812303a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 812303c:	e000      	b.n	8123040 <tcp_write+0x80>
 812303e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8123040:	84bb      	strh	r3, [r7, #36]	@ 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 8123042:	68bb      	ldr	r3, [r7, #8]
 8123044:	2b00      	cmp	r3, #0
 8123046:	d109      	bne.n	812305c <tcp_write+0x9c>
 8123048:	4b94      	ldr	r3, [pc, #592]	@ (812329c <tcp_write+0x2dc>)
 812304a:	f240 12ad 	movw	r2, #429	@ 0x1ad
 812304e:	4996      	ldr	r1, [pc, #600]	@ (81232a8 <tcp_write+0x2e8>)
 8123050:	4894      	ldr	r0, [pc, #592]	@ (81232a4 <tcp_write+0x2e4>)
 8123052:	f003 fd0f 	bl	8126a74 <iprintf>
 8123056:	f06f 030f 	mvn.w	r3, #15
 812305a:	e30a      	b.n	8123672 <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 812305c:	88fb      	ldrh	r3, [r7, #6]
 812305e:	4619      	mov	r1, r3
 8123060:	68f8      	ldr	r0, [r7, #12]
 8123062:	f7ff ff33 	bl	8122ecc <tcp_write_checks>
 8123066:	4603      	mov	r3, r0
 8123068:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (err != ERR_OK) {
 812306c:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 8123070:	2b00      	cmp	r3, #0
 8123072:	d002      	beq.n	812307a <tcp_write+0xba>
    return err;
 8123074:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 8123078:	e2fb      	b.n	8123672 <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 812307a:	68fb      	ldr	r3, [r7, #12]
 812307c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8123080:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8123084:	2300      	movs	r3, #0
 8123086:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 812308a:	68fb      	ldr	r3, [r7, #12]
 812308c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 812308e:	2b00      	cmp	r3, #0
 8123090:	f000 80f6 	beq.w	8123280 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8123094:	68fb      	ldr	r3, [r7, #12]
 8123096:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8123098:	653b      	str	r3, [r7, #80]	@ 0x50
 812309a:	e002      	b.n	81230a2 <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 812309c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 812309e:	681b      	ldr	r3, [r3, #0]
 81230a0:	653b      	str	r3, [r7, #80]	@ 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 81230a2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 81230a4:	681b      	ldr	r3, [r3, #0]
 81230a6:	2b00      	cmp	r3, #0
 81230a8:	d1f8      	bne.n	812309c <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 81230aa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 81230ac:	7a9b      	ldrb	r3, [r3, #10]
 81230ae:	009b      	lsls	r3, r3, #2
 81230b0:	b29b      	uxth	r3, r3
 81230b2:	f003 0304 	and.w	r3, r3, #4
 81230b6:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 81230b8:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 81230ba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 81230bc:	891b      	ldrh	r3, [r3, #8]
 81230be:	4619      	mov	r1, r3
 81230c0:	8c3b      	ldrh	r3, [r7, #32]
 81230c2:	440b      	add	r3, r1
 81230c4:	429a      	cmp	r2, r3
 81230c6:	da06      	bge.n	81230d6 <tcp_write+0x116>
 81230c8:	4b74      	ldr	r3, [pc, #464]	@ (812329c <tcp_write+0x2dc>)
 81230ca:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 81230ce:	4977      	ldr	r1, [pc, #476]	@ (81232ac <tcp_write+0x2ec>)
 81230d0:	4874      	ldr	r0, [pc, #464]	@ (81232a4 <tcp_write+0x2e4>)
 81230d2:	f003 fccf 	bl	8126a74 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 81230d6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 81230d8:	891a      	ldrh	r2, [r3, #8]
 81230da:	8c3b      	ldrh	r3, [r7, #32]
 81230dc:	4413      	add	r3, r2
 81230de:	b29b      	uxth	r3, r3
 81230e0:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 81230e2:	1ad3      	subs	r3, r2, r3
 81230e4:	877b      	strh	r3, [r7, #58]	@ 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 81230e6:	68fb      	ldr	r3, [r7, #12]
 81230e8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 81230ec:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 81230ee:	8a7b      	ldrh	r3, [r7, #18]
 81230f0:	2b00      	cmp	r3, #0
 81230f2:	d026      	beq.n	8123142 <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 81230f4:	8a7b      	ldrh	r3, [r7, #18]
 81230f6:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 81230f8:	429a      	cmp	r2, r3
 81230fa:	d206      	bcs.n	812310a <tcp_write+0x14a>
 81230fc:	4b67      	ldr	r3, [pc, #412]	@ (812329c <tcp_write+0x2dc>)
 81230fe:	f44f 72fc 	mov.w	r2, #504	@ 0x1f8
 8123102:	496b      	ldr	r1, [pc, #428]	@ (81232b0 <tcp_write+0x2f0>)
 8123104:	4867      	ldr	r0, [pc, #412]	@ (81232a4 <tcp_write+0x2e4>)
 8123106:	f003 fcb5 	bl	8126a74 <iprintf>
      seg = last_unsent;
 812310a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 812310c:	64fb      	str	r3, [r7, #76]	@ 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 812310e:	8a7b      	ldrh	r3, [r7, #18]
 8123110:	88fa      	ldrh	r2, [r7, #6]
 8123112:	4293      	cmp	r3, r2
 8123114:	bf28      	it	cs
 8123116:	4613      	movcs	r3, r2
 8123118:	b29b      	uxth	r3, r3
 812311a:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 812311c:	4293      	cmp	r3, r2
 812311e:	bf28      	it	cs
 8123120:	4613      	movcs	r3, r2
 8123122:	87fb      	strh	r3, [r7, #62]	@ 0x3e
      pos += oversize_used;
 8123124:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8123128:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 812312a:	4413      	add	r3, r2
 812312c:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      oversize -= oversize_used;
 8123130:	8a7a      	ldrh	r2, [r7, #18]
 8123132:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8123134:	1ad3      	subs	r3, r2, r3
 8123136:	b29b      	uxth	r3, r3
 8123138:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 812313a:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 812313c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 812313e:	1ad3      	subs	r3, r2, r3
 8123140:	877b      	strh	r3, [r7, #58]	@ 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 8123142:	8a7b      	ldrh	r3, [r7, #18]
 8123144:	2b00      	cmp	r3, #0
 8123146:	d00b      	beq.n	8123160 <tcp_write+0x1a0>
 8123148:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 812314c:	88fb      	ldrh	r3, [r7, #6]
 812314e:	429a      	cmp	r2, r3
 8123150:	d006      	beq.n	8123160 <tcp_write+0x1a0>
 8123152:	4b52      	ldr	r3, [pc, #328]	@ (812329c <tcp_write+0x2dc>)
 8123154:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8123158:	4956      	ldr	r1, [pc, #344]	@ (81232b4 <tcp_write+0x2f4>)
 812315a:	4852      	ldr	r0, [pc, #328]	@ (81232a4 <tcp_write+0x2e4>)
 812315c:	f003 fc8a 	bl	8126a74 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8123160:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8123164:	88fb      	ldrh	r3, [r7, #6]
 8123166:	429a      	cmp	r2, r3
 8123168:	f080 8167 	bcs.w	812343a <tcp_write+0x47a>
 812316c:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 812316e:	2b00      	cmp	r3, #0
 8123170:	f000 8163 	beq.w	812343a <tcp_write+0x47a>
 8123174:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8123176:	891b      	ldrh	r3, [r3, #8]
 8123178:	2b00      	cmp	r3, #0
 812317a:	f000 815e 	beq.w	812343a <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 812317e:	88fa      	ldrh	r2, [r7, #6]
 8123180:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8123184:	1ad2      	subs	r2, r2, r3
 8123186:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8123188:	4293      	cmp	r3, r2
 812318a:	bfa8      	it	ge
 812318c:	4613      	movge	r3, r2
 812318e:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 8123190:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8123192:	64fb      	str	r3, [r7, #76]	@ 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8123194:	797b      	ldrb	r3, [r7, #5]
 8123196:	f003 0301 	and.w	r3, r3, #1
 812319a:	2b00      	cmp	r3, #0
 812319c:	d027      	beq.n	81231ee <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 812319e:	f107 0012 	add.w	r0, r7, #18
 81231a2:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 81231a4:	8bf9      	ldrh	r1, [r7, #30]
 81231a6:	2301      	movs	r3, #1
 81231a8:	9302      	str	r3, [sp, #8]
 81231aa:	797b      	ldrb	r3, [r7, #5]
 81231ac:	9301      	str	r3, [sp, #4]
 81231ae:	68fb      	ldr	r3, [r7, #12]
 81231b0:	9300      	str	r3, [sp, #0]
 81231b2:	4603      	mov	r3, r0
 81231b4:	2000      	movs	r0, #0
 81231b6:	f7ff fe0f 	bl	8122dd8 <tcp_pbuf_prealloc>
 81231ba:	6578      	str	r0, [r7, #84]	@ 0x54
 81231bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 81231be:	2b00      	cmp	r3, #0
 81231c0:	f000 8225 	beq.w	812360e <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 81231c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 81231c6:	6858      	ldr	r0, [r3, #4]
 81231c8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 81231cc:	68ba      	ldr	r2, [r7, #8]
 81231ce:	4413      	add	r3, r2
 81231d0:	8bfa      	ldrh	r2, [r7, #30]
 81231d2:	4619      	mov	r1, r3
 81231d4:	f003 feb1 	bl	8126f3a <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 81231d8:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 81231da:	f7fb f92d 	bl	811e438 <pbuf_clen>
 81231de:	4603      	mov	r3, r0
 81231e0:	461a      	mov	r2, r3
 81231e2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 81231e6:	4413      	add	r3, r2
 81231e8:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 81231ec:	e041      	b.n	8123272 <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 81231ee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 81231f0:	685b      	ldr	r3, [r3, #4]
 81231f2:	637b      	str	r3, [r7, #52]	@ 0x34
 81231f4:	e002      	b.n	81231fc <tcp_write+0x23c>
 81231f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81231f8:	681b      	ldr	r3, [r3, #0]
 81231fa:	637b      	str	r3, [r7, #52]	@ 0x34
 81231fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81231fe:	681b      	ldr	r3, [r3, #0]
 8123200:	2b00      	cmp	r3, #0
 8123202:	d1f8      	bne.n	81231f6 <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8123204:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8123206:	7b1b      	ldrb	r3, [r3, #12]
 8123208:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 812320c:	2b00      	cmp	r3, #0
 812320e:	d115      	bne.n	812323c <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 8123210:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8123212:	685b      	ldr	r3, [r3, #4]
 8123214:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8123216:	8952      	ldrh	r2, [r2, #10]
 8123218:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 812321a:	68ba      	ldr	r2, [r7, #8]
 812321c:	429a      	cmp	r2, r3
 812321e:	d10d      	bne.n	812323c <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 8123220:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8123224:	2b00      	cmp	r3, #0
 8123226:	d006      	beq.n	8123236 <tcp_write+0x276>
 8123228:	4b1c      	ldr	r3, [pc, #112]	@ (812329c <tcp_write+0x2dc>)
 812322a:	f240 2231 	movw	r2, #561	@ 0x231
 812322e:	4922      	ldr	r1, [pc, #136]	@ (81232b8 <tcp_write+0x2f8>)
 8123230:	481c      	ldr	r0, [pc, #112]	@ (81232a4 <tcp_write+0x2e4>)
 8123232:	f003 fc1f 	bl	8126a74 <iprintf>
          extendlen = seglen;
 8123236:	8bfb      	ldrh	r3, [r7, #30]
 8123238:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 812323a:	e01a      	b.n	8123272 <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 812323c:	8bfb      	ldrh	r3, [r7, #30]
 812323e:	2201      	movs	r2, #1
 8123240:	4619      	mov	r1, r3
 8123242:	2000      	movs	r0, #0
 8123244:	f7fa fd88 	bl	811dd58 <pbuf_alloc>
 8123248:	6578      	str	r0, [r7, #84]	@ 0x54
 812324a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 812324c:	2b00      	cmp	r3, #0
 812324e:	f000 81e0 	beq.w	8123612 <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 8123252:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8123256:	68ba      	ldr	r2, [r7, #8]
 8123258:	441a      	add	r2, r3
 812325a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 812325c:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 812325e:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8123260:	f7fb f8ea 	bl	811e438 <pbuf_clen>
 8123264:	4603      	mov	r3, r0
 8123266:	461a      	mov	r2, r3
 8123268:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 812326c:	4413      	add	r3, r2
 812326e:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 8123272:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8123276:	8bfb      	ldrh	r3, [r7, #30]
 8123278:	4413      	add	r3, r2
 812327a:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 812327e:	e0dc      	b.n	812343a <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 8123280:	68fb      	ldr	r3, [r7, #12]
 8123282:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8123286:	2b00      	cmp	r3, #0
 8123288:	f000 80d7 	beq.w	812343a <tcp_write+0x47a>
 812328c:	4b03      	ldr	r3, [pc, #12]	@ (812329c <tcp_write+0x2dc>)
 812328e:	f240 224a 	movw	r2, #586	@ 0x24a
 8123292:	490a      	ldr	r1, [pc, #40]	@ (81232bc <tcp_write+0x2fc>)
 8123294:	4803      	ldr	r0, [pc, #12]	@ (81232a4 <tcp_write+0x2e4>)
 8123296:	f003 fbed 	bl	8126a74 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 812329a:	e0ce      	b.n	812343a <tcp_write+0x47a>
 812329c:	08129ef8 	.word	0x08129ef8
 81232a0:	0812a0dc 	.word	0x0812a0dc
 81232a4:	08129f90 	.word	0x08129f90
 81232a8:	0812a0f4 	.word	0x0812a0f4
 81232ac:	0812a128 	.word	0x0812a128
 81232b0:	0812a140 	.word	0x0812a140
 81232b4:	0812a160 	.word	0x0812a160
 81232b8:	0812a180 	.word	0x0812a180
 81232bc:	0812a1ac 	.word	0x0812a1ac
    struct pbuf *p;
    u16_t left = len - pos;
 81232c0:	88fa      	ldrh	r2, [r7, #6]
 81232c2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 81232c6:	1ad3      	subs	r3, r2, r3
 81232c8:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 81232ca:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 81232ce:	b29b      	uxth	r3, r3
 81232d0:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 81232d2:	1ad3      	subs	r3, r2, r3
 81232d4:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 81232d6:	8b7a      	ldrh	r2, [r7, #26]
 81232d8:	8bbb      	ldrh	r3, [r7, #28]
 81232da:	4293      	cmp	r3, r2
 81232dc:	bf28      	it	cs
 81232de:	4613      	movcs	r3, r2
 81232e0:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 81232e2:	797b      	ldrb	r3, [r7, #5]
 81232e4:	f003 0301 	and.w	r3, r3, #1
 81232e8:	2b00      	cmp	r3, #0
 81232ea:	d036      	beq.n	812335a <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 81232ec:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 81232f0:	b29a      	uxth	r2, r3
 81232f2:	8b3b      	ldrh	r3, [r7, #24]
 81232f4:	4413      	add	r3, r2
 81232f6:	b299      	uxth	r1, r3
 81232f8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 81232fa:	2b00      	cmp	r3, #0
 81232fc:	bf0c      	ite	eq
 81232fe:	2301      	moveq	r3, #1
 8123300:	2300      	movne	r3, #0
 8123302:	b2db      	uxtb	r3, r3
 8123304:	f107 0012 	add.w	r0, r7, #18
 8123308:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 812330a:	9302      	str	r3, [sp, #8]
 812330c:	797b      	ldrb	r3, [r7, #5]
 812330e:	9301      	str	r3, [sp, #4]
 8123310:	68fb      	ldr	r3, [r7, #12]
 8123312:	9300      	str	r3, [sp, #0]
 8123314:	4603      	mov	r3, r0
 8123316:	2036      	movs	r0, #54	@ 0x36
 8123318:	f7ff fd5e 	bl	8122dd8 <tcp_pbuf_prealloc>
 812331c:	6338      	str	r0, [r7, #48]	@ 0x30
 812331e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8123320:	2b00      	cmp	r3, #0
 8123322:	f000 8178 	beq.w	8123616 <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 8123326:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8123328:	895b      	ldrh	r3, [r3, #10]
 812332a:	8b3a      	ldrh	r2, [r7, #24]
 812332c:	429a      	cmp	r2, r3
 812332e:	d906      	bls.n	812333e <tcp_write+0x37e>
 8123330:	4b8c      	ldr	r3, [pc, #560]	@ (8123564 <tcp_write+0x5a4>)
 8123332:	f240 2266 	movw	r2, #614	@ 0x266
 8123336:	498c      	ldr	r1, [pc, #560]	@ (8123568 <tcp_write+0x5a8>)
 8123338:	488c      	ldr	r0, [pc, #560]	@ (812356c <tcp_write+0x5ac>)
 812333a:	f003 fb9b 	bl	8126a74 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 812333e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8123340:	685a      	ldr	r2, [r3, #4]
 8123342:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8123346:	18d0      	adds	r0, r2, r3
 8123348:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 812334c:	68ba      	ldr	r2, [r7, #8]
 812334e:	4413      	add	r3, r2
 8123350:	8b3a      	ldrh	r2, [r7, #24]
 8123352:	4619      	mov	r1, r3
 8123354:	f003 fdf1 	bl	8126f3a <memcpy>
 8123358:	e02f      	b.n	81233ba <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 812335a:	8a7b      	ldrh	r3, [r7, #18]
 812335c:	2b00      	cmp	r3, #0
 812335e:	d006      	beq.n	812336e <tcp_write+0x3ae>
 8123360:	4b80      	ldr	r3, [pc, #512]	@ (8123564 <tcp_write+0x5a4>)
 8123362:	f240 2271 	movw	r2, #625	@ 0x271
 8123366:	4982      	ldr	r1, [pc, #520]	@ (8123570 <tcp_write+0x5b0>)
 8123368:	4880      	ldr	r0, [pc, #512]	@ (812356c <tcp_write+0x5ac>)
 812336a:	f003 fb83 	bl	8126a74 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 812336e:	8b3b      	ldrh	r3, [r7, #24]
 8123370:	2201      	movs	r2, #1
 8123372:	4619      	mov	r1, r3
 8123374:	2036      	movs	r0, #54	@ 0x36
 8123376:	f7fa fcef 	bl	811dd58 <pbuf_alloc>
 812337a:	6178      	str	r0, [r7, #20]
 812337c:	697b      	ldr	r3, [r7, #20]
 812337e:	2b00      	cmp	r3, #0
 8123380:	f000 814b 	beq.w	812361a <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 8123384:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8123388:	68ba      	ldr	r2, [r7, #8]
 812338a:	441a      	add	r2, r3
 812338c:	697b      	ldr	r3, [r7, #20]
 812338e:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8123390:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8123394:	b29b      	uxth	r3, r3
 8123396:	f44f 7220 	mov.w	r2, #640	@ 0x280
 812339a:	4619      	mov	r1, r3
 812339c:	2036      	movs	r0, #54	@ 0x36
 812339e:	f7fa fcdb 	bl	811dd58 <pbuf_alloc>
 81233a2:	6338      	str	r0, [r7, #48]	@ 0x30
 81233a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81233a6:	2b00      	cmp	r3, #0
 81233a8:	d103      	bne.n	81233b2 <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 81233aa:	6978      	ldr	r0, [r7, #20]
 81233ac:	f7fa ffb6 	bl	811e31c <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 81233b0:	e136      	b.n	8123620 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 81233b2:	6979      	ldr	r1, [r7, #20]
 81233b4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 81233b6:	f7fb f87f 	bl	811e4b8 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 81233ba:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 81233bc:	f7fb f83c 	bl	811e438 <pbuf_clen>
 81233c0:	4603      	mov	r3, r0
 81233c2:	461a      	mov	r2, r3
 81233c4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 81233c8:	4413      	add	r3, r2
 81233ca:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 81233ce:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 81233d2:	2b10      	cmp	r3, #16
 81233d4:	d903      	bls.n	81233de <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 81233d6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 81233d8:	f7fa ffa0 	bl	811e31c <pbuf_free>
      goto memerr;
 81233dc:	e120      	b.n	8123620 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 81233de:	68fb      	ldr	r3, [r7, #12]
 81233e0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 81233e2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 81233e6:	441a      	add	r2, r3
 81233e8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 81233ec:	9300      	str	r3, [sp, #0]
 81233ee:	4613      	mov	r3, r2
 81233f0:	2200      	movs	r2, #0
 81233f2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 81233f4:	68f8      	ldr	r0, [r7, #12]
 81233f6:	f7ff fc53 	bl	8122ca0 <tcp_create_segment>
 81233fa:	64f8      	str	r0, [r7, #76]	@ 0x4c
 81233fc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 81233fe:	2b00      	cmp	r3, #0
 8123400:	f000 810d 	beq.w	812361e <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 8123404:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8123406:	2b00      	cmp	r3, #0
 8123408:	d102      	bne.n	8123410 <tcp_write+0x450>
      queue = seg;
 812340a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 812340c:	647b      	str	r3, [r7, #68]	@ 0x44
 812340e:	e00c      	b.n	812342a <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 8123410:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8123412:	2b00      	cmp	r3, #0
 8123414:	d106      	bne.n	8123424 <tcp_write+0x464>
 8123416:	4b53      	ldr	r3, [pc, #332]	@ (8123564 <tcp_write+0x5a4>)
 8123418:	f240 22ab 	movw	r2, #683	@ 0x2ab
 812341c:	4955      	ldr	r1, [pc, #340]	@ (8123574 <tcp_write+0x5b4>)
 812341e:	4853      	ldr	r0, [pc, #332]	@ (812356c <tcp_write+0x5ac>)
 8123420:	f003 fb28 	bl	8126a74 <iprintf>
      prev_seg->next = seg;
 8123424:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8123426:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8123428:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 812342a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 812342c:	64bb      	str	r3, [r7, #72]	@ 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 812342e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8123432:	8b3b      	ldrh	r3, [r7, #24]
 8123434:	4413      	add	r3, r2
 8123436:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
  while (pos < len) {
 812343a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 812343e:	88fb      	ldrh	r3, [r7, #6]
 8123440:	429a      	cmp	r2, r3
 8123442:	f4ff af3d 	bcc.w	81232c0 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 8123446:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8123448:	2b00      	cmp	r3, #0
 812344a:	d02c      	beq.n	81234a6 <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 812344c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 812344e:	685b      	ldr	r3, [r3, #4]
 8123450:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8123452:	e01e      	b.n	8123492 <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 8123454:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8123456:	891a      	ldrh	r2, [r3, #8]
 8123458:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 812345a:	4413      	add	r3, r2
 812345c:	b29a      	uxth	r2, r3
 812345e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8123460:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 8123462:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8123464:	681b      	ldr	r3, [r3, #0]
 8123466:	2b00      	cmp	r3, #0
 8123468:	d110      	bne.n	812348c <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 812346a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 812346c:	685b      	ldr	r3, [r3, #4]
 812346e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8123470:	8952      	ldrh	r2, [r2, #10]
 8123472:	4413      	add	r3, r2
 8123474:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8123476:	68b9      	ldr	r1, [r7, #8]
 8123478:	4618      	mov	r0, r3
 812347a:	f003 fd5e 	bl	8126f3a <memcpy>
        p->len += oversize_used;
 812347e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8123480:	895a      	ldrh	r2, [r3, #10]
 8123482:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8123484:	4413      	add	r3, r2
 8123486:	b29a      	uxth	r2, r3
 8123488:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 812348a:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 812348c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 812348e:	681b      	ldr	r3, [r3, #0]
 8123490:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8123492:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8123494:	2b00      	cmp	r3, #0
 8123496:	d1dd      	bne.n	8123454 <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 8123498:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 812349a:	891a      	ldrh	r2, [r3, #8]
 812349c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 812349e:	4413      	add	r3, r2
 81234a0:	b29a      	uxth	r2, r3
 81234a2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 81234a4:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 81234a6:	8a7a      	ldrh	r2, [r7, #18]
 81234a8:	68fb      	ldr	r3, [r7, #12]
 81234aa:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 81234ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 81234b0:	2b00      	cmp	r3, #0
 81234b2:	d018      	beq.n	81234e6 <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 81234b4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 81234b6:	2b00      	cmp	r3, #0
 81234b8:	d106      	bne.n	81234c8 <tcp_write+0x508>
 81234ba:	4b2a      	ldr	r3, [pc, #168]	@ (8123564 <tcp_write+0x5a4>)
 81234bc:	f44f 7238 	mov.w	r2, #736	@ 0x2e0
 81234c0:	492d      	ldr	r1, [pc, #180]	@ (8123578 <tcp_write+0x5b8>)
 81234c2:	482a      	ldr	r0, [pc, #168]	@ (812356c <tcp_write+0x5ac>)
 81234c4:	f003 fad6 	bl	8126a74 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 81234c8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 81234ca:	685b      	ldr	r3, [r3, #4]
 81234cc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 81234ce:	4618      	mov	r0, r3
 81234d0:	f7fa fff2 	bl	811e4b8 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 81234d4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 81234d6:	891a      	ldrh	r2, [r3, #8]
 81234d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 81234da:	891b      	ldrh	r3, [r3, #8]
 81234dc:	4413      	add	r3, r2
 81234de:	b29a      	uxth	r2, r3
 81234e0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 81234e2:	811a      	strh	r2, [r3, #8]
 81234e4:	e037      	b.n	8123556 <tcp_write+0x596>
  } else if (extendlen > 0) {
 81234e6:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 81234e8:	2b00      	cmp	r3, #0
 81234ea:	d034      	beq.n	8123556 <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 81234ec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 81234ee:	2b00      	cmp	r3, #0
 81234f0:	d003      	beq.n	81234fa <tcp_write+0x53a>
 81234f2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 81234f4:	685b      	ldr	r3, [r3, #4]
 81234f6:	2b00      	cmp	r3, #0
 81234f8:	d106      	bne.n	8123508 <tcp_write+0x548>
 81234fa:	4b1a      	ldr	r3, [pc, #104]	@ (8123564 <tcp_write+0x5a4>)
 81234fc:	f240 22e6 	movw	r2, #742	@ 0x2e6
 8123500:	491e      	ldr	r1, [pc, #120]	@ (812357c <tcp_write+0x5bc>)
 8123502:	481a      	ldr	r0, [pc, #104]	@ (812356c <tcp_write+0x5ac>)
 8123504:	f003 fab6 	bl	8126a74 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8123508:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 812350a:	685b      	ldr	r3, [r3, #4]
 812350c:	62bb      	str	r3, [r7, #40]	@ 0x28
 812350e:	e009      	b.n	8123524 <tcp_write+0x564>
      p->tot_len += extendlen;
 8123510:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8123512:	891a      	ldrh	r2, [r3, #8]
 8123514:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8123516:	4413      	add	r3, r2
 8123518:	b29a      	uxth	r2, r3
 812351a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 812351c:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 812351e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8123520:	681b      	ldr	r3, [r3, #0]
 8123522:	62bb      	str	r3, [r7, #40]	@ 0x28
 8123524:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8123526:	681b      	ldr	r3, [r3, #0]
 8123528:	2b00      	cmp	r3, #0
 812352a:	d1f1      	bne.n	8123510 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 812352c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 812352e:	891a      	ldrh	r2, [r3, #8]
 8123530:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8123532:	4413      	add	r3, r2
 8123534:	b29a      	uxth	r2, r3
 8123536:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8123538:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 812353a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 812353c:	895a      	ldrh	r2, [r3, #10]
 812353e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8123540:	4413      	add	r3, r2
 8123542:	b29a      	uxth	r2, r3
 8123544:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8123546:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 8123548:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 812354a:	891a      	ldrh	r2, [r3, #8]
 812354c:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 812354e:	4413      	add	r3, r2
 8123550:	b29a      	uxth	r2, r3
 8123552:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8123554:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 8123556:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8123558:	2b00      	cmp	r3, #0
 812355a:	d111      	bne.n	8123580 <tcp_write+0x5c0>
    pcb->unsent = queue;
 812355c:	68fb      	ldr	r3, [r7, #12]
 812355e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8123560:	66da      	str	r2, [r3, #108]	@ 0x6c
 8123562:	e010      	b.n	8123586 <tcp_write+0x5c6>
 8123564:	08129ef8 	.word	0x08129ef8
 8123568:	0812a1dc 	.word	0x0812a1dc
 812356c:	08129f90 	.word	0x08129f90
 8123570:	0812a21c 	.word	0x0812a21c
 8123574:	0812a22c 	.word	0x0812a22c
 8123578:	0812a240 	.word	0x0812a240
 812357c:	0812a278 	.word	0x0812a278
  } else {
    last_unsent->next = queue;
 8123580:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8123582:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8123584:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 8123586:	68fb      	ldr	r3, [r7, #12]
 8123588:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 812358a:	88fb      	ldrh	r3, [r7, #6]
 812358c:	441a      	add	r2, r3
 812358e:	68fb      	ldr	r3, [r7, #12]
 8123590:	65da      	str	r2, [r3, #92]	@ 0x5c
  pcb->snd_buf -= len;
 8123592:	68fb      	ldr	r3, [r7, #12]
 8123594:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 8123598:	88fb      	ldrh	r3, [r7, #6]
 812359a:	1ad3      	subs	r3, r2, r3
 812359c:	b29a      	uxth	r2, r3
 812359e:	68fb      	ldr	r3, [r7, #12]
 81235a0:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
  pcb->snd_queuelen = queuelen;
 81235a4:	68fb      	ldr	r3, [r7, #12]
 81235a6:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 81235aa:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 81235ae:	68fb      	ldr	r3, [r7, #12]
 81235b0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 81235b4:	2b00      	cmp	r3, #0
 81235b6:	d00e      	beq.n	81235d6 <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 81235b8:	68fb      	ldr	r3, [r7, #12]
 81235ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 81235bc:	2b00      	cmp	r3, #0
 81235be:	d10a      	bne.n	81235d6 <tcp_write+0x616>
 81235c0:	68fb      	ldr	r3, [r7, #12]
 81235c2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 81235c4:	2b00      	cmp	r3, #0
 81235c6:	d106      	bne.n	81235d6 <tcp_write+0x616>
 81235c8:	4b2c      	ldr	r3, [pc, #176]	@ (812367c <tcp_write+0x6bc>)
 81235ca:	f240 3212 	movw	r2, #786	@ 0x312
 81235ce:	492c      	ldr	r1, [pc, #176]	@ (8123680 <tcp_write+0x6c0>)
 81235d0:	482c      	ldr	r0, [pc, #176]	@ (8123684 <tcp_write+0x6c4>)
 81235d2:	f003 fa4f 	bl	8126a74 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 81235d6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 81235d8:	2b00      	cmp	r3, #0
 81235da:	d016      	beq.n	812360a <tcp_write+0x64a>
 81235dc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 81235de:	68db      	ldr	r3, [r3, #12]
 81235e0:	2b00      	cmp	r3, #0
 81235e2:	d012      	beq.n	812360a <tcp_write+0x64a>
 81235e4:	797b      	ldrb	r3, [r7, #5]
 81235e6:	f003 0302 	and.w	r3, r3, #2
 81235ea:	2b00      	cmp	r3, #0
 81235ec:	d10d      	bne.n	812360a <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 81235ee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 81235f0:	68db      	ldr	r3, [r3, #12]
 81235f2:	899b      	ldrh	r3, [r3, #12]
 81235f4:	b29c      	uxth	r4, r3
 81235f6:	2008      	movs	r0, #8
 81235f8:	f7f6 fc88 	bl	8119f0c <lwip_htons>
 81235fc:	4603      	mov	r3, r0
 81235fe:	461a      	mov	r2, r3
 8123600:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8123602:	68db      	ldr	r3, [r3, #12]
 8123604:	4322      	orrs	r2, r4
 8123606:	b292      	uxth	r2, r2
 8123608:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 812360a:	2300      	movs	r3, #0
 812360c:	e031      	b.n	8123672 <tcp_write+0x6b2>
          goto memerr;
 812360e:	bf00      	nop
 8123610:	e006      	b.n	8123620 <tcp_write+0x660>
            goto memerr;
 8123612:	bf00      	nop
 8123614:	e004      	b.n	8123620 <tcp_write+0x660>
        goto memerr;
 8123616:	bf00      	nop
 8123618:	e002      	b.n	8123620 <tcp_write+0x660>
        goto memerr;
 812361a:	bf00      	nop
 812361c:	e000      	b.n	8123620 <tcp_write+0x660>
      goto memerr;
 812361e:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8123620:	68fb      	ldr	r3, [r7, #12]
 8123622:	8b5b      	ldrh	r3, [r3, #26]
 8123624:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8123628:	b29a      	uxth	r2, r3
 812362a:	68fb      	ldr	r3, [r7, #12]
 812362c:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 812362e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8123630:	2b00      	cmp	r3, #0
 8123632:	d002      	beq.n	812363a <tcp_write+0x67a>
    pbuf_free(concat_p);
 8123634:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8123636:	f7fa fe71 	bl	811e31c <pbuf_free>
  }
  if (queue != NULL) {
 812363a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 812363c:	2b00      	cmp	r3, #0
 812363e:	d002      	beq.n	8123646 <tcp_write+0x686>
    tcp_segs_free(queue);
 8123640:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8123642:	f7fc fbd7 	bl	811fdf4 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 8123646:	68fb      	ldr	r3, [r7, #12]
 8123648:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 812364c:	2b00      	cmp	r3, #0
 812364e:	d00e      	beq.n	812366e <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 8123650:	68fb      	ldr	r3, [r7, #12]
 8123652:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8123654:	2b00      	cmp	r3, #0
 8123656:	d10a      	bne.n	812366e <tcp_write+0x6ae>
 8123658:	68fb      	ldr	r3, [r7, #12]
 812365a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 812365c:	2b00      	cmp	r3, #0
 812365e:	d106      	bne.n	812366e <tcp_write+0x6ae>
 8123660:	4b06      	ldr	r3, [pc, #24]	@ (812367c <tcp_write+0x6bc>)
 8123662:	f240 3227 	movw	r2, #807	@ 0x327
 8123666:	4906      	ldr	r1, [pc, #24]	@ (8123680 <tcp_write+0x6c0>)
 8123668:	4806      	ldr	r0, [pc, #24]	@ (8123684 <tcp_write+0x6c4>)
 812366a:	f003 fa03 	bl	8126a74 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 812366e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8123672:	4618      	mov	r0, r3
 8123674:	375c      	adds	r7, #92	@ 0x5c
 8123676:	46bd      	mov	sp, r7
 8123678:	bd90      	pop	{r4, r7, pc}
 812367a:	bf00      	nop
 812367c:	08129ef8 	.word	0x08129ef8
 8123680:	0812a2b0 	.word	0x0812a2b0
 8123684:	08129f90 	.word	0x08129f90

08123688 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8123688:	b590      	push	{r4, r7, lr}
 812368a:	b08b      	sub	sp, #44	@ 0x2c
 812368c:	af02      	add	r7, sp, #8
 812368e:	6078      	str	r0, [r7, #4]
 8123690:	460b      	mov	r3, r1
 8123692:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8123694:	2300      	movs	r3, #0
 8123696:	61fb      	str	r3, [r7, #28]
 8123698:	2300      	movs	r3, #0
 812369a:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 812369c:	2300      	movs	r3, #0
 812369e:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 81236a0:	687b      	ldr	r3, [r7, #4]
 81236a2:	2b00      	cmp	r3, #0
 81236a4:	d106      	bne.n	81236b4 <tcp_split_unsent_seg+0x2c>
 81236a6:	4b95      	ldr	r3, [pc, #596]	@ (81238fc <tcp_split_unsent_seg+0x274>)
 81236a8:	f240 324b 	movw	r2, #843	@ 0x34b
 81236ac:	4994      	ldr	r1, [pc, #592]	@ (8123900 <tcp_split_unsent_seg+0x278>)
 81236ae:	4895      	ldr	r0, [pc, #596]	@ (8123904 <tcp_split_unsent_seg+0x27c>)
 81236b0:	f003 f9e0 	bl	8126a74 <iprintf>

  useg = pcb->unsent;
 81236b4:	687b      	ldr	r3, [r7, #4]
 81236b6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 81236b8:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 81236ba:	697b      	ldr	r3, [r7, #20]
 81236bc:	2b00      	cmp	r3, #0
 81236be:	d102      	bne.n	81236c6 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 81236c0:	f04f 33ff 	mov.w	r3, #4294967295
 81236c4:	e116      	b.n	81238f4 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 81236c6:	887b      	ldrh	r3, [r7, #2]
 81236c8:	2b00      	cmp	r3, #0
 81236ca:	d109      	bne.n	81236e0 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 81236cc:	4b8b      	ldr	r3, [pc, #556]	@ (81238fc <tcp_split_unsent_seg+0x274>)
 81236ce:	f240 3253 	movw	r2, #851	@ 0x353
 81236d2:	498d      	ldr	r1, [pc, #564]	@ (8123908 <tcp_split_unsent_seg+0x280>)
 81236d4:	488b      	ldr	r0, [pc, #556]	@ (8123904 <tcp_split_unsent_seg+0x27c>)
 81236d6:	f003 f9cd 	bl	8126a74 <iprintf>
    return ERR_VAL;
 81236da:	f06f 0305 	mvn.w	r3, #5
 81236de:	e109      	b.n	81238f4 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 81236e0:	697b      	ldr	r3, [r7, #20]
 81236e2:	891b      	ldrh	r3, [r3, #8]
 81236e4:	887a      	ldrh	r2, [r7, #2]
 81236e6:	429a      	cmp	r2, r3
 81236e8:	d301      	bcc.n	81236ee <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 81236ea:	2300      	movs	r3, #0
 81236ec:	e102      	b.n	81238f4 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 81236ee:	687b      	ldr	r3, [r7, #4]
 81236f0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 81236f2:	887a      	ldrh	r2, [r7, #2]
 81236f4:	429a      	cmp	r2, r3
 81236f6:	d906      	bls.n	8123706 <tcp_split_unsent_seg+0x7e>
 81236f8:	4b80      	ldr	r3, [pc, #512]	@ (81238fc <tcp_split_unsent_seg+0x274>)
 81236fa:	f240 325b 	movw	r2, #859	@ 0x35b
 81236fe:	4983      	ldr	r1, [pc, #524]	@ (812390c <tcp_split_unsent_seg+0x284>)
 8123700:	4880      	ldr	r0, [pc, #512]	@ (8123904 <tcp_split_unsent_seg+0x27c>)
 8123702:	f003 f9b7 	bl	8126a74 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8123706:	697b      	ldr	r3, [r7, #20]
 8123708:	891b      	ldrh	r3, [r3, #8]
 812370a:	2b00      	cmp	r3, #0
 812370c:	d106      	bne.n	812371c <tcp_split_unsent_seg+0x94>
 812370e:	4b7b      	ldr	r3, [pc, #492]	@ (81238fc <tcp_split_unsent_seg+0x274>)
 8123710:	f44f 7257 	mov.w	r2, #860	@ 0x35c
 8123714:	497e      	ldr	r1, [pc, #504]	@ (8123910 <tcp_split_unsent_seg+0x288>)
 8123716:	487b      	ldr	r0, [pc, #492]	@ (8123904 <tcp_split_unsent_seg+0x27c>)
 8123718:	f003 f9ac 	bl	8126a74 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 812371c:	697b      	ldr	r3, [r7, #20]
 812371e:	7a9b      	ldrb	r3, [r3, #10]
 8123720:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8123722:	7bfb      	ldrb	r3, [r7, #15]
 8123724:	009b      	lsls	r3, r3, #2
 8123726:	b2db      	uxtb	r3, r3
 8123728:	f003 0304 	and.w	r3, r3, #4
 812372c:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 812372e:	697b      	ldr	r3, [r7, #20]
 8123730:	891a      	ldrh	r2, [r3, #8]
 8123732:	887b      	ldrh	r3, [r7, #2]
 8123734:	1ad3      	subs	r3, r2, r3
 8123736:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8123738:	7bbb      	ldrb	r3, [r7, #14]
 812373a:	b29a      	uxth	r2, r3
 812373c:	89bb      	ldrh	r3, [r7, #12]
 812373e:	4413      	add	r3, r2
 8123740:	b29b      	uxth	r3, r3
 8123742:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8123746:	4619      	mov	r1, r3
 8123748:	2036      	movs	r0, #54	@ 0x36
 812374a:	f7fa fb05 	bl	811dd58 <pbuf_alloc>
 812374e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8123750:	693b      	ldr	r3, [r7, #16]
 8123752:	2b00      	cmp	r3, #0
 8123754:	f000 80b7 	beq.w	81238c6 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8123758:	697b      	ldr	r3, [r7, #20]
 812375a:	685b      	ldr	r3, [r3, #4]
 812375c:	891a      	ldrh	r2, [r3, #8]
 812375e:	697b      	ldr	r3, [r7, #20]
 8123760:	891b      	ldrh	r3, [r3, #8]
 8123762:	1ad3      	subs	r3, r2, r3
 8123764:	b29a      	uxth	r2, r3
 8123766:	887b      	ldrh	r3, [r7, #2]
 8123768:	4413      	add	r3, r2
 812376a:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 812376c:	697b      	ldr	r3, [r7, #20]
 812376e:	6858      	ldr	r0, [r3, #4]
 8123770:	693b      	ldr	r3, [r7, #16]
 8123772:	685a      	ldr	r2, [r3, #4]
 8123774:	7bbb      	ldrb	r3, [r7, #14]
 8123776:	18d1      	adds	r1, r2, r3
 8123778:	897b      	ldrh	r3, [r7, #10]
 812377a:	89ba      	ldrh	r2, [r7, #12]
 812377c:	f7fa ffd4 	bl	811e728 <pbuf_copy_partial>
 8123780:	4603      	mov	r3, r0
 8123782:	461a      	mov	r2, r3
 8123784:	89bb      	ldrh	r3, [r7, #12]
 8123786:	4293      	cmp	r3, r2
 8123788:	f040 809f 	bne.w	81238ca <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 812378c:	697b      	ldr	r3, [r7, #20]
 812378e:	68db      	ldr	r3, [r3, #12]
 8123790:	899b      	ldrh	r3, [r3, #12]
 8123792:	b29b      	uxth	r3, r3
 8123794:	4618      	mov	r0, r3
 8123796:	f7f6 fbb9 	bl	8119f0c <lwip_htons>
 812379a:	4603      	mov	r3, r0
 812379c:	b2db      	uxtb	r3, r3
 812379e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 81237a2:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 81237a4:	2300      	movs	r3, #0
 81237a6:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 81237a8:	7efb      	ldrb	r3, [r7, #27]
 81237aa:	f003 0308 	and.w	r3, r3, #8
 81237ae:	2b00      	cmp	r3, #0
 81237b0:	d007      	beq.n	81237c2 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 81237b2:	7efb      	ldrb	r3, [r7, #27]
 81237b4:	f023 0308 	bic.w	r3, r3, #8
 81237b8:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 81237ba:	7ebb      	ldrb	r3, [r7, #26]
 81237bc:	f043 0308 	orr.w	r3, r3, #8
 81237c0:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 81237c2:	7efb      	ldrb	r3, [r7, #27]
 81237c4:	f003 0301 	and.w	r3, r3, #1
 81237c8:	2b00      	cmp	r3, #0
 81237ca:	d007      	beq.n	81237dc <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 81237cc:	7efb      	ldrb	r3, [r7, #27]
 81237ce:	f023 0301 	bic.w	r3, r3, #1
 81237d2:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 81237d4:	7ebb      	ldrb	r3, [r7, #26]
 81237d6:	f043 0301 	orr.w	r3, r3, #1
 81237da:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 81237dc:	697b      	ldr	r3, [r7, #20]
 81237de:	68db      	ldr	r3, [r3, #12]
 81237e0:	685b      	ldr	r3, [r3, #4]
 81237e2:	4618      	mov	r0, r3
 81237e4:	f7f6 fba7 	bl	8119f36 <lwip_htonl>
 81237e8:	4602      	mov	r2, r0
 81237ea:	887b      	ldrh	r3, [r7, #2]
 81237ec:	18d1      	adds	r1, r2, r3
 81237ee:	7eba      	ldrb	r2, [r7, #26]
 81237f0:	7bfb      	ldrb	r3, [r7, #15]
 81237f2:	9300      	str	r3, [sp, #0]
 81237f4:	460b      	mov	r3, r1
 81237f6:	6939      	ldr	r1, [r7, #16]
 81237f8:	6878      	ldr	r0, [r7, #4]
 81237fa:	f7ff fa51 	bl	8122ca0 <tcp_create_segment>
 81237fe:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8123800:	69fb      	ldr	r3, [r7, #28]
 8123802:	2b00      	cmp	r3, #0
 8123804:	d063      	beq.n	81238ce <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8123806:	697b      	ldr	r3, [r7, #20]
 8123808:	685b      	ldr	r3, [r3, #4]
 812380a:	4618      	mov	r0, r3
 812380c:	f7fa fe14 	bl	811e438 <pbuf_clen>
 8123810:	4603      	mov	r3, r0
 8123812:	461a      	mov	r2, r3
 8123814:	687b      	ldr	r3, [r7, #4]
 8123816:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 812381a:	1a9b      	subs	r3, r3, r2
 812381c:	b29a      	uxth	r2, r3
 812381e:	687b      	ldr	r3, [r7, #4]
 8123820:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8123824:	697b      	ldr	r3, [r7, #20]
 8123826:	6858      	ldr	r0, [r3, #4]
 8123828:	697b      	ldr	r3, [r7, #20]
 812382a:	685b      	ldr	r3, [r3, #4]
 812382c:	891a      	ldrh	r2, [r3, #8]
 812382e:	89bb      	ldrh	r3, [r7, #12]
 8123830:	1ad3      	subs	r3, r2, r3
 8123832:	b29b      	uxth	r3, r3
 8123834:	4619      	mov	r1, r3
 8123836:	f7fa fbed 	bl	811e014 <pbuf_realloc>
  useg->len -= remainder;
 812383a:	697b      	ldr	r3, [r7, #20]
 812383c:	891a      	ldrh	r2, [r3, #8]
 812383e:	89bb      	ldrh	r3, [r7, #12]
 8123840:	1ad3      	subs	r3, r2, r3
 8123842:	b29a      	uxth	r2, r3
 8123844:	697b      	ldr	r3, [r7, #20]
 8123846:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8123848:	697b      	ldr	r3, [r7, #20]
 812384a:	68db      	ldr	r3, [r3, #12]
 812384c:	899b      	ldrh	r3, [r3, #12]
 812384e:	b29c      	uxth	r4, r3
 8123850:	7efb      	ldrb	r3, [r7, #27]
 8123852:	b29b      	uxth	r3, r3
 8123854:	4618      	mov	r0, r3
 8123856:	f7f6 fb59 	bl	8119f0c <lwip_htons>
 812385a:	4603      	mov	r3, r0
 812385c:	461a      	mov	r2, r3
 812385e:	697b      	ldr	r3, [r7, #20]
 8123860:	68db      	ldr	r3, [r3, #12]
 8123862:	4322      	orrs	r2, r4
 8123864:	b292      	uxth	r2, r2
 8123866:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8123868:	697b      	ldr	r3, [r7, #20]
 812386a:	685b      	ldr	r3, [r3, #4]
 812386c:	4618      	mov	r0, r3
 812386e:	f7fa fde3 	bl	811e438 <pbuf_clen>
 8123872:	4603      	mov	r3, r0
 8123874:	461a      	mov	r2, r3
 8123876:	687b      	ldr	r3, [r7, #4]
 8123878:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 812387c:	4413      	add	r3, r2
 812387e:	b29a      	uxth	r2, r3
 8123880:	687b      	ldr	r3, [r7, #4]
 8123882:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8123886:	69fb      	ldr	r3, [r7, #28]
 8123888:	685b      	ldr	r3, [r3, #4]
 812388a:	4618      	mov	r0, r3
 812388c:	f7fa fdd4 	bl	811e438 <pbuf_clen>
 8123890:	4603      	mov	r3, r0
 8123892:	461a      	mov	r2, r3
 8123894:	687b      	ldr	r3, [r7, #4]
 8123896:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 812389a:	4413      	add	r3, r2
 812389c:	b29a      	uxth	r2, r3
 812389e:	687b      	ldr	r3, [r7, #4]
 81238a0:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 81238a4:	697b      	ldr	r3, [r7, #20]
 81238a6:	681a      	ldr	r2, [r3, #0]
 81238a8:	69fb      	ldr	r3, [r7, #28]
 81238aa:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 81238ac:	697b      	ldr	r3, [r7, #20]
 81238ae:	69fa      	ldr	r2, [r7, #28]
 81238b0:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 81238b2:	69fb      	ldr	r3, [r7, #28]
 81238b4:	681b      	ldr	r3, [r3, #0]
 81238b6:	2b00      	cmp	r3, #0
 81238b8:	d103      	bne.n	81238c2 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 81238ba:	687b      	ldr	r3, [r7, #4]
 81238bc:	2200      	movs	r2, #0
 81238be:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 81238c2:	2300      	movs	r3, #0
 81238c4:	e016      	b.n	81238f4 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 81238c6:	bf00      	nop
 81238c8:	e002      	b.n	81238d0 <tcp_split_unsent_seg+0x248>
    goto memerr;
 81238ca:	bf00      	nop
 81238cc:	e000      	b.n	81238d0 <tcp_split_unsent_seg+0x248>
    goto memerr;
 81238ce:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 81238d0:	69fb      	ldr	r3, [r7, #28]
 81238d2:	2b00      	cmp	r3, #0
 81238d4:	d006      	beq.n	81238e4 <tcp_split_unsent_seg+0x25c>
 81238d6:	4b09      	ldr	r3, [pc, #36]	@ (81238fc <tcp_split_unsent_seg+0x274>)
 81238d8:	f44f 7276 	mov.w	r2, #984	@ 0x3d8
 81238dc:	490d      	ldr	r1, [pc, #52]	@ (8123914 <tcp_split_unsent_seg+0x28c>)
 81238de:	4809      	ldr	r0, [pc, #36]	@ (8123904 <tcp_split_unsent_seg+0x27c>)
 81238e0:	f003 f8c8 	bl	8126a74 <iprintf>
  if (p != NULL) {
 81238e4:	693b      	ldr	r3, [r7, #16]
 81238e6:	2b00      	cmp	r3, #0
 81238e8:	d002      	beq.n	81238f0 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 81238ea:	6938      	ldr	r0, [r7, #16]
 81238ec:	f7fa fd16 	bl	811e31c <pbuf_free>
  }

  return ERR_MEM;
 81238f0:	f04f 33ff 	mov.w	r3, #4294967295
}
 81238f4:	4618      	mov	r0, r3
 81238f6:	3724      	adds	r7, #36	@ 0x24
 81238f8:	46bd      	mov	sp, r7
 81238fa:	bd90      	pop	{r4, r7, pc}
 81238fc:	08129ef8 	.word	0x08129ef8
 8123900:	0812a2d0 	.word	0x0812a2d0
 8123904:	08129f90 	.word	0x08129f90
 8123908:	0812a2f4 	.word	0x0812a2f4
 812390c:	0812a318 	.word	0x0812a318
 8123910:	0812a328 	.word	0x0812a328
 8123914:	0812a338 	.word	0x0812a338

08123918 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8123918:	b590      	push	{r4, r7, lr}
 812391a:	b085      	sub	sp, #20
 812391c:	af00      	add	r7, sp, #0
 812391e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8123920:	687b      	ldr	r3, [r7, #4]
 8123922:	2b00      	cmp	r3, #0
 8123924:	d106      	bne.n	8123934 <tcp_send_fin+0x1c>
 8123926:	4b21      	ldr	r3, [pc, #132]	@ (81239ac <tcp_send_fin+0x94>)
 8123928:	f240 32eb 	movw	r2, #1003	@ 0x3eb
 812392c:	4920      	ldr	r1, [pc, #128]	@ (81239b0 <tcp_send_fin+0x98>)
 812392e:	4821      	ldr	r0, [pc, #132]	@ (81239b4 <tcp_send_fin+0x9c>)
 8123930:	f003 f8a0 	bl	8126a74 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8123934:	687b      	ldr	r3, [r7, #4]
 8123936:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8123938:	2b00      	cmp	r3, #0
 812393a:	d02e      	beq.n	812399a <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 812393c:	687b      	ldr	r3, [r7, #4]
 812393e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8123940:	60fb      	str	r3, [r7, #12]
 8123942:	e002      	b.n	812394a <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8123944:	68fb      	ldr	r3, [r7, #12]
 8123946:	681b      	ldr	r3, [r3, #0]
 8123948:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 812394a:	68fb      	ldr	r3, [r7, #12]
 812394c:	681b      	ldr	r3, [r3, #0]
 812394e:	2b00      	cmp	r3, #0
 8123950:	d1f8      	bne.n	8123944 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8123952:	68fb      	ldr	r3, [r7, #12]
 8123954:	68db      	ldr	r3, [r3, #12]
 8123956:	899b      	ldrh	r3, [r3, #12]
 8123958:	b29b      	uxth	r3, r3
 812395a:	4618      	mov	r0, r3
 812395c:	f7f6 fad6 	bl	8119f0c <lwip_htons>
 8123960:	4603      	mov	r3, r0
 8123962:	b2db      	uxtb	r3, r3
 8123964:	f003 0307 	and.w	r3, r3, #7
 8123968:	2b00      	cmp	r3, #0
 812396a:	d116      	bne.n	812399a <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 812396c:	68fb      	ldr	r3, [r7, #12]
 812396e:	68db      	ldr	r3, [r3, #12]
 8123970:	899b      	ldrh	r3, [r3, #12]
 8123972:	b29c      	uxth	r4, r3
 8123974:	2001      	movs	r0, #1
 8123976:	f7f6 fac9 	bl	8119f0c <lwip_htons>
 812397a:	4603      	mov	r3, r0
 812397c:	461a      	mov	r2, r3
 812397e:	68fb      	ldr	r3, [r7, #12]
 8123980:	68db      	ldr	r3, [r3, #12]
 8123982:	4322      	orrs	r2, r4
 8123984:	b292      	uxth	r2, r2
 8123986:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8123988:	687b      	ldr	r3, [r7, #4]
 812398a:	8b5b      	ldrh	r3, [r3, #26]
 812398c:	f043 0320 	orr.w	r3, r3, #32
 8123990:	b29a      	uxth	r2, r3
 8123992:	687b      	ldr	r3, [r7, #4]
 8123994:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8123996:	2300      	movs	r3, #0
 8123998:	e004      	b.n	81239a4 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 812399a:	2101      	movs	r1, #1
 812399c:	6878      	ldr	r0, [r7, #4]
 812399e:	f000 f80b 	bl	81239b8 <tcp_enqueue_flags>
 81239a2:	4603      	mov	r3, r0
}
 81239a4:	4618      	mov	r0, r3
 81239a6:	3714      	adds	r7, #20
 81239a8:	46bd      	mov	sp, r7
 81239aa:	bd90      	pop	{r4, r7, pc}
 81239ac:	08129ef8 	.word	0x08129ef8
 81239b0:	0812a344 	.word	0x0812a344
 81239b4:	08129f90 	.word	0x08129f90

081239b8 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 81239b8:	b580      	push	{r7, lr}
 81239ba:	b08a      	sub	sp, #40	@ 0x28
 81239bc:	af02      	add	r7, sp, #8
 81239be:	6078      	str	r0, [r7, #4]
 81239c0:	460b      	mov	r3, r1
 81239c2:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 81239c4:	2300      	movs	r3, #0
 81239c6:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 81239c8:	2300      	movs	r3, #0
 81239ca:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 81239cc:	78fb      	ldrb	r3, [r7, #3]
 81239ce:	f003 0303 	and.w	r3, r3, #3
 81239d2:	2b00      	cmp	r3, #0
 81239d4:	d106      	bne.n	81239e4 <tcp_enqueue_flags+0x2c>
 81239d6:	4b67      	ldr	r3, [pc, #412]	@ (8123b74 <tcp_enqueue_flags+0x1bc>)
 81239d8:	f240 4211 	movw	r2, #1041	@ 0x411
 81239dc:	4966      	ldr	r1, [pc, #408]	@ (8123b78 <tcp_enqueue_flags+0x1c0>)
 81239de:	4867      	ldr	r0, [pc, #412]	@ (8123b7c <tcp_enqueue_flags+0x1c4>)
 81239e0:	f003 f848 	bl	8126a74 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 81239e4:	687b      	ldr	r3, [r7, #4]
 81239e6:	2b00      	cmp	r3, #0
 81239e8:	d106      	bne.n	81239f8 <tcp_enqueue_flags+0x40>
 81239ea:	4b62      	ldr	r3, [pc, #392]	@ (8123b74 <tcp_enqueue_flags+0x1bc>)
 81239ec:	f240 4213 	movw	r2, #1043	@ 0x413
 81239f0:	4963      	ldr	r1, [pc, #396]	@ (8123b80 <tcp_enqueue_flags+0x1c8>)
 81239f2:	4862      	ldr	r0, [pc, #392]	@ (8123b7c <tcp_enqueue_flags+0x1c4>)
 81239f4:	f003 f83e 	bl	8126a74 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 81239f8:	78fb      	ldrb	r3, [r7, #3]
 81239fa:	f003 0302 	and.w	r3, r3, #2
 81239fe:	2b00      	cmp	r3, #0
 8123a00:	d001      	beq.n	8123a06 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8123a02:	2301      	movs	r3, #1
 8123a04:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8123a06:	7ffb      	ldrb	r3, [r7, #31]
 8123a08:	009b      	lsls	r3, r3, #2
 8123a0a:	b2db      	uxtb	r3, r3
 8123a0c:	f003 0304 	and.w	r3, r3, #4
 8123a10:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8123a12:	7dfb      	ldrb	r3, [r7, #23]
 8123a14:	b29b      	uxth	r3, r3
 8123a16:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8123a1a:	4619      	mov	r1, r3
 8123a1c:	2036      	movs	r0, #54	@ 0x36
 8123a1e:	f7fa f99b 	bl	811dd58 <pbuf_alloc>
 8123a22:	6138      	str	r0, [r7, #16]
 8123a24:	693b      	ldr	r3, [r7, #16]
 8123a26:	2b00      	cmp	r3, #0
 8123a28:	d109      	bne.n	8123a3e <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8123a2a:	687b      	ldr	r3, [r7, #4]
 8123a2c:	8b5b      	ldrh	r3, [r3, #26]
 8123a2e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8123a32:	b29a      	uxth	r2, r3
 8123a34:	687b      	ldr	r3, [r7, #4]
 8123a36:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8123a38:	f04f 33ff 	mov.w	r3, #4294967295
 8123a3c:	e095      	b.n	8123b6a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8123a3e:	693b      	ldr	r3, [r7, #16]
 8123a40:	895a      	ldrh	r2, [r3, #10]
 8123a42:	7dfb      	ldrb	r3, [r7, #23]
 8123a44:	b29b      	uxth	r3, r3
 8123a46:	429a      	cmp	r2, r3
 8123a48:	d206      	bcs.n	8123a58 <tcp_enqueue_flags+0xa0>
 8123a4a:	4b4a      	ldr	r3, [pc, #296]	@ (8123b74 <tcp_enqueue_flags+0x1bc>)
 8123a4c:	f240 4239 	movw	r2, #1081	@ 0x439
 8123a50:	494c      	ldr	r1, [pc, #304]	@ (8123b84 <tcp_enqueue_flags+0x1cc>)
 8123a52:	484a      	ldr	r0, [pc, #296]	@ (8123b7c <tcp_enqueue_flags+0x1c4>)
 8123a54:	f003 f80e 	bl	8126a74 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8123a58:	687b      	ldr	r3, [r7, #4]
 8123a5a:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 8123a5c:	78fa      	ldrb	r2, [r7, #3]
 8123a5e:	7ffb      	ldrb	r3, [r7, #31]
 8123a60:	9300      	str	r3, [sp, #0]
 8123a62:	460b      	mov	r3, r1
 8123a64:	6939      	ldr	r1, [r7, #16]
 8123a66:	6878      	ldr	r0, [r7, #4]
 8123a68:	f7ff f91a 	bl	8122ca0 <tcp_create_segment>
 8123a6c:	60f8      	str	r0, [r7, #12]
 8123a6e:	68fb      	ldr	r3, [r7, #12]
 8123a70:	2b00      	cmp	r3, #0
 8123a72:	d109      	bne.n	8123a88 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8123a74:	687b      	ldr	r3, [r7, #4]
 8123a76:	8b5b      	ldrh	r3, [r3, #26]
 8123a78:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8123a7c:	b29a      	uxth	r2, r3
 8123a7e:	687b      	ldr	r3, [r7, #4]
 8123a80:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8123a82:	f04f 33ff 	mov.w	r3, #4294967295
 8123a86:	e070      	b.n	8123b6a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8123a88:	68fb      	ldr	r3, [r7, #12]
 8123a8a:	68db      	ldr	r3, [r3, #12]
 8123a8c:	f003 0303 	and.w	r3, r3, #3
 8123a90:	2b00      	cmp	r3, #0
 8123a92:	d006      	beq.n	8123aa2 <tcp_enqueue_flags+0xea>
 8123a94:	4b37      	ldr	r3, [pc, #220]	@ (8123b74 <tcp_enqueue_flags+0x1bc>)
 8123a96:	f240 4242 	movw	r2, #1090	@ 0x442
 8123a9a:	493b      	ldr	r1, [pc, #236]	@ (8123b88 <tcp_enqueue_flags+0x1d0>)
 8123a9c:	4837      	ldr	r0, [pc, #220]	@ (8123b7c <tcp_enqueue_flags+0x1c4>)
 8123a9e:	f002 ffe9 	bl	8126a74 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8123aa2:	68fb      	ldr	r3, [r7, #12]
 8123aa4:	891b      	ldrh	r3, [r3, #8]
 8123aa6:	2b00      	cmp	r3, #0
 8123aa8:	d006      	beq.n	8123ab8 <tcp_enqueue_flags+0x100>
 8123aaa:	4b32      	ldr	r3, [pc, #200]	@ (8123b74 <tcp_enqueue_flags+0x1bc>)
 8123aac:	f240 4243 	movw	r2, #1091	@ 0x443
 8123ab0:	4936      	ldr	r1, [pc, #216]	@ (8123b8c <tcp_enqueue_flags+0x1d4>)
 8123ab2:	4832      	ldr	r0, [pc, #200]	@ (8123b7c <tcp_enqueue_flags+0x1c4>)
 8123ab4:	f002 ffde 	bl	8126a74 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8123ab8:	687b      	ldr	r3, [r7, #4]
 8123aba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8123abc:	2b00      	cmp	r3, #0
 8123abe:	d103      	bne.n	8123ac8 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8123ac0:	687b      	ldr	r3, [r7, #4]
 8123ac2:	68fa      	ldr	r2, [r7, #12]
 8123ac4:	66da      	str	r2, [r3, #108]	@ 0x6c
 8123ac6:	e00d      	b.n	8123ae4 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8123ac8:	687b      	ldr	r3, [r7, #4]
 8123aca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8123acc:	61bb      	str	r3, [r7, #24]
 8123ace:	e002      	b.n	8123ad6 <tcp_enqueue_flags+0x11e>
 8123ad0:	69bb      	ldr	r3, [r7, #24]
 8123ad2:	681b      	ldr	r3, [r3, #0]
 8123ad4:	61bb      	str	r3, [r7, #24]
 8123ad6:	69bb      	ldr	r3, [r7, #24]
 8123ad8:	681b      	ldr	r3, [r3, #0]
 8123ada:	2b00      	cmp	r3, #0
 8123adc:	d1f8      	bne.n	8123ad0 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8123ade:	69bb      	ldr	r3, [r7, #24]
 8123ae0:	68fa      	ldr	r2, [r7, #12]
 8123ae2:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8123ae4:	687b      	ldr	r3, [r7, #4]
 8123ae6:	2200      	movs	r2, #0
 8123ae8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8123aec:	78fb      	ldrb	r3, [r7, #3]
 8123aee:	f003 0302 	and.w	r3, r3, #2
 8123af2:	2b00      	cmp	r3, #0
 8123af4:	d104      	bne.n	8123b00 <tcp_enqueue_flags+0x148>
 8123af6:	78fb      	ldrb	r3, [r7, #3]
 8123af8:	f003 0301 	and.w	r3, r3, #1
 8123afc:	2b00      	cmp	r3, #0
 8123afe:	d004      	beq.n	8123b0a <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8123b00:	687b      	ldr	r3, [r7, #4]
 8123b02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8123b04:	1c5a      	adds	r2, r3, #1
 8123b06:	687b      	ldr	r3, [r7, #4]
 8123b08:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8123b0a:	78fb      	ldrb	r3, [r7, #3]
 8123b0c:	f003 0301 	and.w	r3, r3, #1
 8123b10:	2b00      	cmp	r3, #0
 8123b12:	d006      	beq.n	8123b22 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8123b14:	687b      	ldr	r3, [r7, #4]
 8123b16:	8b5b      	ldrh	r3, [r3, #26]
 8123b18:	f043 0320 	orr.w	r3, r3, #32
 8123b1c:	b29a      	uxth	r2, r3
 8123b1e:	687b      	ldr	r3, [r7, #4]
 8123b20:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8123b22:	68fb      	ldr	r3, [r7, #12]
 8123b24:	685b      	ldr	r3, [r3, #4]
 8123b26:	4618      	mov	r0, r3
 8123b28:	f7fa fc86 	bl	811e438 <pbuf_clen>
 8123b2c:	4603      	mov	r3, r0
 8123b2e:	461a      	mov	r2, r3
 8123b30:	687b      	ldr	r3, [r7, #4]
 8123b32:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8123b36:	4413      	add	r3, r2
 8123b38:	b29a      	uxth	r2, r3
 8123b3a:	687b      	ldr	r3, [r7, #4]
 8123b3c:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8123b40:	687b      	ldr	r3, [r7, #4]
 8123b42:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8123b46:	2b00      	cmp	r3, #0
 8123b48:	d00e      	beq.n	8123b68 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8123b4a:	687b      	ldr	r3, [r7, #4]
 8123b4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8123b4e:	2b00      	cmp	r3, #0
 8123b50:	d10a      	bne.n	8123b68 <tcp_enqueue_flags+0x1b0>
 8123b52:	687b      	ldr	r3, [r7, #4]
 8123b54:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8123b56:	2b00      	cmp	r3, #0
 8123b58:	d106      	bne.n	8123b68 <tcp_enqueue_flags+0x1b0>
 8123b5a:	4b06      	ldr	r3, [pc, #24]	@ (8123b74 <tcp_enqueue_flags+0x1bc>)
 8123b5c:	f240 4265 	movw	r2, #1125	@ 0x465
 8123b60:	490b      	ldr	r1, [pc, #44]	@ (8123b90 <tcp_enqueue_flags+0x1d8>)
 8123b62:	4806      	ldr	r0, [pc, #24]	@ (8123b7c <tcp_enqueue_flags+0x1c4>)
 8123b64:	f002 ff86 	bl	8126a74 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8123b68:	2300      	movs	r3, #0
}
 8123b6a:	4618      	mov	r0, r3
 8123b6c:	3720      	adds	r7, #32
 8123b6e:	46bd      	mov	sp, r7
 8123b70:	bd80      	pop	{r7, pc}
 8123b72:	bf00      	nop
 8123b74:	08129ef8 	.word	0x08129ef8
 8123b78:	0812a360 	.word	0x0812a360
 8123b7c:	08129f90 	.word	0x08129f90
 8123b80:	0812a3b8 	.word	0x0812a3b8
 8123b84:	0812a3d8 	.word	0x0812a3d8
 8123b88:	0812a414 	.word	0x0812a414
 8123b8c:	0812a42c 	.word	0x0812a42c
 8123b90:	0812a458 	.word	0x0812a458

08123b94 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8123b94:	b5b0      	push	{r4, r5, r7, lr}
 8123b96:	b08a      	sub	sp, #40	@ 0x28
 8123b98:	af00      	add	r7, sp, #0
 8123b9a:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8123b9c:	687b      	ldr	r3, [r7, #4]
 8123b9e:	2b00      	cmp	r3, #0
 8123ba0:	d106      	bne.n	8123bb0 <tcp_output+0x1c>
 8123ba2:	4b8a      	ldr	r3, [pc, #552]	@ (8123dcc <tcp_output+0x238>)
 8123ba4:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 8123ba8:	4989      	ldr	r1, [pc, #548]	@ (8123dd0 <tcp_output+0x23c>)
 8123baa:	488a      	ldr	r0, [pc, #552]	@ (8123dd4 <tcp_output+0x240>)
 8123bac:	f002 ff62 	bl	8126a74 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8123bb0:	687b      	ldr	r3, [r7, #4]
 8123bb2:	7d1b      	ldrb	r3, [r3, #20]
 8123bb4:	2b01      	cmp	r3, #1
 8123bb6:	d106      	bne.n	8123bc6 <tcp_output+0x32>
 8123bb8:	4b84      	ldr	r3, [pc, #528]	@ (8123dcc <tcp_output+0x238>)
 8123bba:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 8123bbe:	4986      	ldr	r1, [pc, #536]	@ (8123dd8 <tcp_output+0x244>)
 8123bc0:	4884      	ldr	r0, [pc, #528]	@ (8123dd4 <tcp_output+0x240>)
 8123bc2:	f002 ff57 	bl	8126a74 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8123bc6:	4b85      	ldr	r3, [pc, #532]	@ (8123ddc <tcp_output+0x248>)
 8123bc8:	681b      	ldr	r3, [r3, #0]
 8123bca:	687a      	ldr	r2, [r7, #4]
 8123bcc:	429a      	cmp	r2, r3
 8123bce:	d101      	bne.n	8123bd4 <tcp_output+0x40>
    return ERR_OK;
 8123bd0:	2300      	movs	r3, #0
 8123bd2:	e1ce      	b.n	8123f72 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8123bd4:	687b      	ldr	r3, [r7, #4]
 8123bd6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8123bda:	687b      	ldr	r3, [r7, #4]
 8123bdc:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8123be0:	4293      	cmp	r3, r2
 8123be2:	bf28      	it	cs
 8123be4:	4613      	movcs	r3, r2
 8123be6:	b29b      	uxth	r3, r3
 8123be8:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8123bea:	687b      	ldr	r3, [r7, #4]
 8123bec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8123bee:	627b      	str	r3, [r7, #36]	@ 0x24

  if (seg == NULL) {
 8123bf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8123bf2:	2b00      	cmp	r3, #0
 8123bf4:	d10b      	bne.n	8123c0e <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8123bf6:	687b      	ldr	r3, [r7, #4]
 8123bf8:	8b5b      	ldrh	r3, [r3, #26]
 8123bfa:	f003 0302 	and.w	r3, r3, #2
 8123bfe:	2b00      	cmp	r3, #0
 8123c00:	f000 81aa 	beq.w	8123f58 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8123c04:	6878      	ldr	r0, [r7, #4]
 8123c06:	f000 fdcb 	bl	81247a0 <tcp_send_empty_ack>
 8123c0a:	4603      	mov	r3, r0
 8123c0c:	e1b1      	b.n	8123f72 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8123c0e:	6879      	ldr	r1, [r7, #4]
 8123c10:	687b      	ldr	r3, [r7, #4]
 8123c12:	3304      	adds	r3, #4
 8123c14:	461a      	mov	r2, r3
 8123c16:	6878      	ldr	r0, [r7, #4]
 8123c18:	f7ff f826 	bl	8122c68 <tcp_route>
 8123c1c:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8123c1e:	697b      	ldr	r3, [r7, #20]
 8123c20:	2b00      	cmp	r3, #0
 8123c22:	d102      	bne.n	8123c2a <tcp_output+0x96>
    return ERR_RTE;
 8123c24:	f06f 0303 	mvn.w	r3, #3
 8123c28:	e1a3      	b.n	8123f72 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8123c2a:	687b      	ldr	r3, [r7, #4]
 8123c2c:	2b00      	cmp	r3, #0
 8123c2e:	d003      	beq.n	8123c38 <tcp_output+0xa4>
 8123c30:	687b      	ldr	r3, [r7, #4]
 8123c32:	681b      	ldr	r3, [r3, #0]
 8123c34:	2b00      	cmp	r3, #0
 8123c36:	d111      	bne.n	8123c5c <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8123c38:	697b      	ldr	r3, [r7, #20]
 8123c3a:	2b00      	cmp	r3, #0
 8123c3c:	d002      	beq.n	8123c44 <tcp_output+0xb0>
 8123c3e:	697b      	ldr	r3, [r7, #20]
 8123c40:	3304      	adds	r3, #4
 8123c42:	e000      	b.n	8123c46 <tcp_output+0xb2>
 8123c44:	2300      	movs	r3, #0
 8123c46:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8123c48:	693b      	ldr	r3, [r7, #16]
 8123c4a:	2b00      	cmp	r3, #0
 8123c4c:	d102      	bne.n	8123c54 <tcp_output+0xc0>
      return ERR_RTE;
 8123c4e:	f06f 0303 	mvn.w	r3, #3
 8123c52:	e18e      	b.n	8123f72 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8123c54:	693b      	ldr	r3, [r7, #16]
 8123c56:	681a      	ldr	r2, [r3, #0]
 8123c58:	687b      	ldr	r3, [r7, #4]
 8123c5a:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8123c5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8123c5e:	68db      	ldr	r3, [r3, #12]
 8123c60:	685b      	ldr	r3, [r3, #4]
 8123c62:	4618      	mov	r0, r3
 8123c64:	f7f6 f967 	bl	8119f36 <lwip_htonl>
 8123c68:	4602      	mov	r2, r0
 8123c6a:	687b      	ldr	r3, [r7, #4]
 8123c6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8123c6e:	1ad3      	subs	r3, r2, r3
 8123c70:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8123c72:	8912      	ldrh	r2, [r2, #8]
 8123c74:	4413      	add	r3, r2
 8123c76:	69ba      	ldr	r2, [r7, #24]
 8123c78:	429a      	cmp	r2, r3
 8123c7a:	d227      	bcs.n	8123ccc <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8123c7c:	687b      	ldr	r3, [r7, #4]
 8123c7e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8123c82:	461a      	mov	r2, r3
 8123c84:	69bb      	ldr	r3, [r7, #24]
 8123c86:	4293      	cmp	r3, r2
 8123c88:	d114      	bne.n	8123cb4 <tcp_output+0x120>
 8123c8a:	687b      	ldr	r3, [r7, #4]
 8123c8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8123c8e:	2b00      	cmp	r3, #0
 8123c90:	d110      	bne.n	8123cb4 <tcp_output+0x120>
 8123c92:	687b      	ldr	r3, [r7, #4]
 8123c94:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8123c98:	2b00      	cmp	r3, #0
 8123c9a:	d10b      	bne.n	8123cb4 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8123c9c:	687b      	ldr	r3, [r7, #4]
 8123c9e:	2200      	movs	r2, #0
 8123ca0:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
      pcb->persist_backoff = 1;
 8123ca4:	687b      	ldr	r3, [r7, #4]
 8123ca6:	2201      	movs	r2, #1
 8123ca8:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1
      pcb->persist_probe = 0;
 8123cac:	687b      	ldr	r3, [r7, #4]
 8123cae:	2200      	movs	r2, #0
 8123cb0:	f883 20a2 	strb.w	r2, [r3, #162]	@ 0xa2
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8123cb4:	687b      	ldr	r3, [r7, #4]
 8123cb6:	8b5b      	ldrh	r3, [r3, #26]
 8123cb8:	f003 0302 	and.w	r3, r3, #2
 8123cbc:	2b00      	cmp	r3, #0
 8123cbe:	f000 814d 	beq.w	8123f5c <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 8123cc2:	6878      	ldr	r0, [r7, #4]
 8123cc4:	f000 fd6c 	bl	81247a0 <tcp_send_empty_ack>
 8123cc8:	4603      	mov	r3, r0
 8123cca:	e152      	b.n	8123f72 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8123ccc:	687b      	ldr	r3, [r7, #4]
 8123cce:	2200      	movs	r2, #0
 8123cd0:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8123cd4:	687b      	ldr	r3, [r7, #4]
 8123cd6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8123cd8:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8123cda:	6a3b      	ldr	r3, [r7, #32]
 8123cdc:	2b00      	cmp	r3, #0
 8123cde:	f000 811c 	beq.w	8123f1a <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 8123ce2:	e002      	b.n	8123cea <tcp_output+0x156>
 8123ce4:	6a3b      	ldr	r3, [r7, #32]
 8123ce6:	681b      	ldr	r3, [r3, #0]
 8123ce8:	623b      	str	r3, [r7, #32]
 8123cea:	6a3b      	ldr	r3, [r7, #32]
 8123cec:	681b      	ldr	r3, [r3, #0]
 8123cee:	2b00      	cmp	r3, #0
 8123cf0:	d1f8      	bne.n	8123ce4 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8123cf2:	e112      	b.n	8123f1a <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8123cf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8123cf6:	68db      	ldr	r3, [r3, #12]
 8123cf8:	899b      	ldrh	r3, [r3, #12]
 8123cfa:	b29b      	uxth	r3, r3
 8123cfc:	4618      	mov	r0, r3
 8123cfe:	f7f6 f905 	bl	8119f0c <lwip_htons>
 8123d02:	4603      	mov	r3, r0
 8123d04:	b2db      	uxtb	r3, r3
 8123d06:	f003 0304 	and.w	r3, r3, #4
 8123d0a:	2b00      	cmp	r3, #0
 8123d0c:	d006      	beq.n	8123d1c <tcp_output+0x188>
 8123d0e:	4b2f      	ldr	r3, [pc, #188]	@ (8123dcc <tcp_output+0x238>)
 8123d10:	f240 5236 	movw	r2, #1334	@ 0x536
 8123d14:	4932      	ldr	r1, [pc, #200]	@ (8123de0 <tcp_output+0x24c>)
 8123d16:	482f      	ldr	r0, [pc, #188]	@ (8123dd4 <tcp_output+0x240>)
 8123d18:	f002 feac 	bl	8126a74 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8123d1c:	687b      	ldr	r3, [r7, #4]
 8123d1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8123d20:	2b00      	cmp	r3, #0
 8123d22:	d01f      	beq.n	8123d64 <tcp_output+0x1d0>
 8123d24:	687b      	ldr	r3, [r7, #4]
 8123d26:	8b5b      	ldrh	r3, [r3, #26]
 8123d28:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 8123d2c:	2b00      	cmp	r3, #0
 8123d2e:	d119      	bne.n	8123d64 <tcp_output+0x1d0>
 8123d30:	687b      	ldr	r3, [r7, #4]
 8123d32:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8123d34:	2b00      	cmp	r3, #0
 8123d36:	d00b      	beq.n	8123d50 <tcp_output+0x1bc>
 8123d38:	687b      	ldr	r3, [r7, #4]
 8123d3a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8123d3c:	681b      	ldr	r3, [r3, #0]
 8123d3e:	2b00      	cmp	r3, #0
 8123d40:	d110      	bne.n	8123d64 <tcp_output+0x1d0>
 8123d42:	687b      	ldr	r3, [r7, #4]
 8123d44:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8123d46:	891a      	ldrh	r2, [r3, #8]
 8123d48:	687b      	ldr	r3, [r7, #4]
 8123d4a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8123d4c:	429a      	cmp	r2, r3
 8123d4e:	d209      	bcs.n	8123d64 <tcp_output+0x1d0>
 8123d50:	687b      	ldr	r3, [r7, #4]
 8123d52:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8123d56:	2b00      	cmp	r3, #0
 8123d58:	d004      	beq.n	8123d64 <tcp_output+0x1d0>
 8123d5a:	687b      	ldr	r3, [r7, #4]
 8123d5c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8123d60:	2b0f      	cmp	r3, #15
 8123d62:	d901      	bls.n	8123d68 <tcp_output+0x1d4>
 8123d64:	2301      	movs	r3, #1
 8123d66:	e000      	b.n	8123d6a <tcp_output+0x1d6>
 8123d68:	2300      	movs	r3, #0
 8123d6a:	2b00      	cmp	r3, #0
 8123d6c:	d106      	bne.n	8123d7c <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8123d6e:	687b      	ldr	r3, [r7, #4]
 8123d70:	8b5b      	ldrh	r3, [r3, #26]
 8123d72:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8123d76:	2b00      	cmp	r3, #0
 8123d78:	f000 80e4 	beq.w	8123f44 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8123d7c:	687b      	ldr	r3, [r7, #4]
 8123d7e:	7d1b      	ldrb	r3, [r3, #20]
 8123d80:	2b02      	cmp	r3, #2
 8123d82:	d00d      	beq.n	8123da0 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8123d84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8123d86:	68db      	ldr	r3, [r3, #12]
 8123d88:	899b      	ldrh	r3, [r3, #12]
 8123d8a:	b29c      	uxth	r4, r3
 8123d8c:	2010      	movs	r0, #16
 8123d8e:	f7f6 f8bd 	bl	8119f0c <lwip_htons>
 8123d92:	4603      	mov	r3, r0
 8123d94:	461a      	mov	r2, r3
 8123d96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8123d98:	68db      	ldr	r3, [r3, #12]
 8123d9a:	4322      	orrs	r2, r4
 8123d9c:	b292      	uxth	r2, r2
 8123d9e:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8123da0:	697a      	ldr	r2, [r7, #20]
 8123da2:	6879      	ldr	r1, [r7, #4]
 8123da4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8123da6:	f000 f909 	bl	8123fbc <tcp_output_segment>
 8123daa:	4603      	mov	r3, r0
 8123dac:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8123dae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8123db2:	2b00      	cmp	r3, #0
 8123db4:	d016      	beq.n	8123de4 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8123db6:	687b      	ldr	r3, [r7, #4]
 8123db8:	8b5b      	ldrh	r3, [r3, #26]
 8123dba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8123dbe:	b29a      	uxth	r2, r3
 8123dc0:	687b      	ldr	r3, [r7, #4]
 8123dc2:	835a      	strh	r2, [r3, #26]
      return err;
 8123dc4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8123dc8:	e0d3      	b.n	8123f72 <tcp_output+0x3de>
 8123dca:	bf00      	nop
 8123dcc:	08129ef8 	.word	0x08129ef8
 8123dd0:	0812a480 	.word	0x0812a480
 8123dd4:	08129f90 	.word	0x08129f90
 8123dd8:	0812a498 	.word	0x0812a498
 8123ddc:	1000e558 	.word	0x1000e558
 8123de0:	0812a4c0 	.word	0x0812a4c0
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8123de4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8123de6:	681a      	ldr	r2, [r3, #0]
 8123de8:	687b      	ldr	r3, [r7, #4]
 8123dea:	66da      	str	r2, [r3, #108]	@ 0x6c
    if (pcb->state != SYN_SENT) {
 8123dec:	687b      	ldr	r3, [r7, #4]
 8123dee:	7d1b      	ldrb	r3, [r3, #20]
 8123df0:	2b02      	cmp	r3, #2
 8123df2:	d006      	beq.n	8123e02 <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8123df4:	687b      	ldr	r3, [r7, #4]
 8123df6:	8b5b      	ldrh	r3, [r3, #26]
 8123df8:	f023 0303 	bic.w	r3, r3, #3
 8123dfc:	b29a      	uxth	r2, r3
 8123dfe:	687b      	ldr	r3, [r7, #4]
 8123e00:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8123e02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8123e04:	68db      	ldr	r3, [r3, #12]
 8123e06:	685b      	ldr	r3, [r3, #4]
 8123e08:	4618      	mov	r0, r3
 8123e0a:	f7f6 f894 	bl	8119f36 <lwip_htonl>
 8123e0e:	4604      	mov	r4, r0
 8123e10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8123e12:	891b      	ldrh	r3, [r3, #8]
 8123e14:	461d      	mov	r5, r3
 8123e16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8123e18:	68db      	ldr	r3, [r3, #12]
 8123e1a:	899b      	ldrh	r3, [r3, #12]
 8123e1c:	b29b      	uxth	r3, r3
 8123e1e:	4618      	mov	r0, r3
 8123e20:	f7f6 f874 	bl	8119f0c <lwip_htons>
 8123e24:	4603      	mov	r3, r0
 8123e26:	b2db      	uxtb	r3, r3
 8123e28:	f003 0303 	and.w	r3, r3, #3
 8123e2c:	2b00      	cmp	r3, #0
 8123e2e:	d001      	beq.n	8123e34 <tcp_output+0x2a0>
 8123e30:	2301      	movs	r3, #1
 8123e32:	e000      	b.n	8123e36 <tcp_output+0x2a2>
 8123e34:	2300      	movs	r3, #0
 8123e36:	442b      	add	r3, r5
 8123e38:	4423      	add	r3, r4
 8123e3a:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8123e3c:	687b      	ldr	r3, [r7, #4]
 8123e3e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8123e40:	68bb      	ldr	r3, [r7, #8]
 8123e42:	1ad3      	subs	r3, r2, r3
 8123e44:	2b00      	cmp	r3, #0
 8123e46:	da02      	bge.n	8123e4e <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8123e48:	687b      	ldr	r3, [r7, #4]
 8123e4a:	68ba      	ldr	r2, [r7, #8]
 8123e4c:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8123e4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8123e50:	891b      	ldrh	r3, [r3, #8]
 8123e52:	461c      	mov	r4, r3
 8123e54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8123e56:	68db      	ldr	r3, [r3, #12]
 8123e58:	899b      	ldrh	r3, [r3, #12]
 8123e5a:	b29b      	uxth	r3, r3
 8123e5c:	4618      	mov	r0, r3
 8123e5e:	f7f6 f855 	bl	8119f0c <lwip_htons>
 8123e62:	4603      	mov	r3, r0
 8123e64:	b2db      	uxtb	r3, r3
 8123e66:	f003 0303 	and.w	r3, r3, #3
 8123e6a:	2b00      	cmp	r3, #0
 8123e6c:	d001      	beq.n	8123e72 <tcp_output+0x2de>
 8123e6e:	2301      	movs	r3, #1
 8123e70:	e000      	b.n	8123e74 <tcp_output+0x2e0>
 8123e72:	2300      	movs	r3, #0
 8123e74:	4423      	add	r3, r4
 8123e76:	2b00      	cmp	r3, #0
 8123e78:	d049      	beq.n	8123f0e <tcp_output+0x37a>
      seg->next = NULL;
 8123e7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8123e7c:	2200      	movs	r2, #0
 8123e7e:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8123e80:	687b      	ldr	r3, [r7, #4]
 8123e82:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8123e84:	2b00      	cmp	r3, #0
 8123e86:	d105      	bne.n	8123e94 <tcp_output+0x300>
        pcb->unacked = seg;
 8123e88:	687b      	ldr	r3, [r7, #4]
 8123e8a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8123e8c:	671a      	str	r2, [r3, #112]	@ 0x70
        useg = seg;
 8123e8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8123e90:	623b      	str	r3, [r7, #32]
 8123e92:	e03f      	b.n	8123f14 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8123e94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8123e96:	68db      	ldr	r3, [r3, #12]
 8123e98:	685b      	ldr	r3, [r3, #4]
 8123e9a:	4618      	mov	r0, r3
 8123e9c:	f7f6 f84b 	bl	8119f36 <lwip_htonl>
 8123ea0:	4604      	mov	r4, r0
 8123ea2:	6a3b      	ldr	r3, [r7, #32]
 8123ea4:	68db      	ldr	r3, [r3, #12]
 8123ea6:	685b      	ldr	r3, [r3, #4]
 8123ea8:	4618      	mov	r0, r3
 8123eaa:	f7f6 f844 	bl	8119f36 <lwip_htonl>
 8123eae:	4603      	mov	r3, r0
 8123eb0:	1ae3      	subs	r3, r4, r3
 8123eb2:	2b00      	cmp	r3, #0
 8123eb4:	da24      	bge.n	8123f00 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8123eb6:	687b      	ldr	r3, [r7, #4]
 8123eb8:	3370      	adds	r3, #112	@ 0x70
 8123eba:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8123ebc:	e002      	b.n	8123ec4 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8123ebe:	69fb      	ldr	r3, [r7, #28]
 8123ec0:	681b      	ldr	r3, [r3, #0]
 8123ec2:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8123ec4:	69fb      	ldr	r3, [r7, #28]
 8123ec6:	681b      	ldr	r3, [r3, #0]
 8123ec8:	2b00      	cmp	r3, #0
 8123eca:	d011      	beq.n	8123ef0 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8123ecc:	69fb      	ldr	r3, [r7, #28]
 8123ece:	681b      	ldr	r3, [r3, #0]
 8123ed0:	68db      	ldr	r3, [r3, #12]
 8123ed2:	685b      	ldr	r3, [r3, #4]
 8123ed4:	4618      	mov	r0, r3
 8123ed6:	f7f6 f82e 	bl	8119f36 <lwip_htonl>
 8123eda:	4604      	mov	r4, r0
 8123edc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8123ede:	68db      	ldr	r3, [r3, #12]
 8123ee0:	685b      	ldr	r3, [r3, #4]
 8123ee2:	4618      	mov	r0, r3
 8123ee4:	f7f6 f827 	bl	8119f36 <lwip_htonl>
 8123ee8:	4603      	mov	r3, r0
 8123eea:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8123eec:	2b00      	cmp	r3, #0
 8123eee:	dbe6      	blt.n	8123ebe <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8123ef0:	69fb      	ldr	r3, [r7, #28]
 8123ef2:	681a      	ldr	r2, [r3, #0]
 8123ef4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8123ef6:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8123ef8:	69fb      	ldr	r3, [r7, #28]
 8123efa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8123efc:	601a      	str	r2, [r3, #0]
 8123efe:	e009      	b.n	8123f14 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8123f00:	6a3b      	ldr	r3, [r7, #32]
 8123f02:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8123f04:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8123f06:	6a3b      	ldr	r3, [r7, #32]
 8123f08:	681b      	ldr	r3, [r3, #0]
 8123f0a:	623b      	str	r3, [r7, #32]
 8123f0c:	e002      	b.n	8123f14 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8123f0e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8123f10:	f7fb ff85 	bl	811fe1e <tcp_seg_free>
    }
    seg = pcb->unsent;
 8123f14:	687b      	ldr	r3, [r7, #4]
 8123f16:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8123f18:	627b      	str	r3, [r7, #36]	@ 0x24
  while (seg != NULL &&
 8123f1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8123f1c:	2b00      	cmp	r3, #0
 8123f1e:	d012      	beq.n	8123f46 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8123f20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8123f22:	68db      	ldr	r3, [r3, #12]
 8123f24:	685b      	ldr	r3, [r3, #4]
 8123f26:	4618      	mov	r0, r3
 8123f28:	f7f6 f805 	bl	8119f36 <lwip_htonl>
 8123f2c:	4602      	mov	r2, r0
 8123f2e:	687b      	ldr	r3, [r7, #4]
 8123f30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8123f32:	1ad3      	subs	r3, r2, r3
 8123f34:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8123f36:	8912      	ldrh	r2, [r2, #8]
 8123f38:	4413      	add	r3, r2
  while (seg != NULL &&
 8123f3a:	69ba      	ldr	r2, [r7, #24]
 8123f3c:	429a      	cmp	r2, r3
 8123f3e:	f4bf aed9 	bcs.w	8123cf4 <tcp_output+0x160>
 8123f42:	e000      	b.n	8123f46 <tcp_output+0x3b2>
      break;
 8123f44:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8123f46:	687b      	ldr	r3, [r7, #4]
 8123f48:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8123f4a:	2b00      	cmp	r3, #0
 8123f4c:	d108      	bne.n	8123f60 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8123f4e:	687b      	ldr	r3, [r7, #4]
 8123f50:	2200      	movs	r2, #0
 8123f52:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 8123f56:	e004      	b.n	8123f62 <tcp_output+0x3ce>
    goto output_done;
 8123f58:	bf00      	nop
 8123f5a:	e002      	b.n	8123f62 <tcp_output+0x3ce>
    goto output_done;
 8123f5c:	bf00      	nop
 8123f5e:	e000      	b.n	8123f62 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8123f60:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8123f62:	687b      	ldr	r3, [r7, #4]
 8123f64:	8b5b      	ldrh	r3, [r3, #26]
 8123f66:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8123f6a:	b29a      	uxth	r2, r3
 8123f6c:	687b      	ldr	r3, [r7, #4]
 8123f6e:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8123f70:	2300      	movs	r3, #0
}
 8123f72:	4618      	mov	r0, r3
 8123f74:	3728      	adds	r7, #40	@ 0x28
 8123f76:	46bd      	mov	sp, r7
 8123f78:	bdb0      	pop	{r4, r5, r7, pc}
 8123f7a:	bf00      	nop

08123f7c <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8123f7c:	b580      	push	{r7, lr}
 8123f7e:	b082      	sub	sp, #8
 8123f80:	af00      	add	r7, sp, #0
 8123f82:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8123f84:	687b      	ldr	r3, [r7, #4]
 8123f86:	2b00      	cmp	r3, #0
 8123f88:	d106      	bne.n	8123f98 <tcp_output_segment_busy+0x1c>
 8123f8a:	4b09      	ldr	r3, [pc, #36]	@ (8123fb0 <tcp_output_segment_busy+0x34>)
 8123f8c:	f240 529a 	movw	r2, #1434	@ 0x59a
 8123f90:	4908      	ldr	r1, [pc, #32]	@ (8123fb4 <tcp_output_segment_busy+0x38>)
 8123f92:	4809      	ldr	r0, [pc, #36]	@ (8123fb8 <tcp_output_segment_busy+0x3c>)
 8123f94:	f002 fd6e 	bl	8126a74 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8123f98:	687b      	ldr	r3, [r7, #4]
 8123f9a:	685b      	ldr	r3, [r3, #4]
 8123f9c:	7b9b      	ldrb	r3, [r3, #14]
 8123f9e:	2b01      	cmp	r3, #1
 8123fa0:	d001      	beq.n	8123fa6 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8123fa2:	2301      	movs	r3, #1
 8123fa4:	e000      	b.n	8123fa8 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8123fa6:	2300      	movs	r3, #0
}
 8123fa8:	4618      	mov	r0, r3
 8123faa:	3708      	adds	r7, #8
 8123fac:	46bd      	mov	sp, r7
 8123fae:	bd80      	pop	{r7, pc}
 8123fb0:	08129ef8 	.word	0x08129ef8
 8123fb4:	0812a4d8 	.word	0x0812a4d8
 8123fb8:	08129f90 	.word	0x08129f90

08123fbc <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8123fbc:	b5b0      	push	{r4, r5, r7, lr}
 8123fbe:	b08c      	sub	sp, #48	@ 0x30
 8123fc0:	af04      	add	r7, sp, #16
 8123fc2:	60f8      	str	r0, [r7, #12]
 8123fc4:	60b9      	str	r1, [r7, #8]
 8123fc6:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8123fc8:	68fb      	ldr	r3, [r7, #12]
 8123fca:	2b00      	cmp	r3, #0
 8123fcc:	d106      	bne.n	8123fdc <tcp_output_segment+0x20>
 8123fce:	4b64      	ldr	r3, [pc, #400]	@ (8124160 <tcp_output_segment+0x1a4>)
 8123fd0:	f44f 62b7 	mov.w	r2, #1464	@ 0x5b8
 8123fd4:	4963      	ldr	r1, [pc, #396]	@ (8124164 <tcp_output_segment+0x1a8>)
 8123fd6:	4864      	ldr	r0, [pc, #400]	@ (8124168 <tcp_output_segment+0x1ac>)
 8123fd8:	f002 fd4c 	bl	8126a74 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8123fdc:	68bb      	ldr	r3, [r7, #8]
 8123fde:	2b00      	cmp	r3, #0
 8123fe0:	d106      	bne.n	8123ff0 <tcp_output_segment+0x34>
 8123fe2:	4b5f      	ldr	r3, [pc, #380]	@ (8124160 <tcp_output_segment+0x1a4>)
 8123fe4:	f240 52b9 	movw	r2, #1465	@ 0x5b9
 8123fe8:	4960      	ldr	r1, [pc, #384]	@ (812416c <tcp_output_segment+0x1b0>)
 8123fea:	485f      	ldr	r0, [pc, #380]	@ (8124168 <tcp_output_segment+0x1ac>)
 8123fec:	f002 fd42 	bl	8126a74 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8123ff0:	687b      	ldr	r3, [r7, #4]
 8123ff2:	2b00      	cmp	r3, #0
 8123ff4:	d106      	bne.n	8124004 <tcp_output_segment+0x48>
 8123ff6:	4b5a      	ldr	r3, [pc, #360]	@ (8124160 <tcp_output_segment+0x1a4>)
 8123ff8:	f240 52ba 	movw	r2, #1466	@ 0x5ba
 8123ffc:	495c      	ldr	r1, [pc, #368]	@ (8124170 <tcp_output_segment+0x1b4>)
 8123ffe:	485a      	ldr	r0, [pc, #360]	@ (8124168 <tcp_output_segment+0x1ac>)
 8124000:	f002 fd38 	bl	8126a74 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8124004:	68f8      	ldr	r0, [r7, #12]
 8124006:	f7ff ffb9 	bl	8123f7c <tcp_output_segment_busy>
 812400a:	4603      	mov	r3, r0
 812400c:	2b00      	cmp	r3, #0
 812400e:	d001      	beq.n	8124014 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8124010:	2300      	movs	r3, #0
 8124012:	e0a1      	b.n	8124158 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8124014:	68bb      	ldr	r3, [r7, #8]
 8124016:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8124018:	68fb      	ldr	r3, [r7, #12]
 812401a:	68dc      	ldr	r4, [r3, #12]
 812401c:	4610      	mov	r0, r2
 812401e:	f7f5 ff8a 	bl	8119f36 <lwip_htonl>
 8124022:	4603      	mov	r3, r0
 8124024:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8124026:	68bb      	ldr	r3, [r7, #8]
 8124028:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 812402a:	68fb      	ldr	r3, [r7, #12]
 812402c:	68dc      	ldr	r4, [r3, #12]
 812402e:	4610      	mov	r0, r2
 8124030:	f7f5 ff6c 	bl	8119f0c <lwip_htons>
 8124034:	4603      	mov	r3, r0
 8124036:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8124038:	68bb      	ldr	r3, [r7, #8]
 812403a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 812403c:	68ba      	ldr	r2, [r7, #8]
 812403e:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 8124040:	441a      	add	r2, r3
 8124042:	68bb      	ldr	r3, [r7, #8]
 8124044:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8124046:	68fb      	ldr	r3, [r7, #12]
 8124048:	68db      	ldr	r3, [r3, #12]
 812404a:	3314      	adds	r3, #20
 812404c:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 812404e:	68fb      	ldr	r3, [r7, #12]
 8124050:	7a9b      	ldrb	r3, [r3, #10]
 8124052:	f003 0301 	and.w	r3, r3, #1
 8124056:	2b00      	cmp	r3, #0
 8124058:	d015      	beq.n	8124086 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 812405a:	68bb      	ldr	r3, [r7, #8]
 812405c:	3304      	adds	r3, #4
 812405e:	461a      	mov	r2, r3
 8124060:	6879      	ldr	r1, [r7, #4]
 8124062:	f44f 7006 	mov.w	r0, #536	@ 0x218
 8124066:	f7fc fa39 	bl	81204dc <tcp_eff_send_mss_netif>
 812406a:	4603      	mov	r3, r0
 812406c:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 812406e:	8b7b      	ldrh	r3, [r7, #26]
 8124070:	f043 7301 	orr.w	r3, r3, #33816576	@ 0x2040000
 8124074:	4618      	mov	r0, r3
 8124076:	f7f5 ff5e 	bl	8119f36 <lwip_htonl>
 812407a:	4602      	mov	r2, r0
 812407c:	69fb      	ldr	r3, [r7, #28]
 812407e:	601a      	str	r2, [r3, #0]
    opts += 1;
 8124080:	69fb      	ldr	r3, [r7, #28]
 8124082:	3304      	adds	r3, #4
 8124084:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8124086:	68bb      	ldr	r3, [r7, #8]
 8124088:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 812408c:	2b00      	cmp	r3, #0
 812408e:	da02      	bge.n	8124096 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8124090:	68bb      	ldr	r3, [r7, #8]
 8124092:	2200      	movs	r2, #0
 8124094:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  if (pcb->rttest == 0) {
 8124096:	68bb      	ldr	r3, [r7, #8]
 8124098:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 812409a:	2b00      	cmp	r3, #0
 812409c:	d10c      	bne.n	81240b8 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 812409e:	4b35      	ldr	r3, [pc, #212]	@ (8124174 <tcp_output_segment+0x1b8>)
 81240a0:	681a      	ldr	r2, [r3, #0]
 81240a2:	68bb      	ldr	r3, [r7, #8]
 81240a4:	635a      	str	r2, [r3, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 81240a6:	68fb      	ldr	r3, [r7, #12]
 81240a8:	68db      	ldr	r3, [r3, #12]
 81240aa:	685b      	ldr	r3, [r3, #4]
 81240ac:	4618      	mov	r0, r3
 81240ae:	f7f5 ff42 	bl	8119f36 <lwip_htonl>
 81240b2:	4602      	mov	r2, r0
 81240b4:	68bb      	ldr	r3, [r7, #8]
 81240b6:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 81240b8:	68fb      	ldr	r3, [r7, #12]
 81240ba:	68da      	ldr	r2, [r3, #12]
 81240bc:	68fb      	ldr	r3, [r7, #12]
 81240be:	685b      	ldr	r3, [r3, #4]
 81240c0:	685b      	ldr	r3, [r3, #4]
 81240c2:	1ad3      	subs	r3, r2, r3
 81240c4:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 81240c6:	68fb      	ldr	r3, [r7, #12]
 81240c8:	685b      	ldr	r3, [r3, #4]
 81240ca:	8959      	ldrh	r1, [r3, #10]
 81240cc:	68fb      	ldr	r3, [r7, #12]
 81240ce:	685b      	ldr	r3, [r3, #4]
 81240d0:	8b3a      	ldrh	r2, [r7, #24]
 81240d2:	1a8a      	subs	r2, r1, r2
 81240d4:	b292      	uxth	r2, r2
 81240d6:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 81240d8:	68fb      	ldr	r3, [r7, #12]
 81240da:	685b      	ldr	r3, [r3, #4]
 81240dc:	8919      	ldrh	r1, [r3, #8]
 81240de:	68fb      	ldr	r3, [r7, #12]
 81240e0:	685b      	ldr	r3, [r3, #4]
 81240e2:	8b3a      	ldrh	r2, [r7, #24]
 81240e4:	1a8a      	subs	r2, r1, r2
 81240e6:	b292      	uxth	r2, r2
 81240e8:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 81240ea:	68fb      	ldr	r3, [r7, #12]
 81240ec:	685b      	ldr	r3, [r3, #4]
 81240ee:	68fa      	ldr	r2, [r7, #12]
 81240f0:	68d2      	ldr	r2, [r2, #12]
 81240f2:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 81240f4:	68fb      	ldr	r3, [r7, #12]
 81240f6:	68db      	ldr	r3, [r3, #12]
 81240f8:	2200      	movs	r2, #0
 81240fa:	741a      	strb	r2, [r3, #16]
 81240fc:	2200      	movs	r2, #0
 81240fe:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8124100:	68fb      	ldr	r3, [r7, #12]
 8124102:	68da      	ldr	r2, [r3, #12]
 8124104:	68fb      	ldr	r3, [r7, #12]
 8124106:	7a9b      	ldrb	r3, [r3, #10]
 8124108:	f003 0301 	and.w	r3, r3, #1
 812410c:	2b00      	cmp	r3, #0
 812410e:	d001      	beq.n	8124114 <tcp_output_segment+0x158>
 8124110:	2318      	movs	r3, #24
 8124112:	e000      	b.n	8124116 <tcp_output_segment+0x15a>
 8124114:	2314      	movs	r3, #20
 8124116:	4413      	add	r3, r2
 8124118:	69fa      	ldr	r2, [r7, #28]
 812411a:	429a      	cmp	r2, r3
 812411c:	d006      	beq.n	812412c <tcp_output_segment+0x170>
 812411e:	4b10      	ldr	r3, [pc, #64]	@ (8124160 <tcp_output_segment+0x1a4>)
 8124120:	f240 621c 	movw	r2, #1564	@ 0x61c
 8124124:	4914      	ldr	r1, [pc, #80]	@ (8124178 <tcp_output_segment+0x1bc>)
 8124126:	4810      	ldr	r0, [pc, #64]	@ (8124168 <tcp_output_segment+0x1ac>)
 8124128:	f002 fca4 	bl	8126a74 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 812412c:	68fb      	ldr	r3, [r7, #12]
 812412e:	6858      	ldr	r0, [r3, #4]
 8124130:	68b9      	ldr	r1, [r7, #8]
 8124132:	68bb      	ldr	r3, [r7, #8]
 8124134:	1d1c      	adds	r4, r3, #4
 8124136:	68bb      	ldr	r3, [r7, #8]
 8124138:	7add      	ldrb	r5, [r3, #11]
 812413a:	68bb      	ldr	r3, [r7, #8]
 812413c:	7a9b      	ldrb	r3, [r3, #10]
 812413e:	687a      	ldr	r2, [r7, #4]
 8124140:	9202      	str	r2, [sp, #8]
 8124142:	2206      	movs	r2, #6
 8124144:	9201      	str	r2, [sp, #4]
 8124146:	9300      	str	r3, [sp, #0]
 8124148:	462b      	mov	r3, r5
 812414a:	4622      	mov	r2, r4
 812414c:	f7f7 fc3e 	bl	811b9cc <ip4_output_if>
 8124150:	4603      	mov	r3, r0
 8124152:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8124154:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8124158:	4618      	mov	r0, r3
 812415a:	3720      	adds	r7, #32
 812415c:	46bd      	mov	sp, r7
 812415e:	bdb0      	pop	{r4, r5, r7, pc}
 8124160:	08129ef8 	.word	0x08129ef8
 8124164:	0812a500 	.word	0x0812a500
 8124168:	08129f90 	.word	0x08129f90
 812416c:	0812a520 	.word	0x0812a520
 8124170:	0812a540 	.word	0x0812a540
 8124174:	1000e50c 	.word	0x1000e50c
 8124178:	0812a564 	.word	0x0812a564

0812417c <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 812417c:	b5b0      	push	{r4, r5, r7, lr}
 812417e:	b084      	sub	sp, #16
 8124180:	af00      	add	r7, sp, #0
 8124182:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8124184:	687b      	ldr	r3, [r7, #4]
 8124186:	2b00      	cmp	r3, #0
 8124188:	d106      	bne.n	8124198 <tcp_rexmit_rto_prepare+0x1c>
 812418a:	4b31      	ldr	r3, [pc, #196]	@ (8124250 <tcp_rexmit_rto_prepare+0xd4>)
 812418c:	f240 6263 	movw	r2, #1635	@ 0x663
 8124190:	4930      	ldr	r1, [pc, #192]	@ (8124254 <tcp_rexmit_rto_prepare+0xd8>)
 8124192:	4831      	ldr	r0, [pc, #196]	@ (8124258 <tcp_rexmit_rto_prepare+0xdc>)
 8124194:	f002 fc6e 	bl	8126a74 <iprintf>

  if (pcb->unacked == NULL) {
 8124198:	687b      	ldr	r3, [r7, #4]
 812419a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 812419c:	2b00      	cmp	r3, #0
 812419e:	d102      	bne.n	81241a6 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 81241a0:	f06f 0305 	mvn.w	r3, #5
 81241a4:	e050      	b.n	8124248 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 81241a6:	687b      	ldr	r3, [r7, #4]
 81241a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 81241aa:	60fb      	str	r3, [r7, #12]
 81241ac:	e00b      	b.n	81241c6 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 81241ae:	68f8      	ldr	r0, [r7, #12]
 81241b0:	f7ff fee4 	bl	8123f7c <tcp_output_segment_busy>
 81241b4:	4603      	mov	r3, r0
 81241b6:	2b00      	cmp	r3, #0
 81241b8:	d002      	beq.n	81241c0 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 81241ba:	f06f 0305 	mvn.w	r3, #5
 81241be:	e043      	b.n	8124248 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 81241c0:	68fb      	ldr	r3, [r7, #12]
 81241c2:	681b      	ldr	r3, [r3, #0]
 81241c4:	60fb      	str	r3, [r7, #12]
 81241c6:	68fb      	ldr	r3, [r7, #12]
 81241c8:	681b      	ldr	r3, [r3, #0]
 81241ca:	2b00      	cmp	r3, #0
 81241cc:	d1ef      	bne.n	81241ae <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 81241ce:	68f8      	ldr	r0, [r7, #12]
 81241d0:	f7ff fed4 	bl	8123f7c <tcp_output_segment_busy>
 81241d4:	4603      	mov	r3, r0
 81241d6:	2b00      	cmp	r3, #0
 81241d8:	d002      	beq.n	81241e0 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 81241da:	f06f 0305 	mvn.w	r3, #5
 81241de:	e033      	b.n	8124248 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 81241e0:	687b      	ldr	r3, [r7, #4]
 81241e2:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 81241e4:	68fb      	ldr	r3, [r7, #12]
 81241e6:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 81241e8:	687b      	ldr	r3, [r7, #4]
 81241ea:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 81241ec:	687b      	ldr	r3, [r7, #4]
 81241ee:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 81241f0:	687b      	ldr	r3, [r7, #4]
 81241f2:	2200      	movs	r2, #0
 81241f4:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 81241f6:	687b      	ldr	r3, [r7, #4]
 81241f8:	8b5b      	ldrh	r3, [r3, #26]
 81241fa:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 81241fe:	b29a      	uxth	r2, r3
 8124200:	687b      	ldr	r3, [r7, #4]
 8124202:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8124204:	68fb      	ldr	r3, [r7, #12]
 8124206:	68db      	ldr	r3, [r3, #12]
 8124208:	685b      	ldr	r3, [r3, #4]
 812420a:	4618      	mov	r0, r3
 812420c:	f7f5 fe93 	bl	8119f36 <lwip_htonl>
 8124210:	4604      	mov	r4, r0
 8124212:	68fb      	ldr	r3, [r7, #12]
 8124214:	891b      	ldrh	r3, [r3, #8]
 8124216:	461d      	mov	r5, r3
 8124218:	68fb      	ldr	r3, [r7, #12]
 812421a:	68db      	ldr	r3, [r3, #12]
 812421c:	899b      	ldrh	r3, [r3, #12]
 812421e:	b29b      	uxth	r3, r3
 8124220:	4618      	mov	r0, r3
 8124222:	f7f5 fe73 	bl	8119f0c <lwip_htons>
 8124226:	4603      	mov	r3, r0
 8124228:	b2db      	uxtb	r3, r3
 812422a:	f003 0303 	and.w	r3, r3, #3
 812422e:	2b00      	cmp	r3, #0
 8124230:	d001      	beq.n	8124236 <tcp_rexmit_rto_prepare+0xba>
 8124232:	2301      	movs	r3, #1
 8124234:	e000      	b.n	8124238 <tcp_rexmit_rto_prepare+0xbc>
 8124236:	2300      	movs	r3, #0
 8124238:	442b      	add	r3, r5
 812423a:	18e2      	adds	r2, r4, r3
 812423c:	687b      	ldr	r3, [r7, #4]
 812423e:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8124240:	687b      	ldr	r3, [r7, #4]
 8124242:	2200      	movs	r2, #0
 8124244:	635a      	str	r2, [r3, #52]	@ 0x34

  return ERR_OK;
 8124246:	2300      	movs	r3, #0
}
 8124248:	4618      	mov	r0, r3
 812424a:	3710      	adds	r7, #16
 812424c:	46bd      	mov	sp, r7
 812424e:	bdb0      	pop	{r4, r5, r7, pc}
 8124250:	08129ef8 	.word	0x08129ef8
 8124254:	0812a578 	.word	0x0812a578
 8124258:	08129f90 	.word	0x08129f90

0812425c <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 812425c:	b580      	push	{r7, lr}
 812425e:	b082      	sub	sp, #8
 8124260:	af00      	add	r7, sp, #0
 8124262:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8124264:	687b      	ldr	r3, [r7, #4]
 8124266:	2b00      	cmp	r3, #0
 8124268:	d106      	bne.n	8124278 <tcp_rexmit_rto_commit+0x1c>
 812426a:	4b0d      	ldr	r3, [pc, #52]	@ (81242a0 <tcp_rexmit_rto_commit+0x44>)
 812426c:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 8124270:	490c      	ldr	r1, [pc, #48]	@ (81242a4 <tcp_rexmit_rto_commit+0x48>)
 8124272:	480d      	ldr	r0, [pc, #52]	@ (81242a8 <tcp_rexmit_rto_commit+0x4c>)
 8124274:	f002 fbfe 	bl	8126a74 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8124278:	687b      	ldr	r3, [r7, #4]
 812427a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 812427e:	2bff      	cmp	r3, #255	@ 0xff
 8124280:	d007      	beq.n	8124292 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8124282:	687b      	ldr	r3, [r7, #4]
 8124284:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8124288:	3301      	adds	r3, #1
 812428a:	b2da      	uxtb	r2, r3
 812428c:	687b      	ldr	r3, [r7, #4]
 812428e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8124292:	6878      	ldr	r0, [r7, #4]
 8124294:	f7ff fc7e 	bl	8123b94 <tcp_output>
}
 8124298:	bf00      	nop
 812429a:	3708      	adds	r7, #8
 812429c:	46bd      	mov	sp, r7
 812429e:	bd80      	pop	{r7, pc}
 81242a0:	08129ef8 	.word	0x08129ef8
 81242a4:	0812a59c 	.word	0x0812a59c
 81242a8:	08129f90 	.word	0x08129f90

081242ac <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 81242ac:	b580      	push	{r7, lr}
 81242ae:	b082      	sub	sp, #8
 81242b0:	af00      	add	r7, sp, #0
 81242b2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 81242b4:	687b      	ldr	r3, [r7, #4]
 81242b6:	2b00      	cmp	r3, #0
 81242b8:	d106      	bne.n	81242c8 <tcp_rexmit_rto+0x1c>
 81242ba:	4b0a      	ldr	r3, [pc, #40]	@ (81242e4 <tcp_rexmit_rto+0x38>)
 81242bc:	f240 62ad 	movw	r2, #1709	@ 0x6ad
 81242c0:	4909      	ldr	r1, [pc, #36]	@ (81242e8 <tcp_rexmit_rto+0x3c>)
 81242c2:	480a      	ldr	r0, [pc, #40]	@ (81242ec <tcp_rexmit_rto+0x40>)
 81242c4:	f002 fbd6 	bl	8126a74 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 81242c8:	6878      	ldr	r0, [r7, #4]
 81242ca:	f7ff ff57 	bl	812417c <tcp_rexmit_rto_prepare>
 81242ce:	4603      	mov	r3, r0
 81242d0:	2b00      	cmp	r3, #0
 81242d2:	d102      	bne.n	81242da <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 81242d4:	6878      	ldr	r0, [r7, #4]
 81242d6:	f7ff ffc1 	bl	812425c <tcp_rexmit_rto_commit>
  }
}
 81242da:	bf00      	nop
 81242dc:	3708      	adds	r7, #8
 81242de:	46bd      	mov	sp, r7
 81242e0:	bd80      	pop	{r7, pc}
 81242e2:	bf00      	nop
 81242e4:	08129ef8 	.word	0x08129ef8
 81242e8:	0812a5c0 	.word	0x0812a5c0
 81242ec:	08129f90 	.word	0x08129f90

081242f0 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 81242f0:	b590      	push	{r4, r7, lr}
 81242f2:	b085      	sub	sp, #20
 81242f4:	af00      	add	r7, sp, #0
 81242f6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 81242f8:	687b      	ldr	r3, [r7, #4]
 81242fa:	2b00      	cmp	r3, #0
 81242fc:	d106      	bne.n	812430c <tcp_rexmit+0x1c>
 81242fe:	4b2f      	ldr	r3, [pc, #188]	@ (81243bc <tcp_rexmit+0xcc>)
 8124300:	f240 62c1 	movw	r2, #1729	@ 0x6c1
 8124304:	492e      	ldr	r1, [pc, #184]	@ (81243c0 <tcp_rexmit+0xd0>)
 8124306:	482f      	ldr	r0, [pc, #188]	@ (81243c4 <tcp_rexmit+0xd4>)
 8124308:	f002 fbb4 	bl	8126a74 <iprintf>

  if (pcb->unacked == NULL) {
 812430c:	687b      	ldr	r3, [r7, #4]
 812430e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8124310:	2b00      	cmp	r3, #0
 8124312:	d102      	bne.n	812431a <tcp_rexmit+0x2a>
    return ERR_VAL;
 8124314:	f06f 0305 	mvn.w	r3, #5
 8124318:	e04c      	b.n	81243b4 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 812431a:	687b      	ldr	r3, [r7, #4]
 812431c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 812431e:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8124320:	68b8      	ldr	r0, [r7, #8]
 8124322:	f7ff fe2b 	bl	8123f7c <tcp_output_segment_busy>
 8124326:	4603      	mov	r3, r0
 8124328:	2b00      	cmp	r3, #0
 812432a:	d002      	beq.n	8124332 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 812432c:	f06f 0305 	mvn.w	r3, #5
 8124330:	e040      	b.n	81243b4 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8124332:	68bb      	ldr	r3, [r7, #8]
 8124334:	681a      	ldr	r2, [r3, #0]
 8124336:	687b      	ldr	r3, [r7, #4]
 8124338:	671a      	str	r2, [r3, #112]	@ 0x70

  cur_seg = &(pcb->unsent);
 812433a:	687b      	ldr	r3, [r7, #4]
 812433c:	336c      	adds	r3, #108	@ 0x6c
 812433e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8124340:	e002      	b.n	8124348 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8124342:	68fb      	ldr	r3, [r7, #12]
 8124344:	681b      	ldr	r3, [r3, #0]
 8124346:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8124348:	68fb      	ldr	r3, [r7, #12]
 812434a:	681b      	ldr	r3, [r3, #0]
 812434c:	2b00      	cmp	r3, #0
 812434e:	d011      	beq.n	8124374 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8124350:	68fb      	ldr	r3, [r7, #12]
 8124352:	681b      	ldr	r3, [r3, #0]
 8124354:	68db      	ldr	r3, [r3, #12]
 8124356:	685b      	ldr	r3, [r3, #4]
 8124358:	4618      	mov	r0, r3
 812435a:	f7f5 fdec 	bl	8119f36 <lwip_htonl>
 812435e:	4604      	mov	r4, r0
 8124360:	68bb      	ldr	r3, [r7, #8]
 8124362:	68db      	ldr	r3, [r3, #12]
 8124364:	685b      	ldr	r3, [r3, #4]
 8124366:	4618      	mov	r0, r3
 8124368:	f7f5 fde5 	bl	8119f36 <lwip_htonl>
 812436c:	4603      	mov	r3, r0
 812436e:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8124370:	2b00      	cmp	r3, #0
 8124372:	dbe6      	blt.n	8124342 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8124374:	68fb      	ldr	r3, [r7, #12]
 8124376:	681a      	ldr	r2, [r3, #0]
 8124378:	68bb      	ldr	r3, [r7, #8]
 812437a:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 812437c:	68fb      	ldr	r3, [r7, #12]
 812437e:	68ba      	ldr	r2, [r7, #8]
 8124380:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8124382:	68bb      	ldr	r3, [r7, #8]
 8124384:	681b      	ldr	r3, [r3, #0]
 8124386:	2b00      	cmp	r3, #0
 8124388:	d103      	bne.n	8124392 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 812438a:	687b      	ldr	r3, [r7, #4]
 812438c:	2200      	movs	r2, #0
 812438e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8124392:	687b      	ldr	r3, [r7, #4]
 8124394:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8124398:	2bff      	cmp	r3, #255	@ 0xff
 812439a:	d007      	beq.n	81243ac <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 812439c:	687b      	ldr	r3, [r7, #4]
 812439e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 81243a2:	3301      	adds	r3, #1
 81243a4:	b2da      	uxtb	r2, r3
 81243a6:	687b      	ldr	r3, [r7, #4]
 81243a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 81243ac:	687b      	ldr	r3, [r7, #4]
 81243ae:	2200      	movs	r2, #0
 81243b0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 81243b2:	2300      	movs	r3, #0
}
 81243b4:	4618      	mov	r0, r3
 81243b6:	3714      	adds	r7, #20
 81243b8:	46bd      	mov	sp, r7
 81243ba:	bd90      	pop	{r4, r7, pc}
 81243bc:	08129ef8 	.word	0x08129ef8
 81243c0:	0812a5dc 	.word	0x0812a5dc
 81243c4:	08129f90 	.word	0x08129f90

081243c8 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 81243c8:	b580      	push	{r7, lr}
 81243ca:	b082      	sub	sp, #8
 81243cc:	af00      	add	r7, sp, #0
 81243ce:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 81243d0:	687b      	ldr	r3, [r7, #4]
 81243d2:	2b00      	cmp	r3, #0
 81243d4:	d106      	bne.n	81243e4 <tcp_rexmit_fast+0x1c>
 81243d6:	4b2a      	ldr	r3, [pc, #168]	@ (8124480 <tcp_rexmit_fast+0xb8>)
 81243d8:	f240 62f9 	movw	r2, #1785	@ 0x6f9
 81243dc:	4929      	ldr	r1, [pc, #164]	@ (8124484 <tcp_rexmit_fast+0xbc>)
 81243de:	482a      	ldr	r0, [pc, #168]	@ (8124488 <tcp_rexmit_fast+0xc0>)
 81243e0:	f002 fb48 	bl	8126a74 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 81243e4:	687b      	ldr	r3, [r7, #4]
 81243e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 81243e8:	2b00      	cmp	r3, #0
 81243ea:	d044      	beq.n	8124476 <tcp_rexmit_fast+0xae>
 81243ec:	687b      	ldr	r3, [r7, #4]
 81243ee:	8b5b      	ldrh	r3, [r3, #26]
 81243f0:	f003 0304 	and.w	r3, r3, #4
 81243f4:	2b00      	cmp	r3, #0
 81243f6:	d13e      	bne.n	8124476 <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 81243f8:	6878      	ldr	r0, [r7, #4]
 81243fa:	f7ff ff79 	bl	81242f0 <tcp_rexmit>
 81243fe:	4603      	mov	r3, r0
 8124400:	2b00      	cmp	r3, #0
 8124402:	d138      	bne.n	8124476 <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8124404:	687b      	ldr	r3, [r7, #4]
 8124406:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 812440a:	687b      	ldr	r3, [r7, #4]
 812440c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8124410:	4293      	cmp	r3, r2
 8124412:	bf28      	it	cs
 8124414:	4613      	movcs	r3, r2
 8124416:	b29b      	uxth	r3, r3
 8124418:	0fda      	lsrs	r2, r3, #31
 812441a:	4413      	add	r3, r2
 812441c:	105b      	asrs	r3, r3, #1
 812441e:	b29a      	uxth	r2, r3
 8124420:	687b      	ldr	r3, [r7, #4]
 8124422:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8124426:	687b      	ldr	r3, [r7, #4]
 8124428:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 812442c:	461a      	mov	r2, r3
 812442e:	687b      	ldr	r3, [r7, #4]
 8124430:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8124432:	005b      	lsls	r3, r3, #1
 8124434:	429a      	cmp	r2, r3
 8124436:	d206      	bcs.n	8124446 <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8124438:	687b      	ldr	r3, [r7, #4]
 812443a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 812443c:	005b      	lsls	r3, r3, #1
 812443e:	b29a      	uxth	r2, r3
 8124440:	687b      	ldr	r3, [r7, #4]
 8124442:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8124446:	687b      	ldr	r3, [r7, #4]
 8124448:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 812444c:	687b      	ldr	r3, [r7, #4]
 812444e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8124450:	4619      	mov	r1, r3
 8124452:	0049      	lsls	r1, r1, #1
 8124454:	440b      	add	r3, r1
 8124456:	b29b      	uxth	r3, r3
 8124458:	4413      	add	r3, r2
 812445a:	b29a      	uxth	r2, r3
 812445c:	687b      	ldr	r3, [r7, #4]
 812445e:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      tcp_set_flags(pcb, TF_INFR);
 8124462:	687b      	ldr	r3, [r7, #4]
 8124464:	8b5b      	ldrh	r3, [r3, #26]
 8124466:	f043 0304 	orr.w	r3, r3, #4
 812446a:	b29a      	uxth	r2, r3
 812446c:	687b      	ldr	r3, [r7, #4]
 812446e:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8124470:	687b      	ldr	r3, [r7, #4]
 8124472:	2200      	movs	r2, #0
 8124474:	861a      	strh	r2, [r3, #48]	@ 0x30
    }
  }
}
 8124476:	bf00      	nop
 8124478:	3708      	adds	r7, #8
 812447a:	46bd      	mov	sp, r7
 812447c:	bd80      	pop	{r7, pc}
 812447e:	bf00      	nop
 8124480:	08129ef8 	.word	0x08129ef8
 8124484:	0812a5f4 	.word	0x0812a5f4
 8124488:	08129f90 	.word	0x08129f90

0812448c <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 812448c:	b580      	push	{r7, lr}
 812448e:	b086      	sub	sp, #24
 8124490:	af00      	add	r7, sp, #0
 8124492:	60f8      	str	r0, [r7, #12]
 8124494:	607b      	str	r3, [r7, #4]
 8124496:	460b      	mov	r3, r1
 8124498:	817b      	strh	r3, [r7, #10]
 812449a:	4613      	mov	r3, r2
 812449c:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 812449e:	897a      	ldrh	r2, [r7, #10]
 81244a0:	893b      	ldrh	r3, [r7, #8]
 81244a2:	4413      	add	r3, r2
 81244a4:	b29b      	uxth	r3, r3
 81244a6:	3314      	adds	r3, #20
 81244a8:	b29b      	uxth	r3, r3
 81244aa:	f44f 7220 	mov.w	r2, #640	@ 0x280
 81244ae:	4619      	mov	r1, r3
 81244b0:	2022      	movs	r0, #34	@ 0x22
 81244b2:	f7f9 fc51 	bl	811dd58 <pbuf_alloc>
 81244b6:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 81244b8:	697b      	ldr	r3, [r7, #20]
 81244ba:	2b00      	cmp	r3, #0
 81244bc:	d04d      	beq.n	812455a <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 81244be:	897b      	ldrh	r3, [r7, #10]
 81244c0:	3313      	adds	r3, #19
 81244c2:	697a      	ldr	r2, [r7, #20]
 81244c4:	8952      	ldrh	r2, [r2, #10]
 81244c6:	4293      	cmp	r3, r2
 81244c8:	db06      	blt.n	81244d8 <tcp_output_alloc_header_common+0x4c>
 81244ca:	4b26      	ldr	r3, [pc, #152]	@ (8124564 <tcp_output_alloc_header_common+0xd8>)
 81244cc:	f240 7223 	movw	r2, #1827	@ 0x723
 81244d0:	4925      	ldr	r1, [pc, #148]	@ (8124568 <tcp_output_alloc_header_common+0xdc>)
 81244d2:	4826      	ldr	r0, [pc, #152]	@ (812456c <tcp_output_alloc_header_common+0xe0>)
 81244d4:	f002 face 	bl	8126a74 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 81244d8:	697b      	ldr	r3, [r7, #20]
 81244da:	685b      	ldr	r3, [r3, #4]
 81244dc:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 81244de:	8c3b      	ldrh	r3, [r7, #32]
 81244e0:	4618      	mov	r0, r3
 81244e2:	f7f5 fd13 	bl	8119f0c <lwip_htons>
 81244e6:	4603      	mov	r3, r0
 81244e8:	461a      	mov	r2, r3
 81244ea:	693b      	ldr	r3, [r7, #16]
 81244ec:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 81244ee:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 81244f0:	4618      	mov	r0, r3
 81244f2:	f7f5 fd0b 	bl	8119f0c <lwip_htons>
 81244f6:	4603      	mov	r3, r0
 81244f8:	461a      	mov	r2, r3
 81244fa:	693b      	ldr	r3, [r7, #16]
 81244fc:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 81244fe:	693b      	ldr	r3, [r7, #16]
 8124500:	687a      	ldr	r2, [r7, #4]
 8124502:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8124504:	68f8      	ldr	r0, [r7, #12]
 8124506:	f7f5 fd16 	bl	8119f36 <lwip_htonl>
 812450a:	4602      	mov	r2, r0
 812450c:	693b      	ldr	r3, [r7, #16]
 812450e:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8124510:	897b      	ldrh	r3, [r7, #10]
 8124512:	089b      	lsrs	r3, r3, #2
 8124514:	b29b      	uxth	r3, r3
 8124516:	3305      	adds	r3, #5
 8124518:	b29b      	uxth	r3, r3
 812451a:	031b      	lsls	r3, r3, #12
 812451c:	b29a      	uxth	r2, r3
 812451e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8124522:	b29b      	uxth	r3, r3
 8124524:	4313      	orrs	r3, r2
 8124526:	b29b      	uxth	r3, r3
 8124528:	4618      	mov	r0, r3
 812452a:	f7f5 fcef 	bl	8119f0c <lwip_htons>
 812452e:	4603      	mov	r3, r0
 8124530:	461a      	mov	r2, r3
 8124532:	693b      	ldr	r3, [r7, #16]
 8124534:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8124536:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8124538:	4618      	mov	r0, r3
 812453a:	f7f5 fce7 	bl	8119f0c <lwip_htons>
 812453e:	4603      	mov	r3, r0
 8124540:	461a      	mov	r2, r3
 8124542:	693b      	ldr	r3, [r7, #16]
 8124544:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8124546:	693b      	ldr	r3, [r7, #16]
 8124548:	2200      	movs	r2, #0
 812454a:	741a      	strb	r2, [r3, #16]
 812454c:	2200      	movs	r2, #0
 812454e:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8124550:	693b      	ldr	r3, [r7, #16]
 8124552:	2200      	movs	r2, #0
 8124554:	749a      	strb	r2, [r3, #18]
 8124556:	2200      	movs	r2, #0
 8124558:	74da      	strb	r2, [r3, #19]
  }
  return p;
 812455a:	697b      	ldr	r3, [r7, #20]
}
 812455c:	4618      	mov	r0, r3
 812455e:	3718      	adds	r7, #24
 8124560:	46bd      	mov	sp, r7
 8124562:	bd80      	pop	{r7, pc}
 8124564:	08129ef8 	.word	0x08129ef8
 8124568:	0812a614 	.word	0x0812a614
 812456c:	08129f90 	.word	0x08129f90

08124570 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8124570:	b5b0      	push	{r4, r5, r7, lr}
 8124572:	b08a      	sub	sp, #40	@ 0x28
 8124574:	af04      	add	r7, sp, #16
 8124576:	60f8      	str	r0, [r7, #12]
 8124578:	607b      	str	r3, [r7, #4]
 812457a:	460b      	mov	r3, r1
 812457c:	817b      	strh	r3, [r7, #10]
 812457e:	4613      	mov	r3, r2
 8124580:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8124582:	68fb      	ldr	r3, [r7, #12]
 8124584:	2b00      	cmp	r3, #0
 8124586:	d106      	bne.n	8124596 <tcp_output_alloc_header+0x26>
 8124588:	4b15      	ldr	r3, [pc, #84]	@ (81245e0 <tcp_output_alloc_header+0x70>)
 812458a:	f240 7242 	movw	r2, #1858	@ 0x742
 812458e:	4915      	ldr	r1, [pc, #84]	@ (81245e4 <tcp_output_alloc_header+0x74>)
 8124590:	4815      	ldr	r0, [pc, #84]	@ (81245e8 <tcp_output_alloc_header+0x78>)
 8124592:	f002 fa6f 	bl	8126a74 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8124596:	68fb      	ldr	r3, [r7, #12]
 8124598:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 812459a:	68fb      	ldr	r3, [r7, #12]
 812459c:	8adb      	ldrh	r3, [r3, #22]
 812459e:	68fa      	ldr	r2, [r7, #12]
 81245a0:	8b12      	ldrh	r2, [r2, #24]
 81245a2:	68f9      	ldr	r1, [r7, #12]
 81245a4:	8d49      	ldrh	r1, [r1, #42]	@ 0x2a
 81245a6:	893d      	ldrh	r5, [r7, #8]
 81245a8:	897c      	ldrh	r4, [r7, #10]
 81245aa:	9103      	str	r1, [sp, #12]
 81245ac:	2110      	movs	r1, #16
 81245ae:	9102      	str	r1, [sp, #8]
 81245b0:	9201      	str	r2, [sp, #4]
 81245b2:	9300      	str	r3, [sp, #0]
 81245b4:	687b      	ldr	r3, [r7, #4]
 81245b6:	462a      	mov	r2, r5
 81245b8:	4621      	mov	r1, r4
 81245ba:	f7ff ff67 	bl	812448c <tcp_output_alloc_header_common>
 81245be:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 81245c0:	697b      	ldr	r3, [r7, #20]
 81245c2:	2b00      	cmp	r3, #0
 81245c4:	d006      	beq.n	81245d4 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 81245c6:	68fb      	ldr	r3, [r7, #12]
 81245c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 81245ca:	68fa      	ldr	r2, [r7, #12]
 81245cc:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 81245ce:	441a      	add	r2, r3
 81245d0:	68fb      	ldr	r3, [r7, #12]
 81245d2:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  return p;
 81245d4:	697b      	ldr	r3, [r7, #20]
}
 81245d6:	4618      	mov	r0, r3
 81245d8:	3718      	adds	r7, #24
 81245da:	46bd      	mov	sp, r7
 81245dc:	bdb0      	pop	{r4, r5, r7, pc}
 81245de:	bf00      	nop
 81245e0:	08129ef8 	.word	0x08129ef8
 81245e4:	0812a644 	.word	0x0812a644
 81245e8:	08129f90 	.word	0x08129f90

081245ec <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 81245ec:	b580      	push	{r7, lr}
 81245ee:	b088      	sub	sp, #32
 81245f0:	af00      	add	r7, sp, #0
 81245f2:	60f8      	str	r0, [r7, #12]
 81245f4:	60b9      	str	r1, [r7, #8]
 81245f6:	4611      	mov	r1, r2
 81245f8:	461a      	mov	r2, r3
 81245fa:	460b      	mov	r3, r1
 81245fc:	71fb      	strb	r3, [r7, #7]
 81245fe:	4613      	mov	r3, r2
 8124600:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8124602:	2300      	movs	r3, #0
 8124604:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8124606:	68bb      	ldr	r3, [r7, #8]
 8124608:	2b00      	cmp	r3, #0
 812460a:	d106      	bne.n	812461a <tcp_output_fill_options+0x2e>
 812460c:	4b12      	ldr	r3, [pc, #72]	@ (8124658 <tcp_output_fill_options+0x6c>)
 812460e:	f240 7256 	movw	r2, #1878	@ 0x756
 8124612:	4912      	ldr	r1, [pc, #72]	@ (812465c <tcp_output_fill_options+0x70>)
 8124614:	4812      	ldr	r0, [pc, #72]	@ (8124660 <tcp_output_fill_options+0x74>)
 8124616:	f002 fa2d 	bl	8126a74 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 812461a:	68bb      	ldr	r3, [r7, #8]
 812461c:	685b      	ldr	r3, [r3, #4]
 812461e:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8124620:	69bb      	ldr	r3, [r7, #24]
 8124622:	3314      	adds	r3, #20
 8124624:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8124626:	8bfb      	ldrh	r3, [r7, #30]
 8124628:	009b      	lsls	r3, r3, #2
 812462a:	461a      	mov	r2, r3
 812462c:	79fb      	ldrb	r3, [r7, #7]
 812462e:	009b      	lsls	r3, r3, #2
 8124630:	f003 0304 	and.w	r3, r3, #4
 8124634:	4413      	add	r3, r2
 8124636:	3314      	adds	r3, #20
 8124638:	69ba      	ldr	r2, [r7, #24]
 812463a:	4413      	add	r3, r2
 812463c:	697a      	ldr	r2, [r7, #20]
 812463e:	429a      	cmp	r2, r3
 8124640:	d006      	beq.n	8124650 <tcp_output_fill_options+0x64>
 8124642:	4b05      	ldr	r3, [pc, #20]	@ (8124658 <tcp_output_fill_options+0x6c>)
 8124644:	f240 7275 	movw	r2, #1909	@ 0x775
 8124648:	4906      	ldr	r1, [pc, #24]	@ (8124664 <tcp_output_fill_options+0x78>)
 812464a:	4805      	ldr	r0, [pc, #20]	@ (8124660 <tcp_output_fill_options+0x74>)
 812464c:	f002 fa12 	bl	8126a74 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8124650:	bf00      	nop
 8124652:	3720      	adds	r7, #32
 8124654:	46bd      	mov	sp, r7
 8124656:	bd80      	pop	{r7, pc}
 8124658:	08129ef8 	.word	0x08129ef8
 812465c:	0812a66c 	.word	0x0812a66c
 8124660:	08129f90 	.word	0x08129f90
 8124664:	0812a564 	.word	0x0812a564

08124668 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8124668:	b580      	push	{r7, lr}
 812466a:	b08a      	sub	sp, #40	@ 0x28
 812466c:	af04      	add	r7, sp, #16
 812466e:	60f8      	str	r0, [r7, #12]
 8124670:	60b9      	str	r1, [r7, #8]
 8124672:	607a      	str	r2, [r7, #4]
 8124674:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8124676:	68bb      	ldr	r3, [r7, #8]
 8124678:	2b00      	cmp	r3, #0
 812467a:	d106      	bne.n	812468a <tcp_output_control_segment+0x22>
 812467c:	4b1c      	ldr	r3, [pc, #112]	@ (81246f0 <tcp_output_control_segment+0x88>)
 812467e:	f240 7287 	movw	r2, #1927	@ 0x787
 8124682:	491c      	ldr	r1, [pc, #112]	@ (81246f4 <tcp_output_control_segment+0x8c>)
 8124684:	481c      	ldr	r0, [pc, #112]	@ (81246f8 <tcp_output_control_segment+0x90>)
 8124686:	f002 f9f5 	bl	8126a74 <iprintf>

  netif = tcp_route(pcb, src, dst);
 812468a:	683a      	ldr	r2, [r7, #0]
 812468c:	6879      	ldr	r1, [r7, #4]
 812468e:	68f8      	ldr	r0, [r7, #12]
 8124690:	f7fe faea 	bl	8122c68 <tcp_route>
 8124694:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8124696:	693b      	ldr	r3, [r7, #16]
 8124698:	2b00      	cmp	r3, #0
 812469a:	d102      	bne.n	81246a2 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 812469c:	23fc      	movs	r3, #252	@ 0xfc
 812469e:	75fb      	strb	r3, [r7, #23]
 81246a0:	e01c      	b.n	81246dc <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 81246a2:	68fb      	ldr	r3, [r7, #12]
 81246a4:	2b00      	cmp	r3, #0
 81246a6:	d006      	beq.n	81246b6 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 81246a8:	68fb      	ldr	r3, [r7, #12]
 81246aa:	7adb      	ldrb	r3, [r3, #11]
 81246ac:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 81246ae:	68fb      	ldr	r3, [r7, #12]
 81246b0:	7a9b      	ldrb	r3, [r3, #10]
 81246b2:	757b      	strb	r3, [r7, #21]
 81246b4:	e003      	b.n	81246be <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 81246b6:	23ff      	movs	r3, #255	@ 0xff
 81246b8:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 81246ba:	2300      	movs	r3, #0
 81246bc:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 81246be:	7dba      	ldrb	r2, [r7, #22]
 81246c0:	693b      	ldr	r3, [r7, #16]
 81246c2:	9302      	str	r3, [sp, #8]
 81246c4:	2306      	movs	r3, #6
 81246c6:	9301      	str	r3, [sp, #4]
 81246c8:	7d7b      	ldrb	r3, [r7, #21]
 81246ca:	9300      	str	r3, [sp, #0]
 81246cc:	4613      	mov	r3, r2
 81246ce:	683a      	ldr	r2, [r7, #0]
 81246d0:	6879      	ldr	r1, [r7, #4]
 81246d2:	68b8      	ldr	r0, [r7, #8]
 81246d4:	f7f7 f97a 	bl	811b9cc <ip4_output_if>
 81246d8:	4603      	mov	r3, r0
 81246da:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 81246dc:	68b8      	ldr	r0, [r7, #8]
 81246de:	f7f9 fe1d 	bl	811e31c <pbuf_free>
  return err;
 81246e2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 81246e6:	4618      	mov	r0, r3
 81246e8:	3718      	adds	r7, #24
 81246ea:	46bd      	mov	sp, r7
 81246ec:	bd80      	pop	{r7, pc}
 81246ee:	bf00      	nop
 81246f0:	08129ef8 	.word	0x08129ef8
 81246f4:	0812a694 	.word	0x0812a694
 81246f8:	08129f90 	.word	0x08129f90

081246fc <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 81246fc:	b590      	push	{r4, r7, lr}
 81246fe:	b08b      	sub	sp, #44	@ 0x2c
 8124700:	af04      	add	r7, sp, #16
 8124702:	60f8      	str	r0, [r7, #12]
 8124704:	60b9      	str	r1, [r7, #8]
 8124706:	607a      	str	r2, [r7, #4]
 8124708:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 812470a:	683b      	ldr	r3, [r7, #0]
 812470c:	2b00      	cmp	r3, #0
 812470e:	d106      	bne.n	812471e <tcp_rst+0x22>
 8124710:	4b1f      	ldr	r3, [pc, #124]	@ (8124790 <tcp_rst+0x94>)
 8124712:	f240 72c4 	movw	r2, #1988	@ 0x7c4
 8124716:	491f      	ldr	r1, [pc, #124]	@ (8124794 <tcp_rst+0x98>)
 8124718:	481f      	ldr	r0, [pc, #124]	@ (8124798 <tcp_rst+0x9c>)
 812471a:	f002 f9ab 	bl	8126a74 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 812471e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8124720:	2b00      	cmp	r3, #0
 8124722:	d106      	bne.n	8124732 <tcp_rst+0x36>
 8124724:	4b1a      	ldr	r3, [pc, #104]	@ (8124790 <tcp_rst+0x94>)
 8124726:	f240 72c5 	movw	r2, #1989	@ 0x7c5
 812472a:	491c      	ldr	r1, [pc, #112]	@ (812479c <tcp_rst+0xa0>)
 812472c:	481a      	ldr	r0, [pc, #104]	@ (8124798 <tcp_rst+0x9c>)
 812472e:	f002 f9a1 	bl	8126a74 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8124732:	2300      	movs	r3, #0
 8124734:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8124736:	f246 0308 	movw	r3, #24584	@ 0x6008
 812473a:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 812473c:	7dfb      	ldrb	r3, [r7, #23]
 812473e:	b29c      	uxth	r4, r3
 8124740:	68b8      	ldr	r0, [r7, #8]
 8124742:	f7f5 fbf8 	bl	8119f36 <lwip_htonl>
 8124746:	4602      	mov	r2, r0
 8124748:	8abb      	ldrh	r3, [r7, #20]
 812474a:	9303      	str	r3, [sp, #12]
 812474c:	2314      	movs	r3, #20
 812474e:	9302      	str	r3, [sp, #8]
 8124750:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8124752:	9301      	str	r3, [sp, #4]
 8124754:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8124756:	9300      	str	r3, [sp, #0]
 8124758:	4613      	mov	r3, r2
 812475a:	2200      	movs	r2, #0
 812475c:	4621      	mov	r1, r4
 812475e:	6878      	ldr	r0, [r7, #4]
 8124760:	f7ff fe94 	bl	812448c <tcp_output_alloc_header_common>
 8124764:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8124766:	693b      	ldr	r3, [r7, #16]
 8124768:	2b00      	cmp	r3, #0
 812476a:	d00c      	beq.n	8124786 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 812476c:	7dfb      	ldrb	r3, [r7, #23]
 812476e:	2200      	movs	r2, #0
 8124770:	6939      	ldr	r1, [r7, #16]
 8124772:	68f8      	ldr	r0, [r7, #12]
 8124774:	f7ff ff3a 	bl	81245ec <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8124778:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 812477a:	683a      	ldr	r2, [r7, #0]
 812477c:	6939      	ldr	r1, [r7, #16]
 812477e:	68f8      	ldr	r0, [r7, #12]
 8124780:	f7ff ff72 	bl	8124668 <tcp_output_control_segment>
 8124784:	e000      	b.n	8124788 <tcp_rst+0x8c>
    return;
 8124786:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8124788:	371c      	adds	r7, #28
 812478a:	46bd      	mov	sp, r7
 812478c:	bd90      	pop	{r4, r7, pc}
 812478e:	bf00      	nop
 8124790:	08129ef8 	.word	0x08129ef8
 8124794:	0812a6c0 	.word	0x0812a6c0
 8124798:	08129f90 	.word	0x08129f90
 812479c:	0812a6dc 	.word	0x0812a6dc

081247a0 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 81247a0:	b590      	push	{r4, r7, lr}
 81247a2:	b087      	sub	sp, #28
 81247a4:	af00      	add	r7, sp, #0
 81247a6:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 81247a8:	2300      	movs	r3, #0
 81247aa:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 81247ac:	2300      	movs	r3, #0
 81247ae:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 81247b0:	687b      	ldr	r3, [r7, #4]
 81247b2:	2b00      	cmp	r3, #0
 81247b4:	d106      	bne.n	81247c4 <tcp_send_empty_ack+0x24>
 81247b6:	4b28      	ldr	r3, [pc, #160]	@ (8124858 <tcp_send_empty_ack+0xb8>)
 81247b8:	f240 72ea 	movw	r2, #2026	@ 0x7ea
 81247bc:	4927      	ldr	r1, [pc, #156]	@ (812485c <tcp_send_empty_ack+0xbc>)
 81247be:	4828      	ldr	r0, [pc, #160]	@ (8124860 <tcp_send_empty_ack+0xc0>)
 81247c0:	f002 f958 	bl	8126a74 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 81247c4:	7dfb      	ldrb	r3, [r7, #23]
 81247c6:	009b      	lsls	r3, r3, #2
 81247c8:	b2db      	uxtb	r3, r3
 81247ca:	f003 0304 	and.w	r3, r3, #4
 81247ce:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 81247d0:	7d7b      	ldrb	r3, [r7, #21]
 81247d2:	b29c      	uxth	r4, r3
 81247d4:	687b      	ldr	r3, [r7, #4]
 81247d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 81247d8:	4618      	mov	r0, r3
 81247da:	f7f5 fbac 	bl	8119f36 <lwip_htonl>
 81247de:	4603      	mov	r3, r0
 81247e0:	2200      	movs	r2, #0
 81247e2:	4621      	mov	r1, r4
 81247e4:	6878      	ldr	r0, [r7, #4]
 81247e6:	f7ff fec3 	bl	8124570 <tcp_output_alloc_header>
 81247ea:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 81247ec:	693b      	ldr	r3, [r7, #16]
 81247ee:	2b00      	cmp	r3, #0
 81247f0:	d109      	bne.n	8124806 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 81247f2:	687b      	ldr	r3, [r7, #4]
 81247f4:	8b5b      	ldrh	r3, [r3, #26]
 81247f6:	f043 0303 	orr.w	r3, r3, #3
 81247fa:	b29a      	uxth	r2, r3
 81247fc:	687b      	ldr	r3, [r7, #4]
 81247fe:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8124800:	f06f 0301 	mvn.w	r3, #1
 8124804:	e023      	b.n	812484e <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8124806:	7dbb      	ldrb	r3, [r7, #22]
 8124808:	7dfa      	ldrb	r2, [r7, #23]
 812480a:	6939      	ldr	r1, [r7, #16]
 812480c:	6878      	ldr	r0, [r7, #4]
 812480e:	f7ff feed 	bl	81245ec <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8124812:	687a      	ldr	r2, [r7, #4]
 8124814:	687b      	ldr	r3, [r7, #4]
 8124816:	3304      	adds	r3, #4
 8124818:	6939      	ldr	r1, [r7, #16]
 812481a:	6878      	ldr	r0, [r7, #4]
 812481c:	f7ff ff24 	bl	8124668 <tcp_output_control_segment>
 8124820:	4603      	mov	r3, r0
 8124822:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8124824:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8124828:	2b00      	cmp	r3, #0
 812482a:	d007      	beq.n	812483c <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 812482c:	687b      	ldr	r3, [r7, #4]
 812482e:	8b5b      	ldrh	r3, [r3, #26]
 8124830:	f043 0303 	orr.w	r3, r3, #3
 8124834:	b29a      	uxth	r2, r3
 8124836:	687b      	ldr	r3, [r7, #4]
 8124838:	835a      	strh	r2, [r3, #26]
 812483a:	e006      	b.n	812484a <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 812483c:	687b      	ldr	r3, [r7, #4]
 812483e:	8b5b      	ldrh	r3, [r3, #26]
 8124840:	f023 0303 	bic.w	r3, r3, #3
 8124844:	b29a      	uxth	r2, r3
 8124846:	687b      	ldr	r3, [r7, #4]
 8124848:	835a      	strh	r2, [r3, #26]
  }

  return err;
 812484a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 812484e:	4618      	mov	r0, r3
 8124850:	371c      	adds	r7, #28
 8124852:	46bd      	mov	sp, r7
 8124854:	bd90      	pop	{r4, r7, pc}
 8124856:	bf00      	nop
 8124858:	08129ef8 	.word	0x08129ef8
 812485c:	0812a6f8 	.word	0x0812a6f8
 8124860:	08129f90 	.word	0x08129f90

08124864 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8124864:	b590      	push	{r4, r7, lr}
 8124866:	b087      	sub	sp, #28
 8124868:	af00      	add	r7, sp, #0
 812486a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 812486c:	2300      	movs	r3, #0
 812486e:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8124870:	687b      	ldr	r3, [r7, #4]
 8124872:	2b00      	cmp	r3, #0
 8124874:	d106      	bne.n	8124884 <tcp_keepalive+0x20>
 8124876:	4b18      	ldr	r3, [pc, #96]	@ (81248d8 <tcp_keepalive+0x74>)
 8124878:	f640 0224 	movw	r2, #2084	@ 0x824
 812487c:	4917      	ldr	r1, [pc, #92]	@ (81248dc <tcp_keepalive+0x78>)
 812487e:	4818      	ldr	r0, [pc, #96]	@ (81248e0 <tcp_keepalive+0x7c>)
 8124880:	f002 f8f8 	bl	8126a74 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8124884:	7dfb      	ldrb	r3, [r7, #23]
 8124886:	b29c      	uxth	r4, r3
 8124888:	687b      	ldr	r3, [r7, #4]
 812488a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 812488c:	3b01      	subs	r3, #1
 812488e:	4618      	mov	r0, r3
 8124890:	f7f5 fb51 	bl	8119f36 <lwip_htonl>
 8124894:	4603      	mov	r3, r0
 8124896:	2200      	movs	r2, #0
 8124898:	4621      	mov	r1, r4
 812489a:	6878      	ldr	r0, [r7, #4]
 812489c:	f7ff fe68 	bl	8124570 <tcp_output_alloc_header>
 81248a0:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 81248a2:	693b      	ldr	r3, [r7, #16]
 81248a4:	2b00      	cmp	r3, #0
 81248a6:	d102      	bne.n	81248ae <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 81248a8:	f04f 33ff 	mov.w	r3, #4294967295
 81248ac:	e010      	b.n	81248d0 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 81248ae:	7dfb      	ldrb	r3, [r7, #23]
 81248b0:	2200      	movs	r2, #0
 81248b2:	6939      	ldr	r1, [r7, #16]
 81248b4:	6878      	ldr	r0, [r7, #4]
 81248b6:	f7ff fe99 	bl	81245ec <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 81248ba:	687a      	ldr	r2, [r7, #4]
 81248bc:	687b      	ldr	r3, [r7, #4]
 81248be:	3304      	adds	r3, #4
 81248c0:	6939      	ldr	r1, [r7, #16]
 81248c2:	6878      	ldr	r0, [r7, #4]
 81248c4:	f7ff fed0 	bl	8124668 <tcp_output_control_segment>
 81248c8:	4603      	mov	r3, r0
 81248ca:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 81248cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 81248d0:	4618      	mov	r0, r3
 81248d2:	371c      	adds	r7, #28
 81248d4:	46bd      	mov	sp, r7
 81248d6:	bd90      	pop	{r4, r7, pc}
 81248d8:	08129ef8 	.word	0x08129ef8
 81248dc:	0812a718 	.word	0x0812a718
 81248e0:	08129f90 	.word	0x08129f90

081248e4 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 81248e4:	b590      	push	{r4, r7, lr}
 81248e6:	b08b      	sub	sp, #44	@ 0x2c
 81248e8:	af00      	add	r7, sp, #0
 81248ea:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 81248ec:	2300      	movs	r3, #0
 81248ee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 81248f2:	687b      	ldr	r3, [r7, #4]
 81248f4:	2b00      	cmp	r3, #0
 81248f6:	d106      	bne.n	8124906 <tcp_zero_window_probe+0x22>
 81248f8:	4b4c      	ldr	r3, [pc, #304]	@ (8124a2c <tcp_zero_window_probe+0x148>)
 81248fa:	f640 024f 	movw	r2, #2127	@ 0x84f
 81248fe:	494c      	ldr	r1, [pc, #304]	@ (8124a30 <tcp_zero_window_probe+0x14c>)
 8124900:	484c      	ldr	r0, [pc, #304]	@ (8124a34 <tcp_zero_window_probe+0x150>)
 8124902:	f002 f8b7 	bl	8126a74 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8124906:	687b      	ldr	r3, [r7, #4]
 8124908:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 812490a:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 812490c:	6a3b      	ldr	r3, [r7, #32]
 812490e:	2b00      	cmp	r3, #0
 8124910:	d101      	bne.n	8124916 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8124912:	2300      	movs	r3, #0
 8124914:	e086      	b.n	8124a24 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8124916:	687b      	ldr	r3, [r7, #4]
 8124918:	f893 30a2 	ldrb.w	r3, [r3, #162]	@ 0xa2
 812491c:	2bff      	cmp	r3, #255	@ 0xff
 812491e:	d007      	beq.n	8124930 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8124920:	687b      	ldr	r3, [r7, #4]
 8124922:	f893 30a2 	ldrb.w	r3, [r3, #162]	@ 0xa2
 8124926:	3301      	adds	r3, #1
 8124928:	b2da      	uxtb	r2, r3
 812492a:	687b      	ldr	r3, [r7, #4]
 812492c:	f883 20a2 	strb.w	r2, [r3, #162]	@ 0xa2
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8124930:	6a3b      	ldr	r3, [r7, #32]
 8124932:	68db      	ldr	r3, [r3, #12]
 8124934:	899b      	ldrh	r3, [r3, #12]
 8124936:	b29b      	uxth	r3, r3
 8124938:	4618      	mov	r0, r3
 812493a:	f7f5 fae7 	bl	8119f0c <lwip_htons>
 812493e:	4603      	mov	r3, r0
 8124940:	b2db      	uxtb	r3, r3
 8124942:	f003 0301 	and.w	r3, r3, #1
 8124946:	2b00      	cmp	r3, #0
 8124948:	d005      	beq.n	8124956 <tcp_zero_window_probe+0x72>
 812494a:	6a3b      	ldr	r3, [r7, #32]
 812494c:	891b      	ldrh	r3, [r3, #8]
 812494e:	2b00      	cmp	r3, #0
 8124950:	d101      	bne.n	8124956 <tcp_zero_window_probe+0x72>
 8124952:	2301      	movs	r3, #1
 8124954:	e000      	b.n	8124958 <tcp_zero_window_probe+0x74>
 8124956:	2300      	movs	r3, #0
 8124958:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 812495a:	7ffb      	ldrb	r3, [r7, #31]
 812495c:	2b00      	cmp	r3, #0
 812495e:	bf0c      	ite	eq
 8124960:	2301      	moveq	r3, #1
 8124962:	2300      	movne	r3, #0
 8124964:	b2db      	uxtb	r3, r3
 8124966:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8124968:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 812496c:	b299      	uxth	r1, r3
 812496e:	6a3b      	ldr	r3, [r7, #32]
 8124970:	68db      	ldr	r3, [r3, #12]
 8124972:	685b      	ldr	r3, [r3, #4]
 8124974:	8bba      	ldrh	r2, [r7, #28]
 8124976:	6878      	ldr	r0, [r7, #4]
 8124978:	f7ff fdfa 	bl	8124570 <tcp_output_alloc_header>
 812497c:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 812497e:	69bb      	ldr	r3, [r7, #24]
 8124980:	2b00      	cmp	r3, #0
 8124982:	d102      	bne.n	812498a <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8124984:	f04f 33ff 	mov.w	r3, #4294967295
 8124988:	e04c      	b.n	8124a24 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 812498a:	69bb      	ldr	r3, [r7, #24]
 812498c:	685b      	ldr	r3, [r3, #4]
 812498e:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8124990:	7ffb      	ldrb	r3, [r7, #31]
 8124992:	2b00      	cmp	r3, #0
 8124994:	d011      	beq.n	81249ba <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8124996:	697b      	ldr	r3, [r7, #20]
 8124998:	899b      	ldrh	r3, [r3, #12]
 812499a:	b29b      	uxth	r3, r3
 812499c:	b21b      	sxth	r3, r3
 812499e:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 81249a2:	b21c      	sxth	r4, r3
 81249a4:	2011      	movs	r0, #17
 81249a6:	f7f5 fab1 	bl	8119f0c <lwip_htons>
 81249aa:	4603      	mov	r3, r0
 81249ac:	b21b      	sxth	r3, r3
 81249ae:	4323      	orrs	r3, r4
 81249b0:	b21b      	sxth	r3, r3
 81249b2:	b29a      	uxth	r2, r3
 81249b4:	697b      	ldr	r3, [r7, #20]
 81249b6:	819a      	strh	r2, [r3, #12]
 81249b8:	e010      	b.n	81249dc <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 81249ba:	69bb      	ldr	r3, [r7, #24]
 81249bc:	685b      	ldr	r3, [r3, #4]
 81249be:	3314      	adds	r3, #20
 81249c0:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 81249c2:	6a3b      	ldr	r3, [r7, #32]
 81249c4:	6858      	ldr	r0, [r3, #4]
 81249c6:	6a3b      	ldr	r3, [r7, #32]
 81249c8:	685b      	ldr	r3, [r3, #4]
 81249ca:	891a      	ldrh	r2, [r3, #8]
 81249cc:	6a3b      	ldr	r3, [r7, #32]
 81249ce:	891b      	ldrh	r3, [r3, #8]
 81249d0:	1ad3      	subs	r3, r2, r3
 81249d2:	b29b      	uxth	r3, r3
 81249d4:	2201      	movs	r2, #1
 81249d6:	6939      	ldr	r1, [r7, #16]
 81249d8:	f7f9 fea6 	bl	811e728 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 81249dc:	6a3b      	ldr	r3, [r7, #32]
 81249de:	68db      	ldr	r3, [r3, #12]
 81249e0:	685b      	ldr	r3, [r3, #4]
 81249e2:	4618      	mov	r0, r3
 81249e4:	f7f5 faa7 	bl	8119f36 <lwip_htonl>
 81249e8:	4603      	mov	r3, r0
 81249ea:	3301      	adds	r3, #1
 81249ec:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 81249ee:	687b      	ldr	r3, [r7, #4]
 81249f0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 81249f2:	68fb      	ldr	r3, [r7, #12]
 81249f4:	1ad3      	subs	r3, r2, r3
 81249f6:	2b00      	cmp	r3, #0
 81249f8:	da02      	bge.n	8124a00 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 81249fa:	687b      	ldr	r3, [r7, #4]
 81249fc:	68fa      	ldr	r2, [r7, #12]
 81249fe:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8124a00:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8124a04:	2200      	movs	r2, #0
 8124a06:	69b9      	ldr	r1, [r7, #24]
 8124a08:	6878      	ldr	r0, [r7, #4]
 8124a0a:	f7ff fdef 	bl	81245ec <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8124a0e:	687a      	ldr	r2, [r7, #4]
 8124a10:	687b      	ldr	r3, [r7, #4]
 8124a12:	3304      	adds	r3, #4
 8124a14:	69b9      	ldr	r1, [r7, #24]
 8124a16:	6878      	ldr	r0, [r7, #4]
 8124a18:	f7ff fe26 	bl	8124668 <tcp_output_control_segment>
 8124a1c:	4603      	mov	r3, r0
 8124a1e:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8124a20:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8124a24:	4618      	mov	r0, r3
 8124a26:	372c      	adds	r7, #44	@ 0x2c
 8124a28:	46bd      	mov	sp, r7
 8124a2a:	bd90      	pop	{r4, r7, pc}
 8124a2c:	08129ef8 	.word	0x08129ef8
 8124a30:	0812a734 	.word	0x0812a734
 8124a34:	08129f90 	.word	0x08129f90

08124a38 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 8124a38:	b580      	push	{r7, lr}
 8124a3a:	b084      	sub	sp, #16
 8124a3c:	af00      	add	r7, sp, #0
 8124a3e:	6078      	str	r0, [r7, #4]
 8124a40:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 8124a42:	f000 fabd 	bl	8124fc0 <sys_timeouts_sleeptime>
 8124a46:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 8124a48:	68fb      	ldr	r3, [r7, #12]
 8124a4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8124a4e:	d10b      	bne.n	8124a68 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 8124a50:	4813      	ldr	r0, [pc, #76]	@ (8124aa0 <tcpip_timeouts_mbox_fetch+0x68>)
 8124a52:	f7f9 ffb4 	bl	811e9be <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 8124a56:	2200      	movs	r2, #0
 8124a58:	6839      	ldr	r1, [r7, #0]
 8124a5a:	6878      	ldr	r0, [r7, #4]
 8124a5c:	f7f9 ff3c 	bl	811e8d8 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 8124a60:	480f      	ldr	r0, [pc, #60]	@ (8124aa0 <tcpip_timeouts_mbox_fetch+0x68>)
 8124a62:	f7f9 ff9d 	bl	811e9a0 <sys_mutex_lock>
    return;
 8124a66:	e018      	b.n	8124a9a <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 8124a68:	68fb      	ldr	r3, [r7, #12]
 8124a6a:	2b00      	cmp	r3, #0
 8124a6c:	d102      	bne.n	8124a74 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 8124a6e:	f000 fa6d 	bl	8124f4c <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8124a72:	e7e6      	b.n	8124a42 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 8124a74:	480a      	ldr	r0, [pc, #40]	@ (8124aa0 <tcpip_timeouts_mbox_fetch+0x68>)
 8124a76:	f7f9 ffa2 	bl	811e9be <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 8124a7a:	68fa      	ldr	r2, [r7, #12]
 8124a7c:	6839      	ldr	r1, [r7, #0]
 8124a7e:	6878      	ldr	r0, [r7, #4]
 8124a80:	f7f9 ff2a 	bl	811e8d8 <sys_arch_mbox_fetch>
 8124a84:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 8124a86:	4806      	ldr	r0, [pc, #24]	@ (8124aa0 <tcpip_timeouts_mbox_fetch+0x68>)
 8124a88:	f7f9 ff8a 	bl	811e9a0 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 8124a8c:	68bb      	ldr	r3, [r7, #8]
 8124a8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8124a92:	d102      	bne.n	8124a9a <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 8124a94:	f000 fa5a 	bl	8124f4c <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8124a98:	e7d3      	b.n	8124a42 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 8124a9a:	3710      	adds	r7, #16
 8124a9c:	46bd      	mov	sp, r7
 8124a9e:	bd80      	pop	{r7, pc}
 8124aa0:	1000e568 	.word	0x1000e568

08124aa4 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 8124aa4:	b580      	push	{r7, lr}
 8124aa6:	b084      	sub	sp, #16
 8124aa8:	af00      	add	r7, sp, #0
 8124aaa:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 8124aac:	4810      	ldr	r0, [pc, #64]	@ (8124af0 <tcpip_thread+0x4c>)
 8124aae:	f7f9 ff77 	bl	811e9a0 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 8124ab2:	4b10      	ldr	r3, [pc, #64]	@ (8124af4 <tcpip_thread+0x50>)
 8124ab4:	681b      	ldr	r3, [r3, #0]
 8124ab6:	2b00      	cmp	r3, #0
 8124ab8:	d005      	beq.n	8124ac6 <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 8124aba:	4b0e      	ldr	r3, [pc, #56]	@ (8124af4 <tcpip_thread+0x50>)
 8124abc:	681b      	ldr	r3, [r3, #0]
 8124abe:	4a0e      	ldr	r2, [pc, #56]	@ (8124af8 <tcpip_thread+0x54>)
 8124ac0:	6812      	ldr	r2, [r2, #0]
 8124ac2:	4610      	mov	r0, r2
 8124ac4:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8124ac6:	f107 030c 	add.w	r3, r7, #12
 8124aca:	4619      	mov	r1, r3
 8124acc:	480b      	ldr	r0, [pc, #44]	@ (8124afc <tcpip_thread+0x58>)
 8124ace:	f7ff ffb3 	bl	8124a38 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 8124ad2:	68fb      	ldr	r3, [r7, #12]
 8124ad4:	2b00      	cmp	r3, #0
 8124ad6:	d106      	bne.n	8124ae6 <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8124ad8:	4b09      	ldr	r3, [pc, #36]	@ (8124b00 <tcpip_thread+0x5c>)
 8124ada:	2291      	movs	r2, #145	@ 0x91
 8124adc:	4909      	ldr	r1, [pc, #36]	@ (8124b04 <tcpip_thread+0x60>)
 8124ade:	480a      	ldr	r0, [pc, #40]	@ (8124b08 <tcpip_thread+0x64>)
 8124ae0:	f001 ffc8 	bl	8126a74 <iprintf>
      continue;
 8124ae4:	e003      	b.n	8124aee <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 8124ae6:	68fb      	ldr	r3, [r7, #12]
 8124ae8:	4618      	mov	r0, r3
 8124aea:	f000 f80f 	bl	8124b0c <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8124aee:	e7ea      	b.n	8124ac6 <tcpip_thread+0x22>
 8124af0:	1000e568 	.word	0x1000e568
 8124af4:	1000e55c 	.word	0x1000e55c
 8124af8:	1000e560 	.word	0x1000e560
 8124afc:	1000e564 	.word	0x1000e564
 8124b00:	0812a758 	.word	0x0812a758
 8124b04:	0812a7cc 	.word	0x0812a7cc
 8124b08:	0812a7ec 	.word	0x0812a7ec

08124b0c <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 8124b0c:	b580      	push	{r7, lr}
 8124b0e:	b082      	sub	sp, #8
 8124b10:	af00      	add	r7, sp, #0
 8124b12:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 8124b14:	687b      	ldr	r3, [r7, #4]
 8124b16:	781b      	ldrb	r3, [r3, #0]
 8124b18:	2b00      	cmp	r3, #0
 8124b1a:	d002      	beq.n	8124b22 <tcpip_thread_handle_msg+0x16>
 8124b1c:	2b01      	cmp	r3, #1
 8124b1e:	d00b      	beq.n	8124b38 <tcpip_thread_handle_msg+0x2c>
 8124b20:	e011      	b.n	8124b46 <tcpip_thread_handle_msg+0x3a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8124b22:	687b      	ldr	r3, [r7, #4]
 8124b24:	685b      	ldr	r3, [r3, #4]
 8124b26:	687a      	ldr	r2, [r7, #4]
 8124b28:	6892      	ldr	r2, [r2, #8]
 8124b2a:	4610      	mov	r0, r2
 8124b2c:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8124b2e:	6879      	ldr	r1, [r7, #4]
 8124b30:	2008      	movs	r0, #8
 8124b32:	f7f8 fd51 	bl	811d5d8 <memp_free>
      break;
 8124b36:	e00d      	b.n	8124b54 <tcpip_thread_handle_msg+0x48>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8124b38:	687b      	ldr	r3, [r7, #4]
 8124b3a:	685b      	ldr	r3, [r3, #4]
 8124b3c:	687a      	ldr	r2, [r7, #4]
 8124b3e:	6892      	ldr	r2, [r2, #8]
 8124b40:	4610      	mov	r0, r2
 8124b42:	4798      	blx	r3
      break;
 8124b44:	e006      	b.n	8124b54 <tcpip_thread_handle_msg+0x48>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8124b46:	4b05      	ldr	r3, [pc, #20]	@ (8124b5c <tcpip_thread_handle_msg+0x50>)
 8124b48:	22cf      	movs	r2, #207	@ 0xcf
 8124b4a:	4905      	ldr	r1, [pc, #20]	@ (8124b60 <tcpip_thread_handle_msg+0x54>)
 8124b4c:	4805      	ldr	r0, [pc, #20]	@ (8124b64 <tcpip_thread_handle_msg+0x58>)
 8124b4e:	f001 ff91 	bl	8126a74 <iprintf>
      break;
 8124b52:	bf00      	nop
  }
}
 8124b54:	bf00      	nop
 8124b56:	3708      	adds	r7, #8
 8124b58:	46bd      	mov	sp, r7
 8124b5a:	bd80      	pop	{r7, pc}
 8124b5c:	0812a758 	.word	0x0812a758
 8124b60:	0812a7cc 	.word	0x0812a7cc
 8124b64:	0812a7ec 	.word	0x0812a7ec

08124b68 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 8124b68:	b580      	push	{r7, lr}
 8124b6a:	b086      	sub	sp, #24
 8124b6c:	af00      	add	r7, sp, #0
 8124b6e:	60f8      	str	r0, [r7, #12]
 8124b70:	60b9      	str	r1, [r7, #8]
 8124b72:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING_INPUT
  err_t ret;
  LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_inpkt: PACKET %p/%p\n", (void *)p, (void *)inp));
  LOCK_TCPIP_CORE();
 8124b74:	4808      	ldr	r0, [pc, #32]	@ (8124b98 <tcpip_inpkt+0x30>)
 8124b76:	f7f9 ff13 	bl	811e9a0 <sys_mutex_lock>
  ret = input_fn(p, inp);
 8124b7a:	687b      	ldr	r3, [r7, #4]
 8124b7c:	68b9      	ldr	r1, [r7, #8]
 8124b7e:	68f8      	ldr	r0, [r7, #12]
 8124b80:	4798      	blx	r3
 8124b82:	4603      	mov	r3, r0
 8124b84:	75fb      	strb	r3, [r7, #23]
  UNLOCK_TCPIP_CORE();
 8124b86:	4804      	ldr	r0, [pc, #16]	@ (8124b98 <tcpip_inpkt+0x30>)
 8124b88:	f7f9 ff19 	bl	811e9be <sys_mutex_unlock>
  return ret;
 8124b8c:	f997 3017 	ldrsb.w	r3, [r7, #23]
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
    return ERR_MEM;
  }
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 8124b90:	4618      	mov	r0, r3
 8124b92:	3718      	adds	r7, #24
 8124b94:	46bd      	mov	sp, r7
 8124b96:	bd80      	pop	{r7, pc}
 8124b98:	1000e568 	.word	0x1000e568

08124b9c <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 8124b9c:	b580      	push	{r7, lr}
 8124b9e:	b082      	sub	sp, #8
 8124ba0:	af00      	add	r7, sp, #0
 8124ba2:	6078      	str	r0, [r7, #4]
 8124ba4:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 8124ba6:	683b      	ldr	r3, [r7, #0]
 8124ba8:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8124bac:	f003 0318 	and.w	r3, r3, #24
 8124bb0:	2b00      	cmp	r3, #0
 8124bb2:	d006      	beq.n	8124bc2 <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 8124bb4:	4a08      	ldr	r2, [pc, #32]	@ (8124bd8 <tcpip_input+0x3c>)
 8124bb6:	6839      	ldr	r1, [r7, #0]
 8124bb8:	6878      	ldr	r0, [r7, #4]
 8124bba:	f7ff ffd5 	bl	8124b68 <tcpip_inpkt>
 8124bbe:	4603      	mov	r3, r0
 8124bc0:	e005      	b.n	8124bce <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 8124bc2:	4a06      	ldr	r2, [pc, #24]	@ (8124bdc <tcpip_input+0x40>)
 8124bc4:	6839      	ldr	r1, [r7, #0]
 8124bc6:	6878      	ldr	r0, [r7, #4]
 8124bc8:	f7ff ffce 	bl	8124b68 <tcpip_inpkt>
 8124bcc:	4603      	mov	r3, r0
}
 8124bce:	4618      	mov	r0, r3
 8124bd0:	3708      	adds	r7, #8
 8124bd2:	46bd      	mov	sp, r7
 8124bd4:	bd80      	pop	{r7, pc}
 8124bd6:	bf00      	nop
 8124bd8:	0811af95 	.word	0x0811af95
 8124bdc:	0811b785 	.word	0x0811b785

08124be0 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 8124be0:	b580      	push	{r7, lr}
 8124be2:	b084      	sub	sp, #16
 8124be4:	af00      	add	r7, sp, #0
 8124be6:	6078      	str	r0, [r7, #4]
 8124be8:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8124bea:	4819      	ldr	r0, [pc, #100]	@ (8124c50 <tcpip_try_callback+0x70>)
 8124bec:	f7f9 fea5 	bl	811e93a <sys_mbox_valid>
 8124bf0:	4603      	mov	r3, r0
 8124bf2:	2b00      	cmp	r3, #0
 8124bf4:	d106      	bne.n	8124c04 <tcpip_try_callback+0x24>
 8124bf6:	4b17      	ldr	r3, [pc, #92]	@ (8124c54 <tcpip_try_callback+0x74>)
 8124bf8:	f240 125d 	movw	r2, #349	@ 0x15d
 8124bfc:	4916      	ldr	r1, [pc, #88]	@ (8124c58 <tcpip_try_callback+0x78>)
 8124bfe:	4817      	ldr	r0, [pc, #92]	@ (8124c5c <tcpip_try_callback+0x7c>)
 8124c00:	f001 ff38 	bl	8126a74 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 8124c04:	2008      	movs	r0, #8
 8124c06:	f7f8 fc71 	bl	811d4ec <memp_malloc>
 8124c0a:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 8124c0c:	68fb      	ldr	r3, [r7, #12]
 8124c0e:	2b00      	cmp	r3, #0
 8124c10:	d102      	bne.n	8124c18 <tcpip_try_callback+0x38>
    return ERR_MEM;
 8124c12:	f04f 33ff 	mov.w	r3, #4294967295
 8124c16:	e017      	b.n	8124c48 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 8124c18:	68fb      	ldr	r3, [r7, #12]
 8124c1a:	2200      	movs	r2, #0
 8124c1c:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 8124c1e:	68fb      	ldr	r3, [r7, #12]
 8124c20:	687a      	ldr	r2, [r7, #4]
 8124c22:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 8124c24:	68fb      	ldr	r3, [r7, #12]
 8124c26:	683a      	ldr	r2, [r7, #0]
 8124c28:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8124c2a:	68f9      	ldr	r1, [r7, #12]
 8124c2c:	4808      	ldr	r0, [pc, #32]	@ (8124c50 <tcpip_try_callback+0x70>)
 8124c2e:	f7f9 fe39 	bl	811e8a4 <sys_mbox_trypost>
 8124c32:	4603      	mov	r3, r0
 8124c34:	2b00      	cmp	r3, #0
 8124c36:	d006      	beq.n	8124c46 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 8124c38:	68f9      	ldr	r1, [r7, #12]
 8124c3a:	2008      	movs	r0, #8
 8124c3c:	f7f8 fccc 	bl	811d5d8 <memp_free>
    return ERR_MEM;
 8124c40:	f04f 33ff 	mov.w	r3, #4294967295
 8124c44:	e000      	b.n	8124c48 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 8124c46:	2300      	movs	r3, #0
}
 8124c48:	4618      	mov	r0, r3
 8124c4a:	3710      	adds	r7, #16
 8124c4c:	46bd      	mov	sp, r7
 8124c4e:	bd80      	pop	{r7, pc}
 8124c50:	1000e564 	.word	0x1000e564
 8124c54:	0812a758 	.word	0x0812a758
 8124c58:	0812a814 	.word	0x0812a814
 8124c5c:	0812a7ec 	.word	0x0812a7ec

08124c60 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 8124c60:	b580      	push	{r7, lr}
 8124c62:	b084      	sub	sp, #16
 8124c64:	af02      	add	r7, sp, #8
 8124c66:	6078      	str	r0, [r7, #4]
 8124c68:	6039      	str	r1, [r7, #0]
  lwip_init();
 8124c6a:	f7f6 fcd9 	bl	811b620 <lwip_init>

  tcpip_init_done = initfunc;
 8124c6e:	4a17      	ldr	r2, [pc, #92]	@ (8124ccc <tcpip_init+0x6c>)
 8124c70:	687b      	ldr	r3, [r7, #4]
 8124c72:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 8124c74:	4a16      	ldr	r2, [pc, #88]	@ (8124cd0 <tcpip_init+0x70>)
 8124c76:	683b      	ldr	r3, [r7, #0]
 8124c78:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8124c7a:	2106      	movs	r1, #6
 8124c7c:	4815      	ldr	r0, [pc, #84]	@ (8124cd4 <tcpip_init+0x74>)
 8124c7e:	f7f9 fdf7 	bl	811e870 <sys_mbox_new>
 8124c82:	4603      	mov	r3, r0
 8124c84:	2b00      	cmp	r3, #0
 8124c86:	d006      	beq.n	8124c96 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 8124c88:	4b13      	ldr	r3, [pc, #76]	@ (8124cd8 <tcpip_init+0x78>)
 8124c8a:	f240 2261 	movw	r2, #609	@ 0x261
 8124c8e:	4913      	ldr	r1, [pc, #76]	@ (8124cdc <tcpip_init+0x7c>)
 8124c90:	4813      	ldr	r0, [pc, #76]	@ (8124ce0 <tcpip_init+0x80>)
 8124c92:	f001 feef 	bl	8126a74 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 8124c96:	4813      	ldr	r0, [pc, #76]	@ (8124ce4 <tcpip_init+0x84>)
 8124c98:	f7f9 fe6c 	bl	811e974 <sys_mutex_new>
 8124c9c:	4603      	mov	r3, r0
 8124c9e:	2b00      	cmp	r3, #0
 8124ca0:	d006      	beq.n	8124cb0 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 8124ca2:	4b0d      	ldr	r3, [pc, #52]	@ (8124cd8 <tcpip_init+0x78>)
 8124ca4:	f240 2265 	movw	r2, #613	@ 0x265
 8124ca8:	490f      	ldr	r1, [pc, #60]	@ (8124ce8 <tcpip_init+0x88>)
 8124caa:	480d      	ldr	r0, [pc, #52]	@ (8124ce0 <tcpip_init+0x80>)
 8124cac:	f001 fee2 	bl	8126a74 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 8124cb0:	2332      	movs	r3, #50	@ 0x32
 8124cb2:	9300      	str	r3, [sp, #0]
 8124cb4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8124cb8:	2200      	movs	r2, #0
 8124cba:	490c      	ldr	r1, [pc, #48]	@ (8124cec <tcpip_init+0x8c>)
 8124cbc:	480c      	ldr	r0, [pc, #48]	@ (8124cf0 <tcpip_init+0x90>)
 8124cbe:	f7f9 fe8b 	bl	811e9d8 <sys_thread_new>
}
 8124cc2:	bf00      	nop
 8124cc4:	3708      	adds	r7, #8
 8124cc6:	46bd      	mov	sp, r7
 8124cc8:	bd80      	pop	{r7, pc}
 8124cca:	bf00      	nop
 8124ccc:	1000e55c 	.word	0x1000e55c
 8124cd0:	1000e560 	.word	0x1000e560
 8124cd4:	1000e564 	.word	0x1000e564
 8124cd8:	0812a758 	.word	0x0812a758
 8124cdc:	0812a824 	.word	0x0812a824
 8124ce0:	0812a7ec 	.word	0x0812a7ec
 8124ce4:	1000e568 	.word	0x1000e568
 8124ce8:	0812a848 	.word	0x0812a848
 8124cec:	08124aa5 	.word	0x08124aa5
 8124cf0:	0812a86c 	.word	0x0812a86c

08124cf4 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8124cf4:	b580      	push	{r7, lr}
 8124cf6:	b082      	sub	sp, #8
 8124cf8:	af00      	add	r7, sp, #0
 8124cfa:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8124cfc:	f7f9 fef4 	bl	811eae8 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8124d00:	4b0a      	ldr	r3, [pc, #40]	@ (8124d2c <tcpip_tcp_timer+0x38>)
 8124d02:	681b      	ldr	r3, [r3, #0]
 8124d04:	2b00      	cmp	r3, #0
 8124d06:	d103      	bne.n	8124d10 <tcpip_tcp_timer+0x1c>
 8124d08:	4b09      	ldr	r3, [pc, #36]	@ (8124d30 <tcpip_tcp_timer+0x3c>)
 8124d0a:	681b      	ldr	r3, [r3, #0]
 8124d0c:	2b00      	cmp	r3, #0
 8124d0e:	d005      	beq.n	8124d1c <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8124d10:	2200      	movs	r2, #0
 8124d12:	4908      	ldr	r1, [pc, #32]	@ (8124d34 <tcpip_tcp_timer+0x40>)
 8124d14:	200a      	movs	r0, #10
 8124d16:	f000 f8f3 	bl	8124f00 <sys_timeout>
 8124d1a:	e003      	b.n	8124d24 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8124d1c:	4b06      	ldr	r3, [pc, #24]	@ (8124d38 <tcpip_tcp_timer+0x44>)
 8124d1e:	2200      	movs	r2, #0
 8124d20:	601a      	str	r2, [r3, #0]
  }
}
 8124d22:	bf00      	nop
 8124d24:	bf00      	nop
 8124d26:	3708      	adds	r7, #8
 8124d28:	46bd      	mov	sp, r7
 8124d2a:	bd80      	pop	{r7, pc}
 8124d2c:	1000e518 	.word	0x1000e518
 8124d30:	1000e51c 	.word	0x1000e51c
 8124d34:	08124cf5 	.word	0x08124cf5
 8124d38:	1000e574 	.word	0x1000e574

08124d3c <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8124d3c:	b580      	push	{r7, lr}
 8124d3e:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8124d40:	4b0a      	ldr	r3, [pc, #40]	@ (8124d6c <tcp_timer_needed+0x30>)
 8124d42:	681b      	ldr	r3, [r3, #0]
 8124d44:	2b00      	cmp	r3, #0
 8124d46:	d10f      	bne.n	8124d68 <tcp_timer_needed+0x2c>
 8124d48:	4b09      	ldr	r3, [pc, #36]	@ (8124d70 <tcp_timer_needed+0x34>)
 8124d4a:	681b      	ldr	r3, [r3, #0]
 8124d4c:	2b00      	cmp	r3, #0
 8124d4e:	d103      	bne.n	8124d58 <tcp_timer_needed+0x1c>
 8124d50:	4b08      	ldr	r3, [pc, #32]	@ (8124d74 <tcp_timer_needed+0x38>)
 8124d52:	681b      	ldr	r3, [r3, #0]
 8124d54:	2b00      	cmp	r3, #0
 8124d56:	d007      	beq.n	8124d68 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8124d58:	4b04      	ldr	r3, [pc, #16]	@ (8124d6c <tcp_timer_needed+0x30>)
 8124d5a:	2201      	movs	r2, #1
 8124d5c:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8124d5e:	2200      	movs	r2, #0
 8124d60:	4905      	ldr	r1, [pc, #20]	@ (8124d78 <tcp_timer_needed+0x3c>)
 8124d62:	200a      	movs	r0, #10
 8124d64:	f000 f8cc 	bl	8124f00 <sys_timeout>
  }
}
 8124d68:	bf00      	nop
 8124d6a:	bd80      	pop	{r7, pc}
 8124d6c:	1000e574 	.word	0x1000e574
 8124d70:	1000e518 	.word	0x1000e518
 8124d74:	1000e51c 	.word	0x1000e51c
 8124d78:	08124cf5 	.word	0x08124cf5

08124d7c <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8124d7c:	b580      	push	{r7, lr}
 8124d7e:	b086      	sub	sp, #24
 8124d80:	af00      	add	r7, sp, #0
 8124d82:	60f8      	str	r0, [r7, #12]
 8124d84:	60b9      	str	r1, [r7, #8]
 8124d86:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8124d88:	200a      	movs	r0, #10
 8124d8a:	f7f8 fbaf 	bl	811d4ec <memp_malloc>
 8124d8e:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8124d90:	693b      	ldr	r3, [r7, #16]
 8124d92:	2b00      	cmp	r3, #0
 8124d94:	d109      	bne.n	8124daa <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8124d96:	693b      	ldr	r3, [r7, #16]
 8124d98:	2b00      	cmp	r3, #0
 8124d9a:	d151      	bne.n	8124e40 <sys_timeout_abs+0xc4>
 8124d9c:	4b2a      	ldr	r3, [pc, #168]	@ (8124e48 <sys_timeout_abs+0xcc>)
 8124d9e:	22be      	movs	r2, #190	@ 0xbe
 8124da0:	492a      	ldr	r1, [pc, #168]	@ (8124e4c <sys_timeout_abs+0xd0>)
 8124da2:	482b      	ldr	r0, [pc, #172]	@ (8124e50 <sys_timeout_abs+0xd4>)
 8124da4:	f001 fe66 	bl	8126a74 <iprintf>
    return;
 8124da8:	e04a      	b.n	8124e40 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8124daa:	693b      	ldr	r3, [r7, #16]
 8124dac:	2200      	movs	r2, #0
 8124dae:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8124db0:	693b      	ldr	r3, [r7, #16]
 8124db2:	68ba      	ldr	r2, [r7, #8]
 8124db4:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8124db6:	693b      	ldr	r3, [r7, #16]
 8124db8:	687a      	ldr	r2, [r7, #4]
 8124dba:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8124dbc:	693b      	ldr	r3, [r7, #16]
 8124dbe:	68fa      	ldr	r2, [r7, #12]
 8124dc0:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8124dc2:	4b24      	ldr	r3, [pc, #144]	@ (8124e54 <sys_timeout_abs+0xd8>)
 8124dc4:	681b      	ldr	r3, [r3, #0]
 8124dc6:	2b00      	cmp	r3, #0
 8124dc8:	d103      	bne.n	8124dd2 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8124dca:	4a22      	ldr	r2, [pc, #136]	@ (8124e54 <sys_timeout_abs+0xd8>)
 8124dcc:	693b      	ldr	r3, [r7, #16]
 8124dce:	6013      	str	r3, [r2, #0]
    return;
 8124dd0:	e037      	b.n	8124e42 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8124dd2:	693b      	ldr	r3, [r7, #16]
 8124dd4:	685a      	ldr	r2, [r3, #4]
 8124dd6:	4b1f      	ldr	r3, [pc, #124]	@ (8124e54 <sys_timeout_abs+0xd8>)
 8124dd8:	681b      	ldr	r3, [r3, #0]
 8124dda:	685b      	ldr	r3, [r3, #4]
 8124ddc:	1ad3      	subs	r3, r2, r3
 8124dde:	0fdb      	lsrs	r3, r3, #31
 8124de0:	f003 0301 	and.w	r3, r3, #1
 8124de4:	b2db      	uxtb	r3, r3
 8124de6:	2b00      	cmp	r3, #0
 8124de8:	d007      	beq.n	8124dfa <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8124dea:	4b1a      	ldr	r3, [pc, #104]	@ (8124e54 <sys_timeout_abs+0xd8>)
 8124dec:	681a      	ldr	r2, [r3, #0]
 8124dee:	693b      	ldr	r3, [r7, #16]
 8124df0:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8124df2:	4a18      	ldr	r2, [pc, #96]	@ (8124e54 <sys_timeout_abs+0xd8>)
 8124df4:	693b      	ldr	r3, [r7, #16]
 8124df6:	6013      	str	r3, [r2, #0]
 8124df8:	e023      	b.n	8124e42 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8124dfa:	4b16      	ldr	r3, [pc, #88]	@ (8124e54 <sys_timeout_abs+0xd8>)
 8124dfc:	681b      	ldr	r3, [r3, #0]
 8124dfe:	617b      	str	r3, [r7, #20]
 8124e00:	e01a      	b.n	8124e38 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8124e02:	697b      	ldr	r3, [r7, #20]
 8124e04:	681b      	ldr	r3, [r3, #0]
 8124e06:	2b00      	cmp	r3, #0
 8124e08:	d00b      	beq.n	8124e22 <sys_timeout_abs+0xa6>
 8124e0a:	693b      	ldr	r3, [r7, #16]
 8124e0c:	685a      	ldr	r2, [r3, #4]
 8124e0e:	697b      	ldr	r3, [r7, #20]
 8124e10:	681b      	ldr	r3, [r3, #0]
 8124e12:	685b      	ldr	r3, [r3, #4]
 8124e14:	1ad3      	subs	r3, r2, r3
 8124e16:	0fdb      	lsrs	r3, r3, #31
 8124e18:	f003 0301 	and.w	r3, r3, #1
 8124e1c:	b2db      	uxtb	r3, r3
 8124e1e:	2b00      	cmp	r3, #0
 8124e20:	d007      	beq.n	8124e32 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8124e22:	697b      	ldr	r3, [r7, #20]
 8124e24:	681a      	ldr	r2, [r3, #0]
 8124e26:	693b      	ldr	r3, [r7, #16]
 8124e28:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8124e2a:	697b      	ldr	r3, [r7, #20]
 8124e2c:	693a      	ldr	r2, [r7, #16]
 8124e2e:	601a      	str	r2, [r3, #0]
        break;
 8124e30:	e007      	b.n	8124e42 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8124e32:	697b      	ldr	r3, [r7, #20]
 8124e34:	681b      	ldr	r3, [r3, #0]
 8124e36:	617b      	str	r3, [r7, #20]
 8124e38:	697b      	ldr	r3, [r7, #20]
 8124e3a:	2b00      	cmp	r3, #0
 8124e3c:	d1e1      	bne.n	8124e02 <sys_timeout_abs+0x86>
 8124e3e:	e000      	b.n	8124e42 <sys_timeout_abs+0xc6>
    return;
 8124e40:	bf00      	nop
      }
    }
  }
}
 8124e42:	3718      	adds	r7, #24
 8124e44:	46bd      	mov	sp, r7
 8124e46:	bd80      	pop	{r7, pc}
 8124e48:	0812a87c 	.word	0x0812a87c
 8124e4c:	0812a8f4 	.word	0x0812a8f4
 8124e50:	0812a934 	.word	0x0812a934
 8124e54:	1000e56c 	.word	0x1000e56c

08124e58 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8124e58:	b580      	push	{r7, lr}
 8124e5a:	b086      	sub	sp, #24
 8124e5c:	af00      	add	r7, sp, #0
 8124e5e:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8124e60:	687b      	ldr	r3, [r7, #4]
 8124e62:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8124e64:	697b      	ldr	r3, [r7, #20]
 8124e66:	685b      	ldr	r3, [r3, #4]
 8124e68:	4798      	blx	r3

  now = sys_now();
 8124e6a:	f7e7 f927 	bl	810c0bc <sys_now>
 8124e6e:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8124e70:	697b      	ldr	r3, [r7, #20]
 8124e72:	681a      	ldr	r2, [r3, #0]
 8124e74:	4b0f      	ldr	r3, [pc, #60]	@ (8124eb4 <lwip_cyclic_timer+0x5c>)
 8124e76:	681b      	ldr	r3, [r3, #0]
 8124e78:	4413      	add	r3, r2
 8124e7a:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8124e7c:	68fa      	ldr	r2, [r7, #12]
 8124e7e:	693b      	ldr	r3, [r7, #16]
 8124e80:	1ad3      	subs	r3, r2, r3
 8124e82:	0fdb      	lsrs	r3, r3, #31
 8124e84:	f003 0301 	and.w	r3, r3, #1
 8124e88:	b2db      	uxtb	r3, r3
 8124e8a:	2b00      	cmp	r3, #0
 8124e8c:	d009      	beq.n	8124ea2 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8124e8e:	697b      	ldr	r3, [r7, #20]
 8124e90:	681a      	ldr	r2, [r3, #0]
 8124e92:	693b      	ldr	r3, [r7, #16]
 8124e94:	4413      	add	r3, r2
 8124e96:	687a      	ldr	r2, [r7, #4]
 8124e98:	4907      	ldr	r1, [pc, #28]	@ (8124eb8 <lwip_cyclic_timer+0x60>)
 8124e9a:	4618      	mov	r0, r3
 8124e9c:	f7ff ff6e 	bl	8124d7c <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8124ea0:	e004      	b.n	8124eac <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8124ea2:	687a      	ldr	r2, [r7, #4]
 8124ea4:	4904      	ldr	r1, [pc, #16]	@ (8124eb8 <lwip_cyclic_timer+0x60>)
 8124ea6:	68f8      	ldr	r0, [r7, #12]
 8124ea8:	f7ff ff68 	bl	8124d7c <sys_timeout_abs>
}
 8124eac:	bf00      	nop
 8124eae:	3718      	adds	r7, #24
 8124eb0:	46bd      	mov	sp, r7
 8124eb2:	bd80      	pop	{r7, pc}
 8124eb4:	1000e570 	.word	0x1000e570
 8124eb8:	08124e59 	.word	0x08124e59

08124ebc <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8124ebc:	b580      	push	{r7, lr}
 8124ebe:	b082      	sub	sp, #8
 8124ec0:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8124ec2:	2301      	movs	r3, #1
 8124ec4:	607b      	str	r3, [r7, #4]
 8124ec6:	e00e      	b.n	8124ee6 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8124ec8:	4a0b      	ldr	r2, [pc, #44]	@ (8124ef8 <sys_timeouts_init+0x3c>)
 8124eca:	687b      	ldr	r3, [r7, #4]
 8124ecc:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8124ed0:	687b      	ldr	r3, [r7, #4]
 8124ed2:	00db      	lsls	r3, r3, #3
 8124ed4:	4a08      	ldr	r2, [pc, #32]	@ (8124ef8 <sys_timeouts_init+0x3c>)
 8124ed6:	4413      	add	r3, r2
 8124ed8:	461a      	mov	r2, r3
 8124eda:	4908      	ldr	r1, [pc, #32]	@ (8124efc <sys_timeouts_init+0x40>)
 8124edc:	f000 f810 	bl	8124f00 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8124ee0:	687b      	ldr	r3, [r7, #4]
 8124ee2:	3301      	adds	r3, #1
 8124ee4:	607b      	str	r3, [r7, #4]
 8124ee6:	687b      	ldr	r3, [r7, #4]
 8124ee8:	2b02      	cmp	r3, #2
 8124eea:	d9ed      	bls.n	8124ec8 <sys_timeouts_init+0xc>
  }
}
 8124eec:	bf00      	nop
 8124eee:	bf00      	nop
 8124ef0:	3708      	adds	r7, #8
 8124ef2:	46bd      	mov	sp, r7
 8124ef4:	bd80      	pop	{r7, pc}
 8124ef6:	bf00      	nop
 8124ef8:	0812af48 	.word	0x0812af48
 8124efc:	08124e59 	.word	0x08124e59

08124f00 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8124f00:	b580      	push	{r7, lr}
 8124f02:	b086      	sub	sp, #24
 8124f04:	af00      	add	r7, sp, #0
 8124f06:	60f8      	str	r0, [r7, #12]
 8124f08:	60b9      	str	r1, [r7, #8]
 8124f0a:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8124f0c:	68fb      	ldr	r3, [r7, #12]
 8124f0e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8124f12:	d306      	bcc.n	8124f22 <sys_timeout+0x22>
 8124f14:	4b0a      	ldr	r3, [pc, #40]	@ (8124f40 <sys_timeout+0x40>)
 8124f16:	f240 1229 	movw	r2, #297	@ 0x129
 8124f1a:	490a      	ldr	r1, [pc, #40]	@ (8124f44 <sys_timeout+0x44>)
 8124f1c:	480a      	ldr	r0, [pc, #40]	@ (8124f48 <sys_timeout+0x48>)
 8124f1e:	f001 fda9 	bl	8126a74 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8124f22:	f7e7 f8cb 	bl	810c0bc <sys_now>
 8124f26:	4602      	mov	r2, r0
 8124f28:	68fb      	ldr	r3, [r7, #12]
 8124f2a:	4413      	add	r3, r2
 8124f2c:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8124f2e:	687a      	ldr	r2, [r7, #4]
 8124f30:	68b9      	ldr	r1, [r7, #8]
 8124f32:	6978      	ldr	r0, [r7, #20]
 8124f34:	f7ff ff22 	bl	8124d7c <sys_timeout_abs>
#endif
}
 8124f38:	bf00      	nop
 8124f3a:	3718      	adds	r7, #24
 8124f3c:	46bd      	mov	sp, r7
 8124f3e:	bd80      	pop	{r7, pc}
 8124f40:	0812a87c 	.word	0x0812a87c
 8124f44:	0812a95c 	.word	0x0812a95c
 8124f48:	0812a934 	.word	0x0812a934

08124f4c <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8124f4c:	b580      	push	{r7, lr}
 8124f4e:	b084      	sub	sp, #16
 8124f50:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8124f52:	f7e7 f8b3 	bl	810c0bc <sys_now>
 8124f56:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8124f58:	4b17      	ldr	r3, [pc, #92]	@ (8124fb8 <sys_check_timeouts+0x6c>)
 8124f5a:	681b      	ldr	r3, [r3, #0]
 8124f5c:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8124f5e:	68bb      	ldr	r3, [r7, #8]
 8124f60:	2b00      	cmp	r3, #0
 8124f62:	d022      	beq.n	8124faa <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8124f64:	68bb      	ldr	r3, [r7, #8]
 8124f66:	685b      	ldr	r3, [r3, #4]
 8124f68:	68fa      	ldr	r2, [r7, #12]
 8124f6a:	1ad3      	subs	r3, r2, r3
 8124f6c:	0fdb      	lsrs	r3, r3, #31
 8124f6e:	f003 0301 	and.w	r3, r3, #1
 8124f72:	b2db      	uxtb	r3, r3
 8124f74:	2b00      	cmp	r3, #0
 8124f76:	d11a      	bne.n	8124fae <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8124f78:	68bb      	ldr	r3, [r7, #8]
 8124f7a:	681b      	ldr	r3, [r3, #0]
 8124f7c:	4a0e      	ldr	r2, [pc, #56]	@ (8124fb8 <sys_check_timeouts+0x6c>)
 8124f7e:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8124f80:	68bb      	ldr	r3, [r7, #8]
 8124f82:	689b      	ldr	r3, [r3, #8]
 8124f84:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8124f86:	68bb      	ldr	r3, [r7, #8]
 8124f88:	68db      	ldr	r3, [r3, #12]
 8124f8a:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8124f8c:	68bb      	ldr	r3, [r7, #8]
 8124f8e:	685b      	ldr	r3, [r3, #4]
 8124f90:	4a0a      	ldr	r2, [pc, #40]	@ (8124fbc <sys_check_timeouts+0x70>)
 8124f92:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8124f94:	68b9      	ldr	r1, [r7, #8]
 8124f96:	200a      	movs	r0, #10
 8124f98:	f7f8 fb1e 	bl	811d5d8 <memp_free>
    if (handler != NULL) {
 8124f9c:	687b      	ldr	r3, [r7, #4]
 8124f9e:	2b00      	cmp	r3, #0
 8124fa0:	d0da      	beq.n	8124f58 <sys_check_timeouts+0xc>
      handler(arg);
 8124fa2:	687b      	ldr	r3, [r7, #4]
 8124fa4:	6838      	ldr	r0, [r7, #0]
 8124fa6:	4798      	blx	r3
  do {
 8124fa8:	e7d6      	b.n	8124f58 <sys_check_timeouts+0xc>
      return;
 8124faa:	bf00      	nop
 8124fac:	e000      	b.n	8124fb0 <sys_check_timeouts+0x64>
      return;
 8124fae:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8124fb0:	3710      	adds	r7, #16
 8124fb2:	46bd      	mov	sp, r7
 8124fb4:	bd80      	pop	{r7, pc}
 8124fb6:	bf00      	nop
 8124fb8:	1000e56c 	.word	0x1000e56c
 8124fbc:	1000e570 	.word	0x1000e570

08124fc0 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 8124fc0:	b580      	push	{r7, lr}
 8124fc2:	b082      	sub	sp, #8
 8124fc4:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 8124fc6:	4b16      	ldr	r3, [pc, #88]	@ (8125020 <sys_timeouts_sleeptime+0x60>)
 8124fc8:	681b      	ldr	r3, [r3, #0]
 8124fca:	2b00      	cmp	r3, #0
 8124fcc:	d102      	bne.n	8124fd4 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 8124fce:	f04f 33ff 	mov.w	r3, #4294967295
 8124fd2:	e020      	b.n	8125016 <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 8124fd4:	f7e7 f872 	bl	810c0bc <sys_now>
 8124fd8:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 8124fda:	4b11      	ldr	r3, [pc, #68]	@ (8125020 <sys_timeouts_sleeptime+0x60>)
 8124fdc:	681b      	ldr	r3, [r3, #0]
 8124fde:	685a      	ldr	r2, [r3, #4]
 8124fe0:	687b      	ldr	r3, [r7, #4]
 8124fe2:	1ad3      	subs	r3, r2, r3
 8124fe4:	0fdb      	lsrs	r3, r3, #31
 8124fe6:	f003 0301 	and.w	r3, r3, #1
 8124fea:	b2db      	uxtb	r3, r3
 8124fec:	2b00      	cmp	r3, #0
 8124fee:	d001      	beq.n	8124ff4 <sys_timeouts_sleeptime+0x34>
    return 0;
 8124ff0:	2300      	movs	r3, #0
 8124ff2:	e010      	b.n	8125016 <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8124ff4:	4b0a      	ldr	r3, [pc, #40]	@ (8125020 <sys_timeouts_sleeptime+0x60>)
 8124ff6:	681b      	ldr	r3, [r3, #0]
 8124ff8:	685a      	ldr	r2, [r3, #4]
 8124ffa:	687b      	ldr	r3, [r7, #4]
 8124ffc:	1ad3      	subs	r3, r2, r3
 8124ffe:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 8125000:	683b      	ldr	r3, [r7, #0]
 8125002:	2b00      	cmp	r3, #0
 8125004:	da06      	bge.n	8125014 <sys_timeouts_sleeptime+0x54>
 8125006:	4b07      	ldr	r3, [pc, #28]	@ (8125024 <sys_timeouts_sleeptime+0x64>)
 8125008:	f44f 72dc 	mov.w	r2, #440	@ 0x1b8
 812500c:	4906      	ldr	r1, [pc, #24]	@ (8125028 <sys_timeouts_sleeptime+0x68>)
 812500e:	4807      	ldr	r0, [pc, #28]	@ (812502c <sys_timeouts_sleeptime+0x6c>)
 8125010:	f001 fd30 	bl	8126a74 <iprintf>
    return ret;
 8125014:	683b      	ldr	r3, [r7, #0]
  }
}
 8125016:	4618      	mov	r0, r3
 8125018:	3708      	adds	r7, #8
 812501a:	46bd      	mov	sp, r7
 812501c:	bd80      	pop	{r7, pc}
 812501e:	bf00      	nop
 8125020:	1000e56c 	.word	0x1000e56c
 8125024:	0812a87c 	.word	0x0812a87c
 8125028:	0812a994 	.word	0x0812a994
 812502c:	0812a934 	.word	0x0812a934

08125030 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8125030:	b580      	push	{r7, lr}
 8125032:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8125034:	f000 ffa6 	bl	8125f84 <rand>
 8125038:	4603      	mov	r3, r0
 812503a:	b29b      	uxth	r3, r3
 812503c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8125040:	b29b      	uxth	r3, r3
 8125042:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 8125046:	b29a      	uxth	r2, r3
 8125048:	4b01      	ldr	r3, [pc, #4]	@ (8125050 <udp_init+0x20>)
 812504a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 812504c:	bf00      	nop
 812504e:	bd80      	pop	{r7, pc}
 8125050:	10000030 	.word	0x10000030

08125054 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8125054:	b480      	push	{r7}
 8125056:	b083      	sub	sp, #12
 8125058:	af00      	add	r7, sp, #0
  u16_t n = 0;
 812505a:	2300      	movs	r3, #0
 812505c:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 812505e:	4b17      	ldr	r3, [pc, #92]	@ (81250bc <udp_new_port+0x68>)
 8125060:	881b      	ldrh	r3, [r3, #0]
 8125062:	1c5a      	adds	r2, r3, #1
 8125064:	b291      	uxth	r1, r2
 8125066:	4a15      	ldr	r2, [pc, #84]	@ (81250bc <udp_new_port+0x68>)
 8125068:	8011      	strh	r1, [r2, #0]
 812506a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 812506e:	4293      	cmp	r3, r2
 8125070:	d103      	bne.n	812507a <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 8125072:	4b12      	ldr	r3, [pc, #72]	@ (81250bc <udp_new_port+0x68>)
 8125074:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 8125078:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 812507a:	4b11      	ldr	r3, [pc, #68]	@ (81250c0 <udp_new_port+0x6c>)
 812507c:	681b      	ldr	r3, [r3, #0]
 812507e:	603b      	str	r3, [r7, #0]
 8125080:	e011      	b.n	81250a6 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 8125082:	683b      	ldr	r3, [r7, #0]
 8125084:	8a5a      	ldrh	r2, [r3, #18]
 8125086:	4b0d      	ldr	r3, [pc, #52]	@ (81250bc <udp_new_port+0x68>)
 8125088:	881b      	ldrh	r3, [r3, #0]
 812508a:	429a      	cmp	r2, r3
 812508c:	d108      	bne.n	81250a0 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 812508e:	88fb      	ldrh	r3, [r7, #6]
 8125090:	3301      	adds	r3, #1
 8125092:	80fb      	strh	r3, [r7, #6]
 8125094:	88fb      	ldrh	r3, [r7, #6]
 8125096:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 812509a:	d3e0      	bcc.n	812505e <udp_new_port+0xa>
        return 0;
 812509c:	2300      	movs	r3, #0
 812509e:	e007      	b.n	81250b0 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 81250a0:	683b      	ldr	r3, [r7, #0]
 81250a2:	68db      	ldr	r3, [r3, #12]
 81250a4:	603b      	str	r3, [r7, #0]
 81250a6:	683b      	ldr	r3, [r7, #0]
 81250a8:	2b00      	cmp	r3, #0
 81250aa:	d1ea      	bne.n	8125082 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 81250ac:	4b03      	ldr	r3, [pc, #12]	@ (81250bc <udp_new_port+0x68>)
 81250ae:	881b      	ldrh	r3, [r3, #0]
}
 81250b0:	4618      	mov	r0, r3
 81250b2:	370c      	adds	r7, #12
 81250b4:	46bd      	mov	sp, r7
 81250b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81250ba:	4770      	bx	lr
 81250bc:	10000030 	.word	0x10000030
 81250c0:	1000e578 	.word	0x1000e578

081250c4 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 81250c4:	b580      	push	{r7, lr}
 81250c6:	b084      	sub	sp, #16
 81250c8:	af00      	add	r7, sp, #0
 81250ca:	60f8      	str	r0, [r7, #12]
 81250cc:	60b9      	str	r1, [r7, #8]
 81250ce:	4613      	mov	r3, r2
 81250d0:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 81250d2:	68fb      	ldr	r3, [r7, #12]
 81250d4:	2b00      	cmp	r3, #0
 81250d6:	d105      	bne.n	81250e4 <udp_input_local_match+0x20>
 81250d8:	4b27      	ldr	r3, [pc, #156]	@ (8125178 <udp_input_local_match+0xb4>)
 81250da:	2287      	movs	r2, #135	@ 0x87
 81250dc:	4927      	ldr	r1, [pc, #156]	@ (812517c <udp_input_local_match+0xb8>)
 81250de:	4828      	ldr	r0, [pc, #160]	@ (8125180 <udp_input_local_match+0xbc>)
 81250e0:	f001 fcc8 	bl	8126a74 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 81250e4:	68bb      	ldr	r3, [r7, #8]
 81250e6:	2b00      	cmp	r3, #0
 81250e8:	d105      	bne.n	81250f6 <udp_input_local_match+0x32>
 81250ea:	4b23      	ldr	r3, [pc, #140]	@ (8125178 <udp_input_local_match+0xb4>)
 81250ec:	2288      	movs	r2, #136	@ 0x88
 81250ee:	4925      	ldr	r1, [pc, #148]	@ (8125184 <udp_input_local_match+0xc0>)
 81250f0:	4823      	ldr	r0, [pc, #140]	@ (8125180 <udp_input_local_match+0xbc>)
 81250f2:	f001 fcbf 	bl	8126a74 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 81250f6:	68fb      	ldr	r3, [r7, #12]
 81250f8:	7a1b      	ldrb	r3, [r3, #8]
 81250fa:	2b00      	cmp	r3, #0
 81250fc:	d00b      	beq.n	8125116 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 81250fe:	68fb      	ldr	r3, [r7, #12]
 8125100:	7a1a      	ldrb	r2, [r3, #8]
 8125102:	4b21      	ldr	r3, [pc, #132]	@ (8125188 <udp_input_local_match+0xc4>)
 8125104:	685b      	ldr	r3, [r3, #4]
 8125106:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 812510a:	3301      	adds	r3, #1
 812510c:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 812510e:	429a      	cmp	r2, r3
 8125110:	d001      	beq.n	8125116 <udp_input_local_match+0x52>
    return 0;
 8125112:	2300      	movs	r3, #0
 8125114:	e02b      	b.n	812516e <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8125116:	79fb      	ldrb	r3, [r7, #7]
 8125118:	2b00      	cmp	r3, #0
 812511a:	d018      	beq.n	812514e <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 812511c:	68fb      	ldr	r3, [r7, #12]
 812511e:	2b00      	cmp	r3, #0
 8125120:	d013      	beq.n	812514a <udp_input_local_match+0x86>
 8125122:	68fb      	ldr	r3, [r7, #12]
 8125124:	681b      	ldr	r3, [r3, #0]
 8125126:	2b00      	cmp	r3, #0
 8125128:	d00f      	beq.n	812514a <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 812512a:	4b17      	ldr	r3, [pc, #92]	@ (8125188 <udp_input_local_match+0xc4>)
 812512c:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 812512e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8125132:	d00a      	beq.n	812514a <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8125134:	68fb      	ldr	r3, [r7, #12]
 8125136:	681a      	ldr	r2, [r3, #0]
 8125138:	4b13      	ldr	r3, [pc, #76]	@ (8125188 <udp_input_local_match+0xc4>)
 812513a:	695b      	ldr	r3, [r3, #20]
 812513c:	405a      	eors	r2, r3
 812513e:	68bb      	ldr	r3, [r7, #8]
 8125140:	3308      	adds	r3, #8
 8125142:	681b      	ldr	r3, [r3, #0]
 8125144:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8125146:	2b00      	cmp	r3, #0
 8125148:	d110      	bne.n	812516c <udp_input_local_match+0xa8>
          return 1;
 812514a:	2301      	movs	r3, #1
 812514c:	e00f      	b.n	812516e <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 812514e:	68fb      	ldr	r3, [r7, #12]
 8125150:	2b00      	cmp	r3, #0
 8125152:	d009      	beq.n	8125168 <udp_input_local_match+0xa4>
 8125154:	68fb      	ldr	r3, [r7, #12]
 8125156:	681b      	ldr	r3, [r3, #0]
 8125158:	2b00      	cmp	r3, #0
 812515a:	d005      	beq.n	8125168 <udp_input_local_match+0xa4>
 812515c:	68fb      	ldr	r3, [r7, #12]
 812515e:	681a      	ldr	r2, [r3, #0]
 8125160:	4b09      	ldr	r3, [pc, #36]	@ (8125188 <udp_input_local_match+0xc4>)
 8125162:	695b      	ldr	r3, [r3, #20]
 8125164:	429a      	cmp	r2, r3
 8125166:	d101      	bne.n	812516c <udp_input_local_match+0xa8>
        return 1;
 8125168:	2301      	movs	r3, #1
 812516a:	e000      	b.n	812516e <udp_input_local_match+0xaa>
      }
  }

  return 0;
 812516c:	2300      	movs	r3, #0
}
 812516e:	4618      	mov	r0, r3
 8125170:	3710      	adds	r7, #16
 8125172:	46bd      	mov	sp, r7
 8125174:	bd80      	pop	{r7, pc}
 8125176:	bf00      	nop
 8125178:	0812a9a8 	.word	0x0812a9a8
 812517c:	0812aa1c 	.word	0x0812aa1c
 8125180:	0812aa40 	.word	0x0812aa40
 8125184:	0812aa68 	.word	0x0812aa68
 8125188:	1000b374 	.word	0x1000b374

0812518c <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 812518c:	b590      	push	{r4, r7, lr}
 812518e:	b08d      	sub	sp, #52	@ 0x34
 8125190:	af02      	add	r7, sp, #8
 8125192:	6078      	str	r0, [r7, #4]
 8125194:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8125196:	2300      	movs	r3, #0
 8125198:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 812519a:	687b      	ldr	r3, [r7, #4]
 812519c:	2b00      	cmp	r3, #0
 812519e:	d105      	bne.n	81251ac <udp_input+0x20>
 81251a0:	4b7c      	ldr	r3, [pc, #496]	@ (8125394 <udp_input+0x208>)
 81251a2:	22cf      	movs	r2, #207	@ 0xcf
 81251a4:	497c      	ldr	r1, [pc, #496]	@ (8125398 <udp_input+0x20c>)
 81251a6:	487d      	ldr	r0, [pc, #500]	@ (812539c <udp_input+0x210>)
 81251a8:	f001 fc64 	bl	8126a74 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 81251ac:	683b      	ldr	r3, [r7, #0]
 81251ae:	2b00      	cmp	r3, #0
 81251b0:	d105      	bne.n	81251be <udp_input+0x32>
 81251b2:	4b78      	ldr	r3, [pc, #480]	@ (8125394 <udp_input+0x208>)
 81251b4:	22d0      	movs	r2, #208	@ 0xd0
 81251b6:	497a      	ldr	r1, [pc, #488]	@ (81253a0 <udp_input+0x214>)
 81251b8:	4878      	ldr	r0, [pc, #480]	@ (812539c <udp_input+0x210>)
 81251ba:	f001 fc5b 	bl	8126a74 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 81251be:	687b      	ldr	r3, [r7, #4]
 81251c0:	895b      	ldrh	r3, [r3, #10]
 81251c2:	2b07      	cmp	r3, #7
 81251c4:	d803      	bhi.n	81251ce <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 81251c6:	6878      	ldr	r0, [r7, #4]
 81251c8:	f7f9 f8a8 	bl	811e31c <pbuf_free>
    goto end;
 81251cc:	e0de      	b.n	812538c <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 81251ce:	687b      	ldr	r3, [r7, #4]
 81251d0:	685b      	ldr	r3, [r3, #4]
 81251d2:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 81251d4:	4b73      	ldr	r3, [pc, #460]	@ (81253a4 <udp_input+0x218>)
 81251d6:	695b      	ldr	r3, [r3, #20]
 81251d8:	4a72      	ldr	r2, [pc, #456]	@ (81253a4 <udp_input+0x218>)
 81251da:	6812      	ldr	r2, [r2, #0]
 81251dc:	4611      	mov	r1, r2
 81251de:	4618      	mov	r0, r3
 81251e0:	f7f6 fccc 	bl	811bb7c <ip4_addr_isbroadcast_u32>
 81251e4:	4603      	mov	r3, r0
 81251e6:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 81251e8:	697b      	ldr	r3, [r7, #20]
 81251ea:	881b      	ldrh	r3, [r3, #0]
 81251ec:	b29b      	uxth	r3, r3
 81251ee:	4618      	mov	r0, r3
 81251f0:	f7f4 fe8c 	bl	8119f0c <lwip_htons>
 81251f4:	4603      	mov	r3, r0
 81251f6:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 81251f8:	697b      	ldr	r3, [r7, #20]
 81251fa:	885b      	ldrh	r3, [r3, #2]
 81251fc:	b29b      	uxth	r3, r3
 81251fe:	4618      	mov	r0, r3
 8125200:	f7f4 fe84 	bl	8119f0c <lwip_htons>
 8125204:	4603      	mov	r3, r0
 8125206:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8125208:	2300      	movs	r3, #0
 812520a:	627b      	str	r3, [r7, #36]	@ 0x24
  prev = NULL;
 812520c:	2300      	movs	r3, #0
 812520e:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8125210:	2300      	movs	r3, #0
 8125212:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8125214:	4b64      	ldr	r3, [pc, #400]	@ (81253a8 <udp_input+0x21c>)
 8125216:	681b      	ldr	r3, [r3, #0]
 8125218:	627b      	str	r3, [r7, #36]	@ 0x24
 812521a:	e054      	b.n	81252c6 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 812521c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 812521e:	8a5b      	ldrh	r3, [r3, #18]
 8125220:	89fa      	ldrh	r2, [r7, #14]
 8125222:	429a      	cmp	r2, r3
 8125224:	d14a      	bne.n	81252bc <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8125226:	7cfb      	ldrb	r3, [r7, #19]
 8125228:	461a      	mov	r2, r3
 812522a:	6839      	ldr	r1, [r7, #0]
 812522c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 812522e:	f7ff ff49 	bl	81250c4 <udp_input_local_match>
 8125232:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8125234:	2b00      	cmp	r3, #0
 8125236:	d041      	beq.n	81252bc <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8125238:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 812523a:	7c1b      	ldrb	r3, [r3, #16]
 812523c:	f003 0304 	and.w	r3, r3, #4
 8125240:	2b00      	cmp	r3, #0
 8125242:	d11d      	bne.n	8125280 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8125244:	69fb      	ldr	r3, [r7, #28]
 8125246:	2b00      	cmp	r3, #0
 8125248:	d102      	bne.n	8125250 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 812524a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 812524c:	61fb      	str	r3, [r7, #28]
 812524e:	e017      	b.n	8125280 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8125250:	7cfb      	ldrb	r3, [r7, #19]
 8125252:	2b00      	cmp	r3, #0
 8125254:	d014      	beq.n	8125280 <udp_input+0xf4>
 8125256:	4b53      	ldr	r3, [pc, #332]	@ (81253a4 <udp_input+0x218>)
 8125258:	695b      	ldr	r3, [r3, #20]
 812525a:	f1b3 3fff 	cmp.w	r3, #4294967295
 812525e:	d10f      	bne.n	8125280 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8125260:	69fb      	ldr	r3, [r7, #28]
 8125262:	681a      	ldr	r2, [r3, #0]
 8125264:	683b      	ldr	r3, [r7, #0]
 8125266:	3304      	adds	r3, #4
 8125268:	681b      	ldr	r3, [r3, #0]
 812526a:	429a      	cmp	r2, r3
 812526c:	d008      	beq.n	8125280 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 812526e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8125270:	681a      	ldr	r2, [r3, #0]
 8125272:	683b      	ldr	r3, [r7, #0]
 8125274:	3304      	adds	r3, #4
 8125276:	681b      	ldr	r3, [r3, #0]
 8125278:	429a      	cmp	r2, r3
 812527a:	d101      	bne.n	8125280 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 812527c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 812527e:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8125280:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8125282:	8a9b      	ldrh	r3, [r3, #20]
 8125284:	8a3a      	ldrh	r2, [r7, #16]
 8125286:	429a      	cmp	r2, r3
 8125288:	d118      	bne.n	81252bc <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 812528a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 812528c:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 812528e:	2b00      	cmp	r3, #0
 8125290:	d005      	beq.n	812529e <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8125292:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8125294:	685a      	ldr	r2, [r3, #4]
 8125296:	4b43      	ldr	r3, [pc, #268]	@ (81253a4 <udp_input+0x218>)
 8125298:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 812529a:	429a      	cmp	r2, r3
 812529c:	d10e      	bne.n	81252bc <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 812529e:	6a3b      	ldr	r3, [r7, #32]
 81252a0:	2b00      	cmp	r3, #0
 81252a2:	d014      	beq.n	81252ce <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 81252a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81252a6:	68da      	ldr	r2, [r3, #12]
 81252a8:	6a3b      	ldr	r3, [r7, #32]
 81252aa:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 81252ac:	4b3e      	ldr	r3, [pc, #248]	@ (81253a8 <udp_input+0x21c>)
 81252ae:	681a      	ldr	r2, [r3, #0]
 81252b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81252b2:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 81252b4:	4a3c      	ldr	r2, [pc, #240]	@ (81253a8 <udp_input+0x21c>)
 81252b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81252b8:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 81252ba:	e008      	b.n	81252ce <udp_input+0x142>
      }
    }

    prev = pcb;
 81252bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81252be:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 81252c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81252c2:	68db      	ldr	r3, [r3, #12]
 81252c4:	627b      	str	r3, [r7, #36]	@ 0x24
 81252c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81252c8:	2b00      	cmp	r3, #0
 81252ca:	d1a7      	bne.n	812521c <udp_input+0x90>
 81252cc:	e000      	b.n	81252d0 <udp_input+0x144>
        break;
 81252ce:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 81252d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81252d2:	2b00      	cmp	r3, #0
 81252d4:	d101      	bne.n	81252da <udp_input+0x14e>
    pcb = uncon_pcb;
 81252d6:	69fb      	ldr	r3, [r7, #28]
 81252d8:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 81252da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81252dc:	2b00      	cmp	r3, #0
 81252de:	d002      	beq.n	81252e6 <udp_input+0x15a>
    for_us = 1;
 81252e0:	2301      	movs	r3, #1
 81252e2:	76fb      	strb	r3, [r7, #27]
 81252e4:	e00a      	b.n	81252fc <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 81252e6:	683b      	ldr	r3, [r7, #0]
 81252e8:	3304      	adds	r3, #4
 81252ea:	681a      	ldr	r2, [r3, #0]
 81252ec:	4b2d      	ldr	r3, [pc, #180]	@ (81253a4 <udp_input+0x218>)
 81252ee:	695b      	ldr	r3, [r3, #20]
 81252f0:	429a      	cmp	r2, r3
 81252f2:	bf0c      	ite	eq
 81252f4:	2301      	moveq	r3, #1
 81252f6:	2300      	movne	r3, #0
 81252f8:	b2db      	uxtb	r3, r3
 81252fa:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 81252fc:	7efb      	ldrb	r3, [r7, #27]
 81252fe:	2b00      	cmp	r3, #0
 8125300:	d041      	beq.n	8125386 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8125302:	2108      	movs	r1, #8
 8125304:	6878      	ldr	r0, [r7, #4]
 8125306:	f7f8 ff83 	bl	811e210 <pbuf_remove_header>
 812530a:	4603      	mov	r3, r0
 812530c:	2b00      	cmp	r3, #0
 812530e:	d00a      	beq.n	8125326 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8125310:	4b20      	ldr	r3, [pc, #128]	@ (8125394 <udp_input+0x208>)
 8125312:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 8125316:	4925      	ldr	r1, [pc, #148]	@ (81253ac <udp_input+0x220>)
 8125318:	4820      	ldr	r0, [pc, #128]	@ (812539c <udp_input+0x210>)
 812531a:	f001 fbab 	bl	8126a74 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 812531e:	6878      	ldr	r0, [r7, #4]
 8125320:	f7f8 fffc 	bl	811e31c <pbuf_free>
      goto end;
 8125324:	e032      	b.n	812538c <udp_input+0x200>
    }

    if (pcb != NULL) {
 8125326:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8125328:	2b00      	cmp	r3, #0
 812532a:	d012      	beq.n	8125352 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 812532c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 812532e:	699b      	ldr	r3, [r3, #24]
 8125330:	2b00      	cmp	r3, #0
 8125332:	d00a      	beq.n	812534a <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8125334:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8125336:	699c      	ldr	r4, [r3, #24]
 8125338:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 812533a:	69d8      	ldr	r0, [r3, #28]
 812533c:	8a3b      	ldrh	r3, [r7, #16]
 812533e:	9300      	str	r3, [sp, #0]
 8125340:	4b1b      	ldr	r3, [pc, #108]	@ (81253b0 <udp_input+0x224>)
 8125342:	687a      	ldr	r2, [r7, #4]
 8125344:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8125346:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8125348:	e021      	b.n	812538e <udp_input+0x202>
        pbuf_free(p);
 812534a:	6878      	ldr	r0, [r7, #4]
 812534c:	f7f8 ffe6 	bl	811e31c <pbuf_free>
        goto end;
 8125350:	e01c      	b.n	812538c <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8125352:	7cfb      	ldrb	r3, [r7, #19]
 8125354:	2b00      	cmp	r3, #0
 8125356:	d112      	bne.n	812537e <udp_input+0x1f2>
 8125358:	4b12      	ldr	r3, [pc, #72]	@ (81253a4 <udp_input+0x218>)
 812535a:	695b      	ldr	r3, [r3, #20]
 812535c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8125360:	2be0      	cmp	r3, #224	@ 0xe0
 8125362:	d00c      	beq.n	812537e <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8125364:	4b0f      	ldr	r3, [pc, #60]	@ (81253a4 <udp_input+0x218>)
 8125366:	899b      	ldrh	r3, [r3, #12]
 8125368:	3308      	adds	r3, #8
 812536a:	b29b      	uxth	r3, r3
 812536c:	b21b      	sxth	r3, r3
 812536e:	4619      	mov	r1, r3
 8125370:	6878      	ldr	r0, [r7, #4]
 8125372:	f7f8 ffc0 	bl	811e2f6 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8125376:	2103      	movs	r1, #3
 8125378:	6878      	ldr	r0, [r7, #4]
 812537a:	f7f6 f801 	bl	811b380 <icmp_dest_unreach>
      pbuf_free(p);
 812537e:	6878      	ldr	r0, [r7, #4]
 8125380:	f7f8 ffcc 	bl	811e31c <pbuf_free>
  return;
 8125384:	e003      	b.n	812538e <udp_input+0x202>
    pbuf_free(p);
 8125386:	6878      	ldr	r0, [r7, #4]
 8125388:	f7f8 ffc8 	bl	811e31c <pbuf_free>
  return;
 812538c:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 812538e:	372c      	adds	r7, #44	@ 0x2c
 8125390:	46bd      	mov	sp, r7
 8125392:	bd90      	pop	{r4, r7, pc}
 8125394:	0812a9a8 	.word	0x0812a9a8
 8125398:	0812aa90 	.word	0x0812aa90
 812539c:	0812aa40 	.word	0x0812aa40
 81253a0:	0812aaa8 	.word	0x0812aaa8
 81253a4:	1000b374 	.word	0x1000b374
 81253a8:	1000e578 	.word	0x1000e578
 81253ac:	0812aac4 	.word	0x0812aac4
 81253b0:	1000b384 	.word	0x1000b384

081253b4 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 81253b4:	b580      	push	{r7, lr}
 81253b6:	b088      	sub	sp, #32
 81253b8:	af02      	add	r7, sp, #8
 81253ba:	60f8      	str	r0, [r7, #12]
 81253bc:	60b9      	str	r1, [r7, #8]
 81253be:	607a      	str	r2, [r7, #4]
 81253c0:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 81253c2:	68fb      	ldr	r3, [r7, #12]
 81253c4:	2b00      	cmp	r3, #0
 81253c6:	d109      	bne.n	81253dc <udp_sendto+0x28>
 81253c8:	4b23      	ldr	r3, [pc, #140]	@ (8125458 <udp_sendto+0xa4>)
 81253ca:	f44f 7206 	mov.w	r2, #536	@ 0x218
 81253ce:	4923      	ldr	r1, [pc, #140]	@ (812545c <udp_sendto+0xa8>)
 81253d0:	4823      	ldr	r0, [pc, #140]	@ (8125460 <udp_sendto+0xac>)
 81253d2:	f001 fb4f 	bl	8126a74 <iprintf>
 81253d6:	f06f 030f 	mvn.w	r3, #15
 81253da:	e038      	b.n	812544e <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 81253dc:	68bb      	ldr	r3, [r7, #8]
 81253de:	2b00      	cmp	r3, #0
 81253e0:	d109      	bne.n	81253f6 <udp_sendto+0x42>
 81253e2:	4b1d      	ldr	r3, [pc, #116]	@ (8125458 <udp_sendto+0xa4>)
 81253e4:	f240 2219 	movw	r2, #537	@ 0x219
 81253e8:	491e      	ldr	r1, [pc, #120]	@ (8125464 <udp_sendto+0xb0>)
 81253ea:	481d      	ldr	r0, [pc, #116]	@ (8125460 <udp_sendto+0xac>)
 81253ec:	f001 fb42 	bl	8126a74 <iprintf>
 81253f0:	f06f 030f 	mvn.w	r3, #15
 81253f4:	e02b      	b.n	812544e <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 81253f6:	687b      	ldr	r3, [r7, #4]
 81253f8:	2b00      	cmp	r3, #0
 81253fa:	d109      	bne.n	8125410 <udp_sendto+0x5c>
 81253fc:	4b16      	ldr	r3, [pc, #88]	@ (8125458 <udp_sendto+0xa4>)
 81253fe:	f240 221a 	movw	r2, #538	@ 0x21a
 8125402:	4919      	ldr	r1, [pc, #100]	@ (8125468 <udp_sendto+0xb4>)
 8125404:	4816      	ldr	r0, [pc, #88]	@ (8125460 <udp_sendto+0xac>)
 8125406:	f001 fb35 	bl	8126a74 <iprintf>
 812540a:	f06f 030f 	mvn.w	r3, #15
 812540e:	e01e      	b.n	812544e <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 8125410:	68fb      	ldr	r3, [r7, #12]
 8125412:	7a1b      	ldrb	r3, [r3, #8]
 8125414:	2b00      	cmp	r3, #0
 8125416:	d006      	beq.n	8125426 <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 8125418:	68fb      	ldr	r3, [r7, #12]
 812541a:	7a1b      	ldrb	r3, [r3, #8]
 812541c:	4618      	mov	r0, r3
 812541e:	f7f8 fbf1 	bl	811dc04 <netif_get_by_index>
 8125422:	6178      	str	r0, [r7, #20]
 8125424:	e003      	b.n	812542e <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 8125426:	6878      	ldr	r0, [r7, #4]
 8125428:	f7f6 f912 	bl	811b650 <ip4_route>
 812542c:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 812542e:	697b      	ldr	r3, [r7, #20]
 8125430:	2b00      	cmp	r3, #0
 8125432:	d102      	bne.n	812543a <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 8125434:	f06f 0303 	mvn.w	r3, #3
 8125438:	e009      	b.n	812544e <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 812543a:	887a      	ldrh	r2, [r7, #2]
 812543c:	697b      	ldr	r3, [r7, #20]
 812543e:	9300      	str	r3, [sp, #0]
 8125440:	4613      	mov	r3, r2
 8125442:	687a      	ldr	r2, [r7, #4]
 8125444:	68b9      	ldr	r1, [r7, #8]
 8125446:	68f8      	ldr	r0, [r7, #12]
 8125448:	f000 f810 	bl	812546c <udp_sendto_if>
 812544c:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 812544e:	4618      	mov	r0, r3
 8125450:	3718      	adds	r7, #24
 8125452:	46bd      	mov	sp, r7
 8125454:	bd80      	pop	{r7, pc}
 8125456:	bf00      	nop
 8125458:	0812a9a8 	.word	0x0812a9a8
 812545c:	0812ab10 	.word	0x0812ab10
 8125460:	0812aa40 	.word	0x0812aa40
 8125464:	0812ab28 	.word	0x0812ab28
 8125468:	0812ab44 	.word	0x0812ab44

0812546c <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 812546c:	b580      	push	{r7, lr}
 812546e:	b088      	sub	sp, #32
 8125470:	af02      	add	r7, sp, #8
 8125472:	60f8      	str	r0, [r7, #12]
 8125474:	60b9      	str	r1, [r7, #8]
 8125476:	607a      	str	r2, [r7, #4]
 8125478:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 812547a:	68fb      	ldr	r3, [r7, #12]
 812547c:	2b00      	cmp	r3, #0
 812547e:	d109      	bne.n	8125494 <udp_sendto_if+0x28>
 8125480:	4b2e      	ldr	r3, [pc, #184]	@ (812553c <udp_sendto_if+0xd0>)
 8125482:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8125486:	492e      	ldr	r1, [pc, #184]	@ (8125540 <udp_sendto_if+0xd4>)
 8125488:	482e      	ldr	r0, [pc, #184]	@ (8125544 <udp_sendto_if+0xd8>)
 812548a:	f001 faf3 	bl	8126a74 <iprintf>
 812548e:	f06f 030f 	mvn.w	r3, #15
 8125492:	e04f      	b.n	8125534 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 8125494:	68bb      	ldr	r3, [r7, #8]
 8125496:	2b00      	cmp	r3, #0
 8125498:	d109      	bne.n	81254ae <udp_sendto_if+0x42>
 812549a:	4b28      	ldr	r3, [pc, #160]	@ (812553c <udp_sendto_if+0xd0>)
 812549c:	f240 2281 	movw	r2, #641	@ 0x281
 81254a0:	4929      	ldr	r1, [pc, #164]	@ (8125548 <udp_sendto_if+0xdc>)
 81254a2:	4828      	ldr	r0, [pc, #160]	@ (8125544 <udp_sendto_if+0xd8>)
 81254a4:	f001 fae6 	bl	8126a74 <iprintf>
 81254a8:	f06f 030f 	mvn.w	r3, #15
 81254ac:	e042      	b.n	8125534 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 81254ae:	687b      	ldr	r3, [r7, #4]
 81254b0:	2b00      	cmp	r3, #0
 81254b2:	d109      	bne.n	81254c8 <udp_sendto_if+0x5c>
 81254b4:	4b21      	ldr	r3, [pc, #132]	@ (812553c <udp_sendto_if+0xd0>)
 81254b6:	f240 2282 	movw	r2, #642	@ 0x282
 81254ba:	4924      	ldr	r1, [pc, #144]	@ (812554c <udp_sendto_if+0xe0>)
 81254bc:	4821      	ldr	r0, [pc, #132]	@ (8125544 <udp_sendto_if+0xd8>)
 81254be:	f001 fad9 	bl	8126a74 <iprintf>
 81254c2:	f06f 030f 	mvn.w	r3, #15
 81254c6:	e035      	b.n	8125534 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 81254c8:	6a3b      	ldr	r3, [r7, #32]
 81254ca:	2b00      	cmp	r3, #0
 81254cc:	d109      	bne.n	81254e2 <udp_sendto_if+0x76>
 81254ce:	4b1b      	ldr	r3, [pc, #108]	@ (812553c <udp_sendto_if+0xd0>)
 81254d0:	f240 2283 	movw	r2, #643	@ 0x283
 81254d4:	491e      	ldr	r1, [pc, #120]	@ (8125550 <udp_sendto_if+0xe4>)
 81254d6:	481b      	ldr	r0, [pc, #108]	@ (8125544 <udp_sendto_if+0xd8>)
 81254d8:	f001 facc 	bl	8126a74 <iprintf>
 81254dc:	f06f 030f 	mvn.w	r3, #15
 81254e0:	e028      	b.n	8125534 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 81254e2:	68fb      	ldr	r3, [r7, #12]
 81254e4:	2b00      	cmp	r3, #0
 81254e6:	d009      	beq.n	81254fc <udp_sendto_if+0x90>
 81254e8:	68fb      	ldr	r3, [r7, #12]
 81254ea:	681b      	ldr	r3, [r3, #0]
 81254ec:	2b00      	cmp	r3, #0
 81254ee:	d005      	beq.n	81254fc <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 81254f0:	68fb      	ldr	r3, [r7, #12]
 81254f2:	681b      	ldr	r3, [r3, #0]
 81254f4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 81254f8:	2be0      	cmp	r3, #224	@ 0xe0
 81254fa:	d103      	bne.n	8125504 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 81254fc:	6a3b      	ldr	r3, [r7, #32]
 81254fe:	3304      	adds	r3, #4
 8125500:	617b      	str	r3, [r7, #20]
 8125502:	e00b      	b.n	812551c <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 8125504:	68fb      	ldr	r3, [r7, #12]
 8125506:	681a      	ldr	r2, [r3, #0]
 8125508:	6a3b      	ldr	r3, [r7, #32]
 812550a:	3304      	adds	r3, #4
 812550c:	681b      	ldr	r3, [r3, #0]
 812550e:	429a      	cmp	r2, r3
 8125510:	d002      	beq.n	8125518 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 8125512:	f06f 0303 	mvn.w	r3, #3
 8125516:	e00d      	b.n	8125534 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 8125518:	68fb      	ldr	r3, [r7, #12]
 812551a:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 812551c:	887a      	ldrh	r2, [r7, #2]
 812551e:	697b      	ldr	r3, [r7, #20]
 8125520:	9301      	str	r3, [sp, #4]
 8125522:	6a3b      	ldr	r3, [r7, #32]
 8125524:	9300      	str	r3, [sp, #0]
 8125526:	4613      	mov	r3, r2
 8125528:	687a      	ldr	r2, [r7, #4]
 812552a:	68b9      	ldr	r1, [r7, #8]
 812552c:	68f8      	ldr	r0, [r7, #12]
 812552e:	f000 f811 	bl	8125554 <udp_sendto_if_src>
 8125532:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8125534:	4618      	mov	r0, r3
 8125536:	3718      	adds	r7, #24
 8125538:	46bd      	mov	sp, r7
 812553a:	bd80      	pop	{r7, pc}
 812553c:	0812a9a8 	.word	0x0812a9a8
 8125540:	0812ab60 	.word	0x0812ab60
 8125544:	0812aa40 	.word	0x0812aa40
 8125548:	0812ab7c 	.word	0x0812ab7c
 812554c:	0812ab98 	.word	0x0812ab98
 8125550:	0812abb8 	.word	0x0812abb8

08125554 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 8125554:	b580      	push	{r7, lr}
 8125556:	b08c      	sub	sp, #48	@ 0x30
 8125558:	af04      	add	r7, sp, #16
 812555a:	60f8      	str	r0, [r7, #12]
 812555c:	60b9      	str	r1, [r7, #8]
 812555e:	607a      	str	r2, [r7, #4]
 8125560:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 8125562:	68fb      	ldr	r3, [r7, #12]
 8125564:	2b00      	cmp	r3, #0
 8125566:	d109      	bne.n	812557c <udp_sendto_if_src+0x28>
 8125568:	4b65      	ldr	r3, [pc, #404]	@ (8125700 <udp_sendto_if_src+0x1ac>)
 812556a:	f240 22d1 	movw	r2, #721	@ 0x2d1
 812556e:	4965      	ldr	r1, [pc, #404]	@ (8125704 <udp_sendto_if_src+0x1b0>)
 8125570:	4865      	ldr	r0, [pc, #404]	@ (8125708 <udp_sendto_if_src+0x1b4>)
 8125572:	f001 fa7f 	bl	8126a74 <iprintf>
 8125576:	f06f 030f 	mvn.w	r3, #15
 812557a:	e0bc      	b.n	81256f6 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 812557c:	68bb      	ldr	r3, [r7, #8]
 812557e:	2b00      	cmp	r3, #0
 8125580:	d109      	bne.n	8125596 <udp_sendto_if_src+0x42>
 8125582:	4b5f      	ldr	r3, [pc, #380]	@ (8125700 <udp_sendto_if_src+0x1ac>)
 8125584:	f240 22d2 	movw	r2, #722	@ 0x2d2
 8125588:	4960      	ldr	r1, [pc, #384]	@ (812570c <udp_sendto_if_src+0x1b8>)
 812558a:	485f      	ldr	r0, [pc, #380]	@ (8125708 <udp_sendto_if_src+0x1b4>)
 812558c:	f001 fa72 	bl	8126a74 <iprintf>
 8125590:	f06f 030f 	mvn.w	r3, #15
 8125594:	e0af      	b.n	81256f6 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8125596:	687b      	ldr	r3, [r7, #4]
 8125598:	2b00      	cmp	r3, #0
 812559a:	d109      	bne.n	81255b0 <udp_sendto_if_src+0x5c>
 812559c:	4b58      	ldr	r3, [pc, #352]	@ (8125700 <udp_sendto_if_src+0x1ac>)
 812559e:	f240 22d3 	movw	r2, #723	@ 0x2d3
 81255a2:	495b      	ldr	r1, [pc, #364]	@ (8125710 <udp_sendto_if_src+0x1bc>)
 81255a4:	4858      	ldr	r0, [pc, #352]	@ (8125708 <udp_sendto_if_src+0x1b4>)
 81255a6:	f001 fa65 	bl	8126a74 <iprintf>
 81255aa:	f06f 030f 	mvn.w	r3, #15
 81255ae:	e0a2      	b.n	81256f6 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 81255b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81255b2:	2b00      	cmp	r3, #0
 81255b4:	d109      	bne.n	81255ca <udp_sendto_if_src+0x76>
 81255b6:	4b52      	ldr	r3, [pc, #328]	@ (8125700 <udp_sendto_if_src+0x1ac>)
 81255b8:	f44f 7235 	mov.w	r2, #724	@ 0x2d4
 81255bc:	4955      	ldr	r1, [pc, #340]	@ (8125714 <udp_sendto_if_src+0x1c0>)
 81255be:	4852      	ldr	r0, [pc, #328]	@ (8125708 <udp_sendto_if_src+0x1b4>)
 81255c0:	f001 fa58 	bl	8126a74 <iprintf>
 81255c4:	f06f 030f 	mvn.w	r3, #15
 81255c8:	e095      	b.n	81256f6 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 81255ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81255cc:	2b00      	cmp	r3, #0
 81255ce:	d109      	bne.n	81255e4 <udp_sendto_if_src+0x90>
 81255d0:	4b4b      	ldr	r3, [pc, #300]	@ (8125700 <udp_sendto_if_src+0x1ac>)
 81255d2:	f240 22d5 	movw	r2, #725	@ 0x2d5
 81255d6:	4950      	ldr	r1, [pc, #320]	@ (8125718 <udp_sendto_if_src+0x1c4>)
 81255d8:	484b      	ldr	r0, [pc, #300]	@ (8125708 <udp_sendto_if_src+0x1b4>)
 81255da:	f001 fa4b 	bl	8126a74 <iprintf>
 81255de:	f06f 030f 	mvn.w	r3, #15
 81255e2:	e088      	b.n	81256f6 <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 81255e4:	68fb      	ldr	r3, [r7, #12]
 81255e6:	8a5b      	ldrh	r3, [r3, #18]
 81255e8:	2b00      	cmp	r3, #0
 81255ea:	d10f      	bne.n	812560c <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 81255ec:	68f9      	ldr	r1, [r7, #12]
 81255ee:	68fb      	ldr	r3, [r7, #12]
 81255f0:	8a5b      	ldrh	r3, [r3, #18]
 81255f2:	461a      	mov	r2, r3
 81255f4:	68f8      	ldr	r0, [r7, #12]
 81255f6:	f000 f893 	bl	8125720 <udp_bind>
 81255fa:	4603      	mov	r3, r0
 81255fc:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 81255fe:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8125602:	2b00      	cmp	r3, #0
 8125604:	d002      	beq.n	812560c <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 8125606:	f997 301b 	ldrsb.w	r3, [r7, #27]
 812560a:	e074      	b.n	81256f6 <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 812560c:	68bb      	ldr	r3, [r7, #8]
 812560e:	891b      	ldrh	r3, [r3, #8]
 8125610:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
 8125614:	4293      	cmp	r3, r2
 8125616:	d902      	bls.n	812561e <udp_sendto_if_src+0xca>
    return ERR_MEM;
 8125618:	f04f 33ff 	mov.w	r3, #4294967295
 812561c:	e06b      	b.n	81256f6 <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 812561e:	2108      	movs	r1, #8
 8125620:	68b8      	ldr	r0, [r7, #8]
 8125622:	f7f8 fde5 	bl	811e1f0 <pbuf_add_header>
 8125626:	4603      	mov	r3, r0
 8125628:	2b00      	cmp	r3, #0
 812562a:	d015      	beq.n	8125658 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 812562c:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8125630:	2108      	movs	r1, #8
 8125632:	2022      	movs	r0, #34	@ 0x22
 8125634:	f7f8 fb90 	bl	811dd58 <pbuf_alloc>
 8125638:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 812563a:	69fb      	ldr	r3, [r7, #28]
 812563c:	2b00      	cmp	r3, #0
 812563e:	d102      	bne.n	8125646 <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 8125640:	f04f 33ff 	mov.w	r3, #4294967295
 8125644:	e057      	b.n	81256f6 <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 8125646:	68bb      	ldr	r3, [r7, #8]
 8125648:	891b      	ldrh	r3, [r3, #8]
 812564a:	2b00      	cmp	r3, #0
 812564c:	d006      	beq.n	812565c <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 812564e:	68b9      	ldr	r1, [r7, #8]
 8125650:	69f8      	ldr	r0, [r7, #28]
 8125652:	f7f8 ff87 	bl	811e564 <pbuf_chain>
 8125656:	e001      	b.n	812565c <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 8125658:	68bb      	ldr	r3, [r7, #8]
 812565a:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 812565c:	69fb      	ldr	r3, [r7, #28]
 812565e:	895b      	ldrh	r3, [r3, #10]
 8125660:	2b07      	cmp	r3, #7
 8125662:	d806      	bhi.n	8125672 <udp_sendto_if_src+0x11e>
 8125664:	4b26      	ldr	r3, [pc, #152]	@ (8125700 <udp_sendto_if_src+0x1ac>)
 8125666:	f240 320d 	movw	r2, #781	@ 0x30d
 812566a:	492c      	ldr	r1, [pc, #176]	@ (812571c <udp_sendto_if_src+0x1c8>)
 812566c:	4826      	ldr	r0, [pc, #152]	@ (8125708 <udp_sendto_if_src+0x1b4>)
 812566e:	f001 fa01 	bl	8126a74 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 8125672:	69fb      	ldr	r3, [r7, #28]
 8125674:	685b      	ldr	r3, [r3, #4]
 8125676:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 8125678:	68fb      	ldr	r3, [r7, #12]
 812567a:	8a5b      	ldrh	r3, [r3, #18]
 812567c:	4618      	mov	r0, r3
 812567e:	f7f4 fc45 	bl	8119f0c <lwip_htons>
 8125682:	4603      	mov	r3, r0
 8125684:	461a      	mov	r2, r3
 8125686:	697b      	ldr	r3, [r7, #20]
 8125688:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 812568a:	887b      	ldrh	r3, [r7, #2]
 812568c:	4618      	mov	r0, r3
 812568e:	f7f4 fc3d 	bl	8119f0c <lwip_htons>
 8125692:	4603      	mov	r3, r0
 8125694:	461a      	mov	r2, r3
 8125696:	697b      	ldr	r3, [r7, #20]
 8125698:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 812569a:	697b      	ldr	r3, [r7, #20]
 812569c:	2200      	movs	r2, #0
 812569e:	719a      	strb	r2, [r3, #6]
 81256a0:	2200      	movs	r2, #0
 81256a2:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 81256a4:	69fb      	ldr	r3, [r7, #28]
 81256a6:	891b      	ldrh	r3, [r3, #8]
 81256a8:	4618      	mov	r0, r3
 81256aa:	f7f4 fc2f 	bl	8119f0c <lwip_htons>
 81256ae:	4603      	mov	r3, r0
 81256b0:	461a      	mov	r2, r3
 81256b2:	697b      	ldr	r3, [r7, #20]
 81256b4:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 81256b6:	2311      	movs	r3, #17
 81256b8:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 81256ba:	68fb      	ldr	r3, [r7, #12]
 81256bc:	7adb      	ldrb	r3, [r3, #11]
 81256be:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 81256c0:	68fb      	ldr	r3, [r7, #12]
 81256c2:	7a9b      	ldrb	r3, [r3, #10]
 81256c4:	7cb9      	ldrb	r1, [r7, #18]
 81256c6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 81256c8:	9202      	str	r2, [sp, #8]
 81256ca:	7cfa      	ldrb	r2, [r7, #19]
 81256cc:	9201      	str	r2, [sp, #4]
 81256ce:	9300      	str	r3, [sp, #0]
 81256d0:	460b      	mov	r3, r1
 81256d2:	687a      	ldr	r2, [r7, #4]
 81256d4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 81256d6:	69f8      	ldr	r0, [r7, #28]
 81256d8:	f7f6 f9a2 	bl	811ba20 <ip4_output_if_src>
 81256dc:	4603      	mov	r3, r0
 81256de:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 81256e0:	69fa      	ldr	r2, [r7, #28]
 81256e2:	68bb      	ldr	r3, [r7, #8]
 81256e4:	429a      	cmp	r2, r3
 81256e6:	d004      	beq.n	81256f2 <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 81256e8:	69f8      	ldr	r0, [r7, #28]
 81256ea:	f7f8 fe17 	bl	811e31c <pbuf_free>
    q = NULL;
 81256ee:	2300      	movs	r3, #0
 81256f0:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 81256f2:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 81256f6:	4618      	mov	r0, r3
 81256f8:	3720      	adds	r7, #32
 81256fa:	46bd      	mov	sp, r7
 81256fc:	bd80      	pop	{r7, pc}
 81256fe:	bf00      	nop
 8125700:	0812a9a8 	.word	0x0812a9a8
 8125704:	0812abd8 	.word	0x0812abd8
 8125708:	0812aa40 	.word	0x0812aa40
 812570c:	0812abf8 	.word	0x0812abf8
 8125710:	0812ac18 	.word	0x0812ac18
 8125714:	0812ac3c 	.word	0x0812ac3c
 8125718:	0812ac60 	.word	0x0812ac60
 812571c:	0812ac84 	.word	0x0812ac84

08125720 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8125720:	b580      	push	{r7, lr}
 8125722:	b086      	sub	sp, #24
 8125724:	af00      	add	r7, sp, #0
 8125726:	60f8      	str	r0, [r7, #12]
 8125728:	60b9      	str	r1, [r7, #8]
 812572a:	4613      	mov	r3, r2
 812572c:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 812572e:	68bb      	ldr	r3, [r7, #8]
 8125730:	2b00      	cmp	r3, #0
 8125732:	d101      	bne.n	8125738 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8125734:	4b39      	ldr	r3, [pc, #228]	@ (812581c <udp_bind+0xfc>)
 8125736:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8125738:	68fb      	ldr	r3, [r7, #12]
 812573a:	2b00      	cmp	r3, #0
 812573c:	d109      	bne.n	8125752 <udp_bind+0x32>
 812573e:	4b38      	ldr	r3, [pc, #224]	@ (8125820 <udp_bind+0x100>)
 8125740:	f240 32b7 	movw	r2, #951	@ 0x3b7
 8125744:	4937      	ldr	r1, [pc, #220]	@ (8125824 <udp_bind+0x104>)
 8125746:	4838      	ldr	r0, [pc, #224]	@ (8125828 <udp_bind+0x108>)
 8125748:	f001 f994 	bl	8126a74 <iprintf>
 812574c:	f06f 030f 	mvn.w	r3, #15
 8125750:	e060      	b.n	8125814 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8125752:	2300      	movs	r3, #0
 8125754:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8125756:	4b35      	ldr	r3, [pc, #212]	@ (812582c <udp_bind+0x10c>)
 8125758:	681b      	ldr	r3, [r3, #0]
 812575a:	617b      	str	r3, [r7, #20]
 812575c:	e009      	b.n	8125772 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 812575e:	68fa      	ldr	r2, [r7, #12]
 8125760:	697b      	ldr	r3, [r7, #20]
 8125762:	429a      	cmp	r2, r3
 8125764:	d102      	bne.n	812576c <udp_bind+0x4c>
      rebind = 1;
 8125766:	2301      	movs	r3, #1
 8125768:	74fb      	strb	r3, [r7, #19]
      break;
 812576a:	e005      	b.n	8125778 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 812576c:	697b      	ldr	r3, [r7, #20]
 812576e:	68db      	ldr	r3, [r3, #12]
 8125770:	617b      	str	r3, [r7, #20]
 8125772:	697b      	ldr	r3, [r7, #20]
 8125774:	2b00      	cmp	r3, #0
 8125776:	d1f2      	bne.n	812575e <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8125778:	88fb      	ldrh	r3, [r7, #6]
 812577a:	2b00      	cmp	r3, #0
 812577c:	d109      	bne.n	8125792 <udp_bind+0x72>
    port = udp_new_port();
 812577e:	f7ff fc69 	bl	8125054 <udp_new_port>
 8125782:	4603      	mov	r3, r0
 8125784:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8125786:	88fb      	ldrh	r3, [r7, #6]
 8125788:	2b00      	cmp	r3, #0
 812578a:	d12c      	bne.n	81257e6 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 812578c:	f06f 0307 	mvn.w	r3, #7
 8125790:	e040      	b.n	8125814 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8125792:	4b26      	ldr	r3, [pc, #152]	@ (812582c <udp_bind+0x10c>)
 8125794:	681b      	ldr	r3, [r3, #0]
 8125796:	617b      	str	r3, [r7, #20]
 8125798:	e022      	b.n	81257e0 <udp_bind+0xc0>
      if (pcb != ipcb) {
 812579a:	68fa      	ldr	r2, [r7, #12]
 812579c:	697b      	ldr	r3, [r7, #20]
 812579e:	429a      	cmp	r2, r3
 81257a0:	d01b      	beq.n	81257da <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 81257a2:	697b      	ldr	r3, [r7, #20]
 81257a4:	8a5b      	ldrh	r3, [r3, #18]
 81257a6:	88fa      	ldrh	r2, [r7, #6]
 81257a8:	429a      	cmp	r2, r3
 81257aa:	d116      	bne.n	81257da <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 81257ac:	697b      	ldr	r3, [r7, #20]
 81257ae:	681a      	ldr	r2, [r3, #0]
 81257b0:	68bb      	ldr	r3, [r7, #8]
 81257b2:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 81257b4:	429a      	cmp	r2, r3
 81257b6:	d00d      	beq.n	81257d4 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 81257b8:	68bb      	ldr	r3, [r7, #8]
 81257ba:	2b00      	cmp	r3, #0
 81257bc:	d00a      	beq.n	81257d4 <udp_bind+0xb4>
 81257be:	68bb      	ldr	r3, [r7, #8]
 81257c0:	681b      	ldr	r3, [r3, #0]
 81257c2:	2b00      	cmp	r3, #0
 81257c4:	d006      	beq.n	81257d4 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 81257c6:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 81257c8:	2b00      	cmp	r3, #0
 81257ca:	d003      	beq.n	81257d4 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 81257cc:	697b      	ldr	r3, [r7, #20]
 81257ce:	681b      	ldr	r3, [r3, #0]
 81257d0:	2b00      	cmp	r3, #0
 81257d2:	d102      	bne.n	81257da <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 81257d4:	f06f 0307 	mvn.w	r3, #7
 81257d8:	e01c      	b.n	8125814 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 81257da:	697b      	ldr	r3, [r7, #20]
 81257dc:	68db      	ldr	r3, [r3, #12]
 81257de:	617b      	str	r3, [r7, #20]
 81257e0:	697b      	ldr	r3, [r7, #20]
 81257e2:	2b00      	cmp	r3, #0
 81257e4:	d1d9      	bne.n	812579a <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 81257e6:	68bb      	ldr	r3, [r7, #8]
 81257e8:	2b00      	cmp	r3, #0
 81257ea:	d002      	beq.n	81257f2 <udp_bind+0xd2>
 81257ec:	68bb      	ldr	r3, [r7, #8]
 81257ee:	681b      	ldr	r3, [r3, #0]
 81257f0:	e000      	b.n	81257f4 <udp_bind+0xd4>
 81257f2:	2300      	movs	r3, #0
 81257f4:	68fa      	ldr	r2, [r7, #12]
 81257f6:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 81257f8:	68fb      	ldr	r3, [r7, #12]
 81257fa:	88fa      	ldrh	r2, [r7, #6]
 81257fc:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 81257fe:	7cfb      	ldrb	r3, [r7, #19]
 8125800:	2b00      	cmp	r3, #0
 8125802:	d106      	bne.n	8125812 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8125804:	4b09      	ldr	r3, [pc, #36]	@ (812582c <udp_bind+0x10c>)
 8125806:	681a      	ldr	r2, [r3, #0]
 8125808:	68fb      	ldr	r3, [r7, #12]
 812580a:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 812580c:	4a07      	ldr	r2, [pc, #28]	@ (812582c <udp_bind+0x10c>)
 812580e:	68fb      	ldr	r3, [r7, #12]
 8125810:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8125812:	2300      	movs	r3, #0
}
 8125814:	4618      	mov	r0, r3
 8125816:	3718      	adds	r7, #24
 8125818:	46bd      	mov	sp, r7
 812581a:	bd80      	pop	{r7, pc}
 812581c:	0812ae4c 	.word	0x0812ae4c
 8125820:	0812a9a8 	.word	0x0812a9a8
 8125824:	0812acb4 	.word	0x0812acb4
 8125828:	0812aa40 	.word	0x0812aa40
 812582c:	1000e578 	.word	0x1000e578

08125830 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 8125830:	b580      	push	{r7, lr}
 8125832:	b084      	sub	sp, #16
 8125834:	af00      	add	r7, sp, #0
 8125836:	60f8      	str	r0, [r7, #12]
 8125838:	60b9      	str	r1, [r7, #8]
 812583a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 812583c:	68fb      	ldr	r3, [r7, #12]
 812583e:	2b00      	cmp	r3, #0
 8125840:	d107      	bne.n	8125852 <udp_recv+0x22>
 8125842:	4b08      	ldr	r3, [pc, #32]	@ (8125864 <udp_recv+0x34>)
 8125844:	f240 428a 	movw	r2, #1162	@ 0x48a
 8125848:	4907      	ldr	r1, [pc, #28]	@ (8125868 <udp_recv+0x38>)
 812584a:	4808      	ldr	r0, [pc, #32]	@ (812586c <udp_recv+0x3c>)
 812584c:	f001 f912 	bl	8126a74 <iprintf>
 8125850:	e005      	b.n	812585e <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 8125852:	68fb      	ldr	r3, [r7, #12]
 8125854:	68ba      	ldr	r2, [r7, #8]
 8125856:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8125858:	68fb      	ldr	r3, [r7, #12]
 812585a:	687a      	ldr	r2, [r7, #4]
 812585c:	61da      	str	r2, [r3, #28]
}
 812585e:	3710      	adds	r7, #16
 8125860:	46bd      	mov	sp, r7
 8125862:	bd80      	pop	{r7, pc}
 8125864:	0812a9a8 	.word	0x0812a9a8
 8125868:	0812ad20 	.word	0x0812ad20
 812586c:	0812aa40 	.word	0x0812aa40

08125870 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8125870:	b580      	push	{r7, lr}
 8125872:	b084      	sub	sp, #16
 8125874:	af00      	add	r7, sp, #0
 8125876:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8125878:	687b      	ldr	r3, [r7, #4]
 812587a:	2b00      	cmp	r3, #0
 812587c:	d107      	bne.n	812588e <udp_remove+0x1e>
 812587e:	4b19      	ldr	r3, [pc, #100]	@ (81258e4 <udp_remove+0x74>)
 8125880:	f240 42a1 	movw	r2, #1185	@ 0x4a1
 8125884:	4918      	ldr	r1, [pc, #96]	@ (81258e8 <udp_remove+0x78>)
 8125886:	4819      	ldr	r0, [pc, #100]	@ (81258ec <udp_remove+0x7c>)
 8125888:	f001 f8f4 	bl	8126a74 <iprintf>
 812588c:	e026      	b.n	81258dc <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 812588e:	4b18      	ldr	r3, [pc, #96]	@ (81258f0 <udp_remove+0x80>)
 8125890:	681b      	ldr	r3, [r3, #0]
 8125892:	687a      	ldr	r2, [r7, #4]
 8125894:	429a      	cmp	r2, r3
 8125896:	d105      	bne.n	81258a4 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8125898:	4b15      	ldr	r3, [pc, #84]	@ (81258f0 <udp_remove+0x80>)
 812589a:	681b      	ldr	r3, [r3, #0]
 812589c:	68db      	ldr	r3, [r3, #12]
 812589e:	4a14      	ldr	r2, [pc, #80]	@ (81258f0 <udp_remove+0x80>)
 81258a0:	6013      	str	r3, [r2, #0]
 81258a2:	e017      	b.n	81258d4 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 81258a4:	4b12      	ldr	r3, [pc, #72]	@ (81258f0 <udp_remove+0x80>)
 81258a6:	681b      	ldr	r3, [r3, #0]
 81258a8:	60fb      	str	r3, [r7, #12]
 81258aa:	e010      	b.n	81258ce <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 81258ac:	68fb      	ldr	r3, [r7, #12]
 81258ae:	68db      	ldr	r3, [r3, #12]
 81258b0:	2b00      	cmp	r3, #0
 81258b2:	d009      	beq.n	81258c8 <udp_remove+0x58>
 81258b4:	68fb      	ldr	r3, [r7, #12]
 81258b6:	68db      	ldr	r3, [r3, #12]
 81258b8:	687a      	ldr	r2, [r7, #4]
 81258ba:	429a      	cmp	r2, r3
 81258bc:	d104      	bne.n	81258c8 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 81258be:	687b      	ldr	r3, [r7, #4]
 81258c0:	68da      	ldr	r2, [r3, #12]
 81258c2:	68fb      	ldr	r3, [r7, #12]
 81258c4:	60da      	str	r2, [r3, #12]
        break;
 81258c6:	e005      	b.n	81258d4 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 81258c8:	68fb      	ldr	r3, [r7, #12]
 81258ca:	68db      	ldr	r3, [r3, #12]
 81258cc:	60fb      	str	r3, [r7, #12]
 81258ce:	68fb      	ldr	r3, [r7, #12]
 81258d0:	2b00      	cmp	r3, #0
 81258d2:	d1eb      	bne.n	81258ac <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 81258d4:	6879      	ldr	r1, [r7, #4]
 81258d6:	2000      	movs	r0, #0
 81258d8:	f7f7 fe7e 	bl	811d5d8 <memp_free>
}
 81258dc:	3710      	adds	r7, #16
 81258de:	46bd      	mov	sp, r7
 81258e0:	bd80      	pop	{r7, pc}
 81258e2:	bf00      	nop
 81258e4:	0812a9a8 	.word	0x0812a9a8
 81258e8:	0812ad38 	.word	0x0812ad38
 81258ec:	0812aa40 	.word	0x0812aa40
 81258f0:	1000e578 	.word	0x1000e578

081258f4 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 81258f4:	b580      	push	{r7, lr}
 81258f6:	b082      	sub	sp, #8
 81258f8:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 81258fa:	2000      	movs	r0, #0
 81258fc:	f7f7 fdf6 	bl	811d4ec <memp_malloc>
 8125900:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8125902:	687b      	ldr	r3, [r7, #4]
 8125904:	2b00      	cmp	r3, #0
 8125906:	d007      	beq.n	8125918 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8125908:	2220      	movs	r2, #32
 812590a:	2100      	movs	r1, #0
 812590c:	6878      	ldr	r0, [r7, #4]
 812590e:	f001 f9c5 	bl	8126c9c <memset>
    pcb->ttl = UDP_TTL;
 8125912:	687b      	ldr	r3, [r7, #4]
 8125914:	22ff      	movs	r2, #255	@ 0xff
 8125916:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8125918:	687b      	ldr	r3, [r7, #4]
}
 812591a:	4618      	mov	r0, r3
 812591c:	3708      	adds	r7, #8
 812591e:	46bd      	mov	sp, r7
 8125920:	bd80      	pop	{r7, pc}
	...

08125924 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8125924:	b480      	push	{r7}
 8125926:	b085      	sub	sp, #20
 8125928:	af00      	add	r7, sp, #0
 812592a:	6078      	str	r0, [r7, #4]
 812592c:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 812592e:	687b      	ldr	r3, [r7, #4]
 8125930:	2b00      	cmp	r3, #0
 8125932:	d01e      	beq.n	8125972 <udp_netif_ip_addr_changed+0x4e>
 8125934:	687b      	ldr	r3, [r7, #4]
 8125936:	681b      	ldr	r3, [r3, #0]
 8125938:	2b00      	cmp	r3, #0
 812593a:	d01a      	beq.n	8125972 <udp_netif_ip_addr_changed+0x4e>
 812593c:	683b      	ldr	r3, [r7, #0]
 812593e:	2b00      	cmp	r3, #0
 8125940:	d017      	beq.n	8125972 <udp_netif_ip_addr_changed+0x4e>
 8125942:	683b      	ldr	r3, [r7, #0]
 8125944:	681b      	ldr	r3, [r3, #0]
 8125946:	2b00      	cmp	r3, #0
 8125948:	d013      	beq.n	8125972 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 812594a:	4b0d      	ldr	r3, [pc, #52]	@ (8125980 <udp_netif_ip_addr_changed+0x5c>)
 812594c:	681b      	ldr	r3, [r3, #0]
 812594e:	60fb      	str	r3, [r7, #12]
 8125950:	e00c      	b.n	812596c <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8125952:	68fb      	ldr	r3, [r7, #12]
 8125954:	681a      	ldr	r2, [r3, #0]
 8125956:	687b      	ldr	r3, [r7, #4]
 8125958:	681b      	ldr	r3, [r3, #0]
 812595a:	429a      	cmp	r2, r3
 812595c:	d103      	bne.n	8125966 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 812595e:	683b      	ldr	r3, [r7, #0]
 8125960:	681a      	ldr	r2, [r3, #0]
 8125962:	68fb      	ldr	r3, [r7, #12]
 8125964:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8125966:	68fb      	ldr	r3, [r7, #12]
 8125968:	68db      	ldr	r3, [r3, #12]
 812596a:	60fb      	str	r3, [r7, #12]
 812596c:	68fb      	ldr	r3, [r7, #12]
 812596e:	2b00      	cmp	r3, #0
 8125970:	d1ef      	bne.n	8125952 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8125972:	bf00      	nop
 8125974:	3714      	adds	r7, #20
 8125976:	46bd      	mov	sp, r7
 8125978:	f85d 7b04 	ldr.w	r7, [sp], #4
 812597c:	4770      	bx	lr
 812597e:	bf00      	nop
 8125980:	1000e578 	.word	0x1000e578

08125984 <_ZdlPv>:
 8125984:	f000 ba48 	b.w	8125e18 <free>

08125988 <_ZdlPvj>:
 8125988:	f7ff bffc 	b.w	8125984 <_ZdlPv>

0812598c <__cxa_guard_acquire>:
 812598c:	6802      	ldr	r2, [r0, #0]
 812598e:	07d2      	lsls	r2, r2, #31
 8125990:	4603      	mov	r3, r0
 8125992:	d405      	bmi.n	81259a0 <__cxa_guard_acquire+0x14>
 8125994:	7842      	ldrb	r2, [r0, #1]
 8125996:	b102      	cbz	r2, 812599a <__cxa_guard_acquire+0xe>
 8125998:	deff      	udf	#255	@ 0xff
 812599a:	2001      	movs	r0, #1
 812599c:	7058      	strb	r0, [r3, #1]
 812599e:	4770      	bx	lr
 81259a0:	2000      	movs	r0, #0
 81259a2:	4770      	bx	lr

081259a4 <__cxa_guard_release>:
 81259a4:	2301      	movs	r3, #1
 81259a6:	6003      	str	r3, [r0, #0]
 81259a8:	4770      	bx	lr

081259aa <_Znwj>:
 81259aa:	2801      	cmp	r0, #1
 81259ac:	bf38      	it	cc
 81259ae:	2001      	movcc	r0, #1
 81259b0:	b510      	push	{r4, lr}
 81259b2:	4604      	mov	r4, r0
 81259b4:	4620      	mov	r0, r4
 81259b6:	f000 fa27 	bl	8125e08 <malloc>
 81259ba:	b100      	cbz	r0, 81259be <_Znwj+0x14>
 81259bc:	bd10      	pop	{r4, pc}
 81259be:	f000 f971 	bl	8125ca4 <_ZSt15get_new_handlerv>
 81259c2:	b908      	cbnz	r0, 81259c8 <_Znwj+0x1e>
 81259c4:	f000 fa18 	bl	8125df8 <abort>
 81259c8:	4780      	blx	r0
 81259ca:	e7f3      	b.n	81259b4 <_Znwj+0xa>

081259cc <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>:
 81259cc:	68c3      	ldr	r3, [r0, #12]
 81259ce:	689a      	ldr	r2, [r3, #8]
 81259d0:	60c2      	str	r2, [r0, #12]
 81259d2:	b510      	push	{r4, lr}
 81259d4:	b102      	cbz	r2, 81259d8 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0xc>
 81259d6:	6050      	str	r0, [r2, #4]
 81259d8:	6842      	ldr	r2, [r0, #4]
 81259da:	605a      	str	r2, [r3, #4]
 81259dc:	680c      	ldr	r4, [r1, #0]
 81259de:	4284      	cmp	r4, r0
 81259e0:	d103      	bne.n	81259ea <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0x1e>
 81259e2:	600b      	str	r3, [r1, #0]
 81259e4:	6098      	str	r0, [r3, #8]
 81259e6:	6043      	str	r3, [r0, #4]
 81259e8:	bd10      	pop	{r4, pc}
 81259ea:	6891      	ldr	r1, [r2, #8]
 81259ec:	4281      	cmp	r1, r0
 81259ee:	bf0c      	ite	eq
 81259f0:	6093      	streq	r3, [r2, #8]
 81259f2:	60d3      	strne	r3, [r2, #12]
 81259f4:	e7f6      	b.n	81259e4 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0x18>

081259f6 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>:
 81259f6:	6883      	ldr	r3, [r0, #8]
 81259f8:	68da      	ldr	r2, [r3, #12]
 81259fa:	6082      	str	r2, [r0, #8]
 81259fc:	b510      	push	{r4, lr}
 81259fe:	b102      	cbz	r2, 8125a02 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0xc>
 8125a00:	6050      	str	r0, [r2, #4]
 8125a02:	6842      	ldr	r2, [r0, #4]
 8125a04:	605a      	str	r2, [r3, #4]
 8125a06:	680c      	ldr	r4, [r1, #0]
 8125a08:	4284      	cmp	r4, r0
 8125a0a:	d103      	bne.n	8125a14 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0x1e>
 8125a0c:	600b      	str	r3, [r1, #0]
 8125a0e:	60d8      	str	r0, [r3, #12]
 8125a10:	6043      	str	r3, [r0, #4]
 8125a12:	bd10      	pop	{r4, pc}
 8125a14:	68d1      	ldr	r1, [r2, #12]
 8125a16:	4281      	cmp	r1, r0
 8125a18:	bf0c      	ite	eq
 8125a1a:	60d3      	streq	r3, [r2, #12]
 8125a1c:	6093      	strne	r3, [r2, #8]
 8125a1e:	e7f6      	b.n	8125a0e <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0x18>

08125a20 <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base>:
 8125a20:	68c3      	ldr	r3, [r0, #12]
 8125a22:	b123      	cbz	r3, 8125a2e <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base+0xe>
 8125a24:	4618      	mov	r0, r3
 8125a26:	689b      	ldr	r3, [r3, #8]
 8125a28:	2b00      	cmp	r3, #0
 8125a2a:	d1fb      	bne.n	8125a24 <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base+0x4>
 8125a2c:	4770      	bx	lr
 8125a2e:	6843      	ldr	r3, [r0, #4]
 8125a30:	68da      	ldr	r2, [r3, #12]
 8125a32:	4282      	cmp	r2, r0
 8125a34:	d004      	beq.n	8125a40 <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base+0x20>
 8125a36:	68c2      	ldr	r2, [r0, #12]
 8125a38:	4293      	cmp	r3, r2
 8125a3a:	bf18      	it	ne
 8125a3c:	4618      	movne	r0, r3
 8125a3e:	4770      	bx	lr
 8125a40:	4618      	mov	r0, r3
 8125a42:	685b      	ldr	r3, [r3, #4]
 8125a44:	e7f4      	b.n	8125a30 <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base+0x10>

08125a46 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base>:
 8125a46:	7802      	ldrb	r2, [r0, #0]
 8125a48:	4603      	mov	r3, r0
 8125a4a:	b92a      	cbnz	r2, 8125a58 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x12>
 8125a4c:	6842      	ldr	r2, [r0, #4]
 8125a4e:	6852      	ldr	r2, [r2, #4]
 8125a50:	4282      	cmp	r2, r0
 8125a52:	d101      	bne.n	8125a58 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x12>
 8125a54:	68d0      	ldr	r0, [r2, #12]
 8125a56:	4770      	bx	lr
 8125a58:	689a      	ldr	r2, [r3, #8]
 8125a5a:	b122      	cbz	r2, 8125a66 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x20>
 8125a5c:	4610      	mov	r0, r2
 8125a5e:	68d2      	ldr	r2, [r2, #12]
 8125a60:	2a00      	cmp	r2, #0
 8125a62:	d1fb      	bne.n	8125a5c <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x16>
 8125a64:	4770      	bx	lr
 8125a66:	6858      	ldr	r0, [r3, #4]
 8125a68:	6882      	ldr	r2, [r0, #8]
 8125a6a:	429a      	cmp	r2, r3
 8125a6c:	d000      	beq.n	8125a70 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x2a>
 8125a6e:	4770      	bx	lr
 8125a70:	4603      	mov	r3, r0
 8125a72:	6840      	ldr	r0, [r0, #4]
 8125a74:	e7f8      	b.n	8125a68 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x22>

08125a76 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>:
 8125a76:	f7ff bfd3 	b.w	8125a20 <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base>

08125a7a <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>:
 8125a7a:	f7ff bfe4 	b.w	8125a46 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base>

08125a7e <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>:
 8125a7e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8125a82:	461d      	mov	r5, r3
 8125a84:	1d1f      	adds	r7, r3, #4
 8125a86:	2300      	movs	r3, #0
 8125a88:	e9c1 3302 	strd	r3, r3, [r1, #8]
 8125a8c:	460c      	mov	r4, r1
 8125a8e:	604a      	str	r2, [r1, #4]
 8125a90:	700b      	strb	r3, [r1, #0]
 8125a92:	b1a0      	cbz	r0, 8125abe <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x40>
 8125a94:	4295      	cmp	r5, r2
 8125a96:	6091      	str	r1, [r2, #8]
 8125a98:	d102      	bne.n	8125aa0 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x22>
 8125a9a:	6069      	str	r1, [r5, #4]
 8125a9c:	60ec      	str	r4, [r5, #12]
 8125a9e:	e003      	b.n	8125aa8 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x2a>
 8125aa0:	68ab      	ldr	r3, [r5, #8]
 8125aa2:	4293      	cmp	r3, r2
 8125aa4:	bf08      	it	eq
 8125aa6:	60a9      	streq	r1, [r5, #8]
 8125aa8:	f04f 0900 	mov.w	r9, #0
 8125aac:	f04f 0801 	mov.w	r8, #1
 8125ab0:	686b      	ldr	r3, [r5, #4]
 8125ab2:	42a3      	cmp	r3, r4
 8125ab4:	d132      	bne.n	8125b1c <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x9e>
 8125ab6:	2201      	movs	r2, #1
 8125ab8:	701a      	strb	r2, [r3, #0]
 8125aba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8125abe:	60d1      	str	r1, [r2, #12]
 8125ac0:	68eb      	ldr	r3, [r5, #12]
 8125ac2:	4293      	cmp	r3, r2
 8125ac4:	d1f0      	bne.n	8125aa8 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x2a>
 8125ac6:	e7e9      	b.n	8125a9c <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x1e>
 8125ac8:	68c3      	ldr	r3, [r0, #12]
 8125aca:	42a3      	cmp	r3, r4
 8125acc:	d103      	bne.n	8125ad6 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x58>
 8125ace:	4639      	mov	r1, r7
 8125ad0:	f7ff ff7c 	bl	81259cc <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
 8125ad4:	4604      	mov	r4, r0
 8125ad6:	6863      	ldr	r3, [r4, #4]
 8125ad8:	4639      	mov	r1, r7
 8125ada:	f883 8000 	strb.w	r8, [r3]
 8125ade:	4630      	mov	r0, r6
 8125ae0:	f886 9000 	strb.w	r9, [r6]
 8125ae4:	f7ff ff87 	bl	81259f6 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
 8125ae8:	e7e2      	b.n	8125ab0 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x32>
 8125aea:	b133      	cbz	r3, 8125afa <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x7c>
 8125aec:	781a      	ldrb	r2, [r3, #0]
 8125aee:	b922      	cbnz	r2, 8125afa <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x7c>
 8125af0:	f880 8000 	strb.w	r8, [r0]
 8125af4:	f883 8000 	strb.w	r8, [r3]
 8125af8:	e021      	b.n	8125b3e <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0xc0>
 8125afa:	6883      	ldr	r3, [r0, #8]
 8125afc:	42a3      	cmp	r3, r4
 8125afe:	d103      	bne.n	8125b08 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x8a>
 8125b00:	4639      	mov	r1, r7
 8125b02:	f7ff ff78 	bl	81259f6 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
 8125b06:	4604      	mov	r4, r0
 8125b08:	6863      	ldr	r3, [r4, #4]
 8125b0a:	4639      	mov	r1, r7
 8125b0c:	f883 8000 	strb.w	r8, [r3]
 8125b10:	4630      	mov	r0, r6
 8125b12:	f886 9000 	strb.w	r9, [r6]
 8125b16:	f7ff ff59 	bl	81259cc <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
 8125b1a:	e7c9      	b.n	8125ab0 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x32>
 8125b1c:	6860      	ldr	r0, [r4, #4]
 8125b1e:	7802      	ldrb	r2, [r0, #0]
 8125b20:	2a00      	cmp	r2, #0
 8125b22:	d1c8      	bne.n	8125ab6 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x38>
 8125b24:	6846      	ldr	r6, [r0, #4]
 8125b26:	68b3      	ldr	r3, [r6, #8]
 8125b28:	4283      	cmp	r3, r0
 8125b2a:	d1de      	bne.n	8125aea <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x6c>
 8125b2c:	68f2      	ldr	r2, [r6, #12]
 8125b2e:	2a00      	cmp	r2, #0
 8125b30:	d0ca      	beq.n	8125ac8 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x4a>
 8125b32:	7811      	ldrb	r1, [r2, #0]
 8125b34:	2900      	cmp	r1, #0
 8125b36:	d1c7      	bne.n	8125ac8 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x4a>
 8125b38:	2101      	movs	r1, #1
 8125b3a:	7019      	strb	r1, [r3, #0]
 8125b3c:	7011      	strb	r1, [r2, #0]
 8125b3e:	f886 9000 	strb.w	r9, [r6]
 8125b42:	4634      	mov	r4, r6
 8125b44:	e7b4      	b.n	8125ab0 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x32>

08125b46 <_ZSt17__throw_bad_allocv>:
 8125b46:	b508      	push	{r3, lr}
 8125b48:	f000 f956 	bl	8125df8 <abort>

08125b4c <_ZSt28__throw_bad_array_new_lengthv>:
 8125b4c:	b508      	push	{r3, lr}
 8125b4e:	f000 f953 	bl	8125df8 <abort>

08125b52 <_ZSt20__throw_length_errorPKc>:
 8125b52:	b508      	push	{r3, lr}
 8125b54:	f000 f950 	bl	8125df8 <abort>

08125b58 <_ZSt20__throw_out_of_rangePKc>:
 8125b58:	b508      	push	{r3, lr}
 8125b5a:	f000 f94d 	bl	8125df8 <abort>

08125b5e <_ZSt25__throw_bad_function_callv>:
 8125b5e:	b508      	push	{r3, lr}
 8125b60:	f000 f94a 	bl	8125df8 <abort>

08125b64 <_ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEj>:
 8125b64:	290d      	cmp	r1, #13
 8125b66:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8125b68:	4605      	mov	r5, r0
 8125b6a:	d82f      	bhi.n	8125bcc <_ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEj+0x68>
 8125b6c:	b3b1      	cbz	r1, 8125bdc <_ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEj+0x78>
 8125b6e:	4b1c      	ldr	r3, [pc, #112]	@ (8125be0 <_ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEj+0x7c>)
 8125b70:	5c5c      	ldrb	r4, [r3, r1]
 8125b72:	4620      	mov	r0, r4
 8125b74:	f7da fd56 	bl	8100624 <__aeabi_i2d>
 8125b78:	4606      	mov	r6, r0
 8125b7a:	6828      	ldr	r0, [r5, #0]
 8125b7c:	460f      	mov	r7, r1
 8125b7e:	f7da fd63 	bl	8100648 <__aeabi_f2d>
 8125b82:	4602      	mov	r2, r0
 8125b84:	460b      	mov	r3, r1
 8125b86:	4630      	mov	r0, r6
 8125b88:	4639      	mov	r1, r7
 8125b8a:	f7da fdb5 	bl	81006f8 <__aeabi_dmul>
 8125b8e:	ec41 0b10 	vmov	d0, r0, r1
 8125b92:	f000 f891 	bl	8125cb8 <floor>
 8125b96:	ec51 0b10 	vmov	r0, r1, d0
 8125b9a:	f7db f847 	bl	8100c2c <__aeabi_d2uiz>
 8125b9e:	6068      	str	r0, [r5, #4]
 8125ba0:	4620      	mov	r0, r4
 8125ba2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8125ba4:	1058      	asrs	r0, r3, #1
 8125ba6:	eb02 0480 	add.w	r4, r2, r0, lsl #2
 8125baa:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 8125bae:	428e      	cmp	r6, r1
 8125bb0:	d20f      	bcs.n	8125bd2 <_ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEj+0x6e>
 8125bb2:	1a1b      	subs	r3, r3, r0
 8125bb4:	1d22      	adds	r2, r4, #4
 8125bb6:	3b01      	subs	r3, #1
 8125bb8:	2b00      	cmp	r3, #0
 8125bba:	dcf3      	bgt.n	8125ba4 <_ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEj+0x40>
 8125bbc:	4b09      	ldr	r3, [pc, #36]	@ (8125be4 <_ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEj+0x80>)
 8125bbe:	6814      	ldr	r4, [r2, #0]
 8125bc0:	429a      	cmp	r2, r3
 8125bc2:	d008      	beq.n	8125bd6 <_ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEj+0x72>
 8125bc4:	4620      	mov	r0, r4
 8125bc6:	f7da fd1d 	bl	8100604 <__aeabi_ui2d>
 8125bca:	e7d5      	b.n	8125b78 <_ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEj+0x14>
 8125bcc:	4a06      	ldr	r2, [pc, #24]	@ (8125be8 <_ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEj+0x84>)
 8125bce:	23f9      	movs	r3, #249	@ 0xf9
 8125bd0:	e7f2      	b.n	8125bb8 <_ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEj+0x54>
 8125bd2:	4603      	mov	r3, r0
 8125bd4:	e7f0      	b.n	8125bb8 <_ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEj+0x54>
 8125bd6:	f04f 30ff 	mov.w	r0, #4294967295
 8125bda:	e7e0      	b.n	8125b9e <_ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEj+0x3a>
 8125bdc:	2401      	movs	r4, #1
 8125bde:	e7df      	b.n	8125ba0 <_ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEj+0x3c>
 8125be0:	0812af60 	.word	0x0812af60
 8125be4:	0812b36c 	.word	0x0812b36c
 8125be8:	0812af88 	.word	0x0812af88

08125bec <_ZNKSt8__detail20_Prime_rehash_policy14_M_need_rehashEjjj>:
 8125bec:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8125bf0:	4692      	mov	sl, r2
 8125bf2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8125bf4:	eb03 0802 	add.w	r8, r3, r2
 8125bf8:	684b      	ldr	r3, [r1, #4]
 8125bfa:	4598      	cmp	r8, r3
 8125bfc:	4604      	mov	r4, r0
 8125bfe:	460d      	mov	r5, r1
 8125c00:	d94a      	bls.n	8125c98 <_ZNKSt8__detail20_Prime_rehash_policy14_M_need_rehashEjjj+0xac>
 8125c02:	2b00      	cmp	r3, #0
 8125c04:	6808      	ldr	r0, [r1, #0]
 8125c06:	bf0c      	ite	eq
 8125c08:	f04f 090b 	moveq.w	r9, #11
 8125c0c:	f04f 0900 	movne.w	r9, #0
 8125c10:	f7da fd1a 	bl	8100648 <__aeabi_f2d>
 8125c14:	45c8      	cmp	r8, r9
 8125c16:	4606      	mov	r6, r0
 8125c18:	460f      	mov	r7, r1
 8125c1a:	4640      	mov	r0, r8
 8125c1c:	bf38      	it	cc
 8125c1e:	4648      	movcc	r0, r9
 8125c20:	f7da fcf0 	bl	8100604 <__aeabi_ui2d>
 8125c24:	4632      	mov	r2, r6
 8125c26:	463b      	mov	r3, r7
 8125c28:	f7da fe90 	bl	810094c <__aeabi_ddiv>
 8125c2c:	e9cd 0100 	strd	r0, r1, [sp]
 8125c30:	4650      	mov	r0, sl
 8125c32:	f7da fce7 	bl	8100604 <__aeabi_ui2d>
 8125c36:	e9dd 2300 	ldrd	r2, r3, [sp]
 8125c3a:	4680      	mov	r8, r0
 8125c3c:	4689      	mov	r9, r1
 8125c3e:	f7da ffd7 	bl	8100bf0 <__aeabi_dcmple>
 8125c42:	b1d0      	cbz	r0, 8125c7a <_ZNKSt8__detail20_Prime_rehash_policy14_M_need_rehashEjjj+0x8e>
 8125c44:	ed9d 0b00 	vldr	d0, [sp]
 8125c48:	f000 f836 	bl	8125cb8 <floor>
 8125c4c:	4b14      	ldr	r3, [pc, #80]	@ (8125ca0 <_ZNKSt8__detail20_Prime_rehash_policy14_M_need_rehashEjjj+0xb4>)
 8125c4e:	ec51 0b10 	vmov	r0, r1, d0
 8125c52:	2200      	movs	r2, #0
 8125c54:	f7da fb9a 	bl	810038c <__adddf3>
 8125c58:	f7da ffe8 	bl	8100c2c <__aeabi_d2uiz>
 8125c5c:	ea4f 014a 	mov.w	r1, sl, lsl #1
 8125c60:	4281      	cmp	r1, r0
 8125c62:	bf38      	it	cc
 8125c64:	4601      	movcc	r1, r0
 8125c66:	4628      	mov	r0, r5
 8125c68:	f7ff ff7c 	bl	8125b64 <_ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEj>
 8125c6c:	2301      	movs	r3, #1
 8125c6e:	7023      	strb	r3, [r4, #0]
 8125c70:	6060      	str	r0, [r4, #4]
 8125c72:	4620      	mov	r0, r4
 8125c74:	b002      	add	sp, #8
 8125c76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8125c7a:	4642      	mov	r2, r8
 8125c7c:	464b      	mov	r3, r9
 8125c7e:	4630      	mov	r0, r6
 8125c80:	4639      	mov	r1, r7
 8125c82:	f7da fd39 	bl	81006f8 <__aeabi_dmul>
 8125c86:	ec41 0b10 	vmov	d0, r0, r1
 8125c8a:	f000 f815 	bl	8125cb8 <floor>
 8125c8e:	ec51 0b10 	vmov	r0, r1, d0
 8125c92:	f7da ffcb 	bl	8100c2c <__aeabi_d2uiz>
 8125c96:	6068      	str	r0, [r5, #4]
 8125c98:	2300      	movs	r3, #0
 8125c9a:	e9c4 3300 	strd	r3, r3, [r4]
 8125c9e:	e7e8      	b.n	8125c72 <_ZNKSt8__detail20_Prime_rehash_policy14_M_need_rehashEjjj+0x86>
 8125ca0:	3ff00000 	.word	0x3ff00000

08125ca4 <_ZSt15get_new_handlerv>:
 8125ca4:	4b02      	ldr	r3, [pc, #8]	@ (8125cb0 <_ZSt15get_new_handlerv+0xc>)
 8125ca6:	6818      	ldr	r0, [r3, #0]
 8125ca8:	f3bf 8f5b 	dmb	ish
 8125cac:	4770      	bx	lr
 8125cae:	bf00      	nop
 8125cb0:	1000e57c 	.word	0x1000e57c
 8125cb4:	00000000 	.word	0x00000000

08125cb8 <floor>:
 8125cb8:	ec51 0b10 	vmov	r0, r1, d0
 8125cbc:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8125cc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8125cc4:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 8125cc8:	2e13      	cmp	r6, #19
 8125cca:	460c      	mov	r4, r1
 8125ccc:	4605      	mov	r5, r0
 8125cce:	4680      	mov	r8, r0
 8125cd0:	dc34      	bgt.n	8125d3c <floor+0x84>
 8125cd2:	2e00      	cmp	r6, #0
 8125cd4:	da17      	bge.n	8125d06 <floor+0x4e>
 8125cd6:	a332      	add	r3, pc, #200	@ (adr r3, 8125da0 <floor+0xe8>)
 8125cd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8125cdc:	f7da fb56 	bl	810038c <__adddf3>
 8125ce0:	2200      	movs	r2, #0
 8125ce2:	2300      	movs	r3, #0
 8125ce4:	f7da ff98 	bl	8100c18 <__aeabi_dcmpgt>
 8125ce8:	b150      	cbz	r0, 8125d00 <floor+0x48>
 8125cea:	2c00      	cmp	r4, #0
 8125cec:	da55      	bge.n	8125d9a <floor+0xe2>
 8125cee:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 8125cf2:	432c      	orrs	r4, r5
 8125cf4:	2500      	movs	r5, #0
 8125cf6:	42ac      	cmp	r4, r5
 8125cf8:	4c2b      	ldr	r4, [pc, #172]	@ (8125da8 <floor+0xf0>)
 8125cfa:	bf08      	it	eq
 8125cfc:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8125d00:	4621      	mov	r1, r4
 8125d02:	4628      	mov	r0, r5
 8125d04:	e023      	b.n	8125d4e <floor+0x96>
 8125d06:	4f29      	ldr	r7, [pc, #164]	@ (8125dac <floor+0xf4>)
 8125d08:	4137      	asrs	r7, r6
 8125d0a:	ea01 0307 	and.w	r3, r1, r7
 8125d0e:	4303      	orrs	r3, r0
 8125d10:	d01d      	beq.n	8125d4e <floor+0x96>
 8125d12:	a323      	add	r3, pc, #140	@ (adr r3, 8125da0 <floor+0xe8>)
 8125d14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8125d18:	f7da fb38 	bl	810038c <__adddf3>
 8125d1c:	2200      	movs	r2, #0
 8125d1e:	2300      	movs	r3, #0
 8125d20:	f7da ff7a 	bl	8100c18 <__aeabi_dcmpgt>
 8125d24:	2800      	cmp	r0, #0
 8125d26:	d0eb      	beq.n	8125d00 <floor+0x48>
 8125d28:	2c00      	cmp	r4, #0
 8125d2a:	bfbe      	ittt	lt
 8125d2c:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 8125d30:	4133      	asrlt	r3, r6
 8125d32:	18e4      	addlt	r4, r4, r3
 8125d34:	ea24 0407 	bic.w	r4, r4, r7
 8125d38:	2500      	movs	r5, #0
 8125d3a:	e7e1      	b.n	8125d00 <floor+0x48>
 8125d3c:	2e33      	cmp	r6, #51	@ 0x33
 8125d3e:	dd0a      	ble.n	8125d56 <floor+0x9e>
 8125d40:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8125d44:	d103      	bne.n	8125d4e <floor+0x96>
 8125d46:	4602      	mov	r2, r0
 8125d48:	460b      	mov	r3, r1
 8125d4a:	f7da fb1f 	bl	810038c <__adddf3>
 8125d4e:	ec41 0b10 	vmov	d0, r0, r1
 8125d52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8125d56:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 8125d5a:	f04f 37ff 	mov.w	r7, #4294967295
 8125d5e:	40df      	lsrs	r7, r3
 8125d60:	4207      	tst	r7, r0
 8125d62:	d0f4      	beq.n	8125d4e <floor+0x96>
 8125d64:	a30e      	add	r3, pc, #56	@ (adr r3, 8125da0 <floor+0xe8>)
 8125d66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8125d6a:	f7da fb0f 	bl	810038c <__adddf3>
 8125d6e:	2200      	movs	r2, #0
 8125d70:	2300      	movs	r3, #0
 8125d72:	f7da ff51 	bl	8100c18 <__aeabi_dcmpgt>
 8125d76:	2800      	cmp	r0, #0
 8125d78:	d0c2      	beq.n	8125d00 <floor+0x48>
 8125d7a:	2c00      	cmp	r4, #0
 8125d7c:	da0a      	bge.n	8125d94 <floor+0xdc>
 8125d7e:	2e14      	cmp	r6, #20
 8125d80:	d101      	bne.n	8125d86 <floor+0xce>
 8125d82:	3401      	adds	r4, #1
 8125d84:	e006      	b.n	8125d94 <floor+0xdc>
 8125d86:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 8125d8a:	2301      	movs	r3, #1
 8125d8c:	40b3      	lsls	r3, r6
 8125d8e:	441d      	add	r5, r3
 8125d90:	4545      	cmp	r5, r8
 8125d92:	d3f6      	bcc.n	8125d82 <floor+0xca>
 8125d94:	ea25 0507 	bic.w	r5, r5, r7
 8125d98:	e7b2      	b.n	8125d00 <floor+0x48>
 8125d9a:	2500      	movs	r5, #0
 8125d9c:	462c      	mov	r4, r5
 8125d9e:	e7af      	b.n	8125d00 <floor+0x48>
 8125da0:	8800759c 	.word	0x8800759c
 8125da4:	7e37e43c 	.word	0x7e37e43c
 8125da8:	bff00000 	.word	0xbff00000
 8125dac:	000fffff 	.word	0x000fffff

08125db0 <roundf>:
 8125db0:	ee10 0a10 	vmov	r0, s0
 8125db4:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 8125db8:	3a7f      	subs	r2, #127	@ 0x7f
 8125dba:	2a16      	cmp	r2, #22
 8125dbc:	dc15      	bgt.n	8125dea <roundf+0x3a>
 8125dbe:	2a00      	cmp	r2, #0
 8125dc0:	da08      	bge.n	8125dd4 <roundf+0x24>
 8125dc2:	3201      	adds	r2, #1
 8125dc4:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8125dc8:	d101      	bne.n	8125dce <roundf+0x1e>
 8125dca:	f043 537e 	orr.w	r3, r3, #1065353216	@ 0x3f800000
 8125dce:	ee00 3a10 	vmov	s0, r3
 8125dd2:	4770      	bx	lr
 8125dd4:	4907      	ldr	r1, [pc, #28]	@ (8125df4 <roundf+0x44>)
 8125dd6:	4111      	asrs	r1, r2
 8125dd8:	4201      	tst	r1, r0
 8125dda:	d0fa      	beq.n	8125dd2 <roundf+0x22>
 8125ddc:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8125de0:	4113      	asrs	r3, r2
 8125de2:	4403      	add	r3, r0
 8125de4:	ea23 0301 	bic.w	r3, r3, r1
 8125de8:	e7f1      	b.n	8125dce <roundf+0x1e>
 8125dea:	2a80      	cmp	r2, #128	@ 0x80
 8125dec:	d1f1      	bne.n	8125dd2 <roundf+0x22>
 8125dee:	ee30 0a00 	vadd.f32	s0, s0, s0
 8125df2:	4770      	bx	lr
 8125df4:	007fffff 	.word	0x007fffff

08125df8 <abort>:
 8125df8:	b508      	push	{r3, lr}
 8125dfa:	2006      	movs	r0, #6
 8125dfc:	f000 ffa8 	bl	8126d50 <raise>
 8125e00:	2001      	movs	r0, #1
 8125e02:	f7de fe47 	bl	8104a94 <_exit>
	...

08125e08 <malloc>:
 8125e08:	4b02      	ldr	r3, [pc, #8]	@ (8125e14 <malloc+0xc>)
 8125e0a:	4601      	mov	r1, r0
 8125e0c:	6818      	ldr	r0, [r3, #0]
 8125e0e:	f000 b82d 	b.w	8125e6c <_malloc_r>
 8125e12:	bf00      	nop
 8125e14:	10000040 	.word	0x10000040

08125e18 <free>:
 8125e18:	4b02      	ldr	r3, [pc, #8]	@ (8125e24 <free+0xc>)
 8125e1a:	4601      	mov	r1, r0
 8125e1c:	6818      	ldr	r0, [r3, #0]
 8125e1e:	f001 b8b9 	b.w	8126f94 <_free_r>
 8125e22:	bf00      	nop
 8125e24:	10000040 	.word	0x10000040

08125e28 <sbrk_aligned>:
 8125e28:	b570      	push	{r4, r5, r6, lr}
 8125e2a:	4e0f      	ldr	r6, [pc, #60]	@ (8125e68 <sbrk_aligned+0x40>)
 8125e2c:	460c      	mov	r4, r1
 8125e2e:	6831      	ldr	r1, [r6, #0]
 8125e30:	4605      	mov	r5, r0
 8125e32:	b911      	cbnz	r1, 8125e3a <sbrk_aligned+0x12>
 8125e34:	f001 f832 	bl	8126e9c <_sbrk_r>
 8125e38:	6030      	str	r0, [r6, #0]
 8125e3a:	4621      	mov	r1, r4
 8125e3c:	4628      	mov	r0, r5
 8125e3e:	f001 f82d 	bl	8126e9c <_sbrk_r>
 8125e42:	1c43      	adds	r3, r0, #1
 8125e44:	d103      	bne.n	8125e4e <sbrk_aligned+0x26>
 8125e46:	f04f 34ff 	mov.w	r4, #4294967295
 8125e4a:	4620      	mov	r0, r4
 8125e4c:	bd70      	pop	{r4, r5, r6, pc}
 8125e4e:	1cc4      	adds	r4, r0, #3
 8125e50:	f024 0403 	bic.w	r4, r4, #3
 8125e54:	42a0      	cmp	r0, r4
 8125e56:	d0f8      	beq.n	8125e4a <sbrk_aligned+0x22>
 8125e58:	1a21      	subs	r1, r4, r0
 8125e5a:	4628      	mov	r0, r5
 8125e5c:	f001 f81e 	bl	8126e9c <_sbrk_r>
 8125e60:	3001      	adds	r0, #1
 8125e62:	d1f2      	bne.n	8125e4a <sbrk_aligned+0x22>
 8125e64:	e7ef      	b.n	8125e46 <sbrk_aligned+0x1e>
 8125e66:	bf00      	nop
 8125e68:	1000e580 	.word	0x1000e580

08125e6c <_malloc_r>:
 8125e6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8125e70:	1ccd      	adds	r5, r1, #3
 8125e72:	f025 0503 	bic.w	r5, r5, #3
 8125e76:	3508      	adds	r5, #8
 8125e78:	2d0c      	cmp	r5, #12
 8125e7a:	bf38      	it	cc
 8125e7c:	250c      	movcc	r5, #12
 8125e7e:	2d00      	cmp	r5, #0
 8125e80:	4606      	mov	r6, r0
 8125e82:	db01      	blt.n	8125e88 <_malloc_r+0x1c>
 8125e84:	42a9      	cmp	r1, r5
 8125e86:	d904      	bls.n	8125e92 <_malloc_r+0x26>
 8125e88:	230c      	movs	r3, #12
 8125e8a:	6033      	str	r3, [r6, #0]
 8125e8c:	2000      	movs	r0, #0
 8125e8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8125e92:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8125f68 <_malloc_r+0xfc>
 8125e96:	f000 f869 	bl	8125f6c <__malloc_lock>
 8125e9a:	f8d8 3000 	ldr.w	r3, [r8]
 8125e9e:	461c      	mov	r4, r3
 8125ea0:	bb44      	cbnz	r4, 8125ef4 <_malloc_r+0x88>
 8125ea2:	4629      	mov	r1, r5
 8125ea4:	4630      	mov	r0, r6
 8125ea6:	f7ff ffbf 	bl	8125e28 <sbrk_aligned>
 8125eaa:	1c43      	adds	r3, r0, #1
 8125eac:	4604      	mov	r4, r0
 8125eae:	d158      	bne.n	8125f62 <_malloc_r+0xf6>
 8125eb0:	f8d8 4000 	ldr.w	r4, [r8]
 8125eb4:	4627      	mov	r7, r4
 8125eb6:	2f00      	cmp	r7, #0
 8125eb8:	d143      	bne.n	8125f42 <_malloc_r+0xd6>
 8125eba:	2c00      	cmp	r4, #0
 8125ebc:	d04b      	beq.n	8125f56 <_malloc_r+0xea>
 8125ebe:	6823      	ldr	r3, [r4, #0]
 8125ec0:	4639      	mov	r1, r7
 8125ec2:	4630      	mov	r0, r6
 8125ec4:	eb04 0903 	add.w	r9, r4, r3
 8125ec8:	f000 ffe8 	bl	8126e9c <_sbrk_r>
 8125ecc:	4581      	cmp	r9, r0
 8125ece:	d142      	bne.n	8125f56 <_malloc_r+0xea>
 8125ed0:	6821      	ldr	r1, [r4, #0]
 8125ed2:	1a6d      	subs	r5, r5, r1
 8125ed4:	4629      	mov	r1, r5
 8125ed6:	4630      	mov	r0, r6
 8125ed8:	f7ff ffa6 	bl	8125e28 <sbrk_aligned>
 8125edc:	3001      	adds	r0, #1
 8125ede:	d03a      	beq.n	8125f56 <_malloc_r+0xea>
 8125ee0:	6823      	ldr	r3, [r4, #0]
 8125ee2:	442b      	add	r3, r5
 8125ee4:	6023      	str	r3, [r4, #0]
 8125ee6:	f8d8 3000 	ldr.w	r3, [r8]
 8125eea:	685a      	ldr	r2, [r3, #4]
 8125eec:	bb62      	cbnz	r2, 8125f48 <_malloc_r+0xdc>
 8125eee:	f8c8 7000 	str.w	r7, [r8]
 8125ef2:	e00f      	b.n	8125f14 <_malloc_r+0xa8>
 8125ef4:	6822      	ldr	r2, [r4, #0]
 8125ef6:	1b52      	subs	r2, r2, r5
 8125ef8:	d420      	bmi.n	8125f3c <_malloc_r+0xd0>
 8125efa:	2a0b      	cmp	r2, #11
 8125efc:	d917      	bls.n	8125f2e <_malloc_r+0xc2>
 8125efe:	1961      	adds	r1, r4, r5
 8125f00:	42a3      	cmp	r3, r4
 8125f02:	6025      	str	r5, [r4, #0]
 8125f04:	bf18      	it	ne
 8125f06:	6059      	strne	r1, [r3, #4]
 8125f08:	6863      	ldr	r3, [r4, #4]
 8125f0a:	bf08      	it	eq
 8125f0c:	f8c8 1000 	streq.w	r1, [r8]
 8125f10:	5162      	str	r2, [r4, r5]
 8125f12:	604b      	str	r3, [r1, #4]
 8125f14:	4630      	mov	r0, r6
 8125f16:	f000 f82f 	bl	8125f78 <__malloc_unlock>
 8125f1a:	f104 000b 	add.w	r0, r4, #11
 8125f1e:	1d23      	adds	r3, r4, #4
 8125f20:	f020 0007 	bic.w	r0, r0, #7
 8125f24:	1ac2      	subs	r2, r0, r3
 8125f26:	bf1c      	itt	ne
 8125f28:	1a1b      	subne	r3, r3, r0
 8125f2a:	50a3      	strne	r3, [r4, r2]
 8125f2c:	e7af      	b.n	8125e8e <_malloc_r+0x22>
 8125f2e:	6862      	ldr	r2, [r4, #4]
 8125f30:	42a3      	cmp	r3, r4
 8125f32:	bf0c      	ite	eq
 8125f34:	f8c8 2000 	streq.w	r2, [r8]
 8125f38:	605a      	strne	r2, [r3, #4]
 8125f3a:	e7eb      	b.n	8125f14 <_malloc_r+0xa8>
 8125f3c:	4623      	mov	r3, r4
 8125f3e:	6864      	ldr	r4, [r4, #4]
 8125f40:	e7ae      	b.n	8125ea0 <_malloc_r+0x34>
 8125f42:	463c      	mov	r4, r7
 8125f44:	687f      	ldr	r7, [r7, #4]
 8125f46:	e7b6      	b.n	8125eb6 <_malloc_r+0x4a>
 8125f48:	461a      	mov	r2, r3
 8125f4a:	685b      	ldr	r3, [r3, #4]
 8125f4c:	42a3      	cmp	r3, r4
 8125f4e:	d1fb      	bne.n	8125f48 <_malloc_r+0xdc>
 8125f50:	2300      	movs	r3, #0
 8125f52:	6053      	str	r3, [r2, #4]
 8125f54:	e7de      	b.n	8125f14 <_malloc_r+0xa8>
 8125f56:	230c      	movs	r3, #12
 8125f58:	6033      	str	r3, [r6, #0]
 8125f5a:	4630      	mov	r0, r6
 8125f5c:	f000 f80c 	bl	8125f78 <__malloc_unlock>
 8125f60:	e794      	b.n	8125e8c <_malloc_r+0x20>
 8125f62:	6005      	str	r5, [r0, #0]
 8125f64:	e7d6      	b.n	8125f14 <_malloc_r+0xa8>
 8125f66:	bf00      	nop
 8125f68:	1000e584 	.word	0x1000e584

08125f6c <__malloc_lock>:
 8125f6c:	4801      	ldr	r0, [pc, #4]	@ (8125f74 <__malloc_lock+0x8>)
 8125f6e:	f000 bfe2 	b.w	8126f36 <__retarget_lock_acquire_recursive>
 8125f72:	bf00      	nop
 8125f74:	1000e6c8 	.word	0x1000e6c8

08125f78 <__malloc_unlock>:
 8125f78:	4801      	ldr	r0, [pc, #4]	@ (8125f80 <__malloc_unlock+0x8>)
 8125f7a:	f000 bfdd 	b.w	8126f38 <__retarget_lock_release_recursive>
 8125f7e:	bf00      	nop
 8125f80:	1000e6c8 	.word	0x1000e6c8

08125f84 <rand>:
 8125f84:	4b16      	ldr	r3, [pc, #88]	@ (8125fe0 <rand+0x5c>)
 8125f86:	b510      	push	{r4, lr}
 8125f88:	681c      	ldr	r4, [r3, #0]
 8125f8a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8125f8c:	b9b3      	cbnz	r3, 8125fbc <rand+0x38>
 8125f8e:	2018      	movs	r0, #24
 8125f90:	f7ff ff3a 	bl	8125e08 <malloc>
 8125f94:	4602      	mov	r2, r0
 8125f96:	6320      	str	r0, [r4, #48]	@ 0x30
 8125f98:	b920      	cbnz	r0, 8125fa4 <rand+0x20>
 8125f9a:	4b12      	ldr	r3, [pc, #72]	@ (8125fe4 <rand+0x60>)
 8125f9c:	4812      	ldr	r0, [pc, #72]	@ (8125fe8 <rand+0x64>)
 8125f9e:	2152      	movs	r1, #82	@ 0x52
 8125fa0:	f000 ffda 	bl	8126f58 <__assert_func>
 8125fa4:	4911      	ldr	r1, [pc, #68]	@ (8125fec <rand+0x68>)
 8125fa6:	4b12      	ldr	r3, [pc, #72]	@ (8125ff0 <rand+0x6c>)
 8125fa8:	e9c0 1300 	strd	r1, r3, [r0]
 8125fac:	4b11      	ldr	r3, [pc, #68]	@ (8125ff4 <rand+0x70>)
 8125fae:	6083      	str	r3, [r0, #8]
 8125fb0:	230b      	movs	r3, #11
 8125fb2:	8183      	strh	r3, [r0, #12]
 8125fb4:	2100      	movs	r1, #0
 8125fb6:	2001      	movs	r0, #1
 8125fb8:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8125fbc:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8125fbe:	480e      	ldr	r0, [pc, #56]	@ (8125ff8 <rand+0x74>)
 8125fc0:	690b      	ldr	r3, [r1, #16]
 8125fc2:	694c      	ldr	r4, [r1, #20]
 8125fc4:	4a0d      	ldr	r2, [pc, #52]	@ (8125ffc <rand+0x78>)
 8125fc6:	4358      	muls	r0, r3
 8125fc8:	fb02 0004 	mla	r0, r2, r4, r0
 8125fcc:	fba3 3202 	umull	r3, r2, r3, r2
 8125fd0:	3301      	adds	r3, #1
 8125fd2:	eb40 0002 	adc.w	r0, r0, r2
 8125fd6:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8125fda:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8125fde:	bd10      	pop	{r4, pc}
 8125fe0:	10000040 	.word	0x10000040
 8125fe4:	0812b374 	.word	0x0812b374
 8125fe8:	0812b38b 	.word	0x0812b38b
 8125fec:	abcd330e 	.word	0xabcd330e
 8125ff0:	e66d1234 	.word	0xe66d1234
 8125ff4:	0005deec 	.word	0x0005deec
 8125ff8:	5851f42d 	.word	0x5851f42d
 8125ffc:	4c957f2d 	.word	0x4c957f2d

08126000 <_strtol_l.constprop.0>:
 8126000:	2b24      	cmp	r3, #36	@ 0x24
 8126002:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8126006:	4686      	mov	lr, r0
 8126008:	4690      	mov	r8, r2
 812600a:	d801      	bhi.n	8126010 <_strtol_l.constprop.0+0x10>
 812600c:	2b01      	cmp	r3, #1
 812600e:	d106      	bne.n	812601e <_strtol_l.constprop.0+0x1e>
 8126010:	f000 ff66 	bl	8126ee0 <__errno>
 8126014:	2316      	movs	r3, #22
 8126016:	6003      	str	r3, [r0, #0]
 8126018:	2000      	movs	r0, #0
 812601a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 812601e:	4834      	ldr	r0, [pc, #208]	@ (81260f0 <_strtol_l.constprop.0+0xf0>)
 8126020:	460d      	mov	r5, r1
 8126022:	462a      	mov	r2, r5
 8126024:	f815 4b01 	ldrb.w	r4, [r5], #1
 8126028:	5d06      	ldrb	r6, [r0, r4]
 812602a:	f016 0608 	ands.w	r6, r6, #8
 812602e:	d1f8      	bne.n	8126022 <_strtol_l.constprop.0+0x22>
 8126030:	2c2d      	cmp	r4, #45	@ 0x2d
 8126032:	d12d      	bne.n	8126090 <_strtol_l.constprop.0+0x90>
 8126034:	782c      	ldrb	r4, [r5, #0]
 8126036:	2601      	movs	r6, #1
 8126038:	1c95      	adds	r5, r2, #2
 812603a:	f033 0210 	bics.w	r2, r3, #16
 812603e:	d109      	bne.n	8126054 <_strtol_l.constprop.0+0x54>
 8126040:	2c30      	cmp	r4, #48	@ 0x30
 8126042:	d12a      	bne.n	812609a <_strtol_l.constprop.0+0x9a>
 8126044:	782a      	ldrb	r2, [r5, #0]
 8126046:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 812604a:	2a58      	cmp	r2, #88	@ 0x58
 812604c:	d125      	bne.n	812609a <_strtol_l.constprop.0+0x9a>
 812604e:	786c      	ldrb	r4, [r5, #1]
 8126050:	2310      	movs	r3, #16
 8126052:	3502      	adds	r5, #2
 8126054:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8126058:	f10c 3cff 	add.w	ip, ip, #4294967295
 812605c:	2200      	movs	r2, #0
 812605e:	fbbc f9f3 	udiv	r9, ip, r3
 8126062:	4610      	mov	r0, r2
 8126064:	fb03 ca19 	mls	sl, r3, r9, ip
 8126068:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 812606c:	2f09      	cmp	r7, #9
 812606e:	d81b      	bhi.n	81260a8 <_strtol_l.constprop.0+0xa8>
 8126070:	463c      	mov	r4, r7
 8126072:	42a3      	cmp	r3, r4
 8126074:	dd27      	ble.n	81260c6 <_strtol_l.constprop.0+0xc6>
 8126076:	1c57      	adds	r7, r2, #1
 8126078:	d007      	beq.n	812608a <_strtol_l.constprop.0+0x8a>
 812607a:	4581      	cmp	r9, r0
 812607c:	d320      	bcc.n	81260c0 <_strtol_l.constprop.0+0xc0>
 812607e:	d101      	bne.n	8126084 <_strtol_l.constprop.0+0x84>
 8126080:	45a2      	cmp	sl, r4
 8126082:	db1d      	blt.n	81260c0 <_strtol_l.constprop.0+0xc0>
 8126084:	fb00 4003 	mla	r0, r0, r3, r4
 8126088:	2201      	movs	r2, #1
 812608a:	f815 4b01 	ldrb.w	r4, [r5], #1
 812608e:	e7eb      	b.n	8126068 <_strtol_l.constprop.0+0x68>
 8126090:	2c2b      	cmp	r4, #43	@ 0x2b
 8126092:	bf04      	itt	eq
 8126094:	782c      	ldrbeq	r4, [r5, #0]
 8126096:	1c95      	addeq	r5, r2, #2
 8126098:	e7cf      	b.n	812603a <_strtol_l.constprop.0+0x3a>
 812609a:	2b00      	cmp	r3, #0
 812609c:	d1da      	bne.n	8126054 <_strtol_l.constprop.0+0x54>
 812609e:	2c30      	cmp	r4, #48	@ 0x30
 81260a0:	bf0c      	ite	eq
 81260a2:	2308      	moveq	r3, #8
 81260a4:	230a      	movne	r3, #10
 81260a6:	e7d5      	b.n	8126054 <_strtol_l.constprop.0+0x54>
 81260a8:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 81260ac:	2f19      	cmp	r7, #25
 81260ae:	d801      	bhi.n	81260b4 <_strtol_l.constprop.0+0xb4>
 81260b0:	3c37      	subs	r4, #55	@ 0x37
 81260b2:	e7de      	b.n	8126072 <_strtol_l.constprop.0+0x72>
 81260b4:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 81260b8:	2f19      	cmp	r7, #25
 81260ba:	d804      	bhi.n	81260c6 <_strtol_l.constprop.0+0xc6>
 81260bc:	3c57      	subs	r4, #87	@ 0x57
 81260be:	e7d8      	b.n	8126072 <_strtol_l.constprop.0+0x72>
 81260c0:	f04f 32ff 	mov.w	r2, #4294967295
 81260c4:	e7e1      	b.n	812608a <_strtol_l.constprop.0+0x8a>
 81260c6:	1c53      	adds	r3, r2, #1
 81260c8:	d108      	bne.n	81260dc <_strtol_l.constprop.0+0xdc>
 81260ca:	2322      	movs	r3, #34	@ 0x22
 81260cc:	f8ce 3000 	str.w	r3, [lr]
 81260d0:	4660      	mov	r0, ip
 81260d2:	f1b8 0f00 	cmp.w	r8, #0
 81260d6:	d0a0      	beq.n	812601a <_strtol_l.constprop.0+0x1a>
 81260d8:	1e69      	subs	r1, r5, #1
 81260da:	e006      	b.n	81260ea <_strtol_l.constprop.0+0xea>
 81260dc:	b106      	cbz	r6, 81260e0 <_strtol_l.constprop.0+0xe0>
 81260de:	4240      	negs	r0, r0
 81260e0:	f1b8 0f00 	cmp.w	r8, #0
 81260e4:	d099      	beq.n	812601a <_strtol_l.constprop.0+0x1a>
 81260e6:	2a00      	cmp	r2, #0
 81260e8:	d1f6      	bne.n	81260d8 <_strtol_l.constprop.0+0xd8>
 81260ea:	f8c8 1000 	str.w	r1, [r8]
 81260ee:	e794      	b.n	812601a <_strtol_l.constprop.0+0x1a>
 81260f0:	0812b3e4 	.word	0x0812b3e4

081260f4 <strtol>:
 81260f4:	4613      	mov	r3, r2
 81260f6:	460a      	mov	r2, r1
 81260f8:	4601      	mov	r1, r0
 81260fa:	4802      	ldr	r0, [pc, #8]	@ (8126104 <strtol+0x10>)
 81260fc:	6800      	ldr	r0, [r0, #0]
 81260fe:	f7ff bf7f 	b.w	8126000 <_strtol_l.constprop.0>
 8126102:	bf00      	nop
 8126104:	10000040 	.word	0x10000040

08126108 <__sfputc_r>:
 8126108:	6893      	ldr	r3, [r2, #8]
 812610a:	3b01      	subs	r3, #1
 812610c:	2b00      	cmp	r3, #0
 812610e:	b410      	push	{r4}
 8126110:	6093      	str	r3, [r2, #8]
 8126112:	da08      	bge.n	8126126 <__sfputc_r+0x1e>
 8126114:	6994      	ldr	r4, [r2, #24]
 8126116:	42a3      	cmp	r3, r4
 8126118:	db01      	blt.n	812611e <__sfputc_r+0x16>
 812611a:	290a      	cmp	r1, #10
 812611c:	d103      	bne.n	8126126 <__sfputc_r+0x1e>
 812611e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8126122:	f000 bcfc 	b.w	8126b1e <__swbuf_r>
 8126126:	6813      	ldr	r3, [r2, #0]
 8126128:	1c58      	adds	r0, r3, #1
 812612a:	6010      	str	r0, [r2, #0]
 812612c:	7019      	strb	r1, [r3, #0]
 812612e:	4608      	mov	r0, r1
 8126130:	f85d 4b04 	ldr.w	r4, [sp], #4
 8126134:	4770      	bx	lr

08126136 <__sfputs_r>:
 8126136:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8126138:	4606      	mov	r6, r0
 812613a:	460f      	mov	r7, r1
 812613c:	4614      	mov	r4, r2
 812613e:	18d5      	adds	r5, r2, r3
 8126140:	42ac      	cmp	r4, r5
 8126142:	d101      	bne.n	8126148 <__sfputs_r+0x12>
 8126144:	2000      	movs	r0, #0
 8126146:	e007      	b.n	8126158 <__sfputs_r+0x22>
 8126148:	f814 1b01 	ldrb.w	r1, [r4], #1
 812614c:	463a      	mov	r2, r7
 812614e:	4630      	mov	r0, r6
 8126150:	f7ff ffda 	bl	8126108 <__sfputc_r>
 8126154:	1c43      	adds	r3, r0, #1
 8126156:	d1f3      	bne.n	8126140 <__sfputs_r+0xa>
 8126158:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0812615c <_vfiprintf_r>:
 812615c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8126160:	460d      	mov	r5, r1
 8126162:	b09d      	sub	sp, #116	@ 0x74
 8126164:	4614      	mov	r4, r2
 8126166:	4698      	mov	r8, r3
 8126168:	4606      	mov	r6, r0
 812616a:	b118      	cbz	r0, 8126174 <_vfiprintf_r+0x18>
 812616c:	6a03      	ldr	r3, [r0, #32]
 812616e:	b90b      	cbnz	r3, 8126174 <_vfiprintf_r+0x18>
 8126170:	f000 fbf0 	bl	8126954 <__sinit>
 8126174:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8126176:	07d9      	lsls	r1, r3, #31
 8126178:	d405      	bmi.n	8126186 <_vfiprintf_r+0x2a>
 812617a:	89ab      	ldrh	r3, [r5, #12]
 812617c:	059a      	lsls	r2, r3, #22
 812617e:	d402      	bmi.n	8126186 <_vfiprintf_r+0x2a>
 8126180:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8126182:	f000 fed8 	bl	8126f36 <__retarget_lock_acquire_recursive>
 8126186:	89ab      	ldrh	r3, [r5, #12]
 8126188:	071b      	lsls	r3, r3, #28
 812618a:	d501      	bpl.n	8126190 <_vfiprintf_r+0x34>
 812618c:	692b      	ldr	r3, [r5, #16]
 812618e:	b99b      	cbnz	r3, 81261b8 <_vfiprintf_r+0x5c>
 8126190:	4629      	mov	r1, r5
 8126192:	4630      	mov	r0, r6
 8126194:	f000 fd02 	bl	8126b9c <__swsetup_r>
 8126198:	b170      	cbz	r0, 81261b8 <_vfiprintf_r+0x5c>
 812619a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 812619c:	07dc      	lsls	r4, r3, #31
 812619e:	d504      	bpl.n	81261aa <_vfiprintf_r+0x4e>
 81261a0:	f04f 30ff 	mov.w	r0, #4294967295
 81261a4:	b01d      	add	sp, #116	@ 0x74
 81261a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 81261aa:	89ab      	ldrh	r3, [r5, #12]
 81261ac:	0598      	lsls	r0, r3, #22
 81261ae:	d4f7      	bmi.n	81261a0 <_vfiprintf_r+0x44>
 81261b0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 81261b2:	f000 fec1 	bl	8126f38 <__retarget_lock_release_recursive>
 81261b6:	e7f3      	b.n	81261a0 <_vfiprintf_r+0x44>
 81261b8:	2300      	movs	r3, #0
 81261ba:	9309      	str	r3, [sp, #36]	@ 0x24
 81261bc:	2320      	movs	r3, #32
 81261be:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 81261c2:	f8cd 800c 	str.w	r8, [sp, #12]
 81261c6:	2330      	movs	r3, #48	@ 0x30
 81261c8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8126378 <_vfiprintf_r+0x21c>
 81261cc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 81261d0:	f04f 0901 	mov.w	r9, #1
 81261d4:	4623      	mov	r3, r4
 81261d6:	469a      	mov	sl, r3
 81261d8:	f813 2b01 	ldrb.w	r2, [r3], #1
 81261dc:	b10a      	cbz	r2, 81261e2 <_vfiprintf_r+0x86>
 81261de:	2a25      	cmp	r2, #37	@ 0x25
 81261e0:	d1f9      	bne.n	81261d6 <_vfiprintf_r+0x7a>
 81261e2:	ebba 0b04 	subs.w	fp, sl, r4
 81261e6:	d00b      	beq.n	8126200 <_vfiprintf_r+0xa4>
 81261e8:	465b      	mov	r3, fp
 81261ea:	4622      	mov	r2, r4
 81261ec:	4629      	mov	r1, r5
 81261ee:	4630      	mov	r0, r6
 81261f0:	f7ff ffa1 	bl	8126136 <__sfputs_r>
 81261f4:	3001      	adds	r0, #1
 81261f6:	f000 80a7 	beq.w	8126348 <_vfiprintf_r+0x1ec>
 81261fa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 81261fc:	445a      	add	r2, fp
 81261fe:	9209      	str	r2, [sp, #36]	@ 0x24
 8126200:	f89a 3000 	ldrb.w	r3, [sl]
 8126204:	2b00      	cmp	r3, #0
 8126206:	f000 809f 	beq.w	8126348 <_vfiprintf_r+0x1ec>
 812620a:	2300      	movs	r3, #0
 812620c:	f04f 32ff 	mov.w	r2, #4294967295
 8126210:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8126214:	f10a 0a01 	add.w	sl, sl, #1
 8126218:	9304      	str	r3, [sp, #16]
 812621a:	9307      	str	r3, [sp, #28]
 812621c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8126220:	931a      	str	r3, [sp, #104]	@ 0x68
 8126222:	4654      	mov	r4, sl
 8126224:	2205      	movs	r2, #5
 8126226:	f814 1b01 	ldrb.w	r1, [r4], #1
 812622a:	4853      	ldr	r0, [pc, #332]	@ (8126378 <_vfiprintf_r+0x21c>)
 812622c:	f7da f858 	bl	81002e0 <memchr>
 8126230:	9a04      	ldr	r2, [sp, #16]
 8126232:	b9d8      	cbnz	r0, 812626c <_vfiprintf_r+0x110>
 8126234:	06d1      	lsls	r1, r2, #27
 8126236:	bf44      	itt	mi
 8126238:	2320      	movmi	r3, #32
 812623a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 812623e:	0713      	lsls	r3, r2, #28
 8126240:	bf44      	itt	mi
 8126242:	232b      	movmi	r3, #43	@ 0x2b
 8126244:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8126248:	f89a 3000 	ldrb.w	r3, [sl]
 812624c:	2b2a      	cmp	r3, #42	@ 0x2a
 812624e:	d015      	beq.n	812627c <_vfiprintf_r+0x120>
 8126250:	9a07      	ldr	r2, [sp, #28]
 8126252:	4654      	mov	r4, sl
 8126254:	2000      	movs	r0, #0
 8126256:	f04f 0c0a 	mov.w	ip, #10
 812625a:	4621      	mov	r1, r4
 812625c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8126260:	3b30      	subs	r3, #48	@ 0x30
 8126262:	2b09      	cmp	r3, #9
 8126264:	d94b      	bls.n	81262fe <_vfiprintf_r+0x1a2>
 8126266:	b1b0      	cbz	r0, 8126296 <_vfiprintf_r+0x13a>
 8126268:	9207      	str	r2, [sp, #28]
 812626a:	e014      	b.n	8126296 <_vfiprintf_r+0x13a>
 812626c:	eba0 0308 	sub.w	r3, r0, r8
 8126270:	fa09 f303 	lsl.w	r3, r9, r3
 8126274:	4313      	orrs	r3, r2
 8126276:	9304      	str	r3, [sp, #16]
 8126278:	46a2      	mov	sl, r4
 812627a:	e7d2      	b.n	8126222 <_vfiprintf_r+0xc6>
 812627c:	9b03      	ldr	r3, [sp, #12]
 812627e:	1d19      	adds	r1, r3, #4
 8126280:	681b      	ldr	r3, [r3, #0]
 8126282:	9103      	str	r1, [sp, #12]
 8126284:	2b00      	cmp	r3, #0
 8126286:	bfbb      	ittet	lt
 8126288:	425b      	neglt	r3, r3
 812628a:	f042 0202 	orrlt.w	r2, r2, #2
 812628e:	9307      	strge	r3, [sp, #28]
 8126290:	9307      	strlt	r3, [sp, #28]
 8126292:	bfb8      	it	lt
 8126294:	9204      	strlt	r2, [sp, #16]
 8126296:	7823      	ldrb	r3, [r4, #0]
 8126298:	2b2e      	cmp	r3, #46	@ 0x2e
 812629a:	d10a      	bne.n	81262b2 <_vfiprintf_r+0x156>
 812629c:	7863      	ldrb	r3, [r4, #1]
 812629e:	2b2a      	cmp	r3, #42	@ 0x2a
 81262a0:	d132      	bne.n	8126308 <_vfiprintf_r+0x1ac>
 81262a2:	9b03      	ldr	r3, [sp, #12]
 81262a4:	1d1a      	adds	r2, r3, #4
 81262a6:	681b      	ldr	r3, [r3, #0]
 81262a8:	9203      	str	r2, [sp, #12]
 81262aa:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 81262ae:	3402      	adds	r4, #2
 81262b0:	9305      	str	r3, [sp, #20]
 81262b2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8126388 <_vfiprintf_r+0x22c>
 81262b6:	7821      	ldrb	r1, [r4, #0]
 81262b8:	2203      	movs	r2, #3
 81262ba:	4650      	mov	r0, sl
 81262bc:	f7da f810 	bl	81002e0 <memchr>
 81262c0:	b138      	cbz	r0, 81262d2 <_vfiprintf_r+0x176>
 81262c2:	9b04      	ldr	r3, [sp, #16]
 81262c4:	eba0 000a 	sub.w	r0, r0, sl
 81262c8:	2240      	movs	r2, #64	@ 0x40
 81262ca:	4082      	lsls	r2, r0
 81262cc:	4313      	orrs	r3, r2
 81262ce:	3401      	adds	r4, #1
 81262d0:	9304      	str	r3, [sp, #16]
 81262d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 81262d6:	4829      	ldr	r0, [pc, #164]	@ (812637c <_vfiprintf_r+0x220>)
 81262d8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 81262dc:	2206      	movs	r2, #6
 81262de:	f7d9 ffff 	bl	81002e0 <memchr>
 81262e2:	2800      	cmp	r0, #0
 81262e4:	d03f      	beq.n	8126366 <_vfiprintf_r+0x20a>
 81262e6:	4b26      	ldr	r3, [pc, #152]	@ (8126380 <_vfiprintf_r+0x224>)
 81262e8:	bb1b      	cbnz	r3, 8126332 <_vfiprintf_r+0x1d6>
 81262ea:	9b03      	ldr	r3, [sp, #12]
 81262ec:	3307      	adds	r3, #7
 81262ee:	f023 0307 	bic.w	r3, r3, #7
 81262f2:	3308      	adds	r3, #8
 81262f4:	9303      	str	r3, [sp, #12]
 81262f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 81262f8:	443b      	add	r3, r7
 81262fa:	9309      	str	r3, [sp, #36]	@ 0x24
 81262fc:	e76a      	b.n	81261d4 <_vfiprintf_r+0x78>
 81262fe:	fb0c 3202 	mla	r2, ip, r2, r3
 8126302:	460c      	mov	r4, r1
 8126304:	2001      	movs	r0, #1
 8126306:	e7a8      	b.n	812625a <_vfiprintf_r+0xfe>
 8126308:	2300      	movs	r3, #0
 812630a:	3401      	adds	r4, #1
 812630c:	9305      	str	r3, [sp, #20]
 812630e:	4619      	mov	r1, r3
 8126310:	f04f 0c0a 	mov.w	ip, #10
 8126314:	4620      	mov	r0, r4
 8126316:	f810 2b01 	ldrb.w	r2, [r0], #1
 812631a:	3a30      	subs	r2, #48	@ 0x30
 812631c:	2a09      	cmp	r2, #9
 812631e:	d903      	bls.n	8126328 <_vfiprintf_r+0x1cc>
 8126320:	2b00      	cmp	r3, #0
 8126322:	d0c6      	beq.n	81262b2 <_vfiprintf_r+0x156>
 8126324:	9105      	str	r1, [sp, #20]
 8126326:	e7c4      	b.n	81262b2 <_vfiprintf_r+0x156>
 8126328:	fb0c 2101 	mla	r1, ip, r1, r2
 812632c:	4604      	mov	r4, r0
 812632e:	2301      	movs	r3, #1
 8126330:	e7f0      	b.n	8126314 <_vfiprintf_r+0x1b8>
 8126332:	ab03      	add	r3, sp, #12
 8126334:	9300      	str	r3, [sp, #0]
 8126336:	462a      	mov	r2, r5
 8126338:	4b12      	ldr	r3, [pc, #72]	@ (8126384 <_vfiprintf_r+0x228>)
 812633a:	a904      	add	r1, sp, #16
 812633c:	4630      	mov	r0, r6
 812633e:	f3af 8000 	nop.w
 8126342:	4607      	mov	r7, r0
 8126344:	1c78      	adds	r0, r7, #1
 8126346:	d1d6      	bne.n	81262f6 <_vfiprintf_r+0x19a>
 8126348:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 812634a:	07d9      	lsls	r1, r3, #31
 812634c:	d405      	bmi.n	812635a <_vfiprintf_r+0x1fe>
 812634e:	89ab      	ldrh	r3, [r5, #12]
 8126350:	059a      	lsls	r2, r3, #22
 8126352:	d402      	bmi.n	812635a <_vfiprintf_r+0x1fe>
 8126354:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8126356:	f000 fdef 	bl	8126f38 <__retarget_lock_release_recursive>
 812635a:	89ab      	ldrh	r3, [r5, #12]
 812635c:	065b      	lsls	r3, r3, #25
 812635e:	f53f af1f 	bmi.w	81261a0 <_vfiprintf_r+0x44>
 8126362:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8126364:	e71e      	b.n	81261a4 <_vfiprintf_r+0x48>
 8126366:	ab03      	add	r3, sp, #12
 8126368:	9300      	str	r3, [sp, #0]
 812636a:	462a      	mov	r2, r5
 812636c:	4b05      	ldr	r3, [pc, #20]	@ (8126384 <_vfiprintf_r+0x228>)
 812636e:	a904      	add	r1, sp, #16
 8126370:	4630      	mov	r0, r6
 8126372:	f000 f883 	bl	812647c <_printf_i>
 8126376:	e7e4      	b.n	8126342 <_vfiprintf_r+0x1e6>
 8126378:	0812b4e4 	.word	0x0812b4e4
 812637c:	0812b4ee 	.word	0x0812b4ee
 8126380:	00000000 	.word	0x00000000
 8126384:	08126137 	.word	0x08126137
 8126388:	0812b4ea 	.word	0x0812b4ea

0812638c <vfiprintf>:
 812638c:	4613      	mov	r3, r2
 812638e:	460a      	mov	r2, r1
 8126390:	4601      	mov	r1, r0
 8126392:	4802      	ldr	r0, [pc, #8]	@ (812639c <vfiprintf+0x10>)
 8126394:	6800      	ldr	r0, [r0, #0]
 8126396:	f7ff bee1 	b.w	812615c <_vfiprintf_r>
 812639a:	bf00      	nop
 812639c:	10000040 	.word	0x10000040

081263a0 <_printf_common>:
 81263a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 81263a4:	4616      	mov	r6, r2
 81263a6:	4698      	mov	r8, r3
 81263a8:	688a      	ldr	r2, [r1, #8]
 81263aa:	690b      	ldr	r3, [r1, #16]
 81263ac:	f8dd 9020 	ldr.w	r9, [sp, #32]
 81263b0:	4293      	cmp	r3, r2
 81263b2:	bfb8      	it	lt
 81263b4:	4613      	movlt	r3, r2
 81263b6:	6033      	str	r3, [r6, #0]
 81263b8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 81263bc:	4607      	mov	r7, r0
 81263be:	460c      	mov	r4, r1
 81263c0:	b10a      	cbz	r2, 81263c6 <_printf_common+0x26>
 81263c2:	3301      	adds	r3, #1
 81263c4:	6033      	str	r3, [r6, #0]
 81263c6:	6823      	ldr	r3, [r4, #0]
 81263c8:	0699      	lsls	r1, r3, #26
 81263ca:	bf42      	ittt	mi
 81263cc:	6833      	ldrmi	r3, [r6, #0]
 81263ce:	3302      	addmi	r3, #2
 81263d0:	6033      	strmi	r3, [r6, #0]
 81263d2:	6825      	ldr	r5, [r4, #0]
 81263d4:	f015 0506 	ands.w	r5, r5, #6
 81263d8:	d106      	bne.n	81263e8 <_printf_common+0x48>
 81263da:	f104 0a19 	add.w	sl, r4, #25
 81263de:	68e3      	ldr	r3, [r4, #12]
 81263e0:	6832      	ldr	r2, [r6, #0]
 81263e2:	1a9b      	subs	r3, r3, r2
 81263e4:	42ab      	cmp	r3, r5
 81263e6:	dc26      	bgt.n	8126436 <_printf_common+0x96>
 81263e8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 81263ec:	6822      	ldr	r2, [r4, #0]
 81263ee:	3b00      	subs	r3, #0
 81263f0:	bf18      	it	ne
 81263f2:	2301      	movne	r3, #1
 81263f4:	0692      	lsls	r2, r2, #26
 81263f6:	d42b      	bmi.n	8126450 <_printf_common+0xb0>
 81263f8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 81263fc:	4641      	mov	r1, r8
 81263fe:	4638      	mov	r0, r7
 8126400:	47c8      	blx	r9
 8126402:	3001      	adds	r0, #1
 8126404:	d01e      	beq.n	8126444 <_printf_common+0xa4>
 8126406:	6823      	ldr	r3, [r4, #0]
 8126408:	6922      	ldr	r2, [r4, #16]
 812640a:	f003 0306 	and.w	r3, r3, #6
 812640e:	2b04      	cmp	r3, #4
 8126410:	bf02      	ittt	eq
 8126412:	68e5      	ldreq	r5, [r4, #12]
 8126414:	6833      	ldreq	r3, [r6, #0]
 8126416:	1aed      	subeq	r5, r5, r3
 8126418:	68a3      	ldr	r3, [r4, #8]
 812641a:	bf0c      	ite	eq
 812641c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8126420:	2500      	movne	r5, #0
 8126422:	4293      	cmp	r3, r2
 8126424:	bfc4      	itt	gt
 8126426:	1a9b      	subgt	r3, r3, r2
 8126428:	18ed      	addgt	r5, r5, r3
 812642a:	2600      	movs	r6, #0
 812642c:	341a      	adds	r4, #26
 812642e:	42b5      	cmp	r5, r6
 8126430:	d11a      	bne.n	8126468 <_printf_common+0xc8>
 8126432:	2000      	movs	r0, #0
 8126434:	e008      	b.n	8126448 <_printf_common+0xa8>
 8126436:	2301      	movs	r3, #1
 8126438:	4652      	mov	r2, sl
 812643a:	4641      	mov	r1, r8
 812643c:	4638      	mov	r0, r7
 812643e:	47c8      	blx	r9
 8126440:	3001      	adds	r0, #1
 8126442:	d103      	bne.n	812644c <_printf_common+0xac>
 8126444:	f04f 30ff 	mov.w	r0, #4294967295
 8126448:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 812644c:	3501      	adds	r5, #1
 812644e:	e7c6      	b.n	81263de <_printf_common+0x3e>
 8126450:	18e1      	adds	r1, r4, r3
 8126452:	1c5a      	adds	r2, r3, #1
 8126454:	2030      	movs	r0, #48	@ 0x30
 8126456:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 812645a:	4422      	add	r2, r4
 812645c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8126460:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8126464:	3302      	adds	r3, #2
 8126466:	e7c7      	b.n	81263f8 <_printf_common+0x58>
 8126468:	2301      	movs	r3, #1
 812646a:	4622      	mov	r2, r4
 812646c:	4641      	mov	r1, r8
 812646e:	4638      	mov	r0, r7
 8126470:	47c8      	blx	r9
 8126472:	3001      	adds	r0, #1
 8126474:	d0e6      	beq.n	8126444 <_printf_common+0xa4>
 8126476:	3601      	adds	r6, #1
 8126478:	e7d9      	b.n	812642e <_printf_common+0x8e>
	...

0812647c <_printf_i>:
 812647c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8126480:	7e0f      	ldrb	r7, [r1, #24]
 8126482:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8126484:	2f78      	cmp	r7, #120	@ 0x78
 8126486:	4691      	mov	r9, r2
 8126488:	4680      	mov	r8, r0
 812648a:	460c      	mov	r4, r1
 812648c:	469a      	mov	sl, r3
 812648e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8126492:	d807      	bhi.n	81264a4 <_printf_i+0x28>
 8126494:	2f62      	cmp	r7, #98	@ 0x62
 8126496:	d80a      	bhi.n	81264ae <_printf_i+0x32>
 8126498:	2f00      	cmp	r7, #0
 812649a:	f000 80d2 	beq.w	8126642 <_printf_i+0x1c6>
 812649e:	2f58      	cmp	r7, #88	@ 0x58
 81264a0:	f000 80b9 	beq.w	8126616 <_printf_i+0x19a>
 81264a4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 81264a8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 81264ac:	e03a      	b.n	8126524 <_printf_i+0xa8>
 81264ae:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 81264b2:	2b15      	cmp	r3, #21
 81264b4:	d8f6      	bhi.n	81264a4 <_printf_i+0x28>
 81264b6:	a101      	add	r1, pc, #4	@ (adr r1, 81264bc <_printf_i+0x40>)
 81264b8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 81264bc:	08126515 	.word	0x08126515
 81264c0:	08126529 	.word	0x08126529
 81264c4:	081264a5 	.word	0x081264a5
 81264c8:	081264a5 	.word	0x081264a5
 81264cc:	081264a5 	.word	0x081264a5
 81264d0:	081264a5 	.word	0x081264a5
 81264d4:	08126529 	.word	0x08126529
 81264d8:	081264a5 	.word	0x081264a5
 81264dc:	081264a5 	.word	0x081264a5
 81264e0:	081264a5 	.word	0x081264a5
 81264e4:	081264a5 	.word	0x081264a5
 81264e8:	08126629 	.word	0x08126629
 81264ec:	08126553 	.word	0x08126553
 81264f0:	081265e3 	.word	0x081265e3
 81264f4:	081264a5 	.word	0x081264a5
 81264f8:	081264a5 	.word	0x081264a5
 81264fc:	0812664b 	.word	0x0812664b
 8126500:	081264a5 	.word	0x081264a5
 8126504:	08126553 	.word	0x08126553
 8126508:	081264a5 	.word	0x081264a5
 812650c:	081264a5 	.word	0x081264a5
 8126510:	081265eb 	.word	0x081265eb
 8126514:	6833      	ldr	r3, [r6, #0]
 8126516:	1d1a      	adds	r2, r3, #4
 8126518:	681b      	ldr	r3, [r3, #0]
 812651a:	6032      	str	r2, [r6, #0]
 812651c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8126520:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8126524:	2301      	movs	r3, #1
 8126526:	e09d      	b.n	8126664 <_printf_i+0x1e8>
 8126528:	6833      	ldr	r3, [r6, #0]
 812652a:	6820      	ldr	r0, [r4, #0]
 812652c:	1d19      	adds	r1, r3, #4
 812652e:	6031      	str	r1, [r6, #0]
 8126530:	0606      	lsls	r6, r0, #24
 8126532:	d501      	bpl.n	8126538 <_printf_i+0xbc>
 8126534:	681d      	ldr	r5, [r3, #0]
 8126536:	e003      	b.n	8126540 <_printf_i+0xc4>
 8126538:	0645      	lsls	r5, r0, #25
 812653a:	d5fb      	bpl.n	8126534 <_printf_i+0xb8>
 812653c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8126540:	2d00      	cmp	r5, #0
 8126542:	da03      	bge.n	812654c <_printf_i+0xd0>
 8126544:	232d      	movs	r3, #45	@ 0x2d
 8126546:	426d      	negs	r5, r5
 8126548:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 812654c:	4859      	ldr	r0, [pc, #356]	@ (81266b4 <_printf_i+0x238>)
 812654e:	230a      	movs	r3, #10
 8126550:	e011      	b.n	8126576 <_printf_i+0xfa>
 8126552:	6821      	ldr	r1, [r4, #0]
 8126554:	6833      	ldr	r3, [r6, #0]
 8126556:	0608      	lsls	r0, r1, #24
 8126558:	f853 5b04 	ldr.w	r5, [r3], #4
 812655c:	d402      	bmi.n	8126564 <_printf_i+0xe8>
 812655e:	0649      	lsls	r1, r1, #25
 8126560:	bf48      	it	mi
 8126562:	b2ad      	uxthmi	r5, r5
 8126564:	2f6f      	cmp	r7, #111	@ 0x6f
 8126566:	4853      	ldr	r0, [pc, #332]	@ (81266b4 <_printf_i+0x238>)
 8126568:	6033      	str	r3, [r6, #0]
 812656a:	bf14      	ite	ne
 812656c:	230a      	movne	r3, #10
 812656e:	2308      	moveq	r3, #8
 8126570:	2100      	movs	r1, #0
 8126572:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8126576:	6866      	ldr	r6, [r4, #4]
 8126578:	60a6      	str	r6, [r4, #8]
 812657a:	2e00      	cmp	r6, #0
 812657c:	bfa2      	ittt	ge
 812657e:	6821      	ldrge	r1, [r4, #0]
 8126580:	f021 0104 	bicge.w	r1, r1, #4
 8126584:	6021      	strge	r1, [r4, #0]
 8126586:	b90d      	cbnz	r5, 812658c <_printf_i+0x110>
 8126588:	2e00      	cmp	r6, #0
 812658a:	d04b      	beq.n	8126624 <_printf_i+0x1a8>
 812658c:	4616      	mov	r6, r2
 812658e:	fbb5 f1f3 	udiv	r1, r5, r3
 8126592:	fb03 5711 	mls	r7, r3, r1, r5
 8126596:	5dc7      	ldrb	r7, [r0, r7]
 8126598:	f806 7d01 	strb.w	r7, [r6, #-1]!
 812659c:	462f      	mov	r7, r5
 812659e:	42bb      	cmp	r3, r7
 81265a0:	460d      	mov	r5, r1
 81265a2:	d9f4      	bls.n	812658e <_printf_i+0x112>
 81265a4:	2b08      	cmp	r3, #8
 81265a6:	d10b      	bne.n	81265c0 <_printf_i+0x144>
 81265a8:	6823      	ldr	r3, [r4, #0]
 81265aa:	07df      	lsls	r7, r3, #31
 81265ac:	d508      	bpl.n	81265c0 <_printf_i+0x144>
 81265ae:	6923      	ldr	r3, [r4, #16]
 81265b0:	6861      	ldr	r1, [r4, #4]
 81265b2:	4299      	cmp	r1, r3
 81265b4:	bfde      	ittt	le
 81265b6:	2330      	movle	r3, #48	@ 0x30
 81265b8:	f806 3c01 	strble.w	r3, [r6, #-1]
 81265bc:	f106 36ff 	addle.w	r6, r6, #4294967295
 81265c0:	1b92      	subs	r2, r2, r6
 81265c2:	6122      	str	r2, [r4, #16]
 81265c4:	f8cd a000 	str.w	sl, [sp]
 81265c8:	464b      	mov	r3, r9
 81265ca:	aa03      	add	r2, sp, #12
 81265cc:	4621      	mov	r1, r4
 81265ce:	4640      	mov	r0, r8
 81265d0:	f7ff fee6 	bl	81263a0 <_printf_common>
 81265d4:	3001      	adds	r0, #1
 81265d6:	d14a      	bne.n	812666e <_printf_i+0x1f2>
 81265d8:	f04f 30ff 	mov.w	r0, #4294967295
 81265dc:	b004      	add	sp, #16
 81265de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 81265e2:	6823      	ldr	r3, [r4, #0]
 81265e4:	f043 0320 	orr.w	r3, r3, #32
 81265e8:	6023      	str	r3, [r4, #0]
 81265ea:	4833      	ldr	r0, [pc, #204]	@ (81266b8 <_printf_i+0x23c>)
 81265ec:	2778      	movs	r7, #120	@ 0x78
 81265ee:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 81265f2:	6823      	ldr	r3, [r4, #0]
 81265f4:	6831      	ldr	r1, [r6, #0]
 81265f6:	061f      	lsls	r7, r3, #24
 81265f8:	f851 5b04 	ldr.w	r5, [r1], #4
 81265fc:	d402      	bmi.n	8126604 <_printf_i+0x188>
 81265fe:	065f      	lsls	r7, r3, #25
 8126600:	bf48      	it	mi
 8126602:	b2ad      	uxthmi	r5, r5
 8126604:	6031      	str	r1, [r6, #0]
 8126606:	07d9      	lsls	r1, r3, #31
 8126608:	bf44      	itt	mi
 812660a:	f043 0320 	orrmi.w	r3, r3, #32
 812660e:	6023      	strmi	r3, [r4, #0]
 8126610:	b11d      	cbz	r5, 812661a <_printf_i+0x19e>
 8126612:	2310      	movs	r3, #16
 8126614:	e7ac      	b.n	8126570 <_printf_i+0xf4>
 8126616:	4827      	ldr	r0, [pc, #156]	@ (81266b4 <_printf_i+0x238>)
 8126618:	e7e9      	b.n	81265ee <_printf_i+0x172>
 812661a:	6823      	ldr	r3, [r4, #0]
 812661c:	f023 0320 	bic.w	r3, r3, #32
 8126620:	6023      	str	r3, [r4, #0]
 8126622:	e7f6      	b.n	8126612 <_printf_i+0x196>
 8126624:	4616      	mov	r6, r2
 8126626:	e7bd      	b.n	81265a4 <_printf_i+0x128>
 8126628:	6833      	ldr	r3, [r6, #0]
 812662a:	6825      	ldr	r5, [r4, #0]
 812662c:	6961      	ldr	r1, [r4, #20]
 812662e:	1d18      	adds	r0, r3, #4
 8126630:	6030      	str	r0, [r6, #0]
 8126632:	062e      	lsls	r6, r5, #24
 8126634:	681b      	ldr	r3, [r3, #0]
 8126636:	d501      	bpl.n	812663c <_printf_i+0x1c0>
 8126638:	6019      	str	r1, [r3, #0]
 812663a:	e002      	b.n	8126642 <_printf_i+0x1c6>
 812663c:	0668      	lsls	r0, r5, #25
 812663e:	d5fb      	bpl.n	8126638 <_printf_i+0x1bc>
 8126640:	8019      	strh	r1, [r3, #0]
 8126642:	2300      	movs	r3, #0
 8126644:	6123      	str	r3, [r4, #16]
 8126646:	4616      	mov	r6, r2
 8126648:	e7bc      	b.n	81265c4 <_printf_i+0x148>
 812664a:	6833      	ldr	r3, [r6, #0]
 812664c:	1d1a      	adds	r2, r3, #4
 812664e:	6032      	str	r2, [r6, #0]
 8126650:	681e      	ldr	r6, [r3, #0]
 8126652:	6862      	ldr	r2, [r4, #4]
 8126654:	2100      	movs	r1, #0
 8126656:	4630      	mov	r0, r6
 8126658:	f7d9 fe42 	bl	81002e0 <memchr>
 812665c:	b108      	cbz	r0, 8126662 <_printf_i+0x1e6>
 812665e:	1b80      	subs	r0, r0, r6
 8126660:	6060      	str	r0, [r4, #4]
 8126662:	6863      	ldr	r3, [r4, #4]
 8126664:	6123      	str	r3, [r4, #16]
 8126666:	2300      	movs	r3, #0
 8126668:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 812666c:	e7aa      	b.n	81265c4 <_printf_i+0x148>
 812666e:	6923      	ldr	r3, [r4, #16]
 8126670:	4632      	mov	r2, r6
 8126672:	4649      	mov	r1, r9
 8126674:	4640      	mov	r0, r8
 8126676:	47d0      	blx	sl
 8126678:	3001      	adds	r0, #1
 812667a:	d0ad      	beq.n	81265d8 <_printf_i+0x15c>
 812667c:	6823      	ldr	r3, [r4, #0]
 812667e:	079b      	lsls	r3, r3, #30
 8126680:	d413      	bmi.n	81266aa <_printf_i+0x22e>
 8126682:	68e0      	ldr	r0, [r4, #12]
 8126684:	9b03      	ldr	r3, [sp, #12]
 8126686:	4298      	cmp	r0, r3
 8126688:	bfb8      	it	lt
 812668a:	4618      	movlt	r0, r3
 812668c:	e7a6      	b.n	81265dc <_printf_i+0x160>
 812668e:	2301      	movs	r3, #1
 8126690:	4632      	mov	r2, r6
 8126692:	4649      	mov	r1, r9
 8126694:	4640      	mov	r0, r8
 8126696:	47d0      	blx	sl
 8126698:	3001      	adds	r0, #1
 812669a:	d09d      	beq.n	81265d8 <_printf_i+0x15c>
 812669c:	3501      	adds	r5, #1
 812669e:	68e3      	ldr	r3, [r4, #12]
 81266a0:	9903      	ldr	r1, [sp, #12]
 81266a2:	1a5b      	subs	r3, r3, r1
 81266a4:	42ab      	cmp	r3, r5
 81266a6:	dcf2      	bgt.n	812668e <_printf_i+0x212>
 81266a8:	e7eb      	b.n	8126682 <_printf_i+0x206>
 81266aa:	2500      	movs	r5, #0
 81266ac:	f104 0619 	add.w	r6, r4, #25
 81266b0:	e7f5      	b.n	812669e <_printf_i+0x222>
 81266b2:	bf00      	nop
 81266b4:	0812b4f5 	.word	0x0812b4f5
 81266b8:	0812b506 	.word	0x0812b506

081266bc <__sflush_r>:
 81266bc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 81266c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 81266c4:	0716      	lsls	r6, r2, #28
 81266c6:	4605      	mov	r5, r0
 81266c8:	460c      	mov	r4, r1
 81266ca:	d454      	bmi.n	8126776 <__sflush_r+0xba>
 81266cc:	684b      	ldr	r3, [r1, #4]
 81266ce:	2b00      	cmp	r3, #0
 81266d0:	dc02      	bgt.n	81266d8 <__sflush_r+0x1c>
 81266d2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 81266d4:	2b00      	cmp	r3, #0
 81266d6:	dd48      	ble.n	812676a <__sflush_r+0xae>
 81266d8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 81266da:	2e00      	cmp	r6, #0
 81266dc:	d045      	beq.n	812676a <__sflush_r+0xae>
 81266de:	2300      	movs	r3, #0
 81266e0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 81266e4:	682f      	ldr	r7, [r5, #0]
 81266e6:	6a21      	ldr	r1, [r4, #32]
 81266e8:	602b      	str	r3, [r5, #0]
 81266ea:	d030      	beq.n	812674e <__sflush_r+0x92>
 81266ec:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 81266ee:	89a3      	ldrh	r3, [r4, #12]
 81266f0:	0759      	lsls	r1, r3, #29
 81266f2:	d505      	bpl.n	8126700 <__sflush_r+0x44>
 81266f4:	6863      	ldr	r3, [r4, #4]
 81266f6:	1ad2      	subs	r2, r2, r3
 81266f8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 81266fa:	b10b      	cbz	r3, 8126700 <__sflush_r+0x44>
 81266fc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 81266fe:	1ad2      	subs	r2, r2, r3
 8126700:	2300      	movs	r3, #0
 8126702:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8126704:	6a21      	ldr	r1, [r4, #32]
 8126706:	4628      	mov	r0, r5
 8126708:	47b0      	blx	r6
 812670a:	1c43      	adds	r3, r0, #1
 812670c:	89a3      	ldrh	r3, [r4, #12]
 812670e:	d106      	bne.n	812671e <__sflush_r+0x62>
 8126710:	6829      	ldr	r1, [r5, #0]
 8126712:	291d      	cmp	r1, #29
 8126714:	d82b      	bhi.n	812676e <__sflush_r+0xb2>
 8126716:	4a2a      	ldr	r2, [pc, #168]	@ (81267c0 <__sflush_r+0x104>)
 8126718:	410a      	asrs	r2, r1
 812671a:	07d6      	lsls	r6, r2, #31
 812671c:	d427      	bmi.n	812676e <__sflush_r+0xb2>
 812671e:	2200      	movs	r2, #0
 8126720:	6062      	str	r2, [r4, #4]
 8126722:	04d9      	lsls	r1, r3, #19
 8126724:	6922      	ldr	r2, [r4, #16]
 8126726:	6022      	str	r2, [r4, #0]
 8126728:	d504      	bpl.n	8126734 <__sflush_r+0x78>
 812672a:	1c42      	adds	r2, r0, #1
 812672c:	d101      	bne.n	8126732 <__sflush_r+0x76>
 812672e:	682b      	ldr	r3, [r5, #0]
 8126730:	b903      	cbnz	r3, 8126734 <__sflush_r+0x78>
 8126732:	6560      	str	r0, [r4, #84]	@ 0x54
 8126734:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8126736:	602f      	str	r7, [r5, #0]
 8126738:	b1b9      	cbz	r1, 812676a <__sflush_r+0xae>
 812673a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 812673e:	4299      	cmp	r1, r3
 8126740:	d002      	beq.n	8126748 <__sflush_r+0x8c>
 8126742:	4628      	mov	r0, r5
 8126744:	f000 fc26 	bl	8126f94 <_free_r>
 8126748:	2300      	movs	r3, #0
 812674a:	6363      	str	r3, [r4, #52]	@ 0x34
 812674c:	e00d      	b.n	812676a <__sflush_r+0xae>
 812674e:	2301      	movs	r3, #1
 8126750:	4628      	mov	r0, r5
 8126752:	47b0      	blx	r6
 8126754:	4602      	mov	r2, r0
 8126756:	1c50      	adds	r0, r2, #1
 8126758:	d1c9      	bne.n	81266ee <__sflush_r+0x32>
 812675a:	682b      	ldr	r3, [r5, #0]
 812675c:	2b00      	cmp	r3, #0
 812675e:	d0c6      	beq.n	81266ee <__sflush_r+0x32>
 8126760:	2b1d      	cmp	r3, #29
 8126762:	d001      	beq.n	8126768 <__sflush_r+0xac>
 8126764:	2b16      	cmp	r3, #22
 8126766:	d11e      	bne.n	81267a6 <__sflush_r+0xea>
 8126768:	602f      	str	r7, [r5, #0]
 812676a:	2000      	movs	r0, #0
 812676c:	e022      	b.n	81267b4 <__sflush_r+0xf8>
 812676e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8126772:	b21b      	sxth	r3, r3
 8126774:	e01b      	b.n	81267ae <__sflush_r+0xf2>
 8126776:	690f      	ldr	r7, [r1, #16]
 8126778:	2f00      	cmp	r7, #0
 812677a:	d0f6      	beq.n	812676a <__sflush_r+0xae>
 812677c:	0793      	lsls	r3, r2, #30
 812677e:	680e      	ldr	r6, [r1, #0]
 8126780:	bf08      	it	eq
 8126782:	694b      	ldreq	r3, [r1, #20]
 8126784:	600f      	str	r7, [r1, #0]
 8126786:	bf18      	it	ne
 8126788:	2300      	movne	r3, #0
 812678a:	eba6 0807 	sub.w	r8, r6, r7
 812678e:	608b      	str	r3, [r1, #8]
 8126790:	f1b8 0f00 	cmp.w	r8, #0
 8126794:	dde9      	ble.n	812676a <__sflush_r+0xae>
 8126796:	6a21      	ldr	r1, [r4, #32]
 8126798:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 812679a:	4643      	mov	r3, r8
 812679c:	463a      	mov	r2, r7
 812679e:	4628      	mov	r0, r5
 81267a0:	47b0      	blx	r6
 81267a2:	2800      	cmp	r0, #0
 81267a4:	dc08      	bgt.n	81267b8 <__sflush_r+0xfc>
 81267a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 81267aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 81267ae:	81a3      	strh	r3, [r4, #12]
 81267b0:	f04f 30ff 	mov.w	r0, #4294967295
 81267b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 81267b8:	4407      	add	r7, r0
 81267ba:	eba8 0800 	sub.w	r8, r8, r0
 81267be:	e7e7      	b.n	8126790 <__sflush_r+0xd4>
 81267c0:	dfbffffe 	.word	0xdfbffffe

081267c4 <_fflush_r>:
 81267c4:	b538      	push	{r3, r4, r5, lr}
 81267c6:	690b      	ldr	r3, [r1, #16]
 81267c8:	4605      	mov	r5, r0
 81267ca:	460c      	mov	r4, r1
 81267cc:	b913      	cbnz	r3, 81267d4 <_fflush_r+0x10>
 81267ce:	2500      	movs	r5, #0
 81267d0:	4628      	mov	r0, r5
 81267d2:	bd38      	pop	{r3, r4, r5, pc}
 81267d4:	b118      	cbz	r0, 81267de <_fflush_r+0x1a>
 81267d6:	6a03      	ldr	r3, [r0, #32]
 81267d8:	b90b      	cbnz	r3, 81267de <_fflush_r+0x1a>
 81267da:	f000 f8bb 	bl	8126954 <__sinit>
 81267de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 81267e2:	2b00      	cmp	r3, #0
 81267e4:	d0f3      	beq.n	81267ce <_fflush_r+0xa>
 81267e6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 81267e8:	07d0      	lsls	r0, r2, #31
 81267ea:	d404      	bmi.n	81267f6 <_fflush_r+0x32>
 81267ec:	0599      	lsls	r1, r3, #22
 81267ee:	d402      	bmi.n	81267f6 <_fflush_r+0x32>
 81267f0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 81267f2:	f000 fba0 	bl	8126f36 <__retarget_lock_acquire_recursive>
 81267f6:	4628      	mov	r0, r5
 81267f8:	4621      	mov	r1, r4
 81267fa:	f7ff ff5f 	bl	81266bc <__sflush_r>
 81267fe:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8126800:	07da      	lsls	r2, r3, #31
 8126802:	4605      	mov	r5, r0
 8126804:	d4e4      	bmi.n	81267d0 <_fflush_r+0xc>
 8126806:	89a3      	ldrh	r3, [r4, #12]
 8126808:	059b      	lsls	r3, r3, #22
 812680a:	d4e1      	bmi.n	81267d0 <_fflush_r+0xc>
 812680c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 812680e:	f000 fb93 	bl	8126f38 <__retarget_lock_release_recursive>
 8126812:	e7dd      	b.n	81267d0 <_fflush_r+0xc>

08126814 <fflush>:
 8126814:	4601      	mov	r1, r0
 8126816:	b920      	cbnz	r0, 8126822 <fflush+0xe>
 8126818:	4a04      	ldr	r2, [pc, #16]	@ (812682c <fflush+0x18>)
 812681a:	4905      	ldr	r1, [pc, #20]	@ (8126830 <fflush+0x1c>)
 812681c:	4805      	ldr	r0, [pc, #20]	@ (8126834 <fflush+0x20>)
 812681e:	f000 b8b1 	b.w	8126984 <_fwalk_sglue>
 8126822:	4b05      	ldr	r3, [pc, #20]	@ (8126838 <fflush+0x24>)
 8126824:	6818      	ldr	r0, [r3, #0]
 8126826:	f7ff bfcd 	b.w	81267c4 <_fflush_r>
 812682a:	bf00      	nop
 812682c:	10000034 	.word	0x10000034
 8126830:	081267c5 	.word	0x081267c5
 8126834:	10000044 	.word	0x10000044
 8126838:	10000040 	.word	0x10000040

0812683c <std>:
 812683c:	2300      	movs	r3, #0
 812683e:	b510      	push	{r4, lr}
 8126840:	4604      	mov	r4, r0
 8126842:	e9c0 3300 	strd	r3, r3, [r0]
 8126846:	e9c0 3304 	strd	r3, r3, [r0, #16]
 812684a:	6083      	str	r3, [r0, #8]
 812684c:	8181      	strh	r1, [r0, #12]
 812684e:	6643      	str	r3, [r0, #100]	@ 0x64
 8126850:	81c2      	strh	r2, [r0, #14]
 8126852:	6183      	str	r3, [r0, #24]
 8126854:	4619      	mov	r1, r3
 8126856:	2208      	movs	r2, #8
 8126858:	305c      	adds	r0, #92	@ 0x5c
 812685a:	f000 fa1f 	bl	8126c9c <memset>
 812685e:	4b0d      	ldr	r3, [pc, #52]	@ (8126894 <std+0x58>)
 8126860:	6263      	str	r3, [r4, #36]	@ 0x24
 8126862:	4b0d      	ldr	r3, [pc, #52]	@ (8126898 <std+0x5c>)
 8126864:	62a3      	str	r3, [r4, #40]	@ 0x28
 8126866:	4b0d      	ldr	r3, [pc, #52]	@ (812689c <std+0x60>)
 8126868:	62e3      	str	r3, [r4, #44]	@ 0x2c
 812686a:	4b0d      	ldr	r3, [pc, #52]	@ (81268a0 <std+0x64>)
 812686c:	6323      	str	r3, [r4, #48]	@ 0x30
 812686e:	4b0d      	ldr	r3, [pc, #52]	@ (81268a4 <std+0x68>)
 8126870:	6224      	str	r4, [r4, #32]
 8126872:	429c      	cmp	r4, r3
 8126874:	d006      	beq.n	8126884 <std+0x48>
 8126876:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 812687a:	4294      	cmp	r4, r2
 812687c:	d002      	beq.n	8126884 <std+0x48>
 812687e:	33d0      	adds	r3, #208	@ 0xd0
 8126880:	429c      	cmp	r4, r3
 8126882:	d105      	bne.n	8126890 <std+0x54>
 8126884:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8126888:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 812688c:	f000 bb52 	b.w	8126f34 <__retarget_lock_init_recursive>
 8126890:	bd10      	pop	{r4, pc}
 8126892:	bf00      	nop
 8126894:	08126a99 	.word	0x08126a99
 8126898:	08126abb 	.word	0x08126abb
 812689c:	08126af3 	.word	0x08126af3
 81268a0:	08126b17 	.word	0x08126b17
 81268a4:	1000e588 	.word	0x1000e588

081268a8 <stdio_exit_handler>:
 81268a8:	4a02      	ldr	r2, [pc, #8]	@ (81268b4 <stdio_exit_handler+0xc>)
 81268aa:	4903      	ldr	r1, [pc, #12]	@ (81268b8 <stdio_exit_handler+0x10>)
 81268ac:	4803      	ldr	r0, [pc, #12]	@ (81268bc <stdio_exit_handler+0x14>)
 81268ae:	f000 b869 	b.w	8126984 <_fwalk_sglue>
 81268b2:	bf00      	nop
 81268b4:	10000034 	.word	0x10000034
 81268b8:	081267c5 	.word	0x081267c5
 81268bc:	10000044 	.word	0x10000044

081268c0 <cleanup_stdio>:
 81268c0:	6841      	ldr	r1, [r0, #4]
 81268c2:	4b0c      	ldr	r3, [pc, #48]	@ (81268f4 <cleanup_stdio+0x34>)
 81268c4:	4299      	cmp	r1, r3
 81268c6:	b510      	push	{r4, lr}
 81268c8:	4604      	mov	r4, r0
 81268ca:	d001      	beq.n	81268d0 <cleanup_stdio+0x10>
 81268cc:	f7ff ff7a 	bl	81267c4 <_fflush_r>
 81268d0:	68a1      	ldr	r1, [r4, #8]
 81268d2:	4b09      	ldr	r3, [pc, #36]	@ (81268f8 <cleanup_stdio+0x38>)
 81268d4:	4299      	cmp	r1, r3
 81268d6:	d002      	beq.n	81268de <cleanup_stdio+0x1e>
 81268d8:	4620      	mov	r0, r4
 81268da:	f7ff ff73 	bl	81267c4 <_fflush_r>
 81268de:	68e1      	ldr	r1, [r4, #12]
 81268e0:	4b06      	ldr	r3, [pc, #24]	@ (81268fc <cleanup_stdio+0x3c>)
 81268e2:	4299      	cmp	r1, r3
 81268e4:	d004      	beq.n	81268f0 <cleanup_stdio+0x30>
 81268e6:	4620      	mov	r0, r4
 81268e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 81268ec:	f7ff bf6a 	b.w	81267c4 <_fflush_r>
 81268f0:	bd10      	pop	{r4, pc}
 81268f2:	bf00      	nop
 81268f4:	1000e588 	.word	0x1000e588
 81268f8:	1000e5f0 	.word	0x1000e5f0
 81268fc:	1000e658 	.word	0x1000e658

08126900 <global_stdio_init.part.0>:
 8126900:	b510      	push	{r4, lr}
 8126902:	4b0b      	ldr	r3, [pc, #44]	@ (8126930 <global_stdio_init.part.0+0x30>)
 8126904:	4c0b      	ldr	r4, [pc, #44]	@ (8126934 <global_stdio_init.part.0+0x34>)
 8126906:	4a0c      	ldr	r2, [pc, #48]	@ (8126938 <global_stdio_init.part.0+0x38>)
 8126908:	601a      	str	r2, [r3, #0]
 812690a:	4620      	mov	r0, r4
 812690c:	2200      	movs	r2, #0
 812690e:	2104      	movs	r1, #4
 8126910:	f7ff ff94 	bl	812683c <std>
 8126914:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8126918:	2201      	movs	r2, #1
 812691a:	2109      	movs	r1, #9
 812691c:	f7ff ff8e 	bl	812683c <std>
 8126920:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8126924:	2202      	movs	r2, #2
 8126926:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 812692a:	2112      	movs	r1, #18
 812692c:	f7ff bf86 	b.w	812683c <std>
 8126930:	1000e6c0 	.word	0x1000e6c0
 8126934:	1000e588 	.word	0x1000e588
 8126938:	081268a9 	.word	0x081268a9

0812693c <__sfp_lock_acquire>:
 812693c:	4801      	ldr	r0, [pc, #4]	@ (8126944 <__sfp_lock_acquire+0x8>)
 812693e:	f000 bafa 	b.w	8126f36 <__retarget_lock_acquire_recursive>
 8126942:	bf00      	nop
 8126944:	1000e6c9 	.word	0x1000e6c9

08126948 <__sfp_lock_release>:
 8126948:	4801      	ldr	r0, [pc, #4]	@ (8126950 <__sfp_lock_release+0x8>)
 812694a:	f000 baf5 	b.w	8126f38 <__retarget_lock_release_recursive>
 812694e:	bf00      	nop
 8126950:	1000e6c9 	.word	0x1000e6c9

08126954 <__sinit>:
 8126954:	b510      	push	{r4, lr}
 8126956:	4604      	mov	r4, r0
 8126958:	f7ff fff0 	bl	812693c <__sfp_lock_acquire>
 812695c:	6a23      	ldr	r3, [r4, #32]
 812695e:	b11b      	cbz	r3, 8126968 <__sinit+0x14>
 8126960:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8126964:	f7ff bff0 	b.w	8126948 <__sfp_lock_release>
 8126968:	4b04      	ldr	r3, [pc, #16]	@ (812697c <__sinit+0x28>)
 812696a:	6223      	str	r3, [r4, #32]
 812696c:	4b04      	ldr	r3, [pc, #16]	@ (8126980 <__sinit+0x2c>)
 812696e:	681b      	ldr	r3, [r3, #0]
 8126970:	2b00      	cmp	r3, #0
 8126972:	d1f5      	bne.n	8126960 <__sinit+0xc>
 8126974:	f7ff ffc4 	bl	8126900 <global_stdio_init.part.0>
 8126978:	e7f2      	b.n	8126960 <__sinit+0xc>
 812697a:	bf00      	nop
 812697c:	081268c1 	.word	0x081268c1
 8126980:	1000e6c0 	.word	0x1000e6c0

08126984 <_fwalk_sglue>:
 8126984:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8126988:	4607      	mov	r7, r0
 812698a:	4688      	mov	r8, r1
 812698c:	4614      	mov	r4, r2
 812698e:	2600      	movs	r6, #0
 8126990:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8126994:	f1b9 0901 	subs.w	r9, r9, #1
 8126998:	d505      	bpl.n	81269a6 <_fwalk_sglue+0x22>
 812699a:	6824      	ldr	r4, [r4, #0]
 812699c:	2c00      	cmp	r4, #0
 812699e:	d1f7      	bne.n	8126990 <_fwalk_sglue+0xc>
 81269a0:	4630      	mov	r0, r6
 81269a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 81269a6:	89ab      	ldrh	r3, [r5, #12]
 81269a8:	2b01      	cmp	r3, #1
 81269aa:	d907      	bls.n	81269bc <_fwalk_sglue+0x38>
 81269ac:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 81269b0:	3301      	adds	r3, #1
 81269b2:	d003      	beq.n	81269bc <_fwalk_sglue+0x38>
 81269b4:	4629      	mov	r1, r5
 81269b6:	4638      	mov	r0, r7
 81269b8:	47c0      	blx	r8
 81269ba:	4306      	orrs	r6, r0
 81269bc:	3568      	adds	r5, #104	@ 0x68
 81269be:	e7e9      	b.n	8126994 <_fwalk_sglue+0x10>

081269c0 <_fwrite_r>:
 81269c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 81269c4:	9c08      	ldr	r4, [sp, #32]
 81269c6:	468a      	mov	sl, r1
 81269c8:	4690      	mov	r8, r2
 81269ca:	fb02 f903 	mul.w	r9, r2, r3
 81269ce:	4606      	mov	r6, r0
 81269d0:	b118      	cbz	r0, 81269da <_fwrite_r+0x1a>
 81269d2:	6a03      	ldr	r3, [r0, #32]
 81269d4:	b90b      	cbnz	r3, 81269da <_fwrite_r+0x1a>
 81269d6:	f7ff ffbd 	bl	8126954 <__sinit>
 81269da:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 81269dc:	07dd      	lsls	r5, r3, #31
 81269de:	d405      	bmi.n	81269ec <_fwrite_r+0x2c>
 81269e0:	89a3      	ldrh	r3, [r4, #12]
 81269e2:	0598      	lsls	r0, r3, #22
 81269e4:	d402      	bmi.n	81269ec <_fwrite_r+0x2c>
 81269e6:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 81269e8:	f000 faa5 	bl	8126f36 <__retarget_lock_acquire_recursive>
 81269ec:	89a3      	ldrh	r3, [r4, #12]
 81269ee:	0719      	lsls	r1, r3, #28
 81269f0:	d516      	bpl.n	8126a20 <_fwrite_r+0x60>
 81269f2:	6923      	ldr	r3, [r4, #16]
 81269f4:	b1a3      	cbz	r3, 8126a20 <_fwrite_r+0x60>
 81269f6:	2500      	movs	r5, #0
 81269f8:	454d      	cmp	r5, r9
 81269fa:	d01f      	beq.n	8126a3c <_fwrite_r+0x7c>
 81269fc:	68a7      	ldr	r7, [r4, #8]
 81269fe:	f81a 1005 	ldrb.w	r1, [sl, r5]
 8126a02:	3f01      	subs	r7, #1
 8126a04:	2f00      	cmp	r7, #0
 8126a06:	60a7      	str	r7, [r4, #8]
 8126a08:	da04      	bge.n	8126a14 <_fwrite_r+0x54>
 8126a0a:	69a3      	ldr	r3, [r4, #24]
 8126a0c:	429f      	cmp	r7, r3
 8126a0e:	db0f      	blt.n	8126a30 <_fwrite_r+0x70>
 8126a10:	290a      	cmp	r1, #10
 8126a12:	d00d      	beq.n	8126a30 <_fwrite_r+0x70>
 8126a14:	6823      	ldr	r3, [r4, #0]
 8126a16:	1c5a      	adds	r2, r3, #1
 8126a18:	6022      	str	r2, [r4, #0]
 8126a1a:	7019      	strb	r1, [r3, #0]
 8126a1c:	3501      	adds	r5, #1
 8126a1e:	e7eb      	b.n	81269f8 <_fwrite_r+0x38>
 8126a20:	4621      	mov	r1, r4
 8126a22:	4630      	mov	r0, r6
 8126a24:	f000 f8ba 	bl	8126b9c <__swsetup_r>
 8126a28:	2800      	cmp	r0, #0
 8126a2a:	d0e4      	beq.n	81269f6 <_fwrite_r+0x36>
 8126a2c:	2500      	movs	r5, #0
 8126a2e:	e005      	b.n	8126a3c <_fwrite_r+0x7c>
 8126a30:	4622      	mov	r2, r4
 8126a32:	4630      	mov	r0, r6
 8126a34:	f000 f873 	bl	8126b1e <__swbuf_r>
 8126a38:	3001      	adds	r0, #1
 8126a3a:	d1ef      	bne.n	8126a1c <_fwrite_r+0x5c>
 8126a3c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8126a3e:	07da      	lsls	r2, r3, #31
 8126a40:	d405      	bmi.n	8126a4e <_fwrite_r+0x8e>
 8126a42:	89a3      	ldrh	r3, [r4, #12]
 8126a44:	059b      	lsls	r3, r3, #22
 8126a46:	d402      	bmi.n	8126a4e <_fwrite_r+0x8e>
 8126a48:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8126a4a:	f000 fa75 	bl	8126f38 <__retarget_lock_release_recursive>
 8126a4e:	fbb5 f0f8 	udiv	r0, r5, r8
 8126a52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

08126a58 <fwrite>:
 8126a58:	b507      	push	{r0, r1, r2, lr}
 8126a5a:	9300      	str	r3, [sp, #0]
 8126a5c:	4613      	mov	r3, r2
 8126a5e:	460a      	mov	r2, r1
 8126a60:	4601      	mov	r1, r0
 8126a62:	4803      	ldr	r0, [pc, #12]	@ (8126a70 <fwrite+0x18>)
 8126a64:	6800      	ldr	r0, [r0, #0]
 8126a66:	f7ff ffab 	bl	81269c0 <_fwrite_r>
 8126a6a:	b003      	add	sp, #12
 8126a6c:	f85d fb04 	ldr.w	pc, [sp], #4
 8126a70:	10000040 	.word	0x10000040

08126a74 <iprintf>:
 8126a74:	b40f      	push	{r0, r1, r2, r3}
 8126a76:	b507      	push	{r0, r1, r2, lr}
 8126a78:	4906      	ldr	r1, [pc, #24]	@ (8126a94 <iprintf+0x20>)
 8126a7a:	ab04      	add	r3, sp, #16
 8126a7c:	6808      	ldr	r0, [r1, #0]
 8126a7e:	f853 2b04 	ldr.w	r2, [r3], #4
 8126a82:	6881      	ldr	r1, [r0, #8]
 8126a84:	9301      	str	r3, [sp, #4]
 8126a86:	f7ff fb69 	bl	812615c <_vfiprintf_r>
 8126a8a:	b003      	add	sp, #12
 8126a8c:	f85d eb04 	ldr.w	lr, [sp], #4
 8126a90:	b004      	add	sp, #16
 8126a92:	4770      	bx	lr
 8126a94:	10000040 	.word	0x10000040

08126a98 <__sread>:
 8126a98:	b510      	push	{r4, lr}
 8126a9a:	460c      	mov	r4, r1
 8126a9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8126aa0:	f000 f9d6 	bl	8126e50 <_read_r>
 8126aa4:	2800      	cmp	r0, #0
 8126aa6:	bfab      	itete	ge
 8126aa8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8126aaa:	89a3      	ldrhlt	r3, [r4, #12]
 8126aac:	181b      	addge	r3, r3, r0
 8126aae:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8126ab2:	bfac      	ite	ge
 8126ab4:	6563      	strge	r3, [r4, #84]	@ 0x54
 8126ab6:	81a3      	strhlt	r3, [r4, #12]
 8126ab8:	bd10      	pop	{r4, pc}

08126aba <__swrite>:
 8126aba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8126abe:	461f      	mov	r7, r3
 8126ac0:	898b      	ldrh	r3, [r1, #12]
 8126ac2:	05db      	lsls	r3, r3, #23
 8126ac4:	4605      	mov	r5, r0
 8126ac6:	460c      	mov	r4, r1
 8126ac8:	4616      	mov	r6, r2
 8126aca:	d505      	bpl.n	8126ad8 <__swrite+0x1e>
 8126acc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8126ad0:	2302      	movs	r3, #2
 8126ad2:	2200      	movs	r2, #0
 8126ad4:	f000 f9aa 	bl	8126e2c <_lseek_r>
 8126ad8:	89a3      	ldrh	r3, [r4, #12]
 8126ada:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8126ade:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8126ae2:	81a3      	strh	r3, [r4, #12]
 8126ae4:	4632      	mov	r2, r6
 8126ae6:	463b      	mov	r3, r7
 8126ae8:	4628      	mov	r0, r5
 8126aea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8126aee:	f000 b9e5 	b.w	8126ebc <_write_r>

08126af2 <__sseek>:
 8126af2:	b510      	push	{r4, lr}
 8126af4:	460c      	mov	r4, r1
 8126af6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8126afa:	f000 f997 	bl	8126e2c <_lseek_r>
 8126afe:	1c43      	adds	r3, r0, #1
 8126b00:	89a3      	ldrh	r3, [r4, #12]
 8126b02:	bf15      	itete	ne
 8126b04:	6560      	strne	r0, [r4, #84]	@ 0x54
 8126b06:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8126b0a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8126b0e:	81a3      	strheq	r3, [r4, #12]
 8126b10:	bf18      	it	ne
 8126b12:	81a3      	strhne	r3, [r4, #12]
 8126b14:	bd10      	pop	{r4, pc}

08126b16 <__sclose>:
 8126b16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8126b1a:	f000 b921 	b.w	8126d60 <_close_r>

08126b1e <__swbuf_r>:
 8126b1e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8126b20:	460e      	mov	r6, r1
 8126b22:	4614      	mov	r4, r2
 8126b24:	4605      	mov	r5, r0
 8126b26:	b118      	cbz	r0, 8126b30 <__swbuf_r+0x12>
 8126b28:	6a03      	ldr	r3, [r0, #32]
 8126b2a:	b90b      	cbnz	r3, 8126b30 <__swbuf_r+0x12>
 8126b2c:	f7ff ff12 	bl	8126954 <__sinit>
 8126b30:	69a3      	ldr	r3, [r4, #24]
 8126b32:	60a3      	str	r3, [r4, #8]
 8126b34:	89a3      	ldrh	r3, [r4, #12]
 8126b36:	071a      	lsls	r2, r3, #28
 8126b38:	d501      	bpl.n	8126b3e <__swbuf_r+0x20>
 8126b3a:	6923      	ldr	r3, [r4, #16]
 8126b3c:	b943      	cbnz	r3, 8126b50 <__swbuf_r+0x32>
 8126b3e:	4621      	mov	r1, r4
 8126b40:	4628      	mov	r0, r5
 8126b42:	f000 f82b 	bl	8126b9c <__swsetup_r>
 8126b46:	b118      	cbz	r0, 8126b50 <__swbuf_r+0x32>
 8126b48:	f04f 37ff 	mov.w	r7, #4294967295
 8126b4c:	4638      	mov	r0, r7
 8126b4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8126b50:	6823      	ldr	r3, [r4, #0]
 8126b52:	6922      	ldr	r2, [r4, #16]
 8126b54:	1a98      	subs	r0, r3, r2
 8126b56:	6963      	ldr	r3, [r4, #20]
 8126b58:	b2f6      	uxtb	r6, r6
 8126b5a:	4283      	cmp	r3, r0
 8126b5c:	4637      	mov	r7, r6
 8126b5e:	dc05      	bgt.n	8126b6c <__swbuf_r+0x4e>
 8126b60:	4621      	mov	r1, r4
 8126b62:	4628      	mov	r0, r5
 8126b64:	f7ff fe2e 	bl	81267c4 <_fflush_r>
 8126b68:	2800      	cmp	r0, #0
 8126b6a:	d1ed      	bne.n	8126b48 <__swbuf_r+0x2a>
 8126b6c:	68a3      	ldr	r3, [r4, #8]
 8126b6e:	3b01      	subs	r3, #1
 8126b70:	60a3      	str	r3, [r4, #8]
 8126b72:	6823      	ldr	r3, [r4, #0]
 8126b74:	1c5a      	adds	r2, r3, #1
 8126b76:	6022      	str	r2, [r4, #0]
 8126b78:	701e      	strb	r6, [r3, #0]
 8126b7a:	6962      	ldr	r2, [r4, #20]
 8126b7c:	1c43      	adds	r3, r0, #1
 8126b7e:	429a      	cmp	r2, r3
 8126b80:	d004      	beq.n	8126b8c <__swbuf_r+0x6e>
 8126b82:	89a3      	ldrh	r3, [r4, #12]
 8126b84:	07db      	lsls	r3, r3, #31
 8126b86:	d5e1      	bpl.n	8126b4c <__swbuf_r+0x2e>
 8126b88:	2e0a      	cmp	r6, #10
 8126b8a:	d1df      	bne.n	8126b4c <__swbuf_r+0x2e>
 8126b8c:	4621      	mov	r1, r4
 8126b8e:	4628      	mov	r0, r5
 8126b90:	f7ff fe18 	bl	81267c4 <_fflush_r>
 8126b94:	2800      	cmp	r0, #0
 8126b96:	d0d9      	beq.n	8126b4c <__swbuf_r+0x2e>
 8126b98:	e7d6      	b.n	8126b48 <__swbuf_r+0x2a>
	...

08126b9c <__swsetup_r>:
 8126b9c:	b538      	push	{r3, r4, r5, lr}
 8126b9e:	4b29      	ldr	r3, [pc, #164]	@ (8126c44 <__swsetup_r+0xa8>)
 8126ba0:	4605      	mov	r5, r0
 8126ba2:	6818      	ldr	r0, [r3, #0]
 8126ba4:	460c      	mov	r4, r1
 8126ba6:	b118      	cbz	r0, 8126bb0 <__swsetup_r+0x14>
 8126ba8:	6a03      	ldr	r3, [r0, #32]
 8126baa:	b90b      	cbnz	r3, 8126bb0 <__swsetup_r+0x14>
 8126bac:	f7ff fed2 	bl	8126954 <__sinit>
 8126bb0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8126bb4:	0719      	lsls	r1, r3, #28
 8126bb6:	d422      	bmi.n	8126bfe <__swsetup_r+0x62>
 8126bb8:	06da      	lsls	r2, r3, #27
 8126bba:	d407      	bmi.n	8126bcc <__swsetup_r+0x30>
 8126bbc:	2209      	movs	r2, #9
 8126bbe:	602a      	str	r2, [r5, #0]
 8126bc0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8126bc4:	81a3      	strh	r3, [r4, #12]
 8126bc6:	f04f 30ff 	mov.w	r0, #4294967295
 8126bca:	e033      	b.n	8126c34 <__swsetup_r+0x98>
 8126bcc:	0758      	lsls	r0, r3, #29
 8126bce:	d512      	bpl.n	8126bf6 <__swsetup_r+0x5a>
 8126bd0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8126bd2:	b141      	cbz	r1, 8126be6 <__swsetup_r+0x4a>
 8126bd4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8126bd8:	4299      	cmp	r1, r3
 8126bda:	d002      	beq.n	8126be2 <__swsetup_r+0x46>
 8126bdc:	4628      	mov	r0, r5
 8126bde:	f000 f9d9 	bl	8126f94 <_free_r>
 8126be2:	2300      	movs	r3, #0
 8126be4:	6363      	str	r3, [r4, #52]	@ 0x34
 8126be6:	89a3      	ldrh	r3, [r4, #12]
 8126be8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8126bec:	81a3      	strh	r3, [r4, #12]
 8126bee:	2300      	movs	r3, #0
 8126bf0:	6063      	str	r3, [r4, #4]
 8126bf2:	6923      	ldr	r3, [r4, #16]
 8126bf4:	6023      	str	r3, [r4, #0]
 8126bf6:	89a3      	ldrh	r3, [r4, #12]
 8126bf8:	f043 0308 	orr.w	r3, r3, #8
 8126bfc:	81a3      	strh	r3, [r4, #12]
 8126bfe:	6923      	ldr	r3, [r4, #16]
 8126c00:	b94b      	cbnz	r3, 8126c16 <__swsetup_r+0x7a>
 8126c02:	89a3      	ldrh	r3, [r4, #12]
 8126c04:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8126c08:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8126c0c:	d003      	beq.n	8126c16 <__swsetup_r+0x7a>
 8126c0e:	4621      	mov	r1, r4
 8126c10:	4628      	mov	r0, r5
 8126c12:	f000 fa41 	bl	8127098 <__smakebuf_r>
 8126c16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8126c1a:	f013 0201 	ands.w	r2, r3, #1
 8126c1e:	d00a      	beq.n	8126c36 <__swsetup_r+0x9a>
 8126c20:	2200      	movs	r2, #0
 8126c22:	60a2      	str	r2, [r4, #8]
 8126c24:	6962      	ldr	r2, [r4, #20]
 8126c26:	4252      	negs	r2, r2
 8126c28:	61a2      	str	r2, [r4, #24]
 8126c2a:	6922      	ldr	r2, [r4, #16]
 8126c2c:	b942      	cbnz	r2, 8126c40 <__swsetup_r+0xa4>
 8126c2e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8126c32:	d1c5      	bne.n	8126bc0 <__swsetup_r+0x24>
 8126c34:	bd38      	pop	{r3, r4, r5, pc}
 8126c36:	0799      	lsls	r1, r3, #30
 8126c38:	bf58      	it	pl
 8126c3a:	6962      	ldrpl	r2, [r4, #20]
 8126c3c:	60a2      	str	r2, [r4, #8]
 8126c3e:	e7f4      	b.n	8126c2a <__swsetup_r+0x8e>
 8126c40:	2000      	movs	r0, #0
 8126c42:	e7f7      	b.n	8126c34 <__swsetup_r+0x98>
 8126c44:	10000040 	.word	0x10000040

08126c48 <memcmp>:
 8126c48:	b510      	push	{r4, lr}
 8126c4a:	3901      	subs	r1, #1
 8126c4c:	4402      	add	r2, r0
 8126c4e:	4290      	cmp	r0, r2
 8126c50:	d101      	bne.n	8126c56 <memcmp+0xe>
 8126c52:	2000      	movs	r0, #0
 8126c54:	e005      	b.n	8126c62 <memcmp+0x1a>
 8126c56:	7803      	ldrb	r3, [r0, #0]
 8126c58:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8126c5c:	42a3      	cmp	r3, r4
 8126c5e:	d001      	beq.n	8126c64 <memcmp+0x1c>
 8126c60:	1b18      	subs	r0, r3, r4
 8126c62:	bd10      	pop	{r4, pc}
 8126c64:	3001      	adds	r0, #1
 8126c66:	e7f2      	b.n	8126c4e <memcmp+0x6>

08126c68 <memmove>:
 8126c68:	4288      	cmp	r0, r1
 8126c6a:	b510      	push	{r4, lr}
 8126c6c:	eb01 0402 	add.w	r4, r1, r2
 8126c70:	d902      	bls.n	8126c78 <memmove+0x10>
 8126c72:	4284      	cmp	r4, r0
 8126c74:	4623      	mov	r3, r4
 8126c76:	d807      	bhi.n	8126c88 <memmove+0x20>
 8126c78:	1e43      	subs	r3, r0, #1
 8126c7a:	42a1      	cmp	r1, r4
 8126c7c:	d008      	beq.n	8126c90 <memmove+0x28>
 8126c7e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8126c82:	f803 2f01 	strb.w	r2, [r3, #1]!
 8126c86:	e7f8      	b.n	8126c7a <memmove+0x12>
 8126c88:	4402      	add	r2, r0
 8126c8a:	4601      	mov	r1, r0
 8126c8c:	428a      	cmp	r2, r1
 8126c8e:	d100      	bne.n	8126c92 <memmove+0x2a>
 8126c90:	bd10      	pop	{r4, pc}
 8126c92:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8126c96:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8126c9a:	e7f7      	b.n	8126c8c <memmove+0x24>

08126c9c <memset>:
 8126c9c:	4402      	add	r2, r0
 8126c9e:	4603      	mov	r3, r0
 8126ca0:	4293      	cmp	r3, r2
 8126ca2:	d100      	bne.n	8126ca6 <memset+0xa>
 8126ca4:	4770      	bx	lr
 8126ca6:	f803 1b01 	strb.w	r1, [r3], #1
 8126caa:	e7f9      	b.n	8126ca0 <memset+0x4>

08126cac <strncpy>:
 8126cac:	b510      	push	{r4, lr}
 8126cae:	3901      	subs	r1, #1
 8126cb0:	4603      	mov	r3, r0
 8126cb2:	b132      	cbz	r2, 8126cc2 <strncpy+0x16>
 8126cb4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8126cb8:	f803 4b01 	strb.w	r4, [r3], #1
 8126cbc:	3a01      	subs	r2, #1
 8126cbe:	2c00      	cmp	r4, #0
 8126cc0:	d1f7      	bne.n	8126cb2 <strncpy+0x6>
 8126cc2:	441a      	add	r2, r3
 8126cc4:	2100      	movs	r1, #0
 8126cc6:	4293      	cmp	r3, r2
 8126cc8:	d100      	bne.n	8126ccc <strncpy+0x20>
 8126cca:	bd10      	pop	{r4, pc}
 8126ccc:	f803 1b01 	strb.w	r1, [r3], #1
 8126cd0:	e7f9      	b.n	8126cc6 <strncpy+0x1a>

08126cd2 <strstr>:
 8126cd2:	780a      	ldrb	r2, [r1, #0]
 8126cd4:	b570      	push	{r4, r5, r6, lr}
 8126cd6:	b96a      	cbnz	r2, 8126cf4 <strstr+0x22>
 8126cd8:	bd70      	pop	{r4, r5, r6, pc}
 8126cda:	429a      	cmp	r2, r3
 8126cdc:	d109      	bne.n	8126cf2 <strstr+0x20>
 8126cde:	460c      	mov	r4, r1
 8126ce0:	4605      	mov	r5, r0
 8126ce2:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8126ce6:	2b00      	cmp	r3, #0
 8126ce8:	d0f6      	beq.n	8126cd8 <strstr+0x6>
 8126cea:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8126cee:	429e      	cmp	r6, r3
 8126cf0:	d0f7      	beq.n	8126ce2 <strstr+0x10>
 8126cf2:	3001      	adds	r0, #1
 8126cf4:	7803      	ldrb	r3, [r0, #0]
 8126cf6:	2b00      	cmp	r3, #0
 8126cf8:	d1ef      	bne.n	8126cda <strstr+0x8>
 8126cfa:	4618      	mov	r0, r3
 8126cfc:	e7ec      	b.n	8126cd8 <strstr+0x6>

08126cfe <_raise_r>:
 8126cfe:	291f      	cmp	r1, #31
 8126d00:	b538      	push	{r3, r4, r5, lr}
 8126d02:	4605      	mov	r5, r0
 8126d04:	460c      	mov	r4, r1
 8126d06:	d904      	bls.n	8126d12 <_raise_r+0x14>
 8126d08:	2316      	movs	r3, #22
 8126d0a:	6003      	str	r3, [r0, #0]
 8126d0c:	f04f 30ff 	mov.w	r0, #4294967295
 8126d10:	bd38      	pop	{r3, r4, r5, pc}
 8126d12:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8126d14:	b112      	cbz	r2, 8126d1c <_raise_r+0x1e>
 8126d16:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8126d1a:	b94b      	cbnz	r3, 8126d30 <_raise_r+0x32>
 8126d1c:	4628      	mov	r0, r5
 8126d1e:	f000 f8bb 	bl	8126e98 <_getpid_r>
 8126d22:	4622      	mov	r2, r4
 8126d24:	4601      	mov	r1, r0
 8126d26:	4628      	mov	r0, r5
 8126d28:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8126d2c:	f000 b8a2 	b.w	8126e74 <_kill_r>
 8126d30:	2b01      	cmp	r3, #1
 8126d32:	d00a      	beq.n	8126d4a <_raise_r+0x4c>
 8126d34:	1c59      	adds	r1, r3, #1
 8126d36:	d103      	bne.n	8126d40 <_raise_r+0x42>
 8126d38:	2316      	movs	r3, #22
 8126d3a:	6003      	str	r3, [r0, #0]
 8126d3c:	2001      	movs	r0, #1
 8126d3e:	e7e7      	b.n	8126d10 <_raise_r+0x12>
 8126d40:	2100      	movs	r1, #0
 8126d42:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8126d46:	4620      	mov	r0, r4
 8126d48:	4798      	blx	r3
 8126d4a:	2000      	movs	r0, #0
 8126d4c:	e7e0      	b.n	8126d10 <_raise_r+0x12>
	...

08126d50 <raise>:
 8126d50:	4b02      	ldr	r3, [pc, #8]	@ (8126d5c <raise+0xc>)
 8126d52:	4601      	mov	r1, r0
 8126d54:	6818      	ldr	r0, [r3, #0]
 8126d56:	f7ff bfd2 	b.w	8126cfe <_raise_r>
 8126d5a:	bf00      	nop
 8126d5c:	10000040 	.word	0x10000040

08126d60 <_close_r>:
 8126d60:	b538      	push	{r3, r4, r5, lr}
 8126d62:	4d06      	ldr	r5, [pc, #24]	@ (8126d7c <_close_r+0x1c>)
 8126d64:	2300      	movs	r3, #0
 8126d66:	4604      	mov	r4, r0
 8126d68:	4608      	mov	r0, r1
 8126d6a:	602b      	str	r3, [r5, #0]
 8126d6c:	f7dd fed6 	bl	8104b1c <_close>
 8126d70:	1c43      	adds	r3, r0, #1
 8126d72:	d102      	bne.n	8126d7a <_close_r+0x1a>
 8126d74:	682b      	ldr	r3, [r5, #0]
 8126d76:	b103      	cbz	r3, 8126d7a <_close_r+0x1a>
 8126d78:	6023      	str	r3, [r4, #0]
 8126d7a:	bd38      	pop	{r3, r4, r5, pc}
 8126d7c:	1000e6c4 	.word	0x1000e6c4

08126d80 <_reclaim_reent>:
 8126d80:	4b29      	ldr	r3, [pc, #164]	@ (8126e28 <_reclaim_reent+0xa8>)
 8126d82:	681b      	ldr	r3, [r3, #0]
 8126d84:	4283      	cmp	r3, r0
 8126d86:	b570      	push	{r4, r5, r6, lr}
 8126d88:	4604      	mov	r4, r0
 8126d8a:	d04b      	beq.n	8126e24 <_reclaim_reent+0xa4>
 8126d8c:	69c3      	ldr	r3, [r0, #28]
 8126d8e:	b1ab      	cbz	r3, 8126dbc <_reclaim_reent+0x3c>
 8126d90:	68db      	ldr	r3, [r3, #12]
 8126d92:	b16b      	cbz	r3, 8126db0 <_reclaim_reent+0x30>
 8126d94:	2500      	movs	r5, #0
 8126d96:	69e3      	ldr	r3, [r4, #28]
 8126d98:	68db      	ldr	r3, [r3, #12]
 8126d9a:	5959      	ldr	r1, [r3, r5]
 8126d9c:	2900      	cmp	r1, #0
 8126d9e:	d13b      	bne.n	8126e18 <_reclaim_reent+0x98>
 8126da0:	3504      	adds	r5, #4
 8126da2:	2d80      	cmp	r5, #128	@ 0x80
 8126da4:	d1f7      	bne.n	8126d96 <_reclaim_reent+0x16>
 8126da6:	69e3      	ldr	r3, [r4, #28]
 8126da8:	4620      	mov	r0, r4
 8126daa:	68d9      	ldr	r1, [r3, #12]
 8126dac:	f000 f8f2 	bl	8126f94 <_free_r>
 8126db0:	69e3      	ldr	r3, [r4, #28]
 8126db2:	6819      	ldr	r1, [r3, #0]
 8126db4:	b111      	cbz	r1, 8126dbc <_reclaim_reent+0x3c>
 8126db6:	4620      	mov	r0, r4
 8126db8:	f000 f8ec 	bl	8126f94 <_free_r>
 8126dbc:	6961      	ldr	r1, [r4, #20]
 8126dbe:	b111      	cbz	r1, 8126dc6 <_reclaim_reent+0x46>
 8126dc0:	4620      	mov	r0, r4
 8126dc2:	f000 f8e7 	bl	8126f94 <_free_r>
 8126dc6:	69e1      	ldr	r1, [r4, #28]
 8126dc8:	b111      	cbz	r1, 8126dd0 <_reclaim_reent+0x50>
 8126dca:	4620      	mov	r0, r4
 8126dcc:	f000 f8e2 	bl	8126f94 <_free_r>
 8126dd0:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8126dd2:	b111      	cbz	r1, 8126dda <_reclaim_reent+0x5a>
 8126dd4:	4620      	mov	r0, r4
 8126dd6:	f000 f8dd 	bl	8126f94 <_free_r>
 8126dda:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8126ddc:	b111      	cbz	r1, 8126de4 <_reclaim_reent+0x64>
 8126dde:	4620      	mov	r0, r4
 8126de0:	f000 f8d8 	bl	8126f94 <_free_r>
 8126de4:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8126de6:	b111      	cbz	r1, 8126dee <_reclaim_reent+0x6e>
 8126de8:	4620      	mov	r0, r4
 8126dea:	f000 f8d3 	bl	8126f94 <_free_r>
 8126dee:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8126df0:	b111      	cbz	r1, 8126df8 <_reclaim_reent+0x78>
 8126df2:	4620      	mov	r0, r4
 8126df4:	f000 f8ce 	bl	8126f94 <_free_r>
 8126df8:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8126dfa:	b111      	cbz	r1, 8126e02 <_reclaim_reent+0x82>
 8126dfc:	4620      	mov	r0, r4
 8126dfe:	f000 f8c9 	bl	8126f94 <_free_r>
 8126e02:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8126e04:	b111      	cbz	r1, 8126e0c <_reclaim_reent+0x8c>
 8126e06:	4620      	mov	r0, r4
 8126e08:	f000 f8c4 	bl	8126f94 <_free_r>
 8126e0c:	6a23      	ldr	r3, [r4, #32]
 8126e0e:	b14b      	cbz	r3, 8126e24 <_reclaim_reent+0xa4>
 8126e10:	4620      	mov	r0, r4
 8126e12:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8126e16:	4718      	bx	r3
 8126e18:	680e      	ldr	r6, [r1, #0]
 8126e1a:	4620      	mov	r0, r4
 8126e1c:	f000 f8ba 	bl	8126f94 <_free_r>
 8126e20:	4631      	mov	r1, r6
 8126e22:	e7bb      	b.n	8126d9c <_reclaim_reent+0x1c>
 8126e24:	bd70      	pop	{r4, r5, r6, pc}
 8126e26:	bf00      	nop
 8126e28:	10000040 	.word	0x10000040

08126e2c <_lseek_r>:
 8126e2c:	b538      	push	{r3, r4, r5, lr}
 8126e2e:	4d07      	ldr	r5, [pc, #28]	@ (8126e4c <_lseek_r+0x20>)
 8126e30:	4604      	mov	r4, r0
 8126e32:	4608      	mov	r0, r1
 8126e34:	4611      	mov	r1, r2
 8126e36:	2200      	movs	r2, #0
 8126e38:	602a      	str	r2, [r5, #0]
 8126e3a:	461a      	mov	r2, r3
 8126e3c:	f7dd fe95 	bl	8104b6a <_lseek>
 8126e40:	1c43      	adds	r3, r0, #1
 8126e42:	d102      	bne.n	8126e4a <_lseek_r+0x1e>
 8126e44:	682b      	ldr	r3, [r5, #0]
 8126e46:	b103      	cbz	r3, 8126e4a <_lseek_r+0x1e>
 8126e48:	6023      	str	r3, [r4, #0]
 8126e4a:	bd38      	pop	{r3, r4, r5, pc}
 8126e4c:	1000e6c4 	.word	0x1000e6c4

08126e50 <_read_r>:
 8126e50:	b538      	push	{r3, r4, r5, lr}
 8126e52:	4d07      	ldr	r5, [pc, #28]	@ (8126e70 <_read_r+0x20>)
 8126e54:	4604      	mov	r4, r0
 8126e56:	4608      	mov	r0, r1
 8126e58:	4611      	mov	r1, r2
 8126e5a:	2200      	movs	r2, #0
 8126e5c:	602a      	str	r2, [r5, #0]
 8126e5e:	461a      	mov	r2, r3
 8126e60:	f7dd fe23 	bl	8104aaa <_read>
 8126e64:	1c43      	adds	r3, r0, #1
 8126e66:	d102      	bne.n	8126e6e <_read_r+0x1e>
 8126e68:	682b      	ldr	r3, [r5, #0]
 8126e6a:	b103      	cbz	r3, 8126e6e <_read_r+0x1e>
 8126e6c:	6023      	str	r3, [r4, #0]
 8126e6e:	bd38      	pop	{r3, r4, r5, pc}
 8126e70:	1000e6c4 	.word	0x1000e6c4

08126e74 <_kill_r>:
 8126e74:	b538      	push	{r3, r4, r5, lr}
 8126e76:	4d07      	ldr	r5, [pc, #28]	@ (8126e94 <_kill_r+0x20>)
 8126e78:	2300      	movs	r3, #0
 8126e7a:	4604      	mov	r4, r0
 8126e7c:	4608      	mov	r0, r1
 8126e7e:	4611      	mov	r1, r2
 8126e80:	602b      	str	r3, [r5, #0]
 8126e82:	f7dd fdf5 	bl	8104a70 <_kill>
 8126e86:	1c43      	adds	r3, r0, #1
 8126e88:	d102      	bne.n	8126e90 <_kill_r+0x1c>
 8126e8a:	682b      	ldr	r3, [r5, #0]
 8126e8c:	b103      	cbz	r3, 8126e90 <_kill_r+0x1c>
 8126e8e:	6023      	str	r3, [r4, #0]
 8126e90:	bd38      	pop	{r3, r4, r5, pc}
 8126e92:	bf00      	nop
 8126e94:	1000e6c4 	.word	0x1000e6c4

08126e98 <_getpid_r>:
 8126e98:	f7dd bde2 	b.w	8104a60 <_getpid>

08126e9c <_sbrk_r>:
 8126e9c:	b538      	push	{r3, r4, r5, lr}
 8126e9e:	4d06      	ldr	r5, [pc, #24]	@ (8126eb8 <_sbrk_r+0x1c>)
 8126ea0:	2300      	movs	r3, #0
 8126ea2:	4604      	mov	r4, r0
 8126ea4:	4608      	mov	r0, r1
 8126ea6:	602b      	str	r3, [r5, #0]
 8126ea8:	f7dd fe6c 	bl	8104b84 <_sbrk>
 8126eac:	1c43      	adds	r3, r0, #1
 8126eae:	d102      	bne.n	8126eb6 <_sbrk_r+0x1a>
 8126eb0:	682b      	ldr	r3, [r5, #0]
 8126eb2:	b103      	cbz	r3, 8126eb6 <_sbrk_r+0x1a>
 8126eb4:	6023      	str	r3, [r4, #0]
 8126eb6:	bd38      	pop	{r3, r4, r5, pc}
 8126eb8:	1000e6c4 	.word	0x1000e6c4

08126ebc <_write_r>:
 8126ebc:	b538      	push	{r3, r4, r5, lr}
 8126ebe:	4d07      	ldr	r5, [pc, #28]	@ (8126edc <_write_r+0x20>)
 8126ec0:	4604      	mov	r4, r0
 8126ec2:	4608      	mov	r0, r1
 8126ec4:	4611      	mov	r1, r2
 8126ec6:	2200      	movs	r2, #0
 8126ec8:	602a      	str	r2, [r5, #0]
 8126eca:	461a      	mov	r2, r3
 8126ecc:	f7dd fe0a 	bl	8104ae4 <_write>
 8126ed0:	1c43      	adds	r3, r0, #1
 8126ed2:	d102      	bne.n	8126eda <_write_r+0x1e>
 8126ed4:	682b      	ldr	r3, [r5, #0]
 8126ed6:	b103      	cbz	r3, 8126eda <_write_r+0x1e>
 8126ed8:	6023      	str	r3, [r4, #0]
 8126eda:	bd38      	pop	{r3, r4, r5, pc}
 8126edc:	1000e6c4 	.word	0x1000e6c4

08126ee0 <__errno>:
 8126ee0:	4b01      	ldr	r3, [pc, #4]	@ (8126ee8 <__errno+0x8>)
 8126ee2:	6818      	ldr	r0, [r3, #0]
 8126ee4:	4770      	bx	lr
 8126ee6:	bf00      	nop
 8126ee8:	10000040 	.word	0x10000040

08126eec <__libc_init_array>:
 8126eec:	b570      	push	{r4, r5, r6, lr}
 8126eee:	4d0d      	ldr	r5, [pc, #52]	@ (8126f24 <__libc_init_array+0x38>)
 8126ef0:	4c0d      	ldr	r4, [pc, #52]	@ (8126f28 <__libc_init_array+0x3c>)
 8126ef2:	1b64      	subs	r4, r4, r5
 8126ef4:	10a4      	asrs	r4, r4, #2
 8126ef6:	2600      	movs	r6, #0
 8126ef8:	42a6      	cmp	r6, r4
 8126efa:	d109      	bne.n	8126f10 <__libc_init_array+0x24>
 8126efc:	4d0b      	ldr	r5, [pc, #44]	@ (8126f2c <__libc_init_array+0x40>)
 8126efe:	4c0c      	ldr	r4, [pc, #48]	@ (8126f30 <__libc_init_array+0x44>)
 8126f00:	f000 f928 	bl	8127154 <_init>
 8126f04:	1b64      	subs	r4, r4, r5
 8126f06:	10a4      	asrs	r4, r4, #2
 8126f08:	2600      	movs	r6, #0
 8126f0a:	42a6      	cmp	r6, r4
 8126f0c:	d105      	bne.n	8126f1a <__libc_init_array+0x2e>
 8126f0e:	bd70      	pop	{r4, r5, r6, pc}
 8126f10:	f855 3b04 	ldr.w	r3, [r5], #4
 8126f14:	4798      	blx	r3
 8126f16:	3601      	adds	r6, #1
 8126f18:	e7ee      	b.n	8126ef8 <__libc_init_array+0xc>
 8126f1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8126f1e:	4798      	blx	r3
 8126f20:	3601      	adds	r6, #1
 8126f22:	e7f2      	b.n	8126f0a <__libc_init_array+0x1e>
 8126f24:	0812b55c 	.word	0x0812b55c
 8126f28:	0812b55c 	.word	0x0812b55c
 8126f2c:	0812b55c 	.word	0x0812b55c
 8126f30:	0812b570 	.word	0x0812b570

08126f34 <__retarget_lock_init_recursive>:
 8126f34:	4770      	bx	lr

08126f36 <__retarget_lock_acquire_recursive>:
 8126f36:	4770      	bx	lr

08126f38 <__retarget_lock_release_recursive>:
 8126f38:	4770      	bx	lr

08126f3a <memcpy>:
 8126f3a:	440a      	add	r2, r1
 8126f3c:	4291      	cmp	r1, r2
 8126f3e:	f100 33ff 	add.w	r3, r0, #4294967295
 8126f42:	d100      	bne.n	8126f46 <memcpy+0xc>
 8126f44:	4770      	bx	lr
 8126f46:	b510      	push	{r4, lr}
 8126f48:	f811 4b01 	ldrb.w	r4, [r1], #1
 8126f4c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8126f50:	4291      	cmp	r1, r2
 8126f52:	d1f9      	bne.n	8126f48 <memcpy+0xe>
 8126f54:	bd10      	pop	{r4, pc}
	...

08126f58 <__assert_func>:
 8126f58:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8126f5a:	4614      	mov	r4, r2
 8126f5c:	461a      	mov	r2, r3
 8126f5e:	4b09      	ldr	r3, [pc, #36]	@ (8126f84 <__assert_func+0x2c>)
 8126f60:	681b      	ldr	r3, [r3, #0]
 8126f62:	4605      	mov	r5, r0
 8126f64:	68d8      	ldr	r0, [r3, #12]
 8126f66:	b954      	cbnz	r4, 8126f7e <__assert_func+0x26>
 8126f68:	4b07      	ldr	r3, [pc, #28]	@ (8126f88 <__assert_func+0x30>)
 8126f6a:	461c      	mov	r4, r3
 8126f6c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8126f70:	9100      	str	r1, [sp, #0]
 8126f72:	462b      	mov	r3, r5
 8126f74:	4905      	ldr	r1, [pc, #20]	@ (8126f8c <__assert_func+0x34>)
 8126f76:	f000 f857 	bl	8127028 <fiprintf>
 8126f7a:	f7fe ff3d 	bl	8125df8 <abort>
 8126f7e:	4b04      	ldr	r3, [pc, #16]	@ (8126f90 <__assert_func+0x38>)
 8126f80:	e7f4      	b.n	8126f6c <__assert_func+0x14>
 8126f82:	bf00      	nop
 8126f84:	10000040 	.word	0x10000040
 8126f88:	0812b552 	.word	0x0812b552
 8126f8c:	0812b524 	.word	0x0812b524
 8126f90:	0812b517 	.word	0x0812b517

08126f94 <_free_r>:
 8126f94:	b538      	push	{r3, r4, r5, lr}
 8126f96:	4605      	mov	r5, r0
 8126f98:	2900      	cmp	r1, #0
 8126f9a:	d041      	beq.n	8127020 <_free_r+0x8c>
 8126f9c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8126fa0:	1f0c      	subs	r4, r1, #4
 8126fa2:	2b00      	cmp	r3, #0
 8126fa4:	bfb8      	it	lt
 8126fa6:	18e4      	addlt	r4, r4, r3
 8126fa8:	f7fe ffe0 	bl	8125f6c <__malloc_lock>
 8126fac:	4a1d      	ldr	r2, [pc, #116]	@ (8127024 <_free_r+0x90>)
 8126fae:	6813      	ldr	r3, [r2, #0]
 8126fb0:	b933      	cbnz	r3, 8126fc0 <_free_r+0x2c>
 8126fb2:	6063      	str	r3, [r4, #4]
 8126fb4:	6014      	str	r4, [r2, #0]
 8126fb6:	4628      	mov	r0, r5
 8126fb8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8126fbc:	f7fe bfdc 	b.w	8125f78 <__malloc_unlock>
 8126fc0:	42a3      	cmp	r3, r4
 8126fc2:	d908      	bls.n	8126fd6 <_free_r+0x42>
 8126fc4:	6820      	ldr	r0, [r4, #0]
 8126fc6:	1821      	adds	r1, r4, r0
 8126fc8:	428b      	cmp	r3, r1
 8126fca:	bf01      	itttt	eq
 8126fcc:	6819      	ldreq	r1, [r3, #0]
 8126fce:	685b      	ldreq	r3, [r3, #4]
 8126fd0:	1809      	addeq	r1, r1, r0
 8126fd2:	6021      	streq	r1, [r4, #0]
 8126fd4:	e7ed      	b.n	8126fb2 <_free_r+0x1e>
 8126fd6:	461a      	mov	r2, r3
 8126fd8:	685b      	ldr	r3, [r3, #4]
 8126fda:	b10b      	cbz	r3, 8126fe0 <_free_r+0x4c>
 8126fdc:	42a3      	cmp	r3, r4
 8126fde:	d9fa      	bls.n	8126fd6 <_free_r+0x42>
 8126fe0:	6811      	ldr	r1, [r2, #0]
 8126fe2:	1850      	adds	r0, r2, r1
 8126fe4:	42a0      	cmp	r0, r4
 8126fe6:	d10b      	bne.n	8127000 <_free_r+0x6c>
 8126fe8:	6820      	ldr	r0, [r4, #0]
 8126fea:	4401      	add	r1, r0
 8126fec:	1850      	adds	r0, r2, r1
 8126fee:	4283      	cmp	r3, r0
 8126ff0:	6011      	str	r1, [r2, #0]
 8126ff2:	d1e0      	bne.n	8126fb6 <_free_r+0x22>
 8126ff4:	6818      	ldr	r0, [r3, #0]
 8126ff6:	685b      	ldr	r3, [r3, #4]
 8126ff8:	6053      	str	r3, [r2, #4]
 8126ffa:	4408      	add	r0, r1
 8126ffc:	6010      	str	r0, [r2, #0]
 8126ffe:	e7da      	b.n	8126fb6 <_free_r+0x22>
 8127000:	d902      	bls.n	8127008 <_free_r+0x74>
 8127002:	230c      	movs	r3, #12
 8127004:	602b      	str	r3, [r5, #0]
 8127006:	e7d6      	b.n	8126fb6 <_free_r+0x22>
 8127008:	6820      	ldr	r0, [r4, #0]
 812700a:	1821      	adds	r1, r4, r0
 812700c:	428b      	cmp	r3, r1
 812700e:	bf04      	itt	eq
 8127010:	6819      	ldreq	r1, [r3, #0]
 8127012:	685b      	ldreq	r3, [r3, #4]
 8127014:	6063      	str	r3, [r4, #4]
 8127016:	bf04      	itt	eq
 8127018:	1809      	addeq	r1, r1, r0
 812701a:	6021      	streq	r1, [r4, #0]
 812701c:	6054      	str	r4, [r2, #4]
 812701e:	e7ca      	b.n	8126fb6 <_free_r+0x22>
 8127020:	bd38      	pop	{r3, r4, r5, pc}
 8127022:	bf00      	nop
 8127024:	1000e584 	.word	0x1000e584

08127028 <fiprintf>:
 8127028:	b40e      	push	{r1, r2, r3}
 812702a:	b503      	push	{r0, r1, lr}
 812702c:	4601      	mov	r1, r0
 812702e:	ab03      	add	r3, sp, #12
 8127030:	4805      	ldr	r0, [pc, #20]	@ (8127048 <fiprintf+0x20>)
 8127032:	f853 2b04 	ldr.w	r2, [r3], #4
 8127036:	6800      	ldr	r0, [r0, #0]
 8127038:	9301      	str	r3, [sp, #4]
 812703a:	f7ff f88f 	bl	812615c <_vfiprintf_r>
 812703e:	b002      	add	sp, #8
 8127040:	f85d eb04 	ldr.w	lr, [sp], #4
 8127044:	b003      	add	sp, #12
 8127046:	4770      	bx	lr
 8127048:	10000040 	.word	0x10000040

0812704c <__swhatbuf_r>:
 812704c:	b570      	push	{r4, r5, r6, lr}
 812704e:	460c      	mov	r4, r1
 8127050:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8127054:	2900      	cmp	r1, #0
 8127056:	b096      	sub	sp, #88	@ 0x58
 8127058:	4615      	mov	r5, r2
 812705a:	461e      	mov	r6, r3
 812705c:	da0d      	bge.n	812707a <__swhatbuf_r+0x2e>
 812705e:	89a3      	ldrh	r3, [r4, #12]
 8127060:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8127064:	f04f 0100 	mov.w	r1, #0
 8127068:	bf14      	ite	ne
 812706a:	2340      	movne	r3, #64	@ 0x40
 812706c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8127070:	2000      	movs	r0, #0
 8127072:	6031      	str	r1, [r6, #0]
 8127074:	602b      	str	r3, [r5, #0]
 8127076:	b016      	add	sp, #88	@ 0x58
 8127078:	bd70      	pop	{r4, r5, r6, pc}
 812707a:	466a      	mov	r2, sp
 812707c:	f000 f848 	bl	8127110 <_fstat_r>
 8127080:	2800      	cmp	r0, #0
 8127082:	dbec      	blt.n	812705e <__swhatbuf_r+0x12>
 8127084:	9901      	ldr	r1, [sp, #4]
 8127086:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 812708a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 812708e:	4259      	negs	r1, r3
 8127090:	4159      	adcs	r1, r3
 8127092:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8127096:	e7eb      	b.n	8127070 <__swhatbuf_r+0x24>

08127098 <__smakebuf_r>:
 8127098:	898b      	ldrh	r3, [r1, #12]
 812709a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 812709c:	079d      	lsls	r5, r3, #30
 812709e:	4606      	mov	r6, r0
 81270a0:	460c      	mov	r4, r1
 81270a2:	d507      	bpl.n	81270b4 <__smakebuf_r+0x1c>
 81270a4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 81270a8:	6023      	str	r3, [r4, #0]
 81270aa:	6123      	str	r3, [r4, #16]
 81270ac:	2301      	movs	r3, #1
 81270ae:	6163      	str	r3, [r4, #20]
 81270b0:	b003      	add	sp, #12
 81270b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 81270b4:	ab01      	add	r3, sp, #4
 81270b6:	466a      	mov	r2, sp
 81270b8:	f7ff ffc8 	bl	812704c <__swhatbuf_r>
 81270bc:	9f00      	ldr	r7, [sp, #0]
 81270be:	4605      	mov	r5, r0
 81270c0:	4639      	mov	r1, r7
 81270c2:	4630      	mov	r0, r6
 81270c4:	f7fe fed2 	bl	8125e6c <_malloc_r>
 81270c8:	b948      	cbnz	r0, 81270de <__smakebuf_r+0x46>
 81270ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 81270ce:	059a      	lsls	r2, r3, #22
 81270d0:	d4ee      	bmi.n	81270b0 <__smakebuf_r+0x18>
 81270d2:	f023 0303 	bic.w	r3, r3, #3
 81270d6:	f043 0302 	orr.w	r3, r3, #2
 81270da:	81a3      	strh	r3, [r4, #12]
 81270dc:	e7e2      	b.n	81270a4 <__smakebuf_r+0xc>
 81270de:	89a3      	ldrh	r3, [r4, #12]
 81270e0:	6020      	str	r0, [r4, #0]
 81270e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 81270e6:	81a3      	strh	r3, [r4, #12]
 81270e8:	9b01      	ldr	r3, [sp, #4]
 81270ea:	e9c4 0704 	strd	r0, r7, [r4, #16]
 81270ee:	b15b      	cbz	r3, 8127108 <__smakebuf_r+0x70>
 81270f0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 81270f4:	4630      	mov	r0, r6
 81270f6:	f000 f81d 	bl	8127134 <_isatty_r>
 81270fa:	b128      	cbz	r0, 8127108 <__smakebuf_r+0x70>
 81270fc:	89a3      	ldrh	r3, [r4, #12]
 81270fe:	f023 0303 	bic.w	r3, r3, #3
 8127102:	f043 0301 	orr.w	r3, r3, #1
 8127106:	81a3      	strh	r3, [r4, #12]
 8127108:	89a3      	ldrh	r3, [r4, #12]
 812710a:	431d      	orrs	r5, r3
 812710c:	81a5      	strh	r5, [r4, #12]
 812710e:	e7cf      	b.n	81270b0 <__smakebuf_r+0x18>

08127110 <_fstat_r>:
 8127110:	b538      	push	{r3, r4, r5, lr}
 8127112:	4d07      	ldr	r5, [pc, #28]	@ (8127130 <_fstat_r+0x20>)
 8127114:	2300      	movs	r3, #0
 8127116:	4604      	mov	r4, r0
 8127118:	4608      	mov	r0, r1
 812711a:	4611      	mov	r1, r2
 812711c:	602b      	str	r3, [r5, #0]
 812711e:	f7dd fd09 	bl	8104b34 <_fstat>
 8127122:	1c43      	adds	r3, r0, #1
 8127124:	d102      	bne.n	812712c <_fstat_r+0x1c>
 8127126:	682b      	ldr	r3, [r5, #0]
 8127128:	b103      	cbz	r3, 812712c <_fstat_r+0x1c>
 812712a:	6023      	str	r3, [r4, #0]
 812712c:	bd38      	pop	{r3, r4, r5, pc}
 812712e:	bf00      	nop
 8127130:	1000e6c4 	.word	0x1000e6c4

08127134 <_isatty_r>:
 8127134:	b538      	push	{r3, r4, r5, lr}
 8127136:	4d06      	ldr	r5, [pc, #24]	@ (8127150 <_isatty_r+0x1c>)
 8127138:	2300      	movs	r3, #0
 812713a:	4604      	mov	r4, r0
 812713c:	4608      	mov	r0, r1
 812713e:	602b      	str	r3, [r5, #0]
 8127140:	f7dd fd08 	bl	8104b54 <_isatty>
 8127144:	1c43      	adds	r3, r0, #1
 8127146:	d102      	bne.n	812714e <_isatty_r+0x1a>
 8127148:	682b      	ldr	r3, [r5, #0]
 812714a:	b103      	cbz	r3, 812714e <_isatty_r+0x1a>
 812714c:	6023      	str	r3, [r4, #0]
 812714e:	bd38      	pop	{r3, r4, r5, pc}
 8127150:	1000e6c4 	.word	0x1000e6c4

08127154 <_init>:
 8127154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8127156:	bf00      	nop
 8127158:	bcf8      	pop	{r3, r4, r5, r6, r7}
 812715a:	bc08      	pop	{r3}
 812715c:	469e      	mov	lr, r3
 812715e:	4770      	bx	lr

08127160 <_fini>:
 8127160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8127162:	bf00      	nop
 8127164:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8127166:	bc08      	pop	{r3}
 8127168:	469e      	mov	lr, r3
 812716a:	4770      	bx	lr
